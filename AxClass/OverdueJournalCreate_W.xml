<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OverdueJournalCreate_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>OverdueJournalCreate_W</c> used to fill different types of overdue debt journals with data.
/// </summary>
/// <remarks>
/// This class is the base class for Customer/Vendor VAT and CIT/PIT overdue debt journals.
/// The overdue debt change is calculated as difference between current and previous overdue debt journals.
/// </remarks>
abstract class OverdueJournalCreate_W extends RunBaseBatch
{
    TransDate                transDate;
    Description              description;

    OverdueJournalSettings_W overdueJournalSettings;

    RecordSortedList         turnLinesList,
                             debtLinesList;

    OverdueJournalTable_W    overdueJournalTable,
                             previousJournalTable;

    OverdueDebtJournalLine_W overdueDebtJournalLine;

    private const Version currentVersion = 1;

    #localMacro.currentList
        transDate,
        description
    #endMacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addOverdueTurnJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds new <c>OverdueTurnJournalLine_W</c> to the journal depending on total overdue debt by invoice and due date
    /// from current and previous journal.
    /// </summary>
    /// <param name="_previousDebtLine">
    /// <c>OverdueDebtJournalLine_W</c> record by invoice and due date from previous journal.
    /// </param>
    /// <param name="_currentDebtLine">
    /// <c>OverdueDebtJournalLine_W</c> record by invoice and due date from current journal.
    /// </param>
    /// <remarks>
    /// The line will not be created if certain conditions met, for example tax is zero.
    /// </remarks>
    protected void addOverdueTurnJournalLine(OverdueDebtJournalLine_W _previousDebtLine, OverdueDebtJournalLine_W _currentDebtLine)
    {
        OverdueTurnJournalLine_W    overdueTurnJournalLine  = this.initOverdueTurnJournalLine(_previousDebtLine, _currentDebtLine);

        overdueTurnJournalLine.OverdueTurnJournalLine_W::initFromOverdueDebtJournalLines(_previousDebtLine, _currentDebtLine);

        if (this.mustCreateLine(overdueTurnJournalLine))
        {
            turnLinesList.ins(overdueTurnJournalLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuerySharedPart</Name>
				<Source><![CDATA[
    private Query buildQuerySharedPart()
    {
        Query query;
        QueryBuildDataSource qbdsCustVendTrans;

        if (this.queryRun())
        {
            query = new Query(this.queryRun().query());
        }
        else
        {
            query = new Query();
            qbdsCustVendTrans = query.addDataSource(this.custVendTransTableId());
            qbdsCustVendTrans.addRange(this.invoiceFieldId()).value(SysQuery::valueNotEmptyString());
            qbdsCustVendTrans.addSortField(fieldNum(Common, RecId));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryOverdueSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds query which will be used for fetching of settlements which were made after the date of current journal, so this debt was overdue.
    /// </summary>
    /// <returns>
    /// <c>Query</c> object.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// If invalid enum value has been passed.
    /// </exception>
    protected Query buildQueryOverdueSettlement()
    {
        Query query;
        QueryBuildDataSource qbdsCustVendTrans;
        QueryBuildDataSource qbdsCustVendSettlement;
        QueryBuildRange qbrTransDate;
        QueryBuildRange qbrDate;
        QueryBuildRange qbrRecId;

        query = this.buildQuerySharedPart();
        qbdsCustVendTrans = query.dataSourceTable(this.custVendTransTableId());
        qbdsCustVendTrans.addRange(this.transTypeFieldId()).value(SysQuery::valueNot(LedgerTransType::ExchAdjustment));

        qbdsCustVendSettlement = qbdsCustVendTrans.addDataSource(this.custVendSettlementTableId());
        qbdsCustVendSettlement.joinMode(JoinMode::InnerJoin);
        qbdsCustVendSettlement.fetchMode(QueryFetchMode::One2One);
        qbrTransDate = qbdsCustVendSettlement.addRange(this.transDateSettlementFieldId());
        qbdsCustVendSettlement.relations(true);

        qbrTransDate.value(queryRange(transDate + 1, SysQuery::valueUnlimited()));

        switch (overdueJournalSettings.CalcType)
        {
            case OverdueCalcType_W::DueDate:
                qbrDate = qbdsCustVendSettlement.addRange(this.dueDateSettlementFieldId());
                break;
            case OverdueCalcType_W::InvoiceDate:
                qbrDate = qbdsCustVendTrans.addRange(this.invoiceDateFieldId());
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        qbrDate.value(
            queryRange(
                overdueJournalSettings.MaxDays ? transDate - overdueJournalSettings.MaxDays : dateNull(),
                transDate - overdueJournalSettings.MinDays));

        if (overdueJournalSettings.PaymTermDays)
        {
            qbrRecId    = qbdsCustVendSettlement.addRange(fieldNum(Common, RecId));
            switch (overdueJournalSettings.Condition)
            {
                case ComparisonCondition_W::Less:
                    qbrRecId.value(strFmt('((%1.%2 - %3.%4) < (%5))',
                                qbdsCustVendSettlement.name(),
                                fieldStr(CustVendSettlement, DueDate),
                                qbdsCustVendTrans.name(),
                                fieldStr(CustVendTrans, TransDate),
                                queryValue(overdueJournalSettings.PaymTermDays)));

                break;
                case ComparisonCondition_W::MoreOrEqual:
                    qbrRecId.value(strFmt('((%1.%2 - %3.%4) >= (%5))',
                                qbdsCustVendSettlement.name(),
                                fieldStr(CustVendSettlement, DueDate),
                                qbdsCustVendTrans.name(),
                                fieldStr(CustVendTrans, TransDate),
                                queryValue(overdueJournalSettings.PaymTermDays)));
                break;
            }
        }

        if (this.canBeReversedFieldId() != 0)
        {
            qbdsCustVendSettlement.addRange(this.canBeReversedFieldId()).value(SysQuery::valueNot(NoYes::No));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryTransOpen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds query which will be used for fetching open transactions which are overdue
    /// and comply with conditions specified at the <c>OverdueJournalSettings_W</c> table.
    /// </summary>
    /// <returns>
    /// <c>Query</c> object.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// If invalid enum value has been passed.
    /// </exception>
    protected Query buildQueryTransOpen()
    {
        Query query;
        QueryBuildDataSource qbdsCustVendTrans;
        QueryBuildDataSource qbdsCustVendTransOpen;
        QueryBuildRange qbrDate;
        QueryBuildRange qbrRecId;

        query = this.buildQuerySharedPart();
        qbdsCustVendTrans = query.dataSourceTable(this.custVendTransTableId());
        qbdsCustVendTransOpen = qbdsCustVendTrans.addDataSource(this.custVendTransOpenTableId());
        qbdsCustVendTransOpen.joinMode(JoinMode::InnerJoin);
        qbdsCustVendTransOpen.fetchMode(QueryFetchMode::One2One);
        qbdsCustVendTransOpen.relations(true);

        switch (overdueJournalSettings.CalcType)
        {
            case OverdueCalcType_W::DueDate:
                qbrDate = qbdsCustVendTransOpen.addRange(this.dueDateTransOpenFieldId());
                break;
            case OverdueCalcType_W::InvoiceDate:
                qbrDate = qbdsCustVendTrans.addRange(this.invoiceDateFieldId());
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        qbrDate.value(
            queryRange(
                overdueJournalSettings.MaxDays ? transDate - overdueJournalSettings.MaxDays : dateNull(),
                transDate - overdueJournalSettings.MinDays));

        if (overdueJournalSettings.PaymTermDays)
        {
            qbrRecId    = qbdsCustVendTransOpen.addRange(fieldNum(Common, RecId));
            switch (overdueJournalSettings.Condition)
            {
                case ComparisonCondition_W::Less:
                    qbrRecId.value(strFmt('((%1.%2 - %3.%4) < (%5))',
                                qbdsCustVendTransOpen.name(),
                                fieldStr(CustVendTransOpen, DueDate),
                                qbdsCustVendTrans.name(),
                                fieldStr(CustVendTrans, TransDate),
                                queryValue(overdueJournalSettings.PaymTermDays)));

                break;
                case ComparisonCondition_W::MoreOrEqual:
                    qbrRecId.value(strFmt('((%1.%2 - %3.%4) >= (%5))',
                                qbdsCustVendTransOpen.name(),
                                fieldStr(CustVendTransOpen, DueDate),
                                qbdsCustVendTrans.name(),
                                fieldStr(CustVendTrans, TransDate),
                                queryValue(overdueJournalSettings.PaymTermDays)));
                break;
            }
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTurnJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates difference between current and previous total overdue debt and creates records in <c>OverdueTurnJournalLine_W</c> table.
    /// </summary>
    /// <remarks>
    /// Both recordsets are sorted and then cursor goes through them.
    /// TransRefRecId field is used as indicator that record in previous journal has been selected.
    /// </remarks>
    protected void calculateTurnJournalLines()
    {
        OverdueDebtJournalLine_W previousDebtLine = this.overdueDebtJournalLine(),
                                 currentDebtLine  = this.overdueDebtJournalLine();

        DictTable       dictTable       = new DictTable(this.custVendTransTableId());
        CustVendTrans   custVendTrans   = dictTable.makeRecord();
        boolean nextCurrent;

        switch (overdueJournalSettings.CalcType)
        {
            case OverdueCalcType_W::DueDate:
                select previousDebtLine
                    order by JournalId, TransRefRecId, DueDate
                    where previousDebtLine.JournalId    == previousJournalTable.JournalId &&
                          previousDebtLine.SettingRecId == overdueJournalSettings.RecId   &&
                          previousDebtLine.DueDate      >= transDate - overdueJournalSettings.MaxDays;
                break;
            case OverdueCalcType_W::InvoiceDate:
                select previousDebtLine
                    order by JournalId, TransRefRecId, DueDate
                    where previousDebtLine.JournalId    == previousJournalTable.JournalId &&
                          previousDebtLine.SettingRecId == overdueJournalSettings.RecId
                    exists join custVendTrans
                        where custVendTrans.RecId == previousDebtLine.TransRefRecId &&
                              custVendTrans.TransDate >= transDate - overdueJournalSettings.MaxDays;
                break;
        }

        nextCurrent = debtLinesList.first(currentDebtLine);

        while (previousDebtLine.TransRefRecId || nextCurrent)
        {
            if ((previousDebtLine.TransRefRecId && nextCurrent) &&
                (previousDebtLine.TransRefRecId == currentDebtLine.TransRefRecId && previousDebtLine.DueDate == currentDebtLine.DueDate))
            {
                this.addOverdueTurnJournalLine(previousDebtLine, currentDebtLine);

                next previousDebtLine;
                nextCurrent = debtLinesList.next(currentDebtLine);
            }
            else if (((previousDebtLine.TransRefRecId && nextCurrent) &&
                         ((previousDebtLine.TransRefRecId <  currentDebtLine.TransRefRecId) ||
                          (previousDebtLine.TransRefRecId == currentDebtLine.TransRefRecId && previousDebtLine.DueDate < currentDebtLine.DueDate))) ||
                     !nextCurrent)
            {
                this.addOverdueTurnJournalLine(previousDebtLine, this.overdueDebtJournalLine());
                next previousDebtLine;
            }
            else if (((previousDebtLine.TransRefRecId && nextCurrent) &&
                         ((previousDebtLine.TransRefRecId >  currentDebtLine.TransRefRecId) ||
                          (previousDebtLine.TransRefRecId == currentDebtLine.TransRefRecId && previousDebtLine.DueDate > currentDebtLine.DueDate))) ||
                     !previousDebtLine.TransRefRecId)
            {
                this.addOverdueTurnJournalLine(this.overdueDebtJournalLine(), currentDebtLine);

                nextCurrent = debtLinesList.next(currentDebtLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Chooses lines for processing.
    /// </summary>
    /// <remarks>
    /// First, open customer transactions selected by invoice and due date. Then settlements which were made after date of journal added to them.
    /// Then tax on chosen transaction calculated. Finally, difference between current and previous journal calculated.
    /// </remarks>
    protected void chooseLines()
    {
        while select overdueJournalSettings
            where overdueJournalSettings.JournalType == this.journalType()
        {
            this.initLinesLists();

            //choosing open transactions which became overdue on date of calculation
            this.chooseTransOpen();

            //choosing settlements which not are settled, but were overdue on date of calculation
            this.chooseOverdueSettlement();

            debtLinesList = this.processChosenDebtLines(debtLinesList);

            this.calculateTurnJournalLines();

            debtLinesList.insertDatabase();
            turnLinesList.insertDatabase();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseOverdueSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches overdue debt from settlements which were made after date of journal and inserts it to <c>RecordSortedList</c> object.
    /// </summary>
    private void chooseOverdueSettlement()
    {
        CustVendTrans               custVendTrans;
        CustVendSettlement          custVendSettlement;

        boolean                     found;

        QueryRun queryRun = new QueryRun(this.buildQueryOverdueSettlement());

        while (queryRun.next())
        {
            custVendTrans      = queryRun.get(this.custVendTransTableId());
            custVendSettlement = queryRun.get(this.custVendSettlementTableId());

            overdueDebtJournalLine.clear();
            overdueDebtJournalLine.JournalId     = overdueJournalTable.JournalId;
            overdueDebtJournalLine.SettingRecId  = overdueJournalSettings.RecId;
            overdueDebtJournalLine.TransRefRecId = custVendTrans.RecId;
            overdueDebtJournalLine.DueDate       = custVendSettlement.DueDate;

            found = debtLinesList.find(overdueDebtJournalLine);

            overdueDebtJournalLine.OverdueAmountCur   += custVendSettlement.SettleAmountCur;
            overdueDebtJournalLine.OverdueAmountMST   += (custVendSettlement.SettleAmountMST - custVendSettlement.ExchAdjustment);

            debtLinesList.ins(overdueDebtJournalLine, found);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseTransOpen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches overdue debt from open transactions and inserts it to <c>RecordSortedList</c> object.
    /// </summary>
    private void chooseTransOpen()
    {
        CustVendTrans               custVendTrans;
        CustVendTransOpen           custVendTransOpen;

        boolean                     found;

        QueryRun                    queryRun = new QueryRun(this.buildQueryTransOpen());

        while (queryRun.next())
        {
            custVendTrans        = queryRun.get(this.custVendTransTableId());
            custVendTransOpen    = queryRun.get(this.custVendTransOpenTableId());

            overdueDebtJournalLine.clear();
            overdueDebtJournalLine.JournalId     = overdueJournalTable.JournalId;
            overdueDebtJournalLine.SettingRecId  = overdueJournalSettings.RecId;
            overdueDebtJournalLine.TransRefRecId = custVendTrans.RecId;
            overdueDebtJournalLine.DueDate       = custVendTransOpen.DueDate;

            found = debtLinesList.find(overdueDebtJournalLine);

            overdueDebtJournalLine.OverdueAmountCur   += custVendTransOpen.AmountCur;
            overdueDebtJournalLine.OverdueAmountMST   += (custVendTransOpen.AmountMST - custVendTransOpen.ExchAdjUnrealized);

            debtLinesList.ins(overdueDebtJournalLine, found);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createdJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>OverdueJournalTable_W</c> record which was created during processing.
    /// </summary>
    /// <returns>
    /// <c>OverdueJournalTable_W</c> record.
    /// </returns>
    public OverdueJournalTable_W createdJournalTable()
    {
        return overdueJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendSettlementTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return table id of <c>CustVendSettlement</c>.
    /// </summary>
    /// <returns>
    /// Table id of <c>CustVendSettlement</c>.
    /// </returns>
    abstract protected TableId custVendSettlementTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTransOpenTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return table id of <c>CustVendTransOpen</c>.
    /// </summary>
    /// <returns>
    /// Table id of <c>CustVendTransOpen</c>.
    /// </returns>
    abstract protected TableId custVendTransOpenTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTransTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return table id of <c>CustVendTrans</c>.
    /// </summary>
    /// <returns>
    /// Table id of <c>CustVendTrans</c>.
    /// </returns>
    abstract protected TableId custVendTransTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>dueDateSettlementFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return field id of <c>DueDate</c> field in <c>CustVendSettlement</c> table.
    /// </summary>
    /// <returns>
    /// Field id of <c>DueDate</c> field
    /// </returns>
    abstract protected FieldId dueDateSettlementFieldId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>dueDateTransOpenFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return field id of <c>DueDate</c> field in <c>CustVendTransOpen</c> table.
    /// </summary>
    /// <returns>
    /// Field id of <c>DueDate</c> field
    /// </returns>
    abstract protected FieldId dueDateTransOpenFieldId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeReversedFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field id of <c>CanBeReversed</c> of <c>CustVendSettlement</c>.
    /// </summary>
    /// <returns>The field id of <c>CanBeReversed</c>.</returns>
    protected FieldId canBeReversedFieldId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLinesLists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>RecordSortedList</c> objects which will be used for overdue debt and its change.
    /// </summary>
    abstract protected void initLinesLists()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOverdueJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>OverdueJournalTable_W</c> record.
    /// </summary>
    /// <returns>
    /// <c>OverdueJournalTable_W</c> record.
    /// </returns>
    protected OverdueJournalTable_W initOverdueJournalTable()
    {
        OverdueJournalTable_W journalTable = this.overdueJournalTable();

        journalTable.JournalId   = this.newJournalId();
        journalTable.Description = description;
        journalTable.TransDate   = transDate;

        return journalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOverdueTurnJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes new record in <c>OverdueTurnJournalLine_W</c> table map with values.
    /// </summary>
    /// <param name="_previousDebtLine">
    /// <c>OverdueDebtJournalLine_W</c> record by invoice and due date from previous journal.
    /// </param>
    /// <param name="_currentDebtLine">
    /// <c>OverdueDebtJournalLine_W</c> record by invoice and due date from current journal.
    /// </param>
    /// <returns>
    /// <c>OverdueTurnJournalLine_W</c> record.
    /// </returns>
    protected OverdueTurnJournalLine_W initOverdueTurnJournalLine(OverdueDebtJournalLine_W _previousDebtLine, OverdueDebtJournalLine_W _currentDebtLine)
    {
        OverdueTurnJournalLine_W    overdueTurnJournalLine  = this.overdueTurnJournalLine();
        OverdueDebtJournalLine_W    debtLine = _currentDebtLine.TransRefRecId ? _currentDebtLine : _previousDebtLine;

        overdueTurnJournalLine.JournalId     = overdueJournalTable.JournalId;

        overdueTurnJournalLine.SettingRecId  = debtLine.SettingRecId;
        overdueTurnJournalLine.TransRefRecId = debtLine.TransRefRecId;
        overdueTurnJournalLine.DueDate       = debtLine.DueDate;

        return overdueTurnJournalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDateFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return field id of <c>TransDate</c> field in <c>CustVendTrans</c> table.
    /// </summary>
    /// <returns>
    /// Field id of <c>TransDate</c> field
    /// </returns>
    abstract protected FieldId invoiceDateFieldId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return field id of <c>Invoice</c> field in <c>CustVendTrans</c> table.
    /// </summary>
    /// <returns>
    /// Field id of <c>Invoice</c> field
    /// </returns>
    abstract protected FieldId invoiceFieldId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return type of overdue debt journal being processed.
    /// </summary>
    /// <returns>
    /// <c>OverdueJournalType_W</c> value.
    /// </returns>
    abstract protected OverdueJournalType_W journalType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if <c>OverdueTurnJournalLine_W</c> must be created.
    /// </summary>
    /// <param name="_overdueTurnJournalLine">
    /// <c>OverdueTurnJournalLine_W</c> record which probably must be created.
    /// </param>
    /// <returns>
    /// True if line must be created; Otherwise, false.
    /// </returns>
    protected boolean mustCreateLine(OverdueTurnJournalLine_W _overdueTurnJournalLine)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();

        overdueDebtJournalLine = this.overdueDebtJournalLine();
        previousJournalTable   = OverdueJournalTable_W::findLast(this.journalType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new journal number from number sequence.
    /// </summary>
    /// <returns>
    /// <c>OverdueJournalId_W</c> value.
    /// </returns>
    abstract protected OverdueJournalId_W newJournalId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>overdueDebtJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns empty <c>OverdueDebtJournalLine_W</c> table buffer.
    /// </summary>
    /// <returns>
    /// <c>OverdueDebtJournalLine_W</c> table.
    /// </returns>
    abstract protected OverdueDebtJournalLine_W overdueDebtJournalLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>overdueJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns empty <c>OverdueJournalTable_W</c> table buffer.
    /// </summary>
    /// <returns>
    /// <c>OverdueJournalTable_W</c> table.
    /// </returns>
    abstract protected OverdueJournalTable_W overdueJournalTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>overdueTurnJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns empty <c>OverdueTurnJournalLine_W</c> table buffer.
    /// </summary>
    /// <returns>
    /// <c>OverdueTurnJournalLine_W</c> table.
    /// </returns>
    abstract protected OverdueTurnJournalLine_W overdueTurnJournalLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [currentVersion, #currentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>processChosenDebtLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method can be used to perform different transformations on chosen overdue debt lines.
    /// </summary>
    /// <param name="_debtLinesList">
    /// <c>RecordSortedList</c> object which contains lines of overdue debt which were selected.
    /// </param>
    /// <returns>
    /// <c>RecordSortedList</c> object.
    /// </returns>
    protected RecordSortedList processChosenDebtLines(RecordSortedList _debtLinesList)
    {
        return _debtLinesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method executes main business logic of class.
    /// </summary>
    /// <remarks>
    /// First, <c>OverdueJournalTable_W</c> created and then its filled with data.
    /// </remarks>
    #OCCRetryCount
    public void run()
    {
        try
        {
            ttsbegin;

            previousJournalTable = OverdueJournalTable_W::findLast(this.journalType());

            overdueJournalTable = this.initOverdueJournalTable();
            overdueJournalTable.insert();

            this.chooseLines();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDateSettlementFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return field id of <c>TransDate</c> field in <c>CustVendSettlement</c> table.
    /// </summary>
    /// <returns>
    /// Field id of <c>TransDate</c> field
    /// </returns>
    abstract protected TableId transDateSettlementFieldId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTypeFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return field id of <c>TransType</c> field in <c>CustVendTrans</c> table.
    /// </summary>
    /// <returns>
    /// Field id of <c>TransType</c> field.
    /// </returns>
    abstract protected FieldId transTypeFieldId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean ret     = true;
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case currentVersion:
                [version, #currentList] = packedClass;
                break;
            default:
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of <c>OverdueJournalCreate_W</c> class.
    /// </summary>
    /// <param name="_journalTableId">
    /// Tables id of overdue debt journal.
    /// </param>
    /// <returns>
    /// <c>OverdueJournalCreate_W</c> object.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// If wrong table id value has been passed as parameter.
    /// </exception>
    public static OverdueJournalCreate_W construct(TableId _journalTableId)
    {
        OverdueJournalCreate_W    overdueJournalCreate;

        switch (_journalTableId)
        {
            case tableNum(VendOverdueVATJournalTable_W):
                overdueJournalCreate =  new VendOverdueVATJournalCreate_W();
                break;
            case tableNum(CustOverdueVATJournalTable_W):
                overdueJournalCreate =  new CustOverdueVATJournalCreate_W();
                break;
            case tableNum(VendOverdueCITPITJournalTable_W):
                overdueJournalCreate =  new VendOverdueCITPITJournalCreate_W();
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return overdueJournalCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        OverdueJournalCreate_W overdueJournalCreate = OverdueJournalCreate_W::construct(_args.dataset());
        FormDataSource         dataSource;
        OverdueJournalTable_W  overdueJournalTable;

        dataSource = FormDataUtil::getFormDataSource(_args.record());

        if (overdueJournalCreate.prompt())
        {
            overdueJournalCreate.runOperation();
            overdueJournalTable = overdueJournalCreate.createdJournalTable();

            if (dataSource)
            {
                dataSource.research();
                dataSource.positionToRecord(overdueJournalTable);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>