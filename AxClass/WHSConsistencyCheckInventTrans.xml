<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSConsistencyCheckInventTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WHSConsistencyCheckInventTrans extends SysConsistencyCheck implements BatchRetryable
{
    QueryRun    queryRun;
    boolean     dummy;
    int         errorsFound;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        errorsFound
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>numberOfErrorsFound</Name>
				<Source><![CDATA[
    public int numberOfErrorsFound()
    {
        return errorsFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsInvent</Name>
				<Source><![CDATA[
    protected WhsInvent whsInvent()
    {
        return WhsInvent::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the inventory transactions.
    /// </summary>
    protected void checkInventTrans()
    {
        WhsInvent whsInvent = this.whsInvent();
        boolean checkDimHiearchyErrorEncountered = false;
        errorsFound = 0;
        setPrefix(strFmt("@SYS26373", tableId2PName(tableNum(InventTrans))));

        while (queryRun.next())
        {
            InventTrans inventTrans = queryRun.get(tableNum(InventTrans)) as InventTrans;
            InventTransOrigin origin = queryRun.get(tableNum(InventTransOrigin)) as InventTransOrigin;

            if (!whsInvent.checkDimHierarchy(inventTrans))
            {
                warning(strFmt("@WAX:WHSInventTransConsistencyCheckIllegalDimensionForReservationHierarchy", origin.ItemId, origin.InventTransId, origin.ReferenceCategory, origin.ReferenceId, inventtrans.inventDim().preFix(), inventTrans.RecId));
                checkDimHiearchyErrorEncountered = true;
                errorsFound++;
            }

            if (InventTrans::isStatusIncludedInPhysicalInventory(inventTrans.StatusReceipt, inventTrans.StatusIssue) && !whsInvent.checkLocationAndLP(inventTrans, origin))
            {
                warning(strFmt("@WAX:WHSInventTransConsistencyCheckIllegalCombinationOfLocationAndLicensePlate", origin.ItemId, origin.InventTransId, origin.ReferenceCategory, origin.ReferenceId, inventtrans.inventDim().preFix(), inventTrans.RecId));
                errorsFound++;
            }
        }

        if (checkDimHiearchyErrorEncountered)
        {
            info("@WAX:WHSInventTransConsistencyCheckIllegalDimensionsHelpSuggestion");
        }
        this.updateNotCorrected();
    }

]]></Source>
			</Method>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    ConfigurationKeyId configurationKey()
    {
        return configurationKeyNum(WHSandTMS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        FormRun formRun = classfactory.createQueryForm(this);

        formRun.init();
        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executionOrder</Name>
				<Source><![CDATA[
    Integer executionOrder()
    {
        return 3;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDialog</Name>
				<Source><![CDATA[
    public boolean hasDialog()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    protected Query buildQuery()
    {
        Query q = new Query();

        //add inventtable to give user better option of filtering certain items
        QueryBuildDataSource qbdsItem = q.addDataSource(tableNum(InventTable));
        //reduce fields since we are only intererested in the transactions
        qbdsItem.addSelectionField(fieldNum(InventTable, itemId));

        QueryBuildDataSource qbdsWHSItem = qbdsItem.addDataSource(tableNum(WHSInventEnabled));
        //reduce fields since we are only intererested in the transactions

        qbdsWHSItem.addSelectionField(fieldNum(WHSInventEnabled, itemId));
        qbdsWHSItem.relations(true);
        qbdsWHSItem.joinMode(JoinMode::InnerJoin);

        QueryBuildDataSource qbdsInventtransOrigin = qbdsWHSItem.addDataSource(tableNum(InventTransOrigin));
        qbdsInventtransOrigin.joinMode(JoinMode::InnerJoin);
        qbdsInventtransOrigin.addLink(fieldNum(WHSInventEnabled, itemId), fieldNum(InventTransOrigin, itemId), qbdsWHSItem.name());

        QueryBuildDataSource qbdsInventtrans = qbdsInventtransOrigin.addDataSource(tableNum(InventTrans));
        qbdsInventtrans.joinMode(JoinMode::InnerJoin);
        qbdsInventtrans.relations(true);

        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        queryRun = new QueryRun(this.buildQuery());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        if (this.checkFix() == CheckFix::Fix)
        {
            info("@WAX:ConsistencyCheckOnlySupportsCheckMode");
        }

        this.checkInventTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInTree</Name>
				<Source><![CDATA[
    boolean showInTree()
    {
        return isConfigurationKeyEnabled(configurationKeyNum(WHSandTMS));
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
    ClassId treeParentClassId()
    {
        WHSConsistencyCheck  whsConsistencyCheck;

        return classIdGet(whsConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version     = RunBase::getVersion(_packedClass);
        container   packedQuery;

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList, packedQuery] = _packedClass;
                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS1286";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    public static HelpTxt helpText()
    {
        return "@SYS58232";
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>