<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailOrdersFeatureControl</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailOrdersFeatureControl</c> class is used to control feature flags.
/// </summary>
class RetailOrdersFeatureControl
{
    private const str skipDisplayingReturnOrderSummaryFlightingKey = 'RETAIL_SETTLEMENT_SKIP_DISPLAYING_RETURN_ORDER_SUMMARY'; // Introduced in 10.0.7
    private const str applyRetailTenderDiscountToRetailOrdersFlightingKey = 'RETAIL_TENDER_DISCOUNT_APPLY_ONLY_RETAIL_ORDERS'; // Introduced in 10.0.7
    private const str settleInvoiceAndPaymentJournalDuringShipOrderFulfillment = 'RETAIL_SETTLE_INVOICE_AND_PAYMENT_DURING_SHIP_ORDER_FULFILLMENT'; // Introduced in 10.0.9
    private const str useOrderShippedEventNotification = 'RETAIL_USE_ORDER_SHIPPED_EVENT_NOTIFICATION'; // Introduced in 10.0.11
    private const str skipLinkStatementIdForAsyncOrderFlightingKey = 'RETAIL_SKIP_LINK_STATEMENTID_FOR_ASYNC_ORDER'; // Introduced in 10.0.12
    private const str allowOverReturnAgainstInvoiceLineFlightingKey = 'RETAIL_ALLOW_OVER_RETURN_AGAINST_INVOICE_LINE'; // Introduced in 10.0.12
    private const str useCompanyCurrencyToTotalizeSettlementAmount = 'RETAIL_USE_COMPANY_CURRENCY_TO_TOTALIZE_SETTLEMENT_AMOUNT'; // Introduced in 10.0.12
	private const str allowThirdElementInReturnForMarkItemsReturned = 'RETAIL_ALLOW_THIRD_ELEMENT_IN_RETURN_OF_MARKITEMSRETURN'; // Introduced in 10.0.12
    private const str useQtyInInventoryUOMForFulfillment = 'RETAIL_USE_INVENTORY_QTY_FOR_FULFILLMENT'; // Introduced in 10.0.13
    private const str skipOrderCompletionForProjectOrderFlightingKey ='RETAIL_SKIP_ORDER_COMPLETION_FOR_PROJECT_ORDER'; // Introduced in 10.0.13
    private const str allowNegativeAutoChargesOnRetunOrderFlightingKey ='RETAIL_ALLOW_NEGATIVE_AUTO_CHARGES_ON_RETURN_ORDER'; // Introduced in 10.0.17
    private const str allowThirdElementInReturnForValidateCustomerStatusFlightingKey ='RETAIL_ALLOW_THIRD_ELEMENT_IN_RETURN_FOR_VALID_CUST_STATUS'; // Introduced in 10.0.29

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isSkipReturnOrderSummaryForReplacementOrdersEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether or not the UI should skip displaying a call center return order summary when navigating away from the exchange order creation blade.
    /// </summary>
    /// <returns>
    /// True if record is not found or if record is found and has value '1'; otherwise, false.
    /// </returns>
    internal static boolean isSkipReturnOrderSummaryForReplacementOrdersEnabled()
    {
        return RetailFeatureControl::isFeatureFlightKeySet(skipDisplayingReturnOrderSummaryFlightingKey, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isApplyRetailTenderDiscountToRetailOrdersFeatureEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether or not Retail tender discount logic should be applied to retail orders.
    /// </summary>
    /// <returns>
    /// True if record is not found or if record is found and has value '1'; otherwise, false.
    /// </returns>
    internal static boolean isApplyRetailTenderDiscountToRetailOrdersFeatureEnabled()
    {
        return RetailFeatureControl::isFeatureFlightKeySet(applyRetailTenderDiscountToRetailOrdersFlightingKey, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSettleInvoiceAndPaymentJournalDuringShipOrderFulfillment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether or not Payment and Invoice should be settled during ship order fulfillment.
    /// </summary>
    /// <returns>
    /// True if record is not found or if record is found and has value '1'; otherwise, false.
    /// </returns>
    internal static boolean isSettleInvoiceAndPaymentJournalDuringShipOrderFulfillment()
    {
        return RetailFeatureControl::isFeatureFlightKeySet(settleInvoiceAndPaymentJournalDuringShipOrderFulfillment, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>useOrderShippedEventNotification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether or not to use the order shipped event notification
    /// </summary>
    /// <returns>
    /// True if record is not found or if record is found and has value '1'; otherwise, false.
    /// </returns>
    internal static boolean useOrderShippedEventNotification()
    {
        return RetailFeatureControl::isFeatureFlightKeySet(useOrderShippedEventNotification, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipLinkStatementIdForAsyncOrderFeatureEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether or not the async order will be marked with the statementId
    /// </summary>
    /// <returns>
    /// True if record is not found or if record is found and has value '1'; otherwise, false.
    /// </returns>
    internal static boolean skipLinkStatementIdForAsyncOrderFeatureEnabled()
    {
        return RetailFeatureControl::isFeatureFlightKeySet(skipLinkStatementIdForAsyncOrderFlightingKey, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowOverReturnAgainstInvoiceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether over returning against an invoice line is allowed.
    /// </summary>
    /// <returns>
    /// True if record is not found or if record is found and has value '1'; otherwise, false.
    /// </returns>
    internal static boolean allowOverReturnAgainstInvoiceLine()
    {
        return RetailFeatureControl::isFeatureFlightKeySet(allowOverReturnAgainstInvoiceLineFlightingKey, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUseCompanyCurrencyToTotalizeSettlementAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether or not to use company currency to totalize settlement amount.
    /// </summary>
    /// <returns>
    /// True if record is not found or if record is found and has value '1'; otherwise, false.
    /// </returns>
    internal static boolean isUseCompanyCurrencyToTotalizeSettlementAmount()
    {
        return RetailFeatureControl::isFeatureFlightKeySet(useCompanyCurrencyToTotalizeSettlementAmount, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowThirdElementInReturnForMarkItemsReturned</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether or not Returned value from MarkItemsReturned should have 3rd element or not.
    /// </summary>
    /// <returns>
    /// True if record is not found or if record is found and has value '1'; otherwise, false.
    /// </returns>
    internal static boolean allowThirdElementInReturnForMarkItemsReturned()
    {
        return RetailFeatureControl::isFeatureFlightKeySet(allowThirdElementInReturnForMarkItemsReturned, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>useQtyInInventoryUOMForFulfillment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether we should convert the quantity to inventory unit of measure during order fulfillment operations.
    /// </summary>
    /// <returns>
    /// True if record is not found or if record is found and has value '1'; otherwise, false.
    /// </returns>
    internal static boolean useQtyInInventoryUOMForFulfillment()
    {
        return RetailFeatureControl::isFeatureFlightKeySet(useQtyInInventoryUOMForFulfillment, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipOrderCompletionForProjectOrderFeatureEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether or not the project order will skip the order completion logic.
    /// </summary>
    /// <returns>
    /// True if record is not found or if record is found and has value '1'; otherwise, false.
    /// </returns>
    internal static boolean skipOrderCompletionForProjectOrderFeatureEnabled()
    {
        return RetailFeatureControl::isFeatureFlightKeySet(skipOrderCompletionForProjectOrderFlightingKey, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowNegativeAutoChargesOnRetunOrderFeatureEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether or not we should allow the negative auto charges on return order.
    /// </summary>
    /// <returns>
    /// True if record is not found or if record is found and has value '1'; otherwise, false.
    /// </returns>
    internal static boolean allowNegativeAutoChargesOnRetunOrderFeatureEnabled()
    {
        return RetailFeatureControl::isFeatureFlightKeySet(allowNegativeAutoChargesOnRetunOrderFlightingKey, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowThirdElementInReturnForValidateCustomerStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether or not we should allow third element in return for validate customer status.
    /// </summary>
    /// <returns>
    /// True if record is not found or if record is found and has value '1'; otherwise, false.
    /// </returns>
    internal static boolean allowThirdElementInReturnForValidateCustomerStatus()
    {
        return RetailFeatureControl::isFeatureFlightKeySet(allowThirdElementInReturnForValidateCustomerStatusFlightingKey, funcName());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>