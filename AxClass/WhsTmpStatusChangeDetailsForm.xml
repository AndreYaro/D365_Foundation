<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsTmpStatusChangeDetailsForm</Name>
	<SourceCode>
		<Declaration><![CDATA[/// <summary>
/// The <c>WhsTmpStatusChangeDetailsForm</c> class contains the business logic of the <c>WhsTmpStatusChangeDetails</c> form.
/// </summary>
public class WhsTmpStatusChangeDetailsForm
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>okBtn_clicked</Name>
				<Source><![CDATA[	/// <summary>
	/// Handles when OK button is clicked for inventory status change.
	/// </summary>
	/// <param name="_whsTmpStatusChange">
	/// Temporary <c>WHSTmpStatusChange</c> record.
	/// </param>
	/// <param name="_inventDim">
	/// Dimensions of the inventory that are status changed.
	/// </param>
	/// <param name="_toStatus">
	/// Changed to status.
	/// </param>
	/// <returns>
	/// True if status is converted.
	/// </returns>
    public boolean okBtn_clicked(
        WHSTmpStatusChange  _whsTmpStatusChange,
        InventDim           _inventDim,
        WHSInventStatusId   _toStatus)
    {
        DialogButton    btnConvert;
        boolean         ret;

        btnConvert = Box::yesNo("@WAX3422", DialogButton::No, "@WAX3423");

        if (btnConvert == DialogButton::Yes)
        {
            WHSTmpStatusChange::convertStatus(_whsTmpStatusChange, _inventDim, _toStatus);
            info("@WAX3425");

            ret = true;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsStatusUsable</Name>
				<Source><![CDATA[	/// <summary>
	/// Finds total usable physical inventory after status change.
	/// </summary>
	/// <param name="_fromStatus">
	/// Status of the inventory before change.
	/// </param>
	/// <param name="_tmpStatusChange">
	/// Temporary <c>WHSTmpStatusChange</c> record.
	/// </param>
	/// <param name="_parmInventDim">
	/// Inventory dimension level.
	/// </param>
	/// <returns>
	/// The total amount of usable inventory in string representation.
	/// </returns>
    public str whsStatusUsable(
        WHSInventStatus     _fromStatus,
        WHSTmpStatusChange  _tmpStatusChange,
        InventDim           _parmInventDim)
    {
        str ret;

        if (!_fromStatus.InventStatusBlocking)
        {
            ret = strFmt('%1', _tmpStatusChange.calcTotalAvail(_tmpStatusChange, _parmInventDim) - _tmpStatusChange.calcTotalSelected(_tmpStatusChange));
        }
        else
        {
            ret = "@WAX3500";
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsTmpStatusChange_modified</Name>
				<Source><![CDATA[	/// <summary>
	/// Determines whether items status can be changed on a specific dimension level.
	/// </summary>
	/// <param name="_checked">
	/// Determines whether the checkbox is checked or not.
	/// </param>
	/// <param name="_tmpStatusChange">
	/// Temporary <c>WHSTmpStatusChange</c> record.
	/// </param>
	/// <param name="_inventDim">
	/// Inventory dimension level.
	/// </param>
	/// <param name="_fromStatus">
	/// From status of the items.
	/// </param>
	/// <param name="_goodToBlocking">
	/// Determines whether the status change is something good to blocking status.
	/// </param>
	/// <returns>
	/// True if there are available items to change status.
	/// </returns>
    public boolean whsTmpStatusChange_modified(
        boolean             _checked,
        WHSTmpStatusChange  _tmpStatusChange,
        InventDim           _inventDim,
        WHSInventStatus     _fromStatus,
        boolean             _goodToBlocking)
    {
        boolean ret;
        boolean fromStatusIsUsable;

        fromStatusIsUsable = !_fromStatus.InventStatusBlocking;

        if (_checked && !_tmpStatusChange.checkAvailable(_tmpStatusChange, _inventDim, fromStatusIsUsable, _goodToBlocking))
        {
            ret = false;
        }
        else
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeTmpStatusChange</Name>
				<Source><![CDATA[	/// <summary>
	/// Writes <c>WHSTmpStatusChange</c> record to database.
	/// </summary>
	/// <param name="_tmpStatusChange">
	/// <c>WHSTmpStatusChange</c> record.
	/// </param>
    public void writeTmpStatusChange(WHSTmpStatusChange _tmpStatusChange)
    {
        _tmpStatusChange.write();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>