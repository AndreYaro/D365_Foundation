<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBTaxAdjustmentJournalCreator_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is resposible for Tax adjustment journal creation based on tax fiscal document.
/// </summary>
internal class FBTaxAdjustmentJournalCreator_BR
{
    private FBParametersPerState_BR parametersPerState;
    private TaxFiscalDocument_BR taxFiscalDocument;
    private FiscalEstablishment_BR fiscalEstablishment;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAndPostJournal</Name>
				<Source><![CDATA[
    public void createAndPostJournal()
    {
        TaxFiscalDocumentLine_BR taxFiscalDocumentLine;
        LedgerJournalTable journalTable = this.createLedgerJournalTable();
        
        fiscalEstablishment = FiscalEstablishment_BR::findById(taxFiscalDocument.FiscalEstablishmentId);
        
        while select taxFiscalDocumentLine
            where taxFiscalDocumentLine.TaxFiscalDocument == taxFiscalDocument.RecId
        {
            this.createLedgerJournalTrans(journalTable, taxFiscalDocumentLine);
        }
        
        LedgerJournalCheckPost ledgerJournalCheckPost = LedgerJournalCheckPost::newLedgerJournalTable(journalTable, NoYes::Yes);
        ledgerJournalCheckPost.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTable</Name>
				<Source><![CDATA[
    private LedgerJournalTable createLedgerJournalTable()
    {
        LedgerJournalTable journalTable;
        
        journalTable.initValue();
        journalTable.initFromLedgerJournalName(parametersPerState.TaxAdjustmentJournalName);
        journalTable.JournalNum = NumberSeq::newGetNum(LedgerParameters::numRefJournalNum()).num();
        journalTable.Name = strFmt("@SYS313427", journalTable.JournalNum, this.getJournalDescription());
        
        journalTable.write();
        
        return journalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTrans</Name>
				<Source><![CDATA[
    private LedgerJournalTrans createLedgerJournalTrans(LedgerJournalTable _journalTable, TaxFiscalDocumentLine_BR _taxFiscalDocumentLine)
    {
        FBLedgerJournalEngine_TaxAssessAdj_BR ledgerJournalEngine = new FBLedgerJournalEngine_TaxAssessAdj_BR();
        ledgerJournalEngine.ledgerJournalTable(_journalTable);
        ledgerJournalEngine.newJournalActive(_journalTable);
        
        LedgerJournalTrans journalLine;
        journalLine.initValue();
        ledgerJournalEngine.initValue(journalLine);
        ledgerJournalEngine.active(journalLine);
        
        journalLine.Company         = fiscalEstablishment.company();
        journalLine.Voucher          = new JournalVoucherNum(JournalTableData::newTable(_journalTable)).getNew(false);
        journalLine.TransDate        = taxFiscalDocument.InvoiceDate;
        ledgerJournalEngine.transDateModified(journalLine);
        
        LogisticsPostalAddress logisticsPostalAddress;
        if (taxFiscalDocument.isOutgoing())
        {
            logisticsPostalAddress = LogisticsPostalAddress::findRecId(taxFiscalDocument.LogisticsPostalAddress);
        }
        else
        {
            logisticsPostalAddress = fiscalEstablishment.postalAddress();
        }
        
        FiscalDocumentLine_BR fiscalDocumentLine = FiscalDocumentLine_BR_Extension::findByRef(tableNum(TaxFiscalDocumentLine_BR), _taxFiscalDocumentLine.RecId);
        FBFiscalDocumentAdjustmentCodeICMS_BR adjustmentCode = FBFiscalDocumentAdjustmentCodeICMS_BR_Extension::findBySpedAdjustmentCode(fiscalDocumentLine.AdjustmentCode53);
        FBFiscalDocAdjustmentCodeICMSLedger_BR fiscalDocAdjustmentCodeICMSLedger = FBFiscalDocAdjustmentCodeICMSLedger_BR::findByAdjustmentCode(adjustmentCode.RecId, curext());
        LedgerDimensionAccount offsetLedgerDimension = fiscalDocAdjustmentCodeICMSLedger.LedgerDimension;
        
        journalLine.TaxCode = fiscalDocAdjustmentCodeICMSLedger.TaxCode;
        
        LedgerDimensionAccount ledgerDimension;

        if (journalLine.TaxCode)
        {
            TaxDirection taxDirection =  (taxFiscalDocument.Direction == FiscalDocDirection_BR::Incoming) ? TaxDirection::IncomingTax : TaxDirection::OutgoingTax;
            ledgerDimension = TaxLedgerAccountGroup::accountLedgerDimension(journalLine.TaxCode, taxDirection);
        }
        
        journalLine.LedgerDimension = FBLedgerJournalTrans_FiscalBooks_BR::getLedgerDimension(ledgerDimension, journalLine, fiscalEstablishment);
        ledgerJournalEngine.accountModified(journalLine);
        
        journalLine.OffsetLedgerDimension = FBLedgerJournalTrans_FiscalBooks_BR::getLedgerDimension(offsetLedgerDimension, journalLine, fiscalEstablishment);
        journalLine.OffsetCompany   = journalLine.Company;
        ledgerJournalEngine.offsetAccountModified(journalLine);
        
        journalLine.Txt = fiscalDocumentLine.BenefitCode;
        
        FBLedgerJournalTrans_FiscalBooks_BR journalLineFiscalBooks = journalLine.SysExtensionSerializerMap::getExtensionTable(tableNum(FBLedgerJournalTrans_FiscalBooks_BR), false);
        
        journalLineFiscalBooks.initValue();
        journalLineFiscalBooks.FiscalEstablishment_BR   = fiscalEstablishment.RecId;
        journalLineFiscalBooks.State                    = fiscalEstablishment.postalAddress().State;
        journalLineFiscalBooks.AdjustmentType           = FBTaxAssessmentAdjustmentType_BR::FiscalDocument;
        journalLineFiscalBooks.TaxAmount                = _taxFiscalDocumentLine.Amount;
        journalLineFiscalBooks.TaxBaseAmount            = _taxFiscalDocumentLine.Amount;
        journalLineFiscalBooks.TaxValue                 = TaxTable::find(fiscalDocAdjustmentCodeICMSLedger.TaxCode).showTaxValue();
        journalLineFiscalBooks.FiscalDocumentAdjustmentCodeICMS = adjustmentCode.RecId;
        journalLineFiscalBooks.TaxType                  = adjustmentCode.TaxType;    
        journalLineFiscalBooks.FiscalDocumentLine_BR    = fiscalDocumentLine.RecId;
        journalLineFiscalBooks.FiscalDocument_BR        = fiscalDocumentLine.FiscalDocument;
        journalLineFiscalBooks.ObservationCodeTable     = FBObservationCodeTable_BR::findByObservationCode(fiscalDocumentLine.ObservationCode).RecId;
        
        FiscalDocumentTaxTrans_BR fiscalDocumentTaxTrans;

        select firstOnly RecId from fiscalDocumentTaxTrans
            where fiscalDocumentTaxTrans.FiscalDocumentLine == fiscalDocumentLine.RecId
                && fiscalDocumentTaxTrans.FiscalDocumentMiscCharge == 0
                && fiscalDocumentTaxTrans.Type == journalLineFiscalBooks.TaxType;
        
        journalLineFiscalBooks.FiscalDocumentTaxTrans_BR = fiscalDocumentTaxTrans.RecId;
        
        this.setAmountCurDebitCredit(journalLine, journalLineFiscalBooks);
        
        journalLine.write();
        ledgerJournalEngine.voucherTotals(journalLine);
        
        journalLineFiscalBooks.LedgerJournalTrans = journalLine.RecId;
        journalLineFiscalBooks.write();
        
        journalLine.SysExtensionSerializerMap::packExtensionTable(journalLineFiscalBooks);
        journalLine.write();
        
        ledgerJournalEngine.ledgerJournalTableUpdateTotals(_journalTable);
        _journalTable.write();
        
        return journalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalDescription</Name>
				<Source><![CDATA[
    private ItemFreeTxt getJournalDescription()
    {
        TaxFiscalDocumentLine_BR documentLine;
        
        select firstOnly Description from documentLine
            where documentLine.TaxFiscalDocument == taxFiscalDocument.recId;
        
        return documentLine.Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>FBTaxAdjustmentJournalCreator_BR</c> class.
    /// </summary>
    /// <param name = "_taxFiscalDocument">
    /// The tax fiscal document for which the general adjustment journal should be created.
    /// </param>
    public void init(TaxFiscalDocument_BR _taxFiscalDocument)
    {
        taxFiscalDocument = _taxFiscalDocument;
        parametersPerState = FBParametersPerState_BR::find(LogisticsPostalAddress::findRecId(taxFiscalDocument.LogisticsPostalAddress));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAmountCurDebitCredit</Name>
				<Source><![CDATA[
    private void setAmountCurDebitCredit(LedgerJournalTrans _ledgerJournalTrans, FBLedgerJournalTrans_FiscalBooks_BR _ledgerJournalTransFiscalBooks)
    {
        if (_ledgerJournalTransFiscalBooks.isLedgerCredit())
        {
            _ledgerJournalTrans.AmountCurCredit = _ledgerJournalTransFiscalBooks.TaxAmount;
            _ledgerJournalTrans.AmountCurDebit = 0;
        }
        else
        {
            _ledgerJournalTrans.AmountCurDebit = _ledgerJournalTransFiscalBooks.TaxAmount;
            _ledgerJournalTrans.AmountCurCredit = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs an instance of <c>FBTaxAdjustmentJournalCreator_BR</c>.
    /// </summary>
    /// <param name="_taxFiscalDocument">
    ///     The tax fiscal document.
    /// </param>
    /// <returns>
    ///     The new instance of <c>FBTaxAdjustmentJournalCreator_BR</c>.
    /// </returns>
    public static FBTaxAdjustmentJournalCreator_BR construct()
    {
        return new FBTaxAdjustmentJournalCreator_BR();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>