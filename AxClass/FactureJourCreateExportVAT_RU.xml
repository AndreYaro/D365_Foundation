<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureJourCreateExportVAT_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class FactureJourCreateExportVAT_RU extends FactureJourCreate_RU implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findCustVendInvoiceJourByRecId</Name>
				<Source><![CDATA[
    protected CustVendInvoiceJour findCustVendInvoiceJourByRecId(RefRecId _recId)
    {
        return FactureJour_RU::findRecId(_recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustVendInvoiceTransByRecId</Name>
				<Source><![CDATA[
    protected CustVendInvoiceTrans findCustVendInvoiceTransByRecId(RefRecId _recId)
    {
        return FactureTrans_RU::findRecId(_recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvoiceJourByTrans</Name>
				<Source><![CDATA[
    protected Common findInvoiceJourByTrans(Common _trans)
    {
        CustInvoiceTrans custInvoiceTrans;

        custInvoiceTrans = _trans as CustInvoiceTrans;

        return CustInvoiceJour::findFromCustInvoiceTrans(custInvoiceTrans.SalesId,
                                                         custInvoiceTrans.InvoiceId,
                                                         custInvoiceTrans.InvoiceDate,
                                                         custInvoiceTrans.NumberSequenceGroup,
                                                         true,
                                                         ! custInvoiceTrans.InvoiceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvoiceTransByFacture</Name>
				<Source><![CDATA[
    protected Common findInvoiceTransByFacture()
    {
        return CustInvoiceTrans::findFacture_RU(factureTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournal</Name>
				<Source><![CDATA[
    protected void initJournal()
    {
        DictType            dictType;
        NumberSequenceTable numTable, numTableExternal;
        boolean             error = false;
        NumberSeq_RU        externalNumberSeq_RU;

        numberSeq = NumberSeq::newGetNum(CustParameters::numRefCustFactureId_RU(),false,true);

        if (! numberSeq)
        {
            dictType = new DictType(extendedtypenum(FactureId_RU));
            error(strfmt("@SYS53911", dictType.label(), "@SYS25196"));
            error    = true;
        }
        else
        {
            numTable = numberSeq.parmNumTableNum(numTable);
            if (numTable.Manual)
            {
                dictType = new DictType(extendedtypenum(FactureId_RU));
                error(strfmt("@GLS104926", dictType.label(), "@SYS25196"));
                error    = true;
            }
        }

        super();

        externalNumberSeq = NumberSeq_RU::newGetNum(CustParameters::numRefExportFactureExternalId_RU(), false, true);
        if (! externalNumberSeq)
        {
            dictType = new DictType(extendedtypenum(SalesExportFactureExternalId_RU));
            error(strfmt("@SYS53911", dictType.label(), "@SYS25196"));
            error    = true;
        }
        else
        {
            numTableExternal = externalNumberSeq.parmNumTableNum(numTableExternal);
            if (numTableExternal.Manual)
            {
                dictType = new DictType(extendedtypenum(SalesExportFactureExternalId_RU));
                error(strfmt("@GLS104926", dictType.label(), "@SYS25196"));
                error    = true;
            }
            if (! numTableExternal.Continuous)
            {
                dictType = new DictType(extendedtypenum(SalesExportFactureExternalId_RU));
                error(strfmt("@SYS26207", strfmt("@SYS70938", numTableExternal.NumberSequence, dictType.label())));
                error    = true;
            }
        }

        if (! error && mustBeUpdated && ! factureExtId) // factureExtId can be reused ID of deleted facture
        {
            factureJour.FactureExternalId = externalNumberSeq.num();
        }

        if (! error && factureExtId)
        {
            if (NumberSequenceList::exist(numTableExternal.RecId, NumStatus::Free, factureExtId))
            {
                if (mustBeUpdated)
                {
                    externalNumberSeq_RU = externalNumberSeq;
                    externalNumberSeq_RU.useNumFromList(numTableExternal, factureExtId);
                }
                factureJour.FactureExternalId = factureExtId;
            }
            else
            {
                error(strfmt("@GLS104927", factureExtId, tableid2pname(tablenum(NumberSequenceList)), tablestr(NumberSequenceList)));
                error = true;
            }
        }

        if (error)
        {
            throw error("@SYS26077");
        }

        factureJour.FactureId           = numberSeq.num();

        factureJour.Module                = FactureModule_RU::Cust;
        factureJour.NumberSequenceGroupId = factureExtIdNumSeq;

        factureJour.ExportDate            = this.parmExportDate();
        factureJour.ConfirmationDate      = this.parmConfirmationDate();
        factureJour.ProcessingType        = this.parmProcessingType();
        factureJour.PackageDate           = this.parmPackageDate();
        factureJour.ExportProcessing      = this.parmExportProcessing();
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    public FactureModule_RU module()
    {
        return FactureModule_RU::Cust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFullyFacturedInvoices</Name>
				<Source><![CDATA[
    protected void updateFullyFacturedInvoices()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceOrder</Name>
				<Source><![CDATA[
    protected void updateSourceOrder(CustVendInvoiceJour _jour)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>