<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchTableChangeReviewTroubleshootProviderDataverse</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Xrm.Sdk;

/// <summary>
/// The <c>PurchTableChangeReviewTroubleshootProviderDataverse</c> class is responsible for troubleshooting the setup and calling Dataverse API to check if the user has required permissions
/// to use the AI generative summary in the 'Confirmed purchase orders with changes' workspace.
/// </summary>
internal class PurchTableChangeReviewTroubleshootProviderDataverse
{
    private IOrganizationService orgService;
    private const str            SolutionName            = "msdyn_SCMAIApp";
    private readonly guid        financeOperationsAIRole = guidFromString("7f141e98-710c-ee11-9cbe-6045bdd92a42");
    private readonly Guid        systemAdministratorRole = guidFromString("627090ff-40a3-4053-8790-584edc5be201");
    private readonly Guid        environmentMakerRoleId  = guidFromString("d58407f2-48d5-e711-a82c-000d3a37c848");

    // Telemetry
    private SysInstrumentationLogger logger;
    private const str                MetricNamespace               = 'PurchCopilotTroubleshoot';
    private const str                UserImpersonationDV           = 'UserImpersonationCheck';
    private const str                EnvironmentLinkDV             = 'EnvironmentLinkDVCheck';
    private const str                CopilotSolutionCheck          = 'CopilotSolutionCheck';
    private const str                RequiredRolesCheck            = 'RequiredRolesCheck';
    private const str                ScmCopilotPackageVersionCheck = 'ScmCopilotPackageVersionCheck';

    private const str                FailMessageFormat             = 'Failed to troubleshoot. Exception: %1\n StackTrace: %2';


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        logger = SysInstrumentationLoggerFactory::CreateLogger(classStr(PurchTableChangeReviewTroubleshootProviderDataverse));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUserImpersonationDataverseEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether Finance and Operations User Impersonation in Dataverse is enabled.
    /// </summary>
    /// <returns>true if user impersonation is enabled; otherwise false.</returns>
    public boolean isUserImpersonationDataverseEnabled()
    {
        boolean isUserImpersonationDataverseEnabled = false;

        using (var context = logger.activityContext(UserImpersonationDV, MetricNamespace))
        {
            System.Exception ex;
            try
            {
                orgService = SysDataverseUtility::GetOrganizationServiceForCurrentUser(classStr(PurchTableChangeReviewTroubleshootProviderDataverse));
            }
            catch(ex)
            {

                logger.logWarning(strFmt(FailMessageFormat, ex.Message, ex.StackTrace));
                context.addCustomProperty(UserImpersonationDV, enum2Symbol(enumNum(FalseTrue),isUserImpersonationDataverseEnabled));

                return isUserImpersonationDataverseEnabled;
            }
            catch
            {
                context.addCustomProperty(UserImpersonationDV, enum2Symbol(enumNum(FalseTrue),isUserImpersonationDataverseEnabled));

                return isUserImpersonationDataverseEnabled;
            }

            isUserImpersonationDataverseEnabled = orgService != null;
            context.addCustomProperty(UserImpersonationDV, enum2Symbol(enumNum(FalseTrue),isUserImpersonationDataverseEnabled));
        }

        return isUserImpersonationDataverseEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnvironmentLinkedToDataverse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the environment is linked to Dataverse.
    /// </summary>
    /// <returns>true if environment is linked to Dataverse; otherwise false.</returns>
    public boolean isEnvironmentLinkedToDataverse()
    {
        boolean isEnvironmentLinkedToDataverse = false;

        using (var context = logger.activityContext(EnvironmentLinkDV, MetricNamespace))
        {
            isEnvironmentLinkedToDataverse =  SysDataverseUtility::IsDataverseLinked();
            context.addCustomProperty(EnvironmentLinkDV, enum2Symbol(enumNum(FalseTrue),isEnvironmentLinkedToDataverse));
        }

        return isEnvironmentLinkedToDataverse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCopilotSolutionInstalled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the Copilot solution is installed.
    /// </summary>
    /// <returns>true if the Coplot solution is installed; otherwise false.</returns>
    public boolean isCopilotSolutionInstalled()
    {
        boolean isCopilotSolutionInstalled = false;

        using (var context = logger.activityContext(CopilotSolutionCheck, MetricNamespace))
        {
            if (!orgService)
            {
                logger.logWarning("@ProcurementAndSourcing:PurchTableChangeReviewTroubleshootCheckIssue");
                return isCopilotSolutionInstalled;
            }

            isCopilotSolutionInstalled = SysDataverseUtility::CheckSolutionExistence(orgService, solutionName);
            context.addCustomProperty(CopilotSolutionCheck, enum2Symbol(enumNum(FalseTrue),isCopilotSolutionInstalled));
        }

        return isCopilotSolutionInstalled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRequiredSecurityRoleActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the Dataverse user has the correct roles.
    /// </summary>
    /// <returns>true if the user has the correct roles; otherwise false.</returns>
    public boolean isRequiredSecurityRoleActive()
    {
        boolean isRequiredSecurityRoleActive = false;

        using (var context = logger.activityContext(RequiredRolesCheck, MetricNamespace))
        {
            if (!orgService)
            {
                logger.logWarning("@ProcurementAndSourcing:PurchTableChangeReviewTroubleshootCheckIssue");
                return isRequiredSecurityRoleActive;
            }

            var systemUserLink = new LinkEntity('systemuserroles', 'systemuser', 'systemuserid', 'systemuserid', JoinOperator::Inner);
            FilterExpression curUserGuidFilter = new FilterExpression(LogicalOperator::And);
            curUserGuidFilter.AddCondition(new ConditionExpression('azureactivedirectoryobjectid', ConditionOperator::Equal, curUserGuid()));
            systemUserLink.LinkCriteria = curUserGuidFilter;

            QueryExpression roleQuery = new QueryExpression('role');
            roleQuery.ColumnSet = new ColumnSet('roleid');
            LinkEntity roleQueryLink = roleQuery.AddLink('systemuserroles', 'roleid', 'roleid', JoinOperator::Inner);
            var linkEntities = roleQueryLink.LinkEntities;
            linkEntities.Add(systemUserLink);

            FilterExpression criteria = roleQuery.Criteria;
            FilterExpression combinedFilter = criteria.AddFilter(LogicalOperator::Or);

            combinedFilter.AddCondition('role', 'parentrootroleid', ConditionOperator::Equal, financeOperationsAIRole);
            combinedFilter.AddCondition('role', 'roletemplateid', ConditionOperator::Equal, systemAdministratorRole);
            combinedFilter.AddCondition('role', 'parentrootroleid', ConditionOperator::Equal, environmentMakerRoleId);

            EntityCollection entityCollection = orgService.RetrieveMultiple(roleQuery);

            isRequiredSecurityRoleActive = entityCollection && entityCollection.Entities.Count > 0;
        }

        return isRequiredSecurityRoleActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSCMCopilotPackageCompatible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the SCM Copilot package version is supported.
    /// </summary>
    /// <returns>true if the package is supported; otherwise false.</returns>
    public boolean isSCMCopilotPackageCompatible()
    {
        boolean isSCMVersionPackageVersionSupported = false;

        using (var context = logger.activityContext(ScmCopilotPackageVersionCheck, MetricNamespace))
        {
            if (!orgService)
            {
                logger.logWarning("@ProcurementAndSourcing:PurchTableChangeReviewTroubleshootCheckIssue");
                return isSCMVersionPackageVersionSupported;
            }

            PurchTableChangeReviewDVPackageVersionValidator validator = PurchTableChangeReviewDVPackageVersionValidator::construct(orgService);
            isSCMVersionPackageVersionSupported = validator.isSCMCopilotDataversePackageCompatible();
            
            context.addCustomProperty(ScmCopilotPackageVersionCheck, enum2Symbol(enumNum(FalseTrue),isSCMVersionPackageVersionSupported));
        }

        return isSCMVersionPackageVersionSupported;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>