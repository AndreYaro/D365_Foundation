<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsFormCtrl_PdsComdPricingTemplate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Form control class for the PdsComdPricingTemplate form
/// </summary>
/// <remarks>
/// The form control is part of the PDS module.
/// </remarks>
class PdsFormCtrl_PdsComdPricingTemplate extends PmfFormCtrl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowCopy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the information may be copied to the selected template.
    /// </summary>
    /// <returns>
    /// true if the information can be copied; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the current record on the form does not already have data, data may be copied.
    /// </remarks>
    public boolean allowCopy()
    {
        PdsComdPricingTemplate  compTemplate = this.parmBuffer();

        return (compTemplate.RecId != 0)
            && !PdsComdPricingTemplateLine::hasDataForTemplate(compTemplate.PricingTemplateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceActivePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logic to run after the datasource active method has completed
    /// </summary>
    /// <remarks>
    /// After super call, update design.
    /// </remarks>
    public void dataSourceActivePost()
    {
        super();

        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logic to run after the form initialization method has completed
    /// </summary>
    /// <remarks>
    /// This method is used to initialize form cotrols to be set.
    /// </remarks>
    public void initPost()
    {
        #define.copy('Copy')

        super();

        if (!this.parmFormRun())
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(#copy),
            methodstr(PdsFormCtrl_PdsComdPricingTemplate,allowCopy),
            ButtonRuleEffectType::Enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the form design
    /// </summary>
    /// <remarks>
    /// Call check of any form buttons and also standard logic.
    /// </remarks>
    public void updateDesign()
    {
        super();

        formButtonManager.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PdsFormCtrl_PdsComdPricingTemplate construct()
    {
        return new PdsFormCtrl_PdsComdPricingTemplate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a new instance of the <c>PdsFormCtrl_PdsComdPricingTemplate</c> class
    /// </summary>
    /// <param name="_fr">
    /// Calling FormRun object
    /// </param>
    /// <returns>
    /// New instance of the <c>PdsFormCtrl_PdsCompPricingTemplate</c>
    /// </returns>
    /// <remarks>
    /// The method initializes a new instance of the class and set the calling form as
    /// the formRun Object.
    /// </remarks>
    public static PdsFormCtrl_PdsComdPricingTemplate newFromForm(FormRun _fr)
    {
        PdsFormCtrl_PdsComdPricingTemplate frmCtrl;

        frmCtrl = PdsFormCtrl_PdsComdPricingTemplate::construct();
        frmCtrl.parmFormRun(_fr);
        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>