<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventKanbanReservationCriteria</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventKanbanReservationCriteria</c> applies kanban supermarket specific criteria to reservation queries.
/// </summary>
public class InventKanbanReservationCriteria extends InventOnHandSingleDimensionCriteria
{
    boolean                 canBeOnSupermarket;
    InventDimGroupSetup     inventDimGroupSetup;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addNotExistsSupermarketJoin</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a Not Exists Join to the given query.
    /// </summary>
    /// <param name="_query">
    ///    The query to add the Not Exists Join to.
    /// </param>
    /// <returns>
    ///    The <c>QueryBuildDataSource</c> that represents the Not Exists Join.
    /// </returns>
    protected QueryBuildDataSource addNotExistsSupermarketJoin(Query _query)
    {
        QueryBuildDataSource qbdsInventDim = _query.dataSourceTable(tableNum(InventDim));

        QueryBuildDataSource qbdsWMSLocation = qbdsInventDim.addDataSource(tableNum(WMSLocation));
        qbdsWMSLocation.joinMode(JoinMode::NoExistsJoin);
        qbdsWMSLocation.relations(true);
        qbdsWMSLocation.addRange(fieldNum(WMSLocation,LocationType)).value(queryValue(WMSLocationType::KanbanSupermarket));

        return qbdsWMSLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>affectedDimension</Name>
				<Source><![CDATA[
        public FieldId affectedDimension()
    {
        return fieldNum(InventDim, WMSLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMustBeApplied</Name>
				<Source><![CDATA[
        protected boolean calcMustBeApplied()
    {
        return    !canBeOnSupermarket
               && inventDimGroupSetup.isDimensionActive(fieldNum(InventDim,wmsLocationId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>doApplyToOnHandQuery</Name>
				<Source><![CDATA[
        protected void doApplyToOnHandQuery(InventOnHandQuery _onHandQuery)
    {
        this.addNotExistsSupermarketJoin(_onHandQuery.parmSysQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the class instance.
    /// </summary>
    /// <param name="_movement">
    ///    An inventory movement that is used to initialize the class.
    /// </param>
    protected void initFromMovement(InventMovement _movement)
    {
        canBeOnSupermarket  = _movement.canBeOnSupermarket();
        inventDimGroupSetup = _movement.inventDimGroupSetup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static InventKanbanReservationCriteria construct()
    {
        return new InventKanbanReservationCriteria();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventKanbanReservationCriteria</c> class.
    /// </summary>
    /// <param name="_movement">
    ///    An inventory movement that is used to instantiate the <c>InventKanbanReservationCriteria</c> class instance.
    /// </param>
    /// <returns>
    ///    A new <c>InventKanbanReservationCriteria</c> class instance.
    /// </returns>
    public static InventKanbanReservationCriteria newFromMovement(InventMovement _movement)
    {
        InventKanbanReservationCriteria inventKanbanReservationCriteria = InventKanbanReservationCriteria::construct();

        if (!_movement)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        inventKanbanReservationCriteria.initFromMovement(_movement);

        return inventKanbanReservationCriteria;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
