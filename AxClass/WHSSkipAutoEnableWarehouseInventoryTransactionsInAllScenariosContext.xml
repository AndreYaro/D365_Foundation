<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSSkipAutoEnableWarehouseInventoryTransactionsInAllScenariosContext</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSSkipAutoEnableWarehouseInventoryTransactionsInAllScenariosContext</c> class allows to control from external code if
/// system should attempt to auto-enable warehouse-specific inventory transactions (default) or not.
/// </summary>
internal final class WHSSkipAutoEnableWarehouseInventoryTransactionsInAllScenariosContext implements System.IDisposable
{
    private static WHSSkipAutoEnableWarehouseInventoryTransactionsInAllScenariosContext singleton;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>skipAutoEnable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSSkipAutoEnableWarehouseInventoryTransactionsInAllScenariosContext skipAutoEnable()
    {
        if (singleton)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        singleton = new WHSSkipAutoEnableWarehouseInventoryTransactionsInAllScenariosContext();
        return singleton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSSkipAutoEnableWarehouseInventoryTransactionsInAllScenariosContext instance()
    {
        return singleton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipAutoEnable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmSkipAutoEnable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void Dispose()
    {
        singleton = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>