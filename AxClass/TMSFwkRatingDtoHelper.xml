<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSFwkRatingDtoHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Ax.Tms.Base.Data;

/// <summary>
/// The <c>TMSFwkRatingDtoHelper</c> class is a utility for <c>RatingDto></c> objects.
/// </summary>
public class TMSFwkRatingDtoHelper
{
    public static TMSScheduledShipUTCDateTime unspecifiedDateTime = DateTimeUtil::newDateTime(dateNull(), 0);
    private static Map ratingProfilesMap = new Map(Types::String, Types::Record);
    private static Map ratingDtosMap = new Map(Types::String, Types::Class);
    private static Map carrierServicesMap = new Map(Types::String, Types::Class);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getRatingDtoForCarrier</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves rating DTO.
    /// </summary>
    /// <param name="_transactionFacade">Transaction facade.</param>
    /// <param name="_carrierCode">Carrier code.</param>
    /// <param name="_carrierServiceCode">Carrier service code.</param>
    /// <param name="_scheduledShipDateTime">Scheduled ship date.</param>
    /// <returns>A list of RatingDto objects.</returns>
    public static RatingDto getRatingDtoForCarrier(
        TmsTransactionFacade        _transactionFacade,
        TMSCarrierCode              _carrierCode,
        TMSCarrierServiceCode       _carrierServiceCode,
        TMSScheduledShipUTCDateTime _scheduledShipDateTime)
    {
        RatingDto ratingDto = new RatingDto();

        if (_carrierCode != '' && _carrierServiceCode != '')
        {
            TMSScheduledShipUTCDateTime effectiveScheduledShipDateTime = _scheduledShipDateTime == unspecifiedDateTime ? DateTimeUtil::utcNow() : _scheduledShipDateTime;

            TMSRatingProfile ratingProfile = TMSFwkRatingDtoHelper::getRatingProfile(
                        _carrierCode,
                        _transactionFacade.parmInventSiteId(),
                        _transactionFacade.parmInventoryLocationId(),
                        effectiveScheduledShipDateTime);

            var key = TMSFwkRatingDtoHelper::constructRatingDtoKey(_carrierCode, _carrierServiceCode, effectiveScheduledShipDateTime);
            if (ratingDtosMap.exists(key))
            {
                RatingDtoList ratingDtoList = ratingDtosMap.lookup(key);
                RatingDtoListEnumerator ratingDtoListEnumerator = ratingDtoList.getListEnumerator();
                while (ratingDtoListEnumerator.MoveNext())
                {
                    ratingDto = ratingDtoListEnumerator.Current();
                    if (ratingDto.TransitTimeEngineCode == ratingProfile.TransitTimeEngineCode
                        && ratingDto.RateEngineCode == ratingProfile.RateEngineCode
                        && ratingDto.RateMasterCode == ratingProfile.RateMasterCode
                        && ratingDto.CarrierFuelIndexCode == ratingProfile.CarrierFuelIndexCode)
                    {
                        return new RatingDto(ratingDto);
                    }
                }
            }

            TMSCarrier carrier = TMSCarrier::find(_carrierCode);
            if (carrier)
            {
                TMSCarrierService carrierService = TMSCarrierService::find(_carrierServiceCode, _carrierCode);
                if (carrierService)
                {
                    ratingDto = TMSFwkRatingDtoHelper::createRatingDto(carrier, carrierService, ratingProfile, effectiveScheduledShipDateTime);
                    if (ratingDtosMap.exists(key))
                    {
                        RatingDtoList ratingDtoList = ratingDtosMap.lookup(key);
                        ratingDtoList.Add(ratingDto);
                    }
                    else
                    {
                        RatingDtoList ratingDtoList = new RatingDtoList();
                        ratingDtoList.Add(ratingDto);
                        ratingDtosMap.insert(key, ratingDtoList);
                    }
                }
            }
        }

        return ratingDto;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRatingDtosForCarrierGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves list of rating DTOs based on carrier group.
    /// </summary>
    /// <param name = "_transactionFacade">Transaction facade.</param>
    /// <param name = "_scheduledShipDateTime">Scheduled shipment date time.</param>
    /// <param name = "_carrierGroupCode">Carrier group code.</param>
    /// <returns>A list of rating DTOs; Empty list otherwise.</returns>
    public static RatingDtoList getRatingDtosForCarrierGroup(
                    TmsTransactionFacade        _transactionFacade,
                    TMSScheduledShipUTCDateTime _scheduledShipDateTime,
                    TMSCarrierGroupCode         _carrierGroupCode)
    {
        return TMSFwkRatingDtoHelper::getRatingDtosForCarrierGroupAndMode(_transactionFacade, _scheduledShipDateTime, _carrierGroupCode, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRatingDtosForCarrierGroupAndMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a list of rating DTOs based on the carrier group and mode
    /// </summary>
    /// <param name = "_transactionFacade">Transaction facade</param>
    /// <param name = "_scheduledShipDateTime">Scheduled shipment date time</param>
    /// <param name = "_carrierGroupCode">Carrier group code</param>
    /// <param name = "_modeCode">Mode code</param>
    /// <returns>A list of rating DTOs; otherwise, empty list.</returns>
    public static RatingDtoList getRatingDtosForCarrierGroupAndMode(
                    TmsTransactionFacade        _transactionFacade,
                    TMSScheduledShipUTCDateTime _scheduledShipDateTime,
                    TMSCarrierGroupCode         _carrierGroupCode,
                    TMSModeCode                 _modeCode)
    {
        RatingDtoList result = new RatingDtoList();

        TMSCarrierGroup     carrierGroup;
        TMSCarrierGroupXRef carrierGroupXRef;
        TMSCarrier          carrier;
        TMSCarrierService   carrierService;
        InventSiteId        siteId = _transactionFacade.parmInventSiteId();
        InventLocationId    locationId = _transactionFacade.parmInventoryLocationId();

        TMSScheduledShipUTCDateTime effectiveScheduledShipDateTime = _scheduledShipDateTime == unspecifiedDateTime ? DateTimeUtil::utcNow() : _scheduledShipDateTime;

        while select carrierGroupXRef
            join carrierGroup
                where carrierGroup.CarrierGroupCode == carrierGroupXRef.carrierGroupCode
                   && carrierGroupXRef.CarrierGroupCode == _carrierGroupCode
                    join carrier
                        where carrier.CarrierCode == carrierGroupXRef.CarrierCode
                            && carrier.Active == NoYes::Yes
                            && (_modeCode == '' || carrier.ModeCode == _modeCode)
                            join carrierService
                                where carrierService.CarrierServiceCode == carrierGroupXRef.CarrierServiceCode
                                    && carrierService.CarrierCode == carrier.CarrierCode
        {
            TMSRatingProfile ratingProfile = TMSFwkRatingDtoHelper::getRatingProfile(
                        carrier.CarrierCode,
                        siteId,
                        locationId,
                        effectiveScheduledShipDateTime);

            RatingDto ratingDto = TMSFwkRatingDtoHelper::createRatingDto(carrier, carrierService, ratingProfile, effectiveScheduledShipDateTime);
            result.Add(ratingDto);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRatingDtosForCarrierAndCarrierService</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves list of rating DTOs based on carrier and carrier service.
    /// </summary>
    /// <param name = "_transactionFacade">Transaction facade.</param>
    /// <param name = "_scheduledShipDateTime">Scheduled shipment date time.</param>
    /// <param name = "_carrierCode">Carrier code.</param>
    /// <param name = "_carrierServiceCode">Carrier service code.</param>
    /// <returns>A list of rating DTOs; Empty list otherwise.</returns>
    public static RatingDtoList getRatingDtosForCarrierAndCarrierService(
        TmsTransactionFacade        _transactionFacade,
        TMSScheduledShipUTCDateTime _scheduledShipDateTime,
        TMSCarrierCode              _carrierCode,
        TMSCarrierServiceCode       _carrierServiceCode)
    {
        RatingDtoList result;

        TMSScheduledShipUTCDateTime effectiveScheduledShipDateTime = _scheduledShipDateTime == unspecifiedDateTime ? DateTimeUtil::utcNow() : _scheduledShipDateTime;
        TMSCarrier                  carrier;
        TMSCarrierService           carrierService;
        InventSiteId                siteId = _transactionFacade.parmInventSiteId();
        InventLocationId            locationId = _transactionFacade.parmInventoryLocationId();
        TMSRatingProfile            ratingProfile = TMSFwkRatingDtoHelper::getRatingProfile(
                                                                            _carrierCode,
                                                                            siteId,
                                                                            locationId,
                                                                            effectiveScheduledShipDateTime);
        var key = TMSFwkRatingDtoHelper::constructRatingDtoKey(_carrierCode, _carrierServiceCode, effectiveScheduledShipDateTime);
        if (ratingDtosMap.exists(key))
        {
            result = ratingDtosMap.lookup(key);
        }
        else
        {
            result = new RatingDtoList();
            while select carrier
                where carrier.CarrierCode == _carrierCode
                    &&  carrier.Active == NoYes::Yes
                join carrierService
                    where carrierService.CarrierCode == carrier.CarrierCode
                        && carrierService.CarrierServiceCode == _carrierServiceCode
            {
                RatingDto ratingDto = TMSFwkRatingDtoHelper::createRatingDto(carrier, carrierService, ratingProfile, effectiveScheduledShipDateTime);
                result.Add(ratingDto);
            }
            ratingDtosMap.insert(key, result);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRatingDtos</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves list of rating DTOs.
    /// </summary>
    /// <param name = "_transactionFacade">Transaction facade.</param>
    /// <param name = "_scheduledShipDateTime">Scheduled shipment date time.</param>
    /// <returns>A list of rating DTOs; Empty list otherwise.</returns>
    public static RatingDtoList getRatingDtos(
        TmsTransactionFacade        _transactionFacade,
        TMSScheduledShipUTCDateTime _scheduledShipDateTime)
    {
        RatingDtoList result = new RatingDtoList();

        TMSScheduledShipUTCDateTime effectiveScheduledShipDateTime = _scheduledShipDateTime == unspecifiedDateTime ? DateTimeUtil::utcNow() : _scheduledShipDateTime;
        TMSCarrier                  carrier;
        TMSCarrierService           carrierService;
        InventSiteId                siteId = _transactionFacade.parmInventSiteId();
        InventLocationId            locationId = _transactionFacade.parmInventoryLocationId();

        if (!carrierServicesMap.empty())
        {
            MapEnumerator carrierServicesMapEnumerator = carrierServicesMap.getEnumerator();
            while (carrierServicesMapEnumerator.moveNext())
            {
                TMSCarrierCode carrierCode = carrierServicesMapEnumerator.currentKey();

                List carrierServicesCodeList = carrierServicesMapEnumerator.currentValue();
                ListEnumerator carrierServicesListEnumerator = carrierServicesCodeList.getEnumerator();
                while (carrierServicesListEnumerator.moveNext())
                {
                    result.AddRange(TMSFwkRatingDtoHelper::getRatingDtosForCarrierAndCarrierService(
                            _transactionFacade,
                            _scheduledShipDateTime,
                            carrierCode,
                            carrierServicesListEnumerator.current()));
                }
            }
        }
        else
        {
            TMSCarrierCode carrierCode = "";
            List carrierServicesCodeList = new List(Types::String);

            while select carrier
                order by carrier.CarrierCode
                where carrier.Active == NoYes::Yes
                join carrierService
                    where carrierService.CarrierCode == carrier.CarrierCode
            {
                if (carrier.CarrierCode != carrierCode)
                {
                    if (!carrierServicesCodeList.empty())
                    {
                        carrierServicesMap.insert(carrierCode, carrierServicesCodeList);
                    }
                    carrierServicesCodeList = new List(Types::String);
                    carrierCode = carrier.CarrierCode;
                }
                carrierServicesCodeList.addEnd(carrierService.CarrierServiceCode);

                result.AddRange(TMSFwkRatingDtoHelper::getRatingDtosForCarrierAndCarrierService(
                            _transactionFacade,
                            _scheduledShipDateTime,
                            carrier.CarrierCode,
                            carrierService.CarrierServiceCode));
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRatingDtosForModeAndCarrier</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves list of rating DTOs based on transportation mode and carrier if specified.
    /// </summary>
    /// <param name = "_transactionFacade">Transaction facade.</param>
    /// <param name = "_scheduledShipDateTime">Scheduled shipment date time.</param>
    /// <param name = "_modeCode">Transportation mode code.</param>
    /// <param name = "_carrierCode">Carrier code.</param>
    /// <returns>A list of rating DTOs; Empty list otherwise.</returns>
    public static RatingDtoList getRatingDtosForModeAndCarrier(
        TmsTransactionFacade        _transactionFacade,
        TMSScheduledShipUTCDateTime _scheduledShipDateTime,
        TMSModeCode                 _modeCode,
        TMSCarrierCode              _carrierCode)
    {
        RatingDtoList result = new RatingDtoList();

        TMSScheduledShipUTCDateTime effectiveScheduledShipDateTime = _scheduledShipDateTime == unspecifiedDateTime ? DateTimeUtil::utcNow() : _scheduledShipDateTime;
        TMSCarrier                  carrier;
        TMSCarrierService           carrierService;
        InventSiteId                siteId = _transactionFacade.parmInventSiteId();
        InventLocationId            locationId = _transactionFacade.parmInventoryLocationId();

        while select carrier
            order by carrier.CarrierCode
                where carrier.Active == NoYes::Yes
            join carrierService
                where carrierService.CarrierCode == carrier.CarrierCode
                    && ((carrier.ModeCode == _modeCode && _modeCode != '') || _modeCode == '')
                    && ((carrier.CarrierCode == _carrierCode && _carrierCode != '') || _carrierCode == '')
        {
            TMSRatingProfile ratingProfile = TMSFwkRatingDtoHelper::getRatingProfile(
                carrier.CarrierCode,
                siteId,
                locationId,
                effectiveScheduledShipDateTime);

            RatingDto ratingDto = TMSFwkRatingDtoHelper::createRatingDto(carrier, carrierService, ratingProfile, effectiveScheduledShipDateTime);
            result.Add(ratingDto);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRatingDto</Name>
				<Source><![CDATA[
    private static RatingDto createRatingDto(
        TMSCarrier                  _carrier,
        TMSCarrierService           _carrierService,
        TMSRatingProfile            _ratingProfile,
        TMSScheduledShipUTCDateTime _effectiveScheduledShipDateTime)
    {
        RatingDto ratingDto = new RatingDto();

        ratingDto.CarrierCode = _carrierService.CarrierCode;
        ratingDto.CarrierServiceCode = _carrierService.CarrierServiceCode;
        ratingDto.MethodCode = _carrierService.MethodCode;
        ratingDto.VolumeFactor = _carrierService.VolumeFactor;
        ratingDto.ModeCode = _carrier.ModeCode;
        ratingDto.TransitTimeEngineCode = _ratingProfile.TransitTimeEngineCode;
        ratingDto.RateEngineCode = _ratingProfile.RateEngineCode;
        ratingDto.RateMasterCode = _ratingProfile.RateMasterCode;
        ratingDto.ScheduledShipDate = _effectiveScheduledShipDateTime;
        ratingDto.ExternalCode = _carrierService.ExternalCode;
        ratingDto.BillingGroupId = _carrierService.BillingGroupId;
        ratingDto.CarrierFuelIndexCode = _ratingProfile.CarrierFuelIndexCode;
        ratingDto.Active = _carrier.Active == NoYes::Yes;

        return ratingDto;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRatingProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the rating profile for a given carrier, site, warehouse and scheduled ship date.
    /// </summary>
    /// <param name = "_carrierCode">The carrier code.</param>
    /// <param name = "_inventSiteId">The inventory site id.</param>
    /// <param name = "_inventLocationId">The inventory warehouse.</param>
    /// <param name = "_effectiveScheduledShipDateTime">The scheduled ship date.</param>
    /// <returns></returns>
    public static TMSRatingProfile getRatingProfile(
        TMSCarrierCode              _carrierCode,
        InventSiteId                _inventSiteId,
        InventLocationId            _inventLocationId,
        TMSScheduledShipUTCDateTime _effectiveScheduledShipDateTime)
    {
        TMSRatingProfile            ratingProfile;

        var key = TMSFwkRatingDtoHelper::constructRatingProfileKey(_carrierCode, _inventSiteId, _inventLocationId, _effectiveScheduledShipDateTime);
        if (ratingProfilesMap.exists(key))
        {
            ratingProfile = ratingProfilesMap.lookup(key);
        }
        else
        {
            select firstonly ratingProfile
            order by ratingProfile.EffectiveUTCDateTimeFrom desc,
                ratingProfile.InventSiteId desc,
                ratingProfile.InventLocationId desc
            where ratingProfile.CarrierCode == _carrierCode
                && (ratingProfile.InventSiteId == _inventSiteId || ratingProfile.InventSiteId == '')
                && (ratingProfile.InventLocationId == _inventLocationId || ratingProfile.InventLocationId == '')
                && (ratingProfile.EffectiveUTCDateTimeFrom <= _effectiveScheduledShipDateTime || ratingProfile.EffectiveUTCDateTimeFrom == unspecifiedDateTime)
                && (ratingProfile.EffectiveUTCDateTimeTo >= _effectiveScheduledShipDateTime || ratingProfile.EffectiveUTCDateTimeTo == unspecifiedDateTime);

            ratingProfilesMap.insert(key, ratingProfile);
        }

        return ratingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructRatingProfileKey</Name>
				<Source><![CDATA[
    private static str constructRatingProfileKey(
        TMSCarrierCode              _carrierCode,
        InventSiteId                _inventSiteId,
        InventLocationId            _inventLocationId,
        TMSScheduledShipUTCDateTime _effectiveScheduledShipDateTime)
    {
        return strFmt("%1|%2|%3|%4", _carrierCode, _inventSiteId, _inventLocationId, _effectiveScheduledShipDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructRatingDtoKey</Name>
				<Source><![CDATA[
    private static str constructRatingDtoKey(
        TMSCarrierCode              _carrierCode,
        TMSCarrierServiceCode       _carrierServiceCode,
        TMSScheduledShipUTCDateTime _scheduledShipDateTime)
    {
        return strFmt("%1|%2|%3", _carrierCode, _carrierServiceCode, _scheduledShipDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ClearCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the cache variables so that the next execution takes place on fresh data.
    /// </summary>
    public static void ClearCache()
    {
        ratingProfilesMap = new Map(Types::String, Types::Record);
        ratingDtosMap = new Map(Types::String, Types::Class);
        carrierServicesMap = new Map(Types::String, Types::Class);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>