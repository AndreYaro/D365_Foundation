<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailFulfillmentRejectCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailFulfillmentRejectCalculator</c> consolidates the logic of determining the outcome of fulfillment line split.
/// </summary>
public class RetailFulfillmentRejectCalculator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prepareFulfillmentValuesForReject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the result of potential line split after reject.
    /// </summary>
    /// <param name = "_quantityRejected">Rejected quantity.</param>
    /// <param name = "_quantityOrdered">Quantity ordered.</param>
    /// <param name = "_quantityPicked">Picked quantity.</param>
    /// <param name = "_quantityPacked">Packed quantity.</param>
    /// <param name = "_quantityInvoiced">Invoiced quantity.</param>
    /// <param name = "_fulfillmentLineStatus">Fulfillment status.</param>
    /// <returns>
    /// Returns an instance of <c>RetailFulfillmentRejectStatusCalculationResult</c> class
    /// with calculation results.
    /// </returns>
    public static RetailFulfillmentRejectStatusCalculationResult prepareFulfillmentValuesForReject(
        real _quantityRejected,
        real _quantityOrdered,
        real _quantityPicked,
        real _quantityPacked,
        real _quantityInvoiced,
        RetailFulfillmentLineStatus _fulfillmentLineStatus)
    {
        RetailFulfillmentRejectData retailFulfillmentRejectData;
        List rejectResultLines = new List(Types::AnyType);

        // Validate input
        if (RetailFulfillmentRejectCalculator::isQuantityOrderedValid(_quantityOrdered, _quantityPicked, _quantityPacked, _quantityInvoiced))
        {
            // Fulfillment line has invalid ordered quantity.
            return RetailFulfillmentRejectStatusCalculationResult::failed("@Retail:FulfillmentLineInvalidQuantityOrdered");
        }
        
        if (RetailFulfillmentRejectCalculator::isQuantityRejectedValid(_quantityOrdered, _quantityRejected, _quantityPicked, _quantityPacked, _quantityInvoiced))
        {
            // Fulfillment line has invalid rejected quantity.
            return RetailFulfillmentRejectStatusCalculationResult::failed("@Retail:FulfillmentLineInvalidQuantityRejected");
        }

        if (RetailFulfillmentRejectCalculator::isPickedPackedInvoicedValid(
            _fulfillmentLineStatus,
            _quantityOrdered,
            _quantityRejected,
            _quantityPicked,
            _quantityPacked,
            _quantityInvoiced))
        {
            // Fulfillment line has invalid combination of picked/packed/invoiced quantities.
            return RetailFulfillmentRejectStatusCalculationResult::failed("@Retail:FulfillmentLineInvalidPickedPackedInvoicedForStatus");
        }

        switch (_fulfillmentLineStatus)
        {
            case RetailFulfillmentLineStatus::Unknown:
                // Fulfillment line has invalid fulfillment status.
                return RetailFulfillmentRejectStatusCalculationResult::failed("@Retail:FulfillmentLineInvalidFulfillmentStatus");
            case RetailFulfillmentLineStatus::Picked:
            case RetailFulfillmentLineStatus::Packed:
            case RetailFulfillmentLineStatus::Invoiced:
                // Fulfillment line cannot be rejected at its current status.
                return RetailFulfillmentRejectStatusCalculationResult::failed("@Retail:FulfillmentLineRejectNotAllowed");
            case RetailFulfillmentLineStatus::PartiallyPicked:
                if (_quantityRejected > _quantityOrdered - _quantityPicked)
                {
                    // Fulfillment line cannot be rejected at its current status.
                    return RetailFulfillmentRejectStatusCalculationResult::failed("@Retail:FulfillmentLineRejectNotAllowed");
                }

                return RetailFulfillmentRejectCalculator::getPartialStatusRejectData(
                    _quantityRejected,
                    _quantityOrdered,
                    _quantityPicked,
                    _quantityPacked,
                    _quantityInvoiced,
                    _fulfillmentLineStatus);
            case RetailFulfillmentLineStatus::PartiallyPacked:
                if (_quantityRejected > _quantityOrdered - _quantityPicked - _quantityPacked)
                {
                    // Fulfillment line cannot be rejected at its current status.
                    return RetailFulfillmentRejectStatusCalculationResult::failed("@Retail:FulfillmentLineRejectNotAllowed");
                }

                return RetailFulfillmentRejectCalculator::getPartialStatusRejectData(
                    _quantityRejected,
                    _quantityOrdered,
                    _quantityPicked,
                    _quantityPacked,
                    _quantityInvoiced,
                    _fulfillmentLineStatus);
            case RetailFulfillmentLineStatus::PartiallyInvoiced:
                if (_quantityRejected > _quantityOrdered - _quantityPicked - _quantityPacked - _quantityInvoiced)
                {
                    // Fulfillment line cannot be rejected at its current status.
                    return RetailFulfillmentRejectStatusCalculationResult::failed("@Retail:FulfillmentLineRejectNotAllowed");
                }

                return RetailFulfillmentRejectCalculator::getPartialStatusRejectData(
                    _quantityRejected,
                    _quantityOrdered,
                    _quantityPicked,
                    _quantityPacked,
                    _quantityInvoiced,
                    _fulfillmentLineStatus);
            case RetailFulfillmentLineStatus::Pending:
            case RetailFulfillmentLineStatus::Accepted:
            case RetailFulfillmentLineStatus::Picking:
                // Full reject scenario
                if (_quantityRejected == _quantityOrdered)
                {
                    retailFulfillmentRejectData = RetailFulfillmentRejectData::construct(
                        _quantityOrdered,
                        0,
                        0,
                        0,
                        RetailFulfillmentLineStatus::Rejected);

                    rejectResultLines.addEnd(retailFulfillmentRejectData);
                    return RetailFulfillmentRejectStatusCalculationResult::succeeded(rejectResultLines);
                }

                // Partial reject for Full reject fulfillment line statuses
                if (_quantityOrdered > _quantityRejected)
                {
                    retailFulfillmentRejectData = RetailFulfillmentRejectData::construct(
                        _quantityOrdered - _quantityRejected,
                        _quantityPicked,
                        _quantityPacked,
                        _quantityInvoiced,
                        _fulfillmentLineStatus);

                    rejectResultLines.addEnd(retailFulfillmentRejectData);

                    retailFulfillmentRejectData = RetailFulfillmentRejectData::construct(
                        _quantityRejected,
                        0,
                        0,
                        0,
                        RetailFulfillmentLineStatus::Rejected);

                    rejectResultLines.addEnd(retailFulfillmentRejectData);

                    return RetailFulfillmentRejectStatusCalculationResult::succeeded(rejectResultLines);
                }
        }

        return RetailFulfillmentRejectStatusCalculationResult::succeeded(rejectResultLines);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQuantityOrderedValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if QuantityOrdered is valid.
    /// </summary>
    /// <param name = "_quantityOrdered">Quantity ordered.</param>
    /// <param name = "_quantityPicked">Quantity picked.</param>
    /// <param name = "_quantityPacked">Quantity packed.</param>
    /// <param name = "_quantityInvoiced">Quantity invoiced.</param>
    /// <returns>
    /// Returns <c>true</c> if QuantityOrdered is valid; otherwise, <c>false</c>.
    /// </returns>
    private static boolean isQuantityOrderedValid(
        real _quantityOrdered,
        real _quantityPicked,
        real _quantityPacked,
        real _quantityInvoiced)
    {
        // Validate input
        return (_quantityOrdered == 0)
            || (_quantityOrdered < _quantityPicked + _quantityPacked + _quantityInvoiced);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQuantityRejectedValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if QuantityRejected is valid.
    /// </summary>
    /// <param name = "_quantityOrdered">Quantity ordered.</param>
    /// <param name = "_quantityRejected">Quantity rejected.</param>
    /// <param name = "_quantityPicked">Quantity picked.</param>
    /// <param name = "_quantityPacked">Quantity packed.</param>
    /// <param name = "_quantityInvoiced">Quantity invoiced.</param>
    /// <returns>
    /// Returns <c>true</c> if QuantityRejected is valid; otherwise, <c>false</c>.
    /// </returns>
    private static boolean isQuantityRejectedValid(
        real _quantityOrdered,
        real _quantityRejected,
        real _quantityPicked,
        real _quantityPacked,
        real _quantityInvoiced)
    {
        return (_quantityRejected == 0)
            || (_quantityRejected > _quantityOrdered - _quantityPicked - _quantityPacked - _quantityInvoiced);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPickedPackedInvoicedValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if QuantityPicked/QuantityPacked/QuantityInvoiced combination is valid.
    /// </summary>
    /// <param name = "_fulfillmentLineStatus">Fulfillment line status.</param>
    /// <param name = "_quantityOrdered">Quantity ordered.</param>
    /// <param name = "_quantityRejected">Quantity rejected.</param>
    /// <param name = "_quantityPicked">Quantity picked.</param>
    /// <param name = "_quantityPacked">Quantity packed.</param>
    /// <param name = "_quantityInvoiced">Quantity invoiced.</param>
    /// <returns>
    /// Returns <c>true</c> if QuantityPicked/QuantityPacked/QuantityInvoiced combination is valid; otherwise, <c>false</c>.
    /// </returns>
    private static boolean isPickedPackedInvoicedValid(
        RetailFulfillmentLineStatus _fulfillmentLineStatus,
        real _quantityOrdered,
        real _quantityRejected,
        real _quantityPicked,
        real _quantityPacked,
        real _quantityInvoiced)
    {
        return (RetailFulfillmentRejectCalculator::fullRejectFulfillmentStatus(_fulfillmentLineStatus)
                && (_quantityPicked != 0 || _quantityPacked != 0 || _quantityInvoiced != 0))
            || (_fulfillmentLineStatus == RetailFulfillmentLineStatus::Picked
                && (_quantityOrdered != _quantityPicked || _quantityPacked != 0 || _quantityInvoiced != 0))
            || (_fulfillmentLineStatus == RetailFulfillmentLineStatus::Packed
                && (_quantityOrdered != _quantityPacked || _quantityPicked != 0 || _quantityInvoiced != 0))
            || (_fulfillmentLineStatus == RetailFulfillmentLineStatus::Invoiced
                && (_quantityOrdered != _quantityInvoiced || _quantityPicked != 0 || _quantityPacked != 0))
            || (_fulfillmentLineStatus == RetailFulfillmentLineStatus::PartiallyPicked
                && (_quantityPicked == 0 || _quantityPicked >= _quantityOrdered || _quantityPacked != 0 || _quantityInvoiced != 0))
            || (_fulfillmentLineStatus == RetailFulfillmentLineStatus::PartiallyPacked
                && (_quantityPacked == 0 || _quantityPacked >= _quantityOrdered || _quantityPicked + _quantityPacked > _quantityOrdered || _quantityInvoiced != 0))
            || (_fulfillmentLineStatus == RetailFulfillmentLineStatus::PartiallyInvoiced
                && (_quantityInvoiced == 0 || _quantityInvoiced >= _quantityOrdered || _quantityPicked + _quantityPacked + _quantityInvoiced > _quantityOrdered));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fullRejectFulfillmentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if fulfillment line status is one of the statuses when line can be rejected fully without need for split.
    /// </summary>
    /// <param name = "_fulfillmentLineStatus">Fulfillment status.</param>
    /// <returns>
    /// Returns <c>true</c> if sales line with provided status can be fully rejected without need for split as a result
    /// of reject; otherwise, <c>false</c>.
    /// </returns>
    private static boolean fullRejectFulfillmentStatus(RetailFulfillmentLineStatus _fulfillmentLineStatus)
    {
        return _fulfillmentLineStatus == RetailFulfillmentLineStatus::Pending
                || _fulfillmentLineStatus == RetailFulfillmentLineStatus::Accepted
                || _fulfillmentLineStatus == RetailFulfillmentLineStatus::Picking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUpdatedOriginalSalesLineForPartialStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates original sales line record with values it should have after the reject.
    /// </summary>
    /// <param name = "_quantityRejected">Quantity rejected.</param>
    /// <param name = "_quantityOrdered">Quantity ordered.</param>
    /// <param name = "_quantityPicked">Quantity picked.</param>
    /// <param name = "_quantityPacked">Quantity packed.</param>
    /// <param name = "_quantityInvoiced">Quantity invoiced.</param>
    /// <param name = "_fulfillmentLineStatus">Fulfillment status.</param>
    /// <returns>
    /// Returns a record with values original sales line must have after the reject.
    /// </returns>
    private static RetailFulfillmentRejectData getUpdatedOriginalSalesLineForPartialStatus(
        real _quantityRejected,
        real _quantityOrdered,
        real _quantityPicked,
        real _quantityPacked,
        real _quantityInvoiced,
        RetailFulfillmentLineStatus _fulfillmentLineStatus)
    {
        RetailFulfillmentRejectData salesLineData;
        real quantityAfterSplit = _quantityOrdered - _quantityRejected;

        switch (_fulfillmentLineStatus)
        {
            case RetailFulfillmentLineStatus::PartiallyPicked:
                if (_quantityPicked == quantityAfterSplit)
                {
                    _fulfillmentLineStatus = RetailFulfillmentLineStatus::Picked;
                }

                salesLineData = RetailFulfillmentRejectData::construct(
                    quantityAfterSplit,
                    _quantityPicked,
                    0,
                    0,
                    _fulfillmentLineStatus);
            case RetailFulfillmentLineStatus::PartiallyPacked:
                if ((_quantityPacked == quantityAfterSplit) && (_quantityPicked == 0))
                {
                    _fulfillmentLineStatus = RetailFulfillmentLineStatus::Packed;
                }

                salesLineData = RetailFulfillmentRejectData::construct(
                    quantityAfterSplit,
                    _quantityPicked,
                    _quantityPacked,
                    0,
                    _fulfillmentLineStatus);
            case RetailFulfillmentLineStatus::PartiallyInvoiced:
                if ((_quantityInvoiced == quantityAfterSplit) && (_quantityPicked == 0) && (_quantityPacked == 0))
                {
                    _fulfillmentLineStatus = RetailFulfillmentLineStatus::Invoiced;
                }

                salesLineData = RetailFulfillmentRejectData::construct(
                    quantityAfterSplit,
                    _quantityPicked,
                    _quantityPacked,
                    _quantityInvoiced,
                    _fulfillmentLineStatus);
        }

        return salesLineData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartialStatusRejectData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates fulfillment reject data for Partial fulfillment status sales lines.
    /// </summary>
    /// <param name = "_quantityRejected">Quantity rejected.</param>
    /// <param name = "_quantityOrdered">Quantity ordered.</param>
    /// <param name = "_quantityPicked">Quantity picked.</param>
    /// <param name = "_quantityPacked">Quantity packed.</param>
    /// <param name = "_quantityInvoiced">Quantity invoiced.</param>
    /// <param name = "_fulfillmentLineStatus">Fulfillment status.</param>
    /// <returns></returns>
    private static RetailFulfillmentRejectStatusCalculationResult getPartialStatusRejectData(
        real _quantityRejected,
        real _quantityOrdered,
        real _quantityPicked,
        real _quantityPacked,
        real _quantityInvoiced,
        RetailFulfillmentLineStatus _fulfillmentLineStatus)
    {
        RetailFulfillmentRejectData retailFulfillmentRejectData;
        List rejectResultLines = new List(Types::AnyType);

        // Add original sales line data.
        retailFulfillmentRejectData = RetailFulfillmentRejectCalculator::getUpdatedOriginalSalesLineForPartialStatus(
                    _quantityRejected,
                    _quantityOrdered,
                    _quantityPicked,
                    _quantityPacked,
                    _quantityInvoiced,
                    _fulfillmentLineStatus);

        rejectResultLines.addEnd(retailFulfillmentRejectData);

        // Add new split line data.
        retailFulfillmentRejectData = RetailFulfillmentRejectData::construct(
                    _quantityRejected,
                    0,
                    0,
                    0,
                    RetailFulfillmentLineStatus::Rejected);

        rejectResultLines.addEnd(retailFulfillmentRejectData);

        return RetailFulfillmentRejectStatusCalculationResult::succeeded(rejectResultLines);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>