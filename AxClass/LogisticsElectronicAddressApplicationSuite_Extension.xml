<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LogisticsElectronicAddressApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Extension class of table <c>LogisticsElectronicAddress</c>
/// </summary>
[ExtensionOf(tableStr(LogisticsElectronicAddress))]
final class LogisticsElectronicAddressApplicationSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findAllByDirPartyRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds all <c>LogisticsElectronicAddress</c> records associated with the <c>DirPartyRecId</c>.
    /// </summary>
    /// <param name="_dirPartyRecId">
    /// The record ID of <c>DirPartyTable</c> table.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// Record(s) in the <c>LogisticsElectronicAddress</c> table.
    /// </returns>
    [Hookable(false)]
    public static LogisticsElectronicAddress findAllByDirPartyRecId(DirPartyRecId _dirPartyRecId, boolean _forUpdate = false)
    {
        if (!_dirPartyRecId)
        {
            return null;
        }

        DirPartyLocation dirPartyLocation;
        LogisticsLocation logisticsLocation;
        LogisticsElectronicAddress logisticsElectronicAddress;

        select firstonly dirPartyLocation
            where dirPartyLocation.Party == _dirPartyRecId;

        if (dirPartyLocation)
        {
            select firstonly logisticsLocation
                where logisticsLocation.RecId == dirPartyLocation.Location;

            if (logisticsLocation)
            {
                logisticsElectronicAddress.selectForUpdate(_forUpdate);
                select logisticsElectronicAddress
                    where logisticsElectronicAddress.Location == logisticsLocation.RecId;
            }
        }

        return logisticsElectronicAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDirPartyRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first <c>LogisticsElectronicAddress</c> record associated with the <c>DirPartyRecId</c>.
    /// </summary>
    /// <param name="_dirPartyRecId">
    /// The record ID of <c>DirPartyTable</c> table.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// Record in the <c>LogisticsElectronicAddress</c> table.
    /// </returns>
    [Hookable(false)]
    public static LogisticsElectronicAddress findByDirPartyRecId(DirPartyRecId _dirPartyRecId, boolean _forUpdate = false)
    {
        if (!_dirPartyRecId)
        {
            return null;
        }

        DirPartyLocation dirPartyLocation;
        LogisticsLocation logisticsLocation;
        LogisticsElectronicAddress logisticsElectronicAddress;

        select firstonly dirPartyLocation
            where dirPartyLocation.Party == _dirPartyRecId;

        if (dirPartyLocation)
        {
            select firstonly logisticsLocation
                where logisticsLocation.RecId == dirPartyLocation.Location;

            if (logisticsLocation)
            {
                logisticsElectronicAddress.selectForUpdate(_forUpdate);
                select firstonly logisticsElectronicAddress
                    where logisticsElectronicAddress.Location == logisticsLocation.RecId;
            }
        }

        return logisticsElectronicAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByChannelReferenceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Locates an electronic address record by the channel reference id.
    /// </summary>
    /// <param name = "_channelReferenceId">The channel reference identifier.</param>
    /// <param name = "_update">Specifies if the record should be set to be updatable.</param>
    /// <returns>The located electronic address record, if any.</returns>
    [Hookable(false)]
    public static LogisticsElectronicAddress findByChannelReferenceId(RetailAsyncAddressId _channelReferenceId,  boolean _update = false )
    {
        LogisticsElectronicAddress logisticsElectronicAddress;

        if (_channelReferenceId)
        {
            logisticsElectronicAddress.selectForUpdate(_update);

            select firstonly logisticsElectronicAddress
                where logisticsElectronicAddress.ChannelReferenceId == _channelReferenceId;
        }

        return logisticsElectronicAddress;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>