<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocParmDataCreatorRetailFDoc_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Builds a <c>FiscalDocumentParmData_BR</c> object from a <c>RetailFiscalDocument_BR</c> record
/// </summary>
public class FiscalDocParmDataCreatorRetailFDoc_BR extends FiscalDocumentParmDataCreator_BR
{
    RecordSortedList linesList;
    CustInvoiceJour statementCustInvoiceJour;
    RetailFiscalDocument_BR retailFiscalDocument;

    private Map custInvoiceTransRecIdList;
    private Map inventDimIdList;
    private CustTrans custTrans;
    private FiscalDocumentParmData_BR fiscalDocumentParmData;
    private boolean aggregateBeforePosting;

    private RetailFiscalDocumentContingency_BR retailFiscalDocumentContingency;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createParmData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the entire Fiscal Document ParmData object model from NFC-e
    /// </summary>
    /// <returns>
    ///     An instance of <c>FiscalDocumentParmData_BR</c>
    /// </returns>
    public FiscalDocumentParmData_BR createParmData()
    {
        fiscalDocumentParmData = this.initHeaderParmData();

        List listOfFiscalDocumentLineParmData = this.initLinesParmData();
        fiscalDocumentParmData.parmLines(listOfFiscalDocumentLineParmData);

        this.setAccountingAmountOnFiscalDocumentLines(fiscalDocumentParmData);

        List listOfFiscalDocumentPaymentTransParmData = this.initPaymentTransParmData();
        fiscalDocumentParmData.parmPaymentTrans(listOfFiscalDocumentPaymentTransParmData);

        List listOfFiscalDocumentReferenceParmData = this.initListOfFiscalReference(fiscalDocumentParmData);
        fiscalDocumentParmData.parmListOfFiscalReference(listOfFiscalDocumentReferenceParmData);

        return fiscalDocumentParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomerAccount</Name>
				<Source><![CDATA[
    private CustVendAc getCustomerAccount()
    {
        RetailTransactionTable rTransactionTable;
        
        select custAccount from rTransactionTable
            where rTransactionTable.terminal == retailFiscalDocument.terminal
                && rTransactionTable.store == retailFiscalDocument.store
                && rTransactionTable.transactionId == retailFiscalDocument.transactionId;
        
        return rTransactionTable.custAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderParmData</Name>
				<Source><![CDATA[
    protected FiscalDocumentParmData_BR initHeaderParmData()
    {
        FiscalDocumentParmData_BR fiscalDocument = new RetailFiscalDocumentParmData_BR();

        fiscalDocument.parmAccountingDate                   (DateTimeUtil::date(retailFiscalDocument.FiscalDocumentDateTime));
        fiscalDocument.parmFiscalDocumentAccountNum         (retailFiscalDocument.FiscalDocumentAccountNum);
        fiscalDocument.parmFiscalDocumentAccountType        (CustVendType_BR::Customer);
        fiscalDocument.parmFinalUser                        (retailFiscalDocument.FinalUser);
        fiscalDocument.parmPresenceType                     (retailFiscalDocument.PresenceType);
        fiscalDocument.parmPaymentAmount                    (retailFiscalDocument.TotalAmount);
        fiscalDocument.parmPaymentMethod                    (EFDocPaymentMethod_BR::Other);
    
        fiscalDocument.parmServiceCodeOnDlvAddress          (false);
        fiscalDocument.parmCFPSId                           ('');
        fiscalDocument.parmDeliveryCNPJCPF                  ('');
        fiscalDocument.parmDeliveryIE                       ('');
        fiscalDocument.parmDeliveryLogisticsPostalAddress   (0);
        fiscalDocument.parmDeliveryMode                     ('');
        fiscalDocument.parmDeliveryTerm                     ('');

        fiscalDocument.parmFiscalEstablishmentID            (retailFiscalDocument.FiscalEstablishment);
        fiscalDocument.parmFiscalEstablishmentName          (retailFiscalDocument.FiscalEstablishmentName);
        fiscalDocument.parmFiscalEstablishmentPostalAddress (retailFiscalDocument.FiscalEstablishmentPostalAddress);
        fiscalDocument.parmFiscalEstablishmentCNPJCPF       (retailFiscalDocument.FiscalEstablishmentCNPJCPF);
        fiscalDocument.parmFiscalEstablishmentIE            (retailFiscalDocument.FiscalEstablishmentIE);
        fiscalDocument.parmFiscalEstablishmentCCMNum        (retailFiscalDocument.FiscalEstablishmentCCMNum);
        fiscalDocument.parmFiscalEstablishmentPhone         (retailFiscalDocument.FiscalEstablishmentPhone);
        fiscalDocument.parmFiscalEstablishmentTribSubstReg  ('');

        fiscalDocument.parmThirdPartyName                   (retailFiscalDocument.ThirdPartyName);
        fiscalDocument.parmThirdPartyCNPJCPF                (retailFiscalDocument.ThirdPartyCNPJCPF);
        fiscalDocument.parmThirdPartyForeignerId            (retailFiscalDocument.ThirdPartyForeignerId);
        fiscalDocument.parmThirdPartyIE                     ('');
        fiscalDocument.parmThirdPartyCCMNum                 ('');
        fiscalDocument.parmThirdPartyPostalAddress          (retailFiscalDocument.ThirdPartyPostalAddress);
        fiscalDocument.parmThirdPartyPhone                  (retailFiscalDocument.ThirdPartyPhone);
        fiscalDocument.parmThirdPartyFax                    ('');
        fiscalDocument.parmThirdPartyEmail                  (retailFiscalDocument.ThirdPartyEmail);

        fiscalDocument.parmDirection                        (retailFiscalDocument.Direction);
        fiscalDocument.parmFiscalDocumentDate               (DateTimeUtil::date(retailFiscalDocument.FiscalDocumentDateTime));
        // Field FiscalDocumentDateTime does not have UTC datetime, but rather the local time
        fiscalDocument.parmFiscalDocumentDateTime           (DateTimeUtil::addSeconds(retailFiscalDocument.FiscalDocumentDateTime, -retailFiscalDocument.FiscalDocumentDateTimeOffset));
        fiscalDocument.parmFiscalDocumentDateTimeOffset     (retailFiscalDocument.FiscalDocumentDateTimeOffset);
        fiscalDocument.parmFiscalDocumentIssuer             (FiscalDocumentIssuer_BR::OwnEstablishment);
        fiscalDocument.parmFiscalDocumentType               (null);
        fiscalDocument.parmModel                            (retailFiscalDocument.Model);
        fiscalDocument.parmSpecie                           (FiscalDocumentSpecie_BR::NF);

        fiscalDocument.parmStatus                               (retailFiscalDocument.Status);

        fiscalDocument.parmFiscalDocumentNumber                 (retailFiscalDocument.FiscalDocumentNumber);
        fiscalDocument.parmFiscalDocumentSeries                 (retailFiscalDocument.FiscalDocumentSeries);
        fiscalDocument.parmFiscalDocumentAccessKey              (retailFiscalDocument.AccessKey);
        fiscalDocument.parmEFiscalDocumentNumericCode           (retailFiscalDocument.NumericCode);
        fiscalDocument.parmFiscalDocumentOperationDescription   (retailFiscalDocument.OperationDescription);

        fiscalDocument.parmFreightChargeTerms(FiscalDocumentFreightTerms_BR::Nofreight);
        fiscalDocument.parmInventoryVoucher(statementCustInvoiceJour.LedgerVoucher);

        fiscalDocument.parmRefRecId                         (statementCustInvoiceJour.RecId);
        fiscalDocument.parmRefTableId                       (statementCustInvoiceJour.TableId);

        fiscalDocument.parmPurpose(FiscalDocumentPurpose_BR::Regular);

        fiscalDocument.parmPackingBrand                     ('');
        fiscalDocument.parmSalesCarrier                     (0);
        fiscalDocument.parmSalesCarrierPostalAddress        (0);
        fiscalDocument.parmVehicleLicensePlateNumber        ('');
        fiscalDocument.parmVehicleLicensePlateState         ('');

        fiscalDocument.parmVoucher                          (statementCustInvoiceJour.LedgerVoucher);

        fiscalDocument.parmTotalDiscountAmount          (retailFiscalDocument.TotalDiscountAmount);
        fiscalDocument.parmTotalAmount                  (retailFiscalDocument.TotalAmount);
        fiscalDocument.parmTotalGoodsAmount             (retailFiscalDocument.TotalGoodsAmount);
        fiscalDocument.parmTotalServicesAmount          (retailFiscalDocument.TotalServicesAmount);
        fiscalDocument.parmTotalMarkupFreightAmount     (0);
        fiscalDocument.parmTotalMarkupInsuranceAmount   (0);
        fiscalDocument.parmTotalMarkupOtherAmount       (0);

        fiscalDocument.parmApplicationVersion(retailFiscalDocument.ApplicationVersion);

        return fiscalDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLinesParmData</Name>
				<Source><![CDATA[
    protected List initLinesParmData()
    {
        RetailFiscalDocumentLine_BR             retailFiscalDocumentLine;
        FiscalDocumentLineParmData_BR           fiscalDocumentLineParmData;
        List                                    ret = new List(Types::Class);
        FiscalDocumentTaxPovertyFundCalc_BR     fiscalDocumentTaxPovertyFundCalc;
        InventTable                             inventTable;
        LogisticsPostalAddress                  logisticsPostalAddress;
        TaxBenefitCodeSetupHeading_BR           taxBenefitCodeSetupHeading;

        fiscalDocumentTaxPovertyFundCalc = new FiscalDocumentTaxPovertyFundCalc_BR(fiscalDocumentParmData, true);

        if (retailFiscalDocument.Direction == FiscalDocDirection_BR::Outgoing)
        {
            logisticsPostalAddress = LogisticsPostalAddress::findRecId(retailFiscalDocument.ThirdPartyPostalAddress);
        }
        else
        {
            logisticsPostalAddress = logisticsPostalAddress::findRecId(retailFiscalDocument.FiscalEstablishmentPostalAddress);
        }
        taxBenefitCodeSetupHeading = TaxBenefitCodeSetupHeading_BR::findByCountryRegionIdAndStateId(logisticsPostalAddress.CountryRegionId, logisticsPostalAddress.State);
        while select retailFiscalDocumentLine
            where retailFiscalDocumentLine.Channel == retailFiscalDocument.Channel
                && retailFiscalDocumentLine.store == retailFiscalDocument.store
                && retailFiscalDocumentLine.terminal == retailFiscalDocument.terminal
                && retailFiscalDocumentLine.transactionId == retailFiscalDocument.transactionId
                && retailFiscalDocumentLine.FiscalDocumentNumber == retailFiscalDocument.FiscalDocumentNumber
                && retailFiscalDocumentLine.FiscalDocumentSeries == retailFiscalDocument.FiscalDocumentSeries
        {
            inventTable = InventTable::find(retailFiscalDocumentLine.ItemId);
            fiscalDocumentLineParmData = new FiscalDocumentLineParmData_BR();

            fiscalDocumentLineParmData.parmItemType             (retailFiscalDocumentLine.ItemType);
            fiscalDocumentLineParmData.parmFiscalClassification (retailFiscalDocumentLine.FiscalClassification);
            fiscalDocumentLineParmData.parmServiceCode          (retailFiscalDocumentLine.ServiceCode);

            fiscalDocumentLineParmData.parmLineNum                  (retailFiscalDocumentLine.LineNum);
            fiscalDocumentLineParmData.parmItemId                   (retailFiscalDocumentLine.ItemId);
            fiscalDocumentLineParmData.parmDescription              (retailFiscalDocumentLine.Description);
            fiscalDocumentLineParmData.parmCFOP                     (retailFiscalDocumentLine.CFOP);
            fiscalDocumentLineParmData.parmQuantity                 (retailFiscalDocumentLine.Quantity);
            fiscalDocumentLineParmData.parmUnit                     (retailFiscalDocumentLine.Unit);
            fiscalDocumentLineParmData.parmUnitPrice                (retailFiscalDocumentLine.UnitPrice);
            fiscalDocumentLineParmData.parmLineAmount               (retailFiscalDocumentLine.LineAmount);
            fiscalDocumentLineParmData.parmLineDiscount             (retailFiscalDocumentLine.LineDiscount);
            fiscalDocumentLineParmData.parmScaleIndicator           (inventTable.ScaleIndicator_BR);
            fiscalDocumentLineParmData.parmCNPJ                     (inventTable.CNPJ_BR);

            fiscalDocumentLineParmData.parmBenefitCode              (TaxBenefitCodeSetupData_BR::findAdjustmentCode(
                                                                        taxBenefitCodeSetupHeading.RecId,
                                                                        retailFiscalDocumentLine.ItemId,
                                                                        CustVendType_BR::Customer,
                                                                        this.getCustomerAccount(),
                                                                        fiscalDocumentLineParmData.parmCFOP(),
                                                                        SalesPurchTrntype_BR::Sales));
            fiscalDocumentLineParmData.parmAdjustmentCode53         (TaxBenefitCodeSetupData_BR::findAdjustmentCode53(
                                                                        taxBenefitCodeSetupHeading.RecId,
                                                                        retailFiscalDocumentLine.ItemId,
                                                                        CustVendType_BR::Customer,
                                                                        this.getCustomerAccount(),
                                                                        fiscalDocumentLineParmData.parmCFOP(),
                                                                        SalesPurchTrntype_BR::Sales));
            fiscalDocumentLineParmData.parmObservationCode          (TaxBenefitCodeSetupData_BR::findObservationCode(
                                                                        taxBenefitCodeSetupHeading.RecId,
                                                                        retailFiscalDocumentLine.ItemId,
                                                                        CustVendType_BR::Customer,
                                                                        this.getCustomerAccount(),
                                                                        fiscalDocumentLineParmData.parmCFOP(),
                                                                        SalesPurchTrntype_BR::Sales));

            fiscalDocumentLineParmData.parmFinancialLedgerDimension (0);
            fiscalDocumentLineParmData.parmOrigin                   (retailFiscalDocumentLine.TaxationOrigin);
            fiscalDocumentLineParmData.parmApproximateTaxAmount     (retailFiscalDocumentLine.ApproximateTaxAmount);

            RecId custInvoiceTransRecId = this.getCustInvoiceTransRecIdByLine(retailFiscalDocumentLine);
            this.setLineParmDataRefRecord(fiscalDocumentLineParmData, custInvoiceTransRecId);

            ret.addEnd(fiscalDocumentLineParmData);

            fiscalDocumentLineParmData.parmListOfTaxes(
                this.initListOfTaxTransParmDataForLine(fiscalDocumentParmData, fiscalDocumentLineParmData));

            fiscalDocumentTaxPovertyFundCalc.initTaxPovertyFundForLine(fiscalDocumentLineParmData);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfTaxTransParmDataForLine</Name>
				<Source><![CDATA[
    protected List initListOfTaxTransParmDataForLine(FiscalDocumentParmData_BR _fiscalDocumentParmData, FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData)
    {
        List                                listOfTaxParmData = new List(Types::Class);
        RetailFiscalDocumentTaxTrans_BR     taxTrans;
        FiscalDocumentTaxTransParmData_BR   fiscalDocumentTaxTransParmData;

        while select * from taxTrans
            where taxTrans.transactionId == retailFiscalDocument.transactionId
                && taxTrans.terminal == retailFiscalDocument.terminal
                && taxTrans.store == retailFiscalDocument.store
                && taxTrans.Channel == retailFiscalDocument.Channel
                && taxTrans.LineNum == _fiscalDocumentLineParmData.parmLineNum()
                && taxTrans.FiscalDocumentSeries == retailFiscalDocument.FiscalDocumentSeries
                && taxTrans.FiscalDocumentNumber == retailFiscalDocument.FiscalDocumentNumber
        {
            fiscalDocumentTaxTransParmData = new FiscalDocumentTaxTransParmData_BR();

            fiscalDocumentTaxTransParmData.parmType                 (taxTrans.Type);

            fiscalDocumentTaxTransParmData.parmIncludedTax          (taxTrans.IncludedTax);
            fiscalDocumentTaxTransParmData.parmRetainedTax          (taxTrans.RetainedTax);

            fiscalDocumentTaxTransParmData.parmTaxationCode         (taxTrans.TaxationCode);
            fiscalDocumentTaxTransParmData.parmFiscalValue          (taxTrans.FiscalValue);

            fiscalDocumentTaxTransParmData.parmTaxBaseAmount        (taxTrans.TaxBaseAmount);
            fiscalDocumentTaxTransParmData.parmTaxBaseAmountExempt  (taxTrans.TaxBaseAmountExempt);
            fiscalDocumentTaxTransParmData.parmTaxBaseAmountOther   (taxTrans.TaxBaseAmountOther);

            fiscalDocumentTaxTransParmData.parmTaxValue             (taxTrans.TaxValue);
            fiscalDocumentTaxTransParmData.parmTaxAmount            (taxTrans.TaxAmount);
            fiscalDocumentTaxTransParmData.parmTaxAmountOther       (taxTrans.TaxAmountOther);

            fiscalDocumentTaxTransParmData.parmTaxationOrigin       (_fiscalDocumentLineParmData.parmOrigin());

            fiscalDocumentTaxTransParmData.parmTaxNonRecoverablePct(0);
            fiscalDocumentTaxTransParmData.parmTaxReductionPct(0);
            fiscalDocumentTaxTransParmData.parmTaxSubstitutionMarkupPct(0);

            listOfTaxParmData.addEnd(fiscalDocumentTaxTransParmData);
        }

        return listOfTaxParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPaymentTransParmData</Name>
				<Source><![CDATA[
    private List initPaymentTransParmData()
    {
        RetailFiscalDocumentPaymentTrans_BR     retailFiscalDocumentPaymentTrans;
        FiscalDocumentPaymentTransParmData_BR   fiscalDocumentPaymentTransParmData;
        List                                    ret = new List(Types::Class);

        while select * from retailFiscalDocumentPaymentTrans
            order by retailFiscalDocumentPaymentTrans.lineNum
            where retailFiscalDocumentPaymentTrans.Channel == retailFiscalDocument.Channel
                && retailFiscalDocumentPaymentTrans.store == retailFiscalDocument.store
                && retailFiscalDocumentPaymentTrans.terminal == retailFiscalDocument.terminal
                && retailFiscalDocumentPaymentTrans.transactionId == retailFiscalDocument.transactionId
                && retailFiscalDocumentPaymentTrans.FiscalDocumentNumber == retailFiscalDocument.FiscalDocumentNumber
                && retailFiscalDocumentPaymentTrans.FiscalDocumentSeries == retailFiscalDocument.FiscalDocumentSeries
        {
            fiscalDocumentPaymentTransParmData = new FiscalDocumentPaymentTransParmData_BR();

            fiscalDocumentPaymentTransParmData.parmAmount(retailFiscalDocumentPaymentTrans.Amount);
            fiscalDocumentPaymentTransParmData.parmCardAuthorizationNumber(retailFiscalDocumentPaymentTrans.CardAuthorizationNumber);
            fiscalDocumentPaymentTransParmData.parmCardLogo(retailFiscalDocumentPaymentTrans.CardLogo);
            fiscalDocumentPaymentTransParmData.parmCardProcessorCNPJCPF(retailFiscalDocumentPaymentTrans.CardProcessorCNPJCPF);
            fiscalDocumentPaymentTransParmData.parmLineNumber(retailFiscalDocumentPaymentTrans.lineNum);
            fiscalDocumentPaymentTransParmData.parmPaymentType(retailFiscalDocumentPaymentTrans.PaymentType);
            fiscalDocumentPaymentTransParmData.parmTenderTypeId(retailFiscalDocumentPaymentTrans.tenderTypeId);

            ret.addEnd(fiscalDocumentPaymentTransParmData);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfFiscalReference</Name>
				<Source><![CDATA[
    private List initListOfFiscalReference(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        RetailFiscalDocumentReference_BR    retailFiscalDocumentReference;
        FiscalDocumentReferencedParmData_BR fiscalDocumentReferencedParmData;
        List                                ret = new List(Types::Class);

        while select * from retailFiscalDocumentReference
            where retailFiscalDocumentReference.Channel == retailFiscalDocument.Channel
            && retailFiscalDocumentReference.store == retailFiscalDocument.store
            && retailFiscalDocumentReference.terminal == retailFiscalDocument.terminal
            && retailFiscalDocumentReference.transactionId == retailFiscalDocument.transactionId
            && retailFiscalDocumentReference.FiscalDocumentNumber == retailFiscalDocument.FiscalDocumentNumber
            && retailFiscalDocumentReference.FiscalDocumentSeries == retailFiscalDocument.FiscalDocumentSeries
        {
            fiscalDocumentReferencedParmData = new FiscalDocumentReferencedParmData_BR();
        
            fiscalDocumentReferencedParmData.parmFiscalDocumentSourceText(retailFiscalDocumentReference.FiscalDocumentSourceText);
            fiscalDocumentReferencedParmData.parmSourceTableId(retailFiscalDocumentReference.SourceTableId);
            fiscalDocumentReferencedParmData.parmSourceRecId(retailFiscalDocumentReference.SourceRecId);

            ret.addEnd(fiscalDocumentReferencedParmData);
        }

        return ret;

    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(CustInvoiceJour _custInvoiceJour, RetailFiscalDocument_BR _retailFiscalDocument)
    {
        super();
        statementCustInvoiceJour = _custInvoiceJour;
        custTrans = statementCustInvoiceJour.custTrans();
        retailFiscalDocument = _retailFiscalDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructWithAggregationParameter</Name>
				<Source><![CDATA[
    public static FiscalDocParmDataCreatorRetailFDoc_BR constructWithAggregationParameter(CustInvoiceJour _custInvoiceJour, RetailFiscalDocument_BR _retailFiscalDocument, boolean _aggregateBeforePosting)
    {
        FiscalDocParmDataCreatorRetailFDoc_BR fiscalDocParmDataCreatorRetailFDoc_BR = new FiscalDocParmDataCreatorRetailFDoc_BR(_custInvoiceJour, _retailFiscalDocument);

        if (fiscalDocParmDataCreatorRetailFDoc_BR.parmAggregateBeforePosting(_aggregateBeforePosting))
        {
            fiscalDocParmDataCreatorRetailFDoc_BR.inventDimIdList = fiscalDocParmDataCreatorRetailFDoc_BR.getInventDimIdList();
            fiscalDocParmDataCreatorRetailFDoc_BR.custInvoiceTransRecIdList = fiscalDocParmDataCreatorRetailFDoc_BR.createCustInvoiceTransRecIdMapForAggregatedStatement();
        }
        else
        {
            fiscalDocParmDataCreatorRetailFDoc_BR.custInvoiceTransRecIdList = fiscalDocParmDataCreatorRetailFDoc_BR.createCustInvoiceTransRecIdMapForNotAggregatedStatement();
        }

        return fiscalDocParmDataCreatorRetailFDoc_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAggregateBeforePosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the aggregation before posting value.
    /// </summary>
    /// <param name = "_aggregateBeforePosting">
    /// Indicates whether to aggregate before posting or not.
    /// </param>
    /// <returns>True if the aggregation before posting is enabled otherwise false.</returns>
    public boolean parmAggregateBeforePosting(boolean _aggregateBeforePosting = aggregateBeforePosting)
    {
        aggregateBeforePosting = _aggregateBeforePosting;

        return aggregateBeforePosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentPurpose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the purpose of the fiscal document generated from the customer invoice.
    /// </summary>
    /// <returns>
    /// The purpose of the fiscal document being posted.
    /// </returns>
    protected FiscalDocumentPurpose_BR getFiscalDocumentPurpose()
    {
        return retailFiscalDocument.Purpose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCustVendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the Fiscal Document in context has customer/vendor transactions or not.
    /// </summary>
    /// <returns>
    /// True if the Fiscal Document has customer/vendor transactions. False otherwise.
    /// </returns>
    protected boolean hasCustVendTrans()
    {
        return custTrans != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendTransParmData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides an instance of the object representing the Customer/Vendor Transaction associated with the Fiscal Document
    /// </summary>
    /// <returns>
    /// An instance of <c>FiscalDocumentCustVendTransParmData_BR</c> representing the Customer/Vendor Transaction assiciated with the Fiscal Document.
    /// </returns>
    protected FiscalDocumentCustVendTransParmData_BR initCustVendTransParmData()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfShipmentStatParmData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a list of objects representing the shipment specifications for a given Fiscal Document line.
    /// </summary>
    /// <param name="_fiscalDocumentParmData">
    /// An instance of <c>FiscalDocumentParmData_BR</c> representing a specific Fiscal Document line.
    /// </param>
    /// <returns>
    /// A list of classes with instances of <c>FiscalDocumentParmData_BR</c> representing the
    /// shipment specifications incurred for the Fiscal Document line passed in as parameter.
    /// </returns>
    protected List initListOfShipmentStatParmData(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        List shipmentStatList = new List(Types::Class);

        return shipmentStatList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfInstallments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a list of objects representing the Fiscal Document installments.
    /// </summary>
    /// <returns>
    /// A list of classes with instances of <c>FiscalDocumentInstallmentParmData_BR</c> representing the installments generated for the Fiscal Document.
    /// </returns>
    protected List initListOfInstallments()
    {
        List list = new List(Types::Class);

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the currency of fiscal reference
    /// </summary>
    /// <returns>
    /// The currency code
    /// </returns>
    protected CurrencyCode fiscalReferenceSourceCurrencyCode()
    {
        return custTrans.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID that the fiscal reference table points to.
    /// </summary>
    /// <returns>
    /// The table ID that the fiscal reference table points to.
    /// </returns>
    protected tableId fiscalReferenceSourceTableId()
    {
        return retailFiscalDocument.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID that the fiscal reference table points to.
    /// </summary>
    /// <returns>
    /// The record ID that the fiscal reference table points to.
    /// </returns>
    protected recId fiscalReferenceSourceRecId()
    {
        return retailFiscalDocument.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineParmDataRefRecord</Name>
				<Source><![CDATA[
    private void setLineParmDataRefRecord(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData, RecId _custInvoiceTransRecId)
    {
        _fiscalDocumentLineParmData.parmRefTableId(tableNum(CustInvoiceTrans));
        _fiscalDocumentLineParmData.parmRefRecId(_custInvoiceTransRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustInvoiceTransRecIdByLine</Name>
				<Source><![CDATA[
    private RecId getCustInvoiceTransRecIdByLine(RetailFiscalDocumentLine_BR _line)
    {
        if (aggregateBeforePosting)
        {
            container itemIdInventDimId = [_line.ItemId, this.getInventDimIdByLineNumber(_line.LineId)];

            return this.getCustInvoiceTransRecId(itemIdInventDimId);
        }

        return this.getCustInvoiceTransRecId(_line.LineId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustInvoiceTransRecIdMapForAggregatedStatement</Name>
				<Source><![CDATA[
    private Map createCustInvoiceTransRecIdMapForAggregatedStatement()
    {
        CustInvoiceTrans custInvoiceTrans;
        Map recIdList = new Map(Types::Container, Types::Int64);
        while select RecId, ItemId, InventDimId from custInvoiceTrans
            where custInvoiceTrans.SalesId == statementCustInvoiceJour.SalesId
                && custInvoiceTrans.InvoiceId == statementCustInvoiceJour.InvoiceId
                && custInvoiceTrans.InvoiceDate == statementCustInvoiceJour.InvoiceDate
                && custInvoiceTrans.numberSequenceGroup == statementCustInvoiceJour.numberSequenceGroup
        {
            recIdList.insert([custInvoiceTrans.ItemId, custInvoiceTrans.InventDimId], custInvoiceTrans.RecId);
        }

        return recIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustInvoiceTransRecIdMapForNotAggregatedStatement</Name>
				<Source><![CDATA[
    private Map createCustInvoiceTransRecIdMapForNotAggregatedStatement()
    {
        Map recIdList = new Map(Types::Real, Types::Int64);
        RecId localChannelRecId = RetailStoreTable::find(retailFiscalDocument.store).RecId;

        CustInvoiceTrans custInvoiceTrans;
        RetailTransactionSalesTrans transactionSalesTrans;
        while select RecId from custInvoiceTrans
            where custInvoiceTrans.SalesId == statementCustInvoiceJour.SalesId
                && custInvoiceTrans.InvoiceId == statementCustInvoiceJour.InvoiceId
                && custInvoiceTrans.InvoiceDate == statementCustInvoiceJour.InvoiceDate
                && custInvoiceTrans.numberSequenceGroup == statementCustInvoiceJour.numberSequenceGroup

            join lineNum from transactionSalesTrans
                where transactionSalesTrans.Channel == localChannelRecId
                    && transactionSalesTrans.Store == retailFiscalDocument.store
                    && transactionSalesTrans.TerminalId == retailFiscalDocument.terminal
                    && transactionSalesTrans.TransactionId == retailFiscalDocument.transactionId
                    && transactionSalesTrans.inventTransId == custInvoiceTrans.InventTransId
        {
            recIdList.insert(transactionSalesTrans.lineNum, custInvoiceTrans.RecId);
        }

        return recIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimIdList</Name>
				<Source><![CDATA[
    private Map getInventDimIdList()
    {
        Map map = new Map(Types::Real, Types::String);
        RecId localChannelRecId = RetailStoreTable::find(retailFiscalDocument.store).RecId;
        
        RetailTransactionSalesTrans transactionSalesTrans;
        while select lineNum, inventDimId from transactionSalesTrans
            where transactionSalesTrans.Channel == localChannelRecId
                && transactionSalesTrans.Store == retailFiscalDocument.store
                && transactionSalesTrans.TerminalId == retailFiscalDocument.terminal
                && transactionSalesTrans.TransactionId == retailFiscalDocument.transactionId
        {
            map.insert(transactionSalesTrans.lineNum, transactionSalesTrans.inventDimId);
        }

        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimIdByLineNumber</Name>
				<Source><![CDATA[
    private str getInventDimIdByLineNumber(LineNum _lineNumber)
    {
        str inventDimId;
        
        if (inventDimIdList && inventDimIdList.exists(_lineNumber))
        {
            inventDimId = inventDimIdList.lookup(_lineNumber);
        }

        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustInvoiceTransRecId</Name>
				<Source><![CDATA[
    private RecId getCustInvoiceTransRecId(anytype _keyValue)
    {
        RecId custInvoiceTransRecId;

        if (custInvoiceTransRecIdList && custInvoiceTransRecIdList.exists(_keyValue))
        {
            custInvoiceTransRecId = custInvoiceTransRecIdList.lookup(_keyValue);
        }

        return custInvoiceTransRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRetailFiscalDocumentContingency</Name>
				<Source><![CDATA[
    public RetailFiscalDocumentContingency_BR parmRetailFiscalDocumentContingency(RetailFiscalDocumentContingency_BR _retailFiscalDocumentContingency = retailFiscalDocumentContingency)
    {
        retailFiscalDocumentContingency = _retailFiscalDocumentContingency;
        return retailFiscalDocumentContingency;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>