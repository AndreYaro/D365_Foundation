<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationDataPersistenceActivityOnDocument</Name>
	<SourceCode>
		<Declaration><![CDATA[
using TaxServiceAPI = Microsoft.Dynamics.TaxCalculation.ApiContracts;

/// <summary>
/// The <c>TaxIntegrationDataPersistenceActivityOnDocument</c> class is for data persistence.
/// </summary>
public class TaxIntegrationDataPersistenceActivityOnDocument
    extends TaxIntegrationAbstractActivityOnDocument
{
    #ISOCountryRegionCodes

    public const str LoggerName = 'Tax Integration - Data Persistence';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>TaxIntegrationDataPersistenceActivityOnDocument</c>.
    /// </summary>
    private final void new()
    {
        super(LoggerName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>TaxIntegrationDataPersistenceActivityOnDocument</c>.
    /// </summary>
    /// <returns>The new <c>TaxIntegrationDataPersistenceActivityOnDocument</c>.</returns>
    public final static TaxIntegrationDataPersistenceActivityOnDocument construct()
    {
        return new TaxIntegrationDataPersistenceActivityOnDocument();
    }

]]></Source>
			</Method>
			<Method>
				<Name>actInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Conducts the activity on the document by persisting the data, if the document is OK.
    /// </summary>
    /// <param name = "_document">The document.</param>
    [Replaceable]
    protected void actInternal(TaxIntegrationDocumentObject _document)
    {
        TaxIntegrationDataPersistenceActivityOnDocument::actStatic(_document);
    }

]]></Source>
			</Method>
			<Method>
				<Name>actStatic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Conducts the activity on the document by persisting the data.
    /// </summary>
    /// <param name = "_document">The document.</param>
    protected static void actStatic(TaxIntegrationDocumentObject _document)
    {
        boolean isTaxCodeAdjustmentEnabled =
            TaxIntegrationAdjustment::isEnabledForTransaction(_document.getLocalTableId(), _document.getLocalRecId());

        TaxIntegrationAbstractDataPersistenceTemplate dataPersistenceInstance = SysExtensionAppClassFactory::getClassFromSysAttributeWithInstantiationStrategy(
            classStr(TaxIntegrationAbstractDataPersistenceTemplate),
            new TaxIntegrationDataPersistenceAttribute(tableId2Name(_document.getLocalTableId())),
            new SysExtensionGenericInstantiation(_document));

        if (!dataPersistenceInstance)
        {
            _document.setException(new System.NotSupportedException(
                strFmt("@TaxIntegrationException:TableNotSupported", _document.getLocalTableId())));
            return;
        }

        dataPersistenceInstance.execute();

        TmpTaxWorkTrans taxWorkTrans;
        // Each line is sent by separate document for purchase requisition.
        // Need to use same taxWorkTrans buffer to save the calculation result.
        if (TaxIntegrationPurchReqDocumentPerLineFlight::instance().isEnabled()
            && _document.getLocalTableId() == tableNum(PurchReqTable))
        {
            taxWorkTrans = _document.getLegacyTax().tmpTaxWorkTrans();
        }

        SetEnumerator chargeSet = _document.getChargeSet().getEnumerator();
        while (chargeSet.moveNext())
        {
            TaxIntegrationLineObject charge = chargeSet.current();

            if (!charge.isTaxable())
            {
                continue;
            }

            if (!TaxIntegrationDataPersistenceActivityOnDocument::insertTmpTaxWorkTrans(taxWorkTrans, charge))
            {
                return;
            }

            if (isTaxCodeAdjustmentEnabled)
            {
                TaxIntegrationDataPersistenceActivityOnDocument::updateTaxWorkRegulation(charge);
            }
        }

        SetEnumerator lineSet = _document.getLineSet().getEnumerator();
        while (lineSet.moveNext())
        {
            TaxIntegrationLineObject line = lineSet.current();
            // Currently only support intercompany journal
            if (line.getAncestorDocument().isJournal()
                && line.getCompany())
            {
                changecompany (line.getCompany())
                {
                    if (!TaxIntegrationDataPersistenceActivityOnDocument::insertTmpTaxWorkTrans(taxWorkTrans, line))
                    {
                        return;
                    }

                    if (isTaxCodeAdjustmentEnabled)
                    {
                        TaxIntegrationDataPersistenceActivityOnDocument::updateTaxWorkRegulation(line);
                    }
                }
            }
            else
            {
                if (!TaxIntegrationDataPersistenceActivityOnDocument::insertTmpTaxWorkTrans(taxWorkTrans, line))
                {
                    return;
                }

                if (isTaxCodeAdjustmentEnabled)
                {
                    TaxIntegrationDataPersistenceActivityOnDocument::updateTaxWorkRegulation(line);
                }
            }

            chargeSet = line.getChargeSet().getEnumerator();
            while (chargeSet.moveNext())
            {
                TaxIntegrationLineObject charge = chargeSet.current();

                if (!charge.isTaxable())
                {
                    continue;
                }

                if (!TaxIntegrationDataPersistenceActivityOnDocument::insertTmpTaxWorkTrans(taxWorkTrans, charge))
                {
                    return;
                }

                if (isTaxCodeAdjustmentEnabled)
                {
                    TaxIntegrationDataPersistenceActivityOnDocument::updateTaxWorkRegulation(charge);
                }
            }
        }

        if (TaxIntegrationISVTaxPostUtil::shouldPersistTaxCalculationInput(_document))
        {
            TaxIntegrationDataPersistenceActivityOnDocument::persistTaxCalculationInput(_document);
        }

        _document.getLegacyTax().tmpTaxWorkTrans(taxWorktrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTaxWorkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts <c>TmpTaxWorkTrans</c>.
    /// </summary>
    /// <param name = "_taxWorkTrans"><c>TmpTaxWorkTrans</c></param>
    /// <param name = "_line"><c>TaxIntegrationLineObject</c>.</param>
    /// <returns>Whether the operation is successful.</returns>
    protected static boolean insertTmpTaxWorkTrans(TmpTaxWorkTrans _taxWorkTrans, TaxIntegrationLineObject _line)
    {
        TaxIntegrationDocumentObject document = _line.getAncestorDocument();
        boolean isTaxCodeAdjustmentEnabled =
            TaxIntegrationAdjustment::isEnabledForTransaction(document.getLocalTableId(), document.getLocalRecId());

        Tax legacyTax = document.getLegacyTax();
        SetEnumerator taxLines = _line.getTaxLineSet().getEnumerator();

        if (document.isJournal())
        {
            TaxIntegrationJournalLineObject journalLine = _line;
            if (journalLine.getTaxCode())
            {
                return TaxIntegrationDataPersistenceActivityOnDocument::insertTmpTaxWorkTransForJournalLineTax(_taxWorkTrans, journalLine);
            }
            TaxIntegrationDataPersistenceActivityOnDocument::parmDataForJournal(journalLine);
        }

        TaxIntegrationDocumentObjectContext context = document.getContext();

        while (taxLines.moveNext())
        {
            _taxWorkTrans.clear();
            TaxIntegrationTaxLineObject taxLine = taxLines.current();
            // Be careful if you want to change the order of below copy method, there might be dependency across lines.
            TaxIntegrationDataPersistenceActivityOnDocument::copyToTmpTaxWorkTransByDefault(_taxWorkTrans);
            TaxIntegrationDataPersistenceActivityOnDocument::copyToTmpTaxWorkTransFromTaxIntegrationDocumentObject(_taxWorkTrans, document);
            TaxIntegrationDataPersistenceActivityOnDocument::copyToTmpTaxWorkTransFromTaxIntegrationLineObject(_taxWorkTrans, _line);
            TaxIntegrationDataPersistenceActivityOnDocument::copyToTmpTaxWorkTransFromTaxIntegrationTaxLineObject(_taxWorkTrans, taxLine);

            TaxTable taxTable = context.getTaxTable(taxLine.getTaxCode());

            if (!taxTable)
            {
                document.setException(new System.InvalidOperationException(strFmt("@TaxIntegrationException:RecordNotFound", 'TaxCode', taxLine.getTaxCode(), 'TaxTable')));
                return false;
            }

            TaxGroupData taxGroupData = context.getTaxGroupData(_line.getTaxGroup(), taxLine.getTaxCode());

            _taxWorkTrans.EmptyTaxBaseForOutgoingTax_W = legacyTax.getEmptyBaseForOutgoingTax_WWithTransRecId(taxGroupData, _line.getLocalRecId());

            if (!document.getShouldSkipLedgerDimension())
            {
                legacyTax.setLedgerDimensionsInternal(
                    _taxWorkTrans,
                    taxTable,
                    _line.getLedgerDimension(),
                    _line.getOperationLedgerDimension());
            }

            if (EInvoiceParameters_MX::isElectronicInvoiceEnabled() || EInvoiceCFDIParameters_MX::isElectronicInvoiceEnabled())
            {
                _taxWorkTrans.TaxType_MX = taxTable.TaxType_MX;
            }

            boolean ignoreCalculatedSalesTax = isTaxCodeAdjustmentEnabled && taxLine.getOverrideCalculatedTax();
            _taxWorkTrans.insert(ignoreCalculatedSalesTax);
        }

        if (document.getIncludingTax())
        {
            document.getAmountIncludingTax().insert(
                [_line.getLocalTableId(), _line.getLocalRecId()],
                _line.getTransactionAmount() * document.getSign());

            document.getAmountExcludingTax().insert(
                [_line.getLocalTableId(), _line.getLocalRecId()],
                _taxWorkTrans.SourceBaseAmountCurRaw);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataForJournal</Name>
				<Source><![CDATA[
    private static void parmDataForJournal(TaxIntegrationJournalLineObject _journalLine)
    {
        Tax legacyTax = _journalLine.getAncestorDocument().getLegacyTax();
        TaxCalculationJournal taxCalculationJournal = legacyTax as TaxCalculationJournal;
        TaxableLine taxableLine = _journalLine.getTaxableLine();
        if (!taxableLine)
        {
            return;
        }
        taxCalculationJournal.parmTaxableLineCurrentlyBeingCalculated(taxableLine);
        if (TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            container VatRegDataContainer = taxCalculationJournal.vatRegDataForTaxIntegration_W(taxableLine.getSourceLine());
            VatRegDataContainer = conPoke(VatRegDataContainer, 1, _journalLine.getVATRegisterDate());//Date of VAT register is determined in tax integration process.
            taxCalculationJournal.parmVatRegData_W(VatRegDataContainer);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTaxWorkTransForJournalLineTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts <c>TmpTaxWorkTrans</c> for journal lines with tax code assigned.
    /// </summary>
    /// <param name = "_taxWorkTrans"><c>TmpTaxWorkTrans</c></param>
    /// <param name = "_line"><c>TaxIntegrationLineObject</c>.</param>
    /// <returns>Whether the operation is successful.</returns>
    protected static boolean insertTmpTaxWorkTransForJournalLineTax(TmpTaxWorkTrans _taxWorkTrans, TaxIntegrationJournalLineObject _line)
    {
        _taxWorkTrans.clear();
        TaxCalculationJournal taxCalculationJournal =  _line.getAncestorDocument().getLegacyTax() as TaxCalculationJournal;
        TaxableLine taxableLine = _line.getTaxableLine();
        taxCalculationJournal.initTaxWorkTransForTaxLine(taxableLine);
        TaxIntegrationTaxLineObject taxLine = _line.getTaxLine(taxableLine.getTaxCode());
        _taxWorkTrans.data(taxCalculationJournal.tmpTaxWorkTrans());
        TaxIntegrationDataPersistenceActivityOnDocument::copyTaxIdToTmpTaxWorkTransFromTaxIntegrationTaxLineObject(_taxWorkTrans, taxLine);
        _taxWorkTrans.insert();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToTmpTaxWorkTransByDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to <c>TmpTaxWorkTrans</c> by default.
    /// </summary>
    /// <param name = "_taxWorkTrans"><c>TmpTaxWorkTrans</c>.</param>
    protected static void copyToTmpTaxWorkTransByDefault(TmpTaxWorkTrans _taxWorkTrans)
    {
        _taxWorkTrans.Posted = false;
        _taxWorkTrans.TaxAutogenerated = NoYes::Yes;
        _taxWorkTrans.TaxReports = NoYes::Yes;
        _taxWorkTrans.TaxOrigin = TaxOrigin::Tax;
        _taxWorkTrans.Warning = TaxWarning::NoWarning;
        _taxWorkTrans.Voucher = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToTmpTaxWorkTransFromTaxIntegrationDocumentObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to <c>TmpTaxWorkTrans</c> from <c>TaxIntegrationDocumentObject</c>.
    /// </summary>
    /// <param name = "_taxWorkTrans"><c>TmpTaxWorkTrans</c>.</param>
    /// <param name = "_document"><c>TaxIntegrationDocumentObject</c>.</param>
    protected static void copyToTmpTaxWorkTransFromTaxIntegrationDocumentObject(TmpTaxWorkTrans _taxWorkTrans, TaxIntegrationDocumentObject _document)
    {
        if (TaxIntegrationProjInvoiceProposalTaxTransDateFlight::instance().isEnabled()
            && _document.getLegacyTax() is TaxProj)
        {
            // For project invoice proposal credit note, the transaction date would be from the original invoice to calculate different currency amounts. It could be not the same as the current credit note invoice date.
            // The TransDate should be the same as the invoice date for project invoice proposal credit note to display the posted sales tax.
            _taxWorkTrans.TransDate = _document.getInvoiceDate();
        }
        else
        {
            _taxWorkTrans.TransDate = _document.getTransactionDate();
        }

        _taxWorkTrans.ExchRate = _document.getAccountingCurrencyFixedExchangeRate();
        _taxWorkTrans.EUROTriangulation = _document.getEUROTriangulation();

        _taxWorkTrans.Company = _document.getCompany();
        _taxWorkTrans.HeadingTableId = _document.getHeadingTableId();
        _taxWorkTrans.HeadingRecId = _document.getHeadingRecId();

        _taxWorkTrans.Source = _document.getSource();
        _taxWorkTrans.Prepayment = _document.isPrepaid();

        _taxWorkTrans.InvoiceId = _document.getInvoiceId();
        _taxWorkTrans.ReportingCurrencyExchRate = _document.getReportingCurrencyFixedExchangeRate();
        _taxWorkTrans.VatDueDate_W = _document.getVATRegisterDate();
        [_taxWorkTrans.Reason, _taxWorkTrans.ReasonComment] = FinancialReasonGlobalFeatureHelper::getReasonDataByTableRef(_document.getReasonTableRefRecId(), _document.getCompany());

        // Save ISV feature setup Guid
        if (_document.getSolutionProviderType() == TaxSolutionProviderType::ISV)
        {
            TaxIntegrationTaxServiceParameters taxServiceParameter = TaxIntegrationTaxServiceParameters::find();
            _taxWorkTrans.ISVFeatureSetupGuid = str2Guid(conPeek(str2con(taxServiceParameter.ISVFeatureSetupId, '|'), 1));
            _taxWorkTrans.ISVFeatureSetupName = taxServiceParameter.ISVFeatureSetupName;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToTmpTaxWorkTransFromTaxIntegrationLineObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to <c>TmpTaxWorkTrans</c> from <c>TaxIntegrationLineObject</c>.
    /// </summary>
    /// <param name = "_taxWorkTrans"><c>TmpTaxWorkTrans</c>.</param>
    /// <param name = "_line"><c>TaxIntegrationLineObject</c>.</param>
    protected static void copyToTmpTaxWorkTransFromTaxIntegrationLineObject(TmpTaxWorkTrans _taxWorkTrans, TaxIntegrationLineObject _line)
    {
        TaxIntegrationDocumentObject ancestor = _line.getAncestorDocument();

        if (_line.getLocalTableId() == tableNum(SalesParmLine))
        {
            SalesParmLine salesParmLine = SalesParmLine::findRecId(_line.getLocalRecId());
            _taxWorkTrans.SourceTableId = tableNum(SalesLine);
            _taxWorkTrans.SourceRecId = salesParmLine.SalesLineRecId;
        }
        else
        {
            _taxWorkTrans.SourceTableId = _line.getLocalTableId();
            _taxWorkTrans.SourceRecId = _line.getLocalRecId();
        }

        if (_line.getAncestorDocument().isJournal())
        {
            TaxIntegrationJournalLineObject journalLine = _line;
            _taxWorkTrans.ExchRate = journalLine.getAccountingCurrencyFixedExchangeRate();
            _taxWorkTrans.ReportingCurrencyExchRate = journalLine.getReportingCurrencyFixedExchangeRate();
            _taxWorkTrans.Voucher = journalLine.getAncestorDocument().getVoucher();
            _taxWorkTrans.InvoiceId = journalLine.getInvoiceId();
            _taxWorkTrans.Prepayment = journalLine.isPrepaid();
            _taxWorkTrans.EUROTriangulation = journalLine.getEUROTriangulation();
            if (TaxIntegrationLineCompanyFlight::instance().isEnabled())
            {
                _taxWorkTrans.Company = journalLine.getCompany() ? journalLine.getCompany() : curExt();
            }
            else
            {
                _taxWorkTrans.Company = journalLine.getCompany();
            }
        }

        _taxWorkTrans.ParentSourceTableId = _line.getParentRecord().getLocalTableId();
        _taxWorkTrans.ParentSourceRecId = _line.getParentRecord().getLocalRecId();

        _taxWorkTrans.TaxGroup = _line.getTaxGroup();

        _taxWorkTrans.CalculationDate = _line.getCalculationDateV2();
        _taxWorkTrans.TaxItemGroup = _line.getTaxItemGroup();

        _taxWorkTrans.TaxBaseQty = _line.getQuantity() * ancestor.getSign();
        _taxWorkTrans.Txt = _line.getText();

        _taxWorkTrans.SourceCurrencyCode = _line.getTransactionCurrencyCode();

        _taxWorkTrans.InventTransId = _line.getInventoryTransactionId();

        _taxWorkTrans.TaxCodeCombinationId = ancestor.getLegacyTax().findTaxCodeCombinationIdInternal(_line.getTaxCodeSet());

        _taxWorkTrans.SourceLineType = _line.getLineType();
        _taxWorkTrans.OperationPostingType = _line.getLedgerPostingType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToTmpTaxWorkTransFromTaxIntegrationTaxLineObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to <c>TmpTaxWorkTrans</c> from <c>TaxIntegrationTaxLineObject</c>.
    /// </summary>
    /// <param name = "_taxWorkTrans"><c>TmpTaxWorkTrans</c>.</param>
    /// <param name = "_taxLine"><c>TaxIntegrationTaxLineObject</c>.</param>
    protected static void copyToTmpTaxWorkTransFromTaxIntegrationTaxLineObject(TmpTaxWorkTrans _taxWorkTrans, TaxIntegrationTaxLineObject _taxLine)
    {
        TaxIntegrationDocumentObject ancestor = _taxLine.getParentLine().getAncestorDocument();
        _taxWorkTrans.TaxCode = _taxLine.getTaxCode();

        _taxWorkTrans.CurrencyCode = _taxLine.getTaxCurrencyCode();

        _taxWorkTrans.TaxValue = _taxLine.getTaxRate();
        _taxWorkTrans.ExemptTax = _taxLine.getTaxExemptTax();
        _taxWorkTrans.NegativeTax = _taxWorkTrans.ExemptTax == NoYes::No && _taxWorkTrans.TaxValue < 0;
        _taxWorkTrans.ReverseCharge_W = _taxLine.getTaxReverseCharge();
        _taxWorkTrans.TaxDirection = _taxLine.getTaxDirection();

        if (_taxLine.getIsQuantitySet())
        {
            _taxWorkTrans.TaxBaseQty = _taxLine.getQuantity() * ancestor.getSign();
        }

        TaxIntegrationDataPersistenceActivityOnDocument::copyToTmpTaxWorkTransFromTaxIntegrationTaxLineObjectByLegacyTax(_taxWorkTrans, _taxLine);
        TaxIntegrationDataPersistenceActivityOnDocument::copyTaxIdToTmpTaxWorkTransFromTaxIntegrationTaxLineObject(_taxWorkTrans, _taxLine);
        TaxIntegrationDataPersistenceActivityOnDocument::copyToTmpTaxWorkTransFromTaxIntegrationTaxLineObjectByAmount(_taxWorkTrans, _taxLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTaxIdToTmpTaxWorkTransFromTaxIntegrationTaxLineObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies Tax ID to <c>TmpTaxWorkTrans</c> from <c>TaxIntegrationTaxLineObject</c>.
    /// </summary>
    /// <param name = "_taxWorkTrans"><c>TmpTaxWorkTrans</c>.</param>
    /// <param name = "_taxLine"><c>TaxIntegrationTaxLineObject</c>.</param>
    protected static void copyTaxIdToTmpTaxWorkTransFromTaxIntegrationTaxLineObject(TmpTaxWorkTrans _taxWorkTrans, TaxIntegrationTaxLineObject _taxLine)
    {
        if (_taxLine.getParentLine().getAncestorDocument().shouldApplyTaxId())
        {
            _taxWorkTrans.TaxId = _taxLine.getTaxId();
            _taxWorkTrans.partyTaxId = _taxLine.getPartyTaxId();
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL])
                && _taxWorkTrans.PartyTaxId)
            {
                _taxWorkTrans.VATNum_PL = TaxRegistration::find(_taxWorkTrans.PartyTaxId).RegistrationNumber;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToTmpTaxWorkTransFromTaxIntegrationTaxLineObjectByAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to <c>TmpTaxWorkTrans</c> from <c>TaxIntegrationTaxLineObject</c>.
    /// </summary>
    /// <param name = "_taxWorkTrans"><c>TmpTaxWorkTrans</c>.</param>
    /// <param name = "_taxLine"><c>TaxIntegrationTaxLineObject</c>.</param>
    protected static void copyToTmpTaxWorkTransFromTaxIntegrationTaxLineObjectByAmount(TmpTaxWorkTrans _taxWorkTrans, TaxIntegrationTaxLineObject _taxLine)
    {
        TaxIntegrationDocumentObject documentObject = _taxLine.getParentLine().getAncestorDocument();
        Sign sign = documentObject.getSign();

        // Transaction currency

        _taxWorkTrans.SourceBaseAmountCur = _taxLine.getSourceBaseAmountCur() * sign;
        _taxWorkTrans.SourceTaxAmountCur = _taxLine.getSourceTaxAmountCur() * sign;
        _taxWorkTrans.TaxInCostPrice = _taxLine.getTaxInCostPrice() * sign;

        _taxWorkTrans.SourceBaseAmountCurRaw = _taxLine.getSourceBaseAmountCurRaw() * sign;
        _taxWorkTrans.SourceTaxAmountCurReal = _taxLine.getSourceTaxAmountCurReal() * sign;

        _taxWorkTrans.SourceBaseAmountCurCalculated = _taxWorkTrans.SourceBaseAmountCur;

        // Accounting currency

        _taxWorkTrans.TaxBaseAmountRaw = _taxLine.getTaxBaseAmountRaw() * sign;
        _taxWorkTrans.TaxBaseAmount = _taxLine.getTaxBaseAmount() * sign;
        _taxWorkTrans.TaxAmount = _taxLine.getTaxAmount() * sign;
        _taxWorkTrans.TaxInCostPriceMST = _taxLine.getTaxInCostPriceMST() * sign;

        // Tax currency

        _taxWorkTrans.TaxBaseAmountCur = _taxLine.getTaxBaseAmountCur() * sign;
        _taxWorkTrans.TaxAmountCur = _taxLine.getTaxAmountCur() * sign;
        _taxWorkTrans.TaxInCostPriceCur = _taxLine.getTaxInCostPriceCur() * sign;

        // Reporting currency

        _taxWorkTrans.TaxBaseAmountRep = _taxLine.getTaxBaseAmountRep() * sign;
        _taxWorkTrans.TaxAmountRep = _taxLine.getTaxAmountRep() * sign;
        _taxWorkTrans.TaxInCostPriceRep = _taxLine.getTaxInCostPriceRep() * sign;

        // Limit
        TaxAmount taxMin, taxMax;
        [taxMin, taxMax] = documentObject.getContext().getCollectLimitMinMax(_taxWorkTrans.TaxCode, _taxWorkTrans.TransDate);

        if ((taxMax && abs(_taxWorkTrans.TaxAmount) >= taxMax) ||
            (taxMin && _taxWorkTrans.TaxAmount && abs(_taxWorkTrans.TaxAmount) <= taxMin))
        {
            _taxWorkTrans.TaxLimitReached = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToTmpTaxWorkTransFromTaxIntegrationTaxLineObjectByLegacyTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to <c>TmpTaxWorkTrans</c> from the legacy tax.
    /// </summary>
    /// <param name = "_taxWorkTrans">The <c>TmpTaxWorkTrans</c> table buffer.</param>
    /// <param name = "_taxLine">The <c>TaxIntegrationTaxLineObject</c>object.</param>
    protected static void copyToTmpTaxWorkTransFromTaxIntegrationTaxLineObjectByLegacyTax(TmpTaxWorkTrans _taxWorkTrans, TaxIntegrationTaxLineObject _taxLine)
    {
        if (TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            Tax legacyTax = _taxLine.getParentLine().getAncestorDocument().getLegacyTax();
            legacyTax.initVatRegData(_taxWorkTrans, _taxWorkTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxWorkRegulation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>TaxWorkRegulation</c> by line.
    /// </summary>
    /// <param name = "_line">The <c>TaxIntegrationLineObject</c> line object.</param>
    protected static void updateTaxWorkRegulation(TaxIntegrationLineObject _line)
    {
        SetEnumerator taxLines = _line.getTaxLineSet().getEnumerator();

        ttsbegin;
        while (taxLines.moveNext())
        {
            TaxIntegrationTaxLineObject taxLine = taxLines.current();
            if (taxLine.getOverrideCalculatedTax())
            {
                TaxWorkRegulation taxWorkRegulation = TaxWorkRegulation::findByTaxCode(
                    _line.getLocalTableId(),
                    _line.getLocalRecId(),
                    taxLine.getTaxCode(),
                    true);

                TaxIntegrationDataPersistenceActivityOnDocument::copyToTaxWorkRegulationFromTaxIntegrationTaxLineObject(taxWorkRegulation, taxLine);
                taxWorkRegulation.write();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToTaxWorkRegulationFromTaxIntegrationTaxLineObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to <c>TaxWorkRegulation</c> from tax line.
    /// </summary>
    /// <param name = "_taxWorkRegulation">The <c>TaxWorkRegulation</c> record.</param>
    /// <param name = "_taxLine">The <c>TaxIntegrationTaxLineObject</c> tax line object.</param>
    protected static void copyToTaxWorkRegulationFromTaxIntegrationTaxLineObject(
        TaxWorkRegulation _taxWorkRegulation,
        TaxIntegrationTaxLineObject _taxLine)
    {
        Sign sign = _taxLine.getParentLine().getAncestorDocument().getSign();

        _taxWorkRegulation.HeadingTableId               = _taxLine.getParentLine().getLocalTableId();
        _taxWorkRegulation.HeadingRecId                 = _taxLine.getParentLine().getLocalRecId();
        _taxWorkRegulation.TaxCode                      = _taxLine.getTaxCode();
        _taxWorkRegulation.TaxDirection                 = _taxLine.getTaxDirection();

        _taxWorkRegulation.OverrideCalculatedTax        = true;

        _taxWorkRegulation.ActualTaxRegulationAmountCur = _taxLine.getSourceRegulateAmountCur() * sign;
        _taxWorkRegulation.TaxInCostPriceRegulated      = _taxLine.getTaxInCostPriceRegulated() * sign;
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistTaxCalculationInput</Name>
				<Source><![CDATA[
    private static void persistTaxCalculationInput(TaxIntegrationDocumentObject _document)
    {
        if (!_document.getTaxableDocument())
        {
            return;
        }

        TaxServiceAPI.TaxCalculationInput taxCalculationInput = new TaxServiceAPI.TaxCalculationInput(_document.getTaxableDocument());

        RefTableId headingTableId;
        RefRecId headingRecId;

        if (_document.isJournal())
        {
            TaxIntegrationJournalDocumentObject taxIntegrationJournalDocumentObject = _document as TaxIntegrationJournalDocumentObject;

            LedgerJournalTrans ledgerJournalTransMain = TaxIntegrationISVTaxPostUtil::getMainLedgerJournalTrans(
                LedgerJournalTable::findByRecId(taxIntegrationJournalDocumentObject.getLocalRecId()).JournalNum,
                taxIntegrationJournalDocumentObject.getVoucher());

            headingTableId = ledgerJournalTransMain.TableId;
            headingRecId = ledgerJournalTransMain.RecId;
        }
        // Since the tax calcualtion service calculates tax by line, here it should use <c>ProjAdvancedJournalLine</c> as the heading table.
        else if (_document.getHeadingTableId() == tableNum(ProjAdvancedJournalLine))
        {
            headingTableId = _document.getHeadingTableId();
            headingRecId = _document.getHeadingRecId();
        }
        else
        {
            headingTableId = _document.getLocalTableId();
            headingRecId = _document.getLocalRecId();
        }

        if (headingTableId
            && headingRecId)
        {
            TaxIntegrationCalculationInputPersisted taxCalculationInputPersisted = TaxIntegrationCalculationInputPersisted::findByHeadingTable(
                headingTableId,
                headingRecId,
                _document.getSource());

            if (taxCalculationInputPersisted)
            {
                ttsbegin;
                taxCalculationInputPersisted.selectForUpdate(true);
                taxCalculationInputPersisted.PackedTaxCalculationInput = TaxIntegrationISVTaxPostUtil::serializeTaxCalculationInput(taxCalculationInput);
                taxCalculationInputPersisted.update();
                ttscommit;
            }
            else
            {
                taxCalculationInputPersisted.HeadingTableId = headingTableId;
                taxCalculationInputPersisted.HeadingRecId = headingRecId;
                taxCalculationInputPersisted.PackedTaxCalculationInput = TaxIntegrationISVTaxPostUtil::serializeTaxCalculationInput(taxCalculationInput);
                taxCalculationInputPersisted.Source = _document.getSource();
                taxCalculationInputPersisted.insert();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>