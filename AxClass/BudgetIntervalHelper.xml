<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetIntervalHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetIntervalHelper</c> class is designed to help calculate the correct starting and ending
///    period dates for budgetary control purposes.
/// </summary>
/// <remarks>
///    It will use the fiscal calendar, a supplied budget interval and a supplied transaction date to
///    determine the correct date intervals.
/// </remarks>
public class BudgetIntervalHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBudgetIntervalStartAndEndDates</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the correct starting and ending date interval for the specified ledger dimension.
    /// </summary>
    /// <param name="_budgetCycleTimeSpanRecId">
    ///    The budget cycle time span reference for which to determine the start and end dates.
    /// </param>
    /// <param name="_interval">
    ///    The interval for which to determine the start and end dates.
    /// </param>
    /// <param name="_intervalDate">
    ///    The date to use as the basis for the determination of the date interval.
    /// </param>
    /// <returns>
    ///    An array with the starting <c>Date</c> value as the first element and the ending <c>Date</c> value
    ///    as the second element.
    /// </returns>
    /// <remarks>
    ///    This method will return the null <c>Date</c> value if a valid date is not found.
    /// </remarks>
    public static Array getBudgetIntervalStartAndEndDates(
        RecId _budgetCycleTimeSpanRecId,
        BudgetInterval _interval,
        TransDate _intervalDate)
    {
        Array startAndEndDates = new Array(Types::Date);
        BudgetCycleTimeSpan budgetCycleTimeSpan;
        FiscalCalendarPeriod fiscalCalendarPeriod;
        FiscalCalendarYear fiscalCalendarYear;
        date startDate;
        date endDate;

        budgetCycleTimeSpan = BudgetCycleTimeSpan::find(_budgetcycleTimeSpanRecId);

        switch (_interval)
        {
            case BudgetInterval::BudgetToDate:
                startDate = BudgetCycle::findBudgetCycleStartDate(_budgetCycleTimeSpanRecId, _intervalDate);
                endDate = LedgerFiscalCalendar::findPeriodEndDateByDate(budgetCycleTimeSpan.FiscalCalendar, _intervalDate);
                break;

            case BudgetInterval::FiscalPeriod:
                fiscalCalendarPeriod = LedgerFiscalCalendar::findPeriodByPeriodCodeDate(budgetCycleTimeSpan.FiscalCalendar, _intervalDate);
                startDate = fiscalCalendarPeriod.StartDate;
                endDate = fiscalCalendarPeriod.EndDate;
                break;

            case BudgetInterval::FiscalYear:
                fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(budgetCycleTimeSpan.FiscalCalendar, _intervalDate);
                startDate = fiscalCalendarYear.StartDate;
                endDate = fiscalCalendarYear.EndDate;
                break;

            case BudgetInterval::FiscalYearToDate:
                startDate = FiscalCalendars::findFirstDayofYear(budgetCycleTimeSpan.FiscalCalendar, _intervalDate);
                endDate = LedgerFiscalCalendar::findPeriodEndDateByDate(budgetCycleTimeSpan.FiscalCalendar, _intervalDate);
                break;

            case BudgetInterval::Month:
                startDate = FiscalCalendars::findFirstDayOfMonth(budgetCycleTimeSpan.FiscalCalendar, _intervalDate);
                endDate = FiscalCalendars::findLastDayOfMonth(budgetCycleTimeSpan.FiscalCalendar, _intervalDate);
                break;

            case BudgetInterval::MonthsToDate:
                startDate = FiscalCalendars::findFirstDayofYear(budgetCycleTimeSpan.FiscalCalendar, _intervalDate);
                endDate = FiscalCalendars::findLastDayOfMonth(budgetCycleTimeSpan.FiscalCalendar, _intervalDate);
                break;

            case BudgetInterval::Quarter:
                startDate = FiscalCalendars::findFirstDayOfQuarter(budgetCycleTimeSpan.FiscalCalendar, _intervalDate);
                endDate = FiscalCalendars::findLastDayOfQuarter(budgetCycleTimeSpan.FiscalCalendar, _intervalDate);
                break;

            case BudgetInterval::QuartersToDate:
                startDate = FiscalCalendars::findFirstDayofYear(budgetCycleTimeSpan.FiscalCalendar, _intervalDate);
                endDate = FiscalCalendars::findLastDayOfQuarter(budgetCycleTimeSpan.FiscalCalendar, _intervalDate);
                break;

            case BudgetInterval::TotalBudget:
                startDate = BudgetCycle::findBudgetCycleStartDate(budgetCycleTimeSpan.RecId, _intervalDate);
                endDate = BudgetCycle::findBudgetCycleEndDate(budgetCycleTimeSpan.RecId, _intervalDate);
                break;

            default:
                break;
        }

        startAndEndDates.value(startAndEndDates.lastIndex() + 1, startDate);
        startAndEndDates.value(startAndEndDates.lastIndex() + 1, endDate);

        return startAndEndDates;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
