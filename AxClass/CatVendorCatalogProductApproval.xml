<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatVendorCatalogProductApproval</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CatVendorCatalogProductApproval
{
    #CatVendCatalogImportProduct
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addImageToProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds an image to the <c>EcoResProduct</c> table.
    /// </summary>
    /// <param name="_catVendorProductCandidate">
    ///    An instance of the <c>CatVendorProductCandidate</c> table.
    /// </param>
    /// <param name="_ecoResProductRecId">
    ///    A <c>RecId</c> value of the <c>EcoResProduct</c> table.
    /// </param>
    private void addImageToProduct(CatVendorProductCandidate _catVendorProductCandidate, RefRecId _ecoResProductRecId)
    {
        CatVendorProductCandidateImage      catVendorProductCandidateImage;

        // Adding Product images to the product
        while select catVendorProductCandidateImage
            where catVendorProductCandidateImage.VendorProductCandidate == _catVendorProductCandidate.RecId
        {
            // Image upload not supported right now
            // Warning message given: "Failed to publish the images"
            CatVendorCatalogImportEventLog::logEvent(_catVendorProductCandidate.CatalogMaintenanceRequest,
                                                        CatImportProcessingMessageType::Warning,
                                                        CatVendorCatalogProcessingState::ImportingProducts,
                                                        "@SYS329436");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates product based on workflow create action.
    /// </summary>
    /// <param name="_catVendorProductCandidateRecId">
    ///    A <c>RecId</c> value of the <c>CatVendorProductCandidate</c> table buffer.
    /// </param>
    public void createProduct(recId _catVendorProductCandidateRecId)
    {
        EcoResProductTranslation            ecoResProductTranslation;
        EcoResProductDisplayProductNumber   ecoResProductDisplayProductNumber;

        EcoResAttributeValue                ecoResAttributeValue;
        EcoResProductCategory               ecoResProductCategory;
        EcoResCategory                      ecoResCategory;
        EcoResProductInstanceValue          ecoResProductInstanceValue;

        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest;
        CatVendorProductCandidate           catVendorProductCandidate;
        CatVendorApprovedProduct            catVendorApprovedProduct, catVendorApprovedProductLog;
        CatVendProdCandidateAttributeValue  catVendProdCandidateAttributeValue;
        CatVendorProductTextTranslation     catVendorProductTextTranslation;
        CatVendorCatalog                    catVendorCatalog;
        EcoResProductRecId                  distinctProductRecId;
        LanguageId                          systemLanguageId = SystemParameters::getSystemLanguageId();

        EcoResProductMasterManager          ecoResProductMasterManager;

        catVendorApprovedProductLog = this.getApprovedProduct(_catVendorProductCandidateRecId);
        catVendorProductCandidate = CatVendorProductCandidate::find(_catVendorProductCandidateRecId);
        if (!catVendorApprovedProductLog)
        {
            ttsbegin;

            ecoResProductMasterManager = EcoResProductMasterManager::construct();

            if (EcoResProduct::findByProductNumber(catVendorProductCandidate.VendorProductCode))
            {
                ecoResProductDisplayProductNumber = this.generateProductId(catVendorProductCandidate.VendorProductCode);
            }
            else
            {
                ecoResProductDisplayProductNumber = catVendorProductCandidate.VendorProductCode;
            }

            distinctProductRecId = ecoResProductMasterManager.createDistinctProduct(ecoResProductDisplayProductNumber,
                                                             catVendorProductCandidate.SearchName,
                                                             EcoResProductType::Item,
                                                             0,0);

            ecoResProductCategory.Product = distinctProductRecId;
            ecoResProductCategory.Category = catVendorProductCandidate.Category;

            select CategoryHierarchy from ecoResCategory where ecoResCategory.RecId == catVendorProductCandidate.Category;
            ecoResProductCategory.CategoryHierarchy = ecoResCategory.CategoryHierarchy;
            ecoResProductCategory.insert();

            ecoResProductInstanceValue.Product = distinctProductRecId;
            ecoResProductInstanceValue.insert();

            while select catVendProdCandidateAttributeValue where catVendProdCandidateAttributeValue.CatVendorProductCandidate == _catVendorProductCandidateRecId
            {
                ecoResAttributeValue.InstanceValue = EcoResInstanceValue::find(ecoResProductInstanceValue.RecId).RecId;
                ecoResAttributeValue.Value = this.insertAttributeValue(catVendProdCandidateAttributeValue);
                ecoResAttributeValue.Attribute = catVendProdCandidateAttributeValue.EcoResAttribute;
                ecoResAttributeValue.insert();
            }

            // create all available product translation in all languages.
            insert_recordset ecoResProductTranslation (Product, LanguageId, Description, Name)
                select distinctProductRecId, Language, Description, Name
                from catVendorProductTextTranslation
                    where catVendorProductTextTranslation.ProductCandidate == _catVendorProductCandidateRecId;

            // Adding Product images to the product
            this.addImageToProduct(catVendorProductCandidate, distinctProductRecId);

            // Release product to Legal Entity, which vendor does business with. And this method internally updates the product price
            this.releaseProductToLegalEntity(distinctProductRecId, _catVendorProductCandidateRecId);

            // Insert newly created product into catVendorApprovedProduct table for Catalog Import Feature reference
            select firstonly VendorCatalog from catVendorCatalogMaintenanceRequest
                    where catVendorCatalogMaintenanceRequest.RecId == catVendorProductCandidate.CatalogMaintenanceRequest
                join VendorParty from catVendorCatalog
                    where catVendorCatalog.RecId == catVendorCatalogMaintenanceRequest.VendorCatalog;

            catVendorApprovedProduct.CatVendorCatalog = catVendorCatalogMaintenanceRequest.VendorCatalog;
            catVendorApprovedProduct.EcoResCategory = catVendorProductCandidate.Category;
            catVendorApprovedProduct.EcoResProduct = distinctProductRecId;
            catVendorApprovedProduct.VendorProductCode = catVendorProductCandidate.VendorProductCode;
            catVendorApprovedProduct.DirPartyTable = catVendorCatalog.VendorParty;
            catVendorApprovedProduct.insert();

            ttscommit;
        }
        else
        {
            catVendorProductCandidate.selectForUpdate(true);
            ttsbegin;
            catVendorProductCandidate.Status = CatVendorProductStatus::Rejected;
            catVendorProductCandidate.update();
            CatVendorCatalogImportEventLog::logEvent(catVendorProductCandidate.CatalogMaintenanceRequest,
                CatImportProcessingMessageType::Warning,
                CatVendorCatalogProcessingState::ImportingProducts,
                strfmt("@SYS309529" , catVendorProductCandidate.VendorProductCode));
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductForRetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a product to product master to product variant based on a workflow create action.
    /// </summary>
    /// <param name="_catVendorProductCandidateRecId">
    /// The record ID of a <c>CatVendorProductCandidate</c> record.
    /// </param>
    public void createProductForRetail(recId _catVendorProductCandidateRecId)
    {
        EcoResProductTranslation            ecoResProductTranslation, ecoResProductTranslation_Variant;
        EcoResProductDisplayProductNumber   ecoResProductDisplayProductNumber;

        EcoResAttributeValue                ecoResAttributeValue;
        EcoResProductCategory               ecoResProductCategory;
        EcoResCategory                      ecoResCategory;
        EcoResProductInstanceValue          ecoResProductInstanceValue;

        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest;
        CatVendorProductCandidate           catVendorProductCandidate;
        CatVendorApprovedProduct            catVendorApprovedProduct, catVendorApprovedProductLog;
        CatVendProdCandidateAttributeValue  catVendProdCandidateAttributeValue;
        CatVendorProductTextTranslation     catVendorProductTextTranslation;
        CatVendorCatalog                    catVendorCatalog;
        EcoResProductRecId                  productRecId;
        LanguageId                          systemLanguageId = SystemParameters::getSystemLanguageId();

        EcoResProductMasterManager          ecoResProductMasterManager;

        EcoResProductDimensionGroupName     dimensionGroupName;
        EcoResProductDimensionGroup         dimensionGroup;
        EcoResProduct                       ecoResProduct;
        RecId                               masterProductDimensionGroupRecId;

        catVendorApprovedProductLog = this.getApprovedProductForRetail(_catVendorProductCandidateRecId);
        catVendorProductCandidate = CatVendorProductCandidate::find(_catVendorProductCandidateRecId);
        if (!catVendorApprovedProductLog)
        {
            // Product validations
            // For a product master, check whether the product dimension group exists
            if (catVendorProductCandidate.ProductSubtype == EcoResProductSubtype::ProductMaster)
            {
                // Find the product dimension group for the product master
                dimensionGroupName = catVendorProductCandidate.DimensionGroupName;

                // Inherit dimension group from Retail product category if it's not provided by the vendor
                if (dimensionGroupName == "")
                {
                    dimensionGroupName = RetailAttributesGlobalLookup::findByCategory(catVendorProductCandidate.Category).GroupProductDimension;
                }

                dimensionGroup = EcoResProductDimensionGroup::findByDimensionGroupName(dimensionGroupName);

                if (!dimensionGroup)
                {
                    catVendorProductCandidate.selectForUpdate(true);
                    ttsbegin;
                    catVendorProductCandidate.Status = CatVendorProductStatus::Rejected;
                    catVendorProductCandidate.update();
                    CatVendorCatalogImportEventLog::logEvent(catVendorProductCandidate.CatalogMaintenanceRequest,
                                                            CatImportProcessingMessageType::Error,
                                                            CatVendorCatalogProcessingState::ImportingProducts,
                                                            strfmt("@RET260161", catVendorProductCandidate.VendorProductCode));
                    ttsCommit;
                    return;
                }
            }

            // For a product variant
            // check whether its product master exists
            // check whether the variant dimension values matches the dimension group setup
            else if (catVendorProductCandidate.ProductSubtype == EcoResProductSubtype::ProductVariant)
            {
                // Find the product master
                ecoResProduct = EcoResProduct::findByProductNumber(catVendorProductCandidate.VendorProductCode);
                if (!ecoResProduct || !ecoResProduct.isProductMaster())
                {
                    catVendorProductCandidate.selectForUpdate(true);
                    ttsbegin;
                    catVendorProductCandidate.Status = CatVendorProductStatus::Rejected;
                    catVendorProductCandidate.update();
                    CatVendorCatalogImportEventLog::logEvent(catVendorProductCandidate.CatalogMaintenanceRequest,
                                                            CatImportProcessingMessageType::Error,
                                                            CatVendorCatalogProcessingState::ImportingProducts,
                                                            strfmt("@RET260162", catVendorProductCandidate.VendorProductCode));
                    ttsCommit;
                    return;
                }

                // Find product dimension group
                masterProductDimensionGroupRecId = EcoResProductDimensionGroupProduct::findByProduct(ecoResProduct.RecId).ProductDimensionGroup;
                if (masterProductDimensionGroupRecId)
                {
                    // Check whether the variant dimension values match the dimension group setup
                    boolean variantDimensionValuesMatchDimensionGroupSetup = true;
                    Enumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
                    while (enum.moveNext())
                    {
                        InventProductDimension productDimension = enum.current() as InventProductDimension;
                        FieldId catVendorProductCandidateDimFieldId = CatVendorProductCandidate::productDimensionFieldId(productDimension);
                        if (catVendorProductCandidateDimFieldId)
                        {
                            FieldId inventDimFieldId = productDimension.parmInventDimFieldId();

                            EcoResProductDimensionGroupFldSetup dimensionGroupFldSetup = EcoResProductDimensionGroupFldSetup::findByDimensionGroupFieldId(masterProductDimensionGroupRecId, inventDimFieldId);
                            boolean dimensionIsBlank = catVendorProductCandidate.(catVendorProductCandidateDimFieldId) == InventDim::emptyDimField(inventDimFieldId);

                            if (dimensionGroupFldSetup.IsActive == dimensionIsBlank)
                            {
                                variantDimensionValuesMatchDimensionGroupSetup = false;
                                break;
                            }
                        }
                    }

                    if (!variantDimensionValuesMatchDimensionGroupSetup)
                    {
                        catVendorProductCandidate.selectForUpdate(true);
                        ttsbegin;
                        catVendorProductCandidate.Status = CatVendorProductStatus::Rejected;
                        catVendorProductCandidate.update();
                        CatVendorCatalogImportEventLog::logEvent(catVendorProductCandidate.CatalogMaintenanceRequest,
                                                                CatImportProcessingMessageType::Error,
                                                                CatVendorCatalogProcessingState::ImportingProducts,
                                                                strfmt("@RET260158", catVendorProductCandidate.VendorProductCode));
                        ttsCommit;
                        return;
                    }
                }
                else
                {
                    catVendorProductCandidate.selectForUpdate(true);
                    ttsbegin;
                    catVendorProductCandidate.Status = CatVendorProductStatus::Rejected;
                    catVendorProductCandidate.update();
                    CatVendorCatalogImportEventLog::logEvent(catVendorProductCandidate.CatalogMaintenanceRequest,
                                                            CatImportProcessingMessageType::Error,
                                                            CatVendorCatalogProcessingState::ImportingProducts,
                                                            strfmt("@RET260159", catVendorProductCandidate.VendorProductCode));
                    ttsCommit;
                    return;
                }
            }

            ttsbegin;

            // Get product number
            if (EcoResProduct::findByProductNumber(catVendorProductCandidate.VendorProductCode))
            {
                ecoResProductDisplayProductNumber = this.generateProductId(catVendorProductCandidate.VendorProductCode);
            }
            else
            {
                ecoResProductDisplayProductNumber = catVendorProductCandidate.VendorProductCode;
            }

            //Create product
            if (catVendorProductCandidate.ProductSubtype == EcoResProductSubtype::ProductMaster)
            {
                // Create a product master
                ecoResProductMasterManager = EcoResProductMasterManager::construct();
                productRecId = ecoResProductMasterManager.createProductMaster(ecoResProductDisplayProductNumber,
                                                        catVendorProductCandidate.SearchName,
                                                        EcoResProductType::Item,
                                                        EcoResVariantConfigurationTechnologyType::PredefinedVariants,
                                                        dimensionGroup.RecId,
                                                        0,
                                                        0);
            }
            else if (catVendorProductCandidate.ProductSubtype == EcoResProductSubtype::ProductVariant)
            {
                InventDim inventDim;

                // Add dimension values
                Enumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
                while (enum.moveNext())
                {
                    InventProductDimension productDimension = enum.current() as InventProductDimension;
                    FieldId catVendorProductCandidateDimFieldId = CatVendorProductCandidate::productDimensionFieldId(productDimension);

                    if (catVendorProductCandidateDimFieldId &&
                        catVendorProductCandidate.(catVendorProductCandidateDimFieldId))
                    {
                        FieldId inventDimFieldId = productDimension.parmInventDimFieldId();
                        inventDim.(inventDimFieldId) = catVendorProductCandidate.(catVendorProductCandidateDimFieldId);

                        Common dimensionRecord = productDimension.findDimensionByNaturalKey(catVendorProductCandidate.(catVendorProductCandidateDimFieldId));
                        if (!dimensionRecord
                            || !EcoResProductMasterManager::checkDimensionValue(
                                                       ecoResProduct.RecId,
                                                       EcoResProductDimensionAttribute::inventDimFieldId2DimensionAttributeRecId(inventDimFieldId),
                                                       dimensionRecord.RecId))
                        {
                            if (EcoResProductMasterManagerMethodSignatureChangeFlight::instance().isEnabled())
                            {
                                EcoResProductMasterManager::addNewProductDimensionValue(
                                                        ecoResProduct.RecId,
                                                        EcoResProductDimensionAttribute::inventDimFieldId2DimensionAttributeRecId(inventDimFieldId),
                                                        catVendorProductCandidate.(catVendorProductCandidateDimFieldId),
                                                        '',
                                                        '');
                            }
                            else
                            {
                                EcoResProductMasterManager::addProductDimensionValue(
                                                        ecoResProduct.RecId,
                                                        EcoResProductDimensionAttribute::inventDimFieldId2DimensionAttributeRecId(inventDimFieldId),
                                                        catVendorProductCandidate.(catVendorProductCandidateDimFieldId),
                                                        '',
                                                        '');
                            }
                        }
                    }
                }

                //Create a product variant
                container dimensions = EcoResProductVariantDimValue::getDimensionValuesContainerByInventDim(inventDim);

                productRecId = ecoResProductVariantManager::createProductVariant(ecoResProduct.RecId, catVendorProductCandidate.SearchName, dimensions);
            }
            else
            {
                // Create a distinct product
                ecoResProductMasterManager = EcoResProductMasterManager::construct();
                productRecId = ecoResProductMasterManager.createDistinctProduct(ecoResProductDisplayProductNumber,
                                                            catVendorProductCandidate.SearchName,
                                                            EcoResProductType::Item,
                                                            0,0);
            }

            // Don't associate product variants with Retail product category
            // Don't create product attributes for product variants.
            if (catVendorProductCandidate.ProductSubtype != EcoResProductSubtype::ProductVariant)
            {
                // Associate product with Retail product category
                ecoResProductCategory.Product = productRecId;
                ecoResProductCategory.Category = catVendorProductCandidate.Category;

                select CategoryHierarchy from ecoResCategory where ecoResCategory.RecId == catVendorProductCandidate.Category;
                ecoResProductCategory.CategoryHierarchy = ecoResCategory.CategoryHierarchy;
                ecoResProductCategory.insert();

                ecoResProductInstanceValue.Product = productRecId;
                ecoResProductInstanceValue.insert();

                // Create product attributes
                while select catVendProdCandidateAttributeValue where catVendProdCandidateAttributeValue.CatVendorProductCandidate == _catVendorProductCandidateRecId
                {
                    ecoResAttributeValue.InstanceValue = EcoResInstanceValue::find(ecoResProductInstanceValue.RecId).RecId;
                    ecoResAttributeValue.Value = this.insertAttributeValue(catVendProdCandidateAttributeValue);
                    ecoResAttributeValue.Attribute = catVendProdCandidateAttributeValue.EcoResAttribute;
                    ecoResAttributeValue.insert();
                }
            }

            // create all available product translation in all languages.
            if (catVendorProductCandidate.ProductSubtype != EcoResProductSubtype::ProductVariant)
            {
                insert_recordset ecoResProductTranslation (Product, LanguageId, Description, Name)
                    select productRecId, Language, Description, Name
                    from catVendorProductTextTranslation
                        where catVendorProductTextTranslation.ProductCandidate == _catVendorProductCandidateRecId;
            }
            // update variant names and descriptions.
            else
            {
                while select ProductCandidate, Language, Description, Name
                    from catVendorProductTextTranslation
                        where catVendorProductTextTranslation.ProductCandidate == _catVendorProductCandidateRecId
                {
                    ecoResProductTranslation_Variant.clear();
                    ecoResProductTranslation_Variant = EcoResProductTranslation::findByProductLanguage(productRecId, catVendorProductTextTranslation.Language, true);

                    if (ecoResProductTranslation_Variant)
                    {
                        ecoResProductTranslation_Variant.Name = catVendorProductTextTranslation.Name;
                        ecoResProductTranslation_Variant.Description = catVendorProductTextTranslation.Description;
                        ecoResProductTranslation_Variant.update();
                    }
                    else
                    {
                        ecoResProductTranslation_Variant.Product = productRecId;
                        ecoResProductTranslation_Variant.LanguageId = catVendorProductTextTranslation.Language;
                        ecoResProductTranslation_Variant.Name = catVendorProductTextTranslation.Name;
                        ecoResProductTranslation_Variant.Description = catVendorProductTextTranslation.Description;
                        ecoResProductTranslation_Variant.insert();
                    }
                }
            }

            // Adding Product images to the product
            this.addImageToProduct(catVendorProductCandidate, productRecId);

            // Release product to Legal Entity, which vendor does business with. And this method internally updates the product price
            this.releaseProductToLegalEntity(productRecId, _catVendorProductCandidateRecId);

            // Insert newly created product into catVendorApprovedProduct table for Catalog Import Feature reference
            select firstonly VendorCatalog from catVendorCatalogMaintenanceRequest
                    where catVendorCatalogMaintenanceRequest.RecId == catVendorProductCandidate.CatalogMaintenanceRequest
                join VendorParty from catVendorCatalog
                    where catVendorCatalog.RecId == catVendorCatalogMaintenanceRequest.VendorCatalog;

            catVendorApprovedProduct.CatVendorCatalog = catVendorCatalogMaintenanceRequest.VendorCatalog;
            catVendorApprovedProduct.EcoResCategory = catVendorProductCandidate.Category;
            catVendorApprovedProduct.EcoResProduct = productRecId;
            catVendorApprovedProduct.VendorProductCode = catVendorProductCandidate.VendorProductCode;
            catVendorApprovedProduct.DirPartyTable = catVendorCatalog.VendorParty;
            catVendorApprovedProduct.ProductSubtype = catVendorProductCandidate.ProductSubtype;

            // Add dimension values
            Enumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
            while (enum.moveNext())
            {
                InventProductDimension productDimension = enum.current() as InventProductDimension;
                FieldId catVendorProductCandidateDimFieldId = CatVendorProductCandidate::productDimensionFieldId(productDimension);
                FieldId catVendorApprovedProductDimFieldId = CatVendorApprovedProduct::productDimensionFieldId(productDimension);
                if (catVendorProductCandidateDimFieldId && catVendorApprovedProductDimFieldId)
                {
                    catVendorApprovedProduct.(catVendorApprovedProductDimFieldId) = catVendorProductCandidate.(catVendorProductCandidateDimFieldId);
                }
            }

            catVendorApprovedProduct.insert();

            ttscommit;
        }
        else
        {
            catVendorProductCandidate.selectForUpdate(true);
            ttsbegin;
            catVendorProductCandidate.Status = CatVendorProductStatus::Rejected;
            catVendorProductCandidate.update();
            CatVendorCatalogImportEventLog::logEvent(catVendorProductCandidate.CatalogMaintenanceRequest,
                CatImportProcessingMessageType::Warning,
                CatVendorCatalogProcessingState::ImportingProducts,
                strfmt("@SYS309529" , catVendorProductCandidate.VendorProductCode));
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the vendor product as deleted.
    /// </summary>
    /// <param name="_catVendorProductCandidateRecid">
    ///    A <c>RecId</c> value of the <c>CatVendorProductCandidate</c> table.
    /// </param>
    /// <remarks>
    ///    Sets the vendor product as deleted and stops the item from purchasing, if available.
    /// </remarks>
    public void deleteProduct(RefRecId _catVendorProductCandidateRecid)
    {
        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest;
        CatVendorProductCandidate           catVendorProductCandidate;
        CatVendorApprovedProduct            catVendorApprovedProduct;
        CatVendorCatalog                    catVendorCatalog;
        InventTable                         inventTable;
        InventItemPurchSetup                inventItemPurchSetup;

        select VendorProductCode,CatalogMaintenanceRequest from catVendorProductCandidate
                    where catVendorProductCandidate.RecId == _catVendorProductCandidateRecid

            join VendorCatalog from catVendorCatalogMaintenanceRequest
                    where catVendorCatalogMaintenanceRequest.RecId == catVendorProductCandidate.CatalogMaintenanceRequest

            join VendorParty from catVendorCatalog
                    where catVendorCatalog.RecId == catVendorCatalogMaintenanceRequest.VendorCatalog

            join forupdate EcoResProduct, VendorProductCode from catVendorApprovedProduct
                    where catVendorApprovedProduct.DirPartyTable        == catVendorCatalog.VendorParty
                       && catVendorApprovedProduct.VendorProductCode    == catVendorProductCandidate.VendorProductCode;

        if (catVendorApprovedProduct)
        {
            ttsbegin;

            while select crossCompany ItemId from inventTable
                        where inventTable.Product == catVendorApprovedProduct.EcoResProduct
            {
                changecompany(
                              inventTable.company()
                              )
                {
                    inventItemPurchSetup = InventItemPurchSetup::findDefault(inventTable.ItemId, true);
                    if (inventItemPurchSetup)
                    {
                        inventItemPurchSetup.Stopped = NoYes::Yes;
                        inventItemPurchSetup.update();
                        // Update the product per company table which denotes that the item has been updated accordingly.
                        CatVendorCatalogProductPerCompany::createOrUpdate(catVendorProductCandidate.RecId,
                                                                          inventTable.company(),
                                                                          NoYes::Yes);
                    }
                }
            }
            catVendorApprovedProduct.IsDeleted = NoYes::Yes;
            catVendorApprovedProduct.update();
            ttscommit;
        }
        else
        {
            catVendorProductCandidate = CatVendorProductCandidate::find(_catVendorProductCandidateRecid);

            CatVendorCatalogImportEventLog::logEvent(catVendorProductCandidate.CatalogMaintenanceRequest,
                                                    CatImportProcessingMessageType::Warning,
                                                    CatVendorCatalogProcessingState::ImportingProducts,
                                                    strfmt("@SYS309530" , catVendorProductCandidate.VendorProductCode)) ;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteDistinctProductOrMaster</Name>
				<Source><![CDATA[
    private void deleteDistinctProductOrMaster(CatVendorApprovedProduct _catVendorApprovedProduct)
    {
        ttsbegin;

        InventTable                         inventTable;
        while select crossCompany ItemId from inventTable
                            where inventTable.Product == _catVendorApprovedProduct.EcoResProduct
        {
            changecompany(inventTable.company())
            {
                InventItemPurchSetup                inventItemPurchSetup;
                InventItemSalesSetup                inventItemSalesSetup;
                
                // Update all available purchase setup to "stopped"
                update_recordSet inventItemPurchSetup
                            setting Stopped = NoYes::Yes
                            where   inventItemPurchSetup.ItemId == inventTable.ItemId &&
                                    inventItemPurchSetup.Stopped == NoYes::No;

                // Update all available sales setup to "stopped"
                update_recordSet inventItemSalesSetup
                            setting Stopped = NoYes::Yes
                            where   inventItemSalesSetup.ItemId == inventTable.ItemId &&
                                    inventItemSalesSetup.Stopped == NoYes::No;
            }
        }
        _catVendorApprovedProduct.IsDeleted = NoYes::Yes;
        _catVendorApprovedProduct.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteProductVariant</Name>
				<Source><![CDATA[
    private void deleteProductVariant(CatVendorApprovedProduct _catVendorApprovedProduct)
    {
        ttsbegin;

        InventDimCombination releasedVariant;

        while select crossCompany releasedVariant
                        where releasedVariant.DistinctProductVariant == _catVendorApprovedProduct.EcoResProduct
        {
            changecompany(releasedVariant.company())
            {
                InventItemPurchSetup::stopVariantForTrade(releasedVariant);
            }
        }
        _catVendorApprovedProduct.IsDeleted = NoYes::Yes;
        _catVendorApprovedProduct.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteProductForRetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the vendor product to product master to product variant as deleted.
    /// </summary>
    /// <param name="_catVendorProductCandidateRecid">
    /// The record ID of a <c>CatVendorProductCandidate</c> record.
    /// </param>
    /// <remarks>
    /// This method sets the vendor product as deleted and stops the item from purchasing, if available.
    /// </remarks>
    public void deleteProductForRetail(RefRecId _catVendorProductCandidateRecid)
    {
        CatVendorProductCandidate           catVendorProductCandidate;
        CatVendorApprovedProduct            catVendorApprovedProduct;
        InventTable                         inventTable;
        InventItemPurchSetup                inventItemPurchSetup;
        InventItemSalesSetup                inventItemSalesSetup;

        catVendorApprovedProduct = this.getApprovedProductForRetail(_catVendorProductCandidateRecid);

        if (catVendorApprovedProduct)
        {
            if (catVendorApprovedProduct.ProductSubtype != EcoResProductSubtype::ProductVariant)
            {
                this.deleteDistinctProductOrMaster(catVendorApprovedProduct);
            }
            else
            {
                this.deleteProductVariant(catVendorApprovedProduct);
            }
        }
        else
        {
            catVendorProductCandidate = CatVendorProductCandidate::find(_catVendorProductCandidateRecid);

            CatVendorCatalogImportEventLog::logEvent(catVendorProductCandidate.CatalogMaintenanceRequest,
                                                    CatImportProcessingMessageType::Warning,
                                                    CatVendorCatalogProcessingState::ImportingProducts,
                                                    strfmt("@SYS309530" , catVendorProductCandidate.VendorProductCode)) ;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateProductId</Name>
				<Source><![CDATA[
    // Generate Unique product ID
    private EcoResProductDisplayProductNumber generateProductId(EcoResProductDisplayProductNumber productIdgtd)
    {
        EcoResProductDisplayProductNumber   productid;
        int                                 cutOffLen;
        int                                 seq = 0;
        boolean                             insert = false;
        EcoResProductDisplayProductNumber   genProductID;

        cutOfflen = 20-3;
        productid = productIdgtd;

        seq = 0;

        while (true)
        {
            seq++;
            genProductID = strfmt('%1%2',substr(productid,1,cutOffLen),strRFix(int2str(seq),20-cutOffLen,'0'));

            if  (!EcoResProduct::findByProductNumber(genProductID).RecId)
            {
                break;
            }
        }

        return genProductID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getApprovedProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets vendor-approved product.
    /// </summary>
    /// <param name="_catVendorProductCandidateRecId">
    ///    A <c>RecId</c> value of the <c>CatVendorProductCandidate</c> table.
    /// </param>
    /// <returns>
    ///    An instance of the <c>CatVendorApprovedProduct</c> table.
    /// </returns>
    private CatVendorApprovedProduct getApprovedProduct(RefRecId _catVendorProductCandidateRecId)
    {
        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest;
        CatVendorProductCandidate           catVendorProductCandidate;
        CatVendorApprovedProduct            catVendorApprovedProduct;
        CatVendorCatalog                    catVendorCatalog;
        
        select firstonly CatalogMaintenanceRequest,VendorProductCode from catVendorProductCandidate
            where catVendorProductCandidate.RecId == _catVendorProductCandidateRecId

        join VendorCatalog from catVendorCatalogMaintenanceRequest
            where catVendorCatalogMaintenanceRequest.RecId == catVendorProductCandidate.CatalogMaintenanceRequest

        join VendorParty from catVendorCatalog
            where catVendorCatalog.RecId == catVendorCatalogMaintenanceRequest.VendorCatalog

        join  forupdate VendorProductCode,EcoResProduct,DirPartyTable,EcoResCategory,IsDeleted from catVendorApprovedProduct
            where catVendorApprovedProduct.VendorProductCode == catVendorProductCandidate.VendorProductCode
                && catVendorApprovedProduct.DirPartyTable     ==  catVendorCatalog.VendorParty
                && catVendorApprovedProduct.CatVendorCatalog  ==  catVendorCatalog.RecId;

        return catVendorApprovedProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getApprovedProductForRetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a vendor-approved product.
    /// </summary>
    /// <param name="_catVendorProductCandidateRecId">
    /// The record ID of a <c>CatVendorProductCandidate</c> record.
    /// </param>
    /// <returns>
    /// A <c>CatVendorApprovedProduct</c> record.
    /// </returns>
    private CatVendorApprovedProduct getApprovedProductForRetail(RefRecId _catVendorProductCandidateRecId)
    {
        CatVendorProductCandidate catVendorProductCandidate;
        SysDaQueryObject queryObject = new SysDaQueryObject(catVendorProductCandidate);
        queryObject.projection()
            .add(fieldStr(CatVendorProductCandidate, CatalogMaintenanceRequest))
            .add(fieldStr(CatVendorProductCandidate, VendorProductCode));
        queryObject.firstOnlyHint = true;

        queryObject.whereClause(new SysDaEqualsExpression(
            new SysDaFieldExpression(catVendorProductCandidate, fieldStr(CatVendorProductCandidate, RecId)), new SysDaValueExpression(_catVendorProductCandidateRecId)));

        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest;
        SysDaQueryObject                    catVendorCatalogMaintenanceRequestJoin = new SysDaQueryObject(catVendorCatalogMaintenanceRequest);
        catVendorCatalogMaintenanceRequestJoin.whereClause(new SysDaEqualsExpression(
            new SysDaFieldExpression(catVendorCatalogMaintenanceRequest, fieldStr(CatVendorCatalogMaintenanceRequest, RecId)), new SysDaFieldExpression(catVendorProductCandidate, fieldStr(CatVendorProductCandidate, CatalogMaintenanceRequest))));
        queryObject.joinClause(SysDaJoinKind::InnerJoin, catVendorCatalogMaintenanceRequestJoin);

        CatVendorCatalog catVendorCatalog;
        SysDaQueryObject catVendorCatalogJoin = new SysDaQueryObject(catVendorCatalog);
        catVendorCatalogJoin.whereClause(new SysDaEqualsExpression(
            new SysDaFieldExpression(catVendorCatalog, fieldStr(CatVendorCatalog, RecId)), new SysDaFieldExpression(catVendorCatalogMaintenanceRequest, fieldStr(CatVendorCatalogMaintenanceRequest, VendorCatalog))));
        catVendorCatalogMaintenanceRequestJoin.joinClause(SysDaJoinKind::InnerJoin, catVendorCatalogJoin);

        CatVendorApprovedProduct    catVendorApprovedProduct;
        SysDaQueryObject            catVendorApprovedProductJoin = this.buildApprovedProductForRetailApprovedProductClause(catVendorApprovedProduct, catVendorProductCandidate, catVendorCatalog);
        catVendorApprovedProductJoin.forUpdateHint = true;
        catVendorCatalogJoin.joinClause(SysDaJoinKind::InnerJoin, catVendorApprovedProductJoin);

        SysDaFindStatement findStatement = new SysDaFindStatement();
        findStatement.execute(new SysDaFindObject(queryObject));

        return catVendorApprovedProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildApprovedProductForRetailApprovedProductClause</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the approved products join clause for finding approved products for retail.
    /// </summary>
    /// <param name = "_catVendorApprovedProduct">The vendor catalog approved product buffer.</param>
    /// <param name = "_catVendorProductCandidate">The product candidate buffer joined in the query.</param>
    /// <param name = "_catVendorCatalog">The vendor catalog buffer joined in the query.</param>
    /// <returns>A query object for the approved product join.</returns>
    protected SysDaQueryObject buildApprovedProductForRetailApprovedProductClause(
        CatVendorApprovedProduct    _catVendorApprovedProduct, 
        CatVendorProductCandidate   _catVendorProductCandidate, 
        CatVendorCatalog            _catVendorCatalog)
    {
        SysDaQueryObject catVendorApprovedProductJoin = new SysDaQueryObject(_catVendorApprovedProduct);
        catVendorApprovedProductJoin.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_catVendorApprovedProduct, fieldStr(CatVendorApprovedProduct, VendorProductCode)), new SysDaFieldExpression(_catVendorProductCandidate, fieldStr(CatVendorProductCandidate, VendorProductCode)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_catVendorApprovedProduct, fieldStr(CatVendorApprovedProduct, ProductSubtype)), new SysDaFieldExpression(_catVendorProductCandidate, fieldStr(CatVendorProductCandidate, ProductSubtype))))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_catVendorApprovedProduct, fieldStr(CatVendorApprovedProduct, ConfigurationName)), new SysDaFieldExpression(_catVendorProductCandidate, fieldStr(CatVendorProductCandidate, ConfigurationName))))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_catVendorApprovedProduct, fieldStr(CatVendorApprovedProduct, SizeName)), new SysDaFieldExpression(_catVendorProductCandidate, fieldStr(CatVendorProductCandidate, SizeName))))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_catVendorApprovedProduct, fieldStr(CatVendorApprovedProduct, ColorName)), new SysDaFieldExpression(_catVendorProductCandidate, fieldStr(CatVendorProductCandidate, ColorName))))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_catVendorApprovedProduct, fieldStr(CatVendorApprovedProduct, StyleName)), new SysDaFieldExpression(_catVendorProductCandidate, fieldStr(CatVendorProductCandidate, StyleName))))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_catVendorApprovedProduct, fieldStr(CatVendorApprovedProduct, DirPartyTable)), new SysDaFieldExpression(_catVendorCatalog, fieldStr(CatVendorCatalog, VendorParty)))));

        return catVendorApprovedProductJoin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAttributeValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts product attribute values.
    /// </summary>
    /// <param name="_catVendProdCandidateAttributeValue">
    ///    A record of the <c>CatVendProdCandidateAttributeValue</c> table buffer.
    /// </param>
    /// <returns>
    ///    A record ID of the <c>EcoResValue</c> table buffer.
    /// </returns>
    private RefRecId insertAttributeValue(CatVendProdCandidateAttributeValue _catVendProdCandidateAttributeValue)
    {
        EcoResTextValueTranslation          ecoResTextValueTranslation;
        EcoResDateTimeValue                 ecoResDateTimeValue;
        EcoResCurrencyValue                 ecoResCurrencyValue;
        EcoResBooleanValue                  ecoResBooleanValue;
        EcoResFloatValue                    ecoResFloatValue;
        EcoResTextValue                     ecoResTextValue;
        EcoResIntValue                      ecoResIntValue;

        CatVendorTextValueTranslation       catVendorTextValueTranslation;
        CatVendorDateTimeValue              catVendorDateTimeValue;
        CatVendorCurrencyValue              catVendorCurrencyValue;
        CatVendorBooleanValue               catVendorBooleanValue;
        CatVendorFloatValue                 catVendorFloatValue;
        CatVendorTextValue                  catVendorTextValue;
        CatVendorIntValue                   catVendorIntValue;

        RefRecId                            attributeValueRecId;

        switch (_catVendProdCandidateAttributeValue.getInstanceRelationType())
        {
            case tablestr(CatVendorTextValue) :
                catVendorTextValue = _catVendProdCandidateAttributeValue as CatVendorTextValue;
                ecoResTextValue.TextValue = catVendorTextValue.TextValue;
                ecoResTextValue.insert();
                attributeValueRecId = ecoResTextValue.RecId;

                insert_recordset ecoResTextValueTranslation (TextValue,Language,TextValueTable)
                select TextValue,Language,attributeValueRecId from catVendorTextValueTranslation
                    where catVendorTextValueTranslation.TextValueTable == catVendorTextValue.RecId;

                break;

            case tablestr(CatVendorBooleanValue) :
                catVendorBooleanValue = _catVendProdCandidateAttributeValue as CatVendorBooleanValue;
                ecoResBooleanValue.BooleanValue = catVendorBooleanValue.BooleanValue;
                ecoResBooleanValue.insert();
                attributeValueRecId = ecoResBooleanValue.RecId;
                break;

            case tablestr(CatVendorFloatValue) :
                catVendorFloatValue = _catVendProdCandidateAttributeValue as CatVendorFloatValue;
                ecoResFloatValue.FloatValue = catVendorFloatValue.FloatValue;
                ecoResFloatValue.FloatUnitOfMeasure = catVendorFloatValue.FloatUnitOfMeasure;
                ecoResFloatValue.insert();
                attributeValueRecId = ecoResFloatValue.RecId;
                break;

            case tablestr(CatVendorIntValue) :
                catVendorIntValue = _catVendProdCandidateAttributeValue as CatVendorIntValue;
                ecoResIntValue.IntValue = catVendorIntValue.IntValue;
                ecoResIntValue.IntUnitOfMeasure = catVendorIntValue.IntUnitOfMeasure;
                ecoResIntValue.insert();
                attributeValueRecId = ecoResIntValue.RecId;
                break;

            case tablestr(CatVendorDateTimeValue) :
                catVendorDateTimeValue = _catVendProdCandidateAttributeValue as CatVendorDateTimeValue;
                ecoResDateTimeValue.DateTimeValue = catVendorDateTimeValue.DateTimeValue;
                ecoResDateTimeValue.insert();
                attributeValueRecId = ecoResDateTimeValue.RecId;
                break;

            case tablestr(CatVendorCurrencyValue) :
                catVendorCurrencyValue = _catVendProdCandidateAttributeValue as CatVendorCurrencyValue;
                ecoResCurrencyValue.CurrencyValue = catVendorCurrencyValue.CurrencyValue;
                ecoResCurrencyValue.CurrencyCode = catVendorCurrencyValue.CurrencyCode;
                ecoResCurrencyValue.insert();
                attributeValueRecId = ecoResCurrencyValue.RecId;
                break;
        }

        return attributeValueRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>manageProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates, updates, and deletes a product based on an action type.
    /// </summary>
    /// <param name="_catVendorProductCandidateRecId">
    ///    The <c>RecId</c> value of a <c>CatVendorProductCandidate</c> table buffer.
    /// </param>
    /// <param name="_productActionType">
    ///    An instance of the <c>CatProductActionType</c> class.
    /// </param>
    public void manageProduct(recId _catVendorProductCandidateRecId,CatProductActionType _productActionType)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            switch (_productActionType)
            {
                case CatProductActionType::Add :
                    this.createProductForRetail(_catVendorProductCandidateRecId);
                    break;
                case CatProductActionType::Update :
                    this.updateProductForRetail(_catVendorProductCandidateRecId);
                    break;
                case CatProductActionType::Delete :
                    this.deleteProductForRetail(_catVendorProductCandidateRecId);
                    break;
            }
        }
        else
        {
            switch (_productActionType)
            {
                case CatProductActionType::Add :
                    this.createProduct(_catVendorProductCandidateRecId);
                    break;
                case CatProductActionType::Update :
                    this.updateProduct(_catVendorProductCandidateRecId);
                    break;
                case CatProductActionType::Delete :
                    this.deleteProduct(_catVendorProductCandidateRecId);
                    break;
            }
        }

        this.updateCatVendorReleaseCatalog(_catVendorProductCandidateRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseProductToLegalEntity</Name>
				<Source><![CDATA[
    private void releaseProductToLegalEntity(RefRecId _ecoresProductRecid, RefRecId _catVendorProductRecid)
    {
        CatVendorReleaseCatalog             catVendorReleaseCatalog;
        CatVendorProductCandidate           catVendorProductCandidate;
        CatVendorCatalog                    catVendorCatalog;
        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest;
        CompanyInfo                         companyInfo;
        CatVendorCatalogProductPerCompany   catVendorCatalogProductPerCompany;
        CatVendorCatalogProductReleaseManager     catVendorCatalogProductReleaseManager;

        catVendorCatalogProductReleaseManager = new CatVendorCatalogProductReleaseManager();

        while select * from catVendorReleaseCatalog

              join RecId,VendorParty from catVendorCatalog
                    where catVendorReleaseCatalog.Catalog == catVendorCatalog.RecId

              join DataArea from companyInfo
                    where catVendorReleaseCatalog.LegalEntity == companyInfo.RecId

              join RecId from catVendorCatalogMaintenanceRequest
                    where catVendorCatalog.RecId == catVendorCatalogMaintenanceRequest.VendorCatalog

              join * from catVendorProductCandidate
                    where catVendorCatalogMaintenanceRequest.RecId == catVendorProductCandidate.CatalogMaintenanceRequest
                         && catVendorProductCandidate.RecId == _catVendorProductRecid
        {
            if (catVendorReleaseCatalog.Status != CatVendorLegalEntityStatus::OnHold)
            {
                catVendorCatalogProductPerCompany = CatVendorCatalogProductPerCompany::find(_catVendorProductRecid,companyInfo.DataArea);
                if (catVendorCatalogProductPerCompany.IsReleased == NoYes::No && catVendorCatalogProductPerCompany.IsMarkedForRelease == NoYes::Yes)
                {
                    if (catVendorCatalogProductReleaseManager.isVendorCategoryAssociated(catVendorCatalog.VendorParty,
                                                                                        catVendorProductCandidate.Category,
                                                                                        getCompany(tableNum(VendTable), companyInfo.DataArea)
                                                                                        ))
                    {
                        catVendorCatalogProductReleaseManager.releaseProductToCompany(catVendorProductCandidate,_ecoresProductRecid,companyInfo.DataArea);
                    }
                    else if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
                    {
                        catVendorCatalogProductReleaseManager.releaseProductToCompany(catVendorProductCandidate, _ecoresProductRecid, companyInfo.DataArea);
                    }
                    else
                    {
                        CatVendorCatalogProductPerCompany::createOrUpdate(catVendorProductCandidate.RecId,companyInfo.DataArea,NoYes::No);
                        //Create event log
                        CatVendorCatalogImportEventLog::logEvent(catVendorProductCandidate.CatalogMaintenanceRequest,
                                                                CatImportProcessingMessageType::Info,
                                                                CatVendorCatalogProcessingState::ReleasingApprovedProductNotReleased,
                                                                strfmt("@SYS332606",catVendorProductCandidate.VendorProductCode,companyInfo.DataArea));
                    }
                }
                else
                {
                    CatVendorCatalogProductPerCompany::createOrUpdate(catVendorProductCandidate.RecId,companyInfo.DataArea,NoYes::No);
                }
            }
            else
            {
                CatVendorCatalogProductPerCompany::createOrUpdate(catVendorProductCandidate.RecId,companyInfo.DataArea,NoYes::No);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveImageRelativePath</Name>
				<Source><![CDATA[
    private str resolveImageRelativePath(RefRecId  _catVendorCatalogMaintenanceRequestRecid)
    {
        CatParameters                       catParameters;
        str                                 partyImagePath;
        CatVendorCatalog                    catVendorCatalog;
        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest;

        select VendorCatalog from catVendorCatalogMaintenanceRequest
                where catVendorCatalogMaintenanceRequest.RecId == _catVendorCatalogMaintenanceRequestRecid
            join VendorParty from catVendorCatalog
                where catVendorCatalog.RecId == catVendorCatalogMaintenanceRequest.VendorCatalog;

        select firstonly RootFilePath from catParameters;

        partyImagePath = catParameters.RootFilePath + #BackSlash + int642str(catVendorCatalog.VendorParty) +#ImagesPath+#BackSlash;

        return partyImagePath;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCatVendorReleaseCatalog</Name>
				<Source><![CDATA[
    private void updateCatVendorReleaseCatalog(recId _catVendorProductCandidateRecId)
    {
        CatVendorReleaseCatalog             catVendorReleaseCatalog;
        CatVendorProductCandidate           catVendorProductCandidate;
        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest;

        select firstonly VendorCatalog from catVendorCatalogMaintenanceRequest
        join CatalogMaintenanceRequest from catVendorProductCandidate
            where catVendorCatalogMaintenanceRequest.RecId == catVendorProductCandidate.CatalogMaintenanceRequest
                  && catVendorProductCandidate.RecId == _catVendorProductCandidateRecId;

        update_recordset catVendorReleaseCatalog
        setting IsChangedOrNew = NoYes::No
        where catVendorReleaseCatalog.Catalog == catVendorCatalogMaintenanceRequest.VendorCatalog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates a product that is based on the workflow update action.
    /// </summary>
    /// <param name="_catVendorProductCandidateRecId">
    ///    The record ID of the <c>CatVendorProductCandidate</c> table buffer.
    /// </param>
    public void updateProduct(recId _catVendorProductCandidateRecId)
    {
        EcoResProductCategory               ecoResProductCategory;
        EcoResProductInstanceValue          ecoResProductInstanceValue;
        CatVendorProductCandidate           catVendorProductCandidate;
        EcoResAttributeValue                ecoResAttributeValue;
        CatVendorApprovedProduct            catVendorApprovedProductLog;
        EcoResCategory                      ecoResCategory;
        CatVendProdCandidateAttributeValue  catVendProdCandidateAttributeValue;
        CatVendorProductTextTranslation     catVendorProductTextTranslation;
        EcoResDistinctProduct               ecoResDistinctProduct;
        EcoResValue                         ecoResValue;
        LanguageId                          systemLanguageId = SystemParameters::getSystemLanguageId();
        InventTable                         inventTable;
        InventItemPurchSetup                inventItemPurchSetup;
        catVendorApprovedProductLog = this.getApprovedProduct(_catVendorProductCandidateRecId);
        catVendorProductCandidate = CatVendorProductCandidate::find(_catVendorProductCandidateRecId);

        if (catVendorApprovedProductLog)
        {
            ttsbegin;

            ecoResDistinctProduct = EcoResDistinctProduct::find(catVendorApprovedProductLog.EcoResProduct, true);

            select forupdate ecoResProductCategory
            where ecoResProductCategory.Product == ecoResDistinctProduct.RecId;

            if (ecoResProductCategory.Category != catVendorProductCandidate.Category)
            {
                ecoResProductCategory.Category = catVendorProductCandidate.Category;

                select CategoryHierarchy
                from ecoResCategory
                where ecoResCategory.RecId == catVendorProductCandidate.Category;

                ecoResProductCategory.CategoryHierarchy = ecoResCategory.CategoryHierarchy;
                ecoResProductCategory.update();
            }

            while select catVendProdCandidateAttributeValue
                where catVendProdCandidateAttributeValue.CatVendorProductCandidate == _catVendorProductCandidateRecId
            {
                select Product, RecId
                from ecoResProductInstanceValue
                where ecoResProductInstanceValue.Product == ecoResDistinctProduct.RecId
                    join InstanceValue, Attribute, Value
                from ecoResAttributeValue
                where ecoResAttributeValue.InstanceValue == ecoResProductInstanceValue.RecId
                && ecoResAttributeValue.Attribute == catVendProdCandidateAttributeValue.EcoResAttribute
                    join RecId
                from ecoResValue
                where ecoResValue.RecId == ecoResAttributeValue.Value;

                if (catVendProdCandidateAttributeValue.EcoResAttribute == ecoResAttributeValue.Attribute)
                {
                    this.updateProductAttributeValues(ecoResAttributeValue.Value, catVendProdCandidateAttributeValue);
                }
                else
                {
                    ecoResAttributeValue.InstanceValue = EcoResInstanceValue::find(ecoResProductInstanceValue.RecId).RecId;
                    ecoResAttributeValue.Value = this.insertAttributeValue(catVendProdCandidateAttributeValue);
                    ecoResAttributeValue.Attribute = catVendProdCandidateAttributeValue.EcoResAttribute;
                    ecoResAttributeValue.insert();
                }
            }

            // update all available product translation in all languages.
            while select catVendorProductTextTranslation
                where catVendorProductTextTranslation.ProductCandidate  == _catVendorProductCandidateRecId
            {
                EcoResProductTranslation::createOrUpdateTranslation(ecoResDistinctProduct.RecId,
                                                                    catVendorProductTextTranslation.Name,
                                                                    catVendorProductTextTranslation.Description,
                                                                    catVendorProductTextTranslation.Language);
            }

            // Adding Product images to the product
            this.addImageToProduct(catVendorProductCandidate, ecoResDistinctProduct.RecId);

            // Release product to Legal Entity, which vendor does business with. And this method internally updates the product price
            this.releaseProductToLegalEntity(ecoResDistinctProduct.RecId, _catVendorProductCandidateRecId);

            // IF updating a deleted product then remove the stopped tag on item (Product per company)
            if (catVendorApprovedProductLog.IsDeleted == NoYes::Yes)
            {
                catVendorApprovedProductLog.IsDeleted = NoYes::No;
                catVendorApprovedProductLog.update();
                while select crossCompany ItemId from inventTable
                      where inventTable.Product == catVendorApprovedProductLog.EcoResProduct
                {
                    changecompany(
                                  inventTable.company()
                                  )
                    {
                        inventItemPurchSetup = InventItemPurchSetup::findDefault(inventTable.ItemId, true);
                        if (inventItemPurchSetup)
                        {
                            inventItemPurchSetup.Stopped = NoYes::No;
                            inventItemPurchSetup.update();
                        }
                    }
                }
            }

            ttscommit;
        }
        else
        {
            CatVendorCatalogImportEventLog::logEvent(catVendorProductCandidate.CatalogMaintenanceRequest,
                                                    CatImportProcessingMessageType::Warning,
                                                    CatVendorCatalogProcessingState::ImportingProducts,
                                                    strfmt("@SYS309530",
                                                    catVendorProductCandidate.VendorProductCode)) ;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProductAttributeValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates product attribute values.
    /// </summary>
    /// <param name="_attributeValue">
    ///    A record ID of the <c>EcoResValue</c> table buffer.
    /// </param>
    /// <param name="_catVendProdCandidateAttributeValue">
    ///    A record of the <c>CatVendProdCandidateAttributeValue</c> table buffer.
    /// </param>
    private void updateProductAttributeValues(RefRecId _attributeValue, CatVendProdCandidateAttributeValue _catVendProdCandidateAttributeValue)
    {
        EcoResTextValueTranslation          ecoResTextValueTranslation;
        EcoResDateTimeValue                 ecoResDateTimeValue;
        EcoResCurrencyValue                 ecoResCurrencyValue;
        EcoResBooleanValue                  ecoResBooleanValue;
        EcoResFloatValue                    ecoResFloatValue;
        EcoResTextValue                     ecoResTextValue;
        EcoResIntValue                      ecoResIntValue;
        EcoResValue                         ecoResValue;

        CatVendorTextValueTranslation       catVendorTextValueTranslation;
        CatVendorDateTimeValue              catVendorDateTimeValue;
        CatVendorCurrencyValue              catVendorCurrencyValue;
        CatVendorBooleanValue               catVendorBooleanValue;
        CatVendorFloatValue                 catVendorFloatValue;
        CatVendorTextValue                  catVendorTextValue;
        CatVendorIntValue                   catVendorIntValue;
        RefRecId                            ecoResValueRecId;
        ecoResValue = EcoResValue::find(_attributeValue);
        ttsbegin;
        switch (ecoResValue.getInstanceRelationType())
        {
            case tablestr(EcoResTextValue) :
                select TextValue from  ecoResTextValue
                    where ecoResTextValue.RecId == _attributeValue;
                catVendorTextValue = _catVendProdCandidateAttributeValue as CatVendorTextValue;

                ecoResValueRecId = ecoResTextValue.RecId;

                update_recordset ecoResTextValueTranslation
                setting
                    TextValue = catVendorTextValueTranslation.TextValue
                join TextValue from catVendorTextValueTranslation
                    where ecoResTextValueTranslation.Language == catVendorTextValueTranslation.Language
                       && ecoResTextValueTranslation.TextValueTable == ecoResTextValue.RecId
                       && catVendorTextValueTranslation.TextValueTable == catVendorTextValue.RecId;

                insert_recordset ecoResTextValueTranslation (TextValue,Language,TextValueTable)
                select TextValue,Language,ecoResValueRecId
                    from catVendorTextValueTranslation
                        where catVendorTextValueTranslation.TextValueTable == catVendorTextValue.RecId
                notexists join ecoResTextValueTranslation
                        where ecoResTextValueTranslation.Language == catVendorTextValueTranslation.Language
                       && ecoResTextValueTranslation.TextValueTable == ecoResTextValue.RecId;

                break;

            case tablestr(EcoResBooleanValue) :
                select forupdate ecoResBooleanValue where ecoResBooleanValue.RecId == _attributeValue;
                catVendorBooleanValue = _catVendProdCandidateAttributeValue as CatVendorBooleanValue;
                ecoResBooleanValue.BooleanValue = catVendorBooleanValue.BooleanValue;
                ecoResBooleanValue.update();
                break;

            case tablestr(EcoResFloatValue) :
                select forupdate ecoResFloatValue where ecoResFloatValue.RecId == _attributeValue;
                catVendorFloatValue = _catVendProdCandidateAttributeValue as CatVendorFloatValue;
                ecoResFloatValue.FloatValue = catVendorFloatValue.FloatValue;
                ecoResFloatValue.FloatUnitOfMeasure = catVendorFloatValue.FloatUnitOfMeasure;
                ecoResFloatValue.update();
                break;

            case tablestr(EcoResIntValue) :
                select forupdate ecoResIntValue where ecoResIntValue.RecId == _attributeValue;
                catVendorIntValue = _catVendProdCandidateAttributeValue as CatVendorIntValue;
                ecoResIntValue.IntValue = catVendorIntValue.IntValue;
                ecoResIntValue.IntUnitOfMeasure = catVendorIntValue.IntUnitOfMeasure;
                ecoResIntValue.update();
                break;

            case tablestr(EcoResDateTimeValue) :
                select forupdate ecoResDateTimeValue where ecoResDateTimeValue.RecId == _attributeValue;
                catVendorDateTimeValue = _catVendProdCandidateAttributeValue as CatVendorDateTimeValue;
                ecoResDateTimeValue.DateTimeValue = catVendorDateTimeValue.DateTimeValue;
                ecoResDateTimeValue.update();
                break;

            case tablestr(EcoResCurrencyValue) :
                select forupdate ecoResCurrencyValue where ecoResCurrencyValue.RecId == _attributeValue;
                catVendorCurrencyValue = _catVendProdCandidateAttributeValue as CatVendorCurrencyValue;
                ecoResCurrencyValue.CurrencyValue = catVendorCurrencyValue.CurrencyValue;
                ecoResCurrencyValue.CurrencyCode = catVendorCurrencyValue.CurrencyCode;
                ecoResCurrencyValue.update();
                break;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProductForRetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a product to product master to product variant that is based on a workflow update action.
    /// </summary>
    /// <param name="_catVendorProductCandidateRecId">
    /// The record ID of a <c>CatVendorProductCandidate</c> record.
    /// </param>
    public void updateProductForRetail(recId _catVendorProductCandidateRecId)
    {
        EcoResProductCategory               ecoResProductCategory;
        EcoResProductInstanceValue          ecoResProductInstanceValue;
        CatVendorProductCandidate           catVendorProductCandidate;
        EcoResAttributeValue                ecoResAttributeValue;
        CatVendorApprovedProduct            catVendorApprovedProductLog;
        EcoResCategory                      ecoResCategory;
        CatVendProdCandidateAttributeValue  catVendProdCandidateAttributeValue;
        CatVendorProductTextTranslation     catVendorProductTextTranslation;
        EcoResProduct                       ecoResProduct;
        EcoResValue                         ecoResValue;
        LanguageId                          systemLanguageId = SystemParameters::getSystemLanguageId();
        InventTable                         inventTable;
        InventItemPurchSetup                inventItemPurchSetup;
        InventItemSalesSetup                inventItemSalesSetup;

        catVendorApprovedProductLog = this.getApprovedProductForRetail(_catVendorProductCandidateRecId);
        catVendorProductCandidate = CatVendorProductCandidate::find(_catVendorProductCandidateRecId);

        if (catVendorApprovedProductLog)
        {
            ttsbegin;

            // Find the product
            ecoResProduct = EcoResProduct::find(catVendorApprovedProductLog.EcoResProduct, true);

            // Update product category and product attribute for distinct product or product master (but not for product variant)
            if (catVendorProductCandidate.ProductSubtype != EcoResProductSubtype::ProductVariant)
            {
                EcoResCategoryHierarchyRole ecoResCategoryHierarchyRole;

                select firstOnly forupdate ecoResProductCategory
                    join NamedCategoryHierarchyRole, CategoryHierarchy from ecoResCategoryHierarchyRole
                    where ecoResCategoryHierarchyRole.CategoryHierarchy == ecoResProductCategory.CategoryHierarchy
                        && ecoResProductCategory.Product == ecoResProduct.RecId;

                if (ecoResCategoryHierarchyRole.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::Procurement
                    && ecoResProductCategory.Category != catVendorProductCandidate.Category)
                {
                    ecoResProductCategory.Category = catVendorProductCandidate.Category;

                    ecoResCategory = EcoResCategory::find(catVendorProductCandidate.Category);

                    ecoResProductCategory.CategoryHierarchy = ecoResCategory.CategoryHierarchy;
                    ecoResProductCategory.update();
                }

                while select catVendProdCandidateAttributeValue
                    where catVendProdCandidateAttributeValue.CatVendorProductCandidate == _catVendorProductCandidateRecId
                {
                    select Product, RecId
                    from ecoResProductInstanceValue
                    where ecoResProductInstanceValue.Product == ecoResProduct.RecId
                        join InstanceValue, Attribute, Value
                    from ecoResAttributeValue
                    where ecoResAttributeValue.InstanceValue == ecoResProductInstanceValue.RecId
                    && ecoResAttributeValue.Attribute == catVendProdCandidateAttributeValue.EcoResAttribute
                        join RecId
                    from ecoResValue
                    where ecoResValue.RecId == ecoResAttributeValue.Value;

                    if (catVendProdCandidateAttributeValue.EcoResAttribute == ecoResAttributeValue.Attribute)
                    {
                        this.updateProductAttributeValues(ecoResAttributeValue.Value, catVendProdCandidateAttributeValue);
                    }
                    else
                    {
                        ecoResAttributeValue.InstanceValue = EcoResInstanceValue::find(ecoResProductInstanceValue.RecId).RecId;
                        ecoResAttributeValue.Value = this.insertAttributeValue(catVendProdCandidateAttributeValue);
                        ecoResAttributeValue.Attribute = catVendProdCandidateAttributeValue.EcoResAttribute;
                        ecoResAttributeValue.insert();
                    }
                }
            }

            // update all available product translation in all languages.
            while select catVendorProductTextTranslation
                where catVendorProductTextTranslation.ProductCandidate  == _catVendorProductCandidateRecId
            {
                EcoResProductTranslation::createOrUpdateTranslation(ecoResProduct.RecId,
                                                                    catVendorProductTextTranslation.Name,
                                                                    catVendorProductTextTranslation.Description,
                                                                    catVendorProductTextTranslation.Language);
            }

            // Adding Product images to the product
            this.addImageToProduct(catVendorProductCandidate, ecoResProduct.RecId);

            // Release product to Legal Entity, which vendor does business with. And this method internally updates the product price
            if (catVendorProductCandidate.ProductSubtype != EcoResProductSubtype::ProductVariant)
            {
                this.releaseProductToLegalEntity(ecoResProduct.RecId, _catVendorProductCandidateRecId);
            }

            // IF updating a deleted product then remove the stopped tag on item (Product per company)
            if (catVendorApprovedProductLog.IsDeleted == NoYes::Yes)
            {
                catVendorApprovedProductLog.IsDeleted = NoYes::No;
                catVendorApprovedProductLog.update();

                // Update InventItemPurchSetup
                if (catVendorProductCandidate.ProductSubtype != EcoResProductSubtype::ProductVariant)
                {
                    while select crossCompany ItemId from inventTable
                          where inventTable.Product == catVendorApprovedProductLog.EcoResProduct
                    {
                        changecompany(inventTable.company())
                        {
                            inventItemPurchSetup = InventItemPurchSetup::findDefault(inventTable.ItemId, true);
                            if (inventItemPurchSetup)
                            {
                                inventItemPurchSetup.Stopped = NoYes::No;
                                inventItemPurchSetup.update();
                            }

                            inventItemSalesSetup = InventItemSalesSetup::findDefault(inventTable.ItemId, true);
                            if (inventItemSalesSetup)
                            {
                                inventItemSalesSetup.Stopped = NoYes::No;
                                inventItemSalesSetup.update();
                            }
                        }
                    }
                }
            }

            ttscommit;
        }
        else
        {
            CatVendorCatalogImportEventLog::logEvent(catVendorProductCandidate.CatalogMaintenanceRequest,
                                                    CatImportProcessingMessageType::Warning,
                                                    CatVendorCatalogProcessingState::ImportingProducts,
                                                    strfmt("@SYS309530",
                                                    catVendorProductCandidate.VendorProductCode)) ;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>