<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostingVersionCopyItemPrice</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CostingVersionCopyItemPrice</c> class is used to bulk copy item prices between costing
///    versions.
/// </summary>
class CostingVersionCopyItemPrice extends CostingVersionCopy
{
    InventItemCostingType   costingType;
    Factor                  miscFactor;
    MarkupAmount            miscMarkup;
    NoYes                   excludeCalculated;

    MarkupAmount            miscMarkupSec;

    DialogField             dialogFieldCostingType;
    DialogField             dialogFieldMiscFactor;
    DialogField             dialogFieldMiscMarkup;
    DialogField             dialogFieldExcludeCalculated;

    DialogField             dialogFieldMiscMarkupSec;

    #DEFINE.CurrentVersion(11)
    #LOCALMACRO.CurrentList
        costingType,
        miscFactor,
        miscMarkup,
        excludeCalculated,
        miscMarkupSec
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Bulk copies the prices between costing versions according to the selected parameters.
    /// </summary>
    protected void copy()
    {
        InventItemPriceSim          newInventItemPriceSim;
        InventItemPricesFiltered    inventItemPrices;
        InventItemPricesFiltered    oldInventItemPrices;

        CostingVersion              dsToCostingVersion = CostingVersion::find(toCostingVersion);

        boolean skipLine()
        {
            if (useFromVersionAsSource)
            {
                if (!includeActive && inventItemPrices.TableSourceId == tableNum(InventItemPrice))
                {
                    return true;
                }
            }
            else
            {
                if (inventItemPrices.TableSourceId == tableNum(InventItemPriceSim)
                 || ( costingType != InventItemCostingType::Default
                   && InventItemPrice::findRecId(inventItemPrices.RecId).CostingType != costingType ))
                {
                    return true;
                }
            }

            if (oldInventItemPrices.ItemId      == inventItemPrices.ItemId          &&
                oldInventItemPrices.InventDimId == inventItemPrices.InventDimId     &&
                oldInventItemPrices.PriceType   == inventItemPrices.PriceType)
            {
                // If 'asPerDate' active, we only need to include one price per the combination of item, inventdim and pricemodel
                if (asPerDate != dateNull())
                {
                    return true;
                }
                else
                {
                    // If 'asPerDate' is not active, we need to include one price per day per the combination of item, inventdim and pricemodel
                    if (oldInventItemPrices.ActivationDate == inventItemPrices.ActivationDate)
                    {
                        return true;
                    }
                }
            }

            return false;
        }

        QueryBuildDataSource qbds = queryRun.query().dataSourceTable(tableNum(InventItemPricesFiltered));

        if (useFromVersionAsSource)
        {
            qbds.findRange(fieldNum(InventItemPricesFiltered, VersionId)).value(queryValue(fromCostingVersion));
        }

        if (excludeCalculated)
        {
            qbds.addRange(fieldNum(InventItemPricesFiltered, PriceCalcId)).value(SysQuery::valueEmptyString());
        }

        if (changeSite)
        {
            QueryBuildDataSource qbdsInventDim = queryRun.query().dataSourceTable(tableNum(InventDim));
            if (!qbdsInventDim)
            {
                qbdsInventDim = qbds.addDataSource(tablenum(InventDim));
                qbdsInventDim.joinMode(JoinMode::ExistsJoin);
                qbdsInventDim.addLink(fieldNum(InventItemPricesFiltered, InventDimId), fieldNum(InventDim, InventDimId));
            }

            SysQuery::findOrCreateRange(qbdsInventDim, fieldNum(InventDim, InventSiteId)).value(queryValue(fromSiteId));
        }

        qbds.sortClear();
        qbds.addSortField(fieldNum(InventItemPricesFiltered, ItemId));
        qbds.addSortField(fieldNum(InventItemPricesFiltered, InventDimId));
        qbds.addSortField(fieldNum(InventItemPricesFiltered, PriceType));
        qbds.addSortField(fieldNum(InventItemPricesFiltered, ActivationDate), SortOrder::Descending);
        qbds.addSortField(fieldNum(InventItemPricesFiltered, TableSourceId),
                          (tableNum(InventItemPriceSim) > tableNum(InventItemPrice)) ? SortOrder::Descending : SortOrder::Ascending);

        if (asPerDate != dateNull())
        {
            qbds.addRange(fieldNum(InventItemPricesFiltered,ActivationDate)).value(queryValue(dateNull())+'..'+queryValue(asPerDate));
        }

        Set inventItemPriceSimKeySet = new Set(Types::Container);
        while (queryRun.next())
        {
            inventItemPrices  = queryRun.get(tableNum(InventItemPricesFiltered));

            if (skipLine())
            {
                continue;
            }

            newInventItemPriceSim.initFromInventItemPrices(inventItemPrices);
            if (!newInventItemPriceSim.isCostingVersionCompatible(dsToCostingVersion))
            {
                continue;
            }

            newInventItemPriceSim.FromDate          = this.calcFromDate(newInventItemPriceSim.FromDate);
            newInventItemPriceSim.Price             = this.calcPrice(inventItemPrices.Price, priceFactor, priceMarkup);
            newInventItemPriceSim.Markup            = this.calcPrice(inventItemPrices.Markup, miscFactor, miscMarkup);

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                newInventItemPriceSim.PriceSecCur_RU    = this.calcPrice(inventItemPrices.PriceSecCur_RU,  priceFactor, priceMarkupSec);
                newInventItemPriceSim.MarkupSecCur_RU   = this.calcPrice(inventItemPrices.MarkupSecCur_RU, miscFactor,  miscMarkupSec);
            }
            newInventItemPriceSim.PriceCalcId       = '';

            newInventItemPriceSim.initFromCostingVersion(dsToCostingVersion, changeSite ? toSiteId : '');

            container key = [newInventItemPriceSim.ItemId, newInventItemPriceSim.InventDimId, newInventItemPriceSim.VersionId, newInventItemPriceSim.FromDate, newInventItemPriceSim.PriceType];
            if (!inventItemPriceSimKeySet.in(key))
            {
                newInventItemPriceSim.insert();
                inventItemPriceSimKeySet.add(key);
            }

            oldInventItemPrices.data(inventItemPrices);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogBuildSection_ChangePrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a group to the dialog that represents the variables related to changing the amounts.
    /// </summary>
    /// <param name="_dialog">
    ///    The <c>Dialog</c> object that will display the settings of the bulk copy.
    /// </param>
    protected void dialogBuildSection_ChangePrice(Dialog _dialog /*in-out*/)
    {
        DialogGroup dialogGroupPrice, dialogGroupMisc;

        // Change in price
        dialogGroupPrice = _dialog.addGroup();
        dialogGroupPrice.columns(2);
        dialogGroupPrice.frameType(FormFrameType::None);

        _dialog.addGroup("@SYS117848", dialogGroupPrice);

            // Amount = Amount *
        dialogFieldPriceFactor = _dialog.addFieldValue(extendedTypeStr(Factor), priceFactor, "@SYS22313");
            // +
        dialogFieldPriceMarkup = _dialog.addFieldValue(extendedTypeStr(MarkupAmount), priceMarkup,' + ');

        // Change in misc. charges
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            _dialog.addGroup("@SYS29141", dialogGroupPrice);
            _dialog.addText(' ');
            dialogFieldPriceMarkupSec = _dialog.addFieldValue(extendedTypeStr(MarkupAmount), priceMarkupSec, ' + ', "@SYS53088");
        }
        dialogGroupMisc = _dialog.addGroup();
        dialogGroupMisc.columns(2);
        dialogGroupMisc.frameType(FormFrameType::None);

        _dialog.addGroup("@SYS117849", dialogGroupMisc);
            // Amount = Amount *
        dialogFieldMiscFactor = _dialog.addFieldValue(extendedTypeStr(Factor), miscFactor, "@SYS22313");
            // +
        dialogFieldMiscMarkup = _dialog.addFieldValue(extendedTypeStr(MarkupAmount), miscMarkup,' + ');

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            _dialog.addGroup("@SYS29141", dialogGroupMisc);
            _dialog.addText(' ');
            dialogFieldMiscMarkupSec = _dialog.addFieldValue(extendedTypeStr(MarkupAmount), miscMarkupSec, ' + ', "@SYS53088");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogBuildSection_SelectionCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a group to the dialog that represents the variables related to changing the selection criteria.
    /// </summary>
    /// <param name="_dialog">
    ///    The <c>Dialog</c> object that will display the settings of the bulk copy.
    /// </param>
    protected void dialogBuildSection_SelectionCriteria(Dialog _dialog /*in-out*/)
    {
        // Exclude calculated prices
        dialogFieldExcludeCalculated = _dialog.addFieldValue(enumStr(NoYes), excludeCalculated, "@SYS340361");

        // Copy from version
        dialogGroupVersion = _dialog.addGroup("@SYS117843");
        dialogGroupVersion.frameOptionButton(FormFrameOptionButton::Radio);
        dialogGroupVersion.optionValue(useFromVersionAsSource);
            // Include active
        dialogFieldIncludeActive = _dialog.addFieldValue(enumStr(NoYes), includeActive, "@SYS117844");
        // Copy from active
        dialogGroupActive = _dialog.addGroup("@SYS117845");
        dialogGroupActive.frameOptionButton(FormFrameOptionButton::Radio);
        dialogGroupActive.optionValue(!useFromVersionAsSource);
            // Costing type
        dialogFieldCostingType = _dialog.addFieldValue(enumStr(InventItemCostingType), costingType, "@SYS111755");
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the values from the dialog fields.
    /// </summary>
    /// <returns>
    ///    true if the values are read successfully; otherwise, false.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret = super();

        useFromVersionAsSource  = dialogGroupVersion.optionValue() == 1;
        costingType             = dialogFieldCostingType.value();
        miscFactor              = dialogFieldMiscFactor.value();
        miscMarkup              = dialogFieldMiscMarkup.value();
        excludeCalculated       = dialogFieldExcludeCalculated.value();

        if (dialogFieldMiscMarkupSec)
            miscMarkupSec           = dialogFieldMiscMarkupSec.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found when calling the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        super();

        Query query = new Query();
        query.addDataSource(tableNum(InventItemPricesFiltered));
        query.dataSourceTable(tableNum(InventItemPricesFiltered)).addRange(fieldNum(InventItemPricesFiltered, ItemId));
        query.dataSourceTable(tableNum(InventItemPricesFiltered)).addRange(fieldNum(InventItemPricesFiltered, VersionId)).status(RangeStatus::Hidden);

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        miscFactor = 1;
        excludeCalculated = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        container   base;
        boolean     ret;
        Integer     version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = _packedClass;
                ret = super(base);
                break;

            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the values set up in this object.
    /// </summary>
    /// <param name="_calledFrom">
    ///     The object that initiated the bulk copy.
    /// </param>
    /// <returns>
    ///     true if the validation is successful; otherwise, false.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        CostingVersion      dsFromCostingVersion = CostingVersion::find(fromCostingVersion);
        CostingVersion      dsToCostingVersion   = CostingVersion::find(toCostingVersion);

        boolean ret = super(_calledFrom);

        if (!ret)
            return false;

        if (dsToCostingVersion.CostingType == CostingVersionCostingType::Conversion)
        {
            InventStdCostConv inventStdCostConv = InventStdCostConv::findCostingVersion(toCostingVersion);
            if (inventStdCostConv.Status != InventStdCostConvStatus::Planned)
            {
                return checkFailed(strFmt("@SYS120843", dsToCostingVersion.VersionId, inventStdCostConv.Status));
            }
        }

        if (dsToCostingVersion.CostingType == CostingVersionCostingType::Standard
         && useFromVersionAsSource
         && dsFromCostingVersion.CostingType == CostingVersionCostingType::Normal)
        {
            return checkFailed(strFmt("@SYS120286", CostingVersionCostingType::Normal, dsToCostingVersion.CostingType));
        }

        if ((dsToCostingVersion.CostingType == CostingVersionCostingType::Standard
            || dsToCostingVersion.CostingType == CostingVersionCostingType::Conversion)
            && !useFromVersionAsSource
            && costingType != InventItemCostingType::Standard
            && costingType != InventItemCostingType::Last)
        {
            return checkFailed(strFmt("@SCM:AllowStandardCostAndLastPriceCopied", dsToCostingVersion.CostingType, InventItemCostingType::Standard, InventItemCostingType::Last));
        }

        if (asPerDate != dateNull())
        {
            if (this.queryRun().query().dataSourceTable(tableNum(InventItemPricesFiltered), 1).findRange(fieldNum(InventItemPricesFiltered, ActivationDate)))
            {
                return checkFailed(strFmt("@SYS117037", fieldStr(InventItemPricesFiltered, ActivationDate)));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CostingVersionCopyItemPrice construct()
    {
        return new CostingVersionCopyItemPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS309745";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        CostingVersionCopy costingVersionCopy = CostingVersionCopyItemPrice::construct();
        costingVersionCopy.getLast();

        if (args == null
         || args.record().RecId == 0
         || args.dataset() != tableNum(CostingVersion))
        {
            throw error(Error::missingFormActiveBuffer(CostingVersionCopyItemPrice::description(), tableStr(CostingVersion)));
        }

        CostingVersion costingVersion = args.record();
        costingVersionCopy.parmFromCostingVersion(costingVersion.VersionId);

        if (costingVersionCopy.prompt())
        {
            costingVersionCopy.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>