<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchaseOrderResponseConsumeLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class handles the consumption of individual lines from the vendor response to the purchase order.
/// </summary>
public class PurchaseOrderResponseConsumeLine extends PurchaseOrderResponseConsume
{
    MultiSelectionHelper selectionHelper;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>consumePurchaseOrderResponse</Name>
				<Source><![CDATA[
    protected void consumePurchaseOrderResponse()
    {
        this.consumeSelectedPurchaseOrderResponseLineToPurchaseOrder();

        this.printInfoMessages();
    }

]]></Source>
			</Method>
			<Method>
				<Name>consumeSelectedPurchaseOrderResponseLineToPurchaseOrder</Name>
				<Source><![CDATA[
    private void consumeSelectedPurchaseOrderResponseLineToPurchaseOrder()
    {
        PurchaseOrderResponseLineAllVersions selectedResponseLine = selectionHelper.getFirst();
        PurchaseOrderResponseLine responseLine;
        PurchLine purchLine;

        ttsbegin;
        while (selectedResponseLine)
        {
            responseLine = PurchaseOrderResponseLine::find(selectedResponseLine.RecId, true);
            if (selectedResponseLine.ConsumptionState == ConsumptionState::NotConsumed)
            {
                // find the corresponding purchLine even if it was deleted
                select firstonly forupdate purchLine
                    where purchLine.RecId == selectedResponseLine.PurchLine;
                this.validateAndConsumeResponseLine(purchLine, responseLine);
            }
            selectedResponseLine = selectionHelper.getNext();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfSelectedPurchLinesRequireUpdate</Name>
				<Source><![CDATA[
    private boolean checkIfSelectedPurchLinesRequireUpdate()
    {
        PurchaseOrderResponseLineAllVersions selectedResponseLine = selectionHelper.getFirst();
        PurchLine purchLine;
        while (selectedResponseLine)
        {
            purchLine = PurchLine::findRecId(selectedResponseLine.PurchLine);
            if (selectedResponseLine.ConsumptionState == ConsumptionState::NotConsumed
                && purchLine
                && this.checkIfDifferent(purchLine, selectedResponseLine))
            {
                return true;
            }
            selectedResponseLine = selectionHelper.getNext();
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfDifferent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the <c>PurchLine</c> record is different from its related response line.
    /// </summary>
    /// <param name = "_purchLine">
    /// The given <c>PurchLine</c> record.
    /// </param>
    /// <param name = "_selectedResponseLine">
    /// The given <c>PurchaseOrderResponseLineAllVersions</c> record.
    /// </param>
    /// <returns>
    /// true, if the <c>PurchLine</c> record is different than its related response line; otherwise, false.
    /// </returns>
    protected boolean checkIfDifferent(PurchLine _purchLine, PurchaseOrderResponseLineAllVersions _selectedResponseLine)
    {
        return ((_purchLine.PurchQty != _selectedResponseLine.PurchQty) || (_purchLine.ConfirmedDlv != _selectedResponseLine.ConfirmedDlv));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateResponseConsumptionStateToConsumed</Name>
				<Source><![CDATA[
    protected void updateResponseConsumptionStateToConsumed()
    {
        PurchaseOrderResponseLineAllVersions selectedResponseLine = selectionHelper.getFirst();
        ttsbegin;
        while (selectedResponseLine)
        {
            if (selectedResponseLine.ConsumptionState == ConsumptionState::NotConsumed)
            {
                this.updateResponseLineConsumptionState(PurchaseOrderResponseLine::find(selectedResponseLine.RecId, true), ConsumptionState::Consumed);
            }
            selectedResponseLine = selectionHelper.getNext();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSelectionHelper</Name>
				<Source><![CDATA[
    private void initSelectionHelper(FormDataSource _responseLineDataSource)
    {
        selectionHelper = MultiSelectionHelper::construct();
        selectionHelper.parmDatasource(_responseLineDataSource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>PurchaseOrderResponseConsume</c> for the lines consumption and initializes it with the passed in <c>PurchTable</c>.
    /// </summary>
    /// <param name = "_purchTable"><c>PurchTable</c> record.</param>
    /// <param name = "_responseLineDataSource"><c>PurchaseOrderResponseLineAllVersions</c> form datasource.</param>
    /// <returns>Instance of <c>PurchaseOrderResponseConsumeLine</c>.</returns>
    public static PurchaseOrderResponseConsumeLine construct(PurchTable _purchTable, FormDataSource _responseLineDataSource)
    {
        PurchaseOrderResponseConsumeLine purchaseOrderResponseConsumeLine = new PurchaseOrderResponseConsumeLine();
        purchaseOrderResponseConsumeLine.parmPurchTable(_purchTable);
        purchaseOrderResponseConsumeLine.initSelectionHelper(_responseLineDataSource);
        purchaseOrderResponseConsumeLine.isPurchTableUpdateRequired = false;
        purchaseOrderResponseConsumeLine.isPurchLineUpdateRequired = purchaseOrderResponseConsumeLine.checkIfSelectedPurchLinesRequireUpdate();

        return purchaseOrderResponseConsumeLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>