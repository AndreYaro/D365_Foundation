<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReleaseUpdateDB70_FixedAssetSetupDepBookRemovalDepBookTableDerived</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Upgrades data from <c>AssetDepBookTableDerived</c> to <c>AssetBookTableDerived</c> table.
/// </summary>
class ReleaseUpdateDB70_FixedAssetSetupDepBookRemovalDepBookTableDerived extends ReleaseUpdateDB70_FixedAssets
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preSyncUpgradeAssetDepBookTableDerived</Name>
				<Source><![CDATA[
    /// <summary>
    /// Move <c>AssetDepBookTableDerived</c> data into a temporary table.
    /// </summary>
    [UpgradeScriptDescriptionAttribute("@FixedAssets:FA_MessageDeveloper_AssetDepBookTableUpgrade"),
     UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PreSyncUpdate),
     UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::SharedScript),
     UpgradeDependsOnModuleAttribute(classStr(ReleaseUpdateDB70_FixedAssetSetupDepBookRemovalDepBookTable),methodStr(ReleaseUpdateDB70_FixedAssetSetupDepBookRemovalDepBookTable, preSyncUpgradeAssetDepBookTable)),
     UpgradeScriptTableAttribute('AssetDepBookTableDerived', false, true, false, false)
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void preSyncUpgradeAssetDepBookTableDerived()
    {
        // Drop the AssetDepBookTableDerivedUpgradeTmp table if it exists.
        this.executeSqlStatement(this.getSQLDropAssetDepBookTableDerivedUpgradeTmp());

        // Create temp upgrade table.
        this.executeSqlStatement(this.getSQLCreateAssetDepBookTableDerivedUpgradeTmp());

        // Move AssetDepBookTableDerived rows to temp table.
        this.executeSqlStatement(this.getSQLInsertAssetDepBookTableDerivedUpgradeTmp());
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSyncUpgradeAssetDepBookTableDerived</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the <c>AssetDepBookTableDerived</c> data from the temporary table into <c>AssetBookTableDerived</c> table.
    /// </summary>
    [UpgradeScriptDescriptionAttribute("@FixedAssets:FA_MessageDeveloper_AssetDepBookTableUpgrade"),
     UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PostSyncUpdate),
     UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::SharedScript),
     UpgradeDependsOnModuleAttribute(classStr(ReleaseUpdateDB70_FixedAssetSetupDepBookRemovalDepBookTable), methodStr(ReleaseUpdateDB70_FixedAssetSetupDepBookRemovalDepBookTable, postSyncUpgradeAssetDepBookTable)),
     UpgradeScriptTableAttribute(tableStr(AssetBookTableDerived), true, true, false, false),
     UpgradeScriptTableAttribute('AssetDepBookTableDerived', false, true, false, false)
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void postSyncUpgradeAssetDepBookTableDerived()
    {
        // Move the data into the AssetBookTableDerived from the AssetDepBookTableDerivedUpgradeTmp table
        this.executeSqlStatement(this.getSQLInsertAssetBookTableDerived());

        // drop temporary upgrade table
        this.executeSqlStatement(this.getSQLDropAssetDepBookTableDerivedUpgradeTmp());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLDropAssetDepBookTableDerivedUpgradeTmp</Name>
				<Source><![CDATA[
    private str getSQLDropAssetDepBookTableDerivedUpgradeTmp()
    {
        str sqlStatement = @"
            IF OBJECT_ID ( 'dbo.ASSETDEPBOOKTABLEDERIVEDUPGRADETMP', 'U') IS NOT NULL
                DROP TABLE ASSETDEPBOOKTABLEDERIVEDUPGRADETMP";

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLCreateAssetDepBookTableDerivedUpgradeTmp</Name>
				<Source><![CDATA[
    private str getSQLCreateAssetDepBookTableDerivedUpgradeTmp()
    {
        str sqlStatement = @"
            IF OBJECT_ID ( 'dbo.[ASSETDEPBOOKTABLEDERIVEDUPGRADETMP]', 'U') IS NULL
                CREATE TABLE [dbo].[ASSETDEPBOOKTABLEDERIVEDUPGRADETMP](
                    [ASSETTRANSTYPE] [int] NOT NULL,
                    [BOOKID] [nvarchar](10) NOT NULL,
                    [DEPRECIATIONBOOKID] [nvarchar](10) NOT NULL,
                    [DATAAREAID] [nvarchar](4) NOT NULL,
                    [PARTITION] [bigint] NOT NULL,
                 CONSTRAINT [I_4760BOOKTABLEDERIVEDIDX] PRIMARY KEY CLUSTERED
                (
                    [PARTITION] ASC,
                    [DATAAREAID] ASC,
                    [BOOKID] ASC,
                    [DEPRECIATIONBOOKID] ASC,
                    [ASSETTRANSTYPE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                ";

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLInsertAssetDepBookTableDerivedUpgradeTmp</Name>
				<Source><![CDATA[
    private str getSQLInsertAssetDepBookTableDerivedUpgradeTmp()
    {
        str sqlStatement = @"
            INSERT INTO [dbo].[ASSETDEPBOOKTABLEDERIVEDUPGRADETMP]
                       ([ASSETTRANSTYPE]
                       ,[BOOKID]
                       ,[DEPRECIATIONBOOKID]
                       ,[DATAAREAID]
                       ,[PARTITION])
                 SELECT
                       [ASSETTRANSTYPE]
                       ,[BOOKID]
                       ,[DEPRECIATIONBOOKID]
                       ,[DATAAREAID]
                       ,[PARTITION]
                    FROM [dbo].[ASSETDEPBOOKTABLEDERIVED]
                    WHERE NOT EXISTS
                        (SELECT RECID FROM [dbo].[ASSETDEPBOOKTABLEDERIVEDUPGRADETMP]
                        WHERE [ASSETDEPBOOKTABLEDERIVEDUPGRADETMP].[BOOKID] = [ASSETDEPBOOKTABLEDERIVED].[BOOKID]
                            AND [ASSETDEPBOOKTABLEDERIVEDUPGRADETMP].[ASSETTRANSTYPE] = [ASSETDEPBOOKTABLEDERIVED].[ASSETTRANSTYPE]
                            AND [ASSETDEPBOOKTABLEDERIVEDUPGRADETMP].[DEPRECIATIONBOOKID] = [ASSETDEPBOOKTABLEDERIVED].[DEPRECIATIONBOOKID]
                            AND [ASSETDEPBOOKTABLEDERIVEDUPGRADETMP].[DATAAREAID] = [ASSETDEPBOOKTABLEDERIVED].[DATAAREAID]
                            AND [ASSETDEPBOOKTABLEDERIVEDUPGRADETMP].[PARTITION] = [ASSETDEPBOOKTABLEDERIVED].[PARTITION])
        ";

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLInsertAssetBookTableDerived</Name>
				<Source><![CDATA[
    private str getSQLInsertAssetBookTableDerived()
    {
        str sqlStatement = @"
            INSERT INTO [dbo].[ASSETBOOKTABLEDERIVED]
                       ([ASSETTRANSTYPE]
                       ,[BOOKID]
                       ,[BOOKIDDERIVED]
                       ,[DATAAREAID]
                       ,[PARTITION])
                 SELECT
                       [ASSETTRANSTYPE]
                       ,[BOOKID]
                       ,[DEPRECIATIONBOOKID]
                       ,[DATAAREAID]
                       ,[PARTITION]
                    FROM [dbo].[ASSETDEPBOOKTABLEDERIVEDUPGRADETMP]
                    WHERE NOT EXISTS
                        (SELECT RECID FROM [dbo].[ASSETBOOKTABLEDERIVED]
                        WHERE [ASSETBOOKTABLEDERIVED].[BOOKID] = [ASSETDEPBOOKTABLEDERIVEDUPGRADETMP].[BOOKID]
                            AND [ASSETBOOKTABLEDERIVED].[ASSETTRANSTYPE] = [ASSETDEPBOOKTABLEDERIVEDUPGRADETMP].[ASSETTRANSTYPE]
                            AND [ASSETBOOKTABLEDERIVED].[BOOKIDDERIVED] = [ASSETDEPBOOKTABLEDERIVEDUPGRADETMP].[DEPRECIATIONBOOKID]
                            AND [ASSETBOOKTABLEDERIVED].[DATAAREAID] = [ASSETDEPBOOKTABLEDERIVEDUPGRADETMP].[DATAAREAID]
                            AND [ASSETBOOKTABLEDERIVED].[PARTITION] = [ASSETDEPBOOKTABLEDERIVEDUPGRADETMP].[PARTITION])
                ";

        return sqlStatement;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>