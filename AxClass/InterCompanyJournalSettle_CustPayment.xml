<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InterCompanyJournalSettle_CustPayment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InterCompanyJournalSettle_CustPayment</c> class creates settlements for the accounts
///    receivable intercompany payments that are posted from ledger journals (daily or accounts payable
///    payments).
/// </summary>
class InterCompanyJournalSettle_CustPayment
{
    int                 invoiceConLen;
    container           invoiceVendCon;
    container           dateVendCon;
    container           amountVendCon;

    LedgerJournalTrans  ledgerJournalTransCustPaym;
    LedgerJournalTrans  ledgerJournalTransVendPaym;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createCustSettlement</Name>
				<Source><![CDATA[
        void createCustSettlement()
    {
        CustTrans           custTrans;
        CustTransOpen       custTransOpen;
        SpecTransManager    specTransManager;
        int                 i;
        AmountCur           invoiceAmount;
        DiscGraceDays       discGraceDays;
        InvoiceId           invoiceId;
        DocumentDate        documentDate;
        AmountCur           amountCur;

        discGraceDays = CustPaymModeTable::find(ledgerJournalTransCustPaym.PaymMode).DiscGraceDays;

        specTransManager = SpecTransManager::newFromSpec(ledgerJournalTransCustPaym, false);
        specTransManager.deleteAll();

        for (i=1; i<=invoiceConLen; i++)
        {
            invoiceId     = conpeek(invoiceVendCon,i);
            documentDate  = conpeek(dateVendCon,i);
            amountCur     = conpeek(amountVendCon,i);

            custTrans     = CustTrans::findFromInvoice(conpeek(invoiceVendCon,i));
            if (!custTrans.RecId)
            {
                error(strfmt("@SYS94068",invoiceId));
            }

            custTransOpen = CustTransOpen::findRefId(custTrans.RecId);

            if (specTransManager.existForOtherSpec(custTransOpen.DataAreaId, custTransOpen.TableId, custTransOpen.RecId))
            {
                error(strfmt("@SYS94069",invoiceId));
            }

            if (!custTransOpen.RecId)
            {
                error(strfmt("@SYS94070",invoiceId));
            }
            if (custTransOpen.AmountCur > 0 && custTransOpen.AmountCur < amountCur
             || custTransOpen.AmountCur < 0 && custTransOpen.AmountCur > amountCur)
            {
                error(strfmt("@SYS94071"+
                             "@SYS94072",invoiceId));
            }

            // When vendor invoice is partially settled, generate spectrans with vendor payment settle amount.
            if (amountCur && custTransOpen.AmountCur != -amountCur)
            {
                specTransManager.insert(custTransOpen.DataAreaId, custTransOpen.TableId, custTransOpen.RecId, -amountCur, custTrans.CurrencyCode);
            }
            else
            {
                invoiceAmount = custTransOpen.transOpenData().remainAmountCashDisc(ledgerJournalTransCustPaym.TransDate, discGraceDays);

                specTransManager.insert(custTransOpen.DataAreaId, custTransOpen.TableId, custTransOpen.RecId, invoiceAmount, custTrans.CurrencyCode);
            }
        }
        ledgerJournalTransCustPaym.SettleVoucher = SettlementType::SelectedTransact;
        ledgerJournalTransCustPaym.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvoice</Name>
				<Source><![CDATA[
        void findInvoice()
    {
        VendSettlement      vendSettlement;
        VendTrans           vendTrans;
        InvoiceId           invoiceId;
        DocumentDate        documentDate;
        AmountCur           amountCur;

        while select forceplaceholders crossCompany settleAmountCur from vendSettlement
            index hint OffsetVoucherIdx
            where vendSettlement.OffsetTransVoucher == ledgerJournalTransVendPaym.Voucher
            &&    vendSettlement.OffsetCompany      == ledgerJournalTransVendPaym.Company
            &&    vendSettlement.SettleAmountCur    != 0
        join Invoice, DocumentDate, TransDate from vendTrans
            where vendTrans.RecId                   == vendSettlement.TransRecId
            &&    vendTrans.AccountNum              == vendSettlement.AccountNum
            &&    vendTrans.TransType               != LedgerTransType::ExchAdjustment
        {
            invoiceId       = vendTrans.Invoice;
            documentDate    = vendTrans.DocumentDate ? vendTrans.DocumentDate : vendTrans.TransDate;
            amountCur       = vendSettlement.SettleAmountCur;

            if (invoiceId)
            {
                invoiceVendCon += invoiceId;
                dateVendCon    += documentDate;
                amountVendCon  += amountCur;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>settlePaym</Name>
				<Source><![CDATA[
        void settlePaym(LedgerJournalTrans _ledgerJournalTransVendPaym, LedgerJournalTrans   _ledgerJournalTransCustPaym)
    {
        ledgerJournalTransCustPaym  = _ledgerJournalTransCustPaym;
        ledgerJournalTransVendPaym  = _ledgerJournalTransVendPaym;

        ttsbegin;

        invoiceVendCon = connull();
        dateVendCon    = connull();
        amountVendCon  = connull();

        if (ledgerJournalTransVendPaym.company() != curext())
        {
            changecompany(ledgerJournalTransVendPaym.company())
            {
                setprefix(strfmt("@SYS93821",TradeInterCompany::curCompanyName()));

                this.findInvoice();
            }
        }
        else
        {
            this.findInvoice();
        }

        invoiceConLen = conlen(invoiceVendCon);

        if (invoiceConLen)
        {
            if (ledgerJournalTransCustPaym.company() != curext())
            {
                changecompany(ledgerJournalTransCustPaym.company())
                {
                    setprefix(strfmt("@SYS93821",TradeInterCompany::curCompanyName()));

                    this.createCustSettlement();
                }
            }
            else
            {
                this.createCustSettlement();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>