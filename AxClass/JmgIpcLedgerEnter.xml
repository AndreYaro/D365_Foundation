<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgIpcLedgerEnter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgIpcLedgerEnter</c> class enters the indirect production costs that are registered in the
///    shop floor control into the General Ledger.
/// </summary>
/// <remarks>
///    The run creates one ledger journal and enters journal lines based on the transferred indirect
///    activity registrations.
/// </remarks>
class JmgIpcLedgerEnter extends RunBaseBatch implements BatchRetryable
{
    #AviFiles

    QueryRun            qrIPCLedger;

    DialogRunbase       dialog;
    DialogField         dialogGroupDim;
    DialogField         dialogTransDate;
    DialogField         dialogFromDate;
    DialogField         dialogToDate;
    DialogField         dialogRepost;

    boolean             groupTransInDimensions;
    TransDate           transDate;
    FromDate            fromDate;
    ToDate              toDate;
    NoYes               repost;

    #DEFINE.MinDate('1-1-1901')

    #DEFINE.CurrentVersion(3)
    #LOCALMACRO.CurrentList
        groupTransInDimensions,
        transDate,
        fromDate,
        toDate,
        repost
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the class is shown in the list of Journal Types in the <c>BatchJournalType</c>
    ///    form.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    true is returned because the <c>JmgIpcLedgerEnter</c> class should always be visible in the list.A
    ///    class that can be used in a batch journal is a class where the same parameters can be used again
    ///    and again. The dialog can be shown and the parameters can be changed but parameters of some classes
    ///    might build on data that is only valid for a short time. Running a class twice with the same
    ///    parameters is not always possible.If the <c>RunBaseBatch.canGoBatch</c> method returns false, this
    ///    method will not have any effect.
    /// </remarks>
    protected boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkForRepostings</Name>
				<Source><![CDATA[
    /// <summary>
    ///    If the user has selected to repost indirect production costs and an already posted registration is
    ///    found, the user is prompted if he is sure that he wants to repost.
    /// </summary>
    /// <remarks>
    ///    If the user cancels the prompt, an error is thrown.
    /// </remarks>
    private void checkForRepostings()
    {
        JmgIpcLedgerEnterConfirmRepost confirm;
        JmgStampTrans jmgStampTrans;

        if (repost)
        {
            if ((select firstonly jmgStampTrans
                    where jmgStampTrans.ProfileDate >= fromDate &&
                          jmgStampTrans.ProfileDate <= toDate &&
                          jmgStampTrans.Voucher != '').RecId)
            {
                confirm = new JmgIpcLedgerEnterConfirmRepost();
                if (!confirm.prompt())
                {
                    throw error("@SYS39547");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearVoucherNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears a specific voucher from ledger and transactions.
    /// </summary>
    /// <param name="_voucher">
    /// The voucher to clear.
    /// </param>
    private void clearVoucherNum(Voucher _voucher)
    {
        JmgIpcLedgerTrans   jmgIpcLedgerTrans;
        JmgIpcLedgerJournal jmgIpcLedgerJournal;
        JmgStampTrans       jmgStampTrans;

        // Remove from JmgIpcLedgerTrans:
        delete_from jmgIpcLedgerTrans
            where jmgIpcLedgerTrans.Voucher == _voucher;

        // Remove from JmgIpcLedgerJournal:
        delete_from jmgIpcLedgerJournal
            where jmgIpcLedgerJournal.Voucher   == _voucher;

        // Remove from JmgStampTrans:
        update_recordset jmgStampTrans
            setting Voucher = ''
            where jmgStampTrans.Voucher == _voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and returns a class that contains the methods described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    An object that implements the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    The <c>JgmIpcLedgerEnter</c> class builds a dialog box that asks the user to select a from and to
    ///    date, a transaction date, whether dimension values should be transferred, and whether IPC
    ///    registrations should be reposted.
    /// </remarks>
    public Object dialog()
    {
        dialog                  = super();

        dialog.addGroup("@SYS30900");
        dialogGroupDim      = dialog.addField(extendedTypeStr(NoYesId)       ,"@SYS55613");
        dialogTransDate     = dialog.addField(extendedTypeStr(TransDate)     ,"@SYS67");
        dialogFromDate      = dialog.addField(extendedTypeStr(FromDate)      ,"@SYS36679");
        dialogToDate        = dialog.addField(extendedTypeStr(ToDate)        ,"@SYS36680");
        dialogRepost        = dialog.addField(extendedTypeStr(NoYesId)       ,"@SYS39544");

        dialogGroupDim.value(groupTransInDimensions);
        dialogTransDate.value(transDate);
        dialogFromDate.value(fromDate);
        dialogToDate.value(toDate);

        dialog.addMenuItemButton(MenuItemType::Display,menuitemDisplayStr(RunBaseQueryDialog));

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account information for a given job ID depending on the job type.
    /// </summary>
    /// <param name="_jobId">
    /// The job ID for which to retrieve the account information.
    /// </param>
    /// <returns>
    /// Container with account number and offset account number.
    /// </returns>
    private container getAccountInfo(JmgJobId _jobId)
    {
        LedgerDimensionDefaultAccount       accountNum;
        LedgerDimensionDefaultAccount       offsetAccountNum;
        JmgIpcActivity                      jmgIpcActivity;
        HRMAbsenceCode                      hrmAbsenceCode;

        JmgTermJob  job = JmgTermJob::construct(_jobId);
        Common      common = job.sourceData();

        switch (common.TableId)
        {
            case tableNum(JmgIpcActivity):
                jmgIpcActivity      = common;
                accountNum          = jmgIpcActivity.LedgerDimension;
                offsetAccountNum    = jmgIpcActivity.OffsetLedgerDimension;
                break;
            case tableNum(HRMAbsenceCode):
                hrmAbsenceCode      = common;
                accountNum          = hrmAbsenceCode.LedgerDimension;
                offsetAccountNum    = hrmAbsenceCode.OffsetLedgerDimension;
                break;
            default:
                accountNum          = 0;
                offsetAccountNum    = 0;
                break;
        }
        return [accountNum, offsetAccountNum];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Assigns the dialog box values to internal variables.
    /// </summary>
    /// <returns>
    ///    A Boolean value.
    /// </returns>
    /// <remarks>
    ///    When writing a method that inherits from this method remember to call the <c>super</c> method.This
    ///    method is called after the dialog box is closed. The internal variables to use are the
    ///    <c>groupTransInDimensions</c>, <c>transDate</c>, <c>fromDate</c>, <c>toDate</c>, and <c>repost</c>
    ///    variables.
    /// </remarks>
    public boolean getFromDialog()
    {
        boolean ret = super();

        groupTransInDimensions  = dialogGroupDim.value();
        transDate               = dialogTransDate.value();
        fromDate                = dialogFromDate.value();
        toDate                  = dialogToDate.value();
        repost                  = dialogRepost.value();
        
        this.checkForRepostings();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        Query                   stampTransQuery = new Query();
        QueryBuildDataSource    qbds;

        super();
        qbds    = stampTransQuery.addDataSource(tableNum(JmgStampTrans));
        qbds.addRange(fieldNum(JmgStampTrans,Worker));
        qbds.addRange(fieldNum(JmgStampTrans,ProfileDate));
        qrIPCLedger     = new QueryRun(stampTransQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,qrIPCLedger.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the <c>QueryRun</c> object, which is used by the query prompt.
    /// </summary>
    /// <returns>
    ///    A <c>QueryRun</c> object.
    /// </returns>
    /// <remarks>
    ///    This method is used in cases where a query prompt is the dialog, and in cases where a Select menu
    ///    item is added to a dialog. Do not initialize the <c>QueryRun</c> object whenever this method is
    ///    called. Do it in the <see cref="M:RunBase.unpack" />, the <see cref="M:RunBase.initParmDefault" />,
    ///    or the <see cref="M:RunBase.init" /> method, or in the method only when it is not initialized. The
    ///    query selects records from the <c>JmgStampTrans</c> table.
    /// </remarks>
    QueryRun queryRun()
    {
        return qrIPCLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    /// <remarks>
    ///    The transferred records are marked with the voucher of the ledger journal. If no lines were
    ///    transferred, a warning is displayed.
    /// </remarks>
    public void run()
    {
        int                     cnt;

        JmgIpcLedgerJournal     jmgIpcLegerJournal;
        JmgIpcLedgerTrans       jmgIpcLedgerTrans;

        LedgerJournalTable      ledgerJournalTable;
        LedgerJournalTrans      ledgerJournalTrans;
        Voucher                 voucher;

        JmgStampTrans           jmgStampTrans;

        Query                   query;
        QueryBuildDataSource    qbds;
        QueryBuildRange         qbr;

        LedgerDimensionDefaultAccount       accountNum;
        LedgerDimensionDefaultAccount       offsetAccountNum;
        DimensionAttributeValueCombination  dimAttrValueCombo;
        DimensionAttributeValueCombination  offsetDimAttrValueCombo;
        DimensionValidationStatus           dimensionValidationStatus;
        DimensionValidationStatus           offsetDimensionValidationStatus;
        boolean                             dimensionsAreValid = true;

        jmgIpcLegerJournal.query2Log(qrIPCLedger);

        query           = qrIPCLedger.query();
        query.dataSourceNo(1).update(true);
        qbds            = query.dataSourceTable(tableNum(JmgStampTrans));
        qbr             = qbds.addRange(fieldNum(JmgStampTrans,Module));
        qbr.value(enum2str(JmgModuleEnum::IPC));

        if (repost)
        {
            if (!fromDate || ! toDate)
            {
                throw error("@SYS39545");
            }
        }
        else
        {
            if (!fromDate)
            {
                fromDate = str2Date(#minDate, 123);
            }
            if (!toDate)
            {
                toDate = maxDate();
            }
            qbr             = qbds.addRange(fieldNum(JmgStampTrans,Voucher));
            qbr.value(queryValue(''));
        }

        if (fromDate > toDate)
        {
            throw error("@SYS16982");
        }
        qbr = qbds.addRange(fieldNum(JmgStampTrans, ProfileDate));
        qbr.value(queryRange(fromDate, toDate));

        qrIPCLedger.query(query);

        this.progressInit("@SYS39074", SysQuery::countLoops(qrIPCLedger), #AviUpdate);

        if (! transDate)
            transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        ttsbegin;
        ledgerJournalTable.clear();
        ledgerJournalTable.initValue();
        ledgerJournalTable.JournalName  = JmgParameters::find().JournalName;
        ledgerJournalTable.Name         = "@SYS39074";
        ledgerJournalTable.insert();

        voucher = new JournalVoucherNum(JournalTableData::newTable(ledgerJournalTable)).getNew(false);
        jmgIpcLegerJournal.Voucher      = voucher;
        jmgIpcLegerJournal.TransDate    = transDate;
        jmgIpcLedgerTrans.Voucher       = voucher;

        this.clearVoucherNum(voucher);

        jmgIpcLegerJournal.insert();

        while (qrIPCLedger.next())
        {
            jmgStampTrans                                   = qrIPCLedger.get(tableNum(JmgStampTrans));

            progress.setText(HcmWorker::worker2Name(jmgStampTrans.Worker));

            if (jmgStampTrans.JourRegType == JmgJourRegTypeEnum::Absence)
            {
                [accountNum, offsetAccountNum]                  = this.getAccountInfo(jmgStampTrans.JobIDAbs);
            }
            else
            {
                [accountNum, offsetAccountNum]                  = this.getAccountInfo(jmgStampTrans.JobId);
            }

            if (accountNum && offsetAccountNum)
            {
                jmgStampTrans.Voucher                       = jmgIpcLegerJournal.Voucher;

                jmgIpcLedgerTrans.LedgerDimension           = LedgerDimensionFacade::serviceCreateLedgerDimension(accountNum, jmgStampTrans.DefaultDimension);
                jmgIpcLedgerTrans.OffsetLedgerDimension     = LedgerDimensionFacade::serviceCreateLedgerDimension(offsetAccountNum, jmgStampTrans.DefaultDimension);
                jmgIpcLedgerTrans.Price                     = CurrencyExchangeHelper::amount(jmgStampTrans.HourPrice * jmgStampTrans.secondsReal());
                jmgIpcLedgerTrans.StampTransRecId           = jmgStampTrans.RecId;

                // we need to call this validation for cases when the account structure defines rules for valid dimensions
                // message is handled by the validate method
                dimensionValidationStatus = LedgerDimensionValidationHelper::validateByTree(jmgIpcLedgerTrans.LedgerDimension, transDate, true, true);
                offsetDimensionValidationStatus = LedgerDimensionValidationHelper::validateByTree(jmgIpcLedgerTrans.OffsetLedgerDimension, transDate, true, true);
                if (dimensionValidationStatus != DimensionValidationStatus::Valid ||
                    offsetDimensionValidationStatus != DimensionValidationStatus::Valid)
                {
                    dimensionsAreValid = false;
                    warning(strFmt("@SYS328784", HcmWorker::worker2Name(jmgStampTrans.Worker), jmgStampTrans.ProfileDate, jmgStampTrans.JourRegType));
                    continue; // we don't stop because we want to validate all the lines
                }

                if (jmgIpcLedgerTrans.Price)
                {
                    select forupdate ledgerJournalTrans
                        where ledgerJournalTrans.JournalNum             == ledgerJournalTable.JournalNum              &&
                              ledgerJournalTrans.TransDate              == transDate                                  &&
                              ledgerJournalTrans.Voucher                == voucher                                    &&
                              ledgerJournalTrans.AccountType            == LedgerJournalACType::Ledger                &&
                              ledgerJournalTrans.LedgerDimension        == jmgIpcLedgerTrans.LedgerDimension          &&
                              ledgerJournalTrans.OffsetAccountType      == LedgerJournalACType::Ledger                &&
                              ledgerJournalTrans.OffsetLedgerDimension  == jmgIpcLedgerTrans.OffsetLedgerDimension    &&
                              ((ledgerJournalTrans.DefaultDimension     == jmgStampTrans.DefaultDimension) ||
                               (groupTransInDimensions                  == NoYes::No))
                        join RecId from dimAttrValueCombo where
                            dimAttrValueCombo.RecId == ledgerJournalTrans.LedgerDimension
                        join RecId from offsetDimAttrValueCombo where
                            offsetDimAttrValueCombo.RecId == ledgerJournalTrans.OffsetLedgerDimension;

                    if (! ledgerJournalTrans)
                    {
                        ledgerJournalTrans.clear();
                        ledgerJournalTrans.initValue();
                    }
                    ledgerJournalTrans.JournalNum           = ledgerJournalTable.JournalNum;
                    ledgerJournalTrans.TransDate            = transDate;
                    ledgerJournalTrans.Voucher              = voucher;
                    ledgerJournalTrans.parmLedgerDimension(jmgIpcLedgerTrans.LedgerDimension);
                    ledgerJournalTrans.AmountCurDebit       += jmgIpcLedgerTrans.Price;
                    ledgerJournalTrans.parmOffsetLedgerDimension(jmgIpcLedgerTrans.OffsetLedgerDimension);
                    ledgerJournalTrans.Txt                  = "@SYS39079";
                    if (groupTransInDimensions)
                    {
                        ledgerJournalTrans.DefaultDimension = jmgStampTrans.DefaultDimension;
                    }
                    // sum on 1 trans
                    if (! ledgerJournalTrans)
                        ledgerJournalTrans.insert();
                    else
                       ledgerJournalTrans.update();

                    jmgIpcLedgerTrans.insert();
                    jmgStampTrans.update();
                }
            }

            cnt++;
            progress.setCount(cnt);
        }

        if (! (select firstonly ledgerJournalTrans
                   where ledgerJournalTrans.JournalNum  == ledgerJournalTable.JournalNum &&
                         ledgerJournalTrans.TransDate   == transDate                     &&
                         ledgerJournalTrans.Voucher     == voucher                       &&
                         ((ledgerJournalTrans.AmountCurCredit) ||
                          (ledgerJournalTrans.AmountCurDebit )   )                         ).RecId)
        {
            ttsabort;
            warning("@SYS39160");
        }
        else if (!dimensionsAreValid)
            ttsabort;
        else
            ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    true if the task is run on the server; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Your classes that extend this class must override the <c>runsImpersonated</c> method and return
    ///    false if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a Select button to the dialog box to show query values.
    /// </summary>
    /// <returns>
    ///    true if a Select button was added to the dialog box.
    /// </returns>
    /// <remarks>
    ///    Pressing the Select button that was added will show the query form, so the <c>queryRun</c> method
    ///    has to return a valid <c>QueryRun</c> object. This method returns true for the
    ///    <c>JmgIpcLedgerEnter</c> class.
    /// </remarks>
    boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer         version       = conPeek(packedClass,1);
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,packedQuery]      = packedClass;
                if (packedQuery)
                    qrIPCLedger = new QueryRun(packedQuery);
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>JmgIpcLedgerEnter</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>JmgIpcLedgerEnter</c> class.
    /// </returns>
    public static JmgIpcLedgerEnter construct()
    {
        return new JmgIpcLedgerEnter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS39074";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        JmgIpcLedgerEnter   jmgIpcLedgerEnter = JmgIpcLedgerEnter::construct();

        if (! JmgParameters::find().JournalName)
        {
            throw error("@SYS39081");
        }

        if (jmgIpcLedgerEnter.prompt())
        {
            jmgIpcLedgerEnter.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>