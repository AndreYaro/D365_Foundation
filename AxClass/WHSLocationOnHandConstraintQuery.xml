<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLocationOnHandConstraintQuery</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSLocationOnHandConstraintQuery</c> class represents a query
/// that iterates over on hand on a single warehouse location.
/// </summary>
/// <remarks>
/// The query allows to group on hand by item and certain dimensions.
/// It is tailored to the needs of validating location mixing constraints and stocking limits.
/// </remarks>
class WhsLocationOnHandConstraintQuery
{
    private static boolean IsUseOfInventSumDimEnabled = InventUseDimOfInventSumToggle::instance().isEnabled();

    Query query;
    QueryBuildRange inventLocationRange, wmsLocationRange;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>groupByDimensions</Name>
				<Source><![CDATA[
    private void groupByDimensions(QueryBuildDataSource _dsInventDim, WHSLocationOnHandConstraintQueryType _queryType)
    {
        ListEnumerator productDimListEnumerator;

        if (_queryType.parmGroupByVariant())
        {
            productDimListEnumerator = InventDim::dimProductDimensionEnabledFieldList().getEnumerator();

            while (productDimListEnumerator.moveNext())
            {
                _dsInventDim.addGroupByField(productDimListEnumerator.current());
            }
        }

        if (_queryType.parmGroupByStatus())
        {
            _dsInventDim.addGroupByField(fieldNum(InventDim, InventStatusId));
        }

        if (_queryType.parmGroupByBatch())
        {
            _dsInventDim.addGroupByField(fieldNum(InventDim, InventBatchId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupInventSumByDimensions</Name>
				<Source><![CDATA[
    private void groupInventSumByDimensions(QueryBuildDataSource _dsInventSum, WHSLocationOnHandConstraintQueryType _queryType)
    {
        ListEnumerator productDimListEnumerator;

        if (_queryType.parmGroupByVariant())
        {
            productDimListEnumerator = InventDim::dimProductDimensionEnabledFieldList().getEnumerator();

            while (productDimListEnumerator.moveNext())
            {
                if (_queryType.parmIncludeDelta())
                {
                    _dsInventSum.addGroupByField(InventDim::getInventSumInventDimUnionDeltaInventDimPhysicalQtyFieldIdFromInventDimFieldId(productDimListEnumerator.current()));
                }
                else
                {
                    _dsInventSum.addGroupByField(InventDim::getInventSumFieldIdFromInventDimFieldId(productDimListEnumerator.current()));
                }
            }
        }

        if (_queryType.parmGroupByStatus())
        {
            _dsInventSum.addGroupByField(this.inventStatusFieldId(_queryType));
        }

        if (_queryType.parmGroupByBatch())
        {
            _dsInventSum.addGroupByField(this.inventBatchFieldId(_queryType));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize(WHSLocationOnHandConstraintQueryType _queryType)
    {
        QueryBuildDataSource dsInventSum, dsInventDim;

        query = new Query();

        dsInventSum = query.addDataSource(this.sumTableId(_queryType));

        if (_queryType.shouldUseGroupBy())
        {
            dsInventSum.addSelectionField(this.physicalInventFieldId(_queryType), SelectionField::Sum);
            dsInventSum.addSelectionField(this.cwPhysicalInventFieldId(_queryType), SelectionField::Sum);

            if (_queryType.parmGroupByItem())
            {
                dsInventSum.addGroupByField(this.itemIdFieldId(_queryType));
            }
        }

        if (IsUseOfInventSumDimEnabled)
        {
            inventLocationRange = dsInventSum.addRange(this.inventLocationFieldId(_queryType));
            wmsLocationRange = dsInventSum.addRange(this.wmsLocationFieldId(_queryType));
        }
        else
        {
            dsInventDim = dsInventSum.addDataSource(tableNum(InventDim));
            dsInventDim.addLink(this.inventDimIdFieldId(_queryType), fieldNum(InventDim, InventDimId));
            dsInventDim.fetchMode(QueryFetchMode::One2One);
            
            inventLocationRange = dsInventDim.addRange(fieldNum(InventDim, InventLocationId));
            wmsLocationRange = dsInventDim.addRange(fieldNum(InventDim, wmsLocationId));
        }                

        dsInventSum.addRange(this.physicalInventFieldId(_queryType)).value('>0');

        if (!_queryType.parmIncludeDelta())
        {
            dsInventSum.addRange(fieldNum(InventSum, ClosedQty)).value(queryValue(NoYes::No));
        }

        if (_queryType.shouldUseGroupBy())
        {
            if (IsUseOfInventSumDimEnabled)
            {
                this.groupInventSumByDimensions(dsInventSum, _queryType);
            }
            else
            {
                this.groupByDimensions(dsInventDim, _queryType);
            }

            query.addHavingFilter(dsInventSum, this.physicalInventFieldName(_queryType), AggregateFunction::Sum).value('>0');
        }
        
        if (_queryType.parmSingleRecordSelect())
        {
            query.firstOnly1(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimIdFieldId</Name>
				<Source><![CDATA[
    private FieldId inventDimIdFieldId(WHSLocationOnHandConstraintQueryType _queryType)
    {        
        if (IsUseOfInventSumDimEnabled)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return _queryType.parmIncludeDelta() ?
            fieldNum(InventSumUnionDeltaPhysicalQty, InventDimId) :
            fieldNum(InventSum, InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemIdFieldId</Name>
				<Source><![CDATA[
    private FieldId itemIdFieldId(WHSLocationOnHandConstraintQueryType _queryType)
    {        
        return _queryType.parmIncludeDelta() ?
            (IsUseOfInventSumDimEnabled ? fieldNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty, ItemId) : fieldNum(InventSumUnionDeltaPhysicalQty, ItemId)) :
            fieldNum(InventSum, ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>physicalInventFieldId</Name>
				<Source><![CDATA[
    private FieldId physicalInventFieldId(WHSLocationOnHandConstraintQueryType _queryType)
    {
        return _queryType.parmIncludeDelta() ?
            (IsUseOfInventSumDimEnabled ? fieldNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty, PhysicalInvent) : fieldNum(InventSumUnionDeltaPhysicalQty, PhysicalInvent)) :
            fieldNum(InventSum, PhysicalInvent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>physicalInventFieldName</Name>
				<Source><![CDATA[
    private FieldName physicalInventFieldName(WHSLocationOnHandConstraintQueryType _queryType)
    {
        return _queryType.parmIncludeDelta() ?
            (IsUseOfInventSumDimEnabled ? fieldStr(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty, PhysicalInvent) : fieldStr(InventSumUnionDeltaPhysicalQty, PhysicalInvent)) :
            fieldStr(InventSum, PhysicalInvent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWMSLocationIdRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets ranges on the query to ensure that it only iterates over on hand on the specified warehouse location.
    /// </summary>
    /// <param name="_inventLocationId">
    /// ID of the warehouse.
    /// </param>
    /// <param name="_wmsLocationId">
    /// ID of the warehouse location.
    /// </param>
    protected void setWMSLocationIdRange(InventLocationId _inventLocationId, WMSLocationId _wmsLocationId)
    {
        inventLocationRange.value(queryValue(_inventLocationId));
        wmsLocationRange.value(queryValue(_wmsLocationId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumTableId</Name>
				<Source><![CDATA[
    private TableId sumTableId(WHSLocationOnHandConstraintQueryType _queryType)
    {
        return _queryType.parmIncludeDelta() ? 
            (IsUseOfInventSumDimEnabled ? tableNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty) : tableNum(InventSumUnionDeltaPhysicalQty)) :
            tableNum(InventSum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sysQuery</Name>
				<Source><![CDATA[
    private Query sysQuery()
    {
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cachedQuery</Name>
				<Source><![CDATA[
    private static WHSLocationOnHandConstraintQuery cachedQuery(WHSLocationOnHandConstraintQueryType _queryType)
    {
        return SysTransactionScopeCache::get(
            WHSLocationOnHandConstraintQuery::cacheScope(),
            WHSLocationOnHandConstraintQuery::cacheKey(_queryType),
            null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheKey</Name>
				<Source><![CDATA[
    private static str cacheKey(WHSLocationOnHandConstraintQueryType _queryType)
    {
        return strFmt('%1_%2_%3_%4_%5_%6_%7',
            _queryType.parmGroupByBatch(),
            _queryType.parmGroupByItem(),
            _queryType.parmGroupByStatus(),
            _queryType.parmGroupByVariant(),
            _queryType.parmIncludeDelta(),
            _queryType.parmSingleRecordSelect());
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheScope</Name>
				<Source><![CDATA[
    private static str cacheScope()
    {
        return classStr(WHSLocationOnHandConstraintQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static WHSLocationOnHandConstraintQuery construct()
    {
        return new WHSLocationOnHandConstraintQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a query enumerator for the specified query type over the specified warehouse location.
    /// </summary>
    /// <param name="_queryType">
    /// The query type.
    /// </param>
    /// <param name="_location">
    /// The warehouse location.
    /// </param>
    /// <returns>
    /// A new query enumartor.
    /// </returns>
    public static WHSLocationOnHandConstraintQryEnumerator getEnumerator(
        WHSLocationOnHandConstraintQueryType    _queryType,
        WMSLocation                             _location)
    {
        return WHSLocationOnHandConstraintQuery::getEnumeratorByLocationId(_queryType, _location.InventLocationId, _location.wmsLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumeratorByLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a query enumerator for the specified query type over the specified warehouse location.
    /// </summary>
    /// <param name="_queryType">
    /// The query type.
    /// </param>
    /// <param name="_inventLocationId">
    /// The ID of the warehouse.
    /// </param>
    /// <param name="_wmsLocationId">
    /// The ID of the warehouse location.
    /// </param>
    /// <returns>
    /// A new query enumartor.
    /// </returns>
    public static WHSLocationOnHandConstraintQryEnumerator getEnumeratorByLocationId(
        WHSLocationOnHandConstraintQueryType    _queryType,
        InventLocationId                        _inventLocationId,
        WMSLocationId                           _wmsLocationId)
    {
        WHSLocationOnHandConstraintQuery query = WHSLocationOnHandConstraintQuery::cachedQuery(_queryType);

        if (!query)
        {
            query = new WHSLocationOnHandConstraintQuery();
            query.initialize(_queryType);
            WHSLocationOnHandConstraintQuery::saveQueryToCache(_queryType, query);
        }

        query.setWMSLocationIdRange(_inventLocationId, _wmsLocationId);

        return WHSLocationOnHandConstraintQryEnumerator::newStandard(_queryType, new QueryRun(query.sysQuery()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveQueryToCache</Name>
				<Source><![CDATA[
    private static void saveQueryToCache(
        WHSLocationOnHandConstraintQueryType    _queryType,
        WHSLocationOnHandConstraintQuery        _query)
    {
        SysTransactionScopeCache::set(
            WHSLocationOnHandConstraintQuery::cacheScope(),
            WHSLocationOnHandConstraintQuery::cacheKey(_queryType),
            _query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cwPhysicalInventFieldId</Name>
				<Source><![CDATA[
    private FieldId cwPhysicalInventFieldId(WHSLocationOnHandConstraintQueryType _queryType)
    {
        return _queryType.parmIncludeDelta() ?
            (IsUseOfInventSumDimEnabled ? fieldNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty, PdsCWPhysicalInvent) : fieldNum(InventSumUnionDeltaPhysicalQty, PdsCWPhysicalInvent)) :
            fieldNum(InventSum, PDSCWPhysicalInvent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cwPhysicalInventFieldName</Name>
				<Source><![CDATA[
    private FieldName cwPhysicalInventFieldName(WHSLocationOnHandConstraintQueryType _queryType)
    {
        return _queryType.parmIncludeDelta() ?
            (IsUseOfInventSumDimEnabled ? fieldStr(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty, PdsCWPhysicalInvent) : fieldStr(InventSumUnionDeltaPhysicalQty, PdsCWPhysicalInvent)) :
            fieldStr(InventSum, PDSCWPhysicalInvent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventBatchFieldId</Name>
				<Source><![CDATA[
    private FieldId inventBatchFieldId(WHSLocationOnHandConstraintQueryType _queryType)
    {
        return _queryType.parmIncludeDelta() ?
            fieldNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty, InventBatchId) :
            fieldNum(InventSum, InventBatchId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventStatusFieldId</Name>
				<Source><![CDATA[
    private FieldId inventStatusFieldId(WHSLocationOnHandConstraintQueryType _queryType)
    {
        return _queryType.parmIncludeDelta() ?
            fieldNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty, InventStatusId) :
            fieldNum(InventSum, InventStatusId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocationFieldId</Name>
				<Source><![CDATA[
    private FieldId inventLocationFieldId(WHSLocationOnHandConstraintQueryType _queryType)
    {
        return _queryType.parmIncludeDelta() ?
            fieldNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty, InventLocationId) :
            fieldNum(InventSum, InventLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsLocationFieldId</Name>
				<Source><![CDATA[
    private FieldId wmsLocationFieldId(WHSLocationOnHandConstraintQueryType _queryType)
    {
        return _queryType.parmIncludeDelta() ?
            fieldNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty, WMSLocationId) :
            fieldNum(InventSum, WMSLocationId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>