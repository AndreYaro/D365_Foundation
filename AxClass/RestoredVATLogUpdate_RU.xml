<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RestoredVATLogUpdate_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RestoredVATLogUpdate_RU extends RunBaseBatch implements BatchRetryable
{
    StartDate               fromDate;
    EndDate                 toDate;
    boolean                 updateGain;
    boolean                 deletePrev;

    DialogField             dlgUpdateGain;
    DialogField             dlgDeletePrev;
    RestoredVATLogTable_RU  restoredVATLogTable;
    Map                     mapFactureSettledQty;
    Map                     taxCodeCache;

    Factor                  factorExport;
    Factor                  factorNotLiable;
    TaxParameters           taxParameters;

    protected const int SysLastValuesCurrentVersion = 1;
    protected const int CurrentVersion = 1;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearHeaders</Name>
				<Source><![CDATA[
    private void clearHeaders()
    {
        RestoredVATLogTrans_RU          restoredVATLogTrans;
        RestoredVATLogTransOper_RU      restoredVATLogTransOper;
        PurchBookVATProcessLogTrans_RU  purchBookVATProcessLogTrans;
        ;

        delete_from restoredVATLogTransOper
            where restoredVATLogTransOper.TransDate >= fromDate &&
                  restoredVATLogTransOper.TransDate <= toDate
        notexists join purchBookVATProcessLogTrans
            where purchBookVATProcessLogTrans.RecId == restoredVATLogTransOper.ProcessLogTransRecId;

        delete_from restoredVATLogTrans
            where restoredVATLogTrans.TransDate >= fromDate &&
                  restoredVATLogTrans.TransDate <= toDate;

        update_recordset restoredVATLogTable
            setting TaxStandardDirect       = 0,
                    TaxReducedDirect        = 0,
                    TaxStandardIndirect     = 0,
                    TaxReducedIndirect      = 0,
                    TaxStandardAsset        = 0,
                    TaxReducedAsset         = 0
            where restoredVATLogTable.TransDate == toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearPrevCalculation</Name>
				<Source><![CDATA[
    protected void clearPrevCalculation()
    {
        RestoredVATLogTransOper_RU      restoredVATLogTransOper;
        RestoredVATLogTransOperLink_RU  restoredVATLogTransOperLink;
        ;

        if (deletePrev)
        {
            delete_from restoredVATLogTransOperLink
                where restoredVATLogTransOperLink.TransDate >= fromDate &&
                      restoredVATLogTransOperLink.TransDate <= toDate;

            delete_from restoredVATLogTransOper
                where restoredVATLogTransOper.TransDate >= fromDate &&
                      restoredVATLogTransOper.TransDate <= toDate;

            update_recordset restoredVATLogTable
                setting TaxStandardIndirectInc  = 0,
                        TaxReducedIndirectInc   = 0
                where restoredVATLogTable.TransDate == toDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLogTrans</Name>
				<Source><![CDATA[
    public void createLogTrans()
    {
        RestoredVATLogTransOper_RU          restoredVATLogTransOper,
                                            restoredVATLogTransOperSum;
        RestoredVATLogTrans_RU              restoredVATLogTrans;
        TaxAmountVAT_RU                     taxAmount;
        TaxAmountVAT_RU                     taxAmountAsset;
        ;

        while select ProcessLogTransRecId from restoredVATLogTransOper
            group by ProcessLogTransRecId
            where restoredVATLogTransOper.TransDate == toDate
        {
            PurchBookVATProcessLogTrans_RU purchBookVATProcessLogTrans = PurchBookVATProcessLogTrans_RU::find(restoredVATLogTransOper.ProcessLogTransRecId);

            restoredVATLogTrans.clear();
            restoredVATLogTrans.FactureExternalId       = purchBookVATProcessLogTrans.FactureExternalId;
            restoredVATLogTrans.FactureDate             = purchBookVATProcessLogTrans.FactureDate;
            restoredVATLogTrans.FactureModule           = purchBookVATProcessLogTrans.factureModule();
            restoredVATLogTrans.DeliveryDate            = purchBookVATProcessLogTrans.DeliveryDate;
            restoredVATLogTrans.AccountName             = purchBookVATProcessLogTrans.AccountName;
            restoredVATLogTrans.AccountNum              = purchBookVATProcessLogTrans.AccountNum;
            restoredVATLogTrans.FactureId               = purchBookVATProcessLogTrans.FactureId;
            restoredVATLogTrans.FacturedAmounts         = purchBookVATProcessLogTrans.FacturedAmounts;
            restoredVATLogTrans.InvoiceRecId            = purchBookVATProcessLogTrans.InvoiceRecIdRef;
            restoredVATLogTrans.ProcessLogTransRecId    = purchBookVATProcessLogTrans.RecId;
            restoredVATLogTrans.TransDate               = toDate;

            boolean included = false;

            while select sum(TaxAmount),
                         sum(TaxAmountNotLiable),
                         sum(TaxAmountWrittenOff) from restoredVATLogTransOperSum
                group by TaxCode, LineType, Asset
                where restoredVATLogTransOperSum.TransDate              == toDate                                       &&
                      restoredVATLogTransOperSum.ProcessLogTransRecId   == restoredVATLogTransOper.ProcessLogTransRecId &&
                      restoredVATLogTransOperSum.Include
            {
                included = true;

                if (restoredVATLogTransOperSum.Asset)
                {
                    taxAmount       = 0;
                    taxAmountAsset  = restoredVATLogTransOperSum.TaxAmount          +
                                      restoredVATLogTransOperSum.TaxAmountNotLiable +
                                      restoredVATLogTransOperSum.TaxAmountWrittenOff;
                }
                else
                {
                    taxAmount       = restoredVATLogTransOperSum.TaxAmount + restoredVATLogTransOperSum.TaxAmountNotLiable;
                    taxAmountAsset  = 0;
                }

                switch (restoredVATLogTransOperSum.taxType())
                {
                    case TaxType_W::VAT :
                        if (restoredVATLogTransOperSum.LineType == RestoredVATLineType_RU::Direct)
                        {
                            restoredVATLogTrans.TaxStandardDirect   += taxAmount;
                            restoredVATLogTable.TaxStandardDirect   += taxAmount;
                        }
                        else
                        {
                            restoredVATLogTrans.TaxStandardIndirect += taxAmount;
                            restoredVATLogTable.TaxStandardIndirect += taxAmount;
                        }
                        restoredVATLogTrans.TaxStandardAsset    += taxAmountAsset;
                        restoredVATLogTable.TaxStandardAsset    += taxAmountAsset;
                        break;

                    case TaxType_W::VATReduced :
                        if (restoredVATLogTransOperSum.LineType == RestoredVATLineType_RU::Direct)
                        {
                            restoredVATLogTrans.TaxReducedDirect   += taxAmount;
                            restoredVATLogTable.TaxReducedDirect   += taxAmount;
                        }
                        else
                        {
                            restoredVATLogTrans.TaxReducedIndirect += taxAmount;
                            restoredVATLogTable.TaxReducedIndirect += taxAmount;
                        }
                        restoredVATLogTrans.TaxReducedAsset     += taxAmountAsset;
                        restoredVATLogTable.TaxReducedAsset     += taxAmountAsset;
                        break;
                }
            }

            restoredVATLogTrans.Include = included;
            restoredVATLogTrans.insert();
        }

        restoredVATLogTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        ;

        DialogRunbase dialog = super();

        dialog.addGroup("@SYS40").allowEdit(false);
        dialog.addFieldValue(extendedTypeStr(StartDate), fromDate);
        dialog.addFieldValue(extendedTypeStr(EndDate), toDate);

        dialog.addGroup("@SYS28007");
        dlgUpdateGain = dialog.addFieldValue(enumStr(NoYes), updateGain, "@GLS114243");
        dlgDeletePrev = dialog.addFieldValue(enumStr(NoYes), deletePrev, "@GLS114206");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaxTable</Name>
				<Source><![CDATA[
    private TaxTable findTaxTable(TaxCode _taxCode)
    {
        TaxTable taxTable;
        ;

        if (! taxCodeCache.exists(_taxCode))
        {
            taxTable = TaxTable::find(_taxCode);
            taxCodeCache.insert(_taxCode, taxTable);
        }
        else
        {
            taxTable = taxCodeCache.lookup(_taxCode);
        }

        return taxTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        updateGain = dlgUpdateGain.value();
        deletePrev = dlgDeletePrev.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    public void getLast()
    {
        ;

        if (xSysLastValue::existLast(this))
        {
            container packedValues = xSysLastValue::getValue(this.lastValueDataAreaId(),
                                                             this.lastValueUserId(),
                                                             this.lastValueType(),
                                                             this.lastValueElementName(),
                                                             this.lastValueDesignName());

            this.unpackSysLastValues(packedValues);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        boolean ret = super();

        this.clearHeaders();

        restoredVATLogTable = RestoredVATLogTable_RU::findOrCreate(toDate, true);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        mapFactureSettledQty = new Map(Types::Container, Types::Container);
        taxCodeCache         = new Map(Types::String,    Types::Record);

        taxParameters        = TaxParameters::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, updateGain, fromDate, toDate, deletePrev];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packSysLastValues</Name>
				<Source><![CDATA[
    protected container packSysLastValues()
    {
        return [SysLastValuesCurrentVersion, updateGain, deletePrev];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAssets</Name>
				<Source><![CDATA[
    protected void processAssets()
    {
        RestoredVATCalcAssets_RU restoredVATCalcAssets = RestoredVATCalcAssets_RU::construct(restoredVATLogTable);
        restoredVATCalcAssets.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDirectTrans</Name>
				<Source><![CDATA[
    protected void processDirectTrans(CustInvoiceTrans _custInvoiceTrans)
    {
        VendInvoiceTrans                    vendInvoiceTrans;
        FactureJour_RU                      factureJour;
        FactureJour_RU                      factureJourSource;
        FactureTrans_RU                     factureTrans;
        FactureTrans_RU                     factureTransSource;
        PurchBookVATProcessLogTable_RU      purchBookVATProcessLogTable;
        PurchBookVATProcessLogTrans_RU      purchBookVATProcessLogTrans;
        PurchBookVATProcessLogTransOper_RU  purchBookVATProcessLogTransOper;
        SalesPurchInvoiceLink_RU            salesPurchInvoiceLink;
        VendTrans                           vendTrans;
        UnitQty                             qty;
        UnitQty                             soldQty;
        UnitQty                             settledQty;
        RestoredVATLogTransOper_RU          restoredVATLogTransOper;
        RestoredVATLogTransOper_RU          restoredVATLogTransOperIndirect;
        RestoredVATLogTransOperLink_RU      restoredVATLogTransOperLink;
        RecId                               recId;
        TransTxt                            transTxt;
        TransDate                           transDate;
        Factor                              factor;
        VATType_RU                          vatType         = _custInvoiceTrans.vatType_RU();
        boolean                             isExportTrans   = _custInvoiceTrans.isExportTrans_RU();

        Qty settledQty()
        {
            RestoredVATLogTransOperLink_RU  restoredOperLink;
            RestoredVATLogTable_RU          restoredLogTable;
            RestoredVATLogTransOper_RU      restoredTransOper;

            select sum(SettledQty) from restoredOperLink
                where restoredOperLink.TaxCode               == factureTrans.TaxCode          &&
                      restoredOperLink.DefaultDimension      == factureTrans.DefaultDimension &&
                      restoredOperLink.InventTransId         == factureTrans.InventTransId    &&
                      restoredOperLink.ProcessLogTransRecId  == recId                         &&
                      restoredOperLink.CustInvoiceTransRecId == _custInvoiceTrans.RecId
            exists join restoredTransOper
                where restoredTransOper.TransDate            == restoredOperLink.TransDate            &&
                      restoredTransOper.TaxCode              == restoredOperLink.TaxCode              &&
                      restoredTransOper.DefaultDimension     == restoredOperLink.DefaultDimension     &&
                      restoredTransOper.InventTransId        == restoredOperLink.InventTransId        &&
                      restoredTransOper.ProcessLogTransRecId == restoredOperLink.ProcessLogTransRecId &&
                      restoredTransOper.Include
            exists join restoredLogTable
                where restoredLogTable.TransDate == restoredTransOper.TransDate &&
                      restoredLogTable.TransDate <  toDate                      &&
                      restoredLogTable.Approved;

            return restoredOperLink.SettledQty;
        }

        BookStructSmallVATAmounts_RU calcSmallVATAmounts(FactureJour_RU _factureJour, FactureTrans_RU _factureTrans)
        {
            UnitQty                         qtyLocal;
            TaxAmount                       taxAmountLocal;
            AmountMST                       amountLiableToVATLocal;
            ItemName                        itemNameLocal;
            BookStructSmallVATAmounts_RU    factureAmounts;
            RestoredVATLogTable_RU          restoredLogTable;
            RestoredVATLogTransOper_RU      restoredTransOper;
            ;

            recId       = 0;
            transTxt    = '';
            transDate   = dateNull();

            select firstonly purchBookVATProcessLogTransOper
                where purchBookVATProcessLogTransOper.TransDate         >= fromDate                         &&
                      purchBookVATProcessLogTransOper.TransDate         <= toDate                           &&
                      purchBookVATProcessLogTransOper.TaxCode           == _factureTrans.TaxCode            &&
                      purchBookVATProcessLogTransOper.DefaultDimension  == _factureTrans.DefaultDimension   &&
                      purchBookVATProcessLogTransOper.InventTransId     == _factureTrans.InventTransId      &&
                      purchBookVATProcessLogTransOper.Blocked           == NoYes::No                        &&
                      purchBookVATProcessLogTransOper.BlockedAuto       == NoYes::No                        &&
                     !purchBookVATProcessLogTransOper.CanceledRefRecId;

            if (purchBookVATProcessLogTransOper || _custInvoiceTrans.InvoiceDate >= fromDate)
            {
                while select * from purchBookVATProcessLogTrans
                    where purchBookVATProcessLogTrans.FactureId       == _factureJour.FactureId   &&
                          purchBookVATProcessLogTrans.InvoiceRecIdRef == vendTrans.RecId          &&
                         (purchBookVATProcessLogTrans.TransType       == SalesPurchBookTransType_RU::Invoice           ||
                          purchBookVATProcessLogTrans.TransType       == SalesPurchBookTransType_RU::CreditNote        ||
                          purchBookVATProcessLogTrans.TransType       == SalesPurchBookTransType_RU::AdvanceReport     ||
                          purchBookVATProcessLogTrans.TransType       == SalesPurchBookTransType_RU::AdvanceAdjustment ||
                         (purchBookVATProcessLogTrans.TransType       == SalesPurchBookTransType_RU::SumDiff           &&
                          purchBookVATProcessLogTrans.CorrectedPeriod))
                join purchBookVATProcessLogTransOper
                    where purchBookVATProcessLogTransOper.TransDate         <= toDate                            &&
                          purchBookVATProcessLogTransOper.RefRecId          == purchBookVATProcessLogTrans.RecId &&
                          purchBookVATProcessLogTransOper.TaxCode           == _factureTrans.TaxCode             &&
                          purchBookVATProcessLogTransOper.DefaultDimension  == _factureTrans.DefaultDimension    &&
                          purchBookVATProcessLogTransOper.InventTransId     == _factureTrans.InventTransId       &&
                          purchBookVATProcessLogTransOper.Blocked           == NoYes::No                         &&
                          purchBookVATProcessLogTransOper.BlockedAuto       == NoYes::No                         &&
                         !purchBookVATProcessLogTransOper.CanceledRefRecId
                join * from purchBookVATProcessLogTable
                    order by Executed, StartTime
                    where purchBookVATProcessLogTable.RecId == purchBookVATProcessLogTransOper.LogTableRefRecId
                {
                    recId = purchBookVATProcessLogTrans.RecId;

                    factureAmounts = BookStructSmallVATAmounts_RU::create(purchBookVATProcessLogTransOper.FacturedAmounts);

                    qtyLocal                += factureAmounts.taxAmountVAT() ?
                                               factureAmounts.qty() * purchBookVATProcessLogTransOper.TaxAmount / factureAmounts.taxAmountVAT() :
                                               0;

                    taxAmountLocal          += purchBookVATProcessLogTransOper.TaxAmount;
                    amountLiableToVATLocal  += purchBookVATProcessLogTransOper.AmountLiableToVAT;

                    if (!itemNameLocal)
                    {
                        itemNameLocal = factureAmounts.itemName();
                    }

                    transTxt    = purchBookVATProcessLogTransOper.TransTxt;
                    transDate   = purchBookVATProcessLogTransOper.TransDate;
                }

                select sum(QtySettled) from restoredTransOper
                    index hint TaxDimInventIdx
                    where restoredTransOper.TaxCode              == _factureTrans.TaxCode          &&
                          restoredTransOper.DefaultDimension     == _factureTrans.DefaultDimension &&
                          restoredTransOper.InventTransId        == _factureTrans.InventTransId    &&
                          restoredTransOper.ProcessLogTransRecId == recId                          &&
                          restoredTransOper.LineType             == RestoredVATLineType_RU::Direct &&
                          restoredTransOper.Include
                exists join restoredLogTable
                    where restoredLogTable.TransDate == restoredTransOper.TransDate &&
                          restoredLogTable.TransDate <  toDate                      &&
                          restoredLogTable.Approved;
            }

            factureAmounts = new BookStructSmallVATAmounts_RU();

            factureAmounts.addAmounts(amountLiableToVATLocal + taxAmountLocal,
                                      amountLiableToVATLocal,
                                      taxAmountLocal,
                                      qtyLocal - restoredTransOper.QtySettled);

            factureAmounts.itemName(itemNameLocal);

            return factureAmounts;
        }

        container getFactureInvoiceLine()
        {
            FactureJour_RU  factureJourLocal;
            FactureTrans_RU factureTransLocal;

            select firstonly factureTransLocal
                where factureTransLocal.InvoiceLineNum      == vendInvoiceTrans.LineNum             &&
                      factureTransLocal.InternalInvoiceId   == vendInvoiceTrans.InternalInvoiceId   &&
                      factureTransLocal.InvoiceDate         == vendInvoiceTrans.InvoiceDate         &&
                      factureTransLocal.InvoiceId           == vendInvoiceTrans.InvoiceId           &&
                      factureTransLocal.SalesPurchId        == vendInvoiceTrans.PurchID             &&
                      factureTransLocal.NumberSequenceGroup == vendInvoiceTrans.NumberSequenceGroup &&
                      factureTransLocal.Module              == FactureModule_RU::Vend               &&
                      factureTransLocal.FactureLineType     == FactureLineType_RU::InvoiceLine
            join factureJourLocal
                where factureJourLocal.FactureId == factureTransLocal.FactureId &&
                      factureJourLocal.Module    == factureTransLocal.Module;

            return [factureJourLocal, factureTransLocal];
        }

        void deletePrevTransOper()
        {
            while select forupdate restoredVATLogTransOper
                where restoredVATLogTransOper.TaxCode           == factureTrans.TaxCode             &&
                      restoredVATLogTransOper.DefaultDimension  == factureTrans.DefaultDimension    &&
                      restoredVATLogTransOper.InventTransId     == factureTrans.InventTransId       &&
                      restoredVATLogTransOper.LineType          == RestoredVATLineType_RU::Direct   &&
                     !restoredVATLogTransOper.Asset
            exists join purchBookVATProcessLogTrans
                where purchBookVATProcessLogTrans.RecId           == restoredVATLogTransOper.ProcessLogTransRecId &&
                      purchBookVATProcessLogTrans.FactureId       == factureJour.FactureId   &&
                      purchBookVATProcessLogTrans.FactureDate     == factureJour.FactureDate &&
                      purchBookVATProcessLogTrans.InvoiceRecIdRef == vendTrans.RecId         &&
                     (purchBookVATProcessLogTrans.TransType       == SalesPurchBookTransType_RU::Invoice ||
                      purchBookVATProcessLogTrans.TransType       == SalesPurchBookTransType_RU::CreditNote)
            {
                delete_from restoredVATLogTransOperLink
                    where restoredVATLogTransOperLink.TransDate             == restoredVATLogTransOper.TransDate        &&
                          restoredVATLogTransOperLink.TaxCode               == restoredVATLogTransOper.TaxCode          &&
                          restoredVATLogTransOperLink.DefaultDimension      == restoredVATLogTransOper.DefaultDimension &&
                          restoredVATLogTransOperLink.InventTransId         == restoredVATLogTransOper.InventTransId    &&
                          restoredVATLogTransOperLink.ProcessLogTransRecId  == restoredVATLogTransOper.ProcessLogTransRecId;

                delete_from restoredVATLogTransOperIndirect
                    where restoredVATLogTransOperIndirect.TransDate             == restoredVATLogTransOper.TransDate        &&
                          restoredVATLogTransOperIndirect.TaxCode               == restoredVATLogTransOper.TaxCode          &&
                          restoredVATLogTransOperIndirect.DefaultDimension      == restoredVATLogTransOper.DefaultDimension &&
                          restoredVATLogTransOperIndirect.InventTransId         == restoredVATLogTransOper.InventTransId    &&
                          restoredVATLogTransOperIndirect.ProcessLogTransRecId  == restoredVATLogTransOper.ProcessLogTransRecId &&
                          restoredVATLogTransOperIndirect.LineType              == RestoredVATLineType_RU::Indirect;

                restoredVATLogTransOper.delete();
            }
        }
        ;

        if (! isExportTrans && vatType != VATType_RU::NonLiable)
        {
            return;
        }

        while select salesPurchInvoiceLink
            where salesPurchInvoiceLink.SalesTransRecId   == _custInvoiceTrans.RecId &&
                  salesPurchInvoiceLink.SalesTransTableId == _custInvoiceTrans.TableId
        {
            boolean isMarkup = salesPurchInvoiceLink.PurchTransTableId == tablenum(MarkupTrans);
            if (isMarkup)
            {
                MarkupTrans markupTrans = MarkupTrans::findRecId_W(salesPurchInvoiceLink.PurchTransRecId);
                vendInvoiceTrans = VendInvoiceTrans::findRecId(markupTrans.TransRecId);

                select firstonly factureTrans
                    where factureTrans.MarkupRefRecId  == markupTrans.RecId &&
                          factureTrans.FactureLineType == FactureLineType_RU::Markup
                join factureJour
                    where factureJour.FactureId == factureTrans.FactureId &&
                          factureJour.Module    == factureTrans.Module;

                [factureJourSource, factureTransSource] = getFactureInvoiceLine();
            }
            else
            {
                vendInvoiceTrans = VendInvoiceTrans::findRecId(salesPurchInvoiceLink.PurchTransRecId);

                [factureJour, factureTrans] = getFactureInvoiceLine();
            }

            if (! factureJour || factureJour.VATTaxAgent)
            {
                continue;
            }

            vendTrans = vendInvoiceTrans.vendInvoiceJour().vendTrans();

            container key = [factureJour.FactureId,
                   factureJour.FactureDate,
                   vendTrans.RecId,
                   factureTrans.TaxCode,
                   factureTrans.DefaultDimension,
                   factureTrans.InventTransId];

            if (! mapFactureSettledQty.exists(key))
            {
                soldQty     = 0;

                BookStructSmallVATAmounts_RU amounts = calcSmallVATAmounts(isMarkup ? factureJourSource  : factureJour,
                                                                           isMarkup ? factureTransSource : factureTrans);
                qty = amounts.qty();
                ItemName itemName = amounts.itemName();

                if (isMarkup)
                {
                    amounts = calcSmallVATAmounts(factureJour, factureTrans);
                }

                if (recId)
                {
                    if (! deletePrev)
                    {
                        restoredVATLogTransOper = RestoredVATLogTransOper_RU::find(toDate,
                                                                                   factureTrans.TaxCode,
                                                                                   factureTrans.DefaultDimension,
                                                                                   factureTrans.InventTransId,
                                                                                   recId,
                                                                                   RestoredVATLineType_RU::Direct,
                                                                                   NoYes::No);

                        if (restoredVATLogTransOper &&
                            restoredVATLogTransOper.Executed  == purchBookVATProcessLogTable.Executed &&
                            restoredVATLogTransOper.StartTime == purchBookVATProcessLogTable.StartTime)
                        {
                            continue;
                        }

                        deletePrevTransOper();
                    }

                    soldQty = min(salesPurchInvoiceLink.SettledQty - settledQty(), qty);

                    if (taxParameters.RestoredVATCalcMethod_RU == RestoredVATCalcMethod_RU::ByFactor)
                    {
                        factor = isExportTrans ? factorExport : factorNotLiable;
                    }
                    else
                    {
                        factor  = qty ? soldQty / qty : 0;
                    }

                    restoredVATLogTransOper.clear();
                    restoredVATLogTransOper.ProcessLogTransRecId    = recId;
                    restoredVATLogTransOper.TransDate               = toDate;
                    restoredVATLogTransOper.TaxCode                 = factureTrans.TaxCode;
                    restoredVATLogTransOper.DefaultDimension        = factureTrans.DefaultDimension;
                    restoredVATLogTransOper.InventTransId           = factureTrans.InventTransId;
                    restoredVATLogTransOper.TransTxt                = transTxt;
                    restoredVATLogTransOper.ItemName                = itemName;
                    restoredVATLogTransOper.DateExecuted            = transDate;
                    restoredVATLogTransOper.Qty                     = qty;
                    restoredVATLogTransOper.QtySettled              = soldQty;
                    restoredVATLogTransOper.Include                 = NoYes::Yes;
                    restoredVATLogTransOper.FacturedAmounts         = amounts.pack();
                    restoredVATLogTransOper.LineType                = RestoredVATLineType_RU::Direct;
                    restoredVATLogTransOper.Executed                = purchBookVATProcessLogTable.Executed;
                    restoredVATLogTransOper.StartTime               = purchBookVATProcessLogTable.StartTime;

                    restoredVATLogTransOper.calcTaxAmountDirect(isExportTrans, factor, factureTrans.FactureId, vendTrans.RecId, soldQty);
                    restoredVATLogTransOper.insert();

                    RestoredVATLogTransOperLink_RU::createLine(factureTrans.TaxCode,
                                                               factureTrans.DefaultDimension,
                                                               factureTrans.InventTransId,
                                                               _custInvoiceTrans.RecId,
                                                               recId,
                                                               soldQty,
                                                               toDate);

                    mapFactureSettledQty.insert(key, [recId, soldQty]);
                }
            }
            else
            {
                [recId, settledQty] = mapFactureSettledQty.lookup(key);

                restoredVATLogTransOper = RestoredVATLogTransOper_RU::find(toDate,
                                                                           factureTrans.TaxCode,
                                                                           factureTrans.DefaultDimension,
                                                                           factureTrans.InventTransId,
                                                                           recId,
                                                                           RestoredVATLineType_RU::Direct,
                                                                           NoYes::No,
                                                                           true);
                if (restoredVATLogTransOper)
                {
                    qty     = restoredVATLogTransOper.Qty;
                    soldQty = min(salesPurchInvoiceLink.SettledQty - settledQty(), qty - settledQty);

                    if (taxParameters.RestoredVATCalcMethod_RU == RestoredVATCalcMethod_RU::ByFactor)
                    {
                        factor = isExportTrans ? factorExport : factorNotLiable;
                    }
                    else
                    {
                        factor  = qty ? soldQty / qty : 0;
                    }

                    if (soldQty > 0 || taxParameters.RestoredVATCalcMethod_RU == RestoredVATCalcMethod_RU::ByFactor)
                    {
                        restoredVATLogTransOper.QtySettled = settledQty + soldQty;

                        restoredVATLogTransOper.calcTaxAmountDirect(isExportTrans, factor, factureTrans.FactureId, vendTrans.RecId, soldQty);
                        restoredVATLogTransOper.doUpdate();

                        mapFactureSettledQty.insert(key, [recId, settledQty + soldQty]);

                        RestoredVATLogTransOperLink_RU::createLine(factureTrans.TaxCode,
                                                                   factureTrans.DefaultDimension,
                                                                   factureTrans.InventTransId,
                                                                   _custInvoiceTrans.RecId,
                                                                   recId,
                                                                   soldQty,
                                                                   toDate);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInDirectTrans</Name>
				<Source><![CDATA[
    public void processInDirectTrans(boolean _splitDirect = true)
    {
        PurchBookVATProcessLogTrans_RU      purchBookVATProcessLogTrans, logTrans;
        PurchBookVATProcessLogTransOper_RU  purchBookVATProcessLogTransOper;
        PurchBookVATProcessLogTransOper_RU  processLogTransOper;
        RestoredVATLogTransOper_RU          restoredVATLogTransOper;
        RestoredVATLogTransOper_RU          restoredVATLogTransOperExists;
        RestoredVATLogTransOper_RU          restoredVATLogTransOperIndirect;
        BookStructSmallVATAmounts_RU        amounts;
        FactureJour_RU                      factureJour;

        while select sum(TaxAmount), sum(AmountLiableToVAT) from purchBookVATProcessLogTransOper
            group by RefRecId, TaxCode, DefaultDimension, InventTransId
            where purchBookVATProcessLogTransOper.TransDate     >= fromDate  &&
                  purchBookVATProcessLogTransOper.TransDate     <= toDate    &&
                  purchBookVATProcessLogTransOper.Blocked       == NoYes::No &&
                  purchBookVATProcessLogTransOper.BlockedAuto   == NoYes::No &&
                 !purchBookVATProcessLogTransOper.CanceledRefRecId
        exists join purchBookVATProcessLogTrans
            where purchBookVATProcessLogTrans.RecId             == purchBookVATProcessLogTransOper.RefRecId      &&
                 (purchBookVATProcessLogTrans.TransType         == SalesPurchBookTransType_RU::Invoice           ||
                  purchBookVATProcessLogTrans.TransType         == SalesPurchBookTransType_RU::CreditNote        ||
                  purchBookVATProcessLogTrans.TransType         == SalesPurchBookTransType_RU::AdvanceReport     ||
                  purchBookVATProcessLogTrans.TransType         == SalesPurchBookTransType_RU::AdvanceAdjustment ||
                  purchBookVATProcessLogTrans.TransType         == SalesPurchBookTransType_RU::TaxCorrection     ||
                 (purchBookVATProcessLogTrans.TransType         == SalesPurchBookTransType_RU::SumDiff           &&
                  purchBookVATProcessLogTrans.CorrectedPeriod))
        notexists join restoredVATLogTransOper
            index hint TaxDimInventIdx
            where restoredVATLogTransOper.TransDate             == toDate                                           &&
                  restoredVATLogTransOper.TaxCode               == purchBookVATProcessLogTransOper.TaxCode          &&
                  restoredVATLogTransOper.DefaultDimension      == purchBookVATProcessLogTransOper.DefaultDimension &&
                  restoredVATLogTransOper.InventTransId         == purchBookVATProcessLogTransOper.InventTransId    &&
                  restoredVATLogTransOper.ProcessLogTransRecId  == purchBookVATProcessLogTransOper.RefRecId
        {
            logTrans = PurchBookVATProcessLogTrans_RU::find(purchBookVATProcessLogTransOper.RefRecId);

            if (logTrans.TransType == SalesPurchBookTransType_RU::TaxCorrection)
            {
                select firstonly factureJour
                    where factureJour.FactureId == logTrans.FactureId                   &&
                          factureJour.Module    == FactureModule_RU::TaxCorrectionPurch &&
                          factureJour.VATTaxAgent;

                if (factureJour)
                {
                    continue;
                }
            }

            select firstonly processLogTransOper
                where processLogTransOper.TaxCode           == purchBookVATProcessLogTransOper.TaxCode          &&
                      processLogTransOper.DefaultDimension  == purchBookVATProcessLogTransOper.DefaultDimension &&
                      processLogTransOper.InventTransId     == purchBookVATProcessLogTransOper.InventTransId    &&
                      processLogTransOper.RefRecId          == purchBookVATProcessLogTransOper.RefRecId         &&
                      processLogTransOper.TransDate         >= fromDate                                         &&
                      processLogTransOper.TransDate         <= toDate                                           &&
                      processLogTransOper.Blocked           == NoYes::No                                        &&
                      processLogTransOper.BlockedAuto       == NoYes::No                                        &&
                     !processLogTransOper.CanceledRefRecId;

            amounts = BookStructSmallVATAmounts_RU::create(processLogTransOper.FacturedAmounts);
            amounts.qty(amounts.taxAmountVAT() ?
                        amounts.qty() * purchBookVATProcessLogTransOper.TaxAmount / amounts.taxAmountVAT() :
                        0);

            amounts.taxAmountVAT(purchBookVATProcessLogTransOper.TaxAmount);
            amounts.amountLiableToVAT(purchBookVATProcessLogTransOper.AmountLiableToVAT);
            amounts.amountInclVAT(purchBookVATProcessLogTransOper.AmountLiableToVAT + purchBookVATProcessLogTransOper.TaxAmount);

            restoredVATLogTransOperIndirect.clear();
            restoredVATLogTransOperIndirect.ProcessLogTransRecId    = purchBookVATProcessLogTransOper.RefRecId;
            restoredVATLogTransOperIndirect.TransDate               = toDate;
            restoredVATLogTransOperIndirect.TaxCode                 = purchBookVATProcessLogTransOper.TaxCode;
            restoredVATLogTransOperIndirect.DefaultDimension        = purchBookVATProcessLogTransOper.DefaultDimension;
            restoredVATLogTransOperIndirect.InventTransId           = purchBookVATProcessLogTransOper.InventTransId;
            restoredVATLogTransOperIndirect.TaxAmount               = purchBookVATProcessLogTransOper.TaxAmount         *  factorExport;
            restoredVATLogTransOperIndirect.TaxAmountNotLiable      = purchBookVATProcessLogTransOper.TaxAmount         *  factorNotLiable;
            restoredVATLogTransOperIndirect.AmountLiableToVAT       = purchBookVATProcessLogTransOper.AmountLiableToVAT * (factorExport + factorNotLiable);
            restoredVATLogTransOperIndirect.TransTxt                = processLogTransOper.TransTxt;
            restoredVATLogTransOperIndirect.DateExecuted            = processLogTransOper.TransDate;
            restoredVATLogTransOperIndirect.QtySettled              = amounts.qty();
            restoredVATLogTransOperIndirect.ItemName                = amounts.itemName();
            restoredVATLogTransOperIndirect.FacturedAmounts         = amounts.pack();
            restoredVATLogTransOperIndirect.Include                 = NoYes::Yes;
            restoredVATLogTransOperIndirect.LineType                = RestoredVATLineType_RU::Indirect;
            restoredVATLogTransOperIndirect.insert();

            this.sumIncVATIndirect(purchBookVATProcessLogTransOper.TaxCode, purchBookVATProcessLogTransOper.TaxAmount);
        }

        if (! _splitDirect || taxParameters.RestoredVATCalcMethod_RU == RestoredVATCalcMethod_RU::ByFactor)
        {
            return;
        }

        while select sum(Qty),
                     sum(QtySettled),
                     sum(AmountLiableToVAT),
                     sum(TaxAmount),
                     sum(TaxAmountNotLiable) from restoredVATLogTransOper
            group by TaxCode, DefaultDimension, InventTransId, ProcessLogTransRecId
            where restoredVATLogTransOper.TransDate == toDate                          &&
                  restoredVATLogTransOper.LineType  == RestoredVATLineType_RU::Direct  &&
                 !restoredVATLogTransOper.Asset
        exists join purchBookVATProcessLogTransOper
            where purchBookVATProcessLogTransOper.TransDate         >= fromDate                                     &&
                  purchBookVATProcessLogTransOper.TransDate         <= toDate                                       &&
                  purchBookVATProcessLogTransOper.TaxCode           == restoredVATLogTransOper.TaxCode              &&
                  purchBookVATProcessLogTransOper.DefaultDimension  == restoredVATLogTransOper.DefaultDimension     &&
                  purchBookVATProcessLogTransOper.InventTransId     == restoredVATLogTransOper.InventTransId        &&
                  purchBookVATProcessLogTransOper.RefRecId          == restoredVATLogTransOper.ProcessLogTransRecId &&
                  purchBookVATProcessLogTransOper.Blocked           == NoYes::No                                    &&
                  purchBookVATProcessLogTransOper.BlockedAuto       == NoYes::No                                    &&
                 !purchBookVATProcessLogTransOper.CanceledRefRecId
        notexists join restoredVATLogTransOperExists
            index hint TaxDimInventIdx
            where restoredVATLogTransOperExists.TransDate             == toDate                                       &&
                  restoredVATLogTransOperExists.TaxCode               == restoredVATLogTransOper.TaxCode              &&
                  restoredVATLogTransOperExists.DefaultDimension      == restoredVATLogTransOper.DefaultDimension     &&
                  restoredVATLogTransOperExists.InventTransId         == restoredVATLogTransOper.InventTransId        &&
                  restoredVATLogTransOperExists.ProcessLogTransRecId  == restoredVATLogTransOper.ProcessLogTransRecId &&
                  restoredVATLogTransOperExists.LineType              == RestoredVATLineType_RU::Indirect             &&
                 !restoredVATLogTransOperExists.Asset
        {
            restoredVATLogTransOperIndirect = RestoredVATLogTransOper_RU::find(toDate,
                                                                               restoredVATLogTransOper.TaxCode,
                                                                               restoredVATLogTransOper.DefaultDimension,
                                                                               restoredVATLogTransOper.InventTransId,
                                                                               restoredVATLogTransOper.ProcessLogTransRecId,
                                                                               RestoredVATLineType_RU::Direct,
                                                                               NoYes::No);

            select sum(TaxAmount), sum(AmountLiableToVAT) from processLogTransOper
                where processLogTransOper.TaxCode           == restoredVATLogTransOper.TaxCode              &&
                      processLogTransOper.DefaultDimension  == restoredVATLogTransOper.DefaultDimension     &&
                      processLogTransOper.InventTransId     == restoredVATLogTransOper.InventTransId        &&
                      processLogTransOper.RefRecId          == restoredVATLogTransOper.ProcessLogTransRecId &&
                      processLogTransOper.TransDate         >= fromDate                                     &&
                      processLogTransOper.TransDate         <= toDate                                       &&
                      processLogTransOper.Blocked           == NoYes::No                                    &&
                      processLogTransOper.BlockedAuto       == NoYes::No                                    &&
                     !processLogTransOper.CanceledRefRecId;

            TaxAmount taxAmount = processLogTransOper.TaxAmount     -
                        restoredVATLogTransOper.TaxAmount -
                        restoredVATLogTransOper.TaxAmountNotLiable;

            if (taxAmount > 0)
            {
                amounts   = new BookStructSmallVATAmounts_RU();
                amounts.taxAmountVAT(taxAmount);
                amounts.amountLiableToVAT(processLogTransOper.AmountLiableToVAT *
                                         (restoredVATLogTransOper.Qty - restoredVATLogTransOper.QtySettled) / restoredVATLogTransOper.Qty);
                amounts.amountInclVAT(amounts.amountLiableToVAT() + amounts.taxAmountVAT());

                restoredVATLogTransOperIndirect.TaxAmount           = taxAmount * factorExport;
                restoredVATLogTransOperIndirect.TaxAmountNotLiable  = taxAmount * factorNotLiable;
                restoredVATLogTransOperIndirect.AmountLiableToVAT   = amounts.amountLiableToVAT() * (factorExport + factorNotLiable);
                restoredVATLogTransOperIndirect.QtySettled          = restoredVATLogTransOper.Qty - restoredVATLogTransOper.QtySettled;
                restoredVATLogTransOperIndirect.FacturedAmounts     = amounts.pack();
                restoredVATLogTransOperIndirect.Include             = NoYes::Yes;
                restoredVATLogTransOperIndirect.LineType            = RestoredVATLineType_RU::Indirect;
                restoredVATLogTransOperIndirect.insert();

                this.sumIncVATIndirect(restoredVATLogTransOperIndirect.TaxCode, taxAmount);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcIncomingIndirect</Name>
				<Source><![CDATA[
    public void recalcIncomingIndirect()
    {
        RestoredVATLogTransOper_RU      restoredVATLogTransOper;

        restoredVATLogTable.TaxStandardIndirectInc = 0;
        restoredVATLogTable.TaxReducedIndirectInc  = 0;

        while select restoredVATLogTransOper
            where restoredVATLogTransOper.TransDate == toDate &&
                  restoredVATLogTransOper.LineType  == RestoredVATLineType_RU::Indirect
        {
            BookStructSmallVATAmounts_RU amounts = BookStructSmallVATAmounts_RU::create(restoredVATLogTransOper.FacturedAmounts);

            this.sumIncVATIndirect(restoredVATLogTransOper.TaxCode, amounts.taxAmountVAT());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcSalesTaxTrans</Name>
				<Source><![CDATA[
    public void recalcSalesTaxTrans()
    {
        CustInvoiceJour                     custInvoiceJour;
        CustInvoiceTrans                    custInvoiceTrans;
        TaxTrans                            taxTrans;
        TaxTable                            taxTable;
        FactureJour_RU                      factureJour;
        FactureTrans_RU                     factureTrans;
        CustInvoiceTrans                    custInvoiceTransExists;
        RestoredVATLogTransOper_RU          vatLogTransOper;
        RestoredVATLogTransOper_RU          vatLogTransOperVAT20;
        RestoredVATLogTransOper_RU          vatLogTransOperVAT10;
        RestoredVATLogTransOperLink_RU      vatLogTransOperLink;
        RestoredVATSalesTaxTrans_RU         vatSalesTaxTrans;

        if (! restoredVATLogTable)
        {
            restoredVATLogTable = RestoredVATLogTable_RU::find(toDate);
        }

        select sum(TaxAmount) from vatLogTransOperVAT20
            where vatLogTransOperVAT20.TransDate == toDate                           &&
                  vatLogTransOperVAT20.LineType  == RestoredVATLineType_RU::Indirect &&
                  vatLogTransOperVAT20.Include
        exists join taxTable
            where taxTable.TaxCode      == vatLogTransOperVAT20.TaxCode &&
                  taxTable.TaxType_W    == TaxType_W::VAT;

        select sum(TaxAmount) from vatLogTransOperVAT10
            where vatLogTransOperVAT10.TransDate == toDate                           &&
                  vatLogTransOperVAT10.LineType  == RestoredVATLineType_RU::Indirect &&
                  vatLogTransOperVAT10.Include
        exists join taxTable
            where taxTable.TaxCode      == vatLogTransOperVAT10.TaxCode &&
                  taxTable.TaxType_W    == TaxType_W::VATReduced;

        delete_from vatSalesTaxTrans
            where vatSalesTaxTrans.TransDate >= fromDate &&
                  vatSalesTaxTrans.TransDate <= toDate   &&
                  vatSalesTaxTrans.PrevPeriod;

        while select taxTrans
        join * from custInvoiceJour
            where custInvoiceJour.InvoiceDate   <  fromDate         &&
                  custInvoiceJour.LedgerVoucher == taxTrans.Voucher &&
                  custInvoiceJour.InvoiceDate   == taxTrans.TransDate
        exists join custInvoiceTrans
            where custInvoiceTrans.InventTransId == taxTrans.InventTransId    &&
                  custInvoiceTrans.InvoiceId     == custInvoiceJour.InvoiceId &&
                  custInvoiceTrans.InvoiceDate   == custInvoiceJour.InvoiceDate
        exists join vatLogTransOperLink
            where vatLogTransOperLink.TransDate             == toDate &&
                  vatLogTransOperLink.CustInvoiceTransRecId == custInvoiceTrans.RecId
        exists join vatLogTransOper
            where vatLogTransOper.TransDate             == toDate                               &&
                  vatLogTransOper.LineType              == RestoredVATLineType_RU::Direct       &&
                  vatLogTransOper.Include                                                       &&
                 !vatLogTransOper.Asset                                                         &&
                  vatLogTransOper.TaxCode               == vatLogTransOperLink.TaxCode          &&
                  vatLogTransOper.DefaultDimension      == vatLogTransOperLink.DefaultDimension &&
                  vatLogTransOper.InventTransId         == vatLogTransOperLink.InventTransId    &&
                  vatLogTransOper.ProcessLogTransRecId  == vatLogTransOperLink.ProcessLogTransRecId
        {
            vatSalesTaxTrans.clear();
            vatSalesTaxTrans.TransDate              = toDate;
            vatSalesTaxTrans.CustInvoiceJourRecId   = custInvoiceJour.RecId;
            vatSalesTaxTrans.initFromTaxTrans(taxTrans);

            select firstonly FactureId, Module from factureTrans
                where factureTrans.TaxCode          == taxTrans.TaxCode             &&
                      factureTrans.InventTransId    == taxTrans.InventTransId       &&
                      factureTrans.InvoiceId        == custInvoiceJour.InvoiceId    &&
                      factureTrans.InvoiceDate      == custInvoiceJour.InvoiceDate
            join FactureId, Module, FactureDate, FactureExternalId from factureJour
                where factureJour.FactureId == factureTrans.FactureId &&
                      factureJour.Module    == factureTrans.Module;

            vatSalesTaxTrans.FactureId          = factureJour.FactureId;
            vatSalesTaxTrans.FactureModule      = factureJour.Module;
            vatSalesTaxTrans.FactureDate        = factureJour.FactureDate;
            vatSalesTaxTrans.FactureExternalId  = factureJour.FactureExternalId;
            vatSalesTaxTrans.PrevPeriod         = true;
            vatSalesTaxTrans.insert();
        }

        while select forupdate vatSalesTaxTrans
            where vatSalesTaxTrans.TransDate == toDate
        {
            vatSalesTaxTrans.TaxStandardDirect = 0;
            vatSalesTaxTrans.TaxReducedDirect  = 0;

            while select sum(TaxAmount),
                         sum(TaxAmountNotLiable),
                         sum(QtySettled) from vatLogTransOper
                group by TaxCode
                where vatLogTransOper.TransDate == toDate                         &&
                      vatLogTransOper.LineType  == RestoredVATLineType_RU::Direct &&
                      vatLogTransOper.Include                                     &&
                     !vatLogTransOper.Asset
            join sum(SettledQty) from vatLogTransOperLink
                where vatLogTransOperLink.TransDate             == toDate                           &&
                      vatLogTransOperLink.TaxCode               == vatLogTransOper.TaxCode          &&
                      vatLogTransOperLink.DefaultDimension      == vatLogTransOper.DefaultDimension &&
                      vatLogTransOperLink.InventTransId         == vatLogTransOper.InventTransId    &&
                      vatLogTransOperLink.ProcessLogTransRecId  == vatLogTransOper.ProcessLogTransRecId
            exists join custInvoiceTransExists
                where custInvoiceTransExists.InventTransId  == vatSalesTaxTrans.InventTransId &&
                      custInvoiceTransExists.RecId          == vatLogTransOperLink.CustInvoiceTransRecId
            {
                Factor factor = vatLogTransOperLink.SettledQty < vatLogTransOper.QtySettled ?
                         vatLogTransOperLink.SettledQty / vatLogTransOper.QtySettled :
                         1;

                if (this.findTaxTable(vatLogTransOper.TaxCode).TaxType_W == TaxType_W::VAT)
                {
                    vatSalesTaxTrans.TaxStandardDirect += factor * (vatLogTransOper.TaxAmount + vatLogTransOper.TaxAmountNotLiable);
                }
                else
                {
                    vatSalesTaxTrans.TaxReducedDirect  += factor * (vatLogTransOper.TaxAmount + vatLogTransOper.TaxAmountNotLiable);
                }
            }

            if (! vatSalesTaxTrans.PrevPeriod)
            {
                vatSalesTaxTrans.Factor = restoredVATLogTable.ExportGain                                  ?
                                          vatSalesTaxTrans.TaxBaseAmount / restoredVATLogTable.ExportGain :
                                          0;

                vatSalesTaxTrans.TaxStandardIndirect = vatSalesTaxTrans.Factor * vatLogTransOperVAT20.TaxAmount;
                vatSalesTaxTrans.TaxReducedIndirect  = vatSalesTaxTrans.Factor * vatLogTransOperVAT10.TaxAmount;
            }

            vatSalesTaxTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00027, funcName());

        try
        {
            ttsbegin;

            this.clearPrevCalculation();
            this.init();

            this.updateGain();
            this.updateVATLog();
            this.recalcSalesTaxTrans();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    public void saveLast()
    {
        xSysLastValue::putValue(this.packSysLastValues(),
                                this.lastValueDataAreaId(),
                                this.lastValueUserId(),
                                this.lastValueType(),
                                this.lastValueElementName(),
                                this.lastValueDesignName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumIncVATIndirect</Name>
				<Source><![CDATA[
    private void sumIncVATIndirect(TaxCode _taxCode, TaxAmount _taxAmount)
    {
        if (this.findTaxTable(_taxCode).TaxType_W == TaxType_W::VAT)
        {
            restoredVATLogTable.TaxStandardIndirectInc += _taxAmount;
        }
        else
        {
            restoredVATLogTable.TaxReducedIndirectInc  += _taxAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case CurrentVersion:
                [   version, 
                    updateGain,
                    fromDate,
                    toDate,
                    deletePrev] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackSysLastValues</Name>
				<Source><![CDATA[
    protected void unpackSysLastValues(container _packedValues)
    {
        Version version = RunBase::getVersion(_packedValues);

        switch (version)
        {
            case SysLastValuesCurrentVersion:
                [version, updateGain, deletePrev] = _packedValues;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateGain</Name>
				<Source><![CDATA[
    protected void updateGain()
    {
        CustInvoiceJour             custInvoiceJour;
        CustInvoiceTrans            custInvoiceTrans;
        FactureJour_RU              factureJour;
        FactureTrans_RU             factureTrans;
        TaxTrans                    taxTrans;
        RestoredVATLogGain_RU       restoredVATLogGain;
        RestoredVATLogGain_RU       restoredVATLogGainExists;
        RestoredVATSalesTaxTrans_RU restoredVATSalesTaxTrans;
        SalesPurchInvoiceLink_RU    salesPurchInvoiceLink;

        if (updateGain)
        {
            if (deletePrev)
            {
                delete_from restoredVATLogGain
                    where restoredVATLogGain.TransDate == toDate;

                delete_from restoredVATSalesTaxTrans
                    where restoredVATSalesTaxTrans.TransDate >= fromDate &&
                          restoredVATSalesTaxTrans.TransDate <= toDate;
            }

            while select custInvoiceJour
                where custInvoiceJour.InvoiceDate >= fromDate &&
                      custInvoiceJour.InvoiceDate <= toDate
            notexists join restoredVATLogGainExists
                where restoredVATLogGainExists.TransDate            == toDate &&
                      restoredVATLogGainExists.CustInvoiceJourRecId == custInvoiceJour.RecId
            {
                restoredVATLogGain.clear();
                restoredVATLogGain.TransDate            = toDate;
                restoredVATLogGain.CustInvoiceJourRecId = custInvoiceJour.RecId;

                while select sum(TaxBaseAmount) from taxTrans
                    group by TaxCode, InventTransId
                    where taxTrans.Voucher   == custInvoiceJour.LedgerVoucher &&
                          taxTrans.TransDate == custInvoiceJour.InvoiceDate
                {
                    TaxTable taxTable = this.findTaxTable(taxTrans.TaxCode);
                    if (taxTable.TaxType_W == TaxType_W::VATZero && taxTable.DomesticMarketTaxCode_RU)
                    {
                        restoredVATLogGain.ExportGain -= taxTrans.TaxBaseAmount;

                        restoredVATSalesTaxTrans.clear();
                        restoredVATSalesTaxTrans.TransDate              = toDate;
                        restoredVATSalesTaxTrans.CustInvoiceJourRecId   = custInvoiceJour.RecId;
                        restoredVATSalesTaxTrans.initFromTaxTrans(taxTrans);

                        select firstonly FactureId, Module from factureTrans
                            where factureTrans.TaxCode          == taxTrans.TaxCode             &&
                                  factureTrans.InventTransId    == taxTrans.InventTransId       &&
                                  factureTrans.InvoiceId        == custInvoiceJour.InvoiceId    &&
                                  factureTrans.InvoiceDate      == custInvoiceJour.InvoiceDate
                        join FactureId, Module, FactureDate, FactureExternalId from factureJour
                            where factureJour.FactureId == factureTrans.FactureId &&
                                  factureJour.Module    == factureTrans.Module;

                        restoredVATSalesTaxTrans.FactureId          = factureJour.FactureId;
                        restoredVATSalesTaxTrans.FactureModule      = factureJour.Module;
                        restoredVATSalesTaxTrans.FactureDate        = factureJour.FactureDate;
                        restoredVATSalesTaxTrans.FactureExternalId  = factureJour.FactureExternalId;
                        restoredVATSalesTaxTrans.insert();
                    }
                    else
                    {
                        restoredVATLogGain.DomesticGain -= taxTrans.TaxBaseAmount;
                    }

                    restoredVATLogGain.TotalGain -= taxTrans.TaxBaseAmount;
                }

                restoredVATLogGain.NotLiableGain = custInvoiceJour.InvoiceAmountMST -
                                                   custInvoiceJour.SumTaxMST        -
                                                   restoredVATLogGain.TotalGain;

                restoredVATLogGain.TotalGain += restoredVATLogGain.NotLiableGain;
                restoredVATLogGain.Include = NoYes::Yes;

                if (taxParameters.RestoredVATGainCalcMethod_RU == RestoredVATGainCalcMethod_RU::Indirect)
                {
                    select firstonly custInvoiceTrans
                        where custInvoiceTrans.SalesId              == custInvoiceJour.SalesId      &&
                              custInvoiceTrans.InvoiceId            == custInvoiceJour.InvoiceId    &&
                              custInvoiceTrans.InvoiceDate          == custInvoiceJour.InvoiceDate  &&
                              custInvoiceTrans.NumberSequenceGroup  == custInvoiceJour.NumberSequenceGroup
                    exists join salesPurchInvoiceLink
                        where salesPurchInvoiceLink.SalesTransTableId   == custInvoiceTrans.TableId &&
                              salesPurchInvoiceLink.SalesTransRecId     == custInvoiceTrans.RecId;

                    if (custInvoiceTrans)
                    {
                        restoredVATLogGain.Include = NoYes::No;
                    }
                }

                restoredVATLogGain.insert();
            }
        }

        select sum(TotalGain),
               sum(ExportGain),
               sum(DomesticGain),
               sum(NotLiableGain) from restoredVATLogGain
            where restoredVATLogGain.TransDate == toDate &&
                  restoredVATLogGain.Include;

        restoredVATLogTable.TotalGain       = restoredVATLogGain.TotalGain;
        restoredVATLogTable.ExportGain      = restoredVATLogGain.ExportGain;
        restoredVATLogTable.DomesticGain    = restoredVATLogGain.DomesticGain;
        restoredVATLogTable.NotLiableGain   = restoredVATLogGain.NotLiableGain;

        factorExport    = restoredVATLogTable.factorExport()    / 100;
        factorNotLiable = restoredVATLogTable.factorNotLiable() / 100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVATLog</Name>
				<Source><![CDATA[
    protected void updateVATLog()
    {
        CustInvoiceJour             custInvoiceJour;
        CustInvoiceTrans            custInvoiceTrans;
        SalesPurchInvoiceLink_RU    salesPurchInvoiceLink;

        restoredVATLogTable.RecalcAll = NoYes::No;

        while select * from custInvoiceJour
            where custInvoiceJour.InvoiceDate <= toDate
        join custInvoiceTrans
            where custInvoiceTrans.InvoiceId           == custInvoiceJour.InvoiceId           &&
                  custInvoiceTrans.InvoiceDate         == custInvoiceJour.InvoiceDate         &&
                  custInvoiceTrans.NumberSequenceGroup == custInvoiceJour.NumberSequenceGroup &&
                  custInvoiceTrans.SalesId             == custInvoiceJour.SalesId
        exists join salesPurchInvoiceLink
            where salesPurchInvoiceLink.SalesTransRecId   == custInvoiceTrans.RecId &&
                  salesPurchInvoiceLink.SalesTransTableId == custInvoiceTrans.TableId
        {
            this.processDirectTrans(custInvoiceTrans);
        }

        this.processInDirectTrans();
        this.processAssets(); //should be called at the and of processing

        this.createLogTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RestoredVATLogUpdate_RU construct()
    {
        return new RestoredVATLogUpdate_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@GLS114229";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPeriod</Name>
				<Source><![CDATA[
    static RestoredVATLogUpdate_RU newPeriod(StartDate   _dateFrom,
                                             EndDate     _dateTo)
    {
        RestoredVATLogUpdate_RU restoredVATLogUpdate = RestoredVATLogUpdate_RU::construct();

        restoredVATLogUpdate.parmFromDate(_dateFrom);
        restoredVATLogUpdate.parmToDate(_dateTo);

        return restoredVATLogUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>