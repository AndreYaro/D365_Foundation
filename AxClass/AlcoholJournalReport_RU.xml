<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AlcoholJournalReport_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AlcoholJournalReport_RU</c> class creats alcohol report.
/// </summary>
class AlcoholJournalReport_RU extends XMLExcelReport_RU implements BatchRetryable
{
    private AlcoholJournalId_RU         journalId;
    private FromDate                    fromDate;
    private ToDate                      toDate;
    private BranchId_RU                 branchId;
    private QueryRun                    queryRun;
    private TransDate                   currentDate;
    private RNumDateInWordConverter     converter;
    private int                         lineNum;
    private AlcoholProductionType_RU    alcoholProductionType;
    private AlcoholJournalTrans_RU      alcoholJournalTrans;
    private InventTable                 inventTable;
    private str                         totalTextReceipt, totalTextIssue, itemInfoTxt;
    private Name                        counteragentNameTxt;
    private Qty                         totalReceiptQty, totalIssueQty,
                                        dailyReceiptQty, dailyIssueQty,
                                        sumQtyReceipt, sumQtyIssue;
    private boolean skipCalcRangeHeight;

    private DialogField                 fieldFromDate;
    private DialogField                 fieldToDate;

    protected const int CurrentVersion = 1;
    protected const int WidthInColumns = 167;

    protected const str reportHeader    = "ReportHeader";
    protected const str columnNumbers   = "ColumnNumbers";
    protected const str dayHeader       = "DayHeader";
    protected const str data            = "Data";
    protected const str totals          = "Totals";
    protected const real DefaultHeight = 12.75;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyQueryRange</Name>
				<Source><![CDATA[
    private void applyQueryRange(Query  _query)
    {
        findOrCreateRange_W(_query.dataSourceTable(tableNum(AlcoholJournalTable_RU)), fieldNum(AlcoholJournalTable_RU, BranchId), branchId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        if (skipCalcRangeHeight)
        {
            return DefaultHeight;
        }

        return max (document.getNamedRangeHeightWrapped('Data2',  itemInfoTxt),
                    document.getNamedRangeHeightWrapped('Data4',  counteragentNameTxt),
                    document.getNamedRangeHeightWrapped('Data7',  alcoholJournalTrans.InvoiceId),
                    document.getNamedRangeHeightWrapped('Data11', alcoholJournalTrans.RecordContent),
                    12.75);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        int totalDays = toDate - fromDate;

        converter = RNumDateInWordConverter::construct();
        this.initSectionMap();
        this.setCurrentWorksheetNum(1, WidthInColumns);
        this.execute(reportHeader);
        this.execute(columnNumbers);

        #avifiles
        currentDate = fromDate;
        queryRun.query().dataSourceTable(tableNum(AlcoholJournalTrans_RU)).addSortField(fieldNum(AlcoholJournalTrans_RU, Direction), SortOrder::Ascending);
        this.getRunBase().progressInit("@SYS4128", totalDays, #AviPrint);

        while (currentDate <= toDate)
        {
            boolean     dateInfoPrinted = false;

            progress.incCount();
            progress.setText(strfmt('%1', currentDate));

            dailyReceiptQty          = 0;
            dailyIssueQty            = 0;

            queryRun.reset();
            findOrCreateRange_W(queryRun.query().dataSourceTable(tableNum(AlcoholJournalTrans_RU)), fieldNum(AlcoholJournalTrans_RU, TransDate), queryValue(currentDate));

            while (queryRun.next())
            {
                if (! dateInfoPrinted)
                {
                    this.execute(dayHeader);
                    dateInfoPrinted = true;
                }

                lineNum++;
                alcoholJournalTrans     = queryRun.get(tableNum(AlcoholJournalTrans_RU));
                inventTable             = queryRun.get(tableNum(InventTable));
                alcoholProductionType   = queryRun.get(tableNum(AlcoholProductionType_RU));

                itemInfoTxt             = strfmt("@SYS76498", alcoholProductionType.Name, inventTable.ItemId);
                counteragentNameTxt     = alcoholJournalTrans.counteragentName();

                if (alcoholJournalTrans.Direction == InventDirection::Receipt)
                {
                    dailyReceiptQty     += alcoholJournalTrans.TotalQty;
                    totalReceiptQty     += alcoholJournalTrans.TotalQty;
                }
                else
                {
                    dailyIssueQty       += alcoholJournalTrans.TotalQty;
                    totalIssueQty       += alcoholJournalTrans.TotalQty;
                }

                this.execute(data);
            }

            if (dateInfoPrinted)
            {
                totalTextReceipt    = "@ApplicationSuite_Localization:AlcoholTotalReceivedDay";
                totalTextIssue      = "@ApplicationSuite_Localization:AlcoholTotalIssuedDay";
                sumQtyReceipt       = dailyReceiptQty;
                sumQtyIssue         = dailyIssueQty;

                this.execute(totals);
            }

            currentDate++;
        }

        totalTextReceipt        = strupr("@ApplicationSuite_Localization:AlcoholTotalReceived");
        totalTextIssue          = strupr("@ApplicationSuite_Localization:AlcoholTotalIssued");
        sumQtyReceipt           = totalReceiptQty;
        sumQtyIssue             = totalIssueQty;

        this.execute(totals);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog  dialog;

        dialog = super();

        fieldFromDate    = dialog.addFieldValue(extendedtypestr(FromDate), fromDate);
        fieldToDate      = dialog.addFieldValue(extendedtypestr(ToDate),   toDate);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Defines the name of the file to be created.
    /// </summary>
    /// <returns>
    ///     The name of the file to be created.
    /// </returns>
    protected Filename fileName()
    {
        return resourceStr(AlcoholJournalReport_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Defines postfix for the new file.
    /// </summary>
    /// <returns>
    ///     Postfix for the new file.
    /// </returns>
    protected Filename fileNamePostfix()
    {
        return strFmt('_%1_%2_%3',
                      branchId,
                      date2str(fromDate, 321, 2, 0, 2, 0, 4, DateFlags::None),
                      date2str(toDate,   321, 2, 0, 2, 0, 4, DateFlags::None));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case reportHeader:
                this.fillReportHeaderSection();
                break;

            case dayHeader:
                this.fillDayHeaderSection();
                break;

            case data:
                this.fillDataSection();
                break;

            case totals:
                this.fillTotalsSection();
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDataSection</Name>
				<Source><![CDATA[
    #xppTexts
    private void fillDataSection()
    {
        this.insertValueToSection('Data1',  int2str(LineNum));

        if (alcoholJournalTrans.Direction == InventDirection::Receipt)
        {
            this.insertValueToSection('Data2',  itemInfoTxt);
            this.insertValueToSection('Data3',  InventTable.AlcoholProductionTypeId_RU);
            this.insertValueToSection('Data4',  counteragentNameTxt);
            this.insertValueToSection('Data5',  alcoholJournalTrans.counteragentINN());
            this.insertValueToSection('Data6',  strFmt("@SYS82282", alcoholJournalTrans.InvoiceDate));
            this.insertValueToSection('Data7',  alcoholJournalTrans.InvoiceId);
            this.insertValueToSection('Data8',  alcoholJournalTrans.ContainerCapacity);
            this.insertValueToSection('Data9',  alcoholJournalTrans.ContainerQty);
            this.insertValueToSection('Data10', alcoholJournalTrans.TotalQty);

            this.insertValueToSection('Data11', #emptyString);
            this.insertValueToSection('Data12', #emptyString);
            this.insertValueToSection('Data13', #emptyString);
            this.insertValueToSection('Data14', #emptyString);
            this.insertValueToSection('Data15', #emptyString);
        }
        else
        {
            this.insertValueToSection('Data2',  #emptyString);
            this.insertValueToSection('Data3',  #emptyString);
            this.insertValueToSection('Data4',  #emptyString);
            this.insertValueToSection('Data5',  #emptyString);
            this.insertValueToSection('Data6',  #emptyString);
            this.insertValueToSection('Data7',  #emptyString);
            this.insertValueToSection('Data8',  #emptyString);
            this.insertValueToSection('Data9',  #emptyString);
            this.insertValueToSection('Data10', #emptyString);

            this.insertValueToSection('Data11', alcoholJournalTrans.RecordContent);
            this.insertValueToSection('Data12', itemInfoTxt);
            this.insertValueToSection('Data13', alcoholJournalTrans.ContainerCapacity);
            this.insertValueToSection('Data14', alcoholJournalTrans.ContainerQty);
            this.insertValueToSection('Data15', alcoholJournalTrans.TotalQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDayHeaderSection</Name>
				<Source><![CDATA[
    private void fillDayHeaderSection()
    {
        //BP deviation documented
        this.insertValueToSection('CurrentDate', converter.date2str(currentDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeaderSection</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fills report header with data.
    /// </summary>
    private void fillReportHeaderSection()
    {
        QueryBuildRange rangeBranchId = queryRun.query().dataSourceTable(tableNum(AlcoholJournalTable_RU)).findRange(fieldNum(AlcoholJournalTable_RU, BranchId));
        
        if (rangeBranchId)
        {
            this.insertValueToSection('SeparateDivisionFilter', rangeBranchId.value());
        }

        this.insertValueToSection('FromDateFilter', strFmt("@SYS82282", fromDate));
        this.insertValueToSection('ToDateFilter', strFmt("@SYS82282", toDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTotalsSection</Name>
				<Source><![CDATA[
    private void fillTotalsSection()
    {
        this.insertValueToSection('TotalTextReceipt', totalTextReceipt);
        this.insertValueToSection('SumQtyReceipt', sumQtyReceipt);

        this.insertValueToSection('TotalTextIssue', totalTextIssue);
        this.insertValueToSection('SumQtyIssue', sumQtyIssue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        fromDate    = fieldFromDate.value();
        toDate      = fieldToDate.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromJournalId</Name>
				<Source><![CDATA[
    public void initFromJournalId(QueryRun _queryRun = null)
    {
        AlcoholJournalTable_RU  alcoholJournalTable = AlcoholJournalTable_RU::find(journalId);

        fromDate    = alcoholJournalTable.fromDate();
        toDate      = alcoholJournalTable.toDate();
        branchId    = alcoholJournalTable.BranchId;

        if (_queryRun)
        {
            this.applyQueryRange(_queryRun.query());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        queryRun = new QueryRun(this.initQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    protected Query initQuery()
    {
        Query query = AlcoholJournalTotals_RU::getDefaultQuery(JoinMode::InnerJoin);

        query.dataSourceTable(tableNum(AlcoholJournalTrans_RU)).addRange(fieldNum(AlcoholJournalTrans_RU, TransDate)).status(RangeStatus::Hidden);
        query.dataSourceTable(tableNum(AlcoholJournalTrans_RU)).addRange(fieldNum(AlcoholJournalTrans_RU, ItemId));
        query.dataSourceTable(tableNum(AlcoholJournalTrans_RU)).addRange(fieldNum(AlcoholJournalTrans_RU, AlcoholProductionTypeId));
        query.dataSourceTable(tableNum(AlcoholJournalTable_RU)).addRange(fieldNum(AlcoholJournalTable_RU, BranchId));
        query.dataSourceTable(tableNum(AlcoholProductionType_RU)).addRange(fieldNum(AlcoholProductionType_RU, IsBeer));

        query.dataSourceTable(tableNum(InventTable)).addRange(fieldNum(InventTable, ItemId)).status(RangeStatus::Hidden);

        this.applyQueryRange(query);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(reportHeader);
        this.addSection(columnNumbers);
        this.addSection(dayHeader);
        this.addSection(data, true);
        this.addSection(totals);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateNewPage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a new page should be created before printing next line.
    /// </summary>
    /// <param name="_bookmark">
    ///    A bookmark of the section which is being printed.
    /// </param>
    /// <returns>
    ///    A boolean value; If true, a new page should be created.
    /// </returns>
    protected boolean mustCreateNewPage(Bookmark    _bookmark)
    {
        real requiredHeight = this.getRangeHeight(_bookmark);

        return pageHeight - currentHeight < requiredHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipCalcRangeHeight</Name>
				<Source><![CDATA[
    public boolean parmSkipCalcRangeHeight(boolean _skipCalcRangeHeight = skipCalcRangeHeight)
    {
        skipCalcRangeHeight = _skipCalcRangeHeight;
        return skipCalcRangeHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalId</Name>
				<Source><![CDATA[
    public AlcoholJournalId_RU parmJournalId(AlcoholJournalId_RU _journalId = journalId)
    {
        journalId = _journalId;
        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the name of template for report.
    /// </summary>
    /// <returns>
    ///     The name of template for report.
    /// </returns>
    protected Filename templateName()
    {
        return resourceStr(AlcoholJournalReport_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version     = conPeek(_packedClass,1);
        container   packedQuery;

        switch (version)
        {
            case CurrentVersion :
                [version, packedQuery] = _packedClass;
                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                    this.applyQueryRange(queryRun.query());
                }
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super(calledFrom);

        if (! fromDate)
        {
            ret = checkFailed("@SYS19617");
        }

        if (! toDate)
        {
            ret = checkFailed("@SYS27232");
        }

        if (fromDate && toDate && toDate < fromDate)
        {
            ret = checkFailed("@SYS30562");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static AlcoholJournalReport_RU construct()
    {
        return new AlcoholJournalReport_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static Name description()
    {
        return "@ApplicationSuite_Localization:AlcoholJournalQuarterlyPrint";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        AlcoholJournalReport_RU  runClass;
        AlcoholJournalTable_RU   alcoholJournalTableCaller;

        if (   !_args
            || !_args.record()
            || _args.dataset() != tablenum(AlcoholJournalTable_RU))
        {
            throw error("@SYS18626");
        }

        alcoholJournalTableCaller = _args.record();

        runClass = AlcoholJournalReport_RU::construct();
        runClass.parmJournalId(alcoholJournalTableCaller.JournalId);
        runClass.initFromJournalId();

        if (runClass.prompt())
        {
            runClass.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>