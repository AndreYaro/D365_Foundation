<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCustomFieldInputDialog</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustCustomFieldInputDialog</c> class presents the user with a dialog for collecting free text invoice line custom fields values.
/// </summary>
/// <remarks>
/// The <c>RunBase</c> class was used because specialized logic was required to create this dialog.
/// </remarks>
class CustCustomFieldInputDialog extends RunBase
{
    CustInvoiceLine                 custInvoiceLine;
    CustInvoiceTable                custInvoiceTable;
    CustInvoiceStandardLineTemplate custInvoiceStandardLineTemplate;
    CustRecurrenceInvoice           custRecurrenceInvoice;
    Posted              isPosted;
    Map                 mapCustomFieldElements;
    CustCustomFieldSourceType custCustomFieldSourceType;
    DialogField         addedField;
    DialogText          dlgTextField;
    Map                 groupList;
    boolean             calledFromRecurrenceInvoice;

    #define.TextFieldLength(60)
    #define.CurrencyFieldLength(15)
    #define.DecimalFieldLength(15)
    #define.IntegerFieldLength(10)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createDialogForRecurrenceInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates dialog for setting up custom field values for Customer Recurrence Invoice.
    /// </summary>
    /// <param name="_dialog">
    /// The Runbase dialog object.
    /// </param>
    private void createDialogForRecurrenceInvoice(DialogRunbase _dialog)
    {
        CustBillingCodeCustomField          custBillingCodeCustomField;
        CustBillingCodeVersion              custBillingCodeVersion;
        CustCustomField                     custCustomField;
        CustInvLineBillCodeCustomFieldBase  baseValue;
        RefRecId                            custBillingcodeRecId;
        date                                versionDate;
        DialogGroup                         groupColumn, groupColumnParent;
        CustCustomFieldElement              custCustomFieldElement;
        date                                versionMaxDate;
        RefRecId                            custBillingCodeVersionRecId;
        RefRecId                            custInvoiceStandardLineRecId;
        anytype                             fieldValue;

        calledFromRecurrenceInvoice = (custCustomFieldSourceType == CustCustomFieldSourceType::CustRecurrenceInvoice);
        versionDate = custRecurrenceInvoice.StartDate ? custRecurrenceInvoice.StartDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        versionMaxDate = custRecurrenceInvoice.EndDate ? custRecurrenceInvoice.EndDate : maxDate();

        groupList = new Map(Types::String, Types::Class);

        while select custInvoiceStandardLineTemplate
            where custInvoiceStandardLineTemplate.CustInvoiceTemplate == custRecurrenceInvoice.CustInvoiceTemplate
        {
            groupColumnParent = _dialog.addGroup();
            groupColumnParent.frameType(FormFrameType::None);
            groupColumnParent.columns(1);
            groupColumnParent.visible(false);

            custBillingcodeRecId = custInvoiceStandardLineTemplate.BillingCode;

            while select validtimestate(versionDate, versionMaxDate) custCustomField
                order by custBillingCodeVersion.RecId, custBillingCodeCustomField.SequenceNumber asc
                    join custBillingCodeCustomField
                        where custBillingCodeCustomField.CustCustomField == custCustomField.RecId
                            join RecId, ValidFrom, ValidTo from custBillingCodeVersion
                                where custBillingCodeVersion.CustBillingCode == custBillingcodeRecId
                                && custBillingCodeCustomField.CustBillingCodeVersion == custBillingCodeVersion.RecId
            {
                if (!groupList.exists(int642str(custInvoiceStandardLineTemplate.RecId)))
                {
                    groupList.insert(int642str(custInvoiceStandardLineTemplate.RecId), groupColumnParent);
                }

                groupColumn = _dialog.addGroup("", groupColumnParent);
                groupColumn.frameType(FormFrameType::None);
                groupColumn.columns(2);

                if (custInvoiceStandardLineRecId != custInvoiceStandardLineTemplate.RecId ||
                    custBillingCodeVersionRecId != custBillingCodeVersion.RecId)
                {
                    groupColumn = _dialog.addGroup("", groupColumnParent);
                    groupColumn.frameType(FormFrameType::Auto);
                    groupColumn.caption(strFmt("@SPS2458", custBillingCodeVersion.ValidFrom, custBillingCodeVersion.ValidTo));
                    groupColumn.columns(2);

                    custInvoiceStandardLineRecId = custInvoiceStandardLineTemplate.RecId;
                    custBillingCodeVersionRecId = custBillingCodeVersion.RecId;
                }

                select firstonly baseValue
                    where baseValue.CustCustomFieldSourceType == custCustomFieldSourceType
                    && (baseValue.CustInvoiceLine == custInvoiceLine.RecId
                    && baseValue.CustInvoiceStandardLineTemplate == custInvoiceStandardLineTemplate.RecId
                    && baseValue.CustRecurrenceInvoice == custRecurrenceInvoice.RecId)
                    && baseValue.CustBillingCodeCustomField == custBillingCodeCustomField.RecId;

                if (custBillingCodeCustomField.IsActive)
                {
                    this.renderCustomFields(custCustomField, custBillingCodeCustomField, _dialog);

                    if (mapCustomFieldElements.exists(strFmt("%1-%2-%3",custInvoiceStandardLineTemplate.RecId, custCustomField.CustomField, custBillingCodeVersion.RecId)))
                    {
                        custCustomFieldElement = mapCustomFieldElements.lookup(strFmt("%1-%2-%3",custInvoiceStandardLineTemplate.RecId, custCustomField.CustomField, custBillingCodeVersion.RecId));
                        addedField.value(custCustomFieldElement.parmValue());
                        custCustomFieldElement.parmControlObject(addedField);
                    }
                    else
                    {
                        if (baseValue.RecId == 0)
                        {
                            fieldValue = this.loadDefaultValue(custCustomField);
                        }
                        else
                        {
                            fieldValue = this.loadValue(custCustomField, baseValue, custInvoiceStandardLineTemplate.RecId, custBillingCodeCustomField.RecId);
                        }

                        addedField.value(fieldValue);
                        custCustomFieldElement = CustCustomFieldElement::newCustCustomFieldElement(custBillingCodeCustomField, baseValue, custCustomField, addedField);
                    }

                    addedField.enabled(true);
                    custCustomFieldElement.parmCustInvoiceStandardLineTemplateRecId(custInvoiceStandardLineTemplate.RecId);
                    mapCustomFieldElements.insert(strFmt("%1-%2-%3",custInvoiceStandardLineTemplate.RecId, custCustomField.CustomField, custBillingCodeVersion.RecId), custCustomFieldElement);
                }
                else if (baseValue.RecId != 0)
                {
                    this.renderCustomFields(custCustomField, custBillingCodeCustomField, _dialog);
                    addedField.enabled(false);
                    addedField.value(this.loadValue(custCustomField, baseValue, custInvoiceStandardLineTemplate.RecId, custBillingCodeCustomField.RecId));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the dialog to display for this instance of the <c>RunBase</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the dialog to display.
    /// </returns>
    /// <remarks>
    /// This was overridden since the standard dialog does not support specialized
    /// logic for enabling and disabling fields. The <c>CustCustomFieldInputDialog</c> form serves
    /// as the dialog for this instance of <c>RunBase</c> class.
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog;
        DialogGroup groupColumn;

        CustBillingCodeCustomField custBillingCodeCustomField;
        CustBillingCodeVersion  custBillingCodeVersion;
        CustCustomField custCustomField;
        CustInvLineBillCodeCustomFieldBase baseValue;
        RefRecId    custBillingcodeRecId;
        date        versionDate;
        CustCustomFieldElement custCustomFieldElement;

        dialog = Dialog::newFormnameRunbase(formStr(CustCustomFieldInputForm), this);
        dialog = this.dialogInternal(dialog);
        if (mapCustomFieldElements == null)
        {
            mapCustomFieldElements = new Map(Types::String, Types::Class);
        }

        groupColumn = dialog.addGroup();
        groupColumn.frameType(FormFrameType::None);
        groupColumn.columns(1);

        switch (custCustomFieldSourceType)
        {
            case CustCustomFieldSourceType::CustInvoiceLine :
                custBillingcodeRecId = custInvoiceLine.CustBillingCode;
                versionDate = custInvoiceTable.InvoiceDate;
                dlgTextField = dialog.addText("@SPS482");
            break;

            case CustCustomFieldSourceType::CustInvoiceTemplateLine :
                dlgTextField = dialog.addText("@SPS1082");
                custBillingcodeRecId = custInvoiceStandardLineTemplate.BillingCode;
                versionDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            break;

            case CustCustomFieldSourceType::CustRecurrenceInvoice :
                dlgTextField = dialog.addText("@SPS1082");
                this.createDialogForRecurrenceInvoice(dialog);
            break;
        }

        if (custCustomFieldSourceType != CustCustomFieldSourceType::CustRecurrenceInvoice)
        {
            while select validtimestate(versionDate) custCustomField
                order by custBillingCodeCustomField.SequenceNumber asc
                join custBillingCodeCustomField
                where custBillingCodeCustomField.CustCustomField == custCustomField.RecId
                    join RecId from custBillingCodeVersion
                    where custBillingCodeVersion.CustBillingCode == custBillingcodeRecId
                        && custBillingCodeCustomField.CustBillingCodeVersion == custBillingCodeVersion.RecId
                    outer join baseValue
                    where baseValue.CustInvoiceLine == custInvoiceLine.RecId
                        && baseValue.CustBillingCodeCustomField == custBillingCodeCustomField.RecId
                        && baseValue.CustInvoiceStandardLineTemplate == 0
                        && baseValue.CustRecurrenceInvoice == 0
            {
                groupColumn = dialog.addGroup();
                groupColumn.frameType(FormFrameType::None);
                groupColumn.columns(2);

                // If Record Exists
                if (baseValue.RecId != 0)
                {
                    this.renderCustomFields(custCustomField, custBillingCodeCustomField, dialog);

                    // disable field if the invoice is posted
                    if (isPosted)
                    {
                        addedField.value(this.loadValue(custCustomField, baseValue));
                        addedField.enabled(false);
                    }
                    else
                    {
                        // add to the map only if the billing code custom field is active
                        if (custBillingCodeCustomField.IsActive)
                        {
                            if (mapCustomFieldElements.exists(custCustomField.CustomField))
                            {
                                custCustomFieldElement = mapCustomFieldElements.lookup(custCustomField.CustomField);
                                custCustomFieldElement.parmCustInvBillCodeCusotmFieldBaseId(baseValue.RecId);
                                custCustomFieldElement.parmValue(this.loadValue(custCustomField, baseValue));
                                addedField.value(custCustomFieldElement.parmValue());
                                custCustomFieldElement.parmControlObject(addedField);
                            }
                            else
                            {
                                addedField.value(this.loadValue(custCustomField, baseValue));
                                custCustomFieldElement = CustCustomFieldElement::newCustCustomFieldElement(custBillingCodeCustomField, baseValue, custCustomField, addedField);
                            }
                            addedField.enabled(true);
                        }
                        else
                        {
                            addedField.enabled(false);
                            addedField.value(this.loadValue(custCustomField, baseValue));
                        }
                    }
                }
                else
                {
                    // Render new fields only if the records are not posted and the custom field is active
                    if (!isPosted && custBillingCodeCustomField.IsActive)
                    {
                        this.renderCustomFields(custCustomField, custBillingCodeCustomField, dialog);

                        if (mapCustomFieldElements.exists(custCustomField.CustomField))
                        {
                            custCustomFieldElement = mapCustomFieldElements.lookup(custCustomField.CustomField);
                            custCustomFieldElement.parmCustInvBillCodeCusotmFieldBaseId(baseValue.RecId);
                            custCustomFieldElement.parmValue(this.loadValue(custCustomField, baseValue));
                            addedField.value(custCustomFieldElement.parmValue());
                            custCustomFieldElement.parmControlObject(addedField);
                        }
                        else
                        {
                            addedField.value(this.loadValue(custCustomField, baseValue));
                            custCustomFieldElement = CustCustomFieldElement::newCustCustomFieldElement(custBillingCodeCustomField, baseValue, custCustomField, addedField);
                        }
                    }
                }

                if (!isPosted && custBillingCodeCustomField.IsActive)
                {
                    mapCustomFieldElements.insert(custCustomField.CustomField, custCustomFieldElement);
                }
            }
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustInvoiceTable</Name>
				<Source><![CDATA[
    private CustInvoiceTable getCustInvoiceTable()
    {
        select firstonly custInvoiceTable
            where   custInvoiceTable.RecId == custInvoiceLine.ParentRecId;

        return custInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stores the field values in an instance of the <c>CustCustomFieldElement</c> class.
    /// </summary>
    /// <returns>
    /// true if the method executed sucessfully; otherwise false.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret;
        MapIterator mapIterator;
        CustCustomFieldElement custCustomFieldElement;

        ret = super();

        mapIterator = new MapIterator(mapCustomFieldElements);

        while (mapIterator.more())
        {
            custCustomFieldElement = mapIterator.value();
            custCustomFieldElement.parmValue(custCustomFieldElement.parmControlObject().value());
            mapIterator.next();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMinMaxText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the minimum and maximum values for a custom field.
    /// </summary>
    /// <param name="_custCustomField">
    /// A <c>CustCustomField</c> table buffer for which the minimum and maximum label is to be created.
    /// </param>
    /// <returns>
    /// A string value specifying the minimum and maximum.
    /// </returns>
    private str getMinMaxText(CustCustomField _custCustomField)
    {
        str minMaxText;
        str minValueText = _custCustomField.displayMinValue();
        str maxValueText = _custCustomField.displayMaxValue();

        if (_custCustomField.ValidateMinimum)
        {
            if (_custCustomField.ValidateMaximum)
            {
                // corrected to display 4 decimal positions
                minMaxText = strFmt("@SPS478", minValueText, maxValueText);
            }
            else
            {
                minMaxText = strFmt("@SPS479", _custCustomField.MinValue);
            }
        }
        else if (_custCustomField.ValidateMaximum)
        {
                minMaxText = strFmt("@SPS480", _custCustomField.MaxValue);
        }
        return minMaxText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDefaultValue</Name>
				<Source><![CDATA[
    private AnyType loadDefaultValue(CustCustomField _customField)
    {
        anytype returnValue;

        switch (_customField.DataType)
        {
            case CustomFieldDataType::Text:
                returnValue = _customField.DefaultText;
                break;

            case CustomFieldDataType::Date:
                returnValue = _customField.DefaultDate;
                break;

            case CustomFieldDataType::Integer:
                returnValue = _customField.DefaultInt;
                break;

            case CustomFieldDataType::Boolean:
                returnValue = _customField.DefaultBoolean;
                break;

            default:
                returnValue = _customField.DefaultReal;
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the value for the free text invoice line custom field or returns the specified default value.
    /// </summary>
    /// <param name="_customField">
    /// A <c>CustCustomField</c> table buffer for which the value has to be loaded.
    /// </param>
    /// <param name="_baseValue">
    /// A <c>CustInvLineBillCodeCustomFieldBase</c> table buffer whose super type value has to be loaded.
    /// </param>
    /// <param name="_custInvoiceStandardLineTemplateRecId">
    /// The Record ID of <c>CustInvoiceStandardLineTemplate</c> table; optional.
    /// </param>
    /// <param name="_custBillingCodeCustomFieldRecId">
    /// The Record ID of <c>CustBillingCodeCustomField</c> table; optional.
    /// </param>
    /// <returns>
    /// A <c>anytype</c> value of the free text invoice line custom field.
    /// </returns>
    private anytype loadValue(CustCustomField _customField,
                                CustInvLineBillCodeCustomFieldBase _baseValue,
                                RefRecId _custInvoiceStandardLineTemplateRecId = 0,
                                RefRecId _custBillingCodeCustomFieldRecId = 0)
    {
        anytype ret;

        RefRecId baseValueInvoiceLineTemplateRecId;

        if (calledFromRecurrenceInvoice)
        {
            baseValueInvoiceLineTemplateRecId = (select firstonly RecId from custInvLineBillCodeCustomFieldBase
                                                            where custInvLineBillCodeCustomFieldBase.CustCustomFieldSourceType == CustCustomFieldSourceType::CustInvoiceTemplateLine
                                                            && custInvLineBillCodeCustomFieldBase.CustInvoiceStandardLineTemplate == _custInvoiceStandardLineTemplateRecId
                                                            && custInvLineBillCodeCustomFieldBase.CustBillingCodeCustomField == _custBillingCodeCustomFieldRecId).RecId;
        }

        switch (_customField.DataType)
        {
            case CustomFieldDataType::Boolean:
                if (calledFromRecurrenceInvoice)
                {
                    ret = _baseValue.RecId ? CustInvLineBillCodeCustomFieldBool::find(_baseValue.RecId).BoolValue : CustInvLineBillCodeCustomFieldBool::find(baseValueInvoiceLineTemplateRecId).BoolValue;
                }
                else
                {
                    ret = _baseValue.RecId ? CustInvLineBillCodeCustomFieldBool::find(_baseValue.RecId).BoolValue : _customField.DefaultBoolean;
                }
            break;

            case CustomFieldDataType::Currency:
                if (calledFromRecurrenceInvoice)
                {
                    ret = _baseValue.RecId ? CustInvLineBillCodeCustomFieldReal::find(_baseValue.RecId).RealValue : CustInvLineBillCodeCustomFieldReal::find(baseValueInvoiceLineTemplateRecId).RealValue;
                }
                else
                {
                    ret = _baseValue.RecId ? CustInvLineBillCodeCustomFieldReal::find(_baseValue.RecId).RealValue : _customField.DefaultReal;
                }
            break;

            case CustomFieldDataType::Date:
                if (calledFromRecurrenceInvoice)
                {
                    ret = _baseValue.RecId ? CustInvLineBillCodeCustomFieldDateTime::find(_baseValue.RecId).DateValue : CustInvLineBillCodeCustomFieldDateTime::find(baseValueInvoiceLineTemplateRecId).DateValue;
                }
                else
                {
                    ret = _baseValue.RecId ? CustInvLineBillCodeCustomFieldDateTime::find(_baseValue.RecId).DateValue : DateTimeUtil::applyTimeZoneOffset(_customField.DefaultDate, DateTimeUtil::getUserPreferredTimeZone());
                }
            break;

            case CustomFieldDataType::Decimal:
                if (calledFromRecurrenceInvoice)
                {
                    ret = _baseValue.RecId ? CustInvLineBillCodeCustomFieldReal::find(_baseValue.RecId).RealValue : CustInvLineBillCodeCustomFieldReal::find(baseValueInvoiceLineTemplateRecId).RealValue;
                }
                else
                {
                    ret = _baseValue.RecId ? CustInvLineBillCodeCustomFieldReal::find(_baseValue.RecId).RealValue : _customField.DefaultReal;
                }
            break;

            case CustomFieldDataType::Integer:
                if (calledFromRecurrenceInvoice)
                {
                    ret = _baseValue.RecId ? CustInvLineBillCodeCustomFieldInt::find(_baseValue.RecId).IntValue : CustInvLineBillCodeCustomFieldInt::find(baseValueInvoiceLineTemplateRecId).IntValue;
                }
                else
                {
                    ret = _baseValue.RecId ? CustInvLineBillCodeCustomFieldInt::find(_baseValue.RecId).IntValue : _customField.DefaultInt;
                }
            break;

            case CustomFieldDataType::Text:
                if (calledFromRecurrenceInvoice)
                {
                    ret = _baseValue.RecId ? CustInvLineBillCodeCustomFieldText::find(_baseValue.RecId).TextValue : CustInvLineBillCodeCustomFieldText::find(baseValueInvoiceLineTemplateRecId).TextValue;
                }
                else
                {
                    ret = _baseValue.RecId ? CustInvLineBillCodeCustomFieldText::find(_baseValue.RecId).TextValue : _customField.DefaultText;
                }
            break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustCustomFieldSourceType</Name>
				<Source><![CDATA[
    public CustCustomFieldSourceType parmCustCustomFieldSourceType(CustCustomFieldSourceType _custCustomFieldSourceType = custCustomFieldSourceType)
    {
        custCustomFieldSourceType = _custCustomFieldSourceType;
        return custCustomFieldSourceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustInvoiceLine</Name>
				<Source><![CDATA[
    public CustInvoiceLine parmCustInvoiceLine(CustInvoiceLine _custInvoiceLine = custInvoiceLine)
    {
        custInvoiceLine = _custInvoiceLine;
        return custInvoiceLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustInvoiceStandardLine</Name>
				<Source><![CDATA[
    public CustInvoiceStandardLineTemplate parmCustInvoiceStandardLine(CustInvoiceStandardLineTemplate _custInvoiceStandardLineTemplate = custInvoiceStandardLineTemplate)
    {
        custInvoiceStandardLineTemplate = _custInvoiceStandardLineTemplate;
        return custInvoiceStandardLineTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustRecurrenceInvoice</Name>
				<Source><![CDATA[
    public CustRecurrenceInvoice parmCustRecurrenceInvoice(CustRecurrenceInvoice _custRecurrenceInvoice = custRecurrenceInvoice)
    {
        custRecurrenceInvoice = _custRecurrenceInvoice;
        return custRecurrenceInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsPosted</Name>
				<Source><![CDATA[
    public Posted parmIsPosted(Posted _isPosted = isPosted)
    {
        isPosted = _isPosted;

        return isPosted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMapCustomFieldElements</Name>
				<Source><![CDATA[
    public Map parmMapCustomFieldElements(Map _mapCustomFieldElements = mapCustomFieldElements)
    {
        mapCustomFieldElements = _mapCustomFieldElements;
        return mapCustomFieldElements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renderCustomFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a field control on the runbase dialog based on the custom field data type.
    /// </summary>
    /// <param name="_customField">
    /// A table <c>CustCustomField</c> buffer for which the field is to be created.
    /// </param>
    /// <param name="_custBillingCodeCustomField">
    /// A <c>CustBillingCodeCustomField</c> table buffer used for determining if the custom field is required and active.
    /// </param>
    /// <param name="_dialog">
    /// A reference to the <c>Runbase</c> dialog class instance.
    /// </param>
    private void renderCustomFields(CustCustomField _customField, CustBillingCodeCustomField _custBillingCodeCustomField, DialogRunbase _dialog)
    {
        FormBuildDateTimeControl dateTimeControl;
        str strDlgText;

        switch (_customField.DataType)
        {
            case CustomFieldDataType::Boolean:
                addedField = _dialog.addField(extendedTypeStr(CustomFieldValueBoolean), _customField.CustomField, _customField.HelpText == "" ? _customField.CustomField : _customField.HelpText);
            break;

            case CustomFieldDataType::Currency:
                addedField = _dialog.addField(extendedTypeStr(CustomFieldMinReal), _customField.CustomField, _customField.HelpText == "" ? _customField.CustomField : _customField.HelpText);
                addedField.displayLength(#CurrencyFieldLength);
                strDlgText = this.getMinMaxText(_customField);
                // only display min max values if not an empty string to avoid display default "Text" in resulting dialog
                if (strDlgText != '')
                {
                    _dialog.addText(strDlgText);
                }
            break;

            case CustomFieldDataType::Date:
                addedField = _dialog.addField(extendedTypeStr(CustomFieldValueDate),
                                            _custBillingCodeCustomField.IsRequired ? strFmt("@SPS1117", _customField.CustomField) : _customField.CustomField
                                            , _customField.HelpText == "" ? _customField.CustomField : _customField.HelpText);
                dateTimeControl = addedField.fieldControl();
                dateTimeControl.displayOption(2);
            break;

            case CustomFieldDataType::Decimal:
                addedField = _dialog.addField(extendedTypeStr(CustomFieldValueReal), _customField.CustomField, _customField.HelpText == "" ? _customField.CustomField : _customField.HelpText);
                addedField.displayLength(#DecimalFieldLength);
                strDlgText = this.getMinMaxText(_customField);
                // only display min max values if not an empty string to avoid display default "Text" in resulting dialog
                if (strDlgText != '')
                {
                    _dialog.addText(strDlgText);
                }
            break;

            case CustomFieldDataType::Integer:
                addedField = _dialog.addField(extendedTypeStr(CustomFieldValueInt), _customField.CustomField, _customField.HelpText == "" ? _customField.CustomField : _customField.HelpText);
                addedField.displayLength(#IntegerFieldLength);
                strDlgText = this.getMinMaxText(_customField);
                // only display min max values if not an empty string to avoid display default "Text" in resulting dialog
                if (strDlgText != '')
                {
                    _dialog.addText(strDlgText);
                }
            break;

            case CustomFieldDataType::Text:
                addedField = _dialog.addField(extendedTypeStr(CustomFieldValueText),
                                              _custBillingCodeCustomField.IsRequired ? strFmt("@SPS1117", _customField.CustomField) : _customField.CustomField
                                            , _customField.HelpText == "" ? _customField.CustomField : _customField.HelpText);

                addedField.displayLength(#TextFieldLength);
                addedField.limitText(_customField.MaxLength);
                if (_customField.MaxLength > 60)
                {
                    addedField.multiLine(true);
                }
                else
                {
                    addedField.multiLine(false);
                }
                _dialog.addText(strFmt("@SPS477", _customField.MaxLength));
            break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGroupVisible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the visibility of the group to true
    /// </summary>
    /// <param name="_custInvoiceStandardLineTemplate">
    /// The group which is to be made visible
    /// </param>
    public void setGroupVisible(RefRecId    _custInvoiceStandardLineTemplate)
    {
        MapEnumerator                       enumerator;
        DialogGroup                         currentGroup;

        enumerator = new MapEnumerator(groupList);

        while (enumerator.moveNext())
        {
           currentGroup = enumerator.currentValue();
           currentGroup.visible(false);
        }

        if (groupList.exists(int642str(_custInvoiceStandardLineTemplate)))
        {
            currentGroup = groupList.lookup(int642str(_custInvoiceStandardLineTemplate));
            currentGroup.visible(true);
            dlgTextField.text("@SPS1082");
        }
        else
        {
            dlgTextField.text("@SPS860");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the input values for custom fields.
    /// </summary>
    /// <param name="calledFrom">
    /// An instance of the caller object.
    /// </param>
    /// <returns>
    /// A Boolean that specifies the status of the methods operation.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;
        MapIterator mapIterator;
        CustCustomFieldElement custCustomFieldElement;
        CustCustomField custCustomField;
        CustBillingCodeCustomField custBillingCodeCustomField;

        ret = super(calledFrom);

        mapIterator = new MapIterator(mapCustomFieldElements);

        while (mapIterator.more())
        {
            custCustomFieldElement = mapIterator.value();
            custCustomField = CustCustomField::find(custCustomFieldElement.parmCustCustomFieldId());
            switch (custCustomField.DataType)
            {
                case CustomFieldDataType::Integer:
                case CustomFieldDataType::Decimal:
                case CustomFieldDataType::Currency:
                    if (custCustomField.ValidateMinimum)
                    {
                        if (custCustomFieldElement.parmValue() < custCustomField.MinValue)
                        {
                            custCustomFieldElement.parmControlObject().value(custCustomFieldElement.parmOrigValue());
                            custCustomFieldElement.parmValue(custCustomFieldElement.parmOrigValue());
                            switch (custCustomFieldSourceType)
                            {
                                case CustCustomFieldSourceType::CustInvoiceLine :
                                    ret = checkFailed(strFmt("@SPS483", custCustomField.CustomField));
                                break;

                                case CustCustomFieldSourceType::CustInvoiceTemplateLine :
                                case CustCustomFieldSourceType::CustRecurrenceInvoice :
                                     ret = checkFailed("@SPS1021");
                                break;
                            }
                        }
                    }

                    if (custCustomField.ValidateMaximum)
                    {
                        if (custCustomFieldElement.parmValue() > custCustomField.MaxValue)
                        {
                            custCustomFieldElement.parmControlObject().value(custCustomFieldElement.parmOrigValue());
                            custCustomFieldElement.parmValue(custCustomFieldElement.parmOrigValue());
                            switch (custCustomFieldSourceType)
                            {
                                case CustCustomFieldSourceType::CustInvoiceLine :
                                    ret = checkFailed(strFmt("@SPS483", custCustomField.CustomField));
                                break;

                                case CustCustomFieldSourceType::CustInvoiceTemplateLine :
                                case CustCustomFieldSourceType::CustRecurrenceInvoice :
                                     ret = checkFailed("@SPS1021");
                                break;
                            }
                        }
                    }
                break;

                case CustomFieldDataType::Date:
                    custBillingCodeCustomField = CustBillingCodeCustomField::find(custCustomFieldElement.parmCustBillingCodeCustomFieldId());
                    if (custBillingCodeCustomField.IsRequired)
                    {
                        if (!custCustomFieldElement.parmValue())
                        {
                            custCustomFieldElement.parmControlObject().value(custCustomFieldElement.parmOrigValue());
                            custCustomFieldElement.parmValue(custCustomFieldElement.parmOrigValue());
                            switch (custCustomFieldSourceType)
                            {
                                case CustCustomFieldSourceType::CustInvoiceLine :
                                    ret = checkFailed("@SPS484");
                                break;

                                case CustCustomFieldSourceType::CustInvoiceTemplateLine :
                                case CustCustomFieldSourceType::CustRecurrenceInvoice :
                                     ret = checkFailed("@SPS1022");
                                break;
                            }
                        }
                    }
                break;

                case CustomFieldDataType::Text:
                    custBillingCodeCustomField = CustBillingCodeCustomField::find(custCustomFieldElement.parmCustBillingCodeCustomFieldId());
                    if (custBillingCodeCustomField.IsRequired)
                    {
                        custCustomFieldElement.parmValue(strLTrim(strRTrim(custCustomFieldElement.parmValue())));

                        if (!custCustomFieldElement.parmValue())
                        {
                            custCustomFieldElement.parmControlObject().value(custCustomFieldElement.parmOrigValue());
                            custCustomFieldElement.parmValue(custCustomFieldElement.parmOrigValue());
                            switch (custCustomFieldSourceType)
                            {
                                case CustCustomFieldSourceType::CustInvoiceLine :
                                    ret = checkFailed("@SPS484");
                                break;

                                case CustCustomFieldSourceType::CustInvoiceTemplateLine :
                                case CustCustomFieldSourceType::CustRecurrenceInvoice :
                                     ret = checkFailed("@SPS1022");
                                break;
                            }
                        }
                    }
                break;
            }
            custCustomField = null;
            custCustomFieldElement = null;
            mapIterator.next();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustCustomFieldInputDialog construct()
    {
        return new CustCustomFieldInputDialog();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SPS481";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        CustCustomFieldInputDialog inputDialog = new CustCustomFieldInputDialog();
        boolean okClicked = false;

        inputDialog.parmCustCustomFieldSourceType(args.parmEnumType());
        switch (inputDialog.parmCustCustomFieldSourceType())
        {
            case CustCustomFieldSourceType::CustInvoiceLine :
                inputDialog.parmCustInvoiceLine(args.record());
            break;

            case CustCustomFieldSourceType::CustInvoiceTemplateLine :
                inputDialog.parmCustInvoiceStandardLine(args.record());
            break;

            case CustCustomFieldSourceType::CustRecurrenceInvoice :
                inputDialog.parmCustRecurrenceInvoice(args.record());
            break;
        }

        inputDialog.parmIsPosted(str2int(args.parm()));
        inputDialog.parmMapCustomFieldElements(args.parmObject());
        inputDialog.getCustInvoiceTable();

        args.caller().parmCustomFieldDialog(inputDialog);
        if (inputDialog.prompt())
        {
            inputDialog.runOperation();
            if (inputDialog.parmIsPosted())
            {
                okClicked = false;
            }
            else
            {
                okClicked = true;
            }
        }

        if (args.caller() && formHasMethod(args.caller(), identifierStr(closeCustomFieldDialog)))
        {
            args.caller().closeCustomFieldDialog(inputDialog.parmMapCustomFieldElements(), okClicked);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>