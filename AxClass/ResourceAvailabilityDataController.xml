<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResourceAvailabilityDataController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Resource availability data controller class.
/// </summary>
public class ResourceAvailabilityDataController extends AvailabilityViewDataController implements IAvailabilityViewDataController
{
    #TimeConstants

    private str actionName;
    private ResCommitType commitment;
    private ResBookingType bookingType;
    private ActivityRecId activity;
    private real allocation;
    protected const str collectionKeyDelimiter = '-';
    private ResTmpResourceReservationDetails reservationDetails;
    private FormDataSource formDataSource;
    private boolean isWorkflowEnabled;
    private ListEnumerator scheduleEnum;

    private boolean perfEnhancement;
    private AVTimeframeType timescale;
    private ResRollUpCoverage coverage;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPerfEnhancement</Name>
				<Source><![CDATA[
    protected boolean getPerfEnhancement()
    {
        return perfEnhancement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTimeScale</Name>
				<Source><![CDATA[
    protected AVTimeframeType getTimeScale()
    {
        return timescale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCoverage</Name>
				<Source><![CDATA[
    protected ResRollUpCoverage getCoverage()
    {
        return coverage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResourceReservationDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set <c>ResTmpResourceReservationDetails</c> table buffer.
    /// </summary>
    /// <param name = "_reservationDetails"><c>ResTmpResourceReservationDetails</c> table buffer.</param>
    /// <returns><c>ResTmpResourceReservationDetails</c> table buffer.</returns>
    public ResTmpResourceReservationDetails parmResourceReservationDetails(ResTmpResourceReservationDetails _reservationDetails = reservationDetails)
    {
        reservationDetails = _reservationDetails;
        return reservationDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set form datasource for <c>ResTmpResourceReservationDetails</c>.
    /// </summary>
    /// <param name = "_formDataSource">Form datasource for <c>ResTmpResourceReservationDetails</c>.</param>
    /// <returns>Form datasource for <c>ResTmpResourceReservationDetails</c>.</returns>
    public FormDataSource parmFormDataSource(FormDataSource _formDataSource = formDataSource)
    {
        formDataSource = _formDataSource;
        return formDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves chart controller.
    /// </summary>
    /// <param name = "_collectionKey">Collection key.</param>
    /// <param name = "_start">Starting date/time.</param>
    /// <param name = "_end">Ending date/time.</param>
    /// <returns>Availability view chart data object.</returns>
    public AvailabilityViewChartDataContract getChart(str _collectionKey, str _start, str _end)
    {
        coverage = this.getCoverageType(_collectionKey);
        timescale = this.control().timescale();
        perfEnhancement = ResUtil::isPerformanceEnhancementFeatureEnabled(true);

        if (!perfEnhancement)
        {
            boolean getCached = this.hasAllRollUps(_collectionKey, _start, _end, coverage);

            if (!getCached)
            {
                // add the resource to cache
                this.addEntity(_collectionKey, _start, _end);
            }
        }

        // assign data controller
        this.setChartController();

        return super(_collectionKey, _start, _end);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCoverageType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get roll-up coverage type by activity resource Id.
    /// </summary>
    /// <param name = "_collectionKey">Activity resource Id as collection key.</param>
    /// <returns>Activity resoruce Id associated roll-up coverage type.</returns>
    protected ResRollUpCoverage getCoverageType(str _collectionKey)
    {
        ResRollUpCoverage localCoverage;
        if (ResUtil::isPlannedResourceFromActivityResourceId(_collectionKey))
        {
            localCoverage = ResRollUpCoverage::Activity;
        }
        else
        {
            localCoverage = ResRollUpCoverage::Availability;
        }
            return localCoverage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChartItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves availability chart item data.
    /// </summary>
    /// <param name = "_itemKey">Chart item id.</param>
    /// <returns>Availability view chart item data object.</returns>
    public ChartItemDataContract getChartItem(str _itemKey)
    {
        ChartItemDataContract chartItem = ChartItemDataContract::construct();
        chartItem.itemKey(_itemKey);
        chartItem.getKeyFactors();

        coverage = this.getCoverageType(chartItem.collectionKey());
        timescale = this.control().timescale();
        perfEnhancement = ResUtil::isPerformanceEnhancementFeatureEnabled(true);

        this.setChartController();
        return super(_itemKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setChartController</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the chart controller.
    /// </summary>
    protected void setChartController()
    {
        if (perfEnhancement)
        {
            ResCalendarAvailabilityChart calendarAvailabilityChart = ResCalendarAvailabilityChart::construct();
            calendarAvailabilityChart.parmTimeScale(timescale);
            calendarAvailabilityChart.parmCoverage(coverage);
            this.chartController(calendarAvailabilityChart);
        }
        else
        {
            // cached chart availability data controller
            this.chartController(ResCachedResourceAvailabilityChart::construct());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAllRollUps</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if all roll-ups for the specified availability are available and the hard and soft reservation hours are correct.
    /// </summary>
    /// <param name = "_collectionKey">Collection key.</param>
    /// <param name = "_start">Starting date/time.</param>
    /// <param name = "_end">Ending date/time.</param>
    /// <param name = "_coverage">The roll-up coverage.</param>
    /// <returns>true when all the roll-ups records are available and hard and soft reservation hours are correct; otherwise, false.</returns>
    protected boolean hasAllRollUps(str _collectionKey, str _start, str _end, ResRollUpCoverage _coverage)
    {
        utcdatetime start = AVUtil::getDateTime(_start);
        AVTimeframe timeframe = AVTimeframe::getTimeframe(start, timescale);
        start = timeframe.Start();
        utcdatetime end = AVUtil::getDateTime(_end);
        timeframe = AVTimeframe::getTimeframe(end, timescale);
        end = timeframe.End();
        
        ResourceRecId resourceRecId = ResUtil::getResourceRecId(_collectionKey);

        // For Availability coverage type which resource is not a planned resource, update collection key to look up
        // the resource record from ResRollup table.
        ActivityResourceId activityResourceId = _collectionKey;
        if (_coverage == ResRollUpCoverage::Availability)
        {
            if (resourceRecId)
            {
                activityResourceId = strFmt(ResUtil::activityResourceIdStrFormat, '0', int642Str(resourceRecId), '0');
            }
        }

        ActivityResourceRecId activityResourceRecId = ResUtil::getActivityResourceRecId(activityResourceId);

        // Get expected hard locked and soft locked hours from reservation table.
        Hours expectedHardLockedCapacity = decRound(ResReservationRollupView::getHoursByCoverageTypeAndCommitType(
            _coverage, ResCommitType::HardBook, resourceRecId, activityResourceRecId, start, end), 1);
        Hours expectedSoftLockedCapacity = decRound(ResReservationRollupView::getHoursByCoverageTypeAndCommitType(
            _coverage, ResCommitType::SoftBook, resourceRecId, activityResourceRecId, start, end), 1);
        
        // add 1 inclusive of ending day
        int expectedCount = AVTimeframe::getFrameCount(start, end, timescale) + 1;

        int actualCount;
        Hours actualHardLockedCapacity;
        Hours actualSoftLockedCapacity;

        // Get actual count, actual hard locked and actual soft locked hours from ResRollup table.
        [actualCount, actualHardLockedCapacity, actualSoftLockedCapacity] = ResRollUp::getRollUpCountSumHardLockedAndSumSoftLocked(_coverage,
            activityResourceId, timescale, start, end);

        actualHardLockedCapacity = decRound(actualHardLockedCapacity, 1);
        actualSoftLockedCapacity = decRound(actualSoftLockedCapacity, 1);

        // Only return true if data in ResRollUp table are matching the expected count, expected hard locked capacity and expected soft locked capacity.
        return expectedCount == actualCount && expectedHardLockedCapacity == actualHardLockedCapacity && expectedSoftLockedCapacity == actualSoftLockedCapacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add the availability chart resource to cache.
    /// </summary>
    /// <param name = "_activityResourceId">Activity recource Id.</param>
    /// <param name = "_start">Starting date/time.</param>
    /// <param name = "_end">Ending date/time.</param>
    public void addEntity(ActivityResourceId _activityResourceId, str _start, str _end)
    {
        utcdatetime start = AVUtil::getDateTime(_start);
        utcdatetime end = AVUtil::getDateTime(_end);

        ResRollUpWriter::updateRollUpForSpecificActivityResourceId(_activityResourceId, start, end, true, this.control().timescale());
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes Resource AvailabilityView actions.
    /// </summary>
    /// <param name = "_actionName">Name of action to execute.</param>
    /// <returns>TRUE when specified action is executed successfully.</returns>
    public boolean executeAction(str _actionName)
    {
        if (isWorkflowEnabled)
        {
            ResRequestHelper::validateWorkflowConfiguration();
        }

        AvailabilityView avControl = this.control();
        scheduleEnum = avControl.selections().getChartItems().getEnumerator();
        ResAvailabilityViewContext context = avControl.controlContext();

        activity = context.activity();

        boolean isHourBooking;
        boolean isPartialCapacityBooking;

        switch (_actionName)
        {
            case identifierstr(HBRemainingCapacity):
                bookingType = ResBookingType::RemainingCapacity;
                commitment = ResCommitType::HardBook;
                break;

            case identifierstr(HBFullCapacity):
                bookingType = ResBookingType::FullCapacity;
                commitment = ResCommitType::HardBook;
                break;

            case identifierstr(HBPartialCapacity):
                isPartialCapacityBooking = true;
                bookingType = ResBookingType::CapacityPercentage;
                commitment = ResCommitType::HardBook;
                break;

            case identifierstr(HBHours):
                isHourBooking = true;
                commitment = ResCommitType::HardBook;
                break;

            case identifierstr(SBRemainingCapacity):
                bookingType = ResBookingType::RemainingCapacity;
                commitment = ResCommitType::SoftBook;
                break;

            case identifierstr(SBFullCapacity):
                bookingType = ResBookingType::FullCapacity;
                commitment = ResCommitType::SoftBook;
                break;

            case identifierstr(SBPartialCapacity):
                isPartialCapacityBooking = true;
                bookingType = ResBookingType::CapacityPercentage;
                commitment = ResCommitType::SoftBook;
                break;

            case identifierstr(SBHours):
                isHourBooking = true;
                commitment = ResCommitType::SoftBook;
                break;
        }

        if (isHourBooking)
        {
            ResHourSelection hourSelection = ResHourSelection::construct();

            hourSelection.parmAvControl(avControl);
            hourSelection.ShowActivitySelection(!activity);
            hourSelection.Activity(activity);
            hourSelection.parmCommitType(commitment);
            hourSelection.selectionsReadyV2 += eventhandler(this.hourSelectionReadyHandlerV2);
            hourSelection.showForm();
        }

        if (activity && isPartialCapacityBooking)
        {
            ResAllocationSelection allocationSelection = ResAllocationSelection::construct();
            allocationSelection.parmAvControl(avControl);
            allocationSelection.selectionsReady += eventhandler(this.allocationSelectionReadyHandler);
            allocationSelection.showForm();
        }

        if (activity && (bookingType == ResBookingType::RemainingCapacity ||
                                bookingType == ResBookingType::FullCapacity ))
        {
            if (this.bookSchedules())
            {
                this.executeActionCompleted();
                avControl.clearSelections();
                ResResourceReservationDetails::updateReservationDetailsTable(
                    this.control().selections(), this.control().timescale(), this.parmResourceReservationDetails(), this.parmFormDataSource());
                this.raiseActionCompletedEvent(_actionName);
            }
        }

        if (!activity && !isHourBooking)
        {
            ResActivitySelection activitySelection = ResActivitySelection::construct();
            activitySelection.ShowProjects(true);

            if (isPartialCapacityBooking)
            {
                activitySelection.ShowAllocation(true);
            }

            activitySelection.selectionsReady += eventhandler(this.activitySelectionReadyHandler);
            activitySelection.showForm();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSchedules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves selected schedules from the availabilityView control.
    /// Also detects if the schedule contains soft booking and let user decides if soft booking should be removed.
    /// </summary>
    /// <param name = "_reservationType">Reservation type.</param>
    /// <param name = "_resourceCategory">Reservation category record identifier, optional.</param>
    /// <returns>List of selected schedules.</returns>
    protected List getSchedules(ResReservationType _reservationType, ResourceCategoryRecId _resourceCategory = 0)
    {
        boolean skipEmptyReservationScheduleFlight = ResSkipEmptyReservationScheduleFlight::instance().isEnabled();

        AvailabilityView avControl = this.control();

        ListEnumerator enumerator = scheduleEnum;
            
        List schedules = new List(Types::Class);

        while (enumerator.moveNext())
        {
            ResIReservationSchedule schedule = ResReservationSchedule::construct();

            ResourceRecId resource;
            ActivityResourceRecId activityResource;
            if (bookingType == ResBookingType::Manual)
            {
                if (skipEmptyReservationScheduleFlight && !(enumerator.current() is ResIReservationSchedule))
                {
                    continue;
                }
                ResIReservationSchedule manualSchedule = enumerator.current();
                resource = manualSchedule.resource();
                activityResource = manualSchedule.activityResource();

                schedule.resource(resource);
                schedule.start(manualSchedule.start());
                schedule.end(manualSchedule.end());
                schedule.capacity(manualSchedule.capacity());
                schedule.parmCalendar(manualSchedule.parmCalendar());
            }
            else
            {
                ChartItemDataContract selection = enumerator.current();
                utcdatetime timelineKey = AVUtil::getDateTime(selection.timelineKey());
                AVTimeframe timeframe = AVTimeframe::getTimeframe(timelineKey, avControl.timescale());
                utcdatetime start = timeframe.start();
                utcdatetime end = timeframe.end();

                str collectionKey = selection.collectionKey();
                container keys = str2con(collectionKey, collectionKeyDelimiter);
                resource = str2Int64(conPeek(keys, 2));
                activityResource = str2Int64(conPeek(keys, 3));

                schedule.resource(resource);
                schedule.start(start);
                schedule.end(end);
                schedule.capacity(allocation);
            }
                
            // If workflow is enabled, <c>ResRollUp</c> table records will not be updated by resource reservation process.
            if (isWorkflowEnabled && _reservationType == ResReservationType::Assignment
                    && commitment == ResCommitType::HardBook)
            {
                schedule.parmProcessRollUpByAssignmentRequest(true);
            }

            schedule.commitment(commitment);
            schedule.ReservationType(_reservationType);
            schedule.Activity(activity);
            schedule.ResourceCategory(_resourceCategory);

            if (resource)
            {
                if (!activityResource)
                {
                    activityResource = ActivityFacade::findActivityResource(activity, resource);
                }

                if (activityResource)
                {
                    schedule.parmIsExistingTeamMember(true);
                }
                else
                {
                    schedule.parmIsExistingTeamMember(false);
                }
            }
            else
            {
                schedule.parmIsExistingTeamMember(true);
            }

            schedule.ActivityResource(activityResource);

            schedules.addEnd(schedule);
        }
       
        return schedules;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAVTimeFrame</Name>
				<Source><![CDATA[
    private AVTimeFrameType getAVTimeFrame()
    {
        AvailabilityView    avControl = this.control();
        DictEnum            timescales = new DictEnum(enumNum(AVTimeframeType));
        return  timescales.index2Value(avControl.timescale());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReservationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves reservation type.
    /// </summary>
    /// <returns><c>ResReservationType</c> enum value.</returns>
    protected ResReservationType getReservationType()
    {
        return ResReservationType::Booking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bookSchedules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Books selected schedules.
    /// </summary>
    /// <returns>true when the operation succeeds; otherwise, false.</returns>
    protected boolean bookSchedules()
    {
        // System date time has to be captured before the resource reservation process so that
        //it can be used to compare in ResValidateAndSubmitAssignmentRequest class.
        utcdatetime systemDateTime = DateTimeUtil::getSystemDateTime();

        boolean refreshAvailabilityView;
        boolean executeReservation = true;
        ResReservationType reservationType = this.getReservationType();
        ResourceCategoryRecId resourceCategory = ResourceCategoryFacade::defaultResourceCategory();

        smmActivities activityBuffer = smmActivities::findWithRecId(activity);
        smmActivities parentActivity = activityBuffer.getParentSmmActivities(activityBuffer);
        boolean taskHasRemainingCapacity = true;

        ResCommitType commitTypeToValidate;
        PSARSEntityType resEntityType = ActivityFacade::getActivityType(activity);
        if (resEntityType == PSARSEntityType::Quotation)
        {
            commitTypeToValidate = ResCommitType::SoftBook;
        }
        else
        {
            commitTypeToValidate = ResCommitType::HardBook;
        }

        // Set taskHasRemainingCapacity = true if this is a WBS task and task has remaining capacity hours.
        if (parentActivity && (ActivityFacade::getRemainingCapacityInSeconds(activity, commitTypeToValidate) == 0))
        {
            taskHasRemainingCapacity = false;
        }

        ResAvailabilityViewContext context = this.control().controlContext();
        if (context)
        {
            reservationType = context.resReservationType();
            resourceCategory = context.resourceCategory();
        }

        List schedules = this.getSchedules(reservationType, resourceCategory);

        ResCancelSoftReservation cancelSoftReservation = ResCancelSoftReservation::construct(schedules);

        // If it is hard reservation and the resource has soft reservation,
        // ask if the user will cancel the resource soft reservation.
        AVTimeframeType timeFrameType = this.getAVTimeFrame();
        if (cancelSoftReservation.hasSoftReservation(timeFrameType))
        {
            boolean removeSoftReservation = false;

            // If this WBS task has no remaining effort, ask if the user will remove this resource
            // soft assigned hours. Also no reservation execution will be needed.
            if (!taskHasRemainingCapacity)
            {
                if (this.getUserFeedBackOnSoftReservationCancellingWhileTaskHasNoRemainingEffort())
                {
                    removeSoftReservation = true;
                    // If user will remove soft reservation, set result to true to refresh availability view control.
                    refreshAvailabilityView = true;
                }

                executeReservation = false;
            }
            // Else in the cases of this is a root activity or this WBS task has remaining effort hours,
            // ask if the user will remove this reosurce soft reserved.
            else if (cancelSoftReservation.getUserFeedBackOnSoftReservationCancelling())
            {
                removeSoftReservation = true;
            }

            if (removeSoftReservation)
            {
                cancelSoftReservation.cancelSoftReservation(false, true, timeFrameType);
            }
        }
        // Else in the case of this WBS task has no remaining effort hours and the commiment is
        // hard reservation, inform user that no more reservation can be made.
        else if (!taskHasRemainingCapacity && commitment == commitTypeToValidate)
        {
            info(strFmt("@Res:TaskHasNoRemainingEffortHoursInfo", strLwr(enum2Str(commitTypeToValidate))));
            executeReservation = false;
        }

        // reserve the scheduling collection
        ResIResourceManager resourceManager = ResResourceManager::construct();
        resourceManager.ReserveProcessor(ResReserveProcessor::getProcessor(bookingType));
        resourceManager.Schedules(schedules);
        resourceManager.Capacity(allocation);
        resourceManager.parmSyncSpecificTimeScale(true);
        resourceManager.TimeFrameType(timeFrameType);
        resourceManager.ReservationType(reservationType);

        if (executeReservation)
        {
            try
            {
                ttsbegin;
                resourceManager.Reserve();
                ttscommit;
                refreshAvailabilityView = true;
            }
            catch (Exception::Error)
            {
                ttsabort;
            }
        }

        if (refreshAvailabilityView)
        {
            // If resource workflow is enabled, then reservation will be done in soft assignment first. By comparing with the existing
            // hard booking records, the system will submit assignment records which does not have a backing up booking record in the same hour.
            if (commitment == ResCommitType::HardBook && isWorkflowEnabled)
            {
                ResValidateAndSubmitAssignmentRequest resourceRequest = ResValidateAndSubmitAssignmentRequest::construct(schedules, systemDateTime);
                resourceRequest.validateAndSubmitRequest();
            }
        }
        return refreshAvailabilityView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserFeedBackOnSoftReservationCancellingWhileTaskHasNoRemainingEffort</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get user feed back on cancelling soft reservation while task has no remaining effort by launching yes no message box.
    /// </summary>
    /// <returns>Whether soft reservation should be cancelled.</returns>
    protected boolean getUserFeedBackOnSoftReservationCancellingWhileTaskHasNoRemainingEffort()
    {
        boolean cancelSoftReservation = false;

        // ask the user if the soft reservation should be removed
        if (Box::yesNo("@Res:SoftReservationHasBeenFoundOnTaskWithNoRemainingEffort",
                DialogButton::Yes) == DialogButton::Yes)
        {
            cancelSoftReservation = true;
        }

        return cancelSoftReservation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activitySelectionReadyHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the event that gets raised when activity selection is ready.
    /// </summary>
    /// <param name = "_activity">Activity record identifier.</param>
    /// <param name = "_allocation">Allocation value.</param>
    protected void activitySelectionReadyHandler(ActivityRecId _activity, real _allocation)
    {
        activity = _activity;
        allocation = _allocation;
        if (this.bookSchedules())
        {
            this.executeActionCompleted();
            this.control().clearSelections();
            ResResourceReservationDetails::updateReservationDetailsTable(
                this.control().selections(), this.control().timescale(), this.parmResourceReservationDetails(), this.parmFormDataSource());
            this.raiseActionCompletedEvent(actionName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocationSelectionReadyHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the event that gets raised when the allocation selection is ready.
    /// </summary>
    /// <param name = "_allocation">Allocation value.</param>
    protected void allocationSelectionReadyHandler(real _allocation)
    {
        allocation = _allocation;
        if (this.bookSchedules())
        {
            this.executeActionCompleted();
            this.control().clearSelections();
            ResResourceReservationDetails::updateReservationDetailsTable(
                this.control().selections(), this.control().timescale(), this.parmResourceReservationDetails(), this.parmFormDataSource());
            this.raiseActionCompletedEvent(actionName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hourSelectionReadyHandlerV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// 2nd version to handle the event that gets raised when the hour selection is ready.
    /// </summary>
    /// <param name = "_activity">Activity record identifier.</param>
    /// <param name = "_allocation">Allocation value.</param>
    /// <param name = "_reserveProcessorType">Reserve processory type.</param>
    /// <param name = "_reservationScheduleList">Reservation schedule list is needed for manual reservation type.</param>
    protected void hourSelectionReadyHandlerV2(ActivityRecId _activity, real _allocation, ResBookingType _reserveProcessorType, List _reservationScheduleList)
    {
        #TimeConstants
        activity = _activity;
        bookingType = _reserveProcessorType;

        if (bookingType == ResBookingType::Manual)
        {
            if (_reservationScheduleList != null)
            {
                scheduleEnum = _reservationScheduleList.getEnumerator();
            }
        }
        else
        {
            allocation = _allocation * #SecondsPerHour;
        }
        
        if (this.bookSchedules())
        {
            this.executeActionCompleted();
            this.control().clearSelections();
            ResResourceReservationDetails::updateReservationDetailsTable(
                this.control().selections(), this.control().timescale(), this.parmResourceReservationDetails(), this.parmFormDataSource());
            this.raiseActionCompletedEvent(actionName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMultipleCollectionItemsLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets multiple collection items label.
    /// </summary>
    /// <returns>Multiple collection items label.</returns>
    protected str getMultipleCollectionItemsLabel()
    {
        return "@Res:MultipleResourcesSelected";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPlannedResourceCollectionItemsLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets planed resource collection items label.
    /// </summary>
    /// <returns>Planned resource collection items label.</returns>
    protected str getPlannedResourceCollectionItemsLabel()
    {
        return "@Res:PlannedResourceSelected";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNoCollectionItemLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets no collection item label.
    /// </summary>
    /// <returns>No collection item label.</returns>
    protected str getNoCollectionItemLabel()
    {
        return "@Res:SelectResourceTimeslot";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReservationConstraints</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reservation constraints for the specified schedules.
    /// </summary>
    /// <param name = "_chartItems">Enumerator of the selected chart items.</param>
    /// <param name = "_timescale">Availability view timescale.</param>
    /// <returns>Reservation constraints.</returns>
    protected container getReservationConstraints(ListEnumerator _chartItems, AVTimeframeType _timescale)
    {
        str collectionKey;
        utcdatetime start, end;
	    boolean hasValidConstraints = true;

        _chartItems.reset();
        while (_chartItems.moveNext())
        {
            ChartItemDataContract chartItem = _chartItems.current();

            if (collectionKey)
            {
                if (chartItem.collectionKey() != collectionKey)
                {
                    Box::info(this.getMultipleCollectionItemsLabel());
                    hasValidConstraints = false;
                    break;
                }
                else if (ResUtil::isPlannedResourceFromActivityResourceId(collectionKey))
                {
                    Box::info(this.getPlannedResourceCollectionItemsLabel());
                    hasValidConstraints = false;
                    break;
                }
            }
            else
            {
                collectionKey = chartItem.collectionKey();
            }

            AVTimeframe timeframe = AVTimeframe::getTimeframe(AVUtil::getDateTime(chartItem.timelineKey()), _timescale);

            if (timeframe.start() < start || start == DateTimeUtil ::minValue())
            {
                start = timeframe.start();
            }

            if (timeframe.end() > end || end == DateTimeUtil::maxValue())
            {
                end = timeframe.end();
            }
        }

        if (!collectionKey)
        {
            Box::info(this.getNoCollectionItemLabel());
            hasValidConstraints = false;
        }

        // return reservation details constraints
        return hasValidConstraints ? [collectionKey, start, end] : conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the activity resource object of the specified resource identifier.
    /// </summary>
    /// <param name = "_collectionKey">Resource identifier.</param>
    /// <returns>Activity resource object.</returns>
    protected ResActivityResource getResource(str _collectionKey)
    {
        ActivityRecId activityRecId;
        ResourceRecId resourceRecId;
        ActivityResourceRecId activityResourceRecId;

        [activityRecId, resourceRecId, activityResourceRecId] = str2con(_collectionKey, collectionKeyDelimiter);

        ResActivityResource resource = ResActivityResource::construct();

        if (resourceRecId)
        {
            resource.activityResource(activityResourceRecId);
            resource.id(resourceRecId);

            if (ResUtil::isPerformanceEnhancementFeatureEnabled(true))
            {
                ResActivityResourceDetailViewV2 activityResourcesV2;
                select crosscompany Name, Activity, SourceLegalEntity from activityResourcesV2
                    where activityResourcesV2.Resource == resourceRecId;

                resource.activity(activityResourcesV2.Activity);
                resource.name(activityResourcesV2.Name);
                resource.legalEntity(activityResourcesV2.SourceLegalEntity);
            }
            else
            {
                ResActivityResourceDetailView activityResources;
                select crosscompany Name, Activity, SourceLegalEntity from activityResources
                    where activityResources.Resource == resourceRecId;

                resource.activity(activityResources.Activity);
                resource.name(activityResources.Name);
                resource.legalEntity(activityResources.SourceLegalEntity);
            }
        }
        else
        {
            ResourceView resources;
            select Name, RecId from resources where resources.RecId == str2Int64(_collectionKey);

            resource.id(resources.RecId);
            resource.name(resources.Name);
            resource.legalEntity(ResourceFacade::getLegalEntity(resources.RecId));
        }

        return resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>ResourceAvailabilityDataController</c>.
    /// </summary>
    /// <param name = "_control">Instance of the <c>AvailabilityView</c> runtime class.</param>
    protected void new (AvailabilityView _control)
    {
        isWorkflowEnabled = ResRequestHelper::isWorkflowEnabled();

        if (!this.collectionController())
        {
            this.collectionController(ResResourceAvailabilityCollection::construct());
        }

        if (!this.timelineController())
        {
            this.timelineController(ResResourceAvailabilityTimeframe::construct());
        }

        if (!this.chartController())
        {
            this.chartController(ResResourceAvailabilityChart::construct());
        }

        super(_control);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contructs a new instance of the Resource AvailabilityView data controller.
    /// </summary>
    /// <param name = "_control">Instance of the <c>AvailabilityView</c> runtime class.</param>
    /// <returns>Returns an instance of the data controller.</returns>
    public static ResourceAvailabilityDataController construct(AvailabilityView _control = null)
    {
        ResourceAvailabilityDataController dataController = new ResourceAvailabilityDataController(_control);
        return dataController;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>