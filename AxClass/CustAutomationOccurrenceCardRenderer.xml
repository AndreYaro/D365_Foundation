<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAutomationOccurrenceCardRenderer</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// Provider for collection automation's schedule occurrence card rendering.
/// </summary>
[Export(identifierStr(Dynamics.AX.Application.ProcessScheduleIRenderSuccessfulOccurrenceCard))]
[Export(identifierStr(Dynamics.AX.Application.ProcessScheduleIRenderFailedOccurrenceCard))]
[ExportMetadata(extendedTypeStr(ProcessScheduleTypeName), 'CustAutomation')]
internal final class CustAutomationOccurrenceCardRenderer implements ProcessScheduleIRenderSuccessfulOccurrenceCard,
                                                                     ProcessScheduleIRenderFailedOccurrenceCard
{
    private ProcessScheduleOccurrenceCardRendering occurrenceCardRendering;
    private ProcessScheduleOccurrence occurrence;
    private LegalEntityDataAreaId seriesLegalEntityId;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>renderOccurrenceCardForSuccessfulOccurrence</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void renderOccurrenceCardForSuccessfulOccurrence(ProcessScheduleOccurrenceCardRendering _occurrenceCardRendering)
    {
        this.setOccurenceCardForProcessHistory(_occurrenceCardRendering);
    }

]]></Source>
			</Method>
			<Method>
				<Name>renderOccurrenceCardForFailedOccurrence</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void renderOccurrenceCardForFailedOccurrence(ProcessScheduleOccurrenceCardRendering _occurrenceCardRendering)
    {
        this.setOccurenceCardForProcessHistory(_occurrenceCardRendering);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOccurenceCardForProcessHistory</Name>
				<Source><![CDATA[
    private void setOccurenceCardForProcessHistory(ProcessScheduleOccurrenceCardRendering _occurrenceCardRendering)
    {
        this.initialize(_occurrenceCardRendering);

        _occurrenceCardRendering.setColumnsOnOccurrenceCardDetailGroup(1);

        FormButtonControl viewProcessHistory = _occurrenceCardRendering.addButtonControl('viewProcessHistory');
        viewProcessHistory.text("@CustAutomation:ViewProcessHistory");
        viewProcessHistory.style(ButtonStyle::Link);
        viewProcessHistory.widthMode(FormWidth::SizeToAvailable);
        viewProcessHistory.heightMode(FormHeight::SizeToContent);
        viewProcessHistory.registerOverrideMethod(
            methodStr(FormButtonControl, clicked),
            methodStr(CustAutomationOccurrenceCardRenderer, viewProcessHistoryJumpRef),
            this);

        _occurrenceCardRendering.makeCardButtonsInvisible();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize(ProcessScheduleOccurrenceCardRendering _occurrenceCardRendering)
    {
        if (occurrenceCardRendering == null)
        {
            occurrenceCardRendering = _occurrenceCardRendering;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOccurrence</Name>
				<Source><![CDATA[
    private ProcessScheduleOccurrence findOccurrence()
    {
        if (occurrence.RecId == 0)
        {
            occurrence = occurrenceCardRendering.getOccurrenceBeingRendered();
        }

        return occurrence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSeriesLegalEntityId</Name>
				<Source><![CDATA[
    private LegalEntityDataAreaId findSeriesLegalEntityId()
    {
        if (seriesLegalEntityId == '')
        {
            seriesLegalEntityId = ProcessScheduleSeriesCompany::getLegalEntityForSingleCompanyOccurrence(this.findOccurrence().RecId);
        }

        return seriesLegalEntityId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewProcessHistoryJumpRef</Name>
				<Source><![CDATA[
    private void viewProcessHistoryJumpRef(FormButtonControl _viewProcessHistory)
    {
        LegalEntityDataAreaId currentCompany = curExt();

        if (this.findSeriesLegalEntityId() != currentCompany)
        {
            appl.setDefaultCompany(this.findSeriesLegalEntityId(), false);
        }

        ProcessScheduleOccurrence processScheduleOccurrence = this.findOccurrence();

        Args args = new Args();
        args.record(processScheduleOccurrence);
        args.caller(this);
                
        MenuFunction menuFunction = new MenuFunction(menuItemDisplayStr(CustAutomationProcessHistory), MenuItemType::Display);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>