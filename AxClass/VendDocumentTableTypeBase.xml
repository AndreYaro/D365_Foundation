<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendDocumentTableTypeBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>VendDocumentTableTypeBase</c> class validates and applies default values to all types of vendor documents.
/// </summary>
public class VendDocumentTableTypeBase
{
    protected VendDocumentTableMap vendDocumentTableMap;
    protected VendTable vendTable;
    protected Map fieldIdMapping;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>vendDocumentTableMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the <c>VendDocumentTableMap</c> class variable.
    /// </summary>
    /// <param name="_vendDocumentTableMap">
    ///    The <c>VendDocumentTableMap</c> record to set; optional.
    /// </param>
    /// <returns>
    ///    An <c>VendDocumentTableMap</c> record that is related to the current strategy.
    /// </returns>
    /// <remarks>
    ///    The <c>VendDocumentTableMap</c> map can reference either the <c>VendInvoiceInfoTable</c> table or
    ///    the <c>PurchParmTable</c> table.
    /// </remarks>
    public VendDocumentTableMap vendDocumentTableMap(VendDocumentTableMap _vendDocumentTableMap = vendDocumentTableMap)
    {
        if (!prmisdefault(_vendDocumentTableMap))
        {
            vendDocumentTableMap = _vendDocumentTableMap;
        }

        return vendDocumentTableMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDocumentDate</Name>
				<Source><![CDATA[
    protected void defaultDocumentDate()
    {
        DocumentDate documentDate;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, DocumentDate), vendDocumentTableMap.TableId))
                || vendDocumentTableMap.DocumentDate == dateNull())
        {
            documentDate = this.determineDefaultDocumentDate();
            vendDocumentTableMap.documentDate = documentDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDocumentNum</Name>
				<Source><![CDATA[
    protected void defaultDocumentNum()
    {
        DocumentNum documentNum;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, DocumentNum), vendDocumentTableMap.TableId)))
        {
            documentNum = this.determineDefaultDocumentNum();
            vendDocumentTableMap.DocumentNum = documentNum;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies a default value for a specific field.
    /// </summary>
    /// <param name="_fieldId">
    ///    The field ID.
    /// </param>
    public void defaultField(fieldId _fieldId)
    {
        const str DefaultingMethodNamePrefix = 'default';

        str fieldName;
        str methodName;
        SysDictClass sysDictClass = new SysDictClass(classidget(this));
        FieldState internalStatusOriginal = vendDocumentTableMap.inputStatus();
        ExecutePermission permission;

        vendDocumentTableMap.inputStatus(FieldState::Defaulted);

        fieldName = fieldid2name(vendDocumentTableMap.TableId, _fieldId);
        methodName = DefaultingMethodNamePrefix + fieldName;

        if (sysDictClass.hasObjectMethod(methodName))
        {
            permission = new ExecutePermission();
            permission.assert();
            sysDictClass.callObject(methodName, this);
            CodeAccessPermission::revertAssert();
        }

        vendDocumentTableMap.inputStatus(internalStatusOriginal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultParmJobStatus</Name>
				<Source><![CDATA[
    protected void defaultParmJobStatus()
    {
        ParmJobStatus parmJobStatus;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, ParmJobStatus), vendDocumentTableMap.TableId)))
        {
            parmJobStatus = this.determineDefaultParmJobStatus();
            vendDocumentTableMap.ParmJobStatus = parmJobStatus;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies default field values.
    /// </summary>
    public void defaultRow()
    {
        FieldState internalStatusOriginal = vendDocumentTableMap.inputStatus();

        vendDocumentTableMap.inputStatus(FieldState::Defaulted);
        // ParmId should be passed in the table buffer.

        this.defaultCommonFields();

        vendDocumentTableMap.inputStatus(internalStatusOriginal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCommonFields</Name>
				<Source><![CDATA[
    protected void defaultCommonFields()
    {
        this.defaultTransDate();
        this.defaultDocumentNum();
        this.defaultDocumentDate();
        this.defaultParmJobStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTransDate</Name>
				<Source><![CDATA[
    protected void defaultTransDate()
    {
        TransDate transDate;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, TransDate), vendDocumentTableMap.TableId))
                || vendDocumentTableMap.TransDate == dateNull())
        {
            transDate = this.determineDefaultTransDate();
            vendDocumentTableMap.TransDate = transDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultDocumentDate</Name>
				<Source><![CDATA[
    protected DocumentDate determineDefaultDocumentDate()
    {
        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultDocumentNum</Name>
				<Source><![CDATA[
    protected DocumentNum determineDefaultDocumentNum()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultParmJobStatus</Name>
				<Source><![CDATA[
    protected ParmJobStatus determineDefaultParmJobStatus()
    {
        return ParmJobStatus::Waiting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTransDate</Name>
				<Source><![CDATA[
    protected TransDate determineDefaultTransDate()
    {
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDocumentDate</Name>
				<Source><![CDATA[
    protected boolean validateDocumentDate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates a value for the specified field.
    /// </summary>
    /// <param name="_fieldId">
    ///    The field ID of the field to validate.
    /// </param>
    /// <returns>
    ///    true if the value is valid; otherwise, false.
    /// </returns>
    public boolean validateField(fieldId _fieldId)
    {
        const str ValidationMethodNamePrefix = 'validate';

        str fieldName = fieldid2name(vendDocumentTableMap.TableId, _fieldId);
        str methodName = ValidationMethodNamePrefix + fieldName;
        SysDictClass sysDictClass = new SysDictClass(classidget(this));
        ExecutePermission permission;
        boolean isValid = true;

        if (sysDictClass.hasObjectMethod(methodName))
        {
            permission = new ExecutePermission();
            permission.assert();
            isValid = sysDictClass.callObject(methodName, this);
            CodeAccessPermission::revertAssert();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNum</Name>
				<Source><![CDATA[
    protected boolean validateNum()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransDate</Name>
				<Source><![CDATA[
    protected boolean validateTransDate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getfieldNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field ID of a given field in the table mapped to the <c>VendDocumentTableMap</c>.
    /// </summary>
    /// <param name="_fieldIdInMap">
    /// The ID of the field in the <c>VendDocumentLineMap</c>.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the table mapped to the <c>VendDocumentLineMap</c>.
    /// </param>
    /// <returns>
    /// The ID of the field in the mapped table.
    /// </returns>
    public fieldId getfieldNum(fieldId _fieldIdInMap, tableId _tableId)
    {
        if (fieldIdMapping == null)
        {
            fieldIdMapping = VendDocumentUtil::fieldMapping(tablenum(VendDocumentTableMap), _tableId);
        }

        return fieldIdMapping.lookup(_fieldIdInMap);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>