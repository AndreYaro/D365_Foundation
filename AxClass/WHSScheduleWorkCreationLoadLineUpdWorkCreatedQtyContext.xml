<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSScheduleWorkCreationLoadLineUpdWorkCreatedQtyContext</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSScheduleWorkCreationLoadLineUpdWorkCreatedQtyContext implements System.IDisposable
{
    private static WHSScheduleWorkCreationLoadLineUpdWorkCreatedQtyContext instance;

    private Map pendingLoadLineUpdatesMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
    public void Dispose()
    {
        instance = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        if (instance)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        instance = this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSScheduleWorkCreationLoadLineUpdWorkCreatedQtyContext construct()
    {
        return new WHSScheduleWorkCreationLoadLineUpdWorkCreatedQtyContext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>current</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSScheduleWorkCreationLoadLineUpdWorkCreatedQtyContext current()
    {
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPendingLoadLineUpdatesMap</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Map parmPendingLoadLineUpdatesMap(Map _pendingLoadLineUpdatesMap = pendingLoadLineUpdatesMap)
    {
        pendingLoadLineUpdatesMap = _pendingLoadLineUpdatesMap;

        return pendingLoadLineUpdatesMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newUpdLoadLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSScheduleWorkCreationLoadLineUpdWorkCreatedQtyContext newUpdLoadLine()
    {
        Map updLoadLine = new Map(Types::Int64, Types::Real);

        WHSScheduleWorkCreationLoadLineUpdWorkCreatedQtyContext context = WHSScheduleWorkCreationLoadLineUpdWorkCreatedQtyContext::construct();
        context.pendingLoadLineUpdatesMap = updLoadLine;

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLoadLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void addLoadLine(RefRecId _loadLineRecId, WHSWorkCreatedQty _qty)
    {
        WHSWorkCreatedQty workCreatedQty = _qty;
        if (pendingLoadLineUpdatesMap.exists(_loadLineRecId))
        {
            WHSWorkCreatedQty oldWorkCreatedQty = pendingLoadLineUpdatesMap.lookup(_loadLineRecId);
            workCreatedQty += oldWorkCreatedQty;
        }

        pendingLoadLineUpdatesMap.insert(_loadLineRecId, workCreatedQty);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>