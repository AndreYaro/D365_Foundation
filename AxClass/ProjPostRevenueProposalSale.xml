<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostRevenueProposalSale</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjPostRevenueProposalSale extends ProjPostRevenueProposal
{
    ProjProposalRevenueDetail  projProposalRevenueDetail;
    ProjRevenueTransSale       projRevenueTransSale;
    ProjRevenueTrans           projRevenueTrans;
    ProjInvoiceRevenueDetail   projInvoiceRevenueDetail;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustmentLedgerSalesAmount</Name>
				<Source><![CDATA[
    protected AmountCur adjustmentLedgerSalesAmount()
    {
        return this.parmAdjustmentLedgerSalesAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterTurnover</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether revenue should be posted for the transaction.
    /// </summary>
    /// <returns>
    /// true if the revenue amount is non-zero and the method <c>parmEnterTurnover</c> returns true;
    /// otherwise, false.
    /// </returns>
    protected boolean checkEnterTurnover()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && 
            ((this.parmTransactionOrigin() == ProjOrigin::FreeTextInvoice && !this.parmLedgerVoucher()) || 
             this.parmTransactionOrigin() == ProjOrigin::AdvancedLedgerEntry))
        {
            return false;
        }
        else
        {
            if ((this.parmTransactionOrigin() == ProjOrigin::FreeTextInvoice && !this.parmLedgerVoucher()) ||
                (this.parmTransactionOrigin() == ProjOrigin::Subscription && !projtrans.transTurnover()))
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the exchange rate to use for a sales amount posting.
    /// </summary>
    /// <returns>
    /// The exchange rate to use for a sales amount posting.
    /// </returns>
    /// <remarks>
    /// If the method <c>ProjPost.parmReverseAccrued</c> returns true, the exchange rate that is returned
    /// will be 0. When the value is 0, the routine to compute currency amounts will look up the exchange
    /// rate from the currency exchange table.
    /// </remarks>
    public ExchRate exchRateSales()
    {
        if (projRevenueTrans.smaSubscriptionId && !this.parmReverseAccrued())
        {
            return projTrans.exchRateSales(ledgerVoucher.findLedgerVoucherObject().parmTransDate());
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondarySales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the secondary exchange rate to use in posting sales amounts.
    /// </summary>
    /// <returns>
    /// The secondary exchange rate to use for computing sales amounts.
    /// </returns>
    /// <remarks>
    /// This value is used when triangulation is required to determine the default currency amount.If the
    /// method <c>ProjPost.parmReverseAccrued</c> method returns true, the exchange rate that is returned
    /// will be 0. When the value is 0, the routine to compute currency amounts will look up the exchange
    /// rate from the currency exchange table.
    /// </remarks>
    public ExchRate exchRateSecondarySales()
    {
        if (projRevenueTrans.smaSubscriptionId && !this.parmReverseAccrued())
        {
            return projTrans.exchRateSecondarySales(ledgerVoucher.findLedgerVoucherObject().parmTransDate());
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondaryTurnover</Name>
				<Source><![CDATA[
    public ExchRate exchRateSecondaryTurnover()
    {
        ProjInvoiceJour             projInvoiceJourOrig;
        ProjInvoiceRevenueDetail    projInvoiceRevenueDetailOrig;

        if (this.checkProjTransStatusIsCreditNoteProposal(projRevenueTransSale.TransStatus))
        {
            projInvoiceRevenueDetail.reread();
            select projInvoiceRevenueDetailOrig where projInvoiceRevenueDetailOrig.RecId == projInvoiceRevenueDetail.RefRecId;
            projInvoiceJourOrig = projInvoiceRevenueDetailOrig.projInvoiceRevenue().projInvoiceJour();
            return projTrans.exchRateSecondarySales(projInvoiceJourOrig.InvoiceDate);
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateTurnover</Name>
				<Source><![CDATA[
    public ExchRate exchRateTurnover()
    {
        ProjInvoiceJour             projInvoiceJourOrig;
        ProjInvoiceRevenueDetail    projInvoiceRevenueDetailOrig;

        if (this.checkProjTransStatusIsCreditNoteProposal(projRevenueTransSale.TransStatus))
        {
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
            {
                projInvoiceRevenueDetail.reread();
                select firstOnly projInvoiceRevenueDetailOrig where projInvoiceRevenueDetailOrig.RecId == projInvoiceRevenueDetail.RefRecId;
                projInvoiceJourOrig = projInvoiceRevenueDetailOrig.projInvoiceRevenue().projInvoiceJour();
                return projTrans.exchRateSales(projInvoiceJourOrig.InvoiceDate);
            }
            else
            {
                return projTrans.exchRateSales(projProposalRevenue.projProposalJour().InvoiceDate);
            }
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProjProposalRevenue  _projProposalRevenue, ProjProposalRevenueDetail  _projProposalRevenueDetail, ProjRevenueTransSale _projRevenueTransSale)
    {
        projProposalRevenueDetail = _projProposalRevenueDetail;
        projRevenueTransSale = _projRevenueTransSale;
        projRevenueTrans = _projRevenueTransSale.projRevenueTrans();

        super(_projProposalRevenue);

        projTrans = ProjTrans::newProjProposalRevenueSale(_projProposalRevenue, _projProposalRevenueDetail, _projRevenueTransSale);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceUpdate</Name>
				<Source><![CDATA[
    private void projInvoiceUpdate(RefRecId _saleRefRecId)
    {
        ProjInvoiceRevenueDetail     projInvoiceRevenueDetailOrginal;
        ProjInvoiceRevenueDetail     projInvoiceRevenueDetailReverse;

        ttsbegin;

        select forupdate RefRecId from projInvoiceRevenueDetailOrginal
            where  projInvoiceRevenueDetailOrginal.SaleRefRecId == _saleRefRecId
               && !projInvoiceRevenueDetailOrginal.RefRecId;

        select forupdate RefRecId from projInvoiceRevenueDetailReverse
            where  projInvoiceRevenueDetailReverse.SaleRefRecId == _saleRefRecId
               &&  projInvoiceRevenueDetailReverse.RecId != projInvoiceRevenueDetailOrginal.RecId
               && !projInvoiceRevenueDetailReverse.RefRecId;

        projInvoiceRevenueDetailReverse.RefRecId = projInvoiceRevenueDetailOrginal.RecId;

        projInvoiceRevenueDetailOrginal.RefRecId = projInvoiceRevenueDetailReverse.RecId;

        projInvoiceRevenueDetailReverse.update();
        projInvoiceRevenueDetailOrginal.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows for extensibility in creating a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method contains no code.This method is called by the <c>ProjPost.postTrans</c> method before
    /// the <c>ProjPost.ledgerTransActionsCreate</c> method when the <c>ProjPost.parmCreateTrans</c> method
    /// is true.
    /// </remarks>
    public void projTransCreate()
    {
        ProjInvoiceRevenue projInvoiceRevenue;
        InventQty invoiceQty;
        boolean isCreditNote;

        projInvoiceRevenueDetail.clear();
        projInvoiceRevenueDetail = ProjInvoiceRevenueDetail::initInvoiceFromProposale(
            projProposalRevenue,
            projProposalRevenueDetail,
            projRevenueTransSale);

        select firstonly RecId from projInvoiceRevenue
            where projInvoiceRevenue.ProjInvoiceId == projProposalRevenue.projProposalJour().ProjInvoiceId
                && projInvoiceRevenue.TransId == projProposalRevenue.projRevenueTrans().TransId;

        projInvoiceRevenueDetail.InvoiceRefRecId = projInvoiceRevenue.RecId;
        projInvoiceRevenueDetail.insert();

        if (this.checkProjTransStatusIsCreditNoteProposal(projRevenueTransSale.TransStatus))
        {
            isCreditNote = true;
            this.projInvoiceUpdate(projRevenueTransSale.RecId);
        }

        //Update contract line units or percent(IsInvoice).
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && ProjInvoiceTable::find(PSAContractLineItems::find(projProposalRevenue.psaContractLineNum).ProjInvoiceProjId).psaContractLines == NoYes::Yes)
        {
            if (PSAContractLineItemsServer::shouldInvoiceLogBeSplit(projProposalRevenue.psaContractLineNum)
                || (PSAContractLineItems::find(projProposalRevenue.psaContractLineNum).LineType == PSAContractLineType::UOD))
            {
                invoiceQty = PSAContractLineItemsServer::computeQuantityForUOD(
                    projProposalRevenue.psaContractLineNum,
                    projProposalRevenue.lineAmount(),
                    isCreditNote);
            }

            if (invoiceQty > 0.0)
            {
                PSAContractLineItemsServer::updateUnitsOrPercentInvoice(
                    projProposalRevenue.psaContractLineNum,
                    NoYes::Yes,
                    invoiceQty,
                    0.0,
                    isCreditNote);
            }
            else if (!projProposalRevenue.IsRetained && !projProposalRevenue.IsReleased)
            {
                PSAContractLineItemsServer::updateUnitsOrPercentInvoice(
                    projProposalRevenue.psaContractLineNum,
                    NoYes::Yes,
                    0.0,
                    projProposalRevenueDetail.AmountCur);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method after the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmUpdateTrans</c> method returns true.
    /// </remarks>
    public void projTransUpdate()
    {
        projRevenueTransSale.selectForUpdate(true);
        projRevenueTransSale.reread();

        if (this.isCreditNoteSubscription())
        {
            projRevenueTransSale.LedgerSalesAmount      = 0;
            projRevenueTransSale.LedgerSalesPosted      = NoYes::No;
        }
        else if (this.checkCreditNoteSalesAccrued())
        {
            projRevenueTransSale.LedgerSalesPosted      = this.checkEnterSalesAccrued();
            if (this.checkEnterSalesAccrued())
            {
                projRevenueTransSale.LedgerSalesAmount  = -projTrans.transTurnoverMST();
            }
        }
        else
        {
            projRevenueTransSale.LedgerSalesAmount      = 0;
            projRevenueTransSale.LedgerSalesPosted      = NoYes::No;
        }

        projRevenueTransSale.SalesPrice                 = projTrans.salesPrice();
        projRevenueTransSale.LineAmount                 = projTrans.transTurnover();
        if (this.checkProjTransStatusIsCreditNoteProposal(projTrans.transStatus()))
        {
            projRevenueTransSale.LineAmount = projRevenueTransSale.LineAmount * -1;
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                select projRevenueTrans
                    where projRevenueTrans.TransId == projRevenueTransSale.TransId
                        && (projRevenueTrans.IsReleased == NoYes::Yes
                        || projRevenueTrans.IsRetained == NoYes::Yes);

                if (projRevenueTrans)
                {
                    projRevenueTransSale.TransStatus = this.parmTransStatus();
                    projRevenueTransSale.psaRetentionPercent = projProposalRevenueDetail.psaRetentionPercent * -1;
                    projRevenueTransSale.update();
                }
            }
        }

        if (this.isUoDCreditNoteProposal())
        {
            // Unit of Delivery credit note invoiced, set existing Revenue trans status to Adjusted. New UoD invoice will generate new Revenue transaction.
            projRevenueTransSale.TransStatus = ProjTransStatus::Adjusted;
        }
        else
        {
            projRevenueTransSale.TransStatus                = this.parmTransStatus();
        }
        
        if (!projRevenueTransSale.LedgerSalesPosted &&
             SMAParametersSubscription::find().SubDeleteAccrued &&
             !this.checkProjTransStatusIsCreditNoteProposal(projTrans.transStatus())) // creditnote will be deleted in projFormLetter class after re-draw
        {
            SMAAccruePeriodLine::deleteAccrueLines(projRevenueTransSale.TransId);
        }

        projRevenueTransSale.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUoDCreditNoteProposal</Name>
				<Source><![CDATA[
    protected boolean isUoDCreditNoteProposal()
    {
        return projTrans.psaContractLineNum()
            && projTrans.transStatus() == ProjTransStatus::CreditnoteProposal
            && PSAContractLineItems::find(projTrans.psaContractLineNum()).LineType == PSAContractLineType::UOD;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of <c>ProjPostRevenueProposalSale</c>.
    /// </summary>
    /// <param name = "_projProposalRevenue">
    ///     An instance of <c>ProjProposalRevenue</c> table buffer.
    /// </param>
    /// <param name = "_projProposalRevenueDetail">
    ///     An instance of <c>ProjProposalRevenueDetail</c> table buffer.
    /// </param>
    /// <param name = "_projRevenueTransSale">
    ///     An instance of <c>ProjRevenueTransSale</c> table buffer.
    /// </param>
    /// <returns>
    ///     An instance of <c>ProjPostRevenueProposal</c> class.
    /// </returns>
    public static ProjPostRevenueProposal construct(ProjProposalRevenue  _projProposalRevenue, ProjProposalRevenueDetail  _projProposalRevenueDetail, ProjRevenueTransSale _projRevenueTransSale)
    {
        ProjPostRevenueProposal projPostRevenueProposal = new ProjPostRevenueProposalSale(_projProposalRevenue, _projProposalRevenueDetail, _projRevenueTransSale);
        return projPostRevenueProposal;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>