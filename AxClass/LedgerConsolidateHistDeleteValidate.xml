<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerConsolidateHistDeleteValidate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerConsolidateHistDeleteValidate</c> class performs validations to see if the specified pre-exsting consolidation transactions
/// can be deleted.
/// </summary>
final class LedgerConsolidateHistDeleteValidate
{
    internal TransDate fromDate;
    internal TransDate toDate;
    internal CompanyId consolidationCompanyId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateTransactionsCanBeDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a two-step validation
    /// 1) Given a date range passed in, verify if there are any executing consolidation batches using any of the same dates
    /// 2) If there are any batches that have intersecting dates, then do an additional check to see if that batch's consolidation involves the
    ///    consolidation company.
    /// </summary>
    /// <param name="_batchJobId">
    /// The ID of the batch job when the consolidation is running in batch; otherwise, zero.
    /// </param>
    internal boolean validateTransactionsCanBeDeleted(RefRecId _batchJobId)
    {
        const int consolidateFromDateParameter = 5;
        const int consolidateToDateParameter = 6;

        Batch batch;
        BatchJob batchjob;

        // need to grab the status of the batch from the BatchJob table, as I've seen the status of the batch record itself switch to completed
        // well before the actual batch job had finished executing.
        while select Parameters, Company from batch
            where batch.ClassNumber == classNum(LedgerConsolidate)
                && batch.BatchJobId != _batchJobId
                && batch.ServerId != ''
        join batchJob 
            where batchjob.RecId == batch.BatchJobId
                && batchjob.Status == BatchStatus::Executing
        {
            container parameters = batch.Parameters;
            TransDate batchFromDate = conPeek(parameters, consolidateFromDateParameter);
            TransDate batchToDate = conPeek(parameters, consolidateToDateParameter);

            // We need to make sure no part of the timeframe passed in falls within the batch timeframe.  
            boolean dateRangesOverlap = this.doDateRangesOverlap(fromDate, toDate, batchFromDate, batchToDate);

            // Date range passed in collides with date range from current batch, need to check if the current batch involves the same consolidation company
            if (dateRangesOverlap)
            {
                if (consolidationCompanyId == batch.Company)
                {
                    return false;
                }
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doDateRangesOverlap</Name>
				<Source><![CDATA[
    private boolean doDateRangesOverlap(TransDate _fromDate, TransDate _toDate, TransDate _batchFromDate, TransDate _batchToDate)
    {
        boolean dateRangesOverlap = false;

        // We need to make sure no part of the timeframe passed in falls within the batch timeframe.
        if (!((_fromDate > _batchToDate) || (_toDate < _batchFromDate)))
        {
            dateRangesOverlap = true;
        }
        return dateRangesOverlap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValuesFromLedgerConsolidateHistRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the "time fence" (the fromDate and toDate class variables) from the consolidation history record joined against the GJAE records.
    /// Also sets the ledger associated with this history record.
    /// </summary>
    internal void setValuesFromLedgerConsolidateHistRecord(RecId _histRecId)
    {
        if (_histRecId != 0)
        {
            fromDate = LedgerConsolidateHistDeleteValidate::getMinAccountingDate(_histRecId);
            toDate = LedgerConsolidateHistDeleteValidate::getMaxAccountingDate(_histRecId);
            consolidationCompanyId = LedgerConsolidateHist::getConsolidationCompanyIdFromHistoryRecord(_histRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValuesFromLedgerConsolidate</Name>
				<Source><![CDATA[
    internal void setValuesFromLedgerConsolidate(LedgerConsolidate _ledgerConsolidate)
    {
        fromDate = _ledgerConsolidate.fromDate();
        toDate = _ledgerConsolidate.toDate();
        if (consolidationCompanyId == '')
        {
            consolidationCompanyId = curExt();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMinAccountingDate</Name>
				<Source><![CDATA[
    private static TransDate getMinAccountingDate(RecId _histRecId)
    {
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        LedgerConsolidateHistRef ledgerConsolidateHistRef;

        select minof(AccountingDate) from generalJournalEntry
                where generalJournalEntry.Ledger == Ledger::current()
            exists join generalJournalAccountEntry
                where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
            exists join ledgerConsolidateHistRef
                where ledgerConsolidateHistRef.TransTableId == tableNum(GeneralJournalAccountEntry) &&
                    ledgerConsolidateHistRef.TransRecid == generalJournalAccountEntry.RecId &&
                    ledgerConsolidateHistRef.RefRecId == _histRecId;

        return generalJournalEntry.AccountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxAccountingDate</Name>
				<Source><![CDATA[
    private static TransDate getMaxAccountingDate(RecId _histRecId)
    {
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        LedgerConsolidateHistRef ledgerConsolidateHistRef;

        select maxof(AccountingDate) from generalJournalEntry
                where generalJournalEntry.Ledger == Ledger::current()
            exists join generalJournalAccountEntry
                where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
            exists join ledgerConsolidateHistRef
                where ledgerConsolidateHistRef.TransTableId == tableNum(GeneralJournalAccountEntry) &&
                    ledgerConsolidateHistRef.TransRecid == generalJournalAccountEntry.RecId &&
                    ledgerConsolidateHistRef.RefRecId == _histRecId;

        return generalJournalEntry.AccountingDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>