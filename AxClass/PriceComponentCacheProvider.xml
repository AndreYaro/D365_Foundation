<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceComponentCacheProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Abstract class encapsulating the base functionality around price component caching.
/// </summary>
[Microsoft.Dynamics.AX.Platform.Extensibility.ExportInterfaceAttribute()]
public abstract class PriceComponentCacheProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCacheScope</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the scope within which the cache will be maintained.
    /// </summary>
    /// <returns>A string which will be used for defining the scope of the cache.</returns>
    protected abstract GlobalObjectCacheScope getCacheScope(){}

]]></Source>
			</Method>
			<Method>
				<Name>getFromDataStore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Queries the data store and returns the price component.
    /// </summary>
    /// <param name = "_priceComponentCriteria">The criteria used to query the data store.</param>
    /// <returns></returns>
    protected abstract PriceComponentResult getFromDataStore(PriceComponentCriteria _priceComponentCriteria){}

]]></Source>
			</Method>
			<Method>
				<Name>parmClassName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current class name.
    /// </summary>
    /// <returns>The current class name.</returns>
    protected abstract ClassName parmClassName(){}

]]></Source>
			</Method>
			<Method>
				<Name>flushCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Flushes the price component cache.
    /// The cache is shared across sessions. So it is important that this method is called
    /// when the change that should flush the cache is not just updated in the datastore but also committed.
    /// This will prevent other sessions to read stale data and populate the cache.
    /// </summary>
    public void flushCache()
    {
        classfactory.globalObjectCache().clear(this.getCacheScope());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the price component based on the criteria in the parameter.
    /// </summary>
    /// <param name = "_criteria">An instance of a concrete child class of the <c>PriceComponentCriteria</c> class.</param>
    /// <returns>An instance of a concrete child class of the <c>PriceComponentResult</c> class.</returns>
    public PriceComponentResult getComponent(PriceComponentCriteria _criteria)
    {
        PriceComponentResult result = this.getFromCache(_criteria);

        if (result != null)
        {
            return result;
        }

        result = this.getFromDataStore(_criteria);

        this.setInCache(_criteria, result);
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildComponentFromCachedContainer</Name>
				<Source><![CDATA[
    private PriceComponentResult buildComponentFromCachedContainer(container _componentContainer)
    {
        PriceComponentResult priceComponentResult =
            new PriceComponentCacheFactory().getPriceComponentResultInstance(this.parmClassName());

        priceComponentResult.unpack(_componentContainer);

        return priceComponentResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInCache</Name>
				<Source><![CDATA[
    private void setInCache(PriceComponentCriteria _key, PriceComponentResult _value)
    {
        SysGlobalObjectCache    cache = classfactory.globalObjectCache();

        cache.insert(this.getCacheScope(), _key.pack(), _value.pack());

        container cachedResultContainer =
            classfactory.globalObjectCache().find(this.getCacheScope(), _key.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromCache</Name>
				<Source><![CDATA[
    private PriceComponentResult getFromCache(PriceComponentCriteria _key)
    {
        container cachedResultContainer =
            classfactory.globalObjectCache().find(this.getCacheScope(), _key.pack());

        if (cachedResultContainer != conNull())
        {
            return this.buildComponentFromCachedContainer(cachedResultContainer);
        }

        return null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>