<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimensionValidationHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>DimensionValidationHelper</c> class has helper methods for working with the <c>DimensionValidation</c> class
/// and subscriber methods to delegates on the <c>DimensionValidationDelegates</c> class and the <c>LedgerDimensionValidationHelper</c> class.
/// </summary>
public class DimensionValidationHelper
{
    #DimensionServiceFaults

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateByJournalName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the specified combination for journal control restrictions.
    /// </summary>
    /// <param name="_ledgerLegalEntity">
    ///    The legal entity of the combination to validate.
    /// </param>
    /// <param name="_ledgerDimension">
    ///    The record ID of the combination to validate.
    /// </param>
    /// <param name="_ledgerJournalNameId">
    ///    The natural key of the <c>LedgerJournalName</c> record that partially specifies the journal control.
    /// </param>
    /// <param name="_ledgerJournalControlId">
    ///    The record ID of the <c>LedgerJournalControlHeader</c> record that partially specifies the journal
    ///    control.
    /// </param>
    /// <param name="_displayValidationMessage">
    ///    A Boolean value that indicates whether to display warning messages on validation failures.
    /// </param>
    /// <returns>
    ///    true if the combination passes journal control validation; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The <c>validateByTree</c> method should be called before this method is called in order to detect
    ///    structure changes.
    /// </remarks>
    public static boolean validateByJournalName(
            RecId               _ledgerLegalEntity,
            RecId               _ledgerDimension,
            LedgerJournalNameId _ledgerJournalNameId,
            RecId               _ledgerJournalControlId,
            boolean             _displayValidationMessage = false)
    {
        DimensionAttributeValueGroupCombination     dimAttrValueGroupCombo;
        DimensionAttributeValueGroup                dimAttrValueGroup;
        DimensionAttributeLevelValue                dimAttrLevelValue;
        DimensionValueGroupJournalControlStatus     dimValueGroupJournalControlStatus;
        DimensionAttributeValueCombination          dimAttrValueCombination;
        DimensionConstraintTree                     dimConstraintTree;
        DimensionHierarchy                          dimHierarchy;
        DimensionValue                              displayValues[];
        LedgerJournalControlDetail                  ledgerJournalControlDetail;
        MainAccount                                 mainAccount;
        RecId                                       treeId;
        Query                                       query;
        QueryRun                                    queryRun;
        QueryBuildDataSource                        qbds;
        int                                         i;
        boolean                                     result;
        UserConnection                              userConnection;

        // Validate input parameters
        if (!_ledgerLegalEntity || !_ledgerDimension || !_ledgerJournalNameId || !_ledgerJournalControlId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        // Check if detail record exists (and lookup main account)
        select firstonly DimensionConstraintTree, RecId from ledgerJournalControlDetail
                where ledgerJournalControlDetail.LedgerJournalControl == _ledgerJournalControlId &&
                    ledgerJournalControlDetail.LedgerLegalEntity == _ledgerLegalEntity
            join DimensionHierarchy, Levels, RecId from dimAttrValueGroup
                    where ledgerJournalControlDetail.DimensionHierarchy == dimAttrValueGroup.DimensionHierarchy
            join RecId from dimAttrValueGroupCombo
                where dimAttrValueGroupCombo.DimensionAttributeValueGroup == dimAttrValueGroup.RecId &&
                    dimAttrValueGroupCombo.DimensionAttributeValueCombination == _ledgerDimension &&
                    dimAttrValueGroupCombo.Ordinal == 1
            join RecId from dimConstraintTree
                where dimConstraintTree.RecId == ledgerJournalControlDetail.DimensionConstraintTree
            join RecId from dimHierarchy
                where dimHierarchy.RecId == dimConstraintTree.DimensionHierarchy &&
                    dimHierarchy.IsDraft == false
            join RecId, MainAccount from dimAttrValueCombination
                where dimAttrValueCombination.RecId == _ledgerDimension
            outer join mainAccount
                where mainAccount.RecId == dimAttrValueCombination.MainAccount;

        // Early out if no detail record
        if (ledgerJournalControlDetail.RecId == 0)
        {
            // Check if detail record exists - but is in draft state
            select firstonly DimensionConstraintTree, RecId from ledgerJournalControlDetail
                    where ledgerJournalControlDetail.LedgerJournalControl == _ledgerJournalControlId &&
                        ledgerJournalControlDetail.LedgerLegalEntity == _ledgerLegalEntity
                join DimensionHierarchy, Levels, RecId from dimAttrValueGroup
                        where ledgerJournalControlDetail.DimensionHierarchy == dimAttrValueGroup.DimensionHierarchy
                join RecId from dimAttrValueGroupCombo
                    where dimAttrValueGroupCombo.DimensionAttributeValueGroup == dimAttrValueGroup.RecId &&
                        dimAttrValueGroupCombo.DimensionAttributeValueCombination == _ledgerDimension &&
                        dimAttrValueGroupCombo.Ordinal == 1
                join RecId from dimConstraintTree
                    where dimConstraintTree.RecId == ledgerJournalControlDetail.DimensionConstraintTree
                join RecId from dimHierarchy
                    where dimHierarchy.RecId == dimConstraintTree.DimensionHierarchy
                        && dimHierarchy.IsDraft == true
                join RecId from dimAttrValueCombination
                    where dimAttrValueCombination.RecId == _ledgerDimension
                outer join mainAccount
                    where mainAccount.RecId == dimAttrValueCombination.MainAccount;

            DimensionConstraintTreeRecId draftConstraintId = ledgerJournalControlDetail.DimensionConstraintTree;

            if (draftConstraintId)
            {
                DimensionTree::activateDraft(draftConstraintId, true);
            }
            else
            {
                return true;
            }
        }

        // Validate Main account
        if (mainAccount.RecId == 0)
        {
            if (_displayValidationMessage)
            {
                // The ledger account combination %1 is not valid.  The journal control setup for the ledger account posting type does not match the ledger account.
                AifFault::logWarning(literalStr("@SYS138933"), #JournalControlFailed, '', [LedgerDimensionFacade::getDisplayValueForLedgerDimension(_ledgerDimension)]);
            }

            if (DimensionValidation::emitTelemetry())
            {
                SysInstrumentationLoggerFactory::CreateLogger(classStr(DimensionValidationHelper))
                    .logWarning(strFmt('Journal Control validation: MainAccount was not found for DimensionAttributeValueCombination %1 and DAVC.MainAccount %2',
                    _ledgerDimension, dimAttrValueCombination.MainAccount));
            }

            // Journal control validation requires a main account (don't cache: it is the top order check)
            return false;
        }
        else
        {
            if (mainAccount.isNonPostingAccount())
            {
                if (_displayValidationMessage)
                {
                    // The ledger account combination %1 is not valid.  The journal control setup for the ledger account posting type does not match the ledger account.
                    AifFault::logWarning(literalStr("@SYS138933"), #JournalControlFailed, '',  [LedgerDimensionFacade::getDisplayValueForLedgerDimension(_ledgerDimension)]);
                }

                if (DimensionValidation::emitTelemetry())
                {
                    SysInstrumentationLoggerFactory::CreateLogger(classStr(DimensionValidationHelper))
                    .logWarning(strFmt('Journal Control validation: MainAccount %1 for DimensionAttributeValueCombination %2 was a non-posting account.', 
                        mainAccount.RecId, _ledgerDimension));
                }

                // Invalid account type (don't cache: it is the top order check)
                return false;
            }
        }

        // Lookup status record
        Debug::assert(dimAttrValueGroup.RecId);
        select firstonly RecId, IsValid from dimValueGroupJournalControlStatus
                where dimValueGroupJournalControlStatus.DimensionAttributeValueGroup == dimAttrValueGroup.RecId &&
                        dimValueGroupJournalControlStatus.LedgerJournalName == _ledgerJournalNameId &&
                        dimValueGroupJournalControlStatus.LedgerLegalEntity == _ledgerLegalEntity;

        // Early out if status record is found
        if (dimValueGroupJournalControlStatus.RecId)
        {
            if (!dimValueGroupJournalControlStatus.IsValid && _displayValidationMessage)
            {
                // The ledger account combination %1 is not valid.  The journal control setup for the ledger account posting type does not match the ledger account.
                AifFault::logWarning(literalStr("@SYS138933"), #JournalControlFailed, '', [LedgerDimensionFacade::getDisplayValueForLedgerDimension(_ledgerDimension)]);

                if (DimensionValidation::emitTelemetry())
                {
                    SysInstrumentationLoggerFactory::CreateLogger(classStr(DimensionValidationHelper))
                    .logWarning(strFmt('Journal Control validation: The DimensionValueGroupStatus record %1 marked the group %2 as invalid.', 
                        dimValueGroupJournalControlStatus.RecId, dimAttrValueGroup.RecId));
                }
            }

            return dimValueGroupJournalControlStatus.IsValid;
        }

        // Create query
        treeId = ledgerJournalControlDetail.DimensionConstraintTree;
        query = new Query();
        qbds = DimensionValidation::getTreeQueryBuildDataSource(query, treeId);

        // Get displayValues
        while select DisplayValue, Ordinal from dimAttrLevelValue
            order by Ordinal
            where dimAttrLevelValue.DimensionAttributeValueGroup == dimAttrValueGroup.RecId
        {
            displayValues[dimAttrLevelValue.Ordinal] = dimAttrLevelValue.DisplayValue;
        }

        // Add restrictions
        for (i = 1; i <= dimAttrValueGroup.Levels; i++)
        {
            DimensionValidation::addLevelToQuery(qbds, displayValues[i], i, treeId);
        }

        // Execute query
        queryRun = new QueryRun(query);
        result = queryRun.next();

        // Cache the validation result
        userConnection = new userConnection();

        try
        {
            dimValueGroupJournalControlStatus = null; // Ensure connection/company cleared after being used above
            dimValueGroupJournalControlStatus.setConnection(userConnection);
            dimValueGroupJournalControlStatus.DimensionAttributeValueGroup = dimAttrValueGroup.RecId;
            dimValueGroupJournalControlStatus.LedgerJournalName = _ledgerJournalNameId;
            dimValueGroupJournalControlStatus.DimensionConstraintTree = treeId;
            dimValueGroupJournalControlStatus.LedgerLegalEntity = _ledgerLegalEntity;
            dimValueGroupJournalControlStatus.IsValid = result;
            dimValueGroupJournalControlStatus.insert();
        }
        finally
        {
            userConnection.finalize();
        }

        if (!result && _displayValidationMessage)
        {
            // The ledger account combination %1 is not valid.  The journal control setup for the ledger account posting type does not match the ledger account.
            AifFault::logWarning(literalStr("@SYS138933"), #JournalControlFailed, '', [LedgerDimensionFacade::getDisplayValueForLedgerDimension(_ledgerDimension)]);

            if (DimensionValidation::emitTelemetry())
            {
                SysInstrumentationLoggerFactory::CreateLogger(classStr(DimensionValidationHelper))
                    .logWarning(strFmt('Journal Control validation: Ledger account combination %1 was invalid for journal control.', _ledgerDimension));
            }
        }

        return result;

    }

]]></Source>
			</Method>
			<Method>
				<Name>validateByJournalNameForCombination</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the specified combination for journal control restrictions.
    /// </summary>
    /// <param name="_ledgerLegalEntity">
    ///    The legal entity of the combination to validate.
    /// </param>
    /// <param name="_dimensionStorage">
    ///    The <c>DimensionStorage</c> class that contains the combination to validate.
    /// </param>
    /// <param name="_ledgerJournalNameId">
    ///    The record ID of the <c>LedgerJournalName</c> record that partially specifies the journal control.
    /// </param>
    /// <param name="_ledgerJournalControlId">
    ///    The record ID of the <c>LedgerJournalControlHeader</c> record that partially specifies the journal
    ///    control.
    /// </param>
    /// <param name="_displayValidationMessage">
    ///    A Boolean value that indicates whether to display warning messages on validation failures.
    /// </param>
    /// <param name="_errorMessages">
    ///    A list of strings to which warning messages will be added; optional.
    /// </param>
    /// <returns>
    ///    true if the combination passes journal control validation; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The <c>validateByTreeForCombination</c> method should be called before you call this method to
    ///    detect structure changes.
    /// </remarks>
    public static boolean validateByJournalNameForCombination(
            RecId               _ledgerLegalEntity,
            DimensionStorage    _dimensionStorage,
            LedgerJournalNameId _ledgerJournalNameId,
            RecId               _ledgerJournalControlId,
            boolean             _displayValidationMessage = false,
            List                _errorMessages = null)
    {
        LedgerJournalControlDetail                  ledgerJournalControlDetail;
        DimensionAttributeValue                     dimAttrValue;
        MainAccount                                 mainAccount;
        Query                                       query;
        QueryRun                                    queryRun;
        QueryBuildDataSource                        qbds;
        RecId                                       treeId;
        RecId                                       dimAttrValueId;
        int                                         i;
        int                                         segmentCount;
        boolean                                     result;
        boolean                                     isMissingMainAccount;

        if (!_ledgerLegalEntity || !_dimensionStorage || !_ledgerJournalNameId || !_ledgerJournalControlId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        // Ensure at least one hierarchy exists
        if (_dimensionStorage.hierarchyCount() == 0)
        {
            if (_displayValidationMessage)
            {
                // The ledger account combination %1 is not valid.  The journal control setup for the ledger account posting type does not match the ledger account.
                if (_errorMessages)
                {
                    _errorMessages.addEnd(strfmt("@SYS138933", _dimensionStorage.getComboDisplayValue()));
                }
                else
                {
                    AifFault::logWarning(literalStr("@SYS138933"), #JournalControlFailed, '', [_dimensionStorage.getComboDisplayValue()]);
                }
            }

            if (DimensionValidation::emitTelemetry())
            {
                SysInstrumentationLoggerFactory::CreateLogger(classStr(DimensionValidationHelper)).logWarning(strFmt('No hierarchies exist in dimension storage. ' +
                    'LedgerJournalControlHeader RecId - %1, DimensionAttributeValueCombination RecId - %2', _ledgerJournalControlId, _dimensionStorage.getSavedComboRecId()));
            }

            // Journal control validation requires a main account
            return false;
        }

        // Check if detail record exists
        select firstonly DimensionConstraintTree, RecId from ledgerJournalControlDetail
                where ledgerJournalControlDetail.LedgerJournalControl == _ledgerJournalControlId &&
                    ledgerJournalControlDetail.LedgerLegalEntity == _ledgerLegalEntity &&
                    ledgerJournalControlDetail.DimensionHierarchy == _dimensionStorage.getHierarchyId(1);

        // Early out if no detail record
        if (ledgerJournalControlDetail.RecId == 0)
        {
            // No journal control detail restrictions: everything is valid (don't cache: it is the top order check)
            return true;
        }

        // Find main account (and fill segmentCount)
        isMissingMainAccount = true;
        segmentCount = _dimensionStorage.segmentCountForHierarchy(1);
        for (i = 1; i <= segmentCount; i++)
        {
            dimAttrValueId = _dimensionStorage.getSegment(i).parmDimensionAttributeValueId();
            if (dimAttrValueId)
            {
                select firstonly RecId from dimAttrValue
                        where dimAttrValue.RecId == dimAttrValueId
                           && dimAttrValue.DimensionAttribute == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)
                    join Type, RecId from mainAccount
                        where mainAccount.RecId == dimAttrValue.EntityInstance;

                if (mainAccount.RecId)
                {
                    isMissingMainAccount = false;
                    break;
                }
            }
        }

        if (isMissingMainAccount)
        {
            if (_displayValidationMessage)
            {
                // The ledger account combination %1 is not valid.  The journal control setup for the ledger account posting type does not match the ledger account.
                if (_errorMessages)
                {
                    _errorMessages.addEnd(strFmt("@SYS138933", _dimensionStorage.getComboDisplayValue()));
                }
                else
                {
                    AifFault::logWarning(literalStr("@SYS138933"), #JournalControlFailed, '', [_dimensionStorage.getComboDisplayValue()]);
                }
            }

            if (DimensionValidation::emitTelemetry())
            {
                SysInstrumentationLoggerFactory::CreateLogger(classStr(DimensionValidationHelper)).logWarning(strFmt('Journal control setup posting type does not match '+
                    'ledger account. LedgerJournalControlHeader RecId - %1, DimensionAttributeValueCombination RecId - %2', _ledgerJournalControlId,
                    _dimensionStorage.getSavedComboRecId()));
            }

            // Journal control validation requires a main account
            return false;
        }

        if (mainAccount.isNonPostingAccount())
        {
            if (_displayValidationMessage)
            {
                // The ledger account combination %1 is not valid.  The journal control setup for the ledger account posting type does not match the ledger account.
                if (_errorMessages)
                {
                    _errorMessages.addEnd(strFmt("@SYS138933", _dimensionStorage.getComboDisplayValue()));
                }
                else
                {
                    AifFault::logWarning(literalStr("@SYS138933"), #JournalControlFailed, '', [_dimensionStorage.getComboDisplayValue()]);
                }
            }

            if (DimensionValidation::emitTelemetry())
            {
                SysInstrumentationLoggerFactory::CreateLogger(classStr(DimensionValidationHelper)).logWarning(strFmt('Main account is a non posting account. ' +
                    'MainAccount RecId - %1, DimensionAttributeValueCombination RecId - %2, LedgerJournalControlHeader RecId - %3', mainAccount.RecId,
                    _dimensionStorage.getSavedComboRecId(), _ledgerJournalControlId));
            }

            // Invalid account type (don't cache: it is the top order check)
            return false;
        }

        // Create query
        treeId = ledgerJournalControlDetail.DimensionConstraintTree;
        query = new Query();
        qbds = DimensionValidation::getTreeQueryBuildDataSource(query, treeId);

        // Add restrictions
        segmentCount = _dimensionStorage.segmentCountForHierarchy(1);
        for (i = 1; i <= segmentCount; i++)
        {
            DimensionValidation::addLevelToQuery(qbds, _dimensionStorage.getSegment(i).parmDisplayValue(), i, treeId);
        }

        // Execute query
        queryRun = new QueryRun(query);
        result = queryRun.next();

        if (DimensionValidation::emitTelemetry() && !result)
        {
            SysInstrumentationLoggerFactory::CreateLogger(classStr(DimensionValidationHelper)).logWarning(strFmt('The ledger account combination is not valid. ' +
                'DimensionAttributeValueCombination RecId - %1, LedgerJournalControlHeader RecId - %2', _dimensionStorage.getSavedComboRecId(), _ledgerJournalControlId));
        }

        if (!result && _displayValidationMessage)
        {
            // The ledger account combination %1 is not valid.  The journal control setup for the ledger account posting type does not match the ledger account.
            if (_errorMessages)
            {
                _errorMessages.addEnd(strFmt("@SYS138933", _dimensionStorage.getComboDisplayValue()));
            }
            else
            {
                AifFault::logWarning(literalStr("@SYS138933"), #JournalControlFailed, '', [_dimensionStorage.getComboDisplayValue()]);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCacheForHierarchyChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes cache records for the specified dimension hierarchy when the <c>updatedCacheForHierarchyChange</c> delegate in the
    /// <c>LedgerDimensionValidationHelper</c> class is called.
    /// </summary>
    /// <param name = "_hierarchyId">The record ID for the dimension hierarchy for which to update cache.</param>
    [SubscribesTo(classstr(LedgerDimensionValidationHelper), staticdelegatestr(LedgerDimensionValidationHelper, updatedCacheForHierarchyChange))]
    public static void updateCacheForHierarchyChange(RecId _hierarchyId)
    {
        DimensionConstraintTree                     dimConstraintTree;
        DimensionValueGroupJournalControlStatus     dimValueGroupJournalControlStatus;
        UserConnection                              userConnection;

        // Validate input parameter
        if (!_hierarchyId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        userConnection = new UserConnection();

        try
        {
            // Deletes must occur outside the default transaction otherwise will block as the records were added in a separate transaction initially
            userConnection.ttsBegin();

            dimValueGroupJournalControlStatus.setConnection(userConnection);

            // These status records are invalid, and thus must be deleted.
            delete_from dimValueGroupJournalControlStatus
                exists join dimConstraintTree
                    where dimValueGroupJournalControlStatus.DimensionConstraintTree == dimConstraintTree.RecId &&
                            dimConstraintTree.DimensionHierarchy == _hierarchyId;

            userConnection.ttsCommit();
        }
        finally
        {
            userConnection.finalize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteDimValueGroupJournalControlStatusForDimHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete journal control status records related to the <c>DimensionHierarchy</c> record.
    /// </summary>
    /// <param name = "_dimensionHierarchyId">The <c>DimensionHierarchy</c> table record id.</param>
    /// <param name = "_userConnection">The <c>UserConnection</c> used for the transaction.</param>
    /// <remarks>
    /// These status records are not invalid.  Hence, they don't have to be deleted.
    /// However, if the group now becomes invalid, they would be stranded as combination validation
    /// would not read them again.  Thus, to minimize the number of status records, they are deleted.
    /// </remarks>
    [SubscribesTo(classstr(DimensionValidationDelegates), delegatestr(DimensionValidationDelegates, cacheClearedForAccountStructureChange))]
    public static void deleteDimValueGroupJournalControlStatusForDimHierarchy(
        DimensionHierarchyId _dimensionHierarchyId,
        UserConnection _userConnection)
    {
        DimensionValueGroupJournalControlStatus dimValueGroupJournalControlStatus;
        DimensionAttributeValueGroup dimAttrValueGroup;

        dimValueGroupJournalControlStatus.setConnection(_userConnection);
        dimAttrValueGroup.setConnection(_userConnection);

        delete_from dimValueGroupJournalControlStatus
            exists join dimAttrValueGroup
                where dimAttrValueGroup.RecId == dimValueGroupJournalControlStatus.DimensionAttributeValueGroup &&
                    dimAttrValueGroup.DimensionHierarchy == _dimensionHierarchyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteDimValueGroupJournalControlStatusForDimAttrValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete journal control status records related to the <c>DimensionAttributeValue</c> record.
    /// </summary>
    /// <param name = "_attributeValueId">The <c>DimensionAttributeValue</c> table record id.</param>
    /// <param name = "_userConnection">The <c>UserConnection</c> used for the transaction.</param>
    [SubscribesTo(classstr(DimensionValidationDelegates), delegatestr(DimensionValidationDelegates, cacheUpdatedForCompanyValueChange))]
    public static void deleteDimValueGroupJournalControlStatusForDimAttrValue(
        DimensionAttributeValueRecId _attributeValueId,
        UserConnection _userConnection)
    {
        DimensionValueGroupJournalControlStatus dimValueGroupJournalControlStatus;
        DimensionAttributeValueGroup dimAttrValueGroup;
        DimensionAttributeLevelValue dimAttrLevelValue;
        DimensionConstraintTree dimConstraintTree;
        DimensionAttributeValue dimAttrValue;
        DimensionConstraintNode dimConstraintNode;
        DimensionConstraintNodeCriteria dimConstraintNodeCriteria;
        DimensionHierarchyLevel dimHierarchyLevel;

        dimValueGroupJournalControlStatus.setConnection(_userConnection);
        dimAttrValueGroup.setConnection(_userConnection);
        dimAttrLevelValue.setConnection(_userConnection);
        dimConstraintTree.setConnection(_userConnection);
        dimAttrValue.setConnection(_userConnection);
        dimConstraintNode.setConnection(_userConnection);
        dimConstraintNodeCriteria.setConnection(_userConnection);
        dimHierarchyLevel.setConnection(_userConnection);

        delete_from dimValueGroupJournalControlStatus
            exists join dimAttrLevelValue
                where dimAttrLevelValue.DimensionAttributeValueGroup == dimValueGroupJournalControlStatus.DimensionAttributeValueGroup &&
                    dimAttrLevelValue.DimensionAttributeValue == _attributeValueId
            exists join dimConstraintTree
                where dimConstraintTree.RecId == dimValueGroupJournalControlStatus.DimensionConstraintTree
            exists join dimHierarchyLevel
                where dimHierarchyLevel.DimensionHierarchy == dimConstraintTree.DimensionHierarchy
            exists join dimAttrValue
                where dimAttrValue.DimensionAttribute == dimHierarchyLevel.DimensionAttribute &&
                    dimAttrValue.RecId == _attributeValueId
            exists join dimConstraintNode
                where dimConstraintNode.DimensionConstraintTree == dimConstraintTree.RecId &&
                    dimConstraintNode.DimensionHierarchyLevel == dimHierarchyLevel.RecId
            exists join dimConstraintNodeCriteria
                where dimConstraintNodeCriteria.DimensionConstraintNode == dimConstraintNode.RecId &&
                    (dimConstraintNodeCriteria.RangeFrom != '' || dimConstraintNodeCriteria.RangeTo != '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteDimValueGroupJournalControlStatusForDimAttrValueAllCompanies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete journal control status records related to the <c>DimensionAttributeValue</c> record.
    /// </summary>
    /// <param name = "_attributeValueRecId">The <c>DimensionAttributeValue</c> table record id.</param>
    /// <remarks>Must be called as the admin role due to cross-company delete is not allowed for any other role.</remarks>
    [SubscribesTo(classstr(DimensionValidationDelegates), delegatestr(DimensionValidationDelegates, cacheUpdatedForCompanyValueChangeForAllDataAreas))]
    public static void deleteDimValueGroupJournalControlStatusForDimAttrValueAllCompanies(DimensionAttributeValueRecId _attributeValueRecId)
    {
        #Admin

        new RunAsPermission(#AdminUser).assert();
        container args = [_attributeValueRecId];
        runAs(#AdminUser, classNum(DimensionValidationHelper), staticMethodStr(DimensionValidationHelper, deleteDimValueGroupJournalControlStatusForAllCompaniesByValueId), args);

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteDimValueGroupJournalControlStatusForAllCompaniesByValueId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the <c>DimensionValueGroupJournalControlStatus</c> table cache for a given <c>DimensionAttributeValue</c> record id.
    /// </summary>
    /// <param name = "_args">The Dimension attribute value record id in a container.</param>
    private static void deleteDimValueGroupJournalControlStatusForAllCompaniesByValueId(container _args)
    {
        DimensionAttributeValueRecId attributeValueRecId = conPeek(_args, 1);

        if (attributeValueRecId > 0)
        {
            str deleteStatement = strFmt(@"DELETE DAVGJCS
                FROM DimensionValueGroupJournalControlStatus DAVGJCS
                JOIN DimensionAttributeLevelValue DALV ON DALV.Partition = DAVGJCS.Partition AND DALV.DimensionAttributeValueGroup = DAVGJCS.DimensionAttributeValueGroup
                JOIN DimensionConstraintTree DCT ON DCT.Partition = DAVGJCS.Partition AND DCT.RecId = DAVGJCS.DimensionConstraintTree
                JOIN DimensionHierarchyLevel DHL ON DHL.Partition = DAVGJCS.Partition AND DHL.DimensionHierarchy = DCT.DimensionHierarchy
                JOIN DimensionAttributeValue DAV ON DAV.Partition = DAVGJCS.Partition AND DAV.DimensionAttribute = DHL.DimensionAttribute AND DAV.RecId = %2
                JOIN DimensionConstraintNode DCN ON DCN.Partition = DAVGJCS.Partition AND DCN.DimensionConstraintTree = DCT.RecId AND DCN.DimensionHierarchyLevel = DHL.RecId
                JOIN DimensionConstraintNodeCriteria DCNC ON DCNC.Partition = DAVGJCS.Partition AND DCNC.DimensionConstraintNode = DCN.RecId AND (DCNC.RangeFrom != '' OR DCNC.RangeTo != '')
                WHERE DAVGJCS.Partition = %1 AND DALV.DimensionAttributeValue = %2",
                getCurrentPartitionRecId(),
                attributeValueRecId);

            DimensionValidationHelper::executeSQL(deleteStatement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeSQL</Name>
				<Source><![CDATA[
    private static void executeSQL(str _statement)
    {
        UserConnection userConnection = new UserConnection();
        try
        {
            new SqlStatementExecutePermission(_statement).assert();

            Statement statement = userConnection.createStatement();
            statement.executeUpdateWithParameters(_statement, SqlParams::create());
            statement.close();

            CodeAccessPermission::revertAssert();
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw Exception::Error;
            }
        }
        finally
        {
            userConnection.finalize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retryTransientSqlConnectionError</Name>
				<Source><![CDATA[
    private static boolean retryTransientSqlConnectionError(int _retryCount)
    {
        const int transientFaultRetryCount = 4;
        if (_retryCount <= transientFaultRetryCount)
        {
            sleep(DimensionValidationHelper::exponentialBackOffRetryDelay(_retryCount));
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exponentialBackOffRetryDelay</Name>
				<Source><![CDATA[
    private static int exponentialBackOffRetryDelay(int _retryCount)
    {
        const int transientFaultRetryDelayInMilliseconds = 200;
        return real2int(transientFaultRetryDelayInMilliseconds * power(2, _retryCount));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>