<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RouteTableForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>RouteTableForm</c> class is the helper class for <c>Routes</c> table forms (list page and
///    task page)
/// </summary>
/// <remarks>
///    This class implements the rules for enabling and disabling the Approve and Route Approve buttons.
/// </remarks>
class RouteTableForm implements ButtonStateProvider
{
    FormDataSource      routeTable_ds;
    RouteTable          routeTable;
    FormDataSource      routeVersion_ds;
    RouteVersion        routeVersion;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkApprove</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the Approve button.
    /// </summary>
    /// <returns>
    ///    true if the Approve button should be enabled; otherwise, false.
    /// </returns>
    public boolean checkApprove()
    {
        return (routeTable.RecId != 0 ||
                routeTable.RouteId) ? (true) : (false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkHasData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether there are any records in the grid on the caller form, and enables the action pane
    ///    buttons if there are.
    /// </summary>
    /// <returns>
    ///    true if there is at least one record and the buttons should be enabled; otherwise, false.
    /// </returns>
    public boolean checkHasData()
    {
        return routeTable.RecId ? (true) : (false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVersionApprove</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the Version Approve button.
    /// </summary>
    /// <returns>
    ///    true if the Version Approve button should be enabled; otherwise, false.
    /// </returns>
    public boolean checkVersionApprove()
    {
        return (routeVersion.RecId != 0 || routeVersion.ItemId) ? (true) : (false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the advanced cache for the <c>RouteTableForm</c> class.
    /// </summary>
    /// <remarks>
    ///    No advanced caching is implemented in the <c>RouteTableForm</c> class, therefore this method is
    ///    empty.
    /// </remarks>
    public void clearCache()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineButtonStates</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements special actions needed by the <c>RouteTableForm</c> class for rule evaluation.
    /// </summary>
    /// <param name="_ruleFunctionName">
    ///    A string that specifies the method name for the rule being evaluated.
    /// </param>
    /// <remarks>
    ///    No advanced caching is implemented in the <c>RouteTableForm</c> class, therefore the method is
    ///    empty.
    /// </remarks>
    public void determineButtonStates(str _ruleFunctionName)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the data sources to be used for rule evaluation.
    /// </summary>
    /// <param name="_datasources1">
    ///    A table buffer that belongs to the first data source instance.
    /// </param>
    /// <param name="_datasources2">
    ///    A table buffer that belongs to the second data source instance; optional.
    /// </param>
    /// <param name="_datasources3">
    ///    A table buffer that belongs to the third data source instance; optional.
    /// </param>
    /// <param name="_datasources4">
    ///    A table buffer that belongs to the fourth data source instance; optional.
    /// </param>
    /// <param name="_datasources5">
    ///    A table buffer that belongs to the first data source instance; optional.
    /// </param>
    /// <remarks>
    ///    The rules implemented in the <c>RouteTableForm</c> class perform evaluation on a table buffer which
    ///    is obtained from a form data source.
    ///    This method allows you to set up the data sources to be used
    ///    by the rule implementer helper class during rule evaluation. Up to 5 data sources can be passed. If
    ///    the implementation requires more data sources, additional custom methods should be implemented on
    ///    the rule implementer class.
    /// </remarks>
    public void setDatasources(Common _datasources1, Common _datasources2 = null, Common _datasources3 = null, Common _datasources4 = null, Common _datasources5 = null)
    {
        routeTable      = _datasources1;
        routeVersion    = _datasources2;
        routeTable_ds = FormDataUtil::getFormDataSource(routeTable);
        routeVersion_ds = FormDataUtil::getFormDataSource(routeVersion);

        if (!routeTable_ds)
        {
            checkFailed(strfmt("@SYS117974", classId2Name(classidget(this))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructor for the <c>RouteTableForm</c> class.
    /// </summary>
    /// <returns>
    ///    A new <c>RouteTableForm</c> instance.
    /// </returns>
    public static RouteTableForm construct()
    {
        return new RouteTableForm();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>