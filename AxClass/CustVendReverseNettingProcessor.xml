<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendReverseNettingProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
[NettingProcessorTypeAttribute(NettingProcessorType::CustVendReverseNetting)]
internal final class CustVendReverseNettingProcessor extends AbstractNettingProcessor
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDefaultCalculator</Name>
				<Source><![CDATA[
    internal protected INettingAmountCalculator getDefaultCalculator()
    {
        return CustVendNettingComponentFactory::CustVendReverseNettingAmountCalculator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultJournalGenerator</Name>
				<Source><![CDATA[
    internal protected INettingJournalGenerator getDefaultJournalGenerator()
    {
        return CustVendNettingComponentFactory::CustVendNettingJournalGenerator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activityName</Name>
				<Source><![CDATA[
    internal protected str activityName()
    {
        return CustVendNettingInstrumentationConstants::CustVendReverseNetting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    internal protected boolean validate()
    {
        CustVendNettingExecution execution = CustVendNettingExecution::find(executionRecId);
        if (execution.ProcessingStatus != CustVendNettingProcessStatus::Posted || !execution.validateType(true))
        {
            throw error("@CashManagement:CustVendNettingInvalidStatus");
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preprocess</Name>
				<Source><![CDATA[
    internal protected void preprocess(CustVendNettingExecution _execution)
    {
        this.undoSettlementForCust(_execution);

        this.undoSettlementForVend(_execution);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructNettingAmountDistribution</Name>
				<Source><![CDATA[
    internal protected NettingAmountDistribution constructNettingAmountDistribution(CustVendNettingExecution _execution)
    {
        NettingAmountDistribution distribution = NettingAmountDistribution::constructFromCustVendNettingExecution(_execution);
        distribution.setTransDate(transDate);
        return distribution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExecution</Name>
				<Source><![CDATA[
    internal protected void updateExecution(CustVendNettingExecution _execution, LedgerJournalTable _journal)
    {
        // Nothing needs to be updated in reversal
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeSettlement</Name>
				<Source><![CDATA[
    internal protected void closeSettlement()
    {
        this.setCustVendTrans();

        if (custTransRecId)
        {
            changecompany(creditLine.Company)
            {
                this.closeCustSettlement(custTransRecId);
            }
        }

        if (vendTransRecId)
        {
            changecompany(debitLine.Company)
            {
                this.closeVendSettlement(vendTransRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateResult</Name>
				<Source><![CDATA[
    internal protected void validateResult(CustVendNettingExecution _execution)
    {
        CustTrans custTrans = CustTrans::findByCompany(_execution.CreditCompany, _execution.CreditTransId);

        this.validateCustVendTransFullySettled(custTrans);

        custTrans = CustTrans::findByCompany(_execution.CreditCompany, custTrans.OffsetRecId);

        this.validateCustVendTransFullySettled(custTrans);

        VendTrans vendTrans = VendTrans::findByCompany(_execution.DebitCompany, _execution.DebitTransId);

        this.validateCustVendTransFullySettled(vendTrans);

        vendTrans = VendTrans::findByCompany(_execution.DebitCompany, vendTrans.OffsetRecId);

        this.validateCustVendTransFullySettled(vendTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getErrorStatus</Name>
				<Source><![CDATA[
    internal protected CustVendNettingProcessStatus getErrorStatus()
    {
        return CustVendNettingProcessStatus::Posted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinalStatus</Name>
				<Source><![CDATA[
    internal protected CustVendNettingProcessStatus getFinalStatus()
    {
        return CustVendNettingProcessStatus::Reversed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>undoSettlementForCust</Name>
				<Source><![CDATA[
    private void undoSettlementForCust(CustVendNettingExecution _execution)
    {
        changecompany(_execution.CreditCompany)
        {
            CustTable custTable = CustTable::find(_execution.CreditAccountNum);
            SpecTransManager specTransManager = SpecTransManager::newRefTableId(custTable, tableNum(CustSettlement), true);
            CustTrans custTrans = CustTrans::find(_execution.CreditTransId);

            this.markSettlementsForCustReversal(specTransManager, custTrans);

            if (specTransManager.getSpecTransCount() > 0)
            {
                CustTrans::reverseTransact(
                    custTable,
                    null,
                    SettleDatePrinc::SelectDate,
                    transDate,
                    false,
                    '',
                    true);

                specTransManager.deleteAll();
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>undoSettlementForVend</Name>
				<Source><![CDATA[
    private void undoSettlementForVend(CustVendNettingExecution _execution)
    {
        changecompany(_execution.DebitCompany)
        {
            VendTable vendTable = VendTable::find(_execution.DebitAccountNum);
            SpecTransManager specTransManager = SpecTransManager::newRefTableId(vendTable, tableNum(VendSettlement), true);
            VendTrans vendTrans = VendTrans::find(_execution.DebitTransId);

            this.markSettlementsForVendReversal(specTransManager, vendTrans);

            if (specTransManager.getSpecTransCount() > 0)
            {
                VendTrans::reverseTransact(
                    vendTable,
                    null,
                    SettleDatePrinc::SelectDate,
                    transDate,
                    false,
                    '');

                specTransManager.deleteAll();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markSettlementsForVendReversal</Name>
				<Source><![CDATA[
    private void markSettlementsForVendReversal(SpecTransManager _specTransManager, VendTrans _vendTransToCancel)
    {
        VendSettlement reverseVendSettlement;
        reverseVendSettlement.skipDataMethods(true);
        reverseVendSettlement.skipEvents(true);
        update_recordset reverseVendSettlement
            setting CanBeReversed = NoYes::Yes
            where reverseVendSettlement.TransCompany == _vendTransToCancel.DataAreaId
                && (reverseVendSettlement.TransRecId == _vendTransToCancel.RecId
                    || reverseVendSettlement.OffsetRecid == _vendTransToCancel.RecId)
                && reverseVendSettlement.SettlementGroup != 0;

        while select reverseVendSettlement
            where reverseVendSettlement.TransCompany == _vendTransToCancel.DataAreaId
                && reverseVendSettlement.TransRecId == _vendTransToCancel.RecId
                && reverseVendSettlement.CanBeReversed == NoYes::Yes
        {
            reverseVendSettlement.CustVendSettlement::markThisAndRelatedOffsets(_specTransManager, _vendTransToCancel.CurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markSettlementsForCustReversal</Name>
				<Source><![CDATA[
    private void markSettlementsForCustReversal(SpecTransManager _specTransManager, CustTrans _custTransToCancel)
    {
        CustSettlement reverseCustSettlement;
        reverseCustSettlement.skipDataMethods(true);
        reverseCustSettlement.skipEvents(true);
        update_recordset reverseCustSettlement
            setting CanBeReversed = NoYes::Yes
            where reverseCustSettlement.TransCompany == _custTransToCancel.DataAreaId
                && (reverseCustSettlement.TransRecId == _custTransToCancel.RecId
                    || reverseCustSettlement.OffsetRecid == _custTransToCancel.RecId)
                && reverseCustSettlement.SettlementGroup != 0;

        while select reverseCustSettlement
            where reverseCustSettlement.TransCompany == _custTransToCancel.DataAreaId
                && reverseCustSettlement.TransRecId == _custTransToCancel.RecId
                && reverseCustSettlement.CanBeReversed == NoYes::Yes
        {
            reverseCustSettlement.CustVendSettlement::markThisAndRelatedOffsets(_specTransManager, _custTransToCancel.CurrencyCode);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>