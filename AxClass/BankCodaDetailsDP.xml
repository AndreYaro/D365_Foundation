<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankCodaDetailsDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BankCodaDetailsDP</c> class is the Report Data Provider class for the <c>BankCodaDetails</c>
///    report
/// </summary>
[
    SRSReportQueryAttribute(querystr(BankCodaDetails))
]
class BankCodaDetailsDP extends SRSReportDataProviderBase
{
    ReportStringControl             rscMessage;
    Notes                           messageNotes;
    AmountCur                       endBalance;
    BankCodaDetailsTmp              bankCodaDetailsTmp;
    BankCodaAccountStatementLines   bankAccountStatementLines;
    BankAccountTable                bankAccountLocal;

    #define.EmptyString('')
    #define.SpaceString(' ')
    #define.NewLine('\n')
    #define.CompareStr('0000')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findMessage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the display message value.
    /// </summary>
    public void findMessage()
    {
        BankCodaAccountStatementLines       bankAccountStatementLinesdummy;

        messageNotes = #EmptyString;

        if (bankAccountStatementLines.TransactionType != BankCodaTransactionType::Free)
        {
            while select Message
                from bankAccountStatementLinesdummy
                order by TransactionType
                    where bankAccountStatementLinesdummy.AccountStatementNum == bankAccountStatementLines.AccountStatementNum
                        && bankAccountStatementLinesdummy.StatementDate      == bankAccountStatementLines.StatementDate
                        && bankAccountStatementLinesdummy.SequenceNumber     == bankAccountStatementLines.SequenceNumber
                        && (   bankAccountStatementLinesdummy.TransactionType == BankCodaTransactionType::Info
                            || bankAccountStatementLinesdummy.TransactionType == BankCodaTransactionType::Free)
            {
                if (bankAccountStatementLinesdummy.Message)
                {
                    messageNotes += this.removeHardBreaks(bankAccountStatementLinesdummy.Message) + #NewLine;
                }
            }

            messageNotes = bankAccountStatementLines.Message + #NewLine + messageNotes;
        }

        else
        {
            messageNotes = bankAccountStatementLines.Message;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodaDetailsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the data from the <c>BankCodaDetailsTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///    Data from the <c>BankCodaDetailsTmp</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute('BankCodaDetailsTmp')]
    public BankCodaDetailsTmp getBankCodaDetailsTmp()
    {
        select bankCodaDetailsTmp;
        return bankCodaDetailsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBankCodaDetailsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts data into the <c>BankCodaDetailsTmp</c> temporary table.
    /// </summary>
    private void insertBankCodaDetailsTmp()
    {
        bankCodaDetailsTmp.BankName                 =   bankAccountLocal.Name;
        bankCodaDetailsTmp.AccountStatementNum      =   bankAccountStatementLines.AccountStatementNum;
        bankCodaDetailsTmp.AmountCur                =   BankCodaAccountStatement::findByAccountIdNumDate(bankaccountStatementLines.AccountId,
                                                                                                         bankaccountStatementLines.AccountStatementNum,
                                                                                                         bankAccountStatementlines.StatementDate).Beginbalance;
        bankCodaDetailsTmp.AccountCurrency          =   bankAccountLocal.CurrencyCode;
        bankCodaDetailsTmp.BankAccountAmountCur     =   bankAccountStatementLines.AmountCur;
        bankCodaDetailsTmp.TransDate                =   bankAccountStatementLines.TransDate;
        bankCodaDetailsTmp.DatePosted               =   bankAccountStatementLines.DatePosted;
        bankCodaDetailsTmp.FreeMessage              =   messageNotes;
        bankCodaDetailsTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the SSRS report business logic.
    /// </summary>
    /// <remarks>
    ///    Provides the ability to write the report business logic. This method will be called by SSRS at
    ///    runtime. The method computes data and populates the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        QueryRun qr;
        qr  = new QueryRun(this.parmQuery());

        while (qr.next())
        {
            bankAccountStatementLines   = qr.get(tablenum(BankCodaAccountStatementLines));
            bankAccountLocal            = BankAccountTable::find(bankAccountStatementLines.AccountId);

            if ((bankAccountStatementLines.TransactionType == BankCodaTransactionType::Movement &&
                    bankAccountStatementLines.DetailNumber == #CompareStr) ||
                (bankAccountStatementLines.TransactionType == BankCodaTransactionType::Free &&
                ! bankAccountStatementLines.RefRecId))
            {
                this.findMessage();
                this.insertBankCodaDetailsTmp();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeHardBreaks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates DocumentDate
    /// </summary>
    /// <param name="_message">
    /// takes the <c>notes></c> as parameter.
    /// </param>
    /// <returns>
    /// <c>DocumentDate</c>
    /// </returns>
    public Notes removeHardBreaks(Notes _message)
    {
        Notes       newMessage;
        int         position;

        position   = strscan(_message,#NewLine,1,strlen(_message));
        newMessage = _message;

        while (position)
        {
            newMessage = strrtrim(substr(newMessage,1,position-1)) + #SpaceString + strltrim(substr(newMessage,position+1,strlen(newMessage)));
            position   = strscan(newMessage,#NewLine,1,strlen(newMessage));
        }

        return newMessage;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>