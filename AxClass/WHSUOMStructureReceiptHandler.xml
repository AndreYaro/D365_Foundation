<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSUOMStructureReceiptHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSUOMStructureReceiptHandler</c> class is responsible for handling operations related to the unit of measure structure receipts.
/// </summary>
internal class WHSUOMStructureReceiptHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>unregisterAtWorkCancel</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void unregisterAtWorkCancel(WHSWorkId _workId)
    {
        WHSUOMStructure structure;

        structure.skipDataMethods(true);

        // If multiple shipments are on the same license plate there can be multiple structures related to the work.
        update_recordset structure
            setting CreatedWorkId = ''
            where structure.CreatedWorkId == _workId;

        WHSUOMStructureReceipt uomStructureReceipt;

        delete_from uomStructureReceipt
            where uomStructureReceipt.CreatedWorkId == _workId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLoadLineASNReceivedWithoutPutawayWorkCreation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean isLoadLineASNReceivedWithoutPutawayWorkCreation(WHSLoadLine _loadLine, WHSWorkCreatedQty _workCreatedQty)
    {
        boolean loadLineReceivedWithoutWork = false;

        if (!_workCreatedQty)
        {
            WHSASNItem asnItem;
            WHSUOMStructure uomStructure;

            select firstonly RecId, WorkCreatedQty from asnItem
                where  asnItem.LoadLineRefRecId == _loadLine.RecId
                    && asnItem.WorkCreatedQty == 0
                exists join uomStructure
                    where uomStructure.LicensePlateId == asnItem.LicensePlateId
                        && uomStructure.LoadId == asnItem.LoadId
                        && uomStructure.CreatedWorkId != '';

            loadLineReceivedWithoutWork = asnItem.RecId > 0;
            
            // If the asnItem.RecId is found that can either mean that the ASN has been received without work when the WHSDecouplePutawayWorkFromASNFeature was off
            // or that putaway work was created.
            // If the asnItem.WorkCreatedQty is not zero, then we know that some putaway work was created when the WHSDecouplePutawayWorkFromASNFeature was off,
            // so there is no need to do further checks.
            // That is why both !loadLineReceivedWithoutWork and !asnItem.WorkCreatedQty checks are neeeded before moving on to the check when WHSDecouplePutawayWorkFromASNFeature is on.
            if (!loadLineReceivedWithoutWork
                && !asnItem.WorkCreatedQty)
            {
                WHSASNItem asnItemWithReceipt;
                WHSASNItemReceipt asnItemReceipt;

                select firstonly RecId from asnItemWithReceipt
                    where asnItemWithReceipt.LoadLineRefRecId == _loadLine.RecId
                    exists join asnItemReceipt
                        where asnItemReceipt.ASNItem == asnItemWithReceipt.RecId
                            && asnItemReceipt.WorkCreatedQty == 0;

                loadLineReceivedWithoutWork = asnItemWithReceipt.RecId > 0;
            }
        }

        return loadLineReceivedWithoutWork;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existUOMStructureForReceiptCreatedWorkIdAndLicensePlateId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean existUOMStructureForReceiptCreatedWorkIdAndLicensePlateId(WHSWorkId _createdWorkId, WHSLicensePlateId _licensePlateId)
    {
        WHSUOMStructure uomStructure;

        select firstonly RecId from uomStructure
            where uomStructure.LicensePlateId == _licensePlateId
                && uomStructure.CreatedWorkId == _createdWorkId;

        if (!uomStructure.RecId
            && _createdWorkId
            && _licensePlateId)
        {
            WHSUOMStructureReceipt uomStructureReceipt;

            select firstonly RecId from uomStructure
                where uomStructure.LicensePlateId == _licensePlateId
                exists join uomStructureReceipt
                    where uomStructureReceipt.UOMStructure == uomStructure.RecId
                        && uomStructureReceipt.CreatedWorkId == _createdWorkId;
        }

        return uomStructure.RecId > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUOMStructureForWorkLineAndLicensePlate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSUOMStructure findUOMStructureForWorkLineAndLicensePlate(WHSLicensePlateId _licensePlateId, WHSWorkLine _workLineToCompare)
    {
        WHSUOMStructure uomStructure;

        select firstonly uomStructure
            where uomStructure.LicensePlateId   == _licensePlateId
                && uomStructure.CreatedWorkId   == _workLineToCompare.WorkId
                && uomStructure.ItemId          == _workLineToCompare.ItemId
                && uomStructure.ItemId          != ''
                && uomStructure.UOMItem         != '';

        if (!uomStructure.RecId 
            && _licensePlateId
            && _workLineToCompare.WorkId
            && _workLineToCompare.ItemId)
        {
            WHSUOMStructureReceipt uomStructureReceipt;

            select firstonly uomStructure
                where uomStructure.LicensePlateId == _licensePlateId
                    && uomStructure.ItemId == _workLineToCompare.ItemId
                    && uomStructure.UOMItem != ''
                exists join uomStructureReceipt
                    where uomStructureReceipt.UOMStructure == uomStructure.RecId
                        && uomStructureReceipt.CreatedWorkId == _workLineToCompare.WorkId;
        }

        return uomStructure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReceiptAtPlannedWarehouseOrAtOtherWarehouseAllowed</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean isReceiptAtPlannedWarehouseOrAtOtherWarehouseAllowed(InventLocationId _plannedWarehouseId, InventLocationId _currentWarehouseId)
    {
        return (_plannedWarehouseId == _currentWarehouseId
               || InventSite::allowReceiptAtOtherWarehouse(_plannedWarehouseId, _currentWarehouseId));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>