<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxSpecPerLedgerTransTotalsHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class containing helper methods to process 'totals' version of the TaxSpecPerLedgerTrans report.
/// </summary>
public class TaxSpecPerLedgerTransTotalsHelper extends TaxSpecPerLedgerTransBaseHelper
{
    [SysObsolete("This variable is obsolete, since feature is not referenced anymore", false, 09\11\2023)]
    boolean isCalcOrigAmtFeatureEnabled;

    #LOCALMACRO.DefaultWhereClause
        generalJournalEntry.AccountingDate >= fromDate
        && generalJournalEntry.AccountingDate <= toDate
        && generalJournalEntry.Ledger == ledgerRecId
        && generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
        && mainAccountLedgerDimensionView.LedgerDimensionId == generalJournalAccountEntry.LedgerDimension
        && mainAccountLedgerDimensionView.MainAccount >= fromMainAccount
        && mainAccountLedgerDimensionView.MainAccount <= toMainAccount
        && taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
        && (taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::TransactionLineAccount ||
            taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::Tax ||
            taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::UseTaxPayable ||
            taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::CashDiscount)
        && taxTrans.TransDate >= fromDate
        && taxTrans.TransDate <= ToDate
        && taxTransGeneralJournalAccountEntry.TaxTrans == taxTrans.RecId
        && taxTrans.TaxCode >= fromTaxCode
        && taxTrans.TaxCode <= toTaxCode
        && taxTrans.TaxOrigin != TaxOrigin::TaxReporting
    #ENDMACRO

    #LOCALMACRO.DefaultWhereClauseNotIncludeTaxLink
        generalJournalEntry.AccountingDate >= fromDate
        && generalJournalEntry.AccountingDate <= toDate
        && generalJournalEntry.Ledger == ledgerRecId
        && generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
        && mainAccountLedgerDimensionView.LedgerDimensionId == generalJournalAccountEntry.LedgerDimension
        && mainAccountLedgerDimensionView.MainAccount >= fromMainAccount
        && mainAccountLedgerDimensionView.MainAccount <= toMainAccount
        && taxTrans.TransDate >= fromDate
        && taxTrans.TransDate <= ToDate
        && taxTransGeneralJournalAccountEntry.TaxTrans == taxTrans.RecId
        && taxTrans.TaxCode >= fromTaxCode
        && taxTrans.TaxCode <= toTaxCode
        && taxTrans.TaxOrigin != TaxOrigin::TaxReporting
        && taxTrans.TaxCode == taxTable.TaxCode
    #ENDMACRO

    #LOCALMACRO.NonSourceDocumentLineWhereClause
        && (taxTrans.SourceDocumentLine == 0 ||
            taxTrans.TaxOrigin == TaxOrigin::CashDisc ||
            taxTrans.Taxorigin == TaxOrigin::Payment ||
            taxTrans.TaxOrigin == TaxOrigin::TaxReversed)
    #ENDMACRO

    #LOCALMACRO.SourceDocumentLineWhereClause
        && taxTrans.SourceDocumentLine != 0
        && taxTrans.Taxorigin != TaxOrigin::Payment
        && taxTrans.TaxOrigin != TaxOrigin::TaxReversed
        && taxTrans.TaxOrigin != TaxOrigin::CashDisc
    #ENDMACRO

    #LOCALMACRO.AccountDistributionWhereClause
        acctDistView.SourceDocumentLine == taxTrans.SourceDocumentLine
        && acctDistView.ParentDistributionLedgerDimension == mainAccountLedgerDimensionView.LedgerDimensionId
        && acctDistView.IgnoreRecord == NoYes::No
    #ENDMACRO

    #LOCALMACRO.PriceVarianceWhereClause
    && (( (taxTransGeneralJournalAccountEntry.MonetaryAmountType  == MonetaryAmount::ExtendedPrice
                || taxTransGeneralJournalAccountEntry.MonetaryAmountType == MonetaryAmount::Charge)
            && acctDistView.MonetaryAmount == MonetaryAmount::Tax)
          || ((taxTransGeneralJournalAccountEntry.MonetaryAmountType == MonetaryAmount::PriceVariance
                || taxTransGeneralJournalAccountEntry.MonetaryAmountType == MonetaryAmount::ChargeVariance
                || taxTransGeneralJournalAccountEntry.MonetaryAmountType == MonetaryAmount::QuantityVariance)
            && acctDistView.MonetaryAmount == MonetaryAmount::TaxVariance))
    #ENDMACRO

    #LOCALMACRO.TaxVarianceWhereClause
        && ((taxTransGeneralJournalAccountEntry.MonetaryAmountType  == MonetaryAmount::ExtendedPrice
                || taxTransGeneralJournalAccountEntry.MonetaryAmountType == MonetaryAmount::Charge)
            && acctDistView.MonetaryAmount == MonetaryAmount::TaxVariance)
    #ENDMACRO

    #LOCALMACRO.TaxBaseVarianceWhereClause
        taxTransLinkBaseVariance.taxtrans == taxTransGeneralJournalAccountEntry.TaxTrans
            && (taxTransLinkBaseVariance.MonetaryAmountType == MonetaryAmount::PriceVariance
                || taxTransLinkBaseVariance.MonetaryAmountType == MonetaryAmount::ChargeVariance
                || taxTransLinkBaseVariance.MonetaryAmountType == MonetaryAmount::QuantityVariance)
    #ENDMACRO

    #LOCALMACRO.TaxJournalWhereClause
        && (taxTrans.SourceBaseAmountCur == 0 && taxTrans.SourceTaxAmountCur != 0); // means generated by tax journal
    #ENDMACRO

    #LOCALMACRO.NotTaxJournalWhereClause
        && (taxTrans.SourceBaseAmountCur != 0 || taxTrans.SourceTaxAmountCur == 0); // means not generated by tax journal
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the logic required for the report.
    /// </summary>
    public void process()
    {
        TaxSpecPerLedgerTransTmp ledgerTemp;
        TaxSpecPerLedgerTransTmp taxTemp;

        reportTable.setConnection(userConnection);
        ledgerTemp.setConnection(userConnection);
        taxTemp.setConnection(userConnection);

        if (!contract.parmTotalOnly())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        this.initializeRanges();

        if (contract.parmGroupDataBy() == TaxSpecPerLedgerTransGroupBy::LedgerAccount)
        {
            taxTemp.linkPhysicalTableInstance(this.processTaxTransDetails(contract.parmMainAccountOnly(), contract.parmSubtotalByTaxCode()));

            if (contract.parmSubtotalByTaxCode())
            {
                ledgerTemp.linkPhysicalTableInstance(this.processLedgerTransDetails(contract.parmMainAccountOnly()));

                insert_recordset reportTable (FullyQualifiedAccount, MainAccount, Name, MainAccountRecId, AmountDebit, AmountCredit, TaxCode, TaxReceivable, TaxPayable)
                select FullyQualifiedAccount, MainAccount, Name, MainAccountRecId ,AmountDebit, AmountCredit from ledgerTemp
                    join TaxCode, TaxReceivable, TaxPayable from taxTemp
                    where ledgerTemp.MainAccount == taxTemp.MainAccount
                        && ledgerTemp.FullyQualifiedAccount == taxTemp.FullyQualifiedAccount
                        && ledgerTemp.TaxCode == taxTemp.TaxCode;
            }
            else
            {
                ledgerTemp.linkPhysicalTableInstance(this.processLedgerTrans(contract.parmMainAccountOnly()));

                insert_recordset reportTable (FullyQualifiedAccount, MainAccount, Name, MainAccountRecId, AmountDebit, AmountCredit, TaxCode, TaxReceivable, TaxPayable, TaxBaseAmount)
                select FullyQualifiedAccount, MainAccount, Name, MainAccountRecId, AmountDebit, AmountCredit from ledgerTemp
                    join TaxCode, TaxReceivable, TaxPayable, TaxBaseAmount from taxTemp
                    where ledgerTemp.MainAccount == taxTemp.MainAccount
                        && ledgerTemp.FullyQualifiedAccount == taxTemp.FullyQualifiedAccount;
            }
        }
        else
        {
            taxTemp.linkPhysicalTableInstance(this.processTaxTrans(contract.parmMainAccountOnly()));
            ledgerTemp.linkPhysicalTableInstance(this.processLedgerTransDetails(contract.parmMainAccountOnly()));

            insert_recordset reportTable (TaxCode, TaxCodeName, TaxReceivable, TaxPayable, TaxBaseAmount, FullyQualifiedAccount, MainAccount, MainAccountRecId, AmountDebit, AmountCredit)
            select TaxCode, TaxCodeName, TaxReceivable, TaxPayable, TaxBaseAmount from taxTemp
                join FullyQualifiedAccount, MainAccount, MainAccountRecId, AmountDebit, AmountCredit from ledgerTemp
                where taxTemp.TaxCode == ledgerTemp.TaxCode;
        }

        this.updateMainAccountName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLedgerTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes ledger transactions side logic for the report.
    /// </summary>
    /// <param name="_mainAccountsOnly">
    /// Parameter indicating if to use report based on only main accounts.
    /// </param>
    /// <returns>
    /// A buffer instance of TaxSpecPerLedgerTrans table.
    /// </returns>
    private TaxSpecPerLedgerTransTmp processLedgerTrans(boolean _mainAccountsOnly)
    {
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        MainAccountLedgerDimensionView mainAccountLedgerDimensionView;
        TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntry;
        TaxTrans taxTrans;

        TaxSpecPerLedgerTransTmp ledgerTemp;
        TaxSpecPerLedgerTransTmp processedLedgerTemp;

        ledgerTemp.setConnection(userConnection);
        processedLedgerTemp.setConnection(userConnection);

        /// Update for incorrect ledger dimension amount with SDL starts:
        #LOCALMACRO.MainAccountsOnlyInsertStatementSDL
            insert_recordset ledgerTemp (GeneralJournalEntry, AmountDebit, IsCredit, GeneralJournalAccountEntry, MainAccount, Name, MainAccountRecId)
            select RecId from generalJournalEntry
            where generalJournalEntry.AccountingDate >= fromDate
                && generalJournalEntry.AccountingDate <= toDate
                && generalJournalEntry.Ledger == ledgerRecId
            join AccountingCurrencyAmount, IsCredit, RecId from generalJournalAccountEntry
                where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
            join MainAccount, Name, MainAccountRecId from mainAccountLedgerDimensionView
        ENDMACRO

        #LOCALMACRO.FullyQualifiedAccountInsertStatementSDL
            insert_recordset ledgerTemp (GeneralJournalEntry, AmountDebit, IsCredit, GeneralJournalAccountEntry, FullyQualifiedAccount, Name, MainAccountRecId)
            select RecId from generalJournalEntry
            where generalJournalEntry.AccountingDate >= fromDate
                && generalJournalEntry.AccountingDate <= toDate
                && generalJournalEntry.Ledger == ledgerRecId
            join AccountingCurrencyAmount, IsCredit, RecId from generalJournalAccountEntry
                where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
            join FullyQualifiedAccount, Name, MainAccountRecId from mainAccountLedgerDimensionView
        ENDMACRO
        /// Update for incorrect ledger dimension amount with SDL ends.

        #LOCALMACRO.MainAccountsOnlyInsertStatement
            insert_recordset ledgerTemp (AmountDebit, IsCredit, MainAccount, Name, MainAccountRecId)
            select generalJournalEntry
            group by mainAccountLedgerDimensionView.MainAccount, mainAccountLedgerDimensionView.Name, mainAccountLedgerDimensionView.MainAccountRecId, generalJournalAccountEntry.IsCredit
            where generalJournalEntry.AccountingDate >= fromDate
                    && generalJournalEntry.AccountingDate <= toDate
                    && generalJournalEntry.Ledger == ledgerRecId
            join sum(AccountingCurrencyAmount), IsCredit from generalJournalAccountEntry
                where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
            join MainAccount, Name, MainAccountRecId from mainAccountLedgerDimensionView
        ENDMACRO

        #LOCALMACRO.FullyQualifiedAccountInsertStatement
            insert_recordset ledgerTemp (AmountDebit, IsCredit, FullyQualifiedAccount, Name, MainAccountRecId)
            select generalJournalEntry
            group by mainAccountLedgerDimensionView.FullyQualifiedAccount, mainAccountLedgerDimensionView.Name, mainAccountLedgerDimensionView.MainAccountRecId, generalJournalAccountEntry.IsCredit
            where generalJournalEntry.AccountingDate >= fromDate
                    && generalJournalEntry.AccountingDate <= toDate
                    && generalJournalEntry.Ledger == ledgerRecId
            join sum(AccountingCurrencyAmount), IsCredit from generalJournalAccountEntry
                where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
            join FullyQualifiedAccount, Name, MainAccountRecId from mainAccountLedgerDimensionView
        ENDMACRO

        #LOCALMACRO.MainStatementBody
                where mainAccountLedgerDimensionView.LedgerDimensionId == generalJournalAccountEntry.LedgerDimension
                    && mainAccountLedgerDimensionView.MainAccount >= fromMainAccount
                    && mainAccountLedgerDimensionView.MainAccount <= toMainAccount
            exists join taxTransGeneralJournalAccountEntry
                where taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                    && (taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::TransactionLineAccount ||
                    taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::Tax ||
                    taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::UseTaxPayable ||
                    taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::CashDiscount)
            exists join  taxTrans
                where taxTrans.RecId == taxTransGeneralJournalAccountEntry.TaxTrans
                    && taxTrans.TaxCode >= fromTaxCode
                    && taxTrans.TaxCode <= toTaxCode
                    && taxTrans.TaxOrigin != TaxOrigin::TaxReporting
                    && taxTrans.TransDate >= fromDate
                    && taxTrans.TransDate <= ToDate
        ENDMACRO

        if (_mainAccountsOnly)
        {
            if (isReportByAccTypeExpenditureFeatureEnabled)
            {
                #MainAccountsOnlyInsertStatementSDL
                #MainStatementBody;
            }
            else
            {
                #MainAccountsOnlyInsertStatement
                #MainStatementBody;
            }
        }
        else
        {
            if (isReportByAccTypeExpenditureFeatureEnabled)
            {
                #FullyQualifiedAccountInsertStatementSDL
                #MainStatementBody;
            }
            else
            {
                #FullyQualifiedAccountInsertStatement
                #MainStatementBody;
            }
        }

        if (isReportByAccTypeExpenditureFeatureEnabled)
        {
            GeneralJournalAccountEntry generalJournalAccountEntryInvoice;
            InventTransOrigin inventTransOrigin;
            InventTransPosting inventTransPosting;

            update_recordSet ledgerTemp
            setting AmountDebit = generalJournalAccountEntryInvoice.AccountingCurrencyAmount
                where reportTable.AmountCredit == 0
            join generalJournalAccountEntry
                where ledgerTemp.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                    && generalJournalAccountEntry.PostingType == LedgerPostingType::PurchConsump
            join generalJournalEntry
                where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
            join inventTransPosting
                where generalJournalEntry.SubledgerVoucher == inventTransPosting.Voucher
                    && generalJournalAccountEntry.LedgerDimension == inventTransPosting.OffsetLedgerDimension
                    && inventTransPosting.PostingTypeOffset == generalJournalAccountEntry.PostingType
                    && inventTransPosting.InventTransPostingType == InventTransPostingType::Financial
            join taxTransGeneralJournalAccountEntry
                where taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
            join taxTrans
                where taxTransGeneralJournalAccountEntry.TaxTrans == taxTrans.RecId
                    && taxTrans.SourceDocumentLine != 0
            join AccountingCurrencyAmount from generalJournalAccountEntryInvoice
                where generalJournalEntry.RecId == generalJournalAccountEntryInvoice.GeneralJournalEntry
                    && generalJournalAccountEntryInvoice.LedgerDimension == inventTransPosting.LedgerDimension
                    && generalJournalAccountEntryInvoice.PostingType == inventTransPosting.PostingType
            exists join inventTransOrigin
                where inventTransOrigin.InventTransId == taxTrans.InventTransId
                    && inventTransOrigin.RecId == inventTransPosting.InventTransOrigin;
        }

        update_recordSet ledgerTemp
        setting AmountCredit = -1 * ledgerTemp.AmountDebit,
                AmountDebit = 0
            where ledgerTemp.IsCredit == true;

        // Merge debits and credits
        insert_recordset processedLedgerTemp (FullyQualifiedAccount, MainAccount, Name, MainAccountRecId, AmountDebit, AmountCredit)
        select FullyQualifiedAccount, MainAccount, Name, MainAccountRecId, sum(AmountDebit), sum(AmountCredit) from ledgerTemp
            group by FullyQualifiedAccount, MainAccount, Name, MainAccountRecId;

        return processedLedgerTemp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLedgerTransDetails</Name>
				<Source><![CDATA[
    private TaxSpecPerLedgerTransTmp processLedgerTransDetails(boolean _mainAccountsOnly)
    {
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        MainAccountLedgerDimensionView mainAccountLedgerDimensionView;
        TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntry;
        TaxTrans taxTrans;

        str directSQL;
        Statement statement;

        TaxSpecPerLedgerTransTmp ledgerTemp;
        TaxSpecPerLedgerTransTmp finalLedgerTemp;

        ledgerTemp.setConnection(userConnection);
        finalLedgerTemp.setConnection(userConnection);

        insert_recordset ledgerTemp (GeneralJournalEntry, AmountDebit, IsCredit, GeneralJournalAccountEntry, FullyQualifiedAccount, MainAccount, Name, MainAccountRecId, TaxCode, TaxTrans)
        select RecId from generalJournalEntry
            where generalJournalEntry.AccountingDate >= fromDate
                && generalJournalEntry.AccountingDate <= toDate
                && generalJournalEntry.Ledger == ledgerRecId
        join AccountingCurrencyAmount, IsCredit, RecId from generalJournalAccountEntry
            where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
        join FullyQualifiedAccount, MainAccount, Name, MainAccountRecId from mainAccountLedgerDimensionView
            where mainAccountLedgerDimensionView.LedgerDimensionId == generalJournalAccountEntry.LedgerDimension
                && mainAccountLedgerDimensionView.MainAccount >= fromMainAccount
                && mainAccountLedgerDimensionView.MainAccount <= toMainAccount
        join taxTransGeneralJournalAccountEntry
            where taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                && (taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::TransactionLineAccount ||
                taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::Tax ||
                taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::UseTaxPayable ||
                taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::CashDiscount)
        join TaxCode, RecId from taxTrans
            where taxTrans.RecId == taxTransGeneralJournalAccountEntry.TaxTrans
                && taxTrans.TaxCode >= fromTaxCode
                && taxTrans.TaxCode <= toTaxCode
                && taxTrans.TaxOrigin != TaxOrigin::TaxReporting
                && taxTrans.TransDate >= fromDate
                && taxTrans.TransDate <= ToDate;

        select firstOnly RecId from ledgerTemp;

        directSQL = 'UPDATE A SET AMOUNTDEBIT = 0 ';
        directSQL += 'FROM ( ';
        directSQL += 'SELECT ROW_NUMBER() OVER (PARTITION BY TAXCODE, GENERALJOURNALACCOUNTENTRY ORDER BY GENERALJOURNALACCOUNTENTRY) AS rn, AMOUNTDEBIT FROM ';
        directSQL += strFmt(' %1',ledgerTemp.getPhysicalTableName());
        directSQL += ') A WHERE A.rn != 1';

        new SqlStatementExecutePermission(directSQL).assert();
        statement = userConnection.createStatement();
        statement.executeUpdateWithParameters(directSQL, SqlParams::create());
        CodeAccessPermission::revertAssert();

        if (isReportByAccTypeExpenditureFeatureEnabled)
        {
            GeneralJournalAccountEntry generalJournalAccountEntryInvoice;
            InventTransOrigin inventTransOrigin;
            InventTransPosting inventTransPosting;

            update_recordSet ledgerTemp
            setting AmountDebit = generalJournalAccountEntryInvoice.AccountingCurrencyAmount
                where reportTable.AmountCredit == 0
            join generalJournalAccountEntry
                where ledgerTemp.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                    && generalJournalAccountEntry.PostingType == LedgerPostingType::PurchConsump
            join generalJournalEntry
                where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
            join inventTransPosting
                where generalJournalEntry.SubledgerVoucher == inventTransPosting.Voucher
                    && generalJournalAccountEntry.LedgerDimension == inventTransPosting.OffsetLedgerDimension
                    && inventTransPosting.PostingTypeOffset == generalJournalAccountEntry.PostingType
                    && inventTransPosting.InventTransPostingType == InventTransPostingType::Financial
            join taxTrans
                where ledgerTemp.TaxTrans == taxTrans.RecId
                    && taxTrans.SourceDocumentLine != 0
            join AccountingCurrencyAmount from generalJournalAccountEntryInvoice
                where generalJournalEntry.RecId == generalJournalAccountEntryInvoice.GeneralJournalEntry
                    && generalJournalAccountEntryInvoice.LedgerDimension == inventTransPosting.LedgerDimension
                    && generalJournalAccountEntryInvoice.PostingType == inventTransPosting.PostingType
            exists join inventTransOrigin
                where inventTransOrigin.InventTransId == taxTrans.InventTransId
                    && inventTransOrigin.RecId == inventTransPosting.InventTransOrigin;
        }

        update_recordSet ledgerTemp
        setting AmountCredit = -1 * ledgerTemp.AmountDebit,
                AmountDebit = 0
            where ledgerTemp.IsCredit == true;

        if (_mainAccountsOnly)
        {
            insert_recordset finalLedgerTemp (TaxCode, MainAccount, Name, MainAccountRecId, AmountDebit, AmountCredit)
            select TaxCode, MainAccount, Name, MainAccountRecId, sum(AmountDebit), sum(AmountCredit) from ledgerTemp
                group by TaxCode, MainAccount, Name, MainAccountRecId;
        }
        else
        {
            insert_recordset finalLedgerTemp (TaxCode, FullyQualifiedAccount, Name, MainAccountRecId, AmountDebit, AmountCredit)
            select TaxCode, FullyQualifiedAccount, Name, MainAccountRecId, sum(AmountDebit), sum(AmountCredit) from ledgerTemp
                group by TaxCode, FullyQualifiedAccount, Name, MainAccountRecId;
        }

        return finalLedgerTemp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTaxTrans</Name>
				<Source><![CDATA[
    private TaxSpecPerLedgerTransTmp processTaxTrans(boolean _mainAccountsOnly)
    {
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        MainAccountLedgerDimensionView mainAccountLedgerDimensionView;
        TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntry, taxTransLinkBaseVariance;
        TaxTrans taxTrans;
        TaxTable taxTable;
        TaxAccountingDistParentLineView acctDistView;

        TaxSpecPerLedgerTransTmp unprocessedTaxTempTable;
        TaxSpecPerLedgerTransTmp processedTaxTempTable;

        unprocessedTaxTempTable.setConnection(userConnection);
        processedTaxTempTable.setConnection(userConnection);

        // Non source document lines for tax accounts.
        // Only sum tax amount for tax accounts. Sum(TaxAmount) will be shown as sales tax receivable or payable amount in report.
        insert_recordset unprocessedTaxTempTable (TaxCode, TaxAmount, TaxInCostPriceMST, TaxDirection, TaxCodeName)
            select generalJournalEntry
            group by taxTrans.TaxCode, taxTrans.TaxDirection, taxTable.TaxName
                join generalJournalAccountEntry
                join mainAccountLedgerDimensionView
                join taxTransGeneralJournalAccountEntry
                join TaxCode, sum(TaxAmount), sum(TaxInCostPriceMST), TaxDirection from taxTrans
                join TaxName from taxTable
                    where #DefaultWhereClauseNotIncludeTaxLink
                        && taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                        && (taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::Tax
                            || taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::UseTaxPayable)
                        #NonSourceDocumentLineWhereClause;

        if (FeatureStateProvider::isFeatureEnabled(TaxSpecLedgerTransReportShowTxAmtForTxAcctFlighting::instance()))
        {
            // Non source document lines for tax referred accounts generated by tax journal.
            insert_recordset unprocessedTaxTempTable (TaxCode, TaxAmount, TaxInCostPriceMST, TaxBaseAmount, TaxCodeName)
            select generalJournalEntry
            group by taxTrans.TaxCode, taxTrans.TaxDirection, taxTable.TaxName
                join generalJournalAccountEntry
                join mainAccountLedgerDimensionView
                join taxTransGeneralJournalAccountEntry
                join TaxCode, sum(TaxAmount), sum(TaxInCostPriceMST), sum(TaxBaseAmount) from taxTrans
                join TaxName from taxTable
                    where #DefaultWhereClauseNotIncludeTaxLink
                        && taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                        && (taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::TransactionLineAccount
                            || taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::CashDiscount)
                        #NonSourceDocumentLineWhereClause
                        #TaxJournalWhereClause;

            // Non source document lines for tax referred accounts not generated by tax journal.
            // Do not sum tax amount for tax referred accounts not generated by tax journal, such as transaction with tax exempt checked in sales tax group.
            // Only sum tax base amount for tax referred accounts not generated by tax journal. Sum(TaxBaseAmount) will be shown as origin amount in report.
            insert_recordset unprocessedTaxTempTable (TaxCode, TaxBaseAmount, TaxCodeName)
            select generalJournalEntry
            group by taxTrans.TaxCode, taxTrans.TaxDirection, taxTable.TaxName
                join generalJournalAccountEntry
                join mainAccountLedgerDimensionView
                join taxTransGeneralJournalAccountEntry
                join TaxCode, sum(TaxBaseAmount) from taxTrans
                join TaxName from taxTable
                    where #DefaultWhereClauseNotIncludeTaxLink
                        && taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                        && (taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::TransactionLineAccount
                            || taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::CashDiscount)
                        #NonSourceDocumentLineWhereClause
                        #NotTaxJournalWhereClause;
        }
        else
        {
            // Non source document lines for tax referred accounts.
            // Do not sum tax amount for tax referred accounts, such as transaction with tax exempt checked in sales tax group.
            // Only sum tax base amount for tax referred accounts. Sum(TaxBaseAmount) will be shown as origin amount in report.
            insert_recordset unprocessedTaxTempTable (TaxCode, TaxBaseAmount, TaxCodeName)
            select generalJournalEntry
            group by taxTrans.TaxCode, taxTrans.TaxDirection, taxTable.TaxName
                join generalJournalAccountEntry
                join mainAccountLedgerDimensionView
                join taxTransGeneralJournalAccountEntry
                join TaxCode, sum(TaxBaseAmount) from taxTrans
                join TaxName from taxTable
                    where #DefaultWhereClauseNotIncludeTaxLink
                        && taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                        && (taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::TransactionLineAccount
                            || taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::CashDiscount)
                        #NonSourceDocumentLineWhereClause;
        }

        // Process source document lines
        insert_recordset unprocessedTaxTempTable (TaxCode, TaxDirection, TaxBaseAmount, TaxCodeName, TaxAmount)
        select generalJournalEntry
        group by taxTrans.TaxCode, taxTrans.TaxDirection, taxTable.TaxName
            join generalJournalAccountEntry
            join mainAccountLedgerDimensionView
            join taxTransGeneralJournalAccountEntry
            join TaxCode, TaxDirection, sum(TaxBaseAmount) from taxTrans
            join TaxName from taxTable
                where #DefaultWhereClause
                      #SourceDocumentLineWhereClause
                      && taxTrans.TaxCode == taxTable.TaxCode
            join sum(AccountingCurrencyAmount) from acctDistView
                where #AccountDistributionWhereClause
                #PriceVarianceWhereClause;

        // Process source documents for tax referred accounts - for some case, there is tax variance but no variance base
        insert_recordset unprocessedTaxTempTable (TaxCode, TaxDirection, TaxBaseAmount, TaxCodeName, TaxAmount)
        select generalJournalEntry
        group by taxTrans.TaxCode, taxTrans.TaxDirection, taxTable.TaxName
            join generalJournalAccountEntry
            join mainAccountLedgerDimensionView
            join taxTransGeneralJournalAccountEntry
            join TaxCode, TaxDirection, sum(TaxBaseAmount) from taxTrans
            join TaxName from taxTable
                where #DefaultWhereClause
                      #SourceDocumentLineWhereClause
                      && taxTrans.TaxCode == taxTable.TaxCode
            join sum(AccountingCurrencyAmount) from acctDistView
                where #AccountDistributionWhereClause
                    #TaxVarianceWhereClause
            notExists join taxTransLinkBaseVariance
                where #TaxBaseVarianceWhereClause;

        // Process zero dollar tax amounts which don't have accounting distribution
        insert_recordset unprocessedTaxTempTable (TaxCode, TaxDirection, TaxCodeName)
        select generalJournalEntry
        group by taxTrans.TaxCode, taxTrans.TaxDirection, taxTable.TaxName
            join generalJournalAccountEntry
            join mainAccountLedgerDimensionView
            join taxTransGeneralJournalAccountEntry
            join TaxCode, TaxDirection from taxTrans
            join TaxName from taxTable
                where #DefaultWhereClause
                      #SourceDocumentLineWhereClause
                      && taxTrans.TaxCode == taxTable.TaxCode
            notExists join acctDistView
                where #AccountDistributionWhereClause;

        select firstOnly RecId from unprocessedTaxTempTable;

        update_recordSet unprocessedTaxTempTable
        setting TaxReceivable = unprocessedTaxTempTable.TaxAmount - unprocessedTaxTempTable.TaxInCostPriceMST
            where unprocessedTaxTempTable.TaxDirection == TaxDirection::IncomingTax;

        update_recordSet unprocessedTaxTempTable
        setting TaxPayable = -1 * unprocessedTaxTempTable.TaxAmount
            where unprocessedTaxTempTable.TaxDirection == TaxDirection::OutgoingTax;

        insert_recordset processedTaxTempTable (TaxCode, TaxCodeName, TaxReceivable, TaxPayable, TaxBaseAmount)
        select TaxCode, TaxCodeName, sum(TaxReceivable), sum(TaxPayable), sum(TaxBaseAmount) from unprocessedTaxTempTable
            group by TaxCode, TaxCodeName;

        return processedTaxTempTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTaxTransDetails</Name>
				<Source><![CDATA[
    private TaxSpecPerLedgerTransTmp processTaxTransDetails(boolean _mainAccountsOnly, boolean _subtotalByTaxCode)
    {
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        MainAccountLedgerDimensionView mainAccountLedgerDimensionView;
        TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntry, taxTransLinkBaseVariance;
        TaxTrans taxTrans;
        TaxAccountingDistParentLineView acctDistView;
        TaxDirection taxDirectionVariable = TaxDirection::OutgoingTax;
        SubledgerJournalAccountEntry subledgerJournalAccountEntry;
        boolean isTaxSpecPerLedgerTransReportExcludInterunitFlightEnabled = TaxSpecPerLedgerTransReportExcludInterunitFlight::instance().isEnabled();

        TaxSpecPerLedgerTransTmp unprocessedTaxTempTable;
        TaxSpecPerLedgerTransTmp processedTaxTempTable;

        unprocessedTaxTempTable.setConnection(userConnection);
        processedTaxTempTable.setConnection(userConnection);

        if (_mainAccountsOnly)
        {
            if (_subtotalByTaxCode)
            {
                // Process non source document lines for tax referred accounts.
                insert_recordset unprocessedTaxTempTable (MainAccount, TaxCode, TaxAmount, TaxInCostPriceMST, TaxDirection)
                select generalJournalEntry
                group by mainAccountLedgerDimensionView.MainAccount, taxTrans.TaxDirection, taxTrans.TaxCode
                    join generalJournalAccountEntry
                    join MainAccount from mainAccountLedgerDimensionView
                    join taxTransGeneralJournalAccountEntry
                    join TaxCode, sum(TaxAmount), sum(TaxInCostPriceMST), TaxDirection from taxTrans
                        where #DefaultWhereClause
                              #NonSourceDocumentLineWhereClause
                            && (taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::TransactionLineAccount
                                || taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::CashDiscount);

                if (FeatureStateProvider::isFeatureEnabled(TaxSpecLedgerTransReportShowTxAmtForTxAcctFlighting::instance()))
                {
                    // Process non source document lines for tax accounts generated by tax journal.
                    insert_recordset unprocessedTaxTempTable (MainAccount, TaxCode, TaxAmount, TaxInCostPriceMST, TaxDirection)
                    select generalJournalEntry
                    group by mainAccountLedgerDimensionView.MainAccount, taxTrans.TaxDirection, taxTrans.TaxCode
                        join generalJournalAccountEntry
                        join MainAccount from mainAccountLedgerDimensionView
                        join taxTransGeneralJournalAccountEntry
                        join TaxCode, sum(TaxAmount), sum(TaxInCostPriceMST), TaxDirection from taxTrans
                            where #DefaultWhereClause
                                  #NonSourceDocumentLineWhereClause
                                && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::TransactionLineAccount
                                && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::CashDiscount
                                && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::TaxReversed
                                  #TaxJournalWhereClause;

                    // Process non source document lines for tax accounts not generated by tax journal.
                    insert_recordset unprocessedTaxTempTable (MainAccount, TaxCode, TaxDirection)
                    select generalJournalEntry
                    group by mainAccountLedgerDimensionView.MainAccount, taxTrans.TaxDirection, taxTrans.TaxCode
                        join generalJournalAccountEntry
                        join MainAccount from mainAccountLedgerDimensionView
                        join taxTransGeneralJournalAccountEntry
                        join TaxCode, TaxDirection from taxTrans
                            where #DefaultWhereClause
                                  #NonSourceDocumentLineWhereClause
                                && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::TransactionLineAccount
                                && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::CashDiscount
                                && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::TaxReversed
                                  #NotTaxJournalWhereClause;
                }
                else
                {
                    // Process non source document lines for tax accounts.
                    insert_recordset unprocessedTaxTempTable (MainAccount, TaxCode, TaxDirection)
                    select generalJournalEntry
                    group by mainAccountLedgerDimensionView.MainAccount, taxTrans.TaxDirection, taxTrans.TaxCode
                        join generalJournalAccountEntry
                        join MainAccount from mainAccountLedgerDimensionView
                        join taxTransGeneralJournalAccountEntry
                        join TaxCode, TaxDirection from taxTrans
                            where #DefaultWhereClause
                                  #NonSourceDocumentLineWhereClause
                                && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::TransactionLineAccount
                                && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::CashDiscount
                                && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::TaxReversed;
                }

                // Process source document lines
                if (isTaxSpecPerLedgerTransReportExcludInterunitFlightEnabled)
                {
                    insert_recordset unprocessedTaxTempTable (MainAccount, TaxCode, TaxDirection, TaxAmount)
                    select generalJournalEntry
                    group by mainAccountLedgerDimensionView.MainAccount, taxTrans.TaxCode, taxTrans.TaxDirection
                        join generalJournalAccountEntry
                        join MainAccount from mainAccountLedgerDimensionView
                        join taxTransGeneralJournalAccountEntry
                        join TaxCode, TaxDirection from taxTrans
                            where #DefaultWhereClause
                                  #SourceDocumentLineWhereClause
                        join sum(AccountingCurrencyAmount) from acctDistView
                            where #AccountDistributionWhereClause
                            #PriceVarianceWhereClause
                        exists join subledgerJournalAccountEntry
                        where subledgerJournalAccountEntry.RecId == acctDistView.SubledgerJournalAccountEntry
                            && subledgerJournalAccountEntry.PostingType != LedgerPostingType::InterunitCredit
                            && subledgerJournalAccountEntry.PostingType != LedgerPostingType::InterunitDebit;
                }
                else
                {
                    insert_recordset unprocessedTaxTempTable (MainAccount, TaxCode, TaxDirection, TaxAmount)
                    select generalJournalEntry
                    group by mainAccountLedgerDimensionView.MainAccount, taxTrans.TaxCode, taxTrans.TaxDirection
                        join generalJournalAccountEntry
                        join MainAccount from mainAccountLedgerDimensionView
                        join taxTransGeneralJournalAccountEntry
                        join TaxCode, TaxDirection from taxTrans
                            where #DefaultWhereClause
                                  #SourceDocumentLineWhereClause
                        join sum(AccountingCurrencyAmount) from acctDistView
                            where #AccountDistributionWhereClause
                            #PriceVarianceWhereClause
                        exists join subledgerJournalAccountEntry;
                }

                // Process source documents for tax referred accounts - for some case, there is tax variance but no variance base
                insert_recordset unprocessedTaxTempTable (MainAccount, TaxCode, TaxDirection, TaxAmount)
                select generalJournalEntry
                group by mainAccountLedgerDimensionView.MainAccount, taxTrans.TaxCode, taxTrans.TaxDirection
                    join generalJournalAccountEntry
                    join MainAccount from mainAccountLedgerDimensionView
                    join taxTransGeneralJournalAccountEntry
                    join TaxCode, TaxDirection from taxTrans
                        where #DefaultWhereClause
                              #SourceDocumentLineWhereClause
                    join sum(AccountingCurrencyAmount) from acctDistView
                        where #AccountDistributionWhereClause
                            #TaxVarianceWhereClause
                    notExists join taxTransLinkBaseVariance
                        where #TaxBaseVarianceWhereClause;

                insert_recordset unprocessedTaxTempTable (MainAccount, TaxCode, TaxDirection)
                select generalJournalEntry
                group by mainAccountLedgerDimensionView.MainAccount, taxTrans.TaxCode, taxTrans.TaxDirection
                    join generalJournalAccountEntry
                    join MainAccount from mainAccountLedgerDimensionView
                    join taxTransGeneralJournalAccountEntry
                    join TaxCode, TaxDirection from taxTrans
                        where #DefaultWhereClause
                              #SourceDocumentLineWhereClause
                    notExists join acctDistView
                        where #AccountDistributionWhereClause;
            }
            else
            {
                // Process non source document lines for tax referred accounts.
                insert_recordset unprocessedTaxTempTable (MainAccount, TaxAmount, TaxInCostPriceMST, TaxDirection)
                select generalJournalEntry
                group by mainAccountLedgerDimensionView.MainAccount, taxTrans.TaxDirection
                    join generalJournalAccountEntry
                    join MainAccount from mainAccountLedgerDimensionView
                    join taxTransGeneralJournalAccountEntry
                    join sum(TaxAmount), sum(TaxInCostPriceMST), TaxDirection from taxTrans
                        where #DefaultWhereClause
                              #NonSourceDocumentLineWhereClause
                            && (taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::TransactionLineAccount
                                || taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::CashDiscount);

                if (FeatureStateProvider::isFeatureEnabled(TaxSpecLedgerTransReportShowTxAmtForTxAcctFlighting::instance()))
                {
                    // Process non source document lines for tax accounts generated by tax journal.
                    insert_recordset unprocessedTaxTempTable (MainAccount, TaxAmount, TaxInCostPriceMST, TaxDirection)
                    select generalJournalEntry
                    group by mainAccountLedgerDimensionView.MainAccount, taxTrans.TaxDirection
                        join generalJournalAccountEntry
                        join MainAccount from mainAccountLedgerDimensionView
                        join taxTransGeneralJournalAccountEntry
                        join sum(TaxAmount), sum(TaxInCostPriceMST), TaxDirection from taxTrans
                            where #DefaultWhereClause
                                  #NonSourceDocumentLineWhereClause
                               && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::TransactionLineAccount
                               && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::CashDiscount
                               && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::TaxReversed
                                  #TaxJournalWhereClause;

                    // Process non source document lines for tax accounts not generated by tax journal.
                    insert_recordset unprocessedTaxTempTable (MainAccount, TaxDirection)
                    select generalJournalEntry
                    group by mainAccountLedgerDimensionView.MainAccount, taxTrans.TaxDirection
                        join generalJournalAccountEntry
                        join MainAccount from mainAccountLedgerDimensionView
                        join taxTransGeneralJournalAccountEntry
                        join TaxDirection from taxTrans
                            where #DefaultWhereClause
                                  #NonSourceDocumentLineWhereClause
                               && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::TransactionLineAccount
                               && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::CashDiscount
                               && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::TaxReversed
                                  #NotTaxJournalWhereClause;
                }
                else
                {
                    // Process non source document lines for tax accounts
                    insert_recordset unprocessedTaxTempTable (MainAccount, TaxDirection)
                    select generalJournalEntry
                    group by mainAccountLedgerDimensionView.MainAccount, taxTrans.TaxDirection
                        join generalJournalAccountEntry
                        join MainAccount from mainAccountLedgerDimensionView
                        join taxTransGeneralJournalAccountEntry
                        join TaxDirection from taxTrans
                            where #DefaultWhereClause
                                  #NonSourceDocumentLineWhereClause
                               && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::TransactionLineAccount
                               && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::CashDiscount
                               && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::TaxReversed;
                }

                // Process source document lines
                if (isTaxSpecPerLedgerTransReportExcludInterunitFlightEnabled)
                {
                    insert_recordset unprocessedTaxTempTable (MainAccount, TaxDirection, TaxAmount)
                    select generalJournalEntry
                    group by mainAccountLedgerDimensionView.MainAccount, taxTrans.TaxDirection
                        join generalJournalAccountEntry
                        join MainAccount from mainAccountLedgerDimensionView
                        join taxTransGeneralJournalAccountEntry
                        join TaxDirection from taxTrans
                            where #DefaultWhereClause
                                  #SourceDocumentLineWhereClause
                        join sum(AccountingCurrencyAmount) from acctDistView
                            where #AccountDistributionWhereClause
                            #PriceVarianceWhereClause
                        exists join subledgerJournalAccountEntry
                        where subledgerJournalAccountEntry.RecId == acctDistView.SubledgerJournalAccountEntry
                            && subledgerJournalAccountEntry.PostingType != LedgerPostingType::InterunitCredit
                            && subledgerJournalAccountEntry.PostingType != LedgerPostingType::InterunitDebit;
                }
                else
                {
                    insert_recordset unprocessedTaxTempTable (MainAccount, TaxDirection, TaxAmount)
                    select generalJournalEntry
                    group by mainAccountLedgerDimensionView.MainAccount, taxTrans.TaxDirection
                        join generalJournalAccountEntry
                        join MainAccount from mainAccountLedgerDimensionView
                        join taxTransGeneralJournalAccountEntry
                        join TaxDirection from taxTrans
                            where #DefaultWhereClause
                                  #SourceDocumentLineWhereClause
                        join sum(AccountingCurrencyAmount) from acctDistView
                            where #AccountDistributionWhereClause
                            #PriceVarianceWhereClause;
                }

                // Process source documents for tax referred accounts - for some case, there is tax variance but no variance base
                insert_recordset unprocessedTaxTempTable (MainAccount, TaxDirection, TaxAmount)
                select generalJournalEntry
                group by mainAccountLedgerDimensionView.MainAccount, taxTrans.TaxCode, taxTrans.TaxDirection
                    join generalJournalAccountEntry
                    join MainAccount from mainAccountLedgerDimensionView
                    join taxTransGeneralJournalAccountEntry
                    join TaxDirection from taxTrans
                        where #DefaultWhereClause
                              #SourceDocumentLineWhereClause
                    join sum(AccountingCurrencyAmount) from acctDistView
                        where #AccountDistributionWhereClause
                            #TaxVarianceWhereClause
                    notExists join taxTransLinkBaseVariance
                        where #TaxBaseVarianceWhereClause;

                insert_recordset unprocessedTaxTempTable (MainAccount, TaxDirection)
                select generalJournalEntry
                group by mainAccountLedgerDimensionView.MainAccount, taxTrans.TaxDirection
                    join generalJournalAccountEntry
                    join MainAccount from mainAccountLedgerDimensionView
                    join taxTransGeneralJournalAccountEntry
                    join TaxDirection from taxTrans
                        where #DefaultWhereClause
                              #SourceDocumentLineWhereClause
                    notExists join acctDistView
                        where #AccountDistributionWhereClause;
            }
        }
        else
        {
            if (_subtotalByTaxCode)
            {
                // Process non source document lines for tax referred accounts.
                insert_recordset unprocessedTaxTempTable (FullyQualifiedAccount, TaxCode, TaxAmount, TaxInCostPriceMST, TaxDirection)
                select generalJournalEntry
                group by mainAccountLedgerDimensionView.FullyQualifiedAccount, taxTrans.TaxCode, taxTrans.TaxDirection
                    join generalJournalAccountEntry
                    join FullyQualifiedAccount from mainAccountLedgerDimensionView
                    join taxTransGeneralJournalAccountEntry
                    join TaxCode, sum(TaxAmount), sum(TaxInCostPriceMST), TaxDirection from taxTrans
                        where #DefaultWhereClause
                              #NonSourceDocumentLineWhereClause
                            && (taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::TransactionLineAccount
                                || taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::CashDiscount);

                if (FeatureStateProvider::isFeatureEnabled(TaxSpecLedgerTransReportShowTxAmtForTxAcctFlighting::instance()))
                {
                    // Process non source document lines for tax  accounts generated by tax journal.
                    insert_recordset unprocessedTaxTempTable (FullyQualifiedAccount, TaxCode, TaxAmount, TaxInCostPriceMST, TaxDirection)
                    select generalJournalEntry
                    group by mainAccountLedgerDimensionView.FullyQualifiedAccount, taxTrans.TaxCode, taxTrans.TaxDirection
                        join generalJournalAccountEntry
                        join FullyQualifiedAccount from mainAccountLedgerDimensionView
                        join taxTransGeneralJournalAccountEntry
                        join TaxCode, sum(TaxAmount), sum(TaxInCostPriceMST), TaxDirection from taxTrans
                            where #DefaultWhereClause
                                  #NonSourceDocumentLineWhereClause
                                && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::TransactionLineAccount
                                && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::CashDiscount
                                && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::TaxReversed
                                  #TaxJournalWhereClause;

                    // Process non source document lines for tax  accounts not generated by tax journal.
                    insert_recordset unprocessedTaxTempTable (FullyQualifiedAccount, TaxCode, TaxDirection)
                    select generalJournalEntry
                    group by mainAccountLedgerDimensionView.FullyQualifiedAccount, taxTrans.TaxCode, taxTrans.TaxDirection
                        join generalJournalAccountEntry
                        join FullyQualifiedAccount from mainAccountLedgerDimensionView
                        join taxTransGeneralJournalAccountEntry
                        join TaxCode, TaxDirection from taxTrans
                            where #DefaultWhereClause
                                  #NonSourceDocumentLineWhereClause
                                && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::TransactionLineAccount
                                && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::CashDiscount
                                && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::TaxReversed
                                  #NotTaxJournalWhereClause;
                }
                else
                {
                    // Process non source document lines for tax  accounts.
                    insert_recordset unprocessedTaxTempTable (FullyQualifiedAccount, TaxCode, TaxDirection)
                    select generalJournalEntry
                    group by mainAccountLedgerDimensionView.FullyQualifiedAccount, taxTrans.TaxCode, taxTrans.TaxDirection
                        join generalJournalAccountEntry
                        join FullyQualifiedAccount from mainAccountLedgerDimensionView
                        join taxTransGeneralJournalAccountEntry
                        join TaxCode, TaxDirection from taxTrans
                            where #DefaultWhereClause
                                  #NonSourceDocumentLineWhereClause
                                && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::TransactionLineAccount
                                && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::CashDiscount
                                && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::TaxReversed;
                }

                // Process source document lines.
                if (isTaxSpecPerLedgerTransReportExcludInterunitFlightEnabled)
                {
                    insert_recordset unprocessedTaxTempTable (FullyQualifiedAccount, TaxCode, TaxDirection, TaxAmount)
                    select generalJournalEntry
                    group by mainAccountLedgerDimensionView.FullyQualifiedAccount, taxTrans.TaxCode, taxTrans.TaxDirection
                        join generalJournalAccountEntry
                        join FullyQualifiedAccount from mainAccountLedgerDimensionView
                        join taxTransGeneralJournalAccountEntry
                        join TaxCode, TaxDirection from taxTrans
                            where #DefaultWhereClause
                                  #SourceDocumentLineWhereClause
                        join sum(AccountingCurrencyAmount) from acctDistView
                            where #AccountDistributionWhereClause
                                  #PriceVarianceWhereClause
                        exists join subledgerJournalAccountEntry
                        where subledgerJournalAccountEntry.RecId == acctDistView.SubledgerJournalAccountEntry
                            && subledgerJournalAccountEntry.PostingType != LedgerPostingType::InterunitCredit
                            && subledgerJournalAccountEntry.PostingType != LedgerPostingType::InterunitDebit;
                }
                else
                {
                    insert_recordset unprocessedTaxTempTable (FullyQualifiedAccount, TaxCode, TaxDirection, TaxAmount)
                    select generalJournalEntry
                    group by mainAccountLedgerDimensionView.FullyQualifiedAccount, taxTrans.TaxCode, taxTrans.TaxDirection
                        join generalJournalAccountEntry
                        join FullyQualifiedAccount from mainAccountLedgerDimensionView
                        join taxTransGeneralJournalAccountEntry
                        join TaxCode, TaxDirection from taxTrans
                            where #DefaultWhereClause
                                  #SourceDocumentLineWhereClause
                        join sum(AccountingCurrencyAmount) from acctDistView
                            where #AccountDistributionWhereClause
                                  #PriceVarianceWhereClause;
                }

                // Process source documents for tax referred accounts - for some case, there is tax variance but no variance base
                insert_recordset unprocessedTaxTempTable (FullyQualifiedAccount, TaxCode, TaxDirection, TaxAmount)
                select generalJournalEntry
                group by mainAccountLedgerDimensionView.FullyQualifiedAccount, taxTrans.TaxCode, taxTrans.TaxDirection
                    join generalJournalAccountEntry
                    join FullyQualifiedAccount from mainAccountLedgerDimensionView
                    join taxTransGeneralJournalAccountEntry
                    join TaxCode, TaxDirection from taxTrans
                        where #DefaultWhereClause
                              #SourceDocumentLineWhereClause
                    join sum(AccountingCurrencyAmount) from acctDistView
                        where #AccountDistributionWhereClause
                            #TaxVarianceWhereClause
                    notExists join taxTransLinkBaseVariance
                        where #TaxBaseVarianceWhereClause;

                insert_recordset unprocessedTaxTempTable (FullyQualifiedAccount, TaxCode, TaxDirection)
                select generalJournalEntry
                group by mainAccountLedgerDimensionView.FullyQualifiedAccount, taxTrans.TaxCode, taxTrans.TaxDirection
                    join generalJournalAccountEntry
                    join FullyQualifiedAccount from mainAccountLedgerDimensionView
                    join taxTransGeneralJournalAccountEntry
                    join TaxCode, TaxDirection from taxTrans
                        where #DefaultWhereClause
                              #SourceDocumentLineWhereClause
                    notExists join acctDistView
                        where #AccountDistributionWhereClause;
            }
            else
            {
                // Process non source document lines for tax referred accounts.
                insert_recordset unprocessedTaxTempTable (FullyQualifiedAccount, TaxAmount, TaxInCostPriceMST, TaxDirection)
                select generalJournalEntry
                group by mainAccountLedgerDimensionView.FullyQualifiedAccount, taxTrans.TaxDirection
                    join generalJournalAccountEntry
                    join FullyQualifiedAccount from mainAccountLedgerDimensionView
                    join taxTransGeneralJournalAccountEntry
                    join sum(TaxAmount), sum(TaxInCostPriceMST), TaxDirection from taxTrans
                        where #DefaultWhereClause
                              #NonSourceDocumentLineWhereClause
                            && (taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::TransactionLineAccount
                                || taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::CashDiscount);

                if (FeatureStateProvider::isFeatureEnabled(TaxSpecLedgerTransReportShowTxAmtForTxAcctFlighting::instance()))
                {
                    // Process non source document lines for tax accounts generated by tax journal.
                    insert_recordset unprocessedTaxTempTable (FullyQualifiedAccount, TaxAmount, TaxInCostPriceMST, TaxDirection)
                    select generalJournalEntry
                    group by mainAccountLedgerDimensionView.FullyQualifiedAccount, taxTrans.TaxDirection
                        join generalJournalAccountEntry
                        join FullyQualifiedAccount from mainAccountLedgerDimensionView
                        join taxTransGeneralJournalAccountEntry
                        join sum(TaxAmount), sum(TaxInCostPriceMST), TaxDirection from taxTrans
                            where #DefaultWhereClause
                                  #NonSourceDocumentLineWhereClause
                               && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::TransactionLineAccount
                               && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::CashDiscount
                               && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::TaxReversed
                                  #TaxJournalWhereClause;

                    // Process non source document lines for tax accounts not generated by tax journal.
                    insert_recordset unprocessedTaxTempTable (FullyQualifiedAccount, TaxDirection)
                    select generalJournalEntry
                    group by mainAccountLedgerDimensionView.FullyQualifiedAccount, taxTrans.TaxDirection
                        join generalJournalAccountEntry
                        join FullyQualifiedAccount from mainAccountLedgerDimensionView
                        join taxTransGeneralJournalAccountEntry
                        join TaxDirection from taxTrans
                            where #DefaultWhereClause
                                  #NonSourceDocumentLineWhereClause
                               && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::TransactionLineAccount
                               && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::CashDiscount
                               && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::TaxReversed
                                  #NotTaxJournalWhereClause;
                }
                else
                {
                    // Process non source document lines for tax accounts.
                    insert_recordset unprocessedTaxTempTable (FullyQualifiedAccount, TaxDirection)
                    select generalJournalEntry
                    group by mainAccountLedgerDimensionView.FullyQualifiedAccount, taxTrans.TaxDirection
                        join generalJournalAccountEntry
                        join FullyQualifiedAccount from mainAccountLedgerDimensionView
                        join taxTransGeneralJournalAccountEntry
                        join TaxDirection from taxTrans
                            where #DefaultWhereClause
                                  #NonSourceDocumentLineWhereClause
                               && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::TransactionLineAccount
                               && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::CashDiscount
                               && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::TaxReversed;
                }

                // Process source document lines
                if (isTaxSpecPerLedgerTransReportExcludInterunitFlightEnabled)
                {
                    insert_recordset unprocessedTaxTempTable (FullyQualifiedAccount, TaxDirection, TaxAmount)
                    select generalJournalEntry
                    group by mainAccountLedgerDimensionView.FullyQualifiedAccount, taxTrans.TaxDirection
                        join generalJournalAccountEntry
                        join FullyQualifiedAccount from mainAccountLedgerDimensionView
                        join taxTransGeneralJournalAccountEntry
                        join TaxDirection from taxTrans
                            where #DefaultWhereClause
                                  #SourceDocumentLineWhereClause
                        join sum(AccountingCurrencyAmount) from acctDistView
                            where #AccountDistributionWhereClause
                                  #PriceVarianceWhereClause
                        exists join subledgerJournalAccountEntry
                        where subledgerJournalAccountEntry.RecId == acctDistView.SubledgerJournalAccountEntry
                            && subledgerJournalAccountEntry.PostingType != LedgerPostingType::InterunitCredit
                            && subledgerJournalAccountEntry.PostingType != LedgerPostingType::InterunitDebit;
                }
                else
                {
                    insert_recordset unprocessedTaxTempTable (FullyQualifiedAccount, TaxDirection, TaxAmount)
                    select generalJournalEntry
                    group by mainAccountLedgerDimensionView.FullyQualifiedAccount, taxTrans.TaxDirection
                        join generalJournalAccountEntry
                        join FullyQualifiedAccount from mainAccountLedgerDimensionView
                        join taxTransGeneralJournalAccountEntry
                        join TaxDirection from taxTrans
                            where #DefaultWhereClause
                                  #SourceDocumentLineWhereClause
                        join sum(AccountingCurrencyAmount) from acctDistView
                            where #AccountDistributionWhereClause
                                  #PriceVarianceWhereClause;
                }

                // Process source documents for tax referred accounts - for some case, there is tax variance but no variance base
                insert_recordset unprocessedTaxTempTable (FullyQualifiedAccount, TaxDirection, TaxAmount)
                select generalJournalEntry
                group by mainAccountLedgerDimensionView.FullyQualifiedAccount, taxTrans.TaxCode, taxTrans.TaxDirection
                    join generalJournalAccountEntry
                    join FullyQualifiedAccount from mainAccountLedgerDimensionView
                    join taxTransGeneralJournalAccountEntry
                    join TaxDirection from taxTrans
                        where #DefaultWhereClause
                              #SourceDocumentLineWhereClause
                    join sum(AccountingCurrencyAmount) from acctDistView
                        where #AccountDistributionWhereClause
                            #TaxVarianceWhereClause
                    notExists join taxTransLinkBaseVariance
                        where #TaxBaseVarianceWhereClause;

                insert_recordset unprocessedTaxTempTable (FullyQualifiedAccount, TaxDirection)
                select generalJournalEntry
                group by mainAccountLedgerDimensionView.FullyQualifiedAccount, taxTrans.TaxDirection
                    join generalJournalAccountEntry
                    join FullyQualifiedAccount from mainAccountLedgerDimensionView
                    join taxTransGeneralJournalAccountEntry
                    join TaxDirection from taxTrans
                        where #DefaultWhereClause
                              #SourceDocumentLineWhereClause
                    notExists join acctDistView
                        where #AccountDistributionWhereClause;
            }
        }

        select firstOnly RecId from unprocessedTaxTempTable;

        update_recordSet unprocessedTaxTempTable
        setting TaxReceivable = unprocessedTaxTempTable.TaxAmount - unprocessedTaxTempTable.TaxInCostPriceMST
            where unprocessedTaxTempTable.TaxDirection == TaxDirection::IncomingTax;

        update_recordSet unprocessedTaxTempTable
        setting TaxPayable = -1 * unprocessedTaxTempTable.TaxAmount
            where unprocessedTaxTempTable.TaxDirection == TaxDirection::OutgoingTax;

        insert_recordset processedTaxTempTable (FullyQualifiedAccount, MainAccount, TaxCode, TaxReceivable, TaxPayable, TaxBaseAmount)
        select FullyQualifiedAccount, MainAccount, TaxCode, sum(TaxReceivable), sum(TaxPayable), sum(TaxBaseAmount) from unprocessedTaxTempTable
            group by FullyQualifiedAccount, MainAccount, TaxCode;

        return processedTaxTempTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>