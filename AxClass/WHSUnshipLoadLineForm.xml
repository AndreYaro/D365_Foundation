<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSUnshipLoadLineForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSUnshipLoadLineForm</c> class contains the business logic of the <c>WHSUnshipLoadLine</c> form.
/// </summary>
class WHSUnshipLoadLineForm
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>changeQtyToReduce</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the qty to reduce is valid for the <c>WHSTmpLoadLineInventory</c> record.
    /// </summary>
    /// <param name="_whsTmpLoadLineInventory">
    /// The table buffer for the temp table.
    /// </param>
    /// <returns>
    /// true if the qty to reduce field is valid; otherwise, false.
    /// </returns>
    public boolean changeQtyToReduce(WHSTmpLoadLineInventory _whsTmpLoadLineInventory)
    {
        boolean ret = true;

        if (_whsTmpLoadLineInventory.QtyToReduce > _whsTmpLoadLineInventory.InventQty)
        {
            ret = checkFailed("@WAX2814");
        }

        if (_whsTmpLoadLineInventory.QtyToReduce < 0)
        {
            ret = checkFailed("@WAX2815");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCatchWeightItemNotMultiSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that catch weight items are not multi selected.
    /// </summary>
    /// <param name="_whsTmpLoadLineInventory_ds">Form data source containing selected load lines.</param>
    protected final void validateCatchWeightItemNotMultiSelected(FormDataSource _whsTmpLoadLineInventory_ds)
    {
        WHSTmpLoadLineInventory rec;
        boolean                 isCWItemSelected = false;
        int                     numRecords;

        for (rec = _whsTmpLoadLineInventory_ds.getFirst() ? _whsTmpLoadLineInventory_ds.getFirst() : _whsTmpLoadLineInventory_ds.cursor();
        rec;
        rec = _whsTmpLoadLineInventory_ds.getNext())
        {
            // Ensure the current record has been updated with a quantity to be reduced.
            if (rec.QtyToReduce > 0)
            {
                if (PdsGlobal::pdsIsCWItem(WHSLoadLine::findbyRecId(rec.RefRecId).ItemId))
                {
                    isCWItemSelected = true;
                }

                numRecords++;
            }
        }

        // Only one catch weight item can be unpicked at a time.
        if (numRecords > 1 && isCWItemSelected)
        {
            throw error("@WAX:Error_CannotUnpickMoreThanOneCWItem");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>areCWTagsCapturedAtPicking</Name>
				<Source><![CDATA[
    private boolean areCWTagsCapturedAtPicking(WHSLoadLine _loadLine)
    {
        if (_loadLine.InventTransType == InventTransType::Sales)
        {
            return WHSInventTable::salesOrderWeightCapturingProcess(_loadLine.ItemId) == WHSSalesOrderWeightCapturingProcess::Picking;
        }
        else if (_loadLine.InventTransType == InventTransType::TransferOrderShip)
        {
            return WHSInventTable::transferIssueWeightCapturingProcess(_loadLine.ItemId) == WHSTransferIssueWeightCapturingProcess::Picking;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAllCatchWeightTagsToUnship</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds all catch weight tags to unship.
    /// </summary>
    /// <param name = "_tmpLoadLineInventory">The temporary table with load lines to unship.</param>
    /// <returns>A map containing the tags.</returns>
    protected final Map findAllCatchWeightTagsToUnship(WHSTmpLoadLineInventory _tmpLoadLineInventory)
    {
        Map tags;

        if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
        {
            tags = new Map(Types::Int64, Types::Class);

            WHSLoadLine loadLine;
            while select forupdate _tmpLoadLineInventory
                where _tmpLoadLineInventory.QtyToReduce > 0
                join loadLine
                    where loadLine.RecId == _tmpLoadLineInventory.RefRecId
            {
                if (WHSInventTable::isCatchWeightTagTracked(loadLine.ItemId))
                {
                    boolean areCWTagsCapturedAtPicking = this.areCWTagsCapturedAtPicking(loadLine);

                    // If the cwTags were captured at picking or the inventory is packed then we need to prompt for cw tags being unshipped.
                    if (areCWTagsCapturedAtPicking
                        ||  WHSCatchWeightTagLastRegistration::isTagAlreadyPackedInContainer(loadLine))
                    {
                        WHSCatchWeightTagUnshipDetails tagUnshipDetails = this.captureCWTagsToUnship(_tmpLoadLineInventory, tags);
                        tags.insert(_tmpLoadLineInventory.RecId, tagUnshipDetails);
                    }
                }
            }
        }

        return tags;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unshipCatchWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unships a catch weight load line.
    /// </summary>
    /// <param name = "_tmpLoadLineInventory">The temporary table with load lines to unship.</param>
    /// <param name = "_unShip">The unship class.</param>
    /// <param name = "_tagsToUnship">The collection of tags to unship.</param>
    protected final void unshipCatchWeight(WHSTmpLoadLineInventory _tmpLoadLineInventory, WhsUnShip _unShip, Map _tagsToUnship)
    {
        WHSLoadLine             loadLine                    = WHSLoadLine::findbyRecId(_tmpLoadLineInventory.RefRecId);
        boolean                 isCWTagTracked              = WHSInventTable::isCatchWeightTagTracked(loadLine.ItemId);
        WHSWeightToReduce       weightToReduce              = _tmpLoadLineInventory.WeightToReduce;
        InventDim               inventDim                   = InventDim::find(_tmpLoadLineInventory.InventDimId);
        Set                     cwTags                      = new Set(Types::String);
        WHSTransWeight          totalCWTagWeight;
        WHSTransWeight          weightAdjustmentQty;
        boolean                 shouldUpdateWeightToReduce;

        if (isCWTagTracked)
        {
            if (_tagsToUnship && _tagsToUnship.exists(_tmpLoadLineInventory.RecId))
            {
                WHSCatchWeightTagUnshipDetails tagUnshipDetails = _tagsToUnship.lookup(_tmpLoadLineInventory.RecId);
                cwTags = tagUnshipDetails.tags();
                totalCWTagWeight = tagUnshipDetails.totalWeight();

                weightToReduce = this.calcWeightToReduceForCWTag(_tmpLoadLineInventory, loadLine, totalCWTagWeight);
                shouldUpdateWeightToReduce = true;

                // The weight we will reduce the line by minus the weight of captured cwTags will equal the weight we need to adjust on other dimension sets.
                weightAdjustmentQty = weightToReduce - totalCWTagWeight;
            }
            else
            {
                // Calculate weight based off inventory values.
                weightToReduce = WHSCatchWeightHelper::calculateMovingWeight(loadLine.ItemId, _tmpLoadLineInventory.InventDimId, _tmpLoadLineInventory.QtyToReduce);
            }
        }
        
        ttsbegin;

        if (shouldUpdateWeightToReduce)
        {
            _tmpLoadLineInventory.WeightToReduce = weightToReduce;
            _tmpLoadLineInventory.update();
        }

        _unShip.parmUnshipFullLine(_tmpLoadLineInventory.QtyToReduce == weightToReduce);
        _unShip.unShipQuantities(inventDim, _tmpLoadLineInventory.QtyToReduce, loadLine, _tmpLoadLineInventory.ContainerId, _tmpLoadLineInventory.InventQty, weightToReduce, cwTags);
        
        this.balanceWeightAcrossLines(_tmpLoadLineInventory, inventDim.LicensePlateId, weightAdjustmentQty, loadLine);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unShip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unships selected inventory to a move location and license plate.
    /// </summary>
    /// <param name="_decrementLoadLine">
    /// Determines whether to decrement load line quantity also.
    /// </param>
    /// <param name="_toLocation">
    /// Move to location.
    /// </param>
    /// <param name="_inventDim">
    /// Inventory dimension level.
    /// </param>
    /// <param name="_whsTmpLoadLineInventory_ds">
    /// Form data source containing selected load lines.
    /// </param>
    /// <param name="_toLicensePlate">
    /// Move to license plate.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Exception is thrown when unknown location is selected to move the inventory.
    /// </exception>
    public void unShip(
        boolean              _decrementLoadLine,
        str                  _toLocation,
        InventDim            _inventDim,
        FormDataSource       _whsTmpLoadLineInventory_ds,
        WHSLicensePlateId    _toLicensePlate = '')
    {
        this.validateCatchWeightItemNotMultiSelected(_whsTmpLoadLineInventory_ds);
        boolean unpickingFullLine = this.isUnpickingFullLoadLine(_whsTmpLoadLineInventory_ds);

        WHSUnShip unShip = new WHSUnShip();
        unShip.parmDecrementLoadLine(_decrementLoadLine);

        if (!WMSLocation::exist(_toLocation, _inventDim.InventLocationId))
        {
            throw error("@WAX2752");
        }

        unShip.parmMoveToLocation(WMSLocation::find(_toLocation, _inventDim.InventLocationId));
        unShip.parmMoveToLicensePlate(_toLicensePlate);
        unShip.parmUnshipFullLine(unpickingFullLine);
        
        WHSTmpLoadLineInventory rec;
        rec.setTmpData(_whsTmpLoadLineInventory_ds.cursor());          
        
        Map catchWeightTagsToUnship = this.findAllCatchWeightTagsToUnship(rec);
        
        InventDim inventDim;
        WHSLicensePlateId previousLicensePlateId;                        

        ttsbegin;

        if (WHSUseLockForShipConfirmAndReducePickedQtyV3Flight::instance().isEnabled())
        {           
            WHSLoadId loadIdToAcquireLockFor = this.determineLoadIdToAcquireLockFor(_whsTmpLoadLineInventory_ds);

            this.acquireApplicationLockForLoadTable(loadIdToAcquireLockFor);
        }

        while select forupdate rec
            where rec.QtyToReduce > 0
            join LicensePlateId from inventDim
                order by inventDim.LicensePlateId
                where inventDim.inventDimId == rec.InventDimId
        {
            boolean skipLpValidationOnUnShipping = inventDim.LicensePlateId == previousLicensePlateId || inventDim.LicensePlateId == _toLicensePlate; // test that inventdimlicense plate is populated correctly

            this.initUnShipFromTmpLoadLineInventory(unShip, rec);
            unShip.parmSkipLpValidationOnUnShipping(skipLpValidationOnUnShipping);

            if (PdsGlobal::pdsIsCWItem(WHSLoadLine::findbyRecId(rec.RefRecId).ItemId))
            {
                this.unshipCatchWeight(rec, unship, catchWeightTagsToUnship);
            }
            else
            {
                unShip.unshipQuantities(InventDim::find(rec.InventDimId), rec.QtyToReduce, WHSLoadLine::findbyRecId(rec.RefRecId), rec.ContainerId, rec.InventQty, 0, null);
            }

            previousLicensePlateId = inventDim.LicensePlateId;
        }
        ttscommit;

    }

]]></Source>
			</Method>
			<Method>
				<Name>determineLoadIdToAcquireLockFor</Name>
				<Source><![CDATA[
    private WHSLoadId determineLoadIdToAcquireLockFor(FormDataSource _whsTmpLoadLineInventory_ds)
    {
        WHSLoadId loadId;

        WHSTmpLoadLineInventory tmpLoadLineInventory =
            _whsTmpLoadLineInventory_ds.getFirst(true) ? _whsTmpLoadLineInventory_ds.getFirst(true) : _whsTmpLoadLineInventory_ds.cursor();

        if (tmpLoadLineInventory)
        {
            loadId = WHSLoadLine::findbyRecId(tmpLoadLineInventory.RefRecId).LoadId;
        }

        return loadId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquireApplicationLockForLoadTable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void acquireApplicationLockForLoadTable(WHSLoadId _loadId)
    {
        if (!_loadId)
        {
            return;
        }

        Connection connection;
        
        try
        {
            connection = new Connection();

            // lock is held until the transaction for current connection is alive
            boolean lockAquired = WHSShipConfirmAndReducePickedQtyLoadLockManager::tryAcquireReadLockForLoadId(_loadId, connection);
        
            if (!lockAquired)
            {                
                throw Error(strFmt("@WAX:WHSReducePickedQtyCouldNotAcquireLockError", _loadId));
            }
        }
        finally
        {
            connection.finalize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initUnShipFromTmpLoadLineInventory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes parameters of a <c>WHSUnShip</c> record from a <c>WHSTmpLoadLineInventory</c> record.
    /// </summary>
    /// <param name = "_unShip"><c>WHSUnShip</c> object to initialize.</param>
    /// <param name = "_tmpLoadLineInvent">A <c>WHSTmpLoadLineInventory</c> record.</param>
    protected void initUnShipFromTmpLoadLineInventory(WHSUnShip _unShip, WHSTmpLoadLineInventory _tmpLoadLineInvent)
    {
        _unShip.parmWorkLineRecId(_tmpLoadLineInvent.WorkLineRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUnpickingFullLoadLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a full load line is being unpicked.
    /// </summary>
    /// <param name="_whsTmpLoadLineInventory_ds">Form data source containing selected load lines.</param>
    /// <returns>true if a full load line is being unpicked; otherwise, false.</returns>
    protected final boolean isUnpickingFullLoadLine(FormDataSource _whsTmpLoadLineInventory_ds)
    {        
        for (WHSTmpLoadLineInventory rec = _whsTmpLoadLineInventory_ds.getFirst();
            rec;
            rec = _whsTmpLoadLineInventory_ds.getNext())
        {
            if (rec.QtyToReduce != rec.InventQty)
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowWeightSpecification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the user should be able to specify weight value to reduce.
    /// </summary>
    /// <param name = "_whsTmpLoadLineInventory">
    /// A <c>WHSTmpLoadLineInventory</c> record.
    /// </param>
    /// <returns>
    /// true if weight should be specified; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal boolean allowWeightSpecification(WHSTmpLoadLineInventory _whsTmpLoadLineInventory)
    {
        ItemId itemId = WHSLoadLine::findbyRecId(_whsTmpLoadLineInventory.RefRecId).ItemId;

        return PdsGlobal::pdsIsCWItem(itemId) 
            && !WHSInventTable::isCatchWeightTagTracked(itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>balanceWeightAcrossLines</Name>
				<Source><![CDATA[
    private void balanceWeightAcrossLines(
        WHSTmpLoadLineInventory _tmpLoadLineInventory,
        WHSLicensePlateId       _licensePlateId,
        WHSTransWeight          _weightToAdjust,
        WHSLoadLine             _loadLine)
    {
        WHSTmpLoadLineInventory curTmpLoadLineInventory;
        WHSUnShip               unShip = new WHSUnShip();

        curTmpLoadLineInventory.setTmpData(_tmpLoadLineInventory);

        // weightToAdjust will be negative if we need to reduce weight on other transactions.
        // weightToAdjust will be positive if we need to increase weight on other transactions.
        if (_weightToAdjust)
        {
            InventDim   inventDim;

            select curTmpLoadLineInventory
                where curTmpLoadLineInventory.QtyToReduce < curTmpLoadLineInventory.InventQty
                    exists join inventDim
                    where inventDim.inventDimId     == curTmpLoadLineInventory.InventDimId
                    &&    inventDim.LicensePlateId  == _licensePlateId;
            
            InventHandlingQty cwQtyRemaining  = curTmpLoadLineInventory.InventQty - curTmpLoadLineInventory.QtyToReduce;
            WHSTransWeight    weightRemaining = curTmpLoadLineInventory.Weight - curTmpLoadLineInventory.WeightToReduce;

            WHSWeightToReduce weightCanReduce;

            // We need to reduce weight
            if (_weightToAdjust < 0)
            {
                weightCanReduce = weightRemaining - WHSInvent::defaultCatchWeightReserveQuantity(_loadLine.ItemId, cwQtyRemaining);
                if (weightCanReduce)
                {
                    weightCanReduce = min(weightCanReduce, -_weightToAdjust);
                    // Within the unship class positive weightToAdjust values will decrease weight, so pass in possitive.
                    unShip.adjustWeightForUnship(curTmpLoadLineInventory, weightCanReduce);
                    _weightToAdjust += weightCanReduce;
                }
            }
            else if (_weightToAdjust > 0)
            {
                // We Need to increase weight to reduce by as much as possible.
                weightCanReduce = PdsCatchWeight::maxInventQty(_loadLine.ItemId, cwQtyRemaining) - weightRemaining;
                if (weightCanReduce)
                {
                    weightCanReduce = min(weightCanReduce, _weightToAdjust);
                    // Within the unship class negative weightToAdjust values will increase weight, so pass in negative.
                    unShip.adjustWeightForUnship(curTmpLoadLineInventory, -weightCanReduce);
                    _weightToAdjust -= weightCanReduce;
                }
            }
        }

        if (_weightToAdjust)
        {
            throw error("@WAX:Error_CouldNotAdjust");
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWeightToReduceForCWTag</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cacluates the weight value to be reduced for cwTag tracked items.
    /// </summary>
    /// <param name="_loadLineInventory">
    /// A <c>WHSTmpLoadLineInventory</c> record represening the values being unshipped.
    /// </param>
    /// <returns>
    /// The weight to be reduced.
    /// </returns>
    /// <remarks>
    /// Because the weight represented in transactions may not match the weight values of the cwTags, we must adjust the weight to be reduced.
    /// </remarks>
    private WHSWeightToReduce calcWeightToReduceForCWTag(WHSTmpLoadLineInventory _loadLineInventory,
                                                         WHSLoadLine            _loadLine,
                                                         WHSTransWeight _totalCWTagWeight)
    {
        WHSWeightToReduce weightToReduce;

        InventHandlingQty qtyRemain = _loadLineInventory.InventQty - _loadLineInventory.QtyToReduce;

        if (qtyRemain)
        {
            WHSTransWeight weightRemaining     = _loadLineInventory.Weight - _totalCWTagWeight;
            WHSTransWeight minWeightThreshold  = WHSInvent::defaultCatchWeightReserveQuantity(_loadLine.ItemId, qtyRemain);
            // If the weight remaining on the line after reducing cwTag weight is not at least the min weight for the qty remaining
            // then we reduce less weight from this line.
            if (weightRemaining < minWeightThreshold)
            {
                weightToReduce = _totalCWTagWeight - (minWeightThreshold - weightRemaining);
            }
            else
            {
                WHSTransWeight maxWeightThreshold = PdsCatchWeight::maxInventQty(_loadLine.ItemId, qtyRemain);
                // If the weight remaining on the line after reducing cwTag weight is more than the max weight for the qty remaining
                // then we reduce more weight from this line.
                if (weightRemaining > maxWeightThreshold)
                {
                    weightToReduce = _totalCWTagWeight + (weightRemaining - maxWeightThreshold);
                }
                else
                {
                    // If remaining weight is within thresholds then reduce amount specified by cwTags.
                    weightToReduce = _totalCWTagWeight;
                }
            }
        }
        else
        {
            // If no CW Qty will remaing then we know we must reduce the full weight value too.
            weightToReduce = _loadLineInventory.Weight;
        }

        return weightToReduce;
    }

]]></Source>
			</Method>
			<Method>
				<Name>captureCWTagsToUnship</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prompts the users for catch weight tag IDs being unshipped and validates the entries.
    /// </summary>
    /// <param name="_tmpLoadLineInventory">
    /// A <c>WHSTmpLoadLineInventory</c> record representing the values being unshipped.
    /// </param>
    /// <param name="_previouslySelectedTags">
    /// A map containing the tags selected for previous unship lines.
    /// </param>
    /// <returns>
    /// An instance of <c>WHSCatchWeightTagUnshipDetails</c> with the tag IDs and the total weight the user entered to be unshipped.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// If the user cancels out of the dialog prompt, an error is thrown to prevent continuing the unship process.
    /// </exception>
    private WHSCatchWeightTagUnshipDetails captureCWTagsToUnship(WHSTmpLoadLineInventory _tmpLoadLineInventory, Map _previouslySelectedTags)
    {
        WHSCatchWeightTagUnshipDetails tagUnshipDetails = WHSCatchWeightTagUnshipDetails::construct();

        Counter tagCounter  = 1;
        int     qtyToReduce = real2int(_tmpLoadLineInventory.QtyToReduce);

        InventDim   inventDimCriteria = InventDim::find(_tmpLoadLineInventory.InventDimId);
        boolean isValidTagNumber;

        while (tagCounter <= qtyToReduce)
        {
            Dialog dialog = new Dialog();
            dialog.caption(strFmt(strFmtLB("@WAX:CatchWeightTagDialogNumberOfTagsLabel"), tagCounter, qtyToReduce));
            dialog.addText(strFmt("@WAX:CatchWeightTagDialogRelatedDimensionsLabel", inventDimCriteria.preFixValue()));
            dialog.windowType(FormWindowType::PopUp);

            DialogField tagNumberField = dialog.addField(extendedTypeStr(WHSCatchWeightTagNumber));

            WHSCatchWeightTagNumber tagNumber;

            if (dialog.run())
            {
                tagNumber = tagNumberField.value();
                isValidTagNumber = true;
            }
            else
            {
                // Cancel the unship process.
                throw error("@WAX:CatchWeightTagDialogErrorMessageUnshipCancelled");
            }

            if (tagUnshipDetails.tagExists(tagNumber))
            {
                isValidTagNumber = checkFailed(strFmt("@WAX:CatchWeightTagAlreadySelected", tagNumber));
            }

            if (isValidTagNumber && _previouslySelectedTags)
            {
                MapEnumerator tagDetailsEnumerator = _previouslySelectedTags.getEnumerator();
                while (isValidTagNumber && tagDetailsEnumerator.moveNext())
                {
                    WHSCatchWeightTagUnshipDetails previousUnshipDetails = tagDetailsEnumerator.currentValue();
                    if (previousUnshipDetails.tagExists(tagNumber))
                    {
                        isValidTagNumber = checkFailed(strFmt("@WAX:CatchWeightTagAlreadySelected", tagNumber));
                    }
                }
            }

            isValidTagNumber = (isValidTagNumber && WHSCatchWeightTagStatus::canCatchWeightTagBeUnshipped(tagNumber, _tmpLoadLineInventory));

            if (isValidTagNumber)
            {
                tagCounter++;
                
                WHSCatchWeightTag tag = WHSCatchWeightTag::find(tagNumber);
                tagUnshipDetails.addTag(tagNumber);
                tagUnshipDetails.incrementWeight(tag.CapturedWeight);
            }
        }

        return tagUnshipDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCatchWeightValues</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean validateCatchWeightValues(WHSTmpLoadLineInventory _whsTmpLoadLineInventory)
    {
        boolean ret     = true;
        ItemId  itemId  = WHSLoadLine::findbyRecId(_whsTmpLoadLineInventory.RefRecId).ItemId;

        if (!WHSInventTable::isCatchWeightTagTracked(itemId))
        {
            if (!PdsCatchWeight::validateInventQty(itemId, _whsTmpLoadLineInventory.WeightToReduce, _whsTmpLoadLineInventory.QtyToReduce, false))
            {
                ret = checkFailed("@WAX:Error_CouldNotAdjust");
            }
            
            if (ret)
            {
                WHSTransWeight  weightRemaining;
                PdsCWInventQty  cwQtyRemaining;
            
                weightRemaining = _whsTmpLoadLineInventory.Weight - _whsTmpLoadLineInventory.WeightToReduce;
                cwQtyRemaining = _whsTmpLoadLineInventory.InventQty - _whsTmpLoadLineInventory.QtyToReduce;
            
                if (!PdsCatchWeight::validateInventQty(itemId, weightRemaining, cwQtyRemaining, false))
                {
                    ret = checkFailed("@WAX:Error_CouldNotAdjust");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWeightToReduce</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the weight to reduce is valid for the <c>WHSTmpLoadLineInventory</c> record.
    /// </summary>
    /// <param name="_whsTmpLoadLineInventory">
    /// The table buffer for the temp table.
    /// </param>
    /// <returns>
    /// true if the qty to reduce field is valid; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal boolean validateWeightToReduce(WHSTmpLoadLineInventory _whsTmpLoadLineInventory)
    {
        boolean ret = true;

        if (_whsTmpLoadLineInventory.WeightToReduce > _whsTmpLoadLineInventory.Weight)
        {
            ret = checkFailed("@WAX:Error_ReducedWeight");
        }

        if (_whsTmpLoadLineInventory.WeightToReduce < 0)
        {
            ret = checkFailed("@WAX2815");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>