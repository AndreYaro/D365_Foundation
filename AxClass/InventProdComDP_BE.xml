<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventProdComDP_BE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventProdComDP_BE</c> class is the data object class for the <c>InventProdCom</c> report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(InventProdCom_BE)),
    SRSReportParameterAttribute(classstr(InventProdComContract_BE))
]
public class InventProdComDP_BE extends SRSReportDataProviderBase
{
    TaxBranchNumber                     taxBranchNumber;
    InventProdComTable                  inventProdComTable;
    InventProdComLineWithCode           inventProdComLineWithCode;
    Boolean                             prePrinted;
    InventProdComTmp_BE                 inventProdComTmp;
    RefRecId                            inventProdComPeriodId;
    ContactPerson                       contactPerson;
    ContactPerson                       contactPersonExt;
    DirPerson                           dirPerson;
    DirPerson                           dirPersonExt;
    DirPartyPostalAddressView           dirPartyPostalAddressViewExt;
    DirPartyContactInfoView             dirPartyContactInfoView;
    DirPartyContactInfoView             dirPartyContactInfoViewExt;
    DirPartyTable                       dirPartyTable;
    DirPartyTable                       dirPartyTableExt;
    LogisticsElectronicAddressLocator   phone;
    LogisticsElectronicAddressLocator   email;
    LogisticsElectronicAddressLocator   fax;
    LogisticsElectronicAddressLocator   phoneExt;
    LogisticsElectronicAddressLocator   emailExt;
    LogisticsElectronicAddressLocator   faxExt;
    Name                                name;
    Name                                nameExt;
    int                                 counter;
    int                                 pcounter;
    str                                 branch;
    Url                                 url;
    AddressZipCodeId                    zipCode;
    AddressCity                         city;
    AddressStreet                       street;
    CompanyName                         companyName;

    #define.Phone       ('Phone')
    #define.Email       ('Email')
    #define.Fax         ('Fax')
    #define.RowCount    (15)
    #define.Numbers     ('0123456789')
    #define.Space10     (10)
    #define.Space20     (20)
    #define.Space11     (11)
    #define.Space1      (1)
    #define.Space0      (0)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRows</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the rows to the report.
    /// </summary>
    private void addRows()
    {
        while (counter mod #RowCount != 0)
        {
            counter++;
            this.insertInventProdComTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSpaces</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the spaces and removes unnecessary characters from the passed string.
    /// </summary>
    /// <param name="_in">
    ///    The string for which to add spaces or remove unnecessary characters.
    /// </param>
    /// <param name="_length">
    ///    The length to which the string is to be resized.
    /// </param>
    /// <returns>
    ///    The modified string.
    /// </returns>
    private str addSpaces(str _in, int _length = 0)
    {
        if (strkeep(_in, #Numbers) == '0')
        {
            _in = ' ';
        }
        return  this.addSpacesGeneral(_in,_length);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSpacesGeneral</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds spaces to the passed string.
    /// </summary>
    /// <param name="_in">
    ///    The string for which to add spaces.
    /// </param>
    /// <param name="_length">
    ///    The length to which the string is to be resized.
    /// </param>
    /// <returns>
    ///    The modified string.
    /// </returns>
    private str addSpacesGeneral(str _in, int _length = 0)
    {
        int x = 1;
        int l = strlen(_in);
        str ret;

        while (x <= l)
        {
            ret += substr(_in, x, 1);
            ret += ' ';
            x++;
        }
        if (_length)
        {
            int y = x - 1;
            while (x <=_length - y)
            {
                ret = ' ' + ret;
                x++;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contactInformation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the contact information.
    /// </summary>
    private void contactInformation()
    {
        contactPerson   = ContactPerson::find(InventProdComParameters::find().ContactPersonId);
        dirPerson       = DirPerson::find(contactPerson.Party);

        while select LocationName,Locator from dirPartyContactInfoView where dirPartyContactInfoView.Party ==  dirPerson.RecId
        {
            if (dirPartyContactInfoView.LocationName == #Phone)
            {
                phone = dirPartyContactInfoView.Locator;
            }
            else
            {
                if (dirPartyContactInfoView.LocationName == #Fax)
                {
                    fax = dirPartyContactInfoView.Locator;
                }
                else
                {
                    if (dirPartyContactInfoView.LocationName == #Email)
                    {
                        email = dirPartyContactInfoView.Locator;
                    }
                }
            }
        }

        select firstonly Name from dirPartyTable
            where dirPartyTable.RecId == dirPerson.RecId;
        name = dirPartyTable.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contactInformationExt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ContactExtension Information.
    /// </summary>
    private void contactInformationExt()
    {
        contactPersonExt    = ContactPerson::find(InventProdComParameters::find().ContactPersonIdExt);
        dirPersonExt        = DirPerson::find(contactPersonExt.Party);

        select City,ZipCode,Street from dirPartyPostalAddressViewExt
            where dirPartyPostalAddressViewExt.Party == dirPersonExt.RecId;

        while select LocationName,Locator from dirPartyContactInfoViewExt
                where dirPartyContactInfoViewExt.Party ==  dirPersonExt.RecId
        {
            if (dirPartyContactInfoViewExt.LocationName == #Phone)
            {
                phoneExt = dirPartyContactInfoViewExt.Locator;
            }
            else
            {
                if (dirPartyContactInfoViewExt.LocationName == #Fax)
                {
                    faxExt = dirPartyContactInfoViewExt.Locator;
                }
                else
                {
                    if (dirPartyContactInfoViewExt.LocationName == #Email)
                    {
                        emailExt = dirPartyContactInfoViewExt.Locator;
                    }
                }
            }
        }
        select firstonly Name from dirPartyTableExt
            where dirPartyTableExt.RecId == dirPersonExt.RecId;
        nameExt = dirPartyTableExt.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>days</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Modifies the days data.
    /// </summary>
    /// <returns>
    ///    The days data in the required format.
    /// </returns>
    private Description days()
    {
        str ret;
        if (dayofmth(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())) < 10)
        {
            ret = '0' + int2str(dayofmth(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));
        }
        else
        {
            ret = int2str(dayofmth(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));
        }
        return this.addSpaces(ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventProdComTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the report data from the <c>ProdComTmp_BE</c> table.
    /// </summary>
    /// <returns>
    ///    The report data from the <c>ProdComTmp_BE</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tablestr(InventProdComTmp_BE)), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventProdComTmp_BE getInventProdComTmp()
    {
        select inventProdComTmp;
        return inventProdComTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertinventProdComTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the specified data in the <c>inventProdComTmp_BE</c> table.
    /// </summary>
    private void insertinventProdComTmp()
    {
        inventProdComTmp.BranchNumber         = branch;
        inventProdComTmp.EnterpriseNumber     = this.addSpacesGeneral(strkeep(CompanyInfo::find().getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, InventProdComTable.PeriodEnd), #Numbers));
        inventProdComTmp.FieldB52             = this.addSpacesGeneral(int2str(inventProdComTable.Field14), #Space20);
        inventProdComTmp.FieldB51             = this.addSpacesGeneral(int2str(inventProdComTable.Field13), #Space20);
        inventProdComTmp.FieldB4              = this.addSpacesGeneral(int2str(inventProdComTable.Field12), #Space20);
        inventProdComTmp.FieldB3              = this.addSpacesGeneral(int2str(inventProdComTable.Field11), #Space20);
        inventProdComTmp.FieldB2              = this.addSpacesGeneral(int2str(inventProdComTable.Field10), #Space20);
        inventProdComTmp.FieldB1              = this.addSpacesGeneral(int2str(inventProdComTable.Field09), #Space20);
        inventProdComTmp.ContactEmail         = email;
        inventProdComTmp.ContactPhone         = phone;
        inventProdComTmp.ContactFax           = fax;
        inventProdComTmp.ContactName          = name;
        inventProdComTmp.ContactEmailExt      = emailExt;
        inventProdComTmp.ContactFaxExt        = faxExt;
        inventProdComTmp.ContactPhoneExt      = phoneExt;
        inventProdComTmp.ContactNameExt       = nameExt;
        inventProdComTmp.ContactCityExt       = dirPartyPostalAddressViewExt.City;
        inventProdComTmp.ContactZipCodeExt    = this.addSpaces(strkeep(dirPartyPostalAddressViewExt.ZipCode,#Numbers));
        inventProdComTmp.ContactStreetExt     = dirPartyPostalAddressViewExt.Street;
        inventProdComTmp.Url                  = url;
        inventProdComTmp.ZipCode              = zipCode;
        inventProdComTmp.City                 = city;
        inventProdComTmp.Street               = street;
        inventProdComTmp.CompanyName          = companyName;
        inventProdComTmp.PeriodStart          = inventProdComTable.PeriodStart;
        inventProdComTmp.ColumnDp1            = substr(this.addSpaces(strkeep(num2str(inventProdComLineWithCode.ColumnD,#Space10,#Space0,#Space1,#Space0), #Numbers), #Space20), #Space1, #Space10);
        inventProdComTmp.ColumnDp2            = substr(this.addSpaces(strkeep(num2str(inventProdComLineWithCode.ColumnD,#Space10,#Space0,#Space1,#Space0), #Numbers), #Space20), #Space11, #Space10);
        inventProdComTmp.ColumnOp1            = substr(this.addSpaces(strkeep(num2str(inventProdComLineWithCode.ColumnO,#Space10,#Space0,#Space1,#Space0), #Numbers), #Space20), #Space1, #Space10);
        inventProdComTmp.ColumnOp2            = substr(this.addSpaces(strkeep(num2str(inventProdComLineWithCode.ColumnO,#Space10,#Space0,#Space1,#Space0), #Numbers), #Space20), #Space11, #Space10);
        inventProdComTmp.ColumnNp1            = substr(this.addSpaces(strkeep(num2str(inventProdComLineWithCode.ColumnN,#Space10,#Space0,#Space1,#Space0), #Numbers), #Space20), #Space1, #Space10);
        inventProdComTmp.ColumnNp2            = substr(this.addSpaces(strkeep(num2str(inventProdComLineWithCode.ColumnN,#Space10,#Space0,#Space1,#Space0), #Numbers), #Space20), #Space11, #Space10);
        inventProdComTmp.ColumnFp1            = substr(this.addSpaces(strkeep(num2str(inventProdComLineWithCode.ColumnF,#Space10,#Space0,#Space1,#Space0), #Numbers), #Space20), #Space1, #Space10);
        inventProdComTmp.ColumnFp2            = substr(this.addSpaces(strkeep(num2str(inventProdComLineWithCode.ColumnF,#Space10,#Space0,#Space1,#Space0), #Numbers), #Space20), #Space11, #Space10);
        inventProdComTmp.ColumnIp1            = substr(this.addSpaces(strkeep(num2str(inventProdComLineWithCode.ColumnI,#Space10,#Space0,#Space1,#Space0), #Numbers), #Space20), #Space1, #Space10);
        inventProdComTmp.ColumnIp2            = substr(this.addSpaces(strkeep(num2str(inventProdComLineWithCode.ColumnI,#Space10,#Space0,#Space1,#Space0), #Numbers), #Space20), #Space11, #Space10);
        inventProdComTmp.ProdComCode          = this.addSpaces(strkeep(inventProdComLineWithCode.ColumnA, #Numbers));
        inventProdComTmp.Counter              = counter;
        inventProdComTmp.Months               = this.months();
        inventProdComTmp.Year                 = this.addSpaces(int2str(year(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))));
        inventProdComTmp.Days                 = this.days();
        inventProdComTmp.Period               = inventProdComTable.PeriodStart;
        inventProdComTmp.Pcounter             = pcounter;
        inventProdComTmp.insert();
        inventProdComTmp.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>months</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Modifies the month data.
    /// </summary>
    /// <returns>
    ///    The month data in the required format.
    /// </returns>
    private Description months()
    {
        str ret;
        if (mthofyr(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())) < 10)
        {
            ret = '0' + int2str(mthofyr(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));
        }
        else
        {
            ret = int2str(mthofyr(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));
        }
        return this.addSpaces(ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method is used to process the report business logic which is used by the <c>InventProdCom</c>
    ///    class.
    /// </remarks>
    public void processReport()
    {
        InventProdComContract_BE contract     = this.parmDataContract() as InventProdComContract_BE;
        Query query = new query(this.parmQuery());
        QueryRun queryRun = new QueryRun(query);
        TaxBranchNumber branchNumber = contract.parmBranchNumber();
        RefRecId inventProdComPeriodRecID = contract.parmInventProdComPeriodRecID();
        pcounter = 1;
        counter = 0;

        url         = CompanyInfo::find().url();
        zipCode     = this.addSpaces(strkeep(CompanyInfo::find().postalAddress().ZipCode, #Numbers));
        city        = CompanyInfo::find().postalAddress().City;
        street      = CompanyInfo::find().postalAddress().Street;
        companyName = CompanyInfo::find().Name();

        while (queryRun.next())
        {
            inventProdComTable          = queryRun.get(tablenum(InventProdComTable));
            inventProdComLineWithCode   = queryRun.get(tablenum(InventProdComLineWithCode));
            counter++;
            this.contactInformation();
            this.contactInformationExt();
            branch =   this.addSpacesGeneral(strkeep(inventProdComLineWithCode.BranchNumber, #Numbers));
            this.insertInventProdComTmp();

            if (counter mod #RowCount == 0)
            {
                pcounter++;
            }
        }

        inventProdComTable.clear();
        inventProdComLineWithCode.clear();

        this.addRows();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
