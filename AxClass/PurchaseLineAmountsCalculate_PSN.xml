<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchaseLineAmountsCalculate_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchaseLineAmountsCalculate_PSN</c> class extends the <c>TradeLineAmountsCalculate_PSN</c> class and
/// it calculates ordered, receieved, invoiced, pending invoice, and invoice remaining amounts for a Purchase Order
/// in transaction currency amount.
/// </summary>
public class PurchaseLineAmountsCalculate_PSN extends TradeLineAmountsCalculate_PSN
{
    PurchId                                 purchId;
    AccountingDistribTmpOrderLineSumm_PSN   orderLineSummaryTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>groupByLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the ordered, received, invoiced, pending invoice, and invoice remaining amounts and groups them by LedgerDimension
    /// </summary>
    private void groupByLedgerDimension()
    {
        ListEnumerator                          listEnumerator;
        List                                    listOrderLineSummary;

        listOrderLineSummary = new List(Types::Record);
        while select sum(Ordered), sum(Received), sum(Invoiced), sum(PendingInvoice), sum(InvoiceRemaining), TradeLineTmpAmountSummary_PSN, LedgerDimension from orderLineSummaryTmp
            group by TradeLineTmpAmountSummary_PSN, DistributionAmountSource, LedgerDimension
                where orderLineSummaryTmp.LedgerDimension != 0
        {
            listOrderLineSummary.addEnd(orderLineSummaryTmp.data());
        }

        delete_from orderLineSummaryTmp;

        listEnumerator = listOrderLineSummary.getEnumerator();

        while (listEnumerator.moveNext())
        {
            orderLineSummaryTmp = listEnumerator.current();
            accountingDistribTmpOrderLineSumm_PSN.clear();

            accountingDistribTmpOrderLineSumm_PSN.Ordered = orderLineSummaryTmp.Ordered;
            accountingDistribTmpOrderLineSumm_PSN.Received = orderLineSummaryTmp.Received;
            accountingDistribTmpOrderLineSumm_PSN.Invoiced = orderLineSummaryTmp.Invoiced;
            accountingDistribTmpOrderLineSumm_PSN.InvoiceRemaining = orderLineSummaryTmp.InvoiceRemaining;
            accountingDistribTmpOrderLineSumm_PSN.PendingInvoice = orderLineSummaryTmp.PendingInvoice;

            accountingDistribTmpOrderLineSumm_PSN.TradeLineTmpAmountSummary_PSN = orderLineSummaryTmp.TradeLineTmpAmountSummary_PSN;
            accountingDistribTmpOrderLineSumm_PSN.LedgerDimension = orderLineSummaryTmp.LedgerDimension;

            accountingDistribTmpOrderLineSumm_PSN.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and stores the ordered, receieved, invoiced, pending invoice, and invoice remaining amounts for a purchase order.
    /// </summary>
    /// <param name="_purchId">
    /// The purchase order ID for which the amounts have to be calculated.
    /// </param>
    public void populateAmounts(PurchId _purchId)
    {
        PurchLine purchLine;

        purchId = _purchId;

        if (_purchId)
        {
            super(_purchId);

            while select SourceDocumentLine, LineNumber, ItemId, ProcurementCategory, Name, PurchStatus, InventTransId from purchLine
                where purchLine.PurchId == purchId && purchLine.IsDeleted == NoYes::No
            {
                tradeLineTmpAmountSummary_PSN.clear();
                tradeLineTmpAmountSummary_PSN.SourceDocumentLine = purchLine.SourceDocumentLine;
                tradeLineTmpAmountSummary_PSN.LineNumber = purchLine.LineNumber;
                tradeLineTmpAmountSummary_PSN.ItemId = purchLine.ItemId;
                tradeLineTmpAmountSummary_PSN.ItemName = purchLine.itemName();
                tradeLineTmpAmountSummary_PSN.ProcurementCategory = EcoResCategory::find(purchLine.ProcurementCategory).Name;
                tradeLineTmpAmountSummary_PSN.LineDescription = purchLine.Name;

                tradeLineTmpAmountSummary_PSN.write();

                this.populateLineAmounts(purchLine);

                tradeLineTmpAmountSummary_PSN.write();
            }
        }
        this.groupByLedgerDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateLineAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and stores the ordered, receieved, invoiced, pending invoice, and invoice remaining amounts for purchase order lines.
    /// </summary>
    /// <param name="_purchLine">
    /// The purchase order line ID for which the amounts have to be calculated.
    /// </param>
    private void populateLineAmounts(PurchLine _purchLine)
    {
        #SubledgerJournal

        AccDistLedgerDimAmountList              accDistLedgerDimAmountList;
        AccDistLedgerDimAmountListEnumerator    accDistLedgerDimAmountListEnumerator;
        AccDistLedgerDimAmount                  accDistLedgerDimAmount;
        VendPackingSlipTrans                    vendPackingSlipTrans;
        VendInvoiceInfoLine                     vendInvoiceInfoLine, vendInvoiceInfoLineJoin;
        VendInvoiceInfoTable                    vendInvoiceInfoTable;
        VendInvoiceTrans                        vendInvoiceTrans;
        AccountingDistribution                  accountingDistribution;
        AccountingDistribution                  accountingDistributionInvoiced;
        AccountingDistribution                  accountingDistributionPending;
        Amount                                  totalOrdered;
        Amount                                  totalReceived;
        Amount                                  totalInvoiced;
        Amount                                  totalPendingInvoice;
        Amount                                  totalInvoiceRemaining;
        LedgerDimensionAccount                  ledgerDimensionAccount;
        Set                                     calculatedAccounts = new Set(Types::Int64);

        if (tradeLineTmpAmountSummary_PSN.SourceDocumentLine != 0)
        {
            accDistLedgerDimAmountList = AccDistLedgerDimAmountList::construct();
            SourceDocumentLineProvider::getAccDistLedgerDimAmountList(tradeLineTmpAmountSummary_PSN.SourceDocumentLine, accDistLedgerDimAmountList, true);
            accDistLedgerDimAmountListEnumerator = accDistLedgerDimAmountList.getEnumerator();

            if (accDistLedgerDimAmountList.elements() != 0)
            {
                //
                // Retrieve the total amount received for the line, only need to do this once
                // No need to attempt to exclude cancelling receipt transactions, as they net 0
                //
                select sum(TransactionCurrencyAmount) from accountingDistribution
                    exists join vendPackingSlipTrans
                        where vendPackingSlipTrans.SourceDocumentLine == accountingDistribution.SourceDocumentLine
                            && vendPackingSlipTrans.InventTransId == _purchLine.InventTransId
                            && vendPackingSlipTrans.ValueMST != 0;

                totalReceived = accountingDistribution.TransactionCurrencyAmount;
            }

            while (accDistLedgerDimAmountListEnumerator.moveNext())
            {
                accDistLedgerDimAmount = accDistLedgerDimAmountListEnumerator.current();

                select orderLineSummaryTmp where orderLineSummaryTmp.LedgerDimension == accDistLedgerDimAmount.parmLedgerDimension() &&
                    orderLineSummaryTmp.TradeLineTmpAmountSummary_PSN == tradeLineTmpAmountSummary_PSN.RecId;

                if (orderLineSummaryTmp)
                {
                    orderLineSummaryTmp.LedgerDimension = accDistLedgerDimAmount.parmLedgerDimension();
                    orderLineSummaryTmp.Ordered = accDistLedgerDimAmount.parmTransactionCurrencyAmount();
                    orderLineSummaryTmp.TradeLineTmpAmountSummary_PSN = tradeLineTmpAmountSummary_PSN.RecId;
                    orderLineSummaryTmp.PendingInvoice = 0;
                    orderLineSummaryTmp.Received = 0;
                    orderLineSummaryTmp.Invoiced = 0;

                    while select SourceDocumentLine from vendInvoiceTrans
                        where vendInvoiceTrans.InventTransId == _purchLine.InventTransId
                    {
                        if (ledgerDimensionAccount == 0 || ledgerDimensionAccount != orderLineSummaryTmp.LedgerDimension)
                        {
                            select sum(TransactionCurrencyAmount) from accountingDistributionInvoiced
                                where accountingDistributionInvoiced.SourceDocumentLine  == vendInvoiceTrans.SourceDocumentLine
                                    && (accountingDistributionInvoiced.MonetaryAmount    == MonetaryAmount::ChargeVariance
                                    || accountingDistributionInvoiced.MonetaryAmount     == MonetaryAmount::Charge);
                            orderLineSummaryTmp.Invoiced += accountingDistributionInvoiced.TransactionCurrencyAmount;
                        }
                    }

                    // Calculate the pending invoiced amounts.
                    while select InventTransId, SourceDocumentLine from vendInvoiceInfoLine
                        where vendInvoiceInfoLine.InventTransId == _purchLine.InventTransId
                        exists join RecId from vendInvoiceInfoTable
                        where
                            vendInvoiceInfoTable.ParmId == vendInvoiceInfoLine.ParmId &&
                            vendInvoiceInfoTable.TableRefId == vendInvoiceInfoLine.TableRefId &&
                            (vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Waiting ||
                                vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::ContainErrors)
                    {
                        if (ledgerDimensionAccount == 0 || ledgerDimensionAccount != orderLineSummaryTmp.LedgerDimension)
                        {
                            select sum(TransactionCurrencyAmount) from accountingDistributionPending
                                where accountingDistributionPending.SourceDocumentLine  == vendInvoiceInfoLine.SourceDocumentLine
                                    && (accountingDistributionPending.MonetaryAmount    == MonetaryAmount::ChargeVariance
                                    || accountingDistributionPending.MonetaryAmount     == MonetaryAmount::Charge);
                            orderLineSummaryTmp.PendingInvoice += accountingDistributionPending.TransactionCurrencyAmount;
                        }
                    }

                    if (_purchLine.isInvoiced() || _purchLine.isCanceled())
                    {
                        orderLineSummaryTmp.InvoiceRemaining = 0;
                    }
                    else
                    {
                        orderLineSummaryTmp.InvoiceRemaining = orderLineSummaryTmp.Ordered - orderLineSummaryTmp.Invoiced - orderLineSummaryTmp.PendingInvoice;
                    }

                    ledgerDimensionAccount = orderLineSummaryTmp.LedgerDimension;
                }
                else
                {
                    orderLineSummaryTmp.LedgerDimension = accDistLedgerDimAmount.parmLedgerDimension();
                    orderLineSummaryTmp.Ordered = accDistLedgerDimAmount.parmTransactionCurrencyAmount();
                    orderLineSummaryTmp.TradeLineTmpAmountSummary_PSN = tradeLineTmpAmountSummary_PSN.RecId;

                    // Query Vendor Invoice line distributions for invoiced amounts
                    while select SourceDocumentLine from vendInvoiceTrans
                        where vendInvoiceTrans.InventTransId == _purchLine.InventTransId
                    {
                        if (ledgerDimensionAccount == 0 || ledgerDimensionAccount != orderLineSummaryTmp.LedgerDimension)
                        {
                            orderLineSummaryTmp.Invoiced += SourceDocumentLineProvider::getReferencingDistributedAmount(
                                    vendInvoiceTrans.SourceDocumentLine,
                                    _purchLine.SourceDocumentLine,
                                    orderLineSummaryTmp.LedgerDimension);
                        }
                    }

                    // Calculate the pending invoiced amounts.
                    while select InventTransId, SourceDocumentLine from vendInvoiceInfoLine
                        where vendInvoiceInfoLine.InventTransId == _purchLine.InventTransId
                        exists join RecId from vendInvoiceInfoTable
                        where
                            vendInvoiceInfoTable.ParmId == vendInvoiceInfoLine.ParmId &&
                            vendInvoiceInfoTable.TableRefId == vendInvoiceInfoLine.TableRefId &&
                            (vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Waiting ||
                                vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::ContainErrors)
                    {
                        if (!AccountingDistribution::existSourceDocumentLine(vendInvoiceInfoLine.SourceDocumentLine))
                        {
                            SourceDocumentLineProcessor::submitSourceDocumentLine(SourceDocumentLine::find(vendInvoiceInfoLine.SourceDocumentLine), false, SourceDocumentLineAccountingStatus::FullyDistributed);
                        }

                        if (ledgerDimensionAccount == 0 || ledgerDimensionAccount != orderLineSummaryTmp.LedgerDimension)
                        {
                             orderLineSummaryTmp.PendingInvoice += SourceDocumentLineProvider::getReferencingDistributedAmount(
                                    vendInvoiceInfoLine.SourceDocumentLine,
                                    _purchLine.SourceDocumentLine,
                                    orderLineSummaryTmp.LedgerDimension);
                        }
                    }

                    // Calculate the Remaining Invoice Amount;
                    if (_purchLine.isInvoiced() || _purchLine.isCanceled())
                    {
                        orderLineSummaryTmp.InvoiceRemaining = 0;
                    }
                    else
                    {
                        if (ledgerDimensionAccount == 0 || ledgerDimensionAccount != orderLineSummaryTmp.LedgerDimension)
                        {
                            orderLineSummaryTmp.InvoiceRemaining = orderLineSummaryTmp.Ordered - orderLineSummaryTmp.Invoiced - orderLineSummaryTmp.PendingInvoice;
                        }
                    }

                    ledgerDimensionAccount = orderLineSummaryTmp.LedgerDimension;
                }

                //
                // retrieve the originating accountingdistribution line for the account we are processing
                // to get the allocation factor of the account to determine the amount received
                //
                select firstonly RecId from accountingDistribution
                    order by accountingDistribution.Number asc
                    where accountingDistribution.SourceDocumentLine == tradeLineTmpAmountSummary_PSN.SourceDocumentLine
                        && accountingDistribution.LedgerDimension == orderLineSummaryTmp.LedgerDimension
                        && accountingDistribution.MonetaryAmount == MonetaryAmount::ExtendedPrice;

                if (accountingDistribution.RecId
                    && (!calculatedAccounts.in(orderLineSummaryTmp.LedgerDimension)))
                {
                    calculatedAccounts.add(orderLineSummaryTmp.LedgerDimension);                    
                    orderLineSummaryTmp.Received = round(totalReceived, #defaultRoundingPrecision);
                }

                orderLineSummaryTmp.insert();
                totalInvoiced           += orderLineSummaryTmp.Invoiced;
                totalPendingInvoice     += orderLineSummaryTmp.PendingInvoice;
                totalInvoiceRemaining   += orderLineSummaryTmp.InvoiceRemaining;
                totalOrdered += orderLineSummaryTmp.Ordered;
            }

            tradeLineTmpAmountSummary_PSN.Ordered           = totalOrdered;
            tradeLineTmpAmountSummary_PSN.Received          = totalReceived;
            tradeLineTmpAmountSummary_PSN.Invoiced          = totalInvoiced;
            tradeLineTmpAmountSummary_PSN.PendingInvoice    = totalPendingInvoice;
            tradeLineTmpAmountSummary_PSN.InvoiceRemaining  = totalInvoiceRemaining;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>