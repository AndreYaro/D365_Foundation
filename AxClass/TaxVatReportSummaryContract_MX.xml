<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxVatReportSummaryContract_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data Contract class for TaxVatReportSummary_MX SSRS report
/// </summary>
/// <remarks>
/// This is the Data Contract class for the TaxVatReportSummary_MX SSRS Report.
/// </remarks>
[
    #VATReports_SSRSParameters_MX
    DataContract,
    SysOperationGroup(#DateGroup, "@Mexico:VatReport_DateRange_FieldGroup", '1'),
    SysOperationGroup(#CategoryGroup, "@Mexico:VatReport_Category_FieldGroup", '2')
]
public class TaxVatReportSummaryContract_MX implements SysOperationValidatable
{
    TransDate                       fromDate;
    TransDate                       toDate;
    TaxVatReportCategoryCode_MX     fromCategory;
    TaxVatReportCategoryCode_MX     toCategory;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        fromDate,
        toDate,
        fromCategory,
        toCategory
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter fromCategory.
    /// </summary>
    /// <param name="_fromCategory">
    /// The new value of the datacontract parameter fromCategory; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter fromCategory
    /// </returns>
    [
        DataMember(#FromCategory),
        SysOperationLabel(literalstr("@Mexico:VatReport_From")),
        SysOperationGroupMember(#CategoryGroup),
        SysOperationDisplayOrder('1')
    ]
    public TaxVatReportCategoryCode_MX parmFromCategory(TaxVatReportCategoryCode_MX _fromCategory = fromCategory)
    {
        fromCategory = _fromCategory;
        return fromCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter fromDate.
    /// </summary>
    /// <param name="_fromDate">
    /// The new value of the datacontract parameter fromDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter fromDate
    /// </returns>
    [
        DataMember(#FromDate),
        SysOperationLabel(literalstr("@Mexico:VatReport_From")),
        SysOperationGroupMember(#DateGroup),
        SysOperationDisplayOrder('1')
    ]
    public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter toCategory.
    /// </summary>
    /// <param name="_toCategory">
    /// The new value of the datacontract parameter toCategory; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter toCategory
    /// </returns>
    [
        DataMember(#ToCategory),
        SysOperationLabel(literalstr("@Mexico:VatReport_To")),
        SysOperationGroupMember(#CategoryGroup),
        SysOperationDisplayOrder('2')
    ]
    public TaxVatReportCategoryCode_MX parmToCategory(TaxVatReportCategoryCode_MX _toCategory = toCategory)
    {
        toCategory = _toCategory;
        return toCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter toDate.
    /// </summary>
    /// <param name="_toDate">
    /// The new value of the datacontract parameter toDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter toDate
    /// </returns>
    [
        DataMember(#ToDate),
        SysOperationLabel(literalstr("@Mexico:VatReport_To")),
        SysOperationGroupMember(#DateGroup),
        SysOperationDisplayOrder('2')
    ]
    public TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container  packedClass)
    {
        boolean         ret;
        Integer         version = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                ret = true;
                break;
            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the <c>fromDate</c> and <c>toDate</c> values that are entered by the user are
    ///    correct and the <c>fromCategory</c> and <c>toCategory</c> values that the user selected is correct.
    /// </summary>
    /// <returns>
    ///    true if both the conditions are satisfied; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean ret = true;

        if (!fromDate && !toDate)
        {
            ret = checkFailed("@SYS312566");
        }
        if (ret
            && (fromDate > toDate))
        {
            ret = checkFailed("@SYS312567");
        }
        if (ret
            && (fromDate && !toDate))
        {
            ret = checkFailed("@SYS16982");
        }
        if (ret
            && (!fromDate && toDate))
        {
            ret = checkFailed("@SYS91557");
        }
        if (ret
            && (fromCategory  == '' && toCategory == ''))
        {
            ret = checkFailed("@SYS312568");
        }
        if (ret
            && (fromCategory && toCategory == ''))
        {
            ret = checkFailed("@SYS312569");
        }
        if (ret
            && (fromCategory == '' && toCategory))
        {
            ret = checkFailed("@SYS312570");
        }

        if (ret && !this.validateCategoryRange())
        {
            ret = checkFailed("@SYS312591");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCategoryRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the <c>fromCategory</c> value is larger than the <c>toCategory</c> value when
    ///    running the report.
    /// </summary>
    /// <returns>
    ///    true if the <c>fromCategory</c> value is larger than the <c>toCategory</c> value; otherwise, false.
    /// </returns>
    private boolean validateCategoryRange()
    {
        boolean ok = true;

        if (fromCategory > toCategory)
        {
            ok = false;
        }

        return ok;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>