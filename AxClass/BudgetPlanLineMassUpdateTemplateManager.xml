<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanLineMassUpdateTemplateManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.IO;
using Microsoft.Dynamics.Platform.Integration.Office;
using Microsoft.Dynamics.Platform.Integration.Office.Excel.Export;

/// <summary>
/// Contains methods to manage templates for the budget plan line mass update functionality.
/// </summary>
internal final class BudgetPlanLineMassUpdateTemplateManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateMassUpdateTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a mass update template for the <c>BudgetPlanLayout</c>
    /// </summary>
    /// <param name = "_layout">The record buffer of the <c>BudgetPlanLayout</c> for which the mass update template needs to be generated.</param>
    [Hookable(false)]
    public static void generateMassUpdateTemplate(BudgetPlanLayout _layout)
    {
        if (_layout.UseBudgetPlanLineMassUpdate)
        {
            try
            {
                BudgetPlanLineMassUpdateTemplateManager::refreshDMFImportProject(_layout.RecId);
                BudgetPlanLineMassUpdateTemplateManager::refreshDMFExportProject(_layout.RecId);
            }
            catch
            {
                throw error("@Budget:GenerateMassUpdateDefinitionGroupsFailed");
            }
                
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshDMFImportProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the DMF import project used by the mass import functionality.
    /// </summary>
    /// <param name = "_layoutRecId">The <c>RecId</c> for the budget plan layout to refresh.</param>
    [Hookable(false)]
    public static void refreshDMFImportProject(BudgetPlanLayoutRecId _layoutRecId)
    {
        BudgetPlanLayout layout = BudgetPlanLayout::find(_layoutRecId, true);
        DMFDefinitionGroupName definitionGroupName = strFmt(BudgetPlanningConstants::MassUpdateGroupNameFormat, layout.Name);

        str sourceFileName = strFmt(BudgetPlanningConstants::placeHolder1, strFmt(BudgetPlanningConstants::MassUpdateGroupNameFormat, layout.Name), BudgetPlanningConstants::ExcelExtension);

        System.IO.MemoryStream sourceFileStream = BudgetPlanLineMassUpdateTemplateManager::buildSourceSpreadSheetForLayout(layout.RecId);
        sourceFileStream.Seek(0, System.IO.SeekOrigin::Begin);

        FileUploadTemporaryStorageStrategy fileUploadStrategy = new FileUploadTemporaryStorageStrategy();
        FileUploadTemporaryStorageResult fileUploadResult = fileUploadStrategy.uploadFile(sourceFileStream, sourceFileName);

        DMFEntityBase::addEntityForProcessingV3(
            definitionGroupName,
            definitionGroupName,
            BudgetPlanningConstants::LineActiveViewEntityName,
            BudgetPlanningConstants::Excel,
            fileUploadResult.getFileId(),
            BudgetPlanningConstants::emptyString,
            false,
            NoYes::No,
            strFmt(BudgetPlanningConstants::SheetLookupFormat, BudgetPlanningConstants::SheetName),
            NoYes::No,
            DMFRefreshType::IncrementalPush,
            true,
            NoYes::No);
        
        DMFDefinitionGroup dmfDefinitionGroup = DMFDefinitionGroup::find(definitionGroupName);
        
        layout.DMFDefinitionGroup = dmfDefinitionGroup.RecId;
        
        ttsbegin;
        layout.doUpdate();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshDMFExportProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the DMF export project used by the mass import functionality.
    /// </summary>
    /// <param name = "_layoutRecId">The <c>RecId</c> for the budget plan layout to refresh.</param>
    [Hookable(false)]
    public static void refreshDMFExportProject(BudgetPlanLayoutRecId _layoutRecId)
    {
        BudgetPlanLayout layout = BudgetPlanLayout::find(_layoutRecId, true);
        DMFDefinitionGroupName definitionGroupName = strFmt(BudgetPlanningConstants::MassUpdateExportGroupNameFormat, layout.Name);

        str sourceFileName = strFmt(BudgetPlanningConstants::placeHolder1, strFmt(BudgetPlanningConstants::MassUpdateExportGroupNameFormat, layout.Name), BudgetPlanningConstants::ExcelExtension);

        System.IO.MemoryStream sourceFileStream = BudgetPlanLineMassUpdateTemplateManager::buildSourceSpreadSheetForLayout(layout.RecId);
        sourceFileStream.Seek(0, System.IO.SeekOrigin::Begin);

        FileUploadTemporaryStorageStrategy fileUploadStrategy = new FileUploadTemporaryStorageStrategy();
        FileUploadTemporaryStorageResult fileUploadResult = fileUploadStrategy.uploadFile(sourceFileStream, sourceFileName);

        DMFEntityBase::addEntityForProcessingV3(
            definitionGroupName,
            definitionGroupName,
            BudgetPlanningConstants::LineActiveViewEntityName,
            BudgetPlanningConstants::Excel,
            fileUploadResult.getFileId(),
            BudgetPlanningConstants::emptyString,
            NoYes::No,
            NoYes::Yes,
            strFmt(BudgetPlanningConstants::SheetLookupFormat, BudgetPlanningConstants::SheetName),
            NoYes::No,
            DMFRefreshType::FullPush);

        DMFDefinitionGroup dmfDefinitionGroup = DMFDefinitionGroup::find(definitionGroupName);
        
        layout.DMFExportDefinitionGroup = dmfDefinitionGroup.RecId;
        
        ttsbegin;
        layout.doUpdate();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSourceSpreadSheetForLayout</Name>
				<Source><![CDATA[
    private static System.IO.Stream buildSourceSpreadSheetForLayout(BudgetPlanLayoutRecId _layoutRecId)
    {
        System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();

        using (var package = new OfficeOpenXml.ExcelPackage(memoryStream))
        {
            var worksheets = package.get_Workbook().get_Worksheets();
            var worksheet = worksheets.Add(BudgetPlanningConstants::SheetName);

            BudgetPlanLineMassUpdateTemplateManager::addWorksheetHeadersForLayout(worksheet, _layoutRecId);
            package.Save();
        }

        return memoryStream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWorksheetHeadersForLayout</Name>
				<Source><![CDATA[
    private static void addWorksheetHeadersForLayout(OfficeOpenXml.ExcelWorksheet _worksheet, BudgetPlanLayoutRecId _layoutRecId)
    {
        var cells = _worksheet.get_Cells();

        TableId budgetPlanWorksheetTableId = tableNum(BudgetPlanWorksheetEntity);
        LanguageId currentUserLanguage = currentUserLanguage();
        const int HeaderRow = 1;
        int columnCounter = 1;
        
        DictField field = new DictField(budgetPlanWorksheetTableId, fieldNum(BudgetPlanWorksheetEntity, LineNumber));
        BudgetPlanLineMassUpdateTemplateManager::addWorksheetHeaderColumn(cells.get_Item(HeaderRow, columnCounter), field.label());
        columnCounter++;

        field = new DictField(budgetPlanWorksheetTableId, fieldNum(BudgetPlanWorksheetEntity, DocumentNumber));
        BudgetPlanLineMassUpdateTemplateManager::addWorksheetHeaderColumn(cells.get_Item(HeaderRow, columnCounter), field.label());
        columnCounter++;

        field = new DictField(budgetPlanWorksheetTableId, fieldNum(BudgetPlanWorksheetEntity, Layout));
        BudgetPlanLineMassUpdateTemplateManager::addWorksheetHeaderColumn(cells.get_Item(HeaderRow, columnCounter), field.label());
        columnCounter++;

        BudgetPlanLayoutManager::loadLayoutMapping(_layoutRecId);
        BudgetPlanLayoutMapping layoutMapping;

        while select FieldLabel, DescriptionFieldName, ElementIndex from layoutMapping
            order by ElementIndex
            where layoutMapping.Layout == _layoutRecId
                && layoutMapping.LanguageId == currentUserLanguage
                && layoutMapping.InWorksheet == NoYes::Yes
        {
            BudgetPlanLineMassUpdateTemplateManager::addWorksheetHeaderColumn(cells.get_Item(HeaderRow, columnCounter), layoutMapping.FieldLabel);
            columnCounter++;

            if (layoutMapping.DescriptionFieldName != BudgetPlanningConstants::emptyString)
            {
                BudgetPlanLineMassUpdateTemplateManager::addWorksheetHeaderColumn(cells.get_Item(HeaderRow, columnCounter), BudgetPlanLineMassUpdateTemplateManager::getDescriptionFieldName(layoutMapping.ElementIndex));
                columnCounter++;

                // If Forecast Position, add the column for the worker name after the position description.
                if (layoutMapping.DescriptionFieldName == BudgetPlanningConstants::ForecastPositionDescriptionControlName)
                {
                    BudgetPlanLineMassUpdateTemplateManager::addWorksheetHeaderColumn(cells.get_Item(HeaderRow, columnCounter), "@SYS305602");
                    columnCounter++;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescriptionFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats the description field base on the index.
    /// </summary>
    /// <param name = "_elementIndex">The element index of the description field.</param>
    /// <returns>The description field name based on the index.</returns>
    [Hookable(false)]
    public static str getDescriptionFieldName(int _elementIndex)
    {
        str descriptionName = "@Budget:DescriptionColumnHeading";

        if (_elementIndex > 1)
        {
            descriptionName = strFmt(BudgetPlanningConstants::placeHolder1, descriptionName, _elementIndex);
        }

        return descriptionName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorksheetFieldInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of fields for a given <c>BudgetPlanLayout</c>.
    /// </summary>
    /// <param name = "_worksheetBindingInfo"> The worksheet <c>BindingInfo</c> to attach the <c>FieldInfo</c> list to.</param>
    /// <param name = "_layoutRecId"> The record ID of the <c>BudgetPlanLayout</c> record for which to fetch the list of field names.</param>
    [Hookable(false), SysObsoleteAttribute("Remove any references to this method as it will be removed in a future version.", false, 30\06\2022)]
    public static void setWorksheetFieldInfo(Microsoft.Dynamics.Platform.Integration.Office.BindingInfo _worksheetBindingInfo, BudgetPlanLayoutRecId _layoutRecId)
    {
        BudgetPlanLayoutManager::loadLayoutMapping(_layoutRecId);

        TableId                 budgetPlanLineActiveViewTableId = tableNum(BudgetPlanLineActiveView);
        TableId                 budgetPlanWorksheetTableId = tableNum(BudgetPlanWorksheetEntity);
        BudgetPlanLayoutMapping layoutMapping;
        LanguageId              currentUserLanguage = currentUserLanguage();

        // Add key fields
        FieldInfo worksheetFieldDetails = new FieldInfo();

        DictField field = new DictField(budgetPlanWorksheetTableId, fieldNum(BudgetPlanWorksheetEntity, LineNumber));
        worksheetFieldDetails = BudgetPlanTemplateManager::buildFieldInfo(_worksheetBindingInfo.EntityName, field.name(), field.label(), field.labelDefined());
        _worksheetBindingInfo.get_fields().Add(worksheetFieldDetails);

        field = new DictField(budgetPlanWorksheetTableId, fieldNum(BudgetPlanWorksheetEntity, DocumentNumber));
        worksheetFieldDetails = BudgetPlanTemplateManager::buildFieldInfo(_worksheetBindingInfo.EntityName, field.name(), field.label(), field.labelDefined());
        _worksheetBindingInfo.get_fields().Add(worksheetFieldDetails);

        field = new DictField(budgetPlanWorksheetTableId, fieldNum(BudgetPlanWorksheetEntity, Layout));
        worksheetFieldDetails = BudgetPlanTemplateManager::buildFieldInfo(_worksheetBindingInfo.EntityName, field.name(), field.label(), field.labelDefined());
        _worksheetBindingInfo.get_fields().Add(worksheetFieldDetails);

        while select FieldId, FieldLabel, DescriptionFieldName, IsEditable, ElementIndex from layoutMapping
            order by ElementIndex
            where layoutMapping.Layout       == _layoutRecId
                && layoutMapping.LanguageId  == currentUserLanguage
                && layoutMapping.InWorksheet == NoYes::Yes
        {
            worksheetFieldDetails = BudgetPlanTemplateManager::buildFieldInfo(_worksheetBindingInfo.EntityName, fieldId2Name(budgetPlanLineActiveViewTableId, layoutMapping.FieldId), layoutMapping.FieldLabel, BudgetPlanningConstants::emptyString, !layoutMapping.IsEditable);
            _worksheetBindingInfo.get_fields().Add(worksheetFieldDetails);

            if (layoutMapping.DescriptionFieldName != BudgetPlanningConstants::emptyString)
            {
                worksheetFieldDetails = BudgetPlanTemplateManager::buildFieldInfo(_worksheetBindingInfo.EntityName, layoutMapping.DescriptionFieldName, BudgetPlanLineMassUpdateTemplateManager::getDescriptionFieldName(layoutMapping.ElementIndex), BudgetPlanningConstants::emptyString, true);
                _worksheetBindingInfo.get_fields().Add(worksheetFieldDetails);

                // If Forecast Position, add the column for the worker name after the position description.
                if (layoutMapping.DescriptionFieldName == BudgetPlanningConstants::ForecastPositionDescriptionControlName)
                {
                    worksheetFieldDetails = BudgetPlanTemplateManager::buildFieldInfo(_worksheetBindingInfo.EntityName, BudgetPlanningConstants::ForecastPositionWorkerControlName, "@SYS305602", BudgetPlanningConstants::emptyString, true);
                    _worksheetBindingInfo.get_fields().Add(worksheetFieldDetails);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteMassUpdateDefinitionGroupEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>DMFDefinitionGroupEntity</c> records for a given layout.
    /// </summary>
    /// <param name = "_layout"> The <c>BudgetPLanLayout</c> record. </param>
    internal static void deleteMassUpdateDefinitionGroupEntity(BudgetPlanLayout _layout)
    {
        DMFDefinitionGroupEntity dmfDefintionGroupEntity;
        DMFDefinitionGroup dmfDefintionGroup;

        ttsbegin;

        while select forupdate dmfDefintionGroupEntity
            exists join dmfDefintionGroup
                where (dmfDefintionGroup.RecId == _layout.DMFDefinitionGroup ||
                        dmfDefintionGroup.RecId == _layout.DMFExportDefinitionGroup)
                        && dmfDefintionGroupEntity.DefinitionGroup == dmfDefintionGroup.DefinitionGroupName
                        && dmfDefintionGroupEntity.Entity == BudgetPlanningConstants::LineActiveViewEntityName
        {
            dmfDefintionGroupEntity.delete();
        }

        _layout.selectForUpdate(true);
        _layout.UseBudgetPlanLineMassUpdate = NoYes::No;
        _layout.DMFDefinitionGroup = 0;
        _layout.DMFExportDefinitionGroup = 0;
        _layout.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWorksheetHeaderColumn</Name>
				<Source><![CDATA[
    private static void addWorksheetHeaderColumn(OfficeOpenXml.ExcelRange _cell, str _fieldLabel)
    {
        _cell.set_Value(_fieldLabel);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>