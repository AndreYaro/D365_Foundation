<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TermMainAccountDimensionListProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TermMainAccountDimensionListProvider</c> class is the list provider for the source document
///    term main account dimension for documented monetary amounts.
/// </summary>
[
SourceDocumentEnumExtensionAttribute(enumStr(MainAccountDimensionListProviderType), MainAccountDimensionListProviderType::Term)
]
class TermMainAccountDimensionListProvider extends MainAccountDimensionListProvider
{
    dataAreaId                      paymTermDataAreaId;
    PaymTermId                      paymTermId;
    boolean                         shouldResolveMarkupTypeLedgerAccount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the source document term main account ledger dimension list provider values.
    /// </summary>
    protected void initValues()
    {
        SourceDocumentLineItem sourceDocumentLineItem = accountingRule.parmSourceDocumentLineItem();
        SourceDocument         sourceDocument = accountingRule.parmSourceDocumentLineItem().parmSourceDocument();

        if (sourceDocument is SourceDocumentITerms)
        {
            SourceDocumentITerms iTerm = sourceDocument as SourceDocumentITerms;
            paymTermId = iTerm.parmPaymTermId();
            paymTermDataAreaId = iTerm.parmPaymTermDataAreaId();
        }

        if (sourceDocumentLineItem is SourceDocumentLineItemICharge)
        {
            SourceDocumentLineItemICharge iCharge = sourceDocumentLineItem as SourceDocumentLineItemICharge;
            shouldResolveMarkupTypeLedgerAccount = iCharge.shouldResolveMainAccount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateMainAccountDimensionList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates the main account dimension list.
    /// </summary>
    protected void populateMainAccountDimensionList()
    {
        LedgerDimensionDefaultAccount       ledgerDimensionDefaultAccount;
        container                           cacheResult;

        if (paymTermId && shouldResolveMarkupTypeLedgerAccount)
        {
            cacheResult = LedgerCache::getValue(LedgerCacheScope::TermMainAccountDimensionListProvider, [paymTermDataAreaId, PaymTermId]);

            if (cacheResult == conNull())
            {
                changeCompany(paymTermDataAreaId)
                {
                    ledgerDimensionDefaultAccount = PaymTerm::cashLedgerDimension(paymTermId);
                }
                LedgerCache::insertValue(LedgerCacheScope::TermMainAccountDimensionListProvider, [paymTermDataAreaId, PaymTermId], [ledgerDimensionDefaultAccount]);
            }
            else
            {
                [ledgerDimensionDefaultAccount] = cacheResult;
            }
        }

        this.addToMainAccDimensionList(ledgerDimensionDefaultAccount);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>