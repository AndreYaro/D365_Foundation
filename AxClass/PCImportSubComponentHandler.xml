<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCImportSubComponentHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PCImportSubComponentHandler extends PCImportNodeHandlerWithAttributes
{
    PCSubComponent                  subComponent;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>importData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the references if an old subcomponent with the same name exists.
    /// </summary>
    protected void importData()
    {
        PCImportXmlDocumentHandler root           = this.root();

        this.copyField(fieldStr(PCSubComponent, Name));
        this.copyField(fieldStr(PCSubComponent, SolverName));
        this.copyIntField(fieldStr(PCSubComponent, Type));

        subComponent.ParentComponentClass   = this.parent().recordRecId();
        subComponent.ChildComponentClass    = root.importedComponents().lookup(this.getFieldByName(fieldStr(PCSubComponent, ChildComponentClass)));
        subComponent.insert();

        this.updateSubcomponentReferences();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the attribute paths if needed.
    /// </summary>
    protected void postProcess()
    {
        PCImportComponentHandler parent = this.parent();

        parent.updateAttributePaths(this.node().nextSibling());
    }

]]></Source>
			</Method>
			<Method>
				<Name>record</Name>
				<Source><![CDATA[
    public Common record(boolean _suppressValidation = false)
    {
        return subComponent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSubcomponentReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the references of a subcomponent.
    /// </summary>
    protected void updateSubcomponentReferences()
    {
        PCSubComponent oldSubComponent;

        // UI
        PCComponentControlSubComponent  ComponentControlSubComponent;

        // Instance values
        PCComponentInstanceSubComponent componentInstanceSubComponent;

        PCImportComponentHandler parent = this.parent();

        // update references
        select firstOnly Name, SolverName, ParentComponentClass, RecId from oldSubComponent
            where   oldSubComponent.Name                   == subComponent.Name
            &&      oldSubComponent.SolverName             == subComponent.SolverName
            &&      oldSubComponent.ParentComponentClass   == parent.currentComponentBeingUpdated().RecId;

        if (oldSubComponent.RecId != 0)
        {
            update_recordset componentInstanceSubComponent
            setting subComponent = subComponent.RecId
            where componentInstanceSubComponent.SubComponent == oldSubComponent.RecId;

            update_recordset ComponentControlSubComponent
            setting subcomponent = subComponent.RecId
            where ComponentControlSubComponent.Subcomponent == oldSubComponent.RecId;

            this.moveExistingSubComponentRequirementsFromUnselectedCompanies(oldSubComponent.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveExistingSubComponentRequirementsFromUnselectedCompanies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the existing subcomponent requirements to the new subcomponent.
    /// </summary>
    /// <param name="_oldSubComponentRecId">The record ID of the old subcomponent from which to move the requirements.
    /// </param>
    /// <remarks>
    /// The requirements moved to the new subcomponent are from companies not selected for import, and thus should be preserved. The subcomponent requirements associated 
    /// with PCTemplateComponent tied to a selected legal entities have all been deleted in PCImportComponentHandler.copyExistingTemplateComponentChildrenFromUnselectedCompanies() 
    /// method as the associated PCTemplateComponent was deleted ther (cascade deletion).
    /// </remarks>
    private void moveExistingSubComponentRequirementsFromUnselectedCompanies(PCSubComponentRecId _oldSubComponentRecId)
    {
        PCSubComponentRequirement subComponentRequirement;

        update_recordset subComponentRequirement
            setting SubComponent = subComponent.RecId
            where subComponentRequirement.SubComponent == _oldSubComponentRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCImportSubComponentHandler construct()
    {
        return new PCImportSubComponentHandler();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>