<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WrkCtrCapacitySum</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WrkCtrCapacitySum</c> class sums up capacity reservations for each day.
/// </summary>
public class WrkCtrCapacitySum
{
    boolean                 useCapacityCache;
    boolean                 useBlockRead;
    RecordSortedList        cacheWrkCtrCapacity;
    TmpWrkCtrCapacity       tmpWrkCtrCapacity;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    void delete(WrkCtrId _wrkCtrId,TransDate _transDate)
    {
        tmpWrkCtrCapacity.WrkCtrId    = _wrkCtrId;
        tmpWrkCtrCapacity.TransDate   = _transDate;

        if (useCapacityCache)
        {
            if (cacheWrkCtrCapacity.find(tmpWrkCtrCapacity))
            {
                cacheWrkCtrCapacity.del(tmpWrkCtrCapacity);
                tmpWrkCtrCapacity.clear();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Searches for capacity reservations.
    /// </summary>
    /// <param name="_wrkCtrId">
    ///    The ID of the resource to search for.
    /// </param>
    /// <param name="_transDate">
    ///    The <c>date</c> value to search for capacity reservations.
    /// </param>
    /// <param name="_throwIfError">
    ///    A Boolean value that indicates whether an error should be thrown if no working times exist for the
    ///    day; optional.
    /// </param>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    boolean find(WrkCtrId           _wrkCtrId,
                 TransDate          _transDate,
                 boolean            _throwIfError = true)
    {
        WrkCtrTable                 wrkCtrTable;
        boolean                     insertInCache   = true;

        SchedTime                   fromTime;
        SchedTime                   toTime;
        RealBase                    capacity;
        NumberOf                    numOfWithCap;

        date                        transDate = _transDate;

        WrkCtrTable                 wrkCtrTableResource;
        WrkCtrResourceGroupResource wrkCtrResourceGroupResource;
        WrkCtrResourceGroup         wrkCtrResourceGroup;

        if (tmpWrkCtrCapacity.WrkCtrId   == _wrkCtrId && tmpWrkCtrCapacity.TransDate  == _transDate)
            return true;

        tmpWrkCtrCapacity.WrkCtrId    = _wrkCtrId;
        tmpWrkCtrCapacity.TransDate   = _transDate;

        if (useCapacityCache)
        {
            if (cacheWrkCtrCapacity.find(tmpWrkCtrCapacity))
            {
                return true;
            }
            else
            {
                if (useBlockRead)
                {
                    this.unpack(WrkCtrCapacitySum::findBlock(_wrkCtrId,_transDate,_throwIfError));
                    if (cacheWrkCtrCapacity.find(tmpWrkCtrCapacity))
                        return true;
                }
            }
        }

        wrkCtrTable = WrkCtrTable::find(_wrkCtrId);
        if (wrkCtrTable.IsIndividualResource)
        {
            [tmpWrkCtrCapacity.CapInTotal,
             tmpWrkCtrCapacity.FromTime,
             tmpWrkCtrCapacity.ToTime] = WrkCtrCapacitySum::calcWrkCtrCapacity(wrkCtrTable,_transDate, _throwIfError);

            tmpWrkCtrCapacity.NumOfWithCap  = tmpWrkCtrCapacity.CapInTotal != 0 ? 1 : 0;
        }
        else
        {
            fromTime  = ProdMultiScheduling::maxSeconds();
            toTime    = -1;

            // Loop all resources in the group
            while select validTimeState(transDate) TableId from wrkCtrResourceGroupResource
                join wrkCtrTableResource
                where wrkCtrTableResource.WrkCtrId              == wrkCtrResourceGroupResource.WrkCtrId
                   && wrkCtrTableResource.IsIndividualResource  == NoYes::Yes
                exists join wrkCtrResourceGroup
                where wrkCtrResourceGroup.RecId                 == wrkCtrResourceGroupResource.ResourceGroup
                   && wrkCtrResourceGroup.WrkCtrId              == wrkCtrTable.WrkCtrId
                   && wrkCtrResourceGroup.IsWorkCell            == NoYes::No
            {
                // These value are set to be able to look up the record in the recordSortedList
                tmpWrkCtrCapacity.WrkCtrId    = wrkCtrTableResource.WrkCtrId;
                tmpWrkCtrCapacity.TransDate   = _transDate;

                // Calculate capacity for the resource if this has not already been done
                if (!useCapacityCache || !cacheWrkCtrCapacity.find(tmpWrkCtrCapacity))
                {
                    [tmpWrkCtrCapacity.CapInTotal,
                     tmpWrkCtrCapacity.FromTime,
                     tmpWrkCtrCapacity.ToTime] = WrkCtrCapacitySum::calcWrkCtrCapacity(wrkCtrTableResource, _transDate,_throwIfError);

                    tmpWrkCtrCapacity.NumOfWithCap = tmpWrkCtrCapacity.CapInTotal != 0 ? 1 : 0;
                }

                // Sum up the capacity values in local variables
                capacity       += tmpWrkCtrCapacity.CapInTotal;
                numOfWithCap   += tmpWrkCtrCapacity.NumOfWithCap;

                if (tmpWrkCtrCapacity.FromTime < fromTime)
                {
                    fromTime = tmpWrkCtrCapacity.FromTime;
                }
                if (tmpWrkCtrCapacity.ToTime > toTime)
                {
                    toTime = tmpWrkCtrCapacity.ToTime;
                }
            }

            // Copy values from local variables to buffer
            tmpWrkCtrCapacity.CapInTotal    = capacity;
            tmpWrkCtrCapacity.NumOfWithCap  = numOfWithCap;
            tmpWrkCtrCapacity.FromTime      = fromTime;
            tmpWrkCtrCapacity.ToTime        = toTime;
        }

        tmpWrkCtrCapacity.WrkCtrId    = _wrkCtrId;
        tmpWrkCtrCapacity.TransDate   = _transDate;

        if (useCapacityCache && insertInCache)
            cacheWrkCtrCapacity.ins(tmpWrkCtrCapacity);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute('BPErrorClassNewNotProtected', 'The constructor is invoked directly by the consumers')]
    public void new(boolean _useCapacityCache = false,boolean _useBlockRead = false)
    {
        useCapacityCache = _useCapacityCache;
        useBlockRead     = _useBlockRead;

        if (useCapacityCache)
        {
            cacheWrkCtrCapacity  = new RecordSortedList(tablenum(TmpWrkCtrCapacity));

            cacheWrkCtrCapacity.sortOrder(fieldnum(TmpWrkCtrCapacity,WrkCtrId),fieldnum(TmpWrkCtrCapacity,TransDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        container               con;
        TmpWrkCtrCapacity       packWrkCtrCapacity;

        if (cacheWrkCtrCapacity.first(packWrkCtrCapacity))
        do
        {
            con += [packWrkCtrCapacity];
        } while (cacheWrkCtrCapacity.next(packWrkCtrCapacity));

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Capacity</Name>
				<Source><![CDATA[
    CapacitySec rec_Capacity()
    {
        return tmpWrkCtrCapacity.CapInTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FromTime</Name>
				<Source><![CDATA[
    SchedTime rec_FromTime()
    {
        return tmpWrkCtrCapacity.FromTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_numOfWithCap</Name>
				<Source><![CDATA[
    NumberOf rec_numOfWithCap()
    {
        return tmpWrkCtrCapacity.NumOfWithCap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ToTime</Name>
				<Source><![CDATA[
    SchedTime rec_ToTime()
    {
        return tmpWrkCtrCapacity.ToTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    void unpack(container con)
    {
        TmpWrkCtrCapacity   packWrkCtrCapacity;
        Integer             x;

        for (x=1;x<=conlen(con);x++)
        {
            packWrkCtrCapacity = conpeek(con,x);

            cacheWrkCtrCapacity.ins(packWrkCtrCapacity,true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWrkCtrCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the capacity for a single resource.
    /// </summary>
    /// <param name="_wrkCtrTable">
    ///    The <c>wrkCtrTable</c> record that contains the resource that capacity should be capculated for.
    /// </param>
    /// <param name="_transDate">
    ///    The <c>date</c> value for which to calculate the capacity.
    /// </param>
    /// <param name="_throwIfError">
    ///    A Boolean value that indicates whether an error should be thrown if no working times exist for the
    ///    day; optional.
    /// </param>
    /// <returns>
    ///    A <c>container</c> with the found capacity.
    /// </returns>
    static container calcWrkCtrCapacity(WrkCtrTable          _wrkCtrTable,
                                               TransDate            _transDate,
                                               boolean              _throwIfError = true)
    {
        WorkCalendarDateLine            workCalendarDateLine;

        RealBase                        capacity;
        SchedTime                       fromTime   = ProdMultiScheduling::maxSeconds();
        SchedTime                       toTime     = -1;

        while select workCalendarDateLine
            where workCalendarDateLine.CalendarId       == WorkCalendar::defined(_wrkCtrTable.calendarIdPerDate(_transDate),_transDate,_throwIfError)  &&
                  workCalendarDateLine.TransDate        ==_transDate
        {
            if (workCalendarDateLine.FromTime  < workCalendarDateLine.ToTime)
            {
                fromTime   = workCalendarDateLine.FromTime < fromTime  ? workCalendarDateLine.FromTime : fromTime;
                toTime     = workCalendarDateLine.ToTime   > toTime    ? workCalendarDateLine.ToTime   : toTime;

                capacity += workCalendarDateLine.capacity(_wrkCtrTable.EffectivityPct);
            }
        }

        return [capacity,fromTime,toTime];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBlock</Name>
				<Source><![CDATA[
    static container findBlock(WrkCtrId _wrkCtrId,TransDate _transDate,boolean _throwIfError = true)
    {
        #define.readAhead(12)

        WrkCtrCapacitySum blockCapacitySum = new WrkCtrCapacitySum(true);

        Integer x;

        for (x=0; x <#readAhead; x++)
            blockCapacitySum.find(_wrkCtrId,_transDate+x,_throwIfError);

        return blockCapacitySum.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>plannedCapacity_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the capacity of the resource.
    /// </summary>
    /// <param name="_wrkCtrTable">
    /// The <c>WrkCtrTable</c> record of the resource.
    /// </param>
    /// <param name="_from">
    /// A date to define when the period begins.
    /// </param>
    /// <param name="_to">
    /// A date to define when the period ends.
    /// </param>
    /// <returns>
    /// The total capacity of the resource in hours.
    /// </returns>

    public static Hours plannedCapacity_BR(WrkCtrTable _wrkCtrTable, date _from, date _to)
    {
        WorkCalendarDateLine    workCalendarDateLine;
        date                    baseDate = _from;
        RealBase                capacity;

        while (baseDate <= _to)
        {
            while select workCalendarDateLine
                where   workCalendarDateLine.CalendarId       == WorkCalendar::defined(_wrkCtrTable.calendarIdPerDate(baseDate), baseDate, false)   &&
                        workCalendarDateLine.TransDate        == baseDate                                                                           &&
                        workCalendarDateLine.FromTime < workCalendarDateLine.ToTime
            {
                capacity += workCalendarDateLine.capacity(_wrkCtrTable.EffectivityPct);
            }

            baseDate = baseDate + 1;
        }

        return capacity / 3600;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>