<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ServiceTaxPOTInquiry_Reversal_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is implements the reversal logic used by both Batch an manual transactions.
/// </summary>
class ServiceTaxPOTInquiry_Reversal_IN extends ServiceTaxPOTInquiryBase_IN implements BatchRetryable
{
    #define.CurrentVersion(1)

    #LocalMacro.CurrentList
        period,
        length,
        isBatchMode,
        vendAcc
    #EndMacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQueryForReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the query that filters the correct vendor transactions used for reversal.
    /// </summary>
    /// <param name="_dueDate">
    /// The due date passed in.
    /// </param>
    /// <returns>
    /// Returns the query that filters the correct vendor transactions used for reversal.
    /// </returns>
    public QueryRun buildQueryForReversal(TransDate _dueDate)
    {
        QueryBuildDataSource qBDS = queryRun.query().dataSourceTable(tableNum(VendTrans));

        qBDS.addRange(FieldNum(VendTrans, Invoice)).value(SysQuery::valueNotEmptyString());
        qBDS.addRange(FieldNum(VendTrans, DocumentDate)).value((strfmt('(DocumentDate < %1)', Date2StrXpp(_dueDate))));
        qBDS.addRange(FieldNum(VendTrans, AmountCur)).value(queryvalue('<0'));
        qBDS.addRange(FieldNum(VendTrans, SettleAmountCur)).value(strfmt('(SettleAmountCur > AmountCur)'));
        qBDS.addRange(FieldNum(VendTrans, Approved)).value(queryValue(NoYes::Yes));

        qBDS = qBDS.addDataSource(tableNum(VendTrans_W));
        qBDS.relations(true);
        qBDS.joinMode(JoinMode::InnerJoin);
        qBDS.addRange(fieldNum(VendTrans_W, ServiceTaxPOTStatus_IN)).value(queryValue(ServiceTaxPOTStatus_IN::Original));
        qBDS.addRange(fieldNum(VendTrans_W, BlockTaxReversal_IN)).value(queryValue(NoYes::No));

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if it can executed in a batch.
    /// </summary>
    /// <returns>
    /// Returns true if it can executed in a batch.
    /// </returns>

    public boolean canGoBatch()
    {
        return (isBatchMode == true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCloseDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called in the CloseOk method of a RunBase dialog box to see if it can be closed without error.
    /// </summary>
    /// <param name="_calledFrom">
    /// The Runbase dialog object.
    /// </param>
    /// <returns>
    /// True
    /// </returns>
    /// <exception cref="Exception::Warning">
    /// Throws exception 'Number of units is not filled in'.
    /// </exception>

    public boolean checkCloseDialog(Object _calledFrom = null)
    {
        boolean ret;

        ret = super(_calledFrom);

        if (ret && length <=0)
        {
            throw warning("@SYS4082425");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// The getFromDialog method is used to get the selected value from dialog.
    /// </summary>
    /// <returns>
    /// True if selection is success.
    /// </returns>

    public boolean getFromDialog()
    {
        period = dlgPeriod.value();
        length = dlgLength.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// The new method that will create the object.
    /// </summary>
    void new()
    {
        super();

        queryRun = new QueryRun(querystr(VendorServiceTaxReverse_IN));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// The class variabled used by th RunBase framework are packed in to a container here.
    /// </summary>
    /// <returns>
    /// The container with packed values.
    /// </returns>
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>postReversalVouchers</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method posts the reversal vouchers.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    /// The proportionated taxes available for reverse.
    /// </param>
    /// <param name="_taxTransIN">
    /// The TaxTrans_IN record for original posted taxes.
    /// </param>
    /// <param name="_factor">
    /// The factor used for proportionating taxes.
    /// </param>
    /// <returns>
    /// Returns true upon voucher creation.
    /// </returns>

    public boolean postReversalVouchers(
        TmpTaxWorkTrans _tmpTaxWorkTrans,
        TaxTrans_IN     _taxTransIN,
        Percent         _factor)
    {
        TaxTrans                      taxTrans;
        TaxTrans_IN                   taxTransIN;
        Percent                       factor;
        LedgerDimensionDefaultAccount defaultAccount;

        taxTrans.clear ();
        taxTrans.initFromTaxWorkTrans(taxWorkTrans, _tmpTaxWorkTrans.TaxOrigin);
        taxTrans.insert();
        if (_taxTransIN.RecId)
        {
            factor = taxTrans.TaxOrigin == TaxOrigin::TaxReversed ? _factor / 100 * -1 : _factor/100;
            taxTransIN.clear();
            taxTransIN.initFromTaxTrans_IN(_taxTransIN, factor);
            taxTransIN.RefRecId              = taxTrans.RecId;
            taxTransIN.Voucher               = _tmpTaxWorkTrans.Voucher;
            taxTransIN.Source                = taxTrans.Source;
            taxTransIN.TransDate             = reverseReclaimDate;
            taxTransIN.SourceRecId           = _tmpTaxWorkTrans.SourceRecId;
            taxTransIN.SourceTableId         = _tmpTaxWorkTrans.SourceTableId;
            taxTransIN.InvoiceRefRecID       = vendTrans.RecId;
            taxTransIN.TaxCurrency           = _taxTransIN.TaxCurrency;
            taxTransIN.AbatementPercent      = TaxTrans_IN::findRefRecId(_taxTransIN.RecId).AbatementPercent;
            defaultAccount                   = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(_tmpTaxWorkTrans.LedgerDimension);
            if (taxTrans.TaxOrigin == TaxOrigin::Tax)
            {
                taxTransIN.InterimRecoverableLedgerDimension = defaultAccount;
                taxTransIN.ServiceRecoverableLedgerDimension = 0 ;
                taxTransIN.RecoverableLedgerDimension        = 0;
            }
            else
            {
                taxTransIN.InterimRecoverableLedgerDimension = 0;
                taxTransIN.ServiceRecoverableLedgerDimension = defaultAccount;
                taxTransIN.RecoverableLedgerDimension        = defaultAccount;
            }
            taxTransIN.insert();
        }

        ledgerPostingController = LedgerPostingController::newForLedgerPostingJournal(ledgerVoucher);

        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(ledgerPostingController.getReference(),
                                                                                         LedgerPostingType::Tax,
                                                                                         _tmpTaxWorkTrans.LedgerDimension,
                                                                                         _tmpTaxWorkTrans.SourceCurrencyCode,
                                                                                         taxTrans.SourceTaxAmountCur,
                                                                                         exchangeRateHelper);
        ledgerVoucherTransObject.parmLedgerDetailLevel(LedgerDetailLevel::Detail);
        ledgerVoucher.addTrans(ledgerVoucherTransObject);

        return taxTransIN.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// The core logic of POT reversal process.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Throws error if validation fails.
    /// </exception>
    public void reversal()
    {
        VendInvoiceJour        vendInvoiceJour;
        TaxTrans               taxTrans;
        TaxTrans_W             taxTrans_W;
        TaxTable               taxTableLoc;
        TaxItemGroupHeading    taxItemGroupHeading;
        RefRecId               serviceTaxRecoverableAccount;
        RefRecId               serviceTaxInterimAccount;
        Percent                percent;
        ServiceTaxPOTStatus_IN serviceTaxStatus;
        RefRecId               taxLedgerAccountSetup;
        TaxTrans_IN            taxTransIN;
        boolean                canPost;
        TaxLedgerAccounts_IN   taxLedgerAccountsRev;
        vendTrans = VendTrans::find(vendTransServiceTaxExtension.VendTrans);
        if (vendTrans)
        {
            ttsbegin;

            ledgerVoucher   =  this.initLedgerVoucher();

            vendInvoiceJour = vendInvoiceJour::findFromVendTransVoucher(vendTrans.Invoice,vendTrans.Voucher, vendTrans.TransDate, vendTrans.AccountNum);
            exchangeRateHelper = CurrencyExchangeHelper::newLedger(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId));
            exchangeRateHelper.parmExchangeRate1(vendInvoiceJour.ExchRate);
            exchangeRateHelper.parmExchangeRate2(vendInvoiceJour.ExchRateSecondary);

            if (vendTrans.AmountCur != 0)
            {
                // If a partial settlement available, deduct it fom total invoice.
                percent = vendTrans.SettleAmountCur ? (vendTrans.AmountCur - vendTrans.SettleAmountCur) / vendTrans.AmountCur * 100 : 100;
            }

            serviceTaxStatus = percent < 100 ? ServiceTaxPOTStatus_IN::PartiallyReversed : ServiceTaxPOTStatus_IN::Reversed;
            taxWorkTrans = null;
            while select taxTrans
                where taxTrans.TransDate == vendTrans.TransDate
                   && taxTrans.Voucher   == vendTrans.Voucher
                    join RecId, TaxRegistrationNumberTable_IN, ServiceTaxReverseChargePercentage_IN from taxTrans_W
                        where taxTrans_W.TaxTrans == taxTrans.RecId
                    join * from taxTransIN
                        where taxTransIN.RefRecId == taxTrans.RecId
                           join RecId, ServiceTaxBasis_IN from taxItemGroupHeading
                              where taxItemGroupHeading.TaxItemGroup == taxTrans.TaxItemGroup
                               && taxItemGroupHeading.ServiceTaxBasis_IN == ServiceTaxBasis_IN::POTBasis
                                  join RecId, TaxLedgerAccountGroup_IN, TaxComponentTable_IN from taxTableLoc
                                     where taxTableLoc.TaxCode == taxTrans.TaxCode
                                        && taxTableLoc.TaxType_IN == TaxType_IN::ServiceTax
            {
                if (taxTrans_W.ServiceTaxReverseChargePercentage_IN != 0)
                {
                    select firstonly RecId from taxLedgerAccountsRev
                        where taxLedgerAccountsRev.LedgerDimension == taxTransIN.RecoverableLedgerDimension// Allow only recoverables to reverse.
                            && (taxLedgerAccountsRev.AccountType  == TaxAccountType_IN::ServiceTaxRecoverableAccount);
                    if (taxLedgerAccountsRev.RecId == 0)
                    {
                        continue;
                    }
                }
                if (LedgerJournalTable::find(vendTrans.JournalNum).JournalType == LedgerJournalType::Approval)
                {
                    if (!(vendTrans.JournalNum == taxTrans.JournalNum
                         && taxTrans.TaxOrigin == TaxOrigin::Tax))
                    {
                        continue;
                    }
                }
                taxLedgerAccountSetup = TaxLedgerAccountSetup_IN::findByTaxAccountGroup(taxTableLoc.TaxLedgerAccountGroup_IN, TaxAccountCode_IN::Table, taxTrans_W.TaxRegistrationNumberTable_IN).RecId;
                if (!taxLedgerAccountSetup)
                {
                    taxLedgerAccountSetup = TaxLedgerAccountSetup_IN::findByTaxAccountGroup(taxTableLoc.TaxLedgerAccountGroup_IN, TaxAccountCode_IN::All).RecId;
                }

                serviceTaxRecoverableAccount = TaxLedgerAccounts_IN::getAccountNum(taxLedgerAccountSetup, TaxAccountType_IN::ServiceTaxRecoverableAccount, taxTableLoc.TaxComponentTable_IN);
                serviceTaxInterimAccount = TaxLedgerAccounts_IN::getAccountNum(taxLedgerAccountSetup, TaxAccountType_IN::ServiceTaxInterimRecoverableAccount, taxTableLoc.TaxComponentTable_IN);
                if ( !serviceTaxRecoverableAccount || !serviceTaxInterimAccount)
                {
                    checkFailed(strFmt("@GLS5614", taxTrans_W.TaxRegistrationNumberTable_IN));
                    throw error("@SYS21533");
                }
                taxWorkTrans.clear();
                headerRecId                         = vendTrans.RecId;
                invoiceRecId                        = vendInvoiceJour.RecId;
                taxWorkTrans.HeadingTableId         = vendTrans.TableId;
                taxWorkTrans.HeadingRecId           = vendTrans.RecId;
                taxWorkTrans.SourceTableId          = taxTrans.SourceTableId;
                taxWorkTrans.SourceRecId            = taxTrans.SourceRecId;
                taxWorkTrans.InvoiceRecId           = vendInvoiceJour.RecId;
                taxWorkTrans.TaxCode                = taxTrans.TaxCode;
                taxWorkTrans.TaxGroup               = taxTrans.TaxGroup;
                taxWorkTrans.TaxItemGroup           = taxTrans.TaxItemGroup;
                taxWorkTrans.Source                 = TaxModuleType::Voucher;
                taxWorkTrans.Voucher                = ledgerVoucher.lastVoucher();
                taxWorkTrans.TransDate              = reverseReclaimDate;
                taxWorkTrans.CalculationDate        = reverseReclaimDate;
                taxWorkTrans.InventTransId          = taxTrans.InventTransId;
                taxWorkTrans.TaxDirection           = taxTrans.TaxDirection;
                taxWorkTrans.CurrencyCode           = taxTrans.CurrencyCode;
                taxWorkTrans.LedgerDimension        = LedgerDimensionFacade::serviceCreateLedgerDimension(serviceTaxRecoverableAccount, vendTrans.DefaultDimension);
                taxWorkTrans.SourceCurrencyCode     = taxTrans.CurrencyCode;
                taxWorkTrans.TaxAutogenerated       = taxTrans.TaxAutogenerated;
                taxWorkTrans.euroTriangulation      = taxTrans.euroTriangulation;
                // Recoverable
                taxWorkTrans.TaxAmount               = CurrencyExchangeHelper::amount(taxTrans.TaxAmount * percent * -1 / 100);
                taxWorkTrans.TaxBaseAmount           = CurrencyExchangeHelper::amount(taxTrans.TaxBaseAmount * percent * -1 / 100);
                taxWorkTrans.TaxInCostPrice          = CurrencyExchangeHelper::amount(taxTrans.TaxInCostPrice * percent * -1 / 100);
                taxWorkTrans.TaxInCostPriceMST       = CurrencyExchangeHelper::amount(taxTrans.TaxInCostPriceMST * percent * -1 / 100);
                taxWorkTrans.TaxAmountCur            = CurrencyExchangeHelper::amount(taxTrans.TaxAmountCur * percent * -1 / 100);
                taxWorkTrans.TaxBaseAmountCur        = CurrencyExchangeHelper::amount(taxTrans.TaxBaseAmountCur * percent * -1 / 100);
                taxWorkTrans.SourceRegulateAmountCur = CurrencyExchangeHelper::amount(taxTrans.SourceRegulateAmountCur * percent * -1 / 100);
                taxWorkTrans.TaxInCostPrice          = CurrencyExchangeHelper::amount(taxTrans.TaxInCostPrice * percent * -1 / 100);
                taxWorkTrans.TaxInCostPriceRegulated = CurrencyExchangeHelper::amount(taxTrans.TaxInCostPriceRegulated * percent * -1 / 100);
                taxWorkTrans.TaxInCostPriceMST       = CurrencyExchangeHelper::amount(taxTrans.TaxInCostPriceMST * percent * -1 / 100);
                taxWorkTrans.TaxInCostPriceCur       = CurrencyExchangeHelper::amount(taxTrans.TaxInCostPriceCur * percent * -1 / 100);
                taxWorkTrans.SourceBaseAmountCur     = CurrencyExchangeHelper::amount(taxTrans.SourceBaseAmountCur * percent * -1 / 100, taxTrans.SourceCurrencyCode);
                taxWorkTrans.SourceTaxAmountCur      = CurrencyExchangeHelper::amount(taxTrans.SourceTaxAmountCur * percent * -1 / 100, taxTrans.SourceCurrencyCode);
                taxWorkTrans.TaxReports              = NoYes::Yes;
                taxWorkTrans.ExemptTax               = NoYes::No;
                taxWorkTrans.TaxOrigin               = TaxOrigin::TaxReversed;
                taxWorkTrans.Txt                     = enum2str(TaxOrigin::TaxReversed);
                taxWorkTrans.insert();
                canPost = this.postReversalVouchers(taxWorkTrans, taxTransIN, percent);
                // Interim Recoverable
                taxWorkTrans.TaxCode                    =  taxWorkTrans.TaxCode;
                taxWorkTrans.TaxBaseAmount              = -taxWorkTrans.TaxBaseAmount;
                taxWorkTrans.TaxAmount                  = -taxWorkTrans.TaxAmount;
                taxWorkTrans.TaxInCostPrice             = -taxWorkTrans.TaxInCostPrice;
                taxWorkTrans.TaxInCostPriceMST          = -taxWorkTrans.TaxInCostPriceMST;
                taxWorkTrans.TaxBaseAmountCur           = -taxWorkTrans.TaxBaseAmountCur;
                taxWorkTrans.TaxAmountCur               = -taxWorkTrans.TaxAmountCur;
                taxWorkTrans.TaxInCostPriceCur          = -taxWorkTrans.TaxInCostPriceCur;
                taxWorkTrans.SourceBaseAmountCur        = -taxWorkTrans.SourceBaseAmountCur;
                taxWorkTrans.SourceTaxAmountCur         = -taxWorkTrans.SourceTaxAmountCur;
                taxWorkTrans.SourceRegulateAmountCur    = -taxWorkTrans.SourceRegulateAmountCur;
                taxWorkTrans.LedgerDimension            = LedgerDimensionFacade::serviceCreateLedgerDimension(serviceTaxInterimAccount, vendTrans.DefaultDimension);
                taxWorkTrans.TaxOrigin                  = TaxOrigin::Tax;
                taxWorkTrans.Txt                        = enum2str(TaxOrigin::Tax);
                taxWorkTrans.AbatementAmount_IN         = -taxWorkTrans.AbatementAmount_IN;
                taxWorkTrans.insert();
                canPost = this.postReversalVouchers(taxWorkTrans, taxTransIN, percent);
            }
            if (canPost)
            {
                ledgerVoucher.end();// Only POT shud update
                this.updateServiceTaxStatusReversed(serviceTaxStatus);
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseSelectedLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// The user selected transaction for reversal are available in tmpVendTransServiceTaxExtLinkTable buffer.
    /// Reversal logic is fired here for each such transaction.
    /// </summary>
    public void reverseSelectedLines()
    {
        while select tmpVendTransServiceTaxExtLinkTable
        {
            vendTransServiceTaxExtension = VendTrans_W::find(tmpVendTransServiceTaxExtLinkTable.VendTransServiceTaxExtension, true);
            this.reversal();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// The business logic here starts the reversal functionality, in a TTS loop, and also handles the exceptions thrown if any.
    /// </summary>
    /// <exception cref="Exception::UpdateConflictNotRecovered">
    /// Handles the UpdateConflictNotRecovered exception thrown, if encountered.
    /// </exception>
    /// <exception cref="Exception::UpdateConflict">
    /// Handles the UpdateConflict exception thrown, if encountered.
    /// </exception>

    public void run()
    {
        #OCCRetryCount
        TransDate                   dueDate;
        super();

        dueDate = ServiceTaxPOTInquiry_Reversal_IN::calcDueDate(period, length);
        queryRun = this.buildQueryForReversal(dueDate);

        try
        {
            ttsBegin;
            if (isBatchMode)
            {
                while (queryRun.next())
                {
                    if (queryRun.changed(tableNum(VendTrans)))
                    {
                        vendTrans = queryRun.get(tableNum(VendTrans));
                        vendTransServiceTaxExtension = VendTrans_W::findByVendTrans(vendTrans.RecId);
                        vendTransServiceTaxExtension.selectForUpdate(true);
                        this.reversal();
                    }
                }
            }
            ttsCommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// The class variabled used by th RunBase framework are unpacked from the container here between tiers.
    /// </summary>
    /// <param name="packedClass">
    /// The packed values.
    /// </param>
    /// <returns>
    /// Returns true if unpacked and variables are initialized succesfully.
    /// </returns>
    public boolean unpack(container packedClass)
    {
        Version     version = RunBase::getVersion(packedClass);
        Container   queryCon;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,queryCon] = packedClass;
                if (queryCon && conlen(queryCon) == 1  )
                {
                    queryrun = new QueryRun(queryCon);
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateServiceTaxStatusReversed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the POT status after reversal
    /// </summary>
    /// <param name="_serviceTaxStatus">
    /// The service tax status passed in.
    /// </param>
    public void updateServiceTaxStatusReversed(ServiceTaxPOTStatus_IN _serviceTaxStatus)
    {
        if (vendTransServiceTaxExtension.RecId != 0)
        {
            vendTransServiceTaxExtension.ServiceTaxPOTStatus_IN    = _serviceTaxStatus;
            vendTransServiceTaxExtension.TaxReversedBaseAmount_IN  = (vendTrans.AmountCur - vendTrans.SettleAmountCur);
            vendTransServiceTaxExtension.TaxReclaimedBaseAmount_IN = 0;
            vendTransServiceTaxExtension.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method calculates the due date.
    /// </summary>
    /// <param name="period">
    /// The period passed in
    /// </param>
    /// <param name="length">
    /// The period length(day/month etc)
    /// </param>
    /// <returns>
    /// The due date.
    /// </returns>
    public static TransDate calcDueDate(
        PeriodUnit period,
        Periods length)
    {
        TransDate dueDate;

        switch (period)
        {
            case PeriodUnit::Day:
                dueDate =  DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) + (length * -1);
                break;
            case PeriodUnit::Month:
                if (DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) == dateEndMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())))
                    dueDate = dateEndMth(dateMthFwd(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), (length * -1)));
                else
                    dueDate = dateMthFwd(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), (length * -1));
                break;
            case PeriodUnit::Year:
                dueDate = dateMthFwd(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), (length * -12));
                break;
        }
        return dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// The description of the dialog.
    /// </summary>
    /// <returns>
    /// The description of the dialog.
    /// </returns>

    public static ClassDescription description()
    {
        return "@SYS4082387";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if can run the inquiry in new session or not.
    /// </summary>
    /// <returns>
    /// True if can run the inquiry in new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>