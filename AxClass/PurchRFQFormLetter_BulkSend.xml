<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQFormLetter_BulkSend</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchRFQFormLetter_BulkSend extends PurchRFQFormLetter_Send implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>chooseLinesServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the data for <c>PurchRFQFormletterParmDataBulkSend</c> instance.
    /// </summary>
    /// <param name="_append">
    /// Append parm data; true if append, otherwise create new
    /// </param>
    /// A container with a packed version of the <c>FormletterParmDataOutputContract</c> object.
    /// </returns>
    protected container chooseLinesServer(boolean _append = false)
    {
        PurchRFQFormletterParmDataBulkSend purchRFQFormletterParmData = PurchRFQFormletterParmDataBulkSend::construct();
        
        purchRFQFormletterParmData.parmAllowEmptyParmTable(true);
        purchRFQFormletterParmData.parmMultiForm(purchRFQFormLetterContract.parmMultiForm());
        purchRFQFormletterParmData.parmTransDate(purchRFQFormLetterContract.parmTransDate());

        purchRFQFormletterParmData.parmShowQueryForm(purchRFQFormLetterContract.parmShowQueryForm());
        purchRFQFormletterParmData.parmParmUpdateSysLastValue(purchRFQFormLetterContract.parmParmUpdate());
        purchRFQFormletterParmData.parmDatasourceRecordsPacked(purchRFQFormLetterContract.parmDataSourceRecordMapPacked());
        purchRFQFormletterParmData.parmCreateFromLines(false);
        purchRFQFormletterParmData.parmSourceTable(purchRFQFormLetterContract.parmSourceTable());
        purchRFQFormletterParmData.parmParmUpdate(purchRFQFormLetterContract.parmParmUpdate() as PurchRFQParmUpdate);
        purchRFQFormletterParmData.parmCallerParmId(purchRFQFormLetterContract.parmCallerFormLetterParmId());
        purchRFQFormletterParmData.parmVersioningStrategy(FormLetterParmDataVersioning::newVersioningUpdateType(VersioningUpdateType::Initial, purchRFQFormletterParmData));
        
        purchRFQFormletterParmData.init();
        purchRFQFormletterParmData.createData(_append);

        return purchRFQFormletterParmData.getOutputContractPacked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchRFQFormLetter_BulkSend construct(
        IdentifierName _className  = classStr(FormletterService),
        IdentifierName _methodName = methodStr(FormletterService, postRequestForQuoteSend),
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        PurchRFQFormLetter_BulkSend formLetter = new PurchRFQFormLetter_BulkSend(_className, _methodName, _executionMode);
        formLetter.init();
        return formLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQUpdateType</Name>
				<Source><![CDATA[
    PurchRFQUpdateType purchRFQUpdateType()
    {
        return PurchRFQUpdateType::BulkSent;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>