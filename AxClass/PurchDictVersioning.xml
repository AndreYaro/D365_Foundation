<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchDictVersioning</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchDictVersioning</c> abstract class is the dictionary base class for handling the set of fields and versioning classes for versioning purchase documents.
/// </summary>
abstract class PurchDictVersioning
{
    private List    versioningFieldSets;
    private Set     versionedDictFields;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>versionedDictFieldsEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an enumerator to retrieve <c>SysDictField</c> dictionary objects for the table maps used to define the versioned sets of fields.
    /// </summary>
    /// <returns>
    /// The <c>Enumerator</c> object.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public Enumerator versionedDictFieldsEnumerator()
    {
        if (!versionedDictFields)
        {
            versionedDictFields = this.buildVersionedDictFieldSet();
        }

        return versionedDictFields.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>versionedFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a table map field ID from a table map defining a versioned set of fields to a table field ID on a versioned table.
    /// </summary>
    /// <param name = "_versionedDictField">
    /// A <c>SysDictField</c> object referencing a field on a table map used to define a versioned set of fields.
    /// </param>
    /// <param name = "_versionedTableId">
    /// A table ID where the converted field ID exists.
    /// </param>
    /// <returns>
    /// The converted field ID.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public FieldId versionedFieldId(SysDictField _versionedDictField, TableId _versionedTableId)
    {
        return SysDictField::findMappedFieldId(_versionedDictField.tableid() , _versionedDictField.id(), _versionedTableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>versioningFieldSetsEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an enumerator to retrieve field set objects associated with the table maps used to define the versioned sets of fields.
    /// </summary>
    /// <returns>
    /// The <c>Enumerator</c> object.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public Enumerator versioningFieldSetsEnumerator()
    {
        if (!versioningFieldSets)
        {
            versioningFieldSets = this.buildVersioningFieldSets();
        }

        return versioningFieldSets.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>versioningFieldSetInterfaceId</Name>
				<Source><![CDATA[
    abstract protected ClassId versioningFieldSetInterfaceId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildVersioningFieldSets</Name>
				<Source><![CDATA[
    private List buildVersioningFieldSets()
    {
        List versioningFieldSetsList = new List(Types::Class);
    
        SysDictClass purchLineVersioningFieldSetDictClass = new SysDictClass(this.versioningFieldSetInterfaceId());

        Enumerator derivedClassIdEnumerator = purchLineVersioningFieldSetDictClass.implementedBy(false).getEnumerator();

        while (derivedClassIdEnumerator.moveNext())
        {
            ClassId derivedClassId = derivedClassIdEnumerator.current();

            versioningFieldSetsList.addEnd(new DictClass(derivedClassId).makeObject());
        }

        return versioningFieldSetsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildVersionedDictFieldSet</Name>
				<Source><![CDATA[
    private Set buildVersionedDictFieldSet()
    {
        Set versionedDictFieldSet = new Set(Types::Class);

        Enumerator enumerator = this.versioningFieldSetsEnumerator();

        while (enumerator.moveNext())
        {
            PurchIDictVersioningFieldSet versionFieldSet = enumerator.current() as PurchIDictVersioningFieldSet;

            SysDictTable versionedMapDictTable = new SysDictTable(versionfieldset.fieldSetTableMapId());
            SetEnumerator versionedFieldsEnumerator = versionedMapDictTable.fields(false, true, false).getEnumerator();

            while (versionedFieldsEnumerator.moveNext())
            {
                SysDictField versionedDictField = versionedFieldsEnumerator.current();

                if (versionedDictField.isSystem())
                {
                    continue;
                }

                versionedDictFieldSet.add(versionedDictField);
            }
        }

        return versionedDictFieldSet;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>