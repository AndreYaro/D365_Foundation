<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationSalesQuotationTableDataRetrieval</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationSalesQuotationTableDataRetrieval</c> class retrieves data from <c>SalesQuotationTable</c>, etc.
/// </summary>
[TaxIntegrationDataRetrieval(tableStr(SalesQuotationTable))]
public class TaxIntegrationSalesQuotationTableDataRetrieval
    extends TaxIntegrationAbstractDataRetrievalTemplate
{
    protected SalesQuotationTable salesQuotationTable;
    protected SalesQuotationLine salesQuotationLine;

    protected CustTable custTable;
    protected CustTable custTableInvoice;

    protected InventDim inventDim;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the document.
    /// </summary>
    /// <returns>The query for the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentQueryObject()
    {
        if (TaxIntegrationConstructWithSourceRecordFlight::instance().isEnabled() && document.getLocalRecord())
        {
            salesQuotationTable = document.getLocalRecord();
            return SysDaQueryObjectBuilder::from(this.custTable)
                .where(this.custTable, fieldStr(CustTable, AccountNum))
                    .isEqualToLiteral(this.salesQuotationTable.CustAccount)
                .outerJoin(this.custTableInvoice) // alternate key
                    .where(this.custTableInvoice, fieldStr(CustTable, AccountNum))
                        .isEqualToLiteral(this.salesQuotationTable.InvoiceAccount)
                .toSysDaQueryObject();
        }
        else
        {
            return SysDaQueryObjectBuilder::from(this.salesQuotationTable)
                .where(this.salesQuotationTable, fieldStr(SalesQuotationTable, RecId))
                    .isEqualToLiteral(this.document.getLocalRecId())
                .outerJoin(this.custTable) // alternate key
                    .where(this.custTable, fieldStr(CustTable, AccountNum))
                        .isEqualTo(this.salesQuotationTable, fieldStr(salesQuotationTable, CustAccount))
                .outerJoin(this.custTableInvoice) // alternate key
                    .where(this.custTableInvoice, fieldStr(CustTable, AccountNum))
                        .isEqualTo(this.salesQuotationTable, fieldStr(SalesQuotationTable, InvoiceAccount))
                .toSysDaQueryObject();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the lines of the document.
    /// </summary>
    /// <returns>The query for the lines of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getLineQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.salesQuotationLine)
            .where(this.salesQuotationLine, fieldStr(SalesQuotationLine, QuotationId))
                .isEqualToLiteral(this.salesQuotationTable.QuotationId)
            .outerJoin(this.inventDim) // alternate key
                .where(this.inventDim, fieldStr(InventDim, inventDimId))
                    .isEqualTo(this.salesQuotationLine, fieldStr(SalesQuotationLine, InventDimId))
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of the document.
    /// </summary>
    /// <returns>The query for the charges of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentChargeQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.markupTransOfDocument)
            .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransTableId))
                .isEqualToLiteral(this.salesQuotationTable.TableId)
            .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransRecId))
                .isEqualToLiteral(this.salesQuotationTable.RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of each line.
    /// </summary>
    /// <returns>The query for the charges of each line.</returns>
    [Replaceable]
    protected SysDaQueryObject getLineChargeQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.markupTransOfLine)
            .where(this.markupTransOfLine, fieldStr(MarkupTrans, TransTableId))
                .isEqualToLiteral(this.salesQuotationLine.TableId)
            .where(this.markupTransOfLine, fieldStr(MarkupTrans, TransRecId))
                .isEqualToLiteral(this.salesQuotationLine.RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a line of the document.
    /// </summary>
    /// <returns>The constructed line of the document.</returns>
    protected TaxIntegrationLineObject constructLine()
    {
        return TaxIntegrationLineObject::constructOnDocument(
            this.salesQuotationLine.TableId,
            this.salesQuotationLine.RecId,
            this.document);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document.
    /// </summary>
    protected void copyToDocument()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentByDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies defaults to the document.
    /// </summary>
    protected void copyToDocumentByDefault()
    {
        super();

        document.setDirection(TaxIntegrationDirection::Sales);
        document.setInvoiceId('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentFromHeaderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document from <c>SalesQuotationTable</c>.
    /// </summary>
    protected void copyToDocumentFromHeaderTable()
    {
        super();

        this.copyToDocumentFromInventStorageDimMap(document, this.salesQuotationTable);

        document.setIncludingTax(this.salesQuotationTable.InclTax);
        document.setOrderAccount(this.salesQuotationTable.CustAccount);
        document.setOrderAccountGroup(this.custTable.CustGroup);
        document.setInvoiceAccount(this.salesQuotationTable.InvoiceAccount);
        document.setInvoiceAccountGroup(this.custTableInvoice.CustGroup);
        document.setTransactionCurrencyCode(this.salesQuotationTable.CurrencyCode);
        document.setAccountingCurrencyFixedExchangeRate(this.salesQuotationTable.FixedExchRate);
        document.setReportingCurrencyFixedExchangeRate(this.salesQuotationTable.ReportingCurrencyFixedExchRate);
        document.setDeliveryTerm(this.salesQuotationTable.DlvTerm);
        document.setListCode(this.salesQuotationTable.Listcode);

        if (isTaxIntegrationEnabledForTaxSolutionProvider)
        {
            document.setReceiptDateRequested(this.salesQuotationTable.ReceiptDateRequested);
            document.setShippingDateRequested(this.salesQuotationTable.ShippingDateRequested);
            document.setCreatedDateTime(this.salesQuotationTable.CreatedDateTime);
        }
        this.copyToDocumentFromVATNum(
            this.salesQuotationTable.VATNum,
            this.salesQuotationTable.VATNumTableType,
            this.salesQuotationTable.VATNumRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document's address.
    /// </summary>
    protected void copyAddressToDocument()
    {
        super();

        LogisticsPostalAddress shipmentOriginLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromInventoryLocationOrSiteOrCompanyInformation(
            this.salesQuotationTable.InventLocationId,
            this.salesQuotationTable.InventSiteId,
            CompanyInfo::find(),
            LogisticsLocationRoleType::Delivery);
        LogisticsPostalAddress shipmentDestinationLogisticsPostalAddress = this.salesQuotationTable.deliveryAddress();

        this.copyToDocumentFromShipmentAddressWithCountryRegionType(
            shipmentOriginLogisticsPostalAddress,
            shipmentDestinationLogisticsPostalAddress);

        LogisticsPostalAddress invoiceOriginLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromCompanyInformation(
            CompanyInfo::find(),
            LogisticsLocationRoleType::Invoice);
        LogisticsPostalAddress invoiceDestinationLogisticsPostalAddress =TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromCustomer(
            this.custTableInvoice,
            LogisticsLocationRoleType::Invoice);

        this.copyToDocumentFromInvoiceAddressWithCountryRegionType(
            invoiceOriginLogisticsPostalAddress,
            invoiceDestinationLogisticsPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToLine(TaxIntegrationLineObject _line)
    {
        super(_line);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineFromLineTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document from <c>SalesQuotationLine</c>, <c>MCRSalesQuotationLineDropShipment</c>.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToLineFromLineTable(TaxIntegrationLineObject _line)
    {
        super(_line);

        this.copyToLineFromSalesPurchJournalLine(_line, this.salesQuotationLine);
        this.copyToLineFromInventDim(_line, this.inventDim);
        this.copyToLineFromInventTable(_line, this.salesQuotationLine.inventTable());

        _line.setProductVariant(this.salesQuotationLine.RetailVariantId);
        _line.setIntrastatCommodityId(this.salesQuotationLine.IntrastatCommodity);
        if (_line.getIntrastatCommodityId())
        {
            EcoResCategory ecoResCategory = EcoResCategory::find(_line.getIntrastatCommodityId());
            _line.setIntrastatCommodityCode(EcoResCategory.Code);
        }

        // no _line.setDirectDelivery
        _line.setDeliveryTerm(this.salesQuotationLine.DlvTerm);
        _line.setDeliveryDate(this.salesQuotationLine.dlvDate(document.getInvoiceDate()));

        // no _line.setLedgerDimension
        // no _line.setOperationLedgerDimension
        _line.setProjectId(this.salesQuotationLine.projId());
        _line.setProjectCategory(this.salesQuotationLine.ProjCategoryId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyQuantityAndTransactionAmountToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document's quatity and amount.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyQuantityAndTransactionAmountToLine(TaxIntegrationLineObject _line)
    {
        super(_line);

        if (this.salesQuotationLine.RemainSalesFinancial * this.salesQuotationLine.RemainSalesPhysical < 0)
        {
            _line.setQuantity(this.salesQuotationLine.RemainSalesFinancial);
        }
        else
        {
            _line.setQuantity(this.salesQuotationLine.RemainSalesPhysical + this.salesQuotationLine.RemainSalesFinancial);
        }

        _line.setLineAmount(PriceDisc::price2Amount(
            this.salesQuotationLine.SalesPrice,
            this.salesQuotationLine.PriceUnit,
            PriceDisc::discAmount(
                document.getTaxIntegrationSetting().getDiscountParameter(),
                this.salesQuotationLine.LineDisc,
                this.salesQuotationLine.MultiLnDisc),
            _line.getQuantity(),
            this.salesQuotationLine.SalesQty,
            this.salesQuotationLine.SalesMarkup,
            PriceDisc::discPercent(
                document.getTaxIntegrationSetting().getDiscountParameter(),
                this.salesQuotationLine.LinePercent,
                this.salesQuotationLine.MultiLnPercent),
            this.salesQuotationLine.CurrencyCode,
            this.salesQuotationLine.LineAmount));
        _line.setTransactionAmount(_line.getLineAmount());
        _line.setCostAmount(this.salesQuotationLine.SalesQty * this.getCostPrice());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document's address.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyAddressToLine(TaxIntegrationLineObject _line)
    {
        super(_line);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCopyAddressToLineWithCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should copy address to line with cache or not.
    /// Override this method to return true to leverage cache for better performance.
    /// </summary>
    /// <returns>true if copy with cache; otherwise, false.</returns>
    protected boolean shouldCopyAddressToLineWithCache()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipmentOriginAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets shipment origin address.
    /// </summary>
    /// <returns>The <c>LogisticsPostalAddress</c>.</returns>
    /// <remarks>
    /// When updating this method, check getShipmentOriginAddressCacheKey method to make sure the cache key was aligned with the change.
    /// </remarks>
    protected LogisticsPostalAddress getShipmentOriginAddress()
    {
        return TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromInventoryDimensionOrCompanyInformation(
            this.inventDim,
            CompanyInfo::find(),
            LogisticsLocationRoleType::Delivery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipmentOriginAddressCacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets shipment origin address cache key.
    /// </summary>
    /// <returns>The cache key.</returns>
    protected str getShipmentOriginAddressCacheKey()
    {
        return this.inventDim.InventLocationId + TaxIntegrationTaxServiceConstants::CacheKeyDelimiter + this.inventDim.InventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipmentDestinationAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets shipment destination address.
    /// </summary>
    /// <returns>The <c>LogisticsPostalAddress</c>.</returns>
    /// <remarks>
    /// When updating this method, check getShipmentDestinationAddressCacheKey method to make sure the cache key was aligned with the change.
    /// </remarks>
    protected LogisticsPostalAddress getShipmentDestinationAddress()
    {
        return this.salesQuotationLine.deliveryAddress();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipmentDestinationAddressCacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets shipment destination address cache key.
    /// </summary>
    /// <returns>The cache key.</returns>
    protected str getShipmentDestinationAddressCacheKey()
    {
        return int642Str(this.salesQuotationLine.DeliveryPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineFromHeaderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document from <c>SalesQuotationTable</c>.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToLineFromHeaderTable(TaxIntegrationLineObject _line)
    {
        super(_line);

        if (this.salesQuotationTable.DiscPercent)
        {
            _line.setTransactionAmount(_line.getTransactionAmount() * (100 - this.salesQuotationTable.DiscPercent) / 100);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the document.
    /// </summary>
    /// <param name = "_charge">The current charge of the document.</param>
    protected void copyToDocumentCharge(TaxIntegrationLineObject _charge)
    {
        super(_charge);
        this.copyToDocumentChargeFromDocumentChargeTable(_charge);
        this.copyToDocumentChargeFromHeaderTable(_charge);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentChargeFromDocumentChargeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the document from <c>MarkupTrans</c>.
    /// </summary>
    /// <param name = "_charge">The current charge of the document.</param>
    protected void copyToDocumentChargeFromDocumentChargeTable(TaxIntegrationLineObject _charge)
    {
        this.copyToChargeFromChargeTable(_charge, this.markupTransOfDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentChargeFromHeaderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the document from <c>SalesQuotationTable</c>.
    /// </summary>
    /// <param name = "_charge">The current charge of the document.</param>
    protected void copyToDocumentChargeFromHeaderTable(TaxIntegrationLineObject _charge)
    {
        _charge.setLedgerDimension(this.salesQuotationTable.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the current line.
    /// </summary>
    /// <param name = "_charge">The current charge of the current line.</param>
    protected void copyToLineCharge(TaxIntegrationLineObject _charge)
    {
        super(_charge);
        this.copyToLineChargeFromLineChargeTable(_charge);
        this.copyToLineChargeFromLineTable(_charge);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineChargeFromLineChargeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the current line from <c>MarkupTrans</c>.
    /// </summary>
    /// <param name = "_charge">The current charge of the current line.</param>
    protected void copyToLineChargeFromLineChargeTable(TaxIntegrationLineObject _charge)
    {
        this.copyToChargeFromChargeTable(_charge, this.markupTransOfLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineChargeFromLineTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the current line from <c>SalesQuotationLine</c>.
    /// </summary>
    /// <param name = "_charge">The current charge of the current line.</param>
    protected void copyToLineChargeFromLineTable(TaxIntegrationLineObject _charge)
    {
        _charge.setInventoryTransactionId(this.salesQuotationLine.InventTransId);
        _charge.setLedgerDimension(this.salesQuotationLine.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToChargeFromChargeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the currenct charge from <c>MarkupTable</c>.
    /// </summary>
    /// <param name = "_charge">The currenct charge.</param>
    /// <param name = "_markupTrans">The record of <c>MarkupTrans</c>.</param>
    protected void copyToChargeFromChargeTable(TaxIntegrationLineObject _charge, MarkupTrans _markupTrans)
    {
        MarkupTable markupTable = _markupTrans.markupTable();

        switch (markupTable.VendType)
        {
            case MarkupType::LedgerAccount :
                _charge.setOperationLedgerDimension(markupTable.parmVendorLedgerDimension());
                break;

            case MarkupType::CustVend :
                _charge.setOperationLedgerDimension(CustLedgerAccounts::summaryLedgerDimension(SalesQuotationTable.InvoiceAccount, SalesQuotationTable.PostingProfile));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cost price.
    /// </summary>
    /// <returns>The cost price.</returns>
    [Replaceable]
    protected CostPrice getCostPrice()
    {
        return this.salesQuotationLine.CostPrice;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>