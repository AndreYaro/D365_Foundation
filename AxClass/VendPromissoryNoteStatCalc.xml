<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendPromissoryNoteStatCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
class VendPromissoryNoteStatCalc
{
    TmpPromissoryNoteStatistics tmpVendPromissoryNoteStatistics;
    TmpPromissoryNoteStatistics tmpVendPromissoryNoteStatHistory;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcClosedDocuments</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calcClosedDocuments()
    {
        VendPromissoryNoteJour vendPromissoryNoteJour;
        VendPromissoryNoteTrans vendPromissoryNoteTrans;
        VendTrans vendTrans;
        VendTrans vendTrans2;
        BankRemittanceFilesVend bankRemittanceFilesVend;
        AmountMST settleAmountMST;
        AmountMST amountMST;

        tmpVendPromissoryNoteStatistics.clear();
        tmpVendPromissoryNoteStatistics.VendPromissoryNoteStatistics = VendPromissoryNoteStatistics::ClosedDocuments;

        select  count(RecId) from vendPromissoryNoteJour
            where vendPromissoryNoteJour.Status == CustVendNegInstStatus::Honored
            exists join vendTrans
                where vendTrans.PromissoryNoteID == vendPromissoryNoteJour.PromissoryNoteId
                    && vendTrans.BankRemittanceFileId
            exists join bankRemittanceFilesVend
                where bankRemittanceFilesVend.FileId == vendTrans.BankRemittanceFileId
                    && bankRemittanceFilesVend.Closed == NoYes::Yes;

        select count (RecId), sum(AmountMST), sum(SettleAmountMST) from vendTrans
            where vendTrans.PromissoryNoteStatus == CustVendNegInstStatus::Honored
                && !vendTrans.PromissoryNoteID
            exists join vendTrans2
                where vendTrans2.OffsetRecid == vendTrans.RecId
            exists join bankRemittanceFilesVend
                where bankRemittanceFilesVend.FileId == vendTrans2.BankRemittanceFileId
                    && bankRemittanceFilesVend.Closed == NoYes::Yes;

        amountMST = vendTrans.AmountMST;
        settleAmountMST  = vendTrans.AmountMST - vendTrans.SettleAmountMST;
        tmpVendPromissoryNoteStatistics.Number = any2int(vendPromissoryNoteJour.RecId + vendTrans.RecId);

        if (vendPromissoryNoteJour.RecId)
        {
            select sum(AmountMST),sum(SettleAmountMST) from vendTrans
                where vendTrans.PromissoryNoteStatus == CustVendNegInstStatus::Honored
                exists join vendPromissoryNoteJour
                    where   vendPromissoryNoteJour.PromissoryNoteId == vendTrans.PromissoryNoteID
                        && vendPromissoryNoteJour.PromissoryNoteSeqNum == vendTrans.PromissoryNoteSeqNum
                        && vendPromissoryNoteJour.Status == CustVendNegInstStatus::Honored
                exists join vendPromissoryNoteTrans
                    where vendPromissoryNoteTrans.PromissoryNoteId == vendTrans.PromissoryNoteID
                        && vendPromissoryNoteTrans.SeqNum == vendTrans.PromissoryNoteSeqNum
                        && vendPromissoryNoteTrans.Status == CustVendNegInstStatus::Remitted
                exists join vendTrans2
                    where vendTrans2.PromissoryNoteID == vendPromissoryNoteTrans.PromissoryNoteId
                        && vendTrans2.PromissoryNoteSeqNum == vendPromissoryNoteTrans.SeqNum
                        && vendTrans2.PromissoryNoteStatus == vendPromissoryNoteTrans.Status
                exists join bankRemittanceFilesVend
                    where bankRemittanceFilesVend.FileId == vendTrans2.BankRemittanceFileId
                        && bankRemittanceFilesVend.BankAccountId == vendPromissoryNoteTrans.RemittedtoBankAccountId
                        && bankRemittanceFilesVend.Closed == NoYes::Yes;

            amountMST += vendTrans.AmountMST;
            settleAmountMST += vendTrans.AmountMST - vendTrans.SettleAmountMST;
        }

        tmpVendPromissoryNoteStatistics.AmountMST = amountMST;
        tmpVendPromissoryNoteStatistics.RemaningAmount = settleAmountMST;

        tmpVendPromissoryNoteStatistics.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDocumentsInRemittance</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calcDocumentsInRemittance()
    {
        VendPromissoryNoteJour vendPromissoryNoteJour;
        VendTrans vendTrans;
        VendTransOpen vendTransOpen;
        SpecTrans specTrans;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;
        AmountMST settleAmountMST;
        AmountMST amountMST;

        tmpVendPromissoryNoteStatistics.clear();
        tmpVendPromissoryNoteStatistics.VendPromissoryNoteStatistics = VendPromissoryNoteStatistics::DocumentsInRemittance;

        // When a Promissory Note (PN) is created, it rolls all cross-company invoices that
        // are settled into one PN VendTrans/Open record that exists in the same company as the
        // payment. As a result, the SpecTrans record never needs to go cross-company in order
        // to generate the correct results. So, all queries or calculations below are "safe" since
        // they all happen in the context of a single company.

        select count(RecId) from vendPromissoryNoteJour
            where vendPromissoryNoteJour.Status == CustVendNegInstStatus::Drawn
                || vendPromissoryNoteJour.Status == CustVendNegInstStatus::Redrawn
            exists join vendTrans
                where vendTrans.PromissoryNoteID == vendPromissoryNoteJour.PromissoryNoteId
            join vendTransOpen
                where vendTransOpen.RefRecId == vendTrans.RecId
            join specTrans
                where specTrans.RefTableId == vendTransOpen.TableId
                    && specTrans.RefRecId == vendTransOpen.RecId
                    && specTrans.RefCompany == vendTransOpen.dataAreaId
            join ledgerJournalTrans
                where ledgerJournalTrans.RecId == specTrans.SpecRecId
                    && ledgerJournalTrans.TableId == specTrans.SpecTableId
                    && ledgerJournalTrans.dataAreaId == specTrans.SpecCompany
            join ledgerJournalTable
                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                    && ledgerJournalTable.JournalType == LedgerJournalType::VendPaymRemittance;

        select count(RecId), sum(AmountMST), sum(SettleAmountMST) from vendTrans
            where vendTrans.PromissoryNoteStatus == CustVendNegInstStatus::Invoiced
            exists join vendTransOpen
                where vendTransOpen.RefRecId == vendTrans.RecId
            join specTrans
                where specTrans.RefTableId == vendTransOpen.TableId
                    && specTrans.RefRecId == vendTransOpen.RecId
                    && specTrans.RefCompany == vendTransOpen.dataAreaId
            join ledgerJournalTrans
                where ledgerJournalTrans.RecId == specTrans.SpecRecId
                    && ledgerJournalTrans.TableId == specTrans.SpecTableId
                    && ledgerJournalTrans.dataAreaId == specTrans.SpecCompany
            join ledgerJournalTable
                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                    && ledgerJournalTable.JournalType == LedgerJournalType::VendPaymRemittance;

        amountMST = vendTrans.AmountMST;
        settleAmountMST = vendTrans.AmountMST - vendTrans.SettleAmountMST;
        tmpVendPromissoryNoteStatistics.Number = any2int(vendPromissoryNoteJour.RecId + vendTrans.RecId);

        if (vendPromissoryNoteJour.RecId)
        {
            select sum(AmountMST),sum(SettleAmountMST) from vendTrans
                exists join vendPromissoryNoteJour
                    where vendPromissoryNoteJour.PromissoryNoteId == vendTrans.PromissoryNoteID
                        && (vendPromissoryNoteJour.Status == CustVendNegInstStatus::Drawn
                        || vendPromissoryNoteJour.Status == CustVendNegInstStatus::Redrawn)
                exists join vendTransOpen
                    where vendTransOpen.AccountNum == vendTrans.AccountNum
                        && vendTransOpen.RefRecId == vendTrans.RecId
                exists join specTrans
                    where specTrans.RefTableId == vendTransOpen.TableId
                        && specTrans.RefRecId == vendTransOpen.RecId
                        && specTrans.RefCompany == vendTransOpen.dataAreaId
                exists join ledgerJournalTrans
                    where ledgerJournalTrans.RecId == specTrans.SpecRecId
                        && ledgerJournalTrans.TableId == specTrans.SpecTableId
                        && ledgerJournalTrans.dataAreaId == specTrans.SpecCompany
                exists join ledgerJournalTable
                    where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                        && ledgerJournalTable.JournalType == LedgerJournalType::VendPaymRemittance;

            amountMST           += vendTrans.AmountMST;
            settleAmountMST     += vendTrans.AmountMST - vendTrans.SettleAmountMST;
        }

        tmpVendPromissoryNoteStatistics.AmountMST = amountMST;
        tmpVendPromissoryNoteStatistics.RemaningAmount = settleAmountMST;

        tmpVendPromissoryNoteStatistics.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDrawnDocuments</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calcDrawnDocuments()
    {
        VendPromissoryNoteJour vendPromissoryNoteJour;
        VendTrans vendTrans;
        VendTransOpen vendTransOpen;
        SpecTrans specTrans;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;

        tmpVendPromissoryNoteStatistics.clear();
        tmpVendPromissoryNoteStatistics.VendPromissoryNoteStatistics = VendPromissoryNoteStatistics::DrawnDocuments;

        // When a Promissory Note (PN) is created, it rolls all cross-company invoices that
        // are settled into one PN VendTrans/Open record that exists in the same company as the
        // payment. As a result, the SpecTrans record never needs to go cross-company in order
        // to generate the correct results. So, all queries or calculations below are "safe" since
        // they all happen in the context of a single company.

        select count(RecId) from vendPromissoryNoteJour
            where vendPromissoryNoteJour.Status == CustVendNegInstStatus::Drawn
            notexists join vendTrans
                where vendTrans.PromissoryNoteID == vendPromissoryNoteJour.PromissoryNoteId
            join vendTransOpen
                where vendTransOpen.RefRecId == vendTrans.RecId
            join specTrans
                where specTrans.RefTableId  == vendTransOpen.TableId
                    && specTrans.RefRecId == vendTransOpen.RecId
                    && specTrans.RefCompany == vendTransOpen.dataAreaId
            join ledgerJournalTrans
                where ledgerJournalTrans.RecId == specTrans.SpecRecId
                    && ledgerJournalTrans.TableId == specTrans.SpecTableId
                    && ledgerJournalTrans.dataAreaId == specTrans.SpecCompany
            join ledgerJournalTable
                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                    && ledgerJournalTable.JournalType == LedgerJournalType::VendPaymRemittance;

        tmpVendPromissoryNoteStatistics.Number = any2int(vendPromissoryNoteJour.RecId);

        if (vendPromissoryNoteJour.RecId)
        {
            select sum(AmountMST),sum(SettleAmountMST) from vendTrans
                exists join vendPromissoryNoteJour
                    where vendPromissoryNoteJour.PromissoryNoteId == vendTrans.PromissoryNoteID
                        && vendPromissoryNoteJour.Status == CustVendNegInstStatus::Drawn
                exists join vendTransOpen
                    where   vendTransOpen.AccountNum == vendTrans.AccountNum
                        && vendTransOpen.RefRecId == vendTrans.RecId
                notexists join specTrans
                    where specTrans.RefTableId== vendTransOpen.TableId
                        && specTrans.RefRecId == vendTransOpen.RecId
                        && specTrans.RefCompany == vendTransOpen.dataAreaId
                 exists join ledgerJournalTrans
                    where ledgerJournalTrans.RecId == specTrans.SpecRecId
                        && ledgerJournalTrans.TableId == specTrans.SpecTableId
                        && ledgerJournalTrans.dataAreaId == specTrans.SpecCompany
                 exists join ledgerJournalTable
                    where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                        && ledgerJournalTable.JournalType == LedgerJournalType::VendPaymRemittance;

            tmpVendPromissoryNoteStatistics.AmountMST = vendTrans.AmountMST;
            tmpVendPromissoryNoteStatistics.RemaningAmount = vendTrans.AmountMST - vendTrans.SettleAmountMST;
        }

        tmpVendPromissoryNoteStatistics.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcHistoryOfRedrawnDocuments</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calcHistoryOfRedrawnDocuments()
    {
        VendPromissoryNoteTrans vendPromissoryNoteTrans;
        VendTrans vendTrans;

        tmpVendPromissoryNoteStatHistory.clear();
        tmpVendPromissoryNoteStatHistory.VendPromissoryNoteStatistics = VendPromissoryNoteStatistics::HistoryOfRedrawnDocuments;

        select count(RecId) from vendPromissoryNoteTrans
            where vendPromissoryNoteTrans.Status == CustVendNegInstStatus::Redrawn;

        tmpVendPromissoryNoteStatHistory.Number = any2int(vendPromissoryNoteTrans.RecId);

        if (vendPromissoryNoteTrans.RecId)
        {
            select sum(AmountMST), sum(SettleAmountMST) from vendTrans
                where vendTrans.AmountMST < 0
                exists join vendPromissoryNoteTrans
                    where vendPromissoryNoteTrans.PromissoryNoteId == vendTrans.PromissoryNoteID
                        && vendPromissoryNoteTrans.Voucher == vendTrans.Voucher
                        && vendPromissoryNoteTrans.Status == CustVendNegInstStatus::Redrawn;

            tmpVendPromissoryNoteStatHistory.AmountMST = vendTrans.AmountMST;
            tmpVendPromissoryNoteStatHistory.RemaningAmount = vendTrans.AmountMST - vendTrans.SettleAmountMST;
        }

        tmpVendPromissoryNoteStatHistory.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcHonoredDocuments</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calcHonoredDocuments()
    {
        VendPromissoryNoteJour vendPromissoryNoteJour;
        VendPromissoryNoteJour vendPromissoryNoteJour2;
        VendPromissoryNoteTrans vendPromissoryNoteTrans;
        VendPromissoryNoteTrans vendPromissoryNoteTrans2;
        VendTrans vendTrans;
        VendTrans vendTrans2;
        BankRemittanceFilesVend bankRemittanceFilesVend;
        AmountMST settleAmountMST;
        AmountMST amountMST;

        tmpVendPromissoryNoteStatistics.clear();
        tmpVendPromissoryNoteStatistics.VendPromissoryNoteStatistics = VendPromissoryNoteStatistics::HonoredDocuments;

        select count(RecId) from vendPromissoryNoteJour
            where vendPromissoryNoteJour.Status == CustVendNegInstStatus::Honored
            exists join vendPromissoryNoteTrans
                where vendPromissoryNoteTrans.PromissoryNoteId == vendPromissoryNoteJour.PromissoryNoteId
                    && vendPromissoryNoteTrans.Status == vendPromissoryNoteJour.Status
            notexists join vendTrans
                where vendTrans.PromissoryNoteID == vendPromissoryNoteJour.PromissoryNoteId
                    && vendTrans.BankRemittanceFileId
            exists join bankRemittanceFilesVend
                where bankRemittanceFilesVend.FileId == vendTrans.BankRemittanceFileId
                    && bankRemittanceFilesVend.Closed == NoYes::Yes;

        select count (RecId), sum(AmountMST), sum(SettleAmountMST) from vendTrans
            where vendTrans.PromissoryNoteStatus == CustVendNegInstStatus::Honored
                && !vendTrans.PromissoryNoteID
            exists join vendTrans2
                where vendTrans2.OffsetRecid == vendTrans.RecId
            notexists join bankRemittanceFilesVend
                where bankRemittanceFilesVend.FileId == vendTrans2.BankRemittanceFileId
                    && bankRemittanceFilesVend.Closed == NoYes::Yes;

        amountMST = vendTrans.AmountMST;
        settleAmountMST = vendTrans.AmountMST - vendTrans.SettleAmountMST;
        tmpVendPromissoryNoteStatistics.Number = any2int(vendPromissoryNoteJour.RecId + vendTrans.RecId);

        if (vendPromissoryNoteJour.RecId)
        {
            select sum(AmountMST), sum(SettleAmountMST) from    vendTrans
                where vendTrans.PromissoryNoteStatus == CustVendNegInstStatus::Honored
                exists join vendPromissoryNoteJour
                    where   vendPromissoryNoteJour.PromissoryNoteId == vendTrans.PromissoryNoteID
                        && vendPromissoryNoteJour.PromissoryNoteSeqNum == vendTrans.PromissoryNoteSeqNum
                        && vendPromissoryNoteJour.Status == CustVendNegInstStatus::Honored
                exists join vendPromissoryNoteTrans
                    where vendPromissoryNoteTrans.PromissoryNoteId == vendPromissoryNoteJour.PromissoryNoteId
                        && vendPromissoryNoteTrans.SeqNum == vendTrans.PromissoryNoteSeqNum
                        && vendPromissoryNoteTrans.Status == vendPromissoryNoteJour.Status
                notexists join  vendPromissoryNoteJour2
                    where vendPromissoryNoteJour2.PromissoryNoteId == vendTrans.PromissoryNoteID
                        && vendPromissoryNoteJour2.PromissoryNoteSeqNum == vendTrans.PromissoryNoteSeqNum
                        && vendPromissoryNoteJour2.Status == CustVendNegInstStatus::Honored
                exists join vendPromissoryNoteTrans2
                    where vendPromissoryNoteTrans2.PromissoryNoteId == vendTrans.PromissoryNoteID
                        && vendPromissoryNoteTrans2.SeqNum == vendTrans.PromissoryNoteSeqNum
                        && vendPromissoryNoteTrans2.Status == CustVendNegInstStatus::Remitted
                exists join vendTrans2
                    where vendTrans2.PromissoryNoteID  == vendPromissoryNoteTrans2.PromissoryNoteId
                        && vendTrans2.PromissoryNoteSeqNum== vendPromissoryNoteTrans2.SeqNum
                        && vendTrans2.PromissoryNoteStatus== vendPromissoryNoteTrans2.Status
                exists join bankRemittanceFilesVend
                    where bankRemittanceFilesVend.FileId == vendTrans2.BankRemittanceFileId
                        && bankRemittanceFilesVend.BankAccountId == vendPromissoryNoteTrans2.RemittedtoBankAccountId
                        && bankRemittanceFilesVend.Closed   == NoYes::Yes;

            amountMST           += vendTrans.AmountMST;
            settleAmountMST     += vendTrans.AmountMST - vendTrans.SettleAmountMST;
        }

        tmpVendPromissoryNoteStatistics.AmountMST = amountMST;
        tmpVendPromissoryNoteStatistics.RemaningAmount = settleAmountMST;

        tmpVendPromissoryNoteStatistics.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRedrawnDocuments</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calcRedrawnDocuments()
    {
        VendPromissoryNoteJour vendPromissoryNoteJour;
        VendTrans vendTrans;
        VendTransOpen vendTransOpen;
        SpecTrans specTrans;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;

        tmpVendPromissoryNoteStatistics.clear();
        tmpVendPromissoryNoteStatistics.VendPromissoryNoteStatistics = VendPromissoryNoteStatistics::RedrawnDocuments;

        // When a Promissory Note (PN) is created, it rolls all cross-company invoices that
        // are settled into one PN VendTrans/Open record that exists in the same company as the
        // payment. As a result, the SpecTrans record never needs to go cross-company in order
        // to generate the correct results. So, all queries or calculations below are "safe" since
        // they all happen in the context of a single company.

        select count(RecId) from vendPromissoryNoteJour
            where vendPromissoryNoteJour.Status == CustVendNegInstStatus::Redrawn
            notexists join vendTrans
                where vendTrans.PromissoryNoteID  == vendPromissoryNoteJour.PromissoryNoteId
            join vendTransOpen
                where vendTransOpen.AccountNum    == vendTrans.AccountNum
                    && vendTransOpen.RefRecId      == vendTrans.RecId
            join specTrans
                where specTrans.RefTableId        == vendTransOpen.TableId
                    && specTrans.RefRecId          == vendTransOpen.RecId
                    && specTrans.RefCompany        == vendTransOpen.dataAreaId
            join ledgerJournalTrans
                where ledgerJournalTrans.RecId == specTrans.SpecRecId
                    && ledgerJournalTrans.TableId == specTrans.SpecTableId
                    && ledgerJournalTrans.dataAreaId == specTrans.SpecCompany
            join ledgerJournalTable
                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                    && ledgerJournalTable.JournalType == LedgerJournalType::VendPaymRemittance;

        tmpVendPromissoryNoteStatistics.Number = any2int(vendPromissoryNoteJour.RecId);

        if (vendPromissoryNoteJour.RecId)
        {
            select sum(AmountMST),sum(SettleAmountMST) from  vendTrans
                exists join vendPromissoryNoteJour
                    where vendPromissoryNoteJour.PromissoryNoteId == vendTrans.PromissoryNoteID
                        && vendPromissoryNoteJour.Status == CustVendNegInstStatus::Redrawn
                exists join vendTransOpen
                    where vendTransOpen.AccountNum    == vendTrans.AccountNum
                        && vendTransOpen.RefRecId      == vendTrans.RecId
                notexists join  specTrans
                    where specTrans.RefTableId== vendTransOpen.TableId
                        && specTrans.RefRecId  == vendTransOpen.RecId
                        && specTrans.RefCompany == vendTransOpen.dataAreaId
                 exists join ledgerJournalTrans
                     where ledgerJournalTrans.RecId == specTrans.SpecRecId
                        && ledgerJournalTrans.TableId == specTrans.SpecTableId
                        && ledgerJournalTrans.dataAreaId == specTrans.SpecCompany
                 exists join ledgerJournalTable
                    where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                        && ledgerJournalTable.JournalType == LedgerJournalType::VendPaymRemittance;

            tmpVendPromissoryNoteStatistics.AmountMST       = vendTrans.AmountMST;
            tmpVendPromissoryNoteStatistics.RemaningAmount  = vendTrans.AmountMST - vendTrans.SettleAmountMST;
        }

        tmpVendPromissoryNoteStatistics.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRemittedDocuments</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calcRemittedDocuments()
    {
        VendPromissoryNoteJour vendPromissoryNoteJour;
        VendTrans vendTrans;
        VendTrans vendTrans2;
        VendTransOpen vendTransOpen;
        AmountMST settleAmountMST;
        AmountMST amountMST;

        tmpVendPromissoryNoteStatistics.clear();
        tmpVendPromissoryNoteStatistics.VendPromissoryNoteStatistics = VendPromissoryNoteStatistics::RemittedDocuments;

        select count(RecId) from vendPromissoryNoteJour
            where vendPromissoryNoteJour.Status == CustVendNegInstStatus::Remitted;

        select count (RecId), sum(AmountMST), sum(SettleAmountMST) from vendTrans
            where vendTrans.PromissoryNoteStatus == CustVendNegInstStatus::InvoiceRemitted
                && vendTrans.AmountMST < vendTrans.SettleAmountMST
                && vendTrans.AmountMST < 0;

        amountMST = vendTrans.AmountMST;
        settleAmountMST = vendTrans.AmountMST - vendTrans.SettleAmountMST;
        tmpVendPromissoryNoteStatistics.Number = any2int(vendPromissoryNoteJour.RecId + vendTrans.RecId);

        if (vendPromissoryNoteJour.RecId)
        {
            while select AmountMST, SettleAmountMST, PromissoryNoteID, PromissoryNoteSeqNum from vendTrans
                exists join vendPromissoryNoteJour
                    where vendPromissoryNoteJour.PromissoryNoteId == vendTrans.PromissoryNoteID
                        && vendPromissoryNoteJour.Status == CustVendNegInstStatus::Remitted
                exists join vendTransOpen
                    where vendTransOpen.RefRecId == vendTrans.RecId
            {
                select sum(AmountMST) from vendTrans2
                    where vendTrans2.PromissoryNoteID == vendTrans.PromissoryNoteID
                        && vendTrans2.PromissoryNoteSeqNum == vendTrans.PromissoryNoteSeqNum
                        && (vendTrans2.PromissoryNoteStatus == CustVendNegInstStatus::Drawn
                        || vendTrans2.PromissoryNoteStatus == CustVendNegInstStatus::Redrawn)
                        && vendTrans2.AmountMST < 0;

                  settleAmountMST += vendTrans.AmountMST - vendTrans.SettleAmountMST;
                  amountMST += vendTrans2.AmountMST;
            }
        }

        tmpVendPromissoryNoteStatistics.AmountMST = amountMST;
        tmpVendPromissoryNoteStatistics.RemaningAmount = settleAmountMST;

        tmpVendPromissoryNoteStatistics.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryClosedDocuments</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    VendTrans queryClosedDocuments()
    {
        VendTrans vendTrans;
        VendTrans vendTrans2;
        VendPromissoryNoteJour vendPromissoryNoteJour;
        VendPromissoryNoteTrans vendPromissoryNoteTrans;
        BankRemittanceFilesVend bankRemittanceFilesVend;
        VendTrans tmpVendTrans;

        tmpVendTrans.setTmp();
        vendTrans.recordLevelSecurity(true);
        vendPromissoryNoteJour.recordLevelSecurity(true);
        vendPromissoryNoteTrans.recordLevelSecurity(true);
        vendTrans2.recordLevelSecurity(true);
        bankRemittanceFilesVend.recordLevelSecurity(true);

        while select  vendTrans
            where vendTrans.PromissoryNoteStatus == CustVendNegInstStatus::Honored
            exists join vendPromissoryNoteJour
                where vendPromissoryNoteJour.PromissoryNoteId == vendTrans.PromissoryNoteID
                    && vendPromissoryNoteJour.PromissoryNoteSeqNum == vendTrans.PromissoryNoteSeqNum
                    && vendPromissoryNoteJour.Status == CustVendNegInstStatus::Honored
            exists join vendPromissoryNoteTrans
                where vendPromissoryNoteTrans.PromissoryNoteId  == vendTrans.PromissoryNoteID
                    && vendPromissoryNoteTrans.SeqNum == vendTrans.PromissoryNoteSeqNum
                    && vendPromissoryNoteTrans.Status == CustVendNegInstStatus::Remitted
            exists join vendTrans2
                where vendTrans2.PromissoryNoteID == vendPromissoryNoteTrans.PromissoryNoteId
                    && vendTrans2.PromissoryNoteSeqNum == vendPromissoryNoteTrans.SeqNum
                    && vendTrans2.PromissoryNoteStatus == vendPromissoryNoteTrans.Status
            exists join bankRemittanceFilesVend
                where  bankRemittanceFilesVend.FileId == vendTrans2.BankRemittanceFileId
                    && bankRemittanceFilesVend.BankAccountId == vendPromissoryNoteTrans.RemittedtoBankAccountId
                    && bankRemittanceFilesVend.Closed        == NoYes::Yes
        {
            tmpVendTrans.data(vendTrans);
            tmpVendTrans.insert();
        }

        while select vendTrans
            where   vendTrans.PromissoryNoteStatus == CustVendNegInstStatus::Honored
                && !vendTrans.PromissoryNoteID
            exists join vendTrans2
                where vendTrans2.OffsetRecid == vendTrans.RecId
            exists join bankRemittanceFilesVend
                where bankRemittanceFilesVend.FileId          == vendTrans2.BankRemittanceFileId
                    && bankRemittanceFilesVend.Closed          == NoYes::Yes

        {
            tmpVendTrans.data(vendTrans);
            tmpVendTrans.insert();
        }

        return tmpVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryDocumentsInRemittance</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    VendTrans queryDocumentsInRemittance()
    {
        VendTrans vendTrans;
        VendTransOpen vendTransOpen;
        VendPromissoryNoteJour vendPromissoryNoteJour;
        SpecTrans specTrans;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;
        VendTrans tmpVendTrans;

        tmpVendTrans.setTmp();
        vendTrans.recordLevelSecurity(true);
        vendPromissoryNoteJour.recordLevelSecurity(true);
        vendTransOpen.recordLevelSecurity(true);
        specTrans.recordLevelSecurity(true);
        ledgerJournalTrans.recordLevelSecurity(true);
        ledgerJournalTable.recordLevelSecurity(true);

        // When a Promissory Note (PN) is created, it rolls all cross-company invoices that
        // are settled into one PN VendTrans/Open record that exists in the same company as the
        // payment. As a result, the SpecTrans record never needs to go cross-company in order
        // to generate the correct results. So, all queries or calculations below are "safe" since
        // they all happen in the context of a single company.

        while select vendTrans
            exists join vendPromissoryNoteJour
                where vendPromissoryNoteJour.PromissoryNoteId == vendTrans.PromissoryNoteID
                    && (vendPromissoryNoteJour.Status == CustVendNegInstStatus::Drawn
                    || vendPromissoryNoteJour.Status == CustVendNegInstStatus::Redrawn)
            exists join vendTransOpen
                where vendTransOpen.RefRecId == vendTrans.RecId
            exists join specTrans
                where specTrans.RefTableId == vendTransOpen.TableId
                    && specTrans.RefRecId == vendTransOpen.RecId
                    && specTrans.RefCompany == vendTransOpen.dataAreaId
            exists join ledgerJournalTrans
                where ledgerJournalTrans.RecId == specTrans.SpecRecId
                    && ledgerJournalTrans.TableId == specTrans.SpecTableId
                    && ledgerJournalTrans.dataAreaId == specTrans.SpecCompany
            exists join ledgerJournalTable
                where  ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                    && ledgerJournalTable.JournalType == LedgerJournalType::VendPaymRemittance
        {
            tmpVendTrans.data(vendTrans);
            tmpVendTrans.insert();
        }

        while select vendTrans
            where vendTrans.PromissoryNoteStatus == CustVendNegInstStatus::Invoiced
            exists join vendTransOpen
                where vendTransOpen.RefRecId == vendTrans.RecId
            exists join specTrans
                where specTrans.RefTableId  == vendTransOpen.TableId
                    && specTrans.RefRecId == vendTransOpen.RecId
                    && specTrans.RefCompany == vendTransOpen.dataAreaId
            exists join ledgerJournalTrans
                where ledgerJournalTrans.RecId == specTrans.SpecRecId
                    && ledgerJournalTrans.TableId == specTrans.SpecTableId
                    && ledgerJournalTrans.dataAreaId == specTrans.SpecCompany
            exists join ledgerJournalTable
                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                    && ledgerJournalTable.JournalType == LedgerJournalType::VendPaymRemittance
        {
            tmpVendTrans.data(vendTrans);
            tmpVendTrans.insert();
        }

        return tmpVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryDrawnDocuments</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    VendTrans queryDrawnDocuments()
    {
        VendTrans  vendTrans;
        VendTransOpen vendTransOpen;
        VendPromissoryNoteJour  vendPromissoryNoteJour;
        SpecTrans specTrans;
        VendTrans tmpVendTrans;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;

        tmpVendTrans.setTmp();
        vendTrans.recordLevelSecurity(true);
        vendPromissoryNoteJour.recordLevelSecurity(true);
        vendTransOpen.recordLevelSecurity(true);
        specTrans.recordLevelSecurity(true);
        ledgerJournalTrans.recordLevelSecurity(true);
        ledgerJournalTable.recordLevelSecurity(true);

        // When a Promissory Note (PN) is created, it rolls all cross-company invoices that
        // are settled into one PN VendTrans/Open record that exists in the same company as the
        // payment. As a result, the SpecTrans record never needs to go cross-company in order
        // to generate the correct results. So, all queries or calculations below are "safe" since
        // they all happen in the context of a single company.

        while select vendTrans
            exists join  vendPromissoryNoteJour
                where vendPromissoryNoteJour.PromissoryNoteId == vendTrans.PromissoryNoteID
                    && vendPromissoryNoteJour.Status == CustVendNegInstStatus::Drawn
            exists join vendTransOpen
                where vendTransOpen.RefRecId == vendTrans.RecId
            notexists join specTrans
                where specTrans.RefTableId== vendTransOpen.TableId
                    && specTrans.RefRecId  == vendTransOpen.RecId
                    && specTrans.RefCompany == vendTransOpen.dataAreaId
            exists join ledgerJournalTrans
                where ledgerJournalTrans.RecId == specTrans.SpecRecId
                    &&  ledgerJournalTrans.TableId == specTrans.SpecTableId
                    && ledgerJournalTrans.dataAreaId == specTrans.SpecCompany
            exists join ledgerJournalTable
                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                    && ledgerJournalTable.JournalType == LedgerJournalType::VendPaymRemittance
        {
            tmpVendTrans.data(vendTrans);
            tmpVendTrans.insert();
        }

        return tmpVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryHistoryOfRedrawnDocuments</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    VendTrans queryHistoryOfRedrawnDocuments()
    {
        VendTrans vendTrans;
        VendPromissoryNoteTrans vendPromissoryNoteTrans;
        VendTrans tmpVendTrans;

        tmpVendTrans.setTmp();
        vendTrans.recordLevelSecurity(true);
        vendPromissoryNoteTrans.recordLevelSecurity(true);

        while select vendTrans
            where vendTrans.AmountMST < 0
            exists join vendPromissoryNoteTrans
                where vendPromissoryNoteTrans.PromissoryNoteId == vendTrans.PromissoryNoteID
                    && vendPromissoryNoteTrans.Voucher == vendTrans.Voucher
                    && vendPromissoryNoteTrans.Status == CustVendNegInstStatus::Redrawn
        {
            tmpVendTrans.data(vendTrans);
            tmpVendTrans.insert();
        }

        return tmpVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryHonoredDocuments</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    VendTrans queryHonoredDocuments()
    {
        VendTrans vendTrans;
        VendTrans vendTrans2;
        VendPromissoryNoteTrans vendPromissoryNoteTrans;
        VendPromissoryNoteTrans vendPromissoryNoteTrans2;
        VendPromissoryNoteJour  vendPromissoryNoteJour;
        VendPromissoryNoteJour  vendPromissoryNoteJour2;
        VendTrans tmpVendTrans;
        BankRemittanceFilesVend bankRemittanceFilesVend;

        tmpVendTrans.setTmp();
        vendTrans.recordLevelSecurity(true);
        vendPromissoryNoteJour.recordLevelSecurity(true);
        vendPromissoryNoteTrans.recordLevelSecurity(true);
        vendPromissoryNoteJour2.recordLevelSecurity(true);
        vendPromissoryNoteTrans2.recordLevelSecurity(true);
        vendTrans2.recordLevelSecurity(true);
        bankRemittanceFilesVend.recordLevelSecurity(true);

        while select  vendTrans
            where vendTrans.PromissoryNoteStatus == CustVendNegInstStatus::Honored
            exists join vendPromissoryNoteJour
                where vendPromissoryNoteJour.PromissoryNoteId  == vendTrans.PromissoryNoteID
                    && vendPromissoryNoteJour.PromissoryNoteSeqNum == vendTrans.PromissoryNoteSeqNum
                    && vendPromissoryNoteJour.Status               == CustVendNegInstStatus::Honored
            exists join vendPromissoryNoteTrans
                where vendPromissoryNoteTrans.PromissoryNoteId == vendPromissoryNoteJour.PromissoryNoteId
                    && vendPromissoryNoteTrans.SeqNum == vendTrans.PromissoryNoteSeqNum
                    && vendPromissoryNoteTrans.Status == vendPromissoryNoteJour.Status
            notexists join  vendPromissoryNoteJour2
                where vendPromissoryNoteJour2.PromissoryNoteId == vendTrans.PromissoryNoteID
                    && vendPromissoryNoteJour2.PromissoryNoteSeqNum == vendTrans.PromissoryNoteSeqNum
                    && vendPromissoryNoteJour2.Status == CustVendNegInstStatus::Honored
            exists join vendPromissoryNoteTrans2
                where vendPromissoryNoteTrans2.PromissoryNoteId == vendTrans.PromissoryNoteID
                    && vendPromissoryNoteTrans2.SeqNum == vendTrans.PromissoryNoteSeqNum
                    && vendPromissoryNoteTrans2.Status == CustVendNegInstStatus::Remitted
            exists join vendTrans2
                where vendTrans2.PromissoryNoteID  == vendPromissoryNoteTrans2.PromissoryNoteId
                    && vendTrans2.PromissoryNoteSeqNum == vendPromissoryNoteTrans2.SeqNum
                    && vendTrans2.PromissoryNoteStatus == vendPromissoryNoteTrans2.Status
            exists join bankRemittanceFilesVend
                where bankRemittanceFilesVend.FileId  == vendTrans2.BankRemittanceFileId
                    && bankRemittanceFilesVend.BankAccountId == vendPromissoryNoteTrans2.RemittedtoBankAccountId
                    && bankRemittanceFilesVend.Closed == NoYes::Yes

        {
            tmpVendTrans.data(vendTrans);
            tmpVendTrans.insert();
        }

        while select vendTrans
            where vendTrans.PromissoryNoteStatus == CustVendNegInstStatus::Honored
                && !vendTrans.PromissoryNoteID
            exists join vendTrans2
                where vendTrans2.OffsetRecid == vendTrans.RecId
            notexists join bankRemittanceFilesVend
                where bankRemittanceFilesVend.FileId == vendTrans2.BankRemittanceFileId
                    && bankRemittanceFilesVend.Closed == NoYes::Yes
        {
            tmpVendTrans.data(vendTrans);
            tmpVendTrans.insert();
        }

        return tmpVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRedrawnDocuments</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    VendTrans queryRedrawnDocuments()
    {
        VendTrans vendTrans;
        VendTransOpen vendTransOpen;
        VendPromissoryNoteJour vendPromissoryNoteJour;
        SpecTrans specTrans;
        VendTrans tmpVendTrans;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;

        tmpVendTrans.setTmp();
        vendTrans.recordLevelSecurity(true);
        vendTransOpen.recordLevelSecurity(true);
        specTrans.recordLevelSecurity(true);
        ledgerJournalTrans.recordLevelSecurity(true);
        ledgerJournalTable.recordLevelSecurity(true);

        // When a Promissory Note (PN) is created, it rolls all cross-company invoices that
        // are settled into one PN VendTrans/Open record that exists in the same company as the
        // payment. As a result, the SpecTrans record never needs to go cross-company in order
        // to generate the correct results. So, all queries or calculations below are "safe" since
        // they all happen in the context of a single company.

        while select vendTrans
            exists join vendPromissoryNoteJour
                where vendPromissoryNoteJour.PromissoryNoteId == vendTrans.PromissoryNoteID
                    && vendPromissoryNoteJour.Status == CustVendNegInstStatus::Redrawn
            exists join vendTransOpen
                where vendTransOpen.AccountNum == vendTrans.AccountNum
                    && vendTransOpen.RefRecId == vendTrans.RecId
            notexists join  specTrans
                where specTrans.RefTableId == vendTransOpen.TableId
                    && specTrans.RefRecId  == vendTransOpen.RecId
                    && specTrans.RefCompany == vendTransOpen.dataAreaId
            exists join ledgerJournalTrans
                where ledgerJournalTrans.RecId == specTrans.SpecRecId
                    && ledgerJournalTrans.TableId == specTrans.SpecTableId
                    &&  ledgerJournalTrans.dataAreaId == specTrans.SpecCompany
            exists join ledgerJournalTable
                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                    && ledgerJournalTable.JournalType == LedgerJournalType::VendPaymRemittance
        {
            tmpVendTrans.data(vendTrans);
            tmpVendTrans.insert();
        }

        return tmpVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRemittedDocuments</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    VendTrans queryRemittedDocuments()
    {
        VendTrans vendTrans;
        VendTransOpen vendTransOpen;
        VendPromissoryNoteJour vendPromissoryNoteJour;
        VendTrans tmpVendTrans;

        tmpVendTrans.setTmp();
        vendTrans.recordLevelSecurity(true);
        vendPromissoryNoteJour.recordLevelSecurity(true);
        vendTransOpen.recordLevelSecurity(true);

        while select vendTrans
            exists join  vendPromissoryNoteJour
                where vendPromissoryNoteJour.PromissoryNoteId == vendTrans.PromissoryNoteID
                    && vendPromissoryNoteJour.Status == CustVendNegInstStatus::Remitted
            exists join vendTransOpen
                where   vendTransOpen.RefRecId == vendTrans.RecId
        {
            tmpVendTrans.data(vendTrans);
            tmpVendTrans.insert();
        }

        while select vendTrans
            where  vendTrans.PromissoryNoteStatus == CustVendNegInstStatus::InvoiceRemitted
                && vendTrans.AmountMST < vendTrans.SettleAmountMST
                &&  vendTrans.AmountMST < 0
        {
            tmpVendTrans.data(vendTrans);
            tmpVendTrans.insert();
        }

        return tmpVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpVendPromissoryNoteStatHistory</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TmpPromissoryNoteStatistics tmpVendPromissoryNoteStatHistory()
    {
        delete_from tmpVendPromissoryNoteStatHistory;

        this.calcHistoryOfRedrawnDocuments();

        return tmpVendPromissoryNoteStatHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpVendPromissoryNoteStatistics</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TmpPromissoryNoteStatistics tmpVendPromissoryNoteStatistics()
    {
        delete_from tmpVendPromissoryNoteStatistics;

        this.calcDrawnDocuments();
        this.calcRedrawnDocuments();
        this.calcDocumentsInRemittance();
        this.calcRemittedDocuments();
        this.calcHonoredDocuments();
        this.calcClosedDocuments();

        return tmpVendPromissoryNoteStatistics;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static VendPromissoryNoteStatCalc construct(tableId _tableId = 0, str _id = '')
    {
        switch (_tableId)
        {
            case tablenum(VendTable):
                return new VendPromissoryNoteStatCalc_Vend(_id);
            case tablenum(BankAccountTable):
                return new VendPromissoryNoteStatCalc_Bank(_id);
        }

        return new VendPromissoryNoteStatCalc();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>