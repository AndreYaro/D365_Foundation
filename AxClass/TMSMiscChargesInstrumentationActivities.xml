<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSMiscChargesInstrumentationActivities</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides activities around calculation of miscellaneous charges in Transportation management.
/// </summary>
internal final class TMSMiscChargesInstrumentationActivities
{
    private TMSInstrumentationLogger logger;
    private const str ActivityName = 'MiscCharges';
    private const str ActivityNamePrefix = ActivityName + '.';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(TMSInstrumentationLogger _logger)
    {
        logger = _logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLogger</Name>
				<Source><![CDATA[
    internal static TMSMiscChargesInstrumentationActivities newFromLogger(TMSInstrumentationLogger _logger)
    {
        return new TMSMiscChargesInstrumentationActivities(_logger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMiscCharges</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal SysInstrumentationActivityContext calcMiscCharges(TMSId _tmsID, TMSMiscCharges _miscChargesTable)
    {
        var activity = logger.activity(ActivityNamePrefix + funcName());
        var activityContext = logger.activityContext(activity);

        var miscChargesTable = enum2Symbol(enumNum(TMSMiscCharges), _miscChargesTable);
        activityContext.addCustomProperty(logger.properties().MiscChargesTable, miscChargesTable);

        RecId orderRecId;
        switch (_miscChargesTable)
        {
            case TMSMiscCharges::SalesOrder:
                var salesTable = SalesTable::find(_tmsID);
                orderRecId = salesTable.RecId;
                break;

            case TMSMiscCharges::Load:
                var loadTable = WHSLoadTable::find(_tmsID);
                orderRecId = loadTable.RecId;
                break;

            case TMSMiscCharges::PurchaseOrder:
                var purchTable = PurchTable::find(_tmsID);
                orderRecId = purchTable.RecId;
                break;
        }
        
        logger.logInformation(strFmt('{"%1.RecId":%2}', miscChargesTable, orderRecId));

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logOrderCalculationResults</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void logOrderCalculationResults(MethodName _event, RecId _loadTableRecId, Counter _orderCount, Qty _orderTotalQty, LineAmount _orderTotalAmount, Amount _miscCharges)
    {
        logger.logInformation(
            strFmt('{"Activity":""%1", "Event":"%2", "LoadTable":%3, "Order count":%4, "Total order qty":%5, "Total order amount":%6, "Misc. charges":%7}',
                ActivityName, _event, _loadTableRecId, _orderCount, _orderTotalQty, _orderTotalAmount, _miscCharges));

    }

]]></Source>
			</Method>
			<Method>
				<Name>logMarkupTransSalesOrderCount</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void logMarkupTransSalesOrderCount(Counter _markupTransSalesOrderCount)
    {
        logger.logInformation(strFmt('MarkupTransSalesOrderCount:%1', _markupTransSalesOrderCount));

    }

]]></Source>
			</Method>
			<Method>
				<Name>logMarkupTransSalesLineCount</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void logMarkupTransSalesLineCount(Counter _markupTransSalesLineCount)
    {
        logger.logInformation(strFmt('MarkupTransSalesLineCount:%1', _markupTransSalesLineCount));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>