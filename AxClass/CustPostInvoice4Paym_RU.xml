<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustPostInvoice4Paym_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustPostInvoice4Paym_RU extends RunBaseBatch implements BatchRetryable
{
    CustInvoiceTable            custInvoiceTable;
    CustInvoice4PaymJour_RU     custInvoice4PaymJour;
    CustInvoice4PaymTrans_RU    custInvoice4PaymTrans;

    CustFreeInvoiceCalcTotals   custFreeInvoiceCalcTotals;
    OfficialsServ_RU            offSrv;

    OffSessionId_RU             offSessionId_RU;

    Tax                         tax;
    Notes                       invoice4PaymNotes;
    TmpTaxWorkTrans             journalTmpTaxWorkTrans;
    CustInvoiceAccount          invoiceAccount;

    QueryRun                    queryRun;
    RecordSortedList            recordSortedList;

    DialogField                 dialogPrintOut;
    DialogField                 dialogPrintOutWhen;
    DialogField                 dialogPrintInMST;
    DialogField                 dialogUsePrintManagement;

    Printout                    printOutWhen;
    PrintInMST_RU               printInMST;
    NoYes                       printOut;
    NoYes                       usePrintManagement;

    Counter                     progressCounter;
    Counter                     progressTotal;
    Counter                     numberOfRecords;

    NoYes                       creditError;
    NoYes                       printacceptancereport;

    int                         lineNum;

    protected const int CurrentVersionCustPost = 3;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addLink</Name>
				<Source><![CDATA[
    private void addLink(
        CustInvoiceTable        _custInvoiceTable,
        CustInvoice4PaymJour_RU _custInvoice4PaymJour)
    {
        CustInvoice4PaymFTILink link;

        link.CustInvoice4PaymJour = _custInvoice4PaymJour.RecId;
        link.CustInvoiceTable     = _custInvoiceTable.RecId;
        link.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustAmountsMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts amounts.
    /// </summary>
    protected void adjustAmountsMST()
    {
        AmountAdjustEngineCustInvoice4Paym_W::adjustInvoiceJour(custInvoice4PaymJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBankAccounts</Name>
				<Source><![CDATA[
    private boolean checkBankAccounts(CustInvoiceTable _custInvoiceTable)
    {
        CustPaymModeTable    custPaymMode  = CustPaymModeTable::find(_custInvoiceTable.PaymMode);
        CompanyBankAccountId bankAccountId = custPaymMode.AccountType == LedgerJournalACType::Bank ?
                                             custPaymMode.parmPaymAccount()                        :
                                             "";

        bankAccountId = bankAccountId ? bankAccountId : CompanyInfo::find().Bank;

        if (bankAccountId)
            return BankAccountTable::checkIsActive(bankAccountId,
                                                   _custInvoiceTable.DueDate ?
                                                   _custInvoiceTable.DueDate :
                                                   _custInvoiceTable.InvoiceDate);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Restores default officials values.
    /// </summary>
    protected void  cleanupDialog()
    {
        OfficialsTrans_RU officialsTrans_RU;

        ttsbegin;

        delete_from officialsTrans_RU
        where officialsTrans_RU.OffSessionId == offSessionId_RU;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog(
        DialogRunbase   _dialog          = null,
        boolean         _forceOnClient   = false
        )
    {
        DialogRunbase dialog = Dialog::newFormnameRunbase(formStr(freeTextInvoiceEditLines_RU), this);

        this.initOfficials();
        dialogPrintOutWhen       = dialog.addFieldValue(enumStr(Printout),               printOutWhen,       "@SYS920",           "@SYS12608");
        dialogPrintOut           = dialog.addFieldValue(enumStr(NoYes),                  printOut,           this.invoiceLabel(), "@SYS17200");
        dialogPrintInMST         = dialog.addFieldValue(extendedTypeStr(PrintInMST_RU),  printInMST);
        dialogUsePrintManagement = dialog.addFieldValue(enumStr(NoYes),                  usePrintManagement, "@SYS93922");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstJournal</Name>
				<Source><![CDATA[
    public CustInvoice4PaymJour_RU getFirstJournal()
    {
        CustInvoice4PaymJour_RU custInvoice4PaymJourLoc;

        recordSortedList.first(custInvoice4PaymJourLoc);

        return custInvoice4PaymJourLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        printOut           = dialogPrintOut.value();
        printOutWhen       = dialogPrintOutWhen.value();
        printInMST         = dialogPrintInMST.value();
        usePrintManagement = dialogUsePrintManagement.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOfficials</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits oficials values.
    /// </summary>
    void initOfficials()
    {
        if (! OfficialsServ_RU::isFeatureEnabled())
            return;

        if (! offSrv)
        {
            offSrv = new OfficialsServ_RU();
        }

        offSrv.initTableFreeTextInvoice(invoiceAccount);
        offSessionId_RU = offSrv.newId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Print word.
    /// </summary>
    /// <returns>"Print" word.</returns>
    protected LabelType invoiceLabel()
    {
        // "Print" word
        return "@SYS920";
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();

        queryRun  = new QueryRun(queryStr(CustInvoice));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newrecordSortedList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets new records list.
    /// </summary>
    /// <returns><c>RecordSortedList</c> object.</returns>
    protected RecordSortedList newrecordSortedList()
    {
        RecordSortedList jourList = new RecordSortedList(tableNum(CustInvoice4PaymJour_RU));

        jourList.sortOrderFromContainer(
           FormLetterSortingParameters::formLetterSorting(tableNum(CustInvoice4PaymJour_RU),
                                                          fieldNum(CustInvoice4PaymJour_RU, RecId)));
        return jourList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets number of records.
    /// </summary>
    /// <returns><c>Counter</c> object.</returns>
    public Counter numberOfRecords()
    {
        return numberOfRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersionCustPost, printOut, printOutWhen, printInMST, usePrintManagement, super(), queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceAccount</Name>
				<Source><![CDATA[
    public CustInvoiceAccount parmInvoiceAccount(CustInvoiceAccount _invoiceAccount = invoiceAccount)
    {
        invoiceAccount = _invoiceAccount;
        return invoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNotes</Name>
				<Source><![CDATA[
    public Notes parmNotes(Notes _notes = invoice4PaymNotes)
    {
        invoice4PaymNotes = _notes;
        return invoice4PaymNotes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOffSessionId</Name>
				<Source><![CDATA[
    public OffSessionId_RU  parmOffSessionId(OffSessionId_RU  _offSessionId_RU = offSessionId_RU)
    {
        offSessionId_RU = _offSessionId_RU;
        return offSessionId_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTax</Name>
				<Source><![CDATA[
    public Tax parmTax(Tax _tax = tax)
    {
        tax = _tax;
        return tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Process Charges on line level.
    /// </summary>
    /// <param name="_custInvoiceLine">
    ///     <c>CustIvoiceLine</c> source buffer.
    /// </param>
    private void postMarkupLine(CustInvoiceLine _custInvoiceLine)
    {
        while select custInvoice4PaymTrans
            where custInvoice4PaymTrans.SalesId          == custInvoice4PaymJour.SalesId
            && custInvoice4PaymTrans.Invoice4PaymId      == custInvoice4PaymJour.Invoice4PaymId
            && custInvoice4PaymTrans.Invoice4PaymDate    == custInvoice4PaymJour.Invoice4PaymDate
            && custInvoice4PaymTrans.LineNum             == _custInvoiceLine.LineNum
        {
            Markup::copy(NoYes::No, _custInvoiceLine, custInvoice4PaymTrans, false, custInvoiceTable.CurrencyCode, SourceDocumentLineAccountingStatus::None, true );
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts markup table.
    /// </summary>
    protected void postMarkupTable()
    {
        Markup::copy(NoYes::No, custInvoiceTable, custInvoice4PaymJour, false, custInvoiceTable.CurrencyCode, SourceDocumentLineAccountingStatus::None, true );
    }

]]></Source>
			</Method>
			<Method>
				<Name>printJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints journal.
    /// </summary>
    protected void printJournal()
    {
        SalesFormLetter_FreeTextInvoice4Paym_RU formLetter;

        if (recordSortedList.len() > 0)
        {
            formLetter = SalesFormLetter::construct(DocumentStatus::FreeTextInvoice4Paym_RU);
            formLetter.usePrintManagement(usePrintManagement);
            custInvoice4PaymJour.printJournal(formLetter, recordSortedList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares progress text.
    /// </summary>
    /// <param name = "text">Text.</param>
    void progressUpdate(str text)
    {
        progressCounter++;
        progress.setCount(progressCounter);
        progress.setText(text);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets current <c>QueryRun</c> content.
    /// </summary>
    /// <returns><c>QueryRun</c> object.</returns>
    QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements main class logic.
    /// </summary>
    void  run()
    {
        Args                args = new Args();
        CustPrintOutInvoice custPrintOutInvoice;
        CustInvoiceLine     custInvoiceLine;

        recordSortedList = this.newrecordSortedList();

        if (printOut == NoYes::Yes)
        {
            custPrintOutInvoice = CustPrintOutInvoice::construct();
            custPrintOutInvoice.parmPrintFormLetter_RU(printOut);
        }

        progressTotal = SysQuery::countTotal(queryRun);
        this.progressInit("@SYS25781", progressTotal, #AviFormLetter);
        progress.setText("@SYS26577");
        setPrefix("@SYS25781");
        while (queryRun.next())
        {
            ttsbegin;

            custInvoiceTable = queryRun.get(tableNum(CustInvoiceTable));

            numberOfRecords++;

            if (custInvoiceTable.Posted)
            {
                ttsabort;
                continue;
            }

            custFreeInvoiceCalcTotals = new CustFreeInvoiceCalcTotals(custInvoiceTable);
            custFreeInvoiceCalcTotals.calc();
            this.parmTax(custFreeInvoiceCalcTotals.tax());

            setPrefix(#PreFixField(custInvoiceTable, invoiceAccount));
            this.progressUpdate(strFmt("@SYS26938",
                                       custInvoiceTable.InvoiceAccount,
                                       custInvoiceTable.InvoiceDate));

            if (! this.checkBankAccounts(custInvoiceTable))
            {
                ttsabort;
                continue;
            }

            this.writeJournal();
            this.postMarkupTable();
            journalTmpTaxWorkTrans.copyFromTax(
                this.parmTax(),
                custInvoice4PaymJour.RecId,
                custInvoice4PaymJour.TableId);

            while select custInvoiceLine
            where custInvoiceLine.ParentRecId == custInvoiceTable.RecId
            {
                this.writeJournalLine(custInvoiceLine);
                this.postMarkupLine(custInvoiceLine);
            }

            AmountAdjustEngineCustInvoice4Paym_W::adjustInvoiceJour(custInvoice4PaymJour);
            ttscommit;

            if (printOut == NoYes::Yes)
            {
                if (printOutWhen == Printout::Current)
                {
                    this.printJournal();
                }
            }
        }
        if (printOut == NoYes::Yes  && printOutWhen == Printout::After && recordSortedList.len())
        {
            this.progressInit("@SYS25781", recordSortedList.len(), #AviFormLetter);
            progress.setText("@SYS26955");
            progressCounter++;
            progress.setCount(progressCounter);

            this.printJournal();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates summary invoice for payment per list of FTIs
    /// </summary>
    /// <param name="_invoiceList">
    /// Container of FTI RecID's to be included into single invoice for payment
    /// </param>
    /// <param name="_invoiceDate">
    /// Summary invoice for payment date
    /// </param>
    /// <remarks>
    /// Assumption is that quality of aggregation and validity of FTIs in _invoiceList is assured by calling method.
    /// For example if one of FTIs is invoiced already it will still be included into summary I4P.
    /// </remarks>
    public void runSummary(
        container _invoiceList,
        TransDate _invoiceDate)
    {
        CustInvoiceLine custInvoiceLine;
        int             invoiceListLen = conLen(_invoiceList);
        int             invoiceListIdx;

        custInvoice4PaymJour = null;
        recordSortedList     = this.newrecordSortedList();

        setPrefix("@SYS25781");

        ttsbegin;

        this.initOfficials();

        for (invoiceListIdx = 1; invoiceListIdx <= invoiceListLen; invoiceListIdx ++)
        {
            custInvoiceTable = CustInvoiceTable::findRecId(conPeek(_invoiceList, invoiceListIdx));
            if (! this.checkBankAccounts(custInvoiceTable))
            {
                continue;
            }

            custFreeInvoiceCalcTotals = new CustFreeInvoiceCalcTotals(custInvoiceTable);
            custFreeInvoiceCalcTotals.calc();
            this.parmTax(custFreeInvoiceCalcTotals.tax());

            if (custInvoice4PaymJour)
            {
                custInvoice4PaymJour.SalesBalance       += custFreeInvoiceCalcTotals.custFreeInvoiceBalance();
                custInvoice4PaymJour.EndDisc            += custFreeInvoiceCalcTotals.custFreeInvoiceEndDisc();
                custInvoice4PaymJour.SumTax             += custFreeInvoiceCalcTotals.custFreeInvoiceTaxTotal();
                custInvoice4PaymJour.RoundOff           += custFreeInvoiceCalcTotals.custFreeInvoiceRoundOff();
                custInvoice4PaymJour.Invoice4PaymAmount += custFreeInvoiceCalcTotals.custFreeInvoiceInvoiceAmount();
                custInvoice4PaymJour.update();

                this.addLink(custInvoiceTable, custInvoice4PaymJour);
            }
            else
            {
                this.writeJournal(_invoiceDate);

                numberOfRecords++;
            }
            this.postMarkupTable();
            journalTmpTaxWorkTrans.copyFromTax(
                this.parmTax(),
                custInvoice4PaymJour.RecId,
                custInvoice4PaymJour.TableId);

            while select custInvoiceLine
            where custInvoiceLine.ParentRecId == custInvoiceTable.RecId
            {
                this.writeJournalLine(custInvoiceLine);
            }
        }

        AmountAdjustEngineCustInvoice4Paym_W::adjustInvoiceJour(custInvoice4PaymJour);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Always true.
    /// </summary>
    /// <returns><c>True</c>.</returns>
    boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpTaxWorkTrans</Name>
				<Source><![CDATA[
    private TmpTaxWorkTrans tmpTaxWorkTrans(RecId            _headingRecId,
                                            CustInvoiceLine  _custInvoiceLine)
    {
        TmpTaxWorkTrans  tmpTaxWorkTrans;
        CurrencyCode     companyCurrency = CompanyInfoHelper::standardCurrency();

        ttsbegin;

        while select journalTmpTaxWorkTrans
            where journalTmpTaxWorkTrans.HeadingRecId  == _headingRecId
               && journalTmpTaxWorkTrans.SourceTableId == _custInvoiceLine.TableId
               && journalTmpTaxWorkTrans.SourceRecId   == _custInvoiceLine.RecId
        {
            tmpTaxWorkTrans.clear();
            tmpTaxWorkTrans.data(journalTmpTaxWorkTrans);

            if (! tmpTaxWorkTrans.TaxAutogenerated)
            {
                if (tmpTaxWorkTrans.SourceCurrencyCode == companyCurrency)
                {
                    tmpTaxWorkTrans.TaxAmount = tmpTaxWorkTrans.transactionCurrencyTaxAmount();
                }
                else
                {
                    tmpTaxWorkTrans.TaxAmount = CurrencyExchangeHelper::mstAmount(tmpTaxWorkTrans.transactionCurrencyTaxAmount(), tmpTaxWorkTrans.SourceCurrencyCode, tmpTaxWorkTrans.TransDate, tmpTaxWorkTrans.euroTriangulation ? UnknownNoYes::Unknown : UnknownNoYes::No, custInvoice4PaymJour.ExchRate, custInvoice4PaymJour.ExchRateSecondary);
                }
            }

            tmpTaxWorkTrans.insert();
        }

        ttscommit;

        return tmpTaxWorkTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer         version = RunBase::getVersion(packedClass);
        container       packedSuper;
        container       packedQuery;

        switch (version)
        {
            case CurrentVersionCustPost:
                [version,printOut, printOutWhen, printInMST, usePrintManagement,packedSuper,packedQuery] = packedClass;
                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                if (packedSuper)
                    return super(packedSuper);

                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>QueryBuildRange</c>.
    /// </summary>
    /// <param name = "_custInvoiceTable"><c>CustInvoiceTable</c> object.</param>
    void  updateQueryBuild(CustInvoiceTable _custInvoiceTable)
    {
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        queryBuildDataSource = queryRun.query().dataSourceTable(tableNum(CustInvoiceTable));

        queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(CustInvoiceTable, InvoiceAccount));
        queryBuildRange.value(queryValue(_custInvoiceTable.InvoiceAccount));

        queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(CustInvoiceTable, InvoiceDate));
        queryBuildRange.value(queryValue(_custInvoiceTable.InvoiceDate));

        queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(CustInvoiceTable, RecId));
        queryBuildRange.value(queryValue(_custInvoiceTable.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes journal.
    /// </summary>
    /// <param name = "_invoice4PaymDate">Invoice date</param>
    protected void writeJournal(TransDate _invoice4PaymDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        Num number;

        custInvoice4PaymJour.clear();
        custInvoice4PaymJour.initValue();

        number = NumberSeq::newGetNum(SalesParameters::numRefInvoice4PaymId_RU(),
                                        false,
                                        false,
                                        UnknownNoYes::No).num();

        custInvoice4PaymJour.Invoice4PaymId     = number;
        custInvoice4PaymJour.Invoice4PaymDate   = _invoice4PaymDate;

        custInvoice4PaymJour.initFromCustInvoiceTable(custInvoiceTable);

        custInvoice4PaymJour.SalesId            = "";//"Free Text Invoice";
        custInvoice4PaymJour.OffSessionId       = offSessionId_RU;

        custInvoice4PaymJour.SalesBalance       = custFreeInvoiceCalcTotals.custFreeInvoiceBalance();
        custInvoice4PaymJour.EndDisc            = custFreeInvoiceCalcTotals.custFreeInvoiceEndDisc();
        custInvoice4PaymJour.SumTax             = custFreeInvoiceCalcTotals.custFreeInvoiceTaxTotal();
        custInvoice4PaymJour.RoundOff           = custFreeInvoiceCalcTotals.custFreeInvoiceRoundOff();
        custInvoice4PaymJour.Invoice4PaymAmount = custFreeInvoiceCalcTotals.custFreeInvoiceInvoiceAmount();
        custInvoice4PaymJour.Notes              = invoice4PaymNotes;
        custInvoice4PaymJour.PrintMST           = printInMST;
        this.adjustAmountsMST();
        custInvoice4PaymJour.insert();

        recordSortedList.ins(custInvoice4PaymJour);

        this.addLink(custInvoiceTable, custInvoice4PaymJour);

        lineNum = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes journal lines.
    /// </summary>
    /// <param name = "_custInvoiceLine"><c>CustInvoiceLine</c> object.</param>
    protected void writeJournalLine(CustInvoiceLine _custInvoiceLine)
    {
        lineNum ++;

        custInvoice4PaymTrans.initFromTaxWorkTrans_RU(
             this.tmpTaxWorkTrans(custInvoice4PaymJour.RecId, _custInvoiceLine),
             _custInvoiceLine.TableId,
             _custInvoiceLine.RecId);
        custInvoice4PaymTrans.initFromCustInvoiceLine(_custInvoiceLine, this.parmTax());

        custInvoice4PaymTrans.SalesId           = custInvoice4PaymJour.SalesId;
        custInvoice4PaymTrans.CurrencyCode      = custInvoice4PaymJour.CurrencyCode;
        custInvoice4PaymTrans.Invoice4PaymId    = custInvoice4PaymJour.Invoice4PaymId;
        custInvoice4PaymTrans.Invoice4PaymDate  = custInvoice4PaymJour.Invoice4PaymDate;
        custInvoice4PaymTrans.setLinenum(lineNum);

        if (custInvoiceTable.InclTax)
        {
            custInvoice4PaymTrans.LineAmountTax = _custInvoiceLine.AmountCur - custInvoice4PaymTrans.LineAmount;
        }

        custInvoice4PaymTrans.LineAmountMST     = custInvoice4PaymJour.amountMST(custInvoice4PaymTrans.LineAmount);
        custInvoice4PaymTrans.TaxAmountMST      = custInvoice4PaymJour.amountMST(custInvoice4PaymTrans.LineAmountTax);

        custInvoice4PaymTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static CustPostInvoice4Paym_RU construct()
    {
        return new CustPostInvoice4Paym_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets class description.
    /// </summary>
    /// <returns><c>ClassDescription</c> object.</returns>
    public static ClassDescription description()
    {
        return "@GLS106729";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        CustPostInvoice4Paym_RU custPostInvoice4Paym_RU;
        CustInvoiceTable        custInvoiceTable;
        Object                  custInvoiceTable_ds;
        QueryBuildRange         qbrPosted;

        if (args && args.caller())
        {
            custInvoiceTable = args.record();
            if (FormDataUtil::isFormDataSource(custInvoiceTable))
            {
                custInvoiceTable_ds = FormDataUtil::getFormDataSource(custInvoiceTable);
            }
        }

        custPostInvoice4Paym_RU = CustPostInvoice4Paym_RU::construct();
        custPostInvoice4Paym_RU.getLast();
        if (custInvoiceTable)
        {
            custPostInvoice4Paym_RU.updateQueryBuild(custInvoiceTable);
        }

        qbrPosted = SysQuery::findOrCreateRange(SysQuery::findOrCreateDataSource(custPostInvoice4Paym_RU.queryRun().query(),tableNum(CustInvoiceTable)),fieldNum(CustInvoiceTable,Posted));
        qbrPosted.value(queryValue(NoYes::No));
        qbrPosted.status(RangeStatus::Open);
        custPostInvoice4Paym_RU.parmInvoiceAccount(custInvoiceTable.InvoiceAccount);

        if (custPostInvoice4Paym_RU.prompt())
        {
            custPostInvoice4Paym_RU.runOperation();
        }

        if (custInvoiceTable && custInvoiceTable_ds)
        {
            if (custPostInvoice4Paym_RU.numberOfRecords() > 1)
            {
                custInvoiceTable_ds.executeQuery();
            }
            else
            {
                custInvoiceTable_ds.reRead();
                custInvoiceTable_ds.reFresh();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>