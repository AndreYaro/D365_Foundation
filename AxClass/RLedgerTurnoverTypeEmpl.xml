<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RLedgerTurnoverTypeEmpl</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RLedgerTurnoverTypeEmpl</c> class implements logic for advance holder turnover statements.
/// </summary>
class RLedgerTurnoverTypeEmpl extends RLedgerTurnoverType
{
    #define.EmplAccount (1)
    #define.TransType   (2)

    #define.EmplAccountParamName("@GLS103488")
    #define.TransTypeParamName  ("@SYS21201")

    Voucher         voucher;
    TransDate       accountingDate;
    PostingProfile  postingProfile;
    MainAccountNum  mainAccountNum;
    container       groupParamNames;
    Set             dimParamSet;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addMainAccountRange</Name>
				<Source><![CDATA[
    public void addMainAccountRange(MainAccountRange _accountRange, boolean _offset = false)
    {
        if (! _offset)
        {
            super(_accountRange, _offset);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPrecalcData</Name>
				<Source><![CDATA[
    public void createPrecalcData(Common _trans,
                                  Common _transHeader,
                                  Common _transSplit)
    {
        int                                  idx;
        str                                  value;
        str                                  paramName;
        RecId                                combinationRecId;
        boolean                              newCombination;
        RLedgerTurnoverParamTransLink        paramTransLink;
        Map                                  mapParamValues;
        MapEnumerator                        mapEnumerator;
        RLedgerTurnoverParamHashKey          paramHashKey;
        EmplTrans_RU                         emplTrans       = _trans;
        EmplTrans_RU                         emplTransSource = _trans.data();
        container                            paramNames      = this.groupParamNames();

        paramHashKey = new RLedgerTurnoverParamHashKey();

        ttsBegin;

        paramTransLink = RLedgerTurnoverParamTransLink::find(emplTrans.TableId, emplTrans.RecId, true);
        if (paramTransLink)
        {
            mapParamValues = RLedgerTurnoverParamValue::getValues(paramTransLink.ParamValueCombination);
        }

        for (idx = 1; idx <= conlen(paramNames); idx++)
        {
            paramName = conpeek(paramNames, idx);
            switch (paramName)
            {
                case conpeek(paramNames, #EmplAccount) :
                    if (! mapParamValues)
                    {
                        value = emplTrans.EmplAccount;
                    }
                    break;

                case conpeek(paramNames, #TransType)     :
                    if (! mapParamValues)
                    {
                        value = enum2str(emplTrans.TransType);
                    }
                    break;

                default :
                    if (! mapParamValues)
                    {
                        value = RLedgerTurnoverType::getLedgerDimensionDisplayValue(emplTrans.LedgerDimension, mapDimAttrRecId.lookup(paramName));
                    }
            }

            if (mapParamValues)
            {
                if (! mapParamValues.exists(paramName))
                {
                    throw error("@SYS4081708");
                }

                value = con2Str(mapParamValues.lookup(paramName));
            }

            paramHashKey.addParamValue(paramName, value);
        }

        [combinationRecId, newCombination] = RLedgerTurnoverParamValueCombination::findOrCreate(this.reportType(), paramHashKey.getParamStr());

        paramTransLink.ParamValueCombination = combinationRecId;
        if (paramTransLink.RecId)
        {
            paramTransLink.update();
        }
        else
        {
            paramTransLink.RefRecId     = emplTrans.RecId;
            paramTransLink.RefTableId   = emplTrans.TableId;
            paramTransLink.insert();
        }

        if (newCombination)
        {
            mapEnumerator = paramHashKey.mapParamValues().getEnumerator();
            while (mapEnumerator.moveNext())
            {
                RLedgerTurnoverParamValue::create(mapEnumerator.currentKey(), con2Str(mapEnumerator.currentValue()), combinationRecId);
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return "@SYS4081690";
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldAmountCur</Name>
				<Source><![CDATA[
    protected fieldId fieldAmountCur()
    {
        return fieldnum(EmplTrans_RU, AmountCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldAmountMST</Name>
				<Source><![CDATA[
    protected fieldId fieldAmountMST()
    {
        return fieldnum(EmplTrans_RU, AmountMST);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldAmountMSTSec</Name>
				<Source><![CDATA[
    protected fieldId fieldAmountMSTSec()
    {
        return fieldnum(EmplTrans_RU, ReportingCurrencyAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldCorrection</Name>
				<Source><![CDATA[
    public container fieldCorrection(CurrencyType_RU _currencyType = CurrencyType_RU::Standard)
    {
        return _currencyType == CurrencyType_RU::Secondary      ?
               [tableNum(EmplTrans_RU), fieldnum(EmplTrans_RU, ReportingCurrencyCorrect)] :
               [tableNum(EmplTrans_RU), fieldnum(EmplTrans_RU, Correct)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldCurrencyCode</Name>
				<Source><![CDATA[
    public container fieldCurrencyCode()
    {
        return [tablenum(EmplTrans_RU), fieldnum(EmplTrans_RU, CurrencyCode)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldLedgerDimension</Name>
				<Source><![CDATA[
    public container fieldLedgerDimension()
    {
        return [tablenum(EmplTrans_RU), fieldnum(EmplTrans_RU, LedgerDimension)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldMainAccount</Name>
				<Source><![CDATA[
    public container fieldMainAccount()
    {
        return [tablenum(MainAccount), fieldnum(MainAccount, MainAccountId)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldSettlementDate</Name>
				<Source><![CDATA[
    public container fieldSettlementDate()
    {
        return [tablenum(EmplSettlement_RU), fieldnum(EmplSettlement_RU, TransDate)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldTransDate</Name>
				<Source><![CDATA[
    public container fieldTransDate()
    {
        return [tablenum(EmplTrans_RU), fieldnum(EmplTrans_RU, TransDate)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMainAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the Main account for the transaction.
    /// </summary>
    /// <param name="_emplTrans">
    /// The transaction table buffer.
    /// </param>
    protected void getMainAccountNum(EmplTrans_RU _emplTrans)
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;

        if (_emplTrans.Voucher          != voucher          ||
            _emplTrans.TransDate        != accountingDate   ||
            _emplTrans.PostingProfile   != postingProfile)
        {
            voucher         = _emplTrans.Voucher;
            accountingDate  = _emplTrans.TransDate;
            postingProfile  = _emplTrans.PostingProfile;

            while select * from generalJournalAccountEntry
                exists join generalJournalEntry
                    where generalJournalEntry.RecId  == generalJournalAccountEntry.GeneralJournalEntry
                       && generalJournalEntry.Ledger == Ledger::current()
                exists join subledgerVoucherGeneralJournalEntry
                    where subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalEntry.RecId
                       && subledgerVoucherGeneralJournalEntry.Voucher             == voucher
                       && subledgerVoucherGeneralJournalEntry.AccountingDate      == accountingDate
            {
                if ((_emplTrans.AmountMST
                    && generalJournalAccountEntry.AccountingCurrencyAmount * _emplTrans.AmountMST > 0)
                    || (! _emplTrans.AmountMST
                    && generalJournalAccountEntry.ReportingCurrencyAmount * _emplTrans.ReportingCurrencyAmount > 0))
                {
                    mainAccountNum = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(generalJournalAccountEntry.LedgerDimension);

                    if (conFind(this.ledgerPostingType(), generalJournalAccountEntry.PostingType))
                    {
                        break;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupKeyData</Name>
				<Source><![CDATA[
    public container groupKeyData(container _key)
    {
        int         idx;
        str         key;
        container   ret;

        for (idx = 1; idx <= conlen(_key); idx++)
        {
            key = conpeek(_key, idx);
            switch (key)
            {
                case conpeek(this.groupParamNames(), #EmplAccount) :
                    ret += fieldNum(EmplTrans_RU, EmplAccount);
                    break;
                case conpeek(this.groupParamNames(), #TransType) :
                    ret += fieldNum(EmplTrans_RU, TransType);
                    break;
                default :
                    if (! conFind(ret, conPeek(this.fieldLedgerDimension(), 2)))
                    {
                        ret += conPeek(this.fieldLedgerDimension(), 2);
                    }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupParamDefault</Name>
				<Source><![CDATA[
    public container groupParamDefault()
    {
        return [conpeek(this.groupParamNames(), #EmplAccount), this.keyMainAccount()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupParamLabels</Name>
				<Source><![CDATA[
    public container groupParamLabels(container _key)
    {
        int         idx;
        container   paramLabels;

        for (idx = 1; idx <= conLen(_key); idx++)
        {
            paramLabels = conins(paramLabels, conlen(paramLabels) + 1, [conpeek(_key, idx)]);
        }

        return paramLabels;
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupParamNames</Name>
				<Source><![CDATA[
    public container groupParamNames()
    {
        DimensionAttributeSetItem   dimAttrSetItem;
        DimensionAttribute          dimAttr;

        if (groupParamNames)
        {
            return groupParamNames;
        }

        groupParamNames = [#EmplAccountParamName, #TransTypeParamName];

        // Add all dimensions from the current ledger
        while select DimensionAttribute from dimAttrSetItem
            where dimAttrSetItem.DimensionAttributeSet == DimensionCache::getDimensionAttributeSetForLedger()
        join Name, RecId from dimAttr
            where dimAttr.RecId == dimAttrSetItem.DimensionAttribute
        {
            groupParamNames += dimAttr.Name;
            mapDimAttrRecId.insert(dimAttr.Name, dimAttr.RecId);
            dimParamSet.add(dimAttr.Name);
        }

        return groupParamNames;
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupParamValueName</Name>
				<Source><![CDATA[
    public Name groupParamValueName(Name _paramName, container _paramValue, Common _common = null)
    {
        Name ret;

        switch (_paramName)
        {
            case conpeek(this.groupParamNames(), #EmplAccount) :
                ret = EmployeeTable_RU::findByEmployeeId(conPeek(_paramValue, 1)).employeeName();
                break;

            case conpeek(this.groupParamNames(), #TransType) :
                ret = super(_paramName, _paramValue);
                break;

            case this.keyMainAccount()                       :
                ret = MainAccount::getLocalizedNameByMainAccountId(conPeek(_paramValue, 1));
                break;

            default :
                ret = RLedgerTurnoverType::getLedgerDimensionAttributeName(_common.(conPeek(this.fieldLedgerDimension(), 2)),
                                                                           _paramName,
                                                                           conPeek(_paramValue, 1));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupParamValues</Name>
				<Source><![CDATA[
    public container groupParamValues(Common    _trans,
                                      container _key,
                                      Common    _transHeader = null,
                                      Common    _transSplit  = null)
    {
        int             idx;
        str             key;
        container       value;
        container       paramValues;
        EmplTrans_RU    emplTrans       = _trans;
        EmplTrans_RU    emplTransSource = _trans.data();
        container       paramNames      = this.groupParamNames();

        for (idx = 1; idx <= conlen(_key); idx++)
        {
            key = conpeek(_key, idx);
            switch (key)
            {
                case conpeek(paramNames, #EmplAccount) :
                    value = [emplTrans.EmplAccount];
                    break;

                case conpeek(paramNames, #TransType)   :
                    value = [enum2str(emplTrans.TransType)];
                    break;

                default :
                    value = [ RLedgerTurnoverType::getLedgerDimensionDisplayValue(emplTrans.LedgerDimension, mapDimAttrRecId.lookup(conpeek(_key, idx))) ];
            }

            paramValues = conins(paramValues, conlen(paramValues) + 1, value);
        }

        return paramValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransIncluded</Name>
				<Source><![CDATA[
    public boolean isTransIncluded(Common           _trans,
                                   Common           _subtrans,
                                   CurrencyType_RU  _currencyType,
                                   TransDate        _fromDate = dateNull(),
                                   TransDate        _toDate   = dateNull())
    {
        EmplTrans_RU emplTrans = _trans;

        if (! super(_trans, _subtrans, _currencyType, _fromDate, _toDate))
        {
            return false;
        }

        this.getMainAccountNum(emplTrans);

        if (accountNumSet.elements() && ! accountNumSet.in(mainAccountNum))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>keyMainAccount</Name>
				<Source><![CDATA[
    public str keyMainAccount()
    {
        return DimensionAttribute::find(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerPostingType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a container holding the ledger posting types for advance holder balance transactions.
    /// </summary>
    /// <returns>
    /// A container holding the ledger posting types for advance holder balance transactions.
    /// </returns>
    protected container ledgerPostingType()
    {
        return [LedgerPostingType::EmplBalance_RU];
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        dimParamSet = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    public container query()
    {
        QueryBuildDataSource qbds;
        QueryBuildRange      qbr;
        Query                query = new Query();

        qbds = query.addDataSource(tableNum(EmplTrans_RU));

        qbds = qbds.addDataSource(tableNum(EmployeeTable_RU));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.relations(true);

        qbr = qbds.addRange(fieldNum(EmployeeTable_RU, AdvHolder));
        qbr.value(queryValue(NoYes::Yes));

        qbr = qbds.addRange(fieldNum(EmployeeTable_RU, EmployeeId));

        return query.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportType</Name>
				<Source><![CDATA[
    protected RLedgerTurnoverSheetType reportType()
    {
        return RLedgerTurnoverSheetType::EmplTurnover;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settledAmount</Name>
				<Source><![CDATA[
    public Amount settledAmount(Common             _trans,
                                Common             _settlement,
                                TransDate          _dateFrom,
                                TransDate          _dateTo,
                                CurrencyType_RU    _currencyType)
    {
        Amount              amount;
        EmplTrans_RU        emplTrans       = _trans;
        EmplSettlement_RU   emplSettlement  = _settlement;
        boolean             isExchAdjUnreal = (emplTrans.TransType == EmplTransSourceType_RU::ExchAdj &&
                                               (emplTrans.ExchAdjustmentUnrealized                    ||
                                                emplTrans.ReportingExchAdjustmentUnrealized));
        boolean             isDebit         = emplSettlement.DebitRecId == emplTrans.RecId;

        if (! expandedBalance)
        {
            return 0;
        }

        if (isExchAdjUnreal                                           ||
            emplTrans.TransType == EmplTransSourceType_RU::AdvanceAdj ||
            emplTrans.TransType == EmplTransSourceType_RU::CrossAccountSettle)
        {
            if (emplTrans.TransDate >= _dateFrom && emplTrans.TransDate <= _dateTo)
            {
                switch (_currencyType)
                {
                    case CurrencyType_RU::Standard  :
                        amount = emplTrans.AmountMST;
                        break;
                    case CurrencyType_RU::Currency  :
                        amount = emplTrans.AmountCur;
                        break;
                    case CurrencyType_RU::Secondary :
                        amount = emplTrans.ReportingCurrencyAmount;
                        break;
                }
            }
            else
            {
                return 0;
            }
        }
        else
        {
            switch (_currencyType)
            {
                case CurrencyType_RU::Standard :
                    if (emplTrans.TransType == EmplTransSourceType_RU::ExchAdj)
                    {
                        amount = emplSettlement.SettleAmountMST;
                    }
                    else
                    {
                        amount = isDebit ? emplSettlement.SettleAmountMSTDebit : emplSettlement.SettleAmountMSTCredit;
                    }
                    break;
                case CurrencyType_RU::Currency  :
                    amount = isDebit ? emplSettlement.SettleAmountCurDebit : emplSettlement.SettleAmountCurCredit;
                    break;
                case CurrencyType_RU::Secondary :
                    if (emplTrans.TransType == EmplTransSourceType_RU::ExchAdj)
                    {
                        amount = emplSettlement.ReportingSettleAmount;
                    }
                    else
                    {
                        amount = isDebit ? emplSettlement.ReportingSettleAmountDebit : emplSettlement.ReportingSettleAmountCredit;
                    }
                    break;
            }
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settledTransAmounts</Name>
				<Source><![CDATA[
    public container settledTransAmounts(Common          _trans,
                                         TransDate       _dateFrom,
                                         TransDate       _dateTo,
                                         CurrencyType_RU _currencyType,
                                         Common          _trans_W)
    {
        Amount              amount;
        boolean             isDebit;
        EmplSettlement_RU   emplSettlement;
        container           ret             = [0, 0];
        EmplTrans_RU        emplTrans       = _trans;
        boolean             isExchAdjUnreal = (emplTrans.TransType == EmplTransSourceType_RU::ExchAdj &&
                                               (emplTrans.ExchAdjustmentUnrealized                    ||
                                                emplTrans.ReportingExchAdjustmentUnrealized));

        if (! expandedBalance)
        {
            return ret;
        }

        if (isExchAdjUnreal                                           ||
            emplTrans.TransType == EmplTransSourceType_RU::AdvanceAdj ||
            emplTrans.TransType == EmplTransSourceType_RU::CrossAccountSettle)
        {
            amount += this.settledAmount(emplTrans, emplSettlement, _dateFrom, _dateTo, _currencyType);
        }
        else
        {
            while select sum(SettleAmountMST),
                   sum(SettleAmountMSTDebit),
                   sum(SettleAmountMSTCredit),
                   sum(SettleAmountCurDebit),
                   sum(SettleAmountCurCredit),
                   sum(ReportingSettleAmount),
                   sum(ReportingSettleAmountDebit),
                   sum(ReportingSettleAmountCredit)
                from emplSettlement
                group by DebitRecId, CreditRecId
            where  (emplSettlement.DebitRecId  == emplTrans.RecId
                ||  emplSettlement.CreditRecId == emplTrans.RecId)
                &&  emplSettlement.TransDate   >= _dateFrom
                &&  emplSettlement.TransDate   <= _dateTo
            {
                amount += this.settledAmount(emplTrans, emplSettlement, _dateFrom, _dateTo, _currencyType);
            }
        }

        isDebit = conPeek(this.transAmounts(_trans, _currencyType, _trans_W), 1) != 0;

        ret = isDebit ? conPoke(ret, 1, amount) : conPoke(ret, 2, -amount);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settlementTableId</Name>
				<Source><![CDATA[
    public TableId settlementTableId()
    {
        return tableNum(EmplSettlement_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDetailLabels</Name>
				<Source><![CDATA[
    public container transDetailLabels()
    {
        return ["@SYS67", "@SYS12371", "@GLS101897", '', "@SYS13566"];
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDetails</Name>
				<Source><![CDATA[
    public container transDetails(Common _trans, Common _transHeader = null)
    {
        EmplTrans_RU emplTrans = _trans;

        return [emplTrans.TransDate,
                emplTrans.Voucher,
                emplTrans.AdvanceId,
                emplTrans.TransDate,
                emplTrans.Txt,
                emplTrans.RecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>transForm</Name>
				<Source><![CDATA[
    protected str transForm()
    {
        return formstr(EmplTrans_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transKeyData</Name>
				<Source><![CDATA[
    public container transKeyData()
    {
        return [fieldNum(EmplTrans_RU, RecId)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableId</Name>
				<Source><![CDATA[
    public tableId transTableId()
    {
        return tablenum(EmplTrans_RU);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>