<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesExportFineCalculation_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesExportFineCalculation_RU extends RunBaseBatch implements BatchRetryable
{
    SalesExportFineCalcDate_RU     calcDate;
    DialogField                    dlgCalcDate;

    SalesTmpExportFactureProcessing_RU  tmpExportFactureProcessing;

    QueryRun    queryRun;

    #define.CurrentVersion(1)

    #localmacro.currentList
        calcDate
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcFacture</Name>
				<Source><![CDATA[
    SalesExportFineAmountMST_RU calcFacture(FactureJour_RU _factureJour)
    {
        FactureTrans_RU                 factureTrans;
        SalesExportFineAmountMST_RU     factureFineAmount,
                                        transFineAmount;

        SalesExportFactureCalcTax_RU calcTax = SalesExportFactureCalcTax_RU::construct(_factureJour);
        calcTax.parmUseDomesticTaxCode(true);

        ttsbegin;
        while select forupdate factureTrans
            where factureTrans.FactureId == _factureJour.FactureId  &&
                  factureTrans.Module    == _factureJour.Module
        {
            calcTax.parmSingleLine(factureTrans.RecId);
            TaxAmount taxAmount = CurrencyExchangeHelper::mstAmount(-calcTax.calcTax(), _factureJour.CurrencyCode, _factureJour.ExportDate);

            transFineAmount = this.calcFine(factureTrans.TaxCode,
                                            _factureJour.ExportDate,
                                            taxAmount);

            factureTrans.FineAmountCalculated = transFineAmount;
            factureTrans.FineAmountToPost     = transFineAmount;
            factureTrans.update();

            factureFineAmount += transFineAmount;
        }
        ttscommit;

        return factureFineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcFine</Name>
				<Source><![CDATA[
    protected SalesExportFineAmountMST_RU calcFine(TaxCode _taxCode, SalesExportDate_RU _exportDate, AmountMST _base)
    {
        TaxTable                    taxTable = TaxTable::find(_taxCode);
        LedgerRefinancingRates_RU   refinancingRates;

        Days                            days, daysTotal;
        SalesExportFineAmountMST_RU     amount;

        StartDate dateFrom = this.startDate(taxTable.TaxPeriod, _exportDate);

        if (!dateFrom)
        {
            return amount;
        }

        daysTotal             = calcDate - dateFrom + 1;
        TransDate periodStart = dateFrom;
        Factor    factor      = LedgerRefinancingRates_RU::factor(periodStart);

        while select refinancingRates
            order by FromDate
            where refinancingRates.FromDate >  dateFrom &&
                  refinancingRates.FromDate <= calcDate
        {
            days    =  min(refinancingRates.FromDate, calcDate) - periodStart;
            amount += days * _base * factor;
            if (refinancingRates.RateFactor != 0)
            {
                factor      =  refinancingRates.Percent / (refinancingRates.RateFactor * 100);
            }
            else
            {
                throw error(strfmt("@GLS113150", refinancingRates.FromDate));
            }
            daysTotal -= days;
            periodStart = min(refinancingRates.FromDate, calcDate);
        }

        amount += daysTotal * _base * factor;

        return CurrencyExchangeHelper::amount(amount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dlgCalcDate = dialog.addFieldValue(extendedtypestr(SalesExportFineCalcDate_RU), calcDate);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();
        calcDate = dlgCalcDate.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tablenum(FactureJour_RU));

        findOrCreateRange_W(qbds, fieldnum(FactureJour_RU, Module), queryValue(FactureModule_RU::Cust)).status(RangeStatus::Locked);
        findOrCreateRange_W(qbds, fieldnum(FactureJour_RU, FactureType), queryValue(FactureType_RU::Invoice)).status(RangeStatus::Locked);
        findOrCreateRange_W(qbds, fieldnum(FactureJour_RU, ExportProcessing), queryValue(NoYes::Yes)).status(RangeStatus::Locked);
        findOrCreateRange_W(qbds, fieldnum(FactureJour_RU, ProcessingType), queryValue(SalesBookFactureProcessingType_RU::OverdueConfirmation)).status(RangeStatus::Locked);
        findOrCreateRange_W(qbds, fieldnum(FactureJour_RU, FineCalculationDate), date2StrXpp(dateNull())).status(RangeStatus::Hidden);

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.query().pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        while (queryRun.next())
        {
            FactureJour_RU factureJour = queryRun.get(tablenum(FactureJour_RU));
            this.calcFacture(factureJour);

            tmpExportFactureProcessing.clear();
            tmpExportFactureProcessing.initFromFactuerJour(factureJour);
            tmpExportFactureProcessing.FineCalculationDate = calcDate;
            tmpExportFactureProcessing.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startDate</Name>
				<Source><![CDATA[
    private StartDate startDate(TaxPeriod _taxPeriod, SalesExportDate_RU _exportDate)
    {
        TaxReportPeriod taxReportPeriod;

        select firstonly TaxReportingDate_RU from taxReportPeriod
            where taxReportPeriod.TaxPeriod == _taxPeriod  &&
                  taxReportPeriod.FromDate  <= _exportDate &&
                  taxReportPeriod.ToDate    >= _exportDate;

        StartDate startDate = taxReportPeriod.TaxReportingDate_RU + 1;

        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpExportFactureProcessing</Name>
				<Source><![CDATA[
    SalesTmpExportFactureProcessing_RU tmpExportFactureProcessing()
    {
        return tmpExportFactureProcessing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version = RunBase::getVersion(packedClass);
        container   conQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, conQuery] = packedClass;
                Query query = new Query(conQuery);
                queryRun = new QueryRun(query);
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super(calledFrom);

        if (!calcDate)
        {
            ret = checkFailed("@GLS113151");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static SalesExportFineCalculation_RU construct()
    {
        return new SalesExportFineCalculation_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return  "@GLS113145";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>
