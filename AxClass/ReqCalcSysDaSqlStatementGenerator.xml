<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqCalcSysDaSqlStatementGenerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>ReqCalcSysDaSqlStatementGenerator</c> class generates SQL statements in <c>ReqCalc</c> by SysDa client.
/// </summary>
internal final class ReqCalcSysDaSqlStatementGenerator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>inventOnHandQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generating a query object to find available OnHand for covering a specified requirement transaction.
    /// </summary>
    /// <param name="_inventOnHand">The <c>ReqTrans</c> object which is OnHand type is being searched for covering given issue.</param>
    /// <param name="_issue">An unsettled issue <c>ReqTrans</c> record.</param>
    /// <param name="_setupDim">A <c>ReqSetupDim</c> object that contains coverage settings for a specific item ID and inventory dimensions.</param>
    /// <param name="_reqPlanData">The <c>ReqPlanData</c> class contains parameters and cache data for the current master planning run.</param>
    /// <param name="_isExpiryDateIgnored">Defines whether expiry date should be ignored or not.</param>
    /// <returns>
    ///     Query object <c>SysDaQueryObject</c> for inventory Onhand.
    /// </returns>
    /// <remarks>
    ///     According to Supply automation feature enablement and latest possible supply flag, 
    ///     the 'order by reqDate' is differentiate in the statement.
    /// </remarks>
    /* Original query before conversion:

       select firstonly forupdate inventOnHand
           order by
               PdsExpiryDate,
               ReqDate
           where inventOnHand.PlanVersion                  == _reqTrans.PlanVersion            &&
                 inventOnHand.RefType                      == ReqRefType::InventOnHand         &&
                 inventOnHand.RefId                        == ''                               &&
                 inventOnHand.InventTransOrigin            == 0                                &&
                 inventOnHand.ItemId                       == _reqTrans.ItemId                 &&
                 inventOnHand.CovInventDimId               == _reqTrans.CovInventDimId         &&
                 inventOnHand.OpenStatus                   == ReqOpenStatus::Pos               &&
                 inventOnHand.Direction                    == InventDirection::Receipt         &&
                 (ignoreExpiryDate ||
                   !inventOnHand.PdsExpiryDate || inventOnHand.PdsExpiryDate >= max(_reqTrans.pdsNeedByDate(), reqPlanData.todaysdate()));
    */
    [Hookable(false)]
    internal static SysDaQueryObject inventOnHandQueryObject(
        ReqTrans _inventOnHand,
        ReqTrans _issue,
        ReqSetupDim _setupDim,
        ReqPlanData _reqPlanData,
        boolean _isExpiryDateIgnored)
    {
        SysDaQueryObject inventOnHandQueryObject = new SysDaQueryObject(_inventOnHand);
        inventOnHandQueryObject.forUpdateHint = true;
        inventOnHandQueryObject.firstOnlyHint = true;
        inventOnHandQueryObject.whereClause(
            new SysDaEqualsExpression(
              new SysDaFieldExpression(_inventOnHand, fieldStr(ReqTrans, PlanVersion)),
              new SysDaValueExpression(_issue.PlanVersion))
            .and(
              new SysDaEqualsExpression(
                new SysDaFieldExpression(_inventOnHand, fieldStr(ReqTrans, RefType)),
                new SysDaValueExpression(enum2int(ReqRefType::InventOnHand)))
            )
            .and(
              new SysDaEqualsExpression(
                new SysDaFieldExpression(_inventOnHand, fieldStr(ReqTrans, RefId)),
                new SysDaValueExpression(''))
            )
            .and(
              new SysDaEqualsExpression(
                new SysDaFieldExpression(_inventOnHand, fieldStr(ReqTrans, InventTransOrigin)),
                new SysDaValueExpression(0))
            )
            .and(
              new SysDaEqualsExpression(
                new SysDaFieldExpression(_inventOnHand, fieldStr(ReqTrans, ItemId)),
                new SysDaValueExpression(_issue.ItemId))
            )
            .and(
              new SysDaEqualsExpression(
                new SysDaFieldExpression(_inventOnHand, fieldStr(ReqTrans, CovInventDimId)),
                new SysDaValueExpression(_issue.CovInventDimId))
            )
            .and(
              new SysDaEqualsExpression(
                new SysDaFieldExpression(_inventOnHand, fieldStr(ReqTrans, OpenStatus)),
                new SysDaValueExpression(enum2int(ReqOpenStatus::Pos)))
            )
            .and(
              new SysDaEqualsExpression(
                new SysDaFieldExpression(_inventOnHand, fieldStr(ReqTrans, Direction)),
                new SysDaValueExpression(enum2int(InventDirection::Receipt)))
            ));

        if (!_isExpiryDateIgnored)
        {
            var maxDay = max(_issue.pdsNeedByDate(), _reqPlanData.todaysdate());
            inventOnHandQueryObject.whereClause(inventOnHandQueryObject.whereClause()
            .and(
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventOnHand, fieldStr(ReqTrans, PdsExpiryDate)),
                    new SysDaValueExpression(dateNull())
                )
            .or(
                new SysDaGreaterThanOrEqualsExpression(
                    new SysDaFieldExpression(_inventOnHand, fieldStr(ReqTrans, PdsExpiryDate)),
                    new SysDaValueExpression(maxDay)
                )
            )));
        }
        inventOnHandQueryObject.orderByClause(
            new SysDaOrderBys().add(fieldStr(ReqTrans, PdsExpiryDate)));

        if (_reqPlanData.mustUseLatestPossibleSupplyFirst(_setupDim))
        {
            inventOnHandQueryObject.orderByClause(inventOnHandQueryObject.orderByClause().addDescending(fieldStr(ReqTrans, ReqDate)));
        }
        else
        {
            inventOnHandQueryObject.orderByClause(inventOnHandQueryObject.orderByClause().add(fieldStr(ReqTrans, ReqDate)));
        }

        return inventOnHandQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forecastReduceSupplyQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generating a select query object to search forecasts in order to reduce them with requirement transactions.
    /// </summary>
    /// <param name="_forecast">The forecast type of planned order which needs to be reduced by requirement transactions.</param>
    /// <param name="_reqTrans">A <c>ReqTrans</c> object is about to reduce forecast order.</param>
    /// <param name="_setupDim">A <c>ReqSetupDim</c> object that contains coverage settings for a specific item ID and inventory dimensions.</param>
    /// <param name="_reqPlanData">The <c>ReqPlanData</c> class contains parameters and cache data for the current master planning run.</param>
    /// <param name="_reqPlanVersion">The record ID of the active master plan version.</param>
    /// <returns>
    ///     Query object <c>SysDaQueryObject</c> for reducing forecast by supply.
    /// </returns>
    /// <remarks>
    ///     According to Supply automation feature enablement and latest possible supply flag,
    ///     the 'order by reqDate' is differentiate in the statement.
    /// </remarks>
    /* Original query before conversion:

       while select forupdate forceselectorder forcenestedloop forecast
               order by ReqDate // forecast must be reduced in ascending order
           where forecast.PlanVersion == this.reqPlanVersionRefRecId()
                  && forecast.ItemId == itemId
                  && forecast.CovInventDimId == covInventDimId
                  && forecast.IsForecastPurch
               join reqTrans
                   where reqTrans.PlanVersion == forecast.PlanVersion
                      && reqTrans.RefType == forecast.RefType
                      && reqTrans.RefId == forecast.RefId
                      && reqTrans.ItemId == itemId
                      && reqTrans.CovInventDimId == covInventDimId
                      && reqTrans.IsForecastPurch
    */
    [Hookable(false)]
    internal static SysDaQueryObject forecastReduceSupplyQuery(
        ReqPO _forecast,
        ReqTrans _reqTrans,
        ReqSetupDim _setupDim,
        ReqPlanData _reqPlanData,
        RefRecId _reqPlanVersion)
    {
        ItemId  itemId = _setupDim.itemId();
        InventdimId covInventDimId = _setupDim.inventDim().InventDimId;

        SysDaQueryObject forecastQueryObject = new SysDaQueryObject(_forecast);
        forecastQueryObject.forUpdateHint = true;
        forecastQueryObject.forceSelectOrderHint = true;
        forecastQueryObject.forceNestedLoopHint = true;

        forecastQueryObject.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_forecast, fieldStr(ReqPO, PlanVersion)),
                new SysDaValueExpression(_reqPlanVersion))
            .and(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_forecast, fieldStr(ReqPO, ItemId)),
                new SysDaValueExpression(itemId))
            )
            .and(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_forecast, fieldStr(ReqPO, CovInventDimId)),
                new SysDaValueExpression(covInventDimId))
            )
            .and(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_forecast, fieldStr(ReqPO, IsForecastPurch)),
                new SysDaValueExpression(enum2int(NoYes::Yes)))
            ));

        if (_reqPlanData.mustUseLatestPossibleSupplyFirst(_setupDim))
        {
            forecastQueryObject.orderByClause(new SysDaOrderBys().addDescending(fieldStr(ReqPO, ReqDate)));
        }
        else
        {
            forecastQueryObject.orderByClause(new SysDaOrderBys().add(fieldStr(ReqPO, ReqDate)));
        }
        
        // Join ReqTrans
        SysDaQueryObject reqTransQueryObject = new SysDaQueryObject(_reqTrans);
        
        forecastQueryObject.joinClause(SysDaJoinKind::InnerJoin , reqTransQueryObject);
        reqTransQueryObject.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_reqTrans, fieldStr(ReqTrans, PlanVersion)),
                new SysDaFieldExpression(_forecast, fieldStr(ReqPo, PlanVersion)))
            .and(
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(_reqTrans, fieldStr(ReqTrans, RefType)),
                    new SysDaFieldExpression(_forecast, fieldStr(ReqPo, RefType)))
            )
            .and(
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(_reqTrans, fieldStr(ReqTrans, RefId)),
                    new SysDaFieldExpression(_forecast, fieldStr(ReqPo, RefId)))
            )
            .and(
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(_reqTrans, fieldStr(ReqTrans, ItemId)),
                    new SysDaValueExpression(itemId))
            )
            .and(
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(_reqTrans, fieldStr(ReqTrans, CovInventDimId)),
                    new SysDaValueExpression(covInventDimId))
            )
            .and(
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(_reqTrans, fieldStr(ReqTrans, IsForecastPurch)),
                    new SysDaValueExpression(enum2int(NoYes::Yes)))
            ));
        
        return forecastQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPmfFindExistingCoProductQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generating a query to find existing co-product receipt to fulfill planning demand for issue transaction.
    /// </summary>
    /// <param name="_receipt">The receipt is being searched for co-product to fulfill the given issue.</param>
    /// <param name="_issue">An unsettled issue <c>ReqTrans</c> record.</param>
    /// <param name="_setupDim">A <c>ReqSetupDim</c> object that contains coverage settings for a specific item ID and inventory dimensions.</param>
    /// <param name="_reqPlanData">The <c>ReqPlanData</c> class contains parameters and cache data for the current master planning run.</param>
    /// <param name="_searchFrom">The earliest date of a valid receipt.</param>
    /// <param name="_searchTo">The latest date of a valid receipt.</param>
    /// <returns>
    ///     Query object <c>SysDaQueryObject</c> for existing co-product supply.
    /// </returns>
    /// <remarks>
    ///     According to Supply automation feature enablement and latest possible supply flag,
    ///     the 'order by reqDate' is differentiate in the statement.
    /// </remarks>
    /* Original query before conversion:

       select firstonly forupdate receipt
           order by ReqDate
           where receipt.PlanVersion           == _issue.PlanVersion
               && receipt.OpenStatus           == ReqOpenStatus::Zero
               && receipt.ItemId               == _issue.ItemId
               && receipt.CovInventDimId       == _issue.CovInventDimId
               && receipt.Direction            == InventDirection::Receipt
               && receipt.ReqDate              >= searchFrom
               && (receipt.ReqDate             <  searchTo
                   || (receipt.ReqDate == searchTo && receipt.ReqTime <= _issue.ReqTime))
               && receipt.RefType             == ReqRefType::PmfCoProduct
               && (!receipt.PdsExpiryDate || receipt.PdsExpiryDate >= _issue.pdsNeedByDate())

           exists join pmfFormulaCoBy
               where  pmfFormulaCoBy.RecId == receipt.PmfCoByRefRecId
           exists join bomVersion
               where bomVersion.RecId == pmfFormulaCoBy.bomVersionRefRecId
                  && bomVersion.ItemId == _setupDim.setup().inventTable().PmfPlanningItemId;
    */
    [Hookable(false)]
    internal static SysDaQueryObject runPmfFindExistingCoProductQuery(
        ReqTrans _receipt,
        ReqTrans _issue,
        ReqSetupDim _setupDim,
        ReqPlanData _reqPlanData,
        TransDate _searchFrom,
        TransDate _searchTo)
    {
        SysDaQueryObject receiptQueryObject = new SysDaQueryObject(_receipt);
        receiptQueryObject.forUpdateHint = true;
        receiptQueryObject.firstOnlyHint = true;
        receiptQueryObject.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_receipt, fieldStr(ReqTrans, PlanVersion)),
                new SysDaValueExpression(_issue.PlanVersion))
            .and(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_receipt, fieldStr(ReqTrans, OpenStatus)),
                new SysDaValueExpression(enum2int(ReqOpenStatus::Zero)))
            )
            .and(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_receipt, fieldStr(ReqTrans, ItemId)),
                new SysDaValueExpression(_issue.ItemId))
            )
            .and(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_receipt, fieldStr(ReqTrans, CovInventDimId)),
                new SysDaValueExpression(_issue.CovInventDimId))
            )
            .and(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_receipt, fieldStr(ReqTrans, Direction)),
                new SysDaValueExpression(enum2int(InventDirection::Receipt)))
            )
            .and(
            new SysDaGreaterThanOrEqualsExpression(
                new SysDaFieldExpression(_receipt, fieldStr(ReqTrans, ReqDate)),
                new SysDaValueExpression(_searchFrom))
            )
            .and(
            new SysDaLessThanExpression(
                new SysDaFieldExpression(_receipt, fieldStr(ReqTrans, ReqDate)),
                new SysDaValueExpression(_searchTo))
                .or(
                    new SysDaEqualsExpression(
                        new SysDaFieldExpression(_receipt, fieldStr(ReqTrans, ReqDate)),
                        new SysDaValueExpression(_searchTo))
                    .and(
                        new SysDaLessThanOrEqualsExpression(
                            new SysDaFieldExpression(_receipt, fieldStr(ReqTrans, ReqDate)),
                            new SysDaValueExpression(_issue.ReqTime)
                        )
                    )
                )
            .and(
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(_receipt, fieldStr(ReqTrans, RefType)),
                    new SysDaValueExpression(enum2int(ReqRefType::PmfCoProduct)))
                )
            )
            .and(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_receipt, fieldStr(ReqTrans, PdsExpiryDate)),
                new SysDaValueExpression(dateNull()))
                .or(
                    new SysDaGreaterThanOrEqualsExpression(
                        new SysDaFieldExpression(_receipt, fieldStr(ReqTrans, PdsExpiryDate)),
                        new SysDaValueExpression(_issue.pdsNeedByDate()))
                )
            ));

        if (_reqPlanData.mustUseLatestPossibleSupplyFirst(_setupDim))
        {
            receiptQueryObject.orderByClause(new SysDaOrderBys().addDescending(fieldStr(ReqPO, ReqDate)));
        }
        else
        {
            receiptQueryObject.orderByClause(new SysDaOrderBys().add(fieldStr(ReqPO, ReqDate)));
        }

        // Exists co-product
        PmfFormulaCoBy existsPmfFormulaCoBy;
        SysDaQueryObject pmfFormulaCoByQueryObject = new SysDaQueryObject(existsPmfFormulaCoBy);
        
        receiptQueryObject.joinClause(SysDaJoinKind::ExistsJoin , pmfFormulaCoByQueryObject);
        pmfFormulaCoByQueryObject.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(existsPmfFormulaCoBy, fieldStr(PmfFormulaCoBy, RecId)),
                new SysDaFieldExpression(_receipt, fieldStr(ReqTrans, PmfCoByRefRecId)))
            );

        // Exists bom version
        BOMVersion existsBomVersion;
        SysDaQueryObject bomVersionQueryObject = new SysDaQueryObject(existsBomVersion);
        
        pmfFormulaCoByQueryObject.joinClause(SysDaJoinKind::ExistsJoin , bomVersionQueryObject);
        bomVersionQueryObject.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(existsBomVersion, fieldStr(BOMVersion, RecId)),
                new SysDaFieldExpression(existsPmfFormulaCoBy, fieldStr(PmfFormulaCoBy, bomVersionRefRecId))).
            and(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(existsBomVersion, fieldStr(BOMVersion, ItemId)),
                new SysDaValueExpression(_setupDim.setup().inventTable().PmfPlanningItemId))
            ));

        return receiptQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runReceiptPeriodQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generating a query to searche for a <c>reqTrans</c> record with a positive free quantity in order to fulfill the issue
    ///     that is meant for it by a period quantity calculation.
    /// </summary>
    /// <param name="_receipt">The receipt is searched within the period in order to fulfill the issue.</param>
    /// <param name="_issue">An unsettled issue <c>ReqTrans</c> record.</param>
    /// <param name="_setupDim">A <c>ReqSetupDim</c> object that contains coverage settings for a specific item ID and inventory dimensions.</param>
    /// <param name="_reqPlanData">The <c>ReqPlanData</c> class contains parameters and cache data for the current master planning run.</param>
    /// <param name="_useReceiptsWithFuturesOnly">A Boolean value specifying whether it is allowed to use receipts for which futures have not been calculated yet.</param>
    /// <param name="_covPeriodReceiptFromDate">Defines the start date of the period.</param>
    /// <param name="_covPeriodReceiptToDate">Defines the end date of the period.</param>
    /// <returns>
    ///     Query object <c>SysDaQueryObject</c> for searching a supply within period.
    /// </returns>
    /// <remarks>
    ///     According to Supply automation feature enablement and latest possible supply flag,
    ///     the 'order by reqDate' is differentiate in the statement.
    /// </remarks>
    /* Original query before conversion:
    
       select firstOnly receipt
           where receipt.PlanVersion               == _issue.PlanVersion
              && receipt.ItemId                    == _issue.ItemId
              && receipt.CovInventDimId            == _issue.CovInventDimId
              && receipt.Direction                 == InventDirection::Receipt
              && receipt.OpenStatus                == ReqOpenStatus::Pos
              && receipt.IsDerivedDirectly         == NoYes::No
              && receipt.ReqDate                   >= covPeriodReceiptFromDate
              && receipt.ReqDate                   <= covPeriodReceiptToDate
              && (!_setupDim.bomVersionReq()   || (_setupDim.bomVersionReq()   && receipt.ItemBomId   == _issue.ItemBomId))
              && (!_setupDim.routeVersionReq() || (_setupDim.routeVersionReq() && receipt.ItemRouteId == _issue.ItemRouteId))
              && receipt.MarkingRefInventTransOrigin == 0
              && (receipt.FuturesCalculated || !_useReceiptsWithFuturesOnly);
    */
    [Hookable(false)]
    internal static SysDaQueryObject runReceiptPeriodQuery(
        ReqTrans _receipt,
        ReqTrans _issue,
        ReqSetupDim _setupDim,
        ReqPlanData _reqPlanData,
        boolean _useReceiptsWithFuturesOnly,
        ReqDate _covPeriodReceiptFromDate,
        ReqDate _covPeriodReceiptToDate)
    {
        SysDaQueryObject receiptQueryObject = new SysDaQueryObject(_receipt);
        receiptQueryObject.firstOnlyHint = true;
        receiptQueryObject.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_receipt, fieldStr(ReqTrans, PlanVersion)),
                new SysDaValueExpression(_issue.PlanVersion))
            .and(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_receipt, fieldStr(ReqTrans, ItemId)),
                new SysDaValueExpression(_issue.ItemId))
            )
            .and(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_receipt, fieldStr(ReqTrans, CovInventDimId)),
                new SysDaValueExpression(_issue.CovInventDimId))
            )
            .and(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_receipt, fieldStr(ReqTrans, Direction)),
                new SysDaValueExpression(enum2int(InventDirection::Receipt)))
            )
            .and(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_receipt, fieldStr(ReqTrans, OpenStatus)),
                new SysDaValueExpression(enum2int(ReqOpenStatus::Pos)))
            )
            .and(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_receipt, fieldStr(ReqTrans, IsDerivedDirectly)),
                new SysDaValueExpression(enum2int(NoYes::No)))
            )
            .and(
            new SysDaGreaterThanOrEqualsExpression(
                new SysDaFieldExpression(_receipt, fieldStr(ReqTrans, ReqDate)),
                new SysDaValueExpression(_covPeriodReceiptFromDate))
            )
            .and(
            new SysDaLessThanOrEqualsExpression(
                new SysDaFieldExpression(_receipt, fieldStr(ReqTrans, ReqDate)),
                new SysDaValueExpression(_covPeriodReceiptToDate))
            )
            .and(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_receipt, fieldStr(ReqTrans, MarkingRefInventTransOrigin)),
                new SysDaValueExpression(0)
            )));
        
        if(_setupDim.bomVersionReq())
        {
            receiptQueryObject.whereClause(receiptQueryObject.whereClause()
                .and(
                    new SysDaEqualsExpression(
                        new SysDaFieldExpression(_receipt, fieldStr(ReqTrans, ItemBomId)),
                        new SysDaValueExpression(_issue.ItemBomId))
                    )
                );
        }

        if(_setupDim.routeVersionReq())
        {
            receiptQueryObject.whereClause(receiptQueryObject.whereClause()
                .and(
                    new SysDaEqualsExpression(
                        new SysDaFieldExpression(_receipt, fieldStr(ReqTrans, ItemRouteId)),
                        new SysDaValueExpression(_issue.ItemRouteId))
                    )
                );
        }
        
        if(_useReceiptsWithFuturesOnly)
        {
            receiptQueryObject.whereClause(receiptQueryObject.whereClause()
                .and(
                    new SysDaNotEqualsExpression( // check whether it is NOT
            new SysDaFieldExpression(_receipt, fieldStr(ReqTrans, FuturesCalculated)),
                        new SysDaValueExpression(dateNull()))
                    )
                );
        }

        if (_reqPlanData.mustUseLatestPossibleSupplyFirst(_setupDim))
        {
            receiptQueryObject.orderByClause(new SysDaOrderBys().addDescending(fieldStr(ReqTrans, ReqDate)));
        }

        return receiptQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>demandForecastToReduceQueryObject</Name>
				<Source><![CDATA[
    /* Original query before conversion:

    while select forupdate forecast
        order by ReqDate
        where forecast.PlanVersion         == this.reqPlanVersionRefRecId()
            && forecast.ItemId              == itemId
            && forecast.CovInventDimId      == inventDimId
            && forecast.RefType             == ReqRefType::SalesForecast
    */
    [Hookable(false)]
    internal static SysDaQueryObject demandForecastToReduceQueryObject(ReqTrans _forecast, ItemId _itemId, InventDimId _inventDimId, RefRecId reqPlanVersionRefRecId)
    {
        SysDaQueryObject forecastQueryObject = new SysDaQueryObject(_forecast);
        forecastQueryObject.forUpdateHint = true;

        forecastQueryObject.whereClause(
            new SysDaEqualsExpression(
              new SysDaFieldExpression(_forecast, fieldStr(ReqTrans, PlanVersion)),
              new SysDaValueExpression(reqPlanVersionRefRecId))
            .and(
              new SysDaEqualsExpression(
                new SysDaFieldExpression(_forecast, fieldStr(ReqTrans, ItemId)),
                new SysDaValueExpression(_itemId))
            )
            .and(
              new SysDaEqualsExpression(
                new SysDaFieldExpression(_forecast, fieldStr(ReqTrans, CovInventDimId)),
                new SysDaValueExpression(_inventDimId))
            )
            .and(
              new SysDaEqualsExpression(
                new SysDaFieldExpression(_forecast, fieldStr(ReqTrans, RefType)),
                new SysDaValueExpression(enum2int(ReqRefType::SalesForecast)))
            ));

        forecastQueryObject.orderByClause(
            new SysDaOrderBys().add(fieldStr(ReqTrans, ReqDate)));

        return forecastQueryObject;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>