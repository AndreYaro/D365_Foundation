<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostStatementCacheConsumer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostStatementCacheConsumer</c> class implements a common consumer that must be used for
/// all consumers of cost statement cache.
/// </summary>
public final class CostStatementCacheConsumer implements SysIDataCacheConsumer
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmConsumer</Name>
				<Source><![CDATA[
    public SysIDataConsumer parmConsumer()
    {
        return SysDataConsumerFactory::newFromType(SysDataConsumerTypeEnum::DataSet, classStr(CostStatementCacheDataSet));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryable</Name>
				<Source><![CDATA[
    public SysIQueryable parmQueryable()
    {
        Query query = new Query();
        query.addDataSource(tableNum(CostStatementCacheTrackDeltaUpdate));

        return SysQueryableFactory::newFromQuery(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFilter</Name>
				<Source><![CDATA[
    public SysIFilter parmFilter()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CostStatementCacheConsumer construct()
    {
        return new CostStatementCacheConsumer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareDataSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the cost statement cache dataset.
    /// </summary>
    public static void prepareDataSet()
    {
        SysDataSetService::prepareDataSet(CostStatementCacheConsumer::construct());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the last update date for the cost statement dataset.
    /// </summary>
    /// <returns>
    /// The last update date for the cost statement dataset.
    /// </returns>
    public static SysDataCacheLastUpdate getLastUpdate()
    {
        SysIDataCacheConsumer cacheConsumer = CostStatementCacheConsumer::construct();
        SysIDataConsumer dataConsumer = cacheConsumer.parmConsumer();
        SysIDataCacheConfigurationManager manager = SysDataCacheConfigurationManagerFactory::newFromType(dataConsumer.parmType());
        SysIDataCacheConfiguration cacheConfiguration = manager.getConfigurationForConsumer(dataConsumer.parmIdentifier());
        SysIDataContext dataContext = SysDataContextBuilder::newContextWithFilter(cacheConsumer.parmFilter(), cacheConfiguration.parmFilteringEnabled());
        SysIDataCacheContextManager cacheContextManager = SysDataCacheContextManagerFactory::newManager();
        SysIDataCacheContext cacheContext = cacheContextManager.findOrCreateCacheContext(dataConsumer.parmType(), dataConsumer.parmIdentifier(),dataContext.parmId());

        return cacheContextManager.getLastUpdate(cacheContext.parmId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>forcePrepareDataSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the cost statement cache dataset.
    /// </summary>
    public static void forcePrepareDataSet()
    {
        SysIDataCacheConsumer cacheConsumer = CostStatementCacheConsumer::construct();
        SysIDataConsumer dataConsumer = cacheConsumer.parmConsumer();
        SysIDataCacheConfigurationManager manager = SysDataCacheConfigurationManagerFactory::newFromType(dataConsumer.parmType());
        SysIDataCacheConfiguration cacheConfiguration = manager.getConfigurationForConsumer(dataConsumer.parmIdentifier());
        SysIDataContext dataContext = SysDataContextBuilder::newContextWithFilter(cacheConsumer.parmFilter(), cacheConfiguration.parmFilteringEnabled());
        SysIDataCacheContextManager cacheContextManager = SysDataCacheContextManagerFactory::newManager();
        SysIDataCacheContext cacheContext = cacheContextManager.findOrCreateCacheContext(dataConsumer.parmType(), dataConsumer.parmIdentifier(),dataContext.parmId());
        SysIDataCacheManager cacheManager = SysDataCacheManagerFactory::newFromType(dataConsumer.parmType(), dataConsumer.parmIdentifier());

        cacheManager.forceRefreshCache(cacheContext);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>