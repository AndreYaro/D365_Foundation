<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CzTaxDocumentFormEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CzTaxDocumentFormEngine</c> provides several functions to the
/// <c>CzTaxDocument</c> form.
/// </summary>
final class CzTaxDocumentFormEngine
{
    Map taxCache, settledNonInvoice;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
        private CzCalcTaxes find(CzTaxDocumentTable _document)
    {
        CzCalcTaxes ret;

        if (taxCache.exists(_document.RecId))
        {
            ret = taxCache.lookup(_document.RecId);
        }
        else
        {
            ret = CzTaxDocumentFormEngine::calc(_document);
            taxCache.insert(_document.RecId, ret);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new()
    {
        taxCache          = new Map(typeName2Type(extendedTypeStr(recId)), Types::Class);
        settledNonInvoice = new Map(typeName2Type(extendedTypeStr(recId)), Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears and recalculates the tax and settlement values for the tax document.
    /// </summary>
    /// <param name="_document">
    /// Tax document to recalculate.
    /// </param>
    public void recalcDocument(CzTaxDocumentTable _document)
    {
        taxCache.remove(_document.RecId);
        settledNonInvoice.remove(_document.RecId);

        this.find(_document);
        this.settlementFind(_document);
    }

]]></Source>
			</Method>
			<Method>
				<Name>settledCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the amount settled for the tax document in transaction currency.
    /// </summary>
    /// <param name="_document">
    /// The tax document to find settled amount for.
    /// </param>
    /// <returns>
    /// The settled amount for the tax document in transaction currency.
    /// </returns>
    public Amount settledCur(CzTaxDocumentTable _document)
    {
        return conpeek(this.settlementFind(_document), 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>settledMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the amount settled for the tax document in accounting currency.
    /// </summary>
    /// <param name="_document">
    /// The tax document to find settled amount for.
    /// </param>
    /// <returns>
    /// The settled amount for the tax document in accounting currency.
    /// </returns>
    public Amount settledMST(CzTaxDocumentTable _document)
    {
        return conpeek(this.settlementFind(_document), 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>settlementCalc</Name>
				<Source><![CDATA[
        private container settlementCalc(CzTaxDocumentTable _document)
    {
        container           ret;

        CustVendSettlement  settlement;
        CustVendTrans       paymentTrans, nonInvoiceTrans;
        CzTaxDocumentLink   link;

        int                 sign;

        if (_document)
        {
            paymentTrans    = new DictTable(_document.TransTableId).makeRecord();
            nonInvoiceTrans = new DictTable(_document.TransTableId).makeRecord();

            switch (_document.TransTableId)
            {
                case tablenum(CustTrans) :
                    settlement = new DictTable(tablenum(CustSettlement)).makeRecord();
                    sign       = -1;
                    break;
                case tablenum(VendTrans) :
                    settlement = new DictTable(tablenum(VendSettlement)).makeRecord();
                    sign       = 1;
                    break;
            }

            select sum(SettleAmountCur), sum(SettleAmountMST)
            from settlement
                where settlement.CanBeReversed
            exists join paymentTrans
                where paymentTrans.RecId      == settlement.TransRecId
            exists join link
                where link.TaxDocumentRecId   == _document.RecId        &&
                      link.TransVoucher       == paymentTrans.Voucher   &&
                      link.TransDate          == paymentTrans.TransDate
            exists join nonInvoiceTrans
                where   nonInvoiceTrans.RecId == settlement.OffsetRecId &&
                      ! nonInvoiceTrans.Invoice;

            ret = [ sign * settlement.SettleAmountMST,
                    sign * settlement.SettleAmountCur ];
        }
        else
        {
            ret = [ 0, 0 ];
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settlementFind</Name>
				<Source><![CDATA[
        private container settlementFind(CzTaxDocumentTable _document)
    {
        container ret;

        if (settledNonInvoice.exists(_document.RecId))
        {
            ret = settledNonInvoice.lookup(_document.RecId);
        }
        else
        {
            ret = this.settlementCalc(_document);
            settledNonInvoice.insert(_document.RecId, ret);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax amount in transaction currency for the specified
    /// <c>TaxType_W</c>.
    /// </summary>
    /// <param name="_document">
    /// Tax document to find the amount for.
    /// </param>
    /// <param name="_taxType">
    /// <c>TaxType_W</c> to find the amount for.
    /// </param>
    /// <returns>
    /// The tax amount in transaction currency.
    /// </returns>
    TaxAmountCur taxAmountCur(CzTaxDocumentTable _document, TaxType_W _taxType)
    {
        return this.find(_document).taxAmountCur(_taxType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountCur_Other</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax amount in transaction currency where the <c>TaxType_W</c> of the
    /// tax is Other.
    /// </summary>
    /// <param name="_document">
    /// Tax document to find the amount for.
    /// </param>
    /// <returns>
    /// The tax amount in transaction currency.
    /// </returns>
    public TaxAmountCur taxAmountCur_Other(CzTaxDocumentTable _document)
    {
        return this.find(_document).taxAmountCur_Other();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountCur_VAT_Full</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax amount in transaction currency where the <c>TaxType_W</c> of the
    /// tax is Standard VAT.
    /// </summary>
    /// <param name="_document">
    /// Tax document to find the amount for.
    /// </param>
    /// <returns>
    /// The tax amount in transaction currency.
    /// </returns>
    public TaxAmountCur taxAmountCur_VAT_Full(CzTaxDocumentTable _document)
    {
        return this.find(_document).taxAmountCur_VAT_Full();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountCur_VAT_Reduced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax amount in transaction currency where the <c>TaxType_W</c> of the
    /// tax is Reduced VAT.
    /// </summary>
    /// <param name="_document">
    /// Tax document to find the amount for.
    /// </param>
    /// <returns>
    /// The tax amount in transaction currency.
    /// </returns>
    public TaxAmountCur taxAmountCur_VAT_Reduced(CzTaxDocumentTable _document)
    {
        return this.find(_document).taxAmountCur_VAT_Reduced();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax amount in accounting currency for the specified <c>TaxType_W</c>.
    /// </summary>
    /// <param name="_document">
    /// Tax document to find the amount for.
    /// </param>
    /// <param name="_taxType">
    /// <c>TaxType_W</c> to find the amount for.
    /// </param>
    /// <returns>
    /// The tax amount in accounting currency.
    /// </returns>
    TaxAmountCur taxAmountMST(CzTaxDocumentTable _document, TaxType_W _taxType)
    {
        return this.find(_document).taxAmountMST(_taxType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountMST_Other</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax amount in accounting currency where the <c>TaxType_W</c> of the
    /// tax is Other.
    /// </summary>
    /// <param name="_document">
    /// Tax document to find the amount for.
    /// </param>
    /// <returns>
    /// The tax amount in accounting currency.
    /// </returns>
    public TaxAmount taxAmountMST_Other(CzTaxDocumentTable _document)
    {
        return this.find(_document).taxAmountMST_Other();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountMST_VAT_Full</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax amount in accounting currency where the <c>TaxType_W</c> of the
    /// tax is Standard VAT.
    /// </summary>
    /// <param name="_document">
    /// Tax document to find the amount for.
    /// </param>
    /// <returns>
    /// The tax amount in accounting currency.
    /// </returns>
    public TaxAmount taxAmountMST_VAT_Full(CzTaxDocumentTable _document)
    {
        return this.find(_document).taxAmountMST_VAT_Full();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountMST_VAT_Reduced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax amount in accounting currency where the <c>TaxType_W</c> of the
    /// tax is Reduced VAT.
    /// </summary>
    /// <param name="_document">
    /// Tax document to find the amount for.
    /// </param>
    /// <returns>
    /// The tax amount in accounting currency.
    /// </returns>
    public TaxAmount taxAmountMST_VAT_Reduced(CzTaxDocumentTable _document)
    {
        return this.find(_document).taxAmountMST_VAT_Reduced();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax base amount in transaction currency for the specified
    /// <c>TaxType_W</c>.
    /// </summary>
    /// <param name="_document">
    /// Tax document to find the amount for.
    /// </param>
    /// <param name="_taxType">
    /// <c>TaxType_W</c> to find the base amount for.
    /// </param>
    /// <returns>
    /// The tax base amount in transaction currency.
    /// </returns>
    TaxAmountCur taxBaseAmountCur(CzTaxDocumentTable _document, TaxType_W _taxType)
    {
        return this.find(_document).taxBaseAmountCur(_taxType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmountCur_Other</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax base amount in transaction currency where the <c>TaxType_W</c>
    /// of the tax is Other.
    /// </summary>
    /// <param name="_document">
    /// Tax document to find the amount for.
    /// </param>
    /// <returns>
    /// The tax base amount in transaction currency.
    /// </returns>
    public TaxAmountCur taxBaseAmountCur_Other(CzTaxDocumentTable _document)
    {
        return this.find(_document).taxBaseAmountCur_Other();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmountCur_VAT_Full</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax base amount in transaction currency where the <c>TaxType_W</c>
    /// of the tax is Standard VAT.
    /// </summary>
    /// <param name="_document">
    /// Tax document to find the amount for.
    /// </param>
    /// <returns>
    /// The tax base amount in transaction currency.
    /// </returns>
    public TaxAmountCur taxBaseAmountCur_VAT_Full(CzTaxDocumentTable _document)
    {
        return this.find(_document).taxBaseAmountCur_VAT_Full();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmountCur_VAT_Reduced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax base amount in transaction currency where the <c>TaxType_W</c>
    /// of the tax is Reduced VAT.
    /// </summary>
    /// <param name="_document">
    /// Tax document to find the amount for.
    /// </param>
    /// <returns>
    /// The tax base amount in transaction currency.
    /// </returns>
    public TaxAmountCur taxBaseAmountCur_VAT_Reduced(CzTaxDocumentTable _document)
    {
        return this.find(_document).taxBaseAmountCur_VAT_Reduced();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax base amount in accounting currency for the specified
    /// <c>TaxType_W</c>.
    /// </summary>
    /// <param name="_document">
    /// Tax document to find the amount for.
    /// </param>
    /// <param name="_taxType">
    /// <c>TaxType_W</c> to find the amount for.
    /// </param>
    /// <returns>
    /// The tax base amount in accounting currency.
    /// </returns>
    TaxAmountCur taxBaseAmountMST(CzTaxDocumentTable _document, TaxType_W _taxType)
    {
        return this.find(_document).taxBaseAmountMST(_taxType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmountMST_Other</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax base amount in accounting currency where the <c>TaxType_W</c>
    /// of the tax is Other.
    /// </summary>
    /// <param name="_document">
    /// Tax document to find the amount for.
    /// </param>
    /// <returns>
    /// The tax base amount in accounting currency.
    /// </returns>
    public TaxAmount taxBaseAmountMST_Other(CzTaxDocumentTable _document)
    {
        return this.find(_document).taxBaseAmountMST_Other();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmountMST_VAT_Full</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax base amount in accounting currency where the <c>TaxType_W</c>
    /// of the tax is Standard VAT.
    /// </summary>
    /// <param name="_document">
    /// Tax document to find the amount for.
    /// </param>
    /// <returns>
    /// The tax base amount in accounting currency.
    /// </returns>
    public TaxAmount taxBaseAmountMST_VAT_Full(CzTaxDocumentTable _document)
    {
        return this.find(_document).taxBaseAmountMST_VAT_Full();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmountMST_VAT_Reduced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax base amount in accounting currency where the <c>TaxType_W</c>
    /// of the tax is Reduced VAT.
    /// </summary>
    /// <param name="_document">
    /// Tax document to find the amount for.
    /// </param>
    /// <returns>
    /// The tax base amount in accounting currency.
    /// </returns>
    public TaxAmount taxBaseAmountMST_VAT_Reduced(CzTaxDocumentTable _document)
    {
        return this.find(_document).taxBaseAmountMST_VAT_Reduced();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
        private static CzCalcTaxes calc(CzTaxDocumentTable _document)
    {
        CzCalcTaxes          calc;
        CzTaxCreditMemo      memo;
        CzTaxCreditMemoTrans memoTrans;
        CzTaxDocumentTrans   docTrans;

        select sum(AmountCur),
               sum(AmountMST),
               sum(VATAmountCur),
               sum(VATAmountMST),
               VATType,
               VATValue
            from memoTrans
            group by VATType, VATValue
        exists join memo
            where memo.RecId            == memoTrans.HeaderRecId &&
                  memo.TaxDocumentRecId == _document.RecId;

        calc = CzCalcTaxes::construct(memoTrans, true);
        calc.calc();

        while select sum(AmountCur),
                     sum(AmountMST),
                     sum(VATAmountCur),
                     sum(VATAmountMST),
                     VATType,
                     VATValue
            from docTrans
            group by VATType, VATValue
            where docTrans.HeaderRecId == _document.RecId
        {
            calc.add(docTrans.VATType,
                     docTrans.VATAmountMST,
                     docTrans.vATBaseMST(),
                     docTrans.VATAmountCur,
                     docTrans.vATBaseCur(),
                     docTrans.VATValue);
        }

        return calc;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>