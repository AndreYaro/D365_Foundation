<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjActivityCapacity</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to calculate the staffing entity like project, quotation and it's activities sum of reservation hours and scheduling status.
/// </summary>
class ProjActivityCapacity
{
    #TimeConstants
    #OCCRetryCount

    private static const str LoggerRetryExceptionMsg = 'Max %1 retries exceeded for %2 method. ProjPlanVersionRecId: %3'; 

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>sumBookedHoursPerStaffableEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the total booked hours for a certain project/quotation during a period of time.
    /// </summary>
    /// <param name="_projId">
    /// The project id.
    /// </param>
    /// <param name="_quotationId">
    /// The quotation id.
    /// </param>
    /// <param name="_commitment">
    /// The commitment type to search for.
    /// </param>
    /// <param name="_excludeGenericResource">
    /// Indicate whether to exclude generic resoruce.
    /// </param>
    /// <param name="_dateFrom">
    /// The start date of the period of time.
    /// </param>
    /// <param name="_dateTo">
    /// The end date of the period of time.
    /// </param>
    /// <returns>
    /// Total assignement hours for selected staffable entity.
    /// </returns>
    /// <remarks>
    /// It returns the total of hard booked hours excluding generic resource by default.
    /// </remarks>
    static public Hours sumBookedHoursPerStaffableEntity(   ProjId          _projId = '',
                                                            QuotationId     _quotationId = '',
                                                            ResCommitType   _commitment = ResCommitType::HardBook,
                                                            boolean         _excludeGenericResource = true,
                                                            utcdatetime     _dateFrom = utcDateTimeNull(),
                                                            utcdatetime     _dateTo = utcDateTimeNull())
    {
        #TimeConstants
        Hours               sumHours = 0;
        ResBookingView      resBookingView;
        PSAProjSchedRole    projectTeam;

        if (_projId || _quotationId)
        {
            if (prmisDefault(_dateFrom) && prmisDefault(_dateTo))
            {
                select sum(Capacity) from resBookingView
                    join RecId from projectTeam
                        where projectTeam.RecId == resBookingView.ActivityResource
                            && projectTeam.ProjId == _projId
                            && projectTeam.QuotationId == _quotationId
                            && (_commitment == ResCommitType::AnyType || resBookingView.CommitType == _commitment)
                            && (!_excludeGenericResource ||  projectTeam.Resource  != 0);
            }
            else
            {
                select sum(Capacity) from resBookingView
                    join RecId from projectTeam
                        where projectTeam.RecId == resBookingView.ActivityResource
                            && projectTeam.ProjId == _projId
                            && projectTeam.QuotationId == _quotationId
                            && (!_excludeGenericResource ||  projectTeam.Resource  != 0)
                            && (_commitment == ResCommitType::AnyType || resBookingView.CommitType == _commitment)
                            && resBookingView.Day >= _dateFrom
                            && resBookingView.Day <= _dateTo;
            }
            if (resBookingView)
            {
                sumHours = resBookingView.Capacity / #SecondsPerHour;
            }
        }

        return sumHours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectTotalHardBookedHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves total project hard booked hours for given project.
    /// </summary>
    /// <param name = "_projId">The Id of the project to retrieve hours for</param>
    /// <returns>Hard booked hours including the hours booked for generic resources</returns>
    static public Hours getProjectTotalHardBookedHours(ProjId _projId)
    {
        return ProjActivityCapacity::sumBookedHoursPerStaffableEntity(_projId, "", ResCommitType::HardBook, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumAssignedHoursPerStaffableEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the total assigned hours for a certain project/quotation during a period of time.
    /// </summary>
    /// <param name="_projId">
    /// The project id.
    /// </param>
    /// <param name="_quotationId">
    /// The quotation id.
    /// </param>
    /// <param name="_commitment">
    /// The commitment type to search for.
    /// </param>
    /// <param name="_excludeGenericResource">
    /// Indicate whether to exclude generic resoruce.
    /// </param>
    /// <param name="_dateFrom">
    /// The start date of the period of time.
    /// </param>
    /// <param name="_dateTo">
    /// The end date of the period of time.
    /// </param>
    /// <returns>
    /// Total assignement hours for selected staffable entity.
    /// </returns>
    /// <remarks>
    /// It returns the total of hard assigned hours excluding generic resource by default.
    /// </remarks>
    static public Hours sumAssignedHoursPerStaffableEntity( ProjId          _projId = '',
                                                            QuotationId     _quotationId = '',
                                                            ResCommitType   _commitment = ResCommitType::HardBook,
                                                            boolean         _excludeGenericResource = true,
                                                            utcdatetime     _dateFrom = utcDateTimeNull(),
                                                            utcdatetime     _dateTo = utcDateTimeNull())
    {
        #TimeConstants
        Hours               sumHours = 0;
        ResAssignmentView   resAssignmentView;
        PSAProjSchedRole    projectTeam;

        if (_projId || _quotationId)
        {
            if (prmisDefault(_dateFrom) && prmisDefault(_dateTo))
            {
                select sum(Capacity) from resAssignmentView
                    join RecId from projectTeam
                        where projectTeam.RecId == resAssignmentView.ActivityResource
                            && projectTeam.ProjId == _projId
                            && projectTeam.QuotationId == _quotationId
                            && (_commitment == ResCommitType::AnyType || resAssignmentView.CommitType == _commitment)
                            && (!_excludeGenericResource ||  projectTeam.Resource  != 0);
            }
            else
            {
                select sum(Capacity) from resAssignmentView
                    join RecId from projectTeam
                        where projectTeam.RecId == resAssignmentView.ActivityResource
                            && projectTeam.ProjId == _projId
                            && projectTeam.QuotationId == _quotationId
                            && (!_excludeGenericResource ||  projectTeam.Resource  != 0)
                            && (_commitment == ResCommitType::AnyType || resAssignmentView.CommitType == _commitment)
                            && resAssignmentView.Day >= _dateFrom
                            && resAssignmentView.Day <= _dateTo;
            }
            if (resAssignmentView)
            {
                sumHours = resAssignmentView.Capacity / #SecondsPerHour;
            }
        }

        return sumHours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>combineStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the project's final status based on Team assignment and WBS status.
    /// </summary>
    /// <param name="_teamStatus">
    /// The team status based on role assignment.
    /// </param>
    /// <param name="_wbsStatus">
    /// The WBS status based on WBS assignment.
    /// </param>
    /// <returns>
    /// The combined status.
    /// </returns>
    public static PSAScheduled combineStatus(PSAScheduled _teamStatus, PSAScheduled _wbsStatus)
    {
        PSAScheduled   combinedStatus;

        combinedStatus = (_teamStatus == _wbsStatus) ? _teamStatus : PSAScheduled::PartiallyScheduled;

        return combinedStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the project status based on role assignment.
    /// </summary>
    /// <param name="_projId">
    /// Project ID.
    /// </param>
    /// <returns>
    /// Project scheduling status.
    /// </returns>
    public static PSAScheduled getProjStatus(ProjId _projId)
    {
        ResBookingView      resBookingView;
        ResAssignmentView   resAssignmentView;
        PSAProjSchedRole    psaProjSchedRole;
        PSAScheduled        scheduleStatus;

        //---is there any team member being booked?
        select firstonly psaProjSchedRole
        where psaProjSchedRole.ProjId  == _projId
            && psaProjSchedRole.Resource
        exists join resBookingView
            where resBookingView.ActivityResource == psaProjSchedRole.RecId
                && resBookingView.CommitType == ResCommitType::HardBook;

        if (!psaProjSchedRole)
        {
            //---is there any team member being assigned?
            select firstonly psaProjSchedRole
            where psaProjSchedRole.ProjId  == _projId
                && psaProjSchedRole.Resource
            exists join resAssignmentView
                where resAssignmentView.ActivityResource == psaProjSchedRole.RecId
                    && resAssignmentView.CommitType == ResCommitType::HardBook;
        }

        scheduleStatus = psaProjSchedRole ? PSAScheduled::PartiallyScheduled : PSAScheduled::NotScheduled;

        if (scheduleStatus == PSAScheduled::PartiallyScheduled)
        {
            //---is there any generic resource?
            select firstonly psaProjSchedRole
            where psaProjSchedRole.ProjId == _projId
                && psaProjSchedRole.Resource == 0
                exists join resBookingView
                    where resBookingView.ActivityResource == psaProjSchedRole.RecId
                        && resBookingView.CommitType == ResCommitType::HardBook;

            scheduleStatus = psaProjSchedRole ? PSAScheduled::PartiallyScheduled : PSAScheduled::FullyScheduled;
        }

        return scheduleStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetPSAScheduleStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get project/activity's schedule status based on effort and committed hours.
    /// </summary>
    /// <param name="_effort">
    /// Effort hours for current project/activity.
    /// </param>
    /// <param name="_reservedHours">
    /// Reserved hours for current project/activity.
    /// </param>
    /// <returns>
    /// The current project/activity's schedule status.
    /// </returns>
    public static PSAScheduled GetPSAScheduleStatus(Hours _effort, Hours _reservedHours)
    {
        PSAScheduled projScheduleStatus = PSAScheduled::NotScheduled;

        if ((abs(_effort - _reservedHours) < 0.1) &&
            !((_effort == 0) && (_reservedHours == 0)))
        {
            projScheduleStatus = PSAScheduled::FullyScheduled;
        }
        else if (_reservedHours < _effort && _reservedHours > 0)
        {
            projScheduleStatus = PSAScheduled::PartiallyScheduled;
        }
        else if ((_effort < _reservedHours) && (_reservedHours != 0))
        {
            projScheduleStatus = PSAScheduled::FullyScheduledConflict;
        }

        return projScheduleStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateScheduleStatusByProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update project scheduling status.
    /// </summary>
    /// <param name="_projectId">
    /// Project id.
    /// </param>
    public static void updateScheduleStatusByProject(ProjId _projectId)
    {
        PSAActivitySetup    psaActivitySetup;
        PSARSEntityType     resEntityType;
        ResCommitType       commitType = ResCommitType::HardBook;
        boolean             hasWBS;

        // Update scheduling status
        ProjTable::find(_projectId).updateSchedulingStatus(ResUtil::projectHasWBS(_projectId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndUpdateAllTasksSchedulingStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the <c>ProjPlanVersion</c>, <c>TaskSchedulingStatus</c> and <c>TaskAssignedHours</c> fields as long as it's not the root activity
    /// and then update all the <c>ProjPlanVersion</c>, <c>TaskSchedulingStatus</c> and <c>TaskAssignedHours</c> end node records fields
    /// which have staffed resource assignment with the appropriate values.
    /// Validate if <c>ProjPlanVersion</c> TaskSchedulingStatus field have appropriate values. If not, update all the <c>ProjPlanVersion</c>
    /// end node records TaskSchedulingStatus and TaskAssignedHours fields which have staffed resource assignment with the appropriate values.
    /// </summary>
    /// <param name = "_rootActivity">
    /// Root activity record ID.
    /// </param>
    /// <param name = "_commitType">
    /// Reservation commit type.
    /// For the case of Project, it should be HardBook.
    /// For the case of Quotation, it should be SoftBook.
    /// </param>
    /// <param name = "_projId">
    /// Specified the project ID if this is a project; else this will be an empty string.
    /// </param>
    /// <returns>
    /// true if all WBS <c>ProjPlanVersion</c> records TaskSchedulingStatus and TaskAssignedHours fields have been recalculated;
    /// false, oterhwise.
    /// </returns>
    private static boolean validateAndUpdateAllTasksSchedulingStatus(ActivityRecId _taskActivity, ActivityRecId _rootActivity, ResCommitType _commitType, ProjId _projId = '')
    {
        boolean updatedAllTasksSchedulingStatus = false;

        // Update this pacticular task scheduling status
        if (_taskActivity != _rootActivity)
        {
            ProjActivityCapacity::updateScheduleStatusByEndNodeActivity(_taskActivity, _commitType, _projId);
            updatedAllTasksSchedulingStatus = true;
        }

        boolean existsAnyAssignment = ActivityFacade::existsAnyAssignmentForActivityV2(_rootActivity, _commitType, false);
  
        if (existsAnyAssignment)
        {
            List assignedEndNodeActivitiesList = ActivityFacade::getActivitiesWithAssignmentByRootActivity(_rootActivity, _commitType, false);

            if (!assignedEndNodeActivitiesList.empty())
            {
                // Updates each end node task which has staffed resource assignment.
                updatedAllTasksSchedulingStatus = true;

                ListEnumerator assignedEndNodeActivitiesListEnum = assignedEndNodeActivitiesList.getEnumerator();
                while (assignedEndNodeActivitiesListEnum.moveNext())
                {
                    if (assignedEndNodeActivitiesListEnum.current() != _taskActivity)
                    {
                        ProjActivityCapacity::updateScheduleStatusByEndNodeActivity(assignedEndNodeActivitiesListEnum.current(), _commitType, _projId);
                    }
                }
            }
        }

        return updatedAllTasksSchedulingStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateScheduleStatusByEndNodeActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update scheduling status by end node activity.
        /// </summary>
    /// <param name = "_endNodeActivity">
    /// End node WBS activity record ID.
    /// </param>
    /// <param name = "_commitType">
    /// Reservation commit type.
    /// For the case of Project, it should be HardBook.
    /// For the case of Quotation, it should be SoftBook.
    /// </param>
    /// <param name = "_projId">
    /// Specified the project ID if this is a project; else this will be an empty string.
    /// </param>
    /// <returns>
    /// true if root activity status should be recalculated due to the change of this end node activity scheduling status;
    /// false, oterhwise.
    /// </returns>
    private static boolean updateScheduleStatusByEndNodeActivity(ActivityRecId _endNodeActivity, ResCommitType _commitType, ProjId _projId = '')
    {
        boolean updateProjectSchedulingStatus = false;
        // Update ProjPlanVersion task scheduling status by the specified activity.
        ProjPlanVersion planVersion;
        if (_projId)
        {
            ProjPlanVersionDetail versionDetail = ProjPlanVersionDetail::findLatestByProjId(_projId, false, false, ProjPlanVersionType::PublishedCurrent);
            planVersion = ProjPlanVersion::findByHierarchyAndActivityRecId(versionDetail.HierarchyId, _endNodeActivity, true);
        }
        else
        {
            planVersion = ProjPlanVersion::findByActivityRecId(_endNodeActivity, true);
        }

        if (planVersion)
        {
            real reservedHours = ActivityFacade::getAssignedCapacityInHours(_endNodeActivity, _commitType, false);

            PSAScheduled originalSchedulingStatus = planVersion.TaskSchedulingStatus;
            Hours originalAssignedHours = planVersion.TaskAssignedHours;

            try
            {
                ttsbegin;    
                planVersion.TaskSchedulingStatus = ProjActivityCapacity::GetPSAScheduleStatus(planVersion.TaskEffort, reservedHours);
                planVersion.TaskAssignedHours = reservedHours;
                planVersion.update();
                ttscommit;
            }

            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ProjActivityCapacity));
                    logger.logError(strFmt(ProjActivityCapacity::LoggerRetryExceptionMsg, 'Deadlock', 'ProjActivityCapacity.updateScheduleStatusByEndNodeActivity()', planVersion.RecId));
                    throw  Exception::Deadlock;
                }
                else
                {
                    sleep(ProjConstants::DeadLockRetryInterval * xSession::currentRetryCount());
                    retry;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ProjActivityCapacity));
                        logger.logError(strFmt(ProjActivityCapacity::LoggerRetryExceptionMsg, 'UpdateConflict', 'ProjActivityCapacity.updateScheduleStatusByEndNodeActivity()', planVersion.RecId));
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ProjActivityCapacity));
                    logger.logError(strFmt(ProjActivityCapacity::LoggerRetryExceptionMsg, 'TransientSqlConnectionError', 'ProjActivityCapacity.updateScheduleStatusByEndNodeActivity()', planVersion.RecId));
                    throw Exception::TransientSqlConnectionError;
                }
            }
            catch (Exception::Error)
            {
                throw Exception::Error;
            }
            
            if (((originalSchedulingStatus != planVersion.TaskSchedulingStatus) || (originalAssignedHours != planVersion.TaskAssignedHours))
                    && planVersion.ParentHierarchyTaskId)
            {
                // Update activities scheduling status for the parent tasks.
                ProjPlanVersion parentTask = ProjPlanVersion::findByHierarchyAndTaskId(planVersion.HierarchyId, planVersion.ParentHierarchyTaskId, true);
                ProjActivityCapacity::updateSummaryTaskSchedulingStatus(parentTask);

                updateProjectSchedulingStatus = true;
            }
        }

        return updateProjectSchedulingStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateScheduleStatusByActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update <c>ProjPlanVersion</c> table task scheduling status and task assigned Hours by the specified activity record ID.
    /// </summary>
    /// <param name="_activity">Activity record ID.</param>
    public static void updateScheduleStatusByActivity(ActivityRecId _activity)
    {
        ResCommitType commitType = ResCommitType::SoftBook; //Default for quotation
        ActivityRecId rootActivity = ActivityFacade::getRootProjectActivity(_activity);
        boolean isRootActivity = (rootActivity == _activity) ? true : false;

        // Get Project ID if this is a project.
        PSARSEntityType resEntityType = ActivityFacade::getActivityType(rootActivity);
        ProjId projectId;
        if (resEntityType == PSARSEntityType::Project)
        {
            commitType = ResCommitType::HardBook;
            projectId = ActivityFacade::getProjId(rootActivity);
        }

        // Update all WBS task end node scheduling status. If there is any WBS end task which has resource assigned to it, then it will return true.
        boolean updatedAllTasksSchedulingStatus = ProjActivityCapacity::validateAndUpdateAllTasksSchedulingStatus(_activity, rootActivity, commitType, projectId);

        // Update project scheduling status.
        if (projectId && (isRootActivity || updatedAllTasksSchedulingStatus))
        {
            ProjActivityCapacity::updateScheduleStatusByProject(projectId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSummaryTaskSchedulingStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the plan version summary task scheduling status.
    /// </summary>
    /// <param name = "_summaryTask"><c>ProjPlanVersion</c> summary task record which scheduling status to be calculated.</param>
    /// <returns>The calculated task scheduling status.</returns>
    static private PSAScheduled calculateSummaryTaskSchedulingStatus(ProjPlanVersion _summaryTask)
    {
        PSAScheduled summaryTaskStatus = PSAScheduled::NotScheduled;
        boolean multipleChild = false;

        ProjPlanVersion childTasks;
        while select TaskSchedulingStatus from childTasks
            where childTasks.HierarchyId == _summaryTask.HierarchyId
                && childTasks.ParentHierarchyTaskId == _summaryTask.HierarchyTaskId
        {
            if (summaryTaskStatus == PSAScheduled::NotScheduled)
            {
                if (multipleChild && 
                    (childTasks.TaskSchedulingStatus != PSAScheduled::NotScheduled))
                {
                    // If the previous child status is not scheduled and this task is fully scheduled, then
                    // the new status will be partially scheduled.
                    summaryTaskStatus = PSAScheduled::PartiallyScheduled;
                }
                else
                {
                    summaryTaskStatus = childTasks.TaskSchedulingStatus;
                }

                if (summaryTaskStatus == PSAScheduled::PartiallyScheduled)
                {
                    // Once it is determined as PartiallyScheduled, break out of the loop.
                    break;
                }
            }
            else if (summaryTaskStatus == PSAScheduled::FullyScheduled
                && childTasks.TaskSchedulingStatus == PSAScheduled::FullyScheduledConflict)
            {
                summaryTaskStatus = PSAScheduled::FullyScheduledConflict;
            }
            else if (summaryTaskStatus == PSAScheduled::FullyScheduledConflict
                && childTasks.TaskSchedulingStatus == PSAScheduled::FullyScheduled)
            {
                summaryTaskStatus = PSAScheduled::FullyScheduledConflict;
            }
            else if (summaryTaskStatus != childTasks.TaskSchedulingStatus)
            {
                // The only possible conditions to reach here will be either 
                // summaryTaskStatus is FullyScheduled or FullScheduledConflict and 
                // ChildTask.TaskSchedulingStatus is NotScheduled. Hence it will
                // result as Partitially scheduled.
                summaryTaskStatus = PSAScheduled::PartiallyScheduled;
                break;
            }

            multipleChild = true;
        }
        
        return summaryTaskStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSummaryTaskAssignedHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the plan version summary task sum of task assigned hours.
    /// </summary>
    /// <param name = "_summaryTask"><c>ProjPlanVersion</c> summary task record which scheduling status to be calculated.</param>
    /// <returns>The sum of child task assigned hours.</returns>
    static private Hours calculateSummaryTaskAssignedHours(ProjPlanVersion _summaryTask)
    {
        ProjPlanVersion childTasks;
        select sum(TaskAssignedHours) from childTasks
            where childTasks.HierarchyId == _summaryTask.HierarchyId
                && childTasks.ParentHierarchyTaskId == _summaryTask.HierarchyTaskId;

        return childTasks.TaskAssignedHours;

    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSummaryTaskSchedulingStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the plan version summary task and parent scheduling status recurrsivelly until either the status
    /// is the same as the current task status or until the root task.
    /// </summary>
    /// <param name = "_summaryTask"><c>ProjPlanVersion</c> summary task record which scheduling status to be updated.</param>
    static public void updateSummaryTaskSchedulingStatus(ProjPlanVersion _summaryTask)
    {
        if (_summaryTask)
        {
            PSAScheduled originalSchedulingStatus = _summaryTask.TaskSchedulingStatus;
            Hours originalAssignedHours = _summaryTask.TaskAssignedHours;
            _summaryTask.selectForUpdate(true);

            try
            {
                ttsbegin;
                _summaryTask.reread();
                _summaryTask.ResourceCategory = 0;
                _summaryTask.TaskSchedulingStatus = ProjActivityCapacity::calculateSummaryTaskSchedulingStatus(_summaryTask);
                _summaryTask.TaskAssignedHours = ProjActivityCapacity::calculateSummaryTaskAssignedHours(_summaryTask);
                _summaryTask.update();
                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ProjActivityCapacity));
                    logger.logError(strFmt(ProjActivityCapacity::LoggerRetryExceptionMsg, 'Deadlock', 'ProjActivityCapacity.updateSummaryTaskSchedulingStatus()', _summaryTask.RecId));
                    throw Exception::Deadlock;
                }
                else
                {
                    sleep(ProjConstants::DeadLockRetryInterval * xSession::currentRetryCount());
                    retry;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ProjActivityCapacity));
                        logger.logError(strFmt(ProjActivityCapacity::LoggerRetryExceptionMsg, 'UpdateConflict', 'ProjActivityCapacity.updateSummaryTaskSchedulingStatus()', _summaryTask.RecId));
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ProjActivityCapacity));
                    logger.logError(strFmt(ProjActivityCapacity::LoggerRetryExceptionMsg, 'TransientSqlConnectionError', 'ProjActivityCapacity.updateSummaryTaskSchedulingStatus()', _summaryTask.RecId));
                    throw Exception::TransientSqlConnectionError;
                }
            }
            catch (Exception::Error)
            {
                throw Exception::Error;
            }

            if (((_summaryTask.TaskSchedulingStatus != originalSchedulingStatus) || (_summaryTask.TaskAssignedHours != originalAssignedHours)) 
                && (_summaryTask.ParentHierarchyTaskId))
            {
                ProjPlanVersion parentTask = ProjPlanVersion::findByHierarchyAndTaskId(_summaryTask.HierarchyId, _summaryTask.ParentHierarchyTaskId, true);
                ProjActivityCapacity::updateSummaryTaskSchedulingStatus(parentTask);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>