<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDocumentOperationProcessorPostStockCounting</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Collections;
using System.Xml.Linq;
using Microsoft.Dynamics.Commerce.Runtime.TransactionService;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;
using CommerceRunTimeDataModel = Microsoft.Dynamics.Commerce.Runtime.DataModel;

/// <summary>
/// The <c>RetailDocumentOperationProcessorPostStockCounting</c> class is the processor for PostStockCounting operation.
/// </summary>
internal class RetailDocumentOperationProcessorPostStockCounting extends RetailDocumentOperationProcessorStockCountingBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of a class of the <c>RetailDocumentOperationProcessorPostStockCounting</c> class.
    /// </summary>
    /// <param name="_parameters">
    /// The <c>RetailDocumentOperationProcessorParameters</c> instance.
    /// </param>
    /// <returns>
    /// The new instance of an <c>RetailDocumentOperationProcessorPostStockCounting</c> subclass.
    /// </returns>
    public static RetailDocumentOperationProcessorPostStockCounting construct(RetailDocumentOperationProcessorParameters _parameters)
    {
        var processor = new RetailDocumentOperationProcessorPostStockCounting(_parameters);
        processor.isRetriable = false;
        return processor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerOrPickUpSerialNumbersForJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers or picks up serial numbers for a journal line.
    /// </summary>
    /// <param name = "_line">The inventory document line.</param>
    /// <param name = "_inventJournalTrans">The journal line.</param>
    /// <param name = "_submittedSerialNumbersMap">The submitted serial numbers map.</param>
    /// <param name = "_onHandSerialNumbersMap">The on-hand serial numbers map.</param>
    /// <remarks>Not used if RetailStockCountingFlattenSerialNumberLinesFlight is enabled.</remarks>
    protected void registerOrPickUpSerialNumbersForJournalLine(CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine _line, InventJournalTrans _inventJournalTrans, Map _submittedSerialNumbersMap, Map _onHandSerialNumbersMap)
    {
        // Need to compare on-hand serial numbers with submitted ones.
        if (_inventJournalTrans.Qty == 0)
        {
            this.compareSubmittedWithOnHandSerialNumbers(_line, _inventJournalTrans, _onHandSerialNumbersMap, _submittedSerialNumbersMap);
        }
        // Need to register serial numbers if there are more submitted serial numbers than on-hand
        else if (_inventJournalTrans.Qty > 0)
        {
            this.registerNewSubmittedSerialNumbers(_line, _inventJournalTrans, _onHandSerialNumbersMap, _submittedSerialNumbersMap);
        }
        // Need to pick up serial numbers if there are less submitted serial numbers than on-hand
        else
        {
            this.pickUpOnHandSerialNumbers(_line, _inventJournalTrans, _onHandSerialNumbersMap, _submittedSerialNumbersMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>compareSubmittedWithOnHandSerialNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compares submitted serial numbers with on-hand serial numbers when counted quantity equals on-hand quantity.
    /// </summary>
    /// <param name = "_line">The inventory document line.</param>
    /// <param name = "_inventJournalTrans">The journal line.</param>
    /// <param name = "_onHandSerialNumbersMap">The on-hand serial numbers map.</param>
    /// <param name = "_submittedSerialNumbersMap">The submitted serial numbers map.</param>
    /// <remarks>Not used if RetailStockCountingFlattenSerialNumberLinesFlight is enabled.</remarks>
    private void compareSubmittedWithOnHandSerialNumbers(CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine _line, InventJournalTrans _inventJournalTrans, Map _onHandSerialNumbersMap, Map _submittedSerialNumbersMap)
    {
        MapEnumerator mapEnumerator = _submittedSerialNumbersMap.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            str currentSerialNumber = mapEnumerator.currentKey();
            InventQty currentSubmittedQuantity = mapEnumerator.currentValue();
            boolean needThrowException = false;
            if (_onHandSerialNumbersMap.exists(currentSerialNumber))
            {
                InventQty onHandQuantity = _onHandSerialNumbersMap.lookup(currentSerialNumber);
                if (onHandQuantity < currentSubmittedQuantity)
                {
                    needThrowException = true;
                }
            }
            else
            {
                needThrowException = true;
            }

            if (needThrowException)
            {
                this.throwsException(false, strFmt("@RetailInventory:PostStockCountingErrorCountedEqualsOnHandQuantityButNeedRegistration", _inventJournalTrans.ItemId, this.getNewSubmittedSerialNumbers(_submittedSerialNumbersMap, _onHandSerialNumbersMap)), RetailDocumentOperationProcessingErrorCode::InternalProcessingFailed);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerNewSubmittedSerialNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers new submitted serial numbers when counted quantity is greater than on-hand quantity.
    /// </summary>
    /// <param name = "_line">The inventory document line.</param>
    /// <param name = "_inventJournalTrans">The journal line.</param>
    /// <param name = "_onHandSerialNumbersMap">The on-hand serial numbers map.</param>
    /// <param name = "_submittedSerialNumbersMap">The submitted serial numbers map.</param>
    /// <remarks>Not used if RetailStockCountingFlattenSerialNumberLinesFlight is enabled.</remarks>
    private void registerNewSubmittedSerialNumbers(CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine _line, InventJournalTrans _inventJournalTrans, Map _onHandSerialNumbersMap, Map _submittedSerialNumbersMap)
    {
        Map originalOnHandSerialNumbersMap = new Map(Types::String, Types::Real);
        MapEnumerator mapEnumerator = _onHandSerialNumbersMap.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            str currentSerialNumber = mapEnumerator.currentKey();
            InventQty currentOnHandQuantity = mapEnumerator.currentValue();
            originalOnHandSerialNumbersMap.insert(currentSerialNumber, currentOnHandQuantity);
        }

        InventDim lineInventDim = InventDim::find(_inventJournalTrans.InventDimId);
        IEnumerable serialNumberlineList = _line.SerialNumberLines as IEnumerable;
        IEnumerator enumerator = serialNumberlineList.GetEnumerator();
        InventQty remainingRegisterQuantity = _inventJournalTrans.Qty;
        while (enumerator.MoveNext())
        {
            CommerceRunTimeDataModel.InventoryDocumentSerialNumberLine serialLine = enumerator.Current as CommerceRunTimeDataModel.InventoryDocumentSerialNumberLine;
            InventQty onHandQuantity = 0;
            boolean needRegister = false;
            if (_onHandSerialNumbersMap.exists(serialLine.SerialNumber))
            {
                onHandQuantity = _onHandSerialNumbersMap.lookup(serialLine.SerialNumber);
                if (onHandQuantity >= serialLine.Quantity)
                {
                    // Deduct counted serial numbers from on-hand
                    _onHandSerialNumbersMap.insert(serialLine.SerialNumber, onHandQuantity - serialLine.Quantity);
                }
                else 
                {
                    needRegister = true;
                }
            }
            else 
            {
                needRegister = true;
            }

            if (needRegister)
            {
                if (remainingRegisterQuantity <= 0)
                {
                    // Too much new serial numbers to register
                    this.throwsException(false, strFmt("@RetailInventory:PostStockCountingErrorCountedMoreThanOnHandQuantityButTooMuchToRegister", _inventJournalTrans.ItemId, this.getNewSubmittedSerialNumbers(_submittedSerialNumbersMap, originalOnHandSerialNumbersMap)), RetailDocumentOperationProcessingErrorCode::InternalProcessingFailed);
                }

                // Register new serial numbers if on-hand is insufficient
                InventQty registerQuantity = min(remainingRegisterQuantity, serialLine.Quantity - onHandQuantity);
                InventDim inventDimToRegister = InventDim::find(_inventJournalTrans.InventDimId);
                inventDimToRegister.inventSerialId = serialLine.SerialNumber;
                inventDimToRegister = InventDim::findOrCreate(inventDimToRegister);

                this.registerLine(_inventJournalTrans, inventDimToRegister, registerQuantity);
                _onHandSerialNumbersMap.insert(serialLine.SerialNumber, 0);
                remainingRegisterQuantity -= registerQuantity;
            }
        }

        if (remainingRegisterQuantity > 0)
        {
            // Register negative inventory if there are still remaining to register
            mapEnumerator = _onHandSerialNumbersMap.getEnumerator();
            while (mapEnumerator.moveNext())
            {
                str currentSerialNumber = mapEnumerator.currentKey();
                InventQty currentOnHandQuantity = mapEnumerator.currentValue();
                if (currentOnHandQuantity < 0)
                {
                    InventQty registerQuantity = min(remainingRegisterQuantity, -currentOnHandQuantity);
                    InventDim inventDimToRegister = InventDim::find(_inventJournalTrans.InventDimId);
                    inventDimToRegister.inventSerialId = currentSerialNumber;
                    inventDimToRegister = InventDim::findOrCreate(inventDimToRegister);

                    this.registerLine(_inventJournalTrans, inventDimToRegister, registerQuantity);
                    remainingRegisterQuantity -= registerQuantity;

                    if (remainingRegisterQuantity <= 0)
                    {
                        break;
                    }
                }
            }

            if (remainingRegisterQuantity > 0)
            {
                this.throwsException(false, "@RetailInventory:PostStockCountingErrorInsufficientSerialNumbersToRegister", RetailDocumentOperationProcessingErrorCode::InternalProcessingFailed);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickUpOnHandSerialNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Picks up on-hand serial numbers when counted quantity is less than on-hand quantity.
    /// </summary>
    /// <param name = "_line">The inventory document line.</param>
    /// <param name = "_inventJournalTrans">The journal line.</param>
    /// <param name = "_onHandSerialNumbersMap">The on-hand serial numbers map.</param>
    /// <param name = "_submittedSerialNumbersMap">The submitted serial numbers map.</param>
    /// <remarks>Not used if RetailStockCountingFlattenSerialNumberLinesFlight is enabled.</remarks>
    private void pickUpOnHandSerialNumbers(CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine _line, InventJournalTrans _inventJournalTrans, Map _onHandSerialNumbersMap, Map _submittedSerialNumbersMap)
    {
        Map originalOnHandSerialNumbersMap = new Map(Types::String, Types::Real);
        MapEnumerator mapEnumerator = _onHandSerialNumbersMap.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            str currentSerialNumber = mapEnumerator.currentKey();
            InventQty currentOnHandQuantity = mapEnumerator.currentValue();
            originalOnHandSerialNumbersMap.insert(currentSerialNumber, currentOnHandQuantity);
        }

        InventDim lineInventDim = InventDim::find(_inventJournalTrans.InventDimId);
        IEnumerable serialNumberlineList = _line.SerialNumberLines as IEnumerable;
        IEnumerator enumerator = serialNumberlineList.GetEnumerator();
        while (enumerator.MoveNext())
        {
            CommerceRunTimeDataModel.InventoryDocumentSerialNumberLine serialLine = enumerator.Current as CommerceRunTimeDataModel.InventoryDocumentSerialNumberLine;
            boolean needThrowException = false;
            if (_onHandSerialNumbersMap.exists(serialLine.SerialNumber))
            {
                InventQty onHandQuantity = _onHandSerialNumbersMap.lookup(serialLine.SerialNumber);
                if (onHandQuantity >= serialLine.Quantity)
                {
                    // Deduct counted serial numbers from on-hand
                    _onHandSerialNumbersMap.insert(serialLine.SerialNumber, onHandQuantity - serialLine.Quantity);
                }
                else
                {
                    needThrowException = true;
                }
            }
            else 
            {
                needThrowException = true;
            }

            if (needThrowException)
            {
                // We cannot new serial number registration on pickup scenario
                this.throwsException(false, strFmt("@RetailInventory:PostStockCountingErrorCountedLessThanOnHandQuantityButNeedRegistration", _inventJournalTrans.ItemId, this.getNewSubmittedSerialNumbers(_submittedSerialNumbersMap, originalOnHandSerialNumbersMap)), RetailDocumentOperationProcessingErrorCode::InternalProcessingFailed);
            }
        }

        // Find those not counted serial numbers and pick up
        InventQty remainingPickupQuantity = -_inventJournalTrans.Qty;
        mapEnumerator = _onHandSerialNumbersMap.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            str currentSerialNumber = mapEnumerator.currentKey();
            InventQty currentOnHandQuantity = mapEnumerator.currentValue();
            if (currentOnHandQuantity > 0)
            {
                InventQty pickupQuantity = min(remainingPickupQuantity, currentOnHandQuantity);
                InventDim inventDimToPickUp = InventDim::find(_inventJournalTrans.InventDimId);
                inventDimToPickUp.inventSerialId = currentSerialNumber;
                inventDimToPickUp = InventDim::findOrCreate(inventDimToPickUp);

                this.pickupLine(_inventJournalTrans, inventDimToPickUp, pickupQuantity);
                _onHandSerialNumbersMap.insert(currentSerialNumber, currentOnHandQuantity - pickupQuantity);
                remainingPickupQuantity -= pickupQuantity;

                if (remainingPickupQuantity <= 0)
                {
                    break;
                }
            }
        }

        if (remainingPickupQuantity > 0)
        {
            this.throwsException(false, "@RetailInventory:PostStockCountingErrorInsufficientSerialNumbersToPickUp", RetailDocumentOperationProcessingErrorCode::InternalProcessingFailed);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewSubmittedSerialNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets new submitted serial numbers.
    /// </summary>
    /// <param name = "_submittedSerialNumbersMap">The submitted serial numbers map.</param>
    /// <param name = "_onHandSerialNumbersMap">The on-hand serial numbers map.</param>
    /// <returns>The new submitted serial numbers array.</returns>
    /// <remarks>Not used if RetailStockCountingFlattenSerialNumberLinesFlight is enabled.</remarks>
    private str getNewSubmittedSerialNumbers(Map _submittedSerialNumbersMap, Map _onHandSerialNumbersMap)
    {
        container result;
        MapEnumerator mapEnumerator = _submittedSerialNumbersMap.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            str currentSerialNumber = mapEnumerator.currentKey();
            InventQty currentSubmittedQuantity = mapEnumerator.currentValue();
            boolean exceedsOnHand = false;
            if (_onHandSerialNumbersMap.exists(currentSerialNumber))
            {
                InventQty onHandQuantity = _onHandSerialNumbersMap.lookup(currentSerialNumber);
                if (onHandQuantity < currentSubmittedQuantity)
                {
                    exceedsOnHand = true;
                }
            }
            else
            {
                exceedsOnHand = true;
            }

            if (exceedsOnHand)
            {
                result = conIns(result, conLen(result) + 1, currentSerialNumber);
            }
        }

        return con2Str(result);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>