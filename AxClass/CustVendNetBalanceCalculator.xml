<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendNetBalanceCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustVendNetBalanceCalculator</c> calculates the open customer and vendor netting counts and balances.
/// </summary>
[SysObsolete('This class is no longer supported.', false, 28\02\2024)]
public class CustVendNetBalanceCalculator
{
    private CustVendNetDetailTmp custVendNetDetailTmp;
    private TransDate netTransDate;
    private DirPartyRecId partyRecId;
    private container companies;
    private CurrencyCode netCurrencyCode;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>count</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the count of customer and vendor netting details.
    /// </summary>
    /// <returns>The total number of customer and vendor netting details.</returns>
    public Counter count()
    {
        select count(RecId) from custVendNetDetailTmp;

        return int642int(custVendNetDetailTmp.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openBalanceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the open balance amount.
    /// </summary>
    /// <param name = "_type">The account type.</param>
    /// <param name = "_currencyCode">The currency code.</param>
    /// <param name = "_company">The company.</param>
    /// <returns>The open balance amount.</returns>
    /// <remarks>The open balance amount contains open invoices, credit notes and payments.</remarks>
    public AmountCur openBalanceAmount(CustVendACType _type, CurrencyCode _currencyCode, SelectableDataArea _company = curExt())
    {
        select sum(InvoiceAmount) from custVendNetDetailTmp
            where custVendNetDetailTmp.Type == _type
                && custVendNetDetailTmp.InvoiceCurrencyCode == _currencyCode
                && custVendNetDetailTmp.InvoiceCompany == _company;

        return custVendNetDetailTmp.InvoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openBalanceCashDiscountAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the open balance cash discount amount.
    /// </summary>
    /// <param name = "_type">Identifies the customer or vendor type.</param>
    /// <param name = "_currencyCode">The currency code.</param>
    /// <param name = "_company">The company.</param>
    /// <returns>The open balance cash discount amount.</returns>
    /// <remarks>The open balance cash discount amount contains cash discounts from open invoices and credit notes.</remarks>
    public AmountCur openBalanceCashDiscountAmount(CustVendACType _type, CurrencyCode _currencyCode, SelectableDataArea _company = curExt())
    {
        select sum(InvoiceCashDiscountAmount) from custVendNetDetailTmp
            where custVendNetDetailTmp.Type == _type
                && custVendNetDetailTmp.InvoiceCurrencyCode == _currencyCode
                && custVendNetDetailTmp.InvoiceCompany == _company;

        return custVendNetDetailTmp.InvoiceCashDiscountAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>netAmountForInvoiceCurrencyAndCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the minimum open amount between the customer and vendor.
    /// </summary>
    /// <param name = "_currencyCode">The invoice currency code.</param>
    /// <param name = "_company">The company.</param>
    /// <returns>The net amount.</returns>
    /// <remarks>A positive net amount indicates a typical balance, while a negative net amount indicates a non-typical balance.</remarks>
    public AmountCur netAmountForInvoiceCurrencyAndCompany(CurrencyCode _currencyCode, SelectableDataArea _company = curExt())
    {
        AmountCur custOpenBalance = this.customerOpenBalanceForInvoiceCurrencyAndCompany(_currencyCode, _company);
        AmountCur vendOpenBalance = this.vendorOpenBalanceForInvoiceCurrencyAndCompany(_currencyCode, _company);

        return this.determineNetAmount(custOpenBalance, vendOpenBalance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>netAmountForNetCurrencyAndCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the minimum open amount between the customer and vendor.
    /// </summary>
    /// <param name = "_company">The company.</param>
    /// <returns>The net amount.</returns>
    /// <remarks>A positive net amount indicates a typical balance, while a negative net amount indicates a non-typical balance.</remarks>
    public AmountCur netAmountForNetCurrencyAndCompany(SelectableDataArea _company = curExt())
    {
        AmountCur custOpenBalance = this.customerOpenBalanceForNetCurrencyAndCompany(_company);
        AmountCur vendOpenBalance = this.vendorOpenBalanceForNetCurrencyAndCompany(_company);

        return this.determineNetAmount(custOpenBalance, vendOpenBalance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>currenciesForCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the currencies for a company.
    /// </summary>
    /// <param name = "_company">The company.</param>
    /// <returns>A list of currencies.</returns>
    public List currenciesForCompany(SelectableDataArea _company = curExt())
    {
        List currencies = new List(Types::String);

        while select InvoiceCurrencyCode from custVendNetDetailTmp
            group by InvoiceCurrencyCode
            where custVendNetDetailTmp.InvoiceCompany == _company
        {
            currencies.addEnd(custVendNetDetailTmp.InvoiceCurrencyCode);
        }

        return currencies;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init()
    {
        this.populateCustNetDetailTmp();
        this.populateVendNetDetailTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>customerOpenBalanceForInvoiceCurrencyAndCompany</Name>
				<Source><![CDATA[
    private AmountCur customerOpenBalanceForInvoiceCurrencyAndCompany(CurrencyCode _currencyCode, SelectableDataArea _company)
    {
        AmountCur openBalance;

        select sum(InvoiceAmount), sum(InvoiceCashDiscountAmount) from custVendNetDetailTmp
            where custVendNetDetailTmp.Type == CustVendACType::Cust
                && custVendNetDetailTmp.InvoiceCurrencyCode == _currencyCode
                && custVendNetDetailTmp.InvoiceCompany == _company;

        openBalance = custVendNetDetailTmp.InvoiceAmount - custVendNetDetailTmp.InvoiceCashDiscountAmount;

        return openBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendorOpenBalanceForInvoiceCurrencyAndCompany</Name>
				<Source><![CDATA[
    private AmountCur vendorOpenBalanceForInvoiceCurrencyAndCompany(CurrencyCode _currencyCode, SelectableDataArea _company)
    {
        AmountCur openBalance;

        select sum(InvoiceAmount), sum(InvoiceCashDiscountAmount) from custVendNetDetailTmp
            where custVendNetDetailTmp.Type == CustVendACType::Vend
                && custVendNetDetailTmp.InvoiceCurrencyCode == _currencyCode
                && custVendNetDetailTmp.InvoiceCompany == _company;

        openBalance = custVendNetDetailTmp.InvoiceAmount - custVendNetDetailTmp.InvoiceCashDiscountAmount;

        return openBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customerOpenBalanceForNetCurrencyAndCompany</Name>
				<Source><![CDATA[
    private AmountCur customerOpenBalanceForNetCurrencyAndCompany(SelectableDataArea _company)
    {
        AmountCur openBalance;

        select sum(NetCurrencyInvoiceAmount), sum(NetCurrencyInvoiceCashDiscountAmount) from custVendNetDetailTmp
            where custVendNetDetailTmp.Type == CustVendACType::Cust
                && custVendNetDetailTmp.InvoiceCompany == _company;

        openBalance = custVendNetDetailTmp.NetCurrencyInvoiceAmount - custVendNetDetailTmp.NetCurrencyInvoiceCashDiscountAmount;

        return openBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendorOpenBalanceForNetCurrencyAndCompany</Name>
				<Source><![CDATA[
    private AmountCur vendorOpenBalanceForNetCurrencyAndCompany(SelectableDataArea _company)
    {
        AmountCur openBalance;

        select sum(NetCurrencyInvoiceAmount), sum(NetCurrencyInvoiceCashDiscountAmount) from custVendNetDetailTmp
            where custVendNetDetailTmp.Type == CustVendACType::Vend
                && custVendNetDetailTmp.InvoiceCompany == _company;

        openBalance = custVendNetDetailTmp.NetCurrencyInvoiceAmount - custVendNetDetailTmp.NetCurrencyInvoiceCashDiscountAmount;

        return openBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineNetAmount</Name>
				<Source><![CDATA[
    private AmountCur determineNetAmount(AmountCur _custOpenBalance, AmountCur _vendOpenBalance)
    {
        AmountCur netAmount;

        if (min(_custOpenBalance, _vendOpenBalance) == 0.0)
        {
            return netAmount;
        }

        boolean custIsTypicalBalance = this.isTypicalBalance(ModuleCustVend::Cust, _custOpenBalance);
        boolean vendIsTypicalBalance = this.isTypicalBalance(ModuleCustVend::Vend, _vendOpenBalance);

        if (custIsTypicalBalance && vendIsTypicalBalance)
        {
            netAmount = min(abs(_custOpenBalance), abs(_vendOpenBalance));
        }

        if (!custIsTypicalBalance && !vendIsTypicalBalance)
        {
            netAmount = (min(abs(_custOpenBalance), abs(_vendOpenBalance))) * -1;
        }

        return netAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTypicalBalance</Name>
				<Source><![CDATA[
    private boolean isTypicalBalance(ModuleCustVend _module, AmountCur _amount)
    {
        boolean isTypicalBalance;

        switch (_module)
        {
            case ModuleCustVend::Cust:
                if (_amount > 0.0)
                {
                    isTypicalBalance = true;
                }
                break;

            default:
                if (_amount < 0.0)
                {
                    isTypicalBalance = true;
                }
                break;
        }

        return isTypicalBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustNetDetailTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the <c>CustVendNetDetailTmp</c> table with customer open transactions
    /// </summary>
    /// <remarks>
    /// We exclude several types of open documents.
    /// 1) We do not consider bills of exchange because they follow a specific life cycle and con not be directly netted.  This will not change.
    /// 2) We do not consider customers that use withholding tax because withholding tax can not be determined outside of settlement.  This impacts
    ///    several GDL countries.  A future version will refactor withholding tax calculations so the correct net amount can be determined.
    /// </remarks>
    private void populateCustNetDetailTmp()
    {
        CustTable custTable;
        CustTrans custTrans;
        CustTransOpen custTransOpen;
        CustVendNetAgreementRelationship agreementRelationship;
        SpecTrans specTrans;

        while select crosscompany:companies DataAreaId, AccountNum, CurrencyCode, PaymMode from custTrans
            where custTrans.Prepayment == NoYes::No
                && custTrans.Approved == NoYes::Yes
                && custTrans.BillOfExchangeStatus == CustVendNegInstStatus::None
                && custTrans.TransDate <= netTransDate
            join * from custTransOpen
                where custTrans.RecId == custTransOpen.RefRecId
            exists join custTable
                where custTable.Party == partyRecId
                    && custTable.AccountNum == custTransOpen.AccountNum
                    && custTable.DataAreaId == custTransOpen.DataAreaId
                    && custTable.Blocked != CustVendorBlocked::All
                    && custTable.Blocked != CustVendorBlocked::Payment
                    && custTable.TaxWithholdCalculate_TH == NoYes::No
                    && custTable.TaxWithholdCalculate_IN == NoYes::No
            exists join agreementRelationship
                where agreementRelationship.Party == custTable.Party
                    && agreementRelationship.Company == custTable.DataAreaId
                    && agreementRelationship.AccountNum == custTable.AccountNum
                    && agreementRelationship.Type == CustVendACType::Cust
            notexists join specTrans
                where specTrans.RefCompany == custTransOpen.DataAreaId
                    && specTrans.RefTableId == tableNum(CustTransOpen)
                    && specTrans.RefRecId == custTransOpen.RecId
        {
            custVendNetDetailTmp.Type = CustVendACType::Cust;
            custVendNetDetailTmp.AccountNum = custTrans.AccountNum;
            custVendNetDetailTmp.InvoiceCompany = custTrans.DataAreaId;
            custVendNetDetailTmp.InvoiceCurrencyCode = custTrans.CurrencyCode;
            custVendNetDetailTmp.InvoiceAmount = custTransOpen.AmountCur;
            custVendNetDetailTmp.InvoiceCustVendTransOpenRecId = custTransOpen.RecId;
            custVendNetDetailTmp.InvoiceCashDiscountAmount = this.determineCashDiscountAmount(custTrans, custTransOpen);
            custVendNetDetailTmp.InvoiceCashDiscountPercent = (custVendNetDetailTmp.InvoiceCashDiscountAmount / custVendNetDetailTmp.InvoiceAmount);

            this.populateCustVendNetDetailTempNetCurrencyAmounts(custVendNetDetailTmp);

            custVendNetDetailTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateVendNetDetailTmp</Name>
				<Source><![CDATA[
    private void populateVendNetDetailTmp()
    {
        VendTable vendTable;
        VendTrans vendTrans;
        VendTransOpen vendTransOpen;
        CustVendNetAgreementRelationship agreementRelationship;
        SpecTrans specTrans;
        VendTransExcludingPrepaymentInvoice vendTransExcludingPrepaymentInvoice;

        while select crosscompany:companies DataAreaId, AccountNum, CurrencyCode, PaymMode from vendTrans
            where vendTrans.Prepayment == NoYes::No
                && vendTrans.Approved == NoYes::Yes
                && (vendTrans.PromissoryNoteStatus == CustVendNegInstStatus::None ||
                    vendTrans.PromissoryNoteStatus == CustVendNegInstStatus::Invoiced)
                && vendTrans.TransDate <= netTransDate
            join * from vendTransOpen
                where vendTrans.RecId == vendTransOpen.RefRecId
            exists join vendTable
                where vendTable.Party == partyRecId
                    && vendTable.AccountNum == vendTransOpen.AccountNum
                    && vendTable.DataAreaId == vendTransOpen.DataAreaId
                    && vendTable.Blocked != CustVendorBlocked::All
                    && vendTable.Blocked != CustVendorBlocked::Payment
                    && vendTable.TaxWithholdCalculate == NoYes::No
            exists join vendTransExcludingPrepaymentInvoice
                where vendTransExcludingPrepaymentInvoice.VendTransRecId == vendTrans.RecId
                    && vendTransExcludingPrepaymentInvoice.VendTransDataAreaId == vendTrans.DataAreaId
            exists join agreementRelationship
                where agreementRelationship.Party == vendTable.Party
                    && agreementRelationship.Company == vendTable.DataAreaId
                    && agreementRelationship.AccountNum == vendTable.AccountNum
                    && agreementRelationship.Type == CustVendACType::Vend
            notexists join specTrans
                where specTrans.RefCompany == vendTransOpen.DataAreaId
                    && specTrans.RefTableId == tableNum(VendTransOpen)
                    && specTrans.RefRecId == vendTransOpen.RecId
        {
            custVendNetDetailTmp.Type = CustVendACType::Vend;
            custVendNetDetailTmp.AccountNum = vendTrans.AccountNum;
            custVendNetDetailTmp.InvoiceCompany = vendTrans.DataAreaId;
            custVendNetDetailTmp.InvoiceCurrencyCode = vendTrans.CurrencyCode;
            custVendNetDetailTmp.InvoiceAmount = vendTransOpen.AmountCur;
            custVendNetDetailTmp.InvoiceCustVendTransOpenRecId = vendTransOpen.RecId;
            custVendNetDetailTmp.InvoiceCashDiscountAmount = this.determineCashDiscountAmount(vendTrans, vendTransOpen);
            custVendNetDetailTmp.InvoiceCashDiscountPercent = (custVendNetDetailTmp.InvoiceCashDiscountAmount / custVendNetDetailTmp.InvoiceAmount);

            this.populateCustVendNetDetailTempNetCurrencyAmounts(custVendNetDetailTmp);

            custVendNetDetailTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustVendNetDetailTempNetCurrencyAmounts</Name>
				<Source><![CDATA[
    private void populateCustVendNetDetailTempNetCurrencyAmounts(CustVendNetDetailTmp _custVendNetDetailTmp)
    {
        if (this.netCurrencyCode)
        {
            _custVendNetDetailTmp.NetCurrencyInvoiceAmount = this.convertInvoiceAmountToNetCurrencyAmount(
                _custVendNetDetailTmp.InvoiceCompany,
                _custVendNetDetailTmp.InvoiceCurrencyCode,
                _custVendNetDetailTmp.InvoiceAmount);

            _custVendNetDetailTmp.NetCurrencyInvoiceCashDiscountAmount = this.convertInvoiceAmountToNetCurrencyAmount(
                _custVendNetDetailTmp.InvoiceCompany,
                _custVendNetDetailTmp.InvoiceCurrencyCode,
                _custVendNetDetailTmp.InvoiceCashDiscountAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertInvoiceAmountToNetCurrencyAmount</Name>
				<Source><![CDATA[
    private AmountCur convertInvoiceAmountToNetCurrencyAmount(
        SelectableDataArea _invoiceCompany,
        CurrencyCode _invoiceCurrencyCode,
        AmountCur _invoiceAmount)
    {
        AmountCur resultAmount;

        if (this.netCurrencyCode == _invoiceCurrencyCode || !_invoiceAmount)
        {
            resultAmount = _invoiceAmount;
        }
        else
        {
            changecompany (_invoiceCompany)
            {
                CurrencyExchangeHelper currencyExchangeHelper = this.constructCurrencyExchangeHelper();

                AmountMST interimAmountMST = currencyExchangeHelper.calculateTransactionToAccounting(
                    _invoiceCurrencyCode,
                    _invoiceAmount,
                    false);

                resultAmount = currencyExchangeHelper.calculateAccountingToTransaction(
                    this.netCurrencyCode,
                    interimAmountMST,
                    true);
            }
        }

        return resultAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructCurrencyExchangeHelper</Name>
				<Source><![CDATA[
    private CurrencyExchangeHelper constructCurrencyExchangeHelper()
    {
        CurrencyExchangeHelper currencyExchangeHelper;

        currencyExchangeHelper = CurrencyExchangeHelper::construct();
        currencyExchangeHelper.parmExchangeDate(this.netTransDate);
        currencyExchangeHelper.parmLedgerRecId(this.primaryLedger());

        return currencyExchangeHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>primaryLedger</Name>
				<Source><![CDATA[
    private LedgerRecId primaryLedger(CompanyId _companyId = curext())
    {
        return Ledger::primaryLedger(CompanyInfo::current(_companyId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineCashDiscountAmount</Name>
				<Source><![CDATA[
    private AmountCur determineCashDiscountAmount(CustVendTrans _custVendTrans, CustVendTransOpen _custVendTransOpen)
    {
        AmountCur cashDiscToTake;
        changecompany (_custVendTransOpen.DataAreaId)
        {
            CustVendCashDiscountHelper cashDiscountHelper = CustVendCashDiscountHelper::construct(_custVendTransOpen);
            cashDiscountHelper.parmDiscountDate(netTransDate);

            CustVendTransData custVendTransData = CustVendTransData::construct(_custVendTrans);
            DiscGraceDays graceDays = custVendTransData.findPaymModeTable(false).DiscGraceDays;
            cashDiscountHelper.parmGraceDays(graceDays);

            cashDiscToTake = cashDiscountHelper.determineCashDiscForOpenAmount();
        }

        return cashDiscToTake;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new customer and vendor net balance calculator.
    /// </summary>
    /// <param name = "_partyRecId">The netting agreement party identifier.</param>
    /// <param name = "_netTransDate">The netting payment date.</param>
    /// <param name = "_companies">A container of companies that defines the boundary for the balances.</param>
    /// <param name = "_netCurrencyCode">The netting currency code.</param>
    /// <returns>A customer and vendor net balance calculator.</returns>
    public static CustVendNetBalanceCalculator construct(DirPartyRecId _partyRecId, TransDate _netTransDate, container _companies, CurrencyCode _netCurrencyCode = '')
    {
        CustVendNetBalanceCalculator calculator = new CustVendNetBalanceCalculator();
        calculator.partyRecId = _partyRecId;
        calculator.netTransDate = _netTransDate;
        calculator.companies = _companies;
        calculator.netCurrencyCode = _netCurrencyCode;
        calculator.init();

        return calculator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>