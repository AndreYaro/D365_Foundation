<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPriceChangeTrackingDiscountEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data event handlers to track the discount (price adjustment) changes.
/// Only track limited discount type as GetActivePrices only checks them.
/// --Discount: Update/Delete.
///     We don't track insert as there is no line at that stage at all.
/// --DiscountLine: Insert/Update/Delete.
///     Insert and Delete is also tracked by the RetailGroupMemberLine, need to understand their order of creation/delete in DB level.
///     The line level changes has 2 kinds
///          a. just update information like disocunt percentage, this won't impact the related product id.
///          b. category/product/variant change, this is reflected in retail group member line, the refered RetailGroupMemberLine RecId is unchanged.
///             -- b1. in our testing, we find that even only change a discount line from 0001 to 0002, the RecVersion of the discount line is also changed.
/// --RetailGroupMemberLine: Insert/Update/Delete.
///     This is a shared reference table, then check if the line changed is from retail periodic discount line first.
/// </summary>
internal class RetailPriceChangeTrackingDiscountEventHandler
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>RetailPeriodicDiscount_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for Discount update.
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="orig">The orig.</param>
    /// <param name="e">The data event args.</param>
    internal static void RetailPeriodicDiscount_onUpdated(Common sender, Common orig, DataEventArgs e)
    {
        if (RetailPriceChangeTrackingHelper::shouldSkipChangeTracking())
        {
            return;
        }

        RetailPeriodicDiscount original = orig as RetailPeriodicDiscount;
        RetailPeriodicDiscount newInstance = sender;

        // Check discount type.
        if (!RetailPeriodicDiscountChangeTrackingHelper::isDiscountTypeSupported(original.PeriodicDiscountType))
        {
            return;
        }

        RetailPeriodicDiscountChangeTrackingHelper::trackPeriodicDiscount(original);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailPeriodicDiscount_onDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handle for discount delete.
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="orig">The orig.</param>
    /// <param name="e">The data event args.</param>
    internal static void RetailPeriodicDiscount_onDeleted(Common sender, Common orig, DataEventArgs e)
    {
        if (RetailPriceChangeTrackingHelper::shouldSkipChangeTracking())
        {
            return;
        }

        RetailPeriodicDiscount original = orig as RetailPeriodicDiscount;

        // Check discount type.
        if (!RetailPeriodicDiscountChangeTrackingHelper::isDiscountTypeSupported(original.PeriodicDiscountType))
        {
            return;
        }

        if (original.Status == RetailDisabledEnabled::Enabled)
        {
            // Enabled, in case some changes like valid period that impacts the current product price.
            RetailPeriodicDiscountChangeTrackingHelper::trackPeriodicDiscount(original);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailPeriodicDiscountLine_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handle for discount line change.
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="orig">The orig.</param>
    /// <param name="e">The data event args.</param>
    internal static void RetailPeriodicDiscountLine_onUpdated(Common sender, Common orig, DataEventArgs e)
    {
        if (RetailPriceChangeTrackingHelper::shouldSkipChangeTracking())
        {
            return;
        }

        RetailPeriodicDiscountLine discountLine = sender;
        
        RetailPeriodicDiscountChangeTrackingHelper::trackRetailPeriodicDiscountLine(discountLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailPeriodicDiscountLine_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handle for price discount line insert.
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="orig">The orig.</param>
    /// <param name="e">The data event args.</param>
    internal static void RetailPeriodicDiscountLine_onInserted(Common sender, Common orig, DataEventArgs e)
    {
        if (RetailPriceChangeTrackingHelper::shouldSkipChangeTracking())
        {
            return;
        }

        RetailPeriodicDiscountChangeTrackingHelper::trackRetailPeriodicDiscountLine(sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailPeriodicDiscountLine_onDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handle for price adjustment line delete.
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="orig">The orig.</param>
    /// <param name="e">The data event args.</param>
    internal static void RetailPeriodicDiscountLine_onDeleted(Common sender, Common orig, DataEventArgs e)
    {
        if (RetailPriceChangeTrackingHelper::shouldSkipChangeTracking())
        {
            return;
        }

        RetailPeriodicDiscountLine original = orig as RetailPeriodicDiscountLine;
        RetailPeriodicDiscountChangeTrackingHelper::trackRetailPeriodicDiscountLine(original);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailGroupMemberLine_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handle for discount line update.
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="orig">The orig.</param>
    /// <param name="e">The data event args.</param>
    internal static void RetailGroupMemberLine_onUpdated(Common sender, Common orig, DataEventArgs e)
    {
        if (RetailPriceChangeTrackingHelper::shouldSkipChangeTracking())
        {
            return;
        }

        RetailGroupMemberLine newLine = sender;
        RetailGroupMemberLine origLine = orig as RetailGroupMemberLine;
        
        RetailPeriodicDiscountChangeTrackingHelper::trackRetailGroupMemberLine(newLine);
        RetailPeriodicDiscountChangeTrackingHelper::trackRetailGroupMemberLine(origLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailGroupMemberLine_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handle for retail group member line insert.
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="orig">The orig.</param>
    /// <param name="e">The data event args.</param>
    internal static void RetailGroupMemberLine_onInserted(Common sender, Common orig, DataEventArgs e)
    {
        if (RetailPriceChangeTrackingHelper::shouldSkipChangeTracking())
        {
            return;
        }

        RetailPeriodicDiscountChangeTrackingHelper::trackRetailGroupMemberLine(sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailGroupMemberLine_onDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handle for retail group member line delete.
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="orig">The orig.</param>
    /// <param name="e">The data event args.</param>
    internal static void RetailGroupMemberLine_onDeleted(Common sender, Common orig, DataEventArgs e)
    {
        if (RetailPriceChangeTrackingHelper::shouldSkipChangeTracking())
        {
            return;
        }

        RetailGroupMemberLine original = orig as RetailGroupMemberLine;
        RetailPeriodicDiscountChangeTrackingHelper::trackRetailGroupMemberLine(original);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>