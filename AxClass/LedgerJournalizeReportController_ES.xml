<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalizeReportController_ES</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerJournalizeReportController_ES</c> class is a controller class for the
///    <c>LedgerJournalizeReport_ES</c> SSRS report.
/// </summary>
class LedgerJournalizeReportController_ES extends SrsReportRunController implements BatchRetryable
{
    LedgerJournalizeNum     journalNum;
    PageNo                  oldEndPage;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Changes the report contract before running the report.
    /// </summary>
    protected void preRunModifyContract()
    {
        const str PageNo = 'PageNo';
        SrsReportRdlDataContract    rdlContract;
        this.setRanges(this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey()));
        rdlContract = this.parmReportContract().parmRdlContract();
        if (rdlContract)
        {
            rdlContract.setValue(PageNo, oldEndPage);
        }

        //register event here to overcome the issue with missing registered
        //events in controller objects on client/server sides
        this.renderingCompleted += eventhandler(LedgerJournalizeReportController_ES::renderingComplete);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLastPageNo</Name>
				<Source><![CDATA[
    public void setLastPageNo(PageNo  _lastPageNo)
    {
        LedgerJournalizeReport::updatePageNum(journalNum, _lastPageNo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addJournalizeNumRanges</Name>
				<Source><![CDATA[
    private void addJournalizeNumRanges(Query _query)
    {
        QueryBuildDataSource        queryBuildDataSource;
        QueryBuildRange             queryBuildRangeJournalizeNum;
        LedgerJournalizeReport      ledgerJournalizeReport;
        //Retreive the record from args object.
        ledgerJournalizeReport = this.parmArgs().record();

        oldEndPage             = LedgerJournalizeReport::priorReportLastPage(ledgerJournalizeReport);
        journalNum             = ledgerJournalizeReport.JournalizeNum;
        queryBuildDataSource = _query.dataSourceTable(tableNum(LedgerEntryJournalizing));

        // Create the JournalizeNum range
        queryBuildRangeJournalizeNum = queryBuildDataSource.findRange(fieldNum(LedgerEntryJournalizing,Journal));
        if (!queryBuildRangeJournalizeNum)
        {
            queryBuildRangeJournalizeNum = queryBuildDataSource.addRange(fieldNum(LedgerEntryJournalizing,Journal));
        }

        // Set the range values
        queryBuildRangeJournalizeNum.value(journalNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLegalEntityFilterNotAdded</Name>
				<Source><![CDATA[
    private boolean isLegalEntityFilterNotAdded(Query _query)
    {
        int queryFilterCount = _query.queryFilterCount();

        for (int i = 0; i < queryFilterCount; i++)
        {
            QueryFilter          filter     = _query.queryFilter(i + 1);
            QueryBuildDataSource dataSource = filter.dataSource();

            if (dataSource.name() == tableStr(GeneralJournalEntry) && filter.field() == fieldStr(GeneralJournalEntry, SubledgerVoucherDataAreaId))
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLegalEntityRange</Name>
				<Source><![CDATA[
    private void addLegalEntityRange(Query _query)
    {
        // first check to see if a legal entity filter hasn't already been added
        if (this.isLegalEntityFilterNotAdded(_query))
        {
            QueryBuildDataSource queryBuildDataSource;
            QueryBuildRange      legalEntityRange;

            queryBuildDataSource = _query.dataSourceTable(tableNum(GeneralJournalEntry));
            legalEntityRange     = queryBuildDataSource.findRange(fieldNum(GeneralJournalEntry, SubledgerVoucherDataAreaId));

            // If a range for the legal entity does not already exist, add it and set it to the current company
            if (!legalEntityRange)
            {
                legalEntityRange = queryBuildDataSource.addRange(fieldNum(GeneralJournalEntry, SubledgerVoucherDataAreaId));
                legalEntityRange.value(curExt());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns values to range of query based on args object.
    /// </summary>
    /// <param name="_query">
    ///    The query that is used by the report.
    /// </param>
    public void setRanges(Query _query)
    {
        this.addJournalizeNumRanges(_query);
        this.addLegalEntityRange(_query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        #ISOCountryRegionCodes
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoES, GlobalizationConstants::FeatureReferenceES00022] ],
            funcName()
        );

        LedgerJournalizeReportController_ES   controller = new LedgerJournalizeReportController_ES();
        controller.parmReportName(ssrsReportStr(LedgerJournalizeReport_ES, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>renderingComplete</Name>
				<Source><![CDATA[
    public static void renderingComplete(SrsReportRunController _sender, SrsRenderingCompletedEventArgs _eventArgs)
    {
        SRSReportExecutionInfo  executionInfo           = _eventArgs.parmReportExecutionInfo();
        LedgerJournalizeReportController_ES controller  = _sender;

        if (executionInfo && executionInfo.parmIsSuccessful())
        {
            controller.setLastPageNo(executionInfo.parmPrintedPhysicalPages());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>