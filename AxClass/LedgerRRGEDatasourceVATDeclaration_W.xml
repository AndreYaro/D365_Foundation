<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGEDatasourceVATDeclaration_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerRRGEDatasourceVATDeclaration_W</c> class calculates values VAT declaration.
/// </summary>
public class LedgerRRGEDatasourceVATDeclaration_W extends LedgerRRGEDatasourceQueryComplex_W
{
    Map                 tableSections;
    Map                 operationCodes;
    TransDate           periodStart;
    TransDate           periodEnd;

    private const int   StaticPages = 4;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTableSection</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void addTableSection(LedgerRRGEDatasource_W _datasource)
    {
        if (_datasource)
        {
            if (!tableSections)
            {
                this.initTableSections();
            }

            MapEnumerator me = _datasource.tablesMap().getEnumerator();
            while (me.moveNext())
            {
                tableSections.insert(me.currentKey(), _datasource);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultWorksheet</Name>
				<Source><![CDATA[
    public str defaultWorksheet(int _tableId)
    {
        LedgerRRGEDatasource_W datasource = this.findDatasource(_tableId);

        return datasource ? datasource.defaultWorksheet(_tableId) : super(_tableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDatasource</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LedgerRRGEDatasource_W findDatasource(int _tableId)
    {
        if (!tableSections)
        {
            this.initTables();
        }

        if (tableSections.exists(_tableId))
        {
            return tableSections.lookup(_tableId);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialized</Name>
				<Source><![CDATA[
    public boolean initialized(int _tableId)
    {
        LedgerRRGEDatasource_W datasource = this.findDatasource(_tableId);

        return datasource ? datasource.initialized(_tableId) : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTables</Name>
				<Source><![CDATA[
    public void initTables()
    {
        super();

        this.initTableSections();

        this.addTableSection(LedgerRRGEDatasourceVATDecl501S2_W::newFromVATDeclaration(this));
        this.addTableSection(LedgerRRGEDatasourceVATDecl501S3_W::newFromVATDeclaration(this));
        this.addTableSection(LedgerRRGEDatasourceVATDecl501S31_W::newFromVATDeclaration(this));

        this.addTableSection(LedgerRRGEDatasourceVATDecl501S4_W::newFromVATDeclaration(this));
        this.addTableSection(LedgerRRGEDatasourceVATDecl501S5_W::newFromVATDeclaration(this));
        this.addTableSection(LedgerRRGEDatasourceVATDecl501S6_W::newFromVATDeclaration(this));

        this.addTableSection(LedgerRRGEDatasourceVATDeclarationCo_W::newFromVATDeclaration(this));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTableSections</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initTableSections()
    {
        tableSections = new Map(Types::Integer, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQueryMultiLine</Name>
				<Source><![CDATA[
    public boolean isQueryMultiLine()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    public boolean next(int _tableId)
    {
        LedgerRRGEDatasource_W datasource = this.findDatasource(_tableId);

        return datasource ? datasource.next(_tableId) : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationCode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public VATOperationCode_RU operationCode(TaxCode _taxCode)
    {
        VATOperationCode_RU operationCode;

        if (!operationCodes)
        {
            operationCodes = new Map(Types::String, Types::String);
        }

        if (operationCodes.exists(_taxCode))
        {
            operationCode = operationCodes.lookup(_taxCode);
        }
        else
        {
            operationCode = TaxTable::find(_taxCode).vatOperationCode_RU;
            operationCodes.insert(_taxCode, operationCode);
        }

        return operationCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pageCount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int pageCount()
    {
        int                                         res = StaticPages;
        MapEnumerator                               me;
        LedgerRRGEDatasourceVATDeclarationBase_W    datasource;

        me = this.sectionsEnumerator();
        while (me.moveNext())
        {
            datasource = me.currentValue();
            res += datasource.pageCount(me.currentKey());
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEvaluator</Name>
				<Source><![CDATA[
    public LedgerRRGEBufferEval_W parmEvaluator(LedgerRRGEBufferEval_W _evaluator = evaluator)
    {
        MapEnumerator                               me;
        LedgerRRGEDatasourceVATDeclarationBase_W    datasource;

        if (!prmisdefault(_evaluator) && evaluator != _evaluator)
        {
            [periodStart, periodEnd] = BookDataCalc_RU::datePeriodBook(_evaluator.parms().toDate());

            me = this.sectionsEnumerator();
            while (me.moveNext())
            {
                datasource = me.currentValue();
                datasource.parmEvaluator(_evaluator);
            }
        }

        return super(_evaluator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodEnd</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate parmPeriodEnd(TransDate _periodEnd = periodEnd)
    {
        periodEnd = _periodEnd;
        return periodEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodStart</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate parmPeriodStart(TransDate _periodStart = periodStart)
    {
        periodStart = _periodStart;
        return periodStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodEnd</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate periodEnd()
    {
        if (!periodEnd && evaluator)
        {
            [periodStart, periodEnd] = BookDataCalc_RU::datePeriodBook(evaluator.parms().toDate());
        }

        return periodEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodStart</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate periodStart()
    {
        if (!periodStart && evaluator)
        {
            [periodStart, periodEnd] = BookDataCalc_RU::datePeriodBook(evaluator.parms().toDate());
        }

        return periodStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    public void reset(int _tableId)
    {
        MapEnumerator           me;
        LedgerRRGEDatasource_W  datasource;

        super(_tableId);

        if (_tableId)
        {
            datasource = this.findDatasource(_tableId);
            if (datasource)
            {
                datasource.reset(_tableId);
            }
        }
        else
        {
            me = this.sectionsEnumerator();
            while (me.moveNext())
            {
                datasource = me.currentValue();
                datasource.reset(me.currentKey());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sectionsEnumerator</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected MapEnumerator sectionsEnumerator()
    {
        if (!tableSections)
        {
            this.initTables();
        }

        return tableSections.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showNamesInLookup</Name>
				<Source><![CDATA[
    public boolean showNamesInLookup()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCellCode</Name>
				<Source><![CDATA[
    public void updateCellCode(int _fieldId, int _tableId)
    {
        LedgerRRGEDatasource_W datasource = this.findDatasource(_tableId);

        if (datasource)
        {
            datasource.updateCellCode(_fieldId, _tableId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGEDatasourceVATDeclaration_W construct()
    {
        return new LedgerRRGEDatasourceVATDeclaration_W();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>