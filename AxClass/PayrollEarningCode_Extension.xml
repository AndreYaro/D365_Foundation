<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollEarningCode_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PayrollEarningCode_Extension</c> is an extension of the <c>PayrollEarningCode</c> table and contains
/// table methods and event subscriber methods.
/// </summary>
[ExtensionOf(tableStr(PayrollEarningCode))]
public final class PayrollEarningCode_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>lookupEarningCodeForWorkerPosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a custom lookup for the <c>PayrollEarningCode</c> records that excludes retroactive earning codes
    /// and earning codes with an include in payment type of auto
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The form control that is bound to the foreign key reference to the <c>PayrollEarningCode</c> table.
    /// </param>
    /// <returns>
    /// A reference to a <c>PayrollEarningCode</c> record.
    /// </returns>
    public static PayrollEarningCode lookupEarningCodeForWorkerPosition(FormReferenceControl _formReferenceControl)
    {
        SysReferenceTableLookup sysRefTableLookup = SysReferenceTableLookup::newParameters(tableNum(PayrollEarningCode), _formReferenceControl);
        
        Query query = new Query();
        
        QueryBuildDataSource qbds = query.addDataSource(tableNum(PayrollEarningCode));
        
        // Filter lookup so that earning codes with an Include In Payment Type of Auto aren't shown
        QueryBuildRange includeInPaymentTypeRange = qbds.addRange(fieldNum(PayrollEarningCode, IncludeInPaymentType));
        includeInPaymentTypeRange.value(SysQuery::valueNot(PayrollIncludeInPaymentType::Auto));
        includeInPaymentTypeRange.status(RangeStatus::Locked);
        includeInPaymentTypeRange.status(RangeStatus::Hidden);
        
        // Filter lookup so that retroactive earning codes aren't shown
        QueryBuildRange retroRange = qbds.addRange(fieldNum(PayrollEarningCode, IsRetroactive));
        retroRange.value(SysQuery::value(queryValue(NoYes::No)));
        retroRange.status(RangeStatus::Locked);
        retroRange.status(RangeStatus::Hidden);
        
        // Add fields
        qbds.addSortField(fieldNum(PayrollEarningCode, EarningCode));
        
        // Add sort order
        sysRefTableLookup.addLookupfield(fieldNum(PayrollEarningCode, EarningCode));
        sysRefTableLookup.addLookupfield(fieldNum(PayrollEarningCode, Description));
        
        // Run lookup
        sysRefTableLookup.parmQuery(query);

        PayrollEarningCode selectedRecord = sysRefTableLookup.performFormLookup();
        
        return selectedRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the View Details option to earning code lookup.
    /// </summary>
    /// <param name="_earningCode">
    ///     The earning code being looked up.
    /// </param>
    /// <param name="_caller">
    ///     The calling form.
    /// </param>
    /// <remarks>
    /// The method takes the earning code value as an input param and opens the earning code definition form with the provided earning code selected.
    /// </remarks>
    public static void jumpRef(PayrollEarningCodeId _earningCode, Object _caller)
    {
        PayrollEarningCode payrollEarningCode = PayrollEarningCode::findByEarningCode(_earningCode);

        if (!payrollEarningCode)
        {
            return;
        }

        Args args = new Args();
        args.caller(_caller);
        args.lookupRecord(payrollEarningCode);
        args.openMode(OpenMode::Auto);

        MenuFunction menuFunction = new MenuFunction(menuitemDisplayStr(PayrollEarningCode), MenuItemType::Display);
        FormRun formRun = menuFunction.create(args);
        formRun.run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>