<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostOnAccProposalSale</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjPostOnAccProposalSale extends ProjPostOnAccProposal
{
    ProjProposalOnAccDetail projProposalOnAccDetail;
    ProjOnAccTransSale      projOnAccTransSale;
    ProjInvoiceOnAccDetail  projInvoiceOnAccDetail;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkEnterTurnover</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether revenue should be posted for the transaction.
    /// </summary>
    /// <returns>
    /// true if the revenue amount is non-zero and the method <c>ProjPost.parmEnterTurnover</c> returns
    /// true; otherwise, false.
    /// </returns>
    protected boolean checkEnterTurnover()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondaryTurnover</Name>
				<Source><![CDATA[
        public ExchRate exchRateSecondaryTurnover()
    {
        ProjInvoiceJour         projInvoiceJourOrig;
        ProjInvoiceOnAccDetail  projInvoiceOnAccDetailOrig;

        if (projOnAccTransSale.TransStatus == ProjTransStatus::CreditnoteProposal)
        {
            projInvoiceOnAccDetail.reread();
            select projInvoiceOnAccDetailOrig where projInvoiceOnAccDetailOrig.RecId == projInvoiceOnAccDetail.RefRecId;
            projInvoiceJourOrig = projInvoiceOnAccDetailOrig.projInvoiceOnAcc().projInvoiceJour();
            return projTrans.exchRateSecondarySales(projInvoiceJourOrig.InvoiceDate);
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateTurnover</Name>
				<Source><![CDATA[
        public ExchRate exchRateTurnover()
    {
        ProjInvoiceJour         projInvoiceJourOrig;
        ProjInvoiceOnAccDetail  projInvoiceOnAccDetailOrig;

        if (projOnAccTransSale.TransStatus == ProjTransStatus::CreditnoteProposal)
        {
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
            {
                projInvoiceOnAccDetail.reread();
                select firstonly projInvoiceOnAccDetailOrig where projInvoiceOnAccDetailOrig.RecId == projInvoiceOnAccDetail.RefRecId;
                projInvoiceJourOrig = projInvoiceOnAccDetailOrig.projInvoiceOnAcc().projInvoiceJour();
                return projTrans.exchRateSales(projInvoiceJourOrig.InvoiceDate);
            }
            else
            {
                return projTrans.exchRateSales(projProposalOnAcc.projProposalJour().InvoiceDate);
            }
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(ProjProposalOnAcc  _projProposalOnAcc, ProjProposalOnAccDetail  _projProposalOnAccDetail, ProjOnAccTransSale _projOnAccTransSale)
    {
        projProposalOnAccDetail = _projProposalOnAccDetail;
        projOnAccTransSale = _projOnAccTransSale;

        super(_projProposalOnAcc);

        projTrans = ProjTrans::newProjProposalOnAccSale(_projProposalOnAcc, _projProposalOnAccDetail, _projOnAccTransSale);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceUpdate</Name>
				<Source><![CDATA[
        private void projInvoiceUpdate(RefRecId _saleRefRecId)
    {
        ProjInvoiceOnAccDetail  projInvoiceOnAccDetailOrginal;
        ProjInvoiceOnAccDetail  projInvoiceOnAccDetailReverse;

        ttsbegin;

        select forupdate RefRecId from projInvoiceOnAccDetailOrginal
            where  projInvoiceOnAccDetailOrginal.SaleRefRecId == _saleRefRecId
               && !projInvoiceOnAccDetailOrginal.RefRecId;

        select forupdate RefRecId from projInvoiceOnAccDetailReverse
            where  projInvoiceOnAccDetailReverse.SaleRefRecId == _saleRefRecId
               &&  projInvoiceOnAccDetailReverse.RecId != projInvoiceOnAccDetailOrginal.RecId
               && !projInvoiceOnAccDetailReverse.RefRecId;

        projInvoiceOnAccDetailReverse.RefRecId = projInvoiceOnAccDetailOrginal.RecId;

        projInvoiceOnAccDetailOrginal.RefRecId = projInvoiceOnAccDetailReverse.RecId;

        projInvoiceOnAccDetailReverse.update();
        projInvoiceOnAccDetailOrginal.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows for extensibility in creating a transaction posting. The method contains no code.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method before the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmCreateTrans</c> method is true.
    /// </remarks>
    public void projTransCreate()
    {
        ProjInvoiceOnAcc        projInvoiceOnAcc;
        ProjInvoiceOnAccDetail  locProjInvoiceOnAccDetailCheck;
        ProjOnAccTransSale      projOnAccTransSaleUpd;

        this.checkAccount();

        projInvoiceOnAccDetail.clear();
        projInvoiceOnAccDetail = ProjInvoiceOnAccDetail::initInvoiceFromProposale(projProposalOnAcc, projProposalOnAccDetail, projOnAccTransSale);

        select RecId from projInvoiceOnAcc
            where projInvoiceOnAcc.ProjInvoiceId == projProposalOnAcc.projProposalJour().ProjInvoiceId &&
                projInvoiceOnAcc.TransId == projProposalOnAcc.projOnAccTrans().TransId;

        projInvoiceOnAccDetail.InvoiceRefRecId = projInvoiceOnAcc.RecId;
        projInvoiceOnAccDetail.insert();

        boolean isCreditNote;
        if (projOnAccTransSale.TransStatus == ProjTransStatus::CreditnoteProposal)
        {
            isCreditNote = true;
            this.projInvoiceUpdate(projOnAccTransSale.RecId);
        }

        projOnAccTransSaleUpd = ProjOnAccTransSale::find(projOnAccTransSale.RecId, true);

        ProjTransPosting projTransPosting;
        AmountMST totalAmount = 0;
        boolean posted = false;

        // Sum posted on acc transaction amounts with origin of Milestone for the same trans id.
        while select AmountMST from projTransPosting
            where  projOnAccTransSale.TransId == projTransPosting.TransId
                && projTransPosting.TransactionOrigin == ProjOrigin::Milestone
                && projTransPosting.ProjTransType == ProjTransType::OnAccount
                && projTransPosting.LedgerOrigin == ProjOrigin::Invoice
                && projTransPosting.PostingType == LedgerPostingType::ProjOnAccount
        {
            totalAmount += projTransPosting.AmountMST;
            posted = true;
        }

        if (projProposalOnAcc.projOnAccTrans().TransactionOrigin == ProjOrigin::Prepayment &&
            projOnAccTransSale.TransStatus == ProjTransStatus::CreditnoteProposal &&
            projProposalOnAcc.projOnAccTrans().PSAIsOnAccount == NoYes::Yes)
        {
            projOnAccTransSaleUpd.TransStatus = ProjTransStatus::Adjusted;
        }
        else if (ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled()
            && posted
            && projOnAccTransSale.TransStatus == ProjTransStatus::Registered
            && projProposalOnAcc.projOnAccTrans().TransactionOrigin == ProjOrigin::Milestone
            && totalAmount == 0)
        {
            // When re-invoicing an account transaction with milestone transaction origin, registered 
            // trans status, and fully credited amount, the trans status should update to invoiced.
            projOnAccTransSaleUpd.TransStatus = ProjTransStatus::Invoiced;
        }
        else
        {
            projOnAccTransSaleUpd.TransStatus = this.parmTransStatus();
        }

        if (projOnAccTransSaleUpd.TransStatus==ProjTransStatus::Invoiced)
        {
            select firstonly locProjInvoiceOnAccDetailCheck
                where locProjInvoiceOnAccDetailCheck.SaleRefRecId == projProposalOnAccDetail.SaleRefRecId
                && locProjInvoiceOnAccDetailCheck.wipPeriod;
            if (locProjInvoiceOnAccDetailCheck)
            {
                projOnAccTransSaleUpd.TransStatus = ProjTransStatus::Estimated;
            }
        }
        projOnAccTransSaleUpd.update();

        // Updating the prepayment credit note reference line status to Adjusted.
        if (projProposalOnAcc.projOnAccTrans().TransactionOrigin == ProjOrigin::Prepayment && projOnAccTransSaleUpd.TransStatus == ProjTransStatus::Adjusted)
        {
            ProjOnAccTransSale projOnAccTransSaleUpdStatus;

            ttsbegin;
            ProjOnAccTrans projOnAccTransDeduct;
            ProjOnAccTrans projOnAccTransPrepay;

            update_recordset projOnAccTransSaleUpdStatus
                setting TransStatus = ProjTransStatus::Adjusted
                exists join projOnAccTransDeduct
                    where projOnAccTransDeduct.TransId == projOnAccTransSaleUpdStatus.TransId
                exists join projOnAccTransPrepay
                    where projOnAccTransPrepay.RecId == projOnAccTransDeduct.PSARefRecId
                        && projOnAccTransPrepay.TransId == projOnAccTransSaleUpd.TransId;
            ttscommit;
        }

        //Update contract line units or percent(IsInvoice).
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && ProjInvoiceTable::find(PSAContractLineItems::find(projProposalOnAcc.psaContractLineNum).ProjInvoiceProjId).psaContractLines == NoYes::Yes)
        {
            // Calculate invoice qty for both invoice and credit note scenarios
            if (PSAContractLineItems::find(projProposalOnAcc.psaContractLineNum).LineType == PSAContractLineType::UOD)
            {
                Qty invoiceQty = PSAContractLineItemsServer::computeQuantityForUOD(projProposalOnAcc.psaContractLineNum, projProposalOnAcc.lineAmount(), isCreditNote);

                if (invoiceQty > 0.0)
                {
                    PSAContractLineItemsServer::updateUnitsOrPercentInvoice(projProposalOnAcc.psaContractLineNum, NoYes::Yes, invoiceQty, 0, isCreditNote);
                }
            }
            else
            {
                PSAContractLineItemsServer::updateUnitsOrPercentInvoice(projProposalOnAcc.psaContractLineNum, NoYes::Yes, 0.0, projProposalOnAccDetail.AmountCur);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>ProjPost.postTrans</c> method after the
    /// <c>ProjPost.ledgerTransActionsCreate</c> method when the <c>ProjPost.parmUpdateTrans</c> method
    /// returns true.
    /// </remarks>
    public void projTransUpdate()
    {
        projInvoiceOnAccDetail.reread();

        // As the records are processed using RecordSortedList in ProjInvoiceJournalPost.createProjInvoiceOnAcc() in order of RecId,
        // the existing code in ProjPost.postTurnOver() is written to apply all the deductions to the first non-deduction on account transaction
        // only the first non deduction transaction needs to be processed as following

        if (ProjCalcOnAccAmountInAccCurFlight::instance().isEnabled()
            && ledgerVoucher.parmIsAdvanceDeducted()
            && projProposalOnAcc.projOnAccTrans().TransactionOrigin != ProjOrigin::Deduction
            && this.proposalHasDeduction()
            && this.isFirstNonDeductionOnAccountTrans())
        {
            projInvoiceOnAccDetail.AmountMST = -(ledgerVoucher.lastAmountMST() + this.deductionAmount());
        }
        else if (ledgerVoucher)
        {
            projInvoiceOnAccDetail.AmountMST = -ledgerVoucher.lastAmountMST();
        }

        projInvoiceOnAccDetail.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposalHasDeduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if invoice proposal has deduction or not based on IsPreBill field value
    /// </summary>
    /// <returns>true if invoice proposal has deduction, else false</returns>
    private boolean proposalHasDeduction()
    {
        PSAProjProposalProj psaProjProposalProj;
        if (contractLineBasedRevRecFeature && isContractLineUsed)
        {
            select firstonly ProjProposalId, InvoicedNow from psaProjProposalProj
                where psaProjProposalProj.ProjProposalId == projTrans.proposalId()
                    && psaProjProposalProj.ContractLineNum == projTrans.psaContractLineNum()
                    && psaProjProposalProj.IsPreBill == NoYes::Yes;
        }
        else
        {
            select firstonly ProjProposalId, InvoicedNow from psaProjProposalProj
                where psaProjProposalProj.ProjProposalId == projTrans.proposalId()
                    && psaProjProposalProj.ProjId == projTrans.projId()
                    && psaProjProposalProj.IsPreBill == NoYes::Yes;
        }
        return psaProjProposalProj.InvoicedNow != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFirstNonDeductionOnAccountTrans</Name>
				<Source><![CDATA[
    private boolean isFirstNonDeductionOnAccountTrans()
    {
        ProjProposalOnAcc projProposalOnAccLoc;
        ProjOnAccTrans projOnAccTransLoc;

        select firstonly RecId from projProposalOnAccLoc order by RecId
            where projProposalOnAccLoc.ProposalId == projProposalOnAcc.ProposalId
        exists join projOnAccTransLoc
            where projOnAccTransLoc.TransId == projProposalOnAccLoc.TransId
                && projOnAccTransLoc.TransactionOrigin != ProjOrigin::Deduction;

        return ProjProposalOnAcc.RecId == projProposalOnAccLoc.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deductionAmount</Name>
				<Source><![CDATA[
    private AmountMST deductionAmount()
    {
        AmountMST deductionAmount = 0;

        ProjProposalOnAcc projProposalOnAccBill;
        ProjOnAccTransSale projOnAccTransSaleLoc;
        ProjOnAccTrans projOnAccTransLoc;

        // Executes for each deduction record.
        while select LedgerTransdate, Amount, TransStatus from projOnAccTransSaleLoc
            join RecId from projOnAccTransLoc
                where projOnAccTransLoc.TransId == projOnAccTransSaleLoc.TransId
                    && projOnAccTransLoc.TransactionOrigin == ProjOrigin::Deduction
                    && projOnAccTransLoc.PSAIsOnAccount == NoYes::Yes
            join RecId from projProposalOnAccBill
                where projProposalOnAccBill.TransId == projOnAccTransSaleLoc.TransId
                    && projProposalOnAccBill.ProposalId == projTrans.proposalId()
        {
            // Considers original transaction invoice date to pick exchange rate for project credit note invoice posting as well.
            // If transaction status is credit note proposal and customer advance is present then post positive entry.
            CurrencyExchangeHelper exchangeRateHelperPreBill = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), projOnAccTransSaleLoc.LedgerTransdate);

            if (projOnAccTransSaleLoc.TransStatus == ProjTransStatus::CreditnoteProposal)
            {
                deductionAmount -= exchangeRateHelperPreBill.calculateTransactionToAccounting(projTrans.currencyIdSales(), projOnAccTransSaleLoc.Amount, true);        
            }
            else
            {
                deductionAmount += exchangeRateHelperPreBill.calculateTransactionToAccounting(projTrans.currencyIdSales(), projOnAccTransSaleLoc.Amount, true);
            }
        }
        return deductionAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>