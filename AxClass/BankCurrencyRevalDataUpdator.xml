<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankCurrencyRevalDataUpdator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankCurrencyRevalDataUpdator</c> class handles the bulk updating of the initial data for the bank - foreign currency revaluation process.
/// </summary>
internal final class BankCurrencyRevalDataUpdator
{
    private BankCurrencyRevalTmp bankCurrencyRevalTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBankCurrencyRevalTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>BankCurrencyRevalDataUpdator</c> class given a populated <c>BankCurrencyRevalTmp</c> table buffer.
    /// </summary>
    /// <param name = "_bankCurrencyRevalTmp">A <c>BankCurrencyRevalTmp</c> table buffer containing initially populated currency revaluation values.</param>
    /// <param name = "_isPreview">true if the data will be displayed for preview; otherwise, false.</param>
    /// <returns>A new instance of the <c>BankCurrencyRevalDataUpdator</c> class.</returns>
    internal static BankCurrencyRevalDataUpdator newFromBankCurrencyRevalTmp(BankCurrencyRevalTmp _bankCurrencyRevalTmp)
    {
        BankCurrencyRevalDataUpdator updator = new BankCurrencyRevalDataUpdator();
        updator.bankCurrencyRevalTmp = _bankCurrencyRevalTmp;

        return updator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankCurrencyRevalData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the initial revaluation data in preparation for revaluation calculation.
    /// </summary>
    internal void updateBankCurrencyRevalData()
    {
        bankCurrencyRevalTmp.skipDatabaseLog(true);
        bankCurrencyRevalTmp.skipDataMethods(true);
        bankCurrencyRevalTmp.skipEvents(true);

        BankCurrencyRevalTmp bankCurrencyRevalTmpUpdate;

        bankCurrencyRevalTmpUpdate.useExistingTempDBTable(bankCurrencyRevalTmp.getPhysicalTableName());

        while select LegalEntity
            from bankCurrencyRevalTmpUpdate
            group by LegalEntity
        {
            CompanyInfo companyInfo = CompanyInfo::find(false, bankCurrencyRevalTmpUpdate.LegalEntity);

            changecompany(companyInfo.DataArea)
            {
                this.updateBankCurrencyRevalTmpMainAccounts();
                this.updateBankCurrencyRevalTmpExchangeRateTypes();
                this.updateBankCurrencyRevalTmpCrossRateValues();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankCurrencyRevalTmpMainAccounts</Name>
				<Source><![CDATA[
    private void updateBankCurrencyRevalTmpMainAccounts()
    {
        MainAccount mainAccount;
        DimensionAttributeValueCombination ledgerDimension;

        update_recordset bankCurrencyRevalTmp
            setting MainAccount = mainAccount.RecId
            where bankCurrencyRevalTmp.LegalEntity == CompanyInfo::current()
                join RecId from ledgerDimension
                    where ledgerDimension.RecId == bankCurrencyRevalTmp.BankLedgerDimension
                join RecId from mainAccount
                    where mainAccount.RecId == ledgerDimension.MainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankCurrencyRevalTmpExchangeRateTypes</Name>
				<Source><![CDATA[
    private void updateBankCurrencyRevalTmpExchangeRateTypes()
    {
        if (FeatureStateProvider::isFeatureEnabled(BankRevalExchRateTypeEnhancementFeature::instance()))
        {
            this.refreshExchangeRateType();
            this.updateAccountingExchangeRateTypeEnhancedSettings();

            if (this.hasReportingCurrencyCode())
            {
                this.updateReportingExchangeRateTypeEnhancedSettings();
            }
        }
        else
        {
            // Execution order of these methods is important due to the rules defining how we should default this data from the system.
            this.updateExchangeRateTypeForMainAccountCompanyOverrides();
            this.updateExchangeRateTypeForMainAccount();
            this.updateExchangeRateTypeBasedOnLedgerSetting();

            if (this.hasReportingCurrencyCode())
            {
                this.updateReportingExchangeRateTypeForMainAccountCompanyOverrides();
                this.updateReportingExchangeRateTypeForMainAccount();
                this.updateReportingExchangeRateTypeBasedOnLedgerSetting();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshExchangeRateType</Name>
				<Source><![CDATA[
    private void refreshExchangeRateType()
    {
        update_recordset bankCurrencyRevalTmp
            setting ExchangeRateType = 0,
                ReportingCurrencyExchangeRateType = 0
                where bankCurrencyRevalTmp.LegalEntity == CompanyInfo::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAccountingExchangeRateTypeEnhancedSettings</Name>
				<Source><![CDATA[
    private void updateAccountingExchangeRateTypeEnhancedSettings()
    {
        BankParameters bankParameters = BankParameters::find();
        switch (bankParameters.ExchAdjRateSource)
        {
            case BankRevalExchRateSource::Bank:
                BankAccountTable bankAccountTable;
                update_recordset bankCurrencyRevalTmp
                    setting ExchangeRateType = bankAccountTable.AccountingCurrencyExchangeRateType
                        where bankCurrencyRevalTmp.LegalEntity == CompanyInfo::current()
                        join AccountingCurrencyExchangeRateType from bankAccountTable
                            where bankAccountTable.AccountID == bankCurrencyRevalTmp.BankAccountId
                                && bankAccountTable.AccountingCurrencyExchangeRateType != 0;
                break;

            case BankRevalExchRateSource::Specific:
                update_recordset bankCurrencyRevalTmp
                    setting ExchangeRateType = bankParameters.AccountingCurrencyExchangeRateType
                        where bankCurrencyRevalTmp.LegalEntity == CompanyInfo::current();
                break;

            default:
                break;
        }

        if (bankParameters.ExchAdjRateSource != BankRevalExchRateSource::Specific)
        {
            MainAccountLegalEntity mainAccountLegalEntity;
            update_recordset bankCurrencyRevalTmp
                setting ExchangeRateType = mainAccountLegalEntity.ExchangeAdjustmentRateType
                    where bankCurrencyRevalTmp.LegalEntity == CompanyInfo::current()
                        && bankCurrencyRevalTmp.ExchangeRateType == 0
                    join ExchangeAdjustmentRateType from mainAccountLegalEntity
                        where mainAccountLegalEntity.MainAccount == bankCurrencyRevalTmp.MainAccount
                            && mainAccountLegalEntity.LegalEntity == CompanyInfo::current()
                            && mainAccountLegalEntity.ExchangeAdjustmentRateType != 0;

            this.updateExchangeRateTypeForMainAccount();
            this.updateExchangeRateTypeBasedOnLedgerSetting();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReportingExchangeRateTypeEnhancedSettings</Name>
				<Source><![CDATA[
    private void updateReportingExchangeRateTypeEnhancedSettings()
    {
        BankParameters bankParameters = BankParameters::find();
        switch (bankParameters.ExchAdjRateSource)
        {
            case BankRevalExchRateSource::Bank:
                BankAccountTable bankAccountTable;
                update_recordset bankCurrencyRevalTmp
                    setting ReportingCurrencyExchangeRateType = bankAccountTable.ReportingCurrencyExchangeRateType
                        where bankCurrencyRevalTmp.LegalEntity == CompanyInfo::current()
                        join ReportingCurrencyExchangeRateType from bankAccountTable
                            where bankAccountTable.AccountID == bankCurrencyRevalTmp.BankAccountId
                                && bankAccountTable.ReportingCurrencyExchangeRateType != 0;
                break;

            case BankRevalExchRateSource::Specific:
                update_recordset bankCurrencyRevalTmp
                    setting ReportingCurrencyExchangeRateType = bankParameters.ReportingCurrencyExchangeRateType
                        where bankCurrencyRevalTmp.LegalEntity == CompanyInfo::current();
                break;

            default:
                break;
        }

        if (bankParameters.ExchAdjRateSource != BankRevalExchRateSource::Specific)
        {
            MainAccountLegalEntity mainAccountLegalEntity;
            update_recordset bankCurrencyRevalTmp
                setting ReportingCurrencyExchangeRateType = mainAccountLegalEntity.ReportingExchangeAdjustmentRateType
                    where bankCurrencyRevalTmp.LegalEntity == CompanyInfo::current()
                        && bankCurrencyRevalTmp.ReportingCurrencyExchangeRateType == 0
                    join ReportingExchangeAdjustmentRateType from mainAccountLegalEntity
                        where mainAccountLegalEntity.MainAccount == bankCurrencyRevalTmp.MainAccount
                            && mainAccountLegalEntity.LegalEntity == CompanyInfo::current()
                            && mainAccountLegalEntity.ReportingExchangeAdjustmentRateType != 0;

            this.updateReportingExchangeRateTypeForMainAccount();
            this.updateReportingExchangeRateTypeBasedOnLedgerSetting();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExchangeRateTypeForMainAccountCompanyOverrides</Name>
				<Source><![CDATA[
    private void updateExchangeRateTypeForMainAccountCompanyOverrides()
    {
        MainAccountLegalEntity mainAccountLegalEntity;

        update_recordset bankCurrencyRevalTmp
            setting ExchangeRateType = mainAccountLegalEntity.ExchangeAdjustmentRateType
                where bankCurrencyRevalTmp.LegalEntity == CompanyInfo::current()
                join ExchangeAdjustmentRateType from mainAccountLegalEntity
                    where mainAccountLegalEntity.MainAccount == bankCurrencyRevalTmp.MainAccount
                        && mainAccountLegalEntity.LegalEntity == CompanyInfo::current()
                        && mainAccountLegalEntity.ExchangeAdjustmentRateType != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReportingExchangeRateTypeForMainAccountCompanyOverrides</Name>
				<Source><![CDATA[
    private void updateReportingExchangeRateTypeForMainAccountCompanyOverrides()
    {
        MainAccountLegalEntity mainAccountLegalEntity;

        update_recordset bankCurrencyRevalTmp
            setting ReportingCurrencyExchangeRateType = mainAccountLegalEntity.ReportingExchangeAdjustmentRateType
                where bankCurrencyRevalTmp.LegalEntity == CompanyInfo::current()
                join ReportingExchangeAdjustmentRateType from mainAccountLegalEntity
                    where mainAccountLegalEntity.MainAccount == bankCurrencyRevalTmp.MainAccount
                        && mainAccountLegalEntity.LegalEntity == CompanyInfo::current()
                        && mainAccountLegalEntity.ReportingExchangeAdjustmentRateType != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExchangeRateTypeForMainAccount</Name>
				<Source><![CDATA[
    private void updateExchangeRateTypeForMainAccount()
    {
        MainAccount mainAccount;

        update_recordset bankCurrencyRevalTmp
            setting ExchangeRateType = mainAccount.ExchangeAdjustmentRateType
                where bankCurrencyRevalTmp.LegalEntity == CompanyInfo::current()
                    && bankCurrencyRevalTmp.ExchangeRateType == 0
                join ExchangeAdjustmentRateType from mainAccount
                    where mainAccount.RecId == bankCurrencyRevalTmp.MainAccount
                        && mainAccount.ExchangeAdjustmentRateType != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReportingExchangeRateTypeForMainAccount</Name>
				<Source><![CDATA[
    private void updateReportingExchangeRateTypeForMainAccount()
    {
        MainAccount mainAccount;

        update_recordset bankCurrencyRevalTmp
            setting ReportingCurrencyExchangeRateType = mainAccount.ReportingExchangeAdjustmentRateType
                where bankCurrencyRevalTmp.LegalEntity == CompanyInfo::current()
                    && bankCurrencyRevalTmp.ReportingCurrencyExchangeRateType == 0
                join ReportingExchangeAdjustmentRateType from mainAccount
                    where mainAccount.RecId == bankCurrencyRevalTmp.MainAccount
                        && mainAccount.ReportingExchangeAdjustmentRateType != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExchangeRateTypeBasedOnLedgerSetting</Name>
				<Source><![CDATA[
    private void updateExchangeRateTypeBasedOnLedgerSetting()
    {
        Ledger ledger = Ledger::find(Ledger::current());

        // Update records that haven't been defaulted yet to use the default exchange rate type from the ledger
        update_recordset bankCurrencyRevalTmp
            setting ExchangeRateType = ledger.DefaultExchangeRateType
                where bankCurrencyRevalTmp.ExchangeRateType == 0
                    && bankCurrencyRevalTmp.LegalEntity == CompanyInfo::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReportingExchangeRateTypeBasedOnLedgerSetting</Name>
				<Source><![CDATA[
    private void updateReportingExchangeRateTypeBasedOnLedgerSetting()
    {
        Ledger ledger = Ledger::find(Ledger::current());

        ExchangeRateTypeRecId ledgerDefaultReportingExchangeRateType = ledger.ReportingCurrencyExchangeRateType;

        if (ledgerDefaultReportingExchangeRateType != 0)
        {
            // Update records that haven't been defaulted yet to use the default ReportingExchangeRateType from the ledger
            update_recordset bankCurrencyRevalTmp
                setting ReportingCurrencyExchangeRateType = ledgerDefaultReportingExchangeRateType
                    where bankCurrencyRevalTmp.ReportingCurrencyExchangeRateType == 0
                        && bankCurrencyRevalTmp.LegalEntity == CompanyInfo::current();
        }
        else
        {
            // Update records that haven't been defaulted yet to use the default ExchangeRateType from the ledger.
            update_recordset bankCurrencyRevalTmp
                setting ReportingCurrencyExchangeRateType = ledger.DefaultExchangeRateType
                    where bankCurrencyRevalTmp.ReportingCurrencyExchangeRateType == 0
                        && bankCurrencyRevalTmp.LegalEntity == CompanyInfo::current();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankCurrencyRevalTmpCrossRateValues</Name>
				<Source><![CDATA[
    private void updateBankCurrencyRevalTmpCrossRateValues()
    {
        this.updateBankCurrencyRevalTmpAccountingCurrencyCrossRateValues();
        this.updateBankCurrencyRevalTmpReportingCurrencyCrossRateValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankCurrencyRevalTmpAccountingCurrencyCrossRateValues</Name>
				<Source><![CDATA[
    private void updateBankCurrencyRevalTmpAccountingCurrencyCrossRateValues()
    {
        CurrencyCode accountingCurrencyCode = Ledger::accountingCurrency(CompanyInfo::current());

        ExchangeRateEffectiveView exchangeRates;

        update_recordset bankCurrencyRevalTmp
            setting AccountingCurrencyCrossRate = exchangeRates.CrossRate
                where bankCurrencyRevalTmp.LegalEntity == CompanyInfo::current()
            join CrossRate from exchangeRates
                where exchangeRates.ExchangeRateType == bankCurrencyRevalTmp.ExchangeRateType
                    && exchangeRates.FromCurrencyCode == bankCurrencyRevalTmp.BankCurrencyCode
                    && exchangeRates.ToCurrencyCode == accountingCurrencyCode
                    && exchangeRates.ValidFrom <= bankCurrencyRevalTmp.ExchangeRateDate
                    && exchangeRates.ValidTo >= bankCurrencyRevalTmp.ExchangeRateDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankCurrencyRevalTmpReportingCurrencyCrossRateValues</Name>
				<Source><![CDATA[
    private void updateBankCurrencyRevalTmpReportingCurrencyCrossRateValues()
    {
        if (this.hasReportingCurrencyCode())
        {
            ExchangeRateEffectiveView exchangeRates;

            update_recordset bankCurrencyRevalTmp
                setting ReportingCurrencyCrossRate = exchangeRates.CrossRate
                    where bankCurrencyRevalTmp.LegalEntity == CompanyInfo::current()
                join CrossRate from exchangeRates
                    where exchangeRates.ExchangeRateType == bankCurrencyRevalTmp.ReportingCurrencyExchangeRateType
                        && exchangeRates.FromCurrencyCode == bankCurrencyRevalTmp.BankCurrencyCode
                        && exchangeRates.ToCurrencyCode == Ledger::reportingCurrency(CompanyInfo::current())
                        && exchangeRates.ValidFrom <= bankCurrencyRevalTmp.ExchangeRateDate
                        && exchangeRates.ValidTo >= bankCurrencyRevalTmp.ExchangeRateDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasReportingCurrencyCode</Name>
				<Source><![CDATA[
    private boolean hasReportingCurrencyCode()
    {
        return Ledger::reportingCurrency(CompanyInfo::current()) != '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>