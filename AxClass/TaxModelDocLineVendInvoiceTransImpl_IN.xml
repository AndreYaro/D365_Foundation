<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLineVendInvoiceTransImpl_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The tax model class for <c>VendInvoiceTrans</c>.
/// </summary>
[TaxModelDocumentLineAttribute(tableStr(VendInvoiceTrans))]
public class TaxModelDocLineVendInvoiceTransImpl_IN extends TaxModelDocLineWithholdImpl_IN
{
    VendInvoiceJour                 vendInvoiceJour;
    VendInvoiceTrans                vendInvoiceTrans;
    VendInvoiceInfoLine             vendInvoiceInfoLine;

    TaxModelDocLineWithholdImpl_IN  referenceModel;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustomsDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Customs Direction
    /// </summary>
    /// <returns>
    /// The <c>Direction_IN</c>
    /// </returns>
    public Direction_IN getCustomsDirection()
    {
        if (referenceModel)
        {
            return referenceModel.getCustomsDirection();
        }
        else
        {
            return Direction_IN::Export;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentLineOriginalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the document line original table.
    /// </summary>
    /// <returns>
    /// The document line original table.
    /// </returns>
    public Common getDocumentLineOriginalTable()
    {
        return referenceModel.getDocumentLineOriginalTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseDirectSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets direct settlement of this document line.
    /// </summary>
    /// <returns>
    /// The <c>DirectSettlement_IN</c>
    /// </returns>
    public DirectSettlement_IN getExciseDirectSettlement()
    {
        return referenceModel.getExciseDirectSettlement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalTaxModelTaxable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the original <c>TaxModelTaxable_IN</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>TaxModelTaxable_IN</c>
    /// </returns>
    public TaxModelTaxable getOriginalTaxModelTaxable()
    {
        return referenceModel.getOriginalTaxModelTaxable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the quantity from the transaction line.
    /// </summary>
    /// <returns>
    ///    The quantity.
    /// </returns>
    /// <remarks>
    ///    If the transaction does not support quantities, 0 may be passed as the quantity. This will be used
    ///    to calculate taxes by unit.
    /// </remarks>
    public Qty getQuantity()
    {
        return vendInvoiceTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReferenceTaxModelDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reference TaxModel doc line.
    /// </summary>
    /// <returns>
    /// The refernece taxModel doc line.
    /// </returns>
    public TaxModelTaxable getReferenceTaxModelDocLine()
    {
        return referenceModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getServiceCodeRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of <c>ServiceCodeTable_IN</c> of the transaction line.
    /// </summary>
    /// <returns>
    /// The service code.
    /// </returns>
    public RecId getServiceCodeRefRecId()
    {
        return referenceModel.getServiceCodeRefRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax direction.
    /// </summary>
    /// <returns>
    /// The tax direction
    /// </returns>
    public TaxDirection getTaxDirection()
    {
        return TaxDirection::IncomingTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRateBasingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax rate basing date for the given tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The given tax type.
    /// </param>
    /// <returns>
    /// The tax rate date.
    /// </returns>
    public TransDate getTaxRateBasingDate(TaxType_IN _taxType)
    {
        return vendInvoiceJour.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>VendTable</c> based on the vendor account on the transaction line.
    /// </summary>
    /// <returns>
    /// The <c>VendTable</c>
    /// </returns>
    public VendTable getVendTable()
    {
        return vendInvoiceJour.vendTable_InvoiceAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the domain object.
    /// The method should only be called by the <c>TaxModelDocLineFactoryable_IN</c> classes.
    /// </summary>
    /// <param name="_documentLineMap">
    /// The document line buffer.
    /// </param>
    public void init(SalesPurchJournalLine _documentLineMap)
    {
        vendInvoiceTrans = _documentLineMap;
        vendInvoiceJour = vendInvoiceTrans.vendInvoiceJour();

        super(_documentLineMap);

        vendInvoiceInfoLine = VendInvoiceInfoLine::findSourceDocumentLine(vendInvoiceTrans.SourceDocumentLine);

        referenceModel = TaxModelDocLineFactory::newTaxModelDocLine(vendInvoiceInfoLine) as TaxModelDocLineWithholdImpl_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExciseCENVATCreditAvailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the document line is CENVAT CreditA vailed or not.
    /// </summary>
    /// <returns>
    /// True if the document line is CENVAT Credit Availed;otherwise, false.
    /// </returns>
    public NoYes isExciseCENVATCreditAvailed()
    {
        return referenceModel.isExciseCENVATCreditAvailed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExciseConsignment</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the document line is consignment or not.
    /// </summary>
    /// <returns>
    /// True if the document line is consignment;otherwise, false.
    /// </returns>
    public NoYesId isExciseConsignment()
    {
        return referenceModel.isExciseConsignment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isServiceTaxGTARealizedAtInvSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the tax of the GTA vendor is realizable at Invoice settlement time or not.
    /// </summary>
    /// <returns>
    /// True, if it is realizeable; Otherwise, false.
    /// </returns>
    public boolean isServiceTaxGTARealizedAtInvSettlement()
    {
        return referenceModel.isServiceTaxGTARealizedAtInvSettlement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPostAmountRegister</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if excise amount register should be posted or not.
    /// </summary>
    /// <returns>
    /// True if the document line should post excise amount register; otherwise, false.
    /// </returns>
    public NoYes shouldPostAmountRegister()
    {
        return referenceModel.shouldPostAmountRegister();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPostQuantityRegister</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if excise quantity register should be posted or not.
    /// </summary>
    /// <returns>
    /// True if the document line should post excise quantity register; otherwise, false.
    /// </returns>
    public NoYes shouldPostQuantityRegister()
    {
        TaxParameters   taxParameters;
        TaxOnItem       taxOnItem;
        boolean ret;

        if (this.getExciseTaxAccountType(taxOnItem) != TaxAccountType_IN::ExciseExpenseAccount)
        {
            taxParameters = TaxParameters::find();

            switch (taxParameters.VendorCalculationDateType_IN)
            {
                case VendorCalculationDateType_IN::DeliveryDate :
                case VendorCalculationDateType_IN::DocumentDate :
                    if (vendInvoiceInfoLine.isNonPO())
                    {
                        ret = true;
                    }
                    else
                    {
                        if (vendInvoiceTrans.QtyPhysical != 0)
                        {
                            ret = true;
                        }
                        else
                        {
                            ret = false;
                        }
                    }
                    break;
                case VendorCalculationDateType_IN::InvoiceDate :
                    ret = true;
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax module type.
    /// </summary>
    /// <returns>
    /// The transaction tax module type with purch invoice.
    /// </returns>
    public TaxModuleType getTaxModuleType()
    {
        return TaxModuleType::PurchInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canModifyTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction tax information can be modified or not.
    /// </summary>
    /// <returns>
    /// True if the tax information of document line can be modified; otherwise, false.
    /// </returns>
    public NoYes canModifyTaxInformation()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssessableValueAccountingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the assessable value in accounting currency for the document line.
    /// </summary>
    /// <returns>
    /// The assessable value in accounting currency
    /// </returns>
    public AmountMST getAssessableValueAccountingCurrency()
    {
        return VendInvoiceTrans.getAssessableValueAccountingCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDiscAmount</Name>
				<Source><![CDATA[
    public Amount getDiscAmount()
    {
        return referenceModel.getDiscAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction invoice date
    /// </summary>
    /// <returns>
    /// The transaction invoice date
    /// </returns>
    public InvoiceDate getDocumentInvoiceDate()
    {
        return vendInvoiceJour.DocumentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction document date
    /// </summary>
    /// <returns>
    /// The transaction document date
    /// </returns>
    public DocumentDate getDocumentDate()
    {
        return vendInvoiceJour.DocumentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAssessableValueAccountingCurrencyAvailable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Whether user can set assessable value on UI for this transaction line.
    /// </summary>
    /// <returns>
    /// True if can, otherwise false;
    /// </returns>
    [Hookable(false)]
    internal boolean isAssessableValueAccountingCurrencyAvailable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>