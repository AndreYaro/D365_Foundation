<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjectAppSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(Project))]
public final class ProjectAppSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default group's ID or the group ID for the sole project group corresponding to the type provided,
    /// or null if there are none or multiple matching groups and no explicit default has been defined.
    /// </summary>
    /// <param name = "_type">The project type.</param>
    /// <returns>The group ID for the default group or the group's ID for the sole project group corresponding to the type provided, or null if there are none or multiple matching groups and no explicit default has been defined.</returns>
    public static ProjGroupId getDefaultGroupId(ProjType _type)
    {
        ProjGroup projGroup;
        ProjGroupId ret = null;

        ret = ProjGroupDefault::findDefaultGroupId(_type);

        if (!ret)
        {
            select count(RecId) from projGroup where projGroup.projType == _type;

            if (projGroup.RecId == 1)
            {
                select firstonly ProjGroupId from projGroup where projGroup.projType == _type;
                ret = projGroup.ProjGroupId;
            }            
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeEntitiesFromOpenOfficeMenu</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes entities from Open in Excel group on the Office menu.
    /// </summary>
    /// <param name = "_menuOptions">
    /// Reference to the office menu.
    /// </param>
    /// <param name = "_entitiesToExclude">
    /// Set of entity name strings to remove from the office menu.
    /// </param>
    public static void removeEntitiesFromOpenOfficeMenu(OfficeMenuOptions _menuOptions, Set _entitiesToExclude)
    {
        // Clear the menu options which are driven by the root datasource of an entity, as some
        // of the options are valid for only certain journal types.
        if (!_entitiesToExclude.empty())
        {
            ListIterator dataEntityIterator = new ListIterator(_menuOptions.dataEntityOptions());
            List dataEntityOptionList = new List(Types::Class);

            while (dataEntityIterator.more())
            {
                if (!_entitiesToExclude.in(dataEntityIterator.value().dataEntityName()))
                {
                    dataEntityOptionList.addEnd(dataEntityIterator.value());
                }

                dataEntityIterator.delete();
            }

            if (!dataEntityOptionList.empty())
            {
                ListIterator dataEntityOptionIterator = new ListIterator(dataEntityOptionList);

                while (dataEntityOptionIterator.more())
                {
                    _menuOptions.dataEntityOptions().addEnd(dataEntityOptionIterator.value());
                    dataEntityOptionIterator.delete();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefFundingSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Launches a <c>ProjFundingSourceDetail</c> menu item object.
    /// </summary>
    /// <param name="_fundingSourceId">
    ///    The ID of the funding source.
    /// </param>
    /// <param name="_element">
    ///    The form instance.
    /// </param>
    public static void jumpRefFundingSource(ProjFundingSourceRefId _fundingSourceId, FormRun _element)
    {
        MenuFunction menuFunction = new MenuFunction(menuitemDisplayStr(ProjFundingSourceDetail), MenuItemType::Display);

        Args args = new Args();
        args.lookupRecord(ProjFundingSource::find(_fundingSourceId));
        args.caller(_element);

        menuFunction.copyCallerQuery(CopyCallerQuery::No);
        menuFunction.openMode(ViewEditMode::View);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isContractExternallyManaged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the project contract is managed in an external system.
    /// </summary>
    /// <param name = "_projInvoiceProjId">Contract id</param>
    /// <returns>
    /// true if the project contract is managed externally; otherwise, false.
    /// </returns>
    public static boolean isContractExternallyManaged(ProjInvoiceProjId _projInvoiceProjId)
    {
        boolean retValue = false;
        if (_projInvoiceProjId)
        {
            retValue = ProjInvoiceTable::find(_projInvoiceProjId).ProjDataSource != 0;
        }
        
        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>MarkEntitiesWithChangeTracking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Turn Change Tracking on for several Data Entities
    /// </summary>
    public static void MarkEntitiesWithChangeTracking()
    {
        Project::enableChangeTrackingOnEntity('ProjCDSActualsImportEntity');
        Project::enableChangeTrackingOnEntity('ProjCDSCategoryEntity');
        Project::enableChangeTrackingOnEntity('ProjCDSTransactionRelationshipImportEntity');
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableChangeTrackingOnEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Turns change tracking on for an Entity
    /// </summary>
    /// <param name = "_entityName">The name of the entity to turn change tracking on</param>
    private static void enableChangeTrackingOnEntity(str _entityName)
    {
        DMFEntity entity;

        // Code access security to ensure API is only called on the server
        new AifChangeTrackingPermission().demand();

        select forupdate firstonly entity
                where entity.TargetEntity == _entityName;

        // If the entity wasn't found, can't do anything
        if (entity)
        {
            // check if the entity has default query
            DictDataEntity dictEntity = new DictDataEntity(tableName2Id(entity.TargetEntity));
            Query query = DMFEntityBase::defaultCTQuery(dictEntity);

            if (DMFEntityBase::enableChangeTrackingV2(_entityName, true, true))
            {
                ttsbegin;
                entity.DMFChangeTrackingType = query == null ? DMFChangeTrackingType::ALL : DMFChangeTrackingType::CustomQuery;
                entity.doUpdate();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectExternallyManaged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the project is managed in an external system.
    /// </summary>
    /// <param name = "_projId">Project id</param>
    /// <returns>
    /// true if the project is managed externally; otherwise, false.
    /// </returns>
    public static boolean isProjectExternallyManaged(ProjId _projId)
    {
        boolean retValue = false;
        if (_projId)
        {
            retValue = ProjTable::find(_projId).ProjDataSource != 0;
        }
        return retValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>