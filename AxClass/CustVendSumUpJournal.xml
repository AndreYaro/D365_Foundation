<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendSumUpJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustVendSumUpJournal
{
    NumberSeq numberSeq;
    TransactionTxt transactionTxt;
    SpecTransManager specTransManager;

    ModuleCustVend module;
    CustVendTrans custVendTrans;
    CustVendTransOpen custVendTransOpen;
    LedgerJournalTrans ledgerJournalTrans;

    Voucher voucher;
    LedgerJournalId ledgerJournalId;
    TransDate paymDate;
    TransDate documentDate;

    Amount summedUpAmount;
    PaymMode paymMode;
    NoYes splitPerPaymId;

    Amount summedUpInterest;
    Amount summedUpFine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createOffsetTrans</Name>
				<Source><![CDATA[
    void createOffsetTrans(PaymMode _paymMode = '')
    {
        LedgerJournalTable ledgerJournalTable = ledgerJournalTrans.ledgerJournalTable();
        LedgerDimensionDefaultAccount defaultAccount;
        MainAccountLegalEntity mainAccountLegalEntity;

        switch (ledgerJournalTable.JournalType)
        {
            case LedgerJournalType::CustPaymRemittance:
                ledgerJournalTrans.parmOffsetAccount(ledgerJournalTrans.parmAccount(), LedgerJournalACType::Cust);
                break;

            case LedgerJournalType::CustBillOfExchangeSettle:
                if (ledgerJournalTrans.BankRemittanceType == BankRemittanceType::Discount)
                {
                    defaultAccount = CustLedgerAccounts::liabilitiesLedgerDimension(ledgerJournalTrans.parmAccount(), CustParameters::find().PostingProfileBillsRemitDiscount);
                    mainAccountLegalEntity = MainAccountLegalEntity::findByMainAccountLegalEntity(LedgerDimensionFacade::getMainAccountFromLedgerDimension(defaultAccount).RecId, CompanyInfo::current());

                    ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Ledger;
                    ledgerJournalTrans.parmOffsetLedgerDimension(LedgerDimensionFacade::serviceCreateLedgerDimension(defaultAccount, ledgerJournalTable.DefaultDimension, mainAccountLegalEntity.DefaultDimension));
                }
                else if (ledgerJournalTrans.BankRemittanceType == BankRemittanceType::Collection
                    || ledgerJournalTrans.BankRemittanceType == BankRemittanceType::None)
                {
                    ledgerJournalTrans.parmOffsetAccount(ledgerJournalTrans.BankAccountId ? ledgerJournalTrans.BankAccountId : ledgerJournalTable.BankAccountId, LedgerJournalACType::Bank);
                }
                break;

            case LedgerJournalType::CustBillOfExchangeProtest:
                if (ledgerJournalTable.ProtestSettledBill == NoYes::Yes)
                {
                    ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Bank;
                }
                else
                {
                    ledgerJournalTrans.parmOffsetAccount(ledgerJournalTrans.parmAccount(), LedgerJournalACType::Cust);
                }
                break;

            case LedgerJournalType::CustBillOfExchangeDraw,
                 LedgerJournalType::CustBillOfExchangeRedraw:
                if (summedUpAmount > 0)
                {
                    summedUpAmount = 0;
                }
                ledgerJournalTrans.parmOffsetAccount(ledgerJournalTrans.parmAccount(), ledgerJournalTrans.AccountType);
                break;

            case LedgerJournalType::VendPromissoryNoteDraw,
                 LedgerJournalType::VendPromissoryNoteRedraw:
                if (summedUpAmount < 0)
                {
                    summedUpAmount = 0;
                }
                ledgerJournalTrans.parmOffsetAccount(ledgerJournalTrans.parmAccount(), ledgerJournalTrans.AccountType);

                break;
            case LedgerJournalType::VendPaymRemittance:
                ledgerJournalTrans.parmOffsetAccount(ledgerJournalTrans.parmAccount(), LedgerJournalACType::Vend);
                break;

            case LedgerJournalType::VendPromissoryNoteSettle:
                ledgerJournalTrans.parmOffsetAccount(ledgerJournalTrans.BankAccountId ? ledgerJournalTrans.BankAccountId : ledgerJournalTable.BankAccountId, LedgerJournalACType::Bank);
                break;

            case LedgerJournalType::Payment,
                 LedgerJournalType::CustPayment:
                if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger)
                {
                    defaultAccount = this.offsetAccount(_paymMode);
                    mainAccountLegalEntity = MainAccountLegalEntity::findByMainAccountLegalEntity(LedgerDimensionFacade::getMainAccountFromLedgerDimension(defaultAccount).RecId, CompanyInfo::current());

                    ledgerJournalTrans.parmOffsetLedgerDimension(LedgerDimensionFacade::serviceCreateLedgerDimension(defaultAccount, ledgerJournalTable.DefaultDimension, mainAccountLegalEntity.DefaultDimension));
                    break;
                }
            default:
                ledgerJournalTrans.parmOffsetLedgerDimension(this.offsetAccount(_paymMode));
                if (!ledgerJournalTrans.OffsetDefaultDimension)
                {
                    LedgerJournalEngine ledgerJournalEngine = LedgerJournalEngine::construct(ledgerJournalTable.JournalType);
                    ledgerJournalEngine.initOffsetDefaultDimension(ledgerJournalTrans);
                }
        }

        if (!ledgerJournalTrans.parmOffsetAccount())
        {
            ledgerJournalTrans.parmOffsetAccount(ledgerJournalTable.parmOffsetAccount(), ledgerJournalTable.OffsetAccountType);
        }

        // <GTH>
        if (TaxThaiGovCertificationFeatureChecker::isTaxBranchEnabled())
        {
            this.initOffsetDefaultDimension(ledgerJournalTrans);
        }
        // </GTH>

        if (specTransManager.getSpecTransCount() > 1 && splitPerPaymId == NoYes::No)
        {
            ledgerJournalTrans.PaymId = '';
        }

        ledgerJournalTrans.fillPaymentNotes();
        this.updateAmount();

        summedUpAmount = 0;

        switch (module)
        {
            case ModuleCustVend::Cust:
                if (!CustPaymModeTable::find(ledgerJournalTrans.PaymMode).FurtherPosting)
                {
                    CustVendPaymJournalFee::createJournalFeeCust(ledgerJournalTrans);
                }
                break;

            case ModuleCustVend::Vend:
                if (!VendPaymModeTable::find(ledgerJournalTrans.PaymMode).FurtherPosting)
                {
                    CustVendPaymJournalFee::createJournalFeeVend(ledgerJournalTrans);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSpecTrans</Name>
				<Source><![CDATA[
    void createSpecTrans(AmountCur _paymentAmount)
    {
        TaxWithhold taxWithhold;
        #ISOCountryRegionCodes

        summedUpAmount += _paymentAmount;

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            summedUpInterest += custVendTransOpen.InterestAmount_BR;
            summedUpFine += custVendTransOpen.FineAmount_BR;
        }
        // </GBR>

        specTransManager.insert(custVendTransOpen.DataAreaId, custVendTransOpen.TableId, custVendTransOpen.RecId, -_paymentAmount, ledgerJournalTrans.CurrencyCode);

        if (ledgerJournalTrans.TaxWithholdGroup)
        {
            if (TaxWithholdingGlobalFeature::isExtendedWHTSupportedInCountryRegionOrParamEnabled())
            {
                taxWithhold = TaxWithhold::construct(ledgerJournalTrans);
            }
            else
            {
                taxWithhold = new TaxWithhold(ledgerJournalTrans);
            }
            taxWithhold.createAllTaxWithholdTrans();

            // clear withholding cache.
            TaxWithhold::clearCache();

            summedUpAmount -= _paymentAmount;
            summedUpAmount -= SpecTransManager::getTotalSettleAmountForSpecReference(
                ledgerJournalTrans.company(),
                ledgerJournalTrans.TableId,
                ledgerJournalTrans.RecId,
                ledgerJournalTrans.CurrencyCode,
                ledgerJournalTrans.Company,
                ledgerJournalTrans.TransDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateLedgerJournalTransForCust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializing data for <c>LedgerJournalTrans</c> instance.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> record to set the transaction data.
    /// </param>
    /// <param name="_custVendTrans">
    /// The <c>CustVendTrans</c> record.
    /// </param>
    /// <param name="_custVendPaymModeTable">
    /// The <c>CustVendPaymModeTable</c> record.
    /// </param>
    /// <param name="_custVendTransOpen">
    /// The <c>CustVendTransOpen</c> record.
    /// </param>
    /// <returns>
    /// The populated <c>LedgerJournalTrans</c> record.
    /// </returns>
    protected LedgerJournalTrans populateLedgerJournalTransForCust(
        LedgerJournalTrans _ledgerJournalTrans,
        CustVendTrans _custVendTrans,
        CustVendPaymModeTable _custVendPaymModeTable,
        CustVendTransOpen _custVendTransOpen)
    {
        _ledgerJournalTrans.TransactionType = LedgerTransType::Cust;
        _ledgerJournalTrans.AccountType = LedgerJournalACType::Cust;
        _ledgerJournalTrans.OffsetAccountType = _custVendPaymModeTable.paymACType();
        _ledgerJournalTrans.BankTransType = _custVendPaymModeTable.BankTransType;
        _ledgerJournalTrans.Due = _custVendTransOpen.DueDate;
        _ledgerJournalTrans.PaymId = _custVendTrans.PaymId;

        return _ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateLedgerJournalTransForVend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializing data for <c>LedgerJournalTrans</c> instance.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> record to set the transaction data.
    /// </param>
    /// <param name="_custVendTrans">
    /// The <c>CustVendTrans</c> record.
    /// </param>
    /// <param name="_custVendPaymModeTable">
    /// The <c>CustVendPaymModeTable</c> record.
    /// </param>
    /// <param name="_custVendTable">
    /// The <c>CustVendTable</c> record.
    /// </param>
    /// <returns>
    /// The populated <c>LedgerJournalTrans</c> record.
    /// </returns>
    protected LedgerJournalTrans populateLedgerJournalTransForVend(
        LedgerJournalTrans _ledgerJournalTrans,
        CustVendTrans _custVendTrans,
        CustVendPaymModeTable _custVendPaymModeTable,
        CustVendTable _custVendTable)
    {
        _ledgerJournalTrans.TransactionType = LedgerTransType::Vend;
        _ledgerJournalTrans.AccountType = LedgerJournalACType::Vend;
        _ledgerJournalTrans.OffsetAccountType = _custVendPaymModeTable.paymACType();
        _ledgerJournalTrans.BankTransType = _custVendPaymModeTable.BankTransType;
        _ledgerJournalTrans.PaymId = _custVendTrans.PaymId ? _custVendTrans.PaymId : _custVendTable.PaymId;
        _ledgerJournalTrans.TaxWithholdGroup = VendTable::find(_custVendTable.AccountNum).TaxWithholdGroup;

        return _ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTransactionTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of <c>TransactionTxt</c>.
    /// </summary>
    /// <param name = "_custVendTable">
    /// A <c>CustVendTable</c> table buffer used to create transaction text.
    /// </param>
    /// <returns>
    /// An instance of <c>TransactionTxt</c> class.
    ///</returns>
    protected TransactionTxt initializeTransactionTxt(CustVendTable _custVendTable)
    {
        LedgerTransTxt transTxtType = this.getPaymentTransactionTxt(_custVendTable);
        transactionTxt = this.transactionTxt(DirPartyTable::findRec(_custVendTable.Party).LanguageId);
        transactionTxt.setType(transTxtType);
        transactionTxt.setVoucher(voucher);
        transactionTxt.setFormLetter(custVendTrans.DocumentNum ? custVendTrans.DocumentNum : custVendTrans.Invoice);
        transactionTxt.setKey1(_custVendTable.AccountNum);

        if (BrazilParameters::isEnabled())
        {
            transactionTxt.setCustVendName(_custVendTable.name());
        }

        if (TransactionTextContext::isTypeSupported(transTxtType))
        {
            TransactionTextContext transactionTextContext = TransactionTextContext::newForTransactionType(transTxtType);
            transactiontextcontext.settablebuffer(custVendTrans);
            transactionTxt.setTransactionTextContext(transactionTextContext);
        }

        return transactionTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentTransactionTxt</Name>
				<Source><![CDATA[
    private LedgerTransTxt getPaymentTransactionTxt(CustVendTable _custvendTable)
    {
        LedgerTransTxt ret;

        if (_custVendTable.Tableid == tableNum(CustTable))
        {
            ret = LedgerTransTxt::CustPaymentCust;
        }
        else
        {
            ret = LedgerTransTxt::VendPaymentVend;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>LedgerJournalTrans</c> table buffer.
    /// </summary>
    /// <param name = "_ledgerJournalTransTaxExtension">
    /// <c>LedgerJournalTransTaxExtensionIN</c> table buffer.
    /// </param>
    protected void populateLedgerJournalTrans(LedgerJournalTransTaxExtensionIN _ledgerJournalTransTaxExtension)
    {
        CustVendTable custVendTable = this.custVendTable(custVendTrans.AccountNum);
        LedgerJournalTable ledgerJournalTable = LedgerJournalTable::find(ledgerJournalId);
        #ISOCountryRegionCodes
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);

        paymMode = custVendTrans.PaymMode ? custVendTrans.PaymMode : custVendTable.PaymMode;
        ledgerJournalTrans.CustVendBankAccountId =
            custVendTrans.ThirdPartyBankAccountId ?
            custVendTrans.ThirdPartyBankAccountId :
            custVendTable.BankAccountId;
        ledgerJournalTrans.PaymSpec = custVendTrans.PaymSpec;
        ledgerJournalTrans.PaymentStatus = CustVendPaymStatus::None;
        ledgerJournalTrans.DefaultDimension = custVendTable.DefaultDimension ? custVendTable.DefaultDimension : ledgerJournalTable.DefaultDimension;
        if ((module == ModuleCustVend::Vend && !SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
            || (module == ModuleCustVend::Cust && !SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO])))
        {
            ledgerJournalTrans.BankCentralBankPurposeCode = custVendTable.BankCentralBankPurposeCode;
            ledgerJournalTrans.BankCentralBankPurposeText = custVendTable.BankCentralBankPurposeText;
        }
        else
        {
            ledgerJournalTrans.BankCentralBankPurposeCode = custVendTrans.BankCentralBankPurposeCode;
            ledgerJournalTrans.BankCentralBankPurposeText = custVendTrans.BankCentralBankPurposeText;
        }

        if (ledgerJournalTable.DefaultDimension)
        {
            ledgerJournalTrans.OffsetDefaultDimension = ledgerJournalTable.DefaultDimension;
        }
        else if (custVendTable.DefaultDimension)
        {
            ledgerJournalTrans.OffsetDefaultDimension = custVendTable.DefaultDimension;
        }

        CustVendPaymModeTable custVendPaymModeTable = CustVendPaymModeTable::findModule(module, paymMode);

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            _ledgerJournalTransTaxExtension = ledgerJournalTrans.ledgerJournalTransTaxExtensionIN();
        }
        // </GIN>

        switch (module)
        {
            case ModuleCustVend::Cust:
                ledgerJournalTrans = this.populateLedgerJournalTransForCust(ledgerJournalTrans, custVendTrans, custVendPaymModeTable, custVendTransOpen);

                // <GIN>
                if (TaxWithholdParameters_IN::checkTaxParameters())
                {
                    CustInvoiceJour custInvoiceJourLoc;

                    select firstonly InvoiceId, InvoiceAccount, InvoiceDate, LedgerVoucher, SalesId, numberSequenceGroup, RecId
                        from custInvoiceJourLoc
                        where custInvoiceJourLoc.InvoiceId == custVendTrans.Invoice
                            && custInvoiceJourLoc.InvoiceAccount == custVendTrans.AccountNum
                            && custInvoiceJourLoc.InvoiceDate == custVendTrans.TransDate
                            && custInvoiceJourLoc.LedgerVoucher == custVendTrans.Voucher;
                    if (custInvoiceJourLoc.RecId)
                    {
                        CustInvoiceTrans custInvoiceTransLoc;

                        select firstonly SalesId, InvoiceId, InvoiceDate, numberSequenceGroup, RecId
                            from custInvoiceTransLoc
                            where custInvoiceTransLoc.SalesId == custInvoiceJourLoc.SalesId
                                && custInvoiceTransLoc.InvoiceId == custInvoiceJourLoc.InvoiceId
                                && custInvoiceTransLoc.InvoiceDate == custInvoiceJourLoc.InvoiceDate
                                && custInvoiceTransLoc.numberSequenceGroup == custInvoiceJourLoc.numberSequenceGroup;
                        if (custInvoiceTransLoc.RecId)
                        {
                            _ledgerJournalTransTaxExtension.TCSGroup = CustInvoiceTransLoc.custInvoiceTrans_IN().TCSGroup_IN;
                            _ledgerJournalTransTaxExtension.TDSGroup = CustInvoiceTransLoc.custInvoiceTrans_IN().TDSGroup_IN;
                        }
                    }
                }
                // </GIN>

                if (TaxWithholdingGlobalFeature::isExtendedWHTSupportedInCountryRegionOrParamEnabled())
                {
                    // <GTH>
                    if (TaxThaiGovCertificationFeatureChecker::isTaxWithholdEnabled())
                    {
                        ledgerJournalTrans.TaxWithholdGroup = custVendTable.getTaxWithholdGroup();
                    }
                    else
                    {
                        // </GTH>
                        ledgerJournalTrans.TaxWithholdGroup = custVendTable.TaxWithholdGroup;
                        // <GTH>
                    }
                    // </GTH>
                    ledgerJournalTrans.TaxWithholdCalculate_TH = custVendTable.TaxWithholdCalculate;
                }
                break;

            case ModuleCustVend::Vend :
                ledgerJournalTrans = this.populateLedgerJournalTransForVend(ledgerJournalTrans, custVendTrans, custVendPaymModeTable, custVendTable);

                // <GIN>
                if (TaxWithholdParameters_IN::checkTaxParameters())
                {
                    VendInvoiceJour vendInvoiceJourLoc;

                    select firstonly InvoiceId, InvoiceAccount, InvoiceDate, LedgerVoucher, PurchId, numberSequenceGroup, InternalInvoiceId, RecId
                        from vendInvoiceJourLoc
                        where vendInvoiceJourLoc.InvoiceId == custVendTrans.Invoice
                            && vendInvoiceJourLoc.InvoiceAccount == custVendTrans.AccountNum
                            && vendInvoiceJourLoc.InvoiceDate == custVendTrans.TransDate
                            && vendInvoiceJourLoc.LedgerVoucher == custVendTrans.Voucher;
                    if (vendInvoiceJourLoc.RecId)
                    {
                        VendInvoiceTrans vendInvoiceTransLoc;

                        select firstonly PurchId, InvoiceId, InvoiceDate, numberSequenceGroup, InternalInvoiceId, RecId, TCSGroup_IN, TDSGroup_IN
                            from vendInvoiceTransLoc
                            where vendInvoiceTransLoc.PurchId == vendInvoiceJourLoc.PurchId
                                && vendInvoiceTransLoc.InvoiceId == vendInvoiceJourLoc.InvoiceId
                                && vendInvoiceTransLoc.InvoiceDate == vendInvoiceJourLoc.InvoiceDate
                                && vendInvoiceTransLoc.numberSequenceGroup == vendInvoiceJourLoc.numberSequenceGroup
                                && vendInvoiceTransLoc.InternalInvoiceId == vendInvoiceJourLoc.InternalInvoiceId;
                        if (vendInvoiceTransLoc.RecId)
                        {
                            _ledgerJournalTransTaxExtension.TCSGroup = vendInvoiceTransLoc.TCSGroup_IN;
                            _ledgerJournalTransTaxExtension.TDSGroup = vendInvoiceTransLoc.TDSGroup_IN;
                        }
                    }
                }
                // </GIN>

                break;
        }

        transactionTxt = TransactionTxt::construct();
        transactionTxt.setVoucher(voucher);
        transactionTxt.setKey1(
            ledgerJournalTrans.DocumentNum ?
            ledgerJournalTrans.DocumentNum :
            (ledgerJournalTrans.Invoice ? ledgerJournalTrans.Invoice : ''));

        ledgerJournalTrans.initValue();
        ledgerJournalTrans.JournalNum = ledgerJournalId;
        ledgerJournalTrans.Voucher = voucher;
        ledgerJournalTrans.TransDate = paymDate;
        ledgerJournalTrans.parmAccount(custVendTrans.AccountNum);
        ledgerJournalTrans.PostingProfile = custVendTrans.PostingProfile;
        ledgerJournalTrans.PaymMode = custVendTrans.PaymMode;
        ledgerJournalTrans.SettleVoucher = SettlementType::SelectedTransact;
        ledgerJournalTrans.CurrencyCode = custVendTrans.CurrencyCode;
        ledgerJournalTrans.ExchRate = ExchangeRateHelper::exchRate(custVendTrans.CurrencyCode, ledgerJournalTrans.TransDate);
        ledgerJournalTrans.ExchRateSecond = ExchangeRateHelper::exchRateSecond(custVendTrans.CurrencyCode, ledgerJournalTrans.TransDate);
        if (Ledger::reportingCurrency())
        {
            ExchangeRateCalculation exchangeRateCalculation= ExchangeRateCalculation::newExchangeDate(
                Ledger::reportingCurrencyExchangeRateType(),
                ledgerJournalTrans.CurrencyCode,
                Ledger::reportingCurrency(),
                ledgerJournalTrans.TransDate);

            ledgerJournalTrans.ReportingCurrencyExchRate = exchangeRateCalculation.getExchangeRate1();
            ledgerJournalTrans.ReportingCurrencyExchRateSecondary = exchangeRateCalculation.getExchangeRate2();
        }

        transactionTxt = this.initializeTransactionTxt(custVendTable);

        ledgerJournalTrans.Txt = transactionTxt.txt();
        ledgerJournalTrans.Approved = NoYes::Yes;
        ledgerJournalTrans.Approver = HcmWorker::userId2Worker(curUserId());
        ledgerJournalTrans.DocumentDate = documentDate;
        ledgerJournalTrans.Triangulation = Currency::triangulation(ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate);
        ledgerJournalTrans.Due = custVendTransOpen.DueDate;

        switch (ledgerJournalTable.JournalType)
        {
            case LedgerJournalType::CustPaymRemittance:
                ledgerJournalTrans.BankRemittanceType = ledgerJournalTable.BankRemittanceType;
                ledgerJournalTrans.BankAccountId = ledgerJournalTable.BankAccountId;
                break;

            case LedgerJournalType::VendPaymRemittance:
                ledgerJournalTrans.BankAccountId = ledgerJournalTable.BankAccountId;
                if (custVendTrans.NegInstStatus == CustVendNegInstStatus::Invoiced)
                {
                    ledgerJournalTrans.BankRemittanceType = BankRemittanceType::Collection;
                }
                else
                {
                    ledgerJournalTrans.BankRemittanceType = BankRemittanceType::None;
                }
                break;

            case LedgerJournalType::CustBillOfExchangeDraw:
                ledgerJournalTrans.BankAccountId = CustPaymModeTable::find(paymMode).parmPaymAccount();
                break;

            case LedgerJournalType::CustBillOfExchangeAccept:
            case LedgerJournalType::CustBillOfExchangeProtest:
            case LedgerJournalType::CustBillOfExchangeRedraw:
            case LedgerJournalType::CustBillOfExchangeSettle:
                CustBillOfExchangeTrans custBillOfExchangeTrans;
                select firstonly RemittedToBankAccountId, BankRemittanceType from custBillOfExchangeTrans
                    where custBillOfExchangeTrans.BillOfExchangeId == custVendTrans.NegInstId
                        && custBillOfExchangeTrans.SeqNum == custVendTrans.NegInstSeqNum
                        && custBillOfExchangeTrans.Status == custVendTrans.NegInstStatus;

                ledgerJournalTrans.BankAccountId = custBillOfExchangeTrans.RemittedToBankAccountId;
                ledgerJournalTrans.BankRemittanceType = custBillOfExchangeTrans.BankRemittanceType;
                break;

            case LedgerJournalType::VendPromissoryNoteDraw:
                ledgerJournalTrans.BankAccountId = VendPaymModeTable::find(paymMode).parmPaymAccount();
                break;

            case LedgerJournalType::VendPromissoryNoteRedraw:
            case LedgerJournalType::VendPromissoryNoteSettle:
                VendPromissoryNoteTrans vendPromissoryNoteTrans;
                select firstonly RemittedtoBankAccountId from vendPromissoryNoteTrans
                    where vendPromissoryNoteTrans.PromissoryNoteId == custVendTrans.NegInstId
                       && vendPromissoryNoteTrans.SeqNum == custVendTrans.NegInstSeqNum
                       && vendPromissoryNoteTrans.Status == custVendTrans.NegInstStatus;

                ledgerJournalTrans.BankAccountId = vendPromissoryNoteTrans.RemittedtoBankAccountId;
                break;
            default:
        }

        // <GEERU>
        if (countryRegion_RU)
        {
            AgreementHeaderExt_RU agreementHeaderExt = AgreementHeaderExt_RU::findByDefaultDimension(custVendTrans.DefaultDimension);
            if (agreementHeaderExt)
            {
                ledgerJournalTrans.AccountAgreementId_RU = agreementHeaderExt.AgreementId;
                ledgerJournalTrans.initAgreementDimension_RU(agreementHeaderExt);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in <c>LedgerJournalTrans</c> table.
    /// </summary>
    public void createTrans()
    {
        #ISOCountryRegionCodes
        LedgerJournalTransTaxExtensionIN ledgerJournalTransTaxExtension;
        
        ledgerJournalTrans.clear();

        this.populateLedgerJournalTrans(ledgerJournalTransTaxExtension);
        ledgerJournalTrans.insert();

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            ledgerJournalTransTaxExtension.clear();

            ledgerJournalTransTaxExtension.LedgerJournalTrans = ledgerJournalTrans.RecId;

            ledgerJournalTransTaxExtension.insert();
        }
        // </GIN>
        paymMode = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new ledger voucher number.
    /// </summary>
    [Replaceable]
    public void createVoucher()
    {
        LedgerJournalTable ledgerJournalTable = LedgerJournalTable::find(ledgerJournalId);

        if (ledgerJournalTable.ledgerJournalName().NewVoucher == NewVoucher::OneVoucher)
        {
            select firstonly Voucher from ledgerJournalTrans
                where ledgerJournalTrans.JournalNum == ledgerJournalId;

            if (ledgerJournalTrans)
            {
                voucher = ledgerJournalTrans.Voucher;
                ledgerJournalTrans.clear();
                return;
            }
        }
        voucher = new JournalVoucherNum(JournalTableData::newTable(ledgerJournalTable)).getNew(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTable</Name>
				<Source><![CDATA[
    private CustVendTable custVendTable(ExternalAccount _custVendAccount)
    {
        return CustVendTable::findModule(module, _custVendAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOffsetDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate offset default dimension or offset ledger dimension for ledgerjournaltrans.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// Specify which ledgerjournaltrans should be initialized.
    /// </param>
    private void initOffsetDefaultDimension(LedgerJournalTrans _ledgerJournalTrans)
    {
        if (!_ledgerJournalTrans.parmOffsetAccount())
        {
            return;
        }

        if (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger)
        {
            _ledgerJournalTrans.OffsetLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(_ledgerJournalTrans.parmOffsetLedgerDimension(), _ledgerJournalTrans.DefaultDimension);
        }
        else
        {
            _ledgerJournalTrans.OffsetDefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(_ledgerJournalTrans.DefaultDimension, LedgerJournalEngine::getAccountDefaultDimension(ledgerJournalTrans.parmOffsetAccount(), ledgerJournalTrans.getOffsetCompany(), ledgerJournalTrans.OffsetAccountType));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(
        CustVendTransOpen _custVendTransOpen,
        LedgerJournalId _ledgerJournalId,
        TransDate _paymDate,
        TransDate _documentDate,
        NoYes _splitPerPaymId = NoYes::No)
    {
        CustVendTransStatic custVendTransStatic = CustVendTransStatic::newTransOpen(_custVendTransOpen);
        ledgerJournalId = _ledgerJournalId;
        custVendTrans = CustVendTransOpenData::construct(_custVendTransOpen).custVendTrans();
        custVendTransOpen = _custVendTransOpen;
        paymDate = _paymDate;
        documentDate = _documentDate;
        splitPerPaymId = _splitPerPaymId;
        module = custVendTransStatic.moduleCustVend();

        this.createVoucher();
        this.createTrans();

        specTransManager = SpecTransManager::newFromSpec(ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetAccount</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount offsetAccount(PaymMode _paymMode)
    {
        return CustVendPaymModeTable::findModule(module, _paymMode).offsetLedgerDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionTxt</Name>
				<Source><![CDATA[
    private TransactionTxt transactionTxt(LanguageId _languageId)
    {
        TransactionTxt txt;

        switch (module)
        {
            case ModuleCustVend::Cust:
                txt = TransactionTxt::construct(LedgerTransTxt::CustPaymentCust, _languageId);
                break;

            case ModuleCustVend::Vend:
                txt = TransactionTxt::construct(LedgerTransTxt::VendPaymentVend, _languageId);
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAmount</Name>
				<Source><![CDATA[
    void updateAmount()
    {
        // <GBR>
        LedgerJournalTransPayment_BR payment_BR;
        // </GBR>

        if (summedUpAmount > 0)
        {
            ledgerJournalTrans.AmountCurDebit = summedUpAmount;
        }
        else
        {
            ledgerJournalTrans.AmountCurCredit = -summedUpAmount;
        }

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            payment_BR = ledgerJournalTrans.getPaymentExtension_BR();
            payment_BR.FinInterestAmountCur_BR = abs(summedUpInterest);
            payment_BR.FineAmountCur_BR = abs(summedUpFine);
            ledgerJournalTrans.packExtensionTable(payment_BR);
        }
        // </GBR>

        switch (ledgerJournalTrans.AccountType)
        {
            case LedgerJournalACType::Cust:
                CustVendPaymJournalFee::createJournalFeeCust(ledgerJournalTrans);
                break;
            case LedgerJournalACType::Vend:
                CustVendPaymJournalFee::createJournalFeeVend(ledgerJournalTrans);
                break;
        }
        ledgerJournalTrans.Due = ledgerJournalTrans.markedForSettlementMaxDueDate();

        ledgerJournalTrans.update();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>