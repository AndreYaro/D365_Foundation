<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSettlementAdjustmentController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventSettlementAdjustmentController</c> class is the controller class for the
///    <c>InventSettlementAdjustmentController</c> report.
/// </summary>
class InventSettlementAdjustmentController extends SrsReportRunController implements BatchRetryable
{
    // <GEERU>
    #ISOCountryRegionCodes
    // </GEERU>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Modifies the report query and parameters by using the caller settings.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    This report is called with the wrong table buffer.
    /// </exception>
    protected void prePromptModifyContract()
    {
        InventClosing           inventClosing;

        if (this.parmArgs() && this.parmArgs().dataset())
        {
            switch (this.parmArgs().dataset())
            {
                case(tableNum(InventClosing)) :
                    Common record = this.parmArgs().record();
                    inventClosing.data(record);
                    break;
                default:
                    throw error(strFmt("@SYS23396",funcName()));
            }
        }

        // Make sure the last saved query is loaded before trying to change it.
        this.loadFromSysLastValue();
        Query query = this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey());

        QueryBuildDataSource queryBuildDataSource = SysQuery::findOrCreateDataSource(query, tableNum(InventSettlement));

        if (inventClosing)
        {
            queryBuildDataSource.clearRanges();
        }
        else
        {
            SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(InventSettlement, ItemId));
        }

        QueryBuildRange queryBuildRangeVoucher = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(InventSettlement, Voucher));
        QueryBuildRange queryBuildRangeTransdate = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(InventSettlement, TransDate));

        if (inventClosing)
        {
            queryBuildRangeVoucher.value(queryValue(inventClosing.Voucher));
            queryBuildRangeTransdate.value(queryValue(inventClosing.TransDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventSettlementAdjustmentController construct()
    {
        return new InventSettlementAdjustmentController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        InventSettlementAdjustmentController controller  = new InventSettlementAdjustmentController();
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            controller.parmReportName(ssrsReportStr(InventSettlementAdjustmentHS, Report));
        }
        else
        {
        // </GEERU>
            controller.parmReportName(ssrsReportStr(InventSettlementAdjustment, Report));
        // <GEERU>
        }
        // </GEERU>
        controller.parmDialogCaption("@SYS55358");
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>
