<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayAverageEarnEngine_SickList</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rPayAverageEarnEngine_SickList extends RPayAverageEarnEngine
{
    RPayDayHour           numOfPrevMonths;
    Factor                coefficient;
    RPayAmount            baseRestrictAmount, restrictAmountDifference;
    boolean               usePrecisionAmount, isRateCalc, avgCurrentPeriod;

    RPayRateValue         percentValueLocal;
    KeySum                wholePeriod;

    boolean               calcByPrevYears;
    boolean               calcByMROT;
    boolean               fullPctMROT;
    boolean               periodicRecalc;
    boolean               checkSeniority;
    RPayTypeOfMROT        typeOfMROT;

    #define.DaysInMonth(30)
    #define.MonthsInYear(12)
    #define.DaysInYear(365)

    #define.LawChangeDate(01\01\2010)
    #define.LawChangeDate2(01\01\2011)
    #define.MaxPercentValue(100)

    #RPayTblConstants
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>averageRateRestriction</Name>
				<Source><![CDATA[
    private RPayAmount averageRateRestriction(ReportPeriod_RU _payPeriod)
    {
        RPayAmount            restrictionAmount;
        RPayDayHour           regDayHour;
        RPayCalendarId        calendarId;
        RPaySickIllParameters rPaySickIllParameters = RPaySickIllParameters::find(rPayAverageEarnEmplPeriodTable.RpayIllType);
        TransDate             employmentDate;
        int                   mthCount;
        RPayAverageEarnTrans  rPayAverageEarnTrans;
        RPayAmount            tmpAmount, tmpRestrictionAmount;
        RPayDayHour           avgDayHour;

        RPayRateCallContext   callContext;

        callContext = RPayRateCallContext::construct(_payPeriod, rPayAverageEarnEmplPeriodTable.EmplId);

        if (rPaySickIllParameters.ApplySumRestriction &&
            RPayRateTable::find(rPaySickIllParameters.ApplySumRestriction).getValue(callContext) == NoYes::Yes)
        {
            if (RPayParameters::payPeriod() >= #LawChangeDate &&
                _payPeriod >= #LawChangeDate)
            {
                if (rPayAverageEarnEmplPeriodTable.rPayDayHourCalc == RPayDayHourCalc::Day)
                {
                    if (rPaySickIllParameters.DayRateRestriction)
                    {
                        restrictionAmount = RPayRateTable::find(rPaySickIllParameters.DayRateRestriction).getValue(callContext);
                        restrictAmountDifference = restrictionAmount;
                    }
                    if (calcByPrevYears)
                    {
                        while select sum(Amount), sum(rPayDayHour) from rPayAverageEarnTrans
                            group by PayPeriod
                            where rPayAverageEarnTrans.AverageEarnEmplPeriodRecId == rPayAverageEarnEmplPeriodTable.RecId
                        {
                            if (rPayAverageEarnTrans.rPayDayHour)
                            {
                                tmpAmount = RPayRateTable::find(RPaySickIllParameters::find(rPayAverageEarnEmplPeriodTable.RpayIllType).SumYrRestriction).getValue(RPayRateCallContext::construct(rPayAverageEarnTrans.PayPeriod));
                                if (tmpAmount > 0 &&
                                    rPaySickIllParameters.ApplySumRestriction &&
                                    RPayRateTable::find(rPaySickIllParameters.ApplySumRestriction).getValue(RPayRateCallContext::construct(rPayAverageEarnEmplPeriodTable.StartDate,
                                                                                                rPayAverageEarnEmplPeriodTable.EmplId)) == NoYes::Yes)
                                    tmpRestrictionAmount += min(rPayAverageEarnTrans.Amount, tmpAmount);
                                else
                                    tmpRestrictionAmount += rPayAverageEarnTrans.Amount;
                                avgDayHour += rPayAverageEarnTrans.rPayDayHour;
                            }
                        }
                        tmpRestrictionAmount = avgDayHour ? CurrencyExchangeHelper::amount(tmpRestrictionAmount / avgDayHour) : 0;
                        if (restrictionAmount)
                        {
                            restrictionAmount = min(restrictionAmount, tmpRestrictionAmount);
                        }
                        else
                        {
                            restrictionAmount = tmpRestrictionAmount;
                        }
                        restrictAmountDifference = restrictionAmount;
                    }
                }
                else
                {
                    if (rPaySickIllParameters.HourRateRestriction)
                    {
                        restrictionAmount = RPayRateTable::find(rPaySickIllParameters.HourRateRestriction).getValue(callContext);
                        restrictAmountDifference = restrictionAmount;
                    }
                }
            }
            else
            {
                if (rPaySickIllParameters.SumRestriction)
                {
                    employmentDate = str2Date(RPayParmEmplTrans::find(rPayAverageEarnEmplPeriodTable.EmplId,
                                                                      rPpayAverageEarnParameters.SeniorityRate).Contents,123);

                    if (employmentDate)
                    {
                        mthCount = rPayAverageEarnEmplPeriodTable.StartDate - employmentDate;

                        if (mthCount > 0)
                        {
                            mthCount = mthCount div #DaysInMonth;
                        }
                        else
                        {
                            mthCount = 0;
                        }
                    }
                    callContext.parmCriterion(mthCount);
                    restrictionAmount = RPayRateTable::find(rPaySickIllParameters.SumRestriction).getValue(callContext);
                    restrictAmountDifference = restrictionAmount;

                    calendarId   = RPayEmplTblSum::payCalendarId(emplTable.EmployeeId, _payPeriod);
                    if (calendarId)
                    {
                        if (rPayAverageEarnEmplPeriodTable.rPayDayHourCalc == RPayDayHourCalc::Day)
                        {
                            regDayHour = dayOfMth(_payPeriod);
                        }
                        else
                        {
                            regDayHour = RPayCalendarTable::mthWorkHoursTimeGroup(calendarId,
                                                                                 _payPeriod,
                                                                                 rPayAverageEarnEmplPeriodTable.ScheduleTimeGroupCode);
                        }
                    }

                    if (regDayHour)
                    {
                        restrictAmountDifference = restrictionAmount/regDayHour;
                        restrictionAmount = CurrencyExchangeHelper::amount(restrictionAmount / regDayHour);
                    }
                }
            }
        }

        if (restrictAmountDifference == 0)
        {
            restrictAmountDifference = restrictionAmount;
        }

        return restrictionAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAverageAmountTotal</Name>
				<Source><![CDATA[
    public container  calcAverageAmountTotal(ReportPeriod_RU                _payPeriod                          = dateNull(),
                                             RPayAverageEarnEmplPeriodTable _averageEarnEmplPeriodTableSource   = null,
                                             RPayDayHour                    _periodDayHour = 0)
    {
        RPayAmount              averageAmount, avgAmountMin;
        RPayAverageEarnTrans    rPayAverageEarnTrans;
        RecId                   averageEarnEmplPeriodTableRecId;
        Amount                  tmpAmount;
        RPayDayHour             avgDayHour;
        boolean                 ok;
        RPaySickIllParameters   rPaySickIllParameters = RPaySickIllParameters::find(rPayAverageEarnEmplPeriodTable.RpayIllType);
        int                     years;
        RPayRateCallContext     context;

        context = RPayRateCallContext::construct(endmth(rPayAverageEarnEmplPeriodTable.sickListStartDate()),rPayAverageEarnEmplPeriodTable.EmplId);

        if (rPayAverageEarnEmplPeriodTable.RpaySickListType == RPaySickListType::Stavka)
        {
            averageEarnEmplPeriodTableRecId = _averageEarnEmplPeriodTableSource ?
                                              _averageEarnEmplPeriodTableSource.RecId :
                                              rPayAverageEarnEmplPeriodTable.RecId;

            select firstonly rPayAverageEarnTrans
                where rPayAverageEarnTrans.AverageEarnEmplPeriodRecId == averageEarnEmplPeriodTableRecId &&
                      rPayAverageEarnTrans.PayPeriod                  == _payPeriod                      &&
                      rPayAverageEarnTrans.Amount                     > 0                                &&
                      rPayAverageEarnTrans.rPayDayHour                > 0;

            if (rPayAverageEarnTrans)
            {
                avgDayHour = _periodDayHour ? _periodDayHour : rPayAverageEarnTrans.rPayDayHour;
                tmpAmount = CurrencyExchangeHelper::amount(rPayAverageEarnTrans.Amount / rPayAverageEarnTrans.rPayDayHour);
                payFundDifference = rPayAverageEarnTrans.Amount/rPayAverageEarnTrans.rPayDayHour;
                averageAmount = tmpAmount;
                avgAmountMin = RPayRateTable::find(rPpayAverageEarnParameters.RateOfMinSalary).getValue(context);
                avgAmountMin = CurrencyExchangeHelper::amount(avgAmountMin / dayOfMth(endmth(rPayAverageEarnEmplPeriodTable.sickListStartDate())));
            }
        }
        else
        {
            if (calcByPrevYears)
            {
                ok = true;
                while select sum(Amount), sum(rPayDayHour) from rPayAverageEarnTrans
                    group by PayPeriod
                    where rPayAverageEarnTrans.AverageEarnEmplPeriodRecId == rPayAverageEarnEmplPeriodTable.RecId
                {
                    if (rPayAverageEarnTrans.rPayDayHour)
                    {
                        averageAmount += rPayAverageEarnTrans.Amount;
                        avgDayHour    += rPayAverageEarnTrans.rPayDayHour;
                        years ++;
                    }
                    else
                    {
                        ok = false;
                    }
                }

                if (! ok)
                {
                    warning(strFmt("@RUP3201", fieldId2pname(tableNum(RPayAverageEarnTrans), fieldNum(RPayAverageEarnTrans, rPayDayHour)),
                                                                                        tableId2pname(tableNum(RPayAverageEarnTrans)),
                                                                                        rPayAverageEarnEmplPeriodTable.RpaySickListId));
                }
                averageAmount = avgDayHour ? CurrencyExchangeHelper::amount(averageAmount / avgDayHour) : 0;
                avgAmountMin = RPayRateTable::find(rPpayAverageEarnParameters.RateOfMinSalary).getValue(context);
                avgAmountMin = avgDayHour ? CurrencyExchangeHelper::amount(avgAmountMin * 12 * years / avgDayHour) : 0;
            }
            else
            {
                [averageAmount, avgAmountMin] = super(_payPeriod, _averageEarnEmplPeriodTableSource, _periodDayHour);
                if (rPayAverageEarnEmplPeriodTable.StartDate)
                {
                    avgAmountMin = RPayRateTable::find(rPpayAverageEarnParameters.RateOfMinSalary).getValue(context);
                    avgAmountMin = CurrencyExchangeHelper::amount(avgAmountMin / dayOfMth(endmth(rPayAverageEarnEmplPeriodTable.sickListStartDate())));
                }
            }
        }

        return [averageAmount, avgAmountMin];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcFundAverageRate</Name>
				<Source><![CDATA[
    private container calcFundAverageRate(ReportPeriod_RU                   _currentPeriod,
                                          RPayRateValue                     _otherFundPercent,
                                          RPayRateValue                     _paymentFundPercent,
                                          RPayAverageEarnEmplPeriodTable    _averageEarnEmplPeriodTableSource   = null,
                                          boolean                           _wholeMth                           = false,
                                          RPayDayHour                       _wholeDayHourValue                  = 0,
                                          boolean                           _isHonoraryDays                     = false,
                                          boolean                           _isMROTCalculation                  = false,
                                          boolean                           _isPayableDays                      = true)
    {
        RPayAmount otherFundAverageAmount;
        RPayAmount otherFundAverageAmountSrc;

        RPayAmount paymentFundAverageAmount;
        RPayAmount paymentFundAverageAmountSrc;

        RPayAmount totalAverageAmount;
        RPayAmount totalAverageAmountMin;

        RPayAmount sourcePaymentFundAverageAmount;
        RPayAmount sourceOtherFundAverageAmount;
        RPayAmount srcPayDiff   = payFundDifference;
        RPayAmount srcOtherDiff = payFundDifference;

        RPayDayHour payDayHour;
        Factor      partTimeFactor = rPayAverageEarnEmplPeriodTable.PartTimeCoefficient;

        container oldLawCalc()
        {
            RPayAmount lawPayment;
            RPayAmount lawPaymentPrecise;

            if (_otherFundPercent)
            {
                paymentFundAverageAmount = 0;

                if (rPayAverageEarnEmplPeriodTable.AddPaymFromPaymFund)
                {
                    if (otherFundAverageAmount < sourceOtherFundAverageAmount)
                    {
                        paymentFundAverageAmount = (sourceOtherFundAverageAmount - otherFundAverageAmount);
                    }

                    if (otherFundDifference < srcOtherDiff)
                    {
                        payFundDifference = srcOtherDiff - otherFundDifference;
                    }
                }
            }
            else
            {
                if (rPayAverageEarnEmplPeriodTable.AddPaymFromPaymFund)
                {
                    if (_isHonoraryDays)
                    {
                        lawPayment        = sourcePaymentFundAverageAmount - paymentFundAverageAmount;
                        lawPaymentPrecise = srcPayDiff - payFundDifference;
                    }
                    else
                    {
                        paymentFundAverageAmount = sourcePaymentFundAverageAmount;
                        payFundDifference        = srcPayDiff;
                    }
                }
            }
            return [otherFundAverageAmount, paymentFundAverageAmount, lawPayment, lawPaymentPrecise];
        }

        RPayAmount limitedFundAmount(RPayAmount  _minMonth)
        {
            RPayAmount limitedAmount = totalAverageAmountMin;

            if (!_isMROTCalculation)
            {
                calcByMROT           = true;
            }

            fullPctMROT              = true;
            usePrecisionAmount       = false;

            if (limitedAmount > _minMonth || ((payDayHour ? payDayHour : #DaysInMonth) == _wholeDayHourValue && _wholeMth))
            {
                totalAverageAmountMin  = _minMonth;
                limitedAmount = _minMonth;
            }

            return limitedAmount;
        }

        RPayAmount calcFund(RPayAmount _fundAverageAmount,
                            RPayAmount _fundPercent,
                            RPayAmount _fundAverageAmountSrc,
                            RPayAmount _minMonth)
        {
            RPayAmount fundAverageAmount = _fundAverageAmount;
            RPayRateCode    seniorityMROTRateCode;
            RPayRateValue   seniorityMROTValue;
            boolean         pctApplied;

            if (percentValueLocal < 0 &&
                !(rPayAverageEarnEmplPeriodTable.LimitByMROT || _isMROTCalculation) &&
                _fundAverageAmountSrc < totalAverageAmountMin)
            {
                if (_fundAverageAmountSrc < totalAverageAmountMin)
                {
                    typeOfMROT = RPayTypeOfMROT::Gift;
                }

                fundAverageAmount = CurrencyExchangeHelper::amount(partTimeFactor * _fundPercent * totalAverageAmountMin / 100);
                pctApplied = true;

                if (!_isMROTCalculation)
                {
                    calcByMROT = true;
                }

                if ((fundAverageAmount > _minMonth ||
                    ((payDayHour ? payDayHour : #DaysInMonth) == _wholeDayHourValue && _wholeMth && partTimeFactor == 1
                        && _fundPercent == 100 && _fundAverageAmountSrc < totalAverageAmountMin)) &&
                    RPayAverageEarnTable::find(rPayAverageEarnEmplPeriodTable.rPayAverageEarnCode).AverageRateRevaluationMROT)
                {
                    totalAverageAmountMin   = _minMonth;
                    fundAverageAmount       = _minMonth;
                    usePrecisionAmount      = false;
                }
            }
            else if (_isPayableDays && (rPayAverageEarnEmplPeriodTable.LimitByMROT || _isMROTCalculation || percentValueLocal > 0))
            {
                fundAverageAmount = limitedFundAmount(_minMonth);
            }

            if (calcByMROT)
            {
                if (_fundAverageAmount > fundAverageAmount || rPayAverageEarnEmplPeriodTable.LimitByMROT)
                {
                    typeOfMROT = RPayTypeOfMROT::Punishment;
                }
                else
                {
                    typeOfMROT = RPayTypeOfMROT::Gift;
                }

                seniorityMROTRateCode = RPaySickIllParameters::find(rPayAverageEarnEmplPeriodTable.RpayIllType).SeniorityLimForMROT;
                if (seniorityMROTRateCode)
                {
                    seniorityMROTValue = RPayRateTable::find(seniorityMROTRateCode)
                                                        .getValue(RPayRateCallContext::construct(endmth(rPayAverageEarnEmplPeriodTable.sickListStartDate()),
                                                                                                    rPayAverageEarnEmplPeriodTable.EmplId,
                                                                                                    typeOfMROT));
                    if (seniorityMROTValue > 0) //use predefined fund percent value
                    {
                        fullPctMROT = false;
                        if (!pctApplied)
                        {
                            fundAverageAmount = CurrencyExchangeHelper::amount(partTimeFactor * _fundPercent * fundAverageAmount / 100);
                        }
                    }
                }
            }

            return fundAverageAmount;
        }

        container newLawCalc()
        {
            RPayAmount  minMonth;
            RPayAmount lawPayment;
            RPayAmount lawPaymentPrecise;

            otherFundAverageAmountSrc   = otherFundAverageAmount;
            paymentFundAverageAmountSrc = paymentFundAverageAmount;

            otherFundAverageAmount   = CurrencyExchangeHelper::amount(_otherFundPercent * otherFundAverageAmount / 100);
            paymentFundAverageAmount = CurrencyExchangeHelper::amount(_paymentFundPercent * paymentFundAverageAmount / 100);
            payFundDifference        = _paymentFundPercent * payFundDifference / 100;
            otherFundDifference      = _otherFundPercent   * otherFundDifference / 100;
            payDayHour               = this.getFullMonthDay(_currentPeriod,rPayAverageEarnEmplPeriodTable.RpayAverageFullMonthCalcType);

            //no child vacation
            if (rPayAverageEarnEmplPeriodTable.RpayIllType != RPayIllType::ChildVacation)
            {
                minMonth = RPayRateTable::find(rPpayAverageEarnParameters.RateOfMinSalary)
                            .getValue(RPayRateCallContext::construct(endmth(rPayAverageEarnEmplPeriodTable.sickListStartDate()), rPayAverageEarnEmplPeriodTable.EmplId))
                                / (payDayHour ? payDayHour : #DaysInMonth);
                if (_otherFundPercent)
                {
                    paymentFundAverageAmount = 0;
                    otherFundAverageAmount = calcFund(otherFundAverageAmount, _otherFundPercent, otherFundAverageAmountSrc, minMonth);
                }
                else
                {
                    lawPayment               = 0;
                    paymentFundAverageAmount = calcFund(paymentFundAverageAmount, _paymentFundPercent, paymentFundAverageAmountSrc, minMonth);
                }
                sourcePaymentFundAverageAmount  = max(sourcePaymentFundAverageAmount, totalAverageAmountMin);
                sourceOtherFundAverageAmount    = max(sourceOtherFundAverageAmount, totalAverageAmountMin);
            }

            //common part
            if (_otherFundPercent)
            {
                paymentFundAverageAmount = 0;
                if (rPayAverageEarnEmplPeriodTable.AddPaymFromPaymFund)
                {
                    if (otherFundAverageAmount < sourceOtherFundAverageAmount)
                    {
                        paymentFundAverageAmount = (sourceOtherFundAverageAmount - otherFundAverageAmount);
                    }

                    if (otherFundDifference < srcOtherDiff)
                    {
                        payFundDifference = srcOtherDiff - otherFundDifference;
                    }
                }
            }
            else
            {
                if (rPayAverageEarnEmplPeriodTable.AddPaymFromPaymFund)
                {
                    if (_isHonoraryDays)
                    {
                        lawPayment        = sourcePaymentFundAverageAmount - paymentFundAverageAmount;
                        lawPaymentPrecise = srcPayDiff - payFundDifference;
                    }
                    else
                    {
                        paymentFundAverageAmount = sourcePaymentFundAverageAmount;
                        payFundDifference        = srcPayDiff;
                    }
                }
            }

            return [otherFundAverageAmount, paymentFundAverageAmount, lawPayment, lawPaymentPrecise];
        }

        void implementRestrictionAmount(RPayAmount _restrictionAmount)
        {
            if (!_restrictionAmount)
            {
                return;
            }

            otherFundAverageAmount   = min(_restrictionAmount, otherFundAverageAmount);
            otherFundDifference      = (otherFundAverageAmount == _restrictionAmount) ? restrictAmountDifference : otherFundDifference;

            if (restrictAmountDifference                     &&
                otherFundAverageAmount == _restrictionAmount &&
                _currentPeriod < #LawChangeDate              &&
                _wholeMth)
            {
                usePrecisionAmount = true;
            }

            if (! _otherFundPercent)
            {
                paymentFundAverageAmount = min(_restrictionAmount, paymentFundAverageAmount);
                payFundDifference        = (paymentFundAverageAmount == _restrictionAmount) ? restrictAmountDifference : payFundDifference;
            }
        }

        container oldLawAverageCalc()
        {
            otherFundAverageAmount   = CurrencyExchangeHelper::amount(_otherFundPercent * totalAverageAmount / 100);
            paymentFundAverageAmount = CurrencyExchangeHelper::amount(_paymentFundPercent * totalAverageAmount / 100);
            otherFundDifference      = _otherFundPercent   * payFundDifference / 100;
            payFundDifference        = _paymentFundPercent * payFundDifference / 100;

            return[otherFundAverageAmount, paymentFundAverageAmount, otherFundDifference];
        }

        container newLawAverageCalc()
        {
            otherFundAverageAmount   = totalAverageAmount;
            paymentFundAverageAmount = totalAverageAmount;
            otherFundDifference      = payFundDifference;

            return[otherFundAverageAmount, paymentFundAverageAmount, otherFundDifference];
        }

        [totalAverageAmount, totalAverageAmountMin] = this.calcAverageAmountTotal(_currentPeriod,
                                                                    _averageEarnEmplPeriodTableSource,
                                                                    avgCurrentPeriod ? _wholeDayHourValue : 0);

        sourcePaymentFundAverageAmount  = totalAverageAmount;
        sourceOtherFundAverageAmount    = totalAverageAmount;

        if (_currentPeriod < #LawChangeDate)
        {
            oldLawAverageCalc();
        }
        else
        {
            newLawAverageCalc();
        }

        implementRestrictionAmount(this.averageRateRestriction(_currentPeriod));

        return (_currentPeriod < #LawChangeDate) ? oldLawCalc() : newLawCalc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateNow</Name>
				<Source><![CDATA[
    public void calculateNow()
    {
        RPayAverageEarnTable    rPayAverageEarnTable = RPayAverageEarnTable::find(RPaySickIllParameters::find(rPayAverageEarnEmplPeriodTable.RpayIllType).AverageEarnCode);

        if (rPayAverageEarnEmplPeriodTable.isReverseLine())
        {
            return;
        }

        if (rPayAverageEarnEmplPeriodTable.RpaySickListType == RPaySickListType::Stavka)
        {
            this.updateAverageEarnTrans_Fact();
        }
        else
        {
            if (calcByPrevYears)
            {
                this.updateAverageEarnTrans_PreviousYears();
            }
            else
            {
                //check if law has been changed not in sick list period and sick list has previous sick list
                if (rPayAverageEarnEmplPeriodTable.PrevPaySickListId &&
                        (rPayAverageEarnEmplPeriodTable.StartDate >=  #LawChangeDate ||
                         rPayAverageEarnEmplPeriodTable.EndDate < #LawChangeDate ))
                {
                    this.updateAverageEarnTrans_Previous();
                }
                else
                {
                    super();
                }
            }
        }

        this.updateAverageEarnValue();
        formController.refreshDatasources();
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    public boolean check()
    {
        boolean                        ret;
        RPayAverageEarnEmplPeriodTable aeEmplPeriodTableLocal;
        TransDate  mrotEndDate;
        ret  = super();
        if (ret)
        {
            if (! rPayAverageEarnEmplPeriodTable.StartDate || ! rPayAverageEarnEmplPeriodTable.EndDate)
            {
                ret = checkFailed("@RUP1088");
            }

            if (! rPayAverageEarnEmplPeriodTable.RpaySickListId)
            {
                ret = checkFailed("@RUP6332");
            }

            if (ret)
            {
                if ( !rPayAverageEarnEmplPeriodTable.isReverseLine())
                {
                    select firstonly RpaySickListId, EmplId, RecId from aeEmplPeriodTableLocal
                        where aeEmplPeriodTableLocal.RpaySickListId == rPayAverageEarnEmplPeriodTable.RpaySickListId &&
                              aeEmplPeriodTableLocal.EmplId         == rPayAverageEarnEmplPeriodTable.EmplId         &&
                              aeEmplPeriodTableLocal.RecId          != rPayAverageEarnEmplPeriodTable.RecId          &&
                               !(aeEmplPeriodTableLocal.CorrectedSickListId == rPayAverageEarnEmplPeriodTable.RpaySickListId &&
                                 aeEmplPeriodTableLocal.RpaySickListId == rPayAverageEarnEmplPeriodTable.RpaySickListId);
                    if (aeEmplPeriodTableLocal)
                    {
                        ret = checkFailed(strFmt("@RUP2127", rPayAverageEarnEmplPeriodTable.RpaySickListId,rPayAverageEarnEmplPeriodTable.EmplId));
                    }
                }

                if (rPayAverageEarnEmplPeriodTable.RecalcSickListId)
                {
                    select firstonly RecalcSickListId, EmplId, RecId from aeEmplPeriodTableLocal
                        where aeEmplPeriodTableLocal.RecalcSickListId    == rPayAverageEarnEmplPeriodTable.RecalcSickListId &&
                              aeEmplPeriodTableLocal.EmplId              == rPayAverageEarnEmplPeriodTable.EmplId           &&
                              aeEmplPeriodTableLocal.CorrectedSickListId == ''                                              &&
                              aeEmplPeriodTableLocal.RecId            != rPayAverageEarnEmplPeriodTable.RecId;
                    if (aeEmplPeriodTableLocal)
                    {
                        ret = checkFailed(strFmt("@RUP2701", rPayAverageEarnEmplPeriodTable.RecalcSickListId, rPayAverageEarnEmplPeriodTable.EmplId));
                    }
                }
            }

            if (rPayAverageEarnEmplPeriodTable.mrotStartDate || rPayAverageEarnEmplPeriodTable.mrotEndDate)
            {
                mrotEndDate = rPayAverageEarnEmplPeriodTable.mrotEndDate();

                if (rPayAverageEarnEmplPeriodTable.mrotStartDate > mrotEndDate)
                {
                    ret = checkFailed("@RUP3453");
                }
                else if (rPayAverageEarnEmplPeriodTable.mrotStartDate < rPayAverageEarnEmplPeriodTable.StartDate  ||
                         rPayAverageEarnEmplPeriodTable.mrotStartDate > rPayAverageEarnEmplPeriodTable.EndDate    ||
                         mrotEndDate                                  > rPayAverageEarnEmplPeriodTable.EndDate    ||
                         mrotEndDate                                  < rPayAverageEarnEmplPeriodTable.StartDate)
                {
                    ret = checkFailed("@RUP3454");
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInitAverage</Name>
				<Source><![CDATA[
    protected void checkInitAverage()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInitFromPrevious</Name>
				<Source><![CDATA[
    protected void checkInitFromPrevious()
    {
        RPaySickIllParameters rPaySickIllParameters = RPaySickIllParameters::find(rPayAverageEarnEmplPeriodTable.RpayIllType);

        if (! rPayAverageEarnEmplPeriodTable.Amount
            && RPayRateTable::find(rPaySickIllParameters.PreviousInsuranceAccident).getValue(RPayRateCallContext::construct(rPayAverageEarnEmplPeriodTable.StartDate, rPayAverageEarnEmplPeriodTable.EmplId)))
        {
            this.initFromPreviousAccident();

            this.updateAverageEarnEmplPeriodTable();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPrevAccidentSeniority</Name>
				<Source><![CDATA[
    private boolean checkPrevAccidentSeniority(RPayRateValue _appliedSeniorityPercent)
    {
        RPayAverageEarnValue            avgEarnValuePrevAccident;
        RPayAverageEarnEmplPeriodTable  avgEarnEmplPeriodTablePrevAccident;
        boolean ret = true;

        if (rPayAverageEarnEmplPeriodTable.PrevPaySickListId)
        {
            avgEarnEmplPeriodTablePrevAccident = rPayAverageEarnEmplPeriodTable.firstSickListAccident();
            if (!avgEarnEmplPeriodTablePrevAccident.LimitByMROT)
            {
                select firstonly SickListPercentage from avgEarnValuePrevAccident
                    where avgEarnValuePrevAccident.AverageEarnEmplPeriodRecid == avgEarnEmplPeriodTablePrevAccident.RecId    &&
                          avgEarnValuePrevAccident.PayAverageSourceType == RPayAverageSourceType::OtherFund                  &&
                         (avgEarnValuePrevAccident.StartDate <= emplTable.PayResignedDate || !emplTable.PayResignedDate)     &&
                          avgEarnValuePrevAccident.SickWageType != RPaySickWageType::AvgLimit                                &&
                         (!avgEarnEmplPeriodTablePrevAccident.mrotStartDate ||
                          avgEarnValuePrevAccident.EndDate  < avgEarnEmplPeriodTablePrevAccident.mrotStartDate ||
                          avgEarnValuePrevAccident.StartDate > avgEarnEmplPeriodTablePrevAccident.mrotEndDate());
                if (avgEarnValuePrevAccident.RecId && _appliedSeniorityPercent != avgEarnValuePrevAccident.SickListPercentage)
                {
                    ret = checkFailed("@RUP3319"  + ' ' + "@RUP3320");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAverageEarnTransDialog</Name>
				<Source><![CDATA[
    public void createAverageEarnTransDialog()
    {
        RPayAverageEarnTrans    rPayAverageEarnTrans;
        RPayAverageEarnTable    rPayAverageEarnTable = RPayAverageEarnTable::find(RPaySickIllParameters::find(rPayAverageEarnEmplPeriodTable.RpayIllType).AverageEarnCode);
        RPaySickIllParameters   rPaySickIllParameters = RPaySickIllParameters::find(rPayAverageEarnEmplPeriodTable.RpayIllType);
        int                     yrCalc = real2int(RPayRateTable::find(rPayAverageEarnEmplPeriodTable.CalcByFund)
                                                        .getValue(RPayRateCallContext::construct(rPayAverageEarnEmplPeriodTable.StartDate,
                                                                                                 rPayAverageEarnEmplPeriodTable.EmplId)));
        ReportPeriod_RU         payPeriod;

        this.runAverageEarnTransDialog();

        while (true)
        {
            if (averageEarnTransDialog && averageEarnTransDialog.closedOk())
            {
                payPeriod = averageEarnTransDialogFieldPayPeriod.value();
                if (calcByPrevYears)
                {
                    payPeriod = mkDate(31,12,year(payPeriod));
                    if (year(payPeriod) >= year(rPayAverageEarnEmplPeriodTable.AverageEarnCalcPeriod) ||
                        year(payPeriod) <  year(rPayAverageEarnEmplPeriodTable.AverageEarnCalcPeriod) - yrCalc)
                    {
                        Box::info("@RUP523","@RUP461");
                        this.runAverageEarnTransDialog();
                        continue;
                    }
                }
                else
                {
                    if (endmth(payPeriod) >= rPayAverageEarnEmplPeriodTable.AverageEarnCalcPeriod ||
                        endmth(payPeriod) < endmth(prevYr(rPayAverageEarnEmplPeriodTable.AverageEarnCalcPeriod)))
                    {
                        Box::info("@RUP523","@RUP461");
                        this.runAverageEarnTransDialog();
                        continue;
                    }
                }
                if (RPayAverageEarnTrans::exist(endmth(payPeriod),
                                                rPayAverageEarnEmplPeriodTable.RecId,
                                                averageEarnTransDialogFieldType.value()))
                {
                    Box::info("@RUP524","@RUP461");
                    this.runAverageEarnTransDialog();
                    continue;
                }

                if (!calcByPrevYears && averageEarnTransDialogFieldType.value() == RPayAverageSourceType::PrevFund)
                {
                    Box::info(strFmt("@RUP6189", RPayAverageSourceType::PrevFund), "@RUP461");
                    this.runAverageEarnTransDialog();
                    continue;
                }

                if (averageEarnTransDialogFieldType.value() == RPayAverageSourceType::PaymentFund)
                {
                    rPayAverageEarnTrans = this.initPaymentFundTrans(endmth(payPeriod));
                }
                else if (averageEarnTransDialogFieldType.value() == RPayAverageSourceType::PrevFund)
                {
                    rPayAverageEarnTrans = this.initPrevFundTrans(payPeriod, yrCalc);
                }

                if (! rPayAverageEarnTrans)
                {
                     rPayAverageEarnTrans.PayPeriod                  = endmth(payPeriod);
                     rPayAverageEarnTrans.rPayAverageSourceType      = averageEarnTransDialogFieldType.value();
                     rPayAverageEarnTrans.AverageEarnEmplPeriodRecId = rPayAverageEarnEmplPeriodTable.RecId;
                     rPayAverageEarnTrans.insert();
                }

                this.updateAverageEarnEmplPeriodTable();
                formController.researchAndFindAETrans(rPayAverageEarnTrans);
            }
            break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransForPrevYears</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates average earnings calculation lines for previous working periods.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createTransForPrevYears()
    {
        RPayAverageEarnTrans            rPayAverageEarnTrans;
        RPayCalcYearsForAverage         calcYearsForAverage;

        MapEnumerator   meYearsAmount;

        boolean         exclDaysApplicable;
        Counter         yrCalc;
        ReportPeriod_RU currentPeriod;
        container       conValue;

        exclDaysApplicable = rPayAverageEarnEmplPeriodTable.exclDaysApplicable();

        yrCalc = real2int(RPayRateTable::find(rPayAverageEarnEmplPeriodTable.CalcByFund)
                 .getValue(RPayRateCallContext::construct(max(rPayAverageEarnEmplPeriodTable.sickListStartDate(), #LawChangeDate2), rPayAverageEarnEmplPeriodTable.EmplId)));
        currentPeriod = max(rPayAverageEarnEmplPeriodTable.PrevPaySickListId ? rPayAverageEarnEmplPeriodTable.sickListStartDate() : averageEarnCalcPeriod, #LawChangeDate2);

        calcYearsForAverage = RPayCalcYearsForAverage::construct(
            rPayAverageEarnEmplPeriodTable.EmplId,
            yrCalc,
            currentPeriod,
            rPayAverageEarnEmplPeriodTable.RecalcByPrevYears,
            exclDaysApplicable);

        meYearsAmount = Map::create(calcYearsForAverage.getYearsAmountMap()).getEnumerator();

        while (meYearsAmount.moveNext())
        {
            conValue = meYearsAmount.currentValue();

            rPayAverageEarnTrans.clear();
            rPayAverageEarnTrans.PayPeriod                  = mkdate(31,12,meYearsAmount.currentKey());
            rPayAverageEarnTrans.AverageEarnEmplPeriodRecId = rPayAverageEarnEmplPeriodTable.RecId;
            rPayAverageEarnTrans.rPayAverageSourceType      = RPayAverageSourceType::PrevFund;
            rPayAverageEarnTrans.Amount                     = conPeek(conValue, 1);

            if (exclDaysApplicable)
            {
                rPayAverageEarnTrans.rPayDayHour = dateEndYr(rPayAverageEarnTrans.PayPeriod) - dateStartYr(rPayAverageEarnTrans.PayPeriod) + 1 - conPeek(conValue, 2);
            }
            else
            {
                rPayAverageEarnTrans.rPayDayHour = #DaysInYear;
            }

            rPayAverageEarnTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>disributeRestYearDays</Name>
				<Source><![CDATA[
    #define.MaxRest(10000)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    boolean disributeRestYearDays(TransDate _transDate, boolean _validateOnly)
    {
        Days                                paidDaysPrev, paidDaysAfter;
        RPayAverageEarnEmplPeriodTable      rPayAverageEarnEmplPeriodTableLocal;
        TransLink_RU                        transLink;
        RPayAverageEarnValue                rPayAverageEarnValueLocal, payAverageEarnValueOver;
        RPayAverageEarnEngine_SickList      rPayAverageEarnEngine_SickList;
        RPaySickIllParameters               rPaySickIllParameters =  RPaySickIllParameters::find(rPayAverageEarnEmplPeriodTable.RpayIllType);
        boolean                             ret = true;

        Days getPaidDays()
        {
            select sum(PayDayHour) from rPayAverageEarnValueLocal
                where rPayAverageEarnValueLocal.AverageEarnEmplPeriodRecid  == rPayAverageEarnEmplPeriodTableLocal.RecId
                notexists join payAverageEarnValueOver
                    where payAverageEarnValueOver.AverageEarnEmplPeriodRecid == rPayAverageEarnValueLocal.AverageEarnEmplPeriodRecid &&
                          payAverageEarnValueOver.RecId                      != rPayAverageEarnValueLocal.RecId                      &&
                          payAverageEarnValueOver.PayAverageSourceType       == RPayAverageSourceType::OtherFund               &&
                          payAverageEarnValueOver.StartDate                  == rPayAverageEarnValueLocal.StartDate                  &&
                          payAverageEarnValueOver.EndDate                    == rPayAverageEarnValueLocal.EndDate;

            return any2int(rPayAverageEarnValueLocal.PayDayHour);
        }

        if (rPaySickIllParameters.DaysRestrictionInYearRate &&
            RPayRateTable::find(rPaySickIllParameters.DaysRestrictionInYearRate).getValue(RPayRateCallContext::construct(_transDate, rPayAverageEarnEmplPeriodTable.EmplId)))
        {
            while select forupdate rPayAverageEarnEmplPeriodTableLocal order by StartDate
                where rPayAverageEarnEmplPeriodTableLocal.EmplId        == rPayAverageEarnEmplPeriodTable.EmplId &&
                      rPayAverageEarnEmplPeriodTableLocal.RpayIllType   != RPayIllType::ChildVacation            &&
                      rPayAverageEarnEmplPeriodTableLocal.FamilyRecId   == rPayAverageEarnEmplPeriodTable.FamilyRecId &&
                      (((rPayAverageEarnEmplPeriodTableLocal.StartDate  >  _transDate) &&
                        !rPayAverageEarnEmplPeriodTableLocal.Included   && !_validateOnly) ||
                       ((rPayAverageEarnEmplPeriodTableLocal.StartDate  > rPayAverageEarnEmplPeriodTable.EndDate) &&
                        rPayAverageEarnEmplPeriodTableLocal.Included)) &&
                      rPayAverageEarnEmplPeriodTableLocal.StartDate     <= dateEndYr(rPayAverageEarnEmplPeriodTable.EndDate)
                #transLinkNotExistsReversed_RU(transLink, rPayAverageEarnEmplPeriodTableLocal)
            {
                if (rPayAverageEarnEmplPeriodTableLocal.Included)
                {
                   select firstonly RecId from rPayAverageEarnValueLocal
                        where rPayAverageEarnValueLocal.AverageEarnEmplPeriodRecid == rPayAverageEarnEmplPeriodTableLocal.RecId;

                    if (rPayAverageEarnValueLocal)
                    {
                        ret = checkFailed(strFmt("@RUP2968" + ' ' +
                                                 "@RUP2969",
                                                 rPayAverageEarnEmplPeriodTableLocal.StartDate,
                                                 rPayAverageEarnEmplPeriodTableLocal.EndDate));
                    }
                }
                else if (ret)
                {
                    paidDaysPrev = getPaidDays();

                    rPayAverageEarnEngine_SickList = new RPayAverageEarnEngine_SickList(rPayAverageEarnEmplPeriodTableLocal.EmplId,
                                                                                        rPayAverageEarnEmplPeriodTableLocal.rPayAverageEarnCode,
                                                                                        rPayAverageEarnEmplPeriodTableLocal.AverageEarnCalcPeriod);

                    rPayAverageEarnEngine_SickList.rPayAverageEarnEmplPeriodTable(rPayAverageEarnEmplPeriodTableLocal);
                    rPayAverageEarnEngine_SickList.calculateNow();

                    paidDaysAfter = getPaidDays();

                    if (paidDaysAfter != paidDaysPrev)
                    {
                        info(strFmt("@RUP2970",
                                    rPayAverageEarnEmplPeriodTableLocal.StartDate,
                                    rPayAverageEarnEmplPeriodTableLocal.EndDate,
                                    paidDaysAfter > paidDaysPrev ? "@SYS87840" : "@SYS87842",
                                    any2int(abs(paidDaysAfter - paidDaysPrev)),
                                    paidDaysAfter));
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBonusMonthDay</Name>
				<Source><![CDATA[
    protected RPayDayHour getBonusMonthDay()
    {
        RPayDayHour          ret = 0;
        RPayAverageEarnTrans rPayAverageEarnTrans;

        if (rPayAverageEarnEmplPeriodTable.CalcBonusInProportion && rPayAverageEarnEmplPeriodTable.rPayDayHourCalc == RPayDayHourCalc::Day)
        {
            while select rPayAverageEarnTrans
                group by PayPeriod
                where rPayAverageEarnTrans.AverageEarnEmplPeriodRecId == rPayAverageEarnEmplPeriodTable.RecId &&
                      rPayAverageEarnTrans.rPayAverageSourceType      == RPayAverageSourceType::PaymentFund
            {
                ret += dayOfMth(endmth(rPayAverageEarnTrans.PayPeriod));
            }
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmptyPeriods</Name>
				<Source><![CDATA[
    private container getEmptyPeriods(container _workingPeriods, StartDate _startDate, EndDate _endDate)
    {
        container   period  = [_startDate, _endDate], periodNew;
        container   periods = [period];
        container   conItem;
        StartDate   startDateLocal, startDateWork;
        EndDate     endDateLocal, endDateWork;
        int         i,j;

        for (i = 1; i <= conLen(_workingPeriods); i ++)
        {
            conItem       = conPeek(_workingPeriods, i);
            startDateWork = conPeek(conItem, 2);
            endDateWork   = conPeek(conItem, 3);
            j = 1;
            while (j <= conLen(periods))
            {
                period         = conPeek(periods, j);
                startDateLocal = conPeek(period, 1);
                endDateLocal   = conPeek(period, 2);

                if (startDateWork <= endDateLocal && endDateWork >= startDateLocal)
                {
                    period    = [startDateLocal, startDateWork - 1];
                    periodNew = [endDateWork + 1, endDateLocal];

                    periods   = conDel(periods, j, 1);
                    j--;

                    if (startDateLocal <= startDateWork - 1)
                    {
                        j++;
                        periods = conIns(periods, j, period);
                    }
                    if (endDateWork + 1 <= endDateLocal)
                    {
                        j++;
                        periods = conIns(periods, j, periodNew);
                    }
                }
                j++;
            }
        }
        return periods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFullMonthDay</Name>
				<Source><![CDATA[
    protected RPayDayHour getFullMonthDay(ReportPeriod_RU _payPeriod, RPayAverageFullMonthCalcType _rPayAverageFullMonthCalcType)
    {
        StartDate               startDate;
        EndDate                 endDate;
        container               workPeriods, workPeriod;
        int                     i;
        RPayDayHour             rPayDayHour;
        RPayCalendarTable       rPayCalendarTable5days = RPayCalendarTable::findCalendarType(RPayCalendarType::FiveDay);

        if (emplTable.PayResignedDate && emplTable.PayResignedDate < dateStartMth(_payPeriod)) //for fired persons
        {
            workPeriods = [[0, dateStartMth(_payPeriod),  _payPeriod]];
        }
        else
        {
            workPeriods = RPayHistory::getOrganizationByDateInterval(rPayAverageEarnEmplPeriodTable.EmplId, dateStartMth(_payPeriod), _payPeriod);
        }

        for (i = 1; i <= conLen(workPeriods) ; i++)
        {
            workPeriod = conPeek(workPeriods,i);
            startDate  = conPeek(workPeriod,2);
            endDate    = conPeek(workPeriod,3);

            if (rPayAverageEarnEmplPeriodTable.rPayDayHourCalc == RPayDayHourCalc::Day)
            {
                rPayDayHour += endDate - startDate + 1;
            }
            else
            {
                rPayDayHour += (endDate - startDate + 1) * rPayCalendarTable5days.t13HoursPerDay;
            }
        }

        return rPayDayHour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStartDateOfCheckedPeriod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public StartDate getStartDateOfCheckedPeriod()
    {
        TransDate       transDate;
        int             i;
        RPayRateValue   numOfMonths;
        RPayRateCode    restrictPeriodRate;

        transDate           = rPayAverageEarnEmplPeriodTable.sickListStartDate();
        restrictPeriodRate  = RPayAverageEarnParameters::find().RestrictionPeriodRate;

        if (restrictPeriodRate && rPayAverageEarnEmplPeriodTable.EmplId)
        {
            numOfMonths = RPayRateTable::find(restrictPeriodRate).
                          getValue(RPayRateCallContext::construct(rPayAverageEarnEmplPeriodTable.StartDate, rPayAverageEarnEmplPeriodTable.EmplId));

            for (i = 1; i <= numOfMonths; i ++)
            {
                transDate = prevMth(transDate);
            }

            transDate = dateStartMth(transDate);
        }

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includedModified</Name>
				<Source><![CDATA[
    public void includedModified()
    {
        RPayTrans           rPayTrans;
        RPayEmplPeriodTrans rPayEmplPeriodTrans;
        TransLinkType_RU    transLinkType;

        if (rPayAverageEarnEmplPeriodTable.Included)
        {
            rPayAverageEarnEmplPeriodTable.CalcByPrevYears = calcByPrevYears;
            if (rPayAverageEarnEmplPeriodTable.RpayIllType == RPayIllType::ChildVacation &&
                ! rPayAverageEarnEmplPeriodTable.isReverseLine())
            {
                if (RPayEmplPeriodTrans::createByChildVacation(rPayAverageEarnEmplPeriodTable))
                {
                    info("@RUP2334");
                }
            }
            super();
        }
        else
        {
            rPayAverageEarnEmplPeriodTable.CalcByPrevYears = NoYes::No;
            if (rPayAverageEarnEmplPeriodTable.RpayIllType == RPayIllType::ChildVacation)
            {
                rPayAverageEarnEmplPeriodTable.PayPeriod       = dateNull();
                transLinkType = TransLink_RU::findSec(rPayAverageEarnEmplPeriodTable.TableId, rPayAverageEarnEmplPeriodTable.RecId).TransLinkType;
                if (transLinkType != TransLinkType_RU::Storno)
                    rPayAverageEarnEmplPeriodTable.CorrectedPeriod = dateNull();

                ttsbegin;

                delete_from rPayTrans
                    where rPayTrans.SourceTableId == rPayAverageEarnEmplPeriodTable.TableId &&
                          rPayTrans.SourceRecId   == rPayAverageEarnEmplPeriodTable.RecId;

                while select forupdate rPayEmplPeriodTrans
                    where rPayEmplPeriodTrans.AverageEarnEmplPeriodRecId == rPayAverageEarnEmplPeriodTable.RecId
                {
                    rPayEmplPeriodTrans.changeSourceEndDate(rPayAverageEarnEmplPeriodTable);

                    delete_from rPayTrans
                        where rPayTrans.SourceTableId == rPayEmplPeriodTrans.TableId &&
                              rPayTrans.SourceRecId   == rPayEmplPeriodTrans.RecId   &&
                              rPayTrans.PayPeriod     >= RPayParameters::payPeriod(rPayAverageEarnEmplPeriodTable.EmplId);

                    rPayEmplPeriodTrans.delete();
                }

                ttscommit;
            }
            else
            {
                ttsbegin;
                super();
                if (rPayAverageEarnEmplPeriodTable.FamilyRecId)
                {
                    this.disributeRestYearDays(dateStartYr(rPayAverageEarnEmplPeriodTable.StartDate), false);
                }
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAverageEarnTransDialog</Name>
				<Source><![CDATA[
    protected void initAverageEarnTransDialog()
    {
        super();

        averageEarnTransDialogFieldType.value(calcByPrevYears ? RPayAverageSourceType::PrevFund : RPayAverageSourceType::PaymentFund);
        averageEarnTransDialogFieldType.allowEdit(!calcByPrevYears);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPreviousAccident</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initFromPreviousAccident()
    {
        RPayAverageEarnParameters       rPayAverageEarnParameters = RPayAverageEarnParameters::find();
        RPayAverageEarnTrans            rPayAverageEarnTrans, previousTrans;
        RPayAverageEarnEmplPeriodTable  previousSicklist = rPayAverageEarnEmplPeriodTable.previousSickListAccident();

        if (previousSicklist)
        {
            while select previousTrans
                where previousTrans.AverageEarnEmplPeriodRecId == previousSicklist.RecId
            {
                rPayAverageEarnTrans.data(previousTrans);
                rPayAverageEarnTrans.AverageEarnEmplPeriodRecId = rPayAverageEarnEmplPeriodTable.RecId;
                rPayAverageEarnTrans.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPreviousSickList</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromPreviousSickList()
    {
        RPayAverageEarnEmplPeriodTable payAverageEarnEmplPeriodTable;
        RPaySickListId                 sickListId = rPayAverageEarnEmplPeriodTable.RpaySickListId;

        payAverageEarnEmplPeriodTable = rPayAverageEarnEmplPeriodTable.previousSickList();
        if (payAverageEarnEmplPeriodTable)
        {
            buf2Buf(payAverageEarnEmplPeriodTable,rPayAverageEarnEmplPeriodTable);
            rPayAverageEarnEmplPeriodTable.RpaySickListId    = sickListId;
            rPayAverageEarnEmplPeriodTable.PrevPaySickListId = payAverageEarnEmplPeriodTable.RpaySickListId;
            rPayAverageEarnEmplPeriodTable.StartDate         = payAverageEarnEmplPeriodTable.EndDate +1;
            rPayAverageEarnEmplPeriodTable.EndDate           = dateNull();
            rPayAverageEarnEmplPeriodTable.Included          = NoYes::No;
            rPayAverageEarnEmplPeriodTable.PayPeriod         = dateNull();
            rPayAverageEarnEmplPeriodTable.RecalcSickListId  = '';
            if (payAverageEarnEmplPeriodTable.mrotStartDate && payAverageEarnEmplPeriodTable.mrotEndDate == dateNull())
            {
                rPayAverageEarnEmplPeriodTable.mrotStartDate = rPayAverageEarnEmplPeriodTable.StartDate;
            }
            else
            {
                rPayAverageEarnEmplPeriodTable.mrotStartDate = dateNull();
            }
            rPayAverageEarnEmplPeriodTable.mrotEndDate   = dateNull();

            if (rPayAverageEarnEmplPeriodTable.mrotStartDate)
            {
                rPayAverageEarnEmplPeriodTable.LimitByMROT = NoYes::No;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRecalcSickList</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayAverageEarnEmplPeriodTable initFromRecalcSickList(RPayAverageEarnEmplPeriodTable _averageEarnEmplPeriodTable = null,
                                                                 ReportPeriod_RU                _recalcPeriod               = dateNull())
    {
        RPayAverageEarnEmplPeriodTable averageEarnEmplPeriodTable;
        int                            i;
        #define.slash('/')

        averageEarnEmplPeriodTable = _averageEarnEmplPeriodTable ? _averageEarnEmplPeriodTable : rPayAverageEarnEmplPeriodTable.recalcSickList();

        if (averageEarnEmplPeriodTable)
        {
            buf2Buf(averageEarnEmplPeriodTable, rPayAverageEarnEmplPeriodTable);

            rPayAverageEarnEmplPeriodTable.RecalcSickListId     = averageEarnEmplPeriodTable.RpaySickListId;
            rPayAverageEarnEmplPeriodTable.Included             = NoYes::No;
            rPayAverageEarnEmplPeriodTable.PayPeriod            = dateNull();

            rPayAverageEarnEmplPeriodTable.SickListRecalcNumber = averageEarnEmplPeriodTable.SickListRecalcNumber + 1;
            rPayAverageEarnEmplPeriodTable.RpaySickListId       = rPayAverageEarnEmplPeriodTable.RecalcSickListId;

            if (averageEarnEmplPeriodTable.SickListRecalcNumber)
            {
                i = strFind(rPayAverageEarnEmplPeriodTable.RpaySickListId, #slash, 1, strLen(rPayAverageEarnEmplPeriodTable.RpaySickListId));
                if (i)
                {
                    rPayAverageEarnEmplPeriodTable.RpaySickListId = subStr(rPayAverageEarnEmplPeriodTable.RpaySickListId, 1, i - 1);
                }
            }
            rPayAverageEarnEmplPeriodTable.RpaySickListId += #slash + int2str(rPayAverageEarnEmplPeriodTable.SickListRecalcNumber);

            rPayAverageEarnEmplPeriodTable.rPayAverageEarnCode = RPaySickIllParameters::find(rPayAverageEarnEmplPeriodTable.RpayIllType).AverageEarnCode;
            rPayAverageEarnEmplPeriodTable.initFromAverageEarnEmplTable();
        }
        else if (rPayAverageEarnEmplPeriodTable.SickListRecalcNumber)
        {
            rPayAverageEarnEmplPeriodTable.SickListRecalcNumber = 0;

            i = strFind(rPayAverageEarnEmplPeriodTable.RpaySickListId, #slash, 1, strLen(rPayAverageEarnEmplPeriodTable.RpaySickListId));
            if (i)
            {
                rPayAverageEarnEmplPeriodTable.RpaySickListId = '';
            }
        }

        rPayAverageEarnEmplPeriodTable.SickListRecalcPeriod = _recalcPeriod;

        if (_averageEarnEmplPeriodTable)
        {
            rPayAverageEarnEmplPeriodTable.insert();
        }

        return rPayAverageEarnEmplPeriodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPaymentFundTrans</Name>
				<Source><![CDATA[
    protected RPayAverageEarnTrans initPaymentFundTrans(ReportPeriod_RU _currentPeriod)
    {
        RPayAverageEarnTrans rPayAverageEarnTrans;
        RPayAmount           payAmount;
        RPayRateValue        increaseIncome;
        RPayDayHour          payDayHour;

        payAmount = RPayTrans::calculateFundBySourceDate(rPayAverageEarnEmplPeriodTable.ActuallyFund,
                                                         _currentPeriod,
                                                         emplTable.EmployeeId);
        if (! payAmount)
            return rPayAverageEarnTrans;

        if (rPayAverageEarnEmplPeriodTable.rPayDayHourCalc == RPayDayHourCalc::Day)
        {
            payDayHour = this.getPartCalendar(_currentPeriod);
        }
        else
        {
            payDayHour = RPayTblTrans::realDayHourGroup(_currentPeriod,
                                                         emplTable.EmployeeId,
                                                         rPayAverageEarnEmplPeriodTable.rPayDayHourCalc,
                                                         rPayAverageEarnEmplPeriodTable.ScheduleTimeGroupCode);
        }
        if (! payDayHour)
        {
            return rPayAverageEarnTrans;
        }

        ttsbegin;

        rPayAverageEarnTrans.clear();
        rPayAverageEarnTrans.PayPeriod                  = _currentPeriod;
        rPayAverageEarnTrans.AverageEarnEmplPeriodRecId = rPayAverageEarnEmplPeriodTable.RecId;
        rPayAverageEarnTrans.rPayAverageSourceType      = RPayAverageSourceType::PaymentFund;

        increaseIncome = RPayRateTable::find(rPayAverageEarnEmplPeriodTable.RiseFactor).
                                             getValue(RPayRateCallContext::construct(_currentPeriod,emplTable.EmployeeId,payAmount));

        if (increaseIncome)
        {
            payAmount = payAmount * increaseIncome;
        }

        rPayAverageEarnTrans.Amount  = payAmount;
        rPayAverageEarnTrans.rPayDayHour = payDayHour;
        rPayAverageEarnTrans.insert();
        ttscommit;

        return rPayAverageEarnTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPaymentFundTransRate</Name>
				<Source><![CDATA[
    protected void initPaymentFundTransRate(ReportPeriod_RU _currentPeriod)
    {
        super(_currentPeriod);
        isRateCalc = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPrevFundTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAverageEarnTrans initPrevFundTrans(ReportPeriod_RU _currentPeriod, int   _yrCalc )
    {
        RPayAverageEarnTrans    rPayAverageEarnTrans;
        RPayFundEmplSumTotal    rPayFundEmplSumTotal;

        select sum(Amount) from rPayFundEmplSumTotal
            where rPayFundEmplSumTotal.EmplId == emplTable.EmployeeId
            &&    rPayFundEmplSumTotal.Include
            &&    rPayFundEmplSumTotal.Yr == year(_currentPeriod);

        ttsbegin;

        rPayAverageEarnTrans.clear();
        rPayAverageEarnTrans.PayPeriod                  = _currentPeriod;
        rPayAverageEarnTrans.AverageEarnEmplPeriodRecId = rPayAverageEarnEmplPeriodTable.RecId;
        rPayAverageEarnTrans.rPayAverageSourceType      = RPayAverageSourceType::PrevFund;
        rPayAverageEarnTrans.Amount                     = rPayFundEmplSumTotal.Amount;
        rPayAverageEarnTrans.rPayDayHour                = #DaysInYear;
        rPayAverageEarnTrans.insert();
        ttscommit;

        return rPayAverageEarnTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapIllTypeRestriction</Name>
				<Source><![CDATA[
    #define.MaxRest(10000)
    #define.DaysRestriction('DaysRestriction')
    #define.DaysRestrictionSingle('DaysRestrictionSingle')
    #define.DaysRestrictionInYear('DaysRestrictionInYear')
    #define.DaysRestrictionBirthDate('DaysRestrictionBirthDate')
    #define.DaysRestrictionNewYear('DaysRestrictionNewYear')
    #define.DaysRestrictionSickEndDate('DaysRestrictionSickEndDate')
    #define.HonoraryDays('HonoraryDays')
    #define.DaysRestrictionInNewYear('DaysRestrictionInNewYear')
    private Map mapIllTypeRestriction()
    {
        TransDate                       employmentDate, tmpDate, birthDay;
        int                             yearCount, familyAge;
        RPayRateValue                   percentValue, daysRestrictionValue, daysRestrictionPercentValue;
        RPayRateValue                   percentValueFOT, percentValueFSS;
        int                             daysRestrictionBirthDate, i;
        boolean                         isHonoraryDays, endSickList, endYearRestriction, isDismissal, isPayableDays;
        RPaySickIllParameters           rPaySickIllParameters =  RPaySickIllParameters::find(rPayAverageEarnEmplPeriodTable.RpayIllType);
        Map                             mapIllTypeRestriction = new Map(Types::Integer,Types::Container);
        RHRMVirtualNetworkFamily        rhrmVirtualNetworkFamily;
        Days                            daysInYear, daysSingleAdd, daysNewYear, sickDaysInYear = conPeek(this.sickListInYear(), 1);
        TmpRPayAverageEarnRestriction   tmpRPayAverageEarnRestriction;
        Days                            daysAfterDismissal;
        RPayRateValue                   honoraryDays;

        Days getDaysRestriction(RPayRateCode _payRateCode,int _familyAge)
        {
            if (_payRateCode)
            {
                return any2int(round(RPayRateTable::find(_payRateCode).getValue(RPayRateCallContext::construct(rPayAverageEarnEmplPeriodTable.sickListStartDate(),
                                                                                rPayAverageEarnEmplPeriodTable.EmplId,
                                                                                _familyAge)),1));
            }
            else
            {
                return #MaxRest;
            }
        }

        void deleteRestrictions(Name _restrictionType)
        {
            int daysRestrictionLocal;
            ;
            select firstonly tmpRPayAverageEarnRestriction
                where tmpRPayAverageEarnRestriction.RestrictionType == _restrictionType;

            daysRestrictionLocal = tmpRPayAverageEarnRestriction.DaysCounter;

            if (daysRestrictionLocal)
            {
                delete_from tmpRPayAverageEarnRestriction
                    where tmpRPayAverageEarnRestriction.DaysCounter     >= daysRestrictionLocal &&
                          tmpRPayAverageEarnRestriction.RestrictionType != _restrictionType;
            }
        }

        int deleteFamilyAgeRestrictions(Name _restrictionType)
        {
            int daysRestrictionLocal;
            ;
            select firstonly tmpRPayAverageEarnRestriction
                where tmpRPayAverageEarnRestriction.RestrictionType == _restrictionType;

            daysRestrictionLocal = tmpRPayAverageEarnRestriction.DaysCounter;

            if (daysRestrictionLocal)
            {
                delete_from tmpRPayAverageEarnRestriction
                    where tmpRPayAverageEarnRestriction.DaysCounter     >= daysRestrictionLocal &&
                         (tmpRPayAverageEarnRestriction.RestrictionType == #DaysRestriction ||
                          tmpRPayAverageEarnRestriction.RestrictionType == #DaysRestrictionSingle ||
                          tmpRPayAverageEarnRestriction.RestrictionType == #DaysRestrictionInYear ||
                          tmpRPayAverageEarnRestriction.RestrictionType == #DaysRestrictionInNewYear);
            }

            return daysRestrictionLocal;
        }

        void insertNewAgeRestriction(Name _restrictionType, int _daysRestrictionNew)
        {
            ;
            tmpRPayAverageEarnRestriction.DaysCounter     = any2int(_daysRestrictionNew <= daysRestrictionValue ? daysRestrictionValue : _daysRestrictionNew);
            tmpRPayAverageEarnRestriction.RestrictionType = _restrictionType;
            tmpRPayAverageEarnRestriction.FamilyAge       = familyAge;
            tmpRPayAverageEarnRestriction.insert();
        }

        void insertRestrictionToMap(RPayRateValue _daysRestriction)
        {
            if (_daysRestriction - daysRestrictionValue > 0)
            {
                i++;

                if (endYearRestriction)
                {
                    percentValueFSS = 0;
                    percentValueFOT = 0;
                    isPayableDays   = rPayAverageEarnEmplPeriodTable.AddPaymFromPaymFund || isHonoraryDays;
                }
                else
                {
                    percentValueFSS = isHonoraryDays ? 0 : percentValue;
                    percentValueFOT = isHonoraryDays ? percentValue : (rPayAverageEarnEmplPeriodTable.AddPaymFromPaymFund ? percentValue : 0);
                    isPayableDays   = percentValueFSS || rPayAverageEarnEmplPeriodTable.AddPaymFromPaymFund || isHonoraryDays;
                }

                if (!isDismissal)
                {
                    mapIllTypeRestriction.insert(i,[_daysRestriction - daysRestrictionValue, percentValueFSS, percentValueFOT, isHonoraryDays, isPayableDays]);
                    daysRestrictionValue = _daysRestriction;
                }
            }
        }

        percentValue = #MaxPercentValue;
        checkSeniority = false;

        if (rPaySickIllParameters.ApplySeniorityRestriction &&
            RPayRateTable::find(rPaySickIllParameters.ApplySeniorityRestriction).getValue(RPayRateCallContext::construct(rPayAverageEarnEmplPeriodTable.sickListStartDate(),
                                                                                          rPayAverageEarnEmplPeriodTable.EmplId)) == NoYes::Yes)
        {
             employmentDate = str2Date(RPayParmEmplTrans::find(rPayAverageEarnEmplPeriodTable.EmplId,
                                                              rPpayAverageEarnParameters.SeniorityRate).Contents,123);

            if (employmentDate)
            {
                yearCount = rPayAverageEarnEmplPeriodTable.sickListStartDate() - employmentDate;
            }
            if (yearCount > 0)
            {
                yearCount = yearCount div #DaysInMonth;
            }

            percentValueLocal = RPayRateTable::find(rPaySickIllParameters.MinSeniorityRestriction).getValue(RPayRateCallContext::construct(rPayAverageEarnEmplPeriodTable.sickListStartDate(),
                                                                                                            rPayAverageEarnEmplPeriodTable.EmplId, max(yearCount, 0)));

            if (employmentDate)
            {
                yearCount = rPayAverageEarnEmplPeriodTable.sickListStartDate() - employmentDate;

                if (yearCount > 0)
                {
                    yearCount = (yearCount div #DaysInMonth) div #MonthsInYear;
                }
                else
                {
                    yearCount = 0;
                }
            }

            if (emplTable.PayResignedDate && emplTable.PayResignedDate < rPayAverageEarnEmplPeriodTable.sickListStartDate())
            {
                if (rPaySickIllParameters.DismissalSeniorityRestriction)
                {
                    daysAfterDismissal = rPayAverageEarnEmplPeriodTable.sickListStartDate() - emplTable.PayResignedDate;
                    percentValue = RPayRateTable::find(rPaySickIllParameters.DismissalSeniorityRestriction).getValue(RPayRateCallContext::construct(rPayAverageEarnEmplPeriodTable.sickListStartDate(),
                                                                                                                     rPayAverageEarnEmplPeriodTable.EmplId,
                                                                                                                     daysAfterDismissal));
                    checkSeniority = true;

                    if (percentValue == 0)
                    {
                        isDismissal = true;
                    }
                }
                else
                {
                    isDismissal = true;
                }
            }
            else
            {
                if (rPaySickIllParameters.SickRate)
                {
                    percentValue = RPayRateTable::find(rPaySickIllParameters.SickRate).getValue(RPayRateCallContext::construct(rPayAverageEarnEmplPeriodTable.sickListStartDate(),
                                                                                                rPayAverageEarnEmplPeriodTable.EmplId,
                                                                                                yearCount));
                    checkSeniority = true;
                }
            }
        }

        rhrmVirtualNetworkFamily = RHRMVirtualNetworkFamily::findByRecId(rPayAverageEarnEmplPeriodTable.FamilyRecId);

        if (rhrmVirtualNetworkFamily)
        {
            for (tmpDate = rhrmVirtualNetworkFamily.BirthDate ; tmpDate <= rPayAverageEarnEmplPeriodTable.sickListStartDate() ; tmpDate = nextYr(tmpDate))
            {
                familyAge++;
            }

            birthDay = mkDate(dayOfMth(rhrmVirtualNetworkFamily.BirthDate),mthOfYr(rhrmVirtualNetworkFamily.BirthDate), year(rPayAverageEarnEmplPeriodTable.sickListStartDate()));
            birthDay = birthDay > rPayAverageEarnEmplPeriodTable.sickListStartDate() ?
                                  birthDay :
                                  mkDate(dayOfMth(rhrmVirtualNetworkFamily.BirthDate),mthOfYr(rhrmVirtualNetworkFamily.BirthDate), year(rPayAverageEarnEmplPeriodTable.sickListStartDate()) + 1);

            daysRestrictionBirthDate =  birthDay - rPayAverageEarnEmplPeriodTable.sickListStartDate();
        }
        else
        {
            daysRestrictionBirthDate = #MaxRest;
        }

        insertNewAgeRestriction(#DaysRestriction,            getDaysRestriction(rPaySickIllParameters.DaysRestrictionRate, familyAge));
        insertNewAgeRestriction(#DaysRestrictionSingle,      getDaysRestriction(rPaySickIllParameters.DaysRestrictionSingleRate, familyAge));
        insertNewAgeRestriction(#DaysRestrictionInYear,      getDaysRestriction(rPaySickIllParameters.DaysRestrictionInYearRate, familyAge) - sickDaysInYear);
        insertNewAgeRestriction(#DaysRestrictionBirthDate,   daysRestrictionBirthDate);
        insertNewAgeRestriction(#DaysRestrictionNewYear,     dateEndYr(rPayAverageEarnEmplPeriodTable.sickListStartDate()) + 1 - rPayAverageEarnEmplPeriodTable.sickListStartDate());
        insertNewAgeRestriction(#DaysRestrictionSickEndDate, rPayAverageEarnEmplPeriodTable.EndDate - rPayAverageEarnEmplPeriodTable.sickListStartDate() + 1);

        select firstonly tmpRPayAverageEarnRestriction
            where tmpRPayAverageEarnRestriction.RestrictionType == #DaysRestrictionNewYear;

        daysNewYear = tmpRPayAverageEarnRestriction.DaysCounter;

        insertNewAgeRestriction(#DaysRestrictionInNewYear, daysNewYear + getDaysRestriction(rPaySickIllParameters.DaysRestrictionInYearRate, familyAge));

        select firstonly tmpRPayAverageEarnRestriction
            where tmpRPayAverageEarnRestriction.RestrictionType == #DaysRestrictionInYear;

        daysInYear    = tmpRPayAverageEarnRestriction.DaysCounter;
        daysSingleAdd = daysNewYear - daysInYear;

        select forupdate tmpRPayAverageEarnRestriction
            where tmpRPayAverageEarnRestriction.RestrictionType == #DaysRestrictionSingle;
        if (tmpRPayAverageEarnRestriction.DaysCounter > daysInYear)
        {
            tmpRPayAverageEarnRestriction.DaysCounter += daysSingleAdd >= 0 ? daysSingleAdd : 0;
            tmpRPayAverageEarnRestriction.update();
        }

        deleteRestrictions(#DaysRestrictionSickEndDate);
        deleteRestrictions(#DaysRestrictionSingle);

        daysRestrictionValue = deleteFamilyAgeRestrictions(#DaysRestrictionBirthDate);

        if (daysRestrictionValue)
        {
            familyAge++;

            insertNewAgeRestriction(#DaysRestriction,          getDaysRestriction(rPaySickIllParameters.DaysRestrictionRate,       familyAge));
            insertNewAgeRestriction(#DaysRestrictionSingle,    getDaysRestriction(rPaySickIllParameters.DaysRestrictionSingleRate, familyAge));
            insertNewAgeRestriction(#DaysRestrictionInYear,    getDaysRestriction(rPaySickIllParameters.DaysRestrictionInYearRate, familyAge) - sickDaysInYear);
            insertNewAgeRestriction(#DaysRestrictionInNewYear, daysNewYear + getDaysRestriction(rPaySickIllParameters.DaysRestrictionInYearRate, familyAge));

            select firstonly tmpRPayAverageEarnRestriction
                where tmpRPayAverageEarnRestriction.RestrictionType == #DaysRestrictionInYear;

            daysInYear    = tmpRPayAverageEarnRestriction.DaysCounter;
            daysSingleAdd = daysNewYear - daysInYear;

            select forupdate tmpRPayAverageEarnRestriction
                where tmpRPayAverageEarnRestriction.RestrictionType == #DaysRestrictionSingle;

            if (tmpRPayAverageEarnRestriction.DaysCounter > daysInYear)
            {
                tmpRPayAverageEarnRestriction.DaysCounter += daysSingleAdd >= 0 ? daysSingleAdd : 0;
                tmpRPayAverageEarnRestriction.update();
            }
        }

        delete_from tmpRPayAverageEarnRestriction
            where tmpRPayAverageEarnRestriction.RestrictionType == #DaysRestrictionInYear &&
                  tmpRPayAverageEarnRestriction.DaysCounter     >= daysNewYear;

        deleteRestrictions(#DaysRestrictionSickEndDate);
        deleteRestrictions(#DaysRestrictionSingle);

        daysRestrictionValue = 0;

        if (rPaySickIllParameters.HonoraryDaysRate)
        {
            honoraryDays = RPayRateTable::find(rPaySickIllParameters.HonoraryDaysRate).getValue(RPayRateCallContext::construct(rPayAverageEarnEmplPeriodTable.sickListStartDate()));
            if (honoraryDays)
            {
                insertNewAgeRestriction(#HonoraryDays, any2int(honoraryDays));
                isHonoraryDays = true;
            }
        }

        while select tmpRPayAverageEarnRestriction order by DaysCounter
        {
            switch (tmpRPayAverageEarnRestriction.RestrictionType)
            {
                case #DaysRestriction :
                    insertRestrictionToMap(tmpRPayAverageEarnRestriction.DaysCounter);
                    daysRestrictionPercentValue = getDaysRestriction(rPaySickIllParameters.PercentRate, tmpRPayAverageEarnRestriction.FamilyAge);
                    percentValue =  daysRestrictionPercentValue != maxInt() ? daysRestrictionPercentValue : percentValue;
                    break;

                case #DaysRestrictionSingle :
                    insertRestrictionToMap(tmpRPayAverageEarnRestriction.DaysCounter);
                    endSickList = true;
                    break;

                case #DaysRestrictionInYear :
                    insertRestrictionToMap(tmpRPayAverageEarnRestriction.DaysCounter);
                    endYearRestriction = true;
                    break;

                case #DaysRestrictionSickEndDate :
                    insertRestrictionToMap(tmpRPayAverageEarnRestriction.DaysCounter);
                    endSickList = true;
                    break;

                case #DaysRestrictionNewYear :
                    insertRestrictionToMap(tmpRPayAverageEarnRestriction.DaysCounter);
                    endYearRestriction = false;
                    break;

                case #DaysRestrictionInNewYear :
                    insertRestrictionToMap(tmpRPayAverageEarnRestriction.DaysCounter);
                    endYearRestriction = true;
                    break;

                case #HonoraryDays :
                    insertRestrictionToMap(tmpRPayAverageEarnRestriction.DaysCounter);
                    isHonoraryDays = false;
                    break;
            }

            if (endSickList)
            {
                break;
            }
        }

        i++;

        if (!isDismissal)
        {
            isPayableDays = rPayAverageEarnEmplPeriodTable.AddPaymFromPaymFund;
            mapIllTypeRestriction.insert(i,[maxInt(), 0, 0, 0, isPayableDays]);
        }

        return mapIllTypeRestriction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapSickListPeriodValue</Name>
				<Source><![CDATA[
    private Map mapSickListPeriodValue()
    {
        MapEnumerator           mapEnumerator = this.mapIllTypeRestriction().getEnumerator();
        Map                     mapSickListPeriodValue = new Map(Types::Container, Types::Container);
        Map                     mapIllTypeRestriction  = new Map(Types::Integer,   Types::Container);
        RPayRateValue           paymentFundPercent, otherFundPercent;
        ReportPeriod_RU         currentPeriod;
        RPayDayHour             daysRestriction,offset;
        RPayCalendarId          calendarId = '';
        TransDate               dateFrom,
                                dateTo,
                                dateOffset,
                                mrotStartDate,
                                mrotEndDate,
                                dateFromSrc,
                                dateToSrc;
        RPayDayHour             dayHour;
        boolean                 isHonoraryDays, isMROTCalculation;
        container               mrotViolationKeyStart;
        boolean                 isPayableDays;

        #localmacro.PeriodKey
            currentPeriod, dateFrom, dateTo
        #endmacro

        #localmacro.PeriodValue
            dayHour, otherFundPercent, paymentFundPercent, isHonoraryDays, isMROTCalculation, isPayableDays
        #endmacro

        RPayDayHour calcPayDayHour(TransDate _dateFrom,
                                   TransDate _dateTo)
        {
            RPayDayHour dayHourValue;
            ;
            if (rPayAverageEarnEmplPeriodTable.rPayDayHourCalc == RPayDayHourCalc::Day)
            {
               dayHourValue = _dateTo - _dateFrom + 1;
            }
            else
            {
                dayHourValue = RPayCalendarTable::periodWorkHoursGroup(calendarId,
                                                                       _dateFrom,
                                                                       _dateTo,
                                                                       rPayAverageEarnEmplPeriodTable.ScheduleTimeGroupCode);
            }
            return dayHourValue;
        }

        Map splitPeriodsByMROT()
        {
            Days            mrotViolationDaysQty;
            MapEnumerator   me;
            Map             mapByPeriods = cloneMap(mapSickListPeriodValue);

            mrotViolationDaysQty   = mrotEndDate - mrotStartDate + 1;
            me = mapSickListPeriodValue.getEnumerator();
            while (mrotViolationDaysQty > 0 && me.moveNext())
            {
                [#PeriodKey]   = me.currentKey();
                [#PeriodValue] = me.currentValue();

                dateFromSrc = dateFrom;
                dateToSrc   = dateTo;

                if (isMROTCalculation)
                {
                    continue;
                }
                else
                {
                    mapByPeriods.remove(me.currentKey());
                }

                if (dateFrom <= mrotStartDate && dateTo >= mrotStartDate)
                {
                    //left
                    dateFrom = dateFromSrc;
                    dateTo   = mrotStartDate - 1;
                    if (dateTo >= dateFrom)
                    {
                        dayHour = calcPayDayHour(dateFrom, dateTo);
                        mapByPeriods.insert([#PeriodKey], [#PeriodValue]);
                    }

                    //right
                    dateTo   = dateToSrc;
                    dateFrom = mrotEndDate + 1;
                    if (dateTo >= dateFrom)
                    {
                        dayHour = calcPayDayHour(dateFrom, dateTo);
                        mapByPeriods.insert([#PeriodKey], [#PeriodValue]);
                    }

                    //mrot
                    dateTo             = min (mrotEndDate, dateToSrc);
                    dateFrom           = mrotStartDate;
                    isMROTCalculation  = true;
                    otherFundPercent   = otherFundPercent ? 100 : otherFundPercent;
                    paymentFundPercent = paymentFundPercent ? 100 : paymentFundPercent;
                    dayHour            = calcPayDayHour(dateFrom, dateTo);
                    mapByPeriods.insert([#PeriodKey], [#PeriodValue]);

                    mrotViolationDaysQty = mrotViolationDaysQty - (dateTo - dateFrom + 1);
                    mrotStartDate = dateTo + 1;
                }
            }

            return mapByPeriods;
        }

        offset = rPayAverageEarnEmplPeriodTable.StartDate - rPayAverageEarnEmplPeriodTable.sickListStartDate();

        mrotEndDate   = rPayAverageEarnEmplPeriodTable.mrotEndDate();
        mrotStartDate = rPayAverageEarnEmplPeriodTable.mrotStartDate;

        wholePeriod = KeySum::construct(1, 2);

        while (mapEnumerator.moveNext())
        {
            [daysRestriction,otherFundPercent,paymentFundPercent, isHonoraryDays, isPayableDays] = mapEnumerator.currentValue();
            if (daysRestriction > offset)
            {
                mapIllTypeRestriction.insert(mapEnumerator.currentKey(),[daysRestriction - offset,otherFundPercent,paymentFundPercent, isHonoraryDays, isPayableDays] );
                offset = 0;
            }
            else
            {
                offset -= daysRestriction;
            }
        }

        for (currentPeriod = endmth(rPayAverageEarnEmplPeriodTable.StartDate); currentPeriod <= endmth(rPayAverageEarnEmplPeriodTable.EndDate); currentPeriod = endmth(nextMth(currentPeriod)))
        {
            calendarId   = RPayEmplTblSum::payCalendarId(emplTable.EmployeeId,currentPeriod);
            if (calendarId)
            {
                dateFrom      = mkDate(1,mthOfYr(currentPeriod),year(currentPeriod));
                dateFrom      = dateFrom > rPayAverageEarnEmplPeriodTable.StartDate ? dateFrom : rPayAverageEarnEmplPeriodTable.StartDate;
                dateTo        = currentPeriod > rPayAverageEarnEmplPeriodTable.EndDate ? rPayAverageEarnEmplPeriodTable.EndDate : currentPeriod;
                offset        = dateTo - dateFrom + 1;
                mapEnumerator = mapIllTypeRestriction.getEnumerator();

                while (offset && mapEnumerator.moveNext())
                {
                    [daysRestriction,otherFundPercent,paymentFundPercent, isHonoraryDays, isPayableDays] = mapEnumerator.currentValue();

                    if (daysRestriction)
                    {
                        if (wholePeriod.key2Index_W(currentPeriod) == 0)
                        {
                            wholePeriod.updateNow(currentPeriod, [currentPeriod - dateStartMth(currentPeriod) + 1, 0]);
                        }

                        if (daysRestriction > offset)
                        {
                            dayHour = calcPayDayHour(dateFrom,dateTo);
                            mapIllTypeRestriction.insert(mapEnumerator.currentKey(),[daysRestriction - offset,otherFundPercent,paymentFundPercent, isHonoraryDays, isPayableDays]);

                            if (dateFrom <= mrotStartDate && dateTo >= mrotStartDate)
                            {
                                mrotViolationKeyStart  = [currentPeriod,dateFrom,dateTo];
                            }

                            mapSickListPeriodValue.insert([#PeriodKey],[#PeriodValue]);
                            wholePeriod.updateNow(currentPeriod, [-1 * (dateTo - dateFrom + 1), dayHour]);
                            break;
                        }
                        else
                        {
                            dayHour = calcPayDayHour(dateFrom,dateFrom + daysRestriction - 1);
                            mapIllTypeRestriction.insert(mapEnumerator.currentKey(),[0,otherFundPercent,paymentFundPercent, isHonoraryDays, isPayableDays]);
                            dateOffset = dateFrom + daysRestriction - 1;

                            if (dateFrom <= rPayAverageEarnEmplPeriodTable.mrotStartDate && dateOffset >= rPayAverageEarnEmplPeriodTable.mrotStartDate)
                            {
                                mrotViolationKeyStart = [currentPeriod,dateFrom,dateFrom + daysRestriction - 1];
                            }

                            mapSickListPeriodValue.insert([currentPeriod,dateFrom,dateFrom + daysRestriction - 1],[#PeriodValue]);
                            wholePeriod.updateNow(currentPeriod, [-1 * daysRestriction, dayHour]);
                            dateFrom = dateFrom + daysRestriction;
                            offset -= daysRestriction;
                        }
                    }
                }
            }
        }

        if (mrotViolationKeyStart)
        {
            mapSickListPeriodValue = splitPeriodsByMROT();
        }

        return mapSickListPeriodValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcByPrevYears</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    boolean parmCalcByPrevYears(boolean _calcByPrevYears = calcByPrevYears)
    {
        calcByPrevYears = _calcByPrevYears;
        return calcByPrevYears;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodicRecalc</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmPeriodicRecalc(boolean _periodicRecalc = periodicRecalc)
    {
        periodicRecalc = _periodicRecalc;
        return periodicRecalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rPayAverageEarnEmplPeriodTable</Name>
				<Source><![CDATA[
    public RPayAverageEarnEmplPeriodTable rPayAverageEarnEmplPeriodTable(RPayAverageEarnEmplPeriodTable _rPayAverageEarnEmplPeriodTable = _rPayAverageEarnEmplPeriodTable)
    {
        calcByPrevYears = false;

        rPayAverageEarnEmplPeriodTable = super(_rPayAverageEarnEmplPeriodTable);

        if (_rPayAverageEarnEmplPeriodTable.RecId != 0 &&
            !rPayAverageEarnEmplPeriodTable.PrevPaySickListId &&
            RPayRateTable::find(rPayAverageEarnEmplPeriodTable.CalcByFund).getValue(
                RPayRateCallContext::construct(rPayAverageEarnEmplPeriodTable.StartDate, rPayAverageEarnEmplPeriodTable.EmplId)) > 0)
        {
            calcByPrevYears = true;
        }
        else
        {
            calcByPrevYears = rPayAverageEarnEmplPeriodTable.CalcByPrevYears;
        }

        if (formController)
        {
            formController.parmCalcByPrevYears(calcByPrevYears);
        }

        return rPayAverageEarnEmplPeriodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupPayAverageSourceType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setupPayAverageSourceType(FormComboBoxControl _payAverageSourceTypeControl)
    {
        DictEnum dictEnum = new DictEnum(enumNum(RPayAverageSourceType));
        str      text;
        int      i;

        i = dictEnum.values();
        _payAverageSourceTypeControl.items(dictEnum.values());

        while (i)
        {
            _payAverageSourceTypeControl.item(i);
            switch (i-1)
            {
                case RPayAverageSourceType::OtherFund:
                    text = "@RUP2123";
                    break;
                default :
                    text = dictEnum.value2Name(i-1);
                    break;
            }
            _payAverageSourceTypeControl.text(text);
            i--;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sickListInYear</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    container sickListInYear(TransDate _transDate = rPayAverageEarnEmplPeriodTable.sickListStartDate())
    {
        Days                            daysInYearRestriction, usedSickListDaysAfterDate;
        RPayAverageEarnEmplPeriodTable  payAverageEarnEmplPeriodTableLocal;
        TransLink_RU                    transLink;
        RPayAverageEarnValue            payAverageEarnValue, payAverageEarnValueOver;
        RPayRateCode                    codeSrc = RPaySickIllParameters::find(rPayAverageEarnEmplPeriodTable.RpayIllType).DaysRestrictionInYearRate;
        RPayRateCode                    codeCurrent;

        while select PayDayHour from payAverageEarnValue
            where payAverageEarnValue.StartDate <= dateEndYr(_transDate) &&
                  payAverageEarnValue.EndDate   >= dateStartYr(_transDate)
        join RpayIllType, Included, StartDate from payAverageEarnEmplPeriodTableLocal
            where payAverageEarnEmplPeriodTableLocal.RecId       == payAverageEarnValue.AverageEarnEmplPeriodRecid &&
                  payAverageEarnEmplPeriodTableLocal.EmplId      == rPayAverageEarnEmplPeriodTable.EmplId          &&
                  payAverageEarnEmplPeriodTableLocal.RpayIllType != RPayIllType::ChildVacation                     &&
                  payAverageEarnEmplPeriodTableLocal.FamilyRecId == rPayAverageEarnEmplPeriodTable.FamilyRecId     &&
                  payAverageEarnEmplPeriodTableLocal.RecId       != rPayAverageEarnEmplPeriodTable.RecId
        notexists join payAverageEarnValueOver
            where payAverageEarnValueOver.AverageEarnEmplPeriodRecid == payAverageEarnValue.AverageEarnEmplPeriodRecid &&
                  payAverageEarnValueOver.RecId                      != payAverageEarnValue.RecId                      &&
                  payAverageEarnValueOver.PayAverageSourceType       == RPayAverageSourceType::OtherFund               &&
                  payAverageEarnValueOver.StartDate                  == payAverageEarnValue.StartDate                  &&
                  payAverageEarnValueOver.EndDate                    == payAverageEarnValue.EndDate
            #transLinkNotExistsReversed_RU(transLink, payAverageEarnEmplPeriodTableLocal)
        {
            if (codeSrc)
            {
                codeCurrent = RPaySickIllParameters::find(payAverageEarnEmplPeriodTableLocal.RpayIllType).DaysRestrictionInYearRate;
                if (codeCurrent != codeSrc)
                {
                    continue;
                }
            }

            if (payAverageEarnEmplPeriodTableLocal.Included ||
                payAverageEarnValue.EndDate < _transDate)
            {
                daysInYearRestriction += payAverageEarnValue.PayDayHour;

                if (payAverageEarnEmplPeriodTableLocal.StartDate > rPayAverageEarnEmplPeriodTable.StartDate)
                {
                    usedSickListDaysAfterDate += payAverageEarnValue.PayDayHour;
                }
            }
        }

        return [daysInYearRestriction, usedSickListDaysAfterDate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAverageEarnTrans_Fact</Name>
				<Source><![CDATA[
    private void updateAverageEarnTrans_Fact()
    {
        RPayAverageEarnTrans rPayAverageEarnTrans;
        ReportPeriod_RU      currentPeriod;
        RPayCalendarId       calendarId;

        if ( ! this.check())
        {
            return;
        }

        ttsbegin;

        delete_from rPayAverageEarnTrans
            where rPayAverageEarnTrans.AverageEarnEmplPeriodRecId == rPayAverageEarnEmplPeriodTable.RecId;

        for (currentPeriod = endmth(rPayAverageEarnEmplPeriodTable.StartDate); currentPeriod <= endmth(rPayAverageEarnEmplPeriodTable.EndDate); currentPeriod = endmth(nextMth(currentPeriod)))
        {
            rPayAverageEarnTrans.clear();
            rPayAverageEarnTrans.AverageEarnEmplPeriodRecId = rPayAverageEarnEmplPeriodTable.RecId;
            rPayAverageEarnTrans.PayPeriod = currentPeriod;
            rPayAverageEarnTrans.Amount = RPayRateTable::find(rPpayAverageEarnParameters.RateOfSalary)
                                            .getValue(RPayRateCallContext::construct(currentPeriod,rPayAverageEarnEmplPeriodTable.EmplId));
            calendarId   = RPayEmplTblSum::payCalendarId(emplTable.EmployeeId,currentPeriod);
            if (calendarId)
            {
                if (rPayAverageEarnEmplPeriodTable.rPayDayHourCalc == RPayDayHourCalc::Day)
                {
                    rPayAverageEarnTrans.rPayDayHour = RPayCalendarTable::mthWorkDaysTimeGroup(calendarId,
                                                                                               currentPeriod,
                                                                                               rPayAverageEarnEmplPeriodTable.ScheduleTimeGroupCode);
                }
                else
                {
                    rPayAverageEarnTrans.rPayDayHour = RPayCalendarTable::mthWorkHoursTimeGroup(calendarId,
                                                                                                currentPeriod,
                                                                                                rPayAverageEarnEmplPeriodTable.ScheduleTimeGroupCode);
                }
            }
            rPayAverageEarnTrans.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAverageEarnTrans_MinimumFact</Name>
				<Source><![CDATA[
    private void updateAverageEarnTrans_MinimumFact()
    {
        RPayAverageEarnTrans    rPayAverageEarnTrans;
        RPaySickIllParameters   rPaySickIllParameters = RPaySickIllParameters::find(rPayAverageEarnEmplPeriodTable.RpayIllType);
        int                     i;
        int                     yrCalc = real2int(RPayRateTable::find(rPayAverageEarnEmplPeriodTable.CalcByFund).getValue(RPayRateCallContext::construct(max(rPayAverageEarnEmplPeriodTable.StartDate, #LawChangeDate2), rPayAverageEarnEmplPeriodTable.EmplId)));
        RPayRateValue           mrot = RPayRateTable::find(rPpayAverageEarnParameters.RateOfMinSalary).getValue(RPayRateCallContext::construct(rPayAverageEarnEmplPeriodTable.StartDate,rPayAverageEarnEmplPeriodTable.EmplId));
        TransDate               currDate = max(rPayAverageEarnEmplPeriodTable.StartDate, #LawChangeDate2);

        if ( ! this.check())
        {
            return;
        }

        ttsbegin;

        delete_from rPayAverageEarnTrans
            where rPayAverageEarnTrans.AverageEarnEmplPeriodRecId == rPayAverageEarnEmplPeriodTable.RecId;

        if (mrot <= 0)
        {
            ttscommit;
            checkfailed("@RUP3191");
            return;
        }
        for (i = 1; i <= yrCalc; i++)
        {
            rPayAverageEarnTrans.clear();
            rPayAverageEarnTrans.AverageEarnEmplPeriodRecId = rPayAverageEarnEmplPeriodTable.RecId;
            rPayAverageEarnTrans.RPayAverageSourceType      = RPayAverageSourceType::PrevFund;
            rPayAverageEarnTrans.PayPeriod                  = mkdate(31,12, year(currDate) - i);
            rPayAverageEarnTrans.Amount                     = mrot * #MonthsInYear;
            rPayAverageEarnTrans.RPayDayHour                = #DaysInYear;
            rPayAverageEarnTrans.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAverageEarnTrans_Previous</Name>
				<Source><![CDATA[
    private void updateAverageEarnTrans_Previous()
    {
        RPayAverageEarnTrans           rPayAverageEarnTrans;
        RecordInsertList               averageEarnTransList = new RecordInsertList(tableNum(RPayAverageEarnTrans));
        RPayAverageEarnEmplPeriodTable previousAverageEarnEmplPeriodTable = rPayAverageEarnEmplPeriodTable.previousSickList(true); // PS56412 Fix08

        if ( ! this.check())
        {
            return;
        }

        ttsbegin;

        if (rPayAverageEarnEmplPeriodTable.PrevPaySickListId != previousAverageEarnEmplPeriodTable.RpaySickListId)
        {
            rPayAverageEarnEmplPeriodTable.PrevPaySickListId = previousAverageEarnEmplPeriodTable.RpaySickListId;
            rPayAverageEarnEmplPeriodTable.update();
        }

        delete_from rPayAverageEarnTrans
            where rPayAverageEarnTrans.AverageEarnEmplPeriodRecId == rPayAverageEarnEmplPeriodTable.RecId;

        while select rPayAverageEarnTrans
            where rPayAverageEarnTrans.AverageEarnEmplPeriodRecId == previousAverageEarnEmplPeriodTable.RecId
        {
            rPayAverageEarnTrans.AverageEarnEmplPeriodRecId = rPayAverageEarnEmplPeriodTable.RecId;
            averageEarnTransList.add(rPayAverageEarnTrans);
        }

        averageEarnTransList.insertDatabase();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAverageEarnTrans_PreviousYears</Name>
				<Source><![CDATA[
    private void updateAverageEarnTrans_PreviousYears()
    {
        RPayAverageEarnTrans    rPayAverageEarnTrans;

        if (rPayAverageEarnEmplPeriodTable.PrevPaySickListId)
        {
            this.updateAverageEarnTrans_Previous();
            return;
        }

        if (!this.check())
        {
            return;
        }

        delete_from rPayAverageEarnTrans
            where rPayAverageEarnTrans.AverageEarnEmplPeriodRecId == rPayAverageEarnEmplPeriodTable.RecId;

        this.createTransForPrevYears();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAverageEarnValue</Name>
				<Source><![CDATA[
    public void updateAverageEarnValue()
    {
        ReportPeriod_RU currentPeriod;
        RPayRateValue   paymentFundPercent, otherFundPercent;
        MapEnumerator   mapEnumerator = this.mapSickListPeriodValue().getEnumerator();
        StartDate       startDate;
        EndDate         endDate;
        RPayAmount      otherFundAverageAmount;
        RPayAmount      paymentFundAverageAmount;
        RPayAmount      amount;
        RPayAmount      lawAmount, lawAmountPrecise, avgMROTAmount;
        RPayAverageEarnEmplPeriodTable  averageEarnEmplPeriodTableSource;
        RPayAverageEarnValue            averageEarnValueSource;
        RPayAverageEarnTrans            averageEarnTransPeriod;
        RPayAverageEarnTable            rPayAverageEarnTable;
        RPayDayHour     dayHourValue, wholeDayHourValue;
        int             periodValue;
        boolean         isHonoraryDays, isMROTCalculation, isPayableDays;
        RPayAverageEarnValue rPayAverageEarnValue;

        void initRPayAverageEarnValue()
        {
            rPayAverageEarnValue.clear();
            rPayAverageEarnValue.AverageEarnEmplPeriodRecid = rPayAverageEarnEmplPeriodTable.RecId;
            rPayAverageEarnValue.PayPeriod                  = currentPeriod;
            rPayAverageEarnValue.PayDayHour                 = dayHourValue;
            rPayAverageEarnValue.StartDate                  = startDate;
            rPayAverageEarnValue.EndDate                    = endDate;
            rPayAverageEarnValue.IsSourceLine               = NoYes::No;
        }

        rPayAverageEarnTable = RPayAverageEarnTable::find(rPayAverageEarnEmplPeriodTable.rPayAverageEarnCode);

        if (dayOfMth(rPayAverageEarnEmplPeriodTable.StartDate) == 1
            && rPayAverageEarnEmplPeriodTable.EndDate >= endmth(rPayAverageEarnEmplPeriodTable.StartDate))
        {
            select count(RecId) from averageEarnTransPeriod
                where averageEarnTransPeriod.AverageEarnEmplPeriodRecId == rPayAverageEarnEmplPeriodTable.RecId &&
                      averageEarnTransPeriod.PayPeriod                  != endmth(rPayAverageEarnEmplPeriodTable.StartDate);

            isRateCalc = averageEarnTransPeriod.RecId == 0;
        }

        ttsbegin;

        calcByMROT  = false;

        delete_from rPayAverageEarnValue
            where rPayAverageEarnValue.AverageEarnEmplPeriodRecid == rPayAverageEarnEmplPeriodTable.RecId;

        if (rPayAverageEarnEmplPeriodTable.RecalcSickListId)
        {
            averageEarnEmplPeriodTableSource = rPayAverageEarnEmplPeriodTable.recalcSickList();
        }
        else if (rPayAverageEarnEmplPeriodTable.PrevPaySickListId            &&
                ((rPayAverageEarnEmplPeriodTable.StartDate <  #LawChangeDate &&
                 rPayAverageEarnEmplPeriodTable.EndDate    >= #LawChangeDate &&
                 this.parmPeriodicRecalc()) ||
                 !this.parmPeriodicRecalc()))
        {
            averageEarnEmplPeriodTableSource = rPayAverageEarnEmplPeriodTable.previousSickList();
        }

        while (mapEnumerator.moveNext())
        {
            [ currentPeriod, startDate, endDate ]                 = mapEnumerator.currentKey();
            [ dayHourValue, otherFundPercent, paymentFundPercent, isHonoraryDays, isMROTCalculation, isPayableDays] = mapEnumerator.currentValue();

            fullPctMROT = false;
            [periodValue, wholeDayHourValue] = wholePeriod.index2Data(wholePeriod.key2Index_W(currentPeriod));
            usePrecisionAmount = isRateCalc && (periodValue <= 0);

            if (currentPeriod >= #LawChangeDate)
            {
                avgCurrentPeriod   = isRateCalc && rPayAverageEarnTable.AverageRateRevaluation && periodValue <= 0;
                usePrecisionAmount = usePrecisionAmount && rPayAverageEarnTable.AverageRateRevaluation;
            }
            else
            {
                avgCurrentPeriod = isRateCalc && periodValue <= 0;
            }

            if (rPayAverageEarnEmplPeriodTable.RecalcSickListId                                                                 && // Ð¿ÐµÑ€ÐµÑ€Ð°ÑÑ‡ÐµÑ‚ Ð‘Ð›
                startDate                               <  dateStartMth(rPayAverageEarnEmplPeriodTable.SickListRecalcPeriod)    &&
                rPayAverageEarnEmplPeriodTable.EndDate  >= dateStartMth(rPayAverageEarnEmplPeriodTable.SickListRecalcPeriod))
            {
                while select averageEarnValueSource
                    where averageEarnValueSource.AverageEarnEmplPeriodRecid == averageEarnEmplPeriodTableSource.RecId
                       && averageEarnValueSource.StartDate                  == startDate
                {
                    rPayAverageEarnValue.data(averageEarnValueSource);
                    rPayAverageEarnValue.AverageEarnEmplPeriodRecid = rPayAverageEarnEmplPeriodTable.RecId;
                    rPayAverageEarnValue.PayPeriod                  = currentPeriod;
                    rPayAverageEarnValue.IsSourceLine               = NoYes::Yes;
                    rPayAverageEarnValue.insert();
                }
            }
            else
            {
                //calculate amounts:
                if (rPayAverageEarnEmplPeriodTable.PrevPaySickListId          &&  // continious Sick list
                    averageEarnEmplPeriodTableSource)
                {
                    // Average amount from perviously Sick list
                    [otherFundAverageAmount, paymentFundAverageAmount] = this.calcFundAverageRate(currentPeriod,
                                                                                                  otherFundPercent,
                                                                                                  paymentFundPercent,
                                                                                                  averageEarnEmplPeriodTableSource,
                                                                                                  periodValue <= 0,
                                                                                                  wholeDayHourValue,
                                                                                                  isHonoraryDays,
                                                                                                  isMROTCalculation,
                                                                                                  isPayableDays);
                }
                else
                {
                    [otherFundAverageAmount, paymentFundAverageAmount, lawAmount, lawAmountPrecise] = this.calcFundAverageRate(currentPeriod,
                                                                                                                               otherFundPercent,
                                                                                                                               paymentFundPercent,
                                                                                                                               null,
                                                                                                                               periodValue <= 0,
                                                                                                                               wholeDayHourValue,
                                                                                                                               isHonoraryDays,
                                                                                                                               isMROTCalculation,
                                                                                                                               isPayableDays);
                }// calculate amounts

                //other Fund;
                amount = CurrencyExchangeHelper::amount(otherFundAverageAmount * dayHourValue);
                if (amount > 0)
                {
                    if (isMROTCalculation && avgMROTAmount == 0)
                    {
                        avgMROTAmount = otherFundAverageAmount;
                    }

                    usePrecisionAmount = usePrecisionAmount && (otherFundDifference > 0);
                    initRPayAverageEarnValue();
                    rPayAverageEarnValue.SickListPercentage     = fullPctMROT ? 100 : otherFundPercent;
                    rPayAverageEarnValue.AverageRate            = otherFundAverageAmount;
                    rPayAverageEarnValue.Amount                 = usePrecisionAmount ? CurrencyExchangeHelper::amount(otherFundDifference * dayHourValue) : amount;
                    rPayAverageEarnValue.PayAverageSourceType   = RPayAverageSourceType::OtherFund;

                    if (checkSeniority)
                    {
                        this.checkPrevAccidentSeniority(rPayAverageEarnValue.SickListPercentage);
                    }

                    rPayAverageEarnValue.insert();
                } //other Fund

                //payment Fund
                amount = CurrencyExchangeHelper::amount(paymentFundAverageAmount * dayHourValue);
                if (amount > 0)
                {
                    if (isMROTCalculation && avgMROTAmount == 0)
                    {
                        avgMROTAmount = paymentFundAverageAmount;
                    }

                    usePrecisionAmount = usePrecisionAmount && (payFundDifference > 0);
                    initRPayAverageEarnValue();
                    rPayAverageEarnValue.SickListPercentage     = fullPctMROT ? 100 : paymentFundPercent;
                    rPayAverageEarnValue.AverageRate            = paymentFundAverageAmount;
                    rPayAverageEarnValue.Amount                 = usePrecisionAmount ? CurrencyExchangeHelper::amount(payFundDifference * dayHourValue) : amount;
                    rPayAverageEarnValue.PayAverageSourceType   = RPayAverageSourceType::PaymentFund;
                    rPayAverageEarnValue.SickWageType           = isHonoraryDays ? RPaySickWageType::DayLimit : RPaySickWageType::AvgLimit;
                    rPayAverageEarnValue.insert();

                    if (lawAmount > 0 && isHonoraryDays)
                    {
                        if (isMROTCalculation && avgMROTAmount == 0)
                        {
                            avgMROTAmount = lawAmount;
                        }

                        initRPayAverageEarnValue();
                        rPayAverageEarnValue.SickListPercentage         = fullPctMROT ? 100 : paymentFundPercent;
                        rPayAverageEarnValue.AverageRate                = lawAmount;
                        rPayAverageEarnValue.Amount                     = CurrencyExchangeHelper::amount(usePrecisionAmount ? lawAmountPrecise : lawAmount * dayHourValue);
                        rPayAverageEarnValue.PayAverageSourceType       = RPayAverageSourceType::PaymentFund;
                        rPayAverageEarnValue.SickWageType               = RPaySickWageType::AvgLimit;
                        rPayAverageEarnValue.insert();
                    }
                } // payment Fund
            }
        }

        rPayAverageEarnEmplPeriodTable.mrotAmountAe = avgMROTAmount;
        rPayAverageEarnEmplPeriodTable.CalcByMROT   = calcByMROT;
        rPayAverageEarnEmplPeriodTable.doUpdate();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAverageEarnValueRecalc</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateAverageEarnValueRecalc()
    {
        RPayFundEmplSumTotal    rPayFundEmplSumTotal;
        RPaySickIllParameters   rPaySickIllParameters = RPaySickIllParameters::find(rPayAverageEarnEmplPeriodTable.RpayIllType);
        RPayRateValue           percentValue;
        RPayRateValue           checkDateStart  = RPayRateTable::find(rPayAverageEarnEmplPeriodTable.CalcByFund).getValue(RPayRateCallContext::construct(rPayAverageEarnEmplPeriodTable.StartDate));
        RPayRateValue           checkDateEnd    = RPayRateTable::find(rPayAverageEarnEmplPeriodTable.CalcByFund).getValue(RPayRateCallContext::construct(rPayAverageEarnEmplPeriodTable.EndDate));
        int                     i;
        int                     yrCalc = real2int(RPayRateTable::find(rPayAverageEarnEmplPeriodTable.CalcByFund).getValue(RPayRateCallContext::construct(RPayParameters::payPeriod(), rPayAverageEarnEmplPeriodTable.EmplId)));
        Amount                  amount, tmpAmount;
        RecordInsertList        recordInsertList = new RecordInsertList(tableNum(RPayAverageEarnValue));
        container               con;
        RPayAverageEarnValue    rPayAverageEarnValue;

        if (yrCalc &&
            checkDateStart == 0     &&
            checkDateEnd > 0       &&
            RPayRateTable::find(rPayAverageEarnEmplPeriodTable.CalcByFund).getValue(RPayRateCallContext::construct(RPayParameters::payPeriod())) > 0)
        {
            for (i = 1; i <= yrCalc; i++)
            {
                select sum(Amount) from rPayFundEmplSumTotal
                    where rPayFundEmplSumTotal.EmplId == rPayAverageEarnEmplPeriodTable.EmplId
                    &&    rPayFundEmplSumTotal.Include
                    &&    rPayFundEmplSumTotal.Yr == year(rPayAverageEarnEmplPeriodTable.StartDate) - i + 1;

                tmpAmount = RPayRateTable::find(RPaySickIllParameters::find(rPayAverageEarnEmplPeriodTable.RpayIllType).SumYrRestriction).getValue(RPayRateCallContext::construct(mkDate(1,1,year(rPayAverageEarnEmplPeriodTable.StartDate) - i + 1)));
                if (tmpAmount > 0 &&
                    rPaySickIllParameters.ApplySumRestriction &&
                    RPayRateTable::find(rPaySickIllParameters.ApplySumRestriction).getValue(RPayRateCallContext::construct(rPayAverageEarnEmplPeriodTable.StartDate,
                                                                                rPayAverageEarnEmplPeriodTable.EmplId)) == NoYes::Yes)
                    amount += min(rPayFundEmplSumTotal.Amount, tmpAmount);
                else
                amount += rPayFundEmplSumTotal.Amount;
            }
            amount = amount / (yrCalc* #DaysInYear);

            con = this.calcAverageAmountTotal();

            if (amount > conPeek(con, 1))
            {
                percentValue = #MaxPercentValue;

                while select rPayAverageEarnValue
                    where rPayAverageEarnValue.AverageEarnEmplPeriodRecid == rPayAverageEarnEmplPeriodTable.RecId
                    &&    rPayAverageEarnValue.PayPeriod >= dateStartYr(rPayAverageEarnEmplPeriodTable.EndDate)
                {
                    con = this.calcAverageAmountTotal();
                    rPayAverageEarnValue.AverageRate                = (amount - conPeek(con, 1)) * rPayAverageEarnValue.SickListPercentage / 100;
                    rPayAverageEarnValue.Amount                     = rPayAverageEarnValue.AverageRate * rPayAverageEarnValue.PayDayHour;
                    rPayAverageEarnValue.SickWageType               = RPaySickWageType::Recalc;
                    recordInsertList.add(rPayAverageEarnValue);
                }
                recordInsertList.insertDatabase();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNumberOfWorkedMonths</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateNumberOfWorkedMonths(StartDate _startDate, EndDate _endDate)
    {
        ttsbegin;

        if (rPayAverageEarnEmplPeriodTable.RecId)
        {
            rPayAverageEarnEmplPeriodTable.selectForUpdate(true);
            rPayAverageEarnEmplPeriodTable.NumOfWorkedMonths = RPaySicklistPrevPeriod::numberOfWorkingMonths(rPayAverageEarnEmplPeriodTable.EmplId, _startDate, _endDate);
            rPayAverageEarnEmplPeriodTable.update();
        }

        ttscommit;

        formController.refreshDatasources();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSickListValue</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateSickListValue()
    {
        RPayAmount averageAmount;
        RPayAverageEarnValue rPayAverageEarnValueOrig;
        RPayAverageEarnValue rPayAverageEarnValue;
        if (formController.isRPayAverageEarnValueDsExists())
        {
            rPayAverageEarnValue     = formController.getRPayAverageEarnValueCursor();
            rPayAverageEarnValueOrig = rPayAverageEarnValue.orig();

            if (rPayAverageEarnValueOrig.AverageRate)
            {
                averageAmount = CurrencyExchangeHelper::amount(rPayAverageEarnValueOrig.AverageRate / rPayAverageEarnValueOrig.SickListPercentage * rPayAverageEarnValue.SickListPercentage);
            }
            else
            {
                averageAmount = rPayAverageEarnValue.AverageRate;
                if (! averageAmount && rPayAverageEarnValue.SickListPercentage)
                {
                    averageAmount = conPeek(this.calcFundAverageRate(rPayAverageEarnValue.PayPeriod,rPayAverageEarnValue.SickListPercentage,rPayAverageEarnValue.SickListPercentage),
                                                                     rPayAverageEarnValue.PayAverageSourceType == RPayAverageSourceType::OtherFund ? 1 :2);
                }
            }

            rPayAverageEarnValue.AverageRate = averageAmount;
            rPayAverageEarnValue.Amount      = CurrencyExchangeHelper::amount(rPayAverageEarnValue.AverageRate * rPayAverageEarnValue.PayDayHour);
            formController.researchRPayAverageEarValue();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>