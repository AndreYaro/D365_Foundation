<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesInvoiceJournalPostProj</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DocumentStatusFactoryAttribute(DocumentStatus::ProjectInvoice)]
class SalesInvoiceJournalPostProj extends SalesInvoiceJournalPost
{
    ProjProposalItem projProposalItem;
    ProjInvoiceItem projInvoiceItem;
    LineNum parmLineNum;
    boolean deleteFullyInvoiced;
    ProjAdjustRefId projAdjustRefId;
    RefRecId sourceDocumentHeaderRecId;
    RefRecId sourceDocumentLineRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTaxParentReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the tax parent reference to <c>ProjInvoiceItem</c>.
    /// </summary>
    /// <param name = "_ledgerVoucherTransObject"><c>LedgerVoucherTransObject</c>.</param>
    protected void addTaxParentReference(LedgerVoucherTransObject _ledgerVoucherTransObject)
    {
        _ledgerVoucherTransObject.parmTaxParentReferenceTableId(projInvoiceItem.TableId);
        _ledgerVoucherTransObject.parmTaxParentReferenceRecId(projInvoiceItem.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToInventReportDimHistory</Name>
				<Source><![CDATA[
    protected void addToInventReportDimHistory(Common _custInvoiceTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPostEndDisc</Name>
				<Source><![CDATA[
    protected boolean canPostEndDisc()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPostRoundOff</Name>
				<Source><![CDATA[
    protected boolean canPostRoundOff()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPostTax</Name>
				<Source><![CDATA[
    protected boolean canPostTax()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSkipPostProjSalesLine</Name>
				<Source><![CDATA[
    private boolean canSkipPostProjSalesLine()
    {
        // when we post invoice for sales order transactions for fixed price project contract line
        // we have to skip postings and do not post anything related to revenue, since sales order is complimentary
        // for fixed price project contract line all revenue should come from milestone transactions
        boolean ret = (salesLine.ProjId && ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled()
            && ProjMultipleContractLinesForProjectFeatureHelper::hasFixedPriceBillingForItemTransactions(salesLine.ProjId));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSkipPostMarkupOnTrans</Name>
				<Source><![CDATA[
    private boolean canSkipPostMarkupOnTrans()
    {
        return this.canSkipPostProjSalesLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSkipPostLineDiscount</Name>
				<Source><![CDATA[
    protected boolean canSkipPostLineDiscount()
    {
        boolean ret = this.canSkipPostProjSalesLine() || super();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscPercent</Name>
				<Source><![CDATA[
    protected DiscPct cashDiscPercent()
    {
        return salesTable.CashDiscPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBeforePostingLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs validation before posting a line.
    /// </summary>
    protected void checkBeforePostingLine()
    {
        if (salesParmLine.RemainBefore != (salesLine.RemainSalesFinancial + salesLine.RemainSalesPhysical))
        {
            throw error("@SYS23025");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInvoiceIssueDueDate_W</Name>
				<Source><![CDATA[
    protected boolean checkInvoiceIssueDueDate_W()
    {
        CustPackingSlipJour custPackingSlipJour;
        CustPackingSlipTrans custPackingSlipTrans;
        ProjInvoiceItem projInvoiceItemLocal;
        SalesParameters salesParameters = SalesParameters::find();
        DateControlType_W invoiceDateControlType = this.creditNote() ? salesParameters.CreditNoteInvoiceDateControlType_W : salesParameters.InvoiceDateControlType_W;
        DateControlType_W documentDateControlType = this.creditNote() ? salesParameters.CreditNoteDocumentDateControlType_W : salesParameters.DocumentDateControlType_W;
        boolean ret = true;

        if (invoiceDateControlType == DateControlType_W::None && documentDateControlType == DateControlType_W::None)
        {
            return ret;
        }

        while select PackingSlipId, InvoiceIssueDueDate_W from custPackingSlipJour
            group by PackingSlipId, InvoiceIssueDueDate_W
                where custPackingSlipJour.InvoiceIssueDueDate_W
            exists join custPackingSlipTrans
                where custPackingSlipTrans.SalesId == custPackingSlipJour.SalesId
                   && custPackingSlipTrans.PackingSlipId == custPackingSlipJour.PackingSlipId
                   && custPackingSlipTrans.DeliveryDate == custPackingSlipJour.DeliveryDate
                   && custPackingSlipTrans.Qty != 0
            exists join projInvoiceItemLocal
                where projInvoiceItemLocal.InventTransId == custPackingSlipTrans.InventTransId
                   && projInvoiceItemLocal.ProjInvoiceId == projProposalJour.ProjInvoiceId
                   && projInvoiceItemLocal.InvoiceDate == projProposalJour.InvoiceDate
        {
            if (invoiceDateControlType)
            {
                ret = ret && this.checkDateControl_W(custPackingSlipJour, projProposalJour.InvoiceDate, invoiceDateControlType, "@SYS57610");
            }

            if (documentDateControlType)
            {
                ProjInvoiceJour projInvoiceJour = ProjInvoiceJour::find(projProposalJour.ProjInvoiceId,projProposalJour.InvoiceDate);
                ret = ret && this.checkDateControl_W(custPackingSlipJour, projInvoiceJour.DocumentDate_W, documentDateControlType, fieldPName(ProjInvoiceParmTable, DocumentDate_W));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesBook_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if sales book is open.
    /// </summary>
    /// <returns>
    ///     true if sales book is open; otherwise, false.
    /// </returns>
    protected boolean checkSalesBook_RU()
    {
        if (CustParameters::taxation_RU(projProposalJour.InvoiceDate) == CustTaxation_RU::OnDelivery)
        {
            return SalesBookTable_RU::canProcessDate(projProposalJour.InvoiceDate);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNotStockedPostCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a <c>TradeNotStockedPostCheck</c> object that is used to verify order lines during
    /// posting.
    /// </summary>
    /// <returns>
    /// A <c>TradeNotStockedPostCheck</c> object that is used to verify order lines during posting.
    /// </returns>
    /// <remarks>
    /// This method can return null if no verification is performed.
    /// </remarks>
    protected TradeNotStockedPostCheck createNotStockedPostCheck()
    {
        return TradeNotStockedPostCheck::newSalesLine(salesLine, projProposalItem.DeliverNow, salesParmLine.RemainAfter, salesParmLine.RemainBefore);
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the journal is a credit note journal
    /// </summary>
    /// <returns>
    /// <c>NoYes::Yes</c> if the journal amount is less than 0; otherwise, <c>NoYes::No</c>
    /// </returns>
    protected NoYes creditNote()
    {
        if (this.totalAmount() < 0)
        {
            return NoYes::Yes;
        }

        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    protected DimensionDefault defaultDimension()
    {
        return projInvoiceItem.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFullyInvoiced</Name>
				<Source><![CDATA[
    protected void deleteFullyInvoiced()
    {
        if (this.parmDeleteFullyInvoiced())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    DocumentStatus documentStatus()
    {
        return DocumentStatus::ProjectInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endPostLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ends the posting of one journal line.
    /// </summary>
    protected void endPostLine()
    {
        projInvoiceItem.updateCommission(ledgerVoucher, projProposalJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedEuroTriangulation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the fixed euro triangulation value.
    /// </summary>
    /// <returns>
    /// The fixed euro triangulation value.
    /// </returns>
    protected UnknownNoYes fixedEuroTriangulation()
    {
        if (ProjInvoiceCurrency::exist(projProposalJour.ProjInvoiceProjId,projProposalJour.CurrencyId))
        {
            return UnknownNoYes::No;
        }

        return UnknownNoYes::Unknown;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedExchRate</Name>
				<Source><![CDATA[
    public CustExchRate fixedExchRate()
    {
        if (ProjInvoiceCurrency::exist(projProposalJour.ProjInvoiceProjId,projProposalJour.CurrencyId) && !projProposalJour.exchRate)
        {
            return ProjInvoiceCurrency::find(projProposalJour.ProjInvoiceProjId,projProposalJour.CurrencyId).ExchRate;
        }
        else if (projProposalJour.exchRate)
        {
            return projProposalJour.exchRate;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedExchRateSecondary</Name>
				<Source><![CDATA[
    public ExchrateSecondary fixedExchRateSecondary()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigSalesId</Name>
				<Source><![CDATA[
    protected SalesIdOrig getOrigSalesId(ListEnumerator _le)
    {
        SalesParmLine localSalesParmLine = _le.current();
        return localSalesParmLine.OrigSalesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesLine</Name>
				<Source><![CDATA[
    protected SalesLine getSalesLine(ListEnumerator _le)
    {
        SalesParmLine localSalesParmLine = _le.current();
        return localSalesParmLine.salesLine(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a voucher number.
    /// </summary>
    /// <returns>
    /// A voucher number.
    /// </returns>
    protected Voucher getVoucher()
    {
        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRelatedLineTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the records related to the current journal line.
    /// </summary>
    protected void initRelatedLineTables()
    {
        salesLine = salesParmLine.salesLine(true);

        salesPurchLine = salesLine;
        inventTable = salesLine.inventTable();

        setPrefix(#PreFixField(salesLine, SalesId));

        projProposalItem = ProjProposalItem::findInvent(salesLine.InventTransId,projProposalJour.ProposalId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTotals</Name>
				<Source><![CDATA[
    protected void initTotals()
    {
        salesTable = salesParmTable.salesTable();

        salesTotals = SalesTotals::construct(salesParmTable, any2Enum(this.parmSpecQty()), this.parmSumBy(), salesParmTable.ParmId, this.parmSumOrderId(), this.documentStatus());
        salesTotals.prepareTotalAmountCalculation();
        salesTotals.prepareQuantitiesCalculation();
        this.tax(salesTotals.tax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransactionTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the transaction text.
    /// </summary>
    /// <param name="_ledgerTransTxt">
    /// The type of the ledger transaction.
    /// </param>
    /// <returns>
    /// The transaction text that is based on the <c>projpropoaljour</c> values.
    /// </returns>
    protected TransactionTxt initTransactionTxt(LedgerTransTxt _ledgerTransTxt)
    {
        transactionTxt = TransactionTxt::construct();

        _ledgerTransTxt = this.creditNote() ? LedgerTransTxt::ProjectCreditNoteLedger : LedgerTransTxt::ProjectInvoiceLedger;

        transactionTxt.setType(_ledgerTransTxt);
        transactionTxt.setLanguage(projProposalJour.LanguageId);
        transactionTxt.setVoucher(projProposalJour.LedgerVoucher);
        transactionTxt.setFormLetter(projProposalJour.ProjInvoiceId);
        transactionTxt.setKey1(projProposalJour.ProjInvoiceProjId);
        transactionTxt.setKey2(projProposalJour.InvoiceAccount);
        transactionTxt.setKey3(CustTable::groupId(projProposalJour.InvoiceAccount));
        transactionTxt.setCustVendName(projProposalJour.DeliveryName);        
        
        return transactionTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromFormLetterContract</Name>
				<Source><![CDATA[
    protected void initFromFormLetterContract(SalesFormLetterContract _formletterContract)
    {
        SalesFormLetterInvoiceProjectContract invoiceProjectContract = _formletterContract as SalesFormLetterInvoiceProjectContract;
        this.parmDeleteFullyInvoiced(invoiceProjectContract.parmDeleteFullyInvoiced());
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCreditInvoicingJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts <c>CustVendCreditInvoicingJour</c> record based on project invoice from sales order.
    /// </summary>
    /// <param name = "_salesTable"><c>SalesTable</c> buffer.</param>
    protected void insertCreditInvoicingJour(SalesTable _salesTable)
    {
        CustVendCreditInvoicingJour custVendCreditInvoicingJour;
        if (CustVendCreditInvoicingTable::useCreditInvoicingReporting())
        {
            if (_salesTable)
            {
                CustVendCreditInvoicingTable custVendCreditInvoicingTable = CustVendCreditInvoicingTable::findRefId(_salesTable.TableId, _salesTable.RecId, true);

                if (custVendCreditInvoicingTable)
                {
                    ProjInvoiceJour projInvoiceJour = ProjInvoiceJour::find(projInvoiceItem.ProjInvoiceId, projInvoiceItem.InvoiceDate);

                    if (!CustVendCreditInvoicingJour::exist(projInvoiceJour.TableId, projInvoiceJour.RecId))
                    {
                        custVendCreditInvoicingJour.insertFromCustVendCreditInvoicingTable(custVendCreditInvoicingTable, projInvoiceJour);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCreditInvoicingTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the <c>CustVendCreditInvoicingTrans</c> table.
    /// </summary>
    /// <param name="_sourceLine">
    /// The source line record.
    /// </param>
    protected void insertCreditInvoicingTrans(Common _sourceLine)
    {
        if (CustVendCreditInvoicingTable::useCreditInvoicingReporting())
        {
            if (_sourceLine.RecId)
            {
                CustVendCreditInvoicingLine custVendCreditInvoicingLine = CustVendCreditInvoicingLine::findRefId(_sourceLine.TableId, _sourceLine.RecId, true);
                if (custVendCreditInvoicingLine)
                {
                    CustVendCreditInvoicingTrans custVendCreditInvoicingTrans;
                    custVendCreditInvoicingTrans.insertFromCustVendCreditInvoicingLine(custVendCreditInvoicingLine, projInvoiceItem);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the invoice number that the inventory transaction would be attached to.
    /// </summary>
    /// <returns>
    /// The invoice number that the inventory transaction would be attached to.
    /// </returns>
    protected InvoiceId invoiceNum()
    {
        return projProposalItem.projProposalJour().ProjInvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEInvoice_MX</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the electronic invoice information.
    /// </summary>
    /// <param name="_numberSeq">
    /// The <c>numberSeq</c> object that is related to this invoice.
    /// </param>
    protected void insertEInvoice_MX(NumberSeq _numberSeq)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLine</Name>
				<Source><![CDATA[
    protected Common journalLine(Common _journalLine = salesParmLine )
    {
        salesParmLine = _journalLine as SalesParmLine;
        journalLines.addEnd(salesParmLine);

        return salesParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID for the journal line table.
    /// </summary>
    /// <returns>
    /// A table ID.
    /// </returns>
    protected TableId journalLineTableId()
    {
        return tableNum(SalesParmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerRefRecid</Name>
				<Source><![CDATA[
    RecId ledgerRefRecid()
    {
        return projProposalItem.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerRefTableId</Name>
				<Source><![CDATA[
    protected TableId ledgerRefTableId()
    {
        return projProposalItem.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateInventory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the inventory ledger must be updated.
    /// </summary>
    /// <param name="_inventMovement" >An <c>InventMovement</c> object.</param>
    /// <returns>true if the inventory ledger must be updated; otherwise, false.</returns>
    protected boolean mustUpdateInventory(InventMovement _inventMovement)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeleteFullyInvoiced</Name>
				<Source><![CDATA[
    public boolean parmDeleteFullyInvoiced(boolean _deleteFullyInvoiced = deleteFullyInvoiced)
    {
        deleteFullyInvoiced = _deleteFullyInvoiced;
        return deleteFullyInvoiced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTable</Name>
				<Source><![CDATA[
    public Common parmJournalTable(Common _journalTable = salesParmTable)
    {
        salesParmTable = _journalTable as SalesParmTable;
        return salesParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable</Name>
				<Source><![CDATA[
    public Common parmParmTable(Common _parmTable = salesParmTable)
    {
        salesParmTable = _parmTable as SalesParmTable;
        return salesParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCustVend</Name>
				<Source><![CDATA[
    protected void postCustVend() // project creates it's own customer transaction
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts a journal line.
    /// </summary>
    protected void postLine()
    {
        LedgerVoucherTransObject ledgerVoucherTransObject;
        AmountCur revenueAmount;
        Amount tmpLineValue;
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        InventProfileType_RU inventProfileType;
        boolean postExcise = SalesParameters::find().PostExciseInLedger_PL;
        AmountCur exciseValue;
        TaxCode exciseTaxCode;

        if (this.canSkipPostProjSalesLine())
        {
            return;
        }


        if (TaxParameters::checkTaxParameters_IN() && FormulaDesigner_IN::isPriceInclTaxOnLineAmount(salesLine.TaxItemGroup))
        {
            lineValue = lineValue - Tax::getpriceInclTaxAmount_IN(tableNum(SalesLine), salesLine.RecId, salesLine.TaxItemGroup, this.tax().tmpTaxWorkTrans(), this.tax().tmpTaxCalc_IN());
        }

        LedgerVoucherObject ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();

        CurrencyExchangeHelper exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), ledgerVoucherObject.parmAccountingDate());
        exchangeRateHelper.parmExchangeRate1(this.fixedExchRate());
        exchangeRateHelper.parmExchangeRate2(this.fixedExchRateSecondary());

        LedgerDimensionAccount ledgerDimensionMerged = LedgerDimensionFacade::serviceCreateLedgerDimension(formletterProvider.ledgerDimensionLineAmount(), this.defaultDimension());

        if (countryRegion_RU && TaxParameters::find().TaxSpecPosting_RU == NoYes::Yes)
        {
            tmpLineValue = this.tmpLineValue_RU() * -1.0;
        }

        if (this.includeDiscValueInRevenue())
        {
            revenueAmount = lineValue + discValue;
        }
        else
        {
            discValue = 0;
            revenueAmount = lineValue;
        }

        if (BrazilParameters::isEnabled())
        {
            revenueAmount = this.setRevenueAmount_BR(revenueAmount);
        }

        if (postExcise)
        {
            [exciseValue, exciseTaxCode] = this.calcExcise_PL();
            revenueAmount -= exciseValue;
        }

        if (countryRegion_RU)
        {
            revenueAmount += tmpLineValue;
            inventProfileType = this.inventProfileType_RU();
        }

        if (!countryRegion_RU ||
            (salesParmTable.InvoicePostingType_RU != SalesInvoicePostingType_RU::GoodsInRoute
                && inventProfileType != InventProfileType_RU::CommissionPrincipalAgent
                && inventProfileType != InventProfileType_RU::Bailee))
        {
            // If deductions haven't been posted yet
            if (!ledgerVoucher.parmIsAdvanceDeducted())
            {
                // Checks and posts negative entry for customer advance based on IsPreBill condition
                PSAProjProposalProj psaProjProposalProj;
                select firstonly ProjProposalId, InvoicedNow from psaProjProposalProj
                    where psaProjProposalProj.ProjProposalId == projProposalItem.ProposalId
                        && psaProjProposalProj.ProjId == salesLine.ProjId
                        && psaProjProposalProj.IsPreBill == NoYes::Yes;

                if (psaProjProposalProj.InvoicedNow)
                {
                    ProjProposalOnAcc projProposalOnAccBill;
                    ProjOnAccTransSale projOnAccTransSale;
                    ProjOnAccTrans projOnAccTrans;

                    // Executes for each deduction record.
                    while select LedgerTransdate, Amount from projOnAccTransSale
                        exists join projOnAccTrans
                        where projOnAccTrans.TransId == projOnAccTransSale.TransId
                        && projOnAccTrans.PSAIsOnAccount == NoYes::Yes
                        exists join projProposalOnAccBill
                        where projProposalOnAccBill.TransId == projOnAccTransSale.TransId
                        && projProposalOnAccBill.ProposalId == psaProjProposalProj.ProjProposalId
                    {
                        revenueAmount += projOnAccTransSale.Amount;

                        CurrencyExchangeHelper exchangeRateHelperPreBill = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), projOnAccTransSale.LedgerTransdate);

                        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                        ledgerVoucherObject,
                                        this.postingSales(),
                                        ledgerDimensionMerged,
                                        this.currencyCode(),
                                        projOnAccTransSale.Amount,
                                        exchangeRateHelperPreBill);

                        ledgerVoucherTransObject.parmTaxParentReferenceTableId(projInvoiceItem.TableId);
                        ledgerVoucherTransObject.parmTaxParentReferenceRecId(projInvoiceItem.RecId);
                        ledgerVoucherTransObject.parmProjLedger(this.projLedger());
                        ledgerVoucher.addTrans(ledgerVoucherTransObject);
                        ledgerVoucher.parmIsAdvanceDeducted(true);
                    }
                }
            }

            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                        ledgerVoucherObject,
                                        this.postingSales(),
                                        ledgerDimensionMerged,
                                        this.currencyCode(),
                                        -revenueAmount,
                                        exchangeRateHelper);

            ledgerVoucherTransObject.parmTaxParentReferenceTableId(projInvoiceItem.TableId);
            ledgerVoucherTransObject.parmTaxParentReferenceRecId(projInvoiceItem.RecId);
            ledgerVoucherTransObject.parmProjLedger(this.projLedger());
            ledgerVoucher.addTrans(ledgerVoucherTransObject);

            if (ledgerVoucherObject.ledgerBondClient_RU() && this.lineDiscountAmount() && formletterProvider.lineDiscountLedgerDimension())
            {
                LedgerBondClient_RU ledgerBondClient = ledgerVoucherObject.ledgerBondClient_RU();

                ledgerBondClient.bondVRef2VRef( ledgerBondClient.findVRefByPostingType(formletterProvider.postingTypeLineDiscount()), ledgerBondClient.lastVrefId());
            }
        }// </GEERU>

        if (postExcise && exciseValue)
        {
            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                ledgerVoucherObject,
                this.postingSales(),
                LedgerDimensionFacade::serviceCreateLedgerDimension(TaxLedgerAccountGroup::accountLedgerDimension(exciseTaxCode, TaxDirection::OutgoingTax), custInvoiceTrans.DefaultDimension),
                this.currencyCode(),
                -exciseValue,
                exchangeRateHelper);

            ledgerVoucherTransObject.parmTaxParentReferenceTableId(projInvoiceItem.TableId);
            ledgerVoucherTransObject.parmTaxParentReferenceRecId(projInvoiceItem.RecId);
            ledgerVoucherTransObject.parmProjLedger(this.projLedger());
            ledgerVoucher.addTrans(ledgerVoucherTransObject);
        }

        if (BrazilParameters::isEnabled())
        {
            this.postPostLine_BR();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postPostLine_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the line to the inventory journal lines.
    /// </summary>
    protected void postPostLine_BR()
    {
        CustLedgerAccounts::summaryLedgerDimension(salesTable.InvoiceAccount, custInvoiceJour.PostingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupOnJour</Name>
				<Source><![CDATA[
    protected void postMarkupOnJour(Common _source)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupOnTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts markup for the journal lines.
    /// </summary>
    protected void postMarkupOnTrans()
    {
        if (this.canSkipPostMarkupOnTrans())
        {
            return;
        }

        markup.postInvoice(updateNow, lineValue, salesLine, ledgerVoucher, salesLine.DefaultDimension, projInvoiceItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postNotStocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs posting routines for not stocked sales order lines.
    /// </summary>
    protected void postNotStocked()
    {
        InventMovement inventMov_Sales = InventMovement::construct(salesLine);

        // Clear committed cost when sales invoice is posted with non-stock items.
        if (inventMov_Sales.projId()
            && inventMov_Sales.mustBeCostControlled()
            && inventMov_Sales.canCommittedCostBeReversed())
        {
            CostControlPostingItem costControlPostingItem = CostControlPosting::newCostControlPostingItem(inventMov_Sales);
            costControlPostingItem.parmLedgerVoucher(ledgerVoucher);
            costControlPostingItem.run(ProjCommittedCostUpdateAction::Delete);
        }
        
        projAdjustRefId = NumberSeq::newGetNum(CompanyInfo::numRefParmId()).num();
        this.writeProjTrans(projAdjustRefId, inventMov_Sales.parmMustNotReduceForecast());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaxOnProforma</Name>
				<Source><![CDATA[
    protected boolean postTaxOnProforma()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projLedger</Name>
				<Source><![CDATA[
    protected ProjLedger projLedger(ItemId _itemId = '')
    {
        if (salesLine.isStocked())
        {
            return ProjLedger::newInventSales(salesLine.ProjId,
                                              salesLine.ProjCategoryId,
                                              salesLine.ActivityNumber,
                                              salesLine.InventTransId,
                                              custInvoiceJour.InvoiceId,
                                              inventMovement.projAdjustRefId(),
                                              inventMovement.projTransactionOrigin(),
                                              inventMovement.projLedgerOrigin(),
                                              salesLine.ItemId,
                                              ProjFundingSource::fundingSourceForSalesOrder(ProjTable::find( salesLine.ProjId).ProjInvoiceProjId));
        }
        else
        {
            return ProjLedger::newInventSales(salesLine.ProjId,
                                              salesLine.ProjCategoryId,
                                              salesLine.ActivityNumber,
                                              salesLine.InventTransId,
                                              custInvoiceJour.InvoiceId,
                                              projAdjustRefId,
                                              ProjOrigin::SalesOrder,
                                              ProjOrigin::SalesOrder,
                                              salesLine.ItemId,
                                              ProjFundingSource::fundingSourceForSalesOrder(ProjTable::find( salesLine.ProjId).ProjInvoiceProjId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesInvoicePostNotStocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>SalesInvoicePostNotStocked</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>SalesInvoicePostNotStocked</c> class.
    /// </returns>
    protected SalesInvoicePostNotStocked salesInvoicePostNotStocked()
    {
        ProjInvoiceJour projInvoiceJour = ProjInvoiceJour::find(projProposalJour.ProjInvoiceId, projProposalJour.InvoiceDate);

        return SalesInvoicePostNotStockedProj::construct(projProposalItem,
                                                            salesLine,
                                                            salesParmLine,
                                                            recordInsertListCustInvoicePackingSlipMatch,
                                                            projInvoiceJour.SourceDocumentHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectFormletterJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects a journal line.
    /// </summary>
    protected void selectFormletterJournalTrans()
    {
        select forupdate formletterJournalTrans
            where formletterJournalTrans.JournalId == formletterJournal.JournalId
                && formletterJournalTrans.OrderId == formletterJournal.OrderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNotStockedVariables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>SalesInvoiceJournalPost</c> variables to the <c>SalesInvoicePostNotStocked</c> values.
    /// </summary>
    /// <param name="_salesInvoicePostNotStocked">
    /// An instance of the <c>SalesInvoicePostNotStocked</c> class.
    /// </param>
    protected void setNotStockedVariables(SalesInvoicePostNotStocked _salesInvoicePostNotStocked)
    {
        super(_salesInvoicePostNotStocked);

        SalesInvoicePostNotStockedProj salesInvoicePostNotStockedProj = _salesInvoicePostNotStocked;
        sourceDocumentHeaderRecId = salesInvoicePostNotStockedProj.parmSourceDocumentHeaderRecId();
        sourceDocumentLineRecId = salesInvoicePostNotStockedProj.parmSourceDocumentLineRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDocumentLine</Name>
				<Source><![CDATA[
    protected RefRecId sourceDocumentLine()
    {
        SourceDocumentHeader sourceDocumentHeader;

        if (!sourceDocumentLineRecId)
        {
            if (!sourceDocumentHeaderRecId)
            {
                sourceDocumentHeader = SourceDocumentHeader::insertSourceDocument(
                                                                tableNum(ProjInvoiceJour),
                                                                enumStr(SourceDocument_ProjectInvoice),
                                                                SourceDocument_ProjectInvoice::ProjectInvoice);

                sourceDocumentHeaderRecId = sourceDocumentHeader.RecId;
            }

            SourceDocumentLine sourceDocumentLine = SourceDocumentLine::insertSourceDocumentLine(
                                                                           sourceDocumentHeaderRecId,
                                                                           tableNum(ProjInvoiceItem),
                                                                           enumStr(SourceDocumentLine_ProjectInvoice),
                                                                           SourceDocumentLine_ProjectInvoice::ProjectItemInvoiceLine,
                                                                           DateTimeUtil::date(
                                                                               DateTimeUtil::applyTimeZoneOffset(
                                                                                   sourceDocumentHeader.CreatedDateTime,
                                                                                   DateTimeUtil::getUserPreferredTimeZone())));

            sourceDocumentLineRecId = sourceDocumentLine.RecId;
        }

        return sourceDocumentLineRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAdvanceInvoiceSettlement_W</Name>
				<Source><![CDATA[
    protected void updateAdvanceInvoiceSettlement_W()
    {
        SalesFormLetterContract contract = this.parmChainFormletterContract();
        AdvanceInvoiceSettlement_W advanceInvoiceSettlement = AdvanceInvoiceSettlement_W::newUnpack(tableNum(ProjInvoiceJour),
            SysOperationHelper::base64Decode(contract.parmAdvanceInvoiceSettlementPacked()));

        if (!this.isProforma() && !this.isOnHold() && advanceInvoiceSettlement)
        {
            ProjInvoiceJour projInvoiceJour = ProjInvoiceJour::find(projInvoiceItem.ProjInvoiceId, projInvoiceItem.InvoiceDate);
            advanceInvoiceSettlement.settleNowCommon(projInvoiceJour);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCommission</Name>
				<Source><![CDATA[
    protected void updateCommission()
    {
        projInvoiceItem.updateCommission(ledgerVoucher, projProposalJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
    protected TransDate updateDate()
    {
        return salesParmTable.Transdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the inventory ledger.
    /// </summary>
    /// <param name="_inventMovement">
    /// An <c>InventMovement</c> object.
    /// </param>
    protected void updateInventory(InventMovement _inventMovement)
    {
        ProjInvoiceJour projInvoiceJour = ProjInvoiceJour::find(projProposalJour.ProjInvoiceId, projProposalJour.InvoiceDate);
        sourceDocumentHeaderRecId = projInvoiceJour.SourceDocumentHeader;
        sourceDocumentLineRecId = 0;

        if (this.mustUpdateInventory(_inventMovement))
        {
            super(_inventMovement);
        }

        this.writeProjTrans(_inventMovement.projAdjustRefId(), _inventMovement.parmMustNotReduceForecast());
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the journal line.
    /// </summary>
    protected void updateJournalLine()
    {
        if (sourceDocumentHeaderRecId)
        {
            ProjInvoiceJour projInvoiceJour = ProjInvoiceJour::find(projProposalJour.ProjInvoiceId, projProposalJour.InvoiceDate, true);
            if (!projInvoiceJour.SourceDocumentHeader)
            {
                projInvoiceJour.SourceDocumentHeader = sourceDocumentHeaderRecId;
                projInvoiceJour.doUpdate();
            }
        }

        if (projInvoiceItem.RecId)
        {
            projInvoiceItem.SourceDocumentLine = sourceDocumentLineRecId;
            projInvoiceItem.QtyPhysical = invoiceUpdatedOnly;
            projInvoiceItem.doUpdate();
        }

        this.insertCreditInvoicingTrans(salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the journal header.
    /// </summary>
    protected void updateJournalTable()
    {
        this.insertCreditInvoicingJour(salesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeProjTrans</Name>
				<Source><![CDATA[
    protected void writeProjTrans(ProjAdjustRefId _projAdjustRefId, NoYes _mustNotReduceForecast)
    {
        ProjProposalItemDetail queryProjProposalItemDetail;
        ProjItemTransSale tmpProjItemTransSale;
        ProjPost projPost = this.initProjPost(_projAdjustRefId, _mustNotReduceForecast);

        projPost.parmDoNotUpdateBudget(true);

        projPost.postTrans();

        ProjProposalItem queryProjProposalItem = ProjProposalItem::findRecId(projProposalItem.RecId);
        ProjItemTrans queryProjItemTrans = ProjItemTrans::find(queryProjProposalItem.ProjTransId);

        while select queryProjProposalItemDetail
            where queryProjProposalItemDetail.ProposalRefRecId == projProposalItem.RecId
        {
            if(ProjBudgetUpdateBudgetForSalesOrderCreditNoteFlight::instance().isEnabled())
            {
                select firstonly tmpProjItemTransSale
                where tmpProjItemTransSale.RecId == queryProjProposalItemDetail.SaleRefRecId;
            }

            ProjPost::newCreateProjTransItemSale(
                    queryProjProposalItem,
                    queryProjProposalItemDetail,
                    queryProjItemTrans,
                    tmpProjItemTransSale,
                    ledgerVoucher,
                    _projAdjustRefId,
                    NoYes::Yes).postTrans();
        }

        projPost.parmFundingSourceList(ProjPost::createSplitList(ProjFundingSource::fundingSourceForSalesOrder(ProjTable::find(queryProjProposalItem.projId()).ProjInvoiceProjId)));
        ProjPost::postItemReverseTransaction(projPost);

        projInvoiceItem = ProjInvoiceItem::findTransId(ProjProposalItem::findInvent(queryProjProposalItem.InventTransId, queryProjProposalItem.ProposalId).ProjTransId,true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjPost</Name>
				<Source><![CDATA[
    protected ProjPost initProjPost(ProjAdjustRefId _projAdjustRefId, NoYes _mustNotReduceForecast)
    {
        return ProjPost::newCreateProjTransItem(projProposalItem, ledgerVoucher, _projAdjustRefId, _mustNotReduceForecast);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesInvoiceJournalPostProj construct()
    {
        return new SalesInvoiceJournalPostProj();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaxDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post current tax doucment.
    /// </summary>
    /// <param name="_checkLedgerVoucher">
    /// A Boolean value that indicates whether checking the LedgerVoucher; optional.
    /// </param>
    public void postTaxDocument(boolean _checkLedgerVoucher = true)
    {
        // Not doing anything for project sales
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>