<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ReqTransCalc
{
    ReqPlanId           reqPlanId;
    ItemId              itemId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initMapReqInventDim</Name>
				<Source><![CDATA[
    protected Map initMapReqInventDim(
        ReqPeriodCode       _periodCode,
        ReqSorting          _sorting,
        ReqCovInventDimId   _covInventDimId = ''
        )
    {
        Map                 mapReqInventDim = new Map(Types::Container,Types::Record);
        ReqTrans            reqTrans;

        ReqDate             reqDate;
        ReqCovInventDimId   covInventDimId;

        TransDate           minTransDate;
        TransDate           maxTransDate;

        ReqQty              onhandQty;

        TmpReqInventDim     tmp;
        
        Map                 periodsCache = new Map(Types::Container,Types::Date);
        
        #define.key([covInventDimId,reqDate])

        reqTrans = this.selectReqTrans(_sorting,_covInventDimId);
        boolean isPdsCWItem;

        isPdsCWItem = PdsGlobal::pdsIsCWItem(reqTrans.ItemId);

        while (reqTrans.RecId)
        {
            covInventDimId     = reqTrans.CovInventDimId;            
            ReqDate tmpReqDate = reqTrans.sortingDate(_sorting);

            if (periodsCache.exists([_periodCode, tmpReqDate]))
            {
                reqDate = periodsCache.lookup([_periodCode, tmpReqDate]);
            }

            if (!reqDate)
            {
                reqDate = ReqTransCalc::date2PeriodCodeDate(_periodCode, tmpReqDate);                   
                periodsCache.insert([_periodCode, tmpReqDate], reqDate);
            }
            
            if (mapReqInventDim.exists(#Key))
            {
                tmp = mapReqInventDim.lookup(#Key);
                mapReqInventDim.remove(#Key);
            }
            else
            {
                tmp.clear();
                tmp.CovInventDimId  = reqTrans.CovInventDimId;
                tmp.ReqDate         = reqDate;
            }

            tmp.IsCWItem = isPdsCWItem ? UnknownNoYes::Yes : UnknownNoYes::No;

            tmp.addReqTransQty(reqTrans);

            mapReqInventDim.insert(#Key,tmp);

            if (! minTransDate || ! maxTransDate)
            {
                minTransDate = tmp.ReqDate;
                maxTransDate = tmp.ReqDate;
            }
            else if (minTransDate > tmp.ReqDate)
            {
                minTransDate = tmp.ReqDate;
            }
            else if (maxTransDate < tmp.ReqDate)
            {
                maxTransDate = tmp.ReqDate;
            }

            next reqTrans;
        }

        // fill empty periods

        if (_periodCode != ReqPeriodCode::Total && _covInventDimId)
        {
            reqDate         = minTransDate;
            covInventDimId  = _covInventDimId;

            while (reqDate <= maxTransDate)
            {
                reqDate = ReqTransCalc::date2PeriodCodeDate(_periodCode,reqDate);

                if (mapReqInventDim.exists(#Key))
                {
                    tmp = mapReqInventDim.lookup(#Key);
                    mapReqInventDim.remove(#Key);
                }
                else
                {
                    tmp.clear();
                    tmp.CovInventDimId  = covInventDimId;
                    tmp.ReqDate         = reqDate;
                }

                tmp.OnhandQty += onhandQty;

                onhandQty = tmp.availableQty();

                mapReqInventDim.insert(#Key,tmp);

                reqDate = ReqTransCalc::date2NextPeriodCodeDate(_periodCode,reqDate);
            }
        }

        return mapReqInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMapReqTrans</Name>
				<Source><![CDATA[
    protected Map initMapReqTrans(ReqSorting _sorting)
    {
        Map                 mapRecId = new Map(typeName2Type(extendedtypestr(recId)), Types::Real);
        ReqTrans            reqTrans;
        InventQty           qty;

        ReqCovInventDimId   covInventDimId;

        reqTrans = this.selectReqTrans(_sorting);

        while (reqTrans.RecId)
        {
            if (covInventDimId != reqTrans.CovInventDimId)
            {
                qty = 0;
                covInventDimId = reqTrans.CovInventDimId;
            }

            if (reqTrans.RefType != ReqRefType::SafetyInvent)
            {
                switch (_sorting)
                {
                    case ReqSorting::ReqDate:
                    case ReqSorting::ReqDateDlvOrig:
                    case ReqSorting::FuturesDate:
                        qty   += reqTrans.Qty;
                        break;
                    case ReqSorting::ActionDate:
                        qty   += reqTrans.actionSum();
                        break;
                }
            }

            mapRecId.insert(reqTrans.RecId,qty);

            next reqTrans;
        }

        return mapRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packMapReqInventDim</Name>
				<Source><![CDATA[
    public container packMapReqInventDim(
        ReqPeriodCode       _periodCode,
        ReqSorting          _sorting,
        ReqCovInventDimId   _covInventDimId
        )
    {
        return this.initMapReqInventDim(_periodCode,_sorting,_covInventDimId).pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>packMapReqTrans</Name>
				<Source><![CDATA[
    public container packMapReqTrans(ReqSorting _sorting)
    {
        return this.initMapReqTrans(_sorting).pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId    _itemId = itemId)
    {
        itemId  = _itemId;
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqPlanId</Name>
				<Source><![CDATA[
    public ReqPlanId parmReqPlanId(ReqPlanId _reqPlanId = reqPlanId)
    {
        reqPlanId = _reqPlanId;
        return reqPlanId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectReqTrans</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected ReqTrans selectReqTrans(
        ReqSorting          _sorting,
        ReqCovInventDimId   _covInventDimId = ''
        )
    {
        ReqTrans        reqTrans;
        ReqPlanVersion  reqPlanVersion =
                                         ReqPlan::findReqPlanId(reqPlanId).findActiveVersion();

        switch (_sorting)
        {
            case ReqSorting::ReqDate :
                select reqTrans
                    order by CovInventDimId,ReqDate,Direction,RecId
                    where reqTrans.PlanVersion            == reqPlanVersion.RecId           &&
                          reqTrans.ItemId                 == itemId                         &&
                        ( ! _covInventDimId                                                 ||
                          reqTrans.CovInventDimId         == _covInventDimId);

                return reqTrans;

            case ReqSorting::ReqDateDlvOrig :
                select reqTrans
                    order by CovInventDimId, ReqDateDlvOrig, ReqDate, Direction, RecId
                    where reqTrans.PlanVersion            == reqPlanVersion.RecId           &&
                          reqTrans.ItemId                 == itemId                         &&
                        ( ! _covInventDimId                                                 ||
                          reqTrans.CovInventDimId         == _covInventDimId);

                return reqTrans;

            case ReqSorting::ActionDate :
                select reqTrans
                    order by CovInventDimId,ActionDate,Direction,RecId
                    where reqTrans.PlanVersion              == reqPlanVersion.RecId          &&
                          reqTrans.ItemId                   == itemId                        &&
                        ( ! _covInventDimId                                                  ||
                          reqTrans.CovInventDimId   == _covInventDimId);

                return reqTrans;

            case ReqSorting::FuturesDate :
                select reqTrans
                    order by CovInventDimId,FuturesDate,Direction,RecId
                    where reqTrans.PlanVersion              == reqPlanVersion.RecId          &&
                          reqTrans.ItemId                   == itemId                        &&
                        ( ! _covInventDimId                                                  ||
                          reqTrans.CovInventDimId   == _covInventDimId);

                return reqTrans;
        }
        throw error(strfmt("@SYS68912",funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>date2NextPeriodCodeDate</Name>
				<Source><![CDATA[
    public static ReqDate date2NextPeriodCodeDate(
        ReqPeriodCode   _periodCode,
        ReqDate         _reqDate
        )
    {
        switch (_periodCode)
        {
            case ReqPeriodCode::Total :
                return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

            case ReqPeriodCode::Day :
                return _reqDate + 1;

            case ReqPeriodCode::Week :
                return _reqDate + 7;

            case ReqPeriodCode::Month :
                return nextmth(_reqDate);

            case ReqPeriodCode::Year :
                return nextyr(_reqDate);
        }
        throw error(strfmt("@SYS68912",funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>date2PeriodCodeDate</Name>
				<Source><![CDATA[
    public static ReqDate date2PeriodCodeDate(
        ReqPeriodCode   _periodCode,
        ReqDate         _reqDate
        )
    {
        if (_reqDate < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
        {
            _reqDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        switch (_periodCode)
        {
            case ReqPeriodCode::Total :
                return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

            case ReqPeriodCode::Day :
                return _reqDate;

            case ReqPeriodCode::Week :
                return num2date((date2num(_reqDate) div 7) * 7 + 1);

            case ReqPeriodCode::Month :
                return mkdate(1,mthofyr(_reqDate),year(_reqDate));

            case ReqPeriodCode::Year :
                return mkdate(1,1,year(_reqDate));
        }

        throw error(strfmt("@SYS68912",funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    public static ReqTransCalc newStandard(
        ReqPlanId   _reqPlanId,
        ItemId      _itemId
        )
    {
        ReqTransCalc    reqTransCalc = new ReqTransCalc();
        reqTransCalc.parmReqPlanId(_reqPlanId);
        reqTransCalc.parmItemId(_itemId);

        return reqTransCalc;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>