<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailProcessorPaymentMethodMapper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using PaymentSDK = Microsoft.Dynamics.Retail.PaymentSDK.Portable;
using SDKManager = Microsoft.Dynamics.Retail.SDKManager.Portable;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailProcessorPaymentMethodMapper</c> class provides the functionality to map card types to payment methods.
/// </summary>
public final class RetailProcessorPaymentMethodMapper
{
    private RetailPaymentConnectorLookupTempTable retailPaymentConnectorLookupTempTable;
    private RetailTmpUnmappedProcessorPaymentMethod retailTmpUnmappedProcessorPaymentMethod;
    private RetailProcessorPaymentMethodMapping retailProcessorPaymentMethodMapping;
    private Set supportedPaymentConnectorsSet;

    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RetailProcessorPaymentMethodMapper construct()
    {
        return new RetailProcessorPaymentMethodMapper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRetailPaymentConnectorLookupTempTable</Name>
				<Source><![CDATA[
    internal RetailPaymentConnectorLookupTempTable parmRetailPaymentConnectorLookupTempTable(
        RetailPaymentConnectorLookupTempTable _retailPaymentConnectorLookupTempTable = retailPaymentConnectorLookupTempTable)
    {
        retailPaymentConnectorLookupTempTable = _retailPaymentConnectorLookupTempTable;

        return retailPaymentConnectorLookupTempTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRetailTmpUnmappedProcessorPaymentMethod</Name>
				<Source><![CDATA[
    internal RetailTmpUnmappedProcessorPaymentMethod parmRetailTmpUnmappedProcessorPaymentMethod(
        RetailTmpUnmappedProcessorPaymentMethod _retailTmpUnmappedProcessorPaymentMethod = retailTmpUnmappedProcessorPaymentMethod)
    {
        retailTmpUnmappedProcessorPaymentMethod = _retailTmpUnmappedProcessorPaymentMethod;

        return retailTmpUnmappedProcessorPaymentMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRetailProcessorPaymentMethodMapping</Name>
				<Source><![CDATA[
    internal RetailProcessorPaymentMethodMapping parmRetailProcessorPaymentMethodMapping(
        RetailProcessorPaymentMethodMapping _retailProcessorPaymentMethodMapping = retailProcessorPaymentMethodMapping)
    {
        retailProcessorPaymentMethodMapping = _retailProcessorPaymentMethodMapping;

        return retailProcessorPaymentMethodMapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateRetailTmpUnmappedProcessorPaymentMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>RetailTmpUnmappedProcessorPaymentMethod</c> by querying the list of connectors and their processor payment methods.
    /// </summary>
    [Hookable(false)]
    public void populateRetailTmpUnmappedProcessorPaymentMethod()
    {
        this.initPaymentConnectors();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPaymentConnectors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>RetailPaymentConnectorLookupTempTable</c> and <c>RetailTmpUnmappedProcessorPaymentMethod</c> tables,
    /// and prepares the set of supported payment connectors.
    /// </summary>
    private void initPaymentConnectors()
    {
        ttsbegin;

        // Empty the temp tables that contain the supported payment connectors and unmapped payment methods.
        delete_from retailPaymentConnectorLookupTempTable;
        delete_from retailTmpUnmappedProcessorPaymentMethod;

        ttscommit;

        supportedPaymentConnectorsSet = new Set(Types::String);

        // Get all the supported payment connectors.
        RetailPaymentConnectorLookupTempTable::initializePaymentConnectors(
            retailPaymentConnectorLookupTempTable, "@Retail:ProcessorPaymentMappingMethods");

        while select ConnectorName from retailPaymentConnectorLookupTempTable
        {
            // Get the payment methods for the connector.
            List processorPaymentMethods = this.getProcessorPaymentMethods(
                retailPaymentConnectorLookupTempTable.ConnectorName);

            if (!processorPaymentMethods.empty())
            {
                ListEnumerator paymentMethodsEnumerator = processorPaymentMethods.getEnumerator();

                while (paymentMethodsEnumerator.moveNext())
                {
                    // Add the connector and payment method to the list.
                    supportedPaymentConnectorsSet.add(
                        this.paymentConnectorString(retailPaymentConnectorLookupTempTable.ConnectorName, paymentMethodsEnumerator.current()));

                    // If the mapping does not exist, then insert the payment connector details into the Unmapped table.
                    if (!RetailProcessorPaymentMethodMapping::find(
                        retailPaymentConnectorLookupTempTable.ConnectorName, paymentMethodsEnumerator.current()))
                    {
                        retailTmpUnmappedProcessorPaymentMethod.clear();
                        retailTmpUnmappedProcessorPaymentMethod.ConnectorName = retailPaymentConnectorLookupTempTable.ConnectorName;
                        retailTmpUnmappedProcessorPaymentMethod.ProcessorPaymentMethodName = paymentMethodsEnumerator.current();

                        retailTmpUnmappedProcessorPaymentMethod.insert();
                    }
                }

                eventSource.EventWritePaymentsConnectorContainsPaymentMethods(
                    retailPaymentConnectorLookupTempTable.ConnectorName, processorPaymentMethods.elements());
            }
            else
            {
                // Display message saying that no processor payment methods were found for payment connector.
                // "Connector '%1' does not contain any processor payment methods that can be mapped."
                warning(strFmt(
                    '@Retail:RetailConnectorDoesNotContainProcessorPaymentMethodsWarningMessage',
                    retailPaymentConnectorLookupTempTable.ConnectorName));

                // Add log entry.
                eventSource.EventWritePaymentsConnectorDoesNotContainProcessorPaymentMethods(
                    retailPaymentConnectorLookupTempTable.ConnectorName);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportStaleMappings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a warning if the mapped payment method is no longer supported.
    /// </summary>
    internal void reportStaleMappings()
    {
        while select ConnectorName, ProcessorPaymentMethod from retailProcessorPaymentMethodMapping
        {
            if (!this.isPaymentMethodSupported(
                retailProcessorPaymentMethodMapping.ConnectorName, retailProcessorPaymentMethodMapping.ProcessorPaymentMethod))
            {
                warning(strFmt("@Retail:ProcessorPaymentMethodNotSupported",
                    retailProcessorPaymentMethodMapping.ConnectorName, retailProcessorPaymentMethodMapping.ProcessorPaymentMethod));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPaymentMethodMappingIfNotExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the given payment method mapping details into <c>RetailProcessorPaymentMethodMapping</c>, if the mapping does not exist.
    /// </summary>
    /// <param name = "_cardTypeId">The card type.</param>
    /// <param name = "_connectorName">The connector name</param>
    /// <param name = "_processorPaymentMethodName">The processor payment method name.</param>
    /// <returns>True if the insertion happens. Otherwise, false.</returns>
    internal boolean insertPaymentMethodMappingIfNotExists(
        RetailCardTypeId _cardTypeId,
        RetailConnectorName _connectorName,
        RetailProcessorPaymentMethod _processorPaymentMethodName)
    {
        boolean isInsertSuccessful;

        // Check if table already contains a record with the same connector name and processor payment method name.
        if (!RetailProcessorPaymentMethodMapping::find(_connectorName, _processorPaymentMethodName))
        {
            retailProcessorPaymentMethodMapping.clear();
            retailProcessorPaymentMethodMapping.CardTypeId = _cardTypeId;
            retailProcessorPaymentMethodMapping.ConnectorName = _connectorName;
            retailProcessorPaymentMethodMapping.ProcessorPaymentMethod = _processorPaymentMethodName;
            retailProcessorPaymentMethodMapping.insert();

            isInsertSuccessful = true;
        }

        return isInsertSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPaymentMethodSupported</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the given payment method is supported by the payment connector.
    /// </summary>
    /// <param name = "_connectorName">The payment connector name.</param>
    /// <param name = "_processorPaymentMethodName">The payment method name.</param>
    /// <returns>True if the payment method is supported by the connector. Otherwise, false.</returns>
    internal boolean isPaymentMethodSupported(
        RetailConnectorName _connectorName,
        RetailProcessorPaymentMethod _processorPaymentMethodName)
    {
        return supportedPaymentConnectorsSet != null
            && supportedPaymentConnectorsSet.in(this.paymentConnectorString(_connectorName, _processorPaymentMethodName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPaymentMethodToUnmappedList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the given payment method to the list of unmapped payment methods.
    /// </summary>
    /// <param name = "_connectorName">The connector name</param>
    /// <param name = "_processorPaymentMethodName">The processor payment method name.</param>
    internal void addPaymentMethodToUnmappedList(
        RetailConnectorName _connectorName,
        RetailProcessorPaymentMethod _processorPaymentMethodName)
    {
        retailTmpUnmappedProcessorPaymentMethod.ConnectorName = _connectorName;
        retailTmpUnmappedProcessorPaymentMethod.ProcessorPaymentMethodName = _processorPaymentMethodName;

        retailTmpUnmappedProcessorPaymentMethod.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentMethodCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the count of payment methods for the given connector.
    /// </summary>
    /// <param name = "_retailConnectorName">Payment connector name.</param>
    /// <returns>Count of payment methods.</returns>
    /// <remarks>Used for unit testing only.</remarks>
    internal RecIdCount getPaymentMethodCount(RetailConnectorName _retailConnectorName = '')
    {
        if (_retailConnectorName == '')
        {
            select count(RecId) from retailTmpUnmappedProcessorPaymentMethod;
        }
        else
        {
            select count(RecId) from retailTmpUnmappedProcessorPaymentMethod
                group by retailTmpUnmappedProcessorPaymentMethod.ConnectorName
                where retailTmpUnmappedProcessorPaymentMethod.ConnectorName == _retailConnectorName;
        }

        return retailTmpUnmappedProcessorPaymentMethod.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentConnectorString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares a string containing the given payment connector and payment method.
    /// </summary>
    /// <param name = "_connectorName">The connector name</param>
    /// <param name = "_processorPaymentMethodName">The processor payment method name.</param>
    /// <returns>A formatted string with the payment connector and payment method.</returns>
    private str paymentConnectorString(
        RetailConnectorName _connectorName,
        RetailProcessorPaymentMethod _processorPaymentMethodName)
    {
        return strFmt("%1;%2", _connectorName, _processorPaymentMethodName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProcessorPaymentMethods</Name>
				<Source><![CDATA[
    private List getProcessorPaymentMethods(RetailConnectorName _connectorName)
    {
        List paymentMethods = new List(Types::String);
        PaymentSDK.IPaymentProcessor processor = new CreditCardPaymentProcessorFactory().getProcessor(_connectorName);

        if (processor)
        {
            if (EnhancedWalletSupportAndPaymentsImprovementFeature::isEnabled())
            {
                paymentMethods = this.getPaymentMethods(processor);
            }

            if (paymentMethods.empty())
            {
                var request = new PaymentSDK.Request();
                request.set_Locale(currentUserLanguage());
                request.set_Properties(null);

                PaymentSDK.PaymentProperty supportedPaymentVariants = CreditCardConnectorSetup::findPropertyByName(
                    processor.GetMerchantAccountPropertyMetadata(request).get_Properties(),
                    PaymentSDK.Constants.GenericNamespace::get_MerchantAccount(),
                    PaymentSDK.Constants.MerchantAccountProperties::get_SupportedPaymentMethodVariants());

                if (supportedPaymentVariants && supportedPaymentVariants.StringValue)
                {
                    paymentMethods = strSplit(supportedPaymentVariants.StringValue, ';');
                }
            }
        }

        return paymentMethods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentMethods</Name>
				<Source><![CDATA[
    private List getPaymentMethods(PaymentSDK.IPaymentProcessor _paymentProcessor)
    {
        List paymentMethodsList = new List(Types::String);
        PaymentSDK.IPaymentMethodInfo paymentMethodInfo = _paymentProcessor as PaymentSDK.IPaymentMethodInfo;

        if (paymentMethodInfo)
        {
            var supportedPaymentMethods = paymentMethodInfo.GetSupportedPaymentMethods();
            var enumerator = supportedPaymentMethods.GetEnumerator();

            while (enumerator.MoveNext())
            {
                PaymentSDK.PaymentMethod paymentMethod = enumerator.Current;
                paymentMethodsList.addEnd(paymentMethod.Name);
            }
        }

        return paymentMethodsList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>