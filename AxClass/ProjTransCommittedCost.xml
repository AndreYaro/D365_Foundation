<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransCommittedCost</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjTransCommittedCost extends ProjTrans
{
    CostControlTransCommittedCost   costControlTransCommittedCost;
    boolean                         calcTransCost;
    Amount                          transCost;
    boolean                         calcTransCostMST;
    AmountMST                       transCostMST;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activityNumber</Name>
				<Source><![CDATA[
    public ProjActivityNumber activityNumber()
    {
        return costControlTransCommittedCost.ActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeCapitalize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether costs from this transaction can be capitalized.
    /// </summary>
    /// <returns>
    /// true if costs from this transaction can be capitalized; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This value is based on project line property of the project that is associated with this
    /// transaction.
    /// </remarks>
    public boolean canBeCapitalize()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the category ID for a transaction.
    /// </summary>
    /// <returns>
    /// The category ID for the transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjCategoryId categoryId()
    {
        return costControlTransCommittedCost.CategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the cost price for a transaction.
    /// </summary>
    /// <returns>
    /// The cost price for the transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public CostPrice costPrice()
    {
        return this.qty() ? CurrencyExchangeHelper::price(this.transCost() / this.qty(), this.currencyIdCost()) : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyIdSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code for the sales amounts that are reported by a transaction.
    /// </summary>
    /// <returns>
    /// The currency code for the sales amounts that are reported by the transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjSalesCurrencyCode currencyIdSales()
    {
        return costControlTransCommittedCost.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultdimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultdimension()
    {
        return costControlTransCommittedCost.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    public InventTransId inventTransId()
    {
        return costControlTransCommittedCost.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the inventory item that is associated with the specified transaction.
    /// </summary>
    /// <returns>
    /// The ID of the inventory item that is associated with the specified transaction.
    /// </returns>
    /// <remarks>
    /// This method can be overridden by classes that extend the class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ItemId itemId()
    {
        return costControlTransCommittedCost.EmplItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction origin for the specified transaction.
    /// </summary>
    /// <returns>
    /// The <c>ProjItemType::Project</c> enumeration value.
    /// </returns>
    /// <remarks>
    /// This method can be overridden by classes that extend this class to return a different transaction
    /// origin for the specific transaction.
    /// </remarks>
    ProjTransactionOrigin itemType()
    {
        return costControlTransCommittedCost.origin();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerStatusCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger status for the specified transaction.
    /// </summary>
    /// <returns>
    /// A <c>ProjLedgerStatus::None</c> enumeration value.
    /// </returns>
    /// <remarks>
    /// This method can be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjLedgerStatus ledgerStatusCost()
    {
        return ProjLedgerStatus::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePropertyId</Name>
				<Source><![CDATA[
    public ProjLinePropertyId linePropertyId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(CostControlTransCommittedCost _costControlTransCommittedCost)
    {
        costControlTransCommittedCost          = _costControlTransCommittedCost;

        super(_costControlTransCommittedCost);
    }

]]></Source>
			</Method>
			<Method>
				<Name>originCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the origin of costs on the specified transaction.
    /// </summary>
    /// <returns>
    /// A <c>ProjOrigin::None</c> enumeration value.
    /// </returns>
    /// <remarks>
    /// This method can be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjOrigin originCost()
    {
        return ProjOrigin::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>originEmpl</Name>
				<Source><![CDATA[
    public ProjOrigin originEmpl()
    {
        return costControlTransCommittedCost.origin();
    }

]]></Source>
			</Method>
			<Method>
				<Name>originRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the origin of revenues on the specified transaction.
    /// </summary>
    /// <returns>
    /// A <c>ProjOrigin::None</c> enumeration value.
    /// </returns>
    /// <remarks>
    /// This method can be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjOrigin originRevenue()
    {
        return ProjOrigin::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packingSlipId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the packing slip that is associated with the specified transaction.
    /// </summary>
    /// <returns>
    /// The ID of the packing slip that is associated with the specified transaction.
    /// </returns>
    /// <remarks>
    /// This method can be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public PackingSlipId packingSlipId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>projAdjustRefId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the project adjustment reference that is associated with the specified
    /// transaction.
    /// </summary>
    /// <returns>
    /// The ID of the project adjustment reference that is associated with the specified transaction.
    /// </returns>
    /// <remarks>
    /// This method can be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjAdjustRefId projAdjustRefId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the project that is associated with the specified transaction.
    /// </summary>
    /// <returns>
    /// The ID of the project that is associated with the specified transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjId projId()
    {
        return costControlTransCommittedCost.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the quantity for the specified transaction.
    /// </summary>
    /// <returns>
    /// The quantity for the specified transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public Qty qty()
    {
        return costControlTransCommittedCost.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the specified transaction.
    /// </summary>
    /// <returns>
    /// The record ID of the specified transaction.
    /// </returns>
    /// <remarks>
    /// This method can be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public RecId recId()
    {
        return costControlTransCommittedCost.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the resource ID for the resource that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The resource ID.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ResourceRecId resource()
    {
        return costControlTransCommittedCost.Resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the resource category ID for the resource that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The resource category ID.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ResourceCategoryRecId resourceCategory()
    {
        return costControlTransCommittedCost.ResourceCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales price for this transaction.
    /// </summary>
    /// <returns>
    /// The sales price for this transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public SalesPrice salesPrice()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID for the specified transaction.
    /// </summary>
    /// <returns>
    /// The table ID for the specified transaction.
    /// </returns>
    /// <remarks>
    /// This method can be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TableId tableId()
    {
        return tableName2id(tableStr(CostControlTransCommittedCost));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total cost of the specified transaction in the transaction currency.
    /// </summary>
    /// <returns>
    /// The total cost of the specified transaction in the transaction currency.
    /// </returns>
    public Amount transCost()
    {
        return costControlTransCommittedCost.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transCostMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total cost of this transaction in company currency.
    /// </summary>
    /// <returns>
    /// The total cost of this transaction.
    /// </returns>
    public AmountMST transCostMST()
    {
        return costControlTransCommittedCost.AmountMst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction date of the specified transaction.
    /// </summary>
    /// <returns>
    /// The transaction date of the specified transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TransDate transDate()
    {
        return costControlTransCommittedCost.CommittedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction ID of the specified transaction.
    /// </summary>
    /// <returns>
    /// The transaction ID of the specified transaction.
    /// </returns>
    /// <remarks>
    /// This method can be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TransactionID transId()
    {
        return costControlTransCommittedCost.ProjTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnover</Name>
				<Source><![CDATA[
    public AmountCur transTurnover()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnoverMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total sales amount for the specified transaction in company currency.
    /// </summary>
    /// <returns>
    /// The total sales amount for the specified transaction.
    /// </returns>
    public AmountMST transTurnoverMST()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction type of the specified transaction.
    /// </summary>
    /// <returns>
    /// The transaction type of the specified transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjTransType transType()
    {
        return costControlTransCommittedCost.ProjTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction text of the specified transaction.
    /// </summary>
    /// <returns>
    /// The transaction text of the specified transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TransTxt txt()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the voucher number that is associated with the specified transaction.
    /// </summary>
    /// <returns>
    /// The voucher number that is associated with the specified transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public Voucher voucherInvoice()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherOriginal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the original voucher number that is associated with the specified transaction.
    /// </summary>
    /// <returns>
    /// The original voucher number that is associated with the specified transaction.
    /// </returns>
    /// <remarks>
    /// This method can be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public Voucher voucherOriginal()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the start date of the estimate period for this transaction.
    /// </summary>
    /// <returns>
    /// The start date of the estimate period for the specified transaction.
    /// </returns>
    /// <remarks>
    /// This method can be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjPeriodFromWIP wipPeriod()
    {
        return costControlTransCommittedCost.wipPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lendingLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the lending legal entity.
    /// </summary>
    DataAreaId lendingLegalEntity()
    {
        DataAreaId ret;

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>