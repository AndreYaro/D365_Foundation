<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTableForm_INTax_EventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesTableForm_INTax_EventHandler</c> class is the event handler of form <c>SalesTable</c> for IN tax.
/// </summary>
internal class SalesTableForm_INTax_EventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>tcsGroup_OnValidating</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(SalesTable, SalesLine_IN, TCSGroup), FormDataFieldEventType::Validating)]
    public static void tcsGroup_OnValidating(FormDataObject _sender, FormDataFieldEventArgs _args)
    {
        if (TaxWithholdParameters_IN::isTaxWithholdingCreditNoteTaxGroupDefaultBlank())
        {
            SalesTableForm_INTax_EventHandler::validateCreditNoteTDSTCSGroup(
                _sender,
                _args,
                TaxWithholdType_IN::TCS);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tdsGroup_OnValidating</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(SalesTable, SalesLine_IN, TDSGroup), FormDataFieldEventType::Validating)]
    public static void tdsGroup_OnValidating(FormDataObject _sender, FormDataFieldEventArgs _args)
    {
        if (TaxWithholdParameters_IN::isTaxWithholdingCreditNoteTaxGroupDefaultBlank())
        {
            SalesTableForm_INTax_EventHandler::validateCreditNoteTDSTCSGroup(
                _sender,
                _args,
                TaxWithholdType_IN::TDS);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCreditNoteTDSTCSGroup</Name>
				<Source><![CDATA[
    private static void validateCreditNoteTDSTCSGroup(FormDataObject _sender, FormDataFieldEventArgs _args, TaxWithholdType_IN _taxType)
    {
        var args = _args as FormDataFieldCancelEventArgs;
        FormRun formRun = _sender.datasource().formRun();
        SalesLine salesLine = formRun.dataSource(formDataSourceStr(SalesTable, SalesLine)).cursor();

        if (TaxWithholdParameters_IN::isTaxWithholdingCreditNoteTaxGroupDefaultBlank()
            && salesLine.isCreditNoteLine())
        {
            SalesLine_IN salesLine_IN = formRun.dataSource(formDataSourceStr(SalesTable, SalesLine_IN)).cursor();
            SalesLine_IN originSalesLine_IN = SalesLine::findInventTransId(salesLine.InventTransIdReturn).salesLine_IN();

            if (originSalesLine_IN
                && ((salesLine_IN.TCSGroup
                        && _taxType == TaxWithholdType_IN::TCS
                        && salesLine_IN.TCSGroup != originSalesLine_IN.TCSGroup)
                    || (salesLine_IN.TDSGroup
                        && _taxType == TaxWithholdType_IN::TDS
                        && salesLine_IN.TDSGroup != originSalesLine_IN.TDSGroup)))
            {
                args.cancel(true);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>