<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalParmPostCleanupAction</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
[Export(identifierStr(Dynamics.AX.Application.IDataMaintenanceAction))]
[DataMaintenanceFeatureClass(classstr(LedgerJournalParmPostCleanupFlight))]
internal class LedgerJournalParmPostCleanupAction implements IDataMaintenanceAction, IDataMaintenanceOpportunity, IDataMaintenanceActionParameters, IDataMaintenanceActionScheduleParameters
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceCaption caption()
    {
        return literalStr("@LedgerJournal:ParmPostCleanupActionCaption");
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceDescription description()
    {
        return literalStr("@LedgerJournal:ParmPostCleanupActionDescription");
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>category</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceActionCategory category()
    {
        return DataMaintenanceActionCategory::Performance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ModuleAxapta module()
    {
        return ModuleAxapta::Ledger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tasks</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Array tasks()
    {
        Array tasks = new Array(Types::String);
        tasks.value(1, classStr(LedgerJournalParmPostCleanupTask));
        return tasks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>opportunityResult</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceOpportunityResult opportunityResult()
    {
        boolean isCleanupRequired = this.hasPostedJournalInParmTable() || this.hasOrphanJournalInParmTable();

        DataMaintenanceOpportunityResult scanResult = DataMaintenanceOpportunityResult::construct();
        scanResult.parmOpportunityFound(isCleanupRequired);

        return scanResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>automaticallySchedule</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean automaticallySchedule()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parameters</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceActionParameters parameters()
    {
        DataMaintenanceActionParameters actionParameters = new DataMaintenanceActionParameters();
        // if it is not system action, this data maintenance job can be disabled
        actionParameters.IsSystemAction = false;

        return actionParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleParameters</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceActionScheduleParameters scheduleParameters()
    {
        DataMaintenanceActionScheduleParameters params = new DataMaintenanceActionScheduleParameters();

        // if DataMaintnanceActionScheduleFeature is enabled, this weekly frequency will apply
        // if DataMaintnanceActionScheduleFeature is disabled, it will use 6 hours by default
        params.Frequency = DataMaintenanceActionScheduleFrequency::EveryWeek;
        return params;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPostedJournalInParmTable</Name>
				<Source><![CDATA[
    private boolean hasPostedJournalInParmTable()
    {
        LedgerJournalParmPost ledgerJournalParmPost;
        LedgerJournalTable ledgerJournalTable;
        
        select firstonly crosscompany RecId from ledgerJournalParmPost
            join ledgerJournalTable
            where ledgerJournalTable.JournalNum == ledgerJournalParmPost.LedgerJournalId
                && ledgerJournalTable.Posted == true
                && ledgerJournalParmPost.LateSelection == NoYes::No
                && (ledgerJournalParmPost.JournalDataAreaId == '' || 
                    ledgerJournalParmPost.JournalDataAreaId == ledgerJournalParmPost.DataAreaId);
        return (ledgerJournalParmPost.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOrphanJournalInParmTable</Name>
				<Source><![CDATA[
    private boolean hasOrphanJournalInParmTable()
    {
        LedgerJournalParmPost ledgerJournalParmPost;
        LedgerJournalTable ledgerJournalTable;
        
        select firstonly crosscompany RecId from ledgerJournalParmPost
            notexists join ledgerJournalTable
            where ledgerJournalTable.JournalNum == ledgerJournalParmPost.LedgerJournalId
                && (ledgerJournalParmPost.JournalDataAreaId == '' || 
                    ledgerJournalParmPost.JournalDataAreaId == ledgerJournalParmPost.DataAreaId);

        return (ledgerJournalParmPost.RecId != 0);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>