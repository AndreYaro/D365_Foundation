<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSShipmentStatusUpdater</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Updates the shipment status of the <c>WHSShipmentTable</c> record.
/// </summary>
public class WHSShipmentStatusUpdater
{
    WHSShipmentTable shipmentTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSShipmentStatusUpdater construct()
    {
        return new WHSShipmentStatusUpdater();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromShipmentId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WHSShipmentStatusUpdater</c> class, based on a specific shipment ID.
    /// </summary>
    /// <param name = "_shipmentID">The current shipment ID of the <c>WHSShipmentTable</c> record for which the status updates will occur.</param>
    /// <returns>A new instance of the <c>WHSShipmentStatusUpdater</c> class</returns>
    public static WHSShipmentStatusUpdater newFromShipmentId(WHSShipmentId _shipmentID)
    {
        WHSShipmentStatusUpdater shipmentStatusUpdater = WHSShipmentStatusUpdater::construct();

        shipmentStatusUpdater.parmShipmentTable(WHSShipmentTable::find(_shipmentId));

        return shipmentStatusUpdater;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShipmentTable</Name>
				<Source><![CDATA[
    public WHSShipmentTable parmShipmentTable(WHSShipmentTable _shipmentTable = shipmentTable)
    {
        shipmentTable = _shipmentTable;

        return shipmentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWhenContainerCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the shipment status, if required, when a container gets created.
    /// </summary>
    public void updateWhenContainerCreated()
    {
        this.updateToInProcessIfLoaded();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWhenContainerReOpened</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the shipment status, if required, when the container gets reopened.
    /// </summary>
    public void updateWhenContainerReOpened()
    {
        this.updateToInProcessIfLoaded();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWhenContainerDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the shipment status, if required, when the container gets deleted.
    /// </summary>
    /// <param name = "_containerId">The ID of the container that gets deleted</param>
    public void updateWhenContainerDeleted(WHSContainerId _containerId)
    {
        this.updateShipmentToInProcessOrLoaded(_containerId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWhenContainerClosed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the shipment status, if required, when the container gets closed.
    /// </summary>
    /// <param name = "_containerId">The ID of the container that gets closed</param>
    public void updateWhenContainerClosed(WHSContainerId _containerId)
    {
        this.updateShipmentToInProcessOrLoaded(_containerId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWhenLoadLineDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the shipment status, if required, when the load line gets deleted.
    /// </summary>
    public void updateWhenLoadLineDeleted()
    {
        this.updateFromInProcessOrLoaded();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWhenLoadLineUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the shipment status, if required, when the load line gets updated.
    /// </summary>
    public void updateWhenLoadLineUpdated()
    {
        boolean disableCache;
        #OCCRetryCount

        try
        {
            ttsbegin;
            if (disableCache)
            {
                shipmentTable = WHSShipmentTable::find(shipmentTable.ShipmentId, false, disableCache);
            }
            if (!shipmentTable.hasWork())
            {
                WHSShipmentTable::updateShipmentStatus(shipmentTable.ShipmentId, WHSShipmentStatus::Open);
            }
            else
            {
                this.updateFromInProcessOrLoaded();
            }
            ttscommit;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    // If we hit an update conflict we should avoid selecting the cached value for the load
                    disableCache = true;
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWhenWorkClosed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the shipment status, if required, when the work gets closed.
    /// </summary>
    public void updateWhenWorkClosed()
    {
        this.updateShipmentToInProcessOrLoaded();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWhenWorkCreated</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Update shipment status when work is created.
    /// </summary>
    /// <remarks>
    ///  It will retry without cache when conflict happens.
    /// </remarks>
    /// <exception cref="Exception::UpdateConflictNotRecovered">
    ///  Update conflict expection after retrying.
    /// </exception>
    public void updateWhenWorkCreated()
    {
        boolean disableCache;
        #OCCRetryCount

		try
        {
            WHSShipmentTable::updateShipmentStatus(shipmentTable.ShipmentId, WHSShipmentStatus::Waved, disableCache);
        }
        catch (Exception::UpdateConflict)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::UpdateConflictNotRecovered;
            }
			else
            {
                // If we hit an update conflict we should avoid selecting the cached value.
                disableCache = true;
                retry;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromInProcessOrLoaded</Name>
				<Source><![CDATA[
    private void updateFromInProcessOrLoaded()
    {
        if (shipmentTable.ShipmentStatus >= WHSShipmentStatus::InProcess && shipmentTable.ShipmentStatus < WHSShipmentStatus::Shipped)
        {
            this.updateShipmentToInProcessOrLoaded();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateShipmentToInProcessOrLoaded</Name>
				<Source><![CDATA[
    private void updateShipmentToInProcessOrLoaded(WHSContainerId _excludeContainerID = '')
    {
        WHSShipmentStatus shipmentStatus = this.determineInProcessOrLoadedShipmentStatus(_excludeContainerID);

        if (shipmentTable.ShipmentStatus != shipmentStatus)
        {
            WHSShipmentTable::updateShipmentStatus(shipmentTable.ShipmentId, shipmentStatus);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateToInProcessIfLoaded</Name>
				<Source><![CDATA[
    private void updateToInProcessIfLoaded()
    {
        if (shipmentTable.ShipmentStatus == WHSShipmentStatus::Loaded)
        {
            WHSShipmentTable::updateShipmentStatus(shipmentTable.ShipmentId, WHSShipmentStatus::InProcess);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWhenWorkStarted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the shipment status to In process. In case the status is already Received, no update occurs.
    /// </summary>
    public void updateWhenWorkStarted()
    {
        if (!(shipmentTable.LoadDirection == WHSLoadDirection::Inbound
            && shipmentTable.ShipmentStatus == WHSShipmentStatus::Received))
        {
            WHSShipmentTable::updateShipmentStatus(shipmentTable.ShipmentId, WHSShipmentStatus::InProcess);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInboundShipmentsByLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the status for all shipments associated with an inbound load. Status is determined from the load status.
    /// </summary>
    /// <param name = "_loadId">Inbound load to update the shipments for</param>
    [Hookable(false)]
    internal static void updateInboundShipmentsByLoad(WHSLoadId _loadId)
    {
        WHSLoadTable load = WHSLoadTable::find(_loadId);

        if (load.LoadDirection != WHSLoadDirection::Inbound)
        {
            return;
        }

        WHSShipmentStatus newShipmentStatus = WHSShipmentStatusCalculator::determineInboundShipmentStatusFromLoadStatus(load.LoadStatus);

        WHSShipmentTable shipmentTable;
        WHSLoadLine loadLine;

        while select forupdate shipmentTable
            where shipmentTable.LoadId == _loadId
            exists join loadLine
                where shipmentTable.ShipmentId == loadLine.ShipmentId
        {
            shipmentTable.ShipmentStatus = newShipmentStatus;
            shipmentTable.update();
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineInProcessOrLoadedShipmentStatus</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSShipmentStatus determineInProcessOrLoadedShipmentStatus(WHSContainerId _excludeContainerID = '')
    {
        WHSShipmentStatus newStatus = shipmentTable.ShipmentStatus;

        if (WHSShipmentTable::validateShipmentCanBeLoaded(shipmentTable.ShipmentId, _excludeContainerID))
        {
            newStatus = WHSShipmentStatus::Loaded;
        }
        else if (shipmentTable.LoadDirection == WHSLoadDirection::Inbound)
        {
            if (shipmentTable.ShipmentStatus != WHSShipmentStatus::InProcess
                && shipmentTable.ShipmentStatus != WHSShipmentStatus::Received)
            {
                newStatus = WHSShipmentStatus::InProcess;
            }
        }
        else if (shipmentTable.ShipmentStatus != WHSShipmentStatus::InProcess)
        {
            newStatus = WHSShipmentStatus::InProcess;
        }

        return newStatus;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>