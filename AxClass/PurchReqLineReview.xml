<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqLineReview</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchReqLineReview</c> class is used for populating the temporary review tables.
/// </summary>
public class PurchReqLineReview
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateReviewAssignment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a review assignment table buffer for the given review summary.
    /// </summary>
    /// <param name="_context">
    /// The review summary.
    /// </param>
    /// <returns>
    /// A table buffer that contains all of the reviewers for the current review step.
    /// </returns>
    public PurchReqLineTmpReviewAssignment populateReviewAssignment(PurchReqLineTmpReviewSummary _context)
    {
        PurchReqLineTmpReviewAssignment    reviewAssignment;
        container                          con;
        int                                counter;

        con = PurchReqLineReview::populateReviewAssignmentServer(_context.RecId, _context.WorkflowStepTable, _context.WorkflowTrackingStatusTable);

        for (counter = 1; counter <= conLen(con); counter++)
        {
            reviewAssignment.initValue();
            reviewAssignment.PurchReqLineTmpReviewSummary = _context.RecId;

            [ reviewAssignment.Reviewer,
              reviewAssignment.Action,
              reviewAssignment.ActionDate ] = conPeek(con, counter);

            reviewAssignment.insert();
        }

        return reviewAssignment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateReviewSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a review summary table buffer for the given requisition line.
    /// </summary>
    /// <param name="_context">
    /// The requisition line to obtain the review summary for.
    /// </param>
    /// <returns>
    /// A table buffer that contains the review summary.
    /// </returns>
    public PurchReqLineTmpReviewSummary populateReviewSummary(PurchReqLine _context)
    {
        PurchReqLineTmpReviewSummary    purchReqLineTmpReviewSummary;

        purchReqLineTmpReviewSummary.initValue();

        [ purchReqLineTmpReviewSummary.Status,
          purchReqLineTmpReviewSummary.StatusSince,
          purchReqLineTmpReviewSummary.Step,
          purchReqLineTmpReviewSummary.StepSince,
          purchReqLineTmpReviewSummary.WorkflowTrackingStatusTable,
          purchReqLineTmpReviewSummary.WorkflowStepTable ] = PurchReqLineReview::populateReviewSummaryServer(_context.RecId);

        purchReqLineTmpReviewSummary.insert();

        return purchReqLineTmpReviewSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateReviewAssignmentServer</Name>
				<Source><![CDATA[
        private static container populateReviewAssignmentServer(RefRecId _contextRecId, RefRecId _workflowStepRecId, RefRecId _workflowTrackingStatusRecId)
    {
        container                     con;
        WorkflowTrackingTable         workflowTracking;
        WorkflowTrackingWorkItem      workflowTrackingWorkItem;
        WorkflowWorkItemTable         workflowWorkItem;
        WorkflowWorkItemQueueAssignee workItemQueueAssignee;
        PurchReqReviewStatus          reviewStatus;
        Set                           reviewerSet       = new Set(Types::String);

        void checkAndAddAssignment(UserId _userId, PurchReqReviewStatus _reviewStatus, utcdatetime _date)
        {
            if (!reviewerSet.in(_userId))
            {
                reviewerSet.add(_userId);

                con += [[ _userId, _reviewStatus, DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(_date, DateTimeUtil::getUserPreferredTimeZone())) ]];
            }
        }

        // Check for a change request or a return (most likely a rejection); if one exists it trumps everything else
        select firstonly RecId, Type, UserId, CreatedDateTime from workflowWorkItem
            order by workflowWorkItem.CreatedDateTime desc
                where workflowWorkItem.Status == WorkflowWorkItemStatus::Pending
            exists join workflowTrackingWorkItem
                where workflowTrackingWorkItem.WorkflowWorkItemTable == workflowWorkItem.RecId
            exists join workflowTracking
                where workflowTracking.RecId                       == workflowTrackingWorkItem.WorkflowTrackingTable &&
                      workflowTracking.TrackingContext             == WorkflowTrackingContext::WorkItem &&
                      workflowTracking.TrackingType                == WorkflowTrackingType::Creation &&
                      workflowTracking.WorkflowTrackingStatusTable == _workflowTrackingStatusRecId;
        if (workflowWorkItem && (workflowWorkItem.Type == WorkflowWorkItemType::RequestChange ||
                                 workflowWorkItem.Type == WorkflowWorkItemType::Return))
        {
            con += [[ workflowWorkItem.UserId, PurchReqReviewStatus::Pending, DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(workflowWorkItem.CreatedDateTime, DateTimeUtil::getUserPreferredTimeZone())) ]];
        }
        else
        {
            while select RecId, Status, Queue, IsClaimed, UserId, CreatedDateTime from workflowWorkItem
                exists join workflowTrackingWorkItem
                    where workflowTrackingWorkItem.WorkflowWorkItemTable == workflowWorkItem.RecId
                exists join workflowTracking
                    where workflowTracking.RecId                       == workflowTrackingWorkItem.WorkflowTrackingTable &&
                          workflowTracking.TrackingContext             == WorkflowTrackingContext::WorkItem &&
                          workflowTracking.TrackingType                == WorkflowTrackingType::Creation &&
                          workflowTracking.WorkflowStepTable           == _workflowStepRecId &&
                          workflowTracking.WorkflowTrackingStatusTable == _workflowTrackingStatusRecId
            {
                if (workflowWorkItem.Status == WorkflowWorkItemStatus::Completed)
                {
                    reviewStatus = PurchReqReviewStatus::Approved;
                }
                else
                {
                    reviewStatus = PurchReqReviewStatus::Pending;
                }

                if (workflowWorkItem.Queue && workflowWorkItem.IsClaimed == NoYes::No)
                {
                    while select User from workItemQueueAssignee
                        where workItemQueueAssignee.WorkitemQueue == workflowWorkItem.Queue
                    {
                        checkAndAddAssignment(workItemQueueAssignee.User, reviewStatus, workflowWorkItem.CreatedDateTime);
                    }
                }
                else
                {
                    checkAndAddAssignment(workflowWorkItem.UserId, reviewStatus, workflowWorkItem.CreatedDateTime);
                }
            }
        }

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateReviewSummaryServer</Name>
				<Source><![CDATA[
        private static container populateReviewSummaryServer(RefRecId _purchReqLineRecId)
    {
        container                       con;
        PurchReqLine                    purchReqLine;
        PurchReqLineHistory             purchReqLineHistory;
        WorkflowTrackingStatusTable     workflowTrackingStatus;
        WorkflowTrackingTable           workflowTracking;
        utcdatetime                     validDate               = DateTimeUtil::utcNow();
        WorkflowStepName                stepName;
        TransDate                       stepSinceDate;
        PurchReqRequisitionStatus       status;
        TransDate                       statusSinceDate;
        RefRecId                        workflowTrackingStatusRecId;
        RefRecId                        workflowStepRecId;

        /* Get the current status */
        select firstOnly validTimeState(validDate)
            createdDateTime, RequisitionStatus from purchReqLine
                where purchReqLine.RecId == _purchReqLineRecId

            outer join createdDateTime from purchReqLineHistory
                where purchReqLineHistory.PurchReqLine == purchReqLine.RecId

            outer join recId from workflowTrackingStatus
                order by workflowTrackingStatus.createdDateTime desc
                where workflowTrackingStatus.ContextTableId == purchReqLine.TableId &&
                      workflowTrackingStatus.ContextRecId   == purchReqLine.RecId;

        /* Current step */
        select firstOnly recId, Name, createdDateTime, WorkflowStepTable
            from workflowTracking
            order by workflowTracking.createdDateTime desc
                where workflowTracking.WorkflowTrackingStatusTable == workflowTrackingStatus.RecId &&
                      workflowTracking.TrackingContext             == WorkflowTrackingContext::Step &&
                      workflowTracking.TrackingType                == WorkflowTrackingType::Creation;

        if (purchReqLine != null)
        {
            status = purchReqLine.RequisitionStatus;

            if (purchReqLineHistory != null)
            {
                statusSinceDate = DateTimeUtil::date(purchReqLineHistory.createdDateTime);
            }
            else
            {
                statusSinceDate = DateTimeUtil::date(purchReqLine.createdDateTime);
            }

            if (workflowTracking != null)
            {
                stepName                    = workflowTracking.Name;
                stepSinceDate               = DateTimeUtil::date(workflowTracking.createdDateTime);
                workflowTrackingStatusRecId = workflowTrackingStatus.RecId;
                workflowStepRecId           = workflowTracking.WorkflowStepTable;
            }

            con = [status, statusSinceDate, stepName, stepSinceDate, workflowTrackingStatusRecId, workflowStepRecId];
        }

        return con;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>