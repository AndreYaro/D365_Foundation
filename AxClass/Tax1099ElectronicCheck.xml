<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Tax1099ElectronicCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>Tax1099ElectronicCheck</c> class is used to validate and format IRS data.
/// </summary>
public class Tax1099ElectronicCheck
{
    str qr_TransDate, qr_VendAccount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAll</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the settings of required IRS data; validates the transmitter, software vendor, company information and vendor.
    /// </summary>
    /// <param name = "_vendITax1099View">Optional object that implements VendITax1099View for date and vendor ranges</param>
    /// <returns>
    ///    true if the IRS data is valid; otherwise, false.
    /// </returns>
    public boolean checkAll(VendITax1099View _vendITax1099View = null)
    {
        boolean transmitterOK = true;
        boolean softwareVendorOK = true;
        boolean companyOK = true;
        boolean vendorOK = true;
        TransDate fromDate;
        TransDate toDate;
        VendAccount fromVendAccount;
        VendAccount toVendAccount;
        boolean ret;
        Tax1099ValidationErrors tax1099ValidationErrors;
        VendSettlementTax1099 vendSettlementTax1099;
        Tax1099TransmitterParameters transmitter;
        Tax1099SoftwareVendParameters softwareVendor;
        CompanyInfo companyInfo;
        VendTable vendTable;
        str lastVendAccount = '';

        if (_vendITax1099View != null)
        {
            fromDate = _vendITax1099View.fromDate();
            toDate = _vendITax1099View.toDate();
            fromVendAccount = _vendITax1099View.fromVendor();
            toVendAccount = _vendITax1099View.toVendor();
        }
        else
        {
            fromDate = dateNull();
            toDate = dateMax();
            fromVendAccount = '';

            select maxof(VendAccount)
                from vendSettlementTax1099;
            toVendAccount = vendSettlementTax1099.VendAccount;
        }

        delete_from tax1099ValidationErrors;
        // Validate data for the Transmitter record
        transmitter = Tax1099TransmitterParameters::find();
        transmitterOK = transmitter.validateIRSData(true);

        softwareVendor = Tax1099SoftwareVendParameters::find();
        softwareVendorOK = softwareVendor.validateIRSData(true);

        companyInfo = CompanyInfo::find();
        companyOK = companyInfoHelper::validateIRSData(true, companyInfo);

        // We want to identify all vendor records that don't meet the IRS standards
        // However, we only want to set our value once

        while select VendAccount
            from vendSettlementTax1099
        where vendSettlementTax1099.TransDate <= toDate
            && vendSettlementTax1099.TransDate >= fromDate
            && vendSettlementTax1099.VendAccount <= toVendAccount
            && vendSettlementTax1099.VendAccount >= fromVendAccount
        {
            if (vendSettlementTax1099.VendAccount != lastVendAccount)
            {
                lastVendAccount = vendSettlementTax1099.VendAccount;
                vendTable = VendTable::find(vendSettlementTax1099.VendAccount);

                if (vendTable.Tax1099Reports == true && !vendTable.validateIRSData(true))
                {
                    vendorOK = vendorOK == true ? false : false;
                }
            }
        }

        ret = transmitterOK && softwareVendorOK && companyOK && vendorOK;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the vendor account and the transaction date. The information is passed as a container.
    /// </summary>
    /// <param name="_c">
    ///    A container with a vendor account and a transaction date.
    /// </param>
    public void setValues(container _c)
    {
        [qr_VendAccount, qr_TransDate] = _c;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTax1099ErrorForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays a form with all the validation errors.
    /// </summary>
    /// <param name = "_vendITax1099View">The view to pass to the displayed form.</param>
    public void showTax1099ErrorForm(VendITax1099View _vendITax1099View)
    {
        Args ar = new Args();
        FormRun fr;

        ar.name(formstr(Tax1099ValidationErrors));
        ar.parmObject(_vendITax1099View);
        fr = classfactory.formRunClass(ar);

        fr.init();
        fr.run();
        fr.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatTIN</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Formats the Taxpayer Identification Number (TIN).
    /// </summary>
    /// <param name="_tin">
    ///    The TIN.
    /// </param>
    /// <param name="_taxIDType">
    ///    The IRS tax type; optional.
    /// </param>
    /// <returns>
    ///    The formatted TIN.
    /// </returns>
    public static Tax1099RegNum formatTIN(Tax1099RegNum _tin, TaxIDType _taxIDType = TaxIDType::Unknown)
    {
        #define.toRemove("ABCDEFGHIJKLMNOPQRSTUVWXYZ- ")
        str tempStr;
        int sl;

        tempStr = strrem(_tin,#toRemove);
        sl = strlen(tempStr);
        if (sl == 9)
        {
            switch (_taxIDType)
            {
                case TaxIDType::ATIN:
                    tempStr = substr(tempStr, 1,3) + '-' + substr(tempStr, 4, 2) + '-' + substr(tempStr, 6, 4);
                    break;
                case TaxIDType::ITIN:
                    tempStr = substr(tempStr, 1,3) + '-' + substr(tempStr, 4, 2) + '-' + substr(tempStr, 6, 4);
                    break;
                case TaxIDType::SSN :
                    tempStr = substr(tempStr, 1,3) + '-' + substr(tempStr, 4, 2) + '-' + substr(tempStr, 6, 4);
                    break;
                case TaxIDType::EIN:
                    tempStr = substr(tempStr, 1,2) + '-' + substr(tempStr, 3, 7);
                    break;
                case TaxIDType::Unknown:
                    tempStr = _tin;
                    break;
            } // end switch
        } // if
        return tempStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidCUSIPId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the format of the CUSIP identifiers for North American Securities.
    /// </summary>
    /// <param name="_cusipId">
    ///    The <c>CUSIPId</c> value.
    /// </param>
    /// <returns>
    ///    true if the <c>CUSIPId</c> value is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    If any disallowed characters are detected, or the length of the string is invalid, or the check sum
    ///    digit is invalid this method will return false; otherwise, true.
    /// </remarks>
    public static boolean isValidCUSIPId(CUSIPId _cusipId)
    {
        /* The Check Digit is computed using Modulus 10 Double Add Double technique as follows:
            1) Collect the digits occupying the odd- and even-numbered places in the CUSIP,
               converting any letters to numbers if need be. Letters are converted to numbers by
               adding their ordinal position in the alphabet to 9, such that A = 10 and M = 22.
            2) Every second digit is then multiplied by two.
            3) Add the results of the eight multiplications.
            4) Subtract the sum from the next highest multiple of 10. The result is the Check Digit.

            NOTE: In addition to digits 0-9 and letters A-Z, three characters *, @, and # may also
            be used for private placements (Private Placement Number, PPN). When calculating
            the check digit for such issues, use the numeric values of * = 36, @ = 37, and # = 38.
        */

        #define.digits('0123456789')
        #define.alpha('abcdefghijklmnopqrstuvwxyz')
        #define.alphaLength(26)
        #define.CUSIPLength(9)
        #define.BaseCUSIPLength(6)

        int charIndex = #CUSIPLength - 1;
        int checkSum = 0;
        str curChar;
        int digitSum;
        boolean multiply = true;
        int ordinalPos;

        // validate the length of the string
        if (strlen(_cusipId) != #CUSIPLength)
        {
            return false;
        }

        // validate the format of the Base CUSIP
        if (strrem(substr(_cusipId, 0, #BaseCUSIPLength), #digits))
        {
            return false;
        }

        for (checkSum = 0; charIndex > 0; charIndex--)
        {
            curChar = substr(_cusipId, charIndex, 1);

            if (isInteger(curChar))
            {
                digitSum = str2int(curChar);
            }
            else if (curChar == '*')
            {
                 digitSum = 36;
            }
            else if (curChar == '@')
            {
                 digitSum = 37;
            }
            else if (curChar == '#')
            {
                 digitSum = 38;
            }
            else
            {
                // attempt to retieve the ordinal position of alpha character
                ordinalPos = strscan(#alpha, curChar, 0, #alphaLength);
                if (ordinalPos == 0)
                {
                    return false;
                }

                // use the ordinal position of the character in the alphabet
                digitSum = ordinalPos + 9;
            }

            if (multiply)
            {
                digitSum = digitSum * 2;
            }

            multiply = !multiply;
            checkSum += real2int(digitSum / 10) + (digitSum mod 10);
        }

        checkSum = checkSum mod 10;
        checkSum = 10 - checkSum;
        checkSum = checkSum mod 10;

        // compare the check digit with the computed check sum value
        if (checkSum != str2int(substr(_cusipId, 9, 1)))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidTINIRS</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the format of the Taxpayer Identification Number (TIN). This method removes all hyphens,
    ///    that is, "-", from the TIN, calculates the length of the string with the hyphens removed, and
    ///    ensures that after the hyphens are removed, only numeric characters are used.
    /// </summary>
    /// <param name="_tin">
    ///    The TIN.
    /// </param>
    /// <returns>
    ///    true if the TIN data is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    If any non-numeric characters are found, or if the length of the string after the hyphens have been
    ///    removed is not nine characters, this method will return false; otherwise, true.
    /// </remarks>
    public static boolean isValidTINIRS(Tax1099RegNum _tin)
    {
        /* This function removes all hypens (-) from the TIN (Taxpayer Identification Number)
            calculates the length of the string with the hypens removed, and ensures that after the
            hypens are removed that only numeric characters were used. If any non numeric characters
            are found or if the length of the string with the hypens removed is not 9 the this method
            will display an error messsage
        */
        #define.ZeroToNine("0123456789")
        #define.Hypen("-")

        int i, sl;
        str tempStr;

        tempStr = strrem(_tin, #Hypen);
        sl = strlen(tempStr);
        i = strnfind(tempStr, #ZeroToNine, 1, sl);
        if (i != 0 || sl != 9)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tax1099EntryValidation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates a tax entry.
    /// </summary>
    /// <param name="_c">
    ///    A container.
    /// </param>
    /// <returns>
    ///    true if the entry is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The possible values for the <paramref name="_c" />
    ///     parameter are:
    ///    <list type="bullet">
    ///       <item>
    ///          <description>The total amount.</description>
    ///       </item>
    ///       <item>
    ///          <description>The 1099 amount.</description>
    ///       </item>
    ///       <item>
    ///          <description>The 1099 state amount.</description>
    ///       </item>
    ///       <item>
    ///          <description>The 1099 box.</description>
    ///       </item>
    ///       <item>
    ///          <description>The 1099 state.</description>
    ///       </item>
    ///    </list>
    /// </remarks>
    public static boolean tax1099EntryValidation(container _c)
    {
        /*
            What are we testing for?
            We test that if a federal amount has been entered that:
            - it matches the sign of the amount for that line
            - that the 1099 amount is not more that the total for the line
            - that if the 1099 box chosen if for state with holding that no federal amount has been entered

            We test that if a state amount has been entered that:
            - it matches the sign of the amount for that line
            - that the 1099 state amount is not more that the total for the line
            - that if the 1099 box chosen for federal purposes only that no state amount has been entered

            We want all possible error messages shown at one time to help the user; therefore, we have created
            several boolean variables so as not to return with the first error found.

            This is used by the following table methods:
            - LedgerJournalTrans --> check1099Amounts
            - PurchLine --> check1099Amounts

            This was also used by VendTrans --> check1099Amounts; however, this was removed
        */

        AmountMST totalAmount; // this is the total amount for the line including taxes
        Tax1099Amount tax1099Amount;
        Tax1099StateAmount tax1099StateAmount;
        Tax1099FieldsRecId tax1099FieldsRecId;
        Tax1099State tax1099State;
        Tax1099Fields tax1099Fields;
        boolean fedMatchingSign = true;
        boolean stateMatchingSign = true;
        boolean fedAmountOK = true;
        boolean stateAmountOK = true;
        boolean fedAmountSNBE = true; // SNBE = Should Not Be Entered
        boolean stateAmountSNBE = true; // SNBE = Should Not Be Entered
        boolean fedBoxNotBlank = true;
        boolean stateNotBlank = true;

        totalAmount = conPeek(_c, 1);
        tax1099Amount = conPeek(_c, 2);
        tax1099StateAmount = conPeek(_c, 3);
        tax1099FieldsRecId = conPeek(_c, 4);
        tax1099State = conPeek(_c, 5);
        tax1099Fields = Tax1099Fields::find(tax1099FieldsRecId);

        if (tax1099Amount != 0)
        {
            if (!isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
            {
                if (tax1099FieldsRecId == 0)
                {
                    fedBoxNotBlank = checkFailed(strFmt("@SYS86315", "@SYS23885"));
                }
            }

            if ((tax1099Amount > 0 && totalAmount < 0) || (tax1099Amount < 0 && totalAmount > 0))
            {
               fedMatchingSign = checkFailed("@SYS28758");
            }

            if (abs(tax1099Amount) > abs(totalAmount))
            {
                fedAmountOK = checkFailed(strFmt("@SYS84847", "@SYS58659"));
            }
        }

        if (tax1099StateAmount != 0) // Check Tax1099StateAmount
        {
            if (tax1099State == '')
            {
                fedBoxNotBlank = checkFailed(strFmt("@SYS86315", "@SYS21924"));
            }

            if ((tax1099StateAmount > 0 && totalAmount < 0) || (tax1099StateAmount < 0 && totalAmount > 0))
            {
               stateMatchingSign = checkFailed("@SYS28758");
            }

            if (abs(tax1099StateAmount) > abs(totalAmount))
            {
                stateAmountOK = checkFailed(strFmt("@SYS84847", "@SYS58659"));
            }
        }

        if (tax1099Fields && (tax1099StateAmount != 0 || tax1099State != ''))
        {
            if (tax1099Fields.Tax1099Box == Tax1099MISC::federalIncomeTaxWithheld().tax1099Box
                || tax1099Fields.Tax1099Box == Tax1099DIV::federalIncomeTaxWithheld().tax1099Box
                || tax1099Fields.Tax1099Box == Tax1099INT::federalIncomeTaxWithheld().tax1099Box
                || (tax1099Fields.Tax1099Box == Tax1099G::federalIncomeTaxWithheld().tax1099Box && isConfigurationkeyEnabled(configurationKeyNum(PublicSector))))
            {
                stateAmountSNBE = checkFailed("@SYS84854");
            }
        }

        if (tax1099Amount != 0
            && tax1099Fields
            && (tax1099Fields.Tax1099Box == Tax1099MISC::stateTaxWithheld().tax1099Box
               || tax1099Fields.Tax1099Box == Tax1099DIV::stateTaxWithheld().tax1099Box
               || tax1099Fields.Tax1099Box == Tax1099INT::stateTaxWithheld().tax1099Box
               || tax1099Fields.Tax1099Box == Tax1099OID::stateTaxWithheld().tax1099Box))
        {
            fedAmountSNBE = checkFailed("@SYS84855");
        }

        return fedMatchingSign
            && stateMatchingSign
            && fedAmountOK
            && stateAmountOK
            && fedAmountSNBE
            && stateAmountSNBE
            && fedBoxNotBlank
            && stateNotBlank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateForIRS</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates required fields for the IRS. It is possible to log errors by setting the <paramref name="_writeToFile" /> parameter to a value of true.
    /// </summary>
    /// <param name="_field2Check">
    ///    The field to validate.
    /// </param>
    /// <param name="_tableLabel">
    ///    The table name.
    /// </param>
    /// <param name="_fieldLabel">
    ///    The field name.
    /// </param>
    /// <param name="_writeToFile">
    ///    A log error.
    /// </param>
    /// <param name="_vendAccount">
    ///    The vendor account; optional.
    /// </param>
    /// <returns>
    ///    true if the field is valid; otherwise, false.
    /// </returns>
    public static boolean validateForIRS(str _field2Check, TableLabel _tableLabel, FieldLabel _fieldLabel, boolean _writeToFile, VendAccount _vendAccount = '')
    {
        boolean ret = true;
        Tax1099ValidationErrors tax1099ValidationErrors;

        ret = _field2Check == '' ? false : true;

        if (ret == false)
        {
            if (_writeToFile)
            {
                ttsbegin;
                select forupdate tax1099ValidationErrors;
                tax1099ValidationErrors.TableLabel = _tableLabel;
                tax1099ValidationErrors.FieldLabel = _fieldLabel;
                tax1099ValidationErrors.ErrorMsg = strfmt("@SYS84753", _fieldLabel);
                tax1099ValidationErrors.VendAccount = _vendAccount;
                tax1099ValidationErrors.insert();
                ttscommit;
            }
            else
            {
                checkFailed(strfmt("@SYS84753", _fieldLabel));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTINIRS</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the format of the Taxpayer Identification Number (TIN) and displays an error where appropriate.
    /// </summary>
    /// <param name="_tin">
    ///    The TIN.
    /// </param>
    /// <param name="_tableLabel">
    ///    The table name.
    /// </param>
    /// <param name="_fieldLabel">
    ///    The field name.
    /// </param>
    /// <param name="_writeToFile">
    ///    A log error.
    /// </param>
    /// <param name="_vendAccount">
    ///    The vendor account; optional.
    /// </param>
    /// <param name="_taxIDType">
    ///    The IRS tax type; optional.
    /// </param>
    /// <returns>
    ///    true if the TIN is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    If the TIN is determined to be invalid, this method will display an error message. It is possible to log
    ///    errors by setting the <paramref name="_writeToFile" /> parameter to true.
    /// </remarks>
    public static boolean validateTINIRS(Tax1099RegNum _tin, TableLabel _tableLabel, FieldLabel _fieldLabel,
                                  boolean _writeToFile, VendAccount _vendAccount = '', TaxIDType _taxIDType = TaxIDType::Unknown)
    {
        Tax1099ValidationErrors tax1099ValidationErrors;

        // validate the input Tax Identifier
        boolean ret = Tax1099ElectronicCheck::isValidTINIRS(_tin);
        if (ret == false)
        {
            if (_writeToFile)
            {
                select forupdate tax1099ValidationErrors;
                tax1099ValidationErrors.TableLabel = _tableLabel;
                tax1099ValidationErrors.FieldLabel = _fieldLabel;
                tax1099ValidationErrors.ErrorMsg = "@SYS84754";
                tax1099ValidationErrors.VendAccount = _vendAccount;
                tax1099ValidationErrors.insert();
            }
            else
            {
                checkFailed("@SYS84754");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>