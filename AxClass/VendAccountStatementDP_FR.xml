<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendAccountStatementDP_FR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendAccountStatementDP_FR</c> class is the report data provider class for
/// <c>VendAccountStatement_FR</c> SSRS Report.
/// </summary>
/// <remarks>
/// The <c>VendAccountStatementDP_FR</c> is the RDP class for the <c>VendAccountStatement_FR SSRS</c>
/// Report.
/// </remarks>
[
    SRSReportQueryAttribute(querystr(VendAccountStatement_FR)),
    SRSReportParameterAttribute(classstr(VendAccountStatementContract_FR))
]
class VendAccountStatementDP_FR extends SRSReportDataProviderBase
{
    FromDate     fromDate;
    ToDate       toDate;
    TransDate    assessmentDate;
    NoYes        onlyOpen;
    NoYes        totalByLedgerAccount;

    TmpCustVendAccountStatement_FR    tmpVendStatement;
    TmpCustVendAccountStatement_FR    tmpVendStatementSRS;
    str 30                            periodStatus;
    Map                               settleMap;
    Counter                           settleMax;
    AmountMST                         balanceMST;
    AmountCur                         balanceCur;
    VendTable                         vendTable;
    VendTrans                         vendTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calBalanceMST</Name>
				<Source><![CDATA[
    private void calBalanceMST()
    {
        if (tmpVendStatement.PeriodCode == FiscalPeriodType::Opening)
        {
            balanceMST  = tmpVendStatement.BalanceMST;
        }
        else
        {
            balanceMST += tmpVendStatement.DebitMST - tmpVendStatement.CreditMST;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the parameters from report dialog and sets them to relevant variables.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    private boolean getFromDialog()
    {
        boolean    ret = true;

        VendAccountStatementContract_FR contract = this.parmDataContract() as VendAccountStatementContract_FR;

        fromDate             = contract.parmFromDate();
        toDate               = contract.parmToDate();
        assessmentDate       = contract.parmAssessmentDate();
        if (!assessmentDate && VendAccountStatementDPSetDefaultAssessmentDateFlight::instance().isEnabled())
        {
            assessmentDate = toDate;
        }
        onlyOpen             = contract.parmOnlyOpen();
        totalByLedgerAccount = contract.parmTotalByLedgerAccount();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpCustVendAccountStatement_FR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from the <c>TmpCustVendAccountStatement_FR</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>TmpCustVendAccountStatement_FR</c>.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(TmpCustVendAccountStatement_FR))
    ]
    public TmpCustVendAccountStatement_FR getTmpCustVendAccountStatement_FR()
    {
        select tmpVendStatementSRS;
        return tmpVendStatementSRS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openingBalance</Name>
				<Source><![CDATA[
    private AmountMST openingBalance()
    {
        if (fromDate)
        {
            if (onlyOpen)
            {
                balanceMST = vendTable.openBalanceMST(dateNull(),fromDate-1, assessmentDate);
            }
            else
            {
                balanceMST = vendTable.balanceMST(dateNull(),fromDate-1);
            }
        }
        else
        {
            balanceMST = 0;
        }
        return balanceMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openingBalanceCur</Name>
				<Source><![CDATA[
    private AmountCur openingBalanceCur()
    {
        if (fromDate)
        {
            if (onlyOpen)
            {
                balanceCur = vendTable.openBalanceCur(dateNull(),fromDate-1, assessmentDate);
            }
            else
            {
                balanceCur = vendTable.balanceCurrency(dateNull(),fromDate-1);
            }
        }
        else
        {
            balanceCur = 0;
        }
        return balanceCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openingBalanceWithoutVendTrans</Name>
				<Source><![CDATA[
    private void openingBalanceWithoutVendTrans(VendAccount  _vendAccount)
    {
        VendTrans localVendTrans;

        if (fromDate)
        {
            select sum(AmountMST),sum(AmountCur) from localVendTrans
                where localVendTrans.AccountNum  == _vendAccount
                   && localVendTrans.TransDate   >= dateNull()
                   && localVendTrans.TransDate   <= fromDate-1;

            balanceMST = localVendTrans.AmountMST;
            balanceCur = localVendTrans.AmountCur;
        }
        else
        {
            balanceMST = 0;
            balanceCur = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareTitle</Name>
				<Source><![CDATA[
    private void prepareTitle()
    {
        tmpVendStatementSRS.UserId          = curuserid();
        tmpVendStatementSRS.PeriodStatus    = periodStatus;
        tmpVendStatementSRS.CreditMSTTxt    = strfmt("%1 %2","@SYS7084", Ledger::accountingCurrency(CompanyInfo::current()));
        tmpVendStatementSRS.DebitMSTTxt     = strfmt("%1 %2","@SYS9512", Ledger::accountingCurrency(CompanyInfo::current()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the SSRS report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic and called by SSRS at runtime.
    /// </remarks>
    public void processReport()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceFR00002, funcName());

        VendSettlement                  vendSettlement1;
        VendSettlement                  vendSettlement2;
        VendAccount                     vendAccount;
        AmountMST                       tmpBalanceMST,tmpBalanceMST2;
        AmountCur                       tmpBalanceCur,tmpBalanceCur2;
        int                             charInt,tempInt;
        Query                           vendQuery= new Query();
        QueryRun                        vendQueryRun;
        QueryRun                        queryRun;
        boolean                         foundTrans;
        container                       settleCompanies;
        LedgerDimensionDefaultAccount   ledgerDimensionDefaultAccount;

        VendAccountStatementContract_FR contract = this.parmDataContract() as VendAccountStatementContract_FR;

        MainAccount                         mainAccount;
        DimensionAttributeValueCombination  davc;

        this.getFromDialog();
        this.setPeriodStatus();
        this.prepareTitle();

        queryRun = new QueryRun(this.parmQuery());

        queryRun.query().dataSourceTable(tablenum(VendTrans)).findRange(fieldnum(VendTrans,TransDate)).value(queryRange(fromDate,toDate));

        if (onlyOpen)
        {
            queryRun.query().dataSourceTable(tablenum(VendTrans)).findRange(fieldnum(VendTrans,Closed)).value(queryRangeConcat(queryRange(assessmentDate + 1, maxdate()), dateNull()));
        }

        Set settleId;

        while (queryRun.next())
        {
            vendTable = queryRun.get(tablenum(VendTable));

            if (SysReportRun::changed(queryRun,tablenum(VendTable)))
            {
                settleMap = new Map(Types::String, Types::Class);
                settleMax = 0;

                if (foundTrans) // print closing balance for previous
                {
                    tmpVendStatement.clear();
                    tmpVendStatement.CustVendAC   = vendAccount;
                    tmpVendStatement.CustVendName = VendTable::find(vendAccount).name();
                    tmpVendStatement.TransDate    = toDate;
                    tmpVendStatement.PeriodCode   = FiscalPeriodType::Closing;
                    tmpVendStatement.TransTxt     = "@SYS15867";
                    tmpVendStatement.BalanceMST   = tmpBalanceMST;
                    tmpVendStatement.insert();
                }
                vendAccount = vendTable.AccountNum;

                tmpBalanceMST = this.openingBalance();
                tmpBalanceCur = this.openingBalanceCur();

                tmpVendStatement.clear();
                tmpVendStatement.CustVendAC   = vendAccount;
                tmpVendStatement.CustVendName = VendTable::find(vendAccount).name();
                tmpVendStatement.TransDate    = fromDate;
                tmpVendStatement.PeriodCode   = FiscalPeriodType::Opening;
                tmpVendStatement.TransTxt     = "@SYS939";
                tmpVendStatement.BalanceMST   = tmpBalanceMST;
                if (tmpBalanceMST > 0)
                {
                    tmpVendStatement.DebitMST  = tmpBalanceMST;
                    tmpVendStatement.DebitCur  = tmpBalanceCur;
                }
                else
                {
                    tmpVendStatement.CreditMST = -tmpBalanceMST;
                    tmpVendStatement.CreditCur = -tmpBalanceCur;
                }

                tmpVendStatement.insert();

                foundTrans = true;
            }

            vendTrans = queryRun.get(tablenum(VendTrans));

            if (onlyOpen)
            {
                vendTrans.transactionPerDate(assessmentDate);
            }
            tmpVendStatement.clear();

            tmpVendStatement.CustVendAC         = vendTrans.AccountNum;
            tmpVendStatement.CustVendName       = VendTable::find(vendAccount).name();
            tmpVendStatement.TransDate          = vendTrans.TransDate;
            tmpVendStatement.PeriodCode         = FiscalPeriodType::Operating;
            tmpVendStatement.Voucher            = vendTrans.Voucher;
            tmpVendStatement.InvoiceId          = vendTrans.Invoice;
            tmpVendStatement.TransTxt           = vendTrans.Txt;
            tmpVendStatement.CurrencyCode       = vendTrans.CurrencyCode;
            tmpVendStatement.LedgerDimension    = VendLedgerAccounts::summaryLedgerDimension(vendTrans.AccountNum,vendTrans.PostingProfile);
            ledgerDimensionDefaultAccount       = VendLedgerAccounts::summaryLedgerDimension(vendTrans.AccountNum,vendTrans.PostingProfile);
            tmpVendStatement.MainAccountId      = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(ledgerDimensionDefaultAccount);
            tmpVendStatement.VendTransRefRecId  = vendTrans.RecId;

            // Amounts

            if (onlyOpen)
            {
                vendTrans.AmountMST = vendTrans.remainAmountMST();
                vendTrans.AmountCur = vendTrans.remainAmountCur();
            }

            if ((vendTrans.AmountMST > 0 && vendTrans.Correct == NoYes::No) ||
                (vendTrans.AmountMST < 0 && vendTrans.Correct == NoYes::Yes)  )
            {
                tmpVendStatement.DebitMST  = vendTrans.AmountMST;
                tmpVendStatement.DebitCur  = vendTrans.AmountCur;
            }
            else
            {
                tmpVendStatement.CreditMST = -vendTrans.AmountMST;
                tmpVendStatement.CreditCur = -vendTrans.AmountCur;
            }

            // Balance

            tmpBalanceMST += tmpVendStatement.DebitMST - tmpVendStatement.CreditMST;
            tmpVendStatement.BalanceMST = tmpBalanceMST;

            // Settlement
            if (!onlyOpen)
            {              
                settleId = new Set(Types::Integer);

                while select TransRecId, SettleAmountCur, OffsetRecid, OffsetCompany, TransDate, OffsetTransVoucher
                    from vendSettlement1
                        where vendSettlement1.TransRecId == vendTrans.RecId
                            && vendSettlement1.SettleAmountCur != 0
                            && vendSettlement1.OffsetRecid != 0
                            && vendSettlement1.OffsetCompany != ''
                            && vendSettlement1.TransDate <= assessmentDate
                {
                    settleMax++;

                    if (settleMap.exists(vendTrans.Voucher))
                    {
                        settleId = settleMap.lookup(vendTrans.Voucher);
                    }
                    settleId.add(settleMax);

                    if (this.adjustSettleMap(
                            vendSettlement1.OffsetTransVoucher,
                            settleId,
                            settleMax))
                    {
                        settleMap.insert(vendTrans.Voucher, settleId);

                        if (!confind(settleCompanies, vendSettlement1.OffsetCompany))
                        {
                            settleCompanies += vendSettlement1.OffsetCompany;
                        }

                        while select crosscompany:settleCompanies vendSettlement2
                            where vendSettlement2.TransRecId == vendSettlement1.OffsetRecid
                                && vendSettlement2.TransCompany == vendSettlement1.OffsetCompany
                                && vendSettlement2.SettleAmountCur != 0
                                && vendSettlement2.OffsetRecid != 0
                                && vendSettlement2.TransDate <= assessmentDate
                        {
                            this.adjustSettleMap(
                                vendSettlement2.OffsetTransVoucher,
                                settleId,
                                settleMax);
                        }
                    }
                    else
                    {
                        settleId.remove(settleMax);
                        settleMax--;
                    }
                }
            }

            if (settleId != null && settleId.elements() && vendTrans.LastSettleDate && vendTrans.LastSettleVoucher)
            {
                container resCon;
                SetEnumerator se = settleId.getEnumerator();
                while (se.moveNext())
                {
                    str settlementCode;
                    tempInt = se.current();
                    while (tempInt > 0)
                    {
                        charInt = (tempInt-1) mod 26;
                        tempInt = (tempInt-1) div 26;

                        settlementCode = num2char(charInt+char2num('a',1)) + settlementCode;
                    }

                    resCon += settlementCode;
                }

                tmpVendStatement.SettlementCode = con2Str(resCon);

            }

            // Create the transaction

            tmpVendStatement.insert();
        }

        if (foundTrans) // print closing balance for the last one
        {
            tmpVendStatement.clear();
            tmpVendStatement.CustVendAC   = vendAccount;
            tmpVendStatement.CustVendName = VendTable::find(vendAccount).name();
            tmpVendStatement.TransDate    = toDate;
            tmpVendStatement.PeriodCode   = FiscalPeriodType::Closing;
            tmpVendStatement.TransTxt     = "@SYS15867";
            tmpVendStatement.BalanceMST   = tmpBalanceMST;
            tmpVendStatement.insert();
        }

        //while select * from vendTable
        vendQuery.addDataSource(tablenum(VendTable));
        SysQuery::mergeRanges(vendQuery, this.parmQuery());

        vendQueryRun = new QueryRun(vendQuery);

        while  (vendQueryRun.next())
        {
            vendTable =  vendQueryRun.get(tablenum(VendTable));

            select * from tmpVendStatement where tmpVendStatement.CustVendAC == vendTable.AccountNum;

            if (!tmpVendStatement)
            {
                this.openingBalanceWithoutVendTrans(vendTable.AccountNum);

                tmpBalanceMST  = balanceMST;
                tmpBalanceCur  = balanceCur;
                tmpBalanceMST2 = this.openingBalance();
                tmpBalanceCur2 = this.openingBalanceCur();

                if (tmpBalanceMST2)
                {
                    tmpVendStatement.clear();
                    tmpVendStatement.CustVendAC   = vendTable.AccountNum;
                    tmpVendStatement.CustVendName = VendTable::find(vendTable.AccountNum).name();
                    tmpVendStatement.TransDate    = fromDate;
                    tmpVendStatement.PeriodCode   = FiscalPeriodType::Opening;
                    tmpVendStatement.TransTxt     = "@SYS939";
                    tmpVendStatement.BalanceMST   =  tmpBalanceMST==tmpBalanceMST2 ? tmpBalanceMST:tmpBalanceMST2;
                    if (tmpVendStatement.BalanceMST > 0)
                    {
                        tmpVendStatement.DebitMST   = tmpVendStatement.BalanceMST;
                        tmpVendStatement.DebitCur   = tmpBalanceCur==tmpBalanceCur2 ? tmpBalanceCur:tmpBalanceCur2;
                    }
                    else
                    {
                        tmpVendStatement.CreditMST  = -tmpVendStatement.BalanceMST;
                        tmpVendStatement.CreditCur  = tmpBalanceCur==tmpBalanceCur2 ? -tmpBalanceCur:-tmpBalanceCur2;
                    }

                    tmpVendStatement.insert();
                }
            }
        }

        if (totalByLedgerAccount)
        {
            while select LedgerDimension from tmpVendStatement
                order by CustVendAC, PeriodCode, TransDate
                join RecId, MainAccount from davc
                    where davc.RecId == tmpVendStatement.LedgerDimension
                    join RecId from mainAccount
                    order by MainAccountId
                    where mainAccount.RecId == davc.MainAccount
            {
                balanceMST = 0;
                this.calBalanceMST();
                tmpVendStatementSRS.data(tmpVendStatement);
                tmpVendStatementSRS.ActualBalanceMST = balanceMST;
                this.prepareTitle();
                tmpVendStatementSRS.doInsert();
            }
        }
        else
        {
            while select tmpVendStatement
                order by CustVendAC, PeriodCode, TransDate, RecId
            {
                balanceMST = 0;
                this.calBalanceMST();
                tmpVendStatementSRS.data(tmpVendStatement);
                tmpVendStatementSRS.ActualBalanceMST = balanceMST;
                this.prepareTitle();
                tmpVendStatementSRS.doInsert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustSettleMap</Name>
				<Source><![CDATA[
    private boolean adjustSettleMap(
        Voucher _voucher,
        Set _settleId,
        int _currentSettleMax)
    {
        boolean ret;

        Set currentSetteleId;

        if (settleMap.exists(_voucher))
        {
            currentSetteleId = settleMap.lookup(_voucher);

            if (!Set::intersection(currentSetteleId, _settleId).elements())
            {
                currentSetteleId.add(_currentSettleMax);
                settleMap.insert(_voucher, currentSetteleId);
                ret = true;
            }
        }
        else
        {
            currentSetteleId = new Set(Types::Integer);
            currentSetteleId.add(_currentSettleMax);
            settleMap.insert(_voucher, currentSetteleId);
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPeriodStatus</Name>
				<Source><![CDATA[
    private void setPeriodStatus()
    {
        ToDate      sqlToDate;
        boolean     isCloseYearExist;
        recId       calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();
        LedgerRecId ledgerRecId = Ledger::current();

        sqlToDate = toDate ? toDate : dateMax();

        isCloseYearExist = LedgerFiscalCalendar::existYearByYearStatusDates(
                                    calendarRecId,
                                    ledgerRecId,
                                    sqlToDate,
                                    fromDate,
                                    FiscalYearStatus::Close);

        if (isCloseYearExist)
        {
            periodStatus = "@SYS77870";
        }
        else
        {
            periodStatus = "@SYS19731";
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>