<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayCounterCalcEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rPayCounterCalcEngine
{
    FormStringControl    controlNumFrom,controlNumTo;
    FormComboBoxControl  controlPayPeriodFrequancy, controlPayCalculateType, controlSumMetod;
    FormIntControl       controlPeriodLag;
    FormRun              formRun;
    FormDataSource       payCounterCalcTableDs;
    RPayCounterCalcTable payCounterCalcTable;
    RPayModuleControl    payModuleControl;
    container            calcTypeItems;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>control_AverageEarn</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void control_AverageEarn()
    {
        controlNumFrom.lookupButton(FormLookupButton::Always);
        controlNumTo.lookupButton(FormLookupButton::Never);
        controlNumFrom.enabled(true);
        controlNumTo.enabled(false);
        controlPayPeriodFrequancy.enabled(true);
        controlSumMetod.enabled(false);
        controlPeriodLag.enabled(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>control_BaseTotal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void control_BaseTotal()
    {
        controlNumFrom.lookupButton(FormLookupButton::Always);
        controlNumTo.lookupButton(FormLookupButton::Always);
        controlNumFrom.enabled(true);
        controlNumTo.enabled(true);
        controlPayPeriodFrequancy.enabled(true);
        controlSumMetod.enabled(true);
        controlPeriodLag.enabled(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>control_CalcLineSum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void control_CalcLineSum()
    {
        controlNumFrom.lookupButton(FormLookupButton::Never);
        controlNumTo.lookupButton(FormLookupButton::Never);
        controlNumFrom.enabled(true);
        controlNumTo.enabled(false);
        controlPayPeriodFrequancy.enabled(false);
        controlSumMetod.enabled(false);
        controlPeriodLag.enabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>control_CalcLineTotal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void control_CalcLineTotal()
    {
        this.control_CalcLineSum();
    }

]]></Source>
			</Method>
			<Method>
				<Name>control_Constant</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void control_Constant()
    {
        controlNumFrom.lookupButton(FormLookupButton::Never);
        controlNumTo.lookupButton(FormLookupButton::Never);
        controlNumFrom.enabled(true);
        controlNumTo.enabled(false);
        controlPayPeriodFrequancy.enabled(false);
        controlSumMetod.enabled(false);
        controlPeriodLag.enabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>control_CostType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void control_CostType()
    {
        controlNumFrom.lookupButton(FormLookupButton::Always);
        controlNumTo.lookupButton(FormLookupButton::Always);
        controlNumFrom.enabled(true);
        controlNumTo.enabled(true);
        controlPayPeriodFrequancy.enabled(true);
        controlSumMetod.enabled(true);
        controlPeriodLag.enabled(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>control_FactDays</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void control_FactDays()
    {
        controlNumFrom.lookupButton(FormLookupButton::Always);
        controlNumTo.lookupButton(FormLookupButton::Never);
        controlNumFrom.enabled(true);
        controlNumTo.enabled(false);
        controlPayPeriodFrequancy.enabled(true);
        controlSumMetod.enabled(false);
        controlPeriodLag.enabled(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>control_FactDaysGroup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void control_FactDaysGroup()
    {
        controlNumFrom.lookupButton(FormLookupButton::Always);
        controlNumTo.lookupButton(FormLookupButton::Never);
        controlNumFrom.enabled(true);
        controlNumTo.enabled(false);
        controlPayPeriodFrequancy.enabled(true);
        controlSumMetod.enabled(false);
        controlPeriodLag.enabled(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>control_FactHours</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void control_FactHours()
    {
        controlNumFrom.lookupButton(FormLookupButton::Always);
        controlNumTo.lookupButton(FormLookupButton::Never);
        controlNumFrom.enabled(true);
        controlNumTo.enabled(false);
        controlPayPeriodFrequancy.enabled(true);
        controlSumMetod.enabled(false);
        controlPeriodLag.enabled(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>control_FactHoursGroup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void control_FactHoursGroup()
    {
        controlNumFrom.lookupButton(FormLookupButton::Always);
        controlNumTo.lookupButton(FormLookupButton::Never);
        controlNumFrom.enabled(true);
        controlNumTo.enabled(false);
        controlPayPeriodFrequancy.enabled(true);
        controlSumMetod.enabled(false);
        controlPeriodLag.enabled(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>control_Rate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void control_Rate()
    {
        controlNumFrom.lookupButton(FormLookupButton::Always);
        controlNumTo.lookupButton(FormLookupButton::Never);
        controlNumFrom.enabled(true);
        controlNumTo.enabled(false);
        controlPayPeriodFrequancy.enabled(true);
        controlSumMetod.enabled(false);
        controlPeriodLag.enabled(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>control_RegDays</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void control_RegDays()
    {
        this.control_RegHours();
    }

]]></Source>
			</Method>
			<Method>
				<Name>control_RegDaysGroup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void control_RegDaysGroup()
    {
        controlNumFrom.lookupButton(FormLookupButton::Always);
        controlNumTo.lookupButton(FormLookupButton::Never);
        controlNumFrom.enabled(true);
        controlNumTo.enabled(false);
        controlPayPeriodFrequancy.enabled(true);
        controlSumMetod.enabled(false);
        controlPeriodLag.enabled(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>control_RegHours</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void control_RegHours()
    {
        controlNumFrom.lookupButton(FormLookupButton::Always);
        controlNumTo.lookupButton(FormLookupButton::Never);
        controlNumFrom.enabled(true);
        controlNumTo.enabled(false);
        controlPayPeriodFrequancy.enabled(true);
        controlSumMetod.enabled(false);
        controlPeriodLag.enabled(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>control_RegHoursGroup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void control_RegHoursGroup()
    {
        controlNumFrom.lookupButton(FormLookupButton::Always);
        controlNumTo.lookupButton(FormLookupButton::Never);
        controlNumFrom.enabled(true);
        controlNumTo.enabled(false);
        controlPayPeriodFrequancy.enabled(true);
        controlSumMetod.enabled(false);
        controlPeriodLag.enabled(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>control_Seniority</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void control_Seniority()
    {
        controlNumFrom.lookupButton(FormLookupButton::Always);
        controlNumTo.lookupButton(FormLookupButton::Never);
        controlNumFrom.enabled(true);
        controlNumTo.enabled(false);
        controlPayPeriodFrequancy.enabled(true);
        controlSumMetod.enabled(false);
        controlPeriodLag.enabled(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editControlPayCalculateType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edit method for calculation type value.
    /// </summary>
    /// <param name="_set">
    /// Defines set or get value.
    /// </param>
    /// <param name="_payCounterCalcTableDs">
    /// The buffer of <c>RPayCounterCalcTable</c> table.
    /// </param>
    /// <param name="_number">
    /// The index of enum value to set.
    /// </param>
    /// <returns>
    /// Current value.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int editControlPayCalculateType(boolean _set, RPayCounterCalcTable _payCounterCalcTableDs, int _number)
    {
        container item;
        int       i, calcTypeItemNumber;

        if (_set && _number >= 0)
        {
            item = conPeek(calcTypeItems, _number + 1);
            _payCounterCalcTableDs.PayCalculateTypeNumber = conPeek(item, 2);
            _payCounterCalcTableDs.PayCalculateEnumName = conPeek(item, 1);
        }

        for (i = 1; i <= conLen(calcTypeItems) ; i ++)
        {
            item = conPeek(calcTypeItems,i);

            if (conPeek(item, 1) == _payCounterCalcTableDs.PayCalculateEnumName &&
                conPeek(item, 2) == _payCounterCalcTableDs.PayCalculateTypeNumber)
            {
                calcTypeItemNumber = i-1;
                break;
            }
        }

        return calcTypeItemNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableOrDisableCalc</Name>
				<Source><![CDATA[
    #define.controlPrefix("Control_")
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void  enableOrDisableCalc()
    {
        payModuleControl.payCounterCalcTable(payCounterCalcTableDs.cursor());
        payModuleControl.callMethod(this,#controlPrefix);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookUpFrom</Name>
				<Source><![CDATA[
    #define.lookupFromPrefix("LookUpFrom_")
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void lookUpFrom()
    {
        payModuleControl.payCounterCalcTable(payCounterCalcTableDs.cursor());
        payModuleControl.callMethod(this,#lookupFromPrefix);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookUpFrom_AverageEarn</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void lookUpFrom_AverageEarn()
    {
        RPayAverageEarnEngine::performAverageEarnTypeLookup(controlNumFrom, RPayAverageEarnCodeType::Other);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookUpFrom_BaseTotal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void lookUpFrom_BaseTotal()
    {
        RPayModuleTable rPayModuleTable;

        payCounterCalcTable = payCounterCalcTableDs.cursor();
        rPayModuleTable     = RPayCounterTable::find(payCounterCalcTable.CounterUnit).paySeqTable().payModuleTable();
        RPayCounterTable::lookupCounterModuleCode(controlNumFrom,rPayModuleTable.PayModuleCode,payCounterCalcTable.CounterUnit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookUpFrom_CostType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void lookUpFrom_CostType()
    {
        controlNumFrom.performTypeLookup(extendedTypeNum(RPayCostType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookUpFrom_FactDays</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void lookUpFrom_FactDays()
    {
        controlNumFrom.performTypeLookup(extendedTypeNum(RPayCalendarTimeCode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookUpFrom_FactDaysGroup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void lookUpFrom_FactDaysGroup()
    {
        controlNumFrom.performTypeLookup(extendedTypeNum(RpayTimeGroupCode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookUpFrom_FactHours</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void lookUpFrom_FactHours()
    {
        controlNumFrom.performTypeLookup(extendedTypeNum(RPayCalendarTimeCode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookUpFrom_FactHoursGroup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void lookUpFrom_FactHoursGroup()
    {
        controlNumFrom.performTypeLookup(extendedTypeNum(RpayTimeGroupCode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookUpFrom_Rate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void lookUpFrom_Rate()
    {
        controlNumFrom.performTypeLookup(extendedTypeNum(RPayRateCode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookUpFrom_RegDays</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void lookUpFrom_RegDays()
    {
        controlNumFrom.performTypeLookup(extendedTypeNum(RPayCalendarTimeCode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookUpFrom_RegDaysGroup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void lookUpFrom_RegDaysGroup()
    {
        controlNumFrom.performTypeLookup(extendedTypeNum(RpayTimeGroupCode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookUpFrom_RegHours</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void lookUpFrom_RegHours()
    {
        controlNumFrom.performTypeLookup(extendedTypeNum(RPayCalendarTimeCode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookUpFrom_RegHoursGroup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void lookUpFrom_RegHoursGroup()
    {
        controlNumFrom.performTypeLookup(extendedTypeNum(RpayTimeGroupCode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookUpFrom_Seniority</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void lookUpFrom_Seniority()
    {
        RPayParmTable::lookupDates(controlNumFrom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookUpTo</Name>
				<Source><![CDATA[
    #define.LookUpToPrefix("LookUpTo_")
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void lookUpTo()
    {
        payModuleControl.callMethod(this,#LookUpToPrefix);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookUpTo_BaseTotal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void lookUpTo_BaseTotal()
    {
        RPayModuleTable rPayModuleTable;

        payCounterCalcTable = payCounterCalcTableDs.cursor();
        rPayModuleTable     = RPayCounterTable::find(payCounterCalcTable.CounterUnit).paySeqTable().payModuleTable();
        RPayCounterTable::lookupCounterModuleCode(controlNumTo,rPayModuleTable.PayModuleCode,payCounterCalcTable.CounterUnit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookUpTo_CostType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void lookUpTo_CostType()
    {
        controlNumTo.performTypeLookup(extendedTypeNum(RPayCostType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a new instance of the <c>RPayCounterCalcEngine</c>.
    /// </summary>
    /// <param name="_formRun">
    /// The <c>FormRun</c> object.
    /// </param>
    /// <param name="_payModuleTable">
    /// The buffer of calculate procedure.
    /// </param>
    #define.controlNumFrom("PayCounterCalcTable_NumFrom")
    #define.controlNumTo("PayCounterCalcTable_NumTo")
    #define.controlPayPeriodFrequancy("PayCounterCalcTable_PayPeriodFrequancy")
    #define.controlSumMetod("PayCounterCalcTable_PayCalcSumMetod")
    #define.controlPeriodLag("PayCounterCalcTable_PeriodLag")
    #define.controlPayCalculateType("PayCalculateType")
    #define.payCounterCalcTableDs("PayCounterCalcTable")
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new(FormRun _formRun, RPayModuleTable _payModuleTable)
    {
        DictEnum  dictEnum;
        container item;
        int       i;

        formRun                   = _formRun;
        controlNumFrom            = formRun.design().controlName(#controlNumFrom);
        controlNumTo              = formRun.design().controlName(#controlNumTo);
        controlPayPeriodFrequancy = formRun.design().controlName(#controlPayPeriodFrequancy);
        controlSumMetod           = formRun.design().controlName(#controlSumMetod);
        controlPeriodLag          = formRun.design().controlName(#controlPeriodLag);
        controlPayCalculateType   = formRun.design().controlName(#controlPayCalculateType);
        payCounterCalcTableDs     = formRun.dataSource(#payCounterCalcTableDs);
        payModuleControl          = _payModuleTable.payModuleControl();
        calcTypeItems = payModuleControl.calcTypeItems();
        controlPayCalculateType.clear();

        for (i = 1; i <= conLen(calcTypeItems); i += 1)
        {
            item = conPeek(calcTypeItems,i);
            dictEnum = new DictEnum(enumName2Id(conPeek(item,1)));
            controlPayCalculateType.add(dictEnum.value2Label(conPeek(item,2)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    #define.methodValidateWrite("ValidateWrite_")
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean  validateWrite()
    {
        payCounterCalcTable = payCounterCalcTableDs.cursor();
        payModuleControl.payCounterCalcTable(payCounterCalcTable);
        return str2int(payModuleControl.callMethod(this,#methodValidateWrite,'1'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite_AverageEarn</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int validateWrite_AverageEarn()
    {
        RPayAverageEarnTable rPayAverageEarnTable;

        if (! payCounterCalcTable.NumFrom)
        {
            error("@RUP1078");
            return 0;
        }

        rPayAverageEarnTable = RPayAverageEarnTable::find(payCounterCalcTable.NumFrom);

        if (! rPayAverageEarnTable || rPayAverageEarnTable.RpayAverageEarnCodeType != RPayAverageEarnCodeType::Other)
        {
            error("@RUP1079");
            return 0;
        }

        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite_BaseTotal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int validateWrite_BaseTotal()
    {
        RPayCounterTable rPayCounterTable;

        if (payCounterCalcTable.NumFrom && payCounterCalcTable.NumTo && (payCounterCalcTable.NumFrom > payCounterCalcTable.NumTo))
        {
            error("@RUP859");
            return 0;
        }
        if ((! payCounterCalcTable.NumFrom) && payCounterCalcTable.NumTo)
        {
            error("@RUP860");
            return 0;
        }
        if (! payCounterCalcTable.NumFrom)
        {
            error("@RUP861");
            return 0;
        }

        if (! RPayCounterTable::find(payCounterCalcTable.NumFrom))
        {
            error("@RUP1022");
            return 0;
        }
        rPayCounterTable = RPayCounterTable::find(payCounterCalcTable.CounterUnit);
        if (payCounterCalcTable.NumFrom == rPayCounterTable.CounterUnit)
        {
            error("@SYS25609");
            return 0;
        }
        if (payCounterCalcTable.NumTo)
        {
            if (! RPayCounterTable::find(payCounterCalcTable.NumTo))
            {
                error("@RUP1022");
                return 0;
            }
            if (payCounterCalcTable.NumTo == rPayCounterTable.CounterUnit)
            {
                error("@SYS25609");
                return 0;
            }
        }
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite_CalcLineSum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int validateWrite_CalcLineSum()
    {
        if (! payCounterCalcTable.NumFrom)
        {
            error("@RUP921");
            return 0;
        }

        if (! str2int(payCounterCalcTable.NumFrom))
        {
            error("@RUP922");
            return 0;
        }

        if (str2int(payCounterCalcTable.NumFrom) >= payCounterCalcTable.LineNo )
        {
            error(strFmt("@GLS106057",payCounterCalcTable.NumFrom,payCounterCalcTable.LineNo));
            return 0;
        }
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite_CalcLineTotal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int validateWrite_CalcLineTotal()
    {
        return this.validateWrite_CalcLineSum();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite_Constant</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int validateWrite_Constant()
    {
        if (! payCounterCalcTable.NumFrom)
        {
            error("@RUP916");
            return 0;
        }
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite_CostType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int validateWrite_CostType()
    {
        if (payCounterCalcTable.NumFrom && payCounterCalcTable.NumTo && (payCounterCalcTable.NumFrom > payCounterCalcTable.NumTo))
        {
            error("@RUP917");
            return 0;
        }
        if (! payCounterCalcTable.NumFrom && payCounterCalcTable.NumTo)
        {
            error("@RUP918");
            return 0;
        }
        if (! payCounterCalcTable.NumFrom)
        {
            error("@RUP293");
            return 0;
        }
        if (! RPayTable::find(payCounterCalcTable.NumFrom))
        {
            error("@RUP1023");
            return 0;
        }

        if (payCounterCalcTable.NumTo && ! RPayTable::find(payCounterCalcTable.NumTo))
        {
            error("@RUP1023");
            return 0;
        }

        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite_FactDays</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int validateWrite_FactDays()
    {
        if (! payCounterCalcTable.NumFrom)
        {
            error("@RUP1020");
            return 0;
        }

        if (! RPayCalendarTimeTable::find(payCounterCalcTable.NumFrom))
        {
            error("@RUP1021");
            return 0;
        }

        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite_FactDaysGroup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int validateWrite_FactDaysGroup()
    {
        if (! payCounterCalcTable.NumFrom)
        {
            error("@RUP1109");
            return 0;
        }

        if (!RPayTimeGroupTable::find(payCounterCalcTable.NumFrom))
        {
            error("@RUP1110");
            return 0;
        }

        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite_FactHours</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int validateWrite_FactHours()
    {
        if (! payCounterCalcTable.NumFrom)
        {
            error("@RUP1020");
            return 0;
        }

        if (!RPayCalendarTimeTable::find(payCounterCalcTable.NumFrom))
        {
            error("@RUP1021");
            return 0;
        }

        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite_FactHoursGroup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int validateWrite_FactHoursGroup()
    {
        if (! payCounterCalcTable.NumFrom)
        {
            error("@RUP1109");
            return 0;
        }

        if (!RPayTimeGroupTable::find(payCounterCalcTable.NumFrom))
        {
            error("@RUP1110");
            return 0;
        }

        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite_Rate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int validateWrite_Rate()
    {
        if (! payCounterCalcTable.NumFrom)
        {
            error("@RUP919");
            return 0;
        }

        if (! RPayRateTable::find(payCounterCalcTable.NumFrom))
        {
            error("@RUP1024");
            return 0;
        }
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite_RegDays</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int validateWrite_RegDays()
    {
        if (! payCounterCalcTable.NumFrom)
        {
            error("@RUP1020");
            return 0;
        }

        if (!RPayCalendarTimeTable::find(payCounterCalcTable.NumFrom))
        {
            error("@RUP1021");
            return 0;
        }

        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite_RegDaysGroup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int validateWrite_RegDaysGroup()
    {
        if (! payCounterCalcTable.NumFrom)
        {
            error("@RUP1109");
            return 0;
        }

        if (!RPayTimeGroupTable::find(payCounterCalcTable.NumFrom))
        {
            error("@RUP1110");
            return 0;
        }

        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite_RegHours</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int validateWrite_RegHours()
    {
        return this.validateWrite_RegDays();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite_RegHoursGroup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int validateWrite_RegHoursGroup()
    {
        if (! payCounterCalcTable.NumFrom)
        {
            error("@RUP1109");
            return 0;
        }

        if (!RPayTimeGroupTable::find(payCounterCalcTable.NumFrom))
        {
            error("@RUP1110");
            return 0;
        }

        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite_Seniority</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int validateWrite_Seniority()
    {
        RPayParmTable payParmTable;

        if (! payCounterCalcTable.NumFrom)
        {
            error("@RUP920");
            return 0;
        }

        payParmTable = RPayParmTable::find(payCounterCalcTable.NumFrom);
        if (! payParmTable)
        {
            error("@RUP923");
            return 0;
        }

        if (payParmTable.PayFieldType != RpayPayFieldType::DateField)
        {
            error("@RUP924");
            return 0;
        }
        return 1;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>