<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLineVendRFQTransImpl_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The tax model class for <c>VendRFQTrans</c>.
/// </summary>
[TaxModelDocumentLineAttribute(tableStr(VendRFQTrans))]
public class TaxModelDocLineVendRFQTransImpl_IN extends TaxModelDocLineIndirectTaxImpl_IN
{
    VendRFQJour                     vendRFQJour;
    VendRFQTrans                    vendRFQTrans;
    TaxModelDocLineWithholdImpl_IN  referenceModel;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustomsDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Customs Direction
    /// </summary>
    /// <returns>
    /// The <c>Direction_IN</c>
    /// </returns>
    public Direction_IN getCustomsDirection()
    {
        if (referenceModel)
        {
            return referenceModel.getCustomsDirection();
        }
        else
        {
            return Direction_IN::Export;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>VendTable</c> based on the vend account on the transaction line.
    /// </summary>
    /// <returns>
    /// The <c>VendTable</c>
    /// </returns>
    public VendTable getVendTable()
    {
        return VendTable::find(vendRFQJour.VendAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentLineOriginalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the document line original table.
    /// </summary>
    /// <returns>
    /// The document line original table.
    /// </returns>
    public Common getDocumentLineOriginalTable()
    {
        return referenceModel.getDocumentLineOriginalTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the quantity from the transaction line.
    /// </summary>
    /// <returns>
    ///    The quantity.
    /// </returns>
    /// <remarks>
    ///    If the transaction does not support quantities, 0 may be passed as the quantity. This will be used
    ///    to calculate taxes by unit.
    /// </remarks>
    public Qty getQuantity()
    {
        return vendRFQTrans.PurchQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReferenceTaxModelDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reference TaxModel doc line.
    /// </summary>
    /// <returns>
    /// The refernece taxModel doc line.
    /// </returns>
    public TaxModelTaxable getReferenceTaxModelDocLine()
    {
        return referenceModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax direction.
    /// </summary>
    /// <returns>
    /// The tax direction
    /// </returns>
    public TaxDirection getTaxDirection()
    {
        return TaxDirection::IncomingTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRateBasingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax rate basing date for the given tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The given tax type.
    /// </param>
    /// <returns>
    /// The tax rate date.
    /// </returns>
    public TransDate getTaxRateBasingDate(TaxType_IN _taxType)
    {
        return VendRFQJour.RFQDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the domain object.
    /// The method should only be called by the <c>TaxModelDocLineFactoryable</c> classes.
    /// </summary>
    /// <param name="_documentLineMap">
    /// The document line buffer.
    /// </param>
    public void init(SalesPurchJournalLine _documentLineMap)
    {
        PurchRFQParmLine        purchRFQParmLineLoc;
        purchRFQLine            purchRFQLineLoc;
        purchRFQParmTable       purchRFQParmTableLoc;

        vendRFQTrans = _documentLineMap;
        vendRFQJour = vendRFQTrans.vendRFQJour();

        super(_documentLineMap);

        select firstonly purchRFQParmLineLoc
            where purchRFQParmLineLoc.ParmId == vendRFQJour.ParmId
                && purchRFQParmLineLoc.InventTransId == vendRFQTrans.InventTransId;

        if (!purchRFQParmLineLoc)
        {
            select firstonly purchRFQParmLineLoc
                where purchRFQParmLineLoc.ParmId == vendRFQJour.ParmId
                    && purchRFQParmLineLoc.RFQId == vendRFQTrans.RFQId
                exists join purchRFQParmTableLoc
                    where purchRFQParmTableLoc.ParmId == purchRFQParmLineLoc.ParmId
                        && purchRFQParmTableLoc.TableRefId == purchRFQParmLineLoc.TableRefId
                        && purchRFQParmTableLoc.RFQId == vendRFQTrans.RFQId
                exists join purchRFQLineLoc
                    where purchRFQLineLoc.InventTransId == vendRFQTrans.InventTransId
                        && purchRFQLineLoc.RecId == purchRFQParmLineLoc.RFQLineRecId;
        }

        SalesPurchJournalLine referenceTable = purchRFQParmLineLoc;

        referenceModel = TaxModelDocLineFactory::newTaxModelDocLine(referenceTable) as TaxModelDocLineBaseImpl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax module type
    /// </summary>
    /// <returns>
    /// The transaction tax module type
    /// </returns>
    public TaxModuleType getTaxModuleType()
    {
        return TaxModuleType::PurchInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction invoice date
    /// </summary>
    /// <returns>
    /// The transaction invoice date
    /// </returns>
    public InvoiceDate getDocumentInvoiceDate()
    {
        return DateTimeUtil::date(vendRFQJour.CreatedDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction document date
    /// </summary>
    /// <returns>
    /// The transaction document date
    /// </returns>
    public DocumentDate getDocumentDate()
    {
        return DateTimeUtil::date(vendRFQJour.CreatedDateTime);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>