<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListEstimateDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjListEstimateDP</c> class is the report data provider class for the associated
///    <c>ProjListEstimateWonFixedPriceProjPL</c>, <c>ProjListEstimateProdBacklogConsumption</c>,
///    <c>ProjListEstimateProdBacklogOnAccount</c>, <c>ProjListEstimateProdBacklogPL</c>, and
///    <c>ProjListEstimateReadyForElimination</c> reports.
/// </summary>
[
    SRSReportQueryAttribute(querystr(ProjListEstimate)),
    SRSReportParameterAttribute(classstr(ProjEstimateListContract))
]
public class ProjListEstimateDP extends SRSReportDataProviderBase
{
    ProjPeriodId    periodCode;
    ProjPeriodFrom  estimateDate;
    NoYes           includeEliminated;
    int             menuItemType;
    Amount          hourQty, revenue, valueAA;
    Amount          hourCost, amount, totalCost, grossMargin;
    Amount          expensesCost, itemCost;
    ProjWIPTable    projWIPTable;
    QueryRun        queryRun;
    Query           query;
    ProjListEstimateTmp tmpProjListEstimate;
    ProjEstimateColumn  estimateColumn;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createReportConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>ProjListEstimateProdBacklogConsumptionSRS</c> class.
    /// </summary>
    public void createReportConsumption()
    {
        ProjControlPeriodTable          projControlPeriodTable;
        ProjControlVersion              version;
        ProjControlPeriodTableColumn    projControlPeriodTableColumnTotal;
        ProjControlPeriodTableColumn    projControlPeriodTableColumnAccumulated;

        queryRun    = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            if (SysReportRun::changed(queryRun,tablenum(ProjWIPTable)))
            {
                projWIPTable            = queryRun.get(tablenum(ProjWIPTable));

                version = ProjControlPeriodTable::actualPeriodVersion(projWIPTable.ProjId,projWIPTable.ControlId,estimateDate);

                select projControlPeriodTable
                    where projControlPeriodTable.ProjId         == projWIPTable.ProjId      &&
                          projControlPeriodTable.ControlId      == projWIPTable.ControlId   &&
                          projControlPeriodTable.PeriodId       == periodCode               &&
                          projControlPeriodTable.PeriodTo       == estimateDate             &&
                          projControlPeriodTable.Version        == version                  &&
                          projControlPeriodTable.PeriodStatus   == ProjControlPeriodStatus::Posted;

                select projControlPeriodTableColumnAccumulated
                    where projControlPeriodTableColumnAccumulated.ProjId           == projControlPeriodTable.ProjId      &&
                          projControlPeriodTableColumnAccumulated.ControlId        == projControlPeriodTable.ControlId   &&
                          projControlPeriodTableColumnAccumulated.PeriodFrom       == projControlPeriodTable.PeriodFrom  &&
                          projControlPeriodTableColumnAccumulated.Version          == projControlPeriodTable.Version     &&
                          projControlPeriodTableColumnAccumulated.EstimateColumn   == ProjEstimateColumn::Accumulated;

                select projControlPeriodTableColumnTotal
                    where projControlPeriodTableColumnTotal.ProjId           == projControlPeriodTable.ProjId      &&
                          projControlPeriodTableColumnTotal.ControlId        == projControlPeriodTable.ControlId   &&
                          projControlPeriodTableColumnTotal.PeriodFrom       == projControlPeriodTable.PeriodFrom  &&
                          projControlPeriodTableColumnTotal.Version          == projControlPeriodTable.Version     &&
                          projControlPeriodTableColumnTotal.EstimateColumn   == ProjEstimateColumn::Total;

                hourQty         =   projControlPeriodTableColumnTotal.GeneralHoursQty - projControlPeriodTableColumnAccumulated.GeneralHoursQty;
                hourCost        =   projControlPeriodTableColumnTotal.plCostHour      - projControlPeriodTableColumnAccumulated.ConsumHourConsum;
                expensesCost    =   projControlPeriodTableColumnTotal.plCostExpenses  - projControlPeriodTableColumnAccumulated.ConsumExpConsum;
                itemCost        =   projControlPeriodTableColumnTotal.plCostItem      - projControlPeriodTableColumnAccumulated.ConsumItemConsum;
                totalCost       =   projControlPeriodTableColumnTotal.plCostTotalCost - projControlPeriodTableColumnAccumulated.ConsumTotalConsum;

                if (projControlPeriodTableColumnAccumulated || projControlPeriodTableColumnTotal)
                {
                    this.insertProjListEstimate(projControlPeriodTableColumnAccumulated ?
                        projControlPeriodTableColumnAccumulated : projControlPeriodTableColumnTotal, projControlPeriodTable);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReportOnAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>ProjListEstimateProdBacklogOnAccountSRS</c> class.
    /// </summary>
    public void createReportOnAccount()
    {
        ProjControlPeriodTable          projControlPeriodTable;
        ProjControlVersion              version;
        ProjControlPeriodTableColumn    projControlPeriodTableColumn;

        queryRun = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            if (SysReportRun::changed(queryRun,tablenum(ProjWIPTable)))
            {
                projWIPTable = queryRun.get(tablenum(ProjWIPTable));

                version = ProjControlPeriodTable::actualPeriodVersion(projWIPTable.ProjId,projWIPTable.ControlId,estimateDate);

                select projControlPeriodTable
                    where projControlPeriodTable.ProjId         == projWIPTable.ProjId      &&
                          projControlPeriodTable.ControlId      == projWIPTable.ControlId   &&
                          projControlPeriodTable.PeriodId       == periodCode               &&
                          projControlPeriodTable.PeriodTo       == estimateDate             &&
                          projControlPeriodTable.Version        == version                  &&
                          projControlPeriodTable.PeriodStatus   == ProjControlPeriodStatus::Posted;

                if (projControlPeriodTable)
                {
                    this.insertProjListEstimate(projControlPeriodTableColumn,projControlPeriodTable);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReportProdBacklogPL</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>ProjListEstimateProdBacklogPLSRS</c> class.
    /// </summary>
    public void createReportProdBacklogPL()
    {
        ProjControlPeriodTable          projControlPeriodTable;
        ProjControlVersion              version;
        ProjControlPeriodTableColumn    projControlPeriodTableColumnTotal;
        ProjControlPeriodTableColumn    projControlPeriodTableColumnAccumulated;
        ProjTable                       projTable;
        boolean                         projEstimateEliminated;

        queryRun = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            if (SysReportRun::changed(queryRun,tablenum(ProjWIPTable)))
            {
                projWIPTable = queryRun.get(tablenum(ProjWIPTable));

                projEstimateEliminated = false;

                select firstonly reverse projControlPeriodTable
                    order by Version
                    where projControlPeriodTable.ProjId     == projWIPTable.ProjId      &&
                          projControlPeriodTable.ControlId  == projWIPTable.ControlId   &&
                          projControlPeriodTable.PeriodId   == periodCode               &&
                          projControlPeriodTable.PeriodTo   == estimateDate;

                if ((projControlPeriodTable) && (projControlPeriodTable.PeriodStatus == ProjControlPeriodStatus::Eliminate))
                {
                    projEstimateEliminated = true;
                }

                if (((!includeEliminated) && (!projEstimateEliminated)) || (includeEliminated))
                {
                    projTable = ProjTable::find(projWIPTable.ProjId);

                    // Investment Projects should not be included
                    if (projTable.Type != ProjType::Investment)
                    {
                        version = ProjControlPeriodTable::actualPeriodVersion(projWIPTable.ProjId,projWIPTable.ControlId,estimateDate);

                        select projControlPeriodTable
                            where projControlPeriodTable.ProjId         == projWIPTable.ProjId      &&
                                  projControlPeriodTable.ControlId      == projWIPTable.ControlId   &&
                                  projControlPeriodTable.PeriodId       == periodCode               &&
                                  projControlPeriodTable.PeriodTo       == estimateDate             &&
                                  projControlPeriodTable.Version        == version                  &&
                                  projControlPeriodTable.PeriodStatus   == ProjControlPeriodStatus::Posted;

                        select projControlPeriodTableColumnAccumulated
                            where projControlPeriodTableColumnAccumulated.ProjId           == projControlPeriodTable.ProjId      &&
                                  projControlPeriodTableColumnAccumulated.ControlId        == projControlPeriodTable.ControlId   &&
                                  projControlPeriodTableColumnAccumulated.PeriodFrom       == projControlPeriodTable.PeriodFrom  &&
                                  projControlPeriodTableColumnAccumulated.Version          == projControlPeriodTable.Version     &&
                                  projControlPeriodTableColumnAccumulated.EstimateColumn   == ProjEstimateColumn::Accumulated;

                        select projControlPeriodTableColumnTotal
                            where projControlPeriodTableColumnTotal.ProjId           == projControlPeriodTable.ProjId      &&
                                  projControlPeriodTableColumnTotal.ControlId        == projControlPeriodTable.ControlId   &&
                                  projControlPeriodTableColumnTotal.PeriodFrom       == projControlPeriodTable.PeriodFrom  &&
                                  projControlPeriodTableColumnTotal.Version          == projControlPeriodTable.Version     &&
                                  projControlPeriodTableColumnTotal.EstimateColumn   == ProjEstimateColumn::Total;

                        if (!projEstimateEliminated)
                        {
                            if ((projTable.Type == ProjType::FixedPrice ||
                                (projTable.ProjInvoiceProjId &&
                                 ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled() &&
                                 ProjMultipleContractLinesForProjectFeatureHelper::existContractLineForBillingMethod(projTable.ProjId, projTable.ProjInvoiceProjId, ProjContractBillingMethod::FixedPrice))) &&
                                ProjRevRecHelper::getCompletePrincipleForProjTable(projTable, false) == ProjCompletePrincip::CompletedContract)
                            {
                                hourQty = projControlPeriodTableColumnTotal.GeneralHoursQty - projControlPeriodTableColumnAccumulated.GeneralHourQtyCapitalized;
                            }
                            else
                            {
                                hourQty = projControlPeriodTableColumnTotal.GeneralHourQtyCapitalized- projControlPeriodTableColumnAccumulated.GeneralHourQtyCapitalized;
                            }

                            revenue     = projControlPeriodTableColumnTotal.plTotalRevenue           - projControlPeriodTableColumnAccumulated.plTotalRevenue;
                            valueAA     = projControlPeriodTableColumnTotal.plTotalValueAddedAmount  - projControlPeriodTableColumnAccumulated.plTotalValueAddedAmount;
                            hourCost    = projControlPeriodTableColumnTotal.plCostHour               - projControlPeriodTableColumnAccumulated.plCostHour;
                            totalCost   = projControlPeriodTableColumnTotal.plCostTotalCost          - projControlPeriodTableColumnAccumulated.plCostTotalCost;
                            grossMargin = projControlPeriodTableColumnTotal.plTotalGrossMargin       - projControlPeriodTableColumnAccumulated.plTotalGrossMargin;
                        }
                        else
                        {
                            hourQty     = 0;
                            revenue     = 0;
                            valueAA     = 0;
                            hourCost    = 0;
                            totalCost   = 0;
                            grossMargin = 0;
                        }

                        if (projControlPeriodTableColumnAccumulated || projControlPeriodTableColumnTotal)
                        {
                            this.insertProjListEstimate(projControlPeriodTableColumnAccumulated ?
                                projControlPeriodTableColumnAccumulated : projControlPeriodTableColumnTotal, projControlPeriodTable);
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReportReadyForElimination</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>ProjListEstimateReadyForEliminationSRS</c> class.
    /// </summary>
    public void createReportReadyForElimination()
    {
        ProjControlPeriodTable          projControlPeriodTable;
        ProjControlPeriodTableColumn    projControlPeriodTableColumn;
        boolean                         printWIP;

        this.setRange();
        queryRun    = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            if (SysReportRun::changed(queryRun,tablenum(ProjWIPTable)))
            {
                projWIPTable            = queryRun.get(tablenum(ProjWIPTable));

                printWIP    = false;
                if (includeEliminated)
                {
                    select projControlPeriodTable
                        where projControlPeriodTable.ProjId         == projWIPTable.ProjId      &&
                              projControlPeriodTable.ControlId      == projWIPTable.ControlId   &&
                              projControlPeriodTable.PeriodTo       == estimateDate             &&
                              projControlPeriodTable.PeriodId       == periodCode               &&
                              projControlPeriodTable.PeriodStatus   == ProjControlPeriodStatus::Eliminate;

                    if (projControlPeriodTable)
                    {
                        printWIP    = true;
                    }
                }

                if (! printWIP)
                {
                    projControlPeriodTable = ProjControlPeriodTable::findLastPosted(projWIPTable.ProjId,projWIPTable.ControlId);
                    if (projControlPeriodTable.allowEliminate())
                    {
                        printWIP    = true;
                    }
                }

                select projControlPeriodTableColumn
                    where projControlPeriodTableColumn.ProjId           == projControlPeriodTable.ProjId      &&
                          projControlPeriodTableColumn.ControlId        == projControlPeriodTable.ControlId   &&
                          projControlPeriodTableColumn.PeriodFrom       == projControlPeriodTable.PeriodFrom  &&
                          projControlPeriodTableColumn.Version          == projControlPeriodTable.Version     &&
                          projControlPeriodTable.PeriodId               == periodCode                         &&
                          projControlPeriodTable.PeriodFrom             == estimateDate                       &&
                          projControlPeriodTableColumn.EstimateColumn   == ProjEstimateColumn::Total;

                if (printWIP && projControlPeriodTableColumn)
                {
                    this.insertProjListEstimate(projControlPeriodTableColumn, projControlPeriodTable);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReportWonFixedPriceProjPL</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>ProjListEstimateWonFixedPriceProjPLSRS</c> class.
    /// </summary>
    public void createReportWonFixedPriceProjPL()
    {
        ProjControlPeriodTable          projControlPeriodTable;
        ProjControlVersion              version;
        ProjControlPeriodTableColumn    projControlPeriodTableColumn;

        queryRun = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            if (SysReportRun::changed(queryRun,tablenum(ProjWIPTable)))
            {
                projWIPTable = queryRun.get(tablenum(ProjWIPTable));

                select firstonly projControlPeriodTable
                    where projControlPeriodTable.ProjId         == projWIPTable.ProjId      &&
                          projControlPeriodTable.ControlId      == projWIPTable.ControlId   &&
                          projControlPeriodTable.PeriodId       == periodCode               &&
                          projControlPeriodTable.PeriodTo       < estimateDate             &&
                          projControlPeriodTable.PeriodStatus   == ProjControlPeriodStatus::Posted;

                if (!projControlPeriodTable)//Print only the first estimate
                {
                    version = ProjControlPeriodTable::actualPeriodVersion(projWIPTable.ProjId,projWIPTable.ControlId,estimateDate);

                    select projControlPeriodTable
                        where projControlPeriodTable.ProjId         == projWIPTable.ProjId      &&
                              projControlPeriodTable.ControlId      == projWIPTable.ControlId   &&
                              projControlPeriodTable.PeriodId       == periodCode               &&
                              projControlPeriodTable.PeriodTo       == estimateDate             &&
                              projControlPeriodTable.Version        == version                  &&
                              projControlPeriodTable.PeriodStatus   == ProjControlPeriodStatus::Posted;

                    select projControlPeriodTableColumn
                        where projControlPeriodTableColumn.ProjId           == projControlPeriodTable.ProjId      &&
                              projControlPeriodTableColumn.ControlId        == projControlPeriodTable.ControlId   &&
                              projControlPeriodTableColumn.PeriodFrom       == projControlPeriodTable.PeriodFrom  &&
                              projControlPeriodTableColumn.Version          == projControlPeriodTable.Version     &&
                              projControlPeriodTableColumn.EstimateColumn   == estimateColumn;

                    if (projControlPeriodTableColumn)
                    {
                        this.insertProjListEstimate(projControlPeriodTableColumn, projControlPeriodTable);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpProjListEstimate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the temporary project list estimate.
    /// </summary>
    /// <returns>
    ///    The temporary project list estimate.
    /// </returns>
    [
        SRSReportDataSetAttribute('ProjListEstimateTmp')
    ]
    public ProjListEstimateTmp getTmpProjListEstimate()
    {
        select tmpProjListEstimate;
        return tmpProjListEstimate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjListEstimate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a project list estimate into the temporary table.
    /// </summary>
    /// <param name="_projControlPeriodTableColumn">
    ///    The field in which to insert the data.
    /// </param>
    /// <param name="_projControlPeriodTable">
    ///    The table in which to inert the data.
    /// </param>
    public void insertProjListEstimate(ProjControlPeriodTableColumn _projControlPeriodTableColumn,
                                        ProjControlPeriodTable _projControlPeriodTable)
    {
        if (menuItemType == 0)
        {
            tmpProjListEstimate.ProjId      = _projControlPeriodTableColumn.ProjId;
            tmpProjListEstimate.ProjName    = projWIPTable.projTable().Name;
            tmpProjListEstimate.HourQty     = hourQty;
            tmpProjListEstimate.HourCost    = hourCost;
            tmpProjListEstimate.Expenses    = expensesCost;
            tmpProjListEstimate.ItemCost    = itemCost;
            tmpProjListEstimate.TotalCost   = totalCost;
        }
        else  if (menuItemType == 1)
        {
            tmpProjListEstimate.ProjId          = _projControlPeriodTable.ProjId;
            tmpProjListEstimate.ProjName        = projWIPTable.projTable().Name;
            tmpProjListEstimate.ctc_Contract    = _projControlPeriodTable.ctcContract;
        }
        else if (menuItemType == 2)
        {
            tmpProjListEstimate.ProjId          = _projControlPeriodTableColumn.ProjId;
            tmpProjListEstimate.ProjName        = projWIPTable.projTable().Name;
            tmpProjListEstimate.HourQty         = hourQty;
            tmpProjListEstimate.Revenue         = revenue;
            tmpProjListEstimate.ValueAA         = valueAA;
            tmpProjListEstimate.HourCost        = hourCost;
            tmpProjListEstimate.TotalCost       = totalCost;
            tmpProjListEstimate.GrossMargin     = grossMargin;
        }
        else if (menuItemType == 3)
        {
            tmpProjListEstimate.ProjId                  = _projControlPeriodTableColumn.ProjId;
            tmpProjListEstimate.ProjName                = projWIPTable.projTable().Name;
            tmpProjListEstimate.plAccRevSalesValue      = _projControlPeriodTableColumn.plAccRevSalesValue;
            tmpProjListEstimate.plAccRevProduction      = _projControlPeriodTableColumn.plAccRevProduction;
            tmpProjListEstimate.plAccRevProfit          = _projControlPeriodTableColumn.plAccRevProfit;
            tmpProjListEstimate.plCostTotalCost         = _projControlPeriodTableColumn.plCostTotalCost;
            tmpProjListEstimate.plTotalGrossMargin      = _projControlPeriodTableColumn.plTotalGrossMargin;
        }
        else
        {
            tmpProjListEstimate.ProjId                  = _projControlPeriodTableColumn.ProjId;
            tmpProjListEstimate.ProjName                = projWIPTable.projTable().Name;
            tmpProjListEstimate.GeneralHoursQty         = _projControlPeriodTableColumn.GeneralHoursQty;
            tmpProjListEstimate.plCostTotalCost         = _projControlPeriodTableColumn.plCostTotalCost;
            tmpProjListEstimate.plTotalRevenue          = _projControlPeriodTableColumn.plTotalRevenue;
            tmpProjListEstimate.plTotalValueAddedAmount = _projControlPeriodTableColumn.plTotalValueAddedAmount;
            tmpProjListEstimate.plCostHour              = _projControlPeriodTableColumn.plCostHour;
            tmpProjListEstimate.plTotalGrossMargin      = _projControlPeriodTableColumn.plTotalGrossMargin;
        }
        tmpProjListEstimate.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. It will be called by SSRS at
    ///    runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        ProjEstimateListContract contract = this.parmDataContract() as ProjEstimateListContract;

        periodCode = contract.parmProjPeriodId();
        estimateDate = contract.parmProjEstimateDate();
        includeEliminated = contract.parmProjIncludeEliminated();
        menuItemType = contract.parmMenuItemType();
        estimateColumn = contract.parmEstimateColumn();

        if (menuItemType == 0)
        {
           this.createReportConsumption();
        }
        else if (menuItemType == 1)
        {
            this.createReportOnAccount();
        }
        else if (menuItemType == 2)
        {
           this.createReportProdBacklogPL();
        }
        else if (menuItemType == 3)
        {
            this.createReportReadyForElimination();
        }
        else
        {
            this.createReportWonFixedPriceProjPL();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the work in progress (WIP) eliminated range to the query.
    /// </summary>
    /// <remarks>
    ///    Used to add the range WIP eliminated dynamically to the query and assign a Boolean value, depending
    ///    on the specified <c>includeEliminated</c> value.
    /// </remarks>
    public void setRange()
    {
        QueryBuildRange r;

        QueryBuildDataSource qbds = this.parmQuery().dataSourceTable(tablenum(ProjWIPTable));
        r = qbds.findRange(fieldnum(ProjWIPTable, wipEliminated));

        if (! r)
        {
            r = qbds.addRange(fieldnum(ProjWIPTable, wipEliminated));
        }

        if (includeEliminated)
        {
            r.value(queryValue(SysQuery::valueNotEmptyString()));
        }
        else
        {
            r.value(queryValue(NoYes::No));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>