<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_Jour_Loss_SumUp</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventMov_Jour_Loss_SumUp </c> class is used when counting items in inventory journals.
/// </summary>
class InventMov_Jour_Loss_SumUp extends InventMov_Journal
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowNegativePhysicalForBlockingStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if validation should allow a negative physical available quantity for inventory status blocking.
    /// </summary>
    /// <returns>
    ///     Always returns true.
    /// </returns>
    /// <remarks>
    ///     Availability validation must be skipped for issue transactions on certain inventory journal transactions with blocking status.
    /// </remarks>
    public boolean allowNegativePhysicalForBlockingStatus()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeOnAllInventLocations</Name>
				<Source><![CDATA[
    public boolean  canBeOnAllInventLocations()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateInventStatusBlocking</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the movement can update inventory status blocking transactions
    /// </summary>
    /// <returns>
    ///     Always returns true.
    /// </returns>
    public boolean canUpdateInventStatusBlocking()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCountingLocks</Name>
				<Source><![CDATA[
    public boolean checkCountingLocks(InventDim _inventDim)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateOnHandPhysical</Name>
				<Source><![CDATA[
    protected InventQty  dateOnHandPhysical(InventDim _inventDim)
    {
        InventDimParm   inventDimParm;
        inventDimParm.initFromInventDim(_inventDim);
        inventDimParm = InventDimParm::orParms(inventDimParm,InventJournalTable::journalId2inventDimParm(inventJournalTrans.JournalId));

        return InventSumDatePhysicalDim::onHandQty(inventJournalTrans.TransDate,inventJournalTrans.ItemId,_inventDim,inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimAllowBlankIssue</Name>
				<Source><![CDATA[
    protected boolean dimAllowBlankIssue(InventDimGroupFieldSetup _inventDimGroupFieldSetup)
    {
        return _inventDimGroupFieldSetup.isAllowBlankIssueEnabled() || _inventDimGroupFieldSetup.isAllowBlankReceiptEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalCheckTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>InventJournalTrans</c> transaction is valid.
    /// </summary>
    /// <returns>
    /// false if there is an error in the transaction object; otherwise, true.
    /// </returns>
    public boolean  journalCheckTrans()
    {
        boolean                 ok                      = super();
        InventTrans             inventTransCheck;

        if (inventJournalTrans.Qty > 0)
        {
            InventItemInventSetup inventItemInventSetup = this.inventItemInventSetup(inventJournalTrans.inventDim().InventDimId);

            ok = ok && inventItemInventSetup.checkInventLocationId(inventJournalTrans.inventDim().InventLocationId);
            ok = ok && inventItemInventSetup.checkInventSiteId(inventJournalTrans.inventDim().InventSiteId);

            while select inventTransCheck
                where inventTransCheck.InventTransOrigin    == this.inventTransOriginId()
                   && inventTransCheck.Qty                   >  0
            {
                ok = ok && this.inventItemInventSetup(inventTransCheck.inventDim().InventDimId).checkInventLocationId(inventTransCheck.inventDim().InventLocationId);
            }
        }

        ok = ok && InventCountingJournalLineTransactionValidator::newFromInventJournalTrans(inventJournalTrans).check();

        if (inventJournalTrans.Counted == 0 && inventJournalTrans.Qty == 0 && inventJournalTrans.InventOnHand != 0)
        {
            ok = checkFailed("@SYS62627");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalPostTrans</Name>
				<Source><![CDATA[
    public void journalPostTrans(
        LedgerVoucher           _ledgerVoucher,
        InventUpd_Financial     _financial = null,
        CostAmount              _costAmount = 0)
    {
        InventCountJour     inventCountJour;

        super(_ledgerVoucher, _financial);

        InventItemLocation::updateStopCountingJournal(inventJournalTrans, true);

        inventCountJour.initFromInventJournalTrans(inventJournalTrans);
        inventCountJour.Ok  = inventJournalTrans.InventOnHand == inventJournalTrans.Counted ? NoYes::Yes : NoYes::No;
        inventCountJour.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalSetInventDimFields</Name>
				<Source><![CDATA[
    public void journalSetInventDimFields(InventDim _inventDim)
    {
        super(_inventDim);

        [inventJournalTrans.InventOnHand, inventJournalTrans.PdsCWInventOnHand] = this.pdsCWDateOnHandPhysical(_inventDim);

        if (inventJournalTrans.PdsCWInventQtyCounted || inventJournalTrans.PdsCWQty)
        {
            this.pdsCWJournalSetCounted();
        }

        if (inventJournalTrans.Counted || inventJournalTrans.Qty)
        {
            this.journalSetCounted();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalSetItemId</Name>
				<Source><![CDATA[
    public boolean  journalSetItemId(InventDim _inventDim)
    {
        if (! super(_inventDim))
        {
            return false;
        }

        [inventJournalTrans.InventOnHand, inventJournalTrans.PdsCWInventOnHand] = this.pdsCWDateOnHandPhysical(this.inventdim());

        inventJournalTrans.PdsCWQty = 0;
        inventJournalTrans.Qty      = 0;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalSetQty</Name>
				<Source><![CDATA[
    public void journalSetQty(
        NoYes   _transQtySignChangedToNegative = NoYes::No,
        boolean _showUserDialog                = true,
        boolean _doMinQtyCheck                 = true,
        boolean _doMaxQtyCheck                 = true)
    {
        super(_transQtySignChangedToNegative, _showUserDialog, _doMinQtyCheck, _doMaxQtyCheck);

        inventJournalTrans.Counted= inventJournalTrans.InventOnHand + inventJournalTrans.Qty;

        this.journalSetCostPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBePicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the transactions related to this movement must be picked.
    /// </summary>
    /// <returns>
    ///    true if the transactions must be picked; otherwise, false.
    /// </returns>
    public boolean mustBePicked()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeRegistered</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the transactions that are related to this movement must be registered.
    /// </summary>
    /// <returns>
    ///    true if transactions must be registered; otherwise, false.
    /// </returns>
    public boolean mustBeRegistered()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateInventTransOrigin</Name>
				<Source><![CDATA[
    public boolean mustUpdateInventTransOrigin()
    {
        return this.inventTable().isItemInventoryOwnerActivated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    public InventMovement newMovement_Orig()
    {
        if (!inventJournalTrans.RecId)
        {
            return null;
        }

        return new InventMov_Jour_Loss_SumUp(inventJournalTrans.orig(),inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWDateOnHandPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the on-hand quantity and catch weight on-hand quantity for the item associated with the
    /// <c>InventJournalTrans</c> record with the specified dimensions.
    /// </summary>
    /// <param name="_inventDim">
    /// The dimensions used to check the catch weight on-hand quantity.
    /// </param>
    /// <returns>
    /// A container that contains the standard physical on-hand quantity and catch weight physical on-hand
    /// quantity.
    /// </returns>
    protected container pdsCWDateOnHandPhysical(InventDim _inventDim)
    {
        InventDimParm   inventDimParm;

        inventDimParm.initFromInventDim(_inventDim);
        inventDimParm = InventDimParm::orParms(
            inventDimParm,
            InventJournalTable::journalId2inventDimParm(
                inventJournalTrans.JournalId));

        return InventSumDatePhysicalDim::pdsCWOnHandQty(
                        inventJournalTrans.TransDate,
                        inventJournalTrans.ItemId,
                        _inventDim,
                        inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    public InventTransType transType()
    {
        return InventTransType::InventCounting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>InventMov_Jour_Loss_SumUp</c> class that is based on the
    ///    specified record.
    /// </summary>
    /// <param name="_inventJournalTrans">
    ///    The <c>InventJournalTrans</c> record for which the class is instantiated.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventMov_Jour_Loss_SumUp</c> class.
    /// </returns>
    public static InventMov_Jour_Loss_SumUp newFromInventJournalTrans(InventJournalTrans _inventJournalTrans)
    {
        if (_inventJournalTrans.isJournalLineOwnerEnabled())
        {
            return InventMov_Jour_Loss_SumUp_OwnerEnabled::newFromInventJournalTrans(_inventJournalTrans);
        }

        return new InventMov_Jour_Loss_SumUp(_inventJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    public void setInventDimId(InventDimId _dimId)
    {
        super(_dimId);

        [inventJournalTrans.InventOnHand, inventJournalTrans.PdsCWInventOnHand] = this.pdsCWDateOnHandPhysical(inventJournalTrans.inventDim());

        if (inventJournalTrans.PdsCWInventQtyCounted || inventJournalTrans.PdsCWQty)
        {
            this.pdsCWJournalSetCounted();
        }

        if (inventJournalTrans.Counted || inventJournalTrans.Qty)
        {
            this.journalSetCounted();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountOperations</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountOperations() 
    {
        LedgerDimensionDefaultAccount defaultAccount = inventJournalTrans.LedgerDimension;

        if (defaultAccount)
        {
            return defaultAccount;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>needInitUpdateEstimationQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean needInitUpdateEstimationQty()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>