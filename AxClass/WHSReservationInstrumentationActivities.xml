<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSReservationInstrumentationActivities</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides activities for reservation instrumentation logging.
/// </summary>
internal final class WHSReservationInstrumentationActivities
{
    private const str ActivityNamePrefix = 'WHSReservation.';

    private WHSInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(WHSInstrumentationLogger _logger)
    {
        logger = _logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLogger</Name>
				<Source><![CDATA[
    public static WHSReservationInstrumentationActivities newFromLogger(WHSInstrumentationLogger _logger)
    {
        return new WHSReservationInstrumentationActivities(_logger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReserveMore</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext updateReserveMore()
    {
        return logger.activityContext(logger.activity(ActivityNamePrefix + 'UpdateReserveMore'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logReservationStrategyList</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal final void logReservationStrategyList(
        List            _reservationStrategyList,
        InventMovement  _movement)
    {
        if (logger.isEnabled())
        {
            SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();

            var properties = logger.properties();

            serializer
                .setValue(properties.ReservationStrategyList, _reservationStrategyList.toString())
                .setValue(properties.MovementClass, classId2Name(classIdGet(_movement)))
                .setNameAndValue(properties.propertyByTableRecord(_movement.inventTable()));

            logger.logInformation(serializer.toString());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logReservationStrategy</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal final void logReservationStrategy(
        int                                     _index,
        WHSReservationHierarchyLevelStrategy    _whsReservationHierarchyLevelStrategy,
        InventDim                               _inventDimInventoryCriteria,
        InventTrans                             _inventTrans,
        InventQty                               _qtyLeftToReserve,
        InventQty                               _catchWeightQtyLeftToReserve,
        InventQty                               _maxOrderedReserved,
        InventQty                               _maxPhysicalReserved,
        boolean                                 _mustIncludeReserveDelta,
        boolean                                 _batchLevelStrategyHasRan,
        boolean                                 _strategyMustDetermineMissingDimensions,
        boolean                                 _transTypeOnlyAffectsLocationAndBelow,
        CreatedTransactionId                    _ttsId)
    {
        if (logger.isEnabled())
        {
            SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();

            var properties = logger.properties();

            serializer
                .setValue(properties.LoopIndex, int2Str(_index))
                .setValue(properties.ReservationStrategy, classId2Name(classIdGet(_whsReservationHierarchyLevelStrategy)))
                .setNameAndValue(properties.propertyByTableNameFieldValue(properties.InventDimCriteria, _inventDimInventoryCriteria.inventDimId))
                .setValue(properties.IsBatchSpecified, int2Str(_inventDimInventoryCriteria.inventBatchId != ''))
                .setValue(properties.IsSerialSpecified, int2Str(_inventDimInventoryCriteria.inventSerialId != ''))
                .setValue(properties.IsLocationSpecified, int2Str(_inventDimInventoryCriteria.wMSLocationId != ''))
                .setValue(properties.IsLicensePlateSpecified, int2Str(_inventDimInventoryCriteria.LicensePlateId != ''))
                .setNameAndValue(properties.propertyByTableRecord(_inventTrans))
                .setValue(properties.MoreQtyLeftToReserve, int2Str(_qtyLeftToReserve != 0))
                .setValue(properties.MoreQtyLeftToReserve, int2Str(_catchWeightQtyLeftToReserve != 0))
                .setValue(properties.MaxOrderedReserved, int2Str(_maxOrderedReserved != 0))
                .setValue(properties.MaxPhysicalReserved, int2Str(_maxPhysicalReserved != 0))
                .setValue(properties.MustIncludeReserveDelta, int2Str(_mustIncludeReserveDelta))
                .setValue(properties.BatchLevelStrategyHasRan, int2Str(_batchLevelStrategyHasRan))
                .setValue(properties.StrategyMustDetermineMissingDimensions, int2Str(_strategyMustDetermineMissingDimensions))
                .setValue(properties.TransTypeOnlyAffectsLocationAndBelow, int2Str(_transTypeOnlyAffectsLocationAndBelow))
                .setValue(properties.TtsId, int642Str(_ttsId));

            logger.logInformation(serializer.toString());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logOnHand</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal final void logOnHand(
        int             _index,
        InventDim       _inventDimOnHandCriteria,
        InventTrans     _inventTrans,
        boolean         _updateInventTransReservePhysical,
        boolean         _updateInventTransReserveOrdered,
        InventQty       _maxCanReservePhysical,
        InventQty       _maxCanReserveOrdered,
        boolean         _reserveWeightOnly
        )
    {
        if (logger.isEnabled())
        {
            SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();

            var properties = logger.properties();

            serializer
                .setValue(properties.LoopIndex, int2Str(_index))
                .setNameAndValue(properties.propertyByTableNameFieldValue(properties.OnHandDimCriteria, _inventDimOnHandCriteria.inventDimId))
                .setNameAndValue(properties.propertyByTableRecord(_inventTrans))
                .setValue(properties.IsBatchSpecified, int2Str(_inventDimOnHandCriteria.inventBatchId != ''))
                .setValue(properties.IsSerialSpecified, int2Str(_inventDimOnHandCriteria.inventSerialId != ''))
                .setValue(properties.IsLocationSpecified, int2Str(_inventDimOnHandCriteria.wMSLocationId != ''))
                .setValue(properties.IsLicensePlateSpecified, int2Str(_inventDimOnHandCriteria.LicensePlateId != ''))
                .setValue(properties.CanReservePhysical, int2Str(_maxCanReservePhysical != 0))
                .setValue(properties.CanReserveOrdered, int2Str(_maxCanReserveOrdered != 0))
                .setValue(properties.InventTransReservePhysical, int2Str(_updateInventTransReservePhysical))
                .setValue(properties.InventTransReserveOrdered, int2Str(_updateInventTransReserveOrdered))
                .setValue(properties.ReserveWeightOnly, int2Str(_reserveWeightOnly));

            logger.logInformation(serializer.toString());
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>