<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTrackingPendingProdSummaryFilter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventTrackingPendingProdSummaryFilter</c> class provides tracing filtering for
///    the <see cref="ProdTable form"/> form for showing pending production orders.
/// </summary>
class InventTrackingPendingProdSummaryFilter extends InventTrackingTraceFilter
{
    #define.CurrentVersion(1)

    InventTrackingDimTracingCriteria    tracingCriteria;
    Set                                 includedProdId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToFilter</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a production order ID to the filter.
    /// </summary>
    /// <param name="_prodId">
    ///    The production order ID to add.
    /// </param>
    private void addToFilter(ProdId _prodId)
    {
        ProdTableTmpFilter  prodTableTmpFilter = filterTmp as ProdTableTmpFilter;

        if (!includedProdId.in(_prodId))
        {
            includedProdId.add(_prodId);

            prodTableTmpFilter.ProdId = _prodId;
            prodTableTmpFilter.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>captionSuffix</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the suffix string to add to the form caption.
    /// </summary>
    /// <returns>
    ///    The suffix string to add to the form caption.
    /// </returns>
    protected str captionSuffix()
    {
        return "@SYS4004864" + #ListSeparator + tracingCriteria.captionSuffix();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCoProductForCreatedProdQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a <c>Query</c> for retrieving pending production orders in the created state
    ///    where the criteria item is found as a co-product.
    /// </summary>
    /// <returns>
    ///    A <c>Query</c> to use for retrieving the production order reference in a <c>ProdTable</c> record buffer.
    /// </returns>
    private Query createCoProductForCreatedProdQuery()
    {
        Query                   query = new Query();

        QueryBuildDataSource dsProdTable = query.addDataSource(tableNum(ProdTable));
        dsProdTable.addSelectionField(fieldNum(ProdTable, ProdId));
        dsProdTable.addGroupByField(fieldNum(ProdTable, ProdId));
        dsProdTable.addRange(fieldNum(ProdTable, ProdStatus)).value(queryValue(ProdStatus::Created));
        dsProdTable.addRange(fieldNum(ProdTable, ProdType)).value(queryValue(ProdType::Process));

        QueryBuildDataSource dsPmfProdCoBy = dsProdTable.addDataSource(tableNum(PmfProdCoBy));
        dsPmfProdCoBy.relations(true);
        dsPmfProdCoBy.addSelectionField(fieldNum(PmfProdCoBy, RecId));
        dsPmfProdCoBy.addRange(fieldNum(PmfProdCoBy, ItemId)).value(queryValue(tracingCriteria.parmItemIdCriteria()));
        dsPmfProdCoBy.addRange(fieldNum(PmfProdCoBy, ProductType)).value(queryValue(PmfProductType::Co_Product));

        // Must not have any inventory transactions yet (these would be found in the first set of queries)
        QueryBuildDataSource dsInventTransOrigin = dsPmfProdCoBy.addDataSource(tableNum(InventTransOrigin));
        dsInventTransOrigin.joinMode(JoinMode::NoExistsJoin);
        dsInventTransOrigin.addLink(fieldNum(PmfProdCoBy, InventTransId), fieldNum(InventTransOrigin, InventTransId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createIngredientForCreatedProdQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a <c>Query</c> for retrieving pending production orders in the created state
    ///    where the criteria item is found as an ingredient.
    /// </summary>
    /// <returns>
    ///    A <c>Query</c> to use for retrieving the production order reference in a <c>ProdTable</c> record buffer.
    /// </returns>
    private Query createIngredientForCreatedProdQuery()
    {
        Query                   query = new Query();

        QueryBuildDataSource dsProdTable = query.addDataSource(tableNum(ProdTable));
        dsProdTable.addSelectionField(fieldNum(ProdTable, ProdId));
        dsProdTable.addGroupByField(fieldNum(ProdTable, ProdId));
        dsProdTable.addRange(fieldNum(ProdTable, ProdStatus)).value(queryValue(ProdStatus::Created));

        QueryBuildDataSource dsProdBOM = dsProdTable.addDataSource(tableNum(ProdBOM));
        dsProdBOM.relations(true);
        dsProdBOM.addSelectionField(fieldNum(ProdBOM, RecId));
        dsProdBOM.addRange(fieldNum(ProdBOM, ItemId)).value(queryValue(tracingCriteria.parmItemIdCriteria()));

        // Must not have any inventory transactions yet (these would be found in the first set of queries)
        QueryBuildDataSource dsInventTransOrigin = dsProdBOM.addDataSource(tableNum(InventTransOrigin));
        dsInventTransOrigin.joinMode(JoinMode::NoExistsJoin);
        dsInventTransOrigin.addLink(fieldNum(ProdBOM, InventTransId), fieldNum(InventTransOrigin, InventTransId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPendingIngredientQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a <c>Query</c> for retrieving pending production orders where the criteria item is found as an ingredient.
    /// </summary>
    /// <returns>
    ///    A <c>Query</c> to use for retrieving the production order reference in an <c>InventTransOrigin</c> record buffer.
    /// </returns>
    private Query createPendingIngredientQuery()
    {
        Query                   query = new Query();

        QueryBuildDataSource dsInventTransOrigin = query.addDataSource(tableNum(InventTransOrigin));
        dsInventTransOrigin.addSelectionField(fieldNum(InventTransOrigin, ReferenceId));
        dsInventTransOrigin.addGroupByField(fieldNum(InventTransOrigin, ReferenceId));
        dsInventTransOrigin.addRange(fieldNum(InventTransOrigin, ItemId)).value(queryValue(tracingCriteria.parmItemIdCriteria()));
        dsInventTransOrigin.addRange(fieldNum(InventTransOrigin, ReferenceCategory)).value(SysQuery::value(InventTransType::ProdLine));

        // Must not be an ingredient for a production order where the end item has a transaction that is registered or later receipt status
        QueryBuildDataSource dsProdTable = dsInventTransOrigin.addDataSource(tableNum(ProdTable));
        dsProdTable.fetchMode(QueryFetchMode::One2One);
        dsProdTable.joinMode(JoinMode::NoExistsJoin);
        dsProdTable.addLink(fieldNum(ProdTable, ProdId), fieldNum(InventTransOrigin, ReferenceId));

        QueryBuildDataSource dsOriginProduction = dsProdTable.addDataSource(tableNum(InventTransOrigin));
        dsOriginProduction.joinMode(JoinMode::InnerJoin);
        dsOriginProduction.relations(true);

        QueryBuildDataSource dsInventTransFilter = dsOriginProduction.addDataSource(tableNum(InventTrans));
        dsInventTransFilter.relations(true);
        dsInventTransFilter.joinMode(JoinMode::InnerJoin);
        dsInventTransFilter.addRange(fieldNum(InventTrans, StatusReceipt)).value(queryValue(StatusReceipt::Registered));
        dsInventTransFilter.addRange(fieldNum(InventTrans, StatusReceipt)).value(queryValue(StatusReceipt::Received));
        dsInventTransFilter.addRange(fieldNum(InventTrans, StatusReceipt)).value(queryValue(StatusReceipt::Purchased));
        dsInventTransFilter.addRange(fieldNum(InventTrans, StatusIssue)).value(queryValue(StatusIssue::None));

        // Must also not be an ingredient for a production order where any co-product item has a transaction that is registered or later receipt status
        QueryBuildDataSource dsPmfProdCoBy = dsInventTransOrigin.addDataSource(tableNum(PmfProdCoBy));
        dsPmfProdCoBy.fetchMode(QueryFetchMode::One2One);
        dsPmfProdCoBy.joinMode(JoinMode::NoExistsJoin);
        dsPmfProdCoBy.addLink(fieldNum(PmfProdCoBy, ProdId), fieldNum(InventTransOrigin, ReferenceId));
        dsPmfProdCoBy.addRange(fieldNum(PmfProdCoBy, ProductType)).value(queryValue(PmfProductType::Co_Product));

        dsOriginProduction = dsPmfProdCoBy.addDataSource(tableNum(InventTransOrigin));
        dsOriginProduction.joinMode(JoinMode::InnerJoin);
        dsOriginProduction.addLink(fieldNum(PmfProdCoBy, InventTransId), fieldNum(InventTransOrigin, InventTransId));

        dsInventTransFilter = dsOriginProduction.addDataSource(tableNum(InventTrans));
        dsInventTransFilter.relations(true);
        dsInventTransFilter.joinMode(JoinMode::InnerJoin);
        dsInventTransFilter.addRange(fieldNum(InventTrans, StatusReceipt)).value(queryValue(StatusReceipt::Registered));
        dsInventTransFilter.addRange(fieldNum(InventTrans, StatusReceipt)).value(queryValue(StatusReceipt::Received));
        dsInventTransFilter.addRange(fieldNum(InventTrans, StatusReceipt)).value(queryValue(StatusReceipt::Purchased));
        dsInventTransFilter.addRange(fieldNum(InventTrans, StatusIssue)).value(queryValue(StatusIssue::None));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPendingProductionQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a <c>Query</c> for retieving pending production orders where the criteria item is found as an end-item or co-product.
    /// </summary>
    /// <returns>
    ///    A <c>Query</c> to use for retrieving the production order reference in an <c>InventTransOrigin</c> record buffer.
    /// </returns>
    private Query createPendingProductionQuery()
    {
        Query                   query = new Query();

        QueryBuildDataSource dsInventTransOrigin = query.addDataSource(tableNum(InventTransOrigin));
        dsInventTransOrigin.addSelectionField(fieldNum(InventTransOrigin, ReferenceId));
        dsInventTransOrigin.addGroupByField(fieldNum(InventTransOrigin, ReferenceId));
        dsInventTransOrigin.addRange(fieldNum(InventTransOrigin, ItemId)).value(queryValue(tracingCriteria.parmItemIdCriteria()));
        dsInventTransOrigin.addRange(fieldNum(InventTransOrigin, ReferenceCategory)).value(SysQuery::value(InventTransType::Production));
        dsInventTransOrigin.addRange(fieldNum(InventTransOrigin, ReferenceCategory)).value(SysQuery::value(InventTransType::PmfProdCoBy));

        QueryBuildDataSource dsInventTrans = dsInventTransOrigin.addDataSource(tableNum(InventTrans));
        dsInventTrans.relations(true);
        dsInventTrans.joinMode(JoinMode::ExistsJoin);
        dsInventTrans.addRange(fieldNum(InventTrans, ItemId)).value(queryValue(tracingCriteria.parmItemIdCriteria()));
        dsInventTrans.addRange(fieldNum(InventTrans, StatusReceipt)).value(queryValue(StatusReceipt::Ordered));
        dsInventTrans.addRange(fieldNum(InventTrans, StatusReceipt)).value(queryValue(StatusReceipt::Arrived));
        dsInventTrans.addRange(fieldNum(InventTrans, StatusIssue)).value(queryValue(StatusIssue::None));

        // Must not also have another transaction in registered or later receipt status - these would show on the trace tree
        QueryBuildDataSource dsInventTransFilter = dsInventTransOrigin.addDataSource(tableNum(InventTrans));
        dsInventTransFilter.relations(true);
        dsInventTransFilter.fetchMode(QueryFetchMode::One2One);
        dsInventTransFilter.joinMode(JoinMode::NoExistsJoin);
        dsInventTransFilter.addRange(fieldNum(InventTrans, StatusReceipt)).value(queryValue(StatusReceipt::Registered));
        dsInventTransFilter.addRange(fieldNum(InventTrans, StatusReceipt)).value(queryValue(StatusReceipt::Received));
        dsInventTransFilter.addRange(fieldNum(InventTrans, StatusReceipt)).value(queryValue(StatusReceipt::Purchased));
        dsInventTransFilter.addRange(fieldNum(InventTrans, StatusIssue)).value(queryValue(StatusIssue::None));

        // Must not be used as a by-product
        QueryBuildDataSource dsPmfProdCoBy = dsInventTransOrigin.addDataSource(tableNum(PmfProdCoBy));
        dsPmfProdCoBy.joinMode(JoinMode::NoExistsJoin);
        dsPmfProdCoBy.fetchMode(QueryFetchMode::One2One);
        dsPmfProdCoBy.addLink(fieldNum(InventTransOrigin, InventTransId), fieldNum(PmfProdCoBy, InventTransId));
        dsPmfProdCoBy.addRange(fieldNum(PmfProdCoBy, ProductType)).value(queryValue(PmfProductType::By_Product));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFilterTable</Name>
				<Source><![CDATA[
    protected void fillFilterTable()
    {
        InventTransOrigin   inventTransOrigin;
        ProdTable           prodTable;

        QueryRun queryRun = new QueryRun(this.createPendingProductionQuery());
        while (queryRun.next())
        {
            inventTransOrigin = queryRun.get(tableNum(InventTransOrigin));
            this.addToFilter(inventTransOrigin.ReferenceId);
        }

        queryRun = new QueryRun(this.createPendingIngredientQuery());
        while (queryRun.next())
        {
            inventTransOrigin = queryRun.get(tableNum(InventTransOrigin));
            this.addToFilter(inventTransOrigin.ReferenceId);
        }

        queryRun = new QueryRun(this.createIngredientForCreatedProdQuery());
        while (queryRun.next())
        {
            prodTable = queryRun.get(tableNum(ProdTable));
            this.addToFilter(prodTable.ProdId);
        }

        queryRun = new QueryRun(this.createCoProductForCreatedProdQuery());
        while (queryRun.next())
        {
            prodTable = queryRun.get(tableNum(ProdTable));
            this.addToFilter(prodTable.ProdId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterTableType</Name>
				<Source><![CDATA[
    protected TableId filterTableType()
    {
        return tableNum(ProdTableTmpFilter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPost</Name>
				<Source><![CDATA[
    public void formInitPost()
    {
        super();

        if (tracingCriteria)
        {
            formRun.design().caption(formRun.design().caption() + #CaptionSeparator + this.captionSuffix());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init()
    {
        super();

        includedProdId = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container   packedCriteria;

        if (tracingCriteria)
        {
            packedCriteria = tracingCriteria.pack();
        }

        return [#currentVersion, packedCriteria];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTracingCriteria</Name>
				<Source><![CDATA[
    public InventTrackingDimTracingCriteria parmTracingCriteria(InventTrackingDimTracingCriteria _tracingCriteria = tracingCriteria)
    {
        tracingCriteria = _tracingCriteria;

        return tracingCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packed)
    {
        Version version = RunBase::getVersion(_packed);

        container packedCriteria;

        switch (version)
        {
            case #CurrentVersion:
                [version, packedCriteria] = _packed;
                if (conLen(packedCriteria) > 0)
                {
                    this.parmTracingCriteria(InventTrackingDimTracingCriteria::newFromPacked(packedCriteria));
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventTrackingPendingProdSummaryFilter construct()
    {
        return new InventTrackingPendingProdSummaryFilter();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
