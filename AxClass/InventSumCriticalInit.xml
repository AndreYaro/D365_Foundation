<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSumCriticalInit</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventSumCriticalInit</c> class prepares data for the critical on-hand inventory report.
/// </summary>
public class InventSumCriticalInit
{
    Query                   criticalOnHandQuery;
    UserConnection          userConnection;
    
    InventSumCriticalTmp    inventSumCriticalTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParams</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new initialization class for critical on-hand inventory report.
    /// </summary>
    /// <returns>An instance of <c>InventSumCriticalInit</c> class.</returns>
    public static InventSumCriticalInit newFromParams(UserConnection _userConnection,
                                                      Query          _query)
    {
        InventSumCriticalInit inventSumCriticalInit = new InventSumCriticalInit();
        InventSumCriticalInit.initialize(_userConnection, _query);

        return InventSumCriticalInit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize(UserConnection _userConnection,
                            Query          _query)
    {
        criticalOnHandQuery = _query;
        userConnection = _userConnection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInventSumCriticalRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the invent sum critical records and populates the report table.
    /// </summary>
    public void processInventSumCriticalRecords()
    {
        InventDim           inventDim;
        ReqItemTable        reqItemTable;
        ItemId              itemId;

        InventDimParm       inventDimParm;
        InventDimGroupSetup inventDimGroupSetup;
        ReqSetup            reqSetup;        
        
        inventSumCriticalTmp.setConnection(userConnection);
        
        QueryRun queryRun = new QueryRun(criticalOnHandQuery);
        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(ReqItemTable)))
            {
                reqItemTable = queryRun.get(tableNum(ReqItemTable));
                if (itemId != reqItemTable.ItemId)
                {
                    itemId = reqItemTable.ItemId;

                    reqSetup = ReqSetup::newItemId(itemId);
                    inventDimGroupSetup = InventDimGroupSetup::newItemId(itemId);
                    inventDimParm.initCovPrDimension(inventDimGroupSetup);
                }
            }

            inventDim = queryRun.get(tableNum(InventDim));
            
            this.insertPhysicalOnhandBelowMinimumQuantity(
                                                reqSetup,
                                                itemId,
                                                inventDim,
                                                inventDimParm,
                                                inventDimGroupSetup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPhysicalOnhandBelowMinimumQuantity</Name>
				<Source><![CDATA[
    private void insertPhysicalOnhandBelowMinimumQuantity(
                                    ReqSetup            _reqSetup,
                                    ItemId              _itemId,
                                    InventDim           _inventDim,
                                    InventDimParm       _inventDimParm,
                                    InventDimGroupSetup _inventDimGroupSetup)
    {

        InventDim inventDimCoverage = InventDim::find(_inventDim.reqCovDimId(_inventDimGroupSetup));
        InventQtyMinOnhand minimumOnHandQuantity = ReqSetupDim::newCovInventDimId(_reqSetup, inventDimCoverage.InventDimId).minInventOnHand();

        InventSum inventSumOnHand  = InventOnHandQty::newItemDim(_itemId, inventDimCoverage, _inventDimParm).inventSum();

        if (inventSumOnHand.physicalInventCalculated() < minimumOnHandQuantity)
        {
            this.initTmpTable(inventSumOnHand, _inventDim, minimumOnHandQuantity);
            this.insertTmpTable();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpTable</Name>
				<Source><![CDATA[
    protected void initTmpTable(
        InventSum _inventSumOnHand,
        InventDim _inventDim,
        InventQtyMinOnhand _minimumOnHandQuantity)
    {
        InventIAvailability inventAvailability = InventAvailabilityProvider::findBySumDim(_inventSumOnHand, _inventDim).parmInventAvailability();
        inventSumCriticalTmp.QtyMinOnhand = _minimumOnHandQuantity;
        inventSumCriticalTmp.ItemId = _inventSumOnHand.ItemId;
        inventSumCriticalTmp.InventDimFieldsMap::initAllDimensionsFrom(_inventDim);
        inventSumCriticalTmp.Ordered = inventAvailability.ordered();
        inventSumCriticalTmp.ItemName = _inventSumOnHand.itemName();
        inventSumCriticalTmp.PhysicalInvent = _inventSumOnHand.physicalInventCalculated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTable</Name>
				<Source><![CDATA[
    protected void insertTmpTable()
    {
        inventSumCriticalTmp.insert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>