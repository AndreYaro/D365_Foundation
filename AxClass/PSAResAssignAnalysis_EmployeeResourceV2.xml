<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSAResAssignAnalysis_EmployeeResourceV2</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     This derived class is used for handling worker wise assignment analysis.
///     This class is used specifically when project resource performance enhancement feature is enabled.
/// </summary>
public class PSAResAssignAnalysis_EmployeeResourceV2 extends PSAResAssignAnalysisBase
{
    #TimeConstants

    Query rootQuery;
    QueryBuildDataSource analysisDS;

    private const real percent100 = 100.0;
    private utcdatetime startDateTime = DateTimeUtil::minValue();
    private utcdatetime endDateTime = DateTimeUtil::maxValue();

    private boolean projBase;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the query for getting worker wise resource assignment analysis records.
    /// </summary>
    public void buildQuery()
    {
        if (m_dStartDate)
        {
            startDateTime = DateTimeUtil::newDateTime(m_dStartDate, 0);
        }

        if (m_dEndDate)
        {
            endDateTime = DateTimeUtil::newDateTime(m_dEndDate, 0);
        }

        rootQuery = new Query();

        if (m_tCommon && (m_tCommon.TableId == tableNum(ProjTable)))
        {
            projBase = true;
            ProjTable projTable = m_tCommon;
            ActivityRecId activity = ProjWBS::getRootActivityRecId(projTable.ProjId);

            analysisDS = rootQuery.addDataSource(tableNum(ResResourceAnalysisPerProjectDayViewV2));
            
            analysisDS.addRange(fieldNum(ResResourceAnalysisPerProjectDayViewV2, Activity))
                .value(SysQuery::value(activity));

            if (m_Resource)
            {
                analysisDS.addRange(fieldNum(ResResourceAnalysisPerProjectDayViewV2, Resource))
                .value(SysQuery::value(m_Resource));
            }
            else if (m_tCommon && (m_tCommon.TableId == tableNum(ResourceView)))
            {
                ResourceView resourceView = m_tCommon;
                analysisDS.addRange(fieldNum(ResResourceAnalysisPerProjectDayViewV2, Resource))
                    .value(SysQuery::value(resourceView.RecId));
            }

            analysisDS.addRange(fieldNum(ResResourceAnalysisPerProjectDayViewV2, RecipientCompany))
                .value(SysQuery::value(curExt()));
            analysisDS.addRange(fieldNum(ResResourceAnalysisPerProjectDayViewV2, Timeframe))
                .value(queryRange(startDateTime, endDateTime));
            
            analysisDS.addSelectionField(fieldnum(ResResourceAnalysisPerProjectDayViewV2, Resource));
            analysisDS.addSelectionField(fieldnum(ResResourceAnalysisPerProjectDayViewV2, ResourceCategoryId));
            analysisDS.addSelectionField(fieldnum(ResResourceAnalysisPerProjectDayViewV2, Capacity), SelectionField::Sum);
            analysisDS.addSelectionField(fieldnum(ResResourceAnalysisPerProjectDayViewV2, HardLocked), SelectionField::Sum);
            analysisDS.addSelectionField(fieldnum(ResResourceAnalysisPerProjectDayViewV2, SoftLocked), SelectionField::Sum);
            analysisDS.addSelectionField(fieldnum(ResResourceAnalysisPerProjectDayViewV2, HardAssigned), SelectionField::Sum);
            analysisDS.addSelectionField(fieldnum(ResResourceAnalysisPerProjectDayViewV2, HardBooked), SelectionField::Sum);
            analysisDS.addSelectionField(fieldnum(ResResourceAnalysisPerProjectDayViewV2, Remaining), SelectionField::Sum);
            
            analysisDS.orderMode(OrderMode::GroupBy);
            analysisDS.addGroupByField(fieldnum(ResResourceAnalysisPerProjectDayViewV2, Resource));
            analysisDS.addGroupByField(fieldnum(ResResourceAnalysisPerProjectDayViewV2, ResourceCategoryId));
            analysisDS.addGroupByField(fieldnum(ResResourceAnalysisPerProjectDayViewV2, Activity));
            analysisDS.addGroupByField(fieldnum(ResResourceAnalysisPerProjectDayViewV2, RecipientCompany));
            analysisDS.addGroupByField(fieldnum(ResResourceAnalysisPerProjectDayViewV2, EffectiveDate));
            analysisDS.addGroupByField(fieldnum(ResResourceAnalysisPerProjectDayViewV2, ExpirationDate));
            analysisDS.addGroupByField(fieldnum(ResResourceAnalysisPerProjectDayViewV2, ResourceId));
            analysisDS.addGroupByField(fieldnum(ResResourceAnalysisPerProjectDayViewV2, ResourceName));
            
        }
        else
        {
            analysisDS = rootQuery.addDataSource(tableNum(ResResourceAnalysisDayViewV2));
               
            if (m_Resource)
            {
                analysisDS.addRange(fieldNum(ResResourceAnalysisDayViewV2, Resource))
                    .value(SysQuery::value(m_Resource));
            }
            else if (m_tCommon && (m_tCommon.TableId == tableNum(ResourceView)))
            {
                ResourceView resourceView = m_tCommon;
                analysisDS.addRange(fieldNum(ResResourceAnalysisDayViewV2, Resource))
                    .value(SysQuery::value(resourceView.RecId));
            }

            analysisDS.addRange(fieldNum(ResResourceAnalysisDayViewV2, RecipientCompany))
                .value(SysQuery::value(curExt()));
            analysisDS.addRange(fieldNum(ResResourceAnalysisDayViewV2, Timeframe))
                .value(queryRange(startDateTime, endDateTime));
            
            analysisDS.addSelectionField(fieldnum(ResResourceAnalysisDayViewV2, Resource));
            analysisDS.addSelectionField(fieldnum(ResResourceAnalysisDayViewV2, ResourceCategoryId));
            analysisDS.addSelectionField(fieldnum(ResResourceAnalysisDayViewV2, Capacity), SelectionField::Sum);
            analysisDS.addSelectionField(fieldnum(ResResourceAnalysisDayViewV2, HardLocked), SelectionField::Sum);
            analysisDS.addSelectionField(fieldnum(ResResourceAnalysisDayViewV2, SoftLocked), SelectionField::Sum);
            analysisDS.addSelectionField(fieldnum(ResResourceAnalysisDayViewV2, HardAssigned), SelectionField::Sum);
            analysisDS.addSelectionField(fieldnum(ResResourceAnalysisDayViewV2, HardBooked), SelectionField::Sum);
            analysisDS.addSelectionField(fieldnum(ResResourceAnalysisDayViewV2, Remaining), SelectionField::Sum);
            
            analysisDS.orderMode(OrderMode::GroupBy);
            analysisDS.addGroupByField(fieldnum(ResResourceAnalysisDayViewV2, Resource));
            analysisDS.addGroupByField(fieldnum(ResResourceAnalysisDayViewV2, ResourceCategoryId));
            analysisDS.addGroupByField(fieldnum(ResResourceAnalysisDayViewV2, RecipientCompany));
            analysisDS.addGroupByField(fieldnum(ResResourceAnalysisDayViewV2, EffectiveDate));
            analysisDS.addGroupByField(fieldnum(ResResourceAnalysisDayViewV2, ExpirationDate));
            analysisDS.addGroupByField(fieldnum(ResResourceAnalysisDayViewV2, RoleEffectiveDate));
            analysisDS.addGroupByField(fieldnum(ResResourceAnalysisDayViewV2, RoleExpirationDate));
            analysisDS.addGroupByField(fieldnum(ResResourceAnalysisDayViewV2, ResourceId));
            analysisDS.addGroupByField(fieldnum(ResResourceAnalysisDayViewV2, ResourceName));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the query based on value provided for department wise resource assignment analysis.
    /// </summary>
    public void initQuery()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssignmentAnalysis</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates and populates the temporary table for worker wise assignment analysis.
    /// </summary>
    public void insertAssignmentAnalysis()
    {
        m_oSummaryQueryRun = new QueryRun(rootQuery);

        ttsbegin;

        if (projBase)
        {
            this.insertRecordByActivityProcess();
        }
        else
        {
            this.insertRecordByResourceProcess();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecordByActivityProcess</Name>
				<Source><![CDATA[
    private void insertRecordByActivityProcess()
    {
        while (m_oSummaryQueryRun.next())
        {
            ResResourceAnalysisPerProjectDayViewV2 projectAnalysis = m_oSummaryQueryRun.get(tableNum(ResResourceAnalysisPerProjectDayViewV2));
            if (projectAnalysis.EffectiveDate > endDateTime || projectAnalysis.ExpirationDate < startDateTime)
            {
                continue;
            }
            else
            {
                m_tTmpResourceAssignmentAnalysis.VersionId = projectAnalysis.ResourceId;
                m_tTmpResourceAssignmentAnalysis.Resource = projectAnalysis.Resource;
                m_tTmpResourceAssignmentAnalysis.ResourceName = projectAnalysis.ResourceName;
                m_tTmpResourceAssignmentAnalysis.ResourceCategoryId = projectAnalysis.ResourceCategoryId;
                m_tTmpResourceAssignmentAnalysis.Description = m_tTmpResourceAssignmentAnalysis.VersionId;
                m_tTmpResourceAssignmentAnalysis.Capacity = projectAnalysis.Capacity;
                m_tTmpResourceAssignmentAnalysis.HardCommit = projectAnalysis.HardLocked;
                m_tTmpResourceAssignmentAnalysis.SoftCommit = projectAnalysis.SoftLocked;
                m_tTmpResourceAssignmentAnalysis.Availability = projectAnalysis.Remaining;
                m_tTmpResourceAssignmentAnalysis.HardAssignedHours = projectAnalysis.HardAssigned;
                m_tTmpResourceAssignmentAnalysis.HardBookedHours = projectAnalysis.HardBooked;

                if (projectAnalysis.Capacity == 0)
                {
                    m_tTmpResourceAssignmentAnalysis.PercentHard = 0;
                    m_tTmpResourceAssignmentAnalysis.PercentSoft = 0;
                    m_tTmpResourceAssignmentAnalysis.PercentTotal = 0;
                    m_tTmpResourceAssignmentAnalysis.PercentAvailability = 0;
                    m_tTmpResourceAssignmentAnalysis.PercentAssignedOverBooked = 0;
                }
                else
                {
                    m_tTmpResourceAssignmentAnalysis.PercentHard = percent100 * projectAnalysis.HardLocked;
                    m_tTmpResourceAssignmentAnalysis.PercentSoft = percent100 * projectAnalysis.SoftLocked;
                    m_tTmpResourceAssignmentAnalysis.PercentTotal = percent100 * (projectAnalysis.HardLocked + projectAnalysis.SoftLocked)
                        / projectAnalysis.Capacity;
                    m_tTmpResourceAssignmentAnalysis.PercentAvailability = percent100 * (projectAnalysis.Capacity - projectAnalysis.HardLocked)
                        / projectAnalysis.Capacity;
                    if (projectAnalysis.HardBooked)
                    {
                        m_tTmpResourceAssignmentAnalysis.PercentAssignedOverBooked = percent100 *
                            projectAnalysis.HardAssigned / projectAnalysis.HardBooked;
                    }
                }
            }
            m_tTmpResourceAssignmentAnalysis.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecordByResourceProcess</Name>
				<Source><![CDATA[
    private void insertRecordByResourceProcess()
    {
        PSASchedRoleId defaultRoleId = PSASchedRole::findOrCreateTeamMemberRole().RoleId;

        while (m_oSummaryQueryRun.next())
        {
            ResResourceAnalysisDayViewV2 companyAnalysis = m_oSummaryQueryRun.get(tableNum(ResResourceAnalysisDayViewV2));
            
            if (companyAnalysis.EffectiveDate > endDateTime || companyAnalysis.ExpirationDate < startDateTime ||
                        (companyAnalysis.ResourceCategoryId != defaultRoleId
                            && (companyAnalysis.RoleEffectiveDate > DateTimeUtil::date(EndDateTime)
                                || companyAnalysis.RoleExpirationDate < DateTimeUtil::date(StartDateTime))))
            {
                continue;
            }
            else
            {
                m_tTmpResourceAssignmentAnalysis.VersionId = companyAnalysis.ResourceId;
                m_tTmpResourceAssignmentAnalysis.Resource = companyAnalysis.Resource;
                m_tTmpResourceAssignmentAnalysis.ResourceName = companyAnalysis.ResourceName;
                m_tTmpResourceAssignmentAnalysis.ResourceCategoryId = companyAnalysis.ResourceCategoryId;
                m_tTmpResourceAssignmentAnalysis.Description = m_tTmpResourceAssignmentAnalysis.VersionId;
                m_tTmpResourceAssignmentAnalysis.Capacity = companyAnalysis.Capacity;
                m_tTmpResourceAssignmentAnalysis.HardCommit = companyAnalysis.HardLocked;
                m_tTmpResourceAssignmentAnalysis.SoftCommit = companyAnalysis.SoftLocked;
                m_tTmpResourceAssignmentAnalysis.Availability = companyAnalysis.Remaining;
                m_tTmpResourceAssignmentAnalysis.HardAssignedHours = companyAnalysis.HardAssigned;
                m_tTmpResourceAssignmentAnalysis.HardBookedHours = companyAnalysis.HardBooked;

                if (companyAnalysis.Capacity == 0)
                {
                    m_tTmpResourceAssignmentAnalysis.PercentHard = 0;
                    m_tTmpResourceAssignmentAnalysis.PercentSoft = 0;
                    m_tTmpResourceAssignmentAnalysis.PercentTotal = 0;
                    m_tTmpResourceAssignmentAnalysis.PercentAvailability = 0;
                    m_tTmpResourceAssignmentAnalysis.PercentAssignedOverBooked = 0;
                }
                else
                {
                    m_tTmpResourceAssignmentAnalysis.PercentHard = percent100 * companyAnalysis.HardLocked / companyAnalysis.Capacity;
                    m_tTmpResourceAssignmentAnalysis.PercentSoft = percent100 * companyAnalysis.SoftLocked / companyAnalysis.Capacity;
                    m_tTmpResourceAssignmentAnalysis.PercentTotal = percent100 * (companyAnalysis.HardLocked + companyAnalysis.SoftLocked)
                            / companyAnalysis.Capacity;
                    m_tTmpResourceAssignmentAnalysis.PercentAvailability = percent100 * companyAnalysis.Remaining / companyAnalysis.Capacity;
                    if (companyAnalysis.HardBooked)
                    {
                        m_tTmpResourceAssignmentAnalysis.PercentAssignedOverBooked = percent100 *
                                companyAnalysis.HardAssigned / companyAnalysis.HardBooked;
                    }
                }
            }
            m_tTmpResourceAssignmentAnalysis.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>