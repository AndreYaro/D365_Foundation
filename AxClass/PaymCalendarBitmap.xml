<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PaymCalendarBitmap</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PaymCalendarBitmap</c> class provides bitmap operations on a payment calendar in bitmap form.
/// </summary>
public class PaymCalendarBitmap
{
    private const int CalendarBitmapSize = 12; // Count of Ints in the bitmap
    private const int BitsInInt = 32; // Number of bits in an Int

    private DueDate adjustedDate;
    private int businessDays[CalendarBitmapSize];
    private int dayMask;
    private int businessDaysIndex;
    private int daysRemainingInMask;
    private int daysRemainingInYear;
    private PaymentDueDateUpdatePolicy updatePolicy;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>advanceBusinessDays</Name>
				<Source><![CDATA[
    /// <summary>
    /// Advances the current adjusted date by the number of specified business days.
    /// </summary>
    /// <param name="_daysToSkip">
    /// The number of business days to skip.
    /// </param>
    /// <returns>
    /// The number of business days remaining to skip.
    /// </returns>
    /// <remarks>
    /// No advance is performed if the number of days to skip was zero.
    /// </remarks>
    public int advanceBusinessDays(int _daysToSkip)
    {
        int daysRemaining;

        // Skip days
        daysRemaining = _daysToSkip;
        while ((daysRemaining != 0) && (daysRemainingInYear != 0))
        {
            // Check if business day
            if ((businessDays[businessDaysIndex] & dayMask) != 0)
            {
                daysRemaining--;
            }

            this.seekNextDay();
        }

        return daysRemaining;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the state for subsequent seek operations.
    /// </summary>
    /// <param name="_dueDate">
    /// The original due date.
    /// </param>
    /// <param name="_updatePolicy">
    /// A value that specifies the search direction when seeking the next valid business day.
    /// </param>
    /// <param name="_calendarBitmap">
    /// A container that contains a bitmap in that the bits that correspond to business days are set to
    /// true.
    /// </param>
    private void initialize(DueDate _dueDate, PaymentDueDateUpdatePolicy _updatePolicy, container _calendarBitmap)
    {
        int targetDay;
        int bitPosition;
        int daysInYear;

        PreferredLocale locale = new xSession().preferredLocale();

        // Setup calendar
        adjustedDate = _dueDate;
        businessDays = conPeek(_calendarBitmap, 1);

        // Init mask
        targetDay = dayOfYr(adjustedDate);
        businessDaysIndex = PaymCalendarBitmap::getBitmapIndex(targetDay);
        bitPosition = PaymCalendarBitmap::getBitPosition(targetDay);
        dayMask = 0x00000001 << (bitPosition - 1);

        // Init {updatePolicy, daysRemainingInMask, daysRemainingInYear}  (values include targetDay)
        updatePolicy = _updatePolicy;
        if (updatePolicy == PaymentDueDateUpdatePolicy::Next)
        {
            daysRemainingInMask = BitsInInt - bitPosition + 1;

            daysInYear = dayOfYr(DateTimeUtil::getEndOfYearDate(locale, adjustedDate));
            daysRemainingInYear = daysInYear - targetDay + 1;
        }
        else
        {
            daysRemainingInMask = bitPosition;
            daysRemainingInYear = targetDay;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdjustedDate</Name>
				<Source><![CDATA[
    public DueDate parmAdjustedDate()
    {
        return adjustedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>seekNearestBusinessDay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Advances the current adjusted date to the nearest business.
    /// </summary>
    /// <returns>
    /// true is a business day was found; otherwise, false.
    /// </returns>
    /// <remarks>
    /// No advance is performed if the current day is already a business day.
    /// </remarks>
    public boolean seekNearestBusinessDay()
    {
        boolean isDateFound = false;

        // Seek day
        while (daysRemainingInYear != 0)
        {
            // Check if business day
            if ((businessDays[businessDaysIndex] & dayMask) != 0)
            {
                isDateFound = true;
                break;
            }

            this.seekNextDay();
        }

        return isDateFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>seekNextDay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Advances the date per internal values.
    /// </summary>
    /// <remarks>
    /// The updated date will wrap to the next or previous year if you advance for the last remaining day.
    /// </remarks>
    private void seekNextDay()
    {
        daysRemainingInMask--;
        if (updatePolicy == PaymentDueDateUpdatePolicy::Next)
        {
            adjustedDate++;

            if (daysRemainingInMask == 0)
            {
                dayMask = 0x00000001;
                daysRemainingInMask = BitsInInt;
                businessDaysIndex++;
            }
            else
            {
                dayMask = dayMask << 1;
            }
        }
        else
        {
            adjustedDate--;

            if (daysRemainingInMask == 0)
            {
                dayMask = any2int(0x80000000);
                daysRemainingInMask = BitsInInt;
                businessDaysIndex--;
            }
            else
            {
                dayMask = dayMask >> 1;
            }
        }

        daysRemainingInYear--;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an instance of the <c>PaymCalendarBitmap</c> class.
    /// </summary>
    /// <param name="_dueDate">
    /// The original due date.
    /// </param>
    /// <param name="_updatePolicy">
    /// A value that specifies the search direction when seeking the next valid business day.
    /// </param>
    /// <param name="_calendarBitmap">
    /// A container that contains a bitmap in that the bits that correspond to business days are set to
    /// true.
    /// </param>
    /// <returns>
    /// A new instance of the <c>PaymCalendarBitmap</c> class.
    /// </returns>
    /// <remarks>
    /// Sets up internal values for adjusting a due date for a specified calendar.
    /// </remarks>
    public static PaymCalendarBitmap construct(DueDate _dueDate, PaymentDueDateUpdatePolicy _updatePolicy, container _calendarBitmap)
    {
        PaymCalendarBitmap paymCalendarBitmap;

        paymCalendarBitmap = new PaymCalendarBitmap();
        paymCalendarBitmap.initialize(_dueDate, _updatePolicy, _calendarBitmap);

        return paymCalendarBitmap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBitmapIndex</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the index into the array of integers representing the bitmap for the specified day in the year.
    /// </summary>
    /// <param name="_targetDay">
    /// The day in the year.
    /// </param>
    /// <returns>
    /// The bitmap index.
    /// </returns>
    /// <remarks>
    /// The index will be in the range of 1 through 12.
    /// </remarks>
    private static int getBitmapIndex(int _targetDay)
    {
        int bitmapIndex;

        bitmapIndex = real2int(((_targetDay - 1) / BitsInInt) + 1);

        return bitmapIndex;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBitPosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bit position for the bitmask for the specified day in the year.
    /// </summary>
    /// <param name="_targetDay">
    /// The day in the year.
    /// </param>
    /// <returns>
    /// The bit position.
    /// </returns>
    /// <remarks>
    /// The bit position will be in the range of 1 through 32.
    /// </remarks>
    private static int getBitPosition(int _targetDay)
    {
        int bitPosition;

        bitPosition = _targetDay mod BitsInInt;

        if (bitPosition == 0)
        {
            bitPosition = 32;
        }

        return bitPosition;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>