<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayConfirmationDialog</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkExecuteDisplayConfirmationDialog</c> class is used to build the mobile device screen for confirmation.
/// </summary>
[WHSWorkExecuteMode(WHSWorkExecuteMode::ConfirmationDialog)]
class WHSWorkExecuteDisplayConfirmationDialog extends WhsWorkExecuteDisplay
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildConfirmResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build the confirmation dialog screen.
    /// </summary>
    /// <returns>
    /// The confirmation screen.
    /// </returns>
    public container buildConfirmResult()
    {
        container ret;

        ret += [this.buildControl(#RFLabel, #ConfirmTitle, pass.lookupStr(#ConfirmTitle), 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFLabel, #ConfirmText, pass.lookupStr(#ConfirmText), 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFButton, #RFYes, "@SYS323111", 1, '', #WHSRFUndefinedDataType, '', 1)];
        ret += [this.buildControl(#RFButton, #RFNo, "@SYS26062", 1, '', #WHSRFUndefinedDataType, '', 0)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the  <c>WHSWorkExecuteDisplayConfirmationDialog </c> classbased on the parameters.
    /// </summary>
    /// <param name = "_con">A container representing the form.</param>
    /// <param name = "_pass">The pass.</param>
    /// <param name = "_mode">The mode.</param>
    /// <param name = "_confirmTitle">The title.</param>
    /// <param name = "_confirmText">The text.</param>
    /// <returns></returns>
    public static WHSWorkExecuteDisplayConfirmationDialog newStandard(
        container           _con,
        WHSRFPassthrough    _pass,
        WHSWorkExecuteMode  _mode = WHSWorkExecuteMode::ConfirmationDialog,
        str                 _confirmTitle = '',
        str                 _confirmText = '')
    {
        WHSRFPassthrough                        pass = _pass;

        str confirmTitle = _confirmTitle == '' ? strFmt("@WAX:MobileDeviceCancelOperation", pass.lookupStr(#MenuItem)) : _confirmTitle;
        str confirmText  = _confirmText == '' ? "@SYS24514" : _confirmText;

        // Set information for confirm screen
        pass.insert(#PrevStep, conPeek(conPeek(_con, #StateInfo), 2));
        pass.insert(#PrevMode, conPeek(conPeek(_con, #StateInfo), 1));
        pass.insert(#ConfirmTitle, confirmTitle);
        pass.insert(#ConfirmText, confirmText);

        return WHSWorkExecuteDisplay::construct(_mode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    public container displayForm(container _con, str _buttonclicked = '')
    {
        container             ret;

        pass = WHSRFPassthrough::create(conPeek(_con, 2));
        mode = conPeek(conPeek(_con, 1), 1);

        if (_buttonclicked == #RFNo || _buttonclicked == #RFYes)
        {
            pass.insert(#ConfirmResult, _buttonclicked);
            step = 1;
        }

        switch (step)
        {
            case 0:
                ret = this.buildConfirmResult();
                break;

            case 1:
                if (pass.exists(#ConfirmResult))
                {
                    // Rebuild original screen
                    mode = pass.parmPrevMode();

                    // Use existing pass information if screen is not cancelled.
                    if (pass.lookup(#ConfirmResult) == #RFNo)
                    {
                        step = pass.lookup(#PrevStep);
                        ret = conPoke(_con, #StateInfo, [mode, step]);
                        ret = this.updateModeStepPass(ret, mode, step, pass);
                    }
                    // Clear screen information if screen is cancelled
                    else if (pass.lookup(#ConfirmResult) == #RfYes)
                    {
                        step = 0;
                        WHSWorkUserSessionId  userSessionId = str2guid(pass.lookup(#UserSessionId));
                        WHSMenuItemName       menuItemName = pass.lookupStr(#MenuItem);
                        InventLocationId inventLocationId = pass.lookupStr(#InventLocationId);
                        pass = WHSRFPassthrough::newEmpty();
                        pass.insert(#UserId, userId);
                        pass.insert(#UserSessionId, guid2str(userSessionId));
                        pass.insert(#MenuItem, menuItemName);
                        pass.insert(#InventLocationId, InventLocationId);
                        ret           = conPoke(_con, #StateInfo, [mode, step]);
                        ret           = conPoke(ret, #PassthroughInfo, pass.pack());
                        container tmp = conPoke(conPeek(ret, #StateInfo), #StateInfoStep, step);
                        ret           = conPoke(ret, #StateInfo, tmp);
                    }
                    WHSWorkExecuteDisplay workExecuteDisplay =  WHSWorkExecuteDisplay::construct(mode);
                    workExecuteDisplay.setGlobals(mode, step, userId, pass);
                    ret = workExecuteDisplay.displayForm(ret);
                    pass = WHSRFPassthrough::create(conPeek(ret, 2));
                }

            default:
                break;
        }

        ret = this.updateModeStepPass(ret, mode, step, pass);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>