<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WarrantyGroupFacade</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides business functionality for warranty group.
/// </summary>
internal class WarrantyGroupFacade
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addApplicableChannelsFromPicker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add applicable channels selected in organization picker into DB.
    /// </summary>
    /// <param name = "_operatingUnitPickerData">The selection data from the operating unit picker form.</param>
    /// <param name = "_warrantyGroupHeader">warranty group header</param>
    /// <returns>whether any record has been inserted</returns>
    internal static boolean addApplicableChannelsFromPicker(
        RetailOperatingUnitPickerData _operatingUnitPickerData,
        WarrantyGroupHeader _warrantyGroupHeader)
    {
        boolean hasChannelAdded = false;
        Set selectedOMInternalOrganizationIds = _operatingUnitPickerData.omInternalOrganizationRecIds;

        if (selectedOMInternalOrganizationIds.elements() > 0)
        {
            RetailWarrantyApplicableChannel applicableChannel;

            SetEnumerator enumerators = selectedOMInternalOrganizationIds.getEnumerator();

            while (enumerators.moveNext())
            {
                // RecordInsertList does not work with table inheritance
                applicableChannel.clear();
                applicableChannel.WarrantyGroupHeader = _warrantyGroupHeader.RecId;
                applicableChannel.Status = _warrantyGroupHeader.Status;
                applicableChannel.omHierarchyTypeId = _operatingUnitPickerData.omHierarchyTypeRecId;
                applicableChannel.OMInternalOrganizationId = enumerators.current();
                applicableChannel.insert();
            }

            hasChannelAdded = true;
        }

        return hasChannelAdded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishWarrantyGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publish the current warranty group.
    /// </summary>
    /// <param name="_groupHeader">
    /// WarrantyGroupHeader buffer.
    /// </param>
    internal static void publishWarrantyGroup(WarrantyGroupHeader _groupHeader)
    {
        ttsbegin;
        if (_groupHeader.Status == WarrantyGroupStatusType::Draft)
        {
            _groupHeader.selectForUpdate();
            _groupHeader.PublishedDateTime = DateTimeUtil::utcNow();
            _groupHeader.Status = WarrantyGroupStatusType::Published;
            _groupHeader.update();
        }

        WarrantyGroupConfigurationItem::publishConfigurationItem(_groupHeader.RecId);

        // Schedule lookup processing job.
        BatchHeader batchHeader;
        WarrantyLookupProcessingJob task;
        task = new WarrantyLookupProcessingJob();
        task.parmGroupHeaderRecId(_groupHeader.RecId);
        batchHeader = BatchHeader::construct();
        batchHeader.addTask(task);
        batchHeader.save();
        info("@Warranty:WarrantyGroupPublishingJobScheduled");

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWarrantyGroupToDraft</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set warranty group to draft status.
    /// </summary>
    /// <param name="_groupHeader">
    /// WarrantyGroupHeader buffer.
    /// </param>
    internal static void setWarrantyGroupToDraft(WarrantyGroupHeader _groupHeader)
    {
        ttsbegin;
        if (_groupHeader.Status == WarrantyGroupStatusType::Published)
        {
            WarrantyGroupData::copyGroupDataLines(
                _groupHeader.RecId,
                WarrantyGroupStatusType::Published,
                _groupHeader.RecId,
                WarrantyGroupStatusType::Draft);

            WarrantyApplicableProduct::copyApplicableProductLines(
                _groupHeader.RecId,
                WarrantyGroupStatusType::Published,
                _groupHeader.RecId,
                WarrantyGroupStatusType::Draft);
            if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
            {
                RetailWarrantyApplicableChannel::copyApplicableChannelLines(
                _groupHeader.RecId,
                WarrantyGroupStatusType::Published,
                _groupHeader.RecId,
                WarrantyGroupStatusType::Draft);
            }

            _groupHeader.selectForUpdate();
            _groupHeader.Status = WarrantyGroupStatusType::Draft;
            _groupHeader.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>revertWarrantyGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverts the current warranty group to the previous published data.
    /// </summary>
    /// <param name="_groupHeader">
    /// The WarrantyGroupHeader record.
    /// </param>
    internal static void revertWarrantyGroup(WarrantyGroupHeader _groupHeader)
    {
        ttsBegin;

        if (_groupHeader.Status == WarrantyGroupStatusType::Draft)
        {
            if (_groupHeader.PublishedDateTime)
            {
                WarrantyGroupConfigurationItem::deleteByGroupHeaderAndStatus(
                    _groupHeader.RecId, WarrantyGroupStatusType::Draft);

                _groupHeader.selectForUpdate();
                _groupHeader.Status = WarrantyGroupStatusType::Published;
                _groupHeader.update();
            }
            else
            {
                info("@Warranty:NoPublishedGroupToRevertTo");
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>