<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendVendorRequestNewVendorManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
///    The <c>VendVendorRequestNewVendorManager</c> class manages Vendor requests for new vendors.
/// </summary>
[ExportMetadataAttribute(enumstr(VendVendorRequestEntityType), enumLiteralStr(VendVendorRequestEntityType, NewVendor)),
    ExportAttribute(identifierstr(Dynamics.AX.Application.VendVendorRequestManager))]
public class VendVendorRequestNewVendorManager extends VendVendorRequestManager
{ 
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createVendorRequest</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Create vendor request for the given <c>>VendProspectiveVendorRegistration</c> record.
    /// </summary>
    /// <param name = "_vendorRegistration">
    ///    The <c>VendProspectiveVendorRegistration</c> for which to create vendor request. 
    /// </param>
    /// <remarks>
    /// The newly created request will be automatically submitted to NVA workflow if the NVA workflow is active and
    /// the <c>IsAutoSubmitProspectiveVendorRequestToWorkflow</c> parameter is set.
    /// </remarks>
    public void createVendorRequest(VendProspectiveVendorRegistration _vendorRegistration)
    {
        if (!_vendorRegistration)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        
        if (!_vendorRegistration.checkForCompleteness())
        {
            throw error("@SCM:ProspectiveVendorRegistrationValidateBeforeWorkflow");
        }

        ttsbegin;

        VendVendorRequestNewVendor newVendor;
        newVendor.initFrom(_vendorRegistration);
        newVendor.RequestId = this.newRequestId();
        newVendor.insert();
                       
        if(_vendorRegistration.RegistrationRequest)
        {
            VendProspectiveVendorRegistrationRequest prospectiveVendorRegistrationRequest = _vendorRegistration.prospectiveVendorRegistrationRequest(true);
            prospectiveVendorRegistrationRequest.setRequestStateToVendorRequestCreated();
            prospectiveVendorRegistrationRequest.update();
        }

        if(VendRequestManagementParameters::find().IsAutoSubmitProspectiveVendorRegistrationToWorkflow)
        {
            this.submitToWorkFlow(newVendor);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendor</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates vendor record from the given <c>>VendProspectiveVendorRegistration</c> record.
    /// </summary>
    /// <param name = "_vendorRegistration">
    ///    The <c>VendProspectiveVendorRegistration</c> for which to create vendor record.
    /// </param>
    protected void createVendor(VendProspectiveVendorRegistration _vendorRegistration)
    {
        this.checkProspectiveVendorRegistrationCompleteness(_vendorRegistration);

        changecompany(_vendorRegistration.DataAreaId)
        {
            VendVendorRequestNewVendor vendorRequest = VendVendorRequestNewVendor::findByProspectiveVendorRegistration(_vendorRegistration.RecId);

            ttsbegin;
            VendTable vendor;
            vendor.clear();

            vendor.initFromProspectiveVendorRegistration(_vendorRegistration);
            vendor.VendVendorCollaborationType = vendorRequest.VendorPortalAccessAllowed ? VendVendorCollaborationType::WithAutoConfirmation : VendVendorCollaborationType::Disabled;

            // update organization number
            DirOrganization dirOrganization = DirOrganization::find(_vendorRegistration.VendorParty, true);
            if (dirOrganization.RecId)
            {
                dirOrganization.OrgNumber = _vendorRegistration.OrganizationNumber;
                dirOrganization.NumberOfEmployees = _vendorRegistration.NumberOfEmployees;
                dirOrganization.update();
            }

            vendor.insert();

            // Vend tax state id table relation
            VendStateTaxID vendStateTaxID;
            vendStateTaxID.VendAccount  = vendor.AccountNum;
            vendStateTaxID.initFromProspectiveVendorRegistration(_vendorRegistration);
            vendStateTaxID.insert();

            // Create Tax Exempt number record coming from the Vendor Request data 
            LogisticsAddressCountryRegionId vendorCountryRegionId = vendor.countryRegionId();
            TaxVATNumTable taxVATNumTable = TaxVATNumTable::find(_vendorRegistration.VatNumber, vendorCountryRegionId);
            if (!taxVATNumTable.RecId)
            {
                taxVATNumTable.CountryRegionId = vendorCountryRegionId;
                taxVATNumTable.VATNum = _vendorRegistration.VatNumber;
                taxVATNumTable.insert();
            }

            // create vendor contact person
            ContactPerson contactPerson;
            contactPerson.clear();
            contactPerson.initFromProspectiveVendorRegistration(_vendorRegistration);
            contactPerson.initFromVendTable(vendor);
            contactPerson.insert();

            VendVendorContactPersonHelper::setContactPersonUserRelation(contactPerson);

            VendProspectiveVendorProcurementCategory::setupProcurementCategoriesForVendor(vendor.AccountNum, _vendorRegistration.RecId );

            // Copy attachments from the vendor request and prospective vendor registration to the vendor record.
            Docu::copy(vendorRequest, vendor);
            Docu::copy(_vendorRegistration, vendor);

            // set user to vendor external relation
            UserExternalParty vendExternalRelation;
            vendExternalRelation.clear();
            vendExternalRelation.initFromProspectiveVendorRegistration(_vendorRegistration);
            vendExternalRelation.insert();

            // If registration is associated to vendor user account, then depending on the VendorPortalAccessAllowed field is set create user account maintenance request to 
            // elevate prospective vendor user privileges to vendor external admin privileges; otherwise create user account deactivation request. 
            if (_vendorRegistration.RegistrationRequest)
            {
                if (vendorRequest.VendorPortalAccessAllowed)
                {
                    DirPerson person = DirPerson::find(contactPerson.Party);
                    UserInfo userInfo = xUserInfo::userInfoByUserAlias(LogisticsElectronicAddress::findRecId(person.PrimaryContactEmail).Locator);
                    SysUserInfo sysUserInfo = SysUserInfo::find(userInfo.id, true);

                    sysUserInfo.StartPage = menuItemDisplayStr(DefaultDashboard);
                    sysUserInfo.update();

                    this.maintainVendorExternalAdminPrivilegesForProspectiveVendorUser(contactPerson, person);
                }
                else
                {
                    this.deactivateProspectiveVendorAccount(vendorRequest.RecId);
                }
            }
    
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendEmailToEmployeeRequestor</Name>
				<Source><![CDATA[
    public void sendEmailToEmployeeRequestor(VendVendorRequest _vendRequest)
    {
        if (!_vendRequest)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (SysEmailParameters::find().smtpRelayServerName == '')
        {
            return;
        }

        LogisticsElectronicAddress electronicAddress  = DirParty::primaryElectronicAddress(DirPersonUser::current().PersonParty, LogisticsElectronicAddressMethodType::Email);

        Email recipientEmail  = HcmWorker::find(HcmWorker::userId2Worker(_vendRequest.SponsoredBy)).email();
        Email senderEmail     = electronicAddress ? electronicAddress.Locator : '';

        if (recipientEmail != '' && senderEmail != '')
        {
            System.Exception exception;
            try
            {
                SysMailerFactory::sendNonInteractive(new SysMailerMessageBuilder().setFrom(senderEmail)
                                                                               .addTo(recipientEmail)
                                                                               .setSubject("@SYS130372")
                                                                               .setBody(strFmt("@SYS134393", _vendRequest.VendorName))
                                                                               .getMessage());
            }
            catch (Exception::CLRError)
            {
                exception = CLRInterop::getLastException();
                info(strFmt("@SCM:EmailNotSentSetupInstruction", exception.ToString()));
            }
        }
        else
        {
            // Could not send email back to sender, recipient or sender email addresses are empty
            info("@SYS134424");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitToWorkFlow</Name>
				<Source><![CDATA[
    public void submitToWorkFlow(VendVendorRequest _vendorRequest)
    {
        VendVendorRequestNewVendor newVendor = _vendorRequest as VendVendorRequestNewVendor;

        if (!newVendor)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (!newVendor || !this.canSubmitRequestToWorkflow(newVendor))
        {  
            throw error("@SCM:SkippedSubmittingRequestToWorkflow");
        }

        try
        {
            ttsbegin;
            Workflow::activateFromWorkflowType(workflowtypestr(VendRequestNVATemplate),
                                                newVendor.RecId,
                                                strFmt("@SCM:AutoSubmittedOnBehalfOfCurrentUser", curUserId()),
                                                NoYes::No,
                                                curUserId());

            this.updateRequestStateToWorkflowSubmitted(newVendor.RecId);
            ttscommit;
        }
        catch
        {
            throw error("@SCM:ErrorHasOccurredWhileSubmittingRequestToWorkflow");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>approveRequest</Name>
				<Source><![CDATA[
    public void approveRequest(VendVendorRequest _vendorRequest)
    {
        ttsbegin;

        VendVendorRequestNewVendor vendorRequest = VendVendorRequest::find(_vendorRequest.RecId) as VendVendorRequestNewVendor;        

        if (!vendorRequest)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        VendProspectiveVendorRegistration prospectiveVendorRegistration =  VendProspectiveVendorRegistration::find(vendorRequest.ProspectiveVendorRegistration);

        if (!prospectiveVendorRegistration)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        this.createVendor(prospectiveVendorRegistration);
        this.updateRequestStateToApproved(_vendorRequest.RecId);
        this.updateProspectiveVendorRegistrationRequestStatus(_vendorRequest.RecId);
        this.sendEmailToEmployeeRequestor(_vendorRequest);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rejectRequest</Name>
				<Source><![CDATA[
    public void rejectRequest(VendVendorRequest _vendorRequest)
    {
        if (!_vendorRequest)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        ttsbegin;

        this.deactivateProspectiveVendorAccount(_vendorRequest.RecId);
        this.updateRequestStateToRejected(_vendorRequest.RecId);
        this.updateProspectiveVendorRegistrationRequestStatus(_vendorRequest.RecId);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static VendVendorRequestNewVendorManager construct()
    {
        return new VendVendorRequestNewVendorManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();      
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    public tableId tableId()
    {
        return tableNum(VendVendorRequestNewVendor);
    }

]]></Source>
			</Method>
			<Method>
				<Name>approvalMenuItem</Name>
				<Source><![CDATA[
    public menuItemNameDisplay approvalMenuItem()
    {
        return menuitemDisplayStr(VendRequestNVAForm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>originalRequestMenuItem</Name>
				<Source><![CDATA[
    public menuItemNameDisplay originalRequestMenuItem()
    {
        return menuitemDisplayStr(VendProspectiveVendorRegistrationRequests);
    }

]]></Source>
			</Method>
			<Method>
				<Name>originalRequest</Name>
				<Source><![CDATA[
    public anytype originalRequest(VendVendorRequest _vendorRequest)
    {
        if (!_vendorRequest)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return VendProspectiveVendorRegistration::find((_vendorRequest as VendVendorRequestNewVendor).ProspectiveVendorRegistration).prospectiveVendorRegistrationRequest();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmitRequestToWorkflow</Name>
				<Source><![CDATA[
    public boolean canSubmitRequestToWorkflow(VendVendorRequest _vendorRequest, str _workflowType = '')
    {
        if (_vendorRequest)
        {
            VendProspectiveVendorRegistration prospectiveVendorRegistration = VendProspectiveVendorRegistration::find((_vendorRequest as VendVendorRequestNewVendor).ProspectiveVendorRegistration);

            VendRequestProfile vendRequestProfile = VendRequestProfileHelper::findVendRequestProfile(VendFieldMetadataGroupType::VendProspectiveVendorRegistration,
                                                                                                     DirParty::primaryPostalAddress(prospectiveVendorRegistration.VendorParty).CountryRegionId);

            if (!vendRequestProfile.RecId)
            {
                throw error(Error::missingRecord(tableStr(VendRequestProfile)));
            }

            return super(_vendorRequest, _workflowType) && prospectiveVendorRegistration.checkForCompleteness();
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete(VendVendorRequest _vendorRequest)
    {
        return checkFailed("@SCM:VendProspectiveVendorCannotDeleteFromTheVendRequestCompanyProfileForm");
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCompleteRequest</Name>
				<Source><![CDATA[
    public boolean canCompleteRequest(VendVendorRequest _vendorRequest)
    {
        if (!_vendorRequest)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        boolean ret = super(_vendorRequest);

        VendVendorRequestNewVendor vendorRequestNewVendor = VendVendorRequest::find(_vendorRequest.RecId) as VendVendorRequestNewVendor;
        VendProspectiveVendorRegistration prospectiveVendorRegistration = VendProspectiveVendorRegistration::find(vendorRequestNewVendor.ProspectiveVendorRegistration);

        if (prospectiveVendorRegistration.RecId && prospectiveVendorRegistration.VendorGroup == '')
        {
            // Field 'Vendor group' must be filled in.
            ret = checkFailed(strfmt("@SYS84753", "@SYS9253"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRejectRequest</Name>
				<Source><![CDATA[
    public boolean canRejectRequest(VendVendorRequest _vendorRequest)
    {
        if (!_vendorRequest)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        boolean ret = super(_vendorRequest);

        VendVendorRequest vendRequest;

        select firstonly RecId, ReasonRef from vendRequest
            where vendRequest.RecId == _vendorRequest.RecId;

        if  (vendRequest.RecId != 0 && vendRequest.ReasonRef == 0)
        {
            ret = checkFailed("@SYS134421");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProspectiveVendorRegistrationRequestStatus</Name>
				<Source><![CDATA[
    private void updateProspectiveVendorRegistrationRequestStatus(VendVendorRequestRecId _vendorRequest)
    {
        VendVendorRequestNewVendor vendorRequest = VendVendorRequest::find(_vendorRequest) as VendVendorRequestNewVendor;
        VendProspectiveVendorRegistration prospectiveVendorRegistration = VendProspectiveVendorRegistration::find(vendorRequest.ProspectiveVendorRegistration);

        if(prospectiveVendorRegistration.RegistrationRequest)
        {
            VendProspectiveVendorRegistrationRequest prospectiveVendorRegistrationRequest = prospectiveVendorRegistration.prospectiveVendorRegistrationRequest(true);

            switch (vendorRequest.RequestStatus)
            {
                case VendVendorRequestStatus::Approved:
                    prospectiveVendorRegistrationRequest.setRequestStateToApproved();
                    break;

                case VendVendorRequestStatus::Rejected:
                    prospectiveVendorRegistrationRequest.setRequestStateToRejected();
                    break;
            }
            prospectiveVendorRegistrationRequest.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>maintainVendorExternalAdminPrivilegesForProspectiveVendorUser</Name>
				<Source><![CDATA[
    private void maintainVendorExternalAdminPrivilegesForProspectiveVendorUser(ContactPerson _contactPerson, DirPerson _dirPerson)
    {
        if (!DirPersonUser::findParty(_dirPerson.RecId).isActiveProspectiveVendorUser())
        {
            throw error("@SCM:VendorContactPersonNeedsMorePrivileges");
        }

        VendVendorPortalUserRequestManager::construct().maintainVendorExternalAdminPrivilegesForProspectiveVendorUser(_contactPerson, _dirPerson);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deactivateProspectiveVendorAccount</Name>
				<Source><![CDATA[
    private void deactivateProspectiveVendorAccount(VendVendorRequestRecId _vendorRequest)
    {
        VendVendorRequestNewVendor vendorRequest = VendVendorRequest::find(_vendorRequest) as VendVendorRequestNewVendor;
        VendProspectiveVendorRegistration prospectiveVendorRegistration =  VendProspectiveVendorRegistration::find(vendorRequest.ProspectiveVendorRegistration);

        if(!prospectiveVendorRegistration.RegistrationRequest)
        {
            throw error(strFmt("@SCM:CouldNotFindUserInformationForUserAlias", prospectiveVendorRegistration.Email));
        }

        VendVendorPortalUserRequestManager::construct().createProspectiveVendorUserDeactivationRequest(prospectiveVendorRegistration.RegistrationRequest);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProspectiveVendorRegistrationCompleteness</Name>
				<Source><![CDATA[
    private void checkProspectiveVendorRegistrationCompleteness(VendProspectiveVendorRegistration _vendorRegistration)
    {
        if (!_vendorRegistration || !_vendorRegistration.checkForCompleteness())
        {
            throw error("@SCM:VendorInformationIncompleteNotPossibleToCompleteVendorRequest");
        }

        if (!VendVendorRequestNewVendor::findByProspectiveVendorRegistration(_vendorRegistration.RecId))
        {
            throw error("@SCM:NoVendorRequestExistsForProspectiveVendorRegistration");
        }

        if (VendParameters::numRefVendAccount().numberSequenceTable().Manual)
        {
            throw error("@SYS343009");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>