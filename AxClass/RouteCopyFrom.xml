<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RouteCopyFrom</Name>
	<SourceCode>
		<Declaration><![CDATA[
/*

In 2.5 RouteCopy
*/
abstract public class RouteCopyFrom
{
    RouteCopyTo     copyTo;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the record ID of the activity associated to the route.
    /// </summary>
    /// <returns>
    ///    The record ID of the activity.
    /// </returns>
    abstract RefRecId activity()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCopyRouteOpr</Name>
				<Source><![CDATA[
        abstract boolean canCopyRouteOpr(RouteId toRouteId, InventSiteId toSiteId = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
        abstract void copy()
    {
    /*
        ttsbegin;

        // Copy

        ttscommit;
    */
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
        void delete()
    {
        copyTo.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>docuRefTable</Name>
				<Source><![CDATA[
        public abstract RouteOprMap docuRefTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initToProdRoute</Name>
				<Source><![CDATA[
        abstract void initToProdRoute(ProdRoute toProdRoute)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRouteUpdated</Name>
				<Source><![CDATA[
        boolean isRouteUpdated()
    {
        return copyTo.isRouteUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        void new(RouteCopyTo     _copyTo)
    {
        copyTo  = _copyTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeOpr</Name>
				<Source><![CDATA[
        abstract RouteOprMap routeOpr()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static RouteCopyFrom construct(
        RouteCopyTo         routeCopyTo,
        RouteSearchBase     routeSearch
        )
    {
        classId classId = classidget(routeSearch);

        switch (true)
        {
            case SysDictClass::isEqualOrSuperclass(classId,classnum(RouteSearch)):
                return new RouteCopyFromRoute(routeCopyTo,routeSearch);
            case SysDictClass::isEqualOrSuperclass(classId,classnum(ProdRouteSearch)):
                return new RouteCopyFromProd(routeCopyTo,routeSearch);

    #if.never
            case sysDictClass::isEqualOrSuperclass(classId,classnum(myRouteSearch)):
                return new RouteCopyFromMyRoute(routeCopyTo,routesearch);
    #endif
        }

        return null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>