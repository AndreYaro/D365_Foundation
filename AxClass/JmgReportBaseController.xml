<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgReportBaseController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgReportBaseController</c> class is a base class for Shop Floor Control report controllers.
/// </summary>
public class JmgReportBaseController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDataSourceFirst</Name>
				<Source><![CDATA[
        protected Common getDataSourceFirst(FormDataSource _formDataSource)
    {
        return _formDataSource.getFirst(1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataSourceNext</Name>
				<Source><![CDATA[
        protected Common getDataSourceNext(FormDataSource _formDataSource)
    {
        return _formDataSource.getNext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormDataSource</Name>
				<Source><![CDATA[
        protected FormDataSource getFormDataSource(FormRun _caller)
    {
        return _caller.dataSource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the query that is used in the report.
    /// </summary>
    /// <returns>
    ///    The query that is used in the report.
    /// </returns>
    protected Query getQuery()
    {
        return this.getFirstQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkerRange</Name>
				<Source><![CDATA[
        protected QueryBuildRange getWorkerRange()
    {
        Query   query           = this.getQuery();

        return SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(JmgEmployee)), fieldNum(JmgEmployee, Worker));
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the ability to modify the report contract before a dialog box is shown to the user.
    /// </summary>
    /// <remarks>
    /// Use this method to change the report contract. A common use case is to add or change a query. This
    /// method is called only during interactive scenario before rendering the UI to user.For batch
    /// scenario, we do not invoke this method because there is no user interaction, and contract values
    /// are already saved in batch.Do not instantiate any instance variables in this code if they are used
    /// during the lifetime of the controller because these will fail in batch cases.
    /// </remarks>
    protected void prePromptModifyContract()
    {
        QueryBuildRange workerRange;
        JmgEmployee     jmgEmployee;
        HcmWorker       hcmWorker;
        FormDataSource  formDataSource;
        str             nonSFCEmpls;
        Args            argsLocal = this.parmArgs();

        if (!argsLocal || !argsLocal.caller() || !argsLocal.record())
        {
            return;
        }

        workerRange = this.getWorkerRange();

        if (argsLocal.record() is JmgEmployee)
        {
            jmgEmployee = argsLocal.record() as JmgEmployee;
            workerRange.value(queryValue(jmgEmployee.Worker));
        }
        else if (argsLocal.record() is HcmWorker)
        {
            formDataSource  = this.getFormDataSource(argsLocal.caller());

            if (!formDataSource)
            {
                hcmWorker = argsLocal.record() as HcmWorker;
                workerRange.value(queryValue(hcmWorker.RecId));
            }
            else
            {
                for (hcmWorker = this.getDataSourceFirst(formDataSource); hcmWorker; hcmWorker = this.getDataSourceNext(formDataSource))
                {
                    if (JmgEmployee::find(hcmWorker.RecId))
                    {
                        workerRange.value(queryRangeConcat(workerRange.value(), hcmWorker.RecId));
                    }
                    else
                    {
                        nonSFCEmpls += (nonSFCEmpls ? ', ' : '') + hcmWorker.PersonnelNumber;
                    }
                }

                if (nonSFCEmpls)
                {
                    info(strFmt("@SYS123264",nonSFCEmpls));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static JmgReportBaseController construct()
    {
        return new JmgReportBaseController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        JmgReportBaseController::startOperationWithArgs(_args, JmgReportBaseController::construct(), _args.parm());
    }

]]></Source>
			</Method>
			<Method>
				<Name>startOperationWithArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts the operation for a controller object by using the specified arguments.
    /// </summary>
    /// <param name="_args">
    /// The arguments use.
    /// </param>
    /// <param name="_controller">
    /// The controller to run.
    /// </param>
    /// <param name="_reportName">
    /// The name of the report to run.
    /// </param>
    static public void startOperationWithArgs(
        Args                        _args,
        SrsReportRunController      _controller,
        str                         _reportName)
    {
        _controller.parmReportName(_reportName);
        _controller.parmArgs(_args);
        _controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>