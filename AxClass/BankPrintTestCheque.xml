<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPrintTestCheque</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankPrintTestCheque extends RunBase
{
    protected CompanyBankAccountId accountId;
    private DialogRunbase dialog;
    private DialogField dialogPrintCheque;
    private DialogField dialogPrintChequeCopy;
    private DialogField dialogPrinterName;
    private DialogField dialogPrintMedium;
    private DialogGroup dialogGroupSelectCheque;
    private DialogGroup dialogGroupPrinterSetting;
    private DialogGroup dialogGroupMain;
    private Map mapPrinterSettings;
    private PrinterName printerName;
    private PrintMedium printMedium;

    protected BankPrintChequeFormat printCheque;
    protected BankPrintNonNegotiableChequeFormat printChequeCopy;
    protected TmpChequePrintout tmpChequePrintout;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        PrintCheque,
        PrintChequeCopy,
        PrinterName
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>callPrinterSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Shows the <c>SysPrintForm</c> form for the selection of printer location.
    /// </summary>
    protected void callPrinterSettings()
    {
        SRSPrintDestinationSettings printSettings;

        printSettings = new SRSPrintDestinationSettings(this.getPrinterSettings());

        this.initPrintSettings(printSettings);

        if (SrsReportRunUtil::showSettingsDialog(printSettings))
        {
            this.updatePrinterSettings(printSettings.pack());
            dialogPrinterName.value(printSettings.printerName());
            dialogPrintMedium.value(printSettings.printMediumType());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPrintSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize print settings.
    /// </summary>
    /// <param name = "_printSettings">The print settings that will be initialized.</param>
    protected void initPrintSettings(SRSPrintDestinationSettings _printSettings)
    {
        _printSettings.printAllPages(true);
        _printSettings.printMediumType(SRSPrintMediumType::Screen);
        _printSettings.printLandscape(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTestCheque</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates test cheque values into the <c>TmpChequePrintout</c> table buffer.
    /// </summary>
    /// <param name = "_isNonNegotiableChequeFormat">Yes if is non negotiable cheque format; otherwise, false.</param>
    protected void populateTestCheque(BankPrintNonNegotiableChequeFormat _isNonNegotiableChequeFormat = NoYes::No)
    {
        BankAccountTable bankAccountTable = BankAccountTable::find(accountId, true);
        BankChequeLayout bankChequeLayout = BankChequeLayout::find(accountId);
        Currency currency = Currency::find(bankAccountTable.CurrencyCode);

        CustVendChequeSlipTextCalculator slipTextCalculator = CustVendChequeSlipTextCalculator::construct(bankChequeLayout);

        Counter slipLineMax = slipTextCalculator.calculateSlipTextLines();

        tmpChequePrintout.IsTestCheque = NoYes::Yes;
        tmpChequePrintout.slipTop1 = slipTextCalculator.getSlipTop1();
        tmpChequePrintout.slipTop2 = slipTextCalculator.getSlipTop2();
        tmpChequePrintout.NumOfSlips = bankChequeLayout.ChequeFormType != ChequeFormType::FRStyle ? bankChequeLayout.ChequeSlipCopies : 0;
        tmpChequePrintout.ChequeTop = slipTextCalculator.getChequeTop();
        tmpChequePrintout.RowNumberPerPage = slipTextCalculator.getRowNumberPerPage();
        tmpChequePrintout.AccountId = bankAccountTable.AccountID;

        if (bankChequeLayout.BankName)
        {
            tmpChequePrintout.BankName  = bankAccountTable.Name;
        }

        if (bankChequeLayout.BankNum)
        {
            tmpChequePrintout.RegistrationNum = bankAccountTable.RegistrationNum;
            tmpChequePrintout.AccountNum= bankAccountTable.AccountNum;
        }

        tmpChequePrintout.ChequeFormType = bankChequeLayout.ChequeFormType;

        if (bankChequeLayout.Micr)
        {
            tmpChequePrintout.micrLine = bankChequeLayout.micrLine;
        }

        tmpChequePrintout.RecipientName = "@SYS4466";
        tmpChequePrintout.Address = "@SYS9362";
        tmpChequePrintout.CountryRegionId = "@SYS7437";
        tmpChequePrintout.State = "@SYS21816";
        tmpChequePrintout.County = "@SYS13522";
        tmpChequePrintout.Street = "@SYS23438";
        tmpChequePrintout.City = "@SYS22249";
        tmpChequePrintout.ChequeNum = '9';
        tmpChequePrintout.AmountCur = 99999.99;
        tmpChequePrintout.Signature1 = NoYes::No;
        tmpChequePrintout.Signature2 = NoYes::No;
        tmpChequePrintout.Numerals2Letter = numeralsToTxt(tmpChequePrintout.AmountCur);
        tmpChequePrintout.CurrencyTxt = currency.Txt;
        tmpChequePrintout.CurrencyCode = currency.CurrencyCode;
        tmpChequePrintout.TransDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        tmpChequePrintout.Copy = NoYes::Yes;
        tmpChequePrintout.MaturityDate = tmpChequePrintout.TransDate;
        tmpChequePrintout.ChequeTopDrop = slipTextCalculator.getChequeTopDrop();

        BankChequeTable bankChequeTable;
        bankChequeTable.ChequeNum = '9';

        ChequeSlipTxt chequeSlipTxtTmp;
        Counter endLinesTmp;

        [chequeSlipTxtTmp, endLinesTmp] = slipTextCalculator.determineSlipTextTitleAndEndLinesAdjustmentForChequeFormType(bankChequeTable, bankChequeLayout.ChequeFormType);
        tmpChequePrintout.SlipTxt += chequeSlipTxtTmp;
        slipLineMax += endLinesTmp;

        [chequeSlipTxtTmp, endLinesTmp] = slipTextCalculator.determineSlipTextTitleAndEndLinesAdjustmentForChequeRecipientType(bankChequeTable, bankChequeLayout.ChequeFormType);
        tmpChequePrintout.SlipTxt += chequeSlipTxtTmp;
        slipLineMax += endLinesTmp;

        [chequeSlipTxtTmp, endLinesTmp] = slipTextCalculator.determineSlipTextTitleAndEndLinesAdjustmentForColumnHeaders(bankChequeTable, bankChequeLayout.ChequeFormType);
        tmpChequePrintout.SlipTxt += chequeSlipTxtTmp;
        slipLineMax += endLinesTmp;

        tmpChequePrintout.setChequeAmount(tmpChequePrintout.AmountCur, bankChequeLayout.ChequeFormType, currency, bankChequeLayout, null, null);

        if (bankChequeLayout.ChequeFormType != ChequeFormType::FRStyle)
        {
            for (Counter slipLine = 0; slipLine < slipLineMax; slipLine++)
            {
                tmpChequePrintout.SlipTxt   += strFmt("@SYS28244", slipLine);

                if (slipLine == slipLineMax - 1)
                {
                    continue;
                }
                else
                {
                    tmpChequePrintout.SlipTxt   += '\n';
                }
            }
        }

        switch (bankChequeLayout.CopySignature)
        {
            case CopySignature::Copy :
                tmpChequePrintout.BankCopySignatureText = "@SYS80350";
                break;
            case CopySignature::Void :
                tmpChequePrintout.BankCopySignatureText = "@SYS53120";
                break;
        }

        if (_isNonNegotiableChequeFormat == NoYes::Yes)
        {
            switch (bankChequeLayout.CopyWatermark)
            {
                case CopyWatermark::Copy:
                    tmpChequePrintout.BankCopyCustomWatermark= "@SYS80350";
                    break;
                case CopyWatermark::Void:
                    tmpChequePrintout.BankCopyCustomWatermark = "@SYS53120";
                    break;
                case CopyWatermark::Custom:
                    tmpChequePrintout.BankCopyCustomWatermark = bankChequeLayout.BankCopyCustomWatermark;
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTestCheque</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the test cheque by inserting the <c>TmpChequePrintout</c> table buffer.
    /// </summary>
    /// <param name = "_isNonNegotiableChequeFormat">Yes if is non negotiable cheque format; otherwise, false.</param>
    public void createTestCheque(BankPrintNonNegotiableChequeFormat _isNonNegotiableChequeFormat = NoYes::No)
    {
        this.populateTestCheque(_isNonNegotiableChequeFormat);

        tmpChequePrintout.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds fields to the <c>dialog</c> object.
    /// </summary>
    /// <returns>
    ///   A <c>Dialog</c> object.
    /// </returns>
    public Object dialog()
    {
        dialog = super();
        dialog.caption(strFmt("%1","@SYS133201"));

        dialogGroupSelectCheque = dialog.addGroup("@SYS132240");
        dialogGroupSelectCheque.columns(2);
        dialogGroupSelectCheque.addFieldname(extendedTypeStr(BankPrintChequeFormat));
        dialogGroupSelectCheque.addFieldname(extendedTypeStr(BankPrintNonNegotiableChequeFormat));
        dialogGroupSelectCheque.addFieldname(menuitemActionStr(PrintTestOption));

        dialogPrintCheque = dialog.addFieldValue(extendedTypeStr(BankPrintChequeFormat), printCheque, "@SYS132241", "@SYS132242");
        dialogPrintChequeCopy = dialog.addFieldValue(extendedTypeStr(BankPrintNonNegotiableChequeFormat), printChequeCopy, "@SYS132243", "@SYS132244");
        dialog.addMenuItemButton(MenuItemType::Action,menuitemActionStr(PrintTestOption),DialogMenuItemGroup::CurrentGrp);

        dialogGroupPrinterSetting = dialog.addGroup("@SYS77551");
        dialogPrinterName = dialog.addFieldValue(extendedTypeStr(PrinterName), printerName, "@SYS62708", "@SYS73208");
        dialogPrintMedium = dialog.addFieldValue('PrintMedium', printMedium, "@SYS28144", "@SYS73207");
        dialogPrintMedium.enabled(false);
        dialogPrinterName.enabled(false);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the data from the <c>dialog</c> fields into variables.
    /// </summary>
    /// <returns>
    ///    A boolean value returned from a super method of the <c>Runbase</c> class.
    /// </returns>
    /// <remarks>
    ///    This method is invoked by the <c>RunBase</c> framework when the OK button of the dialog box is
    ///    pressed.
    /// </remarks>
    public boolean getFromDialog()
    {
        printCheque     = dialogPrintCheque.value();
        printChequeCopy = dialogPrintChequeCopy.value();
        printerName     = dialogPrinterName.value();
        printMedium     = dialogPrintMedium.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrinterSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the printer settings.
    /// </summary>
    /// <returns>
    ///    A container that has the <c>PrintJobSettings</c> object.
    /// </returns>
    public container getPrinterSettings()
    {
        container printerSettings = conNull();

        if (mapPrinterSettings.exists(PaymDocumentType::Document))
        {
            printerSettings = mapPrinterSettings.lookup(PaymDocumentType::Document);
        }

        return printerSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(BankChequeLayout _bankChequeLayout)
    {
        super();

        accountId = _bankChequeLayout.AccountId;

        mapPrinterSettings = new Map(Types::Enum, Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpChequePrintout</Name>
				<Source><![CDATA[
    public TmpChequePrintout parmTmpChequePrintout()
    {
        return tmpChequePrintout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether to print negotiable , non-negotiable, or both check and run the check reports.
    /// </summary>
    public void run()
    {
        tmpChequePrintout.clear();

        if ( printChequeCopy || printCheque )
        {
            if (printCheque == NoYes::Yes)
            {
                this.createTestCheque();
            }

            if (printChequeCopy == NoYes::Yes)
            {
                this.createTestCheque(printChequeCopy);
            }

            BankPrintTestCheque::printCheque(tmpChequePrintout, this);
        }
        else
        {
            info("@SYS132257");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePrinterSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the printer settings.
    /// </summary>
    /// <param name="_printerSettings">
    ///    A container that has the <c>PrintJobSettings</c> object.
    /// </param>
    public void updatePrinterSettings(container _printerSettings)
    {
        mapPrinterSettings.insert(PaymDocumentType::Document, _printerSettings);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BankPrintTestCheque construct(BankChequeLayout _bankChequeLayout)
    {
        return new BankPrintTestCheque(_bankChequeLayout);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        BankPrintTestCheque bankPrintTestCheque;
        Object caller = args.caller();
        str menuItemName;

        menuItemName = args.menuItemName();

        if (menuItemName == menuitemActionStr(PrintTestOption))
        {
            bankPrintTestCheque = caller.runBase();
            bankPrintTestCheque.callPrinterSettings();
            return;
        }

        bankPrintTestCheque = BankPrintTestCheque::construct(args.record());

        if (bankPrintTestCheque.prompt())
        {
           bankPrintTestCheque.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printCheque</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints cheque report.
    /// </summary>
    /// <param name = "_tmpChequePrintout">
    /// <c>TmpChequePrintout</c> table buffer.
    /// </param>
    /// <param name = "_bankPrintTestCheque">
    /// An instance of <c>BankPrintTestCheque</c> class.
    /// </param>
    protected static void printCheque(TmpChequePrintout _tmpChequePrintout, BankPrintTestCheque _bankPrintTestCheque)
    {
        if (_tmpChequePrintout)
        {
            BankChequeLayout bankChequeLayout = BankChequeLayout::find(_tmpChequePrintout.AccountId);

            if (bankChequeLayout.UseGER == NoYes::Yes)
            {
                TmpChequePrintout::sendToGER(bankChequeLayout, _tmpChequePrintout);
            }
            else
            {
                _bankPrintTestCheque.runChequePrint(_tmpChequePrintout);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runChequePrint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the respective cheque report based on the <c>ChequeFormType</c>.
    /// </summary>
    /// <param name = "_tmpChequePrintout">
    /// <c>TmpChequePrintout</c> table buffer.
    /// </param>    
    protected void runChequePrint(TmpChequePrintout _tmpChequePrintout)
    {
        Args args = this.getChequePrintArgs(_tmpChequePrintout);

        switch (_tmpChequePrintout.ChequeFormType)
        {
            case ChequeFormType::USStyle :
                new MenuFunction(menuitemOutputStr(Cheque_US), MenuItemType::Output).run(args);
                break;

            case ChequeFormType::UKStyle :
                new MenuFunction(menuitemOutputStr(Cheque_UK), MenuItemType::Output).run(args);
                break;

            case ChequeFormType::DEStyle :
                new MenuFunction(menuitemOutputStr(Cheque_DE), MenuItemType::Output).run(args);
                break;

            case ChequeFormType::ESStyle :
                new MenuFunction(menuitemOutputStr(Cheque_ES), MenuItemType::Output).run(args);
                break;

            case ChequeFormType::DKStyle :
                new MenuFunction(menuitemOutputStr(Cheque_DK), MenuItemType::Output).run(args);
                break;

            case ChequeFormType::MXStyle :
                new MenuFunction(menuitemOutputStr(Cheque_MX), MenuItemType::Output).run(args);
                break;

            case ChequeFormType::CAStyle :
                new MenuFunction(menuitemOutputStr(Cheque_CA), MenuItemType::Output).run(args);
                break;

            case ChequeFormType::FRStyle :
                new MenuFunction(menuitemOutputStr(Cheque_FR), MenuItemType::Output).run(args);
                break;

            // <GBR>
            case ChequeFormType::BRStyle :
                new MenuFunction(menuitemOutputStr(Cheque_BR), MenuItemType::Output).run(args);
                break;
            // </GBR>

            default :
                if(this.canRunChequePrintForExtendedFormType(_tmpChequePrintout))
                {
                    this.runChequePrintForExtendedChequeFormType(_tmpChequePrintout);
                }
                else
                {
                    throw  error("@SYS26828");
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChequePrintArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>Args</c> object used to print the cheque report.
    /// </summary>
    /// <param name = "_tmpChequePrintout">
    /// <c>TmpChequePrintout</c> table buffer.
    /// </param>
    /// <returns>
    /// An instance of <c>Args</c> class.
    /// </returns>
    protected Args getChequePrintArgs(TmpChequePrintout _tmpChequePrintout)
    {
        Args args = new Args();
        
        BankChequePrint bankChequePrint = BankChequePrint::construct(_tmpChequePrintout, this.getPrinterSettings());

        args.caller(this);
        args.object(bankChequePrint);

        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunChequePrintForExtendedFormType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for extended <c>ChequeFormType</c>.
    /// </summary>
    /// <param name = "_tmpChequePrintout">
    /// <c>TmpChequePrintout</c> table buffer.
    /// </param>
    /// <returns>
    /// true, if we need to print a cheque report for any extended <c>ChequeFormType</c> value; otherwise, false.
    /// </returns>
    protected boolean canRunChequePrintForExtendedFormType(TmpChequePrintout _tmpChequePrintout)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runChequePrintForExtendedChequeFormType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints cheque report for extended <c>ChequeFormType</c> values.
    /// </summary>
    /// <param name = "_tmpChequePrintout">
    /// <c>TmpChequePrintout</c> table buffer.
    /// </param>
    protected void runChequePrintForExtendedChequeFormType(TmpChequePrintout _tmpChequePrintout)
    {
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>