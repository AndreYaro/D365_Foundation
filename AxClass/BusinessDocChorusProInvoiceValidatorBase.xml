<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessDocChorusProInvoiceValidatorBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
			
using Newtonsoft.Json.Linq;

/// <summary>
/// A base class for invoices validation for Chorus Pro integration.
/// </summary>
internal abstract class BusinessDocChorusProInvoiceValidatorBase
{
    private BusinessDocChorusProIServiceClientForStructures serviceClient;
    protected BusinessDocChorusProIParameters parameters;
 
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        BusinessDocChorusProParametersFactory parametersFactory = new BusinessDocChorusProParametersFactory();
        parameters = parametersFactory.getParameters();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setServiceClient</Name>
				<Source><![CDATA[
    internal void setServiceClient(BusinessDocChorusProIServiceClientForStructures _serviceClient)
    {
        serviceClient = _serviceClient;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getServiceClient</Name>
				<Source><![CDATA[
    private BusinessDocChorusProIServiceClientForStructures getServiceClient()
    {
        if (serviceClient == null)
        {
            serviceClient = BusinessDocChorusProServiceClient_FR::construct();
        }
        return serviceClient;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCompany</Name>
				<Source><![CDATA[
    protected boolean validateCompany()
    {
        boolean ret = true;

        setPrefix("@BusinessDocumentSubmissionService:ValidatingCompanySiret");

        var companySiretProvider = new BusinessDocChorusProCompanySiretProvider();
        str companySiret = companySiretProvider.getSiret();
        if (!this.validateSiret(companySiret).isSuccess())
        {
            ret = checkFailed("@BusinessDocumentSubmissionService:CompanySiretValidationFailed");
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccount</Name>
				<Source><![CDATA[
    protected boolean validateAccount(str _prefix, BusinessDocChorusProISiretProvider _siretProvider, str _serviceCode, boolean _serviceCodeValidationEnabled = false, boolean _siretValidationEnabled = false)
    {
        boolean ret = true;

        setPrefix(_prefix);

        if (!_siretValidationEnabled)
        {
            return ret;
        }

        str siret = _siretProvider.getSiret();
        var siretValidationResult = this.validateSiret(siret);
        if (!siretValidationResult.isSuccess())
        {
            ret = checkFailed("@BusinessDocumentSubmissionService:SiretValidationFailed");
        }
        
        if (!_serviceCodeValidationEnabled)
        {
            return ret;
        }
        
        if (!this.validateServiceCode(siret, siretValidationResult.getStructureJObject(), _serviceCode))
        {
            ret = checkFailed("@BusinessDocumentSubmissionService:ServiceCodeValidationFailed");
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSiret</Name>
				<Source><![CDATA[
    private BusinessDocChorusProSiretValidationResult validateSiret(str _siret)
    {
        if (!_siret)
        {
            return BusinessDocChorusProSiretValidationResult::construct(checkFailed("@BusinessDocumentSubmissionService:SiretNotSet"));
        }

        JArray structureList = this.getServiceClient().getStructuresBySiret(_siret);
        if (structureList == null || structureList.Count == 0)
        {
            return BusinessDocChorusProSiretValidationResult::construct(checkFailed("@BusinessDocumentSubmissionService:StructureWithSiretNotFoundChorusPro"));
        }
        if (structureList.Count > 1)
        {
            return BusinessDocChorusProSiretValidationResult::construct(checkFailed("@BusinessDocumentSubmissionService:SiretIncorrectAmbigousStructuresChorusPro"));
        }

        JObject structure = structureList.get_Item(0);
        if (structure == null)
        {
            return BusinessDocChorusProSiretValidationResult::construct(checkFailed("@BusinessDocumentSubmissionService:StructureWithSiretNotFoundChorusPro"));
        }
        
        str actualSiret = BusinessDocChorusProJObjectUtils::retrieveSiretFromStructure(structure);
        if (_siret != actualSiret)
        {
            return BusinessDocChorusProSiretValidationResult::construct(checkFailed("@BusinessDocumentSubmissionService:StructureWithSiretNotFoundChorusPro"));
        }
        
        const str StatusJToken = 'statut';
        JToken status = structure.SelectToken(StatusJToken);
        if (status == null)
        {
            return BusinessDocChorusProSiretValidationResult::construct(
                checkFailed("@BusinessDocumentSubmissionService:StructureWithSiretDoesNotHaveStatusChorusPro"),
                structure);
        }
        const str ActiveStatus = 'ACTIVE';
        if (status.ToString() != ActiveStatus)
        {
            return BusinessDocChorusProSiretValidationResult::construct(
                checkFailed("@BusinessDocumentSubmissionService:StructureWithSiretInactiveChorusPro"),
                structure);
        }
        
        return BusinessDocChorusProSiretValidationResult::construct(true, structure);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateServiceCode</Name>
				<Source><![CDATA[
    private boolean validateServiceCode(str _siret, JObject _structureJObject, str _serviceCode)
    {
        if (!BusinessDocChorusProJObjectUtils::doesStructureContainId(_structureJObject))
        {
            return checkFailed("@BusinessDocumentSubmissionService:ImpossibleToGetServiceCodesNoStructureId");
        }

        if (!_serviceCode)
        {
            return checkFailed("@BusinessDocumentSubmissionService:ServiceCodeNotSet");
        }

        int structureId = BusinessDocChorusProJObjectUtils::retrieveIdFromStructure(_structureJObject);

        var services = BusinessDocChorusProServiceCollection::constructFromJArray(this.getServiceClient().getServicesByStructureId(structureId));
        if (services == null)
        {
            return checkFailed("@BusinessDocumentSubmissionService:NoServicesFoundBySiretChorusPro");
        }
        
        var service = services.get(_serviceCode);
        if (service == null)
        {
            return checkFailed("@BusinessDocumentSubmissionService:NoServiceCodeFoundChorusPro");
        }
        if (!service.parmActive())
        {
            return checkFailed("@BusinessDocumentSubmissionService:ServiceWithCodeIsInactiveChorusPro");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runValidation</Name>
				<Source><![CDATA[
    protected abstract boolean runValidation()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isApplicable</Name>
				<Source><![CDATA[
    protected boolean isApplicable()
    {
        return parameters.isPrePostInvoiceValidationEnabled() && BusinessDocumentParameters::isFeatureEnabled([EInvoicingFeaturesForService::FR00025]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        boolean ret = true;
        
        if (this.isApplicable())
        {
            ret = this.runValidation();
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>