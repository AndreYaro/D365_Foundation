<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CreditCardPaymentJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CreditCardPaymentJournal
{
    LedgerJournalTable ledgerJournalTable;
    LedgerJournalTrans ledgerJournalTrans;
    SalesTable salesTable;
    CustInvoiceJour custInvoiceJour;
    CreditCardAuthTrans creditCardAuthTrans;

    LedgerJournalEngine_CustPayment ledgerJournalEngine;

    private boolean isBreakDownMode;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultJournalLineSalesOrderValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deafults the <c>SalesTable</c> values on the journal lines.
    /// </summary>
    /// <param name = "_salesTable">
    /// An instance of <c>SalesTable</c> table buffer.
    /// </param>
    protected void defaultJournalLineSalesOrderValues(SalesTable _salesTable)
    {
        ledgerJournalTrans.parmAccount(isBreakDownMode ? custInvoiceJour.InvoiceAccount : _salesTable.InvoiceAccount);
        ledgerJournalTrans.DefaultDimension = _salesTable.DefaultDimension;
        ledgerJournalTrans.CurrencyCode = _salesTable.CurrencyCode;
        ledgerJournalEngine.currencyModified(ledgerJournalTrans);
        ledgerJournalTrans.PaymMode = _salesTable.PaymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>LedgerJournalTable</c> record.
    /// </summary>
    protected void createJournal()
    {
        CustParameters custParameters = CustParameters::find();
        CreditCardProcessors creditCardProcessor = CreditCardProcessors::find(creditCardAuthTrans.CreditCardProcessors);
        CustPaymModeTable custPaymModeTable;

        // <GIN>
        RetailSalesTable retailSalesTable;
        #ISOCountryRegionCodes
        // </GIN>

        // create journal table
        ledgerJournalTable.initValue();

        ledgerJournalTable.JournalNum = JournalTableData::newTable(ledgerJournalTable).nextJournalId();
        ledgerJournalTable.JournalName = CreditCardTypeSetup::find(creditCardProcessor, creditCardAuthTrans.CreditCardTypeName).PaymentJournal;

        ledgerJournalTable.initFromLedgerJournalName();
        ledgerJournalTable.DefaultDimension = salesTable.DefaultDimension;
        ledgerJournalTable.insert();

        // create journal line
        ledgerJournalTrans.clear();
        ledgerJournalTrans.initValue();

        // force the currency to be the order currency
        custPaymModeTable = CustPaymModeTable::find(salesTable.PaymMode);
        ledgerJournalTable.OffsetAccountType = custPaymModeTable.InterCompanyLedgerDimension ? LedgerJournalACType::Ledger : custPaymModeTable.AccountType;
        ledgerJournalTable.parmOffsetLedgerDimension(custPaymModeTable.offsetLedgerDimension());

        ledgerJournalEngine.newJournalActive(ledgerJournalTable);
        ledgerJournalEngine.initValue(ledgerJournalTrans);

        ledgerJournalTrans.TransDate = custInvoiceJour.InvoiceDate;
        this.defaultJournalLineSalesOrderValues(salesTable);

        if (custPaymModeTable.RecId)
        {
            ledgerJournalTrans.BankTransType = custPaymModeTable.BankTransType;
        }
        else
        {
            ledgerJournalTrans.BankTransType = custParameters.CreditCardPostingBankTransactionType;
        }

        // make sure offset account setting are getting from journal table,
        // if that in journal table is empty getting from cust parameter table
        if (ledgerJournalTable.parmOffsetLedgerDimension())
        {
            if (ledgerJournalTable.OffsetAccountType == LedgerJournalACType::Ledger)
            {
                ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Ledger;
                ledgerJournalTrans.parmOffsetLedgerDimension(
                    ledgerJournalTrans.getOffsetLedgerDimensionForLedgerType(ledgerJournalTable.parmOffsetLedgerDimension(), ledgerJournalTrans.getOffsetCompany()));
            }
            else
            {
                ledgerJournalTrans.parmOffsetAccount(ledgerJournalTable.parmOffsetAccount(), ledgerJournalTable.OffsetAccountType);
            }
        }
        else
        {
            if (custParameters.CreditCardPostingAccountType == LedgerJournalACType::Ledger)
            {
                ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Ledger;
                ledgerJournalTrans.parmOffsetLedgerDimension(
                    ledgerJournalTrans.getOffsetLedgerDimensionForLedgerType(custParameters.parmCreditCardPostingLedgerDimension(), ledgerJournalTrans.getOffsetCompany()));
            }
            else
            {
                ledgerJournalTrans.parmOffsetAccount(custParameters.parmCreditCardPostingAccount(), custParameters.CreditCardPostingAccountType);
            }
        }

        if (!ledgerJournalTrans.parmOffsetLedgerDimension())
        {
            if (isBreakDownMode)
            {
                throw error("@SYS122144");
            }
            else
            {
                throw info("@SYS122148");
            }
        }

        ledgerJournalEngine.initOffsetDefaultDimension(ledgerJournalTrans);

        ledgerJournalTrans.insert();

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            retailSalesTable = salesTable.retailSalesTable();
            RetailTransactionHandler_IN::setTaxInformationForJournalLine_IN(ledgerJournalTrans, retailSalesTable.RetailChannel);
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCreditCardAuthTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initalizes the credit card transaction query for the given <c>SalesTable</c> table buffer.
    /// </summary>
    /// <returns>
    /// The intialized query.
    /// </returns>
    protected Query initCreditCardAuthTrans(SalesTable _salesTable)
    {
        str approvalTypeRange = strFmt('((%1 == %2) || (%1 == %3) || (%1 == %4))',
            fieldStr(CreditCardAuthTrans, ApprovalType),
            enum2int(CreditCardOperation::AuthorizeAndCapture),
            enum2int(CreditCardOperation::CaptureAfterAuthorize),
            enum2int(CreditCardOperation::Refund));
        
        Query query = new Query();
        query.firstOnly1(true);

        QueryBuildDataSource creditCardAuthTransDS = query.addDataSource(tableNum(CreditCardAuthTrans));
        creditCardAuthTransDS.addOrderByField(fieldNum(CreditCardAuthTrans, LineNum), SortOrder::Descending);
        creditCardAuthTransDS.addRange(fieldNum(CreditCardAuthTrans, SalesId)).value(queryValue(_salesTable.SalesId));
        if (isBreakDownMode)
        {
            creditCardAuthTransDS.addRange(fieldNum(CreditCardAuthTrans, SalesInvoiceId)).value(queryValue(custInvoiceJour.InvoiceId));
        }
        else
        {
            creditCardAuthTransDS.addRange(fieldNum(CreditCardAuthTrans, Authorization)).value(queryValue(_salesTable.CreditCardAuthorization));
        }
        creditCardAuthTransDS.addRange(fieldNum(CreditCardAuthTrans, ProcessorStatus)).value(queryValue(CreditCardProcessorStatus::Approved));
        creditCardAuthTransDS.addRange(fieldNum(CreditCardAuthTrans, ApprovalType)).value(approvalTypeRange);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initalizes the credit card transaction.
    /// </summary>
    void init()
    {
        // get the credit card transaction
        Query query = this.initCreditCardAuthTrans(salesTable);
        QueryRun queryRun = new QueryRun(query);
        queryRun.next();
        creditCardAuthTrans = queryRun.get(tableNum(CreditCardAuthTrans));

        if (!creditCardAuthTrans)
        {
            if (isBreakDownMode)
            {
                throw error("@SYS122144");
            }
            else
            {
                throw info("@SYS122144");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(SalesTable _salesTable,
             CustInvoiceJour _custInvoiceJour)
    {
        salesTable = _salesTable;
        custInvoiceJour = _custInvoiceJour;

        ledgerJournalEngine = new LedgerJournalEngine_CustPayment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postJournal</Name>
				<Source><![CDATA[
    void postJournal()
    {
        Args args = new Args();

        args.record(ledgerJournalTable);
        LedgerJournalPost::main(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    boolean run()
    {
        try
        {
            ttsbegin;
            this.init();
            if (this.shouldProcessCreditCardPaymentJournal())
            {
                this.createJournal();
                this.settlePayment();
                this.postJournal();
            }
            ttscommit;
        }
        catch
        {
            ttsabort;
            // don't want the error in payment journal stop the invoice posting procedure
            info("@SYS122142");
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runWithBreakDown</Name>
				<Source><![CDATA[
    internal boolean runWithBreakDown()
    {
        if (!isBreakDownMode)
        {
            return false;
        }

        ttsbegin;
        this.init();

        if (creditCardAuthTrans.ApprovalAmountCur != custInvoiceJour.remainAmountToBePaid())
        {
            throw error("@CashManagement:CreditCardPaymentBreakDownAmountError");
        }
        if (this.shouldProcessCreditCardPaymentJournal())
        {
            this.createJournal();
            this.settlePayment();
            this.postJournal();
        }
        ttscommit;

        custInvoiceJour.reread();
        return CreditCardBreakDownRunnerHelper::isCustInvoiceFullySettled(custInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBreakDownMode</Name>
				<Source><![CDATA[
    internal void setBreakDownMode(boolean _isBreakDownMode)
    {
        isBreakDownMode = _isBreakDownMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldProcessCreditCardPaymentJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Verifies credit card payment journals should be processed.
    /// </summary>
    /// <returns>
    ///     true if the credit card payment journals should be processed; otherwise, false.
    /// </returns>
    [Wrappable(true)]
    protected final boolean shouldProcessCreditCardPaymentJournal()
    {
        return (creditCardAuthTrans.ApprovalType == CreditCardOperation::Refund && creditCardAuthTrans.ApprovalAmountCur < 0) 
            || (creditCardAuthTrans.ApprovalType != CreditCardOperation::Refund && creditCardAuthTrans.ApprovalAmountCur > 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>settlePayment</Name>
				<Source><![CDATA[
    protected void settlePayment()
    {
        CustTransOpen custTransOpen;
        CustTrans custTrans;
        SpecTransManager specTransManager = SpecTransManager::newFromSpec(ledgerJournalTrans);

        select firstonly custTransOpen
            join custTrans
            where custTransOpen.AccountNum == custTrans.AccountNum
                && custTransOpen.RefRecId == custTrans.RecId
                && custTrans.Invoice == custInvoiceJour.InvoiceId
                && custTrans.AccountNum == custInvoiceJour.InvoiceAccount
                && custTrans.TransDate == custInvoiceJour.InvoiceDate;

        if (!custTransOpen)
        {
            throw error("@SYS122147");
        }

        specTransManager.insert(
            custTransOpen.company(),
            custTransOpen.TableId,
            custTransOpen.RecId,
            custInvoiceJour.InvoiceAmount,
            custInvoiceJour.CurrencyCode);

        ledgerJournalTrans.MarkedInvoice = custTrans.Invoice;
        ledgerJournalTrans.MarkedInvoiceCompany = custTrans.company();
        ledgerJournalTrans.MarkedInvoiceRecId = custTransOpen.RecId;
        ledgerJournalTrans.SettleVoucher = SettlementType::SelectedTransact;

        if (creditCardAuthTrans.ApprovalAmountCur < 0)
        {
            ledgerJournalTrans.AmountCurDebit = abs(creditCardAuthTrans.ApprovalAmountCur);
            ledgerJournalTrans.AmountCurCredit = 0;
        }
        else
        {
            ledgerJournalTrans.AmountCurDebit = 0;
            ledgerJournalTrans.AmountCurCredit = abs(creditCardAuthTrans.ApprovalAmountCur);
        }

        ledgerJournalTrans.PaymReference = salesTable.CreditCardAuthorization;
        ledgerJournalTrans.DocumentNum = creditCardAuthTrans.CreditCardTypeName;
        ledgerJournalTrans.CreditCardAuthTransRefId = creditCardAuthTrans.RecId;
        ledgerJournalTrans.SalesOrderId = salesTable.SalesId;
        ledgerJournalTrans.update();

        // In case this payment is from a Retail Sales Order, 
        // record the card type and tender type into RetailCreditCardAuthTrans table
        RetailCreditCardAuthTrans::insertRetailCrediCardAuthTrans(salesTable.SalesId,  creditCardAuthTrans.RecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>