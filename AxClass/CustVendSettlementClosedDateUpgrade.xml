<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendSettlementClosedDateUpgrade</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustVendSettlementClosedDateUpgrade</c> class is responsible for upgrading the customer 
/// and vendor settlement closed date.
/// </summary>
/// <remarks>
/// This upgrade code should not be removed from the product until the last AX6.X customer upgrades to the current version.  Customers can 
/// skip versions when they upgrade, so we need all the AX6.X customer to upgrade before we know this code can be removed.
/// </remarks>
internal abstract class CustVendSettlementClosedDateUpgrade extends SysOperationServiceController
{
    private const int BundleSize = 10000;
    private const int HistoryDaysToConvert = 365;
    private const int RecurrenceExecutions = 7;

    private RefRecId workItemRecId;
    private boolean isChildBatchTask;

    private CustVendSettlementIClosedUpgradeService upgradeBatch;

    #define.CurrentVersion(1)

    #LocalMacro.CurrentList
        workItemRecId,
        isChildBatchTask
    #EndMacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void run()
    {
        SysInstrumentationProgressLogger progressLogger = SysInstrumentationProgressLogger::createLogger(CustVendInstrumentationConstants::SourceNameSettlementClosedDateUpgrade, CustVendInstrumentationConstants::InstrumentationNamespace);
        
        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(CustVendInstrumentationConstants::SettlementClosedDateUpgrade))
        {
            activityContext.addCustomProperty(CustVendInstrumentationConstants::BatchJobId, int642Str(this.parmCurrentBatch().BatchJobId));
            activityContext.addCustomProperty(CustVendInstrumentationConstants::Module, enum2Symbol(enumNum(ModuleCustVend), this.getUpgradeBatch().getModule()));

            if (upgradeBatch == null)
            {
                upgradeBatch = this.getUpgradeBatch();
            }

            if (upgradeBatch.allowUpgrade() == NoYes::No)
            {
                this.endRecurrence(activityContext);
                return;
            }

            if (this.isChildBatchTask)
            {
                this.processBatchTask(progressLogger, activityContext);
            }
            else
            {
                if (CustVendSettlementClosedDateUpgrade::isComplete(upgradeBatch.getModule()))
                {
                    activityContext.addCustomProperty(CustVendInstrumentationConstants::SettlementClosedDateUpgradeIsComplete, enum2Symbol(enumNum(NoYes), NoYes::Yes));
                    return;
                }

                if (!CustVendSettlementClosedDateUpgrade::haveWorkItemsBeenCreated(upgradeBatch.getModule()))
                {
                    this.createWorkItems(activityContext);
                }

                if (!CustVendSettlementClosedDateUpgrade::haveBatchTasksBeenScheduled(upgradeBatch.getModule()))
                {
                    this.scheduleBatchTasks(activityContext);
                }
                else
                {
                    this.rescheduleBatchTasks(activityContext);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUpgradeBatch</Name>
				<Source><![CDATA[
    protected abstract CustVendSettlementIClosedUpgradeService getUpgradeBatch(){}

]]></Source>
			</Method>
			<Method>
				<Name>endRecurrence</Name>
				<Source><![CDATA[
    private void endRecurrence(SysInstrumentationActivityContext _activityContext)
    {
        BatchJob batchJob;

        ttsbegin;
        select firstonly forupdate batchJob
        where batchJob.RecId == currentBatch.BatchJobId;

        if (batchJob
            && batchJob.RecurrenceData 
            && SysRecurrence::nextTime(batchJob.RecurrenceData) != 0)
        {
            _activityContext.addCustomProperty(CustVendInstrumentationConstants::SettlementClosedDateUpgradeEndRecurrence, enum2Symbol(enumNum(NoYes), NoYes::Yes));

            batchJob.RecurrenceData = SysRecurrence::setRecurrenceEndAfter(batchJob.RecurrenceData, 1);
            batchJob.update();
        }
        ttscommit;

    }

]]></Source>
			</Method>
			<Method>
				<Name>processBatchTask</Name>
				<Source><![CDATA[
    private void processBatchTask(SysInstrumentationProgressLogger _progressLogger, SysInstrumentationActivityContext _activityContext)
    {
        #OCCRetryCount
        
        _activityContext.addCustomProperty(CustVendInstrumentationConstants::SettlementClosedDateUpgradeProcessBatchTask, enum2Symbol(enumNum(NoYes), NoYes::Yes));

        int BackOffWait = RandomGenerate::construct().randomInt(50, 1000);

        try
        {
            ttsbegin;
            this.executeBatchTask(_activityContext);
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                this.logTelemetryStatus(_activityContext, this.workItemRecId, CustVendSettlementClosedDateStatus::Error);
                this.logWorkItemStatus(this.workItemRecId, CustVendSettlementClosedDateStatus::Error);
                throw Exception::Deadlock;
            }
            else
            {
                _progressLogger.logRetryOnDeadlock();
                sleep(xSession::currentRetryCount() * BackOffWait);
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    this.logTelemetryStatus(_activityContext, this.workItemRecId, CustVendSettlementClosedDateStatus::Error);
                    this.logWorkItemStatus(this.workItemRecId, CustVendSettlementClosedDateStatus::Error);
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    _progressLogger.logRetryOnUpdateConflict();
                    sleep(xSession::currentRetryCount() * BackOffWait);
                    retry;
                }
            }
            else
            {
                this.logTelemetryStatus(_activityContext, this.workItemRecId, CustVendSettlementClosedDateStatus::Error);
                this.logWorkItemStatus(this.workItemRecId, CustVendSettlementClosedDateStatus::Error);
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    this.logTelemetryStatus( _activityContext, this.workItemRecId, CustVendSettlementClosedDateStatus::Error);
                    this.logWorkItemStatus(this.workItemRecId, CustVendSettlementClosedDateStatus::Error);
                    throw Exception::DuplicateKeyExceptionNotRecovered;
                }
                else
                {
                    sleep(xSession::currentRetryCount() * BackOffWait);
                    retry;
                }
            }
            else
            {
                this.logTelemetryStatus(_activityContext, this.workItemRecId, CustVendSettlementClosedDateStatus::Error);
                this.logWorkItemStatus(this.workItemRecId, CustVendSettlementClosedDateStatus::Error);
                throw Exception::DuplicateKeyException;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeBatchTask</Name>
				<Source><![CDATA[
    private void executeBatchTask(SysInstrumentationActivityContext _activityContext)
    {
        this.logTelemetryStatus(_activityContext, this.workItemRecId, CustVendSettlementClosedDateStatus::Processing);
        this.logWorkItemStatus(this.workItemRecId, CustVendSettlementClosedDateStatus::Processing);

        CustVendSettlementClosedDateUpgradeWorkItem workItem;
        select firstonly workItem where workItem.RecId == this.workItemRecId;

        if (workItem)
        {
            changecompany(workItem.Company)
            {
                TmpDataAreaRecIdFilter settlementFilter;

                upgradeBatch.populateCustVendSettlementFilterTable(
                    settlementFilter, 
                    this.calculateMinDate(),
                    workItem.CustVendTransFromRecId, 
                    workItem.CustVendTransToRecId);
                
                upgradeBatch.updateSettlementClosedDate(settlementFilter);

                this.logTelemetryStatus(_activityContext, this.workItemRecId, CustVendSettlementClosedDateStatus::Completed);
                this.createStatus(workItem.RecId, CustVendSettlementClosedDateStatus::Completed);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logWorkItemStatus</Name>
				<Source><![CDATA[
    private void logWorkItemStatus(RefRecId _workItemRecId, CustVendSettlementClosedDateStatus _status)
    {
        UserConnection userConnection = new UserConnection();
        try
        {
            userConnection.ttsbegin();
            this.createStatus(_workItemRecId, _status);
            userConnection.ttscommit();
        }
        finally
        {
            userConnection.finalize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logTelemetryStatus</Name>
				<Source><![CDATA[
    private void logTelemetryStatus(SysInstrumentationActivityContext _activityContext, 
        RefRecId _workItemRecId, 
        CustVendSettlementClosedDateStatus _status)
    {
        _activityContext.addCustomProperty(CustVendInstrumentationConstants::SettlementClosedDateUpgradeWorkItem, int642Str(_workItemRecId));
        _activityContext.addCustomProperty(CustVendInstrumentationConstants::SettlementClosedDateUpgradeStatus, enum2Symbol(enumNum(CustVendSettlementClosedDateStatus), _status));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkItems</Name>
				<Source><![CDATA[
    private void createWorkItems(SysInstrumentationActivityContext _activityContext)
    {
        _activityContext.addCustomProperty(CustVendInstrumentationConstants::SettlementClosedDateUpgradeCreateWorkItems, enum2Symbol(enumNum(NoYes), NoYes::Yes));

        date minDate = this.calculateMinDate();

        TmpDataAreaRecIdFilter custVendTransFilter;

        int transactionCount;
        RefRecId currentTransRecId;
        RefRecId minTransRecId;
        RefRecId maxTransRecId;

        ttsbegin;

        DataArea dataArea;
        while select id from dataArea
            where !dataArea.isVirtual
        {
            changecompany(dataArea.Id)
            {
                delete_from custVendTransFilter;
                upgradeBatch.populateCustVendTransFilterTable(custVendTransFilter, minDate);

                transactionCount = 0;
                currentTransRecId = 0;
                minTransRecId = 0;
                maxTransRecId = 0;

                while select custVendTransFilter
                    order by RefRecId
                {
                    currentTransRecId = custVendTransFilter.RefRecId;

                    if (transactionCount == 0)
                    {
                        maxTransRecId = 0;
                        minTransRecId = currentTransRecId;
                    }
                    
                    transactionCount++;

                    if (transactionCount == BundleSize)
                    {
                        maxTransRecId = currentTransRecId;
                        this.createWorkItem(minTransRecId, maxTransRecId);
                        transactionCount = 0;
                    }
                }

                if (minTransRecId > 0 && maxTransRecId == 0)
                {
                    maxTransRecId = currentTransRecId;
                    this.createWorkItem(minTransRecId, maxTransRecId);
                }
            }
        }

        ttscommit;

    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateMinDate</Name>
				<Source><![CDATA[
    private date calculateMinDate()
    {
        date today = today();
        date minDate = today - HistoryDaysToConvert;

        return minDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkItem</Name>
				<Source><![CDATA[
    private void createWorkItem(
        RefRecId _minTransRecId, 
        RefRecId _maxTransRecId)
    {
        CustVendSettlementClosedDateUpgradeWorkItem workItem;

        workItem.Module = upgradeBatch.getModule();
        workItem.Company = curExt();
        workItem.CustVendTransFromRecId = _minTransRecId;
        workItem.CustVendTransToRecId = _maxTransRecId;
        workItem.insert();

        this.createStatus(workItem.RecId, CustVendSettlementClosedDateStatus::Created);
    }

]]></Source>
			</Method>
			<Method>
				<Name>haveBatchTasksBeenScheduled</Name>
				<Source><![CDATA[
    internal static boolean haveBatchTasksBeenScheduled(ModuleCustVend _module)
    {
        CustVendSettlementClosedDateUpgradeWorkItem workItem;
        CustVendSettlementClosedDateUpgradeStatus upgradeStatus;

        select firstonly RecId
            from workItem
            join upgradeStatus
            where workItem.Module == _module
                && workItem.RecId == upgradeStatus.WorkItemRecId
                && upgradeStatus.Status == CustVendSettlementClosedDateStatus::Scheduled;

        return workItem.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>haveWorkItemsBeenCreated</Name>
				<Source><![CDATA[
    private static boolean haveWorkItemsBeenCreated(ModuleCustVend _module)
    {
        CustVendSettlementClosedDateUpgradeWorkItem workItem;
        CustVendSettlementClosedDateUpgradeStatus upgradeStatus;

        select firstonly RecId 
            from workItem
            join upgradeStatus
            where workItem.Module == _module
                && workItem.RecId == upgradeStatus.WorkItemRecId
                && upgradeStatus.Status == CustVendSettlementClosedDateStatus::Created;

        return workItem.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isComplete</Name>
				<Source><![CDATA[
    internal static boolean isComplete(ModuleCustVend _module)
    {
        CustVendSettlementClosedDateUpgradeWorkItem workItem;
        select count(RecId) 
            from workItem 
            where workItem.Module == _module;

        if (workItem.RecId == 0)
        {
            return false;
        }

        CustVendSettlementClosedDateUpgradeWorkItem workItemUpgradeStatus;
        CustVendSettlementClosedDateUpgradeStatus upgradeStatus;
        select count(RecId) 
            from workItemUpgradeStatus
            join upgradeStatus
            where workItemUpgradeStatus.Module == _module
                && workItemUpgradeStatus.RecId == upgradeStatus.WorkItemRecId
                && upgradeStatus.Status == CustVendSettlementClosedDateStatus::Completed;

        return workItem.RecId == workItemUpgradeStatus.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesBatchJobExistByBatchJobClassId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected static boolean doesBatchJobExistByBatchJobClassId(ClassId _batchJobClassId)
    {
        Batch batch;
        BatchJob batchJob;
        boolean doesBatchJobExist;

        select firstonly batchJob
            where batchJob.DataPartition == getCurrentPartition()
                && (batchJob.Status == BatchStatus::Ready
                    || batchJob.Status == BatchStatus::Waiting
                    || batchJob.Status == BatchStatus::Scheduled
                    || batchJob.Status == BatchStatus::Executing)
            exists join batch
                where batch.ClassNumber == _batchJobClassId
                    && batch.DataPartition == batchJob.DataPartition
                    && batch.BatchJobId == batchJob.RecId;

        if (batchJob)
        {
            doesBatchJobExist = true;
        }

        return doesBatchJobExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchAtLastRecurrence</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected static boolean isBatchAtLastRecurrence(ClassId _batchJobClassId)
    {
        BatchJobRecurrenceCount recurrance;
        Batch batch;
        boolean isAtLastOccurance;

        select firstonly RecurrenceCount from recurrance
            exists join batch
                where recurrance.BatchJobId == batch.BatchJobId
                    && batch.DataPartition == getCurrentPartition()
                    && batch.ClassNumber == _batchJobClassId;

        if (recurrance.RecurrenceCount >= RecurrenceExecutions - 1)
        {
            isAtLastOccurance = true;
        }

        return isAtLastOccurance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createStatus</Name>
				<Source><![CDATA[
    private void createStatus(
        RefRecId _workItemRecId, 
        CustVendSettlementClosedDateStatus _status)
    {
        CustVendSettlementClosedDateUpgradeStatus upgradeStats;

        upgradeStats.WorkItemRecId = _workItemRecId;
        upgradeStats.Status = _status;
        upgradeStats.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rescheduleBatchTasks</Name>
				<Source><![CDATA[
    private void rescheduleBatchTasks(SysInstrumentationActivityContext _activityContext)
    {
        _activityContext.addCustomProperty(CustVendInstrumentationConstants::SettlementClosedDateUpgradeRescheduleBatchTasks, enum2Symbol(enumNum(NoYes), NoYes::Yes));

        BatchHeader batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
        SysDictClass sysDictClass = new SysDictClass(classIdGet(this));

        ttsbegin;

        CustVendSettlementClosedDatePostUpgradeTask postUpgrade;

        CustVendSettlementClosedDateUpgradeWorkItem workItem;
        while select workItem
            where workItem.Module == upgradeBatch.getModule()
        {
            CustVendSettlementClosedDateStatus status = this.findLastWorkItemStatusExist(workItem.RecId);

            switch (status)
            {
                case CustVendSettlementClosedDateStatus::Completed:
                case CustVendSettlementClosedDateStatus::Processing:
                    continue;
                    break;
                case CustVendSettlementClosedDateStatus::Error:
                    if (postUpgrade == null)
                    {
                        postUpgrade = this.createPostUpgradeTask();

                        batchHeader.addRuntimeTask(postUpgrade, this.parmCurrentBatch().RecId);
                    }

                    this.scheduleBatchTask(batchHeader, postUpgrade, sysDictClass, workItem);
                    break;
                default:
                    break;
            }
        }

        batchHeader.save();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastWorkItemStatusExist</Name>
				<Source><![CDATA[
    private CustVendSettlementClosedDateStatus findLastWorkItemStatusExist(RefRecId _workItemRecId)
    {
        CustVendSettlementClosedDateUpgradeStatus upgradeStatus;
        select firstonly upgradeStatus
            order by upgradeStatus.RecId desc
            where upgradeStatus.WorkItemRecId == _workItemRecId;

        return upgradeStatus.Status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPostUpgradeTask</Name>
				<Source><![CDATA[
    private CustVendSettlementClosedDatePostUpgradeTask createPostUpgradeTask()
    {
        CustVendSettlementClosedDatePostUpgradeTask postUpgrade = CustVendSettlementClosedDatePostUpgradeTask::constructTask();
        postUpgrade.parmModule(upgradeBatch.getModule());
        postUpgrade.batchInfo().parmCaption("@CashManagement:CustVendSettlementClosedDateUpgradePostTask");

        return postUpgrade;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleBatchTasks</Name>
				<Source><![CDATA[
    private void scheduleBatchTasks(SysInstrumentationActivityContext _activityContext)
    {
        _activityContext.addCustomProperty(CustVendInstrumentationConstants::SettlementClosedDateUpgradeScheduleBatchTasks, enum2Symbol(enumNum(NoYes), NoYes::Yes));

        BatchHeader batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
        SysDictClass sysDictClass = new SysDictClass(classIdGet(this));

        ttsbegin;

        CustVendSettlementClosedDatePostUpgradeTask postUpgrade = this.createPostUpgradeTask();

        batchHeader.addRuntimeTask(postUpgrade, this.parmCurrentBatch().RecId);

        CustVendSettlementClosedDateUpgradeWorkItem workItem;
        while select workItem
            where workItem.Module == upgradeBatch.getModule()
        {
            this.scheduleBatchTask(batchHeader, postUpgrade, sysDictClass, workItem);
        }

        batchHeader.save();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleBatchTask</Name>
				<Source><![CDATA[
    private void scheduleBatchTask(BatchHeader _batchHeader, CustVendSettlementClosedDatePostUpgradeTask _finalTask, SysDictClass _sysDictClass, CustVendSettlementClosedDateUpgradeWorkItem _workItem)
    {
        CustVendSettlementClosedDateUpgrade childBatchTask = _sysDictClass.makeObject();
        childBatchTask.unpack(this.pack());

        childBatchTask.parmWorkItemRecId(_workItem.RecId);
        childBatchTask.parmIsChildBatchTask(true);

        childBatchTask.batchInfo().parmCaption(strFmt(
                "@CashManagement:CustVendSettlementClosedDateUpgradeBatchTaskCaption",
                upgradeBatch.getModule(),
                _workItem.CustVendTransFromRecId,
                _workItem.CustVendTransToRecId));

        _batchHeader.addRuntimeTask(childBatchTask, this.parmCurrentBatch().RecId);
        _batchHeader.addDependency(_finalTask, childBatchTask, BatchDependencyStatus::FinishedOrError);

        this.createStatus(_workItem.RecId, CustVendSettlementClosedDateStatus::Scheduled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsChildBatchTask</Name>
				<Source><![CDATA[
    internal boolean parmIsChildBatchTask(
        boolean _isChildBatchTask = isChildBatchTask)
    {
        isChildBatchTask = _isChildBatchTask;
        return isChildBatchTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkItemRecId</Name>
				<Source><![CDATA[
    internal RefRecId parmWorkItemRecId(
        RefRecId _workItemRecId = workItemRecId)
    {
        workItemRecId = _workItemRecId;
        return workItemRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean unpack(container packedClass)
    {
        Integer version = conpeek(packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public IDialogable dialog()
    {
        this.batchInfo().parmBatchExecute(NoYes::Yes);

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean validate()
    {
        boolean ret = super();
    
        if (this.batchInfo().parmBatchExecute() == NoYes::No)
        {
            ret = checkFailed("@CashManagement:CustVendSettlementClosedDateMustBeInBatch");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleBatch</Name>
				<Source><![CDATA[
    protected final void scheduleBatch (str _jobName)
    {
        const SysRecurrenceUnit RecurrenceUnit = SysRecurrenceUnit::Hour;
        const int RecurrenceInUnits = 3;

        SysRecurrenceData recurrenceData = SysRecurrence::defaultRecurrence();

        recurrenceData = SysRecurrence::setRecurrenceStartDateTime(recurrenceData, DateTimeUtil::utcNow());

        recurrenceData = SysRecurrence::setRecurrenceEndAfter(
                recurrenceData,
                RecurrenceExecutions);

        recurrenceData = SysRecurrence::setRecurrenceUnit(
                recurrenceData,
                RecurrenceUnit,
                RecurrenceInUnits);

        BatchInfo batchInfoTable = this.batchInfo();
        batchInfoTable.parmCaption(_jobName);
        batchInfoTable.parmRecurrenceData(recurrenceData);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>