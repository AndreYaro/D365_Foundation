<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Tutorial_LookupMultiSelectDialog</Name>
	<SourceCode>
		<Declaration><![CDATA[
class Tutorial_LookupMultiSelectDialog extends RunBase
{
    DialogRunbase   dialog;
    DialogGroup     dialogGrp;

    FormBuildStringControl  fbsCtrlMultiSelect1, fbsCtrlMultiSelect2;
    FormStringControl       fsCtrlMultiSelect1, fsCtrlMultiSelect2;

    container       returnIds1, returnIds2;

    SysLookupMultiSelectCtrl    msCtrl1, msCtrl2;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the description from the current class by calling the static description method on the
    ///    class if there is one.
    /// </summary>
    /// <returns>
    ///    The description from the current class.
    /// </returns>
    /// <remarks>
    ///    This method can be overridden to give a more precise description, for example, when you need some
    ///    internal variables to build the description text.The static <c>RunBase::description </c> method is
    ///    generally used to obtain the description of a class because you do not have to instantiate the
    ///    class to call it. The method speeds up displaying the description in a grid, for example.
    /// </remarks>
    public ClassDescription caption()
    {
        return 'Tutorial for multi-select lookup on dialog';
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    // Generate dialog
    public Object dialog()
    {
        FormBuildControl    setupGroupControl;

        dialog = super();

        dialog.alwaysOnTop(true);
        dialog.windowType(FormWindowType::Standard);
        dialogGrp = dialog.addGroup('Group');

        setupGroupControl = dialog.formBuildDesign().control(dialogGrp.formBuildGroup().id());

        // Control with the MULTI-SELECT
        fbsCtrlMultiSelect1 = setupGroupControl.addControl(FormControlType::String, identifierstr(ctrlRoles1));
        fbsCtrlMultiSelect1.label('Control 1');
        fbsCtrlMultiSelect2 = setupGroupControl.addControl(FormControlType::String, identifierstr(ctrlRoles2));
        fbsCtrlMultiSelect2.label('Control 2');

        dialog.allowUpdateOnSelectCtrl(true);

        this.dialogSelectCtrl();

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase _dialog)
    {
        FormRun formRun;

        super(dialog);

        formRun = _dialog.dialogForm().formRun();

        if (formRun)
        {
            fsCtrlMultiSelect1 = formRun.design().control(fbsCtrlMultiSelect1.id());
            msCtrl1 = SysLookupMultiSelectCtrl::construct(formRun, fsCtrlMultiSelect1, querystr(LogisticsLocationRolePostalLookup));

            fsCtrlMultiSelect2 = formRun.design().control(fbsCtrlMultiSelect2.id());
            Query query = new Query();

            QueryBuildDataSource qbds = query.addDataSource(tableNum(DirAddressBook));
            qbds.addSelectionField(fieldNum(DirAddressBook, Name));

            msCtrl2 = SysLookupMultiSelectCtrl::constructWithQuery(formRun, fsCtrlMultiSelect2, query);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    // Get input values
    public boolean getFromDialog()
    {
        #Characters

        // Return Ids from the 1st mutli-select control
        if (msCtrl1)
            returnIds1 = msCtrl1.get();

        // Return Ids from the 2nd mutli-select control
        if (msCtrl2)
            returnIds2 = msCtrl2.get();

        info('Control 1 - ' + con2StrUnlimited(returnIds1,#SEMICOLON));
        info('Control 2 - ' + con2StrUnlimited(returnIds2,#SEMICOLON));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        tutorial_LookupMultiSelectDialog  tutorial = new tutorial_LookupMultiSelectDialog();

        if (tutorial.prompt())
        {
            tutorial.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>