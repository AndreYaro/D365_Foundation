<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Tax1099KRecord</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Summarizes payment information for a given payer and a given state. Associated with exactly one A-Record. Used only when combined State/Federal filing is enabled.
/// </summary>
public class Tax1099KRecord extends Tax1099ElectronicBodyRecord
{
    private const Tax1099ERecordType recordType_K = 'K'; /* State totals */

    private Tax1099StateCode stateAbbreviation;
    private Tax1099AmountCollection amountCollection;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new K-Record upon providing necessary information
    /// </summary>
    /// <param name = "_abbreviation">The state to which this K-Record is targetted</param>
    /// <param name = "_amounts">The 1099 amounts that belong to this K-Record</param>
    /// <param name = "_currentType">The type of 1099 being dealt with</param>
    /// <returns>A new K-Record</returns>
    public static Tax1099KRecord construct(Tax1099StateCode _abbreviation, Tax1099AmountCollection _amounts, Tax1099Type _currentType)
    {
        return new Tax1099KRecord(_abbreviation, _amounts, _currentType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(Tax1099StateCode _abbreviation, Tax1099AmountCollection _amounts, Tax1099Type _currentType)
    {
        super(_currentType);

        this.parmStartIndexForAmounts(16);
        this.parmLengthOfAmounts(18);

        amountCollection = _amounts;
        stateAbbreviation = _abbreviation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the K-Record for use in electronic 1099 file
    /// </summary>
    /// <param name = "_realSequenceNumber">The line in which this record will appear in the file</param>
    /// <param name = "_calendarYear">The calendar year to which this file will belong</param>
    /// <param name = "_isCombinedFiling">Whether combined State/Federal filing is to be used for this file</param>
    /// <param name = "_localIRSPayerRec">Table buffer containing transaction information (Optional argument)</param>
    /// <returns>A Tax1099ERecord embodying a formatted, 750 character string</returns>
    public Tax1099ERecord generateRecord(real _realSequenceNumber, Tax1099CalendarYear _calendarYear, boolean _isCombinedFiling, Tax1099IRSPayerRec _localIRSPayerRec = null)
    {
        this.fillOutputRecord();

        // Record Type: Required. Enter K. Field Position: 1
        this.strInsert(recordType_K, 1);

        // Number of Payees: Required. Field Position: 2-9
        this.strInsert(num2Str0(amountCollection.getNumberOfPayees(), 8, 0, 0, 0), 2);

        //Blanks: Field Position: 10-15

        //Total Amounts: Field Positions 16-303
        container amounts = amountCollection.getAmounts();
        int startIndex;

        for (int i = 1; i <= conLen(amounts); i++)
        {
            startIndex = startIndexForAmounts + (lengthOfAmounts * (i - 1));
            this.strInsert(this.formatIRSAmount(conPeek(amounts, i), lengthOfAmounts), startIndex);
        }

        // Blanks: Field Position: 340-499

        // Record Sequence Number. Field Position: 500-507
        this.strInsert(num2Str0(_realSequenceNumber, 8, 0, 0, 0), 500);

        //Blanks: Field Position: 508-706

        //State Income Tax Withheld: Field Position: 707-724
        Tax1099StateTaxWithheld stateTaxWithheld = amountCollection.getStateTaxWithheld();
        str formattedStateTax = stateTaxWithheld > 0 ? this.formatIRSAmount(stateTaxWithheld, lengthOfAmounts) : '';
        this.strInsert(formattedStateTax, 707);

        //Local Income Tax Withheld: Field Position: 725-742
        Tax1099LocalTaxWithheld localTaxWithheld = amountCollection.getLocalTaxWithheld();
        str formattedLocalTax = localTaxWithheld > 0 ? this.formatIRSAmount(localTaxWithheld, lengthOfAmounts) : '';
        this.strInsert(formattedLocalTax, 725);

        //Blanks: Field Position: 743-746

        //Combined Federal/State Code: Field Position: 747-748
        Tax1099CFCode stateTaxCode = Tax1099CF_SFParticipatingStateCodes::findByStateAbbreviation(stateAbbreviation).StateTaxCode;
        str formattedCode = this.formatIRSStateCode(stateTaxCode);
        this.strInsert(formattedCode, 747);

        //Blanks: Field Position: 749-750

        return output;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>