<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchSummary</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class  PurchSummary
extends         SalesPurchSummary
{
    Num                 formLetterId;
    PurchTable          summaryOrderTable;
    VendPostingProfile      summaryPostingProfile;
    InventProfileType_RU    summaryInventProfileType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>areFieldsEqual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks a field from two buffer are equal or not.
    /// </summary>
    /// <param name="_orderTable">
    /// The order table buffer.
    /// </param>
    /// <param name="_summaryOrderTable">
    /// The summary order table buffer.
    /// </param>
    /// <param name="_fieldId">
    /// The field ID. It is an internal fieldId which include extension table ID info.
    /// </param>
    /// <returns>
    /// true if equal; otherwise, return false.
    /// </returns>
    public boolean areFieldsEqual(Common _orderTable, Common _summaryOrderTable, FieldId _fieldId)
    {
        boolean     ret;
        PurchTable  purchTableLoc;
        PurchTable  summaryPurchTableLoc;
        Common      orderTableLoc           = _orderTable;
        Common      summaryOrderTableLoc    = _summaryOrderTable;
        FieldId     realFieldId             = _fieldId;

        if (_orderTable.TableId == tableNum(PurchTable)
            && PurchTable::hasExensionTableEnabled())
        {
            purchTableLoc           = _orderTable;
            summaryPurchTableLoc    = _summaryOrderTable;
            realFieldId             = PurchTable::internalFieldIdToFieldId_W(_fieldId);

            switch (PurchTable::internalFieldIdToTableId_W(_fieldId))
            {
                case tableNum(PurchTable_BR):
                    orderTableLoc           = purchTableLoc.purchTable_BR();
                    summaryOrderTableLoc    = summaryPurchTableLoc.purchTable_BR();
                    break;

                case tableNum(PurchTable_RU):
                    orderTableLoc           = purchTableLoc.purchTable_RU();
                    summaryOrderTableLoc    = summaryPurchTableLoc.purchTable_RU();
                    break;

                case tableNum(PurchTable_W):
                    orderTableLoc           = purchTableLoc.purchTable_W();
                    summaryOrderTableLoc    = summaryPurchTableLoc.purchTable_W();
                    break;
            }
        }

        ret = super(orderTableLoc, summaryOrderTableLoc, realFieldId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkConsignmentNoteNum_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if the vendor is gtaVendor, then if ConsignmentNoteNum_IN field is entered return true else return false.
    /// </summary>
    /// <returns>
    /// returns true if the consignment number is entered otherwise false
    /// </returns>
    public boolean checkConsignmentNoteNum_IN()
    {
        VendInvoiceInfoSubTable   vendInvoiceInfoSubTable;
        QueryRun            queryRun;
        boolean             ok = true;

        queryRun = this.queryBuild();
        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(VendInvoiceInfoSubTable)))
                vendInvoiceInfoSubTable = queryRun.get(tableNum(VendInvoiceInfoSubTable));

            if (!vendInvoiceInfoSubTable)
                continue;

            if (!vendInvoiceInfoSubTable.vendInvoiceInfoTable().vendInvoiceInfoTable_W().ConsignmentNoteNum_IN)
            {
                ok = checkFailed(strFmt("@SYS26332", "@GLS5616"));
            }
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFormLetterId</Name>
				<Source><![CDATA[
    public boolean checkFormLetterId(str _errorText)
    {
        QueryRun            queryRun;
        VendDocumentSubTableMap parmSubTable;  // Map is guaranteed to be initialized later in the method
        PurchTable          purchTable;
        boolean             ok = true;

        VendDocumentTableMap    vendDocumentTableMap;

        setPrefix("@SYS59260");

        queryRun = this.queryBuild();
        while (queryRun.next())
        {
            if (queryRun.changed(this.tableNumParmTable()))
            {
                parmSubTable = queryRun.get(this.tableNumParmTable());
            }

            if (!parmSubTable)
            {
                continue;
            }

            setPrefix(this.getOrderPrefix(parmSubTable));

            purchTable = parmSubTable.purchTable();
            if (this.createNewJournal(purchTable))
            {
                this.summaryPurchId(purchTable.PurchId);
                this.summaryOrderTable(purchTable);
                
                vendDocumentTableMap = VendDocumentSubTableMap::header(parmSubTable);

                ok = ok && this.checkFormLetterIdForVendDocument(vendDocumentTableMap,
                                                           purchTable, 
                                                           parmSubTable, 
                                                           _errorText);
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFormLetterIdForVendDocument</Name>
				<Source><![CDATA[
    protected boolean checkFormLetterIdForVendDocument(
        VendDocumentTableMap    _vendDocumentTableMap,
        PurchTable              _purchTable,
        VendDocumentSubTableMap _parmSubTable,
        str                     _errorText)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;
        #IsoCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
            && _vendDocumentTableMap.TableId == tableNum(VendInvoiceInfoTable))
        {
            vendInvoiceInfoTable = _vendDocumentTableMap;
        }

        if (!(SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoLV])
            && _vendDocumentTableMap.vendDocumentTableMap::parmDocAutoNumbering_LT())
            && !(SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
            && vendInvoiceInfoTable
            && vendInvoiceInfoTable.correctionType_RU() == FactureCorrectionType_RU::Revision))
        {
            this.setFormLetterIdFromTrans(VendDocumentSubTableMap::header(_parmSubTable).Num);

            if (!strLTrim(this.formLetterId()))
            {
                error(strFmt(_errorText, _purchTable.PurchId));
                return false;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructSummaryFields</Name>
				<Source><![CDATA[
    protected void constructSummaryFields(DocumentStatus _documentStatus)
    {
        orderSummaryFields = PurchSummaryFields::construct(_documentStatus);
        sortingParmTabeleFieldIdList = orderSummaryFields.sortingParmTabeleFieldIdList_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldNumOrderTable_OrderId</Name>
				<Source><![CDATA[
    public fieldId  fieldNumOrderTable_OrderId()
    {
        return fieldNum(PurchTable, PurchId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldNumParmTable_OrderId</Name>
				<Source><![CDATA[
    public fieldId fieldNumParmTable_OrderId()
    {
        return orderSummaryFields.fieldNumParmTable_OrderId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldNumParmTable_ParmId</Name>
				<Source><![CDATA[
    public fieldId fieldNumParmTable_ParmId()
    {
        return orderSummaryFields.fieldNumParmTable_ParmId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldNumParmTable_TableRefId</Name>
				<Source><![CDATA[
    public fieldId fieldNumParmTable_TableRefId()
    {
        return orderSummaryFields.fieldNumParmTable_TableRefId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldNumSalesPurchParmTable_InvProfileId</Name>
				<Source><![CDATA[
    public fieldId fieldNumSalesPurchParmTable_InvProfileId()
    {
        return orderSummaryFields.fieldNumSalesPurchParmTable_InvProfileId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldNumSalesPurchParmTable_InvProfiType</Name>
				<Source><![CDATA[
    public fieldId fieldNumSalesPurchParmTable_InvProfiType()
    {
        return orderSummaryFields.fieldNumSalesPurchParmTable_InvProfiType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldNumSalesPurchParmTable_JobStatus</Name>
				<Source><![CDATA[
    public fieldId fieldNumSalesPurchParmTable_JobStatus()
    {
        return orderSummaryFields.fieldNumSalesPurchParmTable_JobStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterId</Name>
				<Source><![CDATA[
    public Num formLetterId()
    {
        return formLetterId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleAccount</Name>
				<Source><![CDATA[
    public int moduleAccount()
    {
        return enum2int(ModuleVendPurch::Vend);
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleOrder</Name>
				<Source><![CDATA[
    public int moduleOrder()
    {
        return enum2int(ModuleVendPurch::Purch);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(
        ParmId          _parmId,
        PurchId         _sumPurchId,
        DocumentStatus  _documentStatus)
    {
        super(_parmId, _sumPurchId, _documentStatus);

        summaryOrderTable = PurchTable::find(_sumPurchId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderId</Name>
				<Source><![CDATA[
    public PurchId orderId(Common _purchTable)
    {
        PurchTable purchTable = _purchTable as PurchTable;
        return purchTable.PurchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderTable</Name>
				<Source><![CDATA[
    public Common  orderTable(Common  _subTable)
    {
        VendDocumentSubTableMap subTable = _subTable;
        PurchTable              purchTable;
        VendInvoiceInfoTable    header;

        if (subTable.TableId == tableNum(PurchParmSubTable) || !subTable.isNonPO())
        {
            return subTable.purchTable();
        }

        if (subTable.TableId == tableNum(VendInvoiceInfoSubTable))
        {
            header = VendDocumentSubTableMap::header(_subTable);

            if (header.isNonPO())
            {
                purchTable = VendInvoiceInfoTable::initPurchTableFromNonPO(header);
            }
        }

        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJobStatus</Name>
				<Source><![CDATA[
    public ParmJobStatus parmJobStatus()
    {
        return ParmJobStatus::Waiting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormLetterIdFromTrans</Name>
				<Source><![CDATA[
    public void setFormLetterIdFromTrans(Num _formLetterId)
    {
        formLetterId = _formLetterId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summaryInventProfileType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets and returns the inventory profile type.
    /// </summary>
    /// <param name="_summaryInventProfileType">
    ///     An outcome of the <c>InventProfileType_RU</c> enumeration, optional.
    /// </param>
    /// <returns>
    ///     An outcome of the <c>InventProfileType_RU</c> enumeration.
    /// </returns>
    public InventProfileType_RU summaryInventProfileType(InventProfileType_RU _summaryInventProfileType = summaryInventProfileType)
    {
        summaryInventProfileType  = _summaryInventProfileType;

        return summaryInventProfileType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summaryOrderTable</Name>
				<Source><![CDATA[
    public Common summaryOrderTable(PurchTable _summaryOrderTable = summaryOrderTable)
    {
        summaryOrderTable  = _summaryOrderTable;

        return summaryOrderTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summaryPostingProfile</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets and returns the vendor posting profile.
    /// </summary>
    /// <param name="_summaryPostingProfile">
    ///     A VendPostingProfile data type, optional.
    /// </param>
    /// <returns>
    ///     A VendPostingProfile type.
    /// </returns>
    public VendPostingProfile summaryPostingProfile(VendPostingProfile _summaryPostingProfile = summaryPostingProfile)
    {
        summaryPostingProfile  = _summaryPostingProfile;

        return summaryPostingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summaryPurchId</Name>
				<Source><![CDATA[
    public PurchId summaryPurchId(PurchId _summaryPurchId = summaryOrderId)
    {
        summaryOrderId  = _summaryPurchId;

        return summaryOrderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableNumOrderTable</Name>
				<Source><![CDATA[
    public tableId  tableNumOrderTable()
    {
        return tableNum(PurchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableNumParentForSalesPurchParmTable_RU</Name>
				<Source><![CDATA[
    public tableId tableNumParentForSalesPurchParmTable_RU()
    {
        return orderSummaryFields.tableNumParentForSalesPurchParmTable_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableNumParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of the table storing the order lines to be posted.
    /// </summary>
    /// <returns>
    /// ID of the table storing the order lines to be posted.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// This method must be overridden.
    /// </exception>
    public tableId tableNumParmLine()
    {
        return orderSummaryFields.tableNumParmLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableNumParmTable</Name>
				<Source><![CDATA[
    public tableId  tableNumParmTable()
    {
        return orderSummaryFields.tableNumParmTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableNumSalesPurchParmTable</Name>
				<Source><![CDATA[
    public tableId tableNumSalesPurchParmTable()
    {
        return orderSummaryFields.tableNumSalesPurchParmTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableNumSalesPurchParmTable_RU</Name>
				<Source><![CDATA[
    public tableId tableNumSalesPurchParmTable_RU()
    {
        return orderSummaryFields.tableNumSalesPurchParmTable_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFormletterIdServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Performs checking of formletter ID on the server.
    /// </summary>
    /// <param name="_accountOrder">
    ///   An element from the <c>AccountOrder</c> enumeration.
    /// </param>
    /// <param name="_parmId">
    ///   ID for the posting.
    /// </param>
    /// <param name="_sumPurchId">
    ///   A summary purchase ID.
    /// </param>
    /// <param name="_documentStatus">
    ///   An element from the <c>DocumentStatus</c> enumeration.
    /// </param>
    /// <param name="_vendNumber">
    ///   A vendor document number; optional.
    /// </param>
    /// <param name="_errorText">
    ///   An error text to display if the check fails; Optional.
    /// </param>
    /// <returns>
    ///   true if the validation passes; otherwise, false.
    /// </returns>
    static public boolean checkFormletterIdServer(
        AccountOrder    _accountOrder,
        ParmId          _parmId,
        PurchId         _sumPurchId,
        DocumentStatus  _documentStatus,
        Num             _vendNumber = '',
        str             _errorText = '')
    {
        PurchSummary checkPurchSummary;

        checkPurchSummary = PurchSummary::construct(_accountOrder, _parmId, _sumPurchId, _documentStatus, _vendNumber);
        return checkPurchSummary.checkFormLetterId(_errorText);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchSummary construct(
        AccountOrder    _accountOrder,
        ParmId          _parmId,
        PurchId         _sumPurchId,
        DocumentStatus  _documentStatus,
        Num             _vendNumber = '')
    {
        PurchSummary purchSummary = PurchSummary::createPurchSummary(_accountOrder,
                                                                     _parmId,
                                                                     _sumPurchId,
                                                                     _documentStatus,
                                                                     _vendNumber);
        if (purchSummary == null)
        {
            throw error(strFmt("@SYS19306",funcName()));
        }

        return purchSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>PurchSummary</c> depending on the account order.
    /// </summary>
    /// <param name = "_accountOrder">The <c>AccountOrder</c> value.</param>
    /// <param name = "_parmId">The <c>ParmId</c> value.</param>
    /// <param name = "_sumPurchId">The <c>PurchId</c> value.</param>
    /// <param name = "_documentStatus">The <c>DomumentStatus</c> value.</param>
    /// <param name = "_vendNumber">Vendor number value.</param>
    /// <returns>An instance of the <c>PurchSummary</c> class.</returns>
    protected static PurchSummary createPurchSummary(AccountOrder    _accountOrder,
                                                     ParmId          _parmId,
                                                     PurchId         _sumPurchId,
                                                     DocumentStatus  _documentStatus,
                                                     Num             _vendNumber = '')
    {
        switch (_accountOrder)
        {
            case AccountOrder::None     :   return new PurchSummary_None   (_parmId, _sumPurchId, _documentStatus);
            case AccountOrder::Account  :   return new PurchSummary_Account(_parmId, _sumPurchId, _documentStatus);
            case AccountOrder::Order    :   return new PurchSummary_Order  (_parmId, _sumPurchId, _documentStatus, _vendNumber);
            case AccountOrder::Auto     :   return new PurchSummary_Auto   (_parmId, _sumPurchId, _documentStatus);

            default : return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderPrefix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the prefix for field label value.
    /// </summary>
    /// <param name = "_parmSubTable">The <c>VendDocumentSubTableMap</c> record.</param>
    /// <returns>The field label value.</returns>
    protected str getOrderPrefix(VendDocumentSubTableMap _parmSubTable)
    {
        return fieldLabelValue(_parmSubTable.TableId, this.fieldNumParmTable_OrderId(), _parmSubTable.OrigPurchId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>