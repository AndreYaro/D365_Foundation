<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsWaveCleanup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>WhsWaveCleanup</c> class is used to run batch job to cleanup completed or cancelled batch jobs for waves.
/// </summary>
public class WhsWaveCleanup extends RunBaseBatch implements BatchRetryable, SysErrorMessageHelpScopeIBatchProvider
{
    private const TimeInSeconds NumberOfSeconds = 15;
    private const int defaultDaysRange = 7;
    private int historyLimit;
    private DialogField dialogHistoryLimit;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        historyLimit
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    void initParmDefault()
    {
        historyLimit = defaultDaysRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextBatchServer(this))
        {
            if (this.canRunWithTimedTransaction())
            {
                using (var timedTransactionManager = new TimedTransactionOperationManager(NumberOfSeconds))
                {
                    if (WHSWaveCleanupDialogParametersFlight::instance().isEnabled())
                    {
                        this.cleanupWithQuery(timedTransactionManager);
                    }
                    else
                    {
                        this.cleanup(timedTransactionManager);
                    }
                }
            }
            else
            {
                this.cleanup(null);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunWithTimedTransaction</Name>
				<Source><![CDATA[
    private boolean canRunWithTimedTransaction()
    {
        return appl.ttsLevel() == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanup</Name>
				<Source><![CDATA[
    private void cleanup(TimedTransactionOperationManager _timedTransactionManager)
    {
        BatchJob            batchJob;
        WHSWaveTableBatch   waveTableBatch;

        while select forupdate batchJob
            where batchJob.Status in this.batchJobStatuses()
            exists join waveTableBatch
                where waveTableBatch.Batch == batchJob.RecId
        {
            BatchJobHistory::deleteJobHistory(batchJob.RecId);
            batchJob.delete();

            if (_timedTransactionManager)
            {
                _timedTransactionManager.commitTransactionIfExceededDuration();
            }
        }

        this.deleteOrphanedWaveTableBatchJobs(_timedTransactionManager);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupWithQuery</Name>
				<Source><![CDATA[
    private void cleanupWithQuery(TimedTransactionOperationManager _timedTransactionManager)
    {      
        Query q = new Query();
        QueryBuildDataSource qbdsBatch = q.addDataSource(tableNum(BatchJob));
        qbdsBatch.update(true);
        QueryBuildDataSource qbdsWaveBatch = qbdsBatch.addDataSource(tableNum(WHSWaveTableBatch));
        qbdsWaveBatch.joinMode(JoinMode::ExistsJoin);
        qbdsWaveBatch.relations(true);

        if (historyLimit)
        {
            qbdsWaveBatch.addRange(fieldNum(WHSWaveTableBatch, CreatedDateTime)).value(SysQueryRangeUtil::lessThanUtcDate(-historyLimit));
        }

        qbdsBatch.addRange(fieldNum(BatchJob, RecId)).value(strFmt('((%1.%2 == %3) || (%1.%2 == %4))', 
            q.dataSourceTable(tableNum(BatchJob)).name(),
            fieldStr(BatchJob, Status),
            enum2int(BatchStatus::Finished),
            enum2int(BatchStatus::Error)));

        QueryRun qr = new QueryRun(q);

        while (qr.next())
        {
            BatchJob batchJob = qr.get(tableNum(BatchJob));
            BatchJobHistory::deleteJobHistory(batchJob.RecId);
            batchJob.delete();

            if (_timedTransactionManager)
            {
                _timedTransactionManager.commitTransactionIfExceededDuration();
            }
        }

        this.deleteOrphanedWaveTableBatchJobs(_timedTransactionManager);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOrphanedWaveTableBatchJobs</Name>
				<Source><![CDATA[
    private void deleteOrphanedWaveTableBatchJobs(TimedTransactionOperationManager _timedTransactionManager)
    {
        WHSWaveTableBatch   waveTableBatch;
        BatchJob            batchJob;
        
        while select forupdate waveTableBatch
            notexists join batchJob
                where batchJob.RecId == waveTableBatch.Batch
        {
            waveTableBatch.delete();

            if (_timedTransactionManager)
            {
                _timedTransactionManager.commitTransactionIfExceededDuration();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchJobStatuses</Name>
				<Source><![CDATA[
    private container batchJobStatuses()
    {
        return [BatchStatus::Finished, BatchStatus::Error];
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSWaveCleanup construct()
    {
        return new WHSWaveCleanup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@WAX3120";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        WHSWaveCleanup waveCleanup = WHSWaveCleanup::construct();

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextBatchController(waveCleanup))
        {
            if (waveCleanup.prompt())
            {
                waveCleanup.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dlg = super();
        
        if (WHSWaveCleanupDialogParametersFlight::instance().isEnabled())
        {
            dialogHistoryLimit = dlg.addField(extendedtypestr(Days), "@SYS:BatchJobRetainDays", "@ApplicationFoundation:CleanBatchJobsHelpText");
            dialogHistoryLimit.value(historyLimit);
        }

        return dlg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        if (WHSWaveCleanupDialogParametersFlight::instance().isEnabled())
        {
            historyLimit = dialogHistoryLimit.value();
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = RunBase::getVersion(_packedClass);
        
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeFormName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the form name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The form name used for the error context.</returns>
    [Hookable(false)]
    public FormName errorMessageHelpScopeFormName()
    {
        return strFmt('%1_%2', formStr(Dialog), classStr(WhsWaveCleanup));
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeActionName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the action name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The action name used for the error context.</returns>
    [Hookable(false)]
    public str errorMessageHelpScopeActionName()
    {
        return menuItemActionStr(WHSWaveBatchCleanup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;
    
        ret = super(calledFrom);

        if (ret && WHSWaveCleanupDialogParametersFlight::instance().isEnabled() && historyLimit < 1)
        {
            ret = checkFailed(strFmt("@WAX:WaveCleanupRetentionDays", 1));
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>