<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvLedgerInfo</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TrvLedgerInfo
{
    tableId             tableId;
    recId               recId;
    LedgerDimensionDefaultAccount     ledgerDimension;
    LedgerJournalACType accountType;
    LedgerDimensionDefaultAccount offsetLedgerDimension;

    LedgerJournalACType offsetAccountType;
    AmountCurDebit      amountCurDebit;
    AmountCurCredit     amountCurCredit;
    CurrencyCode        currencyCode;
    ExchRate            exchRate;
    TransDate           transDate;
    DimensionDefault    defaultDimension;
    DimensionDefault    offsetDefaultDimension;
    TaxGroupJournal     taxGroupJournal;
    TaxGroupJournal     taxItemGroup;
    Name                description;
    LedgerJournalNameId journalName;
    LedgerJournalId     journalId;
    PaymTermId          payment;
    PaymId              paymentId;
    PaymMode            paymentMode;
    DueDate             dueDate;
    PaymSpec            paymSpec;
    InvoiceId           invoiceId;
    DocumentNum         documentNum;
    Voucher             voucher;
    NumberSequenceCode  voucherSeries;
    LedgerJournalTransTxt txt;

    TrvHcmWorkerRecId   worker;

    //Tax Stuff
    AmountCur           correctedTaxAmount;
    boolean             ignoreParameter;

    NoYes               approved;
    TrvHcmWorkerRecId   approver;
    Qty                 qty;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmAccountType</Name>
				<Source><![CDATA[
    public LedgerJournalACType parmAccountType(LedgerJournalACType _accountType = accountType)
    {
        accountType = _accountType;

        return accountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmountCurCredit</Name>
				<Source><![CDATA[
    public AmountCurCredit parmAmountCurCredit(AmountCurCredit _amountCurCredit = amountCurCredit)
    {
        amountCurCredit = _amountCurCredit;

        return amountCurCredit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmountCurDebit</Name>
				<Source><![CDATA[
    public AmountCurDebit parmAmountCurDebit(AmountCurDebit _amountCurDebit = amountCurDebit)
    {
        amountCurDebit = _amountCurDebit;

        return amountCurDebit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApproved</Name>
				<Source><![CDATA[
    public NoYes parmApproved(NoYes _approved = approved)
    {
        approved = _approved;

        return approved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApprover</Name>
				<Source><![CDATA[
    public TrvHcmWorkerRecId parmApprover(TrvHcmWorkerRecId _approver = approver)
    {
        approver = _approver;
        return approver;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrectedTaxAmount</Name>
				<Source><![CDATA[
    public AmountCur parmCorrectedTaxAmount(AmountCur _correctedTaxAmount = correctedTaxAmount)
    {
        correctedTaxAmount = _correctedTaxAmount;

        return correctedTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmCurrencyCode(CurrencyCode _currencyCode = currencyCode)
    {
        currencyCode = _currencyCode;

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault parmDefaultDimension ( DimensionDefault  _defaultDimension = defaultDimension)
    {
        defaultDimension = _defaultDimension;

        return defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentNum</Name>
				<Source><![CDATA[
    public DocumentNum parmDocumentNum(DocumentNum _documentNum = documentNum)
    {
        documentNum = _documentNum;

        return documentNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDueDate</Name>
				<Source><![CDATA[
    public DueDate parmDueDate(DueDate _dueDate = dueDate)
    {
        dueDate = _dueDate;

        return dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchRate</Name>
				<Source><![CDATA[
    public ExchRate parmExchRate(ExchRate _exchRate = exchRate)
    {
        exchRate = _exchRate;

        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIgnoreParameter</Name>
				<Source><![CDATA[
    public boolean parmIgnoreParameter(boolean _ignoreParameter = ignoreParameter)
    {
        ignoreParameter = _ignoreParameter;

        return ignoreParameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceId</Name>
				<Source><![CDATA[
    public InvoiceId parmInvoiceId(InvoiceId _invoiceId = invoiceId)
    {
        invoiceId = _invoiceId;

        return invoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalId</Name>
				<Source><![CDATA[
    public LedgerJournalId parmJournalId(LedgerJournalId _journalId = journalId)
    {
        journalId = _journalId;

        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalName</Name>
				<Source><![CDATA[
    public LedgerJournalNameId parmJournalName(LedgerJournalNameId _journalName = journalName)
    {
        journalName = _journalName;

        return journalName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerDescription</Name>
				<Source><![CDATA[
    public Name parmLedgerDescription(Name _description = description)
    {
        description = _description;

        return description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount parmLedgerDimension(LedgerDimensionDefaultAccount _ledgerDimension = ledgerDimension)
    {
        ledgerDimension = _ledgerDimension;

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOffsetAccountType</Name>
				<Source><![CDATA[
    public LedgerJournalACType parmOffsetAccountType(LedgerJournalACType _offsetAccountType = offsetAccountType)
    {
        offsetAccountType = _offsetAccountType;

        return offsetAccountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOffsetDefaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault parmOffsetDefaultDimension ( DimensionDefault  _offsetDefaultDimension = offsetDefaultDimension)
    {
        offsetDefaultDimension = _offsetDefaultDimension;

        return offsetDefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOffsetLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount parmOffsetLedgerDimension(LedgerDimensionDefaultAccount _offsetLedgerDimension = offsetLedgerDimension)
    {
        offsetLedgerDimension = _offsetLedgerDimension;

        return offsetLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPayment</Name>
				<Source><![CDATA[
    public PaymTermId parmPayment(PaymTermId _payment = payment)
    {
        payment = _payment;

        return payment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentId</Name>
				<Source><![CDATA[
    public PaymId parmPaymentId(PaymId _paymentId = paymentId)
    {
        paymentId = _paymentId;

        return paymentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymMode</Name>
				<Source><![CDATA[
    public PaymMode parmPaymMode(PaymMode _paymMode = paymentMode)
    {
        paymentMode = _paymMode;

        return paymentMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymSpec</Name>
				<Source><![CDATA[
    public PaymSpec parmPaymSpec(PaymSpec _paymSpec = paymSpec)
    {
        paymSpec = _paymSpec;

        return paymSpec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQty</Name>
				<Source><![CDATA[
    public Qty parmQty(Qty _qty = qty)
    {
        qty = _qty;

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecId</Name>
				<Source><![CDATA[
    public recId parmRecId(recId _recId = recId)
    {
        recId = _recId;

        return recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTableId</Name>
				<Source><![CDATA[
    public tableId parmTableId(tableId _tableId = tableId)
    {
        tableId = _tableId;

        return tableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxGroupJournal</Name>
				<Source><![CDATA[
    public TaxGroupJournal parmTaxGroupJournal(TaxGroupJournal _taxGroupJournal = taxGroupJournal)
    {
        taxGroupJournal = _taxGroupJournal;

        return taxGroupJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxItemGroup</Name>
				<Source><![CDATA[
    public TaxGroupJournal parmTaxItemGroup(TaxGroupJournal _taxItemGroup = taxItemGroup)
    {
        taxItemGroup = _taxItemGroup;

        return taxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;

        if (!prmisDefault(_transDate))
        {
            this.setPayment();
        }

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTxt</Name>
				<Source><![CDATA[
    public LedgerJournalTransTxt parmTxt(LedgerJournalTransTxt _txt = txt)
    {
        txt = _txt;

        return txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucher</Name>
				<Source><![CDATA[
    public Voucher parmVoucher(Voucher _voucher = voucher)
    {
        voucher = _voucher;

        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucherSeries</Name>
				<Source><![CDATA[
    public NumberSequenceCode parmVoucherSeries(NumberSequenceCode _voucherSeries = voucherSeries)
    {
        voucherSeries = _voucherSeries;

        return voucherSeries;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorker</Name>
				<Source><![CDATA[
    public TrvHcmWorkerRecId parmWorker(TrvHcmWorkerRecId _worker = worker)
    {
        worker = _worker;

        return worker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCashAdvanceParms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the required fields in a ledger journal transaction based on a Cash Advance Request.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// The cash advance request ID does not exist in the table. The cash advance request status should be
    /// either <c>Ready</c> or <c>Ordered</c> to be posted in General Ledger.
    /// </exception>
    protected void setCashAdvanceParms()
    {
        TrvCashAdvance                  trvCashAdvance;
        TrvParameters                   trvParameters = TrvParameters::find();
        TrvPartyEmployeeRelationship    trvEmployee;
        TrvExchSetup                    trvExchSetup;
        NumberSeq                       numSeq;

        select firstonly * from trvCashAdvance where trvCashAdvance.RecId == recId;

        if (!trvCashAdvance.RecId)
		{
            throw error("@SYS117455");
        }

        if (trvCashAdvance.CashAdvanceStatus != TrvWorkflowCashAdvanceStatus::Approved)
        {
            throw error("@SYS109840");
        }

        numSeq = NumberSeq::newGetVoucherFromCode(this.parmVoucherSeries(),  NumberSeqScopeFactory::createDefaultScope(), true);
        this.parmVoucher(numSeq.voucher());
        ttsbegin;
        numSeq.used();
        ttscommit;

        if (!this.parmVoucher())
        {
            warning("@SYS101851");
        }

        this.parmTxt(this.setLedgerText(trvCashAdvance.CashAdvanceNumber, HcmWorker::find(trvCashAdvance.RequestingWorker).PersonnelNumber, "@SYS102764", this.parmVoucher()));
        this.parmDocumentNum(trvCashAdvance.CashAdvanceNumber);

        trvEmployee  = TrvPartyEmployeeRelationship::find(trvCashAdvance.RequestingWorker);
        trvExchSetup = TrvExchSetup::find(trvCashAdvance.CurrencyCode);

        // Offset will always be from Employee setup
        this.parmOffsetLedgerDimension(trvEmployee.parmLedgerDimension());
        this.parmOffsetAccountType(trvEmployee.AccountType);
        if (this.parmOffsetAccountType() == LedgerJournalACType::Ledger)
        {
            this.parmOffsetLedgerDimension(LedgerDimensionFacade::serviceCreateLedgerDimension(this.parmOffsetLedgerDimension(), trvCashAdvance.DefaultDimension));
        }
        else
        {
            this.parmOffsetDefaultDimension(trvCashAdvance.DefaultDimension);
        }

        // If the user is not mapped to an account, throw error and disallow posting.
        if (!this.parmOffsetLedgerDimension())
        {
            throw error(strFmt("@SYS305453", HcmWorker::worker2Name(trvCashAdvance.RequestingWorker)));
        }

        // use account # in request 1st, if empty, account in currency, then the default in parameters
        if (trvCashAdvance.AdvanceLedgerDimension)
        {
            this.parmAccountType(trvCashAdvance.AccountType);
            this.parmLedgerDimension(trvCashAdvance.AdvanceLedgerDimension);
        }
        else if (trvExchSetup.AdvanceAccountLedgerDimension)
        {
            this.parmAccountType(trvExchSetup.AccountType);
            this.parmLedgerDimension(trvExchSetup.AdvanceAccountLedgerDimension);
        }

        // merge main account and default dimension
        if (this.parmAccountType() == LedgerJournalACType::Ledger)
        {
            this.parmLedgerDimension(LedgerDimensionFacade::serviceCreateLedgerDimension(this.parmLedgerDimension(), trvCashAdvance.DefaultDimension));
        }
        else
        {
            this.parmDefaultDimension(trvCashAdvance.DefaultDimension);
        }

        this.parmTransDate(transDate ? transDate : trvCashAdvance.PaidDate);
        if (trvCashAdvance.AccountType != LedgerJournalACType::Ledger)
            this.parmDefaultDimension(trvCashAdvance.DefaultDimension);
        this.parmTaxItemGroup(trvCashAdvance.TaxItemGroup);
        this.parmTaxGroupJournal(trvCashAdvance.TaxGroup);

        this.parmLedgerDescription(strFmt("@SYS117456", date2StrUsr(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), DateFlags::FormatAll), trvCashAdvance.CashAdvanceNumber));

        this.parmAmountCurDebit(trvCashAdvance.PaidAmountCur);
        this.parmCurrencyCode(trvCashAdvance.CurrencyCode);
        this.parmExchRate(trvCashAdvance.ExchRate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerText</Name>
				<Source><![CDATA[
    private LedgerJournalTransTxt setLedgerText(str sKey1, str sKey2, str sKey3, str sKey4)
    {
        TransactionTxt transactionTxt;
        ;
        transactionTxt = TransactionTxt::construct();
        transactionTxt.setDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        transactionTxt.setFormLetter("@SYS102764");
        transactionTxt.setKey1(sKey1);
        transactionTxt.setKey2(sKey2);
        transactionTxt.setKey3(sKey3);
        transactionTxt.setVoucher(sKey4);
        transactionTxt.setType(LedgerTransTxt::Expense);

        return transactionTxt.txt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPayment</Name>
				<Source><![CDATA[
    protected void setPayment()
    {
        PaymTerm paymTerm;
        VendTable vendTable;

        if (this.parmOffsetAccountType() == LedgerJournalACType::Vend || this.parmAccountType() == LedgerJournalACType::Vend)
        {
            vendTable = VendTable::findByLedgerDimension(this.parmLedgerDimension());

            if (!vendTable.RecId)
            {
                vendTable = VendTable::findByLedgerDimension(this.parmOffsetLedgerDimension());
            }

            this.parmPayment(vendTable.PaymTermId);
            paymTerm = PaymTerm::find(vendTable.PaymTermId);
            this.parmPaymentId(vendTable.PaymId);
            this.parmPaymMode(vendTable.PaymMode);
            this.parmDueDate(paymTerm.due(this.parmTransDate()));
            this.parmPaymSpec(vendTable.PaymSpec);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TrvLedgerInfo construct(tableId _tableId, recId _recId, NumberSequenceCode _voucherSeries = '', boolean _ignoreParameter = false)
    {
        TrvLedgerInfo trvLedgerInfo = new TrvLedgerInfo();

        trvLedgerInfo.parmTableId(_tableId);
        trvLedgerInfo.parmRecId(_recId);
        trvLedgerInfo.parmVoucherSeries(_voucherSeries);
        trvLedgerInfo.parmIgnoreParameter(_ignoreParameter);

        switch (_tableId)
        {
            case tableNum(TrvCashAdvance):
                trvLedgerInfo.setCashAdvanceParms();
                break;
        }

        // set payment info if either of the accounts contains vendor account
        trvLedgerInfo.setPayment();

        return trvLedgerInfo;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>