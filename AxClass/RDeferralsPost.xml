<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rDeferralsPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rDeferralsPost
{
    LedgerJournalTrans  ledgerJournalTrans;
    LedgerJournalTrans_RDeferrals  ledgerJournalTrans_RDeferrals;
    Common              common;
    LedgerVoucher       ledgerVoucher;
    TransDate           transDate;
    RDeferralsBook      rDeferralsBook, rDeferralsBookSource;
    RDeferralsTrans     rDeferralsTransSource;
    //<RUP>
    LedgerDimensionDefaultAccount ledgerDefaultAccount, ledgerDefaultAccountOffset;
    //</RUP>
    boolean             correct;
    TransDate           accountingDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canCreateDeferralsTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if deferral trans can be created.
    /// </summary>
    /// <returns>True.</returns>
    public boolean canCreateDeferralsTrans()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates trans.
    /// </summary>
    public void createTrans()
    {
        RDeferralsTrans rDeferralsTrans;

        switch (common.TableId)
        {
            case tableNum(LedgerJournalTrans):
                rDeferralsTrans = this.initFromLedgerJournalTrans();
                break;
            case tablenum(RDeferralsBook):
                rDeferralsTrans = this.initFromBookSource();
                break;
            case tablenum(RDeferralsTrans):
                rDeferralsTrans = this.initFromDeferralsTrans();
                break;
            default:
                throw error(strFmt("@SYS23396", funcName()));
        }
        rDeferralsTrans.Voucher   = ledgerVoucher.lastVoucher();
        rDeferralsTrans.insert();

        this.createTransLink(rDeferralsTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBookSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>RDeferralsTrans</c> from source.
    /// </summary>
    /// <returns><c>RDeferralsTrans</c> object.</returns>
    protected RDeferralsTrans initFromBookSource()
    {
        RDeferralsTrans   rDeferralsTrans;

        rDeferralsTrans.clear();
        rDeferralsTrans.TransDate         = transDate;
        rDeferralsTrans.DeferralsId       = rDeferralsBookSource.DeferralsId;
        rDeferralsTrans.DeferralsBookId   = rDeferralsBookSource.DeferralsBookId;
        rDeferralsTrans.Amount            = rDeferralsBookSource.DeferralsAmount;

        rDeferralsBook                    = RDeferralsBook::find(rDeferralsBookSource.DeferralsId,
                                                                 rDeferralsBookSource.DeferralsBookId,
                                                                 true);

        return rDeferralsTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromDeferralsTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes transactions from <c>rDeferralsTransSource</c>.
    /// </summary>
    /// <returns><c>RDeferralsTrans</c> object.</returns>
    protected RDeferralsTrans initFromDeferralsTrans()
    {
        RDeferralsTrans   rDeferralsTrans;

        rDeferralsTrans.clear();
        rDeferralsTrans.data(rDeferralsTransSource);
        rDeferralsTrans.Amount = rDeferralsTrans.Amount;

        return rDeferralsTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>RDeferralsTrans</c> from ledger journal trans.
    /// </summary>
    /// <returns><c>RDeferralsTrans</c> object.</returns>
    protected RDeferralsTrans initFromLedgerJournalTrans()
    {
        RDeferralsTrans   rDeferralsTrans;

        rDeferralsTrans.clear();
        rDeferralsTrans.TransDate            = transDate;

        rDeferralsTrans.TransType            = ledgerJournalTrans_RDeferrals.TransType;
        rDeferralsTrans.DeferralsId          = ledgerJournalTrans_RDeferrals.DeferralsId;
        rDeferralsTrans.DeferralsBookId      = ledgerJournalTrans_RDeferrals.BookId;

        rDeferralsBook                       = RDeferralsBook::find(ledgerJournalTrans_RDeferrals.DeferralsId,
                                                                    ledgerJournalTrans_RDeferrals.BookId,
                                                                    true);

        rDeferralsTrans.Txt                   = ledgerJournalTrans.Txt;

        rDeferralsTrans.LedgerDimension       = LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerJournalTrans_RDeferrals.LedgerDimension, ledgerJournalTrans.DefaultDimension);
        rDeferralsTrans.OffsetAccountType     = ledgerJournalTrans.OffsetAccountType;
        rDeferralsTrans.OffsetLedgerDimension = ledgerJournalTrans.OffsetLedgerDimension;
        rDeferralsTrans.TaxGroup              = ledgerJournalTrans.TaxGroup;
        rDeferralsTrans.TaxItemGroup          = ledgerJournalTrans.TaxItemGroup;

        return rDeferralsTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets initial values.
    /// </summary>
    /// <param name = "_common">Table identificator.</param>
    /// <param name = "_ledgerVoucher">Voucher.</param>
    /// <param name = "_correct">Is correcting or not.</param>
    public void new(Common _common, LedgerVoucher _ledgerVoucher, boolean _correct = false)
    {
        common = _common;
        switch (_common.TableId)
        {
            case tableNum(LedgerJournalTrans):
                ledgerJournalTrans = _common;
                ledgerJournalTrans_RDeferrals = LedgerJournalTrans_RDeferrals::find(ledgerJournalTrans.RecId);
                correct = ledgerJournalTrans_RDeferrals.CorrectedPeriod != dateNull();
                accountingDate = _ledgerVoucher.lastTransDate();
                if (correct)
                {
                    transDate = ledgerJournalTrans_RDeferrals.CorrectedPeriod;
                }
                break;
            case tablenum(RDeferralsBook):
                rDeferralsBookSource = _common;
                correct = _correct;
                if (correct)
                {
                    transDate = rDeferralsBookSource.TransDate;
                    accountingDate = _ledgerVoucher.lastTransDate();
                }
                break;
            case tablenum(RDeferralsTrans):
                rDeferralsTransSource = _common;
                break;
        }

        ledgerVoucher = _ledgerVoucher;
        transDate     = correct ? transDate : ledgerVoucher.lastTransDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerAccount</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount parmLedgerAccount(LedgerDimensionDefaultAccount _ledgerAccount = ledgerDefaultAccount)
    {
        ledgerDefaultAccount = _ledgerAccount;

        return ledgerDefaultAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerAccountOffset</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount parmLedgerAccountOffset(LedgerDimensionDefaultAccount _ledgerAccount = ledgerDefaultAccountOffset)
    {
        ledgerDefaultAccountOffset = _ledgerAccount;

        return ledgerDefaultAccountOffset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts journal.
    /// </summary>
    public void post()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates deferral book status.
    /// </summary>
    public void updateStatus()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RDeferralsPost construct(Common              _common,
                                           LedgerVoucher       _ledgerVoucher,
                                           RDeferralsTransType _transType,
                                           boolean             _correct = false)
    {
        switch (_transType)
        {
            case RDeferralsTransType::WritingOff:
                return new RDeferralsPost_Depreciation(_common, _ledgerVoucher, _correct);

            case RDeferralsTransType::Retired:
                return new RDeferralsPost_Retirement(_common, _ledgerVoucher, _correct);

            case RDeferralsTransType::Receipt:
                return new RDeferralsPost_Receipt(_common, _ledgerVoucher, _correct);
        }
        return new RDeferralsPost(_common, _ledgerVoucher, _correct);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates link between original deferrals operation and correction.
    /// </summary>
    /// <param name="_rDeferralsTrans">
    /// The current deferrals operation.
    /// </param>
    protected void createTransLink(RDeferralsTrans _rDeferralsTrans)
    {
        TransLinkCorrection_RU transLinkCorrection;

        if (correct)
        {
            transLinkCorrection = TransLinkCorrection_RU::construct(_rDeferralsTrans);
            transLinkCorrection.createTransLink(accountingDate);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>