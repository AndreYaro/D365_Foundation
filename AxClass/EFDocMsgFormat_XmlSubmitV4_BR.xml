<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocMsgFormat_XmlSubmitV4_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
class EFDocMsgFormat_XmlSubmitV4_BR extends EFDocMsgFormat_XmlSubmitV3_BR
{
    private Amount vICMSDesonTotal;
    private int linesCount;
    protected Amount totalIcmsPovertyFundAmount;
    protected Amount totalIcmsStPovertyFundAmount;
    protected Amount totalIcmsStRetPovertyFundAmount;
    protected Amount taxTransferAmount;
    private NoYesUnchanged allowvICMSDeson;
    private TaxAmount suframaDiscount;
    private FiscalEstablishment_BR fiscalEstablishment;
    private NoYesUnchanged isSalesIntermediaryInformationApplicable;
    private TaxAmount nonRecoverableNotIncludedIPITaxAmount, vICMSUFDestTotal, vICMSUFRemetTotal;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add_infIntermed_Element</Name>
				<Source><![CDATA[
    protected void add_infIntermed_Element(XmlElement _infNFeElement)
    {
        if (fiscalDocument.thirdPartySalesDigitalPlatform() == NoYes::Yes
            && FiscalDocumentHelper::checkIfThirdPartySalesDigitalPlatformApplicable(
                fiscalDocument.direction(),
                this.isSalesIntermediaryInformationApplicable(),
                fiscalDocument.presenceType()))
        {
            XmlElement infIntermedElement = this.createElement('infIntermed');
            infIntermedElement.appendChild(this.createElementWithValue('CNPJ', this.formatKeepNumbersOnly(fiscalDocument.thirdPartySalesDigitalPlatformCNPJ())));
            infIntermedElement.appendChild(this.createElementWithValue('idCadIntTran', fiscalDocument.thirdPartySalesDigitalPlatformSalesResponsible()));
            _infNFeElement.appendChild(infIntermedElement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>add_pag_Element</Name>
				<Source><![CDATA[
    protected void add_pag_Element(XmlElement _infNFeElement)
    {
        XmlElement pagElement;
        XmlElement detPagElement;
        
        pagElement = this.createElement('pag');
        detPagElement = this.createElement('detPag');

        str paymTerms = fiscalDocument.paymTerms();
        if (paymTerms == '1' || paymTerms == '0')
        {
            detPagElement.appendChild(this.createElementWithValue('indPag', paymTerms));
        }

        EFDocPaymentMethod_BR paymentMethod = fiscalDocument.paymentMethod() ? fiscalDocument.paymentMethod() :
            EFDocPaymentMethod_BR::NoPayment;

        str tPagValue = num2Str0(paymentMethod, 2);
        detPagElement.appendChild(this.createElementWithValue('tPag', tPagValue));

        if (paymentMethod == EFDocPaymentMethod_BR::Other
            && fiscalEstablishment.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2020006v120))
        {
            detPagElement.appendChild(this.createElementWithValue('xPag', SysLabel::labelId2String2(literalStr("@NFE:Other"), EFDocConstants_BR::PortugueseLanguageId)));
        }

        str vPagValue = tPagValue != '90' ? this.formatXmlAmount(fiscalDocument.paymentAmount()) : '0.00';
        detPagElement.appendChild(this.createElementWithValue('vPag', vPagValue));

        if (fiscalDocument.thirdPartySalesDigitalPlatform() == NoYes::Yes
            && FiscalDocumentHelper::checkIfThirdPartySalesDigitalPlatformApplicable(
                fiscalDocument.direction(),
                fiscalEstablishment.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2020006v100),
                fiscalDocument.presenceType()))
        {
            this.appendChildIfNotEmpty(detPagElement, this.create_card_Element());
        }

        pagElement.appendChild(detPagElement);

        this.addVTrocoElement(pagElement, _infNFeElement, vPagValue);

        _infNFeElement.appendChild(pagElement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPresumedCreditAllowed</Name>
				<Source><![CDATA[
    protected boolean isPresumedCreditAllowed(container validTaxCodes, TaxationCode_BR taxCode)
    {
        return conFind(validTaxCodes, taxCode)
            && BrazilParameters::find().ICMSPresumedCredit == NoYes::Yes
            && FBParametersPerState_BR::find(fiscalEstablishment.postalAddress()).PresumedCredit == NoYes::Yes
            && fiscalEstablishment.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2019001v160);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addVTrocoElement</Name>
				<Source><![CDATA[
    private void addVTrocoElement(XmlElement _pagElement, XmlElement _infNFeElement, str _vPagValue)
    {
        real vPagAmount = str2Num(_vPagValue);
        real vNFAmount = this.getVNFAmount(_infNFeElement);

        if (vPagAmount > vNFAmount)
        {
            _pagElement.appendChild(this.createElementWithValue('vTroco', this.formatXmlAmount(vPagAmount - vNFAmount)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVNFAmount</Name>
				<Source><![CDATA[
    private real getVNFAmount(XmlElement _infNFeElement)
    {
        XmlElement vNF = this.getChildElementByTagName(
                            this.getChildElementByTagName(
                                this.getChildElementByTagName(_infNFeElement, 'total'), 
                            'ICMSTot'), 
                         'vNF');

        return vNF ? str2Num(vNF.innerText()) : 0.00;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChildElementByTagName</Name>
				<Source><![CDATA[
    private XmlElement getChildElementByTagName(XmlElement _parentElement, str _childTag)
    {
        XmlElement child;

        if (_parentElement)
        {
            XmlNodeList childList = _parentElement.getElementsByTagName(_childTag);
            if (childList && childList.length() > 0)
            {
                child = childList.item(0);
            }
        }

        return child;
    }

]]></Source>
			</Method>
			<Method>
				<Name>add_DesonElements</Name>
				<Source><![CDATA[
    private void add_DesonElements(
        XmlElement _xmlElement,
        TaxAmount _amount,
        TaxType_BR _taxType)
    {
        if (_amount && this.allow_vICMSDeson())
        {
            str valueTagName, motTagName;

            switch (_taxType)
            {
                case TaxType_BR::ICMS:
                    vICMSDesonTotal += _amount;
                    valueTagName = 'vICMSDeson';
                    motTagName = 'motDesICMS';
                    break;

                case TaxType_BR::ICMSST:
                    valueTagName = 'vICMSSTDeson';
                    motTagName = 'motDesICMSST';
                    break;

                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
            
            _xmlElement.appendChild(this.createElementWithValue(valueTagName, this.formatXmlAmount(_amount)));
            _xmlElement.appendChild(this.createElementWithValue(motTagName, EFDocConstants_BR::DefaultMotDesICMS));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTelemetry</Name>
				<Source><![CDATA[
    private void addTelemetry(System.Diagnostics.Stopwatch _stopwatch, boolean _status, str _funcName)
    {
        _stopwatch.Stop();
        int timePerLine = linesCount ? _stopwatch.ElapsedMilliseconds / linesCount : 0;
        GlobalizationInstrumentationHelper::featureRunWithPerformance(
                GlobalizationConstants::FeatureReferenceBR00053,
                _funcName,
                GlobalizationInstrumentationHelper::DefaultFeatureVersion,
                SysCountryRegionCode::countryInfo(),
                _stopwatch.ElapsedMilliseconds,
                false,
                _status,
                timePerLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>add_pMVAST</Name>
				<Source><![CDATA[
    private void add_pMVAST(XmlElement _xmlElement, EFiscalDocumentLineTax_BR _taxLine)
    {
        if (fiscalEstablishment.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2019001v100))
        {
            _xmlElement.appendChild(this.createElementWithValue('pMVAST', this.formatXmlAmount(_taxLine.tribSubstMarkupPct()) ));
        }
        else
        {
            this.appendChildIfNotEmpty(_xmlElement, this.createElementWithValue('pMVAST', this.formatXmlAmount(_taxLine.tribSubstMarkupPct()) ));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allow_vICMSDeson</Name>
				<Source><![CDATA[
    private boolean allow_vICMSDeson()
    {
        if (allowvICMSDeson == NoYesUnchanged::Unchanged)
        {
            LogisticsAddressStateId state = fiscalEstablishment.postalAddress().State;
            EFDocAuthorityState_BR efDocAuthorityState;
            LogisticsAddressState logisticsAddressState;

            select firstOnly RecId from efDocAuthorityState
                where efDocAuthorityState.AuthorityId == fiscalEstablishment.EFDocAuthority
                    && efDocAuthorityState.AddExempt == NoYes::Yes
            exists join logisticsAddressState
                where logisticsAddressState.RecId == efDocAuthorityState.LogisticsAddressState
                    && logisticsAddressState.StateId == state;

            allowvICMSDeson = efDocAuthorityState.RecId != 0 ? NoYesUnchanged::Yes : NoYesUnchanged::No;
        }

        return allowvICMSDeson == NoYesUnchanged::Yes ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertScaleIndicator2Str</Name>
				<Source><![CDATA[
    private str convertScaleIndicator2Str(ScaleIndicator_BR _scaleIndicator)
    {
        if (_scaleIndicator == ScaleIndicator_BR::Relevant)
        {
            return 'S';
        }
        else
        {
            return 'N';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertQty</Name>
				<Source><![CDATA[
    private Qty convertQty(
        ItemId _itemId,
        UnitOfMeasureSymbol _sourceUnit,
        UnitOfMeasureSymbol _targetUnit,
        Qty _qty)
    {
        Qty convertedQty;

        if (_sourceUnit != _targetUnit)
        {
            convertedQty = EcoResProductUnitConverter::convertForReleasedProduct(
                _itemId,
                InventTable::getInventDimId(_itemId),
                _qty,
                UnitOfMeasure::unitOfMeasureIdBySymbol(_sourceUnit),
                UnitOfMeasure::unitOfMeasureIdBySymbol(_targetUnit),
                NoYes::No,
                NoYes::No);
        }
        else
        {
            convertedQty = _qty;
        }

        return convertedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_card_Element</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns 'card' XML element.
    /// Extend this method in case of inegration with third party sales digital platform.
    /// </summary>
    /// <returns>
    /// 'card' XML element.
    /// </returns>
    protected XmlElement create_card_Element()
    {
        return this.createElement('card');
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_cobr_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_cobr_Element()
    {
        XmlElement                  cobrElement;
        XmlElement                  fatElement;
        XmlElement                  dupElement;
        ListEnumerator              enumerator;
        FiscalDocumentInstallment_BR   fiscalDocumentInstallment;
        Counter                     linenum;

        if (fiscalDocument.invoiceSpecie_BR() == FiscalDocumentSpecie_BR::NFF && fiscalDocument.fiscalDocument().TotalAmount)
        {
            cobrElement = this.createElement('cobr');
            fatElement = this.createElement('fat');
            this.appendChildIfNotEmpty(fatElement, this.createElementWithValue('nFat', fiscalDocument.fiscalDocument().FiscalDocumentNumber));
            fatElement.appendChild(this.createElementWithValue('vOrig', this.formatXmlAmount(abs(fiscalDocument.fiscalDocument().PaymentAmount)
                + abs(fiscalDocument.fiscalDocument().TotalDiscountAmount) - suframaDiscount)));
            fatElement.appendChild(this.createElementWithValue('vDesc', this.formatXmlAmount(fiscalDocument.fiscalDocument().TotalDiscountAmount)));
            fatElement.appendChild(this.createElementWithValue('vLiq', this.formatXmlAmount(abs(fiscalDocument.fiscalDocument().PaymentAmount) - suframaDiscount)));
            this.appendChildIfNotEmpty(cobrElement, fatElement);

            if (fiscalDocument.paymSchedList())
            {
                enumerator = fiscalDocument.paymSchedList().getEnumerator();
                while (enumerator.moveNext())
                {
                    linenum++;
                    fiscalDocumentInstallment = enumerator.current();

                    dupElement = this.createElement('dup');
                    this.appendChildIfNotEmpty(dupElement, this.createElementWithValue('nDup', this.get_nDup_value(fiscalDocumentInstallment.InstallmentNumber) ));
                    this.appendChildIfNotEmpty(dupElement, this.createElementWithValue('dVenc', this.formatXmlDate(fiscalDocumentInstallment.DueDate) ));
                    this.appendChildIfNotEmpty(dupElement, this.createElementWithValue('vDup', this.formatXmlAmount((fiscalDocumentInstallment.Amount) - suframaDiscount)));

                    this.appendChildIfNotEmpty(cobrElement, dupElement);
                }
            }
        }

        return cobrElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_entrega_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_entrega_Element()
    {
        if (fiscalEstablishment.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2018005v110))
        {
            XmlElement entregaElement = this.createElement('entrega');

            entregaElement.appendChild(this.createElementWithValue('CNPJ', this.formatKeepNumbersOnly(fiscalDocument.deliveryCNPJ()) ));
            this.appendChildIfNotEmpty(entregaElement, this.createElementWithValue('xNome', fiscalDocument.thirdPartyName()));
            entregaElement.appendChild(this.createElementWithValue('xLgr', fiscalDocument.deliveryAddressStreet()));
            entregaElement.appendChild(this.createElementWithValue('nro', fiscalDocument.deliveryAddressStreetNumber() ));
            this.appendChildIfNotEmpty(entregaElement, this.createElementWithValue('xCpl', fiscalDocument.deliveryAddressBuildingCompliment()));
            entregaElement.appendChild(this.createElementWithValue('xBairro', fiscalDocument.deliveryAddressDistrict() ));
            entregaElement.appendChild(this.createElementWithValue('cMun', fiscalDocument.deliveryCityIBGECode() ));
            entregaElement.appendChild(this.createElementWithValue('xMun', fiscalDocument.deliveryAddressCityName() ));
            entregaElement.appendChild(this.createElementWithValue('UF', fiscalDocument.deliveryAddressState() ));
            this.appendChildIfNotEmpty(entregaElement, this.createElementWithValue('CEP', this.formatFillLeft(fiscalDocument.deliveryZipCode(), 8)));
            this.appendChildIfNotEmpty(entregaElement, this.createElementWithValue('cPais', fiscalDocument.deliveryCountryCode() ));
            this.appendChildIfNotEmpty(entregaElement, this.createElementWithValue('xPais', fiscalDocument.deliveryCountryName() ));
            this.appendChildIfNotEmpty(entregaElement, this.createElementWithValue('fone', this.formatKeepNumbersOnly(fiscalDocument.thirdPartyPhone())));
            this.appendChildIfNotEmpty(entregaElement, this.createElementWithValue('email', fiscalDocument.thirdPartyEmail() ));
            this.appendChildIfNotEmpty(entregaElement, this.createElementWithValue('IE', fiscalDocument.deliveryIEnum() ));

            return entregaElement;
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCreateExportElement</Name>
				<Source><![CDATA[
    protected boolean checkCreateExportElement()
    {
        return fiscalDocument.direction() == FiscalDocDirection_BR::Outgoing && super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ICMS00_element</Name>
				<Source><![CDATA[
    protected XmlElement create_ICMS00_element(EFiscalDocumentLineTax_BR _taxLine)
    {
        Amount      taxPovertyFundAmount, taxPovertyFundPercentage, taxAmount;
        XmlElement  icms00Element = this.createElement('ICMS00');

        taxPovertyFundAmount        = _taxLine.taxPovertyFundAmount();
        taxPovertyFundPercentage    = _taxLine.taxPovertyFundPercentage();
        taxAmount = _taxLine.taxAmount();
 
        icms00Element.appendChild(this.createElementWithValue('orig', _taxLine.taxationOrigin() ));
        icms00Element.appendChild(this.createElementWithValue('CST', _taxLine.taxationCode() ));
        icms00Element.appendChild(this.createElementWithValue('modBC', #ICMSModBc ));
        icms00Element.appendChild(this.createElementWithValue('vBC', this.formatXmlAmount(_taxLine.taxBaseAmount()) ));
        icms00Element.appendChild(this.createElementWithValue('pICMS', this.formatXmlAmount(_taxLine.taxPct() - taxPovertyFundPercentage) ));
        icms00Element.appendChild(this.createElementWithValue('vICMS', this.formatXmlAmount(taxAmount ? taxAmount - taxPovertyFundAmount : 0) ));
 
        if (taxAmount && taxPovertyFundAmount)
        {
            totalIcmsPovertyFundAmount  += taxPovertyFundAmount;
 
            this.appendChildIfNotEmpty(icms00Element, this.createElementWithValue('pFCP', this.formatXmlAmount(taxPovertyFundPercentage)));
            this.appendChildIfNotEmpty(icms00Element, this.createElementWithValue('vFCP', this.formatXmlAmount(taxPovertyFundAmount)));
        }
        
        return icms00Element;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ICMS10_element</Name>
				<Source><![CDATA[
    protected XmlElement create_ICMS10_element(EFiscalDocumentLineTax_BR _taxLine)
    {
        Amount      tribSubstTaxPovertyFundAmount, tribSubstTaxPovertyFundPercentage, taxPovertyFundAmount, taxPovertyFundPercentage, taxAmount, tribSubstTaxAmount;
        XmlElement icms10Element = this.createElement('ICMS10');
 
        tribSubstTaxPovertyFundAmount = _taxLine.tribSubstTaxPovertyFundAmount();
        tribSubstTaxPovertyFundPercentage = _taxLine.tribSubstTaxPovertyFundPercentage();
        taxPovertyFundAmount = _taxLine.taxPovertyFundAmount();
        taxPovertyFundPercentage = _taxLine.taxPovertyFundPercentage();
        taxAmount = _taxLine.taxAmount();
        tribSubstTaxAmount = _taxLine.tribSubstTaxAmount();
 
        icms10Element.appendChild(this.createElementWithValue('orig', _taxLine.taxationOrigin() ));
        icms10Element.appendChild(this.createElementWithValue('CST', _taxLine.taxationCode() ));
        icms10Element.appendChild(this.createElementWithValue('modBC', #ICMSModBc ));
        icms10Element.appendChild(this.createElementWithValue('vBC', this.formatXmlAmount(_taxLine.taxBaseAmount()) ));
        icms10Element.appendChild(this.createElementWithValue('pICMS', this.formatXmlAmount(_taxLine.taxPct() - taxPovertyFundPercentage) ));
        icms10Element.appendChild(this.createElementWithValue('vICMS', this.formatXmlAmount(taxAmount ? taxAmount - taxPovertyFundAmount : 0) ));
 
        if (taxAmount && taxPovertyFundAmount)
        {
            totalIcmsPovertyFundAmount += taxPovertyFundAmount;
 
            icms10Element.appendChild(this.createElementWithValue('vBCFCP', this.formatXmlAmount(_taxLine.taxPovertyFundBaseAmount())));
            icms10Element.appendChild(this.createElementWithValue('pFCP', this.formatXmlAmount(taxPovertyFundPercentage)));
            icms10Element.appendChild(this.createElementWithValue('vFCP', this.formatXmlAmount(taxPovertyFundAmount)));
        }
 
        icms10Element.appendChild(this.createElementWithValue('modBCST', #ICMSSTModBc ));
        this.add_pMVAST(icms10Element, _taxLine);
        this.appendChildIfNotEmpty(icms10Element, this.createElementWithValue('pRedBCST', this.formatXmlAmount(_taxLine.tribSubstReductionPct()) ));
        icms10Element.appendChild(this.createElementWithValue('vBCST', this.formatXmlAmount(_taxLine.tribSubstTaxBaseAmount()) ));
        icms10Element.appendChild(this.createElementWithValue('pICMSST', this.formatXmlAmount(_taxLine.tribSubstTaxPct() - tribSubstTaxPovertyFundPercentage) ));
        icms10Element.appendChild(this.createElementWithValue('vICMSST', this.formatXmlAmount(tribSubstTaxAmount ? tribSubstTaxAmount - tribSubstTaxPovertyFundAmount : 0) ));
 
        if (tribSubstTaxPovertyFundAmount)
        {
            totalIcmsStPovertyFundAmount += tribSubstTaxPovertyFundAmount;
 
            icms10Element.appendChild(this.createElementWithValue('vBCFCPST', this.formatXmlAmount(_taxLine.tribSubstTaxPovertyFundBaseAmount())));
            icms10Element.appendChild(this.createElementWithValue('pFCPST', this.formatXmlAmount(tribSubstTaxPovertyFundPercentage)));
            icms10Element.appendChild(this.createElementWithValue('vFCPST', this.formatXmlAmount(tribSubstTaxPovertyFundAmount)));
        }

        if (fiscalEstablishment.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2020005v110))
        {
            this.add_DesonElements(
                icms10Element,
                this.roundAmount(_taxLine.tribSubstTaxAmountFromBaseAmount()),
                TaxType_BR::ICMSST);
        }

        return icms10Element;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ICMS20_element</Name>
				<Source><![CDATA[
    protected XmlElement create_ICMS20_element(EFiscalDocumentLineTax_BR _taxLine)
    {
        Amount      taxPovertyFundAmount, taxPovertyFundPercentage, taxAmount;
        XmlElement  icms20Element = this.createElement('ICMS20');
 
        taxPovertyFundAmount = _taxLine.taxPovertyFundAmount();
        taxPovertyFundPercentage = _taxLine.taxPovertyFundPercentage();
        taxAmount = _taxLine.taxAmount();
 
        icms20Element.appendChild(this.createElementWithValue('orig', _taxLine.taxationOrigin() ));
        icms20Element.appendChild(this.createElementWithValue('CST', _taxLine.taxationCode() ));
        icms20Element.appendChild(this.createElementWithValue('modBC', #ICMSModBc ));
        icms20Element.appendChild(this.createElementWithValue('pRedBC', this.formatXmlAmount(_taxLine.taxReductionPct()) ));
        icms20Element.appendChild(this.createElementWithValue('vBC', this.formatXmlAmount(_taxLine.taxBaseAmount()) ));
        icms20Element.appendChild(this.createElementWithValue('pICMS', this.formatXmlAmount(_taxLine.taxPct() - taxPovertyFundPercentage) ));
        icms20Element.appendChild(this.createElementWithValue('vICMS', this.formatXmlAmount(taxAmount ? taxAmount - taxPovertyFundAmount : 0) ));

        this.add_DesonElements(
            icms20Element,
            this.roundAmount(_taxLine.taxAmountFromBaseAmount()),
            TaxType_BR::ICMS);

        if (taxPovertyFundAmount)
        {
            totalIcmsPovertyFundAmount += taxPovertyFundAmount;
 
            icms20Element.appendChild(this.createElementWithValue('vBCFCP', this.formatXmlAmount(_taxLine.taxPovertyFundBaseAmount())));
            icms20Element.appendChild(this.createElementWithValue('pFCP', this.formatXmlAmount(taxPovertyFundPercentage)));
            icms20Element.appendChild(this.createElementWithValue('vFCP', this.formatXmlAmount(taxPovertyFundAmount)));
        }
        
        return icms20Element;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ICMS30_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_ICMS30_Element(EFiscalDocumentLine_BR _lineMap, EFiscalDocumentLineTax_BR _taxLine)
    {
        Amount      tribSubstTaxPovertyFundAmount, tribSubstTaxPovertyFundPercentage, tribSubstTaxAmount;
        XmlElement icms30Element = this.createElement('ICMS30');
 
        tribSubstTaxPovertyFundAmount = _taxLine.tribSubstTaxPovertyFundAmount();
        tribSubstTaxPovertyFundPercentage = _taxLine.tribSubstTaxPovertyFundPercentage();
        tribSubstTaxAmount = _taxLine.tribSubstTaxAmount();
 
        icms30Element.appendChild(this.createElementWithValue('orig', _taxLine.taxationOrigin() ));
        icms30Element.appendChild(this.createElementWithValue('CST', _taxLine.taxationCode() ));
        icms30Element.appendChild(this.createElementWithValue('modBCST', #ICMSSTModBc ));
        this.add_pMVAST(icms30Element, _taxLine);
        this.appendChildIfNotEmpty(icms30Element, this.createElementWithValue('pRedBCST', this.formatXmlAmount(_taxLine.tribSubstReductionPct()) ));
        icms30Element.appendChild(this.createElementWithValue('vBCST', this.formatXmlAmount(_taxLine.tribSubstTaxBaseAmount()) ));
        icms30Element.appendChild(this.createElementWithValue('pICMSST', this.formatXmlAmount(_taxLine.tribSubstTaxPct() - tribSubstTaxPovertyFundPercentage) ));
        icms30Element.appendChild(this.createElementWithValue('vICMSST', this.formatXmlAmount(tribSubstTaxAmount ? tribSubstTaxAmount - tribSubstTaxPovertyFundAmount : 0) ));
 
        if (fiscalDocument.deliverySuframaNumber() && _lineMap.suframaDiscountICMS())
        {
            Amount vICMSDeson = this.roundAmount(_lineMap.suframaDiscountICMS());
            vICMSDesonTotal += vICMSDeson;
            icms30Element.appendChild(this.createElementWithValue('vICMSDeson', this.formatXmlAmount(vICMSDeson)));
            icms30Element.appendChild(this.createElementWithValue('motDesICMS', EFDocConstants_BR::MotDesICMS_SUFRAMA));
        }
        else
        {
            this.add_DesonElements(
                icms30Element,
                this.roundAmount(_taxLine.taxAmountFromBaseAmount()),
                TaxType_BR::ICMS);
        }
 
        if (tribSubstTaxPovertyFundAmount)
        {
            totalIcmsStPovertyFundAmount += tribSubstTaxPovertyFundAmount;
 
            icms30Element.appendChild(this.createElementWithValue('vBCFCPST', this.formatXmlAmount(_taxLine.tribSubstTaxPovertyFundBaseAmount())));
            icms30Element.appendChild(this.createElementWithValue('pFCPST', this.formatXmlAmount(tribSubstTaxPovertyFundPercentage)));
            icms30Element.appendChild(this.createElementWithValue('vFCPST', this.formatXmlAmount(tribSubstTaxPovertyFundAmount)));
        }

        return icms30Element;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ICMS40_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_ICMS40_Element(EFiscalDocumentLine_BR _lineMap, EFiscalDocumentLineTax_BR _taxLine)
    {
        XmlElement icms40Element = this.createElement('ICMS40');

        icms40Element.appendChild(this.createElementWithValue('orig', _taxLine.taxationOrigin() ));
        icms40Element.appendChild(this.createElementWithValue('CST', _taxLine.taxationCode() ));

        if (fiscalEstablishment.checkExemptionICMSState(_taxLine.taxationCode()))
        {
            return icms40Element;
        }

        Amount vICMSDeson;

        if (fiscalDocument.deliverySuframaNumber() && _lineMap.suframaDiscountICMS())
        {
            vICMSDeson = this.roundAmount(_lineMap.suframaDiscountICMS());
            icms40Element.appendChild(this.createElementWithValue('vICMSDeson', this.formatXmlAmount(vICMSDeson)));
            icms40Element.appendChild(this.createElementWithValue('motDesICMS', EFDocConstants_BR::MotDesICMS_SUFRAMA));
        }
        else
        {
            TaxAmount taxAmountFromBaseAmount = _taxLine.taxAmountFromBaseAmount();
            if (taxAmountFromBaseAmount)
            {
                vICMSDeson = this.roundAmount(taxAmountFromBaseAmount);
                icms40Element.appendChild(this.createElementWithValue('vICMSDeson', this.formatXmlAmount(vICMSDeson)));

                if (_taxLine.taxExemptCode() == #ExemptCodeRequiredByAuthorityToInclude)
                {
                    icms40Element.appendChild(this.createElementWithValue('motDesICMS', _taxLine.taxExemptCode()));
                }
                else
                {
                    icms40Element.appendChild(this.createElementWithValue('motDesICMS', #DefaultMotDesICMS));
                }
            }
        }

        vICMSDesonTotal += vICMSDeson;

        return icms40Element;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ICMS51_element</Name>
				<Source><![CDATA[
    protected XmlElement create_ICMS51_element(EFiscalDocumentLineTax_BR _taxLine)
    {
        Amount      taxPovertyFundAmount, taxPovertyFundPercentage, taxAmount;
        XmlElement  icms51Element = this.createElement('ICMS51');
 
        taxPovertyFundAmount = _taxLine.taxPovertyFundAmount();
        taxPovertyFundPercentage = _taxLine.taxPovertyFundPercentage();
        taxAmount = _taxLine.taxAmount() + _taxLine.taxAmountOther();
        taxAmount = taxAmount ? taxAmount - taxPovertyFundAmount : 0;
 
        icms51Element.appendChild(this.createElementWithValue('orig', _taxLine.taxationOrigin()));
        icms51Element.appendChild(this.createElementWithValue('CST', _taxLine.taxationCode()));
        icms51Element.appendChild(this.createElementWithValue('modBC', #ICMSModBc));
        icms51Element.appendChild(this.createElementWithValue('pRedBC', this.formatXmlAmount(_taxLine.taxReductionPct())));
        
        if (EInvoicingPresumedCreditFlight_BR::instance().isEnabled())
        {
            FBFiscalDocumentTaxAdjustmentCode_BR benefitCode = _taxLine.benefitCode();
            if (benefitCode && this.isPresumedCreditAllowed(EFDocConstants_BR::CSTWithPresumedCreditBenefit, _taxLine.taxationCode()))
            {
                icms51Element.appendChild(this.createElementWithValue('cBenefRBC', benefitCode == FiscalBooksConstants_BR::NULO ? '' : benefitCode));
            }
        }

        icms51Element.appendChild(this.createElementWithValue('vBC', this.formatXmlAmount(_taxLine.taxBaseAmount() + _taxLine.taxBaseAmountOther())));
        icms51Element.appendChild(this.createElementWithValue('pICMS', this.formatXmlAmount(_taxLine.taxPct() - taxPovertyFundPercentage)));

        if (fiscalEstablishment.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2019001v110))
        {
            icms51Element.appendChild(this.createElementWithValue('vICMSOp', this.formatXmlAmount(taxAmount)));
            icms51Element.appendChild(this.createElementWithValue('pDif', this.formatXmlAmount(EFDocConstants_BR::Hundred1)));
            icms51Element.appendChild(this.createElementWithValue('vICMSDif', this.formatXmlAmount(taxAmount)));
        }

        icms51Element.appendChild(this.createElementWithValue('vICMS', this.formatXmlAmount(EFDocConstants_BR::Zero)));
 
        if (taxAmount && taxPovertyFundAmount)
        {
            totalIcmsPovertyFundAmount += taxPovertyFundAmount;
 
            icms51Element.appendChild(this.createElementWithValue('vBCFCP', this.formatXmlAmount(_taxLine.taxPovertyFundBaseAmount())));
            icms51Element.appendChild(this.createElementWithValue('pFCP', this.formatXmlAmount(taxPovertyFundPercentage)));
            icms51Element.appendChild(this.createElementWithValue('vFCP', this.formatXmlAmount(taxPovertyFundAmount)));
        }

        if (taxAmount && taxPovertyFundAmount && fiscalEstablishment.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2020005v110))
        {
            icms51Element.appendChild(this.createElementWithValue('pFCPDif', this.formatXmlAmount(EFDocConstants_BR::Hundred1)));
            icms51Element.appendChild(this.createElementWithValue('vFCPDif', this.formatXmlAmount(taxPovertyFundAmount)));
            icms51Element.appendChild(this.createElementWithValue('vFCPEfet', this.formatXmlAmount(EFDocConstants_BR::Zero)));
        }

        return icms51Element;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ICMS60_element</Name>
				<Source><![CDATA[
    protected XmlElement create_ICMS60_element(EFiscalDocumentLineTax_BR _taxLine)
    {
        Amount vFCPSTRet, vICMSSubstituto, vBCSTRet, vICMSSTRet, vBCFCPSTRet, vBCEfet, vICMSEfet;
        TaxValue pST, pFCPSTRet, pRedBCEfet, pICMSEfet;

        if (fiscalEstablishment.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2018005v120))
        {
            vBCSTRet = _taxLine.presumedICMSSTTaxBaseAmount();
            vICMSSTRet = _taxLine.presumedICMSSTTaxAmount();
            pST = _taxLine.presumedICMSSTTaxPercentage() + _taxLine.presumedFCPSTTaxPercentage();
            vICMSSubstituto = _taxLine.presumedICMSTaxAmount() - _taxLine.presumedFCPTaxAmount();
            vFCPSTRet = _taxLine.presumedFCPSTTaxAmount();

            if (vICMSSTRet && vFCPSTRet)
            {
                vBCFCPSTRet = _taxLine.presumedFCPSTTaxBaseAmount();
                pFCPSTRet = _taxLine.presumedFCPSTTaxPercentage();
                vICMSSTRet -= vFCPSTRet;
            }
        }
        else
        {
            vFCPSTRet = _taxLine.tribSubstTaxPovertyFundAmount();
 
            if (_taxLine.tribSubstTaxBaseAmount())
            {
                vBCSTRet =  _taxLine.tribSubstTaxBaseAmount();
                vICMSSTRet = _taxLine.tribSubstTaxAmount();
            }
            else
            {
                vBCSTRet =  _taxLine.tribSubstTaxBaseAmountOther();
                vICMSSTRet = _taxLine.tribSubstTaxAmountOther();
            }

            pST = vBCSTRet != 0 ? vICMSSTRet / vBCSTRet * 100 : 0;
            vICMSSubstituto = _taxLine.taxAmount() ? _taxLine.taxAmount() : _taxLine.taxAmountOther();

            if (vICMSSTRet && vFCPSTRet)
            {
                vBCFCPSTRet = _taxLine.tribSubstTaxPovertyFundBaseAmount();
                pFCPSTRet = _taxLine.tribSubstTaxPovertyFundPercentage();
            }

            pRedBCEfet = _taxLine.taxReductionPct();

            if (_taxLine.fiscalValue() == TaxFiscalValue_BR::WithCreditDebit)
            {
                vBCEfet = _taxLine.taxBaseAmount() - _taxLine.taxAmount();
            }
            else
            {
                vBCEfet = _taxLine.taxBaseAmountOther() - _taxLine.taxAmountOther();
            }

            pICMSEfet = _taxLine.taxPct();
            vICMSEfet = vBCEfet * pICMSEfet / 100;
        }

        XmlElement icms60Element = this.createElement('ICMS60');
        icms60Element.appendChild(this.createElementWithValue('orig', _taxLine.taxationOrigin()));
        icms60Element.appendChild(this.createElementWithValue('CST', _taxLine.taxationCode()));
        icms60Element.appendChild(this.createElementWithValue('vBCSTRet', this.formatXmlAmount(vBCSTRet)));
        icms60Element.appendChild(this.createElementWithValue('pST', this.formatXmlAmount(pST)));
        
        if (fiscalEstablishment.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2018005v120))
        {
            icms60Element.appendChild(this.createElementWithValue('vICMSSubstituto', this.formatXmlAmount(vICMSSubstituto)));
        }

        icms60Element.appendChild(this.createElementWithValue('vICMSSTRet', this.formatXmlAmount(vICMSSTRet)));
 
        if (vICMSSTRet && vFCPSTRet)
        {
            totalIcmsStRetPovertyFundAmount += vFCPSTRet;
 
            icms60Element.appendChild(this.createElementWithValue('vBCFCPSTRet', this.formatXmlAmount(vBCFCPSTRet)));
            icms60Element.appendChild(this.createElementWithValue('pFCPSTRet', this.formatXmlAmount(pFCPSTRet)));
            icms60Element.appendChild(this.createElementWithValue('vFCPSTRet', this.formatXmlAmount(vFCPSTRet)));
        }

        if (fiscalEstablishment.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2018005v120) && fiscalDocument.finalUser() == NoYes::Yes)
        {
            pRedBCEfet = _taxLine.taxReductionPct();
            vBCEfet = _taxLine.taxBaseAmountOther();
            pICMSEfet = _taxLine.taxPct();
            vICMSEfet = _taxLine.taxAmountOther() - _taxLine.taxPovertyFundAmount();

            icms60Element.appendChild(this.createElementWithValue('pRedBCEfet', this.formatXmlAmount(pRedBCEfet)));
            icms60Element.appendChild(this.createElementWithValue('vBCEfet', this.formatXmlAmount(vBCEfet)));
            icms60Element.appendChild(this.createElementWithValue('pICMSEfet', this.formatXmlAmount(pICMSEfet)));
            icms60Element.appendChild(this.createElementWithValue('vICMSEfet', this.formatXmlAmount(vICMSEfet)));
        }

        return icms60Element;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ICMS70_element</Name>
				<Source><![CDATA[
    protected XmlElement create_ICMS70_element(EFiscalDocumentLineTax_BR _taxLine)
    {
        Amount      tribSubstTaxPovertyFundAmount, tribSubstTaxPovertyFundPercentage, taxPovertyFundAmount, taxPovertyFundPercentage, taxAmount, tribSubstTaxAmount;
        XmlElement icms70Element = this.createElement('ICMS70');
 
        taxPovertyFundAmount = _taxLine.taxPovertyFundAmount();
        taxPovertyFundPercentage = _taxLine.taxPovertyFundPercentage();
        tribSubstTaxPovertyFundAmount = _taxLine.tribSubstTaxPovertyFundAmount();
        tribSubstTaxPovertyFundPercentage = _taxLine.tribSubstTaxPovertyFundPercentage();
        taxAmount = _taxLine.taxAmount();
        tribSubstTaxAmount = _taxLine.tribSubstTaxAmount();
 
        icms70Element.appendChild(this.createElementWithValue('orig', _taxLine.taxationOrigin() ));
        icms70Element.appendChild(this.createElementWithValue('CST', _taxLine.taxationCode() ));
        icms70Element.appendChild(this.createElementWithValue('modBC', #ICMSModBc ));
        icms70Element.appendChild(this.createElementWithValue('pRedBC', this.formatXmlAmount(_taxLine.taxReductionPct()) ));
        icms70Element.appendChild(this.createElementWithValue('vBC', this.formatXmlAmount(_taxLine.taxBaseAmount()) ));
        icms70Element.appendChild(this.createElementWithValue('pICMS', this.formatXmlAmount(_taxLine.taxPct() - taxPovertyFundPercentage) ));
        icms70Element.appendChild(this.createElementWithValue('vICMS', this.formatXmlAmount(taxAmount ? taxAmount - taxPovertyFundAmount : 0) ));

        this.add_DesonElements(
            icms70Element,
            this.roundAmount(_taxLine.taxAmountFromBaseAmount()),
            TaxType_BR::ICMS);

        if (taxAmount && taxPovertyFundAmount)
        {
            totalIcmsPovertyFundAmount += taxPovertyFundAmount;
 
            icms70Element.appendChild(this.createElementWithValue('vBCFCP', this.formatXmlAmount(_taxLine.taxPovertyFundBaseAmount())));
            icms70Element.appendChild(this.createElementWithValue('pFCP', this.formatXmlAmount(taxPovertyFundPercentage)));
            icms70Element.appendChild(this.createElementWithValue('vFCP', this.formatXmlAmount(taxPovertyFundAmount)));
        }
 
        icms70Element.appendChild(this.createElementWithValue('modBCST', #ICMSSTModBc ));
        this.add_pMVAST(icms70Element, _taxLine);
        this.appendChildIfNotEmpty(icms70Element, this.createElementWithValue('pRedBCST', this.formatXmlAmount(0) ));
        icms70Element.appendChild(this.createElementWithValue('vBCST', this.formatXmlAmount(_taxLine.tribSubstTaxBaseAmount()) ));
        icms70Element.appendChild(this.createElementWithValue('pICMSST', this.formatXmlAmount(_taxLine.tribSubstTaxPct() - tribSubstTaxPovertyFundPercentage) ));
        icms70Element.appendChild(this.createElementWithValue('vICMSST', this.formatXmlAmount(tribSubstTaxAmount ? tribSubstTaxAmount - tribSubstTaxPovertyFundAmount : 0) ));
 
        if (tribSubstTaxPovertyFundAmount)
        {
            totalIcmsStPovertyFundAmount += tribSubstTaxPovertyFundAmount;
 
            icms70Element.appendChild(this.createElementWithValue('vBCFCPST', this.formatXmlAmount(_taxLine.tribSubstTaxPovertyFundBaseAmount())));
            icms70Element.appendChild(this.createElementWithValue('pFCPST', this.formatXmlAmount(tribSubstTaxPovertyFundPercentage)));
            icms70Element.appendChild(this.createElementWithValue('vFCPST', this.formatXmlAmount(tribSubstTaxPovertyFundAmount)));
        }

        if (fiscalEstablishment.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2020005v110))
        {
            this.add_DesonElements(
                icms70Element,
                this.roundAmount(_taxLine.tribSubstTaxAmountFromBaseAmount()),
                TaxType_BR::ICMSST);
        }

        return icms70Element;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ICMS90_element</Name>
				<Source><![CDATA[
    protected XmlElement create_ICMS90_element(EFiscalDocumentLineTax_BR _taxLine)
    {
        Amount      taxPovertyFundAmount, taxPovertyFundPercentage, tribSubstTaxPovertyFundAmount, tribSubstTaxPovertyFundPercentage, taxAmount, tribSubstTaxAmount, taxBaseAmount;
        XmlElement icms90Element = this.createElement('ICMS90');
 
        tribSubstTaxPovertyFundAmount = _taxLine.tribSubstTaxPovertyFundAmount();
        tribSubstTaxPovertyFundPercentage = _taxLine.tribSubstTaxPovertyFundPercentage();
        taxPovertyFundAmount = _taxLine.taxPovertyFundAmount();
        taxPovertyFundPercentage = _taxLine.taxPovertyFundPercentage();
        tribSubstTaxAmount = _taxLine.tribSubstTaxAmount();

        TaxAmount directTaxAmount = _taxLine.taxAmount();
        TaxAmount indirectTaxAmount = _taxLine.taxAmountOther();

        if (_taxLine.isImporting())
        {
            taxAmount = directTaxAmount;
            taxBaseAmount = _taxLine.taxBaseAmount();
        }
        else
        {
            taxAmount = (directTaxAmount && indirectTaxAmount) ? directTaxAmount : directTaxAmount + indirectTaxAmount;
            taxBaseAmount = _taxLine.taxBaseAmount() + _taxLine.taxBaseAmountOther();
        }

        icms90Element.appendChild(this.createElementWithValue('orig', _taxLine.taxationOrigin() ));
        icms90Element.appendChild(this.createElementWithValue('CST', _taxLine.taxationCode() ));
        icms90Element.appendChild(this.createElementWithValue('modBC', #ICMSModBc ));
        icms90Element.appendChild(this.createElementWithValue('vBC', this.formatXmlAmount(taxBaseAmount)));
        this.appendChildIfNotEmpty(icms90Element,this.createElementWithValue('pRedBC', this.formatXmlAmount(_taxLine.taxReductionPct()) ));
        icms90Element.appendChild(this.createElementWithValue('pICMS', this.formatXmlAmount(_taxLine.taxPct() ? _taxLine.taxPct() - taxPovertyFundPercentage : 0)));
        icms90Element.appendChild(this.createElementWithValue('vICMS', this.formatXmlAmount(taxAmount ? taxAmount - taxPovertyFundAmount : 0)));
 
        if (taxAmount && taxPovertyFundAmount)
        {
            totalIcmsPovertyFundAmount += taxPovertyFundAmount;
 
            icms90Element.appendChild(this.createElementWithValue('vBCFCP', this.formatXmlAmount(_taxLine.taxPovertyFundBaseAmount())));
            icms90Element.appendChild(this.createElementWithValue('pFCP', this.formatXmlAmount(taxPovertyFundPercentage)));
            icms90Element.appendChild(this.createElementWithValue('vFCP', this.formatXmlAmount(taxPovertyFundAmount)));
        }
 
        icms90Element.appendChild(this.createElementWithValue('modBCST', #ICMSSTModBc ));
        this.add_pMVAST(icms90Element, _taxLine);
        this.appendChildIfNotEmpty(icms90Element, this.createElementWithValue('pRedBCST', this.formatXmlAmount(0) ));
        icms90Element.appendChild(this.createElementWithValue('vBCST', this.formatXmlAmount(_taxLine.tribSubstTaxBaseAmount()) ));
        icms90Element.appendChild(this.createElementWithValue('pICMSST', this.formatXmlAmount(_taxLine.tribSubstTaxPct() - tribSubstTaxPovertyFundPercentage) ));
        icms90Element.appendChild(this.createElementWithValue('vICMSST', this.formatXmlAmount(tribSubstTaxAmount ? tribSubstTaxAmount - tribSubstTaxPovertyFundAmount : 0) ));
 
        if (tribSubstTaxAmount && tribSubstTaxPovertyFundAmount)
        {
            totalIcmsStPovertyFundAmount += tribSubstTaxPovertyFundAmount;
 
            icms90Element.appendChild(this.createElementWithValue('vBCFCPST', this.formatXmlAmount(_taxLine.tribSubstTaxPovertyFundBaseAmount())));
            icms90Element.appendChild(this.createElementWithValue('pFCPST', this.formatXmlAmount(tribSubstTaxPovertyFundPercentage)));
            icms90Element.appendChild(this.createElementWithValue('vFCPST', this.formatXmlAmount(tribSubstTaxPovertyFundAmount)));
        }

        if (fiscalEstablishment.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2019001v120)
            && _taxLine.taxReductionPct())
        {
            this.add_DesonElements(
                icms90Element,
                this.roundAmount(_taxLine.taxAmountFromBaseAmount()),
                TaxType_BR::ICMS);
        }

        if (fiscalEstablishment.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2020005v110))
        {
            this.add_DesonElements(
                icms90Element,
                this.roundAmount(_taxLine.tribSubstTaxAmountFromBaseAmount()),
                TaxType_BR::ICMSST);
        }

        return icms90Element;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ICMSUF_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_ICMSUF_Element(EFiscalDocumentLine_BR _lineMap)
    {
        XmlElement                  icmsElement;
        FiscalDocumentDate_BR       fiscalDocumentDate;
        EFiscalDocumentLineTax_BR   taxLine = _lineMap.getTaxLine(TaxType_BR::ICMS, '');
        EFiscalDocumentLineTax_BR   diffTaxLine = _lineMap.getTaxLine(TaxType_BR::ICMSDiff, '');
        TaxValue                    pFCPUF, vFCPUF;

        if (this.isExemptOrImmuneTaxCode(taxLine.taxationCode()))
        {
            return null;
        }

        switch (fiscalDocument.fiscalDocument().RefTableId)
        {
            case tablenum(CustInvoiceJour):
                fiscalDocumentDate = this.getDocumentDate(fiscalDocument.fiscalDocument());
                break;
            
            case tableNum(SalesComplementaryInvoiceHeader):
                fiscalDocumentDate = this.getDocumentDate(FiscalDocument_BR::find(fiscalDocument.fiscalDocument().ComplementedFiscalDocument));
                break;

            default:
                break;
        }

        if (!fiscalDocumentDate)
        {
            fiscalDocumentDate = fiscalDocument.fiscalDocument().FiscalDocumentDate;
        }

        icmsElement = this.createElement('ICMSUFDest');
        
        icmsElement.appendChild(this.createElementWithValue('vBCUFDest', this.formatXmlAmount(diffTaxLine.taxBaseAmount() + diffTaxLine.taxBaseAmountOther())));
        this.appendChildIfNotEmpty(icmsElement, this.createElementWithValue('vBCFCPUFDest', this.formatXmlAmount(diffTaxLine.taxPovertyFundBaseAmount())));
        pFCPUF = diffTaxLine.taxPovertyFundPercentage();

        if (pFCPUF)
        {
            icmsElement.appendChild(this.createElementWithValue('pFCPUFDest', this.formatXmlAmount(pFCPUF)));
        }

        TaxValue pICMSUFDest;

        if (FeatureStateProvider::isFeatureEnabled(TaxCalculationDualBaseForARFeature_BR::instance())
            && diffTaxLine.isDualBase())
        {
            pICMSUFDest = diffTaxLine.taxPct() - pFCPUF;
        }
        else
        {
            pICMSUFDest = taxLine.taxPct() + diffTaxLine.taxPct() - pFCPUF;
        }

        icmsElement.appendChild(this.createElementWithValue('pICMSUFDest', this.formatXmlAmount(pICMSUFDest)));
        icmsElement.appendChild(this.createElementWithValue('pICMSInter', this.formatXmlAmount(taxLine.taxPct())));
        TaxValue pICMSInterPart = FiscalDocumentTaxTransOutgoingICMSDif_BR::icmsDiffRecipientPct(fiscalDocumentDate);
        icmsElement.appendChild(this.createElementWithValue('pICMSInterPart', this.formatXmlAmount(pICMSInterPart)));

        if (pFCPUF)
        {
            vFCPUF = diffTaxLine.taxPovertyFundAmount();
            icmsElement.appendChild(this.createElementWithValue('vFCPUFDest', this.formatXmlAmount(vFCPUF)));
        }

        Amount vICMSUFDest, vICMSUFRemet;

        if (diffTaxLine.taxationCode() == EFDocConstants_BR::CST00
            && fiscalEstablishment.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2020005v110))
        {
            Amount amontDifference = (diffTaxLine.taxBaseAmount() * pICMSUFDest / 100) - (taxLine.taxBaseAmount() * (taxLine.taxPct() - taxLine.taxPovertyFundPercentage()) / 100);
            vICMSUFDest = (diffTaxLine.icmsDifRecipientTaxAmount() == amontDifference * pICMSInterPart / 100) || (diffTaxLine.icmsDifRecipientTaxAmount() > 0)
                ? diffTaxLine.icmsDifRecipientTaxAmount() : EFDocConstants_BR::Zero;
            vICMSUFRemet = diffTaxLine.icmsDifIssuerTaxAmount() == amontDifference - vICMSUFDest || diffTaxLine.icmsDifIssuerTaxAmount() > 0
                ? diffTaxLine.icmsDifIssuerTaxAmount() : EFDocConstants_BR::Zero;
        }
        else
        {
            vICMSUFDest = diffTaxLine.icmsDifRecipientTaxAmount();
            vICMSUFRemet = diffTaxLine.icmsDifIssuerTaxAmount();
        }

        vICMSUFDestTotal += vICMSUFDest;
        vICMSUFRemetTotal += vICMSUFRemet;

        icmsElement.appendChild(this.createElementWithValue('vICMSUFDest', this.formatXmlAmount(vICMSUFDest)));
        icmsElement.appendChild(this.createElementWithValue('vICMSUFRemet', this.formatXmlAmount(vICMSUFRemet)));
        
        return icmsElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ide_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_ide_Element()
    {
        XmlElement ideElement;

        ideElement = this.createElement('ide');
        ideElement.appendChild(this.createElementWithValue('cUF', substr(fiscalDocument.issuerIBGECode(), 1, 2)));
        ideElement.appendChild(this.createElementWithValue('cNF', this.formatFillLeft(int2str(fiscalDocument.numericCode()), 8)));
        ideElement.appendChild(this.createElementWithValue('natOp', fiscalDocument.fiscalDocument().OperationDescription));
        ideElement.appendChild(this.createElementWithValue('mod',  fiscalDocument.fiscalDocument().Model));
        ideElement.appendChild(this.createElementWithValue('serie', this.formatStr2Int(fiscalDocument.fiscalDocument().FiscalDocumentSeries)));
        ideElement.appendChild(this.createElementWithValue('nNF', this.formatStr2Int(fiscalDocument.fiscalDocument().FiscalDocumentNumber)));
        ideElement.appendChild(this.createElementWithValue('dhEmi', fiscalDocument.getFiscalDocIssueDateTimeWithTimeZone()));
        ideElement.appendChild(this.createElementWithValue('dhSaiEnt', fiscalDocument.getFiscalDocOutboundDateTimeWithTimeZone()));
        ideElement.appendChild(this.createElementWithValue('tpNF', fiscalDocument.inventoryDirection()));
        ideElement.appendChild(this.createElementWithValue('idDest', int2str(fiscalDocument.getOperationLocation())));
        ideElement.appendChild(this.createElementWithValue('cMunFG', fiscalDocument.issuerIBGECode()));
        ideElement.appendChild(this.createElementWithValue('tpImp', '1'));
        ideElement.appendChild(this.createElementWithValue('tpEmis', int2str(enum2int(fiscalDocument.contingencyMode()))));
        ideElement.appendChild(this.createElementWithValue('cDV', substr(fiscalDocument.accessKey(), strlen(fiscalDocument.accessKey()), 1)));
        ideElement.appendChild(this.createElementWithValue('tpAmb', fiscalEstablishment.EFDocEnvironment == EFDocEnvironment_BR::Production ? '1' : '2'));
        ideElement.appendChild(this.createElementWithValue('finNFe', this.getFiscalDocumentPurpose()));
        ideElement.appendChild(this.createElementWithValue('indFinal', int2str(fiscalDocument.finalUser())));
        ideElement.appendChild(this.createElementWithValue('indPres', int2str(fiscalDocument.presenceType())));

        if (this.isSalesIntermediaryInformationApplicable())
        {
            ideElement.appendChild(this.createElementWithValue('indIntermed', fiscaldocument.thirdPartySalesDigitalPlatform() == NoYes::No ? '0' : '1'));
        }

        ideElement.appendChild(this.createElementWithValue('procEmi', '0'));
        ideElement.appendChild(this.createElementWithValue('verProc', substr(ApplicationVersion::applBuildNo(), 1, 20)));
        
        this.appendChildIfNotEmpty(ideElement, this.createElementWithValue('dhCont', fiscalDocument.contingencyDateTime()));
        this.appendChildIfNotEmpty(ideElement, this.createElementWithValue('xJust', fiscalDocument.contingencyReason()));
        
        this.create_NFref_Element(ideElement);
        
        return ideElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_imposto_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_imposto_Element(EFiscalDocumentLine_BR _lineMap)
    {
        XmlElement impostoElement;
        
        impostoElement = this.createElement('imposto');
        
        this.appendChildIfNotEmpty(impostoElement, this.create_vTotTrib_Element(_lineMap));
        
        if (!this.hasISS(_lineMap))
        {
            impostoElement.appendChild(this.create_ICMS_Element(_lineMap));
            this.appendChildIfNotEmpty(impostoElement, this.create_IPI_Element(_lineMap));
            this.appendChildIfNotEmpty(impostoElement, this.create_II_Element(_lineMap));
        }
        else
        {
            this.appendChildIfNotEmpty(impostoElement, this.create_ISSQN_Element(_lineMap));
        }
        
        this.appendChildIfNotEmpty(impostoElement, this.create_PIS_Element(_lineMap));
        this.appendChildIfNotEmpty(impostoElement, this.create_COFINS_Element(_lineMap));
        
        if (fiscalDocument.hasIcmsDif())
        {
            this.appendChildIfNotEmpty(impostoElement, this.create_ICMSUF_Element(_lineMap));
        }
        
        return impostoElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_infRespTec_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_infRespTec_Element()
    {
        XmlElement infRespTec;

        BrazilParameters brazilParameters = BrazilParameters::find();

        if (fiscalEstablishment.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2018005v120)
            && fiscalEstablishment.TechnicalResponsibleCNPJ
            && fiscalEstablishment.TechnicalResponsibleContactName
            && fiscalEstablishment.TechnicalResponsibleEmail
            && fiscalEstablishment.TechnicalResponsiblePhone)
        {
            infRespTec = this.createElement('infRespTec');
            infRespTec.appendChild(this.createElementWithValue('CNPJ', fiscalEstablishment.TechnicalResponsibleCNPJ));
            infRespTec.appendChild(this.createElementWithValue('xContato', fiscalEstablishment.TechnicalResponsibleContactName));
            infRespTec.appendChild(this.createElementWithValue('email', fiscalEstablishment.TechnicalResponsibleEmail));
            infRespTec.appendChild(this.createElementWithValue('fone', fiscalEstablishment.TechnicalResponsiblePhone));
            TechnicalResponsibleCSRT_BR csrt = fiscalEstablishment.getTechnicalResponsibleCSRT();
            if (csrt
                && fiscalEstablishment.TechnicalResponsibleIdCSRT
                && fiscalDocument.accessKey())
            {
                infRespTec.appendChild(this.createElementWithValue('idCSRT', fiscalEstablishment.TechnicalResponsibleIdCSRT));
                System.Byte[] bytes = System.Text.Encoding::UTF8.GetBytes(csrt + fiscalDocument.accessKey());
                bytes = System.Security.Cryptography.SHA1::Create().ComputeHash(bytes);
                infRespTec.appendChild(this.createElementWithValue('hashCSRT', System.Convert::ToBase64String(bytes)));
            }
        }
        else if(fiscalEstablishment.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2018005v110)
            && brazilParameters.TechnicalResponsibleCNPJ
            && brazilParameters.TechnicalResponsibleContactName
            && brazilParameters.TechnicalResponsibleEmail
            && brazilParameters.TechnicalResponsiblePhone)
        {
            infRespTec = this.createElement('infRespTec');
            infRespTec.appendChild(this.createElementWithValue('CNPJ', brazilParameters.TechnicalResponsibleCNPJ));
            infRespTec.appendChild(this.createElementWithValue('xContato', brazilParameters.TechnicalResponsibleContactName));
            infRespTec.appendChild(this.createElementWithValue('email', brazilParameters.TechnicalResponsibleEmail));
            infRespTec.appendChild(this.createElementWithValue('fone', brazilParameters.TechnicalResponsiblePhone));
            if (brazilParameters.TechnicalResponsibleCSRT
                && brazilParameters.TechnicalResponsibleIdCSRT
                && fiscalDocument.accessKey())
            {
                infRespTec.appendChild(this.createElementWithValue('idCSRT', brazilParameters.TechnicalResponsibleIdCSRT));
                System.Byte[] bytes = System.Text.Encoding::UTF8.GetBytes(brazilParameters.TechnicalResponsibleCSRT + fiscalDocument.accessKey());
                bytes = System.Security.Cryptography.SHA1::Create().ComputeHash(bytes);
                infRespTec.appendChild(this.createElementWithValue('hashCSRT', System.Convert::ToBase64String(bytes)));
            }
        }

        return infRespTec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_procRef_Elements</Name>
				<Source><![CDATA[
    protected XmlElement create_procRef_Elements(XmlElement _infAdicElement)
    {
        ListEnumerator processReferenceEnumerator = fiscalDocument.referencedProcessList().getEnumerator();

        while (processReferenceEnumerator.moveNext())
        {
            FiscalDocumentRefProcessParmData_BR referencedProcess = processReferenceEnumerator.current();
            XmlElement procRefElement = this.createElement('procRef');
            procRefElement.appendChild(this.createElementWithValue('nProc', referencedProcess.parmProcessNumber()));
            procRefElement.appendChild(this.createElementWithValue('indProc', int2str(referencedProcess.parmAgency() == Agency_BR::Sefaz
                ? 0 //For NF-e SEFAZ must be 0 instead of default enum value
                : enum2int(referencedProcess.parmAgency()))));

            if (referencedProcess.parmAgency() == Agency_BR::Sefaz
                && fiscalEstablishment.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2021004v100))
            {
                procRefElement.appendChild(this.createElementWithValue('tpAto', this.formatFillLeft(int2Str(referencedProcess.parmConcessionaryActType()), 2)));
            }

            _infAdicElement.appendChild(procRefElement);
        }

        return _infAdicElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_prod_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_prod_Element(EFiscalDocumentLine_BR _line)
    {
        #define.GTINCodeDefault('SEM GTIN')

        XmlElement prodElement;
        real       unitPrice;
        EFiscalDocumentLineTax_BR   taxLine;
        TaxAmount   vOutroAmount;
        TaxSubstitutionCode_BR cest;

        DiscAmount discountWithoutSuframaICMS = abs(_line.lineDiscount() - abs(_line.suframaDiscountICMS()));

        if (_line.fiscalDocumentLine().Quantity)
        {
            unitPrice = _line.fiscalDocumentLine().LineAmount / _line.fiscalDocumentLine().Quantity;
        }

        prodElement = this.createElement('prod');

        prodElement.appendChild(this.createElementWithValue('cProd', _line.itemId()));
        str cEAN = _line.GTINCodeForCWOrTaxableUnit() != '' ? _line.GTINCodeForCWOrTaxableUnit() : #GTINCodeDefault;
        prodElement.appendChild(this.createElementWithValue('cEAN', cEAN));
        prodElement.appendChild(this.createElementWithValue('xProd', this.formatStringLength(_line.fiscalDocumentLine().Description, 120)));
        prodElement.appendChild(this.createElementWithValue('NCM', this.formatKeepNumbersOnly(_line.fiscalDocumentLine().FiscalClassification ? _line.fiscalDocumentLine().FiscalClassification: #NCMDefault)));
        cest = this.formatKeepNumbersOnly(_line.fiscalDocumentLine().TaxSubstitutionCode);
        if (cest)
        {
            prodElement.appendChild(this.createElementWithValue('CEST', cest));
            prodElement.appendChild(this.createElementWithValue('indEscala', this.convertScaleIndicator2Str(_line.scaleIndicator())));
            if (_line.scaleIndicator() == ScaleIndicator_BR::NotRelevant)
            {
                prodElement.appendChild(this.createElementWithValue('CNPJFab', this.formatKeepNumbersOnly(_line.CNPJ())));
            }
        }

        FBFiscalDocumentTaxAdjustmentCode_BR benefitCode = _line.benefitCode();
        if (benefitCode)
        {
            taxLine = _line.getTaxLine(TaxType_BR::ICMS, '');

            if(fiscalEstablishment.checkExemptionICMSState(taxLine.taxationCode()) == false)
            {
                if (fiscalEstablishment.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2019001v110))
                {
                    if (TaxBenefitCodeTaxationCodes_BR::isBenefitCodeValidForTaxactionCode(benefitCode, taxLine.taxationCode()))
                    {
                        prodElement.appendChild(this.createElementWithValue('cBenef', benefitCode == FiscalBooksConstants_BR::NULO ? '' : benefitCode));
                    }
                }
                else if (fiscalEstablishment.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2019001v100))
                {
                    if (conFind(EFDocConstants_BR::CSTWithTaxBenefit, taxLine.taxationCode()))
                    {
                        prodElement.appendChild(this.createElementWithValue('cBenef', benefitCode));
                    }
                }
                else
                {
                    prodElement.appendChild(this.createElementWithValue('cBenef', benefitCode));
                }
            }
            if (EInvoicingPresumedCreditFlight_BR::instance().isEnabled()
                && this.isPresumedCreditAllowed(EFDocConstants_BR::CSTWithPresumedCredit, taxLine.taxationCode()))
            {
                XmlElement gCredElement = this.createElement('gCred');
                gCredElement.appendChild(this.createElementWithValue('cCredPresumido', benefitCode == FiscalBooksConstants_BR::NULO ? '' : benefitCode));
                gCredElement.appendChild(this.createElementWithValue('pCredPresumido', this.formatXmlAmount(taxLine.taxPct())));
                gCredElement.appendChild(this.createElementWithValue('vCredPresumido', this.formatXmlAmount(_line.grossLineAmount() * taxLine.taxPct() / 100.0)));
                prodElement.appendChild(gCredElement);
            }
        }
        prodElement.appendChild(this.createElementWithValue('CFOP', this.formatKeepNumbersOnly(_line.fiscalDocumentLine().CFOP) ));
        prodElement.appendChild(this.createElementWithValue('uCom', _line.fiscalDocumentLine().Unit));
        prodElement.appendChild(this.createElementWithValue('qCom', this.formatXmlQty(_line.fiscalDocumentLine().Quantity) ));
        prodElement.appendChild(this.createElementWithValue('vUnCom', this.formatXmlAmount(unitPrice, 10)));
        
        if (fiscalDocument.purpose() != FiscalDocumentPurpose_BR::Adjustment)
        {
            prodElement.appendChild(this.createElementWithValue('vProd', this.formatXmlAmount(_line.grossLineAmount()) ));
        }
        else
        {
            taxTransferAmount = _line.getTaxLine(TaxType_BR::ICMS, '').taxAmount();
            prodElement.appendChild(this.createElementWithValue('vProd', this.formatXmlAmount(0)));
        }

        str cEANTrib = _line.GTINCode() != '' ? _line.GTINCode() : #GTINCodeDefault;
        prodElement.appendChild(this.createElementWithValue('cEANTrib', cEANTrib));
        prodElement.appendChild(this.createElementWithValue('uTrib', _line.fiscalDocumentLine().Unit));
        prodElement.appendChild(this.createElementWithValue('qTrib', this.formatXmlQty(_line.fiscalDocumentLine().Quantity) ));
        prodElement.appendChild(this.createElementWithValue('vUnTrib', this.formatXmlAmount(unitPrice, 10)));
        
        if (_line.totalFreightMarkupAmount() > 0)
        {
            this.appendChildIfNotEmpty(prodElement, this.createElementWithValue('vFrete', this.formatXmlAmount(_line.totalFreightMarkupAmount()) ));
        }
        
        if (_line.totalInsuranceMarkupAmount() > 0)
        {
            this.appendChildIfNotEmpty(prodElement, this.createElementWithValue('vSeg', this.formatXmlAmount(_line.totalInsuranceMarkupAmount()) ));
        }
        
        if (discountWithoutSuframaICMS > 0)
        {
            this.appendChildIfNotEmpty(prodElement, this.createElementWithValue('vDesc', this.formatXmlAmount(discountWithoutSuframaICMS)));
        }

        vOutroAmount = _line.totalOthersMarkupAmount();

        if (vOutroAmount && fiscalDocument.purpose() == FiscalDocumentPurpose_BR::Return)
        {
            EFiscalDocumentLineTax_BR ipiTax = _line.getTaxLine(TaxType_BR::IPI, '');

            if (!ipiTax.includedTax() && ipiTax.fiscalValue() == TaxFiscalValue_BR::WithoutCreditDebitOther)
            {
                nonRecoverableNotIncludedIPITaxAmount += ipiTax.taxAmountOther();
                vOutroAmount -= ipiTax.taxAmountOther();
            }
        }

        if (vOutroAmount > 0)
        {
            this.appendChildIfNotEmpty(prodElement, this.createElementWithValue('vOutro', this.formatXmlAmount(vOutroAmount)));
        }

        this.appendChildIfNotEmpty(prodElement, this.createElementWithValue('indTot', '1' ));
        
        if (fiscalDocument.PurchImportDeclaration())
        {
            prodElement.appendChild(this.create_di_Element(_line));
        }
        
        this.appendChildIfNotEmpty(prodElement, this.createElementWithValue('xPed', _line.custPurchaseOrder()));
        
        if(_line.custLineNumber() > 0)
        {
            this.appendChildIfNotEmpty(prodElement, this.createElementWithValue('nItemPed', this.formatInt2Str(_line.custLineNumber())));
        }
        
        this.appendChildIfNotEmpty(prodElement, this.createElementWithValue('nFCI', _line.fiscalDocumentLine().FCINumber));

        linesCount++;

        return prodElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_total_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_total_Element()
    {
        XmlElement  totalElement;
        XmlElement  icmsTotElement;
        XmlElement  issqnTotElement;
        XmlElement  retTribElement;

        totalElement = this.createElement('total');
        icmsTotElement = this.createElement('ICMSTot');

        Amount vBC;
        TaxAmount vICMS;

        if (fiscalEstablishment.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2018005v120))
        {
            vBC = fiscalDocument.getTaxAmountOrBaseAmountExcludingTaxCodes(true, TaxType_BR::ICMS, false, EFDocConstants_BR::CSTExcludedForTotalICMSBase);
            vICMS = fiscalDocument.getTaxAmountOrBaseAmountExcludingTaxCodes(false, TaxType_BR::ICMS, false, EFDocConstants_BR::CSTExcludedForTotalICMS);
        }
        else
        {
            vBC = fiscalDocument.taxBaseAmountExcludedTaxCodes(TaxType_BR::ICMS, false, ['40', '41', '50']);
            vICMS = fiscalDocument.taxAmount(TaxType_BR::ICMS);
        }

        icmsTotElement.appendChild(this.createElementWithValue('vBC', this.formatXmlAmount(vBC)));
        icmsTotElement.appendChild(this.createElementWithValue('vICMS', this.formatXmlAmount(vICMS ? vICMS - totalIcmsPovertyFundAmount : 0.00)));

        icmsTotElement.appendChild(this.createElementWithValue('vICMSDeson', this.formatXmlAmount(vICMSDesonTotal)));

        if (fiscalDocument.hasIcmsDif())
        {
            icmsTotElement.appendChild(this.createElementWithValue('vFCPUFDest', this.formatXmlAmount(fiscalDocument.taxPovertyFundAmount()) ));
            icmsTotElement.appendChild(this.createElementWithValue('vICMSUFDest', this.formatXmlAmount(vICMSUFDestTotal)));
            icmsTotElement.appendChild(this.createElementWithValue('vICMSUFRemet', this.formatXmlAmount(vICMSUFRemetTotal)));
        }

        icmsTotElement.appendChild(this.createElementWithValue('vFCP', this.formatXmlAmount(totalIcmsPovertyFundAmount)));

        Amount vBCST;
        TaxAmount vST;

        if (fiscalEstablishment.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2018005v120))
        {
            vBCST = fiscalDocument.taxBaseAmountExcludedTaxCodes(TaxType_BR::ICMS, true, EFDocConstants_BR::CSTExcludedForTotalICMSSTBase);
            vST = fiscalDocument.taxAmountExcludedTaxCodes(TaxType_BR::ICMS, true, EFDocConstants_BR::CSTExcludedForTotalICMSST);
        }
        else
        {
            vBCST = fiscalDocument.taxBaseAmount(TaxType_BR::ICMS, true);
            vST = fiscalDocument.taxAmount(TaxType_BR::ICMS, true);
        }

        icmsTotElement.appendChild(this.createElementWithValue('vBCST', this.formatXmlAmount(vBCST)));
        icmsTotElement.appendChild(this.createElementWithValue('vST', this.formatXmlAmount(vST ? vST - totalIcmsStPovertyFundAmount : 0.00)));

        icmsTotElement.appendChild(this.createElementWithValue('vFCPST', this.formatXmlAmount(totalIcmsStPovertyFundAmount)));
        icmsTotElement.appendChild(this.createElementWithValue('vFCPSTRet', this.formatXmlAmount(totalIcmsStRetPovertyFundAmount)));

        if (fiscalDocument.purpose() != FiscalDocumentPurpose_BR::Adjustment)
        {
            icmsTotElement.appendChild(this.createElementWithValue('vProd', this.formatXmlAmount(fiscalDocument.totalGrossGoodsAmount() )));
        }
        else
        {
            icmsTotElement.appendChild(this.createElementWithValue('vProd', this.formatXmlAmount(0) ));
        }

        icmsTotElement.appendChild(this.createElementWithValue('vFrete', this.formatXmlAmount(abs(fiscalDocument.fiscalDocument().TotalMarkupFreightAmount))));
        icmsTotElement.appendChild(this.createElementWithValue('vSeg', this.formatXmlAmount(abs(fiscalDocument.fiscalDocument().TotalMarkupInsuranceAmount))));
        icmsTotElement.appendChild(this.createElementWithValue('vDesc', this.formatXmlAmount(fiscalDocument.totalDiscountAmount() - abs(fiscalDocument.totalSuframaDiscountICMSAmount()))));
        icmsTotElement.appendChild(this.createElementWithValue('vII', this.formatXmlAmount(fiscalDocument.importTaxAmountOther())));
        icmsTotElement.appendChild(this.createElementWithValue('vIPI', this.formatXmlAmount(fiscalDocument.purpose() == FiscalDocumentPurpose_BR::Return ? 0: fiscalDocument.taxAmount(TaxType_BR::IPI))));
        icmsTotElement.appendChild(this.createElementWithValue('vIPIDevol', this.formatXmlAmount(totalReturnIpiAmount)));
        icmsTotElement.appendChild(this.createElementWithValue('vPIS', this.formatXmlAmount(fiscalDocument.taxableTaxAmountForProducts(TaxType_BR::PIS))));
        icmsTotElement.appendChild(this.createElementWithValue('vCOFINS', this.formatXmlAmount(fiscalDocument.taxableTaxAmountForProducts(TaxType_BR::COFINS))));

        TaxAmount vOutroAmount = fiscalDocument.fiscalDocument().TotalMarkupOtherAmount;
        vOutroAmount = vOutroAmount ? vOutroAmount - nonRecoverableNotIncludedIPITaxAmount : vOutroAmount;

        icmsTotElement.appendChild(this.createElementWithValue('vOutro', this.formatXmlAmount(abs(vOutroAmount))));

        if (fiscalDocument.purpose() != FiscalDocumentPurpose_BR::Adjustment)
        {
            icmsTotElement.appendChild(this.createElementWithValue('vNF', this.formatXmlAmount(fiscalDocument.fiscalDocument().TotalAmount - suframaDiscount)));
        }
        else
        {
            icmsTotElement.appendChild(this.createElementWithValue('vNF', this.formatXmlAmount(0)));
        }

        this.appendChildIfNotEmpty(icmsTotElement, this.createElementWithValue('vTotTrib', this.formatXmlAmount(fiscalDocument.getTotalApproximateAmount())));
        issqnTotElement = this.createElement('ISSQNtot');
        this.appendChildIfNotEmpty(issqnTotElement, this.createElementWithValue('vServ', this.formatXmlAmount(fiscalDocument.totalGrossServicesAmount())));
        this.appendChildIfNotEmpty(issqnTotElement, this.createElementWithValue('vBC', this.formatXmlAmount(fiscalDocument.taxBaseAmount(TaxType_BR::ISS))));
        this.appendChildIfNotEmpty(issqnTotElement, this.createElementWithValue('vISS', this.formatXmlAmount(fiscalDocument.taxAmount(TaxType_BR::ISS))));

        if (fiscalDocument.isImporting())
        {
            this.appendChildIfNotEmpty(issqnTotElement, this.createElementWithValue('vPIS', this.formatXmlAmount(fiscalDocument.taxAmountForServices(TaxType_BR::PIS))));
            this.appendChildIfNotEmpty(issqnTotElement, this.createElementWithValue('vCOFINS', this.formatXmlAmount(fiscalDocument.taxAmountForServices(TaxType_BR::COFINS))));
        }
        else
        {
            this.appendChildIfNotEmpty(issqnTotElement, this.createElementWithValue('vPIS', this.formatXmlAmount(fiscalDocument.taxableTaxAmountForServices(TaxType_BR::PIS))));
            this.appendChildIfNotEmpty(issqnTotElement, this.createElementWithValue('vCOFINS', this.formatXmlAmount(fiscalDocument.taxableTaxAmountForServices(TaxType_BR::COFINS))));
        }

        retTribElement = this.createElement('retTrib');
        this.appendChildIfNotEmpty(retTribElement, this.createElementWithValue('vRetPIS', this.formatXmlAmount(fiscalDocument.taxWithholdAmount(TaxWithholdType_BR::PIS))));
        this.appendChildIfNotEmpty(retTribElement, this.createElementWithValue('vRetCOFINS', this.formatXmlAmount(fiscalDocument.taxWithholdAmount(TaxWithholdType_BR::COFINS))));
        this.appendChildIfNotEmpty(retTribElement, this.createElementWithValue('vRetCSLL', this.formatXmlAmount(fiscalDocument.taxWithholdAmount(TaxWithholdType_BR::CSLL))));
        this.appendChildIfNotEmpty(retTribElement, this.createElementWithValue('vBCIRRF', this.formatXmlAmount(fiscalDocument.taxBaseAmount(TaxType_BR::IRRF))));
        this.appendChildIfNotEmpty(retTribElement, this.createElementWithValue('vIRRF', this.formatXmlAmount(fiscalDocument.taxAmount(TaxType_BR::IRRF))));
        this.appendChildIfNotEmpty(retTribElement, this.createElementWithValue('vBCRetPrev', this.formatXmlAmount(fiscalDocument.taxBaseAmount(TaxType_BR::INSSRetained))));
        this.appendChildIfNotEmpty(retTribElement, this.createElementWithValue('vRetPrev', this.formatXmlAmount(fiscalDocument.taxAmount(TaxType_BR::INSSRetained))));

        totalElement.appendChild(icmsTotElement);
        this.appendChildIfNotEmpty(totalElement, issqnTotElement);
        this.appendChildIfNotEmpty(totalElement, retTribElement);

        return totalElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_transporta_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_transporta_Element()
    {
        XmlElement transportaElement;

        if (fiscalDocument.fiscalDocument().FreightChargeTerms != FiscalDocumentFreightTerms_BR::Nofreight
            || !fiscalEstablishment.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2021004v100))
        {
            transportaElement = super();
        }

        return transportaElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_veicTransp_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_veicTransp_Element()
    {
        XmlElement veicTranspElement;
        
        if (fiscalDocument.getOperationLocation() != 2)
        {
            veicTranspElement = super();
        }

        return veicTranspElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doFormat</Name>
				<Source><![CDATA[
    protected void doFormat()
    {
        System.Diagnostics.Stopwatch stopwatch = System.Diagnostics.Stopwatch::StartNew();
        System.Exception ex;

        try
        {
            fiscalEstablishment = fiscalDocument.fiscalEstablishment();
            FiscalDocument_BR fiscalDoc = fiscalDocument.fiscalDocument();

            if (fiscalDoc.FiscalDocumentAccountType == CustVendType_BR::Vendor
                || (fiscalDoc.FiscalDocumentAccountType == CustVendType_BR::Customer
                    && CustTable::find(fiscalDoc.FiscalDocumentAccountNum).Suframa_BR == NoYes::No))
            {
                container vICMSDesonCodesCon = this.allow_vICMSDeson() ? EFDocConstants_BR::CSTWithICMSDesonWhenAllowed : EFDocConstants_BR::CSTWithICMSDeson;
                Amount vICMSDeson = fiscalDocument.totalSuframaDiscountICMSAmount() + fiscalDocument.getTotalTaxAmountFromBaseAmount(TaxType_BR::ICMS, true, vICMSDesonCodesCon);
                suframaDiscount = vICMSDeson;
            }

            super();
        }
        catch(ex)
        {
            this.addTelemetry(stopwatch, false, funcName());
            throw ex;
        }
        finally
        {
            this.addTelemetry(stopwatch, true, funcName());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doFormatConsumerEFiscalDocument</Name>
				<Source><![CDATA[
    protected void doFormatConsumerEFiscalDocument()
    {
        EFDocumentXML_BR efDocumentXML = fiscalDocument.eFDocumentXML();
        str xml = efDocumentXML.Submission;

        if (!xml)
        {
            DocuRef docuRef = DocuRef_Extension::findCompanyTableIdRecIdName(
                curExt(),
                tableNum(EFDocumentXML_BR),
                fiscalDocument.eFDocumentXML().RecId,
                EFDocConstants_BR::SubmitRequest);

            if (docuRef)
            {
                using (System.IO.Stream fileStream = DocumentManagement::getAttachmentStream(docuRef))
                {
                    using (System.IO.StreamReader streamReader = new System.IO.StreamReader(fileStream))
                    {
                        xml = streamReader.ReadToEnd();
                    }
                }
            }
        }

        xmlDoc.loadXml(xml);
        stream.write(xmlDoc.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>eFiscalDocVersion</Name>
				<Source><![CDATA[
    public EFiscalDocVersion_BR eFiscalDocVersion()
    {
        return EFiscalDocVersion_BR::V40;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStringLength</Name>
				<Source><![CDATA[
    private str formatStringLength(str _value, int _length)
    {
        return strRTrim(subStr(strLTrim(_value), 1, _length));
    }

]]></Source>
			</Method>
			<Method>
				<Name>get_nDup_value</Name>
				<Source><![CDATA[
    protected str get_nDup_value(int _installmentNumber)
    {
        str strNumber = int2str(_installmentNumber);
        if (strLen(strNumber) < 3)
        {
            strNumber = strRep('0', 3 - strLen(strNumber)) + strNumber;
        }

        return strNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetch Sales order invoice date of the fiscal document.
    /// </summary>
    /// <param name="fiscalDoc">
    /// Fiscal document for which the sales order invoice date has to be fetched.
    /// </param>
    /// <returns>
    /// Invoice date for Fiscal Document.
    /// </returns>
    protected FiscalDocumentDate_BR getDocumentDate(FiscalDocument_BR _fiscalDoc)
    {
        FiscalDocumentDate_BR fiscalDocumentDate;
        
        switch (_fiscalDoc.RefTableId)
        {
            case tableNum(CustInvoiceJour):
                CustInvoiceJour custInvoiceJour = _fiscalDoc.findRefRecord();
                SalesLine salesLine = SalesLine::findInventTransId(SalesLine::find(custInvoiceJour.SalesId).InventTransIdReturn);
                CFOPTable_BR cfopTable = CFOPTable_BR::find(salesLine.salesLine_BR().CFOPTable_BR);
                
                if (custInvoiceJour.SalesType == SalesType::ReturnItem
                    && cfopTable.CustVendLocation == CustVendLocation_BR::OtherState
                    && custInvoiceJour.custInvoiceJour_BR().CustFinalUser_BR)
                {
                    fiscalDocumentDate = CustInvoiceJour::findFromSalesId_IN(salesLine.SalesId).InvoiceDate;
                }
                break;

            default:
                break;
        }
        return fiscalDocumentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnedQtyForLine</Name>
				<Source><![CDATA[
    protected Qty getReturnedQtyForLine(FiscalDocumentLine_BR _fiscalDocumentLine)
    {
        Qty originalQty = this.getReturnedQtyForLineWithDiffUnits(_fiscalDocumentLine);
        return originalQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnedQtyForLineWithDiffUnits</Name>
				<Source><![CDATA[
    protected Qty getReturnedQtyForLineWithDiffUnits(FiscalDocumentLine_BR _fiscalDocumentLine)
    {
        Qty originalQty;
        UnitOfMeasureSymbol originalUnit;
        PurchLine purchaseLine;

        if (_fiscalDocumentLine.RefTableId == tableNum(VendInvoiceTrans))
        {
            VendInvoiceTrans returnedInvoiceTrans, originalInvoiceTrans;
             
            if (EinvoicingGetReturnedQtyForLineforCreditNotesFlight_BR::instance().isEnabled())
            {
                select firstonly Qty, PurchUnit from originalInvoiceTrans
                    exists join returnedInvoiceTrans
                        where originalInvoiceTrans.InventTransId == returnedInvoiceTrans.InventRefTransId
                            && returnedInvoiceTrans.RecId == _fiscalDocumentLine.RefRecId
                    exists join purchaseLine
                        where purchaseLine.PurchID == returnedInvoiceTrans.PurchID
                            && originalInvoiceTrans.RecId == purchaseLine.CreditedVendInvoiceTrans;
            }
            else
            {
                select firstonly Qty, PurchUnit from originalInvoiceTrans
                    exists join returnedInvoiceTrans
                        where originalInvoiceTrans.InventTransId == returnedInvoiceTrans.InventRefTransId
                            && returnedInvoiceTrans.RecId == _fiscalDocumentLine.RefRecId;
            }
    
            originalQty = originalInvoiceTrans.Qty;
            originalUnit = originalInvoiceTrans.PurchUnit;

            //Not credit note scenario
            if (!originalQty)
            {
                FiscalDocumentReferenced_BR fiscalDocumentReferenced;
                ExternalFiscalDocument_BR externalFiscalDocument;
                FiscalDocument_BR originalFiscalDocument;
                FiscalDocumentLine_BR originalFiscalDocumentLine;
                FiscalDocument_BR fiscalDocumentLoc = fiscalDocument.fiscalDocument();

                select firstonly sum(Quantity), Unit from originalFiscalDocumentLine
                    group by Unit, ItemId, FiscalDocument
                    where originalFiscalDocumentLine.ItemId == _fiscalDocumentLine.ItemId
                    exists join originalFiscalDocument
                        where originalFiscalDocument.RecId == originalFiscalDocumentLine.FiscalDocument
                            && originalFiscalDocument.Direction == FiscalDocDirection_BR::Incoming
                            && originalFiscalDocument.FiscalDocumentAccountType == CustVendType_BR::Vendor
                            && originalFiscalDocument.RefTableId == tableNum(VendInvoiceJour)
                    exists join fiscalDocumentReferenced
                        where fiscalDocumentReferenced.ReferencedFiscalDocument == originalFiscalDocument.RecId
                            && fiscalDocumentReferenced.FiscalDocument == fiscalDocumentLoc.RecId;

                // If imported external fiscal document is referenced
                if (!originalFiscalDocumentLine)
                {
                    select firstonly sum(Quantity), Unit from originalFiscalDocumentLine
                        group by Unit, ItemId, FiscalDocument
                        where originalFiscalDocumentLine.ItemId == _fiscalDocumentLine.ItemId
                        exists join originalFiscalDocument
                            where originalFiscalDocument.RecId == originalFiscalDocumentLine.FiscalDocument
                                && originalFiscalDocument.Direction == FiscalDocDirection_BR::Incoming
                                && originalFiscalDocument.FiscalDocumentAccountType == CustVendType_BR::Vendor
                                && originalFiscalDocument.RefTableId == tableNum(VendInvoiceJour)
                        exists join externalFiscalDocument
                            where externalFiscalDocument.Direction == originalFiscalDocument.Direction
                                && externalFiscalDocument.FiscalDocumentAccountType == originalFiscalDocument.FiscalDocumentAccountType
                                && externalFiscalDocument.Model == originalFiscalDocument.Model
                                && externalFiscalDocument.FiscalDocumentAccountNum == originalFiscalDocument.FiscalDocumentAccountNum
                                && externalFiscalDocument.FiscalDocumentIssuer == originalFiscalDocument.FiscalDocumentIssuer
                                && externalFiscalDocument.IssueDate == originalFiscalDocument.FiscalDocumentDate
                                && ((externalFiscalDocument.Model != EFDocConstants_BR::Model55
                                && externalFiscalDocument.FiscalDocumentNumber == originalFiscalDocument.FiscalDocumentNumber
                                && externalFiscalDocument.FiscalDocumentSeries == originalFiscalDocument.FiscalDocumentSeries)
                                || (externalFiscalDocument.Model == EFDocConstants_BR::Model55
                                && externalFiscalDocument.FiscalDocumentAccessKey == originalFiscalDocument.AccessKey))
                        exists join fiscalDocumentReferenced
                            where fiscalDocumentReferenced.ExternalReferencedFiscalDocument == externalFiscalDocument.RecId
                                && fiscalDocumentReferenced.FiscalDocument == fiscalDocumentLoc.RecId;
                }

                originalQty = originalFiscalDocumentLine.Quantity;
                originalUnit = originalFiscalDocumentLine.Unit;
            }
        }
        else
        {
            InventTrans inventTrans, inventTransReturn;
            InventTransOrigin inventTransOrigin, inventTransOriginReturn;

            select firstonly sum(Qty) from inventTransReturn
                exists join inventTransOriginReturn
                    where inventTransOriginReturn.RecId == inventTransReturn.InventTransOrigin
                exists join inventTrans
                    where inventTrans.ReturnInventTransOrigin == inventTransOriginReturn.RecId
                exists join inventTransOrigin
                    where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                        && inventTransOrigin.InventTransId == _fiscalDocumentLine.InventTransId;

            originalUnit = InventTableModule::find(_fiscalDocumentLine.ItemId, ModuleInventPurchSales::Invent).UnitId;
            originalQty = inventTransReturn.Qty;
        }

        originalQty = this.convertQty(
            _fiscalDocumentLine.ItemId,
            originalUnit,
            _fiscalDocumentLine.Unit,
            originalQty);

        return originalQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init()
    {
        super();
        
        totalIcmsPovertyFundAmount      = 0;
        totalIcmsStPovertyFundAmount    = 0;
        totalIcmsStRetPovertyFundAmount = 0;
        taxTransferAmount               = 0;
        allowvICMSDeson = NoYesUnchanged::Unchanged;
        isSalesIntermediaryInformationApplicable = NoYesUnchanged::Unchanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPurchaseReturn</Name>
				<Source><![CDATA[
    private boolean isPurchaseReturn()
    {
        return fiscalDocument.fiscalDocument().RefTableId == tableNum(VendInvoiceJour)
            && fiscalDocument.direction() == FiscalDocDirection_BR::Outgoing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSalesIntermediaryInformationApplicable</Name>
				<Source><![CDATA[
    private boolean isSalesIntermediaryInformationApplicable()
    {
        if (isSalesIntermediaryInformationApplicable == NoYesUnchanged::Unchanged)
        {
            boolean isNT2020006v100Enabled = fiscalEstablishment.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2020006v100);
            boolean isNT2020006v110Enabled = fiscalEstablishment.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2020006v110)
                && !fiscalEstablishment.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2020006v120);

            isSalesIntermediaryInformationApplicable = (isNT2020006v100Enabled
                && FiscalDocumentHelper::checkPresenseTypeForThirdPartySalesDigitalPlatform(fiscalDocument.presenceType()))
                || (isNT2020006v110Enabled
                && (FiscalDocumentHelper::checkPresenseTypeForThirdPartySalesDigitalPlatform(fiscalDocument.presenceType())
                || fiscalDocument.presenceType() == EFDocPresenceType_BR::InPerson)) ? NoYesUnchanged::Yes : NoYesUnchanged::No;
        }

        return isSalesIntermediaryInformationApplicable == NoYesUnchanged::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundAmount</Name>
				<Source><![CDATA[
    private real roundAmount(real _amount, real _decimals = 0.01)
    {
        return round(_amount, _decimals);
    }

]]></Source>
			</Method>
			<Method>
				<Name>version</Name>
				<Source><![CDATA[
    public str version()
    {
        return #EFDocLayoutVersion400;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>EFDocMsgFormat_XmlSubmitV4_BR</c> object.
    /// </summary>
    /// <returns>A <c>EFDocMsgFormat_XmlSubmitV4_BR</c> object.</returns>
    public static EFDocMsgFormat_XmlSubmitV4_BR construct()
    {
        return new EFDocMsgFormat_XmlSubmitV4_BR();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>