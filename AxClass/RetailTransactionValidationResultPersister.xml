<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionValidationResultPersister</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailTransactionValidationResultPersister</c> class persist the result of transaction validation.
/// </summary>
internal abstract class RetailTransactionValidationResultPersister
{
    protected RetailTransactionTable transactionTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c>RetailTransactionValidationResultPersister</c>.
    /// </summary>
    /// <param name = "_transactionTable">The transaction that owns the results to be persisted.</param>
    /// <returns>An instance of <c>RetailTransactionValidationResultPersister</c>.</returns>
    public static RetailTransactionValidationResultPersister construct(RetailTransactionTable _transactionTable)
    {
        RetailTransactionValidationResultPersister instance;

        if (_transactionTable.type == RetailTransactionType::Sales)
        {
            instance = new RetailTransactionValidationCashAndCarryResultPersister();
        }
        else if (_transactionTable.type == RetailTransactionType::PendingSalesOrder
              || _transactionTable.type == RetailTransactionType::AsyncCustomerOrder
              || _transactionTable.type == RetailTransactionType::AsyncCustomerQuote)
        {
            instance = new RetailTransactionValidationAsyncOrderResultPersister();
        }
        else
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        instance.transactionTable = _transactionTable;

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUpPreviousErrors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleans up errors from previous executions.
    /// </summary>
    /// <remarks>
    /// This method should always be called before persisting any results.
    /// It's the responsability of the consumer of the persister to decide when to clear them.
    /// </remarks>
    public void cleanUpPreviousErrors()
    {
        RetailTransactionValidationError    validationErrorData;
        
        ttsbegin;

        // Delete old validation history.
        delete_from validationErrorData
            where validationErrorData.Channel       == transactionTable.Channel
               && validationErrorData.Store         == transactionTable.Store
               && validationErrorData.Terminal      == transactionTable.Terminal
               && validationErrorData.TransactionId == transactionTable.TransactionId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>persist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Persists the validation result.
    /// </summary>
    /// <param name = "_result">The result to be persisted.</param>
    public void persist(RetailTransactionValidationResult _result)
    {
        if (_result.getRecord().RecId != transactionTable.RecId)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        ttsbegin;

        this.saveValidationStatus(_result);

        this.saveErrors(_result);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveValidationStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computes and saves the ValidationStatus to RetailTransactionTable.
    /// </summary>
    /// <param name = "_result">The result to be saved.</param>
    private void saveValidationStatus(RetailTransactionValidationResult _result)
    {
        RetailTransactionTable localTransactionTable = this.getRecordToSaveResults();

        localTransactionTable.ValidationStatus = _result.getValidationStatus();
        localTransactionTable.ValidationDateTime = DateTimeUtil::utcNow();
        localTransactionTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordToSaveResults</Name>
				<Source><![CDATA[
    /// <summary>
    /// Depending on the flow where the Transaction Validation infrastructure is being used,
    /// the <c>RetailTransactionTable</c> record may not be re-usable "for update" (ie, it was selected in a different transaction).
    /// This method provides a way for each implementation to decide which instance of the record to use for persisting the results.
    /// </summary>
    /// <returns>An instance of <c>RetailTransactionTable</c> that is suitable to be updated.</returns>
    protected abstract RetailTransactionTable getRecordToSaveResults()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>saveErrors</Name>
				<Source><![CDATA[
    private void saveErrors(RetailTransactionValidationResult _result)
    {
        // Save to database all validation errors.
        RecordInsertList recordInsertListOfErrors   = new RecordInsertList(tableNum(RetailTransactionValidationError));
        ListEnumerator listEnumeratorPerTransaction = _result.getValidationErrors().getEnumerator();

        while (listEnumeratorPerTransaction.moveNext())
        {
            recordInsertListOfErrors.add(listEnumeratorPerTransaction.current());
        }

        recordInsertListOfErrors.insertDatabase();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>