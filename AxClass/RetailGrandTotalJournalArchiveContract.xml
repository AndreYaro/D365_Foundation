<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailGrandTotalJournalArchiveContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

/// <summary>
/// Retail archive report.
/// </summary>
[
    DataContract,
    SysOperationAlwaysInitialize
]
public class RetailGrandTotalJournalArchiveContract extends RetailFileArchiveContract implements SysPackable
{
    private RecId grandTotalJournalTableRecId;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        grandTotalJournalTableRecId,
        exportFileName,
        archiveId,
        formatMappingRunJobId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = conpeek(packedClass, 1);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = packedClass;
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        eRFormatMappingId = RetailParameters::find().GrandTotalJournalArchiveERFileFormatMappingId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    public void initialize()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromGrandTotalJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes from the journal table.
    /// </summary>
    /// <param name = "_grandTotalJournalTable">The journal table.</param>
    public void initFromGrandTotalJournalTable(RetailGrandTotalJournalTable _grandTotalJournalTable)
    {
        grandTotalJournalTableRecId = _grandTotalJournalTable.RecId;

        exportFileName = strFmt('%1_%2-%3_%4.xml',
            _grandTotalJournalTable.StoreId,
            strReplace(this.formatDate(_grandTotalJournalTable.FromDate), '-', ''),
            strReplace(this.formatDate(_grandTotalJournalTable.ToDate), '-', ''),
            strReplace(strReplace(guid2str(this.parmArchiveId()), '{', ''), '}', ''));
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatDate</Name>
				<Source><![CDATA[
    private str formatDate(date _date)
    {
        return date2str(_date, 321,  2, 3, 2, 3, 4, DateFlags::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGrandTotalJournalTableRecId</Name>
				<Source><![CDATA[
    [DataMember, SysOperationControlVisibility(false)]
    public RecId parmGrandTotalJournalTableRecId(RecId _grandTotalJournalTableRecId = grandTotalJournalTableRecId)
    {
        grandTotalJournalTableRecId = _grandTotalJournalTableRecId;
        return grandTotalJournalTableRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArchiveId</Name>
				<Source><![CDATA[
    [DataMember, SysOperationControlVisibility(false)]
    public guid parmArchiveId(guid _archiveId = archiveId)
    {
        return super(_archiveId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsSigningRequired</Name>
				<Source><![CDATA[
    [DataMember, SysOperationControlVisibility(false)]
    public boolean parmIsSigningRequired(boolean _isSigningRequired = isSigningRequired)
    {
        return super(_isSigningRequired);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmERFormatMappingId</Name>
				<Source><![CDATA[
    [DataMember, SysOperationControlVisibility(false)]
    public ERFormatMappingId parmERFormatMappingId(ERFormatMappingId _eRFormatMappingId = eRFormatMappingId)
    {
        return super(_eRFormatMappingId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExportFileName</Name>
				<Source><![CDATA[
    [DataMember]
    public Filename parmExportFileName(Filename _exportFileName = exportFileName)
    {
        return super(_exportFileName);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>