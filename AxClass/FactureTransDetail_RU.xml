<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureTransDetail_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FactureTransDetail_RU extends RunBase
{
    FactureJour_RU  factureJour;
    FactureTrans_RU factureTrans;
    Set             markedJour;

    Notes           transDetail;
    boolean         agreementExists;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
        public Object dialog()
    {
        Dialog dialog = this.dialogInternal(Dialog::newFormnameRunbase(formstr(CustInvoice4PaymDialog_RU), this));

        dialog.caption("@GLS102237");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureTrans</Name>
				<Source><![CDATA[
        void factureTrans(FactureTrans_RU   _factureTrans)
    {
        Query                   query;
        QueryBuildDataSource    qbds;
        QueryBuildDataSource    qbdsCustTrans_W;
        QueryRun                qr;
        CustTrans               custTrans;
        RecId                   dimAttrRecId = AgreementHeaderExt_RU::getAgreementDimensionAttribute();

        if (dimAttrRecId)
        {
            factureTrans = _factureTrans;
            factureJour = FactureJour_RU::find(factureTrans.FactureId, factureTrans.Module);

            query = new query();
            qbds  = query.addDataSource(tableNum(custTrans));
            qbds.firstOnly(true);

            qbdsCustTrans_W = CustTrans_W::addToQuery(qbds, JoinMode::InnerJoin);
            qbdsCustTrans_W.addRange(fieldNum(custTrans_W, PrepaymentFactureId_W)).value(queryValue(factureJour.FactureId));

            SysQuery::addDimensionAttributeRange(query,
                qbds.name(),
                fieldStr(custTrans, DefaultDimension),
                DimensionComponent::DimensionAttribute,
                SysQuery::valueNotEmptyString(),
                DimensionAttribute::find(dimAttrRecId).Name);

            qr = new QueryRun(query);
            if (qr.next())
            {
                custTrans = qr.get(tableNum(custTrans));
            }

            agreementExists = custTrans.RecId != 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markedJour</Name>
				<Source><![CDATA[
        void markedJour(container _con)
    {
        markedJour = Set::create(_con);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
        container modifyQuery(container _con)
    {
        Query                   q = new Query(_con);
        QueryBuildDataSource    qbds;
        ;

        qbds = q.dataSourceTable(tablenum(CustInvoice4PaymJour_RU));
        findOrCreateRange_W(qbds, fieldnum(CustInvoice4PaymJour_RU, InvoiceAccount), factureJour.CustVendInvoiceAccount);

        return q.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        void new()
    {
        super();
        markedJour = new Set(typeName2Type(extendedTypeStr(recId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        public void run()
    {
        SetEnumerator jourEnum = markedJour.getEnumerator();
        CustInvoice4PaymJour_RU    jour;
        CustInvoice4PaymTrans_RU   trans;

        Notes                      inventName;

        RefRecId    jourRecId;

        #define.Blank(' ')

        CustLanguageId languageId;

        while (jourEnum.moveNext())
        {
            jourRecId = jourEnum.current();
            languageId = CustInvoice4PaymJour_RU::findRecId(jourRecId).LanguageId;

            while select tableId from jour
                where jour.RecId == jourRecId
                join trans
                    where trans.SalesId          == jour.SalesId        &&
                          trans.Invoice4PaymId   == jour.Invoice4PaymId &&
                          trans.Invoice4PaymDate == jour.Invoice4PaymDate
            {
                inventName += (inventName ? "@SYS35667" +  #Blank: '') + trans.itemName();
            }
        }

        str forText = "@GLS113557";

        if (languageId)
        {
            forText = strfmt(SysLabel::labelId2String(literalStr("@GLS113557"), languageId));
        }

        if (agreementExists)
        {
            transDetail += #Blank + "@SYS34952" + strfmt(forText, inventName) + "@SYS34953";
        }
        else
        {
            transDetail += #Blank + strfmt(forText, inventName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTxt</Name>
				<Source><![CDATA[
        Notes transTxt()
    {
        return transDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container packedClass)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        static FactureTransDetail_RU construct(FactureTrans_RU   _factureTrans)
    {
        FactureTransDetail_RU   transDetail;

        if (_factureTrans.Module == FactureModule_RU::Cust)
        {
            transDetail =  new FactureTransDetail_RU();
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        transDetail.factureTrans(_factureTrans);
        transDetail.init();

        return transDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>