<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomVersionApprove</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BomVersionApprove extends BOMRouteVersionApprove
{
    boolean         approveBOM;
    boolean         isBOMAlreadyApproved;

    DialogField     fieldApproveBOM;

    #define.CurrentVersion(3)
    #localmacro.CurrentList
        approveBOM,
        isBOMAlreadyApproved
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>blockRemoveOfApproval</Name>
				<Source><![CDATA[
    public NoYes blockRemoveOfApproval()
    {
        return blockRemoveOfApproval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        DialogRunbase   dialog  = super();

        if (! isBOMAlreadyApproved)
        {
            if (!#PmfEnabled
                || BOMVersion::findRecId(recId).bomTable().PmfBOMFormula == PmfBOMFormula::BOM)
            {
                fieldApproveBOM = dialog.addField(enumstr(NoYes),"@SYS29114","@SYS50833");
            }
            else
            {
                fieldApproveBOM = dialog.addField(enumstr(NoYes),"@PRO126","@PRO127");
            }
            fieldApproveBOM.value(approveBOM);
        }
        else
        {
            approveBOM = false;
        }
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        boolean ok = super();

        if (fieldApproveBOM)
        {
            approveBOM = fieldApproveBOM.value();
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        boolean     ret;
        BOMVersion  version = BOMVersion::findRecId(recId);

        ret = super();

        isAlreadyApproved = BOMVersion::findRecId(recId).Approved;
        blockRemoveOfApproval = BOMParameters::find().BlockRemoveApproval;
        approveBOM = false;

        if (version)
        {
            isBOMAlreadyApproved = version.bomTable().Approved;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAlreadyApproved</Name>
				<Source><![CDATA[
    boolean isAlreadyApproved()
    {
        return isAlreadyApproved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApproveBOM</Name>
				<Source><![CDATA[
    public boolean parmApproveBOM(boolean _approveBOM = approveBOM)
    {
        if (!prmisdefault(_approveBOM))
        {
            approveBOM = _approveBOM;
        }

        return approveBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCheckAttribInherit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if batch attribute inheritance setup is valid for the given <c>BOMVersion</c>.
    /// </summary>
    /// <param name="_version">
    /// The <c>BOMVersion</c> to be checked.
    /// </param>
    /// <returns>
    /// true if inheritance setup is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This ensures that there are no batch attributes defined as inherited from two or more different components.
    /// </remarks>
    public boolean pdsCheckAttribInherit(BOMVersion _version)
    {
        PDSBatchAttribTransfer  transfers;
        boolean                 ret = true;

        select count(RecId) from transfers
            group by PdsBatchAttribId, EndItemId, RawItemId
            where transfers.bomId == _version.bomId;

        if (transfers.RecId  > 1)
        {
            ret = checkFailed(strFmt("@PSC197", transfers.PdsBatchAttribId, _version.bomId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsValidateIngredientType</Name>
				<Source><![CDATA[
    private boolean pdsValidateIngredientType(BOM _bom)
    {
        PdsIngredient pdsIngredient = PdsIngredient::newFromType(_bom.pdsIngredientType);
        return pdsIngredient.validateBom(_bom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsValidateFormula</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that all potency ingredient lines are valid for a formula.
    /// </summary>
    /// <param name="_version">
    /// The <c>BOMversion</c> to validate.
    /// </param>
    /// <param name="_ret">
    /// Determines the current status of earlier validations to the formula.
    /// </param>
    /// <returns>
    /// true if the formula is valid; otherwise, false.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Thrown if an ingredient type is unknown.
    /// </exception>
    public boolean pdsValidateFormula(
        BOMVersion  _version,
        boolean     _ret)
    {
        BOM         bom;
        boolean     ret = _ret;

        if (ret)
        {
            while select bom
                where bom.bomId == _version.bomId
            {
               ret = this.pdsValidateIngredientType(bom);

               if (!ret)
               {
                   break;
               }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount
        BOMVersion  version;
        BOMApprove  bomApprove;

        using(var activityContext = BomInstrumentationLogger::createLogger(classStr(BOMVersionApprove)).bom().approveVersion())
        {
            if (! this.validate())
            throw error("@SYS27040");

            try
            {
                ttsbegin;

                version = BOMVersion::findRecId(recId,true);

                if (approveBOM)
                {
                    bomApprove = new BOMApprove();
                    bomApprove.init();
                    bomApprove.parmApprover(approver);
                    bomApprove.parmBOMId(version.bomId);
                    bomApprove.runOperation();
                }

                if (remove)
                {
                    version.Approved    = false;
                    version.Approver    = 0;
                    version.Active      = false;
                }
                else
                {
                    version.Approved    = true;
                    version.Approver    = approver;
                    if (#PmfEnabled)
                    {
                        version.PmfFormulaChangeDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                    }
                }
                if (! version.validateWrite())
                throw error("@SYS27040");

                if (    remove
                &&  this.isAlreadyApproved()
                &&  !this.blockRemoveOfApproval()
                &&  BOMParameters::find().BlockEditing)
            //
            // this is a special case, we are removing the approval
            // so we need to bypass table validation
            //
                {
                    version.doUpdate();
                }
                else
                {
                    version.update();
                }

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        container       base;
        boolean         ret;
        Integer         version     = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = packedClass;
                ret = super(base);
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object _calledFrom = null)
    {
        boolean         ret;
        BOMVersion      version = BOMVersion::findRecId(recId);
        BOM             bom;

        #define.localCharNo(7)
        #define.localDecimalNo(4)

        ret = super() && BOMVersion::checkExistRecId(recId);
        if (version)
        {
            if (!version.bomTable().Approved && ! approveBOM && !remove)
            {
                if (version.PmfTypeId == PmfBOMFormula::Formula)
                {
                    ret = checkFailed(strFmt("@PRO2345", version.bomId));
                }
                else
                {
                    ret = checkFailed(strFmt("@SYS29115", version.bomId));
                }
            }
        }

        if (ret
            && version.PmfTypeId == PmfBOMFormula::Formula
            && !this.isAlreadyApproved())
        {
            if (version.inventTable().PmfProductType == PmfProductType::MainItem)
            {
                if (decRound(version.pmfRemainCostAlloc(),#localDecimalNo))
                {
                    warning("@PRO997");
                    ret = checkFailed("@PRO1000"
                        + num2str(
                            decRound(
                                version.pmfTotalCostAlloc(),
                                #localDecimalNo),
                    #localCharNo,#localDecimalNo,1,0));
                }

                if (!bom.pmfCheckUnitConversion())
                {
                    while select bom
                         where  bom.bomId == version.bomId
                        && bom.PmfPctEnable
                    {
                        ret = bom.pmfCheckUnitConversion();
                    }
                }
            }

            if (ret)
            {
                select count(RecId)
                    from bom
                    where  bom.bomId == version.bomId
                        && bom.PmfPctEnable;

                if (bom.RecId > 0)
                {
                    select sum(PmfFormulaPct)
                        from bom
                        where  bom.bomId == version.bomId
                            && bom.PmfPctEnable;

                    if (bom.PmfFormulaPct != 100)
                    {
                        ret = checkFailed("@PRO1383");
                    }
                }
            }

            if (ret
                && PmfFormulaCoBy::existBOMId(version.bomId)
                && !(select bom
                        where bom.bomId == version.bomId
                            && !bom.ConfigGroupId).RecId)
            {
                ret = checkFailed("@PRO2256");
            }

            if (ret && version.PmfBatchSize
                    != version.pmfSetMultipleQty(version.PmfBatchSize, false))
            {
                ret = checkFailed(strFmt("@PRO2406",
                    version.PmfFormulaMultiple,version.PmfBatchSize));
            }

            ret = ret && version.pmfValidateTCA();
        }

        if (#PDSPotencyEnabled && !this.parmRemove())
        {
            ret = ret && this.pdsValidateFormula(version, ret);
        }

        if (#PDSLotGenealogyEnabled)
        {
            ret = ret && this.pdsCheckAttribInherit(version);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS26276";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        BOMRouteVersionApprove          approve;
        SIGBOMVersionApproveProcedure   procedure; //SIG
        Common                          argsRecord;

        //SIG - start
        if (isConfigurationkeyEnabled(configurationkeynum(SIG)))
        {
            argsRecord = _args.record();
            if (argsRecord)
            {
                procedure = SIGBOMVersionApproveProcedure::newBOMVersion(argsRecord);
                if (procedure.signatureRequired())
                {
                    procedure.sign();
                    return;
                }
            }
        }
        //SIG - end

        approve = BOMRouteVersionApprove::construct(_args);

        if (approve.prompt())
        {
            using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(_args))
            {
                approve.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>