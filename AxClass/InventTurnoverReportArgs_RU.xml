<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTurnoverReportArgs_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Class holds Invent turnover report parameters.
/// </summary>
class InventTurnoverReportArgs_RU extends RunBase
{
    InventSumDateFinancialDim_RU        reportLine;
    TmpInventTurnoverReportLineData_RU  reportLineData;

    Query                               query;
    Query                               queryFromDialog;
    List                                fields;
    DimensionFocusRecId                 dimensionFocusId;
    
    private container reportLineSetPack;
    private container reportLineDataSetPack;
    private container packedQuery;
    private container packedQueryFromDialog;
    private container fieldsPack;

    private const Version currentVersion = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dimensionFocusId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns record Id of the dimension set for the Invent turnover report.
    /// </summary>
    /// <returns>
    ///     Record Id of the dimension set.
    /// </returns>
    public DimensionFocusRecId dimensionFocusId()
    {
        return dimensionFocusId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fields</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns list of fields of the Invent turnover report.
    /// </summary>
    /// <returns>
    ///     List of fields of the Invent turnover report.
    /// </returns>
    public List fields()
    {
        return fields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes invent turnover report parameters.
    /// </summary>
    /// <param name="_query">
    ///     Query from the invent turnover report inquery form.
    /// </param>
    /// <param name="_queryFromDialog">
    ///     Query from the invent turnover report dialog form.
    /// </param>
    /// <param name="_fromDate">
    ///     Start date.
    /// </param>
    /// <param name="_toDate">
    ///     End date.
    /// </param>
    /// <param name="_reportLine">
    ///     <c>InventSumDateFinancialDim_RU</c> table with Invent turnover report lines.
    /// </param>
    /// <param name="_reportLineData">
    ///     <c>TmpInventTurnoverReportLineData_RU</c> table with Invent turnover report lines data.
    /// </param>
    /// <param name="_dimensionFocusId">
    ///     Record Id of the dimension set for the Invent turnover report.
    /// </param>
    public void new(Query                               _query,
                    Query                               _queryFromDialog,
                    FromDate                            _fromDate,
                    ToDate                              _toDate,
                    InventSumDateFinancialDim_RU        _reportLine,
                    TmpInventTurnoverReportLineData_RU  _reportLineData,
                    DimensionFocusRecId                 _dimensionFocusId)
    {
        super();

        fields           =  new List(Types::Container);
        dimensionFocusId = _dimensionFocusId;

        reportLine.setTmp();
        reportLine.setTmpData(_reportLine);
        reportLineData.setTmpData(_reportLineData);

        if (_query && _queryFromDialog)
        {
            this.unpackQueries(_query.pack(), _queryFromDialog.pack());

            findOrCreateRange_W(queryFromDialog.dataSourceTable(tableNum(InventSumDateFinancialTrans_RU)),
                                                                fieldNum(InventSumDateFinancialTrans_RU, TransDate),
                                                                queryRange(_fromDate, _toDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromSessionId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs invent turnover report parameters object.
    /// </summary>
    /// <param name = "_sessionId">
    ///     Session identificator
    /// </param>
    /// <param name="_query">
    ///     Query from the invent turnover report inquery form.
    /// </param>
    /// <param name="_queryFromDialog">
    ///     Query from the invent turnover report dialog form.
    /// </param>
    /// <param name="_fromDate">
    ///     Start date.
    /// </param>
    /// <param name="_toDate">
    ///     End date.
    /// </param>
    /// <param name="_dimensionFocusId">
    ///     Record Id of the dimension set for the Invent turnover report.
    /// </param>
    /// <returns>
    ///     Initialized instance of <c>InventTurnoverReportArgs_RU</c>
    /// </returns>
    public static InventTurnoverReportArgs_RU constructFromSessionId(
        RefRecId            _sessionId,
        Query               _query,
        Query               _queryFromDialog,
        FromDate            _fromDate,
        ToDate              _toDate,
        DimensionFocusRecId _dimensionFocusId)
    {
        InventTurnoverReportLineData_RU reportLineDataSource;

        InventSumDateFinancialDimItem_RU finDimItem;

        TmpInventTurnoverReportLineData_RU reportLineData;

        insert_recordset reportLineData(
            AMOUNTEND,
            AMOUNTISSUE,
            AMOUNTRECEIPT,
            AMOUNTSTART,
            ITEMNAME,
            PHYSICALAMOUNTISSUE,
            PHYSICALAMOUNTRECEIPT,
            PHYSICALQTYISSUE,
            PHYSICALQTYRECEIPT,
            QTYEND,
            QTYISSUE,
            QTYRECEIPT,
            QTYSTART,
            TOTALTRANS,
            TRANSFERAMOUNTISSUE,
            TRANSFERAMOUNTRECEIPT,
            TRANSFERQTYISSUE,
            TRANSFERQTYRECEIPT,
            FINANCIALDIMID)
        select
            AMOUNTEND,
            AMOUNTISSUE,
            AMOUNTRECEIPT,
            AMOUNTSTART,
            ITEMNAME,
            PHYSICALAMOUNTISSUE,
            PHYSICALAMOUNTRECEIPT,
            PHYSICALQTYISSUE,
            PHYSICALQTYRECEIPT,
            QTYEND,
            QTYISSUE,
            QTYRECEIPT,
            QTYSTART,
            TOTALTRANS,
            TRANSFERAMOUNTISSUE,
            TRANSFERAMOUNTRECEIPT,
            TRANSFERQTYISSUE,
            TRANSFERQTYRECEIPT
        from reportLineDataSource
            where reportLineDataSource.SessionId == _sessionId
            join Id from finDimItem
                where reportLineDataSource.FinancialDimItemId == finDimItem.RecId;

        InventSumDateFinancialDim_RU reportFinDim;
        InventSumDateFinancialDim_RU reportLine;
        reportLine.setTmp();

        insert_recordset reportLine(
            Account,
            DEFAULTDIMENSION,
            DIMENSION,
            INVENTLOCATIONID,
            INVENTPROFILEID,
            INVENTPROFILETYPE,
            INVENTSITEID,
            STORNO,
            FINANCIALDIMID,
            ItemId)
        select
            ACCOUNT,
            DEFAULTDIMENSION,
            DIMENSION,
            INVENTLOCATIONID,
            INVENTPROFILEID,
            INVENTPROFILETYPE,
            INVENTSITEID,
            STORNO
        from reportFinDim
            join Id, ItemId from finDimItem
                where finDimItem.FinancialDimId == reportFinDim.FinancialDimId
            exists join reportLineDataSource
                where reportLineDataSource.FinancialDimItemId == finDimItem.RecId
                && reportLineDataSource.SessionId == _sessionId;

        InventTurnoverReportArgs_RU reportArgs;

        reportArgs = new InventTurnoverReportArgs_RU(
            _query,
            _queryFromDialog,
            _fromDate,
            _toDate,
            reportLine,
            reportLineData,
            _dimensionFocusId);
        
        return reportArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackQueries</Name>
				<Source><![CDATA[
    private void unpackQueries(container _queryPack,
                                 container _queryFromDlgPack)
    {
        query = new Query(_queryPack);
        query.interactive(false);
        query.userUpdate(false);
    
        queryFromDialog = new Query(_queryFromDlgPack);
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns query from the invent turnover report inquery form.
    /// </summary>
    /// <returns>
    ///     Query from the invent turnover report inquery form.
    /// </returns>
    public Query query()
    {
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns query from the invent turnover report dialog form.
    /// </summary>
    /// <returns>
    ///     Query from the invent turnover report dialog form.
    /// </returns>
    public Query queryFromDialog()
    {
        return queryFromDialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns <c>InventSumDateFinancialDim_RU</c> table with Invent turnover report lines.
    /// </summary>
    /// <returns>
    ///     <c>InventSumDateFinancialDim_RU</c> table with Invent turnover report lines.
    /// </returns>
    public InventSumDateFinancialDim_RU reportLine()
    {
        return reportLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportLineData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns <c>TmpInventTurnoverReportLineData_RU</c> table with Invent turnover report lines data.
    /// </summary>
    /// <returns>
    ///     <c>TmpInventTurnoverReportLineData_RU</c> table with Invent turnover report lines data.
    /// </returns>
    public TmpInventTurnoverReportLineData_RU reportLineData()
    {
        return reportLineData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _pack)
    {
        container base;
        boolean ret;
        Version version = RunBase::getVersion(_pack);

        switch (version)
        {
            case currentVersion:
                [version, 
                reportLineSetPack,
                reportLineDataSetPack,
                packedQuery,
                packedQueryFromDialog,
                fieldsPack,
                dimensionFocusId,
                base] = _pack;

                ret = super(base);
                this.unpackQueries(packedQuery, packedQueryFromDialog);
                fields = List::create(fieldsPack);
                
                this.fillRecordFromSet(reportLine,     Set::create(reportLineSetPack));
                this.fillRecordFromSet(reportLineData, Set::create(reportLineDataSetPack));
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillRecordFromSet</Name>
				<Source><![CDATA[
    private void fillRecordFromSet(Common _record, Set _recordSet)
    {
        if(_recordSet && _recordSet.elements() > 0)
        {
            SetEnumerator se = _recordSet.getEnumerator();

            _record.setTmp();

            while(se.moveNext())
            {
                _record.data(se.current());

                _record.doInsert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillRecordSet</Name>
				<Source><![CDATA[
    private container fillRecordSet(Common _record)
    {
        Set recordSet = new Set(Types::Record);
        
        while select _record
        {
            recordSet.add(_record);
        }

        return recordSet.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        fieldsPack = fields ? fields.pack(): conNull();
        packedQuery = query ? query.pack(): conNull();
        packedQueryFromDialog = queryFromDialog  ? queryFromDialog.pack(): conNull();

        reportLineSetPack = this.fillRecordSet(reportLine);
        reportLineDataSetPack = this.fillRecordSet(reportLineData);

        return [currentVersion,
                reportLineSetPack,
                reportLineDataSetPack,
                packedQuery,
                packedQueryFromDialog,
                fieldsPack,
                dimensionFocusId,
                super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPackedValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of the <c>InventTurnoverReportArgs_RU</c> object from packed values.
    /// </summary>
    /// <param name = "_packValues">The container with packed values.</param>
    /// <returns> The <c>InventTurnoverReportArgs_RU</c> object.</returns>
    public static InventTurnoverReportArgs_RU initFromPackedValues(container _packValues)
    {
        InventTurnoverReportArgs_RU ret = new InventTurnoverReportArgs_RU(null, null, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), null, null, 0);

        ret.unpack(_packValues);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>