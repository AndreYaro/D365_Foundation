<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EInvoiceMailSender_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EInvoiceMailSender_MX</c> class is responsible to send the electronic invoice in XML and PDF formats to a customer.
/// </summary>
class EInvoiceMailSender_MX
{
    EInvoiceParameters_MX       eInvoiceParameters;
    EInvoiceCFDIParameters_MX   eInvoiceCFDIParams;
    EInvoiceJour_MX             eInvoiceJour;

    #File
    protected const str TempFilePrefixName = 'XmlEinvoice_';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAttachmentFilePrefix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets file prefix for attachment.
    /// </summary>
    /// <returns>
    /// File prefix.
    /// </returns>
    protected str getAttachmentFilePrefix()
    {
        return TempFilePrefixName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEInvoiceMail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a instance of a <c>EInvoiceMail_MX</c> class.
    /// </summary>
    /// <param name="_attachmentName">
    /// The name of the attachment file
    /// </param>
    /// <param name="_attachmentContent">
    /// The content of the attachment file
    /// </param>
    /// <param name="_email">
    /// The email recipients.
    /// </param>
    /// <param name="_eMailDescription">
    /// The email identifier.
    /// </param>
    /// <returns>
    /// A <c>EInvoiceMail_MX</c> object.
    /// </returns>
    protected EInvoiceMail_MX getEInvoiceMail(
        FileName                _attachmentName,
        BinData                 _attachmentContent,
        SysEmailRecipients      _email,
        SysEmailDescriptionType _eMailDescription)
    {
        return EInvoiceMail_MX::construct(_attachmentName, _attachmentContent, _email, _eMailDescription);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the email from a given customer.
    /// </summary>
    /// <param name="_custTable">
    /// The <c>CustTable</c> record to retrieve the email.
    /// </param>
    /// <returns>
    /// The email from the customer.
    /// </returns>
    protected Email getPartyEmail(CustTable _custTable)
    {
        Email email;

        LogisticsLocationEntity primaryElectronicAddressLocation = DirParty::primaryElectronicAddressLocation(_custTable.Party, LogisticsElectronicAddressMethodType::Email);
        if (primaryElectronicAddressLocation)
        {
            email = primaryElectronicAddressLocation.getEmail();
        }
        return email;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>EInvoiceMailSender_MX</c> class
    /// </summary>
    /// <param name="_eInvoiceJour">
    /// The <c>EInvoiceJour_MX</c> record to be sent by email.
    /// </param>
    protected void new(EInvoiceJour_MX _eInvoiceJour)
    {
        eInvoiceCFDIParams  = EInvoiceCFDIParameters_MX::find();
        eInvoiceJour            = _eInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendMail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Send a XML file and/or a PDF file by eMail, according to the Electronic invoice parameters
    /// </summary>
    public void sendMail()
    {
        if (this.sendXMLFile() && eInvoiceCFDIParams.SendReportFile)
        {
            this.sendReportFile();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendReportFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Call the EInvoice report to generate a PDF file to by sent.
    /// </summary>
    protected void sendReportFile()
    {
        switch (eInvoiceJour.RefTableId)
        {
            case tableNum(CustInvoiceJour) :
                this.sendReportFromCustInvoiceJour();
                break;

            case tableNum(ProjInvoiceJour) :
                this.sendReportFromProjInvoiceJour();
                break;

            case tableNum(CustTrans) :
                this.sendReportFromCustTrans();
                break;

            case tableNum(CustSettlement) :
                this.sendReportFromCustSettlement();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendReport</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void sendReport(Common _record, str _menuItemName)
    {
        Args parameters = new Args();

        parameters.caller(this);
        parameters.record(_record);

        parameters.name(_menuItemName);
        new MenuFunction(_menuItemName, MenuItemType::Output).run(parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendReportFromCustInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Call the EInvoice report from a CustInvoiceJour to generate a PDF file to by sent.
    /// </summary>
    protected void sendReportFromCustInvoiceJour()
    {
        CustInvoiceJour custInvoiceJour = CustInvoiceJour::findRecId(eInvoiceJour.refRecId);

        if (custInvoiceJour.RefNum == RefNum::Cust)
        {
            this.sendReport(custInvoiceJour, menuitemOutputStr(EInvoiceFreeController_MX));
        }
        else
        {
            this.sendReport(custInvoiceJour, menuitemOutputStr(EInvoiceSalesController_MX));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendReportFromProjInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Call the EInvoice report from a ProjInvoiceJour to generate a PDF file to by sent.
    /// </summary>
    protected void sendReportFromProjInvoiceJour()
    {
        ProjInvoiceJour projInvoiceJour = ProjInvoiceJour::findRecId(eInvoiceJour.refRecId);
        this.sendReport(projInvoiceJour, menuitemOutputStr(EInvoiceProjController_MX));
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendReportFromCustTrans</Name>
				<Source><![CDATA[
    private void sendReportFromCustTrans()
    {
        CustTrans custTrans = CustTrans::find(eInvoiceJour.refRecId);
        this.sendReport(custTrans, menuitemOutputStr(EInvoiceCFDICustPaymentController_MX));
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendReportFromCustSettlement</Name>
				<Source><![CDATA[
    private void sendReportFromCustSettlement()
    {
        CustSettlement custSettlement = CustSettlement::find(eInvoiceJour.refRecId);
        this.sendReport(custSettlement, menuitemOutputStr(EInvoiceCFDICustSettleController_MX));
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendXMLFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the e-mail and attach XML file to be sent by the Job.
    /// </summary>
    /// <returns>
    /// True if success, otherwise false.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The directory of eMailParameters doesn't exists.
    /// </exception>
    protected boolean sendXMLFile()
    {
        SysEmailParameters  emailParameters;
        Email               email;
        CustTable           custTable;

        custTable = this.getCustTableFromEinvoiceJour();
        emailParameters     = SysEmailParameters::find();
        email = this.getPartyEmail(custTable);

        if (email)
        {
            BinData xmlBinData = new BinData();
            if (einvoiceJour.XMLDoc)
            {
                System.Byte[] bytes = System.Text.Encoding::get_UTF8().GetBytes(einvoiceJour.XMLDoc);
                using (var stream = new System.IO.MemoryStream(bytes))
                {
                    xmlBinData.setBinaryData(Binary::constructFromMemoryStream(stream));
                }
            }
            this.sendEinvoiceMail(email, this.getTempFileName(), xmlBinData);

            return true;
        }
        else
        {
            warning((strfmt("@SYS341172", custTable.AccountNum)));
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EInvoiceMailSender_MX construct(EInvoiceJour_MX _eInvoiceJour)
    {
        return new EInvoiceMailSender_MX(_eInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTableFromEinvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies the origin of the Eletronic invoice. If it was created from a <c>CustInvoiceJour</c>
    /// or a <c>ProjInvoiceJour</c> and returns the corresponding customer related to the invoice.
    /// </summary>
    /// <returns>
    /// The customer.
    /// </returns>
    protected CustTable getCustTableFromEinvoiceJour()
    {
        CustTable       custTable;

        switch (einvoiceJour.RefTableId)
        {
            case tableNum(CustInvoiceJour) :
                custTable = custTable::find(CustInvoiceJour::findRecId(eInvoiceJour.RefRecId).InvoiceAccount);
                break;

            case tableNum(ProjInvoiceJour) :
                custTable = custTable::find(ProjInvoiceJour::findRecId(eInvoiceJour.RefRecId).InvoiceAccount);
                break;

            case tableNum(CustTrans) :
                custTable = CustTable::find(CustTrans::find(eInvoiceJour.RefRecId).AccountNum);
                break;

            case tableNum(CustSettlement) :
                CustSettlement custSettlement = CustSettlement::find(eInvoiceJour.RefRecId);

                changecompany(custSettlement.OffsetCompany)
                {
                    custTable = CustTable::find(CustTrans::find(custSettlement.OffsetRecid).AccountNum);
                }
                break;
        }

        return custTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTempFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats a temporary xml file name based on invoice ID and time.
    /// </summary>
    /// <returns>
    /// A string value containing the name for the attachment file.
    /// </returns>
    protected str getTempFileName()
    {
        return strFmt("%1%2%3%4",
                        this.getAttachmentFilePrefix(),
                        this.getInvoiceIdFromEinvoiceJour(),
                        this.getTimeKey(),
                        '.xml');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTimeKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats a time key based on the current machine time.
    /// </summary>
    /// <returns>
    /// A string value containing the formatted time key.
    /// </returns>
    protected str getTimeKey()
    {
        return strFmt('_T%1', DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendEinvoiceMail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends the e-mail with the attachment.
    /// </summary>
    /// <param name="_email">
    /// The e-mail address of the sender.
    /// </param>
    /// <param name="_attachmentName">
    /// The name of the attachment file
    /// </param>
    /// <param name="_attachmentContent">
    /// The content of the attachment file
    /// </param>
    protected void sendEinvoiceMail(Email _email, FileName _attachmentName, BinData _attachmentContent)
    {
        EInvoiceMail_MX     eInvoiceMail;
        str                 eMailDescription;

        eMailDescription    = this.getAttachmentFilePrefix() + this.getInvoiceIdFromEinvoiceJour();
        eInvoiceMail        = this.getEInvoiceMail(_attachmentName, _attachmentContent, _email, eMailDescription);

        eInvoiceMail.addInvoiceNumberToMailSubject(this.getInvoiceIdFromEinvoiceJour());
        eInvoiceMail.sendMail();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceIdFromEinvoiceJour</Name>
				<Source><![CDATA[
    private InvoiceId getInvoiceIdFromEinvoiceJour()
    {
        InvoiceId invoiceId;

        switch (einvoiceJour.RefTableId)
        {
            case tableNum(CustInvoiceJour) :
                invoiceId = CustInvoiceJour::findRecId(einvoiceJour.RefRecId).InvoiceId;
                break;

            case tableNum(ProjInvoiceJour) :
                invoiceId = ProjInvoiceJour::findRecId(einvoiceJour.RefRecId).ProjInvoiceId;
                break;

            case tableNum(RetailStatementJour) :
                invoiceId = RetailStatementJour::findRecId(einvoiceJour.RefRecId).statementId;
                break;

            case tableNum(CustTrans) :
                invoiceId = CustTrans::find(einvoiceJour.RefRecId).Voucher;
                break;

            case tableNum(CustSettlement) :
                CustSettlement custSettlement = CustSettlement::find(eInvoiceJour.RefRecId);

                changecompany(custSettlement.OffsetCompany)
                {
                    invoiceId = CustTrans::find(custSettlement.OffsetRecid).Voucher;
                }
                break;
        }

        return invoiceId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>