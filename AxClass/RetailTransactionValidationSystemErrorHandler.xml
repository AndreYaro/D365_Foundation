<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionValidationSystemErrorHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailTransactionValidationSystemErrorHandler</c> class is meant to handle errors that happen during the validation but are not validation errors.
/// For example: any X++ exceptions or CLR exceptions would be considered system errors.
/// We need this type of error so that if this type of unexcepted errors happen, we can display a friendly message for the end user.
/// </summary>
internal static class RetailTransactionValidationSystemErrorHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>markTransactionAsSystemError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the ValidationStatus to Failed and creates a <c>RetailTransactionValidationError</c> representing the "system error".
    /// </summary>
    /// <param name = "_transactionTable">The transaction that caused the system error.</param>
    /// <param name = "_infoLogData">The infolog data to be saved to the DB as part of the diagnostic message.</param>
    public static void markTransactionAsSystemError(RetailTransactionTable _transactionTable, str _infoLogData)
    {
        ttsbegin;

        List validationErrorsToBeInserted = new List(Types::Record);

        validationErrorsToBeInserted.addEnd(RetailTransactionValidationSystemErrorHandler::createSystemErrorValidation(_transactionTable, _infoLogData));

        RetailTransactionValidationResult result = RetailTransactionValidationResult::construct(_transactionTable, validationErrorsToBeInserted);

        RetailTransactionValidationResultPersister persister = RetailTransactionValidationResultPersister::construct(_transactionTable);
        persister.persist(result);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSystemErrorValidation</Name>
				<Source><![CDATA[
    private static RetailTransactionValidationError createSystemErrorValidation(RetailTransactionTable _transactionTable, str _infoLogData)
    {
        RetailTransactionValidationError    validationErrorData;

        validationErrorData.TransactionId   = _transactionTable.TransactionId;
        validationErrorData.Channel         = _transactionTable.Channel;
        validationErrorData.Store           = _transactionTable.Store;
        validationErrorData.Terminal        = _transactionTable.Terminal;

        validationErrorData.ValidationType  = RetailTransactionValidationType::SystemError;
        
        str errMessage = "@Retail:RetailTransactionValidationSystemError";
        if (_infoLogData != '')
        {
            str formattedAdditonalData = strFmt("@Retail:RetailTransactionValidationSystemErrorAdditionalData", _infoLogData);
            errMessage = strFmt('%1 %2', errMessage, formattedAdditonalData);
        }

        validationErrorData.ErrorMessage    = errMessage;
        validationErrorData.LineNum         = 0;

        return validationErrorData;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>