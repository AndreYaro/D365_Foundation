<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HierarchyDetailEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  The <c>HierarchyDetailEventHandler</c> class handles all the events for the form extension <c>HierarchyDetail.Extension</c>
/// </summary>
class HierarchyDetailEventHandler
{
    boolean initialized;
    FormRun formElement;

    // Extension controls
    FormStringControl responsible_ResponsibilityId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>HierarchyDetailEventHandler</c> class and registers it with the base form.
    /// </summary>
    /// <param name = "_formRunInstance">An instance of the form being extended.</param>
    public void new(FormRun _formRunInstance)
    {
        initialized = false;
        formElement = _formRunInstance;

        // Register this extension with the main form
        formElement.registerExtensionInstance(classStr(HierarchyDetailEventHandler), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes this form extension handler instance
    /// </summary>
    private void init()
    {
        if (initialized)
        {
            return;
        }

        initialized = true;

        // Cache of the extension controls
        responsible_ResponsibilityId = formElement.design().controlName(formControlStr(HierarchyDetail, Responsible_ResponsibilityId)) as FormStringControl;

        // Register overrides
        responsible_ResponsibilityId.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(HierarchyDetailEventHandler, onLookupResponsibility), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onLookupResponsibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Custom override method for handling the Responsible_ResponsibilityId control's lookup.
    /// </summary>
    /// <param name = "_sender">The control initiating the lookup.</param>
    private void onLookupResponsibility(FormStringControl _sender)
    {
        FormRun hierarchyDetailForm = _sender.formRun();
        boolean isTemplate =  hierarchyDetailForm.parmIsTemplate();
        Hierarchy hierarchy = hierarchyDetailForm.parmHierarchyContext();
        HierarchyType hierarchyType   = hierarchy.HierarchyType;
        boolean isHierarchyCRM  = Hierarchy::isHierarchyTypeCRM(hierarchyType);

        if (isTemplate && isHierarchyCRM)
        {
            smmResponsibility::lookupResponsibilityHierarchyId(_sender, hierarchy.hierarchyId);
        }
        else
        {
            FormStringControl resposibilityId = _sender as FormStringControl;
            resposibilityId.lookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlGoToActivityProj_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the ctrlGoToActivityProj button is clicked and open <c>smmActivities</c> form.
    /// </summary>
    /// <param name="_sender">The <c>ctrlGoToActivityProj</c>button</param>
    /// <param name="_e">Form control event args</param>
    [FormControlEventHandler(formControlStr(HierarchyDetail, ctrlGoToActivityProj), FormControlEventType::Clicked)]
    public static void ctrlGoToActivityProj_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        FormRun element = _sender.formRun();

        FormDataSource HierarchyTreeTable_ds = element.dataSource(formDataSourceStr(HierarchyDetail, HierarchyTreeTable));
        smmUtility::openMenuItemForm(menuitemDisplayStr(ActivitiesMain), HierarchyTreeTable_ds.cursor(), element);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CtrlInquiry_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when CtrlInquiry button is clicked and intializes project related menu items.
    /// </summary>
    /// <param name="_sender">The <c>CtrlInquiry</c>button</param>
    /// <param name="_e">Form control event args</param>
    [FormControlEventHandler(formControlStr(HierarchyDetail, CtrlInquiry), FormControlEventType::Clicked)]
    public static void CtrlInquiry_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        FormRun hierarchyDetailForm = _sender.formRun();

        FormControl ctrlHourTrx = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, ctrlHourTrx)) as FormControl;
        FormControl ctrlExpenseTrx = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, ctrlExpenseTrx)) as FormControl;
        FormControl ctrlItemTrx = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, ctrlItemTrx)) as FormControl;
        FormControl ctrlHourForecast = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, ctrlHourForecast)) as FormControl;
        FormControl ctrlExpenseForecast = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, ctrlExpenseForecast)) as FormControl;
        FormControl ctrlItemForecast = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, ctrlItemForecast)) as FormControl;

        ctrlHourTrx.enabled(false);
        ctrlExpenseTrx.enabled(false);
        ctrlItemTrx.enabled(false);

        ctrlHourForecast.enabled(false);
        ctrlExpenseForecast.enabled(false);
        ctrlItemForecast.enabled(false);

        HierarchyTree hierarchyTree = hierarchyDetailForm.parmHierarchyTree();
        HierarchyTreeTable hierarchyTreeTable = hierarchyDetailForm.parmHierarchyTreeTable();
        if (hierarchyTree.isProject())
        {
            if (hierarchyTreeTable.ParentElementNumber)
            {
                ctrlHourTrx.enabled(true);
                ctrlExpenseTrx.enabled(true);
                ctrlItemTrx.enabled(true);

                ctrlHourForecast.enabled(true);
                ctrlExpenseForecast.enabled(true);
                ctrlItemForecast.enabled(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>HierarchyDetail_Pre_init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called before the initialization of the form.
    /// </summary>
    /// <param name="_args">The event args</param>
    [PreHandlerFor(formStr(HierarchyDetail), formMethodStr(HierarchyDetail, init))]
    public static void HierarchyDetail_Pre_init(XppPrePostArgs _args)
    {
        FormRun element = _args.getThis();

        HierarchyDetailEventHandler extensionInstance = new HierarchyDetailEventHandler(element);
    }

]]></Source>
			</Method>
			<Method>
				<Name>HierarchyDetail_Post_init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called after the form initialization to find the <c>ProjTable</c> record assosiated with hierarchy.
    /// </summary>
    /// <param name="_args">The event args</param>
    [PostHandlerFor(formStr(HierarchyDetail), formMethodStr(HierarchyDetail, init))]
    public static void HierarchyDetail_Post_init(XppPrePostArgs _args)
    {
        FormRun hierarchyDetailForm = _args.getThis();

        HierarchyDetailEventHandler extensionInstance = hierarchyDetailForm.getExtensionInstance(classStr(HierarchyDetailEventHandler));
        extensionInstance.init();

        boolean isTemplate = hierarchyDetailForm.parmIsTemplate();
        Hierarchy hierarchyContext = hierarchyDetailForm.parmhierarchyContext();
        if (hierarchyDetailForm.args().dataset() == tableNum(Hierarchy))
        {
            if (!isTemplate && hierarchyContext.HierarchyType == HierarchyType::Project)
            {
                ProjTable projTable = HierarchyLinkTable::findAssociation(hierarchyContext.HierarchyId, tableNum(ProjTable));
                hierarchyDetailForm.parmCommon(projTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ResponsibilityId_OnValidated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the field <c>smmActivities.ResponsibilityId</c>
    /// </summary>
    /// <param name="_sender">The form data object</param>
    /// <param name="_e">The form data field event args</param>
    [FormDataFieldEventHandler(formDataFieldStr(HierarchyDetail, smmActivities, ResponsibilityId), FormDataFieldEventType::Validated)]
    public static void ResponsibilityId_OnValidated(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        FormRun hierarchyDetailForm = _sender.datasource().formRun();
        FormDataSource smmActivities_ds = hierarchyDetailForm.dataSource(formDataSourceStr(HierarchyDetail, smmActivities));
        smmActivities smmActivities = smmActivities_ds.cursor();

        boolean isTemplate = hierarchyDetailForm.parmIsTemplate();
        HierarchyTreeTable hierarchyTreeTable = hierarchyDetailForm.parmHierarchyTreeTable();
        Hierarchy hierarchy = Hierarchy::find(hierarchyTreeTable.HierarchyId);
        HierarchyType hierarchyType   = hierarchy.HierarchyType;
        boolean isHierarchyCRM  = Hierarchy::isHierarchyTypeCRM(hierarchyType);

        if (isTemplate && isHierarchyCRM)
        {
            if (smmActivities.ResponsibilityId && !smmResponsibilityGroup::hierarchyResponsiblityIsEnabled(smmActivities.ResponsibilityId, hierarchyType))
            {
                throw error(strFmt("@SYS102408",smmActivities.ResponsibilityId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>HierarchyDetail_Post_setControlsTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called after the setControlsTask method on the form is done to initialize the project specific controls.
    /// </summary>
    /// <param name="args">The event args</param>
    [PostHandlerFor(formStr(HierarchyDetail), formMethodStr(HierarchyDetail, setControlsTask))]
    public static void HierarchyDetail_Post_setControlsTask(XppPrePostArgs _args)
    {
        FormRun hierarchyDetailForm = _args.getThis();
        FormControl taskDateTime = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, taskDateTime)) as FormControl;
        FormControl category = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, category)) as FormControl;
        FormControl responsible = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, responsible)) as FormControl;

        HierarchyTree hierarchyTree = hierarchyDetailForm.parmHierarchyTree();
        boolean isCallerQuotation = hierarchyDetailForm.parmIsCallerQuotation();

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && isCallerQuotation)
        {
            taskDateTime.visible(false);
        }

        category.visible(!hierarchyTree.isProject());
        responsible.visible(!hierarchyTree.isProject());
    }

]]></Source>
			</Method>
			<Method>
				<Name>HierarchyDetail_Post_setControlByType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called after setControlByType on the form to hide or show non case related controls based on the hierarchy type.
    /// </summary>
    /// <param name="args">The event args</param>
    [PostHandlerFor(formStr(HierarchyDetail), formMethodStr(HierarchyDetail, setControlByType))]
    public static void HierarchyDetail_Post_setControlByType(XppPrePostArgs _args)
    {
        FormRun hierarchyDetailForm = _args.getThis();
        FormControl CtrlInquiry = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, CtrlInquiry)) as FormControl;
        FormControl tabExitCriteria = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, tabExitCriteria)) as FormControl;
        FormControl ctrlGoToActivityProj = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, ctrlGoToActivityProj)) as FormControl;
        FormControl ExpressionBuilderGroup = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, ExpressionBuilderGroup)) as FormControl;
        FormControl responsible = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, responsible)) as FormControl;
        FormControl responsible_ResponsibilityId = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, responsible_ResponsibilityId)) as FormControl;
        FormControl ctrlTree = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, ctrlTree)) as FormControl;
        FormControl RightButtonGroup = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, RightButtonGroup)) as FormControl;
        FormStringControl purpose_Purpose = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, purpose_Purpose)) as FormStringControl;
        FormStringControl memo_UserMemo = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, memo_UserMemo)) as FormStringControl;
        FormControl ctrlNewTaskProj = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, ctrlNewTaskProj)) as FormControl;
        FormControl ctrlDeleteProj = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, ctrlDeleteProj)) as FormControl;
        FormControl ctrlTreeActionCopyFrom = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, ctrlTreeActionCopyFrom)) as FormControl;
        FormControl ctrlTreeActionCopyTo = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, ctrlTreeActionCopyTo)) as FormControl;
        FormControl identification_IsRequired = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, identification_IsRequired)) as FormControl;

        HierarchyTree hierarchyTree = hierarchyDetailForm.parmHierarchyTree();
        boolean isTemplate = hierarchyDetailForm.parmIsTemplate();
        boolean isCallerQuotation = hierarchyDetailForm.parmIsCallerQuotation();
        Hierarchy hierarchyContext = hierarchyDetailForm.parmhierarchyContext();
        Common common =  hierarchyDetailForm.parmCommon();
        boolean hasCreateAccess = hierarchyDetailForm.parmHasCreateAccess();
        smmCampaignTable    smmCampaignTable;
        smmLeadTable        smmLeadTable;
        smmOpportunityTable smmOpportunityTable;

        ctrlGoToActivityProj.visible(false);

        switch (hierarchyContext.HierarchyType)
        {
            case HierarchyType::Project :
                responsible_ResponsibilityId.visible(true);
                ctrlInquiry.visible(!isTemplate);
                ctrlGoToActivityProj.visible(!isTemplate);
                ctrlTree.allowEdit(true);
                RightButtonGroup.visible(isTemplate);

                purpose_Purpose.label("@SYS300863");
                memo_UserMemo.label("@SYS25589");

                hierarchyDetailForm.parmNodeType(ElementNodeType::Activity);
                hierarchyDetailForm.parmActivityCategory(smmActivityCategory::Task);

                ctrlNewTaskProj.visible(!isTemplate && hasCreateAccess);
                ctrlDeleteProj.visible(!isTemplate && hasCreateAccess);

                ctrlGoToActivityProj.visible(!isTemplate);

                // set copy from and save as template menu access
                ctrlTreeActionCopyFrom.enabled(true);

                if (HierarchyTreeTable::childNodeCount(hierarchyTree.parmHierarchyId(), HierarchyTreeTable::findRootElementNumber(hierarchyTree.parmHierarchyId())) == 0 )
                {
                    ctrlTreeActionCopyTo.enabled(false);
                }

                // If there are softbooking, hardbooking or assignment in the activities, don't allow to overwrite
                ProjTable project = HierarchyLinkTable::findAssociation(hierarchyTree.parmHierarchyId(), tableNum(ProjTable));
                if (project && ProjActivityAssignment::existInProject(project.ProjId))
                {
                    ctrlTreeActionCopyFrom.enabled(false);
                }
                break;

            case HierarchyType::Campaign :
                CtrlInquiry.visible(false);
                identification_IsRequired.visible(true);
                responsible_ResponsibilityId.visible(true);
                smmCampaignTable = HierarchyLinkTable::findAssociation(hierarchyTree.parmHierarchyId(), tableNum(smmCampaignTable));

                if (smmCampaignTable)
                {
                    common = smmCampaignTable;
                    ctrlTree.allowEdit(smmCampaignTable.CampaignStatus != smmCampaignStatus::Cancelled && smmCampaignTable.CampaignStatus != smmCampaignStatus::Closed);
                    tabExitCriteria.allowEdit(smmCampaignTable.CampaignStatus != smmCampaignStatus::Cancelled && smmCampaignTable.CampaignStatus != smmCampaignStatus::Closed);
                    RightButtonGroup.enabled(smmCampaignTable.CampaignStatus != smmCampaignStatus::Cancelled
                        && smmCampaignTable.CampaignStatus != smmCampaignStatus::Closed);
                }
                break;

            case HierarchyType::Lead :
                CtrlInquiry.visible(false);
                identification_IsRequired.visible(true);
                responsible_ResponsibilityId.visible(true);
                smmLeadTable = HierarchyLinkTable::findAssociation(hierarchyTree.parmHierarchyId(), tableNum(smmLeadTable));

                if (smmLeadTable)
                {
                    common = smmLeadTable;
                    ctrlTree.allowEdit(smmLeadTable.Status == smmLeadStatus::Open);
                    tabExitCriteria.allowEdit(smmLeadTable.Status == smmLeadStatus::Open);
                    RightButtonGroup.enabled(smmLeadTable.Status == smmLeadStatus::Open);
                }
                break;

            case HierarchyType::Opportunity :
                CtrlInquiry.visible(false);

                identification_IsRequired.visible(true);
                responsible_ResponsibilityId.visible(true);
                ExpressionBuilderGroup.visible(true);

                smmOpportunityTable = HierarchyLinkTable::findAssociation(hierarchyTree.parmHierarchyId(), tableNum(smmOpportunityTable));

                if (smmOpportunityTable)
                {
                    common = smmOpportunityTable;
                    ctrlTree.allowEdit(smmOpportunityTable.Status == smmOpportunityStatus::Active);
                    tabExitCriteria.allowEdit(smmOpportunityTable.Status == smmOpportunityStatus::Active);
                    RightButtonGroup.enabled(smmOpportunityTable.Status == smmOpportunityStatus::Active);
                    ExpressionBuilderGroup.allowEdit(smmOpportunityTable.Status == smmOpportunityStatus::Active);
                }
                break;

            case HierarchyType::Case :
                CtrlInquiry.visible(false);
                responsible_ResponsibilityId.visible(true);
                break;

            default :
                break;
        }

        if (common)
        {
            hierarchyDetailForm.parmCommon(common);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>HierarchyDetail_Post_setFieldAccess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called after setFieldAccess on the form to set access for project specific fields.
    /// </summary>
    /// <param name="_args">The event args</param>
    [PostHandlerFor(formStr(HierarchyDetail), formMethodStr(HierarchyDetail, setFieldAccess))]
    public static void HierarchyDetail_Post_setFieldAccess(XppPrePostArgs _args)
    {
        FormRun hierarchyDetailForm = _args.getThis();
        FormControl CtrlInquiry = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, CtrlInquiry)) as FormControl;
        FormControl tabExitCriteria = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, tabExitCriteria)) as FormControl;
        FormControl ctrlGoToActivityProj = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, ctrlGoToActivityProj)) as FormControl;
        FormControl tabGeneral = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, tabGeneral)) as FormControl;
        FormControl ctrlDetail = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, responsible)) as FormControl;
        FormControl ctrlDeleteProj = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, ctrlDeleteProj)) as FormControl;
        FormControl smmProcessStage_Status = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, smmProcessStage_Status)) as FormControl;
        FormControl groupNode = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, groupNode)) as FormControl;

        HierarchyTree hierarchyTree = hierarchyDetailForm.parmHierarchyTree();
        boolean isTemplate = hierarchyDetailForm.parmIsTemplate();
        hierarchyTreeTable hierarchyTreeTable = hierarchyDetailForm.parmHierarchyTreeTable();
        Hierarchy hierarchyContext = hierarchyDetailForm.parmhierarchyContext();

        groupNode.visible(!hierarchyTree.isProject());

        ctrlGoToActivityProj.enabled(true);

        if (hierarchyTreeTable.ElementNodeType == ElementNodeType::Node)
        {
            if (!isTemplate)
            {
                ctrlInquiry.enabled(true);

                if (hierarchyTree.isProject())
                {
                    ctrlDetail.visible(false);
                    tabGeneral.visible(false);
                    ctrlDeleteProj.enabled(false);
                    ctrlGoToActivityProj.enabled(false);
                }
            }

            if (Hierarchy::isHierarchyTypeCRM(hierarchyContext.HierarchyType) &&
                hierarchyContext.HierarchyId == hierarchyTreeTable.HierarchyId && hierarchyTree.isFirstLevel())
            {
                // Show exit criteria on first level nodes only
                tabExitCriteria.visible(true);
                smmProcessStage_Status.visible(!hierarchyContext.IsTemplate);
            }
        }
        else
        {
            ctrlInquiry.enabled(!isTemplate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>HierarchyTreeTable_OnValidatingDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates deletion of <c>HierarchyTreeTable</c> record.
    /// </summary>
    /// <param name="_sender">The sending form data source</param>
    /// <param name="_e">The form data source event </param>
    [FormDataSourceEventHandler(formDataSourceStr(HierarchyDetail, HierarchyTreeTable), FormDataSourceEventType::ValidatingDelete)]
    public static void HierarchyTreeTable_OnValidatingDelete(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun hierarchyDetailForm = _sender.formRun();
        HierarchyTree hierarchyTree = hierarchyDetailForm.parmHierarchyTree();
        boolean isTemplate = hierarchyDetailForm.parmIsTemplate();
        hierarchyTreeTable hierarchyTreeTable = hierarchyDetailForm.parmHierarchyTreeTable();
        Hierarchy hierarchyContext = hierarchyDetailForm.parmhierarchyContext();
        if (hierarchyContext.RecId && Hierarchy::isHierarchyTypeCRM(hierarchyContext.HierarchyType))
        {
            if (hierarchyTreeTable.ElementNodeType == ElementNodeType::Node)
            {
                ElementNumber rootElementNumber = HierarchyTreeTable::findRootElementNumber(hierarchyTreeTable.HierarchyId);

                if (hierarchyTreeTable.ParentElementNumber == rootElementNumber &&
                    HierarchyTreeTable::findAllChildrenForParentElement(hierarchyTreeTable.HierarchyId,rootElementNumber).elements() == 1)
                {
                    // There should be at least one level under the root node.
                   throw error("@SYS112838");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivities_OnValidatingWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the writing of <c>smmActivities</c> record.
    /// </summary>
    /// <param name="_sender">The form data source</param>
    /// <param name="_e">form data source event</param>
    [FormDataSourceEventHandler(formDataSourceStr(HierarchyDetail, smmActivities), FormDataSourceEventType::ValidatingWrite)]
    public static void smmActivities_OnValidatingWrite(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun hierarchyDetailForm = _sender.formRun();

        HierarchyTreeTable hierarchyTreeTable = hierarchyDetailForm.parmHierarchyTreeTable();
        FormDataSource smmActivities_ds = hierarchyDetailForm.dataSource(formDataSourceStr(HierarchyDetail, smmActivities));
        smmActivities smmActivities = smmActivities_ds.cursor();

        if (smmActivities.Purpose && hierarchyTreeTable.ElementNodeType == ElementNodeType::Node &&
                Hierarchy::isHierarchyTypeCRM(Hierarchy::find(hierarchyTreeTable.HierarchyId).HierarchyType) &&
                !HierarchyTree::isFirstLevelNameUnique(hierarchyTreeTable.ParentElementNumber, hierarchyTreeTable.ElementNumber, smmActivities.Purpose))
        {
            throw error("@SYS108142");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivities_OnInitValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// This event is called during the initialization of the data source for project.
    /// </summary>
    /// <param name="_sender">The form data source</param>
    /// <param name="_e">The form data source event</param>
    [FormDataSourceEventHandler(formDataSourceStr(HierarchyDetail, smmActivities), FormDataSourceEventType::InitValue)]
    public static void smmActivities_OnInitValue(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun hierarchyDetailForm = _sender.formRun();

        ElementNodeType nodeType = hierarchyDetailForm.parmNodeType();
        smmActivityCategory activityCategory = hierarchyDetailForm.parmActivityCategory();
        HierarchyTree hierarchyTree =  hierarchyDetailForm.parmhierarchyTree();

        smmActivities smmActivities = _sender.cursor();

        if (nodeType != ElementNodeType::Node
                && activityCategory == smmActivityCategory::Task
                && hierarchyTree.isProject())
        {
            smmActivities.Purpose = "@SYS89987";
        }

        switch (hierarchyTree.parmHierarchyType())
        {
            case HierarchyType::Project:
                boolean isCallerQuotation = hierarchyDetailForm.parmIsCallerQuotation();
                if (isConfigurationkeyEnabled(configurationKeyNum(Project))? !isCallerQuotation : true)
                {
                    ProjTable projTable = hierarchyDetailForm.parmCommon();
                    smmActivities.initFromProjTable(projTable);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmProcessStage_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called after the activation of the data source to initialize the SysExpressionBuilderControl control.
    /// </summary>
    /// <param name="_sender">The form data source</param>
    /// <param name="_e">The form data source event</param>
    [FormDataSourceEventHandler(formDataSourceStr(HierarchyDetail, smmProcessStage), FormDataSourceEventType::Activated)]
    public static void smmProcessStage_OnActivated(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun hierarchyDetailForm = _sender.formRun();

        Hierarchy hierarchyContext = hierarchyDetailForm.parmHierarchyContext();

        if (hierarchyContext.HierarchyType == HierarchyType::Opportunity)
        {
            SysExpressionBuilderControl SysExpressionBuilderControl = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, SysExpressionBuilderControl)) as SysExpressionBuilderControl;
            FormControl ExpressionBuilderGroup = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, ExpressionBuilderGroup)) as FormControl;
            FormDataSource smmProcessStage_ds = _sender;
            ExpressionBuilderGroup.enabled(true);
            smmProcessStage smmProcessStageActive = smmProcessStage_ds.cursor() as smmProcessStage;
            SysExpressionBuilderControl.InitializeExpression(smmProcessStageActive.ExpressionTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>NewButtonsMenu_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the NewButtonsMenu is clicked to enable and disable buttons for project.
    /// </summary>
    /// <param name="sender">The NewButtonsMenu button</param>
    /// <param name="e">form control event args</param>
    [FormControlEventHandler(formControlStr(HierarchyDetail, NewButtonsMenu), FormControlEventType::Clicked)]
    public static void NewButtonsMenu_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        FormRun hierarchyDetailForm = _sender.formRun();

        boolean         createNodeEnable = false;
        boolean         createActionEnable  = false;
        boolean         createAppointmentEnable = false;
        boolean         createEventEnable = false;
        boolean         createTaskEnable = false;

        FormControl ctrlTree = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, ctrlTree)) as FormControl;
        FormControl ctrlCreateNode = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, ctrlCreateNode)) as FormControl;
        FormControl ctrlNewAction = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, ctrlNewAction)) as FormControl;
        FormControl ctrlNewAppointment = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, ctrlNewAppointment)) as FormControl;
        FormControl ctrlNewEvent = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, ctrlNewEvent)) as FormControl;
        FormControl ctrlNewTask = hierarchyDetailForm.design().controlName(formControlStr(HierarchyDetail, ctrlNewTask)) as FormControl;

        if (ctrlTree.allowEdit())
        {
            HierarchyTree hierarchyTree = hierarchyDetailForm.parmhierarchyTree();
            boolean isCRM = Hierarchy::isHierarchyTypeCRM(hierarchyTree.parmHierarchyType());

            //If node, allow create node if not Project
            if (hierarchyTree.isNode())
            {
                if (isCRM && hierarchyTree.isRoot()
                    && hierarchyDetailForm.parmIsTemplate() == hierarchyTree.parmIsTemplateUsed())
                {
                    // Do not create level
                    createNodeEnable = false;
                }
                else
                {
                    if (!hierarchyTree.isProject())
                    {
                        createNodeEnable = true;
                    }
                }

                // Do not allow to create activity on first level node for CRM
                createActionEnable = !hierarchyTree.isRoot() && isCRM;
                createAppointmentEnable = !hierarchyTree.isRoot() && isCRM;
                createEventEnable = !hierarchyTree.isRoot() && isCRM;
                createTaskEnable = !hierarchyTree.isRoot() && isCRM;
            }

            // only allow create task for Project
            if (hierarchyTree.isProject())
            {
                HierarchyTreeTable hierarchyTreeTable = hierarchyDetailForm.parmhierarchyTreeTable();
                createTaskEnable = true;

                if (!hierarchyDetailForm.parmIsTemplate()
                    && HierarchyTreeTable_Extension::existActivityHourTrx(smmActivities::findWithRecId(hierarchyTreeTable.RefRecId).ActivityNumber))
                {
                    createTaskEnable = false;
                }
            }
        }
        ctrlCreateNode.enabled(createNodeEnable);
        ctrlNewAction.enabled(createActionEnable);
        ctrlNewAppointment.enabled(createAppointmentEnable);
        ctrlNewEvent.enabled(createEventEnable);
        ctrlNewTask.enabled(createTaskEnable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlTreeActionCopyFrom_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when ctrlTreeActionCopyFrom button is clicked to validate the action for project hierarchy.
    /// </summary>
    /// <param name="_sender">The ctrlTreeActionCopyFrom button</param>
    /// <param name="_e">form control event args</param>
    [FormControlEventHandler(formControlStr(HierarchyDetail, ctrlTreeActionCopyFrom), FormControlEventType::Clicked)]
    public static void ctrlTreeActionCopyFrom_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        FormRun hierarchyDetailForm = _sender.formRun();
        Common common = hierarchyDetailForm.parmCommon();
        boolean absTemplate = hierarchyDetailForm.parmAbsTemplate();
        boolean isCallerQuotation = hierarchyDetailForm.parmIsCallerQuotation();
        FormDataSource smmActivities_ds = hierarchyDetailForm.dataSource(formDataSourceStr(HierarchyDetail, smmActivities));
        smmActivities smmActivities = smmActivities_ds.cursor();

        SalesQuotationTable salesQuotationTable;
        ProjTable projTable;
        if (common is ProjTable)
        {
            projTable = common as ProjTable;
        }
        else if (common is SalesQuotationTable)
        {
            salesQuotationTable = common as SalesQuotationTable;
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            if (!absTemplate && projTable && !projTable.psaSchedCalendarId && !isCallerQuotation)
            {
                throw error ("@PSA11087");
            }

            if (smmActivities.ActivityNumber || projTable.ProjId)
            {
                if (ActivityFacade::existsAnyAssignmentForActivity(smmActivities.RecId))
                {
                    throw error("@PSA11114");
                }
            }

            if (isCallerQuotation && !salesQuotationTable.psaSchedCalendarId)
            {
                throw error ("@PSA11113");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CtrlTree_OnSelectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when selection is changed on the ctrltree to enable the creation of <c>hierarchyTreeTable</c> record.
    /// </summary>
    /// <param name="_sender">The CtrlTree control</param>
    /// <param name="_e">The form control event args</param>
    [FormControlEventHandler(formControlStr(HierarchyDetail, CtrlTree), FormControlEventType::SelectionChanged)]
    public static void CtrlTree_OnSelectionChanged(FormControl _sender, FormControlEventArgs _e)
    {
        FormRun hierarchyDetailForm = _sender.formRun();
        
        hierarchyTreeTable hierarchyTreeTable = hierarchyDetailForm.parmhierarchyTreeTable();
        hierarchyTree hierarchyTree = hierarchyDetailForm.parmhierarchyTree();
        FormDataSource hierarchyTreeTable_ds = hierarchyDetailForm.dataSource(formDatasourceStr(HierarchyDetail, HierarchyTreeTable));

        if (hierarchyTreeTable.ElementNodeType == ElementNodeType::Activity && !hierarchyTree.isProject())
        {
            hierarchyTreeTable_ds.allowCreate(false);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>