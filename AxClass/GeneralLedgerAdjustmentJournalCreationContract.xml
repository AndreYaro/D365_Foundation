<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GeneralLedgerAdjustmentJournalCreationContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Contract class constants data necessary to create a general journal for adjustments.
/// </summary>
internal final class GeneralLedgerAdjustmentJournalCreationContract
{
    private LedgerJournalNameId journalNameId;
    private Name journalDescription;
    private DataAreaId journalDataArea;
    private TransDate journalTransactionDate;
    private boolean shouldUseExistingAccountingDate;
    private GeneralLedgerAdjustmentProposedAdjustmentTmp adjustmentRecords;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>newForAdjustmentJournalCreation</Name>
				<Source><![CDATA[
    internal static GeneralLedgerAdjustmentJournalCreationContract newForAdjustmentJournalCreation(
        GeneralLedgerAdjustmentProposedAdjustmentTmp _adjustmentRecords,
        JournalNameId _journalName,
        DataAreaId _journalDataArea,
        TransDate _journalTransactionDate,
        Name _journalDescription,
        boolean _shouldUseExistingAccountingDate)
    {
        GeneralLedgerAdjustmentJournalCreationContract adjustmentJournalCreationContract = new GeneralLedgerAdjustmentJournalCreationContract();
        adjustmentJournalCreationContract.adjustmentRecords = _adjustmentRecords;
        adjustmentJournalCreationContract.journalNameId = _journalName;
        adjustmentJournalCreationContract.journalDescription = _journalDescription;
        adjustmentJournalCreationContract.journalDataArea = _journalDataArea;
        adjustmentJournalCreationContract.journalTransactionDate = _journalTransactionDate;
        adjustmentJournalCreationContract.shouldUseExistingAccountingDate = _shouldUseExistingAccountingDate;

        return adjustmentJournalCreationContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalNameId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the journal name to be assigned to the general journal on construction.
    /// </summary>
    /// <returns>A <c>LedgerJournalNameId</c> value.</returns>
    internal LedgerJournalNameId getJournalNameId()
    {
        return journalNameId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalDataArea</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the DataArea in which the general journal will be created.
    /// </summary>
    /// <returns>A <c>DataAreaId</c> value.</returns>
    internal DataAreaId getJournalDataArea()
    {
        return journalDataArea;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description assigned to the general journal.
    /// </summary>
    /// <returns>A <c>Name</c> value.</returns>
    internal Name getJournalDescription()
    {
        return journalDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalTransactionDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction date to be assigned to each transaction within the general journal.
    /// </summary>
    /// <returns>A <c>TransDate</c> value.</returns>
    internal TransDate getJournalTransactionDate()
    {
        return journalTransactionDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUseExistingAccountingDateForJournalTransactionDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets whether or not the original accounting date on the marked adjustments should be used as the transaction
    /// date on each transaction within the general journal.
    /// </summary>
    /// <returns>True if the original accounting date should be used; else, false.</returns>
    internal boolean shouldUseExistingAccountingDateForJournalTransactionDate()
    {
        return shouldUseExistingAccountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustmentRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a temp table containing each adjustment record to be written to the general journal.
    /// </summary>
    /// <returns>A temp table instance of <c>SubledgerAdjustmentProposedAdjustmentTmp</c></returns>
    internal GeneralLedgerAdjustmentProposedAdjustmentTmp getAdjustmentRecords()
    {
        return adjustmentRecords;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>