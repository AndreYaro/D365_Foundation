<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SettlementCashDiscountAmounts</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SettlementCashDiscountAmounts</c> class represents a collection of cash discount amounts of transactions participating in the settlement.
/// </summary>
public class SettlementCashDiscountAmounts
{
    private Map settlementCashDiscountAmountsElementsByCreditOpenRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
        settlementCashDiscountAmountsElementsByCreditOpenRecId = new Map(Types::Int64, Types::Class); // RecId + Set
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SettlementCashDiscountAmounts construct()
    {
        SettlementCashDiscountAmounts instance = new SettlementCashDiscountAmounts();
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds new element to the collection.
    /// </summary>
    /// <param name = "_discCreditOpenRecId">The record ID of the open credit transaction.</param>
    /// <param name = "_discDebitRecId">The record ID of the debit transaction.</param>
    /// <param name = "_discDebitOpenRecId">The record ID of the open debit transaction.</param>
    /// <param name = "_discDebitCompany">The company of the debit transaction.</param>
    /// <param name = "_cashDiscAmountMst">The amount of the cash discount in the accounting currency.</param>
    /// <param name = "_cashDiscTransCodeDebit">The cash discount code.</param>
    /// <param name = "_settlementGroup">The settlement group.</param>
    /// <param name = "_voucher">The voucher of the settlement transaction.</param>
    public void add(
        RecId _discCreditOpenRecId,
        RecId _discDebitRecId,
        RecId _discDebitOpenRecId,
        CompanyId _discDebitCompany,
        AmountMST _cashDiscAmountMst,
        CashDiscCode _cashDiscTransCodeDebit,
        Counter _settlementGroup,
        Voucher _voucher)
    {
        Debug::assert(_voucher != '');

        if (_cashDiscAmountMst > 0.0)
        {
            SettlementCashDiscountAmountsElement element = SettlementCashDiscountAmountsElement::construct(
                _discCreditOpenRecId,
                _discDebitRecId,
                _discDebitOpenRecId,
                _discDebitCompany,
                _cashDiscAmountMst,
                _cashDiscTransCodeDebit,
                _settlementGroup,
                _voucher);

            Set bucket;

            if (settlementCashDiscountAmountsElementsByCreditOpenRecId.exists(_discCreditOpenRecId))
            {
                bucket = settlementCashDiscountAmountsElementsByCreditOpenRecId.lookup(_discCreditOpenRecId);
            }
            else
            {
                bucket = new Set(Types::Class);
                settlementCashDiscountAmountsElementsByCreditOpenRecId.insert(_discCreditOpenRecId, bucket);
            }

            bucket.add(element);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getElementsFor</Name>
				<Source><![CDATA[
    public Set getElementsFor(RecId _discCreditOpenRecId)
    {
        Set bucket;

        if (settlementCashDiscountAmountsElementsByCreditOpenRecId.exists(_discCreditOpenRecId))
        {
            bucket = settlementCashDiscountAmountsElementsByCreditOpenRecId.lookup(_discCreditOpenRecId);
        }
        else
        {
            bucket = new Set(Types::Class);
        }

        return bucket;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>