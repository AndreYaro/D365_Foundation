<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjIntercompanyInvoiceOrigTimesheet</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class maps the values from an intercompany timesheet line to be used when generating an
/// invoice against the borrowing legal entity.
/// </summary>
public class ProjIntercompanyInvoiceOrigTimesheet implements ProjIntercompanyInvoiceOrigTrans
{
    TSTimesheetTrans            tsTrans;
    TSTimesheetLineWeek         tsLineWeek;
    TSTimesheetLine             tsLine;
    AmountCur                   indirectComponentInvoiceAmount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getActivityNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the activity number of the timesheet line.
    /// </summary>
    /// <returns>
    /// The activity number of the timesheet line.
    /// </returns>
    public ProjActivityNumber getActivityNumber()
    {
        return tsLine.ActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total line amount to be invoiced to the other legal entity.
    /// </summary>
    /// <returns>
    /// The line amount to be invoiced to the other legal entity.
    /// </returns>
    public AmountCur getAmountCur()
    {
        return CurrencyExchangeHelper::amount(tsTrans.SalesPrice * tsTrans.Hours + indirectComponentInvoiceAmount, tsLine.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code in which the cost is incurred in the lending company.
    /// </summary>
    /// <returns>
    /// The currency code in which the cost is incurred in the lending company.
    /// </returns>
    public CurrencyCode getCostCurrency()
    {
        return Ledger::accountingCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the cost price of the transaction incurred in the lending company.
    /// </summary>
    /// <returns>
    /// The cost price of the transaction incurred in the lending company.
    /// </returns>
    public Amount getCostPrice()
    {
        return tsTrans.CostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code of the transaction, which is the one that the borrowing legal entity will be invoiced.
    /// </summary>
    /// <returns>
    /// The currency code that the transaction should be invoiced.
    /// </returns>
    public CurrencyCode getCurrencyCode()
    {
        return tsLine.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data area ID of the lending legal entity.
    /// </summary>
    /// <returns>
    /// The data area ID of the lending legal entity.
    /// </returns>
    public DataAreaId getDataAreaId()
    {
        return tsLine.dataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a default dimension set of the transaction.
    /// </summary>
    /// <returns>
    /// A description of the transaction.
    /// </returns>
    public LedgerDefaultDimensionValueSet getDefaultDimension()
    {
        return tsLine.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a description of the transaction.
    /// </summary>
    /// <returns>
    /// A description of the transaction.
    /// </returns>
    public Description getDescription()
    {
        return tsTrans.ExtComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinalSalesCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency in which the sales price to the end customer is expressed in.
    /// </summary>
    /// <returns>
    /// The currency in which the sales price to the end customer is expressed in.
    /// </returns>
    public CurrencyCode getFinalSalesCurrencyCode()
    {
        return tsLine.ProjCompanySalesCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinalSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales price that the final customer will be charged for this item.
    /// </summary>
    /// <returns>
    /// The sales price that the final customer will be charged for this item.
    /// </returns>
    public AmountCur getFinalSalesPrice()
    {
        return tsTrans.ProjCompanySalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIndirectCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the invoice indirect component amount.
    /// </summary>
    /// <returns>
    /// The invoice indirect component amount of the transaction.
    /// </returns>
    public Amount getIndirectCost()
    {
        return indirectComponentInvoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLinePropertyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the line property ID of the transaction.
    /// </summary>
    /// <returns>
    /// The line property ID of the transaction.
    /// </returns>
    public ProjLinePropertyId getLinePropertyId()
    {
        return tsLine.LinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the project category ID of the transaction.
    /// </summary>
    /// <returns>
    /// The project category ID of the transaction.
    /// </returns>
    public ProjCategoryId getProjectCategoryId()
    {
        return tsLine.CategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data area ID of the borrowing legal entity.
    /// </summary>
    /// <returns>
    /// The data area ID of the borrowing legal entity.
    /// </returns>
    public DataAreaId getProjectDataAreaId()
    {
        return tsLine.ProjectDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the related project in the borrowing legal entity.
    /// </summary>
    /// <returns>
    /// The ID of the related project in the borrowing legal entity.
    /// </returns>
    /// <remarks>
    /// This is the project where the costs will be incurred at the borrowing legal entity side.
    /// </remarks>
    public ProjId getProjectId()
    {
        return tsLine.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the number of hours in this transactions.
    /// </summary>
    /// <returns>
    /// The number of hours in this transactions.
    /// </returns>
    public Qty getQuantity()
    {
        return tsTrans.Hours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the timesheet line.
    /// </summary>
    /// <returns>
    /// The record ID of the intercompany transaction.
    /// </returns>
    public RefRecId getRecId()
    {
        return tsTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales price that the other legal entity is expected to pay for the labor.
    /// </summary>
    /// <returns>
    /// The sales price that the other legal entity is expected to pay for the labor, not including indirect costs.
    /// </returns>
    public Amount getSalesPrice()
    {
        return tsTrans.SalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the source document line associated with the transaction.
    /// </summary>
    /// <returns>
    /// The record ID of the source document line associated with the transaction.
    /// </returns>
    public SourceDocumentLineRecId getSourceDocumentLine()
    {
        return tsTrans.SourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item sales tax group that will be used in the invoice line for this transaction.
    /// </summary>
    /// <returns>
    /// The item sales tax group that will be used in the invoice line for this transaction.
    /// </returns>
    public TaxItemGroup getTaxItemGroup()
    {
        ProjCategoryId              categoryId;
        ProjCategory                category;

        categoryId  = ProjIntercompanyParameters::getValidCategory(this.getProjectCategoryId(), this.getProjectDataAreaId(), this.getTransType());
        category    = ProjCategory::find(categoryId);

        return category.TaxItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxGroup</Name>
				<Source><![CDATA[
    public TaxGroup getTaxGroup()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction date.
    /// </summary>
    /// <returns>
    /// The transaction date.
    /// </returns>
    public TransDate getTransDate()
    {
        return tsTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the origin of the transaction.
    /// </summary>
    /// <returns>
    /// The origin of the transaction.
    /// </returns>
    public ProjTransactionOrigin getTransOrigin()
    {
        return ProjOrigin::Timesheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the type of the project transaction.
    /// </summary>
    /// <returns>
    /// The type of the project transaction.
    /// </returns>
    public ProjTransType getTransType()
    {
        return ProjTransType::Hour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnitOfMeasureSymbol</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the symbol of the unit of measure in which the quantity of this item is expressed.
    /// </summary>
    /// <returns>
    /// The symbol of the unit of measure in which the quantity of this item is expressed.
    /// </returns>
    public UnitOfMeasureSymbol getUnitOfMeasureSymbol()
    {
        UnitOfMeasure unitOfMeasure;

        unitOfMeasure = UnitOfMeasure::findByInternalCode(UnitOfMeasureCodeSymbol::Hours);
        if (!unitOfMeasure)
        {
            throw error(strFmt("@SYS4005066", UnitOfMeasureCodeSymbol::Hours));
        }

        return unitOfMeasure.Symbol;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnitPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the unit price of the resource being invoiced.
    /// </summary>
    /// <returns>
    /// The unit price of the resource being invoiced, including indirect costs.
    /// </returns>
    public AmountCur getUnitPrice()
    {
        if (this.getQuantity() != 0)
        {
            return (this.getAmountCur() / this.getQuantity());
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the worker related to this transaction.
    /// </summary>
    /// <returns>
    /// The record ID of the worker related to this transaction.
    /// </returns>
    public HcmWorkerRecId getWorker()
    {
        return ResourceFacade::getWorker(tsLine.Resource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourceName</Name>
				<Source><![CDATA[
    public Name getResourceName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new (TSTimesheetTrans     _tsTrans,
                      TSTimesheetLineWeek  _tsLineWeek,
                      TSTimesheetLine      _tsLine)
    {
        tsTrans     = _tsTrans.data();
        tsLineWeek  = _tsLineWeek.data();
        tsLine      = _tsLine.data();

        // Make sure we have a valid transfer price for every record. The amount is
        // calculated when the transaction is created, but if some setup was missing or wrong
        // when it happened, we recalculate it. Other possible scenario is that the transfer price
        // was changed after the transaction was created, but querying the transfer price is costly,
        // so we do this only if really needed.
        ProjSalesCurrencyCode currencyCodeOrig = tsLine.CurrencyCode;
        ProjSalesCurrencyCode projCompanySalesCurrencyOrig = tsLine.ProjCompanySalesCurrency;
 
        tsLine.psaSetCurrencyId();
 
        ProjSalesCurrencyCode currencyCode = tsLine.CurrencyCode;
        ProjSalesCurrencyCode projCompanySalesCurrency = tsLine.ProjCompanySalesCurrency;
 
        //Added code to avoid unnecessary record update if the original value is the same as the value to be updated.
        ttsBegin;
        if ((currencyCode != currencyCodeOrig) || (projCompanySalesCurrency != projCompanySalesCurrencyOrig))
        {
            tsLine.reread();
            tsLine.selectForUpdate(true);
            tsLine.CurrencyCode = currencyCode;
            tsLine.ProjCompanySalesCurrency = projCompanySalesCurrency;
            tsLine.update();
        }
        tsTrans.selectForUpdate(true);
        
        // Removing this extra execution of TSTimesheetTrans.setSalesPrice() to improve performance.  TSTimesheetTrans.setSalesPrice() is called from within TSTimesheetTrans.update(), which is executed next.
        if (!ProjIntercompanyRemoveDuplicateSetSalesPriceFlight::instance().isEnabled())
        {
            tsTrans.setSalesPrice(tsLine);
        }

        tsTrans.update();
        ttsCommit;

        indirectComponentInvoiceAmount = ProjIntercompanyInvoiceOrigTimesheet::getIndirectComponentInvoiceAmount(tsTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBilled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the billing status of the transaction being invoiced.
    /// </summary>
    /// <param name="_billed">
    /// true if the transaction was included in some intercompany invoice; false if it should be available to be invoiced.
    /// </param>
    public void setBilled(boolean _billed)
    {
        TSTimesheetTrans tsTransUpd;

        if (_billed && ProjIntercompanyInvoiceCreateValidateIsBilledFlight::instance().isEnabled())
        {
            tsTransUpd = TSTimesheetTrans::findRecId(tsTrans.RecId, true);

            if (tsTransUpd.IntercompanyBilled)
            {
                // Selected intercompany transaction was already marked as billed and cannot be included in intercompany invoice.
                throw error("@Proj:IntercompanyTransactionAlreadyBilled");
            }

            tsTransUpd.IntercompanyBilled = _billed;
            tsTransUpd.update();
        }
        else
        {
            update_recordSet tsTransUpd
                setting intercompanyBilled = _billed
                where tsTransUpd.RecId == tsTrans.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the transaction in a form.
    /// </summary>
    /// <remarks>
    /// Used for auditing purposes.
    /// </remarks>
    public void showTrans()
    {
        Args args;

        args = new Args();
        args.record(tsLine.timesheetTable());
        args.menuItemType(MenuItemType::Display);
        new MenuFunction(MenuItemDisplayStr(TSTimesheetTableForView), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>ProjIntercompanyInvoiceOrigTimesheet</c>.
    /// </summary>
    /// <param name="_tsTrans">
    /// The <c>TSTimesheetTrans</c> to be used in the invoicing process.
    /// </param>
    /// <param name="_tsLineWeek">
    /// The <c>TSTimesheetLineWeek</c> to be used in the invoicing process.
    /// </param>
    /// <param name="_tsLine">
    /// The <c>TSTimesheetLine</c> to be used in the invoicing process.
    /// </param>
    /// <returns>
    /// A new instance of <c>ProjIntercompanyInvoiceOrigTimesheet</c>.
    /// </returns>
    public static ProjIntercompanyInvoiceOrigTimesheet construct(TSTimesheetTrans     _tsTrans,
                                                                 TSTimesheetLineWeek  _tsLineWeek,
                                                                 TSTimesheetLine      _tsLine)
    {
        return new ProjIntercompanyInvoiceOrigTimesheet(_tsTrans, _tsLineWeek, _tsLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIndirectComponentInvoiceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the indirect cost component amount associated with a timesheet transaction that is
    /// to be invoiced.
    /// </summary>
    /// <param name="_tsTrans">
    /// <c>TSTimesheetTrans</c> record to retrieve the indirect component information for.
    /// </param>
    /// <returns>
    /// The invoice indirect cost amount in the timesheet currency.
    /// </returns>
    public static AmountCur getIndirectComponentInvoiceAmount(TSTimesheetTrans _tsTrans)
    {
        PSAIndirectComponentTrans   indirectComponentInvoice;

        select sum (Amount) from  indirectComponentInvoice
            where indirectComponentInvoice.TransId               == _tsTrans.TransId
               && indirectComponentInvoice.IndirectComponentType == PSAIndirectComponentType::Invoice;

        return indirectComponentInvoice.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTimesheetTransRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>ProjIntercompanyInvoiceOrigTimesheet</c> from a given <c>TsTimesheetTrans</c> record ID.
    /// </summary>
    /// <param name="_tsTrans">
    /// The record ID of the <c>TsTimesheetTrans</c> that will be mapped.
    /// </param>
    /// <returns>
    /// A new instance of <c>ProjIntercompanyInvoiceOrigTimesheet</c> from a given <c>TsTimesheetTrans</c> record ID.
    /// </returns>
    public static ProjIntercompanyInvoiceOrigTimesheet newFromTimesheetTransRecId(RefRecId _tsTrans)
    {
        TSTimesheetTrans     tsTrans;
        TSTimesheetLineWeek  tsLineWeek;
        TSTimesheetLine      tsLine;

        select firstOnly tsTrans
            where tsTrans.RecId == _tsTrans
            join tsLineWeek
            where tsLineWeek.RecId == tsTrans.TSTimesheetLineWeek
            join tsLine
            where tsLine.RecId == tsLineWeek.TSTimesheetLine;

        return new ProjIntercompanyInvoiceOrigTimesheet(tsTrans, tsLineWeek, tsLine);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>