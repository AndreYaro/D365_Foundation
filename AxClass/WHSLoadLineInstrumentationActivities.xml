<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLoadLineInstrumentationActivities</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides activities for load line sync instrumentation logging.
/// </summary>
internal final class WHSLoadLineInstrumentationActivities
{
    private const str SyncHandlerActivityNamePrefix = 'LoadLineSyncIssueHandler.';
    private const str InventTransValidatorActivityNamePrefix = 'LoadLineInventTransValidator.';

    private WHSInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(WHSInstrumentationLogger _logger)
    {
        logger = _logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLogger</Name>
				<Source><![CDATA[
    public static WHSLoadLineInstrumentationActivities newFromLogger(WHSInstrumentationLogger _logger)
    {
        return new WHSLoadLineInstrumentationActivities(_logger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleValidationFailure</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext handleValidationFailure(
        InventTransId _inventTransId,
        str           _message,
        boolean       _canThrowError,
        boolean       _forcePolicy = false,
        WHSLoadSynchronizationPolicy _forcedSynchronizationPolicy = WHSLoadSynchronizationPolicy::Invalidate)
    {
        SysInstrumentationActivity activity = logger.activity(SyncHandlerActivityNamePrefix + 'HandleValidationFailure');
        SysInstrumentationActivityContext activityContext = logger.activityContext(activity);

        if (SysLabel::isLabelId(_message))
        {
            activityContext.addCustomProperty('Message', _message);
        } 

        activityContext.addCustomProperty('InventTransId', _inventTransId);
        activityContext.addCustomProperty('CanThrowError', any2Str(_canThrowError));
        activityContext.addCustomProperty('ForcePolicy', any2Str(_forcePolicy));
        activityContext.addCustomProperty('ForcedSynchronizationPolicy', enum2Str(_forcedSynchronizationPolicy));

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLoadLineOpenWorkQty</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext checkLoadLineOpenWorkQty()
    {
        var activity = logger.activity(InventTransValidatorActivityNamePrefix + 'CheckLoadLineOpenWorkQty');

        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLoadLineFromUnmatchedTrans</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext updateLoadLineFromUnmatchedTrans()
    {
        var activity = logger.activity(InventTransValidatorActivityNamePrefix + 'UpdateLoadLineFromUnmatchedTrans');

        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRemainingLoadLine</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext updateRemainingLoadLine()
    {
        var activity = logger.activity(InventTransValidatorActivityNamePrefix + 'UpdateRemainingLoadLine');

        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSingleUnmatchedLoadLineFromReserve</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext updateSingleUnmatchedLoadLineFromReserve()
    {
        var activity = logger.activity(InventTransValidatorActivityNamePrefix + 'UpdateSingleUnmatchedLoadLineFromReserve');

        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLoadLineDimensionConsistency</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext validateLoadLineDimensionConsistency()
    {
        var activity = logger.activity(InventTransValidatorActivityNamePrefix + 'ValidateLoadLineDimensionConsistency');

        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>