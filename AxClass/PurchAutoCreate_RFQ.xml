<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchAutoCreate_RFQ</Name>
	<SourceCode>
		<Declaration><![CDATA[
class       PurchAutoCreate_RFQ
extends     PurchAutoCreate
{
    PurchRFQTable                   purchRFQTable;
    PurchRFQParmTable               purchRFQParmTable;
    PurchRFQReplyTable              purchRFQReplyTable;
    PurchLineForeignTradeCategory   purchLineForeignTradeCategory;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowDeleteInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the <c>InventTrans</c> record of the purchase RFQ line can be deleted.
    /// </summary>
    /// <param name="_purchRFQLine">
    /// The purchase RFQ line that will be checked.
    /// </param>
    /// <returns>
    /// true if you can delete the <c>InventTrans</c> record; otherwise, false.
    /// </returns>
    private boolean allowDeleteInventTrans(PurchRFQLine _purchRFQLine)
    {
        PurchRFQLine        purchRFQLine;
        PurchRFQTable       localPurchRFQTable;

        select count(RecId) from purchRFQLine
            where purchRFQLine.InventTransId == _purchRFQLine.InventTransId
                && purchRFQLine.Status < PurchRFQStatus::Rejected
            exists join localPurchRFQTable
                where localPurchRFQTable.rfqCaseId == purchRFQTable.rfqCaseId
                    && localPurchRFQTable.rfqId == purchRFQLine.rfqId;

        return (purchRFQLine.RecId == 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyMarkUpPurchLine</Name>
				<Source><![CDATA[
    protected void copyMarkUpPurchLine(PurchRFQLine   _purchRFQLine)
    {
        Markup::delete(purchLine);
        Markup::copy(NoYes::No, _purchRFQLine, purchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyMarkUpPurchTable</Name>
				<Source><![CDATA[
    protected void copyMarkUpPurchTable()
    {
        Markup::delete(purchTable);
        Markup::copy(NoYes::No, purchRFQTable, purchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes a <c>PurchLine</c> record.
    /// </summary>
    /// <param name = "_purchRFQLine">
    ///     The <c>PurchRFQLine</c> record to initialize from.
    /// </param>
    protected void initPurchLine(PurchRFQLine _purchRFQLine)
    {
        purchLine.clear();
        purchLine.initValue(purchTable.PurchaseType);
        purchLine.initFromPurchTable(purchTable);
        purchLine.initFromPurchRFQLine(_purchRFQLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchLine</Name>
				<Source><![CDATA[
    void createPurchLine()
    {
        PurchRFQLine                purchRFQLine;
        PurchRFQReplyLine           purchRFQReplyLine;
        PurchRFQParmLine            parmLine;

        while select RecId from parmLine order by LineNum asc
            where parmLine.ParmId == purchRFQParmTable.ParmId &&
                  parmLine.TableRefId == purchRFQParmTable.TableRefId
                  join forupdate purchRFQLine
                    where purchRFQLine.RecId == parmLine.rfqLineRecId
                    join purchRFQReplyLine
                        where purchRFQReplyLine.rfqLineRecId == purchRFQLine.RecId
        {
            if (this.allowDeleteInventTrans(purchRFQLine))
            {
                this.deleteInventTrans(purchRFQLine);
            }

            using (var activityContext = this.instrumentationLogger().purchOrderLineCreationActivities().createPurchLineFromRFQ())
            {
                this.initPurchLine(purchRFQLine);

                using (PurchRFQLineParameter purchRFQLineParameter = PurchRFQLineParameter::parmPurchRFQLine(purchRFQLine))
                {
                    purchLine.createLine(
                    false,
                    false,
                    true,
                    true,
                    false,
                    false);
                }

                purchLine.initFromPurchRFQReplyLine(purchRFQReplyLine);
            }

            TransTaxInformationHelper::copyTransTaxInformation(purchRFQLine, purchLine);

            if (purchRFQLine.LineType == PurchRFQLineItemType::Category)
            {
                // Re-transfer the category since the above initialization methods override it
                purchLine.ProcurementCategory = purchRFQLine.CategoryId;
                // Transfer the user-entered free text for the line.
                // This operation overrides the previously assigned value from the Name field of the RFQ lines.
                purchLine.Name = purchRFQLine.ItemName;

                if (!PurchLineForeignTradeCategory::find(purchLine.InventTransId, purchLine.DataAreaId))
                {
                    purchLineForeignTradeCategory.PurchLineInventTransId = purchLine.InventTransId;
                    purchLineForeignTradeCategory.PurchLineDataAreaId    = purchLine.DataAreaId;
                    purchLineForeignTradeCategory.insert();
                }
            }

            purchLine.QtyOrdered                 = purchLine.calcQtyOrdered();
            purchLine.RemainPurchPhysical        = purchLine.PurchQty;
            purchLine.RemainPurchFinancial       = 0;
            purchLine.RemainInventPhysical       = purchLine.QtyOrdered;
            purchLine.RemainInventFinancial      = 0;
            purchLine.PdsCWRemainInventPhysical  = purchLine.PdsCWQty;
            purchLine.PdsCWRemainInventFinancial = 0;
            purchLine.setPriceDiscChangePolicy(PriceDiscSystemSource::RequestForQuote);

            purchLine.update();
            
            this.copyMarkUpPurchLine(purchRFQLine);
            purchRFQLine.PurchId = purchLine.PurchId;
            purchRFQLine.update();

            // Adding relationship between purchase order and RFQ.
            this.createPurchOrderRFQLineReference(purchRFQLine, purchLine);

            // This operation creates relationship between purchRFQReplyLine and purchline
            PurchRFQReplyLinePurchLine::writeRelationship(purchRFQReplyLine, purchLine.RecId);

            if (purchLine.ItemRefType == InventRefType::Sales && purchLine.ProjId)
            {
                this.updateMarkedSalesReferences(purchLine);
            }
        }

        if (PurchRFQCaseAutoCreateUpdateHeaderStatusPerLineFlight::instance().isEnabled())
        {
            purchRFQTable = PurchRFQTable::find(purchRFQParmTable.rfqId, true);
            purchRFQTable.updateStatus();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMarkedSalesReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the reference of the purchase line on to the sales line
    /// </summary>
    /// <param name="_purchLine">
    /// The <c>PurchLine</c> record from which sales line references must be set.
    /// </param>
    private void updateMarkedSalesReferences(PurchLine _purchLine)
    {
        ttsbegin;
        
        SalesLine salesLine = SalesLine::findInventTransId(_purchLine.InventRefTransId, true);
        salesLine.InventRefId      = _purchLine.PurchId;
        salesLine.InventRefTransId = _purchLine.InventTransId;
        salesLine.InventRefType    = InventRefType::Purch;
        salesLine.update();
        
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchOrderRFQLineReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the purchase order to RFQ line reference.
    /// </summary>
    /// <param name = "_purchRFQLine">
    ///     A <c>PurchRFQLine</c> record.
    /// </param>
    /// <param name = "_purchLine">
    ///     A <c>PurchLine</c> record.
    /// </param>
    final protected void createPurchOrderRFQLineReference(PurchRFQLine _purchRFQLine, PurchLine _purchLine)
    {
        PurchOrderRFQLineReference  purchOrderRFQLineReference;
        VendRFQTrans                vendRFQTrans;

        select firstonly vendRFQTrans
            where _purchRFQLine.LineNum == vendRFQTrans.LineNum
                && _purchRFQLine.rfqId == vendRFQTrans.rfqId
                && vendRFQTrans.Status == PurchRFQStatus::Accepted;

        if (vendRFQTrans.RecId)
        {
            // Clear the buffer
            purchOrderRFQLineReference.clear();

            // Init relation entitys data
            purchOrderRFQLineReference.initFromVendRFQTrans(vendRFQTrans);
            purchOrderRFQLineReference.initFromPurchLine(_purchLine);

            // Insert relation
            purchOrderRFQLineReference.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchTable</Name>
				<Source><![CDATA[
    void createPurchTable()
    {
        purchTable.setPriceDiscChangePolicy(PriceDiscSystemSource::RequestForQuote);
        super();
        this.copyMarkUpPurchTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteInventTrans</Name>
				<Source><![CDATA[
    void deleteInventTrans(PurchRFQLine _purchRFQLine)
    {
        InventUpd_DeleteMovement    deleted;
        Common                      source;
        PurchRFQCaseLine            purchRFQCaseLine;

        if (!_purchRFQLine.createdManually())
        {
            purchRFQCaseLine = PurchRFQCaseLine::findRecId(_purchRFQLine.rfqCaseLineRefRecId);
            if (purchRFQCaseLine.InventTransId)
            {
                source = purchRFQCaseLine;
            }
        }
        else if (_purchRFQLine.InventTransId)
        {
            source = _purchRFQLine;
        }

        if (source)
        {
            deleted = InventUpd_DeleteMovement::newMovement(InventMovement::construct(source), false);
            if (deleted)
            {
                deleted.updateNow();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>endUpdate</Name>
				<Source><![CDATA[
    void endUpdate()
    {
        if (!purchLine.RecId)
        {
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccount</Name>
				<Source><![CDATA[
    VendInvoiceAccount invoiceAccount()
    {
        return vendTable.InvoiceAccount  ? vendTable.InvoiceAccount : vendTable.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(PurchRFQParmTable    _purchRFQParmTable,
                       Object               _callBackClass = null)
    {
        super(_purchRFQParmTable, _callBackClass);

        purchRFQParmTable = _purchRFQParmTable;
        purchRFQTable     = PurchRFQTable::find(_purchRFQParmTable.rfqId);
        purchRFQReplyTable = purchRFQTable.purchRFQReplyTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchType</Name>
				<Source><![CDATA[
    PurchaseType purchType()
    {
        return PurchaseType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>PurchTable</c> record buffer, from the <c>PurchRFQReplyTable</c> and
    /// <c>purchRFQParmTable</c> record buffers.
    /// </summary>
    void setPurchTable()
    {
        super();

        purchTable.DefaultDimension = purchTable.copyDimension(purchRFQTable.DefaultDimension);
        purchTable.initFromPurchRFQTable(purchRFQTable);
        purchTable.initFromPurchRFQReplyTable(purchRFQReplyTable);
        this.parmAccountingDate(purchRFQParmTable.poTransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVend</Name>
				<Source><![CDATA[
    void setVend()
    {
        if (this.vendAccount())
        {
            vendTable = VendTable::find(this.vendAccount());
        }

        if (!vendTable.RecId)
        {
            checkFailed(strFmt("@SYS17184",this.vendAccount()));
            throw error("@SYS23020");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendAccount</Name>
				<Source><![CDATA[
    protected VendAccount vendAccount()
    {
        return purchRFQTable.VendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchAutoCreate_RFQ  construct(PurchRFQParmTable _purchRFQParmTable = null,
                                          Object            _callBackClass = null)
    {
        return new PurchAutoCreate_RFQ(_purchRFQParmTable, _callBackClass);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>