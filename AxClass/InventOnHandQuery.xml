<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventOnHandQuery</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventOnHandQuery</c> class is the base class which allows building on hand queries regarless of the on hand query type.
/// </summary>
abstract class InventOnHandQuery
{
    Query query;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addLinkToItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a link from the specified data source to the data source of the on hand query that holds the reference to <c>InventTable</c>.
    /// </summary>
    /// <param name="_dataSource">
    /// The data source that needs to be joined with the on hand query based on the reference to <c>InventTable</c>.
    /// </param>
    /// <param name="_itemIdField">
    /// The ID of the <c>ItemId</c> field in the data source.
    /// </param>
    protected void addLinkToItemId(QueryBuildDataSource _dataSource, FieldId _itemIdField)
    {
        _dataSource.addLink(this.itemIdField(), _itemIdField, this.dsOnHand().name());
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data source for the <c>InventDim</c> table.
    /// </summary>
    /// <returns>
    /// The data source for the <c>InventDim</c> table.
    /// </returns>
    public QueryBuildDataSource dsInventDim()
    {
        return query.dataSourceTable(tableNum(InventDim));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsOnHand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the main data source that contains quantities available on hand.
    /// </summary>
    /// <returns>
    /// The main data source that contains quantities available on hand.
    /// </returns>
    public abstract QueryBuildDataSource dsOnHand()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemIdField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of the field referencing <c>InventTable</c> on the main on hand data source.
    /// </summary>
    /// <returns>
    /// The ID of the field referencing <c>InventTable</c> on the main on hand data source.
    /// </returns>
    protected abstract FieldId itemIdField()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>joinInventBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Joins the <c>InventBatch</c> table to the on hand query.
    /// </summary>
    /// <param name="_joinMode">
    /// The join mode that should be used for joining the <c>InventBatch</c> table.
    /// </param>
    /// <returns>
    /// The new data source for the <c>InventBatch</c> table.
    /// </returns>
    public QueryBuildDataSource joinInventBatch(JoinMode _joinMode)
    {
        QueryBuildDataSource dsInventBatch = this.dsInventDim().addDataSource(tableNum(InventBatch));
        dsInventBatch.joinMode(_joinMode);
        dsInventBatch.fetchMode(QueryFetchMode::One2One);
        dsInventBatch.addLink(fieldNum(InventDim, InventBatchId), fieldNum(InventBatch, InventBatchId));
        this.addLinkToItemId(dsInventBatch, fieldNum(InventBatch, ItemId));

        return dsInventBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSysQuery</Name>
				<Source><![CDATA[
    public Query parmSysQuery(Query _query = query)
    {
        if (!prmisDefault(_query))
        {
            if (!_query)
            {
                throw error(error::wrongUseOfFunction(funcName()));
            }

            query = _query;
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportsInventDimFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating whether filtering based on the the specified inventory dimension is supported by the query.
    /// </summary>
    /// <param name="_inventDimFieldId">
    /// The ID of the inventory dimension field.
    /// </param>
    /// <returns>
    /// true if filtering by the specified dimension is supported; otherwise, false.
    /// </returns>
    public abstract boolean supportsInventDimFilters(FieldId _inventDimFieldId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeltaQuery</Name>
				<Source><![CDATA[
    private static boolean isDeltaQuery(Query _onHandQuery)
    {
        return _onHandQuery.dataSourceTable(tableNum(InventSumDelta))
            && _onHandQuery.dataSourceTable(tableNum(InventDim));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeltaAggregatedSumViewQuery</Name>
				<Source><![CDATA[
    private static boolean isDeltaAggregatedSumViewQuery(Query _onHandQuery)
    {
        return _onHandQuery.dataSourceTable(tableNum(InventSumDeltaAggrSumView))
            && _onHandQuery.dataSourceTable(tableNum(InventDim));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStandardQuery</Name>
				<Source><![CDATA[
    private static boolean isStandardQuery(Query _onHandQuery)
    {
        return _onHandQuery.dataSourceTable(tableNum(InventSum))
            && _onHandQuery.dataSourceTable(tableNum(InventDim));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWHSStandardQuery</Name>
				<Source><![CDATA[
    private static boolean isWHSStandardQuery(Query _onHandQuery)
    {
        return _onHandQuery.dataSourceTable(tableNum(WHSInventReserve))
            && _onHandQuery.dataSourceTable(tableNum(InventDim));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSysQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventOnHandQuery</c> class based on the specified query.
    /// </summary>
    /// <param name="_onHandQuery">
    /// An on hand query.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventOnHandQuery</c> class based on the specified query.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws an error if the query is not specified.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Throws an error if the specified query is not recognized as an on hand query.
    /// </exception>
    public static InventOnHandQuery newFromSysQuery(Query _onHandQuery)
    {
        InventOnHandQuery result;

        if (!_onHandQuery)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (InventOnHandQuery::isStandardQuery(_onHandQuery))
        {
            result = InventOnHandQueryStandard::newFromQuery(_onHandQuery);
        }
        else if (InventOnHandQuery::isDeltaQuery(_onHandQuery))
        {
            result = InventOnHandQueryDelta::newFromQuery(_onHandQuery);
        }
        else if (InventOnHandQuery::isDeltaAggregatedSumViewQuery(_onHandQuery))
        {
            result = InventOnHandQueryDeltaAggregatedSumView::newFromQuery(_onHandQuery);
        }
        else if (InventOnHandQuery::isWHSStandardQuery(_onHandQuery))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
