<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>StatisticsOfVendorPaymentsPeriodsImportSCROService_SE</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

/// <summary>
/// The <c>StatisticsOfVendorPaymentsPeriodsImportSCROService_SE</c> is a service class of the import SCRO data for Statistics of Vendor payments periods.
/// </summary>
internal final class StatisticsOfVendorPaymentsPeriodsImportSCROService_SE extends SysOperationServiceBase
{
    internal const str IntegrationPoint = classStr(ERTableDestination) + '#' + tableStr(VendorSizeCategory_SE);

    private StatisticsOfVendorPaymentsPeriodsImportSCROContract_SE contract;
    private SessionId currentSessionId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    internal void run(StatisticsOfVendorPaymentsPeriodsImportSCROContract_SE _contract)
    {
        contract = _contract;
        currentSessionId = new xSession().sessionId();

        try
        {
            this.runER();
        }
        catch
        {
            throw Exception::Error;
        }
        finally
        {
            this.cleanupSCRODAta();

            VendorSizeCategory_SE vendorSizeCategory;

            select firstonly RecId from vendorSizeCategory
                where vendorSizeCategory.ReportPeriodRefRecId == contract.parmReportPeriod().RecId;

            if (vendorSizeCategory.RecId)
            {
                warning("@StatisticsOfVendorPaymentsDelays:RecalculateStatisticsWarning");
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupSCRODAta</Name>
				<Source><![CDATA[
    private void cleanupSCRODAta()
    {
        RefRecId periodRecId = contract.parmReportPeriod().RecId;

        VendorSizeCategory_VendOrganization_SE vscOrganization;
        delete_from vscOrganization
            where vscOrganization.ReportPeriodRefRecId == periodRecId
                && vscOrganization.CurSessionId == currentSessionId;

        VendorSizeCategory_VendPerson_SE vscPerson;
        delete_from vscPerson
            where vscPerson.ReportPeriodRefRecId == periodRecId
                && vscPerson.CurSessionId == currentSessionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runER</Name>
				<Source><![CDATA[
    private void runER()
    {
        var runner = ERObjectsFactory::createMappingDestinationRunByImportFormatMappingId(
            contract.parmImportFormatMappingId(),
            IntegrationPoint);

        TaxablePaymentsAnnualReportPeriod_AU reportPeriod = contract.parmReportPeriod();

        ERModelDefinitionInputParametersAction inputParams = new ERModelDefinitionInputParametersAction();
        inputParams.addParameter('$ReportPeriodRecId', reportPeriod.RecId);
        inputParams.addParameter('$CurrentSessionId', currentSessionId);

        runner.withParameter(inputParams);
        runner.init();

        var parameters = runner.getParameters();
        var traverser = new ERModelDefinitionParametersTraverser(parameters);

        while (traverser.moveNext())
        {
            ERIImportFormatDataSourceWithFileContract dsWithFileContract = ERCast::asObject(traverser.current()) as ERIImportFormatDataSourceWithFileContract;
            if (dsWithFileContract)
            {
                dsWithFileContract.setInputFile(File::UseFileFromURL(contract.parmSCROUploadFileURL()), contract.parmSCROUploadFileName());
                break;
            }
            else
            {
                ERIImportFormatDataSourceContract dsContract = ERCast::asObject(traverser.current()) as ERIImportFormatDataSourceContract;
                if (dsContract)
                {
                    dsContract.parmInputDataStream(File::UseFileFromURL(contract.parmSCROUploadFileURL()));
                    break;
                }
            }
        }

        runner.runUnattended();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>