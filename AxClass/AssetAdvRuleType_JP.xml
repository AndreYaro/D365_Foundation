<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetAdvRuleType_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Asset advanced rule type
/// </summary>
abstract class AssetAdvRuleType_JP
{
    AssetAdvancedRule_JP    assetAdvancedRule;
    Array                   itemArray;
    boolean                 needsToUpdateLayout;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>duplciateKeyErrorText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicate key error text
    /// </summary>
    /// <returns>
    /// Returns message of can not save rule
    /// </returns>
    protected str duplciateKeyErrorText()
    {
        // The rule already exists. Create a valid rule for depreciation.
        return "@SYP4881452";
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates keys
    /// </summary>
    /// <returns>
    /// Returns the generated key
    /// </returns>
    protected str generateKey()
    {
        int         i;
        container   keyItemValueSet;

        for (i = 1; i <= this.maxItemNum(); i++)
        {
            keyItemValueSet += this.getItemValue(i);
        }

        return con2Str(keyItemValueSet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemEDTId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets item extended data types id
    /// </summary>
    /// <param name="_itemId">
    /// The item id
    /// </param>
    /// <returns>
    /// Returns item extended data types id
    /// </returns>
    abstract public ExtendedTypeId getItemEDTId(int _itemId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets item label
    /// </summary>
    /// <param name="_itemId">
    /// The item id
    /// </param>
    /// <returns>
    /// Returns item label
    /// </returns>
    abstract public str getItemLabel(int _itemId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets item value
    /// </summary>
    /// <param name="_itemId">
    /// The item id
    /// </param>
    /// <returns>
    /// Returns the value
    /// </returns>
    public anytype getItemValue(int _itemId)
    {
        anytype         ret;
        ExtendedTypeId  edtId;
        DictType        dictType;

        if (_itemId     > 0
            && _itemId  <= itemArray.lastIndex())
        {
            [ret] = itemArray.value(_itemId);
        }

        if (typeOf(ret) == Types::AnyType)
        {
            // Return default value based on type
            if (_itemId > 0 && _itemId <= this.maxItemNum())
            {
                edtId = this.getItemEDTId(_itemId);

                if (edtId)
                {
                    dictType = new DictType(edtId);
                    switch (dictType.baseType())
                    {
                        case Types::String:
                            ret = '';
                            break;

                        case Types::Integer:
                        case Types::Real:
                        case Types::Enum:
                            ret = 0;
                            break;
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemValueStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets item value by string
    /// </summary>
    /// <param name="_itemId">
    /// The item id
    /// </param>
    /// <returns>
    /// Returns the item value by string
    /// </returns>
    public anytype getItemValueStr(int _itemId)
    {
        str             ret;
        anytype         value;
        ExtendedTypeId  edtId;
        DictType        dictType;

        if (_itemId > 0 && _itemId <= this.maxItemNum())
        {
            value = this.getItemValue(_itemId);
            edtId = this.getItemEDTId(_itemId);

            if (edtId)
            {
                dictType = new DictType(edtId);
                if (dictType.baseType() == Types::Enum)
                {
                    ret = new DictEnum(new DictType(edtId).enumId()).value2Label(value);
                }
                else
                {
                    ret = strFmt("@SYS82282", value);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializations here
    /// </summary>
    public void init()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForConstruct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes for construct
    /// </summary>
    /// <param name="_assetAdvancedRule">
    /// The asset advanced rule
    /// </param>
    protected void initForConstruct(AssetAdvancedRule_JP _assetAdvancedRule)
    {
        AssetAdvancedRuleItem_JP    assetAdvancedRuleItem;

        assetAdvancedRule = _assetAdvancedRule;

        if (assetAdvancedRule.RecId)
        {
            // Load item values
            while select assetAdvancedRuleItem
                where assetAdvancedRuleItem.AssetAdvancedRule_JP == assetAdvancedRule.RecId
            {
                Debug::assert(assetAdvancedRuleItem.ID > 0 && assetAdvancedRuleItem.ID <= this.maxItemNum());

                itemArray.value(assetAdvancedRuleItem.ID, [assetAdvancedRuleItem.value()]);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxItemNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// The max item number
    /// </summary>
    /// <returns>
    /// Returns the max item number
    /// </returns>
    abstract public int maxItemNum()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        itemArray = new Array(Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>overview</Name>
				<Source><![CDATA[
    /// <summary>
    /// Does overview
    /// </summary>
    /// <returns>
    /// Returns the overview
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws exceptions when exceeding max supported item number
    /// </exception>
    public str overview()
    {
        str     ret;

        // If more items are rquested in future, this number needs to be increased accordingly.
        #define.MaxSupportedItemNum(5)
        #define.ItemId1(1)
        #define.ItemId2(2)
        #define.ItemId3(3)
        #define.ItemId4(4)
        #define.ItemId5(5)

        if (this.maxItemNum() >= 0 && this.maxItemNum() <= #MaxSupportedItemNum)
        {
            ret = strFmt(
                this.ruleFormat(),
                this.getItemValueStr(#ItemId1),
                this.getItemValueStr(#ItemId2),
                this.getItemValueStr(#ItemId3),
                this.getItemValueStr(#ItemId4),
                this.getItemValueStr(#ItemId5));
        }
        else
        {
            // More items are requested, the #MaxSupportedItemNum needs to be increased.
            throw error(error::wrongUseOfFunction(funcName()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNeedsToUpdateLayout</Name>
				<Source><![CDATA[
    public boolean parmNeedsToUpdateLayout(boolean _needsToUpdateLayout = needsToUpdateLayout)
    {
        needsToUpdateLayout = _needsToUpdateLayout;
        return needsToUpdateLayout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets advanced rules
    /// </summary>
    /// <returns>
    /// Returns advanced rules
    /// </returns>
    public AssetAdvancedRule_JP rule()
    {
        return assetAdvancedRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets rule format
    /// </summary>
    /// <returns>
    /// Returns rule format
    /// </returns>
    abstract public str ruleFormat()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>save</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves current settings
    /// </summary>
    public void save()
    {
        AssetAdvancedRuleItem_JP    assetAdvancedRuleItem;
        int                         i;
        RecordInsertList            recordInsertList;

        if (this.validate())
        {
            try
            {
                ttsBegin;

                if (assetAdvancedRule.RecId)
                {
                    delete_from assetAdvancedRuleItem
                        where assetAdvancedRuleItem.AssetAdvancedRule_JP == assetAdvancedRule.RecId;
                }
                else
                {
                    assetAdvancedRule.Priority      = AssetAdvancedRule_JP::nextPriority(assetAdvancedRule.AssetAdvancedRuleGroup_JP);
                    assetAdvancedRule.Enabled       = NoYes::Yes;
                }

                assetAdvancedRule.Description   = this.overview();
                assetAdvancedRule.Key           = this.generateKey();
                assetAdvancedRule.write();

                recordInsertList = new recordInsertList(tableNum(AssetAdvancedRuleItem_JP));

                for (i = 1; i <= itemArray.lastIndex(); i++)
                {
                    assetAdvancedRuleItem.clear();
                    assetAdvancedRuleItem.AssetAdvancedRule_JP  = assetAdvancedRule.RecId;
                    assetAdvancedRuleItem.ID                    = i;
                    assetAdvancedRuleItem.setValue(conPeek(itemArray.value(i), 1));

                    recordInsertList.add(assetAdvancedRuleItem);
                }

                recordInsertList.insertDatabase();

                ttsCommit;
            }
            catch (Exception::DuplicateKeyException)
            {
                error(this.duplciateKeyErrorText());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItemValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets item value
    /// </summary>
    /// <param name="_itemId">
    /// The item id
    /// </param>
    /// <param name="_value">
    /// The value
    /// </param>
    /// <returns>
    /// Returns item value
    /// </returns>
    public boolean setItemValue(Integer _itemId, anytype _value)
    {
        boolean     ret = false;

        if (_itemId > 0 && _itemId <= this.maxItemNum())
        {
            itemArray.value(_itemId, [_value]);
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates settings
    /// </summary>
    /// <returns>
    /// Returns true
    /// </returns>
    public boolean validate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct a new instance of <C>AssetAdvRuleType_JP</C>
    /// </summary>
    /// <param name="_typeEnumName">
    /// The enum name
    /// </param>
    /// <param name="_typeEnumValue">
    /// The enum value
    /// </param>
    /// <param name="_ruleGroupRecId">
    /// The rule group record id
    /// </param>
    /// <returns>
    /// Returns the instance
    /// </returns>
    public static AssetAdvRuleType_JP construct(
        EnumName                        _typeEnumName,
        int                             _typeEnumValue,
        RefRecId                        _ruleGroupRecId)
    {
        AssetAdvRuleType_JP     ret;
        AssetAdvancedRule_JP    assetAdvancedRule;

        assetAdvancedRule.AssetAdvancedRuleGroup_JP     = _ruleGroupRecId;
        assetAdvancedRule.TypeEnumName                  = _typeEnumName;
        assetAdvancedRule.TypeEnumValue                 = _typeEnumValue;

        ret = AssetAdvRuleType_JP::constructFromRule(assetAdvancedRule);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct a new instance based on advanced rule
    /// </summary>
    /// <param name="_assetAdvancedRule">
    /// The asset advanced rule
    /// </param>
    /// <returns>
    /// Returns the instance
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throus exceptions if no records
    /// </exception>
    public static AssetAdvRuleType_JP constructFromRule(AssetAdvancedRule_JP _assetAdvancedRule)
    {
        AssetAdvRuleType_JP     ret;

        ret = SysExtensionAppClassFactory::getClassFromSysAttribute(
            classStr(AssetAdvRuleType_JP),
            new AssetAdvancedRuleTypeAttribute_JP(_assetAdvancedRule.TypeEnumName, _assetAdvancedRule.TypeEnumValue));

        if (ret)
        {
            ret.initForConstruct(_assetAdvancedRule);
        }
        else
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>