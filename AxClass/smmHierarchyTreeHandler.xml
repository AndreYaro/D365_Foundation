<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmHierarchyTreeHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class handles <c>HierarchyTreeTable</c> events.
/// </summary>
class smmHierarchyTreeHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>HierarchyTreeTable_onValidatingDelete</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(HierarchyTreeTable), DataEventType::ValidatingDelete)]
    public static void HierarchyTreeTable_onValidatingDelete(Common _sender, DataEventArgs _e)
    {
        boolean             ret = true;
        Hierarchy           hierarchy;
        HierarchyTreeTable  hierarchyTreeTable = _sender;

        ValidateEventArgs validateEventArgs = _e as ValidateEventArgs;

        hierarchy = Hierarchy::find(hierarchyTreeTable.HierarchyId);

        if (hierarchy.RecId && Hierarchy::isHierarchyTypeCRM(hierarchy.HierarchyType))
        {
            if (ret && hierarchyTreeTable.ElementNodeType == ElementNodeType::Activity && hierarchyTreeTable.IsRequired && !hierarchy.IsTemplate)
            {
                // The activity is required to one or more processes. You cannot delete or change the association from the activity.
                ret = checkFailed("@SYS112837");
            }
        }

        if (!ret)
        {
            validateEventArgs.parmValidateResult(ret);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>HierarchyTreeTable_onValidatingWrite</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(HierarchyTreeTable), DataEventType::ValidatingWrite)]
    public static void HierarchyTreeTable_onValidatingWrite(Common _sender, DataEventArgs _e)
    {
        boolean             ret = true;

        HierarchyTreeTable hierarchyTreeTable = _sender;
        HierarchyTreeTable origHierarchyTreeTable = hierarchyTreeTable.orig();
        HierarchyTreeTable parentHierarchyTreeTable;

        validateEventArgs validateEventArgs = _e as validateEventArgs;

        if (hierarchyTreeTable.ElementNodeType == ElementNodeType::Node &&
            Hierarchy::isHierarchyTypeCRM(Hierarchy::find(hierarchyTreeTable.HierarchyId).HierarchyType) &&
            !HierarchyTree::isFirstLevelNameUnique(hierarchyTreeTable.ParentElementNumber, hierarchyTreeTable.ElementNumber, hierarchyTreeTable.Name))
        {
            hierarchyTreeTable.orig();
            ret = checkFailed("@SYS108142");
        }

        if (!ret)
        {
            validateEventArgs.parmValidateResult(ret);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNodeEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the <c>HierarchyTreeTable.insertNodeEvent()</c>.
    /// </summary>
    /// <param name = "_hierarchy">
    /// The <c>Hierarchy</c> record.
    /// </param>
    /// <param name = "_hierarchyTreeTable">
    /// The <c>HierarchyTreeTable</c> record.
    /// </param>
    /// <param name = "_smmActivities">
    /// The <c>smmActivities</c> record.
    /// </param>
    [SubscribesTo(tableStr(HierarchyTreeTable), delegatestr(HierarchyTreeTable, insertNodeEvent))]
    public static void insertNodeEvent(Hierarchy _hierarchy, HierarchyTreeTable _hierarchyTreeTable, smmActivities _smmActivities)
    {
        if (Hierarchy::isHierarchyTypeCRM(_hierarchy.HierarchyType))
        {
            Common common = HierarchyLinkTable::findAssociation(_hierarchyTreeTable.HierarchyId, Hierarchy::hierarchyType2tableId(_hierarchy.HierarchyType));
            _smmActivities.initFromCommon(common);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>