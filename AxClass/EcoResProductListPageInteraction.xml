<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductListPageInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResProductListPageInteraction extends SysListPageInteractionBase
{
    EcoResProductListPage ecoResProductListPage;
    boolean isRetailKitListPage;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRetailFilters</Name>
				<Source><![CDATA[
    private void addRetailFilters(Query _query)
    {
        Common callerRecord = this.listPage().listPageArgs().externalRecord();

        // Is form called with a record
        if (callerRecord)
        {
            switch (callerRecord.TableId)
            {
                // Is the form called from Retail channels
                case tableNum(OMOperatingUnit) :
                    OMOperatingUnit omOperatingUnit = callerRecord;
                    QueryBuildDataSource queryBuildDataSource = _query.dataSourceTable(tableNum(EcoResProduct));
                    queryBuildDataSource = queryBuildDataSource.addDataSource(tableNum(InventTable));
                    queryBuildDataSource.relations(true);
                    queryBuildDataSource.joinMode(JoinMode::InnerJoin);

                    // Using View: RetailChannelAssortedProductView For all Retail Assortment Exploded records.
                    queryBuildDataSource = queryBuildDataSource.addDataSource(tableNum(RetailChannelAssortedProductView));
                    queryBuildDataSource.relations(false);
                    queryBuildDataSource.joinMode(JoinMode::ExistsJoin);
                    queryBuildDataSource.addLink(fieldNum(InventTable, Product), fieldNum(RetailChannelAssortedProductView, ProductID));
                    queryBuildDataSource.addLink(fieldNum(InventTable, DataAreaId), fieldNum(RetailChannelAssortedProductView, InventLocationDataAreaId));
                    queryBuildDataSource.addRange(fieldNum(RetailChannelAssortedProductView, ValidFrom)).value(queryRange(DateTimeUtil::minValue(), DateTimeUtil::utcNow()));
                    queryBuildDataSource.addRange(fieldNum(RetailChannelAssortedProductView, ValidTo)).value(queryRange(DateTimeUtil::utcNow(), DateTimeUtil::maxValue()));
                    queryBuildDataSource.addRange(fieldNum(RetailChannelAssortedProductView, OMOperatingUnitID)).value(queryValue(omOperatingUnit.RecId));

                    // Using RetailAssortmentLookup to exclude records with LineType as Exclude.
                    QueryBuildDataSource qbdsRetailAssortmentLookup = queryBuildDataSource.addDataSource(tableNum(RetailAssortmentLookup));
                    qbdsRetailAssortmentLookup.relations(false);
                    qbdsRetailAssortmentLookup.joinMode(JoinMode::NoExistsJoin);
                    qbdsRetailAssortmentLookup.addLink(fieldNum(RetailChannelAssortedProductView, ProductID), fieldNum(RetailAssortmentLookup, ProductID));
                    qbdsRetailAssortmentLookup.addRange(fieldNum(RetailAssortmentLookup, LineType)).value(queryValue(RetailAssortmentExcludeIncludeType::Exclude));
                    qbdsRetailAssortmentLookup.addRange(fieldNum(RetailAssortmentLookup, VariantId)).value(queryValue(0));

                    QueryBuildDataSource qbdsRetailAssortmentLookupChannelGroup = qbdsRetailAssortmentLookup.addDataSource(tableNum(RetailAssortmentLookupChannelGroup));
                    qbdsRetailAssortmentLookupChannelGroup.relations(false);
                    qbdsRetailAssortmentLookupChannelGroup.joinMode(JoinMode::ExistsJoin);
                    qbdsRetailAssortmentLookupChannelGroup.addLink(fieldNum(RetailAssortmentLookup, AssortmentId), fieldNum(RetailAssortmentLookupChannelGroup, AssortmentId));
                    qbdsRetailAssortmentLookupChannelGroup.addRange(fieldNum(RetailAssortmentLookupChannelGroup, OMOperatingUnitId)).value(queryValue(callerRecord.RecId));

                    QueryBuildDataSource qbdsRetailChannelTable = qbdsRetailAssortmentLookupChannelGroup.addDataSource(tableNum(RetailChannelTable));
                    qbdsRetailChannelTable.relations(false);
                    qbdsRetailChannelTable.joinMode(JoinMode::ExistsJoin);
                    qbdsRetailChannelTable.addLink(fieldNum(RetailAssortmentLookupChannelGroup, OMOperatingUnitId), fieldNum(RetailChannelTable, OMOperatingUnitID));
                    break;

                // Is the form called from Retail assortments
                case tableNum(RetailAssortmentTable) :
                    RetailAssortmentTable assortmentTable = callerRecord;
                    queryBuildDataSource = _query.dataSourceTable(tableNum(EcoResProduct));
                    queryBuildDataSource = queryBuildDataSource.addDataSource(tableNum(InventTable));
                    queryBuildDataSource.relations(true);
                    queryBuildDataSource.joinMode(JoinMode::InnerJoin);

                    // Using View: RetailChannelAssortedProductView For all Retail Assortment Exploded records.
                    queryBuildDataSource = queryBuildDataSource.addDataSource(tableNum(RetailChannelAssortedProductView));
                    queryBuildDataSource.relations(false);
                    queryBuildDataSource.joinMode(JoinMode::ExistsJoin);
                    queryBuildDataSource.addLink(fieldNum(InventTable, Product), fieldNum(RetailChannelAssortedProductView, ProductId));
                    queryBuildDataSource.addLink(fieldNum(InventTable, DataAreaId), fieldNum(RetailChannelAssortedProductView, InventLocationDataAreaId));
                    queryBuildDataSource.addRange(fieldNum(RetailChannelAssortedProductView, AssortmentRecId)).value(queryValue(assortmentTable.RecId));
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRetailKitFilters</Name>
				<Source><![CDATA[
    private void addRetailKitFilters(Query _query)
    {
        QueryBuildDataSource queryBuildDataSource = _query.dataSourceTable(tableNum(EcoResProduct));
        queryBuildDataSource = queryBuildDataSource.addDataSource(tableNum(RetailKit));
        queryBuildDataSource.relations(true);
        queryBuildDataSource.joinMode(JoinMode::InnerJoin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ecoResProduct</Name>
				<Source><![CDATA[
    private EcoResProduct ecoResProduct()
    {
        return this.listPage().activeRecord(
            queryDataSourceStr(EcoResProductListPage, EcoResProduct)) as EcoResProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQuery</Name>
				<Source><![CDATA[
    public void initializeQuery(Query _query)
    {
        QueryBuildDataSource    qbds,qbdsProductDimension;
        Range                   range;

        super(_query);

        switch (ecoResProductListPage)
        {
            case EcoResProductListPage::ProductMasters:
                range = queryValue(DictTable::getRelationTypeFromTableName(tableStr(EcoResProductMaster)));
                break;

            case EcoResProductListPage::DistinctProducts:
                range = queryValue(DictTable::getRelationTypeFromTableName(tableStr(EcoResDistinctProduct)));
                //disable link to product dimensions since distinct product cannot have product dimensions
                qbdsProductDimension = _query.dataSourceName(queryDataSourceStr(EcoResProductListPage, EcoResProductDimensionGroupProduct));
                qbdsProductDimension.enabled(false);
                break;

            default:
                range = queryValue(DictTable::getRelationTypeFromTableName(tableStr(EcoResProductMaster)));
                range = queryRangeConcat(range, DictTable::getRelationTypeFromTableName(tableStr(EcoResDistinctProduct)));
                break;
        }

        qbds = _query.dataSourceName(queryDataSourceStr(EcoResProductListPage, EcoResProduct));
        QueryBuildRange queryBuildRange = qbds.addRange(fieldNum(EcoResProduct, InstanceRelationType));
        queryBuildRange.value(range);
        queryBuildRange.status(RangeStatus::Hidden);

        EcoResProductTranslation::queryAddDefaultLanguage(_query);

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            this.addRetailFilters(_query);
            if (isRetailKitListPage)
            {
                this.addRetailKitFilters(_query);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializing</Name>
				<Source><![CDATA[
    public void initializing()
    {
        ListPageArgs args = this.listPage().listPageArgs();

        if (args.enumTypeParameter() == enumNum(EcoResProductListPage))
        {
            ecoResProductListPage = args.enumerationParameter();
        }
        else
        {
            ecoResProductListPage = EcoResProductListPage::Products;
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)) && args.parameters() == 'RetailProductKits')
        {
            isRetailKitListPage = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    public void selectionChanged()
    {
        super();

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            // Retrieve the currently selected record
            EcoResProduct selectedEcoResProduct = this.listPage().activeRecord(tableStr(EcoResProduct));

            // If the Product is not a Retail Kit disable the Retail Kit configure button
            RetailKit retailKit = RetailKit::findByProductmaster(selectedEcoResProduct.RecId);

            this.listPage().actionPaneControlEnabled(
                formControlStr(EcoResProductListPage, RetailKitMenuItem), retailKit.RecId);

            this.listPage().actionPaneControlEnabled(
                formControlStr(EcoResProductListPage, RetailKitConfigurationsMenuItem), RetailKit::hasVariants(retailKit));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the enabled property on the action pane buttons.
    /// </summary>
    /// <remarks>
    ///    This method should be overridden when you must disable or enable a button in the action pane. This
    ///    method is called every time that the selection of the record in the list page changes.
    /// </remarks>
    protected void setButtonEnabled()
    {
        super();

        // Engineering Change Group
        boolean categoryExists = CaseCategoryHierarchyDetail::existsByCategoryType(CaseCategoryType::EngineeringChange);

        this.listPage().actionPaneControlEnabled(
            formcontrolstr(EcoResProductListPage, EngineeringChangeGroupCreateCase),
            categoryExists);

        this.listPage().actionPaneControlEnabled(
            formcontrolstr(EcoResProductListPage, EngineeringChangeGroupAssociateCase),
            categoryExists);

         this.listPage().actionPaneControlEnabled(
            formcontrolstr(EcoResProductListPage, EngineeringChangeGroupAddToLog),
            categoryExists);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the visibility property on the buttons in the action pane.
    /// </summary>
    protected void setButtonVisibility()
    {
        super();

        //disable master related buttons if this is only showing distinct variants
        this.listPage().actionPaneControlVisible(formControlStr(EcoResProductListPage,ButtonGroupDefineProductMaster),ecoResProductListPage != EcoResProductListPage::DistinctProducts);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCaption</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the caption on the list page.
    /// </summary>
    protected void setCaption()
    {
        this.listPage().caption(new DictEnum(enumNum(EcoResProductListPage)).value2Label(any2int(ecoResProductListPage)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGridFieldVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the visibility property on the grid fields.
    /// </summary>
    protected void setGridFieldVisibility()
    {
        super();

        this.listPage().listPageFieldVisible(
            formControlStr(EcoResProductListPage, EcoResProduct_M_ProductSubtype),
            ecoResProductListPage == EcoResProductListPage::Products);

        this.listPage().listPageFieldVisible(
            formControlStr(EcoResProductListPage, EcoResProductMaster_VariantConfigurationTechnology),
            ecoResProductListPage == EcoResProductListPage::ProductMasters);

        //hide the product dimension group for distinct product list page
        this.listPage().listPageFieldVisible(
            formControlStr(EcoResProductListPage, Setup_ProductDimensionGroup),
            ecoResProductListPage != EcoResProductListPage::DistinctProducts);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>