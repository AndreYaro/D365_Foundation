<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmActivities_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class contains extensions for the table smmActivities.
/// </summary>
public static class smmActivities_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCaseLogCondition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether there is a case that is assigned to an activity. If yes, creates a case log if
    /// the case log does not exist.
    /// </summary>
    [SysObsolete('The method smmActivities.checkCaseLogCondition is obsolete.  Use smmSourceType::checkAndCreateCaseLogForSourceType instead.', true, 30\06\2018)]
    public static void checkCaseLogCondition(smmActivities _activities)
    {
        smmActivityParentLinkTable  smmActivityParentLinkTable;

        // Check if activity is assigned to case
        smmActivityParentLinkTable = smmActivityParentLinkTable::findParentLink(_activities.ActivityNumber, smmActivityParentType::Case, false);

        // If assigned
        if (smmActivityParentLinkTable.RecId > 0)
        {
            // Check if there is a case log assigned
            smmSourceType::checkAndCreateCaseLog(smmActivityParentLinkTable.RefRecId,
                smmSourceType::type2typeId(SmmSourceTypeList::Activity), _activities.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findEndDateTimeBasedOnTotalWork</Name>
				<Source><![CDATA[
    public static void findEndDateTimeBasedOnTotalWork(smmActivities _activities)
    {

        TransDate               activityStartDate;
        TimeOfDay               startTime;
        WorkCalendarDateLine    workCalendarDateLine;
        int64                   duration = any2int64(_activities.TotalWork * 60 * 60);
        int                     diff;
        int                     fromTime;
        RecId                   recId;
        CalendarId              calendarId = OutlookUserSetup::findByWorker(_activities.ResponsibleWorker).CalendarId;

        //if Worker's calendar not found in Outlook, check the WorkCalendarEmployment record.
        if (!calendarId)
        {
            recId      = HcmEmployment::findByWorkerLegalEntity(_activities.ResponsibleWorker, CompanyInfo::current()).RecId;
            calendarId = WorkCalendarEmployment::findByEmploymentRecId(recId).CalendarId;
        }

        activityStartDate = DateTimeUtil::date(_activities.startDateTime());
        startTime = DateTimeUtil::time(_activities.StartDateTime());

        // Does the responsible employee have a work calendar associated?
        if (calendarId)
        {
            while select TransDate,FromTime,ToTime from workCalendarDateLine
                    order by TransDate, fromTime
                    where workCalendarDateLine.CalendarId == calendarId && workCalendarDateLine.TransDate >= activityStartDate
            {
                if (workCalendarDateLine.TransDate != activityStartDate || (workCalendarDateLine.TransDate == activityStartDate && workCalendarDateLine.FromTime > startTime))
                {
                    diff = workCalendarDateLine.ToTime - workCalendarDateLine.FromTime;
                    fromTime = workCalendarDateLine.FromTime;
                }
                else
                {
                    if (workCalendarDateLine.ToTime >= startTime && workCalendarDateLine.FromTime <= startTime)
                    {
                        diff = workCalendarDateLine.ToTime - startTime;
                        fromTime = startTime;
                    }
                }

                if (duration <= diff)
                {
                    _activities.EndDateTime = DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::newDateTime(workCalendarDateLine.TransDate,any2int(fromTime + duration)),  DateTimeUtil::getUserPreferredTimeZone());
                    // done calculating, hours have been met, stop processing
                    break;
                }
                else
                {
                    duration = duration - diff;
                }
            }
        }
        else
        // No calendar is associated, calculate the end date and time using 24 hours per day
        {
            _activities.EndDateTime = DateTimeUtil::addSeconds(_activities.StartDateTime,any2int(duration));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjTable</Name>
				<Source><![CDATA[
    // Initialize from project table
    public static void initFromProjTable(smmActivities _activities, ProjTable _projTable)
    {
        if (!_activities.IsTemplate)
        {
            if (DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) > _projTable.StartDate)
            {
                _activities.setStartDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            }
            else
            {
                _activities.setStartDate(_projTable.StartDate);
            }

            _activities.setEndDate(_activities.startDate());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesQuotationTable</Name>
				<Source><![CDATA[
    // Initialize from sales quotation table
    public static void initFromSalesQuotationTable(smmActivities _activities, SalesQuotationTable _salesQuotationTable)
    {
        if (!isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            return;
        }

        if (DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) > _salesQuotationTable.psaEstProjStartDate)
        {
            _activities.setStartDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        }
        else
        {
            _activities.setStartDate(_salesQuotationTable.psaEstProjStartDate);
        }

        _activities.setEndDate(_activities.startDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSMAParameters</Name>
				<Source><![CDATA[
    public static void initFromSMAParameters(smmActivities _activities)
    {
        SMAParameters parameters = SMAParameters::find();

        _activities.Category               = parameters.ServiceOrderActivityCategory;
        _activities.TypeId                 = parameters.ServiceOrderActivityType;
        _activities.Purpose                = parameters.ServiceOrderActivityPurpose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    // Get the proj id for the activity
    public static display ProjId projId(smmActivities _activities)
    {
        return _activities.linkedParentId(smmActivityParentType::Project);
    }

]]></Source>
			</Method>
			<Method>
				<Name>psAfindProjIdFromRecID</Name>
				<Source><![CDATA[
    public static display ProjId psAfindProjIdFromRecID(smmActivities _activities)
    {
        smmActivityParentLinkTable  activLink;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            select firstonly RefRecId from activLink
            where activLink.ActivityNumber == _activities.ActivityNumber
                && activLink.ParentType == smmActivityParentType::Project;
        }

        return (select projTable where projTable.RecId == activLink.RefRecId).ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>signOffServiceLines</Name>
				<Source><![CDATA[
    public static void signOffServiceLines(smmActivities _activities)
    {
        SMAServiceOrderLine serviceOrderLine;

        while select forupdate serviceOrderLine
            where serviceOrderLine.ActivityId == _activities.ActivityNumber
        {
            serviceOrderLine.SignOff = _activities.Closed;
            serviceOrderLine.update(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromCallList</Name>
				<Source><![CDATA[
    public static void updateFromCallList(smmActivities _activities, smmTMCallListGroup _callList)
    {
        ttsbegin;

        // All activity dates is set to the new quotation follow up date
        _activities.StartDateTime = _callList.ToDateTime;
        _activities.EndDateTime = _callList.ToDateTime;
        _activities.ReminderDateTime = _callList.ToDateTime;

        // Update the activty
        _activities.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromCallListTarget</Name>
				<Source><![CDATA[
    public static void updateFromCallListTarget(smmActivities _activities, smmTMCallListTable _callListTarget)
    {
        date dt = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(_callListTarget.CallPlannedDateTime, DateTimeUtil::getUserPreferredTimeZone()));

        ttsbegin;

        // All activity dates is set to the new quotation follow up date
        _activities.setStartDate(dt);
        _activities.setEndDate(dt);
        _activities.setReminderDate(dt);

        _activities.ResponsibleWorker  = _callListTarget.CallRespWorker;

        if (!_activities.ResponsibleWorker || _callListTarget.CallStatus == smmTMCallStatus::Closed || _callListTarget.CallStatus == smmTMCallStatus::Cancelled)
        {
            _activities.Closed = NoYes::Yes;
            _activities.DoneByWorker           = smmUtility::getCurrentContactWorker();
            _activities.ActualEndDateTime      = DateTimeUtil::getSystemDateTime();
            _activities.ActivityTaskTimeType   = smmActivityTaskTimeType::Completed;
            _activities.PercentageCompleted    = 100;
        }
        else
        {
            _activities.Closed = NoYes::No;
            _activities.DoneByWorker           = 0;
            _activities.ActualEndDateTime      = utcDateTimeNull();
            _activities.ActivityTaskTimeType   = smmActivityTaskTimeType::InProgress;
            _activities.PercentageCompleted    = 0;
        }

        // Update the activty
        if (_activities.validateWrite(true))
        {
            _activities.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromCampaign</Name>
				<Source><![CDATA[
    public static void updateFromCampaign(smmActivities _activities, smmCampaignTable _campaign)
    {
        ttsbegin;

        // All activity dates is set to the new quotation follow up date
        _activities.setStartDate(_campaign.CampaignFollowUpDate);
        _activities.setEndDate(_campaign.CampaignFollowUpDate);
        _activities.setReminderDate(_campaign.CampaignFollowUpDate);

        // Is the campaign closed or cancelled
        if (_campaign.CampaignStatus == smmCampaignStatus::Cancelled || _campaign.CampaignStatus == smmCampaignStatus::Closed)
        {
            // Close the activity
            _activities.Closed                 = NoYes::Yes;
            _activities.DoneByWorker           = smmUtility::getCurrentContactWorker();
            _activities.ActualEndDateTime      = DateTimeUtil::getSystemDateTime();
            _activities.ActivityTaskTimeType   = smmActivityTaskTimeType::Completed;
            _activities.PercentageCompleted    = 100;
        }
        // The campaign is active
        else
        {
            // Make sure the actvity is open
            _activities.Closed = NoYes::No;
            _activities.DoneByWorker           = 0;
            _activities.ActualEndDateTime      = utcDateTimeNull();
            _activities.ActivityTaskTimeType   = smmActivityTaskTimeType::InProgress;
            _activities.PercentageCompleted    = 0;
        }

        // Update the activty
        if (_activities.validateWrite(true))
        {
            _activities.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromCampaignTarget</Name>
				<Source><![CDATA[
    public static void updateFromCampaignTarget(smmActivities _activities, smmCampaignSelection _campaignTarget)
    {
        ttsbegin;

        // All activity dates is set to the new quotation follow up date
        _activities.setStartDate(_campaignTarget.PlannedDate);
        _activities.setEndDate(_campaignTarget.PlannedDate);
        _activities.setReminderDate(_campaignTarget.PlannedDate);

        _activities.ResponsibleWorker  = _campaignTarget.FollowUpRespWorker;

        // Is the campaign closed or cancelled
        if (_campaignTarget.Responded == NoYes::Yes)
        {
            // Close the activity
            _activities.Closed                 = NoYes::Yes;
            _activities.DoneByWorker           = smmUtility::getCurrentContactWorker();
            _activities.ActualEndDateTime      = DateTimeUtil::getSystemDateTime();
            _activities.ActivityTaskTimeType   = smmActivityTaskTimeType::Completed;
            _activities.PercentageCompleted    = 100;
        }
        // The campaign is active
        else
        {
            // Make sure the actvity is open
            _activities.Closed = NoYes::No;
            _activities.DoneByWorker           = 0;
            _activities.ActualEndDateTime      = utcDateTimeNull();
            _activities.ActivityTaskTimeType   = smmActivityTaskTimeType::InProgress;
            _activities.PercentageCompleted    = 0;
        }

        // Update the activty
        if (_activities.validateWrite(true))
        {
            _activities.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromPSAActivitySetup</Name>
				<Source><![CDATA[
    public static void updateFromPSAActivitySetup(smmActivities _activities, PSAActivitySetup _psaActivitySetup)
    {
        if (!isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            return;
        }

        ttsbegin;
        _activities.selectForUpdate(true);
        _activities.setStartDate(_psaActivitySetup.psaSchedStart);
        _activities.setEndDate(_psaActivitySetup.psaSchedEnd);
        _activities.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromQuotation</Name>
				<Source><![CDATA[
    public static void updateFromQuotation(smmActivities _activities, SalesQuotationTable _quotation)
    {
        #OCCRetryCount
        try
        {
            ttsbegin;

            // All activity dates is set to the new quotation follow up date
            _activities.setStartDate(_quotation.QuotationFollowUpDate);
            _activities.setEndDate(_quotation.QuotationFollowUpDate);
            _activities.setReminderDate(_quotation.QuotationFollowUpDate);

            // Is the quotation cancelled or lost?
            if (_quotation.QuotationStatus == SalesQuotationStatus::Cancelled || _quotation.QuotationStatus == SalesQuotationStatus::Lost || _quotation.QuotationStatus == SalesQuotationStatus::Confirmed)
            {
                // If the quotation is lost or cancelled, the activity is closed
                _activities.Closed                 = NoYes::Yes;
                _activities.DoneByWorker           = smmUtility::getCurrentContactWorker();
                _activities.ActualEndDateTime      = DateTimeUtil::getSystemDateTime();

                // Is the activity a task
                if (_activities.Category == smmActivityCategory::Task)
                {
                    // Change task task to completed
                    _activities.ActivityTaskTimeType   = smmActivityTaskTimeType::Completed;
                    _activities.PercentageCompleted    = 100;
                }
            }

            // Update the activty
            if (_activities.validateWrite(true))
            {
                try 
                {
                    _activities.update();

                    // Copy new reference fields from quotation
                    RecId refRecId = CustTable::find(_quotation.CustAccount).RecId;
                    smmActivityParentLinkTable::updateOrCreateLink(_activities.ActivityNumber, smmActivityParentType::Customer, refRecId);
                    refRecId = smmBusRelTable::find(_quotation.BusRelAccount).RecId;
                    smmActivityParentLinkTable::updateOrCreateLink(_activities.ActivityNumber, smmActivityParentType::BusRel, refRecId);
                    refRecId = ContactPerson::find(_quotation.ContactPersonId).RecId;
                    smmActivityParentLinkTable::updateOrCreateLink(_activities.ActivityNumber, smmActivityParentType::ContactPerson, refRecId);
                    refRecId = SalesTable::find(_quotation.SalesIdRef).RecId;
                    smmActivityParentLinkTable::updateOrCreateLink(_activities.ActivityNumber, smmActivityParentType::SalesTable, refRecId);
                    refRecId = smmOpportunityTable::find(_quotation.OpportunityId).RecId;
                    smmActivityParentLinkTable::updateOrCreateLink(_activities.ActivityNumber, smmActivityParentType::Opportunity, refRecId);
                }
                catch (Exception::UpdateConflict)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                catch(Exception::Error)
                {
                    throw Exception::Error;
                }
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch(Exception::Error)
        {
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromSMAServiceOrder</Name>
				<Source><![CDATA[
    public static void updateFromSMAServiceOrder(smmActivities _activities, SMAServiceOrderTable _smaServiceOrderTable)
    {
        RecId           refRecId;
        TransDate       dt = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(_smaServiceOrderTable.ServiceDateTime,DateTimeUtil::getUserPreferredTimeZone()));

        ttsbegin;

        // Don't update activity dates, if called from Service Order Table form; users are prompted whether to update when Preferred service time is changed.
        if (!(FormDataUtil::getFormDataSource(_smaServiceOrderTable) &&
            FormDataUtil::getFormDataSource(_smaServiceOrderTable).formRun() &&
            FormDataUtil::getFormDataSource(_smaServiceOrderTable).formRun().name() == formStr(SMAServiceOrderTable)))
        {
            _activities.setStartDate(dt);
            _activities.setEndDate(dt);
        }

        _activities.setReminderDate(dt);

        // Copy new reference fields from service order
        refRecId = ContactPerson::find(_smaServiceOrderTable.ContactPersonId).RecId;
        smmActivityParentLinkTable::updateOrCreateLink(_activities.ActivityNumber, smmActivityParentType::ContactPerson, refRecId);
        refRecId = ProjTable::find(_smaServiceOrderTable.ProjId).RecId;
        smmActivityParentLinkTable::updateOrCreateLink(_activities.ActivityNumber, smmActivityParentType::Project, refRecId);

        // Open activity if service order in not signed off
        if (!_smaServiceOrderTable.SignOff && _activities.Closed)
        {
            _activities.Closed = NoYes::No;
            _activities.DoneByWorker           = 0;
            _activities.ActualEndDateTime      = utcDateTimeNull();
            _activities.ActivityTaskTimeType   = smmActivityTaskTimeType::InProgress;
            _activities.PercentageCompleted    = 0;
        }

        // Is the service order cancelled or transferred?
        if (_smaServiceOrderTable.Progress != SMAServiceOrderProgress::InProcess)
        {
            // If the service order is lost or cancelled, the activity is closed
            _activities.Closed                 = NoYes::Yes;
            _activities.DoneByWorker           = smmUtility::getCurrentContactWorker();
            _activities.ActualEndDateTime      = DateTimeUtil::getSystemDateTime();

            // Is the activity a task
            if (_activities.Category == smmActivityCategory::Task)
            {
                // Change task task to completed
                _activities.ActivityTaskTimeType   = smmActivityTaskTimeType::Completed;
                _activities.PercentageCompleted    = 100;
            }
        }

        // Update the activty
        if (_activities.validateWrite(true))
        {
            _activities.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>