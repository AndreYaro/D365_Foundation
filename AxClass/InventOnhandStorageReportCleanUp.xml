<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventOnhandStorageReportCleanUp</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventOnhandStorageReportCleanUp extends RunBaseBatch implements BatchRetryable
{
    private ExecutionTime   reportExecutionTimeDelBefore;
    private DialogField     dialogReportExecutionTimeDelBefore;
    private QueryRun        queryRun;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        reportExecutionTimeDelBefore
    #Endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        InventOnhandStorage inventOnhandStorage;

        while (queryRun.next())
        {
            inventOnhandStorage = queryRun.get(tableNum(InventOnhandStorage));
            ExecutionTime executionTime = DateTimeUtil::parse(inventOnhandStorage.ExecutionTime);
            if (inventOnhandStorage.RecId && executionTime < reportExecutionTimeDelBefore)
            {
                this.deleteSelectedData(inventOnhandStorage.RecId);
            }
        }

        this.deleteOrphanData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSelectedData</Name>
				<Source><![CDATA[
    private void deleteSelectedData(RecId inventOnhandStorageRecId)
    {
        ttsbegin;

        InventOnhandStorageReportLine inventOnhandStorageReportLine;
        InventOnhandStorage inventOnhandStorage;
        CreatedTransactionId inventOnhandStorageTransactionId;

        select TransactionId from inventOnhandStorage where inventOnhandStorage.RecId == inventOnhandStorageRecId;
        inventOnhandStorageTransactionId = inventOnhandStorage.TransactionId;

        inventOnhandStorage.skipDatabaseLog(true);
        inventOnhandStorage.skipDataMethods(true);
        inventOnhandStorage.skipEvents(true);
        delete_from inventOnhandStorage where inventOnhandStorage.RecId == inventOnhandStorageRecId;

        inventOnhandStorageReportLine.skipDatabaseLog(true);
        inventOnhandStorageReportLine.skipDataMethods(true);
        inventOnhandStorageReportLine.skipEvents(true);
        delete_from inventOnhandStorageReportLine
            where inventOnhandStorageReportLine.CreatedTransactionId == inventOnhandStorageTransactionId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOrphanData</Name>
				<Source><![CDATA[
    private void deleteOrphanData()
    {
        InventOnhandStorageReportLine inventOnhandStorageReportLine;
        InventOnhandStorage inventOnhandStorage;
            
        inventOnhandStorageReportLine.skipDatabaseLog(true);
        inventOnhandStorageReportLine.skipDataMethods(true);
        inventOnhandStorageReportLine.skipEvents(true);
        delete_from inventOnhandStorageReportLine
            notexists join inventOnhandStorage
            where inventOnhandStorage.TransactionId == inventOnhandStorageReportLine.CreatedTransactionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentBatchHeader</Name>
				<Source><![CDATA[
    public BatchHeader getCurrentBatchHeader()
    {
        return BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SCM:InventOnhandStorageReportCleanUp";
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    Object dialog()
    {
        #define.textWidth(60)
        #define.textHeight(5)

        var dialog = super();

        /* Show batch details and warnings
        We have to create a fake invisible border control to retain the focus
        on the first tab when starting the dialog */
        DialogField dialogField = dialog.addFieldValue(extendedTypeStr(Notes), "@SCM:InventOnhandStorageReportCleanUpDescription");
        dialogField.showLabel(false);
        dialogField.border(1);
        dialogField.allowEdit(false);
        dialogField.displayHeight(#textHeight);
        dialogField.displayLength(#textWidth);

        dialogReportExecutionTimeDelBefore = dialog.addField(extendedTypeStr(ExecutionTime),"@SCM:InventOnhandStorageReportCleanUpExecTimeDelBefore");
        dialogReportExecutionTimeDelBefore.value(reportExecutionTimeDelBefore);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        reportExecutionTimeDelBefore = dialogReportExecutionTimeDelBefore.value();
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        reportExecutionTimeDelBefore = prevMth(prevMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    private void initQuery()
    {
        Query query = new Query();

        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(InventOnhandStorage));
        QueryBuildRange queryBuildRange = queryBuildDataSource.addRange(fieldnum(InventOnhandStorage, ExecutionName));
        queryBuildRange.value('');

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion,#CurrentList,queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container _packedClass)
    {
        Integer         version      = RunBase::getVersion(_packedClass);
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList,packedQuery] = _packedClass;
                if (packedQuery && conLen(packedQuery) == 1)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(xArgs _args)    
    {
        InventOnhandStorageReportCleanUp cleanUp = new InventOnhandStorageReportCleanUp();
        cleanUp.initQuery();
        if (!cleanUp.prompt())
        {
            return;
        }

        cleanUp.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowSaveLast</Name>
				<Source><![CDATA[
    public boolean allowSaveLast()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>