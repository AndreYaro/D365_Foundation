<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailReplenishmentCrossDocking</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailReplenishmentCrossDocking</c> class creates a crossdocking and sets the quantity to be crossdocked.
/// </summary>
class RetailReplenishmentCrossDocking extends RetailReplenishment
{
    PurchLine           m_tPurchLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calSelectedLinesQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the receiving quantity.
    /// </summary>
    void calSelectedLinesQty()
    {
        PurchLine   tPurchLine;
        PurchQty    rPurchQty;
        RetailBuyersPushLine tBuyersPushLine;
        Qty                  rQtyPerLine;

        m_oLineQry.reset();

        while ( m_oLineQry.next() )
        {
            tPurchLine = m_oLineQry.get(tableNum(PurchLine));

            if (filter && !strScan(filter , tPurchLine.ItemId, 1, strLen(filter)))
            {
                // Continue if item is not in the filter
                continue;
            }

            // Find the corresponding cross-docking line
            tBuyersPushLine = this.getBuyersPushLine(tPurchLine);
            // Exclude on-hand quantity of items that has a manual specified quantity to contribute
            if (tBuyersPushLine.UserSpecified == NoYes::Yes)
            {
                continue;
            }

            //Use receive now
            if (tPurchLine.PurchReceivedNow)
            {   // Get partial received amount...(in purchase units)
                rQtyPerLine = tPurchLine.PurchReceivedNow;
            }
            else if (tPurchLine.RemainPurchPhysical)
            {   // Get remaining (before received) amount...
                rQtyPerLine = tPurchLine.RemainPurchPhysical;
            }
            else
            {   // Get recieved amount... (in purchase units)
                rQtyPerLine = tPurchLine.PurchQty;
            }

            rPurchQty += rQtyPerLine > 0 ? rQtyPerLine : 0;
        }

        m_rQtyInSelectedLines = rPurchQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countNumberOfSelectedLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of lines for the Purchase order.
    /// </summary>
    void countNumberOfSelectedLines()
    {
        PurchLine   tPurchLine;

        select count(RecId) from tPurchLine
            where tPurchLine.PurchId    ==  m_tPurchLine.PurchId;

        m_iNumberOfLines = any2int(tPurchLine.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedForAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the quantity to be distributed.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// throws error if
    /// </exception>
    void fixedForAll()
    {
        RetailReplenishmentHierarchyView    tReplenishmentHierarchy;
        RetailStoreTable                    tStoreTable;
        int64                               storeCount;
        RefRecId                            selectedHierarchyFilter = this.parmBuyersPush().ReplenishmentHierarchyNode;

        if (selectedHierarchyFilter > 0)
        {
            tReplenishmentHierarchy = OMHierarchyTypeEx::findRetailReplenishment(selectedHierarchyFilter);

            if (m_tInventLocation.RecId > 0)
            {
                select count(RecId) from tWarehouses
                    where   tWarehouses.InventLocationId != m_tInventLocation.InventLocationId &&
                            tWarehouses.InventLocationDataAreaId != m_tInventLocation.dataAreaId;

                storeCount = any2int(tWarehouses.RecId);
            }
        }

        if (m_tInventLocation.RecId > 0)
        {
            storeCount += 1;
        }

        if ((selectedHierarchyFilter == 0) && (m_tInventLocation.RecId == 0))
        {
            select count(RecId) from tStoreTable;

            storeCount = any2int(tStoreTable.RecId);
        }

        this.countNumberOfSelectedLines();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBuyersPushLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the record in <c>RetailBuyersPushLine</c> table based on the instance of the record passed as the parameter.
    /// </summary>
    /// <param name="_common">
    /// The instance of a table.
    /// </param>
    /// <returns>
    /// An instance of the table <c>RetailBuyersPushLine</c>.
    /// </returns>
    public RetailBuyersPushLine getBuyersPushLine(Common _common)
    {
        RetailBuyersPushLine buyersPushLine;

        // in this case _tCommon is PurchLine, so we can get buyers push line by RefRecId
        select buyersPushLine
            where buyersPushLine.RefRecId == _common.RecId;

        return buyersPushLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Item number.
    /// </summary>
    /// <param name="_tCommon">
    /// An instance of <c>PurchLine</c> table.
    /// </param>
    /// <returns>
    /// Reference number for the item.
    /// </returns>
    ItemId getItem(Common    _tCommon)
    {
        PurchLine   tPurchLine = _tCommon;

        return tPurchLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the instance of <c>PurchLine</c> table and finds the record of <c>PurchTable</c> table.
    /// </summary>
    /// <param name="_tCommon">
    /// An instance of <c>PurchLine</c> table.
    /// </param>
    /// <returns>
    /// Returns the <c>PurchTable</c> value.
    /// </returns>
    PurchTable getPurchTable(Common _tCommon)
    {
        PurchLine   tPurchLine = _tCommon;
        PurchTable  purchTable;

        if (tPurchLine)
        {
            purchTable = PurchTable::find(tPurchLine.PurchId);
        }

        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity based on "ReceiveNow" parameter.
    /// </summary>
    /// <param name="_tPurchLine">
    /// An instance of <c>PurchLine</c> table.
    /// </param>
    /// <returns>
    /// Received quantity if "RecieveNow" is set; else remaining quantity.
    /// </returns>
    Qty getQty(Common _tPurchLine)
    {
        PurchLine cursor = _tPurchLine as PurchLine;

        //Use receive now
        if (cursor.PurchReceivedNow)
        {   // Get partial received amount...(in purchase units)
            return cursor.PurchReceivedNow;
        }
        else if (cursor.RemainPurchPhysical)
        {   // Get remaining (before received) amount...
            return cursor.RemainPurchPhysical;
        }
        else
        {   // Get recieved amount...(in purchase units)
            return cursor.PurchQty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of <c>RetailReplenishmentCrossDocking</c> class.
    /// </summary>
    /// <param name="_rQtyToDistribute">
    /// Quantity to distribute.
    /// </param>
    /// <param name="_buyersPush">
    /// RetailBuyersPush table buffer variable that contains information about distribution.
    /// </param>
    /// <param name="_purchLine">
    /// Purchase order line (PurchLine table buffer variable), which we cross dock for.
    /// </param>
    void new(Qty                    _rQtyToDistribute,
             RetailBuyersPushTable  _buyersPush,
             PurchLine              _purchLine)
    {
        // save current buyersPush
        this.parmBuyersPush(_buyersPush);

        m_rQtyToDistribute = _rQtyToDistribute;

        select crossCompany m_tInventLocation
            where m_tInventLocation.RecId == _buyersPush.LocationRecId;

        m_tPurchLine =   _purchLine;

        replenishmentType = RetailReplenishmentType::CrossDocking;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a new query with <c>PurchLine</c> table.
    /// </summary>
    protected void queryBuild()
    {
        super();

        //Purchlines
        m_oLineQry = new QueryRun(new Query());
        m_oLineQry.query().addDataSource(tableNum(PurchLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query with Purchase order and item details.
    /// </summary>
    protected void queryUpdate()
    {
        QueryBuildDataSource    oQryBuildDS;

        oQryBuildDS    = m_oLineQry.query().dataSourceTable(tableNum(PurchLine));

        oQryBuildDS.clearRanges();
        oQryBuildDS.addRange(fieldNum(PurchLine, PurchId)).value(m_tPurchLine.PurchId);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>replenish</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a crossDocking.
    /// </summary>
    /// <param name="_respectAssortments">
    /// boolean indicates if assortments should be respected (default is false).
    /// </param>
    void replenish(boolean _respectAssortments = false)
    {
        this.calcTotals();

        m_oLineQry.reset();

        this.progressInit("@RET805", this.numberOfLines() ,#AviUpdate);

        super(_respectAssortments);

        this.reset();

        if (FormDataUtil::isFormDataSource(m_tPurchLine))
        {
            FormDataUtil::getFormDataSource(m_tPurchLine).research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the replenishment type (buyers push or cross docking) of the current replenishment object.
    /// </summary>
    /// <returns>
    /// The replenishment type of the current replenishment object.
    /// </returns>
    public final RetailReplenishmentType type()
    {
        return RetailReplenishmentType::CrossDocking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrFindPushFromPurch</Name>
				<Source><![CDATA[
/// <summary>
    /// Creates/finds Cross docking from a purchase order
    /// </summary>
    /// <param name="_purchTable">
    /// Purchase order.
    /// </param>
    /// <param name="_includeAddedPOLines">
    /// A Boolean that determines if purchase lines that were created after the buyers push was created should be added to the existing buyers push.
    /// </param>
    /// <returns>
    /// Cross docking table variable (<c>RetailBuyersPushTable</c> type) for the purchase order
    /// </returns>
    /// <remarks>
    /// Note that method returns table variable not only buyers push id.
    /// </remarks>
    public static RetailBuyersPushTable createOrFindPushFromPurch(PurchTable _purchTable, boolean _includeAddedPOLines = false)
    {
        PurchLine                  purchLine;
        RetailBuyersPushTable      buyersPushTable, ret;
        RetailBuyersPushLine       buyersPushLineNotExist;

        RetailTracer::Info('Replenishment', funcName(), 'Looking for cross docking for purchase order %1.', _purchTable.PurchId);

        select firstonly PurchId, RecId, buyersPushId, TransferOrderCreated, JournalCreated from buyersPushTable
            where buyersPushTable.PurchId == _purchTable.PurchId;

        if (buyersPushTable.RecId)
        {   // Return the found record...
            ret = buyersPushTable;
            RetailTracer::Info('Replenishment', funcName(), 'The cross docking exists (id: %1).', ret.BuyersPushId);

            //if transfer orders/journals has already been created we don't add to the buyers push since we cannot support creating orders multiple times
            if (_includeAddedPOLines
            &&  buyersPushTable.TransferOrderCreated    == NoYes::No
            &&  buyersPushTable.JournalCreated          == NoYes::No)
            {
                while select ItemId, PurchUnit, LineNumber, InventDimId, RecId from purchLine
                    where purchLine.PurchId == _purchTable.PurchId
                notexists join  buyersPushLineNotExist
                    where buyersPushLineNotExist.RefRecId == purchLine.RecId
                {
                    RetailReplenishmentCrossDocking::createBuyerPushLineAndQtyLines(buyersPushTable, purchLine);
                }
            }
        }
        else
        {   // None found - create a record...
            buyersPushTable.clear();
            buyersPushTable.BuyersPushId = NumberSeq::newGetNum(NumberSeqReference::findReference(extendedTypeNum(RetailBuyersPushId))).num();
            buyersPushTable.Description = _purchTable.PurchId;
            buyersPushTable.PurchId     = _purchTable.PurchId;
            buyersPushTable.write();

            ret = buyersPushTable;

            while select ItemId, PurchUnit, LineNumber, InventDimId, RecId from purchLine
                where purchLine.PurchId == _purchTable.PurchId
            {
                RetailReplenishmentCrossDocking::createBuyerPushLineAndQtyLines(buyersPushTable, purchLine);
            }

            RetailTracer::Info('Replenishment', funcName(), 'New cross docking has been created (id: %1).', ret.BuyersPushId);
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>createBuyerPushLineAndQtyLines</Name>
				<Source><![CDATA[
    private static void createBuyerPushLineAndQtyLines(
        RetailbuyersPushTable   _buyersPushTable,
        PurchLine               _purchLine)
    {
        RetailBuyersPushLine buyersPushLine;

        buyersPushLine.BuyersPushId = _buyersPushTable.BuyersPushId;
        buyersPushLine.ItemId       = _purchLine.ItemId;
        buyersPushLine.UnitID       = _purchLine.PurchUnit;
        buyersPushLine.LineNum      = int642int(_purchLine.LineNumber);
        buyersPushLine.InventDimId  = _purchLine.InventDimId;
        buyersPushLine.RefRecId     = _purchLine.RecId;
        buyersPushLine.insert();

        RetailBuyersPushLine::createBuyersPushLineQtyLines(buyersPushLine);
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>