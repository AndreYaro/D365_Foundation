<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesCalcTax</Name>
	<SourceCode>
		<Declaration><![CDATA[
class  SalesCalcTax extends TradeCalcTax
{
    Common              source;
    SalesLine           salesLine;

    boolean             update;
    SalesTotals         salesTotals;

    MarkupTrans             markupTrans;
    TradeTotalsIQueryRun    markupQueryRun;

    internal MarkupBaseValueCalcEngineProvider markupBaseValueCalcEngineProvider;
    protected boolean isAutoChargesSetupSequenceCompoundFeatureEnabled = AutoChargesSetupSequenceCompoundFeature::instance().IsEnabled();
    protected boolean markupCalcPerInvoiceForSummaryUpdate = SalesParameters::find().IsMarkupCalculationPerInvoiceForSummaryUpdateEnabled;

    // <GEERU><GIN>
    #ISOCountryRegionCodes
    // </GIN></GEERU>

    //<GEEU>
    ProjInvoiceParmTable    projInvoiceParmTable;
    //</GEEU>
    //<GEERU>
    boolean                 postNegativeLinesAsStorno;
    //</GEERU>

    //<GEEPL>
    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTax</Name>
				<Source><![CDATA[
    TaxAmountCur calcTax(TradeTotalsBase _salesTotals)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWithholdTax_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates withhold tax.
    /// </summary>
    /// <param name="_salesTotals">
    /// The sales totals.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxAmountCur</c> class.
    /// </returns>
    public TaxAmountCur calcWithholdTax_IN(TradeTotalsBase _salesTotals)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMarkupQueryRun</Name>
				<Source><![CDATA[
    protected TradeTotalsIQueryRun createMarkupQueryRun(TableId      tableId, RecId        recId)
    {
        MarkupTrans noFetchMarkupTrans = TradeTotalsBuildNoFetchMarkupTrans::newFromSource(tableId, recId).buildMarkupTransNoFetchSelect(
            // <GEERU>
            goodsInRouteId
            // </GEERU>
            );

        noFetchMarkupTrans.selectForUpdate(update);

        return TradeTotalsNoFetchSelect::newFromNoFetchStatement(noFetchMarkupTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    CurrencyCode currencyCode()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>doTaxGroupExistsForDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets a value that indicates if a tax group exists for on any line of the document.
    /// </summary>
    /// <returns>
    ///   true if a tax group exists for any line; otherwise, false.
    /// </returns>
    public boolean doTaxGroupExistsForDocument()
    {
        // Default is true to force the tax engine to calculate taxes.
        // Specific documents will override and return results as needed.
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDisc</Name>
				<Source><![CDATA[
    DiscAmount  endDisc()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    CustExchRate exchRate(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    ExchrateSecondary exchRateSecondary(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingCurrencyExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the reporting currency exchange rate.
    /// </summary>
    /// <returns>The reporting currency exchange rate.</returns>
    internal CustExchRate reportingCurrencyExchangeRate()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesLine</Name>
				<Source><![CDATA[
    void  getSalesLine()
    {
        select salesLine
            index hint TransIdIdx
            where salesLine.InventTransId == this.transTransId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of the <c>SalesTotals</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>SalesTotals</c> class.
    /// </returns>
    public salesTotals getSalesTotals()
    {
        return salesTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursor</Name>
				<Source><![CDATA[
    void  initCursor()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursorMarkup</Name>
				<Source><![CDATA[
    void  initCursorMarkup(TableId      tableId,
                           RecId        recId)
    {
        markupQueryRun = this.createMarkupQueryRun(tableId, recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursorMarkupHeader</Name>
				<Source><![CDATA[
    void  initCursorMarkupHeader(TableId      tableId,
                                 RecId        recId)
    {
        if (!skipTableMarkup)
        {
            this.initCursorMarkup(tableId, recId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursorMarkupLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initiates the cursor for line related markup transactions.
    /// </summary>
    /// <param name="_tableId">
    ///     A <c>RefTableId</c> type.
    /// </param>
    /// <param name="_recId">
    ///     A <c>RefRecId</c> type.
    /// </param>
    protected void  initCursorMarkupLine(RefTableId  _tableId, RefRecId _recId)
    {
        if (!skipLineMarkup)
        {
            this.initCursorMarkup(_tableId, _recId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    TransDate  invoiceDate()
    {
        if (salesLine.InventTransIdReturn && !SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            return salesLine.ProjId ? ProjInvoiceItem::findInventTransId_W(salesLine.InventTransIdReturn).InvoiceDate
                                    : CustInvoiceTrans::findInventTransid(salesLine.InventTransIdReturn).InvoiceDate;
        }

        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxIncluded</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether tax is included in the item price for the sales document.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    /// <remarks>
    ///    This method is overridden in child classes to determine whether tax is included for the various
    ///    sales documents.
    /// </remarks>
    public boolean isTaxIncluded()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAmount</Name>
				<Source><![CDATA[
    MarkupAmount  markupAmount()
    {
        AmountCur  value;
        TaxSales   taxSales = tax as TaxSales;
        AmountCur  MCRAbsoluteValue;

        isAutoChargesSetupSequenceCompoundFeatureEnabled = 
            isAutoChargesSetupSequenceCompoundFeatureEnabled ?
                !markupTrans.isInterCompanyAndPercentCategory() :       
                isAutoChargesSetupSequenceCompoundFeatureEnabled;

        if (salesLine)
        {
            value = this.transLineAmount();
        }
        else
        {
            if (isAutoChargesSetupSequenceCompoundFeatureEnabled && markupCalcPerInvoiceForSummaryUpdate)
            {
                value = taxSales.totalBalance();
            }
            else
            {
                value = taxSales.orderBalance(markupTrans.TransRecId);
            }
            MCRAbsoluteValue = taxSales.mcrOrderBalanceAbsoluteValue(markupTrans.TransRecId);
        }

        MarkupBaseValueCalcEngine markupBaseValueCalcEngine;

        if (isAutoChargesSetupSequenceCompoundFeatureEnabled && markupBaseValueCalcEngineProvider)
        {
            markupBaseValueCalcEngine = markupBaseValueCalcEngineProvider.getInstance(this.getSourceRecordForMarkupBaseValueCalcEngine(), taxSales.getTaxMarkupCompound());

            if (markupBaseValueCalcEngine)
            {
                value = markupBaseValueCalcEngine.calculateBaseAmount(value, markupTrans);
            }
        }

        MarkupAmount markupAmount = markupTrans.signedValue(Markup::calcTrans(markupTrans, this.transQty(), value, value, this.invoiceDate(), MCRAbsoluteValue));

        if (isAutoChargesSetupSequenceCompoundFeatureEnabled && markupBaseValueCalcEngine)
        {
            markupBaseValueCalcEngine.compoundMarkupValue(markupAmount, markupTrans);
        }

        return markupAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceRecordForMarkupBaseValueCalcEngine</Name>
				<Source><![CDATA[
    protected Common getSourceRecordForMarkupBaseValueCalcEngine()
    {
        if (markupCalcPerInvoiceForSummaryUpdate && tax && tax is ITaxMarkupCompound)
        {
            return (tax as ITaxMarkupCompound).getMarkupAutoOriginSource();
        }
        else 
        {
            if (salesLine) // Line markup
            {
                return salesLine;
            }
            else // Header markup
            {
                return markupTrans;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupDefaultDimension</Name>
				<Source><![CDATA[
    DimensionDefault markupDefaultDimension()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupQueryRunGet</Name>
				<Source><![CDATA[
    protected Common markupQueryRunGet(TradeTotalsIQueryRun _markupQueryRun)
    {
        TradeTotalsNoFetchSelect noFetchSelect = _markupQueryRun as TradeTotalsNoFetchSelect;

        MarkupTrans markupTransStatement = noFetchSelect.parmCommonNoFetchStatement();

        return markupTransStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupQueryRunNext</Name>
				<Source><![CDATA[
    protected boolean markupQueryRunNext(TradeTotalsIQueryRun _markupQueryRun)
    {
        TradeTotalsNoFetchSelect noFetchSelect = _markupQueryRun as TradeTotalsNoFetchSelect;

        MarkupTrans markupTransStatement = noFetchSelect.parmCommonNoFetchStatement();

        next markupTransStatement;

        return markupTransStatement.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupTaxGroup</Name>
				<Source><![CDATA[
    TaxGroup    markupTaxGroup()
    {
        return markupTrans.TaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupTaxItemGroup</Name>
				<Source><![CDATA[
    TaxItemGroup    markupTaxItemGroup()
    {
        return markupTrans.TaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void  new(Common  _source)
    {
        source  = _source;
        update  = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    Common  nextLine()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextMarkupLine</Name>
				<Source><![CDATA[
    MarkupTrans  nextMarkupLine()
    {
        this.markupQueryRunNext(markupQueryRun);

        markupTrans = this.markupQueryRunGet(markupQueryRun);

        return markupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostNegativeLinesAsStorno_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets o sets a property: post tax related to negative lines of document as storno.
    /// </summary>
    /// <param name="_value">
    ///   A new value.
    /// </param>
    /// <returns>
    ///   A current value.
    /// </returns>
    public boolean parmPostNegativeLinesAsStorno_RU(boolean _value = postNegativeLinesAsStorno)
    {
        postNegativeLinesAsStorno = _value;
        return postNegativeLinesAsStorno;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    public void post(LedgerVoucher _ledgerVoucher, NoYes _post =   NoYes::Yes)
    {
        TaxSalesInvoice taxSalesInvoice = new TaxSalesInvoice(
            _post,
            this,
            this.tax().tmpTaxWorkTrans());

        // <GIN>
        boolean                 postWHT = _post;
        // </GIN>

        // <GIN>
        if (TaxParameters::isCustomsEnable_IN()
            && this is SalesCalcTax_Invoice
            && SalesTable::findRecId(this.salesTableRecID()).CustomsExportOrder_IN == NoYes::Yes)
        {
            taxSalesInvoice.addTaxTypeExcludedInPosting(TaxType_IN::Customs);
        }
        // </GIN>
        // <GBR>
        if (BrazilParameters::isEnabled() && !this.validateTaxes_BR())
        {
            throw Exception::Error;
        }
        // </GBR>

        // <GEEU>
        if (TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            taxSalesInvoice.parmVatRegData_W(this.vatRegData_W());
        }
        // </GEEU>

        // <GEERU>
        taxSalesInvoice.parmInvoicePostingType_RU(invoicePostingType);
        taxSalesInvoice.parmPostNegativeLinesAsStorno_RU(postNegativeLinesAsStorno);
        // </GEERU>

        taxSalesInvoice.updateAndPost(LedgerPostingController::newForLedgerPostingJournal(_ledgerVoucher));

        // <GIN>
        if (TaxWithholdParameters_IN::checkTaxParameters()
            && this.taxWithholdCalculation_IN())
        {
            // For Customs Export order, customs taxes are posted during ShippingBill and _post is false for invoice. But Withhold taxes should be posted during invoice.
            // Added check to bypass _post for Export order.
            if (this is SalesCalcTax_Invoice && SalesTable::findRecId(this.salesTableRecID()).CustomsExportOrder_IN == NoYes::Yes)
            {
                postWHT = true;
            }

            TaxWithholdPostSales_IN taxWithholdPost = new TaxWithholdPostSales_IN(postWHT, this, this.taxWithholdCalculation_IN().tmpTaxWithholdWorkTrans());
            taxWithholdPost.updateAndPost(LedgerPostingController::newForLedgerPostingJournal(_ledgerVoucher));
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceParmTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets and gets the <c>projInvoiceParmTable</c> variable.
    /// </summary>
    /// <param name="_projInvoiceParmTable">
    /// The <c>ProjInvoiceParmTable</c> object to set the <c>projInvoiceParmTable</c> variable to; optional.
    /// </param>
    /// <returns>
    /// The <c>projInvoiceParmTable</c> variable.
    /// </returns>
    public ProjInvoiceParmTable projInvoiceParmTable(ProjInvoiceParmTable _projInvoiceParmTable = null)
    {
        if (! prmisDefault(_projInvoiceParmTable))
        {
            projInvoiceParmTable = _projInvoiceParmTable;
        }
        return projInvoiceParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recID</Name>
				<Source><![CDATA[
    RecId  recID()
    {
        return source.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesMarkupRecId</Name>
				<Source><![CDATA[
    RecId  salesMarkupRecId()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesMarkupTableId</Name>
				<Source><![CDATA[
    TableId  salesMarkupTableId()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTableRecID</Name>
				<Source><![CDATA[
    RecId  salesTableRecID()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTableTableID</Name>
				<Source><![CDATA[
    TableId  salesTableTableID()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTax</Name>
				<Source><![CDATA[
    void  setTax(TaxCode       taxCode,
                 TaxAmount     taxAmount)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxMarkup</Name>
				<Source><![CDATA[
    void  setTaxMarkup(TaxWriteCode        taxWriteCode,
                       AmountCur           amountCur)
    {
        markupTrans.TaxWriteCode    = taxWriteCode;
        markupTrans.TaxAmount       = amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    TableId  tableId()
    {
        return source.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tax</Name>
				<Source><![CDATA[
    Tax tax(Tax _tax = tax)
    {
        tax = _tax;
        return tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxationOrigin_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default taxation origin from the invent table.
    /// </summary>
    /// <returns>
    /// The taxation origin for the item of the sales line.
    /// </returns>
    public FITaxationOrigin_BR taxationOrigin_BR()
    {
        return InventTable::find(SalesLine.ItemId).TaxationOrigin_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithholdCalculation_IN</Name>
				<Source><![CDATA[
    public TaxWithholdCalculation_IN taxWithholdCalculation_IN(TaxWithholdCalculation_IN _taxWithholdCalculation = taxWithholdCalculation)
    {
        taxWithholdCalculation = _taxWithholdCalculation;
        return taxWithholdCalculation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTaxAmountBySign_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///   This method returns the actual tax amount.
    /// </summary>
    /// <param name="_includeUseTax">
    ///    A flag that indicates whether use tax should be included in the tax total.
    /// </param>
    /// <returns>
    ///   The actual tax amount in transactional currency.
    /// </returns>
    public container totalTaxAmountBySign_RU(boolean _includeUseTax = false)
    {
        TaxSales    taxSales = tax;
        TaxAmount   positive;
        TaxAmount   negative;
        [positive, negative] = taxSales.totalTaxAmountBySign_RU(_includeUseTax);
        return [-positive, -negative];
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmount</Name>
				<Source><![CDATA[
    AmountCur  transLineAmount()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmountInclTax</Name>
				<Source><![CDATA[
    AmountCur  transLineAmountInclTax()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transPcsPrice</Name>
				<Source><![CDATA[
    PriceCur transPcsPrice()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    SalesQty    transQty()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transRecId</Name>
				<Source><![CDATA[
    RecId  transRecId()
    {
        return salesLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableId</Name>
				<Source><![CDATA[
    TableId  transTableId()
    {
        return salesLine.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxGroup</Name>
				<Source><![CDATA[
    TaxGroup    transTaxGroup()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxItemGroup</Name>
				<Source><![CDATA[
    TaxItemGroup   transTaxItemGroup()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTransId</Name>
				<Source><![CDATA[
    TradeInventTransId  transTransId()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    EUROTriangulation triangulation(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>useAndConsumption_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if the sales is for use and consumption
    /// </summary>
    /// <returns>Returns false as default</returns>
    /// <remarks>This method is implemented in it sub classes</remarks>
    public boolean useAndConsumption_BR()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSalesTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether to use sales tax adjustments.
    /// </summary>
    /// <returns>
    ///  true if sales tax adjustments should be used; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Returns always false.
    /// </remarks>
    public boolean useSalesTaxAdjustments()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxes_BR</Name>
				<Source><![CDATA[
    protected boolean validateTaxes_BR()
    {
        boolean         ok              = true;
        TmpTaxWorkTrans taxWorkTrans    = this.tax().tmpTaxWorkTrans();

        select firstonly taxWorkTrans
            where taxWorkTrans.TaxType_BR == TaxType_BR::ImportTax;

        if (taxWorkTrans)
        {
            ok = checkFailed("@SYS4081914");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatRegData_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// A container used to pass various data between methods.
    /// </summary>
    /// <returns>
    /// A container containing various data.
    /// </returns>
    public container vatRegData_W()
    {
        #ISOCountryRegionCodes
        VatDueDate_W           vatDate;
        DocumentDate           documentDate;
        PlCustVendName         custVendName;
        VATNum                 vatNum;
        Addressing             addressing;
        PlTaxPeriodPaymentCode taxPeriodPaymentCode;

        // derived class is expected to override and return actual value.
        return [ vatDate,
                 documentDate,
                 custVendName,
                 vatNum,
                 addressing,
                 taxPeriodPaymentCode,
                 NoYes::No  ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct an object of one of the subclasses of <c>SalesCalcTax</c> based on the source table.
    /// </summary>
    /// <param name = "_source">The table that determines the  to return.</param>
    /// <param name = "_specQty">A <c>SalesUpdate</c> value.</param>
    /// <param name = "_sumBy">An <c>AccountOrder</c> value.</param>
    /// <param name = "_parmId">A <c>ParmId</c> value.</param>
    /// <param name = "_sumSalesId">A <c>DocumentStatus</c> value.</param>
    /// <param name = "_documentStatus">A <c>SalesId</c> value.</param>
    /// <param name = "_result">An <c>EventHandlerResult</c> where an object of one of the subclasses of <c>SalesCalcTax</c> can be returned.</param>
    static delegate void constructDelegate( Common              _source,
                                            SalesUpdate         _specQty,
                                            AccountOrder        _sumBy,
                                            ParmId              _parmId,
                                            SalesId             _sumSalesId,
                                            DocumentStatus      _documentStatus,
                                            EventHandlerResult  _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct an object of one of the subclasses of <c>SalesCalcTax</c> based on the source table.
    /// </summary>
    /// <param name = "_source">The table that determines the  to return.</param>
    /// <param name = "_specQty">A <c>SalesUpdate</c> value.</param>
    /// <param name = "_sumBy">An <c>AccountOrder</c> value.</param>
    /// <param name = "_parmId">A <c>ParmId</c> value.</param>
    /// <param name = "_sumSalesId">A <c>DocumentStatus</c> value.</param>
    /// <param name = "_documentStatus">A <c>SalesId</c> value.</param>
    /// <returns>An object of one of the subclasses of <c>SalesCalcTax</c></returns>
    public static SalesCalcTax  construct(Common          _source,
                                   SalesUpdate     _specQty        = SalesUpdate::All,
                                   AccountOrder    _sumBy          = AccountOrder::None,
                                   ParmId          _parmId         = '',
                                   SalesId         _sumSalesId     = '',
                                   DocumentStatus  _documentStatus = DocumentStatus::None)
    {
        switch (_source.TableId)
        {
            case tableNum(SalesTable)               :   return SalesCalcTax_Sales::construct(_source, _specQty, _sumBy, _parmId, _sumSalesId, _documentStatus);
            case tableNum(SalesParmTable)           :   return SalesCalcTax_Sales::construct(_source, _specQty, _sumBy, _parmId, _sumSalesId, _documentStatus);
            case tableNum(SalesParmSubTable)        :   return new SalesCalcTax_ParmSubTable(_source, _specQty, _sumBy, _parmId, _sumSalesId, _documentStatus);
            case tableNum(CustQuotationJour)        :   return new SalesCalcTax_Quotation   (_source);
            case tableNum(CustQuotationConfirmJour) :   return new SalesCalcTax_QuotationConfirm   (_source);
            case tableNum(CustConfirmJour)          :   return new SalesCalcTax_Confirm     (_source);
            case tableNum(CustInvoiceJour)          :   return new SalesCalcTax_Invoice     (_source);
            case tableNum(ProjInvoiceJour)          :   return new SalesCalcTax_ProjInvoice (_source, _specQty);
            case tableNum(ProjProposalJour)         :   return new SalesCalcTax_ProjProposal(_source, _specQty);
            case tableNum(SalesBasket)              :   return new SalesCalcTax_Basket      (_source, _specQty);
            case tableNum(SalesQuotationTable)      :   return SalesQuotationCalcTax_Sales::construct(_source, _specQty, _sumBy, _parmId, _sumSalesId, _documentStatus);
            case tableNum(CustInvoice4PaymJour_RU)  :
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                {
                    return new SalesCalcTax_Invoice4Paym_RU(_source);
                }
                break;

            case tableNum(CustomsShippingBillJour_IN)   :
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
                        && TaxParameters::find().Customs_IN)
                {
                    return new SalesCalcTax_ShippingBill_IN(_source);
                }
                break;

            default :
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                SalesCalcTax::constructDelegate(_source, _specQty, _sumBy, _parmId, _sumSalesId, _documentStatus, result);
                if(result.hasResult())
                {
                    return result.result();
                }
        }

        throw error(strFmt("@SYS19306",funcName()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>