<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBSpedFileCreator_Fiscal_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Creates the SPED fiscal file.
/// </summary>
class FBSpedFileCreator_Fiscal_BR extends FBSpedFileCreatorBase_BR
{
    private const str featureReference = GlobalizationConstants::FeatureReferenceBR10010;

    FiscalEstablishment_BR              fiscalEstablishment;
    FBSpedFiscalFileParameters_BR       spedFiscalFileParameters;
    FBParametersPerState_BR             fiscalBooksParametersPerState;

    FBSPEDFileType_BR                   spedFileType;
    FBSPEDFiscalVersion_BR              spedFiscalVersion;
    NoYes                               enableBlockK;

    FBSpedFileObservationCodeTmp_BR     spedFileObservationCode;
    FBSpedFileCostCenterDimensionTmp_BR spedFileCostCenterDimension;
    FBSpedFileMainAccountTmp_BR         spedFileMainAccount;
    LogisticsPostalAddress              fiscalEstablishmentAddress;

    #FiscalDocumentModels_BR

    FBSpedFileCreator_Fiscal_ProdTable_BR spedFileCreatorBlockK_ProdTable;
    FBSpedFileCreator_Fiscal_FBProduction_BR spedFileCreatorBlockK_Production;

    FBSpedFileItemManufacturedTmp_BR spedFileManufacturedProduct;
    FBSpedFileItemManufacturedInPeriodTmp_BR spedFileManufacturedProductInPeriod;
    FBSpedFiscalBlockKWriter_BR spedFileBlockKWriter;

    Map contragentMap;

    StateIBGECode_BR fiscalEstablishmentStateIBGECode;
    private Map restComplAmountsPerReasonCode;

    private TaxReasonCodeForRestitutionComplementSetupHeading_BR taxReasonCodeForRestitutionComplementSetupHeading;
    private FBSPEDFiscalBlockK_BR blockK;

    protected const str BlockH_MOT_INV_01 = '01';
    protected const str BlockH_MOT_INV_05 = '05';
    private const str BlockH_MOT_INV_06 = '06';

    private boolean isCreatedC197;
    private boolean isCreatedD197;

    internal const container RecordC100DeprecatedStatuses = [FBFiscalDocumentSituation_BR::Denied, FBFiscalDocumentSituation_BR::Discarded];
    internal const date RecordC100ForDiscardDeniedFiscalDocsDeprecationDate = 1\1\2023;

    const internal container CSTList = ['10', '30', '60', '70', '90'];

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustmentSourceType2Str</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts tax adjustment source type to its report representation.
    /// </summary>
    /// <param name="_sourceType">
    /// Tax adjustment source type.
    /// </param>
    /// <returns>
    /// Character, that falls into report for that adjustment source type.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// It throws error when source type is out of range of supported types.
    /// </exception>
    protected char adjustmentSourceType2Str(FBTaxAdjustmentSourceType_BR _sourceType)
    {
        char ret;

        switch (_sourceType)
        {
            case FBTaxAdjustmentSourceType_BR::JudicalProcess :
            case FBTaxAdjustmentSourceType_BR::AdministrationProcess :
            case FBTaxAdjustmentSourceType_BR::PERDCOMP :
            case FBTaxAdjustmentSourceType_BR::FiscalDocument :
            case FBTaxAdjustmentSourceType_BR::Others :
                ret = int2str(_sourceType);
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cityIBGECode2Num</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts city IBGE code to number representation needed for the report.
    /// </summary>
    /// <param name="_code">
    /// IBGE city code.
    /// </param>
    /// <param name="_isBrazil">
    /// Is given city in Brazil country.
    /// </param>
    /// <returns>
    /// Number, representing IBGE code that falls into the report.
    /// </returns>
    /// <remarks>
    /// For the foreigners it returns 9999999 city code.
    /// </remarks>
    protected int cityIBGECode2Num(CityIBGECode_BR _code, boolean _isBrazil)
    {
        const int ForeignerIBGECodeNum = 9999999;

        int num = ForeignerIBGECodeNum;

        if (_isBrazil)
        {
            num = str2int(this.keepNumbers(_code));
        }

        return num;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBlockK</Name>
				<Source><![CDATA[
    private void createBlockK()
    {
        if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v109)
        {
            if (blockK != FBSPEDFiscalBlockK_BR::None)
            {
                spedFileBlockKWriter = FBSpedFiscalBlockKWriter_BR::construct(spedFileParty, spedFile, spedFiscalVersion);
                spedFileBlockKWriter.parmBlockK(blockK);

                if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v116 || blockK == FBSPEDFiscalBlockK_BR::Full)
                {
                    spedFileCreatorBlockK_ProdTable = FBSpedFileCreator_Fiscal_ProdTable_BR::construct(spedFileItem, spedFileManufacturedProduct, spedFileManufacturedProductInPeriod, fbBookingPeriod, spedFileBlockKWriter);
                    spedFileCreatorBlockK_ProdTable.parmBlockK(blockK);
                    spedFileCreatorBlockK_ProdTable.parmSpedFiscalVersion(spedFiscalVersion);
                    spedFileCreatorBlockK_Production = FBSpedFileCreator_Fiscal_FBProduction_BR::construct(spedFileItem, spedFileManufacturedProduct, spedFileManufacturedProductInPeriod, fbBookingPeriod, spedFileBlockKWriter);
                    spedFileCreatorBlockK_Production.parmBlockK(blockK);
                    spedFileCreatorBlockK_Production.parmSpedFiscalVersion(spedFiscalVersion);
                }

                if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v116)
                {
                    spedFileBlockKWriter.writeRecordK010();
                }

                FBTaxAssessment_BR  taxAssessment;
                FBProductionReportingPeriod_BR productionReportingPeriod;

                while select FromDate, ToDate, RecId from taxAssessment
                    where taxAssessment.FBBookingPeriod_BR == fbBookingPeriod.RecId
                        && taxAssessment.TaxType == TaxType_BR::IPI
                {
                    spedFileBlockKWriter.parmTaxAssessmentFromDate(taxAssessment.FromDate);
                    spedFileBlockKWriter.parmTaxAssessmentToDate(taxAssessment.ToDate);
                    spedFileBlockKWriter.writeRecordK100();

                    this.createRecordK200(taxAssessment.ToDate);

                    if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v116 || blockK == FBSPEDFiscalBlockK_BR::Full)
                    {
                        spedFileCreatorBlockK_ProdTable.createRecordK230ForAllProductionOrders(taxAssessment.FromDate, taxAssessment.ToDate);

                        select firstonly productionReportingPeriod
                            where productionReportingPeriod.FBBookingPeriod_BR == fbBookingPeriod.RecId
                                && productionReportingPeriod.FromDate == taxAssessment.FromDate
                                && productionReportingPeriod.ToDate == taxAssessment.ToDate;

                        spedFileCreatorBlockK_Production.processRecordK230AndK235(productionReportingPeriod);

                        if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v112)
                        {
                            spedFileCreatorBlockK_ProdTable.createRecordK260ForAllReworkOrders(taxAssessment.FromDate, taxAssessment.ToDate);
                            spedFileCreatorBlockK_ProdTable.createRecordK270ForAllInventoryAdjustments();
                            spedFileCreatorBlockK_ProdTable.createRecordK280ForAllInventoryAdjustments(spedFileParty);
                            spedFileCreatorBlockK_ProdTable.createRecordK290ForAllProductionOrders(taxAssessment.FromDate, taxAssessment.ToDate);
                        }

                        this.createRecordK220(taxAssessment.ToDate);
                    }
                }

                if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v116 || blockK == FBSPEDFiscalBlockK_BR::Full)
                {
                    spedFileCreatorBlockK_ProdTable.populate0200RecordsWithMissingItems();
                }
            }

            this.createRecordK990();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0000</Name>
				<Source><![CDATA[
    private void createRecord0000()
    {
        FBSpedRecord_BR             spedRecord;

        spedRecord = FBSpedRecord_BR::constructEmpty('0000');

        spedRecord.addFieldNumericFilledWithZeros   (spedFiscalVersion, 3);
        spedRecord.addFieldNumeric                  (spedFileType, 0, 1);
        spedRecord.addFieldDate                     (fbBookingPeriod.periodFrom());
        spedRecord.addFieldDate                     (fbBookingPeriod.periodTo());
        spedRecord.addFieldString                   (fiscalEstablishment.Name);
        spedRecord.addFieldNumericFilledWithZeros   (this.keepNumbers(fiscalEstablishment.CNPJCPFNum_BR), 14);
        spedRecord.addFieldEmpty();
        spedRecord.addFieldString                   (fiscalEstablishmentAddress.State);
        spedRecord.addFieldString                   (this.keepNumbers(fiscalEstablishment.IENum_BR));
        spedRecord.addFieldNumericFilledWithZeros   (this.getCityCode(fiscalEstablishmentAddress), 7);
        spedRecord.addFieldString                   (this.keepNumbers(fiscalEstablishment.CCMNum_BR));
        spedRecord.addFieldEmpty();
        spedRecord.addFieldString                   (enum2Symbol(enumNum(FBSPEDFiscalProfile_BR), spedFiscalFileParameters.Profile));
        spedRecord.addFieldNumeric                  (int2str(spedFiscalFileParameters.ActivityType), 0, 1);

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0001</Name>
				<Source><![CDATA[
    private void createRecord0001()
    {
        FBSpedRecord_BR spedRecord = this.newRecord('0001');

        spedRecord.addFieldNumeric(0);

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0002</Name>
				<Source><![CDATA[
    private void createRecord0002()
    {
        FBSpedRecord_BR spedRecord = this.newRecord('0002');

        spedRecord.addFieldNumericFilledWithZeros(enum2int(spedFiscalFileParameters.FBFiscalEstablishmentClassification_BR), 2); // CLAS_ESTAB_IND

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0005</Name>
				<Source><![CDATA[
    private void createRecord0005()
    {
        FBSpedRecord_BR spedRecord = this.newRecord('0005');

        spedRecord.addFieldString(fiscalEstablishment.Name);
        spedRecord.addFieldNumericFilledWithZeros(this.keepNumbers(fiscalEstablishmentAddress.ZipCode), 8);
        spedRecord.addFieldString(fiscalEstablishmentAddress.Street);
        spedRecord.addFieldString(fiscalEstablishmentAddress.StreetNumber);
        spedRecord.addFieldString(fiscalEstablishmentAddress.BuildingCompliment);
        spedRecord.addFieldString(fiscalEstablishmentAddress.DistrictName);
        spedRecord.addFieldString(this.keepNumbers(fiscalEstablishment.phone()), 11);
        spedRecord.addFieldString(this.keepNumbers(fiscalEstablishment.teleFax()), 11);
        spedRecord.addFieldString(fiscalEstablishment.email());

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0015</Name>
				<Source><![CDATA[
    private void createRecord0015()
    {
        FBSpedRecord_BR                     spedRecord;
        FiscalEstablishmentIEPerState_BR    fiscalEstablishmentIEPerState;

        while select fiscalEstablishmentIEPerState
            where fiscalEstablishmentIEPerState.FiscalEstablishment_BR == fiscalEstablishment.RecId
        {
            spedRecord = this.newRecord('0015');
            spedRecord.addFieldString(fiscalEstablishmentIEPerState.StateId);
            spedRecord.addFieldString(this.keepNumbers(fiscalEstablishmentIEPerState.IENum_BR));

            this.addRecord(spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0100</Name>
				<Source><![CDATA[
    private void createRecord0100()
    {
        FBSpedRecord_BR spedRecord = this.newRecord('0100');
        Accountant_BR accountant = fiscalEstablishment.primaryAccountant();
        LogisticsPostalAddress postalAddress = accountant.postalAddress();

        spedRecord.addFieldString                   (accountant.Name);
        spedRecord.addFieldNumericFilledWithZeros   (this.keepNumbers(accountant.CPFNum_BR), 11);
        spedRecord.addFieldString                   (this.keepAlphaWithoutAccents(accountant.CRCNum_BR));
        spedRecord.addFieldNumericFilledWithZeros   (this.keepNumbers(accountant.CNPJNum_BR), 14);
        spedRecord.addFieldNumericFilledWithZeros   (this.keepNumbers(postalAddress.ZipCode), 8);
        spedRecord.addFieldString                   (postalAddress.Street, 60);
        spedRecord.addFieldString                   (postalAddress.StreetNumber, 10);
        spedRecord.addFieldString                   (postalAddress.BuildingCompliment, 60);
        spedRecord.addFieldString                   (postalAddress.DistrictName, 60);
        spedRecord.addFieldString                   (this.keepNumbers(accountant.electronicAddress(LogisticsElectronicAddressMethodType::Phone).Locator), 11);
        spedRecord.addFieldString                   (this.keepNumbers(accountant.electronicAddress(LogisticsElectronicAddressMethodType::Fax).Locator), 11);
        spedRecord.addFieldString                   (accountant.electronicAddress(LogisticsElectronicAddressMethodType::Email).Locator);
        spedRecord.addFieldNumericFilledWithZeros   (LogisticsAddressCity::findRecId(postalAddress.CityRecId).IBGECode_BR, 7);

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0200</Name>
				<Source><![CDATA[
    protected void createRecord0200(FBSpedRecord_BR _parentRecord, FiscalEstablishment_BR _fiscalEstablishment)
    {
        InventTable inventTable;

        while select spedFileItem
            where spedFileItem.FiscalEstablishmentRecId == _fiscalEstablishment.RecId
        {
            inventTable = InventTable::find(spedFileItem.ItemId);

            if (inventTable && !FBSpedFileUnitOfMeasureTmp_BR::existsForItemIdAndSymbol(spedFileUnitOfMeasure, _fiscalEstablishment.RecId, inventTable.ItemId, inventTable.inventTableModuleInvent().UnitId))
            {
                spedFileUnitOfMeasure.insertFromItemIdAndSymbol(spedFileUnitSymbol, _fiscalEstablishment.RecId, inventTable.ItemId, inventTable.inventTableModuleInvent().UnitId);
            }
        }

        this.createRecord0190(_parentRecord, _fiscalEstablishment);

        while select spedFileItem
            where spedFileItem.FiscalEstablishmentRecId == _fiscalEstablishment.RecId
        {
            inventTable = InventTable::find(spedFileItem.ItemId);

            FBSpedRecord_BR spedRecord = this.newRecord('0200'); // REG
            SpedItemId spedItemId;

            if (inventTable)
            {
                spedItemId = spedFileItem.selectItemIdOrSpedItemId();

                spedRecord.addFieldString(spedItemId);                                                          // COD_ITEM
                spedRecord.addFieldString(strLRTrim(inventTable.NameAlias));                                    // DESCR_ITEM
                spedRecord.addFieldString(InventItemBarcode::findShowForItem(inventTable.ItemId).ItemBarCode);  // COD_BARRA
                spedRecord.addFieldString('');                                                                  // COD_ANT_ITEM
                spedRecord.addFieldString(FBSpedFileUnitSymbolTmp_BR::findOrCreateSpedSymbol(spedFileUnitSymbol,inventTable.inventTableModuleInvent().UnitId)); // UNID_INV
                spedRecord.addFieldNumericFilledWithZeros   (subStr(inventTable.InventProductType_BR, 1, 2), 2); // TIPO_ITEM

                if (!(inventTable.InventProductType_BR == '07' ||
                  inventTable.InventProductType_BR == '08' ||
                  inventTable.InventProductType_BR == '09' ||
                  inventTable.InventProductType_BR == '10' ||
                  inventTable.InventProductType_BR == '99'))
                {
                    spedRecord.addFieldString(this.keepNumbers(inventTable.TaxFiscalClassification_BR));  // COD_NCM
                }
                else
                {
                    spedRecord.addFieldEmpty();                                                           // COD_NCM
                }

                spedRecord.addFieldString('');                                                            // EX_IPI
                spedRecord.addFieldNumericFilledWithZeros(str2int(substr(inventTable.TaxFiscalClassification_BR, 1, 2)), 2);    // COD_GEN
                spedRecord.addFieldNumeric('');                                                                                 // COD_LST

                TaxValue itemTaxValue = this.getItemTaxValue(inventTable.inventTableModuleSales().TaxItemGroupId, TaxType_BR::ICMS);

                if (itemTaxValue)
                {
                    spedRecord.addFieldNumeric(itemTaxValue, 2);        // ALIQ_ICMS
                }
                else
                {
                    spedRecord.addFieldEmpty();                         // ALIQ_ICMS
                }

                if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v110)
                {
                    spedRecord.addFieldString(this.keepNumbers(TaxSubstitutionCodeTable_BR::getTaxSubstitutionCode(inventTable.ItemId, inventTable.TaxFiscalClassification_BR)), 7);     // CEST
                }
            }
            else
            {
                TaxServiceCode_BR taxServiceCode = TaxServiceCode_BR::find(spedFileItem.ItemId);

                spedRecord.addFieldString(taxServiceCode.ServiceCodeId);        // COD_ITEM
                spedRecord.addFieldString(taxServiceCode.Name);                 // DESCR_ITEM
                spedRecord.addFieldEmptyNTimes(3);                              // COD_BARRA, COD_ANT_ITEM, UNID_INV
                spedRecord.addFieldNumericFilledWithZeros(9, 2);                // TIPO_ITEM
                spedRecord.addFieldEmptyNTimes(5);                              // COD_NCM, EX_IPI, COD_GEN, COD_LST, ALIQ_ICMS

                if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v110)
                {
                    spedRecord.addFieldEmpty();                                 // CEST
                }
            }

            if (_parentRecord)
            {
                this.addChildRecord(_parentRecord, spedRecord);
            }
            else
            {
                this.addRecord(spedRecord);
            }

            if (inventTable)
            {
                this.createRecord0210(spedRecord, spedItemId);
            }

            this.createRecord0220(spedRecord, inventTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0210</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reports the records 0210 for a given manufactured product.
    /// The record 0210 will report the list of components of a given manufactured product.
    /// </summary>
    /// <param name="_parentRecord">
    ///     The parent record of record 0210. In this case will be the record 0200.
    /// </param>
    /// <param name="_spedItemId">
    ///     The Sped item id of the manufactured product from the record 0200. This record will be used to get the BOM lines associated with this manufactured product.
    /// </param>
    /// <remarks>
    ///     The <c>spedFileItemManufactured</c> table contains the relation of the manufactured product (<c>ItemId</c>) that will be reported with its production order (<c>ProdId</c>).
    ///     Thereby we could get the BOM lines of the production order (<c>ProdBOM</c> table) associated with the <c>ProdId</c>.
    /// </remarks>
    public void createRecord0210(FBSpedRecord_BR _parentRecord, SpedItemId _spedItemId)
    {
        if (spedFileBlockKWriter != null && spedFileCreatorBlockK_ProdTable != null && spedFileCreatorBlockK_Production != null)
        {
            if ( _parentRecord == null)
            {
                throw error(error::missingParameter(this));
            }

            if (!this.shouldCreate0210())
            {
                return;
            }

            spedFileBlockKWriter.parmParentRecord0210(_parentRecord);

            spedFileCreatorBlockK_ProdTable.processRecord0210BasedOnProduction(_spedItemId);
            spedFileCreatorBlockK_Production.processRecord0210BasedOnProduction(_spedItemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0220</Name>
				<Source><![CDATA[
    protected void createRecord0220(FBSpedRecord_BR _parentRecord, InventTable _inventTable)
    {
        FBSpedRecord_BR                 spedRecord;
        UnitOfMeasureConversion         unitOfMeasureConversion;
        UnitOfMeasure                   inventoryUnitOfMeasure, nonInventoryUnitOfMeasure;

        inventoryUnitOfMeasure = UnitOfMeasure::findBySymbol(_inventTable.inventTableModuleInvent().UnitId);

        while select spedFileUnitOfMeasure
            where spedFileUnitOfMeasure.ItemId == _inventTable.ItemId
        {
            boolean reverseConversion = false;
            nonInventoryUnitOfMeasure = UnitOfMeasure::findBySymbol(spedFileUnitOfMeasure.Symbol);

            unitOfMeasureConversion = UnitOfMeasureConversion::findByConversion(nonInventoryUnitOfMeasure.RecId, inventoryUnitOfMeasure.RecId, _inventTable.Product);

            if (!unitOfMeasureConversion)
            {
                unitOfMeasureConversion = UnitOfMeasureConversion::findByConversion(inventoryUnitOfMeasure.RecId, nonInventoryUnitOfMeasure.RecId, _inventTable.Product);

                if (unitOfMeasureConversion)
                {
                    reverseConversion = true;
                }
            }

            if (!unitOfMeasureConversion)
            {
                unitOfMeasureConversion = UnitOfMeasureConversion::findByConversion(nonInventoryUnitOfMeasure.RecId, inventoryUnitOfMeasure.RecId);
            }

            if (!unitOfMeasureConversion)
            {
                unitOfMeasureConversion = UnitOfMeasureConversion::findByConversion(inventoryUnitOfMeasure.RecId, nonInventoryUnitOfMeasure.RecId);

                if (unitOfMeasureConversion)
                {
                    reverseConversion = true;
                }
            }

            if (unitOfMeasureConversion)
            {
                spedRecord = this.newRecord('0220');

                spedRecord.addFieldString   (nonInventoryUnitOfMeasure.Symbol, 6);

                if (reverseConversion)
                {
                    spedRecord.addFieldNumeric  (unitOfMeasureConversion.Denominator ? unitOfMeasureConversion.Factor * unitOfMeasureConversion.Numerator / unitOfMeasureConversion.Denominator : 0, 6);
                }
                else
                {
                    spedRecord.addFieldNumeric  (unitOfMeasureConversion.Factor * unitOfMeasureConversion.Numerator ? unitOfMeasureConversion.Denominator / (unitOfMeasureConversion.Factor * unitOfMeasureConversion.Numerator) : 0, 6);
                }
                
                if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v115)
                {
                    spedRecord.addFieldEmpty(); // COD_BARRA
                }

                this.addChildRecord(_parentRecord, spedRecord);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0300</Name>
				<Source><![CDATA[
    private void createRecord0300()
    {
        FBTaxAssessment_BR                  fbTaxAssessmentICMS;
        FBCIAPAssessment_BR                 fbCIAPAssessment;
        FBCIAPAssetTable_BR                 fbCIAPAssetTable;
        FBCIAPAssetTrans_BR                 fbCIAPAssetTrans;
        FBSpedRecord_BR                     spedRecord;

        select firstonly RecId from fbCIAPAssessment
            exists join fbTaxAssessmentICMS
                where fbTaxAssessmentICMS.RecId == fbCIAPAssessment.FBTaxAssessment_BR
                    && fbTaxAssessmentICMS.FBBookingPeriod_BR == fbBookingPeriod.RecId;
        if (fbCIAPAssessment.RecId)
        {
            while select AssetName, ServiceLifeMonths, LedgerDimension, CIAPAssetID, Installments, DefaultDimension from fbCIAPAssetTable
                where fbCIAPAssetTable.FiscalEstablishmentDataArea == fbBookingPeriod.FiscalEstablishmentDataArea
                // only fixed assets on this period
                exists join fbCIAPAssetTrans
                    where fbCIAPAssetTrans.FBCIAPAssessment_BR == fbCIAPAssessment.RecId
                        && fbCIAPAssetTrans.FBCIAPAssetTable_BR == fbCIAPAssetTable.RecId
            {
                spedFileMainAccount.insertFromMainAccount(MainAccount::find(DimensionAttributeValueCombination::find(fbCIAPAssetTable.LedgerDimension).MainAccount));

                spedRecord = this.newRecord('0300');

                spedRecord.addFieldString   (fbCIAPAssetTable.CIAPAssetID , 60); // COD_IND_BEM
                spedRecord.addFieldString   ("1", 1); // IDENT_MERC
                spedRecord.addFieldString   (fbCIAPAssetTable.AssetName); // DESCR_ITEM
                spedRecord.addFieldEmpty    (); // COD_PRNC
                spedRecord.addFieldString   (spedFileMainAccount.MainAccountId, 60); // COD_CTA
                spedRecord.addFieldNumeric  (fbCIAPAssetTable.Installments, 0, 3); // NR_PARC

                this.addRecord(spedRecord);

                this.createRecord0305(spedRecord, fbCIAPAssetTable.DefaultDimension, fbCIAPAssetTable.AssetName, fbCIAPAssetTable.ServiceLifeMonths);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0305</Name>
				<Source><![CDATA[
    private void createRecord0305(FBSpedRecord_BR _parentRecord, DimensionDefault _defaulDimension, AssetName _assetName, AssetServiceLifeMonths_BR _lifeMonths)
    {
        spedFileCostCenterDimension.insertFromDimensionAttribute(_defaulDimension);

        FBSpedRecord_BR spedRecord = this.newRecord('0305');

        spedRecord.addFieldString(spedFileCostCenterDimension.DimensionValue); // COD_CCUS
        spedRecord.addFieldString(_assetName); // FUNC
        spedRecord.addFieldNumeric(_lifeMonths);//VIDA_UTIL

        this.addChildRecord(_parentRecord, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0460</Name>
				<Source><![CDATA[
    private void createRecord0460()
    {
        while select spedFileObservationCode
        {
            FBSpedRecord_BR spedRecord = this.newRecord('0460');

            spedRecord.addFieldString   (spedFileObservationCode.ObservationCode, 6);
            spedRecord.addFieldString   (spedFileObservationCode.Description);

            this.addRecord(spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0500</Name>
				<Source><![CDATA[
    private void createRecord0500()
    {
        TransDate transDate = fbBookingPeriod.periodFrom();

        while select spedFileMainAccount
        {
            FBSpedRecord_BR spedRecord = this.newRecord('0500');

            spedRecord.addFieldDate(transDate); // DT_ALT
            spedRecord.addFieldString(this.getAccountNatureCode(spedFileMainAccount.Type), 2); // COD_ NAT_CC
            spedRecord.addFieldString(this.getFieldString(), 1); // IND_CTA
            spedRecord.addFieldNumericFilledWithZeros(spedFileMainAccount.AccountLevel, 5); // NIVEL
            spedRecord.addFieldString(spedFileMainAccount.MainAccountId); // COD_CTA
            spedRecord.addFieldString(spedFileMainAccount.Name); // NOME_CTA

            this.addRecord(spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldString</Name>
				<Source><![CDATA[
    // <summary>
    /// Gets the string value to add to the field.
    /// </summary>
    /// <returns>
    /// The string.
    /// </returns>
    [Wrappable(true)]
    protected final str getFieldString()
    {
        return (spedFileMainAccount.Type == DimensionLedgerAccountType::Total ? 'S' : 'A');
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0600</Name>
				<Source><![CDATA[
    private void createRecord0600()
    {
        TransDate transDate = fbBookingPeriod.periodFrom();

        while select spedFileCostCenterDimension
        {
            FBSpedRecord_BR spedRecord = this.newRecord('0600');

            spedRecord.addFieldDate(transDate); // DT_ALT
            spedRecord.addFieldString(spedFileCostCenterDimension.DimensionValue); // COD_CCUS
            spedRecord.addFieldString(spedFileCostCenterDimension.Name); // CCUS

            this.addRecord(spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0990</Name>
				<Source><![CDATA[
    private void createRecord0990()
    {
        FBSpedRecord_BR spedRecord = FBSpedRecord_BR::constructEmpty('0990');

        spedRecord.addFieldNumeric(spedFile.totalRecordsInBlock('0') + 1);

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1010</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record 1010 in SPED fiscal report.
    /// </summary>
    protected void createRecord1010()
    {
        FBSpedRecord_BR spedRecord = this.newRecord('1010');

        spedRecord.addFieldString   ('N');
        spedRecord.addFieldString   ('N');
        spedRecord.addFieldString   ('N');
        spedRecord.addFieldString   ('N');
        spedRecord.addFieldString   ('N');
        spedRecord.addFieldString   ('N');

        if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v112 && this.initContragentMap())
        {
            spedRecord.addFieldString   ('S');
        }

        else
        {
            spedRecord.addFieldString   ('N');
        }

        spedRecord.addFieldString   ('N');
        spedRecord.addFieldString   ('N');

        if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v112)
        {
            spedRecord.addFieldString   ('N');
            spedRecord.addFieldString   ('N');
            spedRecord.addFieldString   ('N');
        }

        if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v113)
        {
            spedRecord.addFieldString(fiscalBooksParametersPerState.EnableC180C185 ? 'S' : 'N');
        }

        this.addRecord(spedRecord);

        if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v112
            && spedFiscalVersion < FBSPEDFiscalVersion_BR::v115)
        {
            this.createRecord1600();
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1600</Name>
				<Source><![CDATA[
    private void createRecord1600()
    {
        FBSpedRecord_BR     spedRecord;
        
        FBVendToPaymMode_BR fBVendToPaymMode_BR;
        
        MapEnumerator mapEnum;
        
        container mapValues;
        
        mapEnum = contragentMap.getEnumerator();
        
        while (mapEnum.moveNext())
        {
            select firstonly fBVendToPaymMode_BR
                 where fBVendToPaymMode_BR.AccountVend == mapEnum.currentKey();
            
            spedRecord = this.newRecord('1600');
            
            if (!FBSpedFilePartyTmp_BR::existsForAccountTypeAndNum(spedFileParty,
                    FiscalEstablishment_BR::findById(fbBookingPeriod.FiscalEstablishmentId).RecId,
                        FBThirdPartyType_BR::Vendor, fBVendToPaymMode_BR.AccountVend))
            {
                spedFileParty.insertFromCustVendTable(VendTable::find(fBVendToPaymMode_BR.AccountVend),
                    fbBookingPeriod.FiscalEstablishmentId, FBThirdPartyType_BR::Vendor);
            }
            else
            {
                select firstonly spedFileParty
                    where spedFileParty.PartyType == FBThirdPartyType_BR::Vendor
                        && spedFileParty.AccountNum == fBVendToPaymMode_BR.AccountVend;
            }
            
            mapValues = mapEnum.currentValue();
            
            spedRecord.addFieldString(spedFileParty.code()); //COD_PART
            spedRecord.addFieldNumeric(conPeek(mapValues, 1), 2); //TOT_CREDITO
            spedRecord.addFieldNumeric(conPeek(mapValues, 2), 2); //TOT_DEBITO
            
            this.addRecord(spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1990</Name>
				<Source><![CDATA[
    private void createRecord1990()
    {
        FBSpedRecord_BR spedRecord = FBSpedRecord_BR::constructEmpty('1990');

        spedRecord.addFieldNumeric(spedFile.totalRecordsInBlock('1') + 2);

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordB990</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record B990 in SPED fiscal report.
    /// </summary>
    /// <param name = "_parameters">A contract to pass the needed parameters. An instance of <c>FBSpedFiscalMethodParameters_BR</c> class.</param>
    [Replaceable]
    protected void createRecordB990(FBSpedFiscalMethodParameters_BR _parameters = null)
    {
        FBSpedRecord_BR spedRecord;
     
        spedRecord = this.newRecord('B990');
      
        spedRecord.addFieldNumeric(spedFile.totalRecordsInBlock('B') + 2);
      
        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC100</Name>
				<Source><![CDATA[
    private void createRecordC100(FiscalDocument_BR                 _fiscalDocument,
                                  FBBookingPeriodFiscalDocument_BR  _fbBookingPeriodFiscalDocument)
    {
        if (!this.shouldCreateC100(_fbBookingPeriodFiscalDocument))
        {
            return;
        }

        FBSpedRecord_BR                     spedRecord;
        FBFiscalDocumentTaxSummarizer_BR    taxSummarizer = FBFiscalDocumentTaxSummarizer_BR::construct(_fiscalDocument);

        boolean                             isExceptionFiscalSituation = _fbBookingPeriodFiscalDocument.FiscalSituation == FBFiscalDocumentSituation_BR::Cancelled
                                                                        || _fbBookingPeriodFiscalDocument.FiscalSituation == FBFiscalDocumentSituation_BR::Denied
                                                                        || _fbBookingPeriodFiscalDocument.FiscalSituation == FBFiscalDocumentSituation_BR::Discarded;

        spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C100);

        spedRecord.addFieldString(_fiscalDocument.Direction == FiscalDocDirection_BR::Incoming ? '0' : '1', 1);
        spedRecord.addFieldString(int2str(_fiscalDocument.FiscalDocumentIssuer), 1);

        if (!isExceptionFiscalSituation && _fiscalDocument.Model != FiscalBooksConstants_BR::FiscalDocModel_65)
        {
            if (!FBSpedFilePartyTmp_BR::existsForAccountTypeAndNum(spedFileParty,
                                                                   FiscalEstablishment_BR::findById(_fiscalDocument.FiscalEstablishment).RecId,
                                                                   this.getFBThirdPartyTypeFromAccountType(_fiscalDocument.FiscalDocumentAccountType),
                                                                   _fiscalDocument.FiscalDocumentAccountNum))
            {
                spedFileParty.insertFromFiscalDocument(_fiscalDocument);
            }
            else
            {
                select firstonly spedFileParty
                    where spedFileParty.PartyType == this.getFBThirdPartyTypeFromAccountType(_fiscalDocument.FiscalDocumentAccountType)
                        && spedFileParty.AccountNum == _fiscalDocument.FiscalDocumentAccountNum;
            }

            spedRecord.addFieldString(spedFileParty.code(), 60); // COD_PART
        }
        else
        {
            spedRecord.addFieldEmpty(); // COD_PART
        }

        spedRecord.addFieldString   (_fiscalDocument.Model, 2);
        spedRecord.addFieldString   (strRFix(int2str(enum2int(_fbBookingPeriodFiscalDocument.FiscalSituation)), 2, '0'), 2);
        spedRecord.addFieldString   (_fiscalDocument.FiscalDocumentSeries, 3);
        spedRecord.addFieldNumeric  (_fiscalDocument.FiscalDocumentNumber);

        if (_fbBookingPeriodFiscalDocument.FiscalSituation != FBFiscalDocumentSituation_BR::Discarded)
        {
            spedRecord.addFieldString       (_fiscalDocument.AccessKey);
        }
        else
        {
            spedRecord.addFieldEmpty        ();
        }

        if (!isExceptionFiscalSituation)
        {
            spedRecord.addFieldDate         (_fiscalDocument.FiscalDocumentDate);
            spedRecord.addFieldDate         (_fiscalDocument.AccountingDate);
            spedRecord.addFieldNumeric      (_fiscalDocument.TotalAmount, 2);
            spedRecord.addFieldString       (int2str(_fbBookingPeriodFiscalDocument.paymentType()), 1);
            spedRecord.addFieldNumeric      (_fiscalDocument.TotalDiscountAmount, 2);
            spedRecord.addFieldEmpty        ();
            spedRecord.addFieldNumeric      (_fiscalDocument.TotalGoodsAmount + _fiscalDocument.TotalServicesAmount, 2);
            spedRecord.addFieldString       (this.getFreightIdentification(_fiscalDocument.FreightChargeTerms), 1);
            spedRecord.addFieldNumeric      (_fiscalDocument.TotalMarkupFreightAmount, 2);
            spedRecord.addFieldNumeric      (_fiscalDocument.TotalMarkupInsuranceAmount, 2);
            spedRecord.addFieldNumeric      (_fiscalDocument.TotalMarkupOtherAmount, 2);

            spedRecord.addFieldNumeric      (taxSummarizer.getDocumentTaxBaseAmount(TaxType_BR::ICMS), 2); // VL_BC_ICMS
            spedRecord.addFieldNumeric      (taxSummarizer.getDocumentTaxAmount(TaxType_BR::ICMS), 2); // VL_ICMS

            if (_fiscalDocument.Model != FiscalBooksConstants_BR::FiscalDocModel_65)
            {
                spedRecord.addFieldNumeric      (taxSummarizer.getDocumentTaxBaseAmount(TaxType_BR::ICMSST), 2); // VL_BC_ICMS_ST
                spedRecord.addFieldNumeric      (taxSummarizer.getDocumentTaxAmount(TaxType_BR::ICMSST), 2); // VL_ICMS_ST

                spedRecord.addFieldNumeric      (taxSummarizer.getDocumentTaxAmount(TaxType_BR::IPI), 2); // VL_IPI
                spedRecord.addFieldNumeric      (taxSummarizer.getDocumentTaxAmount(TaxType_BR::PIS), 2); // VL_PIS
                spedRecord.addFieldNumeric      (taxSummarizer.getDocumentTaxAmount(TaxType_BR::COFINS), 2); // VL_COFINS

                spedRecord.addFieldNumeric      (0, 2); // VL_PIS_ST
                spedRecord.addFieldNumeric      (0, 2); // VL_COFINS_ST
            }
            else
            {
                spedRecord.addFieldEmptyNTimes  (7);
            }
        }
        else
        {
            spedRecord.addFieldEmptyNTimes  (20);
        }

        this.addRecord(spedRecord);

        if (!isExceptionFiscalSituation)
        {
            if (_fiscalDocument.Model == FiscalBooksConstants_BR::FiscalDocModel_55)
            {
                this.createRecordC101(spedRecord, _fiscalDocument);
            }

            this.createRecordC110(spedRecord, _fiscalDocument);
            this.createRecordC120(spedRecord, _fiscalDocument, taxSummarizer);
            this.createRecordC130(spedRecord, _fiscalDocument);
            this.createRecordC140(spedRecord, _fiscalDocument);
        }

        this.createRecordC160(spedRecord, _fiscalDocument, _fbBookingPeriodFiscalDocument);

        if (!isExceptionFiscalSituation)
        {
            this.createRecordC170(spedRecord, _fiscalDocument, taxSummarizer);
        }
    
        if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v113
            && fiscalBooksParametersPerState.EnableC180C185
            && _fiscalDocument.Direction == FiscalDocDirection_BR::Outgoing
            && !_fiscalDocument.isReturnOrder())
        {
            this.createRecordC185(spedRecord, _fiscalDocument);
        }

        if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v114
            && fiscalBooksParametersPerState.EnableC181C186
            && _fiscalDocument.Direction == FiscalDocDirection_BR::Outgoing
            && _fiscalDocument.isReturnOrder())
        {
            this.createRecordC186(spedRecord, _fiscalDocument);
        }

        if (!isExceptionFiscalSituation)
        {
            this.createRecordC190(spedRecord, _fiscalDocument, taxSummarizer);
            this.createRecordC195(FBSpedFiscalMethodParameters_BR::construct()
                                .withParentRecord(spedRecord)
                                .withFiscalDocument(_fiscalDocument));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC100ForAllDocuments</Name>
				<Source><![CDATA[
    private void createRecordC100ForAllDocuments()
    {
        FiscalDocument_BR                   fiscalDocument;
        FBBookingPeriodFiscalDocument_BR    fbBookingPeriodFiscalDocument;

        select count(RecId) from fbBookingPeriodFiscalDocument
            where fbBookingPeriodFiscalDocument.FBBookingPeriod_BR == fbBookingPeriod.RecId
                && fbBookingPeriodFiscalDocument.SpedFiscalRecord == FiscalBooksConstants_BR::SpedRecord_C100
            join fiscalDocument
                where fiscalDocument.RecId == fbBookingPeriodFiscalDocument.FiscalDocument_BR;

        this.getRunBaseProgress().setCount(0);
        this.getRunBaseProgress().setTotal(fbBookingPeriodFiscalDocument.RecId);
        this.getRunBaseProgress().setCaption("@SYS4001676");
        this.getRunBaseProgress().update(true);

        while select fbBookingPeriodFiscalDocument
            where fbBookingPeriodFiscalDocument.FBBookingPeriod_BR == fbBookingPeriod.RecId
                && fbBookingPeriodFiscalDocument.SpedFiscalRecord == FiscalBooksConstants_BR::SpedRecord_C100
            join fiscalDocument
                where fiscalDocument.RecId == fbBookingPeriodFiscalDocument.FiscalDocument_BR
        {
            this.createRecordC100(fiscalDocument, fbBookingPeriodFiscalDocument);

            this.getRunBaseProgress().incCount(1);
            this.getRunBaseProgress().setText(strFmt("@SYS4001677",
                                                     fiscalDocument.FiscalDocumentSeries,
                                                     fiscalDocument.FiscalDocumentNumber));
            this.getRunBaseProgress().update(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC101</Name>
				<Source><![CDATA[
    private void createRecordC101(FBSpedRecord_BR _parentRecord, FiscalDocument_BR _fiscalDocument)
    {
        FBSpedRecord_BR                             spedRecord;
        FiscalDocumentTaxTransOutgoingICMSDif_BR    fiscalDocumentTaxTransOutgointICMSDif;
        FiscalDocumentTaxTransPovertyFund_BR        fiscalDocumentTaxTransPovertyFund;
        FiscalDocumentTaxTrans_BR                   fiscalDocumentTaxTrans;
        FiscalDocumentLine_BR                       fiscalDocumentLine;

        if (spedFiscalVersion < FBSPEDFiscalVersion_BR::v109)
        {
            return;
        }

        select count(RecId), sum(ICMSDifIssuerTaxAmount), sum(ICMSDifRecipientTaxAmount)
            from fiscalDocumentTaxTransOutgointICMSDif
                exists join fiscalDocumentTaxTrans
                    where fiscalDocumentTaxTransOutgointICMSDif.FiscalDocumentTaxTrans == fiscalDocumentTaxTrans.RecId
                        && fiscalDocumentTaxTransOutgointICMSDif.FiscalDocument == _fiscalDocument.RecId
                        && (fiscalDocumentTaxTransOutgointICMSDif.ICMSDifRecipientTaxAmount != 0 || fiscalDocumentTaxTransOutgointICMSDif.ICMSDifIssuerTaxAmount != 0)
                        && fiscalDocumentTaxTrans.FiscalValue == TaxFiscalValue_BR::WithCreditDebit;

        select sum(TaxPovertyFundAmount)
            from fiscalDocumentTaxTransPovertyFund
                exists join fiscalDocumentTaxTrans
                    where fiscalDocumentTaxTransPovertyFund.FiscalDocumentTaxTrans_BR == fiscalDocumentTaxTrans.RecId
                        && fiscalDocumentTaxTrans.FiscalValue == TaxFiscalValue_BR::WithCreditDebit
                exists join fiscalDocumentLine
                    where fiscalDocumentTaxTrans.FiscalDocumentLine == fiscalDocumentLine.RecId
                        && fiscalDocumentLine.FiscalDocument == _fiscalDocument.RecId;

        if (fiscalDocumentTaxTransOutgointICMSDif.RecId)
        {
            spedRecord = this.newRecord('C101');

            spedRecord.addFieldNumeric  (fiscalDocumentTaxTransPovertyFund.TaxPovertyFundAmount, 2);                    //VL_FCP_UF_DEST

            if (_fiscalDocument.Direction == FiscalDocDirection_BR::Outgoing)
            {
                spedRecord.addFieldNumeric  (fiscalDocumentTaxTransOutgointICMSDif.ICMSDifRecipientTaxAmount, 2);       //VL_ICMS_UF_DEST
                spedRecord.addFieldNumeric  (fiscalDocumentTaxTransOutgointICMSDif.ICMSDifIssuerTaxAmount, 2);          //VL_ICMS_UF_REM
            }
            else
            {
                spedRecord.addFieldNumeric  (fiscalDocumentTaxTransOutgointICMSDif.ICMSDifIssuerTaxAmount, 2);          //VL_ICMS_UF_DEST
                spedRecord.addFieldNumeric  (fiscalDocumentTaxTransOutgointICMSDif.ICMSDifRecipientTaxAmount, 2);       //VL_ICMS_UF_REM
            }

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC110</Name>
				<Source><![CDATA[
    private void createRecordC110(FBSpedRecord_BR _parentRecord, FiscalDocument_BR _fiscalDocument)
    {
        FBSpedRecord_BR                     spedRecord;
        FiscalDocumentTextListParmData_BR   listOFLegalTexts;
        FiscalDocumentTextParmData_BR       fiscalDocumentTextParmData;
        FiscalEstablishment_BR              localFiscalEstablishment;
        String255                           legalText;
        Notes                               notes;
        int                                 legalTextLength;
        int                                 i;

        if (!this.shouldCreateC110(_fiscalDocument))
        {
            return;
        }

        localFiscalEstablishment = FiscalEstablishment_BR::findById(_fiscalDocument.FiscalEstablishment);

        listOFLegalTexts = _fiscalDocument.getAllLegalTexts();

        while (listOFLegalTexts.moveNext())
        {
            fiscalDocumentTextParmData = listOFLegalTexts.getCurrent();

            notes = fiscalDocumentTextParmData.parmNotes();
            legalTextLength = strLen(notes);

            // If the legal text has more than 255 characters, the text will be broken in 255 characters each part
            for (i = 0; i < legalTextLength; i += MaxLegalTextLength)
            {
                legalText = subStr(notes, i + 1, i + MaxLegalTextLength);

                spedFileText = FBSpedFileTextTmp_BR::findByDescription(spedFileText, localFiscalEstablishment.RecId, legalText);

                if (!spedFileText)
                {
                    spedFileText.insertFromTextDescription(localFiscalEstablishment.RecId, legalText);
                }

                spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C110);

                spedRecord.addFieldString   (int2str(spedFiletext.TextId), 6);
                spedRecord.addFieldEmpty    ();

                this.addChildRecord(_parentRecord, spedRecord);

                // Just must be inserted for the first record of the legal text
                if (i == 0)
                {
                    if (this.shouldCreateC111(_fiscalDocument))
                    {
                        this.createRecordC111(spedRecord, fiscalDocumentTextParmData);
                    }

                    this.createRecordC113(spedRecord, _fiscalDocument, fiscalDocumentTextParmData.parmTextID());
                    this.createRecordC114(spedRecord, _fiscalDocument, fiscalDocumentTextParmData.parmTextID());
                    this.createRecordC116(spedRecord, _fiscalDocument, fiscalDocumentTextParmData.parmTextID());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC111</Name>
				<Source><![CDATA[
    private void createRecordC111(FBSpedRecord_BR                 _parentRecord,
                                  FiscalDocumentTextParmData_BR   _fiscalDocumentTextParmData)
    {
        FBSpedRecord_BR                     spedRecord;
        FiscalDocumentRefProcessParmData_BR fiscalDocumentRefProcessParmData;
        ListEnumerator                      le;
        str 1                               agency;

        if (_fiscalDocumentTextParmData.parmFiscalRefProcessList())
        {
            le = _fiscalDocumentTextParmData.parmFiscalRefProcessList().getEnumerator();

            while (le.moveNext())
            {
                fiscalDocumentRefProcessParmData = le.current();

                if (fiscalDocumentRefProcessParmData.parmAgency() == Agency_BR::Sefaz
                    || fiscalDocumentRefProcessParmData.parmAgency() == Agency_BR::JusticaFederal
                    || fiscalDocumentRefProcessParmData.parmAgency() == Agency_BR::JusticaEstadual
                    || fiscalDocumentRefProcessParmData.parmAgency() == Agency_BR::Secex
                    || fiscalDocumentRefProcessParmData.parmAgency() == Agency_BR::Other)
                {
                    agency = fiscalDocumentRefProcessParmData.parmAgency() == Agency_BR::Sefaz ? '0' : int2str(enum2int(fiscalDocumentRefProcessParmData.parmAgency()));

                    spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C111);

                    spedRecord.addFieldString(this.keepAlphaWithoutAccents(fiscalDocumentRefProcessParmData.parmProcessNumber())); // NUM_PROC
                    spedRecord.addFieldString(agency, 1); // IND_PROC

                    this.addChildRecord(_parentRecord, spedRecord);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC113</Name>
				<Source><![CDATA[
    private void createRecordC113(FBSpedRecord_BR _parentRecord, FiscalDocument_BR _fiscalDocument, FiscalDocumentTextID_BR _textID)
    {
        FBSpedRecord_BR                     spedRecord;
        FiscalDocumentReferenced_BR         fiscalDocumentReferenced;
        FiscalDocument_BR                   referencedFiscalDocument;
        ExternalFiscalDocument_BR           referencedExternalFiscalDocument;
        FiscalEstablishmentRecId_BR         fiscalEstablishmentRecId;

        fiscalEstablishmentRecId = FiscalEstablishment_BR::findById(_fiscalDocument.FiscalEstablishment).RecId;

        while select ReferencedFiscalDocument, ExternalReferencedFiscalDocument
            from fiscalDocumentReferenced
            where fiscalDocumentReferenced.FiscalDocument == _fiscalDocument.RecId
                && fiscalDocumentReferenced.FiscalDocumentSourceText == _textID
        {
            spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C113);

            if (fiscalDocumentReferenced.ReferencedFiscalDocument)
            {
                referencedFiscalDocument = FiscalDocument_BR::find(fiscalDocumentReferenced.ReferencedFiscalDocument);

                if (!FBSpedFilePartyTmp_BR::existsForAccountTypeAndNum(spedFileParty,
                                                                       fiscalEstablishmentRecId,
                                                                       this.getFBThirdPartyTypeFromAccountType(referencedFiscalDocument.FiscalDocumentAccountType),
                                                                       referencedFiscalDocument.FiscalDocumentAccountNum))
                {
                    spedFileParty.insertFromFiscalDocument(referencedFiscalDocument);
                }

                spedRecord.addFieldString   (referencedFiscalDocument.Direction == FiscalDocDirection_BR::Incoming ? '0' : '1', 1);
                spedRecord.addFieldString   (int2str(referencedFiscalDocument.FiscalDocumentIssuer), 1);
                spedRecord.addFieldString   (spedFileParty.code(), 60);
                spedRecord.addFieldString   (referencedFiscalDocument.Model, 2);
                spedRecord.addFieldString   (referencedFiscalDocument.FiscalDocumentSeries, 4);
                spedRecord.addFieldEmpty    ();
                spedRecord.addFieldNumeric  (referencedFiscalDocument.FiscalDocumentNumber, 0, 9);
                spedRecord.addFieldDate     (referencedFiscalDocument.FiscalDocumentDate);

                if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v110)
                {
                    spedRecord.addFieldString(referencedFiscalDocument.AccessKey);                                                  // CHV_DOCe
                }
            }
            else
            {
                referencedExternalFiscalDocument = ExternalFiscalDocument_BR::find(fiscalDocumentReferenced.ExternalReferencedFiscalDocument);

                if (referencedExternalFiscalDocument.Model == FiscalBooksConstants_BR::FiscalDocModel_2D)
                {
                    continue;
                }

                if (!FBSpedFilePartyTmp_BR::existsForAccountTypeAndNum(spedFileParty,
                                                                       fiscalEstablishmentRecId,
                                                                       this.getFBThirdPartyTypeFromAccountType(referencedExternalFiscalDocument.FiscalDocumentAccountType),
                                                                       referencedExternalFiscalDocument.FiscalDocumentAccountNum))
                {
                    spedFileParty.insertFromExternalFiscalDocument(fiscalEstablishmentRecId, referencedExternalFiscalDocument);
                }

                spedRecord.addFieldString   (referencedExternalFiscalDocument.Direction == FiscalDocDirection_BR::Incoming ? '0' : '1', 1);
                spedRecord.addFieldString   (int2str(referencedExternalFiscalDocument.FiscalDocumentIssuer), 1);
                spedRecord.addFieldString   (spedFileParty.code(), 60);
                spedRecord.addFieldString   (referencedExternalFiscalDocument.Model, 2);
                spedRecord.addFieldString   (referencedExternalFiscalDocument.FiscalDocumentSeries, 4);
                spedRecord.addFieldEmpty();
                spedRecord.addFieldNumeric  (referencedExternalFiscalDocument.FiscalDocumentNumber, 0, 9);
                spedRecord.addFieldDate     (referencedExternalFiscalDocument.IssueDate);

                if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v110)
                {
                    spedRecord.addFieldString(referencedExternalFiscalDocument.FiscalDocumentAccessKey);                                    // CHV_DOCe
                }
            }

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC114</Name>
				<Source><![CDATA[
    private void createRecordC114(FBSpedRecord_BR _parentRecord, FiscalDocument_BR _fiscalDocument, FiscalDocumentTextID_BR _textID)
    {
        FiscalDocumentReferenced_BR fiscalDocumentReferenced;
        ExternalFiscalDocument_BR referencedExternalFiscalDocument;

        while select RecId from fiscalDocumentReferenced
            where fiscalDocumentReferenced.FiscalDocument == _fiscalDocument.RecId
                && fiscalDocumentReferenced.FiscalDocumentSourceText == _textID
            join Model, RetailFiscalPrinterSerialNumber, RetailTerminalNumber, FiscalDocumentNumber, IssueDate from referencedExternalFiscalDocument
                where referencedExternalFiscalDocument.RecId == fiscalDocumentReferenced.ExternalReferencedFiscalDocument
                    && referencedExternalFiscalDocument.Model == FiscalBooksConstants_BR::FiscalDocModel_2D
        {
            FBSpedRecord_BR spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C114); // REG

            spedRecord.addFieldString(referencedExternalFiscalDocument.Model); // COD_MOD
            spedRecord.addFieldString(referencedExternalFiscalDocument.RetailFiscalPrinterSerialNumber); // ECF_FAB
            spedRecord.addFieldNumeric(referencedExternalFiscalDocument.RetailTerminalNumber); // ECF_CX
            spedRecord.addFieldNumeric(referencedExternalFiscalDocument.FiscalDocumentNumber); // NUM_DOC
            spedRecord.addFieldDate(referencedExternalFiscalDocument.IssueDate); // DT_DOC

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC116</Name>
				<Source><![CDATA[
    private void createRecordC116(FBSpedRecord_BR _parentRecord, FiscalDocument_BR _fiscalDocument, FiscalDocumentTextID_BR _textID)
    {
        FiscalDocumentReferenced_BR fiscalDocumentReferenced;
        FiscalDocument_BR referencedFiscalDocument;

        while select RecId from fiscalDocumentReferenced
            where fiscalDocumentReferenced.FiscalDocument == _fiscalDocument.RecId
                && fiscalDocumentReferenced.FiscalDocumentSourceText == _textID
            join Model, FiscalDocumentSeries, AccessKey, FiscalDocumentNumber, FiscalDocumentDate from referencedFiscalDocument
                where referencedFiscalDocument.RecId == fiscalDocumentReferenced.ReferencedFiscalDocument
                    && referencedFiscalDocument.Model == FiscalBooksConstants_BR::FiscalDocModel_59
        {
            FBSpedRecord_BR spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C116); // REG

            spedRecord.addFieldString(referencedFiscalDocument.Model); // COD_MOD
            spedRecord.addFieldString(referencedFiscalDocument.FiscalDocumentSeries); // NR_SAT
            spedRecord.addFieldString(referencedFiscalDocument.AccessKey); // CHV_CFE
            spedRecord.addFieldNumeric(referencedFiscalDocument.FiscalDocumentNumber); // NUM_CFE
            spedRecord.addFieldDate(referencedFiscalDocument.FiscalDocumentDate); // DT_DOC

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC120</Name>
				<Source><![CDATA[
    private void createRecordC120(FBSpedRecord_BR _parentRecord, FiscalDocument_BR _fiscalDocument, FBFiscalDocumentTaxSummarizer_BR _taxSummarizer)
    {
        FBSpedRecord_BR             spedRecord;
        PurchImportDeclaration_BR   purchImportDeclaration;

        if (!_fiscalDocument.ImportDeclaration)
        {
            return;
        }

        select firstOnly Type, DINumber, DrawBackNumber from purchImportDeclaration
            where purchImportDeclaration.RecId == _fiscalDocument.ImportDeclaration;

        spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C120);
        spedRecord.addFieldString(purchImportDeclaration.Type == PurchDIType_BR::Normal ? '0' : '1');
        spedRecord.addFieldString(purchImportDeclaration.DINumber, spedFiscalVersion < FBSPEDFiscalVersion_BR::v115 ? 12 : 15);
        spedRecord.addFieldNumeric(_taxSummarizer.getDocTaxAmountWithNonRecoverableAmount(TaxType_BR::PIS), 2);
        spedRecord.addFieldNumeric(_taxSummarizer.getDocTaxAmountWithNonRecoverableAmount(TaxType_BR::COFINS), 2);
        spedRecord.addFieldString(purchImportDeclaration.DrawBackNumber);

        this.addChildRecord(_parentRecord, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC130</Name>
				<Source><![CDATA[
    private void createRecordC130(FBSpedRecord_BR _parentRecord, FiscalDocument_BR _fiscalDocument)
    {
        FBSpedRecord_BR             spedRecord;
        FiscalDocumentLine_BR       fiscalDocumentLine;
        FiscalDocumentTaxTrans_BR   fiscalDocumentTaxTrans, taxTransISS, taxTransIRRF, taxTransINSSRetained;

        if (!_fiscalDocument.TotalServicesAmount || _fiscalDocument.Direction == FiscalDocDirection_BR::Incoming)
        {
            return;
        }

        while select LineAmount
            from fiscalDocumentLine
            where fiscalDocumentLine.ItemType == FiscalDocumentLineItemType_BR::Service
                && fiscalDocumentLine.FiscalDocument == _fiscalDocument.RecId
            notExists join fiscalDocumentTaxTrans
                where fiscalDocumentTaxTrans.FiscalDocumentLine == fiscalDocumentLine.RecId
                    && fiscalDocumentTaxTrans.Type == TaxType_BR::ICMS
        {
            select sum(TaxAmount), sum(TaxBaseAmount)
                from taxTransISS
                where taxTransISS.FiscalDocumentLine == fiscalDocumentLine.RecId
                    && taxTransISS.Type == TaxType_BR::ISS;

            select sum(TaxAmount), sum(TaxBaseAmount)
                from taxTransIRRF
                where taxTransIRRF.FiscalDocumentLine == fiscalDocumentLine.RecId
                    && taxTransIRRF.Type == TaxType_BR::IRRF;

            select sum(TaxAmount), sum(TaxBaseAmount)
                from taxTransINSSRetained
                where taxTransINSSRetained.FiscalDocumentLine == fiscalDocumentLine.RecId
                    && taxTransINSSRetained.Type == TaxType_BR::INSSRetained;

            spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C130);
            spedRecord.addFieldNumeric(fiscalDocumentLine.LineAmount, 2);
            spedRecord.addFieldNumeric(taxTransISS.TaxBaseAmount, 2);
            spedRecord.addFieldNumeric(taxTransISS.TaxAmount, 2);
            spedRecord.addFieldNumeric(taxTransIRRF.TaxBaseAmount, 2);
            spedRecord.addFieldNumeric(taxTransIRRF.TaxAmount, 2);
            spedRecord.addFieldNumeric(taxTransINSSRetained.TaxBaseAmount, 2);
            spedRecord.addFieldNumeric(taxTransINSSRetained.TaxAmount, 2);

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC140</Name>
				<Source><![CDATA[
    private void createRecordC140(FBSpedRecord_BR _parentRecord, FiscalDocument_BR _fiscalDocument)
    {
        const str Others99 = '99';

        FBSpedRecord_BR                 spedRecord;
        FiscalDocumentCustVendTrans_BR  fiscalDocumentCustVendTrans;
        str                             documentTypeIdentification;

        if (!this.shouldCreateC140(_fiscalDocument))
        {
            return;
        }

        while select fiscalDocumentCustVendTrans
            where fiscalDocumentCustVendTrans.FiscalDocument == _fiscalDocument.RecId
        {
            documentTypeIdentification = this.getDocumentTypeIdentification(fiscalDocumentCustVendTrans.DocumentType);

            spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C140);

            spedRecord.addFieldString   (int2str(_fiscalDocument.FiscalDocumentIssuer));
            spedRecord.addFieldString   (documentTypeIdentification);
            spedRecord.addFieldString   (documentTypeIdentification == Others99 ? "@SYS4001550" : "");
            spedRecord.addFieldNumeric  (_fiscalDocument.FiscalDocumentNumber);
            spedRecord.addFieldNumeric  (fiscalDocumentCustVendTrans.numberOfInstallments());
            spedRecord.addFieldNumeric  (fiscalDocumentCustVendTrans.Amount, 2);

            this.addChildRecord(_parentRecord, spedRecord);

            this.createRecordC141(spedRecord, fiscalDocumentCustVendTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC141</Name>
				<Source><![CDATA[
    private void createRecordC141(FBSpedRecord_BR _parentRecord, FiscalDocumentCustVendTrans_BR _fiscalDocumentCustVendTrans)
    {
        FBSpedRecord_BR                 spedRecord;
        FiscalDocumentInstallment_BR    fiscalDocumentInstallment;

        while select fiscalDocumentInstallment
            where fiscalDocumentInstallment.FiscalDocumentCustVendTrans  == _fiscalDocumentCustVendTrans.RecId
        {
            spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C141);

            spedRecord.addFieldNumeric  (fiscalDocumentInstallment.InstallmentNumber);
            spedRecord.addFieldDate     (fiscalDocumentInstallment.DueDate);
            spedRecord.addFieldNumeric  (fiscalDocumentInstallment.Amount, 2);

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC160</Name>
				<Source><![CDATA[
    private void createRecordC160(FBSpedRecord_BR _parentRecord, FiscalDocument_BR _fiscalDocument, FBBookingPeriodFiscalDocument_BR _fbBookingPeriodFiscalDocument)
    {
        FBSpedRecord_BR                 spedRecord;
        FiscalDocumentShipmentStat_BR   fiscalDocumentShipmentStat;

        if (_fbBookingPeriodFiscalDocument.FiscalSituation == FBFiscalDocumentSituation_BR::Cancelled
            || !_fiscalDocument.SalesCarrier)
        {
            return;
        }

        if (_fiscalDocument.Direction != FiscalDocDirection_BR::Outgoing
            || ( _fiscalDocument.Model != FiscalBooksConstants_BR::FiscalDocModel_01
                && _fiscalDocument.Model != FiscalBooksConstants_BR::FiscalDocModel_04))
        {
            return;
        }

        if (!FBSpedFilePartyTmp_BR::existsForSalesCarrier(spedFileParty, fiscalEstablishment.RecId, _fiscalDocument.SalesCarrier))
        {
            spedFileParty.insertFromSalesCarrierRecId(fiscalEstablishment.RecId, _fiscalDocument.SalesCarrier, _fiscalDocument.SalesCarrierLogisticsPostalAddress);
        }

        spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C160);

        select sum(GrossWeight), sum(NetWeight), sum(VolumeQuantity) from fiscalDocumentShipmentStat
            where fiscalDocumentShipmentStat.FiscalDocument == _fiscalDocument.RecId;

        spedRecord.addFieldString       (spedFileParty.code(), 60);
        spedRecord.addFieldString       (this.keepAlphaAndNumbers(_fiscalDocument.VehicleLicensePlateNumber), 7);
        spedRecord.addFieldNumeric      (fiscalDocumentShipmentStat.VolumeQuantity);
        spedRecord.addFieldNumeric      (fiscalDocumentShipmentStat.GrossWeight, 2);
        spedRecord.addFieldNumeric      (fiscalDocumentShipmentStat.NetWeight, 2);
        spedRecord.addFieldString       (_fiscalDocument.VehicleLicensePlateState, 2);

        this.addChildRecord(_parentRecord, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC170</Name>
				<Source><![CDATA[
    private void createRecordC170(FBSpedRecord_BR _parentRecord, FiscalDocument_BR _fiscalDocument, FBFiscalDocumentTaxSummarizer_BR _taxSummarizer)
    {
        FBSpedRecord_BR                 spedRecord;
        FiscalDocumentLine_BR           fiscalDocumentLine;
        FBTaxTransTotalsByLine_BR       taxtransIcms, taxTransIcmsst, taxTransIpi, taxTransPis, taxTransCofins;
        TaxationCode_BR                 taxationCode;
        FiscalEstablishment_BR          localFiscalEstablishment = FiscalEstablishment_BR::findById(_fiscalDocument.FiscalEstablishment);
        VendInvoiceJour                 vendInvoiceJour;
        int                             createInventTrans;
        boolean                         createRecord;
        List                            childRecords;
        ListEnumerator                  le;
        FBSpedRecord_BR                 currentChildRecord;
        RefRecId                        fiscalDocumentRefRecId = _fiscalDocument.RefRecId;

        if (_fiscalDocument.ComplementaryType != InvoiceComplementaryType_BR::Blank)
        {
            fiscalDocumentRefRecId = (select firstOnly RefRecId from FiscalDocument_BR
                where FiscalDocument_BR.RecId == _fiscalDocument.ComplementedFiscalDocument).RefRecId;
        }

        select firstOnly SalesPurchOperationType_BR from vendInvoiceJour
           where vendInvoiceJour.RecId == fiscalDocumentRefRecId;
        
        if (vendInvoiceJour.SalesPurchOperationType_BR)
        {
            createInventTrans = !SalesPurchOperationType_BR::find(vendinvoicejour.SalesPurchOperationType_BR).CreateInventTrans;
        }
        
        while select fiscalDocumentLine
            where fiscalDocumentLine.FiscalDocument == _fiscalDocument.RecId
        {
            createRecord = !this.isElectronicFiscalDocFromOwnEstab(_fiscalDocument);

            spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C170);

            childRecords = new List(Types::Class);

            if (_fiscalDocument.TotalServicesAmount && _fiscalDocument.Direction == FiscalDocDirection_BR::Outgoing)
            {
                currentChildRecord = this.createRecordC172(fiscalDocumentLine);

                childRecords.addEnd(currentChildRecord);
            }

            if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v113 && _fiscalDocument.Direction == FiscalDocDirection_BR::Outgoing && fiscalBooksParametersPerState.GenerateC176Record)
            {
                currentChildRecord = this.createRecordC176(_fiscalDocument, fiscalDocumentLine);

                childRecords.addEnd(currentChildRecord);

                createRecord = createRecord || (currentChildRecord != null);
            }

            if(spedFiscalVersion >= FBSPEDFiscalVersion_BR::v112)
            {
                currentChildRecord = this.createRecordC177(fiscalDocumentLine);

                childRecords.addEnd(currentChildRecord);
            }

            if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v113
            && fiscalBooksParametersPerState.EnableC180C185
            && _fiscalDocument.Direction == FiscalDocDirection_BR::Incoming
            && !_fiscalDocument.isReturnOrder())
            {
                currentChildRecord = this.createRecordC180(_fiscalDocument, fiscalDocumentLine);

                childRecords.addEnd(currentChildRecord);

                createRecord = createRecord || (currentChildRecord != null);
            }


            if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v114
            && fiscalBooksParametersPerState.EnableC181C186
            && _fiscalDocument.Direction == FiscalDocDirection_BR::Incoming
            && _fiscalDocument.isReturnOrder())
            {
                currentChildRecord = this.createRecordC181(_fiscalDocument, fiscalDocumentLine);

                childRecords.addEnd(currentChildRecord);

                createRecord = createRecord || (currentChildRecord != null);
            }

            if (!createRecord)
            {
                continue;
            }

            taxtransIcms    = _taxSummarizer.getTaxTransForLineByType(fiscalDocumentLine, TaxType_BR::ICMS);
            taxTransIcmsst  = _taxSummarizer.getTaxTransForLineByType(fiscalDocumentLine, TaxType_BR::ICMSST);
            taxTransIpi     = _taxSummarizer.getTaxTransForLineByType(fiscalDocumentLine, TaxType_BR::IPI);
            taxTransPis     = _taxSummarizer.getTaxTransForLineByType(fiscalDocumentLine, TaxType_BR::PIS);
            taxTransCofins  = _taxSummarizer.getTaxTransForLineByType(fiscalDocumentLine, TaxType_BR::COFINS);

            taxationCode = taxTransIcms.parmTaxationCode();

            InventTable inventTable = InventTable::find(fiscalDocumentLine.ItemId);

            if (!FBSpedFileItemTmp_BR::existsForItemId(spedFileItem, localFiscalEstablishment.RecId, inventTable.ItemId))
            {
                spedFileItem.insertFromInventTable(localFiscalEstablishment.RecId, inventTable);
            }

            if (!FBSpedFileUnitOfMeasureTmp_BR::existsForItemIdAndSymbol(spedFileUnitOfMeasure, localFiscalEstablishment.RecId, fiscalDocumentLine.ItemId, fiscalDocumentLine.Unit))
            {
                spedFileUnitOfMeasure.insertFromItemIdAndSymbol(spedFileUnitSymbol, localFiscalEstablishment.RecId, fiscalDocumentLine.ItemId, fiscalDocumentLine.Unit);
            }

            if (!FBSpedFileOperationNatureTmp_BR::existsForCFOP(spedFileOperationNature, localFiscalEstablishment.RecId, fiscalDocumentLine.CFOP))
            {
                spedFileOperationNature.insertFromCFOPId(localFiscalEstablishment.RecId, fiscalDocumentLine.CFOP);
            }

            spedRecord.addFieldNumeric                  (fiscalDocumentLine.LineNum, 0, 3);
            spedRecord.addFieldString                   (fiscalDocumentLine.ItemId, 60);
            spedRecord.addFieldString                   (strLRTrim(fiscalDocumentLine.Description));
            spedRecord.addFieldNumeric                  (fiscalDocumentLine.Quantity > 0 ? fiscalDocumentLine.Quantity : 1.00, 5);
            spedRecord.addFieldString                   (FBSpedFileUnitSymbolTmp_BR::findOrCreateSpedSymbol( spedFileUnitSymbol, fiscalDocumentLine.Unit));
            spedRecord.addFieldNumeric                  (fiscalDocumentLine.LineAmount, 2);
            spedRecord.addFieldNumeric                  (fiscalDocumentLine.LineDiscount, 2);
            spedRecord.addFieldString                   (int2str(createInventTrans));
            spedRecord.addFieldNumericFilledWithZeros   (int2str(enum2int(fiscalDocumentLine.Origin)) + taxationCode, 3);
            spedRecord.addFieldNumeric                  (this.formatKeepNumbersOnly(fiscalDocumentLine.CFOP), 0, 4);
            spedRecord.addFieldString                   (this.formatKeepNumbersOnly(fiscalDocumentLine.CFOP), 10);

            if (taxTransIcms.parmFiscalValue() == TaxFiscalValue_BR::WithCreditDebit)
            {
                spedRecord.addFieldNumeric              (taxtransIcms.parmTaxbaseAmount(), 2);
                spedRecord.addFieldNumeric              (taxtransIcms.parmTaxValue(), 2);
                spedRecord.addFieldNumeric              (taxtransIcms.parmTaxAmount(), 2);
            }
            else
            {
                spedRecord.addFieldNumeric              (0, 2);
                spedRecord.addFieldNumeric              (0, 2);
                spedRecord.addFieldNumeric              (0, 2);
            }

            spedRecord.addFieldNumeric                  (taxTransIcmsst.parmTaxBaseAmount(), 2);
            spedRecord.addFieldNumeric                  (taxTransIcmsst.parmTaxValue(), 2);
            spedRecord.addFieldNumeric                  (taxTransIcmsst.parmTaxAmount(), 2);
            spedRecord.addFieldString                   (int2str(this.getIPITaxAssessmentPeriodocity()));
            spedRecord.addFieldNumericFilledWithZeros   (taxTransIpi.parmTaxationCode(), 2);
            spedRecord.addFieldEmpty                    ();
            spedRecord.addFieldNumeric                  (taxTransIpi.parmTaxBaseAmount(), 2);
            spedRecord.addFieldNumeric                  (taxTransIpi.parmTaxValue(), 2);
            spedRecord.addFieldNumeric                  (taxTransIpi.parmTaxAmount(), 2);
            spedRecord.addFieldNumericFilledWithZeros   (taxtransPis.parmTaxationCode(), 2);
            spedRecord.addFieldNumeric                  (taxTransPis.parmTaxBaseAmount(), 2);
            spedRecord.addFieldNumeric                  (taxTransPis.parmTaxValue(), 2);
            spedRecord.addFieldEmpty();
            spedRecord.addFieldEmpty();
            spedRecord.addFieldNumeric                  (taxTransPis.parmTaxAmount(), 2);
            spedRecord.addFieldNumericFilledWithZeros   (taxTransCofins.parmTaxationCode(), 2);
            spedRecord.addFieldNumeric                  (taxTransCofins.parmTaxBaseAmount(), 2);
            spedRecord.addFieldNumeric                  (taxTransCofins.parmTaxValue(), 2);
            spedRecord.addFieldEmpty();
            spedRecord.addFieldEmpty();
            spedRecord.addFieldNumeric                  (taxTransCofins.parmTaxAmount(), 2);
            spedRecord.addFieldEmpty();

            if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v112)
            {
                spedRecord.addFieldEmpty        ();//VL_ABAT_NT
            }

            this.addChildRecord(_parentRecord, spedRecord);

            le = childRecords.getEnumerator();

            while (le.moveNext())
            {
                currentChildRecord = le.current();

                if (currentChildRecord)
                {
                    this.addChildRecord(spedRecord, currentChildRecord);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC172</Name>
				<Source><![CDATA[
    private FBSpedRecord_BR createRecordC172(FiscalDocumentLine_BR _fiscalDocumentLine)
    {
        FBSpedRecord_BR             spedRecord;
        FiscalDocumentTaxTrans_BR   taxTransISS;

        select sum(TaxAmount), sum(TaxBaseAmount), maxOf(TaxValue)
            from taxTransISS
            where taxTransISS.FiscalDocumentLine == _fiscalDocumentLine.RecId
                && taxTransISS.Type == TaxType_BR::ISS;

        if (!taxTransISS.TaxAmount)
        {
            return null;
        }

        spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C172);
        spedRecord.addFieldNumeric(taxTransISS.TaxBaseAmount, 2);
        spedRecord.addFieldNumeric(taxTransISS.TaxValue, 2);
        spedRecord.addFieldNumeric(taxTransISS.TaxAmount, 2);

        return spedRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC177</Name>
				<Source><![CDATA[
    private FBSpedRecord_BR createRecordC177(FiscalDocumentLine_BR _fiscalDocumentLine)
    {
        FBSpedRecord_BR             spedRecord;
        FiscalDocumentTaxTrans_BR   taxTransISS;
        FBAdditionalInformationCodeLink_BR FBAdditionalInformationCodeLink_BR;
        
        FBAdditionalInformationCodeLink_BR = FBAdditionalInformationCodeLink_BR::findValidCodeForPeriod(fbBookingPeriod.periodFrom(),
            fbBookingPeriod.periodTo(),
            _fiscalDocumentLine.ItemId,
            _fiscalDocumentLine.FiscalClassification,
            fbBookingPeriod.fiscalEstablishment().postalAddress().State);
        
        if (fBAdditionalInformationCodeLink_BR.RecId)
        {
            spedRecord = this.newRecord('C177');
            
            spedRecord.addFieldString(fBAdditionalInformationCodeLink_BR.FBAdditionalInformationCode_BR);
        }

        return spedRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC190</Name>
				<Source><![CDATA[
    private void createRecordC190(FBSpedRecord_BR _parentRecord, FiscalDocument_BR _recordC100, FBFiscalDocumentTaxSummarizer_BR _taxSummarizer)
    {
        ListEnumerator                      le;
        FBFiscalDocumentTaxSummary_BR       taxSummary;
        FBSpedRecord_BR                     spedRecord;

        le = _taxSummarizer.getListOfSummaryData().getEnumerator();

        while (le.moveNext())
        {
            taxSummary = le.current();

            spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C190);

            spedRecord.addFieldNumericFilledWithZeros   (taxSummary.parmICMSCST(), 3);                      // CST_ICMS
            spedRecord.addFieldNumericFilledWithZeros   (this.formatKeepNumbersOnly(taxSummary.parmCFOP()), 4);  // CFOP

            if (taxSummary.parmIcmsFiscalValue() == TaxFiscalValue_BR::WithCreditDebit)
            {
                spedRecord.addFieldNumeric              (taxSummary.parmIcmsTaxValue(), 2);                 // ALIQ_ICMS
                spedRecord.addFieldNumeric              (taxSummary.parmOperationAmount(), 2);              // VL_OPR
                spedRecord.addFieldNumeric              (taxSummary.parmIcmsBaseAmount(), 2);               // VL_BC_ICMS
                spedRecord.addFieldNumeric              (taxSummary.parmIcmsAmount(), 2);                   // VL_ICMS
            }
            else
            {
                spedRecord.addFieldNumeric              (0, 2);                                             // ALIQ_ICMS
                spedRecord.addFieldNumeric              (taxSummary.parmOperationAmount(), 2);              // VL_OPR
                spedRecord.addFieldNumeric              (0, 2);                                             // VL_BC_ICMS
                spedRecord.addFieldNumeric              (0, 2);                                             // VL_ICMS
            }

            if (_recordC100.Model != FiscalBooksConstants_BR::FiscalDocModel_65)
            {
                spedRecord.addFieldNumeric                  (taxSummary.parmIcmsStBaseAmount(), 2);             // VL_BC_ICMS_ST
                spedRecord.addFieldNumeric                  (taxSummary.parmIcmsStAmount(), 2);                 // VL_ICMS_ST
                spedRecord.addFieldNumeric                  (taxSummary.parmIcmsBaseReductionAmount(), 2);      // VL_RED_BC
                spedRecord.addFieldNumeric                  (taxSummary.parmIpiAmount(), 2);                    // VL_IPI
                spedRecord.addFieldEmpty();                                                                     // COD_OBS
            }
            else
            {
                spedRecord.addFieldNumeric                  (0, 2);                                             // VL_BC_ICMS_ST
                spedRecord.addFieldNumeric                  (0, 2);                                             // VL_ICMS_ST
                spedRecord.addFieldNumeric                  (0, 2);                                             // VL_RED_BC
                spedRecord.addFieldNumeric                  (0, 2);                                             // VL_IPI
                spedRecord.addFieldEmpty();                                                                     // COD_OBS
            }

            this.addChildRecord(_parentRecord, spedRecord);

            if (spedFiscalVersion == FBSPEDFiscalVersion_BR::v112
                || (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v113
                    && conFind([FiscalBooksConstants_BR::FiscalDocModel_55, FiscalBooksConstants_BR::FiscalDocModel_65], _recordC100.Model)))
            {
                this.createRecordC191(spedRecord, taxSummary, _recordC100);
            }

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC191</Name>
				<Source><![CDATA[
    private void createRecordC191(FBSpedRecord_BR _parentRecord, FBFiscalDocumentTaxSummary_BR _taxSummary, FiscalDocument_BR _fiscalDocument)
    {
        FiscalDocumentTaxTransPovertyFund_BR        fiscalDocumentTaxTransPovertyFund;
        FiscalDocumentTaxTrans_BR                   fiscalDocumentTaxTrans;
        FiscalDocumentLine_BR                       fiscalDocumentLine;
        FBTaxTrans_BR                               fbTaxTrans;
        
        real                                        opAmount = 0.00, stAmount = 0.00, retAmount = 0.00;
        
        str 2 taxCode;

        taxCode = subStr(_taxSummary.parmICMSCST(), 2, 2);
        
        if (taxCode == '00'
            || taxCode == '10'
            || taxCode == '20'
            || taxCode == '51'
            || taxCode == '70'
            || taxCode == '90')

        {
            select sum(TaxPovertyFundAmount) from fiscalDocumentTaxTransPovertyFund
            exists join fiscalDocumentTaxTrans
                where fiscalDocumentTaxTransPovertyFund.FiscalDocumentTaxTrans_BR == fiscalDocumentTaxTrans.RecId
            exists join fbTaxTrans
                where fbTaxTrans.FiscalDocumentTaxTrans_BR == fiscalDocumentTaxTrans.RecId
                    && fbTaxTrans.TaxType == TaxType_BR::ICMS
                    && fbTaxTrans.CFOP == _taxSummary.parmCFOP()
                    && fbTaxTrans.TaxationCode == _taxSummary.parmICMSCST()
            exists join fiscalDocumentLine
                where fiscalDocumentLine.RecId == fiscalDocumentTaxTrans.FiscalDocumentLine
                    && fiscalDocumentLine.FiscalDocument == _fiscalDocument.RecId;

            opAmount = fiscalDocumentTaxTransPovertyFund.TaxPovertyFundAmount;
        }
        
        if (conFind(CSTList, taxCode))
        {
            select sum(TaxPovertyFundAmount) from fiscalDocumentTaxTransPovertyFund
            exists join fiscalDocumentTaxTrans
                where fiscalDocumentTaxTransPovertyFund.FiscalDocumentTaxTrans_BR == fiscalDocumentTaxTrans.RecId
            exists join fbTaxTrans
                where fbTaxTrans.FiscalDocumentTaxTrans_BR == fiscalDocumentTaxTrans.RecId
                    && fbTaxTrans.TaxType == TaxType_BR::ICMSST
                    && fbTaxTrans.CFOP == _taxSummary.parmCFOP()
                    && fbTaxTrans.TaxationCode == _taxSummary.parmICMSCST()
            exists join fiscalDocumentLine
                where fiscalDocumentLine.RecId == fiscalDocumentTaxTrans.FiscalDocumentLine
                    && fiscalDocumentLine.FiscalDocument == _fiscalDocument.RecId;

            if (taxCode == '60')
            {
                retAmount = fiscalDocumentTaxTransPovertyFund.TaxPovertyFundAmount;
            }
            else
            {
                stAmount = fiscalDocumentTaxTransPovertyFund.TaxPovertyFundAmount;
            }
        }
        
        if (opAmount != 0 || stAmount != 0 || retAmount != 0)
        {
            FBSpedRecord_BR spedRecord = this.newRecord('C191');
            spedRecord.addFieldNumeric(opAmount, 2); //VL_FCP_OP
            spedRecord.addFieldNumeric(stAmount, 2); //VL_FCP_ST
            spedRecord.addFieldNumeric(retAmount, 2); //VL_FCP_RET
            
            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC195</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record C195 in SPED fiscal report.
    /// </summary>
    /// <param name = "_parameters">A contract to pass the needed parameters. An instance of <c>FBSpedFiscalMethodParameters_BR</c> class.</param>
    protected void createRecordC195(FBSpedFiscalMethodParameters_BR _parameters)
    {
        if (fiscalEstablishmentAddress.State == FiscalBooksConstants_BR::StateSP &&
            FeatureStateProvider::isFeatureEnabled(FBSpedFiscalSPCAT66Feature_BR::instance()) && 
            this.shouldCreateC195CAT66(_parameters.parmFiscalDocument()))
        {
            this.createRecordC195CAT66(_parameters.parmParentRecord(), _parameters.parmFiscalDocument());
        }

        if (!this.shouldCreateC195(_parameters.parmFiscalDocument()))
        {
            return;
        }

        this.createRecordC195ForAdjustments (_parameters.parmParentRecord(), _parameters.parmFiscalDocument());
        this.createRecordC195ForLegalTexts  (_parameters.parmParentRecord(), _parameters.parmFiscalDocument());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC195CAT66</Name>
				<Source><![CDATA[
    private void createRecordC195CAT66(FBSpedRecord_BR _parentRecord, FiscalDocument_BR _fiscalDocument)
    {
        if (fiscalEstablishmentAddress.State != FiscalBooksConstants_BR::StateSP)
        {
            return;
        }

        FiscalDocumentLine_BR           fiscalDocumentLine;
        FiscalDocumentTaxTrans_BR       fiscalDocumentTaxTrans;
        FBCFOPGroupData_BR cfopGroup;

        container taxTypeCon = [TaxType_BR::ICMSST, TaxType_BR::IPI];
        
        while select fiscalDocumentTaxTrans
            where fiscalDocumentTaxTrans.Type in taxTypeCon
                && fiscalDocumentTaxTrans.FiscalValue == TaxFiscalValue_BR::WithoutCreditDebitOther
            exists join fiscalDocumentLine
                where fiscalDocumentLine.RecId == fiscalDocumentTaxTrans.FiscalDocumentLine
                    && fiscalDocumentLine.FiscalDocument == _fiscalDocument.RecId
            exists join cfopGroup
                where cfopGroup.CFOP == fiscalDocumentLine.CFOP
                    && cfopGroup.FBCFOPGroup == fiscalBooksParametersPerState.CAT66CFOPGroup
        {
            if (!conFind(CSTList, fiscalDocumentTaxTrans.TaxationCode))
            {
                continue;
            }

            FBSpedRecord_BR spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C195);

            FBObservationCodeTable_BR observationCode = FBObservationCodeTable_BR::find(fiscalBooksParametersPerState.CAT66ObservationCode); 

            spedRecord.addFieldString(observationCode.ObservationCode, 6); 
            spedRecord.addFieldString(observationCode.Description, 255);

            this.addChildRecord(_parentRecord, spedRecord);

            FBSpedFiscalMethodParameters_BR fiscMethodParm = FBSpedFiscalMethodParameters_BR::construct()
                .withFiscalDocument(_fiscalDocument)
                .withParentRecord(spedRecord)
                .withFiscalDocumentTaxTrans(fiscalDocumentTaxTrans);

            this.createRecordC197CAT66(fiscMethodParm);
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC197CAT66</Name>
				<Source><![CDATA[
    protected void createRecordC197CAT66(FBSpedFiscalMethodParameters_BR _parameters)
    {
        FiscalDocumentTaxTrans_BR fdTaxTrans = _parameters.parmFiscalDocumentTaxTrans();
        FiscalDocumentLine_BR fdLine = FiscalDocumentLine_BR::find(fdTaxTrans.FiscalDocumentLine);
        FiscalDocument_BR fiscalDocument = _parameters.parmFiscalDocument();
        
        if (fdTaxTrans.Type == TaxType_BR::ICMSST)
        {
            FBFiscalDocumentTaxAdjustmentCode_BR baseAdjCode = FBFiscalDocumentAdjustmentCodeICMS_BR::find(fiscalBooksParametersPerState.CAT66AjustmentCodeBase).SpedAdjustmentCode;

            FBFiscalDocumentTaxAdjustmentCode_BR valueAdjCode = FBFiscalDocumentAdjustmentCodeICMS_BR::find(fiscalBooksParametersPerState.CAT66AjustmentCodeValue).SpedAdjustmentCode;

            FBSpedRecord_BR spedRecord1 = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C197);
            spedRecord1.addFieldString(baseAdjCode, 10);
            spedRecord1.addFieldNumeric(this.formatKeepNumbersOnly(fdLine.CFOP), 0, 4);
            spedRecord1.addFieldEmptyNTimes(4);
            spedRecord1.addFieldNumeric(fdTaxTrans.TaxBaseAmountOther, 2);

            this.addChildRecord(_parameters.parmParentRecord(), spedRecord1);

            FBSpedRecord_BR spedRecord2 = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C197);
            spedRecord2.addFieldString(valueAdjCode, 10);
            spedRecord2.addFieldNumeric(this.formatKeepNumbersOnly(fdLine.CFOP), 0, 4); 
            spedRecord2.addFieldEmptyNTimes(3);

            spedRecord2.addFieldNumeric(fdTaxTrans.TaxAmountOther, 2);
            spedRecord2.addFieldEmpty();

            this.addChildRecord(_parameters.parmParentRecord(), spedRecord2);
        }
        else
        {
            FBFiscalDocumentTaxAdjustmentCode_BR adjCode = FBFiscalDocumentAdjustmentCodeICMS_BR::find(fiscalBooksParametersPerState.CAT66IPIValue).SpedAdjustmentCode;

            FBSpedRecord_BR spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C197);
            spedRecord.addFieldString(adjCode, 10);
            spedRecord.addFieldNumeric(this.formatKeepNumbersOnly(fdLine.CFOP), 0, 4); 
            spedRecord.addFieldEmptyNTimes(2);
            spedRecord.addFieldNumeric(fiscalBooksParametersPerState.CAT66IPIValue, 2); 
            spedRecord.addFieldEmptyNTimes(2);

            this.addChildRecord(_parameters.parmParentRecord(), spedRecord);
        }
        isCreatedC197 = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC195ForAdjustments</Name>
				<Source><![CDATA[
    private void createRecordC195ForAdjustments(FBSpedRecord_BR _parentRecord, FiscalDocument_BR _fiscalDocument)
    {
        FBSpedRecord_BR                 spedRecord;
        FBFiscalDocumentAdjustment_BR   fiscalDocumentAdjustment;
        FiscalDocumentLine_BR           fiscalDocumentLine;
        FiscalDocumentTaxTrans_BR       fiscalDocumentTaxTrans;
        FBObservationCodeTable_BR       observationCodeTable;
        RecId                           lastObservationCodeRecId = 0;
        FBFiscalDocumentAdjustmentCodeICMS_BR fiscalDocumentAdjustmentCode;

        while select Description, ObservationCode
            from observationCodeTable
            group by observationCodeTable.RecId, observationCodeTable.ObservationCode, observationCodeTable.Description, fiscalDocumentLine.ItemId, fiscalDocumentTaxTrans.RecId
            order by observationCodeTable.RecId
                join RecId
                    from fiscalDocumentAdjustment
                    where fiscalDocumentAdjustment.FBObservationCodeTable_BR == observationCodeTable.RecId
                        && (fiscalDocumentAdjustment.TaxType_BR == TaxType_BR::ICMS || fiscalDocumentAdjustment.TaxType_BR == TaxType_BR::ICMSST)
                join fiscalDocumentTaxTrans
                    where fiscalDocumentTaxTrans.RecId == fiscalDocumentAdjustment.FiscalDocumentTaxTrans_BR
                join fiscalDocumentLine
                    where fiscalDocumentLine.RecId == fiscalDocumentTaxTrans.FiscalDocumentLine
                        && fiscalDocumentLine.FiscalDocument == _fiscalDocument.RecId
                exists join fiscalDocumentAdjustmentCode
                    where fiscalDocumentAdjustmentCode.RecId == fiscalDocumentAdjustment.FBFiscalDocumentAdjustmentCodeICMS_BR
                        && !fiscalDocumentAdjustmentCode.Table52
        {
            if (observationCodeTable.RecId != lastObservationCodeRecId)
            {
                if (!FBSpedFileObservationCodeTmp_BR::existsForObservationCode(spedFileObservationCode, observationCodeTable.ObservationCode))
                {
                    spedFileObservationCode.insertFromObservationCode(observationCodeTable.ObservationCode, observationCodeTable.Description);
                }

                spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C195); // REG

                spedRecord.addFieldString   (observationCodeTable.ObservationCode, 6); // COD_OBS
                spedRecord.addFieldString   (observationCodeTable.Description, 255); // TXT_COMPL

                this.addChildRecord(_parentRecord, spedRecord);

                lastObservationCodeRecId = observationCodeTable.RecId;
            }

            this.createRecordC197(FBSpedFiscalMethodParameters_BR::construct()
                                    .withParentRecord(spedRecord)
                                    .withItemId(fiscalDocumentLine.ItemId)
                                    .withFiscalDocumentTaxTrans(fiscalDocumentTaxTrans)
                                    .withFBObservationCodeRecId(observationCodeTable.RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC195ForLegalTexts</Name>
				<Source><![CDATA[
    private void createRecordC195ForLegalTexts(FBSpedRecord_BR _parentRecord, FiscalDocument_BR _fiscalDocument)
    {
        FBSpedRecord_BR                     spedRecord;
        FiscalDocumentTextListParmData_BR   listOFLegalTexts;
        FiscalDocumentTextParmData_BR       fiscalDocumentTextParmData;
        FiscalEstablishment_BR              localFiscalEstablishment;
        String255                           legalText;
        Notes                               notes;
        int                                 legalTextLength;
        int                                 i;

        localFiscalEstablishment = FiscalEstablishment_BR::findById(_fiscalDocument.FiscalEstablishment);

        listOFLegalTexts = _fiscalDocument.getLegalTexts(DocuRestriction::Internal);

        while (listOFLegalTexts.moveNext())
        {
            fiscalDocumentTextParmData = listOFLegalTexts.getCurrent();

            notes = fiscalDocumentTextParmData.parmNotes();
            legalTextLength = strLen(notes);

            // If the legal text has more than 255 characters, the text will be broken in 255 characters each part
            for (i = 0; i < legalTextLength; i += MaxLegalTextLength)
            {
                legalText = subStr(notes, i + 1, i + MaxLegalTextLength);

                if (!FBSpedFileObservationCodeTmp_BR::existsForObservationCode(spedFileObservationCode, fiscalDocumentTextParmData.parmTextID()))
                {
                    spedFileObservationCode.insertFromObservationCode(fiscalDocumentTextParmData.parmTextID(), legalText);
                }

                spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C195);

                spedRecord.addFieldString   (fiscalDocumentTextParmData.parmTextID(), 6);   // COD_OB
                spedRecord.addFieldString   (legalText, 255);                               // TXT_COMPL

                this.addChildRecord(_parentRecord, spedRecord);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC197</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record C197 in SPED fiscal report.
    /// </summary>
    /// <param name = "_parameters">A contract to pass the needed parameters. An instance of <c>FBSpedFiscalMethodParameters_BR</c> class.</param>
    protected void createRecordC197(FBSpedFiscalMethodParameters_BR _parameters)
    {
        FBSpedRecord_BR                 spedRecord;
        FBFiscalDocumentAdjustment_BR   fiscalDocumentAdjustment;
        FBFiscalDocumentAdjustmentCodeICMS_BR fiscalDocumentAdjustmentCode;
        FiscalDocumentLine_BR fiscalDocumentLine = FiscalDocumentLine_BR::find(_parameters.parmFiscalDocumentTaxTrans().FiscalDocumentLine);
        
        while select fiscalDocumentAdjustment
            where fiscalDocumentAdjustment.FBObservationCodeTable_BR == _parameters.parmFBObservationCodeRecId()
                && fiscalDocumentAdjustment.IsCancelled == false
                && fiscalDocumentAdjustment.FiscalDocumentTaxTrans_BR == _parameters.parmFiscalDocumentTaxTrans().RecId
            join Classification from fiscalDocumentAdjustmentCode
                where fiscalDocumentAdjustmentCode.RecId == fiscalDocumentAdjustment.FBFiscalDocumentAdjustmentCodeICMS_BR
                    && !fiscalDocumentAdjustmentCode.Table52
        {
            if (!FBSpedFileItemTmp_BR::existsForItemId(spedFileItem, fiscalEstablishment.RecId, _parameters.parmItemId()))
            {
                spedFileItem.insertFromFiscalDocumentLine(fiscalEstablishment.RecId, _parameters.parmItemId());
            }
            
            spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C197);
            spedRecord.addFieldString   (fiscalDocumentAdjustment.fiscalDocumentAdjustmentCodeICMS().SpedAdjustmentCode, 10);
            spedRecord.addFieldString   (fiscalDocumentAdjustment.ComplementaryDescription);
            spedRecord.addFieldString   (_parameters.parmItemId(), 60);
            
            if (fiscalBooksParametersPerState.EnableDocumentAdjustment)
            {
                if (FBSpedFileC197ColumnNum_BRFlight::instance().isEnabled())
                {
                    switch (fiscalDocumentAdjustmentCode.Classification)
                    {
                        case FBFiscalDocumentClassificationICMS_BR::OtherCredit:
                        case FBFiscalDocumentClassificationICMS_BR::OtherDebit:
                            spedRecord.addFieldNumeric(0, 2);
                            spedRecord.addFieldNumeric(0, 2);
                            spedRecord.addFieldNumeric(fiscalDocumentAdjustment.TaxAmount, 2);
                            spedRecord.addFieldNumeric(0, 2);
                            break;

                        case FBFiscalDocumentClassificationICMS_BR::Information:
                            spedRecord.addFieldNumeric(0, 2);
                            spedRecord.addFieldNumeric(0, 2);
                            spedRecord.addFieldNumeric(0, 2);
                            spedRecord.addFieldNumeric(fiscalDocumentAdjustment.TaxAmountOther, 2);
                            break;

                        case FBFiscalDocumentClassificationICMS_BR::Credit:
                            spedRecord.addFieldNumeric(fiscalDocumentAdjustment.TaxBaseAmount, 2);
                            spedRecord.addFieldNumeric(fiscalDocumentAdjustment.TaxValue, 2, 6);
                            spedRecord.addFieldNumeric(fiscalDocumentAdjustment.TaxAmount, 2);
                            spedRecord.addFieldNumeric(fiscalDocumentAdjustment.TaxAmountOther, 2);
                            break;

                        default:
                            spedRecord.addFieldNumeric(0, 2);
                            spedRecord.addFieldNumeric(0, 2);
                            spedRecord.addFieldNumeric(0, 2);
                            spedRecord.addFieldNumeric(0, 2);
                            break;
                    }
                }
                else
                {
                    spedRecord.addFieldNumeric(0, 2);
                    spedRecord.addFieldNumeric(0, 2);

                    switch (fiscalDocumentAdjustmentCode.Classification)
                    {
                        case FBFiscalDocumentClassificationICMS_BR::OtherCredit:
                        case FBFiscalDocumentClassificationICMS_BR::OtherDebit:
                            spedRecord.addFieldNumeric(fiscalDocumentAdjustment.TaxAmount, 2);
                            spedRecord.addFieldNumeric(0, 2);
                            break;

                        case FBFiscalDocumentClassificationICMS_BR::Information:
                            spedRecord.addFieldNumeric(0, 2);
                            spedRecord.addFieldNumeric(fiscalDocumentAdjustment.TaxAmountOther, 2);
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                spedRecord.addFieldNumeric(fiscalDocumentAdjustment.TaxBaseAmount, 2);
                spedRecord.addFieldNumeric(fiscalDocumentAdjustment.TaxValue, 2, 6);
                spedRecord.addFieldNumeric(fiscalDocumentAdjustment.TaxAmount, 2);
                spedRecord.addFieldNumeric(fiscalDocumentAdjustment.TaxAmountOther, 2);
            }
                
            this.addChildRecord(_parameters.parmParentRecord(), spedRecord);

            isCreatedC197 = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC350</Name>
				<Source><![CDATA[
    private void createRecordC350(FiscalDocument_BR _fiscalDocument)
    {
        FBSpedRecord_BR                     spedRecord;
        FBFiscalDocumentTaxSummarizer_BR    taxSummarizer = FBFiscalDocumentTaxSummarizer_BR::construct(_fiscalDocument);

        spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C350);

        spedRecord.addFieldString   (_fiscalDocument.FiscalDocumentSeries, 3);                         // SER
        spedRecord.addFieldEmpty    ();                                                             // SUB_SER
        spedRecord.addFieldNumeric  (_fiscalDocument.FiscalDocumentNumber);                         // NUM_DOC
        spedRecord.addFieldDate     (_fiscalDocument.FiscalDocumentDate);                           // DT_DOC
        spedRecord.addFieldString   (this.formatKeepNumbersOnly(_fiscalDocument.ThirdPartyCNPJCPF));     // CNPJ_CPF
        spedRecord.addFieldNumeric  (_fiscalDocument.TotalGoodsAmount, 2);                          // VL_MERC
        spedRecord.addFieldNumeric  (_fiscalDocument.TotalAmount, 2);                               // VL_DOC
        spedRecord.addFieldNumeric  (_fiscalDocument.TotalDiscountAmount, 2);                       // VL_DESC
        spedRecord.addFieldNumeric  (taxSummarizer.getDocumentTaxAmount(TaxType_BR::PIS), 2);       // VL_PIS
        spedRecord.addFieldNumeric  (taxSummarizer.getDocumentTaxAmount(TaxType_BR::COFINS), 2);    // VL_COFINS
        spedRecord.addFieldEmpty    ();                                                             // COD_CTA

        this.addRecord(spedRecord);

        // Child records
        // C370: Fiscal document line
        this.createRecordC370(spedRecord, _fiscalDocument);
        // C390
        this.createRecordC390(spedRecord, taxSummarizer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC350ForAllDocuments</Name>
				<Source><![CDATA[
    private void createRecordC350ForAllDocuments()
    {
        FiscalDocument_BR                   fiscalDocument;
        FBBookingPeriodFiscalDocument_BR    fbBookingPeriodFiscalDocument;

        select count(RecId) from fiscalDocument
            join FiscalDocument_BR, FBBookingPeriod_BR, SpedFiscalRecord from fbBookingPeriodFiscalDocument
            where fbBookingPeriodFiscalDocument.FiscalDocument_BR   == fiscalDocument.RecId
                && fbBookingPeriodFiscalDocument.FBBookingPeriod_BR == fbBookingPeriod.RecId
                && fbBookingPeriodFiscalDocument.SpedFiscalRecord   == FiscalBooksConstants_BR::SpedRecord_C350;

        this.getRunBaseProgress().setCount(0);
        this.getRunBaseProgress().setTotal(fiscalDocument.RecId);
        this.getRunBaseProgress().setCaption(strFmt("@SYS4001688", FiscalBooksConstants_BR::SpedRecord_C350, fbBookingPeriod.FiscalEstablishmentId));
        this.getRunBaseProgress().update(true);

        // This select statement must be the same as the previous one (except by the count).
        while select fiscalDocument
            join FiscalDocument_BR, FBBookingPeriod_BR, SpedFiscalRecord from fbBookingPeriodFiscalDocument
            where fbBookingPeriodFiscalDocument.FiscalDocument_BR   == fiscalDocument.RecId
                && fbBookingPeriodFiscalDocument.FBBookingPeriod_BR == fbBookingPeriod.RecId
                && fbBookingPeriodFiscalDocument.SpedFiscalRecord   == FiscalBooksConstants_BR::SpedRecord_C350
        {
            this.createRecordC350(fiscalDocument);
            this.getRunBaseProgress().incCount(1);
            this.getRunBaseProgress().setText(strFmt("@SYS4001677",
                                                     fiscalDocument.FiscalDocumentSeries,
                                                     fiscalDocument.FiscalDocumentNumber));
            this.getRunBaseProgress().update(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC370</Name>
				<Source><![CDATA[
    private void createRecordC370(FBSpedRecord_BR _parentRecord, FiscalDocument_BR _fiscalDocument)
    {
        FBSpedRecord_BR                 spedRecord;
        FiscalDocumentLine_BR           fiscalDocumentLine;

        while select ItemId,
                     Unit,
                     CFOP,
                     LineNum,
                     Quantity,
                     LineAmount,
                     LineDiscount
            from fiscalDocumentLine
            where fiscalDocumentLine.FiscalDocument == _fiscalDocument.RecId
        {
            InventTable inventTable = InventTable::find(fiscalDocumentLine.ItemId);

            if (!FBSpedFileItemTmp_BR::existsForItemId(spedFileItem, fiscalEstablishment.RecId, inventTable.ItemId))
            {
                spedFileItem.insertFromInventTable(fiscalEstablishment.RecId, inventTable);
            }

            if (!FBSpedFileUnitOfMeasureTmp_BR::existsForItemIdAndSymbol(spedFileUnitOfMeasure, fiscalEstablishment.RecId, fiscalDocumentLine.ItemId, fiscalDocumentLine.Unit))
            {
                spedFileUnitOfMeasure.insertFromItemIdAndSymbol(spedFileUnitSymbol, fiscalEstablishment.RecId, fiscalDocumentLine.ItemId, fiscalDocumentLine.Unit);
            }

            spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C370);

            spedRecord.addFieldNumeric  (fiscalDocumentLine.LineNum, 0, 3);     // NUM_ITEM
            spedRecord.addFieldString   (fiscalDocumentLine.ItemId, 60);        // COD_ITEM
            spedRecord.addFieldNumeric  (fiscalDocumentLine.Quantity, 3);       // QTD
            spedRecord.addFieldString   (FBSpedFileUnitSymbolTmp_BR::findOrCreateSpedSymbol(spedFileUnitSymbol, fiscalDocumentLine.Unit));  // UNID
            spedRecord.addFieldNumeric  (fiscalDocumentLine.LineAmount - fiscalDocumentLine.LineDiscount, 2);                               // VL_ITEM
            spedRecord.addFieldNumeric  (fiscalDocumentLine.LineDiscount, 2);   // VL_DESC

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC390</Name>
				<Source><![CDATA[
    private void createRecordC390(FBSpedRecord_BR _parentRecord, FBFiscalDocumentTaxSummarizer_BR _taxSummarizer)
    {
        FBSpedRecord_BR                     spedRecord;
        FBFiscalDocumentTaxSummary_BR       taxSummary;
        ListEnumerator                      le;

        le = _taxSummarizer.getListOfSummaryData().getEnumerator();

        while (le.moveNext())
        {
            taxSummary = le.current();

            spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C390);

            spedRecord.addFieldNumericFilledWithZeros   (taxSummary.parmICMSCST(), 3);                      // CST_ICMS
            spedRecord.addFieldNumericFilledWithZeros   (this.formatKeepNumbersOnly(taxSummary.parmCFOP()), 4);  // CFOP

            if (taxSummary.parmIcmsFiscalValue() == TaxFiscalValue_BR::WithCreditDebit)
            {
                spedRecord.addFieldNumeric              (taxSummary.parmIcmsTaxValue(), 2);                 // ALIQ_ICMS
                spedRecord.addFieldNumeric              (taxSummary.parmOperationAmount(), 2);              // VL_OPR
                spedRecord.addFieldNumeric              (taxSummary.parmIcmsBaseAmount(), 2);               // VL_BC_ICMS
                spedRecord.addFieldNumeric              (taxSummary.parmIcmsAmount(), 2);                   // VL_ICMS
            }
            else
            {
                spedRecord.addFieldNumeric              (0, 2);                                             // ALIQ_ICMS
                spedRecord.addFieldNumeric              (taxSummary.parmOperationAmount(), 2);              // VL_OPR
                spedRecord.addFieldNumeric              (0, 2);                                             // VL_BC_ICMS
                spedRecord.addFieldNumeric              (0, 2);                                             // VL_ICMS
            }

            spedRecord.addFieldNumeric                  (taxSummary.parmIcmsBaseReductionAmount(), 2);      // VL_RED_BC
            spedRecord.addFieldEmpty();                                                                     // COD_OBS

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC400</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record C400 in SPED fiscal report
    /// </summary>
    /// <param name = "_retailFiscalPrinter">Used to add fiscal receipt model, model number, serial number and terminal number to
    /// the created record. An instance of <c>FBSpedFiscalMethodParameters_BR</c> class.</param>
    protected void createRecordC400(RetailFiscalPrinter_BR _retailFiscalPrinter)
    {
        FBSpedRecord_BR spedRecord;

        spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C400);

        spedRecord.addFieldString   (_retailFiscalPrinter.FiscalReceiptModel, 2);   // COD_MOD
        spedRecord.addFieldString   (_retailFiscalPrinter.ModelNumber, 20);         // ECF_MOD
        spedRecord.addFieldString   (_retailFiscalPrinter.SerialNumber, 20);        // ECF_FAB
        spedRecord.addFieldNumeric  (_retailFiscalPrinter.TerminalNumber, 0, 3);    // ECF_CX

        this.addRecord(spedRecord);

        this.createRecordC405(spedRecord, _retailFiscalPrinter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC400ForAllPrinters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record C400 in SPED fiscal report for all rows of the <c>RetailFiscalPrinter_BR</c> table
    /// </summary>
    protected void createRecordC400ForAllPrinters()
    {
        RetailFiscalPrinter_BR              retailFiscalPrinter;
        RetailZReport_BR                    retailZReport;
        FBBookingPeriodFiscalDocument_BR    fbBookingPeriodFiscalDocument;

        select count(RecId) from retailFiscalPrinter
            exists join retailZReport
                where  retailZReport.FiscalEstablishment                == fiscalEstablishment.FiscalEstablishmentId
                    && retailZReport.AdditionalFiscalMemoryIndex        == retailFiscalPrinter.AdditionalFiscalMemoryIndex
                    && retailZReport.FiscalPrinterSerialNumber          == retailFiscalPrinter.SerialNumber
            exists join fbBookingPeriodFiscalDocument
                where fbBookingPeriodFiscalDocument.RetailZReport_BR    == retailZReport.RecId
                    && fbBookingPeriodFiscalDocument.FBBookingPeriod_BR == fbBookingPeriod.RecId;

        this.getRunBaseProgress().setCount(0);
        this.getRunBaseProgress().setTotal(retailFiscalPrinter.RecId);
        this.getRunBaseProgress().setCaption("@SYS4006878");
        this.getRunBaseProgress().update(true);

        while select * from retailFiscalPrinter
            exists join retailZReport
                where  retailZReport.FiscalEstablishment                == fiscalEstablishment.FiscalEstablishmentId
                    && retailZReport.AdditionalFiscalMemoryIndex        == retailFiscalPrinter.AdditionalFiscalMemoryIndex
                    && retailZReport.FiscalPrinterSerialNumber          == retailFiscalPrinter.SerialNumber
            exists join fbBookingPeriodFiscalDocument
                where fbBookingPeriodFiscalDocument.RetailZReport_BR    == retailZReport.RecId
                    && fbBookingPeriodFiscalDocument.FBBookingPeriod_BR == fbBookingPeriod.RecId
        {
            this.createRecordC400(retailFiscalPrinter);
            this.getRunBaseProgress().incCount(1);
            this.getRunBaseProgress().setText(strFmt("@SYS4006879",
                                                     retailFiscalPrinter.StoreId,
                                                     retailFiscalPrinter.TerminalId));
            this.getRunBaseProgress().update(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC405</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record C405 in SPED fiscal report
    /// </summary>
    /// <param name="_parentRecord>The parent SPED record to which the record created by this method will be added to as a child. An
    /// instance of the <c>FBSpedRecord_BR</c> class</param>
    /// <param name = "_retailFiscalPrinter">Used to find <c>RetailZReport_BR</c> records which are linked to the parameter. An instance of <c>FBSpedFiscalMethodParameters_BR</c> class.</param>
    protected void createRecordC405(FBSpedRecord_BR _parentRecord, RetailFiscalPrinter_BR _retailFiscalPrinter)
    {
        FBSpedRecord_BR                     spedRecord;
        RetailZReport_BR                    retailZReport;
        FBBookingPeriodFiscalDocument_BR    fbBookingPeriodFiscalDocument;
        RetailFiscalReceipt_BR              retailFiscalReceipt;

        while select * from retailZReport
            order by retailZReport.AccountingDate
            where retailZReport.FiscalPrinterSerialNumber               == _retailFiscalPrinter.SerialNumber
                && retailZReport.AdditionalFiscalMemoryIndex            == _retailFiscalPrinter.AdditionalFiscalMemoryIndex
            exists join fbBookingPeriodFiscalDocument
                where fbBookingPeriodFiscalDocument.RetailZReport_BR    == retailZReport.RecId
                    && fbBookingPeriodFiscalDocument.FBBookingPeriod_BR == fbBookingPeriod.RecId
            exists join retailFiscalReceipt
                where retailFiscalReceipt.FiscalEstablishment           == retailZReport.FiscalEstablishment
                    && retailFiscalReceipt.ZReportNumber                == retailZReport.ZReportNumber
                    && retailFiscalReceipt.AdditionalFiscalMemoryIndex  == retailZReport.AdditionalFiscalMemoryIndex
                    && retailFiscalReceipt.FiscalPrinterSerialNumber    == retailZReport.FiscalPrinterSerialNumber
        {
            spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C405);

            spedRecord.addFieldDate      (retailZReport.AccountingDate);                 // DT_DOC
            spedRecord.addFieldNumeric   (retailZReport.RestartOperationNumber, 0, 3);   // CRO
            spedRecord.addFieldNumeric   (retailZReport.ZReportNumber, 0, 6);            // CRZ
            spedRecord.addFieldNumeric   (retailZReport.LastReceiptNumber, 0, 9);        // NUM_COO_FIN
            spedRecord.addFieldNumeric   (retailZReport.FinalGrandTotalAmount, 2);       // GT_FIN
            spedRecord.addFieldNumeric   (retailZReport.GrossDailySale, 2);              // VL_BRT

            this.addChildRecord(_parentRecord, spedRecord);

            this.createRecordC410(_parentRecord, retailZReport);
            this.createRecordC420(_parentRecord, retailZReport);
            this.createRecordC460(_parentRecord, retailZReport);
            this.createRecordC490(_parentRecord, retailZReport);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC410</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record C410 in SPED fiscal report
    /// </summary>
    /// <param name = "_parentRecord">The parent SPED record to which the created record will be added to as a child. An instance
    /// of the <c>FBSpedRecord_BR</c> class</param>
    /// <param name="_retailZReport">A row from the <c>RetailZReport_BR</c> table</param>
    protected void createRecordC410(FBSpedRecord_BR _parentRecord, RetailZReport_BR _retailZReport)
    {
        FBSpedRecord_BR  spedRecord;

        spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C410);

        spedRecord.addFieldNumeric   (_retailZReport.PISAmount, 2);     // VL_PIS
        spedRecord.addFieldNumeric   (_retailZReport.COFINSAmount, 2);  // VL_COFINS

        this.addChildRecord(_parentRecord, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC420</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record C420 in SPED fiscal report
    /// </summary>
    /// <param name = "_parentRecord">The parent SPED record to which the created record will be added to as a child. An instance
    /// of the <c>FBSpedRecord_BR</c> class</param>
    /// <param name="_retailZReport">A row from the <c>RetailZReport_BR</c> table</param>
    protected void createRecordC420(FBSpedRecord_BR _parentRecord, RetailZReport_BR _retailZReport)
    {
        FBSpedRecord_BR             spedRecord;
        RetailZReportTotalizer_BR   retailZReportTotalizer;
        str                         totalizerNumber;

        while select TotalizerName, TotalizerAmount
            from retailZReportTotalizer
            where retailZReportTotalizer.FiscalPrinterSerialNumber      == _retailZReport.FiscalPrinterSerialNumber
                && retailZReportTotalizer.ZReportNumber                 == _retailZReport.ZReportNumber
                && retailZReportTotalizer.AdditionalFiscalMemoryIndex   == _retailZReport.AdditionalFiscalMemoryIndex
                && retailZReportTotalizer.TotalizerAmount               != 0
        {
            totalizerNumber = '';

            spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C420);

            if (isInteger(subStr(retailZReportTotalizer.TotalizerName, 1, 1))
                && isInteger(subStr(retailZReportTotalizer.TotalizerName, 2, 1)))
            {
                totalizerNumber = subStr(retailZReportTotalizer.TotalizerName, 1, 2);
            }

            spedRecord.addFieldString   (retailZReportTotalizer.TotalizerName, 7);       // COD_TOT_PAR
            spedRecord.addFieldNumeric  (retailZReportTotalizer.TotalizerAmount, 2);     // VLR_ACUM_TOT
            if (totalizerNumber)
            {
                spedRecord.addFieldNumericFilledWithZeros (totalizerNumber, 2);          // NR_TOT
            }
            else
            {
                spedRecord.addFieldEmpty();
            }
            spedRecord.addFieldEmpty();                                                  // DESCR_NR_TOT

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC460</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record C460 in SPED fiscal report
    /// </summary>
    /// <param name = "_parentRecord">The parent SPED record to which the created record will be added to as a child. An instance
    /// of the <c>FBSpedRecord_BR</c> class</param>
    /// <param name="_retailZReport">A row from the <c>RetailZReport_BR</c> table</param>
    protected void createRecordC460(FBSpedRecord_BR _parentRecord, RetailZReport_BR _retailZReport)
    {
        FBSpedRecord_BR                 spedRecord;
        RetailFiscalReceipt_BR          retailFiscalReceipt;
        FBFiscalDocumentSituation_BR    retailFiscalReceiptSituation;

        AmountMST getTaxAmountByTaxType(RetailFiscalReceipt_BR _retailFiscalReceipt, TaxType_BR _taxType)
        {
            RetailFiscalReceiptTaxTrans_BR  retailFiscalReceiptTaxTrans;
            RetailFiscalReceiptLine_BR      retailFiscalReceiptLine;

            select retailFiscalReceiptLine
                where  retailFiscalReceiptLine.StoreId                  == _retailFiscalReceipt.StoreId
                    && retailFiscalReceiptLine.TerminalId               == _retailFiscalReceipt.TerminalId
                    && retailFiscalReceiptLine.TransactionId            == _retailFiscalReceipt.TransactionId
                    && retailFiscalReceiptLine.CancelledQuantity        == 0
                join sum(TaxAmount) from retailFiscalReceiptTaxTrans
                    where  retailFiscalReceiptTaxTrans.StoreId          == retailFiscalReceiptLine.StoreId
                        && retailFiscalReceiptTaxTrans.TerminalId       == retailFiscalReceiptLine.TerminalId
                        && retailFiscalReceiptTaxTrans.TransactionId    == retailFiscalReceiptLine.TransactionId
                        && retailFiscalReceiptTaxTrans.LineNum          == retailFiscalReceiptLine.LineNum
                        && retailFiscalReceiptTaxTrans.TaxType          == _taxType;

            return retailFiscalReceiptTaxTrans.TaxAmount;
        }

        if (!this.shouldCreateC460())
        {
            return;
        }

        while select *
            from retailFiscalReceipt
            where retailFiscalReceipt.FiscalPrinterSerialNumber     == _retailZReport.FiscalPrinterSerialNumber
                && retailFiscalReceipt.ZReportNumber                == _retailZReport.ZReportNumber
                && retailFiscalReceipt.AdditionalFiscalMemoryIndex  == _retailZReport.AdditionalFiscalMemoryIndex
        {
            spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C460);

            spedRecord.addFieldString                   (retailFiscalReceipt.FiscalReceiptModel, 2);                                // COD_MOD

            retailFiscalReceiptSituation = this.getFiscalSituationForFiscalReceipt(retailFiscalReceipt.Status);
            spedRecord.addFieldString                   (strRFix(int2str(enum2int(retailFiscalReceiptSituation)), 2, '0'), 2);      // COD_SIT

            spedRecord.addFieldNumeric                  (retailFiscalReceipt.ReceiptNumber, 0, 9);                                  // NUM_DOC

            if (retailFiscalReceipt.Status != FiscalDocumentStatus_BR::Cancelled)
            {
                spedRecord.addFieldDate                     (DateTimeUtil::date(retailFiscalReceipt.FiscalReceiptDateTime));            // DAT_DOC
                spedRecord.addFieldNumeric                  (retailFiscalReceipt.TotalAmount, 2);                                       // VL_DOC
                spedRecord.addFieldNumeric                  (getTaxAmountByTaxType(retailFiscalReceipt, TaxType_BR::PIS), 2);           // VL_PIS                                                           // VL_DOC
                spedRecord.addFieldNumeric                  (getTaxAmountByTaxType(retailFiscalReceipt, TaxType_BR::COFINS), 2);        // VL_COFINS                                                           // VL_DOC
                spedRecord.addFieldNumeric                  (this.formatKeepNumbersOnly(retailFiscalReceipt.ConsumerCNPJCPFNumber), 0, 14);  // CPF_CNPJ
                spedRecord.addFieldString                   (retailFiscalReceipt.ConsumerName, 60);                                     // NOM_ADQ
            }
            else
            {
                spedRecord.addFieldEmptyNTimes              (6);
            }

            this.addChildRecord(_parentRecord, spedRecord);

            if (retailFiscalReceipt.Status != FiscalDocumentStatus_BR::Cancelled)
            {
                this.createRecordC470(spedRecord, retailFiscalReceipt);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC470</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record C470 in SPED fiscal report
    /// </summary>
    /// <param name = "_parentRecord">The parent SPED record to which the created record will be added to as a child. An instance
    /// of the <c>FBSpedRecord_BR</c> class</param>
    /// <param name="_retailFiscalReceipt">A row from the <c>RetailFiscalReceipt_BR</c> table</param>
    protected void createRecordC470(FBSpedRecord_BR _parentRecord, RetailFiscalReceipt_BR _retailFiscalReceipt)
    {
        FBSpedRecord_BR                 spedRecord;
        RetailFiscalReceiptLine_BR      retailFiscalReceiptLine;
        RetailFiscalReceiptTaxTrans_BR  icmsTaxTrans, pisTaxTrans, cofinsTaxTrans;

        RetailFiscalReceiptTaxTrans_BR getTaxTransByType(RetailFiscalReceiptLine_BR _retailFiscalReceiptLine, TaxType_BR _taxType)
        {
            RetailFiscalReceiptTaxTrans_BR retailFiscalReceiptTaxTrans;

            select retailFiscalReceiptTaxTrans
                where retailFiscalReceiptTaxTrans.StoreId           == _retailFiscalReceiptLine.StoreId
                    && retailFiscalReceiptTaxTrans.TerminalId       == _retailFiscalReceiptLine.TerminalId
                    && retailFiscalReceiptTaxTrans.TransactionId    == _retailFiscalReceiptLine.TransactionId
                    && retailFiscalReceiptTaxTrans.LineNum          == _retailFiscalReceiptLine.LineNum
                    && retailFiscalReceiptTaxTrans.TaxType          == _taxType;

            return retailFiscalReceiptTaxTrans;
        }

        while select *
            from retailFiscalReceiptLine
            where retailFiscalReceiptLine.StoreId               == _retailFiscalReceipt.StoreId
                && retailFiscalReceiptLine.TerminalId           == _retailFiscalReceipt.TerminalId
                && retailFiscalReceiptLine.TransactionId        == _retailFiscalReceipt.TransactionId
                && retailFiscalReceiptLine.CancelledQuantity    == 0
        {
            spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C470);

            if (!FBSpedFileItemTmp_BR::existsForItemId(spedFileItem, fiscalEstablishment.RecId, retailFiscalReceiptLine.ItemId))
            {
                spedFileItem.insertFromFiscalDocumentLine(fiscalEstablishment.RecId, retailFiscalReceiptLine.ItemId);
            }

            if (!FBSpedFileUnitOfMeasureTmp_BR::existsForItemIdAndSymbol(spedFileUnitOfMeasure, fiscalEstablishment.RecId, retailFiscalReceiptLine.ItemId, retailFiscalReceiptLine.Unit))
            {
                spedFileUnitOfMeasure.insertFromItemIdAndSymbol(spedFileUnitSymbol, fiscalEstablishment.RecId, retailFiscalReceiptLine.ItemId, retailFiscalReceiptLine.Unit);
            }

            icmsTaxTrans    = getTaxTransByType(retailFiscalReceiptLine, TaxType_BR::ICMS);
            pisTaxTrans     = getTaxTransByType(retailFiscalReceiptLine, TaxType_BR::PIS);
            cofinsTaxTrans  = getTaxTransByType(retailFiscalReceiptLine, TaxType_BR::COFINS);

            spedRecord.addFieldString                   (retailFiscalReceiptLine.ItemId, 60);                                                   // COD_ITEM
            spedRecord.addFieldNumeric                  (retailFiscalReceiptLine.Quantity, 3);                                                  // QTD
            spedRecord.addFieldNumeric                  (retailFiscalReceiptLine.CancelledQuantity, 3);                                         // QTD_CANC
            spedRecord.addFieldString                   (retailFiscalReceiptLine.Unit, 6);                                                      // UNID
            spedRecord.addFieldNumeric                  (retailFiscalReceiptLine.LineAmount - retailFiscalReceiptLine.LineDiscountAmount, 2);   // VL_ITEM
            spedRecord.addFieldNumericFilledWithZeros   (int2str(icmsTaxTrans.TaxationOrigin) + strLFix(icmsTaxTrans.TaxationCode, 2, '0'), 3); // CST_ICMS
            spedRecord.addFieldNumeric                  (this.formatKeepNumbersOnly(retailFiscalReceiptLine.CFOP), 0, 4);                            // CFOP
            spedRecord.addFieldNumeric                  (icmsTaxTrans.TaxValue, 2, 6);                                                          // ALIQ_ICMS
            spedRecord.addFieldNumeric                  (pisTaxTrans.TaxAmount, 2);                                                             // VL_PIS
            spedRecord.addFieldNumeric                  (cofinsTaxTrans.TaxAmount, 2);                                                          // VL_COFINS

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC490</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record C490 in SPED fiscal report
    /// </summary>
    /// <param name = "_parentRecord">The parent SPED record to which the created record will be added to as a child. An instance
    /// of the <c>FBSpedRecord_BR</c> class</param>
    /// <param name="_retailZReport">A row from the <c>RetailZReport_BR</c> table </param>
    protected void createRecordC490(FBSpedRecord_BR _parentRecord, RetailZReport_BR _retailZReport)
    {
        FBSpedRecord_BR                         spedRecord;
        RetailZReportTotalizerTaxTrans_BR       zReportTotalizerTaxTrans;

        while select TaxationOrigin, TaxationCode, FiscalValue, CFOP, TaxValue, sum(TaxBaseAmount), sum(TaxAmount), sum(TaxBaseAmountExempt), sum(TaxBaseAmountOther)
            from zReportTotalizerTaxTrans
            group by zReportTotalizerTaxTrans.TaxationOrigin, zReportTotalizerTaxTrans.TaxationCode, zReportTotalizerTaxTrans.FiscalValue, zReportTotalizerTaxTrans.CFOP, zReportTotalizerTaxTrans.TaxValue
            where zReportTotalizerTaxTrans.ZReportNumber                == _retailZReport.ZReportNumber
                && zReportTotalizerTaxTrans.AdditionalFiscalMemoryIndex == _retailZReport.AdditionalFiscalMemoryIndex
                && zReportTotalizerTaxTrans.FiscalPrinterSerialNumber   == _retailZReport.FiscalPrinterSerialNumber
                && zReportTotalizerTaxTrans.TaxType                     == TaxType_BR::ICMS
        {
            spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C490);

            spedRecord.addFieldNumericFilledWithZeros   (int2str(zReportTotalizerTaxTrans.TaxationOrigin) + strLFix(zReportTotalizerTaxTrans.TaxationCode, 2, '0'), 3);   // CST_ICMS
            spedRecord.addFieldNumericFilledWithZeros   (this.formatKeepNumbersOnly(zReportTotalizerTaxTrans.CFOP), 4);  // CFOP

            switch (zReportTotalizerTaxTrans.FiscalValue)
            {
                case TaxFiscalValue_BR::WithCreditDebit:

                    spedRecord.addFieldNumeric (zReportTotalizerTaxTrans.TaxValue, 2, 6);   // ALIQ_ICMS
                    spedRecord.addFieldNumeric (zReportTotalizerTaxTrans.TaxBaseAmount, 2); // VL_OPR
                    spedRecord.addFieldNumeric (zReportTotalizerTaxTrans.TaxBaseAmount, 2); // VL_BC_ICMS
                    spedRecord.addFieldNumeric (zReportTotalizerTaxTrans.TaxAmount, 2);     // VL_ICMS

                    break;

                case TaxFiscalValue_BR::WithoutCreditDebitExempt:

                    spedRecord.addFieldNumeric              (0, 2);                                             // ALIQ_ICMS
                    spedRecord.addFieldNumeric (zReportTotalizerTaxTrans.TaxBaseAmountExempt, 2);   // VL_OPR
                    spedRecord.addFieldNumeric (0, 2);                                              // VL_BC_ICMS
                    spedRecord.addFieldNumeric (0, 2);                                              // VL_ICMS

                    break;

                case TaxFiscalValue_BR::WithoutCreditDebitOther:

                    spedRecord.addFieldNumeric                  (0, 2);                                                                     // ALIQ_ICMS
                    spedRecord.addFieldNumeric (zReportTotalizerTaxTrans.TaxBaseAmountOther, 2);    // VL_OPR
                    spedRecord.addFieldNumeric                  (0, 2);                                                                     // VL_BC_ICMS
                    spedRecord.addFieldNumeric                  (0, 2);                                                                     // VL_ICMS

                    break;
            }

            spedRecord.addFieldEmpty                    ();                                                                             // COD_OBS

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC500</Name>
				<Source><![CDATA[
    private void createRecordC500()
    {
        FBSpedRecord_BR                     spedRecord;
        FiscalDocument_BR                   recordC500;
        FBBookingPeriodFiscalDocument_BR    fbBookingPeriodFiscalDocument;
        FBFiscalDocumentTaxSummarizer_BR    taxSummarizer;

        while select recordC500
            join FiscalSituation from fbBookingPeriodFiscalDocument
                where fbBookingPeriodFiscalDocument.FBBookingPeriod_BR == fbBookingPeriod.RecId
                    && fbBookingPeriodFiscalDocument.FiscalDocument_BR == recordC500.RecId
                    && fbBookingPeriodFiscalDocument.SpedFiscalRecord == FiscalBooksConstants_BR::SpedRecord_C500
        {
            if (!FBSpedFilePartyTmp_BR::existsForAccountTypeAndNum(spedFileParty,
                                                                   fiscalEstablishment.RecId,
                                                                   this.getFBThirdPartyTypeFromAccountType(recordC500.FiscalDocumentAccountType),
                                                                   recordC500.FiscalDocumentAccountNum))
            {
                spedFileParty.insertFromFiscalDocument(recordC500);
            }

            taxSummarizer = FBFiscalDocumentTaxSummarizer_BR::construct(recordC500);

            spedRecord = this.newRecord('C500');

            spedRecord.addFieldString                   (recordC500.Direction == FiscalDocDirection_BR::Incoming ? '0' : '1', 1);
            spedRecord.addFieldString                   (int2str(recordC500.FiscalDocumentIssuer));
            spedRecord.addFieldString                   (spedFileParty.code());
            spedRecord.addFieldString                   (recordC500.Model);
            spedRecord.addFieldNumericFilledWithZeros   (enum2int(fbBookingPeriodFiscalDocument.FiscalSituation), 2);
            spedRecord.addFieldString                   (recordC500.FiscalDocumentSeries, 4);
            spedRecord.addFieldEmpty                    ();
            spedRecord.addFieldEmpty                    (); // COD_CONS
            spedRecord.addFieldNumeric                  (recordC500.FiscalDocumentNumber);
            spedRecord.addFieldDate                     (recordC500.FiscalDocumentDate);
            spedRecord.addFieldDate                     (recordC500.AccountingDate);
            spedRecord.addFieldNumeric                  (recordC500.TotalAmount, 2);
            spedRecord.addFieldNumeric                  (recordC500.TotalDiscountAmount, 2);
            spedRecord.addFieldNumeric                  (recordC500.TotalAmount, 2);
            spedRecord.addFieldNumeric                  (0, 2);
            spedRecord.addFieldEmpty                    ();
            spedRecord.addFieldNumeric                  (recordC500.TotalMarkupFreightAmount + recordC500.TotalMarkupInsuranceAmount + recordc500.TotalMarkupOtherAmount, 2);
            spedRecord.addFieldNumeric                  (taxSummarizer.getDocumentTaxBaseAmount(TaxType_BR::ICMS), 2);
            spedRecord.addFieldNumeric                  (taxSummarizer.getDocumentTaxAmount(TaxType_BR::ICMS), 2);
            spedRecord.addFieldNumeric                  (taxSummarizer.getDocumentTaxBaseAmount(TaxType_BR::ICMSST), 2);
            spedRecord.addFieldNumeric                  (taxSummarizer.getDocumentTaxAmount(TaxType_BR::ICMSST), 2);
            spedRecord.addFieldEmpty                    ();
            spedRecord.addFieldNumeric                  (taxSummarizer.getDocumentTaxAmount(TaxType_BR::PIS), 2);
            spedRecord.addFieldNumeric                  (taxSummarizer.getDocumentTaxAmount(TaxType_BR::COFINS), 2);
            spedRecord.addFieldEmpty                    ();
            spedRecord.addFieldEmpty                    (); // Field 27

            if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v113)
            {
                spedRecord.addFieldString(recordC500.AccessKey); // CHV_DOCe
                if (recordC500.Model == FiscalBooksConstants_BR::FiscalDocModel_66)
                {
                    spedRecord.addFieldString('1'); // FIN_DOCe

                    FiscalDocument_BR referencedFiscalDocument;
                    FiscalDocumentReferenced_BR fiscalDocumentReferenced;

                    select firstonly AccessKey from referencedFiscalDocument
                    exists join fiscalDocumentReferenced
                        where fiscalDocumentReferenced.FiscalDocument == recordC500.RecId
                            && fiscalDocumentReferenced.ReferencedFiscalDocument == referencedFiscalDocument.RecId;

                    spedRecord.addFieldString(referencedFiscalDocument.AccessKey); // CHV_DOCe_REF
                }
                else
                {
                    spedRecord.addFieldEmpty(); // FIN_DOCe
                    spedRecord.addFieldEmpty(); // CHV_DOCe_REF
                }

                if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v115)
                {
                    spedRecord.addFieldEmpty();
                    spedRecord.addFieldEmpty();
                }
                else
                {
                    spedRecord.addFieldString('1'); // IND_DEST
                    spedRecord.addFieldNumeric(this.cityIBGECode2Num(recordC500.fiscalEstablismentIBGECode(), recordC500.fiscalEstablishmentIsBrazil()), 0, 7);       // COD_MUN_DEST
                }

                FiscalDocumentLine_BR fiscalDocumentLine;

                select firstonly FinancialLedgerDimension from fiscalDocumentLine
                    where fiscalDocumentLine.FiscalDocument == recordC500.RecId
                        && fiscalDocumentLine.FinancialLedgerDimension != 0;

                spedFileMainAccount.insertFromMainAccount(MainAccount::find(DimensionAttributeValueCombination::find(fiscalDocumentLine.FinancialLedgerDimension).MainAccount));
                spedRecord.addFieldString(spedFileMainAccount.MainAccountId); // COD_CTA
            }

            if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v115)
            {
                spedRecord.addFieldEmpty();
                spedRecord.addFieldEmpty();
                spedRecord.addFieldEmpty();
                spedRecord.addFieldEmpty();
                spedRecord.addFieldEmpty();
                spedRecord.addFieldEmpty();
                spedRecord.addFieldEmpty();
            }

            this.addRecord(spedRecord);

            this.createRecordC590(spedRecord, taxSummarizer);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC590</Name>
				<Source><![CDATA[
    private void createRecordC590(FBSpedRecord_BR _parentRecord, FBFiscalDocumentTaxSummarizer_BR _taxSummarizer)
    {
        ListEnumerator                   le;
        FBFiscalDocumentTaxSummary_BR    taxSummary;
        FBSpedRecord_BR                  spedRecord;

        le = _taxSummarizer.getListOfSummaryData().getEnumerator();

        while (le.moveNext())
        {
            taxSummary = le.current();

            spedRecord = this.newRecord('C590');

            spedRecord.addFieldNumericFilledWithZeros   (taxSummary.parmICMSCST(), 3);                  // CST_ICMS
            spedRecord.addFieldNumericFilledWithZeros   (this.keepNumbers(taxSummary.parmCFOP()), 4);   // CFOP

            if (taxSummary.parmIcmsFiscalValue() == TaxFiscalValue_BR::WithCreditDebit)
            {
                spedRecord.addFieldNumeric              (taxSummary.parmIcmsTaxValue(), 2);             // ALIQ_ICMS
            }
            else
            {
                spedRecord.addFieldNumeric              (0, 2);                                         // ALIQ_ICMS
            }

            spedRecord.addFieldNumeric                  (taxSummary.parmOperationAmount(), 2);          // VL_OPR

            if (taxSummary.parmIcmsFiscalValue() == TaxFiscalValue_BR::WithCreditDebit)
            {
                spedRecord.addFieldNumeric              (taxSummary.parmIcmsBaseAmount(), 2);           // VL_BC_ICMS
                spedRecord.addFieldNumeric              (taxSummary.parmIcmsAmount(), 2);               // VL_ICMS
            }
            else
            {
                spedRecord.addFieldNumeric              (0, 2);                                         // VL_BC_ICMS
                spedRecord.addFieldNumeric              (0, 2);                                         // VL_ICMS
            }

            spedRecord.addFieldNumeric                  (taxSummary.parmIcmsStBaseAmount(), 2);         // VL_BC_ICMS_ST
            spedRecord.addFieldNumeric                  (taxSummary.parmIcmsStAmount(), 2);             // VL_ICMS_ST
            spedRecord.addFieldNumeric                  (taxSummary.parmIcmsBaseReductionAmount(), 2);  // VL_RED_BC
            spedRecord.addFieldEmpty();                                                                 // COD_OBS

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC800</Name>
				<Source><![CDATA[
    private void createRecordC800()
    {
        FiscalDocument_BR                   recordC800;
        FBBookingPeriodFiscalDocument_BR    fbBookingPeriodFiscalDocument;

        while select recordC800
        join FiscalSituation from fbBookingPeriodFiscalDocument
            where fbBookingPeriodFiscalDocument.FBBookingPeriod_BR == fbBookingPeriod.RecId
                && fbBookingPeriodFiscalDocument.FiscalDocument_BR == recordC800.RecId
                && fbBookingPeriodFiscalDocument.SpedFiscalRecord == FiscalBooksConstants_BR::SpedRecord_C800
        {
            FBFiscalDocumentTaxSummarizer_BR taxSummarizer = FBFiscalDocumentTaxSummarizer_BR::construct(recordC800);
            FBFiscalDocumentSituation_BR retailFiscalReceiptSituation = this.getFiscalSituationForFiscalReceipt(recordc800.Status);

            FBSpedRecord_BR spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C800);

            spedRecord.addFieldString(recordC800.Model, 2);                                                      // COD_MOD
            spedRecord.addFieldString(strRFix(int2str(enum2int(retailFiscalReceiptSituation)), 2, '0'), 2);      // COD_SIT
            spedRecord.addFieldNumeric(recordC800.FiscalDocumentNumber, 0, 6);                                   // NUM_CFE

            if (retailFiscalReceiptSituation == FBFiscalDocumentSituation_BR::Regular)
            {
                spedRecord.addFieldDate(recordC800.FiscalDocumentDate);                                        // DT_DOC
                spedRecord.addFieldNumeric(recordC800.TotalAmount, 2);                                         // VL_CFE
                spedRecord.addFieldNumeric(taxSummarizer.getDocumentTaxAmount(TaxType_BR::PIS), 2);            // VL_PIS
                spedRecord.addFieldNumeric(taxSummarizer.getDocumentTaxAmount(TaxType_BR::COFINS), 2);         // VL_COFINS

                if ((!FeatureStateProvider::isFeatureEnabled(FBEFDICMSIPI3_1_4Feature::instance()) || spedFiscalVersion < FBSPEDFiscalVersion_BR::v117)
                    && recordC800.ThirdPartyCNPJCPF)
                {
                    spedRecord.addFieldNumericFilledWithZeros(this.keepNumbers(recordC800.ThirdPartyCNPJCPF), 14);  // CNPJ_CPF
                }
                else
                {
                    spedRecord.addFieldEmpty();                                                                     // CNPJ_CPF
                }
            }
            else
            {
                spedRecord.addFieldEmpty();                                                                         // DT_DOC
                spedRecord.addFieldEmpty();                                                                         // VL_CFE
                spedRecord.addFieldEmpty();                                                                         // VL_PIS
                spedRecord.addFieldEmpty();                                                                         // VL_COFINS
                spedRecord.addFieldEmpty();                                                                         // CNPJ_CPF
            }

            spedRecord.addFieldString(recordC800.FiscalDocumentSeries, 9);                                       // NR_SAT
            spedRecord.addFieldString(recordC800.AccessKey, 44);                                                 // CHV_CFE

            if (retailFiscalReceiptSituation == FBFiscalDocumentSituation_BR::Regular)
            {
                spedRecord.addFieldNumeric(recordC800.TotalDiscountAmount, 2);                                    // VL_DESC
                spedRecord.addFieldNumeric(recordC800.TotalGoodsAmount, 2);                                       // VL_MERC
                spedRecord.addFieldNumeric(recordC800.TotalMarkupFreightAmount
                                            + recordC800.TotalMarkupInsuranceAmount
                                            + recordC800.TotalMarkupOtherAmount, 2);                              // VL_OUT_DA
                spedRecord.addFieldNumeric(taxSummarizer.getDocumentTaxAmount(TaxType_BR::ICMS), 2);              // VL_ICMS
                spedRecord.addFieldNumeric(0, 2);                                                                 // VL_PIS_ST
                spedRecord.addFieldNumeric(0, 2);                                                                 // VL_COFINS_ST
            }
            else
            {
                spedRecord.addFieldEmpty();                                                                       // VL_DESC
                spedRecord.addFieldEmpty();                                                                       // VL_MERC
                spedRecord.addFieldEmpty();                                                                       // VL_OUT_DA
                spedRecord.addFieldEmpty();                                                                       // VL_ICMS
                spedRecord.addFieldEmpty();                                                                       // VL_PIS_ST
                spedRecord.addFieldEmpty();                                                                       // VL_COFINS_ST
            }

            this.addRecord(spedRecord);

            if (retailFiscalReceiptSituation == FBFiscalDocumentSituation_BR::Regular)
            {
                this.createRecordC850(spedRecord, recordC800, taxSummarizer);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC850</Name>
				<Source><![CDATA[
    private void createRecordC850(FBSpedRecord_BR _parentRecord, FiscalDocument_BR _fiscalDocument, FBFiscalDocumentTaxSummarizer_BR _taxSummarizer)
    {
        ListEnumerator le = _taxSummarizer.getListOfSummaryData().getEnumerator();

        while (le.moveNext())
        {
            FBFiscalDocumentTaxSummary_BR taxSummary = le.current();

            FBSpedRecord_BR spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C850);

            spedRecord.addFieldNumericFilledWithZeros(taxSummary.parmICMSCST(), 3);                      // CST_ICMS
            spedRecord.addFieldNumericFilledWithZeros(this.formatKeepNumbersOnly(taxSummary.parmCFOP()), 4);  // CFOP

            if(taxSummary.parmIcmsFiscalValue() == TaxFiscalValue_BR::WithCreditDebit)
            {
                spedRecord.addFieldNumeric(taxSummary.parmIcmsTaxValue(), 2);                 // ALIQ_ICMS
                spedRecord.addFieldNumeric(taxSummary.parmOperationAmount(), 2);              // VL_OPR
                spedRecord.addFieldNumeric(taxSummary.parmIcmsBaseAmount(), 2);               // VL_BC_ICMS
                spedRecord.addFieldNumeric(taxSummary.parmIcmsAmount(), 2);                   // VL_ICMS
            }
            else
            {
                spedRecord.addFieldNumeric(0, 2);                                             // ALIQ_ICMS
                spedRecord.addFieldNumeric(taxSummary.parmOperationAmount(), 2);              // VL_OPR
                spedRecord.addFieldNumeric(0, 2);                                             // VL_BC_ICMS
                spedRecord.addFieldNumeric(0, 2);                                             // VL_ICMS
            }

            spedRecord.addFieldEmpty();                                                                     // COD_OBS

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC990</Name>
				<Source><![CDATA[
    private void createRecordC990()
    {
        FBSpedRecord_BR spedRecord;

        spedRecord = FBSpedRecord_BR::constructEmpty('C990');

        spedRecord.addFieldNumeric(spedFile.totalRecordsInBlock('C') + 2);

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordD100</Name>
				<Source><![CDATA[
    private void createRecordD100()
    {
        FiscalDocument_BR                   recordD100;
        FBBookingPeriodFiscalDocument_BR    fbBookingPeriodFiscalDocument;

        while select recordD100
            join FiscalSituation from fbBookingPeriodFiscalDocument
                where fbBookingPeriodFiscalDocument.FBBookingPeriod_BR == fbBookingPeriod.RecId
                    && fbBookingPeriodFiscalDocument.FiscalDocument_BR == recordD100.RecId
                    && fbBookingPeriodFiscalDocument.SpedFiscalRecord == FiscalBooksConstants_BR::SpedRecord_D100
        {
            if (!FBSpedFilePartyTmp_BR::existsForAccountTypeAndNum(spedFileParty,
                                                                   fiscalEstablishment.RecId,
                                                                   this.getFBThirdPartyTypeFromAccountType(recordD100.FiscalDocumentAccountType),
                                                                   recordD100.FiscalDocumentAccountNum))
            {
                spedFileParty.insertFromFiscalDocument(recordD100);
            }

            FBFiscalDocumentTaxSummarizer_BR taxSummarizer = FBFiscalDocumentTaxSummarizer_BR::construct(recordD100);

            FBSpedRecord_BR spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_D100);

            spedRecord.addFieldString(recordD100.Direction == FiscalDocDirection_BR::Incoming ? '0' : '1');                                                         // 2 IND_OPER
            spedRecord.addFieldString(int2str(recordD100.FiscalDocumentIssuer));                                                                                    // 3 IND_EMIT
            spedRecord.addFieldString(spedFileParty.code(), 60);                                                                                                    // 4 COD_PART
            spedRecord.addFieldString(recordD100.Model, 2);                                                                                                         // 5 COD_MOD
            spedRecord.addFieldNumericFilledWithZeros(enum2int(fbBookingPeriodFiscalDocument.FiscalSituation), 2);                                                  // 6 COD_SIT
            spedRecord.addFieldString(recordD100.FiscalDocumentSeries, 4);                                                                                          // 7 SER
            spedRecord.addFieldEmpty();                                                                                                                             // 8 SUB
            spedRecord.addFieldString(recordD100.FiscalDocumentNumber);                                                                                             // 9 NUM_DOC
            spedRecord.addFieldString(recordD100.AccessKey);                                                                                                        // 10 CHV_CTE
            spedRecord.addFieldDate(recordD100.FiscalDocumentDate);                                                                                                 // 11 DT_DOC
            spedRecord.addFieldDate(recordD100.AccountingDate);                                                                                                     // 12 DT_A_P

            if (recordD100.Model == FiscalBooksConstants_BR::FiscalDocModel_57 || recordD100.Model == FiscalBooksConstants_BR::FiscalDocModel_67)
            {
                spedRecord.addFieldNumeric(enum2int(recordD100.TypeOfCTe), 0, 1);                                                                                   // 13 TP_CT-e
            }
            else
            {
                spedRecord.addFieldEmpty();                                                                                                                         // 13 TP_CT-e
            }

            spedRecord.addFieldEmpty();                                                                                                                             // 14 CHV_CTE_REF
            spedRecord.addFieldNumeric(recordD100.TotalAmount, 2);                                                                                                  // 15 VL_DOC
            spedRecord.addFieldNumeric(recordD100.TotalDiscountAmount, 2);                                                                                          // 16 VL_DESC
            spedRecord.addFieldString(this.getFreightIdentification(recordD100.FreightChargeTerms));                                                                // 17 IND_FRT
            spedRecord.addFieldNumeric(recordD100.TotalServicesAmount, 2);                                                                                          // 18 VL_SERV
            spedRecord.addFieldNumeric(taxSummarizer.getDocumentTaxBaseAmount(TaxType_BR::ICMS), 2);                                                                // 19 VL_BC_ICMS
            spedRecord.addFieldNumeric(taxSummarizer.getDocumentTaxAmount(TaxType_BR::ICMS), 2);                                                                    // 20 VL_ICMS
            spedRecord.addFieldEmpty();                                                                                                                             // 21 VL_NT
            FiscalDocumentTextListParmData_BR listOFLegalTexts = recordD100.getHeaderLegalTexts();

            if (listOFLegalTexts.moveNext())
            {
                FiscalDocumentTextParmData_BR fiscalDocumentTextParmData = listOFLegalTexts.getCurrent();

                Notes notes = fiscalDocumentTextParmData.parmNotes();
                int legalTextLength = strLen(notes);
                for (int i = 0; i < legalTextLength; i += MaxLegalTextLength)
                {
                    String255 legalText = subStr(notes, i + 1, i + MaxLegalTextLength);

                    spedFileText = FBSpedFileTextTmp_BR::findByDescription(spedFileText, fiscalEstablishment.RecId, legalText);

                    if (!spedFileText)
                    {
                        spedFileText.insertFromTextDescription(fiscalEstablishment.RecId, legalText);
                    }

                    spedRecord.addFieldString(int2str(spedFiletext.TextId), 6);                                                                                     // 22 COD_INF
                    break;
                }
            }
            else
            {
                spedRecord.addFieldEmpty();                                                                                                                         // 22 COD_INF
            }

            spedRecord.addFieldString('');                                                                                                                          // 23 COD_CTA

            if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v111)
            {
                if (recordD100.Model == FiscalBooksConstants_BR::FiscalDocModel_57 || recordD100.Model == FiscalBooksConstants_BR::FiscalDocModel_67)
                {
                    FiscalDocument_BR referencedFiscalDocument;
                    FiscalDocumentReferenced_BR fiscalDocumentReferenced;

                    select firstonly ThirdPartyPostalAddress, FiscalDocumentDateTime, RecId, ImportDeclaration, Direction from referencedFiscalDocument
                        exists join fiscalDocumentReferenced
                            where fiscalDocumentReferenced.FiscalDocument == recordD100.RecId
                                && fiscalDocumentReferenced.ReferencedFiscalDocument == referencedFiscalDocument.RecId;

                    if (referencedFiscalDocument.RecId)
                    {
                        if (referencedFiscalDocument.Direction == FiscalDocDirection_BR::Incoming)
                        {
                            if (referencedFiscalDocument.ImportDeclaration)
                            {
                                PurchImportDeclaration_BR purchImportDeclaration_BR = PurchImportDeclaration_BR::find(referencedFiscalDocument.ImportDeclaration);

                                LogisticsAddressCity logisticsAddressCity;

                                select firstonly IBGECode_BR from logisticsAddressCity
                                    where logisticsAddressCity.Name == purchImportDeclaration_BR.Port;

                                spedRecord.addFieldNumeric(this.cityIBGECode2Num(logisticsAddressCity.IBGECode_BR, true));
                            }
                            else
                            {
                                spedRecord.addFieldNumeric(this.cityIBGECode2Num(
                                    referencedFiscalDocument.thirdPartyIBGECode(),
                                    referencedFiscalDocument.thirdPartyIsBrazil()), 0, 7); // 24 COD_MUN_ORIG
                            }

                            spedRecord.addFieldNumeric(this.cityIBGECode2Num(
                                recordD100.fiscalEstablismentIBGECode(),
                                recordD100.fiscalEstablishmentIsBrazil()), 0, 7);          // 25 COD_MUN_DEST
                        }
                        else
                        {
                            spedRecord.addFieldNumeric(this.cityIBGECode2Num(
                                recordD100.fiscalEstablismentIBGECode(),
                                recordD100.fiscalEstablishmentIsBrazil()), 0, 7);            // 24 COD_MUN_ORIG
                            spedRecord.addFieldNumeric(this.cityIBGECode2Num(
                                referencedFiscalDocument.thirdPartyIBGECode(),
                                referencedFiscalDocument.thirdPartyIsBrazil()), 0, 7);       // 25 COD_MUN_DEST

                        }
                    }
                    else
                    {

                        spedRecord.addFieldNumeric(this.cityIBGECode2Num(
                            recordD100.thirdPartyIBGECode(),
                            recordD100.thirdPartyIsBrazil()), 0, 7);                         // 24 COD_MUN_ORIG
                        spedRecord.addFieldNumeric(this.cityIBGECode2Num(
                            recordD100.fiscalEstablismentIBGECode(),
                            recordD100.fiscalEstablishmentIsBrazil()), 0, 7);                // 25 COD_MUN_DEST
                    }
                }
                else
                {
                    spedRecord.addFieldEmpty();                                                                                                                       // 24 COD_MUN_ORIG
                    spedRecord.addFieldEmpty();                                                                                                                       // 25 COD_MUN_DEST
                }
            }

            this.addRecord(spedRecord);

            this.createRecordD190(spedRecord, taxSummarizer);

            this.createRecordD195(FBSpedFiscalMethodParameters_BR::construct()
                                    .withParentRecord(spedRecord)
                                    .withFiscalDocument(recordD100));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordD190</Name>
				<Source><![CDATA[
    private void createRecordD190(FBSpedRecord_BR _parentRecord, FBFiscalDocumentTaxSummarizer_BR _taxSummarizer)
    {
        ListEnumerator                   le;
        FBFiscalDocumentTaxSummary_BR    taxSummary;
        FBSpedRecord_BR                  spedRecord;

        le = _taxSummarizer.getListOfSummaryData().getEnumerator();

        while (le.moveNext())
        {
            taxSummary = le.current();

            spedRecord = this.newRecord('D190');

            spedRecord.addFieldNumericFilledWithZeros   (taxSummary.parmICMSCST(), 3);                      // CST_ICMS
            spedRecord.addFieldNumericFilledWithZeros   (this.formatKeepNumbersOnly(taxSummary.parmCFOP()), 4);  // CFOP
            spedRecord.addFieldNumeric                  (taxSummary.parmIcmsTaxValue(), 2);                 // ALIQ_ICMS
            spedRecord.addFieldNumeric                  (taxSummary.parmOperationAmount(), 2);              // VL_OPR
            spedRecord.addFieldNumeric                  (taxSummary.parmIcmsBaseAmount(), 2);               // VL_BC_ICMS
            spedRecord.addFieldNumeric                  (taxSummary.parmIcmsAmount(), 2);                   // VL_ICMS
            spedRecord.addFieldNumeric                  (taxSummary.parmIcmsBaseReductionAmount(), 2);      // VL_RED_BC
            spedRecord.addFieldEmpty                    ();

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordD195</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record D195 in SPED fiscal report.
    /// </summary>
    /// <param name = "_parameters">A contract to pass the needed parameters. An instance of <c>FBSpedFiscalMethodParameters_BR</c> class.</param>
    protected void createRecordD195(FBSpedFiscalMethodParameters_BR _parameters)
    {
        FBSpedRecord_BR                 spedRecord;
        FBFiscalDocumentAdjustment_BR   fiscalDocumentAdjustment;
        FiscalDocumentLine_BR           fiscalDocumentLine;
        FiscalDocumentTaxTrans_BR       fiscalDocumentTaxTrans;
        FBObservationCodeTable_BR       observationCodeTable;
        FBFiscalDocumentAdjustmentCodeICMS_BR fiscalDocumentAdjustmentCode;

        while select Description, ObservationCode
            from observationCodeTable
            group by observationCodeTable.RecId, observationCodeTable.ObservationCode, observationCodeTable.Description, fiscalDocumentLine.ItemId, fiscalDocumentTaxTrans.RecId
                join RecId
                    from fiscalDocumentAdjustment
                    where fiscalDocumentAdjustment.FBObservationCodeTable_BR == observationCodeTable.RecId
                join fiscalDocumentTaxTrans
                    where fiscalDocumentTaxTrans.RecId == fiscalDocumentAdjustment.FiscalDocumentTaxTrans_BR
                join fiscalDocumentLine
                    where fiscalDocumentLine.RecId == fiscalDocumentTaxTrans.FiscalDocumentLine
                        && fiscalDocumentLine.FiscalDocument == _parameters.parmFiscalDocument().RecId
                exists join fiscalDocumentAdjustmentCode
                    where fiscalDocumentAdjustmentCode.RecId == fiscalDocumentAdjustment.FBFiscalDocumentAdjustmentCodeICMS_BR
                        && !fiscalDocumentAdjustmentCode.Table52
        {
            if (!FBSpedFileObservationCodeTmp_BR::existsForObservationCode(spedFileObservationCode, observationCodeTable.ObservationCode))
            {
                spedFileObservationCode.insertFromObservationCode(observationCodeTable.ObservationCode, observationCodeTable.Description);
            }

            spedRecord = this.newRecord('D195');

            spedRecord.addFieldString   (observationCodeTable.ObservationCode, 6); // COD_OBS
            spedRecord.addFieldString   (observationCodeTable.Description, 255); // TXT_COMPL

            this.addChildRecord(_parameters.parmParentRecord(), spedRecord);

            this.createRecordD197(FBSpedFiscalMethodParameters_BR::construct()
                                    .withParentRecord(spedRecord)
                                    .withItemId(fiscalDocumentLine.ItemId)
                                    .withFiscalDocumentTaxTrans(fiscalDocumentTaxTrans)
                                    .withFBObservationCodeRecId(observationCodeTable.RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordD197</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record D197 in SPED fiscal report.
    /// </summary>
    /// <param name = "_parameters">A contract to pass the needed parameters. An instance of <c>FBSpedFiscalMethodParameters_BR</c> class.</param>
    protected void createRecordD197(FBSpedFiscalMethodParameters_BR _parameters)
    {
        FBSpedRecord_BR                 spedRecord;
        FBFiscalDocumentAdjustment_BR   fiscalDocumentAdjustment;
        FBFiscalDocumentAdjustmentCodeICMS_BR fiscalDocumentAdjustmentCode;

        while select *
            from fiscalDocumentAdjustment
                where fiscalDocumentAdjustment.FBObservationCodeTable_BR == _parameters.parmFBObservationCodeRecId()
                    && fiscalDocumentAdjustment.IsCancelled == false
                    && fiscalDocumentAdjustment.FiscalDocumentTaxTrans_BR == _parameters.parmFiscalDocumentTaxTrans().RecId
            exists join fiscalDocumentAdjustmentCode
                where fiscalDocumentAdjustmentCode.RecId == fiscalDocumentAdjustment.FBFiscalDocumentAdjustmentCodeICMS_BR
                    && !fiscalDocumentAdjustmentCode.Table52
        {
            spedRecord = this.newRecord('D197');

            spedRecord.addFieldString   (fiscalDocumentAdjustment.fiscalDocumentAdjustmentCodeICMS().SpedAdjustmentCode, 10); // COD_AJ
            spedRecord.addFieldString   (fiscalDocumentAdjustment.ComplementaryDescription); // DESCR_COMPL_AJ
            spedRecord.addFieldEmpty    (); // COD_ITEM
            spedRecord.addFieldNumeric  (fiscalDocumentAdjustment.TaxBaseAmount, 2); // VL_BC_ICMS
            spedRecord.addFieldNumeric  (fiscalDocumentAdjustment.TaxValue, 2, 6); // ALIQ_ICMS
            spedRecord.addFieldNumeric  (fiscalDocumentAdjustment.TaxAmount, 2); // VL_ICMS
            spedRecord.addFieldNumeric  (fiscalDocumentAdjustment.TaxAmountOther, 2); // VL_OUTROS

            this.addChildRecord(_parameters.parmParentRecord(), spedRecord);

            isCreatedD197 = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordD500</Name>
				<Source><![CDATA[
    private void createRecordD500()
    {
        FBSpedRecord_BR                     spedRecord;
        FiscalDocument_BR                   fiscalDocument;
        FBBookingPeriodFiscalDocument_BR    fbBookingPeriodFiscalDocument;
        FiscalDocumentTextParmData_BR       fiscalDocumentTextParmData;
        FiscalDocumentTextListParmData_BR   listOFLegalTexts;
        FBFiscalDocumentTaxSummarizer_BR    taxSummarizer;

        while select fiscalDocument
            join FiscalSituation from fbBookingPeriodFiscalDocument
                where fbBookingPeriodFiscalDocument.FBBookingPeriod_BR == fbBookingPeriod.RecId
                    && fbBookingPeriodFiscalDocument.FiscalDocument_BR == fiscalDocument.RecId
                    && fbBookingPeriodFiscalDocument.SpedFiscalRecord == FiscalBooksConstants_BR::SpedRecord_D500
        {
            taxSummarizer = FBFiscalDocumentTaxSummarizer_BR::construct(fiscalDocument);

            spedRecord = this.newRecord('D500');

            spedRecord.addFieldString(fiscalDocument.Direction == FiscalDocDirection_BR::Incoming ? '0' : '1', 1);
            spedRecord.addFieldString(int2str(fiscalDocument.FiscalDocumentIssuer), 1);

            if (fbBookingPeriodFiscalDocument.FiscalSituation != FBFiscalDocumentSituation_BR::Cancelled)
            {
                if (!FBSpedFilePartyTmp_BR::existsForAccountTypeAndNum(spedFileParty,
                                                                       fiscalEstablishment.RecId,
                                                                       this.getFBThirdPartyTypeFromAccountType(fiscalDocument.FiscalDocumentAccountType),
                                                                       fiscalDocument.FiscalDocumentAccountNum))
                {
                    spedFileParty.insertFromFiscalDocument(fiscalDocument);
                }
                else
                {
                    select firstonly spedFileParty
                        where spedFileParty.PartyType == this.getFBThirdPartyTypeFromAccountType(fiscalDocument.FiscalDocumentAccountType)
                            && spedFileParty.AccountNum == fiscalDocument.FiscalDocumentAccountNum;
                }

                spedRecord.addFieldString(spedFileParty.code(), 60);
            }
            else
            {
                spedRecord.addFieldEmpty();
            }

            spedRecord.addFieldString   (fiscalDocument.Model, 2);
            spedRecord.addFieldString   (strRFix(int2str(enum2int(fbBookingPeriodFiscalDocument.FiscalSituation)), 2, '0'), 2);
            spedRecord.addFieldString   (fiscalDocument.FiscalDocumentSeries, 3);
            spedRecord.addFieldEmpty    ();
            spedRecord.addFieldNumeric  (fiscalDocument.FiscalDocumentNumber);
            spedRecord.addFieldDate     (fiscalDocument.FiscalDocumentDate);

            if (fbBookingPeriodFiscalDocument.FiscalSituation != FBFiscalDocumentSituation_BR::Cancelled)
            {
                spedRecord.addFieldDate                     (fiscalDocument.AccountingDate);
                spedRecord.addFieldNumeric                  (fiscaldocument.TotalAmount, 2);
                spedRecord.addFieldNumeric                  (fiscalDocument.TotalDiscountAmount, 2);
                spedRecord.addFieldNumeric                  (fiscalDocument.TotalServicesAmount, 2);
                spedRecord.addFieldNumeric                  (0,2);
                spedRecord.addFieldNumeric                  (0,2);
                spedRecord.addFieldNumeric                  (fiscalDocument.TotalMarkupFreightAmount +
                                                                fiscalDocument.TotalMarkupInsuranceAmount +
                                                                fiscalDocument.TotalMarkupOtherAmount +
                                                                fiscalDocument.TotalGoodsAmount, 2);

                spedRecord.addFieldNumeric                  (taxSummarizer.getDocumentTaxBaseAmount(TaxType_BR::ICMS), 2);
                spedRecord.addFieldNumeric                  (taxSummarizer.getDocumentTaxAmount(TaxType_BR::ICMS), 2);

                listOFLegalTexts = fiscalDocument.getLegalTexts(DocuRestriction::External);
                if (listOFLegalTexts.moveNext())
                {
                    fiscalDocumentTextParmData = listOFLegalTexts.getCurrent();
                    spedRecord.addFieldString                   (fiscalDocumentTextParmData.parmTextID(), 6);
                }
                else
                {
                    spedRecord.addFieldEmpty                    ();
                }

                spedRecord.addFieldNumeric                  (taxSummarizer.getDocumentTaxAmount(TaxType_BR::PIS), 2);
                spedRecord.addFieldNumeric                  (taxSummarizer.getDocumentTaxAmount(TaxType_BR::COFINS), 2);

                spedRecord.addFieldEmpty                    ();
                spedRecord.addFieldEmpty                    ();
            }
            else
            {
                spedRecord.addFieldEmptyNTimes(14);
            }

            this.addRecord(spedRecord);

            this.createRecordD590(spedRecord, taxSummarizer);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordD590</Name>
				<Source><![CDATA[
    private void createRecordD590(FBSpedRecord_BR _parentRecord, FBFiscalDocumentTaxSummarizer_BR _taxSummarizer)
    {
        ListEnumerator                   le;
        FBFiscalDocumentTaxSummary_BR    taxSummary;
        FBSpedRecord_BR                  spedRecord;

        le = _taxSummarizer.getListOfSummaryData().getEnumerator();

        while (le.moveNext())
        {
            taxSummary = le.current();

            spedRecord = this.newRecord('D590');

            spedRecord.addFieldNumericFilledWithZeros   (taxSummary.parmICMSCST(), 3);                      // CST_ICMS
            spedRecord.addFieldNumericFilledWithZeros   (this.formatKeepNumbersOnly(taxSummary.parmCFOP()), 4);  // CFOP
            spedRecord.addFieldNumeric                  (taxSummary.parmIcmsTaxValue(), 2);                 // ALIQ_ICMS
            spedRecord.addFieldNumeric                  (taxSummary.parmOperationAmount(), 2);              // VL_OPR
            spedRecord.addFieldNumeric                  (taxSummary.parmIcmsBaseAmount(), 2);               // VL_BC_ICMS
            spedRecord.addFieldNumeric                  (taxSummary.parmIcmsAmount(), 2);                   // VL_ICMS
            spedRecord.addFieldNumeric                  (0,2);                                              // VL_BC_ICMS_UF
            spedRecord.addFieldNumeric                  (0,2);                                              // VL_ICMS_UF
            spedRecord.addFieldNumeric                  (taxSummary.parmIcmsBaseReductionAmount(), 2);      // VL_RED_BC
            spedRecord.addFieldEmpty();

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordD990</Name>
				<Source><![CDATA[
    private void createRecordD990()
    {
        FBSpedRecord_BR spedRecord;

        spedRecord = FBSpedRecord_BR::constructEmpty('D990');

        spedRecord.addFieldNumeric(spedFile.totalRecordsInBlock('D') + 2);

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordE100</Name>
				<Source><![CDATA[
    private void createRecordE100()
    {
        FBSpedRecord_BR     spedRecord;
        FBTaxAssessment_BR  taxAssessmentIcms;

        while select taxAssessmentIcms
            where taxAssessmentIcms.FBBookingPeriod_BR == fbBookingPeriod.RecId
                && taxAssessmentIcms.TaxType == TaxType_BR::ICMS
        {
            spedRecord = this.newRecord('E100');
            spedRecord.addFieldDate (taxAssessmentIcms.FromDate);
            spedRecord.addFieldDate (taxAssessmentIcms.ToDate);

            this.addRecord(spedRecord);

            this.createRecordE110(taxAssessmentIcms);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordE110</Name>
				<Source><![CDATA[
    private void createRecordE110(FBTaxAssessment_BR _taxAssessmentIcms)
    {
        FBSpedRecord_BR                     spedRecord;
        FBTaxAssessmentCalculatorICMS_BR    taxAssessmentCalculatorIcms;
        AmountMST                           documentDebit, documentDebitAdjustment, generalDebitAdjustment, creditReversal;
        AmountMST                           documentCredit, documentCreditAdjustment, generalCreditAdjustment, debitReversal;
        AmountMST                           creditBalanceFromPreviousPeriod, taxDeduction, creditBalanceToTransport, specialPurposeDebit;
        AmountMST                           assessedBalance, taxAmountToPay;

        taxAssessmentCalculatorIcms = _taxAssessmentIcms.getCalculator();
        taxAssessmentCalculatorIcms.calculate();

        documentDebit            = taxAssessmentCalculatorIcms.getDebits();
        documentDebitAdjustment  = taxAssessmentCalculatorIcms.getDebitsByDocumentAdjustment();
        generalDebitAdjustment   = taxAssessmentCalculatorIcms.getDebitsByGeneralAdjustment();
        creditReversal           = taxAssessmentCalculatorIcms.getCreditReversalByGeneralAdjustment() + taxAssessmentCalculatorIcms.getCreditReversalByDocumentAdjustment();
        taxDeduction             = taxAssessmentCalculatorIcms.getDeductions();

        documentCredit           = taxAssessmentCalculatorIcms.getCredits();
        documentCreditAdjustment = taxAssessmentCalculatorIcms.getCreditsByDocumentAdjustment();
        generalCreditAdjustment  = taxAssessmentCalculatorIcms.getCreditsByGeneralAdjustment();
        debitReversal            = taxAssessmentCalculatorIcms.getDebitReversalByGeneralAdjustment() + taxAssessmentCalculatorIcms.getDebitReversalByDocumentAdjustment();
        specialPurposeDebit      = taxAssessmentCalculatorIcms.getSpecialDebits();
        assessedBalance          = taxAssessmentCalculatorIcms.getBalanceDue();
        creditBalanceToTransport = taxAssessmentCalculatorIcms.getCreditBalanceAtEndOfThePeriod();
        taxAmountToPay           = taxAssessmentCalculatorIcms.getTaxAmountToPay();

        creditBalanceFromPreviousPeriod = taxAssessmentCalculatorIcms.getCreditBalanceFromPreviousPeriod();

        spedRecord = this.newRecord('E110'); // REG

        spedRecord.addFieldNumeric  (documentDebit, 2); // VL_TOT_DEBITOS
        spedRecord.addFieldNumeric  (documentDebitAdjustment, 2); // VL_AJ_DEBITOS
        spedRecord.addFieldNumeric  (generalDebitAdjustment, 2); // VL_TOT_AJ_DEBITOS
        spedRecord.addFieldNumeric  (creditReversal, 2); // VL_ESTORNOS_CRED
        spedRecord.addFieldNumeric  (documentCredit, 2); // VL_TOT_CREDITOS
        spedRecord.addFieldNumeric  (documentCreditAdjustment, 2); // VL_AJ_CREDITOS
        spedRecord.addFieldNumeric  (generalCreditAdjustment, 2); // VL_TOT_AJ_CREDITOS
        spedRecord.addFieldNumeric  (debitReversal, 2); // VL_ESTORNOS_DEB
        spedRecord.addFieldNumeric  (creditBalanceFromPreviousPeriod, 2); // VL_SLD_CREDOR_ANT
        spedRecord.addFieldNumeric  (assessedBalance, 2); // VL_SLD_APURADO
        spedRecord.addFieldNumeric  (taxDeduction, 2); // VL_TOT_DED
        spedRecord.addFieldNumeric  (taxAmountToPay, 2); // VL_ICMS_RECOLHER
        spedRecord.addFieldNumeric  (creditBalanceToTransport, 2); // VL_SLD_CREDOR_TRANSPORTAR
        spedRecord.addFieldNumeric  (specialPurposeDebit, 2); // DEB_ESP

        this.addRecord(spedRecord);

        this.createRecordE111(_taxAssessmentIcms);
        if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v112)
        {
            this.createRecordE115(FBSpedFiscalMethodParameters_BR::construct()
                                    .withTaxAssessment(_taxAssessmentIcms));
        }

        this.createRecordE116(_taxAssessmentIcms);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordE111</Name>
				<Source><![CDATA[
    private void createRecordE111(FBTaxAssessment_BR _taxAssessmentIcms)
    {
        FBSpedRecord_BR                 spedRecord;
        FBTaxTrans_BR                   fbTaxTrans;
        FBTaxAssessmentAdjustment_BR    taxAssessmentAdjustment;
        FBGeneralAdjustmentCodeIcms_BR  generalAdjustmentCode;

        while select TaxAmount, fbTaxAssessmentAdjustment_BR
            from fbTaxTrans
                where fbTaxTrans.fbTaxAssessment_BR == _taxAssessmentIcms.RecId
                    && fbTaxTrans.TaxType == TaxType_BR::ICMS
                    && fbTaxTrans.fbTaxAssessmentAdjustment_BR != 0
                    && (fbTaxTrans.Classification == FBTaxAssessmentClassification_BR::GeneralDebitAdjustment
                        || fbTaxTrans.Classification == FBTaxAssessmentClassification_BR::GeneralCreditReversalAdjustment
                        || fbTaxTrans.Classification == FBTaxAssessmentClassification_BR::DocumentCreditReversalAdjustment
                        || fbTaxTrans.Classification == FBTaxAssessmentClassification_BR::GeneralCreditAdjustment
                        || fbTaxTrans.Classification == FBTaxAssessmentClassification_BR::GeneralDebitReversalAdjustment
                        || fbTaxTrans.Classification == FBTaxAssessmentClassification_BR::DocumentDebitReversalAdjustment
                        || fbTaxTrans.Classification == FBTaxAssessmentClassification_BR::TaxDeduction
                        || fbTaxTrans.Classification == FBTaxAssessmentClassification_BR::SpecialPurposeDebit)
            join ComplementaryDescription, FiscalDocumentTaxTrans_BR
                from taxAssessmentAdjustment
                    where taxAssessmentAdjustment.RecId == fbTaxTrans.fbTaxAssessmentAdjustment_BR
                        && taxAssessmentAdjustment.IsCancelled == false
            join SpedAdjustmentCode
                from generalAdjustmentCode
                    where generalAdjustmentCode.RecId == taxAssessmentAdjustment.FBGeneralAdjustmentCode_BR
        {
            spedRecord =  this.newRecord('E111');

            spedRecord.addFieldString       (generalAdjustmentCode.SpedAdjustmentCode, 8);
            spedRecord.addFieldString       (taxAssessmentAdjustment.ComplementaryDescription);
            spedRecord.addFieldNumeric      (fbTaxTrans.TaxAmount, 2);

            this.addRecord(spedRecord);

            if (taxAssessmentAdjustment.FiscalDocumentTaxTrans_BR != 0 && spedFiscalVersion >= FBSPEDFiscalVersion_BR::v112)
            {
                this.createRecordE113(spedRecord, taxAssessmentAdjustment.FiscalDocumentTaxTrans_BR, fbTaxTrans.TaxAmount);
            }

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordE113</Name>
				<Source><![CDATA[
    private void createRecordE113(FBSpedRecord_BR _parentRecord, RefRecId _fiscalDocumentTaxTransRecId , AmountMST _taxAmount)
    {
        FBSpedRecord_BR                         spedRecord;
        FiscalDocument_BR                       fiscalDocument;
        FiscalDocumentLine_BR                   fiscalDocumentLine;
        FiscalDocumentTaxTrans_BR               fiscalDocumentTaxTrans;
        
        select firstOnly
            AccountingDate,
            AccessKey,
            Model,
            FiscalDocumentSeries,
            FiscalDocumentNumber,
            FiscalEstablishment,
            FiscalDocumentAccountType,
            FiscalDocumentAccountNum,
            FiscalDocumentIssuer,
            RecId
        from fiscalDocument
        join ItemId from fiscalDocumentLine
            where fiscalDocumentLine.FiscalDocument == fiscalDocument.RecId
        exists join fiscalDocumentTaxTrans
            where fiscalDocumentTaxTrans.FiscalDocumentLine == fiscalDocumentLine.RecId
                    && fiscalDocumentTaxTrans.RecId == _fiscalDocumentTaxTransRecId;
        
        spedRecord =  this.newRecord('E113');
        
        if (fiscalDocument.Model != FiscalBooksConstants_BR::FiscalDocModel_65)
        {
            select firstOnly spedFileParty
                where spedFileParty.PartyType == this.getFBThirdPartyTypeFromAccountType(fiscalDocument.FiscalDocumentAccountType)
                    && spedFileParty.AccountNum == fiscalDocument.FiscalDocumentAccountNum;
            
            spedRecord.addFieldString(spedFileParty.code(), 60);                // COD_PART
        }
        else
        {
            spedRecord.addFieldEmpty();                                         // COD_PART
        }
        
        spedRecord.addFieldString   (fiscalDocument.Model, 2);                  //COD_MOD
        spedRecord.addFieldString   (fiscalDocument.FiscalDocumentSeries, 3);   //SER
        spedRecord.addFieldEmpty    ();                                         //SUB
        spedRecord.addFieldNumeric  (fiscalDocument.FiscalDocumentNumber);      //NUM_DOC
        
        spedRecord.addFieldDate     (fiscalDocument.AccountingDate);            //DT_DOC
        
        if (this.isElectronicFiscalDocFromOwnEstab(fiscalDocument))
        {
            spedRecord.addFieldEmpty();                                         //COD_ITEM
        }
        else
        {
            spedRecord.addFieldString   (fiscalDocumentLine.ItemId, 60);        //COD_ITEM
        }
        
        spedRecord.addFieldNumeric  (_taxAmount, 2);                            //VL_AJ_ITEM
        spedRecord.addFieldString   (fiscalDocument.AccessKey);                 //CHV_DOCe
        
        this.addChildRecord(_parentRecord, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initContragentMap</Name>
				<Source><![CDATA[
    private NoYes initContragentMap()
    {
        FBBookingPeriodFiscalDocument_BR fBBookingPeriodFiscalDocument_BR;
        FiscalDocument_BR fiscalDocument_BR;
        CustInvoiceJour custInvoiceJour;
        CustTrans custTrans;
        CustTrans custTransPaym;
        CustSettlement custSettlement;
        CustPaymModeTable custPaymModeTable;
        FBVendToPaymMode_BR fBVendToPaymMode_BR;
        
        container mapValues;
        
        contragentMap = new Map(Types::String, Types::Container);
        
        while select AccountVend from fBVendToPaymMode_BR
            join RecId, PaymentMethod_BR from custPaymModeTable
                where fBVendToPaymMode_BR.PaymMode == custPaymModeTable.PaymMode
            join AmountMST from custTransPaym
                where custPaymModeTable.PaymMode == custTransPaym.PaymMode
                    && (custPaymModeTable.PaymentMethod_BR == EFDocPaymentMethod_BR::CreditCard
                    || custPaymModeTable.PaymentMethod_BR == EFDocPaymentMethod_BR::DebitCard)
            exists join custSettlement
                where custTransPaym.RecId == custSettlement.OffsetRecId
                    && custTransPaym.dataAreaId == custSettlement.OffsetCompany
                    && custTransPaym.AccountNum == custSettlement.AccountNum
            exists join custTrans
                where custSettlement.AccountNum == custTrans.AccountNum
                    && custSettlement.TransRecId == custTrans.RecId
                    && custSettlement.TransCompany == custTrans.DataAreaId
                    && custSettlement.CanBeReversed == NoYes::Yes
            exists join custInvoiceJour
                where custTrans.AccountNum == custInvoiceJour.InvoiceAccount
                    && custTrans.Invoice == custInvoiceJour.InvoiceId
                    && custTrans.TransDate == custInvoiceJour.InvoiceDate
                    && custTrans.Voucher == custInvoiceJour.LedgerVoucher
            exists join fiscalDocument_BR
                where fiscalDocument_BR.RefRecId == custInvoiceJour.RecId
                    && fiscalDocument_BR.RefTableId == custInvoiceJour.TableId
                    && (custInvoiceJour.InvoiceDate >= fbBookingPeriod.periodFrom()
                        || custInvoiceJour.InvoiceDate <= fbBookingPeriod.periodTo())
            exists join fBBookingPeriodFiscalDocument_BR
                where fiscalDocument_BR.RecId == fBBookingPeriodFiscalDocument_BR.FiscalDocument_BR
                    && fBBookingPeriodFiscalDocument_BR.FBBookingPeriod_BR == fbBookingPeriod.RecId
        {
            mapValues = conNull();
            
            if (contragentMap.exists(fBVendToPaymMode_BR.AccountVend))
            {
                mapValues = contragentMap.lookup(fBVendToPaymMode_BR.AccountVend);
            }
            
            if (custPaymModeTable.PaymentMethod_BR == EFDocPaymentMethod_BR::CreditCard)
            {
                contragentMap.insert(fBVendToPaymMode_BR.AccountVend, [conPeek(mapValues, 1) + abs(custTransPaym.AmountMST), conPeek(mapValues, 2)]);
            }
            else
            {
                contragentMap.insert(fBVendToPaymMode_BR.AccountVend, [conPeek(mapValues, 1), conPeek(mapValues, 2) + abs(custTransPaym.AmountMST)]);
            }
        }
        
        return contragentMap.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordE116</Name>
				<Source><![CDATA[
    private void createRecordE116(FBTaxAssessment_BR _taxAssessmentIcms)
    {
        FBSpedRecord_BR                     spedRecord;
        FBTaxAssessmentPayment_BR           taxAssessmentPayment;
        str 1                               agency;

        while select taxAssessmentPayment
                where taxAssessmentPayment.FBTaxAssessment_BR == _taxAssessmentIcms.RecId
                &&  taxAssessmentPayment.Reversed           == NoYes::No
        {
            spedRecord = this.newRecord('E116'); // REG

            spedRecord.addFieldString   (taxAssessmentPayment.ICMSObligationCode, 3); // COD_OR
            spedRecord.addFieldNumeric  (taxAssessmentPayment.TaxAmountToPay, 2); // VL_OR
            spedRecord.addFieldDate     (taxAssessmentPayment.DueDate); // DT_VCTO
            spedRecord.addFieldString   (taxAssessmentPayment.RevenueCode); // COD_REC
            spedRecord.addFieldString   (taxAssessmentPayment.ReferencedProcessNumber); // NUM_PROC
            spedRecord.addFieldString   (this.getReferencedProcessAgencyValue(taxAssessmentPayment.ReferencedProcessAgency)); // IND_PROC
            spedRecord.addFieldString   (taxAssessmentPayment.ReferencedProcessDescription); // PROC
            spedRecord.addFieldString   (taxAssessmentPayment.Description); // TXT_COMPL
            spedRecord.addFieldString   (this.getFormatedIcmsPaymentMonthRef(taxAssessmentPayment.ICMSPaymentMonthRef)); // MES_REF
            this.addRecord(spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordE200</Name>
				<Source><![CDATA[
    private void createRecordE200()
    {
        FBTaxAssessment_BR                  taxAssessment;
        FiscalEstablishmentIEPerState_BR    fiscalEstablishmentIEPerState;
        boolean                             hasTaxAssessmentForTheState;

        while select StateId from fiscalEstablishmentIEPerState
            where fiscalEstablishmentIEPerState.FiscalEstablishment_BR == fiscalEstablishment.RecId
        {
            hasTaxAssessmentForTheState = false;

            while select taxAssessment
                where taxAssessment.FBBookingPeriod_BR == fbBookingPeriod.RecId
                    && taxAssessment.TaxType == TaxType_BR::ICMSST
                    && taxAssessment.State == fiscalEstablishmentIEPerState.StateId
            {
                hasTaxAssessmentForTheState = true;
                this.createRecordE200WithTaxAssessment(taxAssessment);
            }

            if (!hasTaxAssessmentForTheState)
            {
                this.createRecordE200WithoutTaxAssessment(fiscalEstablishmentIEPerState.StateId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordE200WithoutTaxAssessment</Name>
				<Source><![CDATA[
    private void createRecordE200WithoutTaxAssessment(LogisticsAddressStateId _stateId)
    {
        FBSpedRecord_BR spedRecord;

        spedRecord = this.newRecord('E200');

        spedRecord.addFieldString   (_stateId, 2);
        spedRecord.addFieldDate     (fbBookingPeriod.periodFrom());
        spedRecord.addFieldDate     (fbBookingPeriod.periodTo());

        this.addRecord(spedRecord);

        this.createRecordE210(spedRecord, null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordE200WithTaxAssessment</Name>
				<Source><![CDATA[
    private void createRecordE200WithTaxAssessment(FBTaxAssessment_BR _taxAssessment)
    {
        FBSpedRecord_BR spedRecord;

        spedRecord = this.newRecord('E200');

        spedRecord.addFieldString   (_taxAssessment.State, 2);
        spedRecord.addFieldDate     (_taxAssessment.FromDate);
        spedRecord.addFieldDate     (_taxAssessment.ToDate);

        this.addRecord(spedRecord);

        this.createRecordE210(spedRecord, _taxAssessment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordE210</Name>
				<Source><![CDATA[
    private void createRecordE210(FBSpedRecord_BR _parentRecord, FBTaxAssessment_BR _taxAssessmentIcmsSt)
    {
        FBSpedRecord_BR                     spedRecord;
        FBTaxAssessmentCalculatorIcmsSt_BR  taxAssessmentCalculatorIcmsSt;
        boolean                             hasTaxToPay;

        if (_taxAssessmentIcmsSt)
        {
            taxAssessmentCalculatorIcmsSt = _taxAssessmentIcmsSt.getCalculator();
        }
        else
        {
            taxAssessmentCalculatorIcmsSt = FBTaxAssessmentCalculator_BR::constructWithoutTaxAssessment(fbBookingPeriod, TaxType_BR::ICMSST);
        }

        taxAssessmentCalculatorIcmsSt.calculate();

        spedRecord = this.newRecord('E210');

        hasTaxToPay = taxAssessmentCalculatorIcmsSt.getBalanceDue() != 0;

        spedRecord.addFieldString   (hasTaxToPay ? '1' : '0');
        spedRecord.addFieldNumeric  (taxAssessmentCalculatorIcmsSt.getCreditBalanceFromPreviousPeriod(), 2);
        spedRecord.addFieldNumeric  (taxAssessmentCalculatorIcmsSt.getCreditsFromSalesReturn(), 2);
        spedRecord.addFieldNumeric  (taxAssessmentCalculatorIcmsSt.getTaxRefund(), 2);
        spedRecord.addFieldNumeric  (taxAssessmentCalculatorIcmsSt.getCreditsByGeneralAdjustment() + taxAssessmentCalculatorIcmsSt.getCredits() + taxAssessmentCalculatorIcmsSt.getDebitReversalByGeneralAdjustment(), 2);
        spedRecord.addFieldNumeric  (taxAssessmentCalculatorIcmsSt.getCreditsByDocumentAdjustment() + taxAssessmentCalculatorIcmsSt.getDebitReversalByDocumentAdjustment(), 2);
        spedRecord.addFieldNumeric  (taxAssessmentCalculatorIcmsSt.getDebits(), 2);
        spedRecord.addFieldNumeric  (taxAssessmentCalculatorIcmsSt.getDebitsByGeneralAdjustment() + taxAssessmentCalculatorIcmsSt.getCreditReversalByGeneralAdjustment(), 2);
        spedRecord.addFieldNumeric  (taxAssessmentCalculatorIcmsSt.getDebitsByDocumentAdjustment() + taxAssessmentCalculatorIcmsSt.getCreditReversalByDocumentAdjustment(), 2);
        spedRecord.addFieldNumeric  (taxAssessmentCalculatorIcmsSt.getBalanceDue(), 2);
        spedRecord.addFieldNumeric  (taxAssessmentCalculatorIcmsSt.getDeductions(), 2);
        spedRecord.addFieldNumeric  (taxAssessmentCalculatorIcmsSt.getTaxAmountToPay(), 2);
        spedRecord.addFieldNumeric  (taxAssessmentCalculatorIcmsSt.getCreditBalanceAtEndOfThePeriod(), 2);
        spedRecord.addFieldNumeric  (taxAssessmentCalculatorIcmsSt.getSpecialDebits(), 2);

        this.addChildRecord(_parentRecord, spedRecord);

        this.createRecordE220(spedRecord, _taxAssessmentIcmsSt);
        this.createRecordE250(spedRecord, _taxAssessmentIcmsSt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordE220</Name>
				<Source><![CDATA[
    private void createRecordE220(FBSpedRecord_BR _parentRecord, FBTaxAssessment_BR _taxAssessmentIcmsSt)
    {
        FBSpedRecord_BR                     spedRecord;
        FBTaxTrans_BR                       fbTaxTrans;
        FBTaxAssessmentAdjustment_BR        taxAssessmentAdjustment;
        FBGeneralAdjustmentCodeIcms_BR      generalAdjustmentCode;

        while select TaxAmount, fbTaxAssessmentAdjustment_BR
            from fbTaxTrans
                where fbTaxTrans.fbTaxAssessment_BR == _taxAssessmentIcmsSt.RecId
                    && fbTaxTrans.TaxType == TaxType_BR::ICMSST
                    && fbTaxTrans.fbTaxAssessmentAdjustment_BR != 0
                    && (fbTaxTrans.Classification == FBTaxAssessmentClassification_BR::GeneralCreditAdjustment
                        || fbTaxTrans.Classification == FBTaxAssessmentClassification_BR::GeneralDebitAdjustment
                        || fbTaxTrans.Classification == FBTaxAssessmentClassification_BR::GeneralCreditReversalAdjustment
                        || fbTaxTrans.Classification == FBTaxAssessmentClassification_BR::GeneralDebitReversalAdjustment
                        || fbTaxTrans.Classification == FBTaxAssessmentClassification_BR::TaxDeduction
                        || fbTaxTrans.Classification == FBTaxAssessmentClassification_BR::SpecialPurposeDebit)
            join ComplementaryDescription
                from taxAssessmentAdjustment
                    where taxAssessmentAdjustment.RecId == fbTaxTrans.FBTaxAssessmentAdjustment_BR
                        && taxAssessmentAdjustment.IsCancelled == false
            join SpedAdjustmentCode
                from generalAdjustmentCode
                    where generalAdjustmentCode.RecId == taxAssessmentAdjustment.FBGeneralAdjustmentCode_BR
        {
            spedRecord =  this.newRecord('E220');

            spedRecord.addFieldString       (generalAdjustmentCode.SpedAdjustmentCode, 8);
            spedRecord.addFieldString       (taxAssessmentAdjustment.ComplementaryDescription);
            spedRecord.addFieldNumeric      (fbTaxTrans.TaxAmount, 2);

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordE250</Name>
				<Source><![CDATA[
    private void createRecordE250(FBSpedRecord_BR _parentRecord, FBTaxAssessment_BR _taxAssessmentIcms)
    {
        FBSpedRecord_BR                     spedRecord;
        FBTaxAssessmentPayment_BR           taxAssessmentPayment;

        while select icmsObligationCode, TaxAmountToPay, DueDate, RevenueCode, Description, icmsPaymentMonthRef
            from taxAssessmentPayment
                where taxAssessmentPayment.FBTaxAssessment_BR == _taxAssessmentIcms.RecId
                &&  taxAssessmentPayment.Reversed           == NoYes::No
        {
            spedRecord = this.newRecord('E250'); // REG

            spedRecord.addFieldString   (taxAssessmentPayment.ICMSObligationCode, 3); // COD_OR
            spedRecord.addFieldNumeric  (taxAssessmentPayment.TaxAmountToPay, 2); // VL_OR
            spedRecord.addFieldDate     (taxAssessmentPayment.DueDate); // DT_VCTO
            spedRecord.addFieldString   (taxAssessmentPayment.RevenueCode); // COD_REC
            spedRecord.addFieldString   (""); // NUM_PROC
            spedRecord.addFieldString   (""); // IND_PROC
            spedRecord.addFieldString   (""); // PROC
            spedRecord.addFieldString   (taxAssessmentPayment.Description); // TXT_COMPL
            spedRecord.addFieldString   (this.getFormatedIcmsPaymentMonthRef(taxAssessmentPayment.ICMSPaymentMonthRef)); // MES_REF
            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordE300</Name>
				<Source><![CDATA[
    private void createRecordE300()
    {
        FBSpedRecord_BR                     spedRecord;
        FBTaxAssessment_BR                  taxAssessment;

        if (spedFiscalVersion < FBSPEDFiscalVersion_BR::v109)
        {
            return;
        }

        while select * from taxAssessment
            where taxAssessment.TaxType == TaxType_BR::ICMSDiff
                && taxAssessment.FBBookingPeriod_BR == fbBookingPeriod.RecId
        {
            spedRecord = this.newRecord('E300');    // REG

            spedRecord.addFieldString   (taxAssessment.State, 2);   // UF
            spedRecord.addFieldDate     (taxAssessment.FromDate);   // DT_INI
            spedRecord.addFieldDate     (taxAssessment.ToDate);     // DT_FIN

            this.addRecord(spedRecord);

            this.createRecordE310(spedRecord, taxAssessment);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordE310</Name>
				<Source><![CDATA[
    private void createRecordE310(FBSpedRecord_BR _parentRecord, FBTaxAssessment_BR _taxAssessmentIcmsDif)
    {
        FBSpedRecord_BR                         spedRecord;
        FBTaxAssessmentCalculatorICMSDif_BR     taxAssessmentCalculatorICMSDif;

        taxAssessmentCalculatorICMSDif = _taxAssessmentIcmsDif.getCalculator();

        taxAssessmentCalculatorICMSDif.calculate();

        spedRecord = this.newRecord('E310');

        spedRecord.addFieldString   (taxAssessmentCalculatorICMSDif.getBalanceDue() != 0
                                    || taxAssessmentCalculatorICMSDif.getCreditBalanceAtEndOfThePeriod() != 0 ? '1' : '0');     //IND_MOV_DIFAL

        if (spedFiscalVersion < FBSPEDFiscalVersion_BR::v110)
        {
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorICMSDif.getCreditBalanceFromPreviousPeriod(), 2);   //VL_SLD_CRED_ANT_DIFAL
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorICMSDif.getDebitsWithoutPovertyFund(), 2);          //VL_TOT_DEBITOS_DIFAL
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorICMSDif.getAdjustmentDebits()
                                        + taxAssessmentCalculatorICMSDif.getCreditReversalAdjustment(), 2);         //VL_OUT_DEB_DIFAL
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorICMSDif.getDebitsPovertyFund(), 2);                 //VL_TOT_DEB_FCP
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorICMSDif.getCreditsWithoutPovertyFund(), 2);         //VL_TOT_CREDITOS_DIFAL
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorICMSDif.getCreditsPovertyFund(), 2);                //VL_TOT_CRED_FCP
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorICMSDif.getAdjustmentCredits()
                                        + taxAssessmentCalculatorICMSDif.getDebitReversalAdjustment(), 2);          //VL_OUT_CRED_DIFAL
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorICMSDif.getBalanceDue(), 2);                           //VL_SLD_DEV_ANT_DIFAL
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorICMSDif.getDeductions(), 2);                        //VL_DEDU??ES_DIFAL
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorICMSDif.getTaxAmountToPay(), 2);                    //VL_RECOL
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorICMSDif.getCreditBalanceAtEndOfThePeriod(), 2);                     //VL_SLD_CRED_TRANSPORTAR
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorICMSDif.getSpecialDebits(), 2);                     //DEB_ESP_DIFAL
        }
        else
        {
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorICMSDif.getCreditBalancePrevPeriodWithoutPF(), 2);      // VL_SLD_CRED_ANT_DIFAL
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorICMSDif.getDebitsWithoutPovertyFund(), 2);              // VL_TOT_DEBITOS_DIFAL
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorICMSDif.getAdjustmentDebitsWithoutPovertyFund()
                                    + taxAssessmentCalculatorICMSDif.getCreditReversalAdjustmentWithoutPF(), 2);    // VL_OUT_DEB_DIFAL
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorICMSDif.getCreditsWithoutPovertyFund(), 2);             // VL_TOT_CREDITOS_DIFAL
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorICMSDif.getAdjustmentCreditsWithoutPovertyFund()
                                    + taxAssessmentCalculatorICMSDif.getDebitReversalAdjustmentWithoutPF(), 2);     // VL_OUT_CRED_DIFAL
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorICMSDif.getBalanceWithoutPovertyFund(), 2);             // VL_SLD_DEV_ANT_DIFAL
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorICMSDif.getDeductionsWithoutPovertyFund(), 2);          // VL_DEDUÇÕES_DIFAL
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorICMSDif.getTaxAmountToPayWithoutPovertyFund(), 2);      // VL_RECOL_DIFAL
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorICMSDif.getCreditBalanceWithoutPovertyFund(), 2);       // VL_SLD_CRED_TRANSPORTAR_DIFAL
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorICMSDif.getSpecialDebitsWithoutPovertyFund(), 2);       // DEB_ESP_DIFAL

            spedRecord.addFieldNumeric  (taxAssessmentCalculatorICMSDif.getCreditBalancePrevPeriodPovertyFund(), 2);    // VL_SLD_CRED_ANT_FCP
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorICMSDif.getDebitsPovertyFund(), 2);                     // VL_TOT_DEB_FCP
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorICMSDif.getAdjustmentDebitsPovertyFund()
                                    + taxAssessmentCalculatorICMSDif.getCreditReversalAdjustmentPovertyFund(), 2);  // VL_OUT_DEB_FCP
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorICMSDif.getCreditsPovertyFund(), 2);                    // VL_TOT_CRED_FCP
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorICMSDif.getAdjustmentCreditsPovertyFund()
                                    + taxAssessmentCalculatorICMSDif.getDebitReversalAdjustmentPovertyFund(), 2);   // VL_OUT_CRED_FCP
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorICMSDif.getBalancePovertyFund(), 2);                    // VL_SLD_DEV_ANT_FCP
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorICMSDif.getDeductionsPovertyFund(), 2);                 // VL_DEDUÇÕES_FCP
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorICMSDif.getTaxAmountToPayPovertyFund(), 2);             // VL_RECOL_FCP
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorICMSDif.getCreditBalancePovertyFund(), 2);              // VL_SLD_CRED_TRANSPORTAR_FCP
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorICMSDif.getSpecialDebitsPovertyFund(), 2);              // DEB_ESP_FCP
        }

        this.addChildRecord(_parentRecord, spedRecord);

        this.createRecordE311GeneralAdjustment(spedRecord, _taxAssessmentIcmsDif);
        this.createRecordE311FiscalDocumentAdjustment(spedRecord, _taxAssessmentIcmsDif);
        this.createRecordE316(spedRecord, _taxAssessmentIcmsDif);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordE311FiscalDocumentAdjustment</Name>
				<Source><![CDATA[
    private void createRecordE311FiscalDocumentAdjustment(FBSpedRecord_BR _parentRecord, FBTaxAssessment_BR _taxAssessmentIcmsDif)
    {
        FBSpedRecord_BR                         spedRecord;
        FBTaxTrans_BR                           fbTaxTrans;
        FBFiscalDocumentAdjustment_BR           fiscalDocumentAdjustment;
        FBFiscalDocumentAdjustmentCodeICMS_BR   fiscalDocumentAdjustmentCode;

        while select TaxAmount, fbTaxAssessmentAdjustment_BR
            from fbTaxTrans
                where fbTaxTrans.fbTaxAssessment_BR == _taxAssessmentIcmsDif.RecId
                    && fbTaxTrans.TaxType == TaxType_BR::ICMSDiff
                    && fbTaxTrans.FBFiscalDocumentAdjustment_BR != 0
            join ComplementaryDescription, FiscalDocumentTaxTrans_BR, TaxAmount
                from fiscalDocumentAdjustment
                    where fiscalDocumentAdjustment.RecId == fbTaxTrans.FBFiscalDocumentAdjustment_BR
            join SpedAdjustmentCode
                from fiscalDocumentAdjustmentCode
                    where fiscalDocumentAdjustmentCode.RecId == fiscalDocumentAdjustment.FBFiscalDocumentAdjustmentCodeICMS_BR
                        && !fiscalDocumentAdjustmentCode.Table52
        {
            spedRecord =  this.newRecord('E311');   // REG
            spedRecord.addFieldString       (fiscalDocumentAdjustmentCode.SpedAdjustmentCode, 8);   // COD_AJ_APUR
            spedRecord.addFieldString       (fiscalDocumentAdjustment.ComplementaryDescription);    // DESCR_COMPL_AJ
            spedRecord.addFieldNumeric      (fbTaxTrans.TaxAmount, 2);  // VL_AJ_APUR

            this.addChildRecord(_parentRecord, spedRecord);

            if (fiscalDocumentAdjustment.FiscalDocumentTaxTrans_BR != 0)
            {
                this.createRecordE313(spedRecord, fiscalDocumentAdjustment.FiscalDocumentTaxTrans_BR, fbTaxTrans.TaxAmount);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordE311GeneralAdjustment</Name>
				<Source><![CDATA[
    private void createRecordE311GeneralAdjustment(FBSpedRecord_BR _parentRecord, FBTaxAssessment_BR _taxAssessmentIcmsDif)
    {
        FBSpedRecord_BR                         spedRecord;
        FBTaxTrans_BR                           fbTaxTrans;
        FBTaxAssessmentAdjustment_BR            taxAssessmentAdjustment;
        FBGeneralAdjustmentCodeIcms_BR          generalAdjustmentCode;

        while select TaxAmount, fbTaxAssessmentAdjustment_BR
            from fbTaxTrans
                where fbTaxTrans.fbTaxAssessment_BR == _taxAssessmentIcmsDif.RecId
                    && fbTaxTrans.TaxType == TaxType_BR::ICMSDiff
                    && fbTaxTrans.fbTaxAssessmentAdjustment_BR != 0
            join ComplementaryDescription
                from taxAssessmentAdjustment
                    where taxAssessmentAdjustment.RecId == fbTaxTrans.fbTaxAssessmentAdjustment_BR
                        && taxAssessmentAdjustment.IsCancelled == false
            join SpedAdjustmentCode
                from generalAdjustmentCode
                    where generalAdjustmentCode.RecId == taxAssessmentAdjustment.FBGeneralAdjustmentCode_BR
        {
            spedRecord =  this.newRecord('E311');   // REG
            spedRecord.addFieldString       (generalAdjustmentCode.SpedAdjustmentCode, 8);  // COD_AJ_APUR
            spedRecord.addFieldString       (taxAssessmentAdjustment.ComplementaryDescription);     // DESCR_COMPL_AJ
            spedRecord.addFieldNumeric      (fbTaxTrans.TaxAmount, 2);  // VL_AJ_APUR

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordE313</Name>
				<Source><![CDATA[
    private void createRecordE313(FBSpedRecord_BR _parentRecord, RefRecId _fiscalDocumentTaxTransRecId , AmountMST _taxAmount)
    {
        FiscalDocument_BR                       fiscalDocument;
        FiscalDocumentLine_BR                   fiscalDocumentLine;
        FiscalDocumentTaxTrans_BR               fiscalDocumentTaxTrans;

        select firstOnly AccountingDate, AccessKey, Model, FiscalDocumentSeries, FiscalDocumentNumber, FiscalEstablishment, FiscalDocumentAccountType, FiscalDocumentAccountNum, FiscalDocumentIssuer, RecId
            from fiscalDocument
            join ItemId from fiscalDocumentLine
                where fiscalDocumentline.FiscalDocument == fiscalDocument.RecId
            exists join fiscalDocumentTaxTrans
                where fiscalDocumentTaxTrans.FiscalDocumentLine == fiscalDocumentLine.RecId
                    && fiscalDocumentTaxTrans.RecId == _fiscalDocumentTaxTransRecId;

        FBSpedRecord_BR spedRecord = this.newRecord('E313');

        if (fiscalDocument.Model != FiscalBooksConstants_BR::FiscalDocModel_65)
        {
            select firstonly spedFileParty
                where spedFileParty.PartyType == this.getFBThirdPartyTypeFromAccountType(fiscalDocument.FiscalDocumentAccountType)
                    && spedFileParty.AccountNum == fiscalDocument.FiscalDocumentAccountNum;

            spedRecord.addFieldString(spedFileParty.code(), 60);                // COD_PART
        }
        else
        {
            spedRecord.addFieldEmpty();                                         // COD_PART
        }

        spedRecord.addFieldString   (fiscalDocument.Model, 2);                  //COD_MOD
        spedRecord.addFieldString   (fiscalDocument.FiscalDocumentSeries, 3);   //SER
        spedRecord.addFieldEmpty    ();                                         //SUB
        spedRecord.addFieldNumeric  (fiscalDocument.FiscalDocumentNumber);      //NUM_DOC

        spedRecord.addFieldString   (fiscalDocument.AccessKey);                 //CHV_DOCe

        spedRecord.addFieldDate     (fiscalDocument.AccountingDate);            //DT_DOC

        if (this.isElectronicFiscalDocFromOwnEstab(fiscalDocument))
        {
            spedRecord.addFieldEmpty();                                         //COD_ITEM
        }
        else
        {
            spedRecord.addFieldString   (fiscalDocumentLine.ItemId, 60);        //COD_ITEM
        }

        spedRecord.addFieldNumeric  (_taxAmount, 2);                            //VL_AJ_ITEM

        this.addChildRecord(_parentRecord, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordE316</Name>
				<Source><![CDATA[
    private void createRecordE316(FBSpedRecord_BR _parentRecord, FBTaxAssessment_BR _taxAssessmentIcmsDif)
    {
        FBSpedRecord_BR                     spedRecord;
        FBTaxAssessmentPayment_BR           taxAssessmentPayment;

        while select taxAssessmentPayment
            where   taxAssessmentPayment.FBTaxAssessment_BR == _taxAssessmentIcmsDif.RecId
                &&  taxAssessmentPayment.Reversed           == NoYes::No
        {
            spedRecord = this.newRecord('E316'); // REG

            spedRecord.addFieldString   (taxAssessmentPayment.ICMSObligationCode, 3); // COD_OR
            spedRecord.addFieldNumeric  (taxAssessmentPayment.TaxAmountToPay, 2); // VL_OR
            spedRecord.addFieldDate     (taxAssessmentPayment.DueDate); // DT_VCTO
            spedRecord.addFieldString   (taxAssessmentPayment.RevenueCode); // COD_REC
            spedRecord.addFieldString   (taxAssessmentPayment.ReferencedProcessNumber); // NUM_PROC
            spedRecord.addFieldString   (this.getReferencedProcessAgencyValue(taxAssessmentPayment.ReferencedProcessAgency)); // IND_PROC
            spedRecord.addFieldString   (taxAssessmentPayment.ReferencedProcessDescription); // PROC
            spedRecord.addFieldString   (taxAssessmentPayment.Description); // TXT_COMPL
            spedRecord.addFieldString   (this.getFormatedIcmsPaymentMonthRef(taxAssessmentPayment.ICMSPaymentMonthRef)); // MES_REF

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordE500</Name>
				<Source><![CDATA[
    private void createRecordE500()
    {
        FBSpedRecord_BR     spedRecord;
        FBTaxAssessment_BR  taxAssessment;
        boolean             hasE500 = false;

        while select taxAssessment
            where taxAssessment.FBBookingPeriod_BR  == fbBookingPeriod.RecId
                && taxAssessment.TaxType == TaxType_BR::IPI
        {
            spedRecord = this.newRecord('E500');

            spedRecord.addFieldString   (this.getIPITaxAssessmentPeriodocity() == FBIPIAssessmentPeriodicity_BR::Monthly ? '0' : '1');
            spedRecord.addFieldDate     (taxAssessment.FromDate);
            spedRecord.addFieldDate     (taxAssessment.ToDate);

            this.addRecord(spedRecord);

            this.createRecordE510(spedRecord, taxAssessment);
            this.createRecordE520(spedRecord, taxAssessment);
            this.createRecordE530(spedRecord, taxAssessment);

            hasE500 = true;
        }

        if (!hasE500 && spedFiscalFileParameters.ActivityType == FBSPEDFiscalActivityType_BR::Industry)
        {
            spedRecord = this.newRecord('E500');

            spedRecord.addFieldString   ('0');
            spedRecord.addFieldDate     (fbBookingPeriod.periodFrom());
            spedRecord.addFieldDate     (fbBookingPeriod.periodTo());

            this.addRecord(spedRecord);

            this.createRecordE520(spedRecord, null);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordE510</Name>
				<Source><![CDATA[
    private void createRecordE510(FBSpedRecord_BR _parentRecord, FBTaxAssessment_BR _taxAssessmentIpi)
    {
        FBSpedRecord_BR             spedRecord;
        FBTaxTransLineAndMiscChargeMergedView_BR    taxTransView;
        FiscalDocumentLine_BR                       fiscalDocumentLine;

        while select sum(TaxBaseAmount), sum(TaxAmount)
            from taxTransView
                join sum(AccountingAmount)
            from fiscalDocumentLine
                group by taxTransView.CFOP, taxTransView.TaxationCode, taxTransView.FiscalValue
                where taxTransView.FiscalDocumentLine == fiscalDocumentLine.RecId
                   && taxTransView.FBTaxAssessment_BR == _taxAssessmentIpi.RecId
                   && taxTransView.TaxType            == TaxType_BR::IPI
                   && taxTransView.CFOP != ''
        {
            spedRecord = this.newRecord('E510');

            spedRecord.addFieldNumericFilledWithZeros   (this.keepNumbers(taxTransView.CFOP), 4);
            spedRecord.addFieldNumericFilledWithZeros   (taxTransView.TaxationCode, 2);
            spedRecord.addFieldNumeric                  (fiscalDocumentLine.AccountingAmount, 2);

            AmountMST taxBaseAmount;

            spedRecord.addFieldNumeric                  (taxTransView.taxBaseAmount, 2);
            spedRecord.addFieldNumeric                  (taxTransView.TaxAmount, 2);

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordE520</Name>
				<Source><![CDATA[
    private void createRecordE520(FBSpedRecord_BR _parentRecord, FBTaxAssessment_BR   _taxAssessmentIpi)
    {
        FBSpedRecord_BR                 spedRecord;
        FBTaxAssessmentCalculatorIPI_BR taxAssessmentCalculatorIPI;

        spedRecord = this.newRecord('E520'); // REG

        if (_taxAssessmentIpi)
        {
            taxAssessmentCalculatorIPI = _taxAssessmentIpi.getCalculator();
            taxAssessmentCalculatorIPI.calculate();

            spedRecord.addFieldNumeric  (taxAssessmentCalculatorIPI.getCreditBalanceFromPreviousPeriod(), 2); // VL_SD_ANT_IPI
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorIPI.getDebits(), 2); // VL_DEB_IPI
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorIPI.getCredits(), 2); // VL_CRED_IPI
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorIPI.getDebitsByGeneralAdjustment() + taxAssessmentCalculatorIPI.getDebitsByDocumentAdjustment()+ taxAssessmentCalculatorIPI.getCreditReversals() + taxAssessmentCalculatorIPI.getTaxRefund(), 2); // VL_OD_IPI
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorIPI.getCreditsByGeneralAdjustment() + taxAssessmentCalculatorIPI.getCreditsByDocumentAdjustment() + taxAssessmentCalculatorIPI.getDebitReversals(), 2); // VL_OC_IPI
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorIPI.getCreditBalanceAtEndOfThePeriod(), 2); // VL_SC_IPI
            spedRecord.addFieldNumeric  (taxAssessmentCalculatorIPI.getBalanceDue(), 2); // VL_SD_IPI
        }
        else
        {
            spedRecord.addFieldNumeric  (0); // VL_SD_ANT_IPI
            spedRecord.addFieldNumeric  (0); // VL_DEB_IPI
            spedRecord.addFieldNumeric  (0); // VL_CRED_IPI
            spedRecord.addFieldNumeric  (0); // VL_OD_IPI
            spedRecord.addFieldNumeric  (0); // VL_OC_IPI
            spedRecord.addFieldNumeric  (0); // VL_SC_IPI
            spedRecord.addFieldNumeric  (0); // VL_SD_IPI
        }

        this.addChildRecord(_parentRecord, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordE530</Name>
				<Source><![CDATA[
    private void createRecordE530(FBSpedRecord_BR _parentRecord, FBTaxAssessment_BR   _taxAssessmentIpi)
    {
        FBSpedRecord_BR                 spedRecord;
        FBGeneralAdjustmentCodeIPI_BR   generalAdjustmentCodeIPI;
        FBTaxAssessmentAdjustment_BR    taxAssessmentAdjustment;
        FBTaxTrans_BR                   fbTaxTrans;

        while select ComplementaryDescription, FBGeneralAdjustmentCode_BR, TaxAdjustmentSourceType, TaxAdjustmentProcessNum
            from taxAssessmentAdjustment
                where taxAssessmentAdjustment.FBTaxAssessment_BR == _taxAssessmentIpi.RecId
            join TaxAmount from fbTaxTrans
                where fbTaxTrans.TaxType == TaxType_BR::IPI
                    && fbTaxTrans.FBTaxAssessmentAdjustment_BR == taxAssessmentAdjustment.RecId
            join AdjustmentCode, IsReversal from generalAdjustmentCodeIPI
                where generalAdjustmentCodeIPI.RecId == taxAssessmentAdjustment.FBGeneralAdjustmentCode_BR
        {
            spedRecord = this.newRecord('E530');

            spedRecord.addFieldString(generalAdjustmentCodeIPI.isCredit() ? '1': '0', 1);           // 02
            spedRecord.addFieldNumeric(fbTaxTrans.TaxAmount, 2);                                    // 03
            spedRecord.addFieldString(generalAdjustmentCodeIPI.AdjustmentCode, 3);                  // 04

            if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v111)
            {
                spedRecord.addFieldString(this.adjustmentSourceType2Str(taxAssessmentAdjustment.TaxAdjustmentSourceType), 1);   // 05 IND_DOC
                spedRecord.addFieldString(taxAssessmentAdjustment.TaxAdjustmentProcessNum);                                     // 06 NUM_DOC
            }
            else
            {
                spedRecord.addFieldEmpty();                                                                                     // 05 IND_DOC
                spedRecord.addFieldEmpty();                                                                                     // 06 NUM_DOC
            }

            spedRecord.addFieldString(taxAssessmentAdjustment.ComplementaryDescription, 255);                                   // 07

            this.addChildRecord(_parentRecord, spedRecord);
        }

        if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v111)
        {
            FBFiscalDocumentAdjustment_BR   fiscalDocumentAdjustment;   

            while select ComplementaryDescription, FBGeneralAdjustmentCode_BR, RecId, FiscalDocumentTaxTrans_BR
                from fiscalDocumentAdjustment
                    where fiscalDocumentAdjustment.FBTaxAssessment_BR == _taxAssessmentIpi.RecId
                join TaxAmount from fbTaxTrans
                    where fbTaxTrans.TaxType == TaxType_BR::IPI
                        && fbTaxTrans.FBFiscalDocumentAdjustment_BR == fiscalDocumentAdjustment.RecId
                join AdjustmentCode, IsReversal from generalAdjustmentCodeIPI
                    where generalAdjustmentCodeIPI.RecId == fiscalDocumentAdjustment.FBGeneralAdjustmentCode_BR
            {
                spedRecord = this.newRecord('E530');

                spedRecord.addFieldString(generalAdjustmentCodeIPI.isCredit() ? '1': '0', 1);                               // 02
                spedRecord.addFieldNumeric(fbTaxTrans.TaxAmount, 2);                                                        // 03
                spedRecord.addFieldString(generalAdjustmentCodeIPI.AdjustmentCode, 3);                                      // 04
                spedRecord.addFieldString(this.adjustmentSourceType2Str(FBTaxAdjustmentSourceType_BR::FiscalDocument), 1);  // 05 IND_DOC
                spedRecord.addFieldEmpty();                                                                                 // 06 NUM_DOC
                spedRecord.addFieldString(fiscalDocumentAdjustment.ComplementaryDescription, 255);                          // 07

                this.addChildRecord(_parentRecord, spedRecord);

                if (fiscalDocumentAdjustment.FiscalDocumentTaxTrans_BR != 0)
                {
                    this.createRecordE531(spedRecord, fiscalDocumentAdjustment.FiscalDocumentTaxTrans_BR, fbTaxTrans.TaxAmount);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordE531</Name>
				<Source><![CDATA[
    private void createRecordE531(FBSpedRecord_BR _parentRecord, RefRecId _fiscalDocumentTaxTransRecId, AmountMST _taxAmount)
    {
        FiscalDocument_BR fiscalDocument;
        FiscalDocumentLine_BR fiscalDocumentLine;
        FiscalDocumentTaxTrans_BR fiscalDocumentTaxTrans;

        select firstOnly
                AccountingDate,
                AccessKey,
                Model,
                FiscalDocumentSeries,
                FiscalDocumentNumber,
                FiscalEstablishment,
                FiscalDocumentAccountType,
                FiscalDocumentAccountNum,
                FiscalDocumentIssuer,
                RecId
            from fiscalDocument
            join ItemId from fiscalDocumentLine
                where fiscalDocumentLine.FiscalDocument == fiscalDocument.RecId
            exists join fiscalDocumentTaxTrans
                where fiscalDocumentTaxTrans.FiscalDocumentLine == fiscalDocumentLine.RecId
                    && fiscalDocumentTaxTrans.RecId == _fiscalDocumentTaxTransRecId;

        if (fiscalDocument.Model == FiscalBooksConstants_BR::FiscalDocModel_01
            || fiscalDocument.Model == FiscalBooksConstants_BR::FiscalDocModel_55)
        {
            FBSpedRecord_BR spedRecord =  this.newRecord('E531');

            select firstonly spedFileParty
                where spedFileParty.PartyType == this.getFBThirdPartyTypeFromAccountType(fiscalDocument.FiscalDocumentAccountType)
                    && spedFileParty.AccountNum == fiscalDocument.FiscalDocumentAccountNum;

            spedRecord.addFieldString(spedFileParty.code(), 60);                            // 02 COD_PART
            spedRecord.addFieldString(fiscalDocument.Model, 2);                             // 03 COD_MOD
            spedRecord.addFieldString(fiscalDocument.FiscalDocumentSeries, 4);              // 04 SER
            spedRecord.addFieldEmpty();                                                     // 05 SUB
            spedRecord.addFieldNumeric(fiscalDocument.FiscalDocumentNumber, 0, 9);          // 06 NUM_DOC
            spedRecord.addFieldDate(fiscalDocument.AccountingDate);                         // 07 DT_DOC
        
            if (this.isElectronicFiscalDocFromOwnEstab(fiscalDocument))
            {
                spedRecord.addFieldEmpty();                                                 // 08 COD_ITEM
            }
            else
            {
                spedRecord.addFieldString(fiscalDocumentLine.ItemId, 60);                   // 08 COD_ITEM
            }

            spedRecord.addFieldNumeric(_taxAmount, 2);                                      // 09 VL_AJ_ITEM

            if (fiscalDocument.Model == FiscalBooksConstants_BR::FiscalDocModel_55)
            {
                spedRecord.addFieldString(this.keepNumbers(fiscalDocument.AccessKey), 44);  // 10 CHV_NFE
            }
            else
            {
                spedRecord.addFieldEmpty();                                                 // 10 CHV_NFE
            }

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordE990</Name>
				<Source><![CDATA[
    private void createRecordE990()
    {
        FBSpedRecord_BR spedRecord;

        spedRecord = FBSpedRecord_BR::constructEmpty('E990');

        spedRecord.addFieldNumeric(spedFile.totalRecordsInBlock('E') + 2);

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordG110</Name>
				<Source><![CDATA[
    private void createRecordG110()
    {
        FBSpedRecord_BR         spedRecord;
        FBCIAPAssessment_BR     fbCIAPAssessment;
        FBTaxAssessment_BR      taxAssessmentIcms;

        while select fbCIAPAssessment
            exists join taxAssessmentIcms
            where taxAssessmentIcms.RecId == fbCIAPAssessment.FBTaxAssessment_BR
                && taxAssessmentIcms.FBBookingPeriod_BR == fbBookingPeriod.RecId
                && taxAssessmentIcms.TaxType == TaxType_BR::ICMS
        {
            if (fbCIAPAssessment.hasTransactions())
            {
                spedRecord = this.newRecord('G110');
                spedRecord.addFieldDate         (fbCIAPAssessment.FromDate); // DT_INI
                spedRecord.addFieldDate         (fbCIAPAssessment.ToDate); // DT_FIN
                spedRecord.addFieldNumeric      (fbCIAPAssessment.ICMSInitialBalance, 2); // SALDO_IN_ICMS
                spedRecord.addFieldNumeric      (fbCIAPAssessment.InstallmentSum, 2); // SOM_PARC
                spedRecord.addFieldNumeric      (fbCIAPAssessment.TotalTaxableOutgoingAmount, 2); // VL_TRIB_EXP
                spedRecord.addFieldNumeric      (fbCIAPAssessment.TotalOutgoingOperationsAmount, 2); // VL_TOTAL
                spedRecord.addFieldNumeric      (fbCIAPAssessment.factor(), 8); // IND_PER_SAI
                spedRecord.addFieldNumeric      (fbCIAPAssessment.icmsAmountRecoverable(), 2); // ICMS_APROP
                spedRecord.addFieldNumeric      (fbCIAPAssessment.otherCreditsAmount(), 2); // SOM_ICMS_OC

                this.addRecord(spedRecord);

                this.createRecordG125(spedRecord, fbCIAPAssessment);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordG125</Name>
				<Source><![CDATA[
    private void createRecordG125(FBSpedRecord_BR _spedRecord, FBCIAPAssessment_BR     _fbCIAPAssessment)
    {
        FBCIAPAssetTrans_BR     fbCIAPAssetTrans;
        FBSpedRecord_BR         spedRecord;
        FBCIAPAssetTransType_BR transType;
        TransDate               transDate;

        while select fbCIAPAssetTrans
            where fbCIAPAssetTrans.FBCIAPAssessment_BR == _fbCIAPAssessment.RecId
        {
            if (FBCIAPAssetTrans_BR::isTransactionOutgoing(fbCIAPAssetTrans.TransType))
            {
                spedRecord = this.newRecord('G125');

                spedRecord.addFieldString       (fbCIAPAssetTrans.ciapAssetId(), 60); // COD_IND_BEM
                spedRecord.addFieldDate         (fbCIAPAssetTrans.TransDate); // DT_MOV
                spedRecord.addFieldString       (enum2Symbol(enumNum(FBCIAPAssetTransType_BR), fbCIAPAssetTrans.TransType), 2); // TIPO_MOV
                spedRecord.addFieldNumeric      (0, 2); // VL_IMOB_ICMS_OP
                spedRecord.addFieldNumeric      (0, 2); // VL_IMOB_ICMS_ST
                spedRecord.addFieldNumeric      (0, 2); // VL_IMOB_ICMS_FRT
                spedRecord.addFieldNumeric      (0, 2); // VL_IMOB_ICMS_DIF
                spedRecord.addFieldNumeric      (0, 0, 3); // NUM_PARC
                spedRecord.addFieldNumeric      (0, 2); // VL_PARC_PASS

                this.addRecord(spedRecord);

                this.createRecordG130(spedRecord, fbCIAPAssetTrans);

                transType = FBCIAPAssetTransType_BR::SI;
                transDate = _fbCIAPAssessment.FromDate;
            }
            else
            {
                transType = fbCIAPAssetTrans.TransType;
                transDate = fbCIAPAssetTrans.TransDate;
            }

            spedRecord = this.newRecord('G125');

            spedRecord.addFieldString       (fbCIAPAssetTrans.ciapAssetId(), 60); // COD_IND_BEM
            spedRecord.addFieldDate         (transDate); // DT_MOV
            spedRecord.addFieldString       (enum2Symbol(enumNum(FBCIAPAssetTransType_BR), transType), 2); // TIPO_MOV
            spedRecord.addFieldNumeric      (fbCIAPAssetTrans.ICMSAmount, 2); // VL_IMOB_ICMS_OP
            spedRecord.addFieldNumeric      (fbCIAPAssetTrans.ICMSSTAmount, 2); // VL_IMOB_ICMS_ST
            spedRecord.addFieldNumeric      (fbCIAPAssetTrans.ICMSFreightAmount, 2); // VL_IMOB_ICMS_FRT
            spedRecord.addFieldNumeric      (fbCIAPAssetTrans.ICMSDiffAmount, 2); // VL_IMOB_ICMS_DIF
            spedRecord.addFieldNumeric      (fbCIAPAssetTrans.InstallmentNum, 0, 3); // NUM_PARC
            spedRecord.addFieldNumeric      (fbCIAPAssetTrans.InstallmentAmount, 2); // VL_PARC_PASS

            this.addRecord(spedRecord);

            this.createRecordG126(spedRecord, fbCIAPAssetTrans);

            if (!FBCIAPAssetTrans_BR::isTransactionOutgoing(fbCIAPAssetTrans.TransType))
            {
                this.createRecordG130(spedRecord, fbCIAPAssetTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordG126</Name>
				<Source><![CDATA[
    private void createRecordG126(FBSpedRecord_BR _parentRecord, FBCIAPAssetTrans_BR     _fbCIAPAssetTrans)
    {
        FBCIAPAssetTrans_OtherCredits_BR otherCredits;

        FBSpedRecord_BR spedRecord;

        while select otherCredits
            order FromDate
            where otherCredits.FBCIAPAssetTrans_BR == _fbCIAPAssetTrans.RecId
        {
            spedRecord = this.newRecord('G126');

            spedRecord.addFieldDate(otherCredits.FromDate); // DT_INI
            spedRecord.addFieldDate(otherCredits.ToDate); // DT_FIM
            spedRecord.addFieldNumeric(otherCredits.InstallmentNum, 0, 3); // NUM_PARC
            spedRecord.addFieldNumeric(otherCredits.InstallmentAmount, 2); // VL_PARC_PASS
            spedRecord.addFieldNumeric(otherCredits.TotalTaxableOutgoingAmount, 2); // VL_TRIB_OC
            spedRecord.addFieldNumeric(otherCredits.TotalOutgoingOperationsAmount, 2); // VL_TOTAL
            spedRecord.addFieldNumeric(otherCredits.factor(), 8); // IND_PER_SAI
            spedRecord.addFieldNumeric(otherCredits.icmsAmountRecoverable(), 2); // VL_PARC_APROP

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordG130</Name>
				<Source><![CDATA[
    private void createRecordG130(FBSpedRecord_BR _parentRecord, FBCIAPAssetTrans_BR     _fbCIAPAssetTrans)
    {
        FBCIAPAssetTrans_FiscalDoc_BR   fbCIAPAssetTrans_FiscalDoc;
        FiscalDocument_BR               fiscalDocument;
        ExternalFiscalDocument_BR       externalFiscalDocument;
        FBSpedRecord_BR                 spedRecord;

        FiscalDocDirection_BR           direction;
        FiscalDocumentAccountNumber_BR  accountNum;
        CustVendType_BR                 accountType;
        FiscalDocumentModel_BR          fiscalDocumentModel;
        FiscalDocumentSeries_BR         fiscalDocumentSeries;
        FiscalDocumentNumber_BR         fiscaldocumentNumber;
        EFDocAccessKey_BR               nfeAccessKey;
        FiscalDocumentDate_BR           fiscalDocumentDate;
        FiscalDocumentIssuer_BR         issuer;

        RecordSortedList                ciapFiscalDocumentList = new RecordSortedList(tableNum(FBCIAPAssetTrans_FiscalDoc_BR));
        FBCIAPAssetTrans_BR             acquisitionCIAPAssetTrans;
        boolean                         more;

        ciapFiscalDocumentList.sortOrder(fieldNum(FBCIAPAssetTrans_FiscalDoc_BR, RecId));

        if (_fbCIAPAssetTrans.TransType == FBCIAPAssetTransType_BR::SIICMSCredit)
        {
            while select fbCIAPAssetTrans_FiscalDoc
                exists join acquisitionCIAPAssetTrans
                    where acquisitionCIAPAssetTrans.RecId == fbCIAPAssetTrans_FiscalDoc.FBCIAPAssetTrans_BR
                        && acquisitionCIAPAssetTrans.FBCIAPAssetTable_BR == _fbCIAPAssetTrans.FBCIAPAssetTable_BR
                        && (acquisitionCIAPAssetTrans.TransType == FBCIAPAssetTransType_BR::IM || acquisitionCIAPAssetTrans.TransType == FBCIAPAssetTransType_BR::SI)
            {
                ciapFiscalDocumentList.ins(fbCIAPAssetTrans_FiscalDoc);
            }
        }
        else
        {
            while select fbCIAPAssetTrans_FiscalDoc
                where fbCIAPAssetTrans_FiscalDoc.FBCIAPAssetTrans_BR == _fbCIAPAssetTrans.RecId
            {
                ciapFiscalDocumentList.ins(fbCIAPAssetTrans_FiscalDoc);
            }
        }

        for (more = ciapFiscalDocumentList.first(fbCIAPAssetTrans_FiscalDoc);
        more;
        more = ciapFiscalDocumentList.next(fbCIAPAssetTrans_FiscalDoc))
        {
            ICMSSTCollectionPaymentNumber_BR num_da;
            if (fbCIAPAssetTrans_FiscalDoc.FiscalDocument_BR)
            {
                select firstonly fiscalDocument
                    where fiscalDocument.RecId == fbCIAPAssetTrans_FiscalDoc.FiscalDocument_BR;

                direction               = fiscalDocument.Direction;
                accountNum              = fiscalDocument.FiscalDocumentAccountNum;
                accountType             = fiscalDocument.FiscalDocumentAccountType;
                fiscalDocumentModel     = fiscalDocument.Model;
                fiscalDocumentSeries    = fiscalDocument.FiscalDocumentSeries;
                fiscaldocumentNumber    = fiscalDocument.FiscalDocumentNumber;
                nfeAccessKey            = fiscalDocument.AccessKey;
                fiscalDocumentDate      = fiscalDocument.FiscalDocumentDate;
                issuer                  = fiscalDocument.FiscalDocumentIssuer;

                if (!FBSpedFilePartyTmp_BR::existsForAccountTypeAndNum(spedFileParty,
                                                                       fiscalEstablishment.RecId,
                                                                       this.getFBThirdPartyTypeFromAccountType(accountType),
                                                                       accountNum))
                {
                    spedFileParty.insertFromFiscalDocument(fiscalDocument);
                }
                else
                {
                    select firstOnly spedFileParty
                        where spedFileParty.FiscalEstablishmentRecId == fiscalEstablishment.RecId
                            && spedFileParty.PartyType == this.getFBThirdPartyTypeFromAccountType(accountType)
                            && spedFileParty.AccountNum == accountNum;
                }

                FiscalDocumentLine_BR fiscalDocumentLine;
                select firstonly ICMSSTCollectionPaymentNumber from fiscalDocumentLine
                    where fiscalDocumentLine.RecId == fbCIAPAssetTrans_FiscalDoc.FiscalDocumentLine_BR;

                num_da = fiscalDocumentLine.ICMSSTCollectionPaymentNumber;
            }
            else if (fbCIAPAssetTrans_FiscalDoc.ExternalFiscalDocument_BR)
            {
                select firstonly externalFiscalDocument
                    where externalFiscalDocument.RecId == fbCIAPAssetTrans_FiscalDoc.ExternalFiscalDocument_BR;

                direction               = externalFiscalDocument.Direction;
                accountNum              = externalFiscalDocument.FiscalDocumentAccountNum;
                accountType             = externalFiscalDocument.FiscalDocumentAccountType;
                fiscalDocumentModel     = externalFiscalDocument.Model;
                fiscalDocumentSeries    = externalFiscalDocument.FiscalDocumentSeries;
                fiscaldocumentNumber    = externalFiscalDocument.FiscalDocumentNumber;
                nfeAccessKey            = externalFiscalDocument.FiscalDocumentAccessKey;
                fiscalDocumentDate      = externalFiscalDocument.IssueDate;
                issuer                  = externalFiscalDocument.FiscalDocumentIssuer;

                if (!FBSpedFilePartyTmp_BR::existsForAccountTypeAndNum(spedFileParty,
                                                                       fiscalEstablishment.RecId,
                                                                       this.getFBThirdPartyTypeFromAccountType(accountType),
                                                                       accountNum))
                {
                    spedFileParty.insertFromExternalFiscalDocument(fiscalEstablishment.RecId, externalFiscalDocument);
                }
                else
                {
                    select firstonly spedFileParty
                        where spedFileParty.PartyType == this.getFBThirdPartyTypeFromAccountType(accountType)
                            && spedFileParty.AccountNum == accountNum
                            && spedFileParty.FiscalEstablishmentRecId == fiscalEstablishment.RecId;
                }
            }

            spedRecord = this.newRecord('G130');

            spedRecord.addFieldString   (issuer == FiscalDocumentIssuer_BR::OwnEstablishment ? '0' : '1', 1);
            spedRecord.addFieldString   (spedFileParty.code(), 60); // COD_PART
            spedRecord.addFieldString   (fiscalDocumentModel, 2); // COD_MOD
            spedRecord.addFieldString   (fiscalDocumentSeries, 3); //SERIE
            spedRecord.addFieldNumeric  (fiscaldocumentNumber, 0, 9); // NUM_DOC
            spedRecord.addFieldString   (nfeAccessKey); // CHV_NFE_CTE
            spedRecord.addFieldDate     (fiscalDocumentDate); // DT_DOC
            if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v113)
            {
                spedRecord.addFieldString(num_da); // NUM_DA
            }


            this.addChildRecord(_parentRecord, spedRecord);

            this.createRecordG140(spedRecord, fbCIAPAssetTrans_FiscalDoc, _fbCIAPAssetTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordG140</Name>
				<Source><![CDATA[
    private void createRecordG140(FBSpedRecord_BR _parentRecord, FBCIAPAssetTrans_FiscalDoc_BR _fbCIAPAssetTrans_FiscalDoc, FBCIAPAssetTrans_BR _fbCIAPAssetTrans)
    {
        FiscalDocumentLine_BR           fiscalDocumentLine;
        ExternalFiscalDocument_BR       externalFiscaldocument;
        ExternalFiscalDocumentLine_BR   externalFiscaldocumentLine;
        FBSpedRecord_BR                 spedRecord;
        LineNum                         lineNum;
        ItemId                          itemId;
        UnitOfMeasureSymbol             unitId;
        Qty                             qty;
        InventTable inventTable;

        if (_fbCIAPAssetTrans_FiscalDoc.FiscalDocument_BR)
        {
            select firstonly LineNum, ItemId, Unit, Quantity from fiscalDocumentLine
                where fiscalDocumentLine.RecId == _fbCIAPAssetTrans_FiscalDoc.FiscalDocumentLine_BR;

            lineNum = fiscalDocumentLine.LineNum;
            itemId  = fiscalDocumentLine.ItemId;
            inventTable = InventTable::find(itemId);
            unitId  = fiscalDocumentLine.Unit;
            qty = fiscalDocumentLine.Quantity;

        }
        else if (_fbCIAPAssetTrans_FiscalDoc.ExternalFiscalDocument_BR)
        {
            select firstonly LineNum, ItemId from externalFiscaldocumentLine
                exists join externalFiscaldocument
                    where externalFiscaldocument.RecId == externalFiscaldocumentLine.ExternalFiscalDocument_BR
                        && externalFiscaldocument.RecId == _fbCIAPAssetTrans_FiscalDoc.ExternalFiscalDocument_BR;

            lineNum = externalFiscaldocumentLine.LineNum;
            itemId  = externalFiscaldocumentLine.ItemId;
            inventTable = InventTable::find(itemId);
            unitId = inventTable.inventTableModuleInvent().UnitId;
            qty = 1;
        }

        if (!FBSpedFileItemTmp_BR::existsForItemId(spedFileItem, fiscalEstablishment.RecId, itemId))
        {
            spedFileItem.insertFromInventTable(fiscalEstablishment.RecId, inventTable);
        }

        if (!FBSpedFileUnitOfMeasureTmp_BR::existsForItemIdAndSymbol(spedFileUnitOfMeasure, fiscalEstablishment.RecId, itemId, unitId))
        {
            spedFileUnitOfMeasure.insertFromItemIdAndSymbol(spedFileUnitSymbol, fiscalEstablishment.RecId, itemId, unitId);
        }

        spedRecord = this.newRecord('G140');

        spedRecord.addFieldNumeric  (lineNum, 0, 3); // NUM_ITEM
        spedRecord.addFieldString   (itemId, 60); // COD_ITEM
        if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v113)
        {
            spedRecord.addFieldNumeric(qty, 3); // QTDE
            spedRecord.addFieldString(unitId); // UNID

            spedRecord.addFieldNumeric(_fbCIAPAssetTrans.ICMSAmount, 2); // VL_ICMS_OP_APLICADO
            spedRecord.addFieldNumeric(_fbCIAPAssetTrans.ICMSSTAmount, 2); // VL_ICMS_ST_APLICADO
            spedRecord.addFieldNumeric(_fbCIAPAssetTrans.ICMSFreightAmount, 2); // VL_ICMS_FRT_APLICADO
            spedRecord.addFieldNumeric(_fbCIAPAssetTrans.ICMSDiffAmount, 2); // VL_ICMS_DIF_APLICADO
        }

        this.addChildRecord(_parentRecord, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordG990</Name>
				<Source><![CDATA[
    private void createRecordG990()
    {
        FBSpedRecord_BR spedRecord;

        spedRecord = FBSpedRecord_BR::constructEmpty('G990');

        spedRecord.addFieldNumeric(spedFile.totalRecordsInBlock('G') + 2);

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordH005</Name>
				<Source><![CDATA[
    private void createRecordH005()
    {
        FBSpedRecord_BR     spedRecord;
        FBInventBalance_BR  inventBalance;
        Amount              totalInventoryAmount;
        date                balanceDate = this.getInventoryReportingDate();
        
        if (mthOfYr(balanceDate) == MonthsOfYear::December)
        {
            select sum(CostAmount) from inventBalance
                where inventBalance.BookingPeriod == fbBookingPeriod.RecId
                    && inventBalance.MonthRef == balanceDate
                    && inventBalance.CostAmount > 0;

            totalInventoryAmount = inventBalance.CostAmount;

            spedRecord = this.newRecord('H005');
            spedRecord.addFieldDate     (balanceDate);
            spedRecord.addFieldNumeric  (totalInventoryAmount, 2);
            spedRecord.addFieldString   (BlockH_MOT_INV_01);

            this.addRecord(spedRecord);

            if (totalInventoryAmount > 0)
            {
                this.createRecordH010(spedRecord, BlockH_MOT_INV_01);
            }
        }

        if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v112 && fbBookingPeriod.isCreditInventoryAdjustmentOn())
        {
            this.createRecordH005ForICMSSTBalance(fbBookingPeriod.getPreviousBookingPeriod(), BlockH_MOT_INV_05);
        }

        if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v113 && fiscalBooksParametersPerState.EnableC180C185)
        {
            this.createRecordH005ForICMSSTBalance(fbBookingPeriod.getPreviousBookingPeriod(), BlockH_MOT_INV_06);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordH005ForICMSSTBalance</Name>
				<Source><![CDATA[
    private void createRecordH005ForICMSSTBalance(FBBookingPeriod_BR _bookingPeriod, str _mot_inv)
    {
        FBSpedRecord_BR spedRecord;
        FBInventBalance_BR  inventBalance;
        FBICMSSTInventoryBalance_BR icmsstInventoryBalance;
        InventLocation inventLocation;
        InventDim inventDim;
        Amount totalInventoryAmount;

        while select sum(CostAmount), sum(InventQty) from inventBalance
                group by CustVendAccount
                where inventBalance.BookingPeriod == _bookingPeriod.RecId
                    && inventBalance.MonthRef == _bookingPeriod.periodTo()
                    && inventBalance.CostAmount > 0
                join sum(Quantity) from icmsstInventoryBalance
                    group by ItemId
                    where icmsstInventoryBalance.FBBookingPeriod_BR == _bookingPeriod.RecId
                        && icmsstInventoryBalance.ItemId == inventBalance.ItemId
                        && icmsstInventoryBalance.ICMSSTTaxAmount > 0
                exists join inventDim
                    where inventDim.inventDimId == icmsstInventoryBalance.InventDimId
                exists join inventLocation
                    where inventLocation.InventLocationId == inventDim.InventLocationId
                        && inventLocation.InventCountingGroup_BR == inventBalance.InventOwner
                        && ((!inventBalance.CustVendAccount && !inventLocation.CustAccount_BR && !inventLocation.VendAccount)
                            || (inventBalance.CustVendAccount
                                && (inventLocation.CustAccount_BR == inventBalance.CustVendAccount
                                    || inventLocation.VendAccount == inventBalance.CustVendAccount)))
        {
            totalInventoryAmount += inventBalance.InventQty ? (inventBalance.CostAmount / inventBalance.InventQty) * icmsstInventoryBalance.Quantity : 0;
        }

        spedRecord = this.newRecord('H005');
        spedRecord.addFieldDate     (_bookingPeriod.periodTo());
        spedRecord.addFieldNumeric  (totalInventoryAmount, 2);
        spedRecord.addFieldString   (_mot_inv); // MOT_INV

        this.addRecord(spedRecord);

        if (totalInventoryAmount > 0)
        {
            this.createRecordH010(spedRecord, _mot_inv);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordH010</Name>
				<Source><![CDATA[
    private void createRecordH010(FBSpedRecord_BR _parentRecord, str _mot_inv)
    {
        FBSpedRecord_BR                     spedRecord;
        FBInventBalance_BR                  inventBalance;
        InventTable                         inventTable;
        InventQty                           qty;
        CostAmount                          value;
        date                                balanceDate = this.getInventoryReportingDate();

        if (mthOfYr(balanceDate) == MonthsOfYear::December && _mot_inv == BlockH_MOT_INV_01)
        {
            while select inventBalance
                where inventBalance.BookingPeriod == fbBookingPeriod.RecId
                    && inventBalance.MonthRef == balanceDate
                join inventTable
                    where inventTable.ItemId == inventBalance.ItemId
            {
                [qty, value] = [inventBalance.InventQty, inventBalance.CostAmount];

                if (qty > 0 && value > 0)
                {
                    if (inventBalance.CustVendAccount)
                    {
                        spedFileParty = FBSpedFileCreator_Fiscal_BR::getInventBalanceSpedFileParty(inventBalance, spedFileParty, fiscalEstablishment);
                    }

                    if (!FBSpedFileItemTmp_BR::existsForItemId(spedFileItem, fiscalEstablishment.RecId, inventBalance.ItemId))
                    {
                        spedFileItem.insertFromInventTable(fiscalEstablishment.RecId, inventTable);
                    }

                    if (!FBSpedFileUnitOfMeasureTmp_BR::existsForItemIdAndSymbol(spedFileUnitOfMeasure, fiscalEstablishment.RecId, inventBalance.ItemId, inventBalance.UnitId))
                    {
                        spedFileUnitOfMeasure.insertFromItemIdAndSymbol(spedFileUnitSymbol, fiscalEstablishment.RecId, inventBalance.ItemId, inventBalance.UnitId);
                    }

                    spedRecord = this.newRecord     ('H010');

                    spedRecord.addFieldString       (inventBalance.ItemId);
                    spedRecord.addFieldString       (FBSpedFileUnitSymbolTmp_BR::findOrCreateSpedSymbol(spedFileUnitSymbol, inventBalance.UnitId));
                    spedRecord.addFieldNumeric      (qty, 3);
                    spedRecord.addFieldNumeric      (value / qty, 6);
                    spedRecord.addFieldNumeric      (value, 2);
                    spedRecord.addFieldString       (FBSpedFileCreator_Fiscal_BR::spedInventOwner(inventBalance.InventOwner));
                    spedRecord.addFieldString       (inventBalance.InventOwner == InventCountingGroup_BR::OwnStock ? '' : spedFileParty.code());
                    spedRecord.addFieldEmpty();
                    spedRecord.addFieldString       (inventBalance.InventoryAccountNum);

                    if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v108)
                    {
                        spedRecord.addFieldNumeric(value, 2);
                    }

                    this.addChildRecord(_parentRecord, spedRecord);
                }
            }
        }

        if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v112 && fbBookingPeriod.isCreditInventoryAdjustmentOn() && _mot_inv == BlockH_MOT_INV_05)
        {
            this.createRecordH010ForICMSSTBalance(_parentRecord, fbBookingPeriod.getPreviousBookingPeriod(), _mot_inv);
        }

        if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v113 && _mot_inv == BlockH_MOT_INV_06)
        {
            this.createRecordH010ForICMSSTBalance(_parentRecord, fbBookingPeriod.getPreviousBookingPeriod(), _mot_inv);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordH010ForICMSSTBalance</Name>
				<Source><![CDATA[
    private void createRecordH010ForICMSSTBalance(FBSpedRecord_BR _parentRecord, FBBookingPeriod_BR _bookingPeriod, str _mot_inv)
    {
        FBSpedRecord_BR spedRecord;
        FBInventBalance_BR inventBalance;
        InventTable inventTable;
        InventQty qty;
        CostAmount value;
        FBICMSSTInventoryBalance_BR icmsstInventoryBalance;
        InventLocation inventLocation;
        InventDim inventDim;
            
        while select sum(CostAmount), sum(InventQty) from inventBalance
                group by
                    inventBalance.ItemId,
                    inventTable.ItemId,
                    inventBalance.UnitId,
                    inventBalance.CustVendAccount,
                    inventBalance.CustVendType,
                    inventBalance.InventOwner,
                    inventBalance.InventoryAccountNum
                where inventBalance.BookingPeriod == _bookingPeriod.RecId
                    && inventBalance.MonthRef == _bookingPeriod.periodTo()
                join inventTable
                    where inventTable.ItemId == inventBalance.ItemId
                join sum(Quantity) from icmsstInventoryBalance
                    where icmsstInventoryBalance.FBBookingPeriod_BR == _bookingPeriod.RecId
                        && icmsstInventoryBalance.ItemId == inventBalance.ItemId
                        && icmsstInventoryBalance.Unit == inventBalance.UnitId
                        && icmsstInventoryBalance.ICMSSTTaxAmount > 0
                exists join inventDim
                    where inventDim.inventDimId == icmsstInventoryBalance.InventDimId
                exists join inventLocation
                    where inventLocation.InventLocationId == inventDim.InventLocationId
                        && inventLocation.InventCountingGroup_BR == inventBalance.InventOwner
                        && ((!inventBalance.CustVendAccount && !inventLocation.CustAccount_BR && !inventLocation.VendAccount)
                            || (inventBalance.CustVendAccount
                                && (inventLocation.CustAccount_BR == inventBalance.CustVendAccount
                                    || inventLocation.VendAccount == inventBalance.CustVendAccount)))
        {
            qty = icmsstInventoryBalance.Quantity;
            AmountMST valuePerUnit = inventBalance.InventQty ? inventBalance.CostAmount / inventBalance.InventQty : 0;
            value = valuePerUnit * qty;

            if (qty > 0 && value > 0)
            {
                if (inventBalance.CustVendAccount)
                {
                    spedFileParty = FBSpedFileCreator_Fiscal_BR::getInventBalanceSpedFileParty(inventBalance, spedFileParty, fiscalEstablishment);
                }

                if (!FBSpedFileItemTmp_BR::existsForItemId(spedFileItem, fiscalEstablishment.RecId, inventBalance.ItemId))
                {
                    spedFileItem.insertFromInventTable(fiscalEstablishment.RecId, inventTable);
                }
                if (!FBSpedFileUnitOfMeasureTmp_BR::existsForItemIdAndSymbol(spedFileUnitOfMeasure, fiscalEstablishment.RecId, inventBalance.ItemId, inventBalance.UnitId))
                {
                    spedFileUnitOfMeasure.insertFromItemIdAndSymbol(spedFileUnitSymbol, fiscalEstablishment.RecId, inventBalance.ItemId, inventBalance.UnitId);
                }

                spedRecord = this.newRecord('H010');

                spedRecord.addFieldString(inventTable.ItemId);
                spedRecord.addFieldString(FBSpedFileUnitSymbolTmp_BR::findOrCreateSpedSymbol(spedFileUnitSymbol, inventBalance.UnitId));
                spedRecord.addFieldNumeric(qty, 3);
                spedRecord.addFieldNumeric(valuePerUnit, 6);
                spedRecord.addFieldNumeric(value, 2);
                spedRecord.addFieldString(FBSpedFileCreator_Fiscal_BR::spedInventOwner(inventBalance.InventOwner));
                spedRecord.addFieldString(inventBalance.InventOwner == InventCountingGroup_BR::OwnStock ? '' : spedFileParty.code());
                spedRecord.addFieldEmpty();
                spedRecord.addFieldString(inventBalance.InventoryAccountNum);
                spedRecord.addFieldNumeric(value, 2);

                this.addChildRecord(_parentRecord, spedRecord);

                if (_mot_inv == BlockH_MOT_INV_05)
                {
                    this.createRecordH020(FBSpedFiscalMethodParameters_BR::construct()
                            .withParentRecord(spedRecord)
                            .withInventBalance(inventBalance));
                }

                if (_mot_inv == BlockH_MOT_INV_06)
                {
                    this.createRecordH030(spedRecord, _bookingPeriod, inventBalance);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordH030</Name>
				<Source><![CDATA[
    private void createRecordH030(FBSpedRecord_BR _parentRecord, FBBookingPeriod_BR _bookingPeriod, FBInventBalance_BR _inventBalance)
    {
        InventLocation inventLocation;
        FBICMSSTInventoryBalance_BR icmsstInventoryBalance;
        InventDim inventDim;

        select sum(ICMSTaxAmount), sum(ICMSSTTaxAmount), sum(ICMSSTTaxBaseAmount), sum(ICMSSTFCPTaxAmount), sum(Quantity) from icmsstInventoryBalance
            where icmsstInventoryBalance.ItemId == _inventBalance.ItemId
                && icmsstInventoryBalance.FBBookingPeriod_BR == _bookingPeriod.RecId
            exists join inventDim
                where inventDim.inventDimId == icmsstInventoryBalance.InventDimId
            exists join inventLocation
                where inventLocation.InventLocationId == inventDim.InventLocationId
                    && inventLocation.InventCountingGroup_BR == _inventBalance.InventOwner
                    && ((!_inventBalance.CustVendAccount && !inventLocation.CustAccount_BR && !inventLocation.VendAccount)
                        || (_inventBalance.CustVendAccount
                            && (inventLocation.CustAccount_BR == _inventBalance.CustVendAccount
                                || inventLocation.VendAccount == _inventBalance.CustVendAccount)));
        
        FBSpedRecord_BR spedRecord = this.newRecord('H030');

        spedRecord.addFieldNumeric(icmsstInventoryBalance.ICMSTaxAmount / icmsstInventoryBalance.Quantity, 2); // VL_ICMS_OP
        spedRecord.addFieldNumeric(icmsstInventoryBalance.ICMSSTTaxBaseAmount / icmsstInventoryBalance.Quantity, 2); // VL_BC_ICMS_ST
        spedRecord.addFieldNumeric(icmsstInventoryBalance.ICMSSTTaxAmount / icmsstInventoryBalance.Quantity, 2); // VL_ICMS_ST
        spedRecord.addFieldNumeric(icmsstInventoryBalance.ICMSSTFCPTaxAmount / icmsstInventoryBalance.Quantity, 2); // VL_FCP

        this.addChildRecord(_parentRecord, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordH990</Name>
				<Source><![CDATA[
    private void createRecordH990()
    {
        FBSpedRecord_BR spedRecord;

        spedRecord = FBSpedRecord_BR::constructEmpty('H990');

        spedRecord.addFieldNumeric(spedFile.totalRecordsInBlock('H') + 2);

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordK200</Name>
				<Source><![CDATA[
    private void createRecordK200(date _balanceDate)
    {
        FBInventBalance_BR inventBalance;
        InventTable inventTable;

        while select inventBalance
            where inventBalance.BookingPeriod == fbBookingPeriod.RecId
                && inventBalance.MonthRef == _balanceDate
                && inventBalance.PhysicalOnHandQty > 0
            join firstOnly ItemId from inventTable
                where inventTable.ItemId == inventBalance.ItemId
                    && (inventTable.InventProductType_BR == '00'
                        || inventTable.InventProductType_BR == '01'
                        || inventTable.InventProductType_BR == '02'
                        || inventTable.InventProductType_BR == '03'
                        || inventTable.InventProductType_BR == '04'
                        || inventTable.InventProductType_BR == '05'
                        || inventTable.InventProductType_BR == '06'
                        || inventTable.InventProductType_BR == '10')
        {
            if (inventBalance.CustVendAccount)
            {
                spedFileParty = FBSpedFileCreator_Fiscal_BR::getInventBalanceSpedFileParty(inventBalance, spedFileParty, fiscalEstablishment);
            }

            if (!FBSpedFileItemTmp_BR::existsForItemId(spedFileItem, fiscalEstablishment.RecId, inventBalance.ItemId))
            {
                spedFileItem.insertFromInventTable(fiscalEstablishment.RecId, inventTable);
            }

            spedFileBlockKWriter.writeRecordK200(_balanceDate, inventBalance.ItemId, inventBalance.PhysicalOnHandQty, inventBalance.InventOwner);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordK220</Name>
				<Source><![CDATA[
    private void createRecordK220(date _toDate)
    {
        while select SpedItemId, ItemId from spedFileManufacturedProduct
            where spedFileManufacturedProduct.FiscalEstablishmentRecId == fiscalEstablishment.RecId
                && spedFileManufacturedProduct.SpedItemId != spedFileManufacturedProduct.ItemId
            join ReferencedDate, TotalGoodQty from spedFileManufacturedProductInPeriod
                where spedFileManufacturedProductInPeriod.FiscalEstablishmentRecId == spedFileManufacturedProduct.FiscalEstablishmentRecId
                    && spedFileManufacturedProductInPeriod.SpedItemId == spedFileManufacturedProduct.SpedItemId
                    && spedFileManufacturedProductInPeriod.ReferencedDate == _toDate
                    && spedFileManufacturedProductInPeriod.TotalGoodQty > 0
        {
            spedFileBlockKWriter.writeRecordK220(
                spedFileManufacturedProductInPeriod.ReferencedDate,
                spedFileManufacturedProduct.SpedItemId,
                spedFileManufacturedProduct.ItemId,
                spedFileManufacturedProductInPeriod.TotalGoodQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordK990</Name>
				<Source><![CDATA[
    private void createRecordK990()
    {
        FBSpedRecord_BR spedRecord;

        spedRecord = FBSpedRecord_BR::constructEmpty('K990');

        spedRecord.addFieldNumeric(spedFile.totalRecordsInBlock('K') + 2);

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalSituationForFiscalReceipt</Name>
				<Source><![CDATA[
    private FBFiscalDocumentSituation_BR getFiscalSituationForFiscalReceipt(FiscalDocumentStatus_BR retailFiscalReceiptStatus)
    {
        FBFiscalDocumentSituation_BR    situation;

        switch (retailFiscalReceiptStatus)
        {
            case FiscalDocumentStatus_BR::Created:
            case FiscalDocumentStatus_BR::Approved:
                situation = FBFiscalDocumentSituation_BR::Regular;
                break;
            case FiscalDocumentStatus_BR::Cancelled:
                situation = FBFiscalDocumentSituation_BR::Cancelled;
                break;
        }

        return situation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatedIcmsPaymentMonthRef</Name>
				<Source><![CDATA[
    private str getFormatedIcmsPaymentMonthRef(date _icmsPaymentMonthRef)
    {
        return date2str(_icmsPaymentMonthRef, 32, 0, DateSeparator::None, 2, DateSeparator::None, 4, DateFlags::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventoryBalancesForItem</Name>
				<Source><![CDATA[
    private container getInventoryBalancesForItem(date _balanceDate, InventTable _inventTable)
    {
        FiscalEstablishmentInventSite_BR    fiscalEstablishmentInventSite;
        InventSum                           inventSum;
        InventDim                           inventDim;
        InventDimParm                       inventDimParm;
        InventSumFinancial                  inventSumFinancial;
        InventQty                           qty;
        CostAmount                          value;

        while select fiscalEstablishmentInventSite
            where fiscalEstablishmentInventSite.FiscalEstablishment_BR == fiscalEstablishment.RecId
        {
            inventSum.ItemId = _inventTable.ItemId;

            inventDim.InventSiteId = fiscalEstablishmentInventSite.InventSite;

            inventDimParm.InventSiteIdFlag = NoYes::Yes;
            inventDimParm.ItemIdFlag = NoYes::Yes;

            inventSumFinancial = InventSumFinancial::newSumReport(_balanceDate, inventSum, inventDim, inventDimParm);

            qty     += inventSumFinancial.qty();
            value   += inventSumFinancial.value();
        }

        return [qty, value];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventoryReportingDate</Name>
				<Source><![CDATA[
    private date getInventoryReportingDate()
    {
        return endmth(DateTimeUtil::date(DateTimeUtil::addMonths(DateTimeUtil::newDateTime(fbBookingPeriod.periodTo(), 0), -2)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTableMainAccount</Name>
				<Source><![CDATA[
    private MainAccountNum getInventTableMainAccount(InventTable _inventTable)
    {
        inventPosting inventPosting;

        select firstonly inventPosting
            where inventPosting.ItemRelation  == _inventTable.ItemId
                && inventPosting.InventAccountType == InventAccountType::PurchReceipt;

        if (!inventPosting)
        {
            select firstonly inventPosting
                where inventPosting.ItemRelation == _inventTable.ItemId
                    && inventPosting.InventAccountType == InventAccountType::SalesRevenue;
        }

        if (!inventPosting)
        {
            select firstonly inventPosting
                where inventPosting.ItemRelation == _inventTable.itemGroupId()
                    && inventPosting.ItemCode == InventPostingItemCode::GroupId
                    && inventPosting.InventAccountType == InventAccountType::PurchReceipt;
        }

        if (!inventPosting)
        {
            select firstonly inventPosting
                where inventPosting.ItemRelation == _inventTable.ItemGroupId()
                    && inventPosting.ItemCode == InventPostingItemCode::GroupId
                    && inventPosting.InventAccountType == InventAccountType::SalesRevenue;
        }

        if (!inventPosting)
        {
            select firstonly inventPosting
                where inventPosting.ItemRelation == _inventTable.ItemGroupId()
                    && inventPosting.ItemCode == InventPostingItemCode::GroupId
                    && inventPosting.InventAccountType == InventAccountType::InventReceipt;
        }

        return inventPosting.ledgerAccountName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReferencedProcessAgencyValue</Name>
				<Source><![CDATA[
    private str 1 getReferencedProcessAgencyValue(Agency_BR _referencedProcessAgency)
    {
        str 1 agency;

        switch (_referencedProcessAgency)
        {
            case Agency_BR::Sefaz :
                agency = '0';
                break;
            case Agency_BR::JusticaFederal :
                agency = '1';
                break;
            case Agency_BR::JusticaEstadual:
                agency = '2';
                break;
            case Agency_BR::Blank:
                break;
            default :
                agency = '9';
                break;
        }

        return agency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isElectronicFiscalDocFromOwnEstab</Name>
				<Source><![CDATA[
    private boolean isElectronicFiscalDocFromOwnEstab(FiscalDocument_BR _fiscalDocument)
    {
        return _fiscalDocument.FiscalDocumentIssuer == FiscalDocumentIssuer_BR::OwnEstablishment
            && (_fiscalDocument.isElectronic() || _fiscalDocument.isElectronicConsumerFiscalDoc());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(FBBookingPeriod_BR _fbBookingPeriod, FBFIle_BR _file, FBSPEDFileType_BR _spedFileType, FBSPEDFiscalVersion_BR _spedFiscalVersion, NoYes _enableBlockK = NoYes::No)
    {
        fbBookingPeriod         = _fbBookingPeriod;
        fbFile                  = _file;
        spedFileType            = _spedFileType;
        spedFiscalVersion       = _spedFiscalVersion;
        spedFile                = new FBSpedFile_BR();
        enableBlockK = _enableBlockK;
        blockK = enableBlockK ? FBSPEDFiscalBlockK_BR::Full : FBSPEDFiscalBlockK_BR::None;

        super();

        spedFiscalFileParameters = FBSpedFiscalFileParameters_BR::find(_fbBookingPeriod.FiscalEstablishmentId, _fbBookingPeriod.FiscalEstablishmentDataArea);

        fiscalEstablishment = _fbBookingPeriod.fiscalEstablishment();
        fiscalEstablishmentAddress  = fiscalEstablishment.postalAddress();
        fiscalBooksParametersPerState = FBParametersPerState_BR::find(fiscalEstablishmentAddress);
        fiscalEstablishmentStateIBGECode = fiscalEstablishment.stateIBGECode();
        restComplAmountsPerReasonCode = new Map(Types::String, Types::Container);
        LogisticsPostalAddress postalAddress = fiscalEstablishment.postalAddress();
        taxReasonCodeForRestitutionComplementSetupHeading = TaxReasonCodeForRestitutionComplementSetupHeading_BR::findByCountryRegionIdAndStateId(postalAddress.CountryRegionId, postalAddress.State);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFileContent</Name>
				<Source><![CDATA[
    protected void populateFileContent()
    {
        changeCompany (fbBookingPeriod.FiscalEstablishmentDataArea)
        {
            this.createRecord0000();
            this.createRecord0001();
            if (this.shouldCreate0002())
            {
                this.createRecord0002();
            }
            this.createRecord0005();
            this.createRecord0015();
            this.createRecord0100();
            this.createRecord0300();

            if(spedFiscalVersion >= FBSPEDFiscalVersion_BR::v112)
            {
                this.createRecordB990();
            }

            this.createBlockC();

            this.createBlockD();

            this.createRecordE100();
            this.createRecordE500();
            this.createRecordE200();
            this.createRecordE300();
            this.createRecordE990();

            this.createRecordG110();
            this.createRecordG990();

            this.createRecordH005();
            this.createRecordH990();

            this.createBlockK_telemetry();

            this.createRecord1010();
            if (this.shouldCreate1250())
            {
                this.createRecord1250();
            }
            if (this.shouldCreate1900())
            {
                this.createRecord1900();
            }
            this.createRecord1990();

            this.createRecord0200(null, fiscalEstablishment);
            this.createRecord0150(null, fiscalEstablishment);
            this.createRecord0400(null, fiscalEstablishment);
            this.createRecord0450(null, fiscalEstablishment);
            this.createRecord0460();
            this.createRecord0500();
            this.createRecord0600();
            this.createRecord0990();

            this.createRecord9900();
            this.createRecord9990();
            this.createRecord9999();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBlockC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates Block C in SPED fiscal report.
    /// </summary>
    /// <param name = "_parameters">A contract to pass the needed parameters. An instance of <c>FBSpedFiscalMethodParameters_BR</c> class.</param>
    protected void createBlockC(FBSpedFiscalMethodParameters_BR _parameters = null)
    {
        using (FBSpedTelemetry_BR context = FBSpedTelemetry_BR::construct(
            featureReference,
            FBSpedLocalizationInstrumentationConstants_BR::SpedFiscalBlockC,
            funcName(),
            enum2Str(spedFiscalVersion)))
        {
            try
            {
                this.createRecordC100ForAllDocuments();
                this.createRecordC350ForAllDocuments();
                this.createRecordC400ForAllPrinters();
                this.createRecordC500();
                this.createRecordC800();
                this.createRecordC990();

                context.parmIsSuccess(true);
            }
            finally
            {
                context.parmProcessedElementsCnt(spedFile.totalRecordsInBlock('C'));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBlockD</Name>
				<Source><![CDATA[
    private void createBlockD()
    {
        using (FBSpedTelemetry_BR context = FBSpedTelemetry_BR::construct(
            featureReference,
            FBSpedLocalizationInstrumentationConstants_BR::SpedFiscalBlockD,
            funcName(),
            enum2Str(spedFiscalVersion)))
        {
            try
            {
                this.createRecordD100();
                this.createRecordD500();
                this.createRecordD990();

                context.parmIsSuccess(true);
            }
            finally
            {
                context.parmProcessedElementsCnt(spedFile.totalRecordsInBlock('D'));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBlockK_telemetry</Name>
				<Source><![CDATA[
    private void createBlockK_telemetry()
    {
        using (FBSpedTelemetry_BR context = FBSpedTelemetry_BR::construct(
            featureReference,
            FBSpedLocalizationInstrumentationConstants_BR::SpedFiscalBlockk,
            funcName(),
            enum2Str(spedFiscalVersion)))
        {
            try
            {
                this.createBlockK();
                context.parmIsSuccess(true);
            }
            finally
            {
                context.parmProcessedElementsCnt(spedFile.totalRecordsInBlock('K'));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreateC110</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether C110 records should be created.
    /// </summary>
    /// <param name="_fiscalDocument">
    /// The <c>FiscalDocument_BR</c> table buffer.
    /// </param>
    /// <returns>
    /// true, if the record can be created, otherwise false.
    /// </returns>
    protected boolean shouldCreateC110(FiscalDocument_BR _fiscalDocument)
    {
        return !(_fiscalDocument.isElectronic() && _fiscalDocument.Status == FiscalDocumentStatus_BR::Cancelled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreateC111</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether C111 records should be created.
    /// </summary>
    /// <param name="_fiscalDocument">
    /// The <c>FiscalDocument_BR</c> table buffer.
    /// </param>
    /// <returns>
    /// true, if the record can be created, otherwise false.
    /// </returns>
    protected boolean shouldCreateC111(FiscalDocument_BR _fiscalDocument)
    {
        boolean ret = true;

        if (_fiscalDocument.isElectronic())
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreateC195</Name>
				<Source><![CDATA[
    private boolean shouldCreateC195(FiscalDocument_BR _fiscalDocument)
    {
        return (_fiscalDocument.Model == FiscalBooksConstants_BR::FiscalDocModel_01
                || _fiscalDocument.Model == FiscalBooksConstants_BR::FiscalDocModel_1B
                || _fiscalDocument.Model == FiscalBooksConstants_BR::FiscalDocModel_55);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreateC195CAT66</Name>
				<Source><![CDATA[
    private boolean shouldCreateC195CAT66(FiscalDocument_BR _fiscalDocument)
    {
        return this.shouldCreateC195(_fiscalDocument) || _fiscalDocument.Model == FiscalBooksConstants_BR::FiscalDocModel_65 ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs an instance of <c>FBSpedFileCreator_Fiscal_BR</c>.
    /// </summary>
    /// <param name="_fbBookingPeriod">
    ///     The booking period to be used by the class in oder to determine which data should be selected to be exported to the file.
    /// </param>
    /// <param name="_fbFile">
    ///     An instance of <c>FBFile_BR</c> representing the disk file where the data should be written to.
    /// </param>
    /// <param name="_spedFileType">
    ///     A <c>FBSPEDFileType_BR</c> enum element.
    /// </param>
    /// <param name="_spedFiscalVersion">
    ///     The version of the SPED fiscal file.
    /// </param>
    /// <returns>
    ///     The new instance of <c>FBSpedFileCreator_Fiscal_BR</c>.
    /// </returns>
    public static FBSpedFileCreator_Fiscal_BR construct(FBBookingPeriod_BR _fbBookingPeriod, FBFile_BR _fbFile, FBSPEDFileType_BR _spedFileType, FBSPEDFiscalVersion_BR _spedFiscalVersion, NoYes _enableBlockK = NoYes::No)
    {
        return new FBSpedFileCreator_Fiscal_BR(_fbBookingPeriod, _fbFile, _spedFileType, _spedFiscalVersion, _enableBlockK);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventBalanceSpedFileParty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the SPED file party related to the inventory balance record.
    /// </summary>
    /// <param name="_inventBalance">
    /// The inventory balance containing a third party.
    /// </param>
    /// <param name="_spedFileParty">
    /// The SPED file party table.
    /// </param>
    /// <param name="_fiscalEstablishment">
    /// The fiscal establishment of the third party.
    /// </param>
    /// <returns>
    /// The SPED file party record.
    /// </returns>
    /// <remarks>
    /// A record is inserted if it does not exist yet.
    /// </remarks>
    public static FBSpedFilePartyTmp_BR getInventBalanceSpedFileParty(FBInventBalance_BR _inventBalance, FBSpedFilePartyTmp_BR _spedFileParty, FiscalEstablishment_BR _fiscalEstablishment)
    {
        FBThirdPartyType_BR thirdPartyType = FBThirdPartyTypeHelper_BR::getFBThirdPartyTypeFromAccountType(_inventBalance.CustVendType);

        if (!FBSpedFilePartyTmp_BR::existsForAccountTypeAndNum(
                _spedFileParty,
                _fiscalEstablishment.RecId,
                thirdPartyType,
                _inventBalance.CustVendAccount))
        {
            _spedFileParty.insertInventBalance(_fiscalEstablishment.RecId, _inventBalance);
        }
        else
        {
            select firstOnly _spedFileParty
                where _spedFileParty.FiscalEstablishmentRecId == _fiscalEstablishment.RecId
                    && _spedFileParty.PartyType == thirdPartyType
                    && _spedFileParty.AccountNum == _inventBalance.CustVendAccount;
        }

        return _spedFileParty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>spedInventOwner</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the inventory owner in SPED Fiscal format.
    /// </summary>
    /// <param name="_inventOwner">
    /// The inventory owner.
    /// </param>
    /// <returns>
    /// The inventory owner in SPED Fiscal format.
    /// </returns>
    public static str spedInventOwner(InventCountingGroup_BR _inventOwner)
    {
        switch (_inventOwner)
        {
            case InventCountingGroup_BR::OwnStock               : return '0';
            case InventCountingGroup_BR::OwnStockInOtherPower   : return '1';
            case InventCountingGroup_BR::OtherStock             : return '2';

            default : return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreate0210</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether 0210 record should be created or not.
    /// </summary>
    /// <returns>
    /// true, if the record should be created; otherwise, false.
    /// </returns>
    protected boolean shouldCreate0210()
    {
        const date Record0210DepricationDate = 1\1\2022;
        return (spedFiscalVersion < FBSPEDFiscalVersion_BR::v111 || !conFind([FiscalBooksConstants_BR::IBGECode_StateRJ, FiscalBooksConstants_BR::IBGECode_StateSP], fiscalEstablishmentStateIBGECode)) && (fbBookingPeriod.periodTo() < Record0210DepricationDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreateC100</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether C100 record should be created or not.
    /// </summary>
    /// <returns>
    /// true, if the record should be created; otherwise, false.
    /// </returns>
    protected boolean shouldCreateC100(FBBookingPeriodFiscalDocument_BR  _fbBookingPeriodFiscalDocument)
    {
        return conFind(RecordC100DeprecatedStatuses, _fbBookingPeriodFiscalDocument.FiscalSituation) == 0 ||
            fbBookingPeriod.periodTo() < RecordC100ForDiscardDeniedFiscalDocsDeprecationDate ||
            spedFiscalVersion < FBSPEDFiscalVersion_BR::v116;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreateC140</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether C140 record should be created or not.
    /// </summary>
    /// <param name="_fiscalDocument">
    /// The <c>FiscalDocument_BR</c> table buffer.
    /// </param>
    /// <returns>
    /// true, if the record should be created; otherwise, false.
    /// </returns>
    protected boolean shouldCreateC140(FiscalDocument_BR _fiscalDocument)
    {
        return _fiscalDocument.Model == FiscalBooksConstants_BR::FiscalDocModel_01 && (spedFiscalVersion < FBSPEDFiscalVersion_BR::v111 || fiscalEstablishmentStateIBGECode != FiscalBooksConstants_BR::IBGECode_StateSC);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreateC460</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether C460 record should be created or not.
    /// </summary>
    /// <returns>
    /// true, if the record should be created; otherwise, false.
    /// </returns>
    protected boolean shouldCreateC460()
    {
        return spedFiscalVersion < FBSPEDFiscalVersion_BR::v111 || fiscalEstablishmentStateIBGECode != FiscalBooksConstants_BR::IBGECode_StateSC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordE115</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record E115 in SPED fiscal report.
    /// </summary>
    /// <param name = "_parameters">A contract to pass the needed parameters. An instance of <c>FBSpedFiscalMethodParameters_BR</c> class.</param>
    protected void createRecordE115(FBSpedFiscalMethodParameters_BR _parameters)
    {
        FBFiscalDocumentAdjustment_BR fiscalDocumentAdjustment;
        FBFiscalDocumentAdjustmentCodeICMS_BR fiscalDocumentAdjustmentCode;

        while select sum(TaxAmount) from fiscalDocumentAdjustment
            group by fiscalDocumentAdjustmentCode.SpedAdjustmentCode,
                     fiscalDocumentAdjustmentCode.Description,
                     fiscalDocumentAdjustmentCode.State
            where fiscalDocumentAdjustment.FBTaxAssessment_BR == _parameters.parmTaxAssessment().RecId
            join fiscalDocumentAdjustmentCode
                where fiscalDocumentAdjustmentCode.RecId == fiscalDocumentAdjustment.FBFiscalDocumentAdjustmentCodeICMS_BR
                    && fiscalDocumentAdjustmentCode.Table52
        {
            FBSpedRecord_BR spedRecord = this.newRecord('E115');

            spedRecord.addFieldString(fiscalDocumentAdjustmentCode.SpedAdjustmentCode);     // COD_INF_ADIC
            
            if (fiscalBooksParametersPerState.EnableDocumentAdjustment)
            {
                spedRecord.addFieldNumeric(0, 2);                                           // VL_INF_ADIC
                spedRecord.addFieldEmpty();                                                 // DESCR_COMPL_AJ
            }
            else
            {
                spedRecord.addFieldNumeric(fiscalDocumentAdjustment.TaxAmount, 2);          // VL_INF_ADIC
                spedRecord.addFieldString(fiscalDocumentAdjustmentCode.Description);        // DESCR_COMPL_AJ
            }
        
            this.addRecord(spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreate1900</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether 1900 record and all its childs should be created.
    /// </summary>
    /// <returns>
    /// true, if the record can be created, otherwise false.
    /// </returns>
    protected boolean shouldCreate1900()
    {
        return (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v112 && fiscalBooksParametersPerState.Block1900 == NoYes::Yes)
            || (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v116
                && fiscalBooksParametersPerState.checkStateIdForBlock1900()
                && (isCreatedC197 || isCreatedD197)
                && this.isMandatoryFieldsAreFilledIn());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMandatoryFieldsAreFilledIn</Name>
				<Source><![CDATA[
    private boolean isMandatoryFieldsAreFilledIn()
    {
        boolean ret;

        ret = fiscalBooksParametersPerState.validateMandatoryBlock1900();

        if (fiscalBooksParametersPerState.IsRetailCompany)
        {
            ret = fiscalBooksParametersPerState.validateMandatoryBlock1900Retail() && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1900</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record 1900 in SPED fiscal report.
    /// </summary>
    protected void createRecord1900()
    {
        FBSubAssessmentCalculatorICMSST_BR calculator = FBSubAssessmentCalculatorICMSST_BR::construct();
        FBSpedRecord_BR spedRecord;

        using (FBSpedTelemetry_BR context = FBSpedTelemetry_BR::construct(
            featureReference,
            FBSpedLocalizationInstrumentationConstants_BR::SpedFiscalRecord1900,
            funcName(),
            enum2Str(spedFiscalVersion)))
        {
            try
            {
                calculator.parmFBBookingPeriod(fbBookingPeriod);
                calculator.parmIsRetail(fiscalBooksParametersPerState.IsRetailCompany);
                calculator.parmSubTaxAssessment(fiscalBooksParametersPerState.FBSubTaxAssessment_BR);
                calculator.calculate();

                if (!calculator.getDebitAdjustments())
                {
                    return;
                }

                spedRecord = this.newRecord('1900');
                spedRecord.addFieldString(int2Str(fiscalBooksParametersPerState.FBSubTaxAssessment_BR));    // IND_APUR_ICMS
                spedRecord.addFieldString(fiscalBooksParametersPerState.SubTaxAssessmentDescription);       // DESCR_COMPL_OUT_APUR

                this.addRecord(spedRecord);

                context.parmIsSuccess(true);
            }
            finally
            {
                context.parmProcessedElementsCnt(spedFile.totalRecordsOfType('1900'));
            }
        }

        this.createRecord1910(FBSpedFiscalMethodParameters_BR::construct()
            .withParentRecord(spedRecord)
            .withSubAssessmentCalculatorICMSST(calculator));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1910</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record 1910 in SPED fiscal report.
    /// </summary>
    /// <param name = "_parameters">A contract to pass the needed parameters. An instance of <c>FBSpedFiscalMethodParameters_BR</c> class.</param>
    protected void createRecord1910(FBSpedFiscalMethodParameters_BR _parameters)
    {
        FBSpedRecord_BR spedRecord = this.newRecord('1910');

        spedRecord.addFieldDate(fbBookingPeriod.periodFrom());    // DT_INI
        spedRecord.addFieldDate(fbBookingPeriod.periodTo());      // DT_FIN

        this.addChildRecord(_parameters.parmParentRecord(), spedRecord);

        this.createRecord1920(FBSpedFiscalMethodParameters_BR::construct()
            .withParentRecord(spedRecord)
            .withSubAssessmentCalculatorICMSST(_parameters.parmSubAssessmentCalculatorICMSST()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1920</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record 1920 in SPED fiscal report.
    /// </summary>
    /// <param name = "_parameters">A contract to pass the needed parameters. An instance of <c>FBSpedFiscalMethodParameters_BR</c> class.</param>
    protected void createRecord1920(FBSpedFiscalMethodParameters_BR _parameters)
    {
        AmountMST debitAdjustments, creditAdjustments, debitsOutgoing, creditReversals, withTaxCredit, debitReversals, creditBalanceFromPrevious, deductions, collectAmounts, balance, creditInventory;

        debitAdjustments = _parameters.parmSubAssessmentCalculatorICMSST().getDebitAdjustments();
        creditAdjustments = _parameters.parmSubAssessmentCalculatorICMSST().getCreditAdjustments();
        debitsOutgoing = _parameters.parmSubAssessmentCalculatorICMSST().getDebitOutgoing();
        creditReversals = _parameters.parmSubAssessmentCalculatorICMSST().getCreditReversals();
        withTaxCredit = _parameters.parmSubAssessmentCalculatorICMSST().getPurchasesWithTaxCredit();
        debitReversals = _parameters.parmSubAssessmentCalculatorICMSST().getDebitReversals();
        creditBalanceFromPrevious = _parameters.parmSubAssessmentCalculatorICMSST().getCreditBalanceFromPreviousPeriod();
        deductions = _parameters.parmSubAssessmentCalculatorICMSST().getDeductions();
        collectAmounts = _parameters.parmSubAssessmentCalculatorICMSST().getCollectAmounts();
        creditInventory = _parameters.parmSubAssessmentCalculatorICMSST().getCreditInventory();
        balance = _parameters.parmSubAssessmentCalculatorICMSST().getBalance();

        FBSpedRecord_BR spedRecord = this.newRecord('1920');

        spedRecord.addFieldNumeric(debitsOutgoing, 2);   // VL_TOT_TRANSF_DEBITOS_OA
        spedRecord.addFieldNumeric(debitAdjustments, 2);   // VL_TOT_AJ_DEBITOS_OA
        spedRecord.addFieldNumeric(creditReversals + (balance < 0 ? -balance : 0), 2);   // VL_ESTORNOS_CRED_OA
        spedRecord.addFieldNumeric(withTaxCredit, 2);   // VL_TOT_TRANSF_CREDITOS_OA
        spedRecord.addFieldNumeric(creditAdjustments + creditInventory, 2);   // VL_TOT_AJ_CREDITOS_OA
        spedRecord.addFieldNumeric(debitReversals, 2);   // VL_ESTORNOS_DEB_OA
        spedRecord.addFieldNumeric(creditBalanceFromPrevious, 2);   // VL_SLD_CREDOR_ANT_OA
        spedRecord.addFieldNumeric(balance >= 0 ? balance : 0, 2);   // VL_SLD_APURADO_OA
        spedRecord.addFieldNumeric(deductions, 2);   // VL_TOT_DED
        spedRecord.addFieldNumeric(balance - deductions >= 0 ? balance -  deductions : 0, 2);   // VL_ICMS_RECOLHER_OA
        spedRecord.addFieldNumeric(0, 2);   // VL_SLD_CREDOR_TRANSP_OA
        spedRecord.addFieldNumeric(collectAmounts, 2);   // DEB_ESP_OA

        this.addChildRecord(_parameters.parmParentRecord(), spedRecord);

        if (fiscalBooksParametersPerState.IsRetailCompany)
        {
            this.createRecord1921ForIncoming(FBSpedFiscalMethodParameters_BR::construct()
                .withParentRecord(spedRecord)
                .withAmount(creditAdjustments));
            this.createRecord1921ForCreditInventory(FBSpedFiscalMethodParameters_BR::construct()
                .withParentRecord(spedRecord)
                .withAmount(creditInventory));
            this.createRecord1921ForCreditReversal(FBSpedFiscalMethodParameters_BR::construct()
                .withParentRecord(spedRecord)
                .withAmount(creditReversals));
            this.createRecord1921ForOutgoing(FBSpedFiscalMethodParameters_BR::construct()
                .withParentRecord(spedRecord)
                .withAmount(debitAdjustments));
        }
        else
        {
            this.createRecord1921ForOutgoing(FBSpedFiscalMethodParameters_BR::construct()
                .withParentRecord(spedRecord)
                .withAmount(debitAdjustments));
            this.createRecord1921ForIncoming(FBSpedFiscalMethodParameters_BR::construct()
                .withParentRecord(spedRecord)
                .withAmount(creditAdjustments));
        }

        this.createRecord1921ForDifference(FBSpedFiscalMethodParameters_BR::construct()
            .withParentRecord(spedRecord)
            .withAmount(balance));
        this.createRecord1926(FBSpedFiscalMethodParameters_BR::construct()
            .withParentRecord(spedRecord)
            .withAmount(balance));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1921</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record 1921 in SPED fiscal report.
    /// </summary>
    /// <param name = "_parameters">A contract to pass the needed parameters. An instance of <c>FBSpedFiscalMethodParameters_BR</c> class.</param>
    /// <returns>
    /// Returns currently created record.
    /// </returns>
    /// <remarks>
    /// If amount is zero, no record 1921 will be created.
    /// </remarks>
    protected FBSpedRecord_BR createRecord1921(FBSpedFiscalMethodParameters_BR _parameters)
    {
        if (_parameters.parmAmount() == 0)
        {
            return null;
        }

        FBSpedRecord_BR spedRecord = this.newRecord('1921');

        spedRecord.addFieldString(_parameters.parmGeneralAdjustmentCodeICMS().SpedAdjustmentCode, 8);    // COD_AJ_APUR
        spedRecord.addFieldString(_parameters.parmGeneralAdjustmentCodeICMS().Description);            // DESCR_COMPL_AJ
        spedRecord.addFieldNumeric(abs(_parameters.parmAmount()), 2);                                    // VL_AJ_APUR

        this.addChildRecord(_parameters.parmParentRecord(), spedRecord);

        return spedRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1921ForCreditInventory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record 1921 for credit of inventory adjustment in SPED fiscal report.
    /// </summary>
    /// <param name = "_parameters">A contract to pass the needed parameters. An instance of <c>FBSpedFiscalMethodParameters_BR</c> class.</param>
    protected void createRecord1921ForCreditInventory(FBSpedFiscalMethodParameters_BR _parameters)
    {
        this.createRecord1921(FBSpedFiscalMethodParameters_BR::construct()
            .withParentRecord(_parameters.parmParentRecord())
            .withGeneralAdjustmentCodeICMS(FBGeneralAdjustmentCode_BR::find(fiscalBooksParametersPerState.ICMSGeneralAdjustmentCodeCreditInventory))
            .withAmount(_parameters.parmAmount()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1921ForCreditReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record 1921 for credit reversal adjustment in SPED fiscal report.
    /// </summary>
    /// <param name = "_parameters">A contract to pass the needed parameters. An instance of <c>FBSpedFiscalMethodParameters_BR</c> class.</param>
    protected void createRecord1921ForCreditReversal(FBSpedFiscalMethodParameters_BR _parameters)
    {
        this.createRecord1921(FBSpedFiscalMethodParameters_BR::construct()
            .withParentRecord(_parameters.parmParentRecord())
            .withGeneralAdjustmentCodeICMS(FBGeneralAdjustmentCode_BR::find(fiscalBooksParametersPerState.ICMSGeneralAdjustmentCodeCreditReversal))
            .withAmount(_parameters.parmAmount()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1921ForDifference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record 1921 for complement/restitution (reverse) adjustment in SPED fiscal report.
    /// </summary>
    /// <param name = "_parameters">A contract to pass the needed parameters. An instance of <c>FBSpedFiscalMethodParameters_BR</c> class.</param>
    protected void createRecord1921ForDifference(FBSpedFiscalMethodParameters_BR _parameters)
    {
        this.createRecord1921(FBSpedFiscalMethodParameters_BR::construct()
            .withParentRecord(_parameters.parmParentRecord())
            .withGeneralAdjustmentCodeICMS(FBGeneralAdjustmentCode_BR::find(_parameters.parmAmount() > 0 ?
                fiscalBooksParametersPerState.ICMSGeneralAdjustmentCodeComplement :
                fiscalBooksParametersPerState.ICMSGeneralAdjustmentCodeRestitution))
            .withAmount(_parameters.parmAmount()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1921ForIncoming</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record 1921 for credit from incoming fiscal documents adjustment in SPED fiscal report.
    /// </summary>
    /// <param name = "_parameters">A contract to pass the needed parameters. An instance of <c>FBSpedFiscalMethodParameters_BR</c> class.</param>
    protected void createRecord1921ForIncoming(FBSpedFiscalMethodParameters_BR _parameters)
    {
        FBSpedRecord_BR spedRecord = this.createRecord1921(FBSpedFiscalMethodParameters_BR::construct()
            .withParentRecord(_parameters.parmParentRecord())
            .withGeneralAdjustmentCodeICMS(FBGeneralAdjustmentCode_BR::find(fiscalBooksParametersPerState.ICMSGeneralAdjustmentCodeTaxableIncoming))
            .withAmount(_parameters.parmAmount()));

        using (FBSpedTelemetry_BR context = FBSpedTelemetry_BR::construct(
            featureReference,
            FBSpedLocalizationInstrumentationConstants_BR::SpedFiscalRecord1923,
            funcName(),
            enum2Str(spedFiscalVersion)))
        {
            try
            {
                this.createRecord1923ForIncoming(FBSpedFiscalMethodParameters_BR::construct().withParentRecord(spedRecord));
                context.parmIsSuccess(true);
            }
            finally
            {
                context.parmProcessedElementsCnt(spedFile.totalRecordsOfType('1923'));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1921ForOutgoing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record 1921 for debits from outgoing fiscal documents adjustment in SPED fiscal report.
    /// </summary>
    /// <param name = "_parameters">A contract to pass the needed parameters. An instance of <c>FBSpedFiscalMethodParameters_BR</c> class.</param>
    protected void createRecord1921ForOutgoing(FBSpedFiscalMethodParameters_BR _parameters)
    {
        FBSpedRecord_BR spedRecord = this.createRecord1921(FBSpedFiscalMethodParameters_BR::construct()
            .withParentRecord(_parameters.parmParentRecord())
            .withGeneralAdjustmentCodeICMS(FBGeneralAdjustmentCode_BR::find(fiscalBooksParametersPerState.ICMSGeneralAdjustmentCodeTaxableOutgoing))
            .withAmount(_parameters.parmAmount()));

        using (FBSpedTelemetry_BR context = FBSpedTelemetry_BR::construct(
            featureReference,
            FBSpedLocalizationInstrumentationConstants_BR::SpedFiscalRecord1923,
            funcName(),
            enum2Str(spedFiscalVersion)))
        {
            try
            {
                this.createRecord1923ForOutgoing(FBSpedFiscalMethodParameters_BR::construct().withParentRecord(spedRecord));
                context.parmIsSuccess(true);
            }
            finally
            {
                context.parmProcessedElementsCnt(spedFile.totalRecordsOfType('1923'));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1923</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record 1923 in SPED fiscal report.
    /// </summary>
    /// <param name = "_parameters">A contract to pass the needed parameters. An instance of <c>FBSpedFiscalMethodParameters_BR</c> class.</param>
    protected void createRecord1923(FBSpedFiscalMethodParameters_BR _parameters)
    {
        FBSpedRecord_BR spedRecord = this.newRecord('1923');

        if (!FBSpedFilePartyTmp_BR::existsForAccountTypeAndNum(
                spedFileParty,
                fiscalEstablishment.RecId,
                this.getFBThirdPartyTypeFromAccountType(_parameters.parmFiscalDocument().FiscalDocumentAccountType),
                _parameters.parmFiscalDocument().FiscalDocumentAccountNum))
        {
            spedFileParty.insertFromFiscalDocument(_parameters.parmFiscalDocument());
        }
        else
        {
            select firstonly spedFileParty
                where spedFileParty.PartyType == this.getFBThirdPartyTypeFromAccountType(_parameters.parmFiscalDocument().FiscalDocumentAccountType)
                    && spedFileParty.AccountNum == _parameters.parmFiscalDocument().FiscalDocumentAccountNum;
        }

        spedRecord.addFieldString(spedFileParty.code(), 60);                                    // COD_PART
        spedRecord.addFieldString(_parameters.parmFiscalDocument().Model, 2);                   //COD_MOD
        spedRecord.addFieldString(_parameters.parmFiscalDocument().FiscalDocumentSeries, 3);    //SER
        spedRecord.addFieldEmpty();                                             //SUB
        spedRecord.addFieldNumeric(_parameters.parmFiscalDocument().FiscalDocumentNumber);      //NUM_DOC
        spedRecord.addFieldDate(_parameters.parmFiscalDocument().AccountingDate);               //DT_DOC

        if (_parameters.parmItemId() && !FBSpedFileItemTmp_BR::existsForItemId(spedFileItem, fiscalEstablishment.RecId, _parameters.parmItemId()))
        {
            spedFileItem.insertFromFiscalDocumentLine(fiscalEstablishment.RecId, _parameters.parmItemId());
        }
        spedRecord.addFieldString(_parameters.parmItemId(), 60);                                //COD_ITEM
        spedRecord.addFieldNumeric(_parameters.parmAmount(), 2);                                //VL_AJ_ITEM
        spedRecord.addFieldString(_parameters.parmFiscalDocument().AccessKey);                  //CHV_DOCe

        this.addChildRecord(_parameters.parmParentRecord(), spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1923ForIncoming</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record 1923 for incoming fiscal documents in SPED fiscal report.
    /// </summary>
    /// <param name = "_parameters">A contract to pass the needed parameters. An instance of <c>FBSpedFiscalMethodParameters_BR</c> class.</param>
    protected void createRecord1923ForIncoming(FBSpedFiscalMethodParameters_BR _parameters)
    {
        if (!_parameters.parmParentRecord())
        {
            return;
        }

        Query q = new Query(fiscalBooksParametersPerState.IsRetailCompany ? queryStr(FBBlock1900IncomingFDRetail_BR) : queryStr(FBBlock1900IncomingFD_BR));

        FBBookingPeriod_BR::addQueryRange(q, fbBookingPeriod.RecId);

        if (!fiscalBooksParametersPerState.IsRetailCompany)
        {
            FBBookingPeriod_BR::addQueryRange(q, fbBookingPeriod.RecId, 2);
        }

        QueryRun qr = new QueryRun(q);

        FiscalDocument_BR fiscalDocument;
        FiscalDocumentLine_BR fiscalDocumentLine;
        if (fiscalBooksParametersPerState.IsRetailCompany)
        {
            while (qr.next())
            {
                fiscalDocument = qr.get(tableNum(FiscalDocument_BR));
                fiscalDocumentLine = qr.get(tableNum(FiscalDocumentLine_BR));
                FBICMSSTOrICMSIncomingTaxTrans_BR fbICMSSTOrICMSIncomingTaxTrans = qr.get(tableNum(FBICMSSTOrICMSIncomingTaxTrans_BR));

                this.createRecord1923(FBSpedFiscalMethodParameters_BR::construct()
                    .withParentRecord(_parameters.parmParentRecord())
                    .withFiscalDocument(fiscalDocument)
                    .withItemId(fiscalDocumentLine.ItemId)
                    .withAmount(fbICMSSTOrICMSIncomingTaxTrans.TaxAmountOther));
            }
        }
        else
        {
            while (qr.next())
            {
                fiscalDocument = qr.get(tableNum(FiscalDocument_BR));
                fiscalDocumentLine = qr.get(tableNum(FiscalDocumentLine_BR));
                FiscalDocumentTaxTransPresumed_BR fiscalDocumentTaxTransPresumed = qr.get(tableNum(FiscalDocumentTaxTransPresumed_BR));

                this.createRecord1923(FBSpedFiscalMethodParameters_BR::construct()
                    .withParentRecord(_parameters.parmParentRecord())
                    .withFiscalDocument(fiscalDocument)
                    .withItemId(fiscalDocumentLine.ItemId)
                    .withAmount(fiscalDocumentTaxTransPresumed.SPEDPresumedTaxAmount));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1923ForOutgoing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record 1923 for outgoing fiscal documents in SPED fiscal report.
    /// </summary>
    /// <param name = "_parameters">A contract to pass the needed parameters. An instance of <c>FBSpedFiscalMethodParameters_BR</c> class.</param>
    protected void createRecord1923ForOutgoing(FBSpedFiscalMethodParameters_BR _parameters)
    {
        if (!_parameters.parmParentRecord())
        {
            return;
        }

        Query q = new Query(fiscalBooksParametersPerState.IsRetailCompany ? queryStr(FBBlock1900OutgoingFDRetail_BR) : queryStr(FBBlock1900OutgoingFD_BR));
        QueryBuildDataSource qbds = q.dataSourceTable(tableNum(FiscalDocument_BR));
        findOrCreateRange_W(
            qbds,
            fieldNum(FiscalDocument_BR, RefTableId),
            strFmt('%1,%2,%3', SysQuery::valueNot(tableNum(VendInvoiceJour)), SysQuery::valueNot(tableNum(VendPackingSlipJour)), SysQuery::valueNot(tableNum(PurchComplementaryInvoiceHeader))));
        FBBookingPeriod_BR::addQueryRange(q, fbBookingPeriod.RecId);

        if (fiscalBooksParametersPerState.Consolidate1923ForOutgoing)
        {
            qbds = q.dataSourceTable(tableNum(FiscalDocument_BR));
            qbds.addGroupByField(fieldNum(FiscalDocument_BR, RecId));
            qbds.addGroupByField(fieldNum(FiscalDocument_BR, AccessKey));
            qbds.addGroupByField(fieldNum(FiscalDocument_BR, AccountingDate));
            qbds.addGroupByField(fieldNum(FiscalDocument_BR, FiscalDocumentAccountNum));
            qbds.addGroupByField(fieldNum(FiscalDocument_BR, FiscalDocumentAccountType));
            qbds.addGroupByField(fieldNum(FiscalDocument_BR, FiscalDocumentNumber));
            qbds.addGroupByField(fieldNum(FiscalDocument_BR, FiscalDocumentSeries));
            qbds.addGroupByField(fieldNum(FiscalDocument_BR, FiscalEstablishment));
            qbds.addGroupByField(fieldNum(FiscalDocument_BR, Model));
            qbds.addGroupByField(fieldNum(FiscalDocument_BR, ThirdPartyCNPJCPF));
            qbds.addGroupByField(fieldNum(FiscalDocument_BR, ThirdPartyIE));
            qbds.addGroupByField(fieldNum(FiscalDocument_BR, ThirdPartyName));
            qbds.addGroupByField(fieldNum(FiscalDocument_BR, ThirdPartyPhone));
            qbds.addGroupByField(fieldNum(FiscalDocument_BR, ThirdPartyPostalAddress));

            qbds = q.dataSourceTable(tableNum(FiscalDocumentTaxTrans_BR));
            qbds.addSelectionField(fieldNum(FiscalDocumentTaxTrans_BR, TaxAmountOther), SelectionField::Sum);
        }

        QueryRun qr = new QueryRun(q);

        while (qr.next())
        {
            FiscalDocument_BR fiscalDocument = qr.get(tableNum(FiscalDocument_BR));
            FiscalDocumentLine_BR fiscalDocumentLine = qr.get(tableNum(FiscalDocumentLine_BR));
            FiscalDocumentTaxTrans_BR fiscalDocumentTaxTrans = qr.get(tableNum(FiscalDocumentTaxTrans_BR));

            this.createRecord1923(FBSpedFiscalMethodParameters_BR::construct()
                .withParentRecord(_parameters.parmParentRecord())
                .withFiscalDocument(fiscalDocument)
                .withItemId(fiscalDocumentLine.ItemId)
                .withAmount(fiscalDocumentTaxTrans.TaxAmountOther));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1926</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record 1926 in SPED fiscal report.
    /// </summary>
    /// <param name = "_parameters">A contract to pass the needed parameters. An instance of <c>FBSpedFiscalMethodParameters_BR</c> class.</param>
    /// <remarks>
    /// If amount is zero or negative, no 1926 record will be created.
    /// </remarks>
    protected void createRecord1926(FBSpedFiscalMethodParameters_BR _parameters)
    {
        if (_parameters.parmAmount() <= 0)
        {
            return;
        }

        FBTaxAssessmentPayment_BR taxAssessmentPayment;
        FBTaxAssessment_BR taxAssessmentIcmsST;

        select firstOnly icmsObligationCode, DueDate, RevenueCode, Description, icmsPaymentMonthRef, RecId
            from taxAssessmentPayment
            where taxAssessmentPayment.Reversed == NoYes::No
                && taxAssessmentPayment.PaymentType == FBTaxAssessmentPaymentType_BR::Periodic
            exists join taxAssessmentIcmsST
                where taxAssessmentIcmsST.RecId == taxAssessmentPayment.FBTaxAssessment_BR
                    && taxAssessmentIcmsST.TaxType == TaxType_BR::ICMSST
                    && taxAssessmentIcmsST.State == fbBookingPeriod.fiscalEstablishment().postalAddress().State
                    && taxAssessmentIcmsST.FBBookingPeriod_BR == fbBookingPeriod.RecId;

        if (taxAssessmentPayment.RecId)
        {
            FBSpedRecord_BR spedRecord = this.newRecord('1926'); // REG

            spedRecord.addFieldString   (taxAssessmentPayment.ICMSObligationCode, 3); // COD_OR
            spedRecord.addFieldNumeric  (_parameters.parmAmount(), 2); // VL_OR
            spedRecord.addFieldDate     (taxAssessmentPayment.DueDate); // DT_VCTO
            spedRecord.addFieldString   (taxAssessmentPayment.RevenueCode); // COD_REC
            spedRecord.addFieldEmpty    (); // NUM_PROC
            spedRecord.addFieldEmpty    (); // IND_PROC
            spedRecord.addFieldEmpty    (); // PROC
            spedRecord.addFieldString   (taxAssessmentPayment.Description); // TXT_COMPL
            spedRecord.addFieldString   (this.getFormatedIcmsPaymentMonthRef(taxAssessmentPayment.ICMSPaymentMonthRef)); // MES_REF

            this.addChildRecord(_parameters.parmParentRecord(), spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordH020</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record H020 in SPED fiscal report.
    /// </summary>
    /// <param name = "_parameters">A contract to pass the needed parameters. An instance of <c>FBSpedFiscalMethodParameters_BR</c> class.</param>
    protected void createRecordH020(FBSpedFiscalMethodParameters_BR _parameters)
    {
        InventLocation inventLocation;
        FBICMSSTInventoryBalance_BR icmsstInventoryBalance;
        InventDim inventDim;
        FBInventBalance_BR inventBalance = _parameters.parmInventBalance();

        select sum(ICMSSTTaxAmount), sum(ICMSSTTaxBaseAmount) from icmsstInventoryBalance
            where icmsstInventoryBalance.ItemId == inventBalance.ItemId
                && icmsstInventoryBalance.FBBookingPeriod_BR == fbBookingPeriod.getPreviousBookingPeriod().RecId
            exists join inventDim
                where inventDim.inventDimId == icmsstInventoryBalance.InventDimId
            exists join inventLocation
                where inventLocation.InventLocationId == inventDim.InventLocationId
                    && inventLocation.InventCountingGroup_BR == inventBalance.InventOwner
                    && ((!inventBalance.CustVendAccount && !inventLocation.CustAccount_BR && !inventLocation.VendAccount)
                        || (inventBalance.CustVendAccount
                            && (inventLocation.CustAccount_BR == inventBalance.CustVendAccount
                                || inventLocation.VendAccount == inventBalance.CustVendAccount)));
        
        FBSpedRecord_BR spedRecord = this.newRecord('H020');

        spedRecord.addFieldString('060'); // CST_ICMS
        spedRecord.addFieldNumeric(icmsstInventoryBalance.ICMSSTTaxBaseAmount, 2); // BC_ICMS
        spedRecord.addFieldNumeric(icmsstInventoryBalance.ICMSSTTaxAmount, 2); // VL_ICMS

        this.addChildRecord(_parameters.parmParentRecord(), spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC180</Name>
				<Source><![CDATA[
    private FBSpedRecord_BR createRecordC180(FiscalDocument_BR _fiscalDocument, FiscalDocumentLine_BR _fiscalDocumentLine)
    {
        boolean recordCreated;

        if (!conFind([FiscalBooksConstants_BR::FiscalDocModel_01, FiscalBooksConstants_BR::FiscalDocModel_1B, FiscalBooksConstants_BR::FiscalDocModel_04, FiscalBooksConstants_BR::FiscalDocModel_55], _fiscalDocument.Model))
        {
            return null;
        }

        FiscalDocumentTaxTrans_BR fiscalDocumentTaxTransICMS, fiscalDocumentTaxTransICMSST;
        FiscalDocumentTaxTransPovertyFund_BR fiscalDocumentTaxTransPovertyFund;

        select firstonly fiscalDocumentTaxTransICMS
            where fiscalDocumentTaxTransICMS.FiscalDocumentLine ==_fiscalDocumentLine.RecId
                && fiscalDocumentTaxTransICMS.Type == TaxType_BR::ICMS
                && (fiscalDocumentTaxTransICMS.TaxationCode == FiscalBooksConstants_BR::TaxationCode10
                    || fiscalDocumentTaxTransICMS.TaxationCode == FiscalBooksConstants_BR::TaxationCode30
                    || fiscalDocumentTaxTransICMS.TaxationCode == FiscalBooksConstants_BR::TaxationCode60
                    || fiscalDocumentTaxTransICMS.TaxationCode == FiscalBooksConstants_BR::TaxationCode70);
        
        if (!fiscalDocumentTaxTransICMS)
        {
            return null;
        }

        select firstonly fiscalDocumentTaxTransICMSST
            where fiscalDocumentTaxTransICMSST.FiscalDocumentLine == _fiscalDocumentLine.RecId
                && fiscalDocumentTaxTransICMSST.Type == TaxType_BR::ICMSST
                && (fiscalDocumentTaxTransICMSST.TaxationCode == FiscalBooksConstants_BR::TaxationCode10
                    || fiscalDocumentTaxTransICMSST.TaxationCode == FiscalBooksConstants_BR::TaxationCode30
                    || fiscalDocumentTaxTransICMSST.TaxationCode == FiscalBooksConstants_BR::TaxationCode60
                    || fiscalDocumentTaxTransICMSST.TaxationCode == FiscalBooksConstants_BR::TaxationCode70)
        outer join fiscalDocumentTaxTransPovertyFund
            where fiscalDocumentTaxTransPovertyFund.FiscalDocumentTaxTrans_BR == fiscalDocumentTaxTransICMSST.RecId;

        FiscalDocumentTaxTransPresumed_BR presumedTaxTrans;
        if (fiscalDocumentTaxTransICMSST)
        {
            select firstonly presumedTaxTrans
                where presumedTaxTrans.FiscalDocumentTaxTrans_BR == fiscalDocumentTaxTransICMSST.RecId;
        }
        else
        {
            select firstonly presumedTaxTrans
                where presumedTaxTrans.FiscalDocumentTaxTrans_BR == fiscalDocumentTaxTransICMS.RecId;
        }

        if (!presumedTaxTrans && !fiscalDocumentTaxTransICMSST)
        {
            return null;
        }

        AmountMST icmsSTBaseAmount, icmsSTAmount, fcpAmount;

        if (presumedTaxTrans)
        {
            icmsSTBaseAmount = presumedTaxTrans.PresumedTaxBaseAmount;
            icmsSTAmount = presumedTaxTrans.PresumedTaxAmount + presumedTaxTrans.PresumedFCPTaxAmount;
            fcpAmount = presumedTaxTrans.PresumedFCPTaxAmount;
        }
        else
        {
            icmsSTBaseAmount = fiscalDocumentTaxTransICMSST.TaxBaseAmountOther;
            icmsSTAmount = fiscalDocumentTaxTransICMSST.TaxAmountOther;
            fcpAmount = fiscalDocumentTaxTransPovertyFund.TaxPovertyFundAmount;
        }

        FBSpedRecord_BR spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C180);
        spedRecord.addFieldString(int2Str(_fiscalDocumentLine.RespWithholdingICMSST)); // COD_RESP_RET
        spedRecord.addFieldNumericAbs(_fiscalDocumentLine.Quantity, 6); // QUANT_CONV
        if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v114)
        {
            spedRecord.addFieldString(FBSpedFileUnitSymbolTmp_BR::findOrCreateSpedSymbol(spedFileUnitSymbol, _fiscalDocumentLine.Unit), 6); // UNID
        }
        else
        {
            spedRecord.addFieldString(FBSpedFileUnitSymbolTmp_BR::findOrCreateSpedSymbol(spedFileUnitSymbol, _fiscalDocumentLine.Unit)); // UNID
        }
        spedRecord.addFieldNumeric(_fiscalDocumentLine.UnitPrice, 6); // VL_UNIT_CONV
        spedRecord.addFieldNumeric(fiscalDocumentTaxTransICMS.TaxAmountOther / _fiscalDocumentLine.Quantity, 6); // VL_UNIT_ICMS_OP_CONV
        spedRecord.addFieldNumeric(icmsSTBaseAmount / _fiscalDocumentLine.Quantity, 6); // VL_UNIT_BC_ICMS_ST_CONV
        spedRecord.addFieldNumeric(icmsSTAmount / _fiscalDocumentLine.Quantity, 6); // VL_UNIT_ICMS_ST_CONV
        spedRecord.addFieldNumeric(fcpAmount / _fiscalDocumentLine.Quantity, 6); // VL_UNIT_FCP_ST_CONV
        switch (_fiscalDocumentLine.ICMSSTCollectionPaymentMode)
        {
            case ICMSSTCollectionPaymentMode_BR::StateDocumentOfCollection:
                spedRecord.addFieldString('0'); // COD-DA
                break;
            case ICMSSTCollectionPaymentMode_BR::GNRE:
                spedRecord.addFieldString('1'); // COD-DA
                break;
            default:
                spedRecord.addFieldEmpty(); // COD-DA
        }

        spedRecord.addFieldString(_fiscalDocumentLine.ICMSSTCollectionPaymentNumber); // NUM_DA

        recordCreated = true;

        return spedRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC185</Name>
				<Source><![CDATA[
    private void createRecordC185(FBSpedRecord_BR _parentRecord, FiscalDocument_BR _fiscalDocument)
    {
        if (!conFind(
                [FiscalBooksConstants_BR::FiscalDocModel_01,
                FiscalBooksConstants_BR::FiscalDocModel_1B,
                FiscalBooksConstants_BR::FiscalDocModel_04,
                FiscalBooksConstants_BR::FiscalDocModel_4B,
                FiscalBooksConstants_BR::FiscalDocModel_55,
                FiscalBooksConstants_BR::FiscalDocModel_65],
                _fiscalDocument.Model))
        {
            return;
        }
        
        FiscalDocumentLine_BR fiscalDocumentLine;
        FiscalDocumentTaxTrans_BR fiscalDocumentTaxTransICMS, fiscalDocumentTaxTransICMSST;
        FiscalDocumentTaxTransPresumed_BR presumedTaxTransICMS, presumedTaxTransICMSST;
        FiscalDocumentTaxTransPovertyFund_BR fiscalDocumentTaxTransPoveryFundICMS, fiscalDocumentTaxTransPoveryFundICMSST;
        

        while select fiscalDocumentLine
            where fiscalDocumentLine.FiscalDocument == _fiscalDocument.RecId
        join fiscalDocumentTaxTransICMS
            where fiscalDocumentTaxTransICMS.FiscalDocumentLine == fiscalDocumentLine.RecId
                && fiscalDocumentTaxTransICMS.Type == TaxType_BR::ICMS
                && (fiscalDocumentTaxTransICMS.TaxationCode == FiscalBooksConstants_BR::TaxationCode10
                    || fiscalDocumentTaxTransICMS.TaxationCode == FiscalBooksConstants_BR::TaxationCode30
                    || fiscalDocumentTaxTransICMS.TaxationCode == FiscalBooksConstants_BR::TaxationCode60
                    || fiscalDocumentTaxTransICMS.TaxationCode == FiscalBooksConstants_BR::TaxationCode70)
        outer join presumedTaxTransICMS
            where presumedTaxTransICMS.FiscalDocumentTaxTrans_BR == fiscalDocumentTaxTransICMS.RecId
        outer join fiscalDocumentTaxTransPoveryFundICMS
            where fiscalDocumentTaxTransPoveryFundICMS.FiscalDocumentTaxTrans_BR == fiscalDocumentTaxTransICMS.RecId
        join fiscalDocumentTaxTransICMSST
            where fiscalDocumentTaxTransICMSST.FiscalDocumentLine == fiscalDocumentLine.RecId
                && fiscalDocumentTaxTransICMSST.Type == TaxType_BR::ICMSST
                && (fiscalDocumentTaxTransICMSST.TaxationCode == FiscalBooksConstants_BR::TaxationCode10
                    || fiscalDocumentTaxTransICMSST.TaxationCode == FiscalBooksConstants_BR::TaxationCode30
                    || fiscalDocumentTaxTransICMSST.TaxationCode == FiscalBooksConstants_BR::TaxationCode60
                    || fiscalDocumentTaxTransICMSST.TaxationCode == FiscalBooksConstants_BR::TaxationCode70)
        outer join presumedTaxTransICMSST
            where presumedTaxTransICMSST.FiscalDocumentTaxTrans_BR == fiscalDocumentTaxTransICMSST.RecId
        outer join fiscalDocumentTaxTransPoveryFundICMSST
             where fiscalDocumentTaxTransPoveryFundICMSST.FiscalDocumentTaxTrans_BR == fiscalDocumentTaxTransICMSST.RecId
        {
            TaxReasonCodeForRestitutionComplementSetupData_BR taxReasonCodeForRestitutionComplementSetupData = TaxReasonCodeForRestitutionComplementSetupData_BR::findReasonCodeForRestitutionComplementSetupData(
                        taxReasonCodeForRestitutionComplementSetupHeading.RecId,
                        fiscalDocumentLine.ItemId,
                        fiscalDocumentLine.CFOP,
                        fiscalDocumentTaxTransICMSST.TaxationCode,
                        SalesPurchTrntype_BR::Sales);
            
            InventTable inventTable = InventTable::find(fiscalDocumentLine.ItemId);

            InventDim inventDimSearched = FBICMSSTInventoryBalance_BR::inventDim2SearchedInventDim(InventDim::find(fiscalDocumentLine.displayInventDimId()));
            FBICMSSTInventoryBalance_BR inventoryBalance = FBICMSSTInventoryBalance_BR::find(fbBookingPeriod.getPreviousBookingPeriod().RecId, fiscalDocumentLine.ItemId, inventDimSearched.inventDimId);
            UnitOfMeasureConversionFactor conversionFactor = this.getConversionFactor(fiscalDocumentLine.ItemId, inventTable.inventTableModuleInvent().UnitId, fiscalDocumentLine.Unit);
            
            AmountMST restAmountPerUnit = (inventoryBalance.ICMSTaxAmountPerUnit + inventoryBalance.ICMSSTTaxAmountPerUnit) * conversionFactor
                - (presumedTaxTransICMS.SPEDPresumedTaxAmount ?
                        (fiscalDocumentLine.Quantity ? presumedTaxTransICMS.SPEDPresumedTaxAmount / fiscalDocumentLine.Quantity : 0) :
                        (fiscalDocumentLine.Quantity ? fiscalDocumentTaxTransICMS.TaxAmountOther / fiscalDocumentLine.Quantity : 0));

            FBReasonCodeForRestitutionComplement_BR reasonCode = FBReasonCodeForRestitutionComplement_BR::find(restAmountPerUnit > 0 ? taxReasonCodeForRestitutionComplementSetupData.FBReasonCodeForRestitution : taxReasonCodeForRestitutionComplementSetupData.FBReasonCodeForComplement);

            if (!reasonCode)
            {
                continue;
            }

            if (!FBSpedFileItemTmp_BR::existsForItemId(spedFileItem, fiscalEstablishment.RecId, inventTable.ItemId))
            {
                spedFileItem.insertFromInventTable(fiscalEstablishment.RecId, inventTable);
            }

            FBSpedRecord_BR spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C185);
            spedRecord.addFieldNumeric(fiscalDocumentLine.LineNum, 0, 3); // NUM_ITEM
            spedRecord.addFieldString(fiscalDocumentLine.ItemId, 60); // COD_ITEM
            spedRecord.addFieldNumericFilledWithZeros(str2Int(fiscalDocumentTaxTransICMS.TaxationCode), 3); // CST_ICMS
            spedRecord.addFieldNumeric(this.formatKeepNumbersOnly(fiscalDocumentLine.CFOP), 0, 4); // CFOP
            spedRecord.addFieldString(reasonCode.SpedCode, 5); // COD_MOT_REST_COMPL
            spedRecord.addFieldNumericAbs(fiscalDocumentLine.Quantity, 6); // QUANT_CONV
            if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v114)
            {
                spedRecord.addFieldString(FBSpedFileUnitSymbolTmp_BR::findOrCreateSpedSymbol(spedFileUnitSymbol, fiscalDocumentLine.Unit), 6); // UNID
            }
            else
            {
                spedRecord.addFieldString(FBSpedFileUnitSymbolTmp_BR::findOrCreateSpedSymbol(spedFileUnitSymbol, fiscalDocumentLine.Unit)); // UNID
            }
            spedRecord.addFieldNumeric(fiscalDocumentLine.UnitPrice, 6); // VL_UNIT_CONV

            AmountMST curCreditICMSPerUnit = ((reasonCode.Classification == FBReasonCodeForRestitutionComplementClassification_BR::Restitution1) ||
                (fiscalBooksParametersPerState.StateId == FiscalBooksConstants_BR::StateRS) && (reasonCode.MethodOfRefundICMSST != FBMethodOfRefundICMSST_BR::Drop)) ?
                0 :
                (fiscalBooksParametersPerState.StateId == FiscalBooksConstants_BR::StateRS) ?
                    conversionFactor * inventoryBalance.ICMSTaxAmountPerUnit :
                    fiscalDocumentLine.Quantity ?
                        presumedTaxTransICMS.SPEDPresumedTaxAmount / fiscalDocumentLine.Quantity :
                        0;

            restAmountPerUnit = conversionFactor * (inventoryBalance.ICMSTaxAmountPerUnit + inventoryBalance.ICMSSTTaxAmountPerUnit) -
                (curCreditICMSPerUnit ?
                    curCreditICMSPerUnit :
                    ((reasonCode.Classification == FBReasonCodeForRestitutionComplementClassification_BR::Restitution1 || reasonCode.Classification == FBReasonCodeForRestitutionComplementClassification_BR::Complement) ?
                        (fiscalDocumentLine.Quantity ? fiscalDocumentTaxTransICMS.TaxAmountOther / fiscalDocumentLine.Quantity : 0) :
                        0));

            AmountMST restFCPAmountPerUnit = (inventoryBalance.ICMSFCPTaxAmountPerUnit + inventoryBalance.ICMSSTFCPTaxAmountPerUnit) * conversionFactor
                - (reasonCode.Classification == FBReasonCodeForRestitutionComplementClassification_BR::Restitution2 ?
                        (fiscalDocumentLine.Quantity ? presumedTaxTransICMSST.SPEDPresumedFCPTaxAmount / fiscalDocumentLine.Quantity : 0) :
                        (fiscalDocumentLine.Quantity ? fiscalDocumentTaxTransPoveryFundICMS.TaxPovertyFundAmount / fiscalDocumentLine.Quantity : 0));;

            AmountMST creditICMS, restICMS, restFCP, complICMS, complFCP;
            if (restComplAmountsPerReasonCode.exists(reasonCode.SpedCode))
            {
                [creditICMS, restICMS, restFCP, complICMS, complFCP] = restComplAmountsPerReasonCode.lookup(reasonCode.SpedCode);
            }
            
            switch (reasonCode.Classification)
            {
                case FBReasonCodeForRestitutionComplementClassification_BR::NotApplicable:
                    spedRecord.addFieldEmptyNTimes(2);
                    if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v116) //This is only validate for ICMS 3.1.0+
                    {
                        spedRecord.addFieldNumeric(conversionFactor * inventoryBalance.ICMSTaxAmountPerUnit, 6); // VL_UNIT_ICMS_OP_ESTOQUE_CONV
                        spedRecord.addFieldNumeric(conversionFactor * inventoryBalance.ICMSSTTaxAmountPerUnit, 6); // VL_UNIT_ICMS_ST_ESTOQUE_CONV
                        spedRecord.addFieldNumeric(conversionFactor * inventoryBalance.ICMSSTFCPTaxAmountPerUnit, 6); // VL_UNIT_FCP_ICMS_ST_ESTOQUE_CONV
                    }
                    else
                    {
                        spedRecord.addFieldEmptyNTimes(3);
                    }
                    spedRecord.addFieldEmptyNTimes(4);
                    break;
                case FBReasonCodeForRestitutionComplementClassification_BR::Restitution1:
                case FBReasonCodeForRestitutionComplementClassification_BR::Restitution2:
                    if (reasonCode.Classification == FBReasonCodeForRestitutionComplementClassification_BR::Restitution1)
                    {
                        spedRecord.addFieldNumeric(fiscalDocumentLine.Quantity ? fiscalDocumentTaxTransICMS.TaxAmountOther / fiscalDocumentLine.Quantity : 0, 6); // VL_UNIT_ICMS_NA_OPERACAO_CONV
                        spedRecord.addFieldEmpty(); // VL_UNIT_ICMS_OP_CONV
                    }
                    else
                    {
                        spedRecord.addFieldEmpty(); // VL_UNIT_ICMS_NA_OPERACAO_CONV
                        spedRecord.addFieldNumeric(curCreditICMSPerUnit, 6); // VL_UNIT_ICMS_OP_CONV
                        creditICMS += curCreditICMSPerUnit * fiscalDocumentLine.Quantity;
                    }
                    
                    spedRecord.addFieldNumeric(conversionFactor * inventoryBalance.ICMSTaxAmountPerUnit, 6); // VL_UNIT_ICMS_OP_ESTOQUE_CONV
                    spedRecord.addFieldNumeric(conversionFactor * inventoryBalance.ICMSSTTaxAmountPerUnit, 6); // VL_UNIT_ICMS_ST_ESTOQUE_CONV
                    spedRecord.addFieldNumeric(conversionFactor * inventoryBalance.ICMSSTFCPTaxAmountPerUnit, 6); // VL_UNIT_FCP_ICMS_ST_ESTOQUE_CONV
                    spedRecord.addFieldNumeric(restAmountPerUnit > 0 ? restAmountPerUnit : 0, 6); // VL_UNIT_ICMS_ST_CONV_REST
                    spedRecord.addFieldNumeric(restFCPAmountPerUnit > 0 ? restFCPAmountPerUnit : 0, 6); // VL_UNIT_FCP_ST_CONV_REST
                    spedRecord.addFieldEmpty(); // VL_UNIT_ICMS_ST_CONV_COMPL
                    spedRecord.addFieldEmpty(); // VL_UNIT_FCP_ST_CONV_COMPL

                    restICMS += restAmountPerUnit > 0 ? restAmountPerUnit * fiscalDocumentLine.Quantity : 0;
                    restFCP += restFCPAmountPerUnit > 0 ? restFCPAmountPerUnit * fiscalDocumentLine.Quantity : 0;
                    break;
                
                case FBReasonCodeForRestitutionComplementClassification_BR::Complement:
                    spedRecord.addFieldNumeric(fiscalDocumentTaxTransICMS.TaxAmountOther / fiscalDocumentLine.Quantity, 6); // VL_UNIT_ICMS_NA_OPERACAO_CONV
                    spedRecord.addFieldEmpty(); // VL_UNIT_ICMS_OP_CONV
                    spedRecord.addFieldNumeric(conversionFactor * inventoryBalance.ICMSTaxAmountPerUnit, 6); // VL_UNIT_ICMS_OP_ESTOQUE_CONV
                    spedRecord.addFieldNumeric(conversionFactor * inventoryBalance.ICMSSTTaxAmountPerUnit, 6); // VL_UNIT_ICMS_ST_ESTOQUE_CONV
                    spedRecord.addFieldNumeric(conversionFactor * inventoryBalance.ICMSSTFCPTaxAmountPerUnit, 6); // VL_UNIT_FCP_ICMS_ST_ESTOQUE_CONV
                    spedRecord.addFieldEmpty(); // VL_UNIT_ICMS_ST_CONV_REST
                    spedRecord.addFieldEmpty(); // VL_UNIT_FCP_ST_CONV_REST
                    spedRecord.addFieldNumeric(restAmountPerUnit > 0 ? 0 : -restAmountPerUnit, 6); // VL_UNIT_ICMS_ST_CONV_COMPL
                    spedRecord.addFieldNumeric(restFCPAmountPerUnit > 0 ? 0 : -restFCPAmountPerUnit, 6); // VL_UNIT_FCP_ST_CONV_COMPL

                    complICMS += restAmountPerUnit > 0 ? 0 : -restAmountPerUnit * fiscalDocumentLine.Quantity;
                    complFCP += restFCPAmountPerUnit > 0 ? 0 : -restFCPAmountPerUnit * fiscalDocumentLine.Quantity;
                    break;
            }
            
            restComplAmountsPerReasonCode.insert(reasonCode.SpedCode, [creditICMS, restICMS, restFCP, complICMS, complFCP]);
            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreate0002</Name>
				<Source><![CDATA[
    private boolean shouldCreate0002()
    {
        return spedFiscalVersion >= FBSPEDFiscalVersion_BR::v113 && spedFiscalFileParameters.ActivityType == FBSPEDFiscalActivityType_BR::Industry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreate1250</Name>
				<Source><![CDATA[
    private boolean shouldCreate1250()
    {
        return spedFiscalVersion >= FBSPEDFiscalVersion_BR::v113 && fiscalBooksParametersPerState.EnableC180C185;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1250</Name>
				<Source><![CDATA[
    private void createRecord1250()
    {
        AmountMST creditICMSAll, restICMSAll, restFCPAll, complICMSAll, complFCPAll;

        MapEnumerator enumerator = restComplAmountsPerReasonCode.getEnumerator();

        while (enumerator.moveNext())
        {
            AmountMST creditICMS, restICMS, restFCP, complICMS, complFCP;

            [creditICMS, restICMS, restFCP, complICMS, complFCP] = enumerator.currentValue();
            creditICMSAll += creditICMS;
            restICMSAll += restICMS;
            restFCPAll += restFCP;
            complICMSAll += complICMS;
            complFCPAll += complFCP;
        }

        FBSpedRecord_BR spedRecord = this.newRecord('1250');
        spedRecord.addFieldNumeric(creditICMSAll, 2); // VL_CREDITO_ICMS_OP
        spedRecord.addFieldNumeric(restICMSAll, 2); // VL_ICMS_ST_REST
        spedRecord.addFieldNumeric(restFCPAll, 2); // VL_FCP_ST_REST
        spedRecord.addFieldNumeric(complICMSAll, 2); // VL_ICMS_ST_COMPL
        spedRecord.addFieldNumeric(complFCPAll, 2); // VL_FCP_ST_COMPL
        this.addRecord(spedRecord);

        this.createRecord1255(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1255</Name>
				<Source><![CDATA[
    private void createRecord1255(FBSpedRecord_BR _parentRecord)
    {
        MapEnumerator enumerator = restComplAmountsPerReasonCode.getEnumerator();

        while (enumerator.moveNext())
        {
            AmountMST creditICMS, restICMS, restFCP, complICMS, complFCP;

            [creditICMS, restICMS, restFCP, complICMS, complFCP] = enumerator.currentValue();

            FBSpedRecord_BR spedRecord = this.newRecord('1255');
            spedRecord.addFieldString(enumerator.currentKey(), 5); // COD_MOT_REST_COMPL
            spedRecord.addFieldNumeric(creditICMS, 2); // VL_CREDITO_ICMS_OP_MOT
            spedRecord.addFieldNumeric(restICMS, 2); // VL_ICMS_ST_REST_MOT
            spedRecord.addFieldNumeric(restFCP, 2); // VL_FCP_ST_REST_MOT
            spedRecord.addFieldNumeric(complICMS, 2); // VL_ICMS_ST_COMPL_MOT
            spedRecord.addFieldNumeric(complFCP, 2); // VL_FCP_ST_COMPL_MOT

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConversionFactor</Name>
				<Source><![CDATA[
    private UnitOfMeasureConversionFactor getConversionFactor(ItemId _itemId, UnitOfMeasureSymbol _fromUnitOfMeasureSymbol, UnitOfMeasureSymbol _toUnitOfMeasureSymbol)
    {
        UnitOfMeasureConversionFactor conversionFactor;

        if (!_itemId || _toUnitOfMeasureSymbol == _fromUnitOfMeasureSymbol)
        {
            conversionFactor = 1;
        }
        else
        {
            conversionFactor = UnitOfMeasureConversion::findByConversion(
                UnitOfMeasure::findBySymbol(_fromUnitOfMeasureSymbol).RecId,
                UnitOfMeasure::findBySymbol(_toUnitOfMeasureSymbol).RecId)
                .Factor;
        }

        return conversionFactor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC176</Name>
				<Source><![CDATA[
    private FBSpedRecord_BR createRecordC176(FiscalDocument_BR _fiscalDocument, FiscalDocumentLine_BR _fiscalDocumentLine)
    {
        boolean recordCreated;
        FBSpedRecord_BR spedRecord;

        FiscalDocumentTaxTrans_BR fiscalDocumentTaxTransICMSST;
        select firstonly fiscalDocumentTaxTransICMSST
            where fiscalDocumentTaxTransICMSST.FiscalDocumentLine == _fiscalDocumentLine.RecId
                && fiscalDocumentTaxTransICMSST.Type == TaxType_BR::ICMSST;
        
        ICMSSTRestitutionSetupData_BR restitutionSetupData = ICMSSTRestitutionSetupData_BR::find(fiscalBooksParametersPerState.StateId, _fiscalDocumentLine.CFOP, fiscalDocumentTaxTransICMSST.TaxationCode);

        if ((_fiscalDocument.Model == FiscalBooksConstants_BR::FiscalDocModel_01 || _fiscalDocument.Model == FiscalBooksConstants_BR::FiscalDocModel_55)
            && restitutionSetupData
            && fiscalDocumentTaxTransICMSST)
        {
            FiscalDocument_BR fiscalDocumentLastPurchase;
            FiscalDocumentLine_BR fiscalDocumentLineLastPurchase;

            select firstonly fiscalDocumentLastPurchase
                order by fiscalDocumentLastPurchase.FiscalDocumentDate desc
                where fiscalDocumentLastPurchase.Status == FiscalDocumentStatus_BR::Approved
                    && fiscalDocumentLastPurchase.Direction == FiscalDocDirection_BR::Incoming
                    && fiscalDocumentLastPurchase.FiscalEstablishment == _fiscalDocument.FiscalEstablishment
            join fiscalDocumentLineLastPurchase
                where fiscalDocumentLineLastPurchase.FiscalDocument == fiscalDocumentLastPurchase.RecId
                    && fiscalDocumentLineLastPurchase.ItemId == _fiscalDocumentLine.ItemId;

            spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C176);                                        // 01 - REG
            
            spedRecord.addFieldString(fiscalDocumentLastPurchase.Model, 2);                             // 02 - COD_MOD_ULT_E
            spedRecord.addFieldString(fiscalDocumentLastPurchase.FiscalDocumentNumber, 9);              // 03 - NUM_DOC_ULT_E
            spedRecord.addFieldString(fiscalDocumentLastPurchase.FiscalDocumentSeries, 3);              // 04 - SER_ULT_E
            spedRecord.addFieldDate(fiscalDocumentLastPurchase.FiscalDocumentDate);                     // 05 - DT_ULT_E
            
            if (!FBSpedFilePartyTmp_BR::existsForAccountTypeAndNum(spedFileParty,
                                                                   FiscalEstablishment_BR::findById(fiscalDocumentLastPurchase.FiscalEstablishment).RecId,
                                                                   this.getFBThirdPartyTypeFromAccountType(fiscalDocumentLastPurchase.FiscalDocumentAccountType),
                                                                   fiscalDocumentLastPurchase.FiscalDocumentAccountNum))
            {
                spedFileParty.insertFromFiscalDocument(fiscalDocumentLastPurchase);
            }
            else
            {
                select firstonly spedFileParty
                    where spedFileParty.PartyType == this.getFBThirdPartyTypeFromAccountType(fiscalDocumentLastPurchase.FiscalDocumentAccountType)
                        && spedFileParty.AccountNum == fiscalDocumentLastPurchase.FiscalDocumentAccountNum;
            }

            spedRecord.addFieldString(spedFileParty.code());                                    // 06 - COD_PART
            spedRecord.addFieldNumeric(fiscalDocumentLineLastPurchase.Quantity, 3);             // 07 - QUANT_ULT_E
            spedRecord.addFieldNumeric(fiscalDocumentLineLastPurchase.UnitPrice, 2);            // 08 - VL_UNIT_ULT_E
            
            FiscalDocumentTaxTrans_BR fiscalDocumentTaxTransLastICMSST;
            FiscalDocumentTaxTransPresumed_BR presumedTaxTransICMSST;

            select firstonly fiscalDocumentTaxTransLastICMSST
                where fiscalDocumentTaxTransLastICMSST.FiscalDocumentLine == fiscalDocumentLineLastPurchase.RecId
                    && fiscalDocumentTaxTransLastICMSST.Type == TaxType_BR::ICMSST
            outer join presumedTaxTransICMSST
                where presumedTaxTransICMSST.FiscalDocumentTaxTrans_BR == fiscalDocumentTaxTransLastICMSST.RecId;

            FiscalDocumentTaxTrans_BR fiscalDocumentTaxTransLastICMS;
            FiscalDocumentTaxTransPresumed_BR presumedTaxTransICMS;

            select firstonly fiscalDocumentTaxTransLastICMS
                where fiscalDocumentTaxTransLastICMS.FiscalDocumentLine == fiscalDocumentLineLastPurchase.RecId
                    && fiscalDocumentTaxTransLastICMS.Type == TaxType_BR::ICMS
            outer join presumedTaxTransICMS
                where presumedTaxTransICMS.FiscalDocumentTaxTrans_BR == fiscalDocumentTaxTransLastICMS.RecId;

            Amount taxBaseAmountICMSSTPerUnit, fcpAmountICMSSTPerUnit;
            
            if (fiscalBooksParametersPerState.PresumedTaxAlgorithmSPED == PresumedTaxAlgorithm_BR::Last)
            {
                FiscalDocumentTaxTransPovertyFund_BR fiscalDocumentTaxTransPoverty;
                select firstonly TaxPovertyFundAmount from fiscalDocumentTaxTransPoverty
                    where fiscalDocumentTaxTransPoverty.FiscalDocumentTaxTrans_BR == fiscalDocumentTaxTransLastICMSST.RecId;

                Amount taxBaseAmountICMSST, taxAmountICMSST, fcpAmountICMSST;

                [taxBaseAmountICMSST, taxAmountICMSST, fcpAmountICMSST] = this.getIncomingICMSSTAmounts(
                    fiscalDocumentTaxTransLastICMS,
                    presumedTaxTransICMS,
                    fiscalDocumentTaxTransLastICMSST,
                    presumedTaxTransICMSST,
                    fiscalDocumentTaxTransPoverty);

                taxBaseAmountICMSSTPerUnit = fiscalDocumentLineLastPurchase.Quantity ?
                    taxBaseAmountICMSST / fiscalDocumentLineLastPurchase.Quantity :
                    0;

                fcpAmountICMSSTPerUnit = fiscalDocumentLineLastPurchase.Quantity ?
                    fcpAmountICMSST / fiscalDocumentLineLastPurchase.Quantity :
                    0;
            }
            else
            {
                Qty uncoveredQty = abs(_fiscalDocumentLine.Quantity);
                
                FiscalDocument_BR fiscalDocumentCurPurchase;
                FiscalDocumentLine_BR fiscalDocumentLineCurPurchase;
                FiscalDocumentTaxTrans_BR fiscalDocumentTaxTransCurICMSST, fiscalDocumentTaxTransCurICMS;
                FiscalDocumentTaxTransPresumed_BR presumedTaxTransCurICMSST, presumedTaxTransCurICMS;
                FiscalDocumentTaxTransPovertyFund_BR fiscalDocumentTaxTransCurPoverty;
                
                select RecId from fiscalDocumentCurPurchase
                    order by fiscalDocumentCurPurchase.FiscalDocumentDate desc
                    where fiscalDocumentCurPurchase.Status == FiscalDocumentStatus_BR::Approved
                        && fiscalDocumentCurPurchase.Direction == FiscalDocDirection_BR::Incoming
                        && fiscalDocumentCurPurchase.FiscalEstablishment == _fiscalDocument.FiscalEstablishment
                join Quantity from fiscalDocumentLineCurPurchase
                    where fiscalDocumentLineCurPurchase.FiscalDocument == fiscalDocumentCurPurchase.RecId
                        && fiscalDocumentLineCurPurchase.ItemId == _fiscalDocumentLine.ItemId
                join TaxBaseAmountOther from fiscalDocumentTaxTransCurICMS
                    where fiscalDocumentTaxTransCurICMS.FiscalDocumentLine == fiscalDocumentLineCurPurchase.RecId
                        && fiscalDocumentTaxTransCurICMS.Type == TaxType_BR::ICMS
                outer join PresumedTaxBaseAmount, PresumedTaxAmount, PresumedFCPTaxAmount from presumedTaxTransCurICMS
                    where presumedTaxTransCurICMS.FiscalDocumentTaxTrans_BR == fiscalDocumentTaxTransCurICMS.RecId
                outer join TaxBaseAmountOther from fiscalDocumentTaxTransCurICMSST
                    where fiscalDocumentTaxTransCurICMSST.FiscalDocumentLine == fiscalDocumentLineCurPurchase.RecId
                        && fiscalDocumentTaxTransCurICMSST.Type == TaxType_BR::ICMSST
                outer join PresumedTaxBaseAmount, PresumedTaxAmount, PresumedFCPTaxAmount from presumedTaxTransCurICMSST
                    where presumedTaxTransCurICMSST.FiscalDocumentTaxTrans_BR == fiscalDocumentTaxTransCurICMSST.RecId
                outer join TaxPovertyFundAmount from fiscalDocumentTaxTransCurPoverty
                    where fiscalDocumentTaxTransCurPoverty.FiscalDocumentTaxTrans_BR == fiscalDocumentTaxTransCurICMSST.RecId;

                Amount taxBaseAmountICMSST, fcpAmountICMSST;

                while (uncoveredQty && fiscalDocumentCurPurchase.RecId)
                {
                    Amount taxBaseAmount, taxAmount, fcpAmount;
                    [taxBaseAmount, taxAmount, fcpAmount] = this.getIncomingICMSSTAmounts(
                            fiscalDocumentTaxTransCurICMS,
                            presumedTaxTransCurICMS,
                            fiscalDocumentTaxTransCurICMSST,
                            presumedTaxTransCurICMSST,
                            fiscalDocumentTaxTransCurPoverty);

                    if (uncoveredQty >= fiscalDocumentLineCurPurchase.Quantity)
                    {
                        taxBaseAmountICMSST += taxBaseAmount;
                        fcpAmountICMSST += fcpAmount;
                    }
                    else
                    {
                        taxBaseAmountICMSST += fiscalDocumentLineCurPurchase.Quantity ? taxBaseAmount * uncoveredQty / fiscalDocumentLineCurPurchase.Quantity : 0;
                        fcpAmountICMSST += fiscalDocumentLineCurPurchase.Quantity ? fcpAmount * uncoveredQty / fiscalDocumentLineCurPurchase.Quantity : 0;
                    }

                    uncoveredQty -= min(uncoveredQty, fiscalDocumentLineCurPurchase.Quantity);

                    next fiscalDocumentCurPurchase;
                }

                taxBaseAmountICMSSTPerUnit = _fiscalDocumentLine.Quantity ?
                    taxBaseAmountICMSST / _fiscalDocumentLine.Quantity :
                    0;

                fcpAmountICMSSTPerUnit = _fiscalDocumentLine.Quantity ?
                    fcpAmountICMSST / _fiscalDocumentLine.Quantity :
                    0;
            }

            FiscalDocumentTaxTrans_BR fiscalDocumentTaxTransOrigICMS;

            select firstonly fiscalDocumentTaxTransOrigICMS
                where fiscalDocumentTaxTransOrigICMS.FiscalDocumentLine == _fiscalDocumentLine.RecId
                    && fiscalDocumentTaxTransOrigICMS.Type == TaxType_BR::ICMS;

            Amount taxBaseAmountICMSPerUnit;

            taxBaseAmountICMSPerUnit = _fiscalDocumentLine.Quantity ?
                    (fiscalDocumentTaxTransOrigICMS.TaxBaseAmount ?
                        fiscalDocumentTaxTransOrigICMS.TaxBaseAmount :
                        (fiscalDocumentTaxTransOrigICMS.TaxBaseAmountOther ?
                            fiscalDocumentTaxTransOrigICMS.TaxBaseAmountOther :
                            fiscalDocumentTaxTransOrigICMS.TaxBaseAmountExempt)) / _fiscalDocumentLine.Quantity :
                    0;

            spedRecord.addFieldNumeric(taxBaseAmountICMSSTPerUnit, 3);      // 09 - VL_UNIT_BC_ST
            spedRecord.addFieldString(fiscalDocumentLastPurchase.AccessKey, 44);                // 10 - CHAVE_NFE_ULT_E
            spedRecord.addFieldNumeric(fiscalDocumentLineLastPurchase.LineNum, 0, 3);           // 11 - NUM_ITEM_ULT_E
            spedRecord.addFieldNumeric(taxBaseAmountICMSPerUnit, 2);      // 12 - VL_UNIT_BC_ICMS _ULT_E

            TaxValue taxValueICMS = fiscalDocumentTaxTransOrigICMS.TaxValue;
            spedRecord.addFieldNumeric(taxValueICMS, 2);                       // 13 - ALIQ_ICMS_ULT_E
            
            TaxValue taxRateICMS = min(taxBaseAmountICMSSTPerUnit, taxBaseAmountICMSPerUnit);
            if (fiscalDocumentLineLastPurchase.RespWithholdingICMSST == RespWithholdingICMSST_BR::Indirect)
            {
                spedRecord.addFieldNumeric(taxRateICMS, 2);                     // 14 - VL_UNIT_LIMITE_BC_ICMS_ULT_E
            }
            else
            {
                spedRecord.addFieldEmpty();                                     // 14 - VL_UNIT_LIMITE_BC_ICMS_ULT_E
            }
            spedRecord.addFieldNumeric(taxValueICMS * taxRateICMS / 100, 3);      // 15 - VL_UNIT_ICMS_ULT_E

            TaxValue taxValueICMSST = presumedTaxTransICMSST.PresumedTaxPercentage ? presumedTaxTransICMSST.PresumedTaxPercentage : fiscalDocumentTaxTransLastICMSST.TaxValue;
            spedRecord.addFieldNumeric(taxValueICMSST, 2);                 // 16 - ALIQ_ST_ULT_E
            spedRecord.addFieldNumeric(taxBaseAmountICMSSTPerUnit * taxValueICMSST / 100 - taxValueICMS * taxRateICMS / 100, 3);       // 17 - VL_UNIT_RES

            if (fiscalDocumentLineLastPurchase.RespWithholdingICMSST == RespWithholdingICMSST_BR::Blank)
            {
                spedRecord.addFieldString('1');                                                                 // 18 - COD_RESP_RET
            }
            else
            {
                spedRecord.addFieldString(int2Str(fiscalDocumentLineLastPurchase.RespWithholdingICMSST), 1);       // 18 - COD_RESP_RET
            }

            spedRecord.addFieldString(this.refundReasonCode2Str(restitutionSetupData.RefundReasonCode), 1);                      // 19 - COD_MOT_RES
            spedRecord.addFieldEmptyNTimes(5);                                                                // 20 CHAVE_NFE_RET + 21 COD_PART_NFE_RET + 22 SER_NFE_RET + 23 NUM_NFE_RET + 24 ITEM_NFE_RET
            switch (fiscalDocumentLineLastPurchase.ICMSSTCollectionPaymentMode)                                 // 25 - COD_DA
            {
                case ICMSSTCollectionPaymentMode_BR::StateDocumentOfCollection:
                    spedRecord.addFieldString('0');
                    break;
                case ICMSSTCollectionPaymentMode_BR::GNRE:
                    spedRecord.addFieldString('1');
                    break;
                default:
                    spedRecord.addFieldEmpty();
            }
            spedRecord.addFieldString(fiscalDocumentLineLastPurchase.ICMSSTCollectionPaymentNumber);           // 26 - NUM_DA
            spedRecord.addFieldNumeric(fcpAmountICMSSTPerUnit, 2);     // 27 - VL_UNIT_RES_FCP _ST

            recordCreated = true;
        }
        
        return spedRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIncomingICMSSTAmounts</Name>
				<Source><![CDATA[
    private container getIncomingICMSSTAmounts(FiscalDocumentTaxTrans_BR _icmsTaxTrans,
            FiscalDocumentTaxTransPresumed_BR _icmsPresumedTaxTrans,
            FiscalDocumentTaxTrans_BR _icmsSTTaxTrans,
            FiscalDocumentTaxTransPresumed_BR _icmsSTPresumedTaxTrans,
            FiscalDocumentTaxTransPovertyFund_BR _icmsSTPovertyFundTaxTrans)
    {
        FiscalDocumentTaxTransPresumed_BR presumedTaxTrans;

        if (_icmsSTTaxTrans)
        {
            presumedTaxTrans = _icmsSTPresumedTaxTrans;
        }
        else
        {
            presumedTaxTrans = _icmsPresumedTaxTrans;
        }

        if (!presumedTaxTrans && !_icmsSTTaxTrans)
        {
            return [0, 0, 0];
        }

        AmountMST icmsSTBaseAmount, icmsSTAmount, fcpAmount;

        if (presumedTaxTrans)
        {
            icmsSTBaseAmount = presumedTaxTrans.PresumedTaxBaseAmount;
            icmsSTAmount = presumedTaxTrans.PresumedTaxAmount + presumedTaxTrans.PresumedFCPTaxAmount;
            fcpAmount = presumedTaxTrans.PresumedFCPTaxAmount;
        }
        else
        {
            icmsSTBaseAmount = _icmsSTTaxTrans.TaxBaseAmountOther;
            icmsSTAmount = _icmsSTTaxTrans.TaxAmountOther;
            fcpAmount = _icmsSTPovertyFundTaxTrans.TaxPovertyFundAmount;
        }

        return [icmsSTBaseAmount, icmsSTAmount, fcpAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>refundReasonCode2Str</Name>
				<Source><![CDATA[
    private str refundReasonCode2Str(RefundReasonCode_BR _refundReasonCode)
    {
        switch (_refundReasonCode)
        {
            case RefundReasonCode_BR::SaleToAnotherUF:
                return '1';
            case RefundReasonCode_BR::Departure:
                return '2';
            case RefundReasonCode_BR::Loss:
                return '3';
            case RefundReasonCode_BR::Theft:
                return '4';
            case RefundReasonCode_BR::Export:
                return '5';
            case RefundReasonCode_BR::SaleNationalSimple:
                return '6';
            case RefundReasonCode_BR::Others:
                return '9';
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC186</Name>
				<Source><![CDATA[
    private void createRecordC186(FBSpedRecord_BR _parentRecord, FiscalDocument_BR _fiscalDocument)
    {
        if (!conFind([FiscalBooksConstants_BR::FiscalDocModel_01,
                    FiscalBooksConstants_BR::FiscalDocModel_1B,
                    FiscalBooksConstants_BR::FiscalDocModel_04,
                    FiscalBooksConstants_BR::FiscalDocModel_4B,
                    FiscalBooksConstants_BR::FiscalDocModel_55],
                _fiscalDocument.Model))
        {
            return;
        }

        FiscalDocumentLine_BR fiscalDocumentLineRet;

        while select fiscalDocumentLineRet
            where fiscalDocumentLineRet.FiscalDocument == _fiscalDocument.RecId
        {
            FiscalDocumentTaxTrans_BR fiscalDocumentTaxTransICMSRet;

            select firstonly fiscalDocumentTaxTransICMSRet
                where fiscalDocumentTaxTransICMSRet.FiscalDocumentLine == fiscalDocumentLineRet.RecId
                    && fiscalDocumentTaxTransICMSRet.Type == TaxType_BR::ICMS
                    && (fiscalDocumentTaxTransICMSRet.TaxationCode == FiscalBooksConstants_BR::TaxationCode10
                        || fiscalDocumentTaxTransICMSRet.TaxationCode == FiscalBooksConstants_BR::TaxationCode30
                        || fiscalDocumentTaxTransICMSRet.TaxationCode == FiscalBooksConstants_BR::TaxationCode60
                        || fiscalDocumentTaxTransICMSRet.TaxationCode == FiscalBooksConstants_BR::TaxationCode70);
        
            if (!fiscalDocumentTaxTransICMSRet)
            {
                continue;
            }

            FiscalDocumentLine_BR fiscalDocumentLineOrig = fiscalDocumentLineRet.origFiscalDocumentLine();

            FiscalDocumentTaxTrans_BR fiscalDocumentTaxTransICMS, fiscalDocumentTaxTransICMSST;
            FiscalDocumentTaxTransPovertyFund_BR fiscalDocumentTaxTransPovertyFund;

            select firstonly fiscalDocumentTaxTransICMS
                where fiscalDocumentTaxTransICMS.FiscalDocumentLine == fiscalDocumentLineOrig.RecId
                    && fiscalDocumentTaxTransICMS.Type == TaxType_BR::ICMS
                    && (fiscalDocumentTaxTransICMS.TaxationCode == FiscalBooksConstants_BR::TaxationCode10
                        || fiscalDocumentTaxTransICMS.TaxationCode == FiscalBooksConstants_BR::TaxationCode30
                        || fiscalDocumentTaxTransICMS.TaxationCode == FiscalBooksConstants_BR::TaxationCode60
                        || fiscalDocumentTaxTransICMS.TaxationCode == FiscalBooksConstants_BR::TaxationCode70);
        
            if (!fiscalDocumentTaxTransICMS)
            {
                continue;
            }

            select firstonly fiscalDocumentTaxTransICMSST
                where fiscalDocumentTaxTransICMSST.FiscalDocumentLine == fiscalDocumentLineOrig.RecId
                    && fiscalDocumentTaxTransICMSST.Type == TaxType_BR::ICMSST
                    && (fiscalDocumentTaxTransICMSST.TaxationCode == FiscalBooksConstants_BR::TaxationCode10
                        || fiscalDocumentTaxTransICMSST.TaxationCode == FiscalBooksConstants_BR::TaxationCode30
                        || fiscalDocumentTaxTransICMSST.TaxationCode == FiscalBooksConstants_BR::TaxationCode60
                        || fiscalDocumentTaxTransICMSST.TaxationCode == FiscalBooksConstants_BR::TaxationCode70)
            outer join fiscalDocumentTaxTransPovertyFund
                where fiscalDocumentTaxTransPovertyFund.FiscalDocumentTaxTrans_BR == fiscalDocumentTaxTransICMSST.RecId;

            FiscalDocumentTaxTransPresumed_BR presumedTaxTrans;
            if (fiscalDocumentTaxTransICMSST)
            {
                select firstonly presumedTaxTrans
                    where presumedTaxTrans.FiscalDocumentTaxTrans_BR == fiscalDocumentTaxTransICMSST.RecId;
            }
            else
            {
                select firstonly presumedTaxTrans
                    where presumedTaxTrans.FiscalDocumentTaxTrans_BR == fiscalDocumentTaxTransICMS.RecId;
            }

            if (!presumedTaxTrans && !fiscalDocumentTaxTransICMSST)
            {
                continue;
            }

            AmountMST icmsSTBaseAmount, icmsSTAmount, fcpAmount;

            if (presumedTaxTrans)
            {
                icmsSTBaseAmount = presumedTaxTrans.PresumedTaxBaseAmount;
                icmsSTAmount = presumedTaxTrans.PresumedTaxAmount + presumedTaxTrans.PresumedFCPTaxAmount;
                fcpAmount = presumedTaxTrans.PresumedFCPTaxAmount;
            }
            else
            {
                // Either we have TaxAmount or TaxAmountOther
                icmsSTBaseAmount = fiscalDocumentTaxTransICMSST.TaxBaseAmount + fiscalDocumentTaxTransICMSST.TaxBaseAmountOther;
                icmsSTAmount = fiscalDocumentTaxTransICMSST.TaxAmount + fiscalDocumentTaxTransICMSST.TaxAmountOther;
                fcpAmount = fiscalDocumentTaxTransPovertyFund.TaxPovertyFundAmount;
            }

            TaxReasonCodeForRestitutionComplementSetupData_BR taxReasonCodeForRestitutionComplementSetupData = TaxReasonCodeForRestitutionComplementSetupData_BR::findReasonCodeForRestitutionComplementSetupData(
                        taxReasonCodeForRestitutionComplementSetupHeading.RecId,
                        fiscalDocumentLineRet.ItemId,
                        fiscalDocumentLineRet.CFOP,
                        fiscalDocumentTaxTransICMSRet.TaxationCode,
                        SalesPurchTrntype_BR::Purchase);

            FBReasonCodeForRestitutionComplement_BR reasonCode = FBReasonCodeForRestitutionComplement_BR::find(taxReasonCodeForRestitutionComplementSetupData.FBReasonCodeForComplement);

            if (!reasonCode)
            {
                continue;
            }

            FiscalDocument_BR fiscalDocumentOrig = fiscalDocumentLineOrig.fiscalDocument_BR();

            FBSpedRecord_BR spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C186);
            spedRecord.addFieldNumeric(fiscalDocumentLineRet.LineNum, 0, 3); // NUM_ITEM
            InventTable inventTable = InventTable::find(fiscalDocumentLineRet.ItemId);
            if (!FBSpedFileItemTmp_BR::existsForItemId(spedFileItem, fiscalEstablishment.RecId, inventTable.ItemId))
            {
                spedFileItem.insertFromInventTable(fiscalEstablishment.RecId, inventTable);
            }

            
            InventDim inventDimSearched = FBICMSSTInventoryBalance_BR::inventDim2SearchedInventDim(InventDim::find(fiscalDocumentLineOrig.displayInventDimId()));
            FBICMSSTInventoryBalance_BR inventoryBalance = FBICMSSTInventoryBalance_BR::find(fbBookingPeriod.getPreviousBookingPeriod().RecId, fiscalDocumentLineOrig.ItemId, inventDimSearched.inventDimId);
            UnitOfMeasureConversionFactor conversionFactor = this.getConversionFactor(fiscalDocumentLineOrig.ItemId, inventTable.inventTableModuleInvent().UnitId, fiscalDocumentLineOrig.Unit);
            spedRecord.addFieldString(fiscalDocumentLineRet.ItemId, 60); // COD_ITEM
            spedRecord.addFieldNumericFilledWithZeros(str2Int(fiscalDocumentTaxTransICMSRet.TaxationCode), 3); // CST_ICMS
            spedRecord.addFieldNumeric(this.formatKeepNumbersOnly(fiscalDocumentLineRet.CFOP), 0, 4); // CFOP
            spedRecord.addFieldString(reasonCode.SpedCode, 5); // COD_MOT_REST_COMPL
            spedRecord.addFieldNumericAbs(fiscalDocumentLineRet.Quantity, 6); // QUANT_CONV
            spedRecord.addFieldString(FBSpedFileUnitSymbolTmp_BR::findOrCreateSpedSymbol(spedFileUnitSymbol, fiscalDocumentLineRet.Unit), 6); // UNID
            spedRecord.addFieldString(fiscalDocumentOrig.Model, 2); // COD_MOD_ENTRADA
            if (fiscalDocumentOrig.Model == FiscalBooksConstants_BR::FiscalDocModel_55)
            {
                spedRecord.addFieldEmpty(); // SERIE_ENTRADA
                spedRecord.addFieldEmpty(); // NUM_DOC_ENTRADA
                spedRecord.addFieldString(fiscalDocumentOrig.AccessKey); // CHV_DFE_ENTRADA
            }
            else
            {
                spedRecord.addFieldString(fiscalDocumentOrig.FiscalDocumentSeries, 3); // SERIE_ENTRADA
                spedRecord.addFieldNumeric(fiscalDocumentOrig.FiscalDocumentNumber); // NUM_DOC_ENTRADA
                spedRecord.addFieldEmpty(); // CHV_DFE_ENTRADA
            }
            spedRecord.addFieldDate(fiscalDocumentOrig.FiscalDocumentDate); // DT_DOC_ENTRADA
            spedRecord.addFieldNumeric(fiscalDocumentLineOrig.LineNum, 0, 3); // NUM_ITEM_ENTRADA
            if (fiscalBooksParametersPerState.StateId == FiscalBooksConstants_BR::StateRS)
            {
                spedRecord.addFieldNumeric(inventoryBalance.ICMSTaxAmountPerUnit + inventoryBalance.ICMSSTTaxAmountPerUnit ? conversionFactor * inventoryBalance.ICMSSTTaxBaseAmountPerUnit * inventoryBalance.ICMSTaxAmountPerUnit / (inventoryBalance.ICMSTaxAmountPerUnit + inventoryBalance.ICMSSTTaxAmountPerUnit) : 0, 6); // VL_UNIT_CONV_ENTRADA
                spedRecord.addFieldNumeric(conversionFactor * inventoryBalance.ICMSTaxAmountPerUnit, 6); // VL_UNIT_ICMS_OP_CONV_ENTRADA
                spedRecord.addFieldNumeric(conversionFactor * inventoryBalance.ICMSSTTaxBaseAmountPerUnit, 6); // VL_UNIT_BC_ICMS_ST
                spedRecord.addFieldNumeric(conversionFactor * inventoryBalance.ICMSSTTaxAmountPerUnit, 6); // VL_UNIT_ICMS_ST_CONV_ENTRADA
            }
            else
            {
                spedRecord.addFieldNumeric(fiscalDocumentLineOrig.UnitPrice, 6); // VL_UNIT_CONV_ENTRADA
                spedRecord.addFieldNumeric(fiscalDocumentLineOrig.Quantity ? (fiscalDocumentTaxTransICMS.TaxAmount + fiscalDocumentTaxTransICMS.TaxAmountOther) / fiscalDocumentLineOrig.Quantity : 0, 6); // VL_UNIT_ICMS_OP_CONV_ENTRADA
                spedRecord.addFieldNumeric(fiscalDocumentLineOrig.Quantity ? icmsSTBaseAmount / fiscalDocumentLineOrig.Quantity : 0, 6); // VL_UNIT_BC_ICMS_ST
                spedRecord.addFieldNumeric(fiscalDocumentLineOrig.Quantity ? icmsSTAmount / fiscalDocumentLineOrig.Quantity : 0, 6); // VL_UNIT_ICMS_ST_CONV_ENTRADA
            }

            spedRecord.addFieldNumeric(fiscalDocumentLineOrig.Quantity ? fcpAmount / fiscalDocumentLineOrig.Quantity : 0, 6); // VL_UNIT_FCP_ST_CONV_ENTRADA

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordC181</Name>
				<Source><![CDATA[
    private FBSpedRecord_BR createRecordC181(FiscalDocument_BR _fiscalDocument, FiscalDocumentLine_BR _fiscalDocumentLine)
    {
        const date RSStateFDReportEndDate = 31\12\2020;
        boolean recordCreated;

        if (!conFind(
                [FiscalBooksConstants_BR::FiscalDocModel_01,
                FiscalBooksConstants_BR::FiscalDocModel_1B,
                FiscalBooksConstants_BR::FiscalDocModel_04,
                FiscalBooksConstants_BR::FiscalDocModel_55],
                _fiscalDocument.Model))
        {
            return null;
        }
        
        FiscalDocumentLine_BR fiscalDocumentLineOrig = _fiscalDocumentLine.origFiscalDocumentLine();

        if (!fiscalDocumentLineOrig)
        {
            return null;
        }

        FiscalDocumentTaxTrans_BR fiscalDocumentTaxTransICMSSTRet;

        select firstonly fiscalDocumentTaxTransICMSSTRet
            where fiscalDocumentTaxTransICMSSTRet.FiscalDocumentLine == _fiscalDocumentLine.RecId
                && fiscalDocumentTaxTransICMSSTRet.Type == TaxType_BR::ICMSST
                && (fiscalDocumentTaxTransICMSSTRet.TaxationCode == FiscalBooksConstants_BR::TaxationCode10
                    || fiscalDocumentTaxTransICMSSTRet.TaxationCode == FiscalBooksConstants_BR::TaxationCode30
                    || fiscalDocumentTaxTransICMSSTRet.TaxationCode == FiscalBooksConstants_BR::TaxationCode60
                    || fiscalDocumentTaxTransICMSSTRet.TaxationCode == FiscalBooksConstants_BR::TaxationCode70);

        if (!fiscalDocumentTaxTransICMSSTRet)
        {
            return null;
        }

        FiscalDocumentTaxTrans_BR fiscalDocumentTaxTransICMS, fiscalDocumentTaxTransICMSST;
        FiscalDocumentTaxTransPresumed_BR presumedTaxTransICMS, presumedTaxTransICMSST;
        FiscalDocumentTaxTransPovertyFund_BR fiscalDocumentTaxTransPoveryFundICMS, fiscalDocumentTaxTransPoveryFundICMSST;

        select firstonly fiscalDocumentTaxTransICMS
            where fiscalDocumentTaxTransICMS.FiscalDocumentLine == fiscalDocumentLineOrig.RecId
                && fiscalDocumentTaxTransICMS.Type == TaxType_BR::ICMS
                && (fiscalDocumentTaxTransICMS.TaxationCode == FiscalBooksConstants_BR::TaxationCode10
                    || fiscalDocumentTaxTransICMS.TaxationCode == FiscalBooksConstants_BR::TaxationCode30
                    || fiscalDocumentTaxTransICMS.TaxationCode == FiscalBooksConstants_BR::TaxationCode60
                    || fiscalDocumentTaxTransICMS.TaxationCode == FiscalBooksConstants_BR::TaxationCode70)
        outer join presumedTaxTransICMS
            where presumedTaxTransICMS.FiscalDocumentTaxTrans_BR == fiscalDocumentTaxTransICMS.RecId
        outer join fiscalDocumentTaxTransPoveryFundICMS
            where fiscalDocumentTaxTransPoveryFundICMS.FiscalDocumentTaxTrans_BR == fiscalDocumentTaxTransICMS.RecId
        join fiscalDocumentTaxTransICMSST
            where fiscalDocumentTaxTransICMSST.FiscalDocumentLine == fiscalDocumentLineOrig.RecId
                && fiscalDocumentTaxTransICMSST.Type == TaxType_BR::ICMSST
                && (fiscalDocumentTaxTransICMSST.TaxationCode == FiscalBooksConstants_BR::TaxationCode10
                    || fiscalDocumentTaxTransICMSST.TaxationCode == FiscalBooksConstants_BR::TaxationCode30
                    || fiscalDocumentTaxTransICMSST.TaxationCode == FiscalBooksConstants_BR::TaxationCode60
                    || fiscalDocumentTaxTransICMSST.TaxationCode == FiscalBooksConstants_BR::TaxationCode70)
        outer join presumedTaxTransICMSST
            where presumedTaxTransICMSST.FiscalDocumentTaxTrans_BR == fiscalDocumentTaxTransICMSST.RecId
        outer join fiscalDocumentTaxTransPoveryFundICMSST
             where fiscalDocumentTaxTransPoveryFundICMSST.FiscalDocumentTaxTrans_BR == fiscalDocumentTaxTransICMSST.RecId;

        TaxReasonCodeForRestitutionComplementSetupData_BR taxReasonCodeForRestitutionComplementSetupData = TaxReasonCodeForRestitutionComplementSetupData_BR::findReasonCodeForRestitutionComplementSetupData(
                    taxReasonCodeForRestitutionComplementSetupHeading.RecId,
                    _fiscalDocumentLine.ItemId,
                    _fiscalDocumentLine.CFOP,
                    fiscalDocumentTaxTransICMSSTRet.TaxationCode,
                    SalesPurchTrntype_BR::Sales);
            
        InventTable inventTable = InventTable::find(_fiscalDocumentLine.ItemId);

        InventDim inventDimSearched = FBICMSSTInventoryBalance_BR::inventDim2SearchedInventDim(InventDim::find(fiscalDocumentLineOrig.displayInventDimId()));
        FBICMSSTInventoryBalance_BR inventoryBalance = FBICMSSTInventoryBalance_BR::find(fbBookingPeriod.getPreviousBookingPeriod().RecId, fiscalDocumentLineOrig.ItemId, inventDimSearched.inventDimId);
        UnitOfMeasureConversionFactor conversionFactor = this.getConversionFactor(fiscalDocumentLineOrig.ItemId, inventTable.inventTableModuleInvent().UnitId, fiscalDocumentLineOrig.Unit);
            
        AmountMST restAmountPerUnit = (inventoryBalance.ICMSTaxAmountPerUnit + inventoryBalance.ICMSSTTaxAmountPerUnit) * conversionFactor
                - (presumedTaxTransICMS.SPEDPresumedTaxAmount ?
                        (fiscalDocumentLineOrig.Quantity ? presumedTaxTransICMS.SPEDPresumedTaxAmount / fiscalDocumentLineOrig.Quantity : 0) :
                        (fiscalDocumentLineOrig.Quantity ? fiscalDocumentTaxTransICMS.TaxAmountOther / fiscalDocumentLineOrig.Quantity : 0));

        // This is a return operation so sign changes
        restAmountPerUnit = -restAmountPerUnit;

        FBReasonCodeForRestitutionComplement_BR reasonCode = FBReasonCodeForRestitutionComplement_BR::find(restAmountPerUnit > 0 ? taxReasonCodeForRestitutionComplementSetupData.FBReasonCodeForRestitution : taxReasonCodeForRestitutionComplementSetupData.FBReasonCodeForComplement);

        if (!reasonCode)
        {
            return null;
        }

        if (!FBSpedFileItemTmp_BR::existsForItemId(spedFileItem, fiscalEstablishment.RecId, inventTable.ItemId))
        {
            spedFileItem.insertFromInventTable(fiscalEstablishment.RecId, inventTable);
        }

        FiscalDocument_BR fiscalDocumentOrig = fiscalDocumentLineOrig.fiscalDocument_BR();

        FBSpedRecord_BR spedRecord = this.newRecord(FiscalBooksConstants_BR::SpedRecord_C181);
        spedRecord.addFieldString(reasonCode.SpedCode, 5); // COD_MOT_REST_COMPL
        spedRecord.addFieldNumericAbs(_fiscalDocumentLine.Quantity, 6); // QUANT_CONV
        spedRecord.addFieldString(FBSpedFileUnitSymbolTmp_BR::findOrCreateSpedSymbol(spedFileUnitSymbol, _fiscalDocumentLine.Unit), 6); // UNID
        spedRecord.addFieldString(fiscalDocumentOrig.Model, 2); // COD_MOD_ENTRADA
        if (fiscalDocumentOrig.Model == FiscalBooksConstants_BR::FiscalDocModel_55)
        {
            spedRecord.addFieldEmpty(); // SERIE_SAIDA
            spedRecord.addFieldEmpty(); // ECF_FAB_SAIDA
            spedRecord.addFieldEmpty(); // NUM_DOC_SAIDA
            spedRecord.addFieldString(fiscalDocumentOrig.AccessKey); // CHV_DFE_SAIDA
        }
        else
        {
            spedRecord.addFieldString(fiscalDocumentOrig.FiscalDocumentSeries, 3); // SERIE_SAIDA
            spedRecord.addFieldEmpty(); // ECF_FAB_SAIDA
            spedRecord.addFieldNumeric(fiscalDocumentOrig.FiscalDocumentNumber); // NUM_DOC_SAIDA
            spedRecord.addFieldEmpty(); // CHV_DFE_SAIDA
        }
        spedRecord.addFieldDate(fiscalDocumentOrig.FiscalDocumentDate); // DT_DOC_SAIDA
        spedRecord.addFieldNumeric(fiscalDocumentLineOrig.LineNum, 0, 3); // NUM_ITEM_SAIDA
        spedRecord.addFieldNumeric(fiscalDocumentLineOrig.UnitPrice, 6); // VL_UNIT_CONV_SAIDA

        TaxReasonCodeForRestitutionComplementSetupData_BR taxReasonCodeForRestitutionComplementSetupDataOrig = TaxReasonCodeForRestitutionComplementSetupData_BR::findReasonCodeForRestitutionComplementSetupData(
                    taxReasonCodeForRestitutionComplementSetupHeading.RecId,
                    fiscalDocumentLineOrig.ItemId,
                    fiscalDocumentLineOrig.CFOP,
                    fiscalDocumentTaxTransICMSST.TaxationCode,
                    SalesPurchTrntype_BR::Sales);

        FBReasonCodeForRestitutionComplement_BR reasonCodeOrig = FBReasonCodeForRestitutionComplement_BR::find(restAmountPerUnit > 0 ? taxReasonCodeForRestitutionComplementSetupDataOrig.FBReasonCodeForComplement : taxReasonCodeForRestitutionComplementSetupDataOrig.FBReasonCodeForRestitution);

        AmountMST curCreditICMSPerUnit =  ((reasonCodeOrig.Classification == FBReasonCodeForRestitutionComplementClassification_BR::Restitution1) ||
            (fiscalBooksParametersPerState.StateId == FiscalBooksConstants_BR::StateRS) && (reasonCodeOrig.MethodOfRefundICMSST != FBMethodOfRefundICMSST_BR::Drop)) ?
            0 :
            (fiscalBooksParametersPerState.StateId == FiscalBooksConstants_BR::StateRS) ?
                conversionFactor * inventoryBalance.ICMSTaxAmountPerUnit :
                fiscalDocumentLineOrig.Quantity ?
                    presumedTaxTransICMS.SPEDPresumedTaxAmount / fiscalDocumentLineOrig.Quantity :
                    0;

        restAmountPerUnit = conversionFactor * (inventoryBalance.ICMSTaxAmountPerUnit + inventoryBalance.ICMSSTTaxAmountPerUnit) -
            (curCreditICMSPerUnit ?
                curCreditICMSPerUnit :
                ((reasonCodeOrig.Classification == FBReasonCodeForRestitutionComplementClassification_BR::Restitution1 || reasonCodeOrig.Classification == FBReasonCodeForRestitutionComplementClassification_BR::Complement)  ?
                    (fiscalDocumentLineOrig.Quantity ? fiscalDocumentTaxTransICMS.TaxAmountOther / fiscalDocumentLineOrig.Quantity : 0) :
                    0));

        AmountMST restFCPAmountPerUnit = (inventoryBalance.ICMSFCPTaxAmountPerUnit + inventoryBalance.ICMSSTFCPTaxAmountPerUnit) * conversionFactor
            - (reasonCodeOrig.Classification == FBReasonCodeForRestitutionComplementClassification_BR::Restitution2 ?
                    (fiscalDocumentLineOrig.Quantity ? presumedTaxTransICMSST.SPEDPresumedFCPTaxAmount / fiscalDocumentLineOrig.Quantity : 0) :
                    (fiscalDocumentLineOrig.Quantity ? fiscalDocumentTaxTransPoveryFundICMS.TaxPovertyFundAmount / fiscalDocumentLineOrig.Quantity : 0));;

        // This is a return operation so sign changes
        restAmountPerUnit = -restAmountPerUnit;
        restFCPAmountPerUnit = -restFCPAmountPerUnit;

        AmountMST creditICMS, restICMS, restFCP, complICMS, complFCP;
        if (restComplAmountsPerReasonCode.exists(reasonCode.SpedCode))
        {
            [creditICMS, restICMS, restFCP, complICMS, complFCP] = restComplAmountsPerReasonCode.lookup(reasonCode.SpedCode);
        }

        if (fiscalBooksParametersPerState.StateId == FiscalBooksConstants_BR::StateRS && _fiscalDocument.FiscalDocumentDate > RSStateFDReportEndDate)
        {
            spedRecord.addFieldNumeric(0.00, 6); // VL_UNIT_ICMS_OP_ESTOQUE_CONV_SAIDA
        }
        else
        {
            spedRecord.addFieldNumeric(conversionFactor * inventoryBalance.ICMSTaxAmountPerUnit, 6); // VL_UNIT_ICMS_OP_ESTOQUE_CONV_SAIDA
        }

        spedRecord.addFieldNumeric(conversionFactor * inventoryBalance.ICMSSTTaxAmountPerUnit, 6); // VL_UNIT_ICMS_ST_ESTOQUE_CONV_SAIDA
        spedRecord.addFieldNumeric(conversionFactor * inventoryBalance.ICMSSTFCPTaxAmountPerUnit, 6); // VL_UNIT_FCP_ICMS_ST_ESTOQUE_CONV_SAIDA

        switch (reasonCode.Classification)
        {
            case FBReasonCodeForRestitutionComplementClassification_BR::ReversalNotApplicable:
                spedRecord.addFieldEmptyNTimes(6);
                break;
            case FBReasonCodeForRestitutionComplementClassification_BR::ReversalComplement:
                spedRecord.addFieldNumeric(fiscalDocumentLineOrig.Quantity ? fiscalDocumentTaxTransICMS.TaxAmountOther / fiscalDocumentLineOrig.Quantity : 0, 6); // VL_UNIT_ICMS_NA_OPERACAO_CONV_SAIDA
                spedRecord.addFieldEmpty(); // VL_UNIT_ICMS_OP_CONV_SAIDA
                spedRecord.addFieldNumeric(restAmountPerUnit > 0 ? restAmountPerUnit : 0, 6); // VL_UNIT_ICMS_ST_CONV_REST
                spedRecord.addFieldNumeric(restFCPAmountPerUnit > 0 ? restFCPAmountPerUnit : 0, 6); // VL_UNIT_FCP_ST_CONV_REST
                spedRecord.addFieldEmpty(); // VL_UNIT_ICMS_ST_CONV_COMPL
                spedRecord.addFieldEmpty(); // VL_UNIT_FCP_ST_CONV_COMPL

                restICMS += restAmountPerUnit > 0 ? restAmountPerUnit * abs(_fiscalDocumentLine.Quantity) : 0;
                restFCP += restFCPAmountPerUnit > 0 ? restFCPAmountPerUnit * abs(_fiscalDocumentLine.Quantity) : 0;
                break;
                
            case FBReasonCodeForRestitutionComplementClassification_BR::ReversalRestitution1:
            case FBReasonCodeForRestitutionComplementClassification_BR::ReversalRestitution2:
                spedRecord.addFieldNumeric(fiscalDocumentLineOrig.Quantity ? fiscalDocumentTaxTransICMS.TaxAmountOther / fiscalDocumentLineOrig.Quantity : 0, 6); // VL_UNIT_ICMS_NA_OPERACAO_CONV_SAIDA
                if (reasonCode.Classification == FBReasonCodeForRestitutionComplementClassification_BR::ReversalRestitution1)
                {
                    spedRecord.addFieldEmpty(); // VL_UNIT_ICMS_OP_CONV_SAIDA
                }
                else
                {
                    spedRecord.addFieldNumeric(curCreditICMSPerUnit, 6); // VL_UNIT_ICMS_OP_CONV_SAIDA
                }
                spedRecord.addFieldEmpty(); // VL_UNIT_ICMS_ST_CONV_REST
                spedRecord.addFieldEmpty(); // VL_UNIT_FCP_ST_CONV_REST
                spedRecord.addFieldNumeric(restAmountPerUnit > 0 ? 0 : -restAmountPerUnit, 6); // VL_UNIT_ICMS_ST_CONV_COMPL
                spedRecord.addFieldNumeric(restFCPAmountPerUnit > 0 ? 0 : -restFCPAmountPerUnit, 6); // VL_UNIT_FCP_ST_CONV_COMPL

                complICMS += restAmountPerUnit > 0 ? 0 : -restAmountPerUnit * abs(_fiscalDocumentLine.Quantity);
                complFCP += restFCPAmountPerUnit > 0 ? 0 : -restFCPAmountPerUnit * abs(_fiscalDocumentLine.Quantity);
                break;
        }
            
        restComplAmountsPerReasonCode.insert(reasonCode.SpedCode, [creditICMS, restICMS, restFCP, complICMS, complFCP]);

        recordCreated = true;

        return spedRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBlockK</Name>
				<Source><![CDATA[
    public FBSPEDFiscalBlockK_BR parmBlockK(FBSPEDFiscalBlockK_BR _blockK = blockK)
    {
        blockK =_blockK;

        return blockK;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatKeepNumbersOnly</Name>
				<Source><![CDATA[
    private str formatKeepNumbersOnly(str _value)
    {
        return strKeep(_value, '0123456789');
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>