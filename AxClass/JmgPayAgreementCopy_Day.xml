<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgPayAgreementCopy_Day</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgPayAgreementCopy_Day</c> class copies 1 day setup to another day within the same pay agreement.
/// </summary>
public class JmgPayAgreementCopy_Day extends JmgPayAgreementCopy
{
    JmgPayAgreementLine     jmgPayAgreementLine;
    JmgDayChoiseSpecial     jmgDayChoice;

    private Map             jmgPaySpecTypeEnumPickMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the AOT.
    /// </remarks>
    Object dialog()
    {
        DialogRunbase   dialog = super();
        DialogGroup     g;
        dialog.caption(JmgPayAgreementCopy_Day::description());
        g = dialog.addGroup();
        g.frameType(FormFrameType::None);
        g.columns(2);

        dialog.addGroup("@SYS4987", g);
        dialogField = dialog.addField(extendedtypestr(JmgDayChoiseSpecial));

        dialog.addGroup("@SYS23315", g);
        this.createJmgPaySpecTypeEnumPickToDialogFieldMap(dialog);
        dialog.addGroup('');

        dialogOverwrite = dialog.addField(extendedtypestr(NoYesId),"@SYS3074");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJmgPaySpecTypeEnumPickToDialogFieldMap</Name>
				<Source><![CDATA[
    private void createJmgPaySpecTypeEnumPickToDialogFieldMap(DialogRunbase _dialog)
    {
        DictEnum dictEnum  = DictEnum::newFromName(enumStr(JmgPaySpecTypeEnumPick));
        int      enumCount = dictEnum.values();

        jmgPaySpecTypeEnumPickMap = new Map(Types::Enum, Types::Class);
        
        for(int counter = 0; counter < enumCount; counter++)
        {
            DialogField field = _dialog.addFieldValue(extendedTypeStr(NoYesId), NoYes::No, dictEnum.index2Label(counter));
            jmgPaySpecTypeEnumPickMap.insert(dictEnum.index2Value(counter), field);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the values that were entered by the user.
    /// </summary>
    /// <returns>
    ///    true if validation is successful; otherwise, false.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret = true;
        ret = super();

        if (ret)
        {
            jmgDayChoice = dialogField.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jmgPaySpecTypeEnumPick2JmgPaySpecTypeEnum</Name>
				<Source><![CDATA[
    private JmgPaySpecTypeEnum jmgPaySpecTypeEnumPick2JmgPaySpecTypeEnum(JmgPaySpecTypeEnumPick _value)
    {
        str symbol = DictEnum::newFromName(enumStr(JmgPaySpecTypeEnumPick)).value2Symbol(_value);
        return any2Enum(DictEnum::newFromName(enumStr(JmgPaySpecTypeEnum)).symbol2Value(symbol));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWageTypeSetForEnum</Name>
				<Source><![CDATA[
    private boolean isWageTypeSetForEnum(int _value)
    {
        DialogField tmpField = jmgPaySpecTypeEnumPickMap.lookup(_value);
        return tmpField.value() == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        Integer cntErr;

        ttsbegin;

        for (int cnt = 0; cnt < enumcnt(JmgDayIdEnum); cnt++)
        {
            if ((jmgDayChoice[cnt + 1] == NoYes::Yes) && (jmgPayAgreementLine.DayId != cnt))
            {
                for (int i = 0; i < enumcnt(JmgPaySpecTypeEnumPick); i++)
                {
                    if (this.isWageTypeSetForEnum(i))
                    {
                        cntErr += (jmgPayAgreementLine.copyDay(jmgPayAgreementLine.PayAgreement, cnt, doOverwrite, this.jmgPaySpecTypeEnumPick2JmgPaySpecTypeEnum(i)) ? 0 : 1);
                    }
                }
            }
        }

        ttscommit;

        if (cntErr > 0)
            warning(strfmt("@SYS38435",cntErr));

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the arguments with which the class is called.
    /// </summary>
    /// <param name="args">
    /// the arguments with which the class is called.
    /// </param>
    void setParameters(Args args)
    {
        Object obj;
        formDataSource      = args.caller().datasource(tablestr(JmgPayAgreementLine));
        jmgPayAgreementLine = formDataSource.cursor();
        if (!jmgPayAgreementLine)
        {
            obj = args.caller();
            jmgPayAgreementLine.PayAgreement = obj.returnPayAgreement();
            jmgPayAgreementLine.DayId        = obj.returndayid();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS38431";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>