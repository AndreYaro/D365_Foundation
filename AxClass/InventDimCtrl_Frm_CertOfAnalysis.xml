<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimCtrl_Frm_CertOfAnalysis</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventDimCtrl_Frm_CertOfAnalysis</c> class controls the display of inventory dimensions for
///    certificates of analysis.
/// </summary>
public class InventDimCtrl_Frm_CertOfAnalysis extends InventDimCtrl_Frm_Editable
{
    InventTestCertOfAnalysisTable   inventTestCertOfAnalysisTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mustEnableField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the field based on the setup in the inventory dimension group.
    /// </summary>
    /// <param name="_dimFieldId">
    ///    The field ID of the field to enable or disable.
    /// </param>
    /// <returns>
    ///    true if the field must be enabled; otherwise, false.
    /// </returns>
    protected NoYes mustEnableField(FieldId _dimFieldId)
    {
        return !inventTestCertOfAnalysisTable.RecId && super(_dimFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustShowGridField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a field must be shown in grids.
    /// </summary>
    /// <param name="_dimFieldId">
    ///    The field ID to enable or disable.
    /// </param>
    /// <returns>
    ///    true if the field must be shown; otherwise, false.
    /// </returns>
    protected NoYes mustShowGridField(FieldId _dimFieldId)
    {
        FieldId x = fieldNum(InventDimSetupGrid, ShowGridCertificateOfAnalysis);
        if (_dimFieldId)
        {
            return InventDimSetupGrid::find(_dimFieldId).(x);
        }
        else
        {
            return NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTestCertOfAnalysisTable</Name>
				<Source><![CDATA[
        public InventTestCertOfAnalysisTable parmInventTestCertOfAnalysisTable(InventTestCertOfAnalysisTable _inventTestCertOfAnalysisTable = inventTestCertOfAnalysisTable)
    {
        inventTestCertOfAnalysisTable = _inventTestCertOfAnalysisTable;

        return inventTestCertOfAnalysisTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventDimCtrl_Frm_CertOfAnalysis construct()
    {
        return new InventDimCtrl_Frm_CertOfAnalysis();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes a new <c>InventDimCtrl_Frm_CertOfAnalysis</c> class.
    /// </summary>
    /// <param name="_formRun">
    ///    The <c>formRun</c> object where the <c>InventDim</c> record is displayed.
    /// </param>
    /// <param name="_inventTestCertOfAnalysisTable">
    ///    A reference to the <c>InventTestCertOfAnalysisTable</c> record.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InventDimCtrl_Frm_CertOfAnalysis</c> class.
    /// </returns>
    public static InventDimCtrl_Frm_CertOfAnalysis newFromForm(
            FormRun                         _formRun,
            InventTestCertOfAnalysisTable   _inventTestCertOfAnalysisTable)
    {
        InventDimCtrl_Frm_CertOfAnalysis    inventDimCtrl = InventDimCtrl_Frm_CertOfAnalysis::construct();
        InventDimAxFormAdapter              adapter = InventDimAxFormAdapter::newFromForm(_formRun);

        inventDimCtrl.parmCallingElement(adapter);
        inventDimCtrl.parmInventTestCertOfAnalysisTable(_inventTestCertOfAnalysisTable);
        inventDimCtrl.init();
        return inventDimCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>