<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvExpenseLineFieldBulkEdit</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TrvExpenseLineFieldBulkEdit</c> class performs mass updates on selected expense records.
/// </summary>
class TrvExpenseLineFieldBulkEdit
{
    List            selectedExpenses;

    boolean         editCostType;
    boolean         editAdditionalInformation;
    boolean         editProjId;

    TrvCostTypeEDT  costType;
    ItemFreeTxt     additionalInformation;
    ProjId          projId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>TrvExpenseLineFieldBulkEdit</c> class.
    /// </summary>
    /// <param name="_selectedExpenses">
    ///    The list of RecIds for <c>TrvExpTrans</c> records to be bulk edited
    /// </param>
    /// <returns>
    ///    A new instance of the <c>TrvExpenseLineFieldBulkEdit</c> class.
    /// </returns>
    public static TrvExpenseLineFieldBulkEdit construct(List _selectedExpenses)
    {
        TrvExpenseLineFieldBulkEdit trvExpenseLineFieldBulkEdit = new TrvExpenseLineFieldBulkEdit();

        trvExpenseLineFieldBulkEdit.selectedExpenses = _selectedExpenses;

        return trvExpenseLineFieldBulkEdit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performMassUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the bulk edit on all the expense records
    /// </summary>
    public void performMassUpdate()
    {
        int numberOfRecordsUpdated;
        int numberOfProcessedRecords;
        ListEnumerator enumerator = this.selectedExpenses.getEnumerator();

        while (enumerator.moveNext())
        {
            RefRecId trvExpTransRecId = enumerator.current();

            if (trvExpTransRecId)
            {
                TrvExpTrans trvExpTrans = TrvExpTrans::find(trvExpTransRecId, true);

                numberOfRecordsUpdated += this.updateBulkEditedFields(trvExpTrans);
                numberOfProcessedRecords++;

                if (TrvExpTrans::isChildLineExisting(trvExpTransRecId))
                {
                    while select forupdate trvExpTrans
                        where trvExpTrans.ParentRecId == trvExpTransRecId
                    {
                        numberOfRecordsUpdated += this.updateBulkEditedFields(trvExpTrans);
                        numberOfProcessedRecords++;
                    }
                }
            }
        }

        info(strFmt("@Expense:MultipleExpenseLinesUpdated", numberOfRecordsUpdated, numberOfProcessedRecords));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBulkEditedFields</Name>
				<Source><![CDATA[
    private int updateBulkEditedFields(TrvExpTrans _trvExpTrans)
    {
        int numberOfRecordsUpdated;

        try
        {
            boolean isExpenseLineValid = true;

            ttsbegin;

            // Stop displaying infolog messages during validation
            int infoLogStart = infologLine();

            //
            // Note: Category selected can impact project information, so it
            // must be applied before project change
            //
            if (isExpenseLineValid && this.parmEditCostType())
            {
                TrvCostType ImportCostType = TrvCostType::find(_trvExpTrans.CostType);

                if (ImportCostType.isImportOnly == NoYes::Yes )
                {
                    isExpenseLineValid = false;
                    throw error (strFmt("@Expense:ExpenseCategoryChange_Error", _trvExpTrans.CostType));
                }
                else
                {
                    isExpenseLineValid = this.applyAndValidateCostType(_trvExpTrans, false, true);
                }
            }

            //
            // Note: project Id will provide default dimensions, so we need to set the project id
            // before applying the dimensions that the user has specified
            //
            if (isExpenseLineValid && this.parmEditProjId())
            {
                isExpenseLineValid = this.applyAndValidateProjId(_trvExpTrans);
            }

            if (isExpenseLineValid && this.parmEditAdditionalInformation())
            {
                isExpenseLineValid = this.applyAndValidateAdditionalInformation(_trvExpTrans);
            }

            if (isExpenseLineValid && _trvExpTrans.validateWrite())
            {
                _trvExpTrans.write();

                ttscommit;

                // Begin displaying infolog messages again
                infolog.clear(infoLogStart);

                numberOfRecordsUpdated++;
            }
            else
            {
                ttsabort;

                // Begin displaying infolog messages again
                infolog.clear(infoLogStart);
            }
        }
        catch
        {
            exceptionTextFallThrough();
        }

        return numberOfRecordsUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAllCostType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Iterates over all the expense records and checks whether the records
    ///    will be valid after applying the provided Cost type
    /// </summary>
    public void validateAllCostType()
    {
        ListEnumerator enumerator = this.selectedExpenses.getEnumerator();
        while (enumerator.moveNext())
        {
            RefRecId trvExpTransRecId = enumerator.current();

            if (trvExpTransRecId)
            {
                this.applyAndValidateCostType(TrvExpTrans::find(trvExpTransRecId), true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAllAdditionalInformation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Iterates over all the expense records and checks whether the records
    ///    will be valid after applying the provided Additional information
    /// </summary>
    public void validateAllAdditionalInformation()
    {
        ListEnumerator enumerator = this.selectedExpenses.getEnumerator();
        while (enumerator.moveNext())
        {
            RefRecId trvExpTransRecId = enumerator.current();

            if (trvExpTransRecId)
            {
                this.applyAndValidateAdditionalInformation(TrvExpTrans::find(trvExpTransRecId), true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAllProjId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Iterates over all the expense records and checks whether the records
    ///    will be valid after applying the provided Project Id
    /// </summary>
    public void validateAllProjId()
    {
        ListEnumerator enumerator = this.selectedExpenses.getEnumerator();
        while (enumerator.moveNext())
        {
            RefRecId trvExpTransRecId = enumerator.current();

            if (trvExpTransRecId)
            {
                this.applyAndValidateProjId(TrvExpTrans::find(trvExpTransRecId), true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyAndValidateCostType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies the provided Cost type to the expense record provided
    ///    and validates whether the record would be valid after update.
    /// </summary>
    /// <param name="_trvExpTrans">
    ///    The expense record to apply Cost type and validate
    /// </param>
    /// <param name="_displayInfo">
    ///    Boolean to determine whether warnings should be showed in the infolog
    /// </param>
    /// <param name="_performCostTypeChanges">
    ///    Boolean to determine whether cost type changes should be committed to the database
    /// </param>
    /// <returns>
    ///    True if the record would be valid; otherwise, false
    /// </returns>
    protected boolean applyAndValidateCostType(TrvExpTrans _trvExpTrans, boolean _displayInfo = false, boolean _performCostTypeChanges = false)
    {
        _trvExpTrans.CostType = this.parmCostType();
        return this.resolveField(_trvExpTrans, fieldNum(TrvExpTrans, CostType), _displayInfo, _performCostTypeChanges);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyAndValidateAdditionalInformation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies the provided Additional Information to the expense record provided
    ///    and validates whether the record would be valid after update.
    /// </summary>
    /// <param name="_trvExpTrans">
    ///    The expense record to apply Additional Information and validate
    /// </param>
    /// <param name="_displayInfo">
    ///    Boolean to determine whether warnings should be showed in the infolog
    /// </param>
    /// <returns>
    ///    True if the record would be valid; otherwise, false
    /// </returns>
    protected boolean applyAndValidateAdditionalInformation(TrvExpTrans _trvExpTrans, boolean _displayInfo = false)
    {
        _trvExpTrans.AdditionalInformation = this.parmAdditionalInformation();
        return this.resolveField(_trvExpTrans, fieldNum(TrvExpTrans, AdditionalInformation), _displayInfo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyAndValidateProjId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies the provided Project Id to the expense record provided
    ///    and validates whether the record would be valid after update.
    /// </summary>
    /// <param name="_trvExpTrans">
    ///    The expense record to apply Project Id and validate
    /// </param>
    /// <param name="_displayInfo">
    ///    Boolean to determine whether warnings should be showed in the infolog
    /// </param>
    /// <returns>
    ///    True if the record would be valid; otherwise, false
    /// </returns>
    protected boolean applyAndValidateProjId(TrvExpTrans _trvExpTrans, boolean _displayInfo = false)
    {
        _trvExpTrans.ProjId = this.parmProjId();
        return this.resolveField(_trvExpTrans, fieldNum(TrvExpTrans, ProjId), _displayInfo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether the record is valid before and after the modified effects are applied
    /// </summary>
    /// <param name="_trvExpTrans">
    ///    The expense record to validate
    /// </param>
    /// <param name="_fieldId">
    ///    The field that was modified and needs to be validated
    /// </param>
    /// <param name="_displayInfo">
    ///    Boolean to determine whether warnings should be showed in the infolog
    /// </param>
    /// <param name="_performCostTypeChanges">
    ///    Boolean to determine whether cost type changes should be committed to the database
    /// </param>
    /// <returns>
    ///    True if the record is valid; otherwise, false
    /// </returns>
    protected boolean resolveField(TrvExpTrans _trvExpTrans, FieldId _fieldId, boolean _displayInfo = false, boolean _performCostTypeChanges = false)
    {
        DictField df = new DictField(tableNum(TrvExpTrans), _fieldId);
        str fieldName = df.label();

        // Stop displaying infolog messages during validation
        int infoLogStart = infologLine();

        if (!_trvExpTrans.validateField(_fieldId))
        {
            if (_displayInfo)
            {
                TrvExpTrans local = TrvExpTrans::find(_trvExpTrans.RecId);

                // Begin displaying infolog messages again
                infolog.clear(infoLogStart);

                info(strFmt("@Expense:InvalidFieldExpenseWillNotBeUpdated", fieldName, local.CostType, local.TransDate, local.AmountMST));
            }

            return false;
        }

        // Perform pre-modified logic for a category change
        TrvCostType localCostType;
        if (_performCostTypeChanges)
        {
            localCostType = TrvCostType::find(_trvExpTrans.CostType);
            _trvExpTrans.changeCategoryPreModified(localCostType);

            // Need to reread the record in the event itemizations were deleted.
            _trvExpTrans.reread();
            _trvExpTrans.CostType = localCostType.CostType;
        }

        _trvExpTrans.modifiedField(_fieldId);

        if (!_trvExpTrans.validateWrite())
        {
            if (_displayInfo)
            {
                // Begin displaying infolog messages again
                infolog.clear(infoLogStart);

                TrvExpTrans local = TrvExpTrans::find(_trvExpTrans.RecId);
                info(strFmt("@Expense:InvalidFieldExpenseWillNotBeUpdated", fieldName, local.CostType, local.TransDate, local.AmountMST));
            }

            return false;
        }

        // Perform post-modified logic for a category change
        if (_performCostTypeChanges)
        {
            TrvExpTrans local = _trvExpTrans.orig();
            _trvExpTrans.changeCategoryPostModified(local.ExpType, localCostType.ExpType);
        }

        // Begin displaying infolog messages again
        infolog.clear(infoLogStart);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostType</Name>
				<Source><![CDATA[
    public TrvCostTypeEDT parmCostType(TrvCostTypeEDT _costType = costType)
    {
        costType = _costType;
        return costType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEditCostType</Name>
				<Source><![CDATA[
    public boolean parmEditCostType(boolean _editCostType = editCostType)
    {
        editCostType = _editCostType;
        return editCostType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjId</Name>
				<Source><![CDATA[
    public ProjId parmProjId(ProjId _projId = projId)
    {
        projId = _projId;
        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEditProjId</Name>
				<Source><![CDATA[
    public boolean parmEditProjId(boolean _editProjId = editProjId)
    {
        editProjId = _editProjId;
        return editProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdditionalInformation</Name>
				<Source><![CDATA[
    public ItemFreeTxt parmAdditionalInformation(ItemFreeTxt _additionalInformation = additionalInformation)
    {
        additionalInformation = _additionalInformation;
        return additionalInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEditAdditionalInformation</Name>
				<Source><![CDATA[
    public boolean parmEditAdditionalInformation(boolean _editAdditionalInformation = editAdditionalInformation)
    {
        editAdditionalInformation = _editAdditionalInformation;
        return editAdditionalInformation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>