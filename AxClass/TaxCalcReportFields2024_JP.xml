<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxCalcReportFields2024_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class TaxCalcReportFields2024_JP extends TaxCalcReportFields2023_JP
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    internal void calc(
        TaxReportDataLayout_JP _reportDataLayout,
        TaxReportDataLayout_JP _reportAddonDataLayout,
        TaxReportDataLayout_JP _appendix1DataLayout,
        TaxReportDataLayout_JP _appendix2DataLayout)
    {
        this.calculateTaxReportFields();

        if (amendment ||
            !LedgerConsumptionTaxCalcTrans_JP::existByTaxReportParametersVersion(this, TaxRepVersion::Latest, _appendix2DataLayout))
        {
            TaxReportCalculateFieldsAppendix2_2024_JP::calculate(
                taxPeriod,
                fromDate,
                toDate,
                typeOfDeclaration,
                amendment,
                mapTaxValue,
                calcMethod,
                _appendix2DataLayout);
        }

        if (amendment ||
            !LedgerConsumptionTaxCalcTrans_JP::existByTaxReportParametersVersion(this, TaxRepVersion::Latest, _appendix1DataLayout))
        {
            TaxReportCalculateFieldsAppendix1_2024_JP::calculate(
                taxPeriod,
                fromDate,
                toDate,
                typeOfDeclaration,
                amendment,
                mapTaxValue,
                calcMethod,
                _appendix1DataLayout,
                _appendix2DataLayout);
        }

        if (amendment ||
            !LedgerConsumptionTaxReportTrans_JP::existByTaxReportParametersVersion(this, TaxRepVersion::Latest, _reportAddonDataLayout))
        {
            TaxReportCalculateFieldsReportAddon_JP::calculate(
                taxPeriod,
                fromDate,
                toDate,
                typeOfDeclaration,
                amendment,
                calcMethod,
                _reportAddonDataLayout,
                _appendix1DataLayout);
        }

        if (amendment ||
            !LedgerConsumptionTaxReportTrans_JP::existByTaxReportParametersVersion(this, TaxRepVersion::Latest, _reportDataLayout))
        {
            TaxReportCalculateFieldsReport_JP::calculate(
                taxPeriod,
                fromDate,
                toDate,
                typeOfDeclaration,
                amendment,
                calcMethod,
                _reportDataLayout,
                _appendix1DataLayout,
                _appendix2DataLayout);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static TaxCalcReportFields2024_JP construct()
    {
        return new TaxCalcReportFields2024_JP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTaxReport</Name>
				<Source><![CDATA[
    internal static TaxCalcReportFields2024_JP newFromTaxReport(TaxReport_JP _taxReport)
    {
        TaxCalcReportFields2024_JP taxCalcReportFields = TaxCalcReportFields2024_JP::construct();

        taxCalcReportFields.parmTaxRepVersion(_taxReport.taxRepVersion());
        taxCalcReportFields.parmTaxPeriod(_taxReport.taxPeriod());
        taxCalcReportFields.parmFromDate(_taxReport.fromDate());
        taxCalcReportFields.parmToDate(_taxReport.toDate());
        taxCalcReportFields.parmTypeOfDeclaration(_taxReport.parmTypeOfDeclaration());
        taxCalcReportFields.parmCalcMethod(_taxReport.calcMethod());
        taxCalcReportFields.parmAmendment(_taxReport.amendment());
        taxCalcReportFields.parmTaxRepCounter(0);

        return taxCalcReportFields;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>