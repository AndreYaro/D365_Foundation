<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMIMShipperDeclarationController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>HMIMShipperDeclarationController</c> is a controller class for the Shipper's decleration report
/// </summary>
class HMIMShipperDeclarationController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the opportunity to modify the contract before the report is run.
    /// </summary>
    protected void preRunModifyContract()
    {
        super();

        Query                query                   = this.getFirstQuery();
        QueryBuildDataSource queryBuildDataSource    = query.dataSourceTable(tableNum(HMIMShipperDeclaration));
        QueryBuildRange      queryBuildRange         = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(HMIMShipperDeclaration, ShipmentId));

        if (this.parmArgs().parm())
        {
            queryBuildRange.value(queryValue(this.parmArgs().parm()));
        }
        else if (this.parmArgs().record() && this.parmArgs().dataset() == tableNum(HMIMShipperDeclaration))
        {
            HMIMShipperDeclaration shipperDeclaration = this.parmArgs().record();
            queryBuildRange.value(shipperDeclaration.ShipmentId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (_args.record() && _args.dataset() == tableNum(HMIMShipperDeclaration))
        {
            HMIMShipperDeclarationController shipperDeclarationController = new HMIMShipperDeclarationController();
            shipperDeclarationController.parmArgs(_args);
            shipperDeclarationController.parmReportName(ssrsReportStr(HMIMShipperDeclaration, Report));
            shipperDeclarationController.parmShowDialog(false);
            shipperDeclarationController.startOperation();
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>