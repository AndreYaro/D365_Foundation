<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCROverrideLogin_OverridePrice</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>MCROverrideLogin_OverridePrice</c> class validates a user
///     is authorized to override prices.
/// </summary>
/// <remarks>
///     Based on the difference between the newly overrridden price and
///     the cost of the item represented as a percent (cost markup).  The cost
///     mark up percent will need to be greater than the percent assigned to the users
///     authorization group in the Override Price Mark up Groups form.
/// </remarks>
class MCROverrideLogin_OverridePrice extends MCROverrideLogin
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateCostMarkupPercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the cost markup percent.
    /// </summary>
    /// <param name="_itemId">
    /// The item for which the cost markup percent is calculated.
    /// </param>
    /// <param name="_inventDimId">
    /// The dimension ID for conversion.
    /// </param>
    /// <param name="_salesUnit">
    /// The unit of measure on the sales line.
    /// </param>
    /// <param name="_newPrice">
    /// The override price of the item for which this method calculates cost markup percent.
    /// </param>
    /// <returns>
    /// The calculated cost markup percent.
    /// </returns>
    public MCRCostMarkupPercent calculateCostMarkupPercent(
        ItemId      _itemId,
        InventDimId _inventDimId,
        SalesUnit   _salesUnit,
        SalesPrice  _newPrice)
    {
        InventTableModule inventTableModule = InventTableModule::find(_itemId, ModuleInventPurchSales::Invent);

        // Convert from base inventory unit's price to sales line's unit price.
        ItemCostPrice itemCost = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_itemId,
                                                                                                       _inventDimId,
                                                                                                       inventTableModule.price(),
                                                                                                       _salesUnit,
                                                                                                       inventTableModule.UnitId,
                                                                                                       NoYes::Yes);

        itemCost = itemCost / inventTableModule.priceUnit();

        // if the _newPrice comes in negative then the user must have a percent of 0 in the permissions table
        if (sign(_newPrice) != 1 || _newPrice <= itemCost)
        {
            return 0;
        }

        if (itemCost)
        {
            // Cost is not 0.  Have to check b/c you can not divide by 0.
            return (_newPrice - itemCost) / itemCost;
        }
        else
        {
            // if the item cost is 0 then return 100% so that all users have permission
            return 1.00;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCostMarkupPercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the cost markup percent.
    /// </summary>
    /// <param name="_itemId">
    /// The item for which the cost markup percent is calculated.
    /// </param>
    /// <param name="_salesUnit">
    /// The unit of measure on the sales line.
    /// </param>
    /// <param name="_newPrice">
    /// The override price of the item for which this method calculates cost markup percent.
    /// </param>
    /// <returns>
    /// The calculated cost markup percent.
    /// </returns>
    [SysObsolete('This method is deprecated use calculateCostMarkupPercent instead', false, 31\03\2019)]
    public MCRCostMarkupPercent calcCostMarkupPercent(
        ItemId      _itemId,
        SalesUnit   _salesUnit,
        SalesPrice  _newPrice)
    {
        return this.calculateCostMarkupPercent(_itemId, '', _salesUnit, _newPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateMarginCostMarkupPercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the margin cost markup percent.
    /// </summary>
    /// <param name="_itemId">
    /// The item for which the margin cost markup percent is calculated.
    /// </param>
    /// <param name="_inventDimId">
    /// The dimension ID for conversion.
    /// </param>
    /// <param name="_salesUnit">
    /// The unit of measure on the sales line.
    /// </param>
    /// <param name="_newPrice">
    /// The override price of the item for which this method calculates margin cost markup percent.
    /// </param>
    /// <param name="_totaldeductible">
    /// The total amount that is able to be taken off the item price.
    /// </param>
    /// <returns>
    /// The calculated margin cost markup percent.
    /// </returns>
    public MCRCostMarkupPercent calculateMarginCostMarkupPercent(
        ItemId      _itemId,
        InventDimId _inventDimId,
        SalesUnit   _salesUnit,
        SalesPrice  _newPrice,
        AmountCur   _totaldeductible)
    {
        InventTableModule inventTableModule = InventTableModule::find(_itemId, ModuleInventPurchSales::Invent);

        ItemCostPrice itemCost = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_itemId,
                                                                                                       _inventDimId,
                                                                                                       inventTableModule.price(),
                                                                                                       _salesUnit,
                                                                                                       inventTableModule.UnitId,
                                                                                                       NoYes::Yes);

        itemCost = itemCost / inventTableModule.priceUnit();
        itemCost = itemCost + _totaldeductible;

        // if the _newPrice comes in negative then the user must have a percent of 0 in the permissions table
        if (sign(_newPrice) != 1 || _newPrice <= itemCost)
        {
            return 0;
        }

        if (itemCost) // cost is not 0.  Have to check b/c you can not divide by 0.
        {
            return (_newPrice - itemCost) / itemCost;
        }
        else // if the item cost is 0 then return 100% so that all users have permission.
        {
            return 1.00;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMarginCostMarkupPercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the margin cost markup percent.
    /// </summary>
    /// <param name="_itemId">
    /// The item for which the margin cost markup percent is calculated.
    /// </param>
    /// <param name="_salesUnit">
    /// The unit of measure on the sales line.
    /// </param>
    /// <param name="_newPrice">
    /// The override price of the item for which this method calculates margin cost markup percent.
    /// </param>
    /// <param name="totaldeductible">
    /// The total amount that is able to be taken off the item price.
    /// </param>
    /// <returns>
    /// The calculated margin cost markup percent.
    /// </returns>
    [SysObsolete('This method is deprecated use calculateMarginCostMarkupPercent instead.', false, 31\03\2019)]
    public MCRCostMarkupPercent calcMarginCostMarkupPercent(ItemId _itemId,
                                                            SalesUnit _salesUnit,
                                                            SalesPrice  _newPrice,
                                                            AmountCur totaldeductible)
    {
        return this.calculateMarginCostMarkupPercent(_itemId, '', _salesUnit, _newPrice, totaldeductible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUserValidatedForOverride</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns a <c>boolean</c> value indicating whether or not the user is authorized
    ///     for overrides.
    /// </summary>
    /// <param name="_userId">
    ///      The network alias to use for the override login.
    /// </param>
    /// <param name="_itemId">
    ///     The <c>ItemId</c> to override the price on.
    /// </param>
    /// <param name="_inventDimId">
    /// The dimension ID for conversions.
    /// </param>
    /// <param name="_salesUnit">
    ///     The <c>SalesUnit</c> for the item.
    /// </param>
    /// <param name="_newPrice">
    ///     The <c>Price</c> to override the price to.
    /// </param>
    /// <returns>
    ///     true if the user is allowed to override the price; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     This method used to default the new sales price to zero, and if it was
    ///     zero, it assumed the user was checking permissions for releasing an
    ///     override.  Since there is now no security around releasing price
    ///     overrides, the new price is now required.
    /// </remarks>
    public boolean isUserValidatedForOverride(
        UserId      _userId, 
        ItemId      _itemId,
        InventdimId _inventDimId,
        SalesUnit   _salesUnit, 
        Price       _newPrice)
    {
        MCRCostMarkupPercent cmPercent;
        cmPercent = 100 * this.calculateCostMarkupPercent(_itemId, _inventDimId, _salesUnit, _newPrice);
        return this.isUserValid(_userId, cmPercent, fieldNum(MCRPriceOverrideMarkUpGroup, CostMarkUpPercent));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUserValidForTurnPriceOverrideOff</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns a <c>boolean</c> value indicating whether or not the user is authorized to
    ///     turn price overrides off.
    /// </summary>
    /// <returns>
    ///     This method always returns true.
    /// </returns>
    /// <remarks>
    ///     A business requirement has been changed, and we no longer need security on
    ///     price override releases.
    /// </remarks>
    public boolean isUserValidForTurnPriceOverrideOff()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>