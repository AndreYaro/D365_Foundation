<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TimeZoneHelper_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     This class is responsible for formatting date and time with timezone information, according to the format
///     specified by the NF-e xml schema.
/// </summary>
public class TimeZoneHelper_BR
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formatDateTimeWithTimeZone</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Given a date and time this method will return a string representation of
    ///     this date and time along with the timezone information
    /// </summary>
    /// <param name="_dateTimeToFormat">
    ///     The date time to be formated, in Utc+0.
    /// </param>
    /// <param name="_secondsOffset">
    ///     The difference in seconds between the date in local time and in UTC when the date was generated.
    /// </param>
    /// <returns>
    ///    The formated string of the date time in format AAAA-MM-DDThh:mm:ssTZD (ex: 2010-08-19T13:00:15-03:00)
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public DateTimeWithTimeZone_BR formatDateTimeWithTimeZone(UtcDateTime _dateTimeToFormat, int64 _secondsOffset)
    {
        utcDateTime dateTimeWithOffset;
        str         offset;

        if (!_dateTimeToFormat)
        {
            return '';
        }
        else
        {
            dateTimeWithOffset = DateTimeUtil::addSeconds(_dateTimeToFormat, _secondsOffset);

            offset = this.int642HourMinuteFormat(_secondsOffset);

            return strfmt("%1%2",DateTimeUtil::toStr(dateTimeWithOffset), offset);
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>formatNumTo2LengthStr</Name>
				<Source><![CDATA[
    private str formatNumTo2LengthStr(int64 _value)
    {
        str formatedStr;

        formatedStr = int642str(_value);

        if (strlen(formatedStr) == 1)
        {
            formatedStr = strfmt('%1%2', '0', formatedStr);
        }

        return formatedStr;
    }
]]></Source>
			</Method>
			<Method>
				<Name>int642HourMinuteFormat</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Converts a time, in seconds, to hours and minutes in the format HH:mm.
    /// </summary>
    /// <param name="_seconds">
    ///     The total number of seconds to be converted on a hour/minute format
    /// </param>
    /// <returns>
    ///     An string containing the time in HH:mm format
    /// </returns>
    /// <remarks>
    ///     Example: An input of 72 seconds would return the string "01:12"
    /// </remarks>
    private str int642HourMinuteFormat(int64 _seconds)
    {
        #define.TotalSecondsPerHour(3600)
        #define.TotalSecondsPerMinute(60)

        int64 totalNumberOfHours = this.int64Abs(_seconds div #TotalSecondsPerHour);
        int64 remainingMinutes   = this.int64Abs(_seconds mod #TotalSecondsPerHour div #TotalSecondsPerMinute);
        str   timeZoneSign;
        str   secondsInHourMinuteFormat;

        if (_seconds < 0)
        {
            timeZoneSign = '-';
        }
        else
        {
            timeZoneSign = '+';
        }

        secondsInHourMinuteFormat = strfmt('%1%2:%3',
                             timeZoneSign,
                             this.formatNumTo2LengthStr(totalNumberOfHours),
                             this.formatNumTo2LengthStr(remainingMinutes));

        return secondsInHourMinuteFormat;
    }
]]></Source>
			</Method>
			<Method>
				<Name>int64Abs</Name>
				<Source><![CDATA[
    private int64 int64Abs(int64 _value)
    {
        if (_value < 0)
        {
            _value = -_value;
        }

        return _value;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>