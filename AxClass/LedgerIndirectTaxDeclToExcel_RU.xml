<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerIndirectTaxDeclToExcel_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerIndirectTaxDeclToExcel_RU</c> class performs printing of the indirect tax declaration.
/// </summary>
using Microsoft.Dynamics365.LocalizationFramework;
class LedgerIndirectTaxDeclToExcel_RU extends RunBaseBatch implements BatchRetryable
{
    LedgerIndirectTaxDeclJournalTable_RU    journalTable;
    int                                     correctionNumber;
    EmployeeID_RU                           employeeId;
    LedgerIndirectTaxDeclLocation_RU        taxDeclarationLocation;
    LedgerIndirectTaxDeclLocationCode_RU    taxDeclarationLocationCode;
    Set                                     declarationSet;
    str                                     taxPayerSign;
    FirstName                               firstName;
    LastName                                lastName;
    MiddleName                              middleName;
    GniCode_RU                              gniCode;
    CompanyInfo                             companyInfo;
    INN_RU                                  inn;
    KPPU_RU                                 kpp;
    OKDP_RU                                 okdp;
    Phone                                   companyPhone;
    Name                                    companyName;
    int                                     totalPages;
    BranchId_RU                             branchIdFilter;
    TaxAuthority                            taxAuthorityFilter;
    boolean                                 section1Printed, section2Printed, appendixPrinted;
    XMLExcelDocument_RU                     document;
    ComExcelDocument_RU                     excelDocument;
    boolean                                 detailedAppendix;

    private const str ExcelExt = '.xlsx';

    private const str PageStr = 'стр.';
    private const int Section1SheetNo = 2;
    private const int Section2SheetNo = 3;
    private const str ERModelName = 'model';
    private const str ERJournalNum = '0010_Variables/0011_JournalNum';
    private const boolean IsERReport = true;

    private const int CurrentVersion = 3;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amount2str</Name>
				<Source><![CDATA[
    private str amount2str(Amount _amount, int _decimals = 2)
    {
        return num2str(_amount, 0, _decimals, 1, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentGuid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate unique identifier for the export document.
    /// </summary>
    /// <returns>Unique Identifier for export document.</returns>
    final public static guid getDocumentGuid()
    {
        return newGuid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runER</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs export via ER solution.
    /// </summary>
    private void runER()
    {
        ERFormatMappingTable erFormatMappingTable = ERFormatMappingTable::find(TaxParameters::find().IndirectTaxERFormatMapping_RU);

        if (erFormatMappingTable)
        {
            ERmodelDefinitionInputParametersAction inputParameter = new ERmodelDefinitionInputParametersAction();
            inputParameter.addParameter(ERPath::combine(ERModelName, ERJournalNum), journalTable.JournalId);

            ERObjectsFactory::createFormatMappingRunWithBatchSupportByFormatMappingId(erFormatMappingTable.recID, '', true)
                .withParameter(inputParameter)
                .run();
        }
        else
        {
            throw error("@AccountsReceivable:ExpectedFormatMappingNotFound");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public Description caption()
    {
        return LedgerIndirectTaxDeclToExcel_RU::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Contains additional checks before document creation.
    /// </summary>
    /// <returns>
    ///     Always true.
    /// </returns>
    private boolean checkDocument()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        FormRun      dialogForm;
        Args         dialogArgs = new Args(formstr(LedgerIndirectTaxDeclToExcelDialog_RU));

        dialogArgs.record(journalTable);
        dialogArgs.caller(this);
        dialogForm = classfactory.formRunClass(dialogArgs);
        dialogForm.init();

        return dialogForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDocument</Name>
				<Source><![CDATA[
    protected void endDocument()
    {
        document.closeDocument(true);

        File::SendFileToUser(document.parmStream(),
            System.IO.Path::ChangeExtension(this.fileName() + this.fileNamePostfix(),
            ExcelExt),
        classstr(FileUploadTemporaryStorageStrategy));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        const str LedgerIndirectTaxDeclaration = 'LedgerIndirectTaxDeclaration';

        return LedgerIndirectTaxDeclaration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    protected Filename fileNamePostfix()
    {
        return strFmt("@GLS110611",
            date2Str(journalTable.fromDate(),
                DateFormat::DMY,
                DateDay::Digits2,
                DateSeparator::Hyphen,
                DateMonth::Digits2,
                DateSeparator::Hyphen,
                DateYear::Digits4,
                DateFlags::None),
            date2Str(journalTable.toDate(),
                DateFormat::DMY,
                DateDay::Digits2,
                DateSeparator::Hyphen,
                DateMonth::Digits2,
                DateSeparator::Hyphen,
                DateYear::Digits4,
                DateFlags::None));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillINNKPP</Name>
				<Source><![CDATA[
    private void fillINNKPP(int _worksheet)
    {
        document.fillCellsLeft(_worksheet, 'AK1', inn, 12);
        document.fillCellsLeft(_worksheet, 'AK4', kpp, 9);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSection1</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the first section of the document.
    /// </summary>
    private void fillSection1()
    {
        LedgerIndirectTaxDeclJournalTrans_RU        journalTransGroup, journalTrans;
        LedgerIndirectTaxSection1DeclTrans_RU       section1DeclTransGroup, section1DeclTrans;
        TaxAuthorityOKATO_RU                        taxAuthorityOKATO;
        int                                         page = 1;

        void newPage()
        {
            document.insertSheet(2, totalPages, strfmt("@SYS76681", PageStr, 2, page));
            totalPages++;
            page++;
            section1Printed = true;
        }

        Amount getVATByLine(LedgerIndirectTaxVATLineNum_RU  _lineNum)
        {
            LedgerIndirectTaxDeclJournalTrans_RU    journalTransLocal;

            select sum(VATAmount) from section1DeclTrans
                where section1DeclTrans.JournalId                == journalTable.JournalId
                   && section1DeclTrans.BudgetReceiptClassCode   == section1DeclTransGroup.BudgetReceiptClassCode
                   && section1DeclTrans.LineNum                  == _lineNum
                   && (section1DeclTrans.BranchId                == branchIdFilter || ! branchIdFilter)
            exists join journalTransLocal
                where journalTransLocal.JournalId == section1DeclTrans.JournalId
                   && journalTransLocal.BranchId  == section1DeclTrans.BranchId
                   && journalTransLocal.OKATO     == journalTransGroup.OKATO;

            return section1DeclTrans.VATAmount;
        }

        while select journalTransGroup
            group by OKATO
            where journalTransGroup.JournalId == journalTable.JournalId
               && (journalTransGroup.BranchId == branchIdFilter || ! branchIdFilter)
        exists join taxAuthorityOKATO
            where taxAuthorityOKATO.OKATO         == journalTransGroup.OKATO
               && (taxAuthorityOKATO.TaxAuthority == taxAuthorityFilter || ! taxAuthorityFilter)
        {
            while select section1DeclTransGroup
                group by BudgetReceiptClassCode
                where section1DeclTransGroup.JournalId == journalTable.JournalId
                   && (section1DeclTransGroup.BranchId == branchIdFilter || ! branchIdFilter)
            exists join journalTrans
                where journalTrans.JournalId == section1DeclTransGroup.JournalId
                   && journalTrans.BranchId  == section1DeclTransGroup.BranchId
                   && journalTrans.OKATO     == journalTransGroup.OKATO
            {
                newPage();

                document.fillCellsLeft(totalPages,  'BI13', journalTransGroup.OKATO, 11);
                document.fillCellsLeft(totalPages,  'BI15', section1DeclTransGroup.BudgetReceiptClassCode, 20);

                document.fillCellsRight(totalPages, 'CY17', this.amount2str(getVATByLine(LedgerIndirectTaxVATLineNum_RU::Line030)), 15);
                document.fillCellsRight(totalPages, 'CY20', this.amount2str(getVATByLine(LedgerIndirectTaxVATLineNum_RU::Line031)), 15);
                document.fillCellsRight(totalPages, 'CY23', this.amount2str(getVATByLine(LedgerIndirectTaxVATLineNum_RU::Line032)), 15);
                document.fillCellsRight(totalPages, 'CY26', this.amount2str(getVATByLine(LedgerIndirectTaxVATLineNum_RU::Line033)), 15);
                document.fillCellsRight(totalPages, 'CY29', this.amount2str(getVATByLine(LedgerIndirectTaxVATLineNum_RU::Line034)), 15);
                document.fillCellsRight(totalPages, 'CY32', this.amount2str(getVATByLine(LedgerIndirectTaxVATLineNum_RU::Line035)), 15);
                document.fillCellsRight(totalPages, 'CY35', this.amount2str(getVATByLine(LedgerIndirectTaxVATLineNum_RU::Line040)), 15);
            }
        }

        if (! section1Printed)
        {
            newPage();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSection2</Name>
				<Source><![CDATA[
    private void fillSection2()
    {
        LedgerIndirectTaxDeclJournalTrans_RU        journalTransOKATO, journalTransGroup, journalTrans;
        LedgerIndirectTaxSection2DeclTrans_RU       section2DeclTransGroup, section2DeclTrans;
        int                                         curLine, printedLines;
        str                                         fraction, curLineStr;
        TaxAuthorityOKATO_RU                        taxAuthorityOKATO;
        int                                         page = 1;
        CountryOKSMCode_RU currentCountryOKSMCode;
        str curLine2Str, curLine3Str;

        const int LinesPerPage = 6;

        void newPage()
        {
            document.insertSheet(3, totalPages, strfmt("@SYS76681", PageStr, 3, page));
            totalPages++;
            page++;
            section2Printed = true;

            document.fillCellsLeft (totalPages, 'BI13', journalTransOKATO.OKATO, 11);
            document.fillCellsLeft (totalPages, 'BI15', section2DeclTransGroup.BudgetReceiptClassCode, 20);
            document.fillCellsRight(totalPages, 'CY17', this.amount2str(section2DeclTransGroup.ExciseAmount), 15);
            document.fillCellsLeft (totalPages, 'BI24', currentCountryOKSMCode, 3);
            curLine = 29;
            printedLines = 0;
        }

        while select journalTransOKATO
            group by OKATO
            where journalTransOKATO.JournalId == journalTable.JournalId
               && (journalTransOKATO.BranchId == branchIdFilter || ! branchIdFilter)
        exists join taxAuthorityOKATO
            where taxAuthorityOKATO.OKATO         == journalTransOKATO.OKATO
               && (taxAuthorityOKATO.TaxAuthority == taxAuthorityFilter || ! taxAuthorityFilter)
        {
            while select sum(ExciseAmount) from section2DeclTransGroup
                group by BudgetReceiptClassCode
                where section2DeclTransGroup.JournalId == journalTable.JournalId
                   && (section2DeclTransGroup.BranchId == branchIdFilter || ! branchIdFilter)
            exists join journalTransGroup
                where journalTransGroup.JournalId == section2DeclTransGroup.JournalId
                   && journalTransGroup.BranchId  == section2DeclTransGroup.BranchId
                   && journalTransGroup.OKATO     == journalTransOKATO.OKATO
            {
                currentCountryOKSMCode = '';

                while select sum(ExcisableQty), sum(TaxbaseQty), sum(ExciseAmount) from section2DeclTrans
                    group by CountryOKSMCode, KindCode, Unit, ExcisableMeasure
                    where section2DeclTrans.JournalId              == journalTable.JournalId
                       && section2DeclTrans.BudgetReceiptClassCode == section2DeclTransGroup.BudgetReceiptClassCode
                       && (section2DeclTrans.BranchId              == branchIdFilter || ! branchIdFilter)
                exists join journalTrans
                    where journalTrans.JournalId == section2DeclTrans.JournalId
                       && journalTrans.BranchId  == section2DeclTrans.BranchId
                       && journalTrans.OKATO     == journalTransOKATO.OKATO
                {
                    if (printedLines >= LinesPerPage || section2DeclTrans.CountryOKSMCode != currentCountryOKSMCode)
                    {
                        currentCountryOKSMCode = section2DeclTrans.CountryOKSMCode;
                        newPage();
                    }

                    curLineStr = int2str(curLine);
                    curLine2Str = int2str(curLine + 2);
                    curLine3Str = int2str(curLine + 4);
                    document.fillCellsLeft(totalPages, 'G'  + curLineStr, section2DeclTrans.KindCode, 3);
                    document.fillCellsLeft(totalPages, 'G' + curLine2Str, unitOfMeasure_W::findByUnitOfMeasure(UnitOfMeasure::findBySymbol(section2DeclTrans.Unit).RecID).NationalCode, 3);

                    // Excisable measure
                    document.fillCellsRight(totalPages, 'AT' + curLineStr, this.amount2str(trunc(section2DeclTrans.ExcisableMeasure),0), 4);
                    fraction = substr(this.amount2str(frac(section2DeclTrans.ExcisableMeasure), 2), 3, 2);
                    document.fillCellsLeft(totalPages, 'AZ' + curLineStr, fraction, 2);

                    // Excisable quantity
                    document.fillCellsRight(totalPages, 'CY' + curLineStr, this.amount2str(trunc(section2DeclTrans.ExcisableQty),0), 11);
                    fraction = substr(this.amount2str(frac(section2DeclTrans.ExcisableQty), 3), 3, 3);
                    document.fillCellsLeft(totalPages, 'DE' + curLineStr, fraction, 3);

                    // Tax base quantity
                    document.fillCellsRight(totalPages, 'CY' + curLine2Str, this.amount2str(trunc(section2DeclTrans.TaxBaseQty), 0), 11);
                    fraction = substr(this.amount2str(frac(section2DeclTrans.TaxBaseQty), 3), 3, 3);
                    document.fillCellsLeft(totalPages, 'DE' + curLine2Str, fraction, 3);

                    // Excise amount
                    document.fillCellsRight(totalPages, 'DK' + curLine3Str, this.amount2str(section2DeclTrans.ExciseAmount), 15);

                    curLine += 6;
                    printedLines++;
                }
            }
        }

        if (! section2Printed)
        {
            newPage();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTitlePage</Name>
				<Source><![CDATA[
    private void fillTitlePage()
    {
        this.fillINNKPP(1);

        document.fillCellsLeft(1, 'X14',  int2str(correctionNumber), 3);
        document.fillCellsRight(1, 'BX14', int2str(journalTable.PeriodNum), 2, '0');
        document.fillCellsLeft(1, 'DD14', int2str(journalTable.FiscalYear));
        document.fillCellsLeft(1, 'AX16', gniCode, 4);

        document.fillCellsLeft(1, 'DF16', taxDeclarationLocationCode);

        document.fillCellsLeft(1, 'A18',  substr(companyName,   1,  40), 40);
        document.fillCellsLeft(1, 'A20',  substr(companyName,  41,  80), 40);
        document.fillCellsLeft(1, 'A22',  substr(companyName,  81, 120), 40);
        document.fillCellsLeft(1, 'A24',  substr(companyName, 121, 180), 40);

        document.fillCellsLeft(1, 'AE29', companyPhone, 20);

        document.fillCellsLeft(1, 'M37',  taxPayerSign,  20);
        document.fillCellsLeft(1, 'A40',  lastName,      20);
        document.fillCellsLeft(1, 'A42',  firstName,     20);
        document.fillCellsLeft(1, 'A45',  middleName,    20);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTotalPages</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes template pages, sets worksheet names and insert page numbers.
    /// </summary>
    private void fillTotalPages()
    {
        int             page = 0;
        MapEnumerator   me;

        // delete sheets from template
        document.deleteWorkSheet(Section2SheetNo);
        document.deleteWorkSheet(Section1SheetNo);

        totalPages = document.workbook().worksheets().elements();
        document.fillCellsRight(1, 'K31', int2str(totalPages), 3);

        me = document.workbook().worksheets().getEnumerator();

        while (me.moveNext())
        {
            page++;
            document.fillCellsRight(me.currentKey(), 'BX4', int2str(page), 3);
            this.fillINNKPP(me.currentKey());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens an XMLExcelDocument to work with
    /// </summary>
    /// <returns>
    /// true, if document was opened
    /// </returns>
    /// <remarks>
    /// File first copied to subfolder of current user temp path, if subfolder doesn't exist, it's created
    /// </remarks>
    public boolean makeDocument()
    {
        boolean ret = true;

        try
        {
            document = XMLExcelDocument_RU::newFromResource(this.templateName(), false);
        }
        catch
        {
            ret = checkFailed(strFmt("@SYS72245", this.fileName()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, correctionNumber, employeeId, taxDeclarationLocation, taxDeclarationLocationCode];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrectionNumber</Name>
				<Source><![CDATA[
    public int parmCorrectionNumber(int  _correctionNumber = correctionNumber)
    {
        correctionNumber = _correctionNumber;
        return correctionNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeclarationSet</Name>
				<Source><![CDATA[
    public Set parmDeclarationSet(Set _declarationSet = declarationSet)
    {
        declarationSet = _declarationSet;
        return declarationSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmployeeId</Name>
				<Source><![CDATA[
    public EmployeeId_RU parmEmployeeId(EmployeeId_RU  _employeeId = employeeId)
    {
        employeeId = _employeeId;
        return employeeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTable</Name>
				<Source><![CDATA[
    public LedgerIndirectTaxDeclJournalTable_RU parmJournalTable(LedgerIndirectTaxDeclJournalTable_RU _journalTable = journalTable)
    {
        journalTable = _journalTable;
        return journalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxDeclarationLocation</Name>
				<Source><![CDATA[
    public LedgerIndirectTaxDeclLocation_RU parmTaxDeclarationLocation(LedgerIndirectTaxDeclLocation_RU _taxDeclarationLocation = taxDeclarationLocation)
    {
        taxDeclarationLocation = _taxDeclarationLocation;
        return taxDeclarationLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxDeclarationLocationCode</Name>
				<Source><![CDATA[
    public LedgerIndirectTaxDeclLocationCode_RU parmTaxDeclarationLocationCode(LedgerIndirectTaxDeclLocationCode_RU _taxDeclarationLocationCode = taxDeclarationLocationCode)
    {
        taxDeclarationLocationCode = _taxDeclarationLocationCode;
        return taxDeclarationLocationCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs printing of the document.
    /// </summary>
    private void printDocument()
    {
        SetEnumerator   se = declarationSet.getEnumerator();
        BranchId_RU     branchId;
        Branches_RU     branches;
        VendTable       vendTable;
        TaxAuthority    taxAuthority;
        FromDate        fromDate = journalTable.fromDate();

        while (se.moveNext())
        {
            if (this.makeDocument())
            {
                totalPages      = document.workbook().worksheets().elements();
                section1Printed = false;
                section2Printed = false;
                appendixPrinted = false;
                [branchId, taxAuthority]  = se.current();
                branches = Branches_RU::find(branchId);

                if (branches.VendAccount)
                {
                    vendTable   = branches.vendTable();
                    inn         = vendTable.partyINNasOfDate_RU(fromDate);
                    kpp         = vendTable.partyKPPasOfDate_RU(fromDate);
                }
                else
                {
                    inn         = CompanyInfoHelper::partyINNasOfDate_RU(companyInfo, fromDate);
                    kpp         = CompanyInfoHelper::partyKPPasOfDate_RU(companyInfo, fromDate);
                }

                companyPhone    = companyInfo.phone();
                companyName     = companyInfo.Name;
                okdp            = CompanyInfoHelper::partyOKDPasOfDate_RU(companyInfo, fromDate);

                switch (taxDeclarationLocation)
                {
                    case LedgerIndirectTaxDeclLocation_RU::RussianOrganization:
                        branchIdFilter      = '';
                        taxAuthorityFilter  = '';
                        gniCode             = TaxAuthorityAddress::findByOKATO_RU(CompanyInfoHelper::partyOKATOasOfDate_RU(companyInfo, fromDate)).GniCode_RU;
                        break;

                    case LedgerIndirectTaxDeclLocation_RU::SeparateSubdivision:
                        branchIdFilter      = branchId;
                        taxAuthorityFilter  = '';
                        gniCode             = TaxAuthorityAddress::findByOKATO_RU(vendTable.partyOKATOasOfDate_RU(fromDate)).GniCode_RU;
                        break;

                    case LedgerIndirectTaxDeclLocation_RU::TaxAuthority:
                        branchIdFilter      = '';
                        taxAuthorityFilter  = taxAuthority;
                        gniCode             = TaxAuthorityAddress::find(taxAuthority).GniCode_RU;
                        break;

                    default:
                        break;
                }

                this.fillTitlePage();
                this.fillSection1();
                this.fillSection2();
                this.fillTotalPages();
                this.endDocument();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        DirPartyTable       leader;
        DirPersonName       responsible, leaderName;
        System.Exception    exception;

        if (this.checkDocument())
        {
            companyInfo     = CompanyInfo::find();
            leader          = DirPartyTable::findByName(OfficialsTable_RU::nameDirector());
            responsible     = DirPersonName::find(EmployeeTable_RU::findByEmployeeId(employeeId).worker().Person);
            leaderName      = DirPersonName::find(leader.RecId);

            if (responsible.RecId)
            {
                taxPayerSign    = '2';
                firstName       = responsible.FirstName;
                lastName        = responsible.LastName;
                middleName      = responsible.MiddleName;
            }
            else if (leader.RecId)
            {
                taxPayerSign    = '1';
                firstName       = leaderName.FirstName;
                lastName        = leaderName.LastName;
                middleName      = leaderName.MiddleName;
            }

            try
            {
                this.printDocument();
            }
            catch(Exception::CLRError)
            {
                exception = CLRInterop::getLastException();
                document.closeDocument(false);

                throw error(exception.ToString());
            }
            catch(Exception::Error)
            {
                document.closeDocument(false);
                throw error("@SYS18738");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(LedgerIndirectTaxDeclaration2018_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        const int Version2 = 2;
        Integer version  = conpeek(packedClass,1);

        switch (version)
        {
            case CurrentVersion:
                [version, correctionNumber, employeeId, taxDeclarationLocation, taxDeclarationLocationCode] = packedClass;
                break;

            case Version2:
                [version, correctionNumber, employeeId, taxDeclarationLocation, taxDeclarationLocationCode, detailedAppendix] = packedClass;
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Text description of the class which is shown in the dialog.
    /// </summary>
    /// <returns>
    ///   Text description of the class.
    /// </returns>
    public static ClassDescription description()
    {
        return "@SYP4860052";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        LedgerIndirectTaxDeclToExcel_RU     taxDeclaration;

        taxDeclaration = new LedgerIndirectTaxDeclToExcel_RU();
        taxDeclaration.parmJournalTable(_args.record());

        if (IsERReport)
        {
            taxDeclaration.runER();
        }
        else if (taxDeclaration.prompt())
        {
            taxDeclaration.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>