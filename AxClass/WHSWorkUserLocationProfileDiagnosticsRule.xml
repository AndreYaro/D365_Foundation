<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkUserLocationProfileDiagnosticsRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkUserLocationProfileDiagnosticsRule</c> class is used to check whether any work user locations have incorrectly assigned location profiles.
/// </summary>
/// <remarks>
/// User locations must have a location profile
/// User location profile must be License plate tracked.
/// </remarks>
[DiagnosticsRuleAttribute]
public final class WHSWorkUserLocationProfileDiagnosticsRule implements IDiagnosticsRule
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether any work user locations have incorrectly assigned location profiles.
    /// </summary>
    /// <returns>
    /// An instance of <c>DiagnosticsRuleValidationResult</c> which contains the validation result.
    /// </returns>
    [DiagnosticsRuleSubscriptionAttribute(DiagnosticsArea::SCM, "@WAX:WorkUserLocationProfileDiagRuleName", DiagnosticsRunFrequency::Monthly, "@WAX:WorkUserLocationProfileDiagRule_Description")]
    public DiagnosticsRuleValidationResult validate()
    {
        DiagnosticsRuleValidationResult validationResult = DiagnosticsRuleValidationResult::construct();

        this.validateLocationsWithNoLocationProfile(validationResult);
        this.validateLocationsWithNonLPTrackedLocProfile(validationResult);
       
        return validationResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLocationsWithNoLocationProfile</Name>
				<Source><![CDATA[
    private void validateLocationsWithNoLocationProfile(DiagnosticsRuleValidationResult _validationResult)
    {
        List                    userLocationsWithEmptyLocProfile = new List(Types::Container);
        WMSLocation             location;
        WHSWorkUserWarehouse    workUserWarehouse;

        while select crosscompany DataAreaId, inventLocationId, wMSLocationId from location
            where location.wMSLocationId != ''
                && location.LocProfileId == ''
            exists join workUserWarehouse
                where workUserWarehouse.DataAreaId == location.DataAreaId
                    && workUserWarehouse.InventLocationId == location.inventLocationId
                    && workUserWarehouse.UserId == location.wMSLocationId
        {
            userLocationsWithEmptyLocProfile.addEnd([location.DataAreaId, location.inventLocationId, location.wMSLocationId]);
        }

        Counter numberOfInvalidLocations = userLocationsWithEmptyLocProfile.elements();
        if (numberOfInvalidLocations > 0)
        {
            _validationResult.addValidationResult("@WAX:WorkUserLocationProfileNotAssignedDiagRule_ErrorMsg", DiagnosticsValidationSeverity::Medium, "@WAX:WorkUserLocationProfileDiagRule_Recommendation");

            ListEnumerator le = userLocationsWithEmptyLocProfile.getEnumerator();
            while (le.moveNext())
            {
                str dataAreaId, inventLocationId, wmsLocationId;

                [dataAreaId, inventLocationId, wmsLocationId] = le.current();

                _validationResult.addValidationDetail(fieldPName(WMSLocation, DataAreaId), dataAreaId);
                _validationResult.addValidationDetail(fieldPName(WMSLocation, inventLocationId), inventLocationId);
                _validationResult.addValidationDetail(fieldPName(WMSLocation, wMSLocationId), wmsLocationId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLocationsWithNonLPTrackedLocProfile</Name>
				<Source><![CDATA[
    private void validateLocationsWithNonLPTrackedLocProfile(DiagnosticsRuleValidationResult _validationResult)
    {
        List                    userLocationsWithNonLPTrackedLocProfile = new List(Types::Container);
        WMSLocation             location;
        WHSWorkUserWarehouse    workUserWarehouse;
        WHSLocationProfile      locProfile;

        while select crosscompany DataAreaId, inventLocationId, wMSLocationId, LocProfileId from location
            where location.wMSLocationId != ''
            exists join workUserWarehouse
                where workUserWarehouse.DataAreaId == location.DataAreaId
                    && workUserWarehouse.InventLocationId == location.inventLocationId
                    && workUserWarehouse.UserId == location.wMSLocationId
            exists join locProfile
                where locProfile.DataAreaId == location.DataAreaId
                    && locProfile.LocProfileId == location.LocProfileId
                    && locProfile.LPControlled == NoYes::No
        {
            userLocationsWithNonLPTrackedLocProfile.addEnd([location.DataAreaId, location.inventLocationId, location.wMSLocationId, location.LocProfileId]);
        }

        Counter numberOfInvalidLocations = userLocationsWithNonLPTrackedLocProfile.elements();
        if (numberOfInvalidLocations > 0)
        {
            _validationResult.addValidationResult("@WAX:WorkUserLocationProfileNotLPTrackedDiagRule_ErrorMsg", DiagnosticsValidationSeverity::Medium, "@WAX:WorkUserLocationProfileDiagRule_Recommendation");

            ListEnumerator le = userLocationsWithNonLPTrackedLocProfile.getEnumerator();

            while (le.moveNext())
            {
                str dataAreaId, inventLocationId, wmsLocationId, locProfileId;

                [dataAreaId, inventLocationId, wmsLocationId, locProfileId] = le.current();

                _validationResult.addValidationDetail(fieldPName(WMSLocation, DataAreaId), dataAreaId);
                _validationResult.addValidationDetail(fieldPName(WMSLocation, inventLocationId), inventLocationId);
                _validationResult.addValidationDetail(fieldPName(WMSLocation, wMSLocationId), wmsLocationId);
                _validationResult.addValidationDetail(fieldPName(WMSLocation, LocProfileId), locProfileId);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>