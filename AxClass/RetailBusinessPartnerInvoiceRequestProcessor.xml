<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailBusinessPartnerInvoiceRequestProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Runtime.Entities.DataModel;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Json;
using System.IO;
using System.Text;

/// <summary>
/// The <c>RetailBusinessPartnerInvoiceRequestProcessor</c> class to process the invoice request of business partner user operation.
/// </summary>
internal class RetailBusinessPartnerInvoiceRequestProcessor extends RetailBusinessPartnerOperationProcessorBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processInternal</Name>
				<Source><![CDATA[
    protected void processInternal(RetailBusinessPartnerOperation _operation)
    {
        var contract = this.DeserializeInvoiceCopyRequestFromJSON(_operation.Value);

        if (this.shouldSendEmail(contract, _operation))
        {
            var controller = this.initSalesInvoiceController(contract);
            controller.startOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSendEmail</Name>
				<Source><![CDATA[
    internal boolean shouldSendEmail(InvoiceCopyRequest _contract, RetailBusinessPartnerOperation _operation)
    {
        RetailCustTable retailCustTable;
        CustInvoiceJour custInvoiceJour;
        SalesTable salesTable;
        CustHierarchyNode custHierarchyNode;
        CustHierarchyNode adminCustHierarchyNode;
        boolean shouldSendEmail = true;

        if (_contract.DeliveryType != BusinessPartnerOperationDeliveryType::Email)
        {
            return false;
        }

        select firstonly custInvoiceJour where custInvoiceJour.InvoiceId == _contract.InvoiceId
            join CustAccount from salesTable where salesTable.SalesId == custInvoiceJour.SalesId
            join B2BCustomerHierarchyNode, B2BUserId, RecId from retailCustTable where retailCustTable.accountNum == salesTable.CustAccount;
            
        // The invoice doesn't belong to customer.
        if (retailCustTable.B2BUserId != _operation.B2BUserId)
        {
            var retailCustRecId = retailCustTable.RecId;

            select CustHierarchyId from custHierarchyNode where retailCustTable.B2BCustomerHierarchyNode == custHierarchyNode.RecId;

            select firstonly B2BCustomerHierarchyNode, IsB2BAdmin from retailCustTable where retailCustTable.B2BUserId == _operation.B2BUserId
                join adminCustHierarchyNode where adminCustHierarchyNode.RecId == retailCustTable.B2BCustomerHierarchyNode;

            // The initiated request user is from other organization as invoice owner user or user is not a b2b admin.
            if (custHierarchyNode.CustHierarchyId != adminCustHierarchyNode.CustHierarchyId || adminCustHierarchyNode.Role != CustHierarchyNodeRole::Admin)
            {
                eventSource.WriteProcessingB2BOperationUserDoesNotHavePermissionsToSendInvoiceEmail(_operation.RecId, retailCustRecId);
                shouldSendEmail = false;
            }
        }

        return shouldSendEmail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesInvoiceController</Name>
				<Source><![CDATA[
    internal SalesInvoiceController initSalesInvoiceController(InvoiceCopyRequest _contract)
    {
        CustInvoiceJour custInvoiceJour;

        select firstonly custInvoiceJour where custInvoiceJour.InvoiceId == _contract.InvoiceId;

        var args = new Args();
        args.parmEnum(PrintCopyOriginal::Original);
        args.record(custInvoiceJour);

        SalesInvoiceController controller = SalesInvoiceController::construct();
        controller.parmReportName(PrintMgmtDocType::construct(PrintMgmtDocumentType::SalesOrderInvoice).getDefaultReportFormat());

        str body = "@Retail:InvoiceCopyRequestEmailBody";
        str subject = strFmt("@Retail:InvoiceCopyRequestEmailSubject", _contract.InvoiceId);
        var printSettings = RetailBusinessPartnerInvoiceRequestExtensions::initPrintDestinationSettings(body, subject, _contract.Email);

        SalesInvoiceJournalPrint journalPrint = SalesInvoiceJournalPrint::construct();
        journalPrint.parmUseUserDefinedDestinations(true);
        journalPrint.parmPrinterSettingsFormLetter(printSettings.pack());
        journalPrint.parmPrinterSettingsFormLetterCopy(printSettings.pack());

        args.caller(journalPrint);
        controller.parmArgs(args);

        controller.parmLoadFromSysLastValue(false);
        controller.parmShowDialog(false);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeserializeInvoiceCopyRequestFromJSON</Name>
				<Source><![CDATA[
    private InvoiceCopyRequest DeserializeInvoiceCopyRequestFromJSON(System.String jsonObject)
    {
        InvoiceCopyRequest deserializedRequest = new InvoiceCopyRequest();
        using (MemoryStream ms = new MemoryStream(Encoding::UTF8.GetBytes(jsonObject)))
        {
            System.Type[] typeArray = new System.Type[1]();
            typeArray.SetValue(deserializedRequest.GetType(), 0);

            DataContractJsonSerializer serializer = new DataContractJsonSerializer(deserializedRequest.GetType(), typeArray);
            deserializedRequest = serializer.ReadObject(ms) as InvoiceCopyRequest;
        }

        return deserializedRequest;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>