<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerFormEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Methods supporting the Ledger form extension.
/// </summary>
public static class LedgerFormEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>Ledger_Post_init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the Ledger_Post_init event.
    /// </summary>
    /// <param name="_args">The event arguments.</param>
    [PostHandlerFor(formStr(Ledger), formMethodStr(Ledger, init))]
    public static void Ledger_Post_init(XppPrePostArgs _args)
    {
        #ISOCountryRegionCodes
        FormRun form = _args.getThis();
        FormDesign design = form.design();
        FormControl revaluationAccount = design.controlName(formControlStr(Ledger, revaluationAccount));
        FormControl currencyRevaluation = design.controlName(formControlStr(Ledger, currencyRevaluation));
        FormDataSource ledger_ds = form.dataSource(formdatasourcestr(Ledger, Ledger)) as FormDataSource;
        Ledger currentLedger = ledger_ds.cursor();

        if (!currentLedger)
        {
            ledger_ds.executeQuery();
        }

        boolean transactionsExist = LedgerFormEventHandler::transactionsExist(currentLedger.RecId);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            FormControl extendedLedgerCurrencyParameters_RU = design.controlName(formControlStr(Ledger, "ExtendedLedgerCurrencyParameters_RU"));
            extendedLedgerCurrencyParameters_RU.visible(true);
            currencyRevaluation.visible(false);
        }

        if (!transactionsExist)
        {
            if (currentLedger.ChartOfAccounts)
            {
                revaluationAccount.allowEdit(true);
            }
            else
            {
                revaluationAccount.allowEdit(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Ledger_Post_resetRevaluation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the Ledger_Post_resetRevaluation event.
    /// </summary>
    /// <param name="_args">The event arguments.</param>
    [PostHandlerFor(formStr(Ledger), formMethodStr(Ledger, resetRevaluation))]
    public static void Ledger_Post_resetRevaluation(XppPrePostArgs _args)
    {
        FormRun form = _args.getThis();
        FormSegmentedEntryControl revaluationAccount = form.design().controlName(formControlStr(Ledger, RevaluationAccount));
        SegmentedEntryControl singleSegmentController = revaluationAccount as SegmentedEntryControl;

        FormDataSource ledger_ds = form.dataSource(formdatasourcestr(Ledger, Ledger)) as FormDataSource;
        Ledger ledger = ledger_ds.cursor();

        if (!ledger)
        {
            ledger_ds.executeQuery();
        }

        // reset the chart of accounts on the controller so the correct accounts display
        singleSegmentController.parmCurrentLedgerCOA(ledger.ChartOfAccounts);

        revaluationAccount.allowEdit(ledger.ChartOfAccounts != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionsExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether activity exists for the ledger.
    /// </summary>
    /// <param name = "_ledgerRecId">The ID of ledger.</param>
    /// <returns>True if activity exists for the ledger; otherwise, false.</returns>
    private static boolean transactionsExist(LedgerRecId _ledgerRecId)
    {
        LedgerIDependencyProvider dependencyProvider = LedgerDependencyProviderFactory::newLedgerDependencyProvider();

        return dependencyProvider.doDependentRecordsExist(_ledgerRecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>