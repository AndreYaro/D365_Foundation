<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTotals_Basket</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesTotals_Basket extends SalesTotals
{
    SalesBasket         salesBasket;
    SalesBasketLine     salesBasketLine;

    SalesBasketId       salesBasketId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cashDiscAmount</Name>
				<Source><![CDATA[
    public DiscAmount cashDiscAmount()
    {
        return CustParameters::cashDiscAmount(this.cashDiscCode(),
                                              this.currencyCode(),
                                              this.totalAmount(),
                                              this.totalAmount() - this.totalTaxAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscCode</Name>
				<Source><![CDATA[
    public CashDiscCode cashDiscCode()
    {
        return salesBasket.cashDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructCalcTax</Name>
				<Source><![CDATA[
    protected TradeCalcTax constructCalcTax()
    {
        return SalesCalcTax::construct(salesBasket, SalesUpdate::All);
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code of the record in the <c>Currency</c> table.
    /// </summary>
    /// <returns>
    /// The currency code of the record in the <c>Currency</c> table.
    /// </returns>
    public CurrencyCode  currencyCode()
    {
        return salesBasket.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPercent</Name>
				<Source><![CDATA[
    protected  DiscPct discPercent()
    {
        return salesBasketLine.salesBasket().DiscPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    public ExchRate  exchRate()
    {
        return salesBasket.exchRate(this.invoiceDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    public ExchrateSecondary  exchRateSecondary()
    {
        return salesBasket.exchRateSecondary(this.invoiceDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes charges transactions that are required for calculating the totals.
    /// </summary>
    /// <remarks>
    /// This method will create charges that are associated with the sales basket and lines.
    /// </remarks>
    protected void initMarkup()
    {
        super();

        if (calculateMarkupLineAmount
            || calculateMarkupTableAmount)
        {
            this.initMarkupHeader();

            TradeTotalsIQueryRun queryTransact = this.createLineQueryRun();

            while (this.lineQueryRunNext(queryTransact))
            {
                orderLine = this.lineQueryRunGet(queryTransact);

                this.initMarkupLine();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMarkupHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes charges transactions for the sales basket.
    /// </summary>
    private void initMarkupHeader()
    {
        salesBasket.createMarkupTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMarkupLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes charges transactions for sales basket lines.
    /// </summary>
    private void initMarkupLine()
    {
        salesBasketLine.createMarkupTrans(salesBasket);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecordSortedListLine</Name>
				<Source><![CDATA[
    protected void initRecordSortedListLine()
    {
        recordSortedListLine = new RecordSortedList(tableNum(SalesBasketLine));

        recordSortedListLine.sortOrder      (fieldNum(SalesBasketLine, RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    protected TradeInventTransId inventTransId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccount</Name>
				<Source><![CDATA[
    protected CustAccount invoiceAccount()
    {
        return salesBasket.invoiceAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    protected TransDate invoiceDate()
    {
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    protected ItemId itemId()
    {
        return salesBasketLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    protected LineAmount lineAmount(SalesQty salesQty, TransDate transDate)
    {
        if (skipTaxCalculations)
        {
            return salesBasketLine.LineAmount;
        }
        else
        {
            return salesBasketLine.calcLineAmountExclTax(salesQty, transDate, tax);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineCostPrice</Name>
				<Source><![CDATA[
    protected CostPrice lineCostPrice()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDiscAmount</Name>
				<Source><![CDATA[
    protected DiscAmount lineDiscAmount(UnitQty unitQty, TransDate transDate)
    {
        DiscAmount  discAmount = 0;

        if (salesBasketLine.SalesPrice)
        {
            discAmount += salesBasketLine.calcLineDiscExclTax(unitQty, transDate, tax);
        }

        return discAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQueryRunGet</Name>
				<Source><![CDATA[
    protected Common lineQueryRunGet(
        TradeTotalsIQueryRun    _lineQueryRun)
    {
        salesBasketLine = super(_lineQueryRun);

        return salesBasketLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupLine</Name>
				<Source><![CDATA[
    protected Common markupLine()
    {
        return salesBasketLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(SalesBasket _salesBasket)
    {
        super(_salesBasket);

        salesBasket     = _salesBasket;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderLine_orderTable</Name>
				<Source><![CDATA[
    protected Common orderLine_orderTable()
    {
        return salesBasketLine.salesBasket();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
    protected TradeTotalsIContract  parmContract()
    {
        return SalesTotalsBasketContract::newFromSalesBasket(salesBasket);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymCode</Name>
				<Source><![CDATA[
    public PaymTermId paymCode()
    {
        return salesBasket.payment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymDayId</Name>
				<Source><![CDATA[
    public PaymDayId paymDayId()
    {
        return salesBasket.paymDayId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyInvent</Name>
				<Source><![CDATA[
    protected InventQty  qtyInvent()
    {
        return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(salesBasketLine.ItemId,
																					 salesBasketLine.InventDimId,
																					 salesBasketLine.SalesQty,
																					 salesBasketLine.SalesUnit,
																					 salesBasketLine.inventTable().inventUnitId(),
																					 NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyInventRemain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the quantity that remains in inventory units.
    /// </summary>
    /// <returns>
    /// The quantity that remains in inventory units.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The method is not implemented in a derived class.
    /// </exception>
    protected InventQty qtyInventRemain()
    {
        return this.qtyInvent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyUnit</Name>
				<Source><![CDATA[
    protected UnitQty qtyUnit()
    {
        return salesBasketLine.SalesQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuildOrderTable</Name>
				<Source><![CDATA[
    protected QueryRun queryBuildOrderTable()
    {
        QueryRun queryRun = new QueryRun(queryStr(SalesBasket));
        queryRun.query().dataSourceTable(tableNum(SalesBasket)).update(true);
        queryRun.query().dataSourceTable(tableNum(SalesBasket)).rangeField(fieldNum(SalesBasket, SalesBasketId)).value(queryValue(salesBasket.SalesBasketId));

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGetOrderTable</Name>
				<Source><![CDATA[
    protected Common queryGetOrderTable(QueryRun _queryRun)
    {
        SalesBasket querySalesBasket;

        if (_queryRun.changed(tableNum(SalesBasket)))
            querySalesBasket = _queryRun.get(tableNum(SalesBasket));

        return querySalesBasket;
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    public EUROTriangulation  triangulation()
    {
        return salesBasket.euroTriangulation(this.invoiceDate());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>