<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetProvisionalReverseHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetProvisionalReverseHelper</c> class is used to manage the logic for reversal of provisional budgets.
/// </summary>
public class BudgetProvisionalReverseHelper
{
    boolean                         isReversalRequired;
    boolean                         includeAllBudgetCodes;
    boolean                         isSpecificBudgetCode;
    BudgetTransactionHeader         budgetTransactionHeader;
    BudgetTransactionId             budgetTransactionId;
    RefRecId                        budgetCodeRefRecId;
    BudgetCode                      transactionCode;
    Query                           queryExistingLedgerBudget;
    QueryBuildRange                 qbrBudgetTransactionLineAssetBudget_AssetBudget;
    QueryBuildRange                 qbrBudgetTransactionHeader_TransactionStatus;
    QueryRun                        queryRun;
    BudgetTransactionLine           reversedBudgetTransactionLine;
    BudgetTransactionReverseManager budgetTransactionReverseManager;
    Map                             reversalManagers;
    date                            startDate;
    date                            endDate;
    BudgetControlConfiguration      budgetControlConfiguration;

    private boolean useTodayDateToReversePreliminaryBudget;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>appendExistingReversalManger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the map of <c>BudgetTransactionReverseManager</c> class for reversal of preliminary budget.
    /// </summary>
    /// <param name="_budgetCode">
    /// The <c>BudgetCode</c> associated with header of <c>BudgetTransactionLine</c> that has to be reversed.
    /// </param>
    /// <param name="_recId">
    /// A <c>RecId</c> of <c>BudgetTransactionLine</c> which is to be reversed.
    /// </param>
    /// <returns>
    /// true if the <c>BudgetCode</c> already exists for current instance of <c>BudgetTransactionReverseManager</c>; otherwise false.
    /// </returns>
    public boolean appendExistingReversalManger(BudgetCode _budgetCode, RecId _recId)
    {
        MapEnumerator reversalEnumerator;
        BudgetTransactionReverseManager budgetReverse;
        boolean isTransactionCodeExist = false;

        if (reversalManagers.elements()>0)
        {
            reversalEnumerator = reversalManagers.getEnumerator();
            while (reversalEnumerator.moveNext() && (!isTransactionCodeExist))
            {
                budgetReverse = reversalEnumerator.currentValue();
                if (budgetReverse.getReversingBudgetTransactionCode()== _budgetCode)
                {
                    budgetReverse.addTransactionLineToReverse(_recId);
                    isTransactionCodeExist = true;
                }
            }
        }

        return isTransactionCodeExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPreliminaryTransactionAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for existing preliminary transaction amount in <c>BudgetTransactionLine</c> table.
    /// </summary>
    /// <param name="_ledgerDimensionBudget">
    /// <c>_ledgerDimensionBudget</c> to find the respective budget transaction.
    /// </param>
    private void checkPreliminaryTransactionAmount(LedgerDimensionBudget _ledgerDimensionBudget)
    {
        BudgetTransactionHeader budgetTransactionHeaderProvisional;
        BudgetTransactionLine   budgetTransactionLineOriginal;
        BudgetTransactionLine   budgetTransactionLineProvisional;
        AmountMST               preliminaryBudgetAmount = 0.0;
        AmountMST               originalBudgetAmount = 0.0;

        select sum(AccountingCurrencyAmount) from budgetTransactionLineOriginal
          where budgetTransactionLineOriginal.BudgetTransactionHeader == budgetTransactionHeader.RecId
          &&    budgetTransactionLineOriginal.LedgerDimension == _ledgerDimensionBudget;

        select sum(AccountingCurrencyAmount) from  budgetTransactionLineProvisional
          exists join budgetTransactionHeaderProvisional
          where budgetTransactionLineProvisional.BudgetTransactionHeader == budgetTransactionHeaderProvisional.RecId
          &&  budgetTransactionLineProvisional.LedgerDimension == _ledgerDimensionBudget
          &&  budgetTransactionHeaderProvisional.BudgetModelId == budgetTransactionHeader.BudgetModelId
          &&  budgetTransactionHeaderProvisional.BudgetTransactionType == BudgetTransactionType::OriginalBudget
          &&  budgetTransactionHeaderProvisional.TransactionStatus == BudgetTransactionStatus::Completed
          &&  budgetTransactionHeaderProvisional.PrimaryLedger == budgetTransactionHeader.PrimaryLedger
          &&  budgetTransactionHeaderProvisional.Date >= startDate
          &&  budgetTransactionHeaderProvisional.Date <= endDate;

        originalBudgetAmount = budgetTransactionLineOriginal.AccountingCurrencyAmount + budgetTransactionLineProvisional.AccountingCurrencyAmount;

        select sum(AccountingCurrencyAmount) from  budgetTransactionLineProvisional
         exists join budgetTransactionHeaderProvisional
         where budgetTransactionLineProvisional.BudgetTransactionHeader == budgetTransactionHeaderProvisional.RecId
         &&  budgetTransactionLineProvisional.LedgerDimension == _ledgerDimensionBudget
         &&  budgetTransactionHeaderProvisional.BudgetModelId == budgetTransactionHeader.BudgetModelId
         &&  budgetTransactionHeaderProvisional.BudgetTransactionType == BudgetTransactionType::PreliminaryBudget
         &&  budgetTransactionHeaderProvisional.PrimaryLedger == budgetTransactionHeader.PrimaryLedger
         &&  budgetTransactionHeaderProvisional.TransactionStatus == BudgetTransactionStatus::Completed
         &&  budgetTransactionHeaderProvisional.Date >= startDate
         &&  budgetTransactionHeaderProvisional.Date <= endDate;

        preliminaryBudgetAmount = budgetTransactionLineProvisional.AccountingCurrencyAmount;

        if (originalBudgetAmount < preliminaryBudgetAmount)
        {
            warning("@SPS565");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRemainingOriginalBudgetAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for existing preliminary transaction amount in <c>BudgetTransactionLine</c> table.
    /// </summary>
    /// <param name="_ledgerDimensionBudget">
    /// <c>_ledgerDimensionBudget</c> to find the respective budget transaction.
    /// </param>
    private void checkRemainingOriginalBudgetAmount(LedgerDimensionBudget _ledgerDimensionBudget)
    {
        BudgetTransactionHeader             budgetTransactionHeaderOther;
        BudgetTransactionLine               budgetTransactionLineOriginal;
        BudgetTransactionLine               budgetTransactionLineOther;
        AmountMST                           remainingOriginalBudgetAmount = 0.0;

        select sum(AccountingCurrencyAmount) from budgetTransactionLineOriginal
          where budgetTransactionLineOriginal.BudgetTransactionHeader == budgetTransactionHeader.RecId
          &&    budgetTransactionLineOriginal.LedgerDimension == _ledgerDimensionBudget;

        select sum(AccountingCurrencyAmount) from  budgetTransactionLineOther
          exists join budgetTransactionHeaderOther
          where budgetTransactionLineOther.BudgetTransactionHeader == budgetTransactionHeaderOther.RecId
          &&  budgetTransactionLineOther.LedgerDimension == _ledgerDimensionBudget
          &&  budgetTransactionHeaderOther.BudgetModelId == budgetTransactionHeader.BudgetModelId
          &&  budgetTransactionHeaderOther.BudgetTransactionType == BudgetTransactionType::OriginalBudget
          &&  budgetTransactionHeaderOther.PrimaryLedger == budgetTransactionHeader.PrimaryLedger
          &&  budgetTransactionHeaderOther.TransactionStatus == BudgetTransactionStatus::Completed
          &&  budgetTransactionHeaderOther.Date >= startDate
          &&  budgetTransactionHeaderOther.Date <= endDate;

        remainingOriginalBudgetAmount = budgetTransactionLineOther.AccountingCurrencyAmount + budgetTransactionLineOriginal.AccountingCurrencyAmount;

        select sum(AccountingCurrencyAmount) from budgetTransactionLineOther
          exists join budgetTransactionHeaderOther
          where budgetTransactionLineOther.BudgetTransactionHeader == budgetTransactionHeaderOther.RecId
          &&    budgetTransactionLineOther.LedgerDimension == _ledgerDimensionBudget
          &&    budgetTransactionHeaderOther.BudgetModelId == budgetTransactionHeader.BudgetModelId
          &&  budgetTransactionHeaderOther.PrimaryLedger == budgetTransactionHeader.PrimaryLedger
          &&  budgetTransactionHeaderOther.TransactionStatus == BudgetTransactionStatus::Completed
          && (
                (budgetTransactionHeaderOther.BudgetTransactionType == BudgetTransactionType::Encumbrance
                && budgetControlConfiguration.SubtractEncumbrances)
                ||
                (budgetTransactionHeaderOther.BudgetTransactionType == BudgetTransactionType::PreEncumbrance
                && budgetControlConfiguration.SubtractPreencumbrances)
             )
          &&    budgetTransactionHeaderOther.Date >= startDate
          &&    budgetTransactionHeaderOther.Date <= endDate;

        remainingOriginalBudgetAmount = remainingOriginalBudgetAmount - budgetTransactionLineOther.AccountingCurrencyAmount;

        if ( remainingOriginalBudgetAmount < 0)
        {
            warning(strFmt("@SPS1886",LedgerDimensionFacade::getDisplayValueForLedgerDimension(_ledgerDimensionBudget)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        reversalManagers = new Map(Types::Int64,Types::Class);
        budgetControlConfiguration  = BudgetControlConfiguration::findActiveByPrimaryLedger(Ledger::current());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetCodeRecId</Name>
				<Source><![CDATA[
    public RefRecId parmBudgetCodeRecId(RefRecId _budgetCodeRefRecId = budgetCodeRefRecId)
    {
        budgetCodeRefRecId = _budgetCodeRefRecId;

        return budgetCodeRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetTransactionCode</Name>
				<Source><![CDATA[
    public BudgetCode parmBudgetTransactionCode(BudgetCode _budgetTransactionCode = transactionCode)
    {
        transactionCode = _budgetTransactionCode;

        return transactionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetTransactionHeader</Name>
				<Source><![CDATA[
    public BudgetTransactionHeader parmBudgetTransactionHeader(BudgetTransactionHeader  _budgetTransactionHeader = budgetTransactionHeader)
    {
        budgetTransactionHeader = _budgetTransactionHeader;

        return budgetTransactionHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetTransactionId</Name>
				<Source><![CDATA[
    public BudgetTransactionId parmBudgetTransactionId(BudgetTransactionId  _budgetTransactionId = budgetTransactionId)
    {
        budgetTransactionId = _budgetTransactionId;

        return budgetTransactionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetTransactionLine</Name>
				<Source><![CDATA[
    public BudgetTransactionLine parmBudgetTransactionLine(BudgetTransactionLine  _budgetTransactionLine = reversedBudgetTransactionLine)
    {
        reversedBudgetTransactionLine = _budgetTransactionLine;

        return reversedBudgetTransactionLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeAllBudgetCodes</Name>
				<Source><![CDATA[
    public boolean parmIncludeAllBudgetCodes(boolean _includeAllBudgetCodes = includeAllBudgetCodes )
    {
        includeAllBudgetCodes = _includeAllBudgetCodes;

        return includeAllBudgetCodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsReversalRequired</Name>
				<Source><![CDATA[
    public boolean parmIsReversalRequired(boolean _isReversalRequired = isReversalRequired)
    {
        isReversalRequired = _isReversalRequired;

        return isReversalRequired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsSpecificBudgetCode</Name>
				<Source><![CDATA[
    public boolean parmIsSpecificBudgetCode(boolean _isSpecificBudgetCode = isSpecificBudgetCode)
    {
        isSpecificBudgetCode = _isSpecificBudgetCode;

        return isSpecificBudgetCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseTodayDateToReversePreliminaryBudget</Name>
				<Source><![CDATA[
    internal boolean parmUseTodayDateToReversePreliminaryBudget(boolean _useTodayDateToReversePreliminaryBudget = useTodayDateToReversePreliminaryBudget)
    {
        useTodayDateToReversePreliminaryBudget = _useTodayDateToReversePreliminaryBudget;

        return useTodayDateToReversePreliminaryBudget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateAllBudgetTransactionForReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the map of <c>BudgetTransactionReverseManager</c> class for reversal of preliminary budget.
    /// </summary>
    /// <param name="_ledgerDimensionBudget">
    /// The ledger dimension against which reversal is to be performed.
    /// </param>
    private void populateAllBudgetTransactionForReversal(LedgerDimensionBudget _ledgerDimensionBudget)
    {
        BudgetTransactionLine           budgetTransactionLine;
        BudgetTransactionHeader         budgetTransactionHdr;
        BudgetTransactionLineReverse    budgetTransactionLineReversed;
        BudgetTransactionCode           budgetTransactionCode;
        BudgetTransactionHeader         bHdr;

        while  select RecId, BudgetTransactionHeader from budgetTransactionLine
                    exists join budgetTransactionHdr
                        where   budgetTransactionHdr.RecId == budgetTransactionLine.BudgetTransactionHeader &&
                                budgetTransactionHdr.BudgetTransactionType == BudgetTransactionType::PreliminaryBudget &&
                                budgetTransactionHdr.TransactionStatus == BudgetTransactionStatus::Completed &&
                                budgetTransactionHdr.BudgetModelId == budgetTransactionHeader.BudgetModelId  &&
                                budgetTransactionHdr.Date >= startDate &&
                                budgetTransactionHdr.Date <= endDate &&
                                 budgetTransactionHdr.PrimaryLedger == budgetTransactionHeader.PrimaryLedger &&
                                budgetTransactionLine.LedgerDimension == _ledgerDimensionBudget

                    notexists join budgetTransactionLineReversed
                        where
                                (budgetTransactionLine.RecId == budgetTransactionLineReversed.ReversedBudgetTransactionLine ||
                                 budgetTransactionLine.RecId == budgetTransactionLineReversed.ReversingBudgetTransactionLine)
            {
                bHdr = budgetTransactionLine.getBudgetTransactionHeader();
                budgetTransactionCode = BudgetTransactionCode::find(bHdr.BudgetTransactionCode);

                if (!(this.appendExistingReversalManger(budgetTransactionCode.Name,budgetTransactionLine.RecId)))
                {
                    budgetTransactionReverseManager = BudgetTransactionReverseManager::construct(budgetTransactionCode.Name, bHdr.BudgetModelId);
                    budgetTransactionReverseManager.addTransactionLineToReverse(budgetTransactionLine.RecId);
                    budgetTransactionReverseManager.parmUseTodayDateToReversePreliminaryBudget(useTodayDateToReversePreliminaryBudget);
                    reversalManagers.insert(budgetTransactionLine.RecId, budgetTransactionReverseManager);
                    this.checkPreliminaryTransactionAmount(_ledgerDimensionBudget);
                    this.checkRemainingOriginalBudgetAmount(_ledgerDimensionBudget);
                }
            }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateForReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the map of <c>BudgetTransactionReverseManager</c> class for reversal of preliminary budget.
    /// </summary>
    /// <param name="_ledgerDimensionBudget">
    /// The ledger dimension against which reversal is to be performed.
    /// </param>
    private void populateForReversal(LedgerDimensionBudget _ledgerDimensionBudget)
    {
        BudgetTransactionLine           budgetTransactionLine;
        BudgetTransactionHeader         budgetTransactionHdr;
        BudgetTransactionLineReverse    budgetTransactionLineReversed;
        BudgetTransactionCode           budgetTransactionCode;
        BudgetTransactionHeader         bHdr;

        budgetTransactionCode = BudgetTransactionCode::findByBudgetTransactionCode(transactionCode);

        while  select RecId from budgetTransactionLine
                    exists join budgetTransactionHdr
                        where   budgetTransactionHdr.RecId == budgetTransactionLine.BudgetTransactionHeader &&
                                budgetTransactionHdr.BudgetTransactionType == BudgetTransactionType::PreliminaryBudget &&
                                budgetTransactionHdr.TransactionStatus == BudgetTransactionStatus::Completed &&
                                budgetTransactionHdr.BudgetModelId == budgetTransactionHeader.BudgetModelId &&
                                budgetTransactionHdr.BudgetTransactionCode == budgetTransactionCode.RecId   &&
                                budgetTransactionHdr.Date >= startDate &&
                                budgetTransactionHdr.Date <= endDate &&
                                budgetTransactionHdr.PrimaryLedger == budgetTransactionHeader.PrimaryLedger &&
                                budgetTransactionLine.LedgerDimension == _ledgerDimensionBudget
                    notexists join budgetTransactionLineReversed
                        where
                                (budgetTransactionLine.RecId == budgetTransactionLineReversed.ReversedBudgetTransactionLine ||
                                 budgetTransactionLine.RecId == budgetTransactionLineReversed.ReversingBudgetTransactionLine)
            {
                if (!budgetTransactionReverseManager)
                {
                    budgetTransactionReverseManager = BudgetTransactionReverseManager::constructForProvisionalBudget(this.parmIncludeAllBudgetCodes(), this.parmBudgetTransactionCode(), budgetTransactionHeader);
                }

                bHdr = budgetTransactionLine.getBudgetTransactionHeader();
                budgetTransactionReverseManager = BudgetTransactionReverseManager::construct(budgetTransactionCode.Name, budgetTransactionHeader.BudgetModelId);
                budgetTransactionReverseManager.parmUseTodayDateToReversePreliminaryBudget(useTodayDateToReversePreliminaryBudget);
                budgetTransactionReverseManager.addTransactionLineToReverse(budgetTransactionLine.RecId);
                this.checkPreliminaryTransactionAmount(_ledgerDimensionBudget);
                this.checkRemainingOriginalBudgetAmount(_ledgerDimensionBudget);
            }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateToReverse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the map of <c>BudgetTransactionReverseManager</c> class for reversal of preliminary budget.
    /// </summary>
    /// <param name="_ledgerDimensionBudget">
    /// The ledger dimension against which reversal is to be performed.
    /// </param>
    public void populateToReverse(LedgerDimensionBudget _ledgerDimensionBudget)
    {
        container                       summaryTrackingDate;

        summaryTrackingDate = BudgetTransactionMultiPost::calculateTimeInterval(budgetTransactionHeader.Date);
        startDate = conPeek(summaryTrackingDate,1);
        endDate = conPeek(summaryTrackingDate,2);

        if (this.parmIsSpecificBudgetCode())
        {
            this.populateForReversal(_ledgerDimensionBudget);
        }
        else
        {
            this.populateAllBudgetTransactionForReversal(_ledgerDimensionBudget);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>proceedForReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Peforms reversal for preliminary budget transaction lines.
    /// </summary>
    public void proceedForReversal()
    {
        MapEnumerator reversalEnumerator;
        BudgetTransactionReverseManager budgetReverse;

        if (budgetTransactionReverseManager && this.parmIsSpecificBudgetCode())
        {
            budgetTransactionReverseManager.reverseTransactionLines();
        }
        else
        {
            if (reversalManagers && reversalManagers.elements()>0)
            {
                reversalEnumerator = reversalManagers.getEnumerator();
                while (reversalEnumerator.moveNext())
                {
                    budgetReverse = reversalEnumerator.currentValue();
                    budgetReverse.reverseTransactionLines();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetProvisionalReverseHelper construct()
    {
        return new BudgetProvisionalReverseHelper();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>