<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmOutlookSyncSelectionForm_Outlook</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SysObsolete('Microsoft discontinued support for synchronizing contacts, appointments, and tasks between Dynamics 365 Supply Chain Management and Outlook.', false, 01\12\2023)]
class SmmOutlookSyncSelectionForm_Outlook extends smmOutlookSyncSelectionForm
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToMyContacts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the selected contacts to the contacts list.
    /// </summary>
    /// <returns>
    /// true if the contacts have been added; otherwise, false.
    /// </returns>
    public boolean addToMyContacts()
    {
        Counter                     retryCount;

        // If connected to outlook then only proceede
        if (smmOutlookSync_Contact.connectedToOutlook())
        {
            try
            {
                ttsbegin;
                this.createContact();
                ttscommit;
            }
            catch (Exception::Error)
            {
                retryCount++;
                if (retryCount <= 3)
                {
                    retry;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createContact</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>smmContactPersonSynchronize</c> table to add to the contacts list.
    /// </summary>
    /// <param name="_callUpdate">
    /// A Boolean value that indicates whether to update the synchronization class that is used for unit
    /// tests.
    /// </param>
    public void createContact(boolean _callUpdate = true)
    {
        #DirParty
        DirPartyTable               dirPartyTable;
        boolean                     createContactId;
        ContactPerson               contactPerson;
        NumberSeq                   numberSeq;
        Num                         num;
        ContactPersonSyncEntity     contactPersonEntity;
        smmContactPersonSynchronize smmContactPersonSynchronize;

        // Traverse the contacts selected for synchronization
        while select contactsToBeSynchronized where contactsToBeSynchronized.SyncNoYes == NoYes::Yes
        {
            // Find Party the new contact should be attached to
            dirPartyTable = DirPartyTable::findRec(contactsToBeSynchronized.ContactForParty);

            if (dirPartyTable)
            {
                // Should a new contact id be created based on the contact numbersequence
                createContactId = contactsToBeSynchronized.ContactPersonId == '';

                if (createContactId)
                {
                    contactPerson.clear();
                    // Initialize contacts from the selected Contact for Party
                    contactPerson.initFromCommon(dirPartyTable);
                    contactPersonEntity = ContactPersonSyncEntity::construct(contactPerson);
                    contactPersonEntity.parmFirstName(contactsToBeSynchronized.ContactPersonFirstName);
                    contactPersonEntity.parmLastName(contactsToBeSynchronized.ContactPersonLastName);
                    contactPersonEntity.parmAddressBooks(conpeek(dirPartyTable.addressBooks(), #ADDRESSBOOKNAME));

                    // Find next free contact person id
                    numberSeq = NumberSeq::newGetNum(NumberSeqReference::findReference(extendedtypenum(ContactPersonId)), true, true);
                    if (numberSeq)
                    {
                        num = numberSeq.num();
                        numberSeq.used();
                    }
                    else
                    {
                        // Number sequence not defined properly
                        throw error("@SYS80636");
                    }

                    // Set contact person id from number sequence
                    contactPersonEntity.parmContactPersonId(num);

                    if (_callUpdate && smmOutlookSync_Contact != null)
                    {
                        smmOutlookSync_Contact.setContactPersonEntity(contactPersonEntity);
                        // Get the contact from Outlook
                        smmOutlookSync_Contact.getOulookItemFromOutlook(contactsToBeSynchronized.EntryID, false);
                        smmOutlookSync_Contact.updateAXContact();

                        // Call write
                        contactPersonEntity.write();
                        // Write postal and electronic address
                        smmOutlookSync_Contact.updateLocations();
                    }

                    // Create the contact in My Contacts
                    smmContactPersonSynchronize.ContactPersonId     = contactPersonEntity.parmContactPersonId();
                    smmContactPersonSynchronize.EntryId             = contactsToBeSynchronized.EntryID;
                    smmContactPersonSynchronize.OutlookSyncType     = contactsToBeSynchronized.OutlookSyncType;
                    smmContactPersonSynchronize.LastSyncAxDateTime  = DateTimeUtil::getSystemDateTime();
                    smmContactPersonSynchronize.Worker              = smmUtility::getCurrentContactWorker();
                    smmContactPersonSynchronize.UserId              = curuserid();

                    smmContactPersonSynchronize.insert();

                    if (smmOutlookSync_Contact)
                    {
                        // Create field mapping table
                        smmContactPersonSynchronizeFieldMapping::createFieldMapping(smmContactPersonSynchronize.UserId, smmContactPersonSynchronize.ContactPersonId, smmOutlookSync_Contact.getContactFieldsRecordMap());
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTempContacts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>smmTmpOutlookContacts</c> table.
    /// </summary>
    /// <param name="_entryId">
    /// The entry ID from Microsoft Outlook
    /// </param>
    /// <param name="_firstName">
    /// The first name from the Microsoft Outlook contact.
    /// </param>
    /// <param name="_lastName">
    /// The last name from the Microsoft Outlook contact.
    /// </param>
    /// <param name="_outlookDateTime">
    /// Last modified date from Outlook.
    /// </param>
    /// <returns>
    /// The <c>smmTmpOutlookContacts</c> table that was created.
    /// </returns>
    public smmTmpOutlookContacts createTempContacts(smmContactPersonOutlookEntryID _entryId, FirstName _firstName, LastName _lastName, utcdatetime _outlookDateTime)
    {
        if (smmOutlookSyncDeprecationHandler::isOutlookSyncDisabled())
        {
            smmOutlookSyncDeprecationHandler::logSyncSkipMessageToTelemetry();
            throw error(strFmt("@SYS19306",funcName()));
        }

        smmOutlookSyncDeprecationHandler::showDeprecationMessage();

        contactsToBeSynchronized.clear();

        // Indicate that this contact should not be synchronized to Outlook (only from Outlook to Axapta)
        contactsToBeSynchronized.OutlookContact = NoYes::No;

        contactsToBeSynchronized.SelectFrom           = this.getSelectFrom();
        contactsToBeSynchronized.EntryID              = _entryId;

        contactsToBeSynchronized.ContactPersonFirstName    = _firstName;

        contactsToBeSynchronized.ContactPersonLastName    = _lastName;

        contactsToBeSynchronized.LastModOutlookDateTime   = _outlookDateTime;

        contactsToBeSynchronized.SyncNoYes            = NoYes::No;

        // Use default synchronization type from the parameters
        contactsToBeSynchronized.OutlookSyncType = OutlookSyncParameters::find().OutlookDefaultSyncPrinciple;

        contactsToBeSynchronized.insert();

        return contactsToBeSynchronized;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchContacts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches contacts from Microsoft Outlook
    /// </summary>
    /// <param name="_prompt">
    /// A Boolean value that indicates whether to show the prompt.
    /// </param>
    /// <returns>
    /// A <c>smmTmpOutlookContacts</c> table buffer.
    /// </returns>
    public smmTmpOutlookContacts fetchContacts(boolean _prompt = false)
    {
        smmContactPersonSynchronize     smmContactPersonSynchronize;
        int                             contactsInOutlook;
        int                             counter, percentComplete;
        smmContactPersonOutlookEntryID  itemEntryId;
        CrmWorkerRecId                  currentWorker = HcmWorker::userId2Worker(curuserid());
        SysOperationProgress            progress;
        utcdatetime                     outlookModDateTime;
        List                            contacts;
        ListEnumerator                  contactsEnumerator;
        smmEwsContact                   currentContact;
        smmIFolder                      contactsFolder;

        // Set Outlook contact folder
        contactsFolder = smmOutlookSync_Contact.getFolder();

        // Get contacts from Outlook
        new InteropPermission(InteropKind::ComInterop).assert();
        contacts = contactsFolder.getAllContacts();

        // Find number of contacts
        contactsInOutlook = contacts.elements();

        progress = SysOperationProgress::newGeneral(#aviUpdate, '', contactsInOutlook);
        ttsbegin;

        // Make sure that the selection table is empty
        delete_from contactsToBeSynchronized;

        // Traverse Outlook contacts
        contactsEnumerator = contacts.getEnumerator();
        while (contactsEnumerator.moveNext())
        {
            progress.incCount();

            // Get next Outlook contact
            currentContact = contactsEnumerator.current();

            // Set item on the contact sync class
            smmOutlookSync_Contact.setItem(currentContact);

            itemEntryId = currentContact.EntryId();

            // Find Outlook synchronization record (if contact is synchronized) before
            select firstonly smmContactPersonSynchronize where smmContactPersonSynchronize.EntryId == itemEntryId && smmContactPersonSynchronize.UserId == curuserid();

            // Only return contacts that wasn't synchronized before
            if (!smmContactPersonSynchronize)
            {
                percentComplete = real2int((counter/contactsInOutlook)*100);
                progress.setText(strfmt("@SYS325263", percentComplete));

                outlookModDateTime = DateTimeUtil::removeTimeZoneOffset(currentContact.lastModificationTime(), smmOutlookSync_Contact.parmOutlookTimeZone());
                this.createTempContacts(itemEntryId, currentContact.getFirstName(), currentContact.getLastName(), outlookModDateTime);
            }
        }

        ttscommit;
        CodeAccessPermission::revertAssert();

        return contactsToBeSynchronized;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMainInstructionTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the instruction text.
    /// </summary>
    /// <returns>
    /// A string of text.
    /// </returns>
    public str getMainInstructionTxt()
    {
        return "@SYS325252";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectButtonTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the select button text.
    /// </summary>
    /// <returns>
    /// A string of text.
    /// </returns>
    public str getSelectButtonTxt()
    {
        return "@SYS14364";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the select form.
    /// </summary>
    /// <returns>
    /// An Outlook form.
    /// </returns>
    public smmOutlookSyncSelectFrom getSelectFrom()
    {
        return smmOutlookSyncSelectFrom::Outlook;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSupplementalInstructionTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the instruction text.
    /// </summary>
    /// <returns>
    /// A string of text.
    /// </returns>
    public str getSupplementalInstructionTxt()
    {
        return "@SYS325253";
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructor for smmOutlookSyncSelectionForm_Outlook class.
    /// </summary>
    /// <returns>
    /// Instance of smmOutlookSyncSelectionForm_Outlook object
    /// </returns>
    public static smmOutlookSyncSelectionForm_Outlook construct()
    {
        if (smmOutlookSyncDeprecationHandler::isOutlookSyncDisabled())
        {
            smmOutlookSyncDeprecationHandler::logSyncSkipMessageToTelemetry();
            throw error(strFmt("@SYS19306",funcName()));
        }

        smmOutlookSyncDeprecationHandler::showDeprecationMessage();

        smmOutlookSyncSelectionForm_Outlook syncSelection = new smmOutlookSyncSelectionForm_Outlook();

        return syncSelection;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>