<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventBatchConsumptionValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class  handles the validation logic used when reserving specific batch inventory.
/// </summary>
public class InventBatchConsumptionValidator
{
    InventDimParm   batchAndAboveDimParm;
    UnknownNoYes    batchAboveLocation;
    InventTable     inventTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>batchAndAboveInventDimParm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets information about which dimensions are batch and above in the reservation hierarchy for this instance's item.
    /// </summary>
    /// <returns>
    ///     A <c>InventDimParm</c> table with the fields set to the <c>NoYes::Yes</c> enumeration value for
    ///    the dimensions at batch and above.
    /// </returns>
    protected InventDimParm batchAndAboveInventDimParm()
    {
        // If batch flag isn't yes we need to set the parm values.
        if (batchAndAboveDimParm.InventBatchIdFlag == NoYes::No)
        {
            batchAndAboveDimParm = WHSReservationHierarchyInventDimUtil::initInventDimParmBatchAndAbove(inventTable);
        }

        return batchAndAboveDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchIsAboveLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if batch is above location in the reservation hierarchy for this instance's item.
    /// </summary>
    /// <returns>
    /// true if batch is above location; otherwise, false.
    /// </returns>
    protected boolean batchIsAboveLocation()
    {
        if (batchAboveLocation == UnknownNoYes::Unknown)
        {
            batchAboveLocation = WHSReservationHierarchyInventDimUtil::isBatchAboveLocation(inventTable) ? UnknownNoYes::Yes : UnknownNoYes::No;
        }

        return batchAboveLocation == UnknownNoYes::Yes ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTable</Name>
				<Source><![CDATA[
    protected InventTable parmInventTable(InventTable _inventTable = inventTable)
    {
        inventTable = _inventTable;

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates all conditions are met to allow reservation of the batch.
    /// </summary>
    /// <param name="_batchId">
    /// The batch Id being evaluated.
    /// </param>
    /// <param name="_movement">
    /// The movement driving the reservation of the batch.
    /// </param>
    /// <param name="_dimCriteria">
    /// The inventory dimension criteria that must be met by the reservation.
    /// </param>
    /// <param name="_custAccount">
    /// The customer account used for specific sales order validation. Can be entered as blank for non-sales order movements.
    /// </param>
    /// <param name="_checkDate">
    /// A date value that will be used to verify that the expiration date is beyond this date.
    /// </param>
    /// <param name="_prevAttrSel">
    /// A <c>PdsBatchAttribAttribSelect</c> record to be used instead of standard attributes.
    /// </param>
    /// <returns>
    /// true if the batch is valid for reservation; otherwise, false.
    /// </returns>
    public boolean validateAll(
        InventBatchId           _batchId,
        InventMovement          _movement,
        InventDim               _dimCriteria,
        CustAccount             _custAccount,
        date                    _checkDate,
        TmpPdsBatchAttribSelect _prevAttrSel = null)
    {
        boolean ret = true;
        boolean mustValidateBatchDispositionCode = _movement.parmInventType() is ProdBOMType;
        boolean isBatchAboveLocation = this.batchIsAboveLocation();

        // Reservation can be made on batch number level for batch below items if you set the batch dimension on the BOM journal line.
        if (mustValidateBatchDispositionCode || isBatchAboveLocation)
        {
            InventBatch inventBatch = InventBatch::find(_batchId, inventTable.ItemId);

            // Batch should already exist when this method is called.
            ret = inventBatch.RecId != 0;

            if (this.mustValidateExpiryDate(inventBatch, _movement, _checkDate, _custAccount, _dimCriteria))
            {
				// Check ExpiryDate
                ret = ret && this.validateExpiryDate(inventBatch, _checkDate, _custAccount, _movement.pdsOverrideFEFO(), _dimCriteria);
			}

            // Check that batch disposition code allows for reservation.
            ret = ret && this.validateBatchDispositionForReservation(inventBatch, _movement);

            if (isBatchAboveLocation)
            {
                // Check that batch attributes are within limits.
                ret = ret && (!#PdsBatchAttribEnabled || !_movement.pdsMustConsiderBatchAttrib() || this.validateBatchAttributesForReservation(inventBatch, _custAccount, _prevAttrSel));

                // CHeck batch on current transaction isn't different than the batch attempting to be reserved.
                ret = ret && this.validateSameBatch(_movement, _dimCriteria.InventBatchId);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBatchAttributesForReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the batch can be reserved based on batch attributes.
    /// </summary>
    /// <param name="_inventBatch">
    /// The inventory batch to validate.
    /// </param>
    /// <param name="_custAccount">
    /// The customer for which to retrieve batch attributes.
    /// </param>
    /// <param name="_prevAttrSel">
    /// A <c>PdsBatchAttribAttribSelect</c> record to be used instead of standard attributes.
    /// </param>
    /// <returns>
    /// true if the inventory batch can be reserved base on batch attributes; otherwise, false.
    /// </returns>
    protected boolean validateBatchAttributesForReservation(
        InventBatch             _inventBatch,
        CustAccount             _custAccount,
        TmpPdsBatchAttribSelect _prevAttrSel = null)
    {
        return PdsBatchAttributes::pdsCheckBatchAtribReserve(_inventBatch.ItemId, _custAccount, _inventBatch.InventBatchId, _prevAttrSel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBatchDispositionForReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the batch can be reserved based on batch disposition.
    /// </summary>
    /// <param name="_inventBatch">
    /// The inventory batch to validate.
    /// </param>
    /// <param name="_movement">
    /// The movement trying to reserve inventory.
    /// </param>
    /// <returns>
    /// True if the batch disposition allow reservation; otherwise, false.
    /// </returns>
    protected boolean validateBatchDispositionForReservation(
        InventBatch     _inventBatch,
        InventMovement  _movement)
    {
        boolean                 ret = true;

        if (_inventBatch.PdsDispositionCode)
        {
            PdsDispositionMaster dispositionMaster = PdsDispositionMaster::find(_inventBatch.PdsDispositionCode);

            if (dispositionMaster.Status == PdsStatus::Unavailable
            &&  _movement.pdsRestrictReservation(dispositionMaster))
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateExpiryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the batch can be reserved based on batch expiration date and customer sellable days.
    /// </summary>
    /// <param name="_inventBatch">
    /// The inventory batch to validate.
    /// </param>
    /// <param name="_date">
    /// A date value that will be used to verify that the expiration date is beyond this date.
    /// </param>
    /// <param name="_custAccount">
    /// The customer account can be provided for order validation. This will allow for the retrieval
    /// of sellable days information.
    /// </param>
    /// <param name="_override">
    /// Determines whether the expiration check will be done.
    /// </param>
    /// <param name="_orderInventDim">
    /// The <c>InventDim</c> record for a order that will be used as part of the sellable days search.
    /// </param>
    /// <returns>
    /// true if the batch is valid for the date provided; otherwise, false.
    /// </returns>
    protected boolean validateExpiryDate(
        InventBatch     _inventBatch,
        date            _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        CustAccount     _custAccount = '',
        PdsOverrideFEFO _override = false,
        InventDim       _orderInventDim = null)
    {
        return InventBatch::pdsCheckExpiryDate(_inventBatch.InventBatchId, _inventBatch.ItemId, _date, false, _custAccount, _override, _orderInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustValidateExpiryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the expiry date must be validated.
    /// </summary>
    /// <param name="_inventBatch">
    /// The inventory batch to validate.
    /// </param>
    /// <param name="_movement">
    /// The movement driving the reservation of the batch.
    /// </param>
    /// <param name="_date">
    /// A date value that will be used to verify that the expiration date is beyond this date.
    /// </param>
    /// <param name="_custAccount">
    /// The customer account can be provided for order validation. This will allow for the retrieval
    /// of sellable days information.
    /// </param>
    /// <param name="_orderInventDim">
    /// The <c>InventDim</c> record for a order that will be used as part of the sellable days search.
    /// </param>
    /// <returns>
    /// true if the batch expiry date must be validated; otherwise, false.
    /// </returns>
    protected boolean mustValidateExpiryDate(
        InventBatch     _inventBatch,
        InventMovement  _movement,
        date            _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        CustAccount     _custAccount = '',
        InventDim       _orderInventDim = null)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSameBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the batch is not different than a batch currently set on a movement transaction.
    /// </summary>
    /// <param name="_movement">
    /// The movement trying to reserve the batch.
    /// </param>
    /// <param name="_batchToReserve">
    /// The batch Id of the batch being reserved.
    /// </param>
    /// <returns>
    /// true if the batch is not different than the batch of a movement transaction; otherwise, false.
    /// </returns>
    protected boolean validateSameBatch(
        InventMovement  _movement,
        InventBatchId   _batchToReserve)
    {
        boolean     ret = true;

        if (_movement.pdsSameLotReservation())
        {
            InventBatch inventBatch = _movement.pdsSameLotReservationBatch();

            // Make sure batch on existing transactions isn't different from the batch we are trying to currently reserve.
            if (inventBatch.RecId
            && _batchToReserve
            &&  inventBatch.InventBatchId != _batchToReserve)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSameBatchAvailHandlingQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if there is enough inventory available for the batch selected to satisfy the entire on order amount of the movement.
    /// </summary>
    /// <param name="_movement">
    /// The movement being reserved.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The inventory dimension criteria used to reserve inventory.
    /// </param>
    /// <param name="_inventDimCriteriaSelected">
    /// The inventory dimension criteria currently selected to be reserved.
    /// </param>
    /// <param name="_ttsId">
    /// The transaction id which is used to search for <c>WHSInventReserveDelta</c> records.
    /// </param>
    /// <param name="_isWork">
    /// A boolean flag determining if the calculation should be done different because the movement is of a "work" type.
    /// </param>
    /// <param name="_allowReservedOrdered">
    /// Determines if the reservation is allowed to be Reserved Ordered.
    /// </param>
    /// <param name="_availPhysicalHandlingQty">
    /// The available physical amount calculated for the full dimensions attempting to be reserved.
    /// </param>
    /// <param name="_availOrderedHandlingQty">
    /// The total avail amount calculated for the full dimensions attempting to be reserved.
    /// </param>
    /// <returns>
    /// true, if there is enough inventory to satisfy the same batch criteria; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal boolean validateSameBatchAvailHandlingQty(
        InventMovement          _movement,
        InventDim               _inventDimCriteria,
        InventDim               _inventDimCriteriaSelected,
        CreatedTransactionId    _ttsId,
        boolean                 _isWork,
        boolean                 _allowReservedOrdered,
        InventHandlingQty       _availPhysicalHandlingQty,
        InventHandlingQty       _availOrderedHandlingQty)
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightItemLogic(funcName(), _movement.itemId()))
        {
            return this.validateSameBatchAvailQuantities(_movement,
                                                         _inventDimCriteria,
                                                         _inventDimCriteriaSelected,
                                                         _ttsId,
                                                         _isWork,
                                                         _allowReservedOrdered,
                                                         _availPhysicalHandlingQty,
                                                         _availOrderedHandlingQty,
                                                         true);
        }

        return this.validateSameBatchAvailQty(_movement,
                                              _inventDimCriteria,
                                              _inventDimCriteriaSelected,
                                              _ttsId,
                                              _isWork,
                                              _allowReservedOrdered,
                                              _availPhysicalHandlingQty,
                                              _availOrderedHandlingQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSameBatchAvailQty</Name>
				<Source><![CDATA[
    public boolean validateSameBatchAvailQty(
        InventMovement          _movement,
        InventDim               _inventDimCriteria,
        InventDim               _inventDimCriteriaSelected,
        CreatedTransactionId    _ttsId,
        boolean                 _isWork,
        boolean                 _allowReservedOrdered,
        InventQty               _availPhysical,
        InventQty               _availOrdered)
    {
        return this.validateSameBatchAvailQuantities(_movement,
                                                     _inventDimCriteria,
                                                     _inventDimCriteriaSelected,
                                                     _ttsId,
                                                     _isWork,
                                                     _allowReservedOrdered,
                                                     _availPhysical,
                                                     _availOrdered,
                                                     false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSameBatchAvailQuantities</Name>
				<Source><![CDATA[
    private boolean validateSameBatchAvailQuantities(
        InventMovement          _movement,
        InventDim               _inventDimCriteria,
        InventDim               _inventDimCriteriaSelected,
        CreatedTransactionId    _ttsId,
        boolean                 _isWork,
        boolean                 _allowReservedOrdered,
        InventHandlingQty       _availPhysicalHandlingQty,
        InventHandlingQty       _availOrderedHandlingQty,
        boolean                 _isCWItem)
    {
        boolean ret = true;

        if (_movement.pdsSameLotReservation())
        {
            InventHandlingQty compareQtyAvail = _allowReservedOrdered ? _availOrderedHandlingQty : _availPhysicalHandlingQty;
            InventHandlingQty qtyOnOrdered;
            
            if (_isCWItem)
            {
                qtyOnOrdered    = _movement.transIdSum().pdsCWOnOrder();
            }
            else
            {
                qtyOnOrdered    = _movement.transIdSum().onOrder();
            }

            // If there is already enough available based on full dim criteria we don't need to check batch level specifically.
            // Both quantities are negative.
            if (qtyOnOrdered < compareQtyAvail)
            {
                InventDimParm inventDimParm = this.batchAndAboveInventDimParm();

                // Build up a dim that includes all dimension criteria and the batch we are evaluating.
                InventDim batchLevelDimCriteria = InventDim::findOrCreate(_inventDimCriteria);
                batchLevelDimCriteria.InventBatchId = _inventDimCriteriaSelected.InventBatchId;
                batchLevelDimCriteria.clearNotSelectedDim(inventDimParm);
                batchLevelDimCriteria = InventDim::findOrCreate(batchLevelDimCriteria);

                // If batch level inventDim is not the same as the original dimension criteria we should check batch level availability.
                if (batchLevelDimCriteria.InventDimId != _inventDimCriteria.InventDimId)
                {
                    InventHandlingQty availPhysical;
                    InventHandlingQty availOrdered;

                    // Get batch level availability
                    // Do not check for reservation hierarchy holes as we do it afterwards in a better way
                    [availPhysical, availOrdered] = WHSInventOnHand::getReserveAvailHandlingQtyIncludeDelta(_movement.itemId(),
                                                                                                            batchLevelDimCriteria,
                                                                                                            _ttsId,
                                                                                                            _isWork,
                                                                                                            false);

                    compareQtyAvail = _allowReservedOrdered ? -availOrdered : -availPhysical;

                    // Both Quantities are negative
                    if (qtyOnOrdered < compareQtyAvail)
                    {
                        ret = false;
                    }
                    else
                    {
                        InventHandlingQty availPhysicalBatchLevel;
                        InventHandlingQty availOrderedBatchLevel;

                        // If previous availability check passes we need to do one last check for batch level.
                        // This accounts for scenarios where the dimensions criteria has a hole in the hierarchy.
                        [availPhysicalBatchLevel, availOrderedBatchLevel] = WHSInventOnHand::getAvailHandlingQuantityForLevel(_movement.itemId(),
                                                                                                                              batchLevelDimCriteria,
                                                                                                                              WHSReservationHierarchyProvider::construct().getBatchLevelAboveLocation(inventTable),
                                                                                                                              true);

                        compareQtyAvail = _allowReservedOrdered ? -availOrderedBatchLevel : -availPhysicalBatchLevel;

                        // Both Quantities are negative.
                        if (qtyOnOrdered < compareQtyAvail)
                        {
                            ret = false;
                        }
                    }
                }
                else
                {
                    ret = false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventBatchConsumptionValidator</c> class
    ///    for validating reservations of the specified item.
    /// </summary>
    /// <param name="_inventTable">
    ///    The item.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InventBatchConsumptionValidator</c> class.
    /// </returns>
    public static InventBatchConsumptionValidator newFromInventTable(InventTable _inventTable)
    {
        InventBatchConsumptionValidator inventBatchConsumptionValidator = new InventBatchConsumptionValidator();
        inventBatchConsumptionValidator.parmInventTable(_inventTable);

        return inventBatchConsumptionValidator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAllStatic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates all conditions are met to allow reservation of the batch.
    /// </summary>
    /// <param name="_batchId">
    /// The batch Id being evaluated.
    /// </param>
    /// <param name="_movement">
    /// The movement driving the reservation of the batch.
    /// </param>
    /// <param name="_dimCriteria">
    /// The inventory dimension criteria that must be met by the reservation.
    /// </param>
    /// <param name="_prevAttrSel">
    /// A <c>PdsBatchAttribAttribSelect</c> record to be used instead of standard attributes.
    /// </param>
    /// <returns>
    /// true if the batch is valid for reservation; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method should be used in scenarios where persisting data and caching within the <c>InventBatchConsumptionValidator</c> class will unlikely be used.
    /// Typically it should only be called once during any one process.
    /// </remarks>
    public static boolean validateAllStatic(
        InventBatchId           _batchId,
        InventMovement          _movement,
        InventDim               _dimCriteria,
        TmpPdsBatchAttribSelect _prevAttrSel = null)
    {
        date        checkDate;

        InventBatchConsumptionValidator inventBatchConsumptionsValidator = InventBatchConsumptionValidator::newFromInventTable(_movement.inventTable());

        CustAccount custAccount = _movement.custVendAc();

        if (_movement.needsShelfLifeCheck())
        {
            checkDate = _movement.getExpiryCheckDate();
        }

        if (checkDate == dateNull())
        {
            checkDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        return inventBatchConsumptionsValidator.validateAll(_batchId, _movement, _dimCriteria, custAccount, checkDate, _prevAttrSel);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>