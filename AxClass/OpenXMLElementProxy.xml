<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OpenXMLElementProxy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides access to generic methods of <c>OpenXMLElement</c>.
/// </summary>
public class OpenXMLElementProxy
{
    public DocumentFormat.OpenXml.OpenXmlElement openXmlElement;
    private static System.Reflection.MethodInfo descendants;
    private static System.Reflection.MethodInfo insertAfter;
    private static System.Reflection.MethodInfo appendChild;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new(DocumentFormat.OpenXml.OpenXmlElement _targetElement)
    {
        openXmlElement = _targetElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMethodInfoDescendants</Name>
				<Source><![CDATA[
    private static System.Reflection.MethodInfo getMethodInfoDescendants()
    {
        const str typeNameBookmarkStart = 'DocumentFormat.OpenXml.Wordprocessing.BookmarkStart, DocumentFormat.OpenXml';
        const str typeNameRootElement = 'DocumentFormat.OpenXml.OpenXmlPartRootElement, DocumentFormat.OpenXml';
        const str methodNameDescendants = 'Descendants';

        if (!OpenXMLElementProxy::descendants)
        {
            System.Type[] genericTypes = new System.Type[1]();
            genericTypes.SetValue(System.Type::GetType(typeNameBookmarkStart), 0);
            System.Type rootElementType = System.Type::GetType(typeNameRootElement);

            System.Collections.IEnumerator methodsEnumeration = rootElementType.GetMethods().GetEnumerator();

            while (methodsEnumeration.MoveNext())
            {
                System.Reflection.MethodInfo methodInfo = methodsEnumeration.Current as System.Reflection.MethodInfo;

                if (methodInfo != null && methodInfo.Name == methodNameDescendants && methodInfo.IsGenericMethod)
                {
                    System.Type[] genericArguments = methodInfo.GetGenericArguments();

                    if (genericArguments.Length == 1)
                    {
                        OpenXMLElementProxy::descendants = methodInfo.MakeGenericMethod(genericTypes);
                        break;
                    }
                }
            }
        }

        return  OpenXMLElementProxy::descendants;

        
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMethodInfoInsertAfter</Name>
				<Source><![CDATA[
    private static System.Reflection.MethodInfo getMethodInfoInsertAfter()
    {
        const str methodInsertAfter = 'InsertAfter';

        if (!OpenXMLElementProxy::insertAfter)
        {
            System.Type runType = System.Type::GetType('DocumentFormat.OpenXml.Wordprocessing.Run, DocumentFormat.OpenXml');
            System.Type openXmlElementType = System.Type::GetType('DocumentFormat.OpenXml.OpenXmlElement, DocumentFormat.OpenXml');
        
            System.Type[] genericTypes = new System.Type[1]();
            genericTypes.SetValue(runType, 0);

            System.Collections.IEnumerator methodsEnumeration = openXmlElementType.GetMethods().GetEnumerator();

            while (methodsEnumeration.MoveNext())
            {
                System.Reflection.MethodInfo methodInfo = methodsEnumeration.Current as System.Reflection.MethodInfo;

                if (methodInfo != null && methodInfo.Name == methodInsertAfter && methodInfo.IsGenericMethod)
                {
                    System.Type[] genericArguments = methodInfo.GetGenericArguments();

                    if (genericArguments.Length == 1)
                    {
                        System.Type argumentType = genericArguments.GetValue(0) as System.Type;

                        System.Reflection.ParameterInfo[] parameters = methodInfo.GetParameters();

                        if (parameters.Length == 2)
                        {
                            System.Reflection.ParameterInfo firstParm = parameters.GetValue(0);
                            System.Reflection.ParameterInfo secondParm = parameters.GetValue(1);

                            if (firstParm.ParameterType.IsGenericParameter
                            && firstParm.ParameterType.Name == argumentType.Name
                            && secondParm.ParameterType == openXmlElementType)
                            {
                                OpenXMLElementProxy::insertAfter = methodInfo.MakeGenericMethod(genericTypes);
                                break;
                            }
                        }
                    }
                }
            }
        }
        return OpenXMLElementProxy::insertAfter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMethodInfoAppendChild</Name>
				<Source><![CDATA[
    private static System.Reflection.MethodInfo getMethodInfoAppendChild()
    {
        const str methodName = 'AppendChild';
        
        if(!OpenXMLElementProxy::appendChild)
        {
            System.Type runType = System.Type::GetType('DocumentFormat.OpenXml.Wordprocessing.Run, DocumentFormat.OpenXml');
            System.Type textType = System.Type::GetType('DocumentFormat.OpenXml.Wordprocessing.Text, DocumentFormat.OpenXml');
        
            System.Type[] genericTypes = new System.Type[1]();
            genericTypes.SetValue(textType, 0);

            System.Collections.IEnumerator methodsEnumeration = runType.GetMethods().GetEnumerator();

            while (methodsEnumeration.MoveNext())
            {
                System.Reflection.MethodInfo methodInfo = methodsEnumeration.Current as System.Reflection.MethodInfo;

                if (methodInfo != null && methodInfo.Name == methodName && methodInfo.IsGenericMethod)
                {
                    System.Type[] genericArguments = methodInfo.GetGenericArguments();

                    if (genericArguments.Length == 1)
                    {
                        System.Type argumentType = genericArguments.GetValue(0) as System.Type;

                        System.Reflection.ParameterInfo[] parameters = methodInfo.GetParameters();

                        if (parameters.Length == 1)
                        {
                            System.Reflection.ParameterInfo firstParm = parameters.GetValue(0);

                            if (firstParm.ParameterType.IsGenericParameter && firstParm.ParameterType.Name == argumentType.Name)
                            {
                                OpenXMLElementProxy::appendChild = methodInfo.MakeGenericMethod(genericTypes);
                                break;
                            }
                        }
                    }
                }
            }
        }
        return OpenXMLElementProxy::appendChild;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendChild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends the specified element to the end of the current element's list of child nodes
    /// </summary>
    /// <param name = "_newChild">The OpenXmlElement element to append.</param>
    /// <returns>The OpenXmlElement element that was appended.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public DocumentFormat.OpenXml.OpenXmlElement appendChild(DocumentFormat.OpenXml.OpenXmlElement _newChild)
    {
        System.Reflection.MethodInfo appendChildMethodInfo = OpenXMLElementProxy::getMethodInfoAppendChild();
        DocumentFormat.OpenXml.OpenXmlElement result = null;

        if (appendChildMethodInfo)
        {
            result = appendChildMethodInfo.Invoke(openXmlElement, [_newChild]);
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAfter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the specified element immediately after the specified reference element.
    /// </summary>
    /// <param name = "_newChild">The OpenXmlElement element to insert.</param>
    /// <param name = "_refChild">The OpenXmlElement element that is in the reference node.</param>
    /// <returns>The OpenXmlElement element that was inserted.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public DocumentFormat.OpenXml.OpenXmlElement insertAfter(DocumentFormat.OpenXml.OpenXmlElement _newChild, DocumentFormat.OpenXml.OpenXmlElement _refChild)
    {
        System.Reflection.MethodInfo insertAfterMethodInfo = OpenXMLElementProxy::getMethodInfoInsertAfter();
        DocumentFormat.OpenXml.OpenXmlElement result = null;
        
        if (insertAfterMethodInfo)
        {
            result = insertAfterMethodInfo.Invoke(openXmlElement, [_newChild, _refChild]);
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>descendants</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enumerates all of the current element's descendants.
    /// </summary>
    /// <returns>Collection of bookmarks.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public System.Collections.IEnumerable descendants()
    {
        System.Reflection.MethodInfo descendantsMethodInfo = OpenXMLElementProxy::getMethodInfoDescendants();
        System.Collections.IEnumerable result = null;

        if (descendantsMethodInfo)
        {
            result = descendantsMethodInfo.Invoke(openXmlElement, null);
        }
        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>