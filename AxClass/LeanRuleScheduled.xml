<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanRuleScheduled</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Represents a scheduled kanban rule.
/// </summary>
public class LeanRuleScheduled extends LeanRuleVariable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowManualKanbans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the replenishment strategy enables manual kanbans to be created.
    /// </summary>
    /// <returns>
    /// true.
    /// </returns>
    public boolean allowManualKanbans()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateKanban</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates the <c>Kanban</c> record.
    /// </summary>
    /// <param name="_kanban">
    /// The <c>Kanban</c> to duplicate.
    /// </param>
    /// <remarks>
    /// Displays the <c>KanbanCreate</c> dialog box.
    /// </remarks>
    public void duplicateKanban(Kanban _kanban)
    {
        Args args = new Args();
        KanbanRule kanbanRule = _kanban.kanbanRule();

        args.name(formstr(KanbanCreateScheduled));
        args.caller();
        args.record(kanbanRule);

        FormRun formRun = classfactory.formRunClass(args);
        formRun.parmProductQuantity(_kanban.QuantityOrdered);
        formRun.parmDueDateTime(_kanban.DueDateTime);
        formRun.parmItemId(_kanban.ItemId);
        formRun.parmNewKanbansCount(1);

        formRun.init();
        formRun.run();
        formRun.wait();

        if (formRun.closedOk())
        {
            int numberOfKanbans = formRun.parmNewKanbansCount();
            if (numberOfKanbans)
            {                
                LeanRulesEngine::createKanbanFromForm(kanbanRule, formRun);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKanbanCreationForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the name of the form that manually creates kanbans.
    /// </summary>
    /// <returns>
    ///    The name of the kanban creation form.
    /// </returns>
    public str getKanbanCreationForm()
    {
        return formstr(KanbanCreateScheduled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the change of a field value.
    /// </summary>
    /// <param name="_tableId">
    ///    The ID of the table that contains the updated field.
    /// </param>
    /// <param name="_fieldId">
    ///    The ID of the field that has a changed value.
    /// </param>
    public void modifiedField(tableId _tableId, fieldId _fieldId)
    {
        super(_tableId, _fieldId);

        if (   _tableId == tablenum(KanbanRule)
            && _fieldId == fieldnum(KanbanRule, ReplenishmentStrategy))
        {
            this.validateLastActivityInventControlled();
        }
        else if (   _tableId == tablenum(KanbanFlow)
                 &&    (_fieldId == fieldnum(KanbanFlow, FirstPlanPlanActivity)
                    ||  _fieldId == fieldnum(KanbanFlow, LastPlanPlanActivity)))
        {
            this.validateLastActivityInventControlled();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultSiteOrInventoryOrderSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default values for the minimum product quantity based on the inventory order settings.
    /// </summary>
    public void setDefaultSiteOrInventoryOrderSettings()
    {
        super();

        if (   leanRuleData
            && leanRuleData.parmLeanCoverage().RuleCoverageType == LeanRuleCoverageType::Product)
        {
            KanbanRuleVariable kanbanRuleVariable = leanRuleData.parmKanbanRuleVariable();
            if (kanbanRuleVariable.MinimumProductQuantity == 0)
            {
                kanbanRuleVariable.MinimumProductQuantity = inventSettingMinimumProductQuantity;
            }
            leanRuleData.parmKanbanRuleVariable(kanbanRuleVariable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLastActivityInventControlled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the last activity is inventory controlled.
    /// </summary>
    /// <returns>
    ///    true if the last activity of the rule updates inventory; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean validateLastActivityInventControlled()
    {
        boolean         lastActivityUpdatesInventory = false;

        if (leanRuleData)
        {
            KanbanFlow kanbanFlow = leanRuleData.kanbanFlow();
            if (kanbanFlow.FirstPlanPlanActivity)   // Do not check if the user has not filled the activities
            {
                lastActivityUpdatesInventory = kanbanFlow.lastActivityUpdatesInventory();

                // Show explicit message only if the flow is defined
                if (!lastActivityUpdatesInventory)
                {
                    checkFailed("@SYS314032");
                }
            }
        }

        return lastActivityUpdatesInventory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProductQuantityInventSetting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the potential change in the kanban quantities are in the range of the order settings
    /// of the item.
    /// </summary>
    /// <returns>
    /// true if the quantities are valid; otherwise, false.
    /// </returns>
    protected boolean validateProductQuantityInventSetting()
    {
        boolean             result             = super();
        KanbanRuleVariable  kanbanRuleVariable = leanRuleData.parmKanbanRuleVariable();

        if (   inventSettingMinimumProductQuantity
            && kanbanRuleVariable.MinimumProductQuantity < inventSettingMinimumProductQuantity)
        {
            result = checkFailed("@SYS313588") && result;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the writing of a particular type object.
    /// </summary>
    /// <param name="_showWarnings">
    /// Boolean value indicating whether optional warnings should be shown.
    /// </param>
    /// <returns>
    /// true if the validation was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Errors are thrown as part of this validation.
    /// </remarks>
    public boolean validateWrite(boolean _showWarnings = false)
    {
        boolean result = super();

        result = this.validateLastActivityInventControlled() && result;

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static LeanRuleScheduled construct()
    {
        return new LeanRuleScheduled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the class.
    /// </summary>
    /// <returns>
    /// A new instance of the class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanRuleScheduled newStandard()
    {
        return LeanRuleScheduled::construct();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>