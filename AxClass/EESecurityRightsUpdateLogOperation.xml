<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EESecurityRightsUpdateLogOperation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EeSecurityRightsUpdateLogOperation</c> class is the service that logs table and field security rights changes.
/// </summary>
/// <remarks>
/// The people of Estonia can ask corporations doing business in Estonia who granted access their personal information and who has seen that personal information.
/// </remarks>
public class EeSecurityRightsUpdateLogOperation
{
    UserId userIdChangedBy;
    UserId userIdChangedTo;
    RefRecId securityRoleRecId;
    AddRemove changeType;
    RefRecId internalOrganizationRecId;
    UtcDateTime dateTime;
    RecordInsertList EESecurityRightsUpdateLogList = new RecordInsertList(tableNum(EESecurityRightsUpdateLog));

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs security rights changes that impact the exposure of senstive personal information.
    /// </summary>
    /// <param name="_request">
    /// The request defines the user that made the changes to the security model.
    /// </param>
    public void process(EeSecurityRightsUpdateLogRequest _request)
    {
        SecurityRole securityRole;
        SysSecRelatedObjectsComparison sysSecRelatedObjectsComparison;
        EESecurityPrivilegesTracked eESecurityPrivilegesTracked;

        userIdChangedBy = _request.parmUserIdChangedBy();
        userIdChangedTo = _request.parmUserIdChangedTo();
        securityRoleRecId = _request.parmSecurityRoleRecId();
        changeType = _request.parmChangeType();
        internalOrganizationRecId = _request.parmInternalOrganizationRecId();
        dateTime = _request.parmDateTime();

        delete_from sysSecRelatedObjectsComparison;
        str tmpTableName = sysSecRelatedObjectsComparison.getPhysicalTableName();

        select firstonly securityRole
            where securityRole.RecId == securityRoleRecId;

        Microsoft.Dynamics.XmlSign.Xades.SecurityExtension::PopulatePermissionsByRole(tmpTableName, securityRole.AotName);

        while select sysSecRelatedObjectsComparison exists join eESecurityPrivilegesTracked
            where sysSecRelatedObjectsComparison.PrivilegeIdentifier == eESecurityPrivilegesTracked.PrivilegeName
        {
            this.logPermissionChange(sysSecRelatedObjectsComparison);
        }

        ttsbegin;
        EESecurityRightsUpdateLogList.insertDatabase();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logPermissionChange</Name>
				<Source><![CDATA[
    private void logPermissionChange(SysSecRelatedObjectsComparison _sysSecRelatedObjectsComparison)
    {
        EESecurityRightsUpdateLog eESecurityRightsUpdateLog;

        if (changeType == AddRemove::Remove)
        {
            eESecurityRightsUpdateLog.AccessType = AccessRight::NoAccess;
        }
        else
        {
            switch (SysSecGrantOption::Grant)
            {
                case _sysSecRelatedObjectsComparison.DeleteAccess:
                    eESecurityRightsUpdateLog.AccessType = AccessRight::Delete;
                    break;

                case _sysSecRelatedObjectsComparison.UpdateAccess:
                    eESecurityRightsUpdateLog.AccessType = AccessRight::Edit;
                    break;

                case _sysSecRelatedObjectsComparison.CorrectAccess:
                    eESecurityRightsUpdateLog.AccessType = AccessRight::Correction;
                    break;

                case _sysSecRelatedObjectsComparison.ReadAccess || _sysSecRelatedObjectsComparison.InvokeAccess:
                    eESecurityRightsUpdateLog.AccessType = AccessRight::View;
                    break;

                case _sysSecRelatedObjectsComparison.CreateAccess:
                    eESecurityRightsUpdateLog.AccessType = AccessRight::Add;
                    break;

                default:
                    eESecurityRightsUpdateLog.AccessType = AccessRight::NoAccess;
                    break;
            }
        }

        eESecurityRightsUpdateLog.OMInternalOrganization = internalOrganizationRecId;
        eESecurityRightsUpdateLog.UserId = userIdChangedTo;
        eESecurityRightsUpdateLog.ChangedBy = userIdChangedBy;
        eESecurityRightsUpdateLog.SecurityRole = securityRoleRecId;
        eESecurityRightsUpdateLog.AccessChangedDateTime = dateTime;
        eESecurityRightsUpdateLog.SecurityPrivilege = _sysSecRelatedObjectsComparison.PrivilegeName ? _sysSecRelatedObjectsComparison.PrivilegeName : _sysSecRelatedObjectsComparison.PrivilegeIdentifier;
        eESecurityRightsUpdateLog.ResourceType = _sysSecRelatedObjectsComparison.ResourceType;
        eESecurityRightsUpdateLog.ResourceName = _sysSecRelatedObjectsComparison.Resource;

        EESecurityRightsUpdateLogList.add(eESecurityRightsUpdateLog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPriviledgesToTrack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init priviledges which should be tracked on role change.
    /// </summary>
    public static void initPriviledgesToTrack()
    {
        EESecurityPrivilegesTracked eESecurityPrivilegesTracked;

        select count(RecId) from eESecurityPrivilegesTracked;

        if (!EESecurityPrivilegesTracked.RecId)
        {
            RecordInsertList privelegeList = new RecordInsertList(tableNum(EESecurityPrivilegesTracked));

            EeSecurityRightsUpdateLogOperation::addPriviledgeToTrack(privilegeStr(DirPartyNameChangeMaintain), privelegeList);
            EeSecurityRightsUpdateLogOperation::addPriviledgeToTrack(privilegeStr(DirPartyTableMaintain), privelegeList);
            EeSecurityRightsUpdateLogOperation::addPriviledgeToTrack(privilegeStr(HcmWorkerLogisticsContactInfoMaintain), privelegeList);
            EeSecurityRightsUpdateLogOperation::addPriviledgeToTrack(privilegeStr(LogisticsContactInfoMaintain), privelegeList);
            EeSecurityRightsUpdateLogOperation::addPriviledgeToTrack(privilegeStr(LogisticsContactInfoMaintainExt), privelegeList);
            EeSecurityRightsUpdateLogOperation::addPriviledgeToTrack(privilegeStr(HcmApplicantView), privelegeList);
            EeSecurityRightsUpdateLogOperation::addPriviledgeToTrack(privilegeStr(HcmPersonCompetenceView), privelegeList);
            EeSecurityRightsUpdateLogOperation::addPriviledgeToTrack(privilegeStr(HcmPersonCompetenciesView), privelegeList);
            EeSecurityRightsUpdateLogOperation::addPriviledgeToTrack(privilegeStr(HcmSkillChartDepartmentView), privelegeList);
            EeSecurityRightsUpdateLogOperation::addPriviledgeToTrack(privilegeStr(HcmSkillChartPersonView), privelegeList);
            EeSecurityRightsUpdateLogOperation::addPriviledgeToTrack(privilegeStr(HcmPersonalContactView), privelegeList);
            EeSecurityRightsUpdateLogOperation::addPriviledgeToTrack(privilegeStr(HcmWorkerBenefitInquiryView), privelegeList);
            EeSecurityRightsUpdateLogOperation::addPriviledgeToTrack(privilegeStr(HcmWorkerEnrollmentView), privelegeList);
            EeSecurityRightsUpdateLogOperation::addPriviledgeToTrack(privilegeStr(HcmWorkerView), privelegeList);
            EeSecurityRightsUpdateLogOperation::addPriviledgeToTrack(privilegeStr(RetailLimitedWorkerView), privelegeList);
            EeSecurityRightsUpdateLogOperation::addPriviledgeToTrack('HcmBenefitWorkspace', privelegeList);
            EeSecurityRightsUpdateLogOperation::addPriviledgeToTrack(privilegeStr(HcmTotalCompensationStatementMaintain), privelegeList);
            EeSecurityRightsUpdateLogOperation::addPriviledgeToTrack(privilegeStr(HcmTotalCompStatementSectionsView), privelegeList);
            EeSecurityRightsUpdateLogOperation::addPriviledgeToTrack(privilegeStr(HRCCompGridViewView), privelegeList);
            EeSecurityRightsUpdateLogOperation::addPriviledgeToTrack(privilegeStr(HRMCompEventEmplView), privelegeList);
            EeSecurityRightsUpdateLogOperation::addPriviledgeToTrack(privilegeStr(HRMCompFixedEmplView), privelegeList);
            EeSecurityRightsUpdateLogOperation::addPriviledgeToTrack(privilegeStr(HRMCompFixedPlanTableView), privelegeList);
            EeSecurityRightsUpdateLogOperation::addPriviledgeToTrack(privilegeStr(HcmTotalCompStatementSectionsMaintain), privelegeList);
            EeSecurityRightsUpdateLogOperation::addPriviledgeToTrack(privilegeStr(HcmWorkerPositionsView), privelegeList);
            EeSecurityRightsUpdateLogOperation::addPriviledgeToTrack(privilegeStr(HRMWorkersHiredInPeriodView), privelegeList);
            EeSecurityRightsUpdateLogOperation::addPriviledgeToTrack(privilegeStr(HcmWorkerBenefitsView), privelegeList);
            EeSecurityRightsUpdateLogOperation::addPriviledgeToTrack(privilegeStr(HcmWorkerDateManagerView), privelegeList);
            EeSecurityRightsUpdateLogOperation::addPriviledgeToTrack(privilegeStr(HRMBirthdayGenerate), privelegeList);

            ttsbegin;
            privelegeList.insertDatabase();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPriviledgeToTrack</Name>
				<Source><![CDATA[
    private static void addPriviledgeToTrack(ResourceName _priviledgeName, RecordInsertList _privelegeList)
    {
        EESecurityPrivilegesTracked eESecurityPrivilegesTracked;
        eESecurityPrivilegesTracked.PrivilegeName = _priviledgeName;
        _privelegeList.add(eESecurityPrivilegesTracked);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>