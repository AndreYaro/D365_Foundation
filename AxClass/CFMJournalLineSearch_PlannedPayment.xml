<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMJournalLineSearch_PlannedPayment</Name>
	<SourceCode>
		<Declaration><![CDATA[
[CFMJournalSourceAttribute(CFMJournalTransSourceType::PlannedPayment)]
class CFMJournalLineSearch_PlannedPayment extends CFMJournalLineSearch
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initProtoTransParmContract</Name>
				<Source><![CDATA[
    protected CFMJournalProtoTransParmContract initProtoTransParmContract(QueryRun _queryRun)
    {
        CFMJournalProtoTransParmContractPlanPaym parmContract = new CFMJournalProtoTransParmContractPlanPaym();
        CFMPlannedPaymentTable plannedPaymentTable = _queryRun.get(tableNum(CFMPlannedPaymentTable));

        parmContract.parmPlannedPaymentTable(plannedPaymentTable);
        parmContract.parmPlannedPaymentLine(_queryRun.get(tableNum(CFMPlannedPaymentLine)));
        parmContract.initDirPartyMapFromQueryRun(_queryRun);

        return parmContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryList</Name>
				<Source><![CDATA[
    protected void initQueryList()
    {
        queryList.addEnd(this.query());
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    protected Query query()
    {
        Query query = new Query();
        query.allowCrossCompany(true);
        QueryBuildDataSource qbdsTable = query.addDataSource(tableNum(CFMPlannedPaymentTable));
        qbdsTable.addGroupByField(fieldNum(CFMPlannedPaymentTable, CurrencyCode) );
        qbdsTable.addGroupByField(fieldNum(CFMPlannedPaymentTable, DueDate));
        qbdsTable.addGroupByField(fieldNum(CFMPlannedPaymentTable, AccountType));
        qbdsTable.addGroupByField(fieldNum(CFMPlannedPaymentTable, PaymentAccountNum));
        qbdsTable.addGroupByField(fieldNum(CFMPlannedPaymentTable, PaymentAccountType));
        qbdsTable.addGroupByField(fieldNum(CFMPlannedPaymentTable, SourceDataAreaId));
        qbdsTable.addGroupByField(fieldNum(CFMPlannedPaymentTable, PaymentPriority));
        filter.setDateInterval(qbdsTable, fieldNum(CFMPlannedPaymentTable, DueDate), false);
        filter.setPaymentFilter(qbdsTable, fieldNum(CFMPlannedPaymentTable, PaymentAccountNum), fieldNum(CFMPlannedPaymentTable, PaymentAccountType));
        filter.setOrgUnitFilter(qbdsTable, fieldNum(CFMPlannedPaymentTable, SourceDataAreaId));

        QueryBuildDataSource qbdsLine = qbdsTable.addDataSource(tableNum(CFMPlannedPaymentLine));
        qbdsLine.relations(true);
        qbdsLine.fetchMode(QueryFetchMode::One2One);

        qbdsLine.addGroupByField(fieldNum(CFMPlannedPaymentLine, LedgerDimension));
        qbdsLine.addSelectionField(fieldNum(CFMPlannedPaymentLine, DueAmount), SelectionField::Sum);

        filter.setCashFlowDirectionFilterAmountSign(qbdsLine, fieldNum(CFMPlannedPaymentLine, DueAmount), cashFlowDirection, false);

        QueryBuildDataSource qbdsVendTable = qbdsTable.addDataSource(tableNum(VendTable));
        DictRelation dictRelation = new DictRelation(tableNum(CFMPlannedPaymentTable));
        dictRelation.loadNameRelation(literalStr(VendTable));
        qbdsVendTable.addRelation(dictRelation);
        qbdsVendTable.joinMode(JoinMode::OuterJoin);
        qbdsVendTable.fetchMode(QueryFetchMode::One2One);
        qbdsVendTable.addGroupByField(fieldNum(VendTable, Party));

        QueryBuildDataSource qbdsCustTable = qbdsTable.addDataSource(tableNum(CustTable));
        dictRelation = new DictRelation(tableNum(CFMPlannedPaymentTable));
        dictRelation.loadNameRelation(literalStr(CustTable));
        qbdsCustTable.addRelation(dictRelation);
        qbdsCustTable.joinMode(JoinMode::OuterJoin);
        qbdsCustTable.fetchMode(QueryFetchMode::One2One);
        qbdsCustTable.addGroupByField(fieldNum(CustTable, Party));

        QueryBuildDataSource qbdsWorker = qbdsTable.addDataSource(tableNum(HcmWorker));
        qbdsWorker.relations(false);
        dictRelation = new DictRelation(tableNum(CFMPlannedPaymentTable));
        dictRelation.loadNameRelation(literalStr(HcmWorker));
        qbdsWorker.addRelation(dictRelation);
        qbdsWorker.joinMode(JoinMode::OuterJoin);
        qbdsWorker.fetchMode(QueryFetchMode::One2One);
        qbdsWorker.addGroupByField(fieldNum(HcmWorker, Person));

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>