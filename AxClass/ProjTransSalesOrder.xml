<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransSalesOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjTransSalesOrder</c> class is the sub class of <c>ProjTransItem</c> class
/// which includes the aggregation of saleslines.
/// </summary>
class ProjTransSalesOrder extends ProjTransItem
{

    ProjSalesOrderView projSalesOrderView;
    SalesLine salesLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProjSalesOrderView _projSalesOrderView)
    {
        projSalesOrderView   = _projSalesOrderView;
        super(_projSalesOrderView);
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the category ID for a transaction.
    /// </summary>
    /// <returns>
    /// The category ID for the transaction.
    /// </returns>
    public ProjCategoryId categoryId()
    {
        return projSalesOrderView.ProjCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activityNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the category ID for a transaction.
    /// </summary>
    /// <returns>
    /// The category ID for the transaction.
    /// </returns>
    public str activityNumber()
    {
        return projSalesOrderView.ActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyIdSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code for the sales amounts that are reported by a transaction.
    /// </summary>
    /// <returns>
    /// The currency code for the sales amounts that are reported by the transaction.
    /// </returns>
    public ProjSalesCurrencyCode currencyIdSales()
    {
        return projSalesOrderView.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the inventory item that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the inventory item that is associated with this transaction.
    /// </returns>
    public ItemId itemId()
    {
        return projSalesOrderView.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePropertyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the line property ID that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The line property ID that is associated with this transaction.
    /// </returns>
    public ProjLinePropertyId linePropertyId()
    {
        return projSalesOrderView.ProjLinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the project that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the project that is associated with this transaction.
    /// </returns>
    public ProjId projId()
    {
        return projSalesOrderView.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction date.
    /// </summary>
    /// <returns>
    /// The transaction date.
    /// </returns>
    TransDate transDate()
    {
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnover</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction turnover.
    /// </summary>
    /// <returns>
    /// The transaction turnover.
    /// </returns>
    public AmountCur transTurnover()
    {
		select firstonly salesLine where salesLine.SalesId == projSalesOrderView.SalesId;
        return salesLine.calcLineAmount(projSalesOrderView.SalesQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundingSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the funding source for sales line.
    /// </summary>
    /// <returns>
    /// Returns the <c> ProjFundingSourceRefId </c> for the sales line.
    /// </returns>
    public ProjFundingSourceRefId fundingSource()
    {
        ProjTable projTable = ProjTable::find(projSalesOrderView.ProjId);

        if (ProjInvoiceTable::hasMultipleFundingSources(projTable.ProjInvoiceProjId))
        {
            select firstonly salesLine where salesLine.SalesId == projSalesOrderView.SalesId;
            return salesLine.salesTable().FundingSource;
        }
        else
        {
            return ProjFundingSource::fundingSourceForSalesOrder(projTable.ProjInvoiceProjId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>