<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDocumentDepHelperForProfile_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// It is a helper class to calculate depreciation of all documents for one asset when inquiring the profile.
/// </summary>
class AssetDocumentDepHelperForProfile_JP extends AssetDocumentDepHelper_JP
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addProfileAfterNormalDepIsDone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds additional profile line of asset retirement obligation (ARO) in case that
    /// ARO depreciation is not done yet after normal depreciation is done.
    /// </summary>
    /// <param name="_tmpDateSum">
    /// An instance of <C>TmpDateSum</C> that used to hold a profile lines.
    /// The current data in this buffer is the last added profile line.
    /// </param>
    public void addProfileAfterNormalDepIsDone(TmpDateSum  _tmpDateSum)
    {
        Map                     calcResult;
        MapEnumerator           mapEnumerator;
        AssetAmount             curDepAmount;
        AssetTransDate          curDepDate;
        AssetDocumentType_JP    curAssetDocumentType;
        AssetAmount             totalARODepAmount  = 0;
        AssetTransDate          lastDepDate     = dateNull();
        container               resultForOneEntry;
        int                     i;

        this.applyNormalDepreciationAmount(0);
        calcResult = this.calc(dateMax());

        mapEnumerator = calcResult.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            resultForOneEntry = mapEnumerator.currentValue();
            for (i = 1; i <= conLen(resultForOneEntry); i++)
            {
                [curDepAmount, curDepDate, curAssetDocumentType] = conPeek(resultForOneEntry, i);
                if (curDepAmount)
                {
                    if (curAssetDocumentType == AssetDocumentType_JP::AssetRetirementObligation)
                    {
                        totalARODepAmount += curDepAmount;
                        lastDepDate = max(lastDepDate, curDepDate);
                    }
                }
            }
        }

        if (totalARODepAmount != 0)
        {
            _tmpDateSum.TransDate                           = lastDepDate;
            _tmpDateSum.RetirementObligationDepAmount_JP    = totalARODepAmount;

            _tmpDateSum.TmpNumerals01   =  0;
            _tmpDateSum.TmpNumerals02   -= totalARODepAmount;
            _tmpDateSum.Total           += totalARODepAmount;

            _tmpDateSum.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total depreciation amount of all documents to a specified date.
    /// </summary>
    /// <param name="_transDate">
    /// The maximum transaction to calculate depreciation.
    /// </param>
    /// <returns>
    /// The total depreciation amount of all documents.
    /// </returns>
    public AssetAmount calcTotal(AssetTransDate _transDate)
    {
        AssetAmount     ret;
        Map             calcResult;
        MapEnumerator   mapEnumerator;
        AssetAmount     curDepAmount;
        container       resultForOneEntry;
        int             i;

        calcResult = this.calc(_transDate);

        mapEnumerator = calcResult.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            resultForOneEntry = mapEnumerator.currentValue();
            for (i = 1; i <= conLen(resultForOneEntry); i++)
            {
                [curDepAmount] = conPeek(resultForOneEntry, i);
                ret += curDepAmount;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <C>AssetDocumentDepHelperForProfile_JP</C>.
    /// </summary>
    /// <param name="_documentTypes">
    /// The list asset document type that needs to calculate depreciation.
    /// </param>
    /// <param name="_assetDepBookMap_JP">
    /// The value model / depreciation book.
    /// </param>
    /// <param name="_assetTable">
    /// The instance of <C>AssetTable</C> that related to the value model / depreciation book. Optional.
    /// </param>
    /// <returns>
    /// A new instance of <C>AssetDocumentDepHelperForProfile_JP</C>.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// A value model / depreciation book must be specified.
    /// </exception>
    public static AssetDocumentDepHelperForProfile_JP construct(
        container               _documentTypes,
        AssetDepBookMap_JP      _assetDepBookMap_JP,
        AssetTable              _assetTable = null)
    {
        AssetDocumentDepHelperForProfile_JP ret;

        if (!_assetDepBookMap_JP)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        ret = new AssetDocumentDepHelperForProfile_JP(_documentTypes, _assetDepBookMap_JP, _assetTable);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>