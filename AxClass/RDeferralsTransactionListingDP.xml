<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rDeferralsTransactionListingDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RDeferralsTransactionListinDP</c> class handles the business logic for the <c>RDeferralsTransactionListing</c> reports.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(RDeferralsTransQuery)),
    SRSReportParameterAttribute(classStr(RDeferralsContract))
]
public class rDeferralsTransactionListingDP extends SRSReportDataProviderBase
{
    RDeferralsBookId    rDeferralsBookId;
    RDeferralsTmp       rDeferralsTmp;
    boolean             zeroBookValue;
    RDeferralsTransDate transDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getRDeferralsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>RDeferralsTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// <c>RDeferralsTmp</c> temporary table
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(RDeferralsTmp))
    ]
    public RDeferralsTmp getRDeferralsTmp()
    {
        return rDeferralsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init(Query _query)
    {
        QueryBuildDataSource    qbds = _query.dataSourceTable(tableNum(RDeferralsTrans));

        qbds.rangeField(fieldNum(RDeferralsTrans, DeferralsBookId)).value(queryValue(rDeferralsBookId));
        qbds.rangeField(fieldNum(RDeferralsTrans, TransDate)).value(queryRange(dateNull(), transDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRDeferralsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into temporary table <c>RDeferralsTmp</c>.
    /// </summary>
    /// <param name="_rDeferralsTable">
    /// Passes <c>RDeferralsTable</c> table object.
    /// </param>
    /// <param name="_rDeferralsTrans">
    /// Passes <c>RDeferralsTrans</c> table object.
    /// </param>
    /// <param name="_rDeferralsSumTrans">
    /// Passes <c>RDeferralsSumTrans</c> class object.
    /// </param>
    private void insertRDeferralsTmp(RDeferralsTable _rDeferralsTable, RDeferralsTrans _rDeferralsTrans, RDeferralsSumCalc _rDeferralsSumTrans)
    {
        RDeferralsBook  rDeferralsBook;
        rDeferralsBook = RDeferralsBook::find(_rDeferralsTable.DeferralsId, rDeferralsBookId);

        rDeferralsTmp.clear();
        rDeferralsTmp.rDeferralsBookId  = rDeferralsBookId;
        rDeferralsTmp.CurrencyCode      = CompanyInfoHelper::standardCurrency();
        rDeferralsTmp.DeferralsId       = _rDeferralsTable.DeferralsId;
        rDeferralsTmp.Name              = _rDeferralsTable.Name;
        rDeferralsTmp.AcquisitionDate   = _rDeferralsTable.AcquisitionDate;
        rDeferralsTmp.DeferralsGroup    = rDeferralsBook.DeferralsGroupId;
        rDeferralsTmp.DeferralsAmount   = rDeferralsBook.DeferralsAmount;
        rDeferralsTmp.LifeTime          = rDeferralsBook.LifeTime;
        rDeferralsTmp.Status            = rDeferralsBook.Status;
        rDeferralsTmp.NetBookValue      = _rDeferralsSumTrans.netBookValue();
        rDeferralsTmp.WritingOffValue   = _rDeferralsSumTrans.writingOffValue();
        rDeferralsTmp.RetirementValue   = _rDeferralsSumTrans.retirementValue();
        rDeferralsTmp.TransDate         = _rDeferralsTrans.TransDate;
        rDeferralsTmp.TransType         = _rDeferralsTrans.TransType;
        rDeferralsTmp.Amount            = _rDeferralsTrans.Amount;
        rDeferralsTmp.DeferralsPeriod   = _rDeferralsTrans.DeferralsPeriod;
        rDeferralsTmp.Voucher           = _rDeferralsTrans.Voucher;
        rDeferralsTmp.Txt               = _rDeferralsTrans.Txt;
        rDeferralsTmp.ProfitId          = RTax25ProfitTable::find(_rDeferralsTable.rTax25ProfitTable).ProfitId;

        rDeferralsTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        QueryRun            qr;
        Query               query;
        RDeferralsTrans     rDeferralsTrans;
        RDeferralsTable     rDeferralsTable;
        RDeferralsSumCalc   rDeferralsSumTrans;
        RDeferralsContract  contract = this.parmDataContract() as RDeferralsContract;

        rDeferralsBookId    = contract.parmBookId();
        transDate           = contract.parmTransDate();
        zeroBookValue       = contract.parmZeroBookValue();

        query = this.parmQuery();
        this.init(query);
        qr = new QueryRun(query);

        rDeferralsSumTrans = RDeferralsSumCalc_Trans::newDeferralsPeriod((select firstonly rDeferralsTable).DeferralsId,
                                                                          rDeferralsBookId,
                                                                          transDate);

        while (qr.next())
        {
            rDeferralsTable = qr.get(tableNum(RDeferralsTable));
            rDeferralsTrans = qr.get(tableNum(RDeferralsTrans));

            rDeferralsSumTrans.parmRangeDeferralsId(rDeferralsTable.DeferralsId);
            if (!(zeroBookValue &&
                    rDeferralsSumTrans.netBookValue() < RDeferralsProfile::find(RDeferralsBook::find(rDeferralsTable.DeferralsId, rDeferralsBookId).DeferralsProfile).RoundOffOperation))
            {
                this.insertRDeferralsTmp(rDeferralsTable, rDeferralsTrans, rDeferralsSumTrans);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
