<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLoadItemReceivingOrderLineProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSLoadItemReceivingOrderLineProvider</c> class is responsible
/// for analyzing load item receiving parameters and suggesting, when possible,
/// the inbound order line that should be received next.
/// </summary>
public abstract class WHSLoadItemReceivingOrderLineProvider
{
    protected WHSReceiptOrderLine suggestedOrderLine;

    protected boolean itemFoundInLoad;
    protected boolean multipleOrdersExist;
    private   boolean multipleInventDimsForItemExistOnLoad;
    private   boolean multipleTrackingDimsForItemExistOnLoad;
    private   boolean allLinesBlockedByLoadOverdelivery;
    internal  boolean allowLoadOverreceipt;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findOrderLine</Name>
				<Source><![CDATA[
    protected abstract WHSReceiptOrderLine findOrderLine(
        WHSLoadId       _loadId,
        ItemId          _itemId,
        InventDim       _productInventDim,
        Num             _orderId,
        TradeLineNumber _lineNum)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>linesBelongToSameOrder</Name>
				<Source><![CDATA[
    internal boolean linesBelongToSameOrder(WHSReceiptOrderLine _orderLine1, WHSReceiptOrderLine _orderLine2)
    {
        return _orderLine1.OrderNumber == _orderLine2.OrderNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransType</Name>
				<Source><![CDATA[
    protected abstract InventTransType inventTransType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLinesBlockedByOverdelivery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean checkLinesBlockedByOverdelivery(WHSLoadId _loadId, InventTransId _inventTransId)
    {
        if (!allowLoadOverreceipt)
        {
            WHSLoadLine orderLineLoadLine;

            select firstonly orderLineLoadLine
                    where orderLineLoadLine.InventTransId == _inventTransId
                       && orderLineLoadLine.LoadId == _loadId;

            allLinesBlockedByLoadOverdelivery = orderLineLoadLine.isFullyReceived();
            return !allLinesBlockedByLoadOverdelivery;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void initialize(
        WHSLoadId       _loadId,
        ItemId          _itemId,
        InventDim       _productInventDim,
        Num             _orderId = '',
        TradeLineNumber _lineNumber = 0)
    {
        WHSLoadLine     loadLine;
        InventDim       inventDimLoadLine;
        InventDim       previousInventDim;
        InventDim       previousInventTrackingOnlyDim;
        InventDimParm   productInventDimParmAllowBlank;
        InventDimParm   inventDimProductTrackingParm;
        InventDimParm   inventDimTrackingOnlyParm;
        InventDimParm   productInventDimParm = _productInventDim.toDimParm();

        productInventDimParmAllowBlank.setAllTrackingDimensions();

        inventDimProductTrackingParm.setAllProductDimensions();

        inventDimTrackingOnlyParm.setAllTrackingDimensions();

        while select OrderNum, InventDimId from loadLine
            group by loadLine.OrderNum, loadLine.InventDimId
            where loadLine.LoadId == _loadId
                && loadLine.ItemId == _itemId
                && loadLine.InventTransType == this.inventTransType()
                && (!_orderId || loadLine.OrderNum == _orderId)
            #InventDimExistsJoinAllowBlank(loadLine.InventDimId, inventDimLoadLine, _productInventDim, productInventDimParm, productInventDimParmAllowBlank)
        {
            itemFoundInLoad = true;
             
            if (!multipleInventDimsForItemExistOnLoad &&
                !multipleTrackingDimsForItemExistOnLoad)
            {
                InventDim loadLineInventDim = loadLine.inventDim();
                if (InventDim::isInventDimParmEqualIgnoreBlanks(previousInventDim, loadLineInventDim, inventDimProductTrackingParm))
                {
                    previousInventDim.initFromInventDimParmNonBlank(loadLineInventDim, inventDimProductTrackingParm);
                }
                else
                {
                    multipleInventDimsForItemExistOnLoad = true;
                    if (multipleOrdersExist)
                    {
                        break;
                    }
                }

                if (InventDim::isInventDimParmEqualIgnoreBlanks(previousInventTrackingOnlyDim, loadLineInventDim, inventDimTrackingOnlyParm))
                {
                    previousInventTrackingOnlyDim.initFromInventDimParmNonBlank(loadLineInventDim, inventDimTrackingOnlyParm);
                }
                else
                {
                    multipleTrackingDimsForItemExistOnLoad = true;
                    if (multipleOrdersExist)
                    {
                        break;
                    }
                }
            }

            WHSReceiptOrderLine currentOrderLine = this.findOrderLine(_loadId, _itemId, _productInventDim, loadLine.OrderNum, _lineNumber);

            if (currentOrderLine
                && suggestedOrderLine
                && !this.linesBelongToSameOrder(currentOrderLine, suggestedOrderLine))
            {
                multipleOrdersExist = true;
                if (multipleInventDimsForItemExistOnLoad
                    || multipleTrackingDimsForItemExistOnLoad)
                {
                    break;
                }
            }
            else if (currentOrderLine && !suggestedOrderLine)
            {
                suggestedOrderLine = currentOrderLine;
            }
        }

        if (!suggestedOrderLine
            && _productInventDim.anyTrackingDimensionSpecified())
        {
            this.suggestOrderLineBasedOnProdDimOnly(_loadId, _itemId, _productInventDim, _orderId, _lineNumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>suggestOrderLineBasedOnProdDimOnly</Name>
				<Source><![CDATA[
    private void suggestOrderLineBasedOnProdDimOnly(
        WHSLoadId       _loadId,
        ItemId          _itemId,
        InventDim       _productInventDim,
        Num             _orderId,
        TradeLineNumber _lineNumber)
    {
        WHSLoadLine     loadLine;
        InventDim       inventDimLoadLine;
        InventDim       productInventDimWithoutTracking;

        productInventDimWithoutTracking.copyProductDimensions(_productInventDim, _itemId);

        InventDimParm productInventDimWithoutTrackingParm = productInventDimWithoutTracking.toDimParm();

        while select OrderNum from loadLine
            group by loadLine.OrderNum
            where loadLine.LoadId == _loadId
                && loadLine.ItemId == _itemId
                && loadLine.InventTransType == this.inventTransType()
                && (!_orderId || loadLine.OrderNum == _orderId)
            #InventDimExistsJoin(loadLine.InventDimId, inventDimLoadLine, productInventDimWithoutTracking, productInventDimWithoutTrackingParm)
        {
            itemFoundInLoad = true;

            WHSReceiptOrderLine currentOrderLine = this.findOrderLine(_loadId, _itemId, _productInventDim, loadLine.OrderNum, _lineNumber);

            if (currentOrderLine && suggestedOrderLine)
            {
                multipleOrdersExist = true;

                break;
            }
            else if (currentOrderLine && !suggestedOrderLine)
            {
                suggestedOrderLine = currentOrderLine;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventDimForDimParm</Name>
				<Source><![CDATA[
    private InventDim findInventDimForDimParm(InventDimId _inventDimId, InventDimParm _inventDimProductTrackingParm)
    {
        InventDim inventDim = InventDim::find(_inventDimId);
        inventDim.clearNotSelectedDim(_inventDimProductTrackingParm);
        return InventDim::findOrCreate(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOverDeliveryPossible</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean isOverDeliveryPossible(WHSReceiptOrderLine _orderLine, InventTransIdSum _inventTransIdSum)
    {
        ProductQuantity receivedOrderQty, maxReceivedQty;

        if (_orderLine.OverDeliveryPct > 0)
        {
            receivedOrderQty = _orderLine.unitConvertInvent2Order(_inventTransIdSum.physicalInvent());
            maxReceivedQty = _orderLine.Qty * (1 + _orderLine.OverDeliveryPct / 100);

            return receivedOrderQty < maxReceivedQty;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allLinesBlockedByLoadOverdelivery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether all potential lines were blocked because of load overdelivery restrictions.
    /// </summary>
    /// <returns>true if all lines were blocked because of load overdelivery restrictions; otherwise, false.</returns>
    [Hookable(false)]
    internal boolean allLinesBlockedByLoadOverdelivery()
    {
        return allLinesBlockedByLoadOverdelivery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReceiptPossible</Name>
				<Source><![CDATA[
    public boolean isReceiptPossible()
    {
        return suggestedOrderLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemExistsOnLoad</Name>
				<Source><![CDATA[
    public boolean itemExistsOnLoad()
    {
        return itemFoundInLoad;
    }

]]></Source>
			</Method>
			<Method>
				<Name>multipleOrdersCanBeReceived</Name>
				<Source><![CDATA[
    public boolean multipleOrdersCanBeReceived()
    {
        return multipleOrdersExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>singleOrderCanBeReceived</Name>
				<Source><![CDATA[
    public boolean singleOrderCanBeReceived()
    {
        return suggestedOrderLine.RecId != 0 && !multipleOrdersExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>multipleVariantsExistOnLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Detemines if multiple product variants exist on the load.
    /// </summary>
    /// <returns>true if multiple variants exist on the load; otherwise, false.</returns>
    [Hookable(false)]
    internal boolean multipleVariantsExistOnLoad()
    {
        return multipleInventDimsForItemExistOnLoad
                && suggestedOrderLine.inventDim().anyProductDimensionSpecified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>multipleTrackingDimensionsExistOnLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if multiple values for the tracking dimensions are specified for the product on the load.
    /// </summary>
    /// <returns>true if multiple tracking dimensions exist on the load; otherwise, false.</returns>
    [Hookable(false)]
    internal boolean multipleTrackingDimensionsExistOnLoad()
    {
        return multipleTrackingDimsForItemExistOnLoad
               && suggestedOrderLine.inventDim().canPerformItemTracing();
    }

]]></Source>
			</Method>
			<Method>
				<Name>suggestedOrderLine</Name>
				<Source><![CDATA[
    public WHSReceiptOrderLine suggestedOrderLine()
    {
        return suggestedOrderLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    public static WHSLoadItemReceivingOrderLineProvider newFromParameters(
        InventTransType _inventTransType,
        WHSLoadId       _loadId,
        ItemId          _itemId,
        InventDim       _productInventDim,
        Num             _orderId = '',
        TradeLineNumber _lineNumber = 0,
        boolean         _allowLoadOverreceipt = true)
    {
        var attribute = new InventTransTypeFactoryAttribute(_inventTransType);
        WHSLoadItemReceivingOrderLineProvider lineProvider
            = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WHSLoadItemReceivingOrderLineProvider), attribute);

        if (!lineProvider)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        lineProvider.allowLoadOverreceipt = _allowLoadOverreceipt;
        lineProvider.initialize(_loadId, _itemId, _productInventDim, _orderId, _lineNumber);

        return lineProvider;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>