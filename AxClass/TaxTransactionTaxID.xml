<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransactionTaxID</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxTransactionTaxID</c> class gets tax id.
/// </summary>
public class TaxTransactionTaxID
{
    private TaxRegistrationNumber legalEntityTaxID;
    private TaxRegistrationNumber counterPartyTaxID;
    private RefTableId headerTableId;
    private RefRecId headerRecId;
    private TransDate transDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLegalEntityTaxID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax id of legal entity.
    /// </summary>
    public TaxRegistrationNumber getLegalEntityTaxID()
    {
        if (!legalEntityTaxID && headerTableId && headerRecId)
        {
            SalesPurchJournalTable journal = this.getSalesPurchJournal();
            if (journal && journal.TaxId)
            {
                TaxRegistrationRecId taxRegistrationRecId = journal.TaxId;
                legalEntityTaxID = TaxRegistration::find(taxRegistrationRecId).RegistrationNumber;
            }
            else
            {
                legalEntityTaxID = TaxRegistration::getTaxRegNumFromJournal(headerTableId, headerRecId, transDate);
            }
        }

        return legalEntityTaxID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCounterPartyTaxID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax id of counter party.
    /// </summary>
    public TaxRegistrationNumber getCounterPartyTaxID()
    {
        if (!counterPartyTaxID && headerTableId && headerRecId)
        {
            SalesPurchJournalTable journal = this.getSalesPurchJournal();

            if (journal && journal.PartyTaxId)
            {
                counterPartyTaxID = TaxRegistration::find(journal.PartyTaxId).RegistrationNumber;
            }
            else
            {
                counterPartyTaxID = this.getCounterPartyTaxIDFromJournal();
            }
        }

        return counterPartyTaxID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesPurchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get transaction journal from SalesPurchJournalTable.
    /// </summary>
    /// <returns>
    /// Returns SalesPurchJournalTable
    /// </returns>
    private SalesPurchJournalTable getSalesPurchJournal()
    {
        SalesPurchJournalTable salesPurchJournal;

        if (SysDictField::isFieldMapped(tableStr(SalesPurchJournalTable), tableId2Name(headerTableId), fieldStr(SalesPurchJournalTable, TaxID)))
        {
            salesPurchJournal = SalesPurchJournalTable::findRecId(headerTableId, headerRecId);
        }

        return salesPurchJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCounterPartyTaxIDFromJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get counterPartyTaxID from journal table.
    /// </summary>
    /// <returns>
    /// The CounterPartyTaxID of current journal.
    /// </returns>
    private TaxRegistrationNumber getCounterPartyTaxIDFromJournal()
    {
        switch (headerTableId)
        {
            case tableNum(CustInvoiceJour):
                CustInvoiceJour custInvoiceJour = CustInvoiceJour::findRecId(headerRecId);
                counterPartyTaxID = TaxRegistration::getTAXIDRegNumFromInvoiceJour_W(custInvoiceJour);
                break;

            case tableNum(CustPackingSlipJour):
                CustPackingSlipJour custPackingSlipJour = CustPackingSlipJour::findRecId(headerRecId);
                CustTable custTable = CustTable::find(custPackingSlipJour.OrderAccount);
                counterPartyTaxID = TaxRegistration::getPrimaryRegistrationNumberByTableRef(custTable.TableId, custTable.RecId, TaxRegistrationTypesList::TAXID, transDate);
                break;

            case tableNum(VendInvoiceJour):
                VendInvoiceJour vendInvoiceJour= VendInvoiceJour::findRecId(headerRecId);
                counterPartyTaxID = vendInvoiceJour.VATNum;
                break;

            case tableNum(VendPackingSlipJour):
                VendPackingSlipJour vendPackingSlipJour = VendPackingSlipJour::findRecId(headerRecId);
                VendTable vendTable = VendTable::find(vendPackingSlipJour.OrderAccount);
                counterPartyTaxID = TaxRegistration::getPrimaryRegistrationNumberByTableRef(vendTable.TableId, vendTable.RecId, TaxRegistrationTypesList::TAXID, transDate);
                break;

            case tableNum(ProjInvoiceJour):
                ProjInvoiceJour projInvoiceJour = ProjInvoiceJour::findRecId(headerRecId);
                CustTable custTableProj = CustTable::find(projInvoiceJour.InvoiceAccount);
                counterPartyTaxID = TaxRegistration::getPrimaryRegistrationNumberByTableRef(custTableProj.TableId, custTableProj.RecId, TaxRegistrationTypesList::TAXID, transDate);
                break;

            case tableNum(CustTable):
            case tableNum(VendTable):
                counterPartyTaxID = TaxRegistration::getPrimaryRegistrationNumberByTableRef(headerTableId, headerRecId, TaxRegistrationTypesList::TAXID, transDate);
                break;
        }

        return counterPartyTaxID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxIDByVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Tax ID from <c>TaxTrans</c> by voucher, date and journal number.
    /// </summary>
    /// <param name = "_voucher">The voucher of journal transaction.</param>
    /// <param name = "_date">The transaction date of journal transaction.</param>
    /// <param name = "_journalNum">The journal number of journal transaction.</param>
    /// <returns>The Tax ID of current journal.</returns>
    /// <Remarks>
    /// This method should be called under tax integration context, which ensure all <c>TaxTrans</c> have the same Tax ID.
    /// </summary>
    internal static TaxRegistrationRecId getTaxIDByVoucher(Voucher _voucher, TransDate _date, LedgerJournalId _journalNum = '')
    {
        TaxTrans taxTrans;

        select firstonly TaxID
            from taxTrans
            where taxTrans.Voucher == _voucher
                && taxTrans.TransDate == _date
                && (_journalNum == ''
                    || taxTrans.JournalNum == _journalNum);

        return taxTrans.TaxID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new object.
    /// </summary>
    /// <param name = "_headerTableId">The table id of header table.</param>
    /// <param name = "_headerRecId">The rec id of header table.</param>
    /// <param name = "_transDate">The trans date.</param>
    public static TaxTransactionTaxID newObject(
        RefTableId _headerTableId,
        RefRecId _headerRecId,
        TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        TaxTransactionTaxID taxTransactionTaxID = TaxTransactionTaxID::construct();
        taxTransactionTaxID.init(_headerTableId, _headerRecId, _transDate);
        return taxTransactionTaxID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init(
        RefTableId _headerTableId,
        RefRecId _headerRecId,
        TransDate _transDate)
    {
        headerTableId = _headerTableId;
        headerRecId = _headerRecId;
        transDate = _transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static TaxTransactionTaxID construct()
    {
        return new TaxTransactionTaxID();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>