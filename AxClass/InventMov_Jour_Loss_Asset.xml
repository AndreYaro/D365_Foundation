<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_Jour_Loss_Asset</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   InventMov_Jour_Loss_Asset extends InventMov_Jour_LossProfit
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountOperations</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountOperations()
    {
        if (! cacheAccountOperations)
        {
            AssetTable assetTable = AssetTable::find(inventJournalTrans.AssetId);
            AssetBook assetBook = AssetBook::find(inventJournalTrans.AssetId, inventJournalTrans.AssetBookId);

            cacheAccountOperations = assetTable.assetLedgerDimension(
                                         assetBook.PostingProfile,
                                         AssetPost::assetTransTypeJournal2AssetTransType(inventJournalTrans.AssetTransType),
                                         assetBook.BookId);
        }
        return cacheAccountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetBookId</Name>
				<Source><![CDATA[
    public AssetBookId assetBookId()
    {
        return inventJournalTrans.AssetBookId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetId</Name>
				<Source><![CDATA[
    public AssetId assetId()
    {
        return inventJournalTrans.AssetId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalCheckTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>InventJournalTrans</c> transaction is valid.
    /// </summary>
    /// <returns>
    /// false if there is an error in the transaction object; otherwise, true.
    /// </returns>
    public boolean  journalCheckTrans()
    {
        return AssetPost::newInventJournalTrans(null, inventJournalTrans, null).check();
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalPostTrans</Name>
				<Source><![CDATA[
    public void journalPostTrans(
        LedgerVoucher           _ledgerVoucher,
        InventUpd_Financial     _inventUpd_Financial = null,
        CostAmount              _costAmount = 0)
    {
        ttsbegin;

        AssetBook assetbook = AssetBook::find(this.assetId(), this.assetBookId());

        if  (assetbook.AcquisitionDate)
        {
            _inventUpd_Financial.parmExchangeRateDate(_inventUpd_Financial.parmExchangeRateDate(assetBook.AcquisitionDate));
        }
        else
        {
            _inventUpd_Financial.parmExchangeRateDate(inventJournalTrans.TransDate);
        }

        LedgerVoucherObject currentVoucherObject = _ledgerVoucher.findLedgerVoucherObject();
        if (currentVoucherObject)
        {
            currentVoucherObject.parmReasonRef(inventJournalTrans.ReasonRefRecId);
            currentVoucherObject.lastTransTxt(enum2str(inventJournalTrans.AssetTransType));
        }

        super(_ledgerVoucher, _inventUpd_Financial, _costAmount);

        AssetPost::newInventJournalTrans(_ledgerVoucher,inventJournalTrans,_inventUpd_Financial).post();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalSetItemId</Name>
				<Source><![CDATA[
    public boolean journalSetItemId(InventDim _inventDim)
    {
        boolean     ok          = super(_inventDim);

        AssetTable assetTable = AssetTable::find(inventJournalTrans.AssetId);

        inventJournalTrans.DefaultDimension = inventJournalTrans.mergeDimension(
            assetTable.defaultDimension(inventJournalTrans.AssetBookId),
            inventTable.DefaultDimension);

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    public InventMovement newMovement_Orig()
    {
        if (!inventJournalTrans.RecId)
        {
            return null;
        }
        return new InventMov_Jour_Loss_Asset(inventJournalTrans.orig(),inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOperations</Name>
				<Source><![CDATA[
    public LedgerPostingType postingOperations()
    {
        return LedgerPostingType::FixedAssetsDebit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnInventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Identifies the original transactions.
    /// </summary>
    /// <returns>
    ///    The ID of the original transaction originator, if there is an originator; otherwise, zero.
    /// </returns>
    public InventTransOriginId returnInventTransOrigin()
    {
        if (!inventJournalTrans.InventTransIdReturn)
        {
            return 0;
        }

        if (!this.isReturned(this.transSign() * inventJournalTrans.Qty))
        {
            return 0;
        }

        return InventTransOrigin::findByInventTransId(inventJournalTrans.InventTransIdReturn).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transSign</Name>
				<Source><![CDATA[
    public Integer transSign()
    {
        if (inventJournalTrans.Qty >= 0)
        {
            return  -1;
        }
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    InventTransType transType()
    {
        return InventTransType::Asset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>InventMov_Jour_Loss_Asset</c> class based on the specified record.
    /// </summary>
    /// <param name="_inventJournalTrans">
    ///    The record in the <c>InventJournalTrans</c> table for which the class is instantiated.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventMov_Jour_Loss_Asset</c> class.
    /// </returns>
    public static InventMov_Jour_Loss_Asset newFromInventJournalTrans(InventJournalTrans _inventJournalTrans)
    {
        return new InventMov_Jour_Loss_Asset(_inventJournalTrans);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
