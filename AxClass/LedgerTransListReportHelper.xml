<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransListReportHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerTransListReportHelper</c> class is used to support the <c>LedgerTransListAccountDP</c> class and <c>LedgerTransListDateDP</c> class.
/// </summary>
public class LedgerTransListReportHelper
{
    UserConnection userConnection;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the data for the <c>LedgerTransListAccount</c> report and the <c>LedgerTransListDate</c> report.
    /// </summary>
    /// <param name="_reportTmpTable">
    /// The <c>LedgerTransactionListTmp</c> table that the processed records will be inserted into.
    /// </param>
    /// <param name="_query">
    /// A <c>Query</c> object that contains the optional ranges provided by the user.
    /// </param>
    /// <param name="_fromDate">
    /// The starting date for the report.
    /// </param>
    /// <param name="_toDate">
    /// The ending date for the report.
    /// </param>
    /// <param name="_includeReversed">
    /// A boolean value that indicates whether to include reversed ledger transactions.
    /// </param>
    /// <param name="_includeTaxTransactions">
    /// A boolean value that indicates whether to include tax transactions.
    /// </param>
    /// <param name="_sortByAccount">
    /// True if the report is sorted by account; otherwise, false if it is sorted by date.
    /// </param>
    /// <param name="_includeIntercompanyTaxes">
    /// A boolean value that indicates whether to include intercompany tax transactions; optional.
    /// </param>
    /// <param name="_summaryOnly">
    /// A boolean value that indicates whether to summarize the records; optional. Only used with _sortByAccount.
    /// </param>
    public void createReportData(
        LedgerTransactionListTmp _reportTmpTable,
        Query _query,
        TransDate _fromDate,
        TransDate _toDate,
        Reversed _includeReversed,
        TaxSpecification _includeTaxTransactions,
        boolean _sortByAccount,
        boolean _includeIntercompanyTaxes = false,
        boolean _summaryOnly = false)
    {
        QueryRun queryRun;
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        MainAccountLedgerDimensionView mainAccountLedgerDimensionView;
        MainAccountTranslation mainAccountTranslation;
        TransactionReversalTrans transactionReversalTrans;
        LedgerTransactionListStagingTmp processingStagingTable;
        LedgerTransactionListStagingTmp finalStagingTable;
        LedgerTransactionListTaxTmp taxTmp;
        LedgerTransactionListStagingTmp processingIcTaxJournalStagingTable;
        LanguageId currentLanguage = DimensionCache::currentDimensionValueLanguageId();
        Ledger ledger;
        CompanyInfo companyInfo;
        TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntryForTax, taxTransGeneralJournalAccountEntryForVoucher;
        TaxTrans taxTrans;

        try
        {

            // Set the user connection to use on tables.
            // This is needed because the createdTransactionId is different for the report than the default connection.
            processingStagingTable.setConnection(userConnection);
            finalStagingTable.setConnection(userConnection);
            taxTmp.setConnection(userConnection);
            processingIcTaxJournalStagingTable.setConnection(userConnection);
            processingIcTaxJournalStagingTable.linkPhysicalTableInstance(processingStagingTable);

            boolean showAcknowledgementDate = LedgerParameters::find().AcknowledgementDate_IT;

            QueryBuildDataSource dsGJE = _query.dataSourceTable(tableNum(GeneralJournalEntry));
            GeneralJournalEntry::addSecureRangeForLedger(dsGJE);

            // Set the range value for the date range.
            QueryBuildRange range = SysQuery::findOrCreateRange(dsGJE, fieldNum(GeneralJournalEntry, AccountingDate));
            range.value(SysQuery::range(_fromDate, _toDate));

            Map insertRecordsetMap = new Map(Types::String, Types::Container);

            this.buildFieldMap(_query, insertRecordsetMap);

            Query::insert_recordset(processingStagingTable, insertRecordsetMap, _query);

            // Add values that can't be inserted with the Query::insert_recordset since they aren't sourced from a table.
            update_recordset processingStagingTable setting Visibility = showAcknowledgementDate;

            // Include revenue/expense posting entry(s) associated with intercompany tax postings when user wants to view
            // complete revenue/expense details from the destination company on the report.
            // Ignore entries from the same company as they will already be included.
            if (_includeIntercompanyTaxes)
            {
                insert_recordset processingIcTaxJournalStagingTable
                (
                    Visibility,
                    GeneralJournalAccountEntry,
                    GeneralJournalEntry,
                    PostingType,
                    Txt,
                    CurrencyCode,
                    TransactionCurrencyAmountDebit,
                    AccountingCurrencyAmountDebit,
                    ReportingCurrencyAmountDebit,
                    IsCredit,
                    TransDate,
                    JournalNumber,
                    Voucher,
                    AcknowledgementDate,
                    AccountNum,
                    AccountName,
                    Dimension,
                    MainAccount,
                    GeneralJournalEntryDataArea)
                select Visibility from processingStagingTable
                    where processingStagingTable.PostingType == LedgerPostingType::Tax
                join taxTransGeneralJournalAccountEntryForTax
                    where taxTransGeneralJournalAccountEntryForTax.GeneralJournalAccountEntry == processingStagingTable.GeneralJournalAccountEntry &&
                        taxTransGeneralJournalAccountEntryForTax.TaxTransRelationship == TaxTransRelationshipType::Tax
                join taxTrans
                    where taxTrans.RecId == taxTransGeneralJournalAccountEntryForTax.TaxTrans &&
                        taxTrans.TaxObligationCompany == TaxObligationCompany::Source
                join taxTransGeneralJournalAccountEntryForVoucher
                    where taxTransGeneralJournalAccountEntryForVoucher.TaxTrans == taxTrans.RecId &&
                        (taxTransGeneralJournalAccountEntryForVoucher.TaxTransRelationship == TaxTransRelationshipType::TransactionLineAccount ||
                        taxTransGeneralJournalAccountEntryForVoucher.TaxTransRelationship == TaxTransRelationshipType::CashDiscount)
                join RecId, GeneralJournalEntry, PostingType, Text, TransactionCurrencyCode, TransactionCurrencyAmount,
                    AccountingCurrencyAmount, ReportingCurrencyAmount, IsCredit from generalJournalAccountEntry
                        where generalJournalAccountEntry.RecId == taxTransGeneralJournalAccountEntryForVoucher.GeneralJournalAccountEntry
                join AccountingDate, JournalNumber, SubledgerVoucher, AcknowledgementDate from generalJournalEntry
                    where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                join MainAccount, Name, FullyQualifiedAccount, MainAccountRecId from mainAccountLedgerDimensionView
                    where generalJournalAccountEntry.LedgerDimension == mainAccountLedgerDimensionView.LedgerDimensionId
                join ledger
                    where ledger.RecId == generalJournalEntry.Ledger
                join DataArea from companyInfo
                    where companyInfo.RecId == ledger.PrimaryForLegalEntity &&
                        companyInfo.DataArea != taxTrans.dataAreaId;
            }

            //Because the insert only populates the debit column, we need to move those values to the credit column for credit transactions.
            update_recordSet processingStagingTable setting
                TransactionCurrencyAmountCredit = processingStagingTable.TransactionCurrencyAmountDebit * -1,
                AccountingCurrencyAmountCredit = processingStagingTable.AccountingCurrencyAmountDebit * -1,
                ReportingCurrencyAmountCredit = processingStagingTable.ReportingCurrencyAmountDebit * -1,
                TransactionCurrencyAmountDebit = 0,
                AccountingCurrencyAmountDebit = 0,
                ReportingCurrencyAmountDebit = 0
            where processingStagingTable.IsCredit == NoYes::Yes;

            if (_includeReversed)
            {
                update_recordSet processingStagingTable
                    setting Reversed = "@SYS321480"
                exists join transactionReversalTrans
                    where transactionReversalTrans.RefTableId == tableNum(GeneralJournalAccountEntry)
                        && processingStagingTable.GeneralJournalAccountEntry == transactionReversalTrans.RefRecId
                        && transactionReversalTrans.Reversed == NoYes::Yes;
            }
            else
            {
                delete_from processingStagingTable
                    exists join transactionReversalTrans
                        where transactionReversalTrans.RefTableId == tableNum(GeneralJournalAccountEntry)
                            && processingStagingTable.GeneralJournalAccountEntry == transactionReversalTrans.RefRecId
                            && transactionReversalTrans.Reversed == NoYes::Yes;
            }

            if (currentLanguage != '')
            {
                update_recordSet processingStagingTable
                    setting AccountName = mainAccountTranslation.Name
                join Name from mainAccountTranslation
                    where processingStagingTable.MainAccount == mainAccountTranslation.MainAccount
                        && mainAccountTranslation.LanguageId == currentLanguage;
            }

            update_recordSet processingStagingTable
                setting TraceNum = transactionReversalTrans.TraceNum
            join TraceNum from transactionReversalTrans
                where transactionReversalTrans.RefTableId == tableNum(GeneralJournalAccountEntry)
                    && processingStagingTable.GeneralJournalAccountEntry == transactionReversalTrans.RefRecId;

            if (_includeTaxTransactions)
            {
                this.processTaxSpecification(processingStagingTable, taxTmp, _includeIntercompanyTaxes);

                this.mergeTaxes(processingStagingTable, taxTmp, finalStagingTable);
            }
            else
            {
                // When taxes aren't processed, the transfer to finalStagingTable does not occur. Rather than insert the records
                // into finalStagingTable, link the tables together so they have the same backing tempdb table.
                finalStagingTable.linkPhysicalTableInstance(processingStagingTable);
            }

            // Update for summarized vouchers
            update_recordSet finalStagingTable
            setting Voucher = "@SYS342661"
                where finalStagingTable.Voucher == '';

            if (_sortByAccount)
            {
                if (_summaryOnly)
                {
                    this.performFinalCopyAccountSummaryReport(_reportTmpTable, finalStagingTable);
                }
                else
                {
                    this.performFinalCopyAccountReport(_reportTmpTable, finalStagingTable);
                }
            }
            else
            {
                this.performFinalCopyDateReport(_reportTmpTable, finalStagingTable);
            }
        }
        finally
        {
            if (FeatureStateProvider::isFeatureEnabled(LedgerSSRSReportDisposeTempTableFlight::instance()))
            {
                processingStagingTable.dispose();
                finalStagingTable.dispose();
                taxTmp.dispose();
                processingIcTaxJournalStagingTable.dispose();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeTaxes</Name>
				<Source><![CDATA[
    private void mergeTaxes(LedgerTransactionListStagingTmp _processingStagingTable, LedgerTransactionListTaxTmp _taxTmp, LedgerTransactionListStagingTmp _finalStagingTable)
    {
        str taxInsertSql;
        TableName finalStagingTableName;
        TableName taxTmpName;
        TableName processingStagingTableName;
        Integer defaultRowNum = 1;
        Statement statement;
        SqlStatementExecutePermission perm;

        // The Tempdb table isn't created until either a record is inserted or this select call is made, and therefore doesn't have a physical table name.
        // Because we aren't 100% sure an insert has occurred, execute a select call to ensure a physical table exists.
        select firstOnly RecId from _finalStagingTable;
        finalStagingTableName = _finalStagingTable.getPhysicalTableName();

        select firstOnly RecId from _taxTmp;
        taxTmpName = _taxTmp.getPhysicalTableName();

        select firstOnly RecId from _processingStagingTable;
        processingStagingTableName = _processingStagingTable.getPhysicalTableName();

        // Insert processing table joined with tax records
        // Using direct SQL here so that the ROW_NUMBER function of SQL can be utilized
        // The resulting SQL will be in the form of
        //      INSERT INTO tempdb..finalStagingTableName (AccountingCurrencyAmountCredit, ..., GroupRowNum)
        //      SELECT AccountingCurrencyAmountCredit, ..., ROW_NUMBER() OVER (PARTITION BY staging.GeneralJournalAccountEntry ORDER BY tax.TaxCode)
        //      FROM tempdb..processingStagingTableName staging JOIN tempdb..taxTmpName tax ON tax.LedgerTransactionListStagingTmp = staging.RecId
        taxInsertSql = strFmt('INSERT INTO %1 ', finalStagingTableName);
        taxInsertSql += '(ACCOUNTINGCURRENCYAMOUNTCREDIT, ';
        taxInsertSql += 'ACCOUNTINGCURRENCYAMOUNTDEBIT, ';
        taxInsertSql += 'ACCOUNTNAME, ';
        taxInsertSql += 'ACCOUNTNUM, ';
        taxInsertSql += 'ACKNOWLEDGEMENTDATE, ';
        taxInsertSql += 'CURRENCYCODE, ';
        taxInsertSql += 'DIMENSION, ';
        taxInsertSql += 'GENERALJOURNALACCOUNTENTRY, ';
        taxInsertSql += 'GENERALJOURNALENTRY, ';
        taxInsertSql += 'GENERALJOURNALENTRYDATAAREA, ';
        taxInsertSql += 'JOURNALNUMBER, ';
        taxInsertSql += 'POSTINGTYPE, ';
        taxInsertSql += 'REPORTINGCURRENCYAMOUNTCREDIT, ';
        taxInsertSql += 'REPORTINGCURRENCYAMOUNTDEBIT, ';
        taxInsertSql += 'REVERSED, ';
        taxInsertSql += 'TRACENUM, ';
        taxInsertSql += 'TRANSACTIONCURRENCYAMOUNTCREDIT, ';
        taxInsertSql += 'TRANSACTIONCURRENCYAMOUNTDEBIT, ';
        taxInsertSql += 'TRANSDATE, ';
        taxInsertSql += 'TXT, ';
        taxInsertSql += 'VISIBILITY, ';
        taxInsertSql += 'VOUCHER, ';
        taxInsertSql += 'TAXCODE, ';
        taxInsertSql += 'TAXAMOUNTMST, ';
        taxInsertSql += 'PARTITION, ';
        taxInsertSql += 'GROUPROWNUM) ';
        taxInsertSql += 'SELECT ';
        taxInsertSql += 'STAGING.ACCOUNTINGCURRENCYAMOUNTCREDIT, ';
        taxInsertSql += 'STAGING.ACCOUNTINGCURRENCYAMOUNTDEBIT, ';
        taxInsertSql += 'STAGING.ACCOUNTNAME, ';
        taxInsertSql += 'STAGING.ACCOUNTNUM, ';
        taxInsertSql += 'STAGING.ACKNOWLEDGEMENTDATE, ';
        taxInsertSql += 'STAGING.CURRENCYCODE, ';
        taxInsertSql += 'STAGING.DIMENSION, ';
        taxInsertSql += 'STAGING.GENERALJOURNALACCOUNTENTRY, ';
        taxInsertSql += 'STAGING.GENERALJOURNALENTRY, ';
        taxInsertSql += 'TAX.GENERALJOURNALENTRYDATAAREA, ';
        taxInsertSql += 'STAGING.JOURNALNUMBER, ';
        taxInsertSql += 'STAGING.POSTINGTYPE, ';
        taxInsertSql += 'STAGING.REPORTINGCURRENCYAMOUNTCREDIT, ';
        taxInsertSql += 'STAGING.REPORTINGCURRENCYAMOUNTDEBIT, ';
        taxInsertSql += 'STAGING.REVERSED, ';
        taxInsertSql += 'STAGING.TRACENUM, ';
        taxInsertSql += 'STAGING.TRANSACTIONCURRENCYAMOUNTCREDIT, ';
        taxInsertSql += 'STAGING.TRANSACTIONCURRENCYAMOUNTDEBIT, ';
        taxInsertSql += 'STAGING.TRANSDATE, ';
        taxInsertSql += 'STAGING.TXT, ';
        taxInsertSql += 'STAGING.VISIBILITY, ';
        taxInsertSql += 'STAGING.VOUCHER, ';
        taxInsertSql += 'TAX.TAXCODE, ';
        taxInsertSql += 'TAX.TAXAMOUNTMST, ';
        taxInsertSql += strFmt('%1, ', getcurrentpartitionrecid());
        taxInsertSql += 'ROW_NUMBER() OVER (PARTITION BY STAGING.GENERALJOURNALACCOUNTENTRY ORDER BY TAX.TAXCODE) ';
        taxInsertSql += strFmt('FROM %1 STAGING ', processingStagingTableName);
        taxInsertSql += strFmt('JOIN %1 TAX ', taxTmpName);
        taxInsertSql += 'ON TAX.LEDGERTRANSACTIONLISTSTAGINGTMP = STAGING.RECID';

        // convert the sql query string to uppercase to alleviate issue with Danish_Norwegian_CI_AS SQL collation
        taxInsertSql = strUpr(taxInsertSql);

        try
        {
            perm = new SqlStatementExecutePermission(taxInsertSql);
            perm.assert();

            statement = userConnection.createStatement();
            statement.executeUpdateWithParameters(taxInsertSql, SqlParams::create());

            CodeAccessPermission::revertAssert(); // Note: We've not been informed failure to run this will cause any leaks so for now it can be kept in the try
        }
        finally
        {
            if (statement)
            {
                statement.close();
            }
        }

        // Insert processing table records that don't have a tax record
        insert_recordset _finalStagingTable
        (
            AccountingCurrencyAmountCredit,
            AccountingCurrencyAmountDebit,
            AccountName,
            AccountNum,
            AcknowledgementDate,
            CurrencyCode,
            Dimension,
            GeneralJournalAccountEntry,
            GeneralJournalEntry,
            GeneralJournalEntryDataArea,
            JournalNumber,
            PostingType,
            ReportingCurrencyAmountCredit,
            ReportingCurrencyAmountDebit,
            Reversed,
            TraceNum,
            TransactionCurrencyAmountCredit,
            TransactionCurrencyAmountDebit,
            TransDate,
            Txt,
            Visibility,
            Voucher,
            GroupRowNum
        )
        select
            AccountingCurrencyAmountCredit,
            AccountingCurrencyAmountDebit,
            AccountName,
            AccountNum,
            AcknowledgementDate,
            CurrencyCode,
            Dimension,
            GeneralJournalAccountEntry,
            GeneralJournalEntry,
            GeneralJournalEntryDataArea,
            JournalNumber,
            PostingType,
            ReportingCurrencyAmountCredit,
            ReportingCurrencyAmountDebit,
            Reversed,
            TraceNum,
            TransactionCurrencyAmountCredit,
            TransactionCurrencyAmountDebit,
            TransDate,
            Txt,
            Visibility,
            Voucher,
            defaultRowNum from _processingStagingTable
        notExists join _taxTmp
                where _processingStagingTable.RecId == _taxTmp.LedgerTransactionListStagingTmp;

        // When more than one tax record exists, clear out the values for row 2+ so they aren't included
        // in the report subtotals and so they don't appear on the report, so that the records group better.
        update_recordSet _finalStagingTable setting
            Txt = '',
            CurrencyCode = '',
            TraceNum = '',
            Reversed = '',
            AccountName = '',
            AccountingCurrencyAmountCredit = 0,
            AccountingCurrencyAmountDebit = 0,
            ReportingCurrencyAmountCredit = 0,
            ReportingCurrencyAmountDebit = 0,
            TransactionCurrencyAmountCredit = 0,
            TransactionCurrencyAmountDebit = 0
                where _finalStagingTable.GroupRowNum > 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserConnection</Name>
				<Source><![CDATA[
    public UserConnection parmUserConnection(UserConnection _userConnection = userConnection)
    {
        userConnection = _userConnection;
        return userConnection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performFinalCopyAccountSummaryReport</Name>
				<Source><![CDATA[
    private void performFinalCopyAccountSummaryReport(LedgerTransactionListTmp _reportTmpTable, LedgerTransactionListStagingTmp _finalStagingTable)
    {
        insert_recordset _reportTmpTable
        (
            AccountNum,
            AccountName,
            AccountingCurrencyAmountDebit,
            AccountingCurrencyAmountCredit,
            ReportingCurrencyAmountDebit,
            ReportingCurrencyAmountCredit
        )
        select
            AccountNum,
            AccountName,
            sum(AccountingCurrencyAmountDebit),
            sum(AccountingCurrencyAmountCredit),
            sum(ReportingCurrencyAmountDebit),
            sum(ReportingCurrencyAmountCredit)
        from _finalStagingTable
        group by AccountNum, AccountName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performFinalCopyAccountReport</Name>
				<Source><![CDATA[
    private void performFinalCopyAccountReport(LedgerTransactionListTmp _reportTmpTable, LedgerTransactionListStagingTmp _finalStagingTable)
    {
        LedgerTransListReportPerformFinalCopyAccountReport::insert(_reportTmpTable, _finalStagingTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>performFinalCopyDateReport</Name>
				<Source><![CDATA[
    private void performFinalCopyDateReport(LedgerTransactionListTmp _reportTmpTable, LedgerTransactionListStagingTmp _finalStagingTable)
    {
        insert_recordset _reportTmpTable
        (
            AccountingCurrencyAmountCredit,
            AccountingCurrencyAmountDebit,
            AccountName,
            AccountNum,
            AcknowledgementDate,
            CurrencyCode,
            Dimension,
            GeneralJournalAccountEntry,
            GeneralJournalEntry,
            GeneralJournalEntryDataArea,
            JournalNumber,
            PostingType,
            ReportingCurrencyAmountCredit,
            ReportingCurrencyAmountDebit,
            Reversed,
            TraceNum,
            TransactionCurrencyAmountCredit,
            TransactionCurrencyAmountDebit,
            TransDate,
            Txt,
            Visibility,
            Voucher,
            TaxCode,
            TaxAmountMST
        )
        select
            AccountingCurrencyAmountCredit,
            AccountingCurrencyAmountDebit,
            AccountName,
            AccountNum,
            AcknowledgementDate,
            CurrencyCode,
            Dimension,
            GeneralJournalAccountEntry,
            GeneralJournalEntry,
            GeneralJournalEntryDataArea,
            JournalNumber,
            PostingType,
            ReportingCurrencyAmountCredit,
            ReportingCurrencyAmountDebit,
            Reversed,
            TraceNum,
            TransactionCurrencyAmountCredit,
            TransactionCurrencyAmountDebit,
            TransDate,
            Txt,
            Visibility,
            Voucher,
            TaxCode,
            TaxAmountMST from _finalStagingTable
                order by TransDate, GeneralJournalEntryDataArea, JournalNumber, Voucher, Dimension, TaxCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTaxSpecification</Name>
				<Source><![CDATA[
    private void processTaxSpecification(
            LedgerTransactionListStagingTmp _stagingTmp,
            LedgerTransactionListTaxTmp _taxTmp,
            boolean _includeIntercompanyTaxVoucher = false)
    {
        LedgerTransactionListStagingTmp existingTransactions;
        TaxTrans taxTrans;
        MainAccount mainAccount;
        TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntry;

        existingTransactions.setConnection(userConnection);

        existingTransactions.linkPhysicalTableInstance(_stagingTmp);

        // Process penny difference transactions, which do not have corresponding records in TaxTransGeneralJournalAccountEntry
        insert_recordset _taxTmp
        (
            LedgerTransactionListStagingTmp,
            GeneralJournalEntryDataArea,
            TaxCode,
            TaxAmountMST
        )
        select RecId, GeneralJournalEntryDataArea
            from _stagingTmp
                group by _stagingTmp.RecId, _stagingTmp.GeneralJournalEntryDataArea, taxTrans.TaxCode
                    where (_stagingTmp.PostingType == LedgerPostingType::CustBalance
                            || _stagingTmp.PostingType == LedgerPostingType::IntercompanyRevenue)
            join mainAccount
                    where _stagingTmp.MainAccount == mainAccount.RecId
                        && (mainAccount.Type == DimensionLedgerAccountType::ProfitAndLoss
                            || mainAccount.Type == DimensionLedgerAccountType::Revenue
                            || mainAccount.Type == DimensionLedgerAccountType::Expense
                            || mainAccount.Type == DimensionLedgerAccountType::Asset)
            join TaxCode, sum(TaxAmount)
                from taxTrans
                    where _stagingTmp.TransDate == taxTrans.TransDate
                        && _stagingTmp.Voucher == taxTrans.Voucher;

        update_recordset _stagingtmp
            setting processed = noyes::yes
            join ledgertransactionliststagingtmp from _taxtmp
                where _stagingtmp.recid == _taxtmp.ledgertransactionliststagingtmp;

        // Process the rest of the journal transactions.
        insert_recordset _taxTmp
        (
            LedgerTransactionListStagingTmp,
            GeneralJournalEntryDataArea,
            TaxCode,
            TaxAmountMST
        )
        select RecId, GeneralJournalEntryDataArea
        from _stagingTmp
            group by _stagingTmp.RecId, _stagingTmp.GeneralJournalEntryDataArea, taxTrans.TaxCode
            where _stagingTmp.Processed == NoYes::No
        join TaxCode, sum(TaxAmount)
            from taxTrans
        exists join taxTransGeneralJournalAccountEntry
            where _stagingTmp.GeneralJournalAccountEntry == taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry
                && (taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::TransactionLineAccount
                    || taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::CashDiscount
                    || taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::Tax)
                && taxTrans.RecId == taxTransGeneralJournalAccountEntry.TaxTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFieldMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes field mapping to do a set-based insert from source (query) to destination (table) buffer.
    /// </summary>
    /// <param name = "_reportQuery">
    /// The <c>Query</c> query used for initialization.
    /// </param>
    /// <param name = "_fieldMap">
    /// The <c>Map</c> map contains mapping between source (query) to destination (table) buffer.
    /// </param>
    [Wrappable(true)]
    final protected void buildFieldMap(Query _reportQuery, Map _fieldMap)
    {
        QueryBuildDataSource companyInfoDS = _reportQuery.dataSourceTable(tableNum(CompanyInfo));
        QueryBuildDataSource gjeDS = _reportQuery.dataSourceTable(tableNum(GeneralJournalEntry));
        QueryBuildDataSource gjaeDS = _reportQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry));
        QueryBuildDataSource maldvDS = _reportQuery.dataSourceTable(tableNum(MainAccountLedgerDimensionView));

        if (!companyInfoDS || !gjeDS || !gjaeDS || !maldvDS)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        _reportQuery.clearAllFields();

        // General journal entry fields
        int gjeUniqueId = gjeDS.uniqueId();
        QueryBuildFieldList gjeFL = gjeDS.fields();

        gjeFL.addField(fieldNum(GeneralJournalEntry, RecId));
        _fieldMap.insert(fieldStr(LedgerTransactionListStagingTmp, GeneralJournalEntry), [gjeUniqueId, fieldStr(GeneralJournalEntry, RecId)]);

        gjeFL.addField(fieldNum(GeneralJournalEntry, AccountingDate));
        _fieldMap.insert(fieldStr(LedgerTransactionListStagingTmp, TransDate), [gjeUniqueId, fieldStr(GeneralJournalEntry, AccountingDate)]);

        gjeFL.addField(fieldNum(GeneralJournalEntry, JournalNumber));
        _fieldMap.insert(fieldStr(LedgerTransactionListStagingTmp, JournalNumber), [gjeUniqueId, fieldStr(GeneralJournalEntry, JournalNumber)]);

        gjeFL.addField(fieldNum(GeneralJournalEntry, SubledgerVoucher));
        _fieldMap.insert(fieldStr(LedgerTransactionListStagingTmp, Voucher), [gjeUniqueId, fieldStr(GeneralJournalEntry, SubledgerVoucher)]);

        gjeFL.addField(fieldNum(GeneralJournalEntry, AcknowledgementDate));
        _fieldMap.insert(fieldStr(LedgerTransactionListStagingTmp, AcknowledgementDate), [gjeUniqueId, fieldStr(GeneralJournalEntry, AcknowledgementDate)]);

        // General journal account entry fields
        int gjaeUniqueId = gjaeDS.uniqueId();
        QueryBuildFieldList gjaeFL = gjaeDS.fields();

        gjaeFL.addField(fieldNum(GeneralJournalAccountEntry, RecId));
        _fieldMap.insert(fieldStr(LedgerTransactionListStagingTmp, GeneralJournalAccountEntry), [gjaeUniqueId, fieldStr(GeneralJournalAccountEntry, RecId)]);

        gjaeFL.addField(fieldNum(GeneralJournalAccountEntry, Text));
        _fieldMap.insert(fieldStr(LedgerTransactionListStagingTmp, Txt), [gjaeUniqueId, fieldStr(GeneralJournalAccountEntry, Text)]);

        gjaeFL.addField(fieldNum(GeneralJournalAccountEntry, TransactionCurrencyCode));
        _fieldMap.insert(fieldStr(LedgerTransactionListStagingTmp, CurrencyCode), [gjaeUniqueId, fieldStr(GeneralJournalAccountEntry, TransactionCurrencyCode)]);

        gjaeFL.addField(fieldNum(GeneralJournalAccountEntry, PostingType));
        _fieldMap.insert(fieldStr(LedgerTransactionListStagingTmp, PostingType), [gjaeUniqueId, fieldStr(GeneralJournalAccountEntry, PostingType)]);

        gjaeFL.addField(fieldNum(GeneralJournalAccountEntry, IsCredit));
        _fieldMap.insert(fieldStr(LedgerTransactionListStagingTmp, IsCredit), [gjaeUniqueId, fieldStr(GeneralJournalAccountEntry, IsCredit)]);

        // Put all amounts in the debit column at first, then move them to the credit column later.
        gjaeFL.addField(fieldNum(GeneralJournalAccountEntry, TransactionCurrencyAmount));
        _fieldMap.insert(fieldStr(LedgerTransactionListStagingTmp, TransactionCurrencyAmountDebit), [gjaeUniqueId, fieldStr(GeneralJournalAccountEntry, TransactionCurrencyAMount)]);

        gjaeFL.addField(fieldNum(GeneralJournalAccountEntry, AccountingCurrencyAmount));
        _fieldMap.insert(fieldStr(LedgerTransactionListStagingTmp, AccountingCurrencyAmountDebit), [gjaeUniqueId, fieldStr(GeneralJournalAccountEntry, AccountingCurrencyAmount)]);

        gjaeFL.addField(fieldNum(GeneralJournalAccountEntry, ReportingCurrencyAmount));
        _fieldMap.insert(fieldStr(LedgerTransactionListStagingTmp, ReportingCurrencyAmountDebit), [gjaeUniqueId, fieldStr(GeneralJournalAccountEntry, ReportingCurrencyAmount)]);

        // Main account fields
        int maldvUniqueId = maldvDS.uniqueId();
        QueryBuildFieldList maldvFL = maldvDS.fields();

        maldvFL.addField(fieldNum(MainAccountLedgerDimensionView, MainAccount));
        _fieldMap.insert(fieldStr(LedgerTransactionListStagingTmp, AccountNum), [maldvUniqueId, fieldStr(MainAccountLedgerDimensionView, MainAccount)]);

        maldvFL.addField(fieldNum(MainAccountLedgerDimensionView, Name));
        _fieldMap.insert(fieldStr(LedgerTransactionListStagingTmp, AccountName), [maldvUniqueId, fieldStr(MainAccountLedgerDimensionView, Name)]);

        maldvFL.addField(fieldNum(MainAccountLedgerDimensionView, FullyQualifiedAccount));
        _fieldMap.insert(fieldStr(LedgerTransactionListStagingTmp, Dimension), [maldvUniqueId, fieldStr(MainAccountLedgerDimensionView, FullyQualifiedAccount)]);

        maldvFL.addField(fieldNum(MainAccountLedgerDimensionView, MainAccountRecId));
        _fieldMap.insert(fieldStr(LedgerTransactionListStagingTmp, MainAccount), [maldvUniqueId, fieldStr(MainAccountLedgerDimensionView, MainAccountRecId)]);

        // Company info fields
        companyInfoDS.fields().addField(fieldNum(CompanyInfo, DataArea));
        _fieldMap.insert(fieldStr(LedgerTransactionListStagingTmp, GeneralJournalEntryDataArea), [companyInfoDS.uniqueId(), fieldStr(CompanyInfo, DataArea)]);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>