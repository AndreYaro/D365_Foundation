<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostClosingInstrumentationTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>InventCostClosingLogInstrumentation</c> logs instrumentation for inventory closing.
/// </summary>
public class InventCostClosingInstrumentationTask
{
    private InventClosing inventClosing;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>logMeasures</Name>
				<Source><![CDATA[
    private void logMeasures(InventClosing _inventClosing)
    {
        CostManagementInstrumentationLogger instrumentationLogger = CostManagementInstrumentationLogger::createLogger(classStr(InventCostClosingInstrumentationTask));
        using (var resumeActivityContext = instrumentationLogger.inventoryClosingActivities().logGlobalMeasures(inventClosing))
        {
            InventCostBundleList    inventCostBundleList;
            select sum(LoadCount), sum(LoadTime),
                   sum(LoadTransferOrderCount), sum(LoadTransferOrderTime),
                   sum(PreCloseNonFinancialCount), sum(PreCloseNonFinancialTime),
                   sum(PreCloseTransferOrderCount), sum(PreCloseTransferOrderTime),
                   sum(UpdateLevelAdjustmentCount), sum(UpdateLevelAdjustmentTime),
                   sum(UpdateMarkingCount), sum(UpdateMarkingTime),
                   sum(UpdateModelCount), sum(UpdateModelTime),
                   sum(UpdateReceiptAdjustmentCount), sum(UpdateReceiptAdjustmentTime),
                   sum(UpdateReturnAdjustmentsCount), sum(UpdateReturnAdjustmentsTime),
                   sum(OpenInventTransCount), sum(ClosedInventTransCount),
                   maxof(Level)
            from inventCostBundleList
                where inventCostBundleList.InventClosing == inventClosing.RecId;

            Set instrumentationPropertyCollection = new Set(Types::Class);
            var loggerProperties = instrumentationLogger.properties();

            instrumentationPropertyCollection.add(loggerProperties.addCount(fieldStr(InventCostBundleList, OpenInventTransCount), inventCostBundleList.OpenInventTransCount));
            instrumentationPropertyCollection.add(loggerProperties.addCount(fieldStr(InventCostBundleList, ClosedInventTransCount), inventCostBundleList.ClosedInventTransCount));

            instrumentationPropertyCollection.add(loggerProperties.addCount(fieldStr(InventCostBundleList, LoadCount), inventCostBundleList.LoadCount));
            instrumentationPropertyCollection.add(loggerProperties.addSubDuration(fieldStr(InventCostBundleList, LoadTime), inventCostBundleList.LoadTime));

            instrumentationPropertyCollection.add(loggerProperties.addCount(fieldStr(InventCostBundleList, LoadTransferOrderCount), inventCostBundleList.LoadTransferOrderCount));
            instrumentationPropertyCollection.add(loggerProperties.addSubDuration(fieldStr(InventCostBundleList, LoadTransferOrderTime), inventCostBundleList.LoadTransferOrderTime));

            instrumentationPropertyCollection.add(loggerProperties.addCount(fieldStr(InventCostBundleList, PreCloseNonFinancialCount), inventCostBundleList.PreCloseNonFinancialCount));
            instrumentationPropertyCollection.add(loggerProperties.addSubDuration(fieldStr(InventCostBundleList, PreCloseNonFinancialTime), inventCostBundleList.PreCloseNonFinancialTime));

            instrumentationPropertyCollection.add(loggerProperties.addCount(fieldStr(InventCostBundleList, PreCloseTransferOrderCount), inventCostBundleList.PreCloseTransferOrderCount));
            instrumentationPropertyCollection.add(loggerProperties.addSubDuration(fieldStr(InventCostBundleList, PreCloseTransferOrderTime), inventCostBundleList.PreCloseTransferOrderTime));

            instrumentationPropertyCollection.add(loggerProperties.addCount(fieldStr(InventCostBundleList, UpdateLevelAdjustmentCount), inventCostBundleList.UpdateLevelAdjustmentCount));
            instrumentationPropertyCollection.add(loggerProperties.addSubDuration(fieldStr(InventCostBundleList, UpdateLevelAdjustmentTime), inventCostBundleList.UpdateLevelAdjustmentTime));

            instrumentationPropertyCollection.add(loggerProperties.addCount(fieldStr(InventCostBundleList, UpdateMarkingCount), inventCostBundleList.UpdateMarkingCount));
            instrumentationPropertyCollection.add(loggerProperties.addSubDuration(fieldStr(InventCostBundleList, UpdateMarkingTime), inventCostBundleList.UpdateMarkingTime));

            instrumentationPropertyCollection.add(loggerProperties.addCount(fieldStr(InventCostBundleList, UpdateModelCount), inventCostBundleList.UpdateModelCount));
            instrumentationPropertyCollection.add(loggerProperties.addSubDuration(fieldStr(InventCostBundleList, UpdateModelTime), inventCostBundleList.UpdateModelTime));

            instrumentationPropertyCollection.add(loggerProperties.addCount(fieldStr(InventCostBundleList, UpdateReceiptAdjustmentCount), inventCostBundleList.UpdateReceiptAdjustmentCount));
            instrumentationPropertyCollection.add(loggerProperties.addSubDuration(fieldStr(InventCostBundleList, UpdateReceiptAdjustmentTime), inventCostBundleList.UpdateReceiptAdjustmentTime));

            instrumentationPropertyCollection.add(loggerProperties.addCount(fieldStr(InventCostBundleList, UpdateReturnAdjustmentsCount), inventCostBundleList.UpdateReturnAdjustmentsCount));
            instrumentationPropertyCollection.add(loggerProperties.addSubDuration(fieldStr(InventCostBundleList, UpdateReturnAdjustmentsTime), inventCostBundleList.UpdateReturnAdjustmentsTime));

            instrumentationPropertyCollection.add(loggerProperties.addCount(fieldStr(InventClosing, BomLevel), inventCostBundleList.Level));

            instrumentationPropertyCollection.add(loggerProperties.addCount(fieldStr(InventClosing, NumOfIteration), InventClosing.NumOfIteration));

            InventParameters inventParameters = InventParameters::find();

            instrumentationPropertyCollection.add(loggerProperties.addCount(fieldStr(InventParameters, CloseBundleSize), inventParameters.CloseBundleSize));

            instrumentationPropertyCollection.add(loggerProperties.addCount(fieldStr(InventParameters, CloseBatchHelpers), inventParameters.CloseBatchHelpers));

            instrumentationLogger.logPropertyCollection(instrumentationPropertyCollection);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    private void run(Voucher _voucher, TransDate _transDate)
    {
        inventClosing = InventClosing::find(_voucher, _transDate);

        this.logMeasures(inventClosing);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventCostClosingInstrumentationTask construct()
    {
        return new InventCostClosingInstrumentationTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>doRunAsync</Name>
				<Source><![CDATA[
    private static container doRunAsync(container _parameters)
    {
        Voucher     voucher;
        TransDate   transDate;
        [voucher, transDate] = _parameters;
        InventCostClosingInstrumentationTask task = InventCostClosingInstrumentationTask::construct();
        task.run(voucher, transDate);

        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runAsync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the instrumentation task asynchronously for an inventory closing.
    /// </summary>
    /// <param name = "_inventClosing">The inventory closing record.</param>
    /// <returns>An instance of the System.Threading.Tasks.Task class.</returns>
    public static System.Threading.Tasks.Task runAsync(InventClosing _inventClosing)
    {
        container parameters = [_inventClosing.Voucher, _inventClosing.TransDate];
        return runAsync(classNum(InventCostClosingInstrumentationTask), staticMethodStr(InventCostClosingInstrumentationTask, doRunAsync), parameters);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>