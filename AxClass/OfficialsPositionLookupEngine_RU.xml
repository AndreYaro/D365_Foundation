<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OfficialsPositionLookupEngine_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class OfficialsPositionLookupEngine_RU
{
    Map reportPositions;
    DictEnum pos;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPositions</Name>
				<Source><![CDATA[
    private Map getPositions(OffReportType_RU _reportType)
    {
        Map ret;

        if (reportPositions.exists(_reportType))
        {
            ret = reportPositions.lookup(_reportType);
        }
        else
        {
            ret = this.initPositions(_reportType);
            reportPositions.insert(_reportType, ret);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPositions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes positions map for the report type <paramref name="_reportType"/>.
    /// </summary>
    /// <param name = "_reportType">The type of the report.</param>
    /// <returns>Positions map for the report type <paramref name="_reportType"/>.</returns>
    public Map initPositions(OffReportType_RU _reportType)
    {
        Map ret = new Map(Types::Enum, Types::String);

        switch (_reportType)
        {
            case OffReportType_RU::General                  :
                ret = this.addPosition(ret, OffPosition_RU::Director);
                ret = this.addPosition(ret, OffPosition_RU::Accountant);
                break;

            case OffReportType_RU::CashSlip                 :
            case OffReportType_RU::CashBookPage             :
                ret = this.addPosition(ret, OffPosition_RU::Cashier);
                break;

            case OffReportType_RU::AdvanceReport            :
                ret = this.addPosition(ret, OffPosition_RU::Cashier);
                ret = this.addPosition(ret, OffPosition_RU::AccountantJ);
                break;

            case OffReportType_RU::CashCountStatement       :
                ret = this.addPosition(ret, OffPosition_RU::InCharge);
                ret = this.addPosition(ret, OffPosition_RU::Chairman);
                ret = this.addPosition(ret, OffPosition_RU::Member);
                break;

            case OffReportType_RU::SalesInvoiceCreditNote   :
                ret = this.addPosition(ret, OffPosition_RU::Director);
                ret = this.addPosition(ret, OffPosition_RU::Accountant);
                ret = this.addPosition(ret, OffPosition_RU::Acceptor);
                ret = this.addPosition(ret, OffPosition_RU::Taker);
                ret = this.addPosition(ret, OffPosition_RU::Supplier);
                ret = this.addPosition(ret, OffPosition_RU::TransResp);
                ret = this.addPosition(ret, OffPosition_RU::TransRespCust);
                break;

            case OffReportType_RU::PurchInvoice             :
                ret = this.addPosition(ret, OffPosition_RU::Director);
                ret = this.addPosition(ret, OffPosition_RU::Accountant);
                ret = this.addPosition(ret, OffPosition_RU::Acceptor);
                ret = this.addPosition(ret, OffPosition_RU::Taker);
                ret = this.addPosition(ret, OffPosition_RU::Supplier);
                ret = this.addPosition(ret, OffPosition_RU::TransResp);
                ret = this.addPosition(ret, OffPosition_RU::TransRespVend);
                break;

            case OffReportType_RU::SalesInvoice             :
                ret = this.addPosition(ret, OffPosition_RU::Acceptor);
                ret = this.addPosition(ret, OffPosition_RU::Taker);
                ret = this.addPosition(ret, OffPosition_RU::Supplier);
                ret = this.addPosition(ret, OffPosition_RU::TransResp);
                ret = this.addPosition(ret, OffPosition_RU::TransRespCust);
                break;

            case OffReportType_RU::PurchInvoiceCreditNote   :
                ret = this.addPosition(ret, OffPosition_RU::Acceptor);
                ret = this.addPosition(ret, OffPosition_RU::Taker);
                ret = this.addPosition(ret, OffPosition_RU::Supplier);
                ret = this.addPosition(ret, OffPosition_RU::TransResp);
                ret = this.addPosition(ret, OffPosition_RU::TransRespVend);
                break;

            case OffReportType_RU::SalesInvoice4Paym        :
                ret = this.addPosition(ret, OffPosition_RU::Filler);
                ret = this.addPosition(ret, OffPosition_RU::Responsible);
                break;

            case OffReportType_RU::PurchInvoice4Paym        :
                ret = this.addPosition(ret, OffPosition_RU::Director);
                ret = this.addPosition(ret, OffPosition_RU::Accountant);
                ret = this.addPosition(ret, OffPosition_RU::Filler);
                ret = this.addPosition(ret, OffPosition_RU::Responsible);
                break;

            case OffReportType_RU::InventTORG16 :
                ret = this.addPosition(ret, OffPosition_RU::Chairman);
                ret = this.addPosition(ret, OffPosition_RU::Member);
                ret = this.addPosition(ret, OffPosition_RU::InCharge);
                break;

            case OffReportType_RU::InventM11:
                ret = this.addPosition(ret, OffPosition_RU::Requester);
                ret = this.addPosition(ret, OffPosition_RU::Manager);
                ret = this.addPosition(ret, OffPosition_RU::InCharge);
                ret = this.addPosition(ret, OffPosition_RU::Supplier);
                ret = this.addPosition(ret, OffPosition_RU::Acceptor);
                break;

            case OffReportType_RU::InventINV19:
                ret = this.addPosition(ret, OffPosition_RU::InCharge);
                break;

            case OffReportType_RU::ProdM8:
                ret = this.addPosition(ret, OffPosition_RU::Manager);
                ret = this.addPosition(ret, OffPosition_RU::Supplier);
                ret = this.addPosition(ret, OffPosition_RU::Taker);
                break;

            case OffReportType_RU::CustFacture               :
            case OffReportType_RU::VendFactureCreditNote     :
            case OffReportType_RU::TaxCorrectionFactureCust  :
                ret = this.addPosition(ret, OffPosition_RU::Responsible);
                break;

            case OffReportType_RU::TaxCorrectionFactureVend  :
            case OffReportType_RU::EmplAdvanceReportFacture  :
            case OffReportType_RU::CustFactureCreditNote     :
            case OffReportType_RU::VendFacture               :
                ret = this.addPosition(ret, OffPosition_RU::Director);
                ret = this.addPosition(ret, OffPosition_RU::Accountant);
                ret = this.addPosition(ret, OffPosition_RU::Responsible);
                break;

            case OffReportType_RU::PurchM4M7        :
                ret = this.addPosition(ret, OffPosition_RU::Acceptor);
                ret = this.addPosition(ret, OffPosition_RU::Member);
                ret = this.addPosition(ret, OffPosition_RU::Supplier);
                ret = this.addPosition(ret, OffPosition_RU::Chairman);
                break;

            case OffReportType_RU::InventTORG13 :
            case OffReportType_RU::SalesInvoiceM15  :
                ret = this.addPosition(ret, OffPosition_RU::Supplier);
                ret = this.addPosition(ret, OffPosition_RU::Taker);
                ret = this.addPosition(ret, OffPosition_RU::TransResp);
                ret = this.addPosition(ret, OffPosition_RU::TransRespCust);
                break;

            case OffReportType_RU::TransferInvoiceM15  :
                ret = this.addPosition(ret, OffPosition_RU::Supplier);
                ret = this.addPosition(ret, OffPosition_RU::Taker);
                ret = this.addPosition(ret, OffPosition_RU::TransResp);
                break;

            case OffReportType_RU::RPayTaxList :
                ret = this.addPosition(ret, OffPosition_RU::Responsible);
                break;
            case OffReportType_RU::InventINV3:
                ret = this.addPosition(ret, OffPosition_RU::Member);
                ret = this.addPosition(ret, OffPosition_RU::InCharge);
                break;
            case OffReportType_RU::InventINV5:
                ret = this.addPosition(ret, OffPosition_RU::Chairman);
                ret = this.addPosition(ret, OffPosition_RU::Member);
                ret = this.addPosition(ret, OffPosition_RU::InCharge);
                break;

            case OffReportType_RU::RDeferrals :
                ret = this.addPosition(ret, OffPosition_RU::Chairman);
                ret = this.addPosition(ret, OffPosition_RU::Member);
                ret = this.addPosition(ret, OffPosition_RU::InCharge);
                ret = this.addPosition(ret, OffPosition_RU::AccountantJ);
                break;

            // <RUPAY>
            case OffReportType_RU::RPayCivilContract :
                ret = this.addPosition(ret, OffPosition_RU::Representative);
                break;
            // </RUPAY>

            case OffReportType_RU::RAssetsINV1     :
            case OffReportType_RU::RAssetsINV1a    :
            case OffReportType_RU::RAssetMB8       :
                ret = this.addPosition(ret, OffPosition_RU::Chairman);
                ret = this.addPosition(ret, OffPosition_RU::Member);
                break;

            case OffReportType_RU::CommissionAgentReport:
                ret = this.addPosition(ret, OffPosition_RU::Filler);
                break;

            case OffReportType_RU::InventINV6:
                ret = this.addPosition(ret, OffPosition_RU::Chairman);
                ret = this.addPosition(ret, OffPosition_RU::Member);
                ret = this.addPosition(ret, OffPosition_RU::Controller);
                break;

            default                                 :
                ret = this.initPositionsDefaultReportType(ret, _reportType);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue(OfficialsTable_RU _table)
    {
        MapIterator it = new MapIterator(this.getPositions(_table.ReportType));

        _table.Position = it.key();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookup</Name>
				<Source><![CDATA[
    public void lookup(
        OfficialsTable_RU _table,
        FormStringControl _fomStringControl)
    {
        Map tmpPos = this.getPositions(_table.ReportType);

        if (tmpPos.elements() > 1)
        {
            Args  args = new Args(formStr(OfficialsPickListLookup_RU));

            args.caller(_fomStringControl);

            Object formRun = classfactory.formRunClass(args);
            formRun.choices(tmpPos);
            formRun.init();

            _fomStringControl.performFormLookup(formRun);
        }
        else
        {
            if (tmpPos.elements())
            {
                MapIterator it = new MapIterator(tmpPos);
                _table.Position = it.key();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        reportPositions = new Map(Types::Enum, Types::Class);

        pos = new DictEnum(enumNum(OffPosition_RU));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPosition</Name>
				<Source><![CDATA[
    public void setPosition(
        OfficialsTable_RU _table,
        OffPositionStr_RU _position)
    {
        Map positions = this.getPositions(_table.ReportType);
        MapIterator it = new MapIterator(positions);

        while (it.more())
        {
            if (it.value() == _position)
            {
                _table.Position = it.key();
                break;
            }
            it.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueToLabel</Name>
				<Source><![CDATA[
    public OffPositionStr_RU valueToLabel(OffPosition_RU _position)
    {
        return pos.value2Label(enum2int(_position));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPosition</Name>
				<Source><![CDATA[
    private Map addPosition(
        Map _map,
        OffPosition_RU _position = OffPosition_RU::Director)
    {
        _map.insert(_position, pos.value2Label(enum2int(_position)));
        return _map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPositionsDefaultReportType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize positions for another report types.
    /// </summary>
    /// <param name = "_map">The map to be initialized.</param>
    /// <param name = "_reportType">The type of the report.</param>
    /// <returns>The map initialized by positions.</returns>
    /// <exception cref="Exception::Error">Non standard report type has been met.</exception>
    /// <remarks>The method should be replaced to deal with non standard report types.</remarks>
    [Replaceable]
    public Map initPositionsDefaultReportType(
        Map _map,
        OffReportType_RU _reportType)
    {
        throw error(strFmt("@SYS73815", new DictEnum(enumNum(OffReportType_RU)).value2Label(enum2int(_reportType))));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>