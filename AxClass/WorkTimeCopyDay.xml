<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WorkTimeCopyDay</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WorkTimeCopyDay extends RunBase
{
    WorkTimeId  workTimeId;
    WeekDay     fromWeekDay;
    WeekDay     toWeekDay;
    boolean     copyPropertyId;

    private const int currentVersion = 1;

    #localmacro.CurrentList
        workTimeId,
        fromWeekDay,
        toWeekDay,
        copyPropertyId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy work times from one day to another.
    /// </summary>
    void copy()
    {
        WorkTimeLine    workTimeLine;
        WorkTimeTable   workTimeTable;

        setprefix(WorkTimeCopyDay::description());
        setprefix(fieldLabelValue(tablenum(WorkTimeLine), fieldnum(WorkTimeLine, WorkTimeId), workTimeId));
        setprefix(fieldLabelValue(tablenum(WorkTimeLine), fieldnum(WorkTimeLine, WeekDay), dayname(fromWeekDay)));

        select forupdate workTimeTable
            where workTimeTable.WorkTimeId == workTimeId;

        switch (toWeekDay)
        {
            case WeekDays::Monday :
                workTimeTable.ClosedForPickupMonday    = this.fromClosedForPickup(workTimeTable);
                break;
            case WeekDays::Tuesday :
                workTimeTable.ClosedForPickupTuesday   = this.fromClosedForPickup(workTimeTable);
                break;
            case WeekDays::Wednesday :
                workTimeTable.ClosedForPickupWednesday = this.fromClosedForPickup(workTimeTable);
                break;
            case WeekDays::Thursday :
                workTimeTable.ClosedForPickupThursday  = this.fromClosedForPickup(workTimeTable);
                break;
            case WeekDays::Friday :
                workTimeTable.ClosedForPickupFriday    = this.fromClosedForPickup(workTimeTable);
                break;
            case WeekDays::Saturday :
                workTimeTable.ClosedForPickupSaturday  = this.fromClosedForPickup(workTimeTable);
                break;
            case WeekDays::Sunday :
                workTimeTable.ClosedForPickupSunday    = this.fromClosedForPickup(workTimeTable);
                break;
            default :
                break;
        }

        workTimeTable.write();

        while select forupdate workTimeLine
            index TimeDayIdx
            where workTimeLine.WorkTimeId   == workTimeId &&
                  workTimeLine.WeekDay      == fromWeekDay
        {
            setprefix(strfmt("@SYS54524", time2str(workTimeLine.FromTime, -1, -1), time2str(workTimeLine.ToTime, -1, -1)));
            workTimeLine.WeekDay = toWeekDay;
            if (!copyPropertyId)
            {
                workTimeLine.PropertyId = '';
            }

            if (!workTimeLine.validateWrite())
            {
                throw error("@SYS18722");
            }

            workTimeLine.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Show <c>WorkTimeCopyDayDialog</c> form.
    /// </summary>
    /// <returns>The <c>FormRun</c> object.</returns>
    public Object dialog()
    {
        Args    arg    = new Args(formstr(WorkTimeCopyDayDialog));
        FormRun fr     = classfactory.formRunClass(arg);

        arg.caller(this);
        fr.init();

        return fr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromClosedForPickup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>SalesClosedForPickup</c> from the <c>WorkTimeTable</c> record.
    /// </summary>
    /// <param name = "_workTimeTable">The work time table record.</param>
    /// <returns>The closed for pickup value from the work time table record.</returns>
    SalesClosedForPickup fromClosedForPickup(WorkTimeTable _workTimeTable)
    {
        SalesClosedForPickup    closedForPickup;

        switch (fromWeekDay)
        {
            case WeekDays::Monday :
                closedForPickup = _workTimeTable.ClosedForPickupMonday;
                break;
            case WeekDays::Tuesday :
                closedForPickup = _workTimeTable.ClosedForPickupTuesday;
                break;
            case WeekDays::Wednesday :
                closedForPickup = _workTimeTable.ClosedForPickupWednesday;
                break;
            case WeekDays::Thursday :
                closedForPickup = _workTimeTable.ClosedForPickupThursday;
                break;
            case WeekDays::Friday :
                closedForPickup = _workTimeTable.ClosedForPickupFriday;
                break;
            case WeekDays::Saturday :
                closedForPickup = _workTimeTable.ClosedForPickupSaturday;
                break;
            case WeekDays::Sunday :
                closedForPickup = _workTimeTable.ClosedForPickupSunday;
                break;
            default :
                closedForPickup = NoYes::No;
                break;
        }

        return closedForPickup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromWeekDay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the from and to week day.
    /// </summary>
    /// <param name = "_day">The from week day value.</param>
    void initFromWeekDay(WeekDay _day)
    {
        fromWeekDay = _day;
        toWeekDay   = _day + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Pack workTimeId, fromWeekDay, toWeekDay, copyPropertyId
    /// </summary>
    /// <returns>The container containing the values.</returns>
    public container pack()
    {
        return [currentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyPropertyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// The copy property id parameter .
    /// </summary>
    /// <param name = "_copy">The parameter copy property id value.</param>
    /// <returns>The copy property id value.</returns>
    boolean parmCopyPropertyId(boolean _copy = copyPropertyId)
    {
        copyPropertyId = _copy;

        return copyPropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromWeekDay</Name>
				<Source><![CDATA[
    /// <summary>
    /// The from week day parameter.
    /// </summary>
    /// <param name = "_day">The parameter from week day value.</param>
    /// <returns>The from week day value.</returns>
    WeekDay parmFromWeekDay(WeekDay _day = fromWeekDay)
    {
        fromWeekDay = _day;

        return fromWeekDay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToWeekDay</Name>
				<Source><![CDATA[
    /// <summary>
    /// The to week day parameter.
    /// </summary>
    /// <param name = "_day">The parameter to week day value.</param>
    /// <returns>The to week day value.</returns>
    WeekDay parmToWeekDay(WeekDay _day = toWeekDay)
    {
        toWeekDay = _day;

        return toWeekDay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkTimeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// The work time id parameter.
    /// </summary>
    /// <param name = "_id">The parameter work time id value.</param>
    /// <returns>The work time id value.</returns>
    WorkTimeId parmWorkTimeId(WorkTimeId _id = workTimeId)
    {
        workTimeId = _id;

        return workTimeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        if (!this.validate())
        {
            throw error("@SYS18722");
        }

        try
        {
            ttsbegin;

            this.copy();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpack workTimeId, fromWeekDay, toWeekDay, copyPropertyId
    /// </summary>
    /// <param name = "_packedClass">The container with the packed information.</param>
    /// <returns>True if pack version matches; otherwise, false.</returns>
    public boolean unpack(container _packedClass)
    {
        Integer     version      = conpeek(_packedClass, 1);

        switch (version)
        {
            case currentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if from and to week day is the same.
    /// </summary>
    /// <param name = "_calledFrom">The called ffrom object.</param>
    /// <returns>True if from and to week day is not the same, otherwise, false.</returns>
    boolean validate(Object _calledFrom = null)
    {
        if (fromWeekDay == toWeekDay)
        {
            return checkFailed("@SYS54274");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return class description.
    /// </summary>
    /// <returns>The description of the class.</returns>
    public static ClassDescription description()
    {
        return "@SYS54262";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// The main class method.
    /// </summary>
    /// <param name = "args">The argumenets for the class.</param>
    static void main(Args _args)
    {
        WorkTimeTable       workTimeTable   = _args.record();
        WeekDay             weekDay = _args.parmEnum();

        WorkTimeCopyDay     copyDay = WorkTimeCopyDay::newWorkTimeForm(workTimeTable, weekDay);

        if (copyDay.prompt())
        {
            copyDay.runOperation();
        }

        Object fr = _args.caller();
        if (fr != null)
        {
            fr.doResearch(copyDay);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWorkTimeForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of the <c>WorkTimeCopyDay</c> class.
    /// </summary>
    /// <param name = "_args">The arguments for the <c>WorkTimeCopyDay</c> class.</param>
    /// <returns>The <c>WorkTimeCopyDay</c> instance.</returns>
    public static WorkTimeCopyDay newWorkTimeForm(WorkTimeTable _workTimeTable, WeekDay _weekDay)
    {
        WorkTimeCopyDay     copyDay         = new WorkTimeCopyDay();
        copyDay.getLast();
        copyDay.parmWorkTimeId(_workTimeTable.WorkTimeId);
        copyDay.initFromWeekDay(_weekDay);

        return copyDay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>weekDayToDayUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the week day as week day user.
    /// </summary>
    /// <param name = "_day">The week day.</param>
    /// <returns>The week day user.</returns>
    static WeekDayUser weekDayToDayUser(WeekDay _day)
    {
        return _day;
    }

]]></Source>
			</Method>
			<Method>
				<Name>weekDayUserToDay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the week day user as week day.
    /// </summary>
    /// <param name = "_day">The week day.</param>
    /// <returns>The week day.</returns>
    static WeekDay weekDayUserToDay(WeekDayUser _day)
    {
        return _day;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>