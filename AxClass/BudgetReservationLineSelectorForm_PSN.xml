<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetReservationLineSelectorForm_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The budget reservation selector form class handles business logic for the <c>BudgetReservationLineSelectorForm_PSN</c> form.
/// </summary>
public class BudgetReservationLineSelectorForm_PSN
{
    OpenMode                                        openMode;
    BudgetReservationLineSelectorContract_PSN       budgetResLineSelectorContract;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doAllowLineMultiSelect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the budget reservation lines grid should allow multi select.
    /// </summary>
    /// <returns>
    /// true if the budget reservation lines grid should allow multi select; otherwise, false.
    /// </returns>
    public boolean doAllowLineMultiSelect()
    {
        return budgetResLineSelectorContract.parmIsPurchaseAgreementLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBudgetReservationHeaderDSFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the header query filters to the passed in query datasource builder.
    /// </summary>
    /// <param name="_budgetReservationHeaderQBDS">
    /// The query datasource builder to apply filters to.
    /// </param>
    public void initBudgetReservationHeaderDSFilters(QueryBuildDataSource _budgetReservationHeaderQBDS)
    {
        BudgetReservationFiltering_PSN::applyHeaderPostedRelievingDocDateFilters(
            _budgetReservationHeaderQBDS,
            budgetResLineSelectorContract.parmBudgetReservationRelievingDocument(),
            budgetResLineSelectorContract.parmAccountingDate(),
            !budgetResLineSelectorContract.parmIsPurchaseAgreementLine());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBudgetReservationLineDSFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the line query filters to the passed in query datasource builder.
    /// </summary>
    /// <param name="_budgetReservationLineQBDS">
    /// The query datasource builder to apply filters to.
    /// </param>
    public void initBudgetReservationLineDSFilters(QueryBuildDataSource _budgetReservationLineQBDS)
    {
        BudgetReservationFiltering_PSN::applyLinePostedAndOptionalHeaderFilters(
            _budgetReservationLineQBDS,
            true);
    
        if (budgetResLineSelectorContract.parmBudgetReservationRelievingDocument() == BudgetReservationRelievingDocument_PSN::PurchaseRequisition
            &&  budgetResLineSelectorContract.parmAgreementLineRecId() != 0
            && BudgetResLineAgreementLine_PSN::existsBudgetResLineForAgreementLine(budgetResLineSelectorContract.parmAgreementLineRecId()))
        {
            BudgetReservationFiltering_PSN::applyLinePurchaseRequisitionAgreementLineFilter(
                _budgetReservationLineQBDS,
                budgetResLineSelectorContract.parmAgreementLineRecId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetResLineSelectorContract</Name>
				<Source><![CDATA[
    protected BudgetReservationLineSelectorContract_PSN parmBudgetResLineSelectorContract(BudgetReservationLineSelectorContract_PSN _budgetResLineSelectorContract = budgetResLineSelectorContract)
    {
        budgetResLineSelectorContract = _budgetResLineSelectorContract;
    
        return budgetResLineSelectorContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDoShowEditableSelectorForm</Name>
				<Source><![CDATA[
    public boolean parmDoShowEditableSelectorForm(boolean _doShowEditableSelectorForm = budgetResLineSelectorContract.parmDoShowEditableSelectorForm())
    {
        budgetResLineSelectorContract.parmDoShowEditableSelectorForm(_doShowEditableSelectorForm);
    
        return budgetResLineSelectorContract.parmDoShowEditableSelectorForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSelectedBudgetReservations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the contract class with the set of budget reservations that were selected.
    /// </summary>
    /// <param name="_budgetReservationLineDS">
    /// The budget reservation line datasource that contains the selected line or lines.
    /// </param>
    public void updateSelectedBudgetReservations(FormDataSource _budgetReservationLineDS)
    {
        BudgetReservationLine_PSN   currentBudgetReservationLine;
        MultiSelectionHelper        multiSelectionHelper;
    
        multiSelectionHelper = MultiSelectionHelper::construct();
    
        multiSelectionHelper.parmDatasource(_budgetReservationLineDS);
    
        currentBudgetReservationLine = multiSelectionHelper.getFirst() as BudgetReservationLine_PSN;
    
        while (currentBudgetReservationLine)
        {
            budgetResLineSelectorContract.addSelectedBudgetReservationLine(currentBudgetReservationLine.RecId);
    
            currentBudgetReservationLine = multiSelectionHelper.getNext() as BudgetReservationLine_PSN;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and returns a new instance of the <c>BudgetResLineSelectorForm_PSN</c> class.
    /// </summary>
    /// <param name="_budgetResLineSelectorContract">
    /// The contract class to use when initializing values.
    /// </param>
    /// <returns>
    /// A new instance of the <c>BudgetResLineSelectorForm_PSN</c> form runner class.
    /// </returns>
    public static BudgetReservationLineSelectorForm_PSN newFromContract(
        BudgetReservationLineSelectorContract_PSN _budgetResLineSelectorContract)
    {
        BudgetReservationLineSelectorForm_PSN budgetResLineSelectorForm = new BudgetReservationLineSelectorForm_PSN();
    
        budgetResLineSelectorForm.parmBudgetResLineSelectorContract(_budgetResLineSelectorContract);
    
        return budgetResLineSelectorForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showBudgetResLineSelector</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the budget reservation selector form.
    /// </summary>
    /// <param name="_budgetResLineSelectorContract">
    /// The budget reservation selector contract to use when showing the budget reservation selector form.
    /// </param>
    /// <param name="_callingTable">
    /// The table record of the form that is launching the selector.
    /// </param>
    /// <param name="_formRun">
    /// The calling form.
    /// </param>
    public static void showBudgetResLineSelector(
        BudgetReservationLineSelectorContract_PSN       _budgetResLineSelectorContract,
        Common                                          _callingTable,
        FormRun                                         _formRun)
    {
        Args            args = new Args();
        MenuFunction    menuFunction;
        FormRun         formRun;
    
        args.menuItemName(menuitemDisplayStr(BudgetReservationLineSelector_PSN));
        args.record(_callingTable);
        args.caller(_formRun);
        args.parmObject(_budgetResLineSelectorContract);
    
        menuFunction = new MenuFunction(menuitemDisplayStr(BudgetReservationLineSelector_PSN), MenuItemType::Display);
        formRun = menuFunction.create(args);
    
        formRun.run();
    
        // By putting 'true' in the wait statement, the user is prevented from returning to the calling form.
        formRun.wait(true);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>