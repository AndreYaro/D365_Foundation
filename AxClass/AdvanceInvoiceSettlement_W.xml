<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AdvanceInvoiceSettlement_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class AdvanceInvoiceSettlement_W implements SysPackable
{
    Map advanceInvoiceSettlementMap;

    #localmacro.CurrentList
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkSettlement</Name>
				<Source><![CDATA[
    public abstract str checkSettlement(Common _parentDocument)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>keyValue</Name>
				<Source><![CDATA[
    private container keyValue(CzCustAdvanceInvoiceTable _advanceInvoiceTable)
    {
        return [ _advanceInvoiceTable.Type == AdvanceInvoiceType_W::CreditNote ? 0 : 1, _advanceInvoiceTable.RecId ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>markTrans</Name>
				<Source><![CDATA[
    final public NoYes markTrans(
        CzCustAdvanceInvoiceTable _advanceInvoiceTable,
        boolean                   _set       = false,
        NoYes                     _markTrans = NoYes::No)
    {
        NoYes ret;

        if (_set)
        {
            if (_markTrans)
            {
                advanceInvoiceSettlementMap.insert(this.keyValue(_advanceInvoiceTable), _advanceInvoiceTable.amountCurOpen());
                ret = true;
            }
            else
            {
                if (advanceInvoiceSettlementMap.exists(this.keyValue(_advanceInvoiceTable)))
                {
                    advanceInvoiceSettlementMap.remove(this.keyValue(_advanceInvoiceTable));
                }
                ret = false;
            }
        }
        else
        {
            if (_advanceInvoiceTable.amountCurOpen() == 0)
            {
                advanceInvoiceSettlementMap.remove(this.keyValue(_advanceInvoiceTable));
                ret = false;
            }
            else
            {
                ret = advanceInvoiceSettlementMap.exists(this.keyValue(_advanceInvoiceTable));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markTransSettlementAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks trans line with settlement amount.
    /// </summary>    
    /// <param name = "_advanceInvoiceTable"><c>CzCustAdvanceInvoiceTable</c> record for settlement</param>
    /// <param name = "_set">State of update</param>
    /// <param name = "_markTrans">State of mark</param>
    /// <param name = "_amountCur">Amount for settlement</param>
    /// <returns>Returns marked state.</returns>
    public final NoYes markTransSettlementAmount(
        CzCustAdvanceInvoiceTable _advanceInvoiceTable,
        boolean _set = false,
        NoYes _markTrans = NoYes::No, 
        AmountCur _amountCur = 0)
    {
        NoYes ret;

        if (_set)
        {
            if (_markTrans)
            {
                advanceInvoiceSettlementMap.insert(this.keyValue(_advanceInvoiceTable), _amountCur);
                ret = NoYes::Yes;
            }
            else if (advanceInvoiceSettlementMap.exists(this.keyValue(_advanceInvoiceTable)))
            {
                advanceInvoiceSettlementMap.remove(this.keyValue(_advanceInvoiceTable));
            }
        }
        else
        {
            ret = advanceInvoiceSettlementMap.exists(this.keyValue(_advanceInvoiceTable)) ? NoYes::Yes : NoYes::No;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markTransAmount</Name>
				<Source><![CDATA[
    final public Amount markTransAmount(
        CzCustAdvanceInvoiceTable _advanceInvoiceTable,
        boolean                   _set             = false,
        Amount                    _markTransAmount = 0)
    {
        Amount ret;

        if (_set)
        {
            if (_markTransAmount)
            {
                ret = sign(_advanceInvoiceTable.InvoiceAmount) * min(abs(_advanceInvoiceTable.amountCurOpen()), abs(_markTransAmount));
                advanceInvoiceSettlementMap.insert(this.keyValue(_advanceInvoiceTable), ret);
            }
            else
            {
                if (advanceInvoiceSettlementMap.exists(this.keyValue(_advanceInvoiceTable)))
                {
                    advanceInvoiceSettlementMap.remove(this.keyValue(_advanceInvoiceTable));
                }
                ret = 0;
            }
        }
        else
        {
            if (advanceInvoiceSettlementMap.exists(this.keyValue(_advanceInvoiceTable)))
            {
                ret = advanceInvoiceSettlementMap.lookup(this.keyValue(_advanceInvoiceTable));
            }
            else
            {
                ret = 0;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        advanceInvoiceSettlementMap = new Map(Types::Container, Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return advanceInvoiceSettlementMap.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseCreditNoteSettlement</Name>
				<Source><![CDATA[
    private void reverseCreditNoteSettlement(
        CzCustAdvanceInvoiceTable _advanceInvoice,
        AmountCur                 _amount)
    {
        CzCustAdvanceInvoiceTable offsetTable;
        CustTrans                 offsetTrans,
                                  advanceTrans;
        SpecTransManager          specTransManager;
        CustSettlement            custSettlement,
                                  offsetSettlement;

        AmountCur                 amounToUnsettle = _amount;

        AdvanceInvoiceType_W      offsetType = (_advanceInvoice.Type == AdvanceInvoiceType_W::Common ?
                                                AdvanceInvoiceType_W::CreditNote                     :
                                                AdvanceInvoiceType_W::Common);
        RecordSortedList          custSettlementList = new RecordSortedList(tablenum(CustSettlement));

        specTransManager = SpecTransManager::newFromSpec(_advanceInvoice.custTable_InvoiceAccount());
        if (specTransManager.getSpecTransCount())
            throw error("@GLS101992");

        custSettlementList.sortOrder(fieldnum(CustSettlement, TransCompany),
                                     fieldnum(CustSettlement, TransRecId),
                                     fieldnum(CustSettlement, OffsetCompany),
                                     fieldnum(CustSettlement, OffsetRecid));

        advanceTrans = CustTrans::findVoucherDate(_advanceInvoice.Voucher,  _advanceInvoice.InvoiceDate);

        select crosscompany custSettlement
            where custSettlement.TransCompany == advanceTrans.company() &&
                  custSettlement.TransRecId   == advanceTrans.RecId     &&
                  custSettlement.AccountNum   == advanceTrans.AccountNum;

        while (amounToUnsettle > 0 && custSettlement)
        {
            changecompany (custSettlement.OffsetCompany)
            {
                offsetTrans = CustTrans::find(custSettlement.OffsetRecid);
                offsetTable = CzCustAdvanceInvoiceTable::findVoucherDate(offsetTrans.Voucher, offsetTrans.TransDate);
            }

            if (offsetTable.Type == offsetType)
            {
                custSettlementList.ins(custSettlement);
                amounToUnsettle -= abs(custSettlement.SettleAmountCur);
            }

            next custSettlement;
        }

        amounToUnsettle = _amount;
        custSettlementList.first(custSettlement);
        while (amounToUnsettle > 0 && custSettlement)
        {
            changecompany (custSettlement.OffsetCompany)
            {
                offsetTrans = CustTrans::find(custSettlement.OffsetRecid);
                offsetTable = CzCustAdvanceInvoiceTable::findVoucherDate(offsetTrans.Voucher, offsetTrans.TransDate);
            }

            specTransManager.insert(custSettlement.DataAreaId,
                                    custSettlement.TableId,
                                    custSettlement.RecId,
                                    sign(custSettlement.SettleAmountCur) * min(abs(amounToUnsettle), abs(custSettlement.SettleAmountCur)),
                                    _advanceInvoice.CurrencyCode);

            select crosscompany offsetSettlement
                where offsetSettlement.TransCompany     == offsetTrans.company()  &&
                      offsetSettlement.TransRecId       == offsetTrans.RecId      &&
                      offsetSettlement.AccountNum       == offsetTrans.AccountNum &&
                      offsetSettlement.OffsetCompany    == advanceTrans.company() &&
                      offsetSettlement.OffsetRecid      == advanceTrans.RecId     &&
                      offsetSettlement.OffsetAccountNum == advanceTrans.AccountNum;

            specTransManager.insert(offsetSettlement.DataAreaId,
                                    offsetSettlement.TableId,
                                    offsetSettlement.RecId,
                                    sign(offsetSettlement.SettleAmountCur) * min(abs(amounToUnsettle), abs(offsetSettlement.SettleAmountCur)),
                                    _advanceInvoice.CurrencyCode);

            amounToUnsettle -= sign(amounToUnsettle) * min(abs(amounToUnsettle), abs(custSettlement.SettleAmountCur));
            if (! custSettlementList.next(custSettlement))
            {
                amounToUnsettle = 0;
            }
        }

        CustTrans::reverseTransact(_advanceInvoice.custTable_InvoiceAccount(), null, SettleDatePrinc::DaysDate, _advanceInvoice.InvoiceDate, true);
        specTransManager.deleteAll();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseSettlement</Name>
				<Source><![CDATA[
    public void reverseSettlement(CustInvoiceJour _custInvoiceJour)
    {
        CustInvoiceJour                origInvoiceJour;
        CustInvoiceTrans               invoiceTrans, origTrans;
        CustInvoiceTrans_W             invoiceTrans_W;

        CustAdvanceInvoiceSettlement_W settlement;
        CzCustPostAdvanceInvoice       custPostAdvanceInvoice;

        CzCustAdvanceInvoiceTable      advanceInvoice,
                                       reversalInvoice,
                                       cancellationInvoice;
        CzCustAdvanceInvoiceLine       reversalLine,
                                       cancellationLine;

        CustTable                      custTable;
        CustTrans                      reversalTrans,
                                       advanceTrans;
        SpecTransManager               specTransManager;
        CustSettlement                 custSettlement;

        if (! _custInvoiceJour.creditNote())
            return;

        ttsbegin;

        custTable = _custInvoiceJour.custTable_InvoiceAccount();
        boolean isSalesEditLinesAdvanceInvoiceSettlementFeatureEnabled = FeatureStateProvider::isFeatureEnabled(SalesEditLinesAdvanceInvoiceSettlementFeature_W::instance());

        while select RecId from origInvoiceJour
        exists join  origTrans
            where origTrans.InvoiceId                  == origInvoiceJour.InvoiceId    &&
                  origTrans.InvoiceDate                == origInvoiceJour.InvoiceDate  &&
                  origTrans.SalesId                    == origInvoiceJour.SalesId      &&
                  origTrans.NumberSequenceGroup        == origInvoiceJour.NumberSequenceGroup
        exists join invoiceTrans
            where invoiceTrans.InvoiceId               == _custInvoiceJour.InvoiceId   &&
                  invoiceTrans.InvoiceDate             == _custInvoiceJour.InvoiceDate &&
                  invoiceTrans.SalesId                 == _custInvoiceJour.SalesId     &&
                  invoiceTrans.NumberSequenceGroup     == _custInvoiceJour.NumberSequenceGroup
        exists join invoiceTrans_W
            where invoiceTrans_W.CustInvoiceTrans == invoiceTrans.RecId &&
                  invoiceTrans_W.RefReturnInvoiceTrans_W == origTrans.RecId
        {
            while select forupdate settlement
                where settlement.InvoiceJourRecId == origInvoiceJour.RecId
            {
                advanceInvoice  = CzCustAdvanceInvoiceTable::findRecId(settlement.AdvanceInvoiceRecId);
                if (isSalesEditLinesAdvanceInvoiceSettlementFeatureEnabled
                    && !advanceInvoiceSettlementMap.exists(this.keyValue(advanceInvoice)))
                {
                    continue;
                }

                reversalInvoice = CzCustAdvanceInvoiceTable::findRecId(settlement.ReversalAdvanceInvoiceRecId);
                advanceTrans    = CustTrans::findVoucherDate(advanceInvoice.Voucher,  advanceInvoice.InvoiceDate);
                reversalTrans   = CustTrans::findVoucherDate(reversalInvoice.Voucher, reversalInvoice.InvoiceDate);

                specTransManager = SpecTransManager::newFromSpec(custTable);
                if (specTransManager.getSpecTransCount())
                    throw error("@GLS101992");

                select firstonly crosscompany DataAreaId, TableId, RecId, SettleAmountCur from custSettlement
                    where custSettlement.TransCompany     == reversalTrans.company()  &&
                          custSettlement.TransRecId       == reversalTrans.RecId      &&
                          custSettlement.AccountNum       == reversalTrans.AccountNum &&
                          custSettlement.OffsetCompany    == advanceTrans.company()   &&
                          custSettlement.OffsetRecid      == advanceTrans.RecId       &&
                          custSettlement.OffsetAccountNum == advanceTrans.AccountNum;
                specTransManager.insert(custSettlement.DataAreaId,
                                        custSettlement.TableId,
                                        custSettlement.RecId,
                                        custSettlement.SettleAmountCur,
                                        reversalTrans.CurrencyCode);
                select firstonly crosscompany DataAreaId, TableId, RecId, SettleAmountCur from custSettlement
                    where custSettlement.TransCompany     == advanceTrans.company()    &&
                          custSettlement.TransRecId       == advanceTrans.RecId        &&
                          custSettlement.AccountNum       == advanceTrans.AccountNum   &&
                          custSettlement.OffsetCompany    == reversalTrans.company()   &&
                          custSettlement.OffsetRecid      == reversalTrans.RecId       &&
                          custSettlement.OffsetAccountNum == reversalTrans.AccountNum;
                specTransManager.insert(custSettlement.DataAreaId,
                                        custSettlement.TableId,
                                        custSettlement.RecId,
                                        custSettlement.SettleAmountCur,
                                        advanceTrans.CurrencyCode);

                CustTrans::reverseTransact(custTable, null, SettleDatePrinc::DaysDate, _custInvoiceJour.InvoiceDate, true);
                specTransManager.deleteAll();

                cancellationInvoice = reversalInvoice.data();
                cancellationInvoice.Type        = AdvanceInvoiceType_W::ReversalCancellation;
                cancellationInvoice.InvoiceDate = _custInvoiceJour.InvoiceDate;
                cancellationInvoice.InvoiceId   = '';
                cancellationInvoice.Voucher     = '';
                cancellationInvoice.Posted      = NoYes::No;
                cancellationInvoice.insert();

                while select reversalLine
                    where reversalLine.ParentRecId == reversalInvoice.RecId
                {
                    cancellationLine = reversalLine.data();
                    cancellationLine.ParentRecId                 = cancellationInvoice.RecId;
                    cancellationLine.OrigAdvanceInvoiceLineRecId = reversalLine.RecId;
                    cancellationLine.AmountCur                   = - cancellationLine.AmountCur;
                    cancellationLine.insert();
                }

                cancellationInvoice.calcInvoiceAmount();
                cancellationInvoice.update();

                // post AI of type "AdvanceInvoiceType_W::ReversalCancellation" + create settlement with reversal AI
                custPostAdvanceInvoice = CzCustPostAdvanceInvoice::construct();

                custPostAdvanceInvoice.parmInvoiceTable(cancellationInvoice);
                custPostAdvanceInvoice.parmOriginalInvoiceDate(advanceInvoice.InvoiceDate);
                custPostAdvanceInvoice.runOperation();

                settlement.ReversalCancellationRecId = cancellationInvoice.RecId;
                settlement.CreditNoteRecId           = _custInvoiceJour.RecId;
                settlement.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleNowCommon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Settles advance invoice with invoice journal.
    /// </summary>
    /// <param name = "_common"> The record of Invoice Journal table which is needed to settle</param>
    public void settleNowCommon(Common _common)
    {
        const str AdvanceInvoiceReversalExchangeRate = 'AdvanceInvoiceReversalExchangeRate';

        CzCustAdvanceInvoiceTable      advanceInvoiceTable, reverseTable;
        CzCustAdvanceInvoiceLine       advanceInvoiceLine,  reverseLine;
        CzCustPostAdvanceInvoice       custPostAdvanceInvoice;

        AmountCur                      settlementAmount, remainAmount;
        int64                          lineCount;
        RecId                          advanceInvoiceTableRecId;
        int                            advanceInvoiceType;

        MapIterator                    iterator = new MapIterator(advanceInvoiceSettlementMap);

        while (iterator.more())
        {
            [ advanceInvoiceType, advanceInvoiceTableRecId ] = iterator.key();
            advanceInvoiceTable = CzCustAdvanceInvoiceTable::findRecId(advanceInvoiceTableRecId);

            // settlement amount is a minimum between user choice and AI open amount
            // AI open amount is checked since it can be changed after user has selected that on form
            settlementAmount = iterator.value();
            settlementAmount = sign(settlementAmount) * min(abs(settlementAmount), abs(advanceInvoiceTable.amountCurOpen()));

            if (! settlementAmount)
            {
                iterator.next();
                continue;
            }

            if (this.skipAdvanceInvoiceTableCommon(advanceInvoiceTable, _common))
            {
                iterator.next();
                continue;
            }

            reverseTable = advanceInvoiceTable.data();

            if (isFlightEnabled(AdvanceInvoiceReversalExchangeRate))
            {
                reverseTable.ExchRate = 0;
            }

            reverseTable.Type = AdvanceInvoiceType_W::Reversal;
            reverseTable.InvoiceId = '';
            reverseTable.Voucher = '';
            reverseTable.Posted = NoYes::No;
            reverseTable.RetailStoreId = '';
            reverseTable.RetailTerminalId = '';
            reverseTable.RetailOrderReferenceId = '';
            reverseTable.RetailTransactionId = '';
            reverseTable.insert();

            this.updateReverseTableCommon(reverseTable, _common);

            select count(RecId) from advanceInvoiceLine
                where advanceInvoiceLine.ParentRecId == advanceInvoiceTable.RecId;
            lineCount    = advanceInvoiceLine.RecId;

            remainAmount = settlementAmount;

            while select advanceInvoiceLine
                order by AmountCur asc
                where advanceInvoiceLine.ParentRecId == advanceInvoiceTable.RecId
            {
                reverseLine                             = advanceInvoiceLine.data();
                reverseLine.ParentRecId                 = reverseTable.RecId;
                reverseLine.OrigAdvanceInvoiceLineRecId = advanceInvoiceLine.RecId;
                if (lineCount == 1)
                {
                    reverseLine.AmountCur = - remainAmount;
                }
                else
                {
                    reverseLine.AmountCur = - CurrencyExchangeHelper::amount(advanceInvoiceLine.AmountCur * settlementAmount / advanceInvoiceTable.InvoiceAmount, advanceInvoiceTable.CurrencyCode);
                }
                reverseLine.insert();

                remainAmount += reverseLine.AmountCur;
                lineCount --;
            }

            reverseTable.calcInvoiceAmount();
            reverseTable.update();

            if (abs(settlementAmount) > abs(CustTrans::findVoucherDate(advanceInvoiceTable.Voucher, advanceInvoiceTable.InvoiceDate).remainAmountCur()))
            {
                this.reverseCreditNoteSettlement(advanceInvoiceTable,
                                                 abs(settlementAmount) - abs(CustTrans::findVoucherDate(advanceInvoiceTable.Voucher,
                                                                                                       advanceInvoiceTable.InvoiceDate).remainAmountCur()));
            }

            // post AI of type "AdvanceInvoiceType_W::Reversal" + create settlement with original AI
            custPostAdvanceInvoice = CzCustPostAdvanceInvoice::construct();

            custPostAdvanceInvoice.parmInvoiceTable(reverseTable);
            custPostAdvanceInvoice.parmOriginalInvoiceDate(advanceInvoiceTable.InvoiceDate);
            custPostAdvanceInvoice.runOperation();
            
            CustProjAdvanceInvoiceSettlementMap_W advanceInvoiceSettlement = this.getSettlementTable();
            advanceInvoiceSettlement.AdvanceInvoiceRecId         = advanceInvoiceTable.RecId;
            advanceInvoiceSettlement.ReversalAdvanceInvoiceRecId = reverseTable.RecId;
            advanceInvoiceSettlement.InvoiceJourRecId            = _common.RecId;
            advanceInvoiceSettlement.PaymentAmount               = settlementAmount;
            advanceInvoiceSettlement.insert();

            iterator.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSettlementTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets settlement table of current object.
    /// </summary>
    /// <returns>Currenct settlement table.</returns>
    protected CustProjAdvanceInvoiceSettlementMap_W getSettlementTable()
    {
        CustAdvanceInvoiceSettlement_W custSettlement;
        return custSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipAdvanceInvoiceTable</Name>
				<Source><![CDATA[
    protected boolean skipAdvanceInvoiceTable(
        CzCustAdvanceInvoiceTable _advanceInvoiceTable,
        CustInvoiceJour           _custInvoiceJour)
    {
        container dummy()
        {
            return [ _advanceInvoiceTable.RecId,
                     _custInvoiceJour.RecId ];
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Settles advance invoice with cust invoice journal.
    /// </summary>
    /// <param name = "_custInvoiceJour"> The record of Customer Invoice Journal table which is needed to settle.</param>
    public void settleNow(CustInvoiceJour _custInvoiceJour)
    {
        this.settleNowCommon(_custInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipAdvanceInvoiceTableCommon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates of skipping is needed
    /// </summary>
    /// <param name = "_advanceInvoiceTable"> The record of <c>CzCustAdvanceInvoiceTable</c> table.</param>
    /// <param name = "_invoiceJour">The record of Invoice Journal table.</param>
    /// <returns>The skip status.</returns>
    protected boolean skipAdvanceInvoiceTableCommon(
        CzCustAdvanceInvoiceTable _advanceInvoiceTable,
        Common _invoiceJour)
    {
        return this.skipAdvanceInvoiceTable(_advanceInvoiceTable, _invoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedMap)
    {
        if (_packedMap)
        {
            advanceInvoiceSettlementMap = Map::create(_packedMap);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReverseTable</Name>
				<Source><![CDATA[
    protected abstract void updateReverseTable(
        CzCustAdvanceInvoiceTable   _reverseTable,
        CustInvoiceJour             _custInvoiceJour)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReverseTableCommon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update reversal <c>CzCustAdvanceInvoiceTable</c> with general invoice journal.
    /// </summary>
    /// /// <param name = "_reverseTable">The reversal record.</param>
    /// <param name = "_invoiceJour">The invoicejournal record.</param>
    protected void updateReverseTableCommon(
        CzCustAdvanceInvoiceTable _reverseTable,
        Common _invoiceJour)
    {
        this.updateReverseTable(_reverseTable, _invoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParent</Name>
				<Source><![CDATA[
    public static AdvanceInvoiceSettlement_W newFromParent(tableId _parentDocumentTableID)
    {
        AdvanceInvoiceSettlement_W ret;

        switch (_parentDocumentTableID)
        {
            case tablenum(SalesTable):
                ret = new AdvanceInvoiceSettlement_SalesOrder_W();
                break;

            case tablenum(CustInvoiceTable):
                ret = new AdvanceInvoiceSettlement_FreeText_W();
                break;
            
            case tablenum(ProjInvoiceJour):
                ret = new AdvanceInvoiceSettlement_ProjInvoice_W();
                break;

            default                   :
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newUnpack</Name>
				<Source><![CDATA[
    public static AdvanceInvoiceSettlement_W newUnpack(tableId _parentDocumentTableID, container _packedMap)
    {
        AdvanceInvoiceSettlement_W advanceInvoiceSettlement = AdvanceInvoiceSettlement_W::newFromParent(_parentDocumentTableID);

        advanceInvoiceSettlement.unpack(_packedMap);

        return advanceInvoiceSettlement;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>