<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetPost_Disposal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetPost_Disposal extends RAssetPost
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createDeferrals</Name>
				<Source><![CDATA[
    protected void createDeferrals(RassetDeferralsType _operationType)
    {
        super(_operationType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deferralsName</Name>
				<Source><![CDATA[
    protected RDeferralsName deferralsName()
    {
        return "@GLS116641";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    public RAssetTrans initFromLedgerJournalTrans()
    {
        RAssetSumCalc               rassetSumTrans;
        ledgerJournalTrans          lJTBalanceAcq;
        ledgerJournalTrans_RAsset   lJTBalanceAcq_RAsset;
    
        rAssetTrans = super();
        rassetSumTrans = RAssetSumCalc_Trans::newAssetPeriod(ledgerJournalTrans_RAsset.AssetId,
                                                             ledgerJournalTrans_RAsset.StandardId,
                                                             ledgerJournalTrans_RAsset.getTransDate(ledgerJournalTrans));
        rAssetTrans.Txt       = '';
        rAssetTrans.AmountCur = -rassetSumTrans.netBookValue();
        rAssetTrans.AmountMST = CurrencyExchangeHelper::mstAmount(rAssetTrans.AmountCur, rAssetTrans.CurrencyCode, transDate);
    
        if (ledgerJournalTrans_RAsset.PostValue != RAssetPostValue::BalanceAcq)
        {
            select firstOnly RecId, DefaultDimension, OffsetLedgerDimension from lJTBalanceAcq
                where lJTBalanceAcq.Voucher            == ledgerJournalTrans.Voucher            &&
                      lJTBalanceAcq.TransDate          == ledgerJournalTrans.TransDate          &&
                      lJTBalanceAcq.TransactionType    == LedgerTransType::FixedAssets_RU       &&
                      lJTBalanceAcq.AccountType        == LedgerJournalACType::FixedAssets_RU
                join DebLedgerDimension from lJTBalanceAcq_RAsset
                where lJTBalanceAcq_RAsset.AssetId     == ledgerJournalTrans_RAsset.AssetId     &&
                      lJTBalanceAcq_RAsset.BudgetModel == ledgerJournalTrans_RAsset.BudgetModel &&
                      lJTBalanceAcq_RAsset.StandardId  == ledgerJournalTrans_RAsset.StandardId  &&
                      lJTBalanceAcq_RAsset.TransType   == ledgerJournalTrans_RAsset.TransType   &&
                      lJTBalanceAcq_RAsset.RefRecId    == lJTBalanceAcq.RecId                   &&
                      lJTBalanceAcq_RAsset.PostValue   == RAssetPostValue::BalanceAcq;
    
            if (lJTBalanceAcq.RecId)
            {
                rAssetTrans.DefaultDimension      = rAssetTrans.defaultDimension(lJTBalanceAcq.DefaultDimension);
                rAssetTrans.LedgerDimension       = LedgerDimensionFacade::serviceCreateLedgerDimension(lJTBalanceAcq_RAsset.DebLedgerDimension, rAssetTrans.DefaultDimension);
                rAssetTrans.OffsetLedgerDimension = lJTBalanceAcq.OffsetLedgerDimension;
            }
        }
        return rAssetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lossAmount</Name>
				<Source><![CDATA[
    protected RAssetAmount lossAmount()
    {
        RAssetAmount lossAmount;
        lossAmount = RassetDisposalValue::postValue(rAssetStandards.AssetId,
                                                    rAssetStandards.AssetStandardId,
                                                    RAssetPostValue::Gain,
                                                    0,
                                                    transDate);
        return lossAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>notifyRestoredVATExist</Name>
				<Source><![CDATA[
    protected void notifyRestoredVATExist()
    {
        RAssetSumCalc_Trans     calcAssetTrans;
        boolean                 ret;

        if (rAssetTable.isFixedAssetType() &&
            rAssetTable.VendInvoiceId      &&
            RestoredVATLogTable_RU::exist(rAssetStandards.DisposalDate) &&
            rAssetStandards.AssetStandardId == RAssetParameters::find().StandardIdDefault)
        {
            calcAssetTrans = RAssetSumCalc_Trans::newAssetPeriod(rAssetTable.AccountNum,
                                                                 rAssetStandards.AssetStandardId,
                                                                 rAssetStandards.DisposalDate);
            ret = rAssetStandards.lifeTimeRest(rAssetStandards.DisposalDate) &&
                  (calcAssetTrans.disposalDisposedValueMST() != 0);

            if (ret)
            {
                error(strfmt("@GLS114575", rAssetTable.AccountNum));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    public void updateStatus()
    {
        RAssetStandards  assetStandardsLocal;
        ;

        if (! rAssetTable)
        {
            rAssetTable = RAssetTable::find(ledgerJournalTrans_RAsset.AssetId, true);
        }

        if (! rAssetStandards)
        {
            rAssetStandards = RAssetStandards::find(ledgerJournalTrans_RAsset.AssetId, ledgerJournalTrans_RAsset.StandardId, true);
        }

        rAssetStandards.DisposalDate = transDate;

        rAssetStandards.doUpdate();

        this.createDeferrals(RassetDeferralsType::Disposal);
        select firstonly assetStandardsLocal
            where assetStandardsLocal.AssetId == rAssetTable.AccountNum &&
                  ! assetStandardsLocal.DisposalDate;

        if (! assetStandardsLocal)
        {
            rAssetTable.Status =  RAssetStatus::Disposed;
            rAssetTable.doUpdate();
        }

        this.notifyRestoredVATExist();
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetTransAddOther</Name>
				<Source><![CDATA[
    static public void assetTransAddOther(LedgerJournalTable _ledgerJournalTable)
    {
        LedgerJournalTrans         ledgerJournalTrans;
        LedgerJournalTrans_RAsset  ledgerJournalTrans_RAsset;
        RAssetTrans         rAssetTrans;
        AmountCur           amountCur;
    
        if (_ledgerJournalTable.Posted)
        {
            ttsbegin;
            while select ledgerJournalTrans
                where ledgerJournalTrans.JournalNum          == _ledgerJournalTable.JournalNum      &&
                      ledgerJournalTrans.AccountType         != LedgerJournalACType::FixedAssets_RU &&
                      ledgerJournalTrans.OffsetAccountType   != LedgerJournalACType::FixedAssets_RU
            //BP Deviation documented
            join ledgerJournalTrans_RAsset
                where ledgerJournalTrans_RAsset.RefRecId    == ledgerJournalTrans.RecId &&
                      ledgerJournalTrans_RAsset.ToFromRecId == 0
            {
                if (ledgerJournalTrans_RAsset.AssetId)
                {
                    rAssetTrans.clear();
                    rAssetTrans.TransDate        = ledgerJournalTrans_RAsset.getTransDate(ledgerJournalTrans);
    
                    rAssetTrans.Voucher          = ledgerJournalTrans.Voucher;
                    rAssetTrans.Open             = NoYes::Yes;
                    rAssetTrans.AssetDeprPeriod  = ledgerJournalTrans_RAsset.DeprPeriod;
    
                    rAssetTrans.AssetTransType   = ledgerJournalTrans_RAsset.TransType;
                    rAssetTrans.AccountNum       = ledgerJournalTrans_RAsset.AssetId;
                    rAssetTrans.AssetStandardId  = ledgerJournalTrans_RAsset.StandardId;
                    rAssetTrans.PostingProfile   = ledgerJournalTrans.PostingProfile;
                    rAssetTrans.CurrencyCode     = rAssetTrans.assetStandards().CurrencyCode;
                    rAssetTrans.DefaultDimension = rAssetTrans.defaultDimension(ledgerJournalTrans.DefaultDimension ? ledgerJournalTrans.DefaultDimension :
                                                                                LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(ledgerJournalTrans.LedgerDimension));
                    rAssetTrans.Approver         = ledgerJournalTrans.Approver;
                    rAssetTrans.Txt              = ledgerJournalTrans.Txt;
    
                    if (ledgerJournalTrans.CurrencyCode == rAssetTrans.CurrencyCode)
                    {
                        amountCur = ledgerJournalTrans.amount();
                    }
                    else
                    {
                        amountCur =  CurrencyExchangeHelper::curAmount2CurAmount(ledgerJournalTrans.amount(), ledgerJournalTrans.CurrencyCode, rAssetTrans.CurrencyCode, rAssetTrans.TransDate);
                    }
                    rAssetTrans.AmountCur       = amountCur;
                    rAssetTrans.AmountMST       = ledgerJournalTrans.calcAmountMST();
    
                    rAssetTrans.insert();
                }
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
