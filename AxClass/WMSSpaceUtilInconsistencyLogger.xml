<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsSpaceUtilInconsistencyLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WMSSpaceUtilInconsistencyLogger</c> class encapsulates logic for logging in setup
/// inconsistencies that prevent successful load utilization calculations.
/// </summary>
public class WmsSpaceUtilInconsistencyLogger
{
    RefRecId    reportSetup;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteExistingLog</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Deletes all existing log entries.
    /// </summary>
    public void deleteExistingLog()
    {
        WMSSpaceUtilInconsistencies inconsistencies;

        ttsbegin;
        delete_from inconsistencies
            where inconsistencies.wmsReportSetup == reportSetup;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logProductFallBackInconsistency</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates inconsistency log entry, when the fall back warehouse can not be resolved.
    /// </summary>
    /// <param name="_itemId">
    ///     A <c>ItemId</c> value.
    /// </param>
    /// <param name="_inventSiteId">
    ///     A <c>InventSiteId</c> value.
    /// </param>
    public void logProductFallBackInconsistency(ItemId _itemId, InventSiteId _inventSiteId)
    {
        WMSSpaceUtilInconsistencies inconsistencies;

        if (WMSSpaceUtilInconsistencyLogger::isInconsistencyTypeEnabled(WMSSpaceUtilInconsistencyType::DefaultWarehouse))
        {
            select firstonly RecId from inconsistencies
                where inconsistencies.ItemId == _itemId
                    && inconsistencies.InconsistencyType == WMSSpaceUtilInconsistencyType::DefaultWarehouse
                    && inconsistencies.InventSiteId == _inventSiteId
                    && inconsistencies.wmsReportSetup == reportSetup;

            if (!inconsistencies.RecId)
            {
                inconsistencies.ItemId = _itemId;
                inconsistencies.InconsistencyType = WMSSpaceUtilInconsistencyType::DefaultWarehouse;
                inconsistencies.InventSiteId = _inventSiteId;
                inconsistencies.wmsReportSetup = reportSetup;
                inconsistencies.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logStorageLoadUnitInconsistency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates inconsistency log entry for the specified storage load unit.
    /// </summary>
    /// <param name="_itemId">
    /// A <c>ItemId</c> value.
    /// </param>
    /// <param name="_storageLoadUnitRecId">
    /// A record ID reference to the storage load unit.
    /// </param>
    /// <param name="_inconsistencyType">
    /// A specified <c>WMSSpaceUtilInconsistencyType</c> value, that represents the inconsistency type.
    /// </param>
    public void logStorageLoadUnitInconsistency(ItemId _itemId, RecId _storageLoadUnitRecId, WMSSpaceUtilInconsistencyType _inconsistencyType)
    {
        WMSSpaceUtilInconsistencies inconsistencies;

        if (WMSSpaceUtilInconsistencyLogger::isInconsistencyTypeEnabled(_inconsistencyType))
        {
            select firstonly RecId from inconsistencies
                where inconsistencies.ItemId == _itemId
                    && inconsistencies.InconsistencyType == _inconsistencyType
                    && inconsistencies.WMSStorageLoadUnit == _storageLoadUnitRecId
                    && inconsistencies.wmsReportSetup == reportSetup;

            if (!inconsistencies.RecId)
            {
                inconsistencies.ItemId = _itemId;
                inconsistencies.wmsStorageLoadUnit = _storageLoadUnitRecId;
                inconsistencies.InconsistencyType = _inconsistencyType;
                inconsistencies.InventSiteId = WMSStorageLoadUnit::find(_storageLoadUnitRecId).InventSiteId;
                inconsistencies.wmsReportSetup = reportSetup;
                inconsistencies.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logWorkLoadUnitInconsistency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates inconsistency log entry for the specified work load unit.
    /// </summary>
    /// <param name="_itemId">
    /// A <c>ItemId</c> value.
    /// </param>
    /// <param name="_workLoadUnit">
    /// A instance of <c>WMSWorkLoadUnit</c> class.
    /// </param>
    /// <param name="_inconsistencyType">
    /// A specified <c>WMSSpaceUtilInconsistencyType</c> value, that represents the inconsistency type.
    /// </param>
    public void logWorkLoadUnitInconsistency(ItemId _itemId, WMSWorkLoadUnit _workLoadUnit, WMSSpaceUtilInconsistencyType _inconsistencyType)
    {
        WMSSpaceUtilInconsistencies inconsistencies;

        if (WMSSpaceUtilInconsistencyLogger::isInconsistencyTypeEnabled(_inconsistencyType))
        {
            select firstonly RecId from inconsistencies
                where inconsistencies.ItemId == _itemId
                    && inconsistencies.InconsistencyType == _inconsistencyType
                    && inconsistencies.InventSiteId == _workLoadUnit.parmInventSiteId()
                    && inconsistencies.InventLocationID == _workLoadUnit.parmInventLocationId()
                    && inconsistencies.wmsReportSetup == reportSetup;

            if (!inconsistencies.RecId)
            {
                inconsistencies.ItemId = _itemId;
                inconsistencies.InconsistencyType = _inconsistencyType;
                inconsistencies.InventSiteId = _workLoadUnit.parmInventSiteId();
                inconsistencies.InventLocationID = _workLoadUnit.parmInventLocationId();
                inconsistencies.wmsReportSetup = reportSetup;
                inconsistencies.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportSetup</Name>
				<Source><![CDATA[
        public RefRecId parmReportSetup(RefRecId _reportSetup = reportSetup)
    {
        reportSetup = _reportSetup;

        return reportSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static WMSSpaceUtilInconsistencyLogger construct()
    {
        return new WMSSpaceUtilInconsistencyLogger();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInconsistencyTypeEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the configuration key of the <c>WMSSpaceUtilInconsistencyType</c> enumeration value
    /// is satisfiedand the configuration key of the <c>WMSSpaceUtilInconsistencyType</c> enumeration type.
    /// </summary>
    /// <param name="_inconsistencyType">
    /// A <c>WMSSpaceUtilInconsistencyType</c> value, that represents the inconsistency type.
    /// </param>
    /// <returns>
    /// true if the configuration key for the specified value and type are satisfied or there are no
    /// configuration keys defined; otherwise, false.
    /// </returns>
    public static boolean isInconsistencyTypeEnabled(WMSSpaceUtilInconsistencyType _inconsistencyType)
    {
        DictEnum                    dictEnum = new DictEnum(enumNum(WMSSpaceUtilInconsistencyType));
        ConfigurationKeyId          configurationKeyId;
        boolean                     isInconsistencyTypeEnabled = false;

        configurationKeyId = dictEnum.configurationKeyId();

        if (   !configurationKeyId
            || isConfigurationkeyEnabled(configurationKeyId))
        {
            configurationKeyId = dictEnum.value2ConfigurationKey(_inconsistencyType);

            if (   !configurationKeyId
                || isConfigurationkeyEnabled(configurationKeyId))
            {
                isInconsistencyTypeEnabled = true;
            }
        }

        return isInconsistencyTypeEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromReportSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>WMSSpaceUtilInconsistencyLogger</c> class.
    /// </summary>
    /// <param name="_reportSetup">
    /// The ID of the report setup.
    /// </param>
    /// <returns>
    /// An instance of the <c>WMSSpaceUtilInconsistencyLogger</c> class.
    /// </returns>
    public static WMSSpaceUtilInconsistencyLogger newFromReportSetup(RefRecId _reportSetup)
    {
        WMSSpaceUtilInconsistencyLogger inconsistencyLogger = WMSSpaceUtilInconsistencyLogger::construct();
        inconsistencyLogger.parmReportSetup(_reportSetup);

        return inconsistencyLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>