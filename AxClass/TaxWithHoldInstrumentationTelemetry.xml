<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithHoldInstrumentationTelemetry</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is a class that writes log for the Global Withholding tax feature.
/// </summary>
internal class TaxWithholdInstrumentationTelemetry
{
    public const str SettleTransactions = 'Withholding tax transaction creation (on payment)';
    public const str Posting = 'Withholding tax posting';
    public const str PurchTotals = 'Withholding tax purch totals processing';
    public const str PrintReport = 'Withholding tax payment report printing';
    public const str ReportUpdateWHTTransactions = 'Withholding tax report payment processing';
    public const str GWHTax = 'Global withholding tax - %1';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>logfeatureActionEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates an event to log a localization feature operation fact.
    /// </summary>
    /// <param name = "_featureReference">A feature reference id.</param>
    /// <param name = "_caller">An object which calls the event.</param>
    /// <param name = "_event">An event description.</param>
    /// <param name = "_parentType">A string that contains type of parent place where event was called from.</param>
    /// <param name = "_featureEnabled">True, if the feature is enabled; otherwise, false.</param>
    /// <param name = "_isConfigurable">true, if the feature is configurable by ER/GTE; otherwise, false; optional.</param>
    /// <param name = "_success">True, if the feature run was successful; otherwise, false; optional.</param>
    /// <param name="_recordCount">A count of the records that were used for withholding tax calculation.</param>
    /// <param name="_runTime">The total number of milliseconds measured for withholding tax calculation.</param>
    public static void logfeatureActionEvent(
        str _featureReference,
        str _caller,
        str _event,
        str _parentType,
        boolean _featureEnabled,
        boolean _isConfigurable,
        boolean _success,
        int64 _recordCount,
        int64 _runTime)
    {
        Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource::EventWriteGlobalWithholdingTaxFeatureRun(
            _featureReference,
            _caller,
            _event,
            _parentType,
            SysCountryRegionCode::countryInfo(),
            _featureEnabled,
            _isConfigurable,
            _success,
            _recordCount,
            _runTime,
            LedgerParameters::find().TaxWithholdEnableCurrencyExchRate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logGWHTTelemetry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs telemetry data for Global Withholding Tax
    /// </summary>
    /// <param name="_featureReference">
    /// A string that contains future reference number.
    /// </param>
    /// <param name="_caller">
    /// A string that contains name of the function where it was called from.
    /// </param>
    /// <param name="_description">
    /// A string that contains description for created log.
    /// </param>
    /// <param name="_parentType">
    /// A string that contains type of parent place where function was called from.
    /// </param>
    /// <param name="_success">
    /// A boolean parameter that specify case when we call the function:
    /// true if function was finished correctly; otherwise, false - if there was an exception.
    /// </param>
    /// <param name="_recordCount">
    /// A count of the records that were used for withholding tax calculation.
    /// </param>
    /// <param name="_runTime">
    /// The total number of milliseconds measured for withholding tax calculation.
    /// </param>
    public static void logGWHTTelemetry(
        str _featureReference,
        str _caller,
        str _description,
        str _parentType,
        boolean _success,
        int64 _recordCount,
        int64 _runTime)
    {
        real elapsedTimePerTrans = _recordCount ? _runTime / _recordCount : 0;

        GlobalizationInstrumentationHelper::featureRunWithPerformance(
            _featureReference,
            _caller,
            GlobalizationInstrumentationHelper::DefaultFeatureVersion,
            SysCountryRegionCode::countryInfo(),
            _recordCount ? _runTime : 0,
            false,
            _success,
            elapsedTimePerTrans);

        TaxWithholdInstrumentationTelemetry::logfeatureActionEvent(
            _featureReference,
            _caller,
            strFmt(TaxWithHoldInstrumentationTelemetry::GWHTax, _description),
            _parentType,
            LedgerParameters::find().GlobalWithholdingTax,
            false,
            _success,
            _recordCount,
            _runTime);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>