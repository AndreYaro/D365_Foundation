<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceJourMigrationHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CustInvoiceJourMigrationHelper
{
    
    public static SysInstrumentationLogger logger =
        SysInstrumentationLoggerFactory::CreateLogger(classStr(CustInvoiceJourMigrationHelper));

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertCustInvoiceJourData</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Insert all records from CustInvoiceJour to CustInvoiceJourMigratedTmp table.
    /// </summary>
    public static void insertCustInvoiceJourData()
    {
        logger.logInformation(strFmt("Data insertion to CustInvoiceJour started for %1", curExt()));

        int totalNumberOfRecords = CustInvoiceJourMigrationHelper::getTotalNumberOfRecordsInTmpTable();

        CustInvoiceJourMigratedTmp custInvoiceJourMigratedTmp;
        CustInvoiceJour custInvoiceJour;

        if (totalNumberOfRecords == 0)
        {
            ttsbegin;
            insert_recordset custInvoiceJourMigratedTmp (JournalRecId, JournalDataAreaId)
                select RecId, DataAreaId from custInvoiceJour;
            ttscommit;

            logger.logInformation(
                strFmt("Total number of records inserted in CustInvoiceJourMigratedTmp table for legal entity %1 : %2", curExt(),
                CustInvoiceJourMigrationHelper::getTotalNumberOfRecordsInTmpTable()));

        }

        logger.logInformation(strFmt("Data insertion to CustInvoiceJour ended for %1", curExt()));

    }

]]></Source>
			</Method>
			<Method>
				<Name>migrateCustInvoiceJourData</Name>
				<Source><![CDATA[
    /// <summary>
    ///  This method will update all the records in batch of 100.
    /// </summary>
    public static void migrateCustInvoiceJourData()
    {
        const int batchSize = 100;
        const int RetryNum = 3;
        int totalNumberOfRecords = CustInvoiceJourMigrationHelper::getTotalNumberOfNonMigratedRecordsInTmpTable();
        int numberOfBatches = (totalNumberOfRecords/batchSize) + 1 ;
        int currentBatch  = 1;
        
        System.Exception ex;

        logger.logInformation(
            strFmt("Processing start for %1 non migrated records. Total number of batches: %2", totalNumberOfRecords, numberOfBatches));

        while (currentBatch <= numberOfBatches)
        {
            try
            {
                CustInvoiceJourMigrationHelper::migrateTop100Records();
            }
            catch (ex)
            {
                if (xSession::currentRetryCount() >= RetryNum)
                {
                    logger.logError(
                        strFmt("Error encountered for batch number: %1 and retry count: %2", currentBatch, xSession::currentRetryCount()));
                    throw error(ex.ToString());
                }
                else
                {
                    retry;
                }

            }

            currentBatch++;
        }

        logger.logInformation(
            strFmt("Processing ended for %1 non migrated records", totalNumberOfRecords));

    }

]]></Source>
			</Method>
			<Method>
				<Name>migrateTop100Records</Name>
				<Source><![CDATA[
    /// <summary>
    ///  This method will upgrade the top 100 records from
    ///  CustInvoiceJourMigratedTmp table.
    /// </summary>
    public static void migrateTop100Records()
    {
        
        CustInvoiceJourMigratedTmp custInvoiceJourMigratedTmp;
        CustInvoiceJour custInvoiceJour;
        CustInvoiceTrans custInvoiceTrans;
        TaxTrans taxTransLineTax;
        TaxTrans taxTransChargeTax;
        MarkupTrans markupTransLineChargeTax;
        MarkupTrans markupTransLineTotalCharge;


        CustInvoiceJourMigrationHelper::setSkipMethods(custInvoiceJourMigratedTmp);
        CustInvoiceJourMigrationHelper::setSkipMethods(custInvoiceJour);
        CustInvoiceJourMigrationHelper::setSkipMethods(custInvoiceTrans);

        while select firstonly100 custInvoiceJourMigratedTmp
            where custInvoiceJourMigratedTmp.IsMigrated == NoYes::No &&
                custInvoiceJourMigratedTmp.JournalDataAreaId == curExt()
        {

            RefRecId journalRecord = custInvoiceJourMigratedTmp.JournalRecId;
            TaxAmountCur transTotalTax = 0;

            ttsbegin;

            while select custInvoiceTrans
                where custInvoiceTrans.ParentRecId == journalRecord
            {
                custInvoiceTrans.selectForUpdate(true);
                
                // line tax
                select sum(SourceRegulateAmountCur) from taxTransLineTax
                    where taxTransLineTax.SourceRecId == custInvoiceTrans.RecId &&
                        taxTransLineTax.SourceTableId == tableNum(CustInvoiceTrans) &&
                        taxTransLineTax.InventTransId == custInvoiceTrans.InventTransId &&
                        taxTransLineTax.TaxOrigin != TaxOrigin::TaxReversed;
                
                if(taxTransLineTax.SourceRegulateAmountCur)
                {
                    custInvoiceTrans.TotalTax = taxTransLineTax.SourceRegulateAmountCur * -1;
                }

                // If SalesId is not present i.e it is a FTI , then we will not calculate line charge except consolidated country regions
                if (custInvoiceTrans.SalesId || SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion())
                {
                    // total line charge calculation
                    select sum(CalculatedAmount) from markupTransLineTotalCharge
                        where markupTransLineTotalCharge.TransRecId == custInvoiceTrans.RecId &&
                            markupTransLineTotalCharge.TransTableId == tableNum(CustInvoiceTrans);

                    // if line charge is there then calcuate the line charge tax
                    if(markupTransLineTotalCharge.CalculatedAmount)
                    {
                        custInvoiceTrans.TotalCharge = markupTransLineTotalCharge.CalculatedAmount;

                        // line charge tax calculation
                        select sum(SourceRegulateAmountCur) from taxTransChargeTax
                        join markupTransLineChargeTax
                            where markupTransLineChargeTax.RecId == taxTransChargeTax.SourceRecId &&
                                markupTransLineChargeTax.TransRecId == custInvoiceTrans.RecId &&
                                markupTransLineChargeTax.TransTableId == tableNum(CustInvoiceTrans) &&
                                taxTransChargeTax.SourceTableId == tableNum(MarkupTrans);
                    
                        if(taxTransChargeTax.SourceRegulateAmountCur)
                        {
                            custInvoiceTrans.TotalTax += (taxTransChargeTax.SourceRegulateAmountCur * -1);
                        }
                    }
                }
               
                if(custInvoiceTrans.TotalTax != 0 || custInvoiceTrans.TotalCharge != 0)
                {
                    transTotalTax += custInvoiceTrans.TotalTax;
                    custInvoiceTrans.doUpdate();
                }
            }

            select forupdate custInvoiceJour
                where custInvoiceJour.RecId == journalRecord;

            if (custInvoiceJour.SumTax != transTotalTax)
            {
                custInvoiceJour.HeaderTax = custInvoiceJour.SumTax - transTotalTax;
                custInvoiceJour.doUpdate();
            }

            custInvoiceJourMigratedTmp.selectForUpdate(true);
            custInvoiceJourMigratedTmp.IsMigrated = NoYes::Yes;
            custInvoiceJourMigratedTmp.doUpdate();

            ttscommit;

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalNumberOfRecordsInTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///  This method will return the total number of records present in
    ///  CustInvoiceJourMigratedTmp table for a given DataAreaID.
    /// </summary>
    /// <returns>total number of records</returns>
    public static int getTotalNumberOfRecordsInTmpTable()
    {
        CustInvoiceJourMigratedTmp custInvoiceJourMigratedTmp;
        select count(RecId) from custInvoiceJourMigratedTmp
            where custInvoiceJourMigratedTmp.JournalDataAreaId == curext();
        
        return int642int(custInvoiceJourMigratedTmp.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalNumberOfNonMigratedRecordsInTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///  This method will return the total number of non migrated records in
    ///  CustInvoiceJourMigratedTmp table for a given DataAreaID.
    /// </summary>
    /// <returns>total number of non migrated records</returns>
    public static int getTotalNumberOfNonMigratedRecordsInTmpTable()
    {
        CustInvoiceJourMigratedTmp custInvoiceJourMigratedTmp;
        select count(RecId) from custInvoiceJourMigratedTmp
            where custInvoiceJourMigratedTmp.IsMigrated == NoYes::No &&
                custInvoiceJourMigratedTmp.JournalDataAreaId == curext();
        
        return int642int(custInvoiceJourMigratedTmp.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSkipMethods</Name>
				<Source><![CDATA[
    public static void setSkipMethods(Common _common)
    {
        _common.skipAosValidation(true);
        _common.skipDatabaseLog(true);
        _common.skipDataMethods(true);
        _common.skipEvents(true);
        _common.skipPostLoad(true);
        _common.skipNumberSequenceCheck(true);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>