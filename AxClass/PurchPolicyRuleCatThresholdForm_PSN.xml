<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchPolicyRuleCatThresholdForm_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Performs validations for the <c>PurchPolicyRuleCatThreshold_PSN</c> form.
/// </summary>
class PurchPolicyRuleCatThresholdForm_PSN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>noParentOrChildCategoryIsActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verify that no parent of child of a category is active when
    /// the selectected category get active.
    /// </summary>
    /// <param  name='_ecoResCategorySelected'>
    /// The selected <c>EcoResCategory</c> record to do the search from.
    /// </param>
    /// <param  name='_policyRule'>
    /// The SysPolicyRule associated with the categories.
    /// </param>
    /// <returns>
    /// Return a container[bool result, Category Name],  result is true when no parent or child of the selected category
    /// is active, otherwise return false.
    /// </returns>
    ///
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static container noParentOrChildCategoryIsActive(EcoResCategory _ecoResCategorySelected,  SysPolicyRule _policyRule)
    {
        boolean ret = true;
        EcoResCategoryName categoryName = "";

        EcoResCategory                  selectedCategoryAndAncestors, selectedCategoryDescendants;
        PurchPolicyRuleCatThreshold_PSN tmpPurchPolicyRuleCatThreshold;

        // Verify parent are not active
        if (ret)
        {
            //check for active parent
            while select RecId, Name from selectedCategoryAndAncestors
                where selectedCategoryAndAncestors.NestedSetLeft <= _ecoResCategorySelected.NestedSetLeft
                    && selectedCategoryAndAncestors.NestedSetRight >= _ecoResCategorySelected.NestedSetRight
                    && selectedCategoryAndAncestors.CategoryHierarchy == _ecoResCategorySelected.CategoryHierarchy
            {
                select Active from tmpPurchPolicyRuleCatThreshold
                    where tmpPurchPolicyRuleCatThreshold.EcoResCategory == selectedCategoryAndAncestors.RecId
                    &&    tmpPurchPolicyRuleCatThreshold.SysPolicyRule == _policyRule.RecId;

                if (tmpPurchPolicyRuleCatThreshold.Active == NoYes::Yes)
                {
                    ret = false;
                    categoryName = selectedCategoryAndAncestors.Name;
                    break;
                }
            }
        }

        // verify Children are not active
        if (ret)
        {
            //check childeren for active category
            while select RecId, Name from selectedCategoryDescendants
                    where selectedCategoryDescendants.NestedSetLeft > _ecoResCategorySelected.NestedSetLeft
                        && selectedCategoryDescendants.NestedSetRight < _ecoResCategorySelected.NestedSetRight
                        && selectedCategoryDescendants.CategoryHierarchy == _ecoResCategorySelected.CategoryHierarchy
            {
                select Active from tmpPurchPolicyRuleCatThreshold
                    where tmpPurchPolicyRuleCatThreshold.EcoResCategory == selectedCategoryDescendants.RecId;

                if (tmpPurchPolicyRuleCatThreshold.Active == NoYes::Yes)
                {
                    ret = false;
                    categoryName = selectedCategoryDescendants.Name;
                    break;
                }
            }
        }

        return [ret, categoryName];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>