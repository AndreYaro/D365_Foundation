<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjAdjustAccounting_PostEmpl</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to update original hour transaction and post accounting adjustments.
/// </summary>
public class ProjAdjustAccounting_PostEmpl extends ProjAdjustAccounting_Post
{
	private ProjEmplTrans projEmplTrans;
	
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkOrigVoucher</Name>
				<Source><![CDATA[
	/// <summary>
    /// Checks if the voucher passed is associated with the original <c>ProjEmplTrans</c> posted transaction.
    /// </summary>
    /// <param name = "_voucher">A voucher.</param>
    /// <returns>
    ///  true if <c>ProjEmplTrans</c> has the voucher; otherwise, false.
	/// </returns>
	public boolean checkOrigVoucher(Voucher _voucher)
    {
        return projEmplTrans.VoucherJournal == _voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjEmplTrans</Name>
				<Source><![CDATA[
	public ProjEmplTrans parmProjEmplTrans(ProjEmplTrans _projEmplTrans = ProjEmplTrans)
    {
        projEmplTrans = _projEmplTrans;
        return projEmplTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
	public void new(Common _origTrans)
    {
        super();
        projEmplTrans = _origTrans as ProjEmplTrans;
        
		if (!projEmplTrans)
        {
            throw error(Error::missingRecord(tableStr(ProjEmplTrans)));
        }
        this.parmOrigTransId(projEmplTrans.TransId);
        this.parmNewVoucher(projEmplTrans.VoucherJournal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjEmplTrans</Name>
				<Source><![CDATA[
    private void updateProjEmplTrans(ProjEmplTrans _projEmplTrans, ProjTransIdBase _projTransId, Voucher _subledgerVoucher)
    {
        this.updateRelatedTablesWithNewDimension(_projEmplTrans, _projTransID, _subledgerVoucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRelatedTables</Name>
				<Source><![CDATA[
    private void updateRelatedTables(ProjEmplTrans _projEmplTrans, ProjTransIdBase _projTransId, Voucher _subledgerVoucher)
    {
        // Cost
        ProjEmplTransCost projEmplTransCost;
        update_recordset projEmplTransCost
        setting
            TransId = _projTransId
        where projEmplTransCost.TransId == _projEmplTrans.TransId
            && projEmplTransCost.DataAreaId == _projEmplTrans.DataAreaId;

        //Sale
        ProjEmplTransSale projEmplTransSale;
        update_recordset projEmplTransSale
        setting
            TransId = _projTransId
        where projEmplTransSale.TransId == _projEmplTrans.TransId
            && projEmplTransSale.DataAreaId == _projEmplTrans.DataAreaId;
 
        this.updateProjInvoiceEmpl(_projEmplTrans, _projTransId, _subledgerVoucher);

        ProjPostedTransTable projPostedTransTable;
        select firstonly forupdate projPostedTransTable
            where projPostedTransTable.TransId == _projEmplTrans.TransId;
        projPostedTransTable.TransId = _projTransId;
        projPostedTransTable.update();

  
        ProjEmplTrans projEmplTransBuff;
        select firstonly forupdate RecId, TransId, VoucherJournal from  projEmplTransBuff
            where projEmplTransBuff.TransId == _projEmplTrans.TransId;
        
        projEmplTransBuff.TransId = _projTransId;
  
        Set unAdjustedSet = this.parmUnAdjustedVoucherSet();
        // Only update voucher if there was any adjustments made on the original voucher.
        if (!unAdjustedSet.in(projEmplTransBuff.VoucherJournal) && _subledgerVoucher)
        {
            projEmplTransBuff.VoucherJournal = _subledgerVoucher;
        }

        projEmplTransBuff.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRelatedTablesWithNewDimension</Name>
				<Source><![CDATA[
    private void updateRelatedTablesWithNewDimension(ProjEmplTrans _projEmplTrans, ProjTransIdBase _projTransId, Voucher _subledgerVoucher)
    {
        DimensionDefault mergedDimension;
        if (dataContract)
        {
            mergedDimension = dataContract.parmMergedDimension();
        }

        if (!mergedDimension)
        {
            this.updateRelatedTables(_projEmplTrans, _projTransID, _subledgerVoucher);
        }
        else
        {
            // Cost
            ProjEmplTransCost projEmplTransCost;
            update_recordset projEmplTransCost
            setting
                TransId = _projTransId, DefaultDimension = mergedDimension
            where projEmplTransCost.TransId == _projEmplTrans.TransId
                && projEmplTransCost.DataAreaId == _projEmplTrans.DataAreaId;

            //Sale
            ProjEmplTransSale projEmplTransSale;
            update_recordset projEmplTransSale
            setting
                TransId = _projTransId, DefaultDimension = mergedDimension
            where projEmplTransSale.TransId == _projEmplTrans.TransId
                && projEmplTransSale.DataAreaId == _projEmplTrans.DataAreaId;
 
            this.updateProjInvoiceEmpl(_projEmplTrans, _projTransId, _subledgerVoucher);
            
            // Posted Trans
            ProjPostedTransTable projPostedTransTable = ProjPostedTransTable::findByTransId(_projEmplTrans.TransId, true);
            projPostedTransTable.TransId = _projTransID;
            projPostedTransTable.DefaultDimension = mergedDimension;
            projPostedTransTable.update();
            
            // Parent trans record
            ProjEmplTrans projEmplTransBuff = ProjEmplTrans::find(_projEmplTrans.TransId, true);
            projEmplTransBuff.TransId = _projTransId;
            projEmplTransBuff.DefaultDimension = mergedDimension;

            Set unAdjustedSet = this.parmUnAdjustedVoucherSet();
            // Only update voucher if there was any adjustments made on the original voucher.
            if (!unAdjustedSet.in(projEmplTransBuff.VoucherJournal) && _subledgerVoucher)
            {
                projEmplTransBuff.VoucherJournal = _subledgerVoucher;
            }

            projEmplTransBuff.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overridden method for updating original posted hour transaction.
    /// </summary>
    public void updateProjTrans()
    {
        ProjTransIdBase transId = this.parmNewTransId();
        Voucher voucher = this.parmNewVoucher();
		if (transId && voucher)
        {
            this.updateProjEmplTrans(projEmplTrans, transId, voucher);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjInvoiceEmpl</Name>
				<Source><![CDATA[
    private void updateProjInvoiceEmpl(ProjEmplTrans _projEmplTrans, ProjTransIdBase _projTransId, Voucher _voucher)
    {
        ProjProposalJour projProposalJour;
        ProjInvoiceJour projInvoiceJour;
        ProjProposalEmpl projProposalEmpl;
        ProjInvoiceEmpl projInvoiceEmpl;
        Set unAdjustedSet = this.parmUnAdjustedVoucherSet();
 
        while select forupdate projProposalJour
            join forupdate projProposalEmpl
            where projProposalJour.ProposalId == projProposalEmpl.ProposalId
            && projProposalEmpl.TransId == _projEmplTrans.TransId
            outer join forupdate projInvoiceJour
            join forupdate projInvoiceEmpl
            where projInvoiceJour.ProposalId == projProposalJour.ProposalId
            && projInvoiceEmpl.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
            && projInvoiceEmpl.InvoiceDate == projInvoiceJour.InvoiceDate
            && projInvoiceEmpl.TransId == projProposalEmpl.TransId
        {
            projProposalEmpl.TransId = _projTransId;
            projProposalEmpl.update();
   
            // ProjProposalJour.LedgerVoucher only needs to be updated if any
            // voucher entry for an invoice was adjusted.
            if(projProposalJour.LedgerVoucher
                && unAdjustedSet
                && !unAdjustedSet.in(projProposalJour.LedgerVoucher))
            {
                projProposalJour.LedgerVoucher = _voucher;
                projProposalJour.update();
            }

            if (projInvoiceJour)
            {
                if (!unAdjustedSet.in(projInvoiceJour.LedgerVoucher))
                {
                    projInvoiceJour.LedgerVoucher = _voucher;
                    projInvoiceJour.update();
                }
                
                projInvoiceEmpl.TransId = _projTransId;
                projInvoiceEmpl.update();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>