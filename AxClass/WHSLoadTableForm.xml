<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLoadTableForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSLoadTableForm</c> class contains the business logic for the <c>WHSLoadTable</c> form.
/// </summary>
class WHSLoadTableForm
{
    #define.posNumberOfShipments        (1)
    #define.posNumberOfContainers       (2)
    #define.posTotalVolume              (3)
    #define.posTotalValue               (4)
    #define.posWeightRemaining          (5)
    #define.posTotalWeight              (6)
    #define.posLoadLines                (7)
    #define.posAccountName              (8)
    #define.posWave                     (9)
    #define.posTmsDisplayAppointmentId  (10)
    #define.posWorkStatus               (11)

    Map         mapDisplayFieldsCachedValues;
    WHSLoadId   whsLoadId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountNameValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display account name value of a load.
    /// </summary>
    /// <returns>
    /// The account name value of a load.
    /// </returns>
    public Name accountNameValue()
    {
        return conPeek(this.mapDisplayFieldsCachedValuesLookup(), #posAccountName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>apptId_jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
	/// Navigates to <c>TMSAppointment</c> record.
	/// </summary>
	/// <param name="_value">
	/// Appointment id of the load.
	/// </param>
	/// <param name="_caller">
	/// Caller form object.
	/// </param>
    void apptId_jumpRef(str _value, object _caller)
    {
        Args            args = new Args();
        TMSAppointment  appt = TMSAppointment::find(_value);

        args.caller(_caller);

        if (appt)
        {
            args.record(appt);
        }

        new MenuFunction(menuitemdisplaystr(TMSAppointment), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyApptId_jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
	/// Navigates to <c>TMSAppointment</c> record.
	/// </summary>
	/// <param name="_value">
	/// Appointment id.
	/// </param>
	/// <param name="_caller">
	/// Caller form object.
	/// </param>
    void copyApptId_jumpRef(str _value, object _caller)
    {
        Args            args = new Args();
        TMSAppointment  appt = TMSAppointment::find(_value);

        args.caller(_caller);

        if (appt)
        {
            args.record(appt);
        }

        new MenuFunction(menuitemdisplaystr(TMSAppointment), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLoadIdFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a range filter of load ids associated to a given orderNum and inventTransType.
    /// </summary>
    /// <param name="_orderNum">
    /// Order Number of the <c>WHSLoadLine</c> to find load ids for.
    /// </param>
    /// <param name="_inventTransType">
    /// Inventory transaction type of the <c>WHSLoadLine</c> to find load ids for.
    /// </param>
    /// <returns>
    /// Comma separated string of load line load ids.
    /// </returns>
    /// <remarks>
    /// The string will only contain load ids from load lines which are not transport requests.
    /// </remarks>
    public str createLoadIdFilter(WHSOrderNum _orderNum, InventTransType _inventTransType)
    {
        WHSLoadLine     loadLine;
        str             loadIdList;

        if (_orderNum)
        {
            while select LoadId from loadLine
                group by LoadId
                where loadLine.OrderNum         == _orderNum
                   && loadLine.InventTransType  == _inventTransType
                   && loadLine.TransportRequest == NoYes::No
            {
                loadIdList += loadIdList ? ',' : '';
                loadIdList += loadLine.LoadId;
            }
        }
        return loadIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLoadIdFilterFromInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a range filter of load IDs associated to a given InventTransId and InventTransType.
    /// </summary>
    /// <param name="_inventTransId">Lot ID of the <c>WHSLoadLine</c> to find load IDs for.</param>
    /// <param name="_inventTransType">Inventory transaction type of the <c>WHSLoadLine</c> to find load IDs for.</param>
    /// <returns>Comma separated string of load line load IDs.</returns>
    /// <remarks>
    /// The string will only contain load IDs from load lines which are not transport requests.
    /// </remarks>
    [Hookable(false)]
    internal str createLoadIdFilterFromInventTransId(InventTransId _inventTransId, InventTransType _inventTransType)
    {
        str loadIdList;

        if (_inventTransId)
        {
            WHSLoadLine loadLine;

            while select LoadId from loadLine
                group by LoadId
                where loadLine.InventTransId    == _inventTransId
                   && loadLine.InventTransType  == _inventTransType
                   && loadLine.TransportRequest == NoYes::No
            {
                loadIdList += loadIdList ? ',' : '';
                loadIdList += loadLine.LoadId;
            }
        }
        return loadIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>equipmentcode_jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
	/// Navigates to <c>TMSEquipment</c> record.
	/// </summary>
	/// <param name="_value">
	/// Equipment code of the load.
	/// </param>
	/// <param name="_caller">
	/// Caller form object.
	/// </param>
    void equipmentcode_jumpRef(str  _value, object  _caller)
    {
        Args            args = new Args();
        TMSEquipment    equipment = TMSEquipment::find(_value);

        args.caller(_caller);

        if (equipment)
        {
            args.record(equipment);
        }

        new MenuFunction(menuitemdisplaystr(TMSEquipment), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadLinesValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display number of lines of a load.
    /// </summary>
    /// <returns>
    /// The number of lines value of a load.
    /// </returns>
    public WHSNumOfLoadLines loadLinesValue()
    {
        return conPeek(this.mapDisplayFieldsCachedValuesLookup(), #posLoadLines);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapDisplayFieldsCachedValuesLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Methods for retrieving the container that contains values of the display methods for a given Load ID, if the
    /// container does not exist, then retrieves required data and add it to the cache
    /// </summary>
    /// <returns>
    /// A container populated with values form the display methods for a given Load ID
    /// </returns>
    private container mapDisplayFieldsCachedValuesLookup()
    {
        WHSLoadId key = this.parmWHSLoadId();
        container displayFields;

        if (key)
        {
            if (!mapDisplayFieldsCachedValues)
            {
                mapDisplayFieldsCachedValues = new Map(Types::String, Types::Container);
            }

            if (mapDisplayFieldsCachedValues.exists(key))
            {
                displayFields = mapDisplayFieldsCachedValues.lookup(key);
            }
            else
            {
                displayFields = WHSLoadTableForm::fillDisplayFieldsCache(key);
                mapDisplayFieldsCachedValues.insert(key, displayFields);
            }
        }

        return displayFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfContainersValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display number of containers of a load.
    /// </summary>
    /// <returns>
    /// The number of containers of a load.
    /// </returns>
    public WHSNumOfContainers numberOfContainersValue()
    {
        return conPeek(this.mapDisplayFieldsCachedValuesLookup(), #posNumberOfContainers);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfShipmentsValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display number of shipments of a load.
    /// </summary>
    /// <returns>
    /// The number of shipments of a load.
    /// </returns>
    public WHSFromNumber numberOfShipmentsValue()
    {
        return conPeek(this.mapDisplayFieldsCachedValuesLookup(), #posNumberOfShipments);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWHSLoadId</Name>
				<Source><![CDATA[
    public WHSLoadId  parmWHSLoadId(WHSLoadId  _loadId = whsLoadId)
    {
        whsLoadId = _loadId;

        return whsLoadId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshDisplayFieldsCachedValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Methods for refreshing the container that contains values of the display methods for a given Load ID
    /// </summary>
    /// <param name="_loadId">
    /// The load Id of the load being evaluated.
    /// </param>
    public void  refreshDisplayFieldsCachedValues(WHSLoadId  _loadId)
    {
        if (_loadId && mapDisplayFieldsCachedValues)
        {
            mapDisplayFieldsCachedValues.insert(_loadId, WHSLoadTableForm::fillDisplayFieldsCache(_loadId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsDisplayAppointmentIdValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display TMS Appointment ID of a load.
    /// </summary>
    /// <returns>
    /// The TMS Appointment ID of a load.
    /// </returns>
    public TMSApptId tmsDisplayAppointmentIdValue()
    {
        return conPeek(this.mapDisplayFieldsCachedValuesLookup(), #posTmsDisplayAppointmentId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display total value of a load.
    /// </summary>
    /// <returns>
    /// The total value of a load.
    /// </returns>
    public Amount totalValue()
    {
        return conPeek(this.mapDisplayFieldsCachedValuesLookup(), #posTotalValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalVolumeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display total volume of a load.
    /// </summary>
    /// <returns>
    /// The total volume of a load.
    /// </returns>
    public Volume totalVolumeValue()
    {
        return conPeek(this.mapDisplayFieldsCachedValuesLookup(), #posTotalVolume);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalWeightValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display the total weight of a load.
    /// </summary>
    /// <returns>
    /// The total weight of a load.
    /// </returns>
    public Weight totalWeightValue()
    {
        return conPeek(this.mapDisplayFieldsCachedValuesLookup(), #posTotalWeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>waveValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display the wave tied to a load.
    /// </summary>
    /// <returns>
    /// The wave tied to the load.
    /// </returns>
    public WHSWaveId waveValue()
    {
        return conPeek(this.mapDisplayFieldsCachedValuesLookup(), #posWave);
    }

]]></Source>
			</Method>
			<Method>
				<Name>weightRemainingValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display weight remaining of a load.
    /// </summary>
    /// <returns>
    /// The weight remaining value of a load.
    /// </returns>
    public Weight weightRemainingValue()
    {
        return conPeek(this.mapDisplayFieldsCachedValuesLookup(), #posWeightRemaining);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workStatusValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display work status of a load.
    /// </summary>
    /// <returns>
    /// The work status of a load.
    /// </returns>
    public WHSLoadUserDef1 workStatusValue()
    {
        return conPeek(this.mapDisplayFieldsCachedValuesLookup(), #posWorkStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDisplayFieldsCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Methods to retrieve values from different display methods and then insert them into a container
    /// </summary>
    /// <param name="_loadId">
    /// The load Id of the load being evaluated.
    /// </param>
    /// <returns>
    /// A container populated with values form the display methods
    /// </returns>
    /// <remarks>
    /// Remember changing the #define values in the WHSLoadTableForm  class declaration when the container content is changed.
    /// </remarks>
    private static container fillDisplayFieldsCache(WHSLoadId _loadId)
    {
        container       displayFields;

        if (_loadId)
        {
            whsLoadTable whsLoadTable = whsLoadTable::find(_loadId);

            if (whsLoadTable.RecId != 0)
            {
                //The sequence of inserting data into the container follows the position value described in macros
                //example: posNumberOfShipments is first, posNumberOfContainers is second etc.
                displayFields = [ whsLoadTable.displayNumberOfShipments(),
                                  whsLoadTable.displayNumberOfContainers(),
                                  whsLoadTable.displayTotalVolume(),
                                  whsLoadTable.displayTotalValue(),
                                  whsLoadTable.displayWeightRemaining(),
                                  whsLoadTable.displayTotalWeight(),
                                  whsLoadTable.displayLoadLines(),
                                  whsLoadTable.displayAccountName(),
                                  whsLoadTable.displayWave(),
                                  whsLoadTable.tmsDisplayAppointmentId(),
                                  whsLoadTable.displayWorkStatus(),
                                  whsLoadTable.displayTotalContainerTareWeight()];
            }
        }

        return displayFields;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>