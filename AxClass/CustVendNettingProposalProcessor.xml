<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendNettingProposalProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CustVendNettingProposalProcessor extends SysOperationServiceBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    internal void process(CustVendNettingProposalContract custVendNettingProposalContract)
    {
        CustVendNettingRule rule = CustVendNettingRule::find(custVendNettingProposalContract.parmRule());
        CustVendNettingRuleDriver driver = new CustVendNettingRuleDriver();
        NettingRuleProcessParameter parameter = NettingRuleProcessParameter::construct(
            custVendNettingProposalContract.parmTransDate(),
            custVendNettingProposalContract.parmInvoiceDueDate(),
            custVendNettingProposalContract.parmEnablePreview());
        driver.executeRule(rule, parameter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAutomation</Name>
				<Source><![CDATA[
    internal void processAutomation(
        ProcessScheduleWorkItem _processScheduleWorkItem,
        CustVendNettingProposalContract _custVendNettingProposalContract)
    {
        ProcessExecutionMessage integrationMessage;
        ProcessExecutionSourceStatus processExecutionSourceStatus = ProcessExecutionSourceStatus::Success;
        try
        {
            this.process(_custVendNettingProposalContract);
            integrationMessage = "@CashManagement:NettingAutomationSuccessLog";
        }
        catch
        {
            SysInfoLogEnumerator infoLogEnumerator = SysInfoLogEnumerator::newData(infolog.infologData());
            while (infoLogEnumerator.moveNext())
            {
                SysInfologMessageStruct infoMessageStruct = SysInfologMessageStruct::construct(infoLogEnumerator.currentMessage());
                integrationMessage = integrationMessage + infoMessageStruct.message() + '\n';
            }
            processExecutionSourceStatus = ProcessExecutionSourceStatus::Error;
            throw;
        }
        finally
        {
            this.createInsertProcessExecutionLog(_processScheduleWorkItem, integrationMessage, processExecutionSourceStatus);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInsertProcessExecutionLog</Name>
				<Source><![CDATA[
    private void createInsertProcessExecutionLog(
        ProcessScheduleWorkItem _processScheduleWorkItem,
        ProcessExecutionMessage _message,
        ProcessExecutionSourceStatus _processExecutionSourceStatus)
    {
        ProcessExecutionSourceLinkItem sourceLinkItem = ProcessExecutionSourceLinkItem::construct();
        sourceLinkItem.parmExecutionId(_processScheduleWorkItem.parmExecutionId());
        sourceLinkItem.parmProcessScheduleOccurrenceRecId(_processScheduleWorkItem.parmProcessScheduleOccurrenceRecId());
        sourceLinkItem.parmProcessScheduleSeriesPatternRecId(_processScheduleWorkItem.parmProcessScheduleSeriesPatternRecId());
        sourceLinkItem.parmMessage(_message);
        sourceLinkItem.parmExecutionSourceStatus(_processExecutionSourceStatus);
        ProcessExecutionSourceLink sourceLink = ProcessExecutionSourceLink::insertSourceLink(sourceLinkItem);

        Exception exception = _processExecutionSourceStatus == ProcessExecutionSourceStatus::Success ? Exception::Info : Exception::Error;
        ProcessExecutionMessageLogItem processExecutionMessageLogItem = ProcessExecutionMessageLogItem::newFromProcessExecutionSourceLinkAndMessage(
            sourceLink.RecId,
            exception,
            _message);
        ProcessExecutionMessageLog::insertMessage(processExecutionMessageLogItem);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>