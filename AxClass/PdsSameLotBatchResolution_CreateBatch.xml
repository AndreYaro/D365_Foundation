<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsSameLotBatchResolution_CreateBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Same Lot Batch reservation solution. This class resolves the same lot
/// batch reservation issue by creating a new batchId.
/// </summary>
/// <remarks>
/// The class needs the movement parameters set, before executing the resolution
/// procedure.
/// movement:  The movement to resolve the reservation issue for
/// </remarks>
class PdsSameLotBatchResolution_CreateBatch implements PdsSameLotBatchResolution
{
    InventMovement  movement;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>abortManualReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indication if the manual reservation has to be aborted after executing the resolution procedure.
    /// </summary>
    /// <returns>always returns false</returns>
    /// <remarks>
    /// The manual reservation does not need to be aborted after executing the
    /// resolution procedure as the user then can actually reserve the quantity, that
    /// he tried to reserve in the first place.
    /// </remarks>
    public boolean abortManualReservation()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>continueReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if the reservation process should continue
    /// </summary>
    /// <returns>
    /// false, no continuation of reservation
    /// </returns>
    /// <remarks>
    /// The reservation does not need to be aborted after executing the
    /// resolution procedure as the user then can actually reserve the quantity, that
    /// he tried to reserve in the first place.
    /// </remarks>
    public boolean continueReservation()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMovement</Name>
				<Source><![CDATA[
    public InventMovement parmMovement(InventMovement _movement = movement)
    {
        if (!prmisdefault(_movement))
        {
            movement = _movement;
        }

        return movement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine how the conflict should be resolved
    /// </summary>
    /// <remarks>
    /// The movement will be updated to include create a new batchId and this
    /// new batch will be updated, as part of a new inventDimId, in the original
    /// the transaction which caused the conflict.
    /// </remarks>
    public void resolve()
    {
        InventBatch inventBatch;
        InventDim   inventDim;
        SalesLine salesLine;

        salesLine = movement.buffer();

        inventBatch = InventBatch::pdsFindOrCreateSameLotBatch(
                        movement, salesLine.QtyOrdered);

        inventDim.data(movement.inventdim());
        inventDim.InventBatchId = inventBatch.InventBatchId;
        inventDim = InventDim::findOrCreate(inventDim);

        if (movement.transId()
            && movement.transIdSum().issue() == movement.transQty())
        {
            InventUpd_Reservation::updateReserveBuffer(
                        movement.buffer(),
                        -movement.transIdSum().reserved(),
                        movement.inventMovSubType(),
                        -movement.transIdSum().pdsCWReserved());
            movement.transIdSum(true);
            InventUpd_ChangeDimension::updateForceDimInventTrans(
                    movement,
                    movement.transIdSum().onOrder(),
                    movement.inventdim(),
                    inventDim,
                    true,
                    false,
                    false,
                    movement.transIdSum().pdsCWOnOrder());

            movement.setInventDimId(inventDim.InventDimId);
            movement.updateDoBuffer();
        }
        else
        {
            movement.setInventDimId(inventDim.InventDimId);
        }

        info(strfmt("@PDS1051", inventBatch.InventBatchId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PdsSameLotBatchResolution_CreateBatch construct()
    {
        return new PdsSameLotBatchResolution_CreateBatch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiate a new resolution procedure with the passed parameters.
    /// </summary>
    /// <param name="_movement">
    /// The movement to resolve the reservation issue for
    /// </param>
    /// <returns>
    /// The new resolution procedure
    /// </returns>
    /// <remarks>
    /// New InventdimId will be added to the calling movement
    /// </remarks>
    public static PdsSameLotBatchResolution_CreateBatch newParameters(
        InventMovement  _movement)
    {
        PdsSameLotBatchResolution_CreateBatch   resolution;

        resolution = PdsSameLotBatchResolution_CreateBatch::construct();
        resolution.parmMovement(_movement);

        return resolution;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>