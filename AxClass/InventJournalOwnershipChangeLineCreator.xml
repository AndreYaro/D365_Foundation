<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventJournalOwnershipChangeLineCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventJournalOwnershipChangeLineCreator</c> class creates inventory ownership change journal lines.
/// </summary>
public class InventJournalOwnershipChangeLineCreator
{
    QueryRun            queryRun;
    InventJournalTable  inventJournalTable;
    JournalTableData    journalTableData;
    InventOwnerId       legalEntityOwnerId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(JournalId _journalId, QueryRun _queryRun)
    {
        queryRun = _queryRun;

        inventJournalTable = InventJournalTable::find(_journalId, true);
        journalTableData = JournalTableData::newTable(inventJournalTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventJournalOwnershipChangeLineCreator</c> class.
    /// </summary>
    /// <param name = "_journalId">The ID of the journal for which the lines should be created.</param>
    /// <param name = "_queryRun">Query run over data from which the lines should be created.</param>
    /// <returns>An instance of the <c>InventJournalOwnershipChangeLineCreator</c> class.</returns>
    public static InventJournalOwnershipChangeLineCreator newFromParameters(JournalId _journalId, QueryRun _queryRun)
    {
        if (!_journalId || !_queryRun)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        return new InventJournalOwnershipChangeLineCreator(_journalId, _queryRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates inventory ownership change journal lines.
    /// </summary>
    public void createLines()
    {
        InventJournalOwnershipChangeSummarizedLineDataCollection summarizedLineData = this.summarizeLineData();
        this.createJournalLines(summarizedLineData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>summarizeLineData</Name>
				<Source><![CDATA[
    private InventJournalOwnershipChangeSummarizedLineDataCollection summarizeLineData()
    {
        InventJournalOwnershipChangeSummarizedLineDataCollection collection = InventJournalOwnershipChangeSummarizedLineDataCollection::construct();

        while (queryRun.next())
        {
            InventJournalOwnershipChangeLineData lineData = InventJournalOwnershipChangeLineData::newFromCurrentQueryRunResult(queryRun);
            collection.add(lineData);
        }

        return collection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLines</Name>
				<Source><![CDATA[
    private void createJournalLines(InventJournalOwnershipChangeSummarizedLineDataCollection _lineDataCollection)
    {
        ttsbegin;

        LineNum lineNum = InventJournalTrans::lastLineNum(inventJournalTable.JournalId);
        Voucher lastVoucher;

        InventJournalTrans inventJournalTrans;
        JournalTransData journalTransData = journalTableData.journalStatic().newJournalTransData(inventJournalTrans, journalTableData);

        _lineDataCollection.initializeEnumerator();

        while (_lineDataCollection.moveNext())
        {
            lineNum++;

            inventJournalTrans.clear();
            journalTransData.initFromJournalTable();

            inventJournalTrans.LineNum = lineNum;
            inventJournalTrans.TransDate = DateTimeUtil::getToday(DateTimeUtil::getClientMachineTimeZone());

            InventJournalOwnershipChangeLineData lineData = _lineDataCollection.current();
            this.initJournalLineFromLineData(inventJournalTrans, lineData);

            if (inventJournalTable.VoucherDraw == JournalVoucherDraw::Entering)
            {
                journalTransData.initVoucher(lastVoucher, false);
            }

            journalTransData.addTotal(false, false);
            inventJournalTrans.insert(NoYes::Yes);

            lastVoucher = inventJournalTrans.Voucher;

            this.linkJournalLineToProductionBomLines(inventJournalTrans, lineData);
        }

        journalTableData.journalTable().update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalLineFromLineData</Name>
				<Source><![CDATA[
    private void initJournalLineFromLineData(InventJournalTrans _inventJournalTrans, InventJournalOwnershipChangeLineData _lineData)
    {
        _inventJournalTrans.initFromInventTable(InventTable::find(_lineData.parmItemId()));

        _inventJournalTrans.Qty = _lineData.parmQuantity();
        _inventJournalTrans.InventDimId = _lineData.parmInventDimId();

        InventDim inventDimTo = InventDim::find(_inventJournalTrans.InventDimId);
        inventDimTo.InventOwnerId_RU = this.legalEntityOwnerId();
        inventDimTo = InventDim::findOrCreate(inventDimTo);

        _inventJournalTrans.ToInventDimId = inventDimTo.inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkJournalLineToProductionBomLines</Name>
				<Source><![CDATA[
    private void linkJournalLineToProductionBomLines(InventJournalTrans _inventJournalTrans, InventJournalOwnershipChangeLineData _lineData)
    {
        SetEnumerator bomLineInventTransOrigins = _lineData.getInventTransOriginRecIdEnumerator();

        while (bomLineInventTransOrigins.moveNext())
        {
            InventTransOriginId bomLineInventTransOrigin = bomLineInventTransOrigins.current();

            InventTransOriginProdBomOwnershipChangeJournalTransLink link;
            link.JournalLine = _inventJournalTrans.RecId;
            link.ProductionBOMLine = bomLineInventTransOrigin;
            link.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>legalEntityOwnerId</Name>
				<Source><![CDATA[
    private InventOwnerId legalEntityOwnerId()
    {
        if (!legalEntityOwnerId)
        {
            legalEntityOwnerId = InventOwner_RU::findOrCreateCurrentLegalEntity().InventOwnerId;
        }

        return legalEntityOwnerId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>