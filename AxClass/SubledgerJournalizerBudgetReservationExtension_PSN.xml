<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJournalizerBudgetReservationExtension_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles <c>SubledgerJournalizer</c> subledger journal entry creation event.
/// </summary>
[
    SourceDocumentEnumExtension(enumstr(SourceDocument_ProductRequisition), SourceDocument_ProductRequisition::PurchaseRequisition),
    SourceDocumentEnumExtension(enumStr(SourceDocument_ProductOrder), SourceDocument_ProductOrder::PurchaseOrder)
]

public class SubledgerJournalizerBudgetReservationExtension_PSN extends SubledgerJournalizerExtension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to subledger journalizer events.
    /// </summary>
    protected void subscribe()
    {
        SubledgerJournalizer localSubledgerJournalizer;
        
        if (isConfigurationkeyEnabled(configurationKeyNum(BudgetReservation_PSN)))
        {
            localSubledgerJournalizer = this.parmSubledgerJournalizer();
            localSubledgerJournalizer.shouldCreateRelievingSubledgerJournalEntryDelegate += eventhandler(this.shouldCreateRelievingSubledgerJournalEntryDelegateHandler);
            
            localSubledgerJournalizer.shouldCreateYearEndSubledgerJournalEntryDelegate += eventhandler(this.shouldCreateYearEndSubledgerJournalEntryDelegateHandler);

            localSubledgerJournalizer.determineRelievingEntryAmountSignDelegate += eventhandler(this.determineRelievingEntryAmountSignDelegateHandler);
		}
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreateYearEndSubledgerJournalEntryDelegateHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// An <c>AccountingDistributionTmp</c> record creation event handler delegate. It will be raised before the standard accoounting
    /// distribution tmp record is created to check if it is needed to be created or not.
    /// </summary>
    /// <param name = "_eventHandlerResult">
    /// The event handler result which contains the result value from the delegate handler.
    /// </param>
    /// <param name = "_ledgerPostingType">
    /// The subledger posting type for the accounting distribution tmp record.
    /// </param>
    /// <param name = "_businessEvent">
    /// The business event of the source document for the accounting distribution tmp record.
    /// </param>
    /// <remarks>
    /// The event handler result will be set to true if the source document business event and posting type
    /// are not for general budget reservation year-end process; otherwise, false. Because the general budget
    /// reservation are always referenced to one of three source documents: Purchase requisition, Purchase order
    /// and Vendor invoice. There would be no need to create subledger journal entry for General budget reservation
    /// during its year-end process.
    /// </remarks>
    public void shouldCreateYearEndSubledgerJournalEntryDelegateHandler(EventHandlerResult _eventHandlerResult,
        LedgerPostingType _ledgerPostingType,
        BusinessEvent _businessEvent)
    {
        boolean doCreate = true;

        // If the ledger posting type is of budget reservation but the business event is of product order,
        // then return false as these are relieving entries and should not be included in year end entries.
        if (_ledgerPostingType == LedgerPostingType::BudgetReservation_PSN
            && _businessEvent.parmBusinessEventClass() == enumNum(BusinessEvent_ProductOrder))
        {
            doCreate = false;
        }

        _eventHandlerResult.booleanResult(doCreate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreateGBRRelievingSubledgerJournalEntry</Name>
				<Source><![CDATA[
    internal static boolean shouldCreateGBRRelievingSubledgerJournalEntry(LedgerPostingType _ledgerPostingType,
        SubledgerJournalAccountEntryRecId _subledgerJournalAccountEntryRecId,
        BusinessEvent _businessEvent)
    {
        
        PurchLine purchLine;
        BudgetReservationHeader_PSN budgetReservationHeader;
        BudgetReservationLine_PSN budgetReservationLine;
        AccountingDistribution referenceAccountingDistribution;
        AccountingDistribution budgetReservationAccountingDistribution;
        AccountingDistribution purchLineAccountingDistribution;
        SubledgerJournalAccountEntryDistribution subledgerJournalAccountEntryDistribution;
        boolean isBudgetReservationDistributionAlreadyRelieved;

        if (_ledgerPostingType == LedgerPostingType::BudgetReservation_PSN)
        {
            select firstOnly RelievingDocumentType from budgetReservationHeader
                exists join budgetReservationLine
                    where budgetReservationLine.BudgetReservationHeader_PSN == budgetReservationHeader.RecId
                exists join budgetReservationAccountingDistribution
                    where budgetReservationAccountingDistribution.SourceDocumentLine == budgetReservationLine.SourceDocumentLine
                exists join referenceAccountingDistribution
                    where referenceAccountingDistribution.ReferenceDistribution == budgetReservationAccountingDistribution.RecId
                        && referenceAccountingDistribution.ReferenceRole == AccountingDistributionReferenceRole::Matching
                exists join subledgerJournalAccountEntryDistribution
                    where subledgerJournalAccountEntryDistribution.AccountingDistribution == referenceAccountingDistribution.RecId
                        && subledgerJournalAccountEntryDistribution.SubledgerJournalAccountEntry == _subledgerJournalAccountEntryRecId;
        }
        else if (_ledgerPostingType == LedgerPostingType::PurchReq)
        {
            select RecId, RelievingDocumentType from budgetReservationHeader
                exists join budgetReservationLine
                  where budgetReservationLine.BudgetReservationHeader_PSN == budgetReservationHeader.RecId
                exists join purchLine
                    where purchLine.BudgetReservationLine_PSN == budgetReservationLine.RecId
                exists join purchLineAccountingDistribution
                    where purchLineAccountingDistribution.SourceDocumentLine == purchLine.SourceDocumentLine
                exists join subledgerJournalAccountEntryDistribution
                    where subledgerJournalAccountEntryDistribution.AccountingDistribution == purchLineAccountingDistribution.RecId
                        && subledgerJournalAccountEntryDistribution.SubledgerJournalAccountEntry == _subledgerJournalAccountEntryRecId;
        }

        if (budgetReservationHeader)
        {
            // If the budget reservation relieving document type is purchase order but the current source document is vendor invoice
            // or the relieving document type is purchase requisition but current source document is vendor invoice
            // or purchase order, then these entries should be skipped as they are reversing relieving entries.
            isBudgetReservationDistributionAlreadyRelieved =
            (budgetReservationHeader.RelievingDocumentType == BudgetReservationRelievingDocument_PSN::PurchaseOrder
                && _businessEvent.parmBusinessEventClass() == enumNum(BusinessEvent_VendorInvoice))
            ||  (budgetReservationHeader.RelievingDocumentType == BudgetReservationRelievingDocument_PSN::PurchaseRequisition
                && (_businessEvent.parmBusinessEventClass() == enumNum(BusinessEvent_ProductOrder)
                    || _businessEvent.parmBusinessEventClass() == enumNum(BusinessEvent_VendorInvoice)));
        }

        return !isBudgetReservationDistributionAlreadyRelieved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreateRelievingSubledgerJournalEntryDelegateHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// An <c>AccountingDistributionTmp</c> record creation event handler delegate. It will be raised before the relieving accoounting
    /// distribution tmp record is created to check if it is needed to be created or not.
    /// </summary>
    /// <param name = "_eventHandlerResult">
    /// The event handler result which contains result value from the delegate handler.
    /// </param>
    /// <param name = "_ledgerPostingType">
    /// The subledger posting type for the accounting distribution tmp record.
    /// </param>
    /// <param name = "_subledgerJournalAccountEntryRecId">
    /// The record ID of the <c>SubledgerJournalAccountEntryDistribution</c> table to be relieved.
    /// </param>
    /// <param name = "_businessEvent">
    /// The business event of the source document for the accounting distribution tmp record.
    /// </param>
    /// <remarks>
    /// The event handler result will be set to true if the source document business event and posting type
    /// are not for general budget reservation year-end process; otherwise, false. Because the general budget
    /// reservation are always referenced to one of three source documents: Purchase requisition, Purchase order
    /// and Vendor invoice. There would be no need to create subledger journal entry for General budget reservation
    /// during its year-end process.
    /// </remarks>
    public void shouldCreateRelievingSubledgerJournalEntryDelegateHandler(EventHandlerResult _eventHandlerResult,
        LedgerPostingType _ledgerPostingType,
        SubledgerJournalAccountEntryRecId _subledgerJournalAccountEntryRecId,
        BusinessEvent _businessEvent)
    {
        _eventHandlerResult.booleanResult(SubledgerJournalizerBudgetReservationExtension_PSN::shouldCreateGBRRelievingSubledgerJournalEntry(
            _ledgerPostingType,
            _subledgerJournalAccountEntryRecId,
            _businessEvent));
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineRelievingEntryAmountSignDelegateHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// An <c>AccountingDistributionTmp</c> record creation event handler delegate. It will be raised during the relieving accoounting
    /// distribution tmp record creation to get the amount sign.
    /// </summary>
    /// <param name = "_eventHandlerResult">
    /// The event handler result which contains the result value from the delegate handler.
    /// </param>
    /// <param name = "_monetaryAmount">
    /// The monetary amount of the record of the <c>AccountingDistributionTmp</c>.
    /// </param>
    /// <param name = "_transactionCurrencyAmount">
    /// The transaction currency amount of the record of the <c>AccountingDistributionTmp</c>.
    /// </param>
    /// <param name = "_ledgerPostingType">
    /// The subledger posting type for the accounting distribution tmp record.
    /// </param>
    /// <remarks>
    /// The event handler result will contain the amount sign based on the source document posting type
    /// and amount values to have different sign.
    /// </remarks>
    public void determineRelievingEntryAmountSignDelegateHandler(EventHandlerResult _eventHandlerResult,
        MonetaryAmount      _monetaryAmount,
        Amount              _transactionCurrencyAmount,
        LedgerPostingType   _ledgerPostingType)
    {
        DebitCredit amountSign;

        if (_ledgerPostingType == LedgerPostingType::BudgetReservation_PSN
            && (_monetaryAmount == MonetaryAmount::PriceAdjustment
                || _monetaryAmount == MonetaryAmount::Discount))
        {
            amountSign = (_transactionCurrencyAmount > 0 ? DebitCredit::Credit : DebitCredit::Debit);
        }
        else
        {
            amountSign = (_transactionCurrencyAmount > 0 ? DebitCredit::Debit : DebitCredit::Credit);
        }

        _eventHandlerResult.result(amountSign);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>