<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceWorkflowFailedEventTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

[ExportMetadata(classStr(ProcessAutomationTask), classStr(VendInvoiceWorkflowFailedEventTask))]
[Export(identifierStr(Microsoft.Dynamics.AX.Application.ProcessAutomationTask))]
internal class VendInvoiceWorkflowFailedEventTask extends ProcessAutomationTask implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isProcessAutomationEnabledForThisTask</Name>
				<Source><![CDATA[
    protected boolean isProcessAutomationEnabledForThisTask()
    {
        return VendAutomateVendorInvoicesFeature::isEnabled()
            && VendInvoiceWorkflowFailedEventSearcher::findOne();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProcessAutomationEnabledForThisTaskInternal</Name>
				<Source><![CDATA[
    internal boolean isProcessAutomationEnabledForThisTaskInternal()
    {
        return this.isProcessAutomationEnabledForThisTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListOfWorkToBePerformed</Name>
				<Source><![CDATA[
    protected List getListOfWorkToBePerformed()
    {
        VendInvoiceWorkflowFailedEventController VendInvoiceWorkflowFailedEventController = new VendInvoiceWorkflowFailedEventController(
            classStr(VendInvoiceWorkflowFailedEventController),
            methodStr(VendInvoiceWorkflowFailedEventController, initProcessExecutionSourceLinkItem),
            SysOperationExecutionMode::ReliableAsynchronous);

        ProcessScheduleWorkItem processScheduleWorkItemContract = VendInvoiceWorkflowFailedEventController.getDataContractObject() as ProcessScheduleWorkItem;
        ProcessScheduleWorkItem processScheduleWorkItem = this.parmProcessScheduleWorkItem();

        // The only use case for this check is a unit test that does not run in a batch.
        if (processScheduleWorkItem)
        {
            processScheduleWorkItemContract.initializeFromScheduleWorkItem(processScheduleWorkItem);
        }

        List workList = new List(Types::Class);
        workList.addEnd(VendInvoiceWorkflowFailedEventController);

        // Log telemetry to indicate that the work list was submitted to the Process Automation.
        VendInstrumentation::logTelemetry(
            VendInvoicePostTaskConstants::InstrumentationNamespace,
            this.toString(),
            funcName(),
            this.toString(),
            funcName());

        return workList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchJobCaption</Name>
				<Source><![CDATA[
    protected BatchCaption batchJobCaption()
    {
        return "@AccountsPayable:VendInvoiceWorkflowEventTaskDescription";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>