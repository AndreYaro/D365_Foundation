<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendTransOpenLedgerCovContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal abstract class CustVendTransOpenLedgerCovContract
{
    protected CustVendTrans custVendTrans;
    protected CustVendTransOpen custVendTransOpen;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTrans</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    internal CustVendTrans getCustVendTrans()
    {
        return custVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransOpen</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    internal CustVendTransOpen getCustVendTransOpen()
    {
        return custVendTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInvoice</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    internal abstract boolean isInvoice()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isZeroValue</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    internal abstract boolean isZeroValue()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreditNote</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    internal boolean isCreditNote()
    {
        boolean isCreditNote = this.isPayment() && custVendTrans.Invoice != '';

        return isCreditNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBridging</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    internal abstract boolean isBridging()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPayment</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    internal abstract boolean isPayment()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTableDefaultDimension</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    internal abstract DimensionDefault getCustVendTableDefaultDimension()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSummaryPostingType</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    internal abstract LedgerPostingType getSummaryPostingType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClearingPostingType</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    internal abstract LedgerPostingType getClearingPostingType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInvoiceBalanceRemaining</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    internal abstract boolean isInvoiceBalanceRemaining(AmountCur _invoiceAmountBalance)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForDocument</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    internal static CustVendTransOpenLedgerCovContract newForDocument(
        CustVendTrans _custVendTrans,
        CustVendTransOpen _custVendTransOpen)
    {
        CustVendTransOpenLedgerCovContract instance;

        if (_custVendTrans.TableId  == tableNum(CustTrans))
        {
            instance = new CustTransOpenLedgerCovContract();
        }
        else
        {
            instance = new VendTransOpenLedgerCovContract();
        }

        instance.custVendTrans = _custVendTrans;
        instance.custVendTransOpen = _custVendTransOpen;

        return instance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>