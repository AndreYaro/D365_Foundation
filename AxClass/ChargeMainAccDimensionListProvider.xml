<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ChargeMainAccDimensionListProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ChargeMainAccDimensionListProvider</c> class is the main account dimension list provider for
///    the documented charge amounts.
/// </summary>
[
SourceDocumentEnumExtensionAttribute(enumStr(MainAccountDimensionListProviderType), MainAccountDimensionListProviderType::Charge)
]
class ChargeMainAccDimensionListProvider extends MainAccountDimensionListProvider
{
    MarkupTable                 markupTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the main account dimension list provider for dimensions.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The documented charge code cannot be found.
    /// </exception>
    protected void initValues()
    {
        Object                          sourceDocumentLineItem = accountingRule.parmSourceDocumentLineItem();
        SourceDocumentLineItemICharge   iCharge;

        if (sourceDocumentLineItem is SourceDocumentLineItemICharge)
        {
            iCharge = sourceDocumentLineItem as SourceDocumentLineItemICharge;
            markupTable = iCharge.parmMarkupTable();

            if (!markupTable)
            {
                throw error(strFmt("@SYS76766",funcName(),strFmt("@SYS94089",markupTable.MarkupCode, CompanyInfo::findRecId(accountingRule.parmSourceDocumentLineItem().parmLegalEntityRecId()).DataArea)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateMainAccountDimensionList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates the main account dimension list.
    /// </summary>
    protected void populateMainAccountDimensionList()
    {
        LedgerDimensionDefaultAccount           ledgerDimensionDefaultAccount;
        PartyMainAccountDimensionListProvider   partyMainAccountDimensionListProvider;
        ChargeDebitCredit                       chargeDebitCredit;

        if (markupTable)
        {
            chargeDebitCredit = ChargeDebitCredit::construct(markupTable);

            if (markupTable.CustType == MarkupType::Item && accountingRule.parmAccountingRuleType() == AccountingRuleType::Distribution)
            {
                ledgerDimensionDefaultAccount = sourceDefaultAccount;
                this.addToMainAccDimensionList(ledgerDimensionDefaultAccount);
            }
            else if ((chargeDebitCredit.parmDebitMarkupType() == MarkupType::CustVend && accountingRule.parmAccountingRuleType() == AccountingRuleType::Distribution) ||
                (chargeDebitCredit.parmDebitMarkupType() != MarkupType::CustVend && accountingRule.parmAccountingRuleType() == AccountingRuleType::Journalizing))
            {
                if (markupTable.ModuleType ==
                                MarkupModuleType::Cust
                    && accountingRule.parmAccountingRuleType() == AccountingRuleType::Distribution)
                {
                    ledgerDimensionDefaultAccount = chargeDebitCredit.parmCreditLedgerDimension();
                    this.addToMainAccDimensionList(ledgerDimensionDefaultAccount);
                }
                else
                {
                    partyMainAccountDimensionListProvider = MainAccountDimensionListProvider::newFromAccountingRule(MainAccountDimensionListProviderType::Party, accountingRule);
                    mainAccountDimensionList = partyMainAccountDimensionListProvider.parmMainAccountDimensionList();
                }
            }
            else
            {
                if (accountingRule.parmAccountingRuleType() == AccountingRuleType::Distribution)
                {
                    ledgerDimensionDefaultAccount = chargeDebitCredit.parmDebitLedgerDimension();

                    // markups with both specified as ledger uses the credit for sales documents
                    if ((markupTable.ModuleType ==
                                            MarkupModuleType::Cust
                        && accountingRule.parmAccountingRuleType() == AccountingRuleType::Distribution) &&
                        (chargeDebitCredit.parmDebitMarkupType() == MarkupType::LedgerAccount && chargeDebitCredit.parmCreditMarkupType() == MarkupType::LedgerAccount))
                    {
                        ledgerDimensionDefaultAccount = chargeDebitCredit.parmCreditLedgerDimension();
                    }
                }
                else
                {
                    ledgerDimensionDefaultAccount = chargeDebitCredit.parmCreditLedgerDimension();
                }

                this.addToMainAccDimensionList(ledgerDimensionDefaultAccount);
            }
        }
        else
        {
            ledgerDimensionDefaultAccount = sourceDefaultAccount;
            this.addToMainAccDimensionList(ledgerDimensionDefaultAccount);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>