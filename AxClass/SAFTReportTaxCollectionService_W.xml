<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SAFTReportTaxCollectionService_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class collecting tax amounts in the dimension of the tax reporting codes.
/// </summary>
public class SAFTReportTaxCollectionService_W
{
    internal const str NazwaKontrahenta = 'Sprzedaz paragonowa';

    private SAFTTaxTransByReportingCode_PL reportData;
    private RecordInsertList reportDataInsList;

    private TaxReportLayout taxReportLayout;
    private Query query;

    private FromDate dateFrom;
    private ToDate dateTo;
    private boolean aggregateFiscalDocuments; // RO
    private boolean reportRetailPOSInvoices; // FP from Retail
    private boolean reportFiscalDocumentConvertedToInvoice; // FP from Fiscal documents
    private boolean reportFiscalDocumentWithThreshold; // FP with threshold
    private Query aggregateFiscalDocumentsQuery; // RO user query
    private SAFTReceiptThreshold_PL receiptThreshold;

    private Set aggregatedDocuments;

    private CustInvoiceJour custInvoiceJour;
    private CustInvoiceJour_W custInvoiceJour_W;
    private CustInvoiceJour_PL custInvoiceJour_PL;
    private ProjInvoiceJour projInvoiceJour;
    private VendInvoiceJour vendInvoiceJour;
    private CzCustAdvanceInvoiceTable custAdvanceInvoiceTable;

    private boolean collectTaxAmountInTransCur;

    private Voucher prevTaxTransVoucher;
    private TransDate prevTaxTransDate;
    private boolean isTaxSpecificExchangeRateEnabled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instanciates the tax report service.
    /// </summary>
    /// <param name = "_taxAuthority">The authority to which the data is reported.</param>
    /// <param name = "_query">Query containing tax transactions data sources.</param>
    public void new(TaxAuthority _taxAuthority, Query _query)
    {
        taxReportLayout = TaxAuthorityAddress::find(_taxAuthority).TaxReportLayout;
        query = _query;
        isTaxSpecificExchangeRateEnabled = TaxSpecificExchangeRateHelper::isTaxSpecificExchangeRateEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data for SAFT tax reports.
    /// </summary>
    /// <returns>The set of tax transactions associated with sales tax reporting codes.</returns>
    public SAFTTaxTransByReportingCode_PL getReportData()
    {
        return reportData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCollectTaxAmountInTransCur</Name>
				<Source><![CDATA[
    public boolean parmCollectTaxAmountInTransCur(boolean _collectTaxAmountInTransCur = collectTaxAmountInTransCur)
    {
        collectTaxAmountInTransCur = _collectTaxAmountInTransCur;
        return collectTaxAmountInTransCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateFrom</Name>
				<Source><![CDATA[
    internal FromDate parmDateFrom(FromDate _value = dateFrom)
    {
        dateFrom = _value;
        return dateFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateTo</Name>
				<Source><![CDATA[
    internal ToDate parmDateTo(ToDate _value = dateTo)
    {
        dateTo = _value;
        return dateTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAggregateFiscalDocuments</Name>
				<Source><![CDATA[
    internal boolean parmAggregateFiscalDocuments(boolean _value = aggregateFiscalDocuments)
    {
        aggregateFiscalDocuments = _value;
        return aggregateFiscalDocuments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportRetailPOSInvoices</Name>
				<Source><![CDATA[
    internal boolean parmReportRetailPOSInvoices(boolean _value = reportRetailPOSInvoices)
    {
        reportRetailPOSInvoices = _value;
        return reportRetailPOSInvoices;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportFiscalDocumentConvertedToInvoice</Name>
				<Source><![CDATA[
    internal boolean parmReportFiscalDocumentConvertedToInvoice(boolean _value = reportFiscalDocumentConvertedToInvoice)
    {
        reportFiscalDocumentConvertedToInvoice = _value;
        return reportFiscalDocumentConvertedToInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportFiscalDocumentWithThreshold</Name>
				<Source><![CDATA[
    internal boolean parmReportFiscalDocumentWithThreshold(boolean _value = reportFiscalDocumentWithThreshold)
    {
        reportFiscalDocumentWithThreshold = _value;
        return reportFiscalDocumentWithThreshold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReceiptThreshold</Name>
				<Source><![CDATA[
    internal SAFTReceiptThreshold_PL parmReceiptThreshold(SAFTReceiptThreshold_PL _value = receiptThreshold)
    {
        receiptThreshold = _value;
        return receiptThreshold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAggregateFiscalDocumentsQuery</Name>
				<Source><![CDATA[
    internal Query parmAggregateFiscalDocumentsQuery(Query _query = aggregateFiscalDocumentsQuery)
    {
        aggregateFiscalDocumentsQuery = _query ? new Query(_query) : _query;
        return aggregateFiscalDocumentsQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the report data collection service.
    /// </summary>
    public void run()
    {
        reportDataInsList = new RecordInsertList(tableNum(SAFTTaxTransByReportingCode_PL), true, true, true, false, true, reportData);

        using (SAFTTaxTransByReportingCodeContext_PL reportContext = SAFTTaxTransByReportingCodeContext_PL::construct())
        {
            this.aggregateFiscalDocuments();
            this.reportFiscalDocumentConvertedToInvoice();
            this.reportRetailPOSInvoices();
            this.reportRetailPOSInvoicesWithThreshold();

            TaxTrans taxTrans;
            QueryRun queryRun = new QueryRun(query);

            var dsTaxTrans = query.dataSourceTable(tableNum(TaxTrans)) != null;
            var dsCustJour = query.dataSourceTable(tableNum(CustInvoiceJour)) != null;
            var dsVendJour = query.dataSourceTable(tableNum(VendInvoiceJour)) != null;
            var dsProjJour = query.dataSourceTable(tableNum(ProjInvoiceJour)) != null;
            var dsAdvance  = query.dataSourceTable(tableNum(CzCustAdvanceInvoiceTable)) != null;

            RefRecId prevTaxTransRecId;
            while (queryRun.next())
            {
                if (dsTaxTrans)
                {
                    taxTrans = queryRun.get(tableNum(TaxTrans));
                    if (prevTaxTransRecId != taxTrans.RecId)
                    {
                        prevTaxTransRecId = taxTrans.RecId;
                        if (aggregateFiscalDocuments && !reportFiscalDocumentWithThreshold && aggregatedDocuments.in(taxTrans.RecId))
                        {
                            continue;
                        }

                        this.initializeExtraTables(taxTrans);

                        TaxTrans_W taxTrans_W = queryRun.get(tableNum(TaxTrans_W));
                        SAFTFiscalDocumentType_PL docType;
                        if (aggregateFiscalDocuments && reportFiscalDocumentWithThreshold)
                        {
                            docType = this.getDocumentType(taxTrans_W.VATNum_PL, taxTrans.CurrencyCode);
                            if (docType != SAFTFiscalDocumentType_PL::FP && aggregatedDocuments.in(taxTrans.RecId))
                            {
                                continue;
                            }
                        }

                        this.createTransDataFromTaxTrans(taxTrans, taxTrans_W, docType);
                    }
                }
                else
                {
                    custInvoiceJour = dsCustJour ? queryRun.get(tableNum(CustInvoiceJour)) : null;
                    vendInvoiceJour = dsVendJour ? queryRun.get(tableNum(VendInvoiceJour)) : null;
                    projInvoiceJour = dsProjJour ? queryRun.get(tableNum(ProjInvoiceJour)) : null;
                    custAdvanceInvoiceTable = dsAdvance ? queryRun.get(tableNum(CzCustAdvanceInvoiceTable)) : null;
                    custInvoiceJour_W.clear();

                    if (dsCustJour && queryRun.changed(tableNum(CustInvoiceJour)))
                    {
                        custInvoiceJour_W = custInvoiceJour.custInvoiceJour_W();

                        while select taxTrans
                            where taxTrans.Voucher == custInvoiceJour.LedgerVoucher
                                && taxTrans.TransDate == custInvoiceJour.InvoiceDate
                        {
                            this.createTransDataFromTaxTrans(taxTrans);
                        }
                    }
                    else if (dsVendJour && queryRun.changed(tableNum(VendInvoiceJour)))
                    {
                        while select taxTrans
                            where taxTrans.Voucher == vendInvoiceJour.LedgerVoucher
                                && taxTrans.TransDate == vendInvoiceJour.InvoiceDate
                        {
                            this.createTransDataFromTaxTrans(taxTrans);
                        }
                    }
                    else if (dsProjJour && queryRun.changed(tableNum(ProjInvoiceJour)))
                    {
                        while select taxTrans
                            where taxTrans.Voucher == projInvoiceJour.LedgerVoucher
                                && taxTrans.TransDate == projInvoiceJour.InvoiceDate
                        {
                            this.createTransDataFromTaxTrans(taxTrans);
                        }
                    }
                    else if (dsAdvance && queryRun.changed(tableNum(CzCustAdvanceInvoiceTable)))
                    {
                        while select taxTrans
                            where taxTrans.Voucher == custAdvanceInvoiceTable.Voucher
                                && taxTrans.TransDate == custAdvanceInvoiceTable.InvoiceDate
                        {
                            this.createTransDataFromTaxTrans(taxTrans);
                        }
                    }
                }
            }
        }
        reportDataInsList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromNonSADVendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Initializes fields values from not-intermediary vendTrans.
    /// </summary>
    /// <param name="_reportData">A <c>SAFTTaxTransByReportingCode_PL</c> temporary table to store the result.</param>
    /// <param name="_voucher">A voucher.</param>
    /// <param name="_transDate">A trans date.</param>
    /// <returns>A <c>SAFTTaxTransByReportingCode_PL</c> temporary table to store the result.</returns>
    public SAFTTaxTransByReportingCode_PL initFromNonSADVendTrans(SAFTTaxTransByReportingCode_PL _reportData, Voucher _voucher, TransDate _transDate)
    {
        if (!custInvoiceJour.RecId && !custAdvanceInvoiceTable.RecId)
        {
            SAFTTaxTransByReportingCodeContext_PL reportDataContext = SAFTTaxTransByReportingCodeContext_PL::instance();
            if (reportDataContext)
            {
                VendAccount vendAccount = reportDataContext.getNonSADVendAccount();
                if (vendAccount)
                {
                    VendTable vendTable = VendTable::find(vendAccount);
                    _reportData.Addressing_PL = vendTable.postalAddress().Address;
                    _reportData.CustVendName_PL = vendTable.name();
                    _reportData.VATNum_PL = vendTable.VATNum;
                    _reportData.CustVendAccount_PL = vendAccount;
                    _reportData.CustVendGroup_PL = vendTable.VendGroup;
                }
            }
        }
        return _reportData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportRetailPOSInvoicesWithThreshold</Name>
				<Source><![CDATA[
    private void reportRetailPOSInvoicesWithThreshold()
    {
        if (reportFiscalDocumentWithThreshold)
        {
            RetailTransactionTaxTrans retailTaxTrans;
            RetailTransactionSalesTrans retailSalesTrans;
            RetailTransactionTable retailTable;
            RetailTransactionSupplementaryInvoice retailInvoice;
            RetailTransactionFiscalCustomer fiscalCustomer;
            TaxTable taxTable;
            SAFTTaxTransByReportingCodeContext_PL reportDataContext = SAFTTaxTransByReportingCodeContext_PL::instance();

            while select TaxCode, TaxPercentage, Amount, TaxBaseAmount, IsExempt from retailTaxTrans
            join TaxGroup, TaxItemGroup, Currency, TransDate from retailSalesTrans
                where retailSalesTrans.Channel == retailTaxTrans.Channel
                    && retailSalesTrans.Store == retailTaxTrans.StoreId
                    && retailSalesTrans.TerminalId == retailTaxTrans.TerminalId
                    && retailSalesTrans.TransactionId == retailTaxTrans.TransactionId
                    && retailSalesTrans.lineNum == retailTaxTrans.SaleLineNum
                    && retailSalesTrans.TransDate >= dateFrom
                    && retailSalesTrans.TransDate <= dateTo
                    && retailSalesTrans.transactionStatus == RetailEntryStatus::Posted
            join SerializedData from fiscalCustomer
                where fiscalCustomer.Channel == retailSalesTrans.Channel
                    && fiscalCustomer.Store == retailSalesTrans.Store
                    && fiscalCustomer.Terminal == retailSalesTrans.TerminalId
                    && fiscalCustomer.TransactionId == retailSalesTrans.TransactionId
            join GrossAmount, CustAccount, BusinessDate, InvoiceId from retailTable
                where retailTable.Channel == fiscalCustomer.Channel
                    && retailTable.Store == fiscalCustomer.Store
                    && retailTable.Terminal == fiscalCustomer.Terminal
                    && retailTable.TransactionId == fiscalCustomer.TransactionId
                    && retailTable.Type == RetailTransactionType::Sales
                    && retailTable.EntryStatus == RetailEntryStatus::Posted
                    && retailTable.StatementId
            exists join taxTable
                where taxTable.TaxCode == retailTaxTrans.TaxCode
                    && (taxTable.TaxType_W == TaxType_W::VAT || taxTable.TaxType_W == TaxType_W::VATReduced)
            notexists join RecId from retailInvoice
                where retailInvoice.Channel == retailTable.Channel
                    && retailInvoice.Store == retailTable.Store
                    && retailInvoice.Terminal == retailTable.Terminal
                    && retailInvoice.TransactionId == retailTable.TransactionId
            {
                if (abs(retailTable.GrossAmount) >= receiptThreshold)
                {
                    VATNum vatNum = reportDataContext.deserializeVATNum(fiscalCustomer.SerializedData);
                    if (vatNum)
                    {
                        this.insertRetailThresholdInvoicesSplittingByTaxReportId(this.getTransFromRetail(retailTaxTrans, retailSalesTrans), retailTable, vatNum);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRetailThresholdInvoicesSplittingByTaxReportId</Name>
				<Source><![CDATA[
    private void insertRetailThresholdInvoicesSplittingByTaxReportId(TaxTrans _taxTrans, RetailTransactionTable _retailTable, VATNum _vatNum)
    {
        TmpTaxReportById tmpTaxReportById;
        boolean isCreditNote = this.isCreditNote(_taxTrans);
        tmpTaxReportById = _taxTrans.taxAmountByTaxDirectionAndReportId(tmpTaxReportById, isCreditNote);

        boolean isFirstRecord = true;
        while select Amount, TaxReportField, TaxInCostPrice from tmpTaxReportById
        {
            if (isFirstRecord)
            {
                reportData.clear();
                reportData = this.initHeaderForRetailThresholdInvoice(reportData, _retailTable, _taxTrans.TransDate);
                reportData.TaxCode = _taxTrans.TaxCode;
                reportData.TaxDirection = _taxTrans.TaxDirection;
                reportData.TaxGroup = _taxTrans.TaxGroup;
                reportData.TaxItemGroup = _taxTrans.TaxItemGroup;
                reportData.TaxTransDate = _taxTrans.TransDate;
                reportData.TaxRate = _taxTrans.TaxValue;
                reportData.ReverseCharge = _taxTrans.ReverseCharge_W;
                reportData.IsCreditNote = isCreditNote;
                reportData.TaxTransAmount = _taxTrans.TaxAmount;
                reportData.TaxTransTaxBaseAmount = _taxTrans.TaxBaseAmount;
                reportData.FiscalDocumentType = SAFTFiscalDocumentType_PL::FP;
                reportData.PaymentTaxCode = TaxTable::find(_taxTrans.TaxCode).PaymentTaxCode;
                reportData.TaxExemptCode = TaxGroupData::find(_taxTrans.TaxGroup, _taxTrans.TaxCode).TaxExemptCode;
                reportData.VATNum_PL = _vatNum;
                isFirstRecord = false;
            }
            reportData.initFromTmpTaxTransReportId(tmpTaxReportById);
            reportDataInsList.add(reportData);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderForRetailThresholdInvoice</Name>
				<Source><![CDATA[
    private SAFTTaxTransByReportingCode_PL initHeaderForRetailThresholdInvoice(SAFTTaxTransByReportingCode_PL _reportData, RetailTransactionTable _retailTable, TransDate _salesDate)
    {
        if (_retailTable.CustAccount)
        {
            CustTable custTable = CustTable::find(_retailTable.CustAccount);
            if (custTable.RecId)
            {
                _reportData.CustVendName_PL = custTable.name(); // NazwaKontrahenta
            }
        }
        _reportData.DocumentNum = _retailTable.InvoiceId; // DowodSprzedazy
        _reportData.DocumentDate = _retailTable.BusinessDate; // DataWystawienia
        _reportData.SalesDate = _salesDate; // DataSprzedazy
        return _reportData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportRetailPOSInvoices</Name>
				<Source><![CDATA[
    private void reportRetailPOSInvoices()
    {
        if (reportRetailPOSInvoices)
        {
            RetailTransactionTaxTrans retailTaxTrans;
            RetailTransactionSalesTrans retailSalesTrans;
            RetailTransactionTable retailTable;
            RetailTransactionSupplementaryInvoice retailInvoice;
            TaxTable taxTable;
            boolean isRetailFiscalCustomerExists = (select firstonly RecId from RetailTransactionFiscalCustomer).RecId != 0;

            while select TaxCode, TaxPercentage, Amount, TaxBaseAmount, IsExempt from retailTaxTrans
            join InvoiceId, InvoiceDate, AccountNum, CustInvoiceJour, Channel, Store, Terminal, TransactionId, CustomerName from retailInvoice
                where retailInvoice.Channel == retailTaxTrans.Channel
                    && retailInvoice.Store == retailTaxTrans.StoreId
                    && retailInvoice.Terminal == retailTaxTrans.TerminalId
                    && retailInvoice.TransactionId == retailTaxTrans.TransactionId
                    && retailInvoice.InvoiceDate >= dateFrom
                    && retailInvoice.InvoiceDate <= dateTo
            join TaxGroup, TaxItemGroup, TransDate, Currency from retailSalesTrans
                where retailSalesTrans.Channel == retailTaxTrans.Channel
                    && retailSalesTrans.Store == retailTaxTrans.StoreId
                    && retailSalesTrans.TerminalId == retailTaxTrans.TerminalId
                    && retailSalesTrans.TransactionId == retailTaxTrans.TransactionId
                    && retailSalesTrans.lineNum == retailTaxTrans.SaleLineNum
                    && retailSalesTrans.transactionStatus == RetailEntryStatus::Posted
            exists join RecId from retailTable
                where retailTable.Channel == retailSalesTrans.Channel
                    && retailTable.Store == retailSalesTrans.Store
                    && retailTable.Terminal == retailSalesTrans.TerminalId
                    && retailTable.TransactionId == retailSalesTrans.TransactionId
                    && retailTable.Type == RetailTransactionType::Sales
                    && retailTable.EntryStatus == RetailEntryStatus::Posted
                    && retailTable.StatementId
            exists join taxTable
                where taxTable.TaxCode == retailTaxTrans.TaxCode
                    && (taxTable.TaxType_W == TaxType_W::VAT || taxTable.TaxType_W == TaxType_W::VATReduced)
            {
                TaxTrans taxTrans = this.getTransFromRetail(retailTaxTrans, retailSalesTrans);
                this.insertRetailInvoicesSplittingByTaxReportId(taxTrans, retailInvoice, isRetailFiscalCustomerExists);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransFromRetail</Name>
				<Source><![CDATA[
    private TaxTrans getTransFromRetail(RetailTransactionTaxTrans _retailTaxTrans, RetailTransactionSalesTrans _retailSalesTrans)
    {
        TaxTrans taxTrans;
        taxTrans.TaxCode = _retailTaxTrans.TaxCode;
        taxTrans.TaxDirection = _retailTaxTrans.IsExempt ? TaxDirection::TaxExemptSales : TaxDirection::OutgoingTax;
        taxTrans.TaxValue = _retailTaxTrans.TaxPercentage;
        taxTrans.TaxAmount = -_retailTaxTrans.Amount;
        taxTrans.TaxBaseAmount = abs(_retailTaxTrans.TaxBaseAmount) * sign(taxTrans.TaxAmount);
        taxTrans.TaxGroup = _retailSalesTrans.TaxGroup;
        taxTrans.TaxItemGroup = _retailSalesTrans.TaxItemGroup;
        taxTrans.CurrencyCode = _retailSalesTrans.Currency;
        taxTrans.TransDate = _retailSalesTrans.TransDate;
        return taxTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRetailInvoicesSplittingByTaxReportId</Name>
				<Source><![CDATA[
    private void insertRetailInvoicesSplittingByTaxReportId(TaxTrans _taxTrans, RetailTransactionSupplementaryInvoice _retailInvoice, boolean _isRetailFiscalCustomerExists)
    {
        TmpTaxReportById tmpTaxReportById;
        boolean isCreditNote = this.isCreditNote(_taxTrans);
        tmpTaxReportById = _taxTrans.taxAmountByTaxDirectionAndReportId(tmpTaxReportById, isCreditNote);

        boolean isFirstRecord = true;
        while select Amount, TaxReportField, TaxInCostPrice from tmpTaxReportById
        {
            if (isFirstRecord)
            {
                reportData.clear();
                reportData = this.initHeaderForRetailInvoice(reportData, _retailInvoice, _taxTrans.TransDate);
                reportData.TaxCode = _taxTrans.TaxCode;
                reportData.TaxDirection = _taxTrans.TaxDirection;
                reportData.TaxGroup = _taxTrans.TaxGroup;
                reportData.TaxItemGroup = _taxTrans.TaxItemGroup;
                reportData.TaxTransDate = _taxTrans.TransDate;
                reportData.TaxRate = _taxTrans.TaxValue;
                reportData.ReverseCharge = _taxTrans.ReverseCharge_W;
                reportData.IsCreditNote = isCreditNote;
                reportData.TaxTransAmount = _taxTrans.TaxAmount;
                reportData.TaxTransTaxBaseAmount = _taxTrans.TaxBaseAmount;
                reportData.FiscalDocumentType = SAFTFiscalDocumentType_PL::FP;
                reportData.PaymentTaxCode = TaxTable::find(_taxTrans.TaxCode).PaymentTaxCode;
                reportData.TaxExemptCode = TaxGroupData::find(_taxTrans.TaxGroup, _taxTrans.TaxCode).TaxExemptCode;
                if (_isRetailFiscalCustomerExists)
                {
                    reportData.VATNum_PL = this.getRetailVATNum(_retailInvoice.TransactionId, _retailInvoice.Store, _retailInvoice.Terminal, _retailInvoice.Channel);
                }
                isFirstRecord = false;
            }
            reportData.initFromTmpTaxTransReportId(tmpTaxReportById);
            reportDataInsList.add(reportData);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderForRetailInvoice</Name>
				<Source><![CDATA[
    private SAFTTaxTransByReportingCode_PL initHeaderForRetailInvoice(SAFTTaxTransByReportingCode_PL _reportData, RetailTransactionSupplementaryInvoice _retailInvoice, TransDate _salesDate)
    {
        if (_retailInvoice.CustomerName)
        {
            _reportData.CustVendName_PL = _retailInvoice.CustomerName;
        }
        else if (_retailInvoice.AccountNum)
        {
            CustTable custTable = CustTable::find(_retailInvoice.AccountNum);
            if (custTable.RecId)
            {
                _reportData.CustVendName_PL = custTable.name(); // NazwaKontrahenta
            }
        }
        _reportData.DocumentNum = _retailInvoice.InvoiceId; // DowodSprzedazy
        _reportData.DocumentDate = _retailInvoice.InvoiceDate; // DataWystawienia
        _reportData.SalesDate = _salesDate; // DataSprzedazy
        return _reportData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportFiscalDocumentConvertedToInvoice</Name>
				<Source><![CDATA[
    private void reportFiscalDocumentConvertedToInvoice()
    {
        if (reportFiscalDocumentConvertedToInvoice)
        {
            QueryBuildDataSource qbds = aggregateFiscalDocumentsQuery.dataSourceTable(tableNum(TaxTrans_W));
            Range reportPeriodRange = qbds.findRange(fieldNum(TaxTrans_W, VatDueDate_W)).value();
            qbds.clearRange(fieldNum(TaxTrans_W, VatDueDate_W));

            qbds = aggregateFiscalDocumentsQuery.dataSourceTable(tableNum(CustInvoiceJour_PL));
            do
            {
                qbds.clearRange(fieldNum(CustInvoiceJour_PL, FiscalDocState_PL));
            }
            while (qbds.findRange(fieldNum(CustInvoiceJour_PL, FiscalDocState_PL)) != null);
            findOrCreateRange_W(qbds, fieldNum(CustInvoiceJour_PL, FiscalDocState_PL), queryValue(PlFiscalDocState::Changed2Invoice));
            findOrCreateRange_W(qbds, fieldNum(CustInvoiceJour_PL, FiscalDocDate_PL), reportPeriodRange);

            RefRecId prevTaxTransRecId;
            QueryRun queryRun = new QueryRun(aggregateFiscalDocumentsQuery);
            while (queryRun.next())
            {
                TaxTrans taxTrans = queryRun.get(tableNum(TaxTrans));

                if (prevTaxTransRecId != taxTrans.RecId
                    && (taxTrans.TaxDirection == TaxDirection::OutgoingTax
                    || (isTaxSpecificExchangeRateEnabled
                    && taxTrans.TaxDirection == TaxDirection::OutgoingTax_W)
                    || taxTrans.TaxDirection == TaxDirection::UseTax
                    || taxTrans.TaxDirection == TaxDirection::TaxExemptSales))
                {
                    prevTaxTransRecId = taxTrans.RecId;
                    this.initializeExtraTables(taxTrans, true);
                    this.createTransDataFromTaxTrans(taxTrans, queryRun.get(tableNum(TaxTrans_W)), SAFTFiscalDocumentType_PL::FP);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentType</Name>
				<Source><![CDATA[
    private SAFTFiscalDocumentType_PL getDocumentType(VATNum _vATNum, CurrencyCode _taxCurrencyCode)
    {
        SAFTFiscalDocumentType_PL ret;
        if (reportFiscalDocumentWithThreshold)
        {
            if (custInvoiceJour.RecId
                && _vATNum
                && this.getInvoiceAmount(_taxCurrencyCode) >= receiptThreshold
                && CustInvoiceJour_PL::findByCustInvoiceJour(custInvoiceJour.RecId).FiscalDocState_PL == PlFiscalDocState::FiscalDocument)
            {
                ret = SAFTFiscalDocumentType_PL::FP;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceAmount</Name>
				<Source><![CDATA[
    private Amount getInvoiceAmount(CurrencyCode _taxCurrencyCode)
    {
        Amount ret;

        if (custInvoiceJour.CurrencyCode == _taxCurrencyCode)
        {
            ret = abs(custInvoiceJour.InvoiceAmount);
        }
        else if (Ledger::accountingCurrency() == _taxCurrencyCode)
        {
            ret = abs(custInvoiceJour.InvoiceAmountMST);
        }
        else
        {
            TaxTrans taxTransLocal;
            select sum(TaxBaseAmountCur), sum(TaxAmountCur) from taxTransLocal
                where taxTransLocal.Voucher == custInvoiceJour.LedgerVoucher
                    && taxTransLocal.TransDate == custInvoiceJour.InvoiceDate;

            ret = abs(taxTransLocal.TaxBaseAmountCur) + abs(taxTransLocal.TaxAmountCur);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>aggregateFiscalDocuments</Name>
				<Source><![CDATA[
    private void aggregateFiscalDocuments()
    {
        if (aggregateFiscalDocuments)
        {
            SAFTTaxTransByReportingCode_PL aggregatedReportData;
            aggregatedDocuments = new Set(Types::Int64);
            RecordSortedList rsl = new RecordSortedList(tableNum(SAFTTaxTransByReportingCode_PL), aggregatedReportData);
            rsl.sortOrder(fieldnum(SAFTTaxTransByReportingCode_PL, TaxCode),
                fieldnum(SAFTTaxTransByReportingCode_PL, TaxDirection),
                fieldnum(SAFTTaxTransByReportingCode_PL, TaxGroup),
                fieldnum(SAFTTaxTransByReportingCode_PL, TaxItemGroup),
                fieldnum(SAFTTaxTransByReportingCode_PL, ReverseCharge),
                fieldnum(SAFTTaxTransByReportingCode_PL, IsCreditNote),
                fieldnum(SAFTTaxTransByReportingCode_PL, OverduePaidCurMonth)); // grouped by a sign of TaxTrans.TaxValue; if Yes - positive; otherwise, negative.
            QueryRun queryRun = new QueryRun(aggregateFiscalDocumentsQuery);

            while (queryRun.next())
            {
                TaxTrans taxTrans = queryRun.get(tableNum(TaxTrans));
                if (taxTrans.TaxDirection == TaxDirection::OutgoingTax
                    || (isTaxSpecificExchangeRateEnabled
                    && taxTrans.TaxDirection == TaxDirection::OutgoingTax_W)
                    || taxTrans.TaxDirection == TaxDirection::UseTax
                    || taxTrans.TaxDirection == TaxDirection::TaxExemptSales)
                {
                    aggregatedDocuments.add(taxTrans.RecId);

                    aggregatedReportData.clear();
                    aggregatedReportData.TaxCode = taxTrans.TaxCode;
                    aggregatedReportData.TaxDirection = taxTrans.TaxDirection;
                    aggregatedReportData.TaxGroup = taxTrans.TaxGroup;
                    aggregatedReportData.TaxItemGroup = taxTrans.TaxItemGroup;
                    aggregatedReportData.ReverseCharge = taxTrans.ReverseCharge_W;
                    aggregatedReportData.IsCreditNote = this.isCreditNote(taxTrans);
                    aggregatedReportData.OverduePaidCurMonth = taxTrans.TaxValue < 0 ? NoYes::No : NoYes::Yes; // sign of TaxTrans.TaxValue, needs for _taxTrans.taxAmountByTaxDirectionAndReportId()
                    boolean isAny = rsl.find(aggregatedReportData);

                    aggregatedReportData.Amount += taxTrans.TaxValue;
                    aggregatedReportData.TaxTransAmount += taxTrans.TaxAmount;
                    aggregatedReportData.TaxTransAmountCur += taxTrans.TaxAmountCur;
                    aggregatedReportData.TaxTransSourceAmountCur += taxTrans.SourceTaxAmountCur;
                    aggregatedReportData.TaxTransTaxInCostPrice += taxTrans.TaxInCostPrice;
                    aggregatedReportData.TaxTransTaxInCostPriceMST += taxTrans.TaxInCostPriceMST;
                    aggregatedReportData.TaxTransTaxBaseAmount += taxTrans.TaxBaseAmount;

                    rsl.ins(aggregatedReportData, isAny);
                }
            }

            this.insertIntoTmpTableSplittingByTaxReportId(rsl);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTmpTableSplittingByTaxReportId</Name>
				<Source><![CDATA[
    private void insertIntoTmpTableSplittingByTaxReportId(RecordSortedList _rsl)
    {
        SAFTTaxTransByReportingCode_PL aggregatedReportData;
        boolean isAny = _rsl.first(aggregatedReportData);
        if (isAny)
        {
            do
            {
                TmpTaxReportById tmpTaxReportById;
                TaxTrans taxTrans = this.getTaxTransFromAggregatedRecord(aggregatedReportData);
                tmpTaxReportById = taxTrans.taxAmountByTaxDirectionAndReportId(tmpTaxReportById, aggregatedReportData.IsCreditNote);

                boolean isFirstRecord = true;
                while select Amount, TaxReportField, TaxInCostPrice from tmpTaxReportById
                {
                    if (isFirstRecord)
                    {
                        reportData.clear();
                        reportData = this.initHeaderForAggregatedRecord(reportData);
                        reportData.TaxCode = aggregatedReportData.TaxCode;
                        reportData.TaxDirection = aggregatedReportData.TaxDirection;
                        reportData.TaxGroup = aggregatedReportData.TaxGroup;
                        reportData.TaxItemGroup = aggregatedReportData.TaxItemGroup;
                        reportData.ReverseCharge = aggregatedReportData.ReverseCharge;
                        reportData.IsCreditNote = aggregatedReportData.IsCreditNote;
                        reportData.TaxTransAmount = aggregatedReportData.TaxTransAmount;
                        reportData.TaxTransAmountCur = aggregatedReportData.TaxTransAmountCur;
                        reportData.TaxTransSourceAmountCur = aggregatedReportData.TaxTransSourceAmountCur;
                        reportData.TaxTransTaxInCostPrice = aggregatedReportData.TaxTransTaxInCostPrice;
                        reportData.TaxTransTaxInCostPriceMST = aggregatedReportData.TaxTransTaxInCostPriceMST;
                        reportData.TaxTransTaxBaseAmount = aggregatedReportData.TaxTransTaxBaseAmount;
                        reportData.FiscalDocumentType = SAFTFiscalDocumentType_PL::RO;
                        reportData.PaymentTaxCode = TaxTable::find(aggregatedReportData.TaxCode).PaymentTaxCode;
                        isFirstRecord = false;
                    }
                    reportData.initFromTmpTaxTransReportId(tmpTaxReportById);
                    reportDataInsList.add(reportData);
                }
            }
            while (_rsl.next(aggregatedReportData));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderForAggregatedRecord</Name>
				<Source><![CDATA[
    private SAFTTaxTransByReportingCode_PL initHeaderForAggregatedRecord(SAFTTaxTransByReportingCode_PL _reportData)
    {
        _reportData.CustVendName_PL = NazwaKontrahenta; // NazwaKontrahenta
        _reportData.DocumentNum = ''; // DowodSprzedazy
        _reportData.DocumentDate = dateTo; // DataWystawienia
        _reportData.SalesDate = dateTo; // DataSprzedazy
        return _reportData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransFromAggregatedRecord</Name>
				<Source><![CDATA[
    private TaxTrans getTaxTransFromAggregatedRecord(SAFTTaxTransByReportingCode_PL _aggregatedRecord)
    {
        TaxTrans ret;
        ret.TaxCode = _aggregatedRecord.TaxCode;
        ret.TaxDirection = _aggregatedRecord.TaxDirection;
        ret.ReverseCharge_W = _aggregatedRecord.ReverseCharge;
        ret.TaxValue = _aggregatedRecord.Amount;
        ret.TaxAmount = _aggregatedRecord.TaxTransAmount;
        ret.TaxAmountCur = _aggregatedRecord.TaxTransAmountCur;
        ret.SourceTaxAmountCur = _aggregatedRecord.TaxTransSourceAmountCur;
        ret.TaxInCostPrice = _aggregatedRecord.TaxTransTaxInCostPrice;
        ret.TaxInCostPriceMST = _aggregatedRecord.TaxTransTaxInCostPriceMST;
        ret.TaxBaseAmount = _aggregatedRecord.TaxTransTaxBaseAmount;
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransDataFromTaxTrans</Name>
				<Source><![CDATA[
    private void createTransDataFromTaxTrans(
        TaxTrans _taxTrans,
        TaxTrans_W _taxTrans_W = TaxTrans_W::findByTaxTrans(_taxTrans.RecId),
        SAFTFiscalDocumentType_PL _docType = SAFTFiscalDocumentType_PL::Default)
    {
        SAFTTaxTransByReportingCodeContext_PL reportDataContext = SAFTTaxTransByReportingCodeContext_PL::instance();
        boolean isCreditNote = this.isCreditNote(_taxTrans);

        if (this.parmCollectTaxAmountInTransCur())
        {
            _taxTrans.TaxAmount = _taxTrans.SourceTaxAmountCur;
            _taxTrans.TaxBaseAmount = _taxTrans.SourceBaseAmountCur;
        }

        TmpTaxReportById tmpTaxReportById;
        tmpTaxReportById = _taxTrans.taxAmountByTaxDirectionAndReportId(tmpTaxReportById, isCreditNote);

        boolean isFirstRecord = true;
        while select Amount, TaxReportField, TaxInCostPrice from tmpTaxReportById
        {
            if (isFirstRecord)
            {
                reportData.clear();
                if (this.prepareForAdvanceInvoice(_taxTrans))
                {
                    _taxTrans_W = TaxTrans_W::findByTaxTrans(reportData.TaxTransRecId);
                }

                reportDataContext.initFromTaxTrans(_taxTrans);
                reportDataContext.parmTaxTrans_W(_taxTrans_W);

                reportData.initFromTaxTrans(_taxTrans);
                reportData.initByTaxTrans_W(_taxTrans_W);
                reportData = this.fillCustVendFields(reportData, _taxTrans);
                reportData.TaxTransRecId = _taxTrans.RecId;
                reportData.IsCreditNote = isCreditNote;
                reportData.SalesDate = this.getSalesDate_W();
                reportData.PurchReceiptDate = this.purchReceiptDate();
                reportData.DocumentNum = this.getDocumentId(_taxTrans);
                reportData.InvoiceId = this.getInvoiceId(_taxTrans);
                reportData.PaymentTaxCode = TaxTable::find(_taxTrans.TaxCode).PaymentTaxCode;
                reportData.TaxExemptCode = TaxGroupData::find(_taxTrans.TaxGroup, _taxTrans.TaxCode).TaxExemptCode;
                reportData.OperationType = reportDataContext.getOperationType();
                reportData.ReverseRecId = this.getReverseRecId(_taxTrans);
                reportData.OverduePaidCurMonth = reportDataContext.getIsCustOverduePaidCurMonth() ? NoYes::Yes : NoYes::No;
                reportData.FiscalDocumentType = _docType;
                reportData.SplitPayment = this.getSplitPayment();
                isFirstRecord = false;
            }
            reportData.initFromTmpTaxTransReportId(tmpTaxReportById);
            reportDataInsList.add(reportData);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCustVendFields</Name>
				<Source><![CDATA[
    private SAFTTaxTransByReportingCode_PL fillCustVendFields(SAFTTaxTransByReportingCode_PL _reportData, TaxTrans _taxTrans)
    {
        if (custInvoiceJour_PL.RecId)
        {
            _reportData = this.initByCustInvoiceJour_PL(_reportData);
        }
        else
        {
            _reportData.DocumentDate = this.getDocumentDate(_taxTrans);
            _reportData = this.initFromNonSADVendTrans(_reportData, _taxTrans.Voucher, _taxTrans.TransDate);
            if (!_reportData.CustVendAccount_PL)
            {
                [_reportData.CustVendAccount_PL, _reportData.CustVendGroup_PL] = this.getCustVendAccountNumGroup();
            }
        }

        return _reportData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initByCustInvoiceJour_PL</Name>
				<Source><![CDATA[
    private SAFTTaxTransByReportingCode_PL initByCustInvoiceJour_PL(SAFTTaxTransByReportingCode_PL _reportData)
    {
        if (custInvoiceJour_PL.FiscalInvoiceAccount_PL)
        {
            CustTable custTable = CustTable::find(custInvoiceJour_PL.FiscalInvoiceAccount_PL);
            if (custTable.RecId)
            {
                _reportData.CustVendName_PL = custTable.name(); // NazwaKontrahenta
                _reportData.VATNum_PL = custTable.VATNum;
                _reportData.CustVendGroup_PL = custTable.CustGroup;
            }
            _reportData.CustVendAccount_PL = custInvoiceJour_PL.FiscalInvoiceAccount_PL;
        }
        reportData.DocumentDate = custInvoiceJour_PL.FiscalDocDate_PL;
        return _reportData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareForAdvanceInvoice</Name>
				<Source><![CDATA[
    private RefRecId prepareForAdvanceInvoice(TaxTrans _taxTrans)
    {
        RefRecId newTaxTransRecId;

        if (custAdvanceInvoiceTable)
        {
            CustInvoiceJour custInvoiceJourLocal;
            CustAdvanceInvoiceSettlement_W custAdvanceInvoiceSettlement;
            TaxTrans taxTransLocal;

            select firstonly DocumentNum, InvoiceId, DocumentDate, LedgerVoucher, InvoiceDate from custInvoiceJourLocal
            outer join SalesDate_W from custInvoiceJour_W
                where custInvoiceJour_W.CustInvoiceJour == custInvoiceJourLocal.RecId
            outer join RecId from taxTransLocal
                where taxTransLocal.Voucher == custInvoiceJourLocal.LedgerVoucher
                    && taxTransLocal.TransDate == custInvoiceJourLocal.InvoiceDate
            exists join custAdvanceInvoiceSettlement
                where (custAdvanceInvoiceSettlement.InvoiceJourRecId == custInvoiceJourLocal.RecId
                    && custAdvanceInvoiceSettlement.ReversalAdvanceInvoiceRecId == custAdvanceInvoiceTable.RecId)
                    || (custAdvanceInvoiceSettlement.CreditNoteRecId == custInvoiceJourLocal.RecId
                    && custAdvanceInvoiceSettlement.ReversalCancellationRecId == custAdvanceInvoiceTable.RecId);

            if (custInvoiceJourLocal)
            {
                _taxTrans.Voucher = custInvoiceJourLocal.LedgerVoucher;
                _taxTrans.TransDate = custInvoiceJourLocal.InvoiceDate;
                reportData.TaxTransRecId = taxTransLocal.RecId;
                newTaxTransRecId = taxTransLocal.RecId;

                CustTrans custTransLocal;
                GeneralJournalEntry generalJournalEntry;

                if (!custInvoiceJourLocal.DocumentDate)
                {
                    custTransLocal = CustTrans::findVoucherDate(custInvoiceJourLocal.LedgerVoucher, custInvoiceJourLocal.InvoiceDate);

                    if (!custTransLocal.DocumentDate)
                    {
                        generalJournalEntry = GeneralLedgerExtension::findBySubledgerVoucherAccountingDate(
                            custInvoiceJourLocal.LedgerVoucher, custInvoiceJourLocal.InvoiceDate);
                    }
                }

                custAdvanceInvoiceTable.InvoiceId = custInvoiceJourLocal.InvoiceId;

                if (custInvoiceJourLocal.DocumentDate)
                {
                    custAdvanceInvoiceTable.InvoiceDate = custInvoiceJourLocal.DocumentDate;
                }
                else if (custTransLocal.DocumentDate)
                {
                    custAdvanceInvoiceTable.InvoiceDate = custTransLocal.DocumentDate;
                }
                else
                {
                    custAdvanceInvoiceTable.InvoiceDate = generalJournalEntry.DocumentDate;
                }
            }
            else
            {
                ProjInvoiceJour projInvoiceJourLocal;
                ProjAdvanceInvoiceSettlement_W projAdvanceInvoiceSettlement;

                select firstonly ProjInvoiceId, DocumentDate_W, LedgerVoucher, InvoiceDate from projInvoiceJourLocal
                outer join SalesDate_CZ from projInvoiceJour
                    where projInvoiceJour.RecId == projInvoiceJourLocal.RecId
                outer join RecId from taxTransLocal
                    where taxTransLocal.Voucher == projInvoiceJourLocal.LedgerVoucher
                        && taxTransLocal.TransDate == projInvoiceJourLocal.InvoiceDate
                exists join projAdvanceInvoiceSettlement
                    where (projAdvanceInvoiceSettlement.InvoiceJourRecId == projInvoiceJourLocal.RecId
                        && projAdvanceInvoiceSettlement.ReversalAdvanceInvoiceRecId == custAdvanceInvoiceTable.RecId);

                if (projInvoiceJourLocal)
                {
                    _taxTrans.Voucher = projInvoiceJourLocal.LedgerVoucher;
                    _taxTrans.TransDate = projInvoiceJourLocal.InvoiceDate;
                    reportData.TaxTransRecId = taxTransLocal.RecId;
                    newTaxTransRecId = taxTransLocal.RecId;

                    GeneralJournalEntry generalJournalEntry;
                    CustTrans custTransLocal;

                    if (!projInvoiceJourLocal.DocumentDate_W)
                    {
                        custTransLocal = CustTrans::findVoucherDate(projInvoiceJourLocal.LedgerVoucher, projInvoiceJourLocal.InvoiceDate);

                        if (!custTransLocal.DocumentDate)
                        {
                            generalJournalEntry = GeneralLedgerExtension::findBySubledgerVoucherAccountingDate(
                                projInvoiceJourLocal.LedgerVoucher, projInvoiceJourLocal.InvoiceDate);
                        }
                    }

                    custAdvanceInvoiceTable.InvoiceId = projInvoiceJourLocal.ProjInvoiceId;

                    if (projInvoiceJourLocal.DocumentDate_W)
                    {
                        custAdvanceInvoiceTable.InvoiceDate = projInvoiceJourLocal.DocumentDate_W;
                    }
                    else if (custTransLocal.DocumentDate)
                    {
                        custAdvanceInvoiceTable.InvoiceDate = custTransLocal.DocumentDate;
                    }
                    else if (generalJournalEntry.DocumentDate)
                    {
                        custAdvanceInvoiceTable.InvoiceDate = generalJournalEntry.DocumentDate;
                    }
                    else
                    {
                        custAdvanceInvoiceTable.InvoiceDate = projInvoiceJourLocal.InvoiceDate;
                    }
                }
            }
        }

        return newTaxTransRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearExtraTables</Name>
				<Source><![CDATA[
    private void clearExtraTables()
    {
        custInvoiceJour.clear();
        custInvoiceJour_W.clear();
        custInvoiceJour_PL.clear();
        projInvoiceJour.clear();
        vendInvoiceJour.clear();
        custAdvanceInvoiceTable.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeExtraTables</Name>
				<Source><![CDATA[
    private void initializeExtraTables(TaxTrans _taxTrans, boolean _isFiscalDocumentConvertedToInvoice = false)
    {
        if (_taxTrans.Voucher != prevTaxTransVoucher
            || _taxTrans.TransDate != prevTaxTransDate)
        {
            prevTaxTransDate = _taxTrans.TransDate;
            prevTaxTransVoucher = _taxTrans.Voucher;
            this.clearExtraTables();
        }

        switch (_taxTrans.Source)
        {
            case TaxModuleType::Sales:
            case TaxModuleType::FreeTxtInvoice:
            case TaxModuleType::SalesInvoice:
                if (!custInvoiceJour.RecId)
                {
                    this.initializeCustInvoiceTables(_taxTrans.Voucher, _taxTrans.TransDate, _isFiscalDocumentConvertedToInvoice);
                }
                break;
            case TaxModuleType::Project:
            case TaxModuleType::ProjectInvoice:
                if (!projInvoiceJour.RecId)
                {
                    select firstonly projInvoiceJour
                        where projInvoiceJour.LedgerVoucher == _taxTrans.Voucher &&
                            projInvoiceJour.InvoiceDate == _taxTrans.TransDate;
                }
                break;
            case TaxModuleType::Purch:
            case TaxModuleType::PurchInvoice:
                if (!vendInvoiceJour.RecId)
                {
                    vendInvoiceJour = VendInvoiceJour::findFromTaxTrans(_taxTrans.Voucher, _taxTrans.TransDate);
                }
                break;
            case TaxModuleType::Voucher:
                if (!vendInvoiceJour.RecId)
                {
                    vendInvoiceJour = VendInvoiceJour::findFromTaxTrans(_taxTrans.Voucher, _taxTrans.TransDate);
                    if (!vendInvoiceJour)
                    {
                        this.initializeCustInvoiceTables(_taxTrans.Voucher, _taxTrans.TransDate, _isFiscalDocumentConvertedToInvoice);
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCustInvoiceTables</Name>
				<Source><![CDATA[
    private void initializeCustInvoiceTables(Voucher _voucher, TransDate _transDate, boolean _isFiscalDocumentConvertedToInvoice)
    {
        custInvoiceJour = CustInvoiceJour::findFromTaxTrans(_voucher, _transDate);
        if (custInvoiceJour.RecId)
        {
            custInvoiceJour_W = custInvoiceJour.custInvoiceJour_W();
            if (_isFiscalDocumentConvertedToInvoice)
            {
                custInvoiceJour_PL = CustInvoiceJour_PL::findByCustInvoiceJour(custInvoiceJour.RecId);
            }
        }
        else
        {
            custAdvanceInvoiceTable = CzCustAdvanceInvoiceTable::findVoucherDate(_voucher, _transDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesDate_W</Name>
				<Source><![CDATA[
    private SalesDate_W getSalesDate_W()
    {
        SalesDate_W ret;

        if (custInvoiceJour_W.SalesDate_W)
        {
            ret = custInvoiceJour_W.SalesDate_W;
        }
        else if (projInvoiceJour.SalesDate_CZ)
        {
            ret = projInvoiceJour.SalesDate_CZ;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchReceiptDate</Name>
				<Source><![CDATA[
    private PurchReceiptDate_W purchReceiptDate()
    {
        PurchReceiptDate_W ret;

        if (vendInvoiceJour.PurchReceiptDate_W)
        {
            ret = vendInvoiceJour.PurchReceiptDate_W;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReverseRecId</Name>
				<Source><![CDATA[
    private RefRecId getReverseRecId(TaxTrans _taxTrans)
    {
        TransactionReversalTrans transactionReversalTrans;
        SAFTTaxTransByReportingCodeContext_PL reportDataContext = SAFTTaxTransByReportingCodeContext_PL::instance();
        if (reportDataContext)
        {
            RefTableId refTableId;
            RefRecId refRecId;
            CustTrans custTrans = reportDataContext.getCustTrans();

            if (custTrans)
            {
                refTableId = custTrans.TableId;
                refRecId = custTrans.RecId;
            }
            else
            {
                VendTrans vendTrans = reportDataContext.getVendTrans();
                refTableId = vendTrans.TableId;
                refRecId = vendTrans.RecId;

                if (!refRecId)
                {
                    GeneralJournalEntry generalJournalEntry = reportDataContext.getGeneralJournalEntry();
                    if (generalJournalEntry.RecId)
                    {
                        GeneralJournalAccountEntry generalJournalAccountEntry;
                        select firstonly RecId from generalJournalAccountEntry
                            where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId;

                        refTableId = generalJournalAccountEntry.TableId;
                        refRecId = generalJournalAccountEntry.RecId;
                    }
                }
            }

            if (refRecId)
            {
                select firstonly RecId from transactionReversalTrans
                    where transactionReversalTrans.RefRecId == refRecId
                        && transactionReversalTrans.RefTableId == refTableId
                        && transactionReversalTrans.Reversed == NoYes::Yes;
            }
        }

        return transactionReversalTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDate</Name>
				<Source><![CDATA[
    private DocumentDate getDocumentDate(TaxTrans _taxTrans)
    {
        if (custInvoiceJour.DocumentDate)
        {
            return custInvoiceJour.DocumentDate;
        }

        if (vendInvoiceJour.DocumentDate)
        {
            return vendInvoiceJour.DocumentDate;
        }

        SAFTTaxTransByReportingCodeContext_PL reportDataContext = SAFTTaxTransByReportingCodeContext_PL::instance();

        if (reportDataContext)
        {
            if (reportDataContext.getCustTrans().DocumentDate)
            {
                return reportDataContext.getCustTrans().DocumentDate;
            }

            if (reportDataContext.getVendTrans().DocumentDate)
            {
                return reportDataContext.getVendTrans().DocumentDate;
            }

            if (reportDataContext.getGeneralJournalEntry().DocumentDate)
            {
                return reportDataContext.getGeneralJournalEntry().DocumentDate;
            }
        }

        if (custAdvanceInvoiceTable.InvoiceDate)
        {
            return custAdvanceInvoiceTable.InvoiceDate;
        }

        if (projInvoiceJour.DocumentDate_W)
        {
            return projInvoiceJour.DocumentDate_W;
        }

        return _taxTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentId</Name>
				<Source><![CDATA[
    private DocumentNum getDocumentId(TaxTrans _taxTrans)
    {
        DocumentNum documentId = '';

        SAFTTaxTransByReportingCodeContext_PL reportDataContext = SAFTTaxTransByReportingCodeContext_PL::instance();
        if (reportDataContext && reportDataContext.getIsOverdue())
        {
            documentId = reportDataContext.getDocumentIdOverdue();
        }
        else if (vendInvoiceJour.RecId && reportDataContext && reportDataContext.getIsSADDocument())
        {
            documentId = reportDataContext.getDocumentIdSAD();
        }
        else if (custInvoiceJour.DocumentNum)
        {
            documentId = custInvoiceJour.DocumentNum;
        }
        else if (vendInvoiceJour.DocumentNum)
        {
            documentId = vendInvoiceJour.DocumentNum;
        }
        else if (reportDataContext && reportDataContext.getCustTrans().DocumentNum)
        {
            documentId = reportDataContext.getCustTrans().DocumentNum;
        }
        else if (reportDataContext && reportDataContext.getVendTrans().DocumentNum)
        {
            documentId = reportDataContext.getVendTrans().DocumentNum;
        }
        else if (reportDataContext && reportDataContext.getGeneralJournalEntry().DocumentNumber)
        {
            documentId = reportDataContext.getGeneralJournalEntry().DocumentNumber;
        }
        else if (custAdvanceInvoiceTable.InvoiceId)
        {
            documentId = custAdvanceInvoiceTable.InvoiceId;
        }
        else if (projInvoiceJour.ProjInvoiceId)
        {
            documentId = projInvoiceJour.ProjInvoiceId;
        }
        else if (custInvoiceJour.InvoiceId)
        {
            documentId = custInvoiceJour.InvoiceId;
        }
        else if (vendInvoiceJour.InvoiceId)
        {
            documentId = vendInvoiceJour.InvoiceId;
        }
        else if (reportDataContext && reportDataContext.getLedgerJournalTrans().Invoice)
        {
            documentId = reportDataContext.getLedgerJournalTrans().Invoice;
        }
        else if (_taxTrans.Source == TaxModuleType::Voucher)
        {
            documentId = this.getSettlementInvoiceId(_taxTrans);
        }

        if (!documentId)
        {
            documentId = _taxTrans.InvoiceId;
        }

        return documentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceId</Name>
				<Source><![CDATA[
    private InvoiceId getInvoiceId(TaxTrans _taxTrans)
    {
        InvoiceId invoiceId = '';

        SAFTTaxTransByReportingCodeContext_PL reportDataContext = SAFTTaxTransByReportingCodeContext_PL::instance();
        if (reportDataContext && reportDataContext.getIsOverdue())
        {
            invoiceId = reportDataContext.getDocumentIdOverdue();
        }
        else if (vendInvoiceJour.RecId && reportDataContext && reportDataContext.getIsSADDocument())
        {
            invoiceId = reportDataContext.getDocumentIdSAD();
        }
        else if (custAdvanceInvoiceTable.InvoiceId)
        {
            invoiceId = custAdvanceInvoiceTable.InvoiceId;
        }
        else if (projInvoiceJour.ProjInvoiceId)
        {
            invoiceId = projInvoiceJour.ProjInvoiceId;
        }
        else if (custInvoiceJour.InvoiceId)
        {
            invoiceId = custInvoiceJour.InvoiceId;
        }
        else if (vendInvoiceJour.InvoiceId)
        {
            invoiceId =  vendInvoiceJour.InvoiceId;
        }
        else if (reportDataContext && reportDataContext.getLedgerJournalTrans().Invoice)
        {
            invoiceId =  reportDataContext.getLedgerJournalTrans().Invoice;
        }
        else if (reportDataContext && reportDataContext.getGeneralJournalEntry().DocumentNumber)
        {
            invoiceId = reportDataContext.getGeneralJournalEntry().DocumentNumber;
        }
        else if (_taxTrans.Source == TaxModuleType::Voucher)
        {
            invoiceId = this.getSettlementInvoiceId(_taxTrans);
        }

        if (!invoiceId)
        {
            invoiceId = _taxTrans.InvoiceId;
        }

        return invoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSettlementInvoiceId</Name>
				<Source><![CDATA[
    private InvoiceId getSettlementInvoiceId(TaxTrans _taxTrans)
    {
        InvoiceId invoiceId = '';

        switch (_taxTrans.SourceTableId)
        {
            case tableNum(VendTrans):
                VendTrans vendTrans;
                select firstonly Invoice from vendTrans
                    where vendTrans.OffsetRecid == _taxTrans.SourceRecId;
                invoiceId = vendTrans.Invoice;
                break;

            case tableNum(CustTrans):
                CustTrans custTrans;
                select firstonly Invoice from custTrans
                    where custTrans.OffsetRecid == _taxTrans.SourceRecId;
                invoiceId = custTrans.Invoice;
                break;
        }

        return invoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendAccountNumGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns AccountNum and Group of Customer or Vendor.
    /// </summary>
    /// <returns>Container with AccountNum and GroupId.</returns>
    private container getCustVendAccountNumGroup()
    {
        container ret;

        SAFTTaxTransByReportingCodeContext_PL reportDataContext = SAFTTaxTransByReportingCodeContext_PL::instance();

        if (reportDataContext)
        {
            if (reportDataContext.getCustTrans())
            {
                ret = [reportDataContext.getCustTrans().AccountNum, reportDataContext.getCustTable().CustGroup];
            }
            else
            {
                if (reportDataContext.getVendTrans())
                {
                    ret = [reportDataContext.getVendTrans().AccountNum, reportDataContext.getVendTable().VendGroup];
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSplitPayment</Name>
				<Source><![CDATA[
    private int getSplitPayment()
    {
        int ret;
        SAFTTaxTransByReportingCodeContext_PL reportDataContext = SAFTTaxTransByReportingCodeContext_PL::instance();
        if (reportDataContext)
        {
            if (this.isSales())
            {
                CustTrans_W custTrans_W = reportDataContext.getCustTrans_W();
                ret = custTrans_W.SplitPayment_W && !custTrans_W.VoluntarySplitPayment_W;
            }
            else if (this.isPurchase())
            {
                VendTrans_W vendTrans_W = reportDataContext.getVendTrans_W();
                ret = vendTrans_W.SplitPayment_W && !vendTrans_W.VoluntarySplitPayment_W;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPurchase</Name>
				<Source><![CDATA[
    private boolean isPurchase()
    {
        return !reportData.ReverseRecId
            && (reportData.TaxDirection == TaxDirection::IncomingTax
            || (isTaxSpecificExchangeRateEnabled
            && reportData.TaxDirection == TaxDirection::IncomingTax_W)
            || reportData.TaxDirection == TaxDirection::UseTax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSales</Name>
				<Source><![CDATA[
    private boolean isSales()
    {
        return !reportData.ReverseRecId
            && (reportData.TaxDirection == TaxDirection::OutgoingTax
            || (isTaxSpecificExchangeRateEnabled
            && reportData.TaxDirection == TaxDirection::OutgoingTax_W)
            || reportData.TaxDirection == TaxDirection::UseTax
            || reportData.TaxDirection == TaxDirection::TaxExemptSales);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreditNote</Name>
				<Source><![CDATA[
    private boolean isCreditNote(TaxTrans _taxTrans)
    {
        boolean ret = true;

        if (((_taxTrans.TaxBaseAmount > 0 || _taxTrans.TaxAmount > 0) &&
            _taxTrans.TaxOrigin != TaxOrigin::TaxReversed &&
            (_taxTrans.TaxDirection == TaxDirection::IncomingTax ||
            (isTaxSpecificExchangeRateEnabled &&
            _taxTrans.TaxDirection == TaxDirection::IncomingTax_W) ||
            _taxTrans.TaxDirection == TaxDirection::UseTax ||
            _taxTrans.TaxDirection == TaxDirection::TaxTransaction)) ||

            ((_taxTrans.TaxBaseAmount < 0 || _taxTrans.TaxAmount < 0) &&
            _taxTrans.TaxOrigin == TaxOrigin::TaxReversed &&
            (_taxTrans.TaxDirection == TaxDirection::IncomingTax ||
            (isTaxSpecificExchangeRateEnabled &&
            _taxTrans.TaxDirection == TaxDirection::IncomingTax_W) ||
            _taxTrans.TaxDirection == TaxDirection::UseTax ||
            _taxTrans.TaxDirection == TaxDirection::TaxTransaction)) ||

            ((_taxTrans.TaxBaseAmount < 0 || _taxTrans.TaxAmount < 0) &&
            _taxTrans.TaxOrigin != TaxOrigin::TaxReversed &&
            (_taxTrans.TaxDirection == TaxDirection::OutgoingTax ||
            (isTaxSpecificExchangeRateEnabled &&
            _taxTrans.TaxDirection == TaxDirection::OutgoingTax_W) ||
            _taxTrans.TaxDirection == TaxDirection::TaxExemptPurchase ||
            _taxTrans.TaxDirection == TaxDirection::TaxExemptSales)) ||

            ((_taxTrans.TaxBaseAmount > 0 || _taxTrans.TaxAmount > 0) &&
            _taxTrans.TaxOrigin == TaxOrigin::TaxReversed &&
            (_taxTrans.TaxDirection == TaxDirection::OutgoingTax ||
            (isTaxSpecificExchangeRateEnabled &&
            _taxTrans.TaxDirection == TaxDirection::OutgoingTax_W) ||
            _taxTrans.TaxDirection == TaxDirection::TaxExemptPurchase ||
            _taxTrans.TaxDirection == TaxDirection::TaxExemptSales)))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetailVATNum</Name>
				<Source><![CDATA[
    private VATNum getRetailVATNum(
        RetailTransactionId _transactionId,
        RetailStoreId _storeId,
        RetailTerminalId _terminalId,
        RefRecId _channel)
    {
        SAFTTaxTransByReportingCodeContext_PL reportDataContext = SAFTTaxTransByReportingCodeContext_PL::instance();

        return reportDataContext ? reportDataContext.getRetailVatNum(_transactionId, _storeId, _terminalId, _channel) : '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>