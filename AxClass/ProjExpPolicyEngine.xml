<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjExpPolicyEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjExpPolicyEngine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateProjExpPoliciesDay</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ProjExpPolicyStatus validateProjExpPoliciesDay(RecId             _trvExpTableRecId,
                                                          ProjWorkerRecId   _workerRecId,
                                                          ProjId            _sProjId,
                                                          boolean           _updateReImburseAmt = true)
    {
        ProjExpPolicies         tProjExpPolicies;
        TrvExpTrans             tExpenseSummary;
        TrvExpTrans             tExpenseLines;
        ProjLineProperty        tProjLineProperty, tProjLineProp;
        boolean                 bReceipt;
        ProjExpPolicyStatus     ePolicyStatus = ProjExpPolicyStatus::DayPassed;
        boolean                 bReimAllowableAmount = false;
        boolean                 bReimFullAmount = false;
        AmountCur               rReimburseAmt;
        boolean                 bInvAllowableAmount = false;
        boolean                 bInvFullAmount = false;
        AmountCur               rInvoiceAmt;
        ProjExpPolicyStatus     ret = ProjExpPolicyStatus::NoPolicy;
        ProjInvoiceProjId       sContract;
        CustAccount             sClient;

        sContract = ProjTable::find(_sProjId).ProjInvoiceProjId;

        sClient = ProjFundingSource::findCustAccount(sContract).CustAccount;

        while select sum(AmountCurr)
            from tExpenseSummary
            group by TransDate, ExchangeCode, CostType, ProjId, AddressZipCode, AddressCity, City
            where tExpenseSummary.TrvExpTable == _trvExpTableRecId && tExpenseSummary.ParentRecId == 0
        {
            //Check Company Rules
            tProjExpPolicies = ProjExpPolicies::findRulesByType(tExpenseSummary.TransDate,
                tExpenseSummary.ExchangeCode, tExpenseSummary.CostType, _workerRecId, tExpenseSummary.editCity(),
                sClient, sContract, tExpenseSummary.ProjId, ProjExpPolicyPerUnit::Day, ProjExpPolicyType::Company);

            while (tProjExpPolicies)
            {
                str receiptMessage = '';
                str projPolicyMessage = '';
                ePolicyStatus = ProjExpPolicyStatus::DayPassed;

                //Check Receipt Required
                if (tProjExpPolicies.ReceiptRequired == NoYes::Yes && (tProjExpPolicies.ReceiptMin == 0 || tProjExpPolicies.ReceiptMin <= tExpenseSummary.AmountCurr))
                {
                    bReceipt = true;
                    receiptMessage = strFmt("@SYS342017", tProjExpPolicies.ReceiptMin);
                    ePolicyStatus = ProjExpPolicyStatus::DayWarning;
                }

                //Check Amount
                if (tExpenseSummary.AmountCurr > tProjExpPolicies.AllowableAmount)
                {
                    if (tProjExpPolicies.MaximumAmount == 0 || tExpenseSummary.AmountCurr > tProjExpPolicies.MaximumAmount)
                    {
                        ePolicyStatus = ProjExpPolicyStatus::DayFailed;
                    }
                    else
                    {
                        ePolicyStatus = ProjExpPolicyStatus::DayWarning;
                        bReimAllowableAmount = true;
                        rReimburseAmt = tProjExpPolicies.AllowableAmount;
                    }

                    projPolicyMessage = strfmt("@Expense:ProjectPolicyMessage_DayLevel", tExpenseSummary.CostType, tProjExpPolicies.AllowableAmount);
                }
                else
                {
                    bReimFullAmount = true;
                }

                //return values
                if (ret != ProjExpPolicyStatus::DayFailed)
                {
                    if ((ret != ProjExpPolicyStatus::DayWarning) || (ePolicyStatus == ProjExpPolicyStatus::DayFailed))
                    {
                        ret = ePolicyStatus;
                    }
                }

                if (_updateReImburseAmt || ePolicyStatus == ProjExpPolicyStatus::DayWarning || ePolicyStatus == ProjExpPolicyStatus::DayFailed)
                {
                    //update individual lines
                    while select forupdate tExpenseLines where tExpenseLines.TrvExpTable == _trvExpTableRecId
                    && tExpenseLines.TransDate      == tExpenseSummary.TransDate
                    && tExpenseLines.ExchangeCode   == tExpenseSummary.ExchangeCode
                    && tExpenseLines.CostType       == tExpenseSummary.CostType
                    && tExpenseLines.ProjId         == tExpenseSummary.ProjId
                    && tExpenseLines.AddressZipCode == tExpenseSummary.AddressZipCode
                    && tExpenseLines.ParentRecId == 0
                    {
                        ttsbegin;

                        //update receipt required
                        if (bReceipt)
                        {
                            tExpenseLines.ReceiptRequired= NoYes::Yes;
                        }

                        //update reimbursement amounts
                        if (bReimFullAmount)
                        {
                            if (tExpenseLines.ReimburseAmt >= tExpenseLines.AmountCurr)
                            {
                                tExpenseLines.ReimburseAmt = tExpenseLines.AmountCurr;
                            }
                        }
                        if (bReimAllowableAmount)
                        {
                            if (tExpenseLines.AmountCurr <= rReimburseAmt)
                            {
                                if (tExpenseLines.ReimburseAmt >= tExpenseLines.AmountCurr)
                                {
                                    tExpenseLines.ReimburseAmt = tExpenseLines.AmountCurr;
                                }
                            }
                            else
                            {
                                if (tExpenseLines.ReimburseAmt >= rReimburseAmt)
                                {
                                    tExpenseLines.ReimburseAmt = rReimburseAmt;
                                }
                            }
                            rReimburseAmt = rReimburseAmt - tExpenseLines.ReimburseAmt;
                        }

                        //update status
                        if ((ePolicyStatus == ProjExpPolicyStatus::DayWarning) &&
                        (tExpenseLines.ProjPolicyStatus != ProjExpPolicyStatus::DayFailed)
                        && (tExpenseLines.ProjPolicyStatus != ProjExpPolicyStatus::ReportFailed)
                        && (tExpenseLines.ProjPolicyStatus != ProjExpPolicyStatus::ExpenseFailed))
                        {
                            tExpenseLines.ProjPolicyStatus = ProjExpPolicyStatus::DayWarning;
                        }

                        if (ePolicyStatus == ProjExpPolicyStatus::DayFailed)
                        {
                            tExpenseLines.ProjPolicyStatus = ProjExpPolicyStatus::DayFailed;
                        }

                        if (tExpenseLines.ProjPolicyText != '')
                        {
                            tExpenseLines.ProjPolicyText += ' ';
                        }

                        if (receiptMessage != '' && tExpenseLines.ReceiptsAttached == NoYes::No)
                        {
                            tExpenseLines.ProjPolicyText += receiptMessage + ' ';
                        }

                        tExpenseLines.ProjPolicyText += projPolicyMessage;

                        tExpenseLines.doUpdate();

                        ttscommit;
                    }
                    //end update while
                }
                bReceipt = false;
                bReimFullAmount = false;
                bReimAllowableAmount = false;
                rReimburseAmt = 0;
                next tProjExpPolicies;
            } //end rules while
        } //end lines while

        tExpenseSummary.clear();
        tExpenseLines.clear();
        tProjExpPolicies.clear();

        //Check Client Policies Per Day
        while select sum(AmountCurr)
            from tExpenseSummary
                group by TransDate, ExchangeCode, CostType, ProjId, AddressZipCode, AddressCity, City
                where tExpenseSummary.TrvExpTable == _trvExpTableRecId && tExpenseSummary.ParentRecId == 0
            join RecId from tProjLineProperty
                where tProjLineProperty.LinePropertyId == tExpenseSummary.ProjStatusId && tProjLineProperty.ToBeInvoiced == NoYes::Yes
        {
            //Check Client Policies
            tProjExpPolicies = ProjExpPolicies::findRulesByType(tExpenseSummary.TransDate,
                tExpenseSummary.ExchangeCode, tExpenseSummary.CostType, _workerRecId, tExpenseSummary.editCity(), sClient,
                sContract, tExpenseSummary.ProjId, ProjExpPolicyPerUnit::Day, ProjExpPolicyType::Client);

            //Check Client Policies
            while (tProjExpPolicies)
            {
                str receiptMessage = '';
                str projPolicyMessage = '';
                ePolicyStatus = ProjExpPolicyStatus::DayPassed;

                //Check Receipt Required
                if (tProjExpPolicies.ReceiptRequired == NoYes::Yes && (tProjExpPolicies.ReceiptMin == 0 || tProjExpPolicies.ReceiptMin <= tExpenseSummary.AmountCurr))
                {
                    bReceipt = true;
                    receiptMessage = strFmt("@SYS342017", tProjExpPolicies.ReceiptMin);
                    ePolicyStatus = ProjExpPolicyStatus::DayWarning;
                }

                //Check Amount
                if (tExpenseSummary.AmountCurr > tProjExpPolicies.AllowableAmount)
                {
                    if (tProjExpPolicies.MaximumAmount == 0 || tExpenseSummary.AmountCurr > tProjExpPolicies.MaximumAmount)
                    {
                        ePolicyStatus = ProjExpPolicyStatus::DayFailed;
                    }
                    else
                    {
                        ePolicyStatus = ProjExpPolicyStatus::DayWarning;
                        bInvAllowableAmount = true;
                        rInvoiceAmt = tProjExpPolicies.AllowableAmount;
                    }

                    projPolicyMessage = strfmt("@Expense:ProjectPolicyMessage_DayLevel", tExpenseSummary.CostType, tProjExpPolicies.AllowableAmount);
                }
                else
                {
                    bInvFullAmount = true;
                }

                //return values
                if (ret != ProjExpPolicyStatus::DayFailed)
                {
                    if ((ret != ProjExpPolicyStatus::DayWarning) || (ePolicyStatus == ProjExpPolicyStatus::DayFailed))
                    {
                        ret = ePolicyStatus;
                    }
                }

                if (_updateReImburseAmt || ePolicyStatus == ProjExpPolicyStatus::DayWarning || ePolicyStatus == ProjExpPolicyStatus::DayFailed)
                {
                    //update individual lines
                    while select forupdate tExpenseLines where tExpenseLines.TrvExpTable == _trvExpTableRecId
                        && tExpenseLines.TransDate          == tExpenseSummary.TransDate
                        && tExpenseLines.ExchangeCode       == tExpenseSummary.ExchangeCode
                        && tExpenseLines.CostType           == tExpenseSummary.CostType
                        && tExpenseLines.ProjId             == tExpenseSummary.ProjId
                        && tExpenseLines.AddressZipCode     == tExpenseSummary.AddressZipCode
                        && tExpenseLines.ParentRecId == 0
                        join tProjLineProp
                        where tProjLineProp.LinePropertyId == tExpenseLines.ProjStatusId
                        && tProjLineProp.ToBeInvoiced == NoYes::Yes
                    {
                        ttsbegin;

                        //update receipt required
                        if (bReceipt)
                        {
                            tExpenseLines.ReceiptRequired= NoYes::Yes;
                        }

                        //update billable amounts
                        if (bInvFullAmount)
                        {
                            if (tExpenseLines.InvoiceAmt >= tExpenseLines.AmountCurr)
                            {
                                tExpenseLines.InvoiceAmt = tExpenseLines.AmountCurr;
                            }
                        }
                        if (bInvAllowableAmount)
                        {
                            if (tExpenseLines.AmountCurr <= rInvoiceAmt)
                            {
                                if (tExpenseLines.InvoiceAmt >= tExpenseLines.AmountCurr)
                                {
                                    tExpenseLines.InvoiceAmt = tExpenseLines.AmountCurr;
                                }
                            }
                            else
                            {
                                if (tExpenseLines.InvoiceAmt >= rInvoiceAmt)
                                {
                                    tExpenseLines.InvoiceAmt = rInvoiceAmt;
                                }
                            }
                            rInvoiceAmt = rInvoiceAmt - tExpenseLines.InvoiceAmt;
                        }

                        // Update status.
                        if ((ePolicyStatus == ProjExpPolicyStatus::DayWarning) &&
                            (tExpenseLines.ProjPolicyStatus != ProjExpPolicyStatus::DayFailed)
                            && (tExpenseLines.ProjPolicyStatus != ProjExpPolicyStatus::ReportFailed)
                            && (tExpenseLines.ProjPolicyStatus != ProjExpPolicyStatus::ExpenseFailed))
                        {
                            tExpenseLines.ProjPolicyStatus = ProjExpPolicyStatus::DayWarning;
                        }

                        if (ePolicyStatus == ProjExpPolicyStatus::DayFailed)
                        {
                            tExpenseLines.ProjPolicyStatus = ProjExpPolicyStatus::DayFailed;
                        }

                        if (tExpenseLines.ProjPolicyText != '')
                        {
                            tExpenseLines.ProjPolicyText += ' ';
                        }

                        if (receiptMessage != '' && tExpenseLines.ReceiptsAttached == NoYes::No)
                        {
                            tExpenseLines.ProjPolicyText += receiptMessage + ' ';
                        }

                        tExpenseLines.ProjPolicyText += projPolicyMessage;

                        tExpenseLines.doUpdate();

                        ttscommit;
                    } //end update while
                }
                bReceipt = false;
                bInvFullAmount = false;
                bInvAllowableAmount = false;
                rInvoiceAmt = 0;
                next tProjExpPolicies;
            } //end rules while
        }
        return ret;  //end lines while
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjExpPoliciesReport</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ProjExpPolicyStatus validateProjExpPoliciesReport(RecId              _trvExpTableRecId,
                                                             ProjWorkerRecId    _workerRecId,
                                                             ProjId             _sProjId,
                                                             boolean            _updateReImburseAmt = true)
    {
        ProjExpPolicies         tProjExpPolicies;
        TrvExpTrans             tExpenseSummary;
        TrvExpTrans             tExpenseLines;
        ProjLineProperty        tProjLineProperty, tProjLineProp;
        boolean                 bReceipt;
        ProjExpPolicyStatus     ePolicyStatus = ProjExpPolicyStatus::ReportPassed;
        boolean                 bReimAllowableAmount = false;
        boolean                 bReimFullAmount = false;
        AmountCur               rReimburseAmt;
        boolean                 bInvAllowableAmount = false;
        boolean                 bInvFullAmount = false;
        AmountCur               rInvoiceAmt;
        ProjExpPolicyStatus     ret = ProjExpPolicyStatus::NoPolicy;
        ProjInvoiceProjId       sContract;
        CustAccount             sClient;
        date                    dReportDate;

        sContract = ProjTable::find(_sProjId).ProjInvoiceProjId;

        sClient = ProjFundingSource::findCustAccount(sContract).CustAccount;

        dReportDate = TrvExpenseHelper::getUserPreferredTimeZoneDate(TrvExpTable::findRecId(_trvExpTableRecId).CreatedDateTime);

        while select sum(AmountCurr)
            from tExpenseSummary
                group by ExchangeCode, CostType, ProjId, AddressZipCode, AddressCity, City
                where tExpenseSummary.TrvExpTable == _trvExpTableRecId && tExpenseSummary.ParentRecId == 0
        {
            //Check Company Rules
            tProjExpPolicies = ProjExpPolicies::findRulesByType(dReportDate,tExpenseSummary.ExchangeCode,
                 tExpenseSummary.CostType, _workerRecId, tExpenseSummary.editCity(), sClient, sContract,
                tExpenseSummary.ProjId, ProjExpPolicyPerUnit::Report, ProjExpPolicyType::Company);

            while (tProjExpPolicies)
            {
                str receiptMessage = '';
                str projPolicyMessage = '';
                ePolicyStatus = ProjExpPolicyStatus::ReportPassed;

                //Check Receipt Required
                if (tProjExpPolicies.ReceiptRequired == NoYes::Yes && (tProjExpPolicies.ReceiptMin == 0 || tProjExpPolicies.ReceiptMin <= tExpenseSummary.AmountCurr))
                {
                    bReceipt = true;
                    receiptMessage = strFmt("@SYS342018", tProjExpPolicies.ReceiptMin);
                    ePolicyStatus = ProjExpPolicyStatus::ReportWarning;
                }

                //Check Amount
                if (tExpenseSummary.AmountCurr > tProjExpPolicies.AllowableAmount)
                {
                    if (tProjExpPolicies.MaximumAmount == 0 || tExpenseSummary.AmountCurr > tProjExpPolicies.MaximumAmount)
                    {
                        ePolicyStatus = ProjExpPolicyStatus::ReportFailed;
                    }
                    else
                    {
                        ePolicyStatus = ProjExpPolicyStatus::ReportWarning;
                        bReimAllowableAmount = true;
                        rReimburseAmt = tProjExpPolicies.AllowableAmount;
                    }

                    projPolicyMessage = strfmt("@Expense:ProjectPolicyMessage_ReportLevel", tExpenseSummary.CostType, tProjExpPolicies.AllowableAmount);
                }
                else
                {
                    bReimFullAmount = true;
                }

                //return values
                if (ret != ProjExpPolicyStatus::ReportFailed)
                {
                    if ((ret != ProjExpPolicyStatus::ReportWarning) || (ePolicyStatus == ProjExpPolicyStatus::ReportFailed))
                    {
                        ret = ePolicyStatus;
                    }
                }

                if (_updateReImburseAmt || ePolicyStatus == ProjExpPolicyStatus::ReportWarning || ePolicyStatus == ProjExpPolicyStatus::ReportFailed)
                {
                    //update individual lines
                    while select forupdate tExpenseLines where tExpenseLines.TrvExpTable == _trvExpTableRecId
                        && tExpenseLines.ExchangeCode   == tExpenseSummary.ExchangeCode
                        && tExpenseLines.CostType       == tExpenseSummary.CostType
                        && tExpenseLines.ProjId         == tExpenseSummary.ProjId
                        && tExpenseLines.AddressZipCode == tExpenseSummary.AddressZipCode
                        && tExpenseLines.ParentRecId == 0
                    {
                        ttsbegin;

                        //update receipt required
                        if (bReceipt)
                        {
                            tExpenseLines.ReceiptRequired= NoYes::Yes;
                        }

                        //update reimbursement amounts
                        if (bReimFullAmount)
                        {
                            if (tExpenseLines.ReimburseAmt >= tExpenseLines.AmountCurr)
                            {
                                tExpenseLines.ReimburseAmt = tExpenseLines.AmountCurr;
                            }
                        }
                        if (bReimAllowableAmount)
                        {
                            if (tExpenseLines.AmountCurr <= rReimburseAmt)
                            {
                                if (tExpenseLines.ReimburseAmt >= tExpenseLines.AmountCurr)
                                {
                                    tExpenseLines.ReimburseAmt = tExpenseLines.AmountCurr;
                                }
                            }
                            else
                            {
                                if (tExpenseLines.ReimburseAmt >= rReimburseAmt)
                                {
                                    tExpenseLines.ReimburseAmt = rReimburseAmt;
                                }
                            }
                            rReimburseAmt = rReimburseAmt - tExpenseLines.ReimburseAmt;
                        }

                        //update status
                        if ((ePolicyStatus == ProjExpPolicyStatus::ReportWarning) &&
                            (tExpenseLines.ProjPolicyStatus != ProjExpPolicyStatus::DayFailed)
                            && (tExpenseLines.ProjPolicyStatus != ProjExpPolicyStatus::ReportFailed)
                            && (tExpenseLines.ProjPolicyStatus != ProjExpPolicyStatus::ExpenseFailed))
                        {
                            tExpenseLines.ProjPolicyStatus = ProjExpPolicyStatus::ReportWarning;
                        }

                        if (ePolicyStatus == ProjExpPolicyStatus::ReportFailed)
                        {
                            tExpenseLines.ProjPolicyStatus = ProjExpPolicyStatus::ReportFailed;
                        }

                        if (tExpenseLines.ProjPolicyText != '')
                        {
                            tExpenseLines.ProjPolicyText += ' ';
                        }

                        if (receiptMessage != '' && tExpenseLines.ReceiptsAttached == NoYes::No)
                        {
                            tExpenseLines.ProjPolicyText += receiptMessage + ' ';
                        }

                        tExpenseLines.ProjPolicyText += projPolicyMessage;

                        tExpenseLines.doUpdate();

                        ttscommit;
                    } //end update while
                }
                bReceipt = false;
                bReimFullAmount = false;
                bReimAllowableAmount = false;
                rReimburseAmt = 0;
                next tProjExpPolicies;
            } //end rules while
        } //end lines while

        tExpenseSummary.clear();
        tExpenseLines.clear();
        tProjExpPolicies.clear();

        //Check Client Rules Per Report
        while select sum(AmountCurr)
            from tExpenseSummary
                group by ExchangeCode, CostType, ProjId, AddressZipCode, AddressCity, City
                where tExpenseSummary.TrvExpTable == _trvExpTableRecId && tExpenseSummary.ParentRecId == 0
            join RecId from tProjLineProperty
                where tProjLineProperty.LinePropertyId == tExpenseSummary.ProjStatusId && tProjLineProperty.ToBeInvoiced == NoYes::Yes
        {
            //Check Client Rules
            tProjExpPolicies = ProjExpPolicies::findRulesByType(dReportDate, tExpenseSummary.ExchangeCode,
                tExpenseSummary.CostType, _workerRecId, tExpenseSummary.editCity(), sClient, sContract,
                tExpenseSummary.ProjId, ProjExpPolicyPerUnit::Report, ProjExpPolicyType::Client);

            //Check Client Rules
            while (tProjExpPolicies)
            {
                str receiptMessage = '';
                str projPolicyMessage = '';
                ePolicyStatus = ProjExpPolicyStatus::ReportPassed;

                //Check Receipt Required
                if (tProjExpPolicies.ReceiptRequired == NoYes::Yes && (tProjExpPolicies.ReceiptMin == 0 || tProjExpPolicies.ReceiptMin <= tExpenseSummary.AmountCurr))
                {
                    bReceipt = true;
                    receiptMessage = strFmt("@SYS342018", tProjExpPolicies.ReceiptMin);
                    ePolicyStatus = ProjExpPolicyStatus::ReportWarning;
                }

                //Check Amount
                if (tExpenseSummary.AmountCurr > tProjExpPolicies.AllowableAmount)
                {
                    if (tProjExpPolicies.MaximumAmount == 0 || tExpenseSummary.AmountCurr > tProjExpPolicies.MaximumAmount)
                    {
                        ePolicyStatus = ProjExpPolicyStatus::ReportFailed;
                    }
                    else
                    {
                        ePolicyStatus = ProjExpPolicyStatus::ReportWarning;
                        bInvAllowableAmount = true;
                        rInvoiceAmt = tProjExpPolicies.AllowableAmount;
                    }

                    projPolicyMessage = strfmt("@Expense:ProjectPolicyMessage_ReportLevel", tExpenseSummary.CostType, tProjExpPolicies.AllowableAmount);
                }
                else
                {
                    bInvFullAmount = true;
                }

                //return values
                if (ret != ProjExpPolicyStatus::ReportFailed)
                {
                    if ((ret != ProjExpPolicyStatus::ReportWarning) || (ePolicyStatus == ProjExpPolicyStatus::ReportFailed))
                    {
                        ret = ePolicyStatus;
                    }
                }

                if (_updateReImburseAmt || ePolicyStatus == ProjExpPolicyStatus::ReportWarning || ePolicyStatus == ProjExpPolicyStatus::ReportFailed)
                {
                    //update individual lines
                    while select forupdate tExpenseLines where tExpenseLines.TrvExpTable == _trvExpTableRecId
                        && tExpenseLines.ExchangeCode       == tExpenseSummary.ExchangeCode
                        && tExpenseLines.CostType           == tExpenseSummary.CostType
                        && tExpenseLines.ProjId             == tExpenseSummary.ProjId
                        && tExpenseLines.AddressZipCode     == tExpenseSummary.AddressZipCode
                        && tExpenseLines.ParentRecId == 0
                        join tProjLineProp
                        where tProjLineProp.LinePropertyId == tExpenseLines.ProjStatusId
                        && tProjLineProp.ToBeInvoiced == NoYes::Yes
                    {
                        ttsbegin;

                        //update receipt required
                        if (bReceipt)
                        {
                            tExpenseLines.ReceiptRequired= NoYes::Yes;
                        }

                        //update billable amounts
                        if (bInvFullAmount)
                        {
                            if (tExpenseLines.InvoiceAmt >= tExpenseLines.AmountCurr)
                            {
                                tExpenseLines.InvoiceAmt = tExpenseLines.AmountCurr;
                            }
                        }
                        if (bInvAllowableAmount)
                        {
                            if (tExpenseLines.AmountCurr <= rInvoiceAmt)
                            {
                                if (tExpenseLines.InvoiceAmt >= tExpenseLines.AmountCurr)
                                {
                                    tExpenseLines.InvoiceAmt = tExpenseLines.AmountCurr;
                                }
                            }
                            else
                            {
                                if (tExpenseLines.InvoiceAmt >= rInvoiceAmt)
                                {
                                    tExpenseLines.InvoiceAmt = rInvoiceAmt;
                                }
                            }
                            rInvoiceAmt = rInvoiceAmt - tExpenseLines.InvoiceAmt;
                        }

                        //update status
                        if ((ePolicyStatus == ProjExpPolicyStatus::ReportWarning) &&
                            (tExpenseLines.ProjPolicyStatus != ProjExpPolicyStatus::DayFailed)
                            && (tExpenseLines.ProjPolicyStatus != ProjExpPolicyStatus::ReportFailed)
                            && (tExpenseLines.ProjPolicyStatus != ProjExpPolicyStatus::ExpenseFailed))
                        {
                            tExpenseLines.ProjPolicyStatus = ProjExpPolicyStatus::ReportWarning;
                        }

                        if (ePolicyStatus == ProjExpPolicyStatus::ReportFailed)
                        {
                            tExpenseLines.ProjPolicyStatus = ProjExpPolicyStatus::ReportFailed;
                        }

                        if (tExpenseLines.ProjPolicyText != '')
                        {
                            tExpenseLines.ProjPolicyText += ' ';
                        }

                        if (receiptMessage != '' && tExpenseLines.ReceiptsAttached == NoYes::No)
                        {
                            tExpenseLines.ProjPolicyText += receiptMessage + ' ';
                        }

                        tExpenseLines.ProjPolicyText += projPolicyMessage;

                        tExpenseLines.doUpdate();

                        ttscommit;
                    } //end update while
                }
                bReceipt = false;
                bInvFullAmount = false;
                bInvAllowableAmount = false;
                rInvoiceAmt = 0;
                next tProjExpPolicies;
            } //end rules while
        }
        return ret;  //end lines while
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>