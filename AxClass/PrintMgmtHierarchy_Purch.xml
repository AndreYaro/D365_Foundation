<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PrintMgmtHierarchy_Purch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PrintMgmtHierarchy_Purch</c> class is responsible for managing the Accounts Payable
///    hierarchy.
/// </summary>
/// <remarks>
///    The <c>PrintMgmtHierarchy_Purch</c> class manages the defaulting hierarchy for the Accounts Payable
///    module. It manages Print Management data for transactions, vendors and the entire module-level.
/// </remarks>
public class PrintMgmtHierarchy_Purch extends PrintMgmtHierarchy
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNodesImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds valid nodes for the <c>PrintMgmtHierarchy_Purch</c> class.
    /// </summary>
    /// <returns>
    ///    A list of <c>PrintMgmtNodeType</c> enumeration values that specify the valid nodes for the
    ///    <c>PrintMgmtHierarchy_Purch</c> class hierarchy.
    /// </returns>
    /// <remarks>
    ///    The valid nodes for this hierarchy are <c>PrintMgmtNode_Purch</c>, <c>PrintMgmtNode_VendTable</c>,
    ///    <c>PrintMgmtNode_PurchTable</c>, <c>PrintMgmtNode_PurchRFQTable</c>, and
    ///    <c>PrintMgmtNode_PurchRFQCaseTable</c> class nodes.
    /// </remarks>
    protected List getNodesImplementation()
    {
        List supportedNodes = new List(Types::Enum);

        // Add allowable nodes for this hierarchy
        supportedNodes.addEnd(PrintMgmtNodeType::Purch);
        supportedNodes.addEnd(PrintMgmtNodeType::VendTable);
        supportedNodes.addEnd(PrintMgmtNodeType::PurchTable);
        supportedNodes.addEnd(PrintMgmtNodeType::PurchRFQTable);
        supportedNodes.addEnd(PrintMgmtNodeType::PurchRFQVendLink);
        supportedNodes.addEnd(PrintMgmtNodeType::PurchAgreement);

        // <GEEU>
        if (isConfigurationkeyEnabled(configurationKeyNum(CzCustVendAdvanceInvoices)))
        {
            supportedNodes.addEnd(PrintMgmtNodeType::PurchaseAdvanceInvoice);
        }
        // </GEEU>

        return supportedNodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParentImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the parent node instance based on the information provided.
    /// </summary>
    /// <param name="_nodeInstance">
    ///    The instance of the <c>PrintMgmtNodeInstance</c> class for which the parent is being requested.
    /// </param>
    /// <param name="_docType">
    ///    The <c>PrintMgmtDocumentType</c> enumeration value that is used to determine the appropriate parent.
    /// </param>
    /// <returns>
    ///    An instance of the parent <c>PrintMgmtNodeInstance</c> class; otherwise, null.
    /// </returns>
    /// <remarks>
    ///    The parent returned can vary on the table being referenced by the _<paramref name="nodeInstance" />
    ///    parameter and the _<paramref name="docType" /> parameter being requested.
    /// </remarks>
    protected PrintMgmtNodeInstance getParentImplementation(PrintMgmtNodeInstance _nodeInstance, PrintMgmtDocumentType _docType)
    {
        // Find the appropriate parent
        PrintMgmtNodeInstance result;
        PurchTable purchTable;
        PurchRFQTable purchRFQTable;
        PurchRFQVendLink purchRFQVendLink;
        PurchAgreementHeader purchAgreementHeader;
        // <GEEU>
        CzVendAdvanceInvoiceTable vendAdvanceInvoiceTable;
        // </GEEU>

        result = new PrintMgmtNodeInstance();

        // Get the node instance type
        switch (_nodeInstance.parmNodeDefinition().getNodeType())
        {
            case PrintMgmtNodeType::PurchTable:
                purchTable = _nodeInstance.parmReferencedTableBuffer();

                if (_docType == PrintMgmtDocumentType::PurchaseOrderInvoice && strlen(purchTable.InvoiceAccount) != 0)
                {
                    result.parmReferencedTableBuffer(purchTable.selectRefRecord(fieldnum(PurchTable, InvoiceAccount)));
                }
                else if (_docType != PrintMgmtDocumentType::PurchaseOrderInvoice && strlen(purchTable.OrderAccount) != 0)
                {
                    // For all other document types, just determine if OrderAccount is present
                    result.parmReferencedTableBuffer(purchTable.selectRefRecord(fieldnum(PurchTable, OrderAccount)));
                }
                else
                {
                    // No specific "instance" present
                    result.parmReferencedTableBuffer(null);
                }

                result.parmNodeDefinition(PrintMgmtNode::construct(PrintMgmtNodeType::VendTable));
                break;

            case PrintMgmtNodeType::PurchRFQTable:
                purchRFQTable = _nodeInstance.parmReferencedTableBuffer();

                if (strlen(purchRFQTable.VendAccount) != 0)
                {
                    result.parmReferencedTableBuffer(purchRFQTable.selectRefRecord(fieldnum(PurchRFQTable, VendAccount)));
                }
                else
                {
                    result.parmReferencedTableBuffer(null);
                }

                result.parmNodeDefinition(PrintMgmtNode::construct(PrintMgmtNodeType::VendTable));
                break;

            case PrintMgmtNodeType::PurchRFQVendLink:
                purchRFQVendLink = _nodeInstance.parmReferencedTableBuffer();
                result.parmReferencedTableBuffer(purchRFQVendLink.selectRefRecord(fieldnum(PurchRFQVendLink, VendAccount)));

                result.parmNodeDefinition(PrintMgmtNode::construct(PrintMgmtNodeType::VendTable));
                break;

            case PrintMgmtNodeType::PurchAgreement:
                purchAgreementHeader = _nodeInstance.parmReferencedTableBuffer();
                if (strlen(purchAgreementHeader.VendAccount) != 0)
                {
                    result.parmReferencedTableBuffer(purchAgreementHeader.selectRefRecord(fieldnum(PurchAgreementHeader, VendAccount)));
                }
                else
                {
                    result.parmReferencedTableBuffer(null);
                }

                result.parmNodeDefinition(PrintMgmtNode::construct(PrintMgmtNodeType::VendTable));
                break;

            // <GEEU>
            case PrintMgmtNodeType::PurchaseAdvanceInvoice:
                vendAdvanceInvoiceTable = _nodeInstance.parmReferencedTableBuffer();

                if (strLen(vendAdvanceInvoiceTable.InvoiceAccount) != 0)
                {
                    result.parmReferencedTableBuffer(vendAdvanceInvoiceTable.selectRefRecord(fieldNum(CzVendAdvanceInvoiceTable, InvoiceAccount)));
                }
                else if (strLen(vendAdvanceInvoiceTable.OrderAccount) != 0)
                {
                    result.parmReferencedTableBuffer(vendAdvanceInvoiceTable.selectRefRecord(fieldNum(CzVendAdvanceInvoiceTable, OrderAccount)));
                }
                else
                {
                    // No specific "instance" present
                    result.parmReferencedTableBuffer(null);
                }

                result.parmNodeDefinition(PrintMgmtNode::construct(PrintMgmtNodeType::VendTable));

                break;
            // </GEEU>

            case PrintMgmtNodeType::VendTable:
                // No record to reference, but there is another node in the hierarchy
                result.parmReferencedTableBuffer(null);
                result.parmNodeDefinition(PrintMgmtNode::construct(PrintMgmtNodeType::Purch));
                break;

            case PrintMgmtNodeType::Purch:
                // When no parent is present, return null
                result = null;
                break;
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>