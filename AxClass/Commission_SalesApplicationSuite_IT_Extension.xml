<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Commission_SalesApplicationSuite_IT_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(Commission_Sales))]
public final class Commission_SalesApplicationSuite_IT_Extension
{
    public CommissionType_IT commissionType_IT;

}

]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        boolean ret = next Init();

        if (FeatureStateProvider::isFeatureEnabled(CommissionSettlementOnPaymentsFeature::instance()))
        {
            CommissionTrans commissionTrans = this.parmCommissionTrans_W();
            itemId_IT = custInvoiceTrans.ItemId;
            commissionType_IT = custInvoiceJour.CommissionType_IT;
            commissionTrans.CommissionType_IT = commissionType_IT;
            this.parmCommissionTrans_W(commissionTrans);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerVoucherTrans_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates voucher transactions.
    /// </summary>
    /// <param name = "_debitAC">The debit account.</param>
    /// <param name = "_creditAccount">The credit account.</param>
    /// <param name = "_amountToPost">The amount to post.</param>
    public void ledgerVoucherTrans_IT(
        LedgerDimensionDefaultAccount _debitAC = debitAC,
        LedgerDimensionDefaultAccount _creditAccount = creditAccount,
        amountCur _amountToPost = commissionTrans.amountCur)

    {
        if (commissionType_IT == CommissionType_IT::Invoice)
        {
            LedgerVoucher ledgerVoucher = this.parmLedgerVoucher();
            TransTxt transTxt = ledgerVoucher.findLedgerVoucherObject().lastTransTxt();

            TransactionTxt transactionTxt = this.parmTransactionTxt_W();
            transactionTxt = TransactionTxt::construct();
            transactionTxt.setLanguage (languageId);
            transactionTxt.setType (LedgerTransTxt::SalesCommission);
            transactionTxt.setVoucher (ledgerVoucher.lastVoucher());
            transactionTxt.setKey1 (DirPerson::find(commissionTrans.Person).NameAlias);

            this.addLedgerVoucherTrans_IT(
                ledgerVoucher,
                LedgerPostingType::SalesCommission,
                LedgerDimensionFacade::serviceCreateLedgerDimension(_debitAC, commissionTrans.DefaultDimension),
                commissionTrans.currencyCode,
                commissionTrans.TableId,
                commissionTrans.RecId,
                _amountToPost,
                transactionTxt.txt());

            this.addLedgerVoucherTrans_IT(
                ledgerVoucher,
                LedgerPostingType::SalesOffsetAccountCommission,
                LedgerDimensionFacade::serviceCreateLedgerDimension(_creditAccount, commissionTrans.DefaultDimension),
                commissionTrans.currencyCode,
                commissionTrans.TableId,
                commissionTrans.RecId,
                -_amountToPost,
                transactionTxt.txt());

            ledgerVoucher.findLedgerVoucherObject().lastTransTxt(transTxt);

            this.parmTransactionTxt_W(transactionTxt);
            this.parmLedgerVoucher(ledgerVoucher);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setThresholds_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the thresholds.
    /// </summary>
    /// <param name = "_commissionSalesRep">The <c>CommissionSalesRep</c> record.</param>
    /// <param name = "_commissionCalc">The <c>CommissionCalc</c> record.</param>
    public void setThresholds_IT(CommissionSalesRep _commissionSalesRep, CommissionCalc _commissionCalc)
    {
        CommissionTrans commissionTrans = this.parmCommissionTrans_W();

        if (commissionType_IT == CommissionType_IT::Payment)
        {
            if(_commissionSalesRep.UseThresholds_IT)
            {
                commissionTrans.UseThresholds_IT = _commissionSalesRep.UseThresholds_IT;
                commissionTrans.LowerThreshold_IT = _commissionSalesRep.LowerThreshold_IT;
                commissionTrans.UpperThreshold_IT = _commissionSalesRep.UpperThreshold_IT;
            }
            else if(_commissionCalc.UseThresholds_IT)
            {
                commissionTrans.UseThresholds_IT = _commissionCalc.UseThresholds_IT;
                commissionTrans.LowerThreshold_IT = _commissionCalc.LowerThreshold_IT;
                commissionTrans.UpperThreshold_IT = _commissionCalc.UpperThreshold_IT;
            }
        }

        this.parmCommissionTrans_W(commissionTrans);

    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAccruedAmount_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates accrued amount.
    /// </summary>
    public void updateAccruedAmount_IT()
    {
        if (CommissionType_IT == CommissionType_IT::Invoice)
        {
            CommissionAccruing_IT accruing;
            accruing.initValue();

            accruing = CommissionAccruing_IT::findFromCommissionTrans(
                commissionTrans,
                '',
                true);

            if (!accruing)
            {
                accruing.initFromCommissionTrans(commissionTrans);
            }

            accruing.Voucher = custInvoiceJour.LedgerVoucher;
            accruing.AmountMST = commissionTrans.AmountMST;
            accruing.AmountCur = commissionTrans.AmountCur;

            if (ledgerVoucher)
            {
                accruing.TransDate = ledgerVoucher.lastTransDate();
                accruing.PostedAmount = accruing.AmountCur;
            }

            accruing.write();
        }

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>