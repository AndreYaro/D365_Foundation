<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayFundTransReport_Ctype</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Off-funds allocations (in income types) report.
/// </summary>
final class RPayFundTransReport_Ctype extends RPayFundTransReport implements BatchRetryable
{
    #define.paytype('paytype')
    #define.payTypeLabel('payTypeLabel')
    RPayCostType       prevPayType;
    #define.paytypeCol(1)
    #define.AmountCol(2)
    #define.firstCol(3)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createColumns</Name>
				<Source><![CDATA[
    protected void createColumns()
    {
        OXMLWorksheet_RU    worksheet   = document.workbook().getWorksheet(1);
        str                 worksheetName;
        int                 rowHeader, rowBody, rowProlog, rowDate, rowPageNum, rowFooter, rowOrgHeader, rowOrgFooter;
        int                 cx;
        real                width;
        int                 fieldsCount, i;
        int                 fundTotalsCol;
        Set                 mergeCells;

        fieldsCount = fundsMap.elements();
        fundTotalsCol = #firstCol + 2*fieldsCount;

        [worksheetName, rowDate]  = worksheet.workbook().definedNames().lookup(([#PrologDate, #localSheetIdUndefined]));
        [worksheetName, rowPageNum] = worksheet.workbook().definedNames().lookup(([#PrologPageNum, #localSheetIdUndefined]));
        [worksheetName, rowProlog]  = worksheet.workbook().definedNames().lookup(([#PrologLabels, #localSheetIdUndefined]));
        [worksheetName, rowHeader]  = worksheet.workbook().definedNames().lookup(([#Header, #localSheetIdUndefined]));
        [worksheetName, rowOrgHeader]    = worksheet.workbook().definedNames().lookup(([#OrgHeader, #localSheetIdUndefined]));
        [worksheetName, rowBody]    = worksheet.workbook().definedNames().lookup(([#Body, #localSheetIdUndefined]));
        [worksheetName, rowOrgFooter]    = worksheet.workbook().definedNames().lookup(([#OrgFooter, #localSheetIdUndefined]));
        [worksheetName, rowFooter]  = worksheet.workbook().definedNames().lookup(([#Footer, #localSheetIdUndefined]));

        //multiply
        worksheet.rowTemplate(rowDate).multiplyCell(#firstCol, 2*fieldsCount);
        worksheet.rowTemplate(rowPageNum).multiplyCell(#firstCol, 2*fieldsCount);
        worksheet.rowTemplate(rowProlog).multiplyCell(1, 2*fieldsCount+2);
        worksheet.rowTemplate(rowHeader).multiplyCell(1, 2*fieldsCount+2);
        worksheet.rowTemplate(rowBody).multiplyCell(1, 2*fieldsCount+2);
        if (printHrmOrganizationId)
        {
            worksheet.rowTemplate(rowOrgHeader).multiplyCell(#paytypeCol, 2*fieldsCount+2);
            worksheet.rowTemplate(rowOrgFooter).multiplyCell(#AmountCol, 2*fieldsCount+1);
        }
        worksheet.rowTemplate(rowFooter).multiplyCell(#firstCol, 2*fieldsCount);

        //naming
        document.workbook().addDefinedName(#TaxBaseLabel,  worksheet.name(), rowProlog, #firstCol, rowProlog, #firstCol);
        document.workbook().addDefinedName(#pagenum,  worksheet.name(), rowPageNum, #firstCol + 2*fieldsCount, rowPageNum, #firstCol + 2*fieldsCount);
        document.workbook().addDefinedName(#date,  worksheet.name(), rowDate, #firstCol + 2*fieldsCount, rowDate, #firstCol + 2*fieldsCount);
        document.workbook().addDefinedName(#FundAmountLabel,  worksheet.name(), rowProlog, #firstCol + fieldsCount, rowProlog, #firstCol + fieldsCount);

        document.workbook().addDefinedName(#paytypeLabel,  worksheet.name(), rowProlog, #paytypeCol, rowProlog, #paytypeCol);
        document.workbook().addDefinedName(#paytype,  worksheet.name(), rowBody,#paytypeCol, rowBody, #paytypeCol);

        document.workbook().addDefinedName(#taxAmountBodyLabel,  worksheet.name(), rowProlog, #AmountCol, rowProlog, #AmountCol);
        document.workbook().addDefinedName(#taxAmountBody,  worksheet.name(), rowBody, #AmountCol, rowBody, #AmountCol);
        if (printHrmOrganizationId)
        {
            document.workbook().addDefinedName(#orgName,  worksheet.name(), rowOrgHeader, #paytypeCol, rowOrgHeader, #paytypeCol);
            document.workbook().addDefinedName(#taxAmountOrg,  worksheet.name(), rowOrgFooter, #AmountCol, rowOrgFooter, #AmountCol);
            document.workbook().addDefinedName(#FundTotalsOrg,  worksheet.name(), rowOrgFooter, #firstCol + 2*fieldsCount, rowOrgFooter, #firstCol + 2*fieldsCount);
        }

        for (i = 1; i <= 2*fieldsCount; i++)
        {
            document.workbook().addDefinedName(#sheetHeader + int2str(i), worksheet.name(), rowHeader, i+#firstCol-1, rowHeader, i+#firstCol-1);
            document.workbook().addDefinedName(#sheetBody + int2str(i),  worksheet.name(), rowBody, i+#firstCol - 1, rowBody, i + #firstCol -1);
            document.workbook().addDefinedName(#sheetFooter + int2str(i),  worksheet.name(), rowFooter, i+#firstCol - 1, rowFooter, i + #firstCol -1);
            if (printHrmOrganizationId)
            {
                document.workbook().addDefinedName(#sheetOrgFooter + int2str(i),  worksheet.name(), rowOrgFooter, i+#firstCol - 1, rowOrgFooter, i + #firstCol -1);
            }
        }
        document.workbook().addDefinedName(#fundTotalsLabel, worksheet.name(), rowProlog, fundTotalsCol, rowProlog, fundTotalsCol);
        document.workbook().addDefinedName(#fundTotals, worksheet.name(), rowBody, fundTotalsCol, rowBody, fundTotalsCol);
        document.workbook().addDefinedName(#FundTotalsFooter, worksheet.name(), rowFooter, fundTotalsCol, rowBody, fundTotalsCol);

        //merge
        mergeCells = new Set(Types::Container);
        mergeCells.add([rowProlog, rowHeader,  #paytypeCol, #paytypeCol]);
        mergeCells.add([rowProlog, rowHeader,  #AmountCol, #AmountCol]);
        mergeCells.add([rowProlog, rowProlog, #firstCol, #firstCol + fieldsCount -1]);
        mergeCells.add([rowProlog, rowProlog,  #firstCol + fieldsCount, fundTotalsCol-1]);
        mergeCells.add([rowProlog, rowHeader,  fundTotalsCol, fundTotalsCol]);
        worksheet.addMergeCellsCopy(mergeCells, rowProlog, rowProlog);

        //set width
        worksheet.parmSaveColumnWidths(true);

        width = this.convertPointsToTwips(70);
        for (cx = #firstCol-1; cx <= 2*fieldsCount+#firstCol; cx++)
        {
            worksheet.columnWidth(cx, width);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    protected void fillBody()
    {
        RPayAmount      amount;
        RPayTrans       rpayTrans;
        Query           q;
        QueryRun        qrLocal;
        super();

        this.insertValueToSection(#payType, prevPayType);
        q = queryRun.query();
        qrLocal = new QueryRun(q);

        while (qrLocal.next())
        {
            rpayTrans = qrLocal.get(TableNum(rpayTrans));
            if (rpayTrans.PayCtype == prevPayType
               && rpayTrans.PayPeriod == rPayPeriod
               && (!printHrmOrganizationId || rpayTrans.HrmOrganisationId == prevOrganizationId))
            {
                amount += rpayTrans.Amount;
            }
        }

        FooterTaxAmount += amount;
        orgTaxAmount    += amount;
        this.insertValueToSection(#taxAmountBody, amount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillProlog</Name>
				<Source><![CDATA[
    protected void fillProlog()
    {
        super();
        this.insertValueToSection(#paytypeLabel, "@RUP309");
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    protected Query initQuery()
    {
        QueryBuildDataSource    rpayTransDS;
        QueryBuildDataSource    rpayTableDS;
        QueryBuildRange         range;
        Query                   query;

        query = new Query();

        rpayTransDS = query.addDataSource(tablenum(RPayTrans));
        range = findOrCreateRange_W(rpayTransDS, fieldNum(RPayTrans, PayPeriod), queryValue(RPayChargeType::AddSum));
        range.status(RangeStatus::Hidden);
        findOrCreateRange_W(rpayTransDS, fieldNum(RPayTrans, HrmOrganisationId));

        rpayTableDS  = rpayTransDS.addDataSource(tablenum(RPayTable));
        rpayTableDS.relations(true);
        range = findOrCreateRange_W(rpayTableDS, fieldNum(RPayTable, PayChargeType), queryValue(RPayChargeType::AddSum));
        range.status(RangeStatus::Hidden);

        findOrCreateRange_W(rpayTableDS, fieldNum(RPayTable, PayCType));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printBody</Name>
				<Source><![CDATA[
    protected void printBody()
    {
        int                 fundsCount, i;
        MapEnumerator       fundsEnumerator;
        RPayCounterUnit       fund;
        RPayFundMember        rPayFundMember;
        RpayFundCtypeSplitSum rpayFundCtypeSplitSum;
        RPayTrans             rpayTrans;

        fundsCount = fundsMap.elements();
        fundsEnumerator = fundsMap.getEnumerator();

        if (queryRun.next())
        {
            rpayTrans = queryRun.get(tableNum(RPayTrans));
            prevPayType = rpayTrans.PayCtype;
            prevOrganizationId = rpayTrans.HrmOrganisationId;
            if (printHrmOrganizationId)
            {
                this.execute(#orgHeader);
            }
        }

        queryRun.reset();
        while (queryRun.next())
        {
            rpayTrans = queryRun.get(tableNum(RPayTrans));
            fundsEnumerator.reset();

            if (printHrmOrganizationId && rpayTrans.HrmOrganisationId != prevOrganizationId)
            {
                if (prevOrganizationId)
                {
                    this.execute(#Body);
                    this.execute(#OrgFooter);
                }
                this.execute(#OrgHeader);
                prevOrganizationId = rpayTrans.HrmOrganisationId;
                prevPayType = rpayTrans.PayCtype;
            }

            if (rpayTrans.PayCtype != prevPayType)
            {
                this.execute(#Body);
                prevPayType = rpayTrans.PayCtype;
            }

            for (i = 1; i <= fundsCount; i++)
            {
                if ( !fundsEnumerator.moveNext())
                {
                    break;
                }
                fund = fundsEnumerator.currentKey();
                select firstonly rPayFundMember
                    where rPayFundMember.PayCostType == rpayTrans.PayCtype
                       && rPayFundMember.CounterUnit == fund;

                if (rPayFundMember)
                {
                    rpayFundCtypeSplitSum = new RpayFundCtypeSplitSum(rPayFundMember.CounterUnit,rPayTrans);

                    rpayFundCtypeSplitSum.calc();
                    amounts = conPoke(amounts, i, conPeek(amounts, i) + rpayFundCtypeSplitSum.getBaseAmount());
                    amounts = conPoke(amounts, i+fundsCount, conPeek(amounts, i+fundsCount) + rpayFundCtypeSplitSum.getFundAmount());
                    fundAmount += rpayFundCtypeSplitSum.getFundAmount();
                }
            }
        }
        this.execute(#Body);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets report name.
    /// </summary>
    /// <returns>
    /// The report name.
    /// </returns>
    public str reportName()
    {
        return "@RUP878";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    protected void updateQuery()
    {
        super();
        queryRun.query().dataSourceTable(tableNum(RPayTrans)).addSortField(fieldnum(RPayTrans, PayCtype));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>