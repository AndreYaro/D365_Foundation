<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PlSADCalculation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Wrappers for SAD document calculation.
/// </summary>
final class PlSADCalculation
{
    PlSADTable sadTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkSADPurchLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies whether SAD document for purchase order has effective lines and invoices.
    /// </summary>
    /// <returns>Deterimine whether SAD document is effective or not.</returns>
    public boolean checkSADPurchLines()
    {
        boolean        ret = true;
        PlSadPurchLine sadPurchLine;
        PlSadTrans     sadTrans;
        PlSadInvoice   sadInvoice;
        PurchTable     purchTable;

        select firstonly RecId
        from sadTrans
            where sadTrans.SADNumberCode == sadTable.SadNumberCode
        notexists join sadPurchLine
            where sadPurchLine.SADNumberCode == sadTrans.SADNumberCode &&
                  sadPurchLine.SADLineNo     == sadTrans.SADLineNo;
        if (sadTrans.RecId)
        {
            ret = checkFailed("@GLS109496");
        }

        select firstonly RecId
        from sadInvoice
            where sadInvoice.SADNumberCode == sadTable.SadNumberCode
        notexists join sadPurchLine
            where sadPurchLine.SADNumberCode    == sadInvoice.SADNumberCode &&
                  sadPurchLine.SADInvoiceLineNo == sadInvoice.SADInvoiceLineNo;
        if (sadInvoice.RecId)
        {
            ret = checkFailed("@GLS109497");
        }

        select firstonly RecId
        from sadPurchLine
            where ! sadPurchLine.SADLineNo &&
                  sadPurchLine.SADNumberCode == sadInvoice.SADNumberCode;
        if (sadPurchLine.RecId)
        {
            ret = checkFailed("@GLS109518");
        }

        select firstonly RecId
        from sadPurchLine
            where ! sadPurchLine.SADInvoiceLineNo &&
                  sadPurchLine.SADNumberCode == sadInvoice.SADNumberCode;
        if (sadPurchLine.RecId)
        {
            ret = checkFailed("@GLS109519");
        }

        select firstonly RecId
        from sadInvoice
            where sadInvoice.SADNumberCode == sadTable.SadNumberCode
        exists join purchTable
            where purchTable.PurchId      == sadInvoice.PurchId &&
                  purchTable.CurrencyCode != sadTable.CurrencyCode;

        if (sadInvoice.RecId)
        {
            ret = checkFailed("@GLS109528");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(PlSadTable _sadTable)
    {
        sadTable = _sadTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitSADTableMisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Splits SAD document lines with Misc charges.
    /// </summary>
    /// <param name = "_sadTable">SAD document to be split.</param>
    static public void splitSADTableMisc(PlSADTable _sadTable)
    {
        PlSadTrans       sadTrans;
        PlSadCalculation sadCalculation;
        real             miscs;
        real             amount2Split, totalAmount;
        int              linesQty;

        sadCalculation = new PlSADCalculation(_sadTable);
        if (! sadCalculation.checkSadPurchLines())
            throw error("@SYS25904");

        ttsbegin;

        miscs = _sadTable.SADTransAmount +
            (PlSadParameters::sadMiscCharges() == PlSADPostingRule::Item ? _sadTable.SADMiscCharg : 0);

        select sum(SADBaseAmount), count(SADLineNo) from sadTrans
            where sadTrans.SADNumberCode == _sadTable.SadNumberCode;

        amount2Split = miscs;
        totalAmount  = sadTrans.SADBaseAmount;
        linesQty     = sadTrans.SADLineNo;

        if (totalAmount)
        {
            while select forupdate sadTrans
                where sadTrans.SADNumberCode == _sadTable.SadNumberCode
            {
                if (linesQty == 1)
                {
                    sadTrans.TransAndMiscCharg = amount2Split;
                }
                else
                {
                    sadTrans.TransAndMiscCharg = CurrencyExchangeHelper::amount(sadTrans.SADBaseAmount / totalAmount * miscs);
                    amount2Split -= sadTrans.TransAndMiscCharg;
                    linesQty--;
                }
                sadTrans.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>