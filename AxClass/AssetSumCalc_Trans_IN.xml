<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetSumCalc_Trans_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates the asset transaction amount.
/// </summary>
class AssetSumCalc_Trans_IN extends AssetSumCalc
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a query to calculate sum of transaction amount.
    /// </summary>
    /// <returns>
    /// Returns a query object.
    /// </returns>
    protected Query buildQuery()
    {
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource,
                                assetGroupInformationQBDS;

        query = new Query();
        queryBuildDataSource = query.addDataSource(tablenum(AssetGroupTrans_IN));
        queryBuildDataSource.addRange(fieldnum(AssetGroupTrans_IN,BookId)).value(rangeBookId);
        assetGroupInformationQBDS = queryBuildDataSource.addDataSource(tablenum(AssetGroupInformation_IN));

        assetGroupInformationQBDS.orderMode(OrderMode::GroupBy);
        assetGroupInformationQBDS.addSelectionField(fieldnum(AssetGroupInformation_IN, AmountMst), SelectionField::Sum);
        assetGroupInformationQBDS.addSelectionField(fieldnum(AssetGroupInformation_IN, RevaluationAmount), SelectionField::Sum);
        assetGroupInformationQBDS.addSortField(fieldnum(AssetGroupInformation_IN, TransType));
        assetGroupInformationQBDS.addSortField(fieldnum(AssetGroupInformation_IN, TransDate));
        assetGroupInformationQBDS.addSortField(fieldnum(AssetGroupInformation_IN, CurrencyCode));
        assetGroupInformationQBDS.addRange(fieldnum(AssetGroupInformation_IN, AssetGroup)).value(rangeAssetGroupId);
        assetGroupInformationQBDS.addRange(fieldnum(AssetGroupInformation_IN, TransDate)).value(queryRange(dateFrom,dateTo));

        assetGroupInformationQBDS.joinMode(JoinMode::InnerJoin);
        assetGroupInformationQBDS.relations(true);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the asset amount.
    /// </summary>
    public void calc()
    {
        QueryRun                    queryRun;
        AssetGroupInformation_IN    assetGroupInformation;

        if (calculated)
        {
            return;
        }

        if (onThinClient)
        {
            [#Server2Client] = AssetSumCalc_Trans_IN::calcServer(this.packClient());
        }
        else
        {
            this.initYear();
            queryRun = new QueryRun(this.buildQuery());

            while (queryRun.next())
            {
                assetGroupInformation = queryRun.get(tablenum(AssetGroupInformation_IN));
                AssetAmount assetGroupAmount =  assetGroupInformation.AmountMst;
                AssetAmount revaluationAmount = assetGroupInformation.RevaluationAmount;

                if (sumType == AssetSumCalcType::Reporting)
                {
                    CurrencyExchangeHelper currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
                        Ledger::primaryLedger(CompanyInfo::current()),
                        assetGroupInformation.TransDate);

                    assetGroupAmount = currencyExchangeHelper.calculateAccountingToReportingAdjustment(
                        assetGroupInformation.CurrencyCode,
                        assetGroupAmount,
                        true);
                    revaluationAmount = currencyExchangeHelper.calculateAccountingToReportingAdjustment(
                        assetGroupInformation.CurrencyCode,
                        revaluationAmount,
                        true);
                }

                if (assetGroupAmount || revaluationAmount)
                {
                    this.updateSum(assetGroupInformation.TransType, assetGroupAmount, NoYes::No, revaluationAmount);
                }
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run the calc method on server.
    /// </summary>
    /// <param name="packedClient">
    /// The client arguments.
    /// </param>
    /// <returns>
    /// Returns the calculated values.
    /// </returns>
    protected static container calcServer(container packedClient)
    {
        AssetSumCalc assetSumCalcTrans = new AssetSumCalc_Trans_IN();

        assetSumCalcTrans.unpackClient(packedClient);
        assetSumCalcTrans.calc();

        return assetSumCalcTrans.packServer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAssetPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize an <c>AssetSumCalc_Trans_IN</c> object.
    /// </summary>
    /// <param name="_rangeAssetGroupId">
    /// The id of the asset group.
    /// </param>
    /// <param name="_rangeBookId">
    /// The book id of the asset.
    /// </param>
    /// <param name="_dateFrom">
    /// From date of the period.
    /// </param>
    /// <param name="_dateTo">
    /// To date of the period.
    /// </param>
    /// <returns>
    /// Returns a <c>AssetSumCalc_Trans_IN</c> object.
    /// </returns>
    public static AssetSumCalc_Trans_IN newAssetPeriod(Range      _rangeAssetGroupId,
                                                       Range      _rangeBookId,
                                                       TransDate  _dateFrom,
                                                       TransDate  _dateTo)
    {
        AssetSumCalc_Trans_IN assetSumCalc_Trans = new AssetSumCalc_Trans_IN();

        assetSumCalc_Trans.parmRangeAssetGroupId_IN(_rangeAssetGroupId);
        assetSumCalc_Trans.parmRangeBookId(_rangeBookId);
        assetSumCalc_Trans.parmDateFrom(_dateFrom);
        assetSumCalc_Trans.parmDateTo(_dateTo);

        return assetSumCalc_Trans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAssetYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>AssetSumCalc_Trans_IN</c> object.
    /// </summary>
    /// <param name="_rangeAssetGroupId">
    /// The asset group id.
    /// </param>
    /// <param name="_rangeBookId">
    /// The depreciation book id of the asset.
    /// </param>
    /// <param name="_assetDate">
    /// The asset date of the period.
    /// </param>
    /// <param name="_assetYear">
    /// The asset year of the period.
    /// </param>
    /// <returns>
    /// Returns a <c>AssetSumCalc_Trans_IN</c> object.
    /// </returns>
    public static AssetSumCalc_Trans_IN newAssetYear(Range      _rangeAssetGroupId,
                                                     Range      _rangeBookId,
                                                     TransDate  _assetDate  = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                     AssetYear  _assetYear  = AssetYear::All)
    {
        AssetSumCalc_Trans_IN assetSumCalc_Trans = new AssetSumCalc_Trans_IN();

        assetSumCalc_Trans.parmRangeAssetGroupId_IN(_rangeAssetGroupId);
        assetSumCalc_Trans.parmRangeBookId(_rangeBookId);
        assetSumCalc_Trans.parmDateTo(_assetDate);
        assetSumCalc_Trans.parmGroup_IN(NoYes::Yes);
        assetSumCalc_Trans.parmAssetYear(_assetYear);

        return assetSumCalc_Trans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAssetYearByCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>AssetSumCalc_Trans_IN</c> class for the given asset values by currency.
    /// </summary>
    /// <param name="_rangeAssetGroupId">
    /// The asset group id.
    /// </param>
    /// <param name="_rangeBookId">
    /// The depreciation book id of the asset.
    /// </param>
    /// <param name="_assetDate">
    /// The transaction date of asset.
    /// </param>
    /// <param name="_assetYear">
    /// The asset year value.
    /// </param>
    /// <param name="_assetSumCalcType">
    /// The currency amount type.
    /// </param>
    /// <returns>
    /// An instance of the <c>AssetSumCalc_Trans</c> class.
    /// </returns>
    public static AssetSumCalc_Trans_IN newAssetYearByCurrency(
        Range _rangeAssetGroupId,
        Range _rangeBookId,
        TransDate _assetDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        AssetYear _assetYear = AssetYear::All,
        AssetSumCalcType _assetSumCalcType = AssetSumCalcType::MST)
    {
        AssetSumCalc_Trans_IN assetSumCalc_Trans  = AssetSumCalc_Trans_IN::newAssetYear(_rangeAssetGroupId, _rangeBookId, _assetDate, _assetYear);
        assetSumCalc_Trans.parmSumType(_assetSumCalcType);

        return assetSumCalc_Trans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>