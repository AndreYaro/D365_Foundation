<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSNoPickingProcessCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSNoPickingProcessCheck</c> class determines if no warehouse picking process is started for a source document.
/// </summary>
public class WHSNoPickingProcessCheck
{
    boolean         skipCheck;

    InventTransType inventTransType;
    InventTransId   inventTransId;

    RefRecId        kanbanJobRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromWMSOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>WHSNoPickingProcessCheck</c> instance from an inventory order.
    /// </summary>
    /// <param name = "_wmsOrder">An inventory order</param>
    /// <returns>An instance of <c>WHSNoPickingProcessCheck</c></returns>
    /// <remarks>Throws an exception if the inventory order does not have a supported inventory transaction type.</remarks>
    public static WHSNoPickingProcessCheck newFromWMSOrder(WMSOrder _wmsOrder)
    {
        var checkInstance = WHSNoPickingProcessCheck::construct();
        checkInstance.parmInventTransType(_wmsOrder.inventTransType);
        checkInstance.parmInventTransId(_wmsOrder.inventTransId);

        if (!checkInstance.parmSkipCheck()
            && _wmsOrder.InventTransType != InventTransType::Sales
            && _wmsOrder.InventTransType != InventTransType::TransferOrderShip)
        {
            // Only Sales and Transfer processes are supported by WMSOrders
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return checkInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromCommon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>WHSNoPickingProcessCheck</c> instance from a record.
    /// </summary>
    /// <param name = "_record">A record.</param>
    /// <returns>An instance of <c>WHSNoPickingProcessCheck</c></returns>
    public static WHSNoPickingProcessCheck newFromCommon(Common _record)
    {
        WHSNoPickingProcessCheck checkInstance = WHSNoPickingProcessCheck::construct();

        switch (_record.TableId)
        {
            case tableNum(WMSOrder):
                checkInstance = WHSNoPickingProcessCheck::newFromWMSOrder(_record);
                break;
            case tableNum(InventTransferLine):
                var transferLine = _record as InventTransferLine;
                checkInstance.parmInventTransType(InventTransType::TransferOrderShip);
                checkInstance.parmInventTransId(transferLine.InventTransId);
                break;
            case tableNum(SalesLine):
                var salesLine = _record as SalesLine;
                checkInstance.parmInventTransType(InventTransType::Sales);
                checkInstance.parmInventTransId(salesLine.InventTransId);
                break;
            case tableNum(SalesParmLine):
                var salesParmLine = _record as SalesParmLine;
                checkInstance.parmInventTransType(InventTransType::Sales);
                checkInstance.parmInventTransId(salesParmLine.InventTransId);
                break;
            case tableNum(KanbanBoardTmpProcessJob):
                var kanbanBoardTmpProcessJob = _record as KanbanBoardTmpProcessJob;
                checkInstance.parmInventTransType(InventTransType::KanbanJobPickingList);
                checkInstance.parmKanbanJobRecId(kanbanBoardTmpProcessJob.Job);
                break;
            case tableNum(ProdBOM):
                var prodBom = _record as ProdBOM;
                checkInstance.parmInventTransType(InventTransType::ProdLine);
                checkInstance.parmInventTransId(prodBom.InventTransId);
                break;
            default:
                // The check is irrelevant for record types not enumerated above
                checkInstance.parmSkipCheck(true);
                break;
        }

        return checkInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if no warehouse picking process is started for the current source document.
    /// </summary>
    /// <returns>true if a warehouse process is not started or is not relevant; otherwise, false</returns>
    public boolean run()
    {
        boolean result = true;

        if (!skipCheck)
        {
            switch (inventTransType)
            {
                case InventTransType::Sales:
                    var whsSalesLine = WHSSalesLine::find(inventTransId);
                    result = WHSManualSalesLinePickingContext::allowManualPicking() || whsSalesLine.ReleasedQty == 0;
                    break;
                case InventTransType::TransferOrderShip:
                    result = WHSManualInventTransferLinePickingContext::allowManualPicking() || WHSInventTransferLine::findByInventTransId(inventTransId).ReleasedQty == 0;
                    break;
                case InventTransType::KanbanJobPickingList:
                    result = this.checkKanbanJobPickingList();
                    break;
                case InventTransType::ProdLine:
                    var prodBomPool = WHSProdBOMPool::find(inventTransId);
                    result = prodBomPool.WavedQty == 0;
                    break;
                default:
                    break;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>failureMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a message to show to the user in case the check fails.
    /// </summary>
    /// <returns>Failure message</returns>
    public str failureMessage()
    {
        switch (inventTransType)
        {
            case InventTransType::KanbanJobPickingList:
                if (WHSKanbanReducePickedQuantityFlight::instance().isEnabled())
                {
                    return "@WAX:WarehouseManagementUsedUseReducePickedQtyOption";
                }
                else
                {
                    return "@WAX5825";
                }
            case InventTransType::ProdLine:
                if (WHSProdReducePickedQuantityFlight::instance().isEnabled())
                {
                    return "@WAX:WarehouseManagementUsedUseReducePickedQtyOption";
                }
                else
                {
                    return "@WAX5825";
                }
            default:
                return "@WAX5825";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSNoPickingProcessCheck construct()
    {
        return new WHSNoPickingProcessCheck();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        if (!isConfigurationkeyEnabled(configurationkeynum(WHSandTMS)))
        {
            skipCheck = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipCheck</Name>
				<Source><![CDATA[
    protected boolean parmSkipCheck(boolean _skipCheck = skipCheck)
    {
        skipCheck = _skipCheck;
        return skipCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransType</Name>
				<Source><![CDATA[
    protected InventTransType parmInventTransType(InventTransType _inventTransType = inventTransType)
    {
        inventTransType = _inventTransType;
        return inventTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransId</Name>
				<Source><![CDATA[
    protected InventTransId parmInventTransId(InventTransId _inventTransId = inventTransId)
    {
        inventTransId = _inventTransId;
        return inventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanJobRecId</Name>
				<Source><![CDATA[
    protected RefRecId parmKanbanJobRecId(RefRecId _kanbanJobRecId = kanbanJobRecId)
    {
        kanbanJobRecId = _kanbanJobRecId;
        return kanbanJobRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkKanbanJobPickingList</Name>
				<Source><![CDATA[
    private boolean checkKanbanJobPickingList()
    {
        WHSKanbanJobPickingListPool whsKanbanJobPickingListPool;
        KanbanJobPickingList kanbanJobPickingList;
        KanbanJob kanbanJob;

        select firstonly RecId from whsKanbanJobPickingListPool
            where whsKanbanJobPickingListPool.WavedQty > 0
            join TableId from kanbanJobPickingList
                where kanbanJobPickingList.InventTransId == whsKanbanJobPickingListPool.InventTransId
            join TableId from kanbanJob
                where kanbanJob.RecId == kanbanJobPickingList.Job
                    && kanbanJob.RecId == kanbanJobRecId;

        return !whsKanbanJobPickingListPool.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>