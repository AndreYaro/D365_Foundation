<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocumentInquirer_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class that performs the inquire of the received XMLs on the government
/// </summary>
class EFDocumentInquirer_BR
{
    RunbaseProgress    progress;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAuthorityToBeInquired</Name>
				<Source><![CDATA[
    private EFDocAuthorityId_BR getAuthorityToBeInquired(StateIBGECode_BR _ibgeCode)
    {
        EFDocAuthority_BR               authorityToBeInquired;
        LogisticsAddressState           accessKeyIssuingState;

        accessKeyIssuingState = LogisticsAddressState::findByIBGECode_BR(_ibgeCode);

        if (!accessKeyIssuingState)
        {
            error(strFmt("@SYS4003457", _ibgecode), '', SysInfoAction_MenuFunction::newMenuItem(menuitemDisplayStr(LogisticsAddressState), MenuItemType::Display));
        }
        else
        {
            authorityToBeInquired = EFDocAuthority_BR::getAuthorityResponsibleToServeState(accessKeyIssuingState.RecId);

            if (!authorityToBeInquired)
            {
                error(strFmt("@SYS4003326", accessKeyIssuingState.StateId), '', SysInfoAction_MenuFunction::newMenuItem(menuitemDisplayStr(EFDocParameters_BR), MenuItemType::Display));
            }
        }

        return authorityToBeInquired.AuthorityId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMessageFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the message format for the inquiry of electronic fiscal documents
    /// </summary>
    /// <param name="_authorityId">
    /// The ID of the authority that will receive the inquiry
    /// </param>
    /// <param name="_fiscalEstablishment">
    /// The fiscal establishment to which the electronic fiscal document was issued
    /// </param>
    /// <returns>
    /// An <c>IEFDocMsgFormat</c> object representing the message format for the inquiry of electronic fiscal documents
    /// </returns>
    protected IEFDocMsgFormat getMessageFormat(EFDocAuthorityId_BR _authorityId, FiscalEstablishment_BR _fiscalEstablishment)
    {
        return EFDocFactory_BR::construct().createInquireMsgFormat(_authorityId, _fiscalEstablishment.EFDocVersion);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRunbaseProgress</Name>
				<Source><![CDATA[
    private RunbaseProgress getRunbaseProgress()
    {
        if (!progress)
        {
            progress = new RunbaseProgress();
        }

        return progress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transport object for the inquiry of electronic fiscal documents
    /// </summary>
    /// <param name="_authorityId">
    /// The ID of the authority that will receive the inquiry
    /// </param>
    /// <param name="_fiscalEstablishment">
    /// The fiscal establishment to which the electronic fiscal document was issued
    /// </param>
    /// <param name="_stateIbgeCode">
    /// The IBGE code of the state
    /// </param>
    /// <returns>
    /// An <c>IEFDocMsgTransport</c> object representing the transport for the inqiury of electronic fiscal documents
    /// </returns>
    protected IEFDocMsgTransport getTransport(EFDocAuthorityId_BR _authorityId, FiscalEstablishment_BR _fiscalEstablishment, StateIBGECode_BR _stateIbgeCode = '')
    {
        return EFDocFactory_BR::construct().createThirdPartyDocInquireTransport(_fiscalEstablishment, _authorityId, _stateIbgeCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inquire</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method creates the transport and the message to be sent to the Nf-e authority
    /// </summary>
    /// <param name="_transport">
    /// The <c>IEFDocMsgTransport</c> to be used to transport the message
    /// </param>
    /// <param name="_messageFormat">
    /// The <c>EFDocMsgFormat_XmlInquire_BR</c> to be used to format the message
    /// </param>
    /// <param name="_fiscalEstablishment">
    /// The fiscal establishment that owns the access key to be inquired
    /// </param>
    /// <param name="_authorityId">
    /// The id of the authority to be inquired
    /// </param>
    /// <param name="_receivedXml">
    /// The received xml record that contains the acccess key to be inquired
    /// </param>
    protected void inquire(IEFDocMsgTransport _transport, EFDocMsgFormat_XmlInquire_BR _messageFormat, FiscalEstablishment_BR _fiscalEstablishment, EFDocAuthorityId_BR _authorityId, EFDocumentReceivedXml_BR _receivedXml)
    {
        IEFDocMsgStream_BR              sendStream;
        IEFDocMsgStream_BR              returnStream;
        EFiscalDocumentReturnInfo_BR    returnInfo;

        returnInfo = EFiscalDocumentReturnInfo_BR::newFromAccessKey(_receivedXml.Accesskey);

        sendStream = _transport.getSendStream();

        _messageFormat.writeForReceivedXml(sendStream, _receivedXml.Accesskey, _fiscalEstablishment.EFDocEnvironment);

        returnStream = _transport.send();

        _messageFormat.read(returnStream, returnInfo);

        this.saveInquiryReturns(_receivedXml, sendStream, returnStream, returnInfo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inquireAccessKeysPerAuthority</Name>
				<Source><![CDATA[
    private void inquireAccessKeysPerAuthority(FiscalEstablishment_BR _fiscalEstablishment, Set _receivedXmls, EFDocAuthorityId_BR _authorityId, StateIBGECode_BR _stateIbgeCode)
    {
        IEFDocMsgTransport              transport;
        EFDocMsgFormat_XmlInquire_BR    messageFormat;
        EFDocumentReceivedXML_BR        currentReceivedXml;
        SetEnumerator                   receivedXmlsEnumerator;

        transport = this.getTransport(_authorityId, _fiscalEstablishment, _stateIbgeCode);
        messageFormat = this.getMessageFormat(_authorityId, _fiscalEstablishment) as EFDocMsgFormat_XmlInquire_BR;

        receivedXmlsEnumerator = _receivedXmls.getEnumerator();

        this.updateProgressBarText(_authorityId);

        while (receivedXmlsEnumerator.moveNext())
        {
            currentReceivedXml = receivedXmlsEnumerator.current();

            this.inquire(transport, messageFormat, _fiscalEstablishment, _authorityId, currentReceivedXml);

            this.updateProgressBarCount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inquireReceivedXmlsPerIbgeCode</Name>
				<Source><![CDATA[
    private void inquireReceivedXmlsPerIbgeCode(FiscalEstablishment_BR _fiscalEstablishment, Map _receivedXmlsPerIbgeCode)
    {
        EFDocAuthorityId_BR             currentAuthorityId;
        Set                             receivedXmls;
        MapEnumerator                   receivedXmlsPerIbgeCodeEnum = _receivedXmlsPerIbgeCode.getEnumerator();
        StateIBGECode_BR                stateIbgeCode;

        while (receivedXmlsPerIbgeCodeEnum.moveNext())
        {
            try
            {
                stateIbgeCode = receivedXmlsPerIbgeCodeEnum.currentKey();

                currentAuthorityId = this.getAuthorityToBeInquired(stateIbgeCode);

                receivedXmls = _receivedXmlsPerIbgeCode.lookup(stateIbgeCode);

                if (currentAuthorityId)
                {
                    this.inquireAccessKeysPerAuthority(_fiscalEstablishment, receivedXmls, currentAuthorityId, stateIbgeCode);
                }
                else
                {
                    this.updateProgressBarCount(receivedXmls.elements());
                }
            }
            catch
            {
                continue;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRunbaseProgress</Name>
				<Source><![CDATA[
    public RunbaseProgress parmRunbaseProgress(RunbaseProgress _progress = progress)
    {
        progress = _progress;

        return progress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveInquiryReturns</Name>
				<Source><![CDATA[
    private void saveInquiryReturns(EFDocumentReceivedXML_BR _receivedXml, IEFDocMsgStream_BR _sendStream, IEFDocMsgStream_BR _returnStream, EFiscalDocumentReturnInfo_BR _returnInfo)
    {
        EFDocInquiryReturnCodeAction_BR     returnCode = new EFDocInquiryReturnCodeAction_BR(_returnInfo.parmReturnCodeStatus());

        ttsBegin;

        _receivedXml.selectForUpdate(true);
        _receivedXml.InquiryStatus              = returnCode.status() != FiscalDocumentStatus_BR::Blank ? returnCode.status() : _receivedXml.InquiryStatus;
        _receivedXml.ReturnCode                 = _returnInfo.parmReturnCodeStatus();
        _receivedXml.ReturnCodeDescription      = strfmt('%1 - %2', _returnInfo.parmReturnCodeStatus(), _returnInfo.parmReturnCodeDescription());
        _receivedXml.LastInquiry                = DateTimeUtil::utcNow();
        _receivedXml.update();

        EFDocumentReceivedXMLData_BR::saveXmlDocument(_receivedXml.RecId, EFDocReceivedXMLDataType_BR::Inquiry, _sendStream.toString());
        EFDocumentReceivedXMLData_BR::saveXmlDocument(_receivedXml.RecId, EFDocReceivedXMLDataType_BR::InquiryResponse, _returnStream.toString());

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startInquire</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the status of the received Xmls set on the government and saves it
    /// </summary>
    /// <param name="_receivedXmlsPerFiscalEstablishment">
    /// A map of fiscal establishment Ids and the received xmls that contain the access key to be inquired for that fiscal establishment
    /// </param>
    public void startInquire(Map _receivedXmlsPerFiscalEstablishment)
    {
        MapEnumerator                   receivedXmlsPerFeEnum;
        Map                             receivedXmlsPerIbgeCode;
        Set                             receivedXmls;

        RecId                           curFiscalEstablishmentRecId;
        FiscalEstablishment_BR          curFiscalEstablishment;

        EFDocFormatClassInfo_BR::checkDefaultData();

        receivedXmlsPerFeEnum = _receivedXmlsPerFiscalEstablishment.getEnumerator();

        while (receivedXmlsPerFeEnum.moveNext())
        {
            curFiscalEstablishmentRecId = receivedXmlsPerFeEnum.currentKey();
            curFiscalEstablishment = FiscalEstablishment_BR::find(curFiscalEstablishmentRecId);

            receivedXmls = _receivedXmlsPerFiscalEstablishment.lookup(curFiscalEstablishmentRecId);

            receivedXmlsPerIbgeCode = EFDocReceivedXmlSetHelper_BR::getReceivedXmlsPerIbge(receivedXmls);

            this.getRunbaseProgress().reset();
            this.getRunbaseProgress().setCaption(strFmt("@GLS222568", curFiscalEstablishment.FiscalEstablishmentId));
            this.getRunbaseProgress().setTotal(receivedXmls.elements());

            this.inquireReceivedXmlsPerIbgeCode(curFiscalEstablishment, receivedXmlsPerIbgeCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProgressBarCount</Name>
				<Source><![CDATA[
    private void updateProgressBarCount(int _amount = 1)
    {
        this.getRunbaseProgress().incCount(_amount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProgressBarText</Name>
				<Source><![CDATA[
    private void updateProgressBarText(EFDocAuthorityId_BR _authorityId)
    {
        this.getRunbaseProgress().setText(strFmt("@SYS4003325", _authorityId));
        this.getRunbaseProgress().incCount(1);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>