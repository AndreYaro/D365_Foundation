<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfBulkPackOnHand</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// class for Pack On hand form
/// </summary>
/// <remarks>
/// This class is works with the PmfBulkPackOnHand form
/// and generates the temporary tables for the form
/// </remarks>
class PmfBulkPackOnHand
{
    TmpPmfBulkItems         tmpBulkItems;
    TmpPmfPackItems         tmpPackItems;
    ItemId                  itemId;
    InventDimParm           inventDimParm;
    PmfBOMVersionRefRecId   bomVersionRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBlankPackOnHand</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method creates a blank record for the pack item if no inventory exists
    /// </summary>
    /// <param name="_bulkConv">the bulk/pack item conversion record</param>
    private void createBlankPackOnHand(PmfBulkItemConv _bulkConv)
    {
        InventDim               inventDim;
        InventTable             inventTable;

        inventTable = InventTable::find(_bulkConv.PackedItem);
        inventDim.clear();
        inventDim.initFromInventTable(inventTable);
        if (!inventDim.InventLocationId)
        {
            inventDim.InventLocationId =
                InventFallbackWarehouse::find(inventDim.InventSiteId).
                InventLocationId;
        }
        inventDim = InventDim::findOrCreate(inventDim);
        tmpPackItems.clear();
        tmpPackItems.ItemId = _bulkConv.PackedItem;
        tmpPackItems.InventDimId   = inventDim.InventDimId;
        tmpPackItems.UnitId        =
            InventTable::find(_bulkConv.PackedItem).inventUnitId();
        tmpPackItems.BulkUnitId =
            InventTable::find(_bulkConv.BulkItem).inventUnitId();
        tmpPackItems.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpBulkOnHand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an on-hand record for the bulk item.
    /// </summary>
    /// <param name="_bulkConv">
    /// The bulk and pack item conversion record.
    /// </param>
    private void createTmpBulkOnHand(PmfBulkItemConv _bulkConv)
    {
        Query                       query;
        QueryRun                    queryRun;

        QueryBuildDataSource        dsInventSum;
        QueryBuildDataSource        dsInventDim;

        QueryBuildRange             criteriaClosed;
        QueryBuildRange             criteriaClosedQty;

        InventSum                   inventSum;
        InventDim                   inventDim;
        InventDim                   inventDimGrouped;
        container                   nonNettableQty;
        boolean                     batchActive;
        boolean                     isCWItem = PdsGlobal::pdsIsCWItem(_bulkConv.BulkItem);
        InventTable                 bulkItem = InventTable::find(_bulkConv.BulkItem);
        UnitOfMeasureSymbol         bulkItemUnitId;
        InventIAvailability         inventAvailability;
        PdsCWInventIAvailability    pdsCWInventAvailability;
        InventAvailabilityByUnit    inventAvailabilityByUnit;

        if (isCWItem)
        {
            bulkItemUnitId = PdsCatchWeight::cwUnitId(_bulkConv.BulkItem);
        }
        else
        {
            bulkItemUnitId = bulkItem.inventUnitId();
        }

        batchActive = #PdsEnabled && bulkItem.isItemBatchActivated();
        
        //Create new query based on InventSum
        query = new Query();

        dsInventSum = query.addDataSource(tablenum(InventSum));
        dsInventSum.addRange(fieldnum(InventSum,ItemId)).
            value(queryValue(_bulkConv.BulkItem));

        //All fields from InventSum will be returned as sum
        InventSum::queryAddSumFields(dsInventSum);

        criteriaClosed =
            SysQuery::findOrCreateRange(dsInventSum, fieldnum(InventSum,Closed));

        if (inventDimParm.ClosedFlag)
        {
            criteriaClosed.value('');
        }
        else
        {
            criteriaClosed.value(queryValue(NoYes::No));
        }

        criteriaClosedQty =
            SysQuery::findOrCreateRange(dsInventSum,
                fieldnum(InventSum,ClosedQty));

        if (inventDimParm.ClosedQtyFlag)
        {
            criteriaClosedQty.value(queryValue(NoYes::No));
        }
        else
        {
            criteriaClosedQty.value('');
        }

        dsInventDim = dsInventSum.addDataSource(tablenum(InventDim));
        dsInventDim.joinMode(JoinMode::InnerJoin);
        dsInventDim.addLink(fieldnum(InventSum,InventDimId),
            fieldnum(InventDim,InventDimId));

        //Group by the fields that were selected in Dimension display
        inventDimParm.queryAddSortField(dsInventDim);

        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            inventSum = queryRun.getNo(1);
            inventDimGrouped = queryRun.getNo(2);
            inventDim = InventDim::findOrCreate(inventDimGrouped);
            tmpPackItems.clear();
            tmpPackItems.ItemId = _bulkConv.BulkItem;
            tmpPackItems.InventDimId   = inventDim.InventDimId;

            inventSum.ItemId = bulkItem.ItemId;
            nonNettableQty = inventSum.pdsNonNetPhysical(inventDim);

            tmpPackItems.UnitId         = bulkItemUnitId;

            inventAvailabilityByUnit = InventAvailabilityProvider::findByItemSumDim(bulkItem, inventSum, inventDim);

            if (!isCWItem)
            {
                inventAvailability = inventAvailabilityByUnit.parmInventAvailability();

                tmpPackItems.AvailPhysical  = inventAvailability.availPhysical();
                tmpPackItems.AvailOrdered   = inventAvailability.availTotal();
                tmpPackItems.ReservPhysical = inventAvailability.reservPhysical();
                tmpPackItems.ReservOrdered  = inventAvailability.reservOrdered();
                tmpPackItems.OrderedSum     = inventAvailability.orderedSum();

                tmpPackItems.PhysicalOnhand = inventSum.PhysicalInvent;

                if (batchActive)
                {
                    // If there are non-nettable physical quantity.
                    var nonNetPhysicalQty = conPeek(nonNettableQty, 1);

                    if (nonNetPhysicalQty)
                    {
                        //back off non-net
                        tmpPackItems.AvailPhysical = nonNetPhysicalQty;
                        tmpPackItems.AvailOrdered  = nonNetPhysicalQty;
                    }
                }
            }
            else
            {
                pdsCWInventAvailability = inventAvailabilityByUnit.parmPdsCWInventAvailability();

                tmpPackItems.AvailPhysical  = pdsCWInventAvailability.pdsCWAvailPhysical();
                tmpPackItems.AvailOrdered   = pdsCWInventAvailability.pdsCWAvailTotal();
                tmpPackItems.PhysicalOnhand = inventSum.PdsCWPhysicalInvent;
                tmpPackItems.ReservPhysical = pdsCWInventAvailability.pdsCWReservPhysical();
                tmpPackItems.ReservOrdered  = pdsCWInventAvailability.pdsCWReservOrdered();
                tmpPackItems.OrderedSum     = pdsCWInventAvailability.pdsCWOrderedSum();

                if (batchActive)
                {
                    // If there are non-nettable CW physical quantity.
                    var nonNetCWPhysicalQty = conPeek(nonNettableQty, 2);

                    if (nonNetCWPhysicalQty)
                    {
                        //back off non-net
                        tmpPackItems.AvailPhysical = nonNetCWPhysicalQty;
                        tmpPackItems.AvailOrdered  = nonNetCWPhysicalQty;
                    }
                }
            }
            tmpPackItems.BulkUnitId = bulkItemUnitId;
            tmpPackItems.BulkExtPhyAvail = tmpPackItems.AvailPhysical;
            tmpPackItems.BulkExtOrdered  = tmpPackItems.OrderedSum;
            tmpPackItems.BulkExtTotAvail = tmpPackItems.AvailOrdered;
            tmpPackItems.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpOnHand</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method creates the on-hand record for the pack item
    /// </summary>
    /// <param name="_bulkConv">the bulk/pack item conversion record</param>
    /// <returns>returns true if on-hand was added</returns>
    private boolean createTmpOnHand(PmfBulkItemConv _bulkConv)
    {
        Query                       query;
        QueryRun                    queryRun;

        QueryBuildDataSource        dsInventSum;
        QueryBuildDataSource        dsInventDim;

        QueryBuildRange             criteriaClosed;
        QueryBuildRange             criteriaClosedQty;

        InventSum                   inventSum;
        InventDim                   inventDim;
        InventDim                   inventDimGrouped;
        container                   nonNet;
        boolean                     batchActive;
        boolean                     bOnHand;
        boolean                     isCWItem = PdsGlobal::pdsIsCWItem(_bulkConv.PackedItem);
        InventTable                 packedItem = InventTable::find(_bulkConv.PackedItem);
        UnitOfMeasureSymbol         packedItemUnitId;
        UnitOfMeasureSymbol         bulkItemUnitId;
        InventIAvailability         inventAvailability;
        PdsCWInventIAvailability    pdsCWInventAvailability;
        InventAvailabilityByUnit    inventAvailabilityByUnit;

        bOnHand = false;

        batchActive = #PdsEnabled && packedItem.isItemBatchActivated();

        if (isCWItem)
        {
            packedItemUnitId = PdsCatchWeight::cwUnitId(_bulkConv.PackedItem);
            bulkItemUnitId   = PdsCatchWeight::cwUnitId(_bulkConv.BulkItem);
        }
        else
        {
            packedItemUnitId = packedItem.inventUnitId();
            bulkItemUnitId   = InventTable::find(_bulkConv.BulkItem).inventUnitId();
        }

        //Create new query based on InventSum
        query = new Query();

        dsInventSum = query.addDataSource(tablenum(InventSum));
        dsInventSum.addRange(fieldnum(InventSum,ItemId)).
            value(queryValue(_bulkConv.PackedItem));

        //All fields from InventSum will be returned as sum
        InventSum::queryAddSumFields(dsInventSum);

        criteriaClosed =
            SysQuery::findOrCreateRange(dsInventSum, fieldnum(InventSum,Closed));

        if (inventDimParm.ClosedFlag)
        {
            criteriaClosed.value('');
        }
        else
        {
            criteriaClosed.value(queryValue(NoYes::No));
        }

        criteriaClosedQty =
            SysQuery::findOrCreateRange(dsInventSum,
                fieldnum(InventSum,ClosedQty));

        if (inventDimParm.ClosedQtyFlag)
        {
            criteriaClosedQty.value(queryValue(NoYes::No));
        }
        else
        {
            criteriaClosedQty.value('');
        }

        dsInventDim = dsInventSum.addDataSource(tablenum(InventDim));
        dsInventDim.joinMode(JoinMode::InnerJoin);
        dsInventDim.addLink(fieldnum(InventSum,InventDimId),
            fieldnum(InventDim,InventDimId));

        //Group by the fields that were selected in Dimension display
        inventDimParm.queryAddSortField(dsInventDim);

        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            inventSum = queryRun.getNo(1);
            inventDimGrouped = queryRun.getNo(2);
            inventDim = InventDim::findOrCreate(inventDimGrouped);
            tmpPackItems.clear();
            tmpPackItems.ItemId = _bulkConv.PackedItem;
            tmpPackItems.InventDimId   = inventDim.InventDimId;

            inventSum.ItemId = _bulkConv.PackedItem;
            nonNet = inventSum.pdsNonNetPhysical(inventDim);

            tmpPackItems.UnitId         = packedItemUnitId;

            inventAvailabilityByUnit = InventAvailabilityProvider::findByItemSumDim(packedItem, inventSum, inventDim);

            if (!isCWItem)
            {
                inventAvailability = inventAvailabilityByUnit.parmInventAvailability();

                tmpPackItems.AvailPhysical  = inventAvailability.availPhysical();
                tmpPackItems.AvailOrdered   = inventAvailability.availTotal();
                tmpPackItems.ReservPhysical = inventAvailability.reservPhysical();
                tmpPackItems.ReservOrdered  = inventAvailability.reservOrdered();
                tmpPackItems.OrderedSum     = inventAvailability.orderedSum();

                tmpPackItems.PhysicalOnhand = inventSum.PhysicalInvent;

                if (batchActive)
                {
                    //back off non-net
                    tmpPackItems.AvailPhysical -= conpeek(nonNet, 1);
                    tmpPackItems.AvailOrdered  -= conpeek(nonNet, 1);
                }
            }
            else
            {
                pdsCWInventAvailability = inventAvailabilityByUnit.parmPdsCWInventAvailability();

                tmpPackItems.AvailPhysical  = pdsCWInventAvailability.pdsCWAvailPhysical();
                tmpPackItems.AvailOrdered   = pdsCWInventAvailability.pdsCWAvailTotal();
                tmpPackItems.PhysicalOnhand = inventSum.PdsCWPhysicalInvent;
                tmpPackItems.ReservPhysical = pdsCWInventAvailability.pdsCWReservPhysical();
                tmpPackItems.ReservOrdered  = pdsCWInventAvailability.pdsCWReservOrdered();
                tmpPackItems.OrderedSum     = pdsCWInventAvailability.pdsCWOrderedSum();

                if (batchActive)
                {
                    //back off non-net
                    tmpPackItems.AvailPhysical -= conpeek(nonNet, 2);
                    tmpPackItems.AvailOrdered  -= conpeek(nonNet, 2);
                }
            }

            tmpPackItems.BulkUnitId      = bulkItemUnitId;
            tmpPackItems.BulkExtPhyAvail = _bulkConv.convertQty(tmpPackItems.AvailPhysical, tmpPackItems.UnitId, tmpPackItems.BulkUnitId,true);
            tmpPackItems.BulkExtOrdered  = _bulkConv.convertQty(tmpPackItems.OrderedSum, tmpPackItems.UnitId,tmpPackItems.BulkUnitId,true);
            tmpPackItems.BulkExtTotAvail = _bulkConv.convertQty(tmpPackItems.AvailOrdered, tmpPackItems.UnitId,tmpPackItems.BulkUnitId,true);
            tmpPackItems.insert();
            bOnHand = true;
        }
        return bOnHand;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBulkItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method creates bulk item records
    /// </summary>
    /// <param name="_itemId">the pack item</param>
    public void getBulkItems(ItemId _itemId = itemId)
    {
        BOMVersion      bomVersion;
        PmfBulkItemConv bulkConv;
        boolean         packedItems = false;

        delete_from tmpBulkItems;
        delete_from tmpPackItems;
        while select BulkItem, PackedItem from bulkConv
        where bulkConv.PackedItem == _itemId
        join PmfBulkParent, InventDimId from bomVersion
            where bomVersion.PmfBulkParent == bulkConv.BulkItem
               && bomVersion.ItemId        == bulkConv.PackedItem
               && (!bomVersionRecId || bomVersion.RecId == bomVersionRecId)
        {
            select firstonly tmpBulkItems
                where tmpBulkItems.BulkItemId == bulkConv.BulkItem;

            if (!tmpBulkItems)
            {
                tmpBulkItems.clear();
                tmpBulkItems.BulkItemId     = bomVersion.PmfBulkParent;
                tmpBulkItems.ItemName       = InventTable::find(tmpBulkItems.BulkItemId).itemName();
                tmpBulkItems.InventDimId    = bomVersion.InventDimId;
                tmpBulkItems.insert();
                packedItems = true;
            }
        }
        if (!packedItems)  //we didn't find packed items - so lets get bulk item
        {
            while select BulkItem, PackedItem from bulkConv
              where bulkConv.BulkItem == _itemId
              join PmfBulkParent, InventDimId from bomVersion
              where bomVersion.PmfBulkParent == bulkConv.BulkItem
                 && bomVersion.ItemId        == bulkConv.PackedItem

            {
                select firstonly tmpBulkItems
                where tmpBulkItems.BulkItemId == bulkConv.BulkItem;

                if (!tmpBulkItems)
                {
                    tmpBulkItems.clear();
                    tmpBulkItems.BulkItemId = bomVersion.PmfBulkParent;
                    tmpBulkItems.InventDimId   = bomVersion.InventDimId;
                    tmpBulkItems.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPackedItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method get packed items related to the bulk item
    /// </summary>
    /// <param name="_bulkItemId">the bulk item</param>
    public void getPackedItems(ItemId _bulkItemId)
    {
        BOMVersion      bomVersion;
        PmfBulkItemConv bulkConv;
        ItemId          bulkItem;

        Set bulkConvSet = new Set(Types::Int64);

        delete_from tmpPackItems;

        while select bulkConv
            order by PackedItem
            where bulkConv.BulkItem == _bulkItemId
        {
            while select TableId from bomVersion
                group by TableId
                    where  bomVersion.PmfBulkParent == bulkConv.BulkItem
                      && bomVersion.ItemId       == bulkConv.PackedItem
                      && ((bomVersionRecId && bomVersion.RecId == bomVersionRecId)
                        || (!bomVersionRecId
                            && bomVersion.Approved
                            && bomVersion.Active
                            && bomVersion.FromDate   <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
                            && (bomVersion.ToDate    >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) || !bomVersion.ToDate)))
            {
                if (bulkConvSet.in(bulkConv.RecId))
                {
                    continue;
                }
                else
                {
                    bulkConvSet.add(bulkConv.RecId);
                }

                if (!this.createTmpOnHand(bulkConv))
                {
                    this.createBlankPackOnHand(bulkConv);
                }
            }
            if (!bulkItem || bulkItem != bulkConv.BulkItem)
            {
                this.createTmpBulkOnHand(bulkConv);
                bulkItem = bulkConv.BulkItem;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// The object is created
    /// </summary>
    /// <param name="_itemId">the pack item or bulk item</param>
    protected void new(ItemId _itemId)
    {
        itemId = _itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimParm</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets or sets the InventDimParm
    /// </summary>
    /// <param name="_inventDimParm">InventDimParm to use</param>
    /// <returns>returns InventDimParm</returns>
    public InventDimParm parmInventDimParm(InventDimParm _inventDimParm = inventDimParm)
    {
        inventDimParm  = _inventDimParm;
        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpBulkItems</Name>
				<Source><![CDATA[
    public TmpPmfBulkItems parmTmpBulkItems(TmpPmfBulkItems _tmpBulkItems = tmpBulkItems)
    {
        tmpBulkItems = _tmpBulkItems;
        return tmpBulkItems;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpPackItems</Name>
				<Source><![CDATA[
    public TmpPmfPackItems parmTmpPackItems(TmpPmfPackItems _tmpPackItems = tmpPackItems)
    {
        tmpPackItems = _tmpPackItems;
        return tmpPackItems;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMVersionRecId</Name>
				<Source><![CDATA[
    public PmfBOMVersionRefRecId parmBOMVersionRecId(PmfBOMVersionRefRecId _bomVersionRecId = bomVersionRecId)
    {
        bomVersionRecId = _bomVersionRecId;
        return bomVersionRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an instance of the class
    /// </summary>
    /// <param name="_itemId">
    /// the bulk or pack item
    /// </param>
    /// <returns>returns instance</returns>
    public static PmfBulkPackOnHand construct(ItemId _itemId)
    {
        return new PmfBulkPackOnHand(_itemId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>