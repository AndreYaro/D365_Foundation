<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPaySickListReportExcel</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPaySickListReportExcel extends RunBaseBatch implements BatchRetryable
{
    NoYesId       printDirectly;
    DialogField   dlgPrintDirectly;

    RPayAverageEarnEmplPeriodTable  rPayAverageEarnEmplPeriodTable;
    RPayAverageEarnValue            averageEarnValue;
    RPayAverageEarnTrans            averageEarnTrans;
    RPayHistory                     payHistory, payHistoryTerm;
    RHRMEmplTable                       emplTable;
    CustVendTable                       custVendTable;
    QueryRun      queryRun;
    int           sheetNum, rowShift;

    int           yearCount, mthCount, dayCount;
    real          totalDayHour;
    real          totalAmount;
    real          totalSickAmountFOT, totalSickAmountFSS;
    boolean       isResignedEmployee;
    TransDate     sickListInsEventDate;
    TransDate     emplResignedDate;

    boolean       calcByPrevYr;

    ComExcelDocument_RU document;

    #TimeConstants
    #define.PayLogSectionRow(28)
    #define.SickBenefitRow(43)
    #define.RowHeight(3)

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        printDirectly
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcConditionCodes</Name>
				<Source><![CDATA[
    private container calcConditionCodes()
    {
        RPayRateCode    invalidRate, dismissalRate;
        int             isInvalid, daysDifference, dismissRestrict;
        int             pos;
        container       retCon;
        date            date30;
        RPayRateCallContext rPayRateCallContext;

        #define.Code45('45')
        #define.Code46('46')
        #define.Code47('47')
        #define.Code49('49')
        #define.Code50('50')
        #define.Code51('51')
        #define.ContinuousLimitMth(4)
        #define.SickCalendarMths(5)

        boolean isCalendarYearLimit(TransDate _year)
        {
            RPayAverageEarnEmplPeriodTable  avgEmplPeriodTable;

            int       daysLimit = #daysPerMonth * #SickCalendarMths;
            Days      days;

            while select StartDate, EndDate from avgEmplPeriodTable
                where avgEmplPeriodTable.EmplId    == emplTable.EmployeeId   &&
                      avgEmplPeriodTable.EndDate   >= dateStartYr(_year) &&
                      avgEmplPeriodTable.StartDate <= dateEndYr(_year)   &&
                      avgEmplPeriodTable.StartDate <= rPayAverageEarnEmplPeriodTable.EndDate
            {
                days += min(dateEndYr(_year), avgEmplPeriodTable.EndDate) - max(avgEmplPeriodTable.StartDate, dateStartYr(_year)) + 1;
                if (days > daysLimit)
                    return true;
            }

            if (days > daysLimit)
                return true;
            else
                return false;
        }

        boolean isContinuous(int _daysLimit)
        {
            RPayAverageEarnEmplPeriodTable avgEmplPeriodTable = RPayAverageEarnEmplPeriodTable::findRecId(rPayAverageEarnEmplPeriodTable.RecId).firstSickListAccident();
            TransDate         nextDate;
            int sickListDays, daysDiff;
            boolean ret;

            sickListDays = avgEmplPeriodTable.EndDate - avgEmplPeriodTable.StartDate + 1;
            daysDiff     = _daysLimit - sickListDays;
            nextDate     = avgEmplPeriodTable.EndDate + 1;
            ret          = false;

            while (avgEmplPeriodTable)
            {
                select firstonly avgEmplPeriodTable
                    where avgEmplPeriodTable.EmplId            == emplTable.EmployeeId  &&
                          avgEmplPeriodTable.StartDate         == nextDate          &&
                          avgEmplPeriodTable.EndDate           <= rPayAverageEarnEmplPeriodTable.EndDate;

                if (nextDate == rPayAverageEarnEmplPeriodTable.StartDate)
                    break;

                sickListDays = avgEmplPeriodTable.EndDate - avgEmplPeriodTable.StartDate + 1;
                daysDiff     -= sickListDays;
                nextDate     = avgEmplPeriodTable.EndDate + 1;
            }

            if (daysDiff <= 0)
                ret = true;

            return ret;
        }
        ;

        invalidRate = RpayFundDeductionTable::find(RpayTaxParameters::find().PensionFundinvalidDeduction).RpayRateCodeEmpl;

        rPayRateCallContext = new RPayRateCallContext();
        rPayRateCallContext.parmEmployeeId(emplTable.EmployeeId);
        rPayRateCallContext.parmRateDate(sickListInsEventDate);
        isInvalid   = real2int(RPayRateTable::find(invalidRate).getValue(RPayRateCallContext));

        if (isInvalid)
        {
            retCon += #Code45;
        }

        payHistoryTerm = RPayHistory::findLastSignOnMove(emplTable.EmployeeId, sickListInsEventDate);
        daysDifference = payHistoryTerm.EndDate - emplTable.PayEmploymentDate + 1;

        if (payHistoryTerm.EndDate && daysDifference < (#daysPerMonth * #monthsPerHalfYear))
        {
            retCon += #Code46;
        }

        if (emplResignedDate)
        {
            dismissalRate   = RPaySickIllParameters::find(rPayAverageEarnEmplPeriodTable.RpayIllType).DismissalSeniorityRestriction;

            dismissRestrict = real2int(RPayRateTable::find(dismissalRate).getValue(RPayRateCallContext));
            date30          = emplResignedDate + 30;

            if (sickListInsEventDate > emplResignedDate && sickListInsEventDate <= date30 && dismissalRate)
            {
                pos = confind(retCon, #Code46);
                if (pos)
                {
                    retCon = conpoke(retCon, pos, #Code47);
                }
                else
                {
                    retCon += #Code47;
                }
            }
        }

        if (isInvalid)
        {
            daysDifference = rPayAverageEarnEmplPeriodTable.EndDate - sickListInsEventDate + 1;
            if (daysDifference > (#daysPerMonth * #ContinuousLimitMth) && isContinuous(#ContinuousLimitMth * #daysPerMonth))
            {
                pos = confind(retCon, #Code45);
                if (pos)
                {
                    retCon = conpoke(retCon, pos, #Code49);
                }
                else
                {
                    retCon += #Code49;
                }
            }

            if (isCalendarYearLimit(rPayAverageEarnEmplPeriodTable.StartDate) ||
               (year(rPayAverageEarnEmplPeriodTable.StartDate) != year(rPayAverageEarnEmplPeriodTable.EndDate) &&
                isCalendarYearLimit(rPayAverageEarnEmplPeriodTable.EndDate)))
            {
                pos = confind(retCon, #Code45);
                if (pos)
                {
                    retCon = conpoke(retCon, pos, #Code50);
                }
                else
                {
                    retCon += #Code50;
                }
            }
        }

        if (rPayAverageEarnEmplPeriodTable.PartTimeCoefficient != 1.00 &&
            confind(retCon, #Code47) == 0 && rPayAverageEarnEmplPeriodTable.CalcByMROT &&
            !rPayAverageEarnEmplPeriodTable.LimitByMROT)
        {
            retCon += #Code51;
        }

        return retCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTable</Name>
				<Source><![CDATA[
    private CustVendTable custVendTable()
    {
        CustVendTable ret;

        switch (rPayAverageEarnEmplPeriodTable.HospitalType)
        {
            case RPayHospitalType::Cust:
                ret = CustTable::find(rPayAverageEarnEmplPeriodTable.Hospital);
                break;

            case RPayHospitalType::Vend:
                ret = VendTable::find(rPayAverageEarnEmplPeriodTable.Hospital);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTableAddress</Name>
				<Source><![CDATA[
    private LogisticsAddressing custVendTableAddress()
    {
        LogisticsAddressing ret;

        switch (rPayAverageEarnEmplPeriodTable.HospitalType)
        {
            case RPayHospitalType::Cust:
                ret = CustTable::find(rPayAverageEarnEmplPeriodTable.Hospital).postalAddress().Address;
                break;

            case RPayHospitalType::Vend:
                ret = VendTable::find(rPayAverageEarnEmplPeriodTable.Hospital).postalAddress().Address;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTableOGRN</Name>
				<Source><![CDATA[
    private TaxRegistrationNumber custVendTableOGRN(date _date)
    {
        TaxRegistrationNumber ret;

        switch (rPayAverageEarnEmplPeriodTable.HospitalType)
        {
            case RPayHospitalType::Cust:
                ret = TaxRegistration::legislationRegistrationValue(CustTable::find(rPayAverageEarnEmplPeriodTable.Hospital).Party, TaxRegistrationTypesList::OGRN, _date);
                break;

            case RPayHospitalType::Vend:
                ret = TaxRegistration::legislationRegistrationValue(VendTable::find(rPayAverageEarnEmplPeriodTable.Hospital).Party, TaxRegistrationTypesList::OGRN, _date);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase       dialog = super();
        ;

        dialog.addGroup("@SYS920");
        dlgPrintDirectly = dialog.addFieldValue(ExtendedTypestr(NoYesId), printDirectly, "@RUP3204", "@RUP3212");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDocument</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillDocument()
    {
        sheetNum = 1;

        this.fillLog();

        sheetNum = 2;
        this.fillSickListBlank();

        document.activateWorksheet(1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillLog</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillLog()
    {
        TransDate       employmentDate, attendDate;
        RPayRateValue   percentValue,percentValueApplied;
        RPayDayHour     paidDays;
        RPayRateCallContext rPayRateCallContext;

        #define.Rows2Hide1('4:5')
        #define.Rows2Hide2('19:20')

        rowShift           = 0;
        payHistoryTerm     = RPayHistory::findLast(emplTable.EmployeeId, rPayAverageEarnEmplPeriodTable.StartDate + 1);
        emplResignedDate   = payHistoryTerm.operationType == RHRMJournalType::Dismiss ? payHistoryTerm.StartDate :  datenull();
        isResignedEmployee = emplResignedDate && emplResignedDate <= rPayAverageEarnEmplPeriodTable.StartDate;
        employmentDate     = str2date(RPayParmEmplTrans::find(emplTable.EmployeeId,
                                                              RpayAverageEarnParameters::find().SeniorityRate).Contents, 123);

        if (isResignedEmployee)
        {
            dayCount = min(sickListInsEventDate, emplResignedDate + 1) - employmentDate;
        }
        else
        {
            dayCount = sickListInsEventDate - employmentDate;
        }

        if (dayCount > 0 && employmentDate)
        {
            mthCount  = dayCount div #DaysPerMonth mod #MonthsPerYear;
            yearCount = dayCount div (#DaysPerMonth * #MonthsPerYear);
            dayCount  = dayCount mod #DaysPerMonth;
        }
        else
        {
            dayCount  = 0;
            mthCount  = 0;
            yearCount = 0;
        }

        totalDayHour = 0;
        totalAmount  = 0;

        rPayRateCallContext = new RPayRateCallContext();
        rPayRateCallContext.parmRateDate(rPayAverageEarnEmplPeriodTable.StartDate);

        if (rPayAverageEarnEmplPeriodTable.CalcByPrevYears ||
           (!rPayAverageEarnEmplPeriodTable.Included && RPayRateTable::find(rPayAverageEarnEmplPeriodTable.CalcByFund).getValue(rPayRateCallContext) > 0))
        {
            calcByPrevYr  = true;
            select  sum(RPayDayHour), sum(Amount) from averageEarnTrans
                where averageEarnTrans.AverageEarnEmplPeriodRecId == rPayAverageEarnEmplPeriodTable.RecId &&
                      averageEarnTrans.RPayAverageSourceType      == RPayAverageSourceType::PrevFund;
            totalAmount  = averageEarnTrans.Amount;
            totalDayHour = averageEarnTrans.RPayDayHour;
        }
        else
        {
            select  sum(RPayDayHour), sum(Amount) from averageEarnTrans
                where averageEarnTrans.AverageEarnEmplPeriodRecId == rPayAverageEarnEmplPeriodTable.RecId &&
                      averageEarnTrans.RPayAverageSourceType      == RPayAverageSourceType::PaymentFund;
            totalAmount  = averageEarnTrans.Amount;
            totalDayHour = averageEarnTrans.RPayDayHour;

            select firstonly averageEarnTrans
                where averageEarnTrans.AverageEarnEmplPeriodRecId == rPayAverageEarnEmplPeriodTable.RecId &&
                      averageEarnTrans.RPayAverageSourceType      == RPayAverageSourceType::OtherFund;

            if (averageEarnTrans && averageEarnTrans.RPayDayHour)
            {
                totalAmount += averageEarnTrans.Amount * totalDayHour / averageEarnTrans.RPayDayHour;
            }
        }

        rPayRateCallContext.parmRateDate(sickListInsEventDate);
        rPayRateCallContext.parmEmployeeId(emplTable.EmployeeId);
        rPayRateCallContext.parmCriterion(yearCount);

        percentValue = RPayRateTable::find(RPaySickIllParameters::find(rPayAverageEarnEmplPeriodTable.RpayIllType).SickRate).GetValue(rPayRateCallContext);
        percentValue = RPayRateTable::find(RPaySickIllParameters::find(rPayAverageEarnEmplPeriodTable.RpayIllType).SickRate).GetValue(rPayRateCallContext);

        if (!rPayAverageEarnEmplPeriodTable.LimitByMROT)
        {
            select firstonly SickListPercentage from averageEarnValue
                where averageEarnValue.AverageEarnEmplPeriodRecid == rPayAverageEarnEmplPeriodTable.RecId &&
                      averageEarnValue.SickWageType != RPaySickWageType::AvgLimit                         &&
                     (!rPayAverageEarnEmplPeriodTable.MROTStartDate ||
                       averageEarnValue.EndDate  < rPayAverageEarnEmplPeriodTable.MROTStartDate ||
                       averageEarnValue.StartDate > rPayAverageEarnEmplPeriodTable.MROTEndDate());
        }

        if (averageEarnValue)
        {
            percentValueApplied = averageEarnValue.SickListPercentage;
        }
        else
        {
            percentValueApplied = 0;
        }

        while select sum(PayDayHour), count(recId) from averageEarnValue
            group by startDate, endDate
            where averageEarnValue.AverageEarnEmplPeriodRecid == rPayAverageEarnEmplPeriodTable.RecId
        {
             paidDays += any2int(round(averageEarnValue.PayDayHour / averageEarnValue.RecId, 1));
        }

        this.insertValue('SICKLIST_ID_CURR', rPayAverageEarnEmplPeriodTable.RpaySickListId);
        this.insertValue('SICKLIST_ID_PREV', rPayAverageEarnEmplPeriodTable.PrevPaySickListId);
        this.insertValue('EMPL_ID', emplTable.EmployeeId);

        this.insertValue('EMPL_NAME_ABBR', RHRMEmplTable::find(emplTable.EmployeeId).employeeTable().worker().getFIO_RU());
        this.insertValue('COMP_NAME', CompanyInfo::find().Name);
        this.insertValue('DEPARTMENT', RPayHRMOrganization::find(payHistory.hrmOrganizationId).description);

        this.insertValue('OCCUPATION', payHistory.titleId());
        this.insertValue('JOB_CHAR', payHistory.hrmKindOfWork == RHRMKindOfWork::Permanent ? "@RUP1273" : "@RUP2376");

        this.insertValue('JOB_TYPE_TEXT', enum2str(emplTable.SortOfWork));
        this.insertValue('SENIORITY_Y', yearCount);
        this.insertValue('SENIORITY_M', mthCount);
        this.insertValue('SENIORITY_D', dayCount);
        this.insertValue('SENIORITY_PERCENT', percentValue);
        this.insertValue('SENIORITY_PERCENT_USED', percentValueApplied);
        this.insertValue('PAID_DAYS', paidDays);

        if (!isResignedEmployee)
        {
            attendDate = this.firstWorkingDate();
            if (attendDate)
            {
                this.insertValue('JOB_ATTENDANCE_DATE', attendDate);
            }
            else
            {
                warning("@RUP3321");
            }
        }

        this.insertValue('PAY_DATE_S', rPayAverageEarnEmplPeriodTable.StartDate);
        this.insertValue('PAY_DATE_E', rPayAverageEarnEmplPeriodTable.EndDate);
        this.insertValue('PRIMARY_ILL_DATE_S', sickListInsEventDate);
        this.insertValue('ID_FSS_PRIMARY', rPayAverageEarnEmplPeriodTable.firstSickListAccident().RpaySickListId);
        this.insertValue('PART_TIME_COEFF', rPayAverageEarnEmplPeriodTable.PartTimeCoefficient);
        this.insertValue('CALC_FORM', rPayAverageEarnEmplPeriodTable.CalcByMROT ? "@RUP3317" : enum2str(rPayAverageEarnEmplPeriodTable.RpaySickListType));
        this.insertValue('ILLNESS_TYPE', rPayAverageEarnEmplPeriodTable.RpayIllType);
        this.insertValue('MROT_PUNISHMENT', rPayAverageEarnEmplPeriodTable.LimitByMROT ? "@SYS319974" : "");

        this.fillLogPaySection();
        this.fillLogBenefit();

        if (rPayAverageEarnEmplPeriodTable.PayPeriod)
        {
            this.insertValue('PAYSHEET_MONTH', date2str(rPayAverageEarnEmplPeriodTable.PayPeriod,2,0,0,2,0,0, DateFlags::FormatAll));
        }

        this.insertValue('NAME_ACCOUNTANT', OfficialsTable_RU::nameAccountant());

        if (!rPayAverageEarnEmplPeriodTable.PrevPaySickListId)
        {
            document.setRowHeight(#Rows2Hide1, 0, sheetNum);
            document.setRowHeight(#Rows2Hide2, 0, sheetNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillLogBenefit</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillLogBenefit()
    {
        RPayAmount maxAmount, minAmount, realAmount;
        int i;
        #define.DateStart('C')
        #define.DateEnd('I')
        #define.Days('O')
        #define.DayBenefit('S')
        #define.BenefitMax('Y')
        #define.MROT('AF')
        #define.Amount('AM')

        totalSickAmountFOT = 0;
        totalSickAmountFSS = 0;

        while select averageEarnValue
            order by StartDate desc, EndDate desc
            where averageEarnValue.AverageEarnEmplPeriodRecid == rPayAverageEarnEmplPeriodTable.RecId
        {
            maxAmount = 0;

            if (rPayAverageEarnEmplPeriodTable.MROTStartDate)
            {
                if (averageEarnValue.EndDate < rPayAverageEarnEmplPeriodTable.MROTStartDate ||
                    averageEarnValue.StartDate > rPayAverageEarnEmplPeriodTable.MROTEndDate())
                {
                    realAmount = averageEarnValue.AverageRate;
                    minAmount  = 0;
                }
                else
                {
                    minAmount = averageEarnValue.AverageRate;
                    realAmount  = 0;
                }
            }
            else
            {
                if (rPayAverageEarnEmplPeriodTable.CalcByMROT)
                {
                    minAmount = averageEarnValue.AverageRate;
                    realAmount  = 0;
                }
                else
                {
                    realAmount = averageEarnValue.AverageRate;
                    minAmount  = 0;
                }
            }

            if (averageEarnValue.PayAverageSourceType == RPayAverageSourceType::PaymentFund)
            {
                totalSickAmountFOT += averageEarnValue.Amount;
            }
            else
            {
                totalSickAmountFSS += averageEarnValue.Amount;
            }

            if (i > 0)
            {
                document.copyAndInsertRange('A' + int2str(#SickBenefitRow + rowShift) + "@SYS35675" + 'AR' + int2str(#SickBenefitRow + #RowHeight - 1 + rowShift), sheetNum);
                document.setRowHeight(int2str(#SickBenefitRow + rowShift + 1) + "@SYS35675" + int2str(#SickBenefitRow + rowShift + 1), 13, sheetNum);
            }

            this.insertValue(#DateStart  + int2str(#SickBenefitRow + 1 + rowShift), averageEarnValue.StartDate);
            this.insertValue(#DateEnd    + int2str(#SickBenefitRow + 1 + rowShift), averageEarnValue.EndDate);
            this.insertValue(#Days       + int2str(#SickBenefitRow + 1 + rowShift), averageEarnValue.PayDayHour);

            this.insertValue(#DayBenefit + int2str(#SickBenefitRow + 1 + rowShift), realAmount);
            this.insertValue(#MROT + int2str(#SickBenefitRow + 1 + rowShift), minAmount);

            this.insertValue(#BenefitMax + int2str(#SickBenefitRow + 1 + rowShift), maxAmount);
            this.insertValue(#Amount     + int2str(#SickBenefitRow + 1 + rowShift), averageEarnValue.Amount);

            i += #RowHeight;
        }

        this.insertValue('PAY_FSS_INWORDS', RNumDateInWordConverter::construct().numeralsToCurrency(totalSickAmountFSS, CompanyInfoHelper::standardCurrency()));
        this.insertValue('PAY_FSS', totalSickAmountFSS);

        this.insertValue('PAY_FOT_INWORDS', RNumDateInWordConverter::construct().numeralsToCurrency(totalSickAmountFOT, CompanyInfoHelper::standardCurrency()));
        this.insertValue('PAY_FOT', totalSickAmountFOT);

        this.insertValue('PAY_SUM_INWORDS', RNumDateInWordConverter::construct().numeralsToCurrency(totalSickAmountFSS + totalSickAmountFOT, CompanyInfoHelper::standardCurrency()));
        this.insertValue('PAY_SUM', totalSickAmountFOT + totalSickAmountFSS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillLogPaySection</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillLogPaySection()
    {
        RPayAverageEarnTrans payAverageEarnTrans;
        TransDate            startDate, endDate;
        RPayAmount           avgTotalAmount;

        int i;

        #define.DateStart('I')
        #define.DateEnd('P')
        #define.PayDays('W')
        #define.Amount('AD')
        ;

        if (calcByPrevYr)
        {
            totalDayHour = 0;
            while select sum(RPayDayHour), sum(Amount) from payAverageEarnTrans
                group by PayPeriod
                where payAverageEarnTrans.AverageEarnEmplPeriodRecId == rPayAverageEarnEmplPeriodTable.RecId
            {
                if (i > 0)
                {
                    document.copyAndInsertRange('A' + int2str(#PayLogSectionRow) + "@SYS35675" + 'AL30', sheetNum);
                    document.setRowHeight(int2str(#PayLogSectionRow + 1) + "@SYS35675" + int2str(#PayLogSectionRow + 1), 13, sheetNum);
                    rowShift += #RowHeight;
                }

                this.insertValue(#DateStart + int2str(#PayLogSectionRow + i + 1), dateStartYr(payAverageEarnTrans.PayPeriod));
                this.insertValue(#DateEnd   + int2str(#PayLogSectionRow + i + 1), dateEndYr(payAverageEarnTrans.PayPeriod));

                this.insertValue(#PayDays   + int2str(#PayLogSectionRow + i + 1), payAverageEarnTrans.RPayDayHour);
                this.insertValue(#Amount    + int2str(#PayLogSectionRow + i + 1), payAverageEarnTrans.Amount);
                avgTotalAmount += payAverageEarnTrans.Amount;
                totalDayHour   += payAverageEarnTrans.RPayDayHour;
                i += #RowHeight;
            }

            this.insertValue('AE_TOTAL', avgTotalAmount);

            if (totalDayHour)
            {
                this.insertValue('AE_DAILY', CurrencyExchangeHelper::amount(avgTotalAmount / totalDayHour));
            }
        }
        else
        {
            select minof(PayPeriod) from payAverageEarnTrans
                where payAverageEarnTrans.AverageEarnEmplPeriodRecId == rPayAverageEarnEmplPeriodTable.RecId;

            if (payAverageEarnTrans.PayPeriod)
            {
                startDate = dateStartMth(payAverageEarnTrans.PayPeriod);

                select maxof(PayPeriod) from payAverageEarnTrans
                    where payAverageEarnTrans.AverageEarnEmplPeriodRecId == rPayAverageEarnEmplPeriodTable.RecId;

                endDate = endmth(payAverageEarnTrans.PayPeriod);

                this.insertValue(#DateStart + int2str(#PayLogSectionRow + i + 1), startDate);
                this.insertValue(#DateEnd   + int2str(#PayLogSectionRow + i + 1), endDate);
                this.insertValue(#PayDays   + int2str(#PayLogSectionRow + i + 1), totalDayHour);
                this.insertValue(#Amount    + int2str(#PayLogSectionRow + i + 1), totalAmount);
                this.insertValue('AE_TOTAL', totalAmount);

                i+= #RowHeight;
                if (totalDayHour)
                {
                    this.insertValue('AE_DAILY', CurrencyExchangeHelper::amount(totalAmount / totalDayHour));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSickListBlank</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillSickListBlank()
    {
        HcmPersonPrivateDetails hcmPersonPrivateDetails;
        DirPersonName           dirPersonName;
        RHRMPersonTable         rhrmPersonTable;
        INN_RU                  inn, pfrinn;
        rPayAverageEarnEmplPeriodTable  firstSickList;

        container con;
        int i;
        #define.CalcConditionMax(4)
        #define.CalcConditionCell('CALC_CONDITION')
        ;

        firstSickList = rPayAverageEarnEmplPeriodTable.firstSickListAccident();

        this.insertValue('HOSPITAL_NAME',       this.custVendTable().name());
        this.insertValue('HOSPITAL_ADDRESS',    strreplace(this.custVendTableAddress(), "\n", " "));
        this.insertValue('HOSPITAL_OGRN',       this.custVendTableOGRN(firstSickList.StartDate));

        rhrmPersonTable = emplTable.personTable();

        dirPersonName = DirPersonName::find(emplTable.employeeTable().worker().DirPerson().RecId);

        this.insertValue('EMPLNAME_LAST',  dirPersonName.LastName);
        this.insertValue('EMPLNAME_FIRST', dirPersonName.FirstName);
        this.insertValue('EMPLNAME_MIDDLE', dirPersonName.MiddleName);

        hcmPersonPrivateDetails = rhrmPersonTable.hcmPersonPrivateDetails();

        this.insertValue('DOB_D', dayOfMth(hcmPersonPrivateDetails.birthDate));
        this.insertValue('DOB_M', mthofYr(hcmPersonPrivateDetails.birthDate));
        this.insertValue('DOB_Y', year(hcmPersonPrivateDetails.birthDate));

        if (rPayAverageEarnEmplPeriodTable.MROTStartDate)
        {
            this.insertValue('MROT_DAY', dayofMth(rPayAverageEarnEmplPeriodTable.MROTStartDate));
            this.insertValue('MROT_MTH', mthofYr(rPayAverageEarnEmplPeriodTable.MROTStartDate));
            this.insertValue('MROT_YR',  year(rPayAverageEarnEmplPeriodTable.MROTStartDate));
        }

        this.insertValue('GENDER_M', rhrmPersonTable.Gender == RHRMGender::Male ? "@SYS319974" : '');
        this.insertValue('GENDER_F', rhrmPersonTable.Gender == RHRMGender::Female ? "@SYS319974" : '');

        this.insertValue('JOB_TYPE_MAIN',  emplTable.SortOfWork == RHRMSortOfWork::Direct ? "@SYS319974" : '');
        this.insertValue('JOB_TYPE_OTHER', emplTable.SortOfWork == RHRMSortOfWork::Direct ? '' : "@SYS319974");

        this.insertValue('ID_FSS_MAIN',  CompanyInfo::find().FSS_RU);
        this.insertValue('FSS_SUB_CODE', CompanyInfo::find().SubordinateCode);

        inn = emplTable.payINN(firstSickList.StartDate);
        pfrinn = emplTable.payPFRINN(firstSickList.StartDate);

        this.insertValue('EMPL_INN',       inn);
        this.insertValue('EMPL_FSS_1_3',   substr(stralpha(pfrinn), 1, 3));
        this.insertValue('EMPL_FSS_4_6',   substr(stralpha(pfrinn), 4, 3));
        this.insertValue('EMPL_FSS_7_9',   substr(stralpha(pfrinn), 7, 3));
        this.insertValue('EMPL_FSS_10_11', substr(stralpha(pfrinn), 10, 2));

        con = this.calcConditionCodes();

        for (i = 1; i <= min(conlen(con), #CalcConditionMax); i++)
        {
            this.insertValue(#CalcConditionCell + int2str(i), conpeek(con, i));
        }

        this.insertValue('NAME_CHIEF', OfficialsTable_RU::nameDirector());
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstWorkingDate</Name>
				<Source><![CDATA[
    #RpayTblConstants
    private  date firstWorkingDate()
    {
        date                firstWorkDay;
        RPayTblJournal      payTblJournal;
        TransDate           curDate, curTransDate;
        RPayTblTrans        payTblTrans;

        boolean hoursInDay(TransDate _transDate)
        {
            Query                queryLocal;
            QueryRun             queryRunLocal;
            QueryBuildDatasource qbdTblDayHourTrans, qbdTblTrans, qbdTimeGroupMember;
            RPayTblDayHourTrans  rpayTblDayHourTrans;
            FieldId              fieldId;

            fieldId = fieldName2Id(tableNum(RPayTblDayHourTrans),#DayHourTransFieldPrefix + int2str(dayofmth(_transDate)));
            queryLocal = New query();
            qbdTblDayHourTrans = queryLocal.addDataSource(tableNum(rpayTblDayHourTrans));
            qbdTblDayHourTrans.addSelectionField(fieldId,SelectionField::Sum);

            qbdTblTrans = qbdTblDayHourTrans.addDataSource(tableNum(RPayTblTrans));
            qbdTblTrans.relations(true);
            qbdTblTrans.joinMode(JoinMode::ExistsJoin);
            qbdTblTrans.fetchMode(QueryFetchMode::One2One);

            qbdTblTrans.addRange(fieldnum(RPayTblTrans, EmplId)).value(queryValue(rPayAverageEarnEmplPeriodTable.EmplId));
            qbdTblTrans.addRange(fieldnum(RPayTblTrans, SourceDate)).value(queryValue(endmth(_transDate)));

            qbdTimeGroupMember = qbdTblDayHourTrans.addDataSource(tableNum(RPayTimeGroupMember));
            qbdTimeGroupMember.addLink(fieldnum(RPayTblDayHourTrans, PayTblTimeCode), fieldnum(RPayTimeGroupMember, PayCalendarTimeCode));
            qbdTimeGroupMember.fetchMode(QueryFetchMode::One2One);

            qbdTimeGroupMember.addRange(fieldnum(RPayTimeGroupMember, TimeGroup)).value(queryValue(rPayAverageEarnEmplPeriodTable.ActuallyTimeGroupCode));
            qbdTimeGroupMember.joinMode(JoinMode::ExistsJoin);

            queryRunLocal = new QueryRun(queryLocal);

            queryRunLocal.next();

            rpayTblDayHourTrans = queryRunLocal.get(tableNum(RPayTblDayHourTrans));

            if (rpayTblDayHourTrans.(fieldId))
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        ;

        curDate = rPayAverageEarnEmplPeriodTable.EndDate + 1;

        while (! firstWorkDay && ! payTblJournal)
        {
            select firstonly RecId from payTblTrans
                where payTblTrans.EmplId == rPayAverageEarnEmplPeriodTable.EmplId
            join PayTblType from payTblJournal
                where  payTblJournal.TblNum            == payTblTrans.PayTblNum            &&
                       payTblJournal.HrmOrganizationId == payHistory.hrmOrganizationId     &&
                       payTblJournal.PayFormType       == emplTable.PayFormType            &&
                       payTblJournal.TblDate           == endmth(curDate);

            if (payTblTrans.RecId && payTblJournal.PayTblType == RPayTblType::EveryDay)
            {
                for (curTransDate = curDate; curTransDate <= endmth(curDate); curTransDate ++)
                {
                    if (hoursInDay(curTransDate))
                    {
                        return curTransDate;
                    }
                }
                curDate = curTransDate + 1;
            }
            else
            {
                firstWorkDay = rPayAverageEarnEmplPeriodTable.EndDate + 1;
            }
        }
        return firstWorkDay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fullTemplateName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str fullTemplateName()
    {
        return  GlobalEx::templateFolder_W() + this.templateName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
    ;
        printDirectly = dlgPrintDirectly.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromArgs(Args _args)
    {
        if (_args && _args.dataset() == tablenum(RPayAverageEarnEmplPeriodTable))
        {
            rPayAverageEarnEmplPeriodTable = _args.record();
        }

        this.initQueryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        this.initQueryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initQueryRun()
    {
        QueryBuildDataSource    queryBuildDataSource;
        Query                   query = new Query();
        ;

        queryBuildDataSource = query.addDataSource(tablenum(RPayAverageEarnEmplPeriodTable));

        findOrCreateRange_W(queryBuildDataSource, fieldnum(RPayAverageEarnEmplPeriodTable, RPaySickListType), SysQuery::valueUnlimited());
        findOrCreateRange_W(queryBuildDataSource, fieldnum(RPayAverageEarnEmplPeriodTable, AverageEarnCodeType),
                            queryValue(RPayAverageEarnCodeType::SickList)).status(RangeStatus::Hidden);
        findOrCreateRange_W(queryBuildDataSource, fieldnum(RPayAverageEarnEmplPeriodTable, EmplId), queryValue(rPayAverageEarnEmplPeriodTable.EmplId));
        findOrCreateRange_W(queryBuildDataSource, fieldnum(RPayAverageEarnEmplPeriodTable, RpaySickListId), queryValue(rPayAverageEarnEmplPeriodTable.RpaySickListId));

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertValue</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertValue(BookMark _bookmark, anytype _value)
    {
        document.insertValue(_bookmark, _value, sheetNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeDocument</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPDeprecatedClass', 'PostR1AXLTODO'), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean makeDocument()
    {
        resourceNode rn = SysResource::getResourceNode(this.name());
        str templateFile;

        rn.AOTload();
        templateFile = SysResource::saveToTempFile(rn, false);
        if (!WinAPI::fileExists(templateFile))
        {
            return checkFailed(strfmt("@SYS60367", templateFile));
        }

        document = new ComExcelDocument_RU();

        if (! document.newFile(templateFile, false))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        sheetNum = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        COM     comDocument;
        COM     application;

        try
        {
            while (queryRun.next())
            {
                rPayAverageEarnEmplPeriodTable = queryRun.get(tablenum(rPayAverageEarnEmplPeriodTable));
                emplTable                      = RHRMEmplTable::find(rPayAverageEarnEmplPeriodTable.EmplId);
                sickListInsEventDate           = rPayAverageEarnEmplPeriodTable.sickListStartDate();
                payHistory                     = RPayHistory::findLastSignOnMove(emplTable.EmployeeId, rPayAverageEarnEmplPeriodTable.StartDate);

                this.makeDocument();
                this.fillDocument();

                comDocument = document.getComDocument();
                if (printDirectly)
                {
                    comDocument.printout(1, 1);
                    comDocument = null;
                    document.quitApplication(true);
                }
                else
                {
                    application = comDocument.Application();
                    application.CutCopyMode(false);
                    document.visible(true);
                    application = null;
                    document.finalize();
                }

                document = null;
            }
        }
        catch
        {
            if (document)
            {
                error("@GLS105687");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str templateName()
    {
        return resourceStr(RPaySicklistReportExcel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = conpeek(packedClass,1);
        PackedQueryRun  packedQuery;
    ;
        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,packedQuery] = packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                else
                {
                    this.initQueryRun();
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static RPaySickListReportExcel construct()
    {
        return new RPaySickListReportExcel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static ClassDescription description()
    {
        return "@RUP1190";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        RPaySickListReportExcel    report;
        ;
        report = RPaySickListReportExcel::construct();
        report.getLast();
        report.initFromArgs(_args);

        if (report.prompt())
            report.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>