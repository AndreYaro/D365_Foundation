<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdRouteMultiChange</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class ProdRouteMultiChange extends RunBaseMultiParm implements BatchRetryable
{   
    #OCCRetryCount

    private ProdParmRouteChange standardParmTable;
    private FormDataSource callerFormDataSource;
    private QueryRun callerQueryRun;    
    private LineNum lastLineNum;
    private RouteId fromRouteId, toRouteId;
    private boolean areProdTablesValidated;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        standardParmTable,
        fromRouteId, 
        toRouteId,
        areProdTablesValidated
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (_args.parmEnum() == RunChoose::Run)
        {
            ProdRouteMultiChange prodRouteMultiChange = new ProdRouteMultiChange();
            RunBaseMultiParm::initFromForm(prodRouteMultiChange, _args);

            prodRouteMultiChange.defaultParmBuffer();            

            if (!prodRouteMultiChange.prompt())
            {
                return;
            }

            prodRouteMultiChange.runOnServer();
        }
        else
        {
            RunBaseMultiParm::runSpecial(_args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructWithQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the class based of a query for test purposes.
    /// </summary>
    /// <param name = "_query">
    /// The query with selected ProdTable records.
    /// </param>
    /// <returns>
    /// Instance of the created object.
    /// </returns>
    public static ProdRouteMultiChange constructWithQuery(Query _query)
    {
        ProdRouteMultiChange prodRouteMultiChange = new ProdRouteMultiChange();
        RunBaseMultiParm::initParm(prodRouteMultiChange);

        prodRouteMultiChange.defaultParmBuffer();
        prodRouteMultiChange.callerQueryRun = new QueryRun(_query);

        return prodRouteMultiChange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canLoadData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that all necessary parameters to populate the data table has been set.
    /// </summary>
    /// <returns>
    /// Returns True if all necessary parameters were set; otherwise, returns False.
    /// </returns>
    public boolean canLoadData()
    {
        return fromRouteId != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the table with data based on the caller's data source or the selected query.
    /// </summary>
    public void loadData()
    {  
        try
        {
            ttsbegin;
         
            ProdParmRouteChange::deleteParameters(parmId);
            lastLineNum = 0;

            if (callerQueryRun != null) // User on form can override caller data source records
            {
                this.loadDataFromQuery();
            }
            else if (callerFormDataSource != null)
            {
                this.loadDataFromDataSource();
            }
            
            if (!ProdParmRouteChange::exist(parmId))      
            {
                Info("@SCM:NoMatchingProdOrdersFound");
            }

            ttscommit;
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTableWithQueryResults</Name>
				<Source><![CDATA[
    protected void populateTableWithQueryResults(ParmBuffer _parmBuffer, RunBaseMultiParm _runBaseMultiParm, ParmId _parmId, QueryRun _queryRun)
    {
        // Only save query, the table is populated later on user demand
        callerQueryRun = _queryRun;

        ProdParmRouteChange::deleteParameters(parmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Save caller data source with selected records for further use.
    /// The table ProdParmRouteChange is populated later on user demand.
    /// </summary>
    /// <param name = "_common">
    /// The last caller record.
    /// </param>
    /// <returns>
    /// Empty list, because population data is later.
    /// </returns>
    protected List packRecords(Common _common)
    {
        if (FormDataUtil::getFormDataSource(_common))
        {
            // Only save data source, the table is populated later on user demand
            callerFormDataSource = FormDataUtil::getFormDataSource(_common);
        }

        return new List(Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDataFromQuery</Name>
				<Source><![CDATA[
    private void loadDataFromQuery()
    {
        if (callerQueryRun == null)
        {
            return;
        }

        RecordInsertList parmTableInsertList = new RecordInsertList(tableNum(ProdParmRouteChange));

        callerQueryRun.reset();

        while (callerQueryRun.next())
        {
            if (this.checkBuffer(callerQueryRun.getNo(1)))
            {                
                parmTableInsertList.add(this.initFromProdTable(callerQueryRun.getNo(1)));
            }
        }

        parmTableInsertList.insertDatabase();

        areProdTablesValidated = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDataFromDataSource</Name>
				<Source><![CDATA[
    private void loadDataFromDataSource()
    {
        if (callerFormDataSource == null)
        {
            return;
        }

        var multiSelect = MultiSelectionHelper::construct();
        multiSelect.parmDatasource(callerFormDataSource);

        ProdTable prodTable = multiSelect.getFirst();
        Set processedRecIdSet = new Set(Types::Int64);
        RecordInsertList parmTableInsertList = new RecordInsertList(tableNum(ProdParmRouteChange));
      
        while (prodTable)
        {
            if (!processedRecIdSet.in(prodTable.RecId))
            {
                if (this.checkBuffer(prodTable))
                {                    
                    parmTableInsertList.add(this.initFromProdTable(prodTable));
                }

                processedRecIdSet.add(prodTable.RecId);
            }

            prodTable = multiSelect.getNext();
        }

        parmTableInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markUnmarkAllRecords</Name>
				<Source><![CDATA[
    public void markUnmarkAllRecords(boolean _isMarked)
    {
        ProdParmRouteChange parmTable;
        ProdTable prodTable;
           
        update_recordset parmTable
            setting IsMarked = _isMarked
                where parmTable.ParmId == parmId
            exists join prodTable
                where prodTable.ProdId == parmTable.ProdId &&
                      prodTable.ProdStatus == ProdStatus::Scheduled;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultParmBuffer</Name>
				<Source><![CDATA[
    public ParmBuffer defaultParmBuffer()
    {
        ProdParmRouteChange prodParmRouteChange;

        const LineNum initialLineNum = 1;
        
        if (!ProdParmRouteChange::existLineNum(parmId, initialLineNum))
        {            
            prodParmRouteChange.LineNum = initialLineNum;
            prodParmRouteChange.ParmId = parmId;
            prodParmRouteChange.insert();

            lastLineNum = initialLineNum;

            this.parmStandardParm(prodParmRouteChange);
        }

        return prodParmRouteChange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the parm buffer.
    /// </summary>
    /// <param name = "_prodParmRouteChange">
    /// The <c>ProdParmRouteChange</c> object to initialize.
    /// </param>
    public void initParmBuffer(ParmBuffer _prodParmRouteChange)
    {
        ProdParmRouteChange prodParmRouteChange = _prodParmRouteChange;
        ProdParmRouteChange saveProdParmRouteChange;

        saveProdParmRouteChange.data(prodParmRouteChange);
        prodParmRouteChange.data(standardParmTable);

        prodParmRouteChange.ParmId = saveProdParmRouteChange.ParmId;
        prodParmRouteChange.RecId = saveProdParmRouteChange.RecId;
        prodParmRouteChange.LineNum = saveProdParmRouteChange.LineNum;      
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdTable</Name>
				<Source><![CDATA[
    private ProdParmRouteChange initFromProdTable(ProdTable _prodTable)
    {
        ProdParmRouteChange parmTable;
       
        lastLineNum++;

        parmTable.LineNum = lastLineNum;
        parmTable.ProdId = _prodTable.ProdId;        
        parmTable.ParmId = parmId;        
      
        return parmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFromRouteId</Name>
				<Source><![CDATA[
    public void setFromRouteId(RouteId _routeId)
    {
        fromRouteId = _routeId;

        areProdTablesValidated = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setToRouteId</Name>
				<Source><![CDATA[
    public void setToRouteId(RouteId _routeId)
    {
        toRouteId = _routeId;

        areProdTablesValidated = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBuffer</Name>
				<Source><![CDATA[
    public boolean checkBuffer(Common _common)
    {
        ProdTable prodTable = _common as ProdTable;

        return prodTable.ProdStatus == ProdStatus::Scheduled &&             
               prodTable.RouteId == fromRouteId &&             
              !ProdParmRouteChange::existProdId(parmId, prodTable.ProdId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStandardParm</Name>
				<Source><![CDATA[
    /// <summary>
    /// A parameter that stores the standard buffer.
    /// </summary>
    /// <param name = "_standard">The standard buffer.</param>
    /// <returns>The standard buffer.</returns>
    public ParmBuffer parmStandardParm(ParmBuffer _standard = standardParmTable)
    {
        standardParmTable = _standard;

        return standardParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProdParmCostEstimation</Name>
				<Source><![CDATA[
    private ProdParmCostEstimation defaultProdParmCostEstimation()
    {
        ProdParmCostEstimation ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Change route on all marked production orders.
    /// </summary>
    private void process()
    {             
        ProdMultiCostEstimation estimation = ProdMultiCostEstimation::construct(null);
        RunBaseMultiParm::initParm(estimation);
        
        ProdParmRouteChange parmTable;
        ProdTable prodTable;

        setPrefix("@SYS8577");
       
        while select forupdate prodTable
            exists join parmTable
                where parmTable.ProdId == prodTable.ProdId &&
                      parmTable.ParmId == parmId &&                   
                      parmTable.IsMarked &&
                      parmTable.IsValid
        {
            try
            {
                setPrefix(prodTable.ProdId);

                ttsbegin;

                // Enable route copying for production orders, as it is disabled by default.
                using (ProdBomRouteAllowCopyContext context = ProdBomRouteAllowCopyContext::construct(prodTable.ProdId))
                {
                    prodTable.RouteId = toRouteId;
                    prodTable.update();
                }

                ttscommit;

                estimation.insert(prodTable, this.defaultProdParmCostEstimation());
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::Error)
            {
                exceptionTextFallThrough();
            }            
        }

        estimation.runOnServer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        if (!this.validate())
        {
            throw error("@SYS18447");
        }
    
        this.process();

        info("@SYS119229");      
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = super(_calledFrom);

        if (!fromRouteId)
        {
            ret = checkFailed(strFmt("@SYS84378", "@SCM:FromRoute"));
        }

        if (!toRouteId)
        {
            ret = checkFailed(strFmt("@SYS84378", "@SCM:ToRoute"));
        }

        if (ret && fromRouteId == toRouteId)
        {
            ret = checkFailed(strFmt("@SCM:FieldACannotBeTheSameAsFieldB", "@SCM:FromRoute", "@SCM:ToRoute"));
        }
    
        if (ret && !ProdParmRouteChange::exist(parmId))
        {
            ret = checkFailed("@SCM:NoMatchingProdOrdersFound");
        }

        if (ret && ProdParmRouteChange::recordsCountToProcess(parmId) == 0)
        {            
            ret = checkFailed("@SCM:ProdOrderMustBeMarked");
        }

        if (ret)
        {            
            this.validateAllProdTables();
        }
       
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAllProdTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if all marked production orders are valid for route change.
    /// </summary>
    /// <returns>
    /// true if all production orders are valid; otherwise, false.
    /// </returns>
    private boolean validateAllProdTables()
    {
        if (areProdTablesValidated)
            return true; // Validation is already cached

        ProdParmRouteChange parmTable;
        ProdTable prodTable;
        boolean isValid = true;

        setPrefix("@SYS32720");

        try
        {
            ttsbegin;

            while select prodTable
                join forupdate parmTable
                    where parmTable.ProdId == prodTable.ProdId &&
                          parmTable.ParmId == parmId &&
                          parmTable.IsMarked
            {
                setPrefix(prodTable.ProdId);

                parmTable.IsValid = this.validateProdTable(prodTable);
                parmTable.update();

                isValid = parmTable.IsValid && isValid;
            }

            ttscommit;
            
            areProdTablesValidated = true;

            if (isValid)
            {
                info("@SCM:AllProductionOrdersAreValid");
            }

            return isValid;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProdTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if a specific production order is valid for route change.
    /// </summary>
    /// <param name = "_prodTable">
    /// The production order for validation.
    /// </param>
    /// <returns>
    /// true if production order is valid; otherwise, false.
    /// </returns>    
    private boolean validateProdTable(ProdTable _prodTable)
    {
        boolean isValid;
        
        if (_prodTable)
        {
            isValid = true;
            boolean useProdQty = !ProdRouteChageQtyValidationFlight::instance().isEnabled();

            RouteVersion fromRouteVersion = RouteVersion::selectRouteVersion(
                                            _prodTable.ItemId,
                                            _prodTable.bomDate,
                                            useProdQty ? _prodTable.QtySched : maxUInt(),
                                            _prodTable.inventDim(),
                                            true,                  // _includeActive,
                                            true,                  // _includeInactive
                                            true,                  // _includeApproved,
                                            true,                  // _includeUnapproved,
                                            false,                 // _checkDate
                                            fromRouteId);

            RouteVersion toRouteVersion = RouteVersion::selectRouteVersion(
                                            _prodTable.ItemId,
                                            _prodTable.bomDate,
                                            useProdQty ? _prodTable.QtySched : maxUInt(),
                                            _prodTable.inventDim(),
                                            true,                  // _includeActive,
                                            true,                  // _includeInactive
                                            true,                  // _includeApproved,
                                            true,                  // _includeUnapproved,
                                            false,                 // _checkDate
                                            toRouteId);

            if (!fromRouteVersion)
            {
                isValid = checkFailed(strfmt("@SYS26280", fromRouteId, _prodTable.ItemId, date2StrUsr(_prodTable.bomDate, DateFlags::FormatAll)));
            }

            if (!toRouteVersion)
            {
                isValid = checkFailed(strfmt("@SYS26280", toRouteId, _prodTable.ItemId, date2StrUsr(_prodTable.bomDate, DateFlags::FormatAll)));
            }
            
            if (isValid && fromRouteVersion.inventSiteId() != toRouteVersion.inventSiteId())
            {
                isValid = checkFailed("@SCM:InventSiteMustBeTheSameOnOldAndNewRoutes");
            }

            if (isValid && !toRouteVersion.isApproved())
            {
                isValid = checkFailed("@SCM:RouteVersionIsNotApproved");
            }

            if (isValid)
            {
                isValid = this.checkProdBOMRoute(_prodTable.ProdId);
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProdBOMRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate that there the BOM lines are associated with the same route operations.
    /// </summary>
    /// <param name = "_prodId">
    /// Production order id.
    /// </param>
    /// <returns>
    /// true if all route operations match with production BOM line operations; otherwise, false.
    /// </returns>
    private boolean checkProdBOMRoute(ProdId _prodId)
    { 
        ProdBOM prodBOM;
        Route route;
           
        select firstonly OprNum from prodBOM
                where prodBOM.ProdId == _prodId &&
                      prodBOM.OprNum != 0
            notexists join route
                where route.RouteId == toRouteId &&
                      route.OprNum == prodBOM.OprNum;

        if (prodBOM.RecId == 0)
        {
            return true;
        }
        else
        {
            return checkFailed(strFmt("@SCM:BOMLineOprWithNumNotExistInNewRoute", prodBOM.OprNum));
        }        

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean ret;
        Integer version = conPeek(_packedClass,1);
        container base;

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList,base] = _packedClass;
                ret = super(base);
                break;
            default :
                this.initParmDefault();
                ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowSaveLast</Name>
				<Source><![CDATA[
    public boolean allowSaveLast()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    public LineNum lastLineNum()
    {
        return ProdParmRouteChange::lastLineNum(parmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    { 
        return "@SCM:ProdOrderChangeRoute";
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupDialog</Name>
				<Source><![CDATA[
    public void cleanupDialog()
    {
        ProdParmRouteChange::deleteParameters(parmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    public Query query()
    {
        return new QueryRun(querystr(ProdMultiSelectRouteChange)).query();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    public formName formName()
    {
        return formstr(ProdRouteChangeDialog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUseDialog</Name>
				<Source><![CDATA[
    public boolean mustUseDialog()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>