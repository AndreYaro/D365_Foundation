<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesFormLetter_InvoiceAppSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SalesFormLetter_Invoice))]
final class SalesFormLetter_InvoiceAppSuite_Extension
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        next run();

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            container contCorrection;
            Voucher ledgerVoucher, ledgerVoucherCorr;
            TransDate invoiceDate, invoiceDateCorr;

            contCorrection = CustInvoiceJourCorrLink_RU::findCorrectionData(formletterOutputContract.parmJournal().RecId);

            if (contCorrection != conNull())
            {
                [ledgerVoucher, invoiceDate, ledgerVoucherCorr, invoiceDateCorr] = contCorrection;

                TransLink_RU::createGeneralJourTransLink(ledgerVoucher,
                    invoiceDate,
                    ledgerVoucherCorr,
                    invoiceDateCorr);
            }
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        next init();

        if (salesFormLetterContract && salesFormLetterContract.parmSalesTable() &&
            FeatureStateProvider::isFeatureEnabled(SplitPaymentMandatoryRuleFeature_PL::instance()))
        {
            SplitPaymentMandatoryRuleEngine::analyseAndUpdateSplitPaymMode(salesFormLetterContract.parmSalesTable());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object _calledFrom)
    {
        boolean ok = next validate(_calledFrom);

        if (ok && FeatureStateProvider::isFeatureEnabled(BaseDocumentTrackingImprovementsFeature_IT::instance()))
        {
            SalesParmTable salesParmTable;
            SalesTable salesTable;
            CustTable custTable;
            BaseDocument_IT baseDocument;

            select firstonly InvoiceAccount, SalesId from salesParmTable
                where salesParmTable.ParmId == this.salesParmUpdate().ParmId
            exists join salesTable
                where salesTable.SalesId == salesParmTable.SalesId
            exists join custTable
                where custTable.AccountNum == salesTable.InvoiceAccount
                    && custTable.IsPublicSector_IT == NoYes::Yes
            notexists join baseDocument
                where baseDocument.RefRecId == salesTable.RecId
                    && baseDocument.RefTableId == salesTable.TableId
                    && baseDocument.DocumentType != DocumentType_IT::None
                    && baseDocument.CIPEcode
                    && baseDocument.TenderCode;

            if (salesParmTable)
            {
                ok = checkFailed(strFmt("@BaseDocument_IT:PublicSectorBaseDocumentValidationError",
                    salesParmTable.InvoiceAccount,
                    strFmt("@SYS76498", "@SYS7443", salesParmTable.SalesId)));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSumBy</Name>
				<Source><![CDATA[
    protected boolean checkSumBy()
    {
        boolean ret = next checkSumBy();

        SalesParmUpdate salesParmUpdate = this.salesParmUpdate();

        if (ret
            && salesParmUpdate.SumBy != AccountOrder::None
            && FeatureStateProvider::isFeatureEnabled(BaseDocumentTrackingImprovementsFeature_IT::instance()))
        {
            SalesParmTable salesParmTable;
            SalesTable salesTable;
            BaseDocument_IT baseDocument;
            container baseDocumentPacked;

            while select RecId from salesParmTable
                where salesParmTable.ParmId == salesParmUpdate.ParmId
            join RecId from salesTable
                where salesTable.SalesId == salesParmTable.SalesId
            join baseDocument
                where baseDocument.RefRecId == salesTable.RecId
                    && baseDocument.RefTableId == salesTable.TableId
                    && baseDocument.DocumentType != DocumentType_IT::None
            {
                if (baseDocumentPacked
                    && baseDocumentPacked != baseDocument.pack())
                {
                    ret = checkFailed("@BaseDocument_IT:SalesOrderDifferentBaseDocumentsError");
                    break;
                }

                baseDocumentPacked = baseDocument.pack();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>