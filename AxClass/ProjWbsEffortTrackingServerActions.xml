<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjWbsEffortTrackingServerActions</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjWbsEffortTrackingServerActions implements IServerActions
{
    HierarchyIdBase             hierarchyId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(HierarchyIdBase _hierarchyId)
    {
        hierarchyId = _hierarchyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProjWbsEffortTrackingServerActions construct(HierarchyIdBase _hierarchyId)
    {
        return new ProjWbsEffortTrackingServerActions(_hierarchyId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeAction</Name>
				<Source><![CDATA[
    public str executeAction(ActionDataContract  _action)
    {
        Enumerator              argsEnumerator;
        str                     effortAtComplete, psaActivitySetupRecId;
        argsEnumerator = _action.parmArgs().getEnumerator();
        switch (_action.parmName())
        {
            case "updateRow":
                argsEnumerator.moveNext();
                effortAtComplete = argsEnumerator.current();
                argsEnumerator.moveNext();
                psaActivitySetupRecId = argsEnumerator.current();
                this.updateEffortAtComplete(effortAtComplete, psaActivitySetupRecId);
                break;
            default:
                error('Unrecognized operation was attempted.');
                break;
        }
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeDataRetrievalAction</Name>
				<Source><![CDATA[
    public CollectionDataContract executeDataRetrievalAction(ActionDataContract _action)
    {
        Enumerator                  argsEnumerator;
        CollectionDataContract      dataCollection = CollectionDataContract::construct();

        argsEnumerator = _action.parmArgs().getEnumerator();
        switch (_action.parmName())
        {
            case "":
                dataCollection = this.getData();
                break;
            default:
                error('Unrecognized operation was attempted.');
                break;
        }
        return dataCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEffortAtComplete</Name>
				<Source><![CDATA[
    private void updateEffortAtComplete(str _effortAtComplete, str _recId)
    {
        PSAActivitySetup psaActivitySetup;
        RecId psaActivitySetupRecId;
        Hours effort;

        psaActivitySetupRecId = str2int64(_recId);
        effort = str2num(_effortAtComplete);

        ttsbegin;
        update_recordset psaActivitySetup
        setting
           EffortAtComplete = effort
        where psaActivitySetup.RecId == psaActivitySetupRecId;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjIdAndRootActivityNumber</Name>
				<Source><![CDATA[
    private container getProjIdAndRootActivityNumber()
    {
        HierarchyTreeTable  hierarchyTreeTable  = null;
        smmActivities       smmActivities       = null;
        ProjTable           projTable           = null;
        RecId               smmActivitiesRecId;

        select firstonly RefRecId from hierarchyTreeTable
            where   hierarchyTreeTable.HierarchyId == this.hierarchyId
                    && hierarchyTreeTable.ParentElementNumber == '';

        smmActivitiesRecId = hierarchyTreeTable.RefRecId;

        select firstonly ActivityNumber from smmActivities
            where smmActivities.RecId == smmActivitiesRecId;

        projTable = HierarchyLinkTable::findAssociation(hierarchyId, tableNum(ProjTable));

        return [smmActivities.ActivityNumber, projTable.ProjId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostedActuals</Name>
				<Source><![CDATA[
    private Map getPostedActuals()
    {
        Map                         postedActualEffort;
        Total                       rootActualEffort;
        ProjTaskActualEffortView    taskActualEffortView;
        str                         rootActivityNumber;
        str                         projId;

        postedActualEffort = new Map(Types::String, Types::Real);

        [rootActivityNumber, projId] = this.getProjIdAndRootActivityNumber();
        while select ActivityNumber, TotalEffort from taskActualEffortView
            where taskActualEffortView.ProjId == projId
        {
            if (taskActualEffortView.ActivityNumber && taskActualEffortView.ActivityNumber != rootActivityNumber)
            {
                postedActualEffort.insert(taskActualEffortView.ActivityNumber, taskActualEffortView.TotalEffort);
            }
            else
            {
                rootActualEffort += taskActualEffortView.TotalEffort;
            }
        }
        postedActualEffort.insert(rootActivityNumber, rootActualEffort);

        return postedActualEffort;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getData</Name>
				<Source><![CDATA[
    private CollectionDataContract getData()
    {
        CollectionDataContract collection;
        List items = new List(Types::Class);
        ProjTaskDataContract taskData;
        Common hierarchyElement;

        QueryRun queryRun;
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource, smmActivitiesQBDS, psaActivitySetupQBDS;
        TableId collectionRootDataSourceId = tablenum(HierarchyTreeTable);
        PSAActivitySetup psaActivitySetup;
        smmActivities smmActivities;
        Map postedActualEffort = this.getPostedActuals();

        queryBuildDataSource = query.addDataSource(collectionRootDataSourceId);
        queryBuildDataSource.addRange(fieldnum(HierarchyTreeTable, HierarchyId)).value(this.hierarchyId);
        queryBuildDataSource.addSortField(fieldnum(HierarchyTreeTable, SiblingNumber), SortOrder::Ascending);
        queryBuildDataSource.addSelectionField(fieldnum(HierarchyTreeTable, ElementNumber));
        queryBuildDataSource.addSelectionField(fieldnum(HierarchyTreeTable, ParentElementNumber));
        queryBuildDataSource.addSelectionField(fieldnum(HierarchyTreeTable, RefRecId));

        smmActivitiesQBDS = queryBuildDataSource.addDataSource(tableNum(smmActivities));
        smmActivitiesQBDS.joinMode(JoinMode::InnerJoin);
        smmActivitiesQBDS.addLink(fieldNum(HierarchyTreeTable, RefRecId), fieldNum(smmActivities, RecId));
        smmActivitiesQBDS.addSelectionField(fieldnum(smmActivities, RecId));
        smmActivitiesQBDS.addSelectionField(fieldnum(smmActivities, ActivityNumber));
        smmActivitiesQBDS.addSelectionField(fieldnum(smmActivities, Purpose));

        psaActivitySetupQBDS = smmActivitiesQBDS.addDataSource(tableNum(PSAActivitySetup));
        psaActivitySetupQBDS.joinMode(JoinMode::InnerJoin);
        psaActivitySetupQBDS.addLink(fieldNum(smmActivities, ActivityNumber), fieldNum(PSAActivitySetup, ActivityNumber));
        psaActivitySetupQBDS.addSelectionField(fieldnum(PSAActivitySetup, Effort));
        psaActivitySetupQBDS.addSelectionField(fieldnum(PSAActivitySetup, EffortAtComplete));
        psaActivitySetupQBDS.addSelectionField(fieldnum(PSAActivitySetup, RecId));

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            hierarchyElement    = queryRun.getNo(1);
            smmActivities       = queryRun.getNo(2);
            psaActivitySetup    = queryRun.getNo(3);

            taskData = ProjTaskDataContract::construct();
            taskData.parmId(hierarchyElement.getFieldValue("ElementNumber"));
            taskData.parmParentId(hierarchyElement.getFieldValue("ParentElementNumber"));
            taskData.parmName(smmActivities.Purpose);
            if (postedActualEffort.exists(smmActivities.ActivityNumber))
            {
                taskData.parmActualEffort(postedActualEffort.lookup(smmActivities.ActivityNumber));
            }
            taskData.parmEffort(psaActivitySetup.Effort);
            taskData.parmEffortAtComplete(psaActivitySetup.EffortAtComplete);
            taskData.parmRecId(psaActivitySetup.RecId);

            items.addEnd(taskData);
        }

        collection = CollectionDataContract::construct();
        collection.parmItems(items);
        return collection;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>