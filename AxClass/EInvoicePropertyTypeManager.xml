<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EInvoicePropertyTypeManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class for handling ES e-Invoice properties.
/// </summary>
public class EInvoicePropertyTypeManager
{
    RecordSortedList listDefaultTypes;
    Map typeApplicabilityMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the list of property types.
    /// </summary>
    public void init()
    {
        RecordInsertList newTypes, newApplicabilitySetup;
        RecordSortedList listUpdate, listCustomTypes;
        EInvoicePropertyTypeTable expected, existing;

        ttsBegin;

        typeApplicabilityMap = new Map(Types::String, Types::Container);
        newTypes = new RecordInsertList(tablenum(EInvoicePropertyTypeTable));
        newApplicabilitySetup = new RecordInsertList(tablenum(EInvoicePropertyTypeApplicabilitySetup));
        Set processedTypesSet = new Set(Types::String);

        listUpdate = EInvoicePropertyTypeTable::typeSortedList();
        listCustomTypes = EInvoicePropertyTypeTable::sortingSortedList();

        listDefaultTypes = this.initListDefaultTypes();

        int defaultTypesCount = listDefaultTypes.len();

        if (defaultTypesCount)
        {
            while select forupdate existing
            {
                expected.clear();
                expected.Type = existing.Type;
                if (listDefaultTypes.find(expected))
                {
                    if (expected.Sorting == existing.Sorting &&
                        expected.DescriptionLabel == existing.DescriptionLabel &&
                        expected.GroupDescriptionLabel == existing.GroupDescriptionLabel &&
                        (typeApplicabilityMap.exists(expected.Type) &&
                         typeApplicabilityMap.lookup(expected.Type) == existing.getApplicabilityTableIdSetPacked())
                        )
                    {
                        listDefaultTypes.del(expected);

                        if (existing.Custom)
                        {
                            existing.Custom = NoYes::No;
                            existing.update();
                        }
                    }
                    else if (existing.Custom)
                    {
                        listDefaultTypes.del(expected);
                    }
                }
                else if (!existing.Custom)
                {
                    existing.delete();
                }

                if (existing.Custom)
                {
                    listCustomTypes.ins(existing);
                }
            }
        }

        if (listDefaultTypes.len())
        {
            expected.clear();
            listDefaultTypes.first(expected);
            do
            {
                existing = EInvoicePropertyTypeTable::findType(expected.Type, true);
                if (existing)
                {
                    listUpdate.ins(existing);
                }
                else
                {
                    newTypes.add(expected);
                }
                processedTypesSet.add(expected.Type);
            }
            while (listDefaultTypes.next(expected));

            EInvoicePropertyTypeTable::shiftSorting(listCustomTypes, max(EInvoicePropertyTypeTable::maxSorting(), defaultTypesCount));

            if (listUpdate.len())
            {
                EInvoicePropertyTypeTable::shiftSorting(listUpdate);

                existing.clear();
                listUpdate.first(existing);
                do
                {
                    expected.clear();
                    expected.Type = existing.Type;
                    listDefaultTypes.find(expected);

                    existing = EInvoicePropertyTypeTable::find(existing.RecId, true);
                    existing.Sorting = expected.Sorting;
                    existing.DescriptionLabel = expected.DescriptionLabel;
                    existing.GroupDescriptionLabel = expected.GroupDescriptionLabel;
                    existing.update();
                }
                while (listUpdate.next(existing));
            }

            newTypes.insertDatabase();

            SetEnumerator se = processedTypesSet.getEnumerator();

            while (se.moveNext())
            {
                existing = EInvoicePropertyTypeTable::findType(se.current());

                if (typeApplicabilityMap.exists(existing.Type))
                {
                    this.addApplicabilityTablesToList(newApplicabilitySetup, existing, typeApplicabilityMap.lookup(existing.Type));
                }
            }

            newApplicabilitySetup.insertDatabase();

            EInvoicePropertyTypeTable::shiftSorting(listCustomTypes, defaultTypesCount, true);
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListDefaultTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the list of property types, related to administratrive centres.
    /// </summary>
    /// <returns>
    /// The <c>RecordSortedList</c> of property types.
    /// </returns>
    public RecordSortedList initListDefaultTypes()
    {
        if (!this.parmListDefaultTypes())
        {
            listDefaultTypes = EInvoicePropertyTypeTable::typeSortedList();
            this.initDefaultPropertyTypes(listDefaultTypes);
        }
        return listDefaultTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EInvoicePropertyTypeManager construct()
    {
        return new EInvoicePropertyTypeManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmListDefaultTypes</Name>
				<Source><![CDATA[
    public RecordSortedList parmListDefaultTypes(RecordSortedList _listDefaultTypes = listDefaultTypes)
    {
        listDefaultTypes = _listDefaultTypes;
        return listDefaultTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultPropertyTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the list of property types, related to administratrive centres, representative info and vehicle info.
    /// </summary>
    /// <param name="_list">
    /// The <c>RecordSortedList</c> of property types.
    /// </param>
    protected void initDefaultPropertyTypes(RecordSortedList _list)
    {
        this.initAdministrativeCentres(_list);
        this.initRepresentative(_list);
        this.initVehicleInfo(_list);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addApplicabilityTablesToList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds missing and removes extra <c>EInvoicePropertyTypeApplicabilitySetup</c> records which
    ///    correspond to the particular <c>EInvoicePropertyTypeTable</c> record.
    /// </summary>
    /// <param name="_list">
    ///    Record insert list where to add missing <c>EInvoicePropertyTypeApplicabilitySetup</c> records.
    /// </param>
    /// <param name="_typeTable">
    ///    <c>EInvoicePropertyTypeTable</c> record for which the applicability is being set up.
    /// </param>
    /// <param name="_applicabilityTableIdSetPacked">
    ///    Packed set of table IDs which have to be set up for the <c>EInvoicePropertyTypeTable</c> record as applicability tables.
    /// </param>
    protected void addApplicabilityTablesToList(RecordInsertList _list, EInvoicePropertyTypeTable _typeTable, container _applicabilityTableIdSetPacked)
    {
        EInvoicePropertyTypeApplicabilitySetup applicabilitySetup;
        Set applicabilityTableIdSet = Set::create(_applicabilityTableIdSetPacked);
        SetEnumerator se = applicabilityTableIdSet.getEnumerator();
        RefTableId refTableId;

        // remove extra setup
        while select applicabilitySetup
                where applicabilitySetup.Type == _typeTable.RecId
        {
            if (!applicabilityTableIdSet.in(applicabilitySetup.RefTableId))
            {
                applicabilitySetup.selectForUpdate(true);
                applicabilitySetup.delete();
            }
        }

        // add missing setup
        while (se.moveNext())
        {
            refTableId = se.current();

            if (!EInvoicePropertyTypeApplicabilitySetup::find(_typeTable.RecId, refTableId))
            {
                applicabilitySetup.clear();
                applicabilitySetup.Type = _typeTable.RecId;
                applicabilitySetup.RefTableId = refTableId;
                _list.add(applicabilitySetup);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAdministrativeCentres</Name>
				<Source><![CDATA[
    private void initAdministrativeCentres(RecordSortedList _list)
    {
        const int administrativeCentreCount = 3;
        const str typePrefix = 'AdministrativeCentre';

        Set applicabilityTableIdSet = new Set(Types::Integer);
        applicabilityTableIdSet.add(tableNum(CustTable));
        applicabilityTableIdSet.add(tableNum(CompanyInfo));

        for (int idx = 1; idx <= administrativeCentreCount; idx ++)
        {
            this.add(_list, typePrefix, idx, 'CentreCode',   "@AccountsReceivable:AdministrativeCenterCode", applicabilityTableIdSet);
            this.add(_list, typePrefix, idx, 'RoleTypeCode', "@AccountsReceivable:AdministrativeCenterRoleTypeCode", applicabilityTableIdSet);
            this.add(_list, typePrefix, idx, 'Description',  "@AccountsReceivable:AdministrativeCenterDescription", applicabilityTableIdSet);

            this.addGroup(
            _list, typePrefix, idx,
            'Address',
            "@AccountsReceivable:AdministrativeCenterAddress",
            [[ 'CountryRegionISOCode',      "@AccountsReceivable:CountryRegionISOCode" ],
            [ 'CountryRegionID',            "@SYS72685" ],
            [ 'ZipCode',                    "@SYS113530"],
            [ 'Street',                     "@SYS23438" ],
            [ 'City',                       "@SYS22249" ],
            [ 'State',                      "@SYS21924" ]],
            applicabilityTableIdSet);

            this.addGroup(
            _list, typePrefix, idx,
            'ContactPerson',
            "@AccountsReceivable:AdministrativeCenterContactPerson",
            [[ 'Name',                      "@SYS7399" ],
            [ 'FirstSurname',               "@AccountsReceivable:FirstSurname" ],
            [ 'SecondSurname',              "@AccountsReceivable:SecondSurname" ]],
            applicabilityTableIdSet );

            this.addGroup(
            _list, typePrefix,  idx,
            "ContactInfo",
            "@AccountsReceivable:AdministrativeCenterContactInformation",
            [[ 'AdditionalContactDetails',  "@AccountsReceivable:AdditionalContactDetails" ],
            [ 'CnoCnae',                    "@AccountsReceivable:CodeOfEconomicActivity" ],
            [ 'ContactPersons',             "@AccountsReceivable:OtherContactPersons" ],
            [ 'Email',                      "@SYS37017" ],
            [ 'INETownCode',                "@AccountsReceivable:CodeOfTown" ],
            [ 'Phone',                      "@SYS7869" ],
            [ 'TeleFax',                    "@SYS7888" ],
            [ 'URL',                        "@SYS22221" ]],
            applicabilityTableIdSet);

            this.add(_list, typePrefix, idx, 'PhysicalGLN', "@SYS3794", applicabilityTableIdSet);
            this.add(_list, typePrefix, idx, 'LogicalOperationalPoint', "@SYS72683", applicabilityTableIdSet);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRepresentative</Name>
				<Source><![CDATA[
    private void initRepresentative(RecordSortedList _list)
    {
        const str typePrefix = 'Representative';
        const int idx = 0;

        Set applicabilityTableIdSet = new Set(Types::Integer);
        applicabilityTableIdSet = new Set(Types::Integer);
        applicabilityTableIdSet.add(tableNum(CustTable));
        applicabilityTableIdSet.add(tableNum(CompanyInfo));

        this.add(_list, typePrefix, idx, 'Name', "@AccountsReceivable:PersonName", applicabilityTableIdSet);
        this.add(_list, typePrefix, idx, 'VATNumber', "@SYS36642", applicabilityTableIdSet);

        this. addGroup(
            _list, typePrefix,  idx,
            'Address',
            "@AccountsReceivable:RepresentativeAddress",
            [[ 'ZipCode',   "@SYS113530"],
             [ 'City',       "@SYS22249"],
             [ 'District',   "@SYS80116"],
             [ 'Street',     "@SYS23438"]],
            applicabilityTableIdSet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVehicleInfo</Name>
				<Source><![CDATA[
    private void initVehicleInfo(RecordSortedList _list)
    {
        const str typePrefix = 'VehicleInfo';
        const int idx = 0;

        Set applicabilityTableIdSet = new Set(Types::Integer);
        applicabilityTableIdSet.add(tableNum(AssetTable));

        this.addGroup(
                _list, typePrefix,  idx,
                'LandTransportVehicle',
                "@AccountsReceivable:LandTransportVehicle",
                 [[ 'EngineCapacity',            "@AccountsReceivable:EngineCapacity" ],
                 [ 'Power',                      "@AccountsReceivable:Power" ],
                 [ 'DateOfFirstRegistration',    "@AccountsReceivable:DateOfFirstRegistration" ],
                 [ 'DistanceTravelled',          "@AccountsReceivable:DistanceTravelled" ]],
                applicabilityTableIdSet);

        this.addGroup(
                _list, typePrefix,  idx,
                'AirTransportVehicle',
                "@AccountsReceivable:AirTransportVehicle",
                [[ 'TotalTakeOffWeight',         "@AccountsReceivable:TotalTakeOffWeight" ],
                 [ 'AirCommerce',                "@AccountsReceivable:AirCommerce" ],
                 [ 'DateOfFirstRegistration',    "@AccountsReceivable:DateOfFirstRegistration" ],
                 [ 'HoursFlown',                 "@AccountsReceivable:HoursFlown" ]],
                applicabilityTableIdSet);

        this.addGroup(
                _list, typePrefix,  idx,
                'WaterTransportVehicle',
                "@AccountsReceivable:WaterTransportVehicle",
                [[ 'Length',                     "@AccountsReceivable:Length" ],
                 [ 'Activity',                   "@AccountsReceivable:Activity" ],
                 [ 'DateOfFirstRegistration',    "@AccountsReceivable:DateOfFirstRegistration" ],
                 [ 'HoursSailed',                "@AccountsReceivable:HoursSailed" ]],
                applicabilityTableIdSet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    private void add(RecordSortedList _list, str _typePrefix, int _idx, EInvoicePropertyType _type, LabelId _label, Set _applicabilityTableIdSet, str _groupPrefix = "", str _groupLabelID = "")
    {
        EInvoicePropertyType type = _typePrefix + '_' + (_idx ? int2str(_idx) + '_' : '') + (_groupPrefix ? _groupPrefix + '_' : '') + _type;
        EInvoicePropertyTypeTable::addType(_list, type, _label, _groupLabelID);
        typeApplicabilityMap.insert(type, _applicabilityTableIdSet.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGroup</Name>
				<Source><![CDATA[
    private void addGroup(RecordSortedList _list, str _typePrefix, int _idx, str _groupPrefix, str _groupLabelID, container _types, Set  _applicabilityTableIdSet)
    {
        int typesCnt = conlen(_types);
        EInvoicePropertyType type;
        LabelId label;

        for (int typesIdx = 1; typesIdx <= typesCnt; typesIdx ++)
        {
            [type, label] = conpeek(_types, typesIdx);
            this.add(_list, _typePrefix, _idx, type, label, _applicabilityTableIdSet, _groupPrefix, _groupLabelID);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>