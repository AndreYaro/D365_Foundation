<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PDSBalanceIngredient_Filler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PDSBalanceIngredient_Filler</c> class provides balancing logic specific for filler ingredients.
/// </summary>
[PDSIngredientTypeFactoryAttribute(PDSIngredientTypeEnum::Filler)]
class PDSBalanceIngredient_Filler extends PDSBalanceIngredient
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>balanceQty</Name>
				<Source><![CDATA[
    public Set balanceQty()
    {
        UnitOfMeasureDecimalPrecision   precision;
        ProdBOM                         ingredient;
        Qty                             balancedQty;
        Qty                             difQtyByItem    = 0;
        Qty                             totalFillerQty  = 0;

        if (!result)
        {
            result = new Set(Types::container);
        }

        this.setTotals();

        select Sum(QtyBomCalc)
            from ingredient
            where  ingredient.ProdId            == prodId
                && ingredient.PDSIngredientType == PDSIngredientTypeEnum::Filler;

        totalFillerQty = ingredient.QtyBOMCalc;
        difQtyByItem   = (totalBomQty - runBalQty);

        while select InventTransId,ItemId,BomQty,QtyBomCalc,UnitId, InventDimId
            from ingredient
            where  ingredient.ProdId            == prodId
                && ingredient.PDSIngredientType == PDSIngredientTypeEnum::Filler
        {
            precision   = UnitOfMeasure::findBySymbol(ingredient.UnitId).DecimalPrecision;
            balancedQty = decround((difQtyByItem*(ingredient.QtyBOMCalc/totalFillerQty)),precision);

            if (balancedQty < 0)
            {
                throw error(strfmt("@PSC367",balancedQty));
            }

            result.add(
                [   ingredient.InventTransId,
                    ingredient.ItemId,
                    decround(ingredient.QtyBOMCalc,precision),
                    '',
                    balancedQty,
                    ingredient.InventDimId]);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIngredientList</Name>
				<Source><![CDATA[
    public Map getIngredientList(ProdId _prodId)
    {
        ProdBom     lclProdBom;
        Map         fillerList = new Map(Types::Int64,Types::Container);

        while select ItemId, QtyBomCalc, BomQTY, InventTransId, RecId, InventDimId
            from lclProdBom
            where  lclProdBom.ProdId            == _prodId
                && lclProdBom.PDSIngredientType == PDSIngredientTypeEnum::Filler
        {
            if (!fillerList.exists(lclProdBom.RecId))
            {
                fillerList.insert(lclProdBom.RecId,[lclProdBom.ItemId,'',lclProdBom.QtyBOMCalc,lclProdBom.InventTransId,lclProdBom.QtyBOMCalc, lclProdBom.InventDimId]);
            }
        }

        return fillerList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PDSBalanceIngredient_Filler construct()
    {
        return new PDSBalanceIngredient_Filler();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>