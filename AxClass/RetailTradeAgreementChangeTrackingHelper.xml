<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTradeAgreementChangeTrackingHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailTradeAgreementChangeTrackingHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isTradeAgreementSupported</Name>
				<Source><![CDATA[
    /// <summary>
    /// Whether the trade agreement should be tracked.
    /// </summary>
    /// <param name = "_tradeAgreement">The trade agreement.</param>
    /// <returns>True if the trade agreement should be tracked, otherwise false.</returns>
    [Replaceable]
    public static boolean isTradeAgreementSupported(PriceDiscTable _tradeAgreement)
    {
        // Check only price and line discount trade agreement.
        if (_tradeAgreement.relation == PriceType::PriceSales || _tradeAgreement.relation == PriceType::LineDiscSales) // Price trade agreement.
        {
            // For price tade agreement, only Table item code is supported, then don't need to check ItemCode.
            // For line discount trade agreement, all item codes are supported, then don't need to check ItemCode.
            if (_tradeAgreement.Module == ModuleInventCustVend::Cust 
                && _tradeAgreement.AccountCode == PriceDiscPartyCodeType::All)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackTradeAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Track a trade agreement.
    /// </summary>
    /// <param name = "_tradeAgreement">The trade agreement to track.</param>
    [Replaceable]
    public static void trackTradeAgreement(PriceDiscTable _tradeAgreement)
    {
        switch (_tradeAgreement.ItemCode)
        {
            case PriceDiscProductCodeType::Table:
                RetailTradeAgreementChangeTrackingHelper::trackTableItemCodeTradeAgreement(_tradeAgreement);
                break;

            case PriceDiscProductCodeType::GroupId:
                RetailTradeAgreementChangeTrackingHelper::trackGroupItemCodeTradeAgreement(_tradeAgreement);
                break;

            case PriceDiscProductCodeType::All:
                RetailTradeAgreementChangeTrackingHelper::trackAllItemCodeTradeAgreement();
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackTableItemCodeTradeAgreement</Name>
				<Source><![CDATA[
    internal static void trackTableItemCodeTradeAgreement(PriceDiscTable _tradeAgreement)
    {
        InventTable inventTable = InventTable::find(_tradeAgreement.ItemRelation);
        RetailPriceChangeTracking::writeProductPriceChangeRecord(inventTable.Product);
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackGroupItemCodeTradeAgreement</Name>
				<Source><![CDATA[
    internal static void trackGroupItemCodeTradeAgreement(PriceDiscTable _tradeAgreement)
    {
        InventTable inventTable;
        InventTableModule inventTableModule;
        RetailPriceChangeTracking priceChangeTracking, existingRecords;

        utcdatetime updateDatetime = DateTimeUtil::utcNow();
        guid tag = newGuid();

        ttsbegin;

        // Update exist records.
        update_recordset priceChangeTracking
            setting UpdatedDatetime = updateDatetime, Tag = tag
        exists join inventTable
            where priceChangeTracking.ProductId == inventTable.Product
        join inventTableModule
            where inventTable.ItemId == inventTableModule.ItemId && inventTableModule.ModuleType == ModuleInventPurchSales::Sales
                && _tradeAgreement.ItemRelation == inventTableModule.LineDisc;

        // Insert not exist records.
        insert_recordset priceChangeTracking
        (
            ProductId,
            Tag,
            UpdatedDatetime // need to be the last as extra timezone field will be added automatically
        )
        select Product, tag, updateDatetime
        from inventTable
            group by Product
        exists join inventTableModule
            where inventTable.ItemId == inventTableModule.ItemId && inventTableModule.ModuleType == ModuleInventPurchSales::Sales
                && _tradeAgreement.ItemRelation == inventTableModule.LineDisc
        notexists join existingRecords
            where existingRecords.ProductId == inventTable.Product;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackAllItemCodeTradeAgreement</Name>
				<Source><![CDATA[
    internal static void trackAllItemCodeTradeAgreement()
    {
        RetailPriceChangeTracking::writeFullRefreshRecord();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>