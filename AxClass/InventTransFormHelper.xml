<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransFormHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventTransFormHelper
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formQueryAddDefaultOriginLink</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the default link from the <c>InventTrans</c> table to the <c>InventTransOrigin</c> table.
    /// </summary>
    /// <param name="_inventTransOriginDS">
    ///    The form data source for the <c>InventTransOrigin</c> table.
    /// </param>
    /// <param name="_inventTransDS">
    ///    The form data source for the <c>InventTrans</c> table where the link should be added.
    /// </param>
    /// <remarks>
    ///    All existing links on the <c>_dsInventTrans</c> parameter will be removed.
    /// </remarks>
    public static void formQueryAddDefaultOriginLink(
        FormDataSource _inventTransOriginDS,
        FormDataSource _inventTransDS)
    {
        if (_inventTransOriginDS == null || _inventTransDS == null)
        {
            return; //we can be called with null
        }

        QueryBuildDataSource qbdsInventTrans = _inventTransDS.query().dataSourceTable(tableNum(InventTrans));

        if (qbdsInventTrans)
        {
            qbdsInventTrans.clearLinks();
            qbdsInventTrans.addLink(fieldNum(InventTransOrigin,RecId),fieldNum(InventTrans,InventTransOrigin),_inventTransOriginDS.name());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formQueryAddDynalink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a dynamic link to the form data sources.
    /// </summary>
    /// <param name="_inventTransOrigin">
    /// An <c>InventTransOrigin</c> form data source.
    /// </param>
    /// <param name="_inventTrans">
    /// An <c>InventTrans</c> form data source.
    /// </param>
    /// <param name="_callerArgs">
    /// An <c>Args</c> object.
    /// </param>
    public static void formQueryAddDynalink(
        FormDataSource _inventTransOrigin,
        FormDataSource _inventTrans,
        Args           _callerArgs)
    {
        InventTransOriginFormDataSourceDynalink::construct().addCallerDynalink(_inventTransOrigin, _inventTrans, _callerArgs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formQueryPreExecute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a dynamic range to the form data sources.
    /// </summary>
    /// <param name="_inventTransOrigin">
    ///    An <c>InventTransOrigin</c> form data source.
    /// </param>
    /// <param name="_inventTrans">
    ///    An <c>InventTrans</c> form data source.
    /// </param>
    /// <param name="_callerArgs">
    ///    An <c>Args</c> object.
    /// </param>
    public static void formQueryPreExecute(
        FormDataSource _inventTransOrigin,
        FormDataSource _inventTrans,
        Args           _callerArgs)
    {
        InventTransRelationType         relationType = _callerArgs.parmEnum();

        // <GEERU>
        // </GEERU>

        QueryBuildRange                 queryBuildRange;

        switch (_callerArgs.dataset())
        {
            case tableNum(InventSum):
            case tableNum(InventJournalTrans):
            case tableNum(InventTransferLine):
            case tableNum(InventTransferJourLine):
            case tableNum(InventBlocking):
            case tableNum(ProdTable):
            case tableNum(PurchLine):
            case tableNum(PurchRFQLine):
            case tableNum(KanbanJob):
            case tableNum(KanbanBoardTmpProcessJob):
            case tablenum(PmfProdCoBy):
            case tableNum(KanbanBoardTmpTransferJob):
            // <GEERU>
            case tablenum(ProdJournalRelease_RU):
           // </GEERU>
                InventTransFormHelper::buildFormQueryPreExecuteOnCommonTable(_inventTransOrigin, _inventTrans, _callerArgs);
                break;           

            case tableNum(InventTrans):
            case tableNum(InventTransArchive):
                if (relationType == InventTransRelationType::InventDim)
                {
                    InventDim::queryAddRangeFromCaller(_inventTrans.query().dataSourceTable(tableNum(InventDim)),_callerArgs);
                }
                break;

            case tableNum(WMSJournalTrans):
                WMSJournalTrans wmsJournalTrans = _callerArgs.record() as WMSJournalTrans;
                QueryBuildDataSource queryBuildDataSource = _inventTrans.query().dataSourceTable(tableNum(InventTrans));
                queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(InventTrans, StatusReceipt));
                if (wmsJournalTrans.isPosted())
                {
                    queryBuildRange.value(SysQuery::range(queryValue(StatusReceipt::Purchased), queryValue(StatusReceipt::Arrived)));
                }
                else
                {
                    queryBuildRange.value(queryValue(StatusReceipt::Ordered));
                }
                break;
 
            case tableNum(WMSOrderTrans):
                WMSOrderTrans wmsOrderTrans = _callerArgs.record() as WMSOrderTrans;

                queryBuildDataSource = _inventTrans.query().dataSourceTable(tableNum(InventTrans));

                if (wmsOrderTrans.OrderType == WMSOrderType::Transport)
                {
                    queryBuildRange     = InventTransOrigin::queryAddRangeInventTransId(_inventTrans.query());
                    queryBuildRange.value(wmsOrderTrans.InventTransId);
                }
                else if (wmsOrderTrans.ExpeditionStatus  == WMSExpeditionStatus::Registered
                      || wmsOrderTrans.ExpeditionStatus  == WMSExpeditionStatus::Activated
                      || wmsOrderTrans.ExpeditionStatus  == WMSExpeditionStatus::Started)
                {
                    queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(InventTrans,TransChildType));
                    queryBuildRange.value(enum2Value(InventTransChildType::WMSOrder));

                    queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(InventTrans, TransChildRefId));
                    queryBuildRange.value(queryValue(wmsOrderTrans.OrderId));
                }
                else
                {
                    queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(InventTrans, PickingRouteID));
                    queryBuildRange.value(queryValue(wmsOrderTrans.RouteId));
                }

                break;

            // <GCN>
            case tablenum(InventPhysQtySumTmp_CN):
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCN]))
                {
                    InventPhysQtySumTmp_CN::inventTransFormQueryInit(_inventTrans, _callerArgs);
                }
                break;
            // </GCN>

            // <GEERU>
            case tablenum(SalesLine):
                break;
            // </GEERU>

            case tableNum(WHSLoadLine):
                WHSLoadLine loadLine = _callerArgs.record() as WHSLoadLine;

                if (!WHSShipmentOrderLineInventTransLinkTypeProvider::newFromLoadLine(loadLine).mustUseInventTransPickId())
                {
                    break;
                }

                queryBuildDataSource = _inventTrans.query().dataSourceTable(tableNum(InventTrans));

                queryBuildDataSource = queryBuildDataSource.addDataSource(tableNum(WhsLoadLineInventoryPick));
                queryBuildDataSource.joinMode(JoinMode::ExistsJoin);
                queryBuildDataSource.addLink(fieldNum(WhsLoadLineInventoryPick, PickId), fieldNum(InventTrans, PickingRouteID));

                queryBuildRange = queryBuildDataSource.addRange(fieldNum(WhsLoadLineInventoryPick, LoadLine));
                queryBuildRange.value(queryValue(loadLine.RecId));
                queryBuildRange.status(RangeStatus::Hidden);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFormQueryPreExecuteOnCommonTable</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public static void buildFormQueryPreExecuteOnCommonTable(
        FormDataSource _inventTransOrigin,
        FormDataSource _inventTransOrInventTransArchive,
        Args           _callerArgs)
    {
        InventTransRelationType relationType = _callerArgs.parmEnum();
 
        QueryBuildRange queryBuildRange;

        switch (_callerArgs.dataset())
        {
            case tableNum(InventSum):
                InventDim::queryAddRangeFromCallerSort(_inventTransOrInventTransArchive.query().dataSourceTable(tableNum(InventDim)),_callerArgs);
                break; 

            case tableNum(InventJournalTrans):
                InventJournalTrans inventJournalTrans = _callerArgs.record() as InventJournalTrans;
                queryBuildRange = InventTransOrigin::queryAddRangeInventTransId(_inventTransOrigin.query());

                if (inventJournalTrans.JournalType == InventJournaltype::OwnershipChange)
                {
                    // Don't add InventTransOriginId range if we're looking at ProdBOM transaction for an ownership journal line.
                    // For that purpose, the query is built in formQueryAddDynalink.
                    if (relationType != InventTransRelationType::ProductionBOMConsignment)
                    {
                        queryBuildRange.value(InventTransOriginOwnershipChangeJournalTransPurchLineLink::findByJournal(inventJournalTrans.DataAreaId, inventJournalTrans.JournalId, inventJournalTrans.LineNum).queryValueInventTransOriginId());
                    }
                }
                else
                {
                    queryBuildRange.value(inventJournalTrans.queryValueInventTransId());
                }
                break;

            case tableNum(InventTransferLine):
                InventTransferLine inventTransferLine = _callerArgs.record() as InventTransferLine;
                queryBuildRange = InventTransOrigin::queryAddRangeInventTransId(_inventTransOrigin.query());
                queryBuildRange.value(inventTransferLine.queryValueInventTransId());
                break;

            case tableNum(InventTransferJourLine):
                InventTransferJourLine inventTransferJourLine = _callerArgs.record() as InventTransferJourLine;
                queryBuildRange     = InventTransOrigin::queryAddRangeInventTransId(_inventTransOrInventTransArchive.query());
                queryBuildRange.value(inventTransferJourLine.queryValueInventTransId());
                break;

            case tableNum(InventBlocking):
                InventBlocking inventBlocking = _callerArgs.record() as InventBlocking;
                queryBuildRange = InventTransOrigin::queryAddRangeInventTransId(_inventTransOrigin.query());
                queryBuildRange.value(inventBlocking.queryValueInventTransId());
                break; 

            case tableNum(ProdTable):
                ProdTable prodTable = _callerArgs.record() as ProdTable;

                if (prodTable.InventRefType == InventRefType::None && (prodTable.isProjMethodFinished() || prodTable.isProjMethodConsumed()))
                {
                    if(_callerArgs.menuItemName() != menuItemDisplayStr(CostInventTransProdAll))
                    {
                        queryBuildRange     = InventTransOrigin::queryAddRangeInventTransId(_inventTransOrigin.query());
                        queryBuildRange.value(prodTable.projQueryValueInventTransId());
                    }
                }
                break;

            case tableNum(PurchLine):
                PurchLine purchLine = _callerArgs.record() as PurchLine;
                if ((purchLine.ItemRefType == InventRefType::None || purchLine.ItemRefType == InventRefType::Purch) && purchLine.ProjId)
                {
                    queryBuildRange     = InventTransOrigin::queryAddRangeInventTransId(_inventTransOrigin.query());
                    queryBuildRange.value(purchLine.projQueryValueInventTransId());
                }
                break;

            case tableNum(PurchRFQLine):
                // PurchRFQLine's created via PurchRFQCaseLine's need to join via PurchRFQCaseLine and lines created directly
                // on PurchRFQLine need to join via PurchRFQLine.
                PurchRFQLine purchRFQLine = _callerArgs.record() as PurchRFQLine;
                queryBuildRange = InventTransOrigin::queryAddRangeInventTransId(_inventTransOrigin.query());

                str queryRange;
                if (purchRFQLine.rfqCaseLineRefRecId)
                {
                    PurchRFQCaseLine purchRFQCaseLine = PurchRFQCaseLine::findRecId(purchRFQLine.rfqCaseLineRefRecId);
                    queryRange = queryValue(purchRFQCaseLine.InventTransId);
                }
                else
                {
                    queryRange      = queryValue(purchRFQLine.InventTransId);
                }

                queryBuildRange.value(queryRange);
                break;

            case tableNum(KanbanJob):
                KanbanJob kanbanJob = _callerArgs.record() as KanbanJob;
                queryBuildRange = InventTransOrigin::queryAddRangeInventTransId(_inventTransOrigin.query());
                queryBuildRange.value(kanbanJob.queryValueInventTransId());
                break;

            case tableNum(KanbanBoardTmpProcessJob):
                KanbanBoardTmpProcessJob kanbanBoardTmpProcessJob = _callerArgs.record() as KanbanBoardTmpProcessJob;
                kanbanJob = KanbanJob::find(kanbanBoardTmpProcessJob.Job);
                queryBuildRange = InventTransOrigin::queryAddRangeInventTransId(_inventTransOrigin.query());
                queryBuildRange.value(kanbanJob.queryValueInventTransId());
                break;

            case tablenum(PmfProdCoBy):
                PmfProdCoBy pmfProdCoBy = _callerArgs.record();
                queryBuildRange     = InventTransOrigin::queryAddRangeInventTransId(_inventTransOrigin.query());
                queryBuildRange.value(pmfProdCoBy.InventTransId);
                break;

            case tableNum(KanbanBoardTmpTransferJob):
                KanbanBoardTmpTransferJob kanbanBoardTmpTransferJob = _callerArgs.record() as KanbanBoardTmpTransferJob;
                kanbanJob = KanbanJob::find(kanbanBoardTmpTransferJob.Job);
                queryBuildRange = InventTransOrigin::queryAddRangeInventTransId(_inventTransOrigin.query());
                queryBuildRange.value(kanbanJob.queryValueInventTransId());
                break;

            // <GEERU>
            case tablenum(ProdJournalRelease_RU):
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                {
                    ProdJournalRelease_RU prodJournalRelease = _callerArgs.record();
                    if (prodJournalRelease.AutodetectionInventTransId)
                    {
                        queryBuildRange    = InventTransOrigin::queryAddRangeInventTransId(_inventTransOrigin.query());
                        queryBuildRange.value(prodJournalRelease.queryValueInventTransId());
                    }
                }
                break;
            // </GEERU>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefReferenceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles main table commands on the <c>ReferenceId</c> field.
    /// </summary>
    /// <param name="_inventTransOrigin">
    /// An <c>InventTransOrigin</c> form data source.
    /// </param>
    /// <param name="_openMode">
    /// The mode in which to open the form.
    /// </param>
    /// <returns>
    /// true if a main table action has been handled; otherwise, false.
    /// </returns>
    static public boolean jumpRefReferenceId(InventTransOrigin _inventTransOrigin, OpenMode _openMode = OpenMode::Auto)
    {
        MenuFunction                    menuFunction;
        Args                            args;
        InventJournalTable              inventJournalTable;
        // <GEERU>
        // </GEERU>

        void jumpRef(Common _jumpToTable, str _jumpToMenuItem, str _lookupValue = '')
        {
            args = new Args();
            args.record(_jumpToTable);
            args.lookupValue(_lookupValue);
            args.openMode(_openMode);
            menuFunction = new MenuFunction(_jumpToMenuItem, MenuItemType::Display);

            if (_jumpToMenuItem == menuitemDisplayStr(InventTransferOrder) && InventTransferOrderViewDetailsFlight::instance().isEnabled())
            {
                menuFunction.formViewOption(FormViewOption::Details);
            }
            menuFunction.run(args);
        }

        switch (_inventTransOrigin.ReferenceCategory)
        {
            // Work
            case InventTransType::WHSWork:
            case InventTransType::WHSQuarantine:
                WHSWorkTable workTable = WHSWorkTable::find(_inventTransOrigin.ReferenceId);
                if (workTable.RecId)
                {
                    jumpRef(workTable, menuitemDisplayStr(WHSWorkTable));
                    return true;
                }
                break;
            case InventTransType::WHSContainer:
                WHSContainerTable containerTable = WHSContainerTable::findByContainerId(_inventTransOrigin.ReferenceId);
                if (containerTable.RecId)
                {
                    jumpRef(containerTable, menuitemDisplayStr(WHSContainerTable));
                    return true;
                }
            case InventTransType::Sales:
                SalesTable salesTable = InventTransOriginSalesLine::salesLine(_inventTransOrigin.RecId).salesTable();
                if (salesTable)
                {
                    jumpRef(salesTable, salesTable.getJumpRefDisplayMenuItemName());
                    return true;
                }
                break;

            case InventTransType::BOMMain:
            case InventTransType::BOMLine:
                InventJournalTrans inventJournalTrans = _inventTransOrigin.originator() as InventJournalTrans;
                if (inventJournalTrans)
                {
                    inventJournalTable = inventJournalTrans.inventJournalTable();
                    if (inventJournalTable)
                    {
                        jumpRef(inventJournalTable, menuitemDisplayStr(InventJournalTableBOM));
                        return true;
                    }
                }
                break;

            case InventTransType::InventCounting:
                inventJournalTrans = _inventTransOrigin.originator() as InventJournalTrans;
                if (inventJournalTrans)
                {
                    inventJournalTable = inventJournalTrans.inventJournalTable();
                    if (inventJournalTable)
                    {
                        jumpRef(inventJournalTable, menuitemDisplayStr(InventJournalTableCount));
                        return true;
                    }
                }
                break;

            case InventTransType::InventTransaction:
                inventJournalTrans = _inventTransOrigin.originator() as InventJournalTrans;
                if (inventJournalTrans)
                {
                    inventJournalTable = inventJournalTrans.inventJournalTable();
                    if (inventJournalTable)
                    {
                        jumpRef(inventJournalTable, menuitemDisplayStr(InventJournalTableMovement));
                        return true;
                    }
                }
                break;

            case InventTransType::InventLossProfit:
                inventJournalTrans = _inventTransOrigin.originator() as InventJournalTrans;
                if (inventJournalTrans)
                {
                    inventJournalTable = inventJournalTrans.inventJournalTable();
                    if (inventJournalTable)
                    {
                        jumpRef(inventJournalTable, menuitemDisplayStr(InventJournalTableLossProfit));
                        return true;
                    }
                }
                break;

            case InventTransType::Project:
                inventJournalTrans = _inventTransOrigin.originator() as InventJournalTrans;
                if (inventJournalTrans)
                {
                    inventJournalTable = inventJournalTrans.inventJournalTable();
                    if (inventJournalTable)
                    {
                        jumpRef(inventJournalTable, menuitemDisplayStr(InventJournalTableProject));
                        return true;
                    }
                }
                break;

            case InventTransType::InventTransfer:
                inventJournalTrans = _inventTransOrigin.originator() as InventJournalTrans;
                if (inventJournalTrans)
                {
                    inventJournalTable = inventJournalTrans.inventJournalTable();
                    if (inventJournalTable)
                    {
                        jumpRef(inventJournalTable, menuitemDisplayStr(InventJournalTableTransfer));
                        return true;
                    }
                }
                break;

            case InventTransType::QualityOrder:
                InventQualityOrderTable inventQualityOrderTable = InventTransOriginQualityOrder::inventQualityOrderTable(_inventTransOrigin.RecId);
                if (inventQualityOrderTable)
                {
                    jumpRef(inventQualityOrderTable, menuitemDisplayStr(InventQualityOrderTable));
                    return true;
                }
                break;

            case InventTransType::QuarantineOrder:
                InventQuarantineOrder inventQuarantineOrder = InventTransOriginQuarantineOrder::inventQuarantineOrder(_inventTransOrigin.RecId);
                if (inventQuarantineOrder)
                {
                    jumpRef(inventQuarantineOrder, menuitemDisplayStr(InventQuarantineOrder));
                    return true;
                }
                break;

            case InventTransType::Production:
                ProdTable prodTable = InventTransOriginProdTable::prodTable(_inventTransOrigin.RecId);
                if (prodTable)
                {
                    jumpRef(prodTable, menuitemDisplayStr(ProdTable));
                    return true;
                }
                break;

            case InventTransType::PmfProdCoBy:
                PmfProdCoBy pmfProdCoBy = InventTransOriginPmfProdCoBy::prodCoBy(_inventTransOrigin.RecId);
                if (pmfProdCoBy)
                {
                    prodTable = pmfProdCoBy.prodTable();
                    if (prodTable)
                    {
                        jumpRef(prodTable, menuitemDisplayStr(PmfProdCoBy));
                        return true;
                    }
                }
                break;

            case InventTransType::Statement:
                RetailTransactionSalesTrans retailTransactionSalesTrans = InventTransOriginRetailSalesTransTable::retailTransactionSalesTrans(_inventTransOrigin.RecId);
                RetailStatementTable retailStatementTable = RetailStatementTable::find(retailTransactionSalesTrans.StatementId);
                if (retailStatementTable)
                {
                    jumpRef(retailStatementTable, menuitemDisplayStr(RetailStatementTable));
                    return true;
                }
                break;

            case InventTransType::ProdLine:
                prodTable = InventTransOriginProdBOM::prodTable(_inventTransOrigin.RecId);
                if (prodTable)
                {
                    jumpRef(prodTable, menuitemDisplayStr(ProdTable));
                    return true;
                }
                break;

            case InventTransType::KanbanEmptied:
                Kanban kanban = InventTransOriginKanbanEmptied::kanban(_inventTransOrigin.RecId);
                if (kanban)
                {
                    jumpRef(kanban,menuitemDisplayStr(Kanban));
                    return true;
                }
                break;

            case InventTransType::KanbanJobProcess:
            case InventTransType::KanbanJobTransferIssue:
            case InventTransType::KanbanJobTransferReceipt:
            case InventTransType::KanbanJobWIP:
                KanbanJob kanbanJob = _inventTransOrigin.originator() as KanbanJob;
                if (kanbanJob)
                {
                    kanban = kanbanJob.kanban();
                    if (kanban)
                    {
                        jumpRef(kanban,menuitemDisplayStr(Kanban));
                        return true;
                    }
                }
                break;

            case InventTransType::KanbanJobPickingList:
                kanban = InventTransOriginKanbanJobPickList::kanbanJobPickingList(_inventTransOrigin.RecId).kanban();
                if (kanban)
                {
                    jumpRef(kanban,menuitemDisplayStr(Kanban));
                    return true;
                }
                break;

            case InventTransType::TransferOrderReceive:
                InventTransferTable inventTransferTable = InventTransOriginTransferReceive::inventTransferLine(_inventTransOrigin.RecId).inventTransferTable();
                if (!inventTransferTable)
                {
                    inventTransferTable = InventTransOriginTransferTransitFrom::inventTransferLine(_inventTransOrigin.RecId).inventTransferTable();
                }
                if (inventTransferTable)
                {
                    jumpRef(inventTransferTable, menuitemDisplayStr(InventTransferOrder));
                    return true;
                }
                break;

            case InventTransType::TransferOrderShip:
                inventTransferTable = InventTransOriginTransferShip::inventTransferLine(_inventTransOrigin.RecId).inventTransferTable();
                if (!inventTransferTable)
                {
                    inventTransferTable = InventTransOriginTransferTransitTo::inventTransferLine(_inventTransOrigin.RecId).inventTransferTable();
                }
                if (inventTransferTable)
                {
                    jumpRef(inventTransferTable, menuitemDisplayStr(InventTransferOrder));
                    return true;
                }
                break;

            case InventTransType::TransferOrderScrap:
                inventTransferTable = InventTransOriginTransferScrap::inventTransferLine(_inventTransOrigin.RecId).inventTransferTable();
                if (inventTransferTable)
                {
                    jumpRef(inventTransferTable, menuitemDisplayStr(InventTransferOrder));
                    return true;
                }
                break;

            case InventTransType::Purch:
                if (InventTrans::findByInventTransOrigin(_inventTransOrigin.RecId).StatusReceipt == StatusReceipt::QuotationReceipt)
                {
                    PurchRFQCaseLine purchRFQCaseLine = InventTransOriginPurchRFQCaseLine::purchRFQCaseLine(_inventTransOrigin.RecId);
                    PurchRFQCaseTable purchRFQCaseTable = PurchRFQCaseTable::find(purchRFQCaseLine.rfqCaseId);
                    if (purchRFQCaseTable)
                    {
                        jumpRef(purchRFQCaseTable, menuitemDisplayStr(PurchRFQCaseTable), purchRFQCaseTable.RFQCaseId);
                        return true;
                    }
                    PurchRFQLine purchRFQLine = InventTransOriginPurchRFQLine::purchRFQLine(_inventTransOrigin.RecId);
                    if (purchRFQLine)
                    {
                        PurchRFQTable purchRFQTable = purchRFQLine.purchRFQTable();
                        if (purchRFQTable)
                        {
                            jumpRef(purchRFQTable, menuitemDisplayStr(PurchRFQReplyTable));
                            return true;
                        }
                    }
                }
                else
                {
                    PurchTable purchTable = InventTransOriginPurchLine::purchLine(_inventTransOrigin.RecId).purchTable();
                    if (purchTable)
                    {
                        jumpRef(purchTable, menuitemDisplayStr(PurchTable));
                        return true;
                    }
                }
                break;

            case InventTransType::WMSOrder:
            case InventTransType::WMSTransport:
                WMSOrder wmsOrder = InventTransOriginWMSOrder::wmsOrder(_inventTransOrigin.RecId);
                if (wmsOrder)
                {
                    jumpRef(wmsOrder, menuitemDisplayStr(WMSOrder));
                    return true;
                }
                break;

            case InventTransType::SalesQuotation:
                args = new Args();
                args.lookupValue(_inventTransOrigin.ReferenceId);
                SalesQuotationJumpRef::main(args);
                return true;

            // <GEERU>
            case InventTransType::ProdRelease_RU:
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                {
                    ProdJournalTable prodJournalTable = InventTransOriginProdJournalRelease_RU::prodJournalRelease(_inventTransOrigin.RecId).prodJournalTable();

                    if (!prodJournalTable)
                    {
                        prodJournalTable = InventTransOriginProdJournalRelease_RU::prodJournalRelease(
                            InventTrans::findByInventTransOrigin(_inventTransOrigin.RecId).MarkingRefInventTransOrigin).prodJournalTable();
                    }

                    if (prodJournalTable)
                    {
                        jumpRef(prodJournalTable, menuitemDisplayStr(ProdJournalTableRelease_RU));
                        return true;
                    }
                }
                break;
            // </GEERU>

            case InventTransType::ConsignmentReplenishmentOrder:
                var consignmentReplenishmentOrderHeader = InventTransOriginConsignmentReplenishmentOrderLine::replenishmentOrderLine(_inventTransOrigin.RecId).replenishmentOrderHeader();
                if (consignmentReplenishmentOrderHeader)
                {
                    jumpRef(consignmentReplenishmentOrderHeader, menuitemDisplayStr(ConsignmentReplenishmentOrderDetails));
                    return true;
                }
                break;

            case InventTransType::InventOwnershipChange:
                inventJournalTrans = _inventTransOrigin.originator() as InventJournalTrans;
                if (inventJournalTrans)
                {
                    inventJournalTable = inventJournalTrans.inventJournalTable();
                    if (inventJournalTable)
                    {
                        jumpRef(inventJournalTable, menuitemDisplayStr(InventJournalOwnershipChange));
                        return true;
                    }
                }
                break;

            case InventTransType::WHSOrderCommittedReservation:
                WHSOrderCommittedReservation orderCommittedReservation = _inventTransOrigin.originator() as WHSOrderCommittedReservation;
                if (orderCommittedReservation.CommittingOriginInventTransId)
                {
                    return InventTransFormHelper::jumpRefReferenceId(InventTransOrigin::findByInventTransId(orderCommittedReservation.CommittingOriginInventTransId));
                }
                break;

            default:
                break;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postFormQueryPreExecute_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a dynamic range and a dynamic link to the form data sources for a Brazilian context.
    /// </summary>
    /// <param name="_inventTransOrigin">
    /// An <c>InventTransOrigin</c> form data source.
    /// </param>
    /// <param name="_inventTrans">
    /// An <c>InventTrans</c> form data source.
    /// </param>
    /// <param name="_callerArgs">
    /// An <c>Args</c> object.
    /// </param>
    public static void postFormQueryPreExecute_BR(FormDataSource _inventTransOrigin,
                                                         FormDataSource _inventTrans,
                                                         Args           _callerArgs)
    {
        switch (_callerArgs.dataset())
        {
            case tableNum(CustInvoiceJour):
                CustInvoiceJour custInvoiceJour = _callerArgs.record();
                CustInvoiceJour_BR custInvoiceJourBR = custInvoiceJour.custInvoiceJour_BR();
                _inventTransOrigin.query().dataSourceNo(1)
                    .addRange(fieldNum(InventTransOrigin, ReferenceCategory)).value(queryValue(InventTransType::InventTransaction));
                break;

            case tableNum(VendInvoiceJour):
                VendInvoiceJour vendInvoiceJour = _callerArgs.record();
                _inventTransOrigin.query().dataSourceNo(1)
                    .addRange(fieldNum(InventTransOrigin, ReferenceCategory)).value(queryValue(InventTransType::InventTransaction));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postFormQueryPreExecuteHandler_BR</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(InventTransFormHelper), staticMethodStr(InventTransFormHelper, formQueryPreExecute))]
    /// <summary>
    /// Calls the <c>InventTransFormHelper::postFormQueryPreExecute_BR</c> method if Brazilian context is enabled.
    /// </summary>
    /// <param name="_args">
    /// The arguments passed by the event handler.
    /// </param>
    public static void postFormQueryPreExecuteHandler_BR(XppPrePostArgs _args)
    {
        InventTransFormHelper InventTransFormHelper = _args.getThis();

        if (!BrazilParameters::isEnabled())
        {
            return;
        }

        InventTransFormHelper::postFormQueryPreExecute_BR(
            _args.getArg('_inventTransOrigin'),
            _args.getArg('_inventTrans'),
            _args.getArg('_callerArgs'));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>