<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerBalanceControlCalculation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerBalanceControlCalculation
{
    //<GEERU>
    #isoCountryRegionCodes
    //</GEERU>

    TmpLedgerBalanceControl tmpLedgerBalanceControl;
    LedgerJournalId         ledgerJournalId;
    RecordSortedList        tmpLedgerBalanceControlList;
    CurrencyCode            companyCurrency;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAmounts</Name>
				<Source><![CDATA[
    public void calcAmounts()
    {
        LedgerJournalTable  ledgerJournalTableLocal;

        this.init();

        while select JournalNum from ledgerJournalTableLocal
            where ledgerJournalTableLocal.Posted        == false
               && ledgerJournalTableLocal.JournalType   != LedgerJournalType::Periodic
               && ledgerJournalTableLocal.JournalType   != LedgerJournalType::AssetBudgets
        {
            this.calcJournalAmounts(ledgerJournalTableLocal.JournalNum);
        }

        if (LedgerJournalTable::find(ledgerJournalId).Posted)
        {
            this.calcJournalAmounts(ledgerJournalId
                // <GEERU>
                , true
                // </GEERU>
                );
        }

        this.calcPaymPropsosalAmounts(ledgerJournalId);

        this.updateBalances();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcJournalAmounts</Name>
				<Source><![CDATA[
    protected void calcJournalAmounts(LedgerJournalId _ledgerJournalId
                                      ,boolean _posted = false
                                      )
    {
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;
        // <GEERU>
        LedgerJournalTrans_RCash ledgerJournalTrans_RCash;
        boolean isCalcNeeded;
        // </GEERU>
        CustVendPaymProposalLine custVendPaymProposalLine;
        TmpLedgerBalanceControl tmp;
        AmountMST debitAmount;
        AmountMST creditAmount;
        DimensionAttributeValueCombination primaryLedgerDimension, offsetLedgerDimension;
        MainAccount primaryMainAccount, offsetMainAccount;

        ledgerJournalTable = ledgerJournalTable::find(_ledgerJournalId);

        while select sum(AmountCurCredit), sum(AmountCurDebit) from ledgerJournalTrans
            group by Company, AccountType, LedgerDimension, OffsetCompany, OffsetAccountType, OffsetLedgerDimension,
                     CurrencyCode, ExchRate, ExchRateSecond, JournalNum
            where ledgerJournalTrans.JournalNum == _ledgerJournalId
        outer join DisplayValue from primaryLedgerDimension
            group by DisplayValue
            where primaryLedgerDimension.RecId == ledgerJournalTrans.LedgerDimension
        outer join MainAccountId from primaryMainAccount
            group by MainAccountId
            where primaryMainAccount.RecId == primaryLedgerDimension.MainAccount
        outer join DisplayValue from offsetLedgerDimension
            group by DisplayValue
            where offsetLedgerDimension.RecId == ledgerJournalTrans.OffsetLedgerDimension
        outer join MainAccountId from offsetMainAccount
            group by MainAccountId
            where offsetMainAccount.RecId == offsetLedgerDimension.MainAccount
        // <GEERU>
        outer join ledgerJournalTrans_RCash
            group by TransStatus
            where ledgerJournalTrans_RCash.RefRecId == ledgerJournalTrans.RecId
        // </GEERU>
        notexists join custVendPaymProposalLine
            where custVendPaymProposalLine.JournalId                == ledgerJournalTrans.JournalNum
               && custVendPaymProposalLine.LedgerJournalTransRecId  == ledgerJournalTrans.RecId
        {
            if (!ledgerJournalTrans.isCompanyIntercompany())
            {
                // Process for account
                tmp = null;
                tmp.LedgerJournalACType = ledgerJournalTrans.AccountType;

                if (tmp.LedgerJournalACType == LedgerJournalACType::Ledger)
                {
                    tmp.AccountNum = primaryMainAccount.MainAccountId;
                }
                else
                {
                    tmp.AccountNum = primaryLedgerDimension.DisplayValue;
                }

                // <GEERU>
                isCalcNeeded =  _posted
                                || tmp.LedgerJournalACType != LedgerJournalACType::RCash
                                || (
                                    tmp.LedgerJournalACType == LedgerJournalACType::RCash
                                        && (ledgerJournalTrans_RCash.TransStatus == RCashTransStatus::Confirmed
                                            || ledgerJournalTrans_RCash.TransStatus == RCashTransStatus::None)
                                    );
                // </GEERU>

                if (tmpLedgerBalanceControlList.find(tmp)
                    // <GEERU>
                    && ledgerJournalTrans_RCash.TransStatus != RCashTransStatus::Canceled
                    && isCalcNeeded
                    // </GEERU>
                    )
                {
                    debitAmount  = ledgerJournalTrans.calcDebitMST(true, ledgerJournalTable);
                    creditAmount = ledgerJournalTrans.calcCreditMST(true, ledgerJournalTable);

                    if (_ledgerJournalId == ledgerJournalId)
                    {
                        tmp.MovementDebitMST    += debitAmount;
                        tmp.MovementCreditMST   += creditAmount;
                        tmp.Movement            = tmp.MovementDebitMST - tmp.MovementCreditMST;
                    }
                    else
                    {
                        tmp.MovementOtherJournals += debitAmount - creditAmount;
                    }
                    tmpLedgerBalanceControlList.ins(tmp, true);
                }
            }

            if (!ledgerJournalTrans.isOffsetCompanyIntercompany() && ledgerJournalTrans.OffsetLedgerDimension)
            {
                // Process for offset account
                tmp = null;
                tmp.LedgerJournalACType = ledgerJournalTrans.OffsetAccountType;

                if (tmp.LedgerJournalACType == LedgerJournalACType::Ledger)
                {
                    tmp.AccountNum = offsetMainAccount.MainAccountId;
                }
                else
                {
                    tmp.AccountNum = offsetLedgerDimension.DisplayValue;
                }

                // <GEERU>
                isCalcNeeded =  _posted
                                || tmp.LedgerJournalACType != LedgerJournalACType::RCash
                                || (
                                    tmp.LedgerJournalACType == LedgerJournalACType::RCash
                                        && (ledgerJournalTrans_RCash.TransStatus == RCashTransStatus::Confirmed
                                            || ledgerJournalTrans_RCash.TransStatus == RCashTransStatus::None)
                                    );
                // </GEERU>
                if (tmpLedgerBalanceControlList.find(tmp)
                    // <GEERU>
                    && ledgerJournalTrans_RCash.TransStatus != RCashTransStatus::Canceled
                    && isCalcNeeded
                    // </GEERU>
                    )
                {
                    debitAmount  = ledgerJournalTrans.calcDebitMST(true, ledgerJournalTable);
                    creditAmount = ledgerJournalTrans.calcCreditMST(true, ledgerJournalTable);

                    if (_ledgerJournalId == ledgerJournalId)
                    {
                        tmp.MovementDebitMST    += creditAmount;
                        tmp.MovementCreditMST   += debitAmount;
                        tmp.Movement            = tmp.MovementDebitMST - tmp.MovementCreditMST;
                    }
                    else
                    {
                        tmp.MovementOtherJournals += creditAmount - debitAmount;
                    }
                    tmpLedgerBalanceControlList.ins(tmp, true);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPaymPropsosalAmounts</Name>
				<Source><![CDATA[
    protected void calcPaymPropsosalAmounts(LedgerJournalId _ledgerJournalId)
    {
        CustVendPaymProposalLine    custVendPaymProposalLine;
        AmountMST                   paymAmountMST;
        TmpLedgerBalanceControl     tmp;

        while select custVendPaymProposalLine
            where custVendPaymProposalLine.JournalId == _ledgerJournalId
        {
            paymAmountMST = custVendPaymProposalLine.paymAmountMST();

            tmp = null;
            tmp.LedgerJournalACType = custVendPaymProposalLine.PaymAccountType;

            if (custVendPaymProposalLine.PaymAccountType == LedgerJournalACType::Ledger)
            {
                tmp.AccountNum = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(custVendPaymProposalLine.LedgerDimension);
            }
            else
            {
                tmp.AccountNum = custVendPaymProposalLine.parmPaymAccount();
            }

            if (tmpLedgerBalanceControlList.find(tmp))
            {
                if (_ledgerJournalId == ledgerJournalId)
                {
                    if (paymAmountMST >= 0)
                    {
                        tmp.MovementDebitMST    += paymAmountMST;
                    }
                    else
                    {
                        tmp.MovementCreditMST   += abs(paymAmountMST);
                    }
                    tmp.Movement = tmp.MovementDebitMST - tmp.MovementCreditMST;
                }
                else
                {
                    tmp.MovementOtherJournals += paymAmountMST;
                }
                tmpLedgerBalanceControlList.ins(tmp, true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init()
    {
        LedgerBalanceControl    ledgerBalanceControlFieldList;
        BankAccountTable        bankAccountTableFieldList;
        TmpLedgerBalanceControl tmpLedgerBalanceControlLocal;
        RecId                   calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();
        TransDate               fromDate = LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId,DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        TransDate               toDate = LedgerFiscalCalendar::findFiscalYearEndDateByDate(calendarRecId,DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        MainAccount             mainAccount;

        // <GEERU>
        RCashTable              cashTableFieldList;
        // </GEERU>

        companyCurrency = Ledger::accountingCurrency();

        if (DimensionFocusBalanceUpdateByLedgerFlight::instance().isEnabled())
        {
            MainAccountEventArgs args = MainAccountEventArgs::construct();
            args.parmBalanceLedgerRecId(Ledger::current());

            MainAccount::updateBalancesWithArgs(args);
        }
        else
        {
            MainAccount::updateBalances();
        }

        delete_from tmpLedgerBalanceControl;

        tmpLedgerBalanceControlList = new RecordSortedList(tablenum(TmpLedgerBalanceControl));
        tmpLedgerBalanceControlList.sortOrder(fieldnum(TmpLedgerBalanceControl, LedgerJournalACType),
                                              fieldnum(TmpLedgerBalanceControl, AccountNum));

        while select RecId from ledgerBalanceControlFieldList
            join * from mainAccount where
                mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current() &&
                mainAccount.RecId == ledgerBalanceControlFieldList.MainAccount
        {
            tmpLedgerBalanceControlLocal.clear();
            tmpLedgerBalanceControlLocal.Module                 = SysModule::Ledger;
            tmpLedgerBalanceControlLocal.LedgerJournalACType    = LedgerJournalACType::Ledger;
            tmpLedgerBalanceControlLocal.AccountNum             = mainAccount.MainAccountId;
            tmpLedgerBalanceControlLocal.AccountName            = mainAccount.localizedName();
            tmpLedgerBalanceControlLocal.BalanceBefore          = mainAccount.calculateBalance(fromDate, toDate, FiscalPeriodType::Opening);
            tmpLedgerBalanceControlList.ins(tmpLedgerBalanceControlLocal, true);
        }

        while select AccountID, Name from bankAccountTableFieldList
        {
            tmpLedgerBalanceControlLocal.clear();
            tmpLedgerBalanceControlLocal.Module                 = SysModule::Bank;
            tmpLedgerBalanceControlLocal.LedgerJournalACType    = LedgerJournalACType::Bank;
            tmpLedgerBalanceControlLocal.AccountNum             = bankAccountTableFieldList.AccountID;
            tmpLedgerBalanceControlLocal.AccountName            = bankAccountTableFieldList.Name;
            tmpLedgerBalanceControlLocal.BalanceBefore          = BankAccountTrans::balanceMST(bankAccountTableFieldList.AccountID);
            tmpLedgerBalanceControlList.ins(tmpLedgerBalanceControlLocal, true);
        }

        // <GEERU><GEEU>
        if (RCashParameters::isCashModuleEnabled())
        {
            while select AccountNum, Name from cashTableFieldList
            {
                tmpLedgerBalanceControlLocal.clear();
                tmpLedgerBalanceControlLocal.Module                 = SysModule::RCash;
                tmpLedgerBalanceControlLocal.LedgerJournalACType    = LedgerJournalACType::RCash;
                tmpLedgerBalanceControlLocal.AccountNum             = cashTableFieldList.AccountNum;
                tmpLedgerBalanceControlLocal.AccountName            = cashTableFieldList.Name;
                tmpLedgerBalanceControlLocal.BalanceBefore          = RCashTable::balanceMst(cashTableFieldList.AccountNum, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
                tmpLedgerBalanceControlList.ins(tmpLedgerBalanceControlLocal, true);
            }
        }
        // </GEERU></GEEU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalId</Name>
				<Source><![CDATA[
    public LedgerJournalId parmLedgerJournalId(LedgerJournalId _ledgerJournalId = ledgerJournalId)
    {
        ledgerJournalId = _ledgerJournalId;

        return ledgerJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpLedgerBalanceControl</Name>
				<Source><![CDATA[
    public TmpLedgerBalanceControl tmpLedgerBalanceControl()
    {
        return tmpLedgerBalanceControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBalances</Name>
				<Source><![CDATA[
    protected void updateBalances()
    {
        TmpLedgerBalanceControl tmpLedgerBalanceControlLocal;
        boolean                 found;

        found = tmpLedgerBalanceControlList.first(tmpLedgerBalanceControlLocal);

        while (found)
        {
            tmpLedgerBalanceControl.clear();
            tmpLedgerBalanceControl.Module                  = tmpLedgerBalanceControlLocal.Module;
            tmpLedgerBalanceControl.LedgerJournalACType     = tmpLedgerBalanceControlLocal.LedgerJournalACType;
            tmpLedgerBalanceControl.AccountNum              = tmpLedgerBalanceControlLocal.AccountNum;
            tmpLedgerBalanceControl.AccountName             = tmpLedgerBalanceControlLocal.AccountName;
            tmpLedgerBalanceControl.BalanceBefore           = tmpLedgerBalanceControlLocal.BalanceBefore;
            tmpLedgerBalanceControl.Movement                = tmpLedgerBalanceControlLocal.Movement;
            tmpLedgerBalanceControl.MovementDebitMST        = tmpLedgerBalanceControlLocal.MovementDebitMST;
            tmpLedgerBalanceControl.MovementCreditMST       = tmpLedgerBalanceControlLocal.MovementCreditMST;
            tmpLedgerBalanceControl.MovementOtherJournals   = tmpLedgerBalanceControlLocal.MovementOtherJournals;

            if (LedgerJournalTable::find(ledgerJournalId).Posted)
            {
                tmpLedgerBalanceControl.BalanceAfter        = tmpLedgerBalanceControlLocal.BalanceBefore;
                tmpLedgerBalanceControl.BalanceBefore       = tmpLedgerBalanceControlLocal.BalanceBefore - tmpLedgerBalanceControlLocal.Movement;
            }
            else
            {
                tmpLedgerBalanceControl.BalanceAfter        = tmpLedgerBalanceControlLocal.BalanceBefore + tmpLedgerBalanceControlLocal.Movement;
            }

            tmpLedgerBalanceControl.insert();
            found = tmpLedgerBalanceControlList.next(tmpLedgerBalanceControlLocal);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static LedgerBalanceControlCalculation construct()
    {
        return new LedgerBalanceControlCalculation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>