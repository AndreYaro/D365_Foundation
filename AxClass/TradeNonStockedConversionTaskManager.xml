<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeNonStockedConversionTaskManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TradeNonStockedConversionTaskManager</c> class manages the check and conversion task
///    execution.
/// </summary>
class TradeNonStockedConversionTaskManager
{
    TradeNonStockedConversion   tradeNonStockedConversion;
    BatchHeader                 batchHeader;
    Batch                       currentBatch;
    container                   packedItemList;
    TradeNonStockedConversionResetStatus resetStatus;

    TradeNonStockedConversionEndTask    tradeNonStockedConversionEndTask;
    TradeNonStockedConversionTaskType   tradeNonStockedConversionTaskType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBatchHeader</Name>
				<Source><![CDATA[
    protected void createBatchHeader()
    {
        batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEndTask</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Adds an instance of the <c>TradeNonStockedConvesionEndTask</c> class to the <c>BatchHeader</c> class.
    /// </summary>
    protected void createEndTask()
    {
        tradeNonStockedConversionEndTask = TradeNonStockedConversionEndTask::newTask(this.parmTradeNonStockedConversionTaskType(), this.parmTradeNonStockedConversion());

        tradeNonStockedConversionEndTask.batchInfo().parmGroupId(this.parmCurrentBatch().GroupId);

        batchHeader.addRuntimeTask(tradeNonStockedConversionEndTask, this.parmCurrentBatch().BatchJobId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTask</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Adds an instance of the <c>TradeNonStockedConvesionCheckTask</c> class to the <c>BatchHeader</c> class.
    /// </summary>
    /// <param name="_tradeNonStockedConversionItem">
    ///   A <c>TradeNonStockedConversionItem</c> record.
    /// </param>
    protected void createTask(TradeNonStockedConversionItem _tradeNonStockedConversionItem)
    {
        TradeNonStockedConversionTask  tradeNonStockedConversionTask;

        tradeNonStockedConversionTask = TradeNonStockedConversionTask::newTask(this.parmTradeNonStockedConversionTaskType(), this.parmTradeNonStockedConversion(), _tradeNonStockedConversionItem);
        tradeNonStockedConversionTask.batchInfo().parmGroupId(this.parmCurrentBatch().GroupId);
        batchHeader.addRuntimeTask(tradeNonStockedConversionTask, this.parmCurrentBatch().BatchJobId);
        if (tradeNonStockedConversionEndTask)
        {
            batchHeader.addDependency(tradeNonStockedConversionEndTask, tradeNonStockedConversionTask, BatchDependencyStatus::FinishedOrError);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeEndTask</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Executes the <c>TradeNonStockedConversionEndTask</c> class.
    /// </summary>
    protected void executeEndTask()
    {
        tradeNonStockedConversionEndTask = TradeNonStockedConversionEndTask::newTask(this.parmTradeNonStockedConversionTaskType(), this.parmTradeNonStockedConversion());
        tradeNonStockedConversionEndTask.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeTask</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Executes the <c>TradeNonStockedConversionTask</c> class.
    /// </summary>
    /// <param name="_tradeNonStockedConversionItem">
    ///   A <c>TradeNonStockedConversionItem</c> record; optional.
    /// </param>
    protected void executeTask(TradeNonStockedConversionItem _tradeNonStockedConversionItem = null)
    {
        TradeNonStockedConversionTask tradeNonStockedConversionTask;

        tradeNonStockedConversionTask = TradeNonStockedConversionTask::newTask(this.parmTradeNonStockedConversionTaskType(), this.parmTradeNonStockedConversion(), _tradeNonStockedConversionItem);
        tradeNonStockedConversionTask.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemStatus</Name>
				<Source><![CDATA[
    private TradeNonStockedConversionStatus itemStatus()
    {
        TradeNonStockedConversionStatus status;
        switch (this.parmTradeNonStockedConversionTaskType())
        {
            case TradeNonStockedConversionTaskType::Check :
                status = TradeNonStockedConversionStatus::Draft;
                break;

            case TradeNonStockedConversionTaskType::Change :
                status = TradeNonStockedConversionStatus::Checked;
                break;
        }
        return status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentBatch</Name>
				<Source><![CDATA[
    public Batch parmCurrentBatch(Batch _currentBatch = currentBatch)
    {
        currentBatch = _currentBatch;
        return currentBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackedItemList</Name>
				<Source><![CDATA[
    public container parmPackedItemList(container _packedItemList = packedItemList)
    {
        packedItemList = _packedItemList;
        return packedItemList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTradeNonStockedConversion</Name>
				<Source><![CDATA[
    public TradeNonStockedConversion parmTradeNonStockedConversion(TradeNonStockedConversion _tradeNonStockedConversion = tradeNonStockedConversion)
    {
        tradeNonStockedConversion = _tradeNonStockedConversion;
        return tradeNonStockedConversion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTradeNonStockedConversionTaskType</Name>
				<Source><![CDATA[
    public TradeNonStockedConversionTaskType parmTradeNonStockedConversionTaskType(TradeNonStockedConversionTaskType _tradeNonStockedConversionTaskType = tradeNonStockedConversionTaskType)
    {
        tradeNonStockedConversionTaskType = _tradeNonStockedConversionTaskType;
        return tradeNonStockedConversionTaskType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Executes the tasks.
    /// </summary>
    public void run()
    {
        ListEnumerator  listEnumerator;
        TradeNonStockedConversionItem nonStockedConversionItem;

        if (this.scheduleBatch())
        {
            this.createBatchHeader();
            this.createEndTask();

            if (this.useItemList())
            {
                listEnumerator = List::create(this.parmPackedItemList()).getEnumerator();
                while (listEnumerator.moveNext())
                {
                    this.createTask(listEnumerator.current());
                }
            }
            else
            {
                while select nonStockedConversionItem
                    where nonStockedConversionItem.NonStockedConversion == this.parmTradeNonStockedConversion().RecId
                    &&    nonStockedConversionItem.Status == this.itemStatus()
                {
                    this.createTask(nonStockedConversionItem);
                }
            }
            this.saveBatchHeader();
        }
        else
        {
            if (this.useItemList())
            {
                listEnumerator = List::create(this.parmPackedItemList()).getEnumerator();
                while (listEnumerator.moveNext())
                {
                    this.executeTask(listEnumerator.current());
                }
            }
            else
            {
                this.executeTask();
            }
            this.executeEndTask();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveBatchHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>save</c> method on the <c>BatchHeader</c> class.
    /// </summary>
    protected void saveBatchHeader()
    {
        batchHeader.save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether batch parallelism should be used when executing the tasks.
    /// </summary>
    /// <returns>
    /// true if the tasks should be put in batch; otherwise false.
    /// </returns>
    private boolean scheduleBatch()
    {
        return this.parmCurrentBatch().BatchJobId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useItemList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the tasks should only be executed for a selection of items.
    /// </summary>
    /// <returns>
    /// true if the tasks should only be executed for a selection of items; otherwise, false.
    /// </returns>
    protected boolean useItemList()
    {
        return this.parmPackedItemList() != connull() && List::create(this.parmPackedItemList()).elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static public TradeNonStockedConversionTaskManager construct()
    {
        return new TradeNonStockedConversionTaskManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newManager</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new instance of the <c>TradeNonStockedConversionTaskManager</c> class.
    /// </summary>
    /// <param name="_tradeNonStockedConversionTaskType">
    /// An element in the <c>TradeNonStockedConversionTaskType</c> enumeration.
    /// </param>
    /// <param name="_tradeNonStockedConversion">
    /// A <c>TradeNonStockedConversion</c> table record.
    /// </param>
    /// <param name="_currentBatch">
    /// A <c>Batch</c> table record.
    /// </param>
    /// <param name="_packedItemList">
    /// A packed container that contains a list of items; optional.
    /// </param>
    /// <returns>
    /// A new instance of the <c>TradeNonStockedConversionTaskManager</c> class.
    /// </returns>
    static public TradeNonStockedConversionTaskManager newManager(
        TradeNonStockedConversionTaskType   _tradeNonStockedConversionTaskType,
        TradeNonStockedConversion           _tradeNonStockedConversion,
        Batch                               _currentBatch,
        container                           _packedItemList = connull())
    {
        TradeNonStockedConversionTaskManager    tradeNonStockedConversionTaskManager = TradeNonStockedConversionTaskManager::construct();

        tradeNonStockedConversionTaskManager.parmTradeNonStockedConversionTaskType(_tradeNonStockedConversionTaskType);
        tradeNonStockedConversionTaskManager.parmTradeNonStockedConversion(_tradeNonStockedConversion);
        tradeNonStockedConversionTaskManager.parmCurrentBatch(_currentBatch);
        tradeNonStockedConversionTaskManager.parmPackedItemList(_packedItemList);

        return tradeNonStockedConversionTaskManager;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>