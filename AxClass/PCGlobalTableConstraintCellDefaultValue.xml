<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCGlobalTableConstraintCellDefaultValue</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is responsible for assigning the default value for a cell in a table constraint.
/// </summary>
class PCGlobalTableConstraintCellDefaultValue
{
    Map attributeTypeToValue;
    Map attributeTypeToIntValue;
    Map attributeTypeToEnumSolverValue;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        attributeTypeToValue            = new Map(Types::Int64, Types::Record);
        attributeTypeToIntValue         = new Map(Types::Int64, Types::Integer);
        attributeTypeToEnumSolverValue  = new Map(Types::Int64, Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default value of a table constraint cell.
    /// </summary>
    /// <param name="_cellValue">
    /// A temporary cell value record.
    /// </param>
    /// <param name="_columnDefinition">
    /// A table constraint column definition.
    /// </param>
    public void setDefaultValue(PCGlobalTableConstraintEditTmp _cellValue, PCTableConstraintColumnDefinition _columnDefinition)
    {
        EcoResAttributeType attributeType;

        if (attributeTypeToValue.exists(_columnDefinition.AttributeType))
        {
            attributeType = attributeTypeToValue.lookup(_columnDefinition.AttributeType);
        }
        else
        {
            attributeType = EcoResAttributeType::find(_columnDefinition.AttributeType);

            attributeTypeToValue.insert(_columnDefinition.AttributeType, attributeType);
        }

        switch (AttributeType.DataType)
        {
            case AttributeDataType::Integer:
                this.setIntegerValue(_cellValue, attributeType);

                break;
            case AttributeDataType::Text :
                this.setEnumValue(_cellValue, attributeType);
                break;
            case AttributeDataType::TrueFalse :
                // do nothing
                break;
            default:
                if (!this.setDefaultValueForDefaultAttributeType(_cellValue, _columnDefinition))
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultValueForDefaultAttributeType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the default value for a table constraint cell.
    /// </summary>
    /// <param name="_cellValue">
    ///     A temporary cell value record.
    /// </param>
    /// <param name="_columnDefinition">
    ///     A table constraint column definition.
    /// </param>
    [Replaceable]
    protected boolean setDefaultValueForDefaultAttributeType(PCGlobalTableConstraintEditTmp _cellValue, PCTableConstraintColumnDefinition _columnDefinition)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnumValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the minimum enum value on a temporary cell value record from a bound enum attribute type.
    /// </summary>
    /// <param name="_tmpCellValue">
    /// A temporary cell value record.
    /// </param>
    /// <param name="_attributeType">
    /// An attribute type.
    /// </param>
    protected void setEnumValue(PCGlobalTableConstraintEditTmp _tmpCellValue, EcoResAttributeType _attributeType)
    {
        PCSolverTextValue                   solverValue;
        EcoResAttributeType                 attributeType;
        EcoResEnumerationAttributeTypeValue enumValue;

        if (attributeTypeToEnumSolverValue.exists(_attributeType.RecId))
        {
            solverValue.Value = attributeTypeToValue.lookup(_attributeType.RecId);
        }
        else
        {
           select firstonly Value from solverValue
            join TableId from enumValue order by OrdinalNumber asc
                where enumValue.Value == solverValue.TextValue
                    join TableId from attributeType
                        where attributeType.RecId == enumValue.AttributeType
                        &&    attributeType.RecId == _attributeType.RecId;
        }

        _tmpCellValue.TextValue = solverValue.Value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIntegerValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the minimum integer value on a temporary cell value record from a bound integer attribute type.
    /// </summary>
    /// <param name="_tmpCellValue">
    /// A temporary cell value record.
    /// </param>
    /// <param name="_attributeType">
    /// An attribute type.
    /// </param>
    protected void setIntegerValue(PCGlobalTableConstraintEditTmp _tmpCellValue, EcoResAttributeType _attributeType)
    {
        EcoResIntValue                  lowValue;
        EcoResBoundedAttributeTypeValue valueBounds;

        if (attributeTypeToIntValue.exists(_attributeType.RecId))
        {
            lowValue.IntValue = attributeTypeToValue.lookup(_attributeType.RecId);
        }
        else
        {
            select firstonly IntValue from lowValue
            exists join valueBounds
                where valueBounds.LowerBound    == lowValue.RecId
                &&    valueBounds.AttributeType == _attributeType.RecId;
        }

        _tmpCellValue.IntValue = lowValue.IntValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCGlobalTableConstraintCellDefaultValue construct()
    {
        return new PCGlobalTableConstraintCellDefaultValue();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>