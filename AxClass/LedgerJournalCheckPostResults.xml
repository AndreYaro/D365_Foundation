<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalCheckPostResults</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerJournalCheckPostResults</c> class collects the messages for the posting results of a journal.
/// </summary>
public class LedgerJournalCheckPostResults implements SysPackable
{
    container errorLog;
    [FormObservable]
    LedgerPostingMessageLog ledgerPostingMessageCollection;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        errorLog
    ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearErrorLog</Name>
				<Source><![CDATA[
    public void clearErrorLog()
    {
        errorLog = ['@@',''];

        ledgerPostingMessageCollection = LedgerPostingMessageLog::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorExists</Name>
				<Source><![CDATA[
    public boolean errorExists(Voucher _voucher)
    {
        Counter pos;

        pos = confind(errorLog, _voucher);

        return (pos != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorExistsInJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a boolean value that indicates whether the specified posting message exists.
    /// </summary>
    /// <param name="_refTableId">
    /// The reference record table ID.
    /// </param>
    /// <param name="_refRecId">
    /// The reference record record ID.
    /// </param>
    /// <returns>
    /// true if errors were found; otherwise, false.
    /// </returns>
    public boolean errorExistsInJournalLine(RefTableId _refTableId, RefRecId _refRecId)
    {
        boolean errorExists;

        errorExists = ledgerPostingMessageCollection.find(_refTableId, _refRecId);

        return errorExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorInJournal</Name>
				<Source><![CDATA[
    public boolean errorInJournal()
    {
        return (conlen(errorLog) > 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorInJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if any messages exist in the posting message collection.
    /// </summary>
    /// <returns>
    /// true if errors were found; otherwise, false.
    /// </returns>
    public boolean errorInJournalLine()
    {
        return ledgerPostingMessageCollection.elements() > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorLog</Name>
				<Source><![CDATA[
    public LogTxt errorLog(Voucher _voucher)
    {
        Counter pos;

        pos = confind(errorLog, _voucher);
        if (pos == 0)
        {
            return '';
        }
        else
        {
            return conpeek(errorLog, pos + 1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorLogJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the posting messages for the specified reference record from the posting message
    /// collection.
    /// </summary>
    /// <param name="_refTableId">
    /// The reference record table ID.
    /// </param>
    /// <param name="_refRecId">
    /// The reference record record ID.
    /// </param>
    /// <returns>
    /// The posting message(s) for the referenced record if they exist; otherwise, empty string.
    /// </returns>
    public LedgerPostingMessage errorLogJournalLine(RefTableId _refTableId, RefRecId _refRecId)
    {
        LedgerPostingMessage logTxt = '';

        if (ledgerPostingMessageCollection.find(_refTableId, _refRecId))
        {
            logTxt = ledgerPostingMessageCollection.item();
        }

        return logTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        this.clearErrorLog();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, ledgerPostingMessageCollection.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerPostingMessageLog</Name>
				<Source><![CDATA[
    public LedgerPostingMessageLog parmLedgerPostingMessageLog(LedgerPostingMessageLog _ledgerPostingMessageCollection = ledgerPostingMessageCollection)
    {
        ledgerPostingMessageCollection = _ledgerPostingMessageCollection;

        return ledgerPostingMessageCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean success = false;
        Version version = RunBase::getVersion(_packedClass);
        container packedLedgerPostingMessageLog;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedLedgerPostingMessageLog] = _packedClass;

                if (packedLedgerPostingMessageLog)
                {
                    ledgerPostingMessageCollection = LedgerPostingMessageLog::create(packedLedgerPostingMessageLog);
                }

                success = true;
                break;
        }

        return success;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateErrorLog</Name>
				<Source><![CDATA[
    public void updateErrorLog(Voucher _voucher, LogTxt _logText)
    {
        int position;
        Voucher voucher;

        voucher = _voucher;

        if (voucher == '')
        {
            voucher = LedgerJournalCheckPostResults::getVoucherFromLogText(_logText);

            if (voucher == '')
            {
                return;
            }
        }

        position = conFind(errorLog, voucher);
        if (position == 0)
        {
            errorLog += [voucher, _logText];
        }
        else
        {
            // replace the text for the voucher because storing the same voucher more than one wastes memory
            conPoke(errorLog, position + 1, _logText);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>LedgerJournalCheckPostResults</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>LedgerJournalCheckPostResults</c> class.
    /// </returns>
    public static LedgerJournalCheckPostResults construct()
    {
        return new LedgerJournalCheckPostResults();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createClient</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>LedgerJournalCheckPostResults</c> class from a packed class.
    /// </summary>
    /// <param name="_packedClass">
    ///    The <c>LedgerJournalCheckPostResults</c> class packed in a container.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>LedgerJournalCheckPostResults</c> class.
    /// </returns>
    /// <remarks>
    ///    This method is for internal use only.
    /// </remarks>
    public static LedgerJournalCheckPostResults createClient(container _packedClass)
    {
        LedgerJournalCheckPostResults ledgerJournalCheckPostResults;

        ledgerJournalCheckPostResults = new LedgerJournalCheckPostResults();
        ledgerJournalCheckPostResults.unpack(_packedClass);

        return ledgerJournalCheckPostResults;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucherFromLogText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the voucher from the log text.
    /// </summary>
    /// <param name="_logText">
    /// The log text.
    /// </param>
    /// <returns>
    /// The voucher.
    /// </returns>
    /// <remarks>
    /// This method splits the log text by comma and then searches each split
    /// looking for a voucher. A split that contains a voucher is expected to be
    /// in the pattern "Voucher XXXX" which is common in journal posting. Label
    /// @SYS27675 is an example of what is expected before the split.
    /// </remarks>
    public static Voucher getVoucherFromLogText(Log _logText)
    {
        List list;
        ListEnumerator listEnumerator;
        Voucher voucher;

        list = strSplit(_logText, ',');

        listEnumerator= list.getEnumerator();
        while (listEnumerator.moveNext())
        {
            voucher = listEnumerator.current();
            if (strContains(voucher, 'Voucher'))
            {
                voucher = strDel(voucher, 1, 8);
                break;
            }
        }

        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>LedgerJournalCheckPostResults</c> class on the server.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>LedgerJournalCheckPostResults</c> class.
    /// </returns>
    public static LedgerJournalCheckPostResults newServer()
    {
        LedgerJournalCheckPostResults ledgerJournalCheckPostResults;

        ledgerJournalCheckPostResults = new LedgerJournalCheckPostResults();

        return ledgerJournalCheckPostResults;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>