<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ConfigurablePostingProfilesForBanksAndRemittanceTypes</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class contains the shared logic for Configurable posting profiles for banks and remittance types feature.
/// </summary>
public class ConfigurablePostingProfilesForBanksAndRemittanceTypes
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPostingProfileByJourType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the posting profile by remittance and ledger journal types.
    /// </summary>
    /// <param name = "_ledgerJournalType">The type of the ledger journal to get settings for.</param>
    /// <param name = "_bankRemittanceType">The remittance type to get settings for.</param>
    /// <param name = "_bankAccountId">The bank account Id to get settings from.</param>
    /// <returns>The <c>PostingProfile</c> record.</returns>
    public static PostingProfile getPostingProfileByJourType(
        LedgerJournalType _ledgerJournalType,
        BankRemittanceType _bankRemittanceType = BankRemittanceType::None,
        BankAccountId _bankAccountId = '')
    {
        PostingProfile postingProfile;
        CustParameters custParameters = CustParameters::find();
        VendParameters vendParameters = VendParameters::find();
        BankAccountTable bankAccountTable = BankAccountTable::find(_bankAccountId, false);

        switch (_ledgerJournalType)
        {
            case LedgerJournalType::CustBillOfExchangeDraw:
            case LedgerJournalType::CustBillOfExchangeRedraw:
                postingProfile = custParameters.PostingProfileBills;
                break;

            case LedgerJournalType::CustBillOfExchangeProtest:
                postingProfile = custParameters.PostingProfileBillsProtested;
                break;

            case LedgerJournalType::CustPaymRemittance:
                postingProfile = ConfigurablePostingProfilesForBanksAndRemittanceTypes::getPostingProfile(
                    _bankAccountId,
                    _bankRemittanceType,
                    ModuleCustVend::Cust);
                break;

            case LedgerJournalType::VendPromissoryNoteDraw:
            case LedgerJournalType::VendPromissoryNoteRedraw:
                postingProfile = vendParameters.PostingProfileNotes;
                break;

            case LedgerJournalType::VendPaymRemittance:
                postingProfile = ConfigurablePostingProfilesForBanksAndRemittanceTypes::getPostingProfile(
                    _bankAccountId,
                    _bankRemittanceType,
                    ModuleCustVend::Vend);
                break;
            default:
                break;
        }

        return postingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostingProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the posting profile for module and remittance type.
    /// </summary>
    /// <param name = "_bankAccountId">The bank account Id to get settings from.</param>
    /// <param name = "_remittanceType">The remittance type to get settings for.</param>
    /// <param name = "_custVend">The module to get settings from.</param>
    /// <returns>The <c>PostingProfile</c> record.</returns>
    public static PostingProfile getPostingProfile(
        BankAccountId _bankAccountId,
        BankRemittanceType _remittanceType,
        ModuleCustVend _custVend)
    {
        BankAccountTable bankAccountTable = BankAccountTable::find(_bankAccountId, false);
        PostingProfile postingProfile;

        switch (_custVend)
        {
            case ModuleCustVend::Cust:
                switch (_remittanceType)
                {
                    case BankRemittanceType::Collection:
                        postingProfile = bankAccountTable.PostingProfileBillsRemitCollection_IT;

                        if (!postingProfile)
                        {
                            postingProfile = CustParameters::find().PostingProfileBillsRemitCollection;
                        }
                        else
                        {
                            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00053, funcName());
                        }

                        break;

                    case BankRemittanceType::Discount:
                        postingProfile = bankAccountTable.PostingProfileBillsRemitDiscount_IT;

                        if (!postingProfile)
                        {
                            postingProfile = CustParameters::find().PostingProfileBillsRemitDiscount;
                        }
                        else
                        {
                            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00053, funcName());
                        }

                        break;

                    case BankRemittanceType::None:
                        postingProfile = CustParameters::find().PostingProfileBills;
                        break;

                    default:
                        break;
                }

                break;
            case ModuleCustVend::Vend:
                if (_remittanceType == BankRemittanceType::Collection)
                {
                    postingProfile = VendParameters::find().PostingProfileInvoiceRemit;
                }
                else if (_remittanceType == BankRemittanceType::Discount || _remittanceType == BankRemittanceType::None)
                {
                    postingProfile = bankAccountTable.PostingProfileRemitNotes_IT;

                    if (!postingProfile)
                    {
                        postingProfile = VendParameters::find().PostingProfileRemitNotes;
                    }
                    else
                    {
                        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00053, funcName());
                    }
                }

                break;
        }

        return postingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostingProfileByPaymMode_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets posting profile setting from the method of payment.
    /// </summary>
    /// <param name = "_paymModeId">The method of payment Id to get profile from.</param>
    /// <param name = "_bankRemittanceType">The remittance type.</param>
    /// <param name = "_module">The module to get method of payment from.</param>
    /// <returns>The posting profile id set for the method of payment.</returns>
    internal static PostingProfile getPostingProfileByPaymMode_IT(
        PaymMode _paymModeId,
        BankRemittanceType _bankRemittanceType = BankRemittanceType::None,
        ModuleCustVend _module = ModuleCustVend::Cust)
    {
        PostingProfile postingProfile;

        if (_module == ModuleCustVend::Cust)
        {
            CustPaymModeTable custPaymMode = CustPaymModeTable::find(_paymModeId);

            switch (_bankRemittanceType)
            {
                case BankRemittanceType::Collection:
                    postingProfile = custPaymMode.PostingProfileBillsRemitCollection_IT;
                    break;

                case BankRemittanceType::Discount:
                    postingProfile = custPaymMode.PostingProfileBillsRemitDiscount_IT;
                    break;

                default:
                    break;
            }
        }
        else
        {
            VendPaymModeTable vendPaymMode = VendPaymModeTable::find(_paymModeId);

            if (_bankRemittanceType != BankRemittanceType::Collection)
            {
                postingProfile = vendPaymMode.PostingProfileRemitNotes_IT;
            }
        }

        if (postingProfile)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00053, funcName());
        }

        return postingProfile;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>