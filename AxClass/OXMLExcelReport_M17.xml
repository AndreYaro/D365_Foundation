<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OXMLExcelReport_M17</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Class outputs unified form M-17 to excel
/// </summary>
class OXMLExcelReport_M17 extends XMLExcelReport_Standard_RU implements BatchRetryable, ERIReportPostProcessingSupported
{
    ItemId              itemId;
    InventLocationId    inventLocationId;

    InventTable         inventTable;
    InventTableModule   inventTableModule;
    InventPriceMap      inventPriceMap;
    InventTrans         inventTrans;
    InventTransOrigin   inventTransOrigin;
    InventDim           inventDim;

    InventQty           qtyRemainder;

    DialogField dialogItemId;
    DialogField dialogInventLocationId;

    real                bodyHeight;

    protected const int Width = 154;
    protected const int Length2 = 2;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activityType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines return activity type for selected invent location.
    /// </summary>
    /// <returns>
    ///     Activity type for selected invent location.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected InventLocationActivityType_RU activityType()
    {
        return InventLocation::find(inventLocationId).ActivityType_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTotals</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds current line values to totals.
    /// </summary>
    /// <remarks>
    ///     Not used in this report.
    /// </remarks>
    protected void addTotals()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTotalsOnPage</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds current line values to page totals.
    /// </summary>
    /// <remarks>
    ///     Not used in this report.
    /// </remarks>
    protected void addTotalsOnPage()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates height of body section.
    /// </summary>
    /// <param name="_bookmark">
    ///     Name of the section.
    /// </param>
    /// <returns>
    ///     Height of the section.
    /// </returns>
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        if (!bodyHeight)
        {
            bodyHeight = conPeek(mapSections.lookup(_bookmark), #posSectionHeight);
        }
        return bodyHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfShow</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether transaction should be shown in the report. If transaction is transfer,
    ///     it should be shown if it changes inventLocation dimension.
    /// </summary>
    /// <returns>
    ///     true, if transaction should be shown; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkIfShow()
    {
        InventTrans                 inventTransCheck;
        InventDim                   inventDimCheck;
        InventLocationId            inventLocationIdCheck;
        InventTransOriginTransfer   inventTransOriginTransfer;

        InventTransOriginId         inventTransOriginIdCheck;

        if (inventTransOrigin.ReferenceCategory != InventTransType::InventTransfer &&
            inventTransOrigin.ReferenceCategory != InventTransType::WMSTransport &&
            inventTransOrigin.ReferenceCategory != InventTransType::SummedUp)
        {
            return true;
        }

        inventLocationIdCheck = inventTrans.inventDim().InventLocationId;

        select firstonly inventTransOriginTransfer
            where(inventTransOriginTransfer.ReceiptInventTransOrigin == inventTransOrigin.RecId ||
                  inventTransOriginTransfer.IssueInventTransOrigin   == inventTransOrigin.RecId);

        inventTransOriginIdCheck = inventTransOriginTransfer.ReceiptInventTransOrigin == inventTransOrigin.RecId ?
            inventTransOriginTransfer.IssueInventTransOrigin :
            inventTransOriginTransfer.ReceiptInventTransOrigin;

        select firstonly RecId from inventTransCheck
            where inventTransCheck.InventTransOrigin    == inventTransOriginIdCheck
             &&   inventTransCheck.RecId                != inventTrans.RecId
             && ((inventTransCheck.StatusIssue
             &&  (inventTransCheck.StatusIssue          == StatusIssue::Sold
             ||   inventTransCheck.StatusIssue          == StatusIssue::Picked
             ||   inventTransCheck.StatusIssue          == StatusIssue::Deducted))
             ||  (inventTransCheck.StatusReceipt
             &&  (inventTransCheck.StatusReceipt        == StatusReceipt::Purchased
             ||   inventTransCheck.StatusReceipt        == StatusReceipt::Received)))
        exists join inventDimCheck
            where inventDimCheck.InventDimId            == inventTransCheck.InventDimId
               && inventDimCheck.InventLocationId       != inventLocationIdCheck;

        return inventTransCheck ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTotals</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Clears totals.
    /// </summary>
    /// <remarks>
    ///     Not used in this report.
    /// </remarks>
    protected void clearTotals()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTotalsOnPage</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Clears totals on page.
    /// </summary>
    /// <remarks>
    ///     Not used in this report.
    /// </remarks>
    protected void clearTotalsOnPage()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Executes report.
    /// </summary>
    protected void createReport()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00122, funcName());

        widthCols = Width;

        curWorkSheetNum = 1;
        this.createStandardReport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Moves through header recordset, fetching data associated with it.
    /// </summary>
    /// <returns>
    ///     true if data successfully fetched; otherwise, false.
    /// </returns>
    protected boolean fetchHeader()
    {
        boolean ret;

        if (queryRunHeader.next())
        {
            inventTable          = queryRunHeader.get(tableNum(InventTable));
            inventTableModule    = queryRunHeader.get(tableNum(InventTableModule));
            inventPriceMap       = inventTable.inventCostPriceMap();

            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Moves through lines recordset, fetching data associated with it.
    /// </summary>
    /// <returns>
    ///     true if data successfully fetched; otherwise, false.
    /// </returns>
    protected boolean fetchLines()
    {
        boolean ret;

        while (!ret && queryRunLines.next())
        {
            inventTrans       = queryRunLines.get(tableNum(InventTrans));
            inventTransOrigin = queryRunLines.get(tableNum(InventTransOrigin));
            inventDim         = queryRunLines.get(tableNum(InventDim));

            ret = this.checkIfShow();

            if (ret)
            {
                qtyRemainder += inventTrans.Qty;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves name of the new report file.
    /// </summary>
    /// <returns>
    ///     Name of the new report file.
    /// </returns>
    protected Filename fileName()
    {
        return 'M_17';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves postfix of a new report file.
    /// </summary>
    /// <returns>
    ///     Postfix of a new report file.
    /// </returns>
    protected Filename fileNamePostfix()
    {
        return itemId ? strFmt("_%1", itemId) : #blank + inventLocationId ? strFmt("_%1", inventLocationId) : #blank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return this.fileName() + this.fileNamePostfix() + strFmt("_%1", itemId) + '.extension';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// Name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'M17';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fills body section with data.
    /// </summary>
    protected void fillBody()
    {
        this.insertValueToSection('DatePhysical'    , inventTrans.DatePhysical);
        this.insertValueToSection('DocumentNum'     , this.getDocumentNumber());
        this.insertValueToSection('TransCounter'    , lineNo);
        this.insertValueToSection('Description'     , this.getTransDescription());
        this.insertValueToSection('TransUnitId'     , inventTableModule.UnitId);
        this.insertValueToSection('ReceiptQty'      , this.getReceiptQty());
        this.insertValueToSection('IssueQty'        , this.getIssueQty());
        this.insertValueToSection('Remainder'       , qtyRemainder);
        this.insertValueToSection('SignatureDate'   , inventTrans.DatePhysical);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageFooter</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fills page footer section with data.
    /// </summary>
    protected void fillPageFooter()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fills page header section with data.
    /// </summary>
    protected void fillPageHeader()
    {
        this.insertValueToSection('PageNum', pageNum > 1 ? strFmt("@SYS24160", pageNum) : #blank);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportFooter</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fills report footer section with data.
    /// </summary>
    protected void fillReportFooter()
    {
        this.insertValueToSection('DayFooter'   , this.getCurrentDateDay());
        this.insertValueToSection('MonthFooter' , this.getCurrentDateMonth());
        this.insertValueToSection('YearFooter'  , this.getCurrentDateYear());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fills report header section with data.
    /// </summary>
    protected void fillReportHeader()
    {
        this.insertValueToSection('ItemId'          , itemId);
        this.insertValueToSection('CompanyName'     , this.getCompanyName());
        this.insertValueToSection('DepartmentName'  , #blank);
        this.insertValueToSection('OKPO'            , this.getOKPO());
        this.insertValueToSection('DateOfCreation'  , DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        this.insertValueToSection('InventLocation'  , inventLocationId);
        this.insertValueToSection('UnitId'          , inventTableModule.UnitId);
        this.insertValueToSection('Vendor'          , this.getVendorName());
        this.insertValueToSection('ItemName'        , inventTable.itemName());
        this.insertValueToSection('ActivityType'    , this.activityType());
        this.insertValueToSection('Price'           , inventPriceMap.price() / (inventPriceMap.priceUnit() ? inventPriceMap.priceUnit() : 1));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves name of current company.
    /// </summary>
    /// <returns>
    ///     Current company name.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected CompanyName getCompanyName()
    {
        return CompanyInfo::find().name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentDateDay</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves current day of month.
    /// </summary>
    /// <returns>
    ///     String with current day of month.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Description getCurrentDateDay()
    {
        date        currentDate      = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        DictEnum    monthsOfYearEnum = new DictEnum(enumnum(MonthsOfYear));

        return num2Str0(dayofmth(currentDate), Length2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentDateMonth</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves current month as string.
    /// </summary>
    /// <returns>
    ///     Current month as string.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Description getCurrentDateMonth()
    {
        date        currentDate      = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        DictEnum    monthsOfYearEnum = new DictEnum(enumnum(MonthsOfYear));

        return monthsOfYearEnum.index2Label(mthofyr(currentDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentDateYear</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves current year.
    /// </summary>
    /// <returns>
    ///     String with current year.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Description getCurrentDateYear()
    {
        date        currentDate      = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        DictEnum    monthsOfYearEnum = new DictEnum(enumnum(MonthsOfYear));

        return num2Str0(year(currentDate) mod 2000, Length2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves document number of the current transaction.
    /// </summary>
    /// <returns>
    ///     Document number of the current transaction.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Description getDocumentNumber()
    {
        str ret;

        if (inventTrans.InvoiceId || inventTrans.PackingSlipId)
        {
            ret = inventTrans.InvoiceId ? strfmt("@SYS76498", "@GLS103562", inventTrans.InvoiceId) :
                                          strfmt("@SYS76498", "@GLS103563", inventTrans.PackingSlipId);
        }
        else if (inventTransOrigin.ReferenceCategory == InventTransType::InventCounting    ||
                 inventTransOrigin.ReferenceCategory == InventTransType::InventLossProfit  ||
                 inventTransOrigin.ReferenceCategory == InventTransType::InventTransaction ||
                 inventTransOrigin.ReferenceCategory == InventTransType::InventTransfer)
        {
            ret = (select firstonly inventJournalReportTable_RU
                       where inventJournalReportTable_RU.JournalId == inventTransOrigin.ReferenceId).ReportId;
        }
        else
        {
            ret = inventTransOrigin.ReferenceId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIssueQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves issue qty of the current transaction.
    /// </summary>
    /// <returns>
    ///     Issue qty of the current transaction.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected InventQty getIssueQty()
    {
        return inventTrans.Qty < 0 ? -inventTrans.Qty : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfLines</Name>
				<Source><![CDATA[
    internal int numOfLines()
    {
        return this.getNumOfLines(queryRunLines.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumOfLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates total number of lines in the report.
    /// </summary>
    /// <param name="_packedQuery">
    ///     Packed report query run.
    /// </param>
    /// <returns>
    ///     Number of lines in the report.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int getNumOfLines(container _packedQuery)
    {
        int                     ret;
        QueryRun                qr = new QueryRun(_packedQuery);

        while (qr.next())
        {
            inventTrans       = qr.get(tableNum(InventTrans));
            inventTransOrigin = qr.get(tableNum(InventTransOrigin));
            inventDim         = qr.get(tableNum(InventDim));

            if (this.checkIfShow())
            {
                ret++;
            }
        }

        inventTrans       = null;
        inventTransOrigin = null;
        inventDim         = null;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOKPO</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves current company's OKPO Code.
    /// </summary>
    /// <returns>
    ///     Current company's OKPO Code.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected OKPO_RU getOKPO()
    {
        return CompanyInfoHelper::partyOKPOasOfDate_RU(CompanyInfo::find());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReceiptQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves receipt qty of the current transaction.
    /// </summary>
    /// <returns>
    ///     Receipt qty for current transaction.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected InventQty getReceiptQty()
    {
        return inventTrans.Qty > 0 ? inventTrans.Qty : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDescription</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves description for the current transaction.
    /// </summary>
    /// <returns>
    ///     Description for current transaction.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TempStr getTransDescription()
    {
        str inventTransTypeLabel = new DictEnum(enumnum(InventTransType)).value2Label(enum2int(inventTransOrigin.ReferenceCategory));
        str parm1,
            parm2,
            parm3 = inventTransOrigin.ReferenceId;

        switch (inventTransOrigin.ReferenceCategory)
        {
            case InventTransType::Purch :
                parm1 = inventTransOrigin.partyName();
                parm2 = "@SYS9452";
                break;

            case InventTransType::Sales :
                parm1 = inventTransOrigin.partyName();
                parm2 = "@SYS7443";
                break;

            case InventTransType::InventCounting    :
            case InventTransType::InventLossProfit  :
            case InventTransType::InventTransaction :
            case InventTransType::InventTransfer    :
                parm1 = inventTransTypeLabel;
                parm2 = "@SYS6140";
                break;

            default :
                parm1 = inventTransTypeLabel;
                parm2 = "@SYS54020";
        }

        return strfmt("@GLS111465", parm1, parm2, parm3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves primary vendor name for the current transaction.
    /// </summary>
    /// <returns>
    ///     Primary vendor name for the current transaction.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected VendName getVendorName()
    {
        return VendTable::find(inventTable.PrimaryVendorId).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRunHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes query run which fetches report header.
    /// </summary>
    protected void initQueryRunHeader()
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbds;

        qbds = query.addDataSource(tableNum(InventTable));
        qbds.addRange(fieldNum(InventTable, ItemId)).value(queryValue(itemId));

        qbds = qbds.addDataSource(tableNum(InventTableModule));
        qbds.relations(true);
        qbds.addRange(fieldNum(InventTableModule, ModuleType)).value(queryValue(ModuleInventPurchSales::Invent));

        queryRunHeader = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRunLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes query run which builds report lines.
    /// </summary>
    protected void initQueryRunLines()
    {
        const str StatusIssue = "InventTrans.StatusIssue";
        const str Sold = "InventTrans.StatusIssue == StatusIssue::Sold";
        const str Deducted = "InventTrans.StatusIssue == StatusIssue::Deducted";
        const str StatusReceipt = "InventTrans.StatusReceipt";
        const str Purchased ="InventTrans.StatusReceipt == StatusReceipt::Purchased";
        const str Received = "InventTrans.StatusReceipt == StatusReceipt::Received";

        Query                   query = new Query();

        QueryBuildDataSource    qbdsInventTransOrigin,
                                qbdsInventTrans,
                                qbdsInventDim;

        str                     inventTransConditions;

        qbdsInventTransOrigin = query.addDataSource(tableNum(InventTransOrigin));

        qbdsInventTrans       = qbdsInventTransOrigin.addDataSource(tableNum(InventTrans));
        qbdsInventTrans.relations(true);
        qbdsInventTrans.addRange(fieldNum(InventTrans, ItemId)).value(itemId);

        qbdsInventDim         = qbdsInventTrans.addDataSource(tableNum(InventDim));
        qbdsInventDim.relations(true);

        inventTransConditions = '('                                                                     +
                                    '('                                                                 +
                                        StatusIssue                                                    +
                                        ' && '                                                          +
                                        '('                                                             +
                                            '(' + Sold + ')'                                           +
                                            ' || '                                                      +
                                            '(' + Deducted + ')'                                       +
                                        ')'                                                             +
                                    ')'                                                                 +
                                    ' || '                                                              +
                                    '('                                                                 +
                                        StatusReceipt                                                  +
                                        ' && '                                                          +
                                        '('                                                             +
                                            '(' + Purchased + ')'                                      +
                                            ' || '                                                      +
                                            '(' + Received + ')'                                       +
                                        ')'                                                             +
                                    ')'                                                                 +
                                ')';

        inventTransConditions = strReplace(inventTransConditions,
            tableStr(InventTrans),
            qbdsInventTrans.name());

        qbdsInventTrans.addRange(fieldNum(InventTrans, RecId)).value(inventTransConditions);
        qbdsInventDim.addRange(fieldNum(InventDim, InventLocationId)).value(inventLocationId);

        queryRunLines = new QueryRun(query);

        numOfLines = this.numOfLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes map which holds section data.
    /// </summary>
    /// <remarks>
    ///     Body section is not resizable in this report.
    /// </remarks>
    protected void initSectionMap()
    {
        this.addSection(reportHeaderName);
        this.addSection(pageHeaderName);
        this.addSection(bodyName);
        this.addSection(pageFooterName);
        this.addSection(reportFooterName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ItemId parmInventLocationId(InventLocationId _inventLocationId = inventLocationId)
    {
        inventLocationId = _inventLocationId;
        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves file name of the report template.
    /// </summary>
    /// <returns>
    ///     Report template file name.
    /// </returns>
    protected FileName templateName()
    {
        return resourceStr(M17_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates number of cells to be filled with data.
    /// </summary>
    /// <returns>
    ///     Number of cells to be filled with data.
    /// </returns>
    protected Counter totalCells()
    {
        const int CellsBody = 9;
        const int CellsOther = 15;

        this.initQueryRunLines();
        return numOfLines * CellsBody + CellsOther;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of the <c>OXMLExcelReport_M17</c> class.
    /// </summary>
    /// <returns>
    ///     A new instance of the <c>OXMLExcelReport_M17</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static OXMLExcelReport_M17 construct()
    {
        return new OXMLExcelReport_M17();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>