<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSUOMSeqGroupQtyUnitCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSUOMSeqGroupQtyUnitCalculator
{
    private InventQty qtyToConvert;
    private ItemId itemId;
    private InventDimId inventDimId;
    private InventHandlingUnitId inventHandlingUnitId;
    private UnitOfMeasureSymbol currentUnitId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQtyToConvertItemAndDimension</Name>
				<Source><![CDATA[
    private void setQtyToConvertItemAndDimension(
        ItemId _itemId,
        Qty _qtyToConvert,
        InventDimId _inventDimId)
    {
        this.qtyToConvert           = _qtyToConvert;
        this.itemId                 = _itemId;
        this.inventDimId            = _inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromItemQtyDimensionAndUnitId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSUOMSeqGroupQtyUnitCalculator newFromItemQtyDimensionAndUnitId(
        ItemId _itemId,
        InventQty _inventQty,
        InventDimId _inventDimId,
        UnitOfMeasureSymbol _unitId)
    {
        WHSUOMSeqGroupQtyUnitCalculator uomSeqGroupQtyUnitCalculator = new WHSUOMSeqGroupQtyUnitCalculator();

        uomSeqGroupQtyUnitCalculator.setQtyToConvertItemAndDimension(_itemId, _inventQty, _inventDimId);
        uomSeqGroupQtyUnitCalculator.inventHandlingUnitId   = WHSCatchWeightHelper::inventHandlingUnitId(_itemId);
        uomSeqGroupQtyUnitCalculator.currentUnitId          = _unitId;

        return uomSeqGroupQtyUnitCalculator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromItemQtyAndDimensionForInventHandlingUnit</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSUOMSeqGroupQtyUnitCalculator newFromItemQtyAndDimensionForInventHandlingUnit(
        ItemId _itemId,
        Qty _qtyToConvert,
        InventDimId _inventDimId)
    {
        WHSUOMSeqGroupQtyUnitCalculator uomSeqGroupQtyUnitCalculator = new WHSUOMSeqGroupQtyUnitCalculator();

        uomSeqGroupQtyUnitCalculator.setQtyToConvertItemAndDimension(_itemId, _qtyToConvert, _inventDimId);
        uomSeqGroupQtyUnitCalculator.inventHandlingUnitId   = WHSCatchWeightHelper::inventHandlingUnitId(_itemId);
        uomSeqGroupQtyUnitCalculator.currentUnitId          = uomSeqGroupQtyUnitCalculator.inventHandlingUnitId;

        return uomSeqGroupQtyUnitCalculator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateQtyWithNoDecimalForHighestUOM</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Qty calculateQtyWithNoDecimalForHighestUOM()
    {
        Qty qtyWithNoDecimalForHighestUOM;

        [qtyWithNoDecimalForHighestUOM] = this.determineHighestUOMWithNoDecimal();

        return qtyWithNoDecimalForHighestUOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineHighestUOMWithNoDecimal</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal container determineHighestUOMWithNoDecimal()
    {
        UnitOfMeasureSymbol     highestUOM;
        Qty                     highestQty;

        InventHandlingQty       inventHandlingQty = WHSCatchWeightHelper::convertInventQuantity(itemId, currentUnitId, qtyToConvert, inventDimId);

        var enumerator = WHSUOMSeqGroupLineConversionEnumerator::constructHighestToLowestEnumerator(itemId,
                                                                                                    inventDimId,
                                                                                                    inventHandlingUnitId);

        while (enumerator.moveNext())
        {
            Qty tmpQty = enumerator.convertWithCurrent(inventHandlingQty);

            // If the UOM can be converted to and still result in a whole number then we use that UOM.
            if (!frac(tmpQty) > 0)
            {
                highestQty = tmpQty;
                highestUOM = enumerator.currentUnitId();
                break;
            }
        }

        if (!highestUOM)
        {
            highestUOM = inventHandlingUnitId;
            highestQty = inventHandlingQty;
        }

        return [highestQty, highestUOM];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>