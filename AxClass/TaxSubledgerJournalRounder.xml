<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxSubledgerJournalRounder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxSubledgerJournalRounder</c> class is used to round tax subledger journal.
/// </summary>
public class TaxSubledgerJournalRounder
{
    SubledgerJourIDetailRoundingAdjustEntry roundingAdjustmentEntry;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToMonetaryAmountGroup</Name>
				<Source><![CDATA[
    private void addToMonetaryAmountGroup(MonetaryAmountTmpGroup        _monetaryAmountGroup,
                                            MonetaryAmount              _monetaryAmount,
                                            MonetaryAmountGroupNumber   _groupNumber)
    {
        _monetaryAmountGroup.MonetaryAmount  = _monetaryAmount;
        _monetaryAmountGroup.GroupNumber     = _groupNumber;
        _monetaryAmountGroup.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyRoundingToSubledgerJournalTmpDetail</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Applies the rounding differnce to <c>SubledgerJournalAccountEntryTmpDetail</c> transactions.
    /// </summary>
    /// <param name="_tmpDetail">
    ///     The buffer of type <c>SubledgerJournalAccountEntryTmpDetail</c> to which rounding will be applied. The active record in the buffer will be used to determine the group to which rounding amounts will be applied.
    /// </param>
    /// <param name="_accountingCurrencyRoundingDelta">
    ///     The amount of rounding in accounting currency.
    /// </param>
    /// <param name="_reportingCurrencyRoundingDelta">
    ///     The amount of rounding in reporting currency.
    /// </param>
    public void applyRoundingToSubledgerJournalTmpDetail(
        SubledgerJournalAccountEntryTmpDetail   _tmpDetail,
        AmountMST   _accountingCurrencyRoundingDelta,
        AmountCur   _reportingCurrencyRoundingDelta)
    {
        SubledgerJournalAccountEntryTmpDetail   updateEntrySubledgerJournalAccountEntryTmpDetail;

        updateEntrySubledgerJournalAccountEntryTmpDetail.linkPhysicalTableInstance(_tmpDetail);

        select firstonly updateEntrySubledgerJournalAccountEntryTmpDetail
                where updateEntrySubledgerJournalAccountEntryTmpDetail.RecId == _tmpDetail.RecId;

        if (updateEntrySubledgerJournalAccountEntryTmpDetail)
        {
            roundingAdjustmentEntry.addCurrencyAmountsToSubledgerJournal(updateEntrySubledgerJournalAccountEntryTmpDetail, _accountingCurrencyRoundingDelta, _reportingCurrencyRoundingDelta);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewExchangeHelper</Name>
				<Source><![CDATA[
    protected CurrencyExchangeHelper getNewExchangeHelper(LedgerRecId _ledger, TransDate _exchangeDate)
    {
        return CurrencyExchangeHelper::newExchangeDate(_ledger, _exchangeDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubledgerJourDetailRoundAdjustEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the subledger journal detail round adjustment entry.
    /// </summary>
    /// <param name = "_roundingAdjustmentEntry">The instance of <c>SubledgerJourIDetailRoundingAdjustEntry</c>.</param>
    protected void parmSubledgerJourDetailRoundAdjustEntry(SubledgerJourIDetailRoundingAdjustEntry _roundingAdjustmentEntry)
    {
        roundingAdjustmentEntry = _roundingAdjustmentEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compares the total in transaction currency converted into accounting, with the total in accounting currency
    /// </summary>
    /// <param name="_subledgerJournalAccountEntryTmpDetail">
    /// A summarization of the transaction group totals and parameters defining the group in record fields, and a recId of the
    /// member of the group to which the rounding delta should be applied.
    /// </param>
    /// <remarks>
    /// convert total cur -> MST (and reporting cur)
    /// compare with total MST (and reporting cur)
    /// apply the difference, if needed (cur -> MST takes precedense)
    /// </remarks>
    private void processGroup(SubledgerJournalAccountEntryTmpDetail _subledgerJournalAccountEntryTmpDetail)
    {
        CurrencyExchangeHelper                          currencyExchangeHelper;
        AmountMST                                       totalConvertedAccountingCurrencyAmount;
        AmountMST                                       totalConvertedReportingCurrencyAmount;
        boolean                                         roundResult = true;
        AmountMST                                       accountingCurrencyAmountDelta;
        AmountMST                                       reportingCurrencyAmountDelta;

        currencyExchangeHelper = this.getNewExchangeHelper(_subledgerJournalAccountEntryTmpDetail.Ledger, _subledgerJournalAccountEntryTmpDetail.ExchangeRateDate);
        currencyExchangeHelper.parmExchangeRate1(_subledgerJournalAccountEntryTmpDetail.ExchangeRate1);
        currencyExchangeHelper.parmExchangeRate2(_subledgerJournalAccountEntryTmpDetail.ExchangeRate2);
        currencyExchangeHelper.parmReportingExchangeRate1(_subledgerJournalAccountEntryTmpDetail.ReportingExchangeRate1);
        currencyExchangeHelper.parmReportingExchangeRate2(_subledgerJournalAccountEntryTmpDetail.ReportingExchangeRate2);

        if (Ledger::accountingCurrencyByLedger(_subledgerJournalAccountEntryTmpDetail.Ledger) != _subledgerJournalAccountEntryTmpDetail.TransactionCurrencyCode)
        {
            totalConvertedAccountingCurrencyAmount =
                            currencyExchangeHelper.calculateTransactionToAccounting(_subledgerJournalAccountEntryTmpDetail.TransactionCurrencyCode,
                                                                                    _subledgerJournalAccountEntryTmpDetail.TransactionCurrencyAmount,
                                                                                    roundResult);

            accountingCurrencyAmountDelta = totalConvertedAccountingCurrencyAmount - _subledgerJournalAccountEntryTmpDetail.AccountingCurrencyAmount;
        }

        if (Ledger::reportingCurrencyByLedger(_subledgerJournalAccountEntryTmpDetail.Ledger) != _subledgerJournalAccountEntryTmpDetail.TransactionCurrencyCode)
        {
            totalConvertedReportingCurrencyAmount =
                            currencyExchangeHelper.calculateTransactionCurrencyToReportingCurrency(_subledgerJournalAccountEntryTmpDetail.TransactionCurrencyCode,
                                                                                    _subledgerJournalAccountEntryTmpDetail.TransactionCurrencyAmount);

            reportingCurrencyAmountDelta = totalConvertedReportingCurrencyAmount - _subledgerJournalAccountEntryTmpDetail.ReportingCurrencyAmount;
        }

        if (accountingCurrencyAmountDelta != 0 || reportingCurrencyAmountDelta != 0)
        {
            this.applyRoundingToSubledgerJournalTmpDetail(_subledgerJournalAccountEntryTmpDetail, accountingCurrencyAmountDelta, reportingCurrencyAmountDelta);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundTotalTaxLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rounds total tax lines.
    /// </summary>
    /// <param name = "_subledgerJournalAccountEntryTmpDetail">The buffer of <c>SubledgerJournalAccountEntryTmpDetail</c>.</param>
    public void roundTotalTaxLines(SubledgerJournalAccountEntryTmpDetail   _subledgerJournalAccountEntryTmpDetail)
    {
        TaxTrans                taxTrans;
        TaxUncommitted          taxUncommitted;
        boolean                 processedViaTaxTrans = false;

        MonetaryAmountTmpGroup  monetaryAmountGroup;
        TaxSubledgerJournalRounderSourceEnumerator sourceEnumerator;
        SubledgerJournalAccountEntryTmpDetail tmpDetail;

        // We need to truncate the tempDB MonetaryAmountTmpGroup.
        // Because there is a platform shortage that DB cache leads to duplicate key error.
        this.truncateTempDBTableMonetaryAmountTmpGroup(monetaryAmountGroup);

        // early exit for the sake of performance:
        // if there are no tax entries, there is no need to run any tax rounding logic
        select firstonly RecId from _subledgerJournalAccountEntryTmpDetail where _subledgerJournalAccountEntryTmpDetail.PostingType == LedgerPostingType::Tax;
        if (!_subledgerJournalAccountEntryTmpDetail.RecId)
        {
            return;
        }

        // setup groupings so that variances are grouped together with their corresponding tax types
        // this is necessary in order to treat exempt(nonrecoverable) taxes separately from regular taxes.
        this.addToMonetaryAmountGroup(monetaryAmountGroup, MonetaryAmount::Tax, 1);
        this.addToMonetaryAmountGroup(monetaryAmountGroup, MonetaryAmount::TaxVariance, 1);
        this.addToMonetaryAmountGroup(monetaryAmountGroup, MonetaryAmount::TaxNonRecoverable, 2);
        this.addToMonetaryAmountGroup(monetaryAmountGroup, MonetaryAmount::TaxNonRecoverableVariance, 2);

        sourceEnumerator = TaxSubledgerJournalRounderSourceEnumerator::construct();
        sourceEnumerator.initialize(taxTrans, _subledgerJournalAccountEntryTmpDetail, monetaryAmountGroup);

        while (sourceEnumerator.moveNext())
        {
            tmpDetail = sourceEnumerator.current();
            processedViaTaxTrans = true;
            this.processGroup(tmpDetail);
        }

        if (!processedViaTaxTrans)
        {
            sourceEnumerator.initialize(taxUncommitted, _subledgerJournalAccountEntryTmpDetail, monetaryAmountGroup);

            while (sourceEnumerator.moveNext())
            {
                tmpDetail = sourceEnumerator.current();

                this.processGroup(tmpDetail);
            }
        }

        if (SourceDocumentPerformanceFlight::instance().isEnabled())
        {
            monetaryAmountGroup.dispose();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TaxSubledgerJournalRounder construct(SubledgerJourIDetailRoundingAdjustEntry _roundingAdjustmentEntry)
    {
        TaxSubledgerJournalRounder  constructedObject = new TaxSubledgerJournalRounder();

        constructedObject.parmSubledgerJourDetailRoundAdjustEntry(_roundingAdjustmentEntry);

        return constructedObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>truncateTempDBTableMonetaryAmountTmpGroup</Name>
				<Source><![CDATA[
    private void truncateTempDBTableMonetaryAmountTmpGroup(MonetaryAmountTmpGroup _monetaryAmountGroup)
    {
        _monetaryAmountGroup.skipDataMethods(true);
        _monetaryAmountGroup.skipDatabaseLog(true);
        delete_from _monetaryAmountGroup;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>