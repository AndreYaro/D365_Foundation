<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvRequisitionLineSourceDocLineItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TrvRequisitionLineSourceDocLineItem</c> class provides the information to handle the
///    distributions and sub-ledger journal account entries for a travel requisition line.
/// </summary>
[SourceDocumentEnumExtensionAttribute(enumStr(SourceDocumentLine_TravelRequisition), SourceDocumentLine_TravelRequisition::TravelRequisitionLine)]
class TrvRequisitionLineSourceDocLineItem  extends SourceDocumentLineItem
implements SourceDocumentLineItemIProjectRevenue, SourceDocumentLineItemIFinalize
{
    TrvRequisitionLine  trvRequisitionLine;
    ProjTransIdBase     projTransId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateDefaultDimension</Name>
				<Source><![CDATA[
    protected DimensionDefault calculateDefaultDimension()
    {
        return trvRequisitionLine.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLegalEntityRecId</Name>
				<Source><![CDATA[
    protected LegalEntityRecId calculateLegalEntityRecId()
    {
        return trvRequisitionLine.LegalEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSourceDocumentAmountMap</Name>
				<Source><![CDATA[
    protected SourceDocumentAmountMap calculateSourceDocumentAmountMap()
    {
        SourceDocumentAmountMap sourceDocumentAmountMap = SourceDocumentAmountMap::construct();
        SourceDocumentAmount    sourceDocumentAmount;

        sourceDocumentAmount = SourceDocumentAmount::newFromParameters(this.parmSourceDocumentLine(),
                                trvRequisitionLine.TransactionCurrencyAmount,
                                MonetaryAmount::ExtendedPrice,
                                false);

        sourceDocumentAmountMap.insert(sourceDocumentAmount);

        return sourceDocumentAmountMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentsBusinessEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>BusinessEvent</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>BusinessEvent</c> class.
    /// </returns>
    public BusinessEvent documentsBusinessEvent()
    {
        BusinessEvent       businessEvent;

        businessEvent = new BusinessEvent(enumNum(BusinessEvent_TravelRequisition), BusinessEvent_TravelRequisition::RequestForTravelAuthorization);

        return businessEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentsInterCompanyBusinessEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>TrvRequisitionLineSourceDocLineItem</c> class documents an intercompany
    /// business event.
    /// </summary>
    /// <returns>
    /// true if the <c>TrvRequisitionLineSourceDocLineItem</c> class documents an intercompany business
    /// event; otherwise, false.
    /// </returns>
    public boolean documentsInterCompanyBusinessEvent()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultAccountFromExpenseCategory</Name>
				<Source><![CDATA[
    protected LedgerDimensionAccount getDefaultAccountFromExpenseCategory()
    {
        LedgerDimensionDefaultAccount ledgerDimension;

        ledgerDimension = TrvCostType::find(trvRequisitionLine.Category).LedgerDimension;

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the instance variables.
    /// </summary>
    /// <param name="_sourceDocumentLineImplementation">
    /// The <c>SourceDocumentLineImplementation</c> table that is used to initialize the instance variables.
    /// </param>
    /// <param name="_additionalInformation">
    /// A map to hold buffers of pre initiliazed objects need by the framework to the source document.
    /// </param>
    protected void initializeImplementation(SourceDocumentLineImplementation _sourceDocumentLineImplementation, Map _additionalInformation = null)
    {
        trvRequisitionLine = _sourceDocumentLineImplementation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingDate</Name>
				<Source><![CDATA[
    public AccountingDate parmAccountingDate()
    {
        return trvRequisitionLine.EstimatedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDistributeAmountsToLegalEntities</Name>
				<Source><![CDATA[
    public boolean parmDistributeAmountsToLegalEntities()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDistributionTemplate</Name>
				<Source><![CDATA[
    public AccountingDistributionTemplate parmDistributionTemplate()
    {
        AccountingDistributionTemplate accountingDistributionTemplate;

        return accountingDistributionTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerDimensionDefaultAccount</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount parmLedgerDimensionDefaultAccount(LegalEntityRecId _legalEntityRecId = this.parmLegalEntityRecId())
    {
        LedgerDimensionDefaultAccount ledgerDimension;

        ledgerDimension = TrvCostType::find(trvRequisitionLine.Category).LedgerDimension;

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectActivityNumber</Name>
				<Source><![CDATA[
    public ProjActivityNumber parmProjectActivityNumber()
    {
        return trvRequisitionLine.ProjActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectCategoryId</Name>
				<Source><![CDATA[
    public ProjCategoryId parmProjectCategoryId()
    {
        return trvRequisitionLine.Category;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectFundingSourceRecId</Name>
				<Source><![CDATA[
    public ProjFundingSourceRefId parmProjectFundingSourceRecId()
    {
        ProjInvoiceTable    projInvoiceTable;
        ProjFundingSource   projFundingSource;
        ProjTrans_Virtual   projTran;
        ProjFundingEngine   projFundingEngine;
        MapEnumerator       enumerateMap;
        Map                 distributions = new Map(Types::Int64, Types::Real);

        if (trvRequisitionLine.ProjTable)
        {
            changecompany (CompanyInfo::findRecId(trvRequisitionLine.LegalEntity).DataArea)
            {
                // Select only one of the funding source, as travel requisition only support one distribution
                projTran = ProjTrans_Virtual::construct();
                projTran.setActivityNumber(trvRequisitionLine.ProjActivityNumber);
                projTran.setCategoryId(CategoryTable::find(trvRequisitionLine.Category).CategoryId);
                projTran.setCurrencyIdSales(trvRequisitionLine.TransactionCurrencyCode);
                projTran.setResource(ResourceFacade::findOrCreateByWorker(TrvRequisitionTable::find(trvRequisitionLine.TrvRequisitionTable).CreatingWorker));
                projTran.setResourceCategory(ResourceFacade::getResourceCategory(projTran.resource(), trvRequisitionLine.EstimatedDate));
                projTran.setLinePropertyId(trvRequisitionLine.ProjLinePropertyId);
                projTran.setProjId(ProjTable::findRecId(trvRequisitionLine.ProjTable).ProjId);
                projTran.setTransDate(trvRequisitionLine.EstimatedDate);
                projTran.setTransType(ProjTransType::Cost);

                projFundingEngine = ProjFundingEngine::construct(projTran, trvRequisitionLine.AccountingCurrencyAmount, trvRequisitionLine.AccountingCurrencyAmount, false);
                projFundingEngine.parmSingleFundingSourceRequired(true);
                if (projFundingEngine.allocate())
                {
                    distributions = projFundingEngine.parmSaleDistributions();
                    enumerateMap = new MapEnumerator(distributions);
                    while (enumerateMap.moveNext())
                    {
                        return enumerateMap.currentKey();
                    }
                }
                else
                {
                    // Could not find a valid single funding source based on allocation rules. Select a single funding source from contract.
                    projInvoiceTable = ProjTable::findRecId(trvRequisitionLine.ProjTable).projInvoice();
                    if (projInvoiceTable)
                    {
                        select firstonly RecId from projFundingSource where projFundingSource.ContractId == projInvoiceTable.ProjInvoiceProjId;
                    }
                    return projFundingSource.RecId;
                }
            }
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectId</Name>
				<Source><![CDATA[
    public ProjId parmProjectId()
    {
        ProjId  projId;

        changecompany (CompanyInfo::findRecId(this.parmLegalEntityRecId()).DataArea)
        {
            projId = ProjTable::findRecId(trvRequisitionLine.ProjTable).ProjId;
        }

        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectItemSalesTaxGroup</Name>
				<Source><![CDATA[
    public ProjTaxItemGroup parmProjectItemSalesTaxGroup()
    {
        ProjTaxItemGroup    projTaxItemGroup;

        changecompany (CompanyInfo::findRecId(this.parmLegalEntityRecId()).DataArea)
        {
            projTaxItemGroup = ProjCategory::find(this.parmProjectCategoryId()).TaxItemGroupId;
        }

        return projTaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectLineProperty</Name>
				<Source><![CDATA[
    public ProjLinePropertyId parmProjectLineProperty()
    {
        return trvRequisitionLine.ProjLinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectResourceCategoryRecId</Name>
				<Source><![CDATA[
    public ResourceCategoryRecId parmProjectResourceCategoryRecId()
    {
        return ResourceFacade::getResourceCategory(this.parmProjectResourceRecId(), this.parmAccountingDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectResourceRecId</Name>
				<Source><![CDATA[
    public ResourceRecId parmProjectResourceRecId()
    {
        TrvRequisitionTable trvRequisitionTable;
        HcmWorkerRecId      hcmWorkerRecId;

        trvRequisitionTable = TrvRequisitionTable::find(trvRequisitionLine.TrvRequisitionTable);
        hcmWorkerRecId = trvRequisitionTable.CreatingWorker;

        return ResourceFacade::findOrCreateByWorker(hcmWorkerRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesCurrencyCode</Name>
				<Source><![CDATA[
    public ProjSalesCurrencyCode parmProjectSalesCurrencyCode()
    {
        ProjTable               projTable;
        ProjInvoiceTable        projInvoiceTable;
        CustTable               custTable;
        ProjSalesCurrencyCode   projSalesCurrencyCode;

        changecompany (CompanyInfo::findRecId(this.parmLegalEntityRecId()).DataArea)
        {
            projTable = ProjTable::find(this.parmProjectId());
            if (projTable.ProjInvoiceProjId)
            {
                projInvoiceTable = ProjInvoiceTable::find(projTable.ProjInvoiceProjId);
                projSalesCurrencyCode = projInvoiceTable.CurrencyId;
            }

            if (!projSalesCurrencyCode)
            {
                if (projTable.CustAccount)
                {
                    custTable = CustTable::find(projTable.CustAccount);
                    projSalesCurrencyCode = custTable.Currency;
                }
                else
                {
                    projSalesCurrencyCode = CompanyInfoHelper::standardCurrency();
                }
            }
        }

        return projSalesCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesPrice</Name>
				<Source><![CDATA[
    public SalesPrice parmProjectSalesPrice()
    {
        boolean     priceFound;
        SalesPrice  salesPrice;
        CostPrice   costPrice;

        changecompany (CompanyInfo::findRecId(this.parmLegalEntityRecId()).DataArea)
        {
            costPrice = trvRequisitionLine.TransactionCurrencyAmount;

            // for mileage transaction, Quantity is equal to the actual mileage entered in Trx
            // other category, it's always 1
            if (TrvCostType::find(this.parmProjectCategoryId()).ExpType == TrvExpType::Transport && trvRequisitionLine.Mileage != 0)
            {
                costPrice = costPrice / trvRequisitionLine.Mileage;
            }

            ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFindCostSalesPrice(
				this.parmProjectId(),
				this.parmProjectResourceRecId(),
				this.parmProjectCategoryId(),
				costPrice,
				trvRequisitionLine.TransactionCurrencyCode,
				this.parmProjectSalesCurrencyCode(),
				trvRequisitionLine.EstimatedDate,
				'',
				'',
				'',
				trvRequisitionLine.ExchangeRate);
            [salesPrice, priceFound] = ProjCostSalesPrice::findCostSalesPriceByPriceParameters(priceParams, false, false);
        }

        return salesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesTaxGroup</Name>
				<Source><![CDATA[
    public ProjTaxGroup parmProjectSalesTaxGroup()
    {
        ProjTaxGroup    projTaxGroup;

        changecompany (CompanyInfo::findRecId(this.parmLegalEntityRecId()).DataArea)
        {
            projTaxGroup = ProjParameters::taxGroupInvoice(this.parmProjectId());
        }

        return projTaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesUnit</Name>
				<Source><![CDATA[
    public SalesUnit parmProjectSalesUnit()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectTransactionId</Name>
				<Source><![CDATA[
    public ProjTransIdBase parmProjectTransactionId()
    {
        CostControlTransCommittedCost   costControlTransCommittedCost;

        if (!projTransId)
        {
            select firstonly ProjTransId from costControlTransCommittedCost
            where costControlTransCommittedCost.SourceDocumentLine == this.parmSourceDocumentLine().RecId;

            projTransId = costControlTransCommittedCost.ProjTransId;
            if (!projTransId)
            {
                changecompany (CompanyInfo::findRecId(this.parmLegalEntityRecId()).DataArea)
                {
                    projTransId = ProjCostTrans::newTransId();
                }
            }
        }

        return projTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineFinalizedDate</Name>
				<Source><![CDATA[
    public AccountingDate parmSourceDocLineFinalizedDate()
    {
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmTransactionCurrencyCode()
    {
        return trvRequisitionLine.TransactionCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionExchangeRate</Name>
				<Source><![CDATA[
    public ExchRate parmTransactionExchangeRate()
    {
        return trvRequisitionLine.ExchangeRate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>