<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GanttDataUndo</Name>
	<SourceCode>
		<Declaration><![CDATA[
class GanttDataUndo
{
    GanttData       ganttData;
    GanttTmpUndo    ganttTmpUndo;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkRecordModificationExists</Name>
				<Source><![CDATA[
    public boolean checkRecordModificationExists(TableName                  _tableName,
                                                 RecId                      _recId,
                                                 GanttModificationAction    _modificationAction = GanttModificationAction::Unknown)
    {
        tableId         tableId = tablename2id(_tableName);
        GanttTmpUndo    ganttTmpUndoTmp;
        ganttTmpUndoTmp.setTmpData(ganttTmpUndo);

        if (_modificationAction != GanttModificationAction::Unknown)
        {
            select firstonly ganttTmpUndoTmp
                where   ganttTmpUndoTmp.RefTableId          == tableId              &&
                        ganttTmpUndoTmp.RefRecId            == _recId               &&
                        ganttTmpUndoTmp.ModificationAction  == _modificationAction;
        }
        else
        {
            select firstonly ganttTmpUndoTmp
                where   ganttTmpUndoTmp.RefTableId  == tableId &&
                        ganttTmpUndoTmp.RefRecId    == _recId;
        }

        if (ganttTmpUndoTmp.RecId)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTransactionsExist</Name>
				<Source><![CDATA[
    public boolean checkTransactionsExist()
    {
        GanttTmpUndo ganttTmpUndoTmp;
        ganttTmpUndoTmp.setTmpData(ganttTmpUndo);

        select count(RecId) from ganttTmpUndoTmp;

        if (ganttTmpUndoTmp.RecId)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAll</Name>
				<Source><![CDATA[
    public void deleteAll()
    {
        ganttTmpUndo = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteModification</Name>
				<Source><![CDATA[
    protected void deleteModification(GanttTTSId            _ttsId,
                                      GanttModificationId   _modificationId)
    {
        GanttTmpUndo ganttTmpUndoTmp;
        ganttTmpUndoTmp.setTmpData(ganttTmpUndo);

        delete_from ganttTmpUndoTmp
            where   ganttTmpUndoTmp.ttsId          == _ttsId            &&
                    ganttTmpUndoTmp.ModificationId == _modificationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateNextModificationId</Name>
				<Source><![CDATA[
    protected GanttModificationId generateNextModificationId(GanttTTSId _ttsId)
    {
        return this.getLastModificationId(_ttsId) + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateNextTTSId</Name>
				<Source><![CDATA[
    public GanttTTSId generateNextTTSId()
    {
        return this.getLastTTSId() + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllTableFields</Name>
				<Source><![CDATA[
    public Map getAllTableFields(TableName _tableName)
    {
        GanttTableBase              ganttTable;
        GanttTableFieldCollection   ganttTableFieldCollection;
        GanttTableField             ganttTableField;
        Map                         mapAllTableFields = new Map(Types::String, Types::String);

        if (!this.parmGanttData())
        {
            error(strfmt("@SYS27147", classId2Name(classidget(this))));
            throw error(strfmt("@SYS70841", funcname()));
        }

        ganttTable = this.parmGanttData().parmGanttTableCollection().findTableName(_tableName);

        if (!ganttTable)
        {
            throw error(GanttTableBase::txtNotFound(_tableName));
        }

        ganttTableFieldCollection = ganttTable.fieldCollection();

        ganttTableField = ganttTableFieldCollection.findFirst();

        while (ganttTableField)
        {
            mapAllTableFields.insert(ganttTableField.fieldName(), '');

            ganttTableField = ganttTableFieldCollection.findNext();
        }

        return mapAllTableFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBaseFieldValues</Name>
				<Source><![CDATA[
    public Map getBaseFieldValues(GanttDataModification _ganttDataModification,
                                  Map                   _mapBaseFieldValues = null,
                                  Set                   _setFieldNames      = null)
    {
        FieldName       fieldName;
        str             fieldValueStr;

        MapEnumerator   mapEnumerator;

        if (_mapBaseFieldValues == null)
        {
            _mapBaseFieldValues = new Map(Types::String, Types::String);
        }

        if (!_ganttDataModification.parmModifiedTableName()                                      ||
           !_ganttDataModification.parmModifiedRecId()                                          ||
           !_ganttDataModification.parmMapModifiedFields()                                      ||
           _ganttDataModification.parmModificationAction() == GanttModificationAction::Unknown)
        {
            throw error(strfmt("@SYS27147", classId2Name(classidget(this))));
        }

        mapEnumerator = _ganttDataModification.parmMapModifiedFields().getEnumerator();

        while (mapEnumerator && mapEnumerator.moveNext())
        {
            fieldName = mapEnumerator.current();

            if (_setFieldNames && !_setFieldNames.in(fieldName))
            {
                continue;
            }

            fieldValueStr = this.getBaseFieldValueStr(_ganttDataModification.parmModifiedTableName(),
                                                      fieldName,
                                                      _ganttDataModification.parmModifiedRecId());

            _mapBaseFieldValues.insert(fieldName, fieldValueStr);
        }

        return _mapBaseFieldValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBaseFieldValueStr</Name>
				<Source><![CDATA[
    public str getBaseFieldValueStr(TableName  _tableName,
                                    FieldName  _fieldName,
                                    RecId      _recId)
    {
        GanttTableBase  ganttTable;
        GanttTableField ganttTableField;
        Common          recordBaseData;

        if (!_tableName || !_fieldName || !_recId || !this.parmGanttData())
        {
            throw error(strfmt("@SYS27147", classId2Name(classidget(this))));
        }

        ganttTable = this.parmGanttData().parmGanttTableCollection().findTableName(_tableName);

        if (!ganttTable)
        {
            throw error(GanttTableBase::txtNotFound(_tableName));
        }

        ganttTable.ganttTableBaseData().findRecId(_recId, true);

        recordBaseData = ganttTable.ganttTableBaseData().parmTableBuffer();

        ganttTableField = ganttTable.fieldCollection().findFieldName(_fieldName);

        if (!ganttTableField)
        {
            throw error(GanttTableField::txtNotExist(_tableName, _fieldName));
        }

        return ganttTableField.getFieldValueStr(recordBaseData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastModificationId</Name>
				<Source><![CDATA[
    protected GanttModificationId getLastModificationId(GanttTTSId _ttsId)
    {
        GanttTmpUndo ganttTmpUndoTmp;
        ganttTmpUndoTmp.setTmpData(ganttTmpUndo);

        select firstonly ganttTmpUndoTmp
            order by ModificationId desc
            where ganttTmpUndoTmp.ttsId == _ttsId;

        return ganttTmpUndoTmp.ModificationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastTTSId</Name>
				<Source><![CDATA[
    public GanttTTSId getLastTTSId()
    {
        GanttTmpUndo ganttTmpUndoTmp;
        ganttTmpUndoTmp.setTmpData(ganttTmpUndo);

        select firstonly ganttTmpUndoTmp
            order by ttsId desc;

        return ganttTmpUndoTmp.ttsId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMissingPreviousFieldNames</Name>
				<Source><![CDATA[
    protected Set getMissingPreviousFieldNames(Map mapModifiedFields, Map mapPreviousFields)
    {
        MapEnumerator   mapEnumerator;
        FieldName       fieldName;
        Set             setMissingPreviousFieldNames = new Set(Types::String);

        if (!mapModifiedFields)
        {
            throw error(strfmt("@SYS27147", classId2Name(classidget(this))));
        }

        if (!mapPreviousFields)
        {
            return setMissingPreviousFieldNames;
        }

        mapEnumerator = mapModifiedFields.getEnumerator();

        while (mapEnumerator && mapEnumerator.moveNext())
        {
            fieldName = mapEnumerator.current();

            if (!mapPreviousFields.exists(fieldName))
            {
                setMissingPreviousFieldNames.add(fieldName);
            }
        }

        return setMissingPreviousFieldNames;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModificationAction</Name>
				<Source><![CDATA[
    protected GanttModificationAction getModificationAction(GanttTTSId          _ttsId,
                                                            GanttModificationId _modificationId)
    {
        GanttTmpUndo ganttTmpUndoTmp;
        ganttTmpUndoTmp.setTmpData(ganttTmpUndo);

        select firstonly ganttTmpUndoTmp
            where   ganttTmpUndoTmp.ttsId          == _ttsId            &&
                    ganttTmpUndoTmp.ModificationId == _modificationId;

        return ganttTmpUndoTmp.ModificationAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModificationFields</Name>
				<Source><![CDATA[
    protected Map getModificationFields(GanttTTSId          _ttsId,
                                        GanttModificationId _modificationId)
    {
        GanttTmpUndo ganttTmpUndoTmp;
        Map          mapModifiedFields  = new Map(Types::String, Types::String);
        tableId      refTableId         = 0;
        RecId        refRecId           = 0;
        ganttTmpUndoTmp.setTmpData(ganttTmpUndo);

        while select ganttTmpUndoTmp
            order by ModificationId
            where   ganttTmpUndoTmp.ttsId          == _ttsId            &&
                    ganttTmpUndoTmp.ModificationId == _modificationId
        {
            // check data consistency
            if (!refRecId)
            {
                refRecId    = ganttTmpUndoTmp.RefRecId;
            }

            if (!refTableId)
            {
                refTableId = ganttTmpUndoTmp.RefTableId;
            }

            if (refRecId != ganttTmpUndoTmp.RefRecId || refTableId != ganttTmpUndoTmp.RefTableId)
            {
                throw error("@SYS6144");
            }

            // add modified fields
            mapModifiedFields.insert(ganttTmpUndoTmp.modifiedFieldName(), ganttTmpUndoTmp.getFieldValueStr());
        }

        return mapModifiedFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModificationIds</Name>
				<Source><![CDATA[
    protected Set getModificationIds(GanttTTSId _ttsId)
    {
        GanttTmpUndo    ganttTmpUndoTmp;
        Set             setModificationIds = new Set(Types::Int64);
        ganttTmpUndoTmp.setTmpData(ganttTmpUndo);

        while select ganttTmpUndoTmp
            group by ModificationId
            where ganttTmpUndoTmp.ttsId == _ttsId
        {
            setModificationIds.add(ganttTmpUndoTmp.ModificationId);
        }

        return setModificationIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModificationRecId</Name>
				<Source><![CDATA[
    protected RecId getModificationRecId(GanttTTSId          _ttsId,
                                         GanttModificationId _modificationId)
    {
        GanttTmpUndo ganttTmpUndoTmp;
        ganttTmpUndoTmp.setTmpData(ganttTmpUndo);

        select firstonly ganttTmpUndoTmp
            where   ganttTmpUndoTmp.ttsId          == _ttsId            &&
                    ganttTmpUndoTmp.ModificationId == _modificationId;

        return ganttTmpUndoTmp.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModificationTableId</Name>
				<Source><![CDATA[
    protected tableId getModificationTableId(GanttTTSId          _ttsId,
                                             GanttModificationId _modificationId)
    {
        GanttTmpUndo ganttTmpUndoTmp;

        ganttTmpUndoTmp.setTmpData(ganttTmpUndo);

        select firstonly ganttTmpUndoTmp
            where   ganttTmpUndoTmp.ttsId          == _ttsId       &&
                    ganttTmpUndoTmp.ModificationId == _modificationId;

        return ganttTmpUndoTmp.RefTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModificationTableName</Name>
				<Source><![CDATA[
    protected TableName getModificationTableName(GanttTTSId          _ttsId,
                                                 GanttModificationId _modificationId)
    {
        tableId tableId;

        tableId = this.getModificationTableId(_ttsId, _modificationId);

        if (tableId)
        {
            return tableid2name(tableId);
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreviousFieldValues</Name>
				<Source><![CDATA[
    public Map getPreviousFieldValues(GanttDataModification _ganttDataModification)
    {
        FieldName               fieldName;
        str                     fieldValueStr;

        Map                     mapPreviousFields  = new Map(Types::String, Types::String);
        MapEnumerator           mapEnumerator;

        GanttDataModification   ganttDataModificationPrev;

        if (!_ganttDataModification || !_ganttDataModification.parmMapModifiedFields())
        {
            throw error(strfmt("@SYS27147", classId2Name(classidget(this))));
        }

        mapEnumerator = _ganttDataModification.parmMapModifiedFields().getEnumerator();

        while (mapEnumerator && mapEnumerator.moveNext())
        {
            fieldName = mapEnumerator.current();

            ganttDataModificationPrev = this.getPreviousModification(_ganttDataModification);

            while (ganttDataModificationPrev)
            {
                if (ganttDataModificationPrev.parmMapModifiedFields().exists(fieldName))
                {
                    fieldValueStr = ganttDataModificationPrev.parmMapModifiedFields().lookup(fieldName);
                    mapPreviousFields.insert(fieldName, fieldValueStr);

                    break;
                }

                ganttDataModificationPrev = this.getPreviousModification(ganttDataModificationPrev);
            }
        }

        return mapPreviousFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreviousModification</Name>
				<Source><![CDATA[
    public GanttDataModification getPreviousModification(GanttDataModification _ganttDataModification)
    {
        GanttTTSId              prevTTSId;

        Set                     setModificationIds;
        SetEnumerator           setEnumerator;

        GanttDataModification   ganttDataModificationPrev;

        if (!_ganttDataModification.parmTTSId()              ||
           !_ganttDataModification.parmModifiedTableName()  ||
           !_ganttDataModification.parmModifiedRecId())
        {
            throw error(strfmt("@SYS27147", classId2Name(classidget(this))));
        }

        prevTTSId = this.getPreviousTTSId(_ganttDataModification.parmTTSId());

        while (prevTTSId)
        {
            setModificationIds = this.getModificationIds(prevTTSId);

            if (setModificationIds)
            {
                setEnumerator = setModificationIds.getEnumerator();

                while (setEnumerator && setEnumerator.moveNext())
                {
                    ganttDataModificationPrev = GanttDataModification::newId(prevTTSId, setEnumerator.current());

                    ganttDataModificationPrev.parmModifiedTableName(this.getModificationTableName(ganttDataModificationPrev.parmTTSId(),
                                                                                                  ganttDataModificationPrev.parmModificationId()));
                    ganttDataModificationPrev.parmModifiedRecId(this.getModificationRecId(ganttDataModificationPrev.parmTTSId(),
                                                                                          ganttDataModificationPrev.parmModificationId()));
                    ganttDataModificationPrev.parmModificationAction(this.getModificationAction(ganttDataModificationPrev.parmTTSId(),
                                                                                                ganttDataModificationPrev.parmModificationId()));

                    // the previous modification must be taken from the same table and record
                    if (ganttDataModificationPrev.parmModifiedTableName() == _ganttDataModification.parmModifiedTableName())
                    {
                        if (ganttDataModificationPrev.parmModifiedRecId() == _ganttDataModification.parmModifiedRecId())
                        {
                            ganttDataModificationPrev.parmMapModifiedFields(this.getModificationFields(ganttDataModificationPrev.parmTTSId(),
                                                                                                       ganttDataModificationPrev.parmModificationId()));
                            return ganttDataModificationPrev;
                        }
                    }
                }
            }

            prevTTSId = this.getPreviousTTSId(prevTTSId);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreviousTTSId</Name>
				<Source><![CDATA[
    public GanttTTSId getPreviousTTSId(int64 _curTTSId)
    {
        GanttTmpUndo ganttTmpUndoTmp;
        ganttTmpUndoTmp.setTmpData(ganttTmpUndo);

        select firstonly ganttTmpUndoTmp
            order by ttsId desc
            where ganttTmpUndoTmp.ttsId < _curTTSId;

        return ganttTmpUndoTmp.ttsId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertModification</Name>
				<Source><![CDATA[
    public void insertModification(GanttDataModification _ganttDataModification)
    {
        MapEnumerator   mapEnumerator;

        fieldId         fieldId;
        FieldName       fieldName;
        str             strFieldValue;

        if (!_ganttDataModification || !_ganttDataModification.modifiedTableId())
        {
            throw error(strfmt("@SYS23264", funcname()));
        }

        if (!_ganttDataModification.parmTTSId())
        {
            _ganttDataModification.parmTTSId(this.generateNextTTSId());
        }

        _ganttDataModification.parmModificationId(this.generateNextModificationId(_ganttDataModification.parmTTSId()));

        mapEnumerator = _ganttDataModification.parmMapModifiedFields().getEnumerator();

        while (mapEnumerator && mapEnumerator.moveNext())
        {
            fieldName       = mapEnumerator.current();
            strFieldValue   = _ganttDataModification.parmMapModifiedFields().lookup(fieldName);

            fieldId         = fieldname2id(_ganttDataModification.modifiedTableId(), mapEnumerator.current());

            if (!fieldId)
            {
                throw error(GanttTableField::txtNotExist(_ganttDataModification.parmModifiedTableName(), fieldName));
            }

            ganttTmpUndo.clear();

            ganttTmpUndo.ttsId              = _ganttDataModification.parmTTSId();
            ganttTmpUndo.ModificationId     = _ganttDataModification.parmModificationId();
            ganttTmpUndo.ModificationAction = _ganttDataModification.parmModificationAction();

            ganttTmpUndo.initReferences(_ganttDataModification.modifiedTableId(),
                                        fieldId,
                                        _ganttDataModification.parmModifiedRecId());

            ganttTmpUndo.setFieldValueStr(strFieldValue);

            ganttTmpUndo.doInsert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGanttData</Name>
				<Source><![CDATA[
    public GanttData parmGanttData(GanttData _ganttData = ganttData)
    {
        ganttData = _ganttData;

        return ganttData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeRecordFromUserChanges</Name>
				<Source><![CDATA[
    public void removeRecordFromUserChanges(TableName                 _tableName,
                                            RecId                     _recId,
                                            GanttModificationAction   _modificationAction)
    {
        GanttTableBase ganttTable;
        ganttTable = this.parmGanttData().parmGanttTableCollection().findTableName(_tableName, true);

        switch (_modificationAction)
        {
            case GanttModificationAction::Update    :

                ganttTable.removeUserModifiedRecId(_recId);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>undoLastTransaction</Name>
				<Source><![CDATA[
    public void undoLastTransaction()
    {
        GanttTTSId                  lastTTSId;

        Set                         setModificationIds;
        SetEnumerator               setEnumerator;

        GanttDataModification       ganttDataModification;
        GanttDataModification       ganttDataModificationPrev;

        Map                         mapPreviousFieldValues;
        Set                         setMissingPreviousFieldNames;

        GanttVisualization          ganttVisualization;

        if (!this.checkTransactionsExist())
        {
            return;
        }

        if (!this.parmGanttData()                                            ||
           !this.parmGanttData().parmGanttClient()                          ||
           !this.parmGanttData().parmGanttClient().parmGanttVisualization())
        {
            error(strfmt("@SYS27147", classId2Name(classidget(this))));
            throw error(strfmt("@SYS70841", funcname()));
        }

        ganttVisualization = this.parmGanttData().parmGanttClient().parmGanttVisualization();

        lastTTSId = this.getLastTTSId();

        if (!lastTTSId)
        {
            throw error("@SYS6144");
        }

        setModificationIds = this.getModificationIds(lastTTSId);

        if (setModificationIds == null)
        {
            throw error("@SYS6144");
        }

        ganttVisualization.preUndoTransaction();

        setEnumerator = setModificationIds.getEnumerator();

        while (setEnumerator && setEnumerator.moveNext())
        {
            ganttDataModification = GanttDataModification::newId(lastTTSId, setEnumerator.current());

            ganttDataModification.parmModificationAction(this.getModificationAction(lastTTSId, ganttDataModification.parmModificationId()));
            ganttDataModification.parmModifiedTableName(this.getModificationTableName(lastTTSId, ganttDataModification.parmModificationId()));
            ganttDataModification.parmModifiedRecId(this.getModificationRecId(lastTTSId, ganttDataModification.parmModificationId()));

            switch (ganttDataModification.parmModificationAction())
            {
                case GanttModificationAction::Update, GanttModificationAction::Delete :

                    if (ganttDataModification.parmModificationAction() == GanttModificationAction::Update)
                    {
                        ganttDataModification.parmMapModifiedFields(this.getModificationFields(lastTTSId, ganttDataModification.parmModificationId()));
                    }
                    else if (ganttDataModification.parmModificationAction() == GanttModificationAction::Delete)
                    {
                        ganttDataModification.parmMapModifiedFields(this.getAllTableFields(ganttDataModification.parmModifiedTableName()));
                    }

                    mapPreviousFieldValues          = this.getPreviousFieldValues(ganttDataModification);

                    setMissingPreviousFieldNames    = this.getMissingPreviousFieldNames(ganttDataModification.parmMapModifiedFields(), mapPreviousFieldValues);

                    if (!mapPreviousFieldValues || (setMissingPreviousFieldNames && setMissingPreviousFieldNames.elements()))
                    {
                        mapPreviousFieldValues          = this.getBaseFieldValues(ganttDataModification, mapPreviousFieldValues, setMissingPreviousFieldNames);

                        setMissingPreviousFieldNames    = this.getMissingPreviousFieldNames(ganttDataModification.parmMapModifiedFields(), mapPreviousFieldValues);

                        if (!mapPreviousFieldValues || (setMissingPreviousFieldNames && setMissingPreviousFieldNames.elements()))
                        {
                            throw error("@SYS6144");
                        }
                    }

                    break;
            }

            ganttDataModificationPrev   = GanttDataModification::newModification(ganttDataModification, mapPreviousFieldValues);

            if (ganttVisualization.canUndoModification(ganttDataModificationPrev))
            {
                // update gantt data with previous state
                ganttData.updateModification(ganttDataModificationPrev, false, false);

                // update visualization data with previous state
                ganttVisualization.undoModification(ganttDataModificationPrev);

                if (ganttDataModification.parmTTSId() && ganttDataModification.parmModificationId())
                {
                    this.deleteModification(ganttDataModification.parmTTSId(), ganttDataModification.parmModificationId());
                }

                if (!this.checkRecordModificationExists(ganttDataModification.parmModifiedTableName(),
                                                       ganttDataModification.parmModifiedRecId(),
                                                       ganttDataModification.parmModificationAction()))
                {
                    this.removeRecordFromUserChanges(ganttDataModification.parmModifiedTableName(),
                                                     ganttDataModification.parmModifiedRecId(),
                                                     ganttDataModification.parmModificationAction());
                }
            }
        } //end while

        ganttVisualization.postUndoTransaction();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static GanttDataUndo construct()
    {
        return new GanttDataUndo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newGanttData</Name>
				<Source><![CDATA[
    public static GanttDataUndo newGanttData(GanttData _ganttData)
    {
        GanttDataUndo ganttDataUndo;
        ganttDataUndo = GanttDataUndo::construct();
        ganttDataUndo.parmGanttData(_ganttData);

        return ganttDataUndo;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>