<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimLPCleanupProcessTaskDelegateHandlers</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventDimLPCleanupProcessTaskDelegateHandlers
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateRefTableWithInventDimIdUniqueIdxDelegateHandler</Name>
				<Source><![CDATA[
    [SysObsolete('Should be deprecated after flight InventDimLPCleanupBundleUpdateRefTablesFlight is removed', false, 28\06\2024),
     SubscribesTo(classStr(inventDimLPCleanupProcessTask), delegateStr(inventDimLPCleanupProcessTask, updateRefTableWithInventDimIdUniqueIdxDelegate))]
    public static void updateRefTableWithInventDimIdUniqueIdxDelegateHandler(
        InventDimId _inventDimIdFrom,
        InventDimId _inventDimIdTo)
    {
        #OCCRetryCount
        TableName refTableName;
        FieldId   fieldId;

        ListEnumerator le = InventDimLPCleanupProcessTaskDelegateHandlers::initRefTableInventDimIdUniqueIdxList().getEnumerator();
        while (le.moveNext())
        {
            try
            {
                [refTableName, fieldId] = le.current();
                Common common = SysDictTable::newName(refTableName).makeRecord();

                while select forupdate common
                    where common.(fieldId) == _inventDimIdFrom
                {
                    common.(fieldId) = _inventDimIdTo;
                    common.doUpdate();
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::DuplicateKeyException)
            {
                // warning but ignore the error
                SysDictTable dictTable_RefTable = SysDictTable::newName(refTableName);
                FieldName dimFieldName = dictTable_RefTable.fieldName(fieldId, DbBackend::Sql, 0, FieldNameGenerationMode::FieldList);
                warning(strFmt("@SCM:InventDimLPCleanupDuplicateKeyError", dimFieldName, _inventDimIdFrom, _inventDimIdTo, refTableName));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRefTableInventDimIdUniqueIdxList</Name>
				<Source><![CDATA[
    [SysObsolete('Should be deprecated after flight InventDimLPCleanupBundleUpdateRefTablesFlight is removed', false, 28\06\2024)]
    public static List initRefTableInventDimIdUniqueIdxList()
    {
        List tableList = new List(Types::Container);
        tableList.addEnd([tableStr(InterCompanyInventDim), fieldNum(InterCompanyInventDim, InventDimId)]);
        tableList.addEnd([tableStr(InterCompanyInventSum), fieldNum(InterCompanyInventSum, InventDimId)]);
        tableList.addEnd([tableStr(InventBatchJournalResult), fieldNum(InventBatchJournalResult, InventDimId)]);
        tableList.addEnd([tableStr(InventBatchJournalSource), fieldNum(InventBatchJournalSource, InventDimId)]);
        if (!InventDimLPCleanupSkipInventReportDimHistoryFlight::instance().isEnabled())
        {
            tableList.addEnd([tableStr(InventReportDimHistory), fieldNum(InventReportDimHistory, InventDimId)]);
        }
        tableList.addEnd([tableStr(InventTransferJourLine), fieldNum(InventTransferJourLine, InventDimId)]);
        tableList.addEnd([tableStr(RAssetScrap), fieldNum(RAssetScrap, InventDimId)]);
        tableList.addEnd([tableStr(RetailItemOnHandQuantity), fieldNum(RetailItemOnHandQuantity, InventDimId)]);
        tableList.addEnd([tableStr(ReturnReplaceItemRef), fieldNum(ReturnReplaceItemRef, InventDimId)]);
        tableList.addEnd([tableStr(WHSASNItem), fieldNum(WHSASNItem, InventDimId)]);
        tableList.addEnd([tableStr(WHSContainerLine), fieldNum(WHSContainerLine, InventDimId)]);
        tableList.addEnd([tableStr(WHSItemSamplingTracking), fieldNum(WHSItemSamplingTracking, InventDimId)]);
        tableList.addEnd([tableStr(WHSLocationLimitVariant), fieldNum(WHSLocationLimitVariant, InventDimIdProductDim)]);
        tableList.addEnd([tableStr(WHSMixedLicensePlateReceiptLine), fieldNum(WHSMixedLicensePlateReceiptLine, InventDimId)]);
        tableList.addEnd([tableStr(WHSOrderCommittedReservationTransferred), fieldNum(WHSOrderCommittedReservationTransferred, InventDimId)]);
        tableList.addEnd([tableStr(WHSProductVariantFixedLocation), fieldNum(WHSProductVariantFixedLocation, ProductVariantInventDimId)]);
        tableList.addEnd([tableStr(WHSReceiptDetails), fieldNum(WHSReceiptDetails, InventDimId)]);
        tableList.addEnd([tableStr(WHSSlotDemand), fieldNum(WHSSlotDemand, InventDimId)]);
        tableList.addEnd([tableStr(WHSSlotDemandLocated), fieldNum(WHSSlotDemandLocated, InventDimId)]);
        tableList.addEnd([tableStr(WHSWavePendingAllocation), fieldNum(WHSWavePendingAllocation, InventDimIdAboveLocation)]);
        tableList.addEnd([tableStr(WHSWorkFrozen), fieldNum(WHSWorkFrozen, FrozenWorkInventDimId)]);
        tableList.addEnd([tableStr(WHSWorkInventTrans), fieldNum(WHSWorkInventTrans, InventDimIdFrom)]);
        tableList.addEnd([tableStr(WHSWorkInventTrans), fieldNum(WHSWorkInventTrans, InventDimIdTo)]);
        tableList.addEnd([tableStr(WHSWorkLineCycleCount), fieldNum(WHSWorkLineCycleCount, InventDimId)]);
        return tableList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableListWithInventDimIdUniqueIdxDelegate</Name>
				<Source><![CDATA[
    [SysObsolete('Use tableListWithInventDimIdUniqueIdxOrMultiFieldsDelegate() instead', false, 28\06\2024),
     SubscribesTo(classStr(InventDimLPCleanupInventDimIdRefTableUpdater), delegateStr(InventDimLPCleanupInventDimIdRefTableUpdater, tableListWithInventDimIdUniqueIdxDelegate))]
    public static void tableListWithInventDimIdUniqueIdxDelegate(EventHandlerResult _result)
    {
        List tableList;
        if (_result.hasResult() && _result.result() is List)
        {
            tableList = _result.result();
        }
        else
        {
            tableList = new List(Types::Container);
        }

        tableList.addEnd([tableNum(InterCompanyInventDim), fieldStr(InterCompanyInventDim, InventDimId)]);
        tableList.addEnd([tableNum(InterCompanyInventSum), fieldStr(InterCompanyInventSum, InventDimId)]);
        tableList.addEnd([tableNum(InventBatchJournalResult), fieldStr(InventBatchJournalResult, InventDimId)]);
        tableList.addEnd([tableNum(InventBatchJournalSource), fieldStr(InventBatchJournalSource, InventDimId)]);
        tableList.addEnd([tableNum(InventTransferJourLine), fieldStr(InventTransferJourLine, InventDimId)]);
        tableList.addEnd([tableNum(RAssetScrap), fieldStr(RAssetScrap, InventDimId)]);
        tableList.addEnd([tableNum(RetailItemOnHandQuantity), fieldStr(RetailItemOnHandQuantity, InventDimId)]);
        tableList.addEnd([tableNum(ReturnReplaceItemRef), fieldStr(ReturnReplaceItemRef, InventDimId)]);
        tableList.addEnd([tableNum(WHSASNItem), fieldStr(WHSASNItem, InventDimId)]);
        tableList.addEnd([tableNum(WHSContainerLine), fieldStr(WHSContainerLine, InventDimId)]);
        tableList.addEnd([tableNum(WHSItemSamplingTracking), fieldStr(WHSItemSamplingTracking, InventDimId)]);
        tableList.addEnd([tableNum(WHSLocationLimitVariant), fieldStr(WHSLocationLimitVariant, InventDimIdProductDim)]);
        tableList.addEnd([tableNum(WHSMixedLicensePlateReceiptLine), fieldStr(WHSMixedLicensePlateReceiptLine, InventDimId)]);
        tableList.addEnd([tableNum(WHSOrderCommittedReservationTransferred), fieldStr(WHSOrderCommittedReservationTransferred, InventDimId)]);
        tableList.addEnd([tableNum(WHSProductVariantFixedLocation), fieldStr(WHSProductVariantFixedLocation, ProductVariantInventDimId)]);
        tableList.addEnd([tableNum(WHSReceiptDetails), fieldStr(WHSReceiptDetails, InventDimId)]);
        tableList.addEnd([tableNum(WHSSlotDemand), fieldStr(WHSSlotDemand, InventDimId)]);
        tableList.addEnd([tableNum(WHSSlotDemandLocated), fieldStr(WHSSlotDemandLocated, InventDimId)]);
        tableList.addEnd([tableNum(WHSWavePendingAllocation), fieldStr(WHSWavePendingAllocation, InventDimIdAboveLocation)]);
        tableList.addEnd([tableNum(WHSWorkFrozen), fieldStr(WHSWorkFrozen, FrozenWorkInventDimId)]);
        tableList.addEnd([tableNum(WHSWorkInventTrans), fieldStr(WHSWorkInventTrans, InventDimIdFrom)]);
        tableList.addEnd([tableNum(WHSWorkInventTrans), fieldStr(WHSWorkInventTrans, InventDimIdTo)]);
        tableList.addEnd([tableNum(WHSWorkLineCycleCount), fieldStr(WHSWorkLineCycleCount, InventDimId)]);

        _result.result(tableList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableListWithInventDimIdUniqueIdxOrMultiFieldsDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// List 1) tables whose InventDimId fields are included in an unique index
    ///   or 2) tables that have multiple InventDimId fields
    /// </summary>
    /// <param name = "_result">container of [tableId, field name of InventDimId, field name of DataAreaId, assigned thread Num]</param>
    [SubscribesTo(classStr(InventDimLPCleanupProcessTask), delegateStr(InventDimLPCleanupProcessTask, tableListWithInventDimIdUniqueIdxOrMultiFieldsDelegate))]
    public static void tableListWithInventDimIdUniqueIdxOrMultiFieldsDelegate(EventHandlerResult _result)
    {
        List tableList;
        if (_result.hasResult() && _result.result() is List)
        {
            tableList = _result.result();
        }
        else
        {
            tableList = new List(Types::Container);
        }

        // table list that have unique indexes include InventDimId
        tableList.addEnd([tableNum(InterCompanyInventDim),                   fieldStr(InterCompanyInventDim, InventDimId),                        fieldStr(InterCompanyInventDim, InterCompanyCompanyId),        1]);
        tableList.addEnd([tableNum(InterCompanyInventSum),                   fieldStr(InterCompanyInventSum, InventDimId),                        fieldStr(InterCompanyInventSum, InterCompanyCompanyId),        1]);
        tableList.addEnd([tableNum(InventBatchJournalResult),                fieldStr(InventBatchJournalResult, InventDimId),                     fieldStr(InventBatchJournalResult, DataAreaId),                1]);
        tableList.addEnd([tableNum(InventBatchJournalSource),                fieldStr(InventBatchJournalSource, InventDimId),                     fieldStr(InventBatchJournalSource, DataAreaId),                1]);
        tableList.addEnd([tableNum(InventTransferJourLine),                  fieldStr(InventTransferJourLine, InventDimId),                       fieldStr(InventTransferJourLine, DataAreaId),                  1]);
        tableList.addEnd([tableNum(RAssetScrap),                             fieldStr(RAssetScrap, InventDimId),                                  fieldStr(RAssetScrap, DataAreaId),                             2]);
        tableList.addEnd([tableNum(RetailItemOnHandQuantity),                fieldStr(RetailItemOnHandQuantity, InventDimId),                     fieldStr(RetailItemOnHandQuantity, DataAreaId),                2]);
        tableList.addEnd([tableNum(ReturnReplaceItemRef),                    fieldStr(ReturnReplaceItemRef, InventDimId),                         fieldStr(ReturnReplaceItemRef, DataAreaId),                    2]);
        tableList.addEnd([tableNum(WHSASNItem),                              fieldStr(WHSASNItem, InventDimId),                                   fieldStr(WHSASNItem, DataAreaId),                              2]);
        tableList.addEnd([tableNum(WHSContainerLine),                        fieldStr(WHSContainerLine, InventDimId),                             fieldStr(WHSContainerLine, DataAreaId),                        2]);
        tableList.addEnd([tableNum(WHSItemSamplingTracking),                 fieldStr(WHSItemSamplingTracking, InventDimId),                      fieldStr(WHSItemSamplingTracking, DataAreaId),                 3]);
        tableList.addEnd([tableNum(WHSLocationLimitVariant),                 fieldStr(WHSLocationLimitVariant, InventDimIdProductDim),            fieldStr(WHSLocationLimitVariant, DataAreaId),                 3]);
        tableList.addEnd([tableNum(WHSMixedLicensePlateReceiptLine),         fieldStr(WHSMixedLicensePlateReceiptLine, InventDimId),              fieldStr(WHSMixedLicensePlateReceiptLine, DataAreaId),         3]);
        tableList.addEnd([tableNum(WHSOrderCommittedReservationTransferred), fieldStr(WHSOrderCommittedReservationTransferred, InventDimId),      fieldStr(WHSOrderCommittedReservationTransferred, DataAreaId), 3]);
        tableList.addEnd([tableNum(WHSProductVariantFixedLocation),          fieldStr(WHSProductVariantFixedLocation, ProductVariantInventDimId), fieldStr(WHSProductVariantFixedLocation, DataAreaId),          3]);
        tableList.addEnd([tableNum(WHSReceiptDetails),                       fieldStr(WHSReceiptDetails, InventDimId),                            fieldStr(WHSReceiptDetails, DataAreaId),                       4]);
        tableList.addEnd([tableNum(WHSSlotDemand),                           fieldStr(WHSSlotDemand, InventDimId),                                fieldStr(WHSSlotDemand, DataAreaId),                           4]);
        tableList.addEnd([tableNum(WHSSlotDemandLocated),                    fieldStr(WHSSlotDemandLocated, InventDimId),                         fieldStr(WHSSlotDemandLocated, DataAreaId),                    4]);
        tableList.addEnd([tableNum(WHSWavePendingAllocation),                fieldStr(WHSWavePendingAllocation, InventDimIdAboveLocation),        fieldStr(WHSWavePendingAllocation, DataAreaId),                4]);
        tableList.addEnd([tableNum(WHSWorkFrozen),                           fieldStr(WHSWorkFrozen, FrozenWorkInventDimId),                      fieldStr(WHSWorkFrozen, DataAreaId),                           4]);
        tableList.addEnd([tableNum(WHSWorkLineCycleCount),                   fieldStr(WHSWorkLineCycleCount, InventDimId),                        fieldStr(WHSWorkLineCycleCount, DataAreaId),                   4]);

        // table list that have multiple fields extending EDT InventDimId, ensure that fileds in the same table are assigned into same thread
        tableList.addEnd([tableNum(InventInventoryDataServiceAdjustmentOffsetQueue), fieldStr(InventInventoryDataServiceAdjustmentOffsetQueue, InventDimId),
            fieldStr(InventInventoryDataServiceAdjustmentOffsetQueue, Company),                                                                                                               5]);
        tableList.addEnd([tableNum(InventInventoryDataServiceAdjustmentOffsetQueue), fieldStr(InventInventoryDataServiceAdjustmentOffsetQueue, OffsetInventDimId),
            fieldStr(InventInventoryDataServiceAdjustmentOffsetQueue, Company),                                                                                                               5]);
        tableList.addEnd([tableNum(InventJournalTrans),            fieldStr(InventJournalTrans, InventDimId),                            fieldStr(InventJournalTrans, DataAreaId),            5]);
        tableList.addEnd([tableNum(InventJournalTrans),            fieldStr(InventJournalTrans, ToInventDimId),                          fieldStr(InventJournalTrans, DataAreaId),            5]);
        tableList.addEnd([tableNum(InventQuarantineOrder),         fieldStr(InventQuarantineOrder, InventDimId),                         fieldStr(InventQuarantineOrder, DataAreaId),         5]);
        tableList.addEnd([tableNum(InventQuarantineOrder),         fieldStr(InventQuarantineOrder, InventDimIdQuarantine),               fieldStr(InventQuarantineOrder, DataAreaId),         5]);
        tableList.addEnd([tableNum(InventTransferLine),            fieldStr(InventTransferLine, InventDimId),                            fieldStr(InventTransferLine, DataAreaId),            6]);
        tableList.addEnd([tableNum(InventTransferLine),            fieldStr(InventTransferLine, InventDimIdTo_RU),                       fieldStr(InventTransferLine, DataAreaId),            6]);
        tableList.addEnd([tableNum(KanbanJob),                     fieldStr(KanbanJob, InventDimId),                                     fieldStr(KanbanJob, InventDimDataAreaId),            6]);
        tableList.addEnd([tableNum(KanbanJob),                     fieldStr(KanbanJob, IssueInventDimId),                                fieldStr(KanbanJob, IssueInventDimDataAreaId),       6]);
        tableList.addEnd([tableNum(MCROrderEventTable),            fieldStr(MCROrderEventTable, InventDimId),                            fieldStr(MCROrderEventTable, DataAreaId),            6]);
        tableList.addEnd([tableNum(MCROrderEventTable),            fieldStr(MCROrderEventTable, InventDimIdofAlternateItem),             fieldStr(MCROrderEventTable, DataAreaId),            6]);
        tableList.addEnd([tableNum(RetailTransactionSalesTrans),   fieldStr(RetailTransactionSalesTrans, InventDimId),                   fieldStr(RetailTransactionSalesTrans, DataAreaId),   7]);
        tableList.addEnd([tableNum(RetailTransactionSalesTrans),   fieldStr(RetailTransactionSalesTrans, ReturnInventDimId),             fieldStr(RetailTransactionSalesTrans, DataAreaId),   7]);
        tableList.addEnd([tableNum(WHSCatchWeightTag),             fieldStr(WHSCatchWeightTag, InventDimId),                             fieldStr(WHSCatchWeightTag, DataAreaId),             7]);
        tableList.addEnd([tableNum(WHSCatchWeightTag),             fieldStr(WHSCatchWeightTag, ProductDimensionInventDimId),             fieldStr(WHSCatchWeightTag, DataAreaId),             7]);
        tableList.addEnd([tableNum(WHSCatchWeightTagRegistration), fieldStr(WHSCatchWeightTagRegistration, InventDimId),                 fieldStr(WHSCatchWeightTagRegistration, DataAreaId), 7]);
        tableList.addEnd([tableNum(WHSCatchWeightTagRegistration), fieldStr(WHSCatchWeightTagRegistration, ProductDimensionInventDimId), fieldStr(WHSCatchWeightTagRegistration, DataAreaId), 7]);
        tableList.addEnd([tableNum(WHSContainerTrans),             fieldStr(WHSContainerTrans, InventDimIdFrom),                         fieldStr(WHSContainerTrans, DataAreaId),             8]);
        tableList.addEnd([tableNum(WHSContainerTrans),             fieldStr(WHSContainerTrans, InventDimIdTo),                           fieldStr(WHSContainerTrans, DataAreaId),             8]);
        tableList.addEnd([tableNum(WHSReservationRemoveHistory),   fieldStr(WHSReservationRemoveHistory, InventDimId),                   fieldStr(WHSReservationRemoveHistory, DataAreaId),   8]);
        tableList.addEnd([tableNum(WHSReservationRemoveHistory),   fieldStr(WHSReservationRemoveHistory, SourceInventDimId),             fieldStr(WHSReservationRemoveHistory, DataAreaId),   8]);
        tableList.addEnd([tableNum(WHSShipmentExceptionLog),       fieldStr(WHSShipmentExceptionLog, InventDimIdFrom),                   fieldStr(WHSShipmentExceptionLog, DataAreaId),       8]);
        tableList.addEnd([tableNum(WHSShipmentExceptionLog),       fieldStr(WHSShipmentExceptionLog, InventDimIdTo),                     fieldStr(WHSShipmentExceptionLog, DataAreaId),       8]);
        tableList.addEnd([tableNum(WHSTmpWorkLine),                fieldStr(WHSTmpWorkLine, InventDimId),                                fieldStr(WHSTmpWorkLine, DataAreaId),                9]);
        tableList.addEnd([tableNum(WHSTmpWorkLine),                fieldStr(WHSTmpWorkLine, OrderCommittedInventDimId),                  fieldStr(WHSTmpWorkLine, DataAreaId),                9]);
        tableList.addEnd([tableNum(WHSWorkInventTrans),            fieldStr(WHSWorkInventTrans, InventDimIdFrom),                        fieldStr(WHSWorkInventTrans, DataAreaId),            9]);
        tableList.addEnd([tableNum(WHSWorkInventTrans),            fieldStr(WHSWorkInventTrans, InventDimIdTo),                          fieldStr(WHSWorkInventTrans, DataAreaId),            9]);
        tableList.addEnd([tableNum(WHSWorkLine),                   fieldStr(WHSWorkLine, InventDimId),                                   fieldStr(WHSWorkLine, DataAreaId),                   9]);
        tableList.addEnd([tableNum(WHSWorkLine),                   fieldStr(WHSWorkLine, OrderCommittedInventDimId),                     fieldStr(WHSWorkLine, DataAreaId),                   9]);
        tableList.addEnd([tableNum(WHSWorkQuarantine),             fieldStr(WHSWorkQuarantine, InventDimIdFrom),                         fieldStr(WHSWorkQuarantine, DataAreaId),             10]);
        tableList.addEnd([tableNum(WHSWorkQuarantine),             fieldStr(WHSWorkQuarantine, InventDimIdTo),                           fieldStr(WHSWorkQuarantine, DataAreaId),             10]);
        tableList.addEnd([tableNum(WMSOrder),                      fieldStr(WMSOrder, InventDimId),                                      fieldStr(WMSOrder, DataAreaId),                      10]);
        tableList.addEnd([tableNum(WMSOrder),                      fieldStr(WMSOrder, toInventDimId),                                    fieldStr(WMSOrder, DataAreaId),                      10]);
        tableList.addEnd([tableNum(WMSOrderTrans),                 fieldStr(WMSOrderTrans, InventDimId),                                 fieldStr(WMSOrderTrans, DataAreaId),                 10]);
        tableList.addEnd([tableNum(WMSOrderTrans),                 fieldStr(WMSOrderTrans, toInventDimId),                               fieldStr(WMSOrderTrans, DataAreaId),                 10]);

        _result.result(tableList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableWithInventDimIdDiscoveredInventDimLPArchiveDelegateHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// List all tables have fields extending EDT InventDimId
    ///     For tables whose InventDimId fields are included in an unique index: it is potentially to encounter a duplicate key error,
    ///         please add the table in method tableListWithInventDimIdUniqueIdxOrMultiFieldsDelegate() above and assign a thread number.
    ///     For tables that have multiple InventDimId fields: it is potentially to encounter a deadlock error,
    ///         please also add the table in method tableListWithInventDimIdUniqueIdxOrMultiFieldsDelegate() above and assign a thread number.
    ///     For other tables:
    ///         please evaluate whether it is a crucial to update accordingly. If yes, add a new case to handle it.
    /// </summary>
    /// <param name = "_refTableTableId">reference table id</param>
    /// <param name = "_inventDimIdFieldId">field id that extending EDT InventDimId</param>
    /// <param name = "_result">container of tableId, InventDimIdFieldId, DataareaIdFieldId</param>
    [SubscribesTo(classStr(inventDimLPCleanupProcessTask), delegateStr(inventDimLPCleanupProcessTask, tableWithInventDimIdDiscoveredDelegate))]
    public static void tableWithInventDimIdDiscoveredInventDimLPArchiveDelegateHandler(
        TableId _refTableTableId,
        FieldId _inventDimIdFieldId,
        EventHandlerResult _result)
    {
        if (_result.hasResult()) //somebody else has already handled this so just exit
        {
            return;
        }

        switch (_refTableTableId)
        {
            case tableNum(MCRHistSalesLine):
                if (_inventDimIdFieldId == fieldNum(MCRHistSalesLine, InventDimId))
                {
                    _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(MCRHistSalesLine, DataAreaId)]);
                }
                else
                {
                    // MCRHistSalesLine.MCRInventDimIdOrig does not need update
                }
                break;
            case tableNum(AssetComponent_JP) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(AssetComponent_JP, DataAreaId)]);
                break;
            case tableNum(BOMParmReportFinish):
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(BOMParmReportFinish, DataAreaId)]);
                break;
            case tableNum(ConsignmentProductReceiptJournalLine) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(ConsignmentProductReceiptJournalLine, DataAreaId)]);
                break;
            case tableNum(ConsignmentReplenishmentOrderLine) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(ConsignmentReplenishmentOrderLine, DataAreaId)]);
                break;
            case tableNum(CustConfirmTrans) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(CustConfirmTrans, DataAreaId)]);
                break;
            case tableNum(CustInvoiceBackorderLine) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(CustInvoiceBackorderLine, DataAreaId)]);
                break;
            case tableNum(CustInvoiceTrans) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(CustInvoiceTrans, DataAreaId)]);
                break;
            case tableNum(CustomsInvoiceRegnJournalLine_IN):
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(CustomsInvoiceRegnJournalLine_IN, DataAreaId)]);
                break;
            case tableNum(CustomJournalTrans_RU) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(CustomJournalTrans_RU, DataAreaId)]);
                break;
            case tableNum(CustomsShippingBillTrans_IN) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(CustomsShippingBillTrans_IN, DataAreaId)]);
                break;
            case tableNum(CustomsVendBOETrans_IN) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(CustomsVendBOETrans_IN, DataAreaId)]);
                break;
            case tableNum(CustPackingSlipBackorderLine) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(CustPackingSlipBackorderLine, DataAreaId)]);
                break;
            case tableNum(CustPackingSlipTrans) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(CustPackingSlipTrans, DataAreaId)]);
                break;
            case tableNum(FactureTrans_RU) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(FactureTrans_RU, DataAreaId)]);
                break;
            case tableNum(InventBatchJournal) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(InventBatchJournal, DataAreaId)]);
                break;
            case tableNum(InventBlocking) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(InventBlocking, DataAreaId)]);
                break;
            case tableNum(InventCountJour) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(InventCountJour, DataAreaId)]);
                break;
            case tableNum(InventInventoryDataServiceInventSumQueue) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(InventInventoryDataServiceInventSumQueue, Company)]);
                break;
            case tableNum(InventInventoryDataServiceInventSumQueueBackup) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(InventInventoryDataServiceInventSumQueueBackup, Company)]);
                break;
            case tableNum(InventInventoryDataServiceInventSumQueueTemp) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(InventInventoryDataServiceInventSumQueueTemp, Company)]);
                break;
            case tableNum(InventInventoryDataServiceOnhandAdjustmentQueue) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(InventInventoryDataServiceOnhandAdjustmentQueue, Company)]);
                break;
            case tableNum(InventInventoryDataServiceOnhandAdjustmentQueueTemp) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(InventInventoryDataServiceOnhandAdjustmentQueueTemp, Company)]);
                break;
            case tableNum(InventInventoryDataServiceReservationQueue) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(InventInventoryDataServiceReservationQueue, Company)]);
                break;
            case tableNum(InventInventoryDataServiceReservationQueueBackup) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(InventInventoryDataServiceReservationQueueBackup, Company)]);
                break;
            case tableNum(InventInventoryDataServiceReservationQueuePartialSuccess) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(InventInventoryDataServiceReservationQueuePartialSuccess, Company)]);
                break;
            case tableNum(InventInventoryDataServiceReservationQueueTemp) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(InventInventoryDataServiceReservationQueueTemp, Company)]);
                break;
            case tableNum(InventInventoryDataServiceSoftReserveHistory) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(InventInventoryDataServiceSoftReserveHistory, DataAreaId)]);
                break;
            case tableNum(InventInventoryDataServiceSoftReserveQueue) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(InventInventoryDataServiceSoftReserveQueue, DataAreaId)]);
                break;
            case tableNum(InventInventoryDataServiceSoftReserveQueueBackup) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(InventInventoryDataServiceSoftReserveQueueBackup, DataAreaId)]);
                break;
            case tableNum(InventInventoryDataServiceSoftReserveQueueTemp) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(InventInventoryDataServiceSoftReserveQueueTemp, DataAreaId)]);
                break;
            case tableNum(InventInventoryDataServiceWHSQueue) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(InventInventoryDataServiceWHSQueue, Company)]);
                break;
            case tableNum(InventInventoryDataServiceWHSQueueBackup) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(InventInventoryDataServiceWHSQueueBackup, Company)]);
                break;
            case tableNum(InventInventoryDataServiceWHSQueueTemp) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(InventInventoryDataServiceWHSQueueTemp, Company)]);
                break;
            case tableNum(InventInventoryDataServiceOnhandChangeScheduleQueue) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(InventInventoryDataServiceOnhandChangeScheduleQueue, Company)]);
                break;
            case tableNum(InventInventoryDataServiceOnhandChangeScheduleQueueTemp) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(InventInventoryDataServiceOnhandChangeScheduleQueueTemp, Company)]);
                break;
            case tableNum(InventInventoryDataServiceJournalTransStatusQueue) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(InventInventoryDataServiceJournalTransStatusQueue, Company)]);
                break;
            case tableNum(InventJournalTrans_Tag) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(InventJournalTrans_Tag, DataAreaId)]);
                break;
            case tableNum(InventNonConformanceTable) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(InventNonConformanceTable, DataAreaId)]);
                break;
            case tableNum(InventOnhandStorageReportLine) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(InventOnhandStorageReportLine, DataAreaId)]);
                break;
            case tableNum(InventPackagingMaterialTrans) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(InventPackagingMaterialTrans, DataAreaId)]);
                break;
            case tableNum(InventQualityOrderTable) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(InventQualityOrderTable, DataAreaId)]);
                break;
            case tableNum(InventSiteGateEntryLine_IN) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(InventSiteGateEntryLine_IN, DataAreaId)]);
                break;
            case tableNum(InventTestCertOfAnalysisTable) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(InventTestCertOfAnalysisTable, DataAreaId)]);
                break;
            case tableNum(InventTrackingRegisterTrans):
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(InventTrackingRegisterTrans, DataAreaId)]);
                break;
            case tableNum(KanbanJobPickingList) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(KanbanJobPickingList, ItemDataAreaId)]);
                break;
            case tableNum(KanbanJobPickingListReversal):
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(KanbanJobPickingListReversal, InventDimDataAreaId)]);
                break;
            case tableNum(PmfProdCoBy) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(PmfProdCoBy, DataAreaId)]);
                break;
            case tableNum(ProdBOM) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(ProdBOM, DataAreaId)]);
                break;
            case tableNum(ProdBOMTransProj) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(ProdBOMTransProj, DataAreaId)]);
                break;
            case tableNum(ProdCalcTrans):
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(ProdCalcTrans, DataAreaId)]);
                break;
            case tableNum(ProdJournalBOM) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(ProdJournalBOM, DataAreaId)]);
                break;
            case tableNum(ProdJournalProd) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(ProdJournalProd, DataAreaId)]);
                break;
            case tableNum(ProdJournalRelease_RU) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(ProdJournalRelease_RU, DataAreaId)]);
                break;
            case tableNum(ProdJournalRoute):
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(ProdJournalRoute, DataAreaId)]);
                break;
            case tableNum(ProdParmReportFinished):
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(ProdParmReportFinished, DataAreaId)]);
                break;
            case tableNum(ProdReleaseTrans_RU) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(ProdReleaseTrans_RU, DataAreaId)]);
                break;
            case tableNum(ProdTable) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(ProdTable, DataAreaId)]);
                break;
            case tableNum(ProdAsBuiltBOMProductLotAssociation) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(ProdAsBuiltBOMProductLotAssociation, DataAreaId)]);
                break;
            case tableNum(ProdAsBuiltBOMComponentLotAssociation) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(ProdAsBuiltBOMComponentLotAssociation, DataAreaId)]);
                break;
            case tableNum(ProjInvoiceItem):
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(ProjInvoiceItem, DataAreaId)]);
                break;
            case tableNum(ProjItemTrans) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(ProjItemTrans, DataAreaId)]);
                break;
            case tableNum(ProjPostedTransTable) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(ProjPostedTransTable, DataAreaId)]);
                break;
            case tableNum(PurchLine) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(PurchLine, DataAreaId)]);
                break;
            case tableNum(PurchRFQCaseLine) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(PurchRFQCaseLine, DataAreaId)]);
                break;
            case tableNum(PurchRFQLine) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(PurchRFQLine, DataAreaId)]);
                break;
            case tableNum(RAssetInventIssueTrans) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(RAssetInventIssueTrans, DataAreaId)]);
                break;
            case tableNum(RetailInventItemLabel):
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(RetailInventItemLabel, DataAreaId)]);
                break;
            case tableNum(SalesBasketLine) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(SalesBasketLine, DataAreaId)]);
                break;
            case tableNum(SalesComplementaryInvoiceLine) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(SalesComplementaryInvoiceLine, DataAreaId)]);
                break;
            case tableNum(SalesLine) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(SalesLine, DataAreaId)]);
                break;
            case tableNum(SalesLineDelete) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(SalesLineDelete, DataAreaId)]);
                break;
            case tableNum(SalesQuotationBasketLine) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(SalesQuotationBasketLine, DataAreaId)]);
                break;
            case tableNum(SalesQuotationLine) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(SalesQuotationLine, DataAreaId)]);
                break;
            case tableNum(SMAServiceOrderLine) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(SMAServiceOrderLine, DataAreaId)]);
                break;
            case tableNum(SMATemplateBOMTable) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(SMATemplateBOMTable, DataAreaId)]);
                break;
            case tableNum(SMAAgreementLine) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(SMAAgreementLine, DataAreaId)]);
                break;
            case tableNum(VendInvoice4PaymTrans_RU) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(VendInvoice4PaymTrans_RU, DataAreaId)]);
                break;
            case tableNum(VendInvoiceInfoLine) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(VendInvoiceInfoLine, DataAreaId)]);
                break;
            case tableNum(VendInvoiceTrans) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(VendInvoiceTrans, DataAreaId)]);
                break;
            case tableNum(VendPackingSlipTrans) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(VendPackingSlipTrans, DataAreaId)]);
                break;
            case tableNum(VendReceiptsListTrans):
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(VendReceiptsListTrans, DataAreaId)]);
                break;
            case tableNum(VendRFQTrans) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(VendRFQTrans, DataAreaId)]);
                break;
            case tableNum(WHSContainerTable):
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(WHSContainerTable, DataAreaId)]);
                break;
            case tableNum(WHSCrossDockOpportunity):
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(WHSCrossDockOpportunity, DataAreaId)]);
                break;
            case tableNum(WHSDimTracking) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(WHSDimTracking, DataAreaId)]);
                break;
            case tableNum(WHSJourLoadLine):
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(WHSJourLoadLine, DataAreaId)]);
                break;
            case tableNum(WHSInventoryUpdateLog):
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(WHSInventoryUpdateLog, DataAreaId)]);
                break;
            case tableNum(WHSKanbanJobPickingListPool):
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(WHSKanbanJobPickingListPool, DataAreaId)]);
                break;
            case tableNum(WHSLoadLine) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(WHSLoadLine, DataAreaId)]);
                break;
            case tableNum(WHSLocationDirectiveAcceptanceTest):
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(WHSLocationDirectiveAcceptanceTest, DataAreaId)]);
                break;
            case tableNum(WHSLocationDirectiveAcceptanceTestInventAdjustment):
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(WHSLocationDirectiveAcceptanceTestInventAdjustment, DataAreaId)]);
                break;
            case tableNum(WHSMobileDeviceQueueInventoryMovementMessage):
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(WHSMobileDeviceQueueInventoryMovementMessage, DataAreaId)]);
                break;
            case tableNum(WHSOrderCommittedReservation):
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(WHSOrderCommittedReservation, DataAreaId)]);
                break;
            case tableNum(WHSOutboundSortPositionTrans):
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(WHSOutboundSortPositionTrans, DataAreaId)]);
                break;
            case tableNum(WHSOutboundSortRFInstruction):
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(WHSOutboundSortRFInstruction, DataAreaId)]);
                break;
            case tableNum(WHSProdBOMPool):
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(WHSProdBOMPool, DataAreaId)]);
                break;
            case tableNum(WHSProdPickQtyAllocation):
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(WHSProdPickQtyAllocation, DataAreaId)]);
                break;
            case tableNum(WHSQualityOrderInventory):
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(WHSQualityOrderInventory, DataAreaId)]);
                break;
            case tableNum(WHSReturnLineDetail):
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(WHSReturnLineDetail, DataAreaId)]);
                break;
            case tableNum(WHSTmpWorkLineHistory):
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(WHSTmpWorkLineHistory, DataAreaId)]);
                break;
            case tableNum(WHSWaveAllocationProcessingLog):
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(WHSWaveAllocationProcessingLog, DataAreaId)]);
                break;
            case tableNum(WHSWaveReplenTmpWorkLineLog):
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(WHSWaveReplenTmpWorkLineLog, DataAreaId)]);
                break;
            case tableNum(WHSWaveReplenWorkLineLog):
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(WHSWaveReplenWorkLineLog, DataAreaId)]);
                break;
            case tableNum(WHSWorker):
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(WHSWorker, DataAreaId)]);
                break;
            case tableNum(WHSWorkTrans) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(WHSWorkTrans, DataAreaId)]);
                break;
            case tableNum(WMSJournalTable) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(WMSJournalTable, DataAreaId)]);
                break;
            case tableNum(WMSJournalTrans) :
                _result.result([_refTableTableId, _inventDimIdFieldId, fieldNum(WMSJournalTrans, DataAreaId)]);
                break;

            // Already handled in method tableListWithInventDimIdUniqueIdxOrMultiFieldsDelegate
            // table list that have unique indexes include InventDimId
            case tableNum(InterCompanyInventDim):
            case tableNum(InterCompanyInventSum):
            case tableNum(InventBatchJournalResult):
            case tableNum(InventBatchJournalSource):
            case tableNum(InventReportDimHistory):
            case tableNum(InventTransferJourLine):
            case tableNum(RAssetScrap):
            case tableNum(RetailItemOnHandQuantity):
            case tableNum(ReturnReplaceItemRef):
            case tableNum(WHSASNItem):
            case tableNum(WHSContainerLine):
            case tableNum(WHSItemSamplingTracking):
            case tableNum(WHSLocationLimitVariant):
            case tableNum(WHSMixedLicensePlateReceiptLine):
            case tableNum(WHSOrderCommittedReservationTransferred):
            case tableNum(WHSProductVariantFixedLocation):
            case tableNum(WHSReceiptDetails):
            case tableNum(WHSSlotDemand):
            case tableNum(WHSSlotDemandLocated):
            case tableNum(WHSWavePendingAllocation):
            case tableNum(WHSWorkFrozen):
            case tableNum(WHSWorkInventTrans):
            case tableNum(WHSWorkLineCycleCount):

            // table list that have multiple fields extending EDT InventDimId
            case tableNum(InventInventoryDataServiceAdjustmentOffsetQueue):
            case tableNum(InventJournalTrans):
            case tableNum(InventQuarantineOrder):
            case tableNum(InventTransferLine):
            case tableNum(KanbanJob):
            case tableNum(MCROrderEventTable):
            case tableNum(RetailTransactionSalesTrans):
            case tableNum(WHSCatchWeightTag):
            case tableNum(WHSCatchWeightTagRegistration):
            case tableNum(WHSContainerTrans):
            case tableNum(WHSReservationRemoveHistory):
            case tableNum(WHSShipmentExceptionLog):
            case tableNum(WHSTmpWorkLine):
            case tableNum(WHSWorkLine):
            case tableNum(WHSWorkQuarantine):
            case tableNum(WMSOrder):
            case tableNum(WMSOrderTrans):

            // No need to handle
            case tableNum(AgreementLine):
            case tableNum(AgreementLineHistory):
            case tableNum(BOM):
            case tableNum(BOMCalcItemInventoryDimensionTask):
            case tableNum(BOMCalcTable):
            case tableNum(BOMCalcTrans):
            case tableNum(BOMVersion):
            //case tableNum(BundleSalesInvoiceBundleParentLineStaging):
            //case tableNum(BundleSalesInvoiceLineStaging):
            case tableNum(BusinessDocumentSalesInvoiceLineItemStaging):
            //case tableNum(CASBOMCalcDetailsQueueV1):
            //case tableNum(CASInventoryTransactionQueueV2):
            //case tableNum(CASProdCalcTransQueueV1):
            //case tableNum(CASProdIndirectCostRevaluationQueueV1):
            //case tableNum(CASProdMaterialCostRevaluationQueueV1):
            case tableNum(ConsignmentDraftReplenishmentOrderJournalLine):
            case tableNum(CostEntryTable):
            case tableNum(CustInvoice4PaymTrans_RU):
            case tableNum(CustQuotationConfirmTrans):
            case tableNum(CustQuotationTrans):
            case tableNum(CustVendExternalItem):
            //case tableNum(DOMItemInventLocation):
            //case tableNum(DOMLogs):
            //case tableNum(DOMMinInventRuleForProductInventLoc):
            //case tableNum(DOMResults):
            //case tableNum(DOMSalesLineToProcess):
            //case tableNum(EngChgEcmProduct):
            //case tableNum(EngChgEcmProductBOM):
            //case tableNum(EngChgEcmProductFormulaCoBy):
            //case tableNum(EngChgInventVersionDimensionMigrationUpgradeHashCode):
            //case tableNum(EngChgProductReadinessCheck):
            //case tableNum(EngChgReleasedProductVersion):
            //case tableNum(EntAssetObjectBOM):
            case tableNum(EGAISWaybillSettlement_RU):
            case tableNum(EPPriceCalc):
            //case tableNum(FBICMSSTInventoryBalance_BR):
            case tableNum(ForecastInvent):
            case tableNum(ForecastItemAllocationLine):
            case tableNum(ForecastPurch):
            case tableNum(ForecastSales):
            //case tableNum(FulfillmentPlanInputLine):
            //case tableNum(GUPBasePriceCalcItemInventDimensionTask):
            //case tableNum(GUPCalcChargeCode):
            //case tableNum(GUPFreeItemLine):
            //case tableNum(GUPFreeItemLineInquiryResult):
            //case tableNum(GUPItemBasePrice):
            //case tableNum(GUPItemBasePriceActiveStaging):
            //case tableNum(GUPItemBasePriceCalcTable):
            //case tableNum(GUPItemBasePriceDelta):
            //case tableNum(GUPItemBasePriceSim):
            //case tableNum(GUPItemBasePriceValid):
            //case tableNum(GUPPriceReportVersion):
            //case tableNum(GUPPriceTermJournalTrans):
            //case tableNum(GUPPricingSimulatorBasePrice):
            //case tableNum(GUPRetailPeriodicDiscountLineInquiryResult):
            //case tableNum(GUPriceReportItemTask):
            //case tableNum(GUPriceReportItemTaskWithDimensions):
            //case tableNum(GUPTradeAgreementInquiryResult):
            //case tableNum(GUPVendPriceAdmTrans):
            case tableNum(InventByProductTable_RU):
            case tableNum(InventByProductTableStaging):
            case tableNum(InventCostTmpTransBreakdown):
            case tableNum(InventCostTrans):
            case tableNum(InventCostTransSum):
            case tableNum(InventDim) :
            case tableNum(InventDimCleanUp):
            case tableNum(InventDimCombination):
            case tableNum(InventDimUpgradeHash3Code):
            case tableNum(InventDistinctProduct):
            case tableNum(InventItemBarcode):
            case tableNum(InventItemGTIN):
            //case tableNum(InventItemInventoryDimensionChange):
            case tableNum(InventItemInventSetup):
            case tableNum(InventItemLocation):
            case tableNum(InventItemLocationCountingStatus):
            case tableNum(InventItemPrice):
            case tableNum(InventItemPriceCompareStorageDetails):
            case tableNum(InventItemPriceSim):
            case tableNum(InventItemPurchSetup):
            case tableNum(InventItemSalesSetup):
            case tableNum(InventJournalTransHistory):
            case tableNum(InventPackagingUnit):
            case tableNum(InventProductDefaultOrderSettingsStaging):
            case tableNum(InventSum) :
            case tableNum(InventSumDateTrans) :
            case tableNum(InventSumDelta):
            case tableNum(InventSumDeltaDim):
            case tableNum(InventSumLogTTS) :
            case tableNum(InventTrans) :
            case tableNum(InventTransArchive):
            case tableNum(InventTransArchiveHistory):
            case tableNum(InventTransArchiveTask):
            case tableNum(InventTransferParmLine):
            case tableNum(InventTransOrigin):
            //case tableNum(InventTransScaleUnitTroubleshootingLog):
            //case tableNum(ITMCostAutoTable):
            //case tableNum(ITMCostEstimateLine):
            //case tableNum(ITMGoodsInTransitOrder):
            //case tableNum(ITMLine):
            //case tableNum(ITMOverUnderTrans):
            //case tableNum(ITMOverUnderTransLine):
            //case tableNum(ITMParmGoodsInTransitOrder):
            case tableNum(JmgProdParametersDim):
            case tableNum(JmgSerialNumberSpecification):
            case tableNum(Kanban) :
            case tableNum(KanbanJobStatusUpdate):
            case tableNum(KanbanStatusUpdate):
            //case tableNum(KittingDynKitPartDefault):
            //case tableNum(KittingKitCalcTable):
            //case tableNum(KittingKitCalcTrans):
            //case tableNum(KittingKitPrice):
            //case tableNum(KittingKitVersion):
            //case tableNum(KittingWMSBillOfLadingRef):
            case tableNum(LeanCoverage):
            case tableNum(LeanProdFlowActivityPickingLocation):
            case tableNum(LeanProductionFlowCostingUnusedQty):
            case tableNum(LeanScheduleGroupEntrySingle):
            case tableNum(LvNRTaxTrans):
            case tableNum(MCRContinuityCustLine):
            case tableNum(MCRContinuityScheduleLine):
            case tableNum(MCRItemListLine):
            case tableNum(MCRItemSalesControl):
            case tableNum(MCRPickingWorkbenchWaveTrans):
            case tableNum(MCRPriceDiscGroupItem):
            case tableNum(MCRPriceHistory):
            case tableNum(MCRRoyaltyItemCode):
            case tableNum(MCRRoyaltyItemTable):
            //case tableNum(MpsMultiSourcePolicyAssignment):
            //case tableNum(MrpPerfSales):
            case tableNum(PCConfigurationReuse):
            case tableNum(PdsComdPricingMarginLine):
            case tableNum(PdsComdPricingRunLine):
            case tableNum(PdsComdPricingTemplateLine):
            case tableNum(PdsCustSellableDays):
            case tableNum(PdsRebateAgreement):
            case tableNum(PdsRebateAgreementLine):
            case tableNum(PdsRebateItem):
            case tableNum(PlanActivityService):
            case tableNum(PlanActivityServiceOutputItem):
            case tableNum(PmfCoByProdCalcTrans):
            case tableNum(PmfFormulaCoBy):
            case tableNum(PriceDiscAdmTrans):
            case tableNum(PriceDiscTable):
            case tableNum(ProdBOMParmChangeItem):
            case tableNum(ProdParametersDim):
            case tableNum(ProdPickListTmp):
            case tableNum(ProdRouteTrans):
            case tableNum(ProdStatusParameters):
            case tableNum(ProjAdjustmentCreateInProcess):
            case tableNum(ProjAdjustmentInProcess):
            case tableNum(ProjAdvancedJournalLine):
            case tableNum(ProjBudgetLineDetail):
            case tableNum(ProjectItemJournalTransStaging):
            case tableNum(ProjForecastSalesStaging):
            case tableNum(PSAActivityEstimates):
            case tableNum(PurchaseOrderResponseLine):
            case tableNum(PurchaseOrderResponseLineHistory):
            case tableNum(PurchComplementaryInvoiceLine):
            case tableNum(PurchLineHistory):
            case tableNum(PurchParmLine):
            case tableNum(PurchPurchaseOrderLineV2ExistAddrReadOnlyStaging):
            case tableNum(PurchReqLine):
            case tableNum(PurchReqLineHistory):
            case tableNum(PurchRFQParmLine):
            //case tableNum(ReqDecouplingPointHistory):
            //case tableNum(ReqDecouplingPointPeriodSettings):
            case tableNum(ReqDemPlanBlankDimensions):
            case tableNum(ReqDemPlanCubeStagingTable):
            case tableNum(ReqItemCoverageSettingsV2Staging):
            case tableNum(ReqItemCoverageWithDerivedSettingsStaging):
            //case tableNum(ReqItemDecoupledLeadTime):
            case tableNum(ReqItemJournalTrans):
            case tableNum(ReqItemTable):
            case tableNum(ReqPO):
            case tableNum(ReqTrans):
            case tableNum(ReqTransCovKeep):
            case tableNum(ReqTransReceiptCov):
            case tableNum(RetailAssortmentExploded):
            case tableNum(RetailBuyersPushLine):
            case tableNum(RetailBuyersPushLineStaging):
            case tableNum(RetailCategoryPriceRule):
            case tableNum(RetailCrossDockLineStaging):
            case tableNum(RetailDlvModeProductExploded):
            //case tableNum(RetailEodTransactionSalesTrans):
            //case tableNum(RetailEodTransactionSalesTransHistory):
            case tableNum(RetailGroupMemberLine):
            case tableNum(RetailInventDimSHA1HashTableLegacy):
            case tableNum(RetailPackageLines):
            case tableNum(RetailPeriodicDiscountLine):
            case tableNum(RetailPricingSimulatorPriceDiscTable):
            case tableNum(RetailPricingSimulatorSalesLine):
            case tableNum(RetailProductListingStatus):
            case tableNum(RetailTmpOrderItem):
            case tableNum(RetailTransactionSalesTransHistory):
            case tableNum(ReturnActionDefaults):
            //case tableNum(RevRecDeferredLine):
            //case tableNum(RevRecDeferredLineStaging):
            case tableNum(RouteVersion):
            //case tableNum(SalesBundleParent):
            case tableNum(SalesInvoiceLineStaging):
            case tableNum(SalesInvoiceLineV2Staging):
            case tableNum(SalesInvoiceLineV3Staging):
            case tableNum(SalesInvoiceLineV4Staging):
            case tableNum(SalesLineHistory) :
            case tableNum(SalesParmLine):
            case tableNum(SalesParmSubLine):
            case tableNum(SalesQuotationParmLine):
            case tableNum(SMAServiceBOMTable):
            case tableNum(SMAServiceObjectRelation):
            case tableNum(SMAServiceObjectTable):
            //case tableNum(SubBillSalesLineConsolidated):
            //case tableNum(SubBillScheduleLine):
            case tableNum(SuppItemTable):
            //case tableNum(SysDataExpInventDimTest):
            //case tableNum(SysDataExpTestItemSetup):
            //case tableNum(SysDataExpTestPurchSetup):
            case tableNum(TAMFundInvent):
            case tableNum(TAMPromotionItem):
            //case tableNum(TAMRebateLineItem):
            //case tableNum(TAMRebateTable):
            //case tableNum(TAMRebateTrans):
            //case tableNum(TAMRebateTransItem):
            case tableNum(TAMVendRebateAgreement):
            case tableNum(TAMVendRebateAgreementLine):
            case tableNum(TAMVendRebateItem):
            case tableNum(TaxOnNaturalResourcesStaging):
            case tableNum(TMSTransportRequestLine):
            case tableNum(TransferPrice_IN):
            case tableNum(VendInvoiceInfo):
            case tableNum(VendorInvoiceLineStaging):
            case tableNum(WHSInventReserve):
            case tableNum(WHSInventReserveDelta):
            case tableNum(WHSExternalInventoryAdjustment):
            case tableNum(WHSExternalInventoryAdjustmentArchive):
            case tableNum(WHSReturnLineDetailStaging):
            case tableNum(WrkCtrParametersDim):
                _result.result(false);
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>