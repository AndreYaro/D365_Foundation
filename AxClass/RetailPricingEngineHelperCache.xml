<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPricingEngineHelperCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class provides caching for RetailPricingEngine.
/// </summary>
internal class RetailPricingEngineHelperCache
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isPriceOverriddenForSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine whether a sales line is price overridden.
    /// </summary>
    /// <param name = "salesLine">The SalesLine.</param>
    /// <param name = "mcrSalesLinePriceOverride">The MCRSalesLinePriceOverride.</param>
    /// <param name = "retailSalesLineLocal">The RetailSalesLine.</param>
    /// <returns>1 if price overridden; otherwise, 0.</returns>
    internal static int isPriceOverriddenForSalesLine(SalesLine salesLine, MCRSalesLinePriceOverride mcrSalesLinePriceOverride, RetailSalesLine retailSalesLineLocal)
    {
        PriceDiscPolicyCheckPolicy checkPolicy = PriceDiscPolicyCheckPolicy::newFromParm(salesline);
        boolean isPriceOverridden = checkPolicy.hasManualPolicyField(PriceDiscPolicyField::newPriceDiscResultsField(fieldNum(PriceDiscResultFields, Price)));

        if (retailSalesLineLocal.IsPriceKeyedIn && RetailPricingSetIsPriceKeyedInFlight::instance().isEnabled())
        {
            return true;
        }

        return (mcrSalesLinePriceOverride.PriceOverride || retailSalesLineLocal.IsPriceOverridden || isPriceOverridden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeFromSalesLineMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove the key value pair from salesLineIsPriceOverriddenMap.
    /// </summary>
    /// <param name = "salesLineIsPriceOverriddenMap">The salesLineIsPriceOverriddenMap.</param>
    /// <param name = "removeSet">The set containing keys of each sales line of current sales order.</param>
    internal static void removeFromSalesLineMap(Map salesLineIsPriceOverriddenMap, Set removeSet)
    {
        SetEnumerator se = removeSet.getEnumerator();
        while (se.moveNext())
        {
            salesLineIsPriceOverriddenMap.remove(se.current());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheIsPriceOverriddenForSalesLineInMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cache the IsPriceOverridden value for each sales line of current sales order in Map salesLineIsPriceOverriddenMap.
    /// And cache the key in salesLineSet for future clean up.
    /// </summary>
    /// <param name = "_salesId">Sales Id.</param>
    /// <param name = "_currentSalesLine">Current sales line being edited.</param>
    /// <param name = "salesLineIsPriceOverriddenMap">The salesLineIsPriceOverriddenMap contains IsPriceOverridden value for each sales line.</param>
    /// <param name = "salesLineSet">The set contains the SalesLine.RecId of current SalesTable.</param>
    internal static void cacheIsPriceOverriddenForSalesLineInMap(
        SalesId _salesId,
        SalesPurchLine _currentSalesLine,
        Map salesLineIsPriceOverriddenMap,
        Set salesLineSet)
    {
        SalesLine salesLineLoc;
        RetailSalesLine retailSalesLineLocal;
        MCRSalesLinePriceOverride mcrSalesLinePriceOverrideLoc;
        while select salesLineLoc
            where salesLineLoc.SalesId == _salesId
            join retailSalesLineLocal
                where retailSalesLineLocal.SalesLine == salesLineLoc.RecId
            outer join mcrSalesLinePriceOverrideLoc
                where mcrSalesLinePriceOverrideLoc.SalesLine == salesLineLoc.RecId
        {
            if (!_currentSalesLine || salesLineLoc.RecId != _currentSalesLine.RecId)
            {
                str mapKey = RetailPricingEngineHelperCache::generateKeyForSalesLineInMap(salesLineLoc);
                salesLineIsPriceOverriddenMap.insert(
                    mapKey,
                    RetailPricingEngineHelperCache::isPriceOverriddenForSalesLine(salesLineLoc, mcrSalesLinePriceOverrideLoc, retailSalesLineLocal));
                salesLineSet.add(mapKey);
            }
            else if (_currentSalesLine)
            {
                // Use buffer of current sales line, whose latest value might not be yet persisted to DB.
                str mapKey = RetailPricingEngineHelperCache::generateKeyForSalesLineInMap(_currentSalesLine);

                salesLineIsPriceOverriddenMap.insert(
                    mapKey,
                    RetailPricingEngineHelperCache::isPriceOverriddenForSalesLine(_currentSalesLine, mcrSalesLinePriceOverrideLoc, retailSalesLineLocal));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateKeyForSalesLineInMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate key for salesLineIsPriceOverriddenMap.
    /// </summary>
    /// <param name = "_salesLine">The SalesLine.</param>
    /// <returns>The key in salesLineIsPriceOverriddenMap.</returns>
    internal static str generateKeyForSalesLineInMap(SalesLine _salesLine)
    {
        return int642Str(_salesLine.RecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>