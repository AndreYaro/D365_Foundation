<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TSTimesheetAutoPostBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Batch job to post all approved timesheets
/// </summary>
class TSTimesheetAutoPostBatch extends RunBaseBatch implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {

        TSTimesheetTable timesheet;
        TSTimesheetInstrumentationLogger postingLogger = TSTimesheetInstrumentationLogger::createLogger('TSTimesheetAutoPostBatch');
        TSTimesheetInstrumentationActivities postingActivities = TSTimesheetInstrumentationActivities::construct(postingLogger);
        TSTimesheetInstrumentationLoggerProperties properties = postingLogger.properties();

        using (var postingBatchContext = postingActivities.automaticPostingBatchJob())
        {
            int countProcessedTimesheets = 0, failedBudgetValidation = 0;
            while select timesheet  
                where timesheet.ApprovalStatus == TSAppStatus::Approved 
                   && timesheet.PostStatus == TSPostStatus::NotTransferred
            {
                try
                {
                    if (timesheet.validateBudget())
                    {
                        timesheet.createCommitmentCostRecords();
                        TSTimesheetsPost::post(timesheet);
                        countProcessedTimesheets++;
                    }
                    else
                    {
                        postingLogger.logWarning(strFmt('Budget validation failed for timesheet: %1', timesheet.TimesheetNbr));
                        failedBudgetValidation++;
                    }
                }
                catch
                {
                    Global::exceptionTextFallThrough();
                }
            }

            Map documentCount = new Map(Types::String, Types::Integer);
            documentCount.add(TSTimesheetInstrumentationLoggerProperties::CountTimesheetsProcessed, countProcessedTimesheets);
            documentCount.add(TSTimesheetInstrumentationLoggerProperties::CountFailedBudgetValidation, failedBudgetValidation);
            postingLogger.logSummary(postingActivities, postingBatchContext, properties, documentCount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static TSTimesheetAutoPostBatch construct()
    {
        TSTimesheetAutoPostBatch batch = new TSTimesheetAutoPostBatch();

        return batch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@Proj:TimesheetAutoPostBatch";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(xArgs _args)
    {
        var task = TSTimesheetAutoPostBatch::construct();

        if (task.prompt())
        {
            task.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>