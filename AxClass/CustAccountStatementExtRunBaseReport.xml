<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAccountStatementExtRunBaseReport</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustAccountStatementExtRunBaseReport extends RunbaseReportStd implements BatchRetryable
{
    container custAccountsRestriction;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>custAccountsRestriction</Name>
				<Source><![CDATA[
        container custAccountsRestriction(container _custAccountsRestriction = custAccountsRestriction)
    {
        if (_custAccountsRestriction != custAccountsRestriction)
        {
            custAccountsRestriction = _custAccountsRestriction;
        }
        return custAccountsRestriction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the last choice stored in the last value table.
    /// </summary>
    /// <remarks>
    /// If no record can be found or the <c>unpack</c> method returns false, the <c>initParmDefault</c>
    /// method will be called. This method should not typically be overridden.
    /// </remarks>
    public void getLast()
    {
        container previousAccountsRestriction;
        if (conlen(custAccountsRestriction))
        {
            // We want any restrictions passed in from the list pages to override
            // any restrictions coming from what was stored.
            previousAccountsRestriction = custAccountsRestriction;
        }
        super();
        this.setRanges(previousAccountsRestriction);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        void new()
    {
        super();
        this.CustAccountsRestriction(connull());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRange</Name>
				<Source><![CDATA[
        QueryBuildRange setRange(tableId tableId, fieldId fieldId, str value, RangeStatus rangeStatus = RangeStatus::Open)
    {
        QueryBuildRange ret;

        if (this.queryRun().query().dataSourceTable(tableId))
        {
            ret = queryRun.query().dataSourceTable(tableId).addRange(fieldId);

            ret.value(value);
            ret.status(rangeStatus);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRanges</Name>
				<Source><![CDATA[
        public void setRanges(container previousAccountsRestriction)
    {
        int loc;
        str account;
        QueryBuildRange range;
        if (conlen(previousAccountsRestriction))
        {
            // overwrite restrictions with what was passed in from the list pages.
            // Do not use any ranges which were previously saved. The ranges must match
            // what was passed in from the list page

            queryRun.query().dataSourceTable(tablenum(CustTable)).clearRanges();
        }
        custAccountsRestriction = previousAccountsRestriction;

        for (loc=1;loc<=conlen(custAccountsRestriction); loc++)
        {
            // set a range for every account number in the restrictions container

            account = conpeek(custAccountsRestriction, loc);
            range = this.setRange(tablenum(CustTable), fieldnum(CustTable,AccountNum), account);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDefaultButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to add a Default button to the dialog box.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    /// <remarks>
    /// If you click this button it will reset the parameters to the default that is specified in the
    /// <c>initParmDefault</c> method.If this method is changed to return true, the button will be added.
    /// </remarks>
    public boolean showDefaultButton()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQuerySelectButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to add a Select button to the dialog box.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    boolean showQuerySelectButton()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>