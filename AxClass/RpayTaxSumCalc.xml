<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RpayTaxSumCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class RpayTaxSumCalc
{
    RPayTaxParameters       rPayTaxParameters;
    RPayFundEmplSum         rpayFundEmplSumTmp;
    RPayFundEmplDeduction   rpayFundEmplDeductionTmp;

    Percent                 percentValue;
    ReportPeriod_RU         openPeriod;
    Set                     percentFund;
    boolean                 recalc;

    RPayEmplTax             emplTaxPeriod;
    Counter                 childCount;
    Map                     childList; //structure to store children's list per employee sorted by birth\adoption date
    Set                     calculatedDeduction;
    Set                     informedFundDeductionSet;

    #localmacro.ChildValue
        relativeRecId,
        calculate
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcFundAmount</Name>
				<Source><![CDATA[
    private RPayAmount calcFundAmount(RPayCounterUnit     _counterUnit,
                                      ReportPeriod_RU     _payPeriod,
                                      RPayCorrectedPeriod _correctedPeriod,
                                      RHRMEmplId          _emplId,
                                      boolean             _isRatePercent)
    {
        RPayCounterTable    rPayCounterTable;
        RPayRateTable       rPayRateTable;
        RPayAmount          fundTotalAmount,
                            baseTotalAmount,
                            fundTotalAmountPrev,
                            fundTmpAmount;
        RPayRateValue       rateValue;
        RPayRateCallContext rPayRateCallContext = new RPayRateCallContext();

        rPayCounterTable = RPayCounterTable::find(_counterUnit);

        if (!_isRatePercent)
        {
            rPayRateTable = RPayRateTable::find(rPayCounterTable.PayRate);
        }

        baseTotalAmount     = this.fundBaseAmount(_emplId, _counterUnit, endmth(dateStartYr(_correctedPeriod)), _correctedPeriod, _payPeriod, true, percentValue);
        fundTotalAmountPrev = this.fundAmount(_emplId, _counterUnit, endmth(dateStartYr(_correctedPeriod)), _correctedPeriod, _payPeriod, true, percentValue, false);

        if (_isRatePercent)
        {
            fundTotalAmount = percentValue * baseTotalAmount / 100;
        }
        else
        {
            rPayRateCallContext.reset();
            rPayRateCallContext.parmRateDate(_correctedPeriod);
            rPayRateCallContext.parmEmployeeId(_emplId);
            rPayRateCallContext.parmCriterion(baseTotalAmount);

            rateValue = rPayRateTable.getValue(rPayRateCallContext);
            fundTmpAmount   = (rPayRateTable.CritValueType || rPayRateTable.RateValueType == RpayRateValueType::CounterValue) ?
                1 :
                baseTotalAmount / 100;
            fundTotalAmount = rateValue * fundTmpAmount;
        }

        fundTotalAmount = CurrencyExchangeHelper::amount(fundTotalAmount);

        return fundTotalAmount - fundTotalAmountPrev;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcFundDeduction</Name>
				<Source><![CDATA[
    #RpayModuleName
    private container calcFundDeduction(RPayCounterUnit       _payCounterUnit,
                                        RpayFundDeductionCode _payFundDeductionCode,
                                        ReportPeriod_RU       _payPeriod,
                                        RHRMEmplId            _emplId,
                                        RPayAmount            _currentAmount,
                                        RPayCorrectedPeriod   _correctedPeriod,
                                        RHRMFamilyRecId       _familyRecId = 0)

    {
        RPayTrans                    payTrans;
        RPayFundMember               payFundMember;
        RPayAmount                   deductionAmount = 0,
                                     baseTotalDeductionAmount,
                                     baseDeductionAmount = 0;
        RPayTable                    payTable;
        RHRMEmplTable                emplTable;
        RPayTaxIncomeTable           rPayTaxIncomeTable;
        RPayTaxCalculate             rPayTaxCalculate;
        RPayFundDeductionTable       rPayFundDeductionTable;
        RPayFundDeductionMember      rPayFundDeductionMember;
        RPayFundTaxDeductionMember   rPayFundTaxDeductionMember;
        RPayFundCtypeDeductionMember rPayFundCtypeDeductionMember;
        ReportPeriod_RU              periodStart;
        container                    conDeductionAmount = [0,0];
        RPayRateCallContext          rPayRateCallContext = new RPayRateCallContext();
        RPayCalculate_Tax            payCalculate;
        container                    key;

        void baseTotalDeductionAmount(boolean _base = false)
        {
            boolean recalcOrig;
            periodStart = RPayController::getFirstPeriodFrequency(_correctedPeriod,
                                                                  rPayFundDeductionTable.RpayPeriodFrequence,
                                                                  rPayFundDeductionTable.RpayRateCodeValue);

            if (!_base && rPayFundDeductionTable.RpayPeriodFrequence == RPayRatePeriodFrequency::Unlimeted)
            {
                recalcOrig = recalc;
                recalc = true;
            }

            conDeductionAmount = this.getFundDeductionSum(
                _emplId,
                _payCounterUnit,
                _payFundDeductionCode,
                periodStart,
                _correctedPeriod,
                _payPeriod,
                false,
                _familyRecId);

            if (!_base && rPayFundDeductionTable.RpayPeriodFrequence == RPayRatePeriodFrequency::Unlimeted)
            {
                recalc = recalcOrig;
            }

            baseTotalDeductionAmount = conPeek(conDeductionAmount, 1) + baseDeductionAmount;
        }

        select firstonly * from rPayFundDeductionTable
            where rPayFundDeductionTable.RpayFundDeductionCode  == _payFundDeductionCode
        exists join  rPayFundDeductionMember
           where rPayFundDeductionMember.rPayCounterUnit       == _payCounterUnit &&
                 rPayFundDeductionMember.RpayFundDeductionCode == rPayFundDeductionTable.RpayFundDeductionCode;

        if (!rPayFundDeductionTable.RecId)
        {
            return [baseDeductionAmount, deductionAmount];
        }

        rPayRateCallContext.reset();
        rPayRateCallContext.parmRateDate(_payPeriod);
        rPayRateCallContext.parmEmployeeId(_emplId);

        if (rPayFundDeductionTable.RpayRateCodeEmpl &&
           ! RPayRateTable::find(rPayFundDeductionTable.RpayRateCodeEmpl).getValue(rPayRateCallContext))
        {
            return [baseDeductionAmount,deductionAmount];
        }

        switch (rPayFundDeductionTable.RpayFundDeductionType)
        {
            case RpayFundDeductionType::TaxDeduction:
                while select RpayTaxDeductionCode from rPayFundTaxDeductionMember
                    where rPayFundTaxDeductionMember.RpayFundDeductionCode == rPayFundDeductionTable.RpayFundDeductionCode
                {
                    while select RpayTaxIncomeCode from rPayTaxIncomeTable
                        where rPayTaxIncomeTable.RpayTaxDeductionCode == rPayFundTaxDeductionMember.RpayTaxDeductionCode
                    {
                        select sum(Amount) from payTrans
                            where payTrans.PayPeriod        == _payPeriod       &&
                                  payTrans.CorrectedPeriod  == _correctedPeriod &&
                                 (payTrans.FamilyRecId      == _familyRecId || !_familyRecId)
                        exists join payFundMember
                            where payFundMember.CounterUnit == _payCounterUnit &&
                                  payFundMember.PayCostType == payTrans.PayCtype
                        exists join emplTable
                            where emplTable.EmployeeId           == payTrans.Emplid &&
                                 (emplTable.PayMainEmplId        == _emplId ||
                                            emplTable.EmployeeId == _emplId)
                         exists join payTable
                            where payTable.RpayTaxIncomeCode == rPayTaxIncomeTable.RpayTaxIncomeCode &&
                                  payTable.PayCtype          == payTrans.PayCtype;

                        baseDeductionAmount += payTrans.Amount;
                        emplTaxPeriod  = RPayEmplTax::construct(_emplId, RPayParameters::payPeriod(_emplId));

                        if (!emplTaxPeriod.useLastTaxStatus())
                        {
                            emplTaxPeriod  = RPayEmplTax::construct(_emplId, _correctedPeriod);
                        }

                        rPayTaxCalculate =  RPayTaxCalculate::construct(emplTaxPeriod.incomeTaxGroupTable(rPayTaxIncomeTable.RpayTaxIncomeCode), _emplId);
                        deductionAmount += rPayTaxCalculate.calcTaxDiscountValue(rPayTaxIncomeTable.RpayTaxIncomeCode,
                                                                                 payTrans.Amount,
                                                                                 emplTaxPeriod.incomeTaxGroupTable(rPayTaxIncomeTable.RpayTaxIncomeCode).Fund,
                                                                                 _correctedPeriod, _familyRecId);

                        if (rPayFundDeductionTable.ActOnRelative &&
                            !RPayTaxDeductionTable::find(rPayFundTaxDeductionMember.RpayTaxDeductionCode).ActOnRelative)
                        {
                            select sum(Amount) from payTrans
                                where payTrans.PayPeriod        == _payPeriod       &&
                                      payTrans.CorrectedPeriod  == _correctedPeriod
                            exists join payFundMember
                                where payFundMember.CounterUnit == _payCounterUnit &&
                                      payFundMember.PayCostType == payTrans.PayCtype
                            exists join emplTable
                                where emplTable.EmployeeId           == payTrans.Emplid &&
                                     (emplTable.PayMainEmplId        == _emplId ||
                                                emplTable.EmployeeId == _emplId)
                             exists join payTable
                                where payTable.RpayTaxIncomeCode == rPayTaxIncomeTable.RpayTaxIncomeCode &&
                                      payTable.PayCtype          == payTrans.PayCtype;

                            if (payTrans.Amount != 0)
                            {
                                if (!recalc)
                                {
                                    delete_from rpayFundEmplSumTmp;
                                    delete_from rpayFundEmplDeductionTmp;
                                }

                                RPayParameters::setPayStatus(RPayStatus::NoCalc);
                                throw error(strFmt("@RUP6166",
                                    _payCounterUnit,
                                    rPayFundTaxDeductionMember.RpayTaxDeductionCode,
                                    rPayFundDeductionTable.RpayFundDeductionCode));
                            }
                        }
                        else if (deductionAmount != 0 &&
                                !rPayFundDeductionTable.ActOnRelative &&
                                RPayTaxDeductionTable::find(rPayFundTaxDeductionMember.RpayTaxDeductionCode).ActOnRelative)
                        {
                            key = [_payCounterUnit,
                                    rPayFundTaxDeductionMember.RpayTaxDeductionCode,
                                    rPayFundDeductionTable.RpayFundDeductionCode];

                            if (!informedFundDeductionSet.in(key))
                            {
                                warning(strFmt("@RUP6165",
                                    _payCounterUnit,
                                    rPayFundTaxDeductionMember.RpayTaxDeductionCode,
                                    rPayFundDeductionTable.RpayFundDeductionCode));
                                informedFundDeductionSet.add(key);
                            }
                        }
                    }
                }
                return [baseDeductionAmount, deductionAmount];

            case RpayFundDeductionType::CtypeDeduction:

                select sum(Amount) from payTrans
                    where payTrans.PayPeriod        == _payPeriod       &&
                          payTrans.CorrectedPeriod  == _correctedPeriod &&
                          (payTrans.FamilyRecId     == _familyRecId || !_familyRecId)
                exists join payFundMember
                    where payFundMember.CounterUnit == _payCounterUnit &&
                          payFundMember.PayCostType == payTrans.PayCtype
                exists join emplTable
                    where emplTable.EmployeeId       == payTrans.Emplid &&
                         (emplTable.PayMainEmplId    == _emplId ||
                          emplTable.EmployeeId       == _emplId)
                exists join rPayFundCtypeDeductionMember
                    where rPayFundCtypeDeductionMember.RpayFundDeductionCode == _payFundDeductionCode &&
                          rPayFundCtypeDeductionMember.rPayCostType          == payTrans.PayCtype;

                baseDeductionAmount = payTrans.Amount;

                if (baseDeductionAmount)
                {
                    if (rPayFundDeductionTable.PaySequence)
                    {
                        payCalculate = new RPayCalculate_Tax(RPayModuleTable::find(#ModuleNameTax));
                        payCalculate.setSourceTable(RHRMEmplTable::find(_emplId));
                        payCalculate.setSeqTable(RPaySeqTable::find(rPayFundDeductionTable.PaySequence));
                        payCalculate.payPeriod(_correctedPeriod);
                        payCalculate.setInitValue(baseDeductionAmount);
                        payCalculate.setFundDeductionTable(rPayFundDeductionTable);
                        payCalculate.setFamilyRecId(_familyRecId);
                        payCalculate.setBudgetFund(_payCounterUnit);
                        payCalculate.calcSequence();
                        deductionAmount = payCalculate.getCurrentValue();
                    }
                    else
                    {
                        rPayRateCallContext.reset();
                        rPayRateCallContext.parmRateDate(_payPeriod);
                        rPayRateCallContext.parmEmployeeId(_emplId);
                        rPayRateCallContext.parmCriterion(this.getBaseTotalDeductionAmountPayCType(
                                                                _payCounterUnit,
                                                                _payPeriod,
                                                                _emplId,
                                                                _correctedPeriod,
                                                                _familyRecId,
                                                                rPayFundDeductionTable));

                        deductionAmount = RPayRateTable::find(rPayFundDeductionTable.RpayRateCodeValue).getValue(rPayRateCallContext);
                    }
                }
                break;

            case RpayFundDeductionType::FundDeduction:
                baseDeductionAmount = _currentAmount;
                baseTotalDeductionAmount(true);

                rPayRateCallContext.reset();
                rPayRateCallContext.parmRateDate(_payPeriod);
                rPayRateCallContext.parmEmployeeId(_emplId);
                rPayRateCallContext.parmCriterion(baseTotalDeductionAmount);

                deductionAmount = RPayRateTable::find(rPayFundDeductionTable.RpayRateCodeValue).getValue(rPayRateCallContext);
                break;
        }

        if (deductionAmount || (deductionAmount == 0 && _correctedPeriod < _payPeriod && baseDeductionAmount < 0))
        {
            if (rPayFundDeductionTable.ActOnRelative)
            {
                if (rPayFundDeductionTable.RpayPeriodFrequence == RPayRatePeriodFrequency::None)
                {
                    conDeductionAmount = this.getFundDeductionSum(
                        _emplId,
                        _payCounterUnit,
                        _payFundDeductionCode,
                        periodStart,
                        _correctedPeriod,
                        _payPeriod,
                        false,
                        _familyRecId);

                    if (conPeek(conDeductionAmount, 2))
                    {
                        return [0, 0];
                    }
                }
            }

            baseTotalDeductionAmount();

            if (baseTotalDeductionAmount > 0)
            {
                deductionAmount = min(deductionAmount, baseTotalDeductionAmount);
            }
            else
            {
                deductionAmount = max(-deductionAmount, baseTotalDeductionAmount);
            }

            deductionAmount = deductionAmount - conPeek(conDeductionAmount, 2);
        }

        return [baseDeductionAmount, deductionAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcStandardDeductionRelatives</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calcStandardDeductionRelatives(RPayTaxDeductionTable     _taxDeductionTable,
                                                  RPayTaxEmplTrans          _taxEmpltransTmp,
                                                  RPayTaxCalculate          _rPayTaxCalculate,
                                                  RHRMEmplId                    _emplId,
                                                  ReportPeriod_RU           _payPeriod,
                                                  RPayAmount                _incomeTotal,
                                                  RpayTaxIncomeGroupCode    _incomeTaxGroupCode)
    {
        RPayTaxEmplSum            rPayTaxEmplSum;
        RPayTaxDeductionTable     taxDeductionTableLocal; //use local deduction variable to calculate

        RefRecId        relativeRecId;
        MapEnumerator   childMapEnumerator;

        RPayAmount deductionStandard, dedStandardRefundable;
        boolean childNumState, calculate;

        void calcLineDeduction()
        {
            [deductionStandard, dedStandardRefundable] = _rPayTaxCalculate.calcTaxDeductionCurrent(taxDeductionTableLocal.RpayTaxDeductionCode,
                                                                                                   _payPeriod,
                                                                                                   _incomeTotal,
                                                                                                   0,
                                                                                                   relativeRecId,
                                                                                                   childCount);
            if (deductionStandard != 0 && _incomeTotal != 0)
            {
                _taxEmpltransTmp.clear();
                rPayTaxEmplSum = this.getTaxEmplSum(_payPeriod, _emplId, _incomeTaxGroupCode);

                select firstonly forupdate _taxEmpltransTmp
                    where _taxEmpltransTmp.TaxSumRecId          == rPayTaxEmplSum.RecId                        &&
                          _taxEmpltransTmp.RpayTaxIncDedCode    == taxDeductionTableLocal.RpayTaxDeductionCode &&
                          _taxEmpltransTmp.RpayTaxType          == RpayTaxType::Deduction &&
                          _taxEmpltransTmp.FamilyRecId          == relativeRecId;

                if (_taxEmpltransTmp)
                {
                    _taxEmpltransTmp.Amount = deductionStandard;
                    _taxEmpltransTmp.update();
                }
                else
                {
                    _taxEmpltransTmp.TaxSumRecId       = rPayTaxEmplSum.RecId;
                    _taxEmpltransTmp.RpayTaxIncDedCode = taxDeductionTableLocal.RpayTaxDeductionCode;
                    _taxEmpltransTmp.RpayTaxType       = RpayTaxType::Deduction;
                    _taxEmpltransTmp.Amount            = deductionStandard;
                    _taxEmpltransTmp.FamilyRecId       = relativeRecId;

                    _taxEmpltransTmp.insert();
                }
            }
        }

        if (!childList || childList.empty())
        {
            return;
        }

        //already calculated deduction
        if (calculatedDeduction.in(_taxDeductionTable.RpayTaxDeductionCode))
        {
            return;
        }

        childCount = 0;
        childMapEnumerator = childList.getEnumerator();
        calculatedDeduction.add(_taxDeductionTable.RpayTaxDeductionCode);

        while (childMapEnumerator.moveNext())
        {
            [#ChildValue] = childMapEnumerator.currentValue();

            childNumState = false;

            while select taxDeductionTableLocal
                order by RpayTaxDeductionCode
                where taxDeductionTableLocal.RpayTaxDeductionType == _taxDeductionTable.RpayTaxDeductionType &&
                      taxDeductionTableLocal.RpayPeriodFrequence  == _taxDeductionTable.RpayPeriodFrequence  &&
                      taxDeductionTableLocal.ActOnRelative
            {
                if (calculate)
                {
                    calcLineDeduction();
                }

                childNumState = childNumState || deductionStandard || rPayTaxParameters.CalcRelativeByPerson;
                calculatedDeduction.add(taxDeductionTableLocal.RpayTaxDeductionCode);

                if (deductionStandard)
                {
                    calculate         = false; //assing new value to prevent calculation for other deductions
                    deductionStandard = 0;
                }
            }

            childCount += childNumState ? 1 : 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxAdd</Name>
				<Source><![CDATA[
    private RPayAmount calcTaxAdd(ReportPeriod_RU        _payPeriod,
                                  RHRMEmplId             _emplId,
                                  RpayTaxIncomeGroupCode _rpayTaxIncomeGroupCode)
    {
        RPayAmount      addTaxAmount,
                        incomeNetAmount,
                        addTaxAmountPrev;

        incomeNetAmount  =  RPayTaxEmplSum::getIncomeNetAmount(_emplId,_rpayTaxIncomeGroupCode,endmth(dateStartYr(_payPeriod)),_payPeriod);
        addTaxAmountPrev =  RPayTaxEmplSum::getAddTaxAmount(_emplId,_rpayTaxIncomeGroupCode,endmth(dateStartYr(_payPeriod)),endmth(prevMth(_payPeriod)));
        addTaxAmount     =  incomeNetAmount * emplTaxPeriod.taxGroup2RateValue(RPayTaxIncomeGroupTable::findCode(_rpayTaxIncomeGroupCode)) / 100;

        addTaxAmount = ((addTaxAmount - addTaxAmountPrev) > 0 ? (addTaxAmount - addTaxAmountPrev) : 0);
        addTaxAmount = round(addTaxAmount, rPayTaxParameters.TaxRound);

        return addTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxDeductionAmount</Name>
				<Source><![CDATA[
    private RPayAmount calcTaxDeductionAmount(RPayCounterUnit     _counterUnit,
                                              ReportPeriod_RU     _payPeriod,
                                              RHRMEmplId          _emplId,
                                              RPayRateCode        _rPayRateCode,
                                              RPayAmount          _deductionAmount,
                                              RPayAmount          _fundAmount,
                                              RPayCorrectedPeriod _correctedPeriod)
    {
        RPayAmount          taxDeductionAmount,
                            baseTotalAmount,
                            taxDeductionAmountPrev;
        RPayRateTable       rPayRateTable;
        RPayRateCallContext rPayRateCallContext = new RPayRateCallContext();

        rPayRateTable           = RPayRateTable::find(_rPayRateCode);
        baseTotalAmount         = this.fundBaseAmount(_emplId, _counterUnit, endmth(dateStartYr(_correctedPeriod)), _correctedPeriod, _payPeriod, true, percentValue);

        if (baseTotalAmount == 0 && rPayRateTable.RateValueType == RpayRateValueType::CounterValue)
        {
            taxDeductionAmountPrev = 0;
        }
        else
        {
            rPayRateCallContext.reset();
            rPayRateCallContext.parmRateDate(_correctedPeriod);
            rPayRateCallContext.parmEmployeeId(_emplId);
            rPayRateCallContext.parmCriterion(baseTotalAmount);

            taxDeductionAmountPrev  = rPayRateTable.getValue(rPayRateCallContext) *
                ((rPayRateTable.CritValueType || rPayRateTable.RateValueType == RpayRateValueType::CounterValue) ?
                    1 :
                    baseTotalAmount / 100);
        }

        baseTotalAmount += _deductionAmount;

        if (baseTotalAmount == 0 && rPayRateTable.RateValueType == RpayRateValueType::CounterValue)
        {
            taxDeductionAmount = 0;
        }
        else
        {
            rPayRateCallContext.reset();
            rPayRateCallContext.parmRateDate(_payPeriod);
            rPayRateCallContext.parmEmployeeId(_emplId);
            rPayRateCallContext.parmCriterion(baseTotalAmount);

            taxDeductionAmount = rPayRateTable.getValue(rPayRateCallContext) *
                                 ((rPayRateTable.CritValueType || rPayRateTable.RateValueType == RpayRateValueType::CounterValue) ?
                                    1 :
                                    baseTotalAmount / 100);
        }

        taxDeductionAmount = CurrencyExchangeHelper::amount(taxDeductionAmount - taxDeductionAmountPrev);

        return taxDeductionAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCostType</Name>
				<Source><![CDATA[
    private RPayAmount calculateCostType(RPayCostType    _payCostType,
                                         ReportPeriod_RU _payPeriod,
                                         RHRMEmplId      _emplId,
                                         NoYes           _redemption = NoYes::No)
    {
        RPayTrans      payTrans;

        select sum(Amount)  from payTrans
            where payTrans.PayPeriod     <= RPayParameters::payPeriod(_emplId)   &&
                  payTrans.PayPeriod     == _payPeriod                           &&
                  payTrans.PayCtype      == _payCostType                         &&
                  payTrans.Emplid        == _emplId                              &&
                  payTrans.TaxRedemption == _redemption;

        return payTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCostTypeBySourceDate</Name>
				<Source><![CDATA[
    private RPayAmount calculateCostTypeBySourceDate(RPayCostType    _payCostType,
                                                     ReportPeriod_RU _sourceDate,
                                                     RHRMEmplId      _emplId,
                                                     NoYes           _redemption = NoYes::No)
    {
        RPayTrans payTrans;

        select sum(Amount)  from payTrans
            where payTrans.PayPeriod     <= RPayParameters::payPeriod(_emplId) &&
                  payTrans.SourceDate    == _sourceDate                 &&
                  payTrans.PayCtype      == _payCostType                &&
                  payTrans.Emplid        == _emplId                     &&
                  payTrans.TaxRedemption == _redemption;

        return payTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCostTypeLinked</Name>
				<Source><![CDATA[
    private RPayAmount calculateCostTypeLinked(RPayTaxIncomeGroupTable      _taxIncomeGroupTable,
                                               ReportPeriod_RU              _payPeriod,
                                               RHRMEmplId                   _emplId,
                                               NoYes                        _redemption = NoYes::No)
    {
        RPayEmplTax             emplTax;
        RPayFundMember          fundMember, fundMemberLinked;
        RPayTaxIncomeGroupTable taxIncomeGroupTableLinked;
        RPayTaxCalculate        rPayTaxCalculate;
        RPayTrans               payTrans;

        RPayAmount amount, amountDeducted, prevIncomeAmount, amountNew, amountTrans;

        RPayAmount calcPrevIncomeAmount(RPayCounterUnit _fund)
        {
            RPayTaxIncomeTable rPayTaxIncomeTable;
            RPayTable          payTable;
            RPayFundMember    payFundMember;

            RHRMVirtualNetworkFamily    rhrmVirtualNetworkFamily;
            container   con;
            RPayAmount  incomeAmount;

            while select RpayTaxDeductionCode, RpayTaxIncomeCode from rPayTaxIncomeTable
                exists join payTable
                    where payTable.RpayTaxIncomeCode == rPayTaxIncomeTable.RpayTaxIncomeCode
                    exists join payFundMember
                        where payFundMember.PayCostType == payTable.PayCtype &&
                              payFundMember.CounterUnit == _fund
            {
                if (rPayTaxIncomeTable.RpayTaxDeductionCode && RPayTaxDeductionTable::find(rPayTaxIncomeTable.RpayTaxDeductionCode).ActOnRelative)
                {
                    while select RecId from rhrmVirtualNetworkFamily
                        where (rhrmVirtualNetworkFamily.Relatives == RHRMRelationship::Son ||
                               rhrmVirtualNetworkFamily.Relatives == RHRMRelationship::Daughter) &&
                               rhrmVirtualNetworkFamily.PersonnelNumber == RHRMEmplTable::find(_emplId).personTable().PersonnelNumber
                    {
                        con = rPayTaxCalculate.calcTaxIncomeCurrent(rPayTaxIncomeTable.RpayTaxIncomeCode, _fund, _payPeriod, rhrmVirtualNetworkFamily.RecId);
                        incomeAmount +=  conPeek(con, 1);
                    }
                }
                else
                {
                        con = rPayTaxCalculate.calcTaxIncomeCurrent(rPayTaxIncomeTable.RpayTaxIncomeCode, _fund, _payPeriod, rhrmVirtualNetworkFamily.RecId);
                        incomeAmount +=  conPeek(con, 1);
                }
            }

            return incomeAmount;
        }

        void calcTaxStatus()
        {
            amountTrans = RPayTrans::taxAmount(taxIncomeGroupTableLinked.RpayTaxIncomeGroupCode,
                                               _payPeriod, _payPeriod,
                                               _emplId, _redemption);

            if (amountTrans == 0 && _redemption)
            {
                return;
            }

            amountDeducted += amountTrans;

            rPayTaxCalculate = RPayTaxCalculate::construct(taxIncomeGroupTableLinked, _emplId);
            prevIncomeAmount += calcPrevIncomeAmount(taxIncomeGroupTableLinked.Fund);

            if (prevIncomeAmount)
            {
                amountNew = calcPrevIncomeAmount(_taxIncomeGroupTable.Fund);
                amount   = round(amountDeducted * amountNew / prevIncomeAmount, RPayTaxParameters::find().TaxRound);
            }

            //try to find prev deductions with the same codes in case without income amount in period
            if (amount == 0)
            {
                /*
                conPeriodAmount = RPayTaxEmplSum::GetTaxSum(_emplId, _taxIncomeGroupTable.RpayTaxIncomeGroupCode, _payPeriod, _payPeriod);

                //tax linked deduction amount
                if ((_redemption && conpeek(conPeriodAmount, 11) < amountDeducted) ||
                    (!_redemption && conpeek(conPeriodAmount, 4) < abs(amountDeducted)))
                {
                    amount += amountDeducted;
                }
                */
                //tax amounts with current status code
                amount += RPayTrans::taxAmount(_taxIncomeGroupTable.RpayTaxIncomeGroupCode,
                                               _payPeriod,
                                               _payPeriod,
                                               _emplId,
                                               _redemption);
            }
        }

        void calcRedemptionAmount()
        {
            while select taxIncomeGroupTableLinked
                    group by RpayTaxIncomeGroupCode, Fund
                    where taxIncomeGroupTableLinked.EmplTaxStatus != _taxIncomeGroupTable.EmplTaxStatus
                        exists join fundMemberLinked
                            where fundMemberLinked.CounterUnit == taxIncomeGroupTableLinked.Fund
                        exists join fundMember
                            where fundMemberLinked.PayCostType == fundMember.PayCostType &&
                                  fundMember.CounterUnit       == _taxIncomeGroupTable.Fund
            {
                select sum(Amount) from payTrans
                    where payTrans.Emplid             == _emplId &&
                        ((payTrans.CounterUnit        == _taxIncomeGroupTable.RpayTaxIncomeGroupCode        &&
                          payTrans.TaxIncomeGroupCode == taxIncomeGroupTableLinked.RpayTaxIncomeGroupCode)  ||
                         (payTrans.CounterUnit        == taxIncomeGroupTableLinked.RpayTaxIncomeGroupCode   &&
                          payTrans.TaxIncomeGroupCode == _taxIncomeGroupTable.RpayTaxIncomeGroupCode))      &&
                          payTrans.PayPeriod          == _payPeriod                                         &&
                          payTrans.TaxRedemption      == _redemption;

                amount += payTrans.Amount;
            }
        }

        emplTax = RPayEmplTax::construct(_emplId, _payPeriod);

        if (emplTax.taxStatus() == _taxIncomeGroupTable.EmplTaxStatus)
        {
            amount = RPayTrans::taxAmount(_taxIncomeGroupTable.RpayTaxIncomeGroupCode, _payPeriod, _payPeriod, _emplId, _redemption);

            //calculate amounts for non changed status related to current tax group
            //if (_redemption)
            {
               calcRedemptionAmount();
            }
        }
        else if (emplTax.taxStatus() != _taxIncomeGroupTable.EmplTaxStatus && !_redemption)
        {
            while select taxIncomeGroupTableLinked
                group by RpayTaxIncomeGroupCode, Fund
                where taxIncomeGroupTableLinked.EmplTaxStatus == emplTax.taxStatus()
                    join fundMemberLinked
                        where fundMemberLinked.CounterUnit == taxIncomeGroupTableLinked.Fund
                    exists join fundMember
                        where fundMemberLinked.PayCostType == fundMember.PayCostType &&
                              fundMember.CounterUnit       == _taxIncomeGroupTable.Fund
            {
                calcTaxStatus();
            }
        }
        else if (emplTax.taxStatus() != _taxIncomeGroupTable.EmplTaxStatus && _redemption)
        {
            calcRedemptionAmount();
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCorrection</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void createCorrection(RHRMEmplId _emplId)
    {
        RPayFundEmplSum       rPayFundEmplSum, rpayFundEmplSumPercent, rpayFundEmplSumInsert;
        RPayAmount            fundTotalAmount, baseAmount, fundAmount;
        RecordInsertList      fundInsertList = new RecordInsertList(tableNum(RPayFundEmplSum));

        ttsbegin;
        delete_from rPayFundEmplSum
                where rPayFundEmplSum.PayPeriod == openPeriod &&
                      rPayFundEmplSum.EmplId    == _emplId;

        while select sum(RpayFundTotalAmount),  sum(BaseAmount), sum(FundAmount) from rpayFundEmplSumTmp
            group by CorrectedPeriod, RpayCounterUnit, PercentValue
            where rpayFundEmplSumTmp.PayPeriod >= dateStartYr(openPeriod) &&
                  rpayFundEmplSumTmp.PayPeriod <= dateEndYr(openPeriod)
        {
            if (percentFund.in(rpayFundEmplSumTmp.RpayCounterUnit))
            {
                rpayFundEmplSumPercent = RPayFundEmplSum::lastPercentValue(_emplId,
                                                                           rpayFundEmplSumTmp.RpayCounterUnit,
                                                                           rpayFundEmplSumTmp.CorrectedPeriod);

                if (rpayFundEmplSumPercent && rpayFundEmplSumPercent.PercentValue != rpayFundEmplSumTmp.PercentValue)
                {
                    select sum(RpayFundTotalAmount), sum(BaseAmount), sum(FundAmount) from rPayFundEmplSum
                        where rPayFundEmplSum.CorrectedPeriod == rpayFundEmplSumTmp.CorrectedPeriod  &&
                              rPayFundEmplSum.RpayCounterUnit == rpayFundEmplSumTmp.RpayCounterUnit  &&
                              rPayFundEmplSum.EmplId          == _emplId                             &&
                              rPayFundEmplSum.PercentValue    == rpayFundEmplSumPercent.PercentValue &&
                              rPayFundEmplSum.PayPeriod       <  openPeriod;

                    if (rPayFundEmplSum.RpayFundTotalAmount != rpayFundEmplSumTmp.RpayFundTotalAmount ||
                        rPayFundEmplSum.BaseAmount          != rpayFundEmplSumTmp.BaseAmount          ||
                        rPayFundEmplSum.FundAmount          != rpayFundEmplSumTmp.FundAmount)
                    {
                        rpayFundEmplSumInsert.clear();
                        rpayFundEmplSumInsert.PayPeriod           = openPeriod;
                        rpayFundEmplSumInsert.CorrectedPeriod     = rpayFundEmplSumTmp.CorrectedPeriod;
                        rpayFundEmplSumInsert.EmplId              = _emplId;
                        rpayFundEmplSumInsert.RpayCounterUnit     = rpayFundEmplSumTmp.RpayCounterUnit;
                        rpayFundEmplSumInsert.RpayFundTotalAmount = -rPayFundEmplSum.RpayFundTotalAmount;
                        rpayFundEmplSumInsert.BaseAmount          = -rPayFundEmplSum.BaseAmount;
                        rpayFundEmplSumInsert.FundAmount          = -rPayFundEmplSum.FundAmount;
                        rpayFundEmplSumInsert.PercentValue        = rpayFundEmplSumPercent.PercentValue;
                        fundInsertList.add(rpayFundEmplSumInsert);
                    }
                    else
                    {
                        update_recordset rpayFundEmplSumInsert setting PercentValue = rpayFundEmplSumTmp.PercentValue
                            where rpayFundEmplSumInsert.CorrectedPeriod == rpayFundEmplSumTmp.CorrectedPeriod  &&
                                  rpayFundEmplSumInsert.RpayCounterUnit == rpayFundEmplSumTmp.RpayCounterUnit  &&
                                  rpayFundEmplSumInsert.EmplId          == _emplId                             &&
                                  rpayFundEmplSumInsert.PercentValue    == rpayFundEmplSumPercent.PercentValue &&
                                  rpayFundEmplSumInsert.PayPeriod       <  openPeriod;
                    }
                }
            }

            select sum(RpayFundTotalAmount), sum(BaseAmount), sum(FundAmount) from rPayFundEmplSum
                where rPayFundEmplSum.CorrectedPeriod == rpayFundEmplSumTmp.CorrectedPeriod  &&
                      rPayFundEmplSum.RpayCounterUnit == rpayFundEmplSumTmp.RpayCounterUnit  &&
                      rPayFundEmplSum.EmplId          == _emplId                             &&
                      rPayFundEmplSum.PercentValue    == rpayFundEmplSumTmp.PercentValue     &&
                      rPayFundEmplSum.PayPeriod       >= dateStartYr(openPeriod)             &&
                      rPayFundEmplSum.PayPeriod       <  openPeriod;

            fundTotalAmount = rpayFundEmplSumTmp.RpayFundTotalAmount - rPayFundEmplSum.RpayFundTotalAmount;
            baseAmount      = rpayFundEmplSumTmp.BaseAmount - rPayFundEmplSum.BaseAmount;
            fundAmount      = rpayFundEmplSumTmp.FundAmount - rPayFundEmplSum.FundAmount;

            if (fundTotalAmount || baseAmount || fundAmount)
            {
                rpayFundEmplSumInsert.clear();
                rpayFundEmplSumInsert.PayPeriod           = openPeriod;
                rpayFundEmplSumInsert.CorrectedPeriod     = rpayFundEmplSumTmp.CorrectedPeriod;
                rpayFundEmplSumInsert.EmplId              = _emplId;
                rpayFundEmplSumInsert.RpayCounterUnit     = rpayFundEmplSumTmp.RpayCounterUnit;
                rpayFundEmplSumInsert.RpayFundTotalAmount = fundTotalAmount;
                rpayFundEmplSumInsert.BaseAmount          = baseAmount;
                rpayFundEmplSumInsert.FundAmount          = fundAmount;
                rpayFundEmplSumInsert.PercentValue        = rpayFundEmplSumTmp.PercentValue;
                fundInsertList.add(rpayFundEmplSumInsert);
            }
        }

        fundInsertList.insertDatabase();
        this.createDeductionTrans(_emplId);
        ttscommit;

        delete_from rpayFundEmplSumTmp;
        delete_from rpayFundEmplDeductionTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDeductionTrans</Name>
				<Source><![CDATA[
    private void createDeductionTrans(RHRMEmplId _emplId)
    {
        RPayFundEmplDeduction rPayFundEmplDeduction, rpayFundEmplDeductionInsert;
        RecordInsertList      deductionInsertList = new RecordInsertList(tableNum(RPayFundEmplDeduction));
        RPayAmount            baseDeductionAmount, deductionAmount, taxDeductionAmount;

        delete_from rPayFundEmplDeduction
            where rPayFundEmplDeduction.PayPeriod == openPeriod &&
                  rPayFundEmplDeduction.EmplId    == _emplId;

        while select sum(BaseDeductionAmount),  sum(DeductionAmount), sum(TaxDeductionAmount) from rpayFundEmplDeductionTmp
            group by CorrectedPeriod, RpayCounterUnit, RpayFundDeductionCode, FamilyRecId
            where rpayFundEmplDeductionTmp.PayPeriod >= dateStartYr(openPeriod) &&
                  rpayFundEmplDeductionTmp.PayPeriod <= dateEndYr(openPeriod)

        {
            select sum(BaseDeductionAmount), sum(DeductionAmount), sum(TaxDeductionAmount) from rPayFundEmplDeduction
                where rPayFundEmplDeduction.CorrectedPeriod         == rpayFundEmplDeductionTmp.CorrectedPeriod         &&
                      rPayFundEmplDeduction.RpayCounterUnit         == rpayFundEmplDeductionTmp.RpayCounterUnit         &&
                      rPayFundEmplDeduction.EmplId                  == _emplId                                          &&
                      rPayFundEmplDeduction.RpayFundDeductionCode   == rpayFundEmplDeductionTmp.RpayFundDeductionCode   &&
                      rPayFundEmplDeduction.FamilyRecId             == rpayFundEmplDeductionTmp.FamilyRecId             &&
                      rPayFundEmplDeduction.PayPeriod               >= dateStartYr(openPeriod)                          &&
                      rPayFundEmplDeduction.PayPeriod               <  openPeriod;

            baseDeductionAmount  = rpayFundEmplDeductionTmp.BaseDeductionAmount - rPayFundEmplDeduction.BaseDeductionAmount;
            deductionAmount      = rpayFundEmplDeductionTmp.DeductionAmount     - rPayFundEmplDeduction.DeductionAmount;
            taxDeductionAmount   = rpayFundEmplDeductionTmp.TaxDeductionAmount  - rPayFundEmplDeduction.TaxDeductionAmount;

            if (baseDeductionAmount || deductionAmount || taxDeductionAmount)
            {
                rpayFundEmplDeductionInsert.clear();
                rpayFundEmplDeductionInsert.PayPeriod               = openPeriod;
                rpayFundEmplDeductionInsert.CorrectedPeriod         = rpayFundEmplDeductionTmp.CorrectedPeriod;
                rpayFundEmplDeductionInsert.EmplId                  = _emplId;
                rpayFundEmplDeductionInsert.RpayCounterUnit         = rpayFundEmplDeductionTmp.RpayCounterUnit;
                rpayFundEmplDeductionInsert.BaseDeductionAmount     = baseDeductionAmount;
                rpayFundEmplDeductionInsert.DeductionAmount         = deductionAmount;
                rpayFundEmplDeductionInsert.TaxDeductionAmount      = taxDeductionAmount;
                rpayFundEmplDeductionInsert.RpayFundDeductionCode   = rpayFundEmplDeductionTmp.RpayFundDeductionCode;
                rpayFundEmplDeductionInsert.FamilyRecId             = rpayFundEmplDeductionTmp.FamilyRecId;
                deductionInsertList.add(rpayFundEmplDeductionInsert);
            }
        }

        deductionInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFundDeduction</Name>
				<Source><![CDATA[
    private container createFundDeduction(RPayCounterUnit       _counterUnit,
                                          RHRMEmplId            _emplId,
                                          ReportPeriod_RU       _payPeriod,
                                          RPayCorrectedPeriod   _correctedPeriod,
                                          RPayAmount            _totalAmount,
                                          boolean               _usePercent)
    {
        RPayFundDeductionTable      rPayFundDeductionTable;
        RPayFundDeductionMember     rPayFundDeductionMember;
        RHRMVirtualNetworkFamily    rhrmVirtualNetworkFamily;
        RHRMPersonTable             rhrmPersonTable;
        RHRMEmplTable               rhrmEmplTable;
        RPayAmount                  deductionAmount,
                                    totalTaxDeductionAmount,
                                    taxDeductionAmount,
                                    baseDeductionAmount;
        container                   deductionSum;

        totalTaxDeductionAmount = this.getFundTotalTaxDeductionAmount(_emplId,
                                                                      _counterUnit,
                                                                      endmth(dateStartYr(_correctedPeriod)),
                                                                      _correctedPeriod,
                                                                      _payPeriod,
                                                                      false,
                                                                      _usePercent,
                                                                      percentValue);

        while select RpayFundDeductionCode, ActOnRelative, RpayRateTaxValue, RpayFundDeductionType from rPayFundDeductionTable
            order by RpayFundDeductionType desc, RpayRateTaxValue
        exists join rPayFundDeductionMember
            where rPayFundDeductionMember.RpayFundDeductionCode == rPayFundDeductionTable.RpayFundDeductionCode &&
                  rPayFundDeductionMember.rPayCounterUnit       == _counterUnit
        {
            if (rPayFundDeductionTable.ActOnRelative)
            {
                while select RecId from rhrmVirtualNetworkFamily
                    where (rhrmVirtualNetworkFamily.Relatives == RHRMRelationship::Son ||
                           rhrmVirtualNetworkFamily.Relatives == RHRMRelationship::Daughter)
                exists join rhrmPersonTable
                    where rhrmPersonTable.PersonnelNumber == rhrmVirtualNetworkFamily.PersonnelNumber
                exists join rhrmEmplTable
                    where rhrmEmplTable.rhrmPersonTable == rhrmPersonTable.RecId &&
                          rhrmEmplTable.EmployeeId      == _emplId
                {
                    deductionSum = this.calcFundDeduction(_counterUnit,
                                                          rPayFundDeductionTable.RpayFundDeductionCode,
                                                          _payPeriod,
                                                          _emplId,
                                                          _totalAmount,
                                                          _correctedPeriod,
                                                          rhrmVirtualNetworkFamily.RecId);

                    [baseDeductionAmount, deductionAmount] = deductionSum;

                    if (deductionAmount)
                    {
                        select firstonly forupdate rpayFundEmplDeductionTmp
                            where rpayFundEmplDeductionTmp.PayPeriod             == _payPeriod &&
                                  rpayFundEmplDeductionTmp.CorrectedPeriod       == _correctedPeriod &&
                                  rpayFundEmplDeductionTmp.EmplId                == _emplId &&
                                  rpayFundEmplDeductionTmp.RpayCounterUnit       == _counterUnit &&
                                  rpayFundEmplDeductionTmp.RpayFundDeductionCode == rPayFundDeductionTable.RpayFundDeductionCode &&
                                  rpayFundEmplDeductionTmp.FamilyRecId           == rhrmVirtualNetworkFamily.RecId;

                        rpayFundEmplDeductionTmp.PayPeriod             = _payPeriod;
                        rpayFundEmplDeductionTmp.CorrectedPeriod       = _correctedPeriod;
                        rpayFundEmplDeductionTmp.EmplId                = _emplId;
                        rpayFundEmplDeductionTmp.RpayCounterUnit       = _counterUnit;
                        rpayFundEmplDeductionTmp.RpayFundDeductionCode = rPayFundDeductionTable.RpayFundDeductionCode;
                        rpayFundEmplDeductionTmp.DeductionAmount       = deductionAmount;
                        rpayFundEmplDeductionTmp.BaseDeductionAmount   = baseDeductionAmount;
                        rpayFundEmplDeductionTmp.FamilyRecId           = rhrmVirtualNetworkFamily.RecId;

                        if (rPayFundDeductionTable.RpayRateTaxValue)
                        {
                            taxDeductionAmount = this.calcTaxDeductionAmount(_counterUnit,
                                                                             _payPeriod,
                                                                             _emplId,
                                                                             rPayFundDeductionTable.RpayRateTaxValue,
                                                                             deductionAmount,
                                                                             _totalAmount,
                                                                             _correctedPeriod);
                            totalTaxDeductionAmount += taxDeductionAmount;
                        }
                        else
                        {
                            _totalAmount -= deductionAmount;
                        }

                        rpayFundEmplDeductionTmp.TaxDeductionAmount    = taxDeductionAmount;

                        rpayFundEmplDeductionTmp.write();
                    }
                }
            }
            else
            {
                deductionSum = this.calcFundDeduction(_counterUnit,
                                                      rPayFundDeductionTable.RpayFundDeductionCode,
                                                      _payPeriod,
                                                      _emplId,
                                                      _totalAmount,
                                                      _correctedPeriod);

                taxDeductionAmount = 0;
                [baseDeductionAmount, deductionAmount] = deductionSum;

                deductionAmount = min(abs(baseDeductionAmount), abs(deductionAmount)) * sign(deductionAmount);

                select firstonly forupdate rpayFundEmplDeductionTmp
                            where rpayFundEmplDeductionTmp.PayPeriod            == _payPeriod &&
                                  rpayFundEmplDeductionTmp.CorrectedPeriod      == _correctedPeriod &&
                                  rpayFundEmplDeductionTmp.EmplId               == _emplId &&
                                  rpayFundEmplDeductionTmp.RpayCounterUnit      == _counterUnit &&
                                  rpayFundEmplDeductionTmp.RpayFundDeductionCode == rPayFundDeductionTable.RpayFundDeductionCode;

                rpayFundEmplDeductionTmp.PayPeriod             = _payPeriod;
                rpayFundEmplDeductionTmp.CorrectedPeriod       = _correctedPeriod;
                rpayFundEmplDeductionTmp.EmplId                = _emplId;
                rpayFundEmplDeductionTmp.RpayCounterUnit       = _counterUnit;
                rpayFundEmplDeductionTmp.RpayFundDeductionCode = rPayFundDeductionTable.RpayFundDeductionCode;
                rpayFundEmplDeductionTmp.DeductionAmount       = deductionAmount;
                rpayFundEmplDeductionTmp.BaseDeductionAmount   = rPayFundDeductionTable.RpayFundDeductionType == RpayFundDeductionType::FundDeduction ?
                                                                 _totalAmount : baseDeductionAmount;

                if (deductionAmount)
                {
                    if (rPayFundDeductionTable.RpayRateTaxValue)
                    {
                        taxDeductionAmount = this.calcTaxDeductionAmount(_counterUnit,
                                                                         _payPeriod,
                                                                         _emplId,
                                                                         rPayFundDeductionTable.RpayRateTaxValue,
                                                                         deductionAmount,
                                                                         _totalAmount,
                                                                         _correctedPeriod);
                        totalTaxDeductionAmount += taxDeductionAmount;
                    }
                    else
                    {
                        _totalAmount -= deductionAmount;
                    }
                }

                rpayFundEmplDeductionTmp.TaxDeductionAmount    = taxDeductionAmount;
                rpayFundEmplDeductionTmp.write();
            }
        }

        return [totalTaxDeductionAmount, _totalAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFundTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void createFundTrans(ReportPeriod_RU _payPeriod,
                                RHRMEmplId      _emplId,
                                RPayCounterUnit _payCounterUnit = '')
    {
        RPayCounterTable            rPayCounterTable;
        RPayRateTable               rPayRateTable;
        RPayAmount                  totalAmount,
                                    totalTaxDeductionAmount,
                                    critAmount;

        RPayTrans                   rPayTrans;
        RPayFundMember              rPayFundMember;
        RHRMEmplTable               emplTable;
        RPayCorrectedPeriod         correctedPeriod;
        boolean                     isFundPercentRate;
        RPayRateCallContext         rPayRateCallContext = new RPayRateCallContext();

        while select CounterUnit,PayRateEmpl, PayRatePercent from rPayCounterTable
            where rPayCounterTable.LineType    == RPayCtypeType::BudgetFund &&
                  rPayCounterTable.CounterType == RPayCounterType::Fund     &&
                 (rPayCounterTable.CounterUnit == _payCounterUnit           ||
                 (_payCounterUnit ? false : true))
        {
            if (rPayCounterTable.PayRateEmpl)
            {
                rPayRateCallContext.reset();
                rPayRateCallContext.parmRateDate(_payPeriod);
                rPayRateCallContext.parmEmployeeId(_emplId);

                if (! RPayRateTable::find(rPayCounterTable.PayRateEmpl).getValue(rPayRateCallContext))
                {
                    this.createTransNotCalcFund(_emplId, rPayCounterTable.CounterUnit, _payPeriod);
                    continue;
                }
            }

            rPayRateTable     = RPayRateTable::find(rPayCounterTable.PayRatePercent);
            isFundPercentRate = rPayRateTable.RecId != 0 ? true : false;

            if (isFundPercentRate)
            {
                percentFund.add(rPayCounterTable.CounterUnit);
            }

            while select rPayTrans
                group by CorrectedPeriod asc
                where   rPayTrans.PayPeriod == _payPeriod
                     && rPayTrans.CorrectedPeriod
            exists join rPayFundMember
                where rPayFundMember.CounterUnit == rPayCounterTable.CounterUnit &&
                      rPayFundMember.PayCostType == rPayTrans.PayCtype
            exists join emplTable
                 where emplTable.EmployeeId     == rPayTrans.Emplid &&
                      (emplTable.PayMainEmplId  == _emplId || emplTable.EmployeeId == _emplId)
            {
                correctedPeriod = rPayTrans.CorrectedPeriod;

                do
                {
                    if (isFundPercentRate)
                    {
                        if (rPayRateTable.CritValueType)
                        {
                            critAmount = this.fundBaseAmount(_emplId, rPayCounterTable.CounterUnit, endmth(dateStartYr(correctedPeriod)), correctedPeriod, _payPeriod);

                            rPayRateCallContext.reset();
                            rPayRateCallContext.parmRateDate(correctedPeriod);
                            rPayRateCallContext.parmEmployeeId(_emplId);
                            rPayRateCallContext.parmCriterion(critAmount);

                            percentValue = rPayRateTable.getValue(rPayRateCallContext);
                        }
                        else
                        {
                            rPayRateCallContext.reset();
                            rPayRateCallContext.parmRateDate(correctedPeriod);
                            rPayRateCallContext.parmEmployeeId(_emplId);

                            percentValue = rPayRateTable.getValue(rPayRateCallContext);
                        }
                    }
                    else
                    {
                        percentValue = 0;
                    }

                    totalAmount = RPayTrans::calculateFundTotalCorrectedPeriod(rPayCounterTable.CounterUnit, _payPeriod, correctedPeriod, _emplId);

                    if (totalAmount || correctedPeriod != _payPeriod)
                    {
                        select firstonly forupdate rpayFundEmplSumTmp
                            where rpayFundEmplSumTmp.PayPeriod          == _payPeriod                   &&
                                  rpayFundEmplSumTmp.EmplId             == _emplId                      &&
                                  rpayFundEmplSumTmp.RpayCounterUnit    == rPayCounterTable.CounterUnit &&
                                  rpayFundEmplSumTmp.CorrectedPeriod    == correctedPeriod              &&
                                  rpayFundEmplSumTmp.PercentValue       == percentValue;

                        if (!rpayFundEmplSumTmp)
                        {
                            rpayFundEmplSumTmp.clear();
                            rpayFundEmplSumTmp.PayPeriod           = _payPeriod;
                            rpayFundEmplSumTmp.CorrectedPeriod     = correctedPeriod;
                            rpayFundEmplSumTmp.EmplId              = _emplId;
                            rpayFundEmplSumTmp.RpayCounterUnit     = rPayCounterTable.CounterUnit;
                            rpayFundEmplSumTmp.RpayFundTotalAmount = totalAmount;
                            rpayFundEmplSumTmp.insert();
                        }

                        [totalTaxDeductionAmount, totalAmount] = this.createFundDeduction(rPayCounterTable.CounterUnit, _emplId, _payPeriod, correctedPeriod, totalAmount, isFundPercentRate);

                        rpayFundEmplSumTmp.BaseAmount   = totalAmount;
                        rpayFundEmplSumTmp.PercentValue = percentValue;
                        rpayFundEmplSumTmp.update();

                        rpayFundEmplSumTmp.FundAmount = this.calcFundAmount(rPayCounterTable.CounterUnit, _payPeriod, correctedPeriod, _emplId, isFundPercentRate) - totalTaxDeductionAmount;

                        if (rpayFundEmplSumTmp.RpayFundTotalAmount == 0 && rpayFundEmplSumTmp.FundAmount == 0)
                        {
                            rpayFundEmplSumTmp.delete();
                        }
                        else
                        {
                            rpayFundEmplSumTmp.update();
                        }
                    }

                    correctedPeriod = endmth(nextMth(correctedPeriod));
                } while (correctedPeriod < _payPeriod);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxTrans</Name>
				<Source><![CDATA[
    private RPayAmount createTaxTrans(ReportPeriod_RU _payPeriod,
                                      RHRMEmplId      _emplId)
    {
        RPayTaxCalculate            rPayTaxCalculate;
        RPayTaxIncomeGroupTable     rPayTaxIncomeGroupTable;
        RPayTaxIncomeTable          rPayTaxIncomeTable;
        container                   conIncomeCurrent;
        RPayTaxEmplTrans            rPayTaxEmplTrans;
        RPayTaxEmplSum              rPayTaxEmplSum;
        RPayTaxSumYear              rPayTaxSumYear;
        RPayTaxDeductionTable       rPayTaxDeductionTable;
        RPayAmount                  deductionStandard,
                                    deductionStandardRefundable,
                                    dedStandardRefundable,
                                    incomeTotalCurrent,
                                    deductTaxAmount,
                                    deductTaxAmountFuture,
                                    addTaxAmountFuture,
                                    acquittanceTaxAmountFuture,
                                    acquittanceTaxAmount,
                                    redemptionAmount, redemptionAmountFuture;
        RHRMVirtualNetworkFamily    rhrmVirtualNetworkFamily;
        RPayFundMember              payFundMember;
        RPayTable                   payTable;
        Set                         selectedFund;
        RHRMEmplTable               emplTableCheckPayer;

        void insertTaxEmplTrans(RHRMFamilyRecId _familyRecId = 0)
        {
            conIncomeCurrent = rPayTaxCalculate.calcTaxIncomeCurrentCorrected(rPayTaxIncomeTable.RpayTaxIncomeCode, rPayTaxIncomeGroupTable.Fund, _payPeriod, _payPeriod, _familyRecId);
            if (rPayTaxIncomeGroupTable.StandardDeductions)
            {
                incomeTotalCurrent += conPeek(conIncomeCurrent,1) - conPeek(conIncomeCurrent,2);
            }
            if (conPeek(conIncomeCurrent,1) != 0 || conPeek(conIncomeCurrent,2) != 0)
            {
                rPayTaxEmplSum = this.getTaxEmplSum(_payPeriod, _emplId, rPayTaxIncomeGroupTable.RpayTaxIncomeGroupCode);
                rPayTaxEmplTrans.clear();
                rPayTaxEmplTrans.TaxSumRecId       = rPayTaxEmplSum.RecId;
                rPayTaxEmplTrans.RpayTaxIncDedCode = rPayTaxIncomeTable.RpayTaxIncomeCode;
                rPayTaxEmplTrans.RpayTaxType       = RpayTaxType::Income;
                rPayTaxEmplTrans.Amount            = conPeek(conIncomeCurrent,1);
                rPayTaxEmplTrans.FamilyRecId       = _familyRecId;

                if (conPeek(conIncomeCurrent,2) != 0)
                {
                    rPayTaxEmplTrans.RpayTaxDeductionCode = rPayTaxIncomeTable.RpayTaxDeductionCode;
                    rPayTaxEmplTrans.Deduction            = conPeek(conIncomeCurrent,2);
                }

                rPayTaxEmplTrans.insert();
            }
        }

        void calcStandardDeduction(boolean _unlimited)
        {
            RPayTaxCalculate rpayTaxCalculateLocal;
            rpayTaxCalculateLocal = RPayTaxCalculate::construct(rPayTaxIncomeGroupTable,_emplId);

            childCount = 0;

            while select rPayTaxDeductionTable
                order by RpayPeriodFrequence, RpayTaxDeductionCode
                where rPayTaxDeductionTable.RpayTaxDeductionType == RpayTaxDeductionType::Standard &&
                    ((rPayTaxDeductionTable.RpayPeriodFrequence  == RPayRatePeriodFrequency::Unlimeted && _unlimited) ||
                     (rPayTaxDeductionTable.RpayPeriodFrequence  != RPayRatePeriodFrequency::Unlimeted && !_unlimited))
            {
                if (rPayTaxDeductionTable.ActOnRelative)
                {
                    this.calcStandardDeductionRelatives(rPayTaxDeductionTable,
                                                        rPayTaxEmplTrans,
                                                        rpayTaxCalculateLocal,
                                                        _emplId,
                                                        _payPeriod,
                                                        incomeTotalCurrent,
                                                        rPayTaxIncomeGroupTable.RpayTaxIncomeGroupCode);
                }
                else
                {
                    [deductionStandard, dedStandardRefundable] = rpayTaxCalculateLocal.calcTaxDeductionCurrent(rPayTaxDeductionTable.RpayTaxDeductionCode,
                                                                                                               _payPeriod,
                                                                                                               incomeTotalCurrent);

                    deductionStandardRefundable += dedStandardRefundable;

                    if (deductionStandard != 0 && incomeTotalCurrent != 0)
                    {
                        rPayTaxEmplTrans.clear();
                        rPayTaxEmplSum = this.getTaxEmplSum(_payPeriod, _emplId, rPayTaxIncomeGroupTable.RpayTaxIncomeGroupCode);

                        select firstonly forupdate rPayTaxEmplTrans
                            where rPayTaxEmplTrans.TaxSumRecId          == rPayTaxEmplSum.RecId &&
                                  rPayTaxEmplTrans.RpayTaxIncDedCode    == rPayTaxDeductionTable.RpayTaxDeductionCode &&
                                  rPayTaxEmplTrans.RpayTaxType          == RpayTaxType::Deduction;

                        if (rPayTaxEmplTrans)
                        {
                            rPayTaxEmplTrans.Amount = deductionStandard;
                            rPayTaxEmplTrans.update();
                        }
                        else
                        {
                            rPayTaxEmplTrans.TaxSumRecId       = rPayTaxEmplSum.RecId;
                            rPayTaxEmplTrans.RpayTaxIncDedCode = rPayTaxDeductionTable.RpayTaxDeductionCode;
                            rPayTaxEmplTrans.RpayTaxType       = RpayTaxType::Deduction;
                            rPayTaxEmplTrans.Amount            = deductionStandard;

                            rPayTaxEmplTrans.insert();
                        }
                    }
                }
            }
        }

        emplTableCheckPayer = RHRMEmplTable::find(_emplId);

        if (emplTableCheckPayer.personTable().TaxPayBlocked)
        {
            return 0;
        }

        selectedFund = new Set(Types::String);

        ttsbegin;

        while select rPayTaxIncomeGroupTable
            order by RateCodeGroup desc, RpayTaxIncomeGroupCode
            where rPayTaxIncomeGroupTable.EmplTaxStatus == emplTaxPeriod.taxStatus()
        {
            if (selectedFund.in(rPayTaxIncomeGroupTable.Fund))
            {
                continue;
            }

            if (!emplTaxPeriod.taxGroup2Rate(rPayTaxIncomeGroupTable))
            {
                continue;
            }

            if (rPayTaxIncomeGroupTable.RateCodeGroup &&
                rPayTaxIncomeGroupTable.RateCodeGroup == emplTaxPeriod.taxGroup2Rate(rPayTaxIncomeGroupTable))
            {
                selectedFund.add(rPayTaxIncomeGroupTable.Fund);
            }

            rPayTaxCalculate           = RPayTaxCalculate::constructForHistory(rPayTaxIncomeGroupTable, _emplId);
            deductTaxAmount            = 0;
            addTaxAmountFuture         = 0;
            deductTaxAmountFuture      = 0;
            acquittanceTaxAmountFuture = 0;
            acquittanceTaxAmount       = 0;

            while select RpayTaxDeductionCode, RpayTaxIncomeCode from rPayTaxIncomeTable
                exists join payTable
                    where payTable.RpayTaxIncomeCode == rPayTaxIncomeTable.RpayTaxIncomeCode
                    exists join payFundMember
                        where payFundMember.PayCostType == payTable.PayCtype &&
                              payFundMember.CounterUnit == rPayTaxIncomeGroupTable.Fund
            {
                if (rPayTaxIncomeTable.RpayTaxDeductionCode && RPayTaxDeductionTable::find(rPayTaxIncomeTable.RpayTaxDeductionCode).ActOnRelative)
                {
                    while select RecId from rhrmVirtualNetworkFamily
                        where (rhrmVirtualNetworkFamily.Relatives == RHRMRelationship::Son ||
                               rhrmVirtualNetworkFamily.Relatives == RHRMRelationship::Daughter) &&
                               rhrmVirtualNetworkFamily.PersonnelNumber == emplTableCheckPayer.personTable().PersonnelNumber
                    {
                        insertTaxEmplTrans(rhrmVirtualNetworkFamily.RecId);
                    }
                }
                else
                {
                    insertTaxEmplTrans();
                }
            }

            if (_payPeriod <= RPayParameters::payPeriod(_emplId))
            {
                deductTaxAmount        = this.calculateCostTypeLinked(rPayTaxIncomeGroupTable,_payPeriod,_emplId);
                redemptionAmount       = this.calculateCostTypeLinked(rPayTaxIncomeGroupTable,_payPeriod,_emplId, NoYes::Yes);
                acquittanceTaxAmount = RPayTrans::calculateCostType(rPayTaxIncomeGroupTable.AcquittanceCostType,_payPeriod,_emplId);
            }

            if (rPayTaxParameters.RpayFutureTaxTypeCalc == RpayFutureTaxTypeCalc::PayPeriod)
            {
                addTaxAmountFuture     = this.calculateCostType(rPayTaxIncomeGroupTable.FutureTaxCostType,_payPeriod,_emplId);
                deductTaxAmountFuture  = this.calculateCostTypeBySourceDate(rPayTaxIncomeGroupTable.FutureTaxCostType,_payPeriod,_emplId);
                redemptionAmountFuture = this.calculateCostTypeBySourceDate(rPayTaxIncomeGroupTable.FutureTaxCostType,_payPeriod,_emplId, NoYes::Yes);
                rPayTaxSumYear         = RPayTaxSumYear::find(_emplId,rPayTaxIncomeGroupTable.RpayTaxIncomeGroupCode,dateEndYr(prevYr(_payPeriod)));
                acquittanceTaxAmountFuture = conPeek(RPayTaxEmplSum::getTaxSum(_emplId,
                                                                               rPayTaxIncomeGroupTable.RpayTaxIncomeGroupCode,
                                                                               dateStartYr(_payPeriod),
                                                                               dateEndYr(_payPeriod),
                                                                               dateNull(),
                                                                               dateMax(),
                                                                               true),9);
                acquittanceTaxAmountFuture = max(0,rPayTaxSumYear.FutureTaxAmount - acquittanceTaxAmountFuture);
                acquittanceTaxAmountFuture = min(acquittanceTaxAmountFuture,- (deductTaxAmountFuture));
            }

            if (deductTaxAmount            ||
                addTaxAmountFuture         ||
                acquittanceTaxAmount       ||
                acquittanceTaxAmountFuture ||
                deductTaxAmountFuture      ||
                redemptionAmount)
            {
                rPayTaxEmplSum = this.getTaxEmplSum(_payPeriod, _emplId, rPayTaxIncomeGroupTable.RpayTaxIncomeGroupCode);
                rPayTaxEmplSum.DeductTaxAmountFuture   = - (addTaxAmountFuture - deductTaxAmountFuture);
                rPayTaxEmplSum.DeductTaxAmount         = -  deductTaxAmount;
                rPayTaxEmplSum.PayrollRedemptionAmount = redemptionAmount + redemptionAmountFuture;
                rPayTaxEmplSum.Acquittance             = acquittanceTaxAmount;
                rPayTaxEmplSum.AcquittanceFuturePeriod = acquittanceTaxAmountFuture;
                rPayTaxEmplSum.update();
            }

            if (rPayTaxIncomeGroupTable.StandardDeductions)
            {
                calculatedDeduction = new Set(Types::Integer);
                calcStandardDeduction(false);
                calcStandardDeduction(true);
                incomeTotalCurrent = 0;
            }
        }

        ttscommit;

        return deductionStandardRefundable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransNotCalcFund</Name>
				<Source><![CDATA[
    private void createTransNotCalcFund(
        RHRMEmplId      _emplId,
        RPayCounterUnit _counterUnit,
        ReportPeriod_RU _payPeriod)
    {
        RPayFundEmplSum         fundEmplSum;
        RPayFundEmplDeduction   fundEmplDeduction;

        while select PayPeriod, CorrectedPeriod, EmplId, RpayCounterUnit, PercentValue from fundEmplSum
            where fundEmplSum.EmplId            == _emplId      &&
                  fundEmplSum.RpayCounterUnit   == _counterUnit &&
                  fundEmplSum.PayPeriod         == _payPeriod   &&
                  fundEmplSum.PayPeriod         <  openPeriod
        {
            rpayFundEmplSumTmp.clear();
            rpayFundEmplSumTmp.PayPeriod           = fundEmplSum.PayPeriod;
            rpayFundEmplSumTmp.CorrectedPeriod     = fundEmplSum.CorrectedPeriod;
            rpayFundEmplSumTmp.EmplId              = fundEmplSum.EmplId;
            rpayFundEmplSumTmp.RpayCounterUnit     = fundEmplSum.RpayCounterUnit;
            rpayFundEmplSumTmp.PercentValue        = fundEmplSum.PercentValue;
            rpayFundEmplSumTmp.insert();
        }

        while select PayPeriod, CorrectedPeriod, EmplId, RpayCounterUnit, RpayFundDeductionCode from fundEmplDeduction
            where fundEmplDeduction.EmplId            == _emplId      &&
                  fundEmplDeduction.RpayCounterUnit   == _counterUnit &&
                  fundEmplDeduction.PayPeriod         == _payPeriod   &&
                  fundEmplDeduction.PayPeriod         <  openPeriod
        {
            rpayFundEmplDeductionTmp.clear();
            rpayFundEmplDeductionTmp.PayPeriod             = fundEmplDeduction.PayPeriod;
            rpayFundEmplDeductionTmp.CorrectedPeriod       = fundEmplDeduction.CorrectedPeriod;
            rpayFundEmplDeductionTmp.EmplId                = fundEmplDeduction.EmplId;
            rpayFundEmplDeductionTmp.RpayCounterUnit       = fundEmplDeduction.RpayCounterUnit;
            rpayFundEmplDeductionTmp.RpayFundDeductionCode = fundEmplDeduction.RpayFundDeductionCode;
            rpayFundEmplDeductionTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundAmount</Name>
				<Source><![CDATA[
    private RPayAmount fundAmount(RHRMEmplId          _emplId,
                                  RPayCounterUnit     _payCounterUnit,
                                  RPayCorrectedPeriod _startCorrectedPeriod = endmth(dateStartYr(RPayParameters::payPeriod())),
                                  RPayCorrectedPeriod _endCorrectedPeriod   = RPayParameters::payPeriod(),
                                  ReportPeriod_RU     _payPeriod            = RPayParameters::payPeriod(),
                                  boolean             _usePercent           = false,
                                  Percent             _percentValue         = 0,
                                  boolean             _includeLast          = true)
    {
        RPayFundEmplSum rPayFundEmplSum, rpayFundEmplSumYr;
        RPayAmount  fundAmount;

        if (!recalc)
        {
            rPayFundEmplSum.setTmp();
            rPayFundEmplSum.setTmpData(rpayFundEmplSumTmp);
        }

        select sum(FundAmount) from rPayFundEmplSum
            where rPayFundEmplSum.EmplId          == _emplId               &&
                  rPayFundEmplSum.RpayCounterUnit == _payCounterUnit       &&
                  rPayFundEmplSum.CorrectedPeriod >= _startCorrectedPeriod &&
                  rPayFundEmplSum.CorrectedPeriod <= _endCorrectedPeriod   &&
                  rPayFundEmplSum.PayPeriod       <= _payPeriod            &&
                 (!_usePercent ||
                  rPayFundEmplSum.PercentValue   == _percentValue)         &&
                 (_includeLast ||
                 (rPayFundEmplSum.CorrectedPeriod != _endCorrectedPeriod   ||
                  rPayFundEmplSum.PayPeriod       != _payPeriod));

        fundAmount = rPayFundEmplSum.FundAmount;

        if (year(_endCorrectedPeriod) < year(_payPeriod) && rPayFundEmplSum.isTmp())
        {
            select sum(FundAmount) from rpayFundEmplSumYr
                where rpayFundEmplSumYr.EmplId          == _emplId                      &&
                      rpayFundEmplSumYr.RpayCounterUnit == _payCounterUnit              &&
                      rpayFundEmplSumYr.CorrectedPeriod >= _startCorrectedPeriod        &&
                      rpayFundEmplSumYr.CorrectedPeriod <= _endCorrectedPeriod          &&
                      rpayFundEmplSumYr.PayPeriod       <= dateStartYr(_payPeriod) - 1  &&
                     (!_usePercent ||
                      rpayFundEmplSumYr.PercentValue   == _percentValue)                &&
                     (_includeLast ||
                     (rpayFundEmplSumYr.CorrectedPeriod != _endCorrectedPeriod   ||
                      rpayFundEmplSumYr.PayPeriod       != _payPeriod));

            fundAmount += rpayFundEmplSumYr.FundAmount;
        }

        return fundAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundBaseAmount</Name>
				<Source><![CDATA[
    private RPayAmount fundBaseAmount(RHRMEmplId          _emplId,
                                      RPayCounterUnit     _payCounterUnit,
                                      RPayCorrectedPeriod _startCorrectedPeriod = endmth(dateStartYr(RPayParameters::payPeriod())),
                                      RPayCorrectedPeriod _endCorrectedPeriod   = RPayParameters::payPeriod(),
                                      ReportPeriod_RU     _payPeriod            = RPayParameters::payPeriod(),
                                      boolean             _usePercent           = false,
                                      Percent             _percentValue         = 0,
                                      boolean             _includeLast          = true)
    {
        RPayFundEmplSum rPayFundEmplSum, rpayFundEmplSumYr;
        RPayAmount baseAmount;

        if (!recalc)
        {
            rPayFundEmplSum.setTmp();
            rPayFundEmplSum.setTmpData(rpayFundEmplSumTmp);
        }

        select sum(BaseAmount) from rPayFundEmplSum
            where rPayFundEmplSum.EmplId          == _emplId               &&
                  rPayFundEmplSum.RpayCounterUnit == _payCounterUnit       &&
                  rPayFundEmplSum.CorrectedPeriod >= _startCorrectedPeriod &&
                  rPayFundEmplSum.CorrectedPeriod <= _endCorrectedPeriod   &&
                  rPayFundEmplSum.PayPeriod       <= _payPeriod            &&
                 (!_usePercent ||
                  rPayFundEmplSum.PercentValue   == _percentValue)         &&
                 (_includeLast ||
                 (rPayFundEmplSum.CorrectedPeriod != _endCorrectedPeriod   ||
                  rPayFundEmplSum.PayPeriod       != _payPeriod));

        baseAmount = rPayFundEmplSum.BaseAmount;

        if (year(_endCorrectedPeriod) < year(_payPeriod) && rPayFundEmplSum.isTmp())
        {
            select sum(BaseAmount) from rpayFundEmplSumYr
                where rpayFundEmplSumYr.EmplId          == _emplId                      &&
                      rpayFundEmplSumYr.RpayCounterUnit == _payCounterUnit              &&
                      rpayFundEmplSumYr.CorrectedPeriod >= _startCorrectedPeriod        &&
                      rpayFundEmplSumYr.CorrectedPeriod <= _endCorrectedPeriod          &&
                      rpayFundEmplSumYr.PayPeriod       <= dateStartYr(_payPeriod) - 1  &&
                     (!_usePercent ||
                      rpayFundEmplSumYr.PercentValue   == _percentValue)                &&
                     (_includeLast ||
                     (rpayFundEmplSumYr.CorrectedPeriod != _endCorrectedPeriod   ||
                      rpayFundEmplSumYr.PayPeriod       != _payPeriod));

            baseAmount += rpayFundEmplSumYr.BaseAmount;
        }

        return baseAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBaseTotalDeductionAmountPayCType</Name>
				<Source><![CDATA[
    private RPayAmount getBaseTotalDeductionAmountPayCType(
        RPayCounterUnit         _payCounterUnit,
        ReportPeriod_RU         _payPeriod,
        RHRMEmplId              _emplId,
        RPayCorrectedPeriod     _correctedPeriod,
        RHRMFamilyRecId         _familyRecId,
        RPayFundDeductionTable  _rPayFundDeductionTable)
    {
        RPayTrans               payTrans;
        RPayFundMember          payFundMember;
        RHRMEmplTable           emplTable;
        RPayFundCtypeDeductionMember rPayFundCtypeDeductionMember;
        ReportPeriod_RU         periodStart = RPayController::getFirstPeriodFrequency(
                                    _correctedPeriod,
                                    _rPayFundDeductionTable.RpayPeriodFrequence,
                                    _rPayFundDeductionTable.RpayRateCodeValue);;

        select sum(Amount) from payTrans
            where payTrans.PayPeriod        <= _payPeriod       &&
                  payTrans.CorrectedPeriod  >= periodStart      &&
                  payTrans.CorrectedPeriod  <= _correctedPeriod &&
                  (payTrans.FamilyRecId     == _familyRecId || !_familyRecId)
        exists join payFundMember
            where payFundMember.CounterUnit     == _payCounterUnit &&
                    payFundMember.PayCostType   == payTrans.PayCtype
        exists join emplTable
            where emplTable.EmployeeId          == payTrans.Emplid &&
                    (emplTable.PayMainEmplId    == _emplId ||
                    emplTable.EmployeeId        == _emplId)
        exists join rPayFundCtypeDeductionMember
            where rPayFundCtypeDeductionMember.RpayFundDeductionCode    == _rPayFundDeductionTable.RpayFundDeductionCode &&
                    rPayFundCtypeDeductionMember.rPayCostType           == payTrans.PayCtype;

        return payTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFundDeductionSum</Name>
				<Source><![CDATA[
    private container getFundDeductionSum(RHRMEmplId            _emplId,
                                          RPayCounterUnit       _payCounterUnit,
                                          RpayFundDeductionCode _payFundDeductionCode,
                                          RPayCorrectedPeriod   _startCorrectedPeriod = endmth(dateStartYr(RPayParameters::payPeriod())),
                                          RPayCorrectedPeriod   _endCorrectedPeriod   = RPayParameters::payPeriod(),
                                          ReportPeriod_RU       _payPeriod            = RPayParameters::payPeriod(),
                                          boolean               _includeLast          = true,
                                          RHRMFamilyRecId       _familyRecId          = 0)
    {
        RPayFundEmplDeduction rPayFundEmplDeduction, rpayFundEmplDeductionYr;
        RPayAmount baseDeductionAmount, deductionAmount;

        if (!recalc)
        {
            rPayFundEmplDeduction.setTmp();
            rPayFundEmplDeduction.setTmpData(rpayFundEmplDeductionTmp);
        }

        select sum(DeductionAmount),sum(BaseDeductionAmount) from rPayFundEmplDeduction
            where rPayFundEmplDeduction.EmplId                == _emplId               &&
                  rPayFundEmplDeduction.RpayCounterUnit       == _payCounterUnit       &&
                  rPayFundEmplDeduction.RpayFundDeductionCode == _payFundDeductionCode &&
                  rPayFundEmplDeduction.CorrectedPeriod       >= _startCorrectedPeriod &&
                  rPayFundEmplDeduction.CorrectedPeriod       <= _endCorrectedPeriod   &&
                  rPayFundEmplDeduction.PayPeriod             <= _payPeriod            &&
                 (_includeLast ||
                 (rPayFundEmplDeduction.CorrectedPeriod       != _endCorrectedPeriod   ||
                  rPayFundEmplDeduction.PayPeriod             != _payPeriod))          &&
                  (rPayFundEmplDeduction.FamilyRecId          == _familyRecId || !_familyRecId);

        baseDeductionAmount = rPayFundEmplDeduction.BaseDeductionAmount;
        deductionAmount     = rPayFundEmplDeduction.DeductionAmount;

        //it is used for calculation transactions with years intersections
        if (year(_endCorrectedPeriod) < year(_payPeriod) && rPayFundEmplDeduction.isTmp())
        {
            select sum(DeductionAmount),sum(BaseDeductionAmount) from rpayFundEmplDeductionYr
                where rpayFundEmplDeductionYr.EmplId                == _emplId                      &&
                      rpayFundEmplDeductionYr.RpayCounterUnit       == _payCounterUnit              &&
                      rpayFundEmplDeductionYr.RpayFundDeductionCode == _payFundDeductionCode        &&
                      rpayFundEmplDeductionYr.CorrectedPeriod       >= _startCorrectedPeriod        &&
                      rpayFundEmplDeductionYr.CorrectedPeriod       <= _endCorrectedPeriod          &&
                      rpayFundEmplDeductionYr.PayPeriod             <= dateStartYr(_payPeriod) - 1  &&
                     (_includeLast ||
                     (rpayFundEmplDeductionYr.CorrectedPeriod       != _endCorrectedPeriod   ||
                      rpayFundEmplDeductionYr.PayPeriod             != _payPeriod))                 &&
                      (rpayFundEmplDeductionYr.FamilyRecId          == _familyRecId || !_familyRecId);

            baseDeductionAmount += rpayFundEmplDeductionYr.BaseDeductionAmount;
            deductionAmount     += rpayFundEmplDeductionYr.DeductionAmount;
        }

        return [baseDeductionAmount, deductionAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFundTotalTaxDeductionAmount</Name>
				<Source><![CDATA[
    private RPayAmount getFundTotalTaxDeductionAmount(RHRMEmplId          _emplId,
                                                      RPayCounterUnit     _payCounterUnit,
                                                      RPayCorrectedPeriod _startCorrectedPeriod = endmth(dateStartYr(RPayParameters::payPeriod())),
                                                      RPayCorrectedPeriod _endCorrectedPeriod   = RPayParameters::payPeriod(),
                                                      ReportPeriod_RU     _payPeriod            = RPayParameters::payPeriod(),
                                                      boolean             _includeLast          = true ,
                                                      boolean             _usePercent           = false,
                                                      Percent             _percentValue         = 0)
    {
        RPayFundEmplDeduction rPayFundEmplDeduction;
        RPayFundEmplSum       fundEmplSumPct;

        if (!recalc)
        {
            rPayFundEmplDeduction.setTmp();
            rPayFundEmplDeduction.setTmpData(rpayFundEmplDeductionTmp);
            fundEmplSumPct.setTmp();
            fundEmplSumPct.setTmpData(rpayFundEmplSumTmp);
        }

        if (_usePercent)
        {
            select sum(TaxDeductionAmount) from rPayFundEmplDeduction
                where rPayFundEmplDeduction.EmplId          == _emplId               &&
                      rPayFundEmplDeduction.RpayCounterUnit == _payCounterUnit       &&
                      rPayFundEmplDeduction.CorrectedPeriod >= _startCorrectedPeriod &&
                      rPayFundEmplDeduction.CorrectedPeriod <= _endCorrectedPeriod   &&
                      rPayFundEmplDeduction.PayPeriod       <= _payPeriod            &&
                     (_includeLast ||
                     (rPayFundEmplDeduction.CorrectedPeriod != _endCorrectedPeriod  ||
                      rPayFundEmplDeduction.PayPeriod       != _payPeriod))
                join RecId from fundEmplSumPct
                    where fundEmplSumPct.EmplId             == rPayFundEmplDeduction.EmplId &&
                          fundEmplSumPct.PayPeriod          == rPayFundEmplDeduction.PayPeriod &&
                          fundEmplSumPct.CorrectedPeriod    == rPayFundEmplDeduction.CorrectedPeriod &&
                          fundEmplSumPct.RpayCounterUnit    == rPayFundEmplDeduction.RpayCounterUnit &&
                          fundEmplSumPct.PercentValue       == _percentValue;
        }
        else
        {
            select sum(TaxDeductionAmount) from rPayFundEmplDeduction
                where rPayFundEmplDeduction.EmplId          == _emplId               &&
                      rPayFundEmplDeduction.RpayCounterUnit == _payCounterUnit       &&
                      rPayFundEmplDeduction.CorrectedPeriod >= _startCorrectedPeriod &&
                      rPayFundEmplDeduction.CorrectedPeriod <= _endCorrectedPeriod   &&
                      rPayFundEmplDeduction.PayPeriod       <= _payPeriod            &&
                     (_includeLast ||
                     (rPayFundEmplDeduction.CorrectedPeriod != _endCorrectedPeriod  ||
                      rPayFundEmplDeduction.PayPeriod       != _payPeriod));
        }

        return rPayFundEmplDeduction.TaxDeductionAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastYearsToUpdateCompensation</Name>
				<Source><![CDATA[
    private Set getLastYearsToUpdateCompensation(RHRMEmplId _emplId)
    {
        Set                 lastYearsSet = new Set(Types::Integer);
        RPayFundEmplSum     rPayFundEmplSum;
        Yr                  prevCalcYr;

        while select rPayFundEmplSum
            group CorrectedPeriod
            where   rPayFundEmplSum.PayPeriod       == openPeriod
                &&  rPayFundEmplSum.CorrectedPeriod < dateStartYr(openPeriod)
                && (rPayFundEmplSum.EmplId          == _emplId || !_emplId)
                &&  rPayFundEmplSum.RpayCounterUnit == RPayTaxParameters::find().CounterUnit2011
        {
            if (prevCalcYr != year(rPayFundEmplSum.CorrectedPeriod))
            {
                prevCalcYr = year(rPayFundEmplSum.CorrectedPeriod);
                lastYearsSet.add(prevCalcYr);
            }
        }

        return lastYearsSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxEmplSum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected  Common getTaxEmplSum(ReportPeriod_RU         _payPeriod,
                                    RHRMEmplId              _emplId,
                                    RpayTaxIncomeGroupCode  _taxIncomeGroupCode)
    {
        RPayTaxEmplSum rpayTaxEmplSumLocal;

        select firstonly forupdate rpayTaxEmplSumLocal
            where rpayTaxEmplSumLocal.PayPeriod             == _payPeriod   &&
                 rpayTaxEmplSumLocal.EmplId                 == _emplId      &&
                 rpayTaxEmplSumLocal.Source                 == NoYes::No    &&
                 rpayTaxEmplSumLocal.RpayTaxIncomeGroupCode == _taxIncomeGroupCode;

        if (! rpayTaxEmplSumLocal.RecId)
        {
            rpayTaxEmplSumLocal.PayPeriod              = _payPeriod;
            rpayTaxEmplSumLocal.CorrectedPeriod        = _payPeriod;
            rpayTaxEmplSumLocal.EmplId                 = _emplId ;
            rpayTaxEmplSumLocal.RpayTaxIncomeGroupCode = _taxIncomeGroupCode;
            rpayTaxEmplSumLocal.insert();
        }

        return rpayTaxEmplSumLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmplChildList</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initEmplChildList(
        RHRMEmplId      _emplId,
        ReportPeriod_RU _payPeriod)
    {
        RHRMVirtualNetworkFamily    rhrmVirtualNetworkFamily;
        Map                         extKeyMap; //map is used to support duplicate keys in childList
        TransDate effectiveDate;
        RPayRateCallContext rateContext;

        RefRecId relativeRecId;
        boolean  calculate;
        Counter  extKey;

        extKeyMap = new Map(Types::Container, Types::Integer);
        childList = new Map(Types::Container, Types::Container);

        rateContext = RPayRateCallContext::construct(_payPeriod, _emplId);

        while select * from rhrmVirtualNetworkFamily
            where (rhrmVirtualNetworkFamily.Relatives == RHRMRelationship::Son ||
                   rhrmVirtualNetworkFamily.Relatives == RHRMRelationship::Daughter) &&
                   rhrmVirtualNetworkFamily.ApplyDeduction                           &&
                   rhrmVirtualNetworkFamily.DeductionTypeKey                         &&
                   rhrmVirtualNetworkFamily.PersonnelNumber == RHRMEmplTable::find(_emplId).personTable().PersonnelNumber
        {
            if ((endmth(rhrmVirtualNetworkFamily.TaxDeductionTerminationDate) < _payPeriod) &&
                rhrmVirtualNetworkFamily.TaxDeductionTerminationDate)
            {
                continue;
            }

            calculate = any2int(RPayRateTable::find(rhrmVirtualNetworkFamily.ApplyDeduction).getValue(rateContext));

            if (rPayTaxParameters.CalcRelativeByPerson == NoYes::No && calculate == false)
            {
                continue;
            }

            effectiveDate = rhrmVirtualNetworkFamily.AdoptionDate ? rhrmVirtualNetworkFamily.AdoptionDate
                                                                  : rhrmVirtualNetworkFamily.BirthDate;

            if (effectiveDate <= _payPeriod)
            {
                extKey = 0;
                if (extKeyMap.exists([effectiveDate, rhrmVirtualNetworkFamily.BirthTime]))
                {
                    extKey = extKeyMap.lookup([effectiveDate, rhrmVirtualNetworkFamily.BirthTime]);
                }

                relativeRecId = rhrmVirtualNetworkFamily.RecId;
                childList.insert([effectiveDate, rhrmVirtualNetworkFamily.BirthTime, extKey], [#ChildValue]);
                extKey++;
                extKeyMap.insert([effectiveDate, rhrmVirtualNetworkFamily.BirthTime], extKey);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNonResident</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean isNonResident(ReportPeriod_RU _payPeriod, RHRMEmplId _emplId)
    {
        RPayRateCallContext          rPayRateCallContext = new RPayRateCallContext();

        rPayRateCallContext.parmRateDate(_payPeriod);
        rPayRateCallContext.parmEmployeeId(_emplId);

        return RPayRateTable::find(rPayTaxParameters.NonResidentRateCode).getValue(rPayRateCallContext) ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void new(boolean _recalc = false)
    {
        rPayTaxParameters           = RPayTaxParameters::find();
        openPeriod                  = RPayParameters::payPeriod();
        percentFund                 = new Set(Types::String);
        informedFundDeductionSet    = new Set(Types::Container);

        recalc = _recalc;

        if (!_recalc)
        {
            rpayFundEmplSumTmp.setTmp();
            rpayFundEmplDeductionTmp.setTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runFund</Name>
				<Source><![CDATA[
    #AviFiles
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void runFund(ReportPeriod_RU _payPeriod      = RPayParameters::payPeriod(),
                        RHRMEmplId      _emplId         = '',
                        RPayCounterUnit _counterUnit    = '')
    {
        SysOperationProgress  operationProgress;
        RHRMEmplTable         emplTable;

        openPeriod = max(openPeriod, RPayParameters::payPeriod(_emplId));

        if (! _emplId)
        {
            operationProgress = new SysOperationProgress();
            operationProgress.setCaption(strFmt("@RUP602", _payPeriod));
            operationProgress.setAnimation(#AviUpdate);

            select count(RecId) from emplTable
                where emplTable.PayMainEmplId == emplTable.EmployeeId;

            operationProgress.setTotal(emplTable.RecId);
        }

        while select EmployeeId from emplTable
            where emplTable.PayMainEmplId == emplTable.EmployeeId &&
                 (emplTable.EmployeeId    == _emplId || !_emplId)
        {
            if (operationProgress)
            {
                operationProgress.setText("@RUP372" + emplTable.EmployeeId);
                operationProgress.incCount();
            }

            this.createFundTrans(_payPeriod, emplTable.EmployeeId, _counterUnit);

            if (!_emplId && !recalc)
            {
                this.createCorrection(emplTable.EmployeeId);
            }
        }

        if (_emplId)
        {
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runFundPeriod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void runFundPeriod(
        RHRMEmplId      _emplId,
        RPayCounterUnit _counterUnit)
    {
        RPayFundEmplSum         rPayFundEmplSum;
        RPayFundEmplDeduction   rPayFundEmplDeduction;
        Set                     lastYearsSet = new Set(Types::Integer);
        ReportPeriod_RU         currentPeriod;

        openPeriod = max(openPeriod, RPayParameters::payPeriod(_emplId));
        lastYearsSet = this.getLastYearsToUpdateCompensation(_emplId);
        ttsbegin;
        delete_from rPayFundEmplSum
                where rPayFundEmplSum.PayPeriod         >= dateStartYr(openPeriod)  &&
                      rPayFundEmplSum.PayPeriod         <= dateEndYr(openPeriod)    &&
                      rPayFundEmplSum.RpayCounterUnit   == _counterUnit             &&
                     (rPayFundEmplSum.EmplId            == _emplId || !_emplId);

        delete_from rPayFundEmplDeduction
            where rPayFundEmplDeduction.PayPeriod       >= dateStartYr(openPeriod) &&
                  rPayFundEmplDeduction.PayPeriod       <= dateEndYr(openPeriod)   &&
                  rPayFundEmplDeduction.RpayCounterUnit == _counterUnit            &&
                 (rPayFundEmplDeduction.EmplId          == _emplId || !_emplId);

        for (currentPeriod = dateEndMth(dateStartYr(openPeriod)); currentPeriod <= dateEndYr(openPeriod); currentPeriod = endmth(nextMth(currentPeriod)))
        {
            this.runFund(currentPeriod, _emplId, _counterUnit);
        }

        this.updateSumYearCompensation(year(openPeriod), _emplId, lastYearsSet);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runTax</Name>
				<Source><![CDATA[
    #AviFiles
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayAmount runTax(ReportPeriod_RU _payPeriod = RPayParameters::payPeriod(),
                             RHRMEmplId      _emplId    = '')
    {
        RPayTaxEmplTrans     rPayTaxEmplTrans;
        RPayTaxEmplSum       rPayTaxEmplSum;
        RPayTaxSumYear       rPayTaxSumYear;
        SysOperationProgress operationProgress;
        RHRMEmplTable        emplTable;
        RPayAmount           deductionStandardRefundable;

        ttsbegin;

        while select forupdate rPayTaxEmplSum
                  where rPayTaxEmplSum.PayPeriod >= _payPeriod                     &&
                        rPayTaxEmplSum.Source    == NoYes::No                      &&
                       (rPayTaxEmplSum.EmplId    == _emplId || (_emplId ? false : true))
        {
            delete_from rPayTaxEmplTrans
                where rPayTaxEmplTrans.TaxSumRecId  == rPayTaxEmplSum.RecId &&
                      rPayTaxEmplTrans.Manual       == NoYes::No;

            rPayTaxEmplSum.DeductTaxAmount         = 0;
            rPayTaxEmplSum.DeductTaxAmountFuture   = 0;
            rPayTaxEmplSum.AddTaxAmount            = 0;
            rPayTaxEmplSum.ReckoningTaxAmount      = 0;
            rPayTaxEmplSum.Acquittance             = 0;
            rPayTaxEmplSum.AcquittanceFuturePeriod = 0;
            rPayTaxEmplSum.PayrollRedemptionAmount = 0;
            rPayTaxEmplSum.update();
        }

        while select forupdate rPayTaxSumYear
                  where rPayTaxSumYear.PayPeriod >= dateEndYr(_payPeriod) &&
                       (rPayTaxSumYear.EmplId    == _emplId || (_emplId ? false : true))
        {
            rPayTaxSumYear.AddTaxAmount    = 0;
            rPayTaxSumYear.DeductTaxAmount = 0;
            rPayTaxSumYear.Acquittance     = 0;
            rPayTaxSumYear.FutureTaxAmount = 0;
            rPayTaxSumYear.update();
        }

        if (! _emplId)
        {
            operationProgress = new SysOperationProgress();
            operationProgress.setCaption(strFmt("@RUP591",_payPeriod));
            operationProgress.setAnimation(#AviUpdate);

            select count(RecId) from emplTable
                where emplTable.PayMainEmplId == emplTable.EmployeeId;

            operationProgress.setTotal(any2int(emplTable.RecId));
        }

        while select EmployeeId from emplTable
            where emplTable.PayMainEmplId == emplTable.EmployeeId &&
                 (emplTable.EmployeeId == _emplId || (_emplId ? false : true))
        {
            emplTaxPeriod  = RPayEmplTax::construct(emplTable.EmployeeId, RPayParameters::payPeriod(emplTable.EmployeeId));
            if (!emplTaxPeriod.useLastTaxStatus())
            {
                emplTaxPeriod  = RPayEmplTax::construct(emplTable.EmployeeId, _payPeriod);
            }

            this.initEmplChildList(emplTable.EmployeeId, _payPeriod);
            deductionStandardRefundable += this.createTaxTrans(_payPeriod, emplTable.EmployeeId);

            if (operationProgress)
            {
                operationProgress.setText("@RUP372" + emplTable.EmployeeId);
                operationProgress.incCount();
            }
        }

        while select PayPeriod, EmplId from rPayTaxEmplSum
                  group by EmplId, PayPeriod
                  where rPayTaxEmplSum.PayPeriod >= _payPeriod                     &&
                        rPayTaxEmplSum.Source    == NoYes::No                      &&
                       (rPayTaxEmplSum.EmplId    == _emplId || (_emplId ? false : true))
        {
            emplTaxPeriod  = RPayEmplTax::construct(rPayTaxEmplSum.EmplId, RPayParameters::payPeriod(rPayTaxEmplSum.EmplId));
            if (!emplTaxPeriod.useLastTaxStatus())
            {
                emplTaxPeriod  = RPayEmplTax::construct(rPayTaxEmplSum.EmplId, _payPeriod);
            }

            this.updateTaxSum(rPayTaxEmplSum.PayPeriod,rPayTaxEmplSum.EmplId);
        }

        while select EmployeeId from emplTable
            where emplTable.PayMainEmplId == emplTable.EmployeeId &&
                 (emplTable.EmployeeId == _emplId || (_emplId ? false : true))
        {
            this.updateTaxSumYear(_payPeriod,emplTable.EmployeeId);
        }

        if (_emplId)
        {
        }

        ttscommit;

        return deductionStandardRefundable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runTaxPeriod</Name>
				<Source><![CDATA[
    private void runTaxPeriod()
    {
        Dialog          dialog =  new Dialog("@RUP612");
        DialogField     dialogFieldPayPeriod;
        ReportPeriod_RU payPeriod, currentPeriod;

        dialogFieldPayPeriod = dialog.addField(extendedTypeStr(ReportPeriod_RU));
        dialogFieldPayPeriod.value(endmth(dateStartYr(RPayParameters::payPeriod())));
        dialogFieldPayPeriod.helpText("@RUP613");
        dialog.run();
        if (dialog.closedOk())
        {
            payPeriod = endmth(dialogFieldPayPeriod.value());

            for (currentPeriod = payPeriod; currentPeriod <= RPayParameters::payPeriod() ;currentPeriod = endmth(nextMth(currentPeriod)))
            {
                this.runTax(currentPeriod);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFundPeriod</Name>
				<Source><![CDATA[
    #AviFiles
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateFundPeriod(ReportPeriod_RU _payPeriod = RPayParameters::payPeriod(),
                                 RHRMEmplId      _emplId    = '',
                                 ReportPeriod_RU _lastPeriod = dateNull())
    {
        RHRMEmplTable        emplTable;
        SysOperationProgress operationProgress;
        int                  totalEmpl;
        ReportPeriod_RU      currentPeriod, lastPeriod;
        Set                  lastYearsSet = new Set(Types::Integer);

        if (prmisDefault(_lastPeriod))
        {
            lastPeriod = dateEndYr(_payPeriod);
        }
        else
        {
            lastPeriod = _lastPeriod;
        }

        openPeriod = min(dateEndYr(_payPeriod), RPayParameters::payPeriod(_emplId));
        informedFundDeductionSet = new Set(Types::Container);

        if (! _emplId)
        {
            operationProgress = new SysOperationProgress();
            operationProgress.setCaption("@RUP614");
            operationProgress.setAnimation(#AviUpdate);

            select count(RecId) from emplTable
                where emplTable.PayMainEmplId == emplTable.EmployeeId;

            totalEmpl = any2int(emplTable.RecId);

            operationProgress.setTotal(totalEmpl);
        }

        while select EmployeeId from emplTable
            where emplTable.PayMainEmplId == emplTable.EmployeeId &&
                 (emplTable.EmployeeId    == _emplId || !_emplId)
        {
            if (! _emplId)
            {
                operationProgress.setText("@RUP372" + emplTable.EmployeeId);
                operationProgress.incCount();
            }

            for (currentPeriod = _payPeriod; currentPeriod <= lastPeriod; currentPeriod = endmth(nextMth(currentPeriod)))
            {
                this.runFund(currentPeriod, emplTable.EmployeeId);
            }

            lastYearsSet = this.getLastYearsToUpdateCompensation(emplTable.EmployeeId);
            this.createCorrection(emplTable.EmployeeId);
            this.updateSumYearCompensation(year(_payPeriod), emplTable.EmployeeId, lastYearsSet);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSumYearCompensation</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateSumYearCompensation(
        Yr          _year,
        RHRMEmplId  _emplId,
        Set         _lastYears = new Set(Types::Integer))
    {
        RPayFundEmplSumTotal    rPayFundEmplSumTotal;
        RPayFundEmplSum         rPayFundEmplSum;
        RPayFundEmplDeduction   rPayFundEmplDeduction;
        RPayFundDeductionTable  rPayFundDeductionTable;
        RPayTaxParameters       taxParameters   = RPayTaxParameters::find();

        RPayCorrectedPeriod     startDate       = mkDate(1, 1, _year), endDate = mkDate(31, 12, _year);
        RPayCounterUnit         fssFundCode;
        RPayAmount              deductionAmount;
        RPayAmount              overLimitAmount;
        Yr                      prevCalcYr;
        boolean                 amountExist;
        SetEnumerator           se;

        void calcExcludeDays(RHRMEmplId _emplIdDays)
        {
            RPayExcludeDaysController excludeDays = RPayExcludeDaysController::construct(_emplIdDays, _year);

            excludeDays.calcExcludeDays();
        }

        fssFundCode = taxParameters.CounterUnit2011;

        if (!fssFundCode)
        {
            checkFailed("@RUP3202");
            return;
        }

        if (_lastYears == null)
        {
            _lastYears = new Set(Types::Integer);
        }

        //recalc prev. year
        while select rPayFundEmplSum
            group CorrectedPeriod
            where   rPayFundEmplSum.PayPeriod >= startDate
                &&  rPayFundEmplSum.PayPeriod <= endDate
                &&  rPayFundEmplSum.CorrectedPeriod < dateStartYr(startDate)
                && (rPayFundEmplSum.EmplId == _emplId || !_emplId)
                &&  rPayFundEmplSum.RpayCounterUnit == fssFundCode
        {
            if (prevCalcYr != year(rPayFundEmplSum.CorrectedPeriod))
            {
                prevCalcYr = year(rPayFundEmplSum.CorrectedPeriod);
                _lastYears.add(prevCalcYr);
            }
        }

        se = _lastYears.getEnumerator();

        while (se.moveNext())
        {
            this.updateSumYearCompensation(se.current(), _emplId);
        }

        delete_from rPayFundEmplSumTotal
            where   (rPayFundEmplSumTotal.EmplId == _emplId || !_emplId)
                &&  rPayFundEmplSumTotal.Yr     == _year
                &&  !rPayFundEmplSumTotal.IsManual;

        while select sum(RpayFundTotalAmount) from rPayFundEmplSum
            group by EmplId
            where  (rPayFundEmplSum.EmplId == _emplId || !_emplId)
                && rPayFundEmplSum.RpayCounterUnit == fssFundCode
                && ((rPayFundEmplSum.CorrectedPeriod >= startDate
                &&   rPayFundEmplSum.CorrectedPeriod <= endDate)
                || (!rPayFundEmplSum.CorrectedPeriod
                &&   rPayFundEmplSum.PayPeriod >= startDate
                &&   rPayFundEmplSum.PayPeriod <= endDate))
        {
            deductionAmount = 0;
            overLimitAmount = 0;
            amountExist     = true;

            select sum(DeductionAmount) from rPayFundEmplDeduction
                where    rPayFundEmplDeduction.RpayFundDeductionCode == taxParameters.FssBaseLimitDeduction
                        && (rPayFundEmplDeduction.EmplId             == _emplId || !_emplId)
                        && rPayFundEmplDeduction.RpayCounterUnit == fssFundCode
                        && ((rPayFundEmplDeduction.CorrectedPeriod >= startDate
                        &&   rPayFundEmplDeduction.CorrectedPeriod <= endDate)
                        || (!rPayFundEmplDeduction.CorrectedPeriod
                        &&   rPayFundEmplDeduction.PayPeriod >= startDate
                        &&   rPayFundEmplDeduction.PayPeriod <= endDate));

            overLimitAmount = rPayFundEmplDeduction.DeductionAmount;

            select sum(DeductionAmount) from rPayFundEmplDeduction
                where   rPayFundEmplDeduction.RpayFundDeductionCode != taxParameters.FssInvalidDeduction
                        && (rPayFundEmplDeduction.EmplId == _emplId || !_emplId)
                        && rPayFundEmplDeduction.RpayCounterUnit == fssFundCode
                        && ((rPayFundEmplDeduction.CorrectedPeriod >= startDate
                        &&   rPayFundEmplDeduction.CorrectedPeriod <= endDate)
                        || (!rPayFundEmplDeduction.CorrectedPeriod
                        &&   rPayFundEmplDeduction.PayPeriod >= startDate
                        &&   rPayFundEmplDeduction.PayPeriod <= endDate));

            deductionAmount = rPayFundEmplDeduction.DeductionAmount - overLimitAmount;

            select sum(DeductionAmount) from rPayFundEmplDeduction
                where   rPayFundEmplDeduction.RpayFundDeductionCode != taxParameters.FssInvalidDeduction
                        && (rPayFundEmplDeduction.EmplId == _emplId || !_emplId)
                        && rPayFundEmplDeduction.RpayCounterUnit == fssFundCode
                        && ((rPayFundEmplDeduction.CorrectedPeriod >= startDate
                        &&   rPayFundEmplDeduction.CorrectedPeriod <= endDate)
                        || (!rPayFundEmplDeduction.CorrectedPeriod
                        &&   rPayFundEmplDeduction.PayPeriod >= startDate
                        &&   rPayFundEmplDeduction.PayPeriod <= endDate))
                join rPayFundDeductionTable
                    where rPayFundDeductionTable.RpayFundDeductionCode == rPayFundEmplDeduction.RpayFundDeductionCode &&
                          rPayFundDeductionTable.RpayRateTaxValue;

            deductionAmount -= rPayFundEmplDeduction.DeductionAmount;

            if (rPayFundEmplSum.RpayFundTotalAmount > 0 || overLimitAmount > 0 || deductionAmount > 0)
            {
                rPayFundEmplSumTotal.clear();
                rPayFundEmplSumTotal.initValue();
                rPayFundEmplSumTotal.Amount             = rPayFundEmplSum.RpayFundTotalAmount;
                rPayFundEmplSumTotal.AmountDeductions   = deductionAmount;
                rPayFundEmplSumTotal.AmountOverLimit    = overLimitAmount;
                rPayFundEmplSumTotal.EmplId             = rPayFundEmplSum.EmplId;
                rPayFundEmplSumTotal.Yr                 = _year;
                rPayFundEmplSumTotal.Include            = NoYes::Yes;
                rPayFundEmplSumTotal.insert();
            }
            calcExcludeDays(rPayFundEmplSum.EmplId);
        }

        if (!amountExist && _emplId)
        {
            calcExcludeDays(_emplId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxPeriod</Name>
				<Source><![CDATA[
    #AviFiles
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateTaxPeriod(ReportPeriod_RU _payPeriod = RPayParameters::payPeriod(),
                                RHRMEmplId      _emplId    = '')
    {
        RPayTaxEmplSum       rPayTaxEmplSum;
        SysOperationProgress operationProgress;
        int                  totalEmpl;
        RHRMEmplId               currentEmplId = '';
        ReportPeriod_RU      dateEnd;

        if (year(_payPeriod) < year(RPayParameters::payPeriod()))
        {
            dateEnd = RPayParameters::payPeriod();
        }
        else
        {
            dateEnd = dateEndYr(_payPeriod);
        }

        if (! _emplId)
        {
            operationProgress = new SysOperationProgress();
            operationProgress.setCaption("@RUP612");
            operationProgress.setAnimation(#AviUpdate);

            while select EmplId from rPayTaxEmplSum group by EmplId
                where rPayTaxEmplSum.PayPeriod >= _payPeriod  &&
                      rPayTaxEmplSum.PayPeriod <= dateEnd     &&
                      rPayTaxEmplSum.Source    == NoYes::No
            {
                totalEmpl ++ ;
            }
            operationProgress.setTotal(totalEmpl);
        }
        while select PayPeriod, EmplId from rPayTaxEmplSum order by EmplId
                  where rPayTaxEmplSum.PayPeriod >= _payPeriod                     &&
                        rPayTaxEmplSum.PayPeriod <= dateEnd                        &&
                       (rPayTaxEmplSum.EmplId    == _emplId || (_emplId ? false : true))
        {
            if (! _emplId)
            {
                if (rPayTaxEmplSum.EmplId != currentEmplId)
                {
                    currentEmplId = rPayTaxEmplSum.EmplId;
                    operationProgress.setText("@RUP372" + currentEmplId);
                    operationProgress.incCount();
                }
            }
            this.runTax(rPayTaxEmplSum.PayPeriod,rPayTaxEmplSum.EmplId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxSum</Name>
				<Source><![CDATA[
    private void updateTaxSum(ReportPeriod_RU _payPeriod,
                              RHRMEmplId      _emplId)
    {
        RPayTaxEmplTrans            rPayTaxEmplTrans;
        RPayTaxEmplSum              rPayTaxEmplSum;
        RPayAmount                  payAmount;

        ttsbegin;

        while select forupdate rPayTaxEmplSum
                  where rPayTaxEmplSum.PayPeriod == _payPeriod &&
                        rPayTaxEmplSum.Source    == NoYes::No  &&
                       (rPayTaxEmplSum.EmplId    == _emplId)
        {
            select sum(Amount),sum(Deduction) from rPayTaxEmplTrans
                where rPayTaxEmplTrans.TaxSumRecId == rPayTaxEmplSum.RecId &&
                      rPayTaxEmplTrans.RpayTaxType == RpayTaxType::Income;

            rPayTaxEmplSum.IncomeAmount         = rPayTaxEmplTrans.Amount;
            rPayTaxEmplSum.DeductionOtherAmount = rPayTaxEmplTrans.Deduction;

            select sum(Amount) from rPayTaxEmplTrans
                where rPayTaxEmplTrans.TaxSumRecId == rPayTaxEmplSum.RecId &&
                      rPayTaxEmplTrans.RpayTaxType == RpayTaxType::Deduction;

            payAmount = rPayTaxEmplTrans.Amount;

            rPayTaxEmplSum.DeductionStandardAmount = payAmount;

            rPayTaxEmplSum.update();
            rPayTaxEmplSum.AddTaxAmount            = this.calcTaxAdd(_payPeriod,_emplId,rPayTaxEmplSum.RpayTaxIncomeGroupCode);
            rPayTaxEmplSum.TaxRateCode             = emplTaxPeriod.taxGroup2Rate(RPayTaxIncomeGroupTable::findCode(rPayTaxEmplSum.RpayTaxIncomeGroupCode));
            rPayTaxEmplSum.update();

            if (rPayTaxEmplSum.IncomeAmount            == 0 && rPayTaxEmplSum.DeductionOtherAmount      == 0 &&
                rPayTaxEmplSum.DeductionStandardAmount == 0 && rPayTaxEmplSum.DeductTaxAmount           == 0 &&
                rPayTaxEmplSum.AddTaxAmount            == 0 && rPayTaxEmplSum.Acquittance               == 0 &&
                rPayTaxEmplSum.AcquittanceFuturePeriod == 0 && rPayTaxEmplSum.DeductTaxAmountFuture     == 0 &&
                rPayTaxEmplSum.PassToGni               == 0 && rPayTaxEmplSum.PayrollRedemptionAmount   == 0)
            {
                rPayTaxEmplSum.delete();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxSumOther</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateTaxSumOther(
        ReportPeriod_RU _payPeriod,
        //ReportPeriod_RU _payPeriod = RPayParameters::payPeriod(),
        RHRMEmplId      _emplId)
    {
        RPayTaxEmplTrans rPayTaxEmplTrans;
        RPayTaxEmplSum   rPayTaxEmplSum;
        RPayAmount       payAmount,addTaxAmount;

        ttsbegin;

        while select forupdate rPayTaxEmplSum
                  where rPayTaxEmplSum.PayPeriod == _payPeriod &&
                        rPayTaxEmplSum.Source    == NoYes::Yes &&
                       (rPayTaxEmplSum.EmplId    == _emplId)
        {
            select sum(Amount),sum(Deduction) from rPayTaxEmplTrans
                where rPayTaxEmplTrans.TaxSumRecId == rPayTaxEmplSum.RecId &&
                      rPayTaxEmplTrans.RpayTaxType == RpayTaxType::Income;

            rPayTaxEmplSum.IncomeAmount         = rPayTaxEmplTrans.Amount;
            rPayTaxEmplSum.DeductionOtherAmount = rPayTaxEmplTrans.Deduction;

            select sum(Amount) from rPayTaxEmplTrans
                where rPayTaxEmplTrans.TaxSumRecId == rPayTaxEmplSum.RecId &&
                      rPayTaxEmplTrans.RpayTaxType == RpayTaxType::Deduction;

            if (rPayTaxEmplSum.IncomeAmount - rPayTaxEmplSum.DeductionOtherAmount > 0)
            {
                payAmount = rPayTaxEmplSum.IncomeAmount - rPayTaxEmplSum.DeductionOtherAmount - rPayTaxEmplTrans.Amount <= 0 ?
                            rPayTaxEmplSum.IncomeAmount - rPayTaxEmplSum.DeductionOtherAmount  : rPayTaxEmplTrans.Amount;
            }

            rPayTaxEmplSum.DeductionStandardAmount = payAmount;

            if (rPayTaxEmplSum.Source == NoYes::Yes)
            {
                payAmount =  rPayTaxEmplSum.IncomeAmount - rPayTaxEmplSum.DeductionOtherAmount - rPayTaxEmplSum.DeductionStandardAmount;
                addTaxAmount = payAmount * RPayRateTable::find(RPayTaxIncomeGroupTable::findCode(rPayTaxEmplSum.RpayTaxIncomeGroupCode).RateCode).getValue(RPayRateCallContext::construct(_payPeriod, _emplId))/100;
                rPayTaxEmplSum.AddTaxAmount = round(addTaxAmount, rPayTaxParameters.TaxRound);
            }
            rPayTaxEmplSum.update();

            if (rPayTaxEmplSum.IncomeAmount            == 0 && rPayTaxEmplSum.DeductionOtherAmount == 0 &&
                rPayTaxEmplSum.DeductionStandardAmount == 0 && rPayTaxEmplSum.DeductTaxAmount == 0      &&
                rPayTaxEmplSum.AddTaxAmount == 0)
            {
                rPayTaxEmplSum.delete();
            }
            this.updateTaxSumYear(rPayTaxEmplSum.PayPeriod,rPayTaxEmplSum.EmplId);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxSumYear</Name>
				<Source><![CDATA[
    private void updateTaxSumYear(ReportPeriod_RU _payPeriod,
                                  RHRMEmplId      _emplId)
    {
        container               taxSum;
        RPayTaxSumYear          rPayTaxSumYear;
        RPayTaxIncomeGroupTable rPayTaxIncomeGroupTable;

        ttsbegin;

        while select RpayTaxIncomeGroupCode from rPayTaxIncomeGroupTable
        {
            rPayTaxSumYear = RPayTaxSumYear::find(_emplId,
                                                  rPayTaxIncomeGroupTable.RpayTaxIncomeGroupCode,
                                                  dateEndYr(_payPeriod),
                                                  true);

            taxSum = RPayTaxEmplSum::getTaxSum(_emplId,
                                               rPayTaxIncomeGroupTable.RpayTaxIncomeGroupCode,
                                               dateStartYr(_payPeriod),
                                               dateEndYr(_payPeriod),
                                               dateNull(),
                                               dateMax(),
                                               true);
            if (! rPayTaxSumYear.RecId)
            {
                rPayTaxSumYear.EmplId                 = _emplId;
                rPayTaxSumYear.PayPeriod              = dateEndYr(_payPeriod);
                rPayTaxSumYear.RpayTaxIncomeGroupCode = rPayTaxIncomeGroupTable.RpayTaxIncomeGroupCode;
                rPayTaxSumYear.insert();
            }

            rPayTaxSumYear.AddTaxAmount    = conPeek(taxSum,5);
            rPayTaxSumYear.DeductTaxAmount = conPeek(taxSum,4) - conPeek(taxSum,8);
            rPayTaxSumYear.FutureTaxAmount = conPeek(taxSum,7) + conPeek(taxSum,9);
            rPayTaxSumYear.Acquittance     = conPeek(taxSum,8) + conPeek(taxSum,9);
            rPayTaxSumYear.PassToGni       = conPeek(taxSum,10);
            rPayTaxSumYear.update();

            if (rPayTaxSumYear.AddTaxAmount    == 0 &&
                rPayTaxSumYear.DeductTaxAmount == 0 &&
                rPayTaxSumYear.PassToGni       == 0 &&
                rPayTaxSumYear.FutureTaxAmount == 0 &&
                rPayTaxSumYear.PassToGni       == 0 &&
                rPayTaxSumYear.Acquittance     == 0)
            {
                rPayTaxSumYear.delete();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        RpayTaxSumCalc      rpayTaxSumCalc = new RpayTaxSumCalc();
        ReportPeriod_RU     payPeriod      = RPayParameters::payPeriod();
        RPayTaxParameters   taxParameters  = RPayTaxParameters::find();

        void calcByBranch()
        {
            RHRMEmplTable           emplTableLocal;

            while select PayMainEmplId from emplTableLocal
                where  emplTableLocal.PayMainEmplId == emplTableLocal.EmployeeId
            {
                RPayTaxCalc::calcTaxForPerson(emplTableLocal.PayMainEmplId);
            }
        }

        switch (args.parmEnum())
        {
            case  RpayTaxFundMenu::Tax:
                if (taxParameters.CalcByBranch)
                {
                    checkFailed("@RUP3475");
                }
                else
                {
                    rpayTaxSumCalc.runTaxPeriod();
                }
                break;
            case  RpayTaxFundMenu::Both:

                if (RPayController::canArchivCalculate())
                {
                    if (taxParameters.CalcByBranch)
                    {
                        calcByBranch();
                    }
                    else
                    {
                        rpayTaxSumCalc.runTax();
                    }

                    rpayTaxSumCalc.updateFundPeriod(
                        endmth(dateStartYr(payPeriod)),
                        '',
                        payPeriod);

                    RPayParameters::setPayStatus(RPayStatus::Arhiv);
                }

                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>