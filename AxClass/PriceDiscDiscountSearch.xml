<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceDiscDiscountSearch</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class PriceDiscDiscountSearch
{
    PriceDisc               priceDisc;
    PriceDiscParameters     priceDiscParameters;
    NoYes                   searchAgain;
    boolean                 cacheMode;
    PriceDiscTable          priceDiscTable;

    #define.cacheScope_FindDisc('PriceDisc:FindDisc')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceDisc</Name>
				<Source><![CDATA[
    protected PriceDisc parmPriceDisc(PriceDisc _priceDisc = priceDisc)
    {
        priceDisc = _priceDisc;

        return priceDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceDiscParameters</Name>
				<Source><![CDATA[
    protected PriceDiscParameters parmPriceDiscParameters(PriceDiscParameters _priceDiscParameters = priceDiscParameters)
    {
        priceDiscParameters = _priceDiscParameters;

        return priceDiscParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSearchAgain</Name>
				<Source><![CDATA[
    public NoYes parmSearchAgain(NoYes _searchAgain = searchAgain)
    {
        searchAgain = _searchAgain;

        return searchAgain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c>PriceDiscDiscountSearch</c>.
    /// </summary>
    /// <param name = "_priceDisc">
    /// A <c>PriceDisc</c> object.
    /// </param>
    /// <param name = "_priceDiscParameters">
    /// A <c>PriceDiscParameters</c> object.
    /// </param>
    /// <param name = "_searchAgain">
    /// A <c>NoYes</c> value.
    /// </param>
    /// <returns>
    /// An instance of the <c>PriceDiscDiscountSearch</c> class.
    /// </returns>
    public static PriceDiscDiscountSearch construct(PriceDisc _priceDisc, PriceDiscParameters _priceDiscParameters, NoYes _searchAgain)
    {
        PriceDiscDiscountSearch priceDiscDiscountSearch = new PriceDiscDiscountSearch();

        priceDiscDiscountSearch.parmPriceDisc(_priceDisc);
        priceDiscDiscountSearch.parmPriceDiscParameters(_priceDiscParameters);
        priceDiscDiscountSearch.parmSearchAgain(_searchAgain);

        return priceDiscDiscountSearch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePriceDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>PriceDiscTable</c> record buffer.
    /// </summary>
    /// <param name = "_relation">
    /// A <c>PriceType</c> value.
    /// </param>
    /// <param name = "_fromDate">
    /// From date value.
    /// </param>
    /// <param name = "_toDate">
    /// To date value.
    /// </param>
    /// <param name = "_quantityAmountFrom">
    /// Quantity amount lower limit.
    /// </param>
    /// <param name = "_quantityAmountTo">
    /// Quantity amount higher limit.
    /// </param>
    /// <param name = "_priceDiscTableRecId">
    /// A <c>PriceDiscTable</c> record ID.
    /// </param>
    /// <returns>
    /// true if the given price discount table is valid; otherwise, false.
    /// </returns>
    protected boolean validatePriceDisc(
        PriceType                   _relation,
        FromDate                    _fromDate,
        ToDate                      _toDate,
        AmountQty                   _quantityAmountFrom,
        AmountQuantityTo            _quantityAmountTo,
        RecId                       _priceDiscTableRecId)
    {
        boolean discExist = false;

        void reselectBuffer()
        {
            if (cacheMode)
            {
                priceDiscTable = PriceDiscTable::findRecId(_priceDiscTableRecId);
            }
        }

        if ((priceDiscParameters.parmPriceDiscDate() >= _fromDate  || ! _fromDate)
                && (priceDiscParameters.parmPriceDiscDate() <= _toDate || ! _toDate))
        {
            if (_relation == PriceType::EndDiscPurch ||
                    _relation == PriceType::EndDiscSales )
            {
                // for end discounts, the QuantiyAmountField field contains order total amounts, not quantities
                if (priceDisc.calcCur2CurPriceAmount(_quantityAmountFrom, priceDiscTable) <= priceDiscParameters.parmQty() &&
                        ((priceDiscParameters.parmQty() < priceDisc.calcCur2CurPriceAmount(_quantityAmountTo, priceDiscTable)) || !_quantityAmountTo))
                {
                    reselectBuffer();
                    discExist = true;
                        
                    priceDisc.updateDiscountFromPriceDiscTable(priceDiscTable);
                }
            }
            else
            {
                if (_quantityAmountFrom <= priceDiscParameters.parmQty()
                        && (priceDiscParameters.parmQty() < _quantityAmountTo || !_quantityAmountTo))
                {
                    reselectBuffer();
                    discExist = true;
                        
                    priceDisc.updateDiscountFromPriceDiscTable(priceDiscTable);

                    priceDisc.mcrPriceDiscTableFound(priceDiscTable);
                }
                else
                {
                    // If quantity does not qualify, but calculation potential then add as found
                    if (priceDisc.parmMCRPriceHistoryPotentialCalc())
                    {
                        reselectBuffer();

                        priceDisc.mcrPriceDiscTableFound(priceDiscTable);
                    }
                }
            }
        }

        return discExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateCacheKey</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    protected internal PriceDiscCacheKey instantiateCacheKey()
    {
        return PriceDiscCacheKey::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds discount agreement.
    /// </summary>
    /// <param name = "_priceDiscDiscountSearchParameters">
    /// A <c>PriceDiscDiscountSearchParameters</c> instance.
    /// </param>
    /// <returns>
    /// true if the price discount exists; otherwise, false.
    /// </returns>
    public boolean findDisc(PriceDiscDiscountSearchParameters _priceDiscDiscountSearchParameters)
    {
        boolean             discExist;
        container           key;
        container           cacheValue;
        int                 i;
        FromDate            localFromDate;
        ToDate              localToDate;
        AmountQty           localQuantityAmountFrom;
        AmountQuantityTo    localQuantityAmountTo;
        RecId               localRecid;

        #ISOCountryRegionCodes
        boolean countryRegion_RU    = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);

        // <GEERU>
        CustVendAC      accountRelation = _priceDiscDiscountSearchParameters.parmAccountRelation();

        if (countryRegion_RU)
        {
            if (_priceDiscDiscountSearchParameters.parmAccountCode() == PriceDiscPartyCodeType::Table &&
                priceDiscParameters.parmAgreementHeaderExt_RU() &&
                priceDiscParameters.parmAgreementPartnerCode_RU())
            {
                accountRelation = priceDiscParameters.parmAgreementPartnerCode_RU();
            }
        }
        // </GEERU>

        priceDiscTable.clear();

        if (!priceDisc.findDiscEnabled(_priceDiscDiscountSearchParameters.parmInventDimId()))
        {
            return false;
        }

        // To avoid flooding the cache the most granulated setup isn't cached.
        cacheMode = (_priceDiscDiscountSearchParameters.parmitemCode()       != PriceDiscProductCodeType::Table
                     || _priceDiscDiscountSearchParameters.parmaccountCode() != PriceDiscPartyCodeType::Table)
                    && !priceDisc.parmMCRPriceHistoryPotentialCalc();

        cacheValue = conNull();

        if (cacheMode)
        {
            PriceDiscCacheKey cacheKey = this.instantiateCacheKey();

            cacheKey.initialize(_priceDiscDiscountSearchParameters.parmRelation(), _priceDiscDiscountSearchParameters.parmItemCode(),  _priceDiscDiscountSearchParameters.parmItemRelation(), _priceDiscDiscountSearchParameters.parmAccountCode(), accountRelation, _priceDiscDiscountSearchParameters.parmInventDimId(), priceDiscParameters);

            key = cacheKey.pack();

            cacheValue = PriceDisc::getPriceDiscCacheValue(#cacheScope_FindDisc, key);
        }

        priceDiscParameters.parmQty(abs(_priceDiscDiscountSearchParameters.parmQuantityAmount()));

        if (cacheValue == conNull())
        {
            if (_priceDiscDiscountSearchParameters.parmItemCode() != PriceDiscProductCodeType::Table)
            {
                _priceDiscDiscountSearchParameters.parmUnitID('');
            }

            Query query  = PriceDisc_ChangeMethodsLogicFlight::instance().isEnabled()
                ? priceDisc.buildPriceDiscFindDiscQuery(_priceDiscDiscountSearchParameters.parmRelation(),
                                                        _priceDiscDiscountSearchParameters.parmInventDimId(),
                                                        _priceDiscDiscountSearchParameters.parmItemCode(), 
                                                        _priceDiscDiscountSearchParameters.parmItemRelation(),
                                                        _priceDiscDiscountSearchParameters.parmAccountCode(),
                                                        _priceDiscDiscountSearchParameters.parmAccountRelation(),    
                                                        _priceDiscDiscountSearchParameters.parmUnitID())
                : priceDisc.buildFindPriceDiscountQuery(_priceDiscDiscountSearchParameters.parmRelation(),
                                                        _priceDiscDiscountSearchParameters.parmInventDimId(), 
                                                        _priceDiscDiscountSearchParameters.parmItemCode(), 
                                                        _priceDiscDiscountSearchParameters.parmItemRelation(), 
                                                        _priceDiscDiscountSearchParameters.parmAccountCode(),
                                                        _priceDiscDiscountSearchParameters.parmAccountRelation(),
                                                        _priceDiscDiscountSearchParameters.parmUnitID());
          
            QueryRun queryRun = new QueryRun(query);
            while (queryRun.next())
            {
                priceDiscTable = queryRun.get(tableNum(PriceDiscTable));

                if (cacheMode)
                {
                    cacheValue += [[priceDiscTable.FromDate, priceDiscTable.ToDate, priceDiscTable.QuantityAmountFrom, priceDiscTable.QuantityAmountTo, priceDiscTable.RecId]];
                }
                else
                {
                    localFromDate            = priceDiscTable.FromDate;
                    localToDate              = priceDiscTable.ToDate;
                    localQuantityAmountFrom  = priceDiscTable.QuantityAmountFrom;
                    localQuantityAmountTo    = priceDiscTable.QuantityAmountTo;
                    localRecid               = priceDiscTable.RecId;

                    boolean discValid = this.validatePriceDisc(_priceDiscDiscountSearchParameters.parmRelation(),
                                                                localFromDate,
                                                                localToDate,
                                                                localQuantityAmountFrom,
                                                                localQuantityAmountTo,
                                                                localRecid);
                    discExist = discValid || discExist;

                    if (discExist
                        && !priceDiscTable.SearchAgain
                        && discValid)
                    {
                        searchAgain = false;
                        break;
                    }
                }
            }
            if (cacheMode)
            {
                //We also want to cache the absence of discounts.
                if (cacheValue == conNull())
                {
                    cacheValue = [[0]];
                }

                PriceDisc::insertPriceDiscCache(#cacheScope_FindDisc, key, cacheValue);
            }
        }

        if (cacheMode
            && cacheValue)
        {
            discExist = false;
            for (i=1;i<=conLen(cacheValue);i++)
            {
                [localFromDate, localToDate, localQuantityAmountFrom, localQuantityAmountTo, localRecid] = conPeek(cacheValue, i);

                if (localRecid)
                {
                    discExist = this.validatePriceDisc(_priceDiscDiscountSearchParameters.parmRelation(),
                                                        localFromDate,
                                                        localToDate,
                                                        localQuantityAmountFrom,
                                                        localQuantityAmountTo,
                                                        localRecid) || discExist;

                    if (discExist
                        && !priceDiscTable.SearchAgain
                        && !priceDisc.parmMCRPriceHistoryPotentialCalc())
                    {
                        searchAgain = false;
                        break;
                    }
                }
            }
        }
        return discExist;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>