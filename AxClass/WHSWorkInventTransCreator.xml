<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkInventTransCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkInventTransCreator</c> class provides methods to create <c>WHSWorkInventTrans</c> records.
/// </summary>
public final class WHSWorkInventTransCreator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSWorkInventTransCreator construct()
    {
        return new WHSWorkInventTransCreator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultWorkInventTransWeightValues</Name>
				<Source><![CDATA[
    private void setDefaultWorkInventTransWeightValues(WHSWorkInventTrans _workInventTrans)
    {
        _workInventTrans.TransactionWeight           = WhsInvent::defaultCatchWeightReserveQuantity(_workInventTrans.ItemId, _workInventTrans.Qty);
        _workInventTrans.RemainingTransactionWeight  = _workInventTrans.TransactionWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExtraHandlingUnitWIT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a <c>WHSWorkInventTrans</c> record for any extra quantity for handling units on the work line.
    /// </summary>
    /// <param name="_workLine">
    /// The work line record.
    /// </param>
    private void createExtraHandlingUnitWIT(WHSWorkLine _workLine)
    {
        WHSWorkInventTrans  workInventTrans;

        workInventTrans.initFromWorkLine(_workLine);
        workInventTrans.InventTransIdParent        = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
        workInventTrans.Qty                        = _workLine.ExtraInventHandlingQty;
        workInventTrans.InventQtyRemain            = workInventTrans.Qty;

        this.setDefaultWorkInventTransWeightValues(workInventTrans);

        workInventTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a work inventory transaction based on the work type provided for a given work line.
    /// </summary>
    /// <param name = "_workLine">The work line for which to create the work inventory transaction.</param>
    /// <param name = "_parameters">An instance of <c>WHSWorkInventTransCreationParameters</c>.</param>
    /// <returns>Returns the <c>WHSWorkInventTrans</c> created.</returns>
    [Hookable(false)]
    internal void createFromWorkLine(WHSWorkLine _workLine, WHSWorkInventTransCreationParameters _parameters)
    {
        WHSWorkInventTrans workInventTrans;

        ttsbegin;

        if (_parameters.parmWorkType() == WHSWorkType::Pick)
        {
            if (_parameters.parmWorkCreateInstance())
            {
                workInventTrans = _parameters.parmWorkCreateInstance().callInitializeWorkInventTransFromWorkLine(_workLine);
            }
            else
            {
                workInventTrans.initFromWorkLine(_workLine);
            }

            if (_workLine.ExtraInventHandlingQty)
            {
                workInventTrans.Qty                         -= _workLine.ExtraInventHandlingQty;
                workInventTrans.InventQtyRemain             = workInventTrans.Qty;

                this.setDefaultWorkInventTransWeightValues(workInventTrans);

                this.createExtraHandlingUnitWIT(_workLine);
            }

            if (workInventTrans.Qty)
            {
                workInventTrans.WorkHasReservation = NoYes::Yes;
            }
        }
        else if (_parameters.parmWorkType() == WHSWorkType::Put)
        {
            WHSWorkLine firstPickLine;
            select firstonly ItemId, InventDimId, wmsLocationId, LineNum from firstPickLine
                order by LineNum
                where firstPickLine.WorkId       == _workLine.WorkId
                    && firstPickLine.WorkType    == WHSWorkType::Pick;

            InventDim inventDim = this.initializeInventDim(_workLine, firstPickLine.wmsLocationId, _parameters);
            inventDim = InventDim::findOrCreate(inventDim);
            
            Qty tmpQty = this.deleteWorkInventTrans(_workLine, firstPickLine, inventDim);

            workInventTrans = this.initializeWorkInventTrans(_workLine, firstPickLine, inventDim, tmpQty, _parameters);
        }

        this.insertWorkInventTrans(workInventTrans);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize inventory dimension from <c>WHSWorkLine</c>, <c>WMSLocationId</c> and <c>WHSWorkInventTransCreationParameters</c>.
    /// </summary>
    /// <param name = "_workLine">Work line to initialize inventory dimensions.</param>
    /// <param name = "_wmsLocationId">Location to initialize inventory dimensions.</param>
    /// <param name = "_parameters">Instance of <c>WHSWorkInventTransCreationParameters</c> to initialize inventory dimensions.</param>
    /// <returns>Initialized inventory dimension.</returns>
    protected InventDim initializeInventDim(
        WHSWorkLine                          _workLine, 
        WMSLocationId                        _wmsLocationId, 
        WHSWorkInventTransCreationParameters _parameters)
    {
        InventDim inventDim = _workLine.inventDim();
        inventDim.wmsLocationId = _wmsLocationId;

        // If status is being changed during the work, the status on the pick
        // transaction needs to be the from status as that is the status the inventory is currently.
        if (_parameters.parmFromInventStatusId())
        {
            inventDim.inventStatusId = _parameters.parmFromInventStatusId();
        }

        inventDim.clearBelowLocationDim(_workLine.ItemId);

        if (_workLine.whsWorkTable().isLicensePlateSpecificReservationRequired()
                ||  _parameters.parmCreateWorkInventTransWithTargetLP())
        {
            boolean useLicensePlateId = true;

            if (WhsWorkTransactionLPControlledLocationFlight::instance().isEnabled())
            {
                WMSLocation location = WMSLocation::find(inventDim.wmsLocationId, inventDim.InventLocationId ? inventDim.InventLocationId : _workLine.whsWorkTable().InventLocationId);

                if (location && !location.whsLocationIsLPControlled())
                {
                    useLicensePlateId = false;
                }
            }

            if (useLicensePlateId)
            {
                // Create WorkInventTrans record for LP level instead of Location level for work orders that require it.
                inventDim.LicensePlateId = _parameters.parmTargetLicensePlateId();
            }
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteWorkInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes a specific <c>WHSWorkInventTrans</c> record.
    /// </summary>
    /// <param name = "_workLine">The work line for which a transaction should be deleted.</param>
    /// <param name = "_firsPickLine">The first pick line in the related work.</param>
    /// <param name = "_inventDim">Inventory dimension of the transaction to remove.</param>
    /// <returns>Quantity of the deleted record</returns>
    protected Qty deleteWorkInventTrans(
        WHSWorkLine _workLine,
        WHSWorkLine _firsPickLine, 
        InventDim   _inventDim)
    {
        WHSWorkInventTrans workInventTrans = WHSWorkInventTrans::find(_workLine.WorkId, _firsPickLine.LineNum, _workLine.ItemId, _workLine.InventTransId, _inventDim.inventDimId, true);

        Qty tmpQty = 0;

        if (workInventTrans)
        {
            tmpQty = workInventTrans.Qty;
            workInventTrans.delete();
        }

        return tmpQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeWorkInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a work inventory transaction based on given parameters.
    /// </summary>
    /// <param name = "_workLine">The work line for which a transaction should be initialized.</param>
    /// <param name = "_firstPickLine">The first pick line of the current work.</param>
    /// <param name = "_inventDimFrom">Inventory dimension of the transaction.</param>
    /// <param name = "_tmpQty">Quantity that should be added to <c>WHSWorkLine</c> quantity.</param>
    /// <param name = "_parameters">Instance of <c>WHSWorkInventTransCreationParameters</c> to initialize <c>WHSWorkInventTrans</c>.</param>
    /// <returns>Initialized <c>WHSWorkInventTrans</c> record.</returns>
    protected WHSWorkInventTrans initializeWorkInventTrans(
        WHSWorkLine                          _workLine,
        WHSWorkLine                          _firstPickLine,
        InventDim                            _inventDimFrom,
        Qty                                  _tmpQty,
        WHSWorkInventTransCreationParameters _parameters)
    {
        WHSWorkInventTrans workInventTrans;

        workInventTrans.WorkId                      = _workLine.WorkId;
        workInventTrans.LineNum                     = _firstPickLine.LineNum;
        workInventTrans.ItemId                      = _workLine.ItemId;
        workInventTrans.Qty                         = _tmpQty ? _tmpQty + _workLine.InventQtyWork : _workLine.InventQtyWork;
        workInventTrans.InventQtyRemain             = workInventTrans.Qty;

        this.setDefaultWorkInventTransWeightValues(workInventTrans);

        if (_parameters.parmFromInventStatusId())
        {
            InventDim inventDimTo = _workLine.InventDim();
            inventDimTo.InventStatusId = _parameters.parmFromInventStatusId();

            workInventTrans.InventDimIdTo = InventDim::findOrCreate(inventDimTo).InventDimId;
        }
        else
        {
            workInventTrans.InventDimIdTo       = _workLine.InventDimId;
        }

        workInventTrans.InventDimIdFrom     = _inventDimFrom.InventDimId;

        if (_workLine.InventTransId)
        {
            workInventTrans.InventTransIdParent = _workLine.InventTransId;
        }
        else if (!_firstPickLine.ItemId && _workLine.whsWorkTable().WorkTransType == WHSWorkTransType::Invent)
        {
            workInventTrans.InventTransIdParent = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
        }

        workInventTrans.TransDateTime       = DateTimeUtil::utcNow();

        if (workInventTrans.Qty)
        {
            workInventTrans.WorkHasReservation = NoYes::Yes;
        }

        return workInventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertWorkInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a new record into <c>WHSWorkInventTrans</c> table.
    /// </summary>
    /// <param name = "_workInventTrans">The <c>WHSWorkInventTrans</c> that should be inserted.</param>
    protected void insertWorkInventTrans(WHSWorkInventTrans _workInventTrans)
    {
        if (_workInventTrans.Qty)
        {
            _workInventTrans.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>