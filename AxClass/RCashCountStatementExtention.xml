<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rCashCountStatementExtention</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rCashCountStatementExtention extends RCashReport_ExcelBase implements BatchRetryable
{
    TmpRCashCountStatementTable sourceTable;
    TransDate toDate;
    int statementNum;

    protected const str TypeOfAsset = 'B';
    protected const str Currency = 'C';
    protected const str CountedAmount_Currency = 'D';
    protected const str ExchangeRate = 'E';
    protected const str CountedAmount = 'F';
    protected const str PostedAmount_Currency = 'G';
    protected const str PostedAmount = 'H';
    protected const str StatementNumber = 'F2';
    protected const int ExchRateBase = 100;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertData</Name>
				<Source><![CDATA[
    protected void insertData()
    {
        int yBase = 4;
        str yBaseStr;

        Bookmark columnB;
        Bookmark columnC;
        Bookmark columnD;
        Bookmark columnE;
        Bookmark columnF;
        Bookmark columnG;
        Bookmark columnH;

        this.insertValue(StatementNumber, (strfmt("@GLS102243", statementNum, toDate)));

        while select sourceTable
        {
            yBase = yBase + 1;
            yBaseStr = strfmt("@GLS106745", yBase);

            columnB = TypeOfAsset + yBaseStr;
            columnC = Currency + yBaseStr;
            columnD = CountedAmount_Currency + yBaseStr;
            columnE = ExchangeRate + yBaseStr;
            columnF = CountedAmount + yBaseStr;
            columnG = PostedAmount_Currency + yBaseStr;
            columnH = PostedAmount + yBaseStr;

            try
            {
                this.insertValue(columnB, strfmt("@GLS106745", sourceTable.CashCountStatementType));
                this.insertValue(columnC, strfmt("@GLS106745", sourceTable.Currency));
                this.insertValue(columnD, strfmt("@GLS106745", sourceTable.CountedAmountCur));
                this.insertValue(columnE, strfmt("@GLS106745", sourceTable.ExchRate / ExchRateBase));
                this.insertValue(columnF, strfmt("@GLS106745", sourceTable.CountedAmountMST));
                this.insertValue(columnG, strfmt("@GLS106745", sourceTable.PostedAmountCur));
                this.insertValue(columnH, strfmt("@GLS106745", sourceTable.PostedAmountMST + sourceTable.ExchAdj));
            }
            catch (Exception::Error)
            {
                const int safeCallRetryCount = 4;

                if (xSession::currentRetryCount() >= safeCallRetryCount)
                {
                    throw Exception::Error;
                }
                else
                {
                    const str safeCallNotifyMethod = 'notify';
                    const int safeCallTimeOut = 250;

                    infolog.clear(0);

                    infolog.addTimeOut(infolog, safeCallNotifyMethod, safeCallTimeOut);
                    infolog.wait();

                    retry;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValue</Name>
				<Source><![CDATA[
    public void setValue(
        TmpRCashCountStatementTable _sourceTable,
        TransDate _todate,
        int _statementNum)
    {
        sourceTable = _sourceTable;
        todate = _todate;
        statementNum = _statementNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        const str templateName = 'RCashCountStatementExt.xlt';
        return templateName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        container dummy()
        {
            return _packedClass;
        }

        dummy();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>