<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalVoucherPreviewController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerJournalVoucherPreviewController</c> class is the controller for the <c>LedgerJournalVoucherPreview</c> report.
/// </summary>
public class LedgerJournalVoucherPreviewController extends SrsReportRunController implements BatchRetryable
{
    // This memory table holds the data for an unposted journal.  It is needed at
    // the class level as storeTmpTable could be run multiple times and a new
    // marshalled object must be created per run because the DP class deletes it
    // after extracting the data from it.
    TmpLedgerTransPreview_RU    tmpLedgerTransPreview;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00006, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpLedgerTransPreview</Name>
				<Source><![CDATA[
    public TmpLedgerTransPreview_RU parmTmpLedgerTransPreview(TmpLedgerTransPreview_RU _tmpLedgerTransPreview = tmpLedgerTransPreview)
    {
        tmpLedgerTransPreview = _tmpLedgerTransPreview;
        return tmpLedgerTransPreview;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    public void prePromptModifyContract()
    {
        LedgerJournalTrans                  ledgerJournalTrans;
        LedgerJournalVoucherPreviewContract contract;

        // Set contract based on caller
        contract = this.parmReportContract().parmRdpContract() as LedgerJournalVoucherPreviewContract;
        if (this.parmArgs().caller().name() == formStr(LedgerTransPreview_RU))
        {
            this.parmTmpLedgerTransPreview(this.parmArgs().record() as TmpLedgerTransPreview_RU);
            contract.parmJournalNumber('');
            contract.parmVoucher(this.parmArgs().parm());   // Save the specified voucher
        }
        else
        {
            if (this.parmArgs().dataset() == tableNum(LedgerJournalTrans))
            {
                ledgerJournalTrans = this.parmArgs().record() as LedgerJournalTrans;
                contract.parmJournalNumber(ledgerJournalTrans.JournalNum);
                contract.parmVoucher(ledgerJournalTrans.Voucher);
            }
            else
            {
                throw error(Error::missingRecord(tableStr(LedgerJournalTrans)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    public void preRunModifyContract()
    {
        LedgerJournalVoucherPreviewContract contract;
        RecId                               tmpTableDataRecId;      // Record ID that identies the marshalled memory table used for unposted journals.

        super();

        contract = this.parmReportContract().parmRdpContract() as LedgerJournalVoucherPreviewContract;
        if (contract.parmJournalNumber() == '')
        {
            tmpTableDataRecId = this.storeTmpTable(this.parmTmpLedgerTransPreview());
        }

        contract.parmTmpTableDataRecId(tmpTableDataRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stores the memory table into a physical table and makes it available to the report.
    /// </summary>
    /// <param name="_tmpLedgerTransPreview">
    /// The table buffer of the memory table.
    /// </param>
    /// <returns>
    /// The record ID that identifies the marshaled data.
    /// </returns>
    private RecId storeTmpTable(TmpLedgerTransPreview_RU _tmpLedgerTransPreview)
    {
        RecId                   recId;
        SRSReportRunPermission  permission;

        // Asset access permissions
        permission = new SRSReportRunPermission();
        permission.assert();

        // Marshall the memory table for later access
        recId = SRSTmpTblMarshaller::sendTmpTblToDataProvider(_tmpLedgerTransPreview);
        select firstonly _tmpLedgerTransPreview;      // reselect to position back to the start

        // Revert the access permissions
        CodeAccessPermission::revertAssert();

        return recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        LedgerJournalVoucherPreviewController   controller;

        // Validate args
        if (!_args || !_args.record() || !_args.caller())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        controller = new LedgerJournalVoucherPreviewController();
        controller.parmReportName(ssrsReportStr(LedgerJournalVoucherPreview, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>