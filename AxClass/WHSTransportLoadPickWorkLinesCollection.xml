<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSTransportLoadPickWorkLinesCollection</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class representing a collection of work lines obtained from a <c>WHSTransportLoad</c>.
/// </summary>
public class WHSTransportLoadPickWorkLinesCollection
{
    private Map                 transportLoadWorkLineListMap;
    private WHSWorkLineList     currentTransportLoadWorkLineList;
    private boolean             useInventTransTypeFilter;
    private InventTransType     inventTransTypeFilter;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        transportLoadWorkLineListMap = new Map(Types::String, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseInventTransTypeFilter</Name>
				<Source><![CDATA[
    public boolean parmUseInventTransTypeFilter(boolean _useInventTransTypeFilter = useInventTransTypeFilter)
    {
        useInventTransTypeFilter = _useInventTransTypeFilter;

        return useInventTransTypeFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransTypeFilter</Name>
				<Source><![CDATA[
    public InventTransType parmInventTransTypeFilter(InventTransType _inventTransTypeFilter = inventTransTypeFilter)
    {
        inventTransTypeFilter = _inventTransTypeFilter;

        return inventTransTypeFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static WHSTransportLoadPickWorkLinesCollection construct()
    {
        return new WHSTransportLoadPickWorkLinesCollection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateNextTransportLoadLoadedWorkInventTrans</Name>
				<Source><![CDATA[
    private void findOrCreateNextTransportLoadLoadedWorkInventTrans(InventTransId _nextInventTransId)
    {
        if (transportLoadWorkLineListMap.exists(_nextInventTransId))
        {
            currentTransportLoadWorkLineList = transportLoadWorkLineListMap.lookup(_nextInventTransId) as WHSWorkLineList;
        }
        else
        {
            currentTransportLoadWorkLineList = WHSWorkLineList::construct();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertcurrentTransportLoadWorkLineListInMap</Name>
				<Source><![CDATA[
    private void insertcurrentTransportLoadWorkLineListInMap(InventTransId _inventTransId)
    {
        transportLoadWorkLineListMap.insert(_inventTransId, currentTransportLoadWorkLineList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInitialPickWorkLinesToCollectionFromWorkId</Name>
				<Source><![CDATA[
    private void addInitialPickWorkLinesToCollectionFromWorkId(WHSWorkId _workId)
    {
        InventTransId   prevInventTransId;
        WHSLoadLine     loadLine;
        WHSWorkLine     workLine;

        while select workLine
            where workLine.WorkId == _workId
            join RecId, InventTransId from loadLine
                order by loadLine.InventTransId
                    where loadLine.RecId == workLine.LoadLineRefRecId
                        && (!useInventTransTypeFilter
                            || loadLine.InventTransType == inventTransTypeFilter)
        {
            if (prevInventTransId != loadLine.InventTransId)
            {
                if (prevInventTransId)
                {
                    this.insertcurrentTransportLoadWorkLineListInMap(prevInventTransId);
                }

                this.findOrCreateNextTransportLoadLoadedWorkInventTrans(loadLine.InventTransId);

                prevInventTransId = loadLine.InventTransId;
            }

            currentTransportLoadWorkLineList.addWorkLine(workLine);
        }

        if (prevInventTransId)
        {
            this.insertcurrentTransportLoadWorkLineListInMap(prevInventTransId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addConsolidatedWorkTablesToCollection</Name>
				<Source><![CDATA[
    private void addConsolidatedWorkTablesToCollection(WHSWorkId _workId, boolean _hasWorkLineLoadLineDetails)
    {
        WHSWorkTable            consolidatedWorkTable;
        WHSConsolidatedWorkLine consolidatedWorkLine;
        WHSWorkLine             finalWorkLine;
        WHSWorkLine             workLineConsolidated;

        if (_hasWorkLineLoadLineDetails)
        {
            while select WorkId, hasWorkLineLoadLineDetails from consolidatedWorkTable
                exists join workLineConsolidated
                    where workLineConsolidated.WorkId == consolidatedWorkTable.WorkId
                exists join consolidatedWorkLine
                    where consolidatedWorkLine.OriginWorkLine == workLineConsolidated.RecId
                exists join finalWorkLine
                    where finalWorkLine.RecId == consolidatedWorkLine.consolidatedWorkLine
                        && finalWorkLine.WorkId == _workId
            {
                this.addInitialPickWorkLinesToCollectionFromWorkId(consolidatedWorkTable.WorkId);
                // Recursively check if the work headers consolidated to this work header also had been consolidated,
                // since these work headers will also require finding the initial pick work lines. 
                this.addConsolidatedWorkTablesToCollection(consolidatedWorkTable.WorkId, consolidatedWorkTable.HasWorkLineLoadLineDetails);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCollectionEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the enumerator for the transport load work line list.
    /// </summary>
    /// <returns>An instance of the <c>MapEnumerator</c>.</returns>
    public MapEnumerator getCollectionEnumerator()
    {
        return new MapEnumerator(transportLoadWorkLineListMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTransportLoadLoadedWorkToCollection</Name>
				<Source><![CDATA[
    private void addTransportLoadLoadedWorkToCollection(WHSTransportLoad _transportLoad)
    {
        WHSWorkTable                workTable;
        WHSTransportLoadLoadedWork  transportLoadLoadedWork;

        while select workTable
            exists join transportLoadLoadedWork
                where transportLoadLoadedWork.WorkId == workTable.Workid
                    && transportLoadLoadedWork.TransportLoad == _transportLoad.RecId
        {
            this.addConsolidatedWorkTablesToCollection(workTable.WorkId, workTable.HasWorkLineLoadLineDetails);
            this.addInitialPickWorkLinesToCollectionFromWorkId(workTable.WorkId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTransportLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WHSTransportLoadPickWorkLinesCollection</c>
    /// from a transport load.
    /// </summary>
    /// <param name = "_transportLoad">
    /// The transport load that should build the collection.
    /// </param>
    /// <returns>
    /// A new <c>WHSTransportLoadPickWorkLinesCollection</c> instance.
    /// </returns>
    public static WHSTransportLoadPickWorkLinesCollection newFromTransportLoad(WHSTransportLoad _transportLoad)
    {
        WHSTransportLoadPickWorkLinesCollection transportLoadPickWorkLinesCollection = WHSTransportLoadPickWorkLinesCollection::construct();

        transportLoadPickWorkLinesCollection.addTransportLoadLoadedWorkToCollection(_transportLoad);

        return transportLoadPickWorkLinesCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTransportLoadWithTransTypeFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WHSTransportLoadPickWorkLinesCollection</c>
    /// from a transport load for a specific <c>InventTransType</c>.
    /// </summary>
    /// <param name = "_transportLoad">
    /// The transport load that should build the collection.
    /// </param>
    /// <param name = "_inventTransTypeFilter">
    /// The invent trans type that controls which load lines to build into the collection.
    /// </param>
    /// <returns>
    /// A new <c>WHSTransportLoadPickWorkLinesCollection</c> instance.
    /// </returns>
    public static WHSTransportLoadPickWorkLinesCollection newFromTransportLoadWithTransTypeFilter(
        WHSTransportLoad    _transportLoad,
        InventTransType     _inventTransTypeFilter)
    {
        WHSTransportLoadPickWorkLinesCollection transportLoadPickWorkLinesCollection = WHSTransportLoadPickWorkLinesCollection::construct();
        
        transportLoadPickWorkLinesCollection.parmUseInventTransTypeFilter(true);
        transportLoadPickWorkLinesCollection.parmInventTransTypeFilter(_inventTransTypeFilter);
        
        transportLoadPickWorkLinesCollection.addTransportLoadLoadedWorkToCollection(_transportLoad);

        return transportLoadPickWorkLinesCollection;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>