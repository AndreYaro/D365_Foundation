<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchImportDeclarationTotals_FDocLine_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculate the import declaration totals for fiscal document line
/// </summary>
class PurchImportDeclarationTotals_FDocLine_BR extends PurchImportDeclarationTotals_BR
{
    FiscalDocument_BR       fiscalDocument;
    FiscalDocumentLine_BR   fiscalDocumentLine;
    VendInvoiceJour         vendInvoiceJour;
    VendInvoiceTrans        vendInvoiceTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the vendor invoice exchange rate
    /// </summary>
    /// <returns>
    /// The exchange rate value
    /// </returns>
    protected ExchRate exchRate()
    {
        return vendInvoiceJour.ExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLinesQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects fiscal document lines related to vendor invoice transaction lines
    /// </summary>
    public void initLinesQuery()
    {
        select fiscalDocumentLine
            order by DIAddition
            where   fiscalDocumentLine.FiscalDocument == fiscalDocument.RecId
        join vendInvoiceTrans
            where   fiscalDocumentLine.RefRecId   == vendInvoiceTrans.RecId &&
                    fiscalDocumentLine.RefTableId   == vendInvoiceTrans.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAddition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets purchase addition number
    /// </summary>
    /// <returns>
    /// The addition number
    /// </returns>
    protected str lineAddition()
    {
        return fiscalDocumentLine.DIAddition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountFOB</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets line amount based on FOB presentation
    /// </summary>
    /// <returns>
    /// Line amount value
    /// </returns>
    protected LineAmount lineAmountFOB()
    {
        return vendInvoiceTrans.LineAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source document reference
    /// </summary>
    /// <returns>
    /// <c>RefRecId</c> of the source document
    /// </returns>
    protected recId lineRecId()
    {
        return fiscalDocumentLine.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(Common common)
    {
        super();

        fiscalDocument  = common;
        vendInvoiceJour = vendInvoiceJour::findRecId(fiscalDocument.RefRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets next line of the iteraction
    /// </summary>
    /// <returns>
    /// Returns true if there is another fiscal document line reference to iteract,
    /// otherwise false
    /// </returns>
    public boolean nextLine()
    {
        next fiscalDocumentLine;

        return fiscalDocumentLine ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMarkups</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the invoice line miscellaneous charges amounts.
    /// </summary>
    protected void setMarkups()
    {
        MarkupTrans     markupTrans;
        MarkupTable     markupTable;
        boolean         isMarkupClassification;
        MarkupAmount    markupAmount;

        while select CurrencyCode, CalculatedAmount, RecId from markuptrans
                    where markuptrans.TransRecId == this.lineRecId()
                          && markuptrans.TransTableId == this.transTableId()
                    join MarkupClassification_BR from markupTable
                        where markupTable.MarkupCode == markuptrans.MarkupCode
                        && markupTable.ModuleType == markuptrans.ModuleType
        {
            if (markupTable.MarkupClassification_BR != MarkupClassification_BR::Blank)
            {
                isMarkupClassification = true;
            }

            markupAmount    = markupTrans.CalculatedAmount  - FiscalDocumentParmDataCreator_BR::getTaxInCostPrice(markupTrans.TableId, markupTrans.RecId);

            markupAmount = CurrencyExchangeHelper::amountCur2MST(markupAmount, markupTrans.CurrencyCode, vendInvoiceJour.ExchRate);

            switch (markupTable.MarkupClassification_BR)
            {
                case MarkupClassification_BR::Freight   :
                    markupFreight   = markupAmount;
                    importDeclarationTotals.Freight   += markupFreight;
                    break;
                case MarkupClassification_BR::Insurance :
                    markupInsurance = markupAmount;
                    importDeclarationTotals.Insurance += markupInsurance;
                    break;
                case MarkupClassification_BR::SISCOMEX  :
                    markupSiscomex  =markupAmount;
                    importDeclarationTotals.SISCOMEX  += markupSiscomex;
                    break;
                case MarkupClassification_BR::Others    :
                    markupOthers    = markupAmount;
                    importDeclarationTotals.Others    += markupOthers;
                    break;
            }
        }

        if (isMarkupClassification)
        {
            importDeclarationTotals.Freight          = abs(importDeclarationTotals.Freight);
            importDeclarationTotals.Insurance        = abs(importDeclarationTotals.Insurance);
            importDeclarationTotals.SISCOMEX         = abs(importDeclarationTotals.SISCOMEX);
            importDeclarationTotals.Others           = abs(importDeclarationTotals.Others);
            isMarkupClassification = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates tax amount for the current fiscal document line and tax type
    /// </summary>
    /// <param name="_taxType">
    /// Tax type to calculate amount
    /// </param>
    /// <returns>
    /// The tax amount calculated
    /// </returns>
    public TaxAmount taxAmount(TaxType_BR _taxType)
    {
        TaxTrans                    taxTrans;
        TaxTrans_BR                 taxTrans_BR;
        TaxAmount                   totalTaxAmount;
        MarkupTrans                 markupTrans;
        MarkupTable                 markupTable;

        while select TaxAmount from taxTrans
        where   taxTrans.SourceRecId    == fiscalDocumentLine.RefRecId      &&
                taxTrans.SourceTableId  == fiscalDocumentLine.RefTableId
        join TaxAmountOther_BR from taxTrans_BR
        where   taxTrans_BR.TaxType_BR  == _taxType &&
                taxTrans_BR.TaxTrans    == taxTrans.RecId
        {
             totalTaxAmount += taxTrans_BR.TaxAmountOther_BR ? taxTrans_BR.TaxAmountOther_BR : taxTrans.TaxAmount;
        }

        while select Value, MarkupClassification_BR, CurrencyCode, RecId from markupTrans
            where   markupTrans.TransTableId == fiscalDocumentLine.RefTableId   &&
                    markupTrans.TransRecId   == fiscalDocumentLine.RefRecId
            join TaxAmount from taxTrans
            where   taxTrans.SourceRecId    == markupTrans.RecId    &&
                    taxTrans.SourceTableId  == markupTrans.TableId
            join TaxAmountOther_BR from taxTrans_BR
            where   taxTrans_BR.TaxType_BR      == _taxType  &&
                    taxTrans_BR.TaxTrans        == taxTrans.RecId
            exists join markupTable
            where   markupTable.ModuleType   == markupTrans.ModuleType  &&
                    markupTable.MarkupCode   == markupTrans.MarkupCode  &&
                    (markupTable.CustType   != MarkupType::LedgerAccount || markupTable.VendType != MarkupType::LedgerAccount)
        {
            totalTaxAmount += taxTrans_BR.TaxAmountOther_BR ? taxTrans_BR.TaxAmountOther_BR : taxTrans.TaxAmount;
        }

        return totalTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source document table ID of the current fiscal document line
    /// </summary>
    /// <returns>
    /// The table ID value of source document reference
    /// </returns>
    protected tableId transTableId()
    {
        return fiscalDocumentLine.RefTableId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>