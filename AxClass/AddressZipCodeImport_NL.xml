<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AddressZipCodeImport_NL</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AddressZipCodeImport_NL extends AddressZipCodeImport
{
    private const str asterisk = '*';
    private const str mutations = 'MUTATIES';
    private const str mutationsWithStars = asterisk + mutations + asterisk;

    private NoYes                           mutationFile;

    private Description                     description;
    private Yr                              periodYear;
    private MonthsOfYear                    period;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>askConfirmation</Name>
				<Source><![CDATA[
    private boolean askConfirmation(str _message)
    {
        return Box::yesNo(_message, DialogButton::Yes) == DialogButton::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLog</Name>
				<Source><![CDATA[
    private boolean checkLog()
    {
        Yr                         prevPeriodYear;
        MonthsOfYear               prevPeriod;
        AddressZipCodeImportLog_NL addressZipCodeImportLog_NL;
        boolean                    mutationFileWithOutBase = false;

        if (mutationFile)
        {
            select firstonly RecId from addressZipCodeImportLog_NL
                where !(addressZipCodeImportLog_NL.Description like mutationsWithStars);

            if (!addressZipCodeImportLog_NL.RecId)
            {
                if (!this.askConfirmation("@SYS309875"))
                {
                    return false;
                }
                else
                {
                    mutationFileWithOutBase = true;
                }
            }
        }

        if (AddressZipCodeImportLog_NL::exist(periodYear, period))
        {
            if (!this.askConfirmation("@SYS94765"))
            {
                return false;
            }
        }

        select firstonly RecId from addressZipCodeImportLog_NL
            where (addressZipCodeImportLog_NL.Year == periodYear && addressZipCodeImportLog_NL.Period > period)
                || addressZipCodeImportLog_NL.Year > periodYear;

        if (addressZipCodeImportLog_NL)
        {
            if (!this.askConfirmation("@SYS308550"))
            {
                return false;
            }
        }

        if (period == MonthsOfYear::January)
        {
            prevPeriodYear = periodYear-1;
            prevPeriod     = MonthsOfYear::December;
        }
        else
        {
            prevPeriodYear = periodYear;
            prevPeriod     = period - 1;
        }

        if (!AddressZipCodeImportLog_NL::exist(prevPeriodYear, prevPeriod)
            && mutationFile
            && !mutationFileWithOutBase)
        {
            if (!this.askConfirmation("@SYS94825"))
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFile</Name>
				<Source><![CDATA[
    protected void openFile(str _fileOpen = "")
    {
        const str delimiter = '\r\n';

        super();
        importFile.inFieldDelimiter(delimiter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>readFile</Name>
				<Source><![CDATA[
    protected void readFile()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceNL00002, funcName());

        str lineIn;
        int recExpected = 0;

        this.openFile();
        if (this.validateHeaderRecord())
        {
            // Check county
            AddressZipCodeImport_NL::insertAddressState(logisticsAddressCountryRegion.CountryRegionId);

            while (importFile.status() == IO_Status::Ok)
            {
                lineIn = conpeek(importFile.read(), 1);
                if (strlen(lineIn) > 1)
                {
                    if (substr(lineIn, 1, 1) == asterisk)
                    {
                        recExpected = (mutationFile == NoYes::Yes) ? str2int(substr(lineIn,22,7)) : str2int(substr(lineIn,28,7));
                        processOK = recExpected == progressCounter;
                    }
                    else
                    {
                        this.processRecord(lineIn);
                    }
                }
            }

            info(strfmt("@SYS52615",progressCounter));
            if (processOK)
            {
                AddressZipCodeImportLog_NL::writeLogEntry(description, periodYear, period);
            }
            else
            {
                error(strfmt("@SYS94761", progressCounter, recExpected));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRecord</Name>
				<Source><![CDATA[
    private void processRecord(str _lineIn)
    {
        if (mutationFile)
        {
            switch (substr(_lineIn, 1, 1))
            {
                case '0':
                    AddressZipCodeImport_NL::deleteAddressZipCode(_lineIn, logisticsAddressCountryRegion.CountryRegionId);
                    break;
                case '1':
                    AddressZipCodeImport_NL::changeAddressZipCode(_lineIn, logisticsAddressCountryRegion.CountryRegionId);
                    break;
                case '2':
                    AddressZipCodeImport_NL::addAddressZipCode(mutationFile, _lineIn, logisticsAddressCountryRegion.CountryRegionId);
                    break;
            }
        }
        else if (substr(_lineIn, 1, 1) != asterisk)
        {
            AddressZipCodeImport_NL::addAddressZipCode(mutationFile, _lineIn, logisticsAddressCountryRegion.CountryRegionId);
        }

        this.progressUpdateInt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateHeaderRecord</Name>
				<Source><![CDATA[
    private boolean validateHeaderRecord()
    {
        str headerLine;

        headerLine = conpeek(importFile.read(), 1);
        description = strrtrim(strrem(headerLine, asterisk));

        if (strscan(headerLine, mutations, 1, strlen(headerLine)))
        {
            mutationFile = true;
        }
        else
        {
            mutationFile = false;
        }

        periodYear = str2int(mutationFile ? substr(headerLine, 46, 4) : substr(headerLine, 37, 4));
        if (periodYear <= 0 || !this.validateHeaderPeriod(headerLine))
        {
            error("@SYS98433");
            return false;
        }

        if (this.delete() && mutationFile == false)
        {
            AddressZipCodeImport::deleteAllCountryRegionZipCodes(logisticsAddressCountryRegion.CountryRegionId);
        }

        return this.checkLog();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateHeaderPeriod</Name>
				<Source><![CDATA[
    private boolean validateHeaderPeriod(str _headerLine)
    {
        const str jan = 'JAN';
        const str feb = 'FEB';
        const str maa = 'MAA';
        const str apr = 'APR';
        const str mei = 'MEI';
        const str jun = 'JUN';
        const str jul = 'JUL';
        const str aug = 'AUG';
        const str sep = 'SEP';
        const str okt = 'OKT';
        const str nov = 'NOV';
        const str dec = 'DEC';

        str strPeriod;

        strPeriod = mutationFile ? substr(_headerLine, 42, 3) : substr(_headerLine, 33, 3);
        switch (strPeriod)
        {
            case jan : period = MonthsOfYear::January; break;
            case feb : period = MonthsOfYear::February; break;
            case maa : period = MonthsOfYear::March; break;
            case apr : period = MonthsOfYear::April; break;
            case mei : period = MonthsOfYear::May; break;
            case jun : period = MonthsOfYear::June; break;
            case jul : period = MonthsOfYear::July; break;
            case aug : period = MonthsOfYear::August; break;
            case sep : period = MonthsOfYear::September; break;
            case okt : period = MonthsOfYear::October; break;
            case nov : period = MonthsOfYear::November; break;
            case dec : period = MonthsOfYear::December; break;
            default:
                period = MonthsOfYear::None;
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAddressZipCode</Name>
				<Source><![CDATA[
    private static void addAddressZipCode(boolean _mutationFile, str _lineIn, LogisticsAddressCountryRegionId _countryRegionId)
    {
        LogisticsAddressZipCode addressZipCode;
        LogisticsAddressCounty  addressCounty;

        if (_mutationFile)
        {
            addressZipCode.ZipCode         = LogisticsPostalAddressMap::formatZipCodeStrForNL(substr(_lineIn, 202, 6));
            addressZipCode.FromNum         = str2int(substr(_lineIn, 209, 5));
            addressZipCode.ToNum           = str2int(substr(_lineIn, 214, 5));
            addressZipCode.EvenOdd         = AddressZipCodeImport_NL::convertAllEvenOdd(substr(_lineIn, 208, 1));
            addressZipCode.StreetName      = substr(_lineIn, 302, 43);
            addressZipCode.City            = substr(_lineIn, 237, 24);
            addressZipCode.CityAlias       = substr(_lineIn, 219, 18);
            addressZipCode.County          = substr(_lineIn, 354, 4);
            addressZipCode.State           = substr(_lineIn, 382, 1);
            addressZipCode.CountryRegionId = _countryRegionId;
            addressZipCode.insert();
            if (substr(_lineIn, 382, 1) != ' ')
            {
                if (!LogisticsAddressCounty::exist(_countryRegionId, substr(_lineIn, 382, 1), substr(_lineIn, 354, 4)))
                {
                    addressCounty.CountyId        = substr(_lineIn, 354, 4);
                    addressCounty.CountryRegionId = _countryRegionId;
                    addressCounty.StateId         = substr(_lineIn, 382, 1);
                    addressCounty.Name            = substr(_lineIn, 358, 24);
                    addressCounty.insert();
                }
            }
        }
        else
        {
            addressZipCode.ZipCode         = LogisticsPostalAddressMap::formatZipCodeStrForNL(substr(_lineIn, 1, 6));
            addressZipCode.FromNum         = str2int(substr(_lineIn, 8, 5));
            addressZipCode.ToNum           = str2int(substr(_lineIn, 13, 5));
            addressZipCode.EvenOdd         = AddressZipCodeImport_NL::convertAllEvenOdd(substr(_lineIn, 7, 1));
            addressZipCode.StreetName      = substr(_lineIn, 101, 43);
            addressZipCode.City            = substr(_lineIn, 36, 24);
            addressZipCode.CityAlias       = substr(_lineIn, 18, 18);
            addressZipCode.County          = substr(_lineIn, 153, 4);
            addressZipCode.State           = substr(_lineIn, 181, 1);
            addressZipCode.CountryRegionId = _countryRegionId;
            addressZipCode.insert();
            AddressZipCodeImport_NL::insertAddressCounty(_lineIn, _countryRegionId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeAddressZipCode</Name>
				<Source><![CDATA[
    private static void changeAddressZipCode(str _lineIn, LogisticsAddressCountryRegionId _countryRegionId)
    {
        LogisticsAddressZipCode         addressZipCode;
        LogisticsAddressCounty          addressCounty;
        LogisticsAddressZipCodeId       addressZipCodeId = LogisticsPostalAddressMap::formatZipCodeStrForNL(substr(_lineIn, 18, 6));
        StreetNum                       fromNumOld = str2int(substr(_lineIn, 25 ,5));
        StreetName                      streetNameOld = substr(_lineIn, 118, 43);
        str                             mutIndicator = substr(_lineIn, 2, 16);

        while select forupdate addressZipCode
            where addressZipCode.ZipCode            == addressZipCodeId
               && addressZipCode.FromNum            == fromNumOld
               && addressZipCode.StreetName         == streetNameOld
               && addressZipCode.CountryRegionId    == _countryRegionId
        {
            if (substr(mutIndicator, 1,2) != '00')
            {
                addressZipCode.ZipCode    = LogisticsPostalAddressMap::formatZipCodeStrForNL(substr(_lineIn, 202, 6));
            }
            if (substr(mutIndicator, 3,1) ==  '1')
            {
                addressZipCode.EvenOdd    = AddressZipCodeImport_NL::convertAllEvenOdd(substr(_lineIn, 208, 1));
            }
            if (substr(mutIndicator, 4,1) ==  '1')
            {
                addressZipCode.FromNum    = str2int(substr(_lineIn, 209, 5));
            }
            if (substr(mutIndicator, 5,1) ==  '1')
            {
                addressZipCode.ToNum    = str2int(substr(_lineIn, 214, 5));
            }
            if (substr(mutIndicator, 6,1) ==  '1')
            {
                addressZipCode.CityAlias  = substr(_lineIn, 219, 18);
            }
            if (substr(mutIndicator, 7,1) ==  '1')
            {
                addressZipCode.City       = substr(_lineIn, 237, 24);
            }
            if (substr(mutIndicator,10,1) ==  '1')
            {
                addressZipCode.StreetName = substr(_lineIn, 302, 43);
            }
            if (substr(mutIndicator,13,1) ==  '1')
            {
                addressZipCode.County = substr(_lineIn, 354, 4);

                // Check to see if the county exists; if not create it
                addressCounty = LogisticsAddressCounty::find(addressZipCode.CountryRegionId, substr(_lineIn, 198, 1), substr(_lineIn, 170, 4),false);
                if (!addressCounty)
                {
                    AddressZipCodeImport_NL::insertAddressCounty(_lineIn, _countryRegionId);
                }
            }
            if (substr(mutIndicator,13,2) ==  '01')
            {
                addressZipCode.County = substr(_lineIn, 354, 4);

                // Change the name of the county; if not exist it's already being changed (e.g. even/odd range)
                addressCounty = LogisticsAddressCounty::find(addressZipCode.CountryRegionId, substr(_lineIn, 198, 1), substr(_lineIn, 170, 4), true);
                if (addressCounty)
                {
                    addressCounty.Name = substr(_lineIn, 358, 24);
                    addressCounty.update();
                }
            }
            if (substr(mutIndicator,15,1) ==  '1')
            {
                addressZipCode.State = substr(_lineIn, 382, 1);

                // Change the state of the county; if not exist it's already being changed (e.g. even/odd range)
                addressCounty = LogisticsAddressCounty::find(addressZipCode.CountryRegionId, substr(_lineIn, 198, 1), substr(_lineIn, 170, 4), true);
                if (addressCounty && ! LogisticsAddressCounty::exist(addressZipCode.CountryRegionId, substr(_lineIn, 382, 1), substr(_lineIn, 170, 4)))
                {
                    addressCounty.StateId = substr(_lineIn, 382, 1);
                    addressCounty.update();
                }
            }

            addressZipCode.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertAllEvenOdd</Name>
				<Source><![CDATA[
    private static int convertAllEvenOdd(str _allEvenOdd)
    {
        int value;
        #characters

        switch (_allEvenOdd)
        {
            case #0 : value = 2; break;
            case #1 : value = 1; break;
            default : value = 0; break;
        }

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAddressZipCode</Name>
				<Source><![CDATA[
    private static void deleteAddressZipCode(str _lineIn, LogisticsAddressCountryRegionId _countryRegionId)
    {
        LogisticsAddressZipCode     addressZipCode;
        LogisticsAddressZipCodeId   addressZipCodeId = LogisticsPostalAddressMap::formatZipCodeStrForNL(substr(_lineIn, 18, 6));
        StreetNum                   fromNumOld = str2int(substr(_lineIn, 25 ,5));
        StreetName                  streetNameOld = substr(_lineIn, 118, 43);

        delete_from addressZipCode
            where addressZipCode.CountryRegionId    == _countryRegionId
               && addressZipCode.ZipCode            == addressZipCodeId
               && addressZipCode.FromNum            == fromNumOld
               && addressZipCode.StreetName         == streetNameOld;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAddressCounty</Name>
				<Source><![CDATA[
    private static void insertAddressCounty(str _lineIn, LogisticsAddressCountryRegionId _countryRegionId)
    {
        LogisticsAddressCounty addressCounty;
        str stateId;

        stateId = substr(_lineIn, 181,1);
        if (stateId && stateId != ' ')
        {
            if (!LogisticsAddressCounty::exist(_countryRegionId, stateId, substr(_lineIn, 153,4)))
            {
                addressCounty.CountryRegionId = _countryRegionId;
                addressCounty.StateId         = stateId;
                addressCounty.CountyId        = substr(_lineIn, 153, 4);
                addressCounty.Name            = substr(_lineIn, 157, 24);

                addressCounty.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAddressState</Name>
				<Source><![CDATA[
    private static void insertAddressState(LogisticsAddressCountryRegionId _countryRegionId)
    {
        const str Groningen    = 'Groningen';
        const str Friesland    = 'Friesland';
        const str Drenthe      = 'Drenthe';
        const str Overijssel   = 'Overijssel';
        const str Gelderland   = 'Gelderland';
        const str Zuidholland  = 'Zuid-Holland';
        const str Limburg      = 'Limburg';
        const str Noordholland = 'Noord-Holland';
        const str Utrecht      = 'Utrecht';
        const str Noordbrabant = 'Noord-Brabant';
        const str Zeeland      = 'Zeeland';
        const str Flevoland    = 'Flevoland';

        LogisticsAddressState   addressState;
        container               conStateId;
        container               conStateName;
        Counter                 icounter;
        #characters

        conStateId   = [#capitalA,#capitalB,#capitalD,#capitalE,#capitalG,#capitalH,#capitalK,#capitalL,#capitalM,#capitalP,#capitalS,#capitalX];
        conStatename = [Groningen, Friesland, Drenthe, Overijssel, Gelderland, ZuidHolland,
                        Limburg, NoordHolland, Utrecht, NoordBrabant, Zeeland, Flevoland];

        for (icounter=1;icounter<=conlen(conStateId);icounter++)
        {
            if (!LogisticsAddressState::exist(_countryRegionId, conpeek(conStateId,icounter)))
            {
                addressState.CountryRegionId = _countryRegionId;
                addressState.StateId = conpeek(conStateId,icounter);
                addressState.Name    = conpeek(conStateName,icounter);
                addressState.insert();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>