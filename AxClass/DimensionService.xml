<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimensionService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>DimensionService</c> class is the dimension Web service class.
/// </summary>
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
class DimensionService
{
    #DimensionServiceFaults
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getActiveDimensionsFromLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets active dimensions in current company
    /// </summary>
    /// <returns>
    /// A list of <c>DimensionContract</c> objects.
    /// </returns>
    [AifCollectionTypeAttribute('return', Types::Class, classStr(DimensionContract))]
    public List getActiveDimensionsFromLedger()
    {
        DimensionAttributeSetItem   dimAttrSetItem;
        DimensionAttribute          dimAttr;
        DimensionEnumeration        dimensionSetId;
        DimensionContract           dimensionContract;
        List                        dimensionContractList;

        dimensionContractList = new List(Types::Class);
        dimensionSetId = DimensionCache::getDimensionAttributeSetForLedger();
        if (!dimensionSetId)
        {
            throw AifFault::faultList("@SYS4007956", #DimensionAttributeSetNotAvailable);
        }

        // Find all the active dimensions for current ledger except main account
        while select Name, RecId, BackingEntityType from dimAttr
            exists join RecId from dimAttrSetItem
                where dimAttrSetItem.DimensionAttribute == dimAttr.RecId
                   && dimAttrSetItem.DimensionAttributeSet == dimensionSetId
        {
            dimensionContract = new DimensionContract();
            dimensionContract.parmDimensionName(dimAttr.localizedName());
            dimensionContract.parmBackingEntityType(dimAttr.BackingEntityType);
            dimensionContractList.addEnd(dimensionContract);
        }
        return dimensionContractList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes an incoming account structure contract and return a list of financial dimensions for a
    /// specific account structure.
    /// </summary>
    /// <param name="_accountStructureContract">
    /// An inbound account structure contract.
    /// </param>
    /// <returns>
    /// A String list of dimension values.
    /// </returns>
    [AifCollectionTypeAttribute('return', Types::Class, classstr(DimensionContract))]
    public List getDimensions(AccountStructureContract _accountStructureContract)
    {
        List                            dimensionAttributeList;
        Map                             isExistingAttribute;
        DimensionContract               dimensionContract;
        DimensionRule                   dimensionRule;
        DimensionAttribute              dimensionAttribute;
        DimensionHierarchy              dimHierarchyAccountStructure;
        DimensionHierarchy              dimHierarchyAccountRuleStructure;
        DimensionHierarchyLevel         dimensionHierarchyLevel;
        DimensionRuleAppliedHierarchy   dimensionRuleAppliedHierarchy;

        dimensionAttributeList = new List(Types::Class);
        isExistingAttribute = new Map(Types::String, Types::void);

        if (_accountStructureContract && _accountStructureContract.parmName())
        {
            // An active, non-system generated must exist for the specified type and name
            dimHierarchyAccountStructure = DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::AccountStructure, _accountStructureContract.parmName());
            if (!dimHierarchyAccountStructure)
            {
                throw AifFault::fault("@SYS323855", #AccountStructureDoesNotExist);
            }

            // Pick up all attributes off the active account structure
            while select Name, BackingEntityType from dimensionAttribute group by Name, BackingEntityType order by Name
                exists join DimensionAttribute from dimensionHierarchyLevel
                    where dimensionAttribute.RecId == dimensionHierarchyLevel.DimensionAttribute &&
                          dimensionHierarchyLevel.DimensionHierarchy == dimHierarchyAccountStructure.RecId
            {
                dimensionContract = new DimensionContract();
                dimensionContract.parmDimensionName(dimensionAttribute.Name);
                dimensionContract.parmBackingEntityType(dimensionAttribute.BackingEntityType);
                dimensionAttributeList.addEnd(dimensionContract);
                isExistingAttribute.insert(dimensionAttribute.Name, null);
            }

            // Pick up all attributes off the active applied account rule structures
            while select Name, BackingEntityType from dimensionAttribute group by Name, BackingEntityType order by Name
                 exists join DimensionAttribute from dimensionHierarchyLevel
                    where dimensionAttribute.RecId == dimensionHierarchyLevel.DimensionAttribute
                 exists join RecId from dimHierarchyAccountRuleStructure
                    where dimensionHierarchyLevel.DimensionHierarchy == dimHierarchyAccountRuleStructure.RecId &&
                        dimHierarchyAccountRuleStructure.IsSystemGenerated == false &&
                        dimHierarchyAccountRuleStructure.IsDraft == false
                 exists join DimensionHierarchy from dimensionRuleAppliedHierarchy
                    where (dimHierarchyAccountRuleStructure.RecId == dimensionRuleAppliedHierarchy.DimensionHierarchy) &&
                           (dimHierarchyAccountRuleStructure.StructureType == DimensionHierarchyType::AccountRuleStructure)
                 exists join RecId from dimensionRule
                    where dimensionRuleAppliedHierarchy.DimensionRule == dimensionRule.RecId &&
                        dimensionRule.IsDraft == NoYes::No &&
                        dimensionRule.AccountStructure == dimHierarchyAccountStructure.RecId
            {
                if (!isExistingAttribute.exists(dimensionAttribute.Name))
                {
                    dimensionContract = new DimensionContract();
                    dimensionContract.parmDimensionName(dimensionAttribute.Name);
                    dimensionContract.parmBackingEntityType(dimensionAttribute.BackingEntityType);
                    dimensionAttributeList.addEnd(dimensionContract);
                }
            }
        }
        else if (!_accountStructureContract)
        {
            throw AifFault::faultList("@SYS323945", #AccountStructureContractIsNotInitialized);
        }
        else if (!_accountStructureContract.parmName())
        {
            throw AifFault::faultList("@SYS323946", #AccountStructureNameIsNotSpecified);
        }

        return dimensionAttributeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionsAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of all financial dimensions.
    /// </summary>
    /// <returns>
    /// A String list of dimension values.
    /// </returns>
    [AifCollectionTypeAttribute('return', Types::Class, classstr(DimensionContract))]
    public List getDimensionsAll()
    {
        List                dimensionAttributeList;
        DimensionContract   dimensionContract;
        DimensionAttribute  dimensionAttribute;

        dimensionAttributeList = new List(Types::Class);

        while select Name, BackingEntityType from dimensionAttribute
            order by Name
            where dimensionAttribute.Type != DimensionAttributeType::DynamicAccount
        {
            dimensionContract = new DimensionContract();
            dimensionContract.parmDimensionName(dimensionAttribute.Name);
            dimensionContract.parmBackingEntityType(dimensionAttribute.BackingEntityType);
            dimensionAttributeList.addEnd(dimensionContract);
        }

        return dimensionAttributeList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>