<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerVATDeclReportSalesPurchBook_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class LedgerVATDeclReportSalesPurchBook_RU extends LedgerVATDeclReport_RU
{
    boolean             groupByFactures;
    boolean             groupCorrect;

    protected const str defaultBookDateNumDelimiter = ';';

    #macrolib.PurchBook_RU
    #macrolib.SalesBook_RU

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFactureCon</Name>
				<Source><![CDATA[
    protected container getFactureCon(SalesPurchBookDataMap_RU _salesPurchBookDataMap, BookDateNumDelimiter_RU _delimiter = defaultBookDateNumDelimiter)
    {
        FactureExternalId_RU            factureExternalId;
        FactureDate_External_RU         factureDate_External;
        SeparateDivisionId_RU           separateDivisionId;
        FactureJour_RU                  annulmentSourceFacture;
        FactureJour_RU                  factureJour;
        FactureJour_RU                  factureJourOrig;
        FactureJour_RU                  factureJourRev;
        container                       origFactureCon;
        str                             numStr;
        int                             idx;

        void buildFactureStr()
        {
            factureExternalId = separateDivisionId  ? strfmt("@GLS111217", factureExternalId, separateDivisionId)
                                                    : factureExternalId;

            numStr += numStr ? _delimiter : '';
            numStr += factureExternalId;
        }

        if (_salesPurchBookDataMap.FactureJour_RU)
        {
            factureJour = FactureJour_RU::findRecId(_salesPurchBookDataMap.FactureJour_RU);
        }
        else
        {
            factureJour = FactureJour_RU::find(_salesPurchBookDataMap.FactureId, _salesPurchBookDataMap.factureModule());
        }

        if (_salesPurchBookDataMap.CorrectedFactureExternalId)
        {
            origFactureCon = _salesPurchBookDataMap.SalesPurchBookDataMap_RU::getFactureCon(factureJour);
        }

        if (!_salesPurchBookDataMap.CorrectedFactureExternalId || _salesPurchBookDataMap.RevisionType == FactureRevisionType_RU::RevisionOriginal)
        {
            if (_salesPurchBookDataMap.Annulment == NoYes::No)
            {
                separateDivisionId = SalesPurchBookDataMap_RU::getSeparateDivisionId(factureJour);
            }
            else
            {
                annulmentSourceFacture = SalesPurchBookDataMap_RU::getAnnulmentSourceFacture(
                        factureJour,
                        FactureJour_RU::findRecId(_salesPurchBookDataMap.RefRevisedFacture));

                if (annulmentSourceFacture)
                {
                    separateDivisionId = SalesPurchBookDataMap_RU::getSeparateDivisionId(annulmentSourceFacture);
                }
            }

            if (origFactureCon != conNull())
            {
                factureJourOrig      = conPeek(origFactureCon, 1);
                factureExternalId    = factureJourOrig.FactureExternalId;
                factureDate_External = factureJourOrig.FactureDate_External;
            }
            else
            {
                factureExternalId    = _salesPurchBookDataMap.FactureExternalId;
                factureDate_External = _salesPurchBookDataMap.FactureDate_External;
            }

            buildFactureStr();
        }
        else
        {
            if (_salesPurchBookDataMap.Annulment == NoYes::Yes)
            {
                annulmentSourceFacture = SalesPurchBookDataMap_RU::getAnnulmentSourceFacture(
                        factureJour,
                        FactureJour_RU::findRecId(_salesPurchBookDataMap.RefRevisedFacture));

                if (annulmentSourceFacture)
                {
                    factureJour     = annulmentSourceFacture;
                    origFactureCon  = _salesPurchBookDataMap.SalesPurchBookDataMap_RU::getFactureCon(factureJour);
                }
            }

            for (idx = 1; idx <= conLen(origFactureCon); idx++)
            {
                factureJourOrig = conPeek(origFactureCon, idx);

                select firstonly factureJourRev
                    order by CreatedDateTime desc, SeqNumber desc
                        where  factureJourRev.RefRevisedFacture == factureJourOrig.RecId       &&
                              (factureJourRev.CreatedDateTime   <  factureJour.CreatedDateTime ||
                              (factureJourRev.CreatedDateTime   == factureJour.CreatedDateTime &&
                               factureJourRev.SeqNumber         <  factureJour.SeqNumber));

                separateDivisionId   = SalesPurchBookDataMap_RU::getSeparateDivisionId(factureJourRev ? factureJourRev : factureJourOrig);
                factureExternalId    = factureJourOrig.FactureExternalId;

                if (!factureDate_External)
                {
                    factureDate_External = factureJourOrig.FactureDate_External;
                }

                buildFactureStr();
            }
        }

        return [numStr, factureDate_External];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFactureConCorr</Name>
				<Source><![CDATA[
    protected container getFactureConCorr(SalesPurchBookDataMap_RU _salesPurchBookDataMap)
    {
        container                       result;
        SeparateDivisionId_RU           separateDivisionId;
        FactureExternalId_RU            factureExternalId;
        FactureJour_RU                  annulmentSourceFacture;
        FactureJour_RU                  factureJour;

        if (_salesPurchBookDataMap.FactureJour_RU)
        {
            factureJour = FactureJour_RU::findRecId(_salesPurchBookDataMap.FactureJour_RU);
        }
        else
        {
            factureJour = FactureJour_RU::find(_salesPurchBookDataMap.FactureId, _salesPurchBookDataMap.factureModule());
        }

        switch (_salesPurchBookDataMap.CorrectionType)
        {
            case FactureCorrectionType_RU::Revision:
                factureExternalId = _salesPurchBookDataMap.CorrectedFactureExternalId;

                if (_salesPurchBookDataMap.Annulment == NoYes::No)
                {
                    separateDivisionId = SalesPurchBookDataMap_RU::getSeparateDivisionId(factureJour);
                }
                else
                {
                    annulmentSourceFacture = SalesPurchBookDataMap_RU::getAnnulmentSourceFacture(
                            factureJour,
                            FactureJour_RU::findRecId(_salesPurchBookDataMap.RefRevisedFacture));

                    if (annulmentSourceFacture)
                    {
                        separateDivisionId = SalesPurchBookDataMap_RU::getSeparateDivisionId(annulmentSourceFacture);
                    }
                }

                factureExternalId = separateDivisionId  ? strfmt("@GLS111217", factureExternalId, separateDivisionId)
                                                        : factureExternalId;

                result = [factureExternalId, _salesPurchBookDataMap.CorrectedFactureDate];
                break;

            default:
                if ((_salesPurchBookDataMap.TableId == tablenum(PurchBookTrans_RU) &&
                        _salesPurchBookDataMap.TransType != SalesPurchBookTransType_RU::VATStandardCancellation) ||
                    (_salesPurchBookDataMap.TableId == tablenum(SalesBookTrans_RU) &&
                        _salesPurchBookDataMap.TransType != SalesPurchBookTransType_RU::Facture ))
                {
                    separateDivisionId = SalesPurchBookDataMap_RU::getSeparateDivisionId(factureJour);

                    factureExternalId = separateDivisionId  ? strfmt("@GLS111217", _salesPurchBookDataMap.FactureExternalId, separateDivisionId)
                                                        : _salesPurchBookDataMap.FactureExternalId;

                    result = [factureExternalId, _salesPurchBookDataMap.FactureDate_External];
                }
                break;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFactureConCorrRevision</Name>
				<Source><![CDATA[
    protected container getFactureConCorrRevision(SalesPurchBookDataMap_RU _salesPurchBookDataMap)
    {
        container               result = [0, datenull()];
        RevisionNum_RU          revisionNum;
        FactureDate_External_RU revisionDate;
        FactureJour_RU          origFactureLastRevision;
        FactureJour_RU          annulmentSourceFacture;
        FactureJour_RU          factureJour;
        FactureJour_RU          factureJourOrig;
        container               origFactureCon;

        if (_salesPurchBookDataMap.FactureJour_RU)
        {
            factureJour = FactureJour_RU::findRecId(_salesPurchBookDataMap.FactureJour_RU);
        }
        else
        {
            factureJour = FactureJour_RU::find(_salesPurchBookDataMap.FactureId, _salesPurchBookDataMap.factureModule());
        }

        origFactureCon = _salesPurchBookDataMap.SalesPurchBookDataMap_RU::getFactureCon(factureJour);

        if (conLen(origFactureCon))
        {
            factureJourOrig = conPeek(origFactureCon, 1);

            if (_salesPurchBookDataMap.Annulment == NoYes::Yes)
            {
                annulmentSourceFacture = SalesPurchBookDataMap_RU::getAnnulmentSourceFacture(
                    factureJour,
                    FactureJour_RU::findRecId(_salesPurchBookDataMap.RefRevisedFacture));

                if (annulmentSourceFacture)
                {
                    origFactureLastRevision = SalesPurchBookDataMap_RU::getAnnulmentSourceFacture(
                        annulmentSourceFacture,
                        factureJourOrig);
                }
            }
            else
            {
                origFactureLastRevision = SalesPurchBookDataMap_RU::getAnnulmentSourceFacture(
                    factureJour,
                    factureJourOrig);
            }

            revisionNum     = origFactureLastRevision.RevisionNum;
            revisionDate    = origFactureLastRevision.FactureDate_External;

            if (revisionNum)
            {
                result = [revisionNum, revisionDate];
            }
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFactureConRevisionCorr</Name>
				<Source><![CDATA[
    protected container getFactureConRevisionCorr(SalesPurchBookDataMap_RU _salesPurchBookDataMap)
    {
        container               result = [0, datenull()];
        FactureJour_RU          factureJour;
        FactureJour_RU          factureJourOrig,
                            factureJourRevOrig;
        container               origFactureCon;

        if (_salesPurchBookDataMap.FactureJour_RU)
        {
            factureJour = FactureJour_RU::findRecId(_salesPurchBookDataMap.FactureJour_RU);

            if (factureJour)
            {
                origFactureCon = _salesPurchBookDataMap.SalesPurchBookDataMap_RU::getFactureCon(factureJour);

                if (conLen(origFactureCon))
                {
                    factureJourOrig = conPeek(origFactureCon, 1);

                    select firstonly RevisionNum, FactureDate_External from factureJourRevOrig
                    index hint RefRevisedFactureIdx
                    order by CreatedDateTime desc, SeqNumber desc
                    where factureJourRevOrig.RefRevisedFacture == factureJourOrig.RecId         &&
                         (factureJourRevOrig.CreatedDateTime   <  factureJour.CreatedDateTime   ||
                         (factureJourRevOrig.CreatedDateTime   == factureJour.CreatedDateTime   &&
                          factureJourRevOrig.SeqNumber         <  factureJour.SeqNumber));

                    if (factureJourRevOrig.RevisionNum)
                    {
                        result = [factureJourRevOrig.RevisionNum, factureJourRevOrig.FactureDate_External];
                    }
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setContract</Name>
				<Source><![CDATA[
    public void setContract(container _contractPack)
    {
        LedgerVATDeclarationContract_RU contract = LedgerVATDeclarationContract_RU::construct();

        super(_contractPack);
        contract.unpack(_contractPack);
        groupByFactures = contract.parmGroupByFactures();
        groupCorrect = contract.parmGroupCorrect();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>