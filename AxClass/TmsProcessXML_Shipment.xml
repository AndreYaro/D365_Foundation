<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSProcessXML_Shipment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Serializes the transportation management information related to the shipment to XML file.
/// </summary>
public class TmsProcessXML_Shipment extends TMSProcessXML_Base
{
    TMSRouteCode    conRouteId;
    WHSShipmentId   shipmentId;
    WHSContainerId  conId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteSegmentContainer</Name>
				<Source><![CDATA[
	/// <summary>
	/// Deletes previously created rate related records for the shipment.
	/// </summary>
    void deleteSegmentContainer()
    {
        TMSRouteSegmentContainer    segmentContainer;
        TMSRouteRateDetail          routeRateDetail;
        WHSContainerTable           containerTable;

        ttsbegin;

        delete_from routeRateDetail where routeRateDetail.Id == id;

        while select ContainerId from containerTable
            where containerTable.ShipmentId == id
        {
            delete_from routeRateDetail where routeRateDetail.Id == containerTable.ContainerId;
            delete_from segmentContainer where segmentContainer.Id == containerTable.ContainerId;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSegmentTable</Name>
				<Source><![CDATA[
    private TMSRouteSegmentTable insertSegmentTable(XmlNode _xmlNode)
    {
        TMSCarrierCode              shipmentCarrier;
        TMSCarrierServiceCode       shipmentService;
        TMSCarrierGroupCode         shipmentGroup;
        TMSModeCode                 shipmentMode;
        TMSFreightTermCode          shipmentFreight;
        TMSResponsibleForPayment    shipmentResponsible;
        TMSVendorCode               shipmentVendorCode;
        TMSVendorInvoiceCode        shipmentVendorInvoiceCode;
        TMSRouteSegmentTable        segmentTable;

        shipmentCarrier = this.returnNamedNode(_xmlNode, #carrier);
        shipmentService = this.returnNamedNode(_xmlNode, #carrierService);
        shipmentGroup   = this.returnNamedNode(_xmlNode, #carrierGroup);
        shipmentMode    = this.returnNamedNode(_xmlNode, #modeCode);
        shipmentFreight = this.returnNamedNode(_xmlNode, #freightTerm);

        segmentTable.RefTableId             = commonRec.TableId;
        segmentTable.RefRecId               = commonRec.RecId;
        segmentTable.CarrierCode         = shipmentCarrier   ? shipmentCarrier   : segmentCarrier;
        segmentTable.CarrierServiceCode  = shipmentService   ? shipmentService   : segmentService;
        segmentTable.CarrierGroupCode    = shipmentGroup     ? shipmentGroup     : segmentGroup;
        segmentTable.ModeCode            = shipmentMode      ? shipmentMode      : segmentMode;
        segmentTable.FreightTermCode     = shipmentFreight   ? shipmentFreight   : segmentFreight;

        if (communicationType == TMSCommunicationType::Rate)
        {
            this.readRateRoute(segmentTable.CarrierCode, segmentTable.CarrierServiceCode, segmentTable.ModeCode);
        }

        segmentTable.RouteId             = routeId;

        [shipmentResponsible,
        shipmentVendorCode,
        shipmentVendorInvoiceCode]          = this.readShipPayment(_xmlNode);

        segmentTable.ResponsibleForPayment   = shipmentResponsible       ? shipmentResponsible       : segmentResponsible;
        segmentTable.VendorCode              = shipmentVendorCode        ? shipmentVendorCode        : segmentVendorCode;
        segmentTable.VendorInvoiceCode       = shipmentVendorInvoiceCode ? shipmentVendorInvoiceCode : segmentVendorInvoiceCode;

        segmentTable.insert();

        return segmentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readRateContainer</Name>
				<Source><![CDATA[
    /// <summary>
	/// Processes rate of containers from response xml.
	/// </summary>
	/// <param name="_xmlNode">
	/// XML node to be processed.
	/// </param>
    void readRateContainer(XmlNode _xmlNode)
    {
        TMSRouteSegmentContainer        segmentContainer;
        XmlNodeList                     rateEntList;
        XmlNode                         rateEntNode;
        XmlNodeList                     rateList;
        XmlNode                         rateNode;
        XmlNodeList                     ratesList;
        XmlNode                         ratesNode;
        TMSRouteRateDetail              detail;
        TMSShipperRate                  shipperRate;
        TMSCustomerRate                 customerRate;

        rateEntList     = _xmlNode.selectNodes(#ratings);
        rateEntNode     = rateEntList.nextNode();

        while (rateEntNode)
        {
            rateList     = rateEntNode.selectNodes(#rating);
            rateNode     = rateList.nextNode();

            ttsbegin;

            segmentContainer = TMSRouteSegmentContainer::find(conRouteId, 1, conId, true);
            ShipCarrierTrackingNum localTrackingNum = this.returnNamedNode(rateNode, #trackingNumber);

            if (localTrackingNum)
            {
                segmentContainer.ShipCarrierTrackingNum = localTrackingNum;
            }

            TMSReturnShipCarrierTrackingNum localReturnTrackingNum;

            if (isShippingLabelRequestTypeEnabled)
            {
                localReturnTrackingNum = this.returnNamedNode(rateNode, #returnTrackingNumber);

                if (localReturnTrackingNum)
                {
                    segmentContainer.ReturnShipCarrierTrackingNum = localReturnTrackingNum;
                }
            }

            if (localTrackingNum
                || localReturnTrackingNum)
            {
                segmentContainer.update();
            }

            while (rateNode)
            {
                ratesList     = rateNode.selectNodes(#rate);
                ratesNode     = ratesList.nextNode();

                while (ratesNode)
                {
                    shipperRate                             = any2real(this.returnNamedNode(ratesNode, #shipperRate));
                    customerRate                            = any2real(this.returnNamedNode(ratesNode, #customerRate));

                    detail.RouteAccessorialLevel         = TMSRouteAccessorialLevel::Shipment;
                    detail.AccessorialAssignmentLevel    = TMSAccessorialAssignmentLevel::Shipment;
                    detail.CarrierCode                   = carrierCode;
                    detail.CarrierServiceCode            = carrierServiceCode;
                    detail.Generated                     = NoYes::Yes;
                    detail.Id                            = shipmentId;
                    detail.RateCur                       = any2real(this.returnNamedNode(ratesNode, #totalRate));
                    detail.ShipperRate                   = this.returnNamedNode(ratesNode, #shipperRate) != '' ? shipperRate : detail.RateCur;
                    detail.CustomerRate                  = this.returnNamedNode(ratesNode, #customerRate) != '' ? customerRate : detail.RateCur;
                    detail.CurrencyCode                  = this.returnNamedNode(ratesNode, #currencyCode);
                    detail.RateId                        = this.returnNamedNode(ratesNode, #code);
                    detail.RateType                      = str2int(this.returnNamedNode(ratesNode, #rateType));
                    detail.RateUnit                      = any2int(this.returnNamedNode(ratesNode, #units));
                    detail.RateUnitRate                  = any2real(this.returnNamedNode(ratesNode, #unitRate));
                    detail.RouteCode                     = conRouteId;
                    detail.Sequence                      = 1;
                    detail.MarkupCode                    = this.returnNamedNode(ratesNode, #chargeCode);

                    [detail.ResponsibleForPayment,
                     detail.VendorCode,
                     detail.VendorInvoiceCode]           = this.returnResponsibleAndVendorCode(detail.RateType, detail.RateId);

                    detail.insert();

                    ratesNode     = ratesList.nextNode();
                }

                this.readRatingErrors(rateNode, segmentContainer.tmsRouteSegment().TableId, segmentContainer.tmsRouteSegment().RecId);

                rateNode     = rateList.nextNode();
            }

            this.readRatingErrors(rateEntNode, segmentContainer.tmsRouteSegment().TableId, segmentContainer.tmsRouteSegment().RecId);

            ttscommit;

            rateEntNode     = rateEntList.nextNode();
        }

        if (segmentContainer.ShipCarrierTrackingNum != '')
        {
            this.setContainerTrackingNumber(segmentContainer.Id, segmentContainer.ShipCarrierTrackingNum, segmentContainer.MasterTrackingNum);
        }

        if (segmentContainer.ReturnShipCarrierTrackingNum != ''
            && isReturnLabelSPSPrintingFlightEnabled)
        {
            this.setReturnDetailReturnTrackingNumber(segmentContainer.Id, segmentContainer.ReturnShipCarrierTrackingNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readRatingConstraint</Name>
				<Source><![CDATA[
    void readRatingConstraint(XmlNode _xmlNode, TableId _tableId, RefRecId _recId)
    {
        TMSRateDetails          rateDetails;
        TMSAction               action;
        TMSId                   constraintCode;
        TMSName                 name;
        str                     constraintType;
        TMSRouteSegmentTable    segmentTable;
        TMSRouteTable           routeTable;

        constraintType  = this.returnNamedNode(_xmlNode, #constraintType);
        constraintCode  = this.returnNamedNode(_xmlNode, #code);
        name            = this.returnNamedNode(_xmlNode, #name );
        action          = any2int(this.returnNamedNode(_xmlNode, #action));

        rateDetails.RefTableId   = _tableId;
        rateDetails.RefRecId     = _recId;
        rateDetails.Id           = constraintCode;
        rateDetails.RateType     = TMSRateType::Constraint;
        rateDetails.RateNote     = strFmt('%1 (%2) - %3', action, constraintType, constraintCode);
        rateDetails.insert();

        errors += rateDetails.RateNote;

        this.addConstraintToRate(_tableId, _recId, action);

        if (_tableId == tableNum(TMSRouteSegmentTable))
        {
            segmentTable = TMSRouteSegmentTable::find(_recId, true);
            segmentTable.HasErrors = true;
            segmentTable.update();

            routeTable = TMSRouteTable::findByRouteIdRefRecord(segmentTable.RouteId, commonRec.TableId, commonRec.RecId, true);
            routeTable.HasErrors = true;
            routeTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readRouteRateDetailFromXml</Name>
				<Source><![CDATA[
    [Hookable]
    protected TMSRouteRateDetail readRouteRateDetailFromXml(XmlNode _ratesNode)
    {
        TMSRouteRateDetail detail;

        TMSShipperRate  shipperRate          = any2real(this.returnNamedNode(_ratesNode, #shipperRate));
        TMSCustomerRate customerRate         = any2real(this.returnNamedNode(_ratesNode, #customerRate));

        detail.RouteAccessorialLevel         = TMSRouteAccessorialLevel::Container;
        detail.AccessorialAssignmentLevel    = TMSAccessorialAssignmentLevel::Shipment;
        detail.CarrierCode                   = carrierCode;
        detail.CarrierServiceCode            = carrierServiceCode;
        detail.Generated                     = NoYes::Yes;
        detail.Id                            = conId;
        detail.RateCur                       = any2real(this.returnNamedNode(_ratesNode, #totalRate));
        detail.ShipperRate                   = this.returnNamedNode(_ratesNode, #shipperRate) != '' ? shipperRate : detail.RateCur;
        detail.CustomerRate                  = this.returnNamedNode(_ratesNode, #customerRate) != '' ? customerRate : detail.RateCur;
        detail.CurrencyCode                  = this.returnNamedNode(_ratesNode, #currencyCode);
        detail.RateId                        = this.returnNamedNode(_ratesNode, #code);
        detail.RateType                      = str2int(this.returnNamedNode(_ratesNode, #rateType));
        detail.RateUnit                      = any2int(this.returnNamedNode(_ratesNode, #units));
        detail.RateUnitRate                  = any2real(this.returnNamedNode(_ratesNode, #unitRate));
        detail.RouteCode                     = conRouteId;
        detail.Sequence                      = 1;
        detail.MarkupCode                    = this.returnNamedNode(_ratesNode, #chargeCode);

        [detail.ResponsibleForPayment,
         detail.VendorCode,
         detail.VendorInvoiceCode]           = this.returnResponsibleAndVendorCode(detail.RateType, detail.RateId);

        return detail;    
    }

]]></Source>
			</Method>
			<Method>
				<Name>readSegmentContainerFromXml</Name>
				<Source><![CDATA[
    protected void readSegmentContainerFromXml(TMSRouteSegmentContainer _segmentContainer, XmlNode _rateNode)
    {
        _segmentContainer.ShipCarrierTrackingNum        = this.returnNamedNode(_rateNode, #trackingNumber);
        if (isShippingLabelRequestTypeEnabled)
        {
            _segmentContainer.ReturnShipCarrierTrackingNum  = this.returnNamedNode(_rateNode, #returnTrackingNumber);
        }
        _segmentContainer.MasterTrackingNum             = this.returnNamedNode(_rateNode, #masterTracking);

        this.readSegmentContainerLabelFromXml(_segmentContainer, _rateNode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>readShipContainer</Name>
				<Source><![CDATA[
    void readShipContainer(XmlNode _xmlNode, TMSRouteSegmentShipment _shipment = null)
    {
        TMSRouteSegmentContainer        segmentContainer;
        WHSContainerTable               containerTable;
        Weight                          conWeight;
        WHSWeightUOM                    weightUM;
        XmlNodeList                     rateEntList;
        XmlNode                         rateEntNode;
        XmlNodeList                     rateList;
        XmlNode                         rateNode;
        XmlNodeList                     ratesList;
        XmlNode                         ratesNode;
        WHSContainerType                containerType;

        conId           = this.returnNamedNode(_xmlNode, #containerId);

        containerTable  = WHSContainerTable::findByContainerId(conId);
        containerType   = WHSContainerType::find(containerTable.ContainerTypeCode);

        conWeight       = str2num(this.returnNamedNode(_xmlNode, #weight));
        weightUM        = this.returnNamedNode(_xmlNode, #weightUM);

        ttsbegin;

        segmentContainer = TMSRouteSegmentContainer::find(_shipment.RouteCode, _shipment.Sequence, conId, true);

        segmentContainer.Weight              = conWeight;
        segmentContainer.ContainerTypeCode   = containerTable.ContainerTypeCode;
        segmentContainer.Height              = containerType.Height;
        segmentContainer.Length              = containerType.Length;
        segmentContainer.Width               = containerType.Width;

        if (segmentContainer.RecId == 0)
        {
            segmentContainer.RouteCode           = _shipment.RouteCode;
            segmentContainer.Sequence            = _shipment.Sequence;
            segmentContainer.Id                  = conId;
            segmentContainer.ShipmentId          = _shipment.Id;
            segmentContainer.insert();
        }
        else
        {
            segmentContainer.update();
        }

        ttscommit;

        rateEntList     = _xmlNode.selectNodes(#ratings);
        rateEntNode     = rateEntList.nextNode();

        while (rateEntNode)
        {
            rateList     = rateEntNode.selectNodes(#rating);
            rateNode     = rateList.nextNode();

            while (rateNode)
            {
                ttsbegin;
                segmentContainer.selectForUpdate(true);
                this.readSegmentContainerFromXml(segmentContainer, rateNode);
                masterTrackingNum = segmentContainer.MasterTrackingNum;
                segmentContainer.update();
                ttscommit;

                ratesList     = rateNode.selectNodes(#rate);
                ratesNode     = ratesList.nextNode();

                while (ratesNode)
                {
                    TMSRouteRateDetail detail = this.readRouteRateDetailFromXml(ratesNode);
                    detail.insert();

                    ratesNode = ratesList.nextNode();
                }

                this.readRatingErrors(rateNode, segmentContainer.tmsRouteSegment().TableId, segmentContainer.tmsRouteSegment().RecId);

                rateNode     = rateList.nextNode();
            }

            rateEntNode     = rateEntList.nextNode();
        }

        if (segmentContainer.ShipCarrierTrackingNum != '')
        {
            this.setContainerTrackingNumber(segmentContainer.Id, segmentContainer.ShipCarrierTrackingNum, segmentContainer.MasterTrackingNum);
        }

        if (segmentContainer.ReturnShipCarrierTrackingNum != ''
            && isReturnLabelSPSPrintingFlightEnabled)
        {
            this.setReturnDetailReturnTrackingNumber(segmentContainer.Id, segmentContainer.ReturnShipCarrierTrackingNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readShipRoute</Name>
				<Source><![CDATA[
    void readShipRoute(XmlNode _xmlNode)
    {
        TMSName                         routeGuide;
        TMSName                         routePlan;
        TMSRoute                        route;
        TMSRouteSegment                 routeSegment;
        TMSRouteSegmentLoad             segmentLoad;
        TMSRouteSegmentShipment         segmentShipment;
        XmlNodeList                     shipEntList;
        XmlNode                         shipNode;
        XmlNodeList                     conList;
        XmlNode                         conNode;
        WHSShipmentTable                shipmentTable;

        shipEntList = _xmlNode.selectNodes(#shipping);
        shipNode    = shipEntList.nextNode();

        routeId                 = this.returnNamedNode(_xmlNode, #routeGuideRecId);
        routeConfigCode         = this.returnNamedNode(_xmlNode, #routeConfigCode);
        routePlan               = this.returnNamedNode(_xmlNode, #routePlanName);
        routeGuide              = this.returnNamedNode(_xmlNode, #routeGuideName);

        shipmentId = this.returnNamedNode(shipNode, #shipmentId);
        shipmentTable = WHSShipmentTable::find(id);

        select segmentShipment where segmentShipment.Id ==  id;

        if (segmentShipment.RecId != 0)
        {
            conRouteId = segmentShipment.RouteCode;
        }
        else
        {
            route.setRouteCode();

            route.InventSiteId = shipmentTable.InventSiteId;
            route.InventLocationId = shipmentTable.InventLocationId;

            route.insert();
            conRouteId = route.RouteCode;
            routeSegment = this.writeRouteSegment(route);

            segmentShipment.RouteCode    = route.RouteCode;
            segmentShipment.Sequence     = routeSegment.Sequence;
            segmentShipment.Id           = shipmentTable.ShipmentId;
            segmentShipment.insert();

            segmentLoad.RouteCode        = route.RouteCode;
            segmentLoad.Sequence         = routeSegment.Sequence;
            segmentLoad.Id               = shipmentTable.LoadId;
            segmentLoad.insert();
        }

        conList     = shipNode.selectNodes(#shipping);
        conNode    = conList.nextNode();

        while (conNode)
        {
            switch (this.returnNamedNode(conNode, #shippingEntityType))
            {
                case #typeLine:
                    this.readShipLine(conNode, commonRec.TableId, commonRec.RecId);
                    break;

                case #typeContainer:
                    this.readShipContainer(conNode, segmentShipment);
                    break;
            }

            conNode    = conList.nextNode();
        }

        this.readRateContainer(shipNode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>readShipShipment</Name>
				<Source><![CDATA[
    void readShipShipment(XmlNode _xmlNode, XmlNode _segmentNode = null)
    {
        TMSRouteSegmentTable        segmentTable;
        XmlNodeList                 addressList;
        XmlNode                     addressNode;
        TMSAddressPhone             pickupAdd;
        TMSAddressPhone             dropOffAdd;
        TMSResponsibleForPayment    shipOriginResponsible;
        TMSVendorCode               shipOriginVendorCode;
        TMSVendorInvoiceCode        shipOriginVendorInvoiceCode;
        TMSResponsibleForPayment    shipDestResponsible;
        TMSVendorCode               shipDestVendorCode;
        TMSVendorInvoiceCode        shipDestVendorInvoiceCode;
        TMSSequence                 sequence;
        TMSRouteAccessorialLevel    level = TMSRouteAccessorialLevel::Segment;

        recordType      = any2enum(symbol2Enum(enumNum(TMSRecordType), this.returnNamedNode(_xmlNode, #recordType)));
        loadDirection   = symbol2Enum(enumNum(TMSDirection), this.returnNamedNode(_xmlNode, #direction));

        if (communicationType == TMSCommunicationType::Confirmation && !segmentLoadLine.Sequence)
        {
            sequence                                 = str2int(this.returnNamedNode(_xmlNode, #sequence));
            segmentLoadLine.Sequence                 = sequence;
            segmentLoadLine.DestinationPostalCode    = segmentFromAddress.parmPostalCode();
            segmentLoadLine.OriginPostalCode         = segmentToAddress.parmPostalCode();
            this.deleteSegmentLoadLines(segmentLoadLine.RouteCode, sequence);
        }
        else
        {
            segmentTable = this.insertSegmentTable(_xmlNode);

            addressList         = _xmlNode.selectNodes(#pickUp);
            addressNode         = addressList.nextNode();
            pickupAdd           = this.readAddress(addressNode, level, segmentTable.TableId, segmentTable.RecId);
            pickupAdd           = segmentFromAddress;

            [shipOriginResponsible,
            shipOriginVendorCode,
            shipOriginVendorInvoiceCode] = this.readShipPayment(addressNode);

            addressList         = _xmlNode.selectNodes(#dropOff);
            addressNode         = addressList.nextNode();
            dropOffAdd          = this.readAddress(addressNode, level, segmentTable.TableId, segmentTable.RecId);
            dropOffAdd          = segmentToAddress;

            [shipDestResponsible,
            shipDestVendorCode,
            shipDestVendorInvoiceCode] = this.readShipPayment(addressNode);

            segmentTable = this.writeSegmentTable(pickupAdd, dropOffAdd, shipOriginResponsible, shipOriginVendorCode, shipOriginVendorInvoiceCode,
                                   shipDestResponsible, shipDestVendorCode, shipDestVendorInvoiceCode, segmentTable);

            if (communicationType != TMSCommunicationType::Route)
            {
                this.readOverrideEntities(_xmlNode, TMSRateType::Rate, segmentTable.RefTableId, segmentTable.RefRecId);
                this.readRatingEntities(_xmlNode, TMSRateType::Rate, segmentTable.TableId, segmentTable.RecId);
            }
        }

        if (communicationType == TMSCommunicationType::RateRoute || communicationType == TMSCommunicationType::Route)
        {
            this.readShippingEntity(_xmlNode, segmentTable.TableId, segmentTable.RecId);
        }
        if (communicationType == TMSCommunicationType::Rate)
        {
            this.readShippingEntity(_xmlNode, rateTableId, rateRecId);
        }
        if (_segmentNode && communicationType != TMSCommunicationType::Route)
        {
            this.readRatingEntities(_segmentNode, TMSRateType::Rate, segmentTable.TableId, segmentTable.RecId);
            addressList = _segmentNode.selectNodes(#pickUp);
            addressNode = addressList.nextNode();
            this.readAddress(addressNode, TMSRouteAccessorialLevel::Shipment, segmentTable.TableId, segmentTable.RecId);

            addressList = _segmentNode.selectNodes(#dropOff);
            addressNode = addressList.nextNode();
            this.readAddress(addressNode, TMSRouteAccessorialLevel::Shipment, segmentTable.TableId, segmentTable.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readXML</Name>
				<Source><![CDATA[
    void readXML(XML _xml)
    {
        XmlParseError       xmlError;
        XmlNode             transactionNode;
        XmlNodeList         rateList;
        XmlNode             requestNode;

        responseDoc = XmlDocument::newXml(_xml);
        xmlError = responseDoc.parseError();

        try
        {
            ttsbegin;

            if (xmlError && xmlError.errorCode() != 0)
            {
                xmlError.reason();
            }

            transactionNode     = responseDoc.documentElement();
            communicationType   = symbol2Enum(enumNum(TMSCommunicationType), this.returnNamedNode(transactionNode, #communicationType));

            carrierCode         = this.returnNamedNode(transactionNode, #carrier);
            carrierServiceCode  = this.returnNamedNode(transactionNode, #carrierService);
            carrierGroupCode    = this.returnNamedNode(transactionNode, #carrierGroup);

            rateList    = transactionNode.selectNodes(#request);
            requestNode = rateList.nextNode();

            if (communicationType != TMSCommunicationType::Void)
            {
                while (requestNode)
                {
                    if (communicationType != TMSCommunicationType::Apportionment)
                    {
                        this.readShippingEntity(requestNode);
                    }
                    else
                    {
                        this.readAppShippingEntity(requestNode);
                    }

                    requestNode = rateList.nextNode();
                }

                this.readRatingEntities(transactionNode);
            }
            else
            {
                this.readAllDocumentErrors(responseDoc);
                this.deleteSegmentContainer();
            }

            ttscommit;

            if (communicationType == TMSCommunicationType::Confirmation)
            {
                this.runApportionment(_xml);
            }
        }
        catch
        {
            throw error ("@SYS99824");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setContainerTrackingNumber</Name>
				<Source><![CDATA[
    /// <summary>
	/// Sets carrier tracking number of a <c>WHSContainerTable</c> record.
	/// </summary>
	/// <param name="_containerId">
	/// Container id of the record.
	/// </param>
	/// <param name="_trackingNumber">
	/// Carrier tracking number to be set.
	/// </param>
	/// <param name="_master">
	/// Master tracking number to be set.
	/// </param>
    void setContainerTrackingNumber(WHSContainerId _containerId, ShipCarrierTrackingNum _trackingNumber, WHSMasterTrackingNum _master)
    {
        WHSContainerTable       containerTable = WHSContainerTable::findByContainerId(_containerId, true);

        ttsbegin;

        containerTable.ShipCarrierTrackingNum   = _trackingNumber;
        containerTable.MasterTrackingNum     = _master;
        containerTable.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReturnDetailReturnTrackingNumber</Name>
				<Source><![CDATA[
    private void setReturnDetailReturnTrackingNumber(WHSContainerId _containerId, TMSReturnShipCarrierTrackingNum _returnTrackingNumber)
    {
        ttsbegin;

        WHSReturnDetail returnDetail = WHSReturnDetail::findForContainerId(_containerId, true);
        if (returnDetail)
        {
            returnDetail.ReturnShipCarrierTrackingNum = _returnTrackingNumber;
            returnDetail.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeSegmentTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes record to the segment table
    /// </summary>
    /// <param name="_pickupAdd">
    /// Pickup address information
    /// </param>
    /// <param name="_dropOffAdd">
    /// Drop-off address information
    /// </param>
    /// <param name="_shipOriginResponsible">
    /// Ship origin person responsible
    /// </param>
    /// <param name="_shipOriginVendorCode">
    /// Ship origin vendor code
    /// </param>
    /// <param name="_shipOriginVendorInvoiceCode">
    /// Ship origin vendor invoice number
    /// </param>
    /// <param name="_shipDestResponsible">
    /// Ship destination responsible
    /// </param>
    /// <param name="_shipDestVendorCode">
    /// Ship destination vendor code
    /// </param>
    /// <param name="_shipDestVendorInvoiceCode">
    /// Ship destination vendor invoice number
    /// </param>
    /// <param name="_segmentTable">
    /// Segment table record
    /// </param>
    /// <returns>
    /// <c>TMSRouteSegmentTable</c> record
    /// </returns>
    private TMSRouteSegmentTable writeSegmentTable(
        TMSAddressPhone             _pickupAdd,
        TMSAddressPhone             _dropOffAdd,
        TMSResponsibleForPayment    _shipOriginResponsible,
        TMSVendorCode               _shipOriginVendorCode,
        TMSVendorInvoiceCode        _shipOriginVendorInvoiceCode,
        TMSResponsibleForPayment    _shipDestResponsible,
        TMSVendorCode               _shipDestVendorCode,
        TMSVendorInvoiceCode        _shipDestVendorInvoiceCode,
        TMSRouteSegmentTable        _segmentTable)
    {
        TMSAddressPhone             pickupAdd                   = _pickupAdd;
        TMSAddressPhone             dropOffAdd                  = _dropOffAdd;
        TMSResponsibleForPayment    shipOriginResponsible       = _shipOriginResponsible;
        TMSVendorCode               shipOriginVendorCode        = _shipOriginVendorCode;
        TMSVendorInvoiceCode        shipOriginVendorInvoiceCode = _shipOriginVendorInvoiceCode;
        TMSResponsibleForPayment    shipDestResponsible         = _shipDestResponsible;
        TMSVendorCode               shipDestVendorCode          = _shipDestVendorCode;
        TMSVendorInvoiceCode        shipDestVendorInvoiceCode   = _shipDestVendorInvoiceCode;
        TMSRouteSegmentTable        segmentTable                = _segmentTable;
        ttsbegin;

        segmentTable.OriginName                         = pickupAdd.parmName();
        segmentTable.OriginAddress                      = pickupAdd.parmStreet();
        segmentTable.OriginCity                         = pickupAdd.parmCity();
        segmentTable.OriginState                        = pickupAdd.parmState();
        segmentTable.OriginCountryRegion                = pickupAdd.parmCountryRegion();
        segmentTable.OriginCounty                       = pickupAdd.parmCounty();
        segmentTable.OriginCountryRegionISOCode         = LogisticsAddressCountryRegion::find(segmentTable.OriginCountryRegion).isOcode;
        segmentTable.OriginPostalCode                   = pickupAdd.parmPostalCode();
        segmentTable.OriginResidential                  = pickupAdd.parmResidential();
        segmentTable.OriginResponsibleForPayment        = shipOriginResponsible ? shipOriginResponsible : originResponsible;
        segmentTable.OriginVendorCode                   = shipOriginVendorCode ? shipOriginVendorCode : originVendorCode;
        segmentTable.OriginVendorInvoiceCode            = shipOriginVendorInvoiceCode ? shipOriginVendorInvoiceCode : originVendorInvoiceCode;
        segmentTable.DestinationName                    = dropOffAdd.parmName();
        segmentTable.DestinationAddress                 = dropOffAdd.parmStreet();
        segmentTable.DestinationCity                    = dropOffAdd.parmCity();
        segmentTable.DestinationCounty                  = dropOffAdd.parmCounty();
        segmentTable.DestinationState                   = dropOffAdd.parmState();
        segmentTable.DestinationCountryRegion           = dropOffAdd.parmCountryRegion();
        segmentTable.DestinationCountryRegionISOCode    = LogisticsAddressCountryRegion::find(segmentTable.DestinationCountryRegion).isOcode;
        segmentTable.DestinationPostalCode              = dropOffAdd.parmPostalCode();
        segmentTable.DestinationResidential             = dropOffAdd.parmResidential();
        segmentTable.DestinationResponsibleForPayment   = shipDestResponsible ? shipDestResponsible : destResponsible;
        segmentTable.DestinationVendorCode              = shipDestVendorCode ? shipDestVendorCode : destVendorCode;
        segmentTable.DestinationVendorInvoiceCode       = shipDestVendorInvoiceCode ? shipDestVendorInvoiceCode : destVendorInvoiceCode;
        segmentTable.DestinationHubCode                 = segmentDestHub;
        segmentTable.OriginHubCode                      = segmentOriginHub;
        segmentTable.Miles                              = miles;
        segmentTable.write();

        ttscommit;

        return segmentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeShipContainer</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Write the container information to the request.
    /// </summary>
    /// <param name="_xmlNode">
    ///     The associated xml node.
    /// </param>
    /// <param name="_weight">
    ///     The weight of the container.
    /// </param>
    /// <param name="_class">
    ///     The class of the container.
    /// </param>
    /// <param name="_volume">
    ///     The volume of the container.
    /// </param>
    void writeShipContainer(XmlNode _xmlNode, Weight _weight, WHSClass _class, Volume _volume)
    {
        WHSContainerTable           containerTable;
        WHSContainerLine            containerLine;
        Weight                      itemWeight;
        Volume                      itemVolume;
        AmountMST                   itemValue;
        WHSClass                    itemClass;

        this.writeXMLElement(_xmlNode, #shippingEntityType, #typeContainer);
        this.writeXMLElement(_xmlNode, #containerId, conId);

        containerTable = WHSContainerTable::findByContainerId(conId);

        this.writeXMLElement(_xmlNode, #weight, TMSProcessXML_Base::real2str(containerTable.Weight));
        this.writeXMLElement(_xmlNode, #weightUM, containerTable.WeightUOM);

        if (containerTable.ShipCarrierTrackingNum != '')
        {
            this.writeXMLElement(_xmlNode, #trackingNumber, containerTable.ShipCarrierTrackingNum);
        }

        if (isShippingLabelRequestTypeEnabled
            && isReturnLabelSPSPrintingFlightEnabled
            && this.parmShippingLabelRequestType() == TMSShippingLabelRequestType::ShippingAndReturnLabels)
        {
            WHSReturnDetail returnDetail = WHSReturnDetail::findForContainerId(containerTable.ContainerId);

            if (returnDetail.ReturnShipCarrierTrackingNum != '')
            {
                this.writeXMLElement(_xmlNode, #returnTrackingNumber, returnDetail.ReturnShipCarrierTrackingNum);
            }
            this.writeXMLElement(_xmlNode, #returnId, returnDetail.ReturnID);
            this.writeXMLElement(_xmlNode, #returnAccountNum, returnDetail.AccountNum);
            this.writeXMLElement(_xmlNode, #returnAddressName, returnDetail.ReturnAddressName);
            this.writeXMLElement(_xmlNode, #returnAddress, returnDetail.ReturnAddress);
        }

        this.writeXMLElement(_xmlNode, #masterTracking, masterTrackingNum);

        while select ItemId, Qty, RecId, InventDimId, UnitId from containerLine
            where containerLine.ContainerId == containerTable.ContainerId
        {
            [itemWeight,
            itemVolume,
            itemValue]      = TMSProcessXML_Base::calculateItemWeightVolumeValue(containerLine.ItemId,
                                                                                 containerLine.Qty, 
                                                                                 containerLine.UnitId,
                                                                                 containerLine.InventDimId);
            itemClass = TMSProcessXML_Base::getClassFromItem(containerLine.ItemId);
            this.writeShippingEntity(_xmlNode, #typeLine, containerLine.ItemId, itemWeight, itemClass, itemVolume, itemValue, containerLine.RecId, containerLine.Qty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeShipShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes shipment information to XML
    /// </summary>
    /// <param name="_xmlNode">
    /// Current XML node
    /// </param>
    /// <param name="_weight">
    /// Shipment / load weight
    /// </param>
    /// <param name="_class">
    /// Designation for the class
    /// </param>
    /// <param name="_volume">
    /// Volume for shipment
    /// </param>
    /// <param name="_parentNode">
    /// XML parent node
    /// </param>
    public void writeShipShipment(
        XmlNode _xmlNode,
        Weight _weight,
        WHSClass _class,
        Volume _volume,
        XmlNode _parentNode)
    {
        XmlNode                     fromNode;
        XmlNode                     toNode;
        WHSContainerTable           containerTable;
        WHSShipmentTable            shipmentTable;
        WHSLoadTable                loadTable;
        WHSLoadLine                 loadLine;
        WHSClass                    whsClass;

        this.writeXMLElement(_xmlNode, #shippingEntityType, #typeShipment);
        this.writeXMLElement(_xmlNode, #routeGuideName, routeGuideName);
        this.writeXMLElement(_xmlNode, #routePlanName, routePlanName);
        this.writeXMLElement(_xmlNode, #routeConfigCode, routeConfigCode);
        this.writeXMLElement(_xmlNode, #sequence, int2str(routeSequence));

        shipmentTable   = WHSShipmentTable::find(id);
        loadTable       = WHSLoadTable::find(shipmentTable.LoadId);
        this.writeXMLElement(_xmlNode, #recordType, Global::enum2Symbol(enumNum(TMSRecordType), enum2int(TMSRecordType::Container)));
        this.writeXMLElement(_xmlNode, #shipmentId, shipmentTable.ShipmentId);
        this.writeXMLElement(_xmlNode, #masterTracking, masterTrackingNum);
        this.writeXMLElement(_xmlNode, #orderNum, this.findShipmentOrderNum(shipmentTable.ShipmentId));
        this.writeXMLElement(_xmlNode, #direction, Global::enum2Symbol(enumNum(TMSDirection), TMSGlobal::loadDirection2TransportDirection(shipmentTable.LoadDirection)));
        this.writeXMLElement(_xmlNode, #freightTerm, freightTerm);

        this.writeShipCustomer(_xmlNode);
        this.writeXMLElement(_xmlNode, #responsible, enum2Symbol(enumNum(TMSResponsibleForPayment), enum2int(segmentResponsible)));
        this.writeXMLElement(_xmlNode, #vendorCode, segmentVendorCode);
        this.writeXMLElement(_xmlNode, #vendorInvoiceCode, segmentVendorInvoiceCode);

        fromNode = this.writeXMLNode(_xmlNode, #pickup);
        this.writeAddress(fromNode, this.getFromAddressNotNull());
        this.writeXMLElement(fromNode, #responsible, enum2Symbol(enumNum(TMSResponsibleForPayment), enum2int(originResponsible)));
        this.writeXMLElement(fromNode, #vendorCode, originVendorCode);
        this.writeXMLElement(fromNode, #vendorInvoiceCode, originVendorInvoiceCode);

        toNode = this.writeXMLNode(_xmlNode, #dropoff);
        this.writeAddress(toNode, this.getToAddressNotNull());
        this.writeXMLElement(toNode, #responsible, enum2Symbol(enumNum(TMSResponsibleForPayment), enum2int(destResponsible)));
        this.writeXMLElement(toNode, #vendorCode, destVendorCode);
        this.writeXMLElement(toNode, #vendorInvoiceCode, destVendorInvoiceCode);

        this.writeXMLElement(_xmlNode, #weight, TMSProcessXML_Base::real2str(_weight));
        this.writeXMLElement(_xmlNode, #volume, TMSProcessXML_Base::real2str(_volume));
        this.writeXMLElement(_xmlNode, #class, TMSProcessXML_Base::real2str(_class));
        this.writeXMLElement(_xmlNode, #stcc, strFmt('%1', stcc));
        this.writeXMLElement(_xmlNode, #dlvDate, this.convertUTCDateTime2Str(dlvDateTime));
        this.writeXMLElement(_xmlNode, #shipDate, this.convertUTCDateTime2Str(shipDateTime));
        this.writeXMLElement(_xmlNode, #freightTerm, strFmt('%1', freightTerm));
        this.writeXMLElement(_xmlNode, #equipment, strFmt('%1', equipment));
        this.writeXMLElement(_xmlNode, #value, TMSProcessXML_Base::real2str(value));

        if (communicationType != TMSCommunicationType::Void)
        {
            while select ContainerId from containerTable
                where containerTable.ShipmentId          == id &&
                      containerTable.ContainerStatus     == WHSContainerStatus::Closed &&
                      containerTable.ShipCarrierTrackingNum == ''
            {
                conId = containerTable.ContainerId;
                this.writeShippingEntity(_xmlNode, #typeContainer);
            }
        }
        else
        {
            while select ContainerId from containerTable
                where containerTable.ShipmentId          == id &&
                      containerTable.MasterTrackingNum   == masterTrackingNum
            {
                conId = containerTable.ContainerId;
                this.writeShippingEntity(_xmlNode, #typeContainer);
            }
        }

        this.writeShipManualAccessorials(_xmlNode);

        while select loadLine
            where loadLine.ShipmentId == id
        {
            whsClass = WHSLTLClass::find(WHSNMFC::find(WHSEcoResProductTransportationCodes::findByItemId(loadLine.ItemId).nmfcCode).ltlClassCode).Class;
            this.writeShippingEntity(_xmlNode, #typeLine, loadLine.ItemId, loadLine.loadLineWeight(), whsClass, loadLine.loadLineVolume(), loadLine.displayTotalValue(), loadLine.RecId, loadLine.Qty);
        }

        this.writeShipDeliveryAccessorials(_xmlNode, id);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
	/// Constructs the class instance.
	/// </summary>
	/// <returns>
	/// The class instance.
	/// </returns>
    static TMSProcessXML_Shipment construct()
    {
        TMSProcessXML_Shipment  processXML;

        processXML = new TMSProcessXML_Shipment();

        return processXML;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>