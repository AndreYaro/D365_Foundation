<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsWorkCreateMovement</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsWorkCreateMovement</c> class creates warehouse work for movement.
/// </summary>
class WhsWorkCreateMovement extends WHSWorkCreate
{
    WHSTmpMovementWork  tmpMovementWork;
    WHSWorkCreateId     workCreateId;
    WMSLocationId       endLocationId;
    private boolean     isReverseWorkMovementToLocation;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeTmpWorkLineForMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the tmp work line record for movement.
    /// </summary>
    /// <param name = "_movementWorkInventDim">The movement work inventory dimension record.</param>
    protected void initializeTmpWorkLineForMovement(InventDim _movementWorkInventDim)
    {
        tmpWorkLine.WorkType            = WHSWorkType::Put;
        tmpWorkLine.OriginType          = WHSOriginType::Movement;
        tmpWorkLine.WorkCreateId        = workCreateId;
        tmpWorkLine.WorkTransType       = WHSWorkTransType::Invent;
        tmpWorkLine.InventDimId         = tmpMovementWork.InventDimId;
        tmpWorkLine.InventBatchId       = _movementWorkInventDim.InventBatchId;
        tmpWorkLine.StartLocationId     = startLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTempTable</Name>
				<Source><![CDATA[
    public void createTempTable()
    {
        ttsbegin;
        
        InventDim movementWorkInventDim = InventDim::find(tmpMovementWork.InventDimId);

        this.initializeTmpWorkLineForMovement(movementWorkInventDim);

        this.setGlobals();
        
        if (tmpMovementWork.ItemId)
        {
            tmpWorkLine.ItemId = tmpMovementWork.ItemId;

            movementWorkInventDim.clearLocationAndBelowDim(tmpWorkLine.ItemId);
            tmpWorkLine.InventDimId = InventDim::findOrCreate(movementWorkInventDim).inventDimId;

            this.createTempLine(tmpWorkLine,
                                WHSCatchWeightHelper::convertInventQuantity(tmpMovementWork.ItemId,
                                                                            tmpMovementWork.UnitID,
                                                                            tmpMovementWork.Qty,
                                                                            tmpMovementWork.InventDimId));
        }
        else if (movementWorkInventDim.LicensePlateId)
        {
            InventDim                       inventDim;
            InventSumUnionDeltaPhysicalQty  inventSum;
            InventDimParm                   inventDimParmAboveLocation;
            ItemId                          lastItemId = '';

            while select ItemId, PhysicalInvent, PdsCWPhysicalInvent from inventSum
                where inventSum.PhysicalInvent   > 0
                join inventDim
                    where inventDim.InventDimId         == inventSum.InventDimId
                    &&    inventDim.InventSiteId        == movementWorkInventDim.InventSiteId
                    &&    inventDim.InventLocationId    == movementWorkInventDim.InventLocationId
                    &&    inventDim.wmsLocationId       == movementWorkInventDim.wmsLocationId
                    &&    inventDim.LicensePlateId      == movementWorkInventDim.LicensePlateId
            {
                if (lastItemId != inventSum.ItemId)
                {
                    lastItemId = inventSum.ItemId;
                    inventDimParmAboveLocation = WHSReservationHierarchyInventDimUtil::initInventDimParmAboveLocation(InventTable::find(inventSum.ItemId));
                }

                InventDim inventDimForLPWork;
                inventDimForLPWork.data(inventDim);
                inventDimForLPWork.clearNotSelectedDim(inventDimParmAboveLocation);

                if (startLocationId 
                    && isReverseWorkMovementToLocation)
                {
                    // In whstmpworklinecreator location directives will not be used if inventdim.wmslocationid != null.
                    // This inventDim is used for the pick line: to keep consistency within the pick line 
                    // the wmsLocationId should be set to the startLocationId.
                    inventDimForLPWork.wmsLocationId = startLocationId;
                }
                else if (endLocationId)
                {
                    inventDimForLPWork.wmsLocationId = endLocationId;
                }

                inventDimForLPWork = InventDim::findOrCreate(inventDimForLPWork);
                tmpworkline.InventDimId = inventDimForLPWork.inventDimId;
                tmpWorkLine.ItemId = inventSum.ItemId;
                
                this.createTempLine(tmpWorkLine, PdsGlobal::pdsIsCWItem(inventSum.ItemId) ? inventSum.PdsCWPhysicalInvent : inventSum.PhysicalInvent);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(Common _common, WHSWorkCreateId _workCreateId = '')
    {
        tmpMovementWork = _common;

        workCreateId = _workCreateId ? _workCreateId : NumberSeq::newGetNum(WHSParameters::numRefWHSWorkCreateId()).num();

        super(tmpMovementWork, workCreateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpMovementWork</Name>
				<Source><![CDATA[
    public WHSTmpMovementWork parmTmpMovementWork(WHSTmpMovementWork _tmpMovementWork = tmpMovementWork)
    {
        tmpMovementWork = _tmpMovementWork;

        return tmpMovementWork;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainingWorkLineInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a dimension ID that represents a copy of the current dimension with the correct inventory status.
    /// </summary>
    /// <param name = "_inventDimId">The current <c>InventDimId</c> that has the to status.</param>
    /// <returns>The <c>InventDimId</c> with the from inventory status.</returns>
    protected InventDimId getRemainingWorkLineInventDimId(InventDimId _inventDimId)
    {
        if (!fromInventStatusId)
        {
            return _inventDimId;
        }

        InventDim fromInventDim = InventDim::find(_inventDimId);

        fromInventDim.InventStatusId = fromInventStatusId;
        
        return InventDim::findOrCreate(fromInventDim).inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkCreateId</Name>
				<Source><![CDATA[
    public WHSWorkCreateId parmWorkCreateId(WHSWorkCreateId _workCreateId = workCreateId)
    {
        workCreateId = _workCreateId;

        return workCreateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructor method for the class instances.
    /// </summary>
    /// <param name="_common">
    /// Common record to be used to construct instance.
    /// </param>
    /// <param name="_workCreateId">
    /// Work creation id to be used to construct instance.
    /// </param>
    /// <returns>
    /// The <c>WHSWorkCreateMovement</c> instance.
    /// </returns>
    public static WHSWorkCreateMovement construct(Common _common, WHSWorkCreateId _workCreateId = '')
    {
        WHSWorkCreateMovement   workCreateMovement;

        workCreateMovement = new WHSWorkCreateMovement(_common, _workCreateId);

        return workCreateMovement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNestedMovementWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loops through nested plate structure and creates basic movement work
    /// </summary>
    /// <param name="_licensePlateId">
    /// License plate ID
    /// </param>
    /// <param name="_inventLocationId">
    /// The inventory location ID.
    /// </param>
    /// <param name="_toLocationId">
    /// The warehouse location ID.
    /// </param>
    /// <param name="_userId">
    /// The user ID.
    /// </param>
    public static void createNestedMovementWork(
        WHSLicensePlateId  _licensePlateId,
        InventLocationId   _inventLocationId,
        WMSLocationId      _toLocationId,
        WHSUserId          _userId)
    {
        WHSLicensePlate     childLicensePlate;
        boolean             nonLP;
        InventSum           inventSum;
        InventDim           inventDim;
        InventDim           tmpInventDim;

        nonLP = !WMSLocation::find(_toLocationId, _inventLocationId).whsLocationIsLPControlled();

        ttsbegin;

        while select LicensePlateId from childLicensePlate
            where childLicensePlate.LicensePlateParent == _licensePlateId
        {
            inventDim.clear();
            inventSum.clear();
            
            if (InventUseDimOfInventSumToggle::instance().isEnabled())
            {
                select firstonly InventDimId, wmsLocationId, InventSiteId, InventLocationId, InventStatusId from inventSum
                where inventSum.ClosedQty           == NoYes::No                &&
                      inventSum.PhysicalInvent       > 0                        &&
                      inventSum.LicensePlateId      == childLicensePlate.LicensePlateId;

                if (inventSum.RecId != 0)
                {
                    tmpInventDim.InventSiteId       = inventSum.InventSiteId;
                    tmpInventDim.InventLocationId   = inventSum.InventLocationId;
                    tmpInventDim.LicensePlateId     = childLicensePlate.LicensePlateId;

                    WHSWorkCreateMovementBasic::createBasicMovementWork(_userId,
                                                                    '',
                                                                    0,
                                                                    '',
                                                                    tmpInventDim,
                                                                    childLicensePlate.LicensePlateId,
                                                                    inventSum.wmsLocationId,
                                                                    _toLocationId,
                                                                    nonLP ? '' : childLicensePlate.LicensePlateId,
                                                                    inventSum.InventStatusId,
                                                                    inventSum.InventStatusId);

                    if (nonLP)
                    {
                        WHSLicensePlate::removeFromParentLP(childLicensePlate.LicensePlateId);
                    }
                }
            }
            else
            {
                select firstonly InventDimId from inventSum
                join wmsLocationId, InventSiteId, InventLocationId, InventStatusId from inventDim
                where inventSum.InventDimId         == inventDim.InventDimId    &&
                      inventSum.ClosedQty           == NoYes::No                &&
                      inventSum.PhysicalInvent       > 0                        &&
                      inventDim.LicensePlateId      == childLicensePlate.LicensePlateId;

                if (inventSum.RecId != 0)
                {
                    tmpInventDim.InventSiteId       = inventDim.InventSiteId;
                    tmpInventDim.InventLocationId   = inventDim.InventLocationId;
                    tmpInventDim.LicensePlateId     = childLicensePlate.LicensePlateId;

                    WHSWorkCreateMovementBasic::createBasicMovementWork(_userId,
                                                                    '',
                                                                    0,
                                                                    '',
                                                                    tmpInventDim,
                                                                    childLicensePlate.LicensePlateId,
                                                                    inventDim.wmsLocationId,
                                                                    _toLocationId,
                                                                    nonLP ? '' : childLicensePlate.LicensePlateId,
                                                                    inventDim.InventStatusId,
                                                                    inventDim.InventStatusId);

                    if (nonLP)
                    {
                        WHSLicensePlate::removeFromParentLP(childLicensePlate.LicensePlateId);
                    }
                }
            }
            
            // Create movement work for any license plates nested on the child license plate.
            WHSWorkCreateMovement::createNestedMovementWork(childLicensePlate.LicensePlateId, _inventLocationId, _toLocationId, _userId);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGroupedContainersMovementWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates basic movement work for the grouped containers.
    /// </summary>
    /// <param name="_containerGroupingLicensePlateId">
    /// Container grouping license plate ID.
    /// </param>
    /// <param name="_toLocationId">
    /// The To warehouse location ID.
    /// </param>
    /// <param name="_userId">
    /// The user ID.
    /// </param>
    public static void createGroupedContainersMovementWork(
        WHSLicensePlateId  _containerGroupingLicensePlateId,
        WMSLocationId      _toLocationId,
        WHSUserId          _userId)
    {
        InventDim			containerTableInventDim;
        WHSContainerTable	containerTable;

        select firstonly wMSLocationId from containerTableInventDim
            exists join containerTable
                where containerTable.inventDimId						== containerTableInventDim.InventDimId
                    && containerTable.ContainerGroupingLicensePlateId	== _containerGroupingLicensePlateId;

        if (containerTableInventDim.wMSLocationId)
        {
            WHSWorkTable	groupedContainerWork	= WHSWorkTable::findByLicensePlate(_containerGroupingLicensePlateId);
            WHSWorkLine		firstOpenPickLine		= WHSWorkTable::getNextOpenPickWorkLine(groupedContainerWork.WorkId);

            InventDim fromLocationInventDim		= firstOpenPickLine.inventDim();
            fromLocationInventDim.wMSLocationId	= containerTableInventDim.wMSLocationId;
            fromLocationInventDim				= InventDim::findOrCreate(fromLocationInventDim);

            WHSWorkCreateMovementBasic::createBasicLicensePlateMovementWork(_userId, _containerGroupingLicensePlateId, fromLocationInventDim, _toLocationId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndLocationId</Name>
				<Source><![CDATA[
    public WMSLocationId parmEndLocationId(WMSLocationId _endLocationId = endLocationId)
    {
        endLocationId = _endLocationId;

        return endLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsReverseWorkMovementToLocation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmIsReverseWorkMovementToLocation(boolean _isReverseWorkMovementToLocation = isReverseWorkMovementToLocation)
    {
        isReverseWorkMovementToLocation = _isReverseWorkMovementToLocation;

        return isReverseWorkMovementToLocation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>