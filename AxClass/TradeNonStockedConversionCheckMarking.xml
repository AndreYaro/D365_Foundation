<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeNonStockedConversionCheckMarking</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///   The <c>TradeNonStockedConversionCheckMarking</c> class checks for transaction that are marked.
/// </summary>
class TradeNonStockedConversionCheckMarking
extends TradeNonStockedConversionCheck
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes all checks.
    /// </summary>
    /// <returns>
    /// true if all checks pass; otherwise, false.
    /// </returns>
    public boolean check()
    {
        boolean ok;

        ok = this.checkInventTrans();

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the <c>InventTrans</c> table for transactions that are marked.
    /// </summary>
    /// <returns>
    /// true if no transactions exist; otherwise, false.
    /// </returns>
    private boolean checkInventTrans()
    {
        boolean             ok = true;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        TradeNonStockedConversionItem conversionItem;

        while select crosscompany conversionItem
            where conversionItem.NonStockedConversion == tradeNonStockedConversion.RecId
            &&    conversionItem.Status               == TradeNonStockedConversionStatus::Draft
            &&   (!this.singleItemCheck()
            ||    (conversionItem.ItemId              == tradeNonStockedConversionItem.ItemId
            &&    conversionItem.ItemIdDataAreaId     == tradeNonStockedConversionItem.ItemIdDataAreaId))
            join InventTransId, ReferenceId, ReferenceCategory from inventTransOrigin
                where inventTransOrigin.ItemId      == conversionItem.ItemId
                &&    inventTransOrigin.DataAreaId  == conversionItem.ItemIdDataAreaId
                &&    inventTransOrigin.ReferenceCategory != InventTransType::SalesQuotation
                exists join inventTrans
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                    &&    inventTrans.ValueOpen         == InventTransOpen::Yes
                    &&    inventTrans.MarkingRefInventTransOrigin != 0
                    &&    ((inventTrans.StatusIssue     == StatusIssue::OnOrder
                    ||      inventTrans.StatusIssue     == StatusIssue::ReservOrdered
                    ||      inventTrans.StatusIssue     == StatusIssue::ReservPhysical)
                    ||     (inventTrans.StatusReceipt   == StatusReceipt::Ordered))

        {
            ok = false;
            this.writeLog(conversionItem,
                          tablenum(InventTransOrigin),
                          fieldnum(InventTransOrigin, InventTransId),
                          inventTransOrigin.InventTransId,
                          this.inventReferenceCategoryToTableId(inventTransOrigin.ReferenceCategory),
                          inventTransOrigin.ReferenceId);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>issueType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the issue type.
    /// </summary>
    /// <returns>
    ///    The <c>TradeNonStockedConversionIssue::MarkingExists</c> enumeration value.
    /// </returns>
    protected TradeNonStockedConversionIssue issueType()
    {
        return TradeNonStockedConversionIssue::MarkingExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAll</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Executes all checks in the <c>TradeNonStockedConversionCheckMarking</c> class.
    /// </summary>
    /// <param name="_tradeNonStockedConversion">
    ///   An <c>TradeNonStockedConversion</c> record.
    /// </param>
    /// <param name="_tradeNonStockedConversionItem">
    ///   An <c>TradeNonStockedConversionItem</c> record; optional.
    /// </param>
    /// <returns>
    ///  true if all checks passes; otherwise, false.
    /// </returns>
    static public boolean checkAll(
        TradeNonStockedConversion       _tradeNonStockedConversion,
        TradeNonStockedConversionItem   _tradeNonStockedConversionItem  = null)
    {
        boolean ok;

        TradeNonStockedConversionCheckMarking tradeNonStockedConversionCheckMarking = TradeNonStockedConversionCheckMarking::construct();
        tradeNonStockedConversionCheckMarking.parmTradeNonStockedConversion(_tradeNonStockedConversion);
        tradeNonStockedConversionCheckMarking.parmTradeNonStockedConversionItem(_tradeNonStockedConversionItem);

        ok = tradeNonStockedConversionCheckMarking.check();

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        static public TradeNonStockedConversionCheckMarking construct()
    {
        return new TradeNonStockedConversionCheckMarking();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>