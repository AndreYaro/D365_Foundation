<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJourTransferCmdExtAdvanceHolder_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///   Extension for <c>SubledgerJournalTransferCommand</c> class for Advance Report
/// </summary>
[SourceDocumentExtensionAttribute()]
class SubledgerJourTransferCmdExtAdvanceHolder_RU extends SubledgerJournalTransferCommandExtension
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canSubscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether to subscribe the command event.
    /// </summary>
    /// <returns>
    /// True if we can subscribe the command event; otherwise, false.
    /// </returns>
    protected boolean canSubscribe()
    {
        return SysCountryRegionCode::isAnyLegalEntityInCountryRegion(#isoRU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Subscribes event handler.
    /// </summary>
    protected void subscribe()
    {
        super();
        if (this.canSubscribe())
        {
            command.insertedGeneralJournalAccountEntry += eventhandler(this.insertedGenJourlAccEntryEventHandler);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertedGenJourlAccEntryEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Event handler for insertedGeneralJournalAccountEntry.
    /// </summary>
    /// <param name="_transferID">
    ///   Tranfer ID.
    /// </param>
    /// <param name="_doc">
    ///   SourceDocument class instance.
    /// </param>
    /// <param name="_doSummarization">
    ///    Summarize between journals or no.
    /// </param>
    public void insertedGenJourlAccEntryEventHandler(RefRecId _transferID, SourceDocument _doc, boolean _doSummarization)
    {
        if (_doc IS EmplAdvReportSourceDocument_RU)
        {
            GeneralJournalEntry entry;
            EmplAdvTable_RU emplAdvTable;
            EmplTrans_RU emplTransCorrected;
            EmplTrans_RU emplTrans;

            while select Voucher, TransDate from emplTransCorrected
                where emplTransCorrected.RefTableId == emplTransCorrected.TableId &&
                    emplTransCorrected.Reversed &&
                    emplTransCorrected.Correct
            join Voucher, TransDate from emplTrans
                where emplTrans.RecId == emplTransCorrected.RefRecId
            exists join emplAdvTable
                where emplAdvTable.Status == EmplAdvStatus_RU::Rejected &&
                    emplAdvTable.AdvanceId == emplTransCorrected.AdvanceId
            exists join entry
                where entry.SubledgerVoucher == emplTransCorrected.Voucher &&
                    entry.AccountingDate == emplTransCorrected.TransDate &&
                    entry.TransferId == _transferID
            {
                if (emplTransCorrected)
                {
                    TransLink_RU::createGeneralJourTransLink(emplTrans.Voucher,
                    emplTrans.TransDate,
                    emplTransCorrected.Voucher,
                    emplTransCorrected.TransDate);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>