<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventAdj_SumUp</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventAdj_SumUp extends InventAdj implements BatchRetryable
{
    container               sumUp;
    InventAdjustmentSpec    specification;
    NoYes                   updateLedger;
    FreeTxt                 freeTxt;

    LedgerCorrection        ledgerCorrection;

    #EECountryRegionCodes

    TransDate               transDate;

    InventDimParm           inventDimParm;
    boolean                 adjustClosing;

    DialogField             dialogDate;
    DialogField             dialogSpecification;
    DialogField             dialogLedger;
    DialogField             dialogNotes;
    DialogField             dialogLedgerCorrection;

    #DEFINE.CurrentVersion(13)

    #LOCALMACRO.CurrentList
        SumUp,
        inventDimParm,
        transDate,
        Specification,
        UpdateLedger,
        freeTxt,
        ledgerCorrection,
        adjustClosing
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        DialogRunbase dialog = super();

        dialogDate              = dialog.addFieldValue(extendedTypeStr(TransDate), transDate, "@SYS8449");
        dialogDate.active(false);

        dialogSpecification     = dialog.addFieldValue(enumStr(InventAdjustmentSpec), specification, "@SYS78941", "@SYS19204");
        dialogLedger            = dialog.addFieldValue(enumStr(NoYes), updateLedger, "@SYS17508", "@SYS28266");
        dialogNotes             = dialog.addFieldValue(extendedTypeStr(FreeTxt), freeTxt, "@SYS13887", "@SYS27801");
        // Hide this field. Do not remove the code.
        dialogLedger.visible(NoYes::No);
        // <GEEU>
        if (LedgerParameters::isStornoEnabledEE())
        {
            dialogLedgerCorrection  = dialog.addFieldValue(extendedTypeStr(LedgerCorrection),
                                                           InventParameters::find().InventAdjustCorrection,
                                                           "@GLS112547",
                                                           "@GLS112548");

            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00015, funcName());
        }
        // </GEEU>

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        transDate           = dialogDate.value();
        specification       = dialogSpecification.value();
        updateLedger        = dialogLedger.value();
        freeTxt             = dialogNotes.value();
        // <GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAll))
        {
            ledgerCorrection = dialogLedgerCorrection && dialogLedgerCorrection.value();
        }
        // </GEEU>

        if (! updateLedger)
        {
            if (Box::yesNo("@SYS19298"+'\n'+ "@SYS60031"+'\n\n',DialogButton::Yes) != DialogButton::Yes)
            {
                return false;
            }
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found by calling the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    void initParmDefault()
    {
        specification  = InventAdjustmentSpec::Total;
        updateLedger   = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container  pack()
    {
        return [#CurrentVersion, #CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdjustClosing</Name>
				<Source><![CDATA[
    public boolean parmAdjustClosing(boolean _adjustClosing = adjustClosing)
    {
        adjustClosing = _adjustClosing;

        return adjustClosing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFreeTxt</Name>
				<Source><![CDATA[
    FreeTxt parmFreeTxt(FreeTxt _freeTxt = freeTxt)
    {
        freeTxt = _freeTxt;
        return freeTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventAdjustmentType</Name>
				<Source><![CDATA[
    public InventAdjustmentType parmInventAdjustmentType()
    {
        if (adjustClosing)
        {
            return InventAdjustmentType::InventOnHand;
        }
        else
        {
            return InventAdjustmentType::Revaluation;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimParm</Name>
				<Source><![CDATA[
    InventDimParm parmInventDimParm(InventDimParm _inventDimParm = inventDimParm)
    {
        inventDimParm = _inventDimParm;
        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecification</Name>
				<Source><![CDATA[
    InventAdjustmentSpec parmSpecification(InventAdjustmentSpec _specification = specification)
    {
        specification = _specification;
        return specification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSumUp</Name>
				<Source><![CDATA[
    container parmSumUp(container _sumUp = sumUp)
    {
        sumUp = _sumUp;
        return sumUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount

        Integer     logPointBegin = infologLine();

        setPrefix(InventAdj_SumUp::description(
            // <GEERU>
            inventTransCurrency
            // </GEERU>
            ));

        try
        {
            ttsbegin;

            if (! this.validate())
            {
                throw error("@SYS18447");
            }

            NumberSeq numberSeq = NumberSeq::newGetNum(InventClosing::numberSequenceReference(this.parmInventAdjustmentType()
            // <GEERU>
            , inventTransCurrency
            // </GEERU>
            ));

            inventClosing.Executed          = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            inventClosing.Start             = DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone());

            inventClosing.Voucher           = numberSeq.num();

            inventClosing.AdjustmentType    = this.parmInventAdjustmentType();

            inventClosing.Active            = NoYes::Yes;
            inventClosing.TransDate         = transDate;
            inventClosing.AdjustmentSpec    = specification;
            inventClosing.Ledger            = updateLedger;

            inventClosing.Notes             = freeTxt;
            // <GEEU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAll))
            {
                inventClosing.LedgerCorrection  = ledgerCorrection;
            }
            // </GEEU>
            // <GEERU>
            inventClosing.InventTransCurrency_RU = inventTransCurrency;
            inventClosing.StornoAdjustment_RU    = storno_RU;
            // </GEERU>

            InventDataAdjSumUp data = InventDataAdjSumUp::newPacked(sumUp);

            this.progressInit(InventAdj_SumUp::description(
                // <GEERU>
                inventTransCurrency
                // </GEERU>
                ),data.lineCount(),#AviUpdate);

            this.updateInvent(data);

            // <GEERU>
            if (inventTransCurrency == InventTransCurrency_RU::SecondaryCur)
            {
                this.updateLedgerSecCur_RU(InventClosing::ledgerTransTxt(this.parmInventAdjustmentType()), NoYes::No, '', true, true, numberSeq.parmNumberSequenceCode());
            }
            else
            {
            // </GEERU>
                // <GEEU>
                this.updateLedger(InventClosing::ledgerTransTxt(this.parmInventAdjustmentType()), ledgerCorrection,'',true,true,numberSeq.parmNumberSequenceCode());
                // </GEEU>
            // <GEERU>
            }
            // </GEERU>

            inventClosing.createTransactionLog();

            inventClosing.End = DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone());

            inventClosing.insert();

            Integer logPointNow = infologLine();
            if (logPointBegin +1 <= logPointNow)
            {
                inventClosing.writeLog(infolog.copy(logPointBegin+1,logPointNow));
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        container       base;
        boolean         ret;
        Integer         version     = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = packedClass;
                ret = super(base);
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvent</Name>
				<Source><![CDATA[
    void updateInvent(InventDataAdj _data)
    {
        TmpFormLookUp                   tmpFormLookUp;
        InventModelTypeCache            inventModelTypeCache = InventModelTypeCache::construct();
        // <GEERU>
        #ISOCountryRegionCodes
        boolean                         countryRegion_RU    = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
        InventModelGroup                inventModelGroup;
        ItemId                          tmpFormLookUpItemId = '';

        InventModelType                 inventModelType;

        InventTransAdjust transAdjust =
            // <GEERU>
            InventTransAdjust::construct(
            // </GEERU>
            inventClosing.TransDate,inventClosing.Voucher,true
            // <GEERU>
            , inventTransCurrency
            // </GEERU>
            );

        tmpFormLookUp.setTmpData(_data.tmpFormLookUp());
        while select tmpFormLookUp
        {
            progress.setText("@SYS8516"+'/'+tmpFormLookUp.ItemId);
            progress.incCount();

            if (tmpFormLookUp.AdjustNow != 0)
            {
                if (tmpFormLookUp.Qty <= 0)
                {
                    throw error("@SYS18756");
                }
                setPrefix(#PrefixFieldvalue(InventSum,ItemId,tmpFormLookUp.itemId));

                if (tmpFormLookUpItemId != tmpFormLookUp.ItemId)
                {
                    tmpFormLookUpItemId = tmpFormLookUp.ItemId;
                    inventModelGroup    = InventTable::modelGroupByItemId(tmpFormLookUpItemId);
                    inventModelType     = inventModelTypeCache.inventModelType(inventModelGroup.modelGroupId
                        // <GEERU>
                        , inventTransCurrency
                        // </GEERU>
                        );
                }
                if (!inventModelType.allowOnhandAdjustment())
                {
                    throw error(strFmt("@SYS104802", inventModelGroup.InventModel));
                }

                InventSumOpenTransact openTransact = inventModelType.inventSumOpenTransact(
                                                      transDate,
                                                      tmpFormLookUp.ItemId,
                                                      InventDim::find(tmpFormLookUp.InventDimId),
                                                      inventDimParm
                                                      );

                // <GEERU>
                openTransact.parmInventTransCurrency_RU(inventTransCurrency);
                // </GEERU>
                if (openTransact.sumTransQty()      != tmpFormLookUp.Qty  ||
                    openTransact.sumTransValue()    != tmpFormLookUp.PostedValue )
                {
                    throw error("@SYS18757");
                }

                openTransact.setAdjustment(tmpFormLookUp.AdjustNow);

                Counter transX = 0;
                while (transX < openTransact.transMax())
                {
                    transX+= 1;

                    if (openTransact.transQty(transX) > 0)
                    {
                        InventTrans inventTrans = InventTrans::findRecId(openTransact.transRecId(transX),true);

                        CostAmount adjustNow = openTransact.transAdjustNow(transX);

                        if (inventModelType.isSettled())
                        {
                            LedgerPostingType postingBalanceSheet = inventTrans.postingBalanceSheet();
                            LedgerDimensionAccount accountBalanceSheet = inventTrans.accountBalanceSheetLedgerDimension();

                            if (!accountBalanceSheet || !postingBalanceSheet)
                            {
                                postingBalanceSheet    = InventAdj::errorPostingBalanceSheet(inventTrans.Qty);
                                // <GEERU>
                                if (countryRegion_RU)
                                {
                                    accountBalanceSheet    = InventAdj::errorAccountBalanceSheet(inventTrans.ItemId,
                                                                                           InventTable::itemGroupIdByItemId(inventTrans.ItemId),
                                                                                           inventTrans.Qty,
                                                                                           inventTrans.inventDim());
                                }
                                else
                                {
                                // </GEERU>
                                // <GCN>
                                if (InventPostingExtendParm_CN::checkExtendParmEnabled())
                                {
                                    accountBalanceSheet = InventAdj::errorAccountBalanceSheet_CN(
                                                                                        inventTrans.ItemId,
                                                                                        inventTrans.inventTable().itemGroupId(),
                                                                                        inventTrans.Qty,
                                                                                        InventPostingExtendParm_CN::constructInventDim(inventTrans.inventDim()));
                                }
                                else
                                {
                                // </GCN>
                                    accountBalanceSheet    = InventAdj::errorAccountBalanceSheet(inventTrans.ItemId,
                                                                                       InventTable::itemGroupIdByItemId(inventTrans.ItemId),
                                                                                       inventTrans.Qty);

                                // <GCN>
                                }
                                // </GCN>
                                // <GEERU>
                                }
                                // </GEERU>
                            }

                            // <GEERU>
                            if (countryRegion_RU)
                            {
                                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00118, funcName());

                                LedgerDimensionAccount corrLedgerAccountLoc = corrLedgerAccount_RU;
                                LedgerPostingType corrLedgerPostingLoc = corrLedgerPosting_RU;

                                transAdjust.parmMarkupCode_RU(tmpFormLookUp.MarkupCode_RU);
                                if (tmpFormLookUp.MarkupCode_RU)
                                {
                                    corrLedgerAccountLoc = LedgerDimensionFacade::serviceCreateLedgerDimension(MarkupTable::find(MarkupModuleType::Invent, tmpFormLookUp.MarkupCode_RU).parmVendorLedgerDimension(), corrDimension_RU);

                                    corrLedgerPostingLoc = MarkupTable::find(
                                        MarkupModuleType::Invent
                                       , tmpFormLookUp.MarkupCode_RU).VendPosting;
                                }

                                transAdjust.updateNow(inventTrans,
                                                        NoYes::Yes,
                                                        NoYes::Yes,
                                                        adjustNow,
                                                        true,
                                                        corrLedgerPostingLoc ? corrLedgerPostingLoc : inventTrans.postingLossProfit(adjustNow),
                                                        corrLedgerAccountLoc ? corrLedgerAccountLoc : inventTrans.accountLossProfitLedgerDimension(adjustNow),
                                                        true,
                                                        postingBalanceSheet,
                                                        accountBalanceSheet,
                                                        true,
                                                        null,
                                                        InventAdjustmentSpec::Total);
                            }
                            else
                            {
                            // </GEERU>
                                transAdjust.updateNow(inventTrans,
                                                     NoYes::Yes,
                                                     NoYes::Yes,
                                                     adjustNow,
                                                     true,
                                                     inventTrans.postingLossProfit(adjustNow),
                                                     inventTrans.accountLossProfitLedgerDimension(adjustNow),
                                                     true,
                                                     postingBalanceSheet,
                                                     accountBalanceSheet);
                            // <GEERU>
                            }
                            // </GEERU>
                        }
                        else
                        {
                            inventModelType.updateRevaluationAdjustment(inventClosing, inventTrans, adjustNow);
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean  validate(Object calledFrom = null)
    {
        InventClosing   inventClosingCheck;

        if (adjustClosing && transDate != InventClosing::closingDate(
            // <GEERU>
            false, inventTransCurrency
            // </GEERU>
            ))
            return checkFailed("@SYS18758");

        if (sumUp  == conNull())
            return checkFailed("@SYS18759");

        select firstonly RecId from inventClosingCheck
            where inventClosingCheck.Active                 == NoYes::Yes                       &&
                  inventClosingCheck.InventCostStatus       >  InventCostStatus::Ended;

        if (inventClosingCheck.RecId)
            return checkFailed("@SYS78037");

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static InventAdj_SumUp construct()
    {
        return new InventAdj_SumUp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description(
        InventTransCurrency_RU _inventTransCurrency = InventTransCurrency_RU::PrimaryCur
        )
    {
        // <GEERU>
        if (_inventTransCurrency == InventTransCurrency_RU::SecondaryCur)
            return "@GLS102383";
        else
        // </GEERU>
            return "@SYS18755";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSumUp</Name>
				<Source><![CDATA[
    static InventAdj_SumUp newSumUp(container sumUp, InventDimParm _inventDimParm
        , TransDate _transDate = inventClosing::closingDate()
        , boolean _adjustClosing = true
        , InventTransCurrency_RU _inventTransCurrency  = InventTransCurrency_RU::PrimaryCur
        )
    {
        InventAdj_SumUp inventAdj_SumUp = InventAdj_SumUp::construct();

        inventAdj_SumUp.getLast();
        inventAdj_SumUp.parmSumUp(sumUp);
        inventAdj_SumUp.parmInventDimParm(_inventDimParm);

        inventAdj_SumUp.parmTransDate(_transDate);

        inventAdj_SumUp.parmFreeTxt("");

        inventAdj_SumUp.parmAdjustClosing(_adjustClosing);
        // <GEERU>
        inventAdj_SumUp.parmInventTransCurrency_RU(_inventTransCurrency);
        // </GEERU>

        return inventAdj_SumUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>