<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankLCImportApplicationController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BankLCImportApplicationController</c> class is the controller class for
///    <c>BankLCImportApplication</c> SSRS report.
/// </summary>
class BankLCImportApplicationController extends SrsReportRunController implements BatchRetryable
{
    PurchId purchId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// New the controller class <c>BankLCImportApplicationController</c> instance of <c>BankLCImportApplication</c> SRS report.
    /// </summary>
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the class variable PurchId.
    /// </summary>
    /// <param name="_purchId">
    /// The new value of the class variable PurchId; optional.
    /// </param>
    /// <returns>
    ///  The current value of class variable PurchId
    /// </returns>
    public PurchId parmPurchId(PurchId _purchId = purchId)
    {
        purchId = _purchId;
        return purchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Modifies the RDP contract parameter of the <c>BankLCImportApplication</c> SSRS report object.
    /// </summary>
    protected void prePromptModifyContract()
    {
        BankLCImportApplicationContract dataContract;

        dataContract = this.parmReportContract().parmRdpContract();
        dataContract.parmPurchId(this.parmPurchId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the controller class <c>BankLCImportApplicationController</c> instance of <c>BankLCImportApplication</c> SRS report.
    /// </summary>
    /// <param name="_args">
    /// The parameters to run the report.
    /// </param>
    /// <returns>
    ///  The constructed <c>BankLCImportApplicationController</c> instance.
    /// </returns>
    public static BankLCImportApplicationController construct(Args _args)
    {
        BankLCImportApplicationController   controller;
        BankLCImport                        bankLCImport;

        #define.Report_Detail('BankLCImportApplication.Report')

        if (!_args || !_args.caller() || !_args.record())
        {
            throw(error(strfmt("@SYS29104", classstr(BankLCImportApplicationController))));
        }
        bankLCImport    = _args.record();

        if (bankLCImport && bankLCImport.PurchTable != '')
        {
            controller = new BankLCImportApplicationController();
            controller.parmArgs(_args);
            controller.parmReportName(#Report_Detail);
            controller.parmPurchId(bankLCImport.PurchTable);
        }
        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Main method for executing SRS report.
    /// </summary>
    /// <param name="_args">
    /// Event args
    /// </param>
    public static void main(Args _args)
    {
        BankLCImportApplicationController   controller;

        controller = BankLCImportApplicationController::construct(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>