<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AgreementForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract public class AgreementForm
{
    FormRun                             formRun;
    NumberSeqFormHandler                numberSeqFormHandlerAgreementId;
    CommitmentType                      defaultCommitmentType;
    DimensionEntryControl               headerDefaultDimensionEntryControl;
    boolean                             isProject;

    // <GEERU>
    #ISOCountryRegionCodes
    boolean                             countryRegion_RU;
    // </GEERU>

    AgreementClassificationLookup agreementClassificationLookup;

    #localmacro.CurrentList
        defaultCommitmentType
    #endmacro

    #Define.WildCard('*')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>disableHeaderButtons</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Disables the agreement header level buttons.
    /// </summary>
    public abstract void disableHeaderButtons()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>disableLineButtons</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Disables the agreement line level buttons.
    /// </summary>
    public abstract void disableLineButtons()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderButtons</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the agreement header level buttons.
    /// </summary>
    /// <param name="_agreementHeader">
    ///    A table buffer with the current agreement header table values.
    /// </param>
    public abstract void enableHeaderButtons(AgreementHeader _agreementHeader)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of the allow edit property on certain fields of the agreement header table.
    /// </summary>
    /// <param name="_agreementHeader_ds">
    /// A handle to the data source of the agreement header form.
    /// </param>
    /// <param name="_dataProvider">
    /// The data provider that provides data necessary for determining agreement header fields editability; optional.
    /// </param>
    public void enableHeaderFields(
        FormDataSource _agreementHeader_ds,
        AgreementHeaderFieldEditabilityDataProvider _dataProvider = AgreementHeaderFieldEditabilityDataProvider::newFromAgreementHeader(_agreementHeader_ds.cursor()))
    {
        this.setAllowEdit(_agreementHeader_ds, fieldnum(AgreementHeader, AgreementState), _dataProvider.canEditAgreementState());
        this.setAllowEdit(_agreementHeader_ds, fieldNum(AgreementHeader, DefaultAgreementLineType), _dataProvider.canEditDefaultAgreementLineType());

        boolean canEditValidityPeriod = _dataProvider.canEditValidityPeriod();
        this.setAllowEdit(_agreementHeader_ds, fieldNum(AgreementHeader, DefaultAgreementLineEffectiveDate), canEditValidityPeriod);
        this.setAllowEdit(_agreementHeader_ds, fieldNum(AgreementHeader, DefaultAgreementLineExpirationDate), canEditValidityPeriod);

        this.setAllowEdit(_agreementHeader_ds, fieldNum(AgreementHeader, Currency), _dataProvider.canEditCurrency());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderFields_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the allow edit property on certain fields of the agreement header table.
    /// </summary>
    /// <param name="_agreementHeader_ds">
    ///    A handle to the data source of the agreement header form.
    /// </param>
    /// <param name="_agreementHeaderExt_RU_ds">
    ///    A handle to the data source of the agreement header form.
    /// </param>
    /// <param name="_agreementHeaderDefault_ds">
    ///    A handle to the data source of the agreement header form.
    /// </param>
    public void enableHeaderFields_RU(FormDataSource _agreementHeader_ds,
        FormDataSource _agreementHeaderExt_RU_ds,
        FormDataSource _agreementHeaderDefault_ds)
    {
        AgreementHeader agreementHeader = _agreementHeader_ds.cursor() as AgreementHeader;

        if (agreementHeader.RecId)
        {
            if (agreementHeader.isReleased())
            {
                _agreementHeader_ds.object(fieldNum(AgreementHeader, Currency)).allowEdit(false);
                _agreementHeader_ds.object(fieldNum(AgreementHeader, Currency)).skip(false);
            }
            else
            {
                _agreementHeader_ds.object(fieldNum(AgreementHeader, Currency)).allowEdit(true);
                _agreementHeader_ds.object(fieldNum(AgreementHeader, Currency)).skip(true);
            }
            _agreementHeaderExt_RU_ds.object(fieldnum(AgreementHeaderExt_RU, CreditMax)).allowEdit(agreementHeader.AgreementState != AgreementState::OnHold);
        }

        _agreementHeaderExt_RU_ds.object(fieldnum(AgreementHeaderExt_RU, AgreementDate)).mandatory(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineButtons</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the agreement line level buttons.
    /// </summary>
    /// <param name="_agreementLine">
    ///    A table buffer with the current agreement line table values.
    /// </param>
    /// <param name="_agreementHeader">
    ///    A table buffer with the current agreement header table values.
    /// </param>
    public abstract void enableLineButtons(AgreementLine _agreementLine, AgreementHeader _agreementHeader)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineDefaultFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the allow edit property on certain fields of the agreement line default table.
    /// </summary>
    /// <param name="_agreementLineDefault_ds">
    ///    A handle to the data source of the agreement line default form.
    /// </param>
    /// <param name="_dataProvider">
    /// The data provider that provides data necessary for determining agreement line fields editability.
    /// </param>
    public void enableLineDefaultFields(
        FormDataSource                              _agreementLineDefault_ds,
        AgreementLineFieldEditabilityDataProvider   _dataProvider)
    {
        boolean allowEditProjectFields = _dataProvider.canEditProjectFields();
        this.setAllowEditAndMandatory(_agreementLineDefault_ds, fieldnum(AgreementLineDefault, ProjectCategory), allowEditProjectFields);
        this.setAllowEdit(_agreementLineDefault_ds, fieldnum(AgreementLineDefault, ProjectActivityNumber), allowEditProjectFields);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the allow edit property on agreement line table fields.
    /// </summary>
    /// <param name="_agreementLine_ds">
    ///    A handle to the data source of the agreement line form.
    /// </param>
    /// <param name="_agreementLineQuantityCommitment_ds">
    ///    A handle to the data source of the agreement line quantity commitment form.
    /// </param>
    /// <param name="_dataProvider">
    ///     The data provider that provides data necessary for determining agreement line fields editability.
    /// </param>
    public void enableLineFields(
        FormDataSource                              _agreementLine_ds,
        FormDataSource                              _agreementLineQuantityCommitment_ds,
        AgreementLineFieldEditabilityDataProvider   _dataProvider)
    {
        this.setAllowEdit(_agreementLine_ds, fieldnum(AgreementLine, IsMaxEnforced), _dataProvider.canEditIsMaxEnforced());
        this.setAllowEdit(_agreementLine_ds, fieldnum(AgreementLine, IsPriceInformationMandatory), _dataProvider.canEditIsPriceInformationMandatory());
        this.setAllowEdit(_agreementLine_ds, fieldnum(AgreementLine, LineDiscountPercent), _dataProvider.canEditDiscount());

        boolean canEditValidityPeriod = _dataProvider.canEditValidityPeriod();
        this.setAllowEdit(_agreementLine_ds, fieldnum(AgreementLine, EffectiveDate), canEditValidityPeriod);
        this.setAllowEdit(_agreementLine_ds, fieldnum(AgreementLine, ExpirationDate), canEditValidityPeriod);

        var agreementLine = _agreementLine_ds.cursor() as AgreementLine;
        if (agreementLine.isQuantityBased())
        {
            this.enableLineQuantityFields(_agreementLineQuantityCommitment_ds, _dataProvider);
        }

        this.enableLineFieldsItemIdOrCategory(_agreementLine_ds, _dataProvider);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineQuantityFieldsDependentOnItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the allow edit property for the fields where this setting depends on the selected item.
    /// </summary>
    /// <param name="_agreementLineQuantityCommitment_ds">
    ///    A handle to the agreement line form data source.
    /// </param>
    /// <param name="_dataProvider">
    ///     The data provider that provides data necessary for determining agreement line fields editability.
    /// </param>
    public void enableLineQuantityFieldsDependentOnItem(
        FormDataSource                                              _agreementLineQuantityCommitment_ds,
        AgreementLineQuantityCommitmentFieldEditabilityDataProvider _dataProvider = AgreementLineQuantityCommitmentFieldEditabilityDataProvider::newFromAgreementLine(_agreementLineQuantityCommitment_ds.cursor()))
    {
        this.setAllowEdit(_agreementLineQuantityCommitment_ds, fieldnum(AgreementLineQuantityCommitment, CommitedQuantity), _dataProvider.canEditCommitedQuantity());
        this.setAllowEdit(_agreementLineQuantityCommitment_ds, fieldnum(AgreementLineQuantityCommitment, PdsCWCommitedQuantity), _dataProvider.canEditPdsCWCommitedQuantity());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineFieldsItemIdOrCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the allow edit property on the <c>ItemId</c> and <c>Category</c> field of the
    ///    <c>AgreementLine</c> table.
    /// </summary>
    /// <param name="_agreementLine_ds">
    ///    A handle to the agreement line form data source.
    /// </param>
    /// <param name="_dataProvider">
    ///     The data provider that provides data necessary for determining agreement line fields editability.
    /// </param>
    public void enableLineFieldsItemIdOrCategory(
        FormDataSource                              _agreementLine_ds,
        AgreementLineFieldEditabilityDataProvider   _dataProvider)
    {
        this.setAllowEditAndMandatory(_agreementLine_ds, fieldnum(AgreementLine, ItemId), _dataProvider.canEditItemId());
        this.setAllowEditAndMandatory(_agreementLine_ds, fieldnum(AgreementLine, Category), _dataProvider.canEditCategory());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineQuantityFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the allow edit property on fields in the <c>AgreementLineQuantityCommitment</c> table.
    /// </summary>
    /// <param name="_agreementLineQuantityCommitment_ds">
    ///    A handle to the agreement line quantity commitment form data source.
    /// </param>
    /// <param name="_dataProvider">
    ///     The data provider that provides data necessary for determining agreement line fields editability; optional.
    /// </param>
    protected void enableLineQuantityFields(
        FormDataSource                                              _agreementLineQuantityCommitment_ds,
        AgreementLineQuantityCommitmentFieldEditabilityDataProvider _dataProvider = AgreementLineQuantityCommitmentFieldEditabilityDataProvider::newFromAgreementLine(_agreementLineQuantityCommitment_ds.cursor()))
    {
        this.enableLineQuantityFieldsDependentOnItem(_agreementLineQuantityCommitment_ds, _dataProvider);

        this.setAllowEdit(_agreementLineQuantityCommitment_ds, fieldnum(AgreementLineQuantityCommitment, ProductUnitOfMeasure), _dataProvider.canEditProductUnitOfMeasure());
        this.setAllowEdit(_agreementLineQuantityCommitment_ds, fieldnum(AgreementLineQuantityCommitment, LineDiscountAmount), _dataProvider.canEditDiscount());

        boolean allowEditPrice = _dataProvider.canEditPrice();
        this.setAllowEdit(_agreementLineQuantityCommitment_ds, fieldnum(AgreementLineQuantityCommitment, PricePerUnit), allowEditPrice);
        this.setAllowEdit(_agreementLineQuantityCommitment_ds, fieldnum(AgreementLineQuantityCommitment, PriceUnit), allowEditPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMethodClose</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Aborts the number sequence.
    /// </summary>
    /// <remarks>
    ///    This method frees the released number. It is required when a form is closed without saving the
    ///    record.For more information, see <see cref="SalesAgreement Form" />, <see cref="PurchAgreement
    ///    Form" />.
    /// </remarks>
    public void formMethodClose()
    {
        if (numberSeqFormHandlerAgreementId)
        {
            numberSeqFormHandlerAgreementId.formMethodClose();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMethodDataSourceCreate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Assigns the number sequence value to the <c>NumberSequence</c> fields in the subclass tables.
    /// </summary>
    /// <param name="_agreementHeader_ds">
    ///    The data source for which the number sequence value is needed.
    /// </param>
    /// <remarks>
    ///    This method is called from the agreement forms when new agreement order is created.For more
    ///    information, see <see cref="numberSeqFormHandlerAgreementId Method" />, <see cref="SalesAgreement
    ///    Form" />, <see cref="PurchAgreement Form" />.
    /// </remarks>
    public void formMethodDataSourceCreate(FormDataSource _agreementHeader_ds)
    {
        this.numberSeqFormHandlerAgreementId(_agreementHeader_ds).formMethodDataSourceCreate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMethodDataSourceCreatePre</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Assigns the number sequence value to the <c>NumberSequence</c> fields in the subclass tables.
    /// </summary>
    /// <param name="_agreementHeader_ds">
    ///    The data source for which the number sequence value is needed.
    /// </param>
    /// <remarks>
    ///    The method is called from the agreement forms when a new agreement order is created.For more
    ///    information, see <see cref="numberSeqFormHandlerAgreementId Method" />, <see cref="SalesAgreement
    ///    Form" />, <see cref="PurchAgreement Form" />.
    /// </remarks>
    public void formMethodDataSourceCreatePre(FormDataSource _agreementHeader_ds)
    {
        this.numberSeqFormHandlerAgreementId(_agreementHeader_ds).formMethodDataSourceCreatePre();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMethodDataSourceDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Frees the number sequence value when the <c>AgreemntHeader</c> record is deleted.
    /// </summary>
    /// <param name="_agreementHeader_ds">
    /// The data source for which the number sequence value is freed.
    /// </param>
    /// <remarks>
    /// The method is called from the agreement forms when a new agreement is deleted.For more information,
    /// see <see cref="M:AgreementForm.numberSeqFormHandlerAgreementId" />, <see
    /// cref="T:SalesAgreementForm" />, <see cref="T:PurchAgreementForm" />.
    /// </remarks>
    public void formMethodDataSourceDelete(FormDataSource _agreementHeader_ds)
    {
        this.numberSeqFormHandlerAgreementId(_agreementHeader_ds).formMethodDataSourceDelete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMethodDataSourceLinkActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Frees the number sequence value on the LinkActive event.
    /// </summary>
    /// <param name="_agreementHeader_ds">
    /// The data source for which the LinkActive event has occurred.
    /// </param>
    /// <remarks>
    /// The method is called from the agreement forms when another agreement is selected.The behavior of
    /// the number sequence value freeing depends on the number sequence definition.For more information,
    /// see <see cref="M:AgreementForm.numberSeqFormHandlerAgreementId" />, <see
    /// cref="T:SalesAgreementForm" />, <see cref="T:PurchAgreementForm" />.
    /// </remarks>
    public void formMethodDataSourceLinkActive(FormDataSource _agreementHeader_ds)
    {
        this.numberSeqFormHandlerAgreementId(_agreementHeader_ds).formMethodDataSourceLinkActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMethodDataSourceValidateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the agreement order ID value to write.
    /// </summary>
    /// <param name="_agreementHeader_ds">
    ///    The data source for which to perform the order ID validity check.
    /// </param>
    /// <returns>
    ///    true if the order ID is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The method is called from the agreement forms before saving the agreement header.For more
    ///    information, see <see cref="numberSeqFormHandlerAgreementId Method" />, <see cref="SalesAgreement
    ///    Form" />, <see cref="PurchAgreement Form" />.
    /// </remarks>
    public boolean formMethodDataSourceValidateWrite(FormDataSource _agreementHeader_ds)
    {
        return this.numberSeqFormHandlerAgreementId(_agreementHeader_ds).formMethodDataSourceValidateWrite();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMethodDataSourceWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the number sequence value as used.
    /// </summary>
    /// <param name="_agreementHeader_ds">
    ///    The data source for which the number sequence value is needed.
    /// </param>
    /// <remarks>
    ///    This method is called from the agreement forms when they save the agreement header.For more
    ///    information, see <see cref="numberSeqFormHandlerAgreementId Method" />, <see cref="SalesAgreement
    ///    Form" />, <see cref="PurchAgreement Form" />.
    /// </remarks>
    public void formMethodDataSourceWrite(FormDataSource _agreementHeader_ds)
    {
        this.numberSeqFormHandlerAgreementId(_agreementHeader_ds).formMethodDataSourceWrite();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysLastValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads the latest saved variable values for the current user in the form.
    /// </summary>
    public void getSysLastValue()
    {
        [#CurrentList] = xSysLastValue::getValue(curext(), curuserid(), UtilElementType::Form, formRun.name());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRangesFromCaller</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the form data sources and ranges by using on the calling object.
    /// </summary>
    /// <param name="_agreementHeader_ds">
    ///    A handle to the data source of the <c>AgreementHeader</c> form.
    /// </param>
    /// <param name="_agreementHeaderDefault_ds">
    ///    A handle to the data source of the <c>AgreementHeaderDefault</c> form.
    /// </param>
    public void initRangesFromCaller ( FormDataSource           _agreementHeader_ds
                                      ,FormDataSource           _agreementHeaderDefault_ds  )
    {
        QueryBuildDataSource    dataSource;
        QueryBuildRange         range;
        QueryBuildDataSource    projTableDataSource;
        PurchAgreementHeader    purchAgreementHeader;
        SalesAgreementHeader    salesAgreementHeader;

        if (    formRun.args().menuItemName() == menuitemdisplaystr(ProjPurchAgreement)
            ||  formRun.args().menuItemName() == menuitemdisplaystr(ProjSalesAgreement)
            ||  formRun.args().menuItemName() == menuitemdisplaystr(ProjPurchAgreementForNew)
            ||  formRun.args().menuItemName() == menuitemdisplaystr(ProjSalesAgreementForNew))
        {
            this.initRangesFromProject(_agreementHeaderDefault_ds);
        }

        switch (formRun.args().dataset())
        {
            case tablenum(ProjTable):
            // FALL THROUGH!

            case tablenum(ProjWIPTable):

                // Change the join mode to enable filtering (inner join) making only agreements related to the current project to be
                // shown by the form...
                dataSource = SysQuery::findOrCreateDataSource(_agreementHeaderDefault_ds.query(), tablenum(AgreementHeaderDefault));
                dataSource.joinMode(JoinMode::InnerJoin);

                dataSource.clearDynalinks();

                range = SysQuery::findOrCreateRange(dataSource, fieldnum(AgreementHeaderDefault, Project));
                range.status(RangeStatus::Locked);

                // Make Project field mandatory for the DS records
                _agreementHeaderDefault_ds.object(fieldnum(AgreementHeaderDefault, Project)).mandatory(true);

                break;

            case tablenum(ProjInvoiceTable):
                // We need to display only agreements corresponded to the projects with active Project Contract ID...
                dataSource = SysQuery::findOrCreateDataSource(_agreementHeaderDefault_ds.query(), tablenum(AgreementHeaderDefault));
                dataSource.joinMode(JoinMode::InnerJoin);

                dataSource.clearDynalinks();

                // ... an extra data source is needed to query agreements related to the projects with selected Contract ID:
                projTableDataSource = _agreementHeaderDefault_ds.query().dataSourceTable(
                                                    tablenum(AgreementHeaderDefault)).addDataSource(tablenum(ProjTable));
                projTableDataSource.joinMode(JoinMode::ExistsJoin);

                projTableDataSource.clearDynalinks();

                projTableDataSource.addLink(fieldnum(ProjTable, ProjId), fieldnum(AgreementHeaderDefault,Project));

                // Create range to select only porject IDs associated with particular Project Contract ID:
                range = SysQuery::findOrCreateRange(projTableDataSource,fieldnum(ProjTable,ProjInvoiceProjId));
                range.status(RangeStatus::Locked);

                // Make Project field mandatory for the DS records
                _agreementHeaderDefault_ds.object(fieldnum(AgreementHeaderDefault, Project)).mandatory(true);

                break;

            // For intercompany scenarios
            case tablenum(SalesAgreementHeader) :

                if (formRun.args().menuItemName() == menuitemdisplaystr(AgreementViewPurchAgreement)
                    // <GEERU>
                    || formRun.args().menuItemName() == menuitemdisplaystr(AgreementViewPurchAgreement_RU)
                    // </GEERU>
                )
                {
                    salesAgreementHeader = formRun.args().record() as SalesAgreementHeader;
                    dataSource = SysQuery::findOrCreateDataSource(_agreementHeader_ds.query(), tablenum(PurchAgreementHeader));

                    dataSource.clearDynalinks();
                    range = SysQuery::findOrCreateRange(dataSource, fieldnum(PurchAgreementHeader, RecId));
                    // <GEERU>
                    if (formRun.args().menuItemName() == menuitemdisplaystr(AgreementViewPurchAgreement_RU))
                    {
                        range.value(queryValue(salesAgreementHeader.purchAgreementHeader_RU().RecId));
                    }
                    else
                    {
                    // </GEERU>
                        range.value(queryValue(salesAgreementHeader.purchAgreementHeader().RecId));
                    // <GEERU>
                    }
                    // </GEERU>
                    range.status(RangeStatus::Locked);
                }
                break;

            // For intercompany scenarios
            case tablenum(PurchAgreementHeader) :

                if (formRun.args().menuItemName() == menuitemdisplaystr(AgreementViewSalesAgreement)
                    // <GEERU>
                    || formRun.args().menuItemName() == menuitemdisplaystr(AgreementViewSalesAgreement_RU)
                    // </GEERU>
                )
                {
                    purchAgreementHeader = formRun.args().record() as PurchAgreementHeader;
                    dataSource = SysQuery::findOrCreateDataSource(_agreementHeader_ds.query(), tablenum(SalesAgreementHeader));

                    dataSource.clearDynalinks();
                    range = SysQuery::findOrCreateRange(dataSource, fieldnum(SalesAgreementHeader, RecId));
                    // <GEERU>
                    if (formRun.args().menuItemName() == menuitemdisplaystr(AgreementViewSalesAgreement_RU))
                    {
                        range.value(queryValue(purchAgreementHeader.salesAgreementHeader_RU().RecId));
                    }
                    else
                    {
                    // </GEERU>
                        range.value(queryValue(purchAgreementHeader.salesAgreementHeader().RecId));
                    // <GEERU>
                    }
                    // </GEERU>
                    range.status(RangeStatus::Locked);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRangesFromProject</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the form data source and ranges based on the project.
    /// </summary>
    /// <param name="_agreementHeaderDefault_ds">
    ///    A reference to the data source of the <c>AgreementHeaderDefault</c> form.
    /// </param>
    public void initRangesFromProject(FormDataSource   _agreementHeaderDefault_ds)
    {
        QueryBuildDataSource    dataSource;
        QueryBuildRange         range;

        // Change the join mode to enable filtering (inner join) making only agreements with project ID displayed by the form...
        dataSource = SysQuery::findOrCreateDataSource(_agreementHeaderDefault_ds.query(), tablenum(AgreementHeaderDefault));
        dataSource.joinMode(JoinMode::InnerJoin);

        // Set up a ranges (to display only agreements with non-empty project values) and make them locked to avoid etiting by user.
        range = SysQuery::findOrCreateRange(dataSource, fieldnum(AgreementHeaderDefault, Project));
        range.status(RangeStatus::Locked);
        range.value(SysQuery::valueNotEmptyString());

        range = SysQuery::findOrCreateRange(dataSource, fieldnum(AgreementHeaderDefault, ProjectDataAreaId));
        range.status(RangeStatus::Locked);
        range.value(SysQuery::value(appl.company().dataArea(tablenum(ProjTable))));

        // Make Project field mandatory for the DS records
        if (    formRun.args().menuItemName() == menuitemdisplaystr(ProjPurchAgreement)
            ||  formRun.args().menuItemName() == menuitemdisplaystr(ProjSalesAgreement))
        {
            // When not called from LP's New action...
            _agreementHeaderDefault_ds.object(fieldnum(AgreementHeaderDefault, Project)).mandatory(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupMiscChargeGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs a custom lookup on the miscellaneous charge groups, by filtering on the given module.
    /// </summary>
    /// <param name="_formControl">
    ///    An instance of the <c>FormControl</c> class to use to filter and to which to present the selected
    ///    value.
    /// </param>
    /// <param name="_module">
    ///    A <c>MarkupModule</c> enumeration value that indicates the module for which the miscellaneous
    ///    charge groups should be filtered.
    /// </param>
    public void lookupMiscChargeGroup(FormControl  _formControl,
                                      MarkupModule _module)
    {
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;
        SysTableLookup          sysTableLookup;

        // Create an instance of SysTableLookup with the form control passed in
        sysTableLookup = SysTableLookup::newParameters(tablenum(MarkupGroup), _formControl, true);

        // Add the fields to be shown in the lookup form
        sysTableLookup.addLookupfield(fieldnum(MarkupGroup, GroupId), true);
        sysTableLookup.addLookupfield(fieldnum(MarkupGroup, Txt), false);

        // Create the query datasource
        queryBuildDataSource = query.addDataSource(tablenum(MarkupGroup));
        queryBuildRange = queryBuildDataSource.addRange(fieldnum(MarkupGroup, Module));
        queryBuildRange.value(queryValue(_module));

        // Add the query to the lookup form
        sysTableLookup.parmQuery(query);

        // Perform lookup
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        isProject = (isConfigurationkeyEnabled(configurationKeyNum(Project)) ? true : false);
        // <GEERU>
        countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqFormHandlerAgreementId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the number sequence form handler.
    /// </summary>
    /// <param name="_agreementHeader_ds">
    ///    The data source for which the number sequence handler is needed.
    /// </param>
    /// <returns>
    ///    The number sequence form handler.
    /// </returns>
    /// <remarks>
    ///    The handler that is used to manage the number sequence values for the <c>NumberSequence</c> fields
    ///    of the subclass tablesFor more information, see <see cref="formMethodDataSourceCreate Method" />,
    ///    <see cref="formMethodDataSourceDelete Method" />, <see cref="formMethodDataSourceLinkActive Method"
    ///    />, <see cref="formMethodDataSourceValidateWrite Method" />, <see cref="formMethodDataSourceWrite
    ///    Method" />.
    /// </remarks>
    abstract protected NumberSeqFormHandler numberSeqFormHandlerAgreementId(FormDataSource _agreementHeader_ds)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>openDocumentHandling</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the opening of the document handling form.
    /// </summary>
    /// <param name="_common">
    ///    The record that holds the document reference.
    /// </param>
    public void openDocumentHandling(Common     _common)
    {
        FormRun         docuFormRun;
        Args            args = new Args();

        args.name(formstr(DocuView));
        args.caller(formRun);
        args.record(_common);

        docuFormRun = classfactory.formRunClass(args);

        if (docuFormRun)
        {
            docuFormRun.init();
            docuFormRun.run();
            docuFormRun.detach();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultCommitmentType</Name>
				<Source><![CDATA[
    public CommitmentType parmDefaultCommitmentType(CommitmentType _defaultCommitmentType = defaultCommitmentType)
    {
        defaultCommitmentType = _defaultCommitmentType;
        return defaultCommitmentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormRun</Name>
				<Source><![CDATA[
    public FormRun parmFormRun(FormRun _formRun = formRun)
    {
        formRun = _formRun;
        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHeaderDefaultDimensionEntryControl</Name>
				<Source><![CDATA[
    public DimensionEntryControl parmHeaderDefaultDimensionEntryControl(DimensionEntryControl _headerDefaultDimensionEntryControl = headerDefaultDimensionEntryControl)
    {
        headerDefaultDimensionEntryControl = _headerDefaultDimensionEntryControl;

        return headerDefaultDimensionEntryControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshHeaderDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes default dimension control to show updated values.
    /// </summary>
    public void refreshHeaderDefaultDimension()
    {
        if (headerDefaultDimensionEntryControl)
        {
            headerDefaultDimensionEntryControl.loadAttributeValueSet(headerDefaultDimensionEntryControl.saveAttributeValueSet());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>relationType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the relation type of the <c>AgreementHeader</c> object.
    /// </summary>
    /// <returns>
    ///    The relation type of the <c>AgreementHeader</c> object.
    /// </returns>
    abstract public relationType relationType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveSysLastValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the variable values for the current user in the form.
    /// </summary>
    public void saveSysLastValue()
    {
        xSysLastValue::putValue([#CurrentList], curext(), curuserid(), UtilElementType::Form, formRun.name());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRangesForDynalinkActive</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets values for the project-related ranges by using the active record of the caller.
    /// </summary>
    /// <param name="_agreementHeaderDefault_ds">
    ///    A handle to the <c>AgreementHeaderDefault</c> data source of the form.
    /// </param>
    /// <remarks>
    ///    This method is called from the link active data sources methods of the <c>Agreement</c> forms.
    /// </remarks>
    public void setRangesForDynalinkActive(FormDataSource _agreementHeaderDefault_ds)
    {
        QueryBuildDataSource    dataSource;
        QueryBuildRange         range;

        ProjTable               projTable;
        ProjWIPTable            projWIPTable;
        ProjInvoiceTable        projInvoiceTable;
        str                     rangeValueString;

        switch (formRun.args().dataset())
        {
            case tablenum(ProjTable):
                // Cast record...
                projTable = formRun.args().record() as ProjTable;

                // Identify proper range...
                dataSource = _agreementHeaderDefault_ds.query().dataSourceTable(tablenum(AgreementHeaderDefault));
                if (dataSource)
                {
                    range = dataSource.rangeField(fieldnum(AgreementHeaderDefault, Project));
                }
                // Format range value string...
                if (range)
                {
                    rangeValueString = projTable.ProjId;
                    rangeValueString = rangeValueString + #WildCard;
                }
                break;

            case tablenum(ProjWIPTable):
                // Cast record...
                projWIPTable = formRun.args().record() as ProjWIPTable;

                // Identify proper range...
                dataSource = _agreementHeaderDefault_ds.query().dataSourceTable(tablenum(AgreementHeaderDefault));
                if (dataSource)
                {
                    range = dataSource.rangeField(fieldnum(AgreementHeaderDefault, Project));
                }
                // Format range value string...
                if (range)
                {
                    // Probably need to separate selected children from non-selected ones.
                    rangeValueString = projWIPTable.ProjId + #WildCard;
                }
                break;

            case tablenum (ProjInvoiceTable):
                // Cast record...
                projInvoiceTable = formRun.args().record() as ProjInvoiceTable;

                // Identify proper range...
                dataSource = _agreementHeaderDefault_ds.query().dataSourceTable(tablenum(ProjTable));
                if (dataSource)
                {
                    range = dataSource.rangeField(fieldnum(ProjTable, ProjInvoiceProjId));
                }
                // Format range value string...
                if (range)
                {
                    rangeValueString = projInvoiceTable.ProjInvoiceProjId;
                }
        }

        // As rangeValueString is always set only when range is not null - no need to check for range existance here!
        if (rangeValueString)
        {
            range.value(rangeValueString);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllowEdit</Name>
				<Source><![CDATA[
    protected void setAllowEdit(FormDataSource _dataSource, FieldId _fieldId, boolean _allowEdit)
    {
        FormDataObject formDataObject = _dataSource.object(_fieldId);
        formDataObject.allowEdit(_allowEdit);
        formDataObject.skip(!_allowEdit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllowEditAndMandatory</Name>
				<Source><![CDATA[
    protected void setAllowEditAndMandatory(FormDataSource _dataSource, FieldId _fieldId, boolean _allowEdit)
    {
        FormDataObject formDataObject = _dataSource.object(_fieldId);
        formDataObject.allowEdit(_allowEdit);
        formDataObject.skip(!_allowEdit);
        formDataObject.mandatory(_allowEdit);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>