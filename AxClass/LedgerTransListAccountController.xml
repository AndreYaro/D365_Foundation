<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransListAccountController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerTransListAccountController</c> class is the controller class for the
/// <c>LedgerTransListAccount</c> report.
/// </summary>
class LedgerTransListAccountController extends SrsReportRunController implements BatchRetryable
{
    private date userPreferredCurrentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets default parameter values before the user is prompted for input.
    /// </summary>
    protected void prePromptModifyContract()
    {
        LedgerTransListAccountContract ledgerTransListAccountContract = this.parmReportContract().parmRdpContract() as LedgerTransListAccountContract;

        if (!ledgerTransListAccountContract.parmFromDate())
        {
            // Provide a default date because the last value is empty.
            ledgerTransListAccountContract.parmFromDate(this.getPrePromptFromDateValue());
        }

        if (!ledgerTransListAccountContract.parmToDate())
        {
            // Provide a default date because the last value is empty.
            ledgerTransListAccountContract.parmToDate(this.getPrePromptToDateValue());
        }

        if (args.menuItemName() == menuItemOutputStr(LedgerTransListAccountCust))
        {
            QueryBuildRange journalCategoryRange = SysQuery::findOrCreateRange(this.getFirstQuery().dataSourceTable(tableNum(GeneralJournalEntry)), fieldNum(GeneralJournalEntry, JournalCategory));
            journalCategoryRange.value(SysQuery::value(LedgerTransType::Sales));
        }
        else if (args.menuItemName() == menuItemOutputStr(LedgerTransListAccountVend))
        {
            QueryBuildRange journalCategoryRange = SysQuery::findOrCreateRange(this.getFirstQuery().dataSourceTable(tableNum(GeneralJournalEntry)), fieldNum(GeneralJournalEntry, JournalCategory));
            journalCategoryRange.value(SysQuery::value(LedgerTransType::Purch));
        }

        LedgerTransListAccountContract contract = this.parmReportContract().parmRdpContract() as LedgerTransListAccountContract;
        MenuFunction menuItem = new MenuFunction(args.menuItemName(), MenuItemType::Output);

        contract.parmReportTitle(menuItem.label());
        this.getFirstQuery().title(menuItem.label());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrePromptFromDateValue</Name>
				<Source><![CDATA[
    private TransDate getPrePromptFromDateValue()
    {
		// Get the default value for the From date to the first day of the current fiscal period.
		return FiscalCalendars::findFirstDayOfMonth(Ledger::fiscalCalendar(), userPreferredCurrentDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrePromptToDateValue</Name>
				<Source><![CDATA[
    private TransDate getPrePromptToDateValue()
    {
		// Get the default value for the To date to the last day of the current fiscal period.
		return FiscalCalendars::findLastDayOfMonth(Ledger::fiscalCalendar(), userPreferredCurrentDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the report contract before a report is run.
    /// </summary>
    protected void preRunModifyContract()
    {
        // <GEEPL>
        #ISOCountryRegionCodes
        // </GEEPL>

        LedgerTransListAccountContract  contract;

        contract = this.parmReportContract().parmRdpContract() as LedgerTransListAccountContract;

        // <GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            contract.parmSysVersion(SysReportRun::sysVersion());
            contract.parmUserName(SysReportRun::userName());
            contract.parmDisplayDescription(true);
        }
        else
        {
            contract.parmDisplayDescription(false);
        }
        // </GEEPL>

        // if we are printing the tax information and InterCompany is enabled, we need to display the Company for ledger accounts on the report
        contract.parmDisplayCompanyForLedgerAccount(contract.parmTaxSpecification() && isConfigurationkeyEnabled(configurationKeyNum(LedgerAdvIntercompanyAccounting)));

        if (contract.parmSummaryOnly())
        {
            this.parmReportContract().parmReportName(ssrsReportStr(LedgerTransListAccount, Summary));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        LedgerTransListAccountController controller = new LedgerTransListAccountController();

        // use a default name, it may be changed before running the report
        controller.parmReportName(ssrsReportStr(LedgerTransListAccount, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    protected identifierName lastValueDesignName()
    {
        // Since the same report is called from 3 different menu items and we don't want the saved values to collide, we will use
        // the menu item name as a unique identifier for storing the saved values.
        return args.menuItemName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>