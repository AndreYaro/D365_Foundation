<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdReversePost_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxWithholdReversePost_IN</c> class is used to post the tax withhold reverse data.
/// </summary>
class TaxWithholdReversePost_IN extends TaxWithholdPost_IN
{
    LedgerJournalTransTxt   transTxt;
    RefTableId              reverseTaxTableId;
    RefRecId                reverseTaxRecId;
    LedgerJournalId         reverseTaxJournalId;
    TaxModuleType           source;
    boolean                 sourceSet;
    boolean                 sourceAmountCurSet;
    AmountCur               sourceAmountCur;
    RefTableId              restrictionSourceTableId;
    RefRecId                restrictionSourceRecId;
    LedgerVoucher           temporaryLedgerPostingJournal;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAndInsertTaxes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and inserts taxes.
    /// </summary>
    /// <param name="_originalvoucher">
    /// The original voucher informaiton.
    /// </param>
    /// <param name="_originalTransDate">
    /// The original transaciton date.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxAmountCur</c> class.
    /// </returns>
    protected TaxAmountCur calcAndInsertTaxes(Voucher   _originalvoucher,
                                           TransDate _originalTransDate)
    {
        TaxAmountCur                taxAmountCur;
        TaxWithholdTrans_IN         taxWithholdTrans;

        ttsbegin;

        while select * from taxWithholdTrans
            where taxWithholdTrans.Voucher             == _originalvoucher   &&
                    taxWithholdTrans.TransDate         == _originalTransDate &&
                    (taxWithholdTrans.Exempt           == NoYes::No) &&

                    (restrictionSourceRecId       == 0 ||
                    (taxWithholdTrans.SourceTableId       == restrictionSourceTableId &&
                     taxWithholdTrans.SourceRecId         == restrictionSourceRecId)) &&

                    (reverseTaxJournalId          == '' ||
                     taxWithholdTrans.JournalNum          == reverseTaxJournalId)

        {
            sourceCurrencyCode = taxWithholdTrans.CurrencyCode;

            if (!headingRecId)
            {
                headingRecId = taxWithholdTrans.HeadingRecId;
            }
            if (!headingTableId)
            {
                headingTableId = taxWithholdTrans.HeadingTableId;
            }

            taxWithholdWorkTrans.clear();
            taxWithholdWorkTrans.HeadingRecId  = headingRecId;
            taxWithholdWorkTrans.SourceTableId = this.sourceTableId();
            taxWithholdWorkTrans.SourceRecId   = this.sourceRecId();

            taxWithholdWorkTrans.TaxWithholdCode     = taxWithholdTrans.TaxWithholdCode;
            taxWithholdWorkTrans.TaxWithholdGroup    = taxWithholdTrans.TaxWithholdGroup;
            taxWithholdWorkTrans.TaxWithholdType     = TaxWithhold_IN::TaxWithholdCodeType2TaxWithholdType(taxWithholdTrans.TaxType);
            taxWithholdWorkTrans.TaxWithholdValue    = taxWithholdTrans.TaxWithholdValue;

            if (sourceSet)
            {
                taxWithholdWorkTrans.Source = source;
            }
            else
            {
                taxWithholdWorkTrans.Source = taxWithholdTrans.Source;
            }

            taxWithholdWorkTrans.Voucher                    = voucher;
            taxWithholdWorkTrans.CalculationDate            = taxDate;
            taxWithholdWorkTrans.SourceCurrencyCode         = sourceCurrencyCode;
            // company currency
            taxWithholdWorkTrans.TaxAmount                  = -taxWithholdTrans.TaxWithholdAmount;
            taxWithholdWorkTrans.TaxBaseAmount              = taxWithholdTrans.TaxWithholdAmountOrigin;
            // tax currency
            taxWithholdWorkTrans.TaxAmountCur               = -taxWithholdTrans.TaxTaxWithholdAmount;
            taxWithholdWorkTrans.TaxBaseAmountCur           = -taxWithholdTrans.TaxWithholdBaseAmountCur;
            // transaction currency
            taxWithholdWorkTrans.SourceTaxAmountCur         = -taxWithholdTrans.TaxWithholdAmountCur;
            taxWithholdWorkTrans.SourceBaseAmountCur        = taxWithholdTrans.TaxWithholdBaseAmountCur;
            taxWithholdWorkTrans.SourceRegulateAmountCur    = -taxWithholdTrans.AdjustedTaxWithholdAmount;
            taxWithholdWorkTrans.SourceBaseAmountCurRegulated = taxWithholdTrans.AdjustedBaseAmount;

            taxWithholdWorkTrans.RateOfDeduction               = taxWithholdTrans.RateOfDeduction;
            taxWithholdWorkTrans.ExemptTax                     = taxWithholdTrans.Exempt;
            taxWithholdWorkTrans.HeadingTableId                = taxWithholdTrans.HeadingTableId;
            taxWithholdWorkTrans.SourceDocumentLine            = taxWithholdTrans.SourceDocumentLine;
            taxWithholdWorkTrans.LedgerDimensionDefaultAccount = taxWithholdTrans.LedgerDimension;
            taxWithholdWorkTrans.TaxAutogenerated              = NoYes::Yes;
            taxWithholdWorkTrans.AdvancePayment                = taxWithholdTrans.AdvancePayment;
            taxWithholdWorkTrans.AmountOriginMST               = taxWithholdTrans.AmountOriginMST;
            taxWithholdWorkTrans.CompanyAccount                = curext();

            if (FeatureStateProvider::isFeatureEnabled(TaxWithholdCustomerThresholdBasedOnPaymentOnlyFeature::instance()))
            {
                taxWithholdWorkTrans.IsTaxInterim = taxWithholdTrans.IsTaxInterim;
            }
            taxWithholdWorkTrans.insert();

            taxAmountCur += this.taxAmount(taxWithholdWorkTrans);
        }

        ttscommit;

        return taxAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAndPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and post the instance of the <c>TaxWithholdReversePost_IN</c> class.
    /// </summary>
    /// <param name="_ledgerPostingController">
    /// The ledger posting controller.
    /// </param>
    /// <param name="_originalVoucher">
    /// The original voucher information.
    /// </param>
    /// <param name="_originalTransDate">
    /// The original transaction date.
    /// </param>
    /// <param name="_postTaxes">
    /// The post taxes.
    /// </param>
    /// <returns>
    /// The instance of the <c>AmountCur</c> class.
    /// </returns>
    public AmountCur calcAndPost(
        LedgerPostingController _ledgerPostingController,
        Voucher                 _originalVoucher,
        TransDate               _originalTransDate,
        boolean                 _postTaxes = true)
    {
        AmountCur amountCur;

        if (_ledgerPostingController.getJournal() == null)
        {
            throw error(Error::missingParameter(this));
        }

        temporaryLedgerPostingJournal = _ledgerPostingController.getJournal();

        amountCur = this.calcAndInsertTaxes(_originalVoucher, _originalTransDate);

        if (_postTaxes)
        {
            this.saveAndPostWHT(_ledgerPostingController);
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of the <c>TaxWithholdReversePost_IN</c> class.
    /// </summary>
    /// <param name="_voucher">
    /// The voucher information.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <param name="_txt">
    /// The ledger journal transaction txt.
    /// </param>
    /// <param name="_headingTableId">
    /// The ledger journal tableId.
    /// </param>
    /// <param name="_headingRecId">
    /// The ledger journal table recId.
    /// </param>
    void new(Voucher                _voucher,
             TransDate              _transDate,
             LedgerJournalTransTxt  _txt,
             RefTableId             _headingTableId = 0,
             RefRecId               _headingRecId = 0)
    {
        voucher         = _voucher;
        taxDate         = _transDate;
        transTxt        = _txt;
        sourceSet       = false;
        headingTableId  = _headingTableId;
        headingRecId    = _headingRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseTaxOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the enumeration value <c>Tax</c>, from the enumerated type <c>TaxOrigin</c>.
    /// </summary>
    /// <returns>
    ///    The value <c>TaxOrigin::Tax</c>.
    /// </returns>
    TaxOrigin reverseTaxOrigin()
    {
        return TaxOrigin::Tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReverseRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the reverse rec id.
    /// </summary>
    /// <param name="_reverseTaxRecId">
    /// The reverse tax rec id.
    /// </param>
    public void setReverseRecId(recId _reverseTaxRecId)
    {
        reverseTaxRecId = _reverseTaxRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReverseTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the reverse tax table id.
    /// </summary>
    /// <param name="_reverseTaxTableId">
    /// The reverse tax table id.
    /// </param>
    public void setReverseTableId(RefTableId    _reverseTaxTableId)
    {
        reverseTaxTableId = _reverseTaxTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates the value of the source field on the <c>TaxWithholdTrans_IN</c> record when the reversal is posted.
    /// </summary>
    /// <param name="_source">
    ///    The value of the <c>TaxModuleType</c> field.
    /// </param>
    /// <remarks>
    ///    By default, if this method is not used then the default value will be the same value as the
    ///    <c>TaxWithholdTrans_IN</c> record that is reversed.
    /// </remarks>
    public void setSource(TaxModuleType _source)
    {
        source = _source;
        sourceSet = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    public recId sourceRecId()
    {
        return reverseTaxRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    public RefTableId sourceTableId()
    {
        return reverseTaxTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax amount information.
    /// </summary>
    /// <param name="_tmpTaxWithholdWorkTrans">
    /// The temporary tax withhold work transaction.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxAmount</c> class.
    /// </returns>
    protected TaxAmount taxAmount(TmpTaxWithholdWorkTrans_IN _tmpTaxWithholdWorkTrans)
    {
        TaxAmountCur   taxAmount;

        if (!_tmpTaxWithholdWorkTrans.TaxAutogenerated)
        {
            taxAmount = _tmpTaxWithholdWorkTrans.SourceRegulateAmountCur;
        }
        else
        {
            taxAmount = _tmpTaxWithholdWorkTrans.SourceTaxAmountCur;
        }

        return taxAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>