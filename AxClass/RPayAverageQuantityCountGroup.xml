<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayAverageQuantityCountGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class is responsible for headcount calculation.
/// </summary>
class RPayAverageQuantityCountGroup
{
    RPayGroup               payGroup;
    ReportPeriod_RU         payPeriod;
    ReportPeriod_RU         reportPeriod;

    RPayTimeGroupCode       presenseTimeGroup;
    RPayCalendarId          calendarFiveDays;
    RPayDayHour             hourFiveDays;
    Filename                logFileName;
    CommaStreamIo                 file;

    SysOperationProgress    sysOperationProgress;

    #AviFiles
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>countQuantity</Name>
				<Source><![CDATA[
/// <summary>
    /// Calculates headcount.
    /// </summary>
    /// <returns>
    /// The headcount value.
    /// </returns>
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public RPayAverageQty countQuantity()
    {
        RPayAverageQty      resultQty;
        RPayGroupMember     rPayGroupMember;
        RPayGroupTable      groupTable = rPayGroupTable::find(payGroup);
        RHRMEmplTable       emplTable;
        RHRMPersonTable     personTable;

        void addQty(RHRMPersonTable _personTable)
        {
            this.updateProgress(_personTable.fio());

            resultQty += this.countQuantityPerson(_personTable.RecId);
        }

        select count(RecId) from rPayGroupMember
            where rPayGroupMember.PayGroup == payGroup
               && (rPayGroupMember.FromDate <= payPeriod || ! rPayGroupMember.FromDate)
               && (rPayGroupMember.ToDate   >= dateStartMth(payPeriod) || ! rPayGroupMember.ToDate);
        sysOperationProgress.setTotal(rPayGroupMember.RecId);

        if (groupTable.Type == RPayGroupType::Person)
        {
            while select PersonEmplId from rPayGroupMember
                where rPayGroupMember.PayGroup == payGroup
                   && (rPayGroupMember.FromDate <= payPeriod || ! rPayGroupMember.FromDate)
                   && (rPayGroupMember.ToDate   >= dateStartMth(payPeriod) || ! rPayGroupMember.ToDate)
            join personTable
                where personTable.PersonnelNumber == rPayGroupMember.PersonEmplId
            {
                addQty(personTable);
            }
        }
        else if (groupTable.Type == RPayGroupType::Employee)
        {
            while select PersonEmplId from rPayGroupMember
                where rPayGroupMember.PayGroup == payGroup
                   && (rPayGroupMember.FromDate <= payPeriod || ! rPayGroupMember.FromDate)
                   && (rPayGroupMember.ToDate   >= dateStartMth(payPeriod) || ! rPayGroupMember.ToDate)
                 join emplTable group by RHRMPersonTable
                    where emplTable.EmployeeId == rPayGroupMember.PersonEmplId
            {
                personTable = RHRMPersonTable::findRecId(emplTable.RHRMPersonTable);
                addQty(personTable);
            }
        }

        return resultQty;
    }
]]></Source>
			</Method>
			<Method>
				<Name>countQuantityEmplByCivilContract</Name>
				<Source><![CDATA[
/// <summary>
    /// Calculate a value of the average number of employee based on civil contracts.
    /// </summary>
    /// <param name="_emplId">
    /// The employee number.
    /// </param>
    /// <returns>
    /// The value of the average number of employee based on civil contracts.
    /// </returns>
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
protected RPayAverageQty countQuantityEmplByCivilContract(RHRMEmplId  _emplId)
    {
        #RPayTblConstants

        RPayCivilContract       rPayCivilContract;

        Days                    periodDaysQty = dayOfMth(payPeriod);
        int                     daysOfPeriod[#MaxDaysPerMonth];
        ArrayIdx                dayIdx;

        StartDate               startDate;
        EndDate                 endDate;

        RPayAverageQty          averageQty;

        while select StartDate, EndDate, ContractDate from  rPayCivilContract
            order by StartDate
            where rPayCivilContract.EmplId == _emplId
               && ((rPayCivilContract.StartDate   && rPayCivilContract.StartDate    <= endMth(payPeriod))
               ||  (! rPayCivilContract.StartDate && rPayCivilContract.ContractDate <= endMth(payPeriod)))
               && ((rPayCivilContract.EndDate     && rPayCivilContract.EndDate      >= dateStartMth(payPeriod))
               ||  (! rPayCivilContract.EndDate   && rPayCivilContract.ContractDate >= dateStartMth(payPeriod)))
        {
            startDate = max(rPayCivilContract.StartDate ? rPayCivilContract.StartDate : rPayCivilContract.ContractDate, dateStartMth(payPeriod));
            endDate   = min(rPayCivilContract.EndDate   ? rPayCivilContract.EndDate   : rPayCivilContract.ContractDate, endMth(payPeriod));

            if (startDate <= endDate)
            {
                for (dayIdx = dayOfMth(startDate); dayIdx <= dayOfMth(endDate); dayIdx++)
                {
                    daysOfPeriod[dayIdx] = 1;
                }
            }
        }

        for (dayIdx = 1; dayIdx <= periodDaysQty; dayIdx++)
        {
            averageQty += daysOfPeriod[dayIdx];
        }

        averageQty = decRound(averageQty / periodDaysQty, 2);

        return averageQty <= 1 ? averageQty : 1;
    }
]]></Source>
			</Method>
			<Method>
				<Name>countQuantityEmplByTbl</Name>
				<Source><![CDATA[
/// <summary>
    /// Calculate a value of the average number of employee based on timesheet.
    /// </summary>
    /// <param name="_emplId">
    /// The employee number.
    /// </param>
    /// <returns>
    /// The value of the average number of employee based on timesheet.
    /// </returns>
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
protected RPayAverageQty countQuantityEmplByTbl(RHRMEmplId  _emplId)
    {
        RPayTblTrans            rPayTblTrans;
        RPayTblJournal          rPayTblJournal;
        RPayTblDayHourTrans     rPayTblDayHourTrans;
        RPayHistory             rPayHistoryDismiss;
        RHRMEmploymentFactor    employmentFactor;
        RPayDayHour             realHour, realDays, realHourSum, calendarHour, calendarDays, calendarHourSum;
        RPayAverageQty          averageQty;
        container               emplRateInterval;
        int                     i;
        TransDate               rateStartDate, rateEndDate;
        QueryRun                everyDayQueryRun;

        if ( !RHRMEmplTable::find(_emplId).EmploymentFactorRate)
        {
            return 0;
        }

        emplRateInterval = this.valuePerPeriod(RPayRateCallContext::construct(payPeriod, _emplId), RHRMEmplTable::find(_emplId).EmploymentFactorRate);

        rPayHistoryDismiss = RPayHistory::findLastOperation(_emplId, RHRMJournalType::Dismiss, payPeriod);

        for (i = 1; i <= conlen(emplRateInterval); i++)
        {
            [rateStartDate, rateEndDate, employmentFactor] = conpeek(emplRateInterval, i);

            everyDayQueryRun = new QueryRun(this.getEveryDayTblQuery(_emplId, payPeriod, presenseTimeGroup));

            while (everyDayQueryRun.next())
            {
                rPayTblDayHourTrans = everyDayQueryRun.get(tablenum(RPayTblDayHourTrans));
                rPayTblTrans = everyDayQueryRun.get(tablenum(RPayTblTrans));

                    if (employmentFactor >= 1)
                    {
                    if (rPayHistoryDismiss &&
                        rateStartDate   <= rPayHistoryDismiss.StartDate &&
                        rateEndDate     >= rPayHistoryDismiss.StartDate)
                    {
                        rateEndDate = rPayHistoryDismiss.StartDate;
                    }

                    realDays = this.getDayGroup(rPayTblDayHourTrans, rPayTblTrans.PayCalendarId, _emplId, rateStartDate, rateEndDate);
                    calendarDays = dayofmth(payPeriod);
                    averageQty += calendarDays ? (realDays / calendarDays) : 0;
                    }
                    else
                    {
                    realHour = this.getDayHourGroup(rPayTblDayHourTrans, rateStartDate, rateEndDate);
                        calendarHour = hourFiveDays;
                    averageQty += calendarHour ? (realHour / calendarHour) : 0;
                }
                    }

            while select rPayTblTrans
                where rPayTblTrans.EmplId       == _emplId &&
                      rPayTblTrans.SourceDate   == payPeriod
            join PayTblType from rPayTblJournal
                where rPayTblJournal.TblNum     == rPayTblTrans.PayTblNum &&
                      rPayTblJournal.TblDate    <= reportPeriod &&
                      rPayTblJournal.PayTblType == RPayTblType::Itog
                {
                    realHourSum = rPayTblTrans.transDayHourGroup(RPayDayHourCalc::Hour, presenseTimeGroup);

                    if (employmentFactor >= 1)
                    {
                        calendarHourSum = RPayCalendarTable::mthWorkHoursTimeGroup(rPayTblTrans.PayCalendarId, payPeriod, presenseTimeGroup);
                    }
                    else
                    {
                        calendarHourSum = hourFiveDays;
                    }

                    averageQty += calendarHourSum ? (realHourSum / calendarHourSum * (rateEndDate - rateStartDate + 1) / dayofmth(payPeriod)) : 0;
                }
            }

        return averageQty <= 1 ? averageQty : 1;
    }
]]></Source>
			</Method>
			<Method>
				<Name>countQuantityPerson</Name>
				<Source><![CDATA[
/// <summary>
    /// Calculate a value of the average number of specified person.
    /// </summary>
    /// <param name="_personTableId">
    /// The reference to the <c>RHRMPersonTable</c> table.
    /// </param>
    /// <returns>
    /// The value of the average number of specified person.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAverageQty countQuantityPerson(RefRecId _personTableId)
    {
        RPayAverageQty      averageQtyByPers;
        RPayGroupMember     rPayGroupMember;
        RHRMEmplTable       emplTable;
        RPayGroupTable      groupTable = rPayGroupTable::find(payGroup);
        RHRMPersonnelNumberId   personNum;
        RHRMPersonTable     persTable = RHRMPersonTable::findRecId(_personTableId);

        if (groupTable.Type == RPayGroupType::Employee)
        {
            while select EmployeeId from emplTable
                where emplTable.RHRMPersonTable  == _personTableId
                   && emplTable.SortOfWork       == RHRMSortOfWork::Direct
                exists join rPayGroupMember
                    where rPayGroupMember.PersonEmplId   == emplTable.EmployeeId
                       && rPayGroupMember.PayGroup == payGroup
            {
                averageQtyByPers += this.countQuantityEmplByTbl(emplTable.EmployeeId);
            }
        }
        else if (groupTable.Type == RPayGroupType::Person)
        {
            personNum = RHRMPersonTable::findRecId(_personTableId).PersonnelNumber;
            while select EmployeeId from emplTable
                where emplTable.RHRMPersonTable  == _personTableId
                   && emplTable.SortOfWork       == RHRMSortOfWork::Direct
                exists join rPayGroupMember
                    where rPayGroupMember.PersonEmplId   == personNum
                       && rPayGroupMember.PayGroup == payGroup
            {
                averageQtyByPers += this.countQuantityEmplByTbl(emplTable.EmployeeId);
            }
        }

        if (! averageQtyByPers)
        {
            averageQtyByPers += this.countQuantityEmplByCivilContract(RHRMPersonTable::findRecId(_personTableId).PayMainEmplId);
        }

        this.writeLog(strfmt('%1\t%2\t"%3"\t%4\t"%5"\t%6\t(%7)',
            payPeriod, reportPeriod, groupTable.Name, persTable.PayMainEmplId, persTable.fio(), averageQtyByPers < 1 ? averageQtyByPers : 1, averageQtyByPers));

        return averageQtyByPers < 1 ? averageQtyByPers : 1;
    }
]]></Source>
			</Method>
			<Method>
				<Name>createLogFile</Name>
				<Source><![CDATA[
/// <summary>
    /// Creates a log file.
    /// </summary>
    /// <param name="_filename">
    /// The file name.
    /// </param>
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public void createLogFile(Filename _filename)
    {

        logFileName = _filename;

        file = TextStreamIo::constructForMode('A' /*, appendStream*/);
// TODO: Step 1: Uncomment the `appendStream` parameter.
//       You need to provide a System.IO.Stream variable to read and/or append data.
//       If you receive a file from user, use the following code before calling the construct:
//       System.IO.Stream appendStream = File::UseFileFromURL(File::GetFileFromUser());
// TODO: Step 2: Use `constructForAppend` instead of the `constructForMode`.
//       `constructForMode` is obsolete and must not be used after the migration is complete.
// TODO: Step 3: Use the following code when the writing is complete and file is ready to be sent back to the user:
//       File::SendFileToUser(appendStream, _filename);
    }
]]></Source>
			</Method>
			<Method>
				<Name>getDayHourGroup</Name>
				<Source><![CDATA[
/// <summary>
    /// Calculates total hours for specified <c>RPayTblDayHourTrans</c> table buffer within the date interval.
    /// </summary>
    /// <param name="_rPayTblDayHourTrans">
    /// The record of <c>RPayTblDayHourTrans</c> table.
    /// </param>
    /// <param name="_startDate">
    /// Start date.
    /// </param>
    /// <param name="_endDate">
    /// End date.
    /// </param>
    /// <returns>
    /// Total hours within the date interval.
    /// </returns>
#RpayTblConstants
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayTblDayHour getDayHourGroup(
        RPayTblDayHourTrans _rPayTblDayHourTrans,
                                          StartDate         _startDate,
                                          EndDate           _endDate)
    {
        fieldId                 fieldId;
        RPayTblDayHour          realHours;
        int                     i;

            for (i = dayofmth(_startDate); i <= dayofmth(_endDate); i++)
            {
                fieldId = fieldname2id(tablenum(RPayTblDayHourTrans),#DayHourTransFieldPrefix + int2str(i));
            realHours += _rPayTblDayHourTrans.(fieldId);
        }

        return realHours;
    }
]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
protected void new()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>valuePerPeriod</Name>
				<Source><![CDATA[
/// <summary>
    /// Determines the intervals of rate values.
    /// </summary>
    /// <param name="_context">
    /// The instance of <c>RPayRateCallContext</c> class.
    /// </param>
    /// <param name="_rateCode">
    /// The rate code.
    /// </param>
    /// <param name="_con">
    /// The container to append values.
    /// </param>
    /// <returns>
    /// The container of intervals of rate values.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container valuePerPeriod(RPayRateCallContext _context,
                                    RPayRateCode _rateCode,
                                    container _con = conNull())
    {
        TransDate startDate;

        RPayRateObj  rateObj = RPayRateObj::constructFromRateCode(_rateCode, _context);

        if ( !rateObj.isRateTransExists())
        {
            return [[dateStartMth(_context.parmRateDate()), _context.parmRateDate(), rateObj.value()]];
        }

        startDate = rateObj.appliedDate();

        if (startDate > dateStartMth(_context.parmRateDate()))
        {
            _con = this.valuePerPeriod(RPayRateCallContext::construct(startDate - 1, _context.parmEmployeeId()), _rateCode, _con);
        }

        startDate = startDate > dateStartMth(_context.parmRateDate()) ? startDate : dateStartMth(_context.parmRateDate());
        _con = conPoke(_con, conLen(_con) + 1, [startDate, _context.parmRateDate(), rateObj.value()]);

        return _con;
    }
]]></Source>
			</Method>
			<Method>
				<Name>writeLog</Name>
				<Source><![CDATA[
/// <summary>
    /// Writes data to file.
    /// </summary>
    /// <param name="_s">
    /// Data to write.
    /// </param>
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
protected void writeLog(str _s)
    {
        if (file)
        {
            file.write(_s);
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>getDayGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of non zero days specified in the <c>RPayTblDayHourTrans</c> table buffer.
    /// </summary>
    /// <param name="_rPayTblDayHourTrans">
    /// The record of the <c>RPayTblDayHourTrans</c> table.
    /// </param>
    /// <param name="_calendarId">
    /// The code of calendar.
    /// </param>
    /// <param name="_emplId">
    /// The employee number.
    /// </param>
    /// <param name="_startDate">
    /// Start date.
    /// </param>
    /// <param name="_endDate">
    /// End date.
    /// </param>
    /// <param name="_onlyLastDate">
    /// Consider only last date.
    /// </param>
    /// <returns>
    /// The number of non zero days.
    /// </returns>
    #RpayTblConstants
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayTblDayHour getDayGroup(
        RPayTblDayHourTrans _rPayTblDayHourTrans,
        RPayCalendarId      _calendarId,
        RHRMEmplId          _emplId,
        StartDate           _startDate,
        EndDate             _endDate,
        boolean             _onlyLastDate = false)
    {
        fieldId                 fieldId;
        RPayTblDayHour          realDays;
        int                     i;
        RPayTblDayHourTrans     rPayTblDayHourTrans;
        RPayTblTrans            rPayTblTrans;
        ReportPeriod_RU         prevPeriod;
        FromDate                prevFromDate;
        int                     days[31];
        QueryRun                everyDayQueryRun;

        for (i = dayofmth(_startDate); i <= dayofmth(_endDate); i++)
        {
            fieldId = fieldname2id(tablenum(RPayTblDayHourTrans), #DayHourTransFieldPrefix + int2str(i));
            days[i] = (_rPayTblDayHourTrans.(fieldId) > 0 || days[i]) ? 1 : 0;
        }

        for (i = dayofmth(_startDate); i <= dayofmth(_endDate); i++)
        {
            if (!days[i] && RPayCalendarDate::find(_calendarId, mkdate(i, mthofyr(_startDate), year(_startDate))).PayDayType == RPayDayType::Holiday)
            {
                if (i > 1)
                {
                    days[i] = days[i - 1];
                }
                else
                {
                    prevPeriod = endmth(prevmth(_startDate));
                    prevFromDate = this.getLastWorkDayCalendar(_calendarId, prevPeriod);

                    everyDayQueryRun = new QueryRun(this.getEveryDayTblQuery(_emplId, prevPeriod, presenseTimeGroup));

                    while (everyDayQueryRun.next())
                    {
                        rPayTblDayHourTrans = everyDayQueryRun.get(tablenum(RPayTblDayHourTrans));
                        rPayTblTrans = everyDayQueryRun.get(tablenum(RPayTblTrans));

                        days[i] = any2int(this.getDayGroup(rPayTblDayHourTrans, rPayTblTrans.PayCalendarId, _emplId, prevFromDate, prevPeriod, true));

                        if (days[i])
                        {
                            break;
                        }
                    }
                }
            }
        }

        if (_onlyLastDate)
        {
            realDays = days[dayofmth(_endDate)];
        }
        else
        {
            for (i = 1; i <= 31; i++)
            {
                realDays += days[i];
            }
        }

        return realDays;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getEveryDayTblQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the query of the every day timesheet.
    /// </summary>
    /// <param name="_emplId">
    /// Employee number.
    /// </param>
    /// <param name="_payPeriod">
    /// Calculation period.
    /// </param>
    /// <param name="_presenseTimeGroup">
    /// The code of time group.
    /// </param>
    /// <returns>
    /// Formed <c>Query</c> object.
    /// </returns>
    #RpayTblConstants
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Query getEveryDayTblQuery(
        RHRMEmplId          _emplId,
        ReportPeriod_RU     _payPeriod,
        RPayTimeGroupCode   _presenseTimeGroup)
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbdsRPayTblDayHourTrans, qbdsRPayTblTrans, qbdsRPayTimeGroupMember, qbdsRPayTblJournal;
        int                     i;
        FieldId                 fieldId;

        qbdsRPayTblDayHourTrans = query.addDataSource(tablenum(RPayTblDayHourTrans));
        qbdsRPayTblDayHourTrans.orderMode(OrderMode::GroupBy);

        for (i = 1; i <= 31; i++)
        {
            fieldId = fieldname2id(tablenum(RPayTblDayHourTrans), #DayHourTransFieldPrefix + int2str(i));
            qbdsRPayTblDayHourTrans.addSelectionField(fieldId, SelectionField::Sum);
        }

        qbdsRPayTblTrans = qbdsRPayTblDayHourTrans.addDataSource(tablenum(RPayTblTrans));
        qbdsRPayTblTrans.orderMode(OrderMode::GroupBy);
        qbdsRPayTblTrans.joinMode(JoinMode::InnerJoin);
        qbdsRPayTblTrans.fetchMode(QueryFetchMode::One2One);
        qbdsRPayTblTrans.addLink(fieldnum(RPayTblDayHourTrans, TblTransRecId), fieldnum(RPayTblTrans, RecId));
        qbdsRPayTblTrans.addSortField(fieldnum(RPayTblTrans, PayCalendarId));
        qbdsRPayTblTrans.addRange(fieldnum(RPayTblTrans, EmplId)).value(queryValue(_emplId));
        qbdsRPayTblTrans.addRange(fieldnum(RPayTblTrans, SourceDate)).value(queryValue(_payPeriod));

        qbdsRPayTimeGroupMember = qbdsRPayTblDayHourTrans.addDataSource(tablenum(RPayTimeGroupMember));
        qbdsRPayTimeGroupMember.joinMode(JoinMode::ExistsJoin);
        qbdsRPayTimeGroupMember.fetchMode(QueryFetchMode::One2One);
        qbdsRPayTimeGroupMember.addLink(fieldnum(RPayTblDayHourTrans, PayTblTimeCode), fieldnum(RPayTimeGroupMember, PayCalendarTimeCode));
        qbdsRPayTimeGroupMember.addRange(fieldnum(RPayTimeGroupMember, TimeGroup)).value(queryValue(_presenseTimeGroup));

        qbdsRPayTblJournal = qbdsRPayTblTrans.addDataSource(tablenum(RPayTblJournal));
        qbdsRPayTblJournal.joinMode(JoinMode::ExistsJoin);
        qbdsRPayTblJournal.fetchMode(QueryFetchMode::One2One);
        qbdsRPayTblJournal.addLink(fieldnum(RPayTblTrans, PayTblNum), fieldnum(RPayTblJournal, TblNum));
        qbdsRPayTblJournal.addRange(fieldnum(RPayTblJournal, PayTblType)).value(queryValue(RPayTblType::EveryDay));
        qbdsRPayTblJournal.addRange(fieldnum(RPayTblJournal, TblDate)).value(SysQuery::range(datenull(), reportPeriod));

        return query;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getLastWorkDayCalendar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the last work day for specified calendar.
    /// </summary>
    /// <param name="_payCalendarId">
    /// The code of calendar.
    /// </param>
    /// <param name="_transDate">
    /// Related date.
    /// </param>
    /// <returns>
    /// The last work day for specified calendar.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TransDate getLastWorkDayCalendar(RPayCalendarId _payCalendarId, TransDate _transDate)
    {
        RPayCalendarDate    payCalendarDate;
        TransDate           lastWorkDay;

        select firstonly TransDate from payCalendarDate
            order by TransDate desc
            where payCalendarDate.CalendarId == _payCalendarId &&
                  payCalendarDate.TransDate  <= _transDate &&
                  payCalendarDate.PayDayType == RPayDayType::WorkDay;

        if (payCalendarDate.TransDate)
        {
            lastWorkDay = payCalendarDate.TransDate;
        }
        else
        {
            lastWorkDay = _transDate;
        }

        if (mthofyr(lastWorkDay) < mthofyr(_transDate))
        {
            lastWorkDay = dateStartMth(_transDate);
        }

        return lastWorkDay;
    }
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes class parameters.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void init()
    {
        presenseTimeGroup = RPayTblParameters::find().PresenseTimeGroupCode;
        calendarFiveDays  = RPayCalendarTable::findCalendarType(RPayCalendarType::FiveDay).CalendarId;
        hourFiveDays      = RPayCalendarTable::mthWorkHoursTimeGroup(calendarFiveDays, payPeriod, presenseTimeGroup);

        sysOperationProgress = SysOperationProgress::newGeneral(#AviUpdate, "@GLS110795", 0);
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmPayGroup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayGroup parmPayGroup(RPayGroup _payGroup = payGroup)
    {
        payGroup = _payGroup;

        return payGroup;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmPayPeriod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ReportPeriod_RU parmPayPeriod(ReportPeriod_RU _payPeriod = payPeriod)
    {
        payPeriod = _payPeriod;

        return payPeriod;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmReportPeriod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ReportPeriod_RU parmReportPeriod(ReportPeriod_RU _reportPeriod = reportPeriod)
    {
        reportPeriod = _reportPeriod;

        return reportPeriod;
    }
]]></Source>
			</Method>
			<Method>
				<Name>setTotalProgress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets total for progress bar.
    /// </summary>
    /// <param name="_total">
    /// The number of steps.
    /// </param>
    /// <param name="_idx">
    /// The bar to set the number of steps for; optional. Use the parameter when using more than one bar.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setTotalProgress(int _total, int _idx = 1)
    {
        sysOperationProgress.setTotal(_total, _idx);
    }
]]></Source>
			</Method>
			<Method>
				<Name>updateProgress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a description of the process that is currently occurring.
    /// </summary>
    /// <param name="_text">
    /// The text that describes what is occurring.
    /// </param>
    /// <param name="_idx">
    /// The bar to set the text for; optional. Only should be used when you have more than one bar.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateProgress(str _text, int _idx = 1)
    {
        sysOperationProgress.setText(_text, _idx);
        sysOperationProgress.incCount(1, _idx);
    }
]]></Source>
			</Method>
			<Method>
				<Name>constructAverageQuantityCountGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the instance of the class <c>RPayAverageQuantityCountGroup</c> or <c>RPayAverageQuantityCountGroupByBranch</c>
    /// according to necessity separating data by branch.
    /// </summary>
    /// <param name="_payPeriod">
    /// Calculation period.
    /// </param>
    /// <param name="_payGroup">
    /// Payroll group.
    /// </param>
    /// <param name="_reportPeriod">
    /// Reporting period; optional.
    /// </param>
    /// <param name="_byBranches">
    /// Should data be separated by branch.
    /// </param>
    /// <returns>
    /// The instance of the class <c>RPayAverageQuantityCountGroup</c> or <c>RPayAverageQuantityCountGroupByBranch</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayAverageQuantityCountGroup constructAverageQuantityCountGroup(
        ReportPeriod_RU _payPeriod,
        RPayGroup       _payGroup,
        ReportPeriod_RU _reportPeriod = maxdate(),
        boolean         _byBranches = false)
    {
        RPayAverageQuantityCountGroup averageQuantityCountGroup;

        if (_byBranches)
        {
            averageQuantityCountGroup = RPayAverageQuantityCountGroupByBranch::newAverageQuantityCountGroupByBranch(_payPeriod, _payGroup, _reportPeriod);
        }
        else
        {
            averageQuantityCountGroup = RPayAverageQuantityCountGroup::newAverageQuantityCountGroup(_payPeriod, _payGroup, _reportPeriod);
        }

        return averageQuantityCountGroup;
    }
]]></Source>
			</Method>
			<Method>
				<Name>newAverageQuantityCountGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the instance of the class <c>RPayAverageQuantityCountGroup</c>.
    /// </summary>
    /// <param name="_payPeriod">
    /// Calculation period.
    /// </param>
    /// <param name="_payGroup">
    /// Payroll group.
    /// </param>
    /// <param name="_reportPeriod">
    /// Rreporting period.
    /// </param>
    /// <returns>
    /// The instance of the class <c>RPayAverageQuantityCountGroup</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayAverageQuantityCountGroup newAverageQuantityCountGroup(
        ReportPeriod_RU _payPeriod,
        RPayGroup       _payGroup,
        ReportPeriod_RU _reportPeriod = maxdate())
    {
        RPayAverageQuantityCountGroup averageQuantityCountGroup = new RPayAverageQuantityCountGroup();

        averageQuantityCountGroup.parmPayGroup(_payGroup);
        averageQuantityCountGroup.parmPayPeriod(_payPeriod);
        averageQuantityCountGroup.parmReportPeriod(_reportPeriod);

        averageQuantityCountGroup.init();

        return averageQuantityCountGroup;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>