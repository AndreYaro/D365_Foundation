<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTransferBalancing</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>AssetTransferBalancing</c> class is used to implement Public Sector specific functionality for the transfer of Assets.
/// </summary>
/// <remarks>
///     According to Public Sector requirments, all general ledger entries are made within a Fund dimension and may be marked as
///     required to be balanced. This class extends the <c>AssetTransfer</c> class to add this Public Sector functionality for
///     transfer of assets.
/// </remarks>
class AssetTransferBalancing extends AssetTransfer
{
    boolean             isBalancing;
    MainAccountRecId    mainAccountDueFrom;
    MainAccountRecId    mainAccountDueTo;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createMiscTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates miscellaneous transfer transactions according to the business needs. Default functionality is provided in
    ///    the base class <c>AssetTransfer</c>. This class overrides this method to add Public Sector specific functionality
    ///    to the asset transfer process.
    /// </summary>
    /// <param name="_assetBook">
    ///    An instance of the <c>AssetBook</c> table to be used.
    /// </param>
    /// <param name="_ledgerVoucher">
    ///    A <c>LedgerVoucher</c> object which will be used to create transactions.
    /// </param>
    /// <param name="_ledgerVoucherObject">
    ///    A <c>LedgerVoucherObject</c> from the ledger voucher object.
    /// </param>
    /// <remarks>
    ///    This method is invoked by the createTransactions method in the base class, and adds transactions specific to the Public Sector
    ///    functionality. Out of balance general ledger entries may occur during transfers within the specified transfer dimensions.
    ///    Therefore, Due from/Due accounts are provided in the Public Sector specific functionality, to ensure that such out of balance
    ///    entries do not occur within a Fund dimension, as all general ledger entries are made within a Fund dimension which may be marked
    ///    as required to be balanced according to Public Sector requirements.
    /// </remarks>
    protected void createMiscTransactions(
        AssetBook           _assetBook,
        LedgerVoucher       _ledgerVoucher,
        LedgerVoucherObject _ledgerVoucherObject)
    {
        recId                       dimensionHierarchyRecId;
        AssetNetBookValue           assetNetBookValue;
        LedgerDimensionAccount      newledgerDimension;
        LedgerVoucherTransObject    ledgerVoucherTransObject;
        CurrencyExchangeHelper      currencyExchangeHelper;
        CurrencyCode                accountingCurrency;
        LedgerRecId                 ledgerRecId;

        if (isBalancing && mainAccountDueFrom && mainAccountDueTo)
        {
            ledgerRecId = Ledger::primaryLedger(CompanyInfo::current());
            currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
                                        ledgerRecId,
                                        transferDate);

            accountingCurrency = Ledger::AccountingCurrency();
            assetNetBookValue = _assetBook.assetNetBookValue();

            LedgerPostingType postingTypeDebitTransaction;
            LedgerPostingType postingTypeCreditTransaction;

            postingTypeDebitTransaction = LedgerPostingType::FixedAssetsDebit;
            postingTypeCreditTransaction = LedgerPostingType::FixedAssetsCredit;

            // Debit transaction
            dimensionHierarchyRecId = DimensionHierarchy::getAccountStructure(mainAccountDueFrom, ledgerRecId);

            newLedgerDimension = LedgerDimensionDefaultingEngine::getLedgerDimensionFromAccountAndDim(mainAccountDueFrom, dimensionHierarchyRecId, _assetBook.DefaultDimension);

            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAccountingAmountsDefault(
                                        _ledgerVoucherObject,
                                        postingTypeDebitTransaction,
                                        newLedgerDimension,
                                        accountingCurrency,
                                        assetNetBookValue,
                                        assetNetBookValue,
                                        currencyExchangeHelper);

            _ledgerVoucher.addTrans(ledgerVoucherTransObject);

            // Credit transaction
            dimensionHierarchyRecId = DimensionHierarchy::getAccountStructure(mainAccountDueTo, ledgerRecId);

            newLedgerDimension = LedgerDimensionDefaultingEngine::getLedgerDimensionFromAccountAndDim(mainAccountDueTo, dimensionHierarchyRecId, newDefaultDimension);

            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAccountingAmountsDefault(
                                        _ledgerVoucherObject,
                                        postingTypeCreditTransaction,
                                        newLedgerDimension,
                                        accountingCurrency,
                                        -1 * assetNetBookValue,
                                        -1 * assetNetBookValue,
                                        currencyExchangeHelper);

            _ledgerVoucher.addTrans(ledgerVoucherTransObject);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBalancing</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates that atleast one dimension attribute used in the transfer is marked as balancing.
    /// </summary>
    /// <param name="_toDimension">
    ///     The new dimension for which validation is to be performed.
    /// </param>
    /// <returns>
    ///     true if any of the dimensions are marked as balancing; otherwise false.
    /// </returns>
    public boolean isBalancing(DimensionDefault _toDimension)
    {
        DimensionAttribute                  dimensionAttribute;
        DimensionAttributeValueSetItemView  dimensionAttributeValueSetItemView;

        isBalancing = false;

        if (_toDimension)
        {
            select DimensionAttribute from dimensionAttributeValueSetItemView
                where dimensionAttributeValueSetItemView.DimensionAttributeValueSet == _toDimension
                join IsBalancing_PSN from dimensionAttribute
                    where dimensionAttribute.RecId == dimensionAttributeValueSetItemView.DimensionAttribute
                       && dimensionAttribute.IsBalancing_PSN == NoYes::Yes;

            if (dimensionAttribute.IsBalancing_PSN)
            {
                isBalancing = true;
            }
        }

        return isBalancing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMainAccountDueFrom</Name>
				<Source><![CDATA[
    public MainAccountRecId parmMainAccountDueFrom(MainAccountRecId _mainAccountDueFrom = mainAccountDueFrom)
    {
        mainAccountDueFrom = _mainAccountDueFrom;
        return mainAccountDueFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMainAccountDueTo</Name>
				<Source><![CDATA[
    public MainAccountRecId parmMainAccountDueTo(MainAccountRecId _mainAccountDueTo = mainAccountDueTo)
    {
        mainAccountDueTo = _mainAccountDueTo;
        return mainAccountDueTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static AssetTransferBalancing construct()
    {
        return new AssetTransferBalancing();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newByDueFromDueTo</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an instance of <c>AssetTransferBalancing</c> class, setting the due from and due to accounts as provided
    ///     in the parameters.
    /// </summary>
    /// <param name="_mainAccountDueFrom">
    ///     A record ID of the <c>MainAccount</c> table to be used as Due From account in asset transfer.
    /// </param>
    /// <param name="_mainAccountDueTo">
    ///     A record ID of the <c>MainAccount</c> table to be used as Due To account in asset transfer.
    /// </param>
    /// <returns>
    ///     Returns an instance of <c>AssetTransferBalancing</c> class after setting due from and due to accounts
    ///     on the instance.
    /// </returns>
    public static AssetTransferBalancing newByDueFromDueTo(
        MainAccountRecId    _mainAccountDueFrom,
        MainAccountRecId    _mainAccountDueTo)
    {
        AssetTransferBalancing assetTransferBalancing;

        assetTransferBalancing = assetTransferBalancing::construct();

        assetTransferBalancing.parmMainAccountDueFrom(_mainAccountDueFrom);
        assetTransferBalancing.parmMainAccountDueTo(_mainAccountDueTo);

        return assetTransferBalancing;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>