<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationConfirmationDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesQuotationConfirmationDP</c> class is the report data provider class for the
/// <c>SalesQuotationConfirmation</c>SQL ServerReporting Services report.
/// </summary>
[SRSReportParameterAttribute(classStr(SalesQuotationConfirmationContract))]
public class SalesQuotationConfirmationDP extends SrsReportDataProviderPreProcess
{


    private boolean                             isSummaryUpdated;
    DocumentStatus                              documentStatus;

    SalesQuotationEditLinesForm                 salesQuotationEditLines;

    private boolean                             printLineHeader;
    private boolean                             printNonCharge;

    private int                                 lineHeaderPrintedCount;
    private str                                 lineHeaderPrinted[];

    private InventDim                           inventDim;
    private boolean                             insertInventDim;
    private container                           inventDimSetup;
    private container                           inventDimProductSetup;
    private InventDimCtrl_Rep_Sales             inventDimReport;

    private KittingSrsReportDataProviderPreProcess kittingReportHandler;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildTradeLoopTransQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query that is used to populate the report
    /// </summary>
    /// <param name = "_custQuotationConfirmJour">
    /// The <c>CustQuotationConfirmJour</c> used to build the query.
    /// </param>
    /// <returns>A query that holds the data for the report</returns>
    protected QueryRun buildTradeLoopTransQuery(CustQuotationConfirmJour _custQuotationConfirmJour)
    {
        QueryRun tradeLoopTrans = new TradeLoopTrans(_custQuotationConfirmJour, tableNum(CustQuotationConfirmTrans)).buildQueryRun();
        tradeLoopTrans.query().dataSourceTable(tableNum(CustQuotationConfirmTrans)).addSortField(fieldNum(CustQuotationConfirmTrans,ProjTransType),SortOrder::Descending);

        if (inventDimReport.isInventDimLine() || inventDimReport.isInventDimItemId())
        {
            QueryBuildDataSource custQuotationConfDS  = tradeLoopTrans.query().dataSourceTable(tableNum(CustQuotationConfirmTrans));
            QueryBuildDataSource qbds = custQuotationConfDS.addDataSource(tableNum(InventDim));
            qbds.joinMode(JoinMode::OuterJoin);
            qbds.fetchMode(QueryFetchMode::One2One);
            qbds.addLink(fieldNum(CustQuotationConfirmTrans, InventDimId), fieldNum(InventDim, InventDimId));
            insertInventDim = true;
        }

        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
        {
            kittingReportHandler = new KittingSrsReportDataProviderPreProcess();
            tradeLoopTrans = kittingReportHandler.kittingGetQueryRun(tradeLoopTrans, tableNum(CustQuotationConfirmJour));
        }

        return TradeLoopTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPrintLineHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to print the line header.
    /// </summary>
    /// <param name = "_lineHeader">
    /// The <c>LineHeader</c>
    /// </param>
    private void checkPrintLineHeader(LineHeader _lineHeader)
    {
        boolean lineHeaderPrint = true;
        printLineHeader         = false;

        if (isSummaryUpdated)
        {
            str lineHeaderOrig = _lineHeader;

            for (int counter = 1; counter <= lineHeaderPrintedCount; counter++)
            {
                if (lineHeaderPrinted[counter] == lineHeaderOrig)
                {
                    printLineHeader = false;
                    lineHeaderPrint = false;
                    break;
                }
                else if (lineHeaderPrinted[counter] == subStr(lineHeaderOrig, 1, strLen(lineHeaderPrinted[counter])))
                {
                    _lineHeader = strLTrim(subStr(_lineHeader,strLen(lineHeaderPrinted[counter]) + 1, 255));
                }
            }
            if (_lineHeader && lineHeaderPrint)
            {
                printLineHeader = true;
                lineHeaderPrintedCount++;
                lineHeaderPrinted[lineHeaderPrintedCount] = lineHeaderOrig;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesQuotationDetailsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full data from the <c>SalesQuotationDetailsTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The <c>SalesQuotationDetailsTmp</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(SalesQuotationDetailsTmp))]
    public SalesQuotationDetailsTmp getSalesQuotationDetailsTmp()
    {
        SalesQuotationDetailsTmp salesQuotationTmp;

        this.setTransactionConnection(salesQuotationTmp);

        select salesQuotationTmp;

        return salesQuotationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesQuotationHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full data from the <c>SalesQuotationHeaderTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The <c>SalesQuotationHeaderTmp</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(SalesQuotationHeaderTmp))]
    public SalesQuotationHeaderTmp getSalesQuotationHeaderTmp()
    {
        SalesQuotationHeaderTmp salesQuotationHeaderTmp;

        this.setTransactionConnection(salesQuotationHeaderTmp);

        select salesQuotationHeaderTmp;

        return salesQuotationHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysDocuBrandDetailsRegular</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full data from <c>SysDocuBrandDetailsRegular</c> table.
    /// </summary>
    /// <returns>
    /// The <c>SysDocuBrandDetailsRegular</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(SysDocuBrandDetailsRegular))]
    public SysDocuBrandDetailsRegular getSysDocuBrandDetailsRegular()
    {
        SysDocuBrandDetailsRegular docuBrandDetails;

        this.setTransactionConnection(docuBrandDetails);

        select docuBrandDetails;

        return docuBrandDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the itemId for current transaction.
    /// </summary>
    /// <param name = "_custQuotationConfirmTrans">
    /// The <c>CustQuotationConfirmTrans</c> used to find the item id.
    /// </param>
    /// <returns>
    /// The ItemId value.
    /// </returns>
    private ItemId  itemId(CustQuotationConfirmTrans _custQuotationConfirmTrans)
    {
        ItemId  localItemId;

        if (_custQuotationConfirmTrans.ProjTransType == QuotationProjTransType::Item)
        {
            localItemId = SalesQuotationEditLinesForm::journalItemId(ModuleInventPurchSales::Sales, _custQuotationConfirmTrans.ItemId, _custQuotationConfirmTrans.ExternalItemId);

            if (inventDimReport.isInventDimItemId())
            {
                localItemId += inventDimReport.reportStrItemId(inventDim);
            }
        }

        return localItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDimHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the storage Dimension and the data to be entered to temporary table.
    /// </summary>
    /// <param name = "_custQuotationConfirmJour">
    /// The <c>CustQuotationConfirmJour</c> used to do the calculations.
    /// </param>
    /// <param name = "_custQuotationConfirmTrans">
    /// The <c>CustQuotationConfirmTrans</c> used to do the calculations.
    /// </param>
    /// <returns>
    /// The string with the inventory dimensions.
    /// </returns>
    private str printDimHistory(
        CustQuotationConfirmJour    _custQuotationConfirmJour,
        CustQuotationConfirmTrans   _custQuotationConfirmTrans)
    {
        SalesQuotationConfirmationDPDimHistoryBuilder builder = SalesQuotationConfirmationDPDimHistoryBuilder::construct();

        builder.parmCustQuotationConfirmJour(_custQuotationConfirmJour);
        builder.parmCustQuotationConfirmTrans(_custQuotationConfirmTrans);
        builder.parmInventDimSetup(inventDimSetup);

        return builder.build();
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipCreateSalesQuotationComfirmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the sales quotation confirm line should be created or not.
    /// </summary>
    /// <param name = "_custQuotationConfirmTrans">
    /// The <c>CustQuotationConfirmTrans</c> record that the line will be created from.
    /// </param>
    /// <returns>
    /// A Boolean value that indicates whether the line should be created.
    /// </returns>
    /// <remarks>
    /// This is used for project quotation only.For a given Line Property ID check the Print Zero Sales
    /// Price on Quotation settings: If set to the <c>Yes</c> value print the quotation line. If set to the
    /// <c>No</c> value do not print the quotation line. For quotation lines without the Line Property ID,
    /// print by default.
    /// </remarks>
    protected boolean skipCreateSalesQuotationComfirmLine(CustQuotationConfirmTrans _custQuotationConfirmTrans)
    {
        return _custQuotationConfirmTrans.AccountType == LedgerJournalACType::Project           &&
               _custQuotationConfirmTrans.SalesPrice == 0                                       &&
               _custQuotationConfirmTrans.LinePropertyId                                        && 
               !ProjLineProperty::find(_custQuotationConfirmTrans.LinePropertyId).OnQuotation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesQuotationComfirmLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the sales quotation lines.
    /// </summary>
    /// <param name = "custQuotationConfirmJour">A <c>CustQuotationConfirmJour</c> record that the header are created from.</param>
    /// <param name = "_custFormletterDocument">A customer form setup</param>
    protected void createSalesQuotationComfirmLines(
        CustQuotationConfirmJour _custQuotationConfirmJour,
        CustFormletterDocument _custFormletterDocument)
    {
        lineHeaderPrintedCount = 0;

        QueryRun tradeLoopTrans = this.buildTradeLoopTransQuery(_custQuotationConfirmJour);

        while (tradeLoopTrans.next())
        {
            CustQuotationConfirmTrans custQuotationConfirmTrans = tradeLoopTrans.get(tableNum(CustQuotationConfirmTrans));

            // For Project Quotation with zero sales price
            if (this.skipCreateSalesQuotationComfirmLine(custQuotationConfirmTrans))
            {
                continue;
            }

            if (insertInventDim)
            {
                inventDim = tradeLoopTrans.get(tableNum(InventDim));
            }

            this.checkPrintLineHeader(custQuotationConfirmTrans.LineHeader);

            if (this.mustCreateSalesQuotationLine(_custQuotationConfirmJour, custQuotationConfirmTrans, _custFormletterDocument))
            {
                this.createSalesQuotationDetailsTmp(
                        _custQuotationConfirmJour,
                        custQuotationConfirmTrans,
                        _custFormletterDocument);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateSalesQuotationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a sales quotation line must be created.
    /// </summary>
    /// <param name = "_custQuotationConfirmJour">A <c>CustQuotationConfirmJour</c> record that the header record is created from.</param>
    /// <param name = "_custQuotationConfirmTrans">The <c>CustQuotationConfirmTrans</c> record that the line will be created from.</param>
    /// <param name = "_custFormletterDocument">A customer form setup</param>
    /// <returns>
    /// true, if the sales quotation line must be created; otherwise, false.
    /// </returns>
    protected boolean mustCreateSalesQuotationLine(
        CustQuotationConfirmJour    _custQuotationConfirmJour,
        CustQuotationConfirmTrans   _custQuotationConfirmTrans,
        CustFormletterDocument      _custFormletterDocument)
    {
        return printNonCharge
            || _custQuotationConfirmJour.QuotationType == QuotationType::Sales                              
            || ProjLineProperty::find(_custQuotationConfirmTrans.LinePropertyId).ToBeInvoiced == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic and also calls helper methods and inserts data into the
    /// temporary table.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by SQL
    /// ServerReporting Services at runtime. The method should compute data and populate the data tables
    /// that will be returned to SQL ServerReporting Services.
    /// </remarks>
    public void processReport()
    {
        CustQuotationConfirmJour custQuotationConfirmJour = this.initializeReportData();

        if (custQuotationConfirmJour)
        {

            isSummaryUpdated                                   = custQuotationConfirmJour.isSummaryUpdated();

            CustFormletterDocument   custFormletterDocument    = CustFormletterDocument::find();
            CustFormletterParameters custFormletterParameters  = CustFormletterParameters::find();
            FormLetterRemarks        formLetterRemarks         = FormLetterRemarks::find(
                                                                    custQuotationConfirmJour.LanguageId,
                                                                    custQuotationConfirmJour.QuotationType == QuotationType::Sales
                                                                         ? FormTextType::SalesConfirmation
                                                                         : FormTextType::ProjectConfirmation);

            //Set the temporary Template
            SalesQuotationHeaderTmp salesQuotationHeaderTmp = this.createSalesQuotationHeaderTmp(
                custQuotationConfirmJour, 
                formLetterRemarks, 
                custFormletterDocument, 
                custFormletterParameters);

            this.createSalesQuotationComfirmLines(custQuotationConfirmJour, custFormletterDocument);

            this.createTaxLines(custQuotationConfirmJour, custFormletterParameters);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a tax specification and inserts it to the <c>salesQuotationTmp</c> table.
    /// </summary>
    /// <param name = "_custQuotationJour">A <c>CustQuotationConfirmJour</c> record that the header are created from.</param>
    /// <param name = "_custFormletterDocument">A customer form setup</param>
    protected void createTaxLines(
        CustQuotationConfirmJour    _custQuotationConfirmJour,
        CustFormletterParameters    _custFormletterParameters)
    {
        if (_custFormletterParameters.TaxSpecPrintLevel != TaxSpecPrintLevel::None)
        {
            TaxSpec taxSpec;

            if (_custQuotationConfirmJour.isProforma())
            {
                taxSpec = TaxSpec::construct('',naDate(),_custQuotationConfirmJour.RecId);
                taxSpec.setTmpTaxWorkTrans(this.tmpTaxWorkTrans(_custQuotationConfirmJour));
            }
            else
            {
                taxSpec = new TaxJournalSpec(_custQuotationConfirmJour.TableId, _custQuotationConfirmJour.RecId);
            }

            taxSpec.parmLanguageId(_custQuotationConfirmJour.LanguageId);
            while (taxSpec.parmTaxSpec())
            {
                if (this.mustCreateTaxLine(taxSpec))
                {
                    this.createTaxLine(taxSpec);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a tax line
    /// </summary>
    /// <param name = "_taxSpec">The tax specifications used for creating the line</param>
    /// <returns>The line created</returns>
    protected SalesQuotationDetailsTmp createTaxLine(TaxSpec _taxSpec)
    {
        SalesQuotationDetailsTmp salesQuotationTmp = this.initializeTaxLine(_taxSpec);
        
        salesQuotationTmp.insert();

        return salesQuotationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateTaxLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a tax line should be created or not.
    /// </summary>
    /// <param name = "_taxSpec">The tax specifications used when creating the line</param>
    /// <returns>True if the line should be inserted</returns>
    protected boolean mustCreateTaxLine(TaxSpec _taxSpec)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesQuotationDetailsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a sales quotation line.
    /// </summary>
    /// <param name = "_custQuotationConfirmJour">A <c>CustQuotationConfirmJour</c> record that the header is created from.</param>
    /// <param name = "_custQuotationConfirmTrans">The <c>CustQuotationConfirmTrans</c> record that the line will be created from.</param>
    /// <param name = "_custFormletterDocument">A customer form setup</param>
    /// <returns>A sales quotation sales line</returns>
    /// <returns>The created sales quotation line.</returns>
    protected SalesQuotationDetailsTmp createSalesQuotationDetailsTmp(
        CustQuotationConfirmJour    _custQuotationConfirmJour,
        CustQuotationConfirmTrans   _custQuotationConfirmTrans,
        CustFormletterDocument      _custFormletterDocument)
    {
        SalesQuotationDetailsTmp salesQuotationTmp = this.initializeSalesQuotationDetailsTmp(
                        _custQuotationConfirmJour,
                        _custQuotationConfirmTrans,
                        _custFormletterDocument);

        salesQuotationTmp.insert();

        return salesQuotationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesQuotationDetailsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a sales quotation line.
    /// </summary>
    /// <param name = "_custQuotationConfirmJour">A <c>CustQuotationConfirmJour</c> record that the header are initialized from.</param>
    /// <param name = "_custQuotationConfirmTrans">The <c>CustQuotationConfirmTrans</c> record that the line will be initialized from.</param>
    /// <param name = "_custFormletterDocument">A customer form setup</param>
    /// <returns>An initialized sales quotation line</returns>
    protected SalesQuotationDetailsTmp initializeSalesQuotationDetailsTmp(
        CustQuotationConfirmJour    _custQuotationConfirmJour,
        CustQuotationConfirmTrans   _custQuotationConfirmTrans,
        CustFormletterDocument      _custFormletterDocument)
    {
        SalesQuotationDetailsTmp salesQuotationTmp;
        this.setTransactionConnection(salesQuotationTmp);

        //VendPurchOrderJour - Body
        if (printLineHeader)
        {
            salesQuotationTmp.LineHeader            = _custQuotationConfirmTrans.LineHeader;
        }
        salesQuotationTmp.ProjTransType             = _custQuotationConfirmTrans.ProjTransType;
        salesQuotationTmp.ItemId                    = this.itemId(_custQuotationConfirmTrans);
        salesQuotationTmp.CustQuotationConfirmTrans = _custQuotationConfirmTrans.RecId;

        if (_custQuotationConfirmJour.QuotationType == QuotationType::Project
            && _custQuotationConfirmTrans.ProjDescription
            && isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            salesQuotationTmp.Name                  = _custQuotationConfirmTrans.ProjDescription;
        }
        else
        {
            salesQuotationTmp.Name                  = _custQuotationConfirmTrans.Name;
        }
        salesQuotationTmp.Qty                       = _custQuotationConfirmTrans.Qty;
        salesQuotationTmp.SalesUnitTxt              = _custQuotationConfirmTrans.salesUnitTxt();
        salesQuotationTmp.SalesPrice                = _custQuotationConfirmTrans.SalesPrice;
        salesQuotationTmp.DlvDate                   = _custQuotationConfirmTrans.DlvDate;
        salesQuotationTmp.DiscPercent               = _custQuotationConfirmTrans.DiscPercent;
        salesQuotationTmp.DiscAmount                = _custQuotationConfirmTrans.DiscAmount;
        
        salesQuotationTmp.LineAmount = this.lineAmount(_custQuotationConfirmJour, _custQuotationConfirmTrans, _custFormletterDocument);

        salesQuotationTmp.CurrencyCode              = _custQuotationConfirmTrans.CurrencyCode;
        salesQuotationTmp.PrintCode                 = _custQuotationConfirmTrans.TaxWriteCode;

        salesQuotationTmp.ExternalItemId            = SalesQuotationEditLinesForm::journalExternalItemId(ModuleInventPurchSales::Sales, _custQuotationConfirmTrans.ExternalItemId);

        boolean pdsCWEnabled = #PdsCatchWeightEnabled;

        if (pdsCWEnabled)
        {
            salesQuotationTmp.PdsCWUnitId           = _custQuotationConfirmTrans.pdsCWUnitId();
            salesQuotationTmp.PdsCWQty              = _custQuotationConfirmTrans.PdsCWQty;
        }

        if ((_custFormletterDocument.DocuOnQuotation == DocuOnFormular::Line) ||
            (_custFormletterDocument.DocuOnQuotation == DocuOnFormular::All))
        {
            DocuRefSearch docuRefSearch = DocuRefSearch::newTypeIdAndRestriction(_custQuotationConfirmTrans,
                                                                    _custFormletterDocument.DocuTypeQuotation,
                                                                    DocuRestriction::External);
            salesQuotationTmp.Notes                 = Docu::concatDocuRefNotes(docuRefSearch);
        }

        salesQuotationTmp.InventDimQtyPrint         = this.printDimHistory(_custQuotationConfirmJour, _custQuotationConfirmTrans);

        if (inventDim)
        {
            salesQuotationTmp.InventDimProduct      = FormLetter::inventDimReport(inventDim, inventDimProductSetup, _custQuotationConfirmJour.LanguageId);
        }

        salesQuotationTmp.QuotationTransOrTaxTrans  = true;

        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
        {
            kittingReportHandler.setkitFields(salesQuotationTmp, _custQuotationConfirmTrans);
        }

        return salesQuotationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line amount used for the sales quotation line.
    /// </summary>
    /// <param name = "_custQuotationConfirmJour">A <c>CustQuotationConfirmJour</c> record that the header record is initialized from.</param>
    /// <param name = "_custQuotationConfirmTrans">The <c>CustQuotationConfirmTrans</c> record that the sales quotation line will be initialized from.</param>
    /// <param name = "_custFormletterDocument">A customer form setup</param>
    /// <returns>The line amount used for the sales quotation line.</returns>
    [Replaceable]
    protected AmountCur lineAmount(
        CustQuotationConfirmJour    _custQuotationConfirmJour, 
        CustQuotationConfirmTrans   _custQuotationConfirmTrans,
        CustFormletterDocument      _custFormletterDocument)
    {
        if (_custQuotationConfirmJour.QuotationType == QuotationType::Sales
            || (ProjLineProperty::find(_custQuotationConfirmTrans.LinePropertyId).ToBeInvoiced == NoYes::Yes
            && ProjInvoiceTable::isBillingRuleInvoiceable(_custQuotationConfirmTrans.custQuotationConfirmJour().ProjIdRef, _custQuotationConfirmTrans.ProjCategoryId, '')))
        {
            return _custQuotationConfirmTrans.LineAmount;
        }
        
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesQuotationHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>SalesQuotationHeaderTmp</c>
    /// </summary>
    /// <param name = "_custQuotationConfirmJour">The <c>CustQuotationConfirmJour</c> record to create the header from</param>
    /// <param name = "_formLetterRemarks">A form note</param>
    /// <param name = "_custFormletterDocument">A customer form setup</param>
    /// <param name = "_custFormletterParameters">The parameters of the customer form setup</param>
    /// <returns>The created <c>SalesQuotationHeaderTmp</c></returns>
    protected SalesQuotationHeaderTmp createSalesQuotationHeaderTmp(
        CustQuotationConfirmJour    _custQuotationConfirmJour,
        FormLetterRemarks           _formLetterRemarks,
        CustFormletterDocument      _custFormletterDocument,
        CustFormletterParameters    _custFormletterParameters)
    {
        SalesQuotationHeaderTmp salesQuotationHeaderTmp = this.initializeSalesQuotationHeaderTmp(
            _custQuotationConfirmJour,
            _formLetterRemarks,
            _custFormletterDocument,
            _custFormletterParameters);

        salesQuotationHeaderTmp.insert();

        return salesQuotationHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesQuotationHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts common data into the table buffer.
    /// </summary>
    /// <param name = "_custQuotationConfirmJour">The <c>CustQuotationConfirmJour</c> record to initialize the header from</param>
    /// <param name = "_formLetterRemarks">A form note</param>
    /// <param name = "_custFormletterDocument">A customer form setup</param>
    /// <param name = "_custFormletterParameters">The parameters of the customer form setup</param>
    /// <returns>The initialized <c>SalesQuotationHeaderTmp</c></returns>
    protected SalesQuotationHeaderTmp initializeSalesQuotationHeaderTmp(
        CustQuotationConfirmJour    _custQuotationConfirmJour,
        FormLetterRemarks           _formLetterRemarks, 
        CustFormletterDocument      _custFormletterDocument,
        CustFormletterParameters    _custFormletterParameters)
    {
        SalesQuotationHeaderTmp salesQuotationHeaderTmp;
        this.setTransactionConnection(salesQuotationHeaderTmp);

        TmpTaxWorkTrans tmpTaxWorkTrans     = this.tmpTaxWorkTrans(_custQuotationConfirmJour);

        CompanyInfo companyInfo = CompanyInfo::find();

        salesQuotationHeaderTmp.PrintLogo                   = NoYes::No;
        salesQuotationHeaderTmp.CustQuotationConfirmJour    = _custQuotationConfirmJour.RecId;

        if (_custFormletterParameters.PrePrintLevelQuotation == PrePrintLevel::BlankPaper)
        {
            salesQuotationHeaderTmp.CompanyLogo             = SalesQuotationEditLinesForm::companyLogo();
            salesQuotationHeaderTmp.CompanyName             = companyInfo.name();
            salesQuotationHeaderTmp.CompanyAddress          = companyInfo.postalAddressWithTranslation(_custQuotationConfirmJour.LanguageId);
            salesQuotationHeaderTmp.CompanyPhone            = companyInfo.phone();
            salesQuotationHeaderTmp.CompanyTelefax          = companyInfo.teleFax();
            salesQuotationHeaderTmp.CompanyGiro             = companyInfo.Giro;
            salesQuotationHeaderTmp.CompanyCoRegNum         = companyInfo.CoRegNum;
            salesQuotationHeaderTmp.CompanyEnterpriseNumber = companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, _custQuotationConfirmJour.QuotationDate);
            salesQuotationHeaderTmp.ShowCompanyVATNum       = _custFormletterParameters.PrintConfirmationVATNum;
            salesQuotationHeaderTmp.CompanyVATNum           = TaxRegistration::getTaxRegNumFromJournal(
                _custQuotationConfirmJour.TableId,
                _custQuotationConfirmJour.RecId,
                _custQuotationConfirmJour.QuotationDate);
            if (conLen(salesQuotationHeaderTmp.CompanyLogo) > 0)
            {
                salesQuotationHeaderTmp.PrintLogo           = NoYes::Yes;
            }

            if (companyInfo.PrintEnterpriseregister_NO)
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceNO00011, funcName());
                salesQuotationHeaderTmp.Enterpriseregister_NO = SysLabel::labelId2String(literalStr("@SYS4002065"),
                                                                                         _custQuotationConfirmJour.LanguageId);
            }
        }

        salesQuotationHeaderTmp.DeliveryName            = _custQuotationConfirmJour.DeliveryName;
        salesQuotationHeaderTmp.DeliveryAddress         = _custQuotationConfirmJour.deliveryAddress();
        salesQuotationHeaderTmp.QuotationDocNum         = _custQuotationConfirmJour.QuotationDocNum;
        salesQuotationHeaderTmp.QuotationDate           = _custQuotationConfirmJour.QuotationDate;
        salesQuotationHeaderTmp.SalesId                 = _custQuotationConfirmJour.SalesId;
        salesQuotationHeaderTmp.PurchaseOrder           = _custQuotationConfirmJour.PurchaseOrder;
        salesQuotationHeaderTmp.CustomerRef             = _custQuotationConfirmJour.CustomerRef;
        salesQuotationHeaderTmp.SalesAdministrator      = HcmWorker::find(_custQuotationConfirmJour.WorkerSalesTaker).PersonnelNumber;
        salesQuotationHeaderTmp.PaymentCode             = _custQuotationConfirmJour.paymentCode();
        salesQuotationHeaderTmp.CurrencyCode            = _custQuotationConfirmJour.CurrencyCode;

        SalesQuotationTable salesQuotationTable = _custQuotationConfirmJour.salesQuotationTable();

        salesQuotationHeaderTmp.DocuTitle               = salesQuotationTable.DocuTitle;
        salesQuotationHeaderTmp.DocuIntro               = salesQuotationTable.DocuIntro;
        salesQuotationHeaderTmp.DocuConclusion          = salesQuotationTable.DocuConclusion;
        salesQuotationHeaderTmp.FormLetterRemarks       = _formLetterRemarks.Txt;

        if ((_custFormletterDocument.DocuOnQuotation == DocuOnFormular::Head) ||
            (_custFormletterDocument.DocuOnQuotation == DocuOnFormular::All))
        {
            DocuRefSearch docuRefSearch = DocuRefSearch::newTypeIdAndRestriction(_custQuotationConfirmJour,
                                                                   _custFormletterDocument.DocuTypeQuotation,
                                                                   DocuRestriction::External);
            salesQuotationHeaderTmp.DocuRefMainNotes    = Docu::concatDocuRefNotes(docuRefSearch);
        }

        salesQuotationHeaderTmp.SalesBalance            = _custQuotationConfirmJour.SalesBalance;
        salesQuotationHeaderTmp.EndDisc                 = _custQuotationConfirmJour.EndDisc;
        salesQuotationHeaderTmp.SumMarkup               = _custQuotationConfirmJour.SumMarkup;
        salesQuotationHeaderTmp.SumTax                  = _custQuotationConfirmJour.SumTax;
        salesQuotationHeaderTmp.RoundOff                = _custQuotationConfirmJour.RoundOff;
        salesQuotationHeaderTmp.QuotationAmount         = _custQuotationConfirmJour.QuotationAmount;
        salesQuotationHeaderTmp.CurrencyCode            = _custQuotationConfirmJour.CurrencyCode;

        salesQuotationHeaderTmp.TaxPrintTaxFreeBalance  = _custFormletterParameters.TaxPrintTaxFreeBalance;
        if (salesQuotationHeaderTmp.TaxPrintTaxFreeBalance)
        {
            salesQuotationHeaderTmp.NetAmount               = _custQuotationConfirmJour.netAmount();

            tmpTaxWorkTrans                                 = this.tmpTaxWorkTrans(_custQuotationConfirmJour);
            salesQuotationHeaderTmp.TaxFreeBalance          = _custQuotationConfirmJour.taxFreeBalance(tmpTaxWorkTrans);
            salesQuotationHeaderTmp.TaxableBalance          = _custQuotationConfirmJour.taxableBalance(tmpTaxWorkTrans);
        }

        if (_custFormletterParameters.PrintEuroAmount)
        {
            salesQuotationHeaderTmp.EuroCurrencyCode        = Currency::findEuroCurrencyCode();
            if (salesQuotationHeaderTmp.EuroCurrencyCode && salesQuotationHeaderTmp.EuroCurrencyCode != salesQuotationHeaderTmp.CurrencyCode)
            {
                salesQuotationHeaderTmp.SalesBalanceEuro    = _custQuotationConfirmJour.salesBalanceEuro();
                salesQuotationHeaderTmp.EndDiscEuro         = _custQuotationConfirmJour.endDiscEuro();
                salesQuotationHeaderTmp.SumMarkupEuro       = _custQuotationConfirmJour.sumMarkupEuro();
                salesQuotationHeaderTmp.SumTaxEuro          = _custQuotationConfirmJour.sumTaxEuro();
                salesQuotationHeaderTmp.RoundOffEuro        = _custQuotationConfirmJour.roundOffEuro();
                salesQuotationHeaderTmp.QuotationAmountEuro = _custQuotationConfirmJour.quotationAmountEuro();

                salesQuotationHeaderTmp.TaxPrintTaxFreeBalance  = _custFormletterParameters.TaxPrintTaxFreeBalance;
                if (salesQuotationHeaderTmp.TaxPrintTaxFreeBalance)
                {
                    salesQuotationHeaderTmp.NetAmountEuro       = _custQuotationConfirmJour.netAmountEuro();
                    salesQuotationHeaderTmp.TaxFreeBalanceEuro  = _custQuotationConfirmJour.amountCur2Euro(salesQuotationHeaderTmp.TaxFreeBalance);
                    salesQuotationHeaderTmp.TaxableBalanceEuro  = _custQuotationConfirmJour.amountCur2Euro(salesQuotationHeaderTmp.TaxableBalance);
                }
            }
            else
            {
                salesQuotationHeaderTmp.EuroCurrencyCode = ""; //empty Euro currency means that euro line will not be printed
            }
        }

        salesQuotationHeaderTmp.PrePrintLevel           = _custFormletterParameters.PrePrintLevelQuotation;
        salesQuotationHeaderTmp.TaxSpecPrintLevel       = _custFormletterParameters.TaxSpecPrintLevel;
        salesQuotationHeaderTmp.CompanyCurrencyCode     = Ledger::accountingCurrency(companyInfo.RecId);
        salesQuotationHeaderTmp.CashDiscTxt             = strFmt(SysLabel::labelId2String2(literalStr("@SYS62050"), _custQuotationConfirmJour.LanguageId),
                                                                 CashDisc::txt(_custQuotationConfirmJour.CashDiscCode, _custQuotationConfirmJour.LanguageId));

        // set Document Branding Header;
        this.setSysDocuBrandDetails(_custQuotationConfirmJour);

        return salesQuotationHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTaxLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>SalesQuotationDetailsTmp</c> based on a <c>TaxSpec</c>
    /// </summary>
    /// <param name = "_taxSpec">The <c>TaxSpec</c> to initialize from</param>
    /// <returns>A sales quotation sales line</returns>
    protected SalesQuotationDetailsTmp initializeTaxLine(TaxSpec _taxSpec)
    {
        SalesQuotationDetailsTmp salesQuotationTmp;

        this.setTransactionConnection(salesQuotationTmp);

        salesQuotationTmp.LineAmount = 0;
        salesQuotationTmp.PrintCode             = _taxSpec.taxWriteCode();
        salesQuotationTmp.TaxCode               = _taxSpec.taxCode();
        salesQuotationTmp.TaxBaseAmount         = - _taxSpec.taxBaseAmount();
        salesQuotationTmp.TaxBaseQty            = - _taxSpec.taxBaseQty();
        salesQuotationTmp.TaxAmount             = - _taxSpec.taxAmount();
        salesQuotationTmp.TaxAmountMST          = - _taxSpec.taxAmountMST();
        salesQuotationTmp.TaxExemptDescription  = _taxSpec.taxExemptDescription();

        salesQuotationTmp.QuotationTransOrTaxTrans  = false;

        return salesQuotationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSysDocuBrandDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the <c>SysDocuBrandDetailsRegular</c> table with header details.
    /// </summary>
    /// <param name = "_custQuotationJour">
    /// The <c>CustQuotationConfirmJour</c> to that the header is initialized from
    /// </param>
    private void setSysDocuBrandDetails(CustQuotationConfirmJour _custQuotationConfirmJour)
    {
        SysDocuBrandDetailsRegular bufferTable = SysDocuBrandDetails::getDocuBrandDetailsRegular(this);
        SysDocuBrandDetailsRegular docuBrandDetails = this.getSysDocuBrandDetailsRegular();

        docuBrandDetails.clear();
        docuBrandDetails.setConnection(this.parmUserConnection());
        docuBrandDetails.data(bufferTable.data());
        docuBrandDetails.CurrencySymbol    = Currency::find(_custQuotationConfirmJour.CurrencyCode).Symbol;
        docuBrandDetails.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransactionConnection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the database transaction connection for a record from the connection associated with the report.
    /// </summary>
    /// <param name = "_reportRecord">
    /// A record to set database transaction for.
    /// </param>
    final protected void setTransactionConnection(Common _reportRecord)
    {
        var connection = this.parmUserConnection();

        if (connection)
        {
            _reportRecord.setConnection(connection);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report data.
    /// </summary>
    /// <returns>The <c>CustQuotationConfirmJour</c> that the header is created from</returns>
    protected CustQuotationConfirmJour initializeReportData()
    {
        SalesQuotationConfirmationContract  contract = this.parmDataContract() as SalesQuotationConfirmationContract;
        CustQuotationConfirmJour custQuotationConfirmJour;
        
        RecId custQuotationConfirmJourRecId = contract.parmRecordId();
        documentStatus                      = contract.parmDocumentStatus();
        RecId salesQuotationEditLinesRecId  = contract.parmSalesQuotationEditLinesRecId();
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            printNonCharge              = contract.parmPrintNonCharge();
        }

        if (custQuotationConfirmJourRecId)
        {
            custQuotationConfirmJour = CustQuotationConfirmJour::findRecId(custQuotationConfirmJourRecId);
        }

        salesQuotationEditLines = this.unpackSalesQuotationEditLines(salesQuotationEditLinesRecId);

        this.initializeInventDimReport();

        return custQuotationConfirmJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventDimReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>inventDimReport</c>.
    /// </summary>
    protected void initializeInventDimReport()
    {
        inventDimReport         = InventDimCtrl_Rep_Sales::construct();
        inventDimReport.parmDocumentStatus(DocumentStatus::Quotation);
        inventDimReport.initDimParmVisible();
        inventdimSetup          = inventDimReport.dimFieldsActive(inventDimReport.parmDimParmVisible());
        inventDimReport.initProductDimParmVisible();
        inventDimProductSetup   = inventDimReport.dimFieldsActive(inventDimReport.parmDimParmVisible());
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpTaxWorkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TmpTaxWorkTrans</c> value.
    /// </summary>
    /// <param name = "_custQuotationConfirmJour">
    /// The <c>CustQuotationConfirmJour</c> to that the header was created from
    /// </param>
    /// <returns>
    /// The <c>TmpTaxWorkTrans</c> value.
    /// </returns>
    private TmpTaxWorkTrans tmpTaxWorkTrans(
        CustQuotationConfirmJour    _custQuotationConfirmJour)
    {
        if (_custQuotationConfirmJour.isProforma())
        {
            if (salesQuotationEditLines)
            {
                return salesQuotationEditLines.tmpTaxWorkTrans(_custQuotationConfirmJour.RecId);
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackSalesQuotationEditLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Packed class and unpacks it.
    /// </summary>
    /// <param name = "_salesQuotationEditLinesRecId">The <c>RecId</c> of the <c>SalesQuotationEditLines</c></param>
    /// <returns>An unpacked <c>SalesQuotationEditLinesForm</c></returns>
    private SalesQuotationEditLinesForm unpackSalesQuotationEditLines(RecId _salesQuotationEditLinesRecId)
    {
        if (_salesQuotationEditLinesRecId)
        {
            SRSTmpDataStore srsTmpDataStore;

            ttsbegin;
            select forupdate firstonly srsTmpDataStore
                where srsTmpDataStore.RecId == _salesQuotationEditLinesRecId;

            if (srsTmpDataStore)
            {
                salesQuotationEditLines = SalesQuotationEditLinesForm::construct(DocumentStatus::Quotation);
                salesQuotationEditLines.unpack(srsTmpDataStore.Value);
                srsTmpDataStore.delete();
            }
            ttscommit;
        }
        return salesQuotationEditLines;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>