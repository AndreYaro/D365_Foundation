<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgAbcensPreRegistre</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgAbcensPreRegistre</c> class creates planned absence
/// registrations for workers.
/// </summary>
class JmgAbcensPreRegistre extends RunBaseBatch implements BatchRetryable
{
    QueryRun            queryRun;
    Dialog              dialog;
    DialogField         dfFromDate;
    DialogField         dfFromTime;
    DialogField         dfToDate;
    DialogField         dfToTime;
    DialogField         dfCompose;
    DialogField         dfDisableAtSigning;
    DialogField         dfJobId;

    JmgDate             fromDate;
    JmgFromTime         fromTime;
    JmgDate             toDate;
    JmgToTime           toTime;
    NoYes               compose;
    NoYes               disableAtSigning;
    JmgJobId            jobId;

    Args                args;
    boolean             workersAdded;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns false.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    /// <remarks>
    ///    This method must be in this class because it is called from the <c>dialogRunbase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        DialogGroup temp;

        dialog = super();

        temp = dialog.addGroup("@SYS36034");
        temp.columns(2);

        dfFromDate          = dialog.addField(extendedtypestr(FromDate));
        dfToDate            = dialog.addField(extendedtypestr(ToDate));
        dfFromTime          = dialog.addField(extendedtypestr(FromTime));
        dfToTime            = dialog.addField(extendedtypestr(ToTime));

        temp = dialog.addGroup('');
        temp.columns(1);

        dfJobId             = dialog.addField(extendedtypestr(JmgJobIDAbs));
        dfDisableAtSigning  = dialog.addField(enumstr(NoYes),"@SYS38547","@SYS38630");
        dfCompose           = dialog.addField(enumstr(NoYes), "@SYS38962", "@SYS39562");

        dfFromTime.value(0);
        dfToTime.value(24 * 60 * 60 - 1);
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayResultMessage</Name>
				<Source><![CDATA[
    private void displayResultMessage(Map _employeesMap)
    {
        str employees;
        MapIterator iterator = new MapIterator(_employeesMap);
        while (iterator.more())
        {
            if (employees)
            {
                employees += ', ';
            }
            employees += iterator.value();

            iterator.next();
        }

        info(strFmt("@SYS339949", employees));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets values from the dialog entered by the user.
    /// </summary>
    /// <returns>
    ///    true if the retrieved values are validated correctly; otherwise, false.
    /// </returns>
    public boolean getFromDialog()
    {
        QueryBuildDataSource    qbds;
        QueryBuildRange         checkQbr;
        boolean                 ret;
        HRMAbsenceCode          hrmAbsenceCode;
        int                     i;
        boolean                 rangeSet;

        ret = super();

        if (ret)
        {
            fromDate = dfFromDate.value();
            fromTime = dfFromTime.value();
            toDate = dfToDate.value();
            toTime = dfToTime.value();
            disableAtSigning = dfDisableAtSigning.value();
            compose = dfCompose.value();
            jobId = dfJobId.value();

            if (inCheckClose && (!fromDate || !toDate))
            {
                ret = checkFailed("@SYS39609");
            }

            if (inCheckClose && fromDate > toDate)
            {
                ret = ret && checkFailed("@SYS16982");
            }

            if (inCheckClose && fromDate == toDate && fromTime >= toTime)
            {
                ret = ret && checkFailed("@SYS39558");
            }

            if (inCheckClose && compose && fromTime >= toTime)
            {
                ret = ret && checkFailed("@SYS39558");
            }

            if (inCheckClose && ret && !jobId)
            {
                ret = ret && checkFailed("@SYS39167");
            }
            hrmAbsenceCode  = HRMAbsenceCode::findByJobId(jobId);
            if (inCheckClose && ret && !hrmAbsenceCode)
            {
                ret = ret && checkFailed(strfmt("@SYS39335", jobId));
            }

            if (ret && inCheckClose)
            {
                // Check that at least one query range is set.
                // Prevents accidental creation of absence on all employees
                rangeSet    = false;
                qbds        = queryRun.query().dataSourceTable(tablenum(JmgEmployee));
                for (i = 1; i <= qbds.rangeCount(); i++)
                {
                    checkQbr    = qbds.range(i);
                    if (checkQbr.field() != fieldnum(JmgEmployee, Active) && checkQbr.value())
                    {
                        rangeSet = true;
                    }
                }

                if (!rangeSet)
                {
                    ret = ret && checkFailed("@SYS27391");
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        QueryBuildDataSource    qbds;
        super();
        queryRun    = new QueryRun(querystr(JmgEmployee));
        qbds        = queryRun.query().dataSourceTable(tablenum(JmgEmployee));
        qbds.addRange(fieldnum(JmgEmployee, Active)).value(queryValue(NoYes::Yes));

        workersAdded = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArgs</Name>
				<Source><![CDATA[
    public Args parmArgs(Args _args)
    {
        args = _args;
        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog and if a select menu item is added to a dialog.
    ///    Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it in the
    ///    <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        FormRun         caller;
        FormDataSource  formDataSource;
        HcmWorker       hcmWorker;
        QueryBuildRange qbr;
        // Add ranges from Args:
        if (args && !workersAdded)
        {
            caller = args.caller();
            if (caller 
                && (caller.name() == formstr(HcmWorker) || caller.name() == formStr(HcmWorkerV2)))
            {
                formDataSource  = caller.dataSource();
                hcmWorker       = formDataSource.getFirst(true);
                if (!hcmWorker)
                {
                    hcmWorker   = args.record();
                }
                qbr = queryRun.query().dataSourceTable(tablenum(JmgEmployee)).addRange(fieldnum(JmgEmployee, Worker));
                while (hcmWorker)
                {
                    if (JmgEmployee::find(hcmWorker.RecId))
                    {
                        qbr.value(queryRangeConcat(qbr.value(), hcmWorker.RecId));
                    }
                    hcmWorker   = formDataSource.getNext();
                }
            }
            workersAdded = true;
        }
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        JmgAbsenceCalendar  jmgAbsenceCalendar;
        JmgEmployee         jmgEmployee;
        HcmWorker           hcmWorker;
        Map                 employeesMap = new Map(Types::Int64, Types::String);
        JmgDate             d;
        while (queryRun.next())
        {
            jmgEmployee = queryRun.get(tablenum(JmgEmployee));
            hcmWorker   = queryRun.get(tableNum(hcmWorker));

            ttsbegin;
            if (compose)
            {
                for (d = fromDate; d <= toDate; d++)
                {
                    jmgAbsenceCalendar.FromDateTime = DateTimeUtil::newDateTime(d,fromTime,DateTimeUtil::getUserPreferredTimeZone());
                    jmgAbsenceCalendar.ToDateTime = DateTimeUtil::newDateTime(d,toTime,DateTimeUtil::getUserPreferredTimeZone());
                    jmgAbsenceCalendar.Worker = jmgEmployee.Worker;
                    jmgAbsenceCalendar.DisableAtSigning = disableAtSigning;
                    jmgAbsenceCalendar.JobId = jobId;
                    jmgAbsenceCalendar.insert();
                }
            }
            else
            {
                jmgAbsenceCalendar.FromDateTime = DateTimeUtil::newDateTime(fromDate,fromTime,DateTimeUtil::getUserPreferredTimeZone());
                jmgAbsenceCalendar.ToDateTime = DateTimeUtil::newDateTime(toDate,toTime,DateTimeUtil::getUserPreferredTimeZone());
                jmgAbsenceCalendar.Worker = jmgEmployee.Worker;
                jmgAbsenceCalendar.DisableAtSigning = disableAtSigning;
                jmgAbsenceCalendar.JobId = jobId;
                jmgAbsenceCalendar.insert();
            }
            ttscommit;

            employeesMap.insert(jmgEmployee.Worker, hcmWorker.name());
        }

        this.displayResultMessage(employeesMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    Your classes that extend this class must override the <c>runsImpersonated</c> method and return
    ///    false if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQuerySelectButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the select button is shown on the dialog.
    /// </summary>
    /// <returns>
    /// true, if the select button is shown on the dialog; otherwise, false.
    /// </returns>
    boolean showQuerySelectButton()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to add a select button to the dialog.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    ///    return a valid instance of the <c>queryRun</c> class.If you change the return value to false, the
    ///    button will no longer be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS38964";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        JmgAbcensPreRegistre    jmgAbcensPreRegistre = new JmgAbcensPreRegistre();
        jmgAbcensPreRegistre.parmArgs(_args);

        if (jmgAbcensPreRegistre.prompt())
        {
            jmgAbcensPreRegistre.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>