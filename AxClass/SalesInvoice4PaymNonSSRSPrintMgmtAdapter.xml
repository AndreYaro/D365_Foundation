<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesInvoice4PaymNonSSRSPrintMgmtAdapter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesInvoice4PaymNonSSRSPrintMgmtAdapter</c> class used to allow use of print management
/// for non-SSRS (for example, Microsoft Office Excel) invoice for payment report based on
/// invoice for payment generated from free text invoice or sales invoice.
/// </summary>
[NonSSRSPrintMgmtAdapterAttribute(PrintMgmtDocumentType::SalesOrderInvoice4Paym_RU),
NonSSRSPrintMgmtAdapterAttribute(PrintMgmtDocumentType::SalesFreeTextInvoice4Paym_RU)]
class SalesInvoice4PaymNonSSRSPrintMgmtAdapter extends FormLetterNonSSRSPrintMgmtAdapter
{
    SalesInvoice4PaymJournalPrint_RU        salesInvoice4PaymJournalPrint;
    SalesFormLetter_FreeTextInvoice4Paym_RU salesFormLetter;
    RecordSortedList                        journalList;
    CustInvoice4PaymJour_RU                 custInvoice4PaymJour;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFormLetterReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a form letter report.
    /// </summary>
    protected void initFormLetterReport()
    {
        printCopyOriginal = this.parmArgs().parmEnum();

        if (classIdGet(this.parmArgs().caller()) == classNum(SalesInvoice4PaymJournalPrint_RU))
        {
            // Set the caller
            salesInvoice4PaymJournalPrint = this.parmArgs().caller();
        }
        else if (classIdGet(this.parmArgs().caller()) == classNum(SalesFormLetter_FreeTextInvoice4Paym_RU))
        {
            salesFormLetter = this.parmArgs().caller();
        }

        if (this.parmArgs().record())
        {
            // Get journal list from the selected record/s
            journalList = FormLetter::createJournalListCopy(this.parmArgs().record());
        }
        else
        {
            journalList = this.parmArgs().object();
        }

        formLetterReport = FormLetterReport::construct(printMgmtDocumentType);

        formLetterReport.parmPrintType(printCopyOriginal);

        if (salesInvoice4PaymJournalPrint)
        {
            // Get the print settings
            formLetterReport.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(salesInvoice4PaymJournalPrint.parmPrinterSettingsFormLetterCopy()));
            formLetterReport.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(salesInvoice4PaymJournalPrint.parmPrinterSettingsFormLetter()));
            formLetterReport.parmUsePrintMgmtDestinations(salesInvoice4PaymJournalPrint.parmUsePrintManagement());
        }
        else if (salesFormLetter)
        {
            formLetterReport.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(salesFormLetter.printerSettingsFormletter(PrintSetupOriginalCopy::Copy)));
            formLetterReport.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(salesFormLetter.printerSettingsFormletter(PrintSetupOriginalCopy::Original)));
            formLetterReport.parmUsePrintMgmtDestinations(salesFormLetter.usePrintManagement());
            formLetterReport.parmUseUserDefinedDestinations(salesFormLetter.parmUseUserDefinedDestinations());
        }
        else if (printCopyOriginal == PrintCopyOriginal::OriginalPrint)
        {
            // Always use the print mgmt destinations when reprinting for the OriginalPrint case.
            formLetterReport.parmUsePrintMgmtDestinations(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method runs the print report.
    /// </summary>
    protected void runPrintMgmt()
    {
        Common              printMgmtReferencedTable;

        if (!journalList)
        {
            throw error("@SYS26348");
        }

        journalList.first(custInvoice4PaymJour);

        do
        {
            if (!custInvoice4PaymJour)
            {
                throw error("@SYS26348");
            }

            // Determine where to start looking for Print Mgmt settings
            if (SalesParameters::find().DeleteHeading == NoYes::Yes)
            {
                // The original SalesTable record no longer exists, so skip that Print Mgmt level
                // and start with the customer instead.
                printMgmtReferencedTable = CustTable::find(custInvoice4PaymJour.InvoiceAccount);

                if (printMgmtReferencedTable == null)
                {
                    printMgmtReferencedTable = CustTable::find(custInvoice4PaymJour.OrderAccount);
                }
            }
            else
            {
                if (custInvoice4PaymJour.SalesId)
                {
                    printMgmtReferencedTable = custInvoice4PaymJour.salesTable();
                }
                else
                {
                    printMgmtReferencedTable = custInvoice4PaymJour.custInvoiceTable();
                }
            }

            formLetterReport.parmSSRS(PrintMgmtSSRS::NonSSRS);
            formLetterReport.parmPrintType(printCopyOriginal);
            formLetterReport.loadPrintSettings(custInvoice4PaymJour, printMgmtReferencedTable, custInvoice4PaymJour.LanguageId);

            this.outputReports();
        } while (journalList.next(custInvoice4PaymJour));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRecordId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method used to set record id parameter of record being processed
    /// </summary>

    protected void setRecordId()
    {
        recordId = custInvoice4PaymJour.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>