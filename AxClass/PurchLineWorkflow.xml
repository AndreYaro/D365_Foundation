<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchLineWorkflow</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchLineWorkflow</c> class supports the clicked event from a workflow common control submit
/// and resubmit button on the <c>PurchTable</c> form, because the <c>PurchLine</c> table does not have
/// its own form from which to submit.
/// </summary>
class   PurchLineWorkflow
extends TradeWorkflow
{
    PurchLine                   purchLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canSubmit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a purchase order can be submitted to workflow.
    /// </summary>
    /// <param name="_purchLine">
    /// The <c>PurchLine</c> record that should be submitted.
    /// </param>
    /// <returns>
    /// true if workflow can be submitted; otherwise, false.
    /// </returns>
    protected boolean canSubmit(purchLine _purchLine)
    {
        boolean             canSubmit   = true;

        if (purchLine.doDistributionsExist()
            && !purchLine.isFullyDistributed())
        {
             canSubmit  =  false;
        }

        if (canSubmit)
        {
            canSubmit = purchLine.checkFullyDistributedAndQualified();
        }

        return canSubmit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void  new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchLine</Name>
				<Source><![CDATA[
    public PurchLine  parmPurchLine(PurchLine  _purchLine = purchLine)
    {
        purchLine = _purchLine;

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preWorkflowDialogRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs budget check for the purchase order line when the workflow dialog run event occurs.
    /// </summary>
    protected void preWorkflowDialogRun()
    {
        super();

        PurchLinePreWorkflowController::main(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSubmit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a budget check before reactivating the purchase order line workflow.
    /// </summary>
    /// <returns>
    /// true if the workflow was resubmitted; otherwise, false.
    /// </returns>
    public boolean reSubmit()
    {
        boolean ret;

        if (purchLine != null
            && this.canSubmit(purchLine)
            )
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>submit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Activates the workflow of purchase lines.
    /// </summary>
    /// <remarks>
    ///    This method starts the workflow configuration by first displaying the submit dialog and then
    ///    calling the <c>submitToWorkflow</c> method on the <c>PurchLine</c> table where the actual
    ///    submissions are performed.
    /// </remarks>
    public void submit()
    {
        WorkflowSubmitDialog            workflowSubmitDialog;

        if (purchLine != null
            && this.canSubmit(purchLine)
            )
        {
            workflowSubmitDialog = WorkflowSubmitDialog::construct(args.caller().getActiveWorkflowConfiguration());

            if (this.submitDialog(workflowSubmitDialog))
            {
                purchLine.submitToWorkflow(workFlowTypeStr(PurchLineTemplate), workflowSubmitDialog.parmWorkflowComment(), false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchLineWorkflow  construct()
    {
        return new PurchLineWorkflow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void  main(Args  _args)
    {
        PurchLineWorkflow  purchLineWorkflow    = TradeWorkflow::newTradeWorkflow(_args);
        PurchLine          purchLine            = _args.record();

        purchLineWorkflow.parmPurchLine(purchLine);

        switch (_args.menuItemName())
        {
            case menuitemActionStr(PurchLineWorkflowSubmit) :
                purchLineWorkflow.submit();
                break;

            case menuitemActionStr(PurchLineWorkflowReSubmit) :
                purchLineWorkflow.reSubmit();
                break;

            default :
                break;
        }

        if (FormDataUtil::getFormDataSource(purchLine))
        {
            FormDataUtil::getFormDataSource(purchLine).research(true);
        }

        if (_args.caller()
        && (_args.menuItemName() == menuitemActionStr(PurchLineWorkflowSubmit) ||
            _args.menuItemName() == menuitemActionStr(PurchLineWorkflowReSubmit)))
        {
            _args.caller().updateWorkFlowControls();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>