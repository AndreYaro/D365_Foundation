<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOMCopyTo</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class bomCopyTo
{
    boolean     calcLineOffset;
    LineNum     lineOffset;
    OprNum      oprOffset;

    boolean     bomUpdated;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcLineOffset</Name>
				<Source><![CDATA[
    LineNum calcLineOffset()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copySteps</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the BOM Step information from one BOM line to a new one.
    /// </summary>
    /// <param name="_copyFrom">
    /// The BOM line to copy the information from.
    /// </param>
    /// <param name="_copyTo">
    /// The BOM line to copy the information to.
    /// </param>
    /// <param name="_tableName">
    /// The name of the table that needs to be used to create the instance of <c>PmfBOMStepMap</c> map.
    /// </param>
    protected void copySteps(BOMMap _copyFrom, BOMMap _copyTo, str _tableName)
    {
        PmfBOMStepMap  fromBOMStep = _copyFrom.pmfsteps();
        PmfBOMStepMap  toBOMStep;

        while (fromBOMStep)
        {
            toBOMStep = DictTable::construct(_tableName).makeRecord();
            toBOMStep.RefRecId = _copyTo.RecId;
            toBOMStep.bomQty   = fromBOMStep.bomQty;
            toBOMStep.FromQty  = fromBOMStep.FromQty;
            toBOMStep.PdsCWQty = fromBOMStep.PdsCWQty;
            toBOMStep.insert();

            next fromBOMStep;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTo</Name>
				<Source><![CDATA[
    public void copyTo(
        BOMCopyFrom         copyFrom,
        BOMSearchBase       search,
        BOMMap              toBOMMap,
        boolean             copyRef = false
        )
    {
        lineOffset          += 1;
        toBOMMap.LineNum    =  lineOffset;
        toBOMMap.OprNum     += oprOffset;

        if (toBOMMap.TableId == tableNum(BOM))
        {
            BOM toBOM = toBOMMap;
            toBOM.LineCreationSequenceNumber = 0;
            toBOM.insert();
        }
        else
        {
            toBOMMap.insert();
        }

        bomUpdated = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultBOM</Name>
				<Source><![CDATA[
    abstract BOMMap defaultBOM()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to delete the 'to' bom
    /// </summary>
    abstract void delete()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLineOffset</Name>
				<Source><![CDATA[
    void initLineOffset()
    {
        if (calcLineOffset)
            lineOffset = this.calcLineOffset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBOMUpdated</Name>
				<Source><![CDATA[
    boolean isBOMUpdated()
    {
        return bomUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(
        OprNum          _oprOffset = 0
        )
    {
        oprOffset       = _oprOffset;
        calcLineOffset  = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcLineOffset</Name>
				<Source><![CDATA[
    public boolean parmCalcLineOffset(boolean _calcLineOffset = calcLineOffset)
    {
        calcLineOffset = _calcLineOffset;

        return calcLineOffset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCopy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Action to be performed after all BOM lines are copied.
    /// </summary>
    /// <param name="_fromBOMId">
    /// The <c>BOMId</c> from which to copy if such exists; optional.
    /// </param>
    /// <remarks>
    /// Override to execute any logic which expects all BOM lines to be copied.
    /// </remarks>
    public void postCopy(BOMId _fromBOMId = '')
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>