<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListProjTransLayoutCommittedCost</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjListProjTransLayoutCommittedCost extends ProjListProjTransLayout
{
    // Dialog
    DialogField                     dialogLevel1;
    DialogField                     dialogLevel2;
    DialogField                     dialogLevel3;
    DialogField                     dialogVoucher;
    DialogField                     dialogLedgerUpdate;

    // Packed
    ProjTransLayoutCommittedCost    level1;
    ProjTransLayoutCommittedCost    level2;
    ProjTransLayoutCommittedCost    level3;
    boolean                         voucherLine;
    boolean                         ledgerUpdate;

    // Control
    ProjTransLayoutSubscript        layoutCalled;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        level1,
        level2,
        level3,
        voucherLine,
        ledgerUpdate
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDialogColumnFields</Name>
				<Source><![CDATA[
void addDialogColumnFields(
    DialogRunbase   dialog,
    boolean         actual  = true,
    boolean         showSkipHour    = true)
{
    if (! dontShowdialog)
    {
        dialog.addGroup("@SYS91228",grpBoth);

        dialogShowAmount    = dialog.addFieldValue(enumstr(ProjShowAmount), showAmount);
        dialogVoucher       = dialog.addFieldValue(enumstr(boolean), voucherLine, "@SYS90536","@SYS90659");
    }
}
]]></Source>
			</Method>
			<Method>
				<Name>addDialogRowFields</Name>
				<Source><![CDATA[
void addDialogRowFields(DialogRunbase   dialog)
{
    if (! dontShowdialog)
    {
    grpBoth = dialog.addGroup();
    grpBoth.frameType(FormFrameType::None);
    grpBoth.columns(2);
    dialog.addGroup("@SYS91227",grpBoth);

#if.withFrontPage // Don't add the field from build 1348
    dialogPrintFrontPage    = dialog.addFieldValue(enumStr(boolean), printFrontPage, "@SYS91205","@SYS91204");
#endif

        switch (layoutCalled)
        {
            case ProjTransLayoutSubscript::Project:
                dialogLevel1 = dialog.addFieldValue(enumstr(ProjTransLayoutCommittedCost), ProjTransLayout::Project, "@SYS76966","@SYS90603");
                dialogLevel1.allowEdit(false);
                break;
            case ProjTransLayoutSubscript::Category:
                dialogLevel1 = dialog.addFieldValue(enumstr(ProjTransLayoutCommittedCost), ProjTransLayout::Category, "@SYS76966","@SYS90603");
                dialogLevel1.allowEdit(false);
                break;
            case ProjTransLayoutSubscript::ID:
                dialogLevel1 = dialog.addFieldValue(enumstr(ProjTransLayoutCommittedCost), ProjTransLayout::ID, "@SYS76966","@SYS90603");
                dialogLevel1.allowEdit(false);
                break;
            case ProjTransLayoutSubscript::ResourceCategory:
                dialogLevel1 = dialog.addFieldValue(enumstr(ProjTransLayoutCommittedCost), ProjTransLayout::ResourceCategory, "@SYS76966","@SYS90603");
                dialogLevel1.allowEdit(false);
                break;
            case ProjTransLayoutSubscript::Subscription:
                dialogLevel1 = dialog.addFieldValue(enumstr(ProjTransLayout), level1, "@SYS76966","@SYS90603");
                dialogLevel1.allowEdit(true);
                break;

            default:
                dialogLevel1 = dialog.addFieldValue(enumstr(ProjTransLayoutCommittedCost), level1, "@SYS76966","@SYS90603");
                dialogLevel1.allowEdit(true);
                break;
        }

        dialogLevel2       = dialog.addFieldValue(enumstr(ProjTransLayoutCommittedCost), level2, "@SYS76967","@SYS90604");
        dialogLevel3       = dialog.addFieldValue(enumstr(ProjTransLayoutCommittedCost), level3, "@SYS76968","@SYS90605");
    }
}
]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
public boolean getFromDialog()
{
    boolean ret;

    ret = super();

    if (! dontShowdialog)
    {
        level1         = dialogLevel1.value();
        level2         = dialogLevel2.value();
        level3         = dialogLevel3.value();

        voucherLine     = dialogVoucher.value();
        showAmount      = dialogShowAmount.value();
    }

    return ret;
}
]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
void new(ProjTransLayoutSubscript    _layoutCalled)
{
;
    super(null);
    layoutCalled    = _layoutCalled;
}
]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
public container pack()
{
    return [#CurrentVersion, #currentList] + [super()];
}
]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerUpdate</Name>
				<Source><![CDATA[
public boolean parmLedgerUpdate(boolean _ledgerUpdate = ledgerUpdate)
{
    ledgerUpdate = _ledgerUpdate;

    return ledgerUpdate;
}

]]></Source>
			</Method>
			<Method>
				<Name>parmLevel1</Name>
				<Source><![CDATA[
public ProjTransLayoutCommittedCost parmLevel1(ProjTransLayoutCommittedCost _level1 = level1)
{
    level1 = _level1;

    return level1;
}

]]></Source>
			</Method>
			<Method>
				<Name>parmLevel2</Name>
				<Source><![CDATA[
public ProjTransLayoutCommittedCost parmLevel2(ProjTransLayoutCommittedCost _level2 = level2)
{
    level2 = _level2;

    return level2;
}
]]></Source>
			</Method>
			<Method>
				<Name>parmLevel3</Name>
				<Source><![CDATA[
public ProjTransLayoutCommittedCost parmLevel3(ProjTransLayoutCommittedCost _level3 = level3)
{
    level3 = _level3;

    return level3;
}
]]></Source>
			</Method>
			<Method>
				<Name>parmVoucherLine</Name>
				<Source><![CDATA[
public boolean parmVoucherLine(boolean _voucherLine = voucherLine)
{
    voucherLine = _voucherLine;

    return voucherLine;
}

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
public boolean unpack(container _packedClass)
{
    boolean         ret;
    Integer         version    = RunBase::getVersion(_packedClass);
    container       base;

    switch (version)
    {
        case #CurrentVersion:
            [version, #currentList, base] = _packedClass;
            ret = super(base);
            break;
        default:
            ret = false;
    }

    return ret;
}
]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
boolean validate()
{
    boolean ret;

    ret = super();

    if (! level1)
    {
        // Level 1 is mandatory
        ret = checkFailed("@SYS91906");
    }

    if (ret && (level1 == level2))
    {
        // Level can only be selected once.
        ret = checkFailed("@SYS78955");
    }

    if (ret && (level1 == level3))
    {
        // Level can only be selected once.
        ret = checkFailed("@SYS78955");
    }

    if (ret && level2 && (level2 == level3))
    {
        // Level can only be selected once.
        ret = checkFailed("@SYS78955");
    }

    if (ret && level3 && !level2)
    {
        ret = checkFailed("@SYS92406");
    }

    return ret;
}
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
static ProjListProjTransLayoutCommittedCost construct(
                        ProjTransLayoutSubscript    layoutCalled )
{
    return new ProjListProjTransLayoutCommittedCost(layoutCalled);
}
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>