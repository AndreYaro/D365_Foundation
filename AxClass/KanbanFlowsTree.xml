<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanFlowsTree</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanFlowsTree</c> class is a tree structure that holds information about the specified
///    kanban flows
/// </summary>
class KanbanFlowsTree
{
    Map children;
    KanbanFlowWrapper kanbanFlowWrapper;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getChild</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the subtree rooted at the child of the specified label or creates a new subtree.
    /// </summary>
    /// <param name="_activityRecId">
    ///    The record ID the <c>PlanActivity</c> record that is the label of a subtree.
    /// </param>
    /// <param name="_createNewIfNotExists">
    ///    A Boolean value that indicates whether the new node should be created if one does not exist.
    /// </param>
    /// <returns>
    ///    A subtree rooted at the child of the node with the specified record ID; otherwise, null.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public KanbanFlowsTree getChild(RefRecId _activityRecId, boolean _createNewIfNotExists = true)
    {
        if (!children.exists(_activityRecId))
        {
            if (_createNewIfNotExists)
            {
                KanbanFlowsTree kanbanFlowsTree = new KanbanFlowsTree();
                children.insert(_activityRecId, kanbanFlowsTree);
                return kanbanFlowsTree;
            }
            else
            {
                return null;
            }
        }

        return children.lookup(_activityRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChildren</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public Map getChildren()
    {
        return children;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the instance variables of the instance of the <c>KanbanFlowsCollection</c> class.
    /// </summary>
    /// <param name="_kanbanFlowsCollection">
    ///    A collection of kanban flows from which the tree is constructed.
    /// </param>
    /// <remarks>
    ///    Every kanban flow is represented as a path in this tree from a root (which is actual node) to one
    ///    of the leafs. Activities are nodes in this tree connected by relationships.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void init(KanbanFlowsCollection _kanbanFlowsCollection)
    {
        if (_kanbanFlowsCollection)
        {
            ListEnumerator flowListEnumerator = _kanbanFlowsCollection.kanbanFlowsList().getEnumerator();

            while (flowListEnumerator.moveNext())
            {
                KanbanFlowWrapper actKanbanFlowWrapper = flowListEnumerator.current();

                List kanbanFlowActivityRelationsList = actKanbanFlowWrapper.relationsList();
                ListEnumerator relationsListEnumerator = kanbanFlowActivityRelationsList.getEnumerator();
                KanbanFlowsTree actTree = this;

                // adding new kanban flow by going down through the tree
                while (relationsListEnumerator.moveNext())
                {
                    LeanActivityRelationshipWrapper leanActivityRelationshipWrapper = relationsListEnumerator.current();

                    // finds (or creates a new) child on the path
                    actTree = actTree.getChild(leanActivityRelationshipWrapper.parmDependentActivityRecId());
                }

                actTree.parmKanbanFlowWrapper(actKanbanFlowWrapper);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void new()
    {
        children = new Map(Types::Int64, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanFlowWrapper</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public KanbanFlowWrapper parmKanbanFlowWrapper(KanbanFlowWrapper _kanbanFlowWrapper = kanbanFlowWrapper)
    {
        kanbanFlowWrapper = _kanbanFlowWrapper;

        return kanbanFlowWrapper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static KanbanFlowsTree construct()
    {
        return new KanbanFlowsTree();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
