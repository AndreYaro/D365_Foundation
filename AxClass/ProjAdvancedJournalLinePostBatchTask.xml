<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjAdvancedJournalLinePostBatchTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// A task for generating invoice proposals that can run in Batch.
/// </summary>
public class ProjAdvancedJournalLinePostBatchTask extends RunBaseBatch implements BatchRetryable
{
    private int totalLinesInTask = 0;
    private int configuredMaxLinesPerTask;
    private Set linesToPost;
    private projAdvancedJournal projAdvancedJournal;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        projAdvancedJournal
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>Construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of this class that can be used to generate multiple batch tasks for advanced journal line posting.
    /// </summary>
    /// <param name = "_maxLinesPerTask">Maximum number of lines per task</param>
    /// <param name = "_projAdvancedJournal">An instance of <c>ProjAdvancedJournal</c></param>
    /// <returns>A task that can journalize and post a list of advanced journal lines</returns>
    public static ProjAdvancedJournalLinePostBatchTask Construct(int _maxLinesPerTask, ProjAdvancedJournal _projAdvancedJournal)
    {
        ProjAdvancedJournalLinePostBatchTask batch = new ProjAdvancedJournalLinePostBatchTask();
        batch.linesToPost = new Set(Types::Int64);
        batch.configuredMaxLinesPerTask = _maxLinesPerTask;
        batch.totalLinesInTask = 0;
        batch.projAdvancedJournal= _projAdvancedJournal;
        return batch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, configuredMaxLinesPerTask, linesToPost.pack(), #CurrentList, totalLinesInTask];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        if (conPeek(_packedClass, 1) != #CurrentVersion)
        {
            return false;
        }

        configuredMaxLinesPerTask = conPeek(_packedClass, 2);
        linesToPost = Set::create(conPeek(_packedClass, 3));
        projAdvancedJournal = conPeek(_packedClass, 4);
        totalLinesInTask = conPeek(_packedClass, 5);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLine</Name>
				<Source><![CDATA[
    public void addLine(projAdvancedJournalLine _projAdvancedJournalLine)
    {
        linesToPost.add(_projAdvancedJournalLine.RecId);
        totalLinesInTask++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taskIsFull</Name>
				<Source><![CDATA[
    public boolean taskIsFull()
    {
        if (totalLinesInTask >= configuredMaxLinesPerTask)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount;

        ProjOpsIntegrationLogger logger = ProjOpsIntegrationLogger::createLogger(classStr(ProjAdvancedJournalLinePostBatchTask));
        using (var activityContext = logger.integrationJournalActivity().postAdvancedJournalContext())
        {
            SetIterator recordsIterator = new SetIterator(linesToPost);

            ProjAdvancedJournalPost projAdvancedJournalPost = ProjAdvancedJournalPost::construct(this.projAdvancedJournal);

            boolean enableProjAdvancedJournalErrorTransferFeature = FeatureStateProvider::isFeatureEnabled(ProjEnableAdvancedJournalErrorTransferFeature::instance());
            
            if (enableProjAdvancedJournalErrorTransferFeature)
            {
                activityContext.addCustomProperty(ProjOpsIntegrationJournalInstrumentationActivites::ProductReceiptParmStatus, any2Str(VendParameters::find().PostPackingSlip));
                activityContext.addCustomProperty(ProjOpsIntegrationJournalInstrumentationActivites::AdvancedJournalId, projAdvancedJournal.ProjAdvancedJournalId);
                activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::ActionProperty, 'Processing batch line task with error lines transferred');
                activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::IsBatch, 'True');
                activityContext.addCustomProperty(ProjOpsIntegrationJournalInstrumentationActivites::NumOfJournalLines, int2Str(totalLinesInTask));

                while (recordsIterator.more())
                {
                    ProjAdvancedJournalLine projAdvancedJournalLine = projAdvancedJournalLine::find(recordsIterator.value(), true);
                    projAdvancedJournalLine.reread();
                    SourceDocumentLineImplementationList sourceDocumentLineImplementationList = SourceDocumentLineImplementationList::construct();
                    sourceDocumentLineImplementationList.addEnd(projAdvancedJournalLine);

                    try
                    {
                        if (!projAdvancedJournalPost.checkProjAdvancedJournalLineV2(projAdvancedJournalLine))
                        {
                            throw Exception::error;
                        }
                        const SourceDocumentProcessorCaller NullCaller = null;
                        const boolean updateImplementationFalse = false;
                        const boolean transitionToCompletedStateAccountFullyQualifiedValidationTrue = true;
                       
                        ttsbegin;
                        // Process tax for line to be processed
                        ProjAdvancedJournalPost::processTaxesForLine(projAdvancedJournalLine);

                        // Submit source document with line to be processed
                        SourceDocumentProcessorFacade::submitSourceDocumentImplementation
                          (projAdvancedJournal,
                           updateImplementationFalse,
                           SourceDocumentAccountingStatus::Completed,
                           NullCaller,
                           curUserId(),
                           transitionToCompletedStateAccountFullyQualifiedValidationTrue,
                           sourceDocumentLineImplementationList);
 
                        ttscommit;
                    }
                    catch (Exception::Deadlock)
                    {
                        int currRetryCount = xSession::currentRetryCount();
                        if (currRetryCount >= #RetryNum)
                        {
                            logger.logError(strFmt("@Proj:ProjAdvancedJournalPostingError", this.parmCurrentBatch(), projAdvancedJournal.ProjAdvancedJournalId, totalLinesInTask, "Deadlock", currRetryCount));
                            throw Exception::Deadlock;
                        }
                        else
                        {
                            logger.logError(strFmt("@Proj:ProjAdvancedJournalPostingError", this.parmCurrentBatch(), projAdvancedJournal.ProjAdvancedJournalId, totalLinesInTask, "Deadlock - retrying", currRetryCount));
                            retry;
                        }
                    }
                    catch (Exception::UpdateConflict)
                    {
                        int currRetryCount = xSession::currentRetryCount();
                        if (appl.ttsLevel() == 0)
                        {
                            if (xSession::currentRetryCount() >= #RetryNum)
                            {
                                logger.logError(strFmt("@Proj:ProjAdvancedJournalPostingError", this.parmCurrentBatch(), projAdvancedJournal.ProjAdvancedJournalId, totalLinesInTask, "Update conflict not recovered", currRetryCount));
                                throw Exception::UpdateConflictNotRecovered;
                            }
                            else
                            {
                                logger.logError(strFmt("@Proj:ProjAdvancedJournalPostingError", this.parmCurrentBatch(), projAdvancedJournal.ProjAdvancedJournalId, totalLinesInTask, "Update conflict - retrying", currRetryCount));
                                retry;
                            }
                        }
                        else
                        {
                            logger.logError(strFmt("@Proj:ProjAdvancedJournalPostingError", this.parmCurrentBatch(), projAdvancedJournal.ProjAdvancedJournalId, totalLinesInTask, "Update conflict", currRetryCount));
                            throw Exception::UpdateConflict;
                        }
                    }
                    catch (Exception::TransientSqlConnectionError)
                    {
                        int currRetryCount = xSession::currentRetryCount();
                        if (ProjTransientSQLConnectionRetryProvider::retryTransientSqlConnectionError())
                        {
                            retry;
                        }
                        else
                        {
                            logger.logError(strFmt("@Proj:ProjAdvancedJournalPostingError", this.parmCurrentBatch(), projAdvancedJournal.ProjAdvancedJournalId,  totalLinesInTask, Exception::TransientSqlConnectionError, currRetryCount));
                            throw Exception::TransientSqlConnectionError;
                        }
                    }
                    catch (Exception::Error)
                    {
                        int currRetryCount = xSession::currentRetryCount();
                        logger.logError(strFmt("@Proj:ProjAdvancedJournalPostingError", this.parmCurrentBatch(), projAdvancedJournal.ProjAdvancedJournalId, totalLinesInTask, Exception::Error, currRetryCount));

                        projAdvancedJournalLine.PostError = NoYes::Yes;
                        ttsbegin;
                        projAdvancedJournalLine.doUpdate();
                        ttscommit;

                        logger.logInformation(strFmt("@Proj:ProjOpsIntegrationJournalLinePostingFailureMessage", projAdvancedJournal.ProjAdvancedJournalId, any2Str(projAdvancedJournalLine.RecId)));
                    }
                    
                    recordsIterator.next();
                }
            }
            else
            {
                SourceDocumentLineImplementationList sourceDocumentLineImplementationList = SourceDocumentLineImplementationList::construct();

                try
                {
                    activityContext.addCustomProperty(ProjOpsIntegrationJournalInstrumentationActivites::AdvancedJournalId, projAdvancedJournal.ProjAdvancedJournalId);
                    activityContext.addCustomProperty(ProjOpsIntegrationJournalInstrumentationActivites::NumOfJournalLines, int2Str(sourceDocumentLineImplementationList.elements()));
                    activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::ActionProperty, 'Processing batch line task');
                    activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::IsBatch, 'True');
                    activityContext.addCustomProperty(ProjOpsIntegrationJournalInstrumentationActivites::NumOfJournalLines, int2Str(totalLinesInTask));
                    
                    ttsbegin;

                    while (recordsIterator.more())
                    {
                        ProjAdvancedJournalLine projAdvancedJournalLine = projAdvancedJournalLine::find(recordsIterator.value());
                        projAdvancedJournalLine.reread();
                        if (!projAdvancedJournalPost.checkProjAdvancedJournalLineV2(projAdvancedJournalLine))
                        {
                            throw error(strFmt("@Proj:ProjAdvancedJournalPostingCancelled", projAdvancedJournal.ProjAdvancedJournalId));
                        }
                        sourceDocumentLineImplementationList.addEnd(projAdvancedJournalLine);

                        // Process tax for line to be processed
                        ProjAdvancedJournalPost::processTaxesForLine(projAdvancedJournalLine);

                        recordsIterator.next();
                    }

                    const SourceDocumentProcessorCaller NullCaller = null;
                    const boolean updateImplementationFalse = false;
                    const boolean transitionToCompletedStateAccountFullyQualifiedValidationTrue = true;

                    // Submit source document with lines to be processed
                    SourceDocumentProcessorFacade::submitSourceDocumentImplementation(projAdvancedJournal,
                                                                              updateImplementationFalse,
                                                                              SourceDocumentAccountingStatus::Completed,
                                                                              NullCaller,
                                                                              curUserId(),
                                                                              transitionToCompletedStateAccountFullyQualifiedValidationTrue,
                                                                              sourceDocumentLineImplementationList);

                    ttscommit;
                }
                catch (Exception::Deadlock)
                {
                    int currRetryCount = xSession::currentRetryCount();
                    if (currRetryCount >= #RetryNum)
                    {
                        logger.logError(strFmt("@Proj:ProjAdvancedJournalPostingError", this.parmCurrentBatch(), projAdvancedJournal.ProjAdvancedJournalId, totalLinesInTask, "Deadlock", currRetryCount));
                        throw Exception::Deadlock;
                    }
                    else
                    {
                        logger.logError(strFmt("@Proj:ProjAdvancedJournalPostingError", this.parmCurrentBatch(), projAdvancedJournal.ProjAdvancedJournalId, totalLinesInTask, "Deadlock - retrying", currRetryCount));
                        sleep(ProjConstants::DeadLockRetryInterval * xSession::currentRetryCount());
                        retry;
                    }
                }
                catch (Exception::UpdateConflict)
                {
                    int currRetryCount = xSession::currentRetryCount();
                    if (appl.ttsLevel() == 0)
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            logger.logError(strFmt("@Proj:ProjAdvancedJournalPostingError", this.parmCurrentBatch(), projAdvancedJournal.ProjAdvancedJournalId, totalLinesInTask, "Update conflict not recovered", currRetryCount));
                            throw Exception::UpdateConflictNotRecovered;
                        }
                        else
                        {
                            logger.logError(strFmt("@Proj:ProjAdvancedJournalPostingError", this.parmCurrentBatch(), projAdvancedJournal.ProjAdvancedJournalId, totalLinesInTask, "Update conflict - retrying", currRetryCount));
                            retry;
                        }
                    }
                    else
                    {
                        logger.logError(strFmt("@Proj:ProjAdvancedJournalPostingError", this.parmCurrentBatch(), projAdvancedJournal.ProjAdvancedJournalId, totalLinesInTask, "Update conflict", currRetryCount));
                        throw Exception::UpdateConflict;
                    }
                }
                catch (Exception::TransientSqlConnectionError)
                {
                    int currRetryCount = xSession::currentRetryCount();
                    if (ProjTransientSQLConnectionRetryProvider::retryTransientSqlConnectionError())
                    {
                        retry;
                    }
                    else
                    {
                        logger.logError(strFmt("@Proj:ProjAdvancedJournalPostingError", this.parmCurrentBatch(), projAdvancedJournal.ProjAdvancedJournalId,  totalLinesInTask, Exception::TransientSqlConnectionError, currRetryCount));
                        throw Exception::TransientSqlConnectionError;
                    }
                }
                catch (Exception::Error)
                {
                    int currRetryCount = xSession::currentRetryCount();
                    logger.logError(strFmt("@Proj:ProjAdvancedJournalPostingError", this.parmCurrentBatch(), projAdvancedJournal.ProjAdvancedJournalId, totalLinesInTask, Exception::Error, currRetryCount));
                    throw Exception::Error;
                }
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    public boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    public static ProjAdvancedJournalLinePostBatchTask create(container _packedObject)
    {
        ProjAdvancedJournalLinePostBatchTask proposalBatch = new projAdvancedJournalLinePostBatchTask();
        proposalBatch.unpack(_packedObject);
        return proposalBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>