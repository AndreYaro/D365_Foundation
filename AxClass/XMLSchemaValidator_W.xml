<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>XMLSchemaValidator_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Xml.Schema;
using System.IO;

public class XMLSchemaValidator_W
{
    private XmlSchemaSet schemaSet;
    private List warningList;
    private List errorList;
    private ValidationEventHandler validationErrorHandler;
    private System.Xml.Linq.XDocument xDoc;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static XMLSchemaValidator_W construct()
    {
        return new XMLSchemaValidator_W();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getErrorList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns list of strings with error messages collected during validation
    /// </summary>
    /// <returns>List of error messages</returns>
    public List getErrorList()
    {
        return errorList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWarningList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns list of strings with warning messages collected during validation
    /// </summary>
    /// <returns>List of warning messages</returns>
    public List getWarningList()
    {
        return warningList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasErrors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether errors found during validation
    /// </summary>
    /// <returns>true if errors found, otherwise false</returns>
    public boolean hasErrors()
    {
        return errorList.elements() != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryAddSchemaFromString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tries to add schema into collection used to validate XML
    /// </summary>
    /// <param name = "_schemaString">String representation of XML schema</param>
    /// <param name = "_targetNameSpace">The namespace URI associated with the schema. For XML Schemas, this will typically be the targetNamespace.</param>
    /// <param name = "_settings">The settings for the <c>System.Xml.XmlReader</c> internal instance. This value can be null.</param>
    /// <remarks>
    /// Can be used to validate schema itself. Adds infolog messages without throwing and returns false if errors found.
    /// If <paramref>_targetNameSpace</paramref> is null, uses the targetNamespace defined in the XML Schema to identify the schema in the collection.
    /// If the schema being added contains references to other namespaces (through include and import elements), they will be loaded for validation purposes.
    /// </remarks>
    /// <returns>true if schema was successfully loaded, otherwise false</returns>
    public boolean tryAddSchemaFromString(str _schemaString, str _targetNameSpace = '', System.Xml.XmlReaderSettings _settings = null)
    {
        Stream stream = this.createStreamFromString(_schemaString);
        return this.tryAddSchemaFromStream(stream, _targetNameSpace, _settings);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateXMLString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates XML passed into <paramref>_xml</paramref> parameter.
    /// By default, populates infolog messages with all found errors and warnings and then throws in case of error found.
    /// </summary>
    /// <param name = "_xml">String representation of XML to be validated</param>
    /// <param name = "_populateInfologMessages">
    /// Determines whether to populate infolog messages with errors and warnings found.
    /// Please, pass false and use <c>getErrorList</c> and <c>getWarningList</c> or <c>populateInfologMessages</c> to handle errors and warnings manually.
    /// </param>
    /// <param name = "_throwIfError">
    /// Determines whether to throw if error found during validation.
    /// Please, use <c>hasErrors</c> method after validation to recognize status, if false passed.
    /// </param>
    public void validateXMLString(str _xml, boolean _populateInfologMessages = true, boolean _throwIfError = true)
    {
        xDoc = System.Xml.Linq.XDocument::Parse(_xml);
        this.validateXML();
        if (_populateInfologMessages)
        {
            this.populateInfologMessages();
        }
        if (_throwIfError && this.hasErrors())
        {
            throw error("@SYS341173");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInfologMessages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds error and warning messages to infolog.
    /// </summary>
    /// <param name = "_errorsOnly">
    /// Determines whether to display warning messages.true to display only error messages, 
    /// false to display error and warning messages.
    /// </param>
    public void populateInfologMessages(boolean _errorsOnly = false)
    {
        if (!_errorsOnly && warningList.elements())
        {
            ListEnumerator enumerator = warningList.getEnumerator();
            while (enumerator.moveNext())
            {
                Warning(enumerator.current());
            }
        }

        if (errorList.elements())
        {
            ListEnumerator enumerator = errorList.getEnumerator();
            while (enumerator.moveNext())
            {
                error(enumerator.current());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleIncorrectSchemas</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles incorrect XSD schemas in a schema set.
    /// </summary>
    /// <returns>true if schema set is compiled and not empty; otherwise false.</returns>
    public boolean handleIncorrectSchemas()
    {
        boolean isSchemaSetValid = false;

        while (!isSchemaSetValid)
        {
            try
            {
                if (schemaSet.Count == 0)
                {
                    break;
                }

                schemaSet.Compile();

                if (schemaSet.IsCompiled)
                {
                    isSchemaSetValid = true;
                }
            }
            catch (Exception::CLRError)
            {
                System.Xml.Schema.XmlSchema incorrectSchema = this.handleCLRException();

                if (incorrectSchema)
                {
                    schemaSet.Remove(incorrectSchema);
                    warning(strFmt("@EM_SchemaValidation:SchemaWasRemoved", incorrectSchema.TargetNamespace));
                }
            }
        }

        return isSchemaSetValid && schemaSet.Count > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryAddSchemaFromStream</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tries to add schema into collection used to validate XML
    /// </summary>
    /// <param name = "_stream">The stream contains schema</param>
    /// <param name = "_targetNameSpace">The namespace URI associated with the schema. For XML Schemas, this will typically be the targetNamespace.</param>
    /// <param name = "_settings">The settings for the <c>System.Xml.XmlReader</c> internal instance. This value can be null.</param>
    /// <returns>true if schema was successfully loaded, otherwise false</returns>
    /// <remarks>
    /// Can be used to validate schema itself. Adds infolog messages without throwing and returns false if errors found.
    /// If <paramref>_targetNameSpace</paramref> is null, uses the targetNamespace defined in the XML Schema to identify the schema in the collection.
    /// If the schema being added contains references to other namespaces (through include and import elements), they will be loaded for validation purposes.
    /// </remarks>
    public boolean tryAddSchemaFromStream(Stream _stream, str _targetNameSpace = '', System.Xml.XmlReaderSettings _settings = null)
    {
        boolean ret;
        try
        {
            using (System.Xml.XmlReader xmlReader = this.createXMLReaderFromStream(_stream, _settings))
            {
                System.Xml.Schema.XmlSchema schema = System.Xml.Schema.XmlSchema::Read(xmlReader, validationErrorHandler);
                if (_targetNameSpace)
                {
                    schema.TargetNamespace = _targetNameSpace;
                }

                schemaSet.Add(schema);

                ret = true;
            }
        }
        catch(Exception::CLRError)
        {
            this.handleCLRException();
        }
        finally
        {
            _stream.Close();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryAddSchemaArchiveFromStream</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tries to add schema archive into collection used to validate XML.
    /// </summary>
    /// <param name = "_stream">The stream containing schemas archive.</param>
    /// <param name = "_targetNameSpace">The namespace URI associated with the schema. For XML Schemas, this will typically be the targetNamespace.</param>
    /// <param name = "_settings">The settings for the <c>System.Xml.XmlReader</c> internal instance. This value can be null.</param>
    /// <returns>true if at least one schema was successfully loaded; otherwise false.</returns>
    public boolean tryAddSchemaArchiveFromStream(System.IO.Stream _stream, str _targetNameSpace = '', System.Xml.XmlReaderSettings _settings = null)
    {
        boolean schemasAdded;

        try
        {
            using (System.IO.Compression.ZipArchive zipArchive = new System.IO.Compression.ZipArchive(_stream, System.IO.Compression.ZipArchiveMode::Read, true))
            {
                var entriesEnumerator = zipArchive.Entries.GetEnumerator();

                while (entriesEnumerator.MoveNext())
                {
                    System.String xmlFileName = entriesEnumerator.get_Current().Name;

                    if (!xmlFileName.EndsWith('.xsd', System.StringComparison::OrdinalIgnoreCase))
                    {
                        continue;
                    }

                    using (var xmlFileStream = new System.IO.MemoryStream())
                    {
                        entriesEnumerator.get_Current().Open().CopyTo(xmlFileStream);
                        xmlFileStream.Seek(0, System.IO.SeekOrigin::Begin);

                        if (this.tryAddSchemaFromStream(xmlFileStream, _targetNameSpace, _settings))
                        {
                            schemasAdded = true;
                        }
                    }
                }
            }
        }
        catch (Exception::CLRError)
        {
            this.handleCLRException();
        }

        return schemasAdded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryAddSchemaFromUri</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the schema located by the given URL into the schema collection used to validate XML.
    /// </summary>
    /// <param name = "_targetNamespace">The namespace URI associated with the schema. For XML Schemas, this will typically be the targetNamespace.</param>
    /// <param name = "_schemaUri">The URL that specifies the schema to load.</param>
    /// <returns>true if schema was successfully loaded, otherwise false</returns>
    /// <remarks>If <paramref>_targetNamespace</paramref> has already been associated with another schema in the collection, the schema being added replaces the original schema in the collection.
    /// </remarks>
    public boolean tryAddSchemaFromUri(str _targetNamespace, str _schemaUri)
    {
        boolean ret;
        try
        {
            schemaSet.Add(_targetNamespace, _schemaUri);
            ret = true;
        }
        catch(Exception::CLRError)
        {
            this.handleCLRException();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleCLRException</Name>
				<Source><![CDATA[
    private System.Xml.Schema.XmlSchema handleCLRException()
    {
        System.Xml.Schema.XmlSchema incorrectSchema;

        System.Exception e = CLRInterop::getLastException();
        str exceptionMessage;
        boolean xmlExceptionCaught;
        while(e)
        {
            if (e is System.Xml.XmlException)
            {
                error(strFmt("@SYS90134", e.get_Message()));
                xmlExceptionCaught = true;
                break;
            }
            else if (e is System.Xml.Schema.XmlSchemaException)
            {
                System.Xml.Schema.XmlSchemaException xmlException = e;
                System.Xml.Schema.XmlSchemaObject obj = xmlException.SourceSchemaObject;

                if (obj)
                {
                    while (obj.Parent != null)
                    {
                        obj = obj.Parent;
                    }

                    if (obj is System.Xml.Schema.XmlSchema)
                    {
                        incorrectSchema = obj;

                        exceptionMessage = strFmt(
                            "@EM_SchemaValidation:SchemaContainsErrors",
                            incorrectSchema.TargetNamespace,
                            xmlException.LineNumber,
                            xmlException.LinePosition,
                            xmlException.Message);

                        warning(exceptionMessage);
                    }
                    else
                    {
                        exceptionMessage += ' ' + xmlException.Message;
                    }

                    xmlExceptionCaught = true;
                    break;
                }
                else
                {
                    e = e.get_InnerException();
                }
            }
            else
            {
                exceptionMessage += ' ' + e.get_Message();
                e = e.get_InnerException();
            }
        }
        if (!xmlExceptionCaught)
        {
            error(strFmt("@SYS97037", exceptionMessage));
        }

        return incorrectSchema;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXMLReaderFromStream</Name>
				<Source><![CDATA[
    private System.Xml.XmlReader createXMLReaderFromStream(Stream _stream, System.Xml.XmlReaderSettings _settings = null)
    {
        System.Xml.XmlReader ret;
        if (_settings)
        {
            ret = System.Xml.XmlReader::Create(_stream, _settings);
        }
        else
        {
            ret = System.Xml.XmlReader::Create(_stream);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createStreamFromString</Name>
				<Source><![CDATA[
    protected Stream createStreamFromString(str _xmlString)
    {
        return new MemoryStream(System.Text.Encoding::UTF8.GetBytes(_xmlString));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        schemaSet = new XmlSchemaSet();
        validationErrorHandler += eventhandler(this.validationHandler);
        warningList = new List(Types::String);
        errorList = new List(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateXml</Name>
				<Source><![CDATA[
    protected void validateXml()
    {
        if (warningList.elements() > 0)
        {
            warningList = new List(Types::String);
        }

        if (errorList.elements() > 0)
        {
            errorList = new List(Types::String);
        }

        Extensions::Validate(xDoc, schemaSet, validationErrorHandler);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validationHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Matches the <c>ValidationEventHandler</c> delegate. This method is called by schema validation whenever an error or warning found.
    /// </summary>
    /// <param name = "_sender">The sender</param>
    /// <param name = "e">Contains information about the schema validation error that ocurred</param>
    protected void validationHandler(System.Object _sender, ValidationEventArgs _eventArgs)
    {
        switch(_eventArgs.Severity)
        {
            case XmlSeverityType::Error:
                errorList.addEnd(_eventArgs.Message);
                break;
            case XmlSeverityType::Warning:
                warningList.addEnd(_eventArgs.Message);
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>