<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSSlotDemandLocateLocationsPerItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSSlotDecmandLocateLocationsPerItem</c> is used to determine if item can be located to the same location during 
/// slotting process if <c>WHSSlotMixedUnitsFeature</c> feature is turned on.
/// </summary>
internal final class WHSSlotDemandLocateLocationsPerItem
{
    private ItemId itemId;
    private InventDimId inventDimId;
    private UnitOfMeasureSymbol uom;
    private Qty qty;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSSlotDemandLocateLocationsPerItem construct(ItemId _itemId,
                                                                InventDimId _inventDimId,
                                                                UnitOfMeasureSymbol _uom,
                                                                Qty _qty)
    {
        WHSSlotDemandLocateLocationsPerItem result = new WHSSlotDemandLocateLocationsPerItem();
        result.itemId = _itemId;
        result.inventDimId = _inventDimId;
        result.uom = _uom;
        result.qty = _qty;

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSameItem</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean isSameItem(ItemId _itemId, InventDimId _inventDimId)
    {
        return this.itemId == _itemId && this.inventDimId == _inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>merge</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSSlotDemandLocateLocationsPerItem merge(WHSSlotDemandLocateLocationsPerItem _other)
    {
        EcoResProductUnitConverter locatedProductUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(_other.itemId, _other.inventDimId, this.uom, _other.uom, NoYes::No, NoYes::No);

        this.uom = _other.uom;
        this.qty = _other.qty + locatedProductUnitConverter.convertValue(this.qty);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Qty parmQty(Qty _qty = qty)
    {
        qty = _qty;
        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitOfMeasure</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal UnitOfMeasureSymbol parmUnitOfMeasure(UnitOfMeasureSymbol _uom = uom)
    {
        uom = _uom;
        return uom;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>