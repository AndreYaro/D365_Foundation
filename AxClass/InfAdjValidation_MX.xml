<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InfAdjValidation_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InfAdjValidation_MX</c> class is the class for any generic Mexican calculation.
/// </summary>
/// <remarks>
///    This class is the global class for all generic Mexican calculations.
/// </remarks>
class InfAdjValidation_MX
{
    FromDate    startDate;
    ToDate      endDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the necessary setup before the start of the inflation adjustment process.
    /// </summary>
    /// <param name="_fromDate">
    ///    The start date to check for the INPC rate for the month and year.
    /// </param>
    /// <param name="_toDate">
    ///    The end date to check for the INPC rate for the month and year.
    /// </param>
    /// <remarks>
    ///    This step is optional. It is used to validate the necessary setup before the start of the inflation
    ///    adjustment process.
    /// </remarks>
    private void run(
        FromDate _fromDate,
        ToDate   _toDate)
    {
        ToDate  toDate;
        boolean ret = true;

        startDate = _fromDate;
        endDate   = _toDate;
        toDate    = startDate - 1;

        ret = this.validateInflationRate(mkdate(1, mthofyr(toDate), year(toDate)), toDate, InfAdjValidation_MX::monthDifference(_fromDate, _toDate) + 1);
        ret = ret && this.validateAccounts();

        if (ret)
        {
            info("@SYS312353");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the Repomo and inflation offset account has been set.
    /// </summary>
    /// <returns>
    ///    true if there are no errors in the validation; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This step is used as a pre-check before the start of the inflation adjustment process.
    /// </remarks>
    public boolean validateAccounts()
    {
        boolean ret = true;

        if (!LedgerParameters::find().RepomoMainAccount_MX
            || !LedgerParameters::find().ReExpressionMainAccount_MX)
        {
            ret = checkFailed("@SYS312852");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInflationRate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the INPC rates are available within the date range.
    /// </summary>
    /// <param name="_fromDate">
    ///    The start date to check for the INPC rate for the month and year.
    /// </param>
    /// <param name="_toDate">
    ///    The end date to check for the INPC rate for the month and year.
    /// </param>
    /// <param name="_monthDiff">
    ///    The difference in months between the start and end dates.
    /// </param>
    /// <returns>
    ///    true if the INPC rates are found for the date range; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This step is used as a pre-check before the start of the inflation adjustment process.
    /// </remarks>
    public boolean validateInflationRate(
        FromDate _fromDate,
        ToDate   _toDate,
        int      _monthDiff)
    {
        InpcRate_MX inflationRate;
        FromDate    fromDate;
        ToDate      toDate;
        int         currentMonth = 1;
        boolean     ret = true;

        fromDate = _fromDate;
        toDate   = _toDate;

        while (currentMonth <= _monthDiff)
        {
            inflationRate = InpcRateTable_MX::findByYearMonth(year(fromDate), mthofyr(fromDate)).InflationRate;

            if (inflationRate == 0)
            {
                ret = checkFailed(strfmt("@SYS312866", mthname(mthofyr(fromDate)), year(fromDate)));
            }

            fromDate = toDate + 1;
            toDate   = endmth(fromDate);

            currentMonth ++ ;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMainAccountClosed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the Closed checkbox cannot be marked when the main account is marked for
    ///    inflation adjustment.
    /// </summary>
    /// <param name="_isClosed">
    ///    The value of the Closed checkbox in the main account.
    /// </param>
    /// <param name="_isInflationAdjustment">
    ///    The value of the B-10 adjustment checkbox in the main account.
    /// </param>
    /// <returns>
    ///    true if the validation is successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This validation is used when both the Closed and the B-10 adjustment checkboxes are marked.
    /// </remarks>
    public static boolean isMainAccountClosed(
        NoYes _isClosed,
        NoYes _isInflationAdjustment)
    {
        boolean ret = true;

        if (_isClosed && _isInflationAdjustment)
        {
            ret = checkFailed("@SYS315862");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        InflationAdjustmentJournal_MX   infAdjJournal;
        formRun                         formRun;
        DialogRunbase                   dialogRunbase;
        FromDate                        fromDate;
        ToDate                          toDate;
        InfAdjValidation_MX             infAdjValidation = new InfAdjValidation_MX();

        if (!args.caller())
        {
            throw error(strfmt("@SYS22828", funcname()));
        }

        formRun = args.caller() as FormRun;
        dialogRunbase = formRun.args().caller() as DialogRunbase;
        infAdjJournal = dialogRunbase.caller() as InflationAdjustmentJournal_MX;

        if (!infAdjJournal)
        {
            throw error(strfmt("@SYS22828", funcname()));
        }

        fromDate = infAdjJournal.parmFromDate();
        toDate = infAdjJournal.parmToDate();

        infAdjValidation.run(fromDate, toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>monthDifference</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the difference between two dates in month units.
    /// </summary>
    /// <param name="_fromDate">
    ///    The from date from which to calculate the difference.
    /// </param>
    /// <param name="_toDate">
    ///    The to date to which to calculate the difference.
    /// </param>
    /// <returns>
    ///    The difference between two dates in month units.
    /// </returns>
    public static int monthDifference(
        FromDate _fromDate,
        ToDate   _toDate)
    {
        real        fractionStartMonth;
        real        fractionEndMonth;
        int         monthDiff;

        if (_toDate < _fromDate)
        {
            return 0;
        }

        fractionStartMonth = dayofmth(_fromDate)/ dayofmth(endmth(_fromDate));
        fractionEndMonth   = dayofmth(_toDate  )/ dayofmth(endmth(_toDate  ));

        monthDiff = any2int(roundDown((fractionEndMonth    + mthofyr(_toDate)     + year(_toDate)  *12) -
                                      (fractionStartMonth  + mthofyr(_fromDate)   + year(_fromDate)*12), 1));

        monthDiff += 1;

        return monthDiff;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>