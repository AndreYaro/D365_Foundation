<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerInquiryTrialBalance_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the ledger inquiry trail balance.
/// </summary>
class LedgerInquiryTrialBalance_CN extends RunBaseBatch implements BatchRetryable
{
    #MacroLib.File
    DialogField             dialogFieldFiscalYear;
    DialogField             dialogFieldFiscalPeriod;
    DialogField             dialogVoucher;
    DialogField             dialogVoucherCN;
    DialogField             dialogVoucherType;
    DialogField             dialogLevel;

    TmpGeneralLedger_CN     tmpGeneralLedger_CN;
    FiscalYearName          fiscalYearName;
    PeriodName              fiscalPeriodName;
    Voucher                 voucher;
    Voucher_CN              voucherCN;
    LedgerVoucherTypeId_CN  voucherType;
    Level                   levelMin;

    Counter                 numOfLines;
    container               curCode;
    Amount                  amountDebit[];
    Amount                  amountCredit[];
    Amount                  amountDebitMST[];
    Amount                  amountCreditMST[];
    QueryRun                queryRun;
    Set                     accountSet;
    Set                     voucherTypeSet;
    SetIterator             accountIt;
    NoYes                   summaryExistTrans;
    CurrencyCode            companyCurrencyCode;
    LedgerParameters        ledgerParameters;
    boolean                 isTreeStructureEnabled;
    TransDate               periodStart;
    TransDate               periodEnd;

    LedgerInquiryDialogHelper_CN    ledgerInquiryDialogHelperCN;

    LedgerAccountUtility_CN         accountUtility;
    LedgerSeparator_CN              ledgerSeparator;
    TempStr                         ledgerSeparatorChar;
    recId                           ledgerChartOfAccountsRecId;

    #define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        fiscalYearName,
        fiscalPeriodName,
        voucher,
        voucherCN,
        voucherType,
        levelMin
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>convetMonthToStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert month to string.
    /// </summary>
    /// <param name="_transDate">
    /// Transaction date.
    /// </param>
    /// <returns>
    /// Period month.
    /// </returns>
    public MonthName convetMonthToStr(TransDate _transDate)
    {
        MonthName periodMonth;

        periodMonth = int2str(mthofyr(_transDate));

        return periodMonth;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convetYearToStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Coverts year to string.
    /// </summary>
    /// <param name="_transDate">
    /// The transaction date of generaljournal line.
    /// </param>
    /// <returns>
    /// year of period string.
    /// </returns>
    public DateDayName convetYearToStr(TransDate _transDate)
    {
        DateDayName periodYear;

        periodYear = int2str(year(_transDate));

        return periodYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPeriodBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create period balance for all general journal lines.
    /// </summary>
    public void createPeriodBalances()
    {
        MainAccount                     mainAccount;
        GeneralJournalEntry             generalJournalEntry;
        GeneralJournalEntry_W           generalJournalEntryW;
        GeneralJournalAccountEntry      generalJournalAccountEntry;

        RefRecId                        oldRecId;
        Query                           queryAccount;
        QueryBuildRange                 rangeAccount;
        QueryBuildDataSource            dsAccount;
        NoYes                           hasTrans;
        NoYes                           displayFinalSum;
        Integer                         accountTypeNum;
        AmountMST                       totalSummaryDR;
        AmountMST                       totalSummaryCR;
        AmountMST                       totalTotalDR;
        AmountMST                       totalTotalCR;
        MainAccountNum                  tempMainAccountNum;
        Level                           accountLevel;

        accountIt       = new SetIterator(accountSet);
        queryAccount    = queryRun.query();
        dsAccount       = queryAccount.dataSourceTable(tablenum(MainAccount));
        dsAccount.addRange(fieldnum(MainAccount, LedgerChartOfAccounts)).value(queryValue(LedgerChartOfAccounts::current()));
        rangeAccount    = dsAccount.addRange(fieldnum(MainAccount, MainAccountId));

        displayFinalSum = NoYes::No;
        while (accountIt.more())
        {
            mainAccount = MainAccount::findByMainAccountId(accountIt.value());

            if (mainAccount.RecId)
            {
                tempMainAccountNum = this.removeSeparatorChar(mainAccount.MainAccountId);
                accountLevel = accountUtility.getAccountLevelbyAccountNum(
                    tempMainAccountNum,
                    LedgerChartOfAccounts::current());

                if (levelMin
                    && accountLevel != levelMin)
                {
                    accountIt.next();
                    continue;
                }

                if (isTreeStructureEnabled)
                {
                    this.insertSumary(accountTypeNum, totalSummaryDR, totalSummaryCR, mainAccount);
                    if (accountTypeNum != 0
                        && accountTypeNum != str2int(substr(mainAccount.MainAccountId, 1, 1)))
                    {
                        totalSummaryDR = 0;
                        totalSummaryCR = 0;
                        summaryExistTrans = NoYes::No;
                    }
                }
                tmpGeneralLedger_CN.clear();

                tmpGeneralLedger_CN.AccountNum      = mainAccount.MainAccountId;
                tmpGeneralLedger_CN.AccountName     = mainAccount.localizedName();
                tmpGeneralLedger_CN.CurrencyCode    = companyCurrencyCode;

                tmpGeneralLedger_CN.ExchRate        = 100;
                tmpGeneralLedger_CN.IsPrimary       = NoYes::Yes;
                amountDebit[0]     = 0;
                amountCredit[0]    = 0;
                amountDebitMST[0]  = 0;
                amountCreditMST[0] = 0;
                curCode = connull();

                rangeAccount.value(mainAccount.MainAccountId + #AllFilesName);
                queryRun.reset();
                oldRecId = 0;
                hasTrans = NoYes::No;

                while (queryRun.next())
                {
                    if (queryRun.changed(tablenum(generalJournalAccountEntry)))
                    {
                        generalJournalAccountEntry   = queryRun.get(tablenum(generalJournalAccountEntry));
                        generalJournalEntry = queryRun.get(tablenum(generalJournalEntry)) as GeneralJournalEntry;
                        generalJournalEntryW = queryRun.get(tablenum(generalJournalEntry_W)) as GeneralJournalEntry_W;

                        if (generalJournalAccountEntry.RecId
                            && oldRecId != generalJournalAccountEntry.RecId
                            && FiscalCalendarPeriod::find(generalJournalEntry.FiscalCalendarPeriod).Type == FiscalPeriodType::Operating)
                        {
                            oldRecId = generalJournalAccountEntry.RecId;
                            if (voucherTypeSet.elements() == 0
                                || voucherTypeSet.in(generalJournalEntryW.LedgerVoucherType_CN))
                            {
                                if (confind(curCode, generalJournalAccountEntry.TransactionCurrencyCode) == 0)
                                {
                                    curCode += generalJournalAccountEntry.TransactionCurrencyCode;
                                }
                                tmpGeneralLedger_CN.AmountMSTDebit  += generalJournalAccountEntry.IsCredit ? 0 : generalJournalAccountEntry.AccountingCurrencyAmount;
                                tmpGeneralLedger_CN.AmountMSTCredit += generalJournalAccountEntry.IsCredit ? -generalJournalAccountEntry.AccountingCurrencyAmount : 0;
                                amountDebitMST[confind(curCode, generalJournalAccountEntry.TransactionCurrencyCode)]  += generalJournalAccountEntry.IsCredit ? 0 : generalJournalAccountEntry.AccountingCurrencyAmount;
                                amountCreditMST[confind(curCode, generalJournalAccountEntry.TransactionCurrencyCode)] += generalJournalAccountEntry.IsCredit ? -generalJournalAccountEntry.AccountingCurrencyAmount : 0;
                                amountDebit[confind(curCode, generalJournalAccountEntry.TransactionCurrencyCode)]     += generalJournalAccountEntry.IsCredit ? 0 : generalJournalAccountEntry.TransactionCurrencyAmount;
                                amountCredit[confind(curCode, generalJournalAccountEntry.TransactionCurrencyCode)]    += generalJournalAccountEntry.IsCredit ? -generalJournalAccountEntry.TransactionCurrencyAmount : 0;
                                hasTrans        = NoYes::Yes;
                                displayFinalSum = NoYes::Yes;
                            }
                        }

                        if (!generalJournalAccountEntry.RecId)
                        {
                            break;
                        }
                    }
                }

                if (isTreeStructureEnabled)
                {
                    if (hasTrans == NoYes::Yes
                        && accountTypeNum == str2int(substr(mainAccount.MainAccountId, 1, 1)))
                    {
                        summaryExistTrans = NoYes::Yes;
                    }

                    tempMainAccountNum = this.removeSeparatorChar(mainAccount.MainAccountId);

                    if (accountUtility.getAccountLevelbyAccountNum(
                        tempMainAccountNum, mainAccount.LedgerChartOfAccounts) >= levelMin)
                    {
                        totalSummaryDR += tmpGeneralLedger_CN.AmountMSTDebit;
                        totalSummaryCR += tmpGeneralLedger_CN.AmountMSTCredit;
                        totalTotalDR   += tmpGeneralLedger_CN.AmountMSTDebit;
                        totalTotalCR   += tmpGeneralLedger_CN.AmountMSTCredit;
                    }
                    accountTypeNum =  str2int(substr(mainAccount.MainAccountId, 1, 1));
                }

                if (ledgerParameters.ExcludeUnusedAccounts_CN == NoYes::No
                    || hasTrans == NoYes::Yes)
                {
                    tmpGeneralLedger_CN.insert();
                    numOfLines += 1;

                    this.insertGeneralLedger();
                }
            }
            accountIt.next();
        }

        if (!accountIt.more())
        {
            mainAccount = MainAccount::findByMainAccountId('');
        }

        if ((displayFinalSum == NoYes::Yes
                || ledgerParameters.ExcludeUnusedAccounts_CN == NoYes::No)
            && isTreeStructureEnabled)

        {
            this.insertSumary(accountTypeNum, totalSummaryDR, totalSummaryCR, mainAccount);
            this.insertSumary(accountTypeNum, totalTotalDR, totalTotalCR, mainAccount, NoYes::Yes);
        }
        rangeAccount.enabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates queryRun.
    /// </summary>
    protected void createQueryRun()
    {
        Query                   query;
        QueryBuildDataSource    qbds;
        QueryBuildDataSource    qbdsFiscalCalendarPeriod;
        QueryBuildDataSource    qbdsFiscalCalendarYear;
        QueryBuildRange         range;

        query = new Query();

        qbds = query.addDataSource(tableNum(SubledgerVoucherGeneralJournalEntry));
        if (voucher)
        {
            range = qbds.addRange(fieldnum(SubledgerVoucherGeneralJournalEntry, Voucher));
            range.value(queryValue(voucher));
        }

        qbds = qbds.addDataSource(tablenum(GeneralJournalEntry));
        qbds.relations(true);

        //Restrict to current ledger
        GeneralJournalEntry::addSecureRangeForLedger(qbds);
        //Restrict to the selected fiscal year and period
        qbdsFiscalCalendarPeriod = qbds.addDataSource(tableNum(FiscalCalendarPeriod));
        qbdsFiscalCalendarPeriod.relations(true);
        qbdsFiscalCalendarPeriod.fetchMode(QueryFetchMode::One2One);
        qbdsFiscalCalendarPeriod.addRange(fieldNum(FiscalCalendarPeriod, Name)).value(fiscalPeriodName);

        qbdsFiscalCalendarYear = qbdsFiscalCalendarPeriod.addDataSource(tableNum(FiscalCalendarYear));
        qbdsFiscalCalendarYear.relations(true);
        qbdsFiscalCalendarYear.addRange(fieldNum(FiscalCalendarYear, Name)).value(fiscalYearName);
        qbdsFiscalCalendarYear.addRange(fieldNum(FiscalCalendarYear, FiscalCalendar)).value(queryValue(CompanyInfoHelper::fiscalCalendarRecId()));

        qbds = GeneralJournalEntry_W::addDataSource(qbds);

        if (ledgerParameters.ChineseVoucher_CN)
        {
            if (voucherCN)
            {
                range = qbds.addRange(fieldnum(GeneralJournalEntry_W, Voucher_CN));
                range.value(queryValue(voucherCN));
            }

            qbds = qbds.addDataSource(tablenum(LedgerVoucherType_CN));
            qbds.addLink(
                fieldNum(GeneralJournalEntry_W, LedgerVoucherType_CN),
                fieldNum(LedgerVoucherType_CN, RecId));

            qbds.allowAdd(QueryAllowAdd::NoFields);
            if (voucherType)
            {
                range = qbds.addRange(fieldnum(LedgerVoucherType_CN, Id));
                range.value(queryValue(voucherType));
            }
        }

        qbds = query.dataSourceTable(tablenum(GeneralJournalEntry));
        qbds = qbds.addDataSource(tablenum(GeneralJournalAccountEntry));
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.addLink(
            fieldNum(GeneralJournalEntry, RecId),
            fieldNum(GeneralJournalAccountEntry, GeneralJournalEntry));

        qbds = qbds.addDataSource(tableNum(DimensionAttributeValueCombination));
        qbds.addLink(
            fieldnum(GeneralJournalAccountEntry, LedgerDimension),
            fieldNum(DimensionAttributeValueCombination, RecId));

        qbds = qbds.addDataSource(tablenum(MainAccount));
        qbds.addLink(
            fieldnum(DimensionAttributeValueCombination, MainAccount),
            fieldnum(MainAccount, RecId));
        //Restrict the main account to current chart of accounts
        MainAccount::addSecureRangeForChartOfAccounts(qbds);

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct and get dialog.
    /// </summary>
    /// <returns>Retrun the dialog.</returns>
    public Object dialog()
    {
        DialogRunbase   dialog = super();
        ledgerInquiryDialogHelperCN = new LedgerInquiryDialogHelper_CN();

        dialog.caption("@GLS55037");
        dialogFieldFiscalYear = dialog.addFieldValue(extendedTypeStr(FiscalYearName), fiscalYearName, "@SYS127885");
        dialogFieldFiscalPeriod = dialog.addFieldValue(extendedTypeStr(PeriodName), fiscalPeriodName, "@SYS127887");

        ledgerInquiryDialogHelperCN.parmDialogFieldFiscalPeriod(dialogFieldFiscalPeriod);
        ledgerInquiryDialogHelperCN.parmDialogFieldFiscalYear(dialogFieldFiscalYear);

        dialogFieldFiscalPeriod.registerOverrideMethod(
            methodStr(FormStringControl, lookup),
            methodStr(LedgerInquiryDialogHelper_CN, fiscalCalendarPeriodLookUp),
            ledgerInquiryDialogHelperCN);

        dialogFieldFiscalYear.registerOverrideMethod(
            methodStr(FormStringControl, modified),
            methodStr(LedgerInquiryDialogHelper_CN, yearNameModified),
            ledgerInquiryDialogHelperCN);

        dialogFieldFiscalPeriod.registerOverrideMethod(
            methodStr(FormStringControl, modified),
            methodStr(LedgerInquiryDialogHelper_CN, periodNameModified),
            ledgerInquiryDialogHelperCN);

        dialogVoucher = dialog.addFieldValue(extendedtypestr(Voucher), voucher, "@SYS318816");
        if (ledgerParameters.ChineseVoucher_CN == NoYes::Yes)
        {
            dialogVoucherCN = dialog.addFieldValue(extendedtypestr(Voucher_CN), voucherCN, "@GLS60258");
            dialogVoucherType = dialog.addFieldValue(extendedtypestr(LedgerVoucherTypeId_CN), voucherType, "@GLS54929");
        }

        if (isTreeStructureEnabled)
        {
            dialogLevel = dialog.addFieldValue(extendedtypestr(Level), levelMin, "@GLS54758");
            dialogLevel.value(1);
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalPeriod2Date</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the fiscal period start date and end date from selected fiscal year and fiscal period.
    /// </summary>
    protected void fiscalPeriod2Date()
    {
        FiscalCalendarYear      fiscalCalendarYear;
        FiscalCalendarPeriod    fiscalCalendarPeriod;

        fiscalCalendarYear = FiscalCalendarYear::findByCalendarYearName(Ledger::fiscalCalendar(CompanyInfo::current()), fiscalYearName);
        fiscalCalendarPeriod = FiscalCalendarPeriod::findByCalendarYearPeriod(fiscalCalendarYear.RecId, fiscalPeriodName);

        periodStart = fiscalCalendarPeriod.StartDate;
        periodEnd   = fiscalCalendarPeriod.EndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalPeriodName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the Fiscal period name.
    /// </summary>
    /// <returns>
    /// Returns the value of the Fiscal period name.
    /// </returns>
    public PeriodName getFiscalPeriodName()
    {
        return fiscalPeriodName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalYearName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the Fiscal year name.
    /// </summary>
    /// <returns>
    /// Returns the value of the Fiscal year name.
    /// </returns>
    public FiscalYearName getFiscalYearName()
    {
        return fiscalYearName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from dialog.
    /// </summary>
    /// <returns>
    /// Returns true if the operation succeed.
    /// </returns>
    public boolean getFromDialog()
    {
        fiscalYearName = dialogFieldFiscalYear.value();
        fiscalPeriodName = dialogFieldFiscalPeriod.value();
        this.fiscalPeriod2Date();

        voucher = dialogVoucher.value();

        if (ledgerParameters.ChineseVoucher_CN == NoYes::Yes)
        {
            voucherCN = dialogVoucherCN.value();
            voucherType = dialogVoucherType.value();
        }

        if (isTreeStructureEnabled)
        {
            levelMin = dialogLevel.value();
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLevelMin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <c>Level</c>.
    /// </summary>
    /// <returns>
    /// Returns the value of the <c>Level</c>.
    /// </returns>
    public Level getLevelMin()
    {
        return levelMin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the periodEnd date.
    /// </summary>
    /// <returns>
    /// Returns the value of the periodEnd date.
    /// </returns>
    public TransDate getPeriodEnd()
    {
        return periodEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the periodStart date.
    /// </summary>
    /// <returns>
    /// Returns the value of the periodStart date.
    /// </returns>
    public TransDate getPeriodStart()
    {
        return periodStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <c>Voucher</c>.
    /// </summary>
    /// <returns>
    /// Returns the value of the <c>Voucher</c>.
    /// </returns>
    public Voucher getVoucher()
    {
        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucherCN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <c>Voucher_CN</c>.
    /// </summary>
    /// <returns>
    /// Returns the value of the <c>Voucher_CN</c>.
    /// </returns>
    public Voucher_CN getVoucherCN()
    {
        return voucherCN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucherType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <c>LedgerVoucherTypeId_CN</c>.
    /// </summary>
    /// <returns>
    /// Returns the value of the <c>LedgerVoucherTypeId_CN</c>.
    /// </returns>
    public LedgerVoucherTypeId_CN getVoucherType()
    {
        return voucherType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertGeneralLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create genearal ledger by currency code.
    /// </summary>
    public void insertGeneralLedger()
    {
        Counter                     i;
        ExchangeRateHelper          exchRateHelper;

        if (conlen(curCode) >= 1)
        {
            if (conlen(curCode) == 1
                && confind(curCode, companyCurrencyCode) == 1)
            {
                return;
            }
            for (i = 1; i <= conlen(curCode); i++)
            {
                if (i == confind(curCode, companyCurrencyCode))
                {
                    continue;
                }
                tmpGeneralLedger_CN.CurrencyCode    = conpeek(curCode, i);
                tmpGeneralLedger_CN.IsPrimary       = NoYes::No;
                tmpGeneralLedger_CN.AmountCurDebit  = amountDebit[i];
                tmpGeneralLedger_CN.AmountCurCredit = amountCredit[i];
                tmpGeneralLedger_CN.AmountMSTDebit  = amountDebitMST[i];
                tmpGeneralLedger_CN.AmountMSTCredit = amountCreditMST[i];
                if (tmpGeneralLedger_CN.AmountCurDebit != 0)
                {
                    tmpGeneralLedger_CN.ExchRate = (tmpGeneralLedger_CN.AmountMSTDebit / tmpGeneralLedger_CN.AmountCurDebit) * 100;
                }
                else if (tmpGeneralLedger_CN.AmountCurCredit != 0)
                {
                    tmpGeneralLedger_CN.ExchRate = (tmpGeneralLedger_CN.AmountMSTCredit / tmpGeneralLedger_CN.AmountCurCredit) * 100;
                }
                else
                {
                    exchRateHelper = ExchangeRateHelper::newExchangeDate(
                        Ledger::primaryLedger(CompanyInfo::current()),
                        tmpGeneralLedger_CN.CurrencyCode,
                        DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

                    tmpGeneralLedger_CN.ExchRate = exchRateHelper.getExchangeRate1();
                }

                tmpGeneralLedger_CN.insert();
                numOfLines += 1;
            }
            if (confind(curCode, companyCurrencyCode) > 0)
            {
                tmpGeneralLedger_CN.CurrencyCode    = companyCurrencyCode;
                tmpGeneralLedger_CN.ExchRate        = 100;
                tmpGeneralLedger_CN.IsPrimary       = NoYes::No;
                tmpGeneralLedger_CN.AmountCurDebit  = amountDebit[confind(curCode, companyCurrencyCode)];
                tmpGeneralLedger_CN.AmountCurCredit = amountCredit[confind(curCode, companyCurrencyCode)];
                tmpGeneralLedger_CN.AmountMSTDebit  = amountDebitMST[confind(curCode, companyCurrencyCode)];
                tmpGeneralLedger_CN.AmountMSTCredit = amountCreditMST[confind(curCode, companyCurrencyCode)];

                tmpGeneralLedger_CN.insert();
                numOfLines += 1;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSumary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts amountMST of DR and CR to TmpGeneralLedger_CN table according to account type.
    /// </summary>
    /// <param name="_accountTypeNum">
    /// Account number.
    /// </param>
    /// <param name="_totalDR">
    /// Total debit amount.
    /// </param>
    /// <param name="_totalCR">
    /// Total credit amount.
    /// </param>
    /// <param name="_mainAccount">
    /// Main account record.
    /// </param>
    /// <param name="_isTotal">
    /// It is total.
    /// </param>
    public void insertSumary(
        Counter       _accountTypeNum,
        AmountMST     _totalDR,
        AmountMST     _totalCR,
        MainAccount   _mainAccount,
        NoYes         _isTotal = NoYes::No)
    {
        if ((summaryExistTrans == NoYes::Yes
                || ledgerParameters.ExcludeUnusedAccounts_CN == NoYes::No)
            && (levelMin != 0
                && _accountTypeNum != 0
                && _accountTypeNum != str2int(substr(_mainAccount.MainAccountId, 1, 1))))
        {
            tmpGeneralLedger_CN.clear();
            tmpGeneralLedger_CN.IsPrimary = NoYes::Yes;
            if (_isTotal)
            {
                // Total
                tmpGeneralLedger_CN.AccountName = "@SYS809";
            }
            else
            {
                MainAccount mainAccount;

                SysDaQueryObject queryObject = this.getMainAccountType(mainAccount, _accountTypeNum);

                SysDaFindStatement findStatement = new SysDaFindStatement();
                findStatement.executeQuery(new SysDaFindObject(queryObject));

                boolean isSummary = this.getSummary(mainAccount);

                if (!isSummary)
                {
                    // Summary
                    tmpGeneralLedger_CN.AccountName = "@SYS15560";
                }
            }

            tmpGeneralLedger_CN.AmountMSTDebit = _totalDR;
            tmpGeneralLedger_CN.AmountMSTCredit = _totalCR;
            tmpGeneralLedger_CN.insert();
            numOfLines += 1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMainAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account type.
    /// </summary>
    /// <param name = "_mainAccount">
    /// The <c>MainAccount</c> record.
    /// </param>
    /// <param name = "_accountTypeNum">
    /// The account number.
    /// </param>
    /// <returns>
    /// The query to select records.
    /// </returns>
    [Wrappable(true)]
    protected final SysDaQueryObject getMainAccountType(MainAccount _mainAccount, Counter _accountTypeNum)
    {
        MainAccountNum mainAccountId = int2str(_accountTypeNum) + #Allfiles;

        SysDaQueryObject queryObject = new SysDaQueryObject(_mainAccount);

        queryObject.projection().add(fieldStr(MainAccount, Type));
        queryObject.firstOnlyHint = true;

        queryObject.whereClause(new SysDaAndExpression(new SysDaEqualsExpression(new SysDaFieldExpression(_mainAccount, fieldStr(MainAccount, LedgerChartOfAccounts)), new SysDaValueExpression(LedgerChartOfAccounts::current())),
            new SysDaLikeExpression(new SysDaFieldExpression(_mainAccount, fieldStr(MainAccount, MainAccountId)), new SysDaValueExpression(mainAccountId)))
            .and(new SysDaOrExpression(new SysDaEqualsExpression(new SysDaFieldExpression(_mainAccount, fieldStr(MainAccount, Type)), new SysDaValueExpression(DimensionLedgerAccountType::Liability))
                .or(new SysDaEqualsExpression(new SysDaFieldExpression(_mainAccount, fieldStr(MainAccount, Type)), new SysDaValueExpression(DimensionLedgerAccountType::Asset)))
                .or(new SysDaEqualsExpression(new SysDaFieldExpression(_mainAccount, fieldStr(MainAccount, Type)), new SysDaValueExpression(DimensionLedgerAccountType::BalanceSheet)))
                .or(new SysDaEqualsExpression(new SysDaFieldExpression(_mainAccount, fieldStr(MainAccount, Type)), new SysDaValueExpression(DimensionLedgerAccountType::Expense)))
                .or(new SysDaEqualsExpression(new SysDaFieldExpression(_mainAccount, fieldStr(MainAccount, Type)), new SysDaValueExpression(DimensionLedgerAccountType::Revenue)))
                .or(new SysDaEqualsExpression(new SysDaFieldExpression(_mainAccount, fieldStr(MainAccount, Type)), new SysDaValueExpression(DimensionLedgerAccountType::ProfitAndLoss))),
                new SysDaEqualsExpression(new SysDaFieldExpression(_mainAccount, fieldStr(MainAccount, Type)), new SysDaValueExpression(DimensionLedgerAccountType::BalanceSheet)))));

        return queryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks and gets the summary based on account type.
    /// </summary>
    /// <param name = "_mainAccount">
    /// The <c>MainAccount</c> record.
    /// </param>
    /// <returns>
    /// true if the summary has been set; otherwise, false.
    /// </returns>
    [Wrappable(true)]
    protected final boolean getSummary(MainAccount _mainAccount)
    {
        boolean isSummary = true;

        switch (_mainAccount.Type)
        {
            case DimensionLedgerAccountType::Asset:
                // Summary of asset
                tmpGeneralLedger_CN.AccountName = "@GLS54650";
                break;
            case DimensionLedgerAccountType::Expense:
                // Summary of cost
                tmpGeneralLedger_CN.AccountName = "@GLS54651";
                break;
            case DimensionLedgerAccountType::Liability:
                // Summary of liability
                tmpGeneralLedger_CN.AccountName = "@GLS54654";
                break;
            case DimensionLedgerAccountType::ProfitAndLoss:
                // Summary of profit & loss
                tmpGeneralLedger_CN.AccountName = "@GLS54658";
                break;

            case DimensionLedgerAccountType::BalanceSheet:
                if (LedgerParameters::find().CommonAccountType_CN)
                {
                    // Summary of common accounts
                    tmpGeneralLedger_CN.AccountName = "@GLS60462";
                }
                else
                {
                    // Parameter “Enable common account type” must be checked in order to use common account type.
                    throw error("@GLS60505");
                }
                break;

            case DimensionLedgerAccountType::Equity:
                // Summary of owner's equity
                tmpGeneralLedger_CN.AccountName = "@GLS54657";
                break;
            default:
                isSummary = false;
        }

        return isSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();

        accountSet          = new Set(Types::String);
        voucherTypeSet      = new Set(Types::Int64);
        companyCurrencyCode = Ledger::accountingCurrency();
        ledgerParameters    = LedgerParameters::find();
        isTreeStructureEnabled = LedgerChartOfAccounts::isTreeStructureEnabled_CN();
        ledgerChartOfAccountsRecId = LedgerChartOfAccounts::current();
        accountUtility = new LedgerAccountUtility_CN();
        ledgerSeparator = LedgerAccountUtility_CN::findSeparator(ledgerChartOfAccountsRecId);
        ledgerSeparatorChar = LedgerAccountUtility_CN::findSeparatorChar(ledgerSeparator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of lines.
    /// </summary>
    /// <returns>
    /// The number of lines.
    /// </returns>
    public Counter numOfLines()
    {
        return numOfLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the period balances of the ledger inquiry trial.
    /// </summary>
    /// <returns>
    /// The instance of the <c>TmpGeneralLedger_CN</c> class.
    /// </returns>
    public TmpGeneralLedger_CN periodBalances()
    {
        return tmpGeneralLedger_CN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// The pre process of the ledger inquiry trail balance.
    /// </summary>
    public void preProcess()
    {
        MainAccount          mainAccount;
        MainAccountNum       tempMainAccount;
        Level                tempLevel;
        LedgerVoucherType_CN localvoucherType;
        NoYes                firstAccount = NoYes::Yes;
        Integer              accountMinLen = accountUtility.getAccountLengthByLevel(
            1, ledgerChartOfAccountsRecId);
        this.createQueryRun();

        while (queryRun.next())
        {
            if (queryRun.changed(tablenum(MainAccount)))
            {
                mainAccount = queryRun.get(tablenum(MainAccount));

                if (mainAccount.RecId)
                {
                    tempMainAccount = this.removeSeparatorChar(mainAccount.MainAccountId);
                    tempLevel = accountUtility.getAccountLevelbyAccountNum(
                        tempMainAccount,
                        LedgerChartOfAccounts::current());
                    while (levelMin
                        && tempLevel >= levelMin
                        && isTreeStructureEnabled)
                    {
                        Integer accountLen = accountUtility.getAccountLengthByLevel(tempLevel, ledgerChartOfAccountsRecId);
                        tempMainAccount = substr(mainAccount.MainAccountId, 1, accountLen);
                        accountSet.add(tempMainAccount);
                        tempLevel--;
                    }

                    accountSet.add(mainAccount.MainAccountId);
                }
            }

            if (ledgerParameters.ChineseVoucher_CN == NoYes::Yes)
            {
                localvoucherType = queryRun.get(tablenum(LedgerVoucherType_CN));
                if (localvoucherType.RecId)
                {
                    voucherTypeSet.add(localvoucherType.RecId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeSeparatorChar</Name>
				<Source><![CDATA[
    private MainAccountNum removeSeparatorChar(MainAccountNum   _accountNum)
    {
        MainAccountNum      tempMainAccountNum;

        if (ledgerSeparator != LedgerSeparator_CN::None)
        {
            tempMainAccountNum = strrem(_accountNum, ledgerSeparatorChar);
        }
        else
        {
            tempMainAccountNum = _accountNum;
        }

        return tempMainAccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version     version    = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            default :
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the instance of the <c>LedgerInquiryTrialBalance_CN</c> class.
    /// </summary>
    /// <param name="calledFrom">
    /// The called from information.
    /// </param>
    /// <returns>
    /// Returns true if the validation succeed.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean     ret = true;
        if (fiscalYearName == ''
            || fiscalPeriodName == '')
        {
            // Specify name of the period.
            ret = checkFailed("@GLS54681");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for execution the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>