<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqReaderWriterLockSynchronizer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is the thread synchronization object to be used for inter-thread communication purposes.
/// </summary>
class ReqReaderWriterLockSynchronizer
{
    public ReqReaderWriterLockState state;
    public ReqAppLockMode lockMode;
    public readonly str lockName;
    public readonly int timeOut = 10000;// 10 s in ms by default.
    public static const int WaitMaximumAllowedWaitingTime = -1; //this corresponds to SQLs Wait indefinite
    private boolean escalateReaderLock;
    private UnknownNoYes readerLockEscalationResult = UnknownNoYes::Unknown;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>signalReaderLockToUpdateLockEscalation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Signals that a reader lock should be escalated to an update lock.
    /// </summary>
    public void signalReaderLockToUpdateLockEscalation()
    {
        this.parmEscalateReaderLock(true);
        this.parmReaderLockEscalationResult(UnknownNoYes::Unknown);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetReaderLockToUpdateLockEscalationSignal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the signal that a reader lock should be escalated to an update lock.
    /// </summary>
    public void resetReaderLockToUpdateLockEscalationSignal()
    {
        this.parmEscalateReaderLock(false);
        this.parmReaderLockEscalationResult(UnknownNoYes::Unknown);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEscalateReaderLock</Name>
				<Source><![CDATA[
    public boolean parmEscalateReaderLock(boolean _escalateReaderLock = escalateReaderLock)
    {
        escalateReaderLock = _escalateReaderLock;
        return escalateReaderLock;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReaderLockEscalationResult</Name>
				<Source><![CDATA[
    public UnknownNoYes parmReaderLockEscalationResult(UnknownNoYes _readerLockEscalationResult = readerLockEscalationResult)
    {
        readerLockEscalationResult = _readerLockEscalationResult;
        return _readerLockEscalationResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(str _lockName, ReqAppLockMode _lockMode, int _timeOut)
    {
        lockName = _lockName;
        lockMode = _lockMode;
        state = ReqReaderWriterLockState::Initial;
        timeOut = _timeOut;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maximumAllowedWaitingTimeToAcquireLockInMilliSec</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the maximum time to wait to acquire a lock in milliseconds.
    /// </summary>
    /// <returns>The maximum time to wait to acquire a lock in milliseconds.</returns>
    public int maximumAllowedWaitingTimeToAcquireLockInMilliSec()
    {
        if (this.timeOut == ReqReaderWriterLockSynchronizer::WaitMaximumAllowedWaitingTime)
        {
            return ReqReaderWriterLockSynchronizer::defaultMaximumAllowedWaitingTimeToAcquireLockInMilliSec();
        }

        return this.timeOut;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultMaximumAllowedWaitingTimeToAcquireLockInMilliSec</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default maximum time to wait to acquire a lock in milliseconds.
    /// </summary>
    /// <returns>The default maximum time to wait to acquire a lock in milliseconds.</returns>
    public static int defaultMaximumAllowedWaitingTimeToAcquireLockInMilliSec()
    {
        return 24*60*60*1000; // 24 h in ms.
    }

]]></Source>
			</Method>
			<Method>
				<Name>maximumAllowedWaitingTimeToReleaseLockInMilliSec</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the maximum time to wait to release a lock in milliseconds.
    /// </summary>
    /// <returns>The maximum time to wait to release a lock in milliseconds.</returns>
    public static int maximumAllowedWaitingTimeToReleaseLockInMilliSec()
    {
        return 5000; // 5 sec in ms.
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>