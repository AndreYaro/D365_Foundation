<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PlanActivityPrevLevelCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PlanActivityPrevLevelCache</c> class provides caching of previous level plan activities.
/// </summary>
public class PlanActivityPrevLevelCache extends LeanCache
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds values in the cache that is stored under the specified key.
    /// </summary>
    /// <param name="_key">
    /// The cache key.
    /// </param>
    /// <returns>
    /// The <c>PlanActivity</c> record that represents the previous level activity; otherwise, an empty
    /// buffer.
    /// </returns>
    public anytype find(anytype _key)
    {
        PlanActivity    prevLevelPlanActivity;
        container       value;

        // retrieve value as container
        value = super(_key);

        if (   value
            && !this.findIsNullValue())
        {
            // extract buffer
            con2Buf(value,prevLevelPlanActivity);
        }

        return prevLevelPlanActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>key</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a cache key using a <c>PlanActivity</c> record ID and a <c>PlanActivityType</c> enumeration
    /// value.
    /// </summary>
    /// <param name="_planActivityRefRecId">
    /// A record ID for the <c>PlanActivity</c> table.
    /// </param>
    /// <returns>
    /// A <c>container</c> object that can be used as a key to the cache.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container key(PlanActivityRefRecId _planActivityRefRecId)
    {
        return this.any2container(_planActivityRefRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevLevelPlanActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the previous level <c>PlanActivity</c> record for the current record.
    /// </summary>
    /// <param name="_planActivityRefRecId">
    ///    The record ID of a record in the <c>PlanActivity</c> table.
    /// </param>
    /// <param name="_planActivity">
    ///    The <c>PlanActivity</c> record that belongs to the specified record ID; optional.
    /// </param>
    /// <returns>
    ///    A <c>PlanActivity</c> record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanActivity prevLevelPlanActivity(
        PlanActivityRefRecId _planActivityRefRecId,
        PlanActivity         _planActivity = null)
    {
        PlanActivity    planActivity;
        PlanActivity    prevLevelPlanActivity;
        container       key = this.key(_planActivityRefRecId);

        if (_planActivityRefRecId)
        {
            prevLevelPlanActivity = this.find(key);

            if (!this.findIsCacheHit())
            {
                planActivity          = _planActivity ? _planActivity : PlanActivity::find(_planActivityRefRecId);
                prevLevelPlanActivity = planActivity.prevLevelPlanActivity(false);

                if (prevLevelPlanActivity)
                {
                    this.insert(key,buf2Con(prevLevelPlanActivity));
                }
                else
                {
                    this.insert(key,this.nullValue());
                }
            }
        }

        return prevLevelPlanActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes an entry from the cache that is stored under the specified key.
    /// </summary>
    /// <param name="_key">
    /// The key to remove.
    /// </param>
    public void remove(anytype _key)
    {
        PlanActivityRefRecId    planActivityRefRecId;
        Common                  common;

        switch (typeof(_key))
        {
            case Types::Container:
                if (conlen(_key) == 1)
                {
                    // get recId from container
                    planActivityRefRecId = conpeek(_key,1);
                }
                break;
            case Types::Record:
                // get recId from record
                common = _key;
                if (common is PlanActivity)
                {
                    planActivityRefRecId = common.RecId;
                }
                break;
            case Types::Int64:
                // get recId from key
                planActivityRefRecId = _key;
                break;
        }

        if (planActivityRefRecId)
        {
            super(this.key(planActivityRefRecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static PlanActivityPrevLevelCache construct()
    {
        return new PlanActivityPrevLevelCache();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>