<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationCalculationServiceUtils</Name>
	<SourceCode>
		<Declaration><![CDATA[
using TC = Microsoft.Dynamics.TaxCalculation.ApiContracts;

/// <summary>
/// The tax integration utils for tax calculation service.
/// </summary>
internal final class TaxIntegrationCalculationServiceUtils
{
    private const str DateFormat = '{0:####}-{1:##}-{2:##}T00:00:00';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>taxDocumentRoundingOffTypeToRoundOffType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts Csharp rounding type to X++.
    /// </summary>
    /// <param name = "_roundOffType">Rounding off type in Csharp.</param>
    /// <returns>Rounding off type in X++.</returns>
    internal static RoundOffType taxDocumentRoundingOffTypeToRoundOffType(TC.TaxDocumentRoundingType _roundOffType)
    {
        switch (_roundOffType)
        {
            case TC.TaxDocumentRoundingType::Ordinary:
                return RoundOffType::Ordinary;
            case TC.TaxDocumentRoundingType::RoundDown:
                return RoundOffType::RoundDown;
            case TC.TaxDocumentRoundingType::RoundUp:
                return RoundOffType::RoundUp;
        }

        return RoundOffType::Ordinary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCalculationMethodToTaxRoundOffCalculationMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts Csharp calculation method to X++.
    /// </summary>
    /// <param name = "_roundOffType">Calculation method in Csharp.</param>
    /// <returns>Calculation method in X++.</returns>
    internal static TaxRoundOffCalculationMethod taxCalculationMethodToTaxRoundOffCalculationMethod(TC.TaxCalculationMethod _taxCalculationMethod)
    {
        switch (_taxCalculationMethod)
        {
            case TC.TaxCalculationMethod::Line:
                return TaxRoundOffCalculationMethod::Line;
            case TC.TaxCalculationMethod::Total:
                return TaxRoundOffCalculationMethod::Total;
        }

        return TaxRoundOffCalculationMethod::Line;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundingPrincipleToTaxRoundOffPrinciple</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts Csharp rounding principle to X++.
    /// </summary>
    /// <param name = "_roundOffType">Rounding principle in Csharp.</param>
    /// <returns>Rounding principle in X++.</returns>
    internal static TaxRoundOffPrinciple roundingPrincipleToTaxRoundOffPrinciple(TC.RoundingPrinciple _roundOffPrinciple)
    {
        switch (_roundOffPrinciple)
        {
            case TC.RoundingPrinciple::TaxCode:
                return TaxRoundOffPrinciple::TaxCode;
            case TC.RoundingPrinciple::TaxCodeCombination:
                return TaxRoundOffPrinciple::TaxCodeCombination;
        }

        return TaxRoundOffPrinciple::TaxCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxServiceFeatureTypeBySolutionProviderType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TaxServiceFeatureTypes</c> based on the <c>TaxSolutionProviderType</c>.
    /// </summary>
    /// <param name = "_solutionProviderType">The type of the tax solution provider.</param>
    /// <returns>The tax service feature type.</returns>
    internal static TaxServiceFeatureTypes getTaxServiceFeatureTypeBySolutionProviderType(TaxSolutionProviderType _solutionProviderType)
    {
        switch (_solutionProviderType)
        {
            case TaxSolutionProviderType::Microsoft:
                return TaxServiceFeatureTypes::TaxFeature;
            case TaxSolutionProviderType::ISV:
                return TaxServiceFeatureTypes::CustomerISVFeature;
        }

        return TaxServiceFeatureTypes::TaxFeature;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertDateToStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts date to str.
    /// </summary>
    /// <param name = "value">The date to be converted.</param>
    /// <returns>The str that converted from the date.</returns>
    internal static str convertDateToStr(date value)
    {
        return System.String::Format(DateFormat, year(value), mthOfYr(value), dayOfMth(value));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>