<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFEventDocMsgFormat_Cancel_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class extends the <c>EFDocMsgFormat_XmlBase_BR</c> class and is responsible
/// to format the XML of electronic invoice cancelation to be sent.
/// </summary>
class EFEventDocMsgFormat_Cancel_BR extends EFDocMsgFormat_XMLBase_BR implements IEFEventDocMsgFormat_BR
{
    IEFDocMsgStream_BR          stream;
    EFEventDocument_Cancel_BR   cancelDocument;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create_detEvento_Element</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the detEvento element.
    /// </summary>
    /// <returns>
    /// The detEvento element.
    /// </returns>
    protected XmlElement create_detEvento_Element()
    {
        XmlElement  detEventoElement;

        detEventoElement = this.createElement('detEvento');
        detEventoElement.setAttribute('versao', cancelDocument.eventVersion());
        detEventoElement.appendChild(this.createElementWithValue('descEvento', cancelDocument.eventDescription()));

        detEventoElement.appendChild(this.createElementWithValue('nProt', cancelDocument.protocolNumber()));
        detEventoElement.appendChild(this.createElementWithValue('xJust', cancelDocument.cancelReasonComment()));

        return detEventoElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_evento_Element</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the evento element.
    /// </summary>
    /// <returns>
    /// The evento element.
    /// </returns>
    protected XmlElement create_evento_Element()
    {
        XmlElement  eventoElement;

        eventoElement = this.createElement('evento');
        eventoElement.setAttribute('versao', cancelDocument.eventVersion());

        return eventoElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_infEvento_Element</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the infEvento element.
    /// </summary>
    /// <returns>
    /// The infEvento element.
    /// </returns>
    protected XmlElement create_infEvento_Element()
    {
        XmlElement  infEventoElement;
        XMLElement  detEventoElement;

        infEventoElement  = this.createElement('infEvento');
        infEventoElement.setAttribute('Id', this.Id());
        infEventoElement.appendChild(this.createElementWithValue('cOrgao', substr(cancelDocument.issuerIBGECode(),1,2)));
        infEventoElement.appendChild(this.createElementWithValue('tpAmb', cancelDocument.fiscalEstablishment().EFDocEnvironment == EFDocEnvironment_BR::Production ? '1' : '2' ));

        if (cancelDocument.issuerCNPJ())
        {
            infEventoElement.appendChild(this.createElementWithValue('CNPJ', this.formatKeepNumbersOnly(cancelDocument.issuerCNPJ())));
        }
        else
        {
            infEventoElement.appendChild(this.createElementWithValue('CPF', this.formatKeepNumbersOnly(cancelDocument.issuerCPF())));
        }

        infEventoElement.appendChild(this.createElementWithValue('chNFe', cancelDocument.accessKey()));
        infEventoElement.appendChild(this.createElementWithValue('dhEvento', this.eventDateTime()));
        infEventoElement.appendChild(this.createElementWithValue('tpEvento', cancelDocument.eventType()));
        infEventoElement.appendChild(this.createElementWithValue('nSeqEvento', int2str(cancelDocument.sequence())));
        infEventoElement.appendChild(this.createElementWithValue('verEvento', cancelDocument.eventVersion()));

        detEventoElement = this.create_detEvento_Element();

        infEventoElement.appendChild(detEventoElement);

        return infEventoElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXmlDocumentFromEFDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the xml Document element that represents the correction letter.
    /// </summary>
    /// <returns>
    /// The xml document.
    /// </returns>
    protected XmlElement createXmlDocumentFromEFDocument()
    {
        XmlElement      eventoElement;

        eventoElement = this.create_evento_Element();
        eventoElement.appendChild(this.create_infEvento_Element());

        return eventoElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats the correction letter xml document and writes it to a stream.
    /// </summary>
    protected void doFormat()
    {
        XmlElement      eventNFeElement;
        str             signedNfeElementAsString;

        eventNFeElement = this.createXmlDocumentFromEFDocument();
        signedNFeElementAsString = this.signDocument(cancelDocument.keyVaultCertificateRef(), cancelDocument.digitalCertificateSubject(), eventNFeElement, 'infEvento');

        xmlDoc = XmlDocument::newXml(
            strFmt(
            @'<?xml version="1.0" encoding="UTF-8"?>
            <envEvento versao="%1" xmlns="http://www.portalfiscal.inf.br/nfe">
                <idLote>%2</idLote>
                %3
            </envEvento>',
            this.version(), cancelDocument.fiscalDocumentNumber(), signedNFeElementAsString)
            );

        stream.write(xmlDoc.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>eFiscalDocVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the fiscal document version.
    /// </summary>
    /// <returns>
    /// The fiscal document version.
    /// </returns>
    public EFiscalDocVersion_BR eFiscalDocVersion()
    {
        return EFiscalDocVersion_BR::V4;
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the date time of the  event request
    /// </summary>
    /// <returns>
    /// The formated string of the date time
    /// </returns>
    protected str eventDateTime()
    {
        return this.formatDateTime(DateTimeUtil::getSystemDateTime());
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatedEventSequence</Name>
				<Source><![CDATA[
        private str formatedEventSequence()
    {
        return strRFix(int2str(cancelDocument.sequence()),2,'0');
    }

]]></Source>
			</Method>
			<Method>
				<Name>Id</Name>
				<Source><![CDATA[
        private str Id()
    {
        return strfmt(
                    "%1%2%3%4",
                    'ID',
                    cancelDocument.eventType(),
                    cancelDocument.accessKey(),
                    this.formatedEventSequence()
                    );
    }

]]></Source>
			</Method>
			<Method>
				<Name>read</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads a return message and write it to a <c>EFiscalDocumentReturnInfo_BR</c>
    /// </summary>
    /// <param name="_stream">
    /// The return message.
    /// </param>
    /// <param name="_returnInfo">
    /// A instance of a <c>EFiscalDocumentReturnInfo_BR</c> class.
    /// </param>
    void read(IEFDocMsgStream_BR _stream, EFiscalDocumentReturnInfo_BR _returnInfo)
    {
        #ExportFiscalDocument_BR

        str             returnCode;
        str             returnCodeDescription;
        str             returnProtocolNumber;
        str             returnDateTime;
        timeOfDay       timeZone;
        utcdatetime     dateTime;
        str             timeZoneSignal;

        xmlDoc.loadXml(conpeek(_stream.read(),1));

        returnCode              = this.getNodeContent('/x:retEnvEvento/x:retEvento/x:infEvento/x:cStat');
        returnCodeDescription   = this.getNodeContent('/x:retEnvEvento/x:retEvento/x:infEvento/x:xMotivo');
        returnDateTime          = substr(this.getNodeContent('/x:retEnvEvento/x:retEvento/x:infEvento/x:dhRegEvento'),1,19);
        timeZoneSignal          = substr(this.getNodeContent('/x:retEnvEvento/x:retEvento/x:infEvento/x:dhRegEvento'),20,1);
        timeZone                = str2time(substr(this.getNodeContent('/x:retEnvEvento/x:retEvento/x:infEvento/x:dhRegEvento'),21,6));

        if (this.existsNode('/x:retEnvEvento/x:retEvento/x:infEvento/x:nProt'))
        {
            returnProtocolNumber    = this.getNodeContent('/x:retEnvEvento/x:retEvento/x:infEvento/x:nProt');
        }

        if (timeZoneSignal == '-')
        {
            dateTime = DateTimeUtil::addSeconds(DateTimeUtil::parse(returnDateTime),timeZone);
        }
        else
        {
            dateTime = DateTimeUtil::addSeconds(DateTimeUtil::parse(returnDateTime),-timeZone);
        }

        _returnInfo.parmReturnCodeStatus(returnCode);
        _returnInfo.parmReturnCodeDescription(returnCodeDescription);
        _returnInfo.parmProtocolNumber(returnProtocolNumber);
        _returnInfo.parmProcessDateTime(dateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>version</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrives the the version of the current service
    /// </summary>
    /// <returns>
    /// The current version
    /// </returns>
    public str version()
    {
        return '1.00';
    }

]]></Source>
			</Method>
			<Method>
				<Name>webService</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the webservice type.
    /// </summary>
    /// <returns>
    /// The webservice type.
    /// </returns>
    EFDocWebService_BR webService()
    {
        return EFDocWebService_BR::Events;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes a xml document to a stream.
    /// </summary>
    /// <param name="_stream">
    /// The stream to be writen
    /// </param>
    /// <param name="_documentList">
    /// The <c>EFiscalDocumentList_BR</c> to generate the xml document.
    /// </param>
    void write(IEFDocMsgStream_BR _stream, EFEventDocumentList_BR _documentList)
    {
        stream = _stream;

        if (_documentList.moveNext())
        {
            cancelDocument = _documentList.current();

            this.doFormat();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>EFEventDocMsgFormat_Cancel_BR</c> object.
    /// </summary>
    /// <returns>A <c>EFEventDocMsgFormat_Cancel_BR</c> object.</returns>
    public static EFEventDocMsgFormat_Cancel_BR construct()
    {
        return new EFEventDocMsgFormat_Cancel_BR();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>