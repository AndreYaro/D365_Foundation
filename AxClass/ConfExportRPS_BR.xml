<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ConfExportRPS_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>ConfExportRPS_BR</c> extends the <c>ConfExport_BR</c>
/// to enable the generation of RPS files using the Configurator feature.
/// </summary>
class ConfExportRPS_BR extends ConfExport_BR
{
    FiscalDocumentTypeId_BR fiscalDocumentTypeId;
    FiscalEstablishmentId_BR fiscalEstablishmentId;
    CustVendAC              fromAccount;
    CustVendAC              toAccount;
    InvoiceId               fromNumber;
    InvoiceId               toNumber;
    FromDate                fromDate;
    ToDate                  toDate;
    boolean                 includePreviouslyExported;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTelemetry</Name>
				<Source><![CDATA[
    private void addTelemetry(
        System.Diagnostics.Stopwatch _stopwatch,
        boolean _status,
        str _funcName,
        int _documentsCount)
    {
        _stopwatch.Stop();
        int timePerDocument = _documentsCount ? _stopwatch.ElapsedMilliseconds / _documentsCount : 0;
        GlobalizationInstrumentationHelper::featureRunWithPerformance(
            GlobalizationConstants::FeatureReferenceBR00059,
            _funcName,
            GlobalizationInstrumentationHelper::DefaultFeatureVersion,
            SysCountryRegionCode::countryInfo(),
            _stopwatch.ElapsedMilliseconds,
            false,
            _status,
            timePerDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalDocumentTypeId</Name>
				<Source><![CDATA[
    public FiscalDocumentTypeId_BR parmFiscalDocumentTypeId(FiscalDocumentTypeId_BR _fiscalDocumentTypeId = fiscalDocumentTypeId)
    {
        fiscalDocumentTypeId = _fiscalDocumentTypeId;

        return fiscalDocumentTypeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalEstablishmentId</Name>
				<Source><![CDATA[
    public FiscalEstablishmentId_BR parmFiscalEstablishmentId(FiscalEstablishmentId_BR _fiscalEstablishmentId = fiscalEstablishmentId)
    {
        fiscalEstablishmentId = _fiscalEstablishmentId;

        return fiscalEstablishmentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromAccount</Name>
				<Source><![CDATA[
    public CustVendAC parmFromAccount(CustVendAC _fromAccount = fromAccount)
    {
        fromAccount = _fromAccount;

        return fromAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromNumber</Name>
				<Source><![CDATA[
    public InvoiceId parmFromNumber(InvoiceId _fromNumber = fromNumber)
    {
        fromNumber = _fromNumber;

        return fromNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludePreviouslyExported</Name>
				<Source><![CDATA[
    public boolean parmIncludePreviouslyExported(boolean  _includePreviouslyExported = includePreviouslyExported)
    {
        includePreviouslyExported = _includePreviouslyExported;
        return includePreviouslyExported;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToAccount</Name>
				<Source><![CDATA[
    public CustVendAC parmToAccount(CustVendAC _toAccount = toAccount)
    {
        toAccount = _toAccount;

        return toAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToNumber</Name>
				<Source><![CDATA[
    public InvoiceId parmToNumber(InvoiceId _toNumber = toNumber)
    {
        toNumber = _toNumber;

        return toNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the internal query used to retrieve all RPS records to be exported.
    /// </summary>
    /// <param name="_joinMode">The <c>JoinMode</c> to be used in the query.</param>
    /// <param name="_fetchMode">The <c>QueryFetchMode</c> to be used in the query.</param>
    protected void queryBuild(  JoinMode        _joinMode   = JoinMode::InnerJoin,
                                QueryFetchMode  _fetchMode  = QueryFetchMode::One2One)
    {
        QueryBuildFieldList     fieldList;
        FiscalDocumentFormat_BR fiscalDocumentFormat    = FiscalDocumentFormat_BR::find(FiscalDocumentType_BR::find(fiscalDocumentTypeId, fiscalEstablishmentId).RecId);

        super(_joinMode, _fetchMode);

        if (!this.validateQuery())
        {
            throw Exception::Error;
        }

        this.query().dataSourceTable(tableNum(EFDocumentCity_BR)).addRange(fieldNum(EFDocumentCity_BR, RPSDate                  )).value(queryRange(this.parmFromDate(),    this.parmToDate()));
        this.query().dataSourceTable(tableNum(EFDocumentCity_BR)).addRange(fieldNum(EFDocumentCity_BR, RPSNumber                )).value(queryRange(this.parmFromNumber(),  this.parmToNumber()));

        if (!includePreviouslyExported)
        {
            this.query().dataSourceTable(tableNum(EFDocumentCity_BR)).addRange(fieldNum(EFDocumentCity_BR, RPSExportDate        )).value(SysQuery::valueEmptyString());
        }

        this.query().dataSourceTable(tableNum(EFDocumentCity_BR)).addRange(fieldNum(EFDocumentCity_BR, RPSImportDate            )).value(SysQuery::valueEmptyString());
        this.query().dataSourceTable(tableNum(FiscalDocument_BR)).addRange(fieldNum(FiscalDocument_BR, TotalServicesAmount      )).value(SysQuery::valueNot(0));
        this.query().dataSourceTable(tableNum(FiscalDocument_BR)).addRange(fieldNum(FiscalDocument_BR, FiscalDocumentFormat     )).value(queryValue(fiscalDocumentFormat.RecId));
        this.query().dataSourceTable(tableNum(FiscalDocument_BR)).addRange(fieldNum(FiscalDocument_BR, FiscalDocumentAccountType)).value(queryValue(CustVendType_BR::Customer));
        this.query().dataSourceTable(tableNum(FiscalDocument_BR)).addRange(fieldNum(FiscalDocument_BR, FiscalDocumentAccountNum )).value(queryRange(this.parmFromAccount(), this.parmToAccount()));

        fieldList = this.query().dataSourceTable(tableNum(EFDocumentCity_BR)).fields();
        fieldList.addField(fieldNum(EFDocumentCity_BR, FiscalDocument_BR));

        this.queryRun(new QueryRun(this.query()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exports the records to the RPS file and
    /// updates the <c>EFDocumentCity_BR</c> table.
    /// </summary>
    /// <remarks>
    /// It calls the super() method to actually export the RPS file.
    /// The <c>EFDocumentCity_BR</c> records are updated after the entire RPS file is exported.
    /// </remarks>
    public void run()
    {
        QueryRun                    qr;
        EFDocumentCity_BR           efDocumentCity;
        FiscalDocument_BR           fiscalDocument;
        DirPartyTable               dirPartyTable;
        InvoiceServicesAmount_BR    sumServicesAmount;
        int                         countRPSLines;

        this.queryBuild();
        super();

        ttsBegin;

        qr = new QueryRun(this.query());
        qr.query().dataSourceTable(tableNum(EFDocumentCity_BR)).update(true);

        setPrefix("@GLS60367");

        System.Diagnostics.Stopwatch stopwatch = System.Diagnostics.Stopwatch::StartNew();
        int documentsCount;
        System.Exception ex;

        try
        {
            while (qr.next())
            {
                efDocumentCity  = qr.get(tableNum(EFDocumentCity_BR));
                fiscalDocument  = qr.get(tableNum(FiscalDocument_BR));
                dirPartyTable   = qr.get(tableNum(DirPartyTable));

                if (efDocumentCity)
                {
                    countRPSLines++;
                    sumServicesAmount               += fiscalDocument.TotalServicesAmount;
                    efDocumentCity.RPSExportDate    = datetobeginUtcDateTime(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), DateTimeUtil::getUserPreferredTimeZone());
                    efDocumentCity.update();

                    info(strFmt("@GLS64292",    efDocumentCity.RPSNumber,
                                                efDocumentCity.RPSDate,
                                                dirPartyTable.Name,
                                                fiscalDocument.TotalServicesAmount));
                }

                documentsCount++;
            }
        }
        catch(ex)
        {
            this.addTelemetry(stopwatch, false, funcName(), documentsCount);
            throw ex;
        }
        finally
        {
            this.addTelemetry(stopwatch, true, funcName(), documentsCount);
        }

        info(strFmt("@GLS64127", countRPSLines));
        info(strFmt("@GLS64128", sumServicesAmount));

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Helper method to validate if a specific field is
    /// included in the internal query.
    /// </summary>
    /// <param name="_tableId">The table ID to be checked.</param>
    /// <param name="_fieldId">The field ID to be checked.</param>
    /// <returns>True if the field is part of the query; false, otherwise.</returns>
    private boolean validateField(  tableId _tableId,
                                    fieldId _fieldId)
    {
        QueryBuildFieldList fieldList = this.query().dataSourceTable(_tableId).fields();
        int i;

        for (i = 1; i <= fieldList.fieldCount(); i++)
        {
            if (fieldList.field(i) == _fieldId)
            {
                return true;
            }
        }

        return checkFailed(strFmt("@GLS64290", fieldId2name(_tableId, _fieldId), tableId2name(_tableId), parmLayoutId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Helper method to validate if the minimal set of
    /// tables and fields exists on the internal query to
    /// generate the RPS file.
    /// </summary>
    /// <returns>True if all tables and fields are included; false, otherwise.</returns>
    protected boolean validateQuery()
    {
        boolean ret;

        ret = this.validateTable(tableNum(EFDocumentCity_BR));
        ret = this.validateTable(tableNum(FiscalDocument_BR))   && ret;
        ret = this.validateTable(tableNum(CustTable))           && ret;
        ret = this.validateTable(tableNum(DirPartyTable))       && ret;

        if (ret)
        {
            ret = this.validateField(tableNum(EFDocumentCity_BR),    fieldNum(EFDocumentCity_BR, RPSNumber))            && ret;
            ret = this.validateField(tableNum(EFDocumentCity_BR),    fieldNum(EFDocumentCity_BR, RPSDate))              && ret;
            ret = this.validateField(tableNum(FiscalDocument_BR),    fieldNum(FiscalDocument_BR, TotalServicesAmount))  && ret;
            ret = this.validateField(tableNum(DirPartyTable),        fieldNum(DirPartyTable,     Name))                 && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Helper method to validate if a specific table is
    /// included in the internal query.
    /// </summary>
    /// <param name="_tableId">The table ID to be checked.</param>
    /// <returns>True if the table is part of the query; false, otherwise.</returns>
    private boolean validateTable(tableId  _tableId)
    {
        if (!this.query().dataSourceTable(_tableId))
        {
            return checkFailed(strFmt("@GLS64291", tableId2name(_tableId), parmLayoutId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ConfExportRPS_BR construct()
    {
        return new ConfExportRPS_BR();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>