<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureCalcBalances_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class FactureCalcBalances_RU
{
    FactureJour_RU    factureJour;
    Map               mapMapFactureAmounts, mapFactureAmounts;
    #define.factureTransKey([_factureTrans.TaxCode, defaultDimension,
                             inventTransId,
                             _factureTrans.InternalInvoiceId,
                             _factureTrans.InvoiceId,
                             _factureTrans.NumberSequenceGroup])
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addFactureTransAmounts</Name>
				<Source><![CDATA[
    protected void addFactureTransAmounts(Map             _mapAmounts,
                                          FactureTrans_RU _factureTrans,
                                          FactureJour_RU  _factureJour)
    {
        DimensionDefault             defaultDimension;
        InventTransId                inventTransId = _factureTrans.TaxCode ? _factureTrans.InventTransId : '';
        BookStructSmallVATAmounts_RU structAmounts;

        ;
        if (_factureJour.Module == FactureModule_RU::Vend)
        {
            defaultDimension = _factureTrans.DefaultDimension;
            inventTransId    = _factureTrans.InventTransId;
        }
        else
        {
            defaultDimension = _factureTrans.TaxCode ? _factureTrans.DefaultDimension : 0;
        }

        structAmounts = _mapAmounts.exists(#factureTransKey)                                       ?
                        BookStructSmallVATAmounts_RU::create(_mapAmounts.lookup(#factureTransKey)) :
                        new BookStructSmallVATAmounts_RU();

        structAmounts.addAmounts(_factureTrans.LineAmountMST + _factureTrans.TaxAmountMST,
                                 _factureTrans.LineAmountMST + _factureTrans.TaxAmountMST - _factureTrans.vatAmountMST,
                                 _factureTrans.vatAmountMST,
                                 _factureTrans.Qty);

        if (structAmounts.itemName())
        {
            structAmounts.itemName(strfmt("@GLS107148", structAmounts.itemName(), _factureTrans.itemNameDisplay()));
        }
        else
        {
            structAmounts.itemName(_factureTrans.itemNameDisplay());
        }

        _mapAmounts.insert(#factureTransKey, structAmounts.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    abstract public void calc()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcFactureAmounts</Name>
				<Source><![CDATA[
    protected Map calcFactureAmounts(FactureJour_RU _factureJour, CustVendInvoiceJour _custVendInvoiceJour)
    {
        Map                     factureAmounts = new Map(Types::Container, Types::Container);
        FactureTrans_RU         factureTrans;
        FactureModule_RU        module = _factureJour.Module;

        while select sum(LineAmountMST), sum(vatAmountMST), sum(TaxAmountMST), sum(Qty), maxof(ItemName) from factureTrans
            group by TaxCode, DefaultDimension, InventTransId, InternalInvoiceId, InvoiceId, NumberSequenceGroup
            where factureTrans.FactureId           == _factureJour.FactureId                     &&
                  factureTrans.Module              == module                                     &&
                  factureTrans.InvoiceDate         == _custVendInvoiceJour.InvoiceDate           &&
                  factureTrans.InvoiceId           == _custVendInvoiceJour.InvoiceId             &&
                  factureTrans.SalesPurchId        == _custVendInvoiceJour.Num                   &&
                  factureTrans.NumberSequenceGroup == _custVendInvoiceJour.NumberSequenceGroupId &&
                  (module == FactureModule_RU::Cust ||
                   (module == FactureModule_RU::Vend &&
                    factureTrans.InternalInvoiceId  == _custVendInvoiceJour.PurchInternalInvoiceId_RU))

        {
            this.addFactureTransAmounts(factureAmounts, factureTrans, _factureJour);
        }

        return factureAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInvoiceBuffer</Name>
				<Source><![CDATA[
    protected CustVendInvoiceJour initInvoiceBuffer()
    {
        VendInvoiceJour vendInvoiceJour;
        CustInvoiceJour custInvoiceJour;

        if (factureJour.Module == FactureModule_RU::Cust)
        {
            return  custInvoiceJour;
        }
        else
        {
            return  vendInvoiceJour;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransBuffer</Name>
				<Source><![CDATA[
    protected CustVendTrans initTransBuffer()
    {
        CustTrans custTrans;
        VendTrans vendTrans;

        if (factureJour.Module == FactureModule_RU::Cust)
        {
            return custTrans;
        }
        else
        {
            return vendTrans;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapFactureAmounts</Name>
				<Source><![CDATA[
    public Map mapFactureAmounts()
    {
        return mapFactureAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapMapFactureAmounts</Name>
				<Source><![CDATA[
    public Map mapMapFactureAmounts()
    {
        return mapMapFactureAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FactureJour_RU _factureJour)
    {
        factureJour = _factureJour;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>