<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchFormLetter_ReceiptsList</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SysOperationJournaledParametersAttribute(true)]
class       PurchFormLetter_ReceiptsList
extends     PurchFormLetter implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>beforeOperation</Name>
				<Source><![CDATA[
        protected void beforeOperation(SysOperationExecutionMode _executionMode)
    {
        InventQualityManagementCreateHandler::createPurchaseReceiptsListBeforeParms(this.parmId(), this.documentStatus());

        super(_executionMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
        public ClassDescription caption()
    {
        return PurchFormLetter_ReceiptsList::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
        public DocumentStatus documentStatus()
    {
        return DocumentStatus::ReceiptsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        void  new(
        identifierName _className = classstr(FormletterService),
        identifierName _methodName= methodstr(FormletterService, postPurchaseOrderReceiptList),
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        super(_className, _methodName, _executionMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMgmtDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies the print management document type.
    /// </summary>
    /// <returns>
    /// The print management document type for purchase order receipts list.
    /// </returns>
    protected PrintMgmtDocumentType printMgmtDocumentType()
    {
        return PrintMgmtDocumentType::PurchaseOrderReceiptsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        boolean  unpack(container  _packedClass)
    {
        Integer     version = conpeek(_packedClass,1);
        NoYes       remain;

        ParmId          parmId;
        PurchParmUpdate purchParmUpdate;
        NoYes           queryCriteria;
        NoYes           editing;
        Printout        printout;
        NoYes           printFormletter;
        container       printersettingsFormletter;
        container       printersettingsFormletterCopy;
        boolean         usePrintManagement;
        boolean         printSalesFormletter;

        #LOCALMACRO.ParmList_v25sp2
            parmId,
            purchParmUpdate.SpecQty,
            Remain,
            purchParmUpdate.CreditRemaining,
            QueryCriteria,
            Editing,
            Printout,
            printFormletter,
            printersettingsFormletter
        #ENDMACRO

        #LOCALMACRO.ParmList_v30
            parmId,
            purchParmUpdate,
            QueryCriteria,
            Editing,
            Printout,
            printFormletter,
            printersettingsFormletter
        #ENDMACRO

        #LOCALMACRO.ParmList_v401
            parmId,
            purchParmUpdate,
            QueryCriteria,
            Editing,
            Printout,
            printFormletter,
            printersettingsFormletter,
            printersettingsFormletterCopy
        #ENDMACRO

        #LOCALMACRO.ParmList_v5
            parmId,
            purchParmUpdate,
            QueryCriteria,
            Editing,
            Printout,
            printFormletter,
            printersettingsFormletter,
            printersettingsFormletterCopy,
            usePrintManagement
        #ENDMACRO

        switch (version)
        {
            case 7+1 /*case is old curresntversion + old parentversion*/ :
                [version, #parmList_v5] = _packedClass;
                this.setNewContract(PurchFormLetterPurchOrderContract::construct());

                contractIsFromPreviousVersion = true;
                this.parmId(parmId);
                this.purchParmUpdate(purchParmUpdate);
                this.printout(printout);
                this.printFormLetter(printFormletter);
                this.updatePrinterSettingsFormLetter(printerSettingsFormletter, PrintSetupOriginalCopy::Original);
                this.updatePrinterSettingsFormLetter(printerSettingsFormletterCopy, PrintSetupOriginalCopy::Copy);
                this.usePrintManagement(usePrintManagement);
                this.printSalesFormLetter(printSalesFormletter);
                break;

            case 6                  :   [version, #ParmList_v401]               = _packedClass;
                                        break;

            case 5                  :   [version, #ParmList_v30]                = _packedClass;
                                        printersettingsFormletterCopy           = printersettingsFormletter;
                                        break;

            case 4                  :   [version, #ParmList_v25sp2]             = _packedClass;
                                        break;

            default : return super(_packedClass);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
        static ClassDescription  description()
    {
        return "@SYS25756";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReceiptList</Name>
				<Source><![CDATA[
        static public PurchFormLetter_ReceiptsList newReceiptList(
        identifierName _className  = classstr(FormletterService),
        identifierName _methodName = methodstr(FormletterService, postPurchaseOrderReceiptList),
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        PurchFormLetter_ReceiptsList formletter = new PurchFormLetter_ReceiptsList(_className, _methodName, _executionMode);
        formletter.init();
        return formletter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return this.checkRunInNewSession();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeShowLink</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean errorMessageHelpScopeShowLink()
    {
        if (PurchFormLetterErrorMessageHelpScopeReceiptsListFlight::instance().isEnabled())
        {
            return super();
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>