<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDefaultDimensionHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class AssetDefaultDimensionHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyDefaultDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies the Default Dimension from one <c>AssetBook</c> to another.
    ///    If fixed asset id is a part of <c>LedgerDefaultDimensionValueSet</c>,
    ///    existing asset id of source <c>AssetBook</c> would be changed to asset id of the target <c>AssetBook</c>
    /// <param name="_sourceAssetBook">
    ///    The AssetBook instance with existing DefaultDimensions.
    /// </param>
    /// <param name="_targetAssetBook">
    ///    The AssetBook instance to copy default dimensions into.  
    /// </param>
    /// <returns>
    ///    A new DefaulDimension value.
    /// </returns>
    internal static LedgerDefaultDimensionValueSet copyDefaultDimensions(AssetBook _sourceAssetBook, AssetBook _targetAssetBook)
    {
        AssetDefaultDimensionHelper defaultDimensionHelper = new AssetDefaultDimensionHelper();

        LedgerDefaultDimensionValueSet assetOnlyDefaultDimension = defaultDimensionHelper.createDefaultDimensionWithAssetAttributesOnly(_sourceAssetBook, _targetAssetBook);

        _targetAssetBook.DefaultDimension = DimensionDefaultFacade::serviceMergeDefaultDimensions(assetOnlyDefaultDimension, _sourceAssetBook.DefaultDimension);

        return _targetAssetBook.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefaultDimensionWithAssetAttributesOnly</Name>
				<Source><![CDATA[
    private LedgerDefaultDimensionValueSet createDefaultDimensionWithAssetAttributesOnly(AssetBook _AssetBook, AssetBook _newAssetBook)
    {
        DimensionAttributeValueSetStorage newDefaultDimensionStorage = new DimensionAttributeValueSetStorage();

        DimensionAttributeValueSetStorage existingDefaultDimensionStorage = DimensionAttributeValueSetStorage::find(_assetBook.DefaultDimension);

        for (int idx = 1; idx <= existingDefaultDimensionStorage.elements(); idx++)
        {
            DimensionAttribute dimensionAttribute = DimensionAttribute::find(existingDefaultDimensionStorage.getAttributeByIndex(idx));

            if (dimensionAttribute
                && this.isFixedAssetDimensionAttribute(dimensionAttribute)
                && this.isDimensionAttributeValueEqualsExistingAssetId(
                    existingDefaultDimensionStorage.getValueByIndex(idx),
                    dimensionAttribute,
                    _assetBook.AssetId))
            {
                this.addNewDimensionAttributeValue(newDefaultDimensionStorage, dimensionAttribute, _newAssetBook.AssetId);
            }
        }

        return newDefaultDimensionStorage.save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNewDimensionAttributeValue</Name>
				<Source><![CDATA[
    private void addNewDimensionAttributeValue(
        DimensionAttributeValueSetStorage _dimensionAttributeStorage,
        DimensionAttribute _dimensionAttribute,
        str _newValue)
    {
        DimensionAttributeValue newDimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndValue(
            _dimensionAttribute,
            _newValue,
            false,
            true);

        _dimensionAttributeStorage.addItemValues(
            _dimensionAttribute.RecId,
            newDimensionAttributeValue.RecId,
            newDimensionAttributeValue.HashKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFixedAssetDimensionAttribute</Name>
				<Source><![CDATA[
    private boolean isFixedAssetDimensionAttribute(DimensionAttribute _dimensionAttribute)
    {
        return _dimensionAttribute.BackingEntityTableId == tableNum(AssetTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDimensionAttributeValueEqualsExistingAssetId</Name>
				<Source><![CDATA[
    private boolean isDimensionAttributeValueEqualsExistingAssetId(
        RecId _dimensionAttributeValueRecId,
        DimensionAttribute _dimensionAttribute,
        AssetId _assetId)
    {
        DimensionAttributeValue dimensionAttributeValue = DimensionAttributeValue::find(_dimensionAttributeValueRecId);
        DimensionAttributeValue expectedDimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndValue(_dimensionAttribute, _assetId);

        return dimensionAttributeValue.RecId == expectedDimensionAttributeValue.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>