<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsWorkExecuteDisplaySpotCycleCounting</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the logic behind the RF flow used to spot cycle counting.
/// </summary>
[WHSWorkExecuteMode(WHSWorkExecuteMode::SpotCycleCounting)]
public class WhsWorkExecuteDisplaySpotCycleCounting extends WHSWorkExecuteDisplay
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildLocationSelect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds controls to form state for selecting location.
    /// </summary>
    /// <param name="_con">
    /// Container containing the form state before the controls are added.
    /// </param>
    /// <returns>
    /// Container containing the form state after the controls are added.
    /// </returns>
    private container buildLocationSelect(container _con)
    {
        container                   ret = _con;

        ret += [this.buildControl(#RFText, #WMSLocationId, "@SYS80395", 1, '', extendedTypeNum(WMSLocationId), '', 0)];
        ret += [this.buildControl(#RFButton, #RFOK, "@SYS62581", 1, '', #WHSRFUndefinedDataType, '', 1)];
        ret = this.addCancelButton(ret, 1, true);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    public container displayForm(container _con, str _buttonClicked = '')
    {
        container                       ret = conNull();
        int                             hasError = 0;
        WHSWorkExecuteDisplayCycleCount workExecuteDisplayCycleCount;
        container                       con = _con;
        WHSRFPassthrough                globalPass;

        globalPass = pass;

        pass = WHSRFPassthrough::create(conPeek(_con, 2));

        hasError = this.hasError(_con);

        pass = this.combineMaps(globalPass, pass);

        step = conPeek(conPeek(_con, 1), 2);

        if (pass.exists(#UserId))
        {
            userId = pass.lookup(#UserId);
        }

        if (_buttonClicked == #RFAddLP)
        {
            step = 4;
        }

        ret += [this.buildControl(#RFLabel, "@SYS53388", pass.lookup(#MenuItem), 1, '', #WHSRFUndefinedDataType, '', 0)];

        switch (step)
        {
            case 0:
                ret = this.buildLocationSelect(ret);
                step = 1;
                break;

            case 1:                
                str enteredLocationIdOrCheckDigit = this.getControlDataFromContainer(_con, #WMSLocationId);
                var enteredLocation = WMSLocation::findLocationByIDOrCheckDigit(enteredLocationIdOrCheckDigit, WHSWorkUserSession::find(pass.lookup(#UserId)).InventLocationId);

                if (!this.isValidLocation(enteredLocation))
                {
                    throw error("@WAX1160");
                }

                this.validateLocationDoesNotHavePartialCycleCountWork(enteredLocation);

                pass.insert(#WMSLocationId, enteredLocation.wMSLocationId);

                using (var activityContext = this.instrumentationLogger().workExecuteSpotCycleCount().createSpotCycleCountWork())
                {
                    var cycleCount = WHSCycleCountCreateLocation::constructFromWMSLocation(enteredLocation.inventLocationId, enteredLocation.wMSLocationId);
                    cycleCount.runOperation();
                }

                WHSWorkLineView workLineView;
                select firstonly WorkId, LineNum from workLineView
                    where workLineView.InventLocationId == enteredLocation.inventLocationId
                        && workLineView.wmsLocationId == enteredLocation.wMSLocationId
                        && workLineView.WorkStatus == WHSWorkStatus::Open
                        && workLineView.WorkType == WHSWorkType::Count;

                if (workLineView.WorkId == '')
                {
                    throw error("@WAX4221");
                }

                pass.insert(#WorkId, workLineView.WorkId);
                pass.parmLineNum(workLineView.LineNum);

                workExecuteDisplayCycleCount = WHSWorkExecuteDisplay::construct(WhsWorkExecuteMode::CycleCounting);
                step = 0;
                ret = this.updateModeStepPass(ret, WHSWorkExecuteMode::SpotCycleCounting, step, pass);
                ret = workExecuteDisplayCycleCount.displayForm(ret, _buttonClicked);
                pass = WHSRFPassthrough::create(conPeek(ret, 2));
                break;
             
            default:
                workExecuteDisplayCycleCount = WHSWorkExecuteDisplay::construct(WhsWorkExecuteMode::CycleCounting);
                con = conDel(con, 1, 2);
                ret = this.updateModeStepPass(con, WHSWorkExecuteMode::SpotCycleCounting, step, pass);
                ret = workExecuteDisplayCycleCount.displayForm(ret, _buttonClicked);
                pass = WHSRFPassthrough::create(conPeek(ret, 2));
                break;
        }
        ret = this.updateModeStepPass(ret, WHSWorkExecuteMode::SpotCycleCounting, step, pass);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether location is valid.
    /// </summary>
    /// <param name = "_location">The selected location.</param>
    /// <returns>true if location is valid; otherwise, false.</returns>
    protected boolean isValidLocation (WMSLocation _location)
    {
        return _location != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLocationDoesNotHavePartialCycleCountWork</Name>
				<Source><![CDATA[
    private void validateLocationDoesNotHavePartialCycleCountWork(WMSLocation _countingLocation)
    {
        WHSWorkTable	localWorkTable;
        WHSWorkLine		localWorkLine;

        select firstonly RecId from localWorkTable
            where localWorkTable.IsPartialCycleCountWork	== NoYes::Yes
                && localWorkTable.WorkStatus				< WHSWorkStatus::Closed
                && localWorkTable.WorkTransType				== WHSWorkTransType::CycleCount
                && localWorkTable.InventLocationId			== _countingLocation.inventLocationId
            exists join localWorkLine
                where localWorkLine.WorkId			== localWorkTable.WorkId
                    && localWorkLine.WMSLocationId	== _countingLocation.wMSLocationId;

        if (localWorkTable.RecId)
        {
            throw error("@WAX:NonGuidedCountingErrorLocationHasNonCompletedPartialCycleCountWork");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>