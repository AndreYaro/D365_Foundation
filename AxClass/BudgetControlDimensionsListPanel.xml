<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlDimensionsListPanel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetControlDimensionsListPanel</c> class manages a list panel control to use to select the
///    budget control dimension attributes.
/// </summary>
public class BudgetControlDimensionsListPanel extends SysListPanel
{
    BudgetControlConfiguration budgetControlConfiguration;
    DimensionHierarchy accountStructure;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a <c>BudgetControlDimensionAttribute</c> record for the current configuration with the
    ///    specified dimension attribute.
    /// </summary>
    /// <param name="_data">
    ///    The item that was added to the list of budget control enabled dimension attributes.
    /// </param>
    public void addData(container _data)
    {
        if (budgetControlConfiguration
            && !budgetControlConfiguration.IsActive
            && accountStructure)
        {
            ttsbegin;

            BudgetControlConfiguration controlConfiguration = BudgetControlConfiguration::find(budgetControlConfiguration.RecId);

            if (accountStructure.RecId
                && controlConfiguration
                && BudgetControlConfigurationManager::isConfigurationEditPermitted(controlConfiguration.RecId))
            {
                // Only the draft configuration that is locked for edit by the current user is allowed for updates.
                DimensionAttributeRecId dimAttributeId;

                BudgetPrimaryLedgerDimensionAttribute budgetDimAttribute;
                BudgetControlDimensionAttribute controlDimAttribute;

                DimensionAttribute dimAttribute;
                DimensionHierarchyLevel dimHierarchyLevel;

                int i = 0;

                for (i = conlen(_data); i; i--)
                {
                    budgetDimAttribute.clear();
                    controlDimAttribute.clear();

                    dimAttributeId = conpeek(_data, i);

                    // Get the budget dimension attribute.
                    select firstonly RecId from budgetDimAttribute
                        where budgetDimAttribute.PrimaryLedger == controlConfiguration.PrimaryLedger
                        exists join dimAttribute
                            where dimAttribute.RecId == budgetDimAttribute.DimensionAttribute
                                && dimAttribute.RecId == dimAttributeId
                        exists join dimHierarchyLevel
                            where dimHierarchyLevel.DimensionAttribute == dimAttribute.RecId
                                && dimHierarchyLevel.DimensionHierarchy == accountStructure.RecId;

                    if (budgetDimAttribute)
                    {
                        // Add the control dimension attribute.
                        controlDimAttribute.BudgetControlConfiguration = controlConfiguration.RecId;
                        controlDimAttribute.BudgetPrimaryLedgerDimensionAttribute = budgetDimAttribute.RecId;
                        controlDimAttribute.Ordinal = BudgetControlDimensionAttribute::getNextOrdinal(controlConfiguration.RecId);
                        controlDimAttribute.insert();
                    }
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the items for the left and right lists of the list panel.
    /// </summary>
    /// <returns>
    ///    A container with the items to add to both the left and right lists of the list panel.
    /// </returns>
    public container getData()
    {
        container budgetControlDimensions;
        container budgetDimensionsAvailable;

        if (budgetControlConfiguration.RecId && accountStructure.RecId)
        {
            // Get the budget control dimensions selected.
            budgetControlDimensions = BudgetControlDimensionsListPanel::getBudgetControlDimensions(
                budgetControlConfiguration.RecId, accountStructure.RecId);

            // Get the budget dimensions available to select.
            budgetDimensionsAvailable = BudgetControlDimensionsListPanel::getBudgetDimensionsAvailable(
                budgetControlConfiguration.RecId, accountStructure.RecId);
        }

        return [budgetDimensionsAvailable, budgetControlDimensions];
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>positionsUpdated</Name>
				<Source><![CDATA[
    protected container positionsUpdated()
    {
        container packedPositionMap = super();

        BudgetControlDimensionAttribute::updateOrdinals(packedPositionMap, budgetControlConfiguration.RecId);

        return packedPositionMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the <c>BudgetControlDimensionAttribute</c> record of the current configuration with the
    ///    specified dimension attribute.
    /// </summary>
    /// <param name="_data">
    /// The item that was removed from the list of budget control enabled dimension attributes.
    /// </param>
    public void removeData(container _data)
    {
        // If the Budget Control Configuration exists and is not Active.
        if (budgetControlConfiguration && !budgetControlConfiguration.IsActive)
        {
            if (BudgetControlConfigurationManager::isConfigurationEditPermitted(budgetControlConfiguration.RecId))
            {
                // Only the draft configuration that is locked for edit by the current user is allowed for updates.
                ttsbegin;

                DimensionAttributeRecId dimAttributeRecId;

                BudgetPrimaryLedgerDimensionAttribute budgetDimensionAttribute;
                BudgetControlDimensionAttribute controlDimensionAttribute;

                int i;

                for (i=conlen(_data); i; i--)
                {
                    dimAttributeRecId = conpeek(_data, i);

                    // Remove the references of the control dimension attribure before deleting it.
                    BudgetControlConfigurationManager::removeControlDimAttributeReferences(budgetControlConfiguration.RecId, dimAttributeRecId);

                    // Delete the control dimension attribute.
                    delete_from controlDimensionAttribute
                        where controlDimensionAttribute.BudgetControlConfiguration == budgetControlConfiguration.RecId
                        exists join budgetDimensionAttribute
                            where budgetDimensionAttribute.RecId == controlDimensionAttribute.BudgetPrimaryLedgerDimensionAttribute
                                && budgetDimensionAttribute.DimensionAttribute == dimAttributeRecId;
                }

                // Cleanup the budget control rules and budget groups if the last dimension attribute was removed from the list.
                BudgetControlConfigurationManager::cleanupDimAttributeNotExistReferences(budgetControlConfiguration.RecId);

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccountStructure</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the account structure reference for the list panel.
    /// </summary>
    /// <param name="_accountStructureRecId">
    ///    The record ID of the <c>DimensionHierarhcy</c> record.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setAccountStructure(DimensionHierarchyId _accountStructureRecId)
    {
        accountStructure = DimensionHierarchy::find(_accountStructureRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetControlConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the budget control configuration reference for the list panel.
    /// </summary>
    /// <param name="_controlConfigurationRecId">
    ///    The record ID of the <c>BudgetControlConfiguration</c> record.
    /// </param>
    /// <remarks>
    ///    This method also sets the account structure to the one that is referenced by the configuration.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setBudgetControlConfiguration(BudgetControlConfigurationRecId _controlConfigurationRecId)
    {
        budgetControlConfiguration = BudgetControlConfiguration::find(_controlConfigurationRecId);
        this.setAccountStructure(budgetControlConfiguration.DimensionHierarchyAccountStructure);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortMethod</Name>
				<Source><![CDATA[
    protected FormListSort sortMethod()
    {
        // Do not sort the list as the data is returned in the correct order.
        return FormListSort::NoSort;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the selected item can be added or removed from the list.
    /// </summary>
    /// <param name="_data">
    ///    The selected item in the panel list.
    /// </param>
    /// <param name="_addRemove">
    ///    Specifies whether the selected item is being added or removed.
    /// </param>
    /// <returns>
    ///    true if the selected item can be added or removed; otherwise, false.
    /// </returns>
    public boolean validate(anytype _data, AddRemove _addRemove)
    {
        boolean isValid = super(_data, _addRemove);

        // Active configurations or configurations locked for editing by another user are not allowed to be updated.
        isValid = isValid && BudgetControlConfigurationManager::isConfigurationEditPermitted(budgetControlConfiguration.RecId);

        if (isValid)
        {
            DimensionAttributeRecId dimAttributeRecId = _data;

            if (_addRemove == AddRemove::Remove)
            {
                if (BudgetControlConfigurationManager::isDimensionAttributeInUse(budgetControlConfiguration.RecId, dimAttributeRecId)
                    && Box::yesNo("@SYS328001", DialogButton::Yes) == DialogButton::No)
                {
                    // The dimension is in use by a rule or group and the removal was not confirmed.
                    isValid = false;
                }
            }
            else if (_addRemove == AddRemove::Add)
            {
                if (!BudgetControlDimensionAttribute::validateBudgetControlDimensionAttribute(accountStructure.RecId, dimAttributeRecId))
                {
                    // The account structure does not have the selected dimension.
                    isValid = false;
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs an instance of the <c>BudgetControlDimensionsListPanel</c> class.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>BudgetControlDimensionsListPanel</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static BudgetControlDimensionsListPanel construct()
    {
        BudgetControlDimensionsListPanel budgetControlDimensionsListPanel = new BudgetControlDimensionsListPanel();

        return budgetControlDimensionsListPanel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetControlDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the items of the left list of the list panel.
    /// </summary>
    /// <param name="_controlConfigurationRecId">
    ///    The record ID of the <c>BudgetControlConfiguration</c> record.
    /// </param>
    /// <param name="_accountStructureRecId">
    ///    The record ID of the <c>DimensionHierarchy</c> record.
    /// </param>
    /// <returns>
    ///    A container with the items to add to the left list of the list panel.
    /// </returns>
    private static container getBudgetControlDimensions(
        BudgetControlConfigurationRecId _controlConfigurationRecId,
        DimensionHierarchyId _accountStructureRecId)
    {
        container budgetControlDimensions;

        if (_controlConfigurationRecId && _accountStructureRecId)
        {
            BudgetControlConfiguration controlConfiguration = BudgetControlConfiguration::find(_controlConfigurationRecId);

            DimensionAttribute dimAttribute;
            BudgetPrimaryLedgerDimensionAttribute budgetDimensionAttribute;
            BudgetControlDimensionAttribute controlDimensionAttribute;

            // Populate the list of dimensions that are currently selected for budget control.
            // Find all the dimensions that are enabled for budget control for the current primary ledger.
            while select RecId, Name from dimAttribute
                order by controlDimensionAttribute.Ordinal
                join RecId from budgetDimensionAttribute
                    where budgetDimensionAttribute.DimensionAttribute == dimAttribute.RecId
                join Ordinal from controlDimensionAttribute
                    where controlDimensionAttribute.BudgetPrimaryLedgerDimensionAttribute == budgetDimensionAttribute.RecId
                        && controlDimensionAttribute.BudgetControlConfiguration == controlConfiguration.RecId
            {
                budgetControlDimensions += [[dimAttribute.RecId, dimAttribute.localizedName()]];
            }
        }

        return budgetControlDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetDimensionsAvailable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the items for the right list of the list panel.
    /// </summary>
    /// <param name="_controlConfigurationRecId">
    ///    The record ID of the <c>BudgetControlConfiguration</c> record.
    /// </param>
    /// <param name="_accountStructureRecId">
    ///    The record ID of the <c>DimensionHierarchy</c> record.
    /// </param>
    /// <returns>
    ///    A container with the items to add to right list of the list panel.
    /// </returns>
    private static container getBudgetDimensionsAvailable(
        BudgetControlConfigurationRecId _controlConfigurationRecId,
        DimensionHierarchyId _accountStructureRecId)
    {
        container budgetDimensionsAvailable;

        if (_controlConfigurationRecId && _accountStructureRecId)
        {
            BudgetControlConfiguration controlConfiguration = BudgetControlConfiguration::find(_controlConfigurationRecId);

            DimensionAttribute dimAttribute;
            DimensionHierarchyLevel dimHierarchyLevel;

            BudgetPrimaryLedgerDimensionAttribute budgetDimensionAttribute;
            BudgetControlDimensionAttribute controlDimensionAttribute;

            // Populate the list of dimensions that are available to be selected for budget control.
            // Find all the dimensions that are enabled for budget for the current primary ledger
            // and are not already enabled for budget control.
            while select RecId, Name from dimAttribute
                order by Name
                exists join dimHierarchyLevel
                    where dimHierarchyLevel.DimensionAttribute == dimAttribute.RecId
                        && dimHierarchyLevel.DimensionHierarchy == _accountStructureRecId
                exists join budgetDimensionAttribute
                    where budgetDimensionAttribute.DimensionAttribute == dimAttribute.RecId
                        && budgetDimensionAttribute.PrimaryLedger == controlConfiguration.PrimaryLedger
                notexists join controlDimensionAttribute
                    where controlDimensionAttribute.BudgetPrimaryLedgerDimensionAttribute == budgetDimensionAttribute.RecId
                        && controlDimensionAttribute.BudgetControlConfiguration == controlConfiguration.RecId
            {
                budgetDimensionsAvailable += [[dimAttribute.RecId, dimAttribute.localizedName()]];
            }
        }

        return budgetDimensionsAvailable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes a new instance of the <c>BudgetControlDimensionsListPanel</c> class.
    /// </summary>
    /// <param name="_formRun">
    ///    The form that will contain the list panel controls.
    /// </param>
    /// <param name="_parentId">
    ///    The form control that will contain the list panel controls.
    /// </param>
    /// <returns>
    ///    An instance of the <c>BudgetControlDimensionsListPanel</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static BudgetControlDimensionsListPanel newForm(FormRun _formRun, int _parentId)
    {
        BudgetControlDimensionsListPanel listPanel = BudgetControlDimensionsListPanel::construct();

        listPanel.parmFormRun(_formRun);
        listPanel.parmParentId(_parentId);
        listPanel.parmCaptionSelected("@SYS301238");
        listPanel.parmCaptionAvailable("@SYS314048");

        listPanel.parmHasUpDownButton(true);
        listPanel.parmHasAddAllButton(false);
        listPanel.parmHasRemoveAllButton(false);

        listPanel.build();

        return listPanel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>