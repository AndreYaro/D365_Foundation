<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjActivityHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjActivityHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateProjActivityParentLink</Name>
				<Source><![CDATA[
        /// <summary>
    /// Validates an activity exists and is associated to given Project.
    /// </summary>
    /// <param name = "_projId">Project ID.</param>
    /// <param name = "_activityNumber">Activity number.</param>
    /// <returns>true if the activity number exists and is associated to given project; otherwise, false.</returns>
    [SysObsoleteAttribute('This method is replaced by validateProjActivityParentLinkV2 to add _enableClosedCheck parameters.', false, 16\05\2022)]
    public static boolean validateProjActivityParentLink( ProjId _projId, 
														  smmActivityNumber _activityNumber)
    {
        return ProjActivityHelper::validateProjActivityParentLinkV2(_projId, _activityNumber, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjActivityParentLinkV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates an activity exists and is associated to given Project.
    /// </summary>
    /// <param name = "_projId">Project ID.</param>
    /// <param name = "_activityNumber">Activity number.</param>
    /// <param name = "_enableClosedCheck">Enable checking for closed activity.</param>
    /// <returns>true if the activity number exists, is not closed and is associated to given project; otherwise, false.</returns>
    public static boolean validateProjActivityParentLinkV2( ProjId _projId,
                                                          smmActivityNumber _activityNumber,
                                                          boolean _enableClosedCheck = true)
    {
        boolean ret = true;

        if (!ProjActivity::find(_activityNumber))
        {
            ret = checkFailed(strFmt("@Proj:ProjActivityNotExisting", _activityNumber));
        }

        ProjParameters projParameters = ProjParameters::find();

        if ( ret && _enableClosedCheck && projParameters.EnableActivityIdCheck == NoYes::Yes)
        {
            smmActivities smmActivitiesLocal = smmActivities::find(_activityNumber);

            if(smmActivitiesLocal.RecId && smmActivitiesLocal.Closed == NoYes::Yes)
            {
                ret = checkFailed(strFmt("@Proj:ActivityClosedNotAllowed", _activityNumber));
            }
        }

        if (ret)
        {
            RecId projRecId = ProjTable::find(_projId).RecId;
            if (smmActivityParentLinkTable::findByActivityAndParent(_activityNumber, smmActivityParentType::Project, projRecId, tableNum(ProjTable)).RecId == 0)
            {
                ret = checkFailed(strfmt("@Proj:ActivityNumberNotAssociatedToProject", _activityNumber, _projId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>