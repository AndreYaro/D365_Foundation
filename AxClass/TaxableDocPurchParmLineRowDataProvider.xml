<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxableDocPurchParmLineRowDataProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Row data provider for purch parm line.
/// </summary>
public class TaxableDocPurchParmLineRowDataProvider extends TaxableDocPurchLineRowDataProvider
{
    PurchParmLine   purchParmLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initMainTable</Name>
				<Source><![CDATA[
    protected void initMainTable()
    {
        purchParmLine = mainRecord as purchParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRelatedTables</Name>
				<Source><![CDATA[
    protected void initRelatedTables()
    {
        if (purchParmLine.inventTable())
        {
            ecoResProduct = EcoResProduct::find(purchParmLine.inventTable().Product);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustomsImportOrder_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if this is an import order or not.
    /// </summary>
    /// <returns>
    /// True if this transaction is an import order; otherwise, false.
    /// </returns>
    // <GIN>
    [Replaceable]
    protected boolean isCustomsImportOrder_IN()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingCurrencyExchangeRate</Name>
				<Source><![CDATA[
    // </GIN>

    /// <summary>
    /// Gets accounting currency exchange rate
    /// </summary>
    /// <returns>
    /// Accounting currency exchange rate
    /// </returns>
    protected ExchRate getAccountingCurrencyExchangeRate(TaxableDocumentLineObject _lineObj)
    {
        if (this.isCustomsImportOrder_IN())
        {
            ExchangeRateTypeRecId exchangeRateTypeRecId = this.getIndiaExchangeRateTypeRecId(_lineObj);
            if (exchangeRateTypeRecId)
            {
                ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::construct();
                exchangeRateHelper.parmFromCurrency(transactionCurrencyCode);
                exchangeRateHelper.parmToCurrency(accountingCurrencyCode);
                exchangeRateHelper.parmExchangeDate(this.getTransDate());
                exchangeRateHelper.parmExchangeRateTypeRecId(exchangeRateTypeRecId);

                return exchangeRateHelper.getExchangeRate1() / 100;
            }
        }
        
        return super(_lineObj);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportingCurrencyExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets reporting currency exchange rate
    /// </summary>
    /// <returns>
    /// Reporting currency exchange rate
    /// </returns>
    protected ExchRate getReportingCurrencyExchangeRate(TaxableDocumentLineObject _lineObj)
    {
        if (reportingCurrencyCode)
        {
            ExchangeRateTypeRecId exchangeRateTypeRecId = TaxIntegrationUtils::getReportingCurrencyExchangeRateType(TaxIntegrationUtils::getCompanyInfo().RecId);
            if (exchangeRateTypeRecId)
            {
                ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::construct();
                exchangeRateHelper.parmFromCurrency(transactionCurrencyCode);
                exchangeRateHelper.parmToCurrency(reportingCurrencyCode);
                exchangeRateHelper.parmExchangeDate(this.getTransDate());
                exchangeRateHelper.parmExchangeRateTypeRecId(exchangeRateTypeRecId);
                    
                return exchangeRateHelper.getExchangeRate1() / 100;
            }
        }
        else
        {
            return 0;
        }
    
        return super(_lineObj);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIndiaExchangeRateTypeRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets exchange rate type defined in ledger for import transaction
    /// </summary>
    /// <param name = "_lineObj">taxable document line instance</param>
    /// <returns>exchange rate type defined in ledger for import transaction</returns>
    private ExchangeRateTypeRecId getIndiaExchangeRateTypeRecId(TaxableDocumentLineObject _lineObj)
    {
        ExchangeRateTypeRecId exchangeRateTypeRecId;

        TaxModelTaxable_IN taxModelTaxableLoc = taxModelTaxable as TaxModelTaxable_IN;
        if (taxModelTaxableLoc && taxModelTaxableLoc.isForeignTransaction())
        {
            if (taxModelTaxableLoc.getVendTable())
            {
                exchangeRateTypeRecId = TaxIntegrationUtils::getLedgerExtensionIN().CustomsImportExchangeRateType;
            }
        }

        return exchangeRateTypeRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction posting date
    /// </summary>
    /// <returns>
    /// The transaction posting date
    /// </returns>
    private TransDate getTransDate()
    {
        PurchParmLine_IN purchParmLine_IN = purchParmLine.purchParmLine_IN();
        
        if (this.isCustomsImportOrder_IN() && purchParmLine_IN.SourceTableId == tableNum(CustomsVendBOETrans_IN))
        {
            CustomsVendBOETrans_IN customsVendBOETrans_IN;

            select firstonly RecId, BillOfEntryDate from customsVendBOETrans_IN
                where customsVendBOETrans_IN.RecId == purchParmLine_IN.SourceRecId;

            if (customsVendBOETrans_IN.RecId)
            {
                return customsVendBOETrans_IN.BillOfEntryDate;
            }
        }
        return purchParmLine.purchParmTable().TransDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>