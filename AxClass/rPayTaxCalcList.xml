<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayTaxCalcList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Holds the tax calculation list.
/// </summary>
abstract class rPayTaxCalcList implements IRPayTaxCalcList
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>current</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current value.
    /// </summary>
    /// <returns>
    /// The value.
    /// </returns>
    abstract public anytype current()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Folds amounts.
    /// </summary>
    /// <param name="_functor">
    /// The functor.
    /// </param>
    /// <param name="_initialState">
    /// Applies functor to elements.
    /// </param>
    /// <param name="_context">
    /// The context.
    /// </param>
    /// <returns>
    /// The calculatin state.
    /// </returns>
    public Object fold(IRPayTaxCalcFunctor _functor, Object _initialState, Object _context)
    {
        RPayTaxCalcFoldContract foldContract;
        Object calcState = _initialState;

        this.resetIterator();

        foldContract = new RPayTaxCalcFoldContract();

        while (this.moveNext())
        {
            foldContract.parmCalcState(calcState);
            foldContract.parmListItem(this.current());
            calcState = _functor.apply(foldContract, _context);
        }

        return calcState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>iter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the iterator.
    /// </summary>
    /// <param name="_functor">
    /// The functor.
    /// </param>
    /// <param name="_context">
    /// The context.
    /// </param>
    public void iter(IRPayTaxCalcFunctor _functor, Object _context)
    {
        this.resetIterator();

        while (this.moveNext())
        {
            _functor.apply(this.current(), _context);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>map</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the values map.
    /// </summary>
    /// <param name="_functor">
    /// The functor.
    /// </param>
    /// <param name="_context">
    /// The context.
    /// </param>
    /// <returns>
    /// The <c>IRPayTaxCalcList</c> class instance.
    /// </returns>
    public IRPayTaxCalcList map(IRPayTaxCalcFunctor _functor, Object _context)
    {
        IRPayTaxCalcList    retList;

        this.resetIterator();

        while (this.moveNext())
        {
            retList = _functor.apply(this.current(), _context);
        }

        if (retList)
        {
            return retList;
        }
        else
        {
            return RPayTaxCalcTypeFactory::construct(_context).getTaxCalcEmptyList();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves next in the list.
    /// </summary>
    /// <returns>
    /// True if no errors.
    /// </returns>
    abstract public boolean moveNext()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetIterator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the iterator.
    /// </summary>
    abstract protected void resetIterator()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>