<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustBillOfExchangeEndorseReverse</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustBillOfExchangeReverse</c> class handles the business logic for reversing the transaction
/// to be endorsed to a vendor.
/// </summary>
public class CustBillOfExchangeEndorseReverse extends CustBillOfExchangeEndorsePost
{
    VendTrans   vendTrans;
    VendTrans   vendTrans_old;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>custTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustTrans</c> buffer for the reverse endorsed of a BOE.
    /// </summary>
    /// <returns>
    /// The <c>CustTrans</c> buffer.
    /// </returns>
    protected CustTrans custTrans()
    {
        CustTrans custTrans;

        return custTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetBOEEndorseTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverses the transaction in the <c>CustBillOfExchangeEndorseTrans</c> table by setting the old
    /// <c>CustBillOfExchangeTrans</c> record ID to the <c>ReverseOffsetRecid</c> field of the
    /// <c>CustBillOfExchangeEndorseTrans</c> table.
    /// </summary>
    /// <param name="_custBillOfExchangeJour">
    /// A <c>CustBillOfExchangeJour</c> record.
    /// </param>
    private void offsetBOEEndorseTrans(CustBillOfExchangeJour _custBillOfExchangeJour)
    {
        CustBillOfExchangeTransExtensionJP  endorseTrans;
        CustBillOfExchangeTrans             custBillOfExchangeTrans, custBillOfExchangeTransOld;

        update_recordset endorseTrans
            setting ReverseOffsetRecid = custBillOfExchangeTrans.RecId
        join RecId from custBillOfExchangeTrans
            where custBillOfExchangeTrans.BillOfExchangeId == _custBillOfExchangeJour.BillOfExchangeId
                && custBillOfExchangeTrans.SeqNum          == _custBillOfExchangeJour.BillOfExchangeSeqNum
                && custBillOfExchangeTrans.Status          == _custBillOfExchangeJour.Status
        exists join custBillOfExchangeTransOld
        where custBillOfExchangeTransOld.BillOfExchangeId  == _custBillOfExchangeJour.BillOfExchangeId
            && custBillOfExchangeTransOld.SeqNum           == _custBillOfExchangeJour.BillOfExchangeSeqNum - 1
            && custBillOfExchangeTransOld.Status           == CustVendNegInstStatus::Endorsed
            && endorseTrans.CustBillOfExchangeTrans        == custBillOfExchangeTransOld.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger posting type for reverse endorsed of a bill of exchange.
    /// </summary>
    /// <returns>
    /// The ledger posting type.
    /// </returns>
    protected LedgerPostingType postingType()
    {
        return LedgerPostingType::VendBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>status</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the status for reverse endorsed of BOE.
    /// </summary>
    /// <returns>
    /// The status of the BOE.
    /// </returns>
    protected CustVendNegInstStatus status()
    {
        CustBillOfExchangeTrans         boeTrans;
        CustVendNegInstStatus           status;

        if (custBillOfExchangeJour.Status == CustVendNegInstStatus::Endorsed)
        {
            select firstonly Status from boeTrans
                where boeTrans.BillOfExchangeId == custBillOfExchangeJour.BillOfExchangeId
                   && boeTrans.SeqNum           == custBillOfExchangeJour.BillOfExchangeSeqNum - 1;

            status = boeTrans.Status;
        }

        return status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the business logic to reverse the transaction that will be endorsed to a vendor.
    /// </summary>
    protected void updateNow()
    {
        LedgerPostingController         ledgerPostingController;
        CustBillOfExchangeJourExtensionJP   billOfExchEndorseJour;
        CustBillOfExchangeTransExtensionJP  billOfExchEndorseTrans;

        vendTrans_old = this.retrieveVendTrans();
        if (this.validate())
        {
            if (this.initPostTrans())
            {
                ledgerPostingController = LedgerPostingController::newForLedgerPostingJournal(ledgerVoucher);
                if (ledgerPostingController)
                {
                    ledgerPostingController.getReference().parmTransDate(postingDate);
                }
                // get endorsed jour information
                billOfExchEndorseJour = CustBillOfExchangeJourExtensionJP::findByBillOfExchangeId(custBillOfExchangeJour.BillOfExchangeId);
                // get amount and currency code from vendtrans
                this.parmAmountCur(vendTrans_old.AmountCur);
                this.parmCurrencyCode(vendTrans_old.CurrencyCode);

                //get default dimensions to generate trans.
                billOfExchEndorseTrans = this.getEndorsedTrans();
                this.parmBillOfExchangeDefaultDimension(billOfExchEndorseTrans.BillOfExchangeDefaultDimension);
                this.parmVendorDefaultDimension(billOfExchEndorseTrans.VendorDefaultDimension);

                this.postTrans(LedgerJournalACType::Ledger, CustLedgerAccounts::endorseLedgerDimension(custBillOfExchangeJour.CustAccount));
                this.postTrans(LedgerJournalACType::Vend,   LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(billOfExchEndorseJour.VendAccount, LedgerJournalACType::Vend));
                this.closePaymTrans(vendTrans_old, this.vendTrans(), ledgerVoucher);
                this.endPostTrans();
                // update BillOfExchangeSeqNum and status of CustBillOfExchangeJour
                this.updateCustBillOfExchangeJour(custBillOfExchangeJour.BillOfExchangeId);
                // reread record for table buffer custBillOfExchangeJour after update
                custBillOfExchangeJour.reread();
                // reverse info of BOE endorsement
                this.deleteCustBillOfExchangeJourExtensionJP(custBillOfExchangeJour.BillOfExchangeId);
                // insert BOE trans.
                this.insertCustBillOfExchangeTrans(custBillOfExchangeJour);
                this.offsetBOEEndorseTrans(custBillOfExchangeJour);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the settle amount of vendor transaction
    /// </summary>
    /// <returns>
    /// true if the vendor transaction is valid; otherwise, false.
    /// </returns>
    protected boolean validate()
    {
        if (vendTrans_old.SettleAmountCur != 0)
        {
            // You cannot reverse the endorsed bill of exchange because the transaction has been settled. You must reverse the vendor settlement before you reverse the endorsement of the bill of exchange.
            return checkFailed("@GLS221469");
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>VendTrans</c> record for the reverse endorsed of a BOE.
    /// </summary>
    /// <returns>
    /// A <c>VendTrans</c> record.
    /// </returns>
    protected VendTrans vendTrans()
    {
        return vendTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>