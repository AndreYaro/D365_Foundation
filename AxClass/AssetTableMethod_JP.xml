<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTableMethod_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// It is an adapter class between standard depreciation calculation framework for value model
/// and Japan depreciation calculation framework.
/// </summary>
public class AssetTableMethod_JP
    extends AssetTableMethod
    implements AssetDepTableMethodInterface_JP
{
    AssetDepCalculationManager_JP   assetDepCalculationMgr;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addExtraDepAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add amount for accumulated extra depreciation amount.
    /// </summary>
    /// <param name="_extraDepAmount">
    /// The amount to be added to accumuldated extra depreciation amount.
    /// </param>
    public void addExtraDepAmount(AssetAmount _extraDepAmount)
    {
        assetDepCalculationMgr.addExtraDepAmount(_extraDepAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnpostedSpecialDepAmount</Name>
				<Source><![CDATA[
    public void parmUnpostedSpecialDepAmount(AssetAmount _unpostedSpecialDepAmount)
    {
        assetDepCalculationMgr.parmUnpostedSpecialDepAmount(_unpostedSpecialDepAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnpostedExtraDepAmount</Name>
				<Source><![CDATA[
    public void parmUnpostedExtraDepAmount(AssetAmount _unpostedExtraDepAmount)
    {
        assetDepCalculationMgr.parmUnpostedExtraDepAmount(_unpostedExtraDepAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetIdlePeriods</Name>
				<Source><![CDATA[
    public void parmAssetIdlePeriods(int _assetIdlePeriods)
    {
        assetDepCalculationMgr.parmAssetIdlePeriods(_assetIdlePeriods);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsAssetIdlePeriodActive</Name>
				<Source><![CDATA[
    public void parmIsAssetIdlePeriodActive(boolean _isAssetIdlePeriodActive)
    {
        assetDepCalculationMgr.parmIsAssetIdlePeriodActive(_isAssetIdlePeriodActive);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>AssetTableMethod</c> class.
    /// </summary>
    /// <param name="_assetBook">
    /// The asset book.
    /// </param>
    /// <param name="_assetTransDate">
    /// The date of the asset transaction.
    /// </param>
    /// <param name="_dualDepreciation">
    /// A Boolean value that indicates whether there is dual depreciation.
    /// </param>
    /// <param name="_depreciationAltProfile">
    /// A Boolean value that indicates whether there is another depreciation profile.
    /// </param>
    /// <param name="_depreciationExtProfile">
    /// A Boolean value that indicates whether there is an extended depreciation profile.
    /// </param>
    /// <param name="_assetBudgetModelId">
    /// The ID of the asset budget mode.
    /// </param>
    /// <param name="_depreciationAccleratedProfile_JP">
    /// Whether it is for accelerated depreciation.
    /// </param>
    public void new(AssetBook           _assetBook,
                AssetTransDate      _assetTransDate,
                boolean             _dualDepreciation,
                boolean             _depreciationAltProfile,
                boolean             _depreciationExtProfile,
                AssetBudgetModelId  _assetBudgetModelId = '',
                boolean _depreciationAccleratedProfile_JP = false)

    {
        this.parmIsDepreciationAcceleratedProfile_JP(_depreciationAccleratedProfile_JP);
        super(_assetBook, _assetTransDate, _dualDepreciation, _depreciationAltProfile, _depreciationExtProfile, _assetBudgetModelId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the depreciation amount.
    /// </summary>
    /// <returns>
    /// The depreciation amount.
    /// </returns>
    public AssetAmount calc()
    {
        AssetAmount ret;

        TransDate startOfDeprPeriod = this.getAssetTableInterval().startOfPeriod(periodEnd);
        this.calcRestPeriod(startOfDeprPeriod);

        AssetAcceleratedDepreciation_JPContext acceleratedDeprContext = AssetAcceleratedDepreciation_JPContext::current();

        if (isDepreciationAcceleratedProfile_JP
            && !acceleratedDeprContext)
        {
            using (AssetAcceleratedDepreciation_JPContext context = new AssetAcceleratedDepreciation_JPContext())
            {
                context.accrual = assetBook.depreciationProfile().Accrual;

                if (FeatureStateProvider::isFeatureEnabled(AssetDepCalculation_AcceleratedFeature_JP::instance()))
                {
                    context.accrual = assetBook.depreciationAcceleratedProfile_JP().Accrual;
                }

                context.startOfDeprPeriod = startOfDeprPeriod;

                ret = assetDepCalculationMgr.calc();
            }
        }
        else
        {
            ret = assetDepCalculationMgr.calc();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAllowableLimitForSumOfDepYTD</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the allowable limit for summary of depreciation from beginning of current year to current period end.
    /// </summary>
    /// <returns>
    /// The allowable limit for summary of depreciation from beginning of current year to current period end.
    /// </returns>
    public AssetAmount calcAllowableLimitForSumOfDepYTD()
    {
        return assetDepCalculationMgr.getAllowableLimitForSumOfDepYTD();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcYearBeginningBalanceOfAccumulatedDep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the beginning balance of accumulated depreciation amountfor current year.
    /// </summary>
    /// <returns>
    /// The beginning balance of accumulated depreciation amountfor current year.
    /// </returns>
    public AssetAmount calcYearBeginningBalanceOfAccumulatedDep()
    {
        return assetDepCalculationMgr.getYearBeginningBalanceOfAccumulatedDep();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountToDepreciate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the amount to depreciation.
    /// </summary>
    /// <returns>
    /// The amount to depreciation.
    /// </returns>
    public AssetAmount getAmountToDepreciate()
    {
        if (specialDepReserveAmount && specialDepReserveDate)
        {
            assetAcquisitionValue = specialDepReserveAmount;
            amountToDepreciate = assetAcquisitionValue;
        }
        else
        {
            this.setAmountToDepreciate();
        }
 	
	return amountToDepreciate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetAcquisitionValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the acquisition value.
    /// </summary>
    /// <returns>
    /// The acquisition value.
    /// </returns>
    public AssetAmount getAssetAcquisitionValue()
    {
        return assetAcquisitionValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetDocumentEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the asset document entry record.
    /// </summary>
    /// <returns>
    /// A record of <C>AssetDocumentEntry_JP</C>.
    /// </returns>
    public AssetDocumentEntry_JP getAssetDocumentEntry()
    {
        return assetDocumentEntry_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetTableInterval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current in used instance of <C>AssetTableInterval</C> sub class.
    /// </summary>
    /// <param name="_date">
    /// The date used to get the asset table interval, optional.
    /// </param>
    /// <returns>
    /// The current in used instance of <C>AssetTableInterval</C> sub class.
    /// </returns>
    public AssetTableInterval getAssetTableInterval(AssetTransDate _date = dateNull())
    {
        // When date equals to dateNull(), the default AssetTableInterval is correct;
        // otherwise, need to get the AssetTableInterval according to the date.
        if (_date == dateNull())
    {
        return deprInterval;
    }
        else
        {
            return assetDepCalculationMgr.getAssetTableInterval(_date);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBeginBalanceCalculationResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns year begin balance map.
    /// </summary>
    /// <returns>
    /// Year begin balance result map.
    /// </returns>
    public Map getBeginBalanceCalculationResult()
    {
        return assetDepCalculationMgr.getBeginBalanceCalculationResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSpecialDepAllocationStartDate</Name>
				<Source><![CDATA[
    public AssetTransDate getSpecialDepAllocationStartDate()
	{
	    return deprInterval.findLastDayOfYear(specialDepReserveDate) + 1;
	}

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Does some necessary initialization.
    /// </summary>
    protected void init()
    {
        super();

        assetDepCalculationMgr = AssetDepCalculationManager_JP::construct(assetBook, this, parmRunDate, depreciationExtProfile, isDepreciationAcceleratedProfile_JP);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAdditional</Name>
				<Source><![CDATA[
    /// <summary>
	/// Use this method to do some additional initialization for calculation
	/// </summary>
	public void initAdditional()
	{
        // For pre-tax deduction
        assetDepCalculationMgr.parmCalcArgs().parmAllowableLimitCacheOwner_JP(allowableLimitCacheOwner);
        assetDepCalculationMgr.parmCalcArgs().parmIsForPreTaxDeduction(isForPreTaxDeduction_JP);

	    assetDepCalculationMgr.InitAdditional();

	    // For allocation of special depreciation reserve
	    if (specialDepReserveDate && specialDepReserveAmount)
	    {
            baseDate = max(deprInterval.findLastDayOfYear(specialDepReserveDate), assetBook.SpecialDepLastAllocationDate_JP);
            deprInterval = AssetSpecialDepHelper_JP::assetTableIntervalForAllocation(assetBook);

            periodstart = baseDate + 1;
            periodEnd = deprInterval.endPeriod(periodstart);

	        // No depreciation before last/first date
	        if (parmRunDate < baseDate)
	        {
	            currentInterval = 1;
	        }
	    }
	}

]]></Source>
			</Method>
			<Method>
				<Name>initAssetDocumentEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes asset document entry related attributes based on new asset document entry.
    /// </summary>
    protected void initAssetDocumentEntry()
    {
        if (assetDocumentEntry_JP)
        {
            if (assetDocumentEntry_JP.type() == AssetDocumentType_JP::AssetReductionEntry_Reserve)
            {
                // reserve
                assetAcquisitionValue   = assetSumCalc_Trans.reductionEntryReserveAmount_JP();
                // allocation
                prevDepAmount           = -(assetSumCalc_Trans.reductionEntryAllocationAmount_JP());
                // reserve NBV
                amountToDepreciate      = assetSumCalc_Trans.reductionEntryReserveNBV_JP();

                if (assetBook.LastReserveAllocationDate_JP)
                {
                    periodstart = assetBook.LastReserveAllocationDate_JP + 1;
                    periodEnd   = deprInterval.endPeriod(assetBook.LastReserveAllocationDate_JP + 1);
                }
                else
                {
                    periodstart = assetBook.AllocationStartDate_JP;
                    periodEnd   = deprInterval.endPeriod(assetBook.AllocationStartDate_JP);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRecaptureDepreciation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checkes whether it is doing a recapture depreciation calculation.
    /// </summary>
    /// <returns>
    /// true if it is doing a recapture depreciation calculation; otherwise, return fasle.
    /// </returns>
    /// <remarks>
    /// In the standard depreciation calculation framework, "recapture" is also called "true up" or "catch up".
    /// But as Japan has a "catch up method" function, to be clear, we call the standard one as "recapture" function.
    /// </remarks>
    public boolean isRecaptureDepreciation()
    {
        return isCatchUpDepreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSpecialDepAllocationForReserve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether it is special depreciation allocation for reserve.
    /// </summary>
    /// <returns>True if it is special depreciation allcation for reserve.</returns>
    public boolean isSpecialDepAllocationForReserve()
	{
	    return specialDepReserveDate && specialDepReserveAmount;
	}

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checkes whether it is allowed to do next loop calculation.
    /// </summary>
    /// <returns>
    /// true if allowed; otherwise, return false.
    /// </returns>
    public boolean next()
    {
        if (!assetDepCalculationMgr.next())
        {
            return false;
        }

        if (parmRunDate <= baseDate)
        {
            return false;
        }

        currentInterval++;
        this.setDepDate();

        //
        //  This prevents depreciations with invalid dates from
        //  being handled.
        //
        if (!depreciationDate ||
            depreciationDate > parmRunDate)
        {
            return false;
        }

        if (periodEnd < periodstart)
        {
            return false;
        }

        //calculate depreciation for adjument transaction forAcquisitionAdj, Acquisition, CapitalReserveTransfer.
        if (assetBook.IsTrueUpDepreciation
            && this.parmIsCatchUpDepreciation()
            && periodEnd > assetBook.LastDepreciationDate)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAcceleratedEntryContainer_JP</Name>
				<Source><![CDATA[
    public container parmAcceleratedEntryContainer_JP(container _acceleratedEntryContainer_JP = acceleratedEntryContainer_JP)
	{
	    return super(_acceleratedEntryContainer_JP);
	}

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetDocumentEntry_JP</Name>
				<Source><![CDATA[
    public AssetDocumentEntry_JP parmAssetDocumentEntry_JP(AssetDocumentEntry_JP _assetDocumentEntry_JP = assetDocumentEntry_JP)
    {
        AssetDocumentEntry_JP ret;
        boolean               needInit;

        if (_assetDocumentEntry_JP.RecId != assetDocumentEntry_JP.RecId)
        {
            needInit = true;
        }

        ret = super(_assetDocumentEntry_JP);

        if (needInit)
        {
            this.initAssetDocumentEntry();
            if (assetDocumentEntry_JP.type() == AssetDocumentType_JP::AssetReductionEntry_Reserve)
            {
                assetDepCalculationMgr.parmCalcArgs().initReductionEntryFromAssetDepBookMap(AssetDepBookMap_JP::findByAssetIdBookId(
                    assetDocumentEntry_JP.AssetId, assetDocumentEntry_JP.BookId), true);
                assetDepCalculationMgr.parmCalcArgs().initFromAssetDepCalculationInterface(this);
            }
            assetDepCalculationMgr.parmCalcArgs().parmAssetDocumentEntry(_assetDocumentEntry_JP);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCatchUpDepreciation</Name>
				<Source><![CDATA[
    public boolean parmIsCatchUpDepreciation(boolean _isCatchUpDepreciation = isCatchUpDepreciation)
	{
	    return super(_isCatchUpDepreciation);
	}

]]></Source>
			</Method>
			<Method>
				<Name>parmIsDepreciationAcceleratedProfile_JP</Name>
				<Source><![CDATA[
    public boolean parmIsDepreciationAcceleratedProfile_JP(boolean _isDepreciationAcceleratedProfile_JP = isDepreciationAcceleratedProfile_JP)
	{
	    return super(_isDepreciationAcceleratedProfile_JP);
	}

]]></Source>
			</Method>
			<Method>
				<Name>parmIsRecaptureDepreciation</Name>
				<Source><![CDATA[
    public boolean parmIsRecaptureDepreciation(boolean _isRecaptureDep = assetDepCalculationMgr.parmCalcArgs().parmIsRecaptureDepreciation())
	{
	    AssetDepCalculationArgs_JP calcArg = assetDepCalculationMgr.parmCalcArgs();
	    calcArg.parmIsRecaptureDepreciation(_isRecaptureDep);

	    return calcArg.parmIsRecaptureDepreciation();
	}

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodEnd_JP</Name>
				<Source><![CDATA[
    public AssetTransDate parmPeriodEnd_JP(AssetTransDate _periodEnd = this.parmPeriodEnd())
    {
        return this.parmPeriodEnd(_periodEnd);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodStart_JP</Name>
				<Source><![CDATA[
    public AssetTransDate parmPeriodStart_JP(AssetTransDate _periodStart = this.parmPeriodStart())
    {
        return this.parmPeriodStart(_periodStart);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecialDepReserveAmount</Name>
				<Source><![CDATA[
    public AssetAmount parmSpecialDepReserveAmount(Assetamount _specialDepReserveAmount= specialDepReserveAmount)
	{
	    specialDepReserveAmount = _specialDepReserveAmount;
	    return specialDepReserveAmount;
	}

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecialDepReserveDate</Name>
				<Source><![CDATA[
    public AssetTransDate parmSpecialDepReserveDate(AssetTransDate _specialDepReserveDate = specialDepReserveDate)
	{
	    specialDepReserveDate = _specialDepReserveDate;
	    return specialDepReserveDate;
	}

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecialDepReserveRecId</Name>
				<Source><![CDATA[
    public RecId parmSpecialDepReserveRecId(RecId _specialDepReserveRecId = specialDepReserveRecId)
	{
	    specialDepReserveRecId = _specialDepReserveRecId;
	    return specialDepReserveRecId;
	}

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecialDepReserveTableId</Name>
				<Source><![CDATA[
    public TableId parmSpecialDepReserveTableId(TableId _specialDepReserveTableId = specialDepReserveTableId)
	{
	    specialDepReserveTableId = _specialDepReserveTableId;
	    return specialDepReserveTableId;
	}

]]></Source>
			</Method>
			<Method>
				<Name>setMainDepBeginBalanceMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets main depreciation process beginning balance cache map.
    /// </summary>
    /// <param name="_depBeginBalanceMap">
    /// The main depreciation process beginning balance cache map.
    /// </param>
    public void setMainDepBeginBalanceMap(Map _depBeginBalanceMap)
    {
        assetDepCalculationMgr.setMainDepBeginBalanceMap(_depBeginBalanceMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsDepreciationDone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets if depreciation is done.
    /// </summary>
    /// <returns>
    /// Returns true if depreciation is done; else, returns false.
    /// </returns>
    public boolean getIsDepreciationDone()
    {
        return assetDepCalculationMgr.parmCalcArgs().parmIsDepreciationDone();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setScrapBookValuePerCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the acquisition amount based on scrap value for reporting currency or accounting currency.
    /// </summary>
    /// <param name = "_assetAcquisitionValue">
    /// Acquisition amount of an asset.
    /// </param>
    /// <param name = "_scrapValue">
    /// Scrap value of an asset.
    /// </param>
    /// <returns>
    /// Returns the acquisition amount.
    /// </returns>
    protected AssetAmount setScrapBookValuePerCurrency(AssetAmount _assetAcquisitionValue, AssetAmount _scrapValue)
    {
        AssetAmount amountToDepreciateLoc;

        if (abs(_assetAcquisitionValue) >= abs(_scrapValue))
        {
            amountToDepreciateLoc = _assetAcquisitionValue - _scrapValue;
        }
        else
        {
            amountToDepreciateLoc = 0;
        }

        return amountToDepreciateLoc;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>