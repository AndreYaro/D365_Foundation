<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EngChgCaseBOMRouteApprovalHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class to prepare and approve BOMs, Formulas and Routes for a given engineering change case.
/// </summary>
public class EngChgCaseBOMRouteApprovalHelper
{
    RefRecId                        caseDetailBaseRecId;

    EngChgCaseBOMRouteVersionTmp    engChgCaseBOMRouteVersionTmp;
    EngChgCaseBOMRouteTmp           engChgCaseBOMRouteTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearTmpTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the temporary tables for any existing data.
    /// </summary>
    protected void clearTmpTables()
    {
        delete_from engChgCaseBOMRouteTmp;
        delete_from engChgCaseBOMRouteVersionTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>engChgCaseBOMRouteTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the table cursor for the <c>EngChgCaseBOMRouteTmp</c> table.
    /// </summary>
    /// <returns>
    ///     A cursor for the temporary table instance.
    /// </returns>
    public EngChgCaseBOMRouteTmp engChgCaseBOMRouteTmp()
    {
        return engChgCaseBOMRouteTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>engChgCaseBOMRouteVersionTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the table cursor for the <c>EngChgCaseBOMRouteVersionTmp</c> table.
    /// </summary>
    /// <returns>
    ///     A cursor for the temporary table instance.
    /// </returns>
    public EngChgCaseBOMRouteVersionTmp engChgCaseBOMRouteVersionTmp()
    {
        return engChgCaseBOMRouteVersionTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadAllCaseAssociation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Load all BOMs, routes and items are a part of the version and insert them into
    /// the <c>EngChgCaseBOMRouteApproval</c> and <c>EngChgCaseBOMRouteVersionApproval</c> tables.
    /// </summary>
    public void loadAllCaseAssociation()
    {
        if (caseDetailBaseRecId)
        {
            ttsBegin;
            this.setPlannedEffectiveDateDefault();

            this.clearTmpTables();

            this.loadBOMRouteFromCaseAssociation(CaseEntityType::BOM);
            this.loadItemsInBOMVersFromCaseAssociation();
            this.loadBOMVersFromCoByProducts();
            this.loadBOMTableTmp();
            this.loadBOMVersionTmp();
            this.loadBOMRouteFromCaseAssociation(CaseEntityType::Route);
            this.loadItemsInRouteVersFromCaseAssociation();
            this.loadRouteTableTmp();
            this.loadRouteVersionTmp();

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadBOMRouteFromCaseAssociation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Load all BOMs or routes from case and insert them into the <c>EngChgCaseBOMRouteApproval</c> table.
    /// </summary>
    /// <param name="_caseEntityType">The case entity.</param>
    /// <remarks>
    /// If case association records are already added to the <c>EngChgCaseBOMRouteApproval</c> table skip the record.
    /// </remarks>
    protected void loadBOMRouteFromCaseAssociation(CaseEntityType _caseEntityType)
    {
        CaseAssociation             bomRouteCaseAssociation;
        EngChgCaseBOMRouteApproval  bomRouteApproval;

        insert_recordset bomRouteApproval (CaseAssociation)
            select RecId from bomRouteCaseAssociation
                where bomRouteCaseAssociation.CaseRecId == caseDetailBaseRecId
                      && bomRouteCaseAssociation.EntityType == _caseEntityType
                notexists join bomRouteApproval
                    where bomRouteApproval.CaseAssociation == bomRouteCaseAssociation.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadBOMTableTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generates the temporary <c>EngChgCaseBOMRouteTmp</c> table record for the related BOM.
    /// </summary>
    protected void loadBOMTableTmp()
    {
        BOMTable                    bomTable;
        EngChgCaseBOMRouteApproval  bomRouteApproval;

        CaseAssociation             bomCaseAssociation;

        insert_recordset engChgCaseBOMRouteTmp (BOMRouteApproval, EntityType, EntityId, EntityName, Approved)
            select RecId from bomRouteApproval
                join EntityType from bomCaseAssociation
                    where bomCaseAssociation.RecId == bomRouteApproval.CaseAssociation
                          && bomCaseAssociation.CaseRecId == caseDetailBaseRecId
                          && bomCaseAssociation.EntityType == CaseEntityType::BOM
                join BOMId, Name, Approved from bomTable
                    where bomTable.RecId == bomCaseAssociation.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadBOMVersFromCoByProducts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Load all items from case that are related to associated BOM's co-products or by-products and is part of the BOM's version.
    /// </summary>
    protected void loadBOMVersFromCoByProducts()
    {
        BOMTable                            bomTable;
        BOMVersion                          bomVersion;
        InventTable                         inventTable;
        EngChgCaseBOMRouteVersionApproval   bomRouteVersionApproval;
        CaseAssociation                     itemCaseAssociation;
        CaseAssociation                     bomCaseAssociation;
        PmfFormulaCoBy                      pmfFormulaCoBy;
        CaseEntityType                      caseEntityTypeBOM = CaseEntityType::BOM;

        insert_recordset bomRouteVersionApproval (EntityType, EntityVersion, EntityCaseAssociation, ItemCaseAssociation)
        select caseEntityTypeBOM, RecId from bomVersion
            join RecId from bomCaseAssociation
                where bomCaseAssociation.CaseRecId == caseDetailBaseRecId
                      && bomCaseAssociation.EntityType == CaseEntityType::BOM
            join RecId from itemCaseAssociation
                where itemCaseAssociation.CaseRecId == caseDetailBaseRecId
                      && itemCaseAssociation.EntityType == CaseEntityType::Item
            join bomTable
                where bomTable.BOMId == bomVersion.BOMId
                      && bomTable.RecId == bomCaseAssociation.RefRecId
            join inventTable
                where inventTable.RecId == itemCaseAssociation.RefRecId
            exists join pmfFormulaCoBy
                where pmfFormulaCoBy.BOMVersionRefRecId == bomVersion.RecId
                      && pmfFormulaCoBy.ItemId == inventTable.ItemId
            notexists join bomRouteVersionApproval
                where bomRouteVersionApproval.EntityVersion == bomVersion.RecId
                      && bomRouteVersionApproval.EntityType == CaseEntityType::BOM
                      && bomRouteVersionApproval.EntityCaseAssociation == bomCaseAssociation.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadBOMVersionTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generates the temporary <c>EngChgCaseBOMRouteVersionTmp</c> table record for the related BOM version.
    /// </summary>
    protected void loadBOMVersionTmp()
    {
        BOMVersion                          bomVersion;
        EngChgCaseBOMRouteVersionApproval   bomRouteVersionApproval;
        CaseAssociation                     bomCaseAssociation;

        insert_recordset engChgCaseBOMRouteVersionTmp (EntityId, ItemId, InventDimId, Active, Approved, FromDate, FromQty, ToDate, PdsCWSize, PdsCWFromQty, PmfBatchSize, PmfYieldPct, PmfFormulaMultiple, BOMRouteVersionApproval, EntityType, EntityVersion)
            select BOMId, ItemId, InventDimId, Active, Approved, FromDate, FromQty, ToDate, PdsCWSize, PdsCWFromQty, PmfBatchSize, PmfYieldPct, PmfFormulaMultiple from bomVersion
                join RecId, EntityType, EntityVersion from bomRouteVersionApproval
                    where bomRouteVersionApproval.EntityVersion == bomVersion.RecId
                          && bomRouteVersionApproval.EntityType == CaseEntityType::BOM
                exists join bomCaseAssociation
                    where bomCaseAssociation.RecId == bomRouteVersionApproval.EntityCaseAssociation
                          && bomCaseAssociation.CaseRecId == caseDetailBaseRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadItemsInBOMVersFromCaseAssociation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Load all items from case that are related to associated BOM and is part of the BOM's version.
    /// </summary>
    protected void loadItemsInBOMVersFromCaseAssociation()
    {
        BOMTable                            bomTable;
        BOMVersion                          bomVersion;
        InventTable                         inventTable;
        EngChgCaseBOMRouteVersionApproval   bomRouteVersionApproval;
        CaseAssociation                     itemCaseAssociation;
        CaseAssociation                     bomCaseAssociation;
        CaseEntityType                      caseEntityTypeBOM = CaseEntityType::BOM;

        insert_recordset bomRouteVersionApproval (EntityType, EntityVersion, EntityCaseAssociation, ItemCaseAssociation)
        select caseEntityTypeBOM, RecId from bomVersion
            join RecId from bomCaseAssociation
                where bomCaseAssociation.CaseRecId == caseDetailBaseRecId
                      && bomCaseAssociation.EntityType == CaseEntityType::BOM
            join RecId from itemCaseAssociation
                where itemCaseAssociation.CaseRecId == caseDetailBaseRecId
                      && itemCaseAssociation.EntityType == CaseEntityType::Item
            join bomTable
                where bomTable.BOMId == bomVersion.BOMId
                      && bomTable.RecId == bomCaseAssociation.RefRecId
            join inventTable
                where inventTable.ItemId == bomVersion.ItemId
                      && inventTable.RecId == itemCaseAssociation.RefRecId
            notexists join bomRouteVersionApproval
                where bomRouteVersionApproval.EntityVersion == bomVersion.RecId
                      && bomRouteVersionApproval.EntityType == CaseEntityType::BOM
                      && bomRouteVersionApproval.EntityCaseAssociation == bomCaseAssociation.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadItemsInRouteVersFromCaseAssociation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Load all items from case that are related to associated route and is part of the route's version.
    /// </summary>
    protected void loadItemsInRouteVersFromCaseAssociation()
    {
        RouteTable                          routeTable;
        RouteVersion                        routeVersion;
        InventTable                         inventTable;
        EngChgCaseBOMRouteVersionApproval   bomRouteVersionApproval;
        CaseAssociation                     itemCaseAssociation;
        CaseAssociation                     routeCaseAssociation;
        CaseEntityType                      caseEntityTypeRoute = CaseEntityType::Route;

        insert_recordset bomRouteVersionApproval (EntityType, EntityVersion, EntityCaseAssociation, ItemCaseAssociation)
        select caseEntityTypeRoute, RecId from routeVersion
            join RecId from routeCaseAssociation
                where routeCaseAssociation.CaseRecId == caseDetailBaseRecId
                      && routeCaseAssociation.EntityType == CaseEntityType::Route
            join RecId from itemCaseAssociation
                where itemCaseAssociation.CaseRecId == caseDetailBaseRecId
                      && itemCaseAssociation.EntityType == CaseEntityType::Item
            join routeTable
                where routeTable.RouteId == routeVersion.RouteId
                      && routeTable.RecId == routeCaseAssociation.RefRecId
            join inventTable
                where inventTable.ItemId == routeVersion.ItemId
                      && inventTable.RecId == itemCaseAssociation.RefRecId
            notexists join bomRouteVersionApproval
                where bomRouteVersionApproval.EntityVersion == routeVersion.RecId
                      && bomRouteVersionApproval.EntityType == CaseEntityType::Route
                      && bomRouteVersionApproval.EntityCaseAssociation == routeCaseAssociation.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadRouteTableTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generates the temporary <c>EngChgCaseBOMRouteTmp</c> table record for the related production route.
    /// </summary>
    protected void loadRouteTableTmp()
    {
        RouteTable                  routeTable;
        EngChgCaseBOMRouteApproval  bomRouteApproval;

        CaseAssociation             bomCaseAssociation;

        insert_recordset engChgCaseBOMRouteTmp (BOMRouteApproval, EntityType, EntityId, EntityName, Approved)
            select RecId from bomRouteApproval
                join EntityType from bomCaseAssociation
                    where bomCaseAssociation.RecId == bomRouteApproval.CaseAssociation
                          && bomCaseAssociation.CaseRecId == caseDetailBaseRecId
                          && bomCaseAssociation.EntityType == CaseEntityType::Route
                join RouteId, Name, Approved from routeTable
                    where routeTable.RecId == bomCaseAssociation.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadRouteVersionTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generates the temporary <c>EngChgCaseBOMRouteVersionTmp</c> table record for the related route version.
    /// </summary>
    protected void loadRouteVersionTmp()
    {
        RouteVersion                        routeVersion;
        EngChgCaseBOMRouteVersionApproval   bomRouteVersionApproval;
        CaseAssociation                     routeCaseAssociation;

        insert_recordset engChgCaseBOMRouteVersionTmp (EntityId, ItemId, InventDimId, Active, Approved, FromDate, FromQty, ToDate, BOMRouteVersionApproval, EntityType, EntityVersion)

        select RouteId, ItemId, InventDimId, Active, Approved, FromDate, FromQty, ToDate from routeVersion
            join RecId, EntityType, EntityVersion from bomRouteVersionApproval
                where bomRouteVersionApproval.EntityVersion == routeVersion.RecId
                      && bomRouteVersionApproval.EntityType == CaseEntityType::Route
            exists join routeCaseAssociation
                where routeCaseAssociation.RecId == bomRouteVersionApproval.EntityCaseAssociation
                      && routeCaseAssociation.CaseRecId == caseDetailBaseRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCaseDetailBaseRecId</Name>
				<Source><![CDATA[
    public RefRecId parmCaseDetailBaseRecId(RefRecId _caseDetailBaseRecId = caseDetailBaseRecId)
    {
        if (!prmisDefault(_caseDetailBaseRecId))
        {
            caseDetailBaseRecId = _caseDetailBaseRecId;
        }
        return caseDetailBaseRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>plannedEffectiveDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the planned effective date of the case.
    /// </summary>
    /// <returns>
    /// The planned effective date.
    /// </returns>
    protected EngChgCasePlannedEffectiveDate plannedEffectiveDate()
    {
        EngChgCasePlannedEffectiveDate effectiveDate = CaseDetail::findRec(caseDetailBaseRecId).PlannedEffectiveDate;

        if (!effectiveDate)
        {
            effectiveDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        return effectiveDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPlannedEffectiveDateDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults the Planned Effective Date to today's date if it has not already been set.
    /// </summary>
    protected void setPlannedEffectiveDateDefault()
    {
        CaseDetail caseDetail = CaseDetail::findRec(caseDetailBaseRecId, true);

        if (!caseDetail.PlannedEffectiveDate)
        {
            caseDetail.PlannedEffectiveDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            caseDetail.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSuggestionsBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Suggest actions on approval records related to BOMTable.
    /// </summary>
    protected void setSuggestionsBOM()
    {
        EngChgCaseBOMRouteApproval      bomRouteApproval;
        CaseAssociation                 caseAssociation;
        BOMTable                        bomTable;

        update_recordSet bomRouteApproval
            setting ApproveAction = EngChgCaseBOMRouteApprovalAction::Approve
            where bomRouteApproval.ApproveAction == EngChgCaseBOMRouteApprovalAction::None
            exists join caseAssociation
                where caseAssociation.CaseRecId == caseDetailBaseRecId
                    && caseAssociation.RecId == bomRouteApproval.CaseAssociation
                    && caseAssociation.EntityType == CaseEntityType::BOM
            exists join bomTable
                where bomTable.RecId == caseAssociation.RefRecId
                   && bomTable.Approved == NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSuggestionsBOMVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Suggest actions on approval records related to BOMVersion.
    /// </summary>
    /// <remarks>
    /// The actions are suggested by the following rules:
    /// - If version is not Approved and not Active and has a ToDate before the effective date, then ApproveActivate is suggested
    /// - If version is Approved and not Active and has a ToDate before the effective date, then Activate is suggested
    /// - If version is Approved and Active and there is another approval record for the same item+inventDim that has Activate/ApprovaActivate set, then Expire is suggested.
    /// </remarks>
    protected void setSuggestionsBOMVersion()
    {
        EngChgCaseBOMRouteVersionApproval   versionApproval;
        CaseAssociation                     caseAssociation;
        BOMVersion                          bomVersion;
        date                                effectiveDate = this.plannedEffectiveDate();

        EngChgCaseBOMRouteVersionApproval   versionApprovalOther;
        CaseAssociation                     caseAssociationOther;
        BOMVersion                          bomVersionOther;
        date                                effectiveDateOther;

        while select forUpdate versionApproval
            where versionApproval.ApprovalVersionAction == EngChgCaseBOMRouteVersionApprovalAction::None
            join caseAssociation
                where caseAssociation.CaseRecId == caseDetailBaseRecId
                    && caseAssociation.RecId == versionApproval.EntityCaseAssociation
                    && caseAssociation.EntityType == CaseEntityType::BOM
            join bomVersion
                order by Active, Approved
                where versionApproval.EntityVersion == bomVersion.RecId
        {
            if (bomVersion.Active == NoYes::No
                && (bomVersion.ToDate >= effectiveDate || !bomVersion.ToDate))
            {
                if (bomVersion.Approved == NoYes::No)
                {
                    // BOM version not approved not active should set the suggestion to ApproveActivate
                    versionApproval.ApprovalVersionAction = EngChgCaseBOMRouteVersionApprovalAction::ApproveActivate;
                }
                else
                {
                    // BOM version approved but not active should set the suggestion to Activate
                    versionApproval.ApprovalVersionAction = EngChgCaseBOMRouteVersionApprovalAction::Activate;
                }

                versionApproval.update();
            }
            else if (bomVersion.Approved == NoYes::Yes && bomVersion.Active == NoYes::Yes)
            {
                // Find related approvals for the same item+InventDim+FromQty that has been set to either Activate/ApproveActivate
                while select firstonly versionApprovalOther
                    where (   versionApprovalOther.ApprovalVersionAction == EngChgCaseBOMRouteVersionApprovalAction::Activate
                           || versionApprovalOther.ApprovalVersionAction == EngChgCaseBOMRouteVersionApprovalAction::ApproveActivate)
                         && versionApprovalOther.RecId                   != versionApproval.RecId
                    exists join caseAssociationOther
                        where caseAssociationOther.CaseRecId        == caseDetailBaseRecId
                            && caseAssociationOther.RecId           == versionApprovalOther.EntityCaseAssociation
                            && caseAssociationOther.EntityType      == CaseEntityType::BOM
                    exists join bomVersionOther
                        where versionApprovalOther.EntityVersion    == bomVersionOther.RecId
                            && bomVersionOther.ItemId               == bomVersion.ItemId
                            && bomVersionOther.InventDimId          == bomVersion.InventDimId
                            && bomVersionOther.FromQty              == bomVersion.FromQty
                {
                    effectiveDateOther = (versionApprovalOther.OverrideEffectiveDate ? versionApprovalOther.OverrideEffectiveDate : effectiveDate);
                    if (bomVersion.ToDate >= effectiveDateOther || !bomVersion.ToDate)
                    {
                        if (versionApprovalOther.OverrideEffectiveDate)
                        {
                            versionApproval.OverrideEffectiveDate = versionApprovalOther.OverrideEffectiveDate;
                        }
                        versionApproval.ApprovalVersionAction = EngChgCaseBOMRouteVersionApprovalAction::Expire;
                        versionApproval.update();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSuggestionsRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Suggest actions on approval records related to RouteTable.
    /// </summary>
    protected void setSuggestionsRoute()
    {
        EngChgCaseBOMRouteApproval      bomRouteApproval;
        CaseAssociation                 caseAssociation;
        RouteTable                      routeTable;

        update_recordSet bomRouteApproval
            setting ApproveAction = EngChgCaseBOMRouteApprovalAction::Approve
            where bomRouteApproval.ApproveAction == EngChgCaseBOMRouteApprovalAction::None
            exists join caseAssociation
                where caseAssociation.CaseRecId == caseDetailBaseRecId
                    && caseAssociation.RecId == bomRouteApproval.CaseAssociation
                    && caseAssociation.EntityType == CaseEntityType::Route
            exists join routeTable
                where routeTable.RecId == caseAssociation.RefRecId
                   && routeTable.Approved == NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSuggestionsRouteVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Suggest actions on approval records related to RouteVersion.
    /// </summary>
    /// <remarks>
    /// The actions are suggested by the following rules:
    /// - If version is not Approved and not Active and has a ToDate before the effective date, then ApproveActivate is suggested
    /// - If version is Approved and not Active and has a ToDate before the effective date, then Activate is suggested
    /// - If version is Approved and Active and there is another approval record for the same item+inventDim that has Activate/ApprovaActivate set, then Expire is suggested.
    /// </remarks>
    protected void setSuggestionsRouteVersion()
    {
        EngChgCaseBOMRouteVersionApproval   versionApproval;
        CaseAssociation                     caseAssociation;
        RouteVersion                        routeVersion;
        date                                effectiveDate = this.plannedEffectiveDate();

        EngChgCaseBOMRouteVersionApproval   versionApprovalOther;
        CaseAssociation                     caseAssociationOther;
        RouteVersion                        routeVersionOther;
        date                                effectiveDateOther;

        while select forUpdate versionApproval
            where versionApproval.ApprovalVersionAction == EngChgCaseBOMRouteVersionApprovalAction::None
            join caseAssociation
                where caseAssociation.CaseRecId     == caseDetailBaseRecId
                    && caseAssociation.RecId        == versionApproval.EntityCaseAssociation
                    && caseAssociation.EntityType   == CaseEntityType::Route
            join routeVersion
                order by Active, Approved
                where versionApproval.EntityVersion == routeVersion.RecId
        {
            if (routeVersion.Active == NoYes::No
                && (routeVersion.ToDate >= effectiveDate || !routeVersion.ToDate))
            {
                if (routeVersion.Approved == NoYes::No)
                {
                    // route version not approved not active should set the suggestion to ApproveActivate
                    versionApproval.ApprovalVersionAction = EngChgCaseBOMRouteVersionApprovalAction::ApproveActivate;
                }
                else
                {
                    // route version approved but not active should set the suggestion to Activate
                    versionApproval.ApprovalVersionAction = EngChgCaseBOMRouteVersionApprovalAction::Activate;
                }

                versionApproval.update();
            }
            else if (routeVersion.Approved == NoYes::Yes && routeVersion.Active == NoYes::Yes)
            {
                // Find related approvals for the same item+InventDim+FromQty that has been set to either Activate/ApproveActivate
                while select firstonly versionApprovalOther
                    where (   versionApprovalOther.ApprovalVersionAction == EngChgCaseBOMRouteVersionApprovalAction::Activate
                           || versionApprovalOther.ApprovalVersionAction == EngChgCaseBOMRouteVersionApprovalAction::ApproveActivate)
                         && versionApprovalOther.RecId != versionApproval.RecId
                    exists join caseAssociationOther
                        where caseAssociationOther.CaseRecId    == caseDetailBaseRecId
                            && caseAssociationOther.RecId       == versionApprovalOther.EntityCaseAssociation
                            && caseAssociationOther.EntityType  == CaseEntityType::route
                    exists join routeVersionOther
                        where versionApprovalOther.EntityVersion    == routeVersionOther.RecId
                            && routeVersionOther.ItemId             == routeVersion.ItemId
                            && routeVersionOther.InventDimId        == routeVersion.InventDimId
                            && routeVersionOther.FromQty            == routeVersion.FromQty
                {
                    effectiveDateOther = (versionApprovalOther.OverrideEffectiveDate ? versionApprovalOther.OverrideEffectiveDate : effectiveDate);
                    if (routeVersion.ToDate >= effectiveDateOther || !routeVersion.ToDate)
                    {
                        if (versionApprovalOther.OverrideEffectiveDate)
                        {
                            versionApproval.OverrideEffectiveDate = versionApprovalOther.OverrideEffectiveDate;
                        }
                        versionApproval.ApprovalVersionAction = EngChgCaseBOMRouteVersionApprovalAction::Expire;
                        versionApproval.update();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>suggestActions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Suggests actions on approval records.
    /// </summary>
    public void suggestActions()
    {
        ttsBegin;

        this.setSuggestionsBOM();
        this.setSuggestionsRoute();
        this.setSuggestionsBOMVersion();
        this.setSuggestionsRouteVersion();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static EngChgCaseBOMRouteApprovalHelper construct()
    {
        return new EngChgCaseBOMRouteApprovalHelper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>electronicSignatureUsed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if electronic signature is used for any of tables BOMTable, RouteTable, BOMVersion or RouteVersion.
    /// </summary>
    /// <returns>
    /// true if electronic signature is used; otherwise, false.
    /// </returns>
    public static boolean electronicSignatureUsed()
    {
        boolean ret = false;

        if (isConfigurationkeyEnabled(configurationkeynum(SIG)))
        {
            ret =   SIGBOMTableApproveProcedure::construct().signatureRequired()
                 || SIGRouteTableApproveProcedure::construct().signatureRequired()
                 || SIGBOMVersionApproveProcedure::construct().signatureRequired()
                 || SIGBOMVersionActivateProcedure::construct().signatureRequired()
                 || SIGRouteVersionApproveProcedure::construct().signatureRequired()
                 || SIGRouteVersionActivateProcedure::construct().signatureRequired();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemsFromCase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform the item lookup based on the case record id.
    /// </summary>
    /// <param name="_callerControl">
    /// The calling form control.
    /// </param>
    /// <param name="_caseRecId">
    /// The case record id.
    /// </param>
    /// <remarks>
    /// Show a lookup list with items associated with the case.
    /// </remarks>
    static void lookupItemsFromCase(FormStringControl _callerControl, CaseRecId _caseRecId)
    {
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSourceInventTable;
        QueryBuildDataSource    queryBuildDataSourceCaseAssociation;

        QueryBuildRange         queryBuildRangeInventTable;
        QueryBuildRange         queryBuildRangeCaseAssociation;
        SysTableLookup          sysTableLookup;

        if (_callerControl && _caseRecId)
        {
            sysTableLookup = SysTableLookup::newParameters(tableNum(InventTable), _callerControl);

            sysTableLookup.addLookupField(fieldNum(InventTable, ItemId));
            sysTableLookup.addLookupField(fieldNum(InventTable, NameAlias));

            queryBuildDataSourceInventTable = query.addDataSource(tableNum(InventTable));
            queryBuildDataSourceCaseAssociation = queryBuildDataSourceInventTable.addDataSource(tableNum(CaseAssociation));
            queryBuildDataSourceCaseAssociation.relations(true);
            queryBuildDataSourceCaseAssociation.joinMode(JoinMode::ExistsJoin);

            queryBuildRangeInventTable = queryBuildDataSourceInventTable.addRange(fieldNum(InventTable, RecId));
            queryBuildRangeCaseAssociation = queryBuildDataSourceCaseAssociation.addRange(fieldNum(CaseAssociation, CaseRecId));

            queryBuildRangeCaseAssociation.value(queryValue(_caseRecId));

            sysTableLookup.parmQuery(query);

            sysTableLookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newApprovalHelper</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create new instance of the <c>EngChgCaseBOMRouteApprovalHelper</c> class
    /// </summary>
    /// <param name="_caseDetailBaseRecId">
    /// The RecId of a <c>CaseDetailBase</c> instance.
    /// </param>
    /// <returns>
    /// The <c>EngChgCaseBOMRouteApprovalHelper</c> class.
    /// </returns>
    public static EngChgCaseBOMRouteApprovalHelper newApprovalHelper(RefRecId _caseDetailBaseRecId)
    {
        EngChgCaseBOMRouteApprovalHelper helper = EngChgCaseBOMRouteApprovalHelper::construct();

        helper.parmCaseDetailBaseRecId(_caseDetailBaseRecId);

        return helper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newApprovalHelperAndLoadCaseAssociation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create new instance of the <c>EngChgCaseBOMRouteApprovalHelper</c> class and load case associations.
    /// </summary>
    /// <param name="_caseDetailBaseRecId">
    /// The RecId of a <c>CaseDetailBase</c> instance.
    /// </param>
    /// <returns>
    /// The <c>EngChgCaseBOMRouteApprovalHelper</c> class.
    /// </returns>
    public static EngChgCaseBOMRouteApprovalHelper newApprovalHelperAndLoadCaseAssociation(RefRecId _caseDetailBaseRecId)
    {
        EngChgCaseBOMRouteApprovalHelper helper = EngChgCaseBOMRouteApprovalHelper::construct();

        helper.parmCaseDetailBaseRecId(_caseDetailBaseRecId);

        helper.loadAllCaseAssociation();

        return helper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBOMRouteAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the action on a list of record Ids from the <c>EngChgCaseBOMRouteApproval</c> table.
    /// </summary>
    /// <param name="_selectedRecordsIds">
    /// A list of selected record Ids to set the action on.
    /// </param>
    /// <param name="_action">
    /// The action to set.
    /// </param>
    public static void setBOMRouteAction(container _selectedRecordsIds, EngChgCaseBOMRouteApprovalAction _action)
    {
        RefRecId                    approvalRecId;
        int                         conPos;
        EngChgCaseBOMRouteApproval  bomRouteApproval;

        ttsBegin;

        for (conPos = 1; conPos <= conLen(_selectedRecordsIds); conPos++)
        {
            approvalRecId = conPeek(_selectedRecordsIds, conPos);

            update_recordSet bomRouteApproval
                setting ApproveAction = _action
                where bomRouteApproval.recId == approvalRecId;
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVersionAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the action on a list of record Ids from the <c>EngChgCaseBOMRouteVersionApproval</c> table.
    /// </summary>
    /// <param name="_selectedRecordsIds">
    /// A list of selected record Ids to set the action on.
    /// </param>
    /// <param name="_action">
    /// The action to set.
    /// </param>
    public static void setVersionAction(container _selectedRecordsIds, EngChgCaseBOMRouteVersionApprovalAction _action)
    {
        RefRecId                            approvalRecId;
        int                                 conPos;
        EngChgCaseBOMRouteVersionApproval   bomRouteApproval;

        ttsBegin;

        for (conPos = 1; conPos <= conLen(_selectedRecordsIds); conPos++)
        {
            approvalRecId = conPeek(_selectedRecordsIds, conPos);

            update_recordSet bomRouteApproval
                setting ApprovalVersionAction = _action
                where bomRouteApproval.recId == approvalRecId;
        }

        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>