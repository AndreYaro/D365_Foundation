<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailOfflineTerminalStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Retail offline terminal status.
/// </summary>
public class RetailOfflineTerminalStatus
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deSerializeTerminalOfflineStatusData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserialize terminal offline status data
    /// </summary>
    internal static void deSerializeTerminalOfflineStatusData()
    {
        RetailOfflineTerminalStateContract terminalOfflineStatusContract = new RetailOfflineTerminalStateContract();
        RetailOfflineTerminalStateData latestOfflineTerminalStateData;
        RetailOfflineTerminalState retailOfflineTerminalState;

        ttsbegin;

        // Fetch the latest entry per terminal
        while select TerminalId, maxof(CreatedDateTime) from latestOfflineTerminalStateData group by TerminalId
        {
            RetailOfflineTerminalStateData currentLatestOfflineTerminalStateData;
            RetailOfflineTerminalState     previousOfflineTerminalState;

            select firstonly * from currentLatestOfflineTerminalStateData
                where currentLatestOfflineTerminalStateData.TerminalId == latestOfflineTerminalStateData.TerminalId
                && currentLatestOfflineTerminalStateData.CreatedDateTime == latestOfflineTerminalStateData.CreatedDateTime;

        // Check if the latest entry has already been de-serialized and populated in RetailOfflineTerminalState
            select firstonly forupdate * from previousOfflineTerminalState
                where previousOfflineTerminalState.TerminalId == currentLatestOfflineTerminalStateData.TerminalId;

            if (previousOfflineTerminalState.RecId && previousOfflineTerminalState.RetailOfflineTerminalStateData == currentLatestOfflineTerminalStateData.RecId)
            {
                // If RetailTerminalOfflineState already has an entry for the terminal and it is the latest entry then we skip state update for this terminal
                continue;
            }

            // Set up the contract with all the latest state values for the terminal

            terminalOfflineStatusContract = RetailOfflineTerminalStateContract::deserializeOfflineTerminalStateDataFromJSON(currentLatestOfflineTerminalStateData.OfflineTerminalStateData);
            terminalOfflineStatusContract.parmTerminalId(currentLatestOfflineTerminalStateData.TerminalId);

            // If the offline operation does not have an error indicates that it was successful
            Notes offlineOperationError = terminalOfflineStatusContract.parmOfflineOperationError();
            if(offlineOperationError == null || offlineOperationError == "")
            {
                offlineOperationError = "@Retail:RetailOfflineTerminalStateOperationSuccess";
            }
            previousOfflineTerminalState.OfflineOperatorId              = terminalOfflineStatusContract.parmOfflineOperatorId();
            previousOfflineTerminalState.OfflineOperationError          = offlineOperationError;
            previousOfflineTerminalState.RetailOfflineTerminalStateData = currentLatestOfflineTerminalStateData.RecId;
            previousOfflineTerminalState.TerminalId                     = terminalOfflineStatusContract.parmTerminalId();
            previousOfflineTerminalState.MPOSVersion                    = terminalOfflineStatusContract.parmMPOSVersion();
            previousOfflineTerminalState.OfflineDBVersion               = terminalOfflineStatusContract.parmofflineDBVersion();
            previousOfflineTerminalState.OfflineAvailable               = terminalOfflineStatusContract.parmofflineAvailable() == true ? NoYes::Yes : NoYes::No;
            previousOfflineTerminalState.OfflineConnectionStatus        = terminalOfflineStatusContract.parmofflineConnectionStatus();
            previousOfflineTerminalState.OfflineOperation               = terminalOfflineStatusContract.parmofflineOperation();
            previousOfflineTerminalState.PendingTransactions            = terminalOfflineStatusContract.parmpendingTransactions();
            previousOfflineTerminalState.OfflineDbDataSizeInMB          = terminalOfflineStatusContract.parmofflineDbDataSizeInMB();
            previousOfflineTerminalState.OfflineDbIndexSizeInMB         = terminalOfflineStatusContract.parmofflineDbIndexSizeInMB();
            previousOfflineTerminalState.UnallocatedSpaceInMB           = terminalOfflineStatusContract.parmunallocatedSpaceInMB();
            previousOfflineTerminalState.UnusedSpaceInMB                = terminalOfflineStatusContract.parmunusedSpaceInMB();
            previousOfflineTerminalState.TerminalStateDateTime          = RetailOfflineTerminalStateContract::systemDateTimeStr2UtcDateTime(terminalOfflineStatusContract.parmTerminalStateDateTime());
            previousOfflineTerminalState.DatabaseSizeInMB               = terminalOfflineStatusContract.parmdatabaseSizeInMB();

            if (previousOfflineTerminalState.RecId)
            {
                previousOfflineTerminalState.update();
            }
            else
            {
                previousOfflineTerminalState.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>