<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerBondTransAdapter_GeneralJournal_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  Incapsulates all mapping between GeneralJournal and astract bondable transactions
/// </summary>
class LedgerBondTransAdapter_GeneralJournal_RU implements LedgerBondAdditionalPropertiesMerger_RU
{
    LedgerBond2SideIDMapping_RU mergeableProperties;
    LedgerVoucherObject         voucher;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adapt</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Converts given _trans and detail level to absatrct bondable transaction
    /// </summary>
    /// <param name="_trans">
    ///  Transaction in general legder
    /// </param>
    /// <param name="_detailSummary">
    ///  Detail level
    /// </param>
    /// <param name="_subLedgers">
    ///  Linked SubLedgerJournalAccountEntry recIDs set
    /// </param>
    /// <returns>
    ///   New o existing bondable transaction
    /// </returns>
    LedgerBondableTrans_RU adapt(LedgerVoucherTransObject _trans, DetailSummary _detailSummary, Set _subLedgers = null)
    {
        LedgerBondableTrans_RU ret = new LedgerBondableTrans_RU();
        ret.parmID(this.getID(_trans));
        ret.parmDetailSummary(_detailSummary);
        ret.parmAccountingDate(voucher.parmAccountingDate());
        ret.parmAllocationLevel(_trans.parmAllocationLevel());

        ret.amounts(_trans.parmTransactionCurrencyAmount(),
                    _trans.parmAccountingCurrencyAmount(),
                    _trans.parmReportingCurrencyAmount());

        ret.parmIsCorrection(_trans.parmIsCorrection());
        ret.parmIsCredit(_trans.parmGeneralJournalAccountEntry().IsCredit);
        ret.parmLedgerDimensionId(_trans.parmLedgerDimensionId());
        ret.parmPostingLayer(voucher.parmPostingLayer());
        ret.parmPaymentReference(_trans.parmPaymentReference());
        ret.parmPostingType(_trans.parmPostingType());
        ret.parmQuantity(_trans.parmQuantity());
        ret.parmSourceRecId(_trans.parmTaxParentReferenceRecId());
        ret.parmSourceTableId(_trans.parmTaxParentReferenceTableId());
        ret.parmTransactionCurrencyCode(_trans.parmTransactionCurrencyCode());

        ret.parmMergeablePropertiesID(mergeableProperties.getID(LedgerBondMergeablesGeneralJour_RU::newByLedgerVoucherTransObject(_trans, _subLedgers)));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getID</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Returns unique identifier for given _trans
    /// </summary>
    /// <param name="_trans">
    ///   <c>LedgerVoucherTransObject</c>
    /// </param>
    /// <returns>
    ///   Unique identifier. Is is guaranteed, trant for same _trans returned same identifiers
    /// and for dirrerent trans returns different identifiers
    /// </returns>
    LedgerBondId_RU getID(LedgerVoucherTransObject _trans)
    {
        return _trans.parmTempRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubLedgers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns set of SubLedgerJournalAccountEntries recIDs, linked to the record
    /// </summary>
    /// <param name="_trans">
    ///   transaction
    /// </param>
    /// <returns>
    ///   Set of recID's
    /// </returns>
    Set getSubLedgers(LedgerBondableTrans_RU _trans)
    {
        return mergeableProperties.getByID(_trans.parmMergeablePropertiesID()).subLedgers();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransRelations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns LedgerPostingOneToManyCollection containig transaction collections
    /// </summary>
    /// <param name="_trans">
    ///   transaction
    /// </param>
    /// <returns>
    ///   LedgerPostingOneToManyCollection
    /// </returns>
    LedgerPostingOneToManyCollection getTaxTransRelations(LedgerBondableTrans_RU _trans)
    {
        return mergeableProperties.getByID(_trans.parmMergeablePropertiesID())
                                  .taxTransactionRelationshipCollection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Inserts bondable transaction to internal storage of _journal
    /// </summary>
    /// <param name="_trans">
    /// Abstract bondable transaction
    /// </param>
    /// <param name="_journal">
    ///  <c>LedgerVoucher</c>
    /// </param>
    void insert(LedgerBondableTrans_RU _trans, LedgerVoucher _journal)
    {
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        GeneralJournalAccountEntry_W        generalJournalAccountEntryW;
        LedgerEntry                         ledgerEntry;

        LedgerPostingOneToManyCollection    taxTransactionRelationshipCollection;
        LedgerBondMergeablesGeneralJour_RU  mergeables = mergeableProperties.getByID(_trans.parmMergeablePropertiesID());

        mergeables.setTables(generalJournalAccountEntry, generalJournalAccountEntryW, ledgerEntry);
        this.update(_trans,  generalJournalAccountEntry, generalJournalAccountEntryW, ledgerEntry);
        taxTransactionRelationshipCollection = mergeables.taxTransactionRelationshipCollection();

        voucher.addToGeneralJournal(_journal,
                                    _trans.parmDetailSummary(),
                                    generalJournalAccountEntry,
                                    ledgerEntry,
                                    taxTransactionRelationshipCollection,
                                    generalJournalAccountEntryW);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertList</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Inserts given _transactions into the internal storage of _journal
    /// </summary>
    /// <param name="_transactions">
    ///  <c>RecordSortedList</c> of TmpLedgerBondResultTransaction_RU
    /// </param>
    /// <param name="_journal">
    ///    <c>LedgerVoucher</c>
    /// </param>
    /// <returns>
    ///    Adjustment of GeneralJournal in the same form as in addToGeneralJournal method of _journal
    /// </returns>
    boolean insertList(RecordSortedList _transactions, LedgerVoucher _journal)
    {
        TmpLedgerBondResultTransaction_RU transaction;
        boolean hasMore;
        boolean ret;
        for (hasMore = _transactions.first(transaction); hasMore; hasMore = _transactions.next(transaction))
        {
            this.insert(transaction.asObject(), _journal);
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeProperties</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Merges additional properties
    /// </summary>
    /// <param name="_oldID">
    ///   ID of old properties set
    /// </param>
    /// <param name="_newID">
    ///   ID of the new properties set
    /// </param>
    /// <returns>
    ///   ID of resulting properties set
    /// </returns>
    int64 mergeProperties(int64 _oldID, int64 _newID)
    {
        LedgerBondMergeablesGeneralJour_RU first = mergeableProperties.getByID(_oldID);
        LedgerBondMergeablesGeneralJour_RU last = mergeableProperties.getByID(_newID);
        LedgerBondMergeablesGeneralJour_RU ret = new LedgerBondMergeablesGeneralJour_RU();
        ret.merge(first, last);
        return mergeableProperties.getID(ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Initializes new object
    /// </summary>
    /// <param name="_voucher">
    ///  <c>LedgerVoucherObject</c> related to the current posting process
    /// </param>
    void new(LedgerVoucherObject _voucher)
    {
        mergeableProperties = new LedgerBond2SideIDMapping_RU(Types::Class);
        voucher = _voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Updates _generalJournalLine, _ledgerEntry with values stored
    /// </summary>
    /// <param name="_trans">
    ///     biondable transaction
    /// </param>
    /// <param name="_generalJournalAccountEntry">
    ///  GeneralJournalAccountEntry
    /// </param>
    /// <param name="_generalJournalAccountEntryW">
    ///  The country specific general journal account entry table.
    /// </param>
    /// <param name="_ledgerEntry">
    /// LedgerEntry
    /// </param>
    void update(
        LedgerBondableTrans_RU _trans,
        GeneralJournalAccountEntry _generalJournalAccountEntry,
        GeneralJournalAccountEntry_W _generalJournalAccountEntryW,
        LedgerEntry _ledgerEntry)
    {
        LedgerBondMergeablesGeneralJour_RU mergeables = mergeableProperties.getByID(_trans.parmMergeablePropertiesID());

        void initLine(GeneralJournalAccountEntry _line, GeneralJournalAccountEntry_W _lineW)
        {
            _line.TransactionCurrencyAmount = _trans.parmTransactionCurrencyAmount();
            _line.AccountingCurrencyAmount  = _trans.parmAccountingCurrencyAmount();
            _line.ReportingCurrencyAmount   = _trans.parmReportingCurrencyAmount();
            _line.Quantity                  = _trans.parmQuantity();
            _line.AllocationLevel           = _trans.parmAllocationLevel();
            _line.IsCorrection              = _trans.parmIsCorrection();
            _line.IsCredit                  = _trans.parmIsCredit();

            _line.TransactionCurrencyCode   = _trans.parmTransactionCurrencyCode();
            _line.PaymentReference          = _trans.parmPaymentReference();
            _line.PostingType               = _trans.parmPostingType();
            _line.LedgerDimension           = _trans.parmLedgerDimensionId();

            _lineW.BondBatchTrans_RU        = _trans.parmBondBatchTrans_RU();
        }
        
        mergeables.setTables(_generalJournalAccountEntry, _generalJournalAccountEntryW, _ledgerEntry);
        initLine(_generalJournalAccountEntry, _generalJournalAccountEntryW);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>