<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailReplenishmentBuyersPush</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailReplenishmentBuyersPush</c> class creates a Buyers Push and
/// calculates the on hand quantity.
/// </summary>
class RetailReplenishmentBuyersPush extends RetailReplenishment
{
    [SysObsolete('The unitOfMeasureConverter variable is deprecated, used productUnitOfMeasureConverter instead', false, 30\06\2020)]
    UnitOfMeasureConverter_Product  unitOfMeasureConverter;
        
    EcoResProductUnitConverter      productUnitOfMeasureConverter;
    InventAvailabilityFormCache     inventAvailabilityFormCache;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calSelectedLinesQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the on hand quantity.
    /// </summary>
    void calSelectedLinesQty()
    {
        RetailBuyersPushLine       tfshBuyersPushLine;
        InventTable                inventTable;
        Qty                        rQty;
        Qty                        rQtyPerLine;

        m_oLineQry.reset();

        while (m_oLineQry.next())
        {
            tfshBuyersPushLine = m_oLineQry.get(tableNum(RetailBuyersPushLine));

            if (filter && !strScan(filter , tfshBuyersPushLine.ItemId, 1, strLen(filter)))
            {
                // Continue if item is not in the filter
                continue;
            }

            // Exclude on-hand quantity of items that has a manual specified quantity to contribute
            if (tfshBuyersPushLine.UserSpecified == NoYes::Yes)
            {
                continue;
            }

            inventTable = tfshBuyersPushLine.inventTable();
            productUnitOfMeasureConverter.parmFromUnitOfMeasureSymbol(inventTable.inventUnitId());
            productUnitOfMeasureConverter.parmToUnitOfMeasureSymbol(tfshBuyersPushLine.UnitID);
            productUnitOfMeasureConverter.parmItemId(tfshBuyersPushLine.ItemId);
            productUnitOfMeasureConverter.parmInventDimId(tfshBuyersPushLine.InventDimId);

            // On-hand quantity should be returned in the UOM of the buyer's push line
            rQtyPerLine = productUnitOfMeasureConverter.convertValue(tfshBuyersPushLine.onHandQty('', curExt(), inventAvailabilityFormCache));
            rQty    +=  rQtyPerLine > 0 ? rQtyPerLine : 0;
        }

        m_rQtyInSelectedLines = rQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countNumberOfSelectedLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of lines for the Buyers Push.
    /// </summary>
    void countNumberOfSelectedLines()
    {
        RetailBuyersPushLine       tfshBuyersPushLine;

        select count(RecId) from tfshBuyersPushLine
            where tfshBuyersPushLine.BuyersPushId == this.parmBuyersPush().BuyersPushId;

        m_iNumberOfLines = any2int(tfshBuyersPushLine.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBuyersPushLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the instance of <c>RetailBuyersPushLine</c> table.
    /// </summary>
    /// <param name="_common">
    /// The instance of a table.
    /// </param>
    /// <returns>
    /// An instance of the table passed in the parameter.
    /// </returns>
    public RetailBuyersPushLine getBuyersPushLine(Common _common)
    {
        return _common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Item number.
    /// </summary>
    /// <param name="_tCommon">
    /// An instance of a table object.
    /// </param>
    /// <returns>
    /// Reference number for the item.
    /// </returns>
    ItemId getItem(Common    _tCommon)
    {
        RetailBuyersPushLine   tfshBuyersPushLine = _tCommon;

        return tfshBuyersPushLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns null value
    /// </summary>
    /// <param name="_tCommon">
    /// The instance of <c>PurchTable</c>
    /// </param>
    /// <returns>
    /// Returns the null value
    /// </returns>
    PurchTable getPurchTable(Common _tCommon)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity.
    /// </summary>
    /// <param name="_tCommon">
    /// An instance of <c>RetailBuyersPushLine</c> table.
    /// </param>
    /// <returns>
    /// On hand quantity.
    /// </returns>
    Qty getQty(Common    _tCommon)
    {
        RetailBuyersPushLine tfshBuyersPushLine = _tCommon;

        return tfshBuyersPushLine.availableOnHand(tfshBuyersPushLine, inventAvailabilityFormCache);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of <c>RetailReplenishmentBuyersPush</c> class
    /// </summary>
    /// <param name="_rQtyToDistribute">
    /// Quantity to distribute.
    /// </param>
    /// <param name="_buyersPush">
    /// RetailBuyersPushTable buffer variable that contains all the necessary information about distribution.
    /// </param>
    /// <remarks>
    /// Earlier distribution type hierarchy and location filter should be passed to this method as inputs.
    /// Now those parameters are the part of buyers push table,
    /// so we just need to pass RetailBuyersPushTable buffer variable that contain all the necessary information about distribution.
    /// </remarks>
    void new(Qty                    _rQtyToDistribute,
             RetailBuyersPushTable  _buyersPush)

    {
        // save current buyers push id
        this.parmBuyersPush(_buyersPush);

        m_rQtyToDistribute   = _rQtyToDistribute;
        select crossCompany m_tInventLocation
            where m_tInventLocation.RecId == _buyersPush.LocationRecId;

        replenishmentType               = RetailReplenishmentType::BuyersPush;
        productUnitOfMeasureConverter   = EcoResProductUnitConverter::construct();
        inventAvailabilityFormCache     = InventAvailabilityFormCache::construct();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the new query with <c>RetailBuyersPuchLine</c> table.
    /// </summary>
    protected void queryBuild()
    {
        super();

        m_oLineQry = new QueryRun(new Query());
        m_oLineQry.query().addDataSource(tableNum(RetailBuyersPushLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query with Buyers push and item details.
    /// </summary>
    protected void queryUpdate()
    {
        QueryBuildDataSource    oQryBuildDS;

        oQryBuildDS    = m_oLineQry.query().dataSourceTable(tableNum(RetailBuyersPushLine));

        oQryBuildDS.clearRanges();
        oQryBuildDS.addRange(fieldNum(RetailBuyersPushLine, BuyersPushId)).value(this.parmBuyersPush().BuyersPushId);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>replenish</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a Buyers push.
    /// </summary>
    /// <param name="_respectAssortments">
    /// boolean indicates if assortments should be respected (default is false).
    /// </param>
    void replenish(boolean _respectAssortments = false)
    {
        this.calcTotals();

        m_oLineQry.reset();

        this.progressInit("@RET831", this.numberOfLines() ,#AviUpdate);

        super(_respectAssortments);

        this.reset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the replenishment type (buyers push or cross docking) of the current replenishment object.
    /// </summary>
    /// <returns>
    /// The replenishment type of the current replenishment object.
    /// </returns>
    public final RetailReplenishmentType type()
    {
        return RetailReplenishmentType::BuyersPush;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>