<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeNonStockedConversionWizard</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///   The <c>TradeNonStockedConversionWizard</c> class controls the conversion wizard.
/// </summary>
public class TradeNonStockedConversionWizard
extends SysWizard
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accessMenuFunction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>MenuFunction</c> object.
    /// </summary>
    /// <returns>
    /// An instance of the <c>MenuFunction</c> class.
    /// </returns>
    public MenuFunction accessMenuFunction()
    {
        return new MenuFunction(menuitemdisplaystr(TradeNonStockedConversionWizard),MenuItemType::Display);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtons</Name>
				<Source><![CDATA[
    protected void enableButtons(boolean _setFocus = true)
    {
        if (this.curTabName() == formcontrolstr(TradeNonStockedConversionWizard, Step2))
        {
            _setFocus = false;
        }

        super(_setFocus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTradeNonStockedConversionItemDs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the <c>FormDataSource</c> with the selected items.
    /// </summary>
    /// <param name="_packedItemSelectionList">
    /// A <c>Container</c> object that contains a packed list of selected items.
    /// </param>
    private void fillTradeNonStockedConversionItemDs(container _packedItemSelectionList)
    {
        ListEnumerator  listEnumerator = List::create(_packedItemSelectionList).getEnumerator();
        FormDataSource  tradeNonStockedConversionItem_ds = this.formRunObject().tradeNonStockedConversionItem_ds();

        TradeNonStockedConversionItem       tradeNonStockedConversionItem;

        tradeNonStockedConversionItem = tradeNonStockedConversionItem_ds.cursor();
        tradeNonStockedConversionItem.ttsbegin();
        delete_from tradeNonStockedConversionItem;
        while (listEnumerator.moveNext())
        {
            tradeNonStockedConversionItem.data(listEnumerator.current());
            tradeNonStockedConversionItem.insert();
        }
        tradeNonStockedConversionItem.ttscommit();
        tradeNonStockedConversionItem_ds.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTradeNonStockedConversionSummaryDs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the <c>FormDataSource</c> with the selected items.
    /// </summary>
    /// <param name="_packedItemSelectionList">
    /// A <c>Container</c> object that contains a packed list of selected items.
    /// </param>
    private void fillTradeNonStockedConversionSummaryDs(container _packedItemSelectionList)
    {
        ListEnumerator  listEnumerator = List::create(_packedItemSelectionList).getEnumerator();
        FormDataSource  tradeNonStockedConversionTmpSummary_ds = this.formRunObject().tradeNonStockedConversionTmpSummary_ds();

        TradeNonStockedConversionItem       tradeNonStockedConversionItem;
        TradeNonStockedConversionTmpSummary tradeNonStockedConversionSummary;

        Map             summaryMap = new Map(typeName2Type(extendedtypestr(recId)), Types::Record);
        MapEnumerator   mapEnumerator;

        while (listEnumerator.moveNext())
        {
            tradeNonStockedConversionItem = listEnumerator.current();
            if (summaryMap.exists(tradeNonStockedConversionItem.LegalEntity))
            {
                tradeNonStockedConversionSummary = summaryMap.lookup(tradeNonStockedConversionItem.LegalEntity);
                tradeNonStockedConversionSummary.NumberOfProducts++;
                summaryMap.insert(tradeNonStockedConversionSummary.LegalEntity, tradeNonStockedConversionSummary);
            }
            else
            {
                tradeNonStockedConversionSummary.LegalEntity = tradeNonStockedConversionItem.LegalEntity;
                tradeNonStockedConversionSummary.TargetItemModelGroupDataAreaId = tradeNonStockedConversionItem.TargetItemModelGroupDataAreaId;
                tradeNonStockedConversionSummary.TargetItemModelGroupId = tradeNonStockedConversionItem.TargetItemModelGroupId;
                tradeNonStockedConversionSummary.NumberOfProducts = 1;
                summaryMap.insert(tradeNonStockedConversionSummary.LegalEntity, tradeNonStockedConversionSummary);
            }
        }
        tradeNonStockedConversionSummary = tradeNonStockedConversionTmpSummary_ds.cursor();
        tradeNonStockedConversionSummary.ttsbegin();
        delete_from tradeNonStockedConversionSummary;
        mapEnumerator = summaryMap.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            tradeNonStockedConversionSummary.data(mapEnumerator.currentValue());
            tradeNonStockedConversionSummary.insert();
        }
        tradeNonStockedConversionSummary.ttscommit();
        tradeNonStockedConversionTmpSummary_ds.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the wizard form.
    /// </summary>
    /// <returns>
    /// The name of the wizard form.
    /// </returns>
    public formName formName()
    {
        return formstr(TradeNonStockedConversionWizard);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formRunObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the <c>FormRun</c> object to an <c>Object</c> object.
    /// </summary>
    /// <returns>
    /// An <c>Object</c> object.
    /// </returns>
    private Object formRunObject()
    {
        return this.formRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls the navigation to the next step in the wizard.
    /// </summary>
    public void next()
    {
        switch (this.curTabName())
        {
            case formcontrolstr(TradeNonStockedConversionWizard, Step2) :
                this.nextStep2();
                break;

            case formcontrolstr(TradeNonStockedConversionWizard, Step4) :
                this.nextStep4();
                break;

            case formcontrolstr(TradeNonStockedConversionWizard, Step5) :
                this.nextStep5();
                break;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextStep2</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Controls the second step in the wizard.
    /// </summary>
    protected void nextStep2()
    {
        FormDataSource  tradeNonStockedConversion_ds;

        tradeNonStockedConversion_ds = this.formRunObject().tradeNonStockedConversion_ds();
        tradeNonStockedConversion_ds.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextStep4</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Controls the fourth step in the wizard.
    /// </summary>
    protected void nextStep4()
    {
        container       itemSelectionContainer;
        FormDataSource  tradeNonStockedConversion_ds;
        FormDataSource  tradeNonStockedConversionTmpCompanies_ds;

        tradeNonStockedConversion_ds = this.formRunObject().tradeNonStockedConversion_ds();
        tradeNonStockedConversionTmpCompanies_ds = this.formRunObject().tradeNonStockedConversionTmpCompanies_ds();
        itemSelectionContainer = TradeNonStockedConversionWizard::createItemSelection(tradeNonStockedConversion_ds.cursor(),
                                                                                      this.productSelectionToContainer(),
                                                                                      this.recordsToContainer(tradeNonStockedConversionTmpCompanies_ds));
        this.fillTradeNonStockedConversionItemDs(itemSelectionContainer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextStep5</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls the fifth step in the wizard.
    /// </summary>
    protected void nextStep5()
    {
        FormDataSource  tradeNonStockedConversionItem_ds = this.formRunObject().tradeNonStockedConversionItem_ds();
        this.fillTradeNonStockedConversionSummaryDs(this.recordsToContainer(tradeNonStockedConversionItem_ds));
    }

]]></Source>
			</Method>
			<Method>
				<Name>productSelectionToContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all selected products.
    /// </summary>
    /// <returns>
    /// A <c>Container</c> object that contains the record IDs of the selected products.
    /// </returns>
    private container productSelectionToContainer()
    {
        TradeNonStockedConversionTmpProducts tradeNonStockedConversionTmpProducts;
        FormDataSource tradeNonStockedConversionTmpProducts_ds = this.formRunObject().tradeNonStockedConversionTmpProducts_ds();
        Set productSelectionSet = new Set(typeName2Type(extendedtypestr(recId)));

        for (tradeNonStockedConversionTmpProducts = tradeNonStockedConversionTmpProducts_ds.getFirst();
             tradeNonStockedConversionTmpProducts;
             tradeNonStockedConversionTmpProducts = tradeNonStockedConversionTmpProducts_ds.getNext())
        {
            productSelectionSet.add(tradeNonStockedConversionTmpProducts.Product);
        }

        return productSelectionSet.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordsToContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all records for the <c>FormDataSource</c> object.
    /// </summary>
    /// <param name="_formDataSource">
    /// An <c>FormDataSource</c> object.
    /// </param>
    /// <returns>
    /// A <c>Container</c> object that contains a packed <c>List</c> that has all the records from the
    /// <c>FormDataSource</c> .
    /// </returns>
    private container recordsToContainer(FormDataSource _formDataSource)
    {
        Common  common;
        List    recordList = new List(Types::Record);

        for (common  = _formDataSource.getFirst();
             common;
             common = _formDataSource.getNext())
        {
            recordList.addEnd(common);
        }

        return recordList.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates a conversion based on the data entered in the wizard.
    /// </summary>
    void run()
    {
        Args            args = new Args();
        FormDataSource  tradeNonStockedConversionDs      = this.formRunObject().tradeNonStockedConversion_ds();
        FormDataSource  tradeNonStockedConversionItemDs  = this.formRunObject().tradeNonStockedConversionItem_ds();
        boolean         runReadinessCheck = this.formRunObject().runReadinessCheck();
        TradeNonStockedConversion newConversion;

        super();

        newConversion = TradeNonStockedConversionWizard::createConversion(tradeNonStockedConversionDs.cursor().data(),
                                                                          this.recordsToContainer(tradeNonStockedConversionItemDs));

        if (runReadinessCheck)
        {
            args.record(newConversion);
            TradeNonStockedConversionReadinessCheck::main(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupNavigation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables and disables the navigation buttons.
    /// </summary>
    /// <remarks>
    /// Use this method to set up the two arrays: nextEnabled[] and backEnabled[] Call
    /// <c>this.nextEnabled(boolean)</c> and <c>this.backEnabled(boolean)</c> to enable or disable the
    /// buttons at runtime.
    /// </remarks>
    protected void setupNavigation()
    {
        nextEnabled[3] = false;
        nextEnabled[4] = false;
        nextEnabled[5] = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Validates that the wizard can close.
    /// </summary>
    /// <returns>
    ///   Always returns true.
    /// </returns>
    public boolean validate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static public TradeNonStockedConversionWizard construct()
    {
        return new TradeNonStockedConversionWizard();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a conversion.
    /// </summary>
    /// <param name="_tradeNonStockedConversion">
    /// A <c>TradeNonStockedConversion</c> record.
    /// </param>
    /// <param name="_packedConversionItems">
    /// A <c>Container</c> object that contains a packed list of selected items.
    /// </param>
    /// <returns>
    /// A <c>TradeNonStockedConversion</c> record.
    /// </returns>
    static private TradeNonStockedConversion createConversion(
        TradeNonStockedConversion   _tradeNonStockedConversion,
        container                   _packedConversionItems)
    {
        TradeNonStockedConversion       tradeNonStockedConversion;
        TradeNonStockedConversionItem   tradeNonStockedConversionItem;
        ListEnumerator                  listEnumerator;

        ttsbegin;
        tradeNonStockedConversion.data(_tradeNonStockedConversion);
        tradeNonStockedConversion.insert();

        listEnumerator = List::create(_packedConversionItems).getEnumerator();
        while (listEnumerator.moveNext())
        {
            tradeNonStockedConversionItem.data(listEnumerator.current());
            tradeNonStockedConversionItem.initFromTradeNonStockedConversion(tradeNonStockedConversion);
            tradeNonStockedConversionItem.insert();
        }

        ttscommit;
        return tradeNonStockedConversion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createItemSelection</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a list of selected items.
    /// </summary>
    /// <param name="_tradeNonStockedConversion">
    ///    A <c>TradeNonStockedConversion</c> record.
    /// </param>
    /// <param name="_packedProductSelectionSet">
    ///    A <c>Container</c> object that has a packed list of selected products.
    /// </param>
    /// <param name="_packedCompanySelectionList">
    ///    A <c>Container</c> object that has a packed list of selected companies.
    /// </param>
    /// <returns>
    ///    A <c>Container</c> object that has a packed list of selected items.
    /// </returns>
    static protected container createItemSelection(
        TradeNonStockedConversion   _tradeNonStockedConversion,
        container                   _packedProductSelectionSet,
        container                   _packedCompanySelectionList)
    {
        EcoResProductRecId  productRecId;
        ListEnumerator      listEnumerator;
        SetEnumerator       setEnumerator;
        InventTable         inventTable;
        CompanyInfo         companyInfo;
        List                recordList = new List(Types::Record);
        TradeNonStockedConversionItem           tradeNonStockedConversionItem;
        TradeNonStockedConversionTmpCompanies   companies;

        listEnumerator = List::create(_packedCompanySelectionList).getEnumerator();
        while (listEnumerator.moveNext())
        {
            companies.clear();
            companies.data(listEnumerator.current());
            companies.insert();
        }

        tradeNonStockedConversionItem.setTmp();
        setEnumerator = Set::create(_packedProductSelectionSet).getEnumerator();

        while (setEnumerator.moveNext())
        {
            productRecId = setEnumerator.current();
            while select crossCompany inventTable
                where inventTable.Product == productRecId
                join RecId from companyInfo
                    where companyInfo.DataArea == inventTable.DataAreaId
                    join companies
                        where companies.LegalEntity == companyInfo.RecId
            {
                if (!TradeNonStockedConversionItem::existsItem(inventTable.ItemId, inventTable.DataAreaId))
                {
                    tradeNonStockedConversionItem.initValue();
                    tradeNonStockedConversionItem.initFromTradeNonStockedConversion(_tradeNonStockedConversion);
                    tradeNonStockedConversionItem.initFromInventTable(inventTable);
                    tradeNonStockedConversionItem.initFromTradeNonStockedConTmpCompanies(companies);
                    if (tradeNonStockedConversionItem.checkCurrentItemModelGroup(false))
                    {
                        recordList.addEnd(tradeNonStockedConversionItem);
                    }
                }
            }
        }
        return recordList.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        TradeNonStockedConversionWizard wizard = TradeNonStockedConversionWizard::construct();
        FormDataSource  formDataSource;
        formrun         formrun;

        if (wizard.prompt())
        {
            wizard.run();

            if (_args.dataset() && _args.record() && FormDataUtil::getFormDataSource(_args.record()))
            {
                formDataSource = FormDataUtil::getFormDataSource(_args.record());
                formDataSource.executeQuery();
            }
            else
            {
                if (_args.caller())
                {
                    formrun = _args.caller();
                    formrun.dataSource().research();
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>