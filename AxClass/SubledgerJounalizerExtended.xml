<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJounalizerExtended</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

[ExportMetadataAttribute("SubledgerJournalizer", "SubledgerJournalizer"),ExportAttribute("Dynamics.AX.Application.SubledgerJournalizerIExtension")]
public class SubledgerJounalizerExtended implements SubledgerJournalizerIExtension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loadAccountingDistributionTmp</Name>
				<Source><![CDATA[
    public void loadAccountingDistributionTmp(
        SourceDocumentLineImplementation        _sourceDocumentLineImplementation,
        Set                                     _checkRecordExists,
        SourceDocumentLine                      _sourceDocumentLine,
        SourceDocumentLineItemTmp               _sourceDocumentLineItemTmp,
        AccountingDistributionTmpJournalize     _accountingDistributionTmpJournalize,
        Ledger                                  _accountingDistributionLedger,
        SourceDocumentType                      _sourceDocumentType,
        SourceDocumentLineItem                  _sourceDocumentLineItem,
        AccountingJournalizingRule              _journalizingAccountingRule,
        LedgerDimensionAllocation               _ledgerDimensionAllocation,
        RecordInsertList                        _recordInsertList,
        AccountingEventType                     _accountingEventType,
        boolean                                 _isInterCompany,
        boolean                                 _isCorrection,
        container                               _exchangeRatesContainer,
        container                               _reportingExchangeRatesContainer)

    {
        VendInvoiceTrans                            vendInvoiceTrans;

        if (Project::Enabled() && _sourceDocumentLineImplementation.TableId == tableNum(VendInvoiceTrans))
        {
            vendInvoiceTrans = _sourceDocumentLineImplementation;

            if ((vendInvoiceTrans.psaReleaseAmount || vendInvoiceTrans.psaRetainageAmount) &&
                       !_checkRecordExists.in(_sourceDocumentLineImplementation.RecId))
            {
                if (vendInvoiceTrans.purchLine().ProjId && vendInvoiceTrans.LineAmount)
                {
                    this.psaLoadAccountingDistributionTmp(
                                                        _sourceDocumentLine,
                                                        _sourceDocumentLineItemTmp,
                                                        _accountingDistributionTmpJournalize,
                                                        _accountingDistributionLedger,
                                                        _sourceDocumentType,
                                                        _sourceDocumentLineItem,
                                                        _journalizingAccountingRule,
                                                        _ledgerDimensionAllocation,
                                                        _recordInsertList,
                                                        _accountingEventType,
                                                        _isInterCompany,
                                                        _isCorrection,
                                                        _exchangeRatesContainer,
                                                        _reportingExchangeRatesContainer);
                }

                _checkRecordExists.add(_sourceDocumentLineImplementation.RecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaLoadAccountingDistributionTmp</Name>
				<Source><![CDATA[
    public void psaLoadAccountingDistributionTmp(
        SourceDocumentLine                      _sourceDocumentLine,
        SourceDocumentLineItemTmp               _sourceDocumentLineItemTmp,
        AccountingDistributionTmpJournalize     _accountingDistributionTmpJournalize,
        Ledger                                  _accountingDistributionLedger,
        SourceDocumentType                      _sourceDocumentType,
        SourceDocumentLineItem                  _sourceDocumentLineItem,
        AccountingJournalizingRule              _journalizingAccountingRule,
        LedgerDimensionAllocation               _ledgerDimensionAllocation,
        RecordInsertList                        _recordInsertList,
        AccountingEventType                     _accountingEventType,
        boolean                                 _isInterCompany,
        boolean                                 _isCorrection,
        container                               _exchangeRatesContainer,
        container                               _reportingExchangeRatesContainer)

    {
        #define.ExchangeRate1(1)
        #define.ExchangeRate2(2)

        AccountingDistributionTmp accountingDistributionTmp;
        VendInvoiceTrans    vendInvoiceTrans;
        SourceDocumentLineImplementation sourceDocumentLineImplementation;

        void calculateForeignCurAmounts()
        {
            CurrencyExchangeHelper              currencyExchangeHelper;
            boolean                             roundResult;

            roundResult = true;

            currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(accountingDistributionTmp.Ledger, accountingDistributionTmp.ExchangeRateDate);
            currencyExchangeHelper.parmExchangeRate1(accountingDistributionTmp.ExchangeRate1);
            currencyExchangeHelper.parmExchangeRate2(accountingDistributionTmp.ExchangeRate2);
            currencyExchangeHelper.parmReportingExchangeRate1(accountingDistributionTmp.ReportingExchangeRate1);
            currencyExchangeHelper.parmReportingExchangeRate2(accountingDistributionTmp.ReportingExchangeRate2);

            accountingDistributionTmp.AccountingCurrencyAmount =
                                currencyExchangeHelper.calculateTransactionToAccounting(accountingDistributionTmp.TransactionCurrency,
                                                                                        accountingDistributionTmp.TransactionCurrencyAmount,
                                                                                        roundResult);
            accountingDistributionTmp.ReportingCurrencyAmount =
                                currencyExchangeHelper.calculateTransactionCurrencyToReportingCurrency(accountingDistributionTmp.TransactionCurrency,
                                                                                        accountingDistributionTmp.TransactionCurrencyAmount);

            if (_sourceDocumentLineItemTmp)
            {
                if (accountingDistributionTmp.Ledger == _sourceDocumentLineItemTmp.Ledger)
                {
                    accountingDistributionTmp.SourceDocLineAccountingCurrencyAmount = accountingDistributionTmp.AccountingCurrencyAmount;
                    accountingDistributionTmp.SourceDocLineReportingCurrencyAmount = accountingDistributionTmp.ReportingCurrencyAmount;
                }
                else
                {
                    currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(_sourceDocumentLineItemTmp.Ledger, _sourceDocumentLineItemTmp.ExchangeRateDate);
                    currencyExchangeHelper.parmExchangeRate1(_sourceDocumentLineItemTmp.ExchangeRate1);
                    currencyExchangeHelper.parmExchangeRate2(_sourceDocumentLineItemTmp.ExchangeRate2);
                    currencyExchangeHelper.parmReportingExchangeRate1(_sourceDocumentLineItemTmp.ReportingExchangeRate1);
                    currencyExchangeHelper.parmReportingExchangeRate2(_sourceDocumentLineItemTmp.ReportingExchangeRate2);

                    accountingDistributionTmp.SourceDocLineAccountingCurrencyAmount =
                                        currencyExchangeHelper.calculateTransactionToAccounting(accountingDistributionTmp.TransactionCurrency,
                                                                                                accountingDistributionTmp.TransactionCurrencyAmount,
                                                                                                roundResult);
                    accountingDistributionTmp.SourceDocLineReportingCurrencyAmount =
                                        currencyExchangeHelper.calculateTransactionCurrencyToReportingCurrency(accountingDistributionTmp.TransactionCurrency,
                                                                                                accountingDistributionTmp.TransactionCurrencyAmount);
                }
            }
        }

        LedgerDimensionAccount getLedgerDimensionOfDueToDueFrom(
            CompanyInfoRecId _legalEntityForDueToDueFromCreated,
            CompanyInfoRecId _legalEntityFromDueToDueFromCreated,
            LedgerDimensionAccount _ledgerDimensionForDimensionSource,
            Amount _transactionAmount)
        {
            List dimensionSources = new List(Types::Class);
            container entitySpecifiers;
            LedgerDimensionAccount  ledgerDimension;
            int ledgerAccountDefaultingPosition = 3;
            DataAreaId dataAreaForDueToDueFromCreated = CompanyInfo::getDataArea(_legalEntityForDueToDueFromCreated);
            DataAreaId dataAreaFromDueToDueFromCreated = CompanyInfo::getDataArea(_legalEntityFromDueToDueFromCreated);

            changecompany(dataAreaFromDueToDueFromCreated)
            {
                // get dimension sources.
                entitySpecifiers = LedgerDimensionDefaultingEngine::addNaturalKey(entitySpecifiers, tableStr(CompanyInfo), dataAreaFromDueToDueFromCreated);
                dimensionSources.addEnd(LedgerDimensionDefaultingEngine::getLedgerDimensionSpecifiers(_ledgerDimensionForDimensionSource));

                // get ledger dimension for dueTo/dueFrom
                LedgerDimensionDefaultAccount defaultAccount =
                    LedgerInterCompany::getOriginatingCompanyLedgerDimensionWithAmount(
                        _transactionAmount,
                        dataAreaFromDueToDueFromCreated,
                        dataAreaForDueToDueFromCreated);

                ledgerDimension = LedgerDimensionDefaultingEngine::createLedgerDimension(defaultAccount, dimensionSources, ledgerAccountDefaultingPosition);
            }

            return ledgerDimension;
        }

        FiscalCalendarPeriodRecId getFiscalCalendarPeriod(AccountingDate _accountingDate, CompanyInfoRecId _legalEntity)
        {
            FiscalCalendarPeriodRecId   fiscalCalendarPeriodRecId;

            fiscalCalendarPeriodRecId = LedgerFiscalCalendar::findPeriodByPeriodCodeDate(Ledger::fiscalCalendar(_legalEntity), _accountingDate, FiscalPeriodType::Operating).RecId;

            return fiscalCalendarPeriodRecId;
        }

        AccountingDistributionTmp createAccountingDistributionTmp()
        {
            accountingDistributionTmp.clear();
            accountingDistributionTmp.initFromAccountingDistTmpJournalize(_accountingDistributionTmpJournalize);
            accountingDistributionTmp.initFromLedger(_accountingDistributionLedger);

            accountingDistributionTmp.Offset = _ledgerDimensionAllocation.parmOppositeAccount();
            accountingDistributionTmp.AmountSign = _ledgerDimensionAllocation.parmSide();
            accountingDistributionTmp.NegativeAmountSign = (_ledgerDimensionAllocation.parmSide() == DebitCredit::Credit)? DebitCredit::Debit : DebitCredit::Credit;
            accountingDistributionTmp.PostingType = _journalizingAccountingRule.parmLedgerPostingType();
            accountingDistributionTmp.SourceDocumentLine = _sourceDocumentLine.RecId;
            accountingDistributionTmp.ExchangeRateDate = _sourceDocumentLineItemTmp.ExchangeRateDate;
            if (_isInterCompany)
            {
                accountingDistributionTmp.ExchangeRate1 = conPeek(_exchangeRatesContainer,#ExchangeRate1);
                accountingDistributionTmp.ExchangeRate2 = conPeek(_exchangeRatesContainer,#ExchangeRate2);
                accountingDistributionTmp.ReportingExchangeRate1 = conPeek(_reportingExchangeRatesContainer,#ExchangeRate1);
                accountingDistributionTmp.ReportingExchangeRate2 = conPeek(_reportingExchangeRatesContainer,#ExchangeRate2);
            }
            else
            {
                accountingDistributionTmp.ExchangeRate1 = _sourceDocumentLineItemTmp.ExchangeRate1;
                accountingDistributionTmp.ExchangeRate2 = _sourceDocumentLineItemTmp.ExchangeRate2;
                accountingDistributionTmp.ReportingExchangeRate1 = _sourceDocumentLineItemTmp.ReportingExchangeRate1;
                accountingDistributionTmp.ReportingExchangeRate2 = _sourceDocumentLineItemTmp.ReportingExchangeRate2;
            }
            accountingDistributionTmp.IsIntercompany = _isInterCompany;
            accountingDistributionTmp.IsCorrection = _isCorrection;

            // in the normal case the amount is of the opposite sign than needed for the offset so the amount is reversed
            // in the correction case the amount sign was reversed above so we don't want to reverse the amount
            if (((accountingDistributionTmp.AmountSign == DebitCredit::Credit &&
                _accountingDistributionTmpJournalize.TransactionCurrencyAmount >0) ||
                (accountingDistributionTmp.AmountSign == DebitCredit::Debit &&
                _accountingDistributionTmpJournalize.TransactionCurrencyAmount <0)) &&
                !accountingDistributionTmp.IsCorrection)
            {
                accountingDistributionTmp.TransactionCurrencyAmount = -_accountingDistributionTmpJournalize.TransactionCurrencyAmount;
            }
            else
            {
                accountingDistributionTmp.TransactionCurrencyAmount = _accountingDistributionTmpJournalize.TransactionCurrencyAmount;
            }

            calculateForeignCurAmounts();

            accountingDistributionTmp.TransferPolicy = (_journalizingAccountingRule.parmSummarize() == true) ? TransferPolicy::Summarize : TransferPolicy::TransferIndividual;

            accountingDistributionTmp.LedgerDimension = _journalizingAccountingRule.getJournalAccountEntryLedgerDimension(_ledgerDimensionAllocation.parmLedgerDimension(),_accountingDistributionTmpJournalize.LedgerDimension);

            if (_isInterCompany)
            {
                // get due to
                accountingDistributionTmp.DueToLedgerDimension = getLedgerDimensionOfDueToDueFrom(
                                                                    _sourceDocumentLineItemTmp.LegalEntity,
                                                                    _accountingDistributionTmpJournalize.AccountingLegalEntity,
                                                                    _accountingDistributionTmpJournalize.LedgerDimension,
                                                                    -_accountingDistributionTmpJournalize.TransactionCurrencyAmount);

                accountingDistributionTmp.SourceDocLineLegalEntity = _sourceDocumentLineItemTmp.LegalEntity;
                accountingDistributionTmp.FiscalCalendarPeriod = getFiscalCalendarPeriod(_accountingDistributionTmpJournalize.AccountingDate, _accountingDistributionTmpJournalize.AccountingLegalEntity);
            }
            else
            {
                accountingDistributionTmp.FiscalCalendarPeriod = getFiscalCalendarPeriod(_accountingDistributionTmpJournalize.AccountingDate,_sourceDocumentLineItem.parmLegalEntityRecId());
            }

            accountingDistributionTmp.InterCompanyPostingType = LedgerPostingType::InterCompany;

            accountingDistributionTmp.initFromAccountingDistributionTmp(accountingDistributionTmp);
            accountingDistributionTmp.IsRelieving = false;
            accountingDistributionTmp.IsYearEnd = false;
            switch (_accountingEventType)
            {
                case AccountingEventType::PeriodClose:
                    accountingDistributionTmp.SubledgerJournalEntryType = SubledgerJournalEntryType::PeriodClosed;
                    break;
                case AccountingEventType::PeriodOpen:
                    accountingDistributionTmp.SubledgerJournalEntryType = SubledgerJournalEntryType::PeriodOpened;
                    break;
                default:
                    accountingDistributionTmp.SubledgerJournalEntryType = _sourceDocumentType.parmSubledgerJournalEntryType();
            }

            accountingDistributionTmp.applyFixedDimension();

            return accountingDistributionTmp;
        }

        /// Main method starts
        //Creates a vendor balance accountingDistributionTmp with an amount less the retainage
        sourceDocumentLineImplementation = _sourceDocumentLine.getSourceDocumentLineImplementation();
        vendInvoiceTrans = sourceDocumentLineImplementation;
        accountingDistributionTmp = createAccountingDistributionTmp();
        accountingDistributionTmp.PostingType = LedgerPostingType::VendBalance;

        // in the normal case the amount is of the opposite sign than needed for the offset so the amount is reversed
        // in the correction case the amount sign was reversed above so we don't want to reverse the amount
        // in the normal case the amount is of the opposite sign than needed for the offset so the amount is reversed
        // in the correction case the amount sign was reversed above so we don't want to reverse the amount
        if (((accountingDistributionTmp.AmountSign == DebitCredit::Credit &&
            _accountingDistributionTmpJournalize.TransactionCurrencyAmount >0) ||
            (accountingDistributionTmp.AmountSign == DebitCredit::Debit &&
            _accountingDistributionTmpJournalize.TransactionCurrencyAmount <0)) &&
            !accountingDistributionTmp.IsCorrection)
        {
            // in the normal case the amount is of the opposite sign than needed for the offset so the amount is reversed
            // in the correction case the amount sign was reversed above so we don't want to reverse the amount
            if (((accountingDistributionTmp.AmountSign == DebitCredit::Credit &&
                _accountingDistributionTmpJournalize.TransactionCurrencyAmount >0) ||
                (accountingDistributionTmp.AmountSign == DebitCredit::Debit &&
                _accountingDistributionTmpJournalize.TransactionCurrencyAmount <0)) &&
                !accountingDistributionTmp.IsCorrection)
            {
                accountingDistributionTmp.TransactionCurrencyAmount = vendInvoiceTrans.psaRetainageAmount;
                if (vendInvoiceTrans.psaReleaseAmount)
                {
                    accountingDistributionTmp.TransactionCurrencyAmount -= vendInvoiceTrans.psaReleaseAmount;
                }
            }
            else
            {
                accountingDistributionTmp.TransactionCurrencyAmount = -vendInvoiceTrans.psaRetainageAmount;

                if (vendInvoiceTrans.psaReleaseAmount)
                {
                    accountingDistributionTmp.TransactionCurrencyAmount += vendInvoiceTrans.psaReleaseAmount;
                }
            }

            calculateForeignCurAmounts();
            _recordInsertList.add( accountingDistributionTmp);

            //Creates a retainage accountingDistributionTmp
            accountingDistributionTmp = createAccountingDistributionTmp();
            accountingDistributionTmp.PostingType = LedgerPostingType::PSAProjPurchRetain;
            accountingDistributionTmp.LedgerDimensionDefaultAccount  =  LedgerSystemAccounts::find(LedgerPostingType::PSAProjPurchRetain).LedgerDimension;
            //accountingDistributionTmp.LedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(accountingDistributionTmp.LedgerDimensionDefaultAccount, accountingDistributionTmp.LedgerDimension);
            
            LedgerDimensionAccount accDistLedgerDimension = LedgerDimensionFacade::serviceLedgerDimensionFromLedgerDims(accountingDistributionTmp.LedgerDimensionDefaultAccount,
                                                                                                                        _accountingDistributionTmpJournalize.LedgerDimension);
            accountingDistributionTmp.LedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(accDistLedgerDimension,
                                                                                                            vendInvoiceTrans.DefaultDimension);

            if (((accountingDistributionTmp.AmountSign == DebitCredit::Credit &&
                _accountingDistributionTmpJournalize.TransactionCurrencyAmount >0) ||
                (accountingDistributionTmp.AmountSign == DebitCredit::Debit &&
                _accountingDistributionTmpJournalize.TransactionCurrencyAmount <0)) &&
                !accountingDistributionTmp.IsCorrection)
            {
                accountingDistributionTmp.TransactionCurrencyAmount = -vendInvoiceTrans.psaRetainageAmount;
                if (vendInvoiceTrans.psaReleaseAmount)
                {
                    accountingDistributionTmp.TransactionCurrencyAmount += vendInvoiceTrans.psaReleaseAmount;
                }
            }
            else
            {
                accountingDistributionTmp.TransactionCurrencyAmount = vendInvoiceTrans.psaRetainageAmount;
                if (vendInvoiceTrans.psaReleaseAmount)
                {
                    accountingDistributionTmp.TransactionCurrencyAmount -= vendInvoiceTrans.psaReleaseAmount;
                }
            }

            calculateForeignCurAmounts();
            accountingDistributionTmp.applyFixedDimension();
            _recordInsertList.add( accountingDistributionTmp);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateByTree</Name>
				<Source><![CDATA[
    public DimensionValidationStatus validateByTree(
            RefRecId            _dimensionCombinationId,
            date                _date = dateNull(),
            boolean             _displayValidationMessage = false,
            boolean             _displayErrorsForEachDimensionValue = false,
            boolean             _skipSuspendedAndActiveDateValidation = false)
    {
        return LedgerDimensionValidationHelper::validateByTree(_dimensionCombinationId, _date, _displayValidationMessage, _displayErrorsForEachDimensionValue, _skipSuspendedAndActiveDateValidation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSubledgerJournalAccountEntry</Name>
				<Source><![CDATA[
    public boolean validateSubledgerJournalAccountEntry(
        LedgerDimensionAccount      _ledgerDimension)
    {
        // </GTH>
        return TaxThaiGovCertificationFeatureChecker::isTaxBranchEnabled() && !TaxBranchType::checkAccountStrucForLedgerDimension(_ledgerDimension);
       // </GTH>
    }

]]></Source>
			</Method>
			<Method>
				<Name>balanceSubledgerJournalEntryTmpInterunit</Name>
				<Source><![CDATA[
    public void balanceSubledgerJournalEntryTmpInterunit(SubledgerJournalAccountEntryTmpDetail _subledgerJournalAccountEntryTmpDetail)
    {
        LedgerTmpInterunitBalancerAccountEntry      interUnitBalancingEntriesReversal;
        LedgerTmpInterunitBalancerAccountEntry      interUnitBalancingEntriesNonReversal;

        if (LedgerInterunitBalancer::isBalancingEnabled())
        {
            //ATTENTION, the order of operations is important here.
            //Flipping the order will cause the output of the first call to be picked up as valid input for the
            //second call, which will generate extra balancing entries that should not have been generated.

            //balance the non-reversal entries first, because the next call will automatically filter out
            //the balancing entries generated here(the balancing entries will not be marked as reversal).
            interUnitBalancingEntriesNonReversal = this.generateInterunitBalancingEntries(NoYes::No,_subledgerJournalAccountEntryTmpDetail);
            this.insertInterunitBalancingEntries(interUnitBalancingEntriesNonReversal,_subledgerJournalAccountEntryTmpDetail);

            //balance the reversal entries last, because this may generate extra non-reversal entries,
            //which we don't want to feed to the balancer.
            interUnitBalancingEntriesReversal = this.generateInterunitBalancingEntries(NoYes::Yes,_subledgerJournalAccountEntryTmpDetail);
            this.insertInterunitBalancingEntries(interUnitBalancingEntriesReversal,_subledgerJournalAccountEntryTmpDetail);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInterunitBalancingEntries</Name>
				<Source><![CDATA[
    private void insertInterunitBalancingEntries(
        LedgerTmpInterunitBalancerAccountEntry _interUnitBalancingEntries,
        SubledgerJournalAccountEntryTmpDetail _subledgerJournalAccountEntryTmpDetail)
    {
        SubledgerJournalAccountEntryTmpDetail       localsubledgerJournalAccountEntryTmpDetail;

        select firstonly RecId
            from _interUnitBalancingEntries;

        if (_interUnitBalancingEntries != null)
        {
            localsubledgerJournalAccountEntryTmpDetail.linkPhysicalTableInstance(_subledgerJournalAccountEntryTmpDetail);

            insert_recordset _subledgerJournalAccountEntryTmpDetail(AccountingDistribution,
                                                                       // <GEEU>
                                                                       SourceAccountingDistributionTmp,
                                                                       // </GEEU>
                                                                       AccountingEvent,
                                                                       AccountingDate,
                                                                       ParentDistribution,
                                                                       TransferPolicy,
                                                                       IsCorrection,
                                                                       ExchangeRateDate,
                                                                       SubledgerJournalEntryType,
                                                                       ExchangeRate1,
                                                                       ExchangeRate2,
                                                                       ReportingExchangeRate1,
                                                                       ReportingExchangeRate2,
                                                                       FiscalCalendarPeriod,
                                                                       TransactionCurrencyCode,
                                                                       LegalEntity,
                                                                       Ledger,
                                                                       PostingLayer,
                                                                       LedgerName,
                                                                       AccountingCurrency,
                                                                       ReportingCurrency,
                                                                       SkipAccountValidation,
                                                                       AccountingCurrencyAmount,
                                                                       TransactionCurrencyAmount,
                                                                       ReportingCurrencyAmount,
                                                                       LedgerDimension,
                                                                       PostingType,
                                                                       DebitCredit)

                  select AccountingDistribution,
                        // <GEEU>
                        SourceAccountingDistributionTmp,
                        // </GEEU>
                        AccountingEvent,
                        AccountingDate,
                        ParentDistribution,
                        TransferPolicy,
                        IsCorrection,
                        ExchangeRateDate,
                        SubledgerJournalEntryType,
                        ExchangeRate1,
                        ExchangeRate2,
                        ReportingExchangeRate1,
                        ReportingExchangeRate2,
                        FiscalCalendarPeriod,
                        TransactionCurrencyCode,
                        LegalEntity,
                        Ledger,
                        PostingLayer,
                        LedgerName,
                        AccountingCurrency,
                        ReportingCurrency,
                        SkipAccountValidation
                    from localsubledgerJournalAccountEntryTmpDetail
                    join
                        AccountingCurrencyAmount,
                        TransactionCurrencyAmount,
                        ReportingCurrencyAmount,
                        LedgerDimension,
                        PostingType,
                        AmountSign
                    from _interUnitBalancingEntries
                        where _interUnitBalancingEntries.SubledgerJournalAccountEntryTmpDetail == localsubledgerJournalAccountEntryTmpDetail.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateInterunitBalancingEntries</Name>
				<Source><![CDATA[
    private LedgerTmpInterunitBalancerAccountEntry generateInterunitBalancingEntries(NoYes _isReversal,
        SubledgerJournalAccountEntryTmpDetail _subledgerJournalAccountEntryTmpDetail)
    {
        LedgerTmpInterunitBalancerAccountEntry      interUnitBalancingEntries;
        SubledgerJournalInterunitBalancer           balancer;
        AmountMST                                   debitAmount;
        AmountMST                                   creditAmount;

        select sum(AccountingCurrencyAmount) from _subledgerJournalAccountEntryTmpDetail
            where _subledgerJournalAccountEntryTmpDetail.DebitCredit == DebitCredit::Debit
                && _subledgerJournalAccountEntryTmpDetail.IsReversal == _isReversal
                && _subledgerJournalAccountEntryTmpDetail.IsRoundingAdjustment == NoYes::No;
        debitAmount = _subledgerJournalAccountEntryTmpDetail.AccountingCurrencyAmount;

        select sum(AccountingCurrencyAmount) from _subledgerJournalAccountEntryTmpDetail
            where _subledgerJournalAccountEntryTmpDetail.DebitCredit == DebitCredit::Credit
                && _subledgerJournalAccountEntryTmpDetail.IsReversal == _isReversal
                && _subledgerJournalAccountEntryTmpDetail.IsRoundingAdjustment == NoYes::No;
        creditAmount = _subledgerJournalAccountEntryTmpDetail.AccountingCurrencyAmount;

        // create balancing entries - but not when the entry is unbalanced in DR/CR overall to begin with
        if ((creditAmount == -debitAmount))
        {
            balancer = SubledgerJournalInterunitBalancer::construct();
            balancer.addFromRecordset(_subledgerJournalAccountEntryTmpDetail, _isReversal);
            interUnitBalancingEntries = balancer.performBalancing();
        }

        return interUnitBalancingEntries;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSubledgerJournalEntry</Name>
				<Source><![CDATA[
    public boolean validateSubledgerJournalEntry(
                                              RefRecId         _fiscalCalendar,
                                              ReuseVoucher     _reuseVoucher,
                                              Voucher          _subledgerVoucher,
                                              AccountingDate   _accountingDate,
                                              DataAreaId       _dataAreaId,
                                              RecId            _sourceDocumentHeaderRecId,
                                              boolean          _skipDuplicateVoucherCheck)
    {
         return GeneralLedgerExtension::validateReferenceNumber(
            _fiscalCalendar,
            _reuseVoucher,
            _subledgerVoucher,
            _accountingDate,
            _dataAreaId,
            false,
            false,
            false,
            _sourceDocumentHeaderRecId,
            _skipDuplicateVoucherCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDestinationCompanyLedgerDimensionWithAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the destination company debit or credit account using the transaction amount as a basis to determine the account to retrieve
    /// for the company pair.
    /// </summary>
    /// <param name = "_amount">The amount used to determine retrieval of debit or credit account.</param>
    /// <param name = "_originatingCompany">The originating company id.</param>
    /// <param name = "_destinationCompany">The destination company id.</param>
    /// <returns>The debit account for the destination company if the amount is of debit; otherwise, the credit account.</returns>
    public LedgerDimensionDefaultAccount getDestinationCompanyLedgerDimensionWithAmount(
        Amount  _amount,
        CompanyId _originatingCompany,
        CompanyId _destinationCompany)
    {
        return LedgerInterCompany::getDestinationCompanyLedgerDimensionWithAmount(
            _amount,
            _originatingCompany,
            _destinationCompany);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginatingCompanyLedgerDimensionWithAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the originating company debit or credit account using the transaction amount as a basis to determine the account to retrieve
    /// for the company pair.
    /// </summary>
    /// <param name = "_amount">The amount used to determine retrieval of debit or credit account.</param>
    /// <param name = "_originatingCompany">The originating company id.</param>
    /// <param name = "_destinationCompany">The destination company id.</param>
    /// <returns>The debit account for the destination company if the amount is of debit; otherwise, the credit account.</returns>
    public LedgerDimensionDefaultAccount getOriginatingCompanyLedgerDimensionWithAmount(
        Amount  _amount,
        CompanyId _originatingCompany,
        CompanyId _destinationCompany)
    {
        return LedgerInterCompany::getOriginatingCompanyLedgerDimensionWithAmount(
            _amount,
            _originatingCompany,
            _destinationCompany);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccountingDistributionTmpJournalize</Name>
				<Source><![CDATA[
    public boolean validateAccountingDistributionTmpJournalize(
        AccountingDistributionTmpJournalize _accountingDistributionTmpJournalize)
    {
        PurchLine purchLine;
        boolean   ret = true;

        purchLine = PurchLine::findBySourceDocumentLine(AccountingDistribution::find(_accountingDistributionTmpJournalize.ReferenceDistribution).SourceDocumentLine);
        if (!purchLine.ProjId || (purchLine.ProjId && purchLine.isStocked()))        
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>