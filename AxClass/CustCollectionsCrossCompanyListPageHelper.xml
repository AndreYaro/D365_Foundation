<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCollectionsCrossCompanyListPageHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustCollectionsCrossCompanyListPageHelper</c> class handles generalized work for the
///    <c>CustCollectionsManagerWorkspace</c> form parts
/// </summary>
class CustCollectionsCrossCompanyListPageHelper implements CustCollectionsIListPageHelper
{
    CustCollectionsPoolId previousSelection;
    Map poolMap;
    List poolList;
    FormStringControl poolFilter;
    CustCollectionsAgent currentAgent;
    boolean enteredFromForm;
    SelectableDataArea company;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>CustCollectionsListPageHelper</c> class.
    /// </summary>
    /// <param name="_poolFilter">
    /// A <c>FormStringControl</c> designed to contain a list of pools.
    /// </param>
    /// <param name="_fromForm">
    /// If the list page was given arguments or not.
    /// </param>
    protected void new(FormStringControl _poolFilter, boolean _fromForm = false)
    {
        poolFilter = _poolFilter;

        currentAgent = CustCollectionsAgent::findCurrentAgent();

        enteredFromForm = _fromForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>CustCollectionsListPageHelper</c> class.
    /// </summary>
    /// <param name="_poolFilter">
    /// A <c>FormStringControl</c> designed to contain a list of pools.
    /// </param>
    /// <param name="_fromForm">
    /// If the list page was given arguments or not.
    /// </param>
    public static CustCollectionsCrossCompanyListPageHelper construct(FormStringControl _poolFilter, boolean _fromForm = false)
    {
        return new CustCollectionsCrossCompanyListPageHelper(_poolFilter, _fromForm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCrossCompany</Name>
				<Source><![CDATA[
    public boolean isCrossCompany()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAgingPeriodValid</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Counts the buckets of the aging period definition.
    /// </summary>
    /// <param name="_agingPeriodName">
    ///    The aging period definition at which to look.
    /// </param>
    /// <returns>
    ///    true if there is at least one bucket, but not more than six; otherwise, false.
    /// </returns>
    public boolean checkAgingPeriodValid(CustVendReportName _agingPeriodName)
    {
        var lineCount = StatRepIntervalLine::countLinesInCompany(_agingPeriodName, company);

        //Valid only if there are 6 or fewer buckets
        return lineCount <= (CustVendBalanceList::getMaximumAgingBuckets()) && lineCount > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkForAging</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the current aging period definition, and displays appropriate warnings.
    /// </summary>
    /// <returns>
    ///    true if the current aging period definition is valid; otherwise, false.
    /// </returns>
    public boolean checkForAging()
    {
        CustVendReportName agingPeriod = this.getDefaultAgingPeriod();

        boolean validAgingPeriod = CustVendBalanceList::validateAgingPeriodDefinitionByCompany(agingPeriod, company, false, true, true);

        if (validAgingPeriod)
        {
            CustAging custAging;
            select firstonly crosscompany custAging
                where custAging.StatRepInterval == agingPeriod &&
                      custAging.DataAreaId == company;

            StatRepInterval statRepInterval;
            select firstonly crosscompany statRepInterval
                where statRepInterval.DataAreaId == company;

            if (!statRepInterval)
            {
                warning("@SYS137274");
            }
            else if (!custAging)
            {
                warning(strfmt("@SYS136202", agingPeriod));
            }
        }

        return validAgingPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPoolExists</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks to see whether a given pool exists before trying to use it.
    /// </summary>
    /// <param name="_poolID">
    ///    The <c>CustCollectionsPoolId</c> object to check for.
    /// </param>
    /// <returns>
    ///    true if the pool exists in the current pool list; otherwise, false.
    /// </returns>
    public boolean checkPoolExists(CustCollectionsPoolId _poolID)
    {
        return poolMap.exists(_poolID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPoolLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows the lookup form for a custom <c>CustCollectionsPool</c> object.
    /// </summary>
    public void createPoolLookup()
    {
        Args args = new Args(poolFilter);
        args.name(formstr(CustCollectionsPoolsLookupCrossCompany));

        Object formRun = classfactory.formRunClass(args);
        formRun.custCollectionsPools(poolList);
        formRun.init();
        formRun.setCompany(company);

        if (strlen(poolFilter.valueStr()) > 0)
        {
            formRun.selectRecord(poolFilter.valueStr());
        }
        else if (currentAgent.DefaultCustomerPool)
        {
            formRun.selectRecord(currentAgent.DefaultCustomerPool);
        }

        poolFilter.performFormLookup(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentAgent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the current user as an instance of the <c>CustCollectionsAgent</c> class.
    /// </summary>
    /// <returns>
    ///    The current user as an instance of the <c>CustCollectionsAgent</c> class.
    /// </returns>
    public CustCollectionsAgent getCurrentAgent()
    {
        return currentAgent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentPoolQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Uses the <c>PoolFilter</c> value to get the current pool query from a <c>Map</c> object.
    /// </summary>
    /// <returns>
    ///    A <c>Query</c> object that contains the customer grouping of the current pool.
    /// </returns>
    public Query getCurrentPoolQuery()
    {
        Query poolQuery;

        //If there's no pool, show all customers
        if (poolMap.empty() || strlen(poolFilter.valueStr()) == 0)
        {
            poolQuery = CustCollectionsPool::defaultQuery(CustPoolType::Collection);
        }
        else
        {
            str pool = poolFilter.text();
            poolQuery = new Query(poolMap.lookup(pool));
        }

        return poolQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultAgingPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>Name</c> value of the <c>StatRepInterval</c> object that the list page should filter by.
    /// </summary>
    /// <returns>
    ///    The <c>CustVendReportName</c> object of the correct <c>StatRepInterval</c> value.
    /// </returns>
    /// <remarks>
    ///    This method first tries to find the correct name by looking at the pool query. If it cannot be
    ///    found on the pool query, it looks for what default is set on the <c>CustParameters</c> form. If
    ///    there is not one set there, it tries to get the first available <c>StatRepInterval</c> value.
    /// </remarks>
    public CustVendReportName getDefaultAgingPeriod()
    {
        return CustCollectionsCrossCompanyListPageHelper::getDefaultAgingPeriodByPool(poolFilter.valueStr(), company);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstPoolId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>CustCollectionsPoolId</c> value of the first <c>CustCollectionsPool</c> object in the
    ///    map of the class.
    /// </summary>
    /// <returns>
    ///    The <c>CustCollectionsPoolId</c> value of the first <c>CustCollectionsPool</c> object in the map of
    ///    the class.
    /// </returns>
    public CustCollectionsPoolId getFirstPoolId()
    {
        CustCollectionsPoolId firstPool;

        if (!poolMap.empty())
        {
            MapEnumerator mapEnumerator = poolMap.getEnumerator();
            mapEnumerator.moveNext();
            firstPool = mapEnumerator.currentKey();
        }

        return firstPool;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInitialFilterValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the initial value for the pool filter for the collections list pages.
    /// </summary>
    /// <param name="_lastValue">
    ///    The <c>CustCollectionsPoolId</c> value that was selected when the form was last open.
    /// </param>
    /// <param name="_poolFormValue">
    ///    The <c>CustCollectionsPoolId</c> value from the collections pools form.
    /// </param>
    /// <returns>
    ///    The correct pool to use when a collections list page loads.
    /// </returns>
    public CustCollectionsPoolId getInitialFilterValue(CustCollectionsPoolId _lastValue, CustCollectionsPoolId _poolFormValue = '')
    {
        CustCollectionsAgent agent = this.getCurrentAgent();

        if (_poolFormValue && this.checkPoolExists(_poolFormValue))
        {
            return _poolFormValue;
        }
        else if (agent.DefaultCustomerPool && this.checkPoolExists(agent.DefaultCustomerPool))
        {
            return agent.DefaultCustomerPool;
        }
        else if (_lastValue && this.checkPoolExists(_lastValue))
        {
            return _lastValue;
        }
        else
        {
            return this.getFirstPoolId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPools</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the pool filter on the form with pools assigned to the current agent.
    /// </summary>
    public void loadPools()
    {
        CustCollectionsPool custCollectionsPool;
        CustCollectionsAgentPool custCollectionsAgentPool;
        CustCollectionsAgent custCollectionsAgent;

        poolMap = new Map(Types::String, Types::Container);
        poolList = new List(Types::String);

        while select crosscompany Name, QueryPacked
            from custCollectionsPool
                where custCollectionsPool.Type == CustPoolType::Collection &&
                      custCollectionsPool.DataAreaId == company
            exists join custCollectionsAgentPool
                where custCollectionsPool.Name == custCollectionsAgentPool.CustomerPoolId
            exists join custCollectionsAgent
                where custCollectionsAgent.RecId == custCollectionsAgentPool.CustCollectionsAgent &&
                    custCollectionsAgent.RecId == currentAgent.RecId
        {
            poolMap.insert(custCollectionsPool.Name, custCollectionsPool.QueryPacked);
            poolList.addEnd(custCollectionsPool.Name);
        }

        if (currentAgent.AllowShowAllPools || enteredFromForm)
        {
            this.loadUnassignedPools();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadUnassignedPools</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the pool filter on the form with pools not assigned to the current agent.
    /// </summary>
    /// <remarks>
    ///    This is run only when the <c>CustCollectionsAgent.ShowAll</c> value is checked or the agent has no
    ///    pools assigned.
    /// </remarks>
    public void loadUnassignedPools()
    {
        CustCollectionsPool custCollectionsPool;
        CustCollectionsAgentPool custCollectionsAgentPool;
        CustCollectionsAgent custCollectionsAgent;

        while select crosscompany Name, QueryPacked
            from custCollectionsPool
                where custCollectionsPool.Type == CustPoolType::Collection &&
                      custCollectionsPool.DataAreaId == company
            notexists join custCollectionsAgentPool
                where custCollectionsPool.Name == custCollectionsAgentPool.CustomerPoolId
            exists join custCollectionsAgent
                where custCollectionsAgent.RecId == custCollectionsAgentPool.CustCollectionsAgent &&
                    custCollectionsAgent.RecId == currentAgent.RecId
        {
            poolMap.insert(custCollectionsPool.Name, custCollectionsPool.QueryPacked);
            poolList.addEnd(custCollectionsPool.Name);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the company that the listpage helper will query when performing cross company queries
    /// </summary>
    /// <param name = "_company">The company to perform queries with</param>
    public void updateCompany(SelectableDataArea _company = curExt())
    {
        company = _company;

        if (company != curExt())
        {
            changecompany(company)
            {
                currentAgent = CustCollectionsAgent::findCurrentAgent();
            }
        }
        else
        {
            currentAgent = CustCollectionsAgent::findCurrentAgent();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAgingPeriodDefFromPool</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the aging period definition range value that is used on the provided customer pool query.
    /// </summary>
    /// <param name="_customerPool">
    ///    The customer pool query to evaluate.
    /// </param>
    /// <returns>
    ///    The aging period definition range value that is used on the provided customer pool query.
    /// </returns>
    /// <remarks>
    ///    If no customer pool query has been provided, an empty string will be returned. If the customer pool
    ///    does not include an aging period definition range, an empty string will be returned. If the
    ///    customer pool contains an aging period definition, the aging period definiton will be returned as
    ///    long as it is in the system as a valid aging period definition.
    /// </remarks>
    public static CustVendReportName getAgingPeriodDefFromPool(CustCollectionsPoolId _customerPool, SelectableDataArea _company = curExt())
    {
        CustVendReportName agingPeriodDefFromPool;
        QueryBuildDataSource currentDs;
        QueryBuildRange currentRange;
        int currentTableId;
        int rangeCount;
        str currentFieldName;

        if (_customerPool)
        {
            CustCollectionsPool collectionPool;
            select firstonly crosscompany QueryPacked from collectionPool
                where collectionPool.Name == _customerPool &&
                      collectionPool.DataAreaId == _company;

            // Nothing to do if the customer pool no longer exists
            if (collectionPool)
            {
                Query query = new Query(collectionPool.QueryPacked);
                int dsCount = query.dataSourceCount();

                // Enumerate all datasources since the same table can exist multiple times
                for (int currentDsNumber = 1; currentDsNumber <= dsCount; currentDsNumber++)
                {
                    currentDs = query.dataSourceNo(currentDsNumber);
                    currentTableId = currentDs.table();

                    if (currentTableId == tablenum(CustAging))
                    {
                        rangeCount = currentDs.rangeCount();

                        // Enumerate all ranges since multiple ranges of the same column can exist. Stop
                        // after the first match is found.
                        for (int currentRangeNumber = 1; currentRangeNumber <= rangeCount; currentRangeNumber++)
                        {
                            currentRange = currentDs.range(currentRangeNumber);
                            currentFieldName = currentRange.fieldName();
                            if (currentFieldName == fieldstr(CustAging, StatRepInterval))
                            {
                                if (StatRepInterval::existsInCompany(currentRange.value(), _company))
                                {
                                    agingPeriodDefFromPool = currentRange.value();
                                    return agingPeriodDefFromPool;
                                }
                            }
                        }
                    }
                }
            }
        }

        return agingPeriodDefFromPool;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAgingPeriod</Name>
				<Source><![CDATA[
    private static CustVendReportName validateAgingPeriod(CustVendReportName _agingPeriod, SelectableDataArea _company)
    {
        return CustVendBalanceList::validateAgingPeriodDefinitionByCompany(_agingPeriod, _company, false, false) ? _agingPeriod : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultAgingPeriodByPool</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the name of the default <c>StatRepInterval</c> record for a specified pool ID.
    /// </summary>
    /// <param name="_poolId">
    ///    The ID of a pool.
    /// </param>
    /// <returns>
    ///    The <c>Name</c> field of the specified <c>StatRepInterval</c> record.
    /// </returns>
    public static CustVendReportName getDefaultAgingPeriodByPool(CustCollectionsPoolId _poolId, SelectableDataArea _company = curExt())
    {
        CustVendReportName agingPeriod;

        // Try to get it from the pool query
        if (_poolId)
        {
            agingPeriod = CustCollectionsCrossCompanyListPageHelper::validateAgingPeriod(CustCollectionsCrossCompanyListPageHelper::getAgingPeriodDefFromPool(_poolId, _company), _company);
        }

        if (!agingPeriod)
        {
            // Try to get it from CustParameters
            agingPeriod = CustCollectionsCrossCompanyListPageHelper::validateAgingPeriod(CustParameters::findByCompany(_company).CollectionsStatRepInterval, _company);
        }

        if (!agingPeriod)
        {
            // Try to get the first one
            agingPeriod = CustCollectionsCrossCompanyListPageHelper::getFirstValidAgingPeriod(_company);
        }

        return agingPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstValidAgingPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the name of the first valid aging period definition.
    /// </summary>
    /// <returns>
    ///    The <c>CustVendReportName</c> value of a <c>StatRepInterval</c> record; otherwise, an empty string.
    /// </returns>
    public static CustVendReportName getFirstValidAgingPeriod(SelectableDataArea _company = curExt())
    {
        CustVendReportName name;
        StatRepInterval statRepInterval;

        while select crosscompany Name
            from statRepInterval
            order by statRepInterval.Name
            where statRepInterval.DataAreaId == _company
        {
            if (CustVendBalanceList::validateAgingPeriodDefinitionByCompany(statRepInterval.Name, _company, false, false))
            {
                name = statRepInterval.Name;
                break;
            }
        }

        return name;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>