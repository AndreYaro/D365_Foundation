<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjProposalTranSummariesRefresh</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Batch job class for refreshing project invoice proposal transactions summaries.
/// </summary>
public final class ProjProposalTranSummariesRefresh extends SysOperationServiceBase
{
    #OCCRetryCount
    private const str LoggerRetryExceptionMsg = '%1 retries exceeded max limit for %2 method.';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>refreshProposalSummaries</Name>
				<Source><![CDATA[
        /// <summary>
    ///  Refresh project invoice proposal transactions summaries.
    /// </summary>
    /// <param name = "_dataContact">Data contract class the holds the process ID value.</param>
    public final void refreshProposalSummaries(ProjProposalTranSummariesRefreshContract _dataContact)
    {
        ProjProposalJour proposalJour = _dataContact.parmProposalJour();

        this.refreshProposalSummariesExecution(proposalJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postException</Name>
				<Source><![CDATA[
    private void postException(ProjProposalJour _proposalJour)
    {
        this.updateRecalculateTotalsStatus(_proposalJour, ProjProposalRecalculateTotalsStatus::Required);

        if (this.isExecutingInBatch())
        {
            BatchJob batchJob;
            select firstonly forUpdate Status from batchJob
                where batchJob.RecId == this.getCurrentBatchTask().BatchJobId;

            if (batchJob)
            {
                ttsbegin;

                batchJob.Status = BatchStatus::Error;
                batchJob.update();
                
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRecalculateTotalsStatus</Name>
				<Source><![CDATA[
    public final void updateRecalculateTotalsStatus(ProjProposalJour _proposalJour, ProjProposalRecalculateTotalsStatus _recalculateTotalsStatus)
    {
        _proposalJour.reread();
        if (_proposalJour.RecalculateTotalsStatus != _recalculateTotalsStatus)
        {
            _proposalJour.setRecalculateTotalsStatus(_recalculateTotalsStatus);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshProposalSummariesExecution</Name>
				<Source><![CDATA[
    public final void refreshProposalSummariesExecution(ProjProposalJour _proposalJour)
    {
        _proposalJour.reread();
        if (_proposalJour && (_proposalJour.checkRecalculatesTotalsStatusIsRequired() || (_proposalJour.RecalculateTotalsStatus == ProjProposalRecalculateTotalsStatus::InProcess && this.isExecutingInBatch())))
        {
            ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ProjProposalTranSummariesRefresh));
        
            using (SysInstrumentationActivityContext activityContext = logger.projOpsFinActivity().invProposalTranSummariesRefresh())
            {
                try
                {
                    activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::IsBatch, any2Str(this.isExecutingInBatch()));
                    activityContext.addCustomProperty(ProjOpsFinancialsInstrumentationActivites::InvProposalRecId, any2Str(_proposalJour.RecId));

                    this.updateRecalculateTotalsStatus(_proposalJour, ProjProposalRecalculateTotalsStatus::InProcess);

                    ttsbegin;

                    ProjInvoiceProposalCreateLinesParams proposalCreateLinesParams = ProjInvoiceProposalCreateLinesParams::construct();
                    proposalCreateLinesParams.parmProjInvoiceProjId(_proposalJour.ProjInvoiceId);
                    proposalCreateLinesParams.parmCurrencyCodeFixed(_proposalJour.CurrencyId);
                    ProjInvoiceProposalCreateLines proposalCreateLines = ProjInvoiceProposalCreateLines::newStandard(proposalCreateLinesParams.pack());
                
                    ProjInvoiceProposalInsertLines invoiceProposalInsertLines = new ProjInvoiceProposalInsertLines(proposalCreateLines, false);
                    invoiceProposalInsertLines.addProposalIdToList(_proposalJour.ProposalId);
                    invoiceProposalInsertLines.executeUpdateInvoice();
                    invoiceProposalInsertLines.calcRetention();

                    _proposalJour.reread();
                    this.updateRecalculateTotalsStatus(_proposalJour, ProjProposalRecalculateTotalsStatus::NotRequired);

                    ttscommit;
                }
                catch (Exception::Deadlock)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        logger.logError(strFmt(LoggerRetryExceptionMsg, 'Deadlock', 'ProjProposalTranSummariesRefresh.refreshProposalSummariesExecution()'));
                        this.postException(_proposalJour);
                        throw Exception::Deadlock;
                    }
                    else
                    {
                        sleep(ProjConstants::DeadLockRetryInterval * xSession::currentRetryCount());
                        retry;
                    }
                }
                catch (Exception::UpdateConflict)
                {
                    if (appl.ttsLevel() == 0)
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            logger.logError(strFmt(LoggerRetryExceptionMsg, 'UpdateConflict', 'ProjProposalTranSummariesRefresh.refreshProposalSummariesExecution()'));
                            this.postException(_proposalJour);
                            throw Exception::UpdateConflictNotRecovered;
                        }
                        else
                        {
                            retry;
                        }
                    }
                    else
                    {
                        this.postException(_proposalJour);
                        throw Exception::UpdateConflict;
                    }
                }
                catch (Exception::TransientSqlConnectionError)
                {
                    if (ProjTransientSQLConnectionRetryProvider::retryTransientSqlConnectionError())
                    {
                        retry;
                    }
                    else
                    {
                        logger.logError(strFmt(LoggerRetryExceptionMsg, 'TransientSqlConnectionError', 'ProjProposalTranSummariesRefresh.refreshProposalSummariesExecution()'));
                        this.postException(_proposalJour);
                        throw Exception::TransientSqlConnectionError;
                    }
                }
                catch (Exception::Error)
                {
                    logger.logError(strFmt(LoggerRetryExceptionMsg, 'ExceptionError', 'ProjProposalTranSummariesRefresh.refreshProposalSummariesExecution()'));
                    this.postException(_proposalJour);
                    throw error("@SYS18447");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndSetRecalculateTotalsStatusToRequiredIfAppropriate</Name>
				<Source><![CDATA[
    public final static void validateAndSetRecalculateTotalsStatusToRequiredIfAppropriate(ProjProposalId _proposalId)
    {       
        if (ProjProposalTranSummariesRefresh::isInvoiceProposalLineEditPerfEnabled())
        {
            ProjProposalJour proposalJour;
            select firstonly RecalculateTotalsStatus from proposalJour
                where proposalJour.ProposalId == _proposalId;
            
            if (proposalJour)
            {
                if (proposalJour.RecalculateTotalsStatus == ProjProposalRecalculateTotalsStatus::InProcess)
                {
                    throw error("@Proj:InvoiceLineDeleteErrorDueToRecalculatesTotalStatusInProcess");
                }
                else if (proposalJour.RecalculateTotalsStatus == ProjProposalRecalculateTotalsStatus::NotRequired)
                {
                    ttsbegin;
                    proposalJour.selectForUpdate(true);
                    proposalJour.RecalculateTotalsStatus = ProjProposalRecalculateTotalsStatus::Required;
                    proposalJour.update();
                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRecalculateTotalsStatusInProcessState</Name>
				<Source><![CDATA[
    public final static boolean isRecalculateTotalsStatusInProcessState(ProjProposalId _proposalId)
    {
        boolean isRecalculateTotalsStatusInProcessState;

        if (ProjProposalTranSummariesRefresh::isInvoiceProposalLineEditPerfEnabled())
        {
            ProjProposalJour proposalJour;
            select firstonly RecalculateTotalsStatus from proposalJour
                where proposalJour.ProposalId == _proposalId;
            
            if (proposalJour)
            {
                if (proposalJour.RecalculateTotalsStatus == ProjProposalRecalculateTotalsStatus::InProcess)
                {
                    isRecalculateTotalsStatusInProcessState = true;
                }
            }
        }

        return isRecalculateTotalsStatusInProcessState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInvoiceProposalLineEditPerfEnabled</Name>
				<Source><![CDATA[
    public final static boolean isInvoiceProposalLineEditPerfEnabled()
    {
        boolean isInvoiceProposalLineEditPerfEnabled;

        ProjParameters projParameters;
        select firstonly InvoiceProposalLineEditPerf from projParameters;

        if (projParameters && projParameters.InvoiceProposalLineEditPerf == NoYes::Yes)
        {
            isInvoiceProposalLineEditPerfEnabled = true;
        }

        return isInvoiceProposalLineEditPerfEnabled;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>