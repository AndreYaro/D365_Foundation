<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkCreateQualityItemSampling</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkCreateQualityItemSampling</c> class contains logic for the quality-in item sampling work creation process.
/// </summary>
internal final class WHSWorkCreateQualityItemSampling extends WhsWorkCreate
{
    private WHSWorkCreateId             workCreateId;
    private InventTestAssociationTable  inventTestAssociationTable;
    private InventQualityReferenceType  referenceType;
    private InventDimId                 startInventDim;
    private InventQty                   updateQty;
    private InventQualityOrderId        relatedQualityOrderId;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the temp table used to create work.
    /// </summary>
    [Hookable(false)]
    public void createTempTable()
    {
        // Determine workOrigin type, if not supported type then throw error.
        WHSOriginType tmpOriginType = this.getOriginTypeBasedOnReferenceType();

        ttsbegin;
    
        // Set default information
        tmpWorkLine.WorkCreateId    = workCreateId;
        tmpWorkLine.WorkType        = WHSWorkType::Put;
        tmpWorkLine.WorkTransType   = WHSWorkTransType::QualityItemSampling;
    
        // Set Dim values based on the starting dimension where the inventory is located.
        workInventDim = InventDim::find(startInventDim);
    
        this.parmStartLocationId(workInventDim.wMSLocationId);
        this.parmTargetLicensePlateId(workInventDim.LicensePlateId);
        
        tmpWorkLine.InventBatchId   = workInventDim.inventBatchId;
        tmpWorkLine.StartLocationId = workInventDim.wMSLocationId;
    
        tmpWorkLine.InventTestAssociationTable  = inventTestAssociationTable.RecId;
        tmpWorkLine.ItemId                      = referenceType.itemId();
        tmpWorkLine.InventTransId               = referenceType.inventTransId();
        tmpWorkLine.OrderNum                    = referenceType.inventRefId();
        tmpWorkLine.OriginType                  = tmpOriginType;
        tmpWorkLine.OriginRefId                 = referenceType.inventRefId();
        tmpWorkLine.InventQualityOrderId        = relatedQualityOrderId;
        tmpWorkLine.LoadId                      = referenceType.loadId();
        tmpWorkLine.ShipmentId                  = referenceType.shipmentId();
    
        this.createTempLine(tmpWorkLine, updateQty);
        tmpWorkLine = WHSTmpWorkLine::find(tmpWorkLine.WorkCreateId, tmpWorkLine.LineNum, true);
        tmpWorkLine.InventBatchId = inventDim::find(startInventDim).inventBatchId;

        tmpWorkLine.update();
    
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginTypeBasedOnReferenceType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the origin type based on the reference type.
    /// </summary>
    /// <returns>
    /// Returns the origin type.
    /// </returns>
    [Hookable(false)]
    private WHSOriginType getOriginTypeBasedOnReferenceType()
    {
        InventTestReferenceType inventTestReferenceType = referenceType.referenceType();
        WHSOriginType tmpOriginType;
    
        switch (inventTestReferenceType)
        {
            case InventTestReferenceType::Purch:
                tmpOriginType = WHSOriginType::Purch;
                break;
    
            case InventTestReferenceType::Production:
                tmpOriginType = WHSOriginType::Production;
                break;
    
            default:
                EventHandlerResult eventHandlerResult = EventHandlerResult::newSingleResponse();
                this.getWHSOriginType(inventTestReferenceType, eventHandlerResult);

                if (eventHandlerResult.hasResult())
                {
                    return eventHandlerResult.result();
                }

                throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        return tmpOriginType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWHSOriginType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for getting the WHSOriginType for the specified <c>InventTestReferenceType</c> enum.
    /// </summary>
    /// <param name = "_referenceType">The <c>InventTestReferenceType</c> to get the WHSOriginTyepe for.</param>
    /// <param name = "_result">An <c>EventHandlerResult</c> instance, where subscribers can provide the result.</param>
    delegate void getWHSOriginType(InventTestReferenceType _referenceType, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common _common, WHSWorkCreateId _workCreateId = '')
    {
        inventTestAssociationTable = _common;
    
        workCreateId = _workCreateId ? _workCreateId : NumberSeq::newGetNum(WHSParameters::numRefWHSWorkCreateId()).num();
    
        super(inventTestAssociationTable, workCreateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a new <c>WHSWorkCreateQualityItemSampling</c> class.
    /// </summary>
    /// <param name = "_common">The record to use during initialization.</param>
    /// <param name = "_workCreateId">The Work Create Id.</param>
    /// <returns>An instance of the <c>whsWorkCreateQualityItemSampling</c> class.</returns>
    [Hookable(false)]
    internal static whsWorkCreateQualityItemSampling newFromParms(Common _common, WHSWorkCreateId _workCreateId = '')
    {
        return new WHSWorkCreateQualityItemSampling(_common, _workCreateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateWorkInventTransWithTargetLP</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public boolean parmCreateWorkInventTransWithTargetLP(boolean _createWorkInventTransWithTargetLP = createWorkInventTransWithTargetLP)
    {
        // We always want to reserve at the lp level for Quality In Item Sampling work.
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReferenceType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final internal InventQualityReferenceType parmReferenceType(InventQualityReferenceType _referenceType = referenceType)
    {
        referenceType = _referenceType;
    
        return referenceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRelatedQualityOrderId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final internal InventQualityOrderId parmRelatedQualityOrderId(InventQualityOrderId _qualityOrderId = relatedQualityOrderId)
    {
        relatedQualityOrderId = _qualityOrderId;
    
        return relatedQualityOrderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartInventDim</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final internal InventDimId parmStartInventDim(InventDimId _inventDimId = startInventDim)
    {
        startInventDim = _inventDimId;
    
        return startInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final internal InventQty parmUpdateQty(InventQty _updateQty = updateQty)
    {
        updateQty = _updateQty;
    
        return updateQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkCreateId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public WHSWorkCreateId parmWorkCreateId(WHSWorkCreateId _workCreateId = workCreateId)
    {
        workCreateId = _workCreateId;
    
        return workCreateId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>