<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductVariantsCompanyHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class EcoResProductVariantsCompanyHelper extends EcoResProductVariantsFormHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createProductDimValueRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates product variant dimension values records.
    /// </summary>
    /// <param name="_ecoResDistinctProductVariant">
    /// The <c>EcoResDistinctProductVariant</c> buffer.
    /// </param>
    /// <remarks>
    /// Product variant dimension values records hold active dimensions for the current product variant.
    /// </remarks>
    public void createProductDimValueRecords(EcoResDistinctProductVariant _ecoResDistinctProductVariant)
    {
        int                                 dsIndex;
        int                                 productDimensionAttributeFieldId = fieldNum(EcoResProductVariantDimensionValue, ProductDimensionAttribute);

        int dsCount = formRun.dataSourceCount();

        for (dsIndex = 1; dsIndex <= dsCount; ++dsIndex)
        {
            FormDataSource productVariantDimTableDS = formRun.dataSource(dsIndex);

            if (this.isVariantDimensionValueDatasource(productVariantDimTableDS))
            {
                TableId dimensionTableId = EcoResProductDimensionAttribute::variantDimensionTableId2DimensionTableId(productVariantDimTableDS.table());
                FieldId dimFieldId = EcoResProductDimensionAttribute::dimensionTable2InventDimFieldId(dimensionTableId);

                if (this.productDimensionActive(dimFieldId))
                {
                    EcoResProductVariantDimensionValue productVariantDimensionValue = productVariantDimTableDS.cursor();
                    productVariantDimensionValue.initFromDistinctProductVariant(_ecoResDistinctProductVariant);
                    this.createProductVariantDimensionValue(productVariantDimensionValue);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductVariantDimensionValue</Name>
				<Source><![CDATA[
    protected void createProductVariantDimensionValue(EcoResProductVariantDimensionValue _ecoResProductVariantDimensionValue)
    {
        _ecoResProductVariantDimensionValue.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleFormStateForVariant</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the form control states that are based on the specified distinct product variant.
    /// </summary>
    /// <param name="_distinctProductVariantRecId">
    ///    The <c>EcoResDistinctProductVariantRecId</c> value.
    /// </param>
    public void handleFormStateForVariant(EcoResDistinctProductVariantRecId _distinctProductVariantRecId)
    {
        int                     dsIndex;
        boolean                 enable = !this.isDefaultConfigurationVariant(_distinctProductVariantRecId);

        super(_distinctProductVariantRecId);

        int dsCount = formRun.dataSourceCount();

        if (!this.parmIsRetailKit())
        {
            // find inventDimCombination data source
            for (dsIndex = 1; dsIndex <= dsCount; ++dsIndex)
            {
                FormDataSource inventDimCombinationDS = formRun.dataSource(dsIndex);
                if (inventDimCombinationDS.cursor() is InventDimCombination)
                {
                        inventDimCombinationDS.allowDelete(enable);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parentTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the title for a product master for which a variants form is opened.
    /// </summary>
    /// <returns>
    /// The title of a parent product master record.
    /// </returns>
    public EcoResProductTitle parentTitle()
    {
        return InventTable::findByProduct(this.parmEcoResProductMaster().RecId).title();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EcoResProductVariantsCompanyHelper construct()
    {
        return new EcoResProductVariantsCompanyHelper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromFormRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>EcoResProductVariantsCompanyHelper</c> class and initializes it
    /// with a <c>FormRun</c> object.
    /// </summary>
    /// <param name="_formRun">
    /// Specifies a <c>FormRun</c> instance with which the instance of the
    /// <c>EcoResProductVariantsCompanyHelper</c> class is to be initialized.
    /// </param>
    /// <returns>
    /// A new instance of the <c>EcoResProductVariantsCompanyHelper</c> class.
    /// </returns>
    public static EcoResProductVariantsCompanyHelper newFromFormRun(FormRun _formRun)
    {
        EcoResProductVariantsCompanyHelper productVariantsFormHelper = EcoResProductVariantsCompanyHelper::construct();
        productVariantsFormHelper.parmFormRun(_formRun);
        productVariantsFormHelper.parmEcoResProductMaster(EcoResProductMaster::getProductMasterFromCaller(_formRun.args(), false));
        productVariantsFormHelper.parmIsOpenedForSingleProduct(productVariantsFormHelper.parmEcoResProductMaster().RecId);

        return productVariantsFormHelper;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
