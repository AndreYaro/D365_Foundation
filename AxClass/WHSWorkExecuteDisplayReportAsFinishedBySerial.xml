<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayReportAsFinishedBySerial</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkExecuteDisplayReportAsFinishedBySerial</c> class handles the input coming in from the RF device when the user is RAFing by serial.
/// </summary>
[WHSWorkExecuteMode(WHSWorkExecuteMode::ReportAsFinishedBySerial)]
public class WHSWorkExecuteDisplayReportAsFinishedBySerial extends WHSWorkExecuteDisplay
{
    private const int       SerialEntryStep     = 0;
    private const int       ProdConfirmStep     = 1;
    private const InventQty SerialQty           = 1;
    private const int       IndexOfAllValues    = 2;

    private int                 startInfoLogLine;
    private WHSRFPassthrough    fieldValues = new WHSRFPassthrough(Types::String, Types::String);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        startInfoLogLine = 0;
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    container displayForm(container _con, str _buttonClicked = '')
    {
        container                   ret = conNull();
        container                   con = _con;

        WHSRFPassthrough globalPass = pass;
        pass = WHSRFPassthrough::create(conPeek(_con, IndexOfAllValues));
        pass = this.combineMaps(globalPass, pass);

        if (pass.exists(#UserId))
        {
            userId = pass.lookup(#UserId);
        }

        startInfoLogLine = infologLine();
        switch (step)
        {
            case SerialEntryStep:
                ret = this.performSerialEntryProcessing(con);
                break;

            case ProdConfirmStep:
                ret = this.performProdConfirmProcessing(con);
                break;

            default:
                ret = con;
                break;
        }

        ret = this.addCancelButton(ret, 1, true);
        ret = this.updateModeStepPass(ret, mode, step, pass);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performSerialEntryProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Encapsulates the functionality to process the values when user has entered a serial number on the first screen.
    /// </summary>
    /// <param name = "_con">The container with the UI values filled in by the user.</param>
    /// <returns>The container with the UI values that needs to be returned to the user.</returns>
    private container performSerialEntryProcessing(container _con)
    {
        container ret = conNull();
        container con = _con;

        ret = this.handleWorkCompletedMessage(ret);

        boolean errorOccured = false;
        [con, errorOccured] = this.processData(con);
        if (errorOccured)
        {
            ret = con;
        }
        else
        {
            if (!WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).GenerateLP
                        && pass.exists(#LicensePlateId)
                        && pass.lookup(#LicensePlateId) != '')
            {
                pass.remove(#LicensePlateId);
                fieldValues.insert(#LicensePlateId, '');
            }

            ret = this.buildReportAsFinishedBySerial(con);
            step = ProdConfirmStep;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performProdConfirmProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Encapsulates the functionality to process the values when user has confirmed on the production order details screen.
    /// </summary>
    /// <param name = "_con">The container with the UI values filled in by the user.</param>
    /// <returns>The container with the UI values that needs to be returned to the user.</returns>
    private container performProdConfirmProcessing(container _con)
    {
        container ret;
        container con = _con;
        boolean errorOccured = false;
        [con, errorOccured] = this.processData(con);
        if (errorOccured)
        {
            ret = con;
            return ret;
        }

        if (!pass.exists(#ProdId)
                || pass.lookup(#ProdId) == ''
                || !pass.exists(#ItemId)
                || pass.lookup(#ItemId) == ''
                || !pass.exists(#LicensePlateId)
                || pass.lookup(#LicensePlateId) == '')
        {
            ret = this.buildReportAsFinishedBySerial(con);
            step = ProdConfirmStep;
            return ret;
        }

        if (!fieldValues.empty())
        {
            boolean complete;
            [ret, complete] = this.processFieldValues(con, fieldValues);

            if (complete)
            {
                this.reportAsFinished();
                ret = this.buildReportAsFinishedBySerial(con);
                step = SerialEntryStep;
            }
        }
        else
        {
            ret = con;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleWorkCompletedMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the Work Completed message coming in from a previous iteration.
    /// </summary>
    /// <param name = "_con">Container with controls.</param>
    /// <returns>Updated container with controls.</returns>
    private container handleWorkCompletedMessage(container _con)
    {
        container ret = conNull();
        if (pass.exists(#WorkComplete))
        {
            ret = this.addErrorLabel(ret, "@WAX866", WHSRFColorText::Success);
            pass.remove(#WorkComplete);
        }
        ret += _con;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the pass and field values used later for making decisions.
    /// </summary>
    /// <param name = "_con">The container with the UI controls filled up by values from the user.</param>
    /// <returns>The updated container with all the values, and an indication if there has been an error caused by incomnpatible values.</returns>
    private container processData(container _con)
    {
        container con = _con;

        if (this.hasError(con))
        {
            con = this.deleteControlDataFromContainer(con, #RFError);
        }
        container  tmpFieldValues;
        [con, tmpFieldValues] = WHSRFControlData::processData(con, pass);
        fieldValues = WHSRFPassthrough::create(tmpFieldValues);
        pass = this.combineMaps(pass, fieldValues);

        return [con, this.hasError(con)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildReportAsFinishedBySerial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the fields for the form, based on the inputs passed on from the user.
    /// </summary>
    /// <param name = "_userInput">The container having the user inputs from the previous run.</param>
    /// <returns>A container with all the fields to be shown to the user.</returns>
    private container buildReportAsFinishedBySerial(container _userInput)
    {
        container           ret = conNull();
        boolean             multipleLines = false;

        ret = this.handleWorkCompletedMessage(ret);

        InventSerialId serialId = pass.parmSerialId();
        if (serialId != '')
        {
            ProdId prodId;
            ItemId itemId;
            [prodId, itemId, multipleLines] = this.getDetails(serialId, _userInput);
            WHSLicensePlateId licensePlateId = this.getLicensePlateId(itemId);

            if (multipleLines)
            {
                if (prodId)
                {
                    ret = this.addErrorLabel(ret, strFmt('%1 %2', strFmt("@WAX:ProdDoesNotContainSerial", serialId), "@WAX:EnterOrderId"), WHSRFColorText::Warning);
                    prodId = '';
                }
                else
                {
                    ret = this.addErrorLabel(ret, strFmt('%1 %2', strFmt("@WAX:MultipleProdOrdersWithSerial", serialId), "@WAX:EnterOrderId"), WHSRFColorText::Warning);
                }
                ret += this.createProdDetailsConfirmationControls(prodId, itemId, licensePlateId, true);
            }
            else if (prodId && itemId)
            {
                ret += this.createProdDetailsConfirmationControls(prodId, itemId, licensePlateId, false);
            }
            else
            {
                ret = this.addErrorLabel(ret, strFmt("@WAX:SerialNotValid", serialId), WHSRFColorText::Error);
                ret += this.createSerialEntryControls();
            }
        }
        else
        {
            ret += this.createSerialEntryControls();
        }

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSerialEntryControls</Name>
				<Source><![CDATA[
    private container createSerialEntryControls()
    {
        container ret = conNull();
        ret += [this.buildControl(#RFLabel, enum2Str(WHSWorkCreationProcess::ReportAsFinishedBySerial), "@WAX:EnterSerialForRAF", 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFText, #SerialId, "@SYS477", 1, '', extendedTypeNum(InventSerialId), '', 0)];
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLicensePlateId</Name>
				<Source><![CDATA[
    private WHSLicensePlateId getLicensePlateId(ItemId _itemId)
    {
        WHSLicensePlateId licensePlateId;
        if (_itemId)
        {
            licensePlateId = pass.parmLicensePlateId();
            if (!licensePlateId && WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).GenerateLP)
            {
                licensePlateId = WHSLicensePlate::generateLicensePlateId(_itemId, InventTable::find(_itemId).inventTableModuleInvent().UnitId);
            }
        }

        return licensePlateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProdDetailsConfirmationControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the collection of controls that need to be displayed to the user after the serial number as well as production details have been found to be valid.
    /// </summary>
    /// <param name = "_prodId">The production order number that should be displayed.</param>
    /// <param name = "_itemId">The item number that should be displayed.</param>
    /// <param name = "_licensePlateId">The license plate id that should be displayed.</param>
    /// <param name = "_multipleLines">True if multiple transactions for the same serial number have been found.</param>
    /// <returns>If multiple transactions have been found, the production order becomes an editable field so that the user can confirm which production the serial actually belongs to.</returns>
    private container createProdDetailsConfirmationControls(
        ProdId              _prodId,
        ItemId              _itemId,
        WHSLicensePlateId   _licensePlateId,
        boolean             _multipleLines)
    {
        container ret = conNull();
        ret += [this.buildControl(#RFText, #ProdId, "@WAX725", 1, _prodId, extendedTypeNum(ProdId), '', 0, _multipleLines)];
        ret += [this.buildControl(#RFText, #ItemId, "@WAX1240", 1, _itemid, extendedTypeNum(InventInventItemSearchItem), '', 0, false)];
        ret += [this.buildControl(#RFText, #Qty, "@SYS105177", 1, any2Str(SerialQty), extendedTypeNum(Qty), '', 0, false)];
        ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, _licensePlateId, extendedTypeNum(WHSLicensePlateId), '', 0, true)];
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDetailsBySerial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches the inventory transactions to find production records in the status Ordered having the given serial number.
    /// </summary>
    /// <param name = "_serialId">The serial number to search for.</param>
    /// <returns>A container with the production order number, item number and a flag indicating if multiple entries were found.</returns>
    /// <remarks>Multiple records could be found if there are two production orders created with the same serial number on different items.
    /// In that case production order number and item number are both returned as blanks.</remarks>
    protected container getDetailsBySerial(InventSerialId _serialId)
    {
        ProdId                  prodIdReturn = '';
        ItemId                  itemIdReturn = '';
        boolean                 multipleLines = false;

        InventTrans             inventTrans;
        InventDim               inventDim;
        InventTransOrigin       inventTransOrigin;
        int                     alreadyFound = false;

        while select ReferenceId from inventTransOrigin
            order by inventTransOrigin.ReferenceId
            where inventTransOrigin.ReferenceCategory == InventTransType::Production
            join ItemId from inventTrans
                where inventTrans.inventTransOrigin == inventTransOrigin.RecId
                    && inventTrans.StatusReceipt == StatusReceipt::Ordered
                    && inventTrans.StatusIssue   == StatusIssue::None
            exists join inventDim
                where inventDim.inventDimId == inventTrans.inventDimId
                    && inventDim.inventSerialId == _serialId
        {
            if (alreadyFound)
            {
                multipleLines = true;
                prodIdReturn = '';
                itemIdReturn = '';
                break;
            }
            prodIdReturn = inventTransOrigin.ReferenceId;
            itemIdReturn = inventTrans.Itemid;
            alreadyFound = true;
        }

        return [prodIdReturn, itemIdReturn, multipleLines];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the details of the production, item and if there are multiple lines corresponding to the serial number given.
    /// </summary>
    /// <param name = "_serialId">The serial number to search for.</param>
    /// <param name = "_userInput">The container having the user inputs from the previous run.</param>
    /// <returns>A container with the production order number, item number and a flag indicating if multiple entries were found.</returns>
    private container getDetails(InventSerialId _serialId, container _userInput)
    {
        ProdId   prodIdReturn = pass.parmProdId();
        ItemId   itemIdReturn = '';
        boolean  multipleLines = false;

        if (prodIdReturn != '')
        {
            itemIdReturn = this.getControlDataFromContainer(_userInput, #ItemId);
            if (!itemIdReturn)
            {
                if (this.checkSerialOnProd(prodIdReturn, _serialId))
                {
                    itemIdReturn = ProdTable::find(prodIdReturn).ItemId;
                }
                else
                {
                    // ProdId exists but ItemId does not, this indicates multiple invent lines
                    multipleLines = true;
                }
            }
        }
        else
        {
            [prodIdReturn, itemIdReturn, multipleLines] = this.getDetailsBySerial(_serialId);
        }
        return [prodIdReturn, itemIdReturn, multipleLines];
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSerialOnProd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the passed serial number is actually on an Ordered inventory transaction for the production order.
    /// </summary>
    /// <param name = "_prodId">The production order number in whose transactions the serial number needs to be searched in.</param>
    /// <param name = "_serialId">The serial number to look for.</param>
    /// <returns>true if a serial number was found to be associated with the production order; false otherwise.</returns>
    protected boolean checkSerialOnProd(ProdId _prodId, InventSerialId _serialId)
    {
        InventTrans             inventTrans;
        InventDim               inventDim;
        InventTransOrigin       inventTransOrigin;

        select firstonly RecId from inventTransOrigin
            where inventTransOrigin.ReferenceCategory == InventTransType::Production
                && inventTransOrigin.ReferenceId == _prodId
            exists join inventTrans
                where inventTrans.inventTransOrigin == inventTransOrigin.RecId
                    && inventTrans.StatusReceipt == StatusReceipt::Ordered
                    && inventTrans.StatusIssue   == StatusIssue::None
            exists join inventDim
                where inventDim.inventDimId == inventTrans.inventDimId
                    && inventDim.inventSerialId == _serialId;

        return inventTransOrigin.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportAsFinished</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reports the given serial and production order to finished for the given quantity.
    /// </summary>
    private void reportAsFinished()
    {
        InventDim productionDimensions = ProdTable::find(pass.lookup(#ProdId)).inventDim();

        if (productionDimensions.InventLocationId != pass.lookup(#InventLocationId))
        {
            throw error("@WAX1239");
        }

        WHSWorkBuildId workBuildId = this.createPutWork();

        this.buildLicensePlatesFromPass(workBuildId);

        // cleanup
        pass.insert(#WorkComplete, 1);
        pass.remove(#SerialId);
        pass.remove(#ProdId);
        pass.remove(#ItemId);
        pass.remove(#Qty);
        pass.remove(#UOM);
        pass.remove(#LicensePlateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPutWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the sub routine to report as finished and creates work to put away the produced serial item.
    /// </summary>
    /// <returns>The id of the work that was created.</returns>
    private WHSWorkBuildId createPutWork()
    {
        WHSLicensePlate::createLicensePlate(pass.lookup(#LicensePlateId));
        WHSWorkCreateProdPut workCreateProdPut = this.initializeWHSWorkCreateProdPut();

        return workCreateProdPut.createReportFinished();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeWHSWorkCreateProdPut</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new <c>WHSWorkCreateProdPut</c> object to put away the produced serial item.
    /// </summary>
    /// <returns>An instance of the <c>WhsWorkCreateProdPut</c>.</returns>
    protected WhsWorkCreateProdPut initializeWHSWorkCreateProdPut()
    {
        WHSWorkCreateProdPut workCreateProdPut = new WHSWorkCreateProdPut(ProdTable::find(pass.lookup(#ProdId)));
        workCreateProdPut.parmCreatedBy(userId);
        workCreateProdPut.parmItemId(pass.lookup(#ItemId));
        workCreateProdPut.parmTargetLicensePlateId(WHSLicensePlate::createLicensePlate(pass.lookup(#LicensePlateId)).LicensePlateId);
        workCreateProdPut.parmWorkTemplateCode(WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).WorkTemplateCode);
        workCreateProdPut.parmInventSerialId(pass.lookup(#SerialId));
        workCreateProdPut.parmInventHandlingQty(SerialQty);

        return workCreateProdPut;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLicensePlatesFromPass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an entry into the built license labels and prints it, if specified on the warehouse menu item.
    /// </summary>
    /// <param name = "_workBuildId">The work id for which the license has to be printed.</param>
    private void buildLicensePlatesFromPass(WHSWorkBuildId _workBuildId)
    {
        if (_workBuildId != '' && WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).PrintLabel)
        {
            WHSLicensePlateLabelBuild   labelBuild;
            labelBuild = new WHSLicensePlateLabelBuild(WHSWorkTable::getFirstWorkLineByWorkBuildId(_workBuildId, userId).WorkId,
                                                                           null,
                                                                           pass.lookup(#MenuItem),
                                                                           userId);
            labelBuild.buildLicensePlateLabels();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>