<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankAutomationWorksheetHeaderInformationUtil</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is the util class for calculating bank automation reconciliation worksheet header information.
/// </summary>
internal final static class BankAutomationWorksheetHeaderInformationUtil
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBankMatchedInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount and line numbers for bank matched transactions.
    /// </summary>
    /// <param name = "_bankReconciliationHeader">The record id of bank reconciliation header.</param>
    /// <returns>A <c>BankAutomationWorksheetHeaderInfoObject</c> with the total amount and line numbers for bank matched transactions.</returns>
    internal static BankAutomationWorksheetHeaderInfoObject getBankMatchedInfo(RecId _bankReconciliationHeader)
    {
        BankReconciliationMatching bankReconciliationMatching;
        BankReconciliationMatchingItem bankReconciliationMatchingItem;
        BankReconciliationHistoryDetails historyDetails;
        BankStmtISOReportEntry bankStmtISOReportEntryDebit;
        BankStmtISOReportEntry bankStmtISOReportEntryCredit;

        // Split to debit and credit for better performance
        select RecId from bankReconciliationMatching
            where bankReconciliationMatching.BankReconciliationHeader == _bankReconciliationHeader
            join RecId from bankReconciliationMatchingItem
                where bankReconciliationMatchingItem.BankReconciliationMatching == bankReconciliationMatching.RecId
            join RecId from historyDetails
                where historyDetails.BankReconciliationHeader == _bankReconciliationHeader
                    && historyDetails.BankStmtISOReportEntry == bankReconciliationMatchingItem.BankStmtISOReportEntry
            join sum(Amount), count(RecId) from bankStmtISOReportEntryDebit
                where bankStmtISOReportEntryDebit.RecId == historyDetails.BankStmtISOReportEntry
                    && bankStmtISOReportEntryDebit.AmountCreditDebitIndicator == DebitCredit::Debit;

        select RecId from bankReconciliationMatching
            where bankReconciliationMatching.BankReconciliationHeader == _bankReconciliationHeader
            join RecId from bankReconciliationMatchingItem
                where bankReconciliationMatchingItem.BankReconciliationMatching == bankReconciliationMatching.RecId
            join RecId from historyDetails
                where historyDetails.BankReconciliationHeader == _bankReconciliationHeader
                    && historyDetails.BankStmtISOReportEntry == bankReconciliationMatchingItem.BankStmtISOReportEntry
            join sum(Amount), count(RecId) from bankStmtISOReportEntryCredit
                where bankStmtISOReportEntryCredit.RecId == historyDetails.BankStmtISOReportEntry
                    && bankStmtISOReportEntryCredit.AmountCreditDebitIndicator == DebitCredit::Credit;

        return BankAutomationWorksheetHeaderInfoObject::construct(bankStmtISOReportEntryDebit.Amount - bankStmtISOReportEntryCredit.Amount, bankStmtISOReportEntryDebit.RecId + bankStmtISOReportEntryCredit.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAllInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount and line numbers for bank all transactions.
    /// </summary>
    /// <param name = "_bankReconciliationHeader">The record id of bank reconciliation header.</param>
    /// <returns>A <c>BankAutomationWorksheetHeaderInfoObject</c> with the total amount and line numbers for bank all transactions.</returns>
    internal static BankAutomationWorksheetHeaderInfoObject getBankAllInfo(RecId _bankReconciliationHeader)
    {
        BankReconciliationHistoryDetails historyDetails;
        BankStmtISOReportEntry bankStmtISOReportEntryDebit;
        BankStmtISOReportEntry bankStmtISOReportEntryCredit;

        // Split to debit and credit for better performance
        select RecId from historyDetails
            where historyDetails.BankReconciliationHeader == _bankReconciliationHeader
            join sum(Amount), count(RecId) from bankStmtISOReportEntryDebit
                where bankStmtISOReportEntryDebit.RecId == historyDetails.BankStmtISOReportEntry
                    && bankStmtISOReportEntryDebit.AmountCreditDebitIndicator == DebitCredit::Debit;

        select RecId from historyDetails
            where historyDetails.BankReconciliationHeader == _bankReconciliationHeader
            join sum(Amount), count(RecId) from bankStmtISOReportEntryCredit
                where bankStmtISOReportEntryCredit.RecId == historyDetails.BankStmtISOReportEntry
                    && bankStmtISOReportEntryCredit.AmountCreditDebitIndicator == DebitCredit::Credit;

        return BankAutomationWorksheetHeaderInfoObject::construct(bankStmtISOReportEntryDebit.Amount - bankStmtISOReportEntryCredit.Amount, bankStmtISOReportEntryDebit.RecId + bankStmtISOReportEntryCredit.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyUnpostedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount of company unposted transactions.
    /// </summary>
    /// <param name = "_accountId">The bank account id.</param>
    /// <param name = "_cutOffDate">The cut-off date.</param>
    /// <returns>The total amount of company unposted transactions.</returns>
    internal static AmountCur getCompanyUnpostedAmount(CompanyBankAccountId _accountId, TransDate _cutOffDate)
    {
        // Not consider bank statement, as for new generate voucher func, it should not mark as new but not posted.
        return BankAutomationWorksheetHeaderInformationUtil::getCompanyCheckUnpostedAmount(_accountId, _cutOffDate)
            + BankAutomationWorksheetHeaderInformationUtil::getCompanyDepositCancelUnpostedAmount(_accountId, _cutOffDate)
            + BankAutomationWorksheetHeaderInformationUtil::getCompanyLedgerJournalTransUnpostedAmount(_accountId, _cutOffDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyMatchedInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount, correction amount and line numbers for company matched transactions.
    /// </summary>
    /// <param name = "_bankReconciliationHeader">The record id of bank reconciliation header.</param>
    /// <returns>A <c>BankAutomationWorksheetHeaderInfoObject</c> with the total amount, correction amount and line numbers for company matched transactions.</returns>
    internal static BankAutomationWorksheetHeaderInfoObject getCompanyMatchedInfo(RecId _bankReconciliationHeader)
    {
        List headerInfoObjectList = new List(Types::Class);
        headerInfoObjectList.addEnd(BankAutomationWorksheetHeaderInformationUtil::getCompanyBankAccountTransMatchedInfo(_bankReconciliationHeader));
        headerInfoObjectList.addEnd(BankAutomationWorksheetHeaderInformationUtil::getCompanyCheckMatchedInfo(_bankReconciliationHeader));
        headerInfoObjectList.addEnd(BankAutomationWorksheetHeaderInformationUtil::getCompanyDepositMatchedInfo(_bankReconciliationHeader));
        headerInfoObjectList.addEnd(BankAutomationWorksheetHeaderInformationUtil::getCompanyDepositCancelMatchedInfo(_bankReconciliationHeader));
        headerInfoObjectList.addEnd(BankAutomationWorksheetHeaderInformationUtil::getCompanyLedgerJournalTransMatchedInfo(_bankReconciliationHeader));
        headerInfoObjectList.addEnd(BankAutomationWorksheetHeaderInformationUtil::getCompanyStatementMatchedInfo(_bankReconciliationHeader));
        headerInfoObjectList.addEnd(BankAutomationWorksheetHeaderInformationUtil::getCompanySummarizationMatchedInfo(_bankReconciliationHeader));

        return BankAutomationWorksheetHeaderInfoObject::sumByList(headerInfoObjectList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyAllInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount and line numbers for company all transactions.
    /// </summary>
    /// <param name = "_bankReconciliationHeader">The record id of bank reconciliation header.</param>
    /// <returns>A <c>BankAutomationWorksheetHeaderInfoObject</c> with the total amount and line numbers for company all transactions.</returns>
    internal static BankAutomationWorksheetHeaderInfoObject getCompanyAllInfo(RecId _bankReconciliationHeader)
    {
        List headerInfoObjectList = new List(Types::Class);
        headerInfoObjectList.addEnd(BankAutomationWorksheetHeaderInformationUtil::getCompanyBankAccountTransAllInfo(_bankReconciliationHeader));
        headerInfoObjectList.addEnd(BankAutomationWorksheetHeaderInformationUtil::getCompanyCheckAllInfo(_bankReconciliationHeader));
        headerInfoObjectList.addEnd(BankAutomationWorksheetHeaderInformationUtil::getCompanyDepositAllInfo(_bankReconciliationHeader));
        headerInfoObjectList.addEnd(BankAutomationWorksheetHeaderInformationUtil::getCompanyDepositCancelAllInfo(_bankReconciliationHeader));
        headerInfoObjectList.addEnd(BankAutomationWorksheetHeaderInformationUtil::getCompanyLedgerJournalTransAllInfo(_bankReconciliationHeader));
        headerInfoObjectList.addEnd(BankAutomationWorksheetHeaderInformationUtil::getCompanyStatementAllInfo(_bankReconciliationHeader));
        headerInfoObjectList.addEnd(BankAutomationWorksheetHeaderInformationUtil::getCompanySummarizationAllInfo(_bankReconciliationHeader));
        return BankAutomationWorksheetHeaderInfoObject::sumByList(headerInfoObjectList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyCheckUnpostedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount of company unposted transactions for check.
    /// </summary>
    /// <param name = "_accountId">The bank account id.</param>
    /// <param name = "_cutOffDate">The cut-off date.</param>
    /// <returns>The total amount of company unposted transactions for check.</returns>
    private static AmountCur getCompanyCheckUnpostedAmount(CompanyBankAccountId _accountId, TransDate _cutOffDate)
    {
        // Check doesn't support correction amount
        // Check has negative sign compared with other types
        BankDocumentTable bankDocumentTable;
        BankChequeTable bankChequeTable;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;
        select sum(BankCurrencyAmount) from bankChequeTable
            where bankChequeTable.AccountID == _accountId
                && bankChequeTable.TransDate <= _cutOffDate
            join RecId from bankDocumentTable
                where bankDocumentTable.SourceRelationType == bankChequeTable.TableId
                    && bankDocumentTable.SourceRecId == bankChequeTable.RecId
            join RecId from ledgerJournalTrans
                where ledgerJournalTrans.TableId == bankChequeTable.SourceTableId
                    && ledgerJournalTrans.RecId == bankChequeTable.SourceRecId
            join RecId from ledgerJournalTable
                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                    && ledgerJournalTable.Posted == NoYes::No;
        AmountCur unpostedAmount = -bankChequeTable.BankCurrencyAmount;

        // Exclude unposted PDC that maturityDate > cut-off date as it doesn't show in worksheet
        CustVendPDCRegister custVendPDCRegister;
        BankChequeTable bankChequeTablePDC;
        select sum(BankCurrencyAmount) from bankChequeTablePDC
            where bankChequeTablePDC.AccountID == _accountId
                && bankChequeTablePDC.TransDate <= _cutOffDate
            join RecId from bankDocumentTable
                where bankDocumentTable.SourceRelationType == bankChequeTablePDC.TableId
                    && bankDocumentTable.SourceRecId == bankChequeTablePDC.RecId
            join RecId from ledgerJournalTrans
                where ledgerJournalTrans.TableId == bankChequeTablePDC.SourceTableId
                    && ledgerJournalTrans.RecId == bankChequeTablePDC.SourceRecId
            join RecId from ledgerJournalTable
                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                    && ledgerJournalTable.Posted == NoYes::No
            join RecId from custVendPDCRegister
                where custVendPDCRegister.LedgerJournalTrans == bankChequeTablePDC.SourceRecId
                    && custVendPDCRegister.MaturityDate > _cutOffDate;
        unpostedAmount += bankChequeTablePDC.BankCurrencyAmount;

        unpostedAmount += BankAutomationWorksheetHeaderInformationUtil::getCompanyBridgedCheckUnpostedAmount(_accountId, _cutOffDate);

        return unpostedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyBridgedCheckUnpostedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount of company unposted transactions for bridged check.
    /// </summary>
    /// <param name = "_accountId">The bank account id.</param>
    /// <param name = "_cutOffDate">The cut-off date.</param>
    /// <returns>The total amount of company unposted transactions for bridged check.</returns>
    private static AmountCur getCompanyBridgedCheckUnpostedAmount(CompanyBankAccountId _accountId, TransDate _cutOffDate)
    {
        // Bridged check doesn't support correction amount
        // Check has negative sign compared with other types
        BankBridgingTrans bankBridgingTrans;
        BankChequeTable bridgedBankChequeTable;
        select sum(BankCurrencyAmount) from bridgedBankChequeTable
            where bridgedBankChequeTable.AccountID == _accountId
                && bridgedBankChequeTable.TransDate <= _cutOffDate
            join RecId from bankBridgingTrans
                where bankBridgingTrans.IsCheck == NoYes::Yes
                    && bankBridgingTrans.BridgingStatus == BankBridgingStatus::Bridged
                    && bankBridgingTrans.BankChequeTableRecId == bridgedBankChequeTable.RecId;
        AmountCur unpostedAmount = -bridgedBankChequeTable.BankCurrencyAmount;

        // Exclude bridged PDC that maturityDate > cut-off date as it doesn't show in worksheet
        BankChequeTable bridgedBankChequeTablePDC;
        CustVendPDCRegister custVendPDCRegister;
        select sum(BankCurrencyAmount) from bridgedBankChequeTablePDC
            where bridgedBankChequeTablePDC.AccountID == _accountId
                && bridgedBankChequeTablePDC.TransDate <= _cutOffDate
            join RecId from bankBridgingTrans
                where bankBridgingTrans.IsCheck == NoYes::Yes
                    && bankBridgingTrans.BridgingStatus == BankBridgingStatus::Bridged
                    && bankBridgingTrans.BankChequeTableRecId == bridgedBankChequeTablePDC.RecId
            join RecId from custVendPDCRegister
                where custVendPDCRegister.LedgerJournalTrans == bridgedBankChequeTablePDC.SourceRecId
                    && custVendPDCRegister.MaturityDate > _cutOffDate;
        unpostedAmount += bridgedBankChequeTablePDC.BankCurrencyAmount;

        return unpostedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyDepositCancelUnpostedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount of company unposted transactions for deposit cancel.
    /// </summary>
    /// <param name = "_accountId">The bank account id.</param>
    /// <param name = "_cutOffDate">The cut-off date.</param>
    /// <returns>The total amount of company unposted transactions for deposit cancel.</returns>
    private static AmountCur getCompanyDepositCancelUnpostedAmount(CompanyBankAccountId _accountId, TransDate _cutOffDate)
    {
        // Bank deposit cancel doesn't support correction amount
        BankDeposit bankDeposit;
        BankDocumentTable bankDocumentTable;
        select sum(AmountCur) from bankDeposit
            where bankDeposit.AccountId == _accountId
                && bankDeposit.TransDate <= _cutOffDate
                && bankDeposit.Canceled == NoYes::No
            join RecId from bankDocumentTable
                where bankDocumentTable.SourceRelationType == bankDeposit.TableId
                    && bankDocumentTable.SourceRecId == bankDeposit.RecId;
        return bankDeposit.AmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyLedgerJournalTransUnpostedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount of company unposted transactions for ledger journal trans.
    /// </summary>
    /// <param name = "_accountId">The bank account id.</param>
    /// <param name = "_cutOffDate">The cut-off date.</param>
    /// <returns>The total amount of company unposted transactions for ledger journal trans.</returns>
    private static AmountCur getCompanyLedgerJournalTransUnpostedAmount(CompanyBankAccountId _accountId, TransDate _cutOffDate)
    {
        // Ledger journal trans supports correction amount
        return BankAutomationWorksheetHeaderInformationUtil::getCompanyLedgerJournalTransUnpostedBankCurrencyAmount(_accountId, _cutOffDate)
            + BankAutomationWorksheetHeaderInformationUtil::getCompanyLedgerJournalTransUnpostedCorrectionAmount(_accountId, _cutOffDate)
            + BankAutomationWorksheetHeaderInformationUtil::getCompanyBridgedLedgerJournalTransUnpostedTotalAmount(_accountId, _cutOffDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyLedgerJournalTransUnpostedBankCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total bank currency amount of company unposted transactions for ledger journal trans.
    /// </summary>
    /// <param name = "_accountId">The bank account id.</param>
    /// <param name = "_cutOffDate">The cut-off date.</param>
    /// <returns>The total bank currency amount of company unposted transactions for ledger journal trans.</returns>
    private static AmountCur getCompanyLedgerJournalTransUnpostedBankCurrencyAmount(CompanyBankAccountId _accountId, TransDate _cutOffDate)
    {
        BankDocumentTable bankDocumentTable;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;
        DimensionAttributeValueCombination dimensionAttributeValueCombination;

        // Account type = bank
        select RecId from bankDocumentTable
            join sum(BankCurrencyAmount) from ledgerJournalTrans
                where ledgerJournalTrans.TableId == bankDocumentTable.SourceRelationType
                    && ledgerJournalTrans.RecId == bankDocumentTable.SourceRecId
                    && ledgerJournalTrans.AccountType == LedgerJournalACType::Bank
                    && ledgerJournalTrans.TransDate <= _cutOffDate
            join RecId from ledgerJournalTable
                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                    && ledgerJournalTable.Posted == NoYes::No
            join RecId from dimensionAttributeValueCombination
                where dimensionAttributeValueCombination.RecId == ledgerJournalTrans.LedgerDimension
                    && dimensionAttributeValueCombination.DisplayValue == _accountId;
        AmountCur unpostedBankCurrencyAmount = ledgerJournalTrans.BankCurrencyAmount;

        // Offset account type = bank
        select RecId from bankDocumentTable
            join sum(BankCurrencyAmount) from ledgerJournalTrans
                where ledgerJournalTrans.TableId == bankDocumentTable.SourceRelationType
                    && ledgerJournalTrans.RecId == bankDocumentTable.SourceRecId
                    && ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank
                    && ledgerJournalTrans.TransDate <= _cutOffDate
            join RecId from ledgerJournalTable
                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                    && ledgerJournalTable.Posted == NoYes::No
            join RecId from dimensionAttributeValueCombination
                where dimensionAttributeValueCombination.RecId == ledgerJournalTrans.OffsetLedgerDimension
                    && dimensionAttributeValueCombination.DisplayValue == _accountId;
        unpostedBankCurrencyAmount += ledgerJournalTrans.BankCurrencyAmount;

        return unpostedBankCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyLedgerJournalTransUnpostedCorrectionAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total correction amount of company unposted transactions for ledger journal trans.
    /// </summary>
    /// <param name = "_accountId">The bank account id.</param>
    /// <param name = "_cutOffDate">The cut-off date.</param>
    /// <returns>The total correction amount of company unposted transactions for ledger journal trans.</returns>
    private static AmountCur getCompanyLedgerJournalTransUnpostedCorrectionAmount(CompanyBankAccountId _accountId, TransDate _cutOffDate)
    {
        // Account type = bank
        BankDocumentTable bankDocumentTable;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;
        DimensionAttributeValueCombination dimensionAttributeValueCombination;
        select sum(CorrectionBankCurrencyAmount) from bankDocumentTable
            where bankDocumentTable.IsReconciled == NoYes::No
            join RecId from ledgerJournalTrans
                where ledgerJournalTrans.TableId == bankDocumentTable.SourceRelationType
                    && ledgerJournalTrans.RecId == bankDocumentTable.SourceRecId
                    && ledgerJournalTrans.AccountType == LedgerJournalACType::Bank
                    && ledgerJournalTrans.TransDate <= _cutOffDate
            join RecId from ledgerJournalTable
                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                    && ledgerJournalTable.Posted == NoYes::No
            join RecId from dimensionAttributeValueCombination
                where dimensionAttributeValueCombination.RecId == ledgerJournalTrans.LedgerDimension
                    && dimensionAttributeValueCombination.DisplayValue == _accountId;
        AmountCur correctionAmount = bankDocumentTable.CorrectionBankCurrencyAmount;

        // Offset account type = bank
        select sum(CorrectionBankCurrencyAmount) from bankDocumentTable
            where bankDocumentTable.IsReconciled == NoYes::No
            join RecId from ledgerJournalTrans
                where ledgerJournalTrans.TableId == bankDocumentTable.SourceRelationType
                    && ledgerJournalTrans.RecId == bankDocumentTable.SourceRecId
                    && ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank
                    && ledgerJournalTrans.TransDate <= _cutOffDate
            join RecId from ledgerJournalTable
                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                    && ledgerJournalTable.Posted == NoYes::No
            join RecId from dimensionAttributeValueCombination
                where dimensionAttributeValueCombination.RecId == ledgerJournalTrans.OffsetLedgerDimension
                    && dimensionAttributeValueCombination.DisplayValue == _accountId;
        correctionAmount += bankDocumentTable.CorrectionBankCurrencyAmount;

        return correctionAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyBridgedLedgerJournalTransUnpostedTotalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount of company unposted transactions for bridged ledger journal trans.
    /// </summary>
    /// <param name = "_accountId">The bank account id.</param>
    /// <param name = "_cutOffDate">The cut-off date.</param>
    /// <returns>The total amount of company unposted transactions for bridged ledger journal trans.</returns>
    private static AmountCur getCompanyBridgedLedgerJournalTransUnpostedTotalAmount(CompanyBankAccountId _accountId, TransDate _cutOffDate)
    {
        // Bridged non-check supports correction amount
        LedgerJournalTrans bridgedLedgerJournalTrans;
        BankBridgingTrans bankBridgingTrans;
        BankDocumentTable bankDocumentTable;
        select sum(BankCurrencyAmount) from bridgedLedgerJournalTrans
            where bridgedLedgerJournalTrans.TransDate <= _cutOffDate
            join RecId from bankBridgingTrans
                where bankBridgingTrans.IsCheck == NoYes::No
                    && bankBridgingTrans.BridgingStatus == BankBridgingStatus::Bridged
                    && bankBridgingTrans.AccountID == _accountId
                    && bankBridgingTrans.BridgedLedgerJournalTransRecId == bridgedLedgerJournalTrans.RecId
            join sum(CorrectionBankCurrencyAmount) from bankDocumentTable
                where bankDocumentTable.SourceRelationType == bridgedLedgerJournalTrans.TableId
                    && bankDocumentTable.SourceRecId == bridgedLedgerJournalTrans.RecId;

        return bridgedLedgerJournalTrans.BankCurrencyAmount + bankDocumentTable.CorrectionBankCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyBankAccountTransMatchedInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount, correction amount and line numbers for company matched transactions for bank account trans.
    /// </summary>
    /// <param name = "_bankReconciliationHeader">The record id of bank reconciliation header.</param>
    /// <returns>A <c>BankAutomationWorksheetHeaderInfoObject</c> with the total amount, correction amount and line numbers for company matched transactions for bank account trans.</returns>
    private static BankAutomationWorksheetHeaderInfoObject getCompanyBankAccountTransMatchedInfo(RecId _bankReconciliationHeader)
    {
        // BankAccountTrans supports correction amount
        BankReconciliationMatching bankReconciliationMatching;
        BankReconciliationMatchingItem bankReconciliationMatchingItem;
        BankReconciliationHistoryDetails historyDetails;
        BankDocumentTable bankDocumentTable;
        BankAccountTrans bankAccountTrans;
        select RecId from bankReconciliationMatching
            where bankReconciliationMatching.BankReconciliationHeader == _bankReconciliationHeader
            join RecId from bankReconciliationMatchingItem
                where bankReconciliationMatchingItem.BankReconciliationMatching == bankReconciliationMatching.RecId
            join RecId from historyDetails
                where historyDetails.BankReconciliationHeader == _bankReconciliationHeader
                    && historyDetails.BankDocumentTable == bankReconciliationMatchingItem.BankDocumentTable
            join sum(CorrectionBankCurrencyAmount) from bankDocumentTable
                where bankDocumentTable.RecId == historyDetails.BankDocumentTable
            join sum(AmountCur), count(RecId) from bankAccountTrans
                where bankAccountTrans.TableId == bankDocumentTable.SourceRelationType
                    && bankAccountTrans.RecId == bankDocumentTable.SourceRecId;

        return BankAutomationWorksheetHeaderInfoObject::construct(bankAccountTrans.AmountCur + bankDocumentTable.CorrectionBankCurrencyAmount, bankAccountTrans.RecId, bankDocumentTable.CorrectionBankCurrencyAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyCheckMatchedInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount, correction amount and line numbers for company matched transactions for check.
    /// </summary>
    /// <param name = "_bankReconciliationHeader">The record id of bank reconciliation header.</param>
    /// <returns>A <c>BankAutomationWorksheetHeaderInfoObject</c> with the total amount, correction amount and line numbers for company matched transactions for check.</returns>
    private static BankAutomationWorksheetHeaderInfoObject getCompanyCheckMatchedInfo(RecId _bankReconciliationHeader)
    {
        // BankChequeTable doesn't support correction amount
        // Check amount has negative sign compared with other types
        BankReconciliationMatching bankReconciliationMatching;
        BankReconciliationMatchingItem bankReconciliationMatchingItem;
        BankReconciliationHistoryDetails historyDetails;
        BankDocumentTable bankDocumentTable;
        BankChequeTable bankChequeTable;
        select RecId from bankReconciliationMatching
            where bankReconciliationMatching.BankReconciliationHeader == _bankReconciliationHeader
            join RecId from bankReconciliationMatchingItem
                where bankReconciliationMatchingItem.BankReconciliationMatching == bankReconciliationMatching.RecId
            join RecId from historyDetails
                where historyDetails.BankReconciliationHeader == _bankReconciliationHeader
                    && historyDetails.BankDocumentTable == bankReconciliationMatchingItem.BankDocumentTable
            join RecId from bankDocumentTable
                where bankDocumentTable.RecId == historyDetails.BankDocumentTable
            join count(RecId) from bankChequeTable
                where bankChequeTable.TableId == bankDocumentTable.SourceRelationType
                    && bankChequeTable.RecId == bankDocumentTable.SourceRecId;
        int64 lineCount = bankChequeTable.RecId;

        // Exclude cancelled bank document from bank currency amount calculation.
        select RecId from bankReconciliationMatching
            where bankReconciliationMatching.BankReconciliationHeader == _bankReconciliationHeader
            join RecId from bankReconciliationMatchingItem
                where bankReconciliationMatchingItem.BankReconciliationMatching == bankReconciliationMatching.RecId
            join RecId from historyDetails
                where historyDetails.BankReconciliationHeader == _bankReconciliationHeader
                    && historyDetails.BankDocumentTable == bankReconciliationMatchingItem.BankDocumentTable
            join RecId from bankDocumentTable
                where bankDocumentTable.RecId == historyDetails.BankDocumentTable
                    && bankDocumentTable.IsCancelled == NoYes::No
            join sum(BankCurrencyAmount) from bankChequeTable
                where bankChequeTable.TableId == bankDocumentTable.SourceRelationType
                    && bankChequeTable.RecId == bankDocumentTable.SourceRecId;

        return BankAutomationWorksheetHeaderInfoObject::construct(-bankChequeTable.BankCurrencyAmount, lineCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyDepositMatchedInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount, correction amount and line numbers for company matched transactions for deposit.
    /// </summary>
    /// <param name = "_bankReconciliationHeader">The record id of bank reconciliation header.</param>
    /// <returns>A <c>BankAutomationWorksheetHeaderInfoObject</c> with the total amount, correction amount and line numbers for company matched transactions for deposit.</returns>
    private static BankAutomationWorksheetHeaderInfoObject getCompanyDepositMatchedInfo(RecId _bankReconciliationHeader)
    {
        // Deposit doesn't support correction amount
        BankReconciliationMatching bankReconciliationMatching;
        BankReconciliationMatchingItem bankReconciliationMatchingItem;
        BankReconciliationHistoryDetails historyDetails;
        BankDocumentTable bankDocumentTable;
        BankDepositDocument bankDepositDocument;
        select RecId from bankReconciliationMatching
            where bankReconciliationMatching.BankReconciliationHeader == _bankReconciliationHeader
            join RecId from bankReconciliationMatchingItem
                where bankReconciliationMatchingItem.BankReconciliationMatching == bankReconciliationMatching.RecId
            join RecId from historyDetails
                where historyDetails.BankReconciliationHeader == _bankReconciliationHeader
                    && historyDetails.BankDocumentTable == bankReconciliationMatchingItem.BankDocumentTable
            join RecId from bankDocumentTable
                where bankDocumentTable.RecId == historyDetails.BankDocumentTable
            join sum(BankCurrencyAmount), count(RecId) from bankDepositDocument
                where bankDepositDocument.TableId == bankDocumentTable.SourceRelationType
                    && bankDepositDocument.RecId == bankDocumentTable.SourceRecId;

        return BankAutomationWorksheetHeaderInfoObject::construct(bankDepositDocument.BankCurrencyAmount, bankDepositDocument.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyDepositCancelMatchedInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount, correction amount and line numbers for company matched transactions for deposit cancel.
    /// </summary>
    /// <param name = "_bankReconciliationHeader">The record id of bank reconciliation header.</param>
    /// <returns>A <c>BankAutomationWorksheetHeaderInfoObject</c> with the total amount, correction amount and line numbers for company matched transactions for deposit cancel.</returns>
    private static BankAutomationWorksheetHeaderInfoObject getCompanyDepositCancelMatchedInfo(RecId _bankReconciliationHeader)
    {
        // Deposit cancel doesn't support correction amount
        BankReconciliationMatching bankReconciliationMatching;
        BankReconciliationMatchingItem bankReconciliationMatchingItem;
        BankReconciliationHistoryDetails historyDetails;
        BankDocumentTable bankDocumentTable;
        BankDeposit bankDeposit;
        select RecId from bankReconciliationMatching
            where bankReconciliationMatching.BankReconciliationHeader == _bankReconciliationHeader
            join RecId from bankReconciliationMatchingItem
                where bankReconciliationMatchingItem.BankReconciliationMatching == bankReconciliationMatching.RecId
            join RecId from historyDetails
                where historyDetails.BankReconciliationHeader == _bankReconciliationHeader
                    && historyDetails.BankDocumentTable == bankReconciliationMatchingItem.BankDocumentTable
            join RecId from bankDocumentTable
                where bankDocumentTable.RecId == historyDetails.BankDocumentTable
            join sum(AmountCur), count(RecId) from bankDeposit
                where bankDeposit.TableId == bankDocumentTable.SourceRelationType
                    && bankDeposit.RecId == bankDocumentTable.SourceRecId;

        return BankAutomationWorksheetHeaderInfoObject::construct(bankDeposit.AmountCur, bankDeposit.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyLedgerJournalTransMatchedInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount, correction amount and line numbers for company matched transactions for ledger journal trans.
    /// </summary>
    /// <param name = "_bankReconciliationHeader">The record id of bank reconciliation header.</param>
    /// <returns>A <c>BankAutomationWorksheetHeaderInfoObject</c> with the total amount, correction amount and line numbers for company matched transactions for ledger journal trans.</returns>
    private static BankAutomationWorksheetHeaderInfoObject getCompanyLedgerJournalTransMatchedInfo(RecId _bankReconciliationHeader)
    {
        BankReconciliationMatching bankReconciliationMatching;
        BankReconciliationMatchingItem bankReconciliationMatchingItem;
        BankReconciliationHistoryDetails historyDetails;
        BankDocumentTable bankDocumentTable;
        LedgerJournalTrans ledgerJournalTrans;
        select RecId from bankReconciliationMatching
            where bankReconciliationMatching.BankReconciliationHeader == _bankReconciliationHeader
            join RecId from bankReconciliationMatchingItem
                where bankReconciliationMatchingItem.BankReconciliationMatching == bankReconciliationMatching.RecId
            join RecId from historyDetails
                where historyDetails.BankReconciliationHeader == _bankReconciliationHeader
                    && historyDetails.BankDocumentTable == bankReconciliationMatchingItem.BankDocumentTable
            join RecId from bankDocumentTable
                where bankDocumentTable.RecId == historyDetails.BankDocumentTable
            join count(RecId) from ledgerJournalTrans
                where ledgerJournalTrans.TableId == bankDocumentTable.SourceRelationType
                    && ledgerJournalTrans.RecId == bankDocumentTable.SourceRecId;
        int64 companyMatchedLines = ledgerJournalTrans.RecId;

        // Exclude cancelled bank document from bank currency amount calculation.
        select RecId from bankReconciliationMatching
            where bankReconciliationMatching.BankReconciliationHeader == _bankReconciliationHeader
            join RecId from bankReconciliationMatchingItem
                where bankReconciliationMatchingItem.BankReconciliationMatching == bankReconciliationMatching.RecId
            join RecId from historyDetails
                where historyDetails.BankReconciliationHeader == _bankReconciliationHeader
                    && historyDetails.BankDocumentTable == bankReconciliationMatchingItem.BankDocumentTable
            join RecId from bankDocumentTable
                where bankDocumentTable.RecId == historyDetails.BankDocumentTable
                    && bankDocumentTable.IsCancelled == NoYes::No
            join sum(BankCurrencyAmount) from ledgerJournalTrans
                where ledgerJournalTrans.TableId == bankDocumentTable.SourceRelationType
                    && ledgerJournalTrans.RecId == bankDocumentTable.SourceRecId;
        AmountCur companyMatchedAmount = ledgerJournalTrans.BankCurrencyAmount;

        // Calculate correction amount for posted ledgerJournalTrans
        LedgerJournalTable ledgerJournalTable;
        select RecId from bankReconciliationMatching
            where bankReconciliationMatching.BankReconciliationHeader == _bankReconciliationHeader
            join RecId from bankReconciliationMatchingItem
                where bankReconciliationMatchingItem.BankReconciliationMatching == bankReconciliationMatching.RecId
            join RecId from historyDetails
                where historyDetails.BankReconciliationHeader == _bankReconciliationHeader
                    && historyDetails.BankDocumentTable == bankReconciliationMatchingItem.BankDocumentTable
            join sum(CorrectionBankCurrencyAmount) from bankDocumentTable
                where bankDocumentTable.RecId == historyDetails.BankDocumentTable
            join RecId from ledgerJournalTrans
                where ledgerJournalTrans.TableId == bankDocumentTable.SourceRelationType
                    && ledgerJournalTrans.RecId == bankDocumentTable.SourceRecId
            join RecId from ledgerJournalTable
                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                    && ledgerJournalTable.Posted == NoYes::Yes;
        companyMatchedAmount += bankDocumentTable.CorrectionBankCurrencyAmount;

        return BankAutomationWorksheetHeaderInfoObject::construct(companyMatchedAmount, companyMatchedLines, bankDocumentTable.CorrectionBankCurrencyAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyStatementMatchedInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount, correction amount and line numbers for company matched transactions for statement.
    /// </summary>
    /// <param name = "_bankReconciliationHeader">The record id of bank reconciliation header.</param>
    /// <returns>A <c>BankAutomationWorksheetHeaderInfoObject</c> with the total amount, correction amount and line numbers for company matched transactions for statement.</returns>
    private static BankAutomationWorksheetHeaderInfoObject getCompanyStatementMatchedInfo(RecId _bankReconciliationHeader)
    {
        // Bank statement new document doesn't support correction amount
        // Split to debit and credit for better performance
        BankReconciliationHistoryDetails historyDetails;
        BankStmtISOReportEntry bankStmtISOReportEntryDebit;
        BankStmtISOReportEntry bankStmtISOReportEntryCredit;
        select RecId from historyDetails
            where historyDetails.BankReconciliationHeader == _bankReconciliationHeader
            join sum(Amount), count(RecId) from bankStmtISOReportEntryDebit
                where bankStmtISOReportEntryDebit.IsNewBankDocument == NoYes::Yes
                    && bankStmtISOReportEntryDebit.RecId == historyDetails.BankStmtISOReportEntry
                    && bankStmtISOReportEntryDebit.AmountCreditDebitIndicator == DebitCredit::Debit;

        select RecId from historyDetails
            where historyDetails.BankReconciliationHeader == _bankReconciliationHeader
            join sum(Amount), count(RecId) from bankStmtISOReportEntryCredit
                where bankStmtISOReportEntryCredit.IsNewBankDocument == NoYes::Yes
                    && bankStmtISOReportEntryCredit.RecId == historyDetails.BankStmtISOReportEntry
                    && bankStmtISOReportEntryCredit.AmountCreditDebitIndicator == DebitCredit::Credit;

        return BankAutomationWorksheetHeaderInfoObject::construct(bankStmtISOReportEntryDebit.Amount - bankStmtISOReportEntryCredit.Amount, bankStmtISOReportEntryDebit.RecId + bankStmtISOReportEntryCredit.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanySummarizationMatchedInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount, correction amount and line numbers for company matched transactions for summarization trans.
    /// </summary>
    /// <param name = "_bankReconciliationHeader">The record id of bank reconciliation header.</param>
    /// <returns>A <c>BankAutomationWorksheetHeaderInfoObject</c> with the total amount, correction amount and line numbers for company matched transactions for summarization trans.</returns>
    private static BankAutomationWorksheetHeaderInfoObject getCompanySummarizationMatchedInfo(RecId _bankReconciliationHeader)
    {
        // BankTransSummarizationDocument doesn't support correction amount
        BankReconciliationMatching bankReconciliationMatching;
        BankReconciliationMatchingItem bankReconciliationMatchingItem;
        BankReconciliationHistoryDetails historyDetails;
        BankDocumentTable bankDocumentTable;
        BankTransSummarizationDocument bankTransSummarizationDocument;
        select RecId from bankReconciliationMatching
            where bankReconciliationMatching.BankReconciliationHeader == _bankReconciliationHeader
            join RecId from bankReconciliationMatchingItem
                where bankReconciliationMatchingItem.BankReconciliationMatching == bankReconciliationMatching.RecId
            join RecId from historyDetails
                where historyDetails.BankReconciliationHeader == _bankReconciliationHeader
                    && historyDetails.BankDocumentTable == bankReconciliationMatchingItem.BankDocumentTable
            join RecId from bankDocumentTable
                where bankDocumentTable.RecId == historyDetails.BankDocumentTable
            join sum(BankAmountCur), count(RecId) from bankTransSummarizationDocument
                where bankTransSummarizationDocument.TableId == bankDocumentTable.SourceRelationType
                    && bankTransSummarizationDocument.RecId == bankDocumentTable.SourceRecId;

        return BankAutomationWorksheetHeaderInfoObject::construct(bankTransSummarizationDocument.BankAmountCur, bankTransSummarizationDocument.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyBankAccountTransAllInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount and line numbers for company all transactions for bank account trans.
    /// </summary>
    /// <param name = "_bankReconciliationHeader">The record id of bank reconciliation header.</param>
    /// <returns>A <c>BankAutomationWorksheetHeaderInfoObject</c> with the total amount and line numbers for company all transactions for bank account trans.</returns>
    private static BankAutomationWorksheetHeaderInfoObject getCompanyBankAccountTransAllInfo(RecId _bankReconciliationHeader)
    {
        // BankAccountTrans supports correction amount
        BankReconciliationHistoryDetails historyDetails;
        BankDocumentTable bankDocumentTable;
        BankAccountTrans bankAccountTrans;
        select RecId from historyDetails
            where historyDetails.BankReconciliationHeader == _bankReconciliationHeader
            join sum(CorrectionBankCurrencyAmount) from bankDocumentTable
                where bankDocumentTable.RecId == historyDetails.BankDocumentTable
            join sum(AmountCur), count(RecId) from bankAccountTrans
                where bankAccountTrans.TableId == bankDocumentTable.SourceRelationType
                    && bankAccountTrans.RecId == bankDocumentTable.SourceRecId;

        return BankAutomationWorksheetHeaderInfoObject::construct(bankAccountTrans.AmountCur + bankDocumentTable.CorrectionBankCurrencyAmount, bankAccountTrans.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyCheckAllInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount and line numbers for company all transactions for check.
    /// </summary>
    /// <param name = "_bankReconciliationHeader">The record id of bank reconciliation header.</param>
    /// <returns>A <c>BankAutomationWorksheetHeaderInfoObject</c> with the total amount and line numbers for company all transactions for check.</returns>
    private static BankAutomationWorksheetHeaderInfoObject getCompanyCheckAllInfo(RecId _bankReconciliationHeader)
    {
        // BankChequeTable doesn't support correction amount
        // Check amount has negative sign compared with other types
        BankReconciliationHistoryDetails historyDetails;
        BankDocumentTable bankDocumentTable;
        BankChequeTable bankChequeTable;
        select RecId from historyDetails
            where historyDetails.BankReconciliationHeader == _bankReconciliationHeader
            join RecId from bankDocumentTable
                where bankDocumentTable.RecId == historyDetails.BankDocumentTable
            join count(RecId) from bankChequeTable
                where bankChequeTable.TableId == bankDocumentTable.SourceRelationType
                    && bankChequeTable.RecId == bankDocumentTable.SourceRecId;
        int64 lineCount = bankChequeTable.RecId;

        // Exclude cancelled bank document from bank currency amount calculation.
        select RecId from historyDetails
            where historyDetails.BankReconciliationHeader == _bankReconciliationHeader
            join RecId from bankDocumentTable
                where bankDocumentTable.RecId == historyDetails.BankDocumentTable
                    && bankDocumentTable.IsCancelled == NoYes::No
            join sum(BankCurrencyAmount) from bankChequeTable
                where bankChequeTable.TableId == bankDocumentTable.SourceRelationType
                    && bankChequeTable.RecId == bankDocumentTable.SourceRecId;

        return BankAutomationWorksheetHeaderInfoObject::construct(-bankChequeTable.BankCurrencyAmount, lineCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyDepositAllInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount and line numbers for company all transactions for deposit.
    /// </summary>
    /// <param name = "_bankReconciliationHeader">The record id of bank reconciliation header.</param>
    /// <returns>A <c>BankAutomationWorksheetHeaderInfoObject</c> with the total amount and line numbers for company all transactions for deposit.</returns>
    private static BankAutomationWorksheetHeaderInfoObject getCompanyDepositAllInfo(RecId _bankReconciliationHeader)
    {
        // Deposit doesn't support correction amount
        BankReconciliationHistoryDetails historyDetails;
        BankDocumentTable bankDocumentTable;
        BankDepositDocument bankDepositDocument;
        select RecId from historyDetails
            where historyDetails.BankReconciliationHeader == _bankReconciliationHeader
            join RecId from bankDocumentTable
                where bankDocumentTable.RecId == historyDetails.BankDocumentTable
            join sum(BankCurrencyAmount), count(RecId) from bankDepositDocument
                where bankDepositDocument.TableId == bankDocumentTable.SourceRelationType
                    && bankDepositDocument.RecId == bankDocumentTable.SourceRecId;

        return BankAutomationWorksheetHeaderInfoObject::construct(bankDepositDocument.BankCurrencyAmount, bankDepositDocument.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyDepositCancelAllInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount and line numbers for company all transactions for deposit cancel.
    /// </summary>
    /// <param name = "_bankReconciliationHeader">The record id of bank reconciliation header.</param>
    /// <returns>A <c>BankAutomationWorksheetHeaderInfoObject</c> with the total amount and line numbers for company all transactions for deposit cancel.</returns>
    private static BankAutomationWorksheetHeaderInfoObject getCompanyDepositCancelAllInfo(RecId _bankReconciliationHeader)
    {
        // Deposit cancel doesn't support correction amount
        BankReconciliationHistoryDetails historyDetails;
        BankDocumentTable bankDocumentTable;
        BankDeposit bankDeposit;
        select RecId from historyDetails
            where historyDetails.BankReconciliationHeader == _bankReconciliationHeader
            join RecId from bankDocumentTable
                where bankDocumentTable.RecId == historyDetails.BankDocumentTable
            join sum(AmountCur), count(RecId) from bankDeposit
                where bankDeposit.TableId == bankDocumentTable.SourceRelationType
                    && bankDeposit.RecId == bankDocumentTable.SourceRecId;

        return BankAutomationWorksheetHeaderInfoObject::construct(bankDeposit.AmountCur, bankDeposit.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyLedgerJournalTransAllInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount and line numbers for company all transactions for ledger journal trans.
    /// </summary>
    /// <param name = "_bankReconciliationHeader">The record id of bank reconciliation header.</param>
    /// <returns>A <c>BankAutomationWorksheetHeaderInfoObject</c> with the total amount and line numbers for company all transactions for ledger journal trans.</returns>
    private static BankAutomationWorksheetHeaderInfoObject getCompanyLedgerJournalTransAllInfo(RecId _bankReconciliationHeader)
    {
        BankReconciliationHistoryDetails historyDetails;
        BankDocumentTable bankDocumentTable;
        LedgerJournalTrans ledgerJournalTrans;
        select RecId from historyDetails
            where historyDetails.BankReconciliationHeader == _bankReconciliationHeader
            join RecId from bankDocumentTable
                where bankDocumentTable.RecId == historyDetails.BankDocumentTable
            join count(RecId) from ledgerJournalTrans
                where ledgerJournalTrans.TableId == bankDocumentTable.SourceRelationType
                    && ledgerJournalTrans.RecId == bankDocumentTable.SourceRecId;
        int64 companyAllLines = ledgerJournalTrans.RecId;

        // Exclude cancelled bank document from bank currency amount calculation.
        select RecId from historyDetails
            where historyDetails.BankReconciliationHeader == _bankReconciliationHeader
            join RecId from bankDocumentTable
                where bankDocumentTable.RecId == historyDetails.BankDocumentTable
                    && bankDocumentTable.IsCancelled == NoYes::No
            join sum(BankCurrencyAmount) from ledgerJournalTrans
                where ledgerJournalTrans.TableId == bankDocumentTable.SourceRelationType
                    && ledgerJournalTrans.RecId == bankDocumentTable.SourceRecId;
        AmountCur companyAllAmount = ledgerJournalTrans.BankCurrencyAmount;

        // Add correction amount for posted ledgerJournalTrans
        LedgerJournalTable ledgerJournalTable;
        select RecId from historyDetails
            where historyDetails.BankReconciliationHeader == _bankReconciliationHeader
            join sum(CorrectionBankCurrencyAmount) from bankDocumentTable
                where bankDocumentTable.RecId == historyDetails.BankDocumentTable
            join RecId from ledgerJournalTrans
                where ledgerJournalTrans.TableId == bankDocumentTable.SourceRelationType
                    && ledgerJournalTrans.RecId == bankDocumentTable.SourceRecId
            join RecId from ledgerJournalTable
                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                    && ledgerJournalTable.Posted == NoYes::Yes;
        companyAllAmount += bankDocumentTable.CorrectionBankCurrencyAmount;

        return BankAutomationWorksheetHeaderInfoObject::construct(companyAllAmount, companyAllLines);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyStatementAllInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount and line numbers for company all transactions for statement.
    /// </summary>
    /// <param name = "_bankReconciliationHeader">The record id of bank reconciliation header.</param>
    /// <returns>A <c>BankAutomationWorksheetHeaderInfoObject</c> with the total amount and line numbers for company all transactions for statement.</returns>
    private static BankAutomationWorksheetHeaderInfoObject getCompanyStatementAllInfo(RecId _bankReconciliationHeader)
    {
        // Bank statement new document doesn't support correction amount
        BankReconciliationHistoryDetails historyDetails;
        BankStmtISOReportEntry bankStmtISOReportEntryDebit;
        BankStmtISOReportEntry bankStmtISOReportEntryCredit;
        select RecId from historyDetails
            where historyDetails.BankReconciliationHeader == _bankReconciliationHeader
            join sum(Amount), count(RecId) from bankStmtISOReportEntryDebit
                where bankStmtISOReportEntryDebit.IsNewBankDocument == NoYes::Yes
                    && bankStmtISOReportEntryDebit.RecId == historyDetails.BankStmtISOReportEntry
                    && bankStmtISOReportEntryDebit.AmountCreditDebitIndicator == DebitCredit::Debit;

        select RecId from historyDetails
            where historyDetails.BankReconciliationHeader == _bankReconciliationHeader
            join sum(Amount), count(RecId) from bankStmtISOReportEntryCredit
                where bankStmtISOReportEntryCredit.IsNewBankDocument == NoYes::Yes
                    && bankStmtISOReportEntryCredit.RecId == historyDetails.BankStmtISOReportEntry
                    && bankStmtISOReportEntryCredit.AmountCreditDebitIndicator == DebitCredit::Credit;

        return BankAutomationWorksheetHeaderInfoObject::construct(bankStmtISOReportEntryDebit.Amount - bankStmtISOReportEntryCredit.Amount, bankStmtISOReportEntryDebit.RecId + bankStmtISOReportEntryCredit.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanySummarizationAllInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount and line numbers for company all transactions for summarization trans.
    /// </summary>
    /// <param name = "_bankReconciliationHeader">The record id of bank reconciliation header.</param>
    /// <returns>A <c>BankAutomationWorksheetHeaderInfoObject</c> with the total amount and line numbers for company all transactions for summarization trans.</returns>
    private static BankAutomationWorksheetHeaderInfoObject getCompanySummarizationAllInfo(RecId _bankReconciliationHeader)
    {
        // BankTransSummarizationDocument doesn't support correction amount
        BankReconciliationHistoryDetails historyDetails;
        BankDocumentTable bankDocumentTable;
        BankTransSummarizationDocument bankTransSummarizationDocument;
        select RecId from historyDetails
            where historyDetails.BankReconciliationHeader == _bankReconciliationHeader
            join RecId from bankDocumentTable
                where bankDocumentTable.RecId == historyDetails.BankDocumentTable
            join sum(BankAmountCur), count(RecId) from bankTransSummarizationDocument
                where bankTransSummarizationDocument.TableId == bankDocumentTable.SourceRelationType
                    && bankTransSummarizationDocument.RecId == bankDocumentTable.SourceRecId;

        return BankAutomationWorksheetHeaderInfoObject::construct(bankTransSummarizationDocument.BankAmountCur, bankTransSummarizationDocument.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyTotalUnmatchedAmountAndLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount and line numbers for company unmatched lines.
    /// </summary>
    /// <param name = "_documentOpen">The document temporary table.</param>
    /// <returns>A <c>BankAutomationWorksheetHeaderInfoObject</c> with the total amount and line numbers for company unmatched lines.</returns>
    internal static BankAutomationWorksheetHeaderInfoObject getCompanyTotalUnmatchedAmountAndLines(BankReconciliationDocumentOpenTmp _documentOpen)
    {
        BankReconciliationDocumentOpenTmp documentOpenLocal;

        documentOpenLocal.linkPhysicalTableInstance(_documentOpen);

        select count(RecId) from documentOpenLocal
            where documentOpenLocal.IsMatched == NoYes::No;
        int64 lineCount = documentOpenLocal.RecId;

        // Exclude cancelled bank document from bank currency amount calculation.
        select sum(BankCurrencyAmount) from documentOpenLocal
            where documentOpenLocal.IsMatched == NoYes::No
                && documentOpenLocal.Cancelled == NoYes::No;

        return BankAutomationWorksheetHeaderInfoObject::construct(documentOpenLocal.BankCurrencyAmount, lineCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyTotalMatchedAmountAndLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount and line numbers for company matched lines.
    /// </summary>
    /// <param name = "_documentOpen">The document temporary table.</param>
    /// <returns>A <c>BankAutomationWorksheetHeaderInfoObject</c> with the total amount and line numbers for company matched lines.</returns>
    internal static BankAutomationWorksheetHeaderInfoObject getCompanyTotalMatchedAmountAndLines(BankReconciliationDocumentOpenTmp _documentOpen)
    {
        // Matched amount = bank currency amount + correction bank currency amount
        BankReconciliationDocumentOpenTmp documentOpenLocal;

        documentOpenLocal.linkPhysicalTableInstance(_documentOpen);

        select count(RecId) from documentOpenLocal
            where documentOpenLocal.IsMatched == NoYes::Yes;
        int64 lineCount = documentOpenLocal.RecId;

        // Exclude cancelled bank document from bank currency amount calculation.
        select sum(BankCurrencyAmount), sum(CorrectionBankCurrencyAmount) from documentOpenLocal
            where documentOpenLocal.IsMatched == NoYes::Yes
                && documentOpenLocal.Cancelled == NoYes::No;

        return BankAutomationWorksheetHeaderInfoObject::construct(documentOpenLocal.BankCurrencyAmount + documentOpenLocal.CorrectionBankCurrencyAmount, lineCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyTotalPostedCorrectionAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the company total posted (BankAccountTrans generated) correction amount.
    /// </summary>
    /// <param name = "_documentOpen">The document temporary table.</param>
    /// <returns>The company total posted correction amount.</returns>
    internal static AmountCur getCompanyTotalPostedCorrectionAmount(BankReconciliationDocumentOpenTmp _documentOpen)
    {
        BankReconciliationDocumentOpenTmp documentOpenLocal;

        documentOpenLocal.linkPhysicalTableInstance(_documentOpen);

        select sum(CorrectionBankCurrencyAmount) from documentOpenLocal
            where documentOpenLocal.Posted == NoYes::Yes
                && documentOpenLocal.DocumentType != BankDocumentBookType::BankClearing;
        AmountCur correctionAmount = documentOpenLocal.CorrectionBankCurrencyAmount;

        // For bank clearing, BankAccountTrans is generated when its status is cleared.
        BankBridgingTrans bankBridgingTrans;
        LedgerJournalTrans ledgerJournalTransBridged;
        BankDocumentTable bankDocumentTable;
        select sum(CorrectionBankCurrencyAmount) from documentOpenLocal
            where documentOpenLocal.DocumentType == BankDocumentBookType::BankClearing
            join RecId from bankDocumentTable
                where bankDocumentTable.RecId == documentOpenLocal.BankDocumentTableView
                    && bankDocumentTable.SourceRelationType == tableNum(LedgerJournalTrans)
            join RecId from ledgerJournalTransBridged
                where ledgerJournalTransBridged.RecId == bankDocumentTable.SourceRecId
            join RecId from bankBridgingTrans
                where bankBridgingTrans.BridgedLedgerJournalTransRecId == ledgerJournalTransBridged.RecId
                    && bankBridgingTrans.BridgingStatus == BankBridgingStatus::Cleared;
        correctionAmount += documentOpenLocal.CorrectionBankCurrencyAmount;

        return correctionAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalGenerateVoucherAmountAndLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount and line numbers for generate voucher lines.
    /// </summary>
    /// <param name = "_statementOpen">The statement temporary table.</param>
    /// <returns>A <c>BankAutomationWorksheetHeaderInfoObject</c> with the total amount and line numbers for generate voucher lines.</returns>
    internal static BankAutomationWorksheetHeaderInfoObject getTotalGenerateVoucherAmountAndLines(BankReconciliationStatementOpenTmp _statementOpen)
    {
        BankReconciliationStatementOpenTmp statementOpenLocal;

        statementOpenLocal.linkPhysicalTableInstance(_statementOpen);

        select sum(BankCurrencyAmount), count(RecId) from statementOpenLocal
            where statementOpenLocal.IsMatched == NoYes::Yes
                && statementOpenLocal.IsNewBankDocument == NoYes::Yes;

        return BankAutomationWorksheetHeaderInfoObject::construct(statementOpenLocal.BankCurrencyAmount, statementOpenLocal.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankUnmatchedAmountAndLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount and line numbers for bank unmatched lines.
    /// </summary>
    /// <param name = "_statementOpen">The statement temporary table.</param>
    /// <returns>A <c>BankAutomationWorksheetHeaderInfoObject</c> with the total amount and line numbers for bank unmatched lines.</returns>
    internal static BankAutomationWorksheetHeaderInfoObject getBankUnmatchedAmountAndLines(BankReconciliationStatementOpenTmp _statementOpen)
    {
        BankReconciliationStatementOpenTmp statementOpenLocal;

        statementOpenLocal.linkPhysicalTableInstance(_statementOpen);

        select sum(BankCurrencyAmount), count(RecId) from statementOpenLocal
            where statementOpenLocal.IsMatched == NoYes::No;

        return BankAutomationWorksheetHeaderInfoObject::construct(statementOpenLocal.BankCurrencyAmount, statementOpenLocal.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankMatchedAmountAndLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount and line numbers for bank matched lines.
    /// </summary>
    /// <param name = "_statementOpen">The statement temporary table.</param>
    /// <returns>A <c>BankAutomationWorksheetHeaderInfoObject</c> with the total amount and line numbers for bank matched lines.</returns>
    internal static BankAutomationWorksheetHeaderInfoObject getBankMatchedAmountAndLines(BankReconciliationStatementOpenTmp _statementOpen)
    {
        BankReconciliationStatementOpenTmp statementOpenLocal;

        statementOpenLocal.linkPhysicalTableInstance(_statementOpen);

        select sum(BankCurrencyAmount), count(RecId)  from statementOpenLocal
            where statementOpenLocal.IsMatched == NoYes::Yes;

        return BankAutomationWorksheetHeaderInfoObject::construct(statementOpenLocal.BankCurrencyAmount, statementOpenLocal.RecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>