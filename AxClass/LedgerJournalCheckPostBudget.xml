<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalCheckPostBudget</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class for the <c>LedgerJournalCheckPost</c> class.
/// </summary>
public class LedgerJournalCheckPostBudget
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addBudgetCheckVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a <c>LedgerVoucherObject</c> class instance for a journal line voucher to journal line voucher
    ///    and <c>LedgerVoucherObject</c> class instances mappings that will be used to check the budget.
    /// </summary>
    /// <param name="_caller">
    ///    The <c>LedgerJournalCheckPost</c> caller.
    /// </param>
    /// <param name="budgetCheckVouchers">
    ///    The <c>Voucher</c> value for the journal line.
    /// </param>
    /// <param name="_ledgerVoucherObject">
    ///    The <c>LedgerVoucherObject</c> object.
    /// </param>
    /// <param name="_isIntercompanyVoucher">
    ///    Indicates whether the <c>LedgerVoucherObject</c> is an intercompany voucher.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The <c>BudgetSource</c> record is a duplicate for the journal line voucher.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The <c>BudgetSource</c> record to save was not found.
    /// </exception>
    public static void addBudgetCheckVoucher(LedgerJournalCheckPost _caller, Voucher _journalLineVoucherNumber, LedgerVoucherObject _ledgerVoucherObject, boolean _isIntercompanyVoucher)
    {
        LedgerJournalTable ledgerJournalTable = _caller.parmLedgerJournalTable();
        Map budgetControlGeneralJournalEntries = _caller.parmbudgetControlGeneralJournalEntries();
        Map budgetCheckVouchers = _caller.parmBudgetCheckVouchers();

        if (_caller.parmIsBudgetControlSourceIntegrationSupported())
        {
            BudgetControlGeneralJournalEntry budgetControlGeneralJournalEntry;
            Set ledgerVoucherObjectsForVoucherNumber;

            Debug::assert(_journalLineVoucherNumber != '');
            Debug::assert(_ledgerVoucherObject != null);

            if (_isIntercompanyVoucher)
            {
                if (budgetControlGeneralJournalEntries.exists(_journalLineVoucherNumber))
                {
                    budgetControlGeneralJournalEntry = budgetControlGeneralJournalEntries.lookup(_journalLineVoucherNumber) as BudgetControlGeneralJournalEntry;
                }
                else
                {
                    // InterCompany voucher details, created during posting time are added as budget check details for the journal line voucher.
                    // BudgetControlGeneralJournalEntry class instance should have been created for the journal line voucher to manage
                    // checking budget funds available for the journal line voucher.
                    throw error(Error::wrongUseOfFunction(funcName()));
                }
            }
            else
            {
                if (budgetControlGeneralJournalEntries.exists(_journalLineVoucherNumber))
                {
                    budgetControlGeneralJournalEntry = budgetControlGeneralJournalEntries.lookup(_journalLineVoucherNumber) as BudgetControlGeneralJournalEntry;
                }
                else
                {
                    budgetControlGeneralJournalEntry = BudgetControlGeneralJournalEntry::newLedgerVoucher(
                    _ledgerVoucherObject.parmLegalEntity(),
                    ledgerJournalTable.JournalNum,
                    ledgerJournalTable.JournalType,
                    _journalLineVoucherNumber,
                    _ledgerVoucherObject.parmAccountingDate());

                    budgetControlGeneralJournalEntries.insert(_journalLineVoucherNumber, budgetControlGeneralJournalEntry);
                }
            }

            if (budgetControlGeneralJournalEntry.isLegalEntityBudgetCheckRequired(_ledgerVoucherObject.parmLegalEntity()))
            {
                // Add the voucher (can be the journal line voucher or its related intercompany voucher)
                // to the budget check vouchers collection.

                if (budgetCheckVouchers.exists(_journalLineVoucherNumber))
                {
                    ledgerVoucherObjectsForVoucherNumber = budgetCheckVouchers.lookup(_journalLineVoucherNumber);
                }
                else
                {
                    ledgerVoucherObjectsForVoucherNumber = new Set(Types::Class);
                }

                ledgerVoucherObjectsForVoucherNumber.add(_ledgerVoucherObject);
                budgetCheckVouchers.insert(_journalLineVoucherNumber, ledgerVoucherObjectsForVoucherNumber);
            }

            if (budgetCheckVouchers.exists(_journalLineVoucherNumber) && !budgetControlGeneralJournalEntry.isBudgetSourceSaved())
            {
                // Save budget source because the journal line voucher itself or its related intercompany voucher
                // requires budget check.
                budgetControlGeneralJournalEntry.saveBudgetSource();
            }

            if (_isIntercompanyVoucher)
            {
                // Add budget source record ID reference for the intercompany ledger voucher object.
                _ledgerVoucherObject.parmBudgetSourceRecId(budgetControlGeneralJournalEntry.parmBudgetSourceId());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBudgetCheckVoucherForInterCompany</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a mapping between the journal line voucher and its related intercompany voucher to a cache to
    ///    use for budget check purpose.
    /// </summary>
    /// <param name="_caller">
    ///    The <c>LedgerJournalCheckPost</c> caller.
    /// </param>
    /// <param name="_interCompanyId">
    ///    The <c>CompanyId</c> value for the related intercompany voucher.
    /// </param>
    /// <param name="_interCompanyJournalNumber">
    ///    The <c>LedgerJournalId</c> value for the related intercompany voucher.
    /// </param>
    /// <param name="_interCompanyVoucherNumber">
    ///    The <c>Voucher</c> value for the related intercompany voucher.
    /// </param>
    /// <param name="_journalLineVoucherNumber">
    ///    The <c>Voucher</c> value for the journal line.
    /// </param>
    public static void addBudgetCheckVoucherForInterCompany(
        LedgerJournalCheckPost _caller,
        CompanyId _interCompanyId,
        LedgerJournalId _interCompanyJournalNumber,
        Voucher _interCompanyVoucherNumber,
        Voucher _journalLineVoucherNumber)
    {
        Debug::assert(_journalLineVoucherNumber != '');

        if (_caller.parmIsBudgetControlSourceIntegrationSupported())
        {
            _caller.parmBudgetCheckInterCompanyVouchers().insert(
            LedgerJournalCheckPostBudget::getBudgetCheckVoucherForInterCompMapKey(
                _interCompanyId,
                _interCompanyJournalNumber,
                _interCompanyVoucherNumber),
            _journalLineVoucherNumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetCheckVoucherForInterCompMapKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the map key for the intercompany vouchers and their related journal line vouchers mappings.
    /// </summary>
    /// <param name="_interCompanyId">
    ///    The <c>CompanyId</c> value for the related intercompany voucher.
    /// </param>
    /// <param name="_interCompanyJournalNumber">
    ///    The <c>LedgerJournalId</c> value for the related intercompany voucher.
    /// </param>
    /// <param name="_interCompanyVoucherNumber">
    ///    The <c>Voucher</c> value for the related intercompany voucher.
    /// </param>
    /// <returns>
    ///    The map key for the intercompany vouchers and their related journal line vouchers mappings.
    /// </returns>
    public static str getBudgetCheckVoucherForInterCompMapKey(
        CompanyId _interCompanyId,
        LedgerJournalId _interCompanyJournalNumber,
        Voucher _interCompanyVoucherNumber)
    {
        Debug::assert(_interCompanyId != '');
        Debug::assert(_interCompanyJournalNumber != '');
        Debug::assert(_interCompanyVoucherNumber != '');

        return strFmt('%1, %2, %3', _interCompanyId, _interCompanyJournalNumber, _interCompanyVoucherNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetCheckVoucherForInterCompany</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a mapping between the journal line voucher and its related intercompany voucher.
    /// </summary>
    /// <param name="_budgetCheckInterCompanyVouchers">
    /// The <c>budgetCheckInterCompanyVouchers</c> object.
    /// </param>
    /// <param name="_ledgerJournalType">
    /// The ledger journal type.
    /// </param>
    /// <param name="_interCompanyId">
    ///    The <c>CompanyId</c> value for the related intercompany voucher.
    /// </param>
    /// <param name="_interCompanyJournalNumber">
    ///    The <c>LedgerJournalId</c> value for the related intercompany voucher.
    /// </param>
    /// <param name="_interCompanyVoucherNumber">
    ///    The <c>Voucher</c> value for the related intercompany voucher.
    /// </param>
    /// <returns>
    ///    The <c>Voucher</c> value for the journal line.
    /// </returns>
    public static Voucher getBudgetCheckVoucherForInterCompany(
        Map _budgetCheckInterCompanyVouchers,
        LedgerJournalType _ledgerJournalType,
        CompanyId _interCompanyId,
        LedgerJournalId _interCompanyJournalNumber,
        Voucher _interCompanyVoucherNumber)
    {
        Voucher budgetCheckVoucher;

        budgetCheckVoucher = _budgetCheckInterCompanyVouchers.lookup(
            LedgerJournalCheckPostBudget::getBudgetCheckVoucherForInterCompMapKey(
                _interCompanyId,
                _interCompanyJournalNumber,
                _interCompanyVoucherNumber));

        return budgetCheckVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitBudgetForCheckJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits the budget funds available check for validating the journal.
    /// </summary>
    /// <param name="_ledgerJournalTable">
    /// The ledger journal table.
    /// </param>
    /// <param name="_voucher">
    /// The journal voucher.
    /// </param>
    /// <returns>
    /// true if budget funds are available for the journal; otherwise, false.
    /// </returns>
    public static boolean submitBudgetForCheckJournal(LedgerJournalTable _ledgerJournalTable, str _voucher)
    {
        BudgetCheckResult budgetCheckResult;
        boolean isBudgetCheckSuccessful = true;

        if (_voucher)
        {
            BudgetControlAccountingJournalProcessor::submitLedgerJournalVoucherToCheckBudget(
                _ledgerJournalTable.JournalType,
                _ledgerJournalTable.JournalNum,
                _ledgerJournalTable.company(),
                _voucher,
                true);
        }
        else
        {
            BudgetControlAccountingJournalProcessor::submitLedgerJournalTableToCheckBudget(
                _ledgerJournalTable.RecId,
                true);
        }

        budgetCheckResult = BudgetSourceLedgerJournalTable::findBudgetCheckResult(_ledgerJournalTable.RecId);

        if (budgetCheckResult == BudgetCheckResult::Failed)
        {
            isBudgetCheckSuccessful = false;
        }

        return isBudgetCheckSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitBudgetForPostJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits the budget funds available check for posting the journal.
    /// </summary>
    /// <param name="_caller">
    ///    The <c>LedgerJournalCheckPost</c> caller.
    /// </param>
    public static void submitBudgetForPostJournal(LedgerJournalCheckPost _caller)
    {
        MapEnumerator budgetCheckVouchersEnumerator;

        Set budgetCheckLedgerVoucherObjects;
        SetEnumerator budgetCheckLedgerVoucherObjectsEnumerator;

        LedgerVoucherList budgetCheckLedgerVoucherList;
        LedgerVoucherObject budgetCheckLedgerVoucherObject;
        LedgerVoucherTransList budgetCheckLedgerVoucherTransList;
        LedgerVoucherTransObject budgetCheckLedgerVoucherTransObject;
        Voucher journalLineVoucherNumber;

        LedgerJournalTable ledgerJournalTable = _caller.parmLedgerJournalTable();
        Map budgetControlGeneralJournalEntries = _caller.parmbudgetControlGeneralJournalEntries();
        Map budgetCheckVouchers = _caller.parmBudgetCheckVouchers();

        BudgetControlGeneralJournalEntry budgetControlGeneralJournalEntry;
        boolean haveMore;
        boolean haveMoreTrans;

        if (_caller.parmIsBudgetControlSourceIntegrationSupported() &&
            budgetCheckVouchers.elements() > 0)
        {
            budgetCheckVouchersEnumerator = budgetCheckVouchers.getEnumerator();

            while (budgetCheckVouchersEnumerator.moveNext())
            {
                // For every unique journal line voucher, gets its LedgerVoucherObject set,
                // including the related interCompany LedgerVoucherObject.

                budgetCheckLedgerVoucherObjects = budgetCheckVouchersEnumerator.currentValue();

                journalLineVoucherNumber = budgetCheckVouchersEnumerator.currentKey();

                if (budgetControlGeneralJournalEntries.exists(journalLineVoucherNumber))
                {
                    budgetControlGeneralJournalEntry = budgetControlGeneralJournalEntries.lookup(journalLineVoucherNumber);
                }
                else
                {
                    // A BudgetControlGeneralJournalEntry class instance should have been cached
                    // for each unique journal line voucher number.
                    Debug::assert(false);
                }

                if (budgetCheckLedgerVoucherObjects.elements() > 0)
                {
                    budgetCheckLedgerVoucherObjectsEnumerator = budgetCheckLedgerVoucherObjects.getEnumerator();

                    // Adds all the ledger account and amount details to the BudgetControlGeneralJournalEntry class instance
                    // for the unique journal line voucher budget source

                    while (budgetCheckLedgerVoucherObjectsEnumerator.moveNext())
                    {
                        budgetCheckLedgerVoucherObject = budgetCheckLedgerVoucherObjectsEnumerator.current();

                        budgetCheckLedgerVoucherTransList = budgetCheckLedgerVoucherObject.getInternalCollection();

                        if (budgetCheckLedgerVoucherTransList && budgetCheckLedgerVoucherTransList.elements() > 0)
                        {
                            haveMore = budgetCheckLedgerVoucherTransList.first();

                            while (haveMore)
                            {
                                // There is one element in the LedgerVoucherTransList to check budget.
                                budgetCheckLedgerVoucherTransObject = budgetCheckLedgerVoucherTransList.item();

                                budgetControlGeneralJournalEntry.addLedgerDimensionDetail(
                                    budgetCheckLedgerVoucherObject.parmLegalEntity(),
                                    budgetCheckLedgerVoucherTransObject.parmLedgerDimensionId(),
                                    budgetCheckLedgerVoucherTransObject.parmTransactionCurrencyAmount(),
                                    budgetCheckLedgerVoucherTransObject.parmTransactionCurrencyCode());

                                haveMore = budgetCheckLedgerVoucherTransList.next();
                            }
                        }
                    }
                }

                // Submit the budget funds available check for the journal line voucher
                // Since LedgerJournalCheckPost is a server class, use the submit budget server method for better performance.
                BudgetControlAccountingJournalProcessor::submitGeneralJournalToCheckBudgetServer(budgetControlGeneralJournalEntry);
            }

            // Process the budget check for anything in the ledger voucher that was marked as requiring explicit budget check.
            // These were not checked through the LedgerJournalTrans table.
            budgetCheckLedgerVoucherList = _caller.parmLedgerVoucher().getInternalCollection();

            haveMore = budgetCheckLedgerVoucherList.first();
            while (haveMore)
            {
                budgetCheckLedgerVoucherObject = budgetCheckLedgerVoucherList.item();

                if (budgetCheckLedgerVoucherObject.parmIsExplicitBudgetCheckRequired())
                {
                    budgetControlGeneralJournalEntry =
                        BudgetControlGeneralJournalEntry::newGeneralJournalEntry(
                            budgetCheckLedgerVoucherObject.parmGeneralJournalEntryRecId(),
                            budgetCheckLedgerVoucherObject.parmSubledgerVoucher());

                    budgetCheckLedgerVoucherTransList = budgetCheckLedgerVoucherObject.getInternalCollection();

                    haveMoreTrans = budgetCheckLedgerVoucherTransList.first();
                    while (haveMoreTrans)
                    {
                        budgetCheckLedgerVoucherTransObject = budgetCheckLedgerVoucherTransList.item();

                        budgetControlGeneralJournalEntry.addLedgerDimensionDetail(
                            budgetCheckLedgerVoucherObject.parmLegalEntity(),
                            budgetCheckLedgerVoucherTransObject.parmLedgerDimensionId(),
                            budgetCheckLedgerVoucherTransObject.parmTransactionCurrencyAmount(),
                            budgetCheckLedgerVoucherTransObject.parmTransactionCurrencyCode());

                        haveMoreTrans = budgetCheckLedgerVoucherTransList.next();
                    }

                    budgetControlGeneralJournalEntry.saveBudgetSource();

                    // Submit the budget check to the server to improve performance.
                    BudgetControlAccountingJournalProcessor::submitGeneralJournalToCheckBudgetServer(budgetControlGeneralJournalEntry);
                }

                haveMore = budgetCheckLedgerVoucherList.next();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatedVoucherForBudgetSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the voucher number on the budget sources with the new assigned voucher number.
    /// </summary>
    /// <param name="_ledgerJournalTable">
    /// The ledger journal table.
    /// </param>
    /// <param name="_journalNumber">
    ///    The journal number that is associated with the budget sources.
    /// </param>
    /// <param name="_originalVoucher">
    ///    The original voucher number.
    /// </param>
    /// <param name="_newVoucher">
    ///    The new assigned voucher number.
    /// </param>
    public static void updatedVoucherForBudgetSource(
        ledgerJournalTable _ledgerJournalTable,
        LedgerJournalId _journalNumber,
        Voucher _originalVoucher,
        Voucher _newVoucher)
    {
        BudgetSourceLedgerJournalTrans::updateBudgetSourcesWithNewVoucher(
            CompanyInfo::findDataArea(_ledgerJournalTable.company()).RecId,
            _journalNumber,
            _originalVoucher,
            _newVoucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferBudgetSourceToNewJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Transfers the budget source to a new journal.
    /// </summary>
    /// <param name="_ledgerJournalTable">
    /// The ledger journal table.
    /// </param>
    /// <param name="_newJournalNumber">
    ///    The new journal number.
    /// </param>
    /// <param name="_voucher">
    ///    The voucher number that relates to the budget source.
    /// </param>
    public static void transferBudgetSourceToNewJournalTable(
        LedgerJournalTable _ledgerJournalTable,
        LedgerJournalId _newJournalNumber,
        Voucher _voucher)
    {
        BudgetSourceLedgerJournalTrans::updateBudgetSourcesWithNewJournal(
            CompanyInfo::findDataArea(_ledgerJournalTable.company()).RecId,
            _ledgerJournalTable.JournalNum,
            _newJournalNumber,
            _voucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoreTmpVoucherForBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Restores the new assigned voucher numbers on the budget sources with the original temporary voucher
    ///    numbers.
    /// </summary>
    /// <param name="_caller">The <c>LedgerJournalCheckPost</c> instance.</param>
    public static void restoreTmpVoucherForBudget(LedgerJournalCheckPost _caller)
    {
        MapEnumerator errorTmpVoucherEnumerator;
        LedgerJournalId journalNumber = _caller.parmLedgerJournalTable().JournalNum;

        if (_caller.parmInTransfer() && _caller.parmErrorLedgerJournalId() != '')
        {
            // We are in the process to transfer errors to a new journal.
            // Use the error journal number to find the budget sources instead,
            // as they would have already been updated with the error journal number.
            journalNumber = _caller.parmErrorLedgerJournalId();
        }

        Map errorTmpVoucherMap = _caller.parmErrorTmpVoucherMap();
        if (errorTmpVoucherMap && errorTmpVoucherMap.elements() > 0)   // restore the voucher of the unposted ledgerJournalTrans
        {
            errorTmpVoucherEnumerator = errorTmpVoucherMap.getEnumerator();

            while (errorTmpVoucherEnumerator.moveNext())
            {
                LedgerJournalCheckPostBudget::updatedVoucherForBudgetSource(
                    _caller.parmLedgerJournalTable(),
                    journalNumber,
                    errorTmpVoucherEnumerator.currentKey(),
                    errorTmpVoucherEnumerator.currentValue());
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>