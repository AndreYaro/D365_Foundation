<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatVendorConfiguration</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CatVendorConfiguration</c> class configures, enables, disables and creates root folder for a
///    specific vendor
/// </summary>
/// <remarks>
///    Setups a vendor for catalog import
/// </remarks>
class CatVendorConfiguration
{
    #CatConstants
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>configureRootFolder</Name>
				<Source><![CDATA[
    #define.EnableVendor        ('CatVendorEnableForCatalogImport')
    #define.DisableVendor       ('CatVendorDisableForCatalogImport')
    #define.ConfigureVendor     ('CatVendorConfigureForCatalogImport')

    /// <summary>
    /// Configures a root folder for catalog import functionality.
    /// </summary>
    /// <param name="_rootFolderPath">
    /// A catalog import root folder path.
    /// </param>
    /// <returns>
    /// true if the pickup folder is created; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method creates a pickup folder for catalog import functionality.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The path of the root folder for catalog import processing does not exist.
    /// </exception>
    public static boolean configureRootFolder(str _rootFolderPath)
    {
        FileIOPermission    pathPermission;
        boolean             isPikcupFolderCreated =  false;
        #CatConstants
        pathPermission = new FileIOPermission(_rootFolderPath, 'r');
        pathPermission.assert();

        if (_rootFolderPath!='' && !WinAPIServer::pathExists(_rootFolderPath))
        {
            CodeAccessPermission::revertAssert();
            throw error(strfmt("@SYS191440", _rootFolderPath));
        }
        else
        {
            System.IO.Directory::CreateDirectory(_rootFolderPath+#Slash+#PickupFolder);
            CodeAccessPermission::revertAssert();
            isPikcupFolderCreated =  true;
        }

        return isPikcupFolderCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureVendorForCatalogImport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Configures a vendor for catalog import.
    /// </summary>
    /// <param name="_vendorParty">
    /// The vendor party for which the folder structure has to be created, of <c>RefRecId</c> type.
    /// </param>
    public static void configureVendorForCatalogImport(RefRecId _vendorParty)
    {
        CatVendorChannel    catVendorChannel;

        catVendorChannel.clear();
        catVendorChannel.VendorParty = _vendorParty;
        catVendorChannel.IsEnabled   = NoYes::Yes;
        catVendorChannel.insert();
        info(strFmt("@SYS330465", DirPartyTable::findRec(catVendorChannel.VendorParty).Name));
    }

]]></Source>
			</Method>
			<Method>
				<Name>disableVendorForCatalogImport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Disables an enabled vendor for catalog import processing.
    /// </summary>
    /// <param name="_vendorParty">
    ///    The vendor party for which the folder structure has to be created, of the <c>RefRecId</c> type.
    /// </param>
    private static void disableVendorForCatalogImport(RefRecId _vendorParty)
    {
        CatVendorChannel catVendorChannel = CatVendorChannel::find(_vendorParty,true);

        ttsbegin;
        catVendorChannel.IsEnabled = NoYes::No;
        catVendorChannel.update();
        ttscommit;

        info(strFmt("@SYS191382", DirPartyTable::findRec(catVendorChannel.VendorParty).Name));
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableVendorForCatalogImport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables a disabled vendor for catalog import.
    /// </summary>
    /// <param name="_vendorParty">
    ///    The vendor party for which the folder structure has to be created, of the <c>RefRecId</c> type.
    /// </param>
    public static void enableVendorForCatalogImport(RefRecId _vendorParty)
    {
        CatVendorChannel catVendorChannel = CatVendorChannel::find(_vendorParty, true);

        ttsbegin;
        catVendorChannel.IsEnabled = NoYes::Yes;
        catVendorChannel.update();
        ttscommit;

        info(strFmt("@SYS191383", DirPartyTable::findRec(catVendorChannel.VendorParty).Name));
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        VendTable   vendTable, vendTableCurrent;
        Object      objCaller;

        vendTable   = args.record() as VendTable;
        objCaller   = args.caller();

        //updated the code as the Query "VendTableListPage" does not have Party field in VendTable
        vendTableCurrent = VendTable::findRecId(vendTable.RecId, false);

        if (args.menuItemName() == #EnableVendor)
        {
            CatVendorConfiguration::enableVendorForCatalogImport(vendTableCurrent.Party);
        }
        else if (args.menuItemName() == #DisableVendor)
        {
            CatVendorConfiguration::disableVendorForCatalogImport(vendTableCurrent.Party);
        }
        else if (args.menuItemName() == #ConfigureVendor)
        {
            CatVendorConfiguration::configureVendorForCatalogImport(vendTableCurrent.Party);
        }

        if (objCaller != null)
        {
            FormDataUtil::getFormDataSource(vendTable).research(true);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>