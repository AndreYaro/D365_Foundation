<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RAssetListingDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Report Data Provider <c>RAssetListingDP</c> class for <c>RAssetListing</c> report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(RAsset)),
    SRSReportParameterAttribute(classstr(RAssetSRSReportContract))
]
class RAssetListingDP extends SRSReportDataProviderBase
{
    RAssetListingTmp    rAssetListingTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getRAssetListingTmp</Name>
				<Source><![CDATA[
        /// <summary>
    /// Executes temporary table.
    /// </summary>
    /// <returns>
    /// Temporary table <c>RAssetListingTmp</c>.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(RAssetListingTmp))
    ]
    public RAssetListingTmp getRAssetListingTmp()
    {
        return RAssetListingTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRassetListingTmp</Name>
				<Source><![CDATA[
        /// <summary>
    ///     Inserts all the values into the <c>rAssetListingTmp</c> temporary table.
    /// </summary>
    /// <param name="_RAssetStandards">
    /// Passes <c>RAssetStandards</c> table object.
    /// </param>
    /// <param name="_netBookValue">
    /// Holds <c>AssetNetBookValue</c> field to which value is set.
    /// </param>
    private void insertRassetListingTmp(RAssetStandards _RAssetStandards, RAssetAmount _netBookValue)
    {
        RAssetTable     rAssetTable = RAssetTable::find(_rAssetStandards.AssetId);
        rAssetListingTmp.clear();
        rAssetListingTmp.AssetMainGroupId   = rAssetTable.AssetGroup;
        rAssetListingTmp.AssetGroupId       = _RAssetStandards.AssetGroup;
        rAssetListingTmp.AssetSubGroupId    = _RAssetStandards.SubGroupId;
        rAssetListingTmp.AssetId            = _RAssetStandards.AssetId;
        rAssetListingTmp.AssetName          = rAssetTable.Name;
        rAssetListingTmp.AssetStatus        = rAssetTable.Status;
        rAssetListingTmp.CurrencyCode       = _RAssetStandards.CurrencyCode;
        rAssetListingTmp.AssetNetBookValue  = _netBookValue;
        rAssetListingTmp.AssetGroupTypes    = RAssetMainGroup::find(rAssetTable.AssetGroup).GroupType;
        rAssetListingTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
        /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        QueryRun                qr;
        QueryBuildDataSource    qbs;
        TransDate               RAssetTransDate;
        NoYes                   zeroBookValue;
        RAssetStandardId        rAssetStandardId;
        RAssetSumCalc           rassetSum;
        RAssetStandards         rAssetStandards;

        RAssetSRSReportContract contract = this.parmDataContract() as RAssetSRSReportContract;

        RAssetTransDate     = contract.parmRAssetTransDate();
        RAssetStandardId    = contract.parmRAssetStandardId();
        zeroBookValue       = contract.parmZeroBookValue();

        qr  = new QueryRun(this.parmQuery());
        qbs = qr.query().dataSourceTable(tableNum(RAssetStandards));
        SysQuery::findOrCreateRange(qbs,fieldNum(RAssetStandards, AssetStandardId)).value(rAssetStandardId);
        while(qr.next())
        {

            RAssetStandards = qr.get(tableNum(RAssetStandards));
            rassetSum = RAssetSumCalc_Trans::newAssetPeriod(rAssetStandards.AssetId, rAssetStandardId, rAssetTransDate);
            if(!zeroBookValue ||
               (zeroBookValue && (rassetSum.netBookValue() > RAssetStandardTable::find(rAssetStandardId).AssetRound)))
            {
                this.insertRassetListingTmp(rAssetStandards, rassetSum.netBookValue());
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>