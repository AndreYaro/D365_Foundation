<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationTableCanBeUpdatedContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesQuotationTableCanBeUpdatedContract</c> class is the output data contract class for the
/// <c>SalesQuotationTable.checkIfUpdate</c> method.
/// </summary>
class SalesQuotationTableCanBeUpdatedContract
implements SysPackable
{
    boolean canQuotationBeUpdated;
    boolean canConfirmationBeUpdated;
    boolean canLostBeUpdated;
    boolean canCancelledBeUpdated;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        canQuotationBeUpdated,
        canConfirmationBeUpdated,
        canLostBeUpdated,
        canCancelledBeUpdated
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCanCancelledBeUpdated</Name>
				<Source><![CDATA[
        public boolean parmCanCancelledBeUpdated(boolean _canCancelledBeUpdated = canCancelledBeUpdated)
    {
        canCancelledBeUpdated = _canCancelledBeUpdated;
        return canCancelledBeUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCanConfirmationBeUpdated</Name>
				<Source><![CDATA[
        public boolean parmCanConfirmationBeUpdated(boolean _canConfirmationBeUpdated = canConfirmationBeUpdated)
    {
        canConfirmationBeUpdated = _canConfirmationBeUpdated;
        return canConfirmationBeUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCanLostBeUpdated</Name>
				<Source><![CDATA[
        public boolean parmCanLostBeUpdated(boolean _canLostBeUpdated = canLostBeUpdated)
    {
        canLostBeUpdated = _canLostBeUpdated;
        return canLostBeUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCanQuotationBeUpdated</Name>
				<Source><![CDATA[
        public boolean parmCanQuotationBeUpdated(boolean _canQuotationBeUpdated = canQuotationBeUpdated)
    {
        canQuotationBeUpdated = _canQuotationBeUpdated;
        return canQuotationBeUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container _packedClass)
    {
        int version     = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                return true;
            default :
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        static public SalesQuotationTableCanBeUpdatedContract construct()
    {
        return new SalesQuotationTableCanBeUpdatedContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>SalesQuotationTableCanBeUpdatedContract</c> class that is based on a
    /// container from a prior call to the <c>SalesQuotationTableCanBeUpdatedContract.pack</c> method.
    /// </summary>
    /// <param name="_packedClass">
    /// A container that contains the packed class.
    /// </param>
    /// <returns>
    /// An instance of the <c>SalesQuotationTableCanBeUpdatedContract</c> class that is identical to the
    /// one that was contained in the container.
    /// </returns>
    static public SalesQuotationTableCanBeUpdatedContract create(container _packedClass)
    {
        SalesQuotationTableCanBeUpdatedContract salesQuotationTableCanBeUpdatedContract = SalesQuotationTableCanBeUpdatedContract::construct();
        salesQuotationTableCanBeUpdatedContract.unpack(_packedClass);
        return salesQuotationTableCanBeUpdatedContract;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>