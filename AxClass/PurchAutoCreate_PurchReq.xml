<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchAutoCreate_PurchReq</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchAutoCreate_PurchReq extends PurchAutoCreate
{
    protected const str Separator = '#';
    protected const str ProdNameDescSeperator = '-';

    private boolean                              sortByRequester;
    private Map                                  mapRecordList;
    private List                                 listRecordList;
    private PurchReqTable                        purchReqTable;
    private container                            packedLines;
    private RequisitionPurchaseOrderGeneration   requisitionPurchaseOrderGeneration;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyMarkUpPurchLine</Name>
				<Source><![CDATA[
    protected void copyMarkUpPurchLine(PurchReqLine   _purchReqLine)
    {
        Markup::copy(NoYes::No,_purchReqLine,purchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    public void create()
    {
        using (var activityContext = this.instrumentationLogger().purchAutoCreate().create(purchReqTable))
        {
            Counter infoLogCounter;
            this.prepareSort();
            MapEnumerator enumerator = mapRecordList.getEnumerator();
            listRecordList = new List(Types::Record);

            while (enumerator.moveNext())
            {
                listRecordList = enumerator.currentValue();

                if (!listRecordList.empty())
                {
                    str key = enumerator.currentKey();
                    DataAreaId dataAreaId = subStr(key, 1, strFind(key, Separator, 1, strLen(key)) -1);

                    changecompany(dataAreaId)
                    {
                        super();
                        this.relievePurchaseRequisistionBudgetReservation();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>relievePurchaseRequisistionBudgetReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// If budget check on entry is turned off for purchase order there is a need to call checkBudget on creation
    /// of the order to ensure that we try to relieve the purchase requisition budget reservation.
    /// </summary>
    protected void relievePurchaseRequisistionBudgetReservation()
    {
        if (purchTable && (!BudgetControlConfiguration::doBudgetCheckOnEntryForSourceIntegrator(Ledger::current(), BudgetControlSourceIntegrator::PurchaseOrder) ||
                            purchTable.ProjId))
        {
            PurchTotals::newPurchTable(purchTable).calc();

            // Submit to source document processor to perform on-demand GL budget check for PO to ensure that purchase requisition is relieved.
            SourceDocumentProcessorFacade::submitOnDemandSourceDocumentImpl(purchTable);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the purchase order line by copying data from the purchase requisition line.
    /// </summary>
    public void createPurchLine()
    {
        using (var activityContext = this.instrumentationLogger().purchAutoCreate().createPurchLine())
        {
            PurchReqLine               reqLine;
            PurchReqLine               reqLineUpdate;
            ListEnumerator             listEnumerator      = listRecordList.getEnumerator();
            Set purchReqTableSet = new Set(Types::Int64);

            while (listEnumerator.moveNext())
            {
                reqLine = listEnumerator.current();

                if (!purchReqTableSet.in(reqLine.PurchReqTable))
                {
                    purchReqTableSet.add(reqLine.PurchReqTable);
                }

                this.instrumentationLogger().logRecordInformation(reqLine);

                ttsbegin;

                reqLineUpdate = PurchReqLine::find(reqLine.RecId, true);

                // Check if a purchase order has already been created against the purchase requisition line and skip the line
                if (reqLineUpdate.PurchLineCreated)
                {
                    error(strFmt("@SCM:POExistsForPurchReq", reqLine.purchReqId(), reqLine.SequenceNumber));
                }
                else
                {
                    using (var activityContextInitialize = this.instrumentationLogger().purchOrderLineCreationActivities().createPurchLineFromPurchReq())
                    {
                        this.initializeAndCreatePurchLine(reqLine);
                    }

                    if (!reqLine.isReferencedByBudgetReservation())
                    {
                        // Save purchase order info into purchase requisition only when the PR is released to PO directly.
                        this.updatePurchReqLineOnPurchLineCreate(reqLineUpdate);
                    }

                }

                ttscommit;
            }

            this.updatePurchReqHeaderAfterPurchLineCreate(purchReqTableSet);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchReqLineOnPurchLineCreate</Name>
				<Source><![CDATA[
    private void updatePurchReqLineOnPurchLineCreate(PurchReqLine _reqLineUpdate)
    {
        SourceDocumentLineAccountingStatus accountingStatus = SourceDocumentLine::find(_reqLineUpdate.SourceDocumentLine).AccountingStatus;

        using (var activityContextInitialize = this.instrumentationLogger().purchAutoCreate().updatePurchReqLineOnPurchLineCreate(accountingStatus))
        {
            _reqLineUpdate.PurchLineCreated = true;
            _reqLineUpdate.PurchId = purchLine.PurchId;
            _reqLineUpdate.PurchIdDataArea = purchLine.DataAreaId;
            _reqLineUpdate.update(false);

            PurchReqWFStatusTransitionHelper::setPurchReqLineStatus(
                _reqLineUpdate.RecId,
                PurchReqRequisitionStatus::Closed,
                /*doVersioning*/ false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchReqHeaderAfterPurchLineCreate</Name>
				<Source><![CDATA[
    private void updatePurchReqHeaderAfterPurchLineCreate(Set _purchReqTableSet)
    {
        SetEnumerator purchReqTableSetEnumerator = _purchReqTableSet.getEnumerator();
        while (purchReqTableSetEnumerator.moveNext())
        {
            ttsbegin;
            PurchReqWFStatusTransitionHelper::setPurchReqHeaderClosedStatus(purchReqTableSetEnumerator.current());
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchOrderRFQLineReference</Name>
				<Source><![CDATA[
    private void createPurchOrderRFQLineReference(PurchReqLine _reqLine, PurchLine _purchLine)
    {
        VendRFQTrans               vendRFQTrans;
        PurchRFQLine               purchRFQLine;
        PurchRFQCaseLine           purchRFQCaseLine;
        PurchOrderRFQLineReference purchOrderRFQLineReference;

        if (_reqLine.PurchRFQCaseId)
        {
            select firstonly vendRFQTrans
                where vendRFQTrans.Status  == PurchRFQStatus::Accepted
                join rfqCaseLineRefRecId from purchRFQLine
                where purchRFQLine.LineNum == vendRFQTrans.LineNum
                   && purchRFQLine.rfqId   == vendRFQTrans.rfqId
                exists join purchRFQCaseLine
                where purchRFQCaseLine.RecId        == purchRFQLine.rfqCaseLineRefRecId
                   && purchRFQCaseLine.ReqLineRefId == _reqLine.LineRefId
                   && purchRFQCaseLine.rfqCaseId    == _reqLine.PurchRFQCaseId
                   && purchRFQCaseLine.DataAreaId   == _reqLine.PurchRFQCaseIdDataArea;

            if (vendRFQTrans.RecId)
            {
                // Prepare buffer
                purchOrderRFQLineReference.clear();

                // Init relation entity's data
                purchOrderRFQLineReference.initFromVendRFQTrans(vendRFQTrans);
                purchOrderRFQLineReference.initFromPurchLine(_purchLine);

                // Insert relation
                purchOrderRFQLineReference.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchTable</Name>
				<Source><![CDATA[
    public void createPurchTable()
    {
        purchTable.setPriceDiscChangePolicy(PriceDiscSystemSource::PurchaseReq);
        purchTable.initInvoiceAccount();
        this.copyPurchReqDeliveryDateToPurchTable();
        
        purchTable.calculateRequestedShipAndReceiptDate(dateNull(), purchTable.DeliveryDate, SchedDirection::Backward);
        purchTable.SkipShipReceiptDateCalculation = true;
        
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>endUpdate</Name>
				<Source><![CDATA[
    public void endUpdate()
    {
        super();

        // Calculate discount before purchTable is automatically changed to approval status
        if (purchTable.ChangeRequestRequired)
        {
            purchTable.reread();

            if (PurchParameters::find().AutomaticTotalDiscount)
            {
                purchTable.updateFinalDisc();
            }
        }

        if (this.mustAutoApproveChangeRequest())
        {
            purchTable.autoApproveChangeRequest();
        }

        if (PurchParameters::find().AutomaticFactBoxUpdateOnPO_PSN)
        {
            PurchTotalsSummary purchTotalsSummary = PurchTotalsSummary::findByPurchId(purchTable.PurchId);

            if (purchTotalsSummary)
            {
                using (var activityContextInitialize = this.instrumentationLogger().purchAutoCreate().updateTotalsFromPurchReq(purchTable))
                {
                    PurchTotalsSummaryController::updateTotals(purchTable, tableNum(PurchTotalsSummary), purchTotalsSummary);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAutoApproveChangeRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the change request must be approved automatically.
    /// </summary>
    /// <returns>true if the change request must be approved automatically; otherwise, false.</returns>
    /// <remarks>
    /// This method is extended in <c>PurchAutoCreate_PurchReq_Extension</c> class.
    /// With this method, auto-approve functionality works independently of the <c>PublicSector</c> config key,
    /// which means auto-approve works when the <c>PublicSector</c> config key is not only on, but also off.
    /// </remarks>
    protected boolean mustAutoApproveChangeRequest()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccount</Name>
				<Source><![CDATA[
    public VendInvoiceAccount invoiceAccount()
    {
        return vendTable.InvoiceAccount ? vendTable.InvoiceAccount : vendTable.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>key</Name>
				<Source><![CDATA[
    private str key(DataAreaId  _dataAreaId,PurchReqLine _purchReqLine)
    {
        str key = _dataAreaId;
        str requesterRecId = "";

        if (sortByRequester)
        {
            requesterRecId = int642str(_purchReqLine.Requisitioner);
        }

        key += Separator + requesterRecId;

        key += Separator + _purchReqLine.CurrencyCode;

        key += Separator + _purchReqLine.VendAccount;

        return key + this.KeyV2(_dataAreaId, _purchReqLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>KeyV2</Name>
				<Source><![CDATA[
    protected str KeyV2(DataAreaId _dataAreaId, PurchReqLine _purchReqLine)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(Common _initFromBuffer, Object _callBackClass)
    {
        super(_initFromBuffer, _callBackClass);
        purchReqTable = _initFromBuffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRequisitionPurchaseOrderGeneration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get/Set instance of <c>RequisitionPurchaseOrderGeneration</c> class.
    /// </summary>
    /// <param name="_requisitionPurchaseOrderGeneration">
    /// Instance of <c>RequisitionPurchaseOrderGeneration</c> class.
    /// </param>
    /// <returns>
    /// Instance of <c>RequisitionPurchaseOrderGeneration</c> class.
    /// </returns>
    public RequisitionPurchaseOrderGeneration parmRequisitionPurchaseOrderGeneration(RequisitionPurchaseOrderGeneration _requisitionPurchaseOrderGeneration = requisitionPurchaseOrderGeneration)
    {
        requisitionPurchaseOrderGeneration = _requisitionPurchaseOrderGeneration;

        return requisitionPurchaseOrderGeneration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSortByRequisitioner</Name>
				<Source><![CDATA[
    public boolean parmSortByRequisitioner(boolean _sortByRequester  = sortByRequester)
    {
        sortByRequester = _sortByRequester;

        return sortByRequester;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchReqLineRecordList</Name>
				<Source><![CDATA[
    public List parmPurchReqLineRecordList(List _purchReqLineRecordList = listRecordList)
    {
        listRecordList = _purchReqLineRecordList;

        return listRecordList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>Purchline</c> record from the passed <c>PurchReqLine</c> record.
    /// </summary>
    /// <param name = "_reqLine">
    /// The <c>PurchReqLine</c> record to initialize from.
    /// </param>
    /// <param name = "_purchReqPurchaseOrderGenerationRule">
    /// The <c>PurchReqPurchaseOrderGenerationRule</c> object.
    /// </param>
    protected void initializePurchLine(PurchReqLine _reqLine, PurchReqPurchaseOrderGenerationRule _purchReqPurchaseOrderGenerationRule)
    {
        purchLine.clear();

        purchLine.initFromPurchTable(purchTable);

        purchLine.initFromPurchReqLine(_reqLine, _purchReqPurchaseOrderGenerationRule);

        if (_reqLine.TransDate > this.parmAccountingDate())
        {
            this.parmAccountingDate(_reqLine.TransDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchLineRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>Purchline</c> record from the passed <c>PurchReqLine</c> record.
    /// </summary>
    /// <param name = "_reqLine">
    /// The <c>PurchReqLine</c> record to initialize from.
    /// </param>
    /// <param name = "_purchReqPurchaseOrderGenerationRule">
    /// The <c>PurchReqPurchaseOrderGenerationRule</c> object.
    /// </param>
    protected void createPurchLineRecord(PurchReqLine _reqLine, PurchReqPurchaseOrderGenerationRule _purchReqPurchaseOrderGenerationRule)
    {
        boolean validation          = true;
        boolean initFromPurchTable  = false;
        boolean calcInventQty       = true;
        boolean searchMarkup        = true;
        boolean isPurchReqLineReferencedByBudgetReservation = _reqLine.isReferencedByBudgetReservation();
        boolean searchPrice = !isPurchReqLineReferencedByBudgetReservation && !RequisitionPurchaseOrderGeneration::isPurchReqLinePrice2PurchaseOrder(_reqLine, purchLine);
        boolean isIndiaTaxesMarked  = TaxParameters::checkTaxParameters_IN();
        boolean mergeFinancialDimensions;
        if (_purchReqPurchaseOrderGenerationRule.hasPolicy())
        {
            mergeFinancialDimensions = _purchReqPurchaseOrderGenerationRule.purchReqSourcingHoldRule().IsFinancialDimensionMergeEnabled;
        }

        if (_reqLine.SourceDocumentLine && purchLine.ProjId && purchLine.isStocked())
        {
            ProjParameters projParameters = ProjParameters::find();
            if (projParameters.CreateItemReqForPO && 
                projParameters.TrackCommittedCostItemRequirement && 
                (!purchLine.InventRefId || 
                (purchLine.InventRefId && !salesLine::findInventTransId(purchLine.InventRefTransId).RecId)))
            {
                ProjectCommitmentFacade::deleteProjectCommitments(_reqLine.SourceDocumentLine);
            }
        }

        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().purchAutoCreate().createPurchLineRecord(_reqLine))
        {
            purchLine.createLine(validation, initFromPurchTable, false, calcInventQty, searchMarkup, searchPrice);
            activityContext.addCustomProperty(tableStr(PurchLine), int642Str(purchLine.RecId));

            this.instrumentationLogger().logRecordInformation(purchLine);

            this.setPurchLineDefaultDimension(mergeFinancialDimensions, _reqLine);

            SalesLine salesLine = SalesLine::findInventTransId(PurchLine.InventRefTransId, true);

            if (salesLine)
            {
                salesLine.DefaultDimension = purchLine.DefaultDimension;
            
                salesLine.doUpdate();
            }

            using (var createForeignTradeCategoryActivityContext = this.instrumentationLogger().purchAutoCreate().createForeignTradeCategory())
            {
                PurchLineForeignTradeCategory purchLineForeignTradeCategory;
                if (_reqLine.LineType != PurchReqLineType::Item)
                {
                    if  (!PurchLineForeignTradeCategory::find(purchLine.InventTransId,purchLine.DataAreaId))
                    {
                        purchLineForeignTradeCategory.PurchLineInventTransId = purchLine.InventTransId;
                        purchLineForeignTradeCategory.PurchLineDataAreaId    = purchLine.DataAreaId;
                        purchLineForeignTradeCategory.insert();

                        createForeignTradeCategoryActivityContext.addCustomProperty(tableId2Name(purchLineForeignTradeCategory.TableId), int642str(purchLineForeignTradeCategory.RecId));
                    }
                }
            }

            // the date should be from the header but including delivery days(lead time)
            if (PurchParameters::find().IsSupplierShipmentDatesEnabled)
            {
                purchLine.ShipCalendarId = _reqLine.ShipCalendarId;
            }

            this.setPurchLineDeliveryDate(purchLine, _reqLine.RequiredDate);

            // Copy purchase agreement
            if (_reqLine.PurchAgreement)
            {
                using (var purchAgreementActivityContext = this.instrumentationLogger().purchAutoCreate().purchAgreement(_reqLine))
                {
                    PurchLine purchLineRollBack;
                    purchLineRollBack.data(purchLine);

                    AgreementLine localAgreementLine = AgreementLine::find(_reqLine.PurchAgreement);

                    purchLine.initFromAgreementLine(localAgreementLine);

                    if (localAgreementLine.isLinkValid(purchLine, false))
                    {
                        //one purchase order can be associated with only one agreement. If the value has
                        //already been updated then we do not need to update it again.
                        if (!purchTable.MatchingAgreement)
                        {
                            PurchAgreementHeader purchAgreementHeader = PurchAgreementHeader::findAgreementId(localAgreementLine.getPurchAgreementId());

                            purchTable.initFromPurchAgreementHeader(purchAgreementHeader);
                            purchTable.associateWithPurchAgreement(purchAgreementHeader);
                            purchTable.update();
                        }
                    }
                    else
                    {
                        purchLine.data(purchLineRollBack);
                        purchLine.setPriceDiscChangePolicy(PriceDiscSystemSource::PurchaseReq);
                    }
                }
            }
            else
            {
                purchLine.setPriceDiscChangePolicy(PriceDiscSystemSource::PurchaseReq);
            }

            // <GIN>
            PurchLine_IN purchLine_IN;
            if (isIndiaTaxesMarked && !_reqLine.ProjId)
            {
                purchLine_IN = purchLine.purchLine_IN();
                purchLine_IN.MaximumRetailPrice = _reqLine.purchReqLineTaxExtensionIN().MaximumRetailPrice;
                purchLine.packPurchLine_IN(purchLine_IN);
            }
            // </GIN>

            purchLine.update();

            //
            // The evaluation RequisitionPurchaseOrderGeneration::isPurchReqLinePrice2PurchaseOrder(reqLine) was done earlier.
            // If this is true, then searchPrice flag is marked as false.
            //
            if (!searchPrice && !isPurchReqLineReferencedByBudgetReservation)
            {
                this.copyMarkUpPurchLine(_reqLine);
            }

            // <GIN>
            if (isIndiaTaxesMarked)
            {
                purchLine_IN = purchLine.purchLine_IN();
                purchLine_IN.AssessableValueTransactionCurrency = purchLine.SalesPurchJournalLine::getMiscChargesAmountPlusLineAmount(purchLine.TableId, purchLine.RecId);
                purchLine.packPurchLine_IN(purchLine_IN);
                purchLine.update();
                TransTaxInformationHelper::copyTransTaxInformation(_reqLine, purchLine);
            }
            // </GIN>

            requisitionPurchaseOrderGeneration.validatePriceTolerance(purchLine, _reqLine);

            Docu::copy(_reqLine, purchLine);

            if (_reqLine.PurchRFQCaseId)
            {
                // Adding relationship between purchase order and request for quote if purchase requisition has been created out from RFQ
                this.createPurchOrderRFQLineReference(_reqLine,purchLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchLineDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set purchase line default dimension
    /// </summary>
    /// <param name = "_mergeFinancialDimensions">
    /// True, merge <c>PurchLine</c>financial dimension; otherwise set <c>PurchReqLine</c> dimension as default dimension.
    /// </param>
    /// <param name = "_reqLine">
    /// The <c>PurchReqLine</c> object.
    /// </param>
    protected void setPurchLineDefaultDimension(boolean _mergeFinancialDimensions, PurchReqLine _reqLine)
    {
        if (PurchReqReleaseSetFinDimFlight::instance().isEnabled())
        {
            purchLine.DefaultDimension = _reqLine.DefaultDimension;

            if (_mergeFinancialDimensions)
            {
                purchLine.DefaultDimension =  purchLine.mergeDimension(purchLine.DefaultDimension, vendTable.DefaultDimension);
            }
        }
        else
        {
            purchLine.DefaultDimension = _mergeFinancialDimensions
                ? purchLine.mergeDimension(_reqLine.DefaultDimension, vendTable.DefaultDimension)
                : _reqLine.DefaultDimension;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeAndCreatePurchLine</Name>
				<Source><![CDATA[
    private void initializeAndCreatePurchLine(PurchReqLine _reqLine)
    {
        // Look for purchase order generation rule and get value for merge financial dimensions and item description transfer policies
        PurchReqPurchaseOrderGenerationRule purchReqPurchaseOrderGenerationRule = PurchReqPurchaseOrderGenerationRule::construct();
        purchReqPurchaseOrderGenerationRule.parmPurchReqLine(_reqLine);
        purchReqPurchaseOrderGenerationRule.initPolicy();

        this.initializePurchLine(_reqLine, purchReqPurchaseOrderGenerationRule);
        this.createPurchLineRecord(_reqLine, purchReqPurchaseOrderGenerationRule);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareSort</Name>
				<Source><![CDATA[
    protected void prepareSort()
    {
        RecordSortedList recordSortedList = new RecordSortedList(tableNum(PurchReqLine));
        recordSortedList.sortOrderFromContainer(this.sortOrder());
        PurchReqLine purchReqLine;

        if (purchReqTable)
        {
            while select purchReqLine order by BuyingLegalEntity
                where purchReqLine.PurchReqTable    == purchReqTable.RecId &&
                    purchReqLine.PurchLineCreated == NoYes::No
            {
                recordSortedList.ins(purchReqLine);
            }
        }
        else if (packedLines)
        {
            for (int c = 1; c <= conLen(packedLines); c++)
            {
                recordSortedList.ins(conPeek(packedLines, c));
            }
        }

        PurchReqLine reqLine;
        recordSortedList.first(reqLine);
        PurchReqLine previousReqLine = reqLine.data();

        CompanyInfo companyInfo          = CompanyInfo::findRecId(reqLine.BuyingLegalEntity);
        DataAreaId companyInfoDataAreaId = companyInfo.DataArea;
        mapRecordList                    = new Map(Types::String, Types::Class);
        List list = new List(Types::Record);
        str key;

        for (int i = 1; i <= recordSortedList.len(); i++)
        {
            if (this.mustProcessPurchReqLinesSeparately(previousReqLine, reqLine))
            {
                key = this.key(companyInfoDataAreaId, previousReqLine);

                mapRecordList.insert(key, list);

                list = null;

                key = this.key(companyInfoDataAreaId, reqLine);

                if (mapRecordList.exists(key))
                {
                    list = mapRecordList.lookup(key);
                }
                else
                {
                    list = new List(Types::Record);
                }

                list.addEnd(reqLine);

                previousReqLine = reqLine.data();
            }
            else
            {
                list.addEnd(reqLine);
            }

            recordSortedList.next(reqLine);
        }

        key = this.key(companyInfoDataAreaId, previousReqLine);

        mapRecordList.insert(key, list);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustProcessPurchReqLinesSeparately</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies whether two purchase requisition lines do not belong to the same group and therefore must be processed in different batches.
    /// </summary>
    /// <param name = "_firstPurchReqLine">The first purchase requisition line to compare.</param>
    /// <param name = "_secondPurchReqLine">The second purchase requisition line to compare.</param>
    /// <returns>true if two purchase requisition lines must be processed separately; otherwise, false.</returns>
    protected boolean mustProcessPurchReqLinesSeparately(PurchReqLine _firstPurchReqLine, PurchReqLine _secondPurchReqLine)
    {
        return (sortByRequester && _firstPurchReqLine.Requisitioner != _secondPurchReqLine.Requisitioner)
            || _firstPurchReqLine.VendAccount != _secondPurchReqLine.VendAccount
            || _firstPurchReqLine.BuyingLegalEntity != _secondPurchReqLine.BuyingLegalEntity
            || _firstPurchReqLine.CurrencyCode != _secondPurchReqLine.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    ProjId projId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchType</Name>
				<Source><![CDATA[
    PurchaseType purchType()
    {
        return PurchaseType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchReqLines</Name>
				<Source><![CDATA[
    public void setPurchReqLines(container _packedLines)
    {
        packedLines = _packedLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchTable</Name>
				<Source><![CDATA[
    void setPurchTable()
    {
        ListEnumerator  listEnumerator  = listRecordList.getEnumerator();

        super();
        purchTable.updateFromPurchReqLineMap(listEnumerator);

        this.parmAccountingDate(this.parmAccountingDate() > purchTable.AccountingDate ? this.parmAccountingDate() : purchTable.AccountingDate);
        purchTable.AccountingDate = this.parmAccountingDate();

        if (!PurchOrderFromPurchReqInitDoNotInclTaxFlight::instance().isEnabled())
        {
            purchTable.InclTax = false;
        }        
        
        purchTable.DefaultDimension = vendTable.DefaultDimension;

        this.modifiedInventSiteFromParent();

        //<GBR>
        this.setPurchTable_BR();
        //</GBR>
        this.setPurchTable_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedInventSiteFromParent</Name>
				<Source><![CDATA[
    private void modifiedInventSiteFromParent()
    {
        ListEnumerator listEnumerator = listRecordList.getEnumerator();
        listEnumerator.reset();
            
        if (listEnumerator.moveNext())
        {
            PurchReqPurchaseOrderGenerationRule purchReqPurchaseOrderGenerationRule = PurchReqPurchaseOrderGenerationRule::construct();
            purchReqPurchaseOrderGenerationRule.parmPurchReqLine(listEnumerator.current());
            purchReqPurchaseOrderGenerationRule.initPolicy();

            if (purchReqPurchaseOrderGenerationRule.hasPolicy()
                && purchReqPurchaseOrderGenerationRule.purchReqSourcingHoldRule().IsFinancialDimensionMergeOnHeaderEnabled)
            {
                purchTable.modifiedInventSiteFromParent();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxInformation_IN</Name>
				<Source><![CDATA[
    private void setTaxInformation_IN(PurchReqLine  _reqLine)
    {
        if (!_reqLine.ProjId)
        {
            TransTaxInformationHelper::copyTransTaxInformation(_reqLine, purchLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVend</Name>
				<Source><![CDATA[
    public void setVend()
    {
        ListEnumerator  listEnumerator = listRecordList.getEnumerator();
        PurchReqLine    reqLine;

        listEnumerator.reset();
        listEnumerator.moveNext();

        reqLine = listEnumerator.current();

        vendTable = VendTable::find(reqLine.VendAccount);

        if (!vendTable)
        {
            warning(strFmt("@ProcurementAndSourcing:PurchAutoCreate_PurchReqVendorDoesNotExist", reqLine.VendAccount, curExt()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortOrder</Name>
				<Source><![CDATA[
    protected container sortOrder()
    {
        container sortOrder;

        if (sortByRequester)
        {
            sortOrder = [fieldNum(PurchReqLine, Requisitioner)];
        }

        sortOrder += [fieldNum(PurchReqLine, VendAccount), fieldNum(PurchReqLine, CurrencyCode), fieldNum(PurchReqLine, RecId)];

        return sortOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchAutoCreate_PurchReq construct(PurchReqTable _purchReqTable = null, Object _callBackClass = null)
    {
        return new PurchAutoCreate_PurchReq(_purchReqTable, _callBackClass);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchTable_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// PurchTable_BR table fields are assigned with values.
    /// </summary>
    public void setPurchTable_BR()
    {
        ListEnumerator  listEnumerator  = listRecordList.getEnumerator();
        PurchReqLine    reqLine;
        PurchTable_BR   purchTable_BR;
        CFPSTable_BR    cfpsTable_BR;

        if (!BrazilParameters::isEnabled())
        {
            return;
        }

        listEnumerator.reset();
        listEnumerator.moveNext();

        reqLine = listEnumerator.current();

        purchTable_BR = purchTable.purchTable_BR();
        purchTable_BR.SalesPurchOperationType_BR = reqLine.SalesPurchOperationType_BR;
        if (purchTable_BR.SalesPurchOperationType_BR)
        {
            SalesPurchOperationType_BR salesPurchOperationType_BR;
            salesPurchOperationType_BR = SalesPurchOperationType_BR::find(purchTable_BR.SalesPurchOperationType_BR);
            if (salesPurchOperationType_BR.VendPostingProfile)
            {
                purchTable.PostingProfile = salesPurchOperationType_BR.VendPostingProfile;
            }
        }
        cfpsTable_BR = CFPSTable_BR::find(reqLine.CFPSTable_BR);
        purchTable_BR.CFPSId_BR = CFPSTable_BR.CFPSId;
        purchTable.packPurchTable_BR(purchTable_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchTable_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// PurchTable_RU table fields are assigned with values.
    /// </summary>
    private void setPurchTable_RU()
    {
        #ISOCountryRegionCodes
        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            return;
        }

        ListEnumerator  listEnumerator  = listRecordList.getEnumerator();
        
        if (listEnumerator.moveNext())
        {
            PurchReqLine reqLine = listEnumerator.current();

            if (reqLine.DefaultDimension)
            {
                RecId dimAttrRecId = AgreementHeaderExt_RU::getAgreementDimensionAttribute();

                if (dimAttrRecId)
                {
                    DimensionAttributeValueSetStorage dimAttrValueSetStorage = DimensionAttributeValueSetStorage::find(reqLine.DefaultDimension);
                    DimensionAttributeValue dimAttrValue = DimensionAttributeValue::find(
                        dimAttrValueSetStorage.getValueByDimensionAttribute(dimAttrRecId));

                    if (dimAttrValue && dimAttrValue.EntityInstance)
                    {
                        PurchTable_RU purchTable_RU = purchTable.purchTable_RU();

                        purchTable_RU.AgreementHeaderExt_RU = dimAttrValue.EntityInstance;

                        purchTable.packPurchTable_RU(purchTable_RU);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPurchReqDeliveryDateToPurchTable</Name>
				<Source><![CDATA[
    private void copyPurchReqDeliveryDateToPurchTable()
    {
        ListEnumerator listEnumerator = listRecordList.getEnumerator();
        listEnumerator.moveNext();

        PurchReqLine purchReqLine = listEnumerator.current();
        PurchReqTable purchReqTableLocal = PurchReqTable::find(purchReqLine.PurchReqTable);
     
        if (purchReqTableLocal)
        {
            //if we do not copy the date we just let the default purchase initialization set it
            if (purchReqTableLocal.RequiredDate > PurchAutoCreate_PurchReq::earliestAllowedDeliveryDate())
            {
                purchTable.DeliveryDate = purchReqTableLocal.RequiredDate;
            }

            purchTable.calculateRequestedShipAndReceiptDate(dateNull(), purchTable.DeliveryDate, SchedDirection::Backward);
            purchTable.SkipShipReceiptDateCalculation = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchLineDeliveryDate</Name>
				<Source><![CDATA[
    private void setPurchLineDeliveryDate(PurchLine _purchLine, date _deliveryDate)
    {
        if (_deliveryDate > PurchAutoCreate_PurchReq::earliestAllowedDeliveryDate())
        {
            _purchLine.DeliveryDate = _deliveryDate;
        }

        _purchLine.calculateRequestedShipAndReceiptDate(dateNull(), _purchLine.DeliveryDate, SchedDirection::Backward);
        _purchLine.SkipShipReceiptDateCalculation = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>earliestAllowedDeliveryDate</Name>
				<Source><![CDATA[
    internal static date earliestAllowedDeliveryDate()
    {
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>creationFailed</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected void creationFailed()
    {
        if (!listRecordList.empty())
        {
            ListEnumerator listEnumerator = listRecordList.getEnumerator();

            while (listEnumerator.moveNext())
            {
                PurchReqLine currentPurchReqLine = listEnumerator.current();

                PurchReqLine purchReqLine = PurchReqLine::find(currentPurchReqLine.recId, true);

                using (var activityContext = this.instrumentationLogger().purchAutoCreate().creationFailed(purchReqLine))
                {
                    if (purchReqLine.PurchLineCreated == false &&
                        purchReqLine.RequisitionStatus == PurchReqRequisitionStatus::Approved &&
                        purchReqLine.IsPurchaseOrderGenerationManual == false)
                    {
                        purchReqLine.IsPurchaseOrderGenerationManual = true;
                        purchReqLine.update(false);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>