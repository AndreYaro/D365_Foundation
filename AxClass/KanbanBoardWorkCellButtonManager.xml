<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanBoardWorkCellButtonManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanBoardWorkCellButtonManager</c> helper class manages the action pane buttons of the
///    <c>KanbanBoardWorkCell</c> form.
/// </summary>
public class KanbanBoardWorkCellButtonManager implements ButtonStateProvider
{
    KanbanBoardProcessJobList   kanbanBoardProcessJobList;
    KanbanBoardTransferJobList  kanbanBoardTransferJobList;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCancelMaintain</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the selected kanban jobs can be canceled.
    /// </summary>
    /// <returns>
    ///    true if there is a single kanban job selected and the status is either prepared, started, or ended;
    ///    otherwise, false.
    /// </returns>
    public boolean checkCancelMaintain()
    {
        return kanbanBoardProcessJobList.checkCancelEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCompleteDetailsEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies that the Complete with Details button should be enabled.
    /// </summary>
    /// <returns>
    ///    true if the button should be enabled; otherwise, false.
    /// </returns>
    public boolean checkCompleteDetailsEnabled()
    {
        return kanbanBoardProcessJobList.checkCompleteDetailsEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCompleteEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies whether the Complete button should be enabled.
    /// </summary>
    /// <returns>
    ///    true if the button should be enabled; otherwise, false.
    /// </returns>
    public boolean checkCompleteEnabled()
    {
        return kanbanBoardProcessJobList.checkCompleteEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCompleteTransferEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies whether the Complete Transfer button should be enabled.
    /// </summary>
    /// <returns>
    ///    true if the button should be enabled; otherwise, false.
    /// </returns>
    public boolean checkCompleteTransferEnabled()
    {
        return kanbanBoardTransferJobList.checkCompleteTransferEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCreateEventKanbansEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies whether the Create Event Kanbans button should be enabled.
    /// </summary>
    /// <returns>
    ///    true if the button should be enabled; otherwise, false.
    /// </returns>
    public boolean checkCreateEventKanbansEnabled()
    {
        return kanbanBoardProcessJobList.checkCreateEventKanbansEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPrepareEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies whether the Prepare button should be enabled.
    /// </summary>
    /// <returns>
    ///    true if the button should be enabled; otherwise, false.
    /// </returns>
    public boolean checkPrepareEnabled()
    {
        return kanbanBoardProcessJobList.checkPrepareEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPrintEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies whether the Print button should be enabled.
    /// </summary>
    /// <returns>
    ///    true if the button should be enabled; otherwise, false.
    /// </returns>
    public boolean checkPrintEnabled()
    {
        return kanbanBoardProcessJobList.checkPrintEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPrioritizeMaintain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the kanban job can be prioritized.
    /// </summary>
    /// <returns>
    /// true if the kanban job can be prioritized; otherwise, false.
    /// </returns>
    public boolean checkPrioritizeMaintain()
    {
        return kanbanBoardProcessJobList.checkPrioritizeEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRevertStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the kanban job status can be reverted.
    /// </summary>
    /// <returns>
    /// true if the kanban job status can be reverted; otherwise, false.
    /// </returns>
    public boolean checkRevertStatus()
    {
        return kanbanBoardProcessJobList.checkRevertStatusEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStartEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies whether the Start button should be enabled.
    /// </summary>
    /// <returns>
    ///    true if the button should be enabled; otherwise, false.
    /// </returns>
    public boolean checkStartEnabled()
    {
        return kanbanBoardProcessJobList.checkStartEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStartTransferEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies whether the Start Transfer button should be enabled.
    /// </summary>
    /// <returns>
    ///    true if the button should be enabled; otherwise, false.
    /// </returns>
    public boolean checkStartTransferEnabled()
    {
        return kanbanBoardTransferJobList.checkStartTransferEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkViewPeggingTreeEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies whether the View Pegging Tree button should be enabled.
    /// </summary>
    /// <returns>
    ///    true if the button should be enabled; otherwise, false.
    /// </returns>
    public boolean checkViewPeggingTreeEnabled()
    {
        return kanbanBoardProcessJobList.checkViewPeggingTreeEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs special actions regarding clearing the advanced cache for the
    ///    <c>KanbanBoardButtonManager</c> class.
    /// </summary>
    /// <remarks>
    ///    The method is empty because there is no advanced caching implemented in the
    ///    <c>KanbanBoardButtonManager</c> class.
    /// </remarks>
    public void clearCache()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineButtonStates</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements special actions needed by the <c>KanbanBoardButtonManager</c> class regarding rule
    ///    evaluation.
    /// </summary>
    /// <param name="_ruleFunctionName">
    ///    A string specifying the method name for the rule being evaluated.
    /// </param>
    /// <remarks>
    ///    The method is empty because there is no advanced caching implemented in the
    ///    <c>KanbanBoardButtonManager</c> class.
    /// </remarks>
    public void determineButtonStates(str _ruleFunctionName)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanBoardProcessJobList</Name>
				<Source><![CDATA[
    private KanbanBoardProcessJobList parmKanbanBoardProcessJobList(KanbanBoardProcessJobList _kanbanBoardProcessJobList = kanbanBoardProcessJobList)
    {
        kanbanBoardProcessJobList = _kanbanBoardProcessJobList;

        return kanbanBoardProcessJobList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanBoardTransferJobList</Name>
				<Source><![CDATA[
    private KanbanBoardTransferJobList parmKanbanBoardTransferJobList(KanbanBoardTransferJobList _kanbanBoardTransferJobList = kanbanBoardTransferJobList)
    {
        kanbanBoardTransferJobList = _kanbanBoardTransferJobList;

        return kanbanBoardTransferJobList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the data source instances used by the helper class.
    /// </summary>
    /// <param name="datasources1">
    ///    This parameter is not used.
    /// </param>
    /// <param name="datasources2">
    ///    This parameter is not used.
    /// </param>
    /// <param name="datasources3">
    ///    This parameter is not used.
    /// </param>
    /// <param name="datasources4">
    ///    This parameter is not used.
    /// </param>
    /// <param name="datasources5">
    ///    This parameter is not used.
    /// </param>
    public void setDatasources(Common datasources1, Common datasources2 = null, Common datasources3 = null, Common datasources4 = null, Common datasources5 = null)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static KanbanBoardWorkCellButtonManager construct()
    {
        return new KanbanBoardWorkCellButtonManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>KanbanBoardWorkCellButtonManager</c> class.
    /// </summary>
    /// <param name="_kanbanBoardProcessJobList">
    ///    The instance of the process jobs list business logic class.
    /// </param>
    /// <param name="_kanbanBoardTransferJobList">
    ///    The instance of the transfer jobs list business logic class.
    /// </param>
    /// <returns>
    ///    The initialized instance of the class.
    /// </returns>
    public static KanbanBoardWorkCellButtonManager newDefault(
        KanbanBoardProcessJobList  _kanbanBoardProcessJobList,
        KanbanBoardTransferJobList _kanbanBoardTransferJobList)
    {
        if (!_kanbanBoardProcessJobList || !_kanbanBoardTransferJobList)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        KanbanBoardWorkCellButtonManager kanbanBoardWorkCellButtonManager = KanbanBoardWorkCellButtonManager::construct();
        kanbanBoardWorkCellButtonManager.parmKanbanBoardProcessJobList(_kanbanBoardProcessJobList);
        kanbanBoardWorkCellButtonManager.parmKanbanBoardTransferJobList(_kanbanBoardTransferJobList);

        return kanbanBoardWorkCellButtonManager;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
