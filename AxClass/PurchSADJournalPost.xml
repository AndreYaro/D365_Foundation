<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchSADJournalPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchSADJournalPost</c> class performs SAD posting
/// </summary>
class PurchSADJournalPost extends PurchInvoiceJournalPost
{
    PlSADNumberCode sadNumberCode;
    ExchRate        sadExchRate;
    CurrencyCode    sadCurrencyCode;
    boolean         endVoucher;
    TmpTaxWorkTrans tmpTaxWorkTrans;
    VendInvoiceJour dutyVendInvoiceJour;
    Set ledgerVoucherTransObjectSet;
    boolean isTaxIntegrationEnabled = Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::SADDocument);
    boolean isTaxSpecificExchRateEnabled = TaxSpecificExchangeRateHelper::isTaxSpecificExchRateEnabledByBusinessProcess(TaxIntegrationBusinessProcess::SADDocument);
    SADCalcTax sadCalcTax;
    private VendAccount vendAccount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addLedgerVoucherTransObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the tax parent reference TableId and RecId to the specific implementation's invoice table TableId and RecId.
    /// </summary>
    /// <param name="_ledgerVoucherTransObject">
    /// The object to add the tax parent reference to.
    /// </param>
    /// <remarks>
    /// This method is intended to be overridden by child classes that need to support adding the tax parent reference
    /// to a <c>LedgerVoucherTransObject</c> as part of uptake of the <c>TaxTransGeneralJournalAccountEntry</c> table.
    /// </remarks>
    protected void addLedgerVoucherTransObject(LedgerVoucherTransObject _ledgerVoucherTransObject)
    {
        if (!ledgerVoucherTransObjectSet)
        {
            ledgerVoucherTransObjectSet = new Set(Types::Class);
        }
        ledgerVoucherTransObjectSet.add(_ledgerVoucherTransObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    protected DocumentStatus documentStatus()
    {
        return DocumentStatus::PlSAD;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSourceDocumentProcessorCaller</Name>
				<Source><![CDATA[
    protected PurchInvoiceJournalPostCaller createSourceDocumentProcessorCaller(LedgerVoucher _ledgerVoucher)
    {
        return PurchInvoiceSADJournalPostCaller::newFromLedgerVoucher(ledgerVoucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>endPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates SAD header - related postings:
    /// <list type="bullet">
    /// <item>Ledger differences in reporting currency</item>
    /// <item>Duty vendor and ledger posting</item>
    /// <item>SAD taxes</item>
    /// <item>SAD miscellaneous charges</item>
    /// <item>SAD transportation charges</item>
    /// <item>SAD invoice costs</item>
    /// </list>
    /// </summary>
    protected void endPost()
    {
        SetEnumerator se;
        PlSadTable sadTable;

        super();

        if (endVoucher)
        {
            sadTable = PlSadTable::find(this.parmSADNumberCode_PL(), true);

            this.postAmountSecDiff();

            this.insertDutyInvoice();
            this.postDutyVend();

            this.postSADTaxTrans();

            if (PlSadParameters::sadMiscCharges() == PlSADPostingRule::Costs)
            {
                this.postSADMiscTrans();
            }

            this.postSADTransportTrans();

            if (PlSadParameters::invoiceMiscCharges() == PlSADPostingRule::Costs)
            {
                this.postInvoiceCostsTrans();
            }

            if (ledgerVoucherTransObjectSet)
            {
                se = ledgerVoucherTransObjectSet.getEnumerator();
                
                while (se.moveNext())
                {
                    ledgerVoucher.addTrans(se.current());
                }
            }

            sadTable.Posted  = NoYes::Yes;
            sadTable.Voucher = vendInvoiceJour.LedgerVoucher;
            sadTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>LedgerVoucherObject</c> object.
    /// </summary>
    /// <remarks>
    /// <c>LedgerVoucherObject</c> object should be initialized only once for several PO invoices in one SAD
    /// </remarks>
    protected void initLedgerVoucher()
    {
        VendInvoiceInfoTable tmpVendInvoiceInfoTable;
        PurchFormLetterSADContract sadContract = chainFormletterContract as PurchFormLetterSADContract;

        if (sadContract.parmLedgerVoucher())
        {
            ledgerVoucher = sadContract.parmLedgerVoucher();

            //renew ledgerVoucher after it was processed in subledgerJournalizer
            ledgerVoucher = this.createCustVendLedgerVoucher();

            this.findOrCreateLedgerVoucherObject(voucher, this.updateDate());
        }
        else
        {
            super();

            select count(RecId) from tmpVendInvoiceInfoTable
                where tmpVendInvoiceInfoTable.ParmId == purchParmUpdate.ParmId;
            sadContract.parmSADInvoicesQty(tmpVendInvoiceInfoTable.RecId);
            sadContract.parmLedgerVoucher(ledgerVoucher);
        }

        sadContract.parmSADInvoicesQty(sadContract.parmSADInvoicesQty() - 1);
        endVoucher = (sadContract.parmSADInvoicesQty() <= 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDutyInvoice</Name>
				<Source><![CDATA[
    private void insertDutyInvoice()
    {
        PlSadTable sadTable = PlSadTable::find(this.parmSADNumberCode_PL(), true);
        vendAccount = sadTable.SADDutyVend;
        this.calculateTax();

        dutyVendInvoiceJour = vendInvoiceJour.data();
        dutyVendInvoiceJour.initFromSADTable_PL(sadTable);
        dutyVendInvoiceJour.InvoiceAmount           = sadTable.dutyTotalAmount();
        dutyVendInvoiceJour.SourceDocumentHeader    = 0;
        dutyVendInvoiceJour.SourceDocumentLine      = 0;
        dutyVendInvoiceJour.FixedDueDate            = dateNull();
        dutyVendInvoiceJour.DueDate                 = dateNull();
        dutyVendInvoiceJour.calcDue();
        dutyVendInvoiceJour.insert();

        this.createPaymentSched();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSADTmpTaxWorkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates SAD taxes
    /// </summary>
    private void insertSADTmpTaxWorkTrans()
    {
        PlSadTable sadTable = PlSadTable::find(this.parmSADNumberCode_PL());

        VendTable sadVend = VendTable::find(vendAccount);

        tmpTaxWorkTrans.CustVendName_PL                = sadVend.name();
        tmpTaxWorkTrans.Addressing_PL                  = sadVend.postalAddress().Address;
        tmpTaxWorkTrans.vatNum_PL                      = sadVend.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, sadTable.TransDate);
        
        tmpTaxWorkTrans.TransDate                      = sadTable.TransDate;
        tmpTaxWorkTrans.VatDueDate_W                   = sadTable.vatDueDate;
        tmpTaxWorkTrans.DocumentDate_PL                = sadTable.SadDate;

        tmpTaxWorkTrans.Voucher                        = vendInvoiceJour.LedgerVoucher;
        tmpTaxWorkTrans.InventTransId                  = '';
        tmpTaxWorkTrans.TaxGroup                       = '';
        tmpTaxWorkTrans.TaxItemGroup                   = '';
        tmpTaxWorkTrans.TaxBaseQty                     = 0;
        tmpTaxWorkTrans.TaxInCostPrice                 = 0;
        tmpTaxWorkTrans.TaxInCostPriceMST              = 0;
        tmpTaxWorkTrans.TaxInCostPriceCur              = 0;
        tmpTaxWorkTrans.CurrencyCode                   = CompanyInfoHelper::standardCurrency();
        tmpTaxWorkTrans.SourceCurrencyCode             = tmpTaxWorkTrans.CurrencyCode;
        tmpTaxWorkTrans.TaxDirection                   = TaxDirection::IncomingTax;
        tmpTaxWorkTrans.TaxOffsetUseTaxLedgerDimension = 0;
        tmpTaxWorkTrans.OperationLedgerDimension       = 0;
        tmpTaxWorkTrans.ExemptTax                      = 0;
        tmpTaxWorkTrans.TaxAutogenerated               = NoYes::Yes;
        tmpTaxWorkTrans.SourceRegulateAmountCur        = 0;
        tmpTaxWorkTrans.TaxInCostPriceRegulated        = 0;
        tmpTaxWorkTrans.Source                         = TaxModuleType::Purch;

        TaxCurrencyConversionRoutineHandler handler = TaxCurrencyConversionRoutineHandler::instance();
        if (isTaxIntegrationEnabled)
        {
            TmpTaxWorkTrans taxWorkTrans = sadCalcTax.tax().tmpTaxWorkTrans();
            ReportingCurrencyExchRate reportingExchRate = this.reportingCurrencyFixedExchangeRate();
           
            while select sum(SourceBaseAmountCur),
                sum(TaxBaseAmountCur),
                sum(TaxBaseAmount),
                sum(SourceTaxAmountCur),
                sum(TaxAmountCur),
                sum(TaxAmount),
                sum(ExchangeRateTaxAmount),
                sum(ExchangeRateTaxBaseAmount),
                sum(ExchangeRateSourceRegulateAmount),
                sum(ExchangeRateSourceBaseAmountRegulated),
                sum(ExchangeRateTaxAmountRep),
                sum(ExchangeRateTaxBaseAmountRep),
                sum(ExchangeRateTaxAmountCur),
                sum(ExchangeRateTaxBaseAmountCur),
                sum(ExchangeRateRegulateAmountCur),
                sum(ExchangeRateBaseAmountCurRegulated),
                sum(TaxInCostPrice),
                sum(TaxInCostPriceRegulated),
                sum(TaxInCostPriceCur),
                sum(TaxInCostPriceMST) from taxWorkTrans
                group by TaxCode, LedgerDimension, TaxOffsetUseTaxLedgerDimension, TaxDirection, ReverseCharge_W, ExemptTax, TaxGroup, PartyTaxId, VATNum_PL
            {
                tmpTaxWorkTrans.VATNum_PL = taxWorkTrans.VATNum_PL;
                tmpTaxWorkTrans.PartyTaxId = taxWorkTrans.PartyTaxId;

                tmpTaxWorkTrans.TaxCode             = taxWorkTrans.TaxCode;
                // Accounting currency and transaction currency and tax currency are same.
                tmpTaxWorkTrans.TaxBaseAmount           = taxWorkTrans.TaxBaseAmount;
                tmpTaxWorkTrans.TaxBaseAmountCur        = taxWorkTrans.TaxBaseAmountCur;
                tmpTaxWorkTrans.SourceBaseAmountCur     = taxWorkTrans.SourceBaseAmountCur;
                tmpTaxWorkTrans.TaxAmount               = taxWorkTrans.TaxAmount;
                tmpTaxWorkTrans.TaxAmountCur            = taxWorkTrans.TaxAmountCur;
                tmpTaxWorkTrans.SourceTaxAmountCur      = taxWorkTrans.SourceTaxAmountCur;
                tmpTaxWorkTrans.TaxInCostPrice          = taxWorkTrans.TaxInCostPrice;
                tmpTaxWorkTrans.TaxInCostPriceRegulated = taxWorkTrans.TaxInCostPriceRegulated;
                tmpTaxWorkTrans.TaxInCostPriceCur       = taxWorkTrans.TaxInCostPriceCur;
                tmpTaxWorkTrans.TaxInCostPriceMST       = taxWorkTrans.TaxInCostPriceMST;
                tmpTaxWorkTrans.TaxDirection            = taxWorkTrans.TaxDirection;
                tmpTaxWorkTrans.ReverseCharge_W         = taxWorkTrans.ReverseCharge_W;
                tmpTaxWorkTrans.ExemptTax               = taxWorkTrans.ExemptTax;
                // TaxTrans.ExemptCode depends on TaxGroup
                tmpTaxWorkTrans.TaxGroup            = taxWorkTrans.TaxGroup;
                if (taxWorkTrans.ExemptTax == NoYes::No)
                {
                    tmpTaxWorkTrans.LedgerDimension = taxWorkTrans.LedgerDimension;
                }
                tmpTaxWorkTrans.TaxOffsetUseTaxLedgerDimension = taxWorkTrans.TaxOffsetUseTaxLedgerDimension;
                tmpTaxWorkTrans.TaxBaseAmountRep    = handler.transCurrencyToReportingCurrency(
                    tmpTaxWorkTrans.SourceCurrencyCode,
                    tmpTaxWorkTrans.SourceBaseAmountCur,
                    reportingExchRate,
                    tmpTaxWorkTrans.TransDate);
                tmpTaxWorkTrans.TaxAmountRep        = handler.transCurrencyToReportingCurrency(
                    tmpTaxWorkTrans.SourceCurrencyCode,
                    tmpTaxWorkTrans.SourceTaxAmountCur,
                    reportingExchRate,
                    tmpTaxWorkTrans.TransDate);
                tmpTaxWorkTrans.TaxInCostPriceRep   = handler.transCurrencyToReportingCurrency(
                    tmpTaxWorkTrans.SourceCurrencyCode,
                    tmpTaxWorkTrans.TaxInCostPrice,
                    reportingExchRate,
                    tmpTaxWorkTrans.TransDate);
                // Handle tax specific exchange rate
                if (isTaxSpecificExchRateEnabled)
                {
                    tmpTaxWorkTrans.ExchangeRateTaxAmount                   = taxWorkTrans.ExchangeRateTaxAmount;
                    tmpTaxWorkTrans.ExchangeRateTaxBaseAmount               = taxWorkTrans.ExchangeRateTaxBaseAmount;
                    tmpTaxWorkTrans.ExchangeRateSourceRegulateAmount        = taxWorkTrans.ExchangeRateSourceRegulateAmount;
                    tmpTaxWorkTrans.ExchangeRateSourceBaseAmountRegulated   = taxWorkTrans.ExchangeRateSourceBaseAmountRegulated;
                    tmpTaxWorkTrans.ExchangeRateTaxAmountRep                = taxWorkTrans.ExchangeRateTaxAmountRep;
                    tmpTaxWorkTrans.ExchangeRateTaxBaseAmountRep            = taxWorkTrans.ExchangeRateTaxBaseAmountRep;
                    tmpTaxWorkTrans.ExchangeRateTaxAmountCur                = taxWorkTrans.ExchangeRateTaxAmountCur;
                    tmpTaxWorkTrans.ExchangeRateTaxBaseAmountCur            = taxWorkTrans.ExchangeRateTaxBaseAmountCur;
                    tmpTaxWorkTrans.ExchangeRateRegulateAmountCur           = taxWorkTrans.ExchangeRateRegulateAmountCur;
                    tmpTaxWorkTrans.ExchangeRateBaseAmountCurRegulated      = taxWorkTrans.ExchangeRateBaseAmountCurRegulated;
                }
                tmpTaxWorkTrans.insert();
            }
        }
        else
        {
            PlSadTrans sadTrans;

            while select TaxCode,
                         DefaultDimension,
                         sum(sadBaseAmount),
                         sum(sadDutyAmount1),
                         sum(sadDutyAmount2),
                         sum(sadTransAmount),
                         sum(TaxAmount) from sadTrans
                group by TaxCode, DefaultDimension
                where sadTrans.SADNumberCode == sadTable.SADNumberCode
            {
                tmpTaxWorkTrans.TaxCode             = sadTrans.TaxCode;
                tmpTaxWorkTrans.TaxBaseAmount       = sadTrans.sadBaseAmount + sadTrans.sadDutyAmount1 + sadTrans.sadDutyAmount2 + sadTrans.sadTransAmount;
                tmpTaxWorkTrans.TaxBaseAmountCur    = tmpTaxWorkTrans.TaxBaseAmount;
                tmpTaxWorkTrans.SourceBaseAmountCur = tmpTaxWorkTrans.TaxBaseAmount;
                tmpTaxWorkTrans.TaxAmount           = sadTrans.TaxAmount;
                tmpTaxWorkTrans.TaxAmountCur        = sadTrans.TaxAmount;
                tmpTaxWorkTrans.SourceTaxAmountCur  = sadTrans.TaxAmount;
                tmpTaxWorkTrans.LedgerDimension     = LedgerDimensionFacade::serviceCreateLedgerDimension(TaxLedgerAccountGroup::accountLedgerDimension(sadTrans.TaxCode, TaxDirection::IncomingTax), sadTrans.DefaultDimension);
                tmpTaxWorkTrans.TaxBaseAmountRep    = handler.transCurrencyToReportingCurrency(tmpTaxWorkTrans.SourceCurrencyCode, tmpTaxWorkTrans.SourceBaseAmountCur,
                                                                                                this.reportingCurrencyFixedExchangeRate(),tmpTaxWorkTrans.TransDate);
                tmpTaxWorkTrans.TaxAmountRep        = handler.transCurrencyToReportingCurrency(tmpTaxWorkTrans.SourceCurrencyCode, tmpTaxWorkTrans.SourceTaxAmountCur,
                                                                                                this.reportingCurrencyFixedExchangeRate(),tmpTaxWorkTrans.TransDate);
                tmpTaxWorkTrans.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSADCurrencyCode_PL</Name>
				<Source><![CDATA[
    public CurrencyCode parmSADCurrencyCode_PL(CurrencyCode _sadCurrencyCode = sadCurrencyCode)
    {
        sadCurrencyCode = _sadCurrencyCode;
        return sadCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSADExchRate_PL</Name>
				<Source><![CDATA[
    public ExchRate parmSADExchRate_PL(ExchRate _sadExchRate = sadExchRate)
    {
        sadExchRate = _sadExchRate;
        return sadExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSADNumberCode_PL</Name>
				<Source><![CDATA[
    public PlSADNumberCode parmSADNumberCode_PL(PlSADNumberCode _sadNumberCode = sadNumberCode)
    {
        sadNumberCode = _sadNumberCode;
        return sadNumberCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAmountSecDiff</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts difference in reporting currency
    /// </summary>
    private void postAmountSecDiff()
    {
        LedgerVoucherTransList   transList, transListNew;
        boolean                  more;
        LedgerVoucherTransObject ledgerVoucherTransObject;
        LedgerVoucherTransObject newLedgerVoucherTransObject;
        AmountMST                amountTransaction;
        AmountMSTSecondary       amountReporting;

        LedgerVoucherObject         ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();
        CurrencyExchangeHelper      currencyExchHelper;

        currencyExchHelper = CurrencyExchangeHelper::newExchangeDate(
            Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
            ledgerVoucherObject.parmAccountingDate());

        transList = ledgerVoucher.findLedgerVoucherObject().transactionCollection_RU();

        transListNew = LedgerVoucherTransList::construct();
        for (more = transList.first(); more; more = transList.next())
        {
            transListNew.add(transList.item());
        }

        for (more = transListNew.first(); more; more = transListNew.next())
        {
            ledgerVoucherTransObject = transListNew.item();
            if (ledgerVoucherTransObject.parmLedgerPostingType() == LedgerPostingType::VendBalance)
            {
                amountTransaction = CurrencyExchangeHelper::amountCur2MST(ledgerVoucherTransObject.parmTransactionCurrencyAmount(), ledgerVoucherTransObject.parmTransactionCurrencyCode(), this.parmSADExchRate_PL());
                amountReporting   = CurrencyExchangeHelper::amountMST2MSTSecond_RU(amountTransaction, ledgerVoucherObject.parmTransDate())
                                    - ledgerVoucherTransObject.parmReportingCurrencyAmount();

                if (amountReporting)
                {
                    newLedgerVoucherTransObject = LedgerVoucherTransObject::newBasicSecondary_RU(
                        ledgerVoucherObject,
                        LedgerPostingType::VendBalance,
                        ledgerVoucherTransObject.parmLedgerDimensionId(),
                        ledgerVoucherTransObject.parmTransactionCurrencyCode(),
                        amountReporting);
                    newLedgerVoucherTransObject.parmTaxParentReferenceTableId(ledgerVoucherTransObject.parmTaxParentReferenceTableId());
                    newLedgerVoucherTransObject.parmTaxParentReferenceRecId  (ledgerVoucherTransObject.parmTaxParentReferenceRecId());
                    
                    this.addLedgerVoucherTransObject(newLedgerVoucherTransObject);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postExternalAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts amounts from the SAD.
    /// </summary>
    protected void postExternalAmounts()
    {
        super();
        
        this.postSADInvoiceVend();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postDutyVend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts SAD duty invoice vendor transaction
    /// </summary>
    private void postDutyVend()
    {
        VendVoucher     vendVoucher;
        VendTrans       vendTrans;
        LedgerTransTxt  ledgerTransTxt;

        if (this.creditNote())
        {
            ledgerTransTxt = LedgerTransTxt::PurchCreditNoteVend;
        }
        else
        {
            ledgerTransTxt = LedgerTransTxt::PurchInvoiceVend;
        }

        vendVoucher = VendVoucher::newVendVoucherPurch(ledgerTransTxt,
                                                       dutyVendInvoiceJour,
                                                       vendInvoiceInfoTable,
                                                       purchTable);

        if (PurchSADJournalPostVendTransNotSettle_PLFlight::instance().isEnabled())
        {
            //The SAD duty invoice vendor transaction does not participate in the settlement.
            vendVoucher.parmSettlementType(SettlementType::None);
        }

        vendVoucher.parmExchRate         (dutyVendInvoiceJour.ExchRate);
        vendVoucher.parmExchRateSecondary(dutyVendInvoiceJour.ExchRateSecondary);
        vendVoucher.parmReportingCurrencyExchRate(dutyVendInvoiceJour.ReportingCurrencyExchangeRate);

        vendTrans.InvoiceProject     = NoYes::No;
        vendTrans.InvoiceReleaseDate = vendInvoiceInfoTable.InvoiceReleaseDate;
        vendTrans.ReleaseDateComment = vendInvoiceInfoTable.ReleaseDateComment;

        vendVoucher.parmAccountingEventReference(AccountingEvent::getCurrentEvent(dutyVendInvoiceJour.SourceDocumentHeader).RecId);

        vendVoucher.post(ledgerVoucher,
                         vendTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postFailed</Name>
				<Source><![CDATA[
    public void postFailed(LogText _logText = '')
    {
        ParmId currentParmId;
        RecId  currentVendInvoiceInfoRecId;

        if (!this.parmProforma())
        {
            currentParmId               = vendInvoiceInfoTable.ParmId;
            currentVendInvoiceInfoRecId = vendInvoiceInfoTable.RecId;
            while select forUpdate vendInvoiceInfoTable
                where vendInvoiceInfoTable.ParmId == currentParmId &&
                      vendInvoiceInfoTable.RecId  != currentVendInvoiceInfoRecId
            {
                vendInvoiceInfoTable.VendInvoiceSaveStatus = VendInvoiceSaveStatus::Pending;
                this.moveFromActiveToSaved();
            }
        }

        vendInvoiceInfoTable = vendInvoiceInfoTable::findRecId(currentVendInvoiceInfoRecId, true);

        super(_logText);

        // commit exception handling changes
        ttsCommit;

        // fallback from all processing
        throw error("@GLS109234");
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInventorySADCost_PL</Name>
				<Source><![CDATA[
    protected Amount postInventorySADCost_PL()
    {
        VendInvoiceInfoLine_W vendInvoiceInfoLine_W = vendInvoiceInfoLine.vendInvoiceInfoLine_W();

        return vendInvoiceInfoLine_W.ValueFromSADInvoice_PL + vendInvoiceInfoLine_W.ValueFromSADTrans_PL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInvoiceCostsTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts transactions on SAD invoice costs
    /// </summary>
    private void postInvoiceCostsTrans()
    {
        LedgerVoucherObject         ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();
        LedgerVoucherTransObject    ledgerVoucherTransObject;
        CurrencyExchangeHelper      currencyExchHelper;

        PlSADParameters             sadParameters = PlSADParameters::find();
        CurrencyCode                currencyCode  = PlSADTable::find(this.parmSADNumberCode_PL()).CurrencyCode;
        PlSADInvoice                sadInvoice;

        currencyExchHelper = CurrencyExchangeHelper::newExchangeDate(
            Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
            ledgerVoucherObject.parmAccountingDate());
        currencyExchHelper.parmExchangeRate1(this.parmSADExchRate_PL());

        while select DefaultDimension, InvoiceInsurance, InvoiceMiscCharg, InvoiceTransport, RecId from sadInvoice
            where sadInvoice.sadNumberCode == this.parmSADNumberCode_PL()
        {
            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                ledgerVoucherObject,
                LedgerPostingType::PurchPostage,
                LedgerDimensionFacade::serviceCreateLedgerDimension(sadParameters.InvoiceInsuranceLedgerDimension, sadInvoice.DefaultDimension),
                currencyCode,
                sadInvoice.InvoiceInsurance,
                currencyExchHelper);
            ledgerVoucherTransObject.parmTaxParentReferenceTableId(sadInvoice.TableId);
            ledgerVoucherTransObject.parmTaxParentReferenceRecId  (sadInvoice.RecId);
            this.addLedgerVoucherTransObject(ledgerVoucherTransObject);

            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                ledgerVoucherObject,
                LedgerPostingType::PurchFee,
                LedgerDimensionFacade::serviceCreateLedgerDimension(sadParameters.InvoiceMiscLedgerDimension, sadInvoice.DefaultDimension),
                currencyCode,
                sadInvoice.InvoiceMiscCharg,
                currencyExchHelper);
            ledgerVoucherTransObject.parmSourceTableId(sadInvoice.TableId);
            ledgerVoucherTransObject.parmSourceRecId  (sadInvoice.RecId);
            this.addLedgerVoucherTransObject(ledgerVoucherTransObject);

            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                ledgerVoucherObject,
                LedgerPostingType::PurchFreight,
                LedgerDimensionFacade::serviceCreateLedgerDimension(sadParameters.InvoiceTransportLedgerDimension, sadInvoice.DefaultDimension),
                currencyCode,
                sadInvoice.InvoiceTransport,
                currencyExchHelper);
            ledgerVoucherTransObject.parmSourceTableId(sadInvoice.TableId);
            ledgerVoucherTransObject.parmSourceRecId  (sadInvoice.RecId);
            this.addLedgerVoucherTransObject(ledgerVoucherTransObject);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLine</Name>
				<Source><![CDATA[
    protected void postLine()
    {
        LedgerVoucherObject         ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();
        LedgerVoucherTransObject    ledgerVoucherTransObject;
        CurrencyExchangeHelper      currencyExchHelper;

        ProjAdjustRefId             projAdjustRefId;

        VendInvoiceInfoLine_W       vendInvoiceInfoLine_W = vendInvoiceInfoLine.vendInvoiceInfoLine_W();
        Amount                      lineAdjustmentAmount  = vendInvoiceInfoLine_W.ValueFromSADInvoice_PL +
                                                            vendInvoiceInfoLine_W.ValueFromSADTrans_PL;

        super();

        if (lineAdjustmentAmount)
        {
            currencyExchHelper = CurrencyExchangeHelper::newExchangeDate(
                Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                ledgerVoucherObject.parmAccountingDate());
            currencyExchHelper.parmExchangeRate1(this.parmSADExchRate_PL());

            if (purchLine.ProjId)
            {
                projAdjustRefId = InventTrans::findTransId(purchLine.InventTransId).ProjAdjustRefId;
            }

            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                ledgerVoucherObject,
                LedgerPostingType::PurchConsump,
                LedgerDimensionFacade::serviceCreateLedgerDimension(purchLine.ledgerDimensionConsumption(), purchLine.DefaultDimension),
                CompanyInfoHelper::standardCurrency(),
                lineAdjustmentAmount,
                currencyExchHelper);
            ledgerVoucherTransObject.parmTaxParentReferenceTableId(purchLine.TableId);
            ledgerVoucherTransObject.parmTaxParentReferenceRecId  (purchLine.RecId);
            if (purchLine.ProjId)
            {
                ledgerVoucherTransObject.parmProjLedger(
                    ProjLedger::newProjectPurch(purchLine.ProjId,
                                                purchLine.ProjCategoryId,
                                                purchLine.InventTransId,
                                                vendInvoiceJour.InvoiceId,
                                                projAdjustRefId,
                                                purchLine.ItemId));
            }

            this.addLedgerVoucherTransObject(ledgerVoucherTransObject);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSADInvoiceVend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts SAD duty invoice amount
    /// </summary>
    private void postSADInvoiceVend()
    {
        LedgerVoucherObject             ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();
        LedgerVoucherTransObject        ledgerVoucherTransObject;
        CurrencyExchangeHelper          currencyExchHelper;

        LedgerDimensionDefaultAccount   summaryLedgerDimensionDefaultAccount;
        LedgerDimensionAccount          ledgerDimensionMerged;

        PlSADInvoice                    sadInvoice = PlSADInvoice::findInvoice(this.parmSADNumberCode_PL(), vendInvoiceJour.PurchId);
        Amount                          invoiceAmount = - (sadInvoice.InvoiceMiscCharg + sadInvoice.InvoiceInsurance + sadInvoice.InvoiceTransport);

        if (! invoiceAmount)
            return;

        ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();

        summaryLedgerDimensionDefaultAccount = VendLedgerAccounts::summaryLedgerDimension(
            vendInvoiceJour.InvoiceAccount,
            vendInvoiceJour.PostingProfile);
        ledgerDimensionMerged = LedgerDimensionFacade::serviceCreateLedgerDimension(summaryLedgerDimensionDefaultAccount, vendInvoiceJour.DefaultDimension);

        currencyExchHelper = CurrencyExchangeHelper::newExchangeDate(
            Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
            ledgerVoucherObject.parmAccountingDate());

        currencyExchHelper.parmExchangeRate1(vendInvoiceJour.ExchRate);
        currencyExchHelper.parmExchangeRate2(vendInvoiceJour.ExchRateSecondary);
        currencyExchHelper.parmReportingExchangeRate1(vendInvoiceJour.ReportingCurrencyExchangeRate);

        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAccountingAmountsDefault(
            ledgerVoucherObject,
            LedgerPostingType::VendBalance,
            ledgerDimensionMerged,
            vendInvoiceJour.CurrencyCode,
            invoiceAmount,
            currencyExchHelper.calculateTransactionToAccounting(vendInvoiceJour.CurrencyCode, invoiceAmount,true),
            currencyExchHelper);

        ledgerVoucherTransObject.parmTaxParentReferenceTableId(tableNum(VendTrans));
        ledgerVoucherTransObject.parmTaxParentReferenceRecId  (VendTrans::findVoucherDate(vendInvoiceJour.LedgerVoucher, vendInvoiceJour.InvoiceDate).RecId);

        this.addLedgerVoucherTransObject(ledgerVoucherTransObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSADMiscTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts SAD miscellaneous charges
    /// </summary>
    private void postSADMiscTrans()
    {
        LedgerVoucherObject      ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();
        LedgerVoucherTransObject ledgerVoucherTransObject;
        CurrencyExchangeHelper   currencyExchHelper;

        PlSADTable               sadTable = PlSadTable::find(this.parmSADNumberCode_PL());

        currencyExchHelper = CurrencyExchangeHelper::newExchangeDate(
            Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
            ledgerVoucherObject.parmAccountingDate());

        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
            ledgerVoucherObject,
            LedgerPostingType::PurchFee,
            LedgerDimensionFacade::serviceCreateLedgerDimension(PlSadParameters::find().SADMiscLedgerDimension, sadTable.DefaultDimension),
            CompanyInfoHelper::standardCurrency(),
            sadTable.sadMiscCharg,
            currencyExchHelper);
        ledgerVoucherTransObject.parmTaxParentReferenceTableId(sadTable.TableId);
        ledgerVoucherTransObject.parmTaxParentReferenceRecId  (sadTable.RecId);
        this.addLedgerVoucherTransObject(ledgerVoucherTransObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSADTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts SAD taxes
    /// </summary>
    private void postSADTaxTrans()
    {
        TaxTrans   taxTrans;
        TaxTrans_W taxTrans_W;
        PlSADTable sadTable = PlSADTable::find(this.parmSADNumberCode_PL());

        LedgerVoucherObject         ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();
        LedgerVoucherTransObject    ledgerVoucherTransObject;
        CurrencyExchangeHelper      currencyExchHelper;

        currencyExchHelper = CurrencyExchangeHelper::newExchangeDate(
            Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
            ledgerVoucherObject.parmAccountingDate());

        ttsbegin;

        this.insertSADTmpTaxWorkTrans();
        if (isTaxIntegrationEnabled)
        {
            while select
                sum(TaxBaseAmount),
                sum(TaxBaseAmountCur),
                sum(TaxBaseAmountRep),
                sum(TaxBaseQty),
                sum(TaxAmount),
                sum(TaxAmountCur),
                sum(TaxAmountRep),
                sum(TaxInCostPrice),
                sum(TaxInCostPriceMST),
                sum(TaxInCostPriceCur),
                sum(TaxInCostPriceRep),
                sum(SourceTaxAmountCur),
                sum(SourceBaseAmountCur),
                sum(SourceRegulateAmountCur),
                sum(TaxInCostPriceRegulated),
                sum(ExchangeRateTaxAmount),
                sum(ExchangeRateTaxBaseAmount),
                sum(ExchangeRateSourceRegulateAmount),
                sum(ExchangeRateSourceBaseAmountRegulated),
                sum(ExchangeRateTaxAmountRep),
                sum(ExchangeRateTaxBaseAmountRep),
                sum(ExchangeRateTaxAmountCur),
                sum(ExchangeRateTaxBaseAmountCur),
                sum(ExchangeRateRegulateAmountCur),
                sum(ExchangeRateBaseAmountCurRegulated)
            from tmpTaxWorkTrans
            group by Voucher, TransDate, InventTransId, TaxCode, CurrencyCode, TaxDirection, ExemptTax, TaxOrigin,
                     LedgerDimension, TaxOffsetUseTaxLedgerDimension, Source, SourceCurrencyCode, TaxAutogenerated,
                     TaxReports, OperationLedgerDimension, TaxRefId, TaxGroup, TaxItemGroup, euroTriangulation,
                     VatDueDate_W, CustVendName_PL, Addressing_PL, VATNum_PL, DocumentDate_PL, ReverseCharge_W, PartyTaxId
            {
                if (tmpTaxWorkTrans.SourceTaxAmountCur
                    || tmpTaxWorkTrans.SourceBaseAmountCur
                    || tmpTaxWorkTrans.SourceRegulateAmountCur
                    || tmpTaxWorkTrans.TaxBaseQty)
                {
                    taxTrans.initFromTaxWorkTrans(tmpTaxWorkTrans, TaxOrigin::Tax);
                    // Alwasy set to empty to align with core tax.
                    taxTrans.TaxGroup = '';

                    taxTrans.TaxAutogenerated = NoYes::Yes;
                    taxTrans.Voucher          = vendInvoiceJour.LedgerVoucher;

                    taxTrans_W                = taxTrans.taxTrans_W();
                    taxTrans_W.VatDueDate_W   = sadTable.vatDueDate;

                    taxTrans.packTaxTrans_W(taxTrans_W);
                    taxTrans.insert();
                    // Handle tax specific exchange rate
                    if (isTaxSpecificExchRateEnabled)
                    {
                        TaxSepcificExchangeRateAmountParameters taxSepcificExchangeRateAmountParameters = TaxSepcificExchangeRateAmountParameters::construct(
                            tmpTaxWorkTrans.ExchangeRateTaxAmount,
                            tmpTaxWorkTrans.ExchangeRateTaxBaseAmount,
                            tmpTaxWorkTrans.ExchangeRateSourceRegulateAmount,
                            tmpTaxWorkTrans.ExchangeRateSourceBaseAmountRegulated,
                            tmpTaxWorkTrans.ExchangeRateTaxAmountRep,
                            tmpTaxWorkTrans.ExchangeRateTaxBaseAmountRep,
                            tmpTaxWorkTrans.ExchangeRateTaxAmountCur,
                            tmpTaxWorkTrans.ExchangeRateTaxBaseAmountCur,
                            tmpTaxWorkTrans.ExchangeRateRegulateAmountCur,
                            tmpTaxWorkTrans.ExchangeRateBaseAmountCurRegulated);
                        TaxSAD taxSAD = sadCalcTax.tax();
                        taxSAD.processTaxSpecificExchangeRateDifferenceAmount(
                            taxTrans,
                            LedgerPostingController::newForLedgerPostingJournal(ledgerVoucher),
                            currencyExchHelper,
                            tmpTaxWorkTrans.LedgerDimension,
                            taxSepcificExchangeRateAmountParameters);
                    }

                    ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                        ledgerVoucherObject,
                        LedgerPostingType::Tax,
                        tmpTaxWorkTrans.LedgerDimension,
                        CompanyInfoHelper::standardCurrency(),
                        taxTrans.TaxAmount - taxTrans.TaxInCostPriceMST,
                        currencyExchHelper);
                    ledgerVoucherTransObject.parmTaxParentReferenceTableId(taxTrans.TableId);
                    ledgerVoucherTransObject.parmTaxParentReferenceRecId(taxTrans.RecId);
                    ledgerVoucherTransObject.addTaxTransRelationship(taxTrans.RecId, TaxTransRelationshipType::Tax);
                    this.addLedgerVoucherTransObject(ledgerVoucherTransObject);

                    if (taxTrans.TaxInCostPriceMST)
                    {
                        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                            ledgerVoucherObject,
                            LedgerPostingType::Tax,
                            LedgerDimensionFacade::serviceCreateLedgerDimension(purchLine.ledgerDimensionConsumption(), purchLine.DefaultDimension),
                            CompanyInfoHelper::standardCurrency(),
                            taxTrans.TaxInCostPriceMST,
                            currencyExchHelper);
                            ledgerVoucherTransObject.parmTaxParentReferenceTableId(taxTrans.TableId);
                            ledgerVoucherTransObject.parmTaxParentReferenceRecId(taxTrans.RecId);
                            ledgerVoucherTransObject.addTaxTransRelationship(taxTrans.RecId, TaxTransRelationshipType::Tax);
                            this.addLedgerVoucherTransObject(ledgerVoucherTransObject);
                    }
                    if (taxTrans.TaxDirection == TaxDirection::UseTax)
                    {
                        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                            ledgerVoucherObject,
                            LedgerPostingType::Tax,
                            tmpTaxWorkTrans.TaxOffsetUseTaxLedgerDimension,
                            CompanyInfoHelper::standardCurrency(),
                            taxTrans.TaxAmount * -1,
                            currencyExchHelper);
                        this.addLedgerVoucherTransObject(ledgerVoucherTransObject);
                    }
                }
            }
        }
        else
        {
            while select
                sum(TaxBaseAmount),
                sum(TaxBaseAmountCur),
                sum(TaxBaseAmountRep),
                sum(TaxBaseQty),
                sum(TaxAmount),
                sum(TaxAmountCur),
                sum(TaxAmountRep),
                sum(TaxInCostPrice),
                sum(TaxInCostPriceMST),
                sum(TaxInCostPriceCur),
                sum(TaxInCostPriceRep),
                sum(SourceTaxAmountCur),
                sum(SourceBaseAmountCur),
                sum(SourceRegulateAmountCur),
                sum(TaxInCostPriceRegulated)
            from tmpTaxWorkTrans
            group by Voucher, TransDate, InventTransId, TaxCode, CurrencyCode, TaxDirection, ExemptTax, TaxOrigin,
                     LedgerDimension, TaxOffsetUseTaxLedgerDimension, Source, SourceCurrencyCode, TaxAutogenerated,
                     TaxReports, OperationLedgerDimension, TaxRefId, TaxGroup, TaxItemGroup, euroTriangulation,
                     VatDueDate_W, CustVendName_PL, Addressing_PL, VATNum_PL, DocumentDate_PL
            {
                if (tmpTaxWorkTrans.SourceTaxAmountCur      ||
                    tmpTaxWorkTrans.SourceBaseAmountCur     ||
                    tmpTaxWorkTrans.SourceRegulateAmountCur ||
                    tmpTaxWorkTrans.TaxBaseQty)
                {
                    taxTrans.initFromTaxWorkTrans(tmpTaxWorkTrans, TaxOrigin::Tax);

                    taxTrans.TaxAutogenerated = NoYes::No;
                    taxTrans.Voucher          = vendInvoiceJour.LedgerVoucher;

                    taxTrans_W                = taxTrans.taxTrans_W();
                    taxTrans_W.VatDueDate_W   = sadTable.vatDueDate;

                    taxTrans.packTaxTrans_W(taxTrans_W);
                    taxTrans.insert();

                    ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                        ledgerVoucherObject,
                        LedgerPostingType::Tax,
                        tmpTaxWorkTrans.LedgerDimension,
                        CompanyInfoHelper::standardCurrency(),
                        taxTrans.TaxAmount,
                        currencyExchHelper);
                    ledgerVoucherTransObject.parmTaxParentReferenceTableId(taxTrans.TableId);
                    ledgerVoucherTransObject.parmTaxParentReferenceRecId(taxTrans.RecId);
                    ledgerVoucherTransObject.addTaxTransRelationship(taxTrans.RecId, TaxTransRelationshipType::Tax);
                    this.addLedgerVoucherTransObject(ledgerVoucherTransObject);
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSADTransportTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts SAD transportation charges
    /// </summary>
    private void postSADTransportTrans()
    {
        LedgerVoucherObject         ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();
        LedgerVoucherTransObject    ledgerVoucherTransObject;
        CurrencyExchangeHelper      currencyExchHelper;

        PlSADTable                  sadTable = PlSadTable::find(this.parmSADNumberCode_PL());

        currencyExchHelper = CurrencyExchangeHelper::newExchangeDate(
            Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
            ledgerVoucherObject.parmAccountingDate());

        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
            ledgerVoucherObject,
            LedgerPostingType::PurchFreight,
            LedgerDimensionFacade::serviceCreateLedgerDimension(PlSadParameters::find().SADTransportLedgerDimension, sadTable.DefaultDimension),
            CompanyInfoHelper::standardCurrency(),
            - sadTable.SADTransAmount,
            currencyExchHelper);
        ledgerVoucherTransObject.parmTaxParentReferenceTableId(sadTable.TableId);
        ledgerVoucherTransObject.parmTaxParentReferenceRecId  (sadTable.RecId);
        this.addLedgerVoucherTransObject(ledgerVoucherTransObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        VendInvoiceJour localVendInvoiceJour;
        RecId recId = vendInvoiceJour.RecId;

        if (VendTrans::findVoucherDate(vendInvoiceJour.LedgerVoucher, vendInvoiceJour.InvoiceDate).RecId)
            return;

        while select forUpdate localVendInvoiceJour
            where localVendInvoiceJour.ParmId == purchParmUpdate.ParmId
        {
            voucher = '';
            vendInvoiceJour      = localVendInvoiceJour;
            vendInvoiceInfoTable = VendInvoiceInfoTable::findSourceDocumentHeader(vendInvoiceJour.SourceDocumentHeader, true);
            this.parmTotals(null);

            super();
        }

        vendInvoiceJour = VendInvoiceJour::findRecId(recId, true);
        vendInvoiceInfoTable = VendInvoiceInfoTable::findSourceDocumentHeader(vendInvoiceJour.SourceDocumentHeader, true);
        this.parmTotals(null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalTable</Name>
				<Source><![CDATA[
    protected void updateJournalTable()
    {
        super();

        vendInvoiceJour.initFromSADInvoice_PL(PlSADInvoice::findInvoice(this.parmSADNumberCode_PL(),
                                                                        vendInvoiceJour.PurchId));
        vendInvoiceJour.ExchRate = this.parmSADExchRate_PL();
        vendInvoiceJour.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchSADJournalPost construct()
    {
        return new PurchSADJournalPost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTax</Name>
				<Source><![CDATA[
    private void calculateTax()
    {
        if (!isTaxIntegrationEnabled)
        {
            return;
        }
        PlSadTable sadTable = PlSadTable::find(this.parmSADNumberCode_PL());
        sadCalcTax = SADCalcTax::newForSourceTable(sadTable);
        sadCalcTax.calcTax(null);

        // Setup TaxId and PartyTaxId to table VendInvoiceJour
        if (TaxIntegrationUtils::isMultipleTaxIdEnabledForTaxService())
        {
            TaxSAD taxSAD = sadCalcTax.tax() as TaxSAD;
            vendAccount = taxSAD.getCustVendAccount_PL();
            // There's only one vendor on SAD lines.
            if (vendAccount)
            {
                if (TaxSADStoreTaxRegistrationNumberToVendInvoiceJourFlight::instance().isEnabled())
                {
                    sadCalcTax.tax().saveTaxIdToCustVendJour(vendInvoiceJour);
                    if (TaxSADStoreTaxRegistrationNumberToVendInvoiceJourForPOFlight::instance().isEnabled())
                    {
                        ttsbegin;
                        vendInvoiceJour.doUpdate();
                        ttscommit;
                    }
                }
            }
        }

        // PlSADTrans.TaxAmount needs to be updated for later use in the method dutyTotalAmount of table PlSadTable.
        TmpTaxWorkTrans taxWorkTrans = sadCalcTax.tax().tmpTaxWorkTrans();
        PlSADTrans sadTrans;
        ttsbegin;
        while select forupdate sadTrans
            where sadTrans.SADNumberCode == sadTable.SADNumberCode
        {
            select sum(SourceTaxAmountCur) from taxWorkTrans
                where taxWorkTrans.SourceTableId == sadTrans.TableId
                    && taxWorkTrans.SourceRecId == sadTrans.RecId
                    && taxWorkTrans.TaxDirection != TaxDirection::UseTax;
            sadTrans.TaxAmount = taxWorkTrans.SourceTaxAmountCur;
            sadTrans.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>