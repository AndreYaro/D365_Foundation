<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustIntentLetterCancelController_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The controller class for intent letter canceling.
/// </summary>
public class CustIntentLetterCancelController_IT extends SysOperationServiceController implements BatchRetryable
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (_args)
        {
            Common record = _args.record();

            switch(record.tableId)
            {
                case tablenum(CustIntentLetter_IT):
                    CustIntentLetter_IT custIntentLetter = record;
                    FormDataSource callerDS = FormDataUtil::getFormDataSource(CustIntentLetter);

                    CustIntentLetterCancelController_IT controller = CustIntentLetterCancelController_IT::construct();
                    controller.parmDialogCaption("@ExtendedItallianLocalization:CancelLetter");

                    CustIntentLetterCancelDataContract_IT contract = controller.getDataContractObject();
                    contract.parmCustIntentLetter(custIntentLetter);
                    contract.parmCustAccountNum(custIntentLetter.AccountNum);
                    contract.parmIntentLetterId(custIntentLetter.LetterId);

                    if (custIntentLetter.Status == IntentLetterStatus_IT::Open
                        || custIntentLetter.Status == IntentLetterStatus_IT::Closed)
                    {
                        controller.startOperation();

                        if (callerDS)
                        {
                            callerDS.reSearch();
                        }
                    }
                    else
                    {
                        warning(strFmt("@ExtendedItallianLocalization:LeterCannotBeCanceled", CustIntentLetter.LetterId));
                    }

                    break;

                default:
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustIntentLetterCancelController_IT construct()
    {
        IdentifierName className = classStr(CustIntentLetterCancelService_IT);
        IdentifierName methodName = methodStr(CustIntentLetterCancelService_IT, runCancellation);
        SysOperationExecutionMode mode = SysOperationExecutionMode::Synchronous;
        CustIntentLetterCancelController_IT controller = new CustIntentLetterCancelController_IT(className, methodName, mode);
        return controller;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>