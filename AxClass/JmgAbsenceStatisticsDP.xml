<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgAbsenceStatisticsDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgAbsenceStatisticsDP</c> class declares the variables and the tables for the
///    <c>JmgAbsenceStatistics</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(JmgAbsenceStatisticsQuery)),
    SRSReportParameterAttribute(classStr(JmgAbsenceStatisticsContract))
]
public class JmgAbsenceStatisticsDP extends SRSReportDataProviderBase
{
    JmgTmpAbsenceStatistics        jmgTmpAbsenceStatistics;
    JmgStampTrans                  jmgStampTransLocal;
    HcmWorker                      hcmWorkerLocal;
    boolean                        isAbsenceReport;
    JmgAbsenceStatisticsContract   contract;

    //Column Labels
    JmgLabel                       actOprLabel;
    JmgLabel                       jobRefLabel;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAbsenceRanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds absence ranges to the specified query.
    /// </summary>
    /// <param name="_query">
    ///    The <c>Query</c> object to which to add absence ranges.
    /// </param>
    private void createAbsenceRanges(Query _query)
    {
        QueryBuildRange         queryBuildRange;
        QueryBuildDataSource    qbds;

        queryBuildRange = SysQuery::findOrCreateRange(_query.dataSourceTable(tableNum(JmgStampTrans)), fieldNum(JmgStampTrans,StampType));
        queryBuildRange.value(queryValue(JmgStampTypeEnum::Absence));
        queryBuildRange.status(RangeStatus::Locked);
        queryBuildRange.status(RangeStatus::Hidden);

        qbds = _query.dataSourceTable(tableNum(HRMAbsenceCode));
        if (qbds == null)
        {
            qbds            = _query.dataSourceTable(tableNum(JmgStampTrans)).addDataSource(tableNum(HRMAbsenceCode));
            qbds.joinMode(JoinMode::ExistsJoin);
            qbds.addLink(fieldNum(JmgStampTrans, ActOprID), fieldNum(HRMAbsenceCode, HrmAbsenceCodeId));
        }

        queryBuildRange =  SysQuery::findOrCreateRange(_query.dataSourceTable(tableNum(HRMAbsenceCode)), fieldNum(HRMAbsenceCode, JmgIncludeInReport));
        queryBuildRange.value(queryValue(NoYes::Yes));
        queryBuildRange.status(RangeStatus::Locked);
        queryBuildRange.status(RangeStatus::Hidden);

        queryBuildRange = SysQuery::findOrCreateRange(_query.dataSourceTable(tableNum(JmgStampTrans)), fieldNum(JmgStampTrans,JourRegType));
        queryBuildRange.value(queryValue(JmgJourRegTypeEnum::Absence));
        queryBuildRange.status(RangeStatus::Locked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createIPCRanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds IPC ranges on the specified query.
    /// </summary>
    /// <param name="_query">
    ///    The <c>Query</c> object to which to add absence ranges.
    /// </param>
    private void createIPCRanges(Query _query)
    {
        QueryBuildRange         queryBuildRange;

        queryBuildRange = SysQuery::findOrCreateRange(_query.dataSourceTable(tableNum(JmgStampTrans)), fieldNum(JmgStampTrans, StampType));
        queryBuildRange.value(queryRangeConcat(queryValue(JmgStampTypeEnum::Work), queryValue(JmgStampTypeEnum::Break)));
        queryBuildRange.status(RangeStatus::Locked);

        queryBuildRange = SysQuery::findOrCreateRange(_query.dataSourceTable(tableNum(JmgStampTrans)), fieldNum(JmgStampTrans,JourRegType));
        queryBuildRange.value(queryValue(JmgJourRegTypeEnum::IndActivity));
        queryBuildRange.status(RangeStatus::Locked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQueryRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds ranges to the report query.
    /// </summary>
    private void createQueryRanges()
    {
        QueryBuildRange queryBuildRange;

        Query query         = this.parmQuery();

        queryBuildRange     = SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(JmgStampTrans)), fieldNum(JmgStampTrans, Module));
        queryBuildRange.value(queryValue(JmgModuleEnum::IPC));
        queryBuildRange.status(RangeStatus::Locked);
        queryBuildRange.status(RangeStatus::Hidden);

         // If the report has been called as an Absence Statistics report, set the required absence ranges
        if (isAbsenceReport)
        {
            this.createAbsenceRanges(query);
        }
        //Else the report has been called as a IPC Statistics report, , set the required IPC ranges
        else
        {
            this.createIPCRanges(query);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getColumnLabels</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the column labels that are used on the report.
    /// </summary>
    private void getColumnLabels()
    {
        //if the report has been called as Absence Statistics from 'JmgAbsenceStatisticsMenuHelper' use absence labels
        if (isAbsenceReport)
        {
            actOprLabel = "@SYS32270";
            jobRefLabel = "@SYS32255";
        }
        //else use IPC labels
        else
        {
            actOprLabel = "@SYS38381";
            jobRefLabel = "@SYS38367";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJmgTmpAbsenceStatistics</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data from the <c>JmgTmpAbsenceStatistics</c> temporary table.
    /// </summary>
    /// <returns>
    /// The data from the <c>JmgTmpAbsenceStatistics</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(JmgTmpAbsenceStatistics))
    ]
    public JmgTmpAbsenceStatistics getJmgTmpAbsenceStatistics()
    {
        select jmgTmpAbsenceStatistics;
        return jmgTmpAbsenceStatistics;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertJmgTmpAbsenceStatistics</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record in the <c>JmgTmpAbsenceStatistics</c> temporary buffer.
    /// </summary>
    private void insertJmgTmpAbsenceStatistics()
    {
        jmgTmpAbsenceStatistics.ActOprLabel     = actOprLabel;
        jmgTmpAbsenceStatistics.JobRefLabel     = jobRefLabel;

        jmgTmpAbsenceStatistics.AbsencePay      = jmgStampTransLocal.absencePay();
        jmgTmpAbsenceStatistics.SecondsReal     = jmgStampTransLocal.secondsReal();
        jmgTmpAbsenceStatistics.ActOprID        = jmgStampTransLocal.ActOprID;
        jmgTmpAbsenceStatistics.JobRef          = jmgStampTransLocal.JobRef;
        jmgTmpAbsenceStatistics.Name            = hcmWorkerLocal.name();
        jmgTmpAbsenceStatistics.PersonnelNumber = hcmWorkerLocal.PersonnelNumber;
        jmgTmpAbsenceStatistics.ProfileDate     = strFmt("@SYS82282",jmgStampTransLocal.ProfileDate);
        jmgTmpAbsenceStatistics.StartDate       = strFmt("@SYS82282",jmgStampTransLocal.StartDate);
        jmgTmpAbsenceStatistics.StopDate        = strFmt("@SYS82282",jmgStampTransLocal.StopDate);
        jmgTmpAbsenceStatistics.StartTime       = strFmt("@SYS76785", time2str(jmgStampTransLocal.StartTime,-1,-1));
        jmgTmpAbsenceStatistics.StopTime        = strFmt("@SYS82282", time2str(jmgStampTransLocal.StopTime,-1,-1));
        jmgTmpAbsenceStatistics.StartDate       = strFmt("@SYS312531", jmgTmpAbsenceStatistics.StartDate, jmgTmpAbsenceStatistics.StartTime);
        jmgTmpAbsenceStatistics.StopDate        = strFmt("@SYS312531", jmgTmpAbsenceStatistics.StopDate, jmgTmpAbsenceStatistics.StopTime);
        jmgTmpAbsenceStatistics.doInsert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the required data for the <c>JmgAbsenceStatistics</c> report.
    /// </summary>
    public void processReport()
    {
        QueryRun                qR;

        contract                =   this.parmDataContract() as JmgAbsenceStatisticsContract;

        isAbsenceReport         =   contract.parmIsAbsenceReport();

        this.createQueryRanges();
        this.getColumnLabels();

        qR                      =   new SysQueryRun(this.parmQuery());

        while (qR.next())
        {
            jmgStampTransLocal  = qR.get(tableNum(JmgStampTrans));
            hcmWorkerLocal      = qR.get(tableNum(HcmWorker));

            this.insertJmgTmpAbsenceStatistics();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
