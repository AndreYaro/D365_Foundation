<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTrackingDimTracingInventTransDTO</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Instances of the <c>InventTrackingDimTracingInventTransDTO</c> class are used as data transportation objects 
/// which carry the item tracing related information about an inventory transaction.
/// </summary>
public class InventTrackingDimTracingInventTransDTO implements SysPackable
{
    RecId               recId;
    RecId               returnInventTransOriginRecId;
    StatusIssue         statusIssue;
    StatusReceipt       statusReceipt;
    InventDimId         inventDimId;
    InventQty           inventQty;
    PdsCWQty            catchWeightQty;
    StockQtyChangeDate  stockQtyChangeDate;
    DateFinancial       dateFinancial;
    Voucher             voucher;

    #LOCALMACRO.CurrentList
        recId,
        returnInventTransOriginRecId,
        statusIssue,
        statusReceipt,
        inventDimId,
        inventQty,
        catchWeightQty,
        stockQtyChangeDate,
        dateFinancial,
        voucher
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventTrackingDimTracingInventTransDTO construct()
    {
        return new InventTrackingDimTracingInventTransDTO();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventTrackingDimTracingInventTransDTO</c> class for the specified inventory transaction.
    /// </summary>
    /// <param name = "_inventTrans">The inventory transaction.</param>
    /// <returns>A new instance of the <c>InventTrackingDimTracingInventTransDTO</c> class.</returns>
    public static InventTrackingDimTracingInventTransDTO newFromInventTrans(InventTrans _inventTrans)
    {
        var dto = InventTrackingDimTracingInventTransDTO::construct();
        dto.initFromInventTrans(_inventTrans);
        return dto;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current object based on the specified inventory transaction.
    /// </summary>
    /// <param name = "_inventTrans">The inventory transaction.</param>
    protected void initFromInventTrans(InventTrans _inventTrans)
    {
        recId = _inventTrans.RecId;
        returnInventTransOriginRecId = _inventTrans.ReturnInventTransOrigin;
        statusIssue = _inventTrans.StatusIssue;
        statusReceipt = _inventTrans.StatusReceipt;
        inventDimId = _inventTrans.InventDimId;
        inventQty = _inventTrans.Qty;
        catchWeightQty = _inventTrans.PdsCWQty;
        stockQtyChangeDate = _inventTrans.stockQtyChangeDate();
        dateFinancial = _inventTrans.DateFinancial;
        voucher = _inventTrans.Voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the RecId of the current inventory transaction.
    /// </summary>
    /// <returns>The RecId.</returns>
    public RecId recId()
    {
        return recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnInventTransOriginRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the RecId of the original inventory transaction originator if the current inventory transaction represents a return.
    /// </summary>
    /// <returns>The RecId of the original inventory transaction originator if the current inventory transaction represents a return.</returns>
    public RecId returnInventTransOriginRecId()
    {
        return returnInventTransOriginRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the issue status of the current inventory transaction.
    /// </summary>
    /// <returns>The issue status.</returns>
    public StatusIssue statusIssue()
    {
        return statusIssue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the receipt status of the current inventory transaction.
    /// </summary>
    /// <returns>The receipt status.</returns>
    public StatusReceipt statusReceipt()
    {
        return statusReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ID of the inventory dimension value combination for the current inventory transaction.
    /// </summary>
    /// <returns>The ID of the inventory dimension value combination.</returns>
    public InventDimId inventDimId()
    {
        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the quantity of the current inventory transaction in the inventory unit of measure.
    /// </summary>
    /// <returns>The quantity.</returns>
    public InventQty inventQty()
    {
        return inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>catchWeightQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the catch weight quantity of the current inventory transaction.
    /// </summary>
    /// <returns>The catch weight quantity of the current inventory transaction.</returns>
    public PdsCWQty catchWeightQty()
    {
        return catchWeightQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stockQtyChangeDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the date when the transaction changed the physical availability of the products in the inventory. 
    /// </summary>
    /// <returns>The date when the transaction changed the physical availability of the products in the inventory.</returns>
    public StockQtyChangeDate stockQtyChangeDate()
    {
        return stockQtyChangeDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateFinancial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the date when the inventory transaction was financially updated.
    /// </summary>
    /// <returns>The date when the inventory transaction was financially updated.</returns>
    public DateFinancial dateFinancial()
    {
        return dateFinancial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ledger voucher number associated with the current inventory transaction.
    /// </summary>
    /// <returns>The ledger voucher number associated with the current inventory transaction.</returns>
    public Voucher voucher()
    {
        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the object into a container.
    /// </summary>
    /// <returns>A container containing the packed object.</returns>
    public container pack()
    {
        return [#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the container into the current object.
    /// </summary>
    /// <param name = "_packed">The container containing a packed <c>InventTrackingDimTracingInventTransOriginDTO</c> object.</param>
    /// <returns>true, if unpacking succeeded; otherwise, false.</returns>
    public boolean unpack(container _packed)
    {
        [#CurrentList] = _packed;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventTrackingDimTracingInventTransDTO</c> class from a packed container.
    /// </summary>
    /// <param name = "_packed">The container containing a packed <c>InventTrackingDimTracingInventTransDTO</c> object.</param>
    /// <returns>A new instance of the <c>InventTrackingDimTracingInventTransDTO</c> class.</returns>
    public static InventTrackingDimTracingInventTransDTO create(container _packed)
    {
        InventTrackingDimTracingInventTransDTO inventTransDTO = InventTrackingDimTracingInventTransDTO::construct();
        inventTransDTO.unpack(_packed);
        return inventTransDTO;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>InventDim</c> record for the current inventory transaction.
    /// </summary>
    /// <returns>The <c>InventDim</c> record.</returns>
    public InventDim inventDim()
    {
        return InventDim::find(inventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current inventory transaction is a receipt.
    /// </summary>
    /// <returns>true, if the current inventory transaction is a receipt; otherwise, false.</returns>
    public boolean isReceipt()
    {
        return InventTrans::isReceiptByQty(inventQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current inventory transaction is an issue.
    /// </summary>
    /// <returns>true, if the current inventory transaction is an issue; otherwise, false.</returns>
    public boolean isIssue()
    {
        return InventTrans::isIssueByQty(inventQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferInventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the transfer inventory transaction originator.
    /// </summary>
    /// <param name = "_inventTransOriginRecId">The RecId of the originator of the current inventory transaction.</param>
    /// <returns>The transfer inventory transaction originator.</returns>
    public InventTransOrigin transferInventTransOrigin(InventTransOriginId _inventTransOriginRecId)
    {
        return InventTrans::transferInventTransOriginByOriginAndQty(_inventTransOriginRecId, InventQty);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>