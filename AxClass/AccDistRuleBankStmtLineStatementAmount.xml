<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccDistRuleBankStmtLineStatementAmount</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AccDistRuleBankStmtLineStatementAmount</c> class is the accounting distribution rule for the
/// bank statement.
/// </summary>
[SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_BankStatement), BusinessEvent_BankStatement::Reconciliation, MonetaryAmount::StatementAmount)]
class AccDistRuleBankStmtLineStatementAmount extends AccountingDistributionRule
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmLedgerPostingType</Name>
				<Source><![CDATA[
    public LedgerPostingType parmLedgerPostingType()
    {
        LedgerPostingType ledgerPostingType = LedgerPostingType::BankStatement;

        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSide</Name>
				<Source><![CDATA[
    public DebitCredit parmSide()
    {
        BankStmtISOReportEntry statementLine = BankStmtISOReportEntry::findBySourceDocumentLine(this.parmSourceDocumentLineItem().parmSourceDocumentLine().RecId);

        DebitCredit side;

        if (statementLine.AmountCreditDebitIndicator == DebitCredit::Debit)
        {
            side = DebitCredit::Credit;
        }
        else
        {
            side = DebitCredit::Debit;
        }
        return side;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize()
    {
        BankStatementLineSourceDocLineItem bankStmtLineSoDocLineItem = sourceDocumentLineItem as BankStatementLineSourceDocLineItem;
        BankStmtISOReportEntry reportEntry = bankStmtLineSoDocLineItem.getStatementLine();

        if (reportEntry.OriginSourceDocumentLine)
        {
            BankStatementLineBankDocumentInformation statementLineInformation = BankStatementLineBankDocumentInformation::findByReportEntry(reportEntry.RecId);

            AccountingDistribution originalDistribution;

            select firstonly LedgerDimension from originalDistribution
                where originalDistribution.SourceDocumentLine == reportEntry.OriginSourceDocumentLine;

            DimensionAttributeValueCombination davcOriginal = DimensionAttributeValueCombination::find(originalDistribution.LedgerDimension);
            DimensionAttributeValueCombination davcCurrent = DimensionAttributeValueCombination::find(statementLineInformation.OffsetLedgerDimension);
            if (davcOriginal.MainAccount == davcCurrent.MainAccount)
            {
                AccountingEvent accountingEvent;
                while select originalDistribution
                    join accountingEvent
                        where originalDistribution.SourceDocumentLine == reportEntry.OriginSourceDocumentLine
                            && accountingEvent.RecId == originalDistribution.AccountingEvent
                            && accountingEvent.Type == AccountingEventType::Original
                {
                    if (!ledgerDimensionAllocationList)
                    {
                        ledgerDimensionAllocationList = LedgerDimensionAllocationList::construct();
                    }

                    LedgerDimensionAccount ledgerDimensionAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(originalDistribution.LedgerDimension);

                    LedgerDimensionAllocation ledgerDimensionAllocation = LedgerDimensionAllocation::newFromParameters(
                        ledgerDimensionAccount,
                        originalDistribution.AllocationFactor,
                        DebitCredit::Credit,
                        false,
                        0,
                        AccountingDistributionReferenceRole::None,
                        0,
                        LedgerPostingType::None,
                        originalDistribution.TransactionCurrencyAmount);

                    ledgerDimensionAllocationList.addEnd(ledgerDimensionAllocation);
                }
            }
            else
            {
                super();
            }
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>