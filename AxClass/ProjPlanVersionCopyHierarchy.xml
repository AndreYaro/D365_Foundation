<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPlanVersionCopyHierarchy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjPlanVersionCopyHierarchy</c> class creates queries and insert records.
/// </summary>
public final class ProjPlanVersionCopyHierarchy
{
    private ProjPlanVersionsManagerDataContract planVersionsManagerContract;
    private HierarchyIdBase destinationHierarchyId;
    private ProjHierarchyTaskId sourceRootTaskId;
    private boolean copyRoot;
    private boolean copySmmActivityLinks;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPlanVersionsManagerContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get <c>ProjPlanVersionsManagerDataContract</c> parameter.
    /// </summary>
    /// <returns><c>ProjPlanVersionsManagerDataContract</c> parameter.</returns>
    protected ProjPlanVersionsManagerDataContract getPlanVersionsManagerContract()
    {
        return this.planVersionsManagerContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDestinationHierarchyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get destination hierarchy identifier.
    /// </summary>
    /// <returns>Destination hierarchy identifier.</returns>
    protected HierarchyIdBase getDestinationHierarchyId()
    {
        return this.destinationHierarchyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceRootTaskId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get source root task identifier.
    /// </summary>
    /// <returns>Source root task identifier</returns>
    protected ProjHierarchyTaskId getSourceRootTaskId()
    {
        return this.sourceRootTaskId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCopyRoot</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get copy root boolean.
    /// </summary>
    /// <returns>true if copy root is set to true; otherwise, false.</returns>
    protected boolean getCopyRoot()
    {
        return this.copyRoot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCopySmmActivityLinks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get copy smmActivityLinks boolean.
    /// </summary>
    /// <returns>true if copy smmActivityLinks is set to true; otherwise, false.</returns>
    protected boolean getCopySmmActivityLinks()
    {
        return this.copySmmActivityLinks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c>ProjPlanVersionCopyHierarchy</c> object for records insertion. 
    /// </summary>
    /// <param name = "_planVersionsManagerContract"><c>ProjPlanVersionsManagerDataContract</c> object to specify source hierarchy ID and customized parameters.</param>
    /// <param name = "_destHierarchyId">Destination hierarchy ID.</param>
    /// <param name = "_sourceRootTaskId">Source WBS root task ID.</param>
    /// <param name = "_copyRoot">Specifies if hierarchy root task should be copied.</param>
    /// <param name = "_copySmmActivityLinks">Specifies if links to <c>smmActivities</c>should be copied.</param>
    /// <returns>An instance of <c>ProjPlanVersionCopyHierarchy</c> object.</returns>
    public static ProjPlanVersionCopyHierarchy newForInsert(
        ProjPlanVersionsManagerDataContract _planVersionsManagerContract,
        HierarchyIdBase _destinationHierarchyId,
        ProjHierarchyTaskId _sourceRootTaskId,
        boolean _copyRoot = true,
        boolean _copySmmActivityLinks = true)
    {
        ProjPlanVersionCopyHierarchy copyHierarchyQuery = new ProjPlanVersionCopyHierarchy();
        copyHierarchyQuery.planVersionsManagerContract = _planVersionsManagerContract;
        copyHierarchyQuery.destinationHierarchyId = _destinationHierarchyId;
        copyHierarchyQuery.sourceRootTaskId = _sourceRootTaskId;
        copyHierarchyQuery.copyRoot = _copyRoot;
        copyHierarchyQuery.copySmmActivityLinks = _copySmmActivityLinks;

        return copyHierarchyQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Execute records insertion to related tables for hierarchy copy operation.
    /// </summary>
    public void insert()
    {
        this.insertProjPlanVersionRecords();

        this.insertProjDependencyRecords();

        this.insertPSAActivityEstimatesRecords();

        this.insertProjHierarchySortingRecords();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLiteralFieldsToQueryObjectProjection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds literal fields to the projection of a query object.
    /// </summary>
    /// <param name = "_projectionQueryObject">The query object to add the fields to.</param>
    protected void addLiteralFieldsToQueryObjectProjection(SysDaQueryObject _projectionQueryObject)
    {
        _projectionQueryObject.Projection().addValue(destinationHierarchyId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjPlanVersionRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert records to <c>ProjPlanVersion</c> table.
    /// </summary>
    protected void insertProjPlanVersionRecords()
    {
        this.insertRecords(
            this.getProjPlanVersionQueryObject(),
            this.getProjPlanVersionInsertObject());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProjPlanVersionFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>ProjPlanVersion</c> fields for query and insert objects.
    /// </summary>
    /// <param name = "_selectionObject">The <c>SysDaSelection</c> object.</param>
    /// <returns><c>SysDaSelection</c> object which contains <c>ProjPlanVersion</c> table fields.</returns>
    protected void addProjPlanVersionFields(SysDaSelection _selectionObject)
    {
        _selectionObject
            .add(fieldStr(ProjPlanVersion, HierarchyTaskId))
            .add(fieldStr(ProjPlanVersion, TaskName))
            .add(fieldStr(ProjPlanVersion, TaskCategory))
            .add(fieldStr(ProjPlanVersion, NumberOfResources))
            .add(fieldStr(ProjPlanVersion, ResourceCategory))
            .add(fieldStr(ProjPlanVersion, TaskStartDate))
            .add(fieldStr(ProjPlanVersion, TaskFinishDate))
            .add(fieldStr(ProjPlanVersion, TaskDuration))
            .add(fieldStr(ProjPlanVersion, TaskEffort))
            .add(fieldStr(ProjPlanVersion, TaskCostAtComplete))
            .add(fieldStr(ProjPlanVersion, TaskEffortAtComplete))
            .add(fieldStr(ProjPlanVersion, TaskEffortToComplete))
            .add(fieldStr(ProjPlanVersion, TaskProjectedEndDate))
            .add(fieldStr(ProjPlanVersion, TaskProjectedCost))
            .add(fieldStr(ProjPlanVersion, TaskProjectedRevenue))
            .add(fieldStr(ProjPlanVersion, IsTaskClosed))
            .add(fieldStr(ProjPlanVersion, IsTaskMandatory))
            .add(fieldStr(ProjPlanVersion, TaskPriority))
            .add(fieldStr(ProjPlanVersion, ActivityTaskTimeType))
            .add(fieldStr(ProjPlanVersion, UserMemo))
            .add(fieldStr(ProjPlanVersion, IsCategoryMandatory))
            .add(fieldStr(ProjPlanVersion, TaskSiblingNumber))
            .add(fieldStr(ProjPlanVersion, ParentHierarchyTaskId))
            .add(fieldStr(ProjPlanVersion, PathId))
            .add(fieldStr(ProjPlanVersion, HierarchyLevel))
            .add(fieldStr(ProjPlanVersion, EndNode))
            .add(fieldStr(ProjPlanVersion, TaskSchedulingStatus))
            .add(fieldStr(ProjPlanVersion, TaskAssignedHours));

        if (copySmmActivityLinks)
        {
            _selectionObject
                .add(fieldStr(ProjPlanVersion, HierarchyTreeTableRefRecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProjPlanVersionFieldsForQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>ProjPlanVersion</c> fields for query objects.
    /// </summary>
    /// <param name = "_selectionObject">The <c>SysDaSelection</c> object.</param>
    /// <returns><c>SysDaSelection</c> object which contains <c>ProjPlanVersion</c> table fields.</returns>
    /// <remarks>This method is added for extensibility purpose. This will be needed if user has copy from and copy to fields not matching up.</remarks>
    protected void addProjPlanVersionFieldsForQuery(SysDaSelection _selectionObject)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProjPlanVersionFieldsForInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>ProjPlanVersion</c> fields for insert objects.
    /// </summary>
    /// <param name = "_selectionObject">The <c>SysDaSelection</c> object.</param>
    /// <returns><c>SysDaSelection</c> object which contains <c>ProjPlanVersion</c> table fields.</returns>
    /// <remarks>This method is added for extensibility purpose. This will be needed if user has copy from and copy to fields name not matching up.</remarks>
    protected void addProjPlanVersionFieldsForInsert(SysDaSelection _selectionObject)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProjPlanVersionFieldsToQueryObjectWhereClause</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>ProjPlanVersion</c> where clause expression to a query object.
    /// </summary>
    /// <param name = "_projPlanVersionQueryObject">The query object to add the where clauses to.</param>
    /// <param name = "_projPlanVersion"><c>ProjPlanVersion</c> table buffer.</param>
    protected void addProjPlanVersionFieldsToQueryObjectWhereClause(
        SysDaQueryObject _projPlanVersionQueryObject,
        ProjPlanVersion  _projPlanVersion)
    {
        if (copyRoot)
        {
            _projPlanVersionQueryObject.whereClause(
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(_projPlanVersion, fieldStr(ProjPlanVersion, HierarchyId)),
                    new SysDaValueExpression(planVersionsManagerContract.parmHierarchyId())));
        }
        else
        {
            var wbsWhereClause = new SysDaAndExpression(
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(_projPlanVersion, fieldStr(ProjPlanVersion, HierarchyId)),
                    new SysDaValueExpression(planVersionsManagerContract.parmHierarchyId())),
                new SysDaNotEqualsExpression(
                    new SysDaFieldExpression(_projPlanVersion, fieldStr(ProjPlanVersion, HierarchyTaskId)),
                    new SysDaValueExpression(sourceRootTaskId)));
            
            _projPlanVersionQueryObject.whereClause(wbsWhereClause);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProjPlanVersionLiteralFieldsToInsertObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds literal fields to the <c>ProjPlanVersion</c> table insert object.
    /// </summary>
    /// <param name = "_projPlanVersionInsertObject">The insert object to add the fields to.</param>
    /// <returns>The passed in insert object with the fields added.</returns>
    protected void addProjPlanVersionLiteralFieldsToInsertObject(SysDaInsertObject _projPlanVersionInsertObject)
    {
        _projPlanVersionInsertObject.fields()
            .add(fieldStr(ProjPlanVersion, HierarchyId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjPlanVersionQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Define query object for <c>ProjPlanVersion</c> table.
    /// </summary>
    /// <returns><c>SysDaQueryObject</c> object.</returns>
    protected SysDaQueryObject getProjPlanVersionQueryObject()
    {
        ProjPlanVersion sourceWBS;
        
        SysDaQueryObject projPlanVersionQueryObject = new SysDaQueryObject(sourceWBS);
        this.addProjPlanVersionFields(projPlanVersionQueryObject.projection());
        this.addProjPlanVersionFieldsForQuery(projPlanVersionQueryObject.projection());
        this.addLiteralFieldsToQueryObjectProjection(projPlanVersionQueryObject);
        this.addProjPlanVersionFieldsToQueryObjectWhereClause(projPlanVersionQueryObject, sourceWBS);
        
        return projPlanVersionQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipProjPlanVersionLogAndDataMethods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Whether to skip <c>ProjPlanVersion</c> table logs and methods.
    /// </summary>
    /// <returns>true to skip <c>ProjPlanVersion</c> table logs and methods; otherwise, false.</returns>
    /// <remarks>This method is added for extensibility purpose.</remarks>
    protected boolean skipProjPlanVersionLogAndDataMethods()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjPlanVersionInsertObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Define insert object for <c>ProjPlanVersion</c> table.
    /// </summary>
    /// <returns><c>SysDaInsertObject</c> object.</returns>
    protected SysDaInsertObject getProjPlanVersionInsertObject()
    {
        ProjPlanVersion destWBS;
        if (this.skipProjPlanVersionLogAndDataMethods())
        {
            this.skipLogAndDataMethods(destWBS);
        }

        SysDaInsertObject projPlanVersionInsertObject = new SysDaInsertObject(destWBS);

        this.addProjPlanVersionFields(projPlanVersionInsertObject.fields());
        this.addProjPlanVersionFieldsForInsert(projPlanVersionInsertObject.fields());
        this.addProjPlanVersionLiteralFieldsToInsertObject(projPlanVersionInsertObject);
        
        return projPlanVersionInsertObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjDependencyRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert records to <c>ProjDependency</c> table.
    /// </summary>
    protected void insertProjDependencyRecords()
    {
        this.insertRecords(
            this.getProjDependencyQueryObject(),
            this.getProjDependencyInsertObject());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProjDependencyFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>ProjDependency</c> fields for query and insert operations.
    /// </summary>
    /// <param name = "_selectionObject">The <c>SysDaSelection</c> object.</param>
    /// <returns><c>SysDaSelection</c> object which contains <c>ProjDependency</c> table fields.</returns>
    protected void addProjDependencyFields(SysDaSelection _selectionObject)
    {
        _selectionObject
            .add(fieldStr(ProjDependency, PredecessorHierarchyTaskId))
            .add(fieldStr(ProjDependency, SuccessorHierarchyTaskId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProjDependencyFieldsForQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>ProjDependency</c> fields for query objects.
    /// </summary>
    /// <param name = "_selectionObject">The <c>SysDaSelection</c> object.</param>
    /// <returns><c>SysDaSelection</c> object which contains <c>ProjDependency</c> table fields.</returns>
    /// <remarks>This method is added for extensibility purpose. This will be needed if user has copy from and copy to fields not matching up.</remarks>
    protected void addProjDependencyFieldsForQuery(SysDaSelection _selectionObject)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProjDependencyFieldsForInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>ProjDependency</c> fields for insert objects.
    /// </summary>
    /// <param name = "_selectionObject">The <c>SysDaSelection</c> object.</param>
    /// <returns><c>SysDaSelection</c> object which contains <c>v</c> table fields.</returns>
    /// <remarks>This method is added for extensibility purpose. This will be needed if user has copy from and copy to fields name not matching up.</remarks>
    protected void addProjDependencyFieldsForInsert(SysDaSelection _selectionObject)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProjDependencyFieldsToQueryObjectWhereClause</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>ProjDependency</c> where clause expression to a query object.
    /// </summary>
    /// <param name = "_projDependencyQueryObject">The query object to add the where clauses to.</param>
    /// <param name = "_projDependency"><c>ProjPlanVersion</c> table buffer.</param>
    protected void addProjDependencyFieldsToQueryObjectWhereClause(
        SysDaQueryObject _projDependencyQueryObject,
        ProjDependency _projDependency)
    {
        _projDependencyQueryObject.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_projDependency, fieldStr(ProjDependency, ProjPlanHierarchyId)),
                new SysDaValueExpression(planVersionsManagerContract.parmHierarchyId())));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProjDependencyLiteralFieldsToInsertObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds literal fields to the the <c>ProjDependency</c> table insert object.
    /// </summary>
    /// <param name = "_projDependencyInsertObject">The insert object to add the fields to.</param>
    /// <returns>The passed in insert object with the fields added.</returns>
    protected void addProjDependencyLiteralFieldsToInsertObject(SysDaInsertObject _projDependencyInsertObject)
    {
        _projDependencyInsertObject.fields()
            .add(fieldStr(ProjDependency, ProjPlanHierarchyId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjDependencyQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Define query object for <c>ProjDependency</c> table.
    /// </summary>
    /// <returns><c>SysDaQueryObject</c> object.</returns>
    protected SysDaQueryObject getProjDependencyQueryObject()
    {
        ProjDependency sourceDependency;
        
        SysDaQueryObject projDependencyQueryObject = new SysDaQueryObject(sourceDependency);
        this.addProjDependencyFields(projDependencyQueryObject.projection());
        this.addProjDependencyFieldsForQuery(projDependencyQueryObject.projection());
        this.addLiteralFieldsToQueryObjectProjection(projDependencyQueryObject);
        this.addProjDependencyFieldsToQueryObjectWhereClause(projDependencyQueryObject, sourceDependency);
        
        return projDependencyQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipProjDependencyLogAndDataMethods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Whether to skip <c>ProjDependency</c> table logs and methods.
    /// </summary>
    /// <returns>true to skip <c>ProjDependency</c> table logs and methods; otherwise, false.</returns>
    /// <remarks>This method is added for extensibility purpose.</remarks>
    protected boolean skipProjDependencyLogAndDataMethods()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjDependencyInsertObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Define insert object for <c>ProjDependency</c> table.
    /// </summary>
    /// <returns><c>SysDaInsertObject</c> object.</returns>
    protected SysDaInsertObject getProjDependencyInsertObject()
    {
        ProjDependency destDependency;

        if (this.skipProjDependencyLogAndDataMethods())
        {
            this.skipLogAndDataMethods(destDependency);
        }

        SysDaInsertObject projDependencyInsertObject = new SysDaInsertObject(destDependency);

        this.addProjDependencyFields(projDependencyInsertObject.fields());
        this.addProjDependencyFieldsForInsert(projDependencyInsertObject.fields());
        this.addProjDependencyLiteralFieldsToInsertObject(projDependencyInsertObject);
        
        return projDependencyInsertObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPSAActivityEstimatesRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert records to <c>PSAActivityEstimates</c> table.
    /// </summary>
    protected void insertPSAActivityEstimatesRecords()
    {
        this.insertRecords(
            this.getPSAActivityEstimatesQueryObject(),
            this.getPSAActivityEstimatesInsertObject());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPSAActivityEstimatesFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>PSAActivityEstimates</c> fields for query and insert operations.
    /// </summary>
    /// <param name = "_selectionObject">The <c>SysDaSelection</c> object.</param>
    /// <returns><c>SysDaSelection</c> object which contains <c>PSAActivityEstimates</c> table fields.</returns>
    protected void addPSAActivityEstimatesFields(SysDaSelection _selectionObject)
    {
        _selectionObject
            .add(fieldStr(PSAActivityEstimates, ProjPlanHierarchyTaskId))
            .add(fieldStr(PSAActivityEstimates, Description))
            .add(fieldStr(PSAActivityEstimates, InventDimId))
            .add(fieldStr(PSAActivityEstimates, ItemId))
            .add(fieldStr(PSAActivityEstimates, LinePropertyId))
            .add(fieldStr(PSAActivityEstimates, ProjCategoryId))
            .add(fieldStr(PSAActivityEstimates, ProjTransType))
            .add(fieldStr(PSAActivityEstimates, Quantity))
            .add(fieldStr(PSAActivityEstimates, Resource))
            .add(fieldStr(PSAActivityEstimates, ResourceCategory))
            .add(fieldStr(PSAActivityEstimates, SalesCategory))
            .add(fieldStr(PSAActivityEstimates, TotalCostPrice))
            .add(fieldStr(PSAActivityEstimates, TotalSalesPrice))
            .add(fieldStr(PSAActivityEstimates, UnitCostPrice))
            .add(fieldStr(PSAActivityEstimates, UnitSalesPrice))
            .add(fieldStr(PSAActivityEstimates, SalesLineRefRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPSAActivityEstimatesForQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>PSAActivityEstimates</c> fields for query objects.
    /// </summary>
    /// <param name = "_selectionObject">The <c>SysDaSelection</c> object.</param>
    /// <returns><c>SysDaSelection</c> object which contains <c>PSAActivityEstimates</c> table fields.</returns>
    /// <remarks>This method is added for extensibility purpose. This will be needed if user has copy from and copy to fields not matching up.</remarks>
    protected void addPSAActivityEstimatesForQuery(SysDaSelection _selectionObject)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPSAActivityEstimatesForInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>PSAActivityEstimates</c> fields for insert objects.
    /// </summary>
    /// <param name = "_selectionObject">The <c>SysDaSelection</c> object.</param>
    /// <returns><c>SysDaSelection</c> object which contains <c>PSAActivityEstimates</c> table fields.</returns>
    /// <remarks>This method is added for extensibility purpose. This will be needed if user has copy from and copy to fields name not matching up.</remarks>
    protected void addPSAActivityEstimatesForInsert(SysDaSelection _selectionObject)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPSAActivityEstimatesFieldsToQueryObjectWhereClause</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>PSAActivityEstimates</c> where clause expression to a query object.
    /// </summary>
    /// <param name = "_psaActivityEstimatesQueryObject">The query object to add the where clauses to.</param>
    /// <param name = "_psaActivityEstimates"><c>PSAActivityEstimates</c> table buffer.</param>
    protected void addPSAActivityEstimatesFieldsToQueryObjectWhereClause(
        SysDaQueryObject _psaActivityEstimatesQueryObject,
        PSAActivityEstimates _psaActivityEstimates)
    {
        if (copyRoot)
        {
            _psaActivityEstimatesQueryObject.whereClause(
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(_psaActivityEstimates, fieldStr(PSAActivityEstimates, ProjPlanHierarchyId)),
                    new SysDaValueExpression(planVersionsManagerContract.parmHierarchyId())));
        }
        else
        {
            var estimatesWhereClause = new SysDaAndExpression(
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(_psaActivityEstimates, fieldStr(PSAActivityEstimates, ProjPlanHierarchyId)),
                    new SysDaValueExpression(planVersionsManagerContract.parmHierarchyId())),
                new SysDaNotEqualsExpression(
                    new SysDaFieldExpression(_psaActivityEstimates, fieldStr(PSAActivityEstimates, ProjPlanHierarchyTaskId)),
                    new SysDaValueExpression(sourceRootTaskId)));
            
            _psaActivityEstimatesQueryObject.whereClause(estimatesWhereClause);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPSAActivityEstimatesLiteralFieldsToInsertObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds literal fields to the <c>PSAActivityEstimates</c> table insert object.
    /// </summary>
    /// <param name = "_psaActivityEstimatesInsertObject">The insert object to add the fields to.</param>
    protected void addPSAActivityEstimatesLiteralFieldsToInsertObject(SysDaInsertObject _psaActivityEstimatesInsertObject)
    {
        _psaActivityEstimatesInsertObject.fields()
            .add(fieldStr(PSAActivityEstimates, ProjPlanHierarchyId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPSAActivityEstimatesQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Define query object for <c>PSAActivityEstimates</c> table.
    /// </summary>
    /// <returns><c>SysDaQueryObject</c> object.</returns>
    protected SysDaQueryObject getPSAActivityEstimatesQueryObject()
    {
        PSAActivityEstimates sourceEstimates;
        
        SysDaQueryObject psaActivityEstimatesQueryObject = new SysDaQueryObject(sourceEstimates);
        this.addPSAActivityEstimatesFields(psaActivityEstimatesQueryObject.projection());
        this.addPSAActivityEstimatesForQuery(psaActivityEstimatesQueryObject.projection());
        this.addLiteralFieldsToQueryObjectProjection(psaActivityEstimatesQueryObject);
        this.addPSAActivityEstimatesFieldsToQueryObjectWhereClause(psaActivityEstimatesQueryObject, sourceEstimates);
        
        return psaActivityEstimatesQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipPSAActivityEstimatesLogAndDataMethods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Whether to skip <c>PSAActivityEstimates</c> table logs and methods.
    /// </summary>
    /// <returns>true to skip <c>PSAActivityEstimates</c> table logs and methods; otherwise, false.</returns>
    /// <remarks>This method is added for extensibility purpose.</remarks>
    protected boolean skipPSAActivityEstimatesLogAndDataMethods()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPSAActivityEstimatesInsertObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Define insert object for <c>PSAActivityEstimates</c> table.
    /// </summary>
    /// <returns><c>SysDaInsertObject</c> object.</returns>
    protected SysDaInsertObject getPSAActivityEstimatesInsertObject()
    {
        PSAActivityEstimates destEstimates;

        if (this.skipPSAActivityEstimatesLogAndDataMethods())
        {
            this.skipLogAndDataMethods(destEstimates);
        }

        SysDaInsertObject psaActivityEstimatesInsertObject = new SysDaInsertObject(destEstimates);

        this.addPSAActivityEstimatesFields(psaActivityEstimatesInsertObject.fields());
        this.addPSAActivityEstimatesForInsert(psaActivityEstimatesInsertObject.fields());
        this.addPSAActivityEstimatesLiteralFieldsToInsertObject(psaActivityEstimatesInsertObject);
        
        return psaActivityEstimatesInsertObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjHierarchySortingRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert records to <c>ProjHierarchySorting</c> table.
    /// </summary>
    protected void insertProjHierarchySortingRecords()
    {
        this.insertRecords(
            this.getProjHierarchySortingQueryObject(),
            this.getProjHierarchySortingInsertObject());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProjHierarchySortingFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>ProjHierarchySorting</c> fields for query and insert operations.
    /// </summary>
    /// <param name = "_selectionObject">The <c>SysDaSelection</c> object.</param>
    /// <returns><c>SysDaSelection</c> object which contains <c>ProjHierarchySorting</c> table fields.</returns>
    protected void addProjHierarchySortingFields(SysDaSelection _selectionObject)
    {
        _selectionObject
            .add(fieldStr(ProjHierarchySorting, Type))
            .add(fieldStr(ProjHierarchySorting, RefNodeId))
            .add(fieldStr(ProjHierarchySorting, HierarchyLevel1))
            .add(fieldStr(ProjHierarchySorting, HierarchyLevel2))
            .add(fieldStr(ProjHierarchySorting, HierarchyLevel3))
            .add(fieldStr(ProjHierarchySorting, HierarchyLevel4))
            .add(fieldStr(ProjHierarchySorting, HierarchyLevel5))
            .add(fieldStr(ProjHierarchySorting, HierarchyLevel6))
            .add(fieldStr(ProjHierarchySorting, HierarchyLevel7))
            .add(fieldStr(ProjHierarchySorting, HierarchyLevel8))
            .add(fieldStr(ProjHierarchySorting, HierarchyLevel9))
            .add(fieldStr(ProjHierarchySorting, HierarchyLevel10))
            .add(fieldStr(ProjHierarchySorting, HierarchyLevel11))
            .add(fieldStr(ProjHierarchySorting, HierarchyLevel12))
            .add(fieldStr(ProjHierarchySorting, HierarchyLevel13))
            .add(fieldStr(ProjHierarchySorting, HierarchyLevel14))
            .add(fieldStr(ProjHierarchySorting, HierarchyLevel15))
            .add(fieldStr(ProjHierarchySorting, HierarchyLevel16))
            .add(fieldStr(ProjHierarchySorting, HierarchyLevel17))
            .add(fieldStr(ProjHierarchySorting, HierarchyLevel18))
            .add(fieldStr(ProjHierarchySorting, HierarchyLevel19))
            .add(fieldStr(ProjHierarchySorting, HierarchyLevel20))
            .add(fieldStr(ProjHierarchySorting, HierarchyLevel21))
            .add(fieldStr(ProjHierarchySorting, HierarchyLevel22))
            .add(fieldStr(ProjHierarchySorting, HierarchyLevel23))
            .add(fieldStr(ProjHierarchySorting, HierarchyLevel24))
            .add(fieldStr(ProjHierarchySorting, HierarchyLevel25))
            .add(fieldStr(ProjHierarchySorting, HierarchyLevel26))
            .add(fieldStr(ProjHierarchySorting, HierarchyLevel27))
            .add(fieldStr(ProjHierarchySorting, HierarchyLevel28))
            .add(fieldStr(ProjHierarchySorting, HierarchyLevel29))
            .add(fieldStr(ProjHierarchySorting, HierarchyLevel30));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProjHierarchySortingFieldsForQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>ProjHierarchySorting</c> fields for query objects.
    /// </summary>
    /// <param name = "_selectionObject">The <c>SysDaSelection</c> object.</param>
    /// <returns><c>SysDaSelection</c> object which contains <c>ProjHierarchySorting</c> table fields.</returns>
    /// <remarks>This method is added for extensibility purpose. This will be needed if user has copy from and copy to fields not matching up.</remarks>
    protected void addProjHierarchySortingFieldsForQuery(SysDaSelection _selectionObject)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProjHierarchySortingFieldsForInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>ProjHierarchySorting</c> fields for insert objects.
    /// </summary>
    /// <param name = "_selectionObject">The <c>SysDaSelection</c> object.</param>
    /// <returns><c>SysDaSelection</c> object which contains <c>ProjHierarchySorting</c> table fields.</returns>
    /// <remarks>This method is added for extensibility purpose. This will be needed if user has copy from and copy to fields name not matching up.</remarks>
    protected void addProjHierarchySortingFieldsForInsert(SysDaSelection _selectionObject)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProjHierarchySortingFieldsToQueryObjectWhereClause</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>ProjHierarchySorting</c> where clause expression to a query object.
    /// </summary>
    /// <param name = "_projHierarchySortingQueryObject">The query object to add the where clauses to.</param>
    /// <param name = "_projHierarchySorting"><c>ProjHierarchySorting</c> table buffer.</param>
    protected void addProjHierarchySortingFieldsToQueryObjectWhereClause(
        SysDaQueryObject _projHierarchySortingQueryObject,
        ProjHierarchySorting _projHierarchySorting)
    {
        if (copyRoot)
        {
            _projHierarchySortingQueryObject.whereClause(
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(_projHierarchySorting, fieldStr(ProjHierarchySorting, RefId)),
                    new SysDaValueExpression(planVersionsManagerContract.parmHierarchyId())));
        }
        else
        {
            var estimatesWhereClause = new SysDaAndExpression(
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(_projHierarchySorting, fieldStr(ProjHierarchySorting, RefId)),
                    new SysDaValueExpression(planVersionsManagerContract.parmHierarchyId())),
                new SysDaNotEqualsExpression(
                    new SysDaFieldExpression(_projHierarchySorting, fieldStr(ProjHierarchySorting, RefNodeId)),
                    new SysDaValueExpression(sourceRootTaskId)));
            
            _projHierarchySortingQueryObject.whereClause(estimatesWhereClause);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProjHierarchySortingLiteralFieldsToInsertObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds literal fields to the <c>ProjHierarchySorting</c> table insert object.
    /// </summary>
    /// <param name = "_projHierarchySortingInsertObject">The insert object to add the fields to.</param>
    protected void addProjHierarchySortingLiteralFieldsToInsertObject(SysDaInsertObject _projHierarchySortingInsertObject)
    {
        _projHierarchySortingInsertObject.fields()
            .add(fieldStr(ProjHierarchySorting, RefId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjHierarchySortingQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Define query object for <c>ProjHierarchySorting</c> table.
    /// </summary>
    /// <returns><c>SysDaQueryObject</c> object.</returns>
    protected SysDaQueryObject getProjHierarchySortingQueryObject()
    {
        ProjHierarchySorting sourceSorting;
        
        SysDaQueryObject projHierarchySortingQueryObject = new SysDaQueryObject(sourceSorting);
        this.addProjHierarchySortingFields(projHierarchySortingQueryObject.projection());
        this.addProjHierarchySortingFieldsForQuery(projHierarchySortingQueryObject.projection());
        this.addLiteralFieldsToQueryObjectProjection(projHierarchySortingQueryObject);
        this.addProjHierarchySortingFieldsToQueryObjectWhereClause(projHierarchySortingQueryObject, sourceSorting);
        
        return projHierarchySortingQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipProjHierarchySortingLogAndDataMethods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Whether to skip <c>ProjHierarchySorting</c> table logs and methods.
    /// </summary>
    /// <returns>true to skip <c>ProjHierarchySorting</c> table logs and methods; otherwise, false.</returns>
    /// <remarks>This method is added for extensibility purpose.</remarks>
    protected boolean skipProjHierarchySortingLogAndDataMethods()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjHierarchySortingInsertObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Define insert object for <c>ProjHierarchySorting</c> table.
    /// </summary>
    /// <returns><c>SysDaInsertObject</c> object.</returns>
    protected SysDaInsertObject getProjHierarchySortingInsertObject()
    {
        ProjHierarchySorting destProjHierarchySorting;

        if (this.skipProjHierarchySortingLogAndDataMethods())
        {
            this.skipLogAndDataMethods(destProjHierarchySorting);
        }

        SysDaInsertObject projHierarchySortingInsertObject = new SysDaInsertObject(destProjHierarchySorting);

        this.addProjHierarchySortingFields(projHierarchySortingInsertObject.fields());
        this.addProjHierarchySortingFieldsForInsert(projHierarchySortingInsertObject.fields());
        this.addProjHierarchySortingLiteralFieldsToInsertObject(projHierarchySortingInsertObject);
        
        return projHierarchySortingInsertObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecords</Name>
				<Source><![CDATA[
    private void insertRecords(SysDaQueryObject _queryObject, SysDaInsertObject _insertObject)
    {
        _insertObject.query(_queryObject);

        SysDaInsertStatement wbsInsertStatement = new SysDaInsertStatement();

        wbsInsertStatement.execute(_insertObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipLogAndDataMethods</Name>
				<Source><![CDATA[
    private void skipLogAndDataMethods(Common _record)
    {
        // Skip database log and event to improve performance.
        _record.skipDatabaseLog(true);
        _record.skipDataMethods(true);
        _record.skipEvents(true);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>