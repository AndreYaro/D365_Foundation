<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustTableForm_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Xrm.Sdk;

[ExtensionOf(formStr(CustTable))]
internal final class CustTableForm_ApplicationSuite_Extension
{
    private AppCopilotSummaryControlBuilder summaryControlBuilder;
    private CustTableCopilotSummaryGenerator summaryGenerator;
    private AppCopilotSummaryController controller;
    private boolean isCustCopilotSummaryFeatureEnabled;
    private boolean isCacheEnabled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        next init();

        isCustCopilotSummaryFeatureEnabled =
            FeatureStateProvider::isFeatureEnabled(CustTableCopilotSummaryFeature::instance())
            && SysDataverseUtility::IsDataverseLinked();

        if (isCustCopilotSummaryFeatureEnabled && CustTableCopilotSummaryDataProvider::hasPermissions())
        {
            summaryGenerator = new CustTableCopilotSummaryGenerator();
            summaryControlBuilder = summaryGenerator.initAppCopilotSummaryControlBuilder(this, CopilotSummary);
            isCacheEnabled = CustTableCopilotSummaryCacheFlight::instance().isEnabled();

            TabCopilotSummary.visible(true);

            this.registerGenerator();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerGenerator</Name>
				<Source><![CDATA[
    private void registerGenerator()
    {
        controller = AppCopilotSummaryController::newFromBuilder(summaryControlBuilder, UserLicenseType::Finance);
        controller.registerPreGenerationCallback(formMethodStr(CustTable, isProceedGeneration));
        controller.registerGetRecordKeyInTelemetryCallback(formMethodStr(CustTable, getRecordIdInTelemetry));

        if (CustTableCopilotSummaryDataProvider::hasPermissionsForStatusTopic())
        {
            controller.registerSummaryGenerator(
                CustTableCopilotSummaryGenerator::StatusTopic,
                formMethodStr(CustTable, getStatusParameters),
                classNum(CustTableCopilotSummaryGenerator),
                staticMethodStr(CustTableCopilotSummaryGenerator, processSummaryAsync),
                formMethodStr(CustTable, processStatusSummaryCallback),
                isCacheEnabled,
                formMethodStr(CustTable, getCacheKey),
                staticMethodStr(CustTableCopilotSummaryGenerator, validateSummaryResult));
        }

        if (CustTableCopilotSummaryDataProvider::hasPermissionsForInsightsTopic())
        {
            controller.registerSummaryGenerator(
                CustTableCopilotSummaryGenerator::InsightsTopic,
                formMethodStr(CustTable, getInsightsParameters),
                classNum(CustTableCopilotSummaryGenerator),
                staticMethodStr(CustTableCopilotSummaryGenerator, processSummaryAsync),
                formMethodStr(CustTable, processInsightsSummaryCallback),
                isCacheEnabled,
                formMethodStr(CustTable, getCacheKey),
                staticMethodStr(CustTableCopilotSummaryGenerator, validateSummaryResult));
        }

        controller.trackDataSource(CustTable_ds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProceedGeneration</Name>
				<Source><![CDATA[
    internal boolean isProceedGeneration()
    {
        boolean ret = false;

        if (CustTableCopilotSummaryDataProvider::canAnyCustomerDataBeAnalyzed(CustTable))
        {
            ret = true;
        }
        else
        {
            summaryControlBuilder.resetControls();

            // Status topic
            if (CustTableCopilotSummaryDataProvider::isCustomerOnhold(CustTable))
            {
                summaryControlBuilder.updateTopicContent(CustTableCopilotSummaryGenerator::StatusTopic, "@AccountsReceivable:CustTableCopilotSummaryCustomerOnHold");
            }
            else
            {
                summaryControlBuilder.updateTopicContent(CustTableCopilotSummaryGenerator::StatusTopic, "@AppCopilotSummaryControl:NoDataToSummarize");
            }

            // Insights topic
            summaryControlBuilder.updateTopicContent(CustTableCopilotSummaryGenerator::InsightsTopic, "@AppCopilotSummaryControl:NoDataToSummarize");

            summaryControlBuilder.displayTopicContent();

            if (CustTableCopilotSummaryCacheFlight::instance().isEnabled())
            {
                utcdatetime lastGeneratedDateTime = DateTimeUtil::getSystemDateTime();
                summaryControlBuilder.setLastGeneratedDateTime(lastGeneratedDateTime);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        next run();

        if (controller)
        {
            controller.registerEvents();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStatusParameters</Name>
				<Source><![CDATA[
    private container getStatusParameters()
    {
        return [CustTable.AccountNum, CustTableCopilotSummaryConstants::CustomerStatusSummaryWebAPIName, controller.parmUniqueCorrelationId()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInsightsParameters</Name>
				<Source><![CDATA[
    private container getInsightsParameters()
    {
        return [CustTable.AccountNum, CustTableCopilotSummaryConstants::CustomerInsightsSummaryWebAPIName, controller.parmUniqueCorrelationId()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>processStatusSummaryCallback</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the summary status field of the form with the response from copilot.
    /// </summary>
    /// <param name = "_result">Result received from copilot.</param>
    [Hookable(false)]
    internal void processStatusSummaryCallback(AsyncTaskResult _result)
    {
        CustTableCopilotSummaryGenerator::summaryCallBackAsync(
            CustTableCopilotSummaryConstants::CustomerStatusSummaryWebAPIName,
            this,
            summaryGenerator,
            _result,
            controller);

        if (!CustTableCopilotSummaryDataProvider::hasPermissionsForInsightsTopic())
        {
            summaryControlBuilder.updateTopicContent(CustTableCopilotSummaryGenerator::InsightsTopic, "@AppCopilotSummaryControl:NoDataToSummarize");
            summaryControlBuilder.displayTopicContent();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInsightsSummaryCallback</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the summary insights field of the form with the response from copilot.
    /// </summary>
    /// <param name = "_result">Result received from copilot.</param>
    [Hookable(false)]
    internal void processInsightsSummaryCallback(AsyncTaskResult _result)
    {
        CustTableCopilotSummaryGenerator::summaryCallBackAsync(
            CustTableCopilotSummaryConstants::CustomerInsightsSummaryWebAPIName,
            this,
            summaryGenerator,
            _result,
            controller);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cache key.
    /// </summary>
    /// <returns>The container for cache key.</returns>
    internal container getCacheKey()
    {
        return [CustTable.AccountNum, curExt(), curUserId(), currentUserLanguage()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordIdInTelemetry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record id in telemetry.
    /// </summary>
    /// <returns>The record id which to be logged int the telemetry.</returns>
    internal RecId getRecordIdInTelemetry()
    {
        return CustTable.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>