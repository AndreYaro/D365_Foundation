<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchCalcTax_PurchOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
class       PurchCalcTax_PurchOrder
extends     PurchCalcTax
{
    VendPurchOrderJour      vendPurchOrderJour;
    PurchTable              purchTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    CurrencyCode currencyCode()
    {
        return purchTable.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    VendExchRate exchRate(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return vendPurchOrderJour.ExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    ExchrateSecondary exchRateSecondary(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return vendPurchOrderJour.ExchRateSecondary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingCurrencyExchangeRate</Name>
				<Source><![CDATA[
    internal ReportingCurrencyExchRate reportingCurrencyExchangeRate(date _date = dateNull())
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursor</Name>
				<Source><![CDATA[
    void  initCursor()
    {
        select nofetch forupdate purchLine
            where purchLine.PurchId == vendPurchOrderJour.PurchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxIncluded</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether tax is included in the item price for the purchase order document.
    /// </summary>
    /// <returns>
    ///    true if tax is included in item price; otherwise, false.
    /// </returns>
    public boolean isTaxIncluded()
    {
        return purchTable.InclTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAmount</Name>
				<Source><![CDATA[
    MarkupAmount  markupAmount()
    {
        return markupTrans.CalculatedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupDefaultDimension</Name>
				<Source><![CDATA[
    DimensionDefault markupDefaultDimension()
    {
            return purchLine.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new <c>PurchCalcTax</c> object.
    /// </summary>
    /// <param name="_vendPurchOrderJour">
    /// The record for which tax will be calculated.
    /// This class has been elevated to support multiple purchase order journal types.
    /// That is why the parameter is of type Common.
    /// </param>
    public void new(Common _vendPurchOrderJour)
    {
        PurchTableVersion purchTableVersion;

        super(_vendPurchOrderJour);

        // to support the base type that uses other journal type
        if (_vendPurchOrderJour is VendPurchOrderJour)
        {
            vendPurchOrderJour  = _vendPurchOrderJour;
            purchTable          = vendPurchOrderJour.purchTable();
            purchTableVersion   = PurchTableVersion::find(vendPurchOrderJour.PurchTableVersion);

            update              = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    Common nextLine()
    {
        next purchLine;

        this.initCursorMarkupLine(purchLine.TableId, purchLine.RecId);

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>origHeadingRecID</Name>
				<Source><![CDATA[
    RecId  origHeadingRecID()
    {
        return purchTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>origHeadingTableID</Name>
				<Source><![CDATA[
    TableId  origHeadingTableID()
    {
        return purchTable.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchMarkupRecId</Name>
				<Source><![CDATA[
    RecId  purchMarkupRecId()
    {
        return markupTrans.TransRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchMarkupTableId</Name>
				<Source><![CDATA[
    TableId  purchMarkupTableId()
    {
        return markupTrans.TransTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTax</Name>
				<Source><![CDATA[
    void  setTax(TaxWriteCode   taxWriteCode,
                 AmountCur      amountCur)
    {
        if (    purchLine.ConfirmedTaxWriteCode != taxWriteCode
            ||  purchLine.ConfirmedTaxAmount    != amountCur)
        {
            purchLine.ConfirmedTaxWriteCode    = taxWriteCode;
            purchLine.ConfirmedTaxAmount       = amountCur;
            purchLine.IsModified               = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the tax processing attributes on the current <c>MarkupTransHistory</c> record.
    /// </summary>
    /// <param name="taxWriteCode">
    /// The value to assign to the <c>TaxWriteCode</c> field.
    /// </param>
    /// <param name="amountCur">
    /// A value to assign to the <c>TaxAmount</c> field.
    /// </param>
    /// <remarks>
    /// If any of the attributes are currently stored in the <c>MarkupTransHistory</c> record and that
    /// record is shared by multiple order versions, it will be split and the request values will be used
    /// only for the current version.
    /// </remarks>
    void setTaxMarkup(TaxWriteCode taxWriteCode, AmountCur amountCur)
    {
        if (    markupTrans.TaxWriteCode   != taxWriteCode
            ||  markupTrans.TaxAmount      != amountCur)
        {
            markupTrans.IsModified      = NoYes::Yes;
        }

        super(taxWriteCode, amountCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmount</Name>
				<Source><![CDATA[
    AmountCur  transLineAmount()
    {
        return purchLine.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmountInclTax</Name>
				<Source><![CDATA[
    AmountCur  transLineAmountInclTax()
    {
        return purchLine.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    PurchQty    transQty()
    {
        return purchLine.PurchQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTransId</Name>
				<Source><![CDATA[
    public TradeInventTransId transTransId()
    {
        return purchLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    EUROTriangulation triangulation(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return vendPurchOrderJour.Triangulation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSubLedgerJournalLines</Name>
				<Source><![CDATA[
    boolean useSubLedgerJournalLines()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>Tax</c> class should use the <c>TaxUncommitted</c> table.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    public boolean useTaxUncommitted()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates instance of <c>PurchCalcTax_PurchOrder</c> class.
    /// </summary>
    /// <param name="_source">
    /// The record for which tax will be calculated.
    /// </param>
    /// <returns>
    /// Instance of <c>PurchCalcTax_PurchOrder</c> class.
    /// </returns>
    public static PurchCalcTax_PurchOrder construct(Common _source)
    {
        switch (_source.TableId)
        {
            case tableNum(VendPurchOrderJour):
                return PurchCalcTax_PurchConfirmation::construct(_source);
            case tableNum(PurchConfirmationRequestJour):
                return PurchCalcTax_PurchConfirmationRequest::construct(_source);
            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRecalculateTax</Name>
				<Source><![CDATA[
    public boolean canRecalculateTax()
    {
        Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource taxEventSourceLog = Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource::Log;
        boolean ret = true;

        if (purchTable.SourceDocumentHeader)
        {
            ret = SourceDocumentAccountingValidator::canCalculateTaxesForDocument(purchTable.SourceDocumentHeader);
        }

        if(TaxUncommitted::traceRecalculateTaxForFinalizedSourceDocument(ret))
        {
            str callStacking = TaxUncommitted::callStackInfo();
            taxEventSourceLog.RecalculateTaxForFinalizedSourceDocument(tableId2Name(tableNum(purchTable)), purchTable.SourceDocumentHeader, callStacking);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>