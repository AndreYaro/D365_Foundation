<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailStorePicker</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>RetailStorePicker</c> is used to select store number to create statement.
/// </summary>
class RetailStorePicker extends RunBase
{
    DialogRunbase   dialog;
    DialogField     fieldStoreId;
    DialogField     fieldStoreName;

    RetailStoreId   storeId;
    RetailStoreName storeName;

    RetailStatementType statementType = RetailStatementType::Complete;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        //@RET260747 Select store number to create statement
        ClassDescription caption = "@RET260747";

        if (statementType == RetailStatementType::Transactional || statementType == RetailStatementType::Financial)
        {
            caption = strFmt("@Retail:RetailStorePickerDialog", strLwr(enum2Str(statementType)));
        }
        
        return caption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    Object dialog()
    {
        dialog = super();

        fieldStoreId = dialog.addFieldValue(extendedtypestr(RetailStoreId), storeId, "@RET3600","@RET3601");
        fieldStoreId.value(RetailSharedParameters::find().LocalStoreId);

        // set the store name according to selected store id.
        fieldStoreName  = dialog.addFieldValue(extendedtypestr(RetailStoreName), storeName);
        fieldStoreName.value(RetailStoreTable::find(fieldStoreId.value()).name());
        fieldStoreName.enabled(false);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exectues the sequence of actions after the <c>run</c> method is executed .
    /// </summary>
    /// <param name="_dialog">
    /// An instance of <c>DialogRunbase</c> class.
    /// </param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);

        fieldStoreId.registerOverrideMethod(methodstr(FormStringControl, modified), methodstr(RetailStorePicker, storeIdModified), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeIdModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for dialog field.
    /// </summary>
    /// <param name="control">
    /// An instance of the store id control.
    /// </param>
    /// <returns>
    /// A boolean value based on the field modification.
    /// </returns>
    public boolean storeIdModified(FormStringControl control)  // fieldUpdateMethod
    {
        boolean ret;

        ret = control.modified();

        if (ret)
        {
            fieldStoreName.value(RetailStoreTable::find(fieldStoreId.value()).name());
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the store Id value.
    /// </summary>
    /// <returns>
    /// A boolean value, true.
    /// </returns>
    public boolean getFromDialog()
    {
        storeId = fieldStoreId.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run(boolean _skipFormRunWait = false)
    {
        RetailStatementTable        statementTable;
        RetailStoreTable            staoreTable;

        #define.RetailStatementTable('StatementTable')
        #sysSystemDefinedButtons;

        FormRun formRun;
        Args args = new Args();
        staoreTable = RetailStoreTable::find(storeId);

        statementTable.storeId = storeId;
        statementTable.StatementType = statementType;

        args.record(statementTable);
        args.caller(this);
        args.openMode(OpenMode::Edit);
        args.formViewOption(FormViewOption::Details);

        MenuFunction mf = new MenuFunction(this.getMenuItemStr(), MenuItemType::Display);
        formRun = mf.create(args);

        if (!_skipFormRunWait)
        {
            formRun.run();
            formRun.dataSource(#RetailStatementTable).create();
            formRun.dataSource(#RetailStatementTable).write();

            if (!RetailStorePickerSkipFormRunWaitCallForCreateNewStatementFormFlight::instance().isEnabled())
            {
                formRun.wait();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the store and checks for the existance of the store.
    /// </summary>
    /// <param name="calledFrom">
    /// An instance of <c>Object</c>.
    /// </param>
    /// <returns>
    /// A boolean value, true if a valid store is present; otherwise false.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = true;

        if (storeId == '')
        {
            ret = checkFailed("@RET4145");
        }

        if (ret && !RetailStoreTable::find(fieldStoreId.value()))
        {
            //@RET260746 Store number %1 is not found in table %2.
            ret = checkFailed(strFmt("@RET260746", fieldStoreId.value(), tableId2Name(Tablenum(RetailStoreTable))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        if (RetailEodStatementFeatureHelper::isNewEodEnabled())
        {
            str dictMenuLabel = "@Retail:RetailEodRetailStatementsLabel";

            // Your system is configured to use the new statement posting process. Please use the form "Open statement" to execute using the new process.
            throw error (strFmt("@Retail:RetailEodKeyEnabledFormError", dictMenuLabel));
        }

        RetailStorePicker storePicker = new RetailStorePicker();

        if (storePicker.prompt())
        {
            storePicker.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMenuItemStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get form display menu item string.
    /// </summary>
    /// <returns>Menu item string.</returns>
    protected str getMenuItemStr()
    {
        return menuItemDisplayStr(RetailStatementTable);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>