<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgStampJournalApprove</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgStampJournalApprove</c> class approves the registrations for workers.
/// </summary>
public final class JmgStampJournalApprove
{
    JmgStampJournalTable    jmgStampJournalTable;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmJmgStampJournalTable</Name>
				<Source><![CDATA[
    final protected JmgStampJournalTable parmJmgStampJournalTable(JmgStampJournalTable _jmgStampJournalTable = jmgStampJournalTable)
    {
        JmgStampJournalTable = _jmgStampJournalTable;
        return JmgStampJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>JmgStampJournalApprove</c> class instance.
    /// </summary>
    /// <returns>
    /// The <c>JmgStampJournalApprove</c> class instance.
    /// </returns>
    [Hookable(false)]
    public static JmgStampJournalApprove construct()
    {
        return new JmgStampJournalApprove();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>JmgStampJournalApprove</c> class.
    /// </summary>
    /// <param name = "_jmgStampJournalTable">
    /// A <c>JmgStampJournalTable</c> record buffer.
    /// </param>
    /// <returns>
    /// The <c>JmgStampJournalApprove</c> class instance.
    /// </returns>
    [Hookable(false)]
    public static JmgStampJournalApprove newFromJournalTable(JmgStampJournalTable _jmgStampJournalTable)
    {
        JmgStampJournalApprove jmgStampJournal = JmgStampJournalApprove::construct();

        jmgStampJournal.parmJmgStampJournalTable(_jmgStampJournalTable);
        return jmgStampJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes from a <c>JmgStampJournalTransfer</c> object.
    /// </summary>
    /// <param name = "_transfer">
    /// A <c>JmgStampJournalTransfer</c> object.
    /// </param>
    public void initializeFromTransfer(JmgStampJournalTransfer _transfer)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates registrations that are associated to the <c>JmgStampJournalTable</c> record.
    /// </summary>
    protected void calculate()
    {
        JmgStampJournalCalculate calculate = JmgStampJournalCalculate::newFromJournalTable(jmgStampJournalTable);
        calculate.initializeFromApprove(this);
        calculate.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCalculate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to perform calculation before transfer.
    /// </summary>
    /// <returns>
    /// true if needs to be perform the calculation; otherwise, false.
    /// </returns>
    protected boolean mustCalculate()
    {
        return !jmgStampJournalTable.Calculated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCalculated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the calculation has been performed.
    /// </summary>
    /// <returns>
    /// true if calculation has been performed; otherwise, false.
    /// </returns>
    protected boolean isCalculated()
    {
        return jmgStampJournalTable.Calculated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>approveDayJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the approval fields on the journal table.
    /// </summary>
    /// <param name = "_error">
    /// An error value.
    /// </param>
    /// <param name = "_approved">
    /// A boolean value that indicates whether the journal is approved
    /// </param>
    /// <param name = "_setWorker">
    /// A boolean value that indicates whether the <c>ApprovedByWorker</c> should be set.
    /// </param>
    /// <param name = "_approvedWorker">
    /// A <c>JmgWorkerRecId</c> value.
    /// </param>
    protected void approveDayJournal(Log _error, NoYes _approved, boolean _setWorker = false, JmgWorkerRecId _approvedWorker = HcmWorker::userId2Worker(curUserId()))
    {
        jmgStampJournalTable.setError(_error);
        jmgStampJournalTable.Approved = _approved;
        if (_setWorker)
        {
            jmgStampJournalTable.ApprovedByWorker = _approvedWorker;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLogBookQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an <c>Query</c> object for selecting <c>JmgStampJournalTrans</c> records.
    /// </summary>
    /// <returns>
    /// An <c>Query</c> object.
    /// </returns>
    protected Query buildLogBookQuery()
    {
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSourceJournalTrans = query.addDataSource(tableNum(JmgStampJournalTrans));

        queryBuildDataSourceJournalTrans.update(true);
        queryBuildDataSourceJournalTrans.addRange(fieldNum(JmgStampJournalTrans, Worker)).value(queryValue(jmgStampJournalTable.Worker));
        queryBuildDataSourceJournalTrans.addRange(fieldNum(JmgStampJournalTrans, ProfileDate)).value(queryValue(jmgStampJournalTable.ProfileDate));
        queryBuildDataSourceJournalTrans.addRange(fieldNum(JmgStampJournalTrans, StampType)).value(queryValue(JmgStampTypeEnum::Absence));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>approve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Approves the registrations that are associated with the <c>JmgStampJournalTable</c> record.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// An attempt is made to approve registrations on a future profile date.
    /// </exception>
    public boolean approve()
    {
        HRMAbsenceCode          hrmAbsenceCode;
        HRMAbsenceCodeGroup     hrmAbsenceCodeGroup;
        JmgPayAgreementTable    jmgPayAgreementTable;
        JmgStampJournalTrans    jmgStampJournalTrans;
        boolean                 absenceError;
        JmgCalcApproveForm      jmgCalcApproveForm = JmgCalcApproveForm::construct();

        if (jmgStampJournalTable.Transferred)
        {
            return false;
        }

        if (this.mustCalculate())
        {
            this.calculate();
        }

        if (jmgStampJournalTable.ProfileDate > JmgProfileSeconds::getSysDate())
        {
            throw error("@SYS41405");
        }

        ttsbegin;
        if (this.isCalculated())
        {
            setPrefix(#PreFixField(jmgStampJournalTable, Worker));

            this.approveDayJournal('', NoYes::Yes, true);

            jmgPayAgreementTable = JmgPayAgreementTable::find(jmgStampJournalTable.PayAgreement);
            if (!jmgPayAgreementTable)
            {
                jmgPayAgreementTable = JmgPayAgreementTable::find(JmgEmployee::find(jmgStampJournalTable.Worker).PayAgreement);
            }
            if (((jmgPayAgreementTable.ValidFrom <= jmgStampJournalTable.ProfileDate) && (jmgPayAgreementTable.ValidTo >= jmgStampJournalTable.ProfileDate)) || (!jmgPayAgreementTable))
            {
                QueryRun queryRun = new QueryRun(this.buildLogBookQuery());

                while (queryRun.next())
                {
                    jmgStampJournalTrans = queryRun.get(tableNum(JmgStampJournalTrans));
                    setPrefix(#PreFixField(jmgStampJournalTrans, TransId));

                    if (jmgStampJournalTrans.Seconds == 0)
                    {
                        jmgStampJournalTrans.delete();
                        jmgCalcApproveForm.transactionDeleted(jmgStampJournalTrans);
                    }
                    else
                    {
                        if (! jmgStampJournalTrans.JobRef)
                        {
                            absenceError                         = true;
                            jmgStampJournalTrans.Log            = "@SYS38501";
                            jmgStampJournalTrans.update();
                            jmgCalcApproveForm.transactionUpdated(jmgStampJournalTrans);
                        }
                        else
                        {
                            if (! jmgStampJournalTrans.JobIDAbs)
                            {
                                absenceError                     = true;
                                jmgStampJournalTrans.Log        = "@SYS38502";
                                jmgStampJournalTrans.update();
                                jmgCalcApproveForm.transactionUpdated(jmgStampJournalTrans);
                            }
                        }
                        if (! absenceError)
                        {
                            hrmAbsenceCode = HRMAbsenceCode::findByJobId(jmgStampJournalTrans.JobIDAbs);

                            if (hrmAbsenceCode)
                            {
                                hrmAbsenceCodeGroup = HRMAbsenceCodeGroup::find(hrmAbsenceCode.HrmAbsenceCodeGroupId);

                                if (hrmAbsenceCodeGroup)
                                {
                                    if (hrmAbsenceCodeGroup.JmgAbsenceFlex)
                                        jmgStampJournalTrans.StampTypeSpec = hrmAbsenceCodeGroup.JmgAbsenceIllegal ? JmgStampTypeSpecEnum::AbsIllegalFlex : JmgStampTypeSpecEnum::AbsLegalFlex;
                                    else
                                        jmgStampJournalTrans.StampTypeSpec = hrmAbsenceCodeGroup.JmgAbsenceIllegal ? JmgStampTypeSpecEnum::AbsIllegal : JmgStampTypeSpecEnum::AbsLegal;

                                    if ((hrmAbsenceCode.JmgAbsenceMethodEnum == JmgAbsenceMethodEnum::Qty) && (!jmgStampJournalTrans.AbsencePayQty) && (!jmgStampJournalTable.WorkSeconds))
                                    {
                                        jmgStampJournalTrans.AbsencePayQty = hrmAbsenceCode.JmgAbsencePayQty;
                                    }

                                    if ((hrmAbsenceCode.JmgAbsenceMethodEnum==JmgAbsenceMethodEnum::Qty) && (!jmgStampJournalTrans.AbsencePayQty))
                                    {
                                        absenceError                = true;
                                        jmgStampJournalTrans.Log    = "@SYS38508";
                                        jmgStampJournalTrans.update();
                                        jmgCalcApproveForm.transactionUpdated(jmgStampJournalTrans);
                                    }
                                }
                                else
                                {
                                    absenceError                 = true;
                                    jmgStampJournalTrans.Log    = "@SYS38507";
                                    jmgStampJournalTrans.update();
                                    jmgCalcApproveForm.transactionUpdated(jmgStampJournalTrans);
                                }
                            }
                            else
                            {
                                absenceError                 = true;
                                jmgStampJournalTrans.Log    = "@SYS38507";
                                jmgStampJournalTrans.update();
                                jmgCalcApproveForm.transactionUpdated(jmgStampJournalTrans);
                            }
                        }

                        if (! absenceError)
                        {
                            jmgStampJournalTrans.Log = "";
                            jmgStampJournalTrans.update();
                            jmgCalcApproveForm.transactionUpdated(jmgStampJournalTrans);
                        }
                    }
                }

                if (absenceError)
                {
                    this.approveDayJournal("@SYS38457", NoYes::No, false);
                }
                else
                {
                    this.approveDayJournal("", NoYes::Yes, false);
                }
            }
            else
            {
                this.approveDayJournal("@SYS38506", NoYes::No, true, 0);
            }
            jmgStampJournalTable.update();
        }
        
        ttscommit;

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>