<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Bank_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class Bank_BR extends Bank
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBankAccountNum</Name>
				<Source><![CDATA[
    public boolean checkBankAccountNum(BankAccount _bankAccount)
    {
        var regexStr = @"^\d{3} \d{1,4}(\-[a-zA-Z0-9]{1})? \d{1,12}\-[a-zA-Z0-9]{1,2}$";

        if (!System.Text.RegularExpressions.Regex::IsMatch(_bankAccount, regexStr))
        {
            return checkFailed("@Brazil:InvalidBankAccountFormat");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the account number.
    /// </summary>
    /// <param name="_bankAccountInfo">
    /// The complete bank account (bank, agency and account numbers).
    /// </param>
    /// <returns>
    /// The account number without the control characters.
    /// </returns>
    /// <remarks>
    /// See checkBankAccount() method for valid formats.
    /// </remarks>
    public static BankAccountNum_BR parseAccount(BankAccount _bankAccountInfo)
    {
        int len, maxLen, pos;

        maxLen = strlen(_bankAccountInfo);
        pos = strfind(_bankAccountInfo, ' ', 1, maxLen); // move to 2nd segment
        pos = strfind(_bankAccountInfo, ' ', pos+1, maxLen); // move to 3rd segment
        len = maxLen - pos - 2;

        if (substr(_bankAccountInfo, maxLen-2, 1) == '-')
        {
            len--;
        }

        return substr(_bankAccountInfo, pos+1, len);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseAgency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the agency number.
    /// </summary>
    /// <param name="_bankAccountInfo">
    /// The complete bank account (bank, agency and account numbers).
    /// </param>
    /// <returns>
    /// The agency number without the control characters.
    /// </returns>
    /// <remarks>
    /// See checkBankAccount() method for valid formats.
    /// </remarks>
    public static BankAgency_BR  parseAgency(BankAccount _bankAccountInfo)
    {
        return substr(_bankAccountInfo, 5, 4);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseAgencyDAC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the agency control character (DAC).
    /// </summary>
    /// <param name="_bankAccountInfo">
    /// The complete bank account (bank, agency and account numbers).
    /// </param>
    /// <returns>
    /// The agency control character.
    /// </returns>
    /// <remarks>
    /// See checkBankAccount() method for valid formats.
    /// </remarks>
    public static BankDAC_BR parseAgencyDAC(BankAccount _bankAccountInfo)
    {
        int maxLen = strlen(_bankAccountInfo);
        int pos;

        pos = strfind(_bankAccountInfo, ' ', 1, maxLen);
        pos = strfind(_bankAccountInfo, ' ', pos + 1, maxLen);

        if (substr(_bankAccountInfo, pos - 2, 1) == '-')
        {
            pos--;
        }

        return substr(_bankAccountInfo, pos, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseBankCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the bank code.
    /// </summary>
    /// <param name="_bankAccountInfo">
    /// The complete bank account (bank, agency and account numbers).
    /// </param>
    /// <returns>
    /// The bank code.
    /// </returns>
    /// <remarks>
    /// See checkBankAccount() method for valid formats.
    /// </remarks>
    public static BankCode_BR parseBankCode(BankAccount _bankAccountInfo)
    {
        return substr(_bankAccountInfo, 1, 3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseDAC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the account control characters (DAC).
    /// </summary>
    /// <param name="_bankAccountInfo">
    /// The complete bank account (bank, agency and account numbers).
    /// </param>
    /// <returns>
    /// The account control characters.
    /// </returns>
    /// <remarks>
    /// See checkBankAccount() method for valid formats.
    /// </remarks>
    public static BankDAC_BR parseDAC(BankAccount _bankAccountInfo)
    {
        str ret = substr(_bankAccountInfo, strlen(_bankAccountInfo) - 1, 2);

        if (substr(ret, 1, 1) == '-')
        {
            ret = ' ' + substr(ret, 2, 1);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite(BankAccountMap _bankAccountMap)
    {
        boolean ret = super(_bankAccountMap);

        if (ret)
        {
            ret = this.checkBankAccountNum(_bankAccountMap.AccountNum);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>