<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanLayoutManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanLayoutManager</c> class is responsible for building the SQL structure of the <c>BudgetPlanLineActiveView</c>
/// and maintaining that for a given instance of <c>BudgetPlanHeader</c> document.
/// </summary>
public class BudgetPlanLayoutManager
{
    boolean                     applyNegativeMultiplierForLine;
    boolean                     generatedActiveViewPrerequisites;
    BudgetPlanHeaderRecId       budgetPlanHeaderRecId;
    BudgetPlanLayoutRecId       budgetPlanLayoutRecId;
    BudgetPlanningProcess       budgetPlanningProcess;
    BudgetPlanLineEffectiveDate defaultEffectiveDate;
    BudgetPlanLineEffectiveDate effectiveEndDate;
    DimensionHierarchyId        layoutDimensionFocus;
    Partition                   currentPartition;
    UserId                      currentUserId;
    str                         sqlInnerJoinActiveView, sqlWhereActiveView;

    [SysObsolete('This class member is deprecated because it is not used in this class anymore.', false, 28\10\2022)]
    str                         sqlGroupByActiveViewDetail;

    str                         sqlGroupByActiveView;
    str                         sqlInsertDimensionField, sqlSelectDimensionField, sqlInnerJoinOnDimensionField, sqlGroupByDimensionField;
    str                         sqlInsertRowColumnField, sqlSelectRowColumnField, sqlWhereRowField, sqlGroupByRowField;
    
    [SysObsolete('This class member is deprecated because it is not used in this class anymore.', false, 28\10\2022)]
    str                         sqlSelectRecId;
    
    str                         sqlSelectLineNumber;

    [SysObsolete('This class member is deprecated because it is not used in this class anymore.', false, 28\10\2022)]
    str                         sqlSelectOrdinal;
    [SysObsolete('This class member is deprecated because it is not used in this class anymore.', false, 28\10\2022)]
    str                         sqlWhereScenarioRange;
    [SysObsolete('This class member is deprecated because it is not used in this class anymore.', false, 28\10\2022)]
    str                         sqlWhereNotIn;

    str                         sqlJoinForColumnRule;

    [SysObsolete('This class member is deprecated because it is not used in this class anymore.', false, 28\10\2022)]
    str                         sqlUnionAll;

    Map                         sqlColumnEffectiveDateRange = new Map(Types::Int64, Types::String);
    Map                         sqlColumnFilters = new Map(Types::Int64, Types::String);
    Map                         effectiveDateStart = new Map(Types::Int64, Types::Date);
    BudgetCycleRecId            budgetCycleRecId;
    str                         fieldNameBuilder = BudgetPlanningConstants::placeHolder1;

    public static readonly TableId budgetPlanLineTableId                        = tableNum(BudgetPlanLine);
    public static readonly TableId budgetPlanLineActiveViewTableId              = tableNum(BudgetPlanLineActiveView);
    public static readonly TableId budgetPlanLineActiveViewDetailTableId        = tableNum(BudgetPlanLineActiveViewDetail);

    public static readonly TableName budgetPlanLineTableName                    = tableStr(BudgetPlanLine);
    public static readonly TableName budgetPlanLineActiveViewTableName          = tableStr(BudgetPlanLineActiveView);

    [SysObsolete('This class member is deprecated because it is not used in this class anymore.', false, 28\10\2022)]
    public static readonly TableName budgetPlanLineActiveViewDetailTableName    = tableStr(BudgetPlanLineActiveViewDetail);

    public static readonly TableName dimensionAttributeValueCombination         = tableStr(DimensionAttributeValueCombination);
    public static readonly TableName BudgetPlanProposedAssetTableName           = new DictTable(tableNum(BudgetPlanProposedAsset)).name(DbBackend::Sql);
    public static readonly TableName BudgetPlanProposedProjectTableName         = new DictTable(tableNum(BudgetPlanProposedProject)).name(DbBackend::Sql);

    public static readonly FieldName lineTransactionCurrencyAmount  = new DictField(budgetPlanLineTableId, fieldNum(BudgetPlanLine, TransactionCurrencyAmount)).name(DbBackend::Sql);
    public static readonly FieldName lineBudgetClass                = new DictField(budgetPlanLineTableId, fieldNum(BudgetPlanLine, BudgetClass)).name(DbBackend::Sql);
    public static readonly FieldName lineQuantity                   = new DictField(budgetPlanLineTableId, fieldNum(BudgetPlanLine, Quantity)).name(DbBackend::Sql);
    public static readonly FieldName lineProjectId                  = new DictField(budgetPlanLineTableId, fieldNum(BudgetPlanLine, ProjectId)).name(DbBackend::Sql);
    public static readonly FieldName lineAssetId                    = new DictField(budgetPlanLineTableId, fieldNum(BudgetPlanLine, AssetId)).name(DbBackend::Sql);
    public static readonly FieldName lineSourceDataAreaId           = new DictField(budgetPlanLineTableId, fieldNum(BudgetPlanLine, SourceDataAreaId)).name(DbBackend::Sql);
    public static readonly FieldName SqlBudgetPlanLinePartitionName = new DictField(budgetPlanLineTableId, fieldNum(BudgetPlanLine, Partition)).name(DbBackend::Sql);
    
    [SysObsolete('This class member is deprecated because it is not used in this class anymore.', false, 28\10\2022)]
    public static readonly FieldName SqlBudgetPlanLineRecIdName     = new DictField(budgetPlanLineTableId, fieldNum(BudgetPlanLine, RecId)).name(DbBackend::Sql);

    [SysObsolete('This class member is deprecated because it is not used in this class anymore.', false, 28\10\2022)]
    public static readonly FieldId budgetPlanLineHeaderFieldId      = fieldNum(BudgetPlanLine, BudgetPlanHeader);

    public static readonly str expenseStringValue = int2Str(enum2int(BudgetClass::Expense));
    public static readonly str revenueStringValue = int2Str(enum2int(BudgetClass::Revenue));

    public static readonly FieldName SqlDAVCPartitionName           = new DictField(tableNum(DimensionAttributeValueCombination), fieldNum(DimensionAttributeValueCombination, Partition)).name(DbBackend::Sql);
    public static readonly FieldName SqlMainAccountPartitionName    = new DictField(tableNum(MainAccount), fieldNum(MainAccount, Partition)).name(DbBackend::Sql);
    public static readonly FieldName SqlAssetTablePartitionName     = new DictField(tableNum(AssetTable), fieldNum(AssetTable, Partition)).name(DbBackend::Sql);
    public static readonly FieldName SqlProjTablePartitionName      = new DictField(tableNum(ProjTable), fieldNum(ProjTable, Partition)).name(DbBackend::Sql);
    public static readonly FieldName SqlProposedAssetPartitionName  = new DictField(tableNum(BudgetPlanProposedAsset), fieldNum(BudgetPlanProposedAsset, Partition)).name(DbBackend::Sql);
    public static readonly FieldName SqlProposedProjectPartitionName= new DictField(tableNum(BudgetPlanProposedProject), fieldNum(BudgetPlanProposedProject, Partition)).name(DbBackend::Sql);
    public static readonly FieldName SqlHcmPositionForecastPartitionName = new DictField(tableNum(HcmPositionForecast), fieldNum(HcmPositionForecast, Partition)).name(DbBackend::Sql);

    // Active view
    public static readonly FieldName SqlActiveViewHeaderName    = new DictField(budgetPlanLineActiveViewTableId, fieldNum(BudgetPlanLineActiveView, BudgetPlanHeader)).name(DbBackend::Sql);
    public static readonly FieldName SqlActiveViewPartitionName = new DictField(budgetPlanLineActiveViewTableId, fieldNum(BudgetPlanLineActiveView, Partition)).name(DbBackend::Sql);
    public static readonly FieldName SqlActiveViewModifiedByName= new DictField(budgetPlanLineActiveViewTableId, fieldNum(BudgetPlanLineActiveView, ModifiedBy)).name(DbBackend::Sql);
    [SysObsolete('This class member is deprecated because it is not used in this class anymore.', false, 28\10\2022)]
    public static readonly FieldName SqlActiveViewRecIdName     = new DictField(budgetPlanLineActiveViewTableId, fieldNum(BudgetPlanLineActiveView, RecId)).name(DbBackend::Sql);
    
    public static readonly FieldName SqlActiveViewLineNumberName= new DictField(budgetPlanLineActiveViewTableId, fieldNum(BudgetPlanLineActiveView, LineNumber)).name(DbBackend::Sql);

    // Active view detail
    [SysObsolete('This class member is deprecated because it is not used in this class anymore.', false, 28\10\2022)]
    public static readonly FieldName SqlActiveViewDetailActiveViewName = new DictField(budgetPlanLineActiveViewDetailTableId, fieldNum(BudgetPlanLineActiveViewDetail, ActiveView)).name(DbBackend::Sql);
    [SysObsolete('This class member is deprecated because it is not used in this class anymore.', false, 28\10\2022)]
    public static readonly FieldName SqlActiveViewDetailHeaderName     = new DictField(budgetPlanLineActiveViewDetailTableId, fieldNum(BudgetPlanLineActiveViewDetail, Header)).name(DbBackend::Sql);
    [SysObsolete('This class member is deprecated because it is not used in this class anymore.', false, 28\10\2022)]
    public static readonly FieldName SqlActiveViewDetailPartitionName  = new DictField(budgetPlanLineActiveViewDetailTableId, fieldNum(BudgetPlanLineActiveViewDetail, Partition)).name(DbBackend::Sql);
    [SysObsolete('This class member is deprecated because it is not used in this class anymore.', false, 28\10\2022)]
    public static readonly FieldName SqlActiveViewDetailLineName       = new DictField(budgetPlanLineActiveViewDetailTableId, fieldNum(BudgetPlanLineActiveViewDetail, Line)).name(DbBackend::Sql);
    [SysObsolete('This class member is deprecated because it is not used in this class anymore.', false, 28\10\2022)]
    public static readonly FieldName SqlActiveViewDetailOrdinalName    = new DictField(budgetPlanLineActiveViewDetailTableId, fieldNum(BudgetPlanLineActiveViewDetail, Ordinal)).name(DbBackend::Sql);
    [SysObsolete('This class member is deprecated because it is not used in this class anymore.', false, 28\10\2022)]
    private static readonly FieldName SqlActiveViewDetailOriginalAmountName = new DictField(budgetPlanLineActiveViewDetailTableId, fieldNum(BudgetPlanLineActiveViewDetail, OriginalAmount)).name(DbBackend::Sql);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createActiveViewDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts <c>BudgetPlanLineActiveViewDetail</c> records.
    /// </summary>
    /// <param name = "_budgetPlanLineActiveViewDetail">The <c>BudgetPlanLineActiveViewDetail</c> table buffer. </param>
    /// <param name = "_insertObject"> The insert object for active view detail. </param>
    /// <param name = "_activeViewRecId">The <c>BudgetPlanLineActiveView</c> record ID to filter by. </param>
    /// <param name = "_buildWithActiveViewPlaceholder"> Boolean flag to add additional placeholder to limit the query to a single active view line; optional. </param>
    private void createActiveViewDetail(
        BudgetPlanLineActiveViewDetail _budgetPlanLineActiveViewDetail,
        SysDaInsertObject _insertObject, 
        BudgetPlanLineActiveViewRecId _activeViewRecId, 
        boolean _buildWithActiveViewPlaceholder = false
        )
    {
        BudgetPlanLayoutElement layoutElement;
        BudgetPlanColumn column;

        // Build and execute insert statement for each column
        while select Ordinal from layoutElement
            order by Ordinal
                where layoutElement.Layout == budgetPlanLayoutRecId
            join column
                where column.RecId == layoutElement.ElementDefinition
        {
            SysDaQueryObject finalActiveViewQuery = this.getActiveViewDetailColumnQuery(column, 
                                                                                        layoutElement,
                                                                                        _activeViewRecId,
                                                                                        _budgetPlanLineActiveViewDetail,
                                                                                        _buildWithActiveViewPlaceholder);

            _insertObject.query(finalActiveViewQuery);
            SysDaInsertStatement insertStatement = new SysDaInsertStatement();
            insertStatement.executeQuery(_insertObject);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveViewDetailColumnQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the query to populate the budget plan details.
    /// </summary>
    /// <param name = "_column">The <c>BudgetPlanColumn</c> for which to create the query.</param>
    /// <param name = "_layoutElement">The <c>BudgetPlanLayoutElement</c> that defines the layout to use.</param>
    /// <param name = "_activeViewRecId">The <c>BudgetPlanLineActiveView</c> record ID to filter by. </param>
    /// <param name = "_budgetPlanLineActiveViewDetail">The <c>BudgetPlanLineActiveViewDetail</c> table buffer. </param>
    /// <param name = "_buildWithActiveViewPlaceholder">Boolean flag to add additional placeholder to limit the query to a single active view line; optional. </param>
    /// <returns>The query to populate the budget plan information.</returns>
    protected internal SysDaQueryObject getActiveViewDetailColumnQuery(BudgetPlanColumn _column,
                                                                        BudgetPlanLayoutElement _layoutElement, 
                                                                        BudgetPlanLineActiveViewRecId _activeViewRecId,  
                                                                        BudgetPlanLineActiveViewDetail _budgetPlanLineActiveViewDetail,
                                                                        boolean _buildWithActiveViewPlaceholder = false)
    {
        BudgetPlanLineActiveView budgetPlanLineActiveView;
        BudgetPlanLine budgetPlanLine;
        DimensionAttributeValueCombination dimensionAttribute;
        SysDaQueryObject budgetPlanLineActiveViewQueryObject = new SysDaQueryObject(budgetPlanLineActiveView);
        SysDaQueryObject dimensionAttributeJoinQueryObject = new SysDaQueryObject(dimensionAttribute);
        SysDaQueryObject budgetPlanLineJoinQueryObject = new SysDaQueryObject(budgetPlanLine);

        this.buildActiveViewDetailSelectWithOrdinal(budgetPlanLineActiveViewQueryObject, budgetPlanLineJoinQueryObject, _layoutElement.Ordinal);

        this.buildActiveViewDetailJoinClause(
                budgetPlanLineJoinQueryObject,
                dimensionAttributeJoinQueryObject,
                budgetPlanLineActiveView,
                budgetPlanLine,
                dimensionAttribute,
                _column,
                _layoutElement.Ordinal);

        this.buildActiveViewDetailWhereClause(
                budgetPlanLineActiveViewQueryObject,
                budgetPlanLine,
                budgetPlanLineActiveView,
                dimensionAttribute,
                _column,
                _activeViewRecId,
                _buildWithActiveViewPlaceholder);

        SysDaQueryObject budgetPlanLineActiveViewDetailNotExistQueryObject = new SysDaQueryObject(_budgetPlanLineActiveViewDetail);

        SysDaQueryExpression whereClause = new SysDaEqualsExpression(
                    new SysDaFieldExpression(_budgetPlanLineActiveViewDetail, fieldStr(BudgetPlanLineActiveViewDetail, Header)),
                    new SysDaValueExpression(budgetPlanHeaderRecId))
                .and( new SysDaEqualsExpression(
                    new SysDaFieldExpression(_budgetPlanLineActiveViewDetail , fieldStr(BudgetPlanLineActiveViewDetail, Ordinal)),
                    new SysDaValueExpression(_layoutElement.Ordinal)))
                .and(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_budgetPlanLineActiveViewDetail, fieldStr(BudgetPlanLineActiveViewDetail, Line)),
                    new SysDaFieldExpression(budgetPlanLine, fieldStr(BudgetPlanLine, RecId))));

        budgetPlanLineActiveViewDetailNotExistQueryObject.joinClauseKind(SysDaJoinKind::NotExistsJoin);
        budgetPlanLineActiveViewDetailNotExistQueryObject.whereClause(whereClause);

        budgetPlanLineJoinQueryObject.joinClause(SysDaJoinKind::NotExistsJoin, budgetPlanLineActiveViewDetailNotExistQueryObject);
        budgetPlanLineJoinQueryObject.joinClause(SysDaJoinKind::InnerJoin, budgetPlanLineActiveViewDetailNotExistQueryObject);

        if (dimensionAttributeJoinQueryObject.joinedQuery())
        {
            // If the dimensions query already has a join, join to that subclause
            dimensionAttributeJoinQueryObject.joinedQuery().joinClause(SysDaJoinKind::InnerJoin, budgetPlanLineJoinQueryObject);
        }
        else
        {
            dimensionAttributeJoinQueryObject.joinClause(SysDaJoinKind::InnerJoin, budgetPlanLineJoinQueryObject);
        }

        budgetPlanLineActiveViewQueryObject.joinClause(SysDaJoinKind::InnerJoin, dimensionAttributeJoinQueryObject);

        return budgetPlanLineActiveViewQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildActiveViewSelectSql</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the direct SQL statement to insert <c>BudgetPlanLineActiveView</c> records.
    /// </summary>
    /// <returns>The SQL string that can be directly executed on SQL server.</returns>
    [SysObsolete("This method is deprecated due to the addition of the 'Budget planning query optimization generation' feature.", false, 08\12\2020)]
    public str buildActiveViewSelectSql()
    {
        this.buildActiveViewPrerequisite();

        str sqlSelectActiveView;
        sqlSelectActiveView  = this.buildSelectActiveView();
        sqlSelectActiveView += this.buildInnerJoinActiveView();
        sqlSelectActiveView += this.buildWhereActiveView();
        sqlSelectActiveView += this.buildGroupByActiveView();

        return this.buildInsertActiveView() + sqlSelectActiveView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildActiveViewPrerequisite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the global strings used by other build methods.
    /// </summary>
    [SysObsolete("This method is deprecated due to the addition of the 'Budget planning query optimization generation' feature.", false, 08\12\2020)]
    protected void buildActiveViewPrerequisite()
    {
        if (!generatedActiveViewPrerequisites)
        {
            this.buildSelectLineNumber();
            this.buildDimensionInsertSelectGroupByFields();
            this.buildRowColumnInsertSelectGroupbyFields();
            this.buildColumnJoinSql();

            generatedActiveViewPrerequisites = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDeleteActiveView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the delete SQL statement.
    /// </summary>
    /// <returns>The delete SQL statement.</returns>
    [SysObsolete("This method is deprecated due to the addition of the 'Budget planning query optimization generation' feature.", false, 08\12\2020)]
    public str buildDeleteActiveView()
    {
        str sqlActiveViewDelete = strfmt('DELETE FROM %1 WHERE %2 = %3 AND %4 = %5;',
            budgetPlanLineActiveViewTableName,
            BudgetPlanLayoutManager::SqlActiveViewHeaderName,
            BudgetPlanningConstants::HeaderRecIdPlaceHolder,
            BudgetPlanLayoutManager::SqlActiveViewPartitionName,
            currentPartition);

        return sqlActiveViewDelete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInsertActiveView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the insert SQL statement.
    /// </summary>
    /// <returns>The insert SQL statement.</returns>
    [SysObsolete("This method is deprecated due to the addition of the 'Budget planning query optimization generation' feature.", false, 08\12\2020)]
    protected str buildInsertActiveView()
    {
        str sqlActiveView = strfmt('INSERT INTO %1 (%2, %3, %4, %5 %6 %7) ',budgetPlanLineActiveViewTableName,
            BudgetPlanLayoutManager::SqlActiveViewHeaderName,
            BudgetPlanLayoutManager::SqlActiveViewModifiedByName,
            BudgetPlanLayoutManager::SqlActiveViewPartitionName,
            BudgetPlanLayoutManager::SqlActiveViewLineNumberName,
            sqlInsertDimensionField,
            sqlInsertRowColumnField);

        return sqlActiveView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSelectActiveView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the select SQL statement.
    /// </summary>
    /// <returns>The select SQL statement.</returns>
    [SysObsolete("This method is deprecated due to the addition of the 'Budget planning query optimization generation' feature.", false, 08\12\2020)]
    protected str buildSelectActiveView()
    {
        str sqlActiveViewSelect = strfmt('SELECT %2 AS HEADER, \'%3\' AS CURUSER, %4 AS AXPARTITION %5 AS LINENUM %6 %7 FROM %1 ',
            budgetPlanLineTableName,
            BudgetPlanningConstants::HeaderRecIdPlaceHolder,
            currentUserId,
            currentPartition,
            sqlSelectLineNumber,
            sqlSelectDimensionField,
            sqlSelectRowColumnField);

        return sqlActiveViewSelect;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSelectCountActiveView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the select SQL statement with count.
    /// </summary>
    /// <param name = "_sqlSelectActiveView"> The select SQL statement. </param>
    /// <returns> The select SQL statement. </returns>
    protected str buildSelectCountActiveView(str _sqlSelectActiveView)
    {
        str sqlSelectCount = strfmt('SELECT COUNT(*) FROM (%1) ROWSELECTS;', _sqlSelectActiveView);

        return sqlSelectCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildActiveViewDetailSelectWithOrdinal</Name>
				<Source><![CDATA[
     //<summary>
     //Builds the projection list for the select.
     //</summary>
    //<param name = "_budgetPlanLineActiveViewQueryObject"> The <c>BudgetPlanLineActiveView</c> query object. </param>
     //<param name = "_budgetPlanLineJoinQueryObject"> The <c>BudgetPlanLine</c> query object. </param>
     //<param name = "_ordinal"> The ordinal of the budget plan active view field for which to get the original amount from. </param>
    protected void buildActiveViewDetailSelectWithOrdinal(
        SysDaQueryObject _budgetPlanLineActiveViewQueryObject,
        SysDaQueryObject _budgetPlanLineJoinQueryObject,
        BudgetPlanElementOrdinal _ordinal)
    {
        _budgetPlanLineActiveViewQueryObject.projection()
            .add(fieldStr(BudgetPlanLineActiveView, RecId))
            .addValue(_ordinal)            
            .add(BudgetPlanLayoutMapping::findByLayoutOrdinal(this.budgetPlanLayoutRecId, _ordinal).FieldName);

        _budgetPlanLineJoinQueryObject.projection()
            .add(fieldStr(BudgetPlanLine, RecId))
            .add(fieldStr(BudgetPlanLine, BudgetPlanHeader));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInnerJoinActiveView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the join SQL clauses.
    /// </summary>
    /// <returns>The join SQL clauses.</returns>
    [SysObsolete("This method is deprecated due to the addition of the 'Budget planning query optimization generation' feature.", false, 08\12\2020)]
    protected str buildInnerJoinActiveView()
    {
        if (sqlInnerJoinActiveView == BudgetPlanningConstants::emptyString)
        {
            sqlInnerJoinActiveView  = strFmt('INNER JOIN %1 ', dimensionAttributeValueCombination);
            sqlInnerJoinActiveView += strFmt('ON (%1.%2 = %3.%4 AND %1.%5 = %3.%6) ',
                budgetPlanLineTableName, fieldStr(BudgetPlanLine, LedgerDimension),
                dimensionAttributeValueCombination, fieldStr(DimensionAttributeValueCombination, RecId),
                BudgetPlanLayoutManager::SqlBudgetPlanLinePartitionName,
                BudgetPlanLayoutManager::SqlDAVCPartitionName);
            sqlInnerJoinActiveView += sqlJoinForColumnRule;
        }

        return sqlInnerJoinActiveView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildActiveViewDetailJoinClause</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the join clauses.
    /// </summary>
    /// <param name = "_budgetPlanLineJoinQueryObject"> The <c>BudgetPlanLine</c> query object. </param>
    /// <param name = "_dimensionAttributeJoinQueryObject"> The <c>DimensionAttributeValueCombination</c> query object. </param>
    /// <param name = "_budgetPlanLineActiveView"> The <c>BudgetPlanLineActiveView</c> table buffer. </param>
    /// <param name = "_budgetPlanLine"> The <c>BudgetPlanLine</c> table buffer. </param>
    /// <param name = "_dimensionAttribute">The <c>DimensionAttributeValueCombination</c> table buffer. </param>
    /// <param name = "_column">The record ID of the <c>BudgetPlanColumn</c> to genereate the SQL for.</param>
    /// <param name = "_ordinal">The ordinal of the budget plan active view field for which to get the original amount from</param>
    protected void buildActiveViewDetailJoinClause(
        SysDaQueryObject _budgetPlanLineJoinQueryObject,
        SysDaQueryObject _dimensionAttributeJoinQueryObject,        
        BudgetPlanLineActiveView _budgetPlanLineActiveView, 
        BudgetPlanLine _budgetPlanLine,
        DimensionAttributeValueCombination _dimensionAttribute,
        BudgetPlanColumn _column,
        BudgetPlanElementOrdinal _ordinal
        )
    {
        _budgetPlanLineJoinQueryObject.whereClause(new SysDaEqualsExpression(
            new SysDaFieldExpression(_budgetPlanLine, fieldStr(BudgetPlanLine, BudgetPlanHeader)),
            new SysDaFieldExpression(_budgetPlanLineActiveView, fieldStr(BudgetPlanLineActiveView, BudgetPlanHeader))));

        this.buildDimensionQueryExpression(_dimensionAttribute, _budgetPlanLineActiveView, _dimensionAttributeJoinQueryObject);
        this.buildColumnJoin(_budgetPlanLine, _dimensionAttribute, _budgetPlanLineJoinQueryObject, _dimensionAttributeJoinQueryObject, _ordinal, _column.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWhereActiveView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the where SQL clause.
    /// </summary>
    /// <returns>The where SQL clause.</returns>
    [SysObsolete("This method is deprecated due to the addition of the 'Budget planning query optimization generation' feature.", false, 08\12\2020)]
    protected str buildWhereActiveView()
    {
        if (sqlWhereActiveView == BudgetPlanningConstants::emptyString)
        {
            sqlWhereActiveView = strFmt('WHERE ((%1.%2 = %3) AND (%1.%4 = %5)) ', budgetPlanLineTableName, fieldStr(BudgetPlanLine, Partition), currentPartition,
                                                                                  fieldStr(BudgetPlanLine, BudgetPlanHeader), BudgetPlanningConstants::HeaderRecIdPlaceHolder);
        }

        return sqlWhereActiveView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildActiveViewDetailWhereClause</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the where clause for the active view detail query object.
    /// </summary>
    /// <param name = "_budgetPlanLineActiveViewQueryObject"> The <c>BudgetPlanLineActiveView</c> query object. </param>
    /// <param name = "_budgetPlanLine"> The <c>BudgetPlanLine</c> table buffer. </param>
    /// <param name = "_budgetPlanLineActiveView"> The <c>BudgetPlanLineActiveView</c> table buffer. </param>
    /// <param name = "_dimensionAttribute"> The <c>DimensionAttributeValueCombination</c> table buffer. </param>
    /// <param name = "_column">A single <c>BudgetPlanColumn</c> record ID to genereate the build ranges for. </param>
    /// <param name = "_activeViewRecId">The <c>BudgetPlanLineActiveView</c> record ID to filter by. </param>
    /// <param name = "_buildWithActiveViewPlaceholder">Boolean flag to add additional placeholder to limit the query to a single active view line; optional. </param>
    protected void buildActiveViewDetailWhereClause(        
        SysDaQueryObject _budgetPlanLineActiveViewQueryObject,
        BudgetPlanLine _budgetPlanLine,
        BudgetPlanLineActiveView _budgetPlanLineActiveView,
        DimensionAttributeValueCombination _dimensionAttribute,
        BudgetPlanColumn _column,
        BudgetPlanLineActiveViewRecId _activeViewRecId,
        boolean _buildWithActiveViewPlaceholder = false)
    {
        SysDaQueryExpression whereClause = new SysDaEqualsExpression(
            new SysDaFieldExpression(_budgetPlanLine, fieldStr(BudgetPlanLine, BudgetPlanHeader)),
            new SysDaValueExpression(budgetPlanHeaderRecId))
            .and( new SysDaEqualsExpression(
            new SysDaFieldExpression(_budgetPlanLine, fieldStr(BudgetPlanLine, LedgerDimension)),
            new SysDaFieldExpression(_dimensionAttribute, fieldStr(DimensionAttributeValueCombination, RecId))));

        SysDaQueryExpression whereScenarioRange =  this.buildDateRangeExpression(_budgetPlanLine, _column);
        whereClause = whereClause.and(whereScenarioRange);

        // Create where clause for row element
        SysDaQueryExpression whereClauseForRowElement = this.buildBudgetPlanRowElementWhereClause(_budgetPlanLine, _budgetPlanLineActiveView);
        if (whereClauseForRowElement != null)
        {
            whereClause = whereClause.and(whereClauseForRowElement);
        }

        if (_buildWithActiveViewPlaceholder)
        {
            whereClause = whereClause.and( new SysDaEqualsExpression(
              new SysDaFieldExpression(_budgetPlanLineActiveView, fieldStr(BudgetPlanLineActiveView, RecId)),
              new SysDaValueExpression(_activeViewRecId)));
        }

        _budgetPlanLineActiveViewQueryObject.whereClause(whereClause);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildBudgetPlanColumnRuleWhereClause</Name>
				<Source><![CDATA[
    private SysDaQueryExpression buildBudgetPlanColumnRuleWhereClause(Common _backingTable, BudgetPlanColumnRecId _budgetPlanColumnRecId, BudgetPlanLayoutElementOrdinal _ordinal)
    {
        SysDaQueryExpression bugetPlanColumnRuleExpression;
        BudgetPlanColumnRule budgetPlanColumnRule;
        BudgetPlanElementDefinition budgetPlanElementDefinition;
        BudgetPlanLayoutElement budgetPlanLayoutElement;

        select firstonly * from budgetPlanColumnRule
                where budgetPlanColumnRule.Column == _budgetPlanColumnRecId
            join budgetPlanElementDefinition
                where budgetPlanElementDefinition.RecId == budgetPlanColumnRule.Column
            join budgetPlanLayoutElement 
                where budgetPlanLayoutElement.ElementDefinition == budgetPlanElementDefinition.RecId
                && budgetPlanLayoutElement.Ordinal == _ordinal;

        if (budgetPlanColumnRule)
        {
            // Validate the backingTable buffer matches the table on the BudgetPlanColumnRule
            if (_backingTable.TableId != tableName2Id(budgetPlanColumnRule.TableName))
            {
                throw error(Error::wrongUseOfFunction(funcname()));
            }

            switch (budgetPlanColumnRule.Operator)
            {
                case BudgetPlanExpressionOperator::Equals:
                    bugetPlanColumnRuleExpression = new SysDaEqualsExpression(
                        new SysDaFieldExpression(_backingTable, budgetPlanColumnRule.FieldName),
                        new SysDaValueExpression(budgetPlanColumnRule.RightSideValueOne));

                    break;

                case BudgetPlanExpressionOperator::GreaterThan:
                    bugetPlanColumnRuleExpression = new SysDaGreaterThanExpression(
                        new SysDaFieldExpression(_backingTable, budgetPlanColumnRule.FieldName),
                        new SysDaValueExpression(budgetPlanColumnRule.RightSideValueOne));

                    break;

                case BudgetPlanExpressionOperator::GreaterThanEqual:
                    bugetPlanColumnRuleExpression = new SysDaGreaterThanOrEqualsExpression(
                        new SysDaFieldExpression(_backingTable, budgetPlanColumnRule.FieldName),
                        new SysDaValueExpression(budgetPlanColumnRule.RightSideValueOne));

                    break;

                case BudgetPlanExpressionOperator::LessThan:
                    bugetPlanColumnRuleExpression = new SysDaLessThanExpression(
                        new SysDaFieldExpression(_backingTable, budgetPlanColumnRule.FieldName),
                        new SysDaValueExpression(budgetPlanColumnRule.RightSideValueOne));

                    break;

                case BudgetPlanExpressionOperator::LessThanEqual:
                    bugetPlanColumnRuleExpression = new SysDaLessThanOrEqualsExpression(
                        new SysDaFieldExpression(_backingTable, budgetPlanColumnRule.FieldName),
                        new SysDaValueExpression(budgetPlanColumnRule.RightSideValueOne));

                    break;

                case BudgetPlanExpressionOperator::Between:
                    bugetPlanColumnRuleExpression = new SysDaGreaterThanOrEqualsExpression(
                            new SysDaFieldExpression(_backingTable, budgetPlanColumnRule.FieldName),
                            new SysDaValueExpression(budgetPlanColumnRule.RightSideValueOne)).and(
                        new SysDaLessThanOrEqualsExpression(
                            new SysDaFieldExpression(_backingTable, budgetPlanColumnRule.FieldName),
                            new SysDaValueExpression(budgetPlanColumnRule.RightSideValueTwo)));

                    break;

                default:
                    throw error(Error::wrongUseOfFunction(funcname()));
            }
        }

        return bugetPlanColumnRuleExpression;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLevelOrderedDimensionValueColumnNames</Name>
				<Source><![CDATA[
    private Map getLevelOrderedDimensionValueColumnNames()
    {
        BudgetPlanLayout layout;
        DimensionAttribute dimensionAttribute;
        DimensionHierarchyLevel dimensionHierarchyLevel;
        Map dimensionValueNames = new Map(Types::Integer, Types::String);

        // Get the pivoted dimension columns
        while select DimensionHierarchy from layout
                where layout.RecId == budgetPlanLayoutRecId
            join DimensionHierarchy, DimensionAttribute, Level from dimensionHierarchyLevel
            order by dimensionHierarchyLevel.Level asc
                where layout.DimensionHierarchy == dimensionHierarchyLevel.DimensionHierarchy
            join DimensionValueColumnName, RecId from dimensionAttribute
                where dimensionHierarchyLevel.DimensionAttribute == dimensionAttribute.RecId
        {
            dimensionValueNames.insert(dimensionHierarchyLevel.Level, dimensionAttribute.DimensionValueColumnName);
        }

        return dimensionValueNames;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGroupByActiveView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the group by SQL clause.
    /// </summary>
    /// <returns>The group by SQL clause.</returns>
    [SysObsolete("This method is deprecated due to the addition of the 'Budget planning query optimization generation' feature.", false, 08\12\2020)]
    protected str buildGroupByActiveView()
    {
        if (sqlGroupByActiveView == BudgetPlanningConstants::emptyString)
        {
            sqlGroupByActiveView = strFmt('GROUP BY %1.%2 %3 %4 ',  budgetPlanLineTableName,
                fieldStr(BudgetPlanLine, BudgetPlanHeader),
                sqlGroupByDimensionField,
                sqlGroupByRowField);
        }

        return sqlGroupByActiveView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDimensionInsertSelectGroupByFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds portions of the insert, select, where and group by clauses.
    /// </summary>
    [SysObsolete("This method is deprecated due to the addition of the 'Budget planning query optimization generation' feature.", false, 08\12\2020)]
    protected void buildDimensionInsertSelectGroupByFields()
    {
        FieldName               budgetPlanLineActiveViewDimensionFieldName;
        FieldName               dimensionAttributeValueCombinationFieldName;

        sqlInsertDimensionField      = BudgetPlanningConstants::emptyString;
        sqlSelectDimensionField      = BudgetPlanningConstants::emptyString;
        sqlGroupByDimensionField     = BudgetPlanningConstants::emptyString;
        sqlInnerJoinOnDimensionField = strFmt('%1.%2 = %3.%4',
                                                dimensionAttributeValueCombination, BudgetPlanLayoutManager::SqlDAVCPartitionName,
                                                budgetPlanLineActiveViewTableName, BudgetPlanLayoutManager::SqlActiveViewPartitionName);

        MapEnumerator dimensionValueNames = this.getLevelOrderedDimensionValueColumnNames().getEnumerator();

        while (dimensionValueNames.moveNext())
        {
            budgetPlanLineActiveViewDimensionFieldName  = BudgetPlanLayoutManager::getSqlFieldName(budgetPlanLineActiveViewTableName, strFmt(fieldNameBuilder, BudgetPlanningConstants::DimensionValues, dimensionValueNames.currentKey()));
            dimensionAttributeValueCombinationFieldName = BudgetPlanLayoutManager::getSqlFieldName(dimensionAttributeValueCombination, dimensionValueNames.currentValue());

            sqlInsertDimensionField      += strFmt(', %1', budgetPlanLineActiveViewDimensionFieldName);
            sqlSelectDimensionField      += strFmt(', %1.%2', dimensionAttributeValueCombination, dimensionAttributeValueCombinationFieldName);
            sqlInnerJoinOnDimensionField += strFmt(' AND %1.%2 = %3.%4', dimensionAttributeValueCombination, dimensionAttributeValueCombinationFieldName,
                                                                         budgetPlanLineActiveViewTableName, budgetPlanLineActiveViewDimensionFieldName);
            sqlGroupByDimensionField     += strFmt(', %1.%2', dimensionAttributeValueCombination, dimensionAttributeValueCombinationFieldName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDimensionQueryExpression</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build query expression for <c>DimensionAttributeValueCombination</c> query object.
    /// </summary>
    /// <param name = "_dimensionAttributeValue"> The <c>DimensionAttributeValueCombination</c> table buffer. </param>
    /// <param name = "_budgetPlanLineActiveView"> The <c>BudgetPlanLineActiveView</c> table buffer. </param>
    /// <param name = "_dimensionAttributeJoinQueryObject"> The <c>DimensionAttributeValueCombination</c> query object. </param>
    protected void buildDimensionQueryExpression(
        DimensionAttributeValueCombination _dimensionAttributeValue, 
        BudgetPlanLineActiveView _budgetPlanLineActiveView,
        SysDaQueryObject _dimensionAttributeJoinQueryObject)
    {
        FieldName budgetPlanLineActiveViewDimensionFieldName;
        FieldName dimensionAttributeValueCombinationFieldName;

        SysDaQueryExpression innerJoinDimensionFieldQueryExpression;

        MapEnumerator dimensionValueNames = this.getLevelOrderedDimensionValueColumnNames().getEnumerator();

        while (dimensionValueNames.moveNext())
        {
            budgetPlanLineActiveViewDimensionFieldName  = BudgetPlanLayoutManager::getSqlFieldName(budgetPlanLineActiveViewTableName, strFmt(fieldNameBuilder, BudgetPlanningConstants::DimensionValues, dimensionValueNames.currentKey()));
            dimensionAttributeValueCombinationFieldName = BudgetPlanLayoutManager::getSqlFieldName(dimensionAttributeValueCombination, dimensionValueNames.currentValue());

            if (innerJoinDimensionFieldQueryExpression == null)
            {
                innerJoinDimensionFieldQueryExpression = new SysDaEqualsExpression(
                    new SysDaFieldExpression(_dimensionAttributeValue, dimensionAttributeValueCombinationFieldName),
                    new SysDaFieldExpression(_budgetPlanLineActiveView, budgetPlanLineActiveViewDimensionFieldName));
            }
            else
            {
                innerJoinDimensionFieldQueryExpression = innerJoinDimensionFieldQueryExpression.and( new SysDaEqualsExpression(
                    new SysDaFieldExpression(_dimensionAttributeValue, dimensionAttributeValueCombinationFieldName),
                    new SysDaFieldExpression(_budgetPlanLineActiveView, budgetPlanLineActiveViewDimensionFieldName)));
            }
        }

        _dimensionAttributeJoinQueryObject.whereClause(innerJoinDimensionFieldQueryExpression);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildRowInsertSelectGroupByFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds portions of the insert, select and group by clauses for a given <c>BudgetPlanRow</c> element.
    /// </summary>
    /// <param name = "_fieldName">The value of the field Name to use to generate the clauses.</param>
    [SysObsolete("This method is deprecated due to the addition of the 'Budget planning query optimization generation' feature.", false, 08\12\2020)]
    protected void buildRowInsertSelectGroupByFields(FieldName _fieldName)
    {
        str sqlFieldName = BudgetPlanLayoutManager::getSqlFieldName(budgetPlanLineTableName, _fieldName);

        sqlInsertRowColumnField += strFmt(', %1', sqlFieldName);
        sqlSelectRowColumnField += strFmt(', %1.%2', budgetPlanLineTableName, sqlFieldName);
        sqlWhereRowField        += strFmt('AND %1.%2 = %3.%2 ', budgetPlanLineTableName, sqlFieldName, budgetPlanLineActiveViewTableName);
        sqlGroupByRowField      += strFmt(', %1.%2', budgetPlanLineTableName, sqlFieldName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildBudgetPlanRowElementWhereClause</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build where clause for budget plan row element in a budget layout.
    /// </summary>
    /// <param name = "_budgetPlanLine">The <c>BudgetPlanLine</c> table buffer.</param>
    /// <param name = "_budgetPlanLineActiveView">The <c>BudgetPlanLineActiveView</c> table buffer.</param>
    /// <returns></returns>
    protected SysDaQueryExpression buildBudgetPlanRowElementWhereClause(BudgetPlanLine _budgetPlanLine, BudgetPlanLineActiveView _budgetPlanLineActiveView)
    {
        SysDaQueryExpression rowElementWhereClause;
        BudgetPlanRow row;
        BudgetPlanLayoutElement layoutElement;

        while select FieldName from row
            exists join layoutElement
                where layoutElement.Layout == budgetPlanLayoutRecId
                    && layoutElement.ElementDefinition == row.Recid
        {
            if (rowElementWhereClause == null)
            {
                rowElementWhereClause = new SysDaEqualsExpression(
                    new SysDaFieldExpression(_budgetPlanLine, row.FieldName),
                    new SysDaFieldExpression(_budgetPlanLineActiveView, row.FieldName));
            }
            else
            {
                rowElementWhereClause = rowElementWhereClause.and(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_budgetPlanLine, row.FieldName),
                    new SysDaFieldExpression(_budgetPlanLineActiveView, row.FieldName)));
            }
        }

        return rowElementWhereClause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCaseConditionFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a column filter SQL string, generated either from a <c>Map</c> object or if the given
    /// <c>BudgetPlanColumnRecId</c> has not been seen before, a string is generated and then stored in
    /// the <c>Map</c> for later retrieval.
    /// </summary>
    /// <param name = "_columnRecId">
    /// The <c>BudgetPlanColumnRecId</c> value used to locate or create a column filter SQL string.
    /// </param>
    /// <returns>
    /// The SQL string of the column filter for the given record.
    /// </returns>
    [SysObsolete('This method is obsolete. Please use BudgetPlanLayoutManager.buildActiveViewSelectSql() instead.', false, 15\06\2020)]
    protected str buildCaseConditionFilter(BudgetPlanColumnRecId _columnRecId)
    {
        str caseConditionColumnFilter, columnFilter;

        // First check cache if the case statement for the column exists
        if (!sqlColumnFilters.exists(_columnRecId))
        {
            columnFilter = BudgetPlanColumn::buildColumnFilter(_columnRecId);

            // The column could have no column rule elements, so check for a return before assigning a string
            if (columnFilter)
            {
                caseConditionColumnFilter = strfmt(' AND %1', columnFilter);

                // Update the cache with the new case statement for the column
                sqlColumnFilters.insert(_columnRecId, caseConditionColumnFilter);
            }
        }
        else
        {
            caseConditionColumnFilter = sqlColumnFilters.lookup(_columnRecId);
        }

        return caseConditionColumnFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCaseConditionSign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the case condition to identify flipping the sign for revenue type lines.
    /// </summary>
    /// <param name = "_budgetClassValue">
    ///  The budget class value to add to the condition.
    /// </param>
    /// <returns> The SQL condition string built. </returns>
    [SysObsolete('This method is obsolete. Please use BudgetPlanLayoutManager.buildActiveViewSelectSql() instead.', false, 15\06\2020)]
    protected str buildCaseConditionSign(str _budgetClassValue)
    {
        str flipSignCaseCondition;

        if (applyNegativeMultiplierForLine)
        {
            flipSignCaseCondition = strFmt(' AND %1.%2 = \'%3\'', budgetPlanLineTableName, fieldStr(BudgetPlanLine, BudgetClass), _budgetClassValue);
        }

        return flipSignCaseCondition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildColumnJoinSql</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a string of the join clauses that joins tables used in <c>BudgetPlanColumnRule</c> records.
    /// </summary>
    /// <param name = "_forActiveViewDetail">boolean to determine which type of join to utilize in the SQL string.</param>
    /// <param name = "_columnRecId">The record ID of the <c>BudgetPlanColumn</c> to genereate the SQL for; optional.</param>
    /// <remarks> In the absence of a <c>BudgetPlanColumn</c> record ID, all the column records are retrieved.</remarks>
    [SysObsolete("This method is deprecated due to the addition of the 'Budget planning query optimization generation' feature.", false, 08\12\2020)]
    protected void buildColumnJoinSql(boolean _forActiveViewDetail = false, BudgetPlanColumnRecId _columnRecId = 0)
    {
        boolean                 getAllColumns = prmIsDefault(_columnRecId);
        BudgetPlanColumn        column;
        BudgetPlanColumnRule    columnRule;
        BudgetPlanLayoutElement layoutElement;

        str joinType = _forActiveViewDetail ? 'INNER JOIN' : 'LEFT OUTER JOIN';

        sqlJoinForColumnRule = BudgetPlanningConstants::emptyString;

        while select columnRule
            group by columnRule.TableName
            order by columnRule.TableName
            where columnRule.TableName != budgetPlanLineTableName
            exists join column
                where column.RecId == columnRule.Column
                    && (getAllColumns
                        || column.RecId == _columnRecId)
                exists join layoutElement
                    where layoutElement.ElementDefinition == column.RecId
                        && layoutElement.Layout           == this.budgetPlanLayoutRecId
        {
            // Get each table used in the column rules and concatenate an inner join clause
            switch (columnRule.TableName)
            {
                case (tableStr(MainAccount)):
                    sqlJoinForColumnRule += strfmt(' %1 %2 ON (%3.%4 = %2.%5 AND %2.%6 = %3.%7) ',
                        joinType,
                        tablestr(MainAccount),
                        tablestr(DimensionAttributeValueCombination),
                        fieldstr(DimensionAttributeValueCombination, MainAccount),
                        fieldstr(MainAccount, RecId),
                        BudgetPlanLayoutManager::SqlMainAccountPartitionName,
                        BudgetPlanLayoutManager::SqlDAVCPartitionName);
                    break;

                case (tableStr(ProjTable)):
                    sqlJoinForColumnRule += strfmt(' %1 %2 ON (%3.%4 = %2.%5 AND %3.%6 = %2.%7 AND %2.%8 = %3.%9) ',
                        joinType,
                        tablestr(ProjTable),
                        budgetPlanLineTableName,
                        fieldstr(BudgetPlanLine, ProjectId),
                        fieldstr(ProjTable, ProjId),
                        fieldstr(BudgetPlanLine, SourceDataAreaId),
                        fieldstr(ProjTable, DataAreaId),
                        BudgetPlanLayoutManager::SqlProjTablePartitionName,
                        BudgetPlanLayoutManager::SqlBudgetPlanLinePartitionName);
                    break;

                case (tableStr(BudgetPlanProposedProject)):
                    sqlJoinForColumnRule += strfmt(' %1 %2 ON (%3.%4 = %2.%5 AND %2.%6 = %3.%7) ',
                        joinType,
                        BudgetPlanLayoutManager::BudgetPlanProposedProjectTableName,
                        budgetPlanLineTableName,
                        fieldstr(BudgetPlanLine, ProposedProject),
                        fieldstr(BudgetPlanProposedProject, RecId),
                        BudgetPlanLayoutManager::SqlProposedProjectPartitionName,
                        BudgetPlanLayoutManager::SqlBudgetPlanLinePartitionName);
                    break;

                case (tableStr(AssetTable)):
                    sqlJoinForColumnRule += strfmt(' %1 %2 ON (%3.%4 = %2.%5 AND %3.%6 = %2.%7 AND %2.%8 = %3.%9) ',
                        joinType,
                        tablestr(AssetTable),
                        budgetPlanLineTableName,
                        fieldstr(BudgetPlanLine, AssetId),
                        fieldstr(AssetTable, AssetId),
                        fieldstr(BudgetPlanLine, SourceDataAreaId),
                        fieldstr(AssetTable, DataAreaId),
                        BudgetPlanLayoutManager::SqlAssetTablePartitionName,
                        BudgetPlanLayoutManager::SqlBudgetPlanLinePartitionName);
                    break;

                case (tableStr(BudgetPlanProposedAsset)):
                    sqlJoinForColumnRule += strfmt(' %1 %2 ON (%3.%4 = %2.%5 AND %2.%6 = %3.%7) ',
                        joinType,
                        BudgetPlanLayoutManager::BudgetPlanProposedAssetTableName,
                        budgetPlanLineTableName,
                        fieldstr(BudgetPlanLine, ProposedAsset),
                        fieldstr(BudgetPlanProposedAsset, RecId),
                        BudgetPlanLayoutManager::SqlProposedAssetPartitionName,
                        BudgetPlanLayoutManager::SqlBudgetPlanLinePartitionName);
                    break;

                case (tableStr(HcmPositionForecast)):
                    sqlJoinForColumnRule += strfmt(' %1 %2 ON (%3.%4 = %2.%5 AND %2.%6 = %3.%7) ',
                        joinType,
                        tablestr(HcmPositionForecast),
                        budgetPlanLineTableName,
                        fieldstr(BudgetPlanLine, Position),
                        fieldstr(HcmPositionForecast, RecId),
                        BudgetPlanLayoutManager::SqlHcmPositionForecastPartitionName,
                        BudgetPlanLayoutManager::SqlBudgetPlanLinePartitionName);
                    break;

                default:
                    throw error(strfmt("@Budget:UnknownColumnFilterDataSource", columnRule.TableName));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildColumnJoin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the join clauses that joins tables used in <c>BudgetPlanColumnRule</c> records.
    /// </summary>
    /// <param name = "_budgetPlanLine"> The <c>BudgetPlanLine</c> table buffer. </param>
    /// <param name = "_dimensionAttribute"> The <c>DimensionAttributeValueCombination</c> table buffer. </param>
    /// <param name = "_budgetPlanLineQueryObject"> The <c>BudgetPlanLine</c> query object. </param>
    /// <param name = "_dimensionAttributeValueCombinationQueryObject"> The <c>DimensionAttributeValueCombination</c> query object. </param>
    /// <param name = "_ordinal">The ordinal of the budget plan active view field for which to get the original amount from.</param>
    /// <param name = "_columnRecId">The record ID of the <c>BudgetPlanColumn</c> to genereate the SQL for; optional. </param>
    protected void buildColumnJoin(
        BudgetPlanLine _budgetPlanLine,
        DimensionAttributeValueCombination _dimensionAttribute,
        SysDaQueryObject _budgetPlanLineQueryObject,
        SysDaQueryObject _dimensionAttributeValueCombinationQueryObject, 
        BudgetPlanLayoutElementOrdinal _ordinal,
        BudgetPlanColumnRecId _columnRecId = 0)
    {
        boolean getAllColumns = prmIsDefault(_columnRecId);
        BudgetPlanColumn column;
        BudgetPlanColumnRule columnRule;
        BudgetPlanLayoutElement layoutElement;
        MainAccount mainAccount;
        ProjTable projTable;
        BudgetPlanProposedProject budgetPlanProposedProject;
        AssetTable assetTable;
        BudgetPlanProposedAsset budgetPlanProposedAsset;
        HcmPositionForecast hcmPositionForecast;

        while select columnRule
            group by columnRule.TableName
            order by columnRule.TableName
            where columnRule.TableName != tableStr(BudgetPlanLine)
            exists join column
                where column.RecId == columnRule.Column
                    && (getAllColumns
                        || column.RecId == _columnRecId)
                exists join layoutElement
                    where layoutElement.ElementDefinition == column.RecId
                        && layoutElement.Layout == this.budgetPlanLayoutRecId
        {
            SysDaQueryExpression whereClause;

            // Get each table used in the column rules and concatenate an inner join clause
            switch (columnRule.TableName)
            {
                case (tableStr(MainAccount)):
                    SysDaQueryObject mainAccountQueryObject = new SysDaQueryObject(mainAccount);
                    whereClause = new SysDaEqualsExpression(
                        new SysDaFieldExpression(_dimensionAttribute, fieldStr(DimensionAttributeValueCombination, MainAccount)),
                        new SysDaFieldExpression(mainAccount, fieldStr(MainAccount, RecId)));

                    SysDaQueryExpression budgetPlanColumnRuleWhereClause = this.buildBudgetPlanColumnRuleWhereClause(mainAccount, _columnRecId, _ordinal);
                    if (budgetPlanColumnRuleWhereClause)
                    {
                        whereClause = whereClause.and(budgetPlanColumnRuleWhereClause);
                    }

                    mainAccountQueryObject.whereClause(whereClause);

                    _dimensionAttributeValueCombinationQueryObject.joinClause(SysDaJoinKind::InnerJoin, mainAccountQueryObject);

                    break;

                case (tableStr(ProjTable)):
                    SysDaQueryObject projTableQueryObject = new SysDaQueryObject(projTable);
                    whereClause = new SysDaEqualsExpression(
                        new SysDaFieldExpression(_budgetPlanLine, fieldStr(BudgetPlanLine, ProjectId)),
                        new SysDaFieldExpression(projTable, fieldStr(ProjTable, ProjId)))
                        .and( new SysDaEqualsExpression(
                        new SysDaFieldExpression(_budgetPlanLine, fieldStr(BudgetPlanLine, SourceDataAreaId)),
                        new SysDaFieldExpression(projTable, fieldStr(ProjTable, DataAreaId))));

                    projTableQueryObject.whereClause(whereClause);
                    _budgetPlanLineQueryObject.joinClause(SysDaJoinKind::InnerJoin, projTableQueryObject);
                    break;

                case (tableStr(BudgetPlanProposedProject)):
                    SysDaQueryObject budgetPlanProposedProjectQueryObject = new SysDaQueryObject(budgetPlanProposedProject);
                    whereClause = new SysDaEqualsExpression(
                        new SysDaFieldExpression(_budgetPlanLine, fieldStr(BudgetPlanLine, ProposedProject)),
                        new SysDaFieldExpression(budgetPlanProposedProject, fieldStr(BudgetPlanProposedProject, RecId)));

                    budgetPlanProposedProjectQueryObject.whereClause(whereClause);
                    _budgetPlanLineQueryObject.joinClause(SysDaJoinKind::InnerJoin, budgetPlanProposedProjectQueryObject);
                    break;

                case (tableStr(AssetTable)):
                    SysDaQueryObject assetTableQueryObject = new SysDaQueryObject(assetTable);
                    whereClause = new SysDaEqualsExpression(
                        new SysDaFieldExpression(_budgetPlanLine, fieldStr(BudgetPlanLine, AssetId)),
                        new SysDaFieldExpression(assetTable, fieldStr(AssetTable, AssetId)))
                        .and( new SysDaEqualsExpression(
                        new SysDaFieldExpression(_budgetPlanLine, fieldStr(BudgetPlanLine, SourceDataAreaId)),
                        new SysDaFieldExpression(assetTable, fieldStr(AssetTable, DataAreaId))));

                    assetTableQueryObject.whereClause(whereClause);
                    _budgetPlanLineQueryObject.joinClause(SysDaJoinKind::InnerJoin, assetTableQueryObject);
                    break;

                case (tableStr(BudgetPlanProposedAsset)):
                    SysDaQueryObject budgetPlanProposedAssetQueryObject = new SysDaQueryObject(budgetPlanProposedAsset);
                    whereClause = new SysDaEqualsExpression(
                        new SysDaFieldExpression(_budgetPlanLine, fieldStr(BudgetPlanLine, ProposedAsset)),
                        new SysDaFieldExpression(budgetPlanProposedAsset, fieldStr(BudgetPlanProposedAsset, RecId)));

                    budgetPlanProposedAssetQueryObject.whereClause(whereClause);
                    _budgetPlanLineQueryObject.joinClause(SysDaJoinKind::InnerJoin, budgetPlanProposedAssetQueryObject);
                    break;

                case (tableStr(HcmPositionForecast)):
                    SysDaQueryObject hcmPositionForecastQueryObject = new SysDaQueryObject(hcmPositionForecast);
                    whereClause = new SysDaEqualsExpression(
                        new SysDaFieldExpression(_budgetPlanLine, fieldStr(BudgetPlanLine, Position)),
                        new SysDaFieldExpression(hcmPositionForecast, fieldStr(HcmPositionForecast, RecId)));

                    hcmPositionForecastQueryObject.whereClause(whereClause);
                    _budgetPlanLineQueryObject.joinClause(SysDaJoinKind::InnerJoin, hcmPositionForecastQueryObject);
                    break;

                default:
                    throw error(strfmt("@Budget:UnknownColumnFilterDataSource", columnRule.TableName));
            }

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildColumnInsertSelectFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds portions of the insert and select clauses for a given <c>BudgetPlanColumn</c> element.
    /// </summary>
    /// <param name = "_column">The <c>BudgetPlanColumn</c> buffer to use to generate the clauses.</param>
    /// <param name = "_ordinal">The <c>BudgetPlanColumn</c> position in the layout.</param>
    [SysObsolete('This method is obsolete. Please use BudgetPlanLayoutManager.buildActiveViewSelectSql() instead.', false, 15\06\2020)]
    protected void buildColumnInsertSelectFields(BudgetPlanColumn _column, BudgetPlanElementOrdinal _ordinal)
    {
        boolean     applyNegativeMultiplierForColumn;
        FieldName   summaryFieldName;
        str         caseCondition;
        str         rowMultiplier;
        str         columnMultiplier;
        str         caseTempBuilder = 'WHEN (%1.%2 = %3 %4%5) THEN %1.%6%7 ';
        str         caseTempBuilderWithSign = 'WHEN (%1.%2 = %3 %4%8) THEN %1.%6%9 ';
        str         caseConditionPositiveSign;
        str         caseConditionNegativeSign;

        // Build the case clause condition
        caseCondition  = this.buildEffectiveDateRange(_column);
        caseCondition += this.buildCaseConditionFilter(_column.RecId);

        if (BudgetPlanScenario::find(_column.Scenario).UnitOfMeasureClass == UnitOfMeasureClass::Monetary)
        {
            applyNegativeMultiplierForColumn = BudgetPlanLayoutMapping::findByLayoutOrdinal(this.budgetPlanLayoutRecId, _ordinal).ApplyMultiplier;

            summaryFieldName            = lineTransactionCurrencyAmount;
            caseConditionNegativeSign   = this.buildCaseConditionSign(revenueStringValue);
            caseConditionPositiveSign   = applyNegativeMultiplierForLine ? this.buildCaseConditionSign(expenseStringValue) : BudgetPlanningConstants::emptyString;
            rowMultiplier               = applyNegativeMultiplierForLine ? BudgetPlanningConstants::negativeMultiplier : BudgetPlanningConstants::emptyString;
            columnMultiplier            = applyNegativeMultiplierForColumn ? BudgetPlanningConstants::negativeMultiplier : BudgetPlanningConstants::emptyString;
            caseTempBuilder             += applyNegativeMultiplierForLine ? caseTempBuilderWithSign : BudgetPlanningConstants::emptyString;
        }
        else
        {
            summaryFieldName = lineQuantity;
        }

        sqlInsertRowColumnField += strFmt(', %1', BudgetPlanLayoutManager::getFieldNameForLayoutOrdinal(this.budgetPlanLayoutRecId, _ordinal));
        sqlSelectRowColumnField += ', SUM(CASE ';
        sqlSelectRowColumnField += strFmt(caseTempBuilder,
            budgetPlanLineTableName,
            fieldStr(BudgetPlanLine, BudgetPlanScenario),
            _column.Scenario,
            caseCondition,
            caseConditionPositiveSign,
            summaryFieldName,
            columnMultiplier,
            caseConditionNegativeSign,
            rowMultiplier);
        sqlSelectRowColumnField += 'ELSE 0 END)';
        sqlSelectRowColumnField += ' AS COLUMN';
        sqlSelectRowColumnField += int2Str(_ordinal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildRowColumnInsertSelectGroupbyFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the SQL string to insert, select and group by fields from the <c>BudgetPlanColumn</c> and <c>BudgetPlanRow</c> definitions.
    /// </summary>
    [SysObsolete("This method is deprecated due to the addition of the 'Budget planning query optimization generation' feature.", false, 08\12\2020)]
    protected void buildRowColumnInsertSelectGroupbyFields()
    {
        BudgetPlanColumn            column;
        BudgetPlanRow               row;
        BudgetPlanLayoutElement     layoutElement;
        BudgetPlanElementDefinition elementDefinition;
        boolean                     isSourceDataAreaIdAdded;

        while select Ordinal from layoutElement
            order by Ordinal
                where layoutElement.Layout == budgetPlanLayoutRecId
            join elementDefinition
                where elementDefinition.RecId == layoutElement.ElementDefinition
        {
            if (elementDefinition is BudgetPlanColumn)
            {
                column = elementDefinition as BudgetPlanColumn;

                this.buildColumnInsertSelectFields(column, layoutElement.Ordinal);
            }
            else
            {
                row = elementDefinition as BudgetPlanRow;

                this.buildRowInsertSelectGroupByFields(row.FieldName);

                if (!isSourceDataAreaIdAdded
                    && (row.FieldName == lineAssetId || row.FieldName == lineProjectId))
                {
                    this.buildRowInsertSelectGroupByFields(lineSourceDataAreaId);
                    isSourceDataAreaIdAdded = true;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDateRangeExpression</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query expression for date range.
    /// </summary>
    /// <param name = "_budgetPlanLine"> The <c>BudgetPlanLine</c> table buffer. </param>
    /// <param name = "_column"> The <c>BudgetPlanColumn</c> record buffer that has the date and the rules to apply. </param>
    /// <returns> Query expression for date range. </returns>
    protected SysDaQueryExpression buildDateRangeExpression(
        BudgetPlanLine _budgetPlanLine, 
        BudgetPlanColumn _column)
    {
        SysDaQueryExpression whereScenarioRange;

        if (_column)
        {
            SysDaQueryExpression criteria;
            SysDaQueryExpression caseCondition;

            criteria = new SysDaEqualsExpression(
                    new SysDaFieldExpression(_budgetPlanLine, fieldStr(BudgetPlanLine, BudgetPlanScenario)),
                    new SysDaValueExpression(_column.Scenario));

            caseCondition = this.buildEffectiveDateRangeQuery(_budgetPlanLine, _column);

            if (caseCondition)
            {
                criteria = criteria.and(caseCondition);
            }

            whereScenarioRange = criteria;
        }

        return whereScenarioRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildActiveViewDetailNotExistClause</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds not exist join clause on active view detail table which will prevent duplicate records from getting insereted into active view detail table.
    /// </summary>
    /// <param name = "_budgetPlanLineQueryObject"> The <c>BudgetPlanLine</c> query object. </param>
    /// <param name = "_budgetPlanLine">The <c>BudgetPlanLine</c> table buffer. </param>
    /// <param name = "_ordinal">The ordinal of the budget plan active view field for which to get the original amount from.</param>
    protected void buildActiveViewDetailNotExistClause(
        SysDaQueryObject _budgetPlanLineQueryObject,
        BudgetPlanLine _budgetPlanLine, 
        BudgetPlanLayoutElementOrdinal _ordinal)
    {
        BudgetPlanLineActiveViewDetail budgetPlanLineActiveViewDetailNotExist;
        SysDaQueryObject _budgetPlanLineActiveViewDetailNotExistQueryObject = new SysDaQueryObject(budgetPlanLineActiveViewDetailNotExist);

        SysDaQueryExpression whereClause = new SysDaEqualsExpression(
            new SysDaFieldExpression(budgetPlanLineActiveViewDetailNotExist, fieldStr(BudgetPlanLineActiveViewDetail, Header)),
            new SysDaValueExpression(budgetPlanHeaderRecId))
            .and( new SysDaEqualsExpression(
            new SysDaFieldExpression(budgetPlanLineActiveViewDetailNotExist , fieldStr(BudgetPlanLineActiveViewDetail, Ordinal)),
            new SysDaValueExpression(_ordinal)))
            .and( new SysDaEqualsExpression(
            new SysDaFieldExpression(budgetPlanLineActiveViewDetailNotExist, fieldStr(BudgetPlanLineActiveViewDetail, Line)),
            new SysDaFieldExpression(_budgetPlanLine, fieldStr(BudgetPlanLine, RecId))));

        _budgetPlanLineActiveViewDetailNotExistQueryObject.joinClauseKind(SysDaJoinKind::NotExistsJoin);
        _budgetPlanLineActiveViewDetailNotExistQueryObject.whereClause(whereClause);
        _budgetPlanLineQueryObject.joinClause(SysDaJoinKind::InnerJoin, _budgetPlanLineActiveViewDetailNotExistQueryObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildEffectiveDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the <c>BudgetPlanLineEffectiveDate</c> filter that should be applied per column.
    /// </summary>
    /// <param name = "_column">The <c>BudgetPlanColumn</c> record buffer to derive the date rules from.</param>
    /// <returns>The SQL string for the effective date range.</returns>
    [SysObsolete('This method is obsolete. Please use BudgetPlanLayoutManager.buildActiveViewSelectSql() instead.', false, 15\06\2020)]
    protected str buildEffectiveDateRange(BudgetPlanColumn _column)
    {
        str sqlEffectiveDateRange;

        if (sqlColumnEffectiveDateRange.exists(_column.RecId))
        {
            sqlEffectiveDateRange = sqlColumnEffectiveDateRange.lookup(_column.RecId);
        }

        // Add ranges only if the length is specified
        if (sqlEffectiveDateRange == BudgetPlanningConstants::emptyString
            && _column.ColumnPeriodLength != BudgetPlanColumnPeriodLength::All)
        {
            StartDateTime startDate;
            EndDateTime   endDate;

            [startDate, endDate] = this.getEffectiveDates(_column);

            sqlEffectiveDateRange = strFmt(' AND (%1.%2 >= \'%3\' AND %1.%2 <= \'%4\')', budgetPlanLineTableName,
                fieldstr(BudgetPlanLine, EffectiveDate),
                DateTimeUtil::toStr(startDate),
                DateTimeUtil::toStr(endDate));

            sqlColumnEffectiveDateRange.insert(_column.RecId, sqlEffectiveDateRange);
            effectiveDateStart.insert(_column.RecId, DateTimeUtil::date(startDate));
        }

        return sqlEffectiveDateRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildEffectiveDateRangeQuery</Name>
				<Source><![CDATA[
    protected SysDaQueryExpression buildEffectiveDateRangeQuery(BudgetPlanLine _budgetPlanLine, BudgetPlanColumn _column)
    {
        SysDaQueryExpression effectiveDateRangeQuery;

        if (_column.ColumnPeriodLength != BudgetPlanColumnPeriodLength::All)
        {
            StartDateTime startDate;
            EndDateTime   endDate;

            [startDate, endDate] = this.getEffectiveDates(_column);

            effectiveDateRangeQuery = new SysDaGreaterThanOrEqualsExpression(
                new SysDaFieldExpression(_budgetPlanLine, fieldStr(BudgetPlanLine, EffectiveDate)),
                new SysDaValueExpression(startDate))
                .and( new SysDaLessThanOrEqualsExpression(
                new SysDaFieldExpression(_budgetPlanLine, fieldStr(BudgetPlanLine, EffectiveDate)),
                new SysDaValueExpression(endDate)));
        }

        return effectiveDateRangeQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEffectiveDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the start date and end date.
    /// </summary>
    /// <param name = "_column">
    /// The <c>BudgetPlanColumn</c> record buffer to derive the date rules from.
    /// </param>
    /// <param name = "_relativeEffectiveDateStart">
    /// The date to use as a default effective start date; optional.
    /// </param>
    /// <param name = "_relativeEffectiveDateEnd">
    /// The date to use as a default effective end date; optional.
    /// </param>
    /// <param name = "_budgetCycle">
    /// The record ID of the budget cycle to use to fetch the dates; optional.
    /// </param>
    /// <returns>
    /// The container containing values for the start date and end date.
    /// </returns>
    public container getEffectiveDates(
        BudgetPlanColumn            _column,
        BudgetPlanLineEffectiveDate _relativeEffectiveDateStart = defaultEffectiveDate,
        BudgetPlanLineEffectiveDate _relativeEffectiveDateEnd = effectiveEndDate,
        BudgetCycleRecId            _budgetCycle = budgetPlanningProcess.BudgetCycle)
    {
        StartDateTime startDateTime;
        StartDateTime relativeEffectiveDateStart = DateTimeUtil::newDateTime(_relativeEffectiveDateStart, 0);
        EndDateTime   endDateTime;
        EndDateTime   relativeEffectiveDateEnd = DateTimeUtil::newDateTime(_relativeEffectiveDateEnd, 0);
        int           yearToMonthsOffset = _column.YearOffset * 12;

        switch (_column.ColumnPeriodLength)
        {
            case BudgetPlanColumnPeriodLength::Month:
                startDateTime = DateTimeUtil::addMonths(relativeEffectiveDateStart, (_column.ColumnPeriodLengthValue - 1) + yearToMonthsOffset);
                endDateTime   = DateTimeUtil::addMonths(relativeEffectiveDateStart, _column.ColumnPeriodLengthValue + yearToMonthsOffset);
                break;

            case BudgetPlanColumnPeriodLength::Quarter:
                startDateTime = DateTimeUtil::addMonths(relativeEffectiveDateStart, ((_column.ColumnPeriodLengthValue - 1) * 3) + yearToMonthsOffset);
                endDateTime   = DateTimeUtil::addMonths(relativeEffectiveDateStart, (_column.ColumnPeriodLengthValue * 3) + yearToMonthsOffset);
                break;

            case BudgetPlanColumnPeriodLength::Year:
                startDateTime = DateTimeUtil::addYears(relativeEffectiveDateStart, _column.YearOffset);
                endDateTime   = DateTimeUtil::addYears(startDateTime, 1);
                break;

            case BudgetPlanColumnPeriodLength::Period:
                BudgetPlanLineEffectiveDate effectiveDateOffset = DateTimeUtil::date(DateTimeUtil::addYears(relativeEffectiveDateStart, _column.YearOffset));
                FiscalCalendarRecId         fiscalCalendarRecId = BudgetCycleTimeSpan::find(BudgetCycle::find(_budgetCycle).BudgetCycleTimeSpan).FiscalCalendar;

                startDateTime = DateTimeUtil::newDateTime(
                    LedgerFiscalCalendar::findPeriodStartDateByDateWithIndex(
                        fiscalCalendarRecId,
                        effectiveDateOffset,
                        _column.ColumnPeriodLengthValue - 1),
                    0);

                endDateTime   = DateTimeUtil::newDateTime(
                    LedgerFiscalCalendar::findPeriodEndDateByDate(
                        fiscalCalendarRecId,
                        DateTimeUtil::date(startDateTime)),
                    0);
                break;

            case BudgetPlanColumnPeriodLength::All:
                startDateTime = relativeEffectiveDateStart;
                endDateTime   = relativeEffectiveDateEnd;
                break;

            default:
                var eventHandlerResult = EventHandlerResult::newSingleResponse();
                this.getEffectiveDatesDelegate(eventHandlerResult);

                if (eventHandlerResult.hasResult())
                {
                    break;
                }

                throw error("@Budget:ColumnPeriodLengthNotSupported");
        }

        //
        // Subtracts a day from the end date so that the range built can be inclusive
        // Ex: >= 1/1/2015 and <= 12/31/2015 Instead of >= 1/1/2015 and < 1/1/2016
        //
        if (_column.ColumnPeriodLength != BudgetPlanColumnPeriodLength::All
            && _column.ColumnPeriodLength != BudgetPlanColumnPeriodLength::Period)
        {
            endDateTime = DateTimeUtil::addDays(endDateTime, -1);
        }

        return [startDateTime, endDateTime];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEffectiveDatesDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate performs default action on enumeration value of <c>BudgetPlanColumnPeriodLength</c> enum.
    /// </summary>
    /// <param name = "_result">
    /// An <c>EventHandlerResult</c> instance.
    /// </param>
    /// <remarks>
    /// To avoid the exception being thrown, a value must be returned using a delegate handler.
    /// </remarks>
    delegate void getEffectiveDatesDelegate(EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEffectiveDateStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BudgetPlanLine</c> effective start date based on the element ordinal.
    /// </summary>
    /// <param name = "_ordinal">The column ordinal.</param>
    /// <returns>The effective date start date.</returns>
    public BudgetPlanLineEffectiveDate getEffectiveDateStart(BudgetPlanElementOrdinal _ordinal)
    {
        BudgetPlanLineEffectiveDate effectiveStartDate;
        BudgetPlanColumnRecId       columnRecId = this.getColumnForOrdinal(_ordinal);

        if (effectiveDateStart.exists(columnRecId))
        {
            effectiveStartDate = effectiveDateStart.lookup(columnRecId);
        }
        else
        {
            StartDateTime   startDate;
            EndDateTime     endDate;

            [startDate, endDate] = this.getEffectiveDates(BudgetPlanColumn::find(this.getColumnForOrdinal(_ordinal)));
            effectiveStartDate = DateTimeUtil::date(startDate);
            effectiveDateStart.insert(columnRecId, effectiveStartDate);
        }

        return effectiveStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSelectLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the <c>LineNumber</c> for the <c>BudgetPlanLineActiveView</c> table records.
    /// </summary>
    [SysObsolete("This method is deprecated due to the addition of the 'Budget planning query optimization generation' feature.", false, 08\12\2020)]
    protected void buildSelectLineNumber()
    {
        sqlSelectLineNumber = strFmt(', Row_Number() OVER (ORDER BY %1.%2) ', budgetPlanLineTableName, fieldStr(BudgetPlanLine, BudgetPlanHeader));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSqlFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the database equivalent physical field name for the given field name.
    /// </summary>
    /// <param name = "_tableName">The name of the table the field belongs to.</param>
    /// <param name = "_fieldName">The name of the field to retrieve the physical name for.</param>
    /// <param name = "_arrayIndex">The array index of the field; optional.</param>
    /// <returns>The physical backend database field name equivalent.</returns>
    public static str getSqlFieldName(TableName _tableName, FieldName _fieldName, IndexId _arrayIndex = 1)
    {
        SysDictField dictField;
        TableId      tableId = tableName2Id(_tableName);
        FieldId      fieldId = fieldName2Id(tableId, _fieldName);

        if (tableId && fieldId)
        {
            dictField = new SysDictField(tableId, fieldId, _arrayIndex);
        }
        else
        {
            throw error(strFmt("@Budget:UnknownTableAndFieldForSQLStringGeneration", _tableName, _fieldName));
        }

        return dictField.name(DbBackend::Sql);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSqlFieldNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the field ID for the array position offset for the given field ID.
    /// </summary>
    /// <param name = "_tableId"> The ID of the table the field belongs to. </param>
    /// <param name = "_fieldId"> The ID of the field to retrieve the physical name for. </param>
    /// <param name = "_arrayIndex"> The array index of the field; optional. </param>
    /// <returns> The field ID available. </returns>
    public static FieldId getSqlFieldNum(TableId _tableId, FieldId _fieldId, IndexId _arrayIndex = 1)
    {
        SysDictField dictField = new SysDictField(_tableId, _fieldId, _arrayIndex);

        return dictField.id();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadLayoutMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a list of <c>BudgetPlanLineActiveView</c> fields that will be displayed in a grid.
    /// </summary>
    /// <param name = "_layoutRecId"> The record ID of the <c>BudgetPlanLayout</c> to generate the mappings for. </param>
    public static void loadLayoutMapping(BudgetPlanLayoutRecId _layoutRecId)
    {
        if (!_layoutRecId)
        {
            throw error(strFmt("@Budget:MissingParameterValue", staticmethodstr(BudgetPlanLayoutManager, loadLayoutMapping),
                                                                extendedTypeId2pname(extendedTypeNum(BudgetPlanLayoutRecId))));
        }

        if (BudgetPlanLayoutMapping::findByLayoutLanguage(_layoutRecId, currentUserLanguage()).RecId)
        {
            // Return quickly if mappings exist for the current layout
            return;
        }

        BudgetPlanLayout                layout = BudgetPlanLayout::find(_layoutRecId);
        BudgetPlanLayoutMapping         mapping;
        BudgetPlanColumn                column;
        BudgetPlanRow                   row;
        BudgetPlanLayoutElement         layoutElement;
        BudgetPlanElementDefinition     elementDefinition;
        Counter                         elementIndex;
        Counter                         amountFieldIndex;
        Counter                         quantityFieldIndex;

        DimensionSetSegmentName dimensionSetSegmentNames = DimensionHierarchyLevel::getDimensionHierarchyLevelNames(layout.DimensionHierarchy);
        Level                   dimensionHierarchylevelCount = DimensionHierarchy::getLevelCount(layout.DimensionHierarchy);

        for (int dimensionIndex = 1; dimensionIndex <= dimensionHierarchylevelCount; dimensionIndex++)
        {
            elementIndex++;

            mapping.clear();
            mapping.Layout          = layout.RecId;
            mapping.FieldName       = BudgetPlanLayoutManager::getSqlFieldName(budgetPlanLineActiveViewTableName, strFmt(BudgetPlanningConstants::placeHolder1, BudgetPlanningConstants::DimensionValues, dimensionIndex));
            mapping.FieldId         = fieldName2Id(budgetPlanLineActiveViewTableId, mapping.FieldName);
            mapping.FieldLabel      = dimensionSetSegmentNames[dimensionIndex];
            mapping.ElementIndex    = elementIndex;
            mapping.LanguageId      = currentUserLanguage();
            mapping.IsEditable      = NoYes::Yes;
            mapping.IsRow           = NoYes::Yes;
            mapping.InWorksheet     = NoYes::Yes;
            mapping.DescriptionFieldName = BudgetPlanLayoutDescriptionElement::existsByLayoutFieldName(layout.RecId, mapping.FieldLabel) ?
                                            strFmt(BudgetPlanningConstants::placeHolder1, BudgetPlanningConstants::DimensionNames, dimensionIndex) :
                                            BudgetPlanningConstants::emptyString;
            mapping.insert();
        }

        // Get the row and columns in the order in which they should be displayed
        while select Ordinal, IsEditable, InWorksheet from layoutElement
            order by Ordinal
                where layoutElement.Layout == layout.RecId
            join elementDefinition
                where elementDefinition.RecId == layoutElement.ElementDefinition
        {
            elementIndex++;
            mapping.clear();
            mapping.Layout = layout.RecId;

            if (elementDefinition is BudgetPlanColumn)
            {
                column = elementDefinition as BudgetPlanColumn;

                mapping.Column             = column.RecId;
                mapping.HasDimensionFilter = BudgetPlanLayoutHelper::containsMainAccountFilter(layout.RecId, layoutElement.Ordinal);

                if (BudgetPlanScenario::find(column.Scenario).UnitOfMeasureClass == UnitOfMeasureClass::Monetary)
                {
                    amountFieldIndex++;
                    mapping.FieldName        = strFmt(BudgetPlanningConstants::placeHolder1, BudgetPlanningConstants::TransactionCurrencyAmount, amountFieldIndex);
                    mapping.ApplyMultiplier  = BudgetPlanColumnRule::existsRule(column.RecId, budgetPlanLineTableName, lineBudgetClass, int2Str(enum2int(BudgetClass::Revenue)));
                }
                else
                {
                    quantityFieldIndex++;
                    mapping.FieldName       = strFmt(BudgetPlanningConstants::placeHolder1, BudgetPlanningConstants::Quantity, quantityFieldIndex);
                    mapping.EstimateType    = BudgetPlanEstimateType::Quantity;
                }
            }
            else
            {
                row = elementDefinition as BudgetPlanRow;
                mapping.FieldName            = row.FieldName;
                mapping.ApplyMultiplier      = (row.FieldName == lineBudgetClass) ? NoYes::Yes : NoYes::No;
                mapping.IsRow                = NoYes::Yes;
            }

            mapping.FieldId              = fieldName2Id(budgetPlanLineActiveViewTableId, mapping.FieldName);
            mapping.FieldLabel           = elementDefinition.localizedElementDefinitionName();
            mapping.ElementIndex         = elementIndex;
            mapping.Ordinal              = layoutElement.Ordinal;
            mapping.IsEditable           = layoutElement.IsEditable;
            mapping.LanguageId           = currentUserLanguage();
            mapping.InWorksheet          = layoutElement.InWorksheet;
            mapping.DescriptionFieldName = BudgetPlanLayoutDescriptionElement::existsByLayoutFieldName(
                layout.RecId,
                mapping.FieldName) ?
                    strFmt(BudgetPlanningConstants::placeHolder1, mapping.FieldName, BudgetPlanningConstants::Description) :
                    BudgetPlanningConstants::emptyString;

            mapping.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateLayoutCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates a <c>BudgetPlanLayoutCache</c> record.
    /// </summary>
    /// <returns> The <c>BudgetPlanLayoutCache</c> record. </returns>
    [SysObsolete("This method is deprecated due to the addition of the 'Budget planning query optimization generation' feature.", false, 08\12\2020)]
    public BudgetPlanLayoutCache findOrCreateLayoutCache()
    {
        BudgetPlanLayoutCache layoutCache;

        layoutCache = BudgetPlanLayoutCache::findByLayoutBudgetCycle(this.budgetPlanLayoutRecId, this.budgetCycleRecId);
        if (layoutCache == null)
        {
            ttsbegin;
            layoutCache.Layout                                  = this.budgetPlanLayoutRecId;
            layoutCache.BudgetCycle                             = this.budgetCycleRecId;

            layoutCache.SelectActiveView                        = str2con(this.buildActiveViewSelectSql());
            layoutCache.DeleteActiveView                        = str2con(this.buildDeleteActiveView());

            layoutCache.insert();
            ttscommit;
        }

        return layoutCache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectActiveView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the select active view SQL string.
    /// </summary>
    /// <returns> The select active view SQL string. </returns>
    public str getSelectActiveView()
    {
        str selectActiveViewSql = con2Str(this.findOrCreateLayoutCache().SelectActiveView);
        return this.insertHeaderAndActiveViewRecIds(selectActiveViewSql);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeleteActiveView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the delete active view SQL string.
    /// </summary>
    /// <returns> The delete active view SQL string. </returns>
    public str getDeleteActiveView()
    {
        str deleteActiveViewSql = con2Str(this.findOrCreateLayoutCache().DeleteActiveView);
        return this.insertHeaderAndActiveViewRecIds(deleteActiveViewSql);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveViewDetailInsertQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the insert object for active view detail.
    /// </summary>
    /// <param name = "_budgetPlanLineActiveViewDetail"> The <c>BudgetPlanLineActiveViewDetail</c> table buffer. </param>
    /// <returns> The insert object for active view detail. </returns>
    protected internal SysDaInsertObject getActiveViewDetailInsertQueryObject(BudgetPlanLineActiveViewDetail _budgetPlanLineActiveViewDetail)
    {        
        SysDaInsertObject insertObject = new SysDaInsertObject(_budgetPlanLineActiveViewDetail); 

        insertObject.fields()
            .add(fieldStr(BudgetPlanLineActiveViewDetail, ActiveView))            
            .add(fieldStr(BudgetPlanLineActiveViewDetail, Ordinal))
            .add(fieldStr(budgetPlanLineActiveViewDetail, OriginalAmount))
            .add(fieldStr(BudgetPlanLineActiveViewDetail, Line))
            .add(fieldStr(BudgetPlanLineActiveViewDetail, Header));

        return insertObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveViewDetailDeleteQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrives the delete query object for active view detail.
    /// </summary>
    /// <param name = "_budgetPlanLineActiveViewDetail"> The <c>BudgetPlanLineActiveViewDetail</c> table buffer. </param>
    /// <param name = "_activeViewRecId">The <c>BudgetPlanLineActiveView</c> record ID to filter by.</param>
    /// <returns> The delete query object for active view detail. </returns>
    protected internal SysDaQueryObject getActiveViewDetailDeleteQueryObject(BudgetPlanLineActiveViewDetail _budgetPlanLineActiveViewDetail, BudgetPlanLineActiveViewRecId _activeViewRecId = 0)
    {        
        SysDaQueryObject deleteQueryObject = new SysDaQueryObject(_budgetPlanLineActiveViewDetail);

        SysDaQueryExpression whereClause = new SysDaEqualsExpression(
            new SysDaFieldExpression(_budgetPlanLineActiveViewDetail, fieldStr(BudgetPlanLineActiveViewDetail, Header)),
            new SysDaValueExpression(budgetPlanHeaderRecId));

        if (_activeViewRecId)
        {
            whereClause = whereClause.and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_budgetPlanLineActiveViewDetail, fieldStr(budgetPlanLineActiveViewDetail, ActiveView)),
                new SysDaValueExpression(_activeViewRecId)));
        }

        deleteQueryObject.whereClause(whereClause);

        return deleteQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertActiveViewDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into active view detail table.
    /// </summary>
    /// <param name = "_budgetPlanLineActiveViewDetail"> The <c>BudgetPlanLineActiveViewDetail</c> table buffer. </param>
    /// <param name = "_insertObject"> The insert object for active view detail. </param>
    /// <param name = "_activeViewRecId"> The <c>BudgetPlanLineActiveView</c> record ID to filter by; optional. </param>
    internal void insertActiveViewDetail(BudgetPlanLineActiveViewDetail _budgetPlanLineActiveViewDetail, SysDaInsertObject _insertObject, BudgetPlanLineActiveViewRecId _activeViewRecId = 0)
    {
        if (_activeViewRecId)
        {
            this.createActiveViewDetail(_budgetPlanLineActiveViewDetail, _insertObject, _activeViewRecId, true);
        }
        else
        {
            this.createActiveViewDetail(_budgetPlanLineActiveViewDetail, _insertObject, _activeViewRecId, false);
        }                
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertHeaderAndActiveViewRecIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the budget plan header and active view record IDs into the given SQL string.
    /// </summary>
    /// <param name = "_sql"> The SQL string to replace with the header and active view record IDs. </param>
    /// <param name = "_activeViewRecId"> The <c>BudgetPlanLineActiveView</c> record ID to replace. </param>
    /// <returns> The SQL string with the replaced record IDs. </returns>
    protected str insertHeaderAndActiveViewRecIds(str _sql, BudgetPlanLineActiveViewRecId _activeViewRecId = 0)
    {
        return strFmt(_sql, int642Str(budgetPlanHeaderRecId), int642Str(_activeViewRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApplyNegativeMultiplierForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the multiplier flag indicator for the line.
    /// </summary>
    /// <returns> The saved flag value. </returns>
    public boolean parmApplyNegativeMultiplierForLine()
    {
        return applyNegativeMultiplierForLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getColumnMultiplier</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a given column record ID has its multiplier cached.
    /// </summary>
    /// <param name = "_columnRecId"> The <c>BudgetPlanColumnRecId</c> value to check. </param>
    /// <returns> Cached multiplier if the column record ID is found; otherwise, empty string. </returns>
    public str getColumnMultiplier(BudgetPlanColumnRecId _columnRecId)
    {
        str columnMultiplierValue = BudgetPlanLayoutMapping::findByLayoutColumn(this.budgetPlanLayoutRecId, _columnRecId).ApplyMultiplier ?
                                    BudgetPlanningConstants::negativeMultiplier : BudgetPlanningConstants::emptyString;

        return columnMultiplierValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getColumnMultiplierForOrdinal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a given column ordinal has its multiplier cached.
    /// </summary>
    /// <param name = "_ordinal"> The <c>BudgetPlanElementOrdinal</c> value to check. </param>
    /// <returns> Cached multiplier if the column is found; otherwise, empty string. </returns>
    public str getColumnMultiplierForOrdinal(BudgetPlanElementOrdinal _ordinal)
    {
        str columnMultiplierValue = BudgetPlanningConstants::emptyString;

        if (this.columnExistsForOrdinal(_ordinal))
        {
            columnMultiplierValue = this.getColumnMultiplier(this.getColumnForOrdinal(_ordinal));
        }

        return columnMultiplierValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldNameForLayoutOrdinal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the field name associated with the layout ordinal.
    /// </summary>
    /// <param name = "_layoutRecId"> The layout record ID to lookup values for. </param>
    /// <param name = "_ordinal"> The field position within the layout. </param>
    /// <returns> The name of the field at the given position within the layout. </returns>
    public static FieldName getFieldNameForLayoutOrdinal(BudgetPlanLayoutRecId _layoutRecId, BudgetPlanElementOrdinal _ordinal)
    {
        BudgetPlanLayoutMapping budgetPlanlayoutMapping;

        if (_layoutRecId && _ordinal)
        {
            select firstonly FieldName from budgetPlanlayoutMapping
                where budgetPlanLayoutMapping.Layout        == _layoutRecId
                    && budgetPlanlayoutMapping.Ordinal      == _ordinal
                    && budgetPlanlayoutMapping.LanguageId   == currentUserLanguage();
        }

        return budgetPlanlayoutMapping.FieldName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrdinalForLayoutFieldNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the field position given the layout and field ID.
    /// </summary>
    /// <param name = "_layoutRecId"> The layout record ID to lookup values for. </param>
    /// <param name = "_fieldNum"> The field ID who's position needs to be looked up. </param>
    /// <returns> The field position within the layout. </returns>
    public static BudgetPlanElementOrdinal getOrdinalForLayoutFieldNum(BudgetPlanLayoutRecId _layoutRecId, FieldId _fieldNum)
    {
        BudgetPlanLayoutMapping budgetPlanlayoutMapping;

        if (_layoutRecId && _fieldNum)
        {
            select firstonly Ordinal from budgetPlanlayoutMapping
                where budgetPlanLayoutMapping.Layout        == _layoutRecId
                    && budgetPlanlayoutMapping.FieldId      == _fieldNum
                    && budgetPlanlayoutMapping.LanguageId   == currentUserLanguage();
        }

        return budgetPlanlayoutMapping.Ordinal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnExistsForOrdinal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if a <c>BudgetPlanColumn</c> exists for the element position specified.
    /// </summary>
    /// <param name = "_ordinal"> The position of the element in the layout. </param>
    /// <returns> true of the element at the position specified is a column; otherwise, false. </returns>
    protected boolean columnExistsForOrdinal(BudgetPlanElementOrdinal _ordinal)
    {
        return BudgetPlanLayoutMapping::findByLayoutOrdinal(this.budgetPlanLayoutRecId, _ordinal).Column != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getColumnForOrdinal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BudgetPlanColumn</c> record ID at the element position specified.
    /// </summary>
    /// <param name = "_ordinal"> The position of the element in the layout. </param>
    /// <returns> The <c>BudgetPlanColumn</c> record ID found. </returns>
    protected BudgetPlanColumnRecId getColumnForOrdinal(BudgetPlanElementOrdinal _ordinal)
    {
        return BudgetPlanLayoutMapping::findByLayoutOrdinal(this.budgetPlanLayoutRecId, _ordinal).Column;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getScenarioForOrdinal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BudgetPlanScenario</c> associated with the column at the given ordinal.
    /// </summary>
    /// <param name = "_ordinal"> The column ordinal. </param>
    /// <returns> The <c>BudgetPlanScenario</c> record ID found. </returns>
    public BudgetPlanScenarioRecId getScenarioForOrdinal(BudgetPlanElementOrdinal _ordinal)
    {
        return BudgetPlanColumn::findByLayoutOrdinal(this.budgetPlanLayoutRecId, _ordinal).Scenario;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultEffectiveDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default effective date associated with the budget plan document's <c>BudgetPlanningProcess</c>.
    /// </summary>
    /// <returns> The <c>BudgetPlanLineEffectiveDate</c> available. </returns>
    public BudgetPlanLineEffectiveDate getDefaultEffectiveDate()
    {
        return defaultEffectiveDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanLayoutRecId</Name>
				<Source><![CDATA[
    public BudgetPlanLayoutRecId parmBudgetPlanLayoutRecId()
    {
        return budgetPlanLayoutRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the input parameters.
    /// </summary>
    /// <param name = "_budgetPlanLayoutRecId">The record ID of the layout to use.</param>
    /// <param name = "_budgetPlanningProcessRecId">The record ID of the <c>BudgetPlanningProcess</c> to use for effective date derivation.</param>
    /// <param name = "_budgetPlanHeaderRecId">The record ID of the <c>BudgetPlanHeader</c> to be referenced; optional.</param>
    protected void setParameter(
        BudgetPlanLayoutRecId       _budgetPlanLayoutRecId,
        BudgetPlanningProcessRecId  _budgetPlanningProcessRecId,
        BudgetPlanHeaderRecId       _budgetPlanHeaderRecId = 0)
    {
        budgetPlanningProcess   = BudgetPlanningProcess::find(_budgetPlanningProcessRecId);
        budgetCycleRecId        = budgetPlanningProcess.BudgetCycle;
        budgetPlanHeaderRecId   = _budgetPlanHeaderRecId;
        budgetPlanLayoutRecId   = _budgetPlanLayoutRecId;
        currentPartition        = getcurrentpartitionrecid();
        currentUserId           = curuserid();
        defaultEffectiveDate    = BudgetPlanningProcessHelper::getProcessCycleStartDate(_budgetPlanningProcessRecId);
        effectiveEndDate        = BudgetPlanningProcessHelper::getProcessCycleEndDate(_budgetPlanningProcessRecId);
        layoutDimensionFocus    = BudgetPlanLayout::find(_budgetPlanLayoutRecId).DimensionHierarchy;

        BudgetPlanLayoutManager::loadLayoutMapping(this.budgetPlanLayoutRecId);

        applyNegativeMultiplierForLine = BudgetPlanLayoutMapping::findByLayoutFieldNum(this.budgetPlanLayoutRecId, fieldNum(BudgetPlanLineActiveView, BudgetClass)).ApplyMultiplier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        // Force the use of other parameterized constructor
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetPlanLayoutManager construct()
    {
        return new BudgetPlanLayoutManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBudgetPlanHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>BudgetPlanLayoutManager</c> object with parameters initialized from the <c>BudgetPlanHeader</c> record ID.
    /// </summary>
    /// <param name = "_budgetPlanHeaderRecId">The record ID of the <c>BudgetPlanHeader</c> record.</param>
    /// <returns>The initialized <c>BudgetPlanLayoutManager</c> object.</returns>
    public static BudgetPlanLayoutManager newFromBudgetPlanHeader(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        if (!_budgetPlanHeaderRecId)
        {
            throw error(strFmt("@Budget:MissingParameterValue", staticmethodstr(BudgetPlanLayoutManager, newFromBudgetPlanHeader),
                                                                extendedTypeId2pname(extendedTypeNum(BudgetPlanHeaderRecId))));
        }

        BudgetPlanHeader        budgetPlanHeader = BudgetPlanHeader::find(_budgetPlanHeaderRecId);
        BudgetPlanLayoutManager layoutTemplateBuilder = BudgetPlanLayoutManager::construct();

        if (budgetPlanHeader.RecId != 0)
        {
            layoutTemplateBuilder.setParameter(budgetPlanHeader.Layout,
                budgetPlanHeader.BudgetPlanningProcess,
                budgetPlanHeader.RecId);
        }
        else
        {
            throw error("@Budget:MissingBudgetPlan");
        }

        return layoutTemplateBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBudgetPlanHeaderAndLayout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>BudgetPlanLayoutManager</c> object with parameters initialized from the <c>BudgetPlanHeader</c> record ID and <c>BudgetPlanLayoutRecId</c> record ID.
    /// </summary>
    /// <param name = "_budgetPlanHeaderRecId">The record ID of the <c>BudgetPlanHeader</c> record.</param>
    /// <param name = "_budgetPlanLayoutRecId">The record ID of the <c>BudgetPlanLayout</c> record to set instead of retrieving value from database.</param>
    /// <returns>The initialized <c>BudgetPlanLayoutManager</c> object.</returns>
    public static BudgetPlanLayoutManager newFromBudgetPlanHeaderAndLayout(BudgetPlanHeaderRecId _budgetPlanHeaderRecId, BudgetPlanLayoutRecId _budgetPlanLayoutRecId)
    {
        if (!_budgetPlanHeaderRecId)
        {
            throw error(strFmt("@Budget:MissingParameterValue", staticmethodstr(BudgetPlanLayoutManager, newFromBudgetPlanHeader),
                                                                extendedTypeId2pname(extendedTypeNum(BudgetPlanHeaderRecId))));
        }

        if (!_budgetPlanLayoutRecId)
        {
            throw error(strFmt("@Budget:MissingParameterValue", staticmethodstr(BudgetPlanLayoutManager, newFromBudgetPlanHeader),
                                                                extendedTypeId2pname(extendedTypeNum(BudgetPlanLayoutRecId))));
        }

        BudgetPlanLayoutManager layoutTemplateBuilder = BudgetPlanLayoutManager::construct();
        BudgetPlanHeader        budgetPlanHeader      = BudgetPlanHeader::find(_budgetPlanHeaderRecId);

        layoutTemplateBuilder.setParameter(_budgetPlanLayoutRecId, budgetPlanHeader.BudgetPlanningProcess, budgetPlanHeader.RecId);

        return layoutTemplateBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBudgetPlanningProcessAndLayout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>BudgetPlanLayoutManager</c> object with parameters initialized from the <c>BudgetPlanningProcess</c> and <c>BudgetPlanLayout</c> references.
    /// </summary>
    /// <param name = "_budgetPlanningProcessRecId">The record ID of the <c>BudgetPlanningProcess</c> record.</param>
    /// <param name = "_budgetPlanLayoutRecId">The record ID of the <c>BudgetPlanLayout</c> record.</param>
    /// <returns>The initialized <c>BudgetPlanLayoutManager</c> object.</returns>
    public static BudgetPlanLayoutManager newFromBudgetPlanningProcessAndLayout(BudgetPlanningProcessRecId _budgetPlanningProcessRecId, BudgetPlanLayoutRecId _budgetPlanLayoutRecId)
    {
        if (!_budgetPlanningProcessRecId)
        {
            throw error(strFmt("@Budget:MissingParameterValue", staticmethodstr(BudgetPlanLayoutManager, newFromBudgetPlanningProcessAndLayout),
                                                                extendedTypeId2pname(extendedTypeNum(BudgetPlanningProcessRecId))));
        }

        if (!_budgetPlanLayoutRecId)
        {
            throw error(strFmt("@Budget:MissingParameterValue", staticmethodstr(BudgetPlanLayoutManager, newFromBudgetPlanningProcessAndLayout),
                                                                extendedTypeId2pname(extendedTypeNum(BudgetPlanLayoutRecId))));
        }

        BudgetPlanLayoutManager layoutTemplateBuilder = BudgetPlanLayoutManager::construct();

        layoutTemplateBuilder.setParameter(_budgetPlanLayoutRecId, _budgetPlanningProcessRecId);

        return layoutTemplateBuilder;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>