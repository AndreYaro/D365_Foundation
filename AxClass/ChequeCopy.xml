<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ChequeCopy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ChequeCopy</c> class is used to print non-negotiable check.
/// </summary>
public abstract class ChequeCopy
{
    protected TmpChequePrintout tmpChequePrintout;

    private Args args;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTmpChequePrintout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>TmpChequePrintout</c> table buffer.
    /// </summary>
    /// <returns>
    /// A <c>TmpChequePrintout</c> table buffer that contains check report data.
    /// </returns>
    protected abstract TmpChequePrintout createTmpChequePrintout()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArgs</Name>
				<Source><![CDATA[
    public Args parmArgs(Args _args = args)
    {
        args = _args;
        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printCheque</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the non-negotiable check report.
    /// </summary>
    /// <param name="_tmpChequePrintout">
    /// A <c>TmpchequePrintout</c> table buffer to pass the data to report.
    /// </param>
    public void printCheque(TmpChequePrintout _tmpChequePrintout)
    {
        if (_tmpChequePrintout)
        {
            BankChequeLayout bankChequeLayout = BankChequeLayout::find(_tmpChequePrintout.AccountId);

            if (bankChequeLayout.UseGER == NoYes::Yes)
            {
                TmpChequePrintout::sendToGER(bankChequeLayout, _tmpChequePrintout);
            }
            else
            {
                Args argsLocal = new Args();

                BankChequePrint bankChequePrint = BankChequePrint::construct(_tmpChequePrintout);

                argsLocal.caller(this);
                argsLocal.object(bankChequePrint);

                MenuFunction menuFunction = this.getMenuFunction(_tmpChequePrintout);
                if (!menuFunction)
                {
                    throw error("@SYS26828");
                }
                else
                {
                    menuFunction.run(argsLocal);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMenuFunction</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines menu item to be called based on cheque form type.
    /// </summary>
    /// <param name = "_tmpChequePrintout">
    ///     A <c>TmpchequePrintout</c> table buffer to pass the data to report.
    /// </param>
    /// <returns>
    ///     Menu item to be invoked.
    /// </returns>
    [Wrappable(true)]
    protected final MenuFunction getMenuFunction(TmpChequePrintout _tmpChequePrintout)
    {
        MenuFunction menuFunction;

        switch (_tmpChequePrintout.ChequeFormType)
        {
            case ChequeFormType::USStyle:
                menuFunction = new MenuFunction(menuitemoutputstr(Cheque_US), MenuItemType::Output);
                break;

            case ChequeFormType::UKStyle:
                menuFunction = new MenuFunction(menuitemoutputstr(Cheque_UK), MenuItemType::Output);
                break;

            case ChequeFormType::DEStyle:
                menuFunction = new MenuFunction(menuitemoutputstr(Cheque_DE), MenuItemType::Output);
                break;

            case ChequeFormType::ESStyle:
                menuFunction = new MenuFunction(menuitemoutputstr(Cheque_ES), MenuItemType::Output);
                break;

            case ChequeFormType::DKStyle:
                menuFunction = new MenuFunction(menuitemoutputstr(Cheque_DK), MenuItemType::Output);
                break;

            case ChequeFormType::MXStyle:
                menuFunction = new MenuFunction(menuitemoutputstr(Cheque_MX), MenuItemType::Output);
                break;

            case ChequeFormType::CAStyle:
                menuFunction = new MenuFunction(menuitemoutputstr(Cheque_CA), MenuItemType::Output);
                break;

            case ChequeFormType::FRStyle:
                menuFunction = new MenuFunction(menuitemoutputstr(Cheque_FR), MenuItemType::Output);
                break;
        }
        
        return menuFunction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the <c>TmpchequePrintout</c> table buffer and runs a non-negotiable check report.
    /// </summary>
    public void run()
    {
        tmpChequePrintout = this.createTmpChequePrintout();

        this.printCheque(tmpChequePrintout);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNonNegotiableCheckFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the non-negotiable check related field in the <c>TmpchequePrintout</c> table buffer.
    /// </summary>
    /// <param name="_bankChequeLayout">
    /// A <c>BankChequeLayout</c> table buffer that contains the layout information about the cheque.
    /// </param>
    /// <returns>
    /// A <c>TmpchequePrintout</c> table buffer.
    /// </returns>
    protected TmpChequePrintout setNonNegotiableCheckFields(BankChequeLayout _bankChequeLayout)
    {
        switch (_bankChequeLayout.CopySignature)
        {
            case CopySignature::Copy:
                tmpChequePrintout.BankCopySignatureText = "@SYS80350";
                break;

            case CopySignature::Void:
                tmpChequePrintout.BankCopySignatureText = "@SYS53120";
                break;
        }

        switch (_bankChequeLayout.CopyWatermark)
        {
            case CopyWatermark::Copy:
                tmpChequePrintout.BankCopyCustomWatermark= "@SYS80350";
                break;

            case CopyWatermark::Void:
                tmpChequePrintout.BankCopyCustomWatermark = "@SYS53120";
                break;

            case CopyWatermark::Custom:
                tmpChequePrintout.BankCopyCustomWatermark = _bankChequeLayout.BankCopyCustomWatermark;
                break;
        }

        tmpChequePrintout.Signature1 = NoYes::No;
        tmpChequePrintout.Signature2 = NoYes::No;
        tmpChequePrintout.Copy = NoYes::Yes;
        tmpChequePrintout.IsNonNegotiableCheque = NoYes::Yes;

        return tmpChequePrintout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates either a <c>BankChequeCopy</c> or <c>VendChequeCopy</c> object.
    /// </summary>
    /// <returns>
    /// An object of the <c>ChequeCopy</c> class that contains one of the derived class instances.
    /// </returns>
    public static ChequeCopy construct()
    {
        ChequeCopy chequeCopy;

        chequeCopy = new BankChequeCopy();

        return chequeCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        ChequeCopy chequeCopy;

        chequeCopy = ChequeCopy::construct();
        chequeCopy.parmArgs(args);
        chequeCopy.run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>