<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventFiscalLIFOJournalFormTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventFiscalLIFOJournalFormTable extends JournalFormTable
{
    FormButtonControl           ctrlCloseFinalReport;
    FormFunctionButtonControl   ctrlCalcLines;
    FormButtonControl           ctrlDeleteLines;
    FormTabPageControl          ctrlTabHistory;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>datasourceCreatePre</Name>
				<Source><![CDATA[
    boolean datasourceCreatePre()
    {
        InventFiscalLIFOJournalTable    journalTableLocal;

        boolean allowCreate = super();

        if (this.journalTypeId() == InventFiscalLIFOJournalType::FinalReport)
        {
            select firstonly journalTableLocal
                where journalTableLocal.JournalType       == InventFiscalLIFOJournalType::FinalReport
                   && journalTableLocal.FinalReportClosed == NoYes::No;

            if (journalTableLocal)
            {
                allowCreate = false;
                throw error(strfmt("@SYS98348",journalTableLocal.JournalId));
            }
        }

        return allowCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceInitValuePost</Name>
				<Source><![CDATA[
    void datasourceInitValuePost()
    {
        InventFiscalLIFOJournalTable    inventFiscalLIFOJournalTable = journalTable;
        super();

        switch (inventFiscalLIFOJournalTable.JournalType)
        {
            case InventFiscalLIFOJournalType::InternalReport:
                inventFiscalLIFOJournalTable.JournalNameId = InventParameters::find().FiscalLIFOJournalNameIdInternal;
                break;

            case InventFiscalLIFOJournalType::FinalReport:
                inventFiscalLIFOJournalTable.JournalNameId = InventParameters::find().FiscalLIFOJournalNameIdFinal;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtonsActive</Name>
				<Source><![CDATA[
    void enableButtonsActive(boolean _enableInfolog = true)
    {
        InventFiscalLIFOJournalType     curType = this.journalTypeId();

        boolean enabled = journalTableData.blockLevel() == JournalBlockLevel::None  && ! formRunLines && journalTable.JournalNameId;
        InventFiscalLIFOJournalTable inventFiscalLIFOJournalTable = journalTable;

        super(_enableInfolog);

        switch (curType)
        {
            case InventFiscalLIFOJournalType::InternalReport:
                if (ctrlCloseFinalReport)
                    ctrlCloseFinalReport.visible(false);

                if (ctrlDeleteLines)
                    ctrlDeleteLines.enabled(true);

                if (ctrlTabHistory)
                    ctrlTabHistory.visible(false);

                if (ctrlCalcLines)
                    ctrlCalcLines.enabled(enabled && inventFiscalLIFOJournalTable.RecId);

                FormDataObject fdo = journalTable_ds.object(fieldnum(InventFiscalLIFOJournalTable,FinalReportClosed));
                fdo.visible(false);

                break;

            case InventFiscalLIFOJournalType::FinalReport:
                if (ctrlCloseFinalReport)
                    ctrlCloseFinalReport.enabled(enabled && inventFiscalLIFOJournalTable.FinalReportClosed == NoYes::No);

                if (ctrlCalcLines)
                    ctrlCalcLines.enabled(enabled && inventFiscalLIFOJournalTable.FinalReportClosed == NoYes::No && inventFiscalLIFOJournalTable.RecId);

                if (ctrlDeleteLines)
                    ctrlDeleteLines.enabled(inventFiscalLIFOJournalTable.FinalReportClosed == false);

                if (ctrlTabHistory)
                    ctrlTabHistory.visible(true);

                fdo = journalTable_ds.object(fieldnum(InventFiscalLIFOJournalTable,EndDate));
                fdo.allowEdit(false);

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlCalcLines</Name>
				<Source><![CDATA[
    FormFunctionButtonControl parmCtrlCalcLines(FormFunctionButtonControl _ctrlCalcLines = ctrlCalcLines)
    {
        ctrlCalcLines = _ctrlCalcLines;
        return ctrlCalcLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlCloseFinalReport</Name>
				<Source><![CDATA[
    FormButtonControl parmCtrlCloseFinalReport(FormButtonControl _closeFinalReport = ctrlCloseFinalReport)
    {
        ctrlCloseFinalReport = _closeFinalReport;
        return ctrlCloseFinalReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlDeleteLines</Name>
				<Source><![CDATA[
    FormButtonControl parmCtrlDeleteLines(FormButtonControl _deleteLines = ctrlDeleteLines)
    {
        ctrlDeleteLines = _deleteLines;
        return ctrlDeleteLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlTabHistory</Name>
				<Source><![CDATA[
    FormTabPageControl parmCtrlTabHistory(FormTabPageControl _ctrlTabHistory = ctrlTabHistory)
    {
        ctrlTabHistory = _ctrlTabHistory;
        return ctrlTabHistory;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
