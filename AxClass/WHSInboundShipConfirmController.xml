<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInboundShipConfirmController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSInboundShipConfirmController</c> class acts as a controller
/// for the <c>WHSShipConfirmService</c> service when dealing with inbound
/// ship confirmations.
/// </summary>
public class WHSInboundShipConfirmController extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromExecutionMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>WHSInboundShipConfirmController</c> class
    /// with the specified execution mode.
    /// </summary>
    /// <param name = "_executionMode">The execution mode.</param>
    /// <returns>
    /// A new instance of <c>WHSInboundShipConfirmController</c> class.
    /// </returns>
    public static WHSInboundShipConfirmController newFromExecutionMode(SysOperationExecutionMode _executionMode)
    {
        WHSInboundShipConfirmController controller = new WHSInboundShipConfirmController(
                classStr(WHSShipConfirmService),
                methodStr(WHSShipConfirmService, shipConfirm),
                _executionMode);

        return controller;

    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SysOperationExecutionMode       executionMode = _args.parmEnum();
        WHSInboundShipConfirmController controller;

        controller = WHSInboundShipConfirmController::newFromExecutionMode(executionMode);

        controller.parmDialogCaption("@WAX380");

        controller.parmArgs(_args);

        if (_args.caller() is WHSILoadIdRangeProvider)
        {
            WHSILoadIdRangeProvider rangeProvider = _args.caller() as WHSILoadIdRangeProvider;
            controller.getDataContractObject().setLoadIdRange(rangeProvider.loadIdRange());
        }

        controller.getDataContractObject().parmMenuItemName(_args.menuItemName());

        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overridden to control that the operation supports running in a different, non interactive
    /// session than the one from which it was launched from the client.
    /// </summary>
    /// <returns>If true operation will be run synchronously in an non GUI async session</returns>
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>