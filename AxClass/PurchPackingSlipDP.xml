<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchPackingSlipDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchPackingSlipDP</c> class is the report data provider class for the
/// <c>PurchPackingSlip</c> report.
/// </summary>
[SRSReportParameterAttribute(classStr(PurchPackingSlipContract))]
public class PurchPackingSlipDP extends SrsReportDataProviderPreProcess
{
    private container                   inventDimSetup;
    private container                   inventDimProductSetup;
    private InventDimCtrl_Rep_Purch     inventDimReport;
    private boolean                     insertInventDim;

    private str                         quantityLabel;

    private VendFormletterParameters    vendFormletterParameters;

    private VendPackingSlipVersion      vendPackingSlipVersion;
    private VendPackingSlipJour         vendPackingSlipJour;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates data for the report.
    /// </summary>
    /// <param name="_contract">
    /// An instance of <c>PurchPackingSlipContract</c> report contract class.
    /// </param>
    public void createData(PurchPackingSlipContract _contract)
    {
        this.parmDataContract(_contract);

        this.createReportData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates report data for the product receipt document.
    /// </summary>
    /// <returns>
    /// The <c>PurchPackingSlipHeaderTmp</c> record which is the header for the report data.
    /// </returns>
    protected PurchPackingSlipHeaderTmp createReportData()
    {
        this.initializeReportData();

        vendPackingSlipVersion  = VendPackingSlipVersion::find(this.parmPackingSlipContract().parmRecordId());
        vendPackingSlipJour     = VendPackingSlipJour::findRecId(vendPackingSlipVersion.VendPackingSlipJour);

        return this.createProductReceipt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendPackingSlipVersion</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public VendPackingSlipVersion parmVendPackingSlipVersion()
    {
        return vendPackingSlipVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendPackingSlipJour</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public VendPackingSlipJour parmVendPackingSlipJour()
    {
        return vendPackingSlipJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the product receipt document.
    /// </summary>
    /// <returns>
    /// The <c>PurchPackingSlipHeaderTmp</c> record which is the header for the report data.
    /// </returns>
    protected PurchPackingSlipHeaderTmp createProductReceipt()
    {
        PurchPackingSlipHeaderTmp purchPackingSlipHeaderTmp = this.createProductReceiptHeader();

        this.createProductReceiptLines(purchPackingSlipHeaderTmp);

        return purchPackingSlipHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductReceiptLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the product receipt lines
    /// </summary>
    /// <param name = "_purchPackingSlipHeaderTmp">
    /// A <c>PurchPackingSlipHeaderTmp</c> record which is the product receipt header.
    /// </param>
    protected void createProductReceiptLines(PurchPackingSlipHeaderTmp _purchPackingSlipHeaderTmp)
    {
        Enumerator enumerator = PurchPackingSlipDPReceiptLineQuery::newQuery(this).getEnumerator();

        while (enumerator.moveNext())
        {
            PurchPackingSlipDPReceiptLineQuerySelection receiptLineSelection = enumerator.current() as PurchPackingSlipDPReceiptLineQuerySelection;

            if (this.mustCreateProductReceiptLine(_purchPackingSlipHeaderTmp, receiptLineSelection))
            {
                this.createProductReceiptLine(_purchPackingSlipHeaderTmp, receiptLineSelection);
    
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report data.
    /// </summary>
    protected void initializeReportData()
    {
        this.initializeInventDimReportSetup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventDimReportSetup</Name>
				<Source><![CDATA[
    private void initializeInventDimReportSetup()
    {
        inventDimReport             = InventDimCtrl_Rep_Purch::construct();
        inventDimReport.parmDocumentStatus(DocumentStatus::PackingSlip);
        inventDimReport.initDimParmVisible();
        inventDimSetup              = inventDimReport.dimFieldsActive(inventDimReport.parmDimParmVisible());
        inventDimReport.initProductDimParmVisible();
        inventDimProductSetup       = inventDimReport.dimFieldsActive(inventDimReport.parmDimParmVisible());

        insertInventDim = inventDimReport.isInventDimLine() || inventDimReport.isInventDimItemId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>externalItemNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ItemId</c> value in the <c>ExternalItemId</c> field.
    /// </summary>
    /// <param name = "_vendPackingSlipTrans">
    /// A <c>VendPackingSlipTrans</c> record to retrieve the external item number from.
    /// </param>
    /// <returns>
    /// The <c>ItemId</c> value in the <c>ExternalItemId</c> field.
    /// </returns>
    private ExternalItemId externalItemNum(VendPackingSlipTrans _vendPackingSlipTrans)
    {
        switch (this.parmVendFormletterParameters().ItemNum)
        {
            case OurYourBoth::Our   :   return '';
            case OurYourBoth::Your  :   return '';
            case OurYourBoth::Both  :   return _vendPackingSlipTrans.ExternalItemId;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchPackingSlipHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full data from the <c>PurchPackingSlipHeaderTmp</c> temp table.
    /// </summary>
    /// <returns>
    /// The <c>PurchPackingSlipHeaderTmp</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(PurchPackingSlipHeaderTmp))]
    public PurchPackingSlipHeaderTmp getPurchPackingSlipHeaderTmp()
    {
        PurchPackingSlipHeaderTmp purchPackingSlipHeaderTmp;
        
        this.setTransactionConnection(purchPackingSlipHeaderTmp);

        select purchPackingSlipHeaderTmp;

        return purchPackingSlipHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchPackingSlipTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full data from the <c>PurchPackingSlipTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The <c>PurchPackingSlipTmp</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(PurchPackingSlipTmp))]
    public PurchPackingSlipTmp getPurchPackingSlipTmp()
    {
        PurchPackingSlipTmp purchPackingSlipTmp;

        this.setTransactionConnection(purchPackingSlipTmp);

        select purchPackingSlipTmp;

        return purchPackingSlipTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Item ID.
    /// </summary>
    /// <param name = "_vendPackingSlipTrans">
    /// A <c>VendPackingSlipTrans</c> record to retrieve the item ID from.
    /// </param>
    /// <returns>
    /// The Item ID.
    /// </returns>
    private ItemId itemId(VendPackingSlipTrans _vendPackingSlipTrans, InventDim _vendPackingSlipTransInventDim)
    {
        ItemId  itemId;

        switch (this.parmVendFormletterParameters().ItemNum)
        {
            case OurYourBoth::Our   :    itemId = _vendPackingSlipTrans.ItemId;             break;
            case OurYourBoth::Your  :    itemId = _vendPackingSlipTrans.ExternalItemId;     break;
            case OurYourBoth::Both  :    itemId = _vendPackingSlipTrans.ItemId;             break;
        }

        if (inventDimReport.isInventDimItemId())
        {
            itemId += inventDimReport.reportStrItemId(_vendPackingSlipTransInventDim);
        }

        return  itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendFormletterParameters</Name>
				<Source><![CDATA[
    public VendFormletterParameters parmVendFormletterParameters()
    {
        if (!vendFormletterParameters.RecId)
        {
            vendFormletterParameters = VendFormletterParameters::find();
        }

        return vendFormletterParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackingSlipContract</Name>
				<Source><![CDATA[
    public PurchPackingSlipContract parmPackingSlipContract()
    {
        return this.parmDataContract() as PurchPackingSlipContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveQuantityLabel</Name>
				<Source><![CDATA[
    private str retrieveQuantityLabel(LanguageId _languageId)
    {
        if (!quantityLabel)
        {
            quantityLabel = SysLabel::labelId2String(literalStr("@SYS321794"), _languageId);
        }

        return quantityLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDimHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the inventory quantity and inventory storage dimensions.
    /// </summary>
    /// <param name = "_receiptLineSelection">
    /// A <c>PurchPackingSlipDPReceiptLineQuerySelection</c> object which the quantity is calculated for.
    /// </param>
    /// <returns>
    /// A string with the inventory dimensions.
    /// </returns>
    protected str printDimHistory(PurchPackingSlipDPReceiptLineQuerySelection _receiptLineSelection)
    {
        PurchPackingSlipDPDimHistoryBuilder dimHistory = PurchPackingSlipDPDimHistoryBuilder::construct();
        
        dimHistory.parmVendPackingSlipJour(this.parmVendPackingSlipJour());
        dimHistory.parmVendPackingSlipTrans(_receiptLineSelection.parmVendPackingSlipTrans());
        dimHistory.parmVendPackingSlipVersion(this.parmVendPackingSlipVersion());
        dimHistory.parmInventDimSetup(inventDimSetup);
        dimHistory.parmDefaultInventDim(_receiptLineSelection.parmVendPackingSlipTransInventDim());

        return dimHistory.build();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic. Calls helper methods and inserts data to temporary table.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by
    /// SSRS at runtime. The method should compute data and populate the data tables that will be
    /// returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        PurchPackingSlipContract    purchPackingSlipContract = this.parmPackingSlipContract();
        VendPackingSlipJourRecId    journalRecId = this.retrieveJournalRecId(purchPackingSlipContract);

        if (journalRecId)
        {
            PurchPackingSlipHeaderTmp purchPackingSlipHeaderTmp = PurchPackingSlipHeaderTmp::findJourRecId(journalRecId);

            if (purchPackingSlipHeaderTmp.RecId && purchPackingSlipHeaderTmp.IsProForma)
            {
                //the report data is already created so use it. this is the proforma scenario.
                this.copyReportData(purchPackingSlipHeaderTmp);
            }
            else
            {
                this.createReportData();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveJournalRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record Identifier from the purchase packing slip document.
    /// </summary>
    /// <param name = "_purchPackingSlipContract">The purchase packing slip document.</param>
    /// <returns>The record identifier</returns>
    protected VendPackingSlipJourRecId retrieveJournalRecId(PurchPackingSlipContract _purchPackingSlipContract)
    {
        RecId                       recId = _purchPackingSlipContract.parmRecordId();
        VendPackingSlipJourRecId    journalRecId;

        if (_purchPackingSlipContract.parmTableId() == tableNum(VendPackingSlipJour))
        {
            journalRecId = recId;
        }
        else if (_purchPackingSlipContract.parmTableId() == tableNum(VendPackingSlipVersion))
        {
            journalRecId = VendPackingSlipVersion::find(recId).VendPackingSlipJour;
        }
        
        return journalRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the report data for a product receipt document.
    /// </summary>
    /// <param name = "_purchPackingSlipHeaderTmp">
    /// A <c>PurchPackingSlipHeaderTmp</c> record which is the product receipt to be copied.
    /// </param>
    protected void copyReportData(PurchPackingSlipHeaderTmp _purchPackingSlipHeaderTmp)
    {
        this.copyHeader(_purchPackingSlipHeaderTmp);
        this.copyLines(_purchPackingSlipHeaderTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the product receipt header.
    /// </summary>
    /// <param name = "_purchPackingSlipHeaderTmp">
    /// A <c>PurchPackingSlipHeaderTmp</c> record to copy.
    /// </param>
    protected void copyHeader(PurchPackingSlipHeaderTmp _purchPackingSlipHeaderTmp)
    {
        RecordSortedList recordList = new RecordSortedList(tableNum(PurchPackingSlipHeaderTmp));
        recordList.sortOrder(fieldNum(PurchPackingSlipHeaderTmp, RecId));
        recordList.ins(_purchPackingSlipHeaderTmp);

        this.deleteCopiedHeader(_purchPackingSlipHeaderTmp);

        recordList.insertDatabase(this.parmUserConnection()); //it is inserted within user user connection so the framework will delete it automatically after the report is done.
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies product receipt lines.
    /// </summary>
    /// <param name = "_purchPackingSlipHeaderTmp">
    /// A <c>PurchPackingSlipHeaderTmp</c> record which is the product receipt header for the lines to copy.
    /// </param>
    protected void copyLines(PurchPackingSlipHeaderTmp _purchPackingSlipHeaderTmp)
    {
        RecordSortedList recordList = new RecordSortedList(tableNum(PurchPackingSlipTmp));
        recordList.sortOrder(fieldNum(PurchPackingSlipTmp, RecId));

        PurchPackingSlipTmp purchPackingSlipTmp;

        while select purchPackingSlipTmp
            where purchPackingSlipTmp.CreatedTransactionId == _purchPackingSlipHeaderTmp.CreatedTransactionId
        {
            recordList.ins(purchPackingSlipTmp);
        }

        this.deleteCopiedLines(_purchPackingSlipHeaderTmp);

        recordList.insertDatabase(this.parmUserConnection()); //it is inserted within user user connection so the framework will delete it automatically after the report is done.
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCopiedLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the copied product receipt lines.
    /// </summary>
    /// <param name = "_purchPackingSlipHeaderTmp">
    /// A <c>PurchPackingSlipHeaderTmp</c> record which is the copied product receipt.
    /// </param>
    protected void deleteCopiedLines(PurchPackingSlipHeaderTmp _purchPackingSlipHeaderTmp)
    {
        PurchPackingSlipTmp purchPackingSlipTmp;

        delete_from purchPackingSlipTmp        //the created data is copied so it should be deleted.
            where purchPackingSlipTmp.CreatedTransactionId == _purchPackingSlipHeaderTmp.CreatedTransactionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCopiedHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the copied product receipt header.
    /// </summary>
    /// <param name = "_purchPackingSlipHeaderTmp">
    /// A <c>PurchPackingSlipHeaderTmp</c> record which is the copied product receipt.
    /// </param>
    protected void deleteCopiedHeader(PurchPackingSlipHeaderTmp _purchPackingSlipHeaderTmp)
    {
        PurchPackingSlipHeaderTmp purchPackingSlipHeaderTmp;

        delete_from purchPackingSlipHeaderTmp
            where purchPackingSlipHeaderTmp.RecId == _purchPackingSlipHeaderTmp.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPDSFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns catch weight fields.
    /// </summary>
    /// <param name = "_purchPackingSlipTmp">
    /// A <c>PurchPackingSlipTmp</c> record to assign catch weight values to.
    /// </param>
    /// <param name = "_vendPackingSlipTrans">
    /// A <c>VendPackingSlipTrans</c> record to retrieve catch weight values from.
    /// </param>
    /// <param name = "_languageId">
    /// A language id describing the language in which the catch weight text must be created.
    /// </param>
    /// <remarks>
    /// Concatenates the field values along with labels to show as a seperate
    /// line in the report.
    /// </remarks>
    private void setPDSFields(PurchPackingSlipTmp _purchPackingSlipTmp, VendPackingSlipTrans _vendPackingSlipTrans, LanguageId _languageId)
    {
        _purchPackingSlipTmp.PdsCWQty     = _vendPackingSlipTrans.PdsCWQty;
        _purchPackingSlipTmp.PdsCWUnitId  = _vendPackingSlipTrans.pdsCWUnitId();

        if (isLanguageRTL(_languageId))
        {
            // Flip the order of labels and values.
            if (_purchPackingSlipTmp.PdsCWQty)
            {
                _purchPackingSlipTmp.PdsCWStr = '  ' + strFmt("@SYS191501", "@PDS1", _purchPackingSlipTmp.PdsCWQty);
            }

            if (_purchPackingSlipTmp.PdsCWUnitId)
            {
                _purchPackingSlipTmp.PdsCWStr = strFmt("@SYS191501", "@PDS3", _purchPackingSlipTmp.PdsCWUnitId) + _purchPackingSlipTmp.PdsCWStr;
            }
        }
        else
        {
            if (_purchPackingSlipTmp.PdsCWQty)
            {
                _purchPackingSlipTmp.PdsCWStr = strFmt("@SYS191501", "@PDS1", _purchPackingSlipTmp.PdsCWQty) + '  ';
            }

            if (_purchPackingSlipTmp.PdsCWUnitId)
            {
                _purchPackingSlipTmp.PdsCWStr += strFmt("@SYS191501", "@PDS3", _purchPackingSlipTmp.PdsCWUnitId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateProductReceiptLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a product receipt line must be created.
    /// </summary>
    /// <param name = "_purchPackingSlipHeaderTmp">
    /// A <c>PurchPackingSlipHeaderTmp</c> record which is the product receipt header.
    /// </param>
    /// <param name = "_receiptLineSelection">
    /// A <c>PurchPackingSlipDPReceiptLineQuerySelection</c> object which the product receipt line should be created for.
    /// </param>
    /// <returns>
    /// true, if the product receipt line must be created; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The method is meant as an extension point to change the decision whether a product receipt line must be created.
    /// </remarks>
    protected boolean mustCreateProductReceiptLine(
        PurchPackingSlipHeaderTmp                   _purchPackingSlipHeaderTmp, 
        PurchPackingSlipDPReceiptLineQuerySelection _receiptLineSelection)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductReceiptLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a product receipt line.
    /// </summary>
    /// <param name = "_purchPackingSlipHeaderTmp">
    /// A <c>PurchPackingSlipHeaderTmp</c> record which is the product receipt header.
    /// </param>
    /// <param name = "_receiptLineSelection">
    /// A <c>PurchPackingSlipDPReceiptLineQuerySelection</c> object which the product receipt line should be created for.
    /// </param>
    /// <returns>
    /// The created <c>PurchPackingSlipTmp</c> product receipt line record.
    /// </returns>
    protected PurchPackingSlipTmp createProductReceiptLine(
        PurchPackingSlipHeaderTmp                   _purchPackingSlipHeaderTmp, 
        PurchPackingSlipDPReceiptLineQuerySelection _receiptLineSelection)
    {
        PurchPackingSlipTmp purchPackingSlipTmp = this.initializeProductReceiptLine(_purchPackingSlipHeaderTmp, _receiptLineSelection);

        this.insertProductReceiptLine(purchPackingSlipTmp);

        return purchPackingSlipTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProductReceiptLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a product receipt line.
    /// </summary>
    /// <param name = "_purchPackingSlipHeaderTmp">
    /// A <c>PurchPackingSlipHeaderTmp</c> record which is the product receipt header.
    /// </param>
    /// <param name = "_receiptLineSelection">
    /// A <c>PurchPackingSlipDPReceiptLineQuerySelection</c> object which the product receipt line should be initialized from.
    /// </param>
    /// <returns>
    /// The initialized <c>PurchPackingSlipTmp</c> product receipt line record.
    /// </returns>
    protected PurchPackingSlipTmp initializeProductReceiptLine(
        PurchPackingSlipHeaderTmp                   _purchPackingSlipHeaderTmp, 
        PurchPackingSlipDPReceiptLineQuerySelection _receiptLineSelection)
    {
        PurchPackingSlipTmp purchPackingSlipTmp;

        this.setTransactionConnection(purchPackingSlipTmp);

        purchPackingSlipTmp.JournalRecId                = _purchPackingSlipHeaderTmp.JournalRecId;

        purchPackingSlipTmp.VendPackingSlipTrans        = _receiptLineSelection.parmVendPackingSlipTrans().RecId;
        purchPackingSlipTmp.ItemId                      = this.itemId(_receiptLineSelection.parmVendPackingSlipTrans(), _receiptLineSelection.parmVendPackingSlipTransInventDim());

        purchPackingSlipTmp.Name                        = _receiptLineSelection.parmVendPackingSlipTrans().Name;
        purchPackingSlipTmp.Ordered                     = _receiptLineSelection.parmVendPackingSlipTrans().Ordered;
        purchPackingSlipTmp.PurchUnitTxt                = _receiptLineSelection.parmVendPackingSlipTrans().purchUnitTxt();
        purchPackingSlipTmp.Qty                         = _receiptLineSelection.parmVendPackingSlipTrans().Qty;
        purchPackingSlipTmp.Remain                      = _receiptLineSelection.parmVendPackingSlipTrans().Remain;
        purchPackingSlipTmp.ValueMST                    = _receiptLineSelection.parmVendPackingSlipTrans().ValueMST;

        this.setPDSFields(purchPackingSlipTmp, _receiptLineSelection.parmVendPackingSlipTrans(), this.parmVendPackingSlipJour().LanguageId);

        if (insertInventDim)
        {
            purchPackingSlipTmp.InventDimProduct        = FormLetter::inventDimReport(_receiptLineSelection.parmVendPackingSlipTransInventDim(), inventDimProductSetup, this.parmVendPackingSlipJour().LanguageId);
        }
        purchPackingSlipTmp.InventDimPrint              = this.printDimHistory(_receiptLineSelection);

        purchPackingSlipTmp.ExternalItemNum             = this.externalItemNum(_receiptLineSelection.parmVendPackingSlipTrans());

        return purchPackingSlipTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProductReceiptLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the product receipt line.
    /// </summary>
    /// <param name = "_purchPackingSlipTmp">
    /// A <c>PurchPackingSlipTmp</c> product receipt line record to insert.
    /// </param>
    protected void insertProductReceiptLine(PurchPackingSlipTmp _purchPackingSlipTmp)
    {
        _purchPackingSlipTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductReceiptHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a product receipt header.
    /// </summary>
    /// <returns>
    /// The created <c>PurchPackingSlipHeaderTmp</c> product receipt header record.
    /// </returns>
    protected PurchPackingSlipHeaderTmp createProductReceiptHeader()
    {
        PurchPackingSlipHeaderTmp purchPackingSlipHeaderTmp = this.initializeProductReceiptHeader();

        this.insertProductReceiptHeader(purchPackingSlipHeaderTmp);

        return purchPackingSlipHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProductReceiptHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a product receipt header.
    /// </summary>
    /// <returns>
    /// The initialized <c>PurchPackingSlipHeaderTmp</c> product receipt header record.
    /// </returns>
    protected PurchPackingSlipHeaderTmp initializeProductReceiptHeader()
    {
        PurchPackingSlipHeaderTmp purchPackingSlipHeaderTmp;

        this.setTransactionConnection(purchPackingSlipHeaderTmp);

        purchPackingSlipHeaderTmp.JournalRecId            = this.parmVendPackingSlipJour().RecId;

        purchPackingSlipHeaderTmp.PdsEnabled              = #PdsCatchWeightEnabled;

        CompanyInfo companyInfo = CompanyInfo::find();
        
        purchPackingSlipHeaderTmp.CompanyName             = companyInfo.name();
        purchPackingSlipHeaderTmp.CompanyAddress          = companyInfo.postalAddressWithTranslation(this.parmVendPackingSlipJour().LanguageId);
        purchPackingSlipHeaderTmp.CompanyPhone            = companyInfo.phone();
        purchPackingSlipHeaderTmp.CompanyTeleFax          = companyInfo.teleFax();
        purchPackingSlipHeaderTmp.CompanyGiro             = companyInfo.Giro;
        purchPackingSlipHeaderTmp.CompanyCoRegNum         = companyInfo.CoRegNum;
        purchPackingSlipHeaderTmp.CompanyLogo             = FormLetter::companyLogo();
        if (conLen(purchPackingSlipHeaderTmp.CompanyLogo) == 0)
        {
            purchPackingSlipHeaderTmp.PrintLogo           = NoYes::No;
        }
        else
        {
            purchPackingSlipHeaderTmp.PrintLogo           = NoYes::Yes;
        }
        purchPackingSlipHeaderTmp.CompanyEnterpriseNumber = companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, this.parmVendPackingSlipJour().DeliveryDate);

        purchPackingSlipHeaderTmp.DeliveryName            = this.parmVendPackingSlipJour().DeliveryName;
        purchPackingSlipHeaderTmp.DeliveryAddress         = this.parmVendPackingSlipJour().deliveryAddress();
        purchPackingSlipHeaderTmp.VendName                = this.parmVendPackingSlipJour().vendName();
        purchPackingSlipHeaderTmp.VendAddress             = this.parmVendPackingSlipJour().vendAddress();
        purchPackingSlipHeaderTmp.PackingSlipId           = this.parmVendPackingSlipJour().PackingSlipId;
        purchPackingSlipHeaderTmp.DeliveryDate            = this.parmVendPackingSlipJour().DeliveryDate;
        purchPackingSlipHeaderTmp.PurchId                 = this.parmVendPackingSlipJour().PurchId;
        purchPackingSlipHeaderTmp.InternalInvoiceId       = this.parmVendPackingSlipVersion().InternalPackingSlipId;
        purchPackingSlipHeaderTmp.ReqAttention            = this.parmVendPackingSlipJour().ReqAttention;
        purchPackingSlipHeaderTmp.ShowCompanyVATNum       = this.parmVendFormletterParameters().PrintPurchPackingSlipVATNum;
        
        var vendPackingSlipJourTable                      = this.parmVendPackingSlipJour();
        purchPackingSlipHeaderTmp.CompanyVATNum           = TaxTransactionTaxIDHelper::getTaxID(
            vendPackingSlipJourTable.TableId,
            vendPackingSlipJourTable.RecId,
            vendPackingSlipJourTable.DeliveryDate).getLegalEntityTaxID();

        purchPackingSlipHeaderTmp.IsProForma              = this.parmVendPackingSlipJour().isProforma();

        #ISOCountryRegionCodes
        
        if (SysCountryRegionCode::countryInfo() == #isoCZ)
        {
            purchPackingSlipHeaderTmp.CompanyRegNum                         = companyInfo.RegNum;
            purchPackingSlipHeaderTmp.CompanyEmail                          = companyInfo.email();
            purchPackingSlipHeaderTmp.RegNumCompaniesFieldMap::initCommercialRegisterFromTaxRegistration(companyInfo, this.parmVendPackingSlipJour().DeliveryDate);

            BankAccountTable bankAccountTable = BankAccountTable::find(companyInfo.Bank);

            purchPackingSlipHeaderTmp.CompanyBankAccountName    = bankAccountTable.Name;
            purchPackingSlipHeaderTmp.CompanyBankAccountNum     = hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, AccountNum)) ?
																	bankAccountTable.AccountNum : "@AccountsReceivable:FiveAsterisk";
            purchPackingSlipHeaderTmp.CompanyBankAccountRegNum  = bankAccountTable.RegistrationNum;

            VendTable vendTable = this.parmVendPackingSlipJour().vendTable_OrderAccount();

            purchPackingSlipHeaderTmp.VendRegNum = vendTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, this.parmVendPackingSlipJour().DeliveryDate);
            purchPackingSlipHeaderTmp.VendVATNum = TaxTransactionTaxIDHelper::getTaxID(
                vendPackingSlipJourTable.TableId,
                vendPackingSlipJourTable.RecId,
                vendPackingSlipJourTable.DeliveryDate).getCounterPartyTaxID();
        }

        return purchPackingSlipHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProductReceiptHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the product receipt header.
    /// </summary>
    /// <param name = "_purchPackingSlipHeaderTmp">
    /// A <c>purchPackingSlipHeaderTmp</c> product receipt header record to insert.
    /// </param>
    protected void insertProductReceiptHeader(purchPackingSlipHeaderTmp _purchPackingSlipHeaderTmp)
    {
        _purchPackingSlipHeaderTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransactionConnection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the database transaction connection for a record from the connection associated with the report.
    /// </summary>
    /// <param name = "_reportRecord">
    /// A record to set database transaction for.
    /// </param>
    final protected void setTransactionConnection(Common _reportRecord)
    {
        var connection = this.parmUserConnection();

        if (connection)
        {
            _reportRecord.setConnection(connection);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>