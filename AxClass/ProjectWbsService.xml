<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjectWbsService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Web service class for Project Workbreakdown structure
/// </summary>
public class ProjectWbsService
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getProjectContracts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get project contracts
    /// </summary>
    /// <param name = "company"></param>
    /// <returns></returns>
    [AifCollectionTypeAttribute('return', Types::Class, classStr(ProjectWbsProjectContractDataContract))]
    public List getProjectContracts(DataAreaId company)
    {
        List result = new List(Types::Class);
        ProjectWbsProjectContractDataContract dataContract;
        ProjInvoiceTable projInvoiceTable;
        ProjTable projTable;

        changecompany(company)
        {
            while select ProjInvoiceProjId,Description from projInvoiceTable
                join RecId from projTable where projTable.ProjInvoiceProjId == projInvoiceTable.ProjInvoiceProjId &&
                                                projTable.Status != ProjStatus::Completed
            {
                dataContract = new ProjectWbsProjectContractDataContract();
                dataContract.projectContractId(projInvoiceTable.ProjInvoiceProjId);
                dataContract.description(projInvoiceTable.Description);

                result.addEnd(dataContract);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourceCategories</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get all project resource roles for a given company
    /// </summary>
    /// <param name = "company"></param>
    /// <returns>List of resource roles</returns>
    [AifCollectionTypeAttribute('return', Types::Class, classStr(ProjectWbsResourceCategoryDataContract))]
    public List getResourceCategories(DataAreaId company)
    {
        List result = new List(Types::Class);
        ProjectWbsResourceCategoryDataContract dataContract;
        PSASchedRole roles;

        changecompany(company)
        {
            while select roles where roles.Disable == FalseTrue::False
            {
                dataContract = new ProjectWbsResourceCategoryDataContract();
                dataContract.roleid(roles.RoleId);
                dataContract.description(roles.Description);

                result.addEnd(dataContract);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectLegalEntities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get all legal entities of the current instance of AOS
    /// </summary>
    /// <returns>List of all legal entities</returns>
    [AifCollectionTypeAttribute('return', Types::Class, classStr(ProjectWbsLegalEntityDataContract))]
    public List getProjectLegalEntities()
    {
        List result = new List(Types::Class);
        ProjectWbsLegalEntityDataContract dataContract;
        DataArea dataArea;

        while select id,Name from dataArea
        {
            dataContract = new ProjectWbsLegalEntityDataContract();
            dataContract.dataAreaId(dataArea.id);
            dataContract.companyName(dataArea.name);

            result.addEnd(dataContract);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllProjectsForLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get all projects for a given company
    /// </summary>
    /// <param name = "company">Company filter for the query</param>
    /// <returns>List of all projects for a given company</returns>
    [AifCollectionTypeAttribute('return', Types::Class, classStr(ProjectWbsProjectPickerDataContract))]
    public List getAllProjectsForLegalEntity(DataAreaId company)
    {
        List result = new List(Types::Class);
        ProjectWbsProjectPickerDataContract dataContract;
        ProjTable projTable;
        ProjPlanVersionDetail projPlanVersionDetail;
        ProjectWbsLockBox lockBox;
        ProjectWbsMppUploadStrategy uploadStrategy;

        changecompany(company)
        {
            while select ProjId,Name,RecId from projTable where projTable.Status != ProjStatus::Completed  &&
                                                projTable.PSASchedCalendarId != ""
                join projPlanVersionDetail where projPlanVersionDetail.ProjId == projTable.ProjId &&
                                                 projPlanVersionDetail.VersionType == ProjPlanVersionType::Draft
            {
                dataContract = new ProjectWbsProjectPickerDataContract();
                dataContract.projectId(projTable.ProjId);
                dataContract.projectName(projTable.Name);
                dataContract.projectRecId(projTable.RecId);
                dataContract.hierarchyId(projPlanVersionDetail.HierarchyId);

                select firstonly lockBox where lockBox.HierarchyId == projPlanVersionDetail.HierarchyId;

                if (lockBox.RecId != 0 && lockBox.FileId)
                {
                    uploadStrategy = new ProjectWbsMppUploadStrategy();
                    str url = uploadStrategy.getUrlFromStorage(lockBox.FileId);

                    dataContract.storageUrl(url);
                }

                result.addEnd(dataContract);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectInfo</Name>
				<Source><![CDATA[
    [AifCollectionTypeAttribute('return', Types::Class, classStr(ProjectWbsProjectPickerDataContract))]
    public List getProjectInfo(str company, RefRecId recordId)
    {
        List result = new List(Types::Class);
        ProjectWbsProjectPickerDataContract dataContract;
        ProjTable projTable;
        ProjPlanVersionDetail projPlanVersionDetail;

        changecompany(company)
        {
            select firstonly ProjId,Name,RecId
            from projTable where projTable.RecId == recordId;

            if (projTable.RecId != 0)
            {
                ProjectWbsMppUploadStrategy uploadStrategy;
                ProjectWbsLockBox lockBox;

                projPlanVersionDetail = ProjPlanVersionDetail::findProjectDraftVersion(ProjTable.ProjId);

                dataContract = new ProjectWbsProjectPickerDataContract();
                dataContract.projectId(projTable.ProjId);
                dataContract.projectName(projTable.Name);
                dataContract.projectRecId(projTable.RecId);
                dataContract.hierarchyId(projPlanVersionDetail.HierarchyId);
                
                select firstonly lockBox where lockBox.HierarchyId == projPlanVersionDetail.HierarchyId;

                if (lockBox.RecId != 0 && lockBox.FileId)
                {
                    uploadStrategy = new ProjectWbsMppUploadStrategy();
                    str url = uploadStrategy.getUrlFromStorage(lockBox.FileId);

                    dataContract.storageUrl(url);
                }

                dataContract.hasChildTasks(this.hasChildTasks(company, projPlanVersionDetail.HierarchyId));

                result.addEnd(dataContract);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectResources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get project resources for a given project and company.
    /// </summary>
    /// <param name = "projectRecId">Record Id of the project</param>
    /// <param name = "company">Company filter</param>
    /// <returns>List of all resources assigned to the project</returns>
    [AifCollectionTypeAttribute('return', Types::Class, classStr(ProjectWbsTeamResourceDataContract))]
    public List getProjectResources(RefRecId projectRecId, DataAreaId company)
    {
        List result = new List(Types::Class);
        ProjectWbsTeamResourceDataContract dataContract;
        PSAProjSchedRole psaProjSchedRole;
        
        ProjTable projTable;

        changecompany(company)
        {
            while select psaProjSchedRole join ProjId from projTable
                where psaProjSchedRole.ProjId == projTable.ProjId &&
                      projTable.RecId == projectRecId
            {
                dataContract = new ProjectWbsTeamResourceDataContract();
                dataContract.recId(psaProjSchedRole.RecId);
                dataContract.resourceName(psaProjSchedRole.Name);
                dataContract.company(company);
                dataContract.resourceRecId(psaProjSchedRole.Resource);
                dataContract.resourceCostPrice(ProjHourCostPrice::findResourceRate(psaProjSchedRole.Resource).CostPrice);
                
                result.addEnd(dataContract);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectCategories</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get all project categories for a given company
    /// </summary>
    /// <param name = "company">Company filter</param>
    /// <param name = "projectId">Project Id filter</param>
    /// <returns>List of all project categories for the given company and project.</returns>
    [AifCollectionTypeAttribute('return', Types::Class, classStr(ProjectWbsCategoryDataContract))]
    public List getProjectCategories(DataAreaId company, ProjId projectId)
    {
        List result = new List(Types::Class);
        ProjectWbsCategoryDataContract dataContract;
        ProjCategory projCategory;
        ProjCategoryLookup projCategoryLookup = new ProjCategoryLookup();
        projCategoryLookup.parmCategoryType(ProjCategoryType::Hour);
        projCategoryLookup.parmFilterEstimate(NoYes::Yes);
        projCategoryLookup.parmFilterSubscription(NoYes::Yes);
        projCategoryLookup.parmShowInactiveCategories(ProjParameters::find().ShowInactiveCategories);
        projCategoryLookup.parmFormName('');

        Query query = projCategoryLookup.buildQueryForWBSTaskCategory(projectId);
        query.allowCrossCompany(true);
        query.addCompanyRange(company);

        QueryRun queryRun = new QueryRun(query);

        while(queryRun.next())
        {
            if (queryRun.changed(tableNum(ProjCategory)))
            {
                projCategory = queryRun.get(tableNum(ProjCategory));
                dataContract = new ProjectWbsCategoryDataContract();
                dataContract.categoryId(projCategory.CategoryId);
                dataContract.categoryName(projCategory.Name);

                result.addEnd(dataContract);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserDefaultCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the user's default company thru UserInfo table.
    /// </summary>
    /// <param name = "networkAlias">User's network alias
    /// </param>
    /// <returns>List with one element containing the UserInfo infomration</returns>
    [AifCollectionTypeAttribute('return', Types::Class, classStr(ProjectWbsUserCompanyDataContract))]
    public List getUserDefaultCompany(str networkAlias)
    {
        List result = new List(Types::Class);
        ProjectWbsUserCompanyDataContract dataContract = new ProjectWbsUserCompanyDataContract();;
        UserInfo userInfo;

        select firstonly networkAlias,company from userInfo where userInfo.networkAlias == networkAlias;

        dataContract.networkAlias(userInfo.networkAlias);
        dataContract.company(userInfo.company);

        result.addEnd(dataContract);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the Project Wbs hierarchy for a given company and hierarchy Id
    /// </summary>
    /// <param name = "company">Company filter</param>
    /// <param name = "hierarchyId">Hierarchy Id of the Project Wbs</param>
    /// <param name = "skipLock">true to skip locking of the Wbs, otherwise false.</param>
    /// <returns>ProjectWbsHierarchyDataContract which is data contract for the Project Wbs Hierarchy</returns>
    public ProjectWbsHierarchyDataContract getHierarchy(DataAreaId company, HierarchyIdBase hierarchyId, boolean skipLock = false)
    {
        List resultTree = new List(Types::Class);
        List resultActivity;
        List resultDrafts;
        ProjectWbsHierarchyDataContract dataContract;
        ProjectWbsTaskDataContract taskDataContract;
        ProjPlanVersionDetail projPlanVersionDetail;
        HierarchyTreeTable hierarchyTreeTable;
        ProjProjectWBSDraftEntity projectWBSDraftEntity;
        ProjectWbsDraftAssignmentDataContract draftAssignmentsDataContract;
        ProjPlanVersionAssignment projPlanVersionAssignment;
        ProjectWbsDraftAssignmentDataContract assignmentContract;
        PSAProjSchedRole psaProjSchedRole;
        ProjPlanVersion projPlanVersion;
        ResourceView resourceView;
        ProjectWbsLockBox projWbsLockBox;
        ResourceCategoryView role;
        int level = 0;

        changecompany(company)
        {
            projPlanVersionDetail = ProjPlanVersionDetail::findByHierarchyId(hierarchyId);
            projPlanVersion = ProjPlanVersion::getRootTask(hierarchyId);
            
            dataContract = new ProjectWbsHierarchyDataContract();
            dataContract.hierachyId(projPlanVersionDetail.HierarchyId);
            dataContract.isTemplate(projPlanVersionDetail.IsTemplate);
            dataContract.recId(projPlanVersionDetail.RecId);

            // Add root in the hierarchy tree data
            taskDataContract = new ProjectWbsTaskDataContract();
            taskDataContract.hierachyId(projPlanVersionDetail.HierarchyId);
            taskDataContract.level(level);
            taskDataContract.taskId("1");
            taskDataContract.parentTaskId("");
            taskDataContract.name(projPlanVersion.TaskName);
            taskDataContract.projDependency(new List(Types::Class));
            taskDataContract.draftAssignments(new List(Types::Class));
            
            taskDataContract.mspid(strRem(guid2Str(projPlanVersion.MSPID), '{}'));

            projPlanVersion.clear();
            
            resultTree.addEnd(taskDataContract);

            Map assignedResourceNameMap = new Map(Types::Int64, Types::String);
            Map assignedResourceRecIdMap = new Map(Types::Int64, Types::String);
                
            ProjTask::getAssignedResource(hierarchyId, assignedResourceNameMap, assignedResourceRecIdMap);

            while select projectWBSDraftEntity where projectWBSDraftEntity.HierarchyId == hierarchyId
            {
                resultActivity = new List(Types::Class);
                taskDataContract = new ProjectWbsTaskDataContract();

                // get level by number of periods (or whatever delimeter) in the WBSID
                List strLevel = strSplit(projectWBSDraftEntity.WBSId, ".");
                level = strLevel.elements();

                taskDataContract.wbsid(projectWBSDraftEntity.WBSId);
                taskDataContract.hierachyId(projectWBSDraftEntity.HierarchyId);
                taskDataContract.recId(projectWBSDraftEntity.RecId);
                taskDataContract.elementNodeType(ElementNodeType::Node);
                taskDataContract.taskId(int642Str(projectWBSDraftEntity.TaskId));
                taskDataContract.parentTaskId(int642Str(projectWBSDraftEntity.ParentTaskId));
                taskDataContract.level(level);
                taskDataContract.name(projectWBSDraftEntity.Task);
                taskDataContract.siblingNumber(projectWBSDraftEntity.TaskSiblingNumber);
                taskDataContract.mspid(strRem(guid2Str(projectWBSDraftEntity.MSPID), '{}'));
                taskDataContract.taskCategory(projectWBSDraftEntity.Category);
                taskDataContract.effort(projectWBSDraftEntity.Effort);
                taskDataContract.taskStart(projectWBSDraftEntity.StartDate);
                taskDataContract.taskEnd(projectWBSDraftEntity.EndDate);
                taskDataContract.resourceCategory(projectWBSDraftEntity.Role);
                taskDataContract.taskDuration(projectWBSDraftEntity.Duration);
                taskDataContract.action(0);
                taskDataContract.canDelete(true);
                taskDataContract.projDependency(this.getPredecessors(projectWBSDraftEntity.HierarchyId, projectWBSDraftEntity.TaskId));
                taskDataContract.numofresources(projectWBSDraftEntity.NumberOfResources);
                taskDataContract.notes(projectWBSDraftEntity.Note);

                if (projectWBSDraftEntity.TaskPriority)
                {
                    this.setTaskPriority(projectWBSDraftEntity, taskDataContract);
                }

                taskDataContract.priority(projectWBSDraftEntity.TaskPriority);

                resultDrafts = new List(Types::Class);
                
                if (assignedResourceRecIdMap.exists(projectWBSDraftEntity.RecId))
                {
                    str resourceRecIds = assignedResourceRecIdMap.lookup(projectWBSDraftEntity.RecId);
                    List listResourceRecIds = strSplit(resourceRecIds, ",");
                    ListEnumerator listEnum = listResourceRecIds.getEnumerator();

                    while (listEnum.moveNext())
                    {
                        select psaProjSchedRole where psaProjSchedRole.RecId == str2Int64(listEnum.current())  &&
                                                      psaProjSchedRole.ProjId == projectWBSDraftEntity.ProjectId
                            outer join ResourceId,ResourceCompanyId from resourceView  where resourceView.RecId == psaProjSchedRole.Resource
                            outer join CategoryId from role where role.RecId == psaProjSchedRole.ResourceCategory;

                        if (psaProjSchedRole.RecId != 0)
                        {
                            assignmentContract = new ProjectWbsDraftAssignmentDataContract();
                            assignmentContract.hierarchyId(projPlanVersion.HierarchyId);
                            assignmentContract.taskId(projPlanVersion.HierarchyTaskId);
                            assignmentContract.resourceName(psaProjSchedRole.Name);
                            assignmentContract.resourceRecId(psaProjSchedRole.Resource);
                            assignmentContract.resourceId(resourceView.ResourceId);
                            assignmentContract.companyId(resourceView.ResourceCompanyId);
                            assignmentContract.dateFrom(psaProjSchedRole.PSARoleStartDate);
                            assignmentContract.dateTo(psaProjSchedRole.PSARoleEndDate);
                            assignmentContract.activityResource(psaProjSchedRole.RecId);
                            assignmentContract.roleId(role.CategoryId);

                            resultDrafts.addEnd(assignmentContract);
                        }
                    }
                }

                taskDataContract.draftAssignments(resultDrafts);

                resultTree.addEnd(taskDataContract);
            }

            dataContract.tasks(resultTree);
        }

        return dataContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaskPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the WBS task priority based on activity priority.
    /// </summary>
    /// <param name = "_projectWBSDraftEntity">
    /// The <c>ProjProjectWBSDraftEntity</c> entity containing task priority.
    /// </param>
    /// <param name = "_taskDataContract">
    /// The WBS data contract to set the priority.
    /// </param>
    protected void setTaskPriority(ProjProjectWBSDraftEntity _projectWBSDraftEntity, ProjectWbsTaskDataContract _taskDataContract)
    {
        switch (_projectWBSDraftEntity.TaskPriority)
        {
            case smmActivityPriority::Low:
                _taskDataContract.priority(100);
                break;

            case smmActivityPriority::Normal:
                _taskDataContract.priority(500);
                break;

            case smmActivityPriority::High:
                _taskDataContract.priority(1000);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadMppToPermanentStorage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Uploads a Project client file into the permanent blob storage.
    /// </summary>
    /// <param name = "company">Company Id of the related document (Project, Quoation or Template)</param>
    /// <param name = "fileSyncLinkType">Hierarchy type of the synched Wbs</param>
    /// <param name = "documentRecId">Record Id of the synched document</param>
    /// <param name = "documentId">Id of the synched document</param>
    /// <param name = "hierarchyId">Hierarchy Id of the Wbs</param>
    /// <param name = "fileStream">The serialized Project client file.</param>
    /// <returns>The url for the Project client file stored in Blob storage.</returns>
    public str uploadMppToPermanentStorage(str company,
                                           MSPFileSyncLinkType fileSyncLinkType,
                                           int64 documentRecId,
                                           str documentId,
                                           str hierarchyId,
                                           str fileStream)
    {
        str url;
        ProjectWbsLockBox lockBox;

        select firstonly forupdate crosscompany:[company] lockBox where lockBox.HierarchyId == hierarchyId;

        if (lockBox.RecId && lockBox.IsLocked == NoYes::Yes && !lockBox.FileId && lockBox.LockLocation == ProjectWbsLockLocation::AOS)
        {
            return '';
        }

        changecompany(company)
        {
            ProjTable projTable = ProjTable::findRecId(documentRecId);
            documentId = projTable.ProjId;
        
            str fileName = strFmt("%1_%2_%3_%4_%5.mpp", company, enum2Str(fileSyncLinkType), documentRecId, documentId, hierarchyId);
            ProjectWbsMppUploadStrategy uploadStrategy = new ProjectWbsMppUploadStrategy();
            System.Byte[] byteArray = System.Convert::FromBase64String(fileStream);
            SharedServiceUnitFileID fieldId;

            using(System.IO.MemoryStream ms = new System.IO.MemoryStream(byteArray))
            {
                ProjectWbsMppUploadResult uploadResult = uploadStrategy.uploadFile(ms, FileName);

                fieldId = uploadResult.getFileId();

                url = uploadResult.getResultUri();
            }

            if(url)
            {
                if(lockBox.RecId != 0)
                {
                    if (lockBox.FileId)
                    {
                        ProjectWbsMppUploadResult::constructFromFileId(lockBox.FileId).deleteResult();
                    }

                    ttsbegin;
                    
                    lockBox.IsLocked = NoYes::No;
                    lockBox.LockLocation = ProjectWbsLockLocation::ProjectClient;
                    lockBox.FileId = fieldId;
                    lockBox.update();

                    ttscommit;
                }
                else
                {
                    lockBox.clear();
                    lockBox.ProjTable = documentRecId;
                    lockBox.FileId = fieldId;
                    lockBox.HierarchyId = hierarchyId;
                    lockBox.IsLocked = NoYes::No;
                    lockBox.LockLocation = ProjectWbsLockLocation::ProjectClient;
                    lockBox.insert();
                }
            }
        }

        return url;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPredecessors</Name>
				<Source><![CDATA[
    private List getPredecessors(HierarchyIdBase _hierarchyId, ProjHierarchyTaskId _taskId)
    {
        ProjDependency  projDependency;
        ProjPlanVersion planVersion;
        List            list = new List(Types::Class);
        ProjectWbsDependencyDataContract dataContract;

        while select projDependency
                where projDependency.ProjPlanHierarchyId == _hierarchyId &&
                      projDependency.SuccessorHierarchyTaskId == _taskId
            join HierarchyId,ParentHierarchyTaskId,TaskSiblingNumber from planVersion
                where planVersion.HierarchyId == _hierarchyId &&
                      planVersion.HierarchyTaskId == projDependency.PredecessorHierarchyTaskId
        {
            if (projDependency.PredecessorHierarchyTaskId)
            {
                dataContract = new ProjectWbsDependencyDataContract();
                dataContract.successor(int642Str(_taskId));
                dataContract.predecessor(int642Str(projDependency.PredecessorHierarchyTaskId));

                list.addEnd(dataContract);
            }
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectDefaults</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return all defaults for Project.
    /// </summary>
    /// <returns>
    /// ProjectWbsProjectDefaultsDataContract
    /// </returns>
    public ProjectWbsProjectDefaultsDataContract getProjectDefaults(str company)
    {
        ProjectWbsProjectDefaultsDataContract dataContract = new ProjectWbsProjectDefaultsDataContract();

        NumberSequenceReference numberSequenceReference;
        NumberSequenceTable     numberSequenceTable;
        ProjParameters parameters;

        changecompany(company)
        {
            numberSequenceReference = ProjParameters::numRefProjId();
            numberSequenceTable = NumberSequenceTable::find(numberSequenceReference.NumberSequenceId);

            dataContract.isProjectIdNumberSequenceSet((!numberSequenceTable.numAllowEdit()));

            numberSequenceReference = ProjParameters::numRefProjInvoiceProjId();
            numberSequenceTable = NumberSequenceTable::find(numberSequenceReference.NumberSequenceId);

            dataContract.isContractIDNumberSequenceSet((!numberSequenceTable.numAllowEdit()));

            parameters = ProjParameters::find();
            
            dataContract.defaultCategory(parameters.EmplCategory);
            dataContract.defaultProjectType(parameters.DisplayProjectType);
            dataContract.defaultCalendar(PSAParameters::find().SchedDefaultCalendar);
        }

        return dataContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the project types available using the ProjType enum.
    /// </summary>
    /// <returns>List of all project types</returns>
    [AifCollectionTypeAttribute('return', Types::Class, classStr(ProjectWbsProjectTypeDataContract))]
    public List getProjectTypes()
    {
        List list = new List(Types::Class);
        ProjectWbsProjectTypeDataContract dataContract;
        DictEnum dictEnum = new DictEnum(enumName2Id(enumStr(ProjType)));
        int i;
        
        for(i = 0; i < dictEnum.values(); i++)
        {
            dataContract = new ProjectWbsProjectTypeDataContract();
            dataContract.name(dictEnum.index2Name(i));
            dataContract.value(dictEnum.index2Symbol(i));

            List.addEnd(dataContract);
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFundingSourceTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the funding source types available using the ProjType enum.
    /// </summary>
    /// <returns>List of all project types</returns>
    [AifCollectionTypeAttribute('return', Types::Class, classStr(ProjectWbsFundingSourceTypeDataContract))]
    public List getFundingSourceTypes()
    {
        List list = new List(Types::Class);
        ProjectWbsFundingSourceTypeDataContract dataContract;
        DictEnum dictEnum = new DictEnum(enumName2Id(enumStr(ProjFundingType)));
        int i;
        
        for(i = 0; i < dictEnum.values(); i++)
        {
            dataContract = new ProjectWbsFundingSourceTypeDataContract();
            dataContract.name(dictEnum.index2Name(i));
            dataContract.value(dictEnum.index2Symbol(i));

            List.addEnd(dataContract);
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectGroups</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get all project groups for a given company and project type
    /// </summary>
    /// <param name = "company">Company filter</param>
    /// <param name = "projectType">Project type filter</param>
    /// <returns>List of project groups filtered by a given project type</returns>
    [AifCollectionTypeAttribute('return', Types::Class, classStr(ProjectWbsProjectGroupDataContract))]
    public List getProjectGroups(str company, str projectType)
    {
        List list = new List(Types::Class);
        ProjectWbsProjectGroupDataContract dataContract;
        ProjGroup projGroup;
        ProjType projType = symbol2Enum(enumNum(ProjType), projectType);
        
        changecompany(company)
        {
            while select ProjGroupId, Name from projGroup where projGroup.projType == projType
            {
                dataContract = new ProjectWbsProjectGroupDataContract();
                dataContract.projgroupid(projGroup.ProjGroupId);
                dataContract.name(projGroup.Name);

                List.addEnd(dataContract);
            }
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkCalendars</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get all work calendars
    /// </summary>
    /// <param name = "company">Company filter</param>
    /// <returns></returns>
    [AifCollectionTypeAttribute('return', Types::Class, classStr(ProjectWbsCalendarDataContract))]
    public List getWorkCalendars(DataAreaId company)
    {
        List result = new List(Types::Class);
        ProjectWbsCalendarDataContract dataContract;
        WorkCalendarTable workCalendarTable;

        changecompany(company)
        {
            while select workCalendarTable
            {
                dataContract = new ProjectWbsCalendarDataContract();
                dataContract.calendarid(workCalendarTable.CalendarId);
                dataContract.calendarname(workCalendarTable.Name);

                result.addEnd(dataContract);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get all customers to be used as funding sources for project contract.
    /// </summary>
    /// <param name = "company">Company filter</param>
    /// <returns>List of customers filtered by company</returns>
    [AifCollectionTypeAttribute('return', Types::Class, classStr(ProjectWbsCustomerDataContract))]
    public List getCustomers(str company)
    {
        List list = new List(Types::Class);
        ProjectWbsCustomerDataContract dataContract;
        CustTable custTable;
        DirPartyTable dirParty;
        
        changecompany(company)
        {
            while select AccountNum, Currency from custTable
                join Name from dirParty where custTable.Party == dirParty.RecId
            {
                dataContract = new ProjectWbsCustomerDataContract();
                dataContract.customerAccount(custTable.AccountNum);
                dataContract.currency(custTable.Currency);
                dataContract.customerName(dirParty.Name);

                list.addEnd(dataContract);
            }
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get all currencies.
    /// </summary>
    /// <returns>List of currencies</returns>
    [AifCollectionTypeAttribute('return', Types::Class, classStr(ProjectWbsCurrencyDataContract))]
    public List getCurrencies()
    {
        List list = new List(Types::Class);
        ProjectWbsCurrencyDataContract dataContract;
        Currency currency;

        while select CurrencyCode, Txt from currency
        {
            dataContract = new ProjectWbsCurrencyDataContract();
            dataContract.currencyId(currency.CurrencyCode);
            dataContract.currencyName(currency.Txt);

            list.addEnd(dataContract);
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectGrants</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get all project grants.
    /// </summary>
    /// <param name = "company">Company filter</param>
    /// <returns>List of project grants filtered by company</returns>
    [AifCollectionTypeAttribute('return', Types::Class, classStr(ProjectWbsGrantDataContract))]
    public List getProjectGrants(str company)
    {
        List list = new List(Types::Class);
        ProjectWbsGrantDataContract dataContract;
        ProjGrant projGrant;
        CustTable custTable;
        
        changecompany(company)
        {
            while select GrantId, GrantName, GrantStatus, AwardedAmount from projGrant
                where projGrant.GrantStatus == ProjGrantStatus::Awarded
            {
                dataContract = new ProjectWbsGrantDataContract();
                dataContract.grantid(projGrant.GrantId);
                dataContract.grantname(projGrant.GrantName);
                dataContract.grantStatus(enum2Symbol(enumNum(ProjGrantStatus), projGrant.GrantStatus));
                dataContract.awardedAmount(projGrant.AwardedAmount);
                dataContract.accountNum(projGrant.CustAccount);

                if (projGrant.CustAccount)
                {
                    select firstonly Currency from custTable where custTable.AccountNum == projGrant.CustAccount;

                    dataContract.currency(custTable.Currency);
                }
                else
                {
                    dataContract.currency(Ledger::accountingCurrency(CompanyInfo::current()));
                }

                list.addEnd(dataContract);
            }
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCaption</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the details for setting the MS Project Caption.
    /// </summary>
    /// <param name="_fileSyncLinkType">
    ///     The sync link type of the MS Project file.
    /// </param>
    /// <param name="_recId">
    ///     The Project/Quotation/Template recId of the entity linked to the current MS Project file.
    /// </param>
    /// <returns>
    ///    The caption to be displayed on the MS Project file.
    /// </returns>
    public str getCaption(MSPFileSyncLinkType fileSyncLinkType,RecId recordId)
    {
        ProjTable               projTable;
        SalesQuotationTable     salesQuotationTable;
        Hierarchy               hierarchy;
        str id;
        str name;

        if (fileSyncLinkType == MSPFileSyncLinkType::Project)
        {
            select firstonly ProjId, Name from projTable where projTable.RecId == recordId;
            id = projTable.ProjId;
            name = projTable.Name;
        }
        else if (fileSyncLinkType == MSPFileSyncLinkType::Quotation)
        {
            select firstonly QuotationId, QuotationName from salesQuotationTable where salesQuotationTable.RecId == recordId;
            id = salesQuotationTable.QuotationId;
            name = salesQuotationTable.QuotationName;

        }
        else if (fileSyncLinkType == MSPFileSyncLinkType::Template)
        {
            select firstonly HierarchyId, Name from hierarchy where hierarchy.RecId == recordId;
            id = hierarchy.HierarchyId;
            name = hierarchy.Name;
        }

        return strFmt("@SYS76785", id, name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Service method that creates a Project record
    /// </summary>
    /// <param name = "company">Company where the Contract will be stored</param>
    /// <param name = "projectDataContract">ProjectDataContract that contains information for the new Project</param>
    /// <returns>If creation is succressful, will return the recourd Id of the new Project. Otherwise will return 0</returns>
    public ProjectWbsProjectDataContract createProject(str company, ProjectWbsProjectDataContract projectDataContract)
    {
        ProjTable projTable;
        NumberSeq numberSeq;

        ttsbegin;

        changecompany(company)
        {
            if(!projectDataContract.projectId())
            {
                numberSeq = NumberSeq::newGetNum(ProjParameters::numRefProjId(), true);

                if (numberSeq)
                {
                    projTable.ProjId = numberSeq.num();
                }
            }
            else
            {
                projTable.ProjId = projectDataContract.projectId();
            }

            projTable.Name = projectDataContract.projectName();
            projTable.ProjGroupId = projectDataContract.projectGroupId();
            projTable.ProjInvoiceProjId = projectDataContract.projectContractId();
            projTable.Type = symbol2Enum(enumNum(ProjType), projectDataContract.projectType());
            projTable.PSASchedCalendarId = projectDataContract.calendarId();
            
            projTable.initFromProjGroup(ProjGroup::find(projTable.ProjGroupId));
            if (projTable.ProjInvoiceProjId)
            {
                ProjInvoiceTable projInvoiceTable = ProjInvoiceTable::find(projTable.ProjInvoiceProjId);
                projTable.CustAccount = projInvoiceTable.fundingSourceCustomerID();

                projTable.initFromCustTable(CustTable::find(projTable.CustAccount, false));
                projTable.initFromInvoice(projInvoiceTable);
            }

            projTable.insert();

            projectDataContract.projectId(projTable.ProjId);
            projectDataContract.recid(projTable.RecId);
            projectDataContract.hierarchyId(ProjPlanVersionDetail::findProjectDraftVersion(ProjTable.ProjId).HierarchyId);
        }

        ttscommit;

        return projectDataContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLockBoxFile</Name>
				<Source><![CDATA[
    public str getLockBoxFile(str companyName, MSPFileSyncLinkType fileSyncLinkType, RecId linkRecId, str hierarchyId)
    {
        ProjTable projTable;

        select firstonly ProjId,RecId from projTable where projTable.RecId == linkRecId;

        str fileName = strFmt("%1_%2_%3_%4_%5.mpp", curExt(), enum2Str(MSPFileSyncLinkType::Project), projTable.RecId, projTable.ProjId, hierarchyId);
        return filename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDraftResouceAssignments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get all resource draft assignments for a given hierarchy
    /// </summary>
    /// <param name = "companyName">Company name where the hiearchy is</param>
    /// <param name = "hierarchyId">Hierachy Id of the given document</param>
    /// <returns>List of <c>ProjectWbsDraftAssignmentDataContract</c></returns>
    [AifCollectionTypeAttribute('return', Types::Class, classStr(ProjectWbsDraftAssignmentDataContract))]
    public List getDraftResouceAssignments(str companyName, str hierarchyId)
    {
        List result;

        changecompany(companyName)
        {
            result = this.getDraftAssignments(companyName, hierarchyId);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDraftAssignments</Name>
				<Source><![CDATA[
    private List getDraftAssignments(str companyName , str projId)
    {
        List result = new List(Types::Class);
        ProjectWbsDraftAssignmentDataContract dataContract;
        ProjPlanVersionAssignment projPlanVersionAssignment;
        PSAProjSchedRole psaProjSchedRole;
        ProjPlanVersion projPlanVersion;
        ResourceCategoryView role;

        while select projPlanVersionAssignment
            join projPlanVersion where projPlanVersion.RecId == projPlanVersionAssignment.ProjPlanVersion
            join psaProjSchedRole where psaProjSchedRole.RecId == projPlanVersionAssignment.ActivityResource &&
                                        psaProjSchedRole.ProjId == projId
            outer join CategoryId from role where role.RecId == psaProjSchedRole.ResourceCategory
        {
            dataContract = new ProjectWbsDraftAssignmentDataContract();
            dataContract.hierarchyId(projPlanVersion.HierarchyId);
            dataContract.taskId(projPlanVersion.HierarchyTaskId);
            dataContract.resourceName(psaProjSchedRole.Name);
            dataContract.resourceRecId(psaProjSchedRole.Resource);
            dataContract.activityResource(projPlanVersionAssignment.RecId);

            if (role.CategoryId)
            {
                dataContract.roleId(role.CategoryId);
            }

            result.addEnd(dataContract);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of all Project resources for a give company
    /// </summary>
    /// <param name = "company">Company Id</param>
    /// <returns>List of <c>ProjectWbsProjectResourceDataContract</c> </returns>
    [AifCollectionTypeAttribute('return', Types::Class, classStr(ProjectWbsProjectResourceDataContract))]
    public List getResources(str company , str projectId)
    {
        List list = new List(Types::Class);

        ProjectWbsProjectResourceDataContract dataContract;
        ResourceView resourceView;
        ResourceCategoryView resourceCategoryView;

        // Get default Role
        select firstonly resourceCategoryView where resourceCategoryView.DefaultResourceCategory == FalseTrue::True;
        
        changecompany(company)
        {
            while select resourceView order by Name where resourceView.ResourceCompanyId == company
            {
                dataContract = new ProjectWbsProjectResourceDataContract();
                dataContract.resourceCompany(company);
                dataContract.resourceId(resourceView.ResourceId);
                dataContract.resourceName(resourceView.Name);
                dataContract.recordId(resourceView.RecId);
                dataContract.roleId(resourceCategoryView.CategoryId);

                List.addEnd(dataContract);
            }
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectTeamResources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of all resources for a given Project
    /// </summary>
    /// <param name = "company">Company where the Project belongs to.</param>
    /// <param name = "projectId">Project Id to get all the resources from.</param>
    /// <returns>List of <c>ProjectWbsTeamResourceDataContract</c></returns>
    [AifCollectionTypeAttribute('return', Types::Class, classStr(ProjectWbsTeamResourceDataContract))]
    public List getProjectTeamResources(str company, str projectId)
    {
        List list = new List(Types::Class);
        PSAProjSchedRole projSchedRole;
        ResourceView resourceView;
        ResourceCategoryView role;

        ProjectWbsTeamResourceDataContract dataContract;

        changecompany(company)
        {
            while select projSchedRole where projSchedRole.ProjId == projectId
                outer join role where role.RecId == projSchedRole.ResourceCategory
            {
                dataContract = new ProjectWbsTeamResourceDataContract();
                dataContract.resourceName(projSchedRole.Name);
                dataContract.recId(projSchedRole.RecId);
                dataContract.roleId(role.CategoryId);

                if (projSchedRole.Resource)
                {
                    select firstonly resourceView where resourceView.RecId == projSchedRole.Resource;

                    if (resourceView.RecId)
                    {
                        dataContract.resourceRecId(projSchedRole.Resource);
                        dataContract.company(resourceView.ResourceCompanyId);
                        dataContract.resourceId(resourceView.ResourceId);
                    }
                }

                list.addEnd(dataContract);
            }
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeWbsLock</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the lock indicator for an existing Project Wbs
    /// </summary>
    /// <param name = "company">Company of the project/hierarchy</param>
    /// <param name = "hierarchyId">The given hierarchyId</param>
    /// <returns>true if lock removal is successful, otherwise false.</returns>
    public boolean removeWbsLock(str company, str hierarchyId)
    {
        ProjectWbsLockBox projWbsLockBox;

        select firstonly crosscompany:[company] projWbsLockBox where projWbsLockBox.HierarchyId == hierarchyId;

        if (projWbsLockBox.RecId)
        {
            changecompany(company)
            {
                ttsbegin;

                projWbsLockBox.selectForUpdate(true);
                projWbsLockBox.CurrentActiveUser = "";
                projWbsLockBox.IsLocked = NoYes::No;
                projWbsLockBox.update();

                ttscommit;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasChildTasks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the given hierarchy has child tasks.
    /// </summary>
    /// <param name = "company">Company of hierarchy</param>
    /// <param name = "hierarchyId">HierarchyId</param>
    /// <returns>true if hierarchy has child tasks, otherwise false.</returns>
    public boolean hasChildTasks(str company, str hierarchyId)
    {
        ProjPlanVersion projPlanVersion;
        boolean retval = false;

        changecompany(company)
        {
            select firstonly RecId from projPlanVersion where projPlanVersion.HierarchyId == hierarchyId &&
                                                              projPlanVersion.HierarchyTaskId != 0;

            retval = projPlanVersion.RecId;
        }

        return retval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteProjectWbsTasks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all the child tasks of a give hierarchy
    /// </summary>
    /// <param name = "company">Company of the hierarchy</param>
    /// <param name = "hierarchyId">Hierarchy Id</param>
    /// <returns>true if deleted successfully.</returns>
    public boolean deleteProjectWbsTasks(str company, str hierarchyId)
    {
        ProjPlanVersion projPlanVersion;

        changecompany(company)
        {
            delete_from projPlanVersion where projPlanVersion.HierarchyId == hierarchyId &&
                                              projPlanVersion.HierarchyTaskId != 1;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUpdateProjectWbs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates Project Wbs hierarchy
    /// </summary>
    /// <param name = "company">Company of the hierarchy</param>
    /// <param name = "updateAction">Create if for a new Project, Update for existing hierarchy</param>
    /// <param name = "wbsTasks">List of tasks</param>
    /// <returns>true if there are no errors encountered.</returns>
    [AifCollectionTypeAttribute('wbsTasks', Types::Class, classStr(ProjectWbsTaskDataContract))]
    public boolean createUpdateProjectWbs(str company, ProjectWbsUpdateAction updateAction, List wbsTasks)
    {
        ttsbegin;

        try
        {
            changecompany(company)
            {
                if(updateAction == ProjectWbsUpdateAction::Create)
                {
                    this.createProjectWbs(wbsTasks);
                }
                else
                {
                    this.updateProjectWbs(wbsTasks);
                }
            }
        }
        catch
        {
            throw Exception::Error;
        }

        ttscommit;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjectWbs</Name>
				<Source><![CDATA[
    private void updateProjectWbs(List wbsTasks, boolean isCheckIn = false)
    {
        ProjectWbsTaskDataContract wbsTask;
        ProjPlanVersion projPlanVersion;
        ListEnumerator listEnum = wbsTasks.getEnumerator();
        HierarchyIdBase hierarchyId;

        while(listEnum.moveNext())
        {
            wbsTask = listEnum.current();

            select firstonly projPlanVersion
                where projPlanVersion.HierarchyId == wbsTask.hierachyId() &&
                        projPlanVersion.HierarchyTaskId == str2Int64(wbsTask.taskId());

            hierarchyId = wbsTask.hierachyId();

            if (projPlanVersion.RecId)
            {
                projPlanVersion.selectForUpdate(true);
                projPlanVersion.MSPID = str2guid(wbsTask.mspid());
                projPlanVersion.TaskDuration = wbsTask.taskDuration();
                projPlanVersion.TaskStartDate = wbsTask.taskStart();
                projPlanVersion.TaskFinishDate= wbsTask.taskEnd();
                projPlanVersion.UserMemo = wbsTask.notes();
                projPlanVersion.TaskPriority = this.getTaskPriority(wbsTask.priority());

                projPlanVersion.update();
            }
        }

        if (isCheckIn)
        {
            // remove lock on Project Wbs
            ProjectWbsLockBox projWbsLockBox;
            delete_from projWbsLockBox where projWbsLockBox.HierarchyId == hierarchyId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaskPriority</Name>
				<Source><![CDATA[
    private smmActivityPriority getTaskPriority(int _priority)
    {
        smmActivityPriority ret;

        if (_priority <= 100)
        {
            ret = smmActivityPriority::Low;
        }
        else if (_priority > 100  && _priority <= 500)
        {
            ret = smmActivityPriority::Normal;
        }
        else if (_priority > 500)
        {
            ret = smmActivityPriority::High;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasResourceAssignedToTask</Name>
				<Source><![CDATA[
    private static boolean hasResourceAssignedToTask(ProjPlanVersionRecId _projPlanVersion)
    {
        ProjPlanVersion projPlanVersion;
        HierarchyTreeTable hierarchyTreeTable;
        smmActivities smmActivity;
        ResAssignment resAssignment;

        select firstonly RecId from resAssignment
        exists join smmActivity
            where smmActivity.RecId == resAssignment.Activity
        exists join hierarchyTreeTable
            where hierarchyTreeTable.RefRecId == smmActivity.RecId
        exists join projPlanVersion
            where projPlanVersion.HierarchyTreeTableRefRecId == hierarchyTreeTable.RecId
                && projPlanVersion.RecId == _projPlanVersion;

        return resAssignment.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjectWbs</Name>
				<Source><![CDATA[
    private void createProjectWbs(List wbsTasks, boolean isCheckIn = false)
    {
        ProjectWbsTaskDataContract wbsTask;
        ProjPlanVersion projPlanVersion;
        ListEnumerator listEnum = wbsTasks.getEnumerator();
        HierarchyIdBase hierarchyId;
        ProjPlanVersionDetail projPlanVersionDetail;
        ProjTable projTable;
        PSAProjSchedRole psaProjSchedRole;
        ProjDependency projDependency;
        ResourceCategoryView resourceCategoryView;
        real workingHours;

        // Get default Role
        select firstonly RecId from resourceCategoryView where resourceCategoryView.DefaultResourceCategory == FalseTrue::True;

        // get first entry in the WBSTasks List. This should be the root
        listEnum.moveNext();
        wbsTask = listEnum.current();

        Debug::assert(wbsTask.level() == 0);

        if (wbsTask.level() != 0)
        {
            return;
        }

        hierarchyId = wbsTask.hierachyId();

        projPlanVersionDetail = ProjPlanVersionDetail::findByHierarchyId(hierarchyId);

        // Do not update if WBS is Published
        if (projPlanVersionDetail.VersionType != ProjPlanVersionType::Draft)
        {
            return;
        }

        select firstonly PSASchedCalendarId,ProjId from projTable where projTable.ProjId == projPlanVersionDetail.ProjId;
        
        workingHours = WorkCalendarTable::find(projTable.PSASchedCalendarId).StandardWorkDayHours;

        if (!workingHours)
        {
            workingHours = 8;
        }

        select firstonly projPlanVersion
                    where projPlanVersion.HierarchyId == wbsTask.hierachyId() &&
                            projPlanVersion.HierarchyTaskId == str2Int64(wbsTask.taskId());

        if (projPlanVersion.RecId)
        {
            projPlanVersion.selectForUpdate(true);
            projPlanVersion.MSPID = str2Guid(wbsTask.mspid());
            projPlanVersion.TaskStartDate = wbsTask.taskStart();
            projPlanVersion.TaskFinishDate= wbsTask.taskEnd();
            projPlanVersion.TaskEffort = wbsTask.effort();
            projPlanVersion.TaskEffortAtComplete = projPlanVersion.TaskEffort;
            projPlanVersion.TaskEffortToComplete = projPlanVersion.TaskEffort;

            projPlanVersion.update();
        }

        ProjPlanVersionSyncCopy::syncAndRemoveTasks(wbsTask.hierachyId());

        while(listEnum.moveNext())
        {
            wbsTask = listEnum.current();

            // Delete Draft assignments here. If the task exists or new, they will be recreated later with the new RECID
            ProjPlanVersionAssignment::deleteByProjPlanVersion(wbsTask.recId());

            delete_from projDependency where projDependency.SuccessorHierarchyTaskId == str2Int64(wbsTask.taskId()) &&
                        projDependency.ProjPlanHierarchyId == hierarchyId;

            // Task has been deleted
            if (wbsTask.action() == 4)
            {
                this.deleteDependencyLinks(hierarchyId, wbsTask.taskId());

                PSAActivityEstimates::deleteEstimatesForTask(hierarchyId, str2Int64(wbsTask.taskId()));

                continue;
            }

            ProjPlanVersionSyncCopy projPlanVersionCopy;
            select firstonly HierarchyTreeTableRefRecId from projPlanVersionCopy
                where projPlanVersionCopy.HierarchyId == hierarchyId
                    && projPlanVersionCopy.HierarchyTaskId == str2Int64(wbsTask.taskId());

            projPlanVersion.clear();
            projPlanVersion.HierarchyId = hierarchyId;
            projPlanVersion.HierarchyTreeTableRefRecId = projPlanVersionCopy.HierarchyTreeTableRefRecId;
            projPlanVersion.HierarchyTaskId = str2Int64(wbsTask.taskId());
            projPlanVersion.ParentHierarchyTaskId = str2Int64(wbsTask.parentTaskId());
            projPlanVersion.TaskSiblingNumber = ProjPlanVersion::getNextSiblingNumber(projPlanVersion.HierarchyId,projPlanVersion.ParentHierarchyTaskId);
            projPlanVersion.TaskName = wbsTask.name();
            projPlanVersion.MSPID = str2Guid(wbsTask.mspid());
            projPlanVersion.TaskCategory = wbsTask.taskCategory();
            projPlanVersion.TaskStartDate = wbsTask.taskStart();
            projPlanVersion.TaskFinishDate= wbsTask.taskEnd();
            projPlanVersion.NumberOfResources = wbsTask.numofresources() == 0 ? 1 : wbsTask.numofresources();
            projPlanVersion.UserMemo = wbsTask.notes();
            projPlanVersion.TaskPriority = this.getTaskPriority(wbsTask.priority());

            if (wbsTask.resourceCategory())
            {
                projPlanVersion.ResourceCategory  = PSASchedRole::findById(wbsTask.resourceCategory()).RecId;
            }
            else
            {
                projPlanVersion.ResourceCategory  = 0;
            }

            projPlanVersion.TaskDuration = any2Real(WorkCalendarCalculator::calcDuration(projPlanVersion.TaskStartDate, projPlanVersion.TaskFinishDate, projTable.PSASchedCalendarId));

            projPlanVersion.TaskEffort = wbsTask.effort();

            if (projPlanVersion.TaskEffort == 0)
            {
                projPlanVersion.TaskEffort = projPlanVersion.TaskDuration * workingHours;
            }

            projPlanVersion.TaskEffortToComplete = projPlanVersion.TaskEffort;
            projPlanVersion.TaskEffortAtComplete = projPlanVersion.TaskEffort;
                
            projPlanVersion.insert();

            ProjEstimate::syncEstimateLinesFromTask(hierarchyId, str2Int64(wbsTask.taskId()) , ProjWBSType::Project);

            str assignedResourceRecId;
            str assignedResourceRecIds;

            if (wbsTask.draftAssignments() != null && wbsTask.draftAssignments().elements() > 0)
            {
                List assignmentList = wbsTask.draftAssignments();

                ListEnumerator draftEnum = assignmentList.getEnumerator();
                
                while(draftEnum.moveNext())
                {
                    ProjectWbsDraftAssignmentDataContract draftAssignment = draftEnum.current();

                    if (draftAssignment.activityResource())
                    {
                        assignedResourceRecId = int642Str(draftAssignment.activityResource());
                    }
                    else
                    {
                        select firstonly psaProjSchedRole where psaProjSchedRole.Resource == draftAssignment.resourceRecId() &&
                                                                psaProjSchedRole.ProjId == ProjTable.ProjId;

                        if (psaProjSchedRole.RecId == 0)
                        {
                            psaProjSchedRole.clear();
                            psaProjSchedRole.ProjId = projTable.ProjId;
                            psaProjSchedRole.Resource = draftAssignment.resourceRecId();
                            psaProjSchedRole.Name = draftAssignment.resourceName();
                            psaProjSchedRole.PSARoleStartDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                            psaProjSchedRole.PSARoleEndDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                            psaProjSchedRole.ResourceCategory = resourceCategoryView.RecId;
                            psaProjSchedRole.insert();
                        }

                        if (psaProjSchedRole.RecId)
                        {
                            assignedResourceRecId = int642Str(psaProjSchedRole.RecId);
                        }
                    }
                    
                    if (!assignedResourceRecIds)
                    {
                        assignedResourceRecIds = assignedResourceRecId;
                    }
                    else
                    {
                        assignedResourceRecIds = strFmt("%1,%2", assignedResourceRecIds, assignedResourceRecId);
                    }
                }
            }

            if (assignedResourceRecIds)
            {
                ProjPlanVersionAssignment::deleteByProjPlanVersion(projPlanVersion.RecId);

                if (ProjectWbsService::hasResourceAssignedToTask(projPlanVersion.RecId))
                {
                    // insert cancellation record
                    ProjPlanVersionAssignment projPlanVersionAssignment;
                    projPlanVersionAssignment.ProjPlanVersion = projPlanVersion.RecId;
                    projPlanVersionAssignment.ActivityResource = 0;
                    projPlanVersionAssignment.ReservationType = ProjPlanVersionAssignmentType::Cancel;
                    projPlanVersionAssignment.insert();
                }

                ProjTask::assignResourcesToDraftTask(projPlanVersion.RecId, assignedResourceRecIds);
            }

            if (wbsTask.projDependency() != null && wbsTask.projDependency().elements() > 0)
            {
                List projDependencies = wbsTask.projDependency();

                ListEnumerator depEnum = projDependencies.getEnumerator();

                List predecessors = new List(Types::Int64);
                
                while(depEnum.moveNext())
                {
                    ProjectWbsDependencyDataContract wbsDependency = depEnum.current();

                    predecessors.addEnd(str2Int64(wbsDependency.predecessor()));

                }

                if (predecessors.elements() > 0)
                {
                    ProjTask::updatePredecessors(wbsTask.hierachyId(), str2Int64(wbsTask.taskId()), predecessors);
                }
            }
        }

        if (isCheckIn)
        {
            // remove lock on Project Wbs
            ProjectWbsLockBox::undoCheckOutProjectWbs(projPlanVersionDetail.ProjId);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteDependencyLinks</Name>
				<Source><![CDATA[
    private void deleteDependencyLinks(HierarchyIdBase _hierarchyId, str _taskId)
    {
        ProjHierarchyTaskId taskId = str2int64(_taskId);

        ProjDependency dependency;
        delete_from dependency
            where dependency.ProjPlanHierarchyId == _hierarchyId
                 && (dependency.PredecessorHierarchyTaskId == taskId
                    || dependency.SuccessorHierarchyTaskId == taskId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrganization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get organization funding source
    /// </summary>
    /// <param name = "company">Company the organization list belongs to</param>
    /// <returns>List of <c>ProjectWbsOrganizationDataContract</c></returns>
    [AifCollectionTypeAttribute('return', Types::Class, classStr(ProjectWbsOrganizationDataContract))]
    public List getOrganization(DataAreaId company)
    {
        List result = new List(Types::Class);
        ProjectWbsOrganizationDataContract dataContract;
        OMOperatingUnit omOu;

        changecompany(company)
        {
            while select RecId,Name,OMOperatingUnitNumber from omOu where omOu.OMOperatingUnitType == OMOperatingUnitType::OMBusinessUnit
            {
                dataContract = new ProjectWbsOrganizationDataContract();
                dataContract.name(omOu.Name);
                dataContract.recordId(omOu.RecId);
                dataContract.omunitNumber(omOu.OMOperatingUnitNumber);
                dataContract.currency(Ledger::accountingCurrency(CompanyInfo::current()));

                result.addEnd(dataContract);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Service method that creates a Project contract record
    /// </summary>
    /// <param name = "company">Company where the Contract will be stored</param>
    /// <param name = "projectContractDataContract">ProjectWbsProjectContractDataContract that contains information for the new Contract</param>
    /// <returns>Contract Id of the new Project contract. Otherwise will return empty string.</returns>
    public str createContract(str company, ProjectWbsProjectContractDataContract projectContractDataContract)
    {
        ProjInvoiceTable contractTable;
        ProjFundingSource projFundingSource;
        NumberSeq numberSeq;

        changecompany(company)
        {
            if(!projectContractDataContract.projectContractId())
            {
                numberSeq = NumberSeq::newGetNum(ProjParameters::numRefProjInvoiceProjId(), true);

                if (numberSeq)
                {
                    contractTable.ProjInvoiceProjId = numberSeq.num();
                }
            }
            else
            {
                contractTable.ProjInvoiceProjId = projectContractDataContract.projectContractId();
            }

            contractTable.Description = projectContractDataContract.description();
            contractTable.CurrencyId = projectContractDataContract.salescurrency();
            
            contractTable.insert();

            ProjectWbsFundingSourceDataContract fundingSourceDataContract = projectContractDataContract.projFundingSource();

            projFundingSource.ContractId = contractTable.ProjInvoiceProjId;
            projFundingSource.FundingType = fundingSourceDataContract.fundingtype();

            if (ProjFundingSource.FundingType == ProjFundingType::Customer)
            {
                CustTable custTable = CustTable::find(fundingSourceDataContract.fundingsourceid());

                if (custTable)
                {
                    int64 recordId = ProjFundingSource::createFundingSource(contractTable.ProjInvoiceProjId, custTable.AccountNum, NoYes::Yes);

                    if (recordId != 0)
                    {
                        TradeBLWIJournalPurposeCodes::createRecord(TradeBLWICustVend::Customer, contractTable.RecId, custTable.AccountNum, TradeBLWITypeOfForm::InvoiceProject);
                    }
                }
            }
            else
            {
                projFundingSource.editProjFunder(true, fundingSourceDataContract.fundingsourceid());

                if (projFundingSource.FundingSourceId)
                {
                    projFundingSource.insert();

                    if (projFundingSource.FundingType != ProjFundingType::OnHoldFundingSource)
                    {
                        ProjFundingRule::createDefaultFundingRule(contractTable.ProjInvoiceProjId, projFundingSource.RecId);
                    }
                }
            }

        }

        return contractTable.ProjInvoiceProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isHierarchyLockedInAOS</Name>
				<Source><![CDATA[
    public boolean isHierarchyLockedInAOS(str company, str hierarchyId)
    {
        ProjectWbsLockBox projectWbsLockBox;

        changecompany(company)
        {
            select firstonly RecId from projectWbsLockBox where projectWbsLockBox.HierarchyId == hierarchyId &&
                                                                projectWbsLockBox.IsLocked == NoYes::Yes &&
                                                                projectWbsLockBox.LockLocation == ProjectWbsLockLocation::AOS;
        }

        return projectWbsLockBox.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isHierarchyLocked</Name>
				<Source><![CDATA[
    public ProjectWbsLockCheck isHierarchyLocked(str company, str hierarchyId)
    {
        ProjectWbsLockBox projectWbsLockBox;
        ProjectWbsLockCheck lockCheck = new ProjectWbsLockCheck();
        ProjPlanVersionDetail projPlanVersionDetail;

        select firstonly crosscompany:[company] projPlanVersionDetail
                where projPlanVersionDetail.HierarchyId == hierarchyId &&
                      projPlanVersionDetail.VersionType == projplanVersionType::Draft;

        if (projPlanVersionDetail.RecId == 0)
        {
            lockCheck.isPublished(true);
            lockCheck.isLocked(true);
        }
        else
        {
            select firstonly crosscompany:[company] projectWbsLockBox where projectWbsLockBox.HierarchyId == hierarchyId;

            if (projectWbsLockBox.RecId)
            {
                lockCheck.isLocked(projectWbsLockBox.IsLocked == NoYes::Yes ? true : false);
                lockCheck.lockLocation(projectWbsLockBox.LockLocation);
                lockCheck.userName(projectWbsLockBox.CurrentActiveUser);
            }
            else
            {
                lockCheck.isLocked(false);
            }
        }


        return lockCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCheckedOut</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks a Project Wbs is checked-out by a user.
    /// </summary>
    /// <param name = "company">Company context</param>
    /// <param name = "projectId">Project Id of the related Wbs to be check</param>
    /// <returns>ProjectWbsLockCheck data contract</returns>
    public ProjectWbsLockCheck isCheckedOut(str company, str projectId)
    {
        ProjectWbsLockBox projectWbsLockBox;
        ProjectWbsLockCheck lockCheck = new ProjectWbsLockCheck();
        ProjPlanVersionDetail projPlanVersionDetail;

        changecompany(company)
        {
            projPlanVersionDetail = ProjPlanVersionDetail::findProjectDraftVersion(projectId);

            if (projPlanVersionDetail.RecId == 0)
            {
                lockCheck.isPublished(true);
                lockCheck.isLocked(true);
            }
            else
            {
                select firstonly projectWbsLockBox where projectWbsLockBox.HierarchyId == projPlanVersionDetail.HierarchyId;

                if (projectWbsLockBox.RecId)
                {
                    lockCheck.isLocked(projectWbsLockBox.IsLocked == NoYes::Yes ? true : false);
                    lockCheck.lockLocation(projectWbsLockBox.LockLocation);
                    lockCheck.userName(projectWbsLockBox.CurrentActiveUser);
                }
                else
                {
                    lockCheck.isLocked(false);
                }
            }
        }


        return lockCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectCalendarWorkingHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves working hours of the Project calendar.
    /// </summary>
    /// <param name = "company">Company context</param>
    /// <param name = "projectId">Project Id</param>
    /// <returns>real, number of working hours</returns>
    public real getProjectCalendarWorkingHours(str company, str projectId)
    {
        ProjTable projTable;
        real retval = 8;  // 8 is the default working hours if nothing is set

        changecompany(company)
        {

            select firstonly PSASchedCalendarId from projTable where projTable.ProjId == projectId;

            if (projTable.PSASchedCalendarId)
            {
                retval = WorkCalendarTable::find(projTable.PSASchedCalendarId).StandardWorkDayHours;
            }
        }

        return retval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectDraftHierachy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the Hierarchy Id of the Project's draft version of Wbs.
    /// </summary>
    /// <param name = "company">Company context</param>
    /// <param name = "projectId">Project Id</param>
    /// <returns>string, Hierarchy Id of Wbs' draft version</returns>
    public HierarchyIdBase getProjectDraftHierachy(str company, str projectId)
    {
        ProjPlanVersionDetail projPlanVersionDetail;

        changecompany(company)
        {
            projPlanVersionDetail = ProjPlanVersionDetail::findProjectDraftVersion(projectId);
        }

        return projPlanVersionDetail.HierarchyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOutProjectWbs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exclusive lock of the Project Wbs for the current user
    /// </summary>
    /// <param name = "company">Company context</param>
    /// <param name = "projectId">Project Id of the Wbs</param>
    /// <returns>true if checkout of Wbs is successful.</returns>
    public boolean checkOutProjectWbs(str company, str projectId)
    {
        ttsbegin;

        try
        {
            changecompany(company)
            {
                ProjectWbsLockBox::checkOutProjectWbs(projectId);
            }
        }
        catch
        {
            throw Exception::Error;
        }

        ttscommit;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>undoCheckOutProjectWbs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Undo checkout of Project Wbs. This will remove the lock on a give Project Wbs so it can be modified in either the browser or Project Client
    /// </summary>
    /// <param name = "company">Company context</param>
    /// <param name = "projectId">Project Id of the Wbs</param>
    /// <returns>true when successful</returns>
    public boolean undoCheckOutProjectWbs(str company, str projectId)
    {
        ttsbegin;

        try
        {
            changecompany(company)
            {
                ProjectWbsLockBox::undoCheckOutProjectWbs(projectId);
            }
        }
        catch
        {
            throw Exception::Error;
        }

        ttscommit;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInProjectWbs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check-in changes to Project Wbs hierarchy
    /// </summary>
    /// <param name = "company">Company of the hierarchy</param>
    /// <param name = "updateAction">Create if for a new Project, Update for existing hierarchy</param>
    /// <param name = "wbsTasks">List of tasks</param>
    /// <returns>true if there are no errors encountered.</returns>
    [AifCollectionTypeAttribute('wbsTasks', Types::Class, classStr(ProjectWbsTaskDataContract))]
    public boolean checkInProjectWbs(str company, ProjectWbsUpdateAction updateAction, List wbsTasks)
    {
        ttsbegin;

        try
        {
            changecompany(company)
            {
                if(updateAction == ProjectWbsUpdateAction::Create)
                {
                    this.createProjectWbs(wbsTasks, true);
                }
                else
                {
                    this.updateProjectWbs(wbsTasks, true);
                }
            }
        }
        catch
        {
            throw Exception::Error;
        }

        ttscommit;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWbsCheckOutInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the checkout information of the Wbs of a given Project.
    /// </summary>
    /// <param name = "company">Company context</param>
    /// <param name = "projectId">Project Id</param>
    /// <returns>ProjectWbsLockCheck object that contains information if the Wbs is checked-out and by whom.</returns>
    public ProjectWbsLockCheck getWbsCheckOutInfo(str company, str projectId)
    {
        ProjectWbsLockCheck projectWbsCheckOutInformation = new ProjectWbsLockCheck();

        changecompany(company)
        {
            projectWbsCheckOutInformation = ProjectWbsLockBox::wbsCheckOutInfo(projectId);
        }

        return projectWbsCheckOutInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomProperties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all the information needed for the Microsoft Project Client custom properties integrated to a Dynamics 365 Project Wbs.
    /// </summary>
    /// <param name = "company">Company context</param>
    /// <param name = "projectId">Project Id of the related Wbs</param>
    /// <returns>ProjectWbsClientCustomPropertiesDataContract data contract</returns>
    public ProjectWbsClientCustomPropertiesDataContract getCustomProperties(str company, str projectId)
    {
        ProjectWbsClientCustomPropertiesDataContract dataContact = new ProjectWbsClientCustomPropertiesDataContract();
        ProjTable projTable;
        ProjPlanVersionDetail projPlanVersionDetail;

        changecompany(company)
        {
            select firstOnly RecId from projTable where projTable.ProjId == projectId;

            projPlanVersionDetail = ProjPlanVersionDetail::findProjectDraftVersion(projectId);

            dataContact.projectId(projectId);
            dataContact.companyId(company);
            dataContact.projectRecId(projTable.RecId);
            dataContact.hierarchyId(projPlanVersionDetail.HierarchyId);
        }

        return dataContact;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextTaskId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the next hierarchy task Id for a given Wbs
    /// </summary>
    /// <param name = "company">Company context</param>
    /// <param name = "hierarchyId">Hierarchy Id context</param>
    /// <returns>Task Id for a new task in the hierarchy.</returns>
    public ProjHierarchyTaskId getNextTaskId(str company, str hierarchyId)
    {
        ProjHierarchyTaskId newTaskId = 0;

        changecompany(company)
        {
            newTaskId = ProjPlanVersion::getNextTaskId(hierarchyId,  ProjWBSType::Project);
        }

        return newTaskId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>