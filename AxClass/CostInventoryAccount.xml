<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostInventoryAccount</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostInventoryAccount</c> class implements an inventory account.
/// </summary>
public class CostInventoryAccount extends CostAccountBase
{
    DataAreaId      dataAreaId;
    ItemId          itemId;
    InventDimId     inventDimId;
    RecId           inventTransRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>key</Name>
				<Source><![CDATA[
    public str key()
    {
        return CostInventoryAccount::createKey(dataAreaId, itemId, inventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId parmDataAreaId(DataAreaId _dataAreaId = dataAreaId)
    {
        dataAreaId = _dataAreaId;

        return dataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
    public InventDimId parmInventDimId(InventDimId _inventDimId = inventDimId)
    {
        inventDimId = _inventDimId;

        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransRecId</Name>
				<Source><![CDATA[
    public RecId parmInventTransRecId(RecId _inventTransRecId = inventTransRecId)
    {
        inventTransRecId = _inventTransRecId;

        return inventTransRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static CostInventoryAccount construct()
    {
        return new CostInventoryAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a key for an inventory account.
    /// </summary>
    /// <param name="_dataAreaId">
    /// The accounts <c>DataAreaId</c>.
    /// </param>
    /// <param name="_itemId">
    /// The accounts <c>ItemId</c>.
    /// </param>
    /// <param name="_inventDimId">
    /// The accounts <c>InventDimId</c>.
    /// </param>
    /// <returns>
    /// A key for an inventory account.
    /// </returns>
    private static str createKey(
        DataAreaId      _dataAreaId,
        ItemId          _itemId,
        InventDimId     _inventDimId)
    {
        return _dataAreaId + '#' + _itemId + '#' + _inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>CostInventoryAccount</c> class for an <c>InventTrans</c>.
    /// </summary>
    /// <param name="_inventTrans">
    /// The <c>InventTrans</c>.
    /// </param>
    /// <returns>
    /// An instance of the <c>CostInventoryAccount</c> class.
    /// </returns>
    public static CostInventoryAccount newInventTrans(InventTrans _inventTrans)
    {
        CostInventoryAccount        account;

        str key = CostInventoryAccount::createKey(_inventTrans.DataAreaId, _inventTrans.ItemId, _inventTrans.InventDimId);

        account = SysTransactionScopeCache::get(classStr(CostInventoryAccount), key, account);

        if (!account)
        {
            account = CostInventoryAccount::construct();
            account.parmDataAreaId(_inventTrans.DataAreaId);
            account.parmItemId(_inventTrans.ItemId);
            account.parmInventDimId(_inventTrans.InventDimId);
            account.parmInventTransRecId(_inventTrans.RecId);
            SysTransactionScopeCache::set(classStr(CostInventoryAccount), key, account);
        }

        return account;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>