<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransInitExtensions_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TaxTransInitExtensions_W
{
    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyTaxTrans</Name>
				<Source><![CDATA[
    public static void copyTaxTrans(TaxTrans  _taxTransSource, TaxTrans  _taxTransDestination)
    {
        TaxTrans_W taxTrans_W;

        // <GIN>
        // <GEEU> <GEEPL>
        if (SysExtensionSerializerExtensionMap::isExtensionEnabled(tableNum(TaxTrans_W)))
        {
            taxTrans_W = _taxTransSource.taxTrans_W();
            _taxTransDestination.packTaxTrans_W(taxTrans_W);
        }
        // </GEEPL> </GEEU>
        // </GIN>

        TaxTransInitExtensions_W::copyTaxTrans_RU(_taxTransSource, _taxTransDestination);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTaxTrans_RU</Name>
				<Source><![CDATA[
    private static void copyTaxTrans_RU(TaxTrans  _taxTransSource, TaxTrans  _taxTransDestination)
    {
        #ISOCountryRegionCodes
        TaxTrans_RU taxTrans_RU;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            taxTrans_RU = _taxTransSource.taxTrans_RU();
            _taxTransDestination.packTaxTrans_RU(taxTrans_RU);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxWorkTrans</Name>
				<Source><![CDATA[
    public static void initFromTaxWorkTrans(TaxTrans _taxTransDestination, TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        if (TaxPostPerfImprovFlight::instance().isEnabled())
        {
            #ISOCountryRegionCodes
            TaxTransInitExtensions_W::initFromTaxWorkTrans_EU(_taxTransDestination, _tmpTaxWorkTrans);
            TaxTransInitExtensions_W::initFromTaxWorkTrans_MX(_taxTransDestination, _tmpTaxWorkTrans);
            LogisticsAddressCountryRegionISOCode countryISOCode = SysCountryRegionCode::countryInfo(curExt());

            if (MultipleTaxIdReportingHelper::isLegalEntityOrTaxCodeInCountryRegion(
                _tmpTaxWorkTrans.TaxCode, [#isoIT], MultipleTaxIdScope::VATDeclaration))
            {
                countryISOCode = #isoIT;
            }

            switch (countryISOCode)
            {
                case (#isoBR) :
                    TaxTransInitExtensions_W::initFromTaxWorkTrans_BR(_taxTransDestination, _tmpTaxWorkTrans);
                    break;

                case (#isoIN) :
                    TaxTransInitExtensions_W::initFromTaxWorkTrans_IN(_taxTransDestination, _tmpTaxWorkTrans);
                    break;

                case (#isoIT) :
                    TaxTransInitExtensions_W::initFromTaxWorkTrans_IT(_taxTransDestination, _tmpTaxWorkTrans);
                    break;

                case (#isoPL) :
                    TaxTransInitExtensions_W::initFromTaxWorkTrans_PL(_taxTransDestination, _tmpTaxWorkTrans);

                case (#isoRU) :
                    TaxTransInitExtensions_W::initFromTaxWorkTrans_RU(_taxTransDestination, _tmpTaxWorkTrans);
                    break;

                case (#isoTH) :
                    TaxTransInitExtensions_W::initFromTaxWorkTrans_TH(_taxTransDestination, _tmpTaxWorkTrans);
                    break;

                default :
                    break;
            }
        }
        else
        {
            TaxTransInitExtensions_W::initFromTaxWorkTrans_IN(_taxTransDestination, _tmpTaxWorkTrans);
            TaxTransInitExtensions_W::initFromTaxWorkTrans_EU(_taxTransDestination, _tmpTaxWorkTrans);
            TaxTransInitExtensions_W::initFromTaxWorkTrans_MX(_taxTransDestination, _tmpTaxWorkTrans);
            TaxTransInitExtensions_W::initFromTaxWorkTrans_TH(_taxTransDestination, _tmpTaxWorkTrans);
            TaxTransInitExtensions_W::initFromTaxWorkTrans_BR(_taxTransDestination, _tmpTaxWorkTrans);
            TaxTransInitExtensions_W::initFromTaxWorkTrans_RU(_taxTransDestination, _tmpTaxWorkTrans);
            TaxTransInitExtensions_W::initFromTaxWorkTrans_PL(_taxTransDestination, _tmpTaxWorkTrans);
            TaxTransInitExtensions_W::initFromTaxWorkTrans_IT(_taxTransDestination, _tmpTaxWorkTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxWorkTrans_IN</Name>
				<Source><![CDATA[
    public static void initFromTaxWorkTrans_IN(TaxTrans _taxTransDestination, TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        #ISOCountryRegionCodes
        Direction_IN    customsDirection;
        boolean         countryRegion_IN       = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        TaxTrans_W  taxTrans_W;
        TaxTable    taxTable = TaxTable::find(_tmpTaxWorkTrans.TaxCode);

        if (countryRegion_IN)
        {
            taxTrans_W = _taxTransDestination.taxTrans_W();
            taxTrans_W.TaxType_IN                    = taxTable.TaxType_IN;
            taxTrans_W.AbatementAmount_IN            = _tmpTaxWorkTrans.AbatementAmount_IN;
            taxTrans_W.ClaimPercentage_IN            = _tmpTaxWorkTrans.ClaimPercentage_IN;
            taxTrans_W.TaxComponentTable_IN          = taxTable.TaxComponentTable_IN;
            taxTrans_W.TaxRegistrationNumberTable_IN = _tmpTaxWorkTrans.TaxRegistrationNumberTable_IN;
            if (TaxParameters::find().Customs_IN && taxTable.TaxType_IN == TaxType_IN::Customs)
            {
                _taxTransDestination.TaxAmount                      = _tmpTaxWorkTrans.CustomsDuty_IN;
                taxTrans_W.CustomsDuty_IN           = _tmpTaxWorkTrans.CustomsDuty_IN;
                taxTrans_W.TaxAmountCustoms_IN      = _tmpTaxWorkTrans.SourceRegulateAmountCustoms_IN;
                if (_tmpTaxWorkTrans.SourceRegulateAmountCur
                    && !_tmpTaxWorkTrans.SourceRegulateAmountCustoms_IN)
                {
                    if (_tmpTaxWorkTrans.TaxDirection == TaxDirection::IncomingTax)
                    {
                        customsDirection = Direction_IN::Import;
                    }
                    else if (_tmpTaxWorkTrans.TaxDirection == TaxDirection::OutgoingTax)
                    {
                        customsDirection = Direction_IN::Export;
                    }

                    taxTrans_W.TaxAmountCustoms_IN = CurrencyHelper_IN::customsMSTAmount_IN(_tmpTaxWorkTrans.SourceRegulateAmountCur,
                                                                            _tmpTaxWorkTrans.SourceCurrencyCode,
                                                                            customsDirection,
                                                                            _tmpTaxWorkTrans.TransDate);
                }
            }
            _taxTransDestination.packTaxTrans_W(taxTrans_W);
        }

        if (_tmpTaxWorkTrans.IsScrapQtyLine_IN)
        {
            _taxTransDestination.TaxAmount    = - _taxTransDestination.TaxAmount;
            _taxTransDestination.TaxAmountCur = - _taxTransDestination.TaxAmountCur;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxWorkTrans_EU</Name>
				<Source><![CDATA[
    public static void initFromTaxWorkTrans_EU(TaxTrans _taxTransDestination, TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        TaxTrans_W  taxTrans_W;

        if (VendParameters::find().IntracomVAT)
        {
            _taxTransDestination.IntracomVAT               = _tmpTaxWorkTrans.IntracomVAT;
        }

        if (TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            taxTrans_W = _taxTransDestination.taxTrans_W();
            taxTrans_W.VatDueDate_W                           = _tmpTaxWorkTrans.VatDueDate_W;
            _taxTransDestination.packTaxTrans_W(taxTrans_W);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxWorkTrans_MX</Name>
				<Source><![CDATA[
    public static void initFromTaxWorkTrans_MX(TaxTrans _taxTransDestination, TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        if (!_taxTransDestination.UnrealizedTax)
        {
            _taxTransDestination.RealizedDate = _tmpTaxWorkTrans.TransDate;
        }

        if (EInvoiceParameters_MX::isElectronicInvoiceEnabled() || EInvoiceCFDIParameters_MX::isElectronicInvoiceEnabled())
        {
            _taxTransDestination.TaxType_MX = _tmpTaxWorkTrans.TaxType_MX;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxWorkTrans_TH</Name>
				<Source><![CDATA[
    public static void initFromTaxWorkTrans_TH(TaxTrans _taxTransDestination, TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        TaxTransExtensionTH     taxTransExtensionTH;
        boolean                 taxTransExtensionTHUpdated = false;

        if (TaxThaiGovCertificationFeatureChecker::isCountryRegionTH())
        {
            taxTransExtensionTH = _taxTransDestination.taxTransExtensionTH();            
            taxTransExtensionTH.IsReversalGainLoss = _tmpTaxWorkTrans.IsReversalGainLoss_TH;
        }

        if (TaxThaiGovCertificationFeatureChecker::isAverageVATEnabled())
        {
            taxTransExtensionTH.TaxUnrealizedRefRecId = _tmpTaxWorkTrans.TaxUnrealizedRefRecId;
            taxTransExtensionTHUpdated = true;
        }

        if (TaxThaiGovCertificationFeatureChecker::isTaxBranchEnabled())
        {
            taxTransExtensionTH.TaxBranch = TaxBranchType::getTBDisplayValueByLedgerDimension(_tmpTaxWorkTrans.LedgerDimension);
            taxTransExtensionTHUpdated = true;
        }

        if (taxTransExtensionTHUpdated)
        {
            _taxTransDestination.SysExtensionSerializerMap::packExtensionTable(taxTransExtensionTH);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxWorkTrans_BR</Name>
				<Source><![CDATA[
    public static void initFromTaxWorkTrans_BR(TaxTrans _taxTransDestination, TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        TaxTrans_BR taxTrans_BR;

        if (BrazilParameters::isEnabled())
        {
            taxTrans_BR = _taxTransDestination.taxTrans_BR();
            taxTrans_BR.TaxType_BR                         = _tmpTaxWorkTrans.TaxType_BR;
            taxTrans_BR.FiscalValue_BR                     = _tmpTaxWorkTrans.FiscalValue_BR;
            taxTrans_BR.TaxationCode_BR                    = _tmpTaxWorkTrans.taxationCodeAdjusted_BR();
            taxTrans_BR.TaxSubstitution_BR                 = _tmpTaxWorkTrans.TaxTributarySubstitution;
            taxTrans_BR.TaxSalesOffsetLedgerDimension_BR   = _tmpTaxWorkTrans.TaxSalesOffsetLedgerDimension_BR;

            taxTrans_BR.TaxBaseAmountExempt_BR             = _tmpTaxWorkTrans.SourceExemptBaseAmountMST_BR;
            taxTrans_BR.TaxBaseAmountOther_BR              = _tmpTaxWorkTrans.SourceOtherBaseAmountMST_BR;
            taxTrans_BR.TaxAmountOther_BR                  = _tmpTaxWorkTrans.SourceOtherTaxAmountMST_BR;

            ItemId  itemId;
            if (_taxTransDestination.Source == TaxModuleType::Sales)
            {
                itemId = SalesLine::findInventTransId(_taxTransDestination.InventTransId).ItemId;
            }
            else if (_taxTransDestination.Source == TaxModuleType::Purch)
            {
                itemId = PurchLine::findInventTransId(_taxTransDestination.InventTransId).ItemId;
            }

            taxTrans_BR.TaxationOrigin_BR                  = _tmpTaxWorkTrans.TaxationOrigin_BR ? _tmpTaxWorkTrans.TaxationOrigin_BR : InventTable::find(itemId).TaxationOrigin_BR;

            taxTrans_BR.TaxReductionPct_BR                 = _tmpTaxWorkTrans.TaxReductionPct_BR;

            taxTrans_BR.TaxReceivableLongTerm_BR           = _tmpTaxWorkTrans.TaxReceivableLongTerm_BR;
            _taxTransDestination.packTaxTrans_BR(taxTrans_BR);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxWorkTrans_RU</Name>
				<Source><![CDATA[
    public static void initFromTaxWorkTrans_RU(TaxTrans _taxTransDestination, TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        #ISOCountryRegionCodes
        TaxTrans_RU taxTrans_RU;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            taxTrans_RU = _taxTransDestination.taxTrans_RU();
            taxTrans_RU.vatOperationCode_RU                = _tmpTaxWorkTrans.vatOperationCode_RU;
            taxTrans_RU.vatTaxAgentVendAccount_RU          = _tmpTaxWorkTrans.vatTaxAgentVendAccount_RU;
            taxTrans_RU.TaxSourceType_RU                   = _tmpTaxWorkTrans.TaxSourceType_RU;
            taxTrans_RU.MarkupTransRecId_RU                = _tmpTaxWorkTrans.MarkupTransRecId_RU;
            taxTrans_RU.OffsetLedgerDimension_RU           = _tmpTaxWorkTrans.OffsetLedgerDimension_RU;
            _taxTransDestination.packTaxTrans_RU(taxTrans_RU);

            if (_tmpTaxWorkTrans.WithoutTaxTrans_RU)
            {
                _taxTransDestination.ExemptTax = NoYes::Yes;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxWorkTrans_PL</Name>
				<Source><![CDATA[
    public static void initFromTaxWorkTrans_PL(TaxTrans _taxTransDestination, TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        #ISOCountryRegionCodes
        TaxTrans_W  taxTrans_W;
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            taxTrans_W = _taxTransDestination.taxTrans_W();
            taxTrans_W.TaxPeriodPaymentCode_PL            = _tmpTaxWorkTrans.TaxPeriodPaymentCode_PL;
            taxTrans_W.CustVendName_PL                    = _tmpTaxWorkTrans.CustVendName_PL;
            taxTrans_W.Addressing_PL                      = _tmpTaxWorkTrans.Addressing_PL;
            taxTrans_W.vatNum_PL                          = _tmpTaxWorkTrans.vatNum_PL;
            taxTrans_W.DocumentDate_PL                    = _tmpTaxWorkTrans.DocumentDate_PL;
            _taxTransDestination.packTaxTrans_W(taxTrans_W);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxWorkTrans_IT</Name>
				<Source><![CDATA[
    public static void initFromTaxWorkTrans_IT(TaxTrans _taxTransDestination, TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        #ISOCountryRegionCodes
        if (MultipleTaxIdReportingHelper::isLegalEntityOrTaxCodeInCountryRegion(
            _tmpTaxWorkTrans.TaxCode, [#isoIT], MultipleTaxIdScope::VATDeclaration))
        {
            TaxTrans_IT taxtrans_IT;

            taxtrans_IT = _taxTransDestination.taxTrans_IT();
            taxtrans_IT.InvoiceRefRecId = _tmpTaxWorkTrans.InvoiceRecId;
            _taxTransDestination.packTaxTrans_IT(taxtrans_IT);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxUncommitted</Name>
				<Source><![CDATA[
    public static void initFromTaxUncommitted(TaxTrans _taxTransDestination, TaxUncommitted _taxUncommitted)
    {
        if (TaxPostPerfImprovFlight::instance().isEnabled())
        {
            TaxTransInitExtensions_W::initFromTaxUncommitted_MX(_taxTransDestination, _taxUncommitted);
            TaxTransInitExtensions_W::initFromTaxUncommitted_EU(_taxTransDestination, _taxUncommitted);
            LogisticsAddressCountryRegionISOCode countryISOCode = SysCountryRegionCode::countryInfo(curExt());
            switch (countryISOCode)
            {
                case (#isoBR) :
                    TaxTransInitExtensions_W::initFromTaxUncommitted_BR(_taxTransDestination, _taxUncommitted);
                    break;

                case (#isoCZ) :
                    TaxTransInitExtensions_W::initFromTaxUncommitted_CZ(_taxTransDestination, _taxUncommitted);
                    break;

                case (#isoIN) :
                    TaxTransInitExtensions_W::initFromTaxUncommitted_IN(_taxTransDestination, _taxUncommitted);
                    break;

                case (#isoPL) :
                    TaxTransInitExtensions_W::initFromTaxUncommitted_PL(_taxTransDestination, _taxUncommitted);

                case (#isoRU) :
                    TaxTransInitExtensions_W::initFromTaxUncommitted_RU(_taxTransDestination, _taxUncommitted);
                    break;

                case (#isoTH) :
                    TaxTransInitExtensions_W::initFromTaxUncommitted_TH(_taxTransDestination, _taxUncommitted);
                    break;

                default :
                    break;
            }
        }
        else
        {
            TaxTransInitExtensions_W::initFromTaxUncommitted_TH(_taxTransDestination, _taxUncommitted);

            TaxTransInitExtensions_W::initFromTaxUncommitted_IN(_taxTransDestination, _taxUncommitted);

            TaxTransInitExtensions_W::initFromTaxUncommitted_MX(_taxTransDestination, _taxUncommitted);

            TaxTransInitExtensions_W::initFromTaxUncommitted_BR(_taxTransDestination, _taxUncommitted);

            TaxTransInitExtensions_W::initFromTaxUncommitted_RU(_taxTransDestination, _taxUncommitted);

            TaxTransInitExtensions_W::initFromTaxUncommitted_EU(_taxTransDestination, _taxUncommitted);

            TaxTransInitExtensions_W::initFromTaxUncommitted_PL(_taxTransDestination, _taxUncommitted);

            TaxTransInitExtensions_W::initFromTaxUncommitted_CZ(_taxTransDestination, _taxUncommitted);
        }

        if (VendParameters::find().IntracomVAT)
        {
            _taxTransDestination.IntracomVAT = _taxUncommitted.IntracomVAT;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxUncommitted_MX</Name>
				<Source><![CDATA[
    public static void initFromTaxUncommitted_MX(TaxTrans _taxTransDestination, TaxUncommitted _taxUncommitted)
    {
        if (!_taxTransDestination.UnrealizedTax)
        {
            _taxTransDestination.RealizedDate = _taxUncommitted.TransDate;
        }

        if (EInvoiceParameters_MX::isElectronicInvoiceEnabled() || EInvoiceCFDIParameters_MX::isElectronicInvoiceEnabled())
        {
            _taxTransDestination.TaxType_MX = _taxUncommitted.TaxType_MX;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxUncommitted_IN</Name>
				<Source><![CDATA[
    public static void initFromTaxUncommitted_IN(TaxTrans _taxTransDestination, TaxUncommitted _taxUncommitted)
    {
        TaxUncommitted_IN   taxUncommittedIN;
        Direction_IN        customsDirection;
        TaxTrans_W          taxTrans_W;
        TaxTable        taxTable        = TaxTable::find(_taxUncommitted.TaxCode);

        if (TaxParameters::checkTaxParameters_IN())
        {
            taxTrans_W = _taxTransDestination.taxTrans_W();
            taxTrans_W.TaxType_IN               = taxTable.TaxType_IN;
            taxTrans_W.TaxComponentTable_IN     = taxTable.TaxComponentTable_IN;
            taxUncommittedIN = TaxUncommitted_IN::findByTaxUncommitted(_taxUncommitted.RecId);
            taxTrans_W.ClaimPercentage_IN         = taxUncommittedIN.ClaimPercentage;
            taxTrans_W.AbatementAmount_IN         = taxUncommittedIN.AbatementAmount;

            if (TaxParameters::isCustomsEnable_IN()
                            && TaxTable::find(_taxUncommitted.TaxCode).TaxType_IN == TaxType_IN::Customs)
            {
                _taxTransDestination.TaxAmount                      = _taxUncommitted.TaxAmount;
                taxTrans_W.CustomsDuty_IN           = taxUncommittedIN.CustomsDuty;
                taxTrans_W.TaxAmountCustoms_IN      = taxUncommittedIN.SourceRegulateAmountCustoms;

                if (_taxUncommitted.SourceRegulateAmountCur
                                    && !taxUncommittedIN.SourceRegulateAmountCustoms)
                {
                    if (_taxUncommitted.TaxDirection == TaxDirection::IncomingTax)
                    {
                        customsDirection = Direction_IN::Import;
                    }
                    else if (_taxUncommitted.TaxDirection == TaxDirection::OutgoingTax)
                    {
                        customsDirection = Direction_IN::Export;
                    }
                    taxTrans_W.TaxAmountCustoms_IN = CurrencyHelper_IN::customsMSTAmount_IN(_taxUncommitted.SourceRegulateAmountCur,
                                                                                    _taxUncommitted.SourceCurrencyCode,
                                                                                    customsDirection,
                                                                                    _taxUncommitted.TransDate);
                }
            }

            taxTrans_W.TaxRegistrationNumberTable_IN = TaxInformation_IN::find(TransTaxInformationHelper::findOrCreateTransTaxInformation(_taxUncommitted.SourceTableId, _taxUncommitted.SourceRecId).RecId).getTaxRegistrationNumbersTable(taxTable.TaxType_IN).RecId;
            if (taxTable.TaxType_IN == TaxType_IN::ServiceTax
                            && taxUncommittedIN.ServiceTaxReverseChargePercentage !=0 )
            {
                taxTrans_W.ServiceTaxReverseChargePercentage_IN = taxUncommittedIN.ServiceTaxReverseChargePercentage;
                taxTrans_W.ServiceTaxReverseChargeOriginAmount_IN = taxUncommittedIN.ServTaxRevChargeOriginAmountCur_IN;
            }
            _taxTransDestination.packTaxTrans_W(taxTrans_W);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxUncommitted_BR</Name>
				<Source><![CDATA[
    public static void initFromTaxUncommitted_BR(TaxTrans _taxTransDestination, TaxUncommitted _taxUncommitted)
    {
        TaxTrans_BR taxTrans_BR;

        if (BrazilParameters::isEnabled())
        {
            taxTrans_BR = _taxTransDestination.taxTrans_BR();
            taxTrans_BR.TaxType_BR                         = _taxUncommitted.TaxType_BR;
            taxTrans_BR.FiscalValue_BR                     = _taxUncommitted.FiscalValue_BR;
            taxTrans_BR.TaxationCode_BR                    = _taxUncommitted.TaxationCodeAdj_BR ? _taxUncommitted.TaxationCodeAdj_BR : _taxUncommitted.TaxationCode_BR;
            taxTrans_BR.TaxSubstitution_BR                 = _taxUncommitted.TaxSubstitution_BR;
            taxTrans_BR.TaxSalesOffsetLedgerDimension_BR   = _taxUncommitted.TaxSalesOffsetLedgerDimension_BR;

            taxTrans_BR.TaxBaseAmountExempt_BR             = _taxUncommitted.SourceExemptBaseAmountMST_BR;
            taxTrans_BR.TaxBaseAmountOther_BR              = _taxUncommitted.SourceOtherBaseAmountMST_BR;
            taxTrans_BR.TaxAmountOther_BR                  = _taxUncommitted.SourceOtherTaxAmountMST_BR;

            ItemId  itemId;
            if (_taxTransDestination.Source == TaxModuleType::Sales
                ||_taxTransDestination.Source == TaxModuleType::Project)
            {
                itemId = SalesLine::findInventTransId(_taxTransDestination.InventTransId).ItemId;
            }
            else if (_taxTransDestination.Source == TaxModuleType::Purch)
            {
                itemId = PurchLine::findInventTransId(_taxTransDestination.InventTransId).ItemId;
            }
            else if (_taxTransDestination.Source == TaxModuleType::FreeTxtInvoice)
            {
                // This behavior (Gets default origin code for free text invoice scenario) must happen only while issuing NF-e (fiscal document model 55).
                FiscalDocumentType_BR fiscalDocumentType = FiscalDocumentType_BR::findRecID(CustInvoiceTable::findRecId(_taxUncommitted.HeadingRecId).FiscalDocumentType_BR);

                if (fiscalDocumentType.isEfDocument())
                {
                    itemId = BrazilParameters::find().FreeTextInvoiceItemId;
                }
            }

            taxTrans_BR.TaxationOrigin_BR                  = _taxUncommitted.TaxationOrigin_BR ? _taxUncommitted.TaxationOrigin_BR : InventTable::find(itemId).TaxationOrigin_BR;

            taxTrans_BR.TaxReductionPct_BR                 = _taxUncommitted.TaxReductionPct_BR;

            taxTrans_BR.TaxReceivableLongTerm_BR           = _taxUncommitted.TaxReceivableLongTerm_BR;
            _taxTransDestination.packTaxTrans_BR(taxTrans_BR);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxUncommitted_TH</Name>
				<Source><![CDATA[
    public static void initFromTaxUncommitted_TH(TaxTrans _taxTransDestination, TaxUncommitted _taxUncommitted)
    {
        TaxTransExtensionTH     taxTransExtensionTH;
        boolean                 taxTransExtensionTHUpdated = false;

        if (TaxThaiGovCertificationFeatureChecker::isCountryRegionTH())
        {
            taxTransExtensionTH = _taxTransDestination.taxTransExtensionTH();
        }
        if (TaxThaiGovCertificationFeatureChecker::isAverageVATEnabled())
        {
            taxTransExtensionTH.TaxUnrealizedRefRecId = TaxUncommittedExtensionTH::findByTaxUncommittedRecId(_taxUncommitted.RecId).TaxUnrealizedRefRecId;
            taxTransExtensionTHUpdated = true;
        }

        if (TaxThaiGovCertificationFeatureChecker::isTaxBranchEnabled())
        {
            taxTransExtensionTH.TaxBranch = TaxBranchType::getTBDisplayValueByLedgerDimension(_taxUncommitted.LedgerDimension);
            taxTransExtensionTHUpdated = true;
        }

        if (taxTransExtensionTHUpdated)
        {
            _taxTransDestination.SysExtensionSerializerMap::packExtensionTable(taxTransExtensionTH);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxUncommitted_RU</Name>
				<Source><![CDATA[
    public static void initFromTaxUncommitted_RU(TaxTrans _taxTransDestination, TaxUncommitted _taxUncommitted)
    {
        #ISOCountryRegionCodes
        TaxTrans_RU taxTrans_RU;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            taxTrans_RU = _taxTransDestination.taxTrans_RU();
            taxTrans_RU.vatTaxAgentVendAccount_RU  = _taxUncommitted.vatTaxAgentVendAccount_RU;
            taxTrans_RU.vatOperationCode_RU        = _taxUncommitted.vatOperationCode_RU;
            taxTrans_RU.OffsetLedgerDimension_RU   = _taxUncommitted.OffsetLedgerDimension_RU;
            _taxTransDestination.packTaxTrans_RU(taxTrans_RU);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxUncommitted_EU</Name>
				<Source><![CDATA[
    public static void initFromTaxUncommitted_EU(TaxTrans _taxTransDestination, TaxUncommitted _taxUncommitted)
    {
        TaxTrans_W taxTrans_W;

        if (TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            taxTrans_W = _taxTransDestination.taxTrans_W();
            taxTrans_W.VatDueDate_W                           = _taxUncommitted.VatDueDate_W;
            _taxTransDestination.packTaxTrans_W(taxTrans_W);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxUncommitted_PL</Name>
				<Source><![CDATA[
    public static void initFromTaxUncommitted_PL(TaxTrans _taxTransDestination, TaxUncommitted _taxUncommitted)
    {
        #ISOCountryRegionCodes
        TaxTrans_W taxTrans_W;
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            taxTrans_W = _taxTransDestination.taxTrans_W();
            taxTrans_W.CustVendName_PL                        = _taxUncommitted.CustVendName_PL;
            taxTrans_W.Addressing_PL                          = _taxUncommitted.Addressing_PL;
            taxTrans_W.vatNum_PL                              = _taxUncommitted.vatNum_PL;
            taxTrans_W.TaxPeriodPaymentCode_PL                = _taxUncommitted.TaxPeriodPaymentCode_PL;
            taxTrans_W.DocumentDate_PL                        = _taxUncommitted.DocumentDate_PL;
            _taxTransDestination.packTaxTrans_W(taxTrans_W);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxTransForTaxExchangeRateDifference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the fields for tax exchange difference amount record.
    /// </summary>
    /// <param name = "_taxTransSource">The original <c>TaxTrans</c> record.</param>
    /// <param name = "_taxTransDestination">The target <c>TaxTrans</c> record.</param>
    /// <returns>The initialized target record.</returns>
    public static void initFromTaxTransForTaxExchangeRateDifference(TaxTrans _taxTransSource, TaxTrans _taxTransDestination)
    {
        _taxTransDestination.data(_taxTransSource);

        if (_taxTransSource.TaxDirection == TaxDirection::OutgoingTax)
        {
            _taxTransDestination.TaxDirection = TaxDirection::OutgoingTax_W;
        }
        else if (_taxTransSource.TaxDirection == TaxDirection::IncomingTax)
        {
            _taxTransDestination.TaxDirection = TaxDirection::IncomingTax_W;
        }

        _taxTransDestination.TaxBaseQty                     = 0;
        _taxTransDestination.TaxInCostPrice                 = 0;
        _taxTransDestination.TaxInCostPriceCur              = 0;
        _taxTransDestination.TaxInCostPriceRep              = 0;
        _taxTransDestination.TaxInCostPriceMST              = 0;
        _taxTransDestination.TaxInCostPriceRegulated        = 0;
        _taxTransDestination.TaxAmountCur                   = 0;
        _taxTransDestination.TaxAmountRep                   = 0;
        _taxTransDestination.SourceBaseAmountCur            = 0;
        _taxTransDestination.SourceBaseAmountCurRegulated   = 0;
        _taxTransDestination.TaxBaseAmountCur               = 0;
        _taxTransDestination.TaxBaseAmountRep               = 0;
        _taxTransDestination.SourceTaxAmountCur             = 0;
        _taxTransDestination.SourceRegulateAmountCur        = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxUncommitted_CZ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the document date field value in the <c>taxTrans_W</c> table.
    /// </summary>
    /// <param name="_taxTransDestination">
    /// A buffer of <c>TaxTrans</c> table.
    /// </param>
    /// <param name="_taxUncommitted">
    /// A buffer of <c>TaxUncommitted</c> table.
    /// </param>
    public static void initFromTaxUncommitted_CZ(TaxTrans _taxTransDestination, TaxUncommitted _taxUncommitted)
    {
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
        {
            TaxTrans_W taxTrans_W = _taxTransDestination.taxTrans_W();
            taxTrans_W.DocumentDate_PL = _taxUncommitted.DocumentDate_PL;
            _taxTransDestination.packTaxTrans_W(taxTrans_W);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>