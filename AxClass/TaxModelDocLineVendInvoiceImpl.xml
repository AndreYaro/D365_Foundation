<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLineVendInvoiceImpl</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The tax model class for <c>VendInvoiceInfoLine</c>.
/// </summary>
public class TaxModelDocLineVendInvoiceImpl extends TaxModelDocLineBaseImpl
{
    VendInvoiceInfoTable vendInvoiceInfoTable;
    VendInvoiceInfoLine  vendInvoiceInfoLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDeliveryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction delivery date
    /// </summary>
    /// <returns>
    /// The transaction delivery date
    /// </returns>
    public Date getDeliveryDate()
    {
        return VendInvoiceInfoTable.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentLineOriginalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the document line original table.
    /// </summary>
    /// <returns>
    /// The document line original table.
    /// </returns>
    public Common getDocumentLineOriginalTable()
    {
        Common ret;

        if (vendInvoiceInfoLine.isNonPO())
        {
            ret = vendInvoiceInfoLine;
        }
        else
        {
            ret = vendInvoiceInfoLine.purchLine();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventDimId</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>InventDimId</c>
    /// </returns>
    public InventDimId getInventDimId()
    {
        return vendInvoiceInfoLine.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line amount of the document line.
    /// </summary>
    /// <returns>
    /// The line amount.
    /// </returns>
    public LineAmount getLineAmount()
    {
        return vendInvoiceInfoLine.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the quantity from the transaction line.
    /// </summary>
    /// <returns>
    ///    The quantity.
    /// </returns>
    /// <remarks>
    ///    If the transaction does not support quantities, 0 may be passed as the quantity. This will be used
    ///    to calculate taxes by unit.
    /// </remarks>
    public Qty getQuantity()
    {
        return vendInvoiceInfoLine.ReceiveNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelatedPackingSlip</Name>
				<Source><![CDATA[
    private VendPackingSlipTrans getRelatedPackingSlip()
    {
        VendInvoiceInfoSubLine  vendInvoiceInfoSubLine;
        VendPackingSlipTrans    vendPackingSlipTrans;

        select firstOnly RecId, deliveryDate from vendPackingSlipTrans
            join RecId from vendInvoiceInfoSubLine
                where vendPackingSlipTrans.RecId == vendInvoiceInfoSubLine.JournalRefRecId
                    && vendInvoiceInfoSubLine.JournalRefTableId == tableNum(VendPackingSlipTrans)
                    && vendInvoiceInfoSubLine.LineRefRecId == vendInvoiceInfoLine.RecId;

        return vendPackingSlipTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax direction.
    /// </summary>
    /// <returns>
    /// The tax direction
    /// </returns>
    public TaxDirection getTaxDirection()
    {
        return TaxDirection::IncomingTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the document line transaction currency.
    /// </summary>
    /// <returns>The document line transaction currency.</returns>
    public CurrencyCode getTransactionCurrency()
    {
        return vendInvoiceInfoLine.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction posting date
    /// </summary>
    /// <returns>
    /// The transaction posting date
    /// </returns>
    public TransDate getTransDate()
    {
        return vendInvoiceInfoTable.UpdateDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>VendTable</c> based on the vendor account on the transaction line.
    /// </summary>
    /// <returns>
    /// The <c>VendTable</c>
    /// </returns>
    public VendTable getVendTable()
    {
        return vendInvoiceInfoTable.vendTable_InvoiceAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the domain object.
    /// The method should only be called by the <c>TaxModelDocLineFactoryable_IN</c> classes.
    /// </summary>
    /// <param name="_documentLineMap">
    /// The document line buffer.
    /// </param>
    public void init(SalesPurchJournalLine _documentLineMap)
    {
        vendInvoiceInfoLine = _documentLineMap;
        vendInvoiceInfoTable = vendInvoiceInfoLine.vendInvoiceInfoTable();

        super(vendInvoiceInfoLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canModifyTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction tax information can be modified or not.
    /// </summary>
    /// <returns>
    /// True if the tax information of document line can be modified; otherwise, false.
    /// </returns>
    public NoYes canModifyTaxInformation()
    {
        return vendInvoiceInfoLine.isNonPO() || vendInvoiceInfoTable.InvoiceType == PurchInvoiceType::VendorAdvance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax module type.
    /// </summary>
    /// <returns>
    /// The transaction tax module type with purch invoice.
    /// </returns>
    public TaxModuleType getTaxModuleType()
    {
        return TaxModuleType::PurchInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxLogisticsPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax <c>LogisticsPostalAddress</c> of this transaction document line.
    /// </summary>
    /// <returns>
    /// The tax <c>LogisticsPostalAddress</c>
    /// </returns>
    /// This method is used to init TransTaxInformation.CompanyLocation, which should be defaulted from transaction line delivery address
    public LogisticsPostalAddress getTaxLogisticsPostalAddress(TransTaxInformationType_IN _type = TransTaxInformationType_IN::Normal)
    {
        if (this.isBasedOnReferenceTaxModelDocLine())
        {
            return this.getReferenceTaxModelDocLine().getTaxLogisticsPostalAddress(TransTaxInformationType_IN::Normal);
        }
        else
        {
            return LogisticsPostalAddress::findRecId(documentLineMap.DeliveryLocation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDiscAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total discount amount.
    /// </summary>
    /// <returns>The total discount amount</returns>
    public Amount getDiscAmount()
    {
        Amount totalDisc;

        PriceUnit priceUnit = vendInvoiceInfoLine.PriceUnit == 0? 1 : vendInvoiceInfoLine.PriceUnit;

        Amount netAmount = (vendInvoiceInfoLine.ReceiveNow * ((vendInvoiceInfoLine.PurchPrice - vendInvoiceInfoLine.discAmount()) / priceUnit)) * (100 - vendInvoiceInfoLine.discPercent()) / 100;

        totalDisc = (vendInvoiceInfoLine.ReceiveNow * vendInvoiceInfoLine.PurchPrice / priceUnit) - netAmount;

        if (!vendInvoiceInfoLine.isNonPO())
        {
            totalDisc = totalDisc + netAmount * vendInvoiceInfoLine.purchTable().DiscPercent;
        }

        return totalDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the unit of the item in this transaction document line.
    /// </summary>
    /// <returns>The unit of the item in this transaction line.</returns>
    public UnitOfMeasureSymbol getUnit()
    {
        if (vendInvoiceInfoLine.PurchUnit)
        {
            return vendInvoiceInfoLine.PurchUnit;
        }
        else
        {
            return vendInvoiceInfoLine.purchLine().PurchUnit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction invoice date
    /// </summary>
    /// <returns>
    /// The transaction invoice date
    /// </returns>
    public InvoiceDate getDocumentInvoiceDate()
    {
        return vendInvoiceInfoTable.DocumentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction document date
    /// </summary>
    /// <returns>
    /// The transaction document date
    /// </returns>
    public DocumentDate getDocumentDate()
    {
        return vendInvoiceInfoTable.DocumentDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>