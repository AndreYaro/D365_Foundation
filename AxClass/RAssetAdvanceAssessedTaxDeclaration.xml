<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetAdvanceAssessedTaxDeclaration</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetAdvanceAssessedTaxDeclaration extends RAssetAssessedTaxDeclaration implements BatchRetryable
{
    #define.CurrentVersion(7)
    #localmacro.CurrentList
        employeeId,
        taxDeclarationLocation,
        reorganization,
        exportToER,
        reorganizationCode,
        reorganizationINN,
        reorganizationRRC
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public Description caption()
    {
        return RAssetAdvanceAssessedTaxDeclaration::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSection1</Name>
				<Source><![CDATA[
    protected void fillSection1(int _sheet, int _index, container _values)
    {
        this.fillCellsLeft(_sheet, #BI, 12 + _index * 7, conPeek(_values, 1), 11, "@GLS101637");
        this.fillCellsLeft(_sheet, #BI, 14 + _index * 7, conpeek(_values, 2), 20);
        this.fillCellsLeft(_sheet, #BI, 16 + _index * 7, this.roundAmountStr(taxPay), 15, "@GLS101637");
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSection2</Name>
				<Source><![CDATA[
    #define.Period(5)
    #define.NetBookValueTotal(6)
    #define.NonTaxable(9)
    protected void fillSection2(int                       _sheet,
                                container              _sectionBody,
                                RTax25RegisterTransMap _trans)        // AssessedTax
    {
        RTax25RegisterTransMap  totalDepr;
        RTax25RegisterLineNum64 lineNumBegin;
        int                         row;
        str                     s, tmp;
        RAssetTaxAllowance          allowance;
        Common                  common  = _trans;
        RTax25Query             rQuery  = RTax25Query::newParameters(RTax25RegisterType::AmountDifference, totalDeprJour, isDetached);
        container               fieldId = RTax25RegType::construct(RTax25RegisterType::AmountDifference,
                                                                   RAssetAssessedTaxRegType::AssessedTax,
                                                                   isDetached).fieldId();
        anytype getField(RTax25FieldId   _fieldId)
        {
            if (isDetached)
            {
                return common.(conpeek(fieldId, _fieldId));
            }
            return conpeek(_trans.RegisterValues, _fieldId);
        }
        ;
    
        totalDepr = this.getRegTrans(conpeek(_sectionBody, #BudgetRevenueCode),
                                     RTax25RegCalc_AssessedTax::taxCode(conpeek(_sectionBody, #SalesTaxCode)),
                                     conpeek(_sectionBody, #Section),
                                          _trans.RefTableId, _trans.RefRecId);
    
        if (totalDepr.RecId)
        {
            lineNumBegin = totalDepr.LineNumber;
    
            rQuery.createRegQuery(0, -1);
            rQuery.addRangeValue(fieldName2Id(rQuery.getRecord().TableId, 'LineNumber'), queryRange(lineNumBegin + 1, ''));
    
            if (rQuery.first())
            {
                do
            {
                    if (! rQuery.getField(#Period))
                {
                    break;
                }
    
                this.fillCellsLeft(_sheet,
                                   #X,
                                   21 + row * 2,
                                           this.roundAmountStr(rQuery.getField(#NetBookValueTotal)),
                                   15,
                                   "@GLS109332");
                this.fillCellsLeft(_sheet,
                                   #BU,
                                   21 + row * 2,
                                           this.roundAmountStr(rQuery.getField(#NonTaxable)),
                                   15,
                                   "@GLS109332");
                row++;
            }
                while (rQuery.next());
            }
    
            excelDocument.insertValue(#AO12, subStr(conPeek(_sectionBody, #Section), strLen(conPeek(_sectionBody, #Section)), 1), _sheet);
    
            this.fillCellsLeft(_sheet, #CH, 12, conpeek(_sectionBody, #RCOAD), 11, "@GLS109332");
            this.fillCellsLeft(_sheet, #BF, 47, this.roundAmountStr(getField(#AverageCost)), 15, "@GLS109332");
    
            if (_trans.RefTableId == tablenum(RAssetTable))
            {
                allowance = RAssetTaxAllowance::find(RAssetTable::findrec(_trans.RefRecId).TaxAllowanceRecId);
            }
            else if (_trans.RefTableId == tablenum(RAssetTaxAllowance))
            {
                allowance = RAssetTaxAllowance::find(_trans.RefRecId);
            }
            this.fillCellsLeft(_sheet, #BF, 49, strupr(allowance.TaxAllowanceId));
            if (allowance.ArticleNumber)
                this.fillCellsRight(_sheet, #CM, 49, allowance.ArticleNumber, 4, "@SYS24272");
            if (allowance.ArticleClause)
                this.fillCellsRight(_sheet, #CY, 49, allowance.ArticleClause, 4, "@SYS24272");
            if (allowance.ArticleSubClause)
                this.fillCellsRight(_sheet, #DK, 49, allowance.ArticleSubClause, 4, "@SYS24272");
    
            this.fillCellsLeft(_sheet, #BF, 52, this.roundAmountStr(getField(#NonTaxableAvgCost)), 15, "@GLS109332");
            tmp = getField(#DistributedPropertyShare);
            row = strlen(tmp);
            s = substr(tmp, 1, strfind(tmp, "@SYS35673", 1, row)-1);
            this.fillCellsLeft(_sheet, #BF, 55, s, 10, "@GLS109332");
            s = substr(tmp, row ,-(row-strfind(tmp, "@SYS35673", 1, row)));
            this.fillCellsLeft(_sheet, #CM, 55, s, 10, "@GLS109332");
    
            this.fillCellsLeft(_sheet, #BF, 58, strupr(getField(#AllowanceRateReduction)));
            allowance = RAssetTaxAllowance::findByTaxAllowanceId(getField(#AllowanceRateReduction));
            if (allowance.ArticleNumber)
                this.fillCellsRight(_sheet, #CM, 58, allowance.ArticleNumber, 4, "@SYS24272");
            if (allowance.ArticleClause)
                this.fillCellsRight(_sheet, #CY, 58, allowance.ArticleClause, 4, "@SYS24272");
            if (allowance.ArticleSubClause)
                this.fillCellsRight(_sheet, #DK, 58, allowance.ArticleSubClause, 4, "@SYS24272");
    
            s = RTax25RegCalc_AssessedTax::taxCodePercent(conpeek(_sectionBody, #SalesTaxCode));
            this.fillCellsLeft(_sheet, #BF, 60, substr(s, 1, 1), 1, "@GLS109332");
            this.fillCellsLeft(_sheet, #BL, 60, substr(s, strlen(s), -2), 2, "@GLS109332");
            this.fillCellsLeft(_sheet, #BF, 62, this.roundAmountStr(getField(#TaxAmount)), 15, "@GLS109332");
    
    
            this.fillCellsLeft(_sheet, #BF, 65, strupr(getField(#AllowanceTaxReduction)));
            allowance = RAssetTaxAllowance::findByTaxAllowanceId(getField(#AllowanceTaxReduction));
            if (allowance.ArticleNumber)
                this.fillCellsRight(_sheet, #CM, 65, allowance.ArticleNumber, 4, "@SYS24272");
            if (allowance.ArticleClause)
                this.fillCellsRight(_sheet, #CY, 65, allowance.ArticleClause, 4, "@SYS24272");
            if (allowance.ArticleSubClause)
                this.fillCellsRight(_sheet, #DK, 65, allowance.ArticleSubClause, 4, "@SYS24272");
    
            this.fillCellsLeft(_sheet, #BF, 68, this.roundAmountStr(getField(#TaxReductionAmount)), 15, "@GLS109332");
    
            this.fillCellsLeft(_sheet, #BF, 71, this.roundAmountStr(getField(#MovablesValue)), 15, "@GLS109332");
    
            taxPay += (this.round(getField(#TaxAmount)) -
                       this.round(getField(#TaxReductionAmount)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSection3</Name>
				<Source><![CDATA[
    protected void fillSection3(int                       _sheet,
                                container                 _sectionBody,
                                RTax25RegisterTransMap    _trans)        // AssessedTax
    {
        int                         i;
        str                         s, tmp;
        RAssetTaxAllowance          allowance;
        Common                      common  = _trans;
        container                   fieldId = RTax25RegType::construct(RTax25RegisterType::AmountDifference,
                                                                       RAssetAssessedTaxRegType::AssessedTax,
                                                                       isDetached).fieldId();
    
        anytype getField(RTax25FieldId   _fieldId)
        {
            if (isDetached)
            {
                return common.(conpeek(fieldId, _fieldId));
            }
            return conpeek(_trans.RegisterValues, _fieldId);
        }
    
        this.fillCellsLeft(_sheet, #AE, 10, conPeek(_sectionBody, #RCOAD), 11, "@GLS109332");
        this.fillCellsLeft(_sheet, #BF, 28, this.roundAmountStr(getField(#CadastralValue)), 15, "@GLS109332");
        this.fillCellsLeft(_sheet, #BF, 31, this.roundAmountStr(getField(#NonTaxableCadastralValue)), 15, "@GLS109332");
    
        if (_trans.RefTableId == tablenum(RAssetTable))
        {
            tmp = getField(#CadastralNum);
    
            if (tmp)
            {
                if (strLen(tmp) > 40)
                {
                    this.fillCellsLeft(_sheet, #A, 14, subStr(tmp, 1, 40), 40, "@GLS109332");
                    this.fillCellsLeft(_sheet, #A, 16, subStr(tmp, 41, 40), 40, "@GLS109332");
                }
                else
                {
                    this.fillCellsLeft(_sheet, #A, 14, tmp, 40, "@GLS109332");
                }
            }
    
            tmp = getField(#RoomCadastralNum);
    
            if (tmp)
            {
                if (strLen(tmp) > 40)
                {
                    this.fillCellsLeft(_sheet, #A, 20, subStr(tmp, 1, 40), 40, "@GLS109332");
                    this.fillCellsLeft(_sheet, #A, 22, subStr(tmp, 41, 40), 40, "@GLS109332");
                }
                else
                {
                    this.fillCellsLeft(_sheet, #A, 20, tmp, 40, "@GLS109332");
                }
            }
    
            tmp = getField(#AllowanceTaxExemption);
    
            if (tmp)
            {
                allowance = RAssetTaxAllowance::findByTaxAllowanceId(tmp);
    
                this.fillCellsLeft(_sheet, #BF, 33, strupr(allowance.TaxAllowanceId));
    
            if (allowance.ArticleNumber)
                    this.fillCellsRight(_sheet, #CM, 33, allowance.ArticleNumber, 4, "@SYS24272");
            if (allowance.ArticleClause)
                    this.fillCellsRight(_sheet, #CY, 33, allowance.ArticleClause, 4, "@SYS24272");
            if (allowance.ArticleSubClause)
                    this.fillCellsRight(_sheet, #DK, 33, allowance.ArticleSubClause, 4, "@SYS24272");
            }
        }
    
        tmp = getField(#DistributedPropertyShare);
        i = strlen(tmp);
        s = substr(tmp, 1, strfind(tmp, "@SYS35673", 1, i)-1);
        this.fillCellsLeft(_sheet, #BF, 35, s, 10, "@GLS109332");
        s = substr(tmp,i,-(i-strfind(tmp, "@SYS35673", 1, i)));
        this.fillCellsLeft(_sheet, #CM, 35, s, 10, "@GLS109332");
    
        this.fillCellsLeft(_sheet, #BF, 38, strUpr(getField(#AllowanceRateReduction)), 7, "@GLS109332");
        allowance = RAssetTaxAllowance::findByTaxAllowanceId(getField(#AllowanceRateReduction));
        if (allowance.ArticleNumber)
            this.fillCellsRight(_sheet, #CM, 38, allowance.ArticleNumber, 4, "@SYS24272");
        if (allowance.ArticleClause)
            this.fillCellsRight(_sheet, #CY, 38, allowance.ArticleClause, 4, "@SYS24272");
        if (allowance.ArticleSubClause)
            this.fillCellsRight(_sheet, #DK, 38, allowance.ArticleSubClause, 4, "@SYS24272");
    
        s = RTax25RegCalc_AssessedTax::taxCodePercent(conpeek(_sectionBody, #SalesTaxCode));
        this.fillCellsLeft(_sheet, #BF, 41, subStr(s, 1, 1), 1, "@GLS109332");
        this.fillCellsLeft(_sheet, #BL, 41, subStr(s, strLen(s), -2), 2, "@GLS109332");
    
        tmp = getField(#Factor);
        i = strlen(tmp);
        s = substr(tmp, 1, strfind(tmp, "@SYS35673", 1, i)-1);
        this.fillCellsLeft(_sheet, #BF, 43, s, 1, "@GLS109332");
        s = substr(tmp,i,-(i-strfind(tmp, "@SYS35673", 1, i)));
        this.fillCellsLeft(_sheet, #BL, 43, s, 1, "@GLS109332");
    
        this.fillCellsLeft(_sheet, #BF, 45, this.roundAmountStr(getField(#TaxAmount)), 15, "@GLS109332");
    
        this.fillCellsLeft(_sheet, #BF, 47, strUpr(getField(#AllowanceTaxReduction)));
        allowance = RAssetTaxAllowance::findByTaxAllowanceId(getField(#AllowanceTaxReduction));
        if (allowance.ArticleNumber)
            this.fillCellsRight(_sheet, #CM, 47, allowance.ArticleNumber, 4, "@SYS24272");
        if (allowance.ArticleClause)
            this.fillCellsRight(_sheet, #CY, 47, allowance.ArticleClause, 4, "@SYS24272");
        if (allowance.ArticleSubClause)
            this.fillCellsRight(_sheet, #DK, 47, allowance.ArticleSubClause, 4, "@SYS24272");
    
        this.fillCellsLeft(_sheet, #BF, 50, this.roundAmountStr(getField(#TaxReductionAmount)), 15, "@GLS109332");
    
        taxPay += (this.round(getField(#TaxAmount)) -
                   this.round(getField(#TaxReductionAmount)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs initialization.
    /// </summary>
    /// <param name="_args">
    /// An <c>Args</c> object to use to initiate the <c>RAssetAdvanceAssessedTaxDeclaration</c> class instance.
    /// </param>
    public void initValue(Args _args)
    {
        #define.okatoPerPage(7)
        #define.reorgCell('X')

        super(_args);
        okatoPerPage  = #okatoPerPage;
        reorgCell     = #reorgCell;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, ''];
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected str templateName()
    {
        return resourceStr(RAssetAssessedTaxAdvancePayment2013);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer          version  = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS117044";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RAssetAdvanceAssessedTaxDeclaration taxDeclaration = new RAssetAdvanceAssessedTaxDeclaration();

        taxDeclaration.initValue(_args);

        if (taxDeclaration.prompt())
        {
            taxDeclaration.runOperation();
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>