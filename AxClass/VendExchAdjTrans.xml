<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendExchAdjTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class VendExchAdjTrans extends CustVendExchAdjTrans
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createOpenTransQuery</Name>
				<Source><![CDATA[
    protected Query createOpenTransQuery(Query _baseQuery)
    {
        container originalQuery;
        Query openTransQuery;
        QueryBuildDataSource vendTransDs;
        QueryBuildDataSource vendTransOpenDs;

        // Pack/unpack query to get a fresh instance
        originalQuery = _baseQuery.pack();
        openTransQuery = new Query(originalQuery);

        // Create a query to get open transactions based on the user-defined query

        vendTransDs = openTransQuery.dataSourceTable(tablenum(VendTrans));
        vendTransDs.addRange(fieldnum(VendTrans, TransDate)).value(queryRange(dateNull(), exchangeAdjustmentController.postingDate()));

        vendTransOpenDs = openTransQuery.dataSourceTable(tableNum(VendTrans_W)).addDataSource(tablenum(VendTransOpen));
        vendTransOpenDs.update(true);
        vendTransOpenDs.addLink(fieldnum(VendTrans, RecId), fieldnum(VendTransOpen, RefRecId), vendTransDs.name());
        vendTransOpenDs.joinMode(JoinMode::InnerJoin);
        vendTransOpenDs.relations(false);

        return openTransQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSettledTransQuery</Name>
				<Source><![CDATA[
    protected Query createSettledTransQuery(Query _baseQuery)
    {
        // Pack/unpack query to get a fresh instance
        container originalQuery = _baseQuery.pack();
        Query settledTransQuery = new Query(originalQuery);

        this.setupQueryForSettledTransaction(settledTransQuery);

        return settledTransQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReversedTransQuery</Name>
				<Source><![CDATA[
    protected Query createReversedTransQuery(Query _baseQuery)
    {
        // Pack/unpack query to get a fresh instance
        container originalQuery = _baseQuery.pack();
        Query settledTransQuery = new Query(originalQuery);

        // Create a query to get settled transactions based on the user-defined query
        QueryBuildDataSource vendTransDs = this.setupQueryForSettledTransaction(settledTransQuery, NoYes::No);

        QueryBuildDataSource subledgerVoucherGeneralJournalEntryDs = vendTransDs.addDataSource(tableNum(SubledgerVoucherGeneralJournalEntry));
        subledgerVoucherGeneralJournalEntryDs.addLink(fieldnum(VendTrans, DataAreaId), fieldnum(SubledgerVoucherGeneralJournalEntry, VoucherDataAreaId));
        subledgerVoucherGeneralJournalEntryDs.addLink(fieldnum(VendTrans, Voucher), fieldnum(SubledgerVoucherGeneralJournalEntry, Voucher));
        subledgerVoucherGeneralJournalEntryDs.joinMode(JoinMode::ExistsJoin);
        subledgerVoucherGeneralJournalEntryDs.fetchMode(QueryFetchMode::One2One);

        QueryBuildDataSource generalJournalAccountEntryDs = subledgerVoucherGeneralJournalEntryDs.addDataSource(tablenum(GeneralJournalAccountEntry));
        generalJournalAccountEntryDs.addLink(fieldnum(SubledgerVoucherGeneralJournalEntry, GeneralJournalEntry), fieldNum(GeneralJournalAccountEntry, GeneralJournalEntry));
        generalJournalAccountEntryDs.joinMode(JoinMode::ExistsJoin);
        generalJournalAccountEntryDs.fetchMode(QueryFetchMode::One2One);

        QueryBuildDataSource transactionReversalDs = generalJournalAccountEntryDs.addDataSource(tableNum(TransactionReversalTrans));
        transactionReversalDs.addLink(fieldnum(GeneralJournalAccountEntry, TableId), fieldNum(TransactionReversalTrans, RefTableId));
        transactionReversalDs.addLink(fieldnum(GeneralJournalAccountEntry, RecId), fieldNum(TransactionReversalTrans, RefRecId));
        transactionReversalDs.joinMode(JoinMode::ExistsJoin);
        transactionReversalDs.fetchMode(QueryFetchMode::One2One);

        return settledTransQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBankChequeCancelTransQuery</Name>
				<Source><![CDATA[
    protected Query createBankChequeCancelTransQuery(Query _baseQuery)
    {
        // Pack/unpack query to get a fresh instance
        container originalQuery = _baseQuery.pack();
        Query settledTransQuery = new Query(originalQuery);

        // Create a query to get settled transactions based on the user-defined query
        QueryBuildDataSource vendTransDs = this.setupQueryForSettledTransaction(settledTransQuery, NoYes::No);

        QueryBuildDataSource ledgerJournalTransDs = vendTransDs.addDataSource(tablenum(LedgerJournalTrans));
        LedgerJournalTransDs.addSelectionField(fieldNum(LedgerJournalTrans, RecId));
        ledgerJournalTransDs.addLink(fieldNum(VendTrans, RecId), fieldNum(LedgerJournalTrans, VendTransId));
        ledgerJournalTransDs.joinMode(JoinMode::InnerJoin);
        ledgerJournalTransDs.fetchMode(QueryFetchMode::One2One);

        QueryBuildDataSource chequeDs = ledgerJournalTransDs.addDataSource(tableNum(BankChequeTable));
        chequeDs.addLink(fieldNum(LedgerJournalTrans, TableId), fieldNum(BankChequeTable, SourceTableId));
        chequeDs.addLink(fieldNum(LedgerJournalTrans, RecId), fieldNum(BankChequeTable, SourceRecId));
        chequeDs.joinMode(JoinMode::ExistsJoin);
        chequeDs.fetchMode(QueryFetchMode::One2One);
        chequeDs.addRange(fieldNum(BankChequeTable, ChequeStatus)).value(queryValue(ChequeStatus::Cancelled));

        return settledTransQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupQueryForSettledTransaction</Name>
				<Source><![CDATA[
    private QueryBuildDataSource setupQueryForSettledTransaction(Query _baseQuery, NoYes _canBeReverse = NoYes::Yes)
    {
        // <GEERU>
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        // Create a query to get settled transactions based on the user-defined query
        QueryBuildDataSource vendTransDs = _baseQuery.dataSourceTable(tablenum(VendTrans));
        vendTransDs.addRange(fieldnum(VendTrans, TransDate)).value(queryRange(dateNull(), exchangeAdjustmentController.postingDate()));
        // <GEERU>
        if (countryRegion_RU)
        {
            vendTransDs.addRange(fieldnum(VendTrans, TransType)).value(queryNotValueCon_W([LedgerTransType::ExchAdjustment, LedgerTransType::AdvanceAdjustment_RU]));
        }
        // </GEERU>

        QueryBuildDataSource vendSettlementDs = _baseQuery.dataSourceTable(tablenum(VendTrans_W)).addDataSource(tablenum(VendSettlement));
        vendSettlementDs.update(true);
        vendSettlementDs.addLink(fieldnum(VendTrans, RecId), fieldnum(VendSettlement, TransRecId), vendTransDs.name());
        vendSettlementDs.joinMode(JoinMode::InnerJoin);
        vendSettlementDs.fetchMode(QueryFetchMode::One2One);
         
        // <GEERU>
        if (countryRegion_RU)
        {
            vendSettlementDs.addRange(fieldnum(VendSettlement, TransDate)).value(SysQuery::range(exchangeAdjustmentController.postingDate(), null));
            QueryBuildDataSource vendTrans_W = VendTrans_W::addToQuery(vendTransDs, JoinMode::NoExistsJoin);
            vendTrans_W.addRange(fieldnum(VendTrans_W, BankCurrencyTransferId_RU)).value(SysQuery::valueNotEmptyString());
        }
        else
        {
            // </GEERU>
            vendSettlementDs.addRange(fieldnum(VendSettlement, TransDate)).value(strfmt('> %1', queryValue(exchangeAdjustmentController.postingDate())));
            // <GEERU>
        }
        // </GEERU>
        vendSettlementDs.addRange(fieldnum(VendSettlement, SettleAmountCur)).value(SysQuery::valueNot(0));
        vendSettlementDs.addRange(fieldnum(VendSettlement, CanBeReversed)).value(queryValue(_canBeReverse));
        vendSettlementDs.addSortField(fieldnum(VendSettlement, TransDate), SortOrder::Ascending);
        vendSettlementDs.relations(false);

        return vendTransDs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendExchRateAdjustment</Name>
				<Source><![CDATA[
    void custVendExchRateAdjustment()
    {
        VendExchRateAdjustment  vendExchRateAdjustment;

        vendExchRateAdjustment.ExecutedDate     = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        vendExchRateAdjustment.ExchPrinciple    = exchangeAdjustmentController.exchPrinciples();
        vendExchRateAdjustment.ConsideredDate   = exchangeAdjustmentController.postingDate();
        vendExchRateAdjustment.DateOfRate       = exchangeAdjustmentController.exchRateDate();
        vendExchRateAdjustment.UseProfile       = exchangeAdjustmentController.postingSpec();
        vendExchRateAdjustment.PostingProfile   = exchangeAdjustmentController.postingProfile();
        vendExchRateAdjustment.Dimensions       = exchangeAdjustmentController.dimSpec();
        vendExchRateAdjustment.Notes            = exchangeAdjustmentController.notes();

        if (FeatureStateProvider::isFeatureEnabled(CustVendExchAdjTopPickingFeature::instance()))
        {
            vendExchRateAdjustment.Hidden = exchangeAdjustmentController.parmHidden();
            vendExchRateAdjustment.ExecutionId = exchangeAdjustmentController.parmExecutionId();
        }

        vendExchRateAdjustment.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTable_W</Name>
				<Source><![CDATA[
    protected CustVendTable custVendTable_W()
    {
        return new DictTable(tablenum(VendTable)).makeRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerTransactionText</Name>
				<Source><![CDATA[
    protected LedgerTransTxt getLedgerTransactionText()
    {
        return LedgerTransTxt::VendExchAdjLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModule</Name>
				<Source><![CDATA[
    protected ModuleCustVend getModule()
    {
        return ModuleCustVend::Vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModule_W</Name>
				<Source><![CDATA[
    protected SysModule getModule_W()
    {
        return SysModule::Vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberSequence</Name>
				<Source><![CDATA[
    protected NumberSequenceReference getNumberSequence()
    {
        return VendParameters::numRefVendExchAdjVoucher();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogTxt</Name>
				<Source><![CDATA[
    public TransTxt transactionLogTxt()
    {
        return "@SYS26734";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogType</Name>
				<Source><![CDATA[
    public TransactionLogType transactionLogType()
    {
        return TransactionLogType::VendExchAdj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryRun_W</Name>
				<Source><![CDATA[
    protected QueryRun updateQueryRun_W(QueryRun _queryRun)
    {
        QueryRun             queryRun;
        QueryBuildDataSource qbds;
        QueryBuildRange      qbr;

        str transTypeValue = 
            '((\%1.'     + fieldstr(VendTrans, TransType)                    +
            '!='         + int2str(LedgerTransType::Settlement)              +
            ') && (\%1.' + fieldstr(VendTrans, TransType)                    +
            '!='         + int2str(LedgerTransType::AdvanceAdjustment_RU)    +
            ') && (\%1.' + fieldstr(VendTrans, TransType)                    +
             '!='         + int2str(LedgerTransType::ExchAdjustment)         +
            ') && (\%1.' + fieldStr(VendTrans, TransType)                    +
            '!='         + int2str(LedgerTransType::GainLossCurrencyDeal_RU) + '))';

        queryRun = super(_queryRun);

        qbds = queryRun.query().dataSourceTable(tablenum(VendTrans));
        qbr  = findOrCreateRange_W(qbds, fieldnum(VendTrans, TransType), strfmt(transTypeValue, qbds.name()));
        qbr.status(RangeStatus::Hidden);

        qbds = queryRun.query().dataSourceTable(tablenum(VendTrans));
        qbr  = findOrCreateRange_W(qbds, fieldnum(VendTrans, TransDate), queryRange(dateNull(), exchangeAdjustmentController.postingDate()));
        qbr.status(RangeStatus::Hidden);

        return queryRun;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>