<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuantity</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract public class SalesQuantity
{
    // Added for Italian packing slip date feature
    TransDate   transDate;
    // <GIN><GEERU>
    #ISOCountryRegionCodes
    // </GEERU></GIN>

    // <GEERU>
    InventDim       inventDimCriteria;
    InventDimParm   inventDimParm;
    NoYes           proforma;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcInventQty</Name>
				<Source><![CDATA[
    public InventQty calcInventQty(Common         _salesLine,
                                   SalesUpdate    _specQty             = SalesUpdate::All)
    {
        return conpeek(this.calcQtyInvent(_salesLine, _specQty, naReal(), false, false),1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyInvent</Name>
				<Source><![CDATA[
    abstract protected container calcQtyInvent(
        Common        _common,
        SalesUpdate   _specQty             = SalesUpdate::All,
        InventQty     _qty                 = naReal(),
        boolean       _creditRemaining     = false,
        boolean        _calcRemaining       = true,
        PackingSlipIdForUpdate_W _packingSlips   = "")
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtySales</Name>
				<Source><![CDATA[
    abstract protected container calcQtySales(
        Common         _common,
        SalesUpdate    _specQty             = SalesUpdate::All,
        SalesQty       _qty                 = naReal(),
        boolean        _creditRemaining     = false,
        boolean        _calcRemaining       = true,
        PackingSlipIdForUpdate_W _packingSlips   = "")
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSalesQty</Name>
				<Source><![CDATA[
    public SalesQty calcSalesQty(Common          _common,
                                 SalesUpdate     _specQty             = SalesUpdate::All)
    {
        return conpeek(this.calcQtySales(_common, _specQty, naReal(), false, false),1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]))
        {
            this.parmTransDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimCriteria_RU</Name>
				<Source><![CDATA[
    public InventDim parmInventDimCriteria_RU(InventDim _inventDimCriteria = inventDimCriteria)
    {
        inventDimCriteria = _inventDimCriteria;
        return inventDimCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimParm_RU</Name>
				<Source><![CDATA[
    public InventDimParm parmInventDimParm_RU(InventDimParm _inventDimParm = inventDimParm)
    {
        inventDimParm = _inventDimParm;
        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProforma</Name>
				<Source><![CDATA[
    public NoYes parmProforma(NoYes _proforma = proforma)
    {
        proforma = _proforma;
        return proforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCalcInventQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the catch weight quantity when posting.
    /// </summary>
    /// <param name="_common">
    ///     The transaction record.
    /// </param>
    /// <param name="_specQty">
    ///     The qty spec to process.
    /// </param>
    /// <returns>
    ///     The calculated catch weight quantity.
    /// </returns>
    public PdsCWInventQty pdsCWCalcInventQty(
        Common          _common,
        SalesUpdate     _specQty             = SalesUpdate::All)
    {
        return conpeek(this.pdsCWCalcQtyInvent(
                            _common,
                            _specQty,
                            naReal(),
                            false,
                            false),
                        1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCalcQtyInvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates catch weight quantity when posting.
    /// </summary>
    /// <param name="_common">
    ///     The transaction record.
    /// </param>
    /// <param name="_specQty">
    ///     The quantity spec to process.
    /// </param>
    /// <param name="_qty">
    ///     The catch weight quantity.
    /// </param>
    /// <param name="_creditRemaining">
    ///     A Boolean value indicating if the remaining quantity is to be credited.
    /// </param>
    /// <param name="_calcRemaining">
    ///     A Boolean value indicating whether the remaining quantities should be calculated.
    /// </param>
    /// <returns>
    ///     The container with catch weight quantities. The container will have the quantities in the following order:
    ///     qty, remainBefore, remainAfter.
    /// </returns>
    abstract protected container pdsCWCalcQtyInvent(
        Common         _common,
        SalesUpdate    _specQty             = SalesUpdate::All,
        PdsCWInventQty _qty                 = naReal(),
        boolean        _creditRemaining     = false,
        boolean        _calcRemaining       = true)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyInvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates catch weight quantity when posting.
    /// </summary>
    /// <param name="_common">
    ///     The transaction record.
    /// </param>
    /// <param name="_specQty">
    ///     The quantity spec to process.
    /// </param>
    /// <param name="_qty">
    ///     The catch weight quantity.
    /// </param>
    /// <param name="_creditRemaining">
    ///     A Boolean value indicating if the remaining quantity is to be credited.
    /// </param>
    /// <returns>
    ///     The container with catch weight quantities. The container will have the quantities in the following order:
    ///     qty, remainBefore, remainAfter.
    /// </returns>
    public container pdsCWQtyInvent(
        Common          _common,
        SalesUpdate     _specQty             = SalesUpdate::All,
        PdsCWInventQty  _qty                 = naReal(),
        boolean         _creditRemaining     = false)
    {
        return this.pdsCWCalcQtyInvent(_common, _specQty, _qty, _creditRemaining);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the remaining quantity in catch weight units.
    /// </summary>
    /// <param name="_salesLine">
    ///    The order line for which to calculate the remaining quantity.
    /// </param>
    /// <param name="_salesParmLine">
    ///    The parm order line for which to calculate the remaining quantity.
    /// </param>
    /// <returns>
    ///    The remaining quantity in catch weight units.
    /// </returns>
    public PdsCWInventQty pdsCWQtyRemainPhysical(SalesLine _salesLine, SalesParmLine _salesParmLine)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyInvent</Name>
				<Source><![CDATA[
    public container qtyInvent(Common         _common,
                               SalesUpdate    _specQty             = SalesUpdate::All,
                               InventQty      _qty                 = naReal(),
                               boolean         _creditRemaining     = false
                               ,PackingSlipIdForUpdate_W _packingSplips  = ''
                               )
    {
        return this.calcQtyInvent(_common, _specQty, _qty, _creditRemaining
                                                            // <GEEU>
                                                            ,true // default for 'calcRemaining'
                                                            ,_packingSplips
                                                            // </GEEU>
                                                            );
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyRemainInventPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the remaining quantity in inventory units.
    /// </summary>
    /// <param name="_salesLine">
    ///    The order line for which to calculate the remaining quantity.
    /// </param>
    /// <param name="_salesParmLine">
    ///    The parm order line for which to calculate the remaining quantity.
    /// </param>
    /// <returns>
    ///    The remaining quantity in inventory units.
    /// </returns>
    public InventQty qtyRemainInventPhysical(SalesLine _salesLine, SalesParmLine _salesParmLine)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyRemainSalesPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the remaining quantity in sales units.
    /// </summary>
    /// <param name="_salesLine">
    ///    The order line for which to calculate the remaining quantity.
    /// </param>
    /// <param name="_salesParmLine">
    ///    The parm order line for which to calculate the remaining quantity.
    /// </param>
    /// <returns>
    ///    The remaining quantity in sales units.
    /// </returns>
    public SalesQty qtyRemainSalesPhysical(SalesLine _salesLine, SalesParmLine _salesParmLine)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtySales</Name>
				<Source><![CDATA[
    public container qtySales(Common          _common,
                              SalesUpdate     _specQty             = SalesUpdate::All,
                              SalesQty        _qty                 = naReal(),
                              boolean         _creditRemaining     = false
                              , PackingSlipIdForUpdate_W _packingSplips  = ''
                              )
    {
        return this.calcQtySales(_common, _specQty, _qty, _creditRemaining
                                                                // <GEEU>
                                                                , true // default for 'calcRemaining'
                                                                , _packingSplips
                                                                // </GEEU>
                                                                );
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static SalesQuantity construct(DocumentStatus _documentStatus)
    {
        if (BrazilParameters::isEnabled()
            && (_documentStatus == DocumentStatus::DeliverySlip_BR || _documentStatus == DocumentStatus::DeliverySlipProject_BR))
        {
            return new SalesQuantity_PackingSlip();
        }            

        DocumentStatusFactoryAttribute attribute = new DocumentStatusFactoryAttribute(_documentStatus);
        SalesQuantity instance = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(SalesQuantity), attribute) as SalesQuantity;

        if (!instance)
        {
            throw error(strfmt("@SYS19306",funcname()));
        }

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrPositionRemainAfter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the container position of the remain after quantity.
    /// </summary>
    /// <returns>
    /// The container position of the remain after quantity.
    /// </returns>
    public static int mcrPositionRemainAfter()
    {
        return 3;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrPositionRemainBefore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the container position of the remain before quantity.
    /// </summary>
    /// <returns>
    /// The container position of the remain before quantity.
    /// </returns>
    public static int mcrPositionRemainBefore()
    {
        return 2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrPositionUpdateNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the container position of the update now quantity.
    /// </summary>
    /// <returns>
    /// The container position of the update now quantity.
    /// </returns>
    public static int mcrPositionUpdateNow()
    {
        return 1;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>