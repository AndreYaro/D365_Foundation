<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdCalcTransVarianceDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProdCalcTransVarianceDP</c> class is the Report Data Provider class for the
///    <c>ProdCalcTransVariance</c> report.
/// </summary>
[SRSReportParameterAttribute(classStr(ProdCalcTransVarianceContract))]
class ProdCalcTransVarianceDP extends SRSReportDataProviderBase
{
    TmpProdStandardVariance tmpProdStandardVariance;
    ProdStandardVariance    prodStandardVariance;
    ProdReportedGood        realizedQuantity;
    InventQty               lotSize;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getItemPrice</Name>
				<Source><![CDATA[
    private InventItemPrice getItemPrice(ProdTable prodTable)
    {
        InventItemPrice inventItemPrice;
        InventCostTrans inventCostTrans;

        select firstonly TableId from inventCostTrans
            where inventCostTrans.InventTransId     == prodTable.InventTransId
                && inventCostTrans.CostTransType     == InventCostTransType::Receipt
                && inventCostTrans.CostTransState    == InventCostTransState::Financial
                && inventCostTrans.CostTransRefType  == InventCostTransRefType::Production
        join inventItemPrice
            where inventItemPrice.RecId == inventCostTrans.ItemPriceRefRecId;

        return inventItemPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpProdStandardVariance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves data from the <c>TmpProdStandardVariance</c> table.
    /// </summary>
    /// <returns>
    /// Data from the <c>TmpProdStandardVariance</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(TmpProdStandardVariance))]
    public TmpProdStandardVariance getTmpProdStandardVariance()
    {
        select tmpProdStandardVariance
            order by CalcType asc, CostGroupId asc
            where tmpProdStandardVariance.InventCostLevel <= InventCostLevel::Single;

        return tmpProdStandardVariance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalVariance</Name>
				<Source><![CDATA[
    private CostAmount getTotalVariance()
    {
        TmpProdStandardVariance totalStandardVariance;
        totalStandardVariance.setTmpData(tmpProdStandardVariance);
        select firstonly totalStandardVariance
            where totalStandardVariance.CalcType == ItemCalcType::Production;

        return totalStandardVariance.totalVariance();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProdStandardVariance _prodStandardVariance = ProdStandardVariance::construct(ProdTransRefType::Production))
    {
        super();
        prodStandardVariance = _prodStandardVariance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the required data for the report.
    /// </summary>
    public void processReport()
    {
        ProdCalcTransVarianceContract contract = this.parmDataContract() as ProdCalcTransVarianceContract;
        ProdId              prodId = contract.parmProdId();
        ProdTransRefType    transRefType = contract.parmTransRefType();

        switch (transRefType)
        {
            case ProdTransRefType::Production:
                this.calculateProductionVariance(prodId);
                break;
            case ProdTransRefType::BackflushCosting:
                this.calculateBackflushCostingVariance(prodId);
                break;
            default:
                this.calculateProductionVariance(prodId);
                break;
        }

        tmpProdStandardVariance.setTmpData(prodStandardVariance.parmTmpProdStandardVariance());

        CostAmount totalVariance = this.getTotalVariance();

        while select tmpProdStandardVariance
        {
            tmpProdStandardVariance.LotSize = lotSize;
            tmpProdStandardVariance.TotalVarianceValue = totalVariance;
            tmpProdStandardVariance.ReportedGood = realizedQuantity;
            tmpProdStandardVariance.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateProductionVariance</Name>
				<Source><![CDATA[
    private void calculateProductionVariance(ProdId _prodId)
    {
        ProdTable prodTable = ProdTable::find(_prodId);

        realizedQuantity = prodTable.reportedFinishedGood();
        lotSize = this.getLotSizeForProduction(prodTable);
        prodStandardVariance.calc(prodTable.ProdId,
                                  ProdTransRefType::Production,
                                  prodTable.CollectRefLevel,
                                  prodTable.CollectRefProdId,
                                  prodTable.RealDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBackflushCostingVariance</Name>
				<Source><![CDATA[
    private void calculateBackflushCostingVariance(ProdId _prodId)
    {
        realizedQuantity = 1;
        lotSize = 1;

        prodStandardVariance = ProdStandardVariance::construct(ProdTransRefType::ProductionFlow);
        LeanProductionFlowCosting backflushCosting = LeanProductionFlowCosting::find(str2Int64(_prodId));
        prodStandardVariance.calc(backflushCosting.TransRefId,
                                  ProdTransRefType::BackflushCosting,
                                  InventCostLevel::Total,
                                  backflushCosting.TransRefId,
                                  backflushCosting.LeanCosting().ToDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLotSizeForProduction</Name>
				<Source><![CDATA[
    private InventQty getLotSizeForProduction(ProdTable _prodTable)
    {
        var inventItemPrice = this.getItemPrice(_prodTable);
        if (inventItemPrice.PriceCalcId)
        {
            return BOMCalcTable::find(inventItemPrice.PriceCalcId).Qty;
        }
        else
        {
            return inventItemPrice.PriceUnit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
