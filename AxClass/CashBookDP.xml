<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashBookDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CashBookDP</c> class is the base class for providing data for the <c>CashBook_LV</c> and
/// <c>CashBook_LT</c> SSRS reports.
/// </summary>
[
    SRSReportQueryAttribute(querystr(CashTrans)),
    SRSReportParameterAttribute(classstr(CashBookContract))
]
public class CashBookDP extends SRSReportDataProviderBase
{
    RCashTrans          cashTrans;
    CashBookLinesTmp    cashBookLinesTmp;
    CashBookHeaderTmp   cashBookHeaderTmp;
    CashBookContract    contract;
    int debitRowsCount = 0;
    int creditRowsCount = 0;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyQueryFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies filters to the query before it is used to retrieve data.
    /// </summary>
    /// <param name="_queryRun">
    /// The <c>queryRun</c> object.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void applyQueryFilters(QueryRun _queryRun)
    {
        QueryBuildDataSource    qbds = _queryRun.query().dataSourceTable(tablenum(RCashTrans));

        findOrCreateRange_W(qbds, fieldnum(RCashTrans, AccountNum), contract.parmCashAccount());
        findOrCreateRange_W(qbds, fieldnum(RCashTrans, TransDate), SysQuery::range(contract.parmFromDate(), contract.parmToDate()));
        findOrCreateRange_W(qbds, fieldnum(RCashTrans, DocType),queryRangeConcat(queryValue(RCashDocType::DisbursementSlip), RCashDocType::ReimbursementSlip));
        findOrCreateRange_W(qbds, fieldnum(RCashTrans, TransStatus), queryValue(enum2int(RCashTransStatus::Approved)));
        findOrCreateRange_W(qbds, fieldnum(RCashTrans, CurrencyCode), queryValue(contract.parmCurrencyCode()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the temporary line transaction for cash book report.
    /// </summary>
    /// <param name="_queryRun">
    ///     The queryRun object.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createTmpTransactions(QueryRun _queryRun)
    {
        while (_queryRun.next())
        {
            cashTrans = _queryRun.get(tableNum(RCashTrans));
            this.insertIntoCashBookLinesTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashBookHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CashBookHeaderTmp</c> table buffer.
    /// </summary>
    /// <returns>
    /// The <c>CashBookHeaderTmp</c> table buffer.
    /// </returns>
    [
        SrsReportDataSetAttribute(tablestr(CashBookHeaderTmp))
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CashBookHeaderTmp getCashBookHeaderTmp()
    {
        select cashBookHeaderTmp;
        return cashBookHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashBookLinesTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CashBookLinesTmp</c> table buffer.
    /// </summary>
    /// <returns>
    /// The <c>CashBookLinesTmp</c> table buffer
    /// </returns>
    [
        SrsReportDataSetAttribute(tablestr(CashBookLinesTmp))
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CashBookLinesTmp getCashBookLinesTmp()
    {
        select cashBookLinesTmp;
        return cashBookLinesTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction text that is based on offset account.
    /// </summary>
    /// <returns>
    /// The transaction text.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TransTxt getTransTxt()
    {
        LedgerJournalTrans  journalTrans;
        TransTxt            transTxt;

        switch (cashTrans.OffsetAccountType)
        {
            case LedgerJournalACType::Ledger:
                transTxt = journalTrans.accountNameFind(cashTrans.OffsetAccountType, cashTrans.OffsetLedgerDimension, curext());
                break;

            default:
                transTxt = cashTrans.type().represPersonName();
                break;
        }

        return transTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCashBookHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the <c>CashBookHeaderTmp</c> table buffer.
    /// </summary>
    /// <returns>
    ///     The <c>CashBookHeaderTmp</c> table buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected CashBookHeaderTmp initializeCashBookHeaderTmp()
    {
        AccountNum      accountNum  = contract.parmCashAccount();
        CurrencyCode    reportCurrency = contract.parmCurrencyCode();
        TransDate       beginningBalanceDate = contract.parmFromDate() - 1;

        cashBookHeaderTmp.CoRegNum            = CompanyInfo::find().CoRegNum;
        cashBookHeaderTmp.CashAccountName     = strfmt("@SYS76498", accountNum, RCashTable::find(accountNum).Name);
        cashBookHeaderTmp.BeginningBalanceCur = RCashBalanceTrans::amountRestCur(accountNum, dateNull(), beginningBalanceDate, reportCurrency);
        cashBookHeaderTmp.BeginningBalanceMST = RCashBalanceTrans::amountRestMst(accountNum, dateNull(), beginningBalanceDate, true, reportCurrency);

        RNumDateInWordConverter numInWordConverter = RNumDateInWordConverter::construct(currentUserLanguage());
        cashBookHeaderTmp.debitTransQtyText = numInWordConverter.numeralsToTxt(debitRowsCount);
        cashBookHeaderTmp.creditTransQtyText = numInWordConverter.numeralsToTxt(creditRowsCount);

        return cashBookHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCashBookLinesTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the <c>CashBookLinesTmp</c> table buffer.
    /// </summary>
    /// <returns>
    ///     The <c>CashBookLinesTmp</c> table buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected CashBookLinesTmp initializeCashBookLinesTmp()
    {
        cashBookLinesTmp.Voucher                = cashTrans.Voucher;
        cashBookLinesTmp.AmountCur              = cashTrans.AmountCur;
        cashBookLinesTmp.AmountMST              = cashTrans.AmountMST;
        cashBookLinesTmp.AmountCurDebit         = cashTrans.AmountCur > 0 ? cashTrans.AmountCur : 0;
        cashBookLinesTmp.AmountCurCredit        = cashTrans.AmountCur < 0 ? abs(cashTrans.AmountCur) : 0;
        cashBookLinesTmp.AmountMSTDebit         = cashTrans.AmountMST > 0 ? cashTrans.AmountMST : 0;
        cashBookLinesTmp.AmountMSTCredit        = cashTrans.AmountMST < 0 ? abs(cashTrans.AmountMST) : 0;
        cashBookLinesTmp.CurrencyCode           = cashTrans.CurrencyCode;
        cashBookLinesTmp.Txt                    = this.getTransTxt();
        cashBookLinesTmp.DocId                  = cashTrans.DocId;
        cashBookLinesTmp.TransDate              = cashTrans.TransDate;
        cashBookLinesTmp.GroupingDate           = contract.parmNewDayOnNewPage() ? cashTrans.TransDate : contract.parmFromDate();
        cashBookLinesTmp.ExchRate               = cashTrans.CurrencyCode == CompanyInfoHelper::standardCurrency() ? 0 : cashTrans.AmountMST / cashTrans.AmountCur;
        cashBookLinesTmp.OffsetMainAccountId    = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(cashTrans.OffsetLedgerDimension);
        
		if(cashTrans.AmountCur > 0)
        {
            debitRowsCount++;
		}
		else if(cashTrans.AmountCur < 0)
        {
            creditRowsCount++;
		}
		
		return cashBookLinesTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoCashBookHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record into <c>CashBookHeaderTmp</c> table.
    /// </summary>
    /// <returns>
    /// The inserted <c>CashBookHeaderTmp</c> table buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected CashBookHeaderTmp insertIntoCashBookHeaderTmp()
    {
        cashBookHeaderTmp = this.initializeCashBookHeaderTmp();
        cashBookHeaderTmp.insert();

        return cashBookHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoCashBookLinesTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record into <c>CashBookLinesTmp</c> table.
    /// </summary>
    /// <returns>
    /// The inserted <c>CashBookLinesTmp</c> table buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected CashBookLinesTmp insertIntoCashBookLinesTmp()
    {
        cashBookLinesTmp = this.initializeCashBookLinesTmp();
        cashBookLinesTmp.insert();

        return cashBookLinesTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by SSRS at
    /// runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    /// Customizing this class may cause problems with future upgrades to the software.
    /// </remarks>
    public void processReport()
    {
        QueryRun queryRun = new queryRun(this.parmQuery());
        contract = this.parmDataContract() as CashBookContract;

        this.applyQueryFilters(queryRun);
        ttsBegin;
        this.createTmpTransactions(queryRun);
        this.insertIntoCashBookHeaderTmp();
        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
