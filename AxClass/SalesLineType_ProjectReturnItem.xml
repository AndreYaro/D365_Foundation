<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesLineType_ProjectReturnItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SalesLineTypeFactoryAttribute(SalesType::ReturnItem, NoYes::Yes)]
class SalesLineType_ProjectReturnItem extends SalesLineType_Project
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canAgreementBeLinked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the sales line can be linked to an agreement line.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean canAgreementBeLinked()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditNoteLine</Name>
				<Source><![CDATA[
    boolean creditNoteLine()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustInvoiceTrans</Name>
				<Source><![CDATA[
    void  initFromCustInvoiceTrans(CustInvoiceTrans custInvoiceTrans,
                                   boolean          copyPrecisely,
                                   boolean          copyPriceDisc,
                                   boolean          copyQty,
                                   Qty              qty,
                                   PdsCWInventQty   _pdsCWQty = 0
                                   )
    {
        super(custInvoiceTrans, copyPrecisely, copyPriceDisc, copyQty, qty, _pdsCWQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the sales line with the specified <c>InventTable</c> record.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> record on which to base the sales line.
    /// </param>
    /// <param name="_resetPrice">
    /// A Boolean value that specifies whether to reset the price; optional.
    /// </param>
    /// <param name="_matchingAgreement">
    /// The record ID of the agreement header that is associated with the sales order. Used for the
    /// automatic association with an agreement line.
    /// </param>
    /// <param name="_performVariantValidation">
    /// A Boolean value that indicates whether product variant validation should be performed and pass before executing variant specific defaulting; optional.
    /// </param>
    void initFromInventTable(InventTable _inventTable, boolean _resetPrice = true, AgreementHeaderRecId _matchingAgreement = 0, boolean _performVariantValidation = false)
    {
        super(_inventTable, _resetPrice, _matchingAgreement, _performVariantValidation);

        if (salesLine.SalesQty > 0)
        {
            salesLine.SalesQty      = 0;
            salesLine.QtyOrdered    = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesQty</Name>
				<Source><![CDATA[
    void  initSalesQty()
    {
        salesLine.QtyOrdered = salesLine.calcQtyOrdered();
        salesLine.configIdChanged();
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanySyncEngine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the line-level synchronization engine for intercompany trade.
    /// </summary>
    /// <returns>A new instance of <c>InterCompanySyncSalesLineType</c> or one of its subclasses.</returns>
    public InterCompanySyncSalesLineType interCompanySyncEngine()
    {
        return InterCompanySyncSalesLineType_ReturnItem::newFromSalesLineType(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyValidateDeleteQty</Name>
				<Source><![CDATA[
    protected boolean interCompanyValidateDeleteQty(PurchLine _purchLine)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventDirection</Name>
				<Source><![CDATA[
    public InventDirection defaultInventDirection()
    {
        return InventDirection::Receipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSalesQtyBeNegative</Name>
				<Source><![CDATA[
    boolean mustSalesQtyBeNegative()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean  validateWrite(boolean _skipCreditLimitCheck = false)
    {
        boolean  ok = true;

        ok = super(_skipCreditLimitCheck);

        if (salesLine.SalesQty > 0
            &&  salesLine.SkipUpdate == InterCompanySkipUpdate::No)
        {
            ok = checkFailed("@SYS53512");
        }

        return ok;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>