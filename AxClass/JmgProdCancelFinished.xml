<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgProdCancelFinished</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgProdCancelFinished</c> class is used to set job status to started for a production job,
///    which were previously reported as finished.
/// </summary>
class JmgProdCancelFinished extends RunBase
{
    JmgJobId        jobId;
    DialogField     dfJobId;
    ProdJobStatus   jobStatus = ProdJobStatus::Started;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        jobId,
        jobStatus
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <param name="dialog">
    /// An already initialized instance of the <c>DialogRunBase</c> class; optional.
    /// </param>
    /// <param name="forceOnClient">
    /// A Boolean value that specifies whether the dialog must be created on the client; optional.
    /// </param>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog(DialogRunbase dialog = null, boolean forceOnClient = false)
    {
        FormBuildStringControl jobControl;
        Dialog                 ret;

        ret = this.dialogInternal(dialog, forceOnClient);

        ret.caption("@SCM:RevertCompletedStatusForJob");

        if (!jobId)
        {
            dfJobId = ret.addField(extendedtypestr(JmgJobId_Prod));

            jobControl = dfJobId.control();
            jobControl.registerOverrideMethod(identifierstr(Lookup), methodstr(JmgProdCancelFinished, jobLookup), this);
        }
        else
        {
            ret.addText(strfmt("@SYS39906", jobId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates values entered by the user.
    /// </summary>
    /// <returns>
    ///    true if the values are validated successfully; otherwise, false.
    /// </returns>
    public boolean getFromDialog()
    {
        if (!jobId)
        {
            jobId = dfJobId.value();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    protected void initFromArgs(Args _args)
    {
        Common                  buffer;
        JmgJobTable             jmgJobTable;
        JmgTmpJobStatus         jmgTmpJobStatus;
        ProdRouteJob            prodRouteJob;

        this.getLast();

        if (_args && _args.record())
        {
            buffer = _args.record();

            switch (buffer.TableId)
            {
                case tableNum(JmgJobTable):
                    jmgJobTable = _args.record();
                    this.parmJobId(jmgJobTable.JobId);
                break;

                case tableNum(JmgTmpJobStatus):
                    jmgTmpJobStatus = _args.record();
                    this.parmJobId(jmgTmpJobStatus.JobId);
                break;

                case tableNum(ProdRouteJob):
                    prodRouteJob = _args.record();
                    this.parmJobId(prodRouteJob.JobId);
                break;

                default:    this.parmJobId("");
            }
        }
        else
        {
            this.parmJobId("");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>jobLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows a shop floor control job lookup form for the specified <c>FormGroupControl</c> object.
    /// </summary>
    /// <param name="_jobControl">
    /// The <c>FormGroupControl</c> object for which the lookup form is shown.
    /// </param>
    /// <remarks>
    /// This method overrides the lookup method on the <c>FormGroupControl</c> class, which is added to the
    /// dialog in the dialog method.
    /// </remarks>
    private void jobLookup(FormControl _jobControl)
    {
        Query           query = new Query();
        SysTableLookup  lookup = SysTableLookup::newParameters(tableNum(JmgJobTable), _jobControl, true);

        query.addDataSource(tableNum(JmgJobTable)).addRange(fieldNum(JmgJobTable, ReportedFinished)).value(queryValue(NoYes::Yes));

        lookup.parmQuery(query);

        lookup.addLookupfield(fieldNum(JmgJobTable, jobId));
        lookup.addLookupfield(fieldNum(JmgJobTable, Description));
        lookup.addLookupfield(fieldNum(JmgJobTable, Type));
        lookup.addLookupfield(fieldNum(JmgJobTable, WrkCtrId));
        lookup.addLookupfield(fieldNum(JmgJobTable, ModuleRefId));
        lookup.addLookupfield(fieldNum(JmgJobTable, ItemId));

        lookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container ret = [#CurrentVersion, #CurrentList];
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJobStatus</Name>
				<Source><![CDATA[
    public ProdJobStatus parmJobStatus(ProdJobStatus _jobStatus = jobStatus)
    {
        jobStatus = _jobStatus;

        return jobStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJobId</Name>
				<Source><![CDATA[
    public JmgJobId parmJobId(JmgJobId _jobId = jobId)
    {
        jobId = _jobId;

        return jobId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetProductionRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates operating finished status for the current <c>ProdRoute</c> record to indicate active
    /// operation.
    /// </summary>
    /// <param name="_prodRoute">
    /// A specified <c>ProdRoute</c> buffer.
    /// </param>
    protected void resetProductionRoute(ProdRoute _prodRoute)
    {
        if (_prodRoute.OprFinished)
        {
            _prodRoute.OprFinished = NoYes::No;
            _prodRoute.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetProductionRouteJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates job status to Started for the current <c>ProdRouteJob</c> record.
    /// </summary>
    /// <param name="_prodRouteJob">
    /// A specified <c>ProdRouteJob</c> buffer.
    /// </param>
    protected void resetProductionRouteJob(ProdRouteJob _prodRouteJob)
    {
        _prodRouteJob.JobStatus  = jobStatus;
        _prodRouteJob.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetProductionStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the production order status to started.
    /// </summary>
    /// <param name="_prodTable">
    /// A specified <c>ProdTable</c> buffer.
    /// </param>
    /// <param name="prodMultiStatusDecrease">
    /// An instance of the <c>JmgProdMultiStatusDecrease</c> class.
    /// </param>
    protected void resetProductionStatus(ProdTable _prodTable, JmgProdMultiStatusDecrease prodMultiStatusDecrease = new JmgProdMultiStatusDecrease())
    {
        ProdParmStatusDecrease      prodParmStatusDecrease;
        ParmBuffer                  parmBuffer;

        parmBuffer = prodMultiStatusDecrease.defaultParmBuffer();

        prodMultiStatusDecrease.initParmSFC();
        prodMultiStatusDecrease.insert(_prodTable, parmBuffer);

        prodParmStatusDecrease = parmBuffer;
        prodParmStatusDecrease.WantedStatus = ProdStatus::StartedUp;

        prodMultiStatusDecrease.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>revertCompletedStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverts the current complete job to the stopped state.
    /// </summary>
    public void revertCompletedStatus()
    {
        ProdRouteJob        prodRouteJob;
        ProdRoute           prodRoute;
        ProdTable           prodTable;
        JmgTermJob_Prod     prodJob;

        this.validateJobId();

        ttsbegin;

        prodJob = JmgTermJob::construct(jobId, true);

        if (prodJob.sourceData().TableId == tablenum(ProdRouteJob))
        {
            prodRouteJob = prodJob.sourceData();
        }

        prodRoute   = prodJob.prodRoute();
        prodTable   = prodRoute.prodTable();

        if (prodTable.status().isAfter(ProdStatus::ReportedFinished))
        {
            throw error(strfmt("@SYS22216", prodTable.ProdStatus));
        }

        this.updateJmgTermReg(jobId);

        this.updateJmgStampJournalTrans(jobId);

        this.updateJmgStampTrans(jobId);

        this.updateReportedFinished(jobId);

        this.resetProductionRoute(prodRoute);

        if (prodTable.ProdStatus == ProdStatus::ReportedFinished)
        {
            this.resetProductionStatus(prodTable);
        }
        if (prodRouteJob && prodRouteJob.JobStatus == ProdJobStatus::Completed)
        {
            this.resetProductionRouteJob(prodRouteJob);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean ret;
        Integer version = conpeek(packedClass, 1);
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                ret = true;
                break;
            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJmgStampJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the job finished field on the <c>JmgStampJournalTrans</c> transaction line to indicate the active job.
    /// </summary>
    /// <param name="_jobId">
    ///  A specified <c>JmgJobId</c> value.
    /// </param>
    protected void updateJmgStampJournalTrans(JmgJobId _jobId)
    {
        JmgStampJournalTrans  jmgStampJournalTrans;
        JmgStampJournalTrans  prevJmgStampJournalTrans;

        jmgStampJournalTrans.skipDataMethods(true);

        select firstonly RecId from prevJmgStampJournalTrans
            where prevJmgStampJournalTrans.JobId == _jobId
            &&  prevJmgStampJournalTrans.JobFinished == NoYes::Yes;

        update_recordset jmgStampJournalTrans
        setting JobFinished = NoYes::No
        where jmgStampJournalTrans.RecId == prevJmgStampJournalTrans.RecId;

        // Reset original transaction
        update_recordset jmgStampJournalTrans
        setting OriginalTransaction = buf2Con(jmgStampJournalTrans)
        where jmgStampJournalTrans.RecId == prevJmgStampJournalTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJmgStampTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the job finished field on the <c>JmgStampTrans</c> transaction line to indicate the active job.
    /// </summary>
    /// <param name="_jobId">
    ///  A specified <c>JmgJobId</c> value.
    /// </param>
    protected void updateJmgStampTrans(JmgJobId _jobId)
    {
        JmgStampTrans   jmgStampTrans;

        jmgStampTrans.skipDataMethods(true);

        update_recordset jmgStampTrans
        setting JobFinished = NoYes::No
        where   jmgStampTrans.JobId == _jobId
            &&  jmgStampTrans.JobFinished == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJmgTermReg</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the finished code on the <c>JmgTermReg</c> transaction line to indicate the status change
    /// from Complete to the Stopped status for the current job.
    /// </summary>
    /// <param name="_jobId">
    /// A specified <c>JmgJobId</c> value.
    /// </param>
    protected void updateJmgTermReg(JmgJobId _jobId)
    {
        JmgTermReg  jmgTermReg;

        jmgTermReg.skipDataMethods(true);

        update_recordset jmgTermReg
        setting FinishedCode = 1
        where   jmgTermReg.JobId == _jobId
            &&  jmgTermReg.FinishedCode == 2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReportedFinished</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the reported finished field on the <c>JmgJobTable</c> table to indicate an active job.
    /// </summary>
    /// <param name="_jobId">
    /// A specified <c>JmgJobId</c> value.
    /// </param>
    protected void updateReportedFinished(JmgJobId _jobId)
    {
        JmgJobTable::updateReportedFinished(_jobId, NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJobId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the current job can be processed.
    /// </summary>
    public void validateJobId()
    {
        JmgTermJob job = JmgTermJob::construct(this.parmJobId());

        if (!job.isValidJobId() || job.module() != JmgModuleEnum::PROD)
        {
            throw error(strfmt("@SYS39904", jobId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static JmgProdCancelFinished construct()
    {
        return new JmgProdCancelFinished();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS38909";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        JmgProdCancelFinished   jmgProdCancelFinished;

        jmgProdCancelFinished = JmgProdCancelFinished::newFromArgs(_args);

        if (jmgProdCancelFinished.prompt())
        {
            JmgProdCancelFinished::runOnServer(jmgProdCancelFinished.pack());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromArgs</Name>
				<Source><![CDATA[
    public static JmgProdCancelFinished newFromArgs(Args _args)
    {
        JmgProdCancelFinished   prodCancelFinished = JmgProdCancelFinished::construct();

        prodCancelFinished.initFromArgs(_args);

        return prodCancelFinished;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPackedClass</Name>
				<Source><![CDATA[
    public static JmgProdCancelFinished newFromPackedClass(container _packedClass)
    {
        JmgProdCancelFinished jmgProdCancelFinished;

        JmgProdCancelFinished = JmgProdCancelFinished::construct();
        JmgProdCancelFinished.unpack(_packedClass);

        return JmgProdCancelFinished;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    public static void runOnServer(container _packedClass)
    {
        JmgProdCancelFinished JmgProdCancelFinished = JmgProdCancelFinished::newFromPackedClass(_packedClass);

        JmgProdCancelFinished.revertCompletedStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>