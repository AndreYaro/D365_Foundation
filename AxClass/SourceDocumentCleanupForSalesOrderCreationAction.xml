<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SourceDocumentCleanupForSalesOrderCreationAction</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

[Export(identifierStr(Dynamics.AX.Application.IDataMaintenanceAction))]
[DataMaintenanceFeatureClass(classstr(SourceDocumentCleanupForSalesOrderCreationFlightV2))]
internal final class SourceDocumentCleanupForSalesOrderCreationAction implements IDataMaintenanceAction, IDataMaintenanceOpportunity, IDataMaintenanceActionScheduleParameters
{
    private const int FixWindowMonths = SourceDocumentCleanupForSalesOrderTaskHelper::FixWindowMonths;
    private const int FixMonthsAllowedToScanOnOneIteration = SourceDocumentCleanupForSalesOrderTaskHelper::FixMonthsAllowedToScanOnOneIteration;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceCaption caption()
    {
        return literalStr("@SourceDocumentAccountingFramework:SourceDocumentCleanupForSalesOrderCreationActionCaption");
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceDescription description()
    {
        return literalStr("@SourceDocumentAccountingFramework:SourceDocumentCleanupForSalesOrderCreationActionDescription");
    }

]]></Source>
			</Method>
			<Method>
				<Name>category</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceActionCategory category()
    {
        return DataMaintenanceActionCategory::All;
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ModuleAxapta module()
    {
        return ModuleAxapta::General;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tasks</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Array tasks()
    {
        Array tasks = new Array(Types::String);
        tasks.value(1, classStr(SourceDocumentCleanupForSalesOrderCreationTask));
        return tasks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabled()
    {
        return FeatureStateProvider::isFeatureEnabled(SalesOrderDisableCreationOfSourceDocumentImplementationData::instance());
    }

]]></Source>
			</Method>
			<Method>
				<Name>opportunityResult</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceOpportunityResult opportunityResult()
    {
        DataMaintenanceOpportunityResult scanResult = DataMaintenanceOpportunityResult::construct();
        scanResult.parmOpportunityFound(this.hasUnnecessarySourceDocumentLinesForSalesOrder());

        return scanResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDefaultSalesLine</Name>
				<Source><![CDATA[
    private QueryBuildDataSource buildDefaultSalesLine(Query _query)
    {
        QueryBuildDataSource qbdsSalesLine = _query.addDataSource(tableNum(SalesLine));
        qbdsSalesLine.fetchMode(QueryFetchMode::One2One);
        findOrCreateRange_W(qbdsSalesLine, fieldNum(SalesLine, StockedProduct), queryValue(NoYes::Yes));

        return qbdsSalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLeanCoverageFilter</Name>
				<Source><![CDATA[
    private void buildLeanCoverageFilter(QueryBuildDataSource _qbdsSalesLine)
    {
        QueryBuildDataSource qbdsLeanCoverage = _qbdsSalesLine.addDataSource(tableNum(LeanCoverage));
        qbdsLeanCoverage.joinMode(JoinMode::NoExistsJoin);
        qbdsLeanCoverage.fetchMode(QueryFetchMode::One2One);
        qbdsLeanCoverage.relations(false);
        qbdsLeanCoverage.addLink(fieldNum(SalesLine, DataAreaId), fieldNum(LeanCoverage, ItemDataAreaId));
        findOrCreateRange_W(qbdsLeanCoverage, fieldNum(LeanCoverage, ItemId),
            strFmt(
                "((%1.%2 == %3.%4) || (%3.%5 == %6))",
                _qbdsSalesLine.name(),
                fieldStr(SalesLine, ItemId),
                qbdsLeanCoverage.name(),
                fieldStr(LeanCoverage, ItemId),
                fieldStr(LeanCoverage, RuleCoverageType),
                enum2int(LeanRuleCoverageType::All)
        ));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildForecastItemAllocationLineFilter</Name>
				<Source><![CDATA[
    private void buildForecastItemAllocationLineFilter(QueryBuildDataSource _qbdsSalesLine)
    {
        QueryBuildDataSource qbdsForecastItemAllocationLine = _qbdsSalesLine.addDataSource(tableNum(ForecastItemAllocationLine));
        qbdsForecastItemAllocationLine.joinMode(JoinMode::NoExistsJoin);
        qbdsForecastItemAllocationLine.fetchMode(QueryFetchMode::One2One);
        qbdsForecastItemAllocationLine.relations(false);
        qbdsForecastItemAllocationLine.addLink(fieldNum(SalesLine, ItemId), fieldNum(ForecastItemAllocationLine, ItemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLineFilterQuery</Name>
				<Source><![CDATA[
    private Query salesLineFilterQuery()
    {
        Query query = new Query();
        query.allowCrossCompany(true);
        query.skipAutoOrderBy(true);

        QueryBuildDataSource qbdsSalesLine = this.buildDefaultSalesLine(query);
        this.buildLeanCoverageFilter(qbdsSalesLine);
        this.buildForecastItemAllocationLineFilter(qbdsSalesLine);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOpportunityQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// The function executes queries to determine if there are any records for deletion.
    /// Execution consists of two parts:
    /// 1) Select a set of <c>SalesLine</c> records that meet the conditions for cleaning
    ///    and save the SourceDocumentLine ID into the table <c>SourceDocumentCleanupForSalesOrderCreationRemoveQueue</c>.
    /// 2) Join the generated table with the <c>SourceDocumentLine</c> table to verify if there are actual records to be removed.
    /// If no opportunity to run the task is found, the table <c>SourceDocumentCleanupForSalesOrderCreationRemoveQueue</c> should be cleaned.
    ///
    /// Before calculations, the function checks if there are already some records in <c>SourceDocumentCleanupForSalesOrderCreationRemoveQueue</c>,
    /// which means the cleaning job hasn't finished deleting yet. Deletion is performed in batches.
    /// </summary>
    /// <param name = "_fromLimitDateForSelect">FromDate for scanning interval</param>
    /// <param name = "_toLimitDateForSelect">ToDate for scanning interval</param>
    /// <returns>True - if there are records which could be removed</returns>
    private boolean runOpportunityQuery(date _fromLimitDateForSelect, date _toLimitDateForSelect)
    {
        boolean result = false;

        SourceDocumentCleanupForSalesOrderCreationRemoveQueue sourceDocumentCleanupForSalesOrderCreationRemoveQueue;

        select firstonly RecId from sourceDocumentCleanupForSalesOrderCreationRemoveQueue;

        if (sourceDocumentCleanupForSalesOrderCreationRemoveQueue.RecId != 0)
        {
            // there are still precached links to SDL which could be removed in the job
            // (remove is done by batches)
            // no need to calculate anything - there is an opportunity to run
            result = true;
        }
        else
        {
            Query detectQuery = this.salesLineFilterQuery();
            QueryBuildDataSource qbdsSalesLine = detectQuery.dataSourceTable(tableNum(SalesLine));
            findOrCreateRange_W(qbdsSalesLine, fieldNum(SalesLine, CreatedDateTime), SysQuery::range(_fromLimitDateForSelect, _toLimitDateForSelect));

            // Query::insert_recordset() does not work when the query contains an exist/non-exist join, unless you explicitly clear out all selection fields from them
            detectQuery.clearAllFields();
            qbdsSalesLine.addSelectionField(fieldNum(SalesLine, SourceDocumentLine));

            Map fieldMapping = new Map(Types::String, Types::Container);
            fieldMapping.insert(
                fieldStr(SourceDocumentCleanupForSalesOrderCreationRemoveQueue, SourceDocumentLineRecId),
                [qbdsSalesLine.uniqueId(), fieldStr(SalesLine, SourceDocumentLine)]
            );

            ttsbegin;

            // skipping alert events and datamethods is required when executing a cross company query
            sourceDocumentCleanupForSalesOrderCreationRemoveQueue.skipDataMethods(true);
            sourceDocumentCleanupForSalesOrderCreationRemoveQueue.skipDatabaseLog(true);
            sourceDocumentCleanupForSalesOrderCreationRemoveQueue.skipEvents(true);

            Query::insert_recordset(sourceDocumentCleanupForSalesOrderCreationRemoveQueue, fieldMapping, detectQuery);

            Query query = new Query();
            query.allowCrossCompany(true);
            query.firstOnly1(true);
            query.skipAutoOrderBy(true);

            QueryBuildDataSource qbdsCachedLinks = query.addDataSource(tableNum(SourceDocumentCleanupForSalesOrderCreationRemoveQueue));
            qbdsCachedLinks.fetchMode(QueryFetchMode::One2One);

            QueryBuildDataSource qbdsSDL = qbdsCachedLinks.addDataSource(tableNum(SourceDocumentLine));
            qbdsSDL.relations(false);
            qbdsSDL.fetchMode(QueryFetchMode::One2One);
            qbdsSDL.joinMode(JoinMode::InnerJoin);
            qbdsSDL.addLink(fieldNum(SourceDocumentCleanupForSalesOrderCreationRemoveQueue, SourceDocumentLineRecId), fieldNum(SourceDocumentLine, RecId));

            query.clearAllFields();
            qbdsSDL.addSelectionField(fieldNum(SourceDocumentLine, RecId));

            QueryRun queryRun = new QueryRun(query);
            result = queryRun.next();

            // This part part of code is created because we are emulating working with the regular table <c>SourceDocumentCleanupForSalesOrderCreationRemoveQueue</c>
            // as with the tmp table (it is not possible now to use crosscompay for tmp table and insert_recordset function).
            // If no SDL lines can be removed in the task, then there is no need to store their precalculated recIds inside
            // <c>SourceDocumentCleanupForSalesOrderCreationRemoveQueue</c>, so there is no need to commit the transaction with the insertion of new records.
            if (!result)
            {
                ttsabort;
            }
            else
            {
                ttscommit;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMinDateForFiltering</Name>
				<Source><![CDATA[
    /// <summary>
    /// The function is used to calculate the oldest CreatedDateTime in the SalesLine table
    /// for which SourceDocumentLine records could potentially be found for removal.
    /// </summary>
    /// <returns>
    /// The oldest CreationDateTime.
    /// If no records are found under the specified conditions,
    /// the function will return the maximum date available for scanning.
    /// </returns>
    /// <remarks>The function is used only once, when the opportunity runs for the first time.</remarks>
    private date getMinDateForFiltering()
    {
        date resultDate;
        date toLimitDateForSelect = DateTimeUtil::date(DateTimeUtil::addMonths(DateTimeUtil::getSystemDateTime(), -FixWindowMonths));

        Query minQuery = this.salesLineFilterQuery();
        minQuery.firstOnly1(true);

        QueryBuildDataSource qbdsSalesLine = minQuery.dataSourceTable(tableNum(SalesLine));
        qbdsSalesLine.addSelectionField(fieldNum(SalesLine, CreatedDateTime));
        qbdsSalesLine.addSortField(fieldNum(SalesLine, CreatedDateTime));
        findOrCreateRange_W(qbdsSalesLine, fieldNum(SalesLine, CreatedDateTime), SysQuery::range(dateNull(), toLimitDateForSelect));

        QueryRun queryRun = new QueryRun(minQuery);
        if (queryRun.next())
        {
            SalesLine selectedRecod = queryRun.get(tableNum(SalesLine));
            resultDate = DateTimeUtil::date(selectedRecod.CreatedDateTime);
        }
        else
        {
            resultDate = toLimitDateForSelect;
        }

        return resultDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasUnnecessarySourceDocumentLinesForSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// The function checks that there are some records to be removed.
    /// </summary>
    /// <returns>True - there are some records</returns>
    private boolean hasUnnecessarySourceDocumentLinesForSalesOrder()
    {
        // Scanning for opportunities is performed with a sliding window algorithm:
        // 1) Calculate the minimum date when records for cleaning exist = FromDate. This calculation is done only once during the action's first run.
        // 2) Calculate the maximum date available for scanning = MaxDateAvailableForScanning.
        // 3) FromDate = min(FromDate, MaxDateAvailableForScanning).
        // 4) ToDate = min(FromDate + WindowSize, MaxDateAvailableForScanning).
        // 5) Run the scanning action with restrictions on CreatedDateTime: FromDate <= CREATEDATETIME <= ToDate.
        // 6) If the scanning job doesn't find any records to be removed, that is a signal to switch to
        //    the next date interval: [ToDate, min(ToDate + WindowSize, MaxDateAvailableForScanning)].
        // 7) Go to step 4 according to the job's schedule.
        // When all historical data is cleaned, the date interval for scanning will be equal to 1 day.
        // FromDate is stored in <c>SourceDocumentParametersGlobal</c>.
        boolean result = false;

        SourceDocumentLine sourceDocumentLine;
        SalesLine salesLine;
        LeanCoverage leanCoverage;
        ForecastItemAllocationLine forecastItemAllocationLine;

        if (FeatureStateProvider::isFeatureEnabled(SalesOrderDisableCreationOfSourceDocumentImplementationData::instance()))
        {
            StartDate fromLimitDateForSelect;
            EndDate toLimitDateForSelect;

            [fromLimitDateForSelect, toLimitDateForSelect] = SourceDocumentCleanupForSalesOrderTaskHelper::getDateIntervalForJob();

            // empty from date means that opportunity would run for the first time
            if (fromLimitDateForSelect == dateNull())
            {
                fromLimitDateForSelect = this.getMinDateForFiltering();
                SourceDocumentCleanupForSalesOrderTaskHelper::saveFromDateForScanningInterval(fromLimitDateForSelect);

                toLimitDateForSelect = min(
                    DateTimeUtil::date(DateTimeUtil::addMonths(DateTimeUtil::newDateTime(fromLimitDateForSelect, 0), FixMonthsAllowedToScanOnOneIteration)),
                    toLimitDateForSelect);
            }

            result = this.runOpportunityQuery(fromLimitDateForSelect, toLimitDateForSelect);

            // if no records to remove where detected, switch for next date interval for scanning
            if (!result && fromLimitDateForSelect != toLimitDateForSelect)
            {
                SourceDocumentCleanupForSalesOrderTaskHelper::saveFromDateForScanningInterval(toLimitDateForSelect);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>automaticallySchedule</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean automaticallySchedule()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleParameters</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceActionScheduleParameters scheduleParameters()
    {
        DataMaintenanceActionScheduleParameters params = new DataMaintenanceActionScheduleParameters();
        params.Frequency = DataMaintenanceActionScheduleFrequency::EveryTwoHour;
        return params;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>