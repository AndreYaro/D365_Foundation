<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransItemProposal_SalesOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   ProjTransItemProposal_SalesOrder extends ProjTransItem
{
    ProjProposalItem    projProposalItem;
    SalesLine           salesLine;

    boolean             calcTransTurnover;
    AmountCur           transTurnover;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activityNumber</Name>
				<Source><![CDATA[
    public ProjActivityNumber activityNumber()
    {
        return salesLine.ActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the category ID for a transaction.
    /// </summary>
    /// <returns>
    /// The category ID for the transaction.
    /// </returns>
    /// <remarks>
    /// This method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjCategoryId categoryId()
    {
        return salesLine.ProjCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyIdSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code for the sales amounts that are reported by a transaction.
    /// </summary>
    /// <returns>
    /// The currency code for the sales amounts that are reported by the transaction.
    /// </returns>
    /// <remarks>
    /// This method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjSalesCurrencyCode currencyIdSales()
    {
        return salesLine.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultDimension()
    {
        return salesLine.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>externalItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the customer item number that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The customer item number that is associated with this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public SalesExternalItemId externalItemId()
    {
        return salesLine.ExternalItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundingSource</Name>
				<Source><![CDATA[
    public ProjFundingSourceRefId fundingSource()
    {
        return projProposalItem.projProposalJour().FundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransDate</Name>
				<Source><![CDATA[
    TransDate getTaxTransDate()
    {
        return salesLine.ConfirmedDlv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTaxBuffer</Name>
				<Source><![CDATA[
    boolean hasTaxBuffer()
    {
        if (salesLine)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the inventory dimension for this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the inventory dimension for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public InventDimId inventDimId()
    {
        return salesLine.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    public InventTransId inventTransId()
    {
        return projProposalItem.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the inventory item that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// An empty String.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend the class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ItemId itemId()
    {
        return projProposalItem.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction origin for this transaction.
    /// </summary>
    /// <returns>
    /// The <c>ProjOrigin::SalesOrder</c> enumeration value.
    /// </returns>
    /// <remarks>
    /// This method can be overridden by classes that extend this class to return a different transaction
    /// origin for the specific transaction.
    /// </remarks>
    public ProjTransactionOrigin itemType()
    {
        return ProjOrigin::SalesOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDisc</Name>
				<Source><![CDATA[
    public SalesLineDisc lineDisc()
    {
        return salesLine.LineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePercent</Name>
				<Source><![CDATA[
    public SalesLinePercent linePercent()
    {
        return salesLine.LinePercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePropertyId</Name>
				<Source><![CDATA[
    public ProjLinePropertyId linePropertyId()
    {
        return salesLine.ProjLinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustHandleForecast</Name>
				<Source><![CDATA[
    public boolean mustHandleForecast()
    {
        if (this.qty()>0)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProjProposalItem _projProposalItem)
    {
        projProposalItem    = _projProposalItem;
        salesLine           = _projProposalItem.salesLine();

        super(_projProposalItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>port</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the port where any deliveries associated with this transaction were loaded.
    /// </summary>
    /// <returns>
    /// An empty String.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public IntrastatPortId port()
    {
        return salesLine.Port;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the price unit, the number of units for which the price is specified, for this
    /// transaction.
    /// </summary>
    /// <returns>
    /// The price unit for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public PriceUnit priceUnit()
    {
        return salesLine.PriceUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the project that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the project that is associated with this transaction.
    /// </returns>
    /// <remarks>
    /// This method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjId projId()
    {
        return salesLine.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the project proposal that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// An empty String.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public  ProjProposalId proposalId()
    {
        return ProjProposalItem::findInvent(salesLine.InventTransId).ProposalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaContractLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the contract billing rule that is associated with this transaction.
    /// </summary>
    /// <returns>
    ///    The ID of the contract billing rule that is associated with this transaction.
    /// </returns>
    public PSAContractLineNum psaContractLineNum()
    {
        return projProposalItem.psaContractLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the quantity for this transaction.
    /// </summary>
    /// <returns>
    /// The quantity for this transaction.
    /// </returns>
    /// <remarks>
    /// This method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public Qty qty()
    {
        return projProposalItem.DeliverNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID for this transaction.
    /// </summary>
    /// <returns>
    /// Always returns zero.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public RecId recId()
    {
        return projProposalItem.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the commission sales group that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// An empty String.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public CommissSalesGroup salesGroup()
    {
        return salesLine.SalesGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the sales order associated with this transaction.
    /// </summary>
    /// <returns>
    /// An empty String.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public SalesId salesId()
    {
        return salesLine.SalesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales mark up for this transaction.
    /// </summary>
    /// <returns>
    /// Always returns zero.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public SalesMarkup salesMarkup()
    {
        return salesLine.SalesMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales price for this transaction.
    /// </summary>
    /// <returns>
    /// The sales price for this transaction.
    /// </returns>
    SalesPrice salesPrice()
    {
        SalesPrice ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransItemProposal_SalesOrder)))
        {
            Qty qty = this.qty();
            PriceUnit priceUnit = this.priceUnit();

            if (!priceUnit)
            {
                priceUnit = 1;
            }

            if (qty)
            {
                ret = CurrencyExchangeHelper::price(this.transTurnover() / qty * priceUnit, this.currencyIdSales());
            }
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales unit for this transaction.
    /// </summary>
    /// <returns>
    /// An empty String.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public UnitOfMeasureSymbol salesUnit()
    {
        return salesLine.SalesUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>statprocId</Name>
				<Source><![CDATA[
    public IntrastatProcId statprocId()
    {
        return salesLine.StatProcId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID for this transaction.
    /// </summary>
    /// <returns>
    /// Always returns zero.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TableId tableId()
    {
        return tableName2id(tableStr(ProjProposalItem));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tax group for this transaction.
    /// </summary>
    /// <returns>
    /// An empty String.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TaxGroup taxGroup()
    {
        return projProposalItem.TaxGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item tax group for this transaction.
    /// </summary>
    /// <returns>
    /// An empty String.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TaxItemGroup taxItemGroup()
    {
        return projProposalItem.TaxItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of transaction code of this transaction.
    /// </summary>
    /// <returns>
    /// An empty String.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public IntrastatTransactionCodeId transactionCode()
    {
        return salesLine.TransactionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>intrastatCommodity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the commodity code of this transaction.
    /// </summary>
    /// <returns>
    ///    Commodity code.
    /// </returns>
    public IntrastatCommodityId intrastatCommodity()
    {
        return salesLine.IntrastatCommodity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>origCountryRegionId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the commodity origin country/region ID.
    /// </summary>
    /// <returns>
    ///    Commodity origin country/region ID.
    /// </returns>
    public ItemOrigCountryRegionId origCountryRegionId()
    {
        return salesLine.OrigCountryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>origStateId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the commodity origin state ID.
    /// </summary>
    /// <returns>
    ///    Commodity origin state ID.
    /// </returns>
    public ItemOrigStateId origStateId()
    {
        return salesLine.OrigStateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total cost of this transaction in the transaction currency.
    /// </summary>
    /// <returns>
    /// The total cost of this transaction.
    /// </returns>
    public  Amount transCost()
    {
        PriceCur    price;
        InventTable inventTable;

        inventTable=InventTable::find(salesLine.ItemId);

        if (inventTable)
        {
            boolean isStocked = salesLine.isStocked();
            if (isStocked)
            {
                InventDimParm inventDimParmFinancial, inventDimParmActive;
                InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newItemId(salesLine.ItemId);

                inventDimGroupSetup.inventDimParmActiveFinancialInventory(inventDimParmFinancial);
                inventDimGroupSetup.inventDimParmActive(inventDimParmActive);

                InventDim inventDim = InventDim::find(salesLine.InventDimId);

                InventOnhand inventOnhand = InventOnhand::newParametersActive(salesLine.ItemId, inventDim, inventDimParmFinancial, inventDimParmActive);
                price = inventOnhand.costPricePcs();
            }
            else
            {
                price=inventTable.costPcsPrice(salesLine.InventDimId,salesLine.inventDim());
            }
        }
        else
        {
            price=0;
        }

        return price * this.qty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction date.
    /// </summary>
    /// <returns>
    /// The transaction date.
    /// </returns>
    /// <remarks>
    /// This method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TransDate transDate()
    {
        return ProjProposalJour::find(this.proposalId()).InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction ID.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjTransIdBase transId()
    {
        return salesLine.ProjTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the method of transportation for orders that are associated with this transaction.
    /// </summary>
    /// <returns>
    /// An empty String.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public IntrastatTransport transport()
    {
        return salesLine.Transport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxBaseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the base transaction amount that will be used to calculate taxes in the transaction
    /// currency.
    /// </summary>
    /// <returns>
    /// The base transaction amount that will be used for calculating taxes.
    /// </returns>
    /// <remarks>
    /// This method returns the result of the <c>transTurnover</c> method. Child classes can override this
    /// method.
    /// </remarks>
    public AmountCur transTaxBaseAmount()
    {
        AmountCur amountCur = this.transTurnover();

        if (salesLine.salesTable().DiscPercent && salesLine.endDisc())
        {
            amountCur -= amountCur * salesLine.salesTable().DiscPercent / 100;
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnover</Name>
				<Source><![CDATA[
    public AmountCur transTurnover()
    {
        AmountCur               ret;
        ProjProposalItemDetail  projProposalItemDetail;
        ProjTrans               projTransSale;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransItemProposal_SalesOrder)))
        {
            if (!calcTransTurnover)
            {
                calcTransTurnover = true;
                while select projProposalItemDetail
                    where projProposalItemDetail.ProposalRefRecId == projProposalItem.RecId
                {
                    projTransSale = ProjTrans::newProjProposalItemSale(projProposalItem, projProposalItemDetail);
                    transTurnover += projTransSale.transTurnover();
                }
            }

            ret = transTurnover;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction text.
    /// </summary>
    /// <returns>
    /// The transaction text.
    /// </returns>
    /// <remarks>
    /// This method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TransTxt txt()
    {
        return projProposalItem.Txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the voucher number that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The voucher number that is associated with this transaction.
    /// </returns>
    /// <remarks>
    /// This method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public Voucher voucherInvoice()
    {
        Voucher ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustHandleBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether budgetary control is enabled.
    /// </summary>
    /// <returns>
    ///    True if quantity greater than zero ; otherwise false.
    /// </returns>
    public boolean mustHandleBudget()
    {
        boolean ret;

        if (this.qty() > 0)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>