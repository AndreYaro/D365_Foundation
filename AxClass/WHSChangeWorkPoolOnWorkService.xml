<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSChangeWorkPoolOnWorkService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The service class for executing the 'Change work pool on work' business operation.
/// Provides the same functionality as <c>WHSChangeWorkPoolService</c> with added validation.
/// The work pool on the selected work records will be updated if they are in the proper work status.
/// Otherwise, an error will be displayed for the records that are not valid for the change.
/// </summary>
internal class WHSChangeWorkPoolOnWorkService extends WHSChangeWorkPoolService
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateWorkPool</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected internal void updateWorkPool(WHSWorkId _workId, WHSWorkPoolId _newWorkPoolId)
    {
        ttsbegin;

        if (this.validateWorkPoolChange(_workId))
        {
            super(_workId, _newWorkPoolId);
        }
        else
        {
            error(strFmt("@WAX:WHSChangeWorkPoolOnWorkStatusNotValid", _workId));
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkPoolChange</Name>
				<Source><![CDATA[
    private boolean validateWorkPoolChange(WHSWorkId _workId)
    {
        using (var activityContext = this.instrumentationLogger().workTableActivities().validateWorkPoolChange())
        {
            WHSWorkTable workTable = WHSWorkTable::find(_workId);

            this.instrumentationLogger().logRecordInformation(workTable);

            boolean canChangeWorkPool = workTable.canChangeWorkPool();

            this.instrumentationLogger().workTableActivities().validatedWorkPoolChange(activityContext, canChangeWorkPool);

            return canChangeWorkPool;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>