<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvUserPreferencesManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TrvUserPreferencesManager
{
    #DEFINE.TrvExpTransCreditCard   (TrvExpTransDistributions)
    #DEFINE.TrvItemization          (TrvItemization)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>shouldAutomaticallyOpenItemizationPage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the user preference for automatically opening the itemization page when the itemized
    ///    header expense is created.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that indicates whether to set the value; optional.
    /// </param>
    /// <param name="_value">
    ///    The Boolean value for which to set.
    /// </param>
    /// <returns>
    ///    A Boolean value that indicates the current user preference for automatically opening the
    ///    itemization page.
    /// </returns>
    /// <remarks>
    ///    The default value of the user preference is true.
    /// </remarks>
    public static boolean shouldAutomaticallyOpenItemizationPage(
                                    boolean _set = false,
                                    boolean _value = true)
    {
        boolean      shouldAutomaticallyOpenItemizationPage = _value;
        container    valueContainer;

        if (_set)
        {
            xSysLastValue::putValue([shouldAutomaticallyOpenItemizationPage],
                                    curext(),
                                    curuserid(),
                                    UtilElementType::WebUrlItem,
                                    webUrlItemStr(#TrvItemization));
        }
        else
        {
            valueContainer = xSysLastValue::getValue(curext(),
                                                     curuserid(),
                                                     UtilElementType::WebUrlItem,
                                                     webUrlItemStr(#TrvItemization));
            if (valueContainer)
            {
                [shouldAutomaticallyOpenItemizationPage] = valueContainer;
            }
        }

        return shouldAutomaticallyOpenItemizationPage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSelectAllUnreconciledExpenses</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the user preference for selecting all expenses that have not been reconciled.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that indicates whether to set the value; optional.
    /// </param>
    /// <param name="_value">
    ///    The Boolean value to be set.
    /// </param>
    /// <returns>
    ///    A Boolean value that indicates the current user preference for selecting all expenses that have not
    ///    been reconciled.
    /// </returns>
    /// <remarks>
    ///    The default value of the user preference is true.
    /// </remarks>
    public static boolean shouldSelectAllUnreconciledExpenses(
                                    boolean _set = false,
                                    boolean _value = true)
    {
        boolean      shouldSelectAllUnreconciledExpenses = _value;
        container    valueContainer;

        if (_set)
        {
            xSysLastValue::putValue([shouldSelectAllUnreconciledExpenses],
                                    curext(),
                                    curuserid(),
                                    UtilElementType::WebUrlItem,
                                    webUrlItemStr(#TrvExpTransCreditCard));
        }
        else
        {
            valueContainer = xSysLastValue::getValue(curext(),
                                                     curuserid(),
                                                     UtilElementType::WebUrlItem,
                                                     webUrlItemStr(#TrvExpTransCreditCard));
            if (valueContainer)
            {
                [shouldSelectAllUnreconciledExpenses] = valueContainer;
            }
        }

        return shouldSelectAllUnreconciledExpenses;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>