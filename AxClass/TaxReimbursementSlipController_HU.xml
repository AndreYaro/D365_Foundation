<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReimbursementSlipController_HU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxReimbursementSlipController_HU</c> class is the controller class for the <c>TaxReimbursementSlip_HU</c>
///    report.
/// </summary>
public class TaxReimbursementSlipController_HU extends SrsPrintMgmtFormLetterController implements BatchRetryable
{
    TaxReimbursementSlipContract_HU contract;
    CustInvoiceJour                 custInvoiceJour;
    PrintCopyOriginal               printCopyOriginal;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFormLetterReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initalizes the report and sets the print management.
    /// </summary>
    public void initFormLetterReport()
    {
        printCopyOriginal = this.parmArgs().parmEnum();

        formLetterReport = FormLetterReport::construct(PrintMgmtDocumentType::TaxReimburstmentSlip_HU);
        formLetterReport.parmPrintType(printCopyOriginal);

        if (!custInvoiceJour.SalesId)
        {
            formLetterReport.parmReportRun().parmNodeType(PrintMgmtNodeType::CustInvoiceTable);
        }

        if (printCopyOriginal == PrintCopyOriginal::OriginalPrint)
        {
            // Always use the print mgmt destinations when reprinting for the OriginalPrint case.
            formLetterReport.parmUsePrintMgmtDestinations(true);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
    protected TaxReimbursementSlipContract_HU parmContract()
    {
        if (!contract)
        {
            contract = this.parmReportContract().parmRdpContract() as TaxReimbursementSlipContract_HU;
        }

        return contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Changes the report contract before the report is run.
    /// </summary>
    protected void preRunModifyContract()
    {
        this.parmContract();

        SrsReportRdlDataContract rdlCotract = this.parmReportContract().parmRdlContract();
        rdlCotract.parmLanguageId(custInvoiceJour.LanguageId);
        rdlCotract.parmLabelLanguageId(custInvoiceJour.LanguageId);

        contract.parmCustInvoiceJourRecId(custInvoiceJour.RecId);

        super();

        this.parmDialogCaption("@GLS112604");
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method runs the print report.
    /// </summary>
    protected void runPrintMgmt()
    {
        Object  callerForm;
        Common  transTable;

        if (custInvoiceJour.SalesId)
        {
            transTable = custInvoiceJour.salesTable();
        }
        else
        {
            transTable = custInvoiceJour.custInvoiceTable();
        }

        // if CustInvoiceJour record is created from other than sales order or freetext invoice,
        // then a null table buffer will be passed and a default setting will be used.
        formLetterReport.loadPrintSettings(custInvoiceJour, transTable, custInvoiceJour.LanguageId);

        this.outputReports();

        callerForm = this.parmArgs().caller();

        if (callerForm && formHasMethod(callerForm, identifierStr(updateForm_HU)))
        {
            callerForm.updateForm_HU();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>startOperation</Name>
				<Source><![CDATA[
    public SysOperationStartResult startOperation()
    {
        SysOperationStartResult ret;

        if (this.validatePreCondition())
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePreCondition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the pre condidtion of the report.
    /// </summary>
    /// <returns>
    /// true if all pre conditions are met; otherwise false.
    /// </returns>
    protected boolean validatePreCondition()
    {
        boolean                 ok = true;
        SysInfoAction_Formrun   sysInfoAction;
        CustTable               custTable;
        CustParameters          custParameters = CustParameters::find();
        CurrencyCode            eurCurrency;
        CurrencyCode            accountingCurrency;
        ExchangeRateHelper      exchangeRateHelper;
        ExchangeRateType        exchangeRateType;
        CustInvoiceTrans        custInvoiceTrans;
        CustInvoiceTrans_W      custInvoiceTrans_W;
        TaxTrans                taxTrans;
        CurrencyExchangeRate    currencyExchangeRate;
        AmountCur               grossEURAmount;
        str                     infoMessage;
        int                     currentMessageCount;
        #define.minGrossLimit(175.00)
        #define.delimiterEnter('\n')

        custInvoiceJour = this.parmArgs().record() as CustInvoiceJour;

        if (!custInvoiceJour)
        {
            throw error("@SYS26348");
        }
        else if (custInvoiceJour.InvoiceAmount < 0)
        {
            throw error ("@GLS112653");
        }

        custTable = CustTable::find(custInvoiceJour.InvoiceAccount);
        sysInfoAction = SysInfoAction_Formrun::newFormname(formStr(CustTable));
        sysInfoAction.parmCallerBuffer(custTable);

        if (!custTable.IssuerCountry_HU)
        {
            ok = checkFailed(strFmt("@GLS112655", custTable.AccountNum), "", sysInfoAction);
        }
        else if (IntrastatCountryRegionParameters::isInEU(custTable.IssuerCountry_HU) || IntrastatCountryRegionParameters::isDomestic(CustTable.IssuerCountry_HU))
        {
            ok = checkFailed(strFmt("@GLS112656", custTable.AccountNum), "", sysInfoAction);
        }

        unchecked (Uncheck::TableSecurityPermission)
        {
            if (!custTable.PassportNo_HU)
            {
                ok = checkFailed(strFmt("@GLS112657", custTable.AccountNum), "", sysInfoAction);
            }
        }

        if (custParameters.TaxReimbursementExchangeRateType_HU)
        {
            eurCurrency = Currency::findCurrencyCodeISO(ISOCurrencyCodeHelper::getISOCurrencyCodeAlpha(ISOCurrencyCodes::EUR)).CurrencyCode;

            if (custInvoiceJour.CurrencyCode == eurCurrency)
            {
                currencyExchangeRate = 1.0;
            }
            else
            {
                accountingCurrency = Ledger::accountingCurrency();
                exchangeRateHelper = ExchangeRateHelper::newCurrencyToCurrency(accountingCurrency, eurCurrency);
                exchangeRateHelper.parmExchangeRateTypeRecId(custParameters.TaxReimbursementExchangeRateType_HU);
                exchangeRateHelper.parmExchangeDate(custInvoiceJour.InvoiceDate);
                currentMessageCount = infologLine();

                try
                {
                    currencyExchangeRate = exchangeRateHelper.getExchangeRate1();
                }
                catch
                {
                    infolog.clear(currentMessageCount);
                }

                if (!currencyExchangeRate)
                {
                    sysInfoAction = SysInfoAction_Formrun::newFormname(formStr(ExchangeRate));
                    exchangeRateType = ExchangeRateType::find(custParameters.TaxReimbursementExchangeRateType_HU);
                    sysInfoAction.parmCallerBuffer(exchangeRateType);
                    ok = checkFailed(strFmt("@SYS321719", exchangeRateType.Name, accountingCurrency, eurCurrency, custInvoiceJour.InvoiceDate), "", sysInfoAction);
                }
            }
        }
        else
        {
            sysInfoAction = SysInfoAction_Formrun::newFormnameControlname(formStr(CustParameters), formControlStr(CustParameters, TabUpdates));
            ok = checkFailed(strFmt("@SYS331078", "@GLS220530"), "", sysInfoAction);
        }

        if (!ok)
        {
            throw error ("@SYS74428");
        }

        select sum(LineAmount), sum(LineAmountMST) from custInvoiceTrans
            where custInvoiceTrans.SalesId           == custInvoiceJour.SalesId             &&
                custInvoiceTrans.InvoiceId           == custInvoiceJour.InvoiceId           &&
                custInvoiceTrans.InvoiceDate         == custInvoiceJour.InvoiceDate         &&
                custInvoiceTrans.NumberSequenceGroup == custInvoiceJour.NumberSequenceGroup
            outer join sum(SourceTaxAmountCur), sum(TaxAmountCur) from taxTrans
                where taxTrans.SourceTableId == tableNum(CustInvoiceTrans) &&
                    taxTrans.SourceRecId == custInvoiceTrans.RecId
            exists join CustInvoiceTrans_W
                where custInvoiceTrans_W.CustInvoiceTrans == custInvoiceTrans.RecId &&
                      custInvoiceTrans_W.TaxReimbursement_HU == NoYes::Yes;

        if (custInvoiceJour.CurrencyCode == eurCurrency)
        {
            grossEURAmount = custInvoiceTrans.LineAmount + taxTrans.SourceTaxAmountCur * -1;
        }
        else
        {
            grossEURAmount = CurrencyExchange::round(CurrencyExchange::calculateAmount(custInvoiceTrans.LineAmountMST + taxTrans.TaxAmountCur * -1, currencyExchangeRate), eurCurrency);
        }

        select firstonly RecId from custInvoiceTrans
            where custInvoiceTrans.SalesId           == custInvoiceJour.SalesId             &&
                custInvoiceTrans.InvoiceId           == custInvoiceJour.InvoiceId           &&
                custInvoiceTrans.InvoiceDate         == custInvoiceJour.InvoiceDate         &&
                custInvoiceTrans.NumberSequenceGroup == custInvoiceJour.NumberSequenceGroup
        exists join custInvoiceTrans_W
            where custInvoiceTrans_W.CustInvoiceTrans == custInvoiceTrans.RecId
                && custInvoiceTrans_W.TaxReimbursement_HU == NoYes::No;

        if (custInvoiceTrans)
        {
            infoMessage += "@GLS112651";
        }

        if (grossEURAmount < #minGrossLimit)
        {
            infoMessage +=  (infoMessage ? #delimiterEnter : '') + "@GLS112652";
        }

        if (infoMessage)
        {
            if (!Box::yesNo(infoMessage, DialogButton::Yes))
            {
                throw Exception::Break;
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceHU00014, funcName());

        SrsReportRunController controller = new TaxReimbursementSlipController_HU();

        controller.parmReportName(PrintMgmtDocType::construct(PrintMgmtDocumentType::TaxReimburstmentSlip_HU).getDefaultReportFormat());
        controller.parmArgs(_args);
        controller.parmShowDialog(false);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>