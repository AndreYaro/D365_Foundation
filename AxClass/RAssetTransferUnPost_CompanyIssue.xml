<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetTransferUnPost_CompanyIssue</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RAssetTransferUnPost_CompanyIssue</c> class reverses posting of the transference the asset to another company.
/// </summary>
class rAssetTransferUnPost_CompanyIssue extends RAssetTransferPost implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the current transfer journal line is valid to reverse.
    /// </summary>
    /// <param name="_assetTransferTrans">
    /// A buffer containing <c>RAssetTransferTrans</c> table record.
    /// </param>
    /// <returns>
    /// true if all checks are OK; otherwise, false.
    /// </returns>
    public boolean checkLine(RAssetTransferTrans _assetTransferTrans)
    {
        RAssetMoveHist       moveHist;
        boolean              ret = true;

        select firstonly moveHist
            where moveHist.TransferTransRecId == _assetTransferTrans.RecId;

        if (! moveHist.RecId)
            return checkFailed("@GLS220498");

        if (moveHist.Posted ||
            (select firstonly RecId from rAssetMoveStandard
                where rAssetMoveStandard.RefTableId == moveHist.TableId &&
                      rAssetMoveStandard.RefRecId   == moveHist.RecId   &&
                      rAssetMoveStandard.Posted).RecId)
            ret = checkFailed("@SYS23025");

        if (ret && ! moveHist.isLast())
            ret = checkFailed("@GLS63377");

        if (! ret)
            checkFailed("@GLS220501");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the current transfer journal line.
    /// </summary>
    /// <param name="_assetTransferTrans">
    /// A buffer containing <c>RAssetTransferTrans</c> table record.
    /// </param>
    public void postLine(RAssetTransferTrans _assetTransferTrans)
    {
        RAssetMoveHist        moveHist;
        RAssetMoveStandard    moveStandard;

        ttsbegin;

        select firstonly RecId, TableId from moveHist
            where moveHist.TransferTransRecId == _assetTransferTrans.RecId;

        delete_from moveStandard
            where moveStandard.RefTableId == moveHist.TableId &&
                  moveStandard.RefRecId   == moveHist.RecId;

        delete_from moveHist
            where moveHist.TransferTransRecId == _assetTransferTrans.RecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the status of the transfer journal.
    /// </summary>
    public void updateStatus()
    {
        assetTransferTable.selectForUpdate(true);
        assetTransferTable.Posted = NoYes::No;
        assetTransferTable.doUpdate();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>