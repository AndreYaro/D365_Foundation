<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocumentValidationsExecutor_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Executes registered fiscal document validations.
/// </summary>
class FiscalDocumentValidationsExecutor_BR
{
    List                                listOFFiscalDocumentValidations;

    FiscalDocumentParmData_BR           fiscalDocumentParmData;
    FiscalDocumentValidationClass_BR    fiscalDocumentValidationClass;

    boolean                             isValidationSuccessfull;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addValidation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds a validation to the list of <c>IFiscalDocumentValidation_BR</c> instances that are registered to be executed
    ///     when all validations are run.
    /// </summary>
    /// <param name="_fiscalDocumentValidation">
    ///     An instance implementing the interface <c>IFiscalDocumentValidation_BR</c> that will be registered to be run.
    /// </param>
    public void addValidation(IFiscalDocumentValidation_BR _fiscalDocumentValidation)
    {
        listOFFiscalDocumentValidations.addEnd(_fiscalDocumentValidation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Executes the registered validations against the <c>FiscalDocumentParmData_BR</c> passed in as parameter.
    /// </summary>
    /// <param name="_fiscalDocumentParmData">
    ///     The <c>FiscalDocumentParmData_BR</c> instance representing the fiscal document object model that will be validated.
    /// </param>
    public void execute(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        ListEnumerator                  listOfValidationsEnumerator = this.getListOfFiscalDocumentValidations().getEnumerator();
        IFiscalDocumentValidation_BR    validation;

        this.parmfiscalDocument(_fiscalDocumentParmData);

        while (listOfValidationsEnumerator.moveNext())
        {
            validation = listOfValidationsEnumerator.current();
            validation.parmFiscalDocumentParmData(this.parmFiscalDocument());

            this.executeValidationClass(validation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeValidationClass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the fiscal document validation class against the current fiscal document.
    /// </summary>
    /// <param name="_validationClass">
    /// The <c>IFiscalDocumentValidation_BR</c> class instance that contains the validation methods.
    /// </param>
    protected void executeValidationClass(IFiscalDocumentValidation_BR _validationClass)
    {
        FiscalDocumentLineParmData_BR       lineParmData;
        ListEnumerator                      listOfLinesEnumerator;

        this.parmfiscalDocumentValidationClass(new FiscalDocumentValidationClass_BR(classId2Name(classIdGet(_validationClass))));

        this.executeValidationsForHeader(_validationClass, this.parmFiscalDocument());

        if (this.parmFiscalDocument().parmLines())
        {
            listOfLinesEnumerator = this.parmFiscalDocument().parmLines().getEnumerator();
            while (listOfLinesEnumerator.moveNext())
            {
                lineParmData = listOfLinesEnumerator.current();
                this.executeValidationsForLine(_validationClass, lineParmData);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeValidationMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tries to execute the given method of the given fiscal document validation class against the current fiscal document, if applicable.
    /// </summary>
    /// <param name="_dictMethod">
    /// The method to be executed.
    /// </param>
    /// <param name="_validation">
    /// The <c>IFiscalDocumentValidation_BR</c> class instance that contains the validation methods.
    /// </param>
    protected void executeValidationMethod(SysDictMethod                _dictMethod,
                                           IFiscalDocumentValidation_BR _validation)
    {
        if (this.isMethodApplicableForDocument(_dictMethod, this.parmFiscalDocument()))
        {
            Debug::assert(_dictMethod.returnType() == Types::Enum);

            new ExecutePermission().assert();
            if (!SysDictClass::invokeObjectMethod(_validation, _dictMethod.name(), true))
            {
                isValidationSuccessfull = false;
            }
            CodeAccessPermission::revertAssert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeValidationsForHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the fiscal document validations against the header of the given fiscal document.
    /// </summary>
    /// <param name="_validationClass">
    /// The <c>IFiscalDocumentValidation_BR</c> class instance that contains the validation methods.
    /// </param>
    /// <param name="_fiscalDocumentParmData">
    /// The <c>FiscalDocumentParmData_BR</c> class instance to execute the validations against.
    /// </param>
    protected void executeValidationsForHeader(IFiscalDocumentValidation_BR  _validationClass,
                                               FiscalDocumentParmData_BR     _fiscalDocumentParmData)
    {
        ListEnumerator listOfMethodsEnumerator;
        SysDictMethod  dictMethod;

        listOfMethodsEnumerator = this.parmfiscalDocumentValidationClass().getMethodsApplicableToElement(FiscalDocumentElement_BR::Header).getEnumerator();
        while (listOfMethodsEnumerator.moveNext())
        {
            dictMethod = listOfMethodsEnumerator.current();
            this.executeValidationMethod(dictMethod, _validationClass);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeValidationsForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the fiscal document validations against a given line of the fiscal document.
    /// </summary>
    /// <param name="_validationClass">
    /// The <c>IFiscalDocumentValidation_BR</c> class instance that contains the validation methods.
    /// </param>
    /// <param name="_fiscalDocumentLineParmData">
    /// The <c>FiscalDocumentLineParmData_BR</c> class instance to execute the validations against.
    /// </param>
    protected void executeValidationsForLine(IFiscalDocumentValidation_BR  _validationClass,
                                             FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData)
    {
        FiscalDocumentTaxTransParmData_BR   taxTransParmData;
        FiscalDocumentMiscChargeParmData_BR miscChargesParmData;
        ListEnumerator                      listOfTaxTransEnumerator;
        ListEnumerator                      listOfMiscChargesEnumerator;
        ListEnumerator                      listOfMethodsEnumerator;
        SysDictMethod                       dictMethod;

        _validationClass.parmFiscalDocumentLineParmData(_fiscalDocumentLineParmData);

        setPrefix(
            fieldLabelValue(tableNum(FiscalDocumentLine_BR),
                            fieldNum(FiscalDocumentLine_BR, ItemId),
                            _fiscalDocumentLineParmData.parmItemId()));

        listOfMethodsEnumerator = this.parmfiscalDocumentValidationClass().getMethodsApplicableToElement(FiscalDocumentElement_BR::Line).getEnumerator();
        while (listOfMethodsEnumerator.moveNext())
        {
            dictMethod = listOfMethodsEnumerator.current();
            this.executeValidationMethod(dictMethod, _validationClass);
        }

        listOfTaxTransEnumerator = _fiscalDocumentLineParmData.parmListOfTaxes().getEnumerator();
        while (listOfTaxTransEnumerator.moveNext())
        {
            taxTransParmData = listOfTaxTransEnumerator.current();
            this.executeValidationsForTaxTrans(_validationClass, taxTransParmData);
        }

        listOfMiscChargesEnumerator = _fiscalDocumentLineParmData.parmListOfMiscCharges().getEnumerator();
        while (listOfMiscChargesEnumerator.moveNext())
        {
            miscChargesParmData = listOfMiscChargesEnumerator.current();
            this.executeValidationsForMiscCharge(_validationClass, miscChargesParmData);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeValidationsForMiscCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the fiscal document validations against a given miscellaneous charge of a line of the fiscal document.
    /// </summary>
    /// <param name="_validationClass">
    /// The <c>IFiscalDocumentValidation_BR</c> class instance that contains the validation methods.
    /// </param>
    /// <param name="_miscChargeParmData">
    /// The <c>FiscalDocumentMiscChargeParmData_BR</c> class instance to execute the validations against.
    /// </param>
    protected void executeValidationsForMiscCharge(IFiscalDocumentValidation_BR         _validationClass,
                                                   FiscalDocumentMiscChargeParmData_BR  _miscChargeParmData)
    {
        ListEnumerator  listOfMethodsEnumerator;
        SysDictMethod   dictMethod;

        _validationClass.parmFiscalDocumentMiscChargeParmData(_miscChargeParmData);

        listOfMethodsEnumerator = this.parmfiscalDocumentValidationClass().getMethodsApplicableToElement(FiscalDocumentElement_BR::MiscCharges).getEnumerator();
        while (listOfMethodsEnumerator.moveNext())
        {
            dictMethod = listOfMethodsEnumerator.current();
            this.executeValidationMethod(dictMethod, _validationClass);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeValidationsForTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the fiscal document validations against a given tax of a line of the fiscal document.
    /// </summary>
    /// <param name="_validationClass">
    /// The <c>IFiscalDocumentValidation_BR</c> class instance that contains the validation methods.
    /// </param>
    /// <param name="_fiscalDocumentTaxTransParmData">
    /// The <c>FiscalDocumentTaxTransParmData_BR</c> class instance to execute the validations against.
    /// </param>
    protected void executeValidationsForTaxTrans(IFiscalDocumentValidation_BR       _validationClass,
                                                 FiscalDocumentTaxTransParmData_BR  _fiscalDocumentTaxTransParmData)
    {
        ListEnumerator  listOfMethodsEnumerator;
        SysDictMethod   dictMethod;

        _validationClass.parmFiscalDocumentTaxTransParmData(_fiscalDocumentTaxTransParmData);

        listOfMethodsEnumerator = this.parmfiscalDocumentValidationClass().getMethodsApplicableToElement(FiscalDocumentElement_BR::TaxTrans).getEnumerator();
        while (listOfMethodsEnumerator.moveNext())
        {
            dictMethod = listOfMethodsEnumerator.current();
            this.executeValidationMethod(dictMethod, _validationClass);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListOfFiscalDocumentValidations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the list of validations to be applied.
    /// </summary>
    /// <returns>
    /// A <c>List</c> of classes that implements <c>IFiscalDocumentValidation_BR</c>.
    /// </returns>
    protected List getListOfFiscalDocumentValidations()
    {
        return listOFFiscalDocumentValidations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasFailures</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether there were any validations failures.
    /// </summary>
    /// <returns>
    ///     True when there is at least one validation failure; false otherwise.
    /// </returns>
    public boolean hasFailures()
    {
        return !isValidationSuccessfull;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMethodApplicableForDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if the given validation method is applicable to the given fiscal document.
    /// </summary>
    /// <param name="_dictMethod">
    /// The validation method to verify.
    /// </param>
    /// <param name="_fiscalDocumentParmData">
    /// The <c>FiscalDocumentParmData_BR</c> class instance that represents the fiscal document to verify.
    /// </param>
    /// <returns>
    /// True if the verification is successful; otherwise, false.
    /// </returns>
    protected boolean isMethodApplicableForDocument(SysDictMethod _dictMethod, FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        int                                 i;
        Array                               validationAttributesArray;
        FiscalDocumentValidationAttribute   validationAttribute;
        FiscalDocumentClassification_BR     fiscalDocumentClassification;
        boolean                             isApplicable = false;

        validationAttributesArray   = _dictMethod.getAttributes(classStr(FiscalDocumentValidationAttribute));

        if (validationAttributesArray)
        {
            for (i = 1; i <= validationAttributesArray.lastIndex(); i++)
            {
                validationAttribute = validationAttributesArray.value(i);
                fiscalDocumentClassification = fiscalDocumentClassification | validationAttribute.getFiscalDocumentClassification();
            }

            if (_fiscalDocumentParmData.isOfClassification(fiscalDocumentClassification))
            {
                isApplicable = true;
            }
        }

        if (_dictMethod.getAttribute(classStr(NotApplicableExternalFiscalDocAttribute)) && _fiscalDocumentParmData.isExternal())
        {
            isApplicable    = false;
        }

        return isApplicable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes new instance of the <c>FiscalDocumentValidationsExecutor_BR</c> class.
    /// </summary>
    /// <param name="_fiscalDocumentValidation">
    /// The <c>IFiscalDocumentValidation_BR</c> clas instance to initialize the <c>FiscalDocumentValidationsExecutor_BR</c> class instance with.
    /// </param>
    public void new(IFiscalDocumentValidation_BR _fiscalDocumentValidation)
    {
        isValidationSuccessfull         = true;

        listOFFiscalDocumentValidations = new List(Types::Class);
        listOFFiscalDocumentValidations.addEnd(_fiscalDocumentValidation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalDocument</Name>
				<Source><![CDATA[
    protected FiscalDocumentParmData_BR parmFiscalDocument(FiscalDocumentParmData_BR _fiscalDocumentParmData = fiscalDocumentParmData)
    {
        fiscalDocumentParmData = _fiscalDocumentParmData;
        return fiscalDocumentParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmfiscalDocumentValidationClass</Name>
				<Source><![CDATA[
    protected FiscalDocumentValidationClass_BR parmfiscalDocumentValidationClass(FiscalDocumentValidationClass_BR _fiscalDocumentValidationClass = fiscalDocumentValidationClass)
    {
        fiscalDocumentValidationClass = _fiscalDocumentValidationClass;
        return fiscalDocumentValidationClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromFiscalDocument</Name>
				<Source><![CDATA[
/// <summary>
    /// Builds an instance of <c>FiscalDocumentValidationsExecutor_BR</c> with all validations specific to model of fiscal document in <paramref name="_fiscalDocumentParmData" /> automatically added.
    /// </summary>
    /// <param name="_fiscalDocumentParmData">
    /// A <c>FiscalDocumentParmData_BR</c> to define specific validations by fiscal document model type.
    /// </param>
    /// <param name="_logger">
    /// A <c>ILogger_BR</c> object that will log the validation errors.
    /// </param>
    /// <returns>
    /// An instance of <c>FiscalDocumentValidationsExecutor_BR</c> with all specific validations to model of fiscal document.
    /// </returns>
    public static FiscalDocumentValidationsExecutor_BR newFromFiscalDocument(FiscalDocumentParmData_BR _fiscalDocumentParmData, ILogger_BR _logger = new InfoLogLogger_BR())
    {
        FiscalDocumentValidationsExecutor_BR    executor;

        executor = new FiscalDocumentValidationsExecutor_BR(new FiscalDocumentGeneralValidations_BR(_logger));

        if (_fiscalDocumentParmData.isElectronic())
        {
            executor.addValidation(new EFiscalDocumentValidation_BR(_logger));

            if (_fiscalDocumentParmData.parmFiscalDocumentIssuer() == FiscalDocumentIssuer_BR::ThirdParty)
            {
                executor.addValidation(new EFiscalDocumentReceivedXmlValidation_BR(_logger));
                executor.addValidation(new EFDocReceivedXmlMatchingValidation_BR(_logger));
            }
        }

        if (!_fiscalDocumentParmData.isRetailDocument() && !_fiscalDocumentParmData.isRetailConsumerDocument())
        {
            executor.addValidation(new FiscalDocumentModel1Validation_BR(_logger));
        }

        return executor;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>