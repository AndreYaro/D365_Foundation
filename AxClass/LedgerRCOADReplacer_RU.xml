<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRCOADReplacer_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class finds and replaces RCOAD with RCM in the <c>TaxRegistration</c> table,
/// <c>RAssetLocation</c> table and <c>TaxAuthorityOKATO_RU</c> table from <c>LedgerRCOADtoRCM_RU</c> table.
/// </summary>
class LedgerRCOADReplacer_RU extends RunBaseBatch implements BatchRetryable
{
    FromDate        dateFrom;
    ToDate          dateTo;
    RCMDate_RU      rcmDate;
    DialogField     dialogRCMDate;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        rcmDate
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = super();

        dialogRCMDate = dialog.addFieldValue(extendedTypeStr(RCMDate_RU), rcmDate);
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        this.parmRCMDate(dialogRCMDate.value());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLatestTaxRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method finds the latest RCM code for <c>DirPartyLocation</c>.
    /// </summary>
    /// <param name="_taxRegistration">
    /// The <c>TaxRegistration</c> table.
    /// </param>
    /// <returns>
    /// The latest RCM code for <c>DirPartyLocation</c>.
    /// </returns>
    private TaxRegistration getLatestTaxRegistration(TaxRegistration _taxRegistration)
    {
        TaxRegistration                     taxRegistration;
        TaxRegistrationLegislationTypes     taxRegistrationLegislationTypes;

        select firstOnly forUpdate validTimeState(dateFrom, dateTo) taxRegistration
            order by ValidFrom desc
            where taxRegistration.DirPartyLocation == _taxRegistration.DirPartyLocation
            exists join taxRegistrationLegislationTypes
                where taxRegistrationLegislationTypes.TaxRegistrationTypeApplicabilityRule == taxRegistration.TaxRegistrationTypeApplicabilityRule
                    && taxRegistrationLegislationTypes.TaxRegistrationTypesList == TaxRegistrationTypesList::OKATO;

        return taxRegistration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        dateTo = dateMax();
        rcmDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRCMDate</Name>
				<Source><![CDATA[
    public RCMDate_RU parmRCMDate(RCMDate_RU _rcmDate = rcmDate)
    {
        rcmDate = _rcmDate;
        return rcmDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        LedgerRCOADtoRCM_RU                 ledgerRCOADtoRCM;

        try
        {
            ttsbegin;

            while select ledgerRCOADtoRCM
                where ledgerRCOADtoRCM.RCM
            {
                this.updateTables(ledgerRCOADtoRCM);
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean     ret;
        Version     version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                ret = true;
                break;

            default:
                ret = false;
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method updates RCOAD to RCM in selected tables.
    /// </summary>
    /// <param name="_ledgerRCOADtoRCM">
    /// The <c>LedgerRCOADtoRCM_RU</c> table record.
    /// </param>
    private void updateTables(LedgerRCOADtoRCM_RU _ledgerRCOADtoRCM)
    {
        DirPartyTable                       dirPartyTable;
        DirPartyView                        dirPartyView;
        RAssetLocation                      rAssetLocation;
        TaxRegistration                     taxRegistration, taxRegistrationLoc;
        TaxAuthorityOKATO_RU                taxAuthorityOKATO;
        TaxRegistrationLegislationTypes     taxRegistrationLegislationTypes;

        update_recordSet rAssetLocation
            setting OKATO = _ledgerRCOADtoRCM.RCM
            where rAssetLocation.OKATO == _ledgerRCOADtoRCM.RCOAD;

        update_recordSet taxAuthorityOKATO
            setting OKATO = _ledgerRCOADtoRCM.RCM
            where taxAuthorityOKATO.OKATO == _ledgerRCOADtoRCM.RCOAD;

        while select validTimeState(dateFrom, dateTo) taxRegistration
            where taxRegistration.RegistrationNumber == _ledgerRCOADtoRCM.RCOAD
            exists join taxRegistrationLegislationTypes
                where taxRegistrationLegislationTypes.TaxRegistrationTypeApplicabilityRule == taxRegistration.TaxRegistrationTypeApplicabilityRule
                    && taxRegistrationLegislationTypes.TaxRegistrationTypesList == TaxRegistrationTypesList::OKATO
        {
            taxRegistrationLoc = this.getLatestTaxRegistration(taxRegistration);

            if (taxRegistrationLoc.RecId == taxRegistration.RecId)
            {
                if (taxRegistrationLoc.ValidFrom <= rcmDate)
                {
                    taxRegistrationLoc.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);

                    if (taxRegistrationLoc.ValidFrom == rcmDate)
                    {
                        taxRegistrationLoc.RegistrationNumber = _ledgerRCOADtoRCM.RCM;
                        taxRegistrationLoc.update();
                    }
                    else
                    {
                        if (taxRegistrationLoc.ValidTo == dateTo)
                        {
                            taxRegistrationLoc.ValidTo = rcmDate - 1;
                            taxRegistrationLoc.update();
                        }

                        taxRegistrationLoc.ValidFrom = rcmDate;
                        taxRegistrationLoc.ValidTo = dateTo;
                        taxRegistrationLoc.RegistrationNumber = _ledgerRCOADtoRCM.RCM;
                        taxRegistrationLoc.insert();
                    }
                }
                else
                {
                    if (taxRegistrationLoc.RegistrationNumber != _ledgerRCOADtoRCM.RCM)
                    {
                        select firstOnly dirPartyView
                            where dirPartyView.Party == DirPartyLocation::findRec(taxRegistrationLoc.DirPartyLocation).Party;

                        if (!dirPartyView)
                        {
                            dirPartyTable = DirPartyTable::findRec(DirPartyLocation::findRec(taxRegistrationLoc.DirPartyLocation).Party);
                        }

                        warning(strFmt("@SYS4010055", dirPartyView ? dirPartyView.Accountnum : dirPartyTable.PartyNumber, dirPartyView ? strFmt("%1", dirPartyView.RoleType) : "@SYS343903"));
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the dialog parameters.
    /// </summary>
    /// <param name="calledFrom">
    /// The caller <c>Dialog</c> object.
    /// </param>
    /// <returns>
    /// true, if the dialog parameters are valid.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super(calledFrom);

        if (!rcmDate)
        {
            ret = checkFailed("@SYS4010054");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static LedgerRCOADReplacer_RU construct()
    {
        return new LedgerRCOADReplacer_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS4010044";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        LedgerRCOADReplacer_RU ledgerRCOADReplacer = LedgerRCOADReplacer_RU::construct();

        if (ledgerRCOADReplacer.prompt())
        {
            ledgerRCOADReplacer.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>