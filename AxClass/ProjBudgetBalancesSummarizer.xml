<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBudgetBalancesSummarizer</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjBudgetBalancesSummarizer
{
    #DEFINE.SELECTIONLIST(OrigBudget, RevisedBudget, ActualRevAndCosts, RemainingBudget, CommittedCosts, AmendBudget, UnapprovedRevisions, CarryForwardBudget)

    #LOCALMACRO.SELECTIONLISTSUM
        sum(OrigBudget), sum(RevisedBudget), sum(ActualRevAndCosts), sum(RemainingBudget), sum(CommittedCosts), sum(AmendBudget), sum(UnapprovedRevisions), sum(CarryForwardBudget)
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyGrouping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform inserts or updates operations in <c>_tmpProjBudgetBalances</c> based on category group.
    /// </summary>
    /// <param name = "_tmpProjBudgetBalances">
    /// The <c>TmpProjBudgetBalances</c> table buffer.
    /// </param>
    /// <param name = "_ProjBudgetBalancesGroupByOptions">
    /// The <c>ProjBudgetBalancesGroupByOptions</c> element value.
    /// </param>
    /// <param name = "_projBudgetLineType">
    /// The <c>ProjBudgetLineType</c> element value.
    /// </param>
    public void applyGrouping(TmpProjBudgetBalances _tmpProjBudgetBalances, ProjBudgetBalancesGroupByOptions _ProjBudgetBalancesGroupByOptions, ProjBudgetLineType _projBudgetLineType)
    {
        this.applyProjBudgetBalanceGroup(_tmpProjBudgetBalances, _ProjBudgetBalancesGroupByOptions);
        this.ApplyTotals(_tmpProjBudgetBalances, _projBudgetLineType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyProjBudgetBalanceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts or updates <c>TmpProjBudgetBalances</c> record based on the <c>ProjBudgetBalancesGroupByOptions</c> element value.
    /// </summary>
    /// <param name = "_tmpProjBudgetBalances">
    /// The <c>TmpProjBudgetBalances</c> table buffer.
    /// </param>
    /// <param name = "_ProjBudgetBalancesGroupByOptions">
    /// The <c>ProjBudgetBalancesGroupByOptions</c> element value.
    /// </param>
    public void applyProjBudgetBalanceGroup(TmpProjBudgetBalances _tmpProjBudgetBalances, ProjBudgetBalancesGroupByOptions _ProjBudgetBalancesGroupByOptions)
    {
        switch (_ProjBudgetBalancesGroupByOptions)
        {
            case ProjBudgetBalancesGroupByOptions::CategoryGroupId:
                this.ApplyGroupingByCategoryGroup(_tmpProjBudgetBalances);
                break;

            case ProjBudgetBalancesGroupByOptions::ProjTransType:
                this.ApplyGroupingByTransType(_tmpProjBudgetBalances);
                break;

            case ProjBudgetBalancesGroupByOptions::CostTemplate:
                this.ApplyGroupingByCostTemplate(_tmpProjBudgetBalances);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ApplyTotals</Name>
				<Source><![CDATA[
    protected void ApplyTotals(TmpProjBudgetBalances _tmpProjBudgetBalances, ProjBudgetLineType _projBudgetLineType)
    {
        TmpProjBudgetBalances tmpProjBudgetBalancesLocal;
        RefRecId    rootRefId;

        select #SELECTIONLISTSUM from _tmpProjBudgetBalances
            where !_tmpProjBudgetBalances.Parent;

        _tmpProjBudgetBalances.TransName = _projBudgetLineType == ProjBudgetLineType::Cost ? "@SYS74805" : "@SYS79268";
        _tmpProjBudgetBalances.insert();

        rootRefId = _tmpProjBudgetBalances.RecId;

        update_recordset _tmpProjBudgetBalances
            setting Parent = rootRefId
            where !_tmpProjBudgetBalances.Parent
                && _tmpProjBudgetBalances.RecId != rootRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ApplyGroupingByCategoryGroup</Name>
				<Source><![CDATA[
    protected void ApplyGroupingByCategoryGroup(TmpProjBudgetBalances _tmpProjBudgetBalances)
    {
        TmpProjBudgetBalances tmpProjBudgetBalancesLocal;

        tmpProjBudgetBalancesLocal.setTmpData(_tmpProjBudgetBalances);

        insert_recordset _tmpProjBudgetBalances (TransName, CategoryGroupId, #SELECTIONLIST)
            select CategoryGroupId, CategoryGroupId, #SELECTIONLISTSUM from tmpProjBudgetBalancesLocal
            group by CategoryGroupId;

        tmpProjBudgetBalancesLocal.setTmpData(_tmpProjBudgetBalances);  // To include the new headers.

        update_recordset _tmpProjBudgetBalances
            setting Parent = tmpProjBudgetBalancesLocal.RecId
            where _tmpProjBudgetBalances.CategoryId // Only update non-headers
        join tmpProjBudgetBalancesLocal
                where tmpProjBudgetBalancesLocal.CategoryGroupId == _tmpProjBudgetBalances.CategoryGroupId
                   && !tmpProjBudgetBalancesLocal.CategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ApplyGroupingByCostTemplate</Name>
				<Source><![CDATA[
    protected void ApplyGroupingByCostTemplate(TmpProjBudgetBalances _tmpProjBudgetBalances)
    {
        TmpProjBudgetBalances tmpProjBudgetBalancesLocal;

        tmpProjBudgetBalancesLocal.setTmpData(_tmpProjBudgetBalances);

        insert_recordset _tmpProjBudgetBalances (TransName, CostGroupId, #SELECTIONLIST)
            select CostGroupId, CostGroupId, #SELECTIONLISTSUM from tmpProjBudgetBalancesLocal
            group by CostGroupId;

        tmpProjBudgetBalancesLocal.setTmpData(_tmpProjBudgetBalances);  // To include the new headers.

        update_recordset _tmpProjBudgetBalances
            setting Parent = tmpProjBudgetBalancesLocal.RecId
            where _tmpProjBudgetBalances.CategoryId // Only update non-headers
        join tmpProjBudgetBalancesLocal
                where tmpProjBudgetBalancesLocal.CostGroupId == _tmpProjBudgetBalances.CostGroupId
                   && !tmpProjBudgetBalancesLocal.CategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ApplyGroupingByTransType</Name>
				<Source><![CDATA[
    protected void ApplyGroupingByTransType(TmpProjBudgetBalances _tmpProjBudgetBalances)
    {
        TmpProjBudgetBalances tmpProjBudgetBalancesLocal;

        tmpProjBudgetBalancesLocal.setTmpData(_tmpProjBudgetBalances);

        insert_recordset _tmpProjBudgetBalances (projTransType, #SELECTIONLIST)
            select projTransType, #SELECTIONLISTSUM from tmpProjBudgetBalancesLocal
            group by projTransType;

        while select forupdate _tmpProjBudgetBalances
            where !_tmpProjBudgetBalances.TransName
        {
            _tmpProjBudgetBalances.TransName = enum2str(_tmpProjBudgetBalances.ProjTranstype);
            _tmpProjBudgetBalances.update();
        }

        tmpProjBudgetBalancesLocal.setTmpData(_tmpProjBudgetBalances);  // To include the new headers.

        update_recordset _tmpProjBudgetBalances
            setting Parent = tmpProjBudgetBalancesLocal.RecId
            where _tmpProjBudgetBalances.CategoryId // Only update non-headers
        join tmpProjBudgetBalancesLocal
                where tmpProjBudgetBalancesLocal.projTransType == _tmpProjBudgetBalances.projTransType
                   && !tmpProjBudgetBalancesLocal.CategoryId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>