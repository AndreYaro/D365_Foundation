<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ConfigHierarchyChoose</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ConfigHierarchyChoose extends ConfigHierarchy implements SysPackable
{

    // Group variables
    Counter                 numOfGroup;                 // Number of config groups
    Integer                 presNumGroup;
    Array                   groupList;                  // Array of ConfigGroupId
    Array                   groupAttachedToList;        // Array of integers
    Array                   groupLevelConList;
    Array                   groupRouteRecIdList;        // Array of recids to configRoute
    Array                   derivedValuesConList;
    Array                   itemConList;
    Array                   activeConList;
    Array                   bomRecIdConList;

    // Item variables
    Counter                 numOfItem;                  // Number of items
    Integer                 presNumItem;
    Array                   itemNumList;                // Array of itemids
    Array                   itemLevelConList;
    Array                   itemBOMList;                // Array of BOMIds
    Array                   derivedRouteConList;

    // Level variables
    Array                   levelConList;
    Array                   levelGroupList;             // Array of counters
    Array                   levelIsCountedList;         // Array of booleans

    Map                     data;                       // Map containing status or counters for each level
    Set                     restartedSet;               // Set of itemNum already restarted

    #DEFINE.LevelRouteQtyIdx(2)
    #DEFINE.LevelRouteConIdx(2)

    #DEFINE.LevelGroupQtyIdx(3)
    #DEFINE.LevelGroupConIdx(2)
    #DEFINE.LevelGroupNumConIdx(3)

    #localmacro.dataList
        %1recId,
        presLevel,
        %2
    #endmacro

    #define.CurrentVersion(1)

    #localmacro.CurrentList
        numOfGroup,
        numOfItem
    #endmacro

    // if you change this list, remember to also change unpack().
    #localmacro.CurrentListCon
        groupList%1,
        groupAttachedToList%1,
        groupLevelConList%1,
        groupRouteRecIdList%1,
        derivedValuesConList%1,
        itemConList%1,
        activeConList%1,
        BOMRecIdConList%1,
        itemNumList%1,
        itemLevelConList%1,
        itemBOMList%1,
        derivedRouteConList%1,
        levelConList%1,
        levelGroupList%1,
        levelIsCountedList%1,
        restartedSet%1,
        data%1
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addGroupList</Name>
				<Source><![CDATA[
    protected void addGroupList()
    {
        int lev = presLevel-1;

        if (lev && ! this.getArrayValue(levelIsCountedList,lev))
        {
            levelGroupList.value(lev,this.getArrayValue(levelGroupList,lev)+1);
            levelIsCountedList.value(lev,true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addItem</Name>
				<Source><![CDATA[
    protected void addItem(
        InventTable     inventTable,
        BOMId           bomId
        )
    {
        Integer     levelGroupNum;
        Integer     levelGroupNumNum;

        numOfItem++;
        itemNumList.value(numOfItem,inventTable.ItemId);
        itemBOMList.value(numOfItem,bomId);
        if (inventTable.isProducedByDefault() && ! bomId)
        {
            info(strFmt("@SYS25028",inventTable.ItemId));
        }

        if (numOfGroup)
        {
            levelGroupNum               = this.insertItemInLevel(inventTable.ItemId);
            levelGroupNumNum            = this.levelGroupCountItem(presLevel,levelGroupNum);
            itemLevelConList.value(numOfItem,this.getArrayValue(itemLevelConList,numOfItem)+[presLevel,levelGroupNum,levelGroupNum]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToCon</Name>
				<Source><![CDATA[
    protected void addToCon(BOM  line)
    {
        itemConList.value(presNumGroup, this.getArrayValue(itemConList,presNumGroup) + [line.ItemId] );
        activeConList.value(presNumGroup, this.getArrayValue(activeConList,presNumGroup)+ [true] );
        bomRecIdConList.value(presNumGroup, this.getArrayValue(bomRecIdConList,presNumGroup)+ [line.RecId] );
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a list of the possible configuration values.
    /// </summary>
    /// <param name="num">
    ///    The group number.
    /// </param>
    /// <returns>
    ///    A list of possible configuration values.
    /// </returns>
    List bomLines(Integer num)
    {
        List                list = new List(Types::Record);
        Counter             i = 1;
        ConfigGroupId       groupId= this.numGroup2GroupId(num);
        RecId               recId;

        while (i <= conLen(itemConList.value(num)))
        {
            if (this.isItemIdxActive(num,i))
            {
                recId = conPeek(bomRecIdConList.value(num),i);
                list.addEnd(BOM::findRecId(recId));
            }

            i++;
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doBOM</Name>
				<Source><![CDATA[
    public boolean doBOM(BOM bom)
    {
        boolean     ret;
        InventTable inventTable = bom.inventTable();
        BOMId       bomId       = '';

        this.addToCon(bom);
        this.addGroupList();

        if (inventTable.isProducedByDefault())
        {
            bomId = bom.BOMMap::itemBOMId(versDate, inventTable.inventStandardQty(bom.InventDimId),this.inventDimSiteMerged(bom.InventDimId));
        }

        this.addItem(inventTable, bomId);

        // Save state for this BOM, level ect..
        data.insert(numOfItem,[#dataList(BOM.,numOfItem)]);

        ret = super(bom);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doRoute</Name>
				<Source><![CDATA[
    public boolean doRoute(BOMId _bomId, ConfigGroupId _configGroupId, RecId _recId)
    {
        boolean ret;

        this.addGroupList();

        ret = super(_bomId, _configGroupId, _recId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exclude</Name>
				<Source><![CDATA[
    /*
    The methods excludes the given itemid for the given group number
    */
    void exclude(
        Integer     groupNum,
        ItemId      itemId
        )
    {
        Integer itemI;

        itemI = conFind(this.getArrayValue(itemConList,groupNum),itemId);
        if (itemI)
        {
            activeConList.value(groupNum,conPoke(this.getArrayValue(activeConList,groupNum),itemI,false));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existRoute</Name>
				<Source><![CDATA[
    boolean existRoute(Integer itemNum)
    {
        this.scanDownRouteRestart(itemNum);

        return (this.getArrayValue(derivedRouteConList,itemNum) != conNull());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getArrayValue</Name>
				<Source><![CDATA[
    public anytype getArrayValue(Array a, int _index)
    {
        if (! a.exists(_index))
        {
            a.value(_index,nullValueFromType(a.typeId()));
        }

        return a.value(_index);
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeExcluded</Name>
				<Source><![CDATA[
    /*
    The method activates the given itemid for the given group no.
    */
    void includeExcluded(
        Integer     groupNum,
        ItemId      itemId
        )
    {
        Integer itemI;

        itemI = conFind(this.getArrayValue(itemConList,groupNum),itemId);
        if (itemI)
        {
            activeConList.value(groupNum,conPoke(this.getArrayValue(activeConList,groupNum),itemI,true));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPrefixProgress</Name>
				<Source><![CDATA[
    void initPrefixProgress()
    {
        #macrolib.AviFiles

        setPrefix("@SYS28625");
        progress = RunbaseProgress::construct();
        progress.setCaption("@SYS28625");
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertGroupInLevel</Name>
				<Source><![CDATA[
    /*
    Returns niveau group number
    */
    protected Integer insertGroupInLevel()
    {
        container           level;
        container           levelGroupCon;
        anytype             levelConListElementValue;
        container           levelGroupDerivedCon;
        Integer             levelGroupNum;
        int                 lev;

        lev = presLevel - 1;

        if (lev)
        {
            if (this.getArrayValue(levelGroupList, lev))
            {
                levelGroupNum = levelGroupList.value(lev);
            }
            else
            {
                levelGroupNum = 1;
            }
        }
        else
        {
            levelGroupNum = 1;
        }

        // Get level container
        level = this.getArrayValue(levelConList, presLevel);

        if (levelGroupNum > conLen(level))
        {
            if (levelGroupNum != conLen(level + 1))
            {
                throw error(strFmt("@SYS23866", funcName()));
            }

            // [[0,[]],[NumOfItem]...]
            this.setArrayValue(levelConList, presLevel, level + [presNumItem]);
            this.setArrayValue(derivedRouteConList, presNumItem, [presLevel, levelGroupNum]);
        }

        // Get derived group from group container
        levelConListElementValue = conPeek(levelConList.value(presLevel), levelGroupNum);

        if (typeOf(levelConListElementValue) == Types::Integer)
        {
            levelGroupCon = [levelConListElementValue];
        }
        else
        if (typeOf(levelConListElementValue) == Types::Container)
        {
            levelGroupCon = levelConListElementValue;
        }

        if (conLen(levelGroupCon) == #LevelRouteQtyIdx)
        {
            levelGroupDerivedCon = conPeek(levelGroupCon, #LevelRouteConIdx);
        }
        else
        {
            levelGroupDerivedCon = conNull();
        }

        levelGroupDerivedCon += numOfGroup;

        // Insert derived container in group container
        levelGroupCon = conPoke(levelGroupCon, #LevelRouteConIdx, levelGroupDerivedCon);

        // Insert derived group container in level container
        levelConList.value(presLevel, conPoke(levelConList.value(presLevel), levelGroupNum, levelGroupCon));

        return levelGroupNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertItemInLevel</Name>
				<Source><![CDATA[
    protected Integer insertItemInLevel(ItemId itemId)
    {
        container           level;
        container           levelGroupCon;
        anytype             levelConListElementValue;
        container           levelGroupDerivedCon;
        container           levelGroupDerivedValCon;
        Integer             levelGroupNum;
        int                 lev;

        lev = presLevel - 1;

        if (lev)
        {
            if (this.getArrayValue(levelGroupList, lev))
            {
                levelGroupNum = levelGroupList.value(lev);
            }
            else
            {
                levelGroupNum = 1;
            }
        }
        else
        {
            levelGroupNum = 1;
        }

        level = this.getArrayValue(levelConList, presLevel);

        if (levelGroupNum > conLen(level))
        {
            if (levelGroupNum != conLen(level + 1))
            {
                throw error(strFmt("@SYS23866", funcName()));
            }

            // Insert container with only numOfGroup
            this.setArrayValue(levelConList, presLevel, level + [numOfGroup]);

            if (numOfGroup)
            {
                this.setArrayValue(derivedValuesConList, numOfGroup, [presLevel, levelGroupNum]);
            }
        }

        // Get level group from group container
        levelConListElementValue = conPeek(levelConList.value(presLevel), levelGroupNum);

        if (typeOf(levelConListElementValue) == Types::Integer)
        {
            levelGroupCon = [levelConListElementValue];
        }
        else
        if (typeOf(levelConListElementValue) == Types::Container)
        {
            levelGroupCon = levelConListElementValue;
        }

        if (conLen(levelGroupCon) == #LevelGroupQtyIdx)
        {
            levelGroupDerivedCon    = conPeek(levelGroupCon, #LevelGroupConIdx);
            levelGroupDerivedValCon = conPeek(levelGroupCon, #LevelGroupNumConIdx);
        }
        else
        {
            levelGroupDerivedCon    = conNull();
            levelGroupDerivedValCon = conNull();
        }

        // Insert itemid number in derived container
        levelGroupDerivedCon += numOfItem;

        // Insert index to item number
        if (presNumGroup)
        {
            levelGroupDerivedValCon += this.numGroupItem2Idx(presNumGroup, itemId);
        }
        else
        {
            levelGroupDerivedValCon = conNull();
        }

        // Insert derived container in group container
        levelGroupCon = conPoke(levelGroupCon, #LevelGroupConIdx, levelGroupDerivedCon);
        levelGroupCon = conPoke(levelGroupCon, #LevelGroupNumConIdx, levelGroupDerivedValCon);

        // Insert group container in level container
        levelConList.value(presLevel, conPoke(levelConList.value(presLevel), levelGroupNum, levelGroupCon));

        return levelGroupNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemActive</Name>
				<Source><![CDATA[
    boolean isItemActive(
        Integer         _num,
        ItemId          _itemId
        )
    {
        Integer id = this.numGroupItem2Idx(_num,_itemId);

        return this.isItemIdxActive(_num,id);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemIdxActive</Name>
				<Source><![CDATA[
    boolean isItemIdxActive(
        Integer          _num,
        Integer          _id
        )
    {
        boolean active;

        if (_id)
        {
            active = conPeek(this.getArrayValue(activeConList,_num),_id);
            return active;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>levelGroup2GroupCon</Name>
				<Source><![CDATA[
    /*
    Returns a container with itemId numbers for the given level and group.
    */
    protected container levelGroup2GroupCon(
        Integer level,
        Integer groupNum
        )
    {
        container   levelGroupCon;

        levelGroupCon = this.levelGroupCon(level,groupNum);

        if (conLen(levelGroupCon) != #LevelGroupQtyIdx)
        {
            throw error(strFmt("@SYS23866",funcName()));
        }

        return conPeek(levelGroupCon,#LevelRouteConIdx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>levelGroup2RouteCon</Name>
				<Source><![CDATA[
    /*MAN
    Returnerer container med variantgruppe numre for angivne niveau og niveaugruppe.
    */
    protected container levelGroup2RouteCon(
        Integer level,
        Integer groupNum
        )
    {
        container   levelGroupCon;

        levelGroupCon = this.levelGroupCon(level,groupNum);

        if (conLen(levelGroupCon) != #LevelRouteQtyIdx)
        {
            throw error(strFmt("@SYS23866",funcName()));
        }

        return conPeek(levelGroupCon,#LevelRouteConIdx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>levelGroup2ValuesNumCon</Name>
				<Source><![CDATA[
    /*
    Returns container with values for the given level and group.
    */
    protected container levelGroup2ValuesNumCon(
        Integer level,
        Integer groupNum
        )
    {
        container   levelGroupCon;

        levelGroupCon = this.levelGroupCon(level,groupNum);

        if (conLen(levelGroupCon) != #LevelGroupQtyIdx)
        {
            throw error(strFmt("@SYS23866",funcName()));
        }

        return conPeek(levelGroupCon,#LevelGroupNumConIdx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>levelGroupCon</Name>
				<Source><![CDATA[
    /*
    Returns level container for the given level and group
    */
    protected container levelGroupCon(
        Integer level,
        Integer groupNum
        )
    {
        container   c;

        c = this.getArrayValue(levelConList,level);
        if (! c)
        {
            throw error(strFmt("@SYS23853",level));
        }

        if (groupNum > conLen(c))
        {
            throw error(strFmt("@SYS23852",groupNum,level));
        }

        return conPeek(c,groupNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>levelGroupCountItem</Name>
				<Source><![CDATA[
    Integer levelGroupCountItem(
        Integer level,
        Integer groupNum
        )
    {
        container   levelDerivedCon;

        levelDerivedCon = this.levelGroup2GroupCon(level,groupNum);

        return conLen(levelDerivedCon);
    }

]]></Source>
			</Method>
			<Method>
				<Name>levelGroupNum2GroupId</Name>
				<Source><![CDATA[
    ConfigGroupId   levelGroupNum2GroupId(
        Integer level,
        Integer groupNum,
        Integer num
        )
    {
        return this.numGroup2GroupId(this.levelGroupNum2NumGroup(level,groupNum,num));
    }

]]></Source>
			</Method>
			<Method>
				<Name>levelGroupNum2NumGroup</Name>
				<Source><![CDATA[
    /*MAN
    Returns group number on the given level, group number and index
    */
    Integer levelGroupNum2NumGroup(
        Integer level,
        Integer groupNum,
        Integer num
        )
    {
        container   levelDerivedCon;
        Integer     indexSpec;

        levelDerivedCon = this.levelGroup2RouteCon(level,groupNum);

        if (num > conLen(levelDerivedCon))
        {
            throw error(strFmt("@SYS23867",num,groupNum));
        }

        [indexSpec] = conPeek(levelDerivedCon,num);
        return indexSpec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>levelGroupNum2NumItem</Name>
				<Source><![CDATA[
    /*
    Returns itemId number on the given level, group number and index
    */
    Integer levelGroupNum2NumItem(
        Integer level,
        Integer groupNum,
        Integer num
        )
    {
        container   levelDerivedCon;
        Integer     indexSpec;

        levelDerivedCon = this.levelGroup2GroupCon(level,groupNum);

        if (num > conLen(levelDerivedCon))
        {
            throw error(strFmt("@SYS23867",num,groupNum));
        }

        [indexSpec] = conPeek(levelDerivedCon,num);
        return indexSpec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>levelGroupNumGroup</Name>
				<Source><![CDATA[
    /*
    Returns number of groups on the given level and group
    */
    Integer levelGroupNumGroup(
        Integer level,
        Integer groupNum
        )
    {
        container   levelDerivedCon;

        levelDerivedCon = this.levelGroup2RouteCon(level,groupNum);

        return conLen(levelDerivedCon);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numGroup2Derived</Name>
				<Source><![CDATA[
    container numGroup2Derived(Integer num)
    {
        return this.getArrayValue(derivedValuesConList,num);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numGroup2Group</Name>
				<Source><![CDATA[
    ConfigGroup numGroup2Group(Integer num)
    {
        return ConfigGroup::find(this.numGroup2GroupId(num));
    }

]]></Source>
			</Method>
			<Method>
				<Name>numGroup2GroupId</Name>
				<Source><![CDATA[
    ConfigGroupId numGroup2GroupId(Integer indexSpec)
    {
        return this.getArrayValue(groupList,indexSpec);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numGroup2Route</Name>
				<Source><![CDATA[
    BOMConfigRoute numGroup2Route(Integer num)
    {
        return BOMConfigRoute::findRecId(this.numGroup2RouteRecId(num));
    }

]]></Source>
			</Method>
			<Method>
				<Name>numGroup2RouteRecId</Name>
				<Source><![CDATA[
    RecId numGroup2RouteRecId(Integer num)
    {
        return this.getArrayValue(groupRouteRecIdList,num);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numGroupAttachedTo</Name>
				<Source><![CDATA[
    Integer numGroupAttachedTo(Integer groupnum)
    {
        return this.getArrayValue(groupAttachedToList,groupnum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numGroupItem2Idx</Name>
				<Source><![CDATA[
    /*
    Returns index of the itemId in the stated group container.
    */
    Integer numGroupItem2Idx(
        Integer     num,        // Num of group container
        ItemId      itemId
        )
    {
        return conFind(this.getArrayValue(itemConList,num),itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numGroupItem2NumItem</Name>
				<Source><![CDATA[
    /*MAN
    Returns number of item for the given group and itemid
    */
    Integer numGroupItem2NumItem(
        Integer         _groupNum,
        ItemId          _itemId
        )
    {
        Integer             levelNum;
        Integer             groupNum;
        container           c;
        Integer             idx;

        [levelNum,groupNum]  = this.numGroup2Derived(_groupNum);

        if (! levelNum)
        {
            return 0;
        }

        c = this.levelGroup2ValuesNumCon(levelNum,groupNum);

        idx = conFind(c,this.numGroupItem2Idx(_groupNum,_itemId));
        if (idx)
        {
            c = this.levelGroup2GroupCon(levelNum,groupNum);
            return conPeek(c,idx);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numItem2BOMId</Name>
				<Source><![CDATA[
    BOMId numItem2BOMId(Integer num)
    {
        return this.getArrayValue(itemBOMList,num);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numItem2Derived</Name>
				<Source><![CDATA[
    container numItem2Derived(Integer num)
    {
        return this.getArrayValue(derivedRouteConList,num);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numItem2ItemId</Name>
				<Source><![CDATA[
    ItemId numItem2ItemId(Integer indexSpec)
    {
        if (indexSpec)
        {
            return this.getArrayValue(itemNumList,indexSpec);
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>numItem2Level</Name>
				<Source><![CDATA[
    Level numItem2Level(Integer itemNum)
    {
        container c = this.numItem2LevelGroupNum(itemNum);

        if (c)
        {
            return conPeek(c,1);
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>numItem2LevelGroupNum</Name>
				<Source><![CDATA[
    container numItem2LevelGroupNum(Integer num)
    {
        return this.getArrayValue(itemLevelConList,num);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        // Avoid calling .pack() on the objects in CurrentListCon if they aren't initialized.
        if (groupList)
        {
            return [#CurrentVersion, super(), #CurrentList, #CurrentListCon(.pack())];
        }
        else
        {
            return [#CurrentVersion, super(), #CurrentList];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    public void reset()
    {
        super();

        numOfGroup              = 0;
        presNumGroup            = 0;
        groupList               = new Array(Types::String);
        groupAttachedToList     = new Array(Types::Integer);
        groupLevelConList       = new Array(Types::Container);
        groupRouteRecIdList     = new Array(typeName2Type(extendedTypeStr(RecId)));
        derivedRouteConList     = new Array(Types::Container);
        itemConList             = new Array(Types::Container);
        activeConList           = new Array(Types::Container);
        bomRecIdConList         = new Array(Types::Container);

        numOfItem               = 0;
        presNumItem             = 0;
        itemNumList             = new Array(Types::String);
        itemLevelConList        = new Array(Types::Container);
        itemBOMList             = new Array(Types::String);
        derivedValuesConList    = new Array(Types::Container);

        levelConList            = new Array(Types::Container);
        levelGroupList          = new Array(Types::Integer);
        levelIsCountedList      = new Array(Types::Enum);

        data                    = new Map(Types::Integer,Types::Container);
        restartedSet            = new Set(Types::Integer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>scan</Name>
				<Source><![CDATA[
    void scan(ItemId itemId, BOMId bomId)
    {
        this.reset();
        this.initPrefixProgress();
        this.addItem(InventTable::find(itemId),bomId);
        presNumItem = 1;
        this.scanDown(itemId,bomId);
        progress.reset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>scanDownRoute</Name>
				<Source><![CDATA[
    protected boolean scanDownRoute(
        BOM             bomLine,
        ConfigItemNum   parentItemNum = 0  // Used when restarting
        )
    {
        boolean     ret;
        Integer     lastItemNum     = presNumItem;

        if (parentItemNum)
        {
            restartedSet.add(parentItemNum);
        }
        else
        {
            restartedSet.add(numOfItem);
            presNumItem = numOfItem;
        }

        ret = super(bomLine);

        presNumItem = lastItemNum;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scanDownRouteRestart</Name>
				<Source><![CDATA[
    void scanDownRouteRestart(int itemNum)
    {
        RecId                   recId;
        BOM                     bom;
        container               c;

        if (itemNum == 1)
        {
            return;
        }

        if (restartedSet.in(itemNum))
        {
            return;
        }

        if (! data.exists(itemNum))
        {
            return;
        }

        c = data.lookup(itemNum);

        [#dataList(,presNumItem)] = c;

        bom = BOM::findRecId(recId);
        if (! bom)
                return;

        this.initPrefixProgress();
        this.parmStopLevel(presLevel+4);
        this.scanDownRoute(bom,itemNum);
        progress.reset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchDownBOM</Name>
				<Source><![CDATA[
    protected boolean searchDownBOM(
        BOMId               bomId,
        ConfigGroupId       groupId,
        RecId               configRouteRecId
        )
    {
        Integer     lastFatherNum = presNumGroup;
        Integer     levelGroupNum;
        Integer     levelGroupNumNum;
        boolean     ret;

        numOfGroup++;
        groupList.value(numOfGroup,groupId);
        groupAttachedToList.value(numOfGroup,presNumItem);
        groupRouteRecIdList.value(numOfGroup,configRouteRecId);

        levelGroupNum                   = this.insertGroupInLevel();
        levelGroupNumNum                = this.levelGroupNumGroup(presLevel,levelGroupNum);
        groupLevelConList.value(numOfGroup,[presLevel,levelGroupNum,levelGroupNum]);

        presNumGroup    = numOfGroup;
        ret = super(bomId,groupId,configRouteRecId);
        presNumGroup    = lastFatherNum;

        levelIsCountedList.value(presLevel,false);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchDownRoute</Name>
				<Source><![CDATA[
    protected boolean searchDownRoute(
        ItemId  itemId,
        BOMId   bomId,
        RecId   bomRecId
        )
    {
        boolean     ret;
        InventTable inventTable = InventTable::find(itemId);

        if (inventTable.isConfigurable())
        {
            ret = super(itemId,bomId,bomRecId);
        }

        if (presLevel)
        {
            levelIsCountedList.value(presLevel,false);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setArrayValue</Name>
				<Source><![CDATA[
    public void setArrayValue(Array a, int _index, anytype _arg)
    {
        a.value(_index, _arg);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        #localmacro.LegacyList
            versDate,
            siteId,
            maxLevel,
            stopLevel,
            numOfGroup,
            numOfItem
        #endmacro

        container   groupListCon,
                    groupAttachedToListCon,
                    groupLevelConListCon,
                    groupRouteRecIdListCon,
                    derivedValuesConListCon,
                    itemConListCon,
                    activeConListcon,
                    bomRecIdConListCon;
        container   itemNumListCon,itemLevelConListCon,itemBOMListCon,derivedRouteConListCon;
        container   levelConListCon,levelGroupListCon,levelIsCountedListCon;
        container   dataCon,restartedSetCon;

        container   packedSuperClass;

        boolean ret;
        Integer version;

        if (typeOf(conPeek(packedClass, 1)) == Types::Date)
        {
            // unpack legacy container without version number
            //no containers - only versDate, siteId, maxLevel, stopLevel, numOfGroup, numOfItem fields
            if (conLen(packedClass) == 6)
            {
                [#LegacyList] = packedClass;
            }
            else
            {
                [#LegacyList, #currentListCon(Con)] = packedClass;
            }
            ret = true;
        }
        else
        {
            // unpack proper container with version number
            version = conPeek(packedClass, 1);
            switch (version)
            {
                case #CurrentVersion:

                    if (conLen(packedClass) == 4)
                    {
                        [version, packedSuperClass, #currentList] = packedClass;
                    }
                    else
                    {
                        [version, packedSuperClass, #currentList, #currentListCon(Con)] = packedClass;
                    }

                    ret = super(packedSuperClass);

                    break;

                default:

                    ret = false;

                    break;
            }
        }

        // unpack class-type objects if they were initialized at the time of packing (see pack method).
        if (ret == true && conLen(groupListCon) > 1)
        {
            groupList               = Array::create(groupListCon);
            groupAttachedToList     = (groupAttachedToListCon)  ? Array::create(groupAttachedToListCon) : new Array(Types::Integer);
            groupLevelConList       = (groupLevelConListCon)    ? Array::create(groupLevelConListCon)   : new Array(Types::Container);
            groupRouteRecIdList     = (groupRouteRecIdListCon)  ? Array::create(groupRouteRecIdListCon) : new Array(typeName2Type(extendedTypeStr(RecId)));
            derivedValuesConList    = (derivedValuesConListCon) ? Array::create(derivedValuesConListCon): new Array(Types::Container);
            itemConList             = (itemConListCon)          ? Array::create(itemConListCon)         : new Array(Types::Container);
            activeConList           = (activeConListcon)        ? Array::create(activeConListcon)       : new Array(Types::Container);
            bomRecIdConList         = (bomRecIdConListCon)      ? Array::create(bomRecIdConListCon)     : new Array(Types::Container);
            itemNumList             = (itemNumListCon)          ? Array::create(itemNumListCon)         : new Array(Types::String);
            itemLevelConList        = (itemLevelConListCon)     ? Array::create(itemLevelConListCon)    : new Array(Types::Container);
            itemBOMList             = (itemBOMListCon)          ? Array::create(itemBOMListCon)         : new Array(Types::String);
            derivedRouteConList     = (derivedRouteConListCon)  ? Array::create(derivedRouteConListCon) : new Array(Types::Container);
            levelConList            = (levelConListCon)         ? Array::create(levelConListCon)        : new Array(Types::Container);
            levelGroupList          = (levelGroupListCon)       ? Array::create(levelGroupListCon)      : new Array(Types::Integer);
            levelIsCountedList      = (levelIsCountedListCon)   ? Array::create(levelIsCountedListCon)  : new Array(Types::Enum);
            data                    = (dataCon)                 ? Map::create(dataCon)                  : new Map(Types::Integer,Types::Container);
            restartedSet            = (restartedSetCon)         ? Set::create(restartedSetCon)          : new Set(Types::Integer);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ConfigHierarchyChoose construct()
    {
        return new ConfigHierarchyChoose();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newOnServer</Name>
				<Source><![CDATA[
    static ConfigHierarchyChoose newOnServer(container c)
    {
        ConfigHierarchyChoose hierarchyChooseServer;

        hierarchyChooseServer = ConfigHierarchyChoose::construct();
        hierarchyChooseServer.unpack(c);

        return hierarchyChooseServer;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>