<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSControlOutboundCatchWeightTag</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSControlOutboundCatchWeightTag</c> class is responsible for handling the outbound catch weight tag controls on the mobile device.
/// </summary>
#WHSRF
[WhsControlFactory(#OutboundCatchWeightTag)]
public class WHSControlOutboundCatchWeightTag extends WhsControl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the outbound catch weight tag control.
    /// </summary>
    /// <returns>true if processing succeeded; otherwise, false.</returns>
    public boolean process()
    {
        WHSCatchWeightTagNumber tagNumber = this.parmData();

        if (!this.validateOutboundCWTag(tagNumber))
        {
            return this.fail("@WAX:MobileDeviceControlValidationInvalidCatchWeightTag");
        }

        if (!WHSCatchWeightTagStatus::isActive(tagNumber))
        {
            return this.fail(strFmt("@WAX:MobileDeviceControlValidationCatchWeightTagInvalidStatus", tagNumber));
        }

        fieldValues.insert(WHSWorkExecuteDisplayCatchWeightControls::OutboundCatchWeightTag, this.parmData());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOutboundCWTag</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the catch weight tag.
    /// </summary>
    /// <param name = "_tagNumber">The tag number to validate.</param>
    /// <returns>true if the validation succeeds; otherwise, false.</returns>
    private boolean validateOutboundCWTag(WHSCatchWeightTagNumber _tagNumber)
    {
        boolean ret = true;

        WHSCatchWeightTag catchWeightTag = WHSCatchWeightTag::find(_tagNumber);
        WHSWorkLine workLine = controlData.parmWorkLine();

        // Ensure the tag exists.
        if (!catchWeightTag
        ||  catchWeightTag.ItemId != workLine.ItemId)
        {
            ret = false;
        }

        if (ret)
        {
            // Validate inventory dimensions match
            InventDim tagInventDim = InventDim::find(catchWeightTag.InventDimId);
            
            InventDim workInventDim;

            if (WHSInventTable::catchWeightTagDimensionTrackingMethod(workLine.ItemId) == WHSCatchWeightTagDimensionTrackingMethod::ProductTrackingAndAllStorageDimensions)
            {
                workInventDim = pass.createInventDimFromPass();

                if (mode == WHSWorkExecuteMode::MovementByTemplate && pass.lookupStr(#InventoryStatus) != pass.lookupStr(#FromInventoryStatus))
                {
                    workInventDim.InventStatusId = pass.lookupStr(#FromInventoryStatus);
                    workInventDim = InventDim::findOrCreate(workInventDim);
                }

                // Some dimensions may not have been set or prompted for so clear those before comparing.
                InventDimParm clearDimParm = workInventDim.toDimParm();
                tagInventDim.clearNotSelectedDim(clearDimParm);
            }
            else
            {
                InventDimID workInventDimId = WHSCatchWeightTag::inventDimWithTagSpecificDimensions(workLine.inventDim(), workLine.ItemId);
                workInventDim = InventDim::find(workInventDimId);

                // In case of outbound scenario's workline does not have dimension below values and user is not prompted to enter dimension below values either.
                tagInventDim.clearLocationAndBelowDim(workLine.ItemId);
                workInventDim.clearLocationAndBelowDim(workLine.ItemId);
            }

            ret = InventDim::isInventDimEqual(tagInventDim, workInventDim);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultValueToBlank</Name>
				<Source><![CDATA[
    protected boolean defaultValueToBlank()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQueryValidTagsForOutboundProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a query to retrieve all the catch weight tags for outbound processing that would be considered valid by this class.
    /// </summary>
    /// <param name = "_inventDim">The inventory dimensions to use for identifying the catch weight tags.</param>
    /// <param name = "_workLine">The record in the <c>WHSWorkLine</c> table.</param>
    /// <returns>A new query object with <c>WHSCatchWeightTag</c> as the primary table that matches tags that are valid for outbound processing on the given work line and dimensions.</returns>
    /// <remarks>
    /// Only call this method for catch weight items that are tag tracked with a policy for tag dimension tracking of all storage dimensions; otherwise, this
    /// will throw an exception.
    /// </remarks>
    [Hookable(false)]
    internal static Query createQueryValidTagsForOutboundProcessing(InventDim _inventDim, WHSWorkLine _workLine)
    {
        if (WHSInventTable::catchWeightTagDimensionTrackingMethod(_workLine.ItemId) != WHSCatchWeightTagDimensionTrackingMethod::ProductTrackingAndAllStorageDimensions)
        {
            throw error(strFmt("@WAX:CatchWeightTagExactPickNotFullDimTrackError", _workLine.ItemId));
        }

        Query query = new Query();

        QueryBuildDataSource dsCatchWeightTag = query.addDataSource(tableNum(WHSCatchWeightTag));
        dsCatchWeightTag.addRange(fieldNum(WHSCatchWeightTag, ItemId)).value(SysQuery::value(_workLine.ItemId));

        WHSCatchWeightTagStatus::addRangeIsActive(dsCatchWeightTag);

        QueryBuildDataSource dsInventDim = dsCatchWeightTag.addDataSource(tableNum(InventDim));
        dsInventDim.joinMode(JoinMode::ExistsJoin);
        dsInventDim.addLink(fieldNum(WHSCatchWeightTag, InventDimId), fieldNum(InventDim, InventDimId));
        InventDim::queryAddRangeCriteriaForSelectedDims(dsInventDim, _inventDim, _inventDim.toDimParm());

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>