<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntercompanySalesTableSyncNotesTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>IntercompanySalesTableSyncNotesTask</c> class handles the transfer of documents when it is
///    called from the <c>SalesTable</c> table.
/// </summary>
class IntercompanySalesTableSyncNotesTask extends IntercompanySyncNotesTask
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>synchronizeCommon</Name>
				<Source><![CDATA[
        protected void synchronizeCommon()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().interCompanyActivities().synchronizeCommon(this.parmDocRefRecId(), this.parmRefCompanyId(), this.parmRefTableId(), this.parmRefRecId()))
        {
        
            changecompany(refCompanyId)
            {
                setprefix(strfmt("@SYS93821",TradeInterCompany::curCompanyName()));

                PurchTable  purchTable;
                DocuRef     fromDocuRef;
                SalesTable  salesTable = SalesTable::findRecId(refRecId);

                if (salesTable.InterCompanyCompanyId
                    && salesTable.InterCompanyPurchId)
                {
                    boolean docuRefExists;
                    //
                    //  Delete all notes on associated purchorder in other company
                    //
                    // No need to delete all notes in order to improve performance if new notes are created
                    if (!this.isCreatedDocu())
                    {
                        changecompany(salesTable.InterCompanyCompanyId)
                        {
                            setprefix(strfmt("@SYS93821",TradeInterCompany::curCompanyName()));

                            select purchTable
                            where purchTable.PurchId == salesTable.InterCompanyPurchId
                                && purchTable.RecId   != fromRecId;
                            if (purchTable.RecId)
                            {
                                if (TradeInterCompanyDoNotSynchronizeNotesIfExistsFlight::instance().isEnabled() && this.parmIsInitialSync())
                                {
                                    docuRefExists = this.deleteDocuRefExists(purchTable, salesTable.RecId);
                                }
                                else
                                {
                                    this.deleteDocuRef(purchTable, salesTable.RecId);
                                }
                            }
                        }
                    }
                    //
                    //  Create all notes on associated purchorder in other company
                    //

                    if ((!docuRefExists && this.parmIsInitialSync())
                        || !TradeInterCompanyDoNotSynchronizeNotesIfExistsFlight::instance().isEnabled()
                        || !this.parmIsInitialSync())
                    {
                        while select fromDocuRef
                        where fromDocuRef.RefCompanyId == salesTable.DataAreaId
                            && fromDocuRef.RefTableId   == salesTable.TableId
                            && fromDocuRef.RefRecId     == salesTable.RecId
                            // Only process new created notes if new notes are created
                            && (fromDocuRef.RecId       == this.parmDocRefRecId() || !this.isCreatedDocu())
                            && (!this.shouldUseCreatedDateTimeOfDocuRefBeingWritten() || fromDocuRef.CreatedDateTime == docuRefBeingWritten.CreatedDateTime)
                        {
                            if (this.validateDocuRefTypeGroup(fromDocuRef))
                            {
                                changecompany(salesTable.InterCompanyCompanyId)
                                {
                                    setprefix(strfmt("@SYS93821",TradeInterCompany::curCompanyName()));

                                    purchTable = null;
                                    select purchTable
                                where purchTable.PurchId == salesTable.InterCompanyPurchId
                                    && purchTable.RecId   != fromRecId;
                                    if (purchTable.RecId)
                                    {
                                        this.writeDocuRef(purchTable,fromDocuRef,salesTable.RecId);
                                    }
                                }
                            }
                        }
                    }
                
                }

                if (salesTable.SalesId)
                {
                    purchTable = null;
                    boolean docuRefExists;
                    InterCompanyPurchSalesReference interCompanyPurchSalesReference;

                    while select forceplaceholders PurchId from interCompanyPurchSalesReference
                        where interCompanyPurchSalesReference.SalesId == salesTable.SalesId
                        join DataAreaId, TableId, RecId from purchTable
                            where purchTable.PurchId == interCompanyPurchSalesReference.PurchId
                                && purchTable.InterCompanyOriginalSalesId
                                && purchTable.InterCompanyOrder
                                && purchTable.RecId   != fromRecId
                    {
                        if (!this.isCreatedDocu())
                        {
                            //
                            //  Delete all notes on associated purchorder in same company
                            //
                            if (TradeInterCompanyDoNotSynchronizeNotesIfExistsFlight::instance().isEnabled() && this.parmIsInitialSync())
                            {
                                docuRefExists = this.deleteDocuRefExists(purchTable, salesTable.RecId);
                            }
                            else
                            {
                                this.deleteDocuRef(purchTable, salesTable.RecId);
                            }
                        
                        }
                        //
                        //  Create all notes on associated purchorder in same company
                        //
                        if ((!docuRefExists && this.parmIsInitialSync())
                            || !TradeInterCompanyDoNotSynchronizeNotesIfExistsFlight::instance().isEnabled()
                            || !this.parmIsInitialSync())
                        {
                            while select fromDocuRef
                            where fromDocuRef.RefCompanyId == salesTable.DataAreaId
                                && fromDocuRef.RefTableId   == salesTable.TableId
                                && fromDocuRef.RefRecId     == salesTable.RecId
                                // Only process new created notes if new notes are created
                                && (fromDocuRef.RecId       == this.parmDocRefRecId() || !this.isCreatedDocu())
                                && (!this.shouldUseCreatedDateTimeOfDocuRefBeingWritten() || fromDocuRef.CreatedDateTime == docuRefBeingWritten.CreatedDateTime)

                            {
                                if (this.validateDocuRefTypeGroup(fromDocuRef))
                                {
                                    this.writeDocuRef(purchTable,fromDocuRef,salesTable.RecId);
                                }
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDocuRefTypeGroup</Name>
				<Source><![CDATA[
    protected boolean validateDocuRefTypeGroup(DocuRef _docuRef)
    {
        if (IntercompanySyncNotesTaskWriteDocuRefCheckFlight::instance().isEnabled())
        {
            return this.canWriteDocuRef(_docuRef);
        }
        else
        {
            return _docuRef.docuType().TypeGroup == DocuTypeGroup::Note;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static IntercompanySalesTableSyncNotesTask construct()
    {
        return new IntercompanySalesTableSyncNotesTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUseCreatedDateTimeOfDocuRefBeingWritten</Name>
				<Source><![CDATA[
    protected boolean shouldUseCreatedDateTimeOfDocuRefBeingWritten()
    {
        return docuRefBeingWritten.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>