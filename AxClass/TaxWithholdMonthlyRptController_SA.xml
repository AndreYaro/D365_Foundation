<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdMonthlyRptController_SA</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxWithholdMonthlyRptController_SA</c> class is a report controller class that is used by
/// the Saudi Arabia Monthly Withholding Tax report.
/// </summary>
class TaxWithholdMonthlyRptController_SA extends SrsReportRunController implements BatchRetryable
{
    protected int totalRecords;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceSA00002, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>needDetailList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a detail list report is needed for the monthly withholding report.
    /// </summary>
    /// <returns>
    /// true if a detail list report is needed; otherwise, false.
    /// </returns>
    public boolean needDetailList()
    {
        return totalRecords > 2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        super();
        this.setRangeParm(this.parmReportContract().parmRdlContract(), this.getFirstQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRangeParm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the report data source, depending on the user input.
    /// </summary>
    /// <param name="contract">
    /// The report contract.
    /// </param>
    /// <param name="reportQuery">
    /// The report query.
    /// </param>
    public void setRangeParm(TaxWithholdMonthlyRptRdlContract_SA contract, Query reportQuery)
    {
        CompanyInfo companyInfo = CompanyInfo::find();
        TaxWithholdReportPeriod_TH taxWithholdReportPeriod_TH = TaxWithholdReportPeriod_TH::findByPeriodWithholdDate(
            contract.parmTaxWithholdPeriodId(),
            contract.parmTaxWithholdFromDate());

        date taxWithholdFromDate = taxWithholdReportPeriod_TH.TaxWithholdFromDate;
        date taxWithholdToDate = taxWithholdReportPeriod_TH.TaxWithholdToDate;

        SrsReportHelper::addFromAndToDateRangeToQuery(
            reportQuery,
            taxWithholdFromDate,
            taxWithholdToDate,
            tableNum(TaxWithholdTrans),
            fieldNum(TaxWithholdTrans, TransDate));
        contract.parmTaxWithholdName(companyInfo.Name);
        contract.parmFinancialNo(companyInfo.CoRegNum);

        // get total records number of report data
        totalRecords = QueryRun::getQueryRowCount(reportQuery, intMax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        TaxWithholdMonthlyRptRdlContract_SA contract = this.parmReportContract().parmRdlContract() as TaxWithholdMonthlyRptRdlContract_SA;

        if (contract)
        {
            if (this.parmArgs() && this.parmArgs().parmObject())
            {
                TaxWithholdSettlement_TH whtSettlement = this.parmArgs().parmObject() as TaxWithholdSettlement_TH;
                if (whtSettlement)
                {
                    TaxWithholdPeriodId_TH taxWithholdPeriodRecId = whtSettlement.taxWithholdPeriodRecId();
                    FromDate taxWithholdFromDate = whtSettlement.fromDate();

                    MonthName taxWithholdMonth = mthName(mthOfYr(taxWithholdFromDate));
                    FiscalYearName taxWithholdYear = int2Str(year(taxWithholdFromDate));
                    FiscalYearName fiscalYear = FiscalCalendarYear::findYearByCalendarDate(CompanyInfoHelper::fiscalCalendarRecId(), taxWithholdFromDate).Name;

                    CompanyInfo companyInfo = CompanyInfo::find();

                    contract.parmTaxWithholdFromDate(taxWithholdFromDate);
                    contract.parmTaxWithholdPeriod(TaxWithholdPeriodHead_TH::find(taxWithholdPeriodRecId).TaxWithholdPeriod);
                    contract.parmTaxWithholdPeriodId();
                    contract.parmTaxWithholdMonth(taxWithholdMonth);
                    contract.parmTaxWithholdYear(taxWithholdYear);
                    contract.parmFiscalYear(fiscalYear);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceSA00003, funcName());

        TaxWithholdMonthlyRptController_SA controller = new TaxWithholdMonthlyRptController_SA();
        controller.parmReportName(ssrsReportStr(TaxWithholdMonthlyReport_SA, Report));
        controller.parmDialogCaption("@SYS342870"); // Saudi Arabia monthly withholding tax report
        controller.parmArgs(_args);
        controller.startOperation();

        // lanuch detail list report of monthly withholding tax
        if (controller.needDetailList())
        {
            Object detailListController = new TaxWithholdMonthlyRptDetailListController_SA();
            detailListController.parmReportName(ssrsReportStr(TaxWithholdMonthlyReport_SA, DetailList));
            detailListController.parmDialogCaption("@SYS342870"); // Saudi Arabia monthly withholding tax report
            detailListController.parmShowDialog(false);
            detailListController.parmArgs(_args);
            detailListController.startOperation();
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>