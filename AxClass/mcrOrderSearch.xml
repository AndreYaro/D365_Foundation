<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>mcrOrderSearch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCROrderSearch</c> class manages order search.
/// </summary>
internal class MCROrderSearch
{
    const str MCROrderSearchType = 'MCROrderSearchType';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getOrderSearchType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the user's saved order search type.
    /// </summary>
    /// <returns>
    /// Returns a <c>MCROrderSearchType</c> enum value.
    /// </returns>
    /// <remarks>
    /// The hard coded value of '2' in the following call says to get the second
    /// value of the stored container, which always stores the 'version' in the
    /// first element, and then the actual value in the second element.
    /// See the saveOrderSearchType method's comment mentioning 'version'.
    /// </remarks>
    internal static MCROrderSearchType getOrderSearchType()
    {
        return conPeek(xSysLastValue::getValue(curext(),
                        curUserId(),
                        UtilElementType::Enum,
                        MCROrderSearchType,
                        MCROrderSearchType),
                        2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>launchSearchForm</Name>
				<Source><![CDATA[
    private static AccountNum launchSearchForm(str _searchText,
                                               MCROrderSearchType _searchType,
                                               Object _callingForm = null,
                                               List _searchResults = null)
    {
        str formToLaunch = formStr(MCROrderSearch);
        Args formArgs = new Args(formToLaunch);

        formArgs.parm(_searchText);
        formArgs.caller(_callingForm);
        formArgs.parmObject(_searchResults);
        formArgs.parmEnumeration(_searchType);

        FormRun formRun = classfactory.formRunClass(formArgs);
        formRun.init();
        formRun.run();
        formRun.wait();

        return formArgs.parm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveOrderSearchType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the user's order search type.
    /// </summary>
    /// <param name="_orderSearchType">
    /// A <c>MCROrderSearchType</c> enum value.
    /// </param>
    /// <remarks>
    /// The hard-coded default value of 1 here is the
    /// 'version' of the value saved.
    /// </remarks>
    internal static void saveOrderSearchType(MCROrderSearchType _orderSearchType)
    {
        xSysLastValue::putValue(
            [1, _orderSearchType],
            curext(),
            curUserId(),
            UtilElementType::Enum,
            MCROrderSearchType,
            MCROrderSearchType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>search</Name>
				<Source><![CDATA[
    /// <summary>
    /// Search for an order matching the given text and type.
    /// Results are a <c>List</c> of <c>TmpMCROrderSearchTable</c> values.
    /// </summary>
    /// <param name="_searchType">
    /// The value to search by (e.g. receipt id)
    /// </param>
    /// <returns>
    /// A <c>List</c> of <c>TmpMCROrderSearchTable</c> values.
    /// </returns>
    [Wrappable]
    internal static List search(str _searchText, MCROrderSearchType _searchType)
    {
        // The temp table that serves as the backing data for the form.
        // Populated by the search logic.
        TmpMCROrderSearchTable  tmpMCROrderSearchTable;

        container               conSearchTokens;
        SalesTable              salesTable;
        RetailTransactionTable  retailTransactionTable;
        RetailChannelTable      retailChannelTable;

        List                        ordersFound = new List(Types::Record);
        MCRFullTextParameters       mcrFullTextParameters = MCRFullTextParameters::find();

        // Here we substitute * for % for sql-like queries
        _searchText = strReplace(_searchText, '%', '*');
        conSearchTokens += _searchText;

        // Added search limit, based on the current functionality that non default searches
        // will contain only one token.
        switch (_searchType)
        {
            case MCROrderSearchType::ReceiptId:
                // Search for sales order using receipt id
                for (int counter = 1; counter <= conLen(conSearchTokens); counter++)
                {
                    str 75 searchToken = conPeek(conSearchTokens, counter);

                    while select RecId from salesTable
                        exists join receiptId, salesOrderId from retailTransactionTable
                        where salesTable.SalesId == retailTransactionTable.salesOrderId
                        && retailTransactionTable.receiptId like searchToken
                    {
                        if (TmpMCROrderSearchTable.addSalesRecord(salesTable.RecId))
                        {
                            ordersFound.addEnd(TmpMCROrderSearchTable);
                        }

                        if (mcrFullTextParameters.NumResults <= ordersFound.elements())
                        {
                            break;
                        }
                    }
                }
                break;

            case MCROrderSearchType::ChannelReferenceId:
                // Search for sales order using channel reference
                for (int counter = 1; counter <= conLen(conSearchTokens); counter++)
                {
                    str 75 searchToken = conPeek(conSearchTokens, counter);

                    while select RecId from salesTable
                        exists join ChannelReferenceId, SalesOrderId from retailTransactionTable
                            where salesTable.SalesId == retailTransactionTable.SalesOrderId
                            && retailTransactionTable.ChannelReferenceId like searchToken
                        exists join ChannelType, RecId from retailChannelTable
                            where salesTable.RetailChannelTable == retailChannelTable.RecId
                            && (retailChannelTable.ChannelType == RetailChannelType::OnlineStore
                                || retailChannelTable.ChannelType == RetailChannelType::OnlineMarketplace
                                || retailChannelTable.ChannelType == RetailChannelType::SharePointOnlineStore)
                    {
                        if (TmpMCROrderSearchTable.addSalesRecord(salesTable.RecId))
                        {
                            ordersFound.addEnd(TmpMCROrderSearchTable);
                        }

                        if (mcrFullTextParameters.NumResults <= ordersFound.elements())
                        {
                            break;
                        }
                    }
                }
                break;

            case MCROrderSearchType::SalesId:
                // Search for sales order using sales order number
                for (int counter = 1; counter <= conLen(conSearchTokens); counter++)
                {
                    str 75 searchToken = conPeek(conSearchTokens, counter);

                    while select RecId from salesTable
                        where salesTable.SalesId like searchToken
                    {
                        if (TmpMCROrderSearchTable.addSalesRecord(salesTable.RecId))
                        {
                            ordersFound.addEnd(TmpMCROrderSearchTable);
                        }

                        if (mcrFullTextParameters.NumResults <= ordersFound.elements())
                        {
                            break;
                        }
                    }
                }
                break;

            default:
                // Do nothing as MCROrderSearchType is extensible and CoC might handle new enum elements.
        }

        return ordersFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchDisplayForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates order search form.
    /// </summary>
    /// <param name="_searchText">
    /// The search text entered by user.
    /// </param>
    /// <param name="_searchType">
    /// The search type to be used.
    /// </param>
    /// <param name="_callingForm">
    /// The form object that invoked this.
    /// </param>
    /// <returns>
    /// A sales order identifier value.
    /// </returns>
    internal static List searchDisplayForm(str _searchText, MCROrderSearchType _searchType, Object _callingForm = null)
    {
        List salesIds;
        MCROrderSearch          mcrOrderSearch = new MCROrderSearch();
        TmpMCROrderSearchTable  tmpMCROrderSearchTable;

        delete_from tmpMCROrderSearchTable;

        if (!_searchText)
        {
            salesIds = strSplit(MCROrderSearch::launchSearchForm(_searchText, _searchType, _callingForm),',');
            return salesIds;
        }

        List orderSearchResults = MCROrderSearch::search(_searchText, _searchType);

        // Returns account number immediately if there is only one result returned
        // from the search, and "Automatically fill order search" parameter is on.
        // changed search to use a temporary table rather than a container.
        MCRFullTextParameters mcrFullTextParameters = MCRFullTextParameters::find();
        if (orderSearchResults.elements() == 1 && mcrFullTextParameters.AutoFillCustSearch)
        {
            ListEnumerator enum = orderSearchResults.getEnumerator();
            enum.moveNext();

            TmpMCROrderSearchTable tmpTable = enum.current();

            salesIds = strSplit(tmpTable.SalesId,',');
            return salesIds;
        }
        else
        {
            salesIds = strSplit(MCROrderSearch::launchSearchForm(_searchText, _searchType, _callingForm, orderSearchResults),',');
            return salesIds;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>