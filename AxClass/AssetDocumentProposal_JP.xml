<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDocumentProposal_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Asset document proposal processor.
/// </summary>
class AssetDocumentProposal_JP extends AssetProposal implements BatchRetryable
{
    AssetDocumentProposalType_JP   assetDocumentProposalType;
    AssetDocumentType_JP           assetDocumentType;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        assetDocumentProposalType,
        assetDocumentType
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmAssetDocumentProposalType</Name>
				<Source><![CDATA[
    public AssetDocumentProposalType_JP parmAssetDocumentProposalType(AssetDocumentProposalType_JP _assetDocumentProposalType = assetDocumentProposalType)
    {
        assetDocumentProposalType = _assetDocumentProposalType;
        this.parmAssetTransType(AssetDocumentProposal_JP::assetDocProposalTypeToAssetTransType(assetDocumentProposalType));

        return assetDocumentProposalType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetDocumentType</Name>
				<Source><![CDATA[
    public AssetDocumentType_JP parmAssetDocumentType(AssetDocumentType_JP _assetDocumentType = assetDocumentType)
    {
        assetDocumentType = _assetDocumentType;

        return assetDocumentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetDocProposalTypeToAssetTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers asset document proposal type to asset transaction type.
    /// </summary>
    /// <param name="_assetDocumentProposalType">
    /// The asset document proposal type.
    /// </param>
    /// <returns>
    /// The asset transaction type.
    /// </returns>
    public static AssetTransType assetDocProposalTypeToAssetTransType(AssetDocumentProposalType_JP  _assetDocumentProposalType)
    {
        AssetTransType assetTransTypeLoc = AssetTransType::None;

        switch (_assetDocumentProposalType)
        {
            case AssetDocumentProposalType_JP::AcquisitionReductionEntry:
            case AssetDocumentProposalType_JP::CapitalizedAssetRetirementObligation:
                assetTransTypeLoc = AssetTransType::Acquisition;
                break;

            case AssetDocumentProposalType_JP::ExpensedAssetRetirementObligation:
                assetTransTypeLoc = AssetTransType::AssetRetirementObligationInterest_JP;
                break;
        }

        return assetTransTypeLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constucts an asset document proposal processor.
    /// </summary>
    /// <param name="_assetDocumentProposalType">
    /// The asset document proposal type.
    /// </param>
    /// <returns>
    /// An asset document proposal processor.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws out exception when unknown proposal type imported.
    /// </exception>
    public static AssetDocumentProposal_JP construct(AssetDocumentProposalType_JP  _assetDocumentProposalType)
    {
        AssetDocumentProposal_JP assetProposal;

        assetProposal = SysExtensionAppClassFactory::getClassFromSysAttribute(
            classStr(AssetDocumentProposal_JP),
            new AssetDocumentProposalTypeAttribute_JP(_assetDocumentProposalType));
        if (assetProposal == null)
        {
            throw error("@SYS67581");
        }

        assetProposal.parmAssetDocumentProposalType(_assetDocumentProposalType);
        return assetProposal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        container       base;
        boolean         ret;
        Integer         version    = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = _packedClass;
                ret = super(base);
                break;
            default:
                ret = false;
                break;
        }

        return  ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>