<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsUpdateDispositionStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Update batch disposition status code.
/// </summary>
/// <remarks>
/// The class will use either an active inventBatch record or the values used
/// in the last instance of the class.
/// </remarks>
class PdsUpdateDispositionStatus extends RunBaseBatch implements BatchRetryable
{
    PdsDispositionCode      pdsNewDispositionCode;
    boolean                 pdsCaller;
    InventBatchId           pdsInventBatchId;

    Query                   query;
    SysQueryRun             queryRun;

    DialogField             dlgNewCode;

    #define.CurrentVersion(2)
    #localmacro.CurrentList
        pdsNewDispositionCode
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// May the class run as part of a batch operation
    /// </summary>
    /// <returns>
    /// Returns true.
    /// </returns>
    /// <remarks>
    /// As the class my be run as a batch job, method returns true.
    /// </remarks>
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// User dialog for collection of disposition code information
    /// </summary>
    /// <returns>
    /// Initialized user dialog
    /// </returns>
    /// <remarks>
    /// The user is presented a dialog to select a new disposition code
    /// for the batch.
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase       dialog = super();

        dialog.addGroup("@PRO189");
        dlgNewCode = dialog.addFieldValue(
                        extendedtypestr(PdsDispositionCode),
                        pdsNewDispositionCode,
                        "@PRO188");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get infromation entered by user
    /// </summary>
    /// <returns>
    /// Super call returns value from <c>RunBaseBatch</c> class.
    /// </returns>
    /// <remarks>
    /// Method retreives the information entered by user and set the class
    /// variable pdsNewDispositionCode.
    /// </remarks>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        pdsNewDispositionCode = dlgNewCode.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the query used by the class
    /// </summary>
    /// <remarks>
    /// Initialize the query used by the class
    /// </remarks>
    public void initParmDefault()
    {
        this.initQuery();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the query used by the class
    /// </summary>
    /// <remarks>
    /// The query initialized for InventBatch table with be keyed to search on the
    /// ItemId and InventBatchId.
    /// </remarks>
    public void initQuery()
    {
        query = new Query();

        query.addDataSource(tablenum(InventBatch));
        query.dataSourceNo(1).addRange(fieldnum(InventBatch, ItemId));
        query.dataSourceNo(1).addRange(fieldnum(InventBatch, InventBatchId));

        queryRun = new SysQueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container packedQueryRun = queryRun != null ? queryRun.pack() : conNull();

        return [#CurrentVersion, #CurrentList, packedQueryRun];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryrun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Current QueryRun Object
    /// </summary>
    /// <returns>
    /// Method returns current QueryRun Object
    /// </returns>
    /// <remarks>
    /// The current queryRun object is return without any modifications
    /// </remarks>
    public QueryRun queryrun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the batch disposition status code.
    /// </summary>
    public void run()
    {
        InventBatch                     pdsInventBatch, pdsNewInventBatch;
        PdsHistoryInventDisposition     pdsHistoryInventDisposition;
        boolean                         pdsValueUpdate = false;
        
        super();

        this.validatePrerequisites();

        while (queryRun.next())
        {
            pdsInventBatch = queryRun.getNo(1);
            pdsNewInventBatch = InventBatch::find(
                                    pdsInventBatch.InventBatchId,
                                    pdsInventBatch.ItemId,
                                    true);
            if (#PdsBatchAttribEnabled
                && pdsNewInventBatch.pdsBatchAttribCheckMandatory()
                && !pdsNewInventBatch.pdsBatchAttribValidateMandatory())
            {
                error(strfmt(
                        "@PRO1685",
                        pdsNewInventBatch.pdsBatchAttribMandatory().
                            PdsBatchAttribId,
                        pdsInventBatch.InventBatchId));
                continue;
            }
            pdsNewInventBatch.PdsDispositionCode = pdsNewDispositionCode;

            try
            {
                ttsbegin;

                this.updateBatch(pdsNewInventBatch);

                pdsHistoryInventDisposition.ItemId              = pdsInventBatch.ItemId;
                pdsHistoryInventDisposition.InventBatchId       = pdsInventBatch.InventBatchId;
                pdsHistoryInventDisposition.OldDispositionCode  = pdsInventBatch.PdsDispositionCode;
                pdsHistoryInventDisposition.NewDispositionCode  = pdsNewInventBatch.PdsDispositionCode;
                pdsHistoryInventDisposition.insert();

                if (!pdsValueUpdate)
                {
                    pdsValueUpdate = true;
                }

                ttscommit;
            }
            catch
            {
                error(strFmt("@SCM:UpdateBatchDispositionStatusError",
                             pdsInventBatch.InventBatchId,
                             pdsInventBatch.itemId,
                             pdsInventBatch.PdsDispositionCode,
                             pdsNewInventBatch.PdsDispositionCode));
                continue;
            }
        }

        if (!pdsValueUpdate)
        {
            throw error("@PRO194");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePrerequisites</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates prerequisites for the batch update operation to run
    /// </summary>
    /// <exception cref="Exception::Error">
    /// If _pdsNewDispositionCode_ is null or does not exist.
    /// If _Query_ does not have _InventBatchId_ and _ItemId_ filters in the where clause.
    /// </exception>
    private void validatePrerequisites()
    {
        if (pdsNewDispositionCode != '' && !PdsDispositionMaster::exist(pdsNewDispositionCode))
        {
            throw error("@PRO211");
        }

        var currentQuery = queryRun.query();
        var inventBatchDataSource = currentQuery.dataSourceTable(tablenum(InventBatch));
        var qbrBatchId  = inventBatchDataSource.findRange(fieldnum(InventBatch, InventBatchId));
        var qbrItemId   = inventBatchDataSource.findRange(fieldnum(InventBatch, ItemId));

        if ((!qbrBatchId || qbrBatchId.value() == '') && (!qbrItemId || qbrItemId.value() == ''))
        {
            // If we did not find valid query ranges, then we need to look for query filters. Because when the user edits
            // the query the predicates in SysQueryForm are represented as QueryFilter objects, not QueryBuildRange
            var filterBatchId = currentQuery.findQueryFilter(inventBatchDataSource, fieldStr(InventBatch, inventBatchId));
            var filterItemId  = currentQuery.findQueryFilter(inventBatchDataSource, fieldStr(InventBatch, ItemId));

            if ((!filterBatchId || filterBatchId.value() == '') && (!filterItemId || filterItemId.value() == ''))
            {
                throw error("@PRO213");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Define if query values should be displayed
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// The method will always return true as the values will be shown.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean     ret = true;
        int         version = conpeek(_packedClass,1);
        container   packedQuery;

        this.initQuery();

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList, packedQuery] = _packedClass;
                if (conlen(packedQuery))
                {
                    queryRun = new SysQueryRun(packedQuery);
                }
                break;

            default :
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update <c>InventBatch</c> record
    /// </summary>
    /// <param name="_inventBatch">
    /// InventBatch record which to update
    /// </param>
    /// <remarks>
    /// Complete the standard update of the <c>InventBatch</c> record passed
    /// in the parameters.
    /// </remarks>
    protected void updateBatch(InventBatch _inventBatch)
    {
        _inventBatch.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PdsUpdateDispositionStatus construct()
    {
        return new PdsUpdateDispositionStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@PRO192";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        PdsUpdateDispositionStatus  pdsUpdateDispositionStatus = PdsUpdateDispositionStatus::construct();

        if (pdsUpdateDispositionStatus.prompt())
        {
            try
            {
                pdsUpdateDispositionStatus.runOperation();
                info("@PRO195");
            }
            catch (Exception::Error)
            {
                exceptionTextFallThrough();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>