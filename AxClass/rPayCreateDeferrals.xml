<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayCreateDeferrals</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rPayCreateDeferrals
{
    RDeferralsTable     deferralsTable;
    RDeferralsBook      deferralsBook;
    LedgerVoucher       ledgerVoucher;
    Common              document;
    KeySum              interval;
    RPayTable           rPayTableFuture;
    Map                 receiptLedgerAccount;
    Set                 postDeferrals;
    Map                 periodInterval;

    RDeferralsBookId    deferralsBookIdBase;
    int                 state;
    DimensionAttribute  profitTaxDimAttr;
    DimensionAttributeValue dimAttrValue;

    #define.NewDeferral(1)
    #define.UpdateModel(2)
    #define.AddModel   (3)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canCreateDeferral</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean canCreateDeferral()
    {
        RDeferralsTable deferralsTableLocal;
        RDeferralsTrans deferralsTrans;

        select firstonly RecId from deferralsTableLocal
            where deferralsTableLocal.RefRecId   == document.RecId &&
                  deferralsTableLocal.RefTableId == document.TableId
            exists join deferralsTrans
                where deferralsTrans.DeferralsId == deferralsTableLocal.DeferralsId   &&
                     !deferralsTrans.StornoRecId;

        return deferralsTableLocal.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDeferralsProfile</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkDeferralsProfile(RDeferralsBook _deferralsBook)
    {
        RDeferralsProfile   defrrralsProfile;
        boolean ret = true;

        defrrralsProfile = RDeferralsProfile::find(_deferralsBook.DeferralsProfile);

        if (defrrralsProfile.DeferralsMethod != RDeferralsMethod::Manual)
            ret = checkFailed("@RUP3104");

        if (defrrralsProfile.ManualCalcType != RDeferralsManualCalcType::Amount)
            ret = checkFailed("@RUP3112");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void create()
    {
        RPayTrans           payTrans;
        RPayTable           payTable;
        RPayDeferralsTable  payDeferralsTable;

        profitTaxDimAttr    = DimensionAttribute::find(RTax25Parameters::find().DimensionAttribute);
        deferralsBookIdBase = RDeferralsParameters::find().DeferralsBookIdDefault;

        ttsbegin;
        while select payTrans
            order by Emplid, SourceTableId, SourceRecId, SourceDate
            where payTrans.PayPeriod == RPayParameters::payPeriod() &&
                  payTrans.PayPeriod == payTrans.CorrectedPeriod
            join PayCtype from payTable
                where payTable.PayCtype == payTrans.PayCtype
            outer join rPayTableFuture
                where rPayTableFuture.PayCtype == payTable.DeferralsCType
            join payDeferralsTable
                where payDeferralsTable.PayCType == payTable.PayCtype
        {
            document = payTrans.sourceDocument();
            state    = 0;

            if (document.RecId)
            {
                if (this.canCreateDeferral())
                {
                    this.initDeferralsState(payTrans, payDeferralsTable);
                    this.initDeferralModel(payTrans, payDeferralsTable);
                }
            }
            else
                throw error("@RUP3106");
        }

        if (postDeferrals.elements())
            this.postDeferralsTrans();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDeferralAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initDeferralAmount(RPayTrans _payTrans)
    {
        RDeferralsBookAmount        deferralsBookAmount;
        RDeferralsIntervalNumber    intervalNum;
        int                         idx;

        #define.key(deferralsBookAmount.DeferralsBookId, deferralsBookAmount.DeferralsId)
        #define.intervalKey(deferralsBook.DeferralsBookId, deferralsBook.DeferralsId, _payTrans.SourceDate)

        if (periodInterval.exists([#intervalKey]))
        {
            intervalNum = periodInterval.lookup([#intervalKey]);
            deferralsBookAmount = RDeferralsBookAmount::find(deferralsBook.DeferralsId, deferralsBook.DeferralsBookId, intervalNum, true);
            deferralsBookAmount.Amount += round(abs(_payTrans.Amount),
                                                RDeferralsProfile::find(deferralsBook.DeferralsProfile).RoundOffOperation);
            deferralsBookAmount.update();
        }
        else
        {
            deferralsBookAmount.clear();
            deferralsBookAmount.DeferralsBookId = deferralsBook.DeferralsBookId;
            deferralsBookAmount.DeferralsId     = deferralsBook.DeferralsId;
            deferralsBookAmount.Amount          = round(abs(_payTrans.Amount),
                                                        RDeferralsProfile::find(deferralsBook.DeferralsProfile).RoundOffOperation);

            idx = interval.key2Index_W([#key]);

            if (idx)
            {
                intervalNum = interval.index2Data(idx) + 1;
            }
            else
            {
                intervalNum = 1;
            }

            interval.updateNow([#key], 1);
            deferralsBookAmount.Interval = intervalNum;
            deferralsBookAmount.insert();
            periodInterval.insert([#intervalKey], intervalNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDeferralModel</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initDeferralModel(RPayTrans _rPayTrans, RPayDeferralsTable _payDeferralsTable)
    {
        RDeferralsBookAmount    deferralsBookAmount;

        if (state == 0)
            return;

        if (state == #UpdateModel && !deferralsBook.Depreciate)
        {
            deferralsBook.DeferralsAmount += round(abs(_rPayTrans.Amount), RDeferralsProfile::find(deferralsBook.DeferralsProfile).RoundOffOperation);
        }
        else
        {
            deferralsBook.DeferralsId           = deferralsTable.DeferralsId;
            deferralsBook.DeferralsBookId       = _payDeferralsTable.DeferralsBookId;
            deferralsBook.DeferralsGroupId      = _payDeferralsTable.DeferralsGroupId;
            deferralsBook.initFromDeferralsGroup(RDeferralsGroup::find(_payDeferralsTable.DeferralsGroupId));

            if (_payDeferralsTable.DeferralsBookId != deferralsBook.DeferralsBookId )
            {
                throw error(strFmt("@RUP3110",
                                   _rPayTrans.PayCtype, _payDeferralsTable.DeferralsBookId, _payDeferralsTable.DeferralsGroupId));
            }

            deferralsBook.DeferralsAmount       = round(abs(_rPayTrans.Amount),
                                                  RDeferralsProfile::find(deferralsBook.DeferralsProfile).RoundOffOperation);
            deferralsBook.Status                = RDeferralsStatus::Scheduled;
            this.initDeferralsProfile(deferralsBook, _rPayTrans);

            delete_from deferralsBookAmount
                where deferralsBookAmount.DeferralsId       == deferralsBook.DeferralsId &&
                      deferralsBookAmount.DeferralsBookId   == deferralsBook.DeferralsBookId;
        }

        if (this.checkDeferralsProfile(deferralsBook))
        {
            if (state == #UpdateModel)
            {
                deferralsBook.Depreciate = NoYes::No;
                deferralsBook.update();
            }
            else
            {
                deferralsBook.insert();
            }

            this.initDeferralAmount(_rPayTrans);
            postDeferrals.add([deferralsBook.DeferralsBookId, deferralsBook.DeferralsId]);
        }
        else
        {
            throw error("@SYS93835");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDeferralsProfile</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initDeferralsProfile(RDeferralsBook _deferralsBook, RPayTrans _payTrans)
    {
        if (_deferralsBook.DeferralsBookId == deferralsBookIdBase)
        {
            _deferralsBook.rPayWriteOffsetLedgerDimension = this.ledgerAccountDeferrals(_deferralsBook.DeferralsBookId, _payTrans);

            if (_payTrans.accountTypeDisplay()       == LedgerJournalACType::Ledger &&
                _payTrans.offsetAccountTypeDisplay() == LedgerJournalACType::Ledger)
            {
                receiptLedgerAccount.insert([_deferralsBook.DeferralsBookId, _deferralsBook.DeferralsId],
                                            [_payTrans.ledgerDimensionDisplay(), _payTrans.offsetLedgerDimensionDisplay()]);
            }
        }
        _deferralsBook.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(_payTrans.getDefaultDimension(), _deferralsBook.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDeferralsState</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initDeferralsState(RPayTrans _rPayTrans, RPayDeferralsTable _payDeferralsTable)
    {
        DimensionAttributeValueSetStorage dimAttrValueSetStorage;
        Query defQuery;
        QueryBuildDataSource defTableQbds, defBookQbds;
        QueryRun defQR;

        NumberSeq       num;
        LedgerDimensionDefaultAccount   ledgerAccount = this.ledgerAccountDeferrals(_payDeferralsTable.DeferralsBookId, _rPayTrans);

        dimAttrValueSetStorage = DimensionAttributeValueSetStorage::find(_rPayTrans.getDefaultDimension());
        dimAttrValue           = DimensionAttributeValue::find(dimAttrValueSetStorage.getValueByDimensionAttribute(profitTaxDimAttr.RecId));

        defQuery = new Query();
        defTableQbds = defQuery.addDataSource(tableNum(RDeferralsTable));
        defTableQbds.firstOnly(true);
        defTableQbds.update(true);

        findOrCreateRange_W(defTableQbds, fieldNum(RDeferralsTable, RefTableId), queryValue(document.TableId));
        findOrCreateRange_W(defTableQbds, fieldNum(RDeferralsTable, RefRecId), queryValue(document.RecId));

        defBookQbds = defTableQbds.addDataSource(tableNum(RDeferralsBook));
        defBookQbds.addLink(fieldNum(RDeferralsTable, DeferralsId), fieldNum(RDeferralsBook, DeferralsId));

        findOrCreateRange_W(defBookQbds, fieldNum(RDeferralsBook, DeferralsGroupId), queryValue(_payDeferralsTable.DeferralsGroupId));
        SysQuery::addDimensionAttributeRange(defQuery,
                                             defBookQbds.name(),
                                             fieldStr(RDeferralsBook, DefaultDimension),
                                             DimensionComponent::DimensionAttribute,
                                             dimAttrValue.getValue(),
                                             profitTaxDimAttr.Name);
        findOrCreateRange_W(defBookQbds, fieldNum(RDeferralsBook, DeferralsBookId), queryValue(_payDeferralsTable.DeferralsBookId));
        findOrCreateRange_W(defBookQbds, fieldNum(RDeferralsBook, rPayWriteOffsetLedgerDimension), queryValue(ledgerAccount));
        defBookQbds.update(true);

        defQR = new QueryRun(defQuery);
        defQR.next();

        deferralsTable = defQR.get(tableNum(RDeferralsTable));
        deferralsBook  = defQR.get(tableNum(RDeferralsBook));

        if (deferralsTable)
        {
            state = #UpdateModel;
            return;
        }

        select firstonly forupdate deferralsTable
            where deferralsTable.RefTableId == document.TableId &&
                  deferralsTable.RefRecId   == document.RecId
            join forupdate deferralsBook
                where deferralsBook.DeferralsId     == deferralsTable.DeferralsId &&
                      deferralsBook.Depreciate      == NoYes::Yes                 &&
                      deferralsBook.DeferralsBookId == _payDeferralsTable.DeferralsBookId;

        if (deferralsTable)
        {
            state = #UpdateModel;
            return;
        }

        select firstonly forupdate deferralsTable
            where deferralsTable.RefTableId == document.TableId &&
                  deferralsTable.RefRecId   == document.RecId
            notexists join deferralsBook
                where deferralsBook.DeferralsId     == deferralsTable.DeferralsId &&
                      deferralsBook.DeferralsBookId == _payDeferralsTable.DeferralsBookId;

        if (deferralsTable)
        {
            state = #AddModel;
            return;
        }

        num = RDeferralsTable::initDeferralsNumberSeq();
        if (! num)
            throw error("@SYS27388");

        deferralsTable.clear();
        deferralsTable.RefTableId = document.TableId;
        deferralsTable.RefRecId   = document.RecId;
        deferralsTable.DeferralsId      = num.num();
        deferralsTable.initValue();
        deferralsTable.AcquisitionDate  = _rPayTrans.PayPeriod;
        deferralsTable.Name             = strFmt("@RUP1998", _rPayTrans.Emplid);
        deferralsTable.Notes            = strFmt("@RUP1998", _rPayTrans.payEmplName()) + "@SYS35672";
        deferralsTable.insert();

        state = #NewDeferral;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerAccountDeferrals</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LedgerDimensionDefaultAccount ledgerAccountDeferrals(RDeferralsBookId _deferralsBookId, RPayTrans _payTrans)
    {
        RPaytitleposting    rPaytitleposting;
        RPayPostingProfile  postingProfile;
        RPayCostType        costType;
        LedgerDimensionDefaultAccount       ledgerDimDefaultAccount;

        if (_deferralsBookId == deferralsBookIdBase)
        {
            if (rPayTableFuture)
            {
                postingProfile = RPayParameters::find().AccountPostingProfile;
                costType       = rPayTableFuture.PayCtype;
            }
            else
            {
                postingProfile = RPayParameters::find().DeferralsProfile;
                costType       = _payTrans.PayCtype;
            }

            rPaytitleposting = RPaytitleposting::findAccount(postingProfile,
                                                             costType,
                                                             _payTrans.Emplid,
                                                             _payTrans.HrmOrganisationId,
                                                             RPayHistory::getHistoryLineByDate(_payTrans.Emplid, _payTrans.TransDate).HcmTitle);

            if (LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(rPaytitleposting.LedgerDimension) == LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(_payTrans.LedgerDimension))
            {
                throw error("@RUP3109");
            }

            if (rPaytitleposting.AccountType == LedgerJournalACType::Ledger)
            {
                ledgerDimDefaultAccount = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(rPaytitleposting.LedgerDimension);
            }
        }

        return ledgerDimDefaultAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new()
    {
        interval                = KeySum::construct(1, 1);
        receiptLedgerAccount    = new Map(Types::Container, Types::Container);
        postDeferrals           = new Set(Types::Container);
        periodInterval          = new Map(Types::Container, Types::Integer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerVoucher</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerVoucher parmLedgerVoucher(LedgerVoucher _ledgerVoucher = ledgerVoucher)
    {
        ;
        ledgerVoucher = _ledgerVoucher;

        return ledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postDeferralsTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void postDeferralsTrans()
    {
        SetEnumerator       st;
        RDeferralsPost      deferralsPost;
        LedgerDimensionDefaultAccount accountNum, offsetAccount;
        RDeferralsId        deferralsId;
        RDeferralsBookId    deferralsBookId;

        st = postDeferrals.getEnumerator();

        while (st.moveNext())
        {
            [deferralsBookId, deferralsId] = st.current();

            deferralsBook = RDeferralsBook::find(deferralsId, deferralsBookId);
            deferralsPost = RDeferralsPost::construct(deferralsBook,
                                                      ledgerVoucher,
                                                      RDeferralsTransType::Receipt);

            if (receiptLedgerAccount.exists([deferralsBook.DeferralsBookId, deferralsBook.DeferralsId]))
            {
                [accountNum, offsetAccount] = receiptLedgerAccount.lookup([deferralsBook.DeferralsBookId, deferralsBook.DeferralsId]);
                deferralsPost.parmLedgerAccount(accountNum);
                deferralsPost.parmLedgerAccountOffset(offsetAccount);
            }
            if (deferralsPost.canCreateDeferralsTrans())
            {
                deferralsPost.createTrans();
            }

            deferralsPost.post();
            deferralsPost.updateStatus();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static RPayCreateDeferrals construct(LedgerVoucher _ledgerVoucher)
    {
        RPayCreateDeferrals createDeferrals =  new RPayCreateDeferrals();
        createDeferrals.parmLedgerVoucher(_ledgerVoucher);

        return createDeferrals;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>