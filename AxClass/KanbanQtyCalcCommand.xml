<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanQtyCalcCommand</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>KanbanQtyCalcCreateCommand</c> class is an abstract class which implements shared logic for the 3 command classes.
/// </summary>
abstract public class KanbanQtyCalcCommand extends RunBaseBatch
{
    #define.timeOutLimit(5)
    #define.numOfTasks(8)

    // input variables
    KanbanQuantityCalculation   kanbanQuantityCalculation;

    // internal variables
    KanbanQuantityCalculation   kanbanQuantityCalculationLock;
    UserConnection              connection;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        kanbanQuantityCalculation
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTaskProcessor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates one or more instances of the <c>KanbanQtyCalcTaskProcessor</c> class.
    /// </summary>
    /// <param name="_className">
    /// A string value that holds the name of the class that must be processed by the <c>KanbanQtyCalcTaskProcessor</c> class.
    /// </param>
    protected void createTaskProcessor(className    _className)
    {
        KanbanQtyCalcTaskProcessor          kanbanQtyCalcTaskProcessor;
        KanbanQuantityCalculationProposal   kanbanQuantityCalculationProposal;
        Counter                             e;

        ttsbegin;

        update_recordset kanbanQuantityCalculationProposal
            setting Processed = NoYes::No
            where kanbanQuantityCalculationProposal.KanbanQuantityCalculation == kanbanQuantityCalculation.RecId;

        ttscommit;

        if (this.isInBatch())
        {
            // multi thread
            // create several kanbanQtyCalcTaskProcessor objects in order distrubte the load.

            ttsbegin;
            BatchHeader batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);

            for (e=1; e<= #numOfTasks;e++)
            {
                kanbanQtyCalcTaskProcessor = KanbanQtyCalcTaskProcessor::newStandard(kanbanQuantityCalculation,_className);

                kanbanQtyCalcTaskProcessor.batchInfo().ignoreOnFail(NoYes::Yes);
                batchHeader.addTask((kanbanQtyCalcTaskProcessor));
            }

            batchHeader.save();
            ttscommit;
        }
        else
        {
            // single thread
            kanbanQtyCalcTaskProcessor = KanbanQtyCalcTaskProcessor::newStandard(kanbanQuantityCalculation,_className);
            kanbanQtyCalcTaskProcessor.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that derived classes implement this method.
    /// </summary>
    abstract protected void execute()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockKanbanQuantityCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Locks the <c>KanbanQuantityCalculation</c> record in another user connection.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The <c>KanbanQuantityCalculation</c> record could not be selected for update.
    /// </exception>
    protected void lockKanbanQuantityCalculation()
    {
        kanbanQuantityCalculationLock.setConnection(connection);

        connection.ttsbegin();

        if (! this.isInBatch())
        {
            kanbanQuantityCalculationLock.queryTimeout(#timeOutLimit);
        }

        select pessimisticlock kanbanQuantityCalculationLock
            where kanbanQuantityCalculationLock.RecId == kanbanQuantityCalculation.RecId;

        if (! this.isInBatch()
            && kanbanQuantityCalculationLock.queryTimedOut())
        {
            throw error("@SYS318747");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanQuantityCalculation</Name>
				<Source><![CDATA[
    public KanbanQuantityCalculation parmKanbanQuantityCalculation(KanbanQuantityCalculation _kanbanQuantityCalculation = kanbanQuantityCalculation)
    {
        kanbanQuantityCalculation = _kanbanQuantityCalculation;

        return kanbanQuantityCalculation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prefixStr</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the header for infolog messages.
    /// </summary>
    /// <returns>
    ///    A string value that represents the header for the infolog messages.
    /// </returns>
    protected str prefixStr()
    {
        return this.caption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements the main logic for the kanban quantity calculation commands.
    /// </summary>
    public void run()
    {
        setprefix(this.prefixStr());

        connection = new UserConnection();

        try
        {
            this.lockKanbanQuantityCalculation();

            if (this.validate())
            {
                this.execute();
                this.updateStatus();
            }

            this.unlockKanbanQuantityCalculation();
        }
        finally
        {
            connection.finalize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unlockKanbanQuantityCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unlocks the <c>KanbanQuantityCalculation</c> record.
    /// </summary>
    protected void unlockKanbanQuantityCalculation()
    {
        #define.waitTimeInMs(3000)

        Batch       subTask;
        Batch       currentTask = this.parmCurrentBatch();

        if (connection)
        {
            if (this.isInBatch())
            {
                // wait until all subtasks are completed.

                while (true)
                {
                    select firstonly RecId from subTask
                        where subTask.BatchJobId    == currentTask.BatchJobId
                            && subTask.RecId        != currentTask.RecId
                            && (subTask.Status  != BatchStatus::Finished
                            && subTask.Status   != BatchStatus::Canceled
                            && subTask.Status   != BatchStatus::Error);

                    if (subTask.RecId)
                    {
                        sleep(#waitTimeInMs);
                    }
                    else
                    {
                        break;
                    }
                }
            }

            // release lock
            connection.ttscommit();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container  _packedClass)
    {
        Integer     version = conpeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
               [version, #CurrentList] = _packedClass;
               break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that derived classes implement this method.
    /// </summary>
    abstract void updateStatus()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that processing of the <c>KanbanQuantityCalculationProposal</c> records is enabled.
    /// </summary>
    /// <param name="_calledFrom">
    ///    An object that represents the calling object.
    /// </param>
    /// <returns>
    ///    true if the <c>KanbanQuantityCalculationProposal</c> records can be created; otherwise, false.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = super(_calledFrom);

        // If a kanban quantity calculation has status Updated it means it has reached the final status and cannot be processed again.
        if ( kanbanQuantityCalculation.CalculationStatus == KanbanQuantityCalculationStatus::Updated)
        {
            ret = checkFailed(strfmt("@SYS319235",KanbanQuantityCalculationStatus::Updated));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKanbanQuantityCalculationFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>KanbanQuantityCalculation</c> record based on the <c>Args</c> object.
    /// </summary>
    /// <param name="_args">
    ///    An <c>Args</c> object.
    /// </param>
    /// <returns>
    ///    A <c>KanbanQuantityCalculation</c> record.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    If a <c>KanbanQuantityCalculation</c> record could not be found.
    /// </exception>
    public static KanbanQuantityCalculation getKanbanQuantityCalculationFromArgs(Args   _args)
    {
        KanbanQuantityCalculation           kanbanQuantityCalculation;

        if (   _args
            && _args.dataset() == tablenum(KanbanQuantityCalculation))
        {
            kanbanQuantityCalculation = _args.record();
        }

        if (! kanbanQuantityCalculation)
        {
            throw error(strfmt("@SYS105865",_args.name(),tableid2pname(kanbanQuantityCalculation.TableId)));
        }

        return kanbanQuantityCalculation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
