<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSCatchWeightTagStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class WHSCatchWeightTagStatus
{
    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the tag is in active state, so that it can be picked or packed during warehouse processing.
    /// </summary>
    /// <param name = "_tagNumber">The tag number to validate</param>
    /// <returns>True if the tag can be processed in the warehouse processes; otherwise, false.</returns>
    [Hookable(false)]
    internal static boolean isActive(WHSCatchWeightTagNumber _tagNumber)
    {
        boolean ret;
        WHSCatchWeightTag tag = WHSCatchWeightTag::find(_tagNumber);

        if (tag && tag.IsDeleted == NoYes::No)
        {
            WHSCatchWeightTagRegistrationEvent lastEvent = WHSCatchWeightTagLastRegistration::lastRegistrationEvent(_tagNumber);

            ret = (lastEvent != WHSCatchWeightTagRegistrationEvent::PickingStarted
                && lastEvent != WHSCatchWeightTagRegistrationEvent::OutboundPickingStarted
                && lastEvent != WHSCatchWeightTagRegistrationEvent::PackingStarted
                && lastEvent != WHSCatchWeightTagRegistrationEvent::Shipped);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangeIsActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a query range to identify catch weight tags that are active.
    /// </summary>
    /// <param name = "_dsCatchWeightTag">A query build data source for table <c>WHSCatchWeightTag</c> to add the identifying range to.</param>
    [Hookable(false)]
    internal static void addRangeIsActive(QueryBuildDataSource _dsCatchWeightTag)
    {
        _dsCatchWeightTag.addRange(fieldNum(WHSCatchWeightTag, IsDeleted)).value(SysQuery::value(NoYes::No));

        QueryBuildDataSource dsLastRegistration = _dsCatchWeightTag.addDataSource(tableNum(WHSCatchWeightTagLastRegistration));
        dsLastRegistration.joinMode(JoinMode::NoExistsJoin);
        dsLastRegistration.relations(true);

        dsLastRegistration.addRange(fieldNum(WHSCatchWeightTagLastRegistration, RegistrationEvent)).value(
            strFmt('%1,%2,%3,%4',
                enum2int(WHSCatchWeightTagRegistrationEvent::PickingStarted),
                enum2int(WHSCatchWeightTagRegistrationEvent::OutboundPickingStarted),
                enum2int(WHSCatchWeightTagRegistrationEvent::PackingStarted),
                enum2int(WHSCatchWeightTagRegistrationEvent::Shipped)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isShipped</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if the tag is shipped
    /// </summary>
    /// <param name = "_tagNumber">The tag number to validate</param>
    /// <returns>True if the tag is shipped; otherwise, false.</returns>
    [Hookable(false)]
    internal static boolean isShipped(WHSCatchWeightTagNumber _tagNumber)
    {
        boolean ret;
        WHSCatchWeightTag tag = WHSCatchWeightTag::find(_tagNumber);

        if (tag && tag.IsDeleted == NoYes::No)
        {
            WHSCatchWeightTagRegistrationEvent lastEvent = WHSCatchWeightTagLastRegistration::lastRegistrationEvent(_tagNumber);

            if (lastEvent == WHSCatchWeightTagRegistrationEvent::Shipped)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPacked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if the tag is packed in a container.
    /// </summary>
    /// <param name = "_tagNumber">The tag number to validate</param>
    /// <returns>True if the tag is packed; otherwise, false.</returns>
    [Hookable(false)]
    internal static boolean isPacked(WHSCatchWeightTagNumber _tagNumber)
    {
        boolean ret;
        WHSCatchWeightTag tag = WHSCatchWeightTag::find(_tagNumber);

        if (tag && tag.IsDeleted == NoYes::No)
        {
            WHSCatchWeightTagRegistrationEvent lastEvent = WHSCatchWeightTagLastRegistration::lastRegistrationEvent(_tagNumber);

            if (lastEvent == WHSCatchWeightTagRegistrationEvent::PackingCompleted)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCatchWeightTagBeUnshipped</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the tag can be unshipped.
    /// </summary>
    /// <param name = "_tagNumber">Tag number to validate</param>
    /// <param name = "_tmpLoadLineInventory">A <c>WHSTmpLoadLineInventory</c> record representing the values being unshipped.</param>
    /// <returns>True if the tag can be unshipped; otherwise, false.</returns>
    [Hookable(false)]
    internal static boolean canCatchWeightTagBeUnshipped(WHSCatchWeightTagNumber _tagNumber, WHSTmpLoadLineInventory _tmpLoadLineInventory)
    {
        boolean ret = true;
        WHSCatchWeightTag tag = WHSCatchWeightTag::find(_tagNumber);

        if (!tag || tag.IsDeleted == NoYes::Yes)
        {
            ret = checkFailed(strFmt("@WAX:CatchWeightTagInvalidTagNumber", _tagNumber));
        }

        WHSCatchWeightTagRegistrationEvent lastEvent = WHSCatchWeightTagLastRegistration::lastRegistrationEvent(_tagNumber);

        if (ret && lastEvent == WHSCatchWeightTagRegistrationEvent::Shipped)
        {
            ret = checkFailed(strFmt("@WAX:CatchWeightTagAlreadyShipped", _tagNumber));
        }

        if (ret
            && lastEvent != WHSCatchWeightTagRegistrationEvent::PickingCompleted
            && lastEvent != WHSCatchWeightTagRegistrationEvent::OutboundPickingCompleted
            && lastEvent != WHSCatchWeightTagRegistrationEvent::PackingCompleted)
        {
            ret = checkFailed(strFmt("@WAX:CatchWeightTagInvalidTagState", _tagNumber));
        }

        if (ret)
        {
            WHSCatchWeightTagLastRegistration lastRegistration = WHSCatchWeightTagLastRegistration::find(_tagNumber);

            if (lastRegistration.ContainerLine 
                && (WHSContainerLine::findByRecId(lastRegistration.ContainerLine).ContainerId != _tmpLoadLineInventory.ContainerId))
            {
                ret = checkFailed(strFmt("@WAX:CatchWeightTagNotRelatedToContainerToReduceQty", _tagNumber));
            }
                
            if (ret && lastRegistration.WorkLine) 
            {
                WHSWorkLine workLine = WHSWorkLine::findByRecId(lastRegistration.WorkLine);
                boolean isInitialPickLine = workLine.isInitialPickLine();

                if (isInitialPickLine && workLine.LoadLineRefRecId != _tmpLoadLineInventory.RefRecId)
                {
                    ret = checkFailed(strFmt("@WAX:CatchWeightTagNotRelatedToLoadToReduceQty", _tagNumber));
                }
                else if (!isInitialPickLine)
                {
                    WHSWorkLine locWorkLine;
                    select firstonly RecId
                        from locWorkLine
                        where locWorkLine.WorkId == workLine.WorkId
                            && locWorkLine.LineNum < workLine.LineNum
                            && locWorkLine.WorkType == WHSWorkType::Pick
                            && locWorkLine.WorkStatus == WHSWorkStatus::Closed
                            && locWorkLine.LoadLineRefRecId == _tmpLoadLineInventory.RefRecId;
                    
                    if (!locWorkLine.RecId)
                    {
                        ret = checkFailed(strFmt("@WAX:CatchWeightTagNotRelatedToLoadToReduceQty", _tagNumber));
                    }
                }
            }
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCatchWeightTagLastRegisteredWithOutboundWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the last registration for a tag was related to a outbound warehouse work.
    /// </summary>
    /// <param name = "_tagNumber">Tag number to validate</param>
    /// <returns>True if the tag is part of an outbound warehouse work; otherwise, false.</returns>
    internal static boolean isCatchWeightTagLastRegisteredWithOutboundWork(WHSCatchWeightTagNumber _tagNumber)
    {
        boolean ret;
        WHSCatchWeightTagLastRegistration lastRegistration = WHSCatchWeightTagLastRegistration::find(_tagNumber);

        if (lastRegistration.RegistrationEvent == WHSCatchWeightTagRegistrationEvent::OutboundPickingCompleted
            && WHSWorkLine::findByRecId(lastRegistration.WorkLine).whsWorkTable().isWorkTransTypeOutbound())
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCatchweightTagBePacked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the tag can be packed.
    /// </summary>
    /// <param name = "_tagNumber">Tag number to validate.</param>
    /// <param name = "_itemId">The item ID to validate the specified tag number.</param>
    /// <param name = "_packingProductDimension">The product dimension to validate the specified tag number.</param>
    /// <param name = "_shipmentId">Shipment Id corresponding to the specific packing process</param>
    /// <returns>True if the tag can be packed; otherwise, false.</returns>
    private boolean canCatchweightTagBePacked(WHSCatchWeightTagNumber _tagNumber, ItemId _itemId, InventDim _packingProductDimension, WHSShipmentId _shipmentId)
    {
        boolean ret;
        WHSCatchWeightTag tag = WHSCatchWeightTag::find(_tagNumber);

        if (!tag || tag.IsDeleted == NoYes::Yes)
        {
            ret = checkFailed(strFmt("@WAX:CatchWeightTagInvalidTagNumber", _tagNumber));
        }

        if (ret)
        {
            InventDim packingProductDimension = InventDim::findOrCreate(_packingProductDimension);

            if (_itemId != tag.ItemId
                || packingProductDimension.inventDimId != tag.ProductDimensionInventDimId)
            {
                ret = checkFailed(strFmt("@WAX:ErrorCatchWeightInvalidTag", tag.TagNumber, _itemId));
            }
        }

        if (ret)
        {
            WHSShipmentTable shipmentTable = WHSShipmentTable::find(_shipmentId);

            if (
                (
                    (shipmentTable.WorkTransType == WHSWorkTransType::Sales && WHSInventTable::salesOrderWeightCapturingProcess(_itemId) == WHSSalesOrderWeightCapturingProcess::Picking)
                    ||  (shipmentTable.WorkTransType == WHSWorkTransType::TransferIssue && WHSInventTable::transferIssueWeightCapturingProcess(_itemId) == WHSTransferIssueWeightCapturingProcess::Picking)
                )
                && (!WHSCatchWeightTagStatus::isActive(_tagNumber) || WHSCatchWeightTagStatus::isCatchWeightTagLastRegisteredWithOutboundWork(_tagNumber))
               )
            {
                ret = checkFailed(strFmt("@WAX:MobileDeviceControlValidationCatchWeightTagInvalidStatus", _tagNumber));
            }

            if (ret
                && (
                    (shipmentTable.WorkTransType == WHSWorkTransType::Sales && WHSInventTable::salesOrderWeightCapturingProcess(_itemId) == WHSSalesOrderWeightCapturingProcess::Packing)
                    ||  (shipmentTable.WorkTransType == WHSWorkTransType::TransferIssue && WHSInventTable::transferIssueWeightCapturingProcess(_itemId) == WHSTransferIssueWeightCapturingProcess::Packing)
                   )
                && !WHSCatchWeightTagStatus::isActive(_tagNumber)
               )
            {
                ret = checkFailed("@WAX:CatchWeightTagInvalidTagState");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>