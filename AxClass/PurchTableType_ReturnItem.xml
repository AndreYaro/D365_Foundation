<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchTableType_ReturnItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
class       PurchTableType_ReturnItem
extends     PurchTableType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void  initValue()
    {
        super();
        purchTable.TransactionCode = IntrastatParameters::find().DefaultCreditNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyCreateAllowed</Name>
				<Source><![CDATA[
    boolean interCompanyCreateAllowed()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanySyncEngine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the intercompany header-level syncronization engine.
    /// </summary>
    /// <returns>An instance of <c>InterCompanySyncPurchTableType</c> class.</returns>
    public InterCompanySyncPurchTableType interCompanySyncEngine()
    {
        return InterCompanySyncPurchTableType_ReturnItem::newFromPurchLineType(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the corresponding <c>SalesType</c> value.
    /// </summary>
    /// <returns>Purchase order type value 'Return order'.</returns>
    public SalesType salesType()
    {
        return SalesType::ReturnItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultDeliveryAddress</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the default delivery address for the <c>purchTable</c> record.
    /// </summary>
    /// <remarks>
    ///    For return orders, the address of the vendor is set as the delivery address. If a delivery address
    ///    for the vendor is not found then the default delivery address of the current company is set as the
    ///    default delivery address.
    /// </remarks>
    public void setDefaultDeliveryAddress()
    {
        VendTable               vendTable   = purchTable.vendTable_OrderAccount();
        DirPartyTable           partyTable  = purchTable.partyTable_OrderAccount();
        LogisticsLocation       location;
        LogisticsLocationEntity locationEntity;

        purchTable.DeliveryName = partyTable.Name;

        location = LogisticsLocationDefault::findSimpleDefault(vendTable,
                        LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery));

        if (location)
        {
            locationEntity = LogisticsLocationEntity::constructFromLocationRecId(location.RecId);
            purchTable.setLocation(locationEntity.parmLocationRecId(), purchTable.vendTable_OrderAccount());
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean  validateWrite()
    {
        boolean     ok = true;

        ok = super();

        if (!purchTable.ReturnItemNum)
            ok = checkFailed("@SYS24805");

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchTableType  construct(PurchTable purchTable)
    {
        if (purchTable.ProjId && !purchTable.isProjectSalesItemReqPO())
            return new PurchTableType_ProjectReturnItem(purchTable);

        return new PurchTableType_ReturnItem(purchTable);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>