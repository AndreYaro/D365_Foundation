<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdCalcTransVarianceController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProdCalcTransVarianceController</c> class is the helper class for the associated  report.
/// </summary>
class ProdCalcTransVarianceController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>SRSReportParameters</c> values to the report contract.
    /// </summary>
    protected void prePromptModifyContract()
    {
        ProdCalcTransVarianceContract  contract = this.parmReportContract().parmRdpContract();

        super();
        ProdCalcTrans prodCalcTrans = this.parmArgs().record();
        ProdId prodId = prodCalcTrans.TransRefId;
        ProdTransRefType transRefType = prodCalcTrans.TransRefType;
        contract.parmProdId(prodId);
        contract.parmTransRefType(transRefType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the controller, assigns parameter values and runs the SRS report.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> object.
    /// </param>
    /// <exception cref="Exception::Error">
    ///     Throws if the record in the arguments is not of the <c>ProdCalcTrans</c> table.
    /// </exception>
    public static void main(Args _args)
    {
        if (_args.dataset() != tablenum(ProdCalcTrans))
        {
            throw error(strfmt("@SYS19096",_args.name(),tablestr(ProdCalcTrans)));
        }

        var _controller = new ProdCalcTransVarianceController();

        _controller.parmArgs(_args);
        _controller.parmReportName(ssrsReportStr(ProdCalcTransVariance, Report));
        _controller.parmDisableRefreshButton(true);
        _controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>
