<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesComplementaryInvoiceCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is reponsible for creating a sales complementary invoice.
/// </summary>
class SalesComplementaryInvoiceCreator extends ComplementaryInvoiceCreator
{
    SalesComplementaryInvoiceHeader complInv;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createComplementaryInvoiceHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new sales complementary invoice.
    /// </summary>
    /// <returns>
    /// New <c>SalesComplementaryInvoiceHeader</c> record.
    /// </returns>
    protected Common createComplementaryInvoiceHeader()
    {
        complInv.initFromFiscalDocument(this.parmComplementedFiscalDocument());

        switch (this.parmComplementedFiscalDocument().RefTableId)
        {
            case tableNum(CustInvoiceJour):
                CustInvoiceJour custInvoiceJour = this.parmComplementedFiscalDocument().findRefRecord();
                complInv.initFromCustInvoiceJour(custInvoiceJour);
                SalesTable salesTable = custInvoiceJour.salesTable();
                if (salesTable)
                {
                    complInv.initFromSalesTable(salesTable);
                }
                else
                {
                    CustInvoiceTable custInvoiceTable = custInvoiceJour.custInvoiceTable();
                    complInv.initFromCustInvoiceTable(custInvoiceTable);
                }
                break;

            case tableNum(ProjInvoiceJour):
                ProjInvoiceJour projInvoiceJour = this.parmComplementedFiscalDocument().findRefRecord();
                complInv.initFromProjInvoiceJour(projInvoiceJour);
                break;
        }

        complInv.ComplementaryType = complementaryType;

        FiscalDocumentType_BR fiscalDocType = FiscalDocumentType_BR::findRecId(complInv.FiscalDocumentType_BR);
        if (BrazilParameters::find().ChronologicalInvoiceNumbering &&
            fiscalDocType.InvoiceIssueDate)
        {
            complInv.DocumentDate = fiscalDocType.InvoiceIssueDate;
        }
        else
        {
            complInv.DocumentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        complInv.DueDate = complInv.paymentDueDate();

        complInv.insert();

        FiscalReferenceParmCreator_BR fiscalReferenceCreator = new FiscalReferenceParmCreator_BR(complInv);
        fiscalReferenceCreator.addReference(this.parmComplementedFiscalDocument(),
                                            BrazilParameters::find().ComplementaryInvoiceSourceText);

        FiscalReferenceController_BR::construct(complInv).resolveLegalTextsToSourceTable();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00039, funcName());

        return complInv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createComplementaryInvoiceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a sales complementary invoice line.
    /// </summary>
    /// <returns>
    /// A new <c>SalesComplementaryInvoiceLine</c> record.
    /// </returns>
    protected Common createComplementaryInvoiceLine()
    {
        SalesComplementaryInvoiceLine   complInvLine;
        FiscalDocumentLineSource_BR     fiscalDocLineSource;

        complInvLine.SalesComplementaryInvoiceHeader = complInv.RecId;
        complInvLine.initFromFiscalDocumentLine(this.parmComplementedFiscalDocLine());

        if (this.parmComplementedFiscalDocLine().RefTableId)
        {
            this.initLineFromRefRecord(this.parmComplementedFiscalDocLine().RefTableId,
                                       this.parmComplementedFiscalDocLine().RefRecId,
                                       complInvLine);
        }
        else
        {
            select firstOnly fiscalDocLineSource
                where fiscalDocLineSource.FiscalDocumentLine == this.parmComplementedFiscalDocLine().RecId;

            if (fiscalDocLineSource)
            {
                this.initLineFromRefRecord(fiscalDocLineSource.SourceDocumentLineTableId,
                                           fiscalDocLineSource.SourceDocumentLineRecId,
                                           complInvLine);
            }
        }

        complInvLine.insert();

        return complInvLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the form name used to present the created complementary invoice to the user.
    /// </summary>
    /// <returns>
    /// Form name used to present the complementary invoice.
    /// </returns>
    public FormName getFormName()
    {
        return formStr(SalesComplementaryInvoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLineFromRefRecord</Name>
				<Source><![CDATA[
    private void initLineFromRefRecord(RefTableId _refTableId, RefRecId _refRecId, SalesComplementaryInvoiceLine _complInvLine)
    {
        switch (_refTableId)
        {
            case tableNum(CustInvoiceTrans):
                CustInvoiceTrans custInvoiceTrans = CustInvoiceTrans::findRecId(_refRecId);
                _complInvLine.DefaultDimension   = custInvoiceTrans.DefaultDimension;
                _complInvLine.EcoResCategory     = custInvoiceTrans.SalesCategory;
                _complInvLine.LedgerDimension    = custInvoiceTrans.LedgerDimension;
                _complInvLine.TaxGroup           = custInvoiceTrans.TaxGroup;
                _complInvLine.TaxItemGroup       = custInvoiceTrans.TaxItemGroup;
                _complInvLine.StockedProduct     = custInvoiceTrans.StockedProduct;
                _complInvLine.InventDim          = custInvoiceTrans.InventDimId;
                break;

            case tableNum(ProjInvoiceItem):
                ProjInvoiceItem projInvoiceItem = ProjInvoiceItem::findRecId(_refRecId);
                _complInvLine.DefaultDimension   = projInvoiceItem.DefaultDimension;
                _complInvLine.TaxGroup           = projInvoiceItem.TaxGroupId;
                _complInvLine.TaxItemGroup       = projInvoiceItem.TaxItemGroupId;
                _complInvLine.InventDim          = projInvoiceItem.InventDimId;
                _complInvLine.ProjCategory       = projInvoiceItem.CategoryId;
                _complInvLine.ProjTable          = projInvoiceItem.ProjId;
                break;

            case tableNum(ProjInvoiceCost):
                ProjInvoiceCost projInvoiceCost = ProjInvoiceCost::findRecId(_refRecId);
                _complInvLine.DefaultDimension   = projInvoiceCost.DefaultDimension;
                _complInvLine.TaxGroup           = projInvoiceCost.TaxGroupId;
                _complInvLine.TaxItemGroup       = projInvoiceCost.TaxItemGroupId;
                _complInvLine.ProjCategory       = projInvoiceCost.CategoryId;
                _complInvLine.ProjTable          = projInvoiceCost.ProjId;
                break;

            case tableNum(ProjInvoiceEmpl):
                ProjInvoiceEmpl projInvoiceEmpl = ProjInvoiceEmpl::findRecId(_refRecId);
                _complInvLine.DefaultDimension   = projInvoiceEmpl.DefaultDimension;
                _complInvLine.TaxGroup           = projInvoiceEmpl.TaxGroupId;
                _complInvLine.TaxItemGroup       = projInvoiceEmpl.TaxItemGroupId;
                _complInvLine.ProjCategory       = projInvoiceEmpl.CategoryId;
                _complInvLine.ProjTable          = projInvoiceEmpl.ProjId;
                break;

            case tableNum(ProjInvoiceOnAcc):
                ProjInvoiceOnAcc projinvoiceOnAcc = ProjInvoiceOnAcc::findRecId(_refRecId);
                _complInvLine.DefaultDimension   = projinvoiceOnAcc.DefaultDimension;
                _complInvLine.TaxGroup           = projinvoiceOnAcc.TaxGroupId;
                _complInvLine.TaxItemGroup       = projinvoiceOnAcc.TaxItemGroupId;
                _complInvLine.ProjTable          = projinvoiceOnAcc.ProjId;
                break;

            case tableNum(ProjInvoiceRevenue):
                ProjInvoiceRevenue projInvoiceRevenue = ProjInvoiceRevenue::findRecId(_refRecId);
                _complInvLine.DefaultDimension   = projInvoiceRevenue.DefaultDimension;
                _complInvLine.TaxGroup           = projInvoiceRevenue.TaxGroupId;
                _complInvLine.TaxItemGroup       = projInvoiceRevenue.TaxItemGroupId;
                _complInvLine.ProjCategory       = projInvoiceRevenue.CategoryId;
                _complInvLine.ProjTable          = projInvoiceRevenue.ProjId;
                break;
        }

        if (_complInvLine.ProjTable)
        {
            _complInvLine.ProjFundingSource = ProjFundingSource::getCustomerDefaultFundingSource(ProjTable::find(_complInvLine.ProjTable).ProjInvoiceProjId,
                                                                                                 this.parmComplementedFiscalDocument().FiscalDocumentAccountNum);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>