<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferCalcTax_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Class that abstracts the access of transfer order tables for tax calculation
/// </summary>

abstract class InventTransferCalcTax_BR extends TradeCalcTax
{
    QueryRun                queryTransact;

    Common                  source;
    InventTransferLine      inventTransferLine;

    boolean         lineExist;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the amount of the transfer order line
    /// </summary>
    /// <returns>
    ///     The amount in the accounting currency
    /// </returns>

    public AmountCur amounts()
    {
        AmountCur  amountCur = this.transLineAmount();

        if (this.updateType() == InventTransferUpdateType::Shipment)
        {
            return -amountCur;
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculate the taxes for transfer order
    /// </summary>
    /// <param name="_tradeTotals">
    ///     <c>TradeTotals</c> instance
    /// </param>
    /// <returns>
    ///     Total taxes
    /// </returns>
    [Replaceable]
    public TaxAmountCur calcTax(TradeTotalsBase _tradeTotals)
    {
        TaxInventTransfer_BR    taxTransfer;
        TaxAmountCur            amountCur;

        taxTransfer = TaxInventTransfer_BR::construct(this);
        amountCur   = taxTransfer.calc();

        this.tax(taxTransfer);

        if (this.updateType() == InventTransferUpdateType::Receive)
        {
            return amountCur;
        }

        return -amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the company standard currency
    /// </summary>
    /// <returns>
    ///     The company standard currency
    /// </returns>

    public CurrencyCode currencyCode()
    {
        return CompanyInfoHelper::standardCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default dimension for the given transfer order line
    /// </summary>
    /// <returns>
    /// Default dimension for the given transfer order line
    /// </returns>
    public DimensionDefault defaultDimension()
    {
        if (this.updateType() == InventTransferUpdateType::Shipment)
        {
            return inventTransferLine.DimensionDefaultShipFrom;
        }

        return inventTransferLine.DimensionDefaultShipTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimSiteId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invent site id associated with the invent transfer line.
    /// The search will look at different fields depending if the transfer order line is a shipment or a receipt transfer order line
    /// </summary>
    /// <returns>
    /// Invent site id associated with the invent dimension of the current invent transfer line
    /// </returns>
    protected InventSiteId getInventDimSiteId()
    {
        if (inventTransferLine.RemainStatus == InventTransferRemainStatus::Shipping)
        {
            return inventTransferLine.inventDimShip().InventSiteId;
        }

        return inventTransferLine.inventDimReceive().InventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursor</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inititializes the transfer order lines query
    /// </summary>

    void  initCursor()
    {
        queryTransact = this.queryBuild();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the system date
    /// </summary>
    /// <returns>
    ///     The system date
    /// </returns>

    public TransDate invoiceDate()
    {
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Instantiates the <c>InventTransferCalcTax_BR</c> object
    /// </summary>
    /// <param name="_record">
    ///     The source record
    /// </param>

    public void new(common  _record)
    {
        source = _record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fetches the next record
    /// </summary>
    /// <returns>
    ///     True when the record is found, otherwise false.
    /// </returns>

    abstract boolean nextLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the inventory main account related to the transfer order line
    /// </summary>
    /// <returns>
    ///     The inventory main account related to the transfer order line
    /// </returns>
    public LedgerDimensionDefaultAccount operationAccount()
    {
        InventMovement inventMovement = InventMovement::construct(inventTransferLine, InventMovSubType::TransferOrderTo);

        return inventMovement.accountBalanceSheet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Posts the transfer order taxes
    /// </summary>
    /// <param name="_ledgerVoucher">
    ///     <c>LedgerVoucher</c> to be used
    /// </param>
    /// <param name="post">
    ///     Set if the taxes will br posted or not
    /// </param>

    public void post(LedgerVoucher    _ledgerVoucher,
                     NoYes            post = NoYes::Yes)
    {
        taxInventTransferInvoice_BR taxTransferInvoice;

        taxTransferInvoice = new taxInventTransferInvoice_BR(post,
                                                    this,
                                                    _ledgerVoucher,
                                                    this.tax().tmpTaxWorkTrans());

        taxTransferInvoice.updateAndPost(LedgerPostingController::newForLedgerPostingJournal(_ledgerVoucher));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the <c>queryRun</c> object containing the lines to calculate taxes
    /// </summary>
    /// <returns>
    ///     The <c>queryRun</c> object
    /// </returns>

    abstract protected QueryRun queryBuild()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGet</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the current record
    /// </summary>
    /// <returns>
    ///     The current record
    /// </returns>

    abstract public common queryGet()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the recId of the source record
    /// </summary>
    /// <returns>
    ///     The recId of the source record
    /// </returns>

    public recId recId()
    {
        return source.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the tableId of the source record
    /// </summary>
    /// <returns>
    ///     The tableId of the source record
    /// </returns>

    public tableId tableId()
    {
        return source.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tax</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets and sets the <c>tax</c> class
    /// </summary>
    /// <param name="_tax">
    ///     The <c>tax</c> class
    /// </param>
    /// <returns>
    ///     The <c>tax</c> class
    /// </returns>

    public Tax tax(Tax _tax = tax)
    {
        tax = _tax;
        return tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxationOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the taxation origin of the current invoice line
    /// </summary>
    /// <returns>
    /// A taxation origin
    /// </returns>
    public abstract FITaxationOrigin_BR taxationOrigin()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the transaction line value to calculate tax
    /// </summary>
    /// <returns>
    ///     The transaction line value
    /// </returns>

    abstract public AmountCur transLineAmount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the recId of transfer line record
    /// </summary>
    /// <returns>
    ///     The recId of transfer line record
    /// </returns>

    public recId transRecId()
    {
        return inventTransferLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the tableId of transfer line record
    /// </summary>
    /// <returns>
    ///     The tableId of transfer line record
    /// </returns>
    ///
    public tableId  transTableId()
    {
        return inventTransferLine.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the current transaction tax group
    /// </summary>
    /// <returns>
    ///     The tax group
    /// </returns>

    abstract public TaxGroup transTaxGroup()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the current transaction item tax group
    /// </summary>
    /// <returns>
    ///     The item tax group
    /// </returns>

    abstract public TaxItemGroup transTaxItemGroup()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTransId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the current transaction <c>inventTransId</c>
    /// </summary>
    /// <returns>
    ///     The inventory transaction id
    /// </returns>

    abstract public InventTransId transTransId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the transfer order update type
    /// </summary>
    /// <returns>
    ///     the transfer order update type
    /// </returns>
    /// <remarks>
    ///     This method is overriden in the sub classes
    /// </remarks>

    public InventTransferUpdateType updateType()
    {
        return InventTransferUpdateType::Shipment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the <c>InventTransferCalcTax_BR</c> object
    /// </summary>
    /// <param name="_common">
    ///     The record used to initialize the <c>InventTransferCalcTax_BR</c> class
    /// </param>
    /// <returns>
    ///     A new instance of <c>InventTransferCalcTax_BR</c>
    /// </returns>

    public static InventTransferCalcTax_BR construct(common _common)
    {
        switch (_common.TableId)
        {
            case  tablenum(inventTransferParmTable)      :   return new InventTransferCalcTax_Parm_BR(_common);
            case  tablenum(InventTransferTable)          :   return new InventTransferCalcTax_Order_BR(_common);
            case  tablenum(InventTransferJour)           :   return new InventTransferCalcTax_Invoice_BR(_common);

            default : throw error(strfmt("@SYS19306",funcname()));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
