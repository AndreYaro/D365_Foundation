<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjProposalTranSummariesRefreshController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Service controller class for class <c>ProjInvoiceProposalInsertLines</c> of method <c>setProjProposalTotalsFromParameters</c>.
/// </summary>
public final class ProjProposalTranSummariesRefreshController extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        this.parmDialogCaption("@Proj:RefreshProposalTranSummariesBatchName");
        this.parmShowDialog(true);
        this.parmShowProgressForm(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        boolean validScenario = false;

        if (_args != null && _args.parm() && _args.record())
        {
            ProjProposalJour proposalJour = _args.record() as ProjProposalJour;
            
            if (proposalJour && proposalJour.RecalculateTotalsStatus == ProjProposalRecalculateTotalsStatus::Required)
            {
                validScenario = true;

                ProjProposalTranSummariesRefreshController controller = new ProjProposalTranSummariesRefreshController();
                controller.parmClassName(classstr(ProjProposalTranSummariesRefresh));
                controller.parmMethodName(methodstr(ProjProposalTranSummariesRefresh, refreshProposalSummaries));
                controller.parmExecutionMode(SysOperationExecutionMode::Synchronous);

                ProjProposalTranSummariesRefreshContract request = controller.getBaseDataContract() as ProjProposalTranSummariesRefreshContract;

                request.parmProposalJour(proposalJour);
                
                controller.startOperation();

                SysGlobalCache cache = ClassFactory.globalCache();
                if (controller.isDialogCancelled())
                {
                    cache.set(classStr(ProjProposalTranSummariesRefreshController), _args.parm(), ProjInvoiceBatchOption::Cancel);
                }
                else if (controller.parmExecutionMode() == SysOperationExecutionMode::ScheduledBatch)
                {
                    ProjProposalTranSummariesRefresh proposalTranSummariesRefresh = new ProjProposalTranSummariesRefresh();
                    proposalTranSummariesRefresh.updateRecalculateTotalsStatus(proposalJour, ProjProposalRecalculateTotalsStatus::InProcess);
                    cache.set(classStr(ProjProposalTranSummariesRefreshController), _args.parm(), ProjInvoiceBatchOption::ScheduledBatch);
                }
                else if (controller.parmExecutionMode() == SysOperationExecutionMode::Synchronous)
                {
                    cache.set(classStr(ProjProposalTranSummariesRefreshController), _args.parm(), ProjInvoiceBatchOption::Synchronous);
                }
                else if (controller.parmExecutionMode() == SysOperationExecutionMode::ReliableAsynchronous)
                {
                    ProjProposalTranSummariesRefresh proposalTranSummariesRefresh = new ProjProposalTranSummariesRefresh();
                    proposalTranSummariesRefresh.updateRecalculateTotalsStatus(proposalJour, ProjProposalRecalculateTotalsStatus::InProcess);
                    cache.set(classStr(ProjProposalTranSummariesRefreshController), _args.parm(), ProjInvoiceBatchOption::ReliableAsynchronous);
                }
                else if (controller.parmExecutionMode() == SysOperationExecutionMode::Asynchronous)
                {
                    cache.set(classStr(ProjProposalTranSummariesRefreshController), _args.parm(), ProjInvoiceBatchOption::Asynchronous);
                }
                else
                {
                    cache.set(classStr(ProjProposalTranSummariesRefreshController), _args.parm(), ProjInvoiceBatchOption::NotSpecified);
                }
            }
        }

        if (!validScenario)
        {
            throw error("@SYS335393");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform batch process.
    /// </summary>
    /// <returns><c>Batch</c> tabl buffer.</returns>
    public Batch doBatch()
    {
        Batch ret;

        if (executionMode == SysOperationExecutionMode::ScheduledBatch)
        {
            BatchHeader batchheader = this.batchInfo().parmBatchHeader();
            batchheader.clearAllAlerts();

            batchheader.addUserAlerts(curUserId(), NoYes::Yes, NoYes::Yes, NoYes::Yes, NoYes::Yes, NoYes::No);
        }
    
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDialogCancelled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies whether user has cancelled further execution of batch tasks by cancellation of the batch parameters dialog.
    /// </summary>
    /// <returns>
    /// true if the user has cancelled further processing; otherwise false.
    /// </returns>
    public boolean isDialogCancelled()
    {
        return dialogCanceled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>