<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetAcceleratedDepResource_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used for load data from production module
/// </summary>
class AssetAcceleratedDepResource_JP
{
    #TimeConstants

    RefRecId                            docAccDepEntry;
    WrkCtrReservedSum                   reservedSum;
    ReqPlanId                           reqPlanId;
    RefRecId                            reqPlanVersionRefRecIdActive;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create an instance of <C>AssetAcceleratedDepResource_JP</C>.
    /// </summary>
    /// <param name="_docAccDepEntry">
    /// RefRecId of <C>AssetDocumentAcceleratedDepEntry_JP</C>.
    /// </param>
    public void new(RefRecId _docAccDepEntry)
    {
        docAccDepEntry                  = _docAccDepEntry;
        reservedSum                     = WrkCtrReservedSum::newForm();
        reqPlanId                       = ReqPlanSched::defaultDynamicId();
        reqPlanVersionRefRecIdActive    = ReqPlan::findReqPlanId(reqPlanId).findActiveVersion().RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkingHoursFromPlan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update records of <C>AssetAcceleratedDepWorkingHours_JP</C>
    /// from planned data of production module
    /// </summary>
    protected void updateWorkingHoursFromPlan()
    {
        AssetAcceleratedDepWorkingHours_JP      workingHours;
        WrkCtrCapRes                            wrkCtrCapRes;
        AssetAcceleratedDepWorkingHoursTmp_JP   tmpWorkingHours;
        AssetAcceleratedDepWorkingHours_JP      workingHoursNotExisted;
        AssetDocumentEntry_JP                   docEntry;
        AssetDocumentAcceleratedDepEntry_JP     docAccDepEntryLocal;
        AssetDocumentAcceleratedDepTable_JP     docAccDepTable;
        AssetTable                              assetTable;

        insert_recordset tmpWorkingHours
            (TransDate,
            Hours)
            select TransDate, sum(WrkCtrSec) from wrkCtrCapRes
                group by TransDate
                exists join assetTable
                    where assetTable.WrkCtrId_JP == wrkCtrCapRes.WrkCtrId
                exists join docEntry
                    where docEntry.AssetId == assetTable.AssetId
                exists join docAccDepEntryLocal
                    where docAccDepEntryLocal.RecId == docAccDepEntry
                        && docAccDepEntryLocal.AssetDocumentEntry_JP == docEntry.RecId
                exists join docAccDepTable
                    where docAccDepTable.RecId == docAccDepEntryLocal.AssetDocumentAcceleratedDepTable_JP
                        && wrkCtrCapRes.TransDate >= docAccDepTable.ValidFrom
                        && wrkCtrCapRes.TransDate <= docAccDepTable.ValidTo
                        && wrkCtrCapRes.StartTime <= wrkCtrCapRes.EndTime
                        && (wrkCtrCapRes.LoadType  == WrkCtrCapacityType::JobSched
                            || wrkCtrCapRes.LoadType  == WrkCtrCapacityType::OperationSched)
                        &&((wrkCtrCapRes.RefType == WrkCtrCapRefType::Production && wrkCtrCapRes.PlanVersion == 0)
                            ||((wrkCtrCapRes.RefType == WrkCtrCapRefType::Project || wrkCtrCapRes.RefType == WrkCtrCapRefType::ProjectActivity) && wrkCtrCapRes.PlanVersion == 0 )
                            ||(wrkCtrCapRes.RefType == WrkCtrCapRefType::PlannedOrder && wrkCtrCapRes.PlanVersion == reqPlanVersionRefRecIdActive));

        insert_recordset workingHours
            (AssetDocumentAcceleratedDepEntry_JP, TransDate)
            select docAccDepEntry, TransDate from tmpWorkingHours
                notexists join workingHoursNotExisted
                    where workingHoursNotExisted.AssetDocumentAcceleratedDepEntry_JP == docAccDepEntry
                        && tmpWorkingHours.TransDate == workingHoursNotExisted.TransDate;

        update_recordSet workingHours
            setting ReservedHours = tmpWorkingHours.Hours/#SecondsPerHour,
                ActualHours = tmpWorkingHours.Hours/#SecondsPerHour
            join tmpWorkingHours
                where workingHours.AssetDocumentAcceleratedDepEntry_JP == docAccDepEntry
                    && tmpWorkingHours.TransDate == workingHours.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkingHoursFromProdRouteTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update records of <C>AssetAcceleratedDepWorkingHours_JP</C>
    /// from posted journals of production module
    /// </summary>
    protected void updateWorkingHoursFromProdRouteTrans()
    {
        AssetAcceleratedDepWorkingHours_JP      workingHours;
        ProdRouteTrans                          prodRouteTrans;
        AssetAcceleratedDepWorkingHoursTmp_JP   tmpWorkingHours;
        AssetDocumentEntry_JP                   docEntry;
        AssetDocumentAcceleratedDepEntry_JP     docAccDepEntryLocal;
        AssetDocumentAcceleratedDepTable_JP     docAccDepTable;
        AssetTable                              assetTable;
        AssetAcceleratedDepWorkingHours_JP      workingHoursNotExisted;

        insert_recordset tmpWorkingHours
            (TransDate,
            Hours)
            select DateWIP, sum(Hours) from prodRouteTrans
                group by DateWIP
                exists join assetTable
                    where assetTable.WrkCtrId_JP == prodRouteTrans.WrkCtrId
                exists join docEntry
                    where docEntry.AssetId == assetTable.AssetId
                exists join docAccDepEntryLocal
                    where docAccDepEntryLocal.RecId == docAccDepEntry
                        && docAccDepEntryLocal.AssetDocumentEntry_JP == docEntry.RecId
                exists join docAccDepTable
                    where docAccDepTable.RecId == docAccDepEntryLocal.AssetDocumentAcceleratedDepTable_JP
                        && prodRouteTrans.WrkCtrId == assetTable.WrkCtrId_JP
                        && prodRouteTrans.TransType == ProdRouteTransType::Time
                        && ProdRouteTrans.DateWIP >= docAccDepTable.ValidFrom
                        && prodRouteTrans.DateWIP <= docAccDepTable.ValidTo;

        insert_recordset workingHours
            (AssetDocumentAcceleratedDepEntry_JP, TransDate)
            select docAccDepEntry, TransDate from tmpWorkingHours
                notexists join workingHoursNotExisted
                    where workingHoursNotExisted.AssetDocumentAcceleratedDepEntry_JP == docAccDepEntry
                        && tmpWorkingHours.TransDate == workingHoursNotExisted.TransDate;

        update_recordSet workingHours
            setting ActualHours = tmpWorkingHours.Hours
            join tmpWorkingHours
                where workingHours.AssetDocumentAcceleratedDepEntry_JP == docAccDepEntry
                    && tmpWorkingHours.TransDate == workingHours.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkingHoursFromResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update records of <C>AssetAcceleratedDepWorkingHours_JP</C> from production module
    /// </summary>
    public void updateWorkingHoursFromResource()
    {
        ttsBegin;
        this.updateWorkingHoursFromPlan();
        this.updateWorkingHoursFromProdRouteTrans();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct an instance of <C>AssetAcceleratedDepResource_JP</C>.
    /// </summary>
    /// <param name="_docAccDepEntry">
    /// RefRecId of <C>AssetDocumentAcceleratedDepEntry_JP</C>.
    /// </param>
    /// <returns>
    /// Returns an instance of <C>AssetAcceleratedDepResource_JP</C>
    /// </returns>
    public static AssetAcceleratedDepResource_JP construct(RefRecId _docAccDepEntry)
    {
        return new AssetAcceleratedDepResource_JP(_docAccDepEntry);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>