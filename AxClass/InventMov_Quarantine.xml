<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_Quarantine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventMov_Quarantine</c> class is used when you work with inventory quarantine orders to
///    control items that are in the <c>tableNum:InventQuarantineOrder</c> quarantine.
/// </summary>
/// <remarks>
///    The <c>InventMov_Quarantine</c> class is used when you work with inventory quarantine orders to
///    control items that are in the <c>tableNum: InventQuarantineOrder</c> quarantine.
/// </remarks>
//This movement corresponds to movements for quarantine warehouse
[InventMovementFactoryAttribute(tableStr(InventQuarantineOrder))]
class InventMov_Quarantine extends InventMovement
{
    InventQuarantineOrder   inventQuarantineOrder;
    InventDirection         inventDirection;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountBalanceSheet</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountBalanceSheet()
    {
        if (! cacheAccountBalanceSheet)
        {
            if (InventPostingExtendParm_CN::checkExtendParmEnabled())
            {
                if (this.transQty() >= 0)
                {
                    cacheAccountBalanceSheet = InventPosting::itemExtendParm_CN(
                        InventAccountType::InventReceipt,
                        InventPostingExtendParm_CN::constructInventDim(this.inventdim()),
                        this.itemId(),
                        this.inventTable().ItemGroupId());
                }
                else
                {
                    cacheAccountBalanceSheet = InventPosting::itemExtendParm_CN(
                        InventAccountType::InventIssue,
                        InventPostingExtendParm_CN::constructInventDim(this.inventdim()),
                        this.itemId(),
                        this.inventTable().ItemGroupId());
                }
            }
            else
            {
                if (this.transQty() >= 0)
                {
                    cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventReceipt));
                }
                else
                {
                    cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventIssue));
                }
            }
        }

        return cacheAccountBalanceSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountOperations</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountOperations()
    {
        if (! cacheAccountOperations)
        {
            if (this.transQty() >= 0)
            {
                cacheAccountOperations = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventProfit));
            }
            else
            {
                cacheAccountOperations = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventLoss));
            }
        }

        return cacheAccountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRemainPhysical</Name>
				<Source><![CDATA[
    public void addRemainPhysical(InventQty  _inventQty)
    {
        inventQuarantineOrder.RemainQty += _inventQty * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeAutoRepAsFinished</Name>
				<Source><![CDATA[
    public boolean  canBeAutoRepAsFinished()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeOnAllInventLocations</Name>
				<Source><![CDATA[
    public boolean  canBeOnAllInventLocations()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeOnAllInventSites</Name>
				<Source><![CDATA[
    public boolean  canBeOnAllInventSites()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInventTransBeFinancialUpdated</Name>
				<Source><![CDATA[
    public boolean canInventTransBeFinancialUpdated(InventTrans _inventTrans)
    {
        switch (inventDirection)
        {
            case InventDirection::Receipt:
            case InventDirection::Issue:
                if (_inventTrans.inventDim().inventLocation().InventLocationType != InventLocationType::Quarantine)
                {
                    return false;
                }
                break;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReservationFormBeEdited</Name>
				<Source><![CDATA[
    public boolean canReservationFormBeEdited()
    {
        return (inventQuarantineOrder.Status == InventQuarantineStatus::Created);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllowManualMarking</Name>
				<Source><![CDATA[
    public boolean checkAllowManualMarking()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNotSubDelivery</Name>
				<Source><![CDATA[
    protected boolean checkNotSubDelivery(
        InventQty       _physicalNow,
        InventQty       _remainPhysicalNow,
        boolean         _isPhysicalUpdate
        , PdsCWInventQty  _pdsCWPhysicalNow
        , PdsCWInventQty  _pdsCWRemainPhysicalNow
        )
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateEstimated</Name>
				<Source><![CDATA[
    public boolean checkUpdateEstimated(
        InventUpd_Estimated     _updateNow,
        InventMovement          _this_orig)
    {
        if (this.inventMovSubType() != InventMovSubType::None)
        {
            return true;
        }

        if (this.transQty() * this.transSign() <= 0)
        {
            return checkFailed("@SYS18731");
        }

        if (!this.inventDimGroupSetup().isDimensionActive(fieldNum(InventDim,InventLocationId)))
        {
            return checkFailed(strFmt("@SYS58591",fieldPName(InventDim,InventLocationId)));
        }

        if (InventDim::find(inventQuarantineOrder.InventDimId).InventLocationId == InventDim::find(inventQuarantineOrder.InventDimIdQuarantine).InventLocationId)
        {
            return checkFailed("@SYS58592");
        }

        return super(_updateNow, _this_orig);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventTransPosting</Name>
				<Source><![CDATA[
    public boolean createInventTransPosting()
    {
        return this.transQty() >= 0 ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the relationship between the inventory transactions originator and the owner.
    /// </summary>
    public void createOriginOwnerRelationship()
    {
        InventTransOriginId originId = this.inventTransOriginId();

        if (originId && inventQuarantineOrder)
        {
            InventTransOriginQuarantineOrder::writeOriginOwnerRelationship(inventQuarantineOrder.DataAreaId, inventQuarantineOrder.QuarantineId, originId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the relationship between the inventory transactions originator and the owner that
    ///    corresponds.
    /// </summary>
    public void deleteOriginOwnerRelationship()
    {
        if (inventQuarantineOrder)
        {
            InventTransOriginQuarantineOrder::deleteOwnerRelationship(inventQuarantineOrder.DataAreaId, inventQuarantineOrder.QuarantineId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimAllowBlankIssue</Name>
				<Source><![CDATA[
    protected boolean dimAllowBlankIssue(InventDimGroupFieldSetup _inventDimGroupFieldSetup)
    {
        return _inventDimGroupFieldSetup.isAllowBlankIssueEnabled() || _inventDimGroupFieldSetup.isAllowBlankReceiptEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimAllowBlankReceipt</Name>
				<Source><![CDATA[
    protected boolean dimAllowBlankReceipt(InventDimGroupFieldSetup _inventDimGroupFieldSetup)
    {
        return _inventDimGroupFieldSetup.isAllowBlankIssueEnabled() || _inventDimGroupFieldSetup.isAllowBlankReceiptEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    public InventDimId inventDimId()
    {
        return inventQuarantineOrder.InventDimIdQuarantine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimParmMatchTransferTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves an <c>InventDimParm</c> buffer, which should be used to find the related
    ///    <c>InventTrans</c> records.
    /// </summary>
    /// <returns>
    ///    An <c>InventDimParm</c> buffer.
    /// </returns>
    /// <remarks>
    ///    This method is used for movements that represent transfers.
    /// </remarks>
    public InventDimParm inventDimParmMatchTransferTrans()
    {
        InventDimParm inventDimParmMatchTransferTrans;
         // we want to search for an exact match on dimensions that are being transferred, which also means match on blank dimensions.
        inventDimParmMatchTransferTrans.setAllInventDim();
        //clear non transferable dimensions since we do not need to look for these when we look for related transactions
        inventDimParmMatchTransferTrans.clearNonTransferReceiptMergeable();

        return inventDimParmMatchTransferTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the ID of the inventory transaction originator that corresponds to the movement.
    /// </summary>
    /// <param name="_inventTransOriginId">
    ///    The new value of the ID of the inventory transaction originator.
    /// </param>
    /// <returns>
    ///    The ID of the inventory transaction originator that corresponds to the movement.
    /// </returns>
    public InventTransOriginId inventTransOriginId(InventTransOriginId _inventTransOriginId = inventTransOriginId)
    {
        if (_inventTransOriginId != inventTransOriginId)
        {
            inventTransOriginId = _inventTransOriginId;
        }
        else
        {
            if (!inventTransOriginId)
            {
                inventTransOriginId = InventTransOriginQuarantineOrder::findInventTransOriginId(inventQuarantineOrder.DataAreaId, inventQuarantineOrder.QuarantineId);
            }
        }

        return inventTransOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransfer</Name>
				<Source><![CDATA[
    // returns true if the movement is a transfer of items. This includes transfer orders and quarantine orders
    public NoYes isTransfer()
    {
        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    public ItemId  itemId()
    {
        return inventQuarantineOrder.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markingRefInventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the marked transaction origin.
    /// </summary>
    /// <returns>
    ///    zero if the whole movement is not marked; otherwise, the ID of the transaction origin.
    /// </returns>
    public InventTransOriginId markingRefInventTransOrigin()
    {
        if (inventQuarantineOrder.Status != InventQuarantineStatus::Created)
        {
            return InventTransOrigin::findByInventTransId(inventQuarantineOrder.InventTransId).RecId;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeTransDimTransferReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Merges the specified <c>InventDim</c> value with the current <c>InventDim</c> values of the
    ///    transaction.
    /// </summary>
    /// <param name="_toInventDim">
    ///    The <c>InventDim</c> value to which to merge.
    /// </param>
    /// <param name="_fromInventDim">
    ///    The <c>InventDim</c> value from which to merge.
    /// </param>
    /// <param name="_origFromDim">
    ///    The original <c>InventDim</c> value.
    /// </param>
    /// <returns>
    ///    The merged <c>InventDim</c> value.
    /// </returns>
    public InventDim mergeTransDimTransferReceipt(
        InventDim       _toInventDim,
        InventDim       _fromInventDim          = this.inventdim(),
        InventDim       _origFromDim            = _fromInventDim)
    {
        // The method is called in a way that makes issueDim _toInventDim and receiptDim - _fromInventDim
        InventDim issueDim   = _toInventDim;
        inventDim receiptDim;

        receiptDim.data(_fromInventDim);
        receiptDim.mergeTransferIssueIntoFinalReceipt(this.inventDimGroupSetup(), issueDim);

        return receiptDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeAutoReserved</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>inventMovement</c> object must be auto-reserved.
    /// </summary>
    /// <returns>
    ///    true if the <c>inventMovement</c> object must be auto-reserved; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method is often called together with the <c>canBeReserved</c> method, which returns a default
    ///    Boolean value from the <c>inventType</c> class hierarchy.
    /// </remarks>
    public boolean mustBeAutoReserved()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedFinancially</Name>
				<Source><![CDATA[
    public boolean  mustBeBookedFinancially()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedPhysically</Name>
				<Source><![CDATA[
    public boolean  mustBeBookedPhysically()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBePicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the transactions that are related to this movement must be picked.
    /// </summary>
    /// <returns>
    ///    true if the transactions must be picked; otherwise, false.
    /// </returns>
    public boolean mustBePicked()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeQuarantineControlled</Name>
				<Source><![CDATA[
    public boolean mustBeQuarantineControlled()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeRegistered</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the transactions that are related to this movement must be registered.
    /// </summary>
    /// <returns>
    ///    true if transactions must be registered; otherwise, false.
    /// </returns>
    public boolean mustBeRegistered()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeRemainControlled</Name>
				<Source><![CDATA[
    public boolean  mustBeRemainControlled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeSameTransSign</Name>
				<Source><![CDATA[
    public boolean mustBeSameTransSign()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckOverDelivery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current <c>InventMovement</c> object requires checking for over delivery.
    /// </summary>
    /// <param name="_direction">
    /// The <c>InventDirection</c> value of the update that is being made.
    /// </param>
    /// <returns>
    /// true if over delivery must be checked; otherwise, false.
    /// </returns>
    public NoYes mustCheckOverDelivery(InventDirection _direction)
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustDoAutoLossProfitPhysical</Name>
				<Source><![CDATA[
    public boolean mustDoAutoLossProfitPhysical()
    {
        return (inventDirection == InventDirection::Receipt &&
            inventQuarantineOrder.mustDoAutoLossProfitPhysical());
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateInventTableCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a value of false because quarantine orders should not cause an update of the
    ///    <c>CostPrice</c> on the related <c>InventTable</c>.
    /// </summary>
    /// <returns>
    ///    Returns false.
    /// </returns>
    public boolean mustUpdateInventTableCostPrice()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(
        InventQuarantineOrder   _inventQuarantineOrder,
        InventType              _inventType = new InventType(_inventQuarantineOrder))
    {
        inventQuarantineOrder = _inventQuarantineOrder;

        super(inventQuarantineOrder,_inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    public InventMovement newMovement_Orig()
    {
        if (!inventQuarantineOrder.RecId)
        {
            return null;
        }

        return InventMov_Quarantine::newFromInventQuarantineOrder(inventQuarantineOrder.orig(),inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_TransferIssue</Name>
				<Source><![CDATA[
    public InventMovement  newMovement_TransferIssue()
    {
        if (inventQuarantineOrder.Status != InventQuarantineStatus::Created)
        {
            return this;
        }

        return InventMovement::construct(this.buffer(),InventMovSubType::TransferReceipt,this.childBuffer());
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_TransferIssueReceive</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new transfer issue to receive the <c>InventMovement</c> class.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>InventMovement</c> class.
    /// </returns>
    public InventMovement newMovement_TransferIssueReceive()
    {
        return InventMovement::construct(this.buffer(),InventMovSubType::TransferReceipt,this.childBuffer());
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_TransferReceipt</Name>
				<Source><![CDATA[
    public InventMovement  newMovement_TransferReceipt()
    {
        if (inventQuarantineOrder.Status == InventQuarantineStatus::Created)
        {
            return this;
        }

        return InventMovement::construct(this.buffer(),InventMovSubType::TransferReceipt,this.childBuffer());
    }

]]></Source>
			</Method>
			<Method>
				<Name>overDeliveryPct</Name>
				<Source><![CDATA[
    public Percent overDeliveryPct()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDirection</Name>
				<Source><![CDATA[
    public InventDirection parmInventDirection(InventDirection _inventDirection = inventDirection)
    {
        inventDirection = _inventDirection;
        return inventDirection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWAddRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds to the catch weight remain physical quantity.
    /// </summary>
    /// <param name="_qty">
    /// A catch weight quantity to add to the remain physical quantity.
    /// </param>
    public void pdsCWAddRemainPhysical(PdsCWInventQty _qty)
    {
        inventQuarantineOrder.PdsCWRemainQty += _qty * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight remain physical quantity.
    /// </summary>
    /// <returns>
    /// The catch weight quantity.
    /// </returns>
    public PdsCWInventQty pdsCWRemainPhysical()
    {
        if (inventDirection == InventDirection::Receipt)
        {
            return inventQuarantineOrder.PdsCWQty - inventQuarantineOrder.pdsCWQtyStartedFinancial();
        }

        return this.transSign() * inventQuarantineOrder.PdsCWRemainQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReserveQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight reserve quantity.
    /// </summary>
    /// <returns>
    /// The catch weight reserve quantity.
    /// </returns>
    public PdsCWInventQty pdsCWReserveQty()
    {
        if (inventDirection == InventDirection::Receipt)
        {
            return 0;
        }

        return this.pdsCWRemainPhysical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWSetRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the catch weight remain physical quantity.
    /// </summary>
    /// <param name="_qty">
    /// A catch weight quantity to set as the remain physical quantity.
    /// </param>
    public void pdsCWSetRemainPhysical(PdsCWInventQty _qty)
    {
        inventQuarantineOrder.PdsCWRemainQty = _qty * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWTransQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight transaction quantity.
    /// </summary>
    /// <returns>
    /// The catch weight quantity.
    /// </returns>
    public PdsCWInventQty pdsCWTransQty()
    {
        return inventQuarantineOrder.PdsCWQty * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingBalanceSheet</Name>
				<Source><![CDATA[
    public LedgerPostingType postingBalanceSheet()
    {
        if (this.transQty() >= 0)
        {
            return LedgerPostingType::InventReceipt;
        }

        return LedgerPostingType::InventIssue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOperations</Name>
				<Source><![CDATA[
    public LedgerPostingType postingOperations()
    {
        if (this.transQty() >= 0)
        {
            return LedgerPostingType::InventProfit;
        }

        return LedgerPostingType::InventLoss;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainFinancialUnit</Name>
				<Source><![CDATA[
    public UnitQty remainFinancialUnit()
    {
        if (inventQuarantineOrder.Status            == InventQuarantineStatus::Started &&
            inventQuarantineOrder.orig().Status     == InventQuarantineStatus::Created)
        {
            return 0;   // to allow creation of expected receipts
        }

        if (inventDirection == InventDirection::Issue)
        {
            return this.transIdSum().deducted();
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainPhysical</Name>
				<Source><![CDATA[
    public InventQty   remainPhysical()
    {
        if (inventDirection == InventDirection::Receipt)
        {
            return inventQuarantineOrder.Qty - inventQuarantineOrder.qtyStartedFinancial();
        }

        return this.transSign() * inventQuarantineOrder.RemainQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveQty</Name>
				<Source><![CDATA[
    public InventQty reserveQty()
    {
        if (inventDirection == InventDirection::Receipt)
        {
            return 0;
        }

        return this.remainPhysical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    public void setInventDimId(InventDimId _dimId)
    {
        inventQuarantineOrder.InventDimIdQuarantine = _dimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRemainPhysical</Name>
				<Source><![CDATA[
    public void setRemainPhysical(InventQty  _inventQty)
    {
        inventQuarantineOrder.RemainQty = _inventQty * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransQty</Name>
				<Source><![CDATA[
    public void setTransQty(InventQty  _qtyInvent)
    {
        if (this.transSign() * inventQuarantineOrder.Qty >= 0)
        {
            inventQuarantineOrder.Qty = _qtyInvent;
        }
        else
        {
            inventQuarantineOrder.Qty = -_qtyInvent;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    public TransDate transDate()
    {
        return inventQuarantineOrder.QuarantineDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferIssueCostPriceInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    The inventory dimension for the quarantine order.
    /// </summary>
    /// <returns>
    ///    The inventory dimension where the transfer was issued.
    /// </returns>
    public InventDim transferIssueCostPriceInventDim()
    {
        return this.inventdim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    public InventTransId transId()
    {
        return inventQuarantineOrder.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transIdSum</Name>
				<Source><![CDATA[
    public InventTransIdSum transIdSum(boolean _reRead = false)
    {
        if (! transIdSum || _reRead)
        {
            transIdSum = InventTransIdSum_InventLocation::newQuarantine(this.inventTransOriginId(),this.transChildType() != InventTransChildType::None,this.transChildType(),this.transChildRefId());
        }

        return transIdSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transIdSumTransId</Name>
				<Source><![CDATA[
    protected InventTransIdSum transIdSumTransId(boolean _reRead = false)
    {
        if (this.transChildType() != InventTransChildType::None)
        {
            if (! transIdSumTransId || _reRead)
            {
                transIdSumTransId = InventTransIdSum_InventLocation::newQuarantine(this.inventTransOriginId());
            }
        }
        else
        {
            transIdSumTransId = this.transIdSum(_reRead);
        }

        return transIdSumTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    public InventQty   transQty()
    {
        return inventQuarantineOrder.Qty * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transRefId</Name>
				<Source><![CDATA[
    public InventTransRefId transRefId()
    {
        return inventQuarantineOrder.QuarantineId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transSign</Name>
				<Source><![CDATA[
    public Integer transSign()
    {
        if (inventDirection == InventDirection::Receipt)
        {
            switch (inventQuarantineOrder.Status)
            {
                case InventQuarantineStatus::Started:
                case InventQuarantineStatus::ReportedFinished:
                    return 1;
            }
        }

        return inventQuarantineOrder.Status == InventQuarantineStatus::Created ? 1 : -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    public InventTransType transType()
    {
        return InventTransType::QuarantineOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAutoPhysical</Name>
				<Source><![CDATA[
    public void updateAutoPhysical(
        InventUpd_Physical  _physical,
        LedgerVoucher       _ledgerVoucher)
    {
        InventTransOriginId existingVirtuel_OriginId = InventTransOrigin::findMarkingRefInventTransOrigin(this.inventTransOriginId(), this.itemId(), true);
        if (existingVirtuel_OriginId)
        {
            InventMov_Virtuel movement_Virtuel = InventMov_Virtuel::newAutoLossProfit_Physical(_physical, this, InventTransOrigin::find(existingVirtuel_OriginId).InventTransId);

            InventUpd_Physical physical_Virtuel = InventUpd_Physical::newAutoLossProfit(movement_Virtuel,
                                                                                           _physical,
                                                                                           -_physical.parmPhysical(),
                                                                                           -_physical.parmPhysicalUnit(),
                                                                                           -_physical.parmProjCostAmountMST());

            physical_Virtuel.updateNow(_ledgerVoucher);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerFinancial</Name>
				<Source><![CDATA[
    public CostAmount updateLedgerFinancial(
        LedgerVoucher           _ledgerVoucher,
        InventUpd_Financial     _updateNow,
        boolean                 _allowNegative = false)
    {
        if (_updateNow.parmFinancial() <= 0)
        {
            return 0;
        }

        if (_updateNow.parmCurrencyCode() != CompanyInfoHelper::standardCurrency())
        {
            throw error("@SYS2009");
        }

        CostAmount costAmountMST = _updateNow.parmCostAmountCur();
        _updateNow.updOperationsAmountLedger(-_updateNow.parmCostAmountCur());

        return costAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventQuarantineOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>InventMov_Quarantine</c> class that is based on the specified
    ///    record.
    /// </summary>
    /// <param name="_inventQuarantineOrder">
    ///    The <c>InventQuarantineOrder</c> record for which the class is instantiated.
    /// </param>
    /// <param name="_inventType">
    ///    The associated <c>InventType</c> class.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventMov_Quarantine</c> class.
    /// </returns>
    public static InventMov_Quarantine newFromInventQuarantineOrder(
        InventQuarantineOrder   _inventQuarantineOrder,
        InventType              _inventType = new InventType(_inventQuarantineOrder))
    {
        return new InventMov_Quarantine(_inventQuarantineOrder);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>