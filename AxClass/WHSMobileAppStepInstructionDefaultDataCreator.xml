<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMobileAppStepInstructionDefaultDataCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class for creating default mobile app data (step title, instruction, description) when step instruction feature enabled.
/// </summary>
internal final class WHSMobileAppStepInstructionDefaultDataCreator
{
    private WHSInstrumentationLogger instrumentationLogger;
    private Set languages = new Set(Types::String);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSMobileAppStepInstructionDefaultDataCreator construct()
    {
        return new WHSMobileAppStepInstructionDefaultDataCreator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefaultMobileAppFlowSteps</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void createDefaultMobileAppFlowSteps()
    {
        using (var activityContext = this.instrumentationLogger().mobileAppEnableStepInstructionActivities().loadDefaultData())
        {
            ttsbegin;

            this.addDefaultSteps(activityContext);
            this.addDefaultFlows();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>forLanguage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSMobileAppStepInstructionDefaultDataCreator forLanguage(LanguageId _languageId)
    {
        languages.add(_languageId);
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDefaultSteps</Name>
				<Source><![CDATA[
    private void addDefaultSteps(SysInstrumentationActivityContext _activityContext)
    {
        ListEnumerator listEnumerator = this.getExtendedClassesList(classStr(WHSMobileAppStep));

        container stepClassesWithoutStepId;
        Set allFoundStepIds = new Set(Types::String);
        var flowStepMap = new Map(Types::Class, Types::Container);
        while (listEnumerator.moveNext())
        {
            var classId = listEnumerator.current();

            WHSMobileAppStep step = this.getMobileAppStepClassObject(classId);
            ListEnumerator stepIds = this.getMobileAppStepIds(classId);
            if (!stepIds)
            {
                stepClassesWithoutStepId += classId2Name(classId);
                continue;
            }

            container flowSteps;
            while (stepIds.moveNext())
            {
                WHSMobileAppStepId stepId = stepIds.current();

                if (allFoundStepIds.in(stepId))
                {
                    warning(strFmt("@WAX:WHSStepIdLinkedToMultipleMobileAppStepClasses", classId2Name(classId)));
                }
                allFoundStepIds.add(stepId);
                
                step.changeStepInputPolicy(WHSMobileAppStepInputPolicy::InputNotFilled);
                WHSMobileAppFlowStep mobileAppFlowStep = this.createMobileAppFlowStep(step, stepId);

                flowSteps += mobileAppFlowStep;
            }

            flowStepMap.insert(step, flowSteps);
        }

        if (conLen(stepClassesWithoutStepId) > 0)
        {
            this.instrumentationLogger().mobileAppEnableStepInstructionActivities().foundStepClassesWithoutStepId(_activityContext, stepClassesWithoutStepId);
        }

        
        this.initLanguages();
        var languageEnum = languages.getEnumerator();
        while (languageEnum.moveNext())
        {
            LanguageId languageId = languageEnum.current();
            this.createOrUpdateStepTitleAndInstruction(languageId, flowStepMap);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateStepTitleAndInstruction</Name>
				<Source><![CDATA[
    private void createOrUpdateStepTitleAndInstruction(LanguageId _languageId, Map _flowStepMap)
    {
        infolog.language(_languageId);

        MapEnumerator en = new MapEnumerator(_flowStepMap);
        while (en.moveNext())
        {
            WHSMobileAppStep step = en.currentKey();
            container flowSteps = en.currentValue();

            var len = conLen(flowSteps);
            for (int i=1; i<=len; i++)
            {
                WHSMobileAppFlowStep mobileAppFlowStep = conPeek(flowSteps, i);

                // step title and instruction
                this.createOrUpdateStepEnterValueTitleAndInstruction(step, mobileAppFlowStep.RecId, _languageId);
                this.createOrUpdateStepConfirmTitleAndInstruction(step, mobileAppFlowStep.RecId, _languageId);
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>initLanguages</Name>
				<Source><![CDATA[
    private void initLanguages()
    {
        if (!languages.elements())
        {
            LanguageTable languageTable;
            while select LanguageId from languageTable
                where languageTable.LabelFile == NoYes::Yes
            {
                languages.add(languageTable.LanguageId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDefaultFlows</Name>
				<Source><![CDATA[
    private void addDefaultFlows()
    {
        ListEnumerator listEnumerator = this.getExtendedClassesList(classStr(WHSMobileAppFlow));

        Set foundWorkExecuteModes = new Set(Types::Enum);

        while (listEnumerator.moveNext())
        {
            var classId = listEnumerator.current();
            WHSMobileAppFlow flow = this.getMobileAppFlowClassObject(classId);

            ListEnumerator workExecuteModes = this.getWorkExecuteModes(classId);
            if (!workExecuteModes)
            {
                continue;
            }

            while (workExecuteModes.moveNext())
            {                
                WHSWorkExecuteMode workExecuteMode = workExecuteModes.current();

                if (foundWorkExecuteModes.in(workExecuteMode))
                {
                    warning(strFmt("@WAX:WHSWorkExecuteModeLinkedToMultipleMobileAppFlowClasses", classId2Name(classId)));
                }

                foundWorkExecuteModes.add(workExecuteMode);

                this.createOrUpdateMobileAppFlow(workExecuteMode, flow);
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private WHSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClassObject</Name>
				<Source><![CDATA[
    private Object getClassObject(ClassId _classID)
    {
        SysDictClass dictClass = new SysDictClass(_classID);
        if (dictClass)
        {
            return dictClass.makeObject();
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMobileAppStepClassObject</Name>
				<Source><![CDATA[
    private WHSMobileAppStep getMobileAppStepClassObject(ClassId _classID)
    {
        WHSMobileAppStep step;

        var instance = this.getClassObject(_classID);
        if (instance && instance is WHSMobileAppStep)
        {
            step = instance as WHSMobileAppStep;
        }

        return step;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMobileAppFlowClassObject</Name>
				<Source><![CDATA[
    private WHSMobileAppFlow getMobileAppFlowClassObject(ClassId _classID)
    {
        WHSMobileAppFlow flow;

        var instance = this.getClassObject(_classID);
        if (instance && instance is WHSMobileAppFlow)
        {
            flow = instance as WHSMobileAppFlow;
        }

        return flow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateStepEnterValueTitleAndInstruction</Name>
				<Source><![CDATA[
    private void createOrUpdateStepEnterValueTitleAndInstruction(WHSMobileAppStep _step, RefRecId _flowStepRecId, LanguageId _languageId)
    {
        _step.changeStepInputPolicy(WHSMobileAppStepInputPolicy::InputNotFilled);

        WHSMobileAppText::createOrUpdateMobileAppText(_flowStepRecId, WHSMobileAppTextType::StepEnterValueTitle, _languageId, _step.parmDefaultStepTitle(), false);
        WHSMobileAppText::createOrUpdateMobileAppText(_flowStepRecId, WHSMobileAppTextType::StepEnterValueInstruction, _languageId, _step.parmDefaultStepInstruction(), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateStepConfirmTitleAndInstruction</Name>
				<Source><![CDATA[
    private void createOrUpdateStepConfirmTitleAndInstruction(WHSMobileAppStep _step, RefRecId _flowStepRecId, LanguageId _languageId)
    {
        _step.changeStepInputPolicy(WHSMobileAppStepInputPolicy::InputFilled);

        WHSMobileAppText::createOrUpdateMobileAppText(_flowStepRecId, WHSMobileAppTextType::StepConfirmTitle, _languageId, _step.parmDefaultStepTitle(), false);
        WHSMobileAppText::createOrUpdateMobileAppText(_flowStepRecId, WHSMobileAppTextType::StepConfirmInstruction, _languageId, _step.parmDefaultStepInstruction(), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateMobileAppFlow</Name>
				<Source><![CDATA[
    private void createOrUpdateMobileAppFlow(WHSWorkExecuteMode _mode, WHSMobileAppFlow _flow)
    {
        WHSMobileAppFlowTable flowTable = WHSMobileAppFlowTable::find(_mode, true);
        container steps = _flow.getStepIds().pack();
        container availablesFields = _flow.getAvailableFields().pack();

        if (!flowTable)
        {
            flowTable.WHSWorkExecuteMode = _mode;
            flowTable.Steps = steps;
            flowTable.AvailableFields = availablesFields;
            flowTable.insert();
        }
        else
        {
            boolean modified;

            if (flowTable.Steps != steps)
            {
                flowTable.Steps = steps;
                modified = true;
            }
            
            if (flowTable.AvailableFields != availablesFields)
            {
                flowTable.AvailableFields = availablesFields;
                modified = true;
            }

            if (modified)
            {
                flowTable.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMobileAppFlowStep</Name>
				<Source><![CDATA[
    private WHSMobileAppFlowStep createMobileAppFlowStep(WHSMobileAppStep _step, WHSMobileAppStepId _stepId)
    {
        WHSMobileAppFlowStep mobileAppFlowStep = WHSMobileAppFlowStep::find('', _stepId, true);
        if (!mobileAppFlowStep)
        {
            mobileAppFlowStep.StepId = _stepId;
            mobileAppFlowStep.StepIcon = _step.parmDefaultStepIcon();
            mobileAppFlowStep.insert();
        }

        return mobileAppFlowStep;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtendedClassesList</Name>
				<Source><![CDATA[
    private ListEnumerator getExtendedClassesList(ClassName _className)
    {
        SysDictClass dictClass = SysDictClass::newName(_className);
        List extendedClassesList = dictClass.extendedBy();
        return extendedClassesList.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMobileAppStepIds</Name>
				<Source><![CDATA[
    private ListEnumerator getMobileAppStepIds(ClassId _classID)
    {
        var dictClass = new SysDictClass(_classID);
        if (dictClass)
        {
            var attributes = dictClass.getAllAttributes();
            if (attributes && attributes.lastIndex() > 0)
            {
                List stepIds = new List(Types::String);
                var lastIndex = attributes.lastIndex();
                for (int i=1; i<=lastIndex; i++)
                {
                    var currentAttribute = attributes.value(i);
                    if (currentAttribute is WHSMobileAppStepIdAttribute)
                    {
                        WHSMobileAppStepIdAttribute attribute = currentAttribute as WHSMobileAppStepIdAttribute;
                        stepIds.addEnd(attribute.parmStepId());
                    }
                }

                if (stepIds.elements() > 0)
                {
                    return stepIds.getEnumerator();
                }
            }
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkExecuteModes</Name>
				<Source><![CDATA[
    private ListEnumerator getWorkExecuteModes(ClassId _classID)
    {
        var dictClass = new SysDictClass(_classID);
        if (dictClass)
        {
            var attributes = dictClass.getAllAttributes();
            if (attributes && attributes.lastIndex() > 0)
            {
                List workExecuteModes = new List(Types::Enum);
                var lastIndex = attributes.lastIndex();
                for (int i=1; i<=lastIndex; i++)
                {
                    var currentAttribute = attributes.value(i);
                    if (currentAttribute is WHSWorkExecuteModeAttribute)
                    {
                        WHSWorkExecuteModeAttribute attribute = currentAttribute as WHSWorkExecuteModeAttribute;
                        workExecuteModes.addEnd(attribute.parmWorkExecuteMode());
                    }
                }

                if (workExecuteModes.elements() > 0)
                {
                    return workExecuteModes.getEnumerator();
                }
            }
        }
        return null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>