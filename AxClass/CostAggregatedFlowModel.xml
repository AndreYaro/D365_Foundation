<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostAggregatedFlowModel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostAggregatedFlowModel</c> class is an abstract class providing cost flow data on aggregated level.
/// </summary>
public abstract class CostAggregatedFlowModel extends CostFlowModel
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for a cost flow chart.
    /// </summary>
    /// <returns>
    /// An instance of the <c>Query</c> class with the query for the flow chart.
    /// </returns>
    protected Query buildQuery()
    {
        query = new Query();
        query.queryType(QueryType::Union);

        var periodsProvider = this.parmPeriodsProvider();

        List periods = periodsProvider.providePeriods();
        ListEnumerator listEnumerator = periods.getEnumerator();

        date minFromDate = dateMax();

        while (listEnumerator.moveNext())
        {
            CostSelectPeriodState period = listEnumerator.current();
            minFromDate = min(period.parmFromDate(), minFromDate);
            this.addDataSourceForDate(query, period.parmFromDate(), period.parmToDate());
        }

        if (minFromDate)
        {
            this.addDataSourceForDate(query, dateNull(), minFromDate - 1);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataSourceForDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a data source with specified date range.
    /// </summary>
    /// <param name = "_query">
    /// The query to which a data source should be added.
    /// </param>
    /// <param name = "_fromDate">
    /// The beginning date of the date range.
    /// </param>
    /// <param name = "_toDate">
    /// The ending date of the date range.
    /// </param>
    private void addDataSourceForDate(Query _query, date _fromDate, date _toDate)
    {
        var costStatementCacheDataSource = _query.addDataSource(tableNum(CostStatementCache));
        costStatementCacheDataSource.unionType(UnionType::UnionAll);
        costStatementCacheDataSource.addSelectionField(fieldNum(CostStatementCache, Amount), SelectionField::Sum);
        costStatementCacheDataSource.addSelectionField(fieldNum(CostStatementCache, TransDate), SelectionField::Max);
        costStatementCacheDataSource.addGroupByField(fieldNum(CostStatementCache, StatementType));
        costStatementCacheDataSource.addGroupByField(fieldNum(CostStatementCache, StatementLineCategoryLevel2));
        costStatementCacheDataSource.addRange(fieldNum(CostStatementCache, StatementType)).value(queryValue(this.parmCostStatementType()));
        costStatementCacheDataSource.addRange(fieldNum(CostStatementCache, TransDate)).value(queryRange(_fromDate, _toDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodsProvider</Name>
				<Source><![CDATA[
    protected CostFlowChartAggregationPeriodsProvider parmPeriodsProvider()
    {
        var periodsProvider = CostFlowChartAggregationPeriodsProvider_Months::construct();

        periodsProvider.parmToDate(toDate);

        return periodsProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostStatementType</Name>
				<Source><![CDATA[
    protected abstract CostStatementType parmCostStatementType()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>