<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>mcrCustPaym_Check</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>MCRCustPaym_Check</c> class that handles customer payments of type "check".
/// </summary>
class mcrCustPaym_Check extends MCRCustPaym
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if a payment field should be editable by the user.
    /// </summary>
    /// <param name="_fieldId">
    ///     The field ID for which this method checks/changes the editable property.
    /// </param>
    /// <returns>
    ///     true if editing should be allowed; otherwise, false.
    /// </returns>
    public boolean allowEdit(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldNum(MCRCustPaymTable, PercentAmount):
                return false;

            case fieldNum(MCRCustPaymTable, CheckNumber):
                return this.allowEditCheckNumber();
        }

        return super(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditCheckNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if it is allowable to update the check number.
    /// </summary>
    /// <returns>
    ///     true if the amount posted is 0; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     The check number is not allowed to be updated if any amount has been
    ///     posted for this payment.
    /// </remarks>
    public boolean allowEditCheckNumber()
    {
        if (mcrCustPaymTable.PostedAmount != 0)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkHold</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the status of check payments.
    /// </summary>
    /// <param name="_mcrCustPaymTable">
    ///     The <c>MCRCustPaymTable</c> record for which this method sets the status.
    /// </param>
    /// <returns>
    ///     true if a check is on hold; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     This method goes out to <c>CustTable</c> first and sees if a value exists
    ///     for CheckHoldAmountThreshold. If values do not exist it uses the
    ///     CheckHoldAmountThreshold specified in the MCROrderParameters table.
    ///     retVal is used to determine if a check payment on this order
    ///     is above one of the thresholds, if customer threshold is 0
    ///     the order parameters is used.
    /// </remarks>
    public boolean checkHold(MCRCustPaymTable _mcrCustPaymTable)
    {
        MCROrderEventTable mcrOrderEventTable;
        real custThreshold = 0;
        // Used to simplify logic and improve readability
        real masterThreshold = 0;
        boolean retVal = false;

        IF (!_mcrCustPaymTable)
        {
            throw error("@MCR27548");
        }

        if (_mcrCustPaymTable.Status != MCRCustPaymStatus::Authorized
            && _mcrCustPaymTable.CheckAuthorized == NoYes::No)
        {
            ttsBegin;
            custThreshold = MCRCustTable::findByCustAccount(_mcrCustPaymTable.CustAccount).CheckHoldThresholdAmt;

            if (custThreshold)
            {
                masterThreshold = custThreshold;
            }
            else
            {
                masterThreshold = SalesParameters::find().MCRCheckHoldThresholdAmt;
            }

            // If the user does not want orders put on check hold no need
            //  to scan the entire payment table
            if (masterThreshold)
            {
                if (_mcrCustPaymTable.Amount >
                CurrencyExchangeHelper::curAmount2CurAmount(masterThreshold, CompanyInfoHelper::standardCurrency(), _mcrCustPaymTable.CurrencyCode))
                {
                    if (_mcrCustPaymTable.RefTableId == tableNum(SalesTable))
                    {
                        mcrOrderEventTable.insertPaymentEvent(MCROrderEventType::CheckHold, _mcrCustPaymTable,
                            strFmt("@MCR25181", _mcrCustPaymTable.Amount, _mcrCustPaymTable.CurrencyCode));
                    }
                    retVal = true;
                }
            }
            ttsCommit;
        }

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves a default value for the specified field.
    /// </summary>
    /// <param name="_fieldId">
    ///     The field for which this method retrieves default values.
    /// </param>
    /// <returns>
    ///     Null if a default is not defined for a field; otherwise, the default
    ///     value defined.
    /// </returns>
    public anytype getDefaultValue(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldNum(MCRCustPaymTable, IsPrePay):
                return NoYes::Yes;

            case fieldNum(MCRCustPaymTable, PercentAmount):
                return 0.0;

            case fieldNum(MCRCustPaymTable, Amount):
                return 0.0;
        }

        return super(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves an identifier for this payment.
    /// </summary>
    /// <returns>
    ///     The check number of the <c>MCRCustPaymTable</c> record.
    /// </returns>
    /// <remarks>
    ///     For a check payment, the return value is the check number.
    ///     The payment reference is written to the
    ///     ledger journal during posting, and is intended to
    ///     identify this payment on a bank deposit slip or
    ///     for other financial records.
    /// </remarks>
    protected PaymReference getPaymReference()
    {
        return mcrCustPaymTable.CheckNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPaymTypeData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if a check number has been provided.
    /// </summary>
    /// <returns>
    ///     true if the check number is not blank; otherwise, false.
    /// </returns>
    public boolean hasPaymTypeData()
    {
        return mcrCustPaymTable.CheckNumber != "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs a new customer payment of type "check".
    /// </summary>
    /// <param name="_custPaymTable">
    ///     The <c>MCRCustPaymTable</c> record for which this method
    ///     constructs a new check payment.
    /// </param>
    /// <param name="_allowUserInput">
    ///     A boolean to determine whether to allow user input during
    ///     the process.
    /// </param>
    public void new(MCRCustPaymTable _custPaymTable, boolean _allowUserInput)
    {
        if (_custPaymTable.CustPaymType != MCRCustPaymType::Check)
        {
            throw error(strFmt("@MCR32269", funcName(),
                               enum2str(MCRCustPaymType::Check)));
        }

        super(_custPaymTable, _allowUserInput);
    }

]]></Source>
			</Method>
			<Method>
				<Name>performBalanceCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform balance for the payment method.
    /// </summary>
    /// <returns>The balance.</returns>
    [Hookable(false)]
    protected real performBalanceCheck()
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performAuth</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs authorization on this payment.
    /// </summary>
    /// <returns>
    ///     The updated status after authorization.
    /// </returns>
    protected MCRCustPaymStatus performAuth()
    {
        if (mcrCustPaymTable.Status == MCRCustPaymStatus::Paid
            || mcrCustPaymTable.Status == MCRCustPaymStatus::Declined)
        {
            return mcrCustPaymTable.Status;
        }
        if (mcrCustPaymTable.Amount > 0)
        {
            // If the order is supposed to go on check hold, true will
            // be returned
            if (!mcrCustPaymTable.CheckAuthorized && this.checkHold(mcrCustPaymTable))
            {
                mcrCustPaymTable.Status = MCRCustPaymStatus::Posted;
            }
            else
            {
                mcrCustPaymTable.Status = MCRCustPaymStatus::Paid;
                mcrCustPaymTable.CheckAuthorized = NoYes::Yes;
            }
        }
        else
        {
            mcrCustPaymTable.Status = MCRCustPaymStatus::NotSubmitted;
        }
        ttsBegin;
        mcrCustPaymTable.update();
        ttsCommit;
        return mcrCustPaymTable.Status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs posting operations after posting records to the
    ///     ledger journal.
    /// </summary>
    /// <param name="_amount">
    ///     The amount being posted.
    /// </param>
    protected void performPost(Amount _amount)
    {
        // nothing to do
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAuthorize</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates this payment for authorization.
    /// </summary>
    /// <param name="_showErrors">
    ///     A boolean that determines whether to write errors to an infolog; optional.
    /// </param>
    /// <returns>
    ///     true if all data for this payment is valid and the payment should
    ///     be allowed to be submitted for authorization; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     If the return value is false, then this payment should not be submitted
    ///     for authorization.
    ///     Overridden to perform validations specific to this payment type.
    /// </remarks>
    public boolean validateAuthorize(boolean _showErrors = true)
    {
        boolean                     isValid;
        RetailStoreTenderTypeTable  retailStoreTenderTypeTable;

        setPrefix(strFmt("@MCR32270", mcrCustPaymTable.TenderTypeId,
                         mcrCustPaymTable.Amount));

        isValid = super(_showErrors);

        // payment account is required
        select * from retailStoreTenderTypeTable
            where retailStoreTenderTypeTable.tenderTypeId == mcrCustPaymTable.TenderTypeId
            && retailStoreTenderTypeTable.Channel == mcrCustPaymTable.Channel;

        if (! retailStoreTenderTypeTable
            || (retailStoreTenderTypeTable
                 &&retailStoreTenderTypeTable.LedgerDimension == 0))
        {
            isValid = false;

            if (_showErrors)
            {
                error(strFmt("@MCR10845", mcrCustPaymTable.TenderTypeId));
            }
        }

        // check data is required
        if (!this.hasPaymTypeData())
        {
            isValid = false;

            if (_showErrors)
            {
                error("@MCR20786");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates this payment for an insert or update.
    /// </summary>
    /// <param name="_showErrors">
    ///     A boolean that determines whether to write errors to an infolog.
    /// </param>
    /// <param name="_validateAccountSetup">
    ///     A boolean determing whether to validate if an account is
    ///     setup on the <c>RetailStoreTenderTypeTable</c>; optional.
    /// </param>
    /// <returns>
    ///     true if all data for this payment is valid and should be allowed
    ///     to be saved to the database; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     Overridden to perform validations specific to this payment type.
    /// </remarks>
    public boolean validateWrite(boolean _showErrors = true,
                          boolean _validateAccountSetup = true)
    {
        boolean isValid = super(_showErrors, _validateAccountSetup);

        // percent amount must be 0
        if (this.isPercentAmountNotZero(mcrCustPaymTable))
        {
            isValid = false;

            if (_showErrors)
            {
                error(strFmt("@MCR10596", enum2str(mcrCustPaymTable.CustPaymType)));
            }
        }

        // amount must be non-negative
        if (this.isNegativeAmount(mcrCustPaymTable))
        {
            isValid = false;

            if (_showErrors)
            {
                error(strFmt("@MCR10595", enum2str(mcrCustPaymTable.CustPaymType)));
            }
        }

        // check number is required
        if (!this.hasPaymTypeData())
        {
            isValid = false;

            if (_showErrors)
            {
                error("@MCR10657");
            }
        }
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPercentAmountNotZero</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the <c>PercentAmount</c> field of <c>MCRCustPaymTable</c> is not equal to zero.
    /// </summary>
    /// <param name = "_mcrCustPaymTable">
    /// The record buffer of <c>MCRCustPaymTable</c> table.
    /// </param>
    /// <returns>
    /// True if <c>PercentAmount</c> field of <c>MCRCustPaymTable</c> is not equal to zero; otherwise, false.
    /// </returns>
    protected boolean isPercentAmountNotZero(MCRCustPaymTable _mcrCustPaymTable)
    {
        return (_mcrCustPaymTable.PercentAmount != 0.0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNegativeAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the <c>Amount</c> field of <c>MCRCustPaymTable</c> is negative.
    /// </summary>
    /// <param name = "_mcrCustPaymTable">
    /// The record buffer of <c>MCRCustPaymTable</c> table.
    /// </param>
    /// <returns>
    /// True if <c>Amount</c> field of <c>MCRCustPaymTable</c> is negative; otherwise, false.
    /// </returns>
    protected boolean isNegativeAmount(MCRCustPaymTable _mcrCustPaymTable)
    {
        return (_mcrCustPaymTable.Amount < 0.0);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>