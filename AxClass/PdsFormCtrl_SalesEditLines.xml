<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsFormCtrl_SalesEditLines</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The form control class for the 'SalesEditLines' form
/// </summary>
/// <remarks>
/// the synchronization of the catch weight values has been moved to
/// the tables modifiedField method.
/// </remarks>
class PdsFormCtrl_SalesEditLines extends PmfFormCtrl
{
    SalesFormLetter     formLetter;
    SalesEditLinesForm  salesEditLinesForm;
    DocumentStatus      documentStatus;
    boolean             allowFromSpec;
    boolean             isLoadPostingPackingSlip;
    boolean             isTransportLoadPostingPackingSlip;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fieldModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overridden method that is being called whenever a relevant field is being changed
    /// </summary>
    /// <param name="_fieldId">
    /// The field that has changed the value
    /// </param>
    public void fieldModified(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(SalesParmLine,ItemId):
                this.updateDesign();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// initialize the form control class after the actual form run has
    /// been initialized
    /// </summary>
    /// <remarks>
    /// show/hide the custom controls that depend only on the status of
    /// the document
    /// </remarks>
    public void initPost()
    {
        boolean             enableDisposition;
        PdsMRCParameters    mrcParm;
        Object              ctrl;

        super();

        if (#PdsShelfEnabled)
        {
            enableDisposition = (documentStatus == DocumentStatus::PackingSlip
                                || documentStatus == DocumentStatus::PickingList);

            formRun.design()
                .controlName(formControlStr(SalesEditLines,PdsResetDispositionStatus))
                .visible(enableDisposition);
        }

        if (#PdsMRCEnabled)
        {
            if (documentStatus == DocumentStatus::PackingSlip
                || documentStatus == DocumentStatus::Invoice)
            {
                formRun.design()
                    .controlName(formControlStr(SalesEditLines,PdsMRCDocHandle))
                    .visible(true);
                mrcParm = PdsMRCParameters::find();

                ctrl = formRun.design()
                        .controlName(formControlStr(SalesEditLines,PdsMRCPrintOnPack));
                ctrl.value(mrcParm.PrintMSDSOnPack);
                ctrl.visible(!formLetter.proforma());

                ctrl = formRun.design()
                        .controlName(formControlStr(SalesEditLines,PdsMRCPostingError));
                ctrl.value(mrcParm.PostingError);
            }
            else
            {
                formRun.design()
                    .controlName(formControlStr(SalesEditLines,PdsMRCDocHandle))
                    .visible(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// substantiates the object
    /// </summary>
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsLoadPostingPackingSlip</Name>
				<Source><![CDATA[
    public boolean parmIsLoadPostingPackingSlip(boolean _isLoadPostingPackingSlip = isLoadPostingPackingSlip)
    {
        isLoadPostingPackingSlip = _isLoadPostingPackingSlip;

        return isLoadPostingPackingSlip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsTransportLoadPostingPackingSlip</Name>
				<Source><![CDATA[
    public boolean parmIsTransportLoadPostingPackingSlip(boolean _isTransportLoadPostingPackingSlip = isTransportLoadPostingPackingSlip)
    {
        isTransportLoadPostingPackingSlip = _isTransportLoadPostingPackingSlip;

        return isTransportLoadPostingPackingSlip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormLetter</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets/sets salesFormletter class
    /// </summary>
    /// <param name="_formLetter">
    /// SalesFormletter object
    /// </param>
    /// <returns>
    /// returns salesFormLetter object
    /// </returns>
    public SalesFormLetter parmFormLetter(SalesFormLetter _formLetter = null)
    {
        if (!prmisDefault(_formLetter))
        {
            formLetter = _formLetter;
            if (formLetter)
            {
                documentStatus = formLetter.documentStatus();
            }
        }

        return formLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesEditLinesForm</Name>
				<Source><![CDATA[
    public SalesEditLinesForm parmSalesEditLinesForm(SalesEditLinesForm _salesEditLinesForm = salesEditLinesForm)
    {
        salesEditLinesForm = _salesEditLinesForm;

        return salesEditLinesForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>specQtyChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// method called, when the user changes the value of the 'SpecQty' dropdown
    /// </summary>
    /// <param name="_allowFromSpec">
    /// indicator, if the current setting of the field allows for editing
    /// the quantity fields
    /// </param>
    /// <remarks>
    /// The passed indicator needs to be kept as other update triggers might
    /// occur and the value is required to determine the new state of the controls
    /// </remarks>
    public void specQtyChanged(boolean _allowFromSpec)
    {
        allowFromSpec = _allowFromSpec;
        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the control properties based on the current state
    /// of the datasources
    /// </summary>
    public void updateDesign()
    {
        #define.CtrlNameBatchAttribReserve("PdsBatchAttribReserve")

        boolean         isCWItem;
        boolean         inventoried;
        boolean         editDeliverNow;
        boolean         isCorrectionOrCancel;
        SalesParmLine   parmLine = buffer;
        SalesLine       salesLine;

        super();

        if (#PdsCatchWeightEnabled)
        {
            if (!salesEditLinesForm)
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            salesLine = parmLine.salesLine();
            isCWItem = salesLine.type().pdsIsCWItemAllowed()
                        && PdsGlobal::pdsIsCWItem(parmLine.ItemId);
            inventoried = salesLine.isStocked();
            editDeliverNow = salesEditLinesForm.editDeliverNow() 
                             && !(isLoadPostingPackingSlip || isTransportLoadPostingPackingSlip);
            isCorrectionOrCancel = formLetter.isVersioningCorrectionOrCancel();

            // Note that this class extends the field enabling set by SalesEditLines form SalesParmLine.active.
            // Changes other than to catch weight fields might need to be ported to it as well.
            this.enableDSField(fieldNum(SalesParmLine,PdsCWDeliverNow), isCWItem && editDeliverNow && allowFromSpec && !isCorrectionOrCancel);
            this.enableDSField(fieldNum(SalesParmLine,PdsCWRemainBefore), isCWItem && allowFromSpec && !isCorrectionOrCancel);
            this.enableDSField(fieldNum(SalesParmLine,PdsCWRemainAfterInvent), isCWItem && allowFromSpec && !isCorrectionOrCancel);

            this.enableDSField(fieldNum(SalesParmLine,DeliverNow), !isCWItem && editDeliverNow && allowFromSpec);
            this.enableDSField(fieldNum(SalesParmLine,RemainBefore), !isCWItem && allowFromSpec);
            this.enableDSField(fieldNum(SalesParmLine,RemainAfter), !isCWItem && allowFromSpec);
            this.enableDSField(fieldNum(SalesParmLine,InventNow), !isCWItem && editDeliverNow && inventoried && allowFromSpec);
            this.enableDSField(fieldNum(SalesParmLine,RemainBeforeInvent), !isCWItem && inventoried && allowFromSpec);
            this.enableDSField(fieldNum(SalesParmLine,RemainAfterInvent), !isCWItem && inventoried && allowFromSpec);
        }

        if (#PdsBatchAttribEnabled && formRun)
        {
            formRun.design()
                .controlName(#CtrlNameBatchAttribReserve)
                .enabled(parmLine.inventTable().isItemBatchActivated());
        }

        if (#PdsMRCEnabled && (documentStatus == DocumentStatus::PackingSlip || documentStatus == DocumentStatus::Invoice))
        {
            formRun.design().controlName(formControlStr(SalesEditLines,PdsMRCPrintOnPack)).visible(!formLetter.proforma());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an instance of the class
    /// </summary>
    /// <returns>
    /// returns instance
    /// </returns>
    public static PdsFormCtrl_SalesEditLines construct()
    {
        return new PdsFormCtrl_SalesEditLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new form control from a formrun object
    /// </summary>
    /// <param name="_fr">
    /// the form run object to be controled by the new form control
    /// </param>
    /// <returns>
    /// the new form control object
    /// </returns>
    public static PdsFormCtrl_SalesEditLines newFromForm(FormRun _fr)
    {
        PdsFormCtrl_SalesEditLines  formCtrl;

        formCtrl = PdsFormCtrl_SalesEditLines::construct();
        formCtrl.parmFormRun(_fr);

        return formCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>