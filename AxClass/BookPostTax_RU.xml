<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BookPostTax_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class BookPostTax_RU extends TaxReverseTax
{
    SalesPurchBookVATProcessLogTransOper_RU logTransOper;
    CurrencyCode                            currencyCode;
    LedgerVoucher                           ledgerVoucher;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAndInsertTaxes</Name>
				<Source><![CDATA[
    public TaxAmount calcAndInsertTaxes(Voucher   _originalvoucher,
                                           TransDate _originalTransDate)
    {
        TaxGroupData taxGroupData;
        ;
        currencyCode = CompanyInfoHelper::standardCurrency();

        ttsbegin;

        taxWorkTrans.clear();
        taxWorkTrans.HeadingRecId        = headingRecId;
        taxWorkTrans.SourceTableId       = logTransOper.TableId;
        taxWorkTrans.SourceRecId         = logTransOper.RecId;
        taxWorkTrans.TaxCode             = logTransOper.TaxCode;
        taxWorkTrans.TaxGroup            = '';
        taxWorkTrans.TaxItemGroup        = '';
        taxWorkTrans.Source              = this.taxModuleType();
        taxWorkTrans.Voucher             = voucher;
        taxWorkTrans.TransDate           = taxDate;
        taxWorkTrans.CalculationDate     = taxDate;
        taxWorkTrans.TaxDirection        = this.determineDirection(taxGroupData);
        taxWorkTrans.CurrencyCode        = currencyCode;
        taxWorkTrans.LedgerDimension     = LedgerDimensionFacade::serviceApplyFixedDimensions(
            LedgerDimensionFacade::serviceCreateLedgerDimension(logTransOper.LedgerDimension, logTransOper.dimensionDefault()));

        taxWorkTrans.SourceCurrencyCode  = currencyCode;

        taxWorkTrans.TaxAmount           = - logTransOper.TaxAmount;
        taxWorkTrans.TaxAmountCur        = - logTransOper.TaxAmount;
        taxWorkTrans.TaxAmountRep        = - logTransOper.TaxAmount;
        taxWorkTrans.TaxBaseAmount       = - logTransOper.AmountLiableToVAT;
        taxWorkTrans.TaxBaseAmountCur    = - logTransOper.AmountLiableToVAT;
        taxWorkTrans.TaxBaseAmountRep    = - logTransOper.AmountLiableToVAT;

        taxWorkTrans.SourceTaxAmountCur  = - logTransOper.TaxAmount;
        taxWorkTrans.SourceBaseAmountCur = - logTransOper.AmountLiableToVAT;

        taxWorkTrans.TaxOrigin           = TaxOrigin::Tax;
        taxWorkTrans.HeadingTableId      = headingTableId;

        taxWorkTrans.OffsetLedgerDimension_RU = LedgerDimensionFacade::serviceApplyFixedDimensions(
            LedgerDimensionFacade::serviceCreateLedgerDimension(logTransOper.OffsetLedgerDimension, logTransOper.DefaultDimension));

        taxWorkTrans.insert();

        ttscommit;

        return logTransOper.TaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDirection</Name>
				<Source><![CDATA[
    protected TaxDirection determineDirection(TaxGroupData _taxGroupData)
    {
        TaxDirection taxDirection;

        switch (this.taxModuleType())
        {
            case TaxModuleType::IncomingVATProcessing_RU :
                taxDirection = TaxDirection::IncomingTax;
                break;

            case TaxModuleType::OutgoingVATProcessing_RU :
                taxDirection = TaxDirection::OutgoingTax;
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return taxDirection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerVoucher</Name>
				<Source><![CDATA[
    public LedgerVoucher parmLedgerVoucher(LedgerVoucher _ledgerVoucher = ledgerVoucher)
    {
        ;
        ledgerVoucher = _ledgerVoucher;
        return ledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLogTransOper</Name>
				<Source><![CDATA[
    public SalesPurchBookVATProcessLogTransOper_RU parmLogTransOper(SalesPurchBookVATProcessLogTransOper_RU _logTransOper)
    {
        logTransOper = _logTransOper;
        return logTransOper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    protected void post(LedgerPostingController _ledgerPostingController,
                        TaxTrans                _taxTrans,
                        TaxAmount               _taxAmount,
                        TaxAmount               _chargeAmount,
                        CurrencyExchangeHelper  _exchRateHelper,
                        LedgerDimensionAccount  _ledgerDimension,
                        LedgerDimensionAccount  _transactionLineLedgerDimension,
                        LedgerDimensionAccount  _taxOffsetUseTaxLedgerDimension,
                        LedgerDetailLevel       _ledgerDetailLevel   = LedgerDetailLevel::AsDefault,
                        ProjLedger              _projLedger = null,
                        LedgerDimensionAccount  _offsetLedgerDimension = 0,
                        AmountMSTSecondary      _amountMSTSecondary    = 0
                        )
    {
        LedgerVoucherTransObject    ledgerVoucherTransObject;
        LedgerBondClient_RU         ledgerBondClient;
        ;

        ledgerBondClient = _ledgerPostingController.getReference().ledgerBondClient_RU();

        if (ledgerBondClient)
        {
            ledgerBondClient.addNewLogObject();
        }

        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(_ledgerPostingController.getReference(),
                                                                                         LedgerPostingType::TaxReport,
                                                                                         _ledgerDimension,
                                                                                         currencyCode,
                                                                                         _taxAmount,
                                                                                         _exchRateHelper);
        ledgerVoucherTransObject.parmSourceTableId(logTransOper.TableId);
        ledgerVoucherTransObject.parmSourceRecId(logTransOper.RecId);
        ledgerVoucherTransObject.parmTransTxt(logTransOper.TransTxt);

        if (_taxTrans.RecId)
        {
            ledgerVoucherTransObject.addTaxTransRelationship(_taxTrans.RecId, TaxTransRelationshipType::Tax);
        }

        _ledgerPostingController.addTrans(ledgerVoucherTransObject);

        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(_ledgerPostingController.getReference(),
                                                                                         LedgerPostingType::TaxReport,
                                                                                         _offsetLedgerDimension,
                                                                                         currencyCode,
                                                                                         - _taxAmount,
                                                                                         _exchRateHelper);

        ledgerVoucherTransObject.parmSourceTableId(logTransOper.TableId);
        ledgerVoucherTransObject.parmSourceRecId(logTransOper.RecId);

        ledgerVoucherTransObject.parmTransTxt(logTransOper.TransTxt);

        if (_taxTrans.RecId)
        {
            ledgerVoucherTransObject.addTaxTransRelationship(_taxTrans.RecId, TaxTransRelationshipType::Offset_RU);
        }

        _ledgerPostingController.addTrans(ledgerVoucherTransObject);

        if (ledgerBondClient)
        {
            ledgerBondClient.bondLastVRef2CurrentLog();
            ledgerBondClient.removeCurrentLogObject();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveAndPost</Name>
				<Source><![CDATA[
    public void saveAndPost(LedgerPostingController _ledgerPostingController, boolean _posting = true)
    {
        TaxTrans                taxTrans;
        CurrencyExchangeHelper  currencyExchangeHelper;
        LedgerRecId             ledgerRecId = Ledger::current();

        ttsbegin;

        while select taxWorkTrans
            where taxWorkTrans.HeadingRecId  == headingRecId
        {
            if (taxWorkTrans.TaxAmount || taxWorkTrans.TaxBaseAmount || taxWorkTrans.TaxBaseQty)
            {
                taxTrans.clear();

                this.initFromTaxWorkTrans(taxTrans, taxWorkTrans, TaxOrigin::Tax);

                taxTrans.Voucher             = voucher;

                if (_posting)
                {
                    this.initTaxTrans(taxTrans, '');
                    taxTrans.insert();
                }

                if (taxWorkTrans.ExemptTax == NoYes::No && taxTrans.TaxAmount)
                {
                    currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(ledgerRecId,
                        _ledgerPostingController.getReference().parmTransDate());

                    this.post(_ledgerPostingController,
                        taxTrans,
                        - taxTrans.TaxAmount,
                        0,
                        currencyExchangeHelper,
                        taxWorkTrans.LedgerDimension,
                        0,
                        0,
                        LedgerDetailLevel::AsDefault,
                        null,
                        taxWorkTrans.OffsetLedgerDimension_RU);
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxModuleType</Name>
				<Source><![CDATA[
    abstract protected TaxModuleType taxModuleType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BookPostTax_RU construct(LedgerVoucher                            _ledgerVoucher,
                                           LedgerVoucher                            _ledgerVoucherCorrect,
                                           Voucher                                  _voucher,
                                           TransDate                                _transDate,
                                           LedgerJournalTransTxt                    _txt,
                                           boolean                                  _processMode,
                                           SalesPurchBookVATProcessLogTransOper_RU  _logTransOper)
    {
        LedgerVoucher   ledgerVoucher;
        BookPostTax_RU  bookPostTax;
        if ((_logTransOper.TaxAmount < 0 && _processMode) || (_logTransOper.TaxAmount > 0 && ! _processMode))
        {
            ledgerVoucher = _ledgerVoucher;
        }
        else
        {
            ledgerVoucher = _ledgerVoucherCorrect;
        }

        switch (_logTransOper.TableId)
        {
            case tableNum(SalesBookVATProcessLogTransOper_RU):
                bookPostTax = new BookPostTax_Sales_RU(_voucher, _transDate, _txt);
                break;

            case tableNum(PurchBookVATProcessLogTransOper_RU):
                bookPostTax = new BookPostTax_Purch_RU(_voucher, _transDate, _txt);
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        bookPostTax.parmLogTransOper(_logTransOper);
        bookPostTax.parmLedgerVoucher(ledgerVoucher);

        return bookPostTax;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>