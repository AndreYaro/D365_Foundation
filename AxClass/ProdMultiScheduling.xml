<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdMultiScheduling</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProdMultiScheduling</c> is the base class for operations and job scheduling update classes.
/// </summary>
/// <remarks>
///    This is an <c>abstract</c> class. Instances of this class cannot be created. Only derived classes
///    can be instantiated. It also means that the user interface should not be implemented.
/// </remarks>
abstract class ProdMultiScheduling extends ProdMulti
{
    ProdParmScheduling standardParmScheduling;
    ProdParmScheduling lateSelectionParmScheduling;
    boolean isLateSelectionParmBufferSet;

    #DEFINE.CurrentVersion(8)
    #LOCALMACRO.CurrentList
        standardParmScheduling,
        isLateSelectionParmBufferSet,
        lateSelectionParmScheduling
    #ENDMACRO

    #define.Version7(7)
    #LOCALMACRO.Version7List
        standardParmScheduling
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Decides whether the class is shown in the list of batch journal types.
    /// </summary>
    /// <returns>
    ///    true if the class is set to be shown in the list batch journal types; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A class that can be used in a batch journal is a class for which the same parameters can repeatedly
    ///    be used. The dialog box can be shown and the parameters can be changed, but parameters of some
    ///    classes might build on data that is only valid for a short time. Running a class two times with the
    ///    same parameters is not always possible.If <see cref="M:RunBaseBatch.canGoBatch" /> is false, this
    ///    method will have no effect.
    /// </remarks>
    boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables you to perform any clean up that is required after a dialog box has been canceled.
    /// </summary>
    /// <remarks>
    ///    Override this method if any clean up is necessary after a dialog box has been canceled.
    /// </remarks>
    void cleanupDialog()
    {
        super();

        ProdParmScheduling::deleteParameters(this.parmId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultParmBuffer</Name>
				<Source><![CDATA[
    ParmBuffer defaultParmBuffer()
    {
        ProdParmScheduling  prodParmScheduling;

        return prodParmScheduling;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmBuffer</Name>
				<Source><![CDATA[
    void  initParmBuffer(ParmBuffer  _prodParmScheduling)
    {
        ProdParmScheduling prodParmScheduling = _prodParmScheduling;
        ProdParmScheduling saveProdParmScheduling;

        Global::buf2Buf(prodParmScheduling, saveProdParmScheduling);

        ProdParmScheduling parmSchedulingSourceLocal = standardParmScheduling;
        var prodParmUpdate = this.parmUpdate();

        if (isLateSelectionParmBufferSet && prodParmUpdate.LateSelection && prodParmUpdate.LateSelectionQuery)
        {
            parmSchedulingSourceLocal = lateSelectionParmScheduling;
        }

        Global::buf2Buf(parmSchedulingSourceLocal, prodParmScheduling);
        
        prodParmScheduling.ParmId           = saveProdParmScheduling.ParmId;
        prodParmScheduling.LineNum          = saveProdParmScheduling.LineNum;
        prodParmScheduling.ProdId           = saveProdParmScheduling.ProdId;
        prodParmScheduling.JobStatus        = saveProdParmScheduling.JobStatus;
        prodParmScheduling.ExecutedDateTime = saveProdParmScheduling.ExecutedDateTime;

        prodParmScheduling.SchedMethod      = saveProdParmScheduling.SchedMethod;
        prodParmScheduling.JobId            = saveProdParmScheduling.JobId;
        prodParmScheduling.WrkCtrIdSched    = saveProdParmScheduling.WrkCtrIdSched;

        prodParmScheduling.AutoUpdate       = autoUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    void insert(
        Common                  _common,
        ParmBuffer      _prodParmScheduling
        )
    {
        ProdTable       prodTable;
        ProdRouteJob    prodRouteJob;
        ProdParmScheduling prodParmScheduling = _prodParmScheduling;

        switch (_common.TableId)
        {
            case tablenum(ProdTable):
                prodTable = _common;
                if (usedInitParmDefault)
                {
                    standardParmScheduling.initFromProdParametersDim(prodTable.prodParametersDim());
                    usedInitParmDefault = false;
                }
                break;
            case tablenum(ProdRouteJob):
                prodRouteJob = _common;
                if (usedInitParmDefault)
                {
                    standardParmScheduling.initFromProdParametersDim(prodRouteJob.prodTable().prodParametersDim());
                    usedInitParmDefault = false;
                }
                break;
        }

        super(_common,prodParmScheduling);

        switch (_common.TableId)
        {
            case tablenum(ProdTable):
                prodParmScheduling.ProdId   = prodTable.ProdId;
                break;
            case tablenum(ProdRouteJob):
                prodParmScheduling.initFromProdRouteJob(prodRouteJob);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    public Query query()
    {
        if (toggleIsEnabledForEnsuringParamsAreSet)
        {
            ParmUpdate parmUpdate = this.parmUpdate();

            if (parmUpdate && parmUpdate.LateSelectionQuery)
            {
                return new Query(parmUpdate.LateSelectionQuery);
            }

            return null;
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    LineNum lastLineNum()
    {
        return ProdParmScheduling::lastLineNum(parmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Serializes the current instance of the <c>ProdMultiScheduling</c> class.
    /// </summary>
    /// <returns>
    ///    A container that contains the current instance of the <c>ProdMultiScheduling</c> class.
    /// </returns>
    /// <remarks>
    ///    All variables that are required to re-initialize the class after construction must be packed.
    ///    Typically, a macro in the class declaration lists the variables to pack. Another macro holds a
    ///    version number that refers to the version of the variable list. When a new variable is introduced,
    ///    follow these steps:
    ///    <list type="number">
    ///       <item>
    ///          <description>Increment the version number in the version macro.</description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Copy the current list to the <c>unpack</c> method.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>Add the new variable to the bottom of the list.</description>
    ///       </item>
    ///       <item>
    ///          <description>Recompile the class.</description>
    ///       </item>
    ///    </list>
    ///     When the
    ///    <c>
    ///       isSwappingPrompt
    ///    </c>
    ///     method returns a value of true, it may be necessary to pack some prompt-related variables.
    /// </remarks>
    container pack()
    {
        return [#CurrentVersion,#CurrentList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStandardParm</Name>
				<Source><![CDATA[
    ParmBuffer parmStandardParm(ParmBuffer _standard = standardParmScheduling)
    {
        standardParmScheduling = _standard;

        return standardParmScheduling;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLateSelectionParm</Name>
				<Source><![CDATA[
    internal void setLateSelectionParm(ParmBuffer _standard)
    {
        isLateSelectionParmBufferSet = true;
        lateSelectionParmScheduling = _standard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deserializes the <paramref name="_packedClass" /> parameter value to an instance of the
    ///    <c>ProdMultiScheduling</c> class.
    /// </summary>
    /// <param name="_packedClass">
    ///    The container from which to deserialize the instance.
    /// </param>
    /// <returns>
    ///    true if deserialization was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    When the <c>isSwappingPrompt</c> method returns a value of true, you may have to unpack some
    ///    prompt-related variables.
    /// </remarks>
    boolean unpack(container _packedClass)
    {
        boolean     ret;
        Integer     version     = conpeek(_packedClass,1);
        container   base;

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList,base] = _packedClass;
                ret = super(base);
                break;
            case #Version7 :
                [version,#Version7List,base] = _packedClass;
                ret = super(base);
                break;
            default :
                this.initParmDefault();
                ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDeleteResourcesCapacityReservations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if resources capacity reservations can be deleted for the given production order.
    /// </summary>
    /// <param name = "_prodParmScheduling">The production order whose capacity reservations to be deleted.</param>
    /// <returns>True if the capacity reservations can be deleted.</returns>
    protected boolean canDeleteResourcesCapacityReservations(ProdParmScheduling _prodParmScheduling)
    {
        // Only run when the Prod Order is not Stopped and the Prod Order has no active work.
        return !WHSProdTable::find(_prodParmScheduling.ProdId).Stopped &&
               !WHSProdTable::isWorkActiveForProdOrder(_prodParmScheduling.ProdId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProdDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete resources capacity reservations for production orders before scheduling.
    /// </summary>
    void updateProdDeleted()
    {
        ProdTable               prodTable;
        ProdTable               prodTableRef;
        ProdParmScheduling      prodParmScheduling;

        // Not necessary if only one parm.
        if ((select count(RecId) from prodParmScheduling where prodParmScheduling.ParmId == this.parmId()).RecId <= 1)
        {
            return;
        }

        ttsbegin;

        while select prodParmScheduling
            join CollectRefProdId, ProdLocked from prodTable
            where prodParmScheduling.ProdId == prodTable.ProdId
               && prodParmScheduling.ParmId == this.parmId()
               && prodTable.ProdLocked      == NoYes::No
        {
            if (!this.canDeleteResourcesCapacityReservations(prodParmScheduling))
            {
                continue;
            }

            if (prodParmScheduling.SchedRef || prodParmScheduling.SyncRef)
            {
                while select ProdId from prodTableRef
                where prodTableRef.CollectRefProdId    == prodTable.CollectRefProdId
                    && prodTableRef.ProdLocked          == NoYes::No
                {
                    WrkCtrCapRes::updateRefIdDeleted(WrkCtrCapRefType::Production, prodTableRef.ProdId);
                }
            }
            else
            {
                WrkCtrCapRes::updateRefIdDeleted(WrkCtrCapRefType::Production, prodParmScheduling.ProdId);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcOverlap</Name>
				<Source><![CDATA[
    static Integer calcOverlap(TransDate _testFromDate,
                                TransDate _testToDate,
                                int  _testFromTime,
                                int  _testToTime,
                                TransDate _onFromDate,
                                TransDate _onToDate,
                                int  _onFromTime,
                                int  _onToTime
                               )

    {
        Integer overlap;

        if ((_testFromDate    >  _onFromDate    && _testFromDate    <  _onToDate)                                          ||
            (_testFromDate    == _onFromDate    && _testFromDate    <  _onToDate       && _testFromTime   >= _onFromTime)    ||
            (_testFromDate    >  _onFromDate    && _testFromDate    == _onToDate       && _testFromTime   <  _onToTime)      ||
            (_testFromDate    == _onFromDate    && _testFromDate    == _onToDate       && _testFromTime   >= _onFromTime     &&
             _testFromTime    <  _onToTime      && _testFromTime    <  _testToTime     && _onFromTime     <  _onToTime)        )
            overlap += 1;

        if ((_testToDate      >  _onFromDate    && _testToDate      <  _onToDate)                                          ||
            (_testToDate      == _onFromDate    && _testToDate      <  _onToDate       && _testToTime     >  _onFromTime)    ||
            (_testToDate      >  _onFromDate    && _testToDate      == _onToDate       && _testToTime     <= _onToTime)      ||
            (_testToDate      == _onFromDate    && _testToDate      == _onToDate       && _testToTime     >  _onFromTime     &&
             _testToTime      <= _onToTime      && _testFromTime    <  _testToTime     && _onFromTime     <  _onToTime)       )
            overlap += 2;

        if ((_testFromDate    < _onFromDate    || (_testFromDate    == _onFromDate    && _testFromTime   < _onFromTime)) &&
            (_testToDate      > _onToDate      || (_testToDate      == _onToDate      && _testToTime     > _onToTime)))
            overlap = ProdMultiScheduling::overlapSubset();

        return overlap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProdMultiScheduling construct(
        ProdSchedMethod     _prodSchedMethod
        )
    {
        ProdMultiScheduling prodMultiScheduling;

        switch (_prodSchedMethod)
        {
            case ProdSchedMethod::JobScheduling:
                prodMultiScheduling = new ProdMultiSchedulingJob();
                break;
            case ProdSchedMethod::OperationScheduling:
                prodMultiScheduling = new ProdMultiSchedulingOperation();
                break;
        }

        return prodMultiScheduling;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS4398" + ' - ' + "@SYS21838";
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxSeconds</Name>
				<Source><![CDATA[
    static  Integer maxSeconds()
    {
        #TimeConstants
        return #secondsPerDay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdJobDispatching</Name>
				<Source><![CDATA[
    static ProdMultiScheduling newProdJobDispatching()
    {
        ProdMultiScheduling detailScheduling = ProdMultiScheduling::construct(ProdSchedMethod::JobScheduling);

        detailScheduling.getLast();
        detailScheduling.initParmId();

        return detailScheduling;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdJobGantt</Name>
				<Source><![CDATA[
    static ProdMultiScheduling newProdJobGantt()
    {
        ProdMultiScheduling detailScheduling = ProdMultiScheduling::construct(ProdSchedMethod::JobScheduling);

        detailScheduling.getLast();
        detailScheduling.initParmId();

        return detailScheduling;
    }

]]></Source>
			</Method>
			<Method>
				<Name>overlapComplete</Name>
				<Source><![CDATA[
    static  Integer overlapComplete()
    {
        return 3;
    }

]]></Source>
			</Method>
			<Method>
				<Name>overlapSubset</Name>
				<Source><![CDATA[
    static  Integer overlapSubset()
    {
        return 4;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>