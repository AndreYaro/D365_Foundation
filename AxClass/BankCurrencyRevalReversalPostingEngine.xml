<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankCurrencyRevalReversalPostingEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankCurrencyRevalReversalPostingEngine</c> class is used for driving final creation of Bank - foreign currency revaluation reversal process.
/// </summary>
internal final class BankCurrencyRevalReversalPostingEngine
{
    private BankCurrencyRevalHistory bankCurrencyRevalHistory;
    private BankCurrencyRevalTmp bankCurrencyRevalTmp;
    private BankCurrencyRevalTmp bankCurrencyRevalTmpByDimension;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBankCurrencyRevalHistoryAndTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of the <c>BankCurrencyRevalReversalPostingEngine</c> class.
    /// </summary>
    /// <param name = "_bankCurrencyRevalHistory">The current <c>BankCurrencyRevalHistory</c> table record to be reversed.</param>
    /// <param name = "_bankCurrencyRevalTmp">The current <c>BankCurrencyRevalTmp</c> table record for reversal processing.</param>
    /// <returns>A new instance of the <c>BankCurrencyRevalReversalPostingEngine</c> class.</returns>
    internal static BankCurrencyRevalReversalPostingEngine newFromBankCurrencyRevalHistoryAndTempTable(
        BankCurrencyRevalHistory _bankCurrencyRevalHistory,
        BankCurrencyRevalTmp _bankCurrencyRevalTmp)
    {
        BankCurrencyRevalReversalPostingEngine postingEngine = new BankCurrencyRevalReversalPostingEngine();
        postingEngine.bankCurrencyRevalHistory = _bankCurrencyRevalHistory;
        postingEngine.bankCurrencyRevalTmp = _bankCurrencyRevalTmp;
       
        return postingEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBankCurrencyRevalHistoryAndTempTableByDimension</Name>
				<Source><![CDATA[
    internal static BankCurrencyRevalReversalPostingEngine newFromBankCurrencyRevalHistoryAndTempTableByDimension(
        BankCurrencyRevalHistory _bankCurrencyRevalHistory,
        BankCurrencyRevalTmp _bankCurrencyRevalTmpByDimension,
        BankCurrencyRevalTmp _bankCurrencyRevalTmp)
    {
        BankCurrencyRevalReversalPostingEngine postingEngine = new BankCurrencyRevalReversalPostingEngine();
        postingEngine.initialize(_bankCurrencyRevalHistory, _bankCurrencyRevalTmpByDimension, _bankCurrencyRevalTmp);
        return postingEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize(BankCurrencyRevalHistory _bankCurrencyRevalHistory, BankCurrencyRevalTmp _bankCurrencyRevalTmpByDimension, BankCurrencyRevalTmp _bankCurrencyRevalTmp)
    {
        bankCurrencyRevalHistory = _bankCurrencyRevalHistory;
        bankCurrencyRevalTmpByDimension.useExistingTempDBTable(_bankCurrencyRevalTmpByDimension.getPhysicalTableName());

        bankCurrencyRevalTmp = _bankCurrencyRevalTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the Bank - foreign currency revaluation reversal posting process.
    /// </summary>
    internal void run()
    {
        changecompany (bankCurrencyRevalHistory.LegalEntity)
        {
            ttsbegin;

            BankCurrencyRevalLedgerVoucher bankCurrencyRevalLedgerVoucher = BankCurrencyRevalLedgerVoucher::construct();

            this.processLedgerTransactionReversal(bankCurrencyRevalLedgerVoucher);

            bankCurrencyRevalLedgerVoucher.end();

            BankCurrencyRevalPostTrans postTrans;

            if (FeatureStateProvider::isFeatureEnabled(BankCurrencyRevalEnhancementFeature::instance()) && bankCurrencyRevalHistory.numOfGeneratedBankTrans() > 1)
            {
                while select bankCurrencyRevalTmpByDimension
                {
                    postTrans = BankCurrencyRevalPostTrans::newFromBankCurrencyRevalTmpAndLedgerVoucher(
                        bankCurrencyRevalTmpByDimension, 
                        bankCurrencyRevalLedgerVoucher);

                    postTrans.createBankAccountTrans();
                }
            }
            else
            {
                postTrans =
                    BankCurrencyRevalPostTrans::newFromBankCurrencyRevalTmpAndLedgerVoucher(
                    bankCurrencyRevalTmp, 
                    bankCurrencyRevalLedgerVoucher);

                postTrans.createBankAccountTrans();
            }

            BankCurrencyRevalReversalPostHistory reversalPostHistory =
                BankCurrencyRevalReversalPostHistory::newFromBankCurrencyRevalTmpVoucherAndHistory(bankCurrencyRevalTmp, bankCurrencyRevalLedgerVoucher.getLastVoucher(), bankCurrencyRevalHistory.RecId);

            reversalPostHistory.createBankCurrencyRevalHistory();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLedgerTransactionReversal</Name>
				<Source><![CDATA[
    private void processLedgerTransactionReversal(BankCurrencyRevalLedgerVoucher _ledgerVoucher)
    {
        LedgerVoucherObject ledgerVoucherObject;
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;

        _ledgerVoucher.addVoucher(bankCurrencyRevalTmp.TransDate);

        while select RecId from generalJournalEntry
            where generalJournalEntry.SubledgerVoucher == bankCurrencyRevalHistory.SubledgerVoucher
                && generalJournalEntry.SubledgerVoucherDataAreaId == bankCurrencyRevalHistory.LegalEntity
                && generalJournalEntry.AccountingDate == bankCurrencyRevalHistory.TransDate
            join generalJournalAccountEntry
                where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
        {
            ledgerVoucherObject = _ledgerVoucher.getLedgerVoucherObject(bankCurrencyRevalTmp.TransDate);

            LedgerVoucherTransObject ledgerVoucherTransObject = LedgerVoucherTransObject::newAdjustmentDefault(
                ledgerVoucherObject,
                generalJournalAccountEntry.PostingType,
                generalJournalAccountEntry.LedgerDimension,
                generalJournalAccountEntry.TransactionCurrencyCode,
                -generalJournalAccountEntry.AccountingCurrencyAmount,
                -generalJournalAccountEntry.ReportingCurrencyAmount);

			//Don't allocate since we are reversing records that have already been allocated.
            ledgerVoucherTransObject.parmIgnoreAllocation(true);

            _ledgerVoucher.addLedgerVoucherTransObject(ledgerVoucherTransObject);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>