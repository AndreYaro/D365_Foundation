<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReport770Export_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

/// <summary>
/// This class is responsible for exporting the contents of the Modello 770 report to the ASCII file
/// using the file format specified by the Spanish authorities
/// </summary>
public class TaxReport770Export_IT extends RunBase  implements ERIFormatPostProcessingTask
{
        private const int CurrentVersion = 1;
        private const int SysLastValuesCurrentVersion = 1;
        private recId reportTableRecId;
        private ERFileName fileName;
        private boolean confirmExported;
        private DialogField fileNameField;
        private DialogField confirmExportedField;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
        public ClassDescription caption()
        {
            return "@SYS26056";
        }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
        public Object dialog()
        {
            DialogRunbase dialog = super();

            fileNameField = dialog.addFieldValue(extendedTypeStr(ERFileName), this.parmFileName());
            confirmExportedField = dialog.addFieldValue(extendedTypeStr(NoYesId), confirmExported, "@SYS4082315", "@SYS4082326");

            return dialog;
        }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
        public boolean getFromDialog()
        {
            boolean ret = super();

            this.parmFileName(fileNameField.value());
            confirmExported = confirmExportedField.value();

            return ret;
        }

]]></Source>
			</Method>
			<Method>
				<Name>parmConfirmExported</Name>
				<Source><![CDATA[
        public boolean parmConfirmExported(boolean _confirmExported = confirmExported)
        {
            confirmExported = _confirmExported;
            return confirmExported;
        }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileName</Name>
				<Source><![CDATA[
        public ERFileName parmFileName(ERFileName _fileName = fileName)
        {
            fileName = _fileName;
            return fileName;
        }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportTableRecId</Name>
				<Source><![CDATA[
    public recId parmReportTableRecId(recId _taxReportDomesticTableRecId = reportTableRecId)
        {
            reportTableRecId = _taxReportDomesticTableRecId;
            return reportTableRecId;
        }

]]></Source>
			</Method>
			<Method>
				<Name>refereshCallerDataSource</Name>
				<Source><![CDATA[
        /// <summary>
        /// Refreshes the parent datasource of the caller form.
        /// </summary>
        /// <param name="_args">
        /// The arguments object that holds the reference to the caller form.
        /// </param>
        public void refereshCallerDataSource(Args _args)
        {
            common record = _args.record();
            FormDataSource ds =FormDataUtil::getFormDataSource(record);
            ds.reread();
            ds.refresh();
        }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatMappingId</Name>
				<Source><![CDATA[
        private ERFormatMappingId getFormatMappingId()
        {
            TaxReport770Table_IT taxReport770Table;
            ERFormatMappingId formatMappingId;
            select firstonly taxReport770Table
                where taxReport770Table.RecId == this.parmReportTableRecId();
            if (taxReport770Table.RecId)
            {
                formatMappingId = taxReport770Table.TaxReport770ERFormatMapping_IT;
            }
            return formatMappingId;
        }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        public void run()
        {
            super();

            ERFormatMappingId formatMappingId = this.getFormatMappingId();

            if (!formatMappingId)
            {
                // Error on function run. Format mapping is not specified in Sales tax parameters.
                error(strfmt("@GLS110288" + "@SYS35672" + ' ' + "@SYS93945", "@AccountsReceivable:FormatMapping", "@SYS336146", "@SYS35672"));
            }
            else
            {
                Query query = new Query();

                query.addDataSource(tableNum(TaxReport770Table_IT))
                .addRange(fieldNum(TaxReport770Table_IT, RecId))
                .value(queryValue(this.parmReportTableRecId()));

                ERObjectsFactory::createFormatMappingRunByFormatMappingId(formatMappingId, this.parmFileName())
                .withFileDestination(ERObjectsFactory::createFileDestinationBrowser())
                .withParameter(new ERModelDefinitionDatabaseContext()
                    .addQuery(tableNum(TaxReport770Table_IT), query))
                .withPostProcessingTask(this)
                .run();
            }
        }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
        {
            TaxReport770Export_IT export = new TaxReport770Export_IT();

            if (!_args.record() || _args.dataset() != tablenum(TaxReport770Table_IT))
            {
                throw error(strfmt("@SYS25516", export.caption()));
            }

            export.parmReportTableRecId(_args.record().RecId);

            if (export.prompt())
            {
                export.runOperation();
                export.refereshCallerDataSource(_args);
            }
        }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
        protected boolean canRunInNewSession()
        {
            return false;
        }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
        public void saveLast()
        {
            inGetSaveLast   = true;

            xSysLastValue::putValue(this.packSysLastValues(),
                                    this.lastValueDataAreaId(),
                                    this.lastValueUserId(),
                                    this.lastValueType(),
                                    this.lastValueElementName(),
                                    this.lastValueDesignName());

            inGetSaveLast = false;
        }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
        public void getLast()
        {
            container packedValues;
            getLastCalled   = true;
            inGetSaveLast   = true;

            // Restore the pertinent values from the SysLastValue table.
            packedValues = xSysLastValue::getValue(this.lastValueDataAreaId(),
                                                   this.lastValueUserId(),
                                                   this.lastValueType(),
                                                   this.lastValueElementName(),
                                                   this.lastValueDesignName());

            this.unpackSysLastValues(packedValues);

            // The following fields must be maintained to mimic the functionality of the overriden method.
            inGetSaveLast = false;
        }

]]></Source>
			</Method>
			<Method>
				<Name>unpackSysLastValues</Name>
				<Source><![CDATA[
        public void unpackSysLastValues(container _packedValues)
        {
            Version version = RunBase::getVersion(_packedValues);

            switch (version)
            {
                case SysLastValuesCurrentVersion:
                    [version, fileName, confirmExported] = _packedValues;
                    break;
            }
        }

]]></Source>
			</Method>
			<Method>
				<Name>packSysLastValues</Name>
				<Source><![CDATA[
        public container packSysLastValues()
        {
            return [CurrentVersion, fileName, confirmExported];
        }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
        {
            container packed = [CurrentVersion, fileName, confirmExported];
            packed = this.appendVariableToPack(packed, varStr(reportTableRecId), reportTableRecId);
            return packed;
        }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container _packedClass)
        {
            Version version = RunBase::getVersion(_packedClass);

            switch (version)
            {
                case CurrentVersion:
                    [version, fileName, confirmExported] = _packedClass;
                    reportTableRecId = this.extractPackedVariable(_packedClass, varStr(reportTableRecId));
                    break;

                default:
                    return false;
            }
            return true;
        }

]]></Source>
			</Method>
			<Method>
				<Name>appendVariableToPack</Name>
				<Source><![CDATA[
        private container appendVariableToPack(container _pack, str _variableName, anytype _value)
        {
            XppPrePostArgs packArgs = this.createXppPrePostArgsWithPack(_pack);
            SysPackExtensions::pack(packArgs, this.getVariablePackKey(_variableName), [_value]);
            return packArgs.getReturnValue();
        }

]]></Source>
			</Method>
			<Method>
				<Name>createXppPrePostArgsWithPack</Name>
				<Source><![CDATA[
        private XppPrePostArgs createXppPrePostArgsWithPack(container _pack)
        {
            XppPrePostArgs prePostArgs = new XppPrePostArgs(_pack, '',  XppEventHandlerCalledWhen::Post);
            prePostArgs.setReturnValue(_pack);
            return prePostArgs;
        }

]]></Source>
			</Method>
			<Method>
				<Name>getVariablePackKey</Name>
				<Source><![CDATA[
        private ClassName getVariablePackKey(str _variableName)
        {
            return classStr(TaxReport770Export_IT) + '.' + _variableName;
        }

]]></Source>
			</Method>
			<Method>
				<Name>extractPackedVariable</Name>
				<Source><![CDATA[
        private anytype extractPackedVariable(container _pack, str _variableName)
        {
            anytype value;
            [value] = SysPackExtensions::unpack(this.createXppPrePostArgsWithPack(_pack), this.getVariablePackKey(_variableName));
            return value;
        }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
        /// <summary>
        /// Updates report status.
        /// </summary>
        public void execute()
        {
            if (this.parmConfirmExported())
            {
                TaxReport770Table_IT reportTable;

                ttsbegin;

                select firstonly forupdate reportTable
                    where reportTable.RecId == this.parmReportTableRecId();

                reportTable.Exported = true;
                reportTable.ExportDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
                reportTable.update();

                ttscommit;
            }
        }

]]></Source>
			</Method>
			<Method>
				<Name>isValidForPacking</Name>
				<Source><![CDATA[
        /// <summary>
        /// Verifies if the object valid for packing.
        /// </summary>
        /// <returns>
        /// True.
        /// </returns>
        public boolean isValidForPacking()
        {
            return true;
        }

]]></Source>
			</Method>
			<Method>
				<Name>isValidForPartiallyPacking</Name>
				<Source><![CDATA[
        /// <summary>
        /// Checkes whether object is partially valid for packing.
        /// </summary>
        /// <returns>True if partially valid for packing; otherwise, return false.</returns>
        public boolean isValidForPartiallyPacking()
        {
            return false;
        }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>