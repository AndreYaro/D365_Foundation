<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventoryStorageDimensions</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSInventoryStorageDimensions</c> class represents storage dimensions.
/// </summary>
public final class WHSInventoryStorageDimensions
{
    #InventDimDevelop

    private InventSiteId        inventSiteId;
    private InventLocationId    inventLocationId;
    private WMSLocationId       wmsLocationId;
    private WHSLicensePlateId   licensePlateId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmInventSiteId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public InventSiteId parmInventSiteId(InventSiteId _inventSiteId = inventSiteId)
    {
        inventSiteId = _inventSiteId;
        return inventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventSiteId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSInventoryStorageDimensions setInventSiteId(InventSiteId _inventSiteId)
    {
        inventSiteId = _inventSiteId;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public InventLocationId parmInventLocationId(InventLocationId _inventLocationId = inventLocationId)
    {
        inventLocationId = _inventLocationId;
        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventLocationId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSInventoryStorageDimensions setInventLocationId(InventLocationId _inventLocationId)
    {
        inventLocationId = _inventLocationId;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWMSLocationId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WMSLocationId parmWMSLocationId(WMSLocationId _wmsLocationId = wmsLocationId)
    {
        wmsLocationId = _wmsLocationId;
        return wmsLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWMSLocationId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSInventoryStorageDimensions setWMSLocationId(WMSLocationId _wmsLocationId)
    {
        wmsLocationId = _wmsLocationId;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLicensePlateId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSLicensePlateId parmLicensePlateId(WHSLicensePlateId _licensePlateId = licensePlateId)
    {
        licensePlateId = _licensePlateId;
        return licensePlateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLicensePlateId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSInventoryStorageDimensions setLicensePlateId(WHSLicensePlateId _licensePlateId)
    {
        licensePlateId = _licensePlateId;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyInventoryDimensionsTo</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void copyInventoryDimensionsTo(InventDim _inventDim)
    {
        _inventDim.InventSiteId = this.inventSiteId;
        _inventDim.InventLocationId = this.inventLocationId;
        _inventDim.wmsLocationId = this.wmsLocationId;
        _inventDim.LicensePlateId = this.licensePlateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToInventDim</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public InventDim convertToInventDim(boolean _ensureExists = false)
    {
        InventDim inventDim;

        this.copyInventoryDimensionsTo(inventDim);

        if (_ensureExists)
        {
            inventDim = InventDim::findOrCreate(inventDim);
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static WHSInventoryStorageDimensions construct()
    {
        return new WHSInventoryStorageDimensions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromValues</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static WHSInventoryStorageDimensions newFromValues(
        InventSiteId        _inventSiteId,
        InventLocationId    _inventLocationId,
        WMSLocationId       _wmsLocationId,
        WHSLicensePlateId   _licensePlateId)
    {
        WHSInventoryStorageDimensions params = new WHSInventoryStorageDimensions();

        params.inventSiteId = _inventSiteId;
        params.inventLocationId = _inventLocationId;
        params.wmsLocationId = _wmsLocationId;
        params.licensePlateId = _licensePlateId;

        return params;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventDim</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static WHSInventoryStorageDimensions newFromInventDim(InventDim _inventDim)
    {
        WHSInventoryStorageDimensions params = new WHSInventoryStorageDimensions();

        params.inventSiteId = _inventDim.InventSiteId;
        params.inventLocationId = _inventDim.InventLocationId;
        params.wmsLocationId = _inventDim.WMSLocationId;
        params.licensePlateId = _inventDim.LicensePlateId;

        return params;
    }

]]></Source>
			</Method>
			<Method>
				<Name>haveEqualStorageDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the storage dimension of the given InventDims are equal.
    /// </summary>
    /// <param name = "_inventDim1">The first InventDim</param>
    /// <param name = "_inventDim2">The second InventDim</param>
    /// <returns>True if the storage dimensions of _inventDim1 and _inventDim2 are equal; False otherwise</returns>
    [Hookable(false)]
    internal static boolean haveEqualStorageDimensions(InventDim _inventDim1, InventDim _inventDim2)
    {
        return _inventDim1.InventSiteId == _inventDim2.InventSiteId
            && _inventDim1.InventLocationId == _inventDim2.InventLocationId
            && _inventDim1.WMSLocationId == _inventDim2.WMSLocationId
            && _inventDim1.LicensePlateId == _inventDim2.LicensePlateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventoryStorageDimensionsFilterForDataSource</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void addInventoryStorageDimensionsFilterForDataSource(QueryBuildDataSource _qbs)
    {
        if (inventSiteId)
        {
            _qbs.addRange(fieldNum(WHSInventoryTransactionView, InventSiteId)).value(queryValue(inventSiteId));
        }

        if (inventLocationId)
        {
            _qbs.addRange(fieldNum(WHSInventoryTransactionView, InventLocationId)).value(queryValue(inventLocationId));
        }

        if (wmsLocationId)
        {
            _qbs.addRange(fieldNum(WHSInventoryTransactionView, wmsLocationId)).value(queryValue(WMSLocationId));
        }

        if (licensePlateId)
        {
            _qbs.addRange(fieldNum(WHSInventoryTransactionView, LicensePlateId)).value(queryValue(licensePlateId));
        }

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>