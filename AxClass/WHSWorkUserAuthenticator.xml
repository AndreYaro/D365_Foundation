<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkUserAuthenticator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkUserAuthenticator</c> class is used to authenticate mobile device users.
/// </summary>
static class WHSWorkUserAuthenticator
{
    private static const int maxFailedAuthentications = 5;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>authenticate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the supplied username and password are correct.
    /// </summary>
    /// <param name = "_userId">Username</param>
    /// <param name = "_password">Password</param>
    /// <returns>true if authentication succeeds; otherwise, false</returns>
    /// <remarks>
    /// User is set to disabled after a number of failed authentication attempts.
    /// </remarks>
    public static boolean authenticate(
        WHSUserId   _userId,
        str         _password)
    {
        var workUser = WHSWorkUser::find(_userId);
        var valid = false;

        if (workUser)
        {
            valid = WHSWorkUserAuthenticator::validateWorkUser(workUser);
            valid = valid && WHSWorkUserAuthenticator::validatePassword(workUser, _password);
            WHSWorkUserAuthenticator::updateWorkUserAuthenticationState(workUser, valid);
        }

        return valid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    internal static boolean validate(WHSUserId _userId)
    {
        return WHSWorkUserAuthenticator::validateWorkUser(WHSWorkUser::find(_userId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkUser</Name>
				<Source><![CDATA[
    private static boolean validateWorkUser(WHSWorkUser _workUser)
    {        
        if (_workUser && !_workUser.Disabled)
        {
            return WHSWorkUserAuthenticator::validateUser(_workUser);
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the user is allowed to login.
    /// </summary>
    /// <param name = "_workUser">The user.</param>
    /// <returns>true if the user is valid; otherwise, false.</returns>
    protected static boolean validateUser(WHSWorkUser _workUser)
    {
        return true;    
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePassword</Name>
				<Source><![CDATA[
    private static boolean validatePassword(
        WHSWorkUser _workUser,
        str			_password)
    {
        if (WHSWorkUserAuthenticatorPasswordValidationFlight::instance().isEnabled() && _workUser.UserPasswordSalt == null)
        {
            return checkFailed(strFmt("@WAX:PasswordNotSetForWorkUser", _workUser.UserId));
        }

        return CryptoServiceProvider::verifyPassword(
                _password,
                _workUser.UserPasswordSalt,
                _workUser.UserPasswordHash,
                _workUser.UserPasswordIterations);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkUserAuthenticationState</Name>
				<Source><![CDATA[
    private static void updateWorkUserAuthenticationState(
        WHSWorkUser _workUser,
        boolean     _authenticationOk)
    {
        if (WHSWorkUserAuthenticator::mustUpdateWorkUserAuthenticationState(_workUser, _authenticationOk))
        {
            ttsbegin;

            _workUser.selectForUpdate(true); // Lock the record
            _workUser.reread(); // Get the latest data

            if (_authenticationOk && _workUser.AuthenticationFailures != 0)
            {
                _workUser.AuthenticationFailures = 0;
                _workUser.update();
            }
            else if (!_authenticationOk)
            {
                _workUser.AuthenticationFailures = max(1, _workUser.AuthenticationFailures+1);
                if (_workUser.AuthenticationFailures >= maxFailedAuthentications)
                {
                    _workUser.AuthenticationFailures = 0;
                    _workUser.Disabled = NoYes::Yes;
                }

                _workUser.update();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateWorkUserAuthenticationState</Name>
				<Source><![CDATA[
    [Wrappable]
    internal static boolean mustUpdateWorkUserAuthenticationState(
        WHSWorkUser _workUser,
        boolean     _authenticationOk)
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>