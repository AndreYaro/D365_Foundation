<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IndirectTaxInquiry_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the indiret tax inquiry.
/// </summary>
class IndirectTaxInquiry_IN
{
    TmpIndirectTaxInquiryTable_IN       tmpIndirectTaxInquiryTable;
    #DEFINE.FIELD1 (1)
    #DEFINE.FIELD2 (2)
    #DEFINE.FIELD3 (3)
    #DEFINE.FIELD4 (4)
    #DEFINE.FIELD5 (5)
    #DEFINE.FIELD6 (6)
    #DEFINE.FIELD7 (7)
    #DEFINE.FIELD8 (8)
    #DEFINE.FIELD9 (9)
    #DEFINE.FIELD10 (10)
    #DEFINE.FIELD11 (11)
    #DEFINE.FIELD12 (12)
    #DEFINE.FIELD13 (13)
    #DEFINE.FIELD14 (14)
    #DEFINE.FIELD15 (15)
    #DEFINE.FIELD16 (16)
    #DEFINE.FIELD17 (17)
    #DEFINE.FIELD18 (18)
    #DEFINE.FIELD19 (19)
    #DEFINE.FIELD20 (20)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// The execute method of the <c>IndirectTaxInquiry_IN</c> class.
    /// </summary>
    /// <param name="_queryRun">
    /// The instance of the <c>QueryRun</c> class.
    /// </param>
    /// <param name="_fieldValues">
    /// The field values information.
    /// </param>
    /// <returns>
    /// The instance of the <c>TmpIndirectTaxInquiryTable_IN</c> class.
    /// </returns>
    public TmpIndirectTaxInquiryTable_IN execute(
        QueryRun  _queryRun,
        container _fieldValues)
    {
        boolean              insert;
        TaxTrans_IN          taxTrans;
        IndirectTaxInquiryView_IN indirectTaxInquiry;

        while (_queryRun.next())
        {
            tmpIndirectTaxInquiryTable.clear();
            indirectTaxInquiry = _queryRun.getNo(1);
            taxTrans = TaxTrans_IN::findRecId(indirectTaxInquiry.RecId);

            if (taxTrans)
            {
                tmpIndirectTaxInquiryTable.TransDate            = taxTrans.TransDate;
                tmpIndirectTaxInquiryTable.Voucher              = taxTrans.Voucher;
                tmpIndirectTaxInquiryTable.CostLedgerVoucher    = taxTrans.CostLedgerVoucher;
                tmpIndirectTaxInquiryTable.TaxType              = taxTrans.TaxType;
                tmpIndirectTaxInquiryTable.TaxComponentTable    = taxTrans.TaxComponentTable;
                tmpIndirectTaxInquiryTable.SourceTaxAmountCur   = taxTrans.SourceTaxAmountCur;
                insert = true;
            }
            if (insert)
            {
                ttsbegin;
                tmpIndirectTaxInquiryTable.TransTableId             = taxTrans.TransTableId;
                tmpIndirectTaxInquiryTable.TransRecId               = taxTrans.TransRecId;
                tmpIndirectTaxInquiryTable.SourceCurrencyCode       = taxTrans.SourceCurrencyCode;
                tmpIndirectTaxInquiryTable.TransactionAmount        = taxTrans.TransactionAmount;
                tmpIndirectTaxInquiryTable.InvoiceAmount            = taxTrans.InvoiceAmount;
                tmpIndirectTaxInquiryTable.MiscChargeAmount         = taxTrans.MiscChargeAmount;
                tmpIndirectTaxInquiryTable.TaxAmount                = taxTrans.TaxAmount;
                tmpIndirectTaxInquiryTable.TaxAmountSecondary       = taxTrans.TaxAmountSecondary;
                tmpIndirectTaxInquiryTable.vatDefermentExtRecId     = taxTrans.vatDefermentExtRecId;
                tmpIndirectTaxInquiryTable.vatDefermentExtTableId   = taxTrans.vatDeferementExtTableId;

                tmpIndirectTaxInquiryTable.Sort1  = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field1));
                tmpIndirectTaxInquiryTable.Sort2  = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field2));
                tmpIndirectTaxInquiryTable.Sort3  = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field3));
                tmpIndirectTaxInquiryTable.Sort4  = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field4));
                tmpIndirectTaxInquiryTable.Sort5  = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field5));
                tmpIndirectTaxInquiryTable.Sort6  = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field6));
                tmpIndirectTaxInquiryTable.Sort7  = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field7));
                tmpIndirectTaxInquiryTable.Sort8  = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field8));
                tmpIndirectTaxInquiryTable.Sort9  = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field9));
                tmpIndirectTaxInquiryTable.Sort10 = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field10));
                tmpIndirectTaxInquiryTable.Sort11 = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field11));
                tmpIndirectTaxInquiryTable.Sort12 = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field12));
                tmpIndirectTaxInquiryTable.Sort13 = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field13));
                tmpIndirectTaxInquiryTable.Sort14 = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field14));
                tmpIndirectTaxInquiryTable.Sort15 = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field15));
                tmpIndirectTaxInquiryTable.Sort16 = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field16));
                tmpIndirectTaxInquiryTable.Sort17 = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field17));
                tmpIndirectTaxInquiryTable.Sort18 = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field18));
                tmpIndirectTaxInquiryTable.Sort19 = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field19));
                tmpIndirectTaxInquiryTable.Sort20 = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field20));
                tmpIndirectTaxInquiryTable.insert();
                ttscommit;
                this.insertIntoMarkupTrans(tmpIndirectTaxInquiryTable.TransTableId ,
                                           tmpIndirectTaxInquiryTable.TransRecId,
                                           tmpIndirectTaxInquiryTable.TableId,
                                           tmpIndirectTaxInquiryTable.RecId);
                insert = false;
            }
            taxTrans.clear();
        }

        return tmpIndirectTaxInquiryTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts markup transaction.
    /// </summary>
    /// <param name="_transTableId">
    /// The table id of the transaction.
    /// </param>
    /// <param name="_transRecId">
    /// The record id of the transaction.
    /// </param>
    /// <param name="_tmpTableId">
    /// The table id of the transaction.
    /// </param>
    /// <param name="_tmpRecId">
    /// The record id of the transaction.
    /// </param>
    public void insertIntoMarkupTrans(tableId  _transTableId,
                                      RecId    _transRecId,
                                      tableId  _tmpTableId,
                                      RecId    _tmpRecId )
    {
        MarkupTrans  markupTrans;
        MarkupTrans  markUpTransLoc;
        MarkupTrans  markUpTransCopy;
        RecordInsertList insertList;

        if (_transTableId && _transRecId)
        {
            markUpTransLoc.skipDataMethods(true);
            delete_from markUpTransLoc
                where   markUpTransLoc.TransTableId == _tmpTableId    &&
                        markUpTransLoc.TransRecId   == _tmpRecId;

            insertList = new RecordInsertList(tableNum(MarkupTrans));
            while select markUpTransCopy
                where   markUpTransCopy.TransTableId == _transTableId &&
                        markUpTransCopy.TransRecId   == _transRecId
            {
                ttsbegin;
                markupTrans = markUpTransCopy.data();
                markupTrans.TransTableId    = _tmpTableId;
                markupTrans.TransRecId      = _tmpRecId;
                insertList.add(markupTrans);
                ttscommit;
            }
            insertList.insertDatabase();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpIndirectTaxInquiryTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets indirect tax inquiry table.
    /// </summary>
    /// <param name="_tmpIndirectTaxInquiryTable">
    /// The indirect tax inquiry table.
    /// </param>
    /// <returns>
    /// The instance of the <c>TmpIndirectTaxInquiryTable_IN</c> class.
    /// </returns>
    public TmpIndirectTaxInquiryTable_IN tmpIndirectTaxInquiryTable(TmpIndirectTaxInquiryTable_IN _tmpIndirectTaxInquiryTable = tmpIndirectTaxInquiryTable)
    {
        tmpIndirectTaxInquiryTable = _tmpIndirectTaxInquiryTable;

        return tmpIndirectTaxInquiryTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>