<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomsTransInquiry_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the customer transaction inquiry.
/// </summary>
class CustomsTransInquiry_IN
{
    TmpCustomsInquiryTable_IN       tmpCustomsInquiryTable;
    #DEFINE.FIELD1 (1)
    #DEFINE.FIELD2 (2)
    #DEFINE.FIELD3 (3)
    #DEFINE.FIELD4 (4)
    #DEFINE.FIELD5 (5)
    #DEFINE.FIELD6 (6)
    #DEFINE.FIELD7 (7)
    #DEFINE.FIELD8 (8)
    #DEFINE.FIELD9 (9)
    #DEFINE.FIELD10 (10)
    #DEFINE.FIELD11 (11)
    #DEFINE.FIELD12 (12)
    #DEFINE.FIELD13 (13)
    #DEFINE.FIELD14 (14)
    #DEFINE.FIELD15 (15)
    #DEFINE.FIELD16 (16)
    #DEFINE.FIELD17 (17)
    #DEFINE.FIELD18 (18)
    #DEFINE.FIELD19 (19)
    #DEFINE.FIELD20 (20)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets customs inquiry table
    /// </summary>
    /// <param name="_queryRun">
    /// The instance of the <c>QueryRun</c> class.
    /// </param>
    /// <param name="_fieldValues">
    /// The values of the container fields.
    /// </param>
    /// <param name="_iecNumber">
    /// The id of the ref rec.
    /// </param>
    /// <param name="_taxPeriod">
    /// The value of the tax period.
    /// </param>
    /// <returns>
    /// The instance of the <c>TmpCustomsInquiryTable_IN</c> class.
    /// </returns>
    public TmpCustomsInquiryTable_IN execute(
        QueryRun    _queryRun,
        container   _fieldValues,
        RefRecId    _iecNumber,
        TaxPeriod   _taxPeriod)
    {
        Integer         fieldCount;
        RefFieldName    fieldName;
        TaxTrans_IN     taxTrans;

        boolean     transactionField;
        boolean     invoiceField;
        RefRecId    iecNumberRecId;
        boolean     miscChargeField;
        CustomsInquiryTrans_IN customsTaxInquiryView;

        for (fieldCount=1; fieldCount <= conlen(_fieldValues); fieldCount++)
        {
            fieldName = conpeek(_fieldValues, fieldCount);

            if (fieldName == fieldid2name(tablenum(TaxTrans_IN), fieldnum(TaxTrans_IN, TransactionAmount)))
            {
                transactionField = true;
            }
            else if (fieldName == fieldid2name(tablenum(TaxTrans_IN), fieldnum(TaxTrans_IN, InvoiceAmount)))
            {
                invoiceField = true;
            }

            else if (fieldName == fieldid2name(tablenum(TaxTrans_IN), fieldnum(TaxTrans_IN, MiscChargeAmount)))
            {
                miscChargeField = true;
            }
        }

        while (_queryRun.next())
        {
            customsTaxInquiryView = _queryRun.getNo(1);
            taxTrans = TaxTrans_IN::findRecId(customsTaxInquiryView.TaxTrans_INRecId);

            iecNumberRecId = taxTrans.CompanyRegistrationNumber;
            if (iecNumberRecId      ==  _iecNumber  &&
                taxTrans.TaxPeriod  ==  _taxPeriod)
            {
                ttsbegin;
                tmpCustomsInquiryTable.clear();
                tmpCustomsInquiryTable.iecTaxRegistrationNumberTable = iecNumberRecId;
                tmpCustomsInquiryTable.TaxSettlementPeriod           = taxTrans.TaxPeriod ? taxTrans.TaxPeriod : _taxPeriod;
                tmpCustomsInquiryTable.TransDate                     = taxTrans.TransDate;
                tmpCustomsInquiryTable.Voucher                       = taxTrans.Voucher;
                tmpCustomsInquiryTable.CostLedgerVoucher             = taxTrans.CostLedgerVoucher;
                tmpCustomsInquiryTable.SourceTaxAmountCur            = taxTrans.SourceTaxAmountCur;
                tmpCustomsInquiryTable.TaxComponentTable             = taxTrans.TaxComponentTable;
                tmpCustomsInquiryTable.LineNum                       = taxTrans.LineNum;
                tmpCustomsInquiryTable.TransTableId                  = taxTrans.TransTableId;
                tmpCustomsInquiryTable.TransRecId                    = taxTrans.TransRecId;
                tmpCustomsInquiryTable.SourceCurrencyCode            = taxTrans.SourceCurrencyCode;
                tmpCustomsInquiryTable.TransactionAmount             = transactionField ? taxTrans.TransactionAmount : 0;
                tmpCustomsInquiryTable.InvoiceAmount                 = invoiceField ? taxTrans.InvoiceAmount : 0;
                tmpCustomsInquiryTable.MiscChargeAmount              = ! miscChargeField ? 0 :taxTrans.MiscChargeAmount;
                tmpCustomsInquiryTable.TaxAmount                     = taxTrans.TaxAmount;
                tmpCustomsInquiryTable.TaxAmountSecondary            = taxTrans.TaxAmountSecondary;
                tmpCustomsInquiryTable.PurchId                       = PurchLine::findInventTransId(taxTrans.InventTransId, false).PurchId;
                tmpCustomsInquiryTable.SalesId                       = SalesLine::findInventTransId(taxTrans.InventTransId, false).SalesId;

                tmpCustomsInquiryTable.Sort1                         = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field1));
                tmpCustomsInquiryTable.Sort2                         = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field2));
                tmpCustomsInquiryTable.Sort3                         = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field3));
                tmpCustomsInquiryTable.Sort4                         = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field4));
                tmpCustomsInquiryTable.Sort5                         = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field5));
                tmpCustomsInquiryTable.Sort6                         = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field6));
                tmpCustomsInquiryTable.Sort7                         = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field7));
                tmpCustomsInquiryTable.Sort8                         = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field8));
                tmpCustomsInquiryTable.Sort9                         = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field9));
                tmpCustomsInquiryTable.Sort10                        = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field10));
                tmpCustomsInquiryTable.Sort11                        = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field11));
                tmpCustomsInquiryTable.Sort12                        = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field12));
                tmpCustomsInquiryTable.Sort13                        = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field13));
                tmpCustomsInquiryTable.Sort14                        = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field14));
                tmpCustomsInquiryTable.Sort15                        = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field15));
                tmpCustomsInquiryTable.Sort16                        = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field16));
                tmpCustomsInquiryTable.Sort17                        = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field17));
                tmpCustomsInquiryTable.Sort18                        = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field18));
                tmpCustomsInquiryTable.Sort19                        = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field19));
                tmpCustomsInquiryTable.Sort20                        = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field20));
                tmpCustomsInquiryTable.insert();

                this.insertIntoMarkupTrans(tmpCustomsInquiryTable.TransTableId,
                                            tmpCustomsInquiryTable.TransRecId,
                                            tmpCustomsInquiryTable.TableId,
                                            tmpCustomsInquiryTable.RecId);
                ttscommit;
            }
        }

        return tmpCustomsInquiryTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts markup transaction.
    /// </summary>
    /// <param name="_transTableId">
    /// The id of the transaction table.
    /// </param>
    /// <param name="_transRecId">
    /// The id of the transaction record.
    /// </param>
    /// <param name="_tmpTableId">
    /// The id of the table.
    /// </param>
    /// <param name="_tmpRecId">
    /// The id of the record.
    /// </param>
    public void insertIntoMarkupTrans(
        tableId     _transTableId,
        RefRecId    _transRecId,
        tableId     _tmpTableId,
        RefRecId    _tmpRecId )
    {
        MarkupTrans         markupTrans, markUpTransLoc, markUpTransCopy;
        RecordInsertList    insertList;

        if (_transTableId && _transRecId)
        {
            markUpTransLoc.skipDataMethods(true);
            delete_from markUpTransLoc
                where   markUpTransLoc.TransTableId == _tmpTableId
                   &&   markUpTransLoc.TransRecId   == _tmpRecId;

            ttsbegin;
            insertList = new RecordInsertList(tableNum(MarkupTrans));
            while select markUpTransCopy
                where   markUpTransCopy.TransTableId == _transTableId
                   &&   markUpTransCopy.TransRecId   == _transRecId
            {
                markupTrans = markUpTransCopy.data();
                markupTrans.TransTableId    = _tmpTableId;
                markupTrans.TransRecId      = _tmpRecId;
                insertList.add(markupTrans);
            }
            insertList.insertDatabase();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpCustomsInquiryTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets customs inquiry table.
    /// </summary>
    /// <param name="_tmpCustomsInquiryTable">
    /// The instance of the <c>TmpCustomsInquiryTable_IN</c> class.
    /// </param>
    /// <returns>
    /// The instance of the <c>TmpCustomsInquiryTable_IN</c> class.
    /// </returns>
    public TmpCustomsInquiryTable_IN  tmpCustomsInquiryTable(TmpCustomsInquiryTable_IN  _tmpCustomsInquiryTable = tmpCustomsInquiryTable)
    {
        tmpCustomsInquiryTable = _tmpCustomsInquiryTable;

        return tmpCustomsInquiryTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>