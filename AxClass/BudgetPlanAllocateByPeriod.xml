<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanAllocateByPeriod</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanAllocateByPeriod</c> class manages the budget allocation by ledger period process.
/// </summary>
public class BudgetPlanAllocateByPeriod extends BudgetPlanAllocate
{
    #define.OneHundredPercent(100.00)

    LedgerAllocateKeyId ledgerAllocateKeyId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBudgetPlanLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new budget plan lines based on the ledger allocation key and the source budget plan line.
    /// </summary>
    /// <param name="_sourceBudgetPlanLine">
    /// The <c>BudgetPlanLine</c> record ID to allocate.
    /// </param>
    protected void createBudgetPlanLines(BudgetPlanLine _sourceBudgetPlanLine)
    {
        BudgetPlanLine                  budgetPlanLineNew;
        LedgerAllocateTrans             ledgerAllocateTrans;
        LedgerDimensionBudgetPlanning   ledgerDimensionBudgetPlanning;
        TransDate                       newBudgetPlanLineDate;
        Percent                         periodAllocationPctProportion;
        Percent                         totalPercentAllocated;
        BudgetPlanCurrencyAmount        totalAmountAccumulated;
        BudgetPlanQuantity              totalQuantityAccumulated;
        BudgetPlanQuantity              totalQuantity;
        BudgetPlanCurrencyAmount        totalAmount;
        Currency                        currency;
        BudgetPlanningProcessRecId      planningProcessRecId;
        BudgetCycleRecId                budgetCycleRecId;
        FiscalPeriodEnd                 budgetCycleEndDate;

        currency      = Currency::find(_sourceBudgetPlanLine.TransactionCurrencyCode);
        totalQuantity = decRound((_sourceBudgetPlanLine.Quantity * factor), 2);
        totalAmount   = currency.amount_Instance(_sourceBudgetPlanLine.TransactionCurrencyAmount * factor);

        planningProcessRecId = BudgetPlanHeader::find(_sourceBudgetPlanLine.BudgetPlanHeader).BudgetPlanningProcess;
        budgetCycleRecId     = BudgetPlanningProcess::find(planningProcessRecId).BudgetCycle;
        budgetCycleEndDate   = BudgetCycle::find(budgetCycleRecId).getEndDate();

        ttsBegin;

        this.deleteSourceBudgetPlanLine(_sourceBudgetPlanLine.RecId);

        while select ledgerAllocateTrans
            order by ledgerAllocateTrans.Freq
            where ledgerAllocateTrans.Key == ledgerAllocateKeyId
        {
            newBudgetPlanLineDate = this.determineDate(ledgerAllocateTrans, this.determineStartDate(_sourceBudgetPlanLine));

            if (newBudgetPlanLineDate <= budgetCycleEndDate && newBudgetPlanLineDate >= _sourceBudgetPlanLine.EffectiveDate)
            {
                // Should create new budget plan lines for allocation dates after the given date in the source budget plan line.
                periodAllocationPctProportion = ledgerAllocateTrans.PctProportion / #OneHundredPercent;

                if (ledgerAllocateTrans.DefaultDimension
                    && (_sourceBudgetPlanLine.BudgetPlanScenario != targetBudgetPlanScenarioRecId
                        || _sourceBudgetPlanLine.EffectiveDate   != newBudgetPlanLineDate))
                {
                    ledgerDimensionBudgetPlanning = LedgerDimensionFacade::serviceCreateLedgerDimension(_sourceBudgetPlanLine.LedgerDimension, ledgerAllocateTrans.DefaultDimension);
                }
                else
                {
                    ledgerDimensionBudgetPlanning = _sourceBudgetPlanLine.LedgerDimension;
                }

                // initialize the target budget plan line table buffer with the source budget plan line table buffer.
                this.initTargetBudgetPlanLine(_sourceBudgetPlanLine, budgetPlanLineNew);

                budgetPlanLineNew.EffectiveDate   = newBudgetPlanLineDate;
                budgetPlanLineNew.Quantity        = decRound((totalQuantity * periodAllocationPctProportion), 2);
                budgetPlanLineNew.LedgerDimension = ledgerDimensionBudgetPlanning;

                if (targetBudgetPlanScenario.UnitOfMeasureClass == UnitOfMeasureClass::Monetary)
                {
                    budgetPlanLineNew.TransactionCurrencyAmount = currency.amount_Instance(totalAmount * periodAllocationPctProportion);
                    budgetPlanLineNew.AccountingCurrencyAmount  = currency.amount_Instance(_sourceBudgetPlanLine.AccountingCurrencyAmount * periodAllocationPctProportion * factor);
                    budgetPlanLineNew.ReportingCurrencyAmount   = currency.amount_Instance(_sourceBudgetPlanLine.ReportingCurrencyAmount * periodAllocationPctProportion * factor);
                }

                if (budgetPlanLineNew.LedgerDimension && budgetPlanLineNew.validateWrite())
                {
                    budgetPlanLineNew.write();
                }
                else
                {
                    throw Exception::Error;
                }

                totalAmountAccumulated   += budgetPlanLineNew.TransactionCurrencyAmount;
                totalQuantityAccumulated += budgetPlanLineNew.Quantity;
                totalPercentAllocated    += ledgerAllocateTrans.PctProportion;
            }
        }

        if (totalPercentAllocated < #OneHundredPercent)
        {
            // Create a new budget plan line for the unallocated percent.
            this.initTargetBudgetPlanLine(_sourceBudgetPlanLine, budgetPlanLineNew);

            if (targetBudgetPlanScenario.UnitOfMeasureClass == UnitOfMeasureClass::Monetary)
            {
                budgetPlanLineNew.TransactionCurrencyAmount = totalAmount - totalAmountAccumulated;
                budgetPlanLineNew.ReportingCurrencyAmount   = budgetPlanCurrencyExchangeHelper.calculateReportingCurrencyAmount(
                                                                budgetPlanLineNew.TransactionCurrencyAmount,
                                                                budgetPlanLineNew.TransactionCurrencyCode,
                                                                budgetPlanLineNew.EffectiveDate);

                budgetPlanLineNew.AccountingCurrencyAmount  = budgetPlanCurrencyExchangeHelper.calculateAccountingCurrencyAmount(
                                                                budgetPlanLineNew.TransactionCurrencyAmount,
                                                                budgetPlanLineNew.TransactionCurrencyCode,
                                                                budgetPlanLineNew.EffectiveDate);
            }

            budgetPlanLineNew.Quantity           = totalQuantity - totalQuantityAccumulated;
            budgetPlanLineNew.BudgetPlanScenario = targetBudgetPlanScenarioRecId;
            budgetPlanLineNew.insert();
        }
        else if (budgetPlanLineNew
            && ((totalAmount - totalAmountAccumulated)     != 0
            ||  (totalQuantity - totalQuantityAccumulated) != 0))
        {
            // Update the last line that was allocated to include the remaining amount and quanity.
            budgetPlanLineNew.reread();

            if (targetBudgetPlanScenario.UnitOfMeasureClass == UnitOfMeasureClass::Monetary)
            {
                budgetPlanLineNew.TransactionCurrencyAmount += totalAmount - totalAmountAccumulated;
                budgetPlanLineNew.ReportingCurrencyAmount   = budgetPlanCurrencyExchangeHelper.calculateReportingCurrencyAmount(
                                                                budgetPlanLineNew.TransactionCurrencyAmount,
                                                                budgetPlanLineNew.TransactionCurrencyCode,
                                                                budgetPlanLineNew.EffectiveDate);

                budgetPlanLineNew.AccountingCurrencyAmount  = budgetPlanCurrencyExchangeHelper.calculateAccountingCurrencyAmount(
                                                                budgetPlanLineNew.TransactionCurrencyAmount,
                                                                budgetPlanLineNew.TransactionCurrencyCode,
                                                                budgetPlanLineNew.EffectiveDate);
            }

            budgetPlanLineNew.Quantity += totalQuantity - totalQuantityAccumulated;
            budgetPlanLineNew.update();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the date for the new budget plan lines by creating an instance of the
    /// <c>Futures</c> class that has the budget allocation starting date, frequency, and frequency code.
    /// </summary>
    /// <param name="_ledgerAllocateTrans">
    /// An instance of the <c>LedgerAllocateTrans</c> table which is used in creating the <c>Futures</c>
    /// class instance for getting the next date based on the frequency and the frequency code.
    /// </param>
    /// <param name="_startDate">
    /// The start date used to determine the next date for the budget plan line.
    /// </param>
    /// <returns>
    /// A <c>TransDate</c> object that uses the <c>Futures</c> class instance for the new budget line.
    /// </returns>
    protected TransDate determineDate(
        LedgerAllocateTrans _ledgerAllocateTrans,
        TransDate           _startDate)
    {
        Futures futures;

        futures = Futures::construct(_startDate, _ledgerAllocateTrans.Freq, _ledgerAllocateTrans.FreqCode);

        return futures.next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the starting date before creating new budget plan lines by using the fixed field
    /// value of the <c>LedgerAllocateKey</c> buffer.
    /// </summary>
    /// <param name="_sourceBudgetPlanLine">
    /// The <c>BudgetPlanLine</c> record ID to allocate.
    /// </param>
    /// <returns>
    /// A <c>TransDate</c> object contains the start date of the fiscal year
    /// or the effective date of the budget plan lines.
    /// </returns>
    protected TransDate determineStartDate(BudgetPlanLine _sourceBudgetPlanLine)
    {
        container           fiscalYearStartEndDates;
        LedgerAllocateKey   ledgerAllocateKey;
        TransDate           startDate;

        ledgerAllocateKey = LedgerAllocateKey::find(ledgerAllocateKeyId);

        if (ledgerAllocateKey.Fixed)
        {
            // The starting date is the first opening period date of the company's fiscal year that the date falls in.
            fiscalYearStartEndDates = FiscalCalendars::findFiscalYearStartEndDatesByDate(
                                        Ledger::fiscalCalendar(legalEntityRecId),
                                        _sourceBudgetPlanLine.EffectiveDate);

            startDate = conPeek(fiscalYearStartEndDates, 1);
        }
        else
        {
            // Starting date will be the source budget plan line's effective date.
            startDate = _sourceBudgetPlanLine.EffectiveDate;
        }

        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doSetSourceBudgetPlanLine</Name>
				<Source><![CDATA[
    protected boolean doSetSourceBudgetPlanLine(BudgetPlanLineRecId _sourceBudgetPlanLineRecId, BudgetPlanLineRecId _newBudgetPlanLineRecId)
    {
        boolean setSourceBudgetPlanLine;

        // If the budget plan scenario of the source line is different than the budget plan scenario of the target line then set the SourceBudgetPlanLine field.
        if (BudgetPlanLine::exist(_sourceBudgetPlanLineRecId))
        {
            if (_newBudgetPlanLineRecId)
            {
                setSourceBudgetPlanLine = BudgetPlanLine::find(_sourceBudgetPlanLineRecId).BudgetPlanScenario != BudgetPlanLine::find(_newBudgetPlanLineRecId).BudgetPlanScenario;
            }
            else
            {
                setSourceBudgetPlanLine = BudgetPlanLine::find(_sourceBudgetPlanLineRecId).BudgetPlanScenario != targetBudgetPlanScenarioRecId;
            }
        }

        return setSourceBudgetPlanLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewLineCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the number of ledger allocation lines present for the given ledger allocate key.
    /// </summary>
    /// <returns>
    /// The number of legder allocation lines present for the given ledger allocate key.
    /// </returns>
    protected LineNum getNewLineCount()
    {
        LedgerAllocateTrans ledgerAllocateTrans;

        select count(LineNum) from ledgerAllocateTrans
            where ledgerAllocateTrans.Key == ledgerAllocateKeyId;

        return ledgerAllocateTrans.LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize(BudgetPlanAllocateRequest _budgetPlanAllocateRequest)
    {
        BudgetPlanAllocateRequestByPeriod allocateRequestByPeriod;

        super(_budgetPlanAllocateRequest);

        allocateRequestByPeriod = _budgetPlanAllocateRequest as BudgetPlanAllocateRequestByPeriod;

        ledgerAllocateKeyId = allocateRequestByPeriod.parmLedgerAllocateKeyId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the allocation by period on the set of <c>BudgetPlanLine</c> records.
    /// </summary>
    protected void process()
    {
        changeCompany(CompanyInfo::getDataArea(legalEntityRecId))
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllocationKeyLookupQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query to retrieve a list of <c>LedgerAllocateKey</c> records.
    /// </summary>
    /// <param name="_legalEntityRecId">
    /// The legal entity used to lookup the ledger allocate key.
    /// </param>
    /// <returns>
    /// A query to retrieve a list of <c>LedgerAllocateKey</c> records.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// An error exception is thrown when the required parameters are null.
    /// </exception>
    public static Query getAllocationKeyLookupQuery(LegalEntity _legalEntityRecId)
    {
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;

        if (!_legalEntityRecId)
        {
            throw error(Error::missingParameter(null));
        }

        queryBuildDataSource = query.addDataSource(tableNum(LedgerAllocateKey));

        // Add legal entity to the query range
        query.allowCrossCompany(true);
        query.addCompanyRange(CompanyInfo::getDataArea(_legalEntityRecId));

        queryBuildDataSource.addSelectionField(fieldNum(LedgerAllocateKey, Key));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerAllocateKeyLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a lookup for the ledger allocate key.
    /// </summary>
    /// <param name="_ctrl">
    /// The calling control.
    /// </param>
    /// <param name="_legalEntityRecId">
    /// The legal entity to lookup the ledger allocate key.
    /// </param>
    /// <exception cref="Exception::Error">
    /// An error exception is thrown when the required parameters are null.
    /// </exception>
    public static void ledgerAllocateKeyLookup(
        FormStringControl   _ctrl,
        LegalEntity         _legalEntityRecId)
    {
        SysTableLookup          sysTableLookup;

        if (!_ctrl || !_legalEntityRecId)
        {
            throw error(Error::missingParameter(null));
        }

        sysTableLookup = SysTableLookup::newParameters(
            tableNum(LedgerAllocateKey),
            _ctrl,
            false);

        sysTableLookup.addLookupfield(fieldNum(LedgerAllocateKey, Key));
        sysTableLookup.addLookupfield(fieldNum(LedgerAllocateKey, Txt));

        sysTableLookup.parmQuery(BudgetPlanAllocateByPeriod::getAllocationKeyLookupQuery(_legalEntityRecId));
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePeriodAllocationKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the ledger allocate key (period).
    /// </summary>
    /// <param name="_ledgerAllocateKeyId">
    /// The ledger allocate key to validate.
    /// </param>
    /// <param name="_legalEntityRecId">
    /// The legal entity to validate the ledger allocate key.
    /// </param>
    /// <returns>
    /// true if the ledger allocate key is valid; otherwise, false.
    /// </returns>
    public static boolean validatePeriodAllocationKey(
        LedgerAllocateKeyId _ledgerAllocateKeyId,
        LegalEntity         _legalEntityRecId)
    {
        LedgerAllocateKey ledgerAllocateKey;

        changeCompany(CompanyInfo::getDataArea(_legalEntityRecId))
        {
            ledgerAllocateKey = LedgerAllocateKey::find(_ledgerAllocateKeyId);
        }

        return ledgerAllocateKey != null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>