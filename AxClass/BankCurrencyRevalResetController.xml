<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankCurrencyRevalResetController</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class BankCurrencyRevalResetController extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super(
            classStr(BankCurrencyRevalResetProcessor),
            methodStr(BankCurrencyRevalResetProcessor, run),
            SysOperationExecutionMode::ReliableAsynchronous);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        BankCurrencyRevalResetContract bankRevalReset = this.getContract();
        
        if (bankRevalReset.parmNeedsToBeSplitIntoTasks())
        {
            this.splitTasks();
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitTasks</Name>
				<Source><![CDATA[
    internal void splitTasks()
    {
        BankCurrencyRevalResetContract bankRevalReset = this.getContract();

        BatchHeader batchHeader = this.batchInfo().parmBatchHeader();

        batchHeader.parmCaption(strFmt("@CashManagement:BankCurrencyRevalResetSplitBatchCaption", any2Str(bankRevalReset.parmPostingDate())));
        this.parmShowDialog(false);

        container bankDimensionConfig = bankRevalReset.parmBankDimensionConfig();

        for (int i = 1; i <= conLen(bankDimensionConfig); i++)
        {
            BankCurrencyRevalResetController controller = this.cloneForSubProcess(bankRevalReset, conPeek(bankDimensionConfig, i));
            batchHeader.addTask(controller);
        }

        batchHeader.save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContract</Name>
				<Source><![CDATA[
    internal BankCurrencyRevalResetContract getContract()
    {
        return this.getDataContractObject(classStr(BankCurrencyRevalResetContract)) as BankCurrencyRevalResetContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cloneForSubProcess</Name>
				<Source><![CDATA[
    private BankCurrencyRevalResetController cloneForSubProcess(BankCurrencyRevalResetContract _bankRevalResetContract, container _config)
    {
        BankCurrencyRevalResetController controller = new BankCurrencyRevalResetController();

        BankCurrencyRevalResetContract newbankRevalResetContract = controller.getContract();

        BankAccountTable bankAccountTableLocal = BankAccountTable::findByRecId(conPeek(_config, 1));

        controller.batchInfo().parmCaption(strFmt("@CashManagement:BankCurrencyRevalResetRunBatchCaption", any2Str(bankAccountTableLocal.AccountID), any2Str(_bankRevalResetContract.parmPostingDate())));
        controller.parmShowDialog(false);

        newbankRevalResetContract.parmPostingDate(_bankRevalResetContract.parmPostingDate());
        newbankRevalResetContract.parmBankDimensionConfig([_config]);
        newbankRevalResetContract.parmNeedsToBeSplitIntoTasks(false);

        return controller;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>