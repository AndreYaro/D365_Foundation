<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmsPackingListDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data provider class for the <c>TMSPackingList</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(TMSPackingListQuery))
]
public class TmsPackingListDP extends SRSReportDataProviderBase
{
    TMSPackingListTmp tmsPackingListTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayItemName</Name>
				<Source><![CDATA[
    private ItemName displayItemName(ItemId _itemId)
    {
        return EcoResProductTranslation::findByProductLanguage(InventTable::itemProduct(_itemId), Global::currentUserLanguage()).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayItemWeight</Name>
				<Source><![CDATA[
    private Weight displayItemWeight(ItemId _itemId, UnitOfMeasureSymbol _unitId, Qty _qty)
    {
        WHSPhysDimUOM whsPhysDimUOM = WHSPhysDimUOM::getPhysDimUOMByItem(_itemId, _unitId);

        if (whsPhysDimUOM)
        {
            return whsPhysDimUOM.Weight * _qty;
        }

        return InventTable::find( _itemId).grossWeight() * _qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTMSPackingListTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets the <c>tmsPackingListTmp</c> variable.
    /// </summary>
    /// <returns>
    /// The <c>TMSPackingListTmp</c> table for the Packing List report.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(TMSPackingListTmp))]
    public TMSPackingListTmp getTMSPackingListTmp()
    {
        select tmsPackingListTmp;
        return tmsPackingListTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateShipmentContainersCount</Name>
				<Source><![CDATA[
    private NumberOfRecords calculateShipmentContainersCount(WHSShipmentId _shipmentId)
    {
        WHSContainerTable   containerTable;
        WHSContainerLine    containerLine;

        select count(RecId) from containerTable
            exists join containerLine
                where containerLine.ContainerId == containerTable.ContainerId
                    && containerLine.ShipmentId == _shipmentId;

        return containerTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        Enumerator enumerator = TMSPackingListDPQuery::newQuery(this).getEnumerator();
        
        TMSPackingListDPQuerySelection lastPackingListDPQuerySelection;
        WHSloadLine lastLoadLine;

        Qty packedItemQtyForCurLoadLine = 0;
        Qty lastLoadLineQty;

        EcoResReleasedProductUnitConverter releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();

        ttsbegin;

        while (enumerator.moveNext())
        {            
            TMSPackingListDPQuerySelection curPackingListDPQuerySelection = enumerator.current() as TMSPackingListDPQuerySelection;
            WHSloadLine curLoadLine  = curPackingListDPQuerySelection.parmLoadLine();
            
           
            if (lastLoadLine.RecId != curLoadLine.RecId)
            {                
                this.createNonPackedPackingListLine(lastPackingListDPQuerySelection, lastLoadLineQty - packedItemQtyForCurLoadLine);

                packedItemQtyForCurLoadLine     = 0;
                lastPackingListDPQuerySelection = curPackingListDPQuerySelection;
                lastLoadLine                    = curLoadLine;
                lastLoadLineQty                 = releasedProductUnitConverter.convert(lastLoadLine.Qty,
                                                            UnitOfMeasure::unitOfMeasureIdBySymbol(lastLoadLine.UOM),
                                                            UnitOfMeasure::unitOfMeasureIdBySymbol(curPackingListDPQuerySelection.parmContainerLine().UnitId),
                                                            NoYes::No,
                                                            curLoadLine.ItemId,
                                                            curLoadLine.InventDimId,
                                                            NoYes::No);
                    
            }
            
            packedItemQtyForCurLoadLine += this.createPackedPackingListLine(curPackingListDPQuerySelection);
        }
        // for the rest of the last load line
        this.createNonPackedPackingListLine(lastPackingListDPQuerySelection, lastLoadLineQty - packedItemQtyForCurLoadLine);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNonPackedPackingListLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates packing list data for a non packed item and inserts it into the <c>TMSPackingListTmp</c> table.
    /// </summary>
    /// <param name = "_packingLineSelection">
    /// A <c>TMSPackingListDPQuerySelection</c> object which the packing line should be created for.
    /// </param>
    /// <param name = "_remainingQty">
    /// The quantity of the item for which the packing line is being created.
    /// </param>
    protected void createNonPackedPackingListLine(TMSPackingListDPQuerySelection _packingLineSelection, Qty _remainingQty)
    {
        if (_remainingQty && _packingLineSelection)
        {
            ttsbegin;

            TMSPackingListTmp packingListTmp = this.initializeNonPackedPackingListLine(_packingLineSelection, _remainingQty);
            this.insertPackingListLine(packingListTmp);
        
            ttscommit;
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeNonPackedPackingListLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes packing list data for a non packed item.
    /// </summary>
    /// <param name = "_packingLineSelection">
    /// A <c>TMSPackingListDPQuerySelection</c> object which the packing line should be created for.
    /// </param>
    /// <param name = "_qty">
    /// The quantity of the item for which the packing line is being created.
    /// </param>
    /// <returns>The line of the temporary table.</returns>
    protected TMSPackingListTmp initializeNonPackedPackingListLine(TMSPackingListDPQuerySelection _packingLineSelection, Qty _qty)
    {
        WHSShipmentTable    shipmentTable   = _packingLineSelection.parmShipmentTable();
        WHSLoadLine         loadLine        = _packingLineSelection.parmLoadLine();
        WHSContainerTable   emptyContainerTable;

        Weight  itemWeight = loadLine.displayItemWeight();

        return this.initializePackingListLine(shipmentTable,
                                              emptyContainerTable,
                                              loadLine,
                                              _qty,
                                              itemWeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePackingListLine</Name>
				<Source><![CDATA[
    private TMSPackingListTmp initializePackingListLine(
        WHSShipmentTable    _shipmentTable,
        WHSContainerTable   _containerTable,
        WHSLoadLine         _loadLine, 
        Qty                 _qty,
        Weight              _itemWeight)
    {
        SalesTable salesTable;
        select firstOnly CustomerRef, PurchOrderFormNum from salesTable
            where salesTable.SalesId == _shipmentTable.displaySalesId();

        tmsPackingListTmp.GrossWeight        = _itemWeight;
        tmsPackingListTmp.Quantity           = _qty;

        tmsPackingListTmp.ItemId             = _loadLine.ItemId;
        tmsPackingListTmp.ItemName           = InventTable::name(_loadLine.ItemId, _loadLine.inventDim());

        if (_shipmentTable.CarrierCode && _shipmentTable.CarrierServiceCode && HMIMManagementFeatureVisibilityManager::isVisible())
        {
            tmsPackingListTmp.HMIMItemDetails = HMIMItemMaterial::findShipPrintText(_loadLine.ItemId, 
                                                                                    _shipmentTable.HMIMGetRegCode(), 
                                                                                    HMIMShippingDocumentsLanguageProvider::determineDomesticLanguageFromShipment(_shipmentTable));
        }
        
        this.initTmsPackingListTmpFromSalesTable(salesTable);
        this.initTmsPackingListTmpFromShipment(_shipmentTable);
        this.initTmsPackingListTmpFromContainer(_containerTable);

        return tmsPackingListTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmsPackingListTmpFromContainer</Name>
				<Source><![CDATA[
    private void initTmsPackingListTmpFromContainer(WHSContainerTable _containerTable)
    {
        tmsPackingListTmp.ContainerId        = _containerTable.ContainerId;
        tmsPackingListTmp.ContainerWeight    = _containerTable.Weight;
        tmsPackingListTmp.Height             = _containerTable.Height;
        tmsPackingListTmp.Width              = _containerTable.Width;
        tmsPackingListTmp.Length             = _containerTable.Length;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmsPackingListTmpFromShipment</Name>
				<Source><![CDATA[
    private void initTmsPackingListTmpFromShipment(WHSShipmentTable _shipmentTable)
    {
        tmsPackingListTmp.Service            = _shipmentTable.CarrierServiceCode;
        tmsPackingListTmp.CustomerName       = _shipmentTable.displayCustName();
        tmsPackingListTmp.Carrier            = _shipmentTable.CarrierCode;
        tmsPackingListTmp.Address            = _shipmentTable.displayDropOffLoc();
        tmsPackingListTmp.NumberOfContainers = this.calculateShipmentContainersCount(_shipmentTable.ShipmentId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmsPackingListTmpFromSalesTable</Name>
				<Source><![CDATA[
    private void initTmsPackingListTmpFromSalesTable(SalesTable _salesTable)
    {
        tmsPackingListTmp.CustomerRef        = _salesTable.CustomerRef;
        tmsPackingListTmp.PurchOrderFormNum  = _salesTable.PurchOrderFormNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPackingListLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts packing list data into the temporary table.
    /// </summary>
    /// <param name = "_packingListTmp">
    /// A <c>TMSPackingListTmp</c> record to be inserted.
    /// </param>
    protected void insertPackingListLine(TMSPackingListTmp _packingListTmp)
    {
        tmsPackingListTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPackedPackingListLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates packing list data for a packed item and inserts it into the <c>TMSPackingListTmp</c>.
    /// </summary>
    /// <param name = "_packingLineSelection">
    /// A <c>TMSPackingListDPQuerySelection</c> object which the packing line should be created for.
    /// </param>
    /// <returns>The inserted quantity of the item.</returns>
    protected ProductQuantity createPackedPackingListLine(TMSPackingListDPQuerySelection _packingLineSelection)
    {
        if (_packingLineSelection.parmContainerLine())
        {
            ttsbegin;

            TMSPackingListTmp packingListTmp = this.initializePackedPackingListLine(_packingLineSelection);
            this.insertPackingListLine(packingListTmp);
            
            ttscommit;

            return packingListTmp.Quantity;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePackedPackingListLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes packing list data for a packed item.
    /// </summary>
    /// <param name = "_packingLineSelection">
    /// A <c>TMSPackingListDPQuerySelection</c> object which the packing line should be created for.
    /// </param>
    /// <returns>The line of the temporary table.</returns>
    protected TMSPackingListTmp initializePackedPackingListLine(TMSPackingListDPQuerySelection _packingLineSelection)
    {
        WHSContainerLine    containerLine   = _packingLineSelection.parmContainerLine();
        WHSLoadLine         loadLine        = _packingLineSelection.parmLoadLine();
        WHSShipmentTable    shipmentTable   = _packingLineSelection.parmShipmentTable();
        WHSContainerTable   containerTable  = _packingLineSelection.parmContainerTable();

        Weight itemWeight = this.displayItemWeight(containerLine.ItemId, containerLine.UnitId, containerLine.Qty);

        return this.initializePackingListLine(shipmentTable,
                                              containerTable,
                                              loadLine,
                                              containerLine.Qty,
                                              itemWeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTMSPackingList</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is method inserts the data into the TMSPackingListTmp table.
    /// </summary>
    /// <param name="_whsShipmentTable">
    /// Shipment record
    /// </param>
    /// <param name="_whsLoadLine">
    /// Load line record
    /// </param>
    /// <param name="_whsContainerTable">
    /// Container table record
    /// </param>
    /// <param name="_salesTable">
    /// Sales table record.
    /// </param>
    /// <param name="_numberOfContainers">
    /// Total number of containers
    /// </param>
    [SysObsolete("Use createPackedPackingListLine method", false, 31\03\2018)]
    public void insertTMSPackingList(
        WHSShipmentTable  _whsShipmentTable,
        WHSLoadLine       _whsLoadLine,
        WHSContainerTable _whsContainerTable,
        SalesTable        _salesTable,
        int64             _numberOfContainers)
    {
        WHSContainerLine containerLine;
        Weight itemWeight;
        Qty qty;

        if (_whsContainerTable.RecId)
        {
            select ItemId, UnitId, sum(Qty) from containerLine
                group by ItemId, UnitId
                    where  containerLine.containerId == _whsContainerTable.ContainerId
                        && containerLine.ItemId      == _whsLoadLine.ItemId;
            
            if (!containerLine.Qty)
                return;
            itemWeight = this.displayItemWeight(containerLine.ItemId, containerLine.UnitId, containerLine.Qty);
            qty = containerLine.Qty;
        }
        else
        {
            itemWeight = _whsLoadLine.displayItemWeight();
            qty = _whsLoadLine.Qty;
        }

        ttsbegin;

        tmsPackingListTmp.GrossWeight        = itemWeight;
        tmsPackingListTmp.Quantity           = qty;
        tmsPackingListTmp.CustomerName       = _whsShipmentTable.displayCustName();
        tmsPackingListTmp.CustomerRef        = _salesTable.CustomerRef;
        tmsPackingListTmp.PurchOrderFormNum  = _salesTable.PurchOrderFormNum;
        tmsPackingListTmp.Service            = _whsShipmentTable.CarrierCode;
        tmsPackingListTmp.Carrier            = _whsShipmentTable.CarrierServiceCode;
        tmsPackingListTmp.Address            = _whsShipmentTable.displayDropOffLoc();
        tmsPackingListTmp.NumberOfContainers = _numberOfContainers;
        tmsPackingListTmp.ContainerId        = _whsContainerTable.ContainerId;
        tmsPackingListTmp.ContainerWeight    = _whsContainerTable.Weight;
        tmsPackingListTmp.Height             = _whsContainerTable.Height;
        tmsPackingListTmp.Width              = _whsContainerTable.Width;
        tmsPackingListTmp.Length             = _whsContainerTable.Length;
        tmsPackingListTmp.ItemId             = _whsLoadLine.ItemId;
        tmsPackingListTmp.ItemName           = _whsLoadLine.displayItemName();
        tmsPackingListTmp.insert();

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>