<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ViewComputedColumnUtil</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ViewComputedColumnUtil</c> is a helper class with view-computed-columns-related reusable methods.
/// </summary>
internal final class ViewComputedColumnUtil
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isNotEmptyOrNull</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the value in the view datasource field is neither NULL nor empty (dependent by the "empty" of a given type).
    /// </summary>
    /// <param name = "_expression">An expression for view datasource field.</param>
    /// <param name = "_valueType">The value type of the field represented by <paramref name="_expression"/> paramenter.</param>
    /// <returns>An expression with conditional statement checking for empty and NULL values.</returns>
    /// <remarks>
    /// As calculated fields are run on SQL level, they may face NULL values despite the general absence of NULL values in DB.
    /// Usually NULLs appear during outer joins.
    /// Thus the NULL check may be required when working with calculated fields on view.
    ///
    /// Also a direct value for "empty value" check (like 1/1/1900 for empty date) is determined depending on a provided type and then put into the statement.
    /// </remarks>
    internal static str isNotEmptyOrNull(str _expression, Types _valueType)
    {
        return SysComputedColumn::and2(
            SysComputedColumn::isNotNullExpression(_expression),
            SysComputedColumn::notEqualExpression(_expression, SysComputedColumn::comparisonLiteral(nullValueBaseType(_valueType))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNotEmptyOrNullSwitch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes a "switch" expression which checks if the value in the provided list of expressions is null or empty.
    /// </summary>
    /// <param name = "_expressionList">A list with expressions to place in a switch statement.</param>
    /// <param name = "_valueType">The value type for the fields in the <paramref name="_expressionList"/> list.</param>
    /// <param name = "_defaultValue">Value used in 'Default' case of switch-case operation.</param>
    /// <returns>A switch expression.</returns>
    /// <remarks>
    /// The <paramref name="_expressionList"/> list should have fields of the same value type provided by <paramref name="_valueType"/>.
    /// </remarks>
    internal static str isNotEmptyOrNullSwitch(List _expressionList, Types _valueType, anytype _defaultValue = 0)
    {
        List comparisonExpressionList = new List(Types::Container);

        ListEnumerator listEnumerator = _expressionList.getEnumerator();
        while (listEnumerator.moveNext())
        {
            comparisonExpressionList.addEnd([
                ViewComputedColumnUtil::isNotEmptyOrNull(listEnumerator.current(), _valueType),
                listEnumerator.current()]);
        }

        return ViewComputedColumnUtil::switchStrictOrder(
            '',
            comparisonExpressionList,
            SysComputedColumn::returnLiteral(prmIsDefault(_defaultValue) ? nullValueBaseType(_valueType) : _defaultValue));
    }

]]></Source>
			</Method>
			<Method>
				<Name>switchStrictOrder</Name>
				<Source><![CDATA[
    ///<summary>
    /// The variant of switch() for computed columns which honors the case order.
    ///</summary>
    ///<param name="_controlExpression">
    /// A string value that contains the control expression.
    ///</param>
    ///<param name = "_comparisonExpressionList">
    /// A <c>List</c> of expressions formed in containers as ([WhenExpr1, ThenExpr1], [WhenExpr2, ThenExpr2], ...)
    ///</param>
    ///<param name="_defaultExpression">
    /// A string value that contains a default expression.
    ///</param>
    ///<returns>An SQL expression for switch() that honors the case order.</returns>
    ///<remarks>
    /// The switch() method defined in SysComputedColumn class stores case expressions as map keys,
    /// which are always sorted, and some applications need a strict order to be followed for the case statements.
    /// Like:
    ///     CASE ...
    ///     1) WHEN ... THEN ...
    ///     2) WHEN ... THEN ...
    ///     3) WHEN ... THEN ...
    ///     ...
    ///     ELSE ...
    ///     END
    /// This method uses List instead of Map for expressions, and List is not sorted automatically.
    ///</remarks>
    internal static str switchStrictOrder(
        str _controlExpression,
        List _comparisonExpressionList,
        str _defaultExpression)
    {
        str caseExpression = 'CASE ' + _controlExpression;

        ListEnumerator listEnumerator = _comparisonExpressionList.getEnumerator();
        while (listEnumerator.moveNext())
        {
            container conExprValues = listEnumerator.current();
            caseExpression += ' WHEN ' + conPeek(conExprValues, 1) + ' THEN ' + conPeek(conExprValues, 2);
        }
        caseExpression += ' ELSE ' + _defaultExpression;
        caseExpression += ' END';

        return caseExpression;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>