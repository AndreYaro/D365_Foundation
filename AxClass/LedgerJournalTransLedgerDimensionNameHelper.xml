<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTransLedgerDimensionNameHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerJournalTransLedgerDimensionNameHelper
{
    private const str CacheScope = 'LedgerJournalTransLedgerDimensionNameHelperCacheScope';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the name for the account type and ledger dimension.
    /// </summary>
    /// <param name = "_dataAreaId">Identifies the company.</param>
    /// <param name = "_accountType">Identifies the account type.</param>
    /// <param name = "_ledgerDimension">Identifies the ledger dimension.</param>
    /// <returns>
    /// The name.
    /// </returns>
    public static DirPartyName findName(DataAreaId _dataAreaId, LedgerJournalACType _accountType, DimensionDynamicAccount _ledgerDimension)
    {
        DirPartyName name;

        switch (_accountType)
        {
            case LedgerJournalACType::Vend:
                name = LedgerJournalTransLedgerDimensionNameHelper::findNameForVendAccountType(_dataAreaId, _ledgerDimension);
                break;
            case LedgerJournalACType::Bank:
                name = LedgerJournalTransLedgerDimensionNameHelper::findNameForBankAccountType(_dataAreaId, _ledgerDimension);
                break;
            case LedgerJournalACType::Cust:
                name = LedgerJournalTransLedgerDimensionNameHelper::findNameForCustAccountType(_dataAreaId, _ledgerDimension);
                break;
            default:
                break;
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsForLedgerJournalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exists for ledger journal.
    /// </summary>
    /// <param name = "_dataAreaId">Identifies the company.</param>
    /// <param name = "_journalNum">Identifies the journal.</param>
    /// <returns>
    /// True when at least one row exists; otherwise false.
    /// </returns>
    public static boolean existsForLedgerJournalId(DataAreaId _dataAreaId, LedgerJournalId _journalNum)
    {
        LedgerJournalTrans ledgerJournalTrans;
        boolean doesLedgerJournalTransRowsExistForJournalNum;

        changecompany(_dataAreaId)
        {
            select firstonly RecId from ledgerJournalTrans
                where ledgerJournalTrans.JournalNum == _journalNum;

            if (ledgerJournalTrans.RecId)
            {
                doesLedgerJournalTransRowsExistForJournalNum = true;
            }
        }

        return doesLedgerJournalTransRowsExistForJournalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendorNameForJournalNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the vendor name for a journal.
    /// </summary>
    /// <param name = "_dataAreaId">Identifies the company.</param>
    /// <param name = "_journalNum">Identifies the journal.</param>
    public static void updateVendorNameForJournalNum(DataAreaId _dataAreaId, LedgerJournalId _journalNum)
    {
        changecompany(_dataAreaId)
        {
            LedgerJournalTrans ledgerJournalTrans;
            DimensionAttributeValueCombination dimensionAttributeValueCombination;
            VendTable vendTable;
            DirPartyTable dirPartyTable;

            FieldId vendorKeyFieldId = LedgerJournalTransLedgerDimensionNameHelper::findDimensionAttributeValueCombinationKeyColumnFieldId(DimensionHierarchyType::Vendor);

            if (vendorKeyFieldId)
            {
                ledgerJournalTrans.skipAosValidation(true);
                ledgerJournalTrans.skipDataMethods(true);
                ledgerJournalTrans.skipEvents(true);
                ledgerJournalTrans.skipDatabaseLog(true);

                update_recordset ledgerJournalTrans
                setting LedgerDimensionName = dirPartyTable.Name
                    join RecId, CurrencyCode from ledgerJournalTrans
                        where ledgerJournalTrans.JournalNum == _journalNum
                            && ledgerJournalTrans.Company == _dataAreaId
                            && ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
                    join dimensionAttributeValueCombination
                        where ledgerJournalTrans.LedgerDimension == dimensionAttributeValueCombination.RecId
                    join RecId from vendTable
                        where dimensionAttributeValueCombination.(vendorKeyFieldId) == vendTable.RecId
                    join RecId, Name from dirPartyTable
                        where vendTable.Party == dirPartyTable.RecId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNameForVendAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find name for the vendor account type.
    /// </summary>
    /// <param name = "_dataAreaId">Identfies the company.</param>
    /// <param name = "_ledgerDimension">Identifies the ledger dimension.</param>
    /// <returns>
    /// The name.
    /// </returns>
    protected static DirPartyName findNameForVendAccountType(DataAreaId _dataAreaId, DimensionDynamicAccount _ledgerDimension)
    {
        DimensionAttributeValueCombination dimensionAttributeValueCombination;
        VendTable vendTable;
        DirPartyTable dirPartyTable;

        FieldId vendorKeyFieldId = LedgerJournalTransLedgerDimensionNameHelper::findDimensionAttributeValueCombinationKeyColumnFieldId(DimensionHierarchyType::Vendor);

        if (vendorKeyFieldId)
        {
            changecompany(_dataAreaId)
            {
                select RecId from dimensionAttributeValueCombination
                    where dimensionAttributeValueCombination.RecId == _ledgerDimension
                join Recid from vendTable
                    where dimensionAttributeValueCombination.(vendorKeyFieldId) == vendTable.RecId
                join Name from dirPartyTable
                    where vendTable.Party == dirPartyTable.RecId;
            }
        }

        return dirPartyTable.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNameForBankAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find name for the Bank account type.
    /// </summary>
    /// <param name = "_dataAreaId">Identifies the company.</param>
    /// <param name = "_ledgerDimension">Identifies the ledger dimension.</param>
    /// <returns>
    /// The name of bank account.
    /// </returns>
    protected static DirPartyName findNameForBankAccountType(DataAreaId _dataAreaId, DimensionDynamicAccount _ledgerDimension)
    {
        DimensionAttributeValueCombination dimensionAttributeValueCombination;
        BankAccountTable bankAccountTable;        

        FieldId bankKeyFieldId = LedgerJournalTransLedgerDimensionNameHelper::findDimensionAttributeValueCombinationKeyColumnFieldId(DimensionHierarchyType::BankAccount);

        if (bankKeyFieldId)
        {
            changecompany(_dataAreaId)
            {
                select RecId from dimensionAttributeValueCombination
                    where dimensionAttributeValueCombination.RecId == _ledgerDimension
                join Recid from bankAccountTable
                    where dimensionAttributeValueCombination.(bankKeyFieldId) == bankAccountTable.RecId;
            }
        }

        return bankAccountTable.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNameForCustAccountType</Name>
				<Source><![CDATA[
    private static DirPartyName findNameForCustAccountType(DataAreaId _dataAreaId, DimensionDynamicAccount _ledgerDimension)
    {
        DirPartyTable dirPartyTable;

        FieldId customerKeyFieldId = LedgerJournalTransLedgerDimensionNameHelper::findDimensionAttributeValueCombinationKeyColumnFieldId(DimensionHierarchyType::Customer);

        if (customerKeyFieldId)
        {
            changecompany(_dataAreaId)
            {
                DimensionAttributeValueCombination dimensionAttributeValueCombination;
                CustTable custTable;

                select firstonly Name from dirPartyTable
                    exists join custTable
                        where custTable.Party == dirPartyTable.RecId
                    exists join dimensionAttributeValueCombination
                        where dimensionAttributeValueCombination.RecId == _ledgerDimension
                            && dimensionAttributeValueCombination.(customerKeyFieldId) == custTable.RecId;
            }
        }

        return dirPartyTable.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDimensionAttributeValueCombinationKeyColumnFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the dimension attribute value combination key column <c>FieldId</c>
    /// </summary>
    /// <param name = "_dimensionHiearchType">
    /// The dimension hierarchy type.
    /// </param>
    /// <returns>
    /// The <c>FieldId</c>
    /// </returns>
    public static FieldId findDimensionAttributeValueCombinationKeyColumnFieldId(DimensionHierarchyType _dimensionHiearchType)
    {
        int cacheKeyInt = enum2int(_dimensionHiearchType);
        str cacheKeyStr = int2Str(cacheKeyInt);
        container cacheKey = [cacheKeyStr];

        SysGlobalObjectCache sgoc = classFactory.globalObjectCache();
        container cacheValue = sgoc.find(CacheScope, cacheKey);

        if (cacheValue != connull())
        {
            return conPeek(cacheValue, 1);
        }
        
        DimensionAttribute dimensionAttribute = DimensionAttribute::getAttributeByHierarchyType(_dimensionHiearchType, false);

        FieldId dimensionKeyFieldId;
        if (dimensionAttribute.getStatus() != DimensionAttributeStatus::Inactive)
        {
            dimensionKeyFieldId = DimensionAttributeValueCombination::getDimensionKeyFieldId(dimensionAttribute.Name);
        }

        sgoc.insert(CacheScope, cacheKey, [dimensionKeyFieldId]);

        return dimensionKeyFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>