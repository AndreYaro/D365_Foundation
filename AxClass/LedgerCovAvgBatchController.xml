<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerCovAvgBatchController</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Platform.Extensibility;

/// <summary>
/// The <c>LedgerCovAvgBatchController</c> provides the shared logic for scheduling and running
/// child tasks that will run the <c>LedgerCovAvgDaysPerMonthPopulatorBatch</c> class.
/// </summary>
[ExportInterface]
public abstract class LedgerCovAvgBatchController extends SysOperationServiceController
{
    private const int MaxOCCRetryCount = 5;
    private boolean isChildRuntimeTask;
    private TransDate startOfMonth;

    private const int CurrentVersion = 1;
    private const int Version1 = 1;

    private readonly int BackOffWait = RandomGenerate::construct().randomInt(50, 1000);

    #LOCALMACRO.CurrentList
        isChildRuntimeTask,
        startOfMonth
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getClassNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the class number for the batch.
    /// </summary>
    /// <returns>
    /// The class number for the batch.
    /// </returns>
    internal abstract ClassId getClassNumber()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBatchHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the batch header.
    /// </summary>
    /// <returns>
    /// The batch header that was created.
    /// </returns>
    [Hookable(false)]
    internal BatchHeader createBatchHeader()
    {
        BatchHeader batchHeader = BatchHeader::construct();
        batchHeader.clearAllAlerts();

        // Add this as a permanent task as opposed to a runtime task as we want this task to remain for recurring execution.
        batchHeader.addTask(this);

        batchHeader.parmCaption(this.defaultCaption());
        batchHeader.parmLogLevel(BatchLogLevel::Error);

        return batchHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecurrenceData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the recurrence details for the batch.
    /// </summary>
    /// <returns>
    /// The recurrence details for the batch.
    /// </returns>
    internal abstract SysRecurrenceData getRecurrenceData()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createChildRuntimeTasks</Name>
				<Source><![CDATA[
    internal void createChildRuntimeTasks()
    {
        Batchable prevBatchTask;

        if (!CashflowInsightsActivation::isActive())
        {
            return;
        }

        BatchHeader batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);

        ListEnumerator tasks = this.getChildRunTimeTasks().getEnumerator();

        while (tasks.moveNext())
        {
            LedgerCovAvgBatchController task = tasks.current() as LedgerCovAvgBatchController;

            if (task != null)
            {
                this.setupChildRuntimeTask(task, task.parmStartOfMonth(), batchHeader, prevBatchTask);

                prevBatchTask = task;
            }
        }

        batchHeader.save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChildRunTimeTasks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of child runtime tasks at runtime for each month that needs to execute .
    /// </summary>
    internal abstract List getChildRunTimeTasks()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>createDateRunList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a list of months that the runs will be scheduled for.
    /// </summary>
    /// <param name = "_numberMonthsInRun">The number of months in the past to create.</param>
    /// <returns>A list of months.</returns>
    [Hookable(false)]
    internal List createDateRunList(int _numberMonthsInRun)
    {
        List dates = new List(Types::Date);
        TransDate startOfMonthForRun = dateStartMth(LedgerCovAvgPopulatorHelper::offsetCompanyDateInPast(_numberMonthsInRun));

        for (int i = 1; i <= _numberMonthsInRun; i++)
        {
            dates.addEnd(startOfMonthForRun);

            startOfMonthForRun = dateMthFwd(startOfMonthForRun, 1);
        }

        return dates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupChildRuntimeTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up and configures a child runtime task.
    /// </summary>
    /// <param name = "_childRuntimeTask">The child runtime task to configure</param>
    /// <param name = "_startOfMonth">The first date of the month.</param>
    /// <param name = "_batchHeader">The batch header instance containing the parent task</param>
    /// <param name = "_previousTask">The previous task to make the current task dependent on</param>
    [Hookable(false)]
    internal void setupChildRuntimeTask(LedgerCovAvgBatchController _childRuntimeTask, TransDate _startOfMonth, BatchHeader _batchHeader, Batchable _previousTask)
    {
        _childRuntimeTask.unpack(this.pack());
        _childRuntimeTask.parmIsChildRuntimeTask(true);
        _childRuntimeTask.parmStartOfMonth(_startOfMonth);

        _batchHeader.addRuntimeTask(_childRuntimeTask, this.parmCurrentBatch().RecId);

        // Execute each task sequentially accross all companies and all months to minimize aggregate calculation impact on
        // sql and allow batch to controll its execution.
        if (_previousTask != null)
        {
            _batchHeader.addDependency(_childRuntimeTask, _previousTask, BatchDependencyStatus::FinishedOrError);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartOfMonth</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal TransDate parmStartOfMonth(TransDate _startOfMonth = this.startOfMonth)
    {
        this.startOfMonth = _startOfMonth;
        return this.startOfMonth;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsChildRuntimeTask</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmIsChildRuntimeTask(boolean _isChildRuntimeTask = this.isChildRuntimeTask)
    {
        this.isChildRuntimeTask = _isChildRuntimeTask;
        return this.isChildRuntimeTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedState)
    {
        container packedSuper;
        int version = SysOperationHelper::getVersion(packedState);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedSuper] = packedState;

                return super(packedSuper);

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (!CashflowInsightsActivation::isActive())
        {
            return;
        }

        if (!this.parmIsChildRuntimeTask())
        {
            this.createChildRuntimeTasks();
        }
        else
        {
            LedgerCovAvgBatchArgs populatorArgs = new LedgerCovAvgBatchArgs();
            populatorArgs.startOfMonth = this.startOfMonth;

            Args batchArgs = new Args();
            batchArgs.parmObject(populatorArgs);

            this.callStaticMainMethod(batchArgs);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>callStaticMainMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the static main method for the controller.
    /// </summary>
    internal abstract void callStaticMainMethod(Args _args)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleRecurringBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Schedules and ensures there is a batch job that is running with the defined recurrence.
    /// </summary>
    [Hookable(false)]
    internal void scheduleRecurringBatch()
    {
        if (!CashflowInsightsActivation::isActive())
        {
            return;
        }

        // Ensure there exists a single executable batch job.
        
        BatchJob batchJob = this.getExecutableBatchJob(this.getClassNumber());

        BatchHeader batchHeader = batchJob ? BatchHeader::construct(batchJob.RecId) : this.createBatchHeader();

        if (SysRecurrence::nextTime(batchHeader.parmRecurrenceData()) == 0)
        {
            // No recurrences are currently scheduled or the batch settings need to be updated.
            // Save and schedule the recurrence.
            this.saveAndScheduleBatch(batchHeader);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>endBatchJob</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void endBatchJob()
    {
        SysInstrumentationProgressLogger progressLogger = SysInstrumentationProgressLogger::createLogger(CustVendInstrumentationConstants::SourceNameCashflowAverageBatch, CustVendInstrumentationConstants::InstrumentationNamespace);
        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(CustVendInstrumentationConstants::CashflowAverageActivityEndBatch))
        {
            activityContext.addCustomProperty(CustVendInstrumentationConstants::ClassName, this.GetType().FullName);

            try
            {
                if (!LedgerCovAvgBatchController::existsBatch(this.getClassNumber()))
                {
                    return;
                }

                BatchJob batchJob = this.getExecutableBatchJob(this.getClassNumber());

                if (batchJob)
                {
                    ttsbegin;
                    batchJob.selectForUpdate(true);
                    this.cleanupBatchJob(batchJob);
                    ttscommit;
                }
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= LedgerCovAvgBatchController::MaxOCCRetryCount)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    progressLogger.logRetryOnDeadlock();

                    sleep(xSession::currentRetryCount() * BackOffWait);
                    retry;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= LedgerCovAvgBatchController::MaxOCCRetryCount)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        progressLogger.logRetryOnUpdateConflict();

                        sleep(xSession::currentRetryCount() * BackOffWait);
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::DuplicateKeyException)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= LedgerCovAvgBatchController::MaxOCCRetryCount)
                    {
                        throw Exception::DuplicateKeyExceptionNotRecovered;
                    }
                    else
                    {
                        sleep(xSession::currentRetryCount() * BackOffWait);
                        retry;
                    }
                }
                else
                {
                    throw Exception::DuplicateKeyException;
                }
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>saveAndScheduleBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the batch details to execute at the defined schedule.
    /// </summary>
    /// <param name = "_batchHeader">
    /// The batch header to save.
    /// </param>
    [Hookable(false)]
    internal void saveAndScheduleBatch(BatchHeader _batchHeader)
    {
        SysInstrumentationProgressLogger progressLogger = SysInstrumentationProgressLogger::createLogger(CustVendInstrumentationConstants::SourceNameCashflowAverageBatch, CustVendInstrumentationConstants::InstrumentationNamespace);
        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(CustVendInstrumentationConstants::CashflowAverageSaveAndScheduleBatch))
        {
            activityContext.addCustomProperty(CustVendInstrumentationConstants::ClassName, this.GetType().FullName);

            try
            {
                SysRecurrenceData sysRecurrenceData = this.getRecurrenceData();

                if (sysRecurrenceData != conNull())
                {
                    _batchHeader.parmRecurrenceData(sysRecurrenceData);
                    _batchHeader.parmStartDateTime(SysRecurrence::getRecurrenceStartDateTime(sysRecurrenceData));
                }

                // Save the batch job to run the task.
                _batchHeader.save();
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= LedgerCovAvgBatchController::MaxOCCRetryCount)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    progressLogger.logRetryOnDeadlock();

                    sleep(xSession::currentRetryCount() * BackOffWait);
                    retry;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= LedgerCovAvgBatchController::MaxOCCRetryCount)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        progressLogger.logRetryOnUpdateConflict();

                        sleep(xSession::currentRetryCount() * BackOffWait);
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::DuplicateKeyException)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= LedgerCovAvgBatchController::MaxOCCRetryCount)
                    {
                        throw Exception::DuplicateKeyExceptionNotRecovered;
                    }
                    else
                    {
                        sleep(xSession::currentRetryCount() * BackOffWait);
                        retry;
                    }
                }
                else
                {
                    throw Exception::DuplicateKeyException;
                }
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>getExecutableBatchJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the executable batch job instance for the specified batch class.
    /// </summary>
    /// <param name = "_batchClassId">
    /// The batch class ID.
    /// </param>
    /// <returns>
    /// The executable batch job instance for the specified batch class.
    /// </returns>
    /// <remarks>
    /// All inexecutable and duplicate batch job instances will be removed or have all recurrences ended.
    /// </remarks>
    [Hookable(false)]
    internal BatchJob getExecutableBatchJob(ClassId _batchClassId)
    {
        BatchJob primaryBatchJob;
        
        try
        {
            Counter batchJobCount;

            ttsbegin;

            BatchJob batchJob;
            Batch batch;

            while select forupdate * from batchJob
                join RecId from batch
                    where batch.BatchJobId == batchJob.RecId
                        && batch.ClassNumber == _batchClassId
            {
                batchJobCount++;

                if (batchJob.Status == BatchStatus::Ready
                    || batchJob.Status == BatchStatus::Waiting
                    || batchJob.Status == BatchStatus::Scheduled
                    || batchJob.Status == BatchStatus::Executing)
                {
                    AxaptaUserManager userManager = new AxaptaUserManager();

                    if (userManager.validateAxUser(batchJob.CreatedBy))
                    {
                        if (primaryBatchJob)
                        {
                            // End all remaining recurrences for the duplicate batch jobs.
                            this.endRecurrence(batchJob);
                        }
                        else
                        {
                            // Set the first executable instance of the batch job as the primary.
                            primaryBatchJob = batchJob.data();
                        }
                    }
                    else
                    {
                        // The batch job must be executed with a valid user.
                        this.cleanupBatchJob(batchJob);
                        // else the batch job will be deleted in a future recurrence lookup once it is no longer in a pending state.
                    }
                }
                else if (batchJob.Status != BatchStatus::Cancelling)
                {
                    // Delete the batch job when it is not in an executable state.
                    batchJob.delete();
                }
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= LedgerCovAvgBatchController::MaxOCCRetryCount)
            {
                throw Exception::Deadlock;
            }
            else
            {
                sleep(xSession::currentRetryCount() * BackOffWait);
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= LedgerCovAvgBatchController::MaxOCCRetryCount)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    sleep(xSession::currentRetryCount() * BackOffWait);
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= LedgerCovAvgBatchController::MaxOCCRetryCount)
                {
                    throw Exception::DuplicateKeyExceptionNotRecovered;
                }
                else
                {
                    sleep(xSession::currentRetryCount() * BackOffWait);
                    retry;
                }
            }
            else
            {
                throw Exception::DuplicateKeyException;
            }
        }

        return primaryBatchJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupBatchJob</Name>
				<Source><![CDATA[
    private void cleanupBatchJob(BatchJob _batchJob)
    {
        if (_batchJob.Status == BatchStatus::Executing)
        {
            // Cancel the executing batch job that will then get deleted on the next recurrence lookup.
            _batchJob.Status = BatchStatus::Cancelling;
            _batchJob.RecurrenceData = SysRecurrence::setRecurrenceEndAfter(_batchJob.RecurrenceData, 1);
            _batchJob.update();
        }
        else if (_batchJob.Status != BatchStatus::Scheduled && _batchJob.Status != BatchStatus::Cancelling)
        {
            // Delete the batch job when it is not in an executable state.
            _batchJob.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>endRecurrence</Name>
				<Source><![CDATA[
    private void endRecurrence(BatchJob _batchJob)
    {
        if (_batchJob.RecurrenceData && SysRecurrence::nextTime(_batchJob.RecurrenceData) != 0)
        {
            _batchJob.RecurrenceData = SysRecurrence::setRecurrenceEndAfter(_batchJob.RecurrenceData, 1);
            _batchJob.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsExecutableBatchJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an executable batch job exists for the specified batch class.
    /// </summary>
    /// <param name = "_batchClassId">
    /// The batch class ID.
    /// </param>
    /// <returns>
    /// A Boolean value indicating whether an executable batch job exists for the specified batch class.
    /// </returns>
    [Hookable(false)]
    internal static boolean existsExecutableBatchJob(ClassId _batchClassId)
    {
        BatchJob batchJob;
        Batch batch;

        // Typical environments should only have a single record in the batch job for the specified class.
        select firstonly RecId from batchJob
            where batchJob.Status == BatchStatus::Ready
                || batchJob.Status == BatchStatus::Waiting
                || batchJob.Status == BatchStatus::Scheduled
                || batchJob.Status == BatchStatus::Executing
            join RecId from batch
                where batch.BatchJobId == batchJob.RecId
                && batch.ClassNumber == _batchClassId;

        return batchJob.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a batch exists for the specified batch class.
    /// </summary>
    /// <param name = "_batchClassId">
    /// The batch class ID.
    /// </param>
    /// <returns>
    /// A Boolean value indicating whether a batch exists for the specified batch class.
    /// </returns>
    [Hookable(false)]
    internal static boolean existsBatch(ClassId _batchClassId)
    {
        Batch batch;

        select firstonly RecId from batch
            where batch.ClassNumber == _batchClassId;

        return batch.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRecurranceTimeZone</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected final SysRecurrenceData setRecurranceTimeZone(SysRecurrenceData _recurranceDate, Timezone _timeZone)
    {
        const int TimeZoneIdx = 9;
        return conPoke(_recurranceDate, TimeZoneIdx, _timeZone);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>