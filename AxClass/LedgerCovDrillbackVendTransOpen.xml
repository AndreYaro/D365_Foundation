<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerCovDrillbackVendTransOpen</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>LedgerCovDrillbackVendTransOpen</c> class provides the Cash Flow document drillback for open vendor transactions source type.
/// </summary>
[ExportMetadata(enumStr(LedgerCovDocumentType), LedgerCovDocumentType::VendTransOpen)]
[Export(identifierStr(Dynamics.AX.Application.LedgerCovIDrillback))]
internal final class LedgerCovDrillbackVendTransOpen implements LedgerCovIDrillback
{
    private VendTransOpen vendTransOpen;
    private VendTrans vendTrans;
    private boolean hasVendTransOpenBeenRead;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>showOriginalDocument</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void showOriginalDocument(LedgerCovDrillbackContract _contract)
    {
        this.showVendTrans(this.getVendTrans(_contract), _contract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>userHasSecurityAccess</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean userHasSecurityAccess(LedgerCovDrillbackContract _contract)
    {
        return SecurityRights::construct().hasMenuItemAccess(SecurableType::MenuItemDisplay, menuItemDisplayStr(VendTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendTransOpen</Name>
				<Source><![CDATA[
    private VendTransOpen getVendTransOpen(LedgerCovDrillbackContract _contract)
    {
        if (!hasVendTransOpenBeenRead)
        {
            vendTransOpen = VendTransOpen::find(_contract.ledgerCov.TransRecId);

            hasVendTransOpenBeenRead = true;
        }

        return vendTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendTrans</Name>
				<Source><![CDATA[
    private VendTrans getVendTrans(LedgerCovDrillbackContract _contract)
    {
        if (!vendTrans)
        {
            this.getVendTransOpen(_contract);
            
            if (vendTransOpen)
            {
                vendTrans = vendTransOpen.vendTrans();
            }
            else
            {
                vendTrans = this.findVendTransFromVendTransOpenReference(_contract.ledgerCov);
            }
        }

        return vendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showVendTrans</Name>
				<Source><![CDATA[
    private void showVendTrans(VendTrans _vendTrans, LedgerCovDrillbackContract _contract)
    {
        Args args = new Args();
        args.record(_vendTrans);
        args.caller(_contract.callingForm);

        MenuFunction menuFunction = new MenuFunction(menuItemDisplayStr(VendTrans), MenuItemType::Display);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVendTransFromVendTransOpenReference</Name>
				<Source><![CDATA[
    private VendTrans findVendTransFromVendTransOpenReference(LedgerCov _ledgerCov)
    {
        VendSettlement vendSettlement;

        select firstonly TransRecId, RecId from vendSettlement
            where vendSettlement.TransOpen == _ledgerCov.TransRecId;

        if (!vendSettlement || vendSettlement.TransRecId == 0)
        {
            LedgerCovDrillback::throwOriginatingDocumentNotFoundErrorMessage();
        }

        vendTrans = VendTrans::find(vendSettlement.TransRecId);

        if (!vendTrans)
        {
            LedgerCovDrillback::throwOriginatingDocumentNotFoundErrorMessage();
        }

        return VendTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>