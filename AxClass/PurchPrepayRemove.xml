<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchPrepayRemove</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchPrepayRemove</c> class that is used to remove <c>PurchPrepayTable</c> table record for a provided <c>PurchId</c> field value.
/// </summary>
class PurchPrepayRemove extends RunBase
{
    PurchId purchId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchId</Name>
				<Source><![CDATA[
    protected PurchId parmPurchId(PurchId _purchId = purchId)
    {
        purchId = _purchId;

        return purchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the purchase prepay deletion.
    /// </summary>
    public void run()
    {
        PurchPrepayTable purchPrepayTable;

        delete_from purchPrepayTable
            where purchPrepayTable.PurchTable == purchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static PurchPrepayRemove construct()
    {
        return new PurchPrepayRemove();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS330183";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        PurchTable purchTable;
        NoYes skipPrompt;
        Object callingForm;
        PurchPrepayRemove purchPrepayRemove = PurchPrepayRemove::construct();
        boolean unsettledInvoiceExists;
        SpecTrans specTrans;
        str reversePrepayInvoiceMsg = "@AccountsPayable:PrepaymentReversalMessage";

        if (_args || _args.record() || _args.dataset() == tablenum(PurchTable))
        {
            purchTable = _args.record();
            callingForm = _args.caller();
        }
        else
        {
            throw error("@SYS25407");
        }

        // Option to skip the dialog
        if (_args.parmEnumType() == enumnum(NoYes))
        {
            skipPrompt = _args.parmEnum();
        }

        if (VendInvoiceInfoLine::existPendingPrepayInvoice(purchtable.PurchId))
        {
            throw warning("@AccountsPayable:PrepaymentErrorForPendingInvoices");
        }

        unsettledInvoiceExists = PurchPrepayTable::existUnsettledPrepayInvoice(purchTable.PurchId);

        if (unsettledInvoiceExists)
        {
            specTrans = PurchPrepayRemove::findMarkedSettlementForPrepayInvoice(purchTable.PurchId, true);

            if (specTrans.RecId)
            {
                reversePrepayInvoiceMsg = "@AccountsPayable:PrepaymentReversalWhenPrepayInvMarkedForSettlementMessage";
            }

            if (skipPrompt || Box::okCancel(reversePrepayInvoiceMsg, DialogButton::Ok, PurchPrepayRemove::description()) == DialogButton::Ok)
            {
                ttsbegin;
                if (specTrans.RecId)
                {
                    specTrans.delete();
                }
                PurchPrepayRemove::reversePrepaymentInvoice(purchTable.PurchId);
                ttscommit;
                skipPrompt = true;
            }
        }

        // Main method are bound to client due to calls on formDataSource. The update itself are called from MainOnServer which is bound to server.
        if (skipPrompt || (!unsettledInvoiceExists && Box::yesNo(strfmt("@SYS330179", purchTable.PurchId), DialogButton::No, PurchPrepayRemove::description()) == DialogButton::Yes))
        {
            purchPrepayRemove.parmPurchId(purchTable.PurchId);
            purchPrepayRemove.runOperation();

            PurchIPrepayControls caller = callingForm as PurchIPrepayControls;
            if (caller != null)
            {
                caller.updatePrepaymentControls();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reversePrepaymentInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Reverses prepayment invoices posted for a given purchase order.
    /// </summary>
    /// <param name="_purchId">
    ///   A purchase order ID value.
    /// </param>
    /// <returns>
    ///   True, if prepayment invoices don't exist or were reversed successfully.
    ///   False, if prepayment cannot be removed due to being settled.
    /// </returns>
    public static boolean reversePrepaymentInvoice(PurchId _purchId)
    {
        PurchPrepayTable purchPrepayTable = PurchPrepayTable::findPurchId(_purchId, true);

        if (purchPrepayTable)
        {
            if (purchPrepayTable.PrepayApplicationRemaining == 0.0)
            {
                //Reverses the prepayment invoices which have not been paid or settled
                ttsBegin;
                PurchPrepayTable::reverseUnpaidPostedAdvances(_purchId);
                purchPrepayTable.Value = 0.0;
                purchPrepayTable.PrepayLimit = 0.0;
                purchPrepayTable.PrepayAvailable = 0.0;
                purchPrepayTable.Description = '';
                purchPrepayTable.PrepayCategoryId = 0;
                purchPrepayTable.update();
                ttsCommit;
            }
            else
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMarkedSettlementForPrepayInvoice</Name>
				<Source><![CDATA[
    public static SpecTrans findMarkedSettlementForPrepayInvoice(PurchId _purchId, boolean _forUpdate = false)
    {
        VendInvoiceJour vendInvoiceJour;
        VendInvoiceTrans vendInvoiceTrans;
        VendTrans vendTrans;
        VendTransOpen vendTransOpen;
        SpecTrans specTrans;

        specTrans.selectForUpdate(_forUpdate);

        select RecId from specTrans
            exists join vendTransOpen
                where vendTransOpen.DataAreaId == specTrans.RefCompany
                    && vendTransOpen.TableId == specTrans.RefTableId
                    && vendTransOpen.RecId == specTrans.RefRecId
            exists join vendTrans
                where vendTrans.RecId == vendTransOpen.RefRecId
            exists join vendinvoiceJour
                where vendInvoiceJour.PurchId == _purchId
                    && vendInvoiceJour.InvoiceType == PurchInvoiceType::VendorAdvance
                    && vendInvoiceJour.LedgerVoucher == vendTrans.Voucher
                    && vendInvoiceJour.InvoiceAccount == vendTrans.AccountNum
                    && vendInvoiceJour.InvoiceDate == vendTrans.TransDate
            exists join vendInvoiceTrans
                where vendInvoiceTrans.PurchId == vendInvoiceJour.PurchId
                    && vendInvoiceTrans.InvoiceDate == vendInvoiceJour.InvoiceDate
                    && vendInvoiceTrans.InvoiceId == vendInvoiceJour.InvoiceId
                    && vendInvoiceTrans.NumberSequenceGroup == vendInvoiceJour.NumberSequenceGroup
                    && vendInvoiceTrans.InternalInvoiceId == vendInvoiceJour.InternalInvoiceId;

        return specTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>