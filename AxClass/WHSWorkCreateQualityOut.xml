<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkCreateQualityOut</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkCreateQualityOut</c> class contains logic for the Quality Out work creation process.
/// </summary>
internal final class WHSWorkCreateQualityOut extends WHSWorkCreate
{
    private WHSWorkCreateId             workCreateId;
    private InventDimId                 startInventDim;
    private InventQty                   updateQty;
    private InventQualityOrderTable     qualityOrder;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the temp table used to create work.
    /// </summary>
    [Hookable(false)]
    public void createTempTable()
    {
        // Set default information
        tmpWorkLine.WorkCreateId     = workCreateId;
        tmpWorkLine.WorkType         = WHSWorkType::Put;
        tmpWorkLine.WorkTransType    = WHSWorkTransType::QualityOrder;
    
        // Set Dim values based on the starting dim where the inventory is located.
        InventDim inventDim = InventDim::find(startInventDim);
    
        this.parmStartLocationId(inventDim.wMSLocationId);
        this.parmTargetLicensePlateId(inventDim.LicensePlateId);
        tmpWorkLine.InventBatchId   = inventDim.inventBatchId;
        tmpWorkLine.StartLocationId = inventDim.wMSLocationId;
    
        // We need to remove location and below dimensions from inventDim
        inventDim.clearLocationAndBelowDim(qualityOrder.ItemId);
        inventDim = InventDim::findOrCreate(inventDim);
        tmpWorkLine.InventDimId     = inventDim.inventDimId;

        tmpWorkLine.ItemId      = qualityOrder.itemId;
        tmpWorkLine.OrderNum    = qualityOrder.QualityOrderId;

        tmpWorkLine.OriginType  = WHSOriginType::Work;
        tmpWorkLine.OriginRefId = qualityOrder.QualityOrderId;
    
        this.createTempLine(tmpWorkLine, updateQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common _common, WHSWorkCreateId _workCreateId = '')
    {
        qualityOrder = _common;
    
        workCreateId = _workCreateId ? _workCreateId : NumberSeq::newGetNum(WHSParameters::numRefWHSWorkCreateId()).num();
    
        super(qualityOrder, workCreateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a new <c>WHSWorkCreateQualityOut</c> class.
    /// </summary>
    /// <param name = "_common">The record to use during initialization.</param>
    /// <param name = "_workCreateId">The Work Create Id.</param>
    /// <returns>An instance of the <c>WHSWorkCreateQualityOut</c> class.</returns>
    [Hookable(false)]
    internal static WHSWorkCreateQualityOut newFromParms(Common _common, WHSWorkCreateId _workCreateId = '')
    {
        return new WHSWorkCreateQualityOut(_common, _workCreateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartInventDim</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final internal InventDimId parmStartInventDim(InventDimId _inventDimId = startInventDim)
    {
        startInventDim = _inventDimId;
    
        return startInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final internal InventQty parmUpdateQty(InventQty _updateQty = updateQty)
    {
        updateQty = _updateQty;
    
        return updateQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkCreateId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public WHSWorkCreateId parmWorkCreateId(WHSWorkCreateId _workCreateId = workCreateId)
    {
        workCreateId = _workCreateId;
    
        return workCreateId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>