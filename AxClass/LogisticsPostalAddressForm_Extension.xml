<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LogisticsPostalAddressForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formstr(LogisticsPostalAddress))]
public final class LogisticsPostalAddressForm_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ExtensionLogisticsPostalAddressFormOnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates <c>LogisticsPostalAddress</c> form, and the number sequence group is visible when called from Legal entity form.
    /// </summary>
    /// <param name = "sender">The <c>FormRun</c>.</param>
    /// <param name = "e">The event arguments.</param>
    [FormEventHandler(formStr(LogisticsPostalAddress), FormEventType::Initialized)]
    public void ExtensionLogisticsPostalAddressFormOnInitialized(xFormRun sender, FormEventArgs e)
    {
        if (TaxIntegrationUtils::isMultipleTaxIdEnabled())
        {
            FormRun callerObject = this.args().caller();
            boolean isCalledFromLegalEntity = callerObject && callerObject.name() == formStr(OMLegalEntity);
            General_NumberSequenceGroupId.visible(isCalledFromLegalEntity);
            General_DisregardNumberSequenceGroupId.visible(isCalledFromLegalEntity);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxRegistrationTypeApplicabilityRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the state of Number sequence group control as editable when the Registration category is VATID.
    /// </summary>
    /// <param name = "_sender">The <c>FormDataSource</c>.</param>
    /// <param name = "_e">The event arguments.</param>
    [FormDataSourceEventHandler(formDataSourceStr(LogisticsPostalAddress, TaxRegistration), FormDataSourceEventType::Activated)]
    public void validateTaxRegistrationTypeApplicabilityRule(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        #ISOCountryRegionCodes

        if (TaxIntegrationUtils::isMultipleTaxIdEnabled())
        {
            TaxRegistrationLegislationTypes taxRegistrationLegislationTypes;

            select firstonly taxRegistrationLegislationTypes
                where taxRegistrationLegislationTypes.TaxRegistrationTypeApplicabilityRule == TaxRegistration.TaxRegistrationTypeApplicabilityRule;

            boolean taxRegistrationTypeIsVATID = taxRegistrationLegislationTypes.RecId != 0
                && taxRegistrationLegislationTypes.TaxRegistrationTypesList == TaxRegistrationTypesList::TAXID;
            General_NumberSequenceGroupId.enabled(taxRegistrationTypeIsVATID && !TaxRegistration.DisregardNumberSequenceGroupId);
            General_DisregardNumberSequenceGroupId.enabled(taxRegistrationTypeIsVATID
                && LogisticsAddressCountryRegion::find(
                    MultipleTaxIdReportingHelper::getCountryRegionIDFromTaxRegistrationRecId(
                        TaxRegistration.RecId)).ISOcode == #isoIT);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>disregardNumberSequenceGroupId_OnModified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(LogisticsPostalAddress, TaxRegistration, DisregardNumberSequenceGroupId), FormDataFieldEventType::Modified)]
    public void disregardNumberSequenceGroupId_OnModified(FormDataObject _sender, FormDataFieldEventArgs _args)
    {
        _sender.datasource().active();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>