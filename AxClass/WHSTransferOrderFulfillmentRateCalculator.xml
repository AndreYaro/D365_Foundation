<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSTransferOrderFulfillmentRateCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSTransferOrderFulfillmentRateCalculator</c> class is used for calculations of values used for the fulfillment rate validation for a transfer order.
/// </summary>
public class WHSTransferOrderFulfillmentRateCalculator implements WHSIFulfillmentRateValidationCalculator
{
    protected InventTransferId transferId; 
   
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateQuantities</Name>
				<Source><![CDATA[
    public WHSFulfillmentRateQuantities calculateQuantities()
    {
        InventHandlingQty orderQuantity		= this.calculateTotalQuantity();
        InventHandlingQty fulfilledQuantity = this.calculateFulfilledQuantity();

        return WHSFulfillmentRateQuantities::newFromQuantities(orderQuantity, fulfilledQuantity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalQuantity</Name>
				<Source><![CDATA[
    private InventHandlingQty calculateTotalQuantity()
    { 
        InventTransferLine	inventTransferLine;

        if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
        {
            InventHandlingQty	totalHandlingQty;

            while select ItemId, sum(PdsCWQtyTransfer), sum(QtyTransfer) from inventTransferLine
                group by inventTransferLine.ItemId
				where inventTransferLine.TransferId == transferId
                    && (inventTransferLine.PdsCWQtyTransfer > 0 
                        || inventTransferLine.QtyTransfer > 0)
            {
                boolean isCwItem = PdsGlobal::pdsIsCWItem(inventTransferLine.ItemId);
                totalHandlingQty += isCwItem ? inventTransferLine.PdsCWQtyTransfer : inventTransferLine.QtyTransfer;
            }

            return totalHandlingQty;
        }
        else
        {
            select sum(QtyTransfer) from inventTransferLine
				where inventTransferLine.TransferId == transferId;

            return inventTransferLine.QtyTransfer;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateFulfilledQuantity</Name>
				<Source><![CDATA[
    private InventHandlingQty calculateFulfilledQuantity()
    {
        InventTrans						inventTrans;
        InventTransOriginTransferShip	inventTransOriginTransferShip;
        InventTransferLine				inventTransferLine;

        if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
        {
            InventHandlingQty	fulfilledHandlingQty;

            while select ItemId, sum(PdsCWQty), sum(Qty) from inventTrans
                group by inventTrans.ItemId
                where (inventTrans.StatusIssue == StatusIssue::ReservPhysical
					|| inventTrans.StatusIssue == StatusIssue::Picked
					|| inventTrans.StatusIssue == StatusIssue::Deducted
					|| inventTrans.StatusIssue == StatusIssue::Sold)
				 exists join inventTransOriginTransferShip
					where inventTransOriginTransferShip.InventTransOrigin == inventTrans.inventTransOrigin
						&& inventTransOriginTransferShip.TransferShipId == transferId
				 exists join inventTransferLine
					where inventTransferLine.TransferId == transferId
						&& inventtransferline.LineNum == inventTransOriginTransferShip.TransferShipLineNum
						&& (inventTransferLine.PdsCWQtyTransfer > 0
							|| inventTransferLine.QtyTransfer > 0)
            {
                boolean isCwItem = PdsGlobal::pdsIsCWItem(inventTrans.ItemId);
                fulfilledHandlingQty += isCwItem ? inventTrans.PdsCWQty : inventTrans.Qty;
            }

            return -fulfilledHandlingQty;
        }
		else
        {
			select sum(Qty) from inventTrans
				where (inventTrans.StatusIssue == StatusIssue::ReservPhysical
					|| inventTrans.StatusIssue == StatusIssue::Picked
					|| inventTrans.StatusIssue == StatusIssue::Deducted
					|| inventTrans.StatusIssue == StatusIssue::Sold)
			 exists join inventTransOriginTransferShip
				where inventTransOriginTransferShip.InventTransOrigin == inventTrans.inventTransOrigin
					&& inventTransOriginTransferShip.TransferShipId == transferId
			 exists join inventTransferLine
				where inventTransferLine.TransferId == transferId
					&& inventtransferline.LineNum == inventTransOriginTransferShip.TransferShipLineNum;

            return -inventTrans.Qty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAmounts</Name>
				<Source><![CDATA[
    public WHSFulfillmentRateAmounts calculateAmounts()
    {        
        return WHSFulfillmentRateAmounts::newFromAmounts(0, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTransferId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new instance of the <c>WHSTransferOrderFulfillmentRateCalculator</c> class.
    /// </summary>
    /// <param name = "_transferId">The transfer Id of the transfer order.</param>
    /// <returns>A new instance of the <c>WHSTransferOrderFulfillmentRateCalculator</c> class</returns>
    public static WHSTransferOrderFulfillmentRateCalculator newFromTransferId(InventTransferId _transferId)
    {
        WHSTransferOrderFulfillmentRateCalculator calculator = WHSTransferOrderFulfillmentRateCalculator::construct();
        
        calculator.transferId = _transferId;
        
        return calculator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static WHSTransferOrderFulfillmentRateCalculator construct()
    {
        return new WHSTransferOrderFulfillmentRateCalculator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>