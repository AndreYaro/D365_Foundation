<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCatalogAffiliationDiscountsWorkspaceFilterStructureStrategy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailCatalogAffiliationDiscountsWorkspaceFilterStructureStrategy</c> class applies a <c>SysIFilterStructureItem</c> class
/// to a <c>SysIQueryable</c> class.
/// When Blank channel and category filter applies to Pricing and Discount workspace,
/// disable RetailPeriodicDiscountLine for blank category filter, but don't do anything for Channel filters.
/// </summary>
[
// Retail Prices and discount workspace queries: RetailCatalogDiscounts and RetailAffiliationDiscounts.
SysFilterExtension(SysQueryableTypeEnum::Query, SysFilterValueTypeEnum::Integer, queryStr(RetailCatalogDiscounts)),
SysFilterExtension(SysQueryableTypeEnum::Query, SysFilterValueTypeEnum::Integer, queryStr(RetailAffiliationDiscounts))
]
public class RetailCatalogAffiliationDiscountsWorkspaceFilterStructureStrategy extends SysFilterStructureStrategyQuery implements SysIFilterStructureStrategy
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>resolve</Name>
				<Source><![CDATA[
    protected boolean resolve(SysIFilterValueType _filterValueType)
    {
        boolean result = false;
        if (_filterValueType.parmType() == SysFilterValueTypeEnum::Integer)
        {
            // if EcoResCategoryHierarchy filter has Equal operator set then we enable the EcoResProductCategory datasource; otherwise we disable it and show all records without categories
            if (_filterValueType.parmTypeIdentifier() == extendedTypeNum(EcoResCategoryHierarchyId))
            {
                QueryBuildDataSource retailPeriodicDiscountLineQdbs = this.getQueryBuildDataSource(tableNum(RetailPeriodicDiscountLine));
                QueryBuildDataSource ecoResCategoryQdbs = this.getQueryBuildDataSource(tableNum(EcoResCategory));

                if (filterStructureItem.parmOperator() == SysFilterOperator::Equal)
                {
                    retailPeriodicDiscountLineQdbs.enabled(true);
                    this.addLinkFromTableToFilter(ecoResCategoryQdbs, fieldNum(EcoResCategory, CategoryHierarchy), filterStructureItem.parmOperator());
                }
                else
                {
                    retailPeriodicDiscountLineQdbs.enabled(false);
                }
                result = true;
            }
            else if (_filterValueType.parmTypeIdentifier() == extendedTypeNum(EcoResCategoryNestedSetLeft))
            {
                QueryBuildDataSource ecoResCategoryQdbs = this.getQueryBuildDataSource(tableNum(EcoResCategory));
                this.addLinkFromTableToFilter(ecoResCategoryQdbs, fieldNum(EcoResCategory, NestedSetLeft), filterStructureItem.parmOperator());
                result = true;
            }
            else if (_filterValueType.parmTypeIdentifier() == extendedTypeNum(EcoResCategoryNestedSetRight))
            {
                QueryBuildDataSource ecoResCategoryQdbs = this.getQueryBuildDataSource(tableNum(EcoResCategory));
                this.addLinkFromTableToFilter(ecoResCategoryQdbs, fieldNum(EcoResCategory, NestedSetRight), filterStructureItem.parmOperator());
                result = true;
            }
            else if (_filterValueType.parmTypeIdentifier() == extendedTypeNum(RecId))
            {
                // Given Catalog, Affiliation and Loyalty price groups for discounts are not associated with channel, so skip any action with Channel filtering.
                result = true;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryBuildDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>QueryBuildDataSource</c> object from the query.
    /// </summary>
    /// <param name = "_tableId">The table id of the datasource.</param>
    /// <returns>The <c>QueryBuildDataSource</c> object if found; otherwise throw an error.</returns>
    public QueryBuildDataSource getQueryBuildDataSource(TableId _tableId)
    {
        Query _query = this.query;
        QueryBuildDataSource qdbs = _query.dataSourceTable(_tableId);
        if (!qdbs)
        {
            error(strFmt("@SYS89000", tableId2Name(_tableId), _query.name()));
        }
        return qdbs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLinkFromTableToFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a link to the <c>SysFilterTable</c> table.
    /// </summary>
    /// <param name="_relatedTableDataSource">
    /// The <c>QueryBuildDataSource</c> class to which the link should be added.
    /// </param>
    /// <param name="_fieldId">
    /// The <c>FieldId</c> class for which the link should be added.
    /// </param>
    /// <param name="_filterOperator">
    /// The <c>SysFilterOperator</c> used in the range.
    /// </param>
    public void addLinkFromTableToFilter(
            QueryBuildDataSource _relatedTableDataSource,
            FieldId _fieldId,
            SysFilterOperator _filterOperator = SysFilterOperator::Equal)
    {
        QueryBuildRange qbr = SysQueryBase::findOrCreateRange(_relatedTableDataSource, _fieldId);
        qbr.status(RangeStatus::Hidden);
        qbr.value(strfmt('(((%1.%2 %3 %4.%5) || (%4.%6 != %7)))',
                _relatedTableDataSource.name(),
                fieldId2Name(_relatedTableDataSource.table(), _fieldId),
                SysFilterOperatorHelper::operator2SqlStr(_filterOperator),
                filterDatasource.name(),
                fieldId2Name(filterMetadata.parmTypeId(), filterMetadata.parmValue(filterStructureItem.parmValueType().parmType()), filterStructureItem.parmId()),
                fieldId2Name(filterMetadata.parmTypeId(), filterMetadata.parmValueResolutionMethod(), filterStructureItem.parmId()),
                int2Str(SysFilterValueResolutionMethod::None)));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>