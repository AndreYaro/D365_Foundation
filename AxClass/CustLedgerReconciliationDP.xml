<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustLedgerReconciliationDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustLedgerReconciliationDP</c> class handles all the business logic to display data on the
///    <c>CustLedgerReconciliation</c> SSRS report.
/// </summary>
/// <remarks>
/// In Microsoft Dynamics AX 2012 R2 this class was changed to derive from the
/// <c>SRSReportDataProviderPreProcessTempDB</c> class instead of the <c>SRSReportDataProviderPreProcess</c>
/// class to improve performance. See <see cref="http://go.microsoft.com/fwlink/?LinkId=335910" />
/// for more information.
/// </remarks>
[
    SRSReportParameterAttribute(classstr(CustLedgerReconciliationContract))
]
public class CustLedgerReconciliationDP extends SrsReportDataProviderPreProcessTempDB
{
    CustTrans custTrans;
    CustLedgerReconciliationTmp custLedgerReconciliationTmp;
    CustLedgerReconciliationContract contract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustLedgerReconciliationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the data to display from the <c>CustLedgerReconciliationTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///    The <c>CustLedgerReconciliationTmp</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute('CustLedgerReconciliationTmp')]
    public CustLedgerReconciliationTmp getCustLedgerReconciliationTmp()
    {
        select custLedgerReconciliationTmp;

        return custLedgerReconciliationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipReportTransaction</Name>
				<Source><![CDATA[
    public boolean parmSkipReportTransaction(boolean _skipReportTransaction = skipReportTransaction)
    {
        if (SsrsPreProcessReportSkipDefaultDatabaseTrxScope::instance().isEnabled())
        {
            skipReportTransaction = true;
        }

        return skipReportTransaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initService</Name>
				<Source><![CDATA[
    private void initService(CustReport_LedgerReconciliation custReport_LedgerReconciliation)
    {
        custReport_LedgerReconciliation.parmFromDate(contract.parmFromDate());
        custReport_LedgerReconciliation.parmToDate(contract.parmToDate());
        custReport_LedgerReconciliation.parmFromVoucher(contract.parmFromVoucher());
        custReport_LedgerReconciliation.parmToVoucher(contract.parmToVoucher());
        custReport_LedgerReconciliation.parmIncludeDetails(contract.parmIncludeDetails());
        custReport_LedgerReconciliation.parmFromPostingProfile(contract.parmFromPostingProfile());
        custReport_LedgerReconciliation.parmToPostingProfile(contract.parmToPostingProfile());
        custReport_LedgerReconciliation.parmShowDifferencesOnly(contract.parmShowDifferencesOnly());
        custReport_LedgerReconciliation.parmCurrencySelection(contract.parmCurrencySelection());
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the required data for the <c>CustLedgerReconciliation</c> SSRS report.
    /// </summary>
    public void processReport()
    {
        CustReport_LedgerReconciliation custReport_LedgerReconciliation;

        contract = this.parmDataContract() as CustLedgerReconciliationContract;
        custReport_LedgerReconciliation = new CustReport_LedgerReconciliation(custLedgerReconciliationTmp);

        this.initService(custReport_LedgerReconciliation);
        custLedgerReconciliationTmp = custReport_LedgerReconciliation.processCustLedgerReconciliationReport(this.parmUserConnection());

        CustLedgerReconciliationAggregateTmp::aggregateCustLedgerReconciliationTmp(custLedgerReconciliationTmp, this.parmUserConnection());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>