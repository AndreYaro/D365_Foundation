<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccountingDistViewModel_MultiHeader_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// View model to display distributions of multiple headers in one form.
/// </summary>
[SysClassNameAttribute(classStr(AccountingDistributionFormView))]
class AccountingDistViewModel_MultiHeader_RU extends AccountingDistributionViewModel implements SysIConditionalExtension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createDocumentProxy</Name>
				<Source><![CDATA[
    protected SourceDocumentProxy_MultiHeader_RU createDocumentProxy(recId _headerRecID, boolean _createDocumentAmountList = true)
    {
        return SourceDocumentProxy_MultiHeader_RU::construct(this.parmRootImplementation(), _headerRecID, _createDocumentAmountList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDisplayFromView</Name>
				<Source><![CDATA[
    private AccDistFormDisplay_MultiHeader_RU getDisplayFromView(AccountingDistributionView _view)
    {
        AccountingDistributionFormView view = _view as AccountingDistributionFormView;
        FormRun formRun = view.parmFormRun();
        return  (formRun.args()              &&
                formRun.args().parmObject() &&
                formRun.args().parmObject() is AccDistFormDisplay_MultiHeader_RU) ? formRun.args().parmObject() : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isApplicableTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether an extension can be applied under the specified extension context.
    /// </summary>
    /// <param name="_value">
    /// The extension context.
    /// </param>
    /// <returns>
    /// true if the extension can be applied in the specified extension context; otherwise, false.
    /// </returns>
    boolean isApplicableTo(AnyType _value)
    {
        Object value = _value;
        AccountingDistributionFormView view = value as AccountingDistributionFormView;
        return  this.getDisplayFromView(view) ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRootImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a record that identifies a set of headers. The record should implement <c>SourceDocumentSet_RU</c> map methods.
    /// </summary>
    /// <returns>A root implementation record.</returns>
    Common parmRootImplementation()
    {
        return this.getDisplayFromView(accountingDistributionFormView).parmRootImplementation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>