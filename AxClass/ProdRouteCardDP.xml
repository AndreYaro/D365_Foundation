<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdRouteCardDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdRouteCardDP</c> class is the RDP class for the <c>ProdRouteCard</c>Microsoft SQL Server
/// Reporting Services report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(ProdRouteCard))
]
class ProdRouteCardDP extends SRSReportDataProviderBase
{
    DocuRef                 docuRef;
    ProdTable               prodTable;
    ProdRoute               prodRoute;
    InventQty               primaryQty;
    Integer                 totalCardNo;
    Integer                 thisCardNo;
    BarcodeSetupId          barcodeSetupId;
    BarcodeSetup            barcodeSetup;
    Barcode                 jobBarCode;
    JmgJobId                queueBeforeJobId;
    JmgJobId                setupJobId;
    JmgJobId                processJobId;
    JmgJobId                overlapJobId;
    JmgJobId                transportJobId;
    JmgJobId                queueAfterJobId;
    Integer                 jobidLength;
    Integer                 queueBeforeVisibility;
    Integer                 setupVisibility;
    Integer                 processVisibility;
    Integer                 overlapVisibility;
    Integer                 transportVisibility;
    Integer                 queueAfterVisibility;
    Integer                 docuVisibility;
    DocuRefSearch           docuRefSearch;
    ProdRouteCardTmp        prodRouteCardTmp;
    JmgProdParametersDim    jmgProdParametersDim;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>barcodeString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the barcode string.
    /// </summary>
    /// <param name="_jobId">
    /// The type of the job.
    /// </param>
    /// <returns>
    /// The barcode string value for the specified job type.
    /// </returns>
    protected BarCodeString barcodeString(JmgJobId _jobId)
    {
        // Shop Floor Control begin
        BarCodeString ret;

        if (_jobId)
        {
            if (barcodeSetup.validateBarcode(strupr(_jobId)))
            {
                jobBarCode.string(true,strupr(_jobId));
                jobBarCode.encode();
                ret = jobBarCode.barcodeStr();
            }
            else
            {
                throw(error(strfmt("@SYS41409", jobBarCode.barcodeType(), strupr(_jobId))));
            }
        }
        else
        {
            ret = '';
        }

        return ret;
        // Shop Floor Control end
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProdRouteCardTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Queries the temporary table and retrieves the data table to the calling method.
    /// </summary>
    /// <returns>
    /// The required report data from temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(ProdRouteCardTmp))
    ]
    public ProdRouteCardTmp getProdRouteCardTmp()
    {
        select prodRouteCardTmp;
        return prodRouteCardTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourceGroup</Name>
				<Source><![CDATA[
        private WrkCtrId getResourceGroup()
    {
        WrkCtrCapRes wrkCtrCapRes;

        select firstonly WrkCtrId from wrkCtrCapRes
            where   wrkCtrCapRes.OprPriority    == prodRoute.OprPriority    &&
                    wrkCtrCapRes.OprNum         == prodRoute.OprNum         &&
                    wrkCtrCapRes.RefId          == prodRoute.ProdId         &&
                    wrkCtrCapRes.RecordState    == WrkCtrCapResRecordState::Committed &&
                    wrkCtrCapRes.RefType        == WrkCtrCapRefType::Production;

        return wrkCtrCapRes.WrkCtrId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the visibility of each job.
    /// </summary>
    /// <param name="_routeJobType">
    /// The type of the job.
    /// </param>
    /// <returns>
    /// false if the bar code type is NoBarcode; true.
    /// </returns>
    private integer getVisibility(RouteJobType _routeJobType)
    {
        if (jobBarCode.barcodeType() != BarcodeType::NoBarcode)
        {
            if (jmgProdParametersDim.allowJobType(_routeJobType))
            {
                return 1;
            }
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Visibility for the job types.
    /// </summary>
    private void init()
    {
        // Shop Floor Control begin

        #DEFINE.DefaultJobidLen(10)

        DictType dictType = new DictType(new DictField(tablenum(ProdRoute), fieldnum(ProdRoute, JobIdSetup)).typeId());

        while ((! dictType.stringLen()) && dictType.extend())
        {
            dictType = new DictType(dictType.extend());
        }

        if (dictType.stringLen())
        {
            jobidLength = dictType.stringLen();
        }
        else
        {
            jobidLength = #DefaultJobidLen;
        }

        JmgProdParameters jmgProdParameters = JmgProdParameters::find();

        if (jmgProdParameters.ProdParamInventDimLookup  == ProdParamInventDimLookup::Company)
        {
            jmgProdParametersDim = JmgProdParametersDim::find(InventDim::inventDimIdBlank());
        }
        else
        {
            select
                maxof(AllowProdQueueBefore),
                maxof(AllowProdSetup),
                maxof(AllowProdProcess),
                maxof(AllowProdOverlap),
                maxof(AllowProdTransport),
                maxof(AllowProdQueueAfter)
            from jmgProdParametersDim;
        }
        // Shop Floor Control end

        // Shop Floor Control begin
        barcodeSetupId          = JmgParameters::find().getBarcodeSetupId();
        barcodeSetup            = BarcodeSetup::find(barcodeSetupId);
        jobBarCode              = barcodeSetup.barcode();
        // Shop Floor Control end

        queueBeforeVisibility   = this.getVisibility(RouteJobType::QueueBefore);
        queueAfterVisibility    = this.getVisibility(RouteJobType::QueueAfter);
        setupVisibility         = this.getVisibility(RouteJobType::Setup);
        processVisibility       = this.getVisibility(RouteJobType::Process);
        overlapVisibility       = this.getVisibility(RouteJobType::Overlap);
        transportVisibility     = this.getVisibility(RouteJObTYpe::Transport);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the required data and inserts it into the temporary table.
    /// </summary>
    public  void insertValues()
    {
        //Projtable details section
        prodRouteCardTmp.InventRefId            = prodTable.InventRefId;
        prodRouteCardTmp.InventRefType          = prodTable.InventRefType;
        prodRouteCardTmp.ProdId                 = prodTable.ProdId;
        prodRouteCardTmp.ItemId                 = prodTable.ItemId;
        prodRouteCardTmp.ItemName               = prodTable.itemName();
        prodRouteCardTmp.Name                   = prodTable.Name;
        prodRouteCardTmp.QtyStUp                = prodTable.QtyStUp;
        prodRouteCardTmp.StUpDate               = prodTable.StUpDate;
        prodRouteCardTmp.DlvDate                = prodTable.DlvDate;
        prodRouteCardTmp.CardNo                 = strfmt("@SYS25607", thisCardNo, totalCardNo);
        prodRouteCardTmp.ReferenceName          = prodTable.referenceName();

        //ProdRoute table Details
        prodRouteCardTmp.OperationName          = RouteOprTable::find(prodRoute.OprId).Name;
        prodRouteCardTmp.OprId                  = prodRoute.OprId;
        prodRouteCardTmp.OprNum                 = prodRoute.OprNum;
        prodRouteCardTmp.OprPriority            = prodRoute.OprPriority;
        prodRouteCardTmp.CalcProc               = prodRoute.CalcProc;
        prodRouteCardTmp.CalcSetUp              = prodRoute.CalcSetUp;
        prodRouteCardTmp.ResourceGroup          = this.getResourceGroup();

        if (prodRoute.OprPriority == RouteOprPriority::Primary)
        {
            prodRouteCardTmp.QtyPrimary         = prodRoute.CalcQty;
        }

        prodRouteCardTmp.FromDate               = prodRoute.FromDate;
        prodRouteCardTmp.FromTime               = prodRoute.FromTime;
        prodRouteCardTmp.ToDate                 = prodRoute.ToDate;
        prodRouteCardTmp.ToTime                 = prodRoute.ToTime;

        //BarCode Pre
        prodRouteCardTmp.QueueBefore            = queueBeforeJobId;
        prodRouteCardTmp.Setup                  = setupJobId;
        prodRouteCardTmp.Process                = processJobId;
        prodRouteCardTmp.Overlap                = overlapJobId;
        prodRouteCardTmp.Transport              = transportJobId;
        prodRouteCardTmp.QueueAfter             = queueAfterJobId;

        prodRouteCardTmp.QueueBeforeBarCode     = this.barcodeString(queueBeforeJobId);
        prodRouteCardTmp.OverlapBarCode         = this.barcodeString(overlapJobId);
        prodRouteCardTmp.SetupBarCode           = this.barcodeString(setupJobId);
        prodRouteCardTmp.ProcessBarCode         = this.barcodeString(processJobId);
        prodRouteCardTmp.TransportBarCode       = this.BarcodeString(transportJobId);
        prodRouteCardTmp.QueueAfterBarCode      = this.BarcodeString(queueAfterJobId);

        prodRouteCardTmp.DocuName               = docuRef.Name;
        prodRouteCardTmp.DocTypeId              = docuRef.TypeId;
        prodRouteCardTmp.Notes                  = docuref.Notes;
        prodRouteCardTmp.TypeVisibility         = docuVisibility;

        ProdRouteCardTmp.FontName               = barcodeSetup.FontName;
        ProdRouteCardTmp.FontSize               = barcodeSetup.fontSize;
        ProdRouteCardTmp.QueueBeforeVisibility  = queueBeforeVisibility;
        ProdRouteCardTmp.SetupVisibility        = setupVisibility;
        ProdRouteCardTmp.ProcessVisibility      = processVisibility;
        ProdRouteCardTmp.OverlapVisibility      = overlapVisibility;
        ProdRouteCardTmp.TransportVisibility    = transportVisibility;
        ProdRouteCardTmp.QueueAfterVisibility   = queueAfterVisibility;
        prodRouteCardTmp.insert();

        prodRouteCardTmp.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// This method calls sub methods, depending on the parameters that are passed to it.
    /// </remarks>
    Public void processReport()
    {
        // Shop Floor Control begin
        ProdRouteJob            prodRouteJob;

        this.init();
        // Shop Floor Control end
        QueryRun qr = new QueryRun(this.parmQuery());

        while (qr.next())
        {
            prodTable              = qr.get(tablenum(ProdTable));
            ProdRouteIterator iter = new ProdRouteIterator(prodTable.ProdId);
            thisCardNo             = 1;
            totalCardNo            = iter.qty();

            while (iter.qty())
            {
                boolean isRecordAdded = false;
                prodRoute = iter.next();
                try
                {
                    ProdRouteOprIterator oprIter = new ProdRouteOprIterator(prodRoute.ProdId, prodRoute.OprNum);
                    while (oprIter.qty())
                    {
                        prodRoute       = oprIter.next();
                        isRecordAdded   = false;
                        // Shop Floor Control begin
                        if (jobBarCode.barcodeType() != BarcodeType::NoBarcode)
                        {
                            queueBeforeJobId    = '';
                            setupJobId          = '';
                            processJobId        = '';
                            overlapJobId        = '';
                            transportJobId      = '';
                            queueAfterJobId     = '';

                            if (JmgProdParameters::find().StampLevel == JmgStampLevel::Job)
                            {
                                while select JobId, JobType from prodRouteJob
                                       where prodRouteJob.ProdId        == prodRoute.ProdId
                                          && prodRouteJob.OprNum        == prodRoute.OprNum
                                          && prodRouteJob.OprPriority   == prodRoute.OprPriority
                                {
                                    JmgTermJob_Prod prodJob = JmgTermJob::construct(prodRouteJob.JobId);
                                    if (JmgProdParametersDim::find(prodJob.siteInventDimId()).allowJobType(prodRouteJob.JobType))
                                    {
                                        this.setJobId(prodRouteJob.JobType,prodRouteJob.JobId);
                                    }
                                }
                            }
                            else
                            {
                                this.setJobId(RouteJobType::Setup,prodRoute.JobIdSetup);
                                this.setJobId(RouteJobType::Process,prodRoute.JobIdProcess);
                            }

                            this.insertValues();
                            isRecordAdded = true;
                        }

                        // Shop Floor Control end
                        docuRefSearch =  DocuRefSearch::newCommon(prodRoute);
                        while (docuRefSearch.next())
                        {
                            docuRef = docuRefSearch.docuRef();
                            docuVisibility = 1;
                            this.insertValues();
                            isRecordAdded = true;
                            docuVisibility = 0;
                        }

                        if (!isRecordAdded)
                        {
                            this.insertValues();
                            isRecordAdded = true;
                        }
                    }

                    if (!isRecordAdded)
                    {
                        this.insertValues();
                        isRecordAdded = true;
                    }

                    thisCardNo += 1;
                }
                catch(Exception::Deadlock)
                {
                    error("@SYS25609");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJobId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the job ID to the specified job type.
    /// </summary>
    /// <param name="_type">
    /// The type of the job.
    /// </param>
    /// <param name="_jobId">
    /// The job ID for the current job type.
    /// </param>
    Private void setJobId(RouteJobType _type, JmgJobId _jobId)
    {
        // Shop Floor Control begin
        switch (_type)
        {
            case RouteJobType::Setup :
                setupJobId = _jobId;
                break;
            case RouteJobType::Process :
                processJobId = _jobId;
                break;
            case RouteJobType::QueueBefore :
                queueBeforeJobId = _jobId;
                break;
            case RouteJobType::Overlap :
                overlapJobId = _jobId;
                break;
            case RouteJobType::Transport :
                transportJobId = _jobId;
                break;
            case RouteJobType::QueueAfter :
                queueAfterJobId = _jobId;
                break;
        }
        // Shop Floor Control end
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>