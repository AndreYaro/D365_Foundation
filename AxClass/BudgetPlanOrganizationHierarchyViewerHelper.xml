<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanOrganizationHierarchyViewerHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanOrganizationHierarchyViewerHelper</c> class provides the static methods to populate the preview panes data in the <c>BudgetPlanOrganizationHierarchyView</c> form.
/// </summary>
public class BudgetPlanOrganizationHierarchyViewerHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertBudgetPlanOrganizationHierarchyWorkflowStatusTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts count of workflow statuses of budget plans linked with the selected organization in the <c>BudgetPlanOrganizationHierarchyWorkflowStatusTmp</c> table.
    /// </summary>
    /// <param name = "_budgetingOrganizationRecId">
    /// The value of the <c>BudgetingOrganization</c> field of the <c>BudgetPlanHeader</c> table.
    /// </param>
    /// <param name = "_budgetPlanningProcessRecId">
    /// The value of the <c>BudgetPlanningProcess</c> field of the <c>BudgetPlanHeader</c> table.
    /// </param>
    /// <returns>
    /// The buffer of the <c>BudgetPlanOrganizationHierarchyWorkflowStatusTmp</c> table.
    /// </returns>
    public static BudgetPlanOrganizationHierarchyWorkflowStatusTmp insertBudgetPlanOrganizationHierarchyWorkflowStatusTmp(
        BudgetingOrganizationRecId _budgetingOrganizationRecId,
        BudgetPlanningProcessRecId _budgetPlanningProcessRecId)
    {
        BudgetPlanOrganizationHierarchyWorkflowStatusTmp budgetPlanOrganizationHierarchyWorkflowStatusTmp;
        BudgetPlanHeader                                 budgetPlanHeader;
        OMExplodedOrganizationSecurityGraph              omExplodedOrganizationSecurityGraph;

        insert_recordset budgetPlanOrganizationHierarchyWorkflowStatusTmp(
            WorkflowStatus,
            StatusesCount)
        select
            WorkflowStatus,
            count(RecId)
        from budgetPlanHeader
            group by budgetPlanHeader.WorkflowStatus
            where budgetPlanHeader.BudgetPlanningProcess == _budgetPlanningProcessRecId
            exists join omExplodedOrganizationSecurityGraph
                where omExplodedOrganizationSecurityGraph.Organization == budgetPlanHeader.BudgetingOrganization
                    && omExplodedOrganizationSecurityGraph.AncestorOrganization == _budgetingOrganizationRecId;

        return budgetPlanOrganizationHierarchyWorkflowStatusTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBudgetPlanOrganizationHierarchyBudgetPlansTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts summarize data of budget plans linked with the organization in the <c>BudgetPlanOrganizationHierarchyBudgetPlansTmp</c> table.
    /// </summary>
    /// <param name = "_budgetingOrganizationRecId">
    /// The RecId of the budgeting organization.
    /// </param>
    /// <param name = "_budgetPlanningProcessRecId">
    /// The value of the <c>BudgetPlanningProcess</c> field of the <c>BudgetPlanHeader</c> table.
    /// </param>
    /// <returns>
    /// The buffer of the <c>BudgetPlanOrganizationHierarchyBudgetPlansTmp</c> table.
    /// </returns>
    public static BudgetPlanOrganizationHierarchyBudgetPlansTmp insertBudgetPlanOrganizationHierarchyBudgetPlansTmp(
        BudgetingOrganizationRecId _budgetingOrganizationRecId,
        BudgetPlanningProcessRecId _budgetPlanningProcessRecId)
    {
        BudgetPlanOrganizationHierarchyBudgetPlansTmp budgetPlanOrganizationHierarchyBudgetPlansTmp;
        BudgetPlanHeader                              budgetPlanHeader;
        OMExplodedOrganizationSecurityGraph           omExplodedOrganizationSecurityGraph;

        insert_recordset budgetPlanOrganizationHierarchyBudgetPlansTmp(
            Header,
            Name)
        select
            RecId,
            Name
        from budgetPlanHeader
            where budgetPlanHeader.BudgetPlanningProcess == _budgetPlanningProcessRecId
            exists join omExplodedOrganizationSecurityGraph
                where omExplodedOrganizationSecurityGraph.Organization == budgetPlanHeader.BudgetingOrganization
                    && omExplodedOrganizationSecurityGraph.AncestorOrganization == _budgetingOrganizationRecId;

        return budgetPlanOrganizationHierarchyBudgetPlansTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBudgetPlanOrganizationHierarchyBudgetPlanningStageTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts count of budget planning stages of budget plans linked with the selected organization in the <c>BudgetPlanOrganizationHierarchyBudgetPlanningStageTmp</c> table.
    /// </summary>
    /// <param name = "_budgetingOrganizationRecId">
    /// The RecId of the budgeting organization.
    /// </param>
    /// <param name = "_budgetPlanningProcessRecId">
    /// The value of the <c>BudgetPlanningProcess</c> field of the <c>BudgetPlanHeader</c> table.
    /// </param>
    /// <returns>
    /// The buffer of the <c>BudgetPlanOrganizationHierarchyBudgetPlanningStageTmp</c> table.
    /// </returns>
    public static BudgetPlanOrganizationHierarchyBudgetPlanningStageTmp insertBudgetPlanOrganizationHierarchyBudgetPlanningStageTmp(
        BudgetingOrganizationRecId _budgetingOrganizationRecId,
        BudgetPlanningProcessRecId _budgetPlanningProcessRecId)
    {
        BudgetPlanOrganizationHierarchyBudgetPlanningStageTmp budgetPlanOrganizationHierarchyBudgetPlanningStageTmp;
        BudgetPlanHeader                                      budgetPlanHeader;
        OMExplodedOrganizationSecurityGraph                   omExplodedOrganizationSecurityGraph;

        insert_recordset budgetPlanOrganizationHierarchyBudgetPlanningStageTmp(
            Stage,
            StagesCount)
        select
            BudgetPlanningStage,
            count(RecId)
        from budgetPlanHeader
            group by budgetPlanHeader.BudgetPlanningStage
            where budgetPlanHeader.BudgetPlanningProcess == _budgetPlanningProcessRecId
            exists join omExplodedOrganizationSecurityGraph
                where omExplodedOrganizationSecurityGraph.Organization == budgetPlanHeader.BudgetingOrganization
                    && omExplodedOrganizationSecurityGraph.AncestorOrganization == _budgetingOrganizationRecId;

        return budgetPlanOrganizationHierarchyBudgetPlanningStageTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBudgetPlanOrganizationHierarchySummaryTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts summarized information of amounts and quantities group by budget plan scenario for the budget plans
    /// linked with the selected organization and estimate type in the <c>BudgetPlanOrganizationHierarchySummaryTmp</c> table.
    /// </summary>
    /// <param name = "_budgetingOrganizationRecId">
    /// The RecId of the budgeting organization.
    /// </param>
    /// <param name = "_budgetPlanningProcessRecId">
    /// The value of the <c>BudgetPlanningProcess</c> field of the <c>BudgetPlanHeader</c> table.
    /// </param>
    /// <param name = "_estimateType">
    /// The value of the <c>BudgetPlanEstimateType</c> field.
    /// </param>
    /// <returns>
    /// The buffer of the <c>BudgetPlanOrganizationHierarchySummaryTmp</c> table.
    /// </returns>
    public static BudgetPlanOrganizationHierarchySummaryTmp insertBudgetPlanOrganizationHierarchySummaryTmp(
        BudgetingOrganizationRecId _budgetingOrganizationRecId,
        BudgetPlanningProcessRecId _budgetPlanningProcessRecId,
        BudgetPlanEstimateType     _estimateType)
    {
        BudgetPlanHeader                            budgetPlanHeader;
        BudgetPlanOrganizationHierarchySummaryTmp   budgetPlanOrganizationHierarchySummaryTmp;
        BudgetPlanOrganizationHierarchySummaryTmp   budgetPlanOrganizationHierarchySummaryTmpFinal;
        Distance                                    depth;
        BudgetPlanOrganizationHierarchyViewerHelper budgetPlanOrganizationHierarchyViewerHelper = BudgetPlanOrganizationHierarchyViewerHelper::construct();

        budgetPlanOrganizationHierarchyViewerHelper.populateBudgetPlanOrganizationHierarchySummaryTmpSummarizeByHeader(
            budgetPlanOrganizationHierarchySummaryTmp,
            _budgetingOrganizationRecId,
            _budgetPlanningProcessRecId,
            _estimateType);

        // Selects the maximun level in the selected records.
        select maxof(Level) from budgetPlanOrganizationHierarchySummaryTmp;

        depth = budgetPlanOrganizationHierarchySummaryTmp.Level;

        for (Counter levelOfHierarchy = depth; levelOfHierarchy >= 0; levelOfHierarchy--)
        {
            if (levelOfHierarchy != depth)
            {
                // Moving the child lines to the parent.
                update_recordset budgetPlanOrganizationHierarchySummaryTmpFinal
                setting BudgetPlanHeader = budgetPlanHeader.RecId,
                        ParentBudgetPlanHeader = budgetPlanHeader.ParentBudgetPlanHeader,
                        Level = levelOfHierarchy
                join budgetPlanHeader
                    where budgetPlanHeader.RecId == budgetPlanOrganizationHierarchySummaryTmpFinal.ParentBudgetPlanHeader;
            }

            // Copying the data to another instance of the temp table for the current level.
            budgetPlanOrganizationHierarchyViewerHelper.copyDataToBudgetPlanOrganizationHierarchySummaryTmp(
                budgetPlanOrganizationHierarchySummaryTmp,
                budgetPlanOrganizationHierarchySummaryTmpFinal,
                levelOfHierarchy);
        }

        // Empty the first temp table instance
        delete_from budgetPlanOrganizationHierarchySummaryTmp;

        // Summing the data group by scenarios and budget class
        insert_recordset budgetPlanOrganizationHierarchySummaryTmp(
            AccountingCurrencyAmount,
            Quantity,
            Scenario,
            BudgetClass)
        select
            sum(AccountingCurrencyAmount),
            sum(Quantity),
            Scenario,
            BudgetClass
        from budgetPlanOrganizationHierarchySummaryTmpFinal
            group by budgetPlanOrganizationHierarchySummaryTmpFinal.Scenario,
                     budgetPlanOrganizationHierarchySummaryTmpFinal.BudgetClass;

        // Reversing the sign on revenue type lines
        update_recordset budgetPlanOrganizationHierarchySummaryTmp
            setting AccountingCurrencyAmount = budgetPlanOrganizationHierarchySummaryTmp.AccountingCurrencyAmount * -1
            where budgetPlanOrganizationHierarchySummaryTmp.BudgetClass == BudgetClass::Revenue;

        return budgetPlanOrganizationHierarchySummaryTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateBudgetPlanOrganizationHierarchySummaryTmpSummarizeByHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the temp table with the data summarized by budget plan header, budget plan scenario and budget class
    /// for the given responsibility center and estimate type.
    /// </summary>
    /// <param name = "_budgetPlanOrganizationHierarchySummaryTmp">
    /// The buffer of the <c>BudgetPlanOrganizationHierarchySummaryTmp</c> table.
    /// </param>
    /// <param name = "_budgetPlanningProcessRecId">
    /// The value of the <c>BudgetPlanningProcess</c> field of the <c>BudgetPlanHeader</c> table.
    /// </param>
    /// <param name = "_budgetingOrganizationRecId">
    /// The RecId of the budget planning organization.
    /// </param>
    /// <param name = "_estimateType">
    /// The value of the <c>BudgetPlanEstimateType</c> field.
    /// </param>
    protected void populateBudgetPlanOrganizationHierarchySummaryTmpSummarizeByHeader(
        BudgetPlanOrganizationHierarchySummaryTmp _budgetPlanOrganizationHierarchySummaryTmp,
        BudgetingOrganizationRecId                _budgetingOrganizationRecId,
        BudgetPlanningProcessRecId                _budgetPlanningProcessRecId,
        BudgetPlanEstimateType                    _estimateType)
    {
        BudgetPlanLine                      budgetPlanLineLocal;
        BudgetPlanHeader                    budgetPlanHeader;
        BudgetPlanningProcess               budgetPlanningProcess;
        OMExplodedOrganizationSecurityGraph omExplodedOrganizationSecurityGraph;

        // Inserting the sum of amounts and quantities for individual headers in the temp table
        insert_recordset _budgetPlanOrganizationHierarchySummaryTmp(
            AccountingCurrencyAmount,
            Quantity,
            Scenario,
            BudgetClass,
            BudgetPlanHeader,
            ParentBudgetPlanHeader)
        select
            sum(AccountingCurrencyAmount),
            sum(Quantity),
            BudgetPlanScenario,
            BudgetClass,
            BudgetPlanHeader
        from budgetPlanLineLocal
            group by
                budgetPlanLineLocal.BudgetPlanScenario,
                budgetPlanLineLocal.BudgetClass,
                budgetPlanLineLocal.BudgetPlanHeader
            where budgetPlanLineLocal.EstimateType == _estimateType
            join ParentBudgetPlanHeader from budgetPlanHeader
                group by budgetPlanHeader.ParentBudgetPlanHeader
                    where budgetPlanHeader.RecId == budgetPlanLineLocal.BudgetPlanHeader
                exists join budgetPlanningProcess
                    where budgetPlanningProcess.RecId == budgetPlanHeader.BudgetPlanningProcess
                        && budgetPlanningProcess.RecId == _budgetPlanningProcessRecId
                    exists join omExplodedOrganizationSecurityGraph
                        where omExplodedOrganizationSecurityGraph.Organization == budgetPlanHeader.BudgetingOrganization
                                && omExplodedOrganizationSecurityGraph.AncestorOrganization == _budgetingOrganizationRecId
                                && omExplodedOrganizationSecurityGraph.OMHierarchyType == budgetPlanningProcess.OrganizationHierarchyType;

        // updating the level for each header in the selected organization.
        update_recordset _budgetPlanOrganizationHierarchySummaryTmp
            setting Level = omExplodedOrganizationSecurityGraph.Distance
            join budgetPlanHeader
            where budgetPlanHeader.RecId == _budgetPlanOrganizationHierarchySummaryTmp.BudgetPlanHeader
                join omExplodedOrganizationSecurityGraph
                where omExplodedOrganizationSecurityGraph.Organization == budgetPlanHeader.BudgetingOrganization
                    && omExplodedOrganizationSecurityGraph.AncestorOrganization == _budgetingOrganizationRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDataToBudgetPlanOrganizationHierarchySummaryTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the data to and from the <c>BudgetPlanOrganizationHierarchySummaryTmp</c> table instances, excludes the scenarios that exists in the parent record.
    /// </summary>
    /// <param name = "_sourceInstance">
    /// The buffer of the source <c>BudgetPlanOrganizationHierarchySummaryTmp</c> table.
    /// </param>
    /// <param name = "_destinationInstance">
    /// The buffer of the destination <c>BudgetPlanOrganizationHierarchySummaryTmp</c> table.
    /// </param>
    protected void copyDataToBudgetPlanOrganizationHierarchySummaryTmp(
        BudgetPlanOrganizationHierarchySummaryTmp _sourceInstance,
        BudgetPlanOrganizationHierarchySummaryTmp _destinationInstance,
        Distance                                  _level)
    {
        BudgetPlanOrganizationHierarchySummaryTmp budgetPlanOrganizationHierarchySummaryTmp;

        budgetPlanOrganizationHierarchySummaryTmp.linkPhysicalTableInstance(_sourceInstance);

        insert_recordset _destinationInstance(
            AccountingCurrencyAmount,
            Quantity,
            Scenario,
            BudgetClass,
            BudgetPlanHeader,
            ParentBudgetPlanHeader,
            Level)
        select
            AccountingCurrencyAmount,
            Quantity,
            Scenario,
            BudgetClass,
            BudgetPlanHeader,
            ParentBudgetPlanHeader,
            Level
        from _sourceInstance
            where _sourceInstance.Level == _level
            notexists join budgetPlanOrganizationHierarchySummaryTmp
                where budgetPlanOrganizationHierarchySummaryTmp.Scenario == _sourceInstance.Scenario
                    && budgetPlanOrganizationHierarchySummaryTmp.BudgetPlanHeader == _sourceInstance.ParentBudgetPlanHeader
                    && budgetPlanOrganizationHierarchySummaryTmp.BudgetClass == _sourceInstance.BudgetClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetPlanOrganizationHierarchyViewerHelper construct()
    {
        return new BudgetPlanOrganizationHierarchyViewerHelper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>