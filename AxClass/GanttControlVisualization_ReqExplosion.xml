<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GanttControlVisualization_ReqExplosion</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the visualization of the explosion scenario when used with a GanttControl form control.
/// </summary>
public class GanttControlVisualization_ReqExplosion extends GanttControlVisualization
{
    const str futuresSymbolName = 'Triangle';
    const str actionsSymbolName = 'Down';
    const str futuresActivityIdPrefix = 'f';
    const str actionsActivityIdPrefix = 'a';
    const int defaultGridWidth = 350;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static GanttControlVisualization_ReqExplosion construct()
    {
        return new GanttControlVisualization_ReqExplosion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newGanttClient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance if the class based on a <c>GanttClient</c> object.
    /// </summary>
    /// <param name = "_ganttClient">The client object.</param>
    /// <returns>A new instance of the class.</returns>
    public static GanttControlVisualization_ReqExplosion newGanttClient(GanttClient_ReqExplosion _ganttClient)
    {
        GanttControlVisualization_ReqExplosion ganttVisualization = GanttControlVisualization_ReqExplosion::construct();
        ganttVisualization.parmGanttClient(_ganttClient);
        ganttVisualization.parmShowInUserTZ(ProdGanttApplyUserTimezoneOffsetFlight::instance().isEnabled() &&
            ProdApplyUserTimezoneOffsetFlight::instance().isEnabled() &&
            ProdParameters::find().ShowSchedDateTimeWithUserTimeZone == ProdShowDateTimeTimeZone::UserTimeZone);

        return ganttVisualization;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    public formName formName()
    {
        return formstr(ReqTransExplosion);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGanttDialog</Name>
				<Source><![CDATA[
    protected GanttDialog createGanttDialog()
    {
        return GanttDialog_ReqExplosion::newDialogFromVisualization(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the gantt control view settings.
    /// </summary>
    /// <returns>A <c>Configuration</c> object with values set based on the client and setup information.</returns>
    public GanttControlConfiguration getConfiguration()
    {
        GanttControlConfiguration ret;

        ret = super();

        GanttSetup_ReqExplosion ganttSetup = ganttClient.parmGanttSetup();
        ret.parmShowAllLinks(ganttSetup.parmShowLinks());

        GanttColor_ReqExplosion ganttColor = ganttClient.parmGanttColor() as GanttColor_ReqExplosion;
        ret.parmUseThemeColors(ganttColor.parmColorScheme() == GanttColorSchemeReqExplosion::Theme);

        ret.parmGridWidth(defaultGridWidth);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getColumns</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the columns to display in the gantt control.
    /// </summary>
    /// <returns>A List of gantt column settings.</returns>
    public List getColumns()
    {
        List columns = new List(Types::Class);

        columns.addEnd(GanttControlColumn::newParameters("@SYS112248", 0, true));
        columns.addEnd(GanttControlColumn::newParameters("@SYS13864", 60, true));
        columns.addEnd(GanttControlColumn::newParameters("@SYS14428", 80, true));

        return columns;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the activities to display in the gantt control.
    /// </summary>
    /// <returns>A List of gantt activities.</returns>
    public List getActivities()
    {
        List activities = new List(Types::Class);
                
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(GanttTmpReqExplosion));

        qbds.addRange(fieldNum(GanttTmpReqExplosion, SchedFromDate)).value(SysQuery::range(null,ganttClient.parmToDate()));
        qbds.addRange(fieldNum(GanttTmpReqExplosion, SchedToDate)).value(SysQuery::range(ganttClient.parmFromDate(), null));

        qbds.addSortField(fieldNum(GanttTmpReqExplosion, LineNum));

        QueryRun queryRun = new QueryRun(query);
        GanttData_ReqExplosion ganttData_ReqExplosion = ganttClient.parmGanttData() as GanttData_ReqExplosion;
        queryRun.setRecord(ganttData_ReqExplosion.parmGanttTableReqExplosion().parmTableBuffer());

        while (queryRun.next())
        {
            GanttTmpReqExplosion ganttTmpReqExplosion = queryRun.get(tableNum(GanttTmpReqExplosion));

            str parentActivityId = '';
            str activityId = int642Str(ganttTmpReqExplosion.RecId);

            // Add the activity
            List columnTexts = new List(Types::String);
            columnTexts.addEnd(enum2Str(ganttTmpReqExplosion.RefType));
            columnTexts.addEnd(ganttTmpReqExplosion.RefId);
            columnTexts.addEnd(ganttTmpReqExplosion.ItemId);

            utcdatetime fromDateTime;
            utcdatetime toDateTime;

            if (ProdGanttApplyUserTimezoneOffsetFlight::instance().isEnabled())
            {
                if (showInUserTZ)
                {
                    fromDateTime = DateTimeUtil::newDateTime(ganttTmpReqExplosion.SchedFromDate, ganttTmpReqExplosion.SchedFromTime);
                    toDateTime = DateTimeUtil::newDateTime(ganttTmpReqExplosion.SchedToDate, ganttTmpReqExplosion.SchedToTime);
                }
                else
                {
                    Timezone userTimezone = DateTimeUtil::getUserPreferredTimeZone();

                    fromDateTime = DateTimeUtil::newDateTime(ganttTmpReqExplosion.SchedFromDate, ganttTmpReqExplosion.SchedFromTime, userTimezone);
                    toDateTime = DateTimeUtil::newDateTime(ganttTmpReqExplosion.SchedToDate, ganttTmpReqExplosion.SchedToTime, userTimezone);
                }
            }
            else
            {
                fromDateTime = DateTimeUtil::newDateTime(ganttTmpReqExplosion.SchedFromDate, ganttTmpReqExplosion.SchedFromTime, DateTimeUtil::getCompanyTimeZone());
                toDateTime = DateTimeUtil::newDateTime(ganttTmpReqExplosion.SchedToDate, ganttTmpReqExplosion.SchedToTime, DateTimeUtil::getCompanyTimeZone());
            }

            if (fromDateTime > toDateTime)
            {
                // For purchase orders it can happen that the toDateTime (which is set to Delivery date) is before fromDateTime (which is today's date)
                // but in order for the activity to be rendered correctly that is not allowed
                fromDateTime = toDateTime;
            }

            List markers = new List(Types::Class);

            // Add futures dates marker (triangle)
            if (ganttTmpReqExplosion.FuturesDate)
            {
                utcdatetime futuresDateTime = DateTimeUtil::newDateTime(ganttTmpReqExplosion.FuturesDate, ganttTmpReqExplosion.FuturesTime, DateTimeUtil::getCompanyTimeZone());

                GanttControlMilestoneMarker futuresMarker =  GanttControlMilestoneMarker::newParameters(
                        futuresActivityIdPrefix + activityId,
                        futuresDateTime,
                        '',
                        futuresSymbolName,
                        ganttTmpReqExplosion.FuturesColor);

                markers.addEnd(futuresMarker);
            }

            // Add action dates marker (arrow down)
            if (ganttTmpReqExplosion.ActionDate)
            {
                utcdatetime ationDateTime = DateTimeUtil::newDateTime(ganttTmpReqExplosion.ActionDate, ganttTmpReqExplosion.ActionTime, DateTimeUtil::getCompanyTimeZone());

                GanttControlMilestoneMarker actionMarker =  GanttControlMilestoneMarker::newParameters(
                        actionsActivityIdPrefix + activityId,
                        ationDateTime,
                        '',
                        actionsSymbolName,
                        ganttTmpReqExplosion.ActionColor);

                markers.addEnd(actionMarker);
            }

            str activityText = EcoResProduct::find(InventTable::getDistinctProductRecId(ganttTmpReqExplosion.ItemId, InventDim::find(ganttTmpReqExplosion.InventDimId))).DisplayProductNumber;

            GanttControlTaskActivity activity = GanttControlTaskActivity::newParameters(
                activityId,
                parentActivityId,
                fromDateTime,
                toDateTime,
                activityText,
                ganttTmpReqExplosion.CalendarId,
                ganttTmpReqExplosion.NodeColor,
                this.activityTooltipText(ganttTmpReqExplosion),
                columnTexts,
                0,
                true,
                false,
                false,
                false,
                markers);

            activities.addEnd(activity);
        }

        return activities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activityTooltipText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tooptip text for an activity.
    /// </summary>
    /// <param name = "_ganttTmpReqExplosion">The explosion record representing the activity.</param>
    /// <returns>The tooltip text.</returns>
    private str activityTooltipText(GanttTmpReqExplosion _ganttTmpReqExplosion)
    {
        str strToolTip;

        strToolTip  = enum2str(_ganttTmpReqExplosion.RefType);

        if (_ganttTmpReqExplosion.RefId)
        {
            strToolTip  += '/' + _ganttTmpReqExplosion.RefId;
        }

        strToolTip  += '/' + _ganttTmpReqExplosion.ItemId;
        strToolTip  += '/' + InventTable::find(_ganttTmpReqExplosion.ItemId).defaultProductName();

        return strToolTip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLinks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the links to display in the gantt control.
    /// </summary>
    /// <returns>A List of gantt links.</returns>
    public List getLinks()
    {
        List links = new List(Types::Class);

        GanttSetup_ReqExplosion setup = ganttClient.parmGanttSetup();
        if (setup.parmShowLinks())
        {
            GanttData_ReqExplosion ganttData_reqExplosion = ganttClient.parmGanttData() as ganttData_reqExplosion;
            GanttTmpLink ganttTmpLink = ganttData_reqExplosion.parmGanttTableLink().parmTableBuffer();

            while select ganttTmpLink
            {
                GanttControlLink link = GanttControlLink::newParameters(
                int642Str(ganttTmpLink.RecId),
                int642Str(ganttTmpLink.PredecessorRecId),
                int642Str(ganttTmpLink.SuccessorRecId),
                ganttTmpLink.LinkType);

                links.addEnd(link);
            }
        }

        return links;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ganttData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the explosion specific <c>ganttData</c> object.
    /// </summary>
    /// <returns>The data object.</returns>
    public GanttData_ReqExplosion ganttData()
    {
        return ganttClient.parmGanttData();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>