<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoicePoolNotpostedController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendInvoicePoolNotpostedController</c> class handles the business logic for the
/// <c>VendInvoicePoolNotposted</c> report.
/// </summary>
public class VendInvoicePoolNotpostedController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        SRSReportParameter parameter = this.parmReportContract().parmRdlContract().getParameter("MenuItemType");
        Query query = this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey());

        this.setRanges(query, parameter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns values to the ranges in query and to the parameters.
    /// </summary>
    /// <param name="_query">
    /// Query used by the report.
    /// </param>
    /// <param name="_parameter">
    /// A menu item parameter.
    /// </param>
    public void setRanges(Query _query, SRSReportParameter _parameter)
    {
        QueryBuildRange qbrJournalType;
        QueryBuildRange qbrJournalNum;

        if (_query == null)
        {
            throw error('Query is empty');
        }

        //Finds or creates Journal type range on LedgerJournalTable.
        qbrJournalType = SysQuery::findOrCreateRange(_query.dataSourceTable(tableNum(LedgerJournalTable)), fieldNum(LedgerJournalTable, JournalType));

        //Finds or creates Journal num range on LedgerJournalTable.
        qbrJournalNum = SysQuery::findOrCreateRange(_query.dataSourceTable(tableNum(LedgerJournalTable)), fieldNum(LedgerJournalTable, JournalNum));

        //Assigns the values to the ranges of query and sets the parameter value based on args object.
        qbrJournalType.value(queryValue(LedgerJournalType::VendInvoicePool));
        qbrJournalNum.value(queryValue(LedgerJournalTable::findVendorInvoicePool().JournalNum));
        _parameter.setValueTyped(0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        VendInvoicePoolNotpostedController controller = new VendInvoicePoolNotpostedController();
        const SRSCatalogItemName reportNameLocal = 'VendInvoicePoolNotposted.Report';

        controller.parmReportName(reportNameLocal);
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>