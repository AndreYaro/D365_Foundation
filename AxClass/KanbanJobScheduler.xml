<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanJobScheduler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanScheduler</c> class performs all actions that are required to schedule kanban jobs.
/// </summary>
/// <remarks>
///    The base class is abstract.
/// </remarks>
public abstract class KanbanJobScheduler
{
    KanbanJob                       kanbanJob;
    WrkCtrResourceGroup             wrkCtrResourceGroup;
    Map                             mapLeanWorkCellScheduleCapacity;    // date/time -> capacity
    TransDateTime                   scheduleDateTime;

    KanbanJobScheduler              rootKanbanJobScheduler;
    KanbanJobScheduler              lockOwnerKanbanJobScheduler;
    KanbanJobSchedulerLock          kanbanJobSchedulerLock;

    boolean                         cachedWrkCtrResourceGroup;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canMove</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a <c>KanbanJob</c> record can be moved.
    /// </summary>
    /// <param name="_kanbanJob">
    ///    A <c>KanbanJob</c> record.
    /// </param>
    /// <returns>
    ///    true if the kanban job record can be moved; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean canMove(KanbanJob _kanbanJob)
    {
        return    _kanbanJob
               && _kanbanJob.ExpectedDateTime
               && _kanbanJob.Status < LeanKanbanJobStatus::InProgress
               && _kanbanJob.type().canHaveStatus(LeanKanbanJobStatus::Planned)
               && _kanbanJob.checkValid(_kanbanJob.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>expectedDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the expected date and time for a kanban job.
    /// </summary>
    /// <param name="_fromDateTime">
    /// The from date and time.
    /// </param>
    /// <param name="_seconds">
    /// The duration of the job in seconds.
    /// </param>
    /// <param name="_calendarId">
    /// The ID of the calendar that is used for scheduling.
    /// </param>
    /// <param name="_limitDateTime">
    /// The limit date and time that should not be exceeded; optional.
    /// </param>
    /// <returns>
    /// The expected data and time.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TransDateTime expectedDateTime(
        TransDateTime _fromDateTime,
        real          _seconds,
        CalendarId    _calendarId,
        TransDateTime _limitDateTime = DateTimeUtil::maxValue())
    {
        SchedDirection      schedDirection;
        real                seconds       = _seconds;
        TransDateTime       limitDateTime = _limitDateTime;

        if (seconds >= 0)
        {
            schedDirection = SchedDirection::Forward;
        }
        else
        {
            schedDirection = SchedDirection::Backward;
            seconds        = -seconds;
            if (limitDateTime == DateTimeUtil::maxValue())
            {
                limitDateTime = DateTimeUtil::minValue();
            }
        }

        TransDateTime expectedDateTime = new WorkCalendarSched().schedTimeUTC(schedDirection,
                                                                              _fromDateTime,
                                                                              seconds,
                                                                              true,
                                                                              _calendarId,
                                                                              true,
                                                                              limitDateTime);

        return expectedDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJobScheduleExpectedStartEndDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the expected start and end datetime for a kanban job schedule.
    /// </summary>
    /// <param name="_kanbanJobSchedule">
    /// The record to update with expected start and end.
    /// </param>
    /// <param name="_kanbanJob">
    /// The related kanban job.
    /// </param>
    /// <param name="_fromDateTime">
    /// The from date and time.
    /// </param>
    /// <param name="_seconds">
    /// The duration of the job in seconds.
    /// </param>
    /// <param name="_calendarId">
    /// The ID of the calendar that is used for scheduling.
    /// </param>
    /// <param name="_limitDateTime">
    /// The limit date and time that should not be exceeded; optional.
    /// </param>
    /// <returns>
    /// The expected data and time.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setJobScheduleExpectedStartEndDateTime(
        KanbanJobSchedule   _kanbanJobSchedule,
        KanbanJob           _kanbanJob,        
        TransDateTime       _fromDateTime,
        real                _seconds,
        CalendarId          _calendarId,
        TransDateTime       _limitDateTime = DateTimeUtil::maxValue())
    {
        _kanbanJobSchedule.ExpectedDateTime = this.expectedDateTime(_fromDateTime, _seconds, _calendarId, _limitDateTime);
        _kanbanJobSchedule.ExpectedStartDateTime = KanbanDateCalculation::newKanbanJob(_kanbanJob).backwardUsingActivityTime(_kanbanJob, _kanbanJobSchedule.ExpectedDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>leanWorkCellScheduleCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a <c>LeanWorkCellScheduleCapacity</c> object that is used by the scheduler class.
    /// </summary>
    /// <param name="_scheduleDateTime">
    ///    The date and time used to instantiate the <c>LeanWorkCellScheduleCapacity</c> object.
    /// </param>
    /// <returns>
    ///    The <c>LeanWorkCellScheduleCapacity</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LeanWorkCellScheduleCapacity leanWorkCellScheduleCapacity(TransDateTime _scheduleDateTime = this.scheduleDateTime())
    {
        LeanWorkCellScheduleCapacity    leanWorkCellScheduleCapacity;

        if (rootKanbanJobScheduler)
        {
            leanWorkCellScheduleCapacity = rootKanbanJobScheduler.leanWorkCellScheduleCapacity(_scheduleDateTime);
        }
        else
        {
            if (!mapLeanWorkCellScheduleCapacity)
            {
                mapLeanWorkCellScheduleCapacity = new Map(Types::UtcDateTime,Types::Class);
            }

            if (mapLeanWorkCellScheduleCapacity.exists(_scheduleDateTime))
            {
                leanWorkCellScheduleCapacity = mapLeanWorkCellScheduleCapacity.lookup(_scheduleDateTime);
            }
            else
            {
                leanWorkCellScheduleCapacity = LeanWorkCellScheduleCapacity::newStandard(this.wrkCtrResourceGroup(),
                                                                                         _scheduleDateTime);
                mapLeanWorkCellScheduleCapacity.insert(_scheduleDateTime,leanWorkCellScheduleCapacity);
            }
        }

        return leanWorkCellScheduleCapacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockOwnerKanbanJobScheduler</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the scheduler that owns the locks for the current instance.
    /// </summary>
    /// <returns>
    ///    The lock owner scheduler if one is present; otherwise, the current instance.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected KanbanJobScheduler lockOwnerKanbanJobScheduler()
    {
        return lockOwnerKanbanJobScheduler ? lockOwnerKanbanJobScheduler : this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockWorkCell</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Locks a work cell so that it is not used by other scheduler processes at the same time.
    /// </summary>
    /// <param name="_workCell">
    ///    A record ID of the <c>WrkCtrResourceGroup</c> table.
    /// </param>
    /// <returns>
    ///    true if the lock was acquired; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean lockWorkCell(WrkCtrResourceGroupRefRecId _workCell)
    {
        boolean result = false;

        if (_workCell)
        {
            if (lockOwnerKanbanJobScheduler)
            {
                result = lockOwnerKanbanJobScheduler.lockWorkCell(_workCell);
            }
            else
            {
                if (!kanbanJobSchedulerLock)
                {
                    kanbanJobSchedulerLock = KanbanJobSchedulerLock::newStandard();
                }
                result = kanbanJobSchedulerLock.acquireOrHoldLockWorkCell(_workCell,true);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanJob</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public KanbanJob parmKanbanJob(KanbanJob _kanbanJob = kanbanJob)
    {
        kanbanJob = _kanbanJob;
        return kanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLockOwnerKanbanJobScheduler</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public KanbanJobScheduler parmLockOwnerKanbanJobScheduler(KanbanJobScheduler _lockOwnerKanbanJobScheduler = lockOwnerKanbanJobScheduler)
    {
        lockOwnerKanbanJobScheduler = _lockOwnerKanbanJobScheduler;
        return lockOwnerKanbanJobScheduler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRootKanbanJobScheduler</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public KanbanJobScheduler parmRootKanbanJobScheduler(KanbanJobScheduler _rootKanbanJobScheduler = rootKanbanJobScheduler)
    {
        rootKanbanJobScheduler = _rootKanbanJobScheduler;
        return rootKanbanJobScheduler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseAllLocks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases all remaining locks.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void releaseAllLocks()
    {
        if (kanbanJobSchedulerLock)
        {
            kanbanJobSchedulerLock.releaseAllLocks();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseLockWorkCell</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Releases a lock on a work cell so that it can be used by other scheduler processes.
    /// </summary>
    /// <param name="_workCell">
    ///    A record ID of the <c>WrkCtrResourceGroup</c> table.
    /// </param>
    /// <returns>
    ///    true if the lock was released; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean releaseLockWorkCell(WrkCtrResourceGroupRefRecId _workCell)
    {
        boolean result = false;

        if (_workCell)
        {
            if (lockOwnerKanbanJobScheduler)
            {
                result = lockOwnerKanbanJobScheduler.releaseLockWorkCell(_workCell);
            }
            else
            {
                if (kanbanJobSchedulerLock)
                {
                    result = kanbanJobSchedulerLock.releaseLockWorkCell(_workCell);
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rootKanbanJobScheduler</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the root scheduler.
    /// </summary>
    /// <returns>
    ///    The root scheduler if one is present; otherwise, the current instance.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected KanbanJobScheduler rootKanbanJobScheduler()
    {
        return rootKanbanJobScheduler ? rootKanbanJobScheduler : this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes a schedule action.
    /// </summary>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    The schedule could not be updated.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    The schedule could not be updated.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void run()
    {
        #OCCRetryCount

        try
        {
            if (!this.validate())
            {
                throw error("@SYS18447");
            }
            ttsbegin;
            this.runScheduler();
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                this.releaseAllLocks();
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::DuplicateKeyExceptionNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                this.releaseAllLocks();
                throw Exception::DuplicateKeyException;
            }
        }
        catch
        {
            this.releaseAllLocks();
            throw Exception::Error;
        }

        this.releaseAllLocks();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runScheduler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the scheduling action.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected abstract void runScheduler()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the schedule date and time.
    /// </summary>
    /// <returns>
    ///    The schedule date and time.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected abstract TransDateTime scheduleDateTime()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNextJobExpectedDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>ExpectedDateTime</c> field of the next kanban jobs given that the next jobs are not
    /// planned individually.
    /// </summary>
    /// <param name="_kanbanJob">
    /// A <c>KanbanJob</c> record.
    /// </param>
    /// <remarks>
    /// The next jobs are not planned if they are transfer jobs.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setNextJobExpectedDateTime(KanbanJob _kanbanJob = kanbanJob)
    {
        KanbanDateCalculation::newKanbanJob(_kanbanJob).setExpectedDateTimeTransfer(_kanbanJob);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrevJobDueDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>DueDateTime</c> field of the previous kanban jobs given that the planned period is
    /// earlier than the due date.
    /// </summary>
    /// <param name="_kanbanJobSchedule">
    /// The <c>KanbanJobSchedule</c> record that represents the planned job.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setPrevJobDueDateTime(KanbanJobSchedule _kanbanJobSchedule)
    {
        LeanWorkCellScheduleCapacity leanWorkCellScheduleCapacityDueDateTime = LeanWorkCellScheduleCapacity::newStandard(kanbanJob.wrkCtrResourceGroup(),
                                                                                                                         kanbanJob.DueDateTime);

        // first day of the week for weekly periods; is company TZ date
        TransDate adjustedDueDateTZ = leanWorkCellScheduleCapacityDueDateTime.capacityFromDate();

        // planned period is a company TZ date
        // update earlier due dates on previous jobs only if they are moved to an earlier date;
        // stays unchanged when a job is planned at a later date.
        if (_kanbanJobSchedule.PlannedPeriod < adjustedDueDateTZ)
        {
            KanbanDateCalculation::newKanbanJob(kanbanJob).setDueDateTime(false,kanbanJob);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>startDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the start date and time for the kanban job based on the expected date of the previous job.
    /// </summary>
    /// <param name="_leanWorkCellScheduleCapacity">
    ///    A <c>LeanWorkCellScheduleCapacity</c> object.
    /// </param>
    /// <param name="_previousKanbanJobSchedule">
    ///    A <c>KanbanJobSchedule</c> record.
    /// </param>
    /// <returns>
    ///    The start data and time.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TransDateTime startDateTime(
        LeanWorkCellScheduleCapacity    _leanWorkCellScheduleCapacity,
        KanbanJobSchedule               _previousKanbanJobSchedule)
    {
        TransDateTime   startDateTime;

        if (_previousKanbanJobSchedule)
        {
            startDateTime = _previousKanbanJobSchedule.ExpectedDateTime;
        }

        if (!startDateTime)
        {
            startDateTime = _leanWorkCellScheduleCapacity.capacityFromDateTime(); //UTC
        }

        return startDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates input parameters.
    /// </summary>
    /// <returns>
    ///    true if the validation succeeds; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean validate()
    {
        boolean result = true;

        if (kanbanJob)
        {
            result = kanbanJob.checkValid(kanbanJob.RecId);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrkCtrResourceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>WrkCtrResourceGroup</c> record that will be used by the scheduler class.
    /// </summary>
    /// <returns>
    /// A record in the <c>WrkCtrResourceGroup</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected WrkCtrResourceGroup wrkCtrResourceGroup()
    {
        if (!cachedWrkCtrResourceGroup)
        {
            wrkCtrResourceGroup       = kanbanJob.wrkCtrResourceGroup();
            cachedWrkCtrResourceGroup = true;
        }

        return wrkCtrResourceGroup;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>