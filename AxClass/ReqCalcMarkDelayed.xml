<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqCalcMarkDelayed</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>ReqCalcMarkDelayed</c> marks delayed orders across the delayed path started at a given order's receipt.
/// </summary>
class ReqCalcMarkDelayed
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findAndMarkDelayedOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and marks as delayed all parent orders recursively along the delayed path to top level orders.
    /// </summary>
    /// <param name="_reqPlanData">
    /// A <c>ReqPlanData</c> instance that contains the master plan cached data.
    /// </param>
    /// <param name="_receipt">
    /// The order receipt to start checking for delays at.
    /// </param>
    /// <param name="_issue">
    /// The issue that is covered by the order receipt.
    /// </param>
    /// <param name="_setupDim">
    /// The item coverage by dimension data for the item stamped on the order.
    /// </param>
    public void findAndMarkDelayedOrders(ReqPlanData _reqPlanData,
                                         ReqTrans    _receipt,
                                         ReqTrans    _issue,
                                         ReqSetupDim _setupDim)
    {
        //The planned receipts on the first level are not rescheduled in futures
        //even if they are delayed. If any such reqRefType gets added in the future
        //then it must be accounted for below. Further, in future, if any transaction line
        //exists in the database that does not have refId (like safetyInvent) then
        //code must be altered since the search on parent receipt is on the basis of
        //refid.
        if (_issue.RefType == ReqRefType::Sales          ||
            _issue.RefType == ReqRefType::SafetyInvent   ||
            _issue.RefType == ReqRefType::SalesForecast  ||
            _issue.RefType == ReqRefType::SalesQuotation)
        {
            return;
        }

        date todaysDate = _reqPlanData.todaysdate();

        _receipt.FuturesDate = _receipt.ReqDateDlvOrig;

        if (_issue.ReqDate < todaysDate)
        {
            _issue.ReqDate = todaysDate;
        }

        if (_receipt.FuturesDate < todaysDate)
        {
            _receipt.FuturesDate = todaysDate;
        }

        _receipt.setFuturesDateTimeReceipt(_reqPlanData, _setupDim, false);

        if (_receipt.FuturesDate  >  _issue.ReqDate  ||
            (_receipt.FuturesDate == _issue.ReqDate  &&
             _receipt.ReqTime     >  _issue.ReqTime) ||
             _receipt.ReqDate     >  _issue.ReqDate  ||
            (_receipt.ReqDate     == _issue.ReqDate  &&
             _receipt.ReqTime     >  _issue.ReqTime))
        {
            this.markDelayedPath(_reqPlanData, _issue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markDelayedPath</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks all the derived requirement transactions for a given issue as delayed.
    /// </summary>
    /// <param name="_reqPlanData">
    /// A <c>ReqPlanData</c> instance that contains the master plan cached data.
    /// </param>
    /// <param name="_issue">
    /// The <c>ReqTrans</c> record with the starting point issue.
    /// </param>
    public void markDelayedPath(ReqPlanData _reqPlanData,
                                ReqTrans    _issue)
    {
        ReqTrans     parentReceipt;
        ReqTrans     issue;
        ReqTransCov  reqTransCov;
        ReqTrans     coProduct;

        if (!_issue.isDerivedFromPlannedOrder())
        {
            // Should only mark the delays if the parent is a planned order
            return;
        }

        while select pessimisticLock RecId, ItemId, PlanVersion, RefId from parentReceipt
            order by parentReceipt.RecId
            where parentReceipt.PlanVersion == _issue.PlanVersion
               && parentReceipt.RefType     == _issue.parentReqRefType()
               && parentReceipt.RefId       == _issue.RefId
               && !parentReceipt.IsDelayed
        {
            this.markReceiptAsDelayed(parentReceipt);

            while select TableId from reqTransCov
                where reqTransCov.ReceiptRecId == parentReceipt.RecId
                join PlanVersion, RefType, RefId, RecId from issue
                where issue.PlanVersion == reqTransCov.PlanVersion
                   && issue.RecId       == reqTransCov.IssueRecId
                   && issue.RefId       != ''
            {
                this.markDelayedPath(_reqPlanData, issue);
            }

            if (#PmfEnabled && parentReceipt.inventTable().PmfProductType == PmfProductType::MainItem)
            {
                while select pessimisticlock RecId from coProduct
                    where coProduct.PlanVersion  == parentReceipt.PlanVersion
                        && coProduct.RefType     == ReqRefType::PmfCoProduct
                        && coProduct.RefId       == parentReceipt.RefId
                {
                    this.markReceiptAsDelayed(coProduct);

                    while select TableId from reqTransCov
                        where reqTransCov.ReceiptRecId == coProduct.RecId
                        join PlanVersion, RefType, RefId, RecId from issue
                        where issue.PlanVersion == reqTransCov.PlanVersion
                           && issue.RecId       == reqTransCov.IssueRecId
                           && issue.RefId       != ''
                    {
                        this.markDelayedPath(_reqPlanData, issue);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markReceiptAsDelayed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks the receipt as delayed and updates the record.
    /// </summary>
    /// <param name = "_receipt">The receipt that should be marked as delayed.</param>
    protected void markReceiptAsDelayed(ReqTrans _receipt)
    {
        _receipt.IsDelayed = NoYes::Yes;
        _receipt.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqCalcMarkDelayed construct()
    {
        return new ReqCalcMarkDelayed();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>