<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjCashFlowEmplItemReportDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjCashFlowEmplItemReportDP</c> class is the report data provider class for the associated
///    reports.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(ProjCashFlowEmplItem)),
    SRSReportParameterAttribute(classStr(ProjCashFlowProjectReportContract))
]
public class ProjCashFlowEmplItemReportDP extends SRSReportDataProviderBase
{
    TmpProjCashFlowReport           report;
    ProjId                          projId;
    ProjName                        projName;
    AmountMST                       inflowAmount;
    AmountMST                       outflowAmount;
    AmountMST                       netflowAmount;
    ProjCashFlow                    tmpProjCashFlow;
    ProjCashFlowReportsCalcEngine   reportCalc;
    ProjActualBudget                actualBudgetDeviationSum;
    ItemId                          itemId;
    ProjShowAmount                  showAmount;
    Level                           projLevel;
    boolean                         skipBlankId;
    boolean                         skipZero;
    ProjCashFlowTmp                 projCashFlowTmp;
    str                             title,caption;
    QueryRun                        queryRun;
    boolean                         ret;
    int                             queryTable;
    ResResourceID                   resourceId;
    ResResourceName                 resourceName;
    real                            inAmt, outAmt, netAmt;
    str                             showId, sName;
    container                       conList;
    int                             type;
    #ProjReports
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateNoId</Name>
				<Source><![CDATA[
    /// <summary>
///    Calculates the ID of the specified record.
/// </summary>
private void calculateNoId()
{
    tmpProjCashFlow.parmEmplItemId(SysQuery::valueEmptyString());
    tmpProjCashFlow.parmResource(0);

    reportCalc.setClientSettings();

    // Choose the kind of report and populate the temporary table
    switch (actualBudgetDeviationSum)
    {
        case ProjActualBudget::Actual:
            report = reportCalc.getFinalResultActual();
            break;

        case ProjActualBudget::Budget:
            report = reportCalc.getFinalResultBudget();
            break;

        case ProjActualBudget::Deviation:
            report = reportCalc.getFinalResultDeviation();
            break;

        case ProjActualBudget::Sum_:
            report = reportCalc.getFinalResultSum();
            break;
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>getProjCashFlowTmp</Name>
				<Source><![CDATA[
    /// <summary>
///    Gets the project cash flow from the temporary table.
/// </summary>
/// <returns>
///    The project cash flow from the temporary table.
/// </returns>
[
    SRSReportDataSetAttribute('ProjCashFlowTmp')
]
public ProjCashFlowTmp getProjCashFlowTmp()
{
    select projCashFlowTmp;
    return projCashFlowTmp;
}

]]></Source>
			</Method>
			<Method>
				<Name>insertProjCashFlowTmp</Name>
				<Source><![CDATA[
    /// <summary>
///    Sets the project cash flow in the temporary table.
/// </summary>
public void insertProjCashFlowTmp()
{
    projCashFlowTmp.Id                  = projId;
    projCashFlowTmp.Name                = projName;
    projCashFlowTmp.InflowAmount        = inflowAmount;
    projCashFlowTmp.OutflowAmount       = outflowAmount;
    projCashFlowTmp.NetflowAmount       = netflowAmount;
    projCashFlowTmp.Title               = title;
    projCashFlowTmp.Caption             = caption;
    projCashFlowTmp.Type                = type;
    projCashFlowTmp.insert();
}

]]></Source>
			</Method>
			<Method>
				<Name>processItem</Name>
				<Source><![CDATA[
    /// <summary>
///    Processes the report business logic.
/// </summary>
/// <remarks>
///    This method provides the ability to write the report business logic. It will be called by SSRS at
///    runtime. The method should compute data and populate the data tables that will be returned to SSRS.
/// </remarks>

public void processItem()
{
    Map                     itemMap;
    MapEnumerator           itemMapEnum;
    InventTable             tmpinventTable;

    itemMap = new Map(Types::String, Types::Container);

    // Set the projCashFlow object
    tmpProjCashFlow = new ProjCashFlow();
    tmpProjCashFlow = this.setVariableValues(tmpProjCashFlow);

    // Create the new object
    reportCalc = new ProjCashFlowReportsCalcEngine(tmpProjCashFlow, ProjCashFlowReportType::Item);

    title = reportCalc.formatPeriodLabel();
    caption = reportCalc.formatSelection();

    queryRun = new SysQueryRun(this.parmQuery());

    // process blank ids
    if (!skipBlankId)
    {
        this.calculateNoId();
        if (!skipZero || (report.AmountInflow != 0 || report.AmountOutflow != 0))
        {
            conList = ['', report.AmountInflow, report.AmountOutflow, report.AmountNet];
            itemMap.insert('', conList);
        }
    }

    // Iterate through the records
    while (queryRun.next())
    {
        if (SysReportRun::changed(queryRun,tableNum(InventTable)))
        {
            tmpinventTable = queryRun.get(tableNum(InventTable));
            tmpProjCashFlow.parmEmplItemId(tmpinventTable.ItemId);
            queryTable = 2;
        }

        reportCalc.setClientSettings();

        // Choose the kind of report and populate the temporary table
        switch (actualBudgetDeviationSum)
        {
            case ProjActualBudget::Actual:
                report = reportCalc.getFinalResultActual();
                break;
            case ProjActualBudget::Budget:
                report = reportCalc.getFinalResultBudget();
                break;
            case ProjActualBudget::Deviation:
                report = reportCalc.getFinalResultDeviation();
                break;
            case ProjActualBudget::Sum_:
                report = reportCalc.getFinalResultSum();
                break;
        }

        if (!skipBlankId || (queryTable==2 && tmpinventTable && tmpinventTable.ItemId != ''))
        {
            if (queryTable == 2)
            {
                // Get the records from the report as per the ProjTransType id chosen by the query
                select report where report.Id == tmpinventTable.ItemId;
            }

            if (report)
            {
                if (!skipZero || (report.AmountInflow != 0 || report.AmountOutflow != 0))
                {
                    if (queryTable == 2)
                    {
                        if (itemMap.exists(tmpinventTable.ItemId))
                        {
                            conList     = itemMap.lookup(tmpinventTable.ItemId);
                            sName       = conPeek(conList,1);
                            inAmt       = conPeek(conList,2) + report.AmountInflow;
                            outAmt      = conPeek(conList,3) + report.AmountOutflow;
                            netAmt      = conPeek(conList,4) + report.AmountNet;
                            conList     = [sName, inAmt, outAmt, netAmt];
                            itemMap.insert(tmpinventTable.ItemId,conList);
                        }
                        else
                        {
                            conList = [tmpinventTable.defaultProductName(), report.AmountInflow, report.AmountOutflow, report.AmountNet];
                            itemMap.insert(tmpinventTable.ItemId,conList);
                        }
                    }
                }
            }
            else
            {
                if (!skipZero)
                {
                    if (queryTable==2 && !itemMap.exists(tmpinventTable.ItemId))
                    {
                        conList = [tmpinventTable.defaultProductName(), 0.00, 0.00, 0.00];
                        itemMap.insert(tmpinventTable.ItemId,conList);
                    }
                }
            }
        }
    }

    // Final display to the screen
    itemMapEnum =  itemMap.getEnumerator();
    while (itemMapEnum.moveNext())
    {
        showId = itemMapEnum.currentKey();
        conList = itemMapEnum.currentValue();

        projId          = showId;
        inflowAmount    = reportCalc.showAmountReport(conPeek(conList, 2),showAmount);
        outflowAmount   = reportCalc.showAmountReport(conPeek(conList, 3),showAmount);
        netflowAmount   = reportCalc.showAmountReport(conPeek(conList, 4),showAmount);
        projName        = conPeek(conList, 1);
        type            = 2;
        this.insertProjCashFlowTmp();
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
///    Processes the report business logic.
/// </summary>
/// <remarks>
///    This method provides the ability to write the report business logic. It will be called by SSRS at
///    runtime. The method should compute data and populate the data tables that will be returned to SSRS.
/// </remarks>

public void processReport()
{
    ProjCashFlowProjectReportContract contract = this.parmDataContract() as ProjCashFlowProjectReportContract;

    if ( contract.parmHour() || contract.parmExpenses() || contract.parmRevenue() ||contract.parmOnAcc())
    {
        this.processResource();
    }

    if (contract.parmItem())
    {
        this.processItem();
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>processResource</Name>
				<Source><![CDATA[
    /// <summary>
///    Processes the report business logic.
/// </summary>
/// <remarks>
///    This method provides the ability to write the report business logic. It will be called by SSRS at
///    runtime. The method should compute data and populate the data tables that will be returned to SSRS.
/// </remarks>

public void processResource()
{
    Map             emplMap, subscriptionMap;
    MapEnumerator   emplMapEnum, subscriptionMapEnum;
    ResourceView    tmpResource;
    SMASubscriptionTable    tmpsubscriptionTable;

    emplMap = new Map(Types::String, Types::Container);
    subscriptionMap = new Map(Types::String, Types::Container);

    // Set the projCashFlow object
    tmpProjCashFlow = new ProjCashFlow();
    tmpProjCashFlow = this.setVariableValues(tmpProjCashFlow);

    // Create the new object
    reportCalc = new ProjCashFlowReportsCalcEngine(tmpProjCashFlow, ProjCashFlowReportType::Worker);

    title = reportCalc.formatPeriodLabel();
    caption = reportCalc.formatSelection();

    queryRun = new SysQueryRun(this.parmQuery());

    // process blank ids
    if (!skipBlankId)
    {
        this.calculateNoId();
        if (!skipZero || (report.AmountInflow != 0 || report.AmountOutflow != 0))
        {
            conList = ['', report.AmountInflow, report.AmountOutflow, report.AmountNet];
            emplMap.insert('', conList);
        }
    }

    // Iterate through the records
    while (queryRun.next())
    {
        if (SysReportRun::changed(queryRun,tableNum(ResourceView)))
        {
            queryTable = 1;
            tmpResource = queryRun.get(tableNum(ResourceView));
            tmpProjCashFlow.parmResource(tmpResource.RecId);
            resourceId = ResourceFacade::getID(tmpProjCashFlow.parmResource());
            resourceName = ResourceFacade::getName(tmpProjCashFlow.parmResource());
        }
        if (SysReportRun::changed(queryRun,tableNum(SMASubscriptionTable)))
        {
            tmpsubscriptionTable = queryRun.get(tableNum(SMASubscriptionTable));
            tmpProjCashFlow.parmSubscriptionId(tmpsubscriptionTable.SubscriptionId);
            queryTable = 3;
        }

        reportCalc.setClientSettings();

        // Choose the kind of report and populate the temporary table
        switch (actualBudgetDeviationSum)
        {
            case ProjActualBudget::Actual:
                report = reportCalc.getFinalResultActual();
                break;
            case ProjActualBudget::Budget:
                report = reportCalc.getFinalResultBudget();
                break;
            case ProjActualBudget::Deviation:
                report = reportCalc.getFinalResultDeviation();
                break;
            case ProjActualBudget::Sum_:
                report = reportCalc.getFinalResultSum();
                break;
        }

        if (!skipBlankId ||
            (queryTable == 1 && tmpResource && tmpResource.RecId != 0) ||
            (queryTable==3 && tmpsubscriptionTable && tmpsubscriptionTable.SubscriptionId != ''))
        {
            if (queryTable == 1)
            {
                // Get the records from the report as per the ProjTransType id chosen by the query
                select report where report.Id == resourceId;
            }
            else if (queryTable == 3)
            {
                select report where report.Id == tmpsubscriptionTable.SubscriptionId;
            }

            if (report)
            {
                if (!skipZero || (report.AmountInflow != 0 || report.AmountOutflow != 0))
                {
                    if (queryTable == 1)
                    {
                        if (emplMap.exists(resourceId))
                        {
                            conList     = emplMap.lookup(resourceId);
                            sName       = conPeek(conList,1);
                            inAmt       = conPeek(conList,2) + report.AmountInflow;
                            outAmt      = conPeek(conList,3) + report.AmountOutflow;
                            netAmt      = conPeek(conList,4) + report.AmountNet;
                            conList     = [sName, inAmt, outAmt, netAmt];
                            emplMap.insert(resourceId,conList);
                        }
                        else
                        {
                            conList = [resourceName,
                                       report.AmountInflow,
                                       report.AmountOutflow,
                                       report.AmountNet];
                            emplMap.insert(resourceId,conList);
                        }
                    }
                    else if (queryTable == 3)
                    {
                        if (subscriptionMap.exists(tmpsubscriptionTable.SubscriptionId))
                        {
                            conList     = subscriptionMap.lookup(tmpsubscriptionTable.SubscriptionId);
                            sName       = conPeek(conList,1);
                            inAmt       = conPeek(conList,2) + report.AmountInflow;
                            outAmt      = conPeek(conList,3) + report.AmountOutflow;
                            netAmt      = conPeek(conList,4) + report.AmountNet;
                            conList     = [sName, inAmt, outAmt, netAmt];
                            subscriptionMap.insert(tmpsubscriptionTable.SubscriptionId, conList);
                        }
                        else
                        {
                            conList = [tmpsubscriptionTable.Name, report.AmountInflow, report.AmountOutflow, report.AmountNet];
                            subscriptionMap.insert(tmpsubscriptionTable.SubscriptionId, conList);
                        }
                    }
                }
            }
            else
            {
                if (!skipZero)
                {
                    if (queryTable == 1 && !emplMap.exists(resourceId))
                    {
                        conList = [resourceName, 0.00, 0.00, 0.00];
                        emplMap.insert(resourceId,conList);
                    }
                    else if (queryTable==3 && !subscriptionMap.exists(tmpsubscriptionTable.SubscriptionId))
                    {
                        conList = [tmpsubscriptionTable.Name, 0.00, 0.00, 0.00];
                        subscriptionMap.insert(tmpsubscriptionTable.SubscriptionId,conList);
                    }
                }
            }
        }
    }

    // Final display to the screen
    emplMapEnum =  emplMap.getEnumerator();
    while (emplMapEnum.moveNext())
    {
        showId = emplMapEnum.currentKey();
        conList = emplMapEnum.currentValue();

        projId          = showId;
        inflowAmount    = reportCalc.showAmountReport(conPeek(conList, 2),showAmount);
        outflowAmount   = reportCalc.showAmountReport(conPeek(conList, 3),showAmount);
        netflowAmount   = reportCalc.showAmountReport(conPeek(conList, 4),showAmount);
        projName        = conPeek(conList, 1);
        type            = 1;
        this.insertProjCashFlowTmp();
    }

    subscriptionMapEnum =  subscriptionMap.getEnumerator();
    while (subscriptionMapEnum.moveNext())
    {
        showId = subscriptionMapEnum.currentKey();
        conList = subscriptionMapEnum.currentValue();

        projId          = showId;
        inflowAmount    = reportCalc.showAmountReport(conPeek(conList, 2),showAmount);
        outflowAmount   = reportCalc.showAmountReport(conPeek(conList, 3),showAmount);
        netflowAmount   = reportCalc.showAmountReport(conPeek(conList, 4),showAmount);
        projName        = conPeek(conList, 1);
        type            = 2;
        this.insertProjCashFlowTmp();
    }

}

]]></Source>
			</Method>
			<Method>
				<Name>setVariableValues</Name>
				<Source><![CDATA[
    /// <summary>
///    Sets the value of the instance variables of the specified project cash flow.
/// </summary>
/// <param name="_projCashFlow">
///    The project cash flow of which to set the value of the instance variables.
/// </param>
/// <returns>
///    The instance of the <c>ProjCashFlow</c> class that has the assigned parameter values.
/// </returns>
public ProjCashFlow setVariableValues(ProjCashFlow _projCashFlow)
{
    ProjCashFlowProjectReportContract contract = this.parmDataContract() as ProjCashFlowProjectReportContract;

    actualBudgetDeviationSum    =   contract.parmActualBudgetDeviationSum();
    skipBlankId                 =   contract.parmSkipBlankId();
    skipZero                    =   contract.parmSkipZero();
    showAmount                  =   contract.parmShowAmount();

    _projCashFlow.parmFixedPrice(contract.parmFixedPrice());
    _projCashFlow.parmTimeMaterial(contract.parmTimeMaterial());
    _projCashFlow.parmInternalCost(contract.parmInternalCost());
    _projCashFlow.parmInvestment(contract.parmInvestment());
    _projCashFlow.parmTimeProject(contract.parmTime());

    _projCashFlow.parmHour(contract.parmHour());
    _projCashFlow.parmExpenses(contract.parmExpenses());
    _projCashFlow.parmFee(contract.parmRevenue());
    _projCashFlow.parmOnAcc(contract.parmOnAcc());
    _projCashFlow.parmItem(contract.parmItem());

    _projCashFlow.parmProjectFromDate(contract.parmProjFromDate());
    _projCashFlow.parmProjectToDate(contract.parmProjToDate());
    _projCashFlow.parmPaymentFromDate(contract.parmPaymentFromDate());
    _projCashFlow.parmPaymentToDate(contract.parmPaymentToDate());
    _projCashFlow.parmProjectBreakDate(contract.parmProjBreakDate());
    _projCashFlow.parmPaymentBreakDate(contract.parmPaymentBreakDate());

    _projCashFlow.parmForecastModelId(contract.parmForecastModelId());
    _projCashFlow.parmActualBudget(actualBudgetDeviationSum);
    _projCashFlow.parmIncludedExpectedPayment(contract.parmInclExpectedPayment());
    _projCashFlow.parmIncludedPaidPayment(contract.parmInclPaidPayment());

    _projCashFlow.parmDaysAddedToSalesPayment(contract.parmAddDaysToSales());
    _projCashFlow.parmDaysAddedToCostPayment(contract.parmAddDaysToCost());

    _projCashFlow.parmMinimumCostPaymentDate(contract.parmExpectedCostPayDate());
    _projCashFlow.parmMinimumSalesPaymentDate(contract.parmMinimumSalesPayDate());

    _projCashFlow.parmShowAmount(showAmount);

    return _projCashFlow;
}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
