<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsCWValidation_MinDelta</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PdsCWValidation_MinDelta</c> class is a specialized version of the <c>PdsCWValidation_Min</c> class
/// that calculates inventory and catch weight quantity adjustments based on changes between the original and
/// current catch weight or inventory quantity correspondingly.
/// </summary>
class PdsCWValidation_MinDelta extends PdsCWValidation_Min
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustQtyPair</Name>
				<Source><![CDATA[
    /// <summary>
    /// Syncs a pair of catch weight and inventory quantity fields.
    /// </summary>
    /// <param name="_fieldPair">
    /// The field pair specification.
    /// </param>
    /// <param name="_adjustCWQty">
    /// A flag that indicates whether the catch weight field should be adjusted from the inventory quantity
    /// field.
    /// </param>
    /// <remarks>
    /// To avoid the circular update, the update of the opposite field is only being done, if the field has
    /// not been set yet.The calculations also take into account, if a secondary unit has been specified
    /// for the regular quantity field.
    /// </remarks>
    protected void adjustQtyPair(
        PdsCWQtyFieldPair _fieldPair,
        boolean           _adjustCWQty = false)
    {
        Common origBuffer = buffer.orig();

        if (origBuffer.RecId == 0)
        {
            // If record is not committed use the regular calculation algorithm
            super(_fieldPair, _adjustCWQty);
        }
        else
        {
            if (_adjustCWQty)
            {
                if (buffer.(_fieldPair.parmCWFieldId()) == 0)
                {
                    if (buffer.(_fieldPair.parmQtyFieldId()) < origBuffer.(_fieldPair.parmQtyFieldId()))
                    {
                        // Calculate  quantity using regular conversion algorithm  when catch weight quantity is decreased.
                        super(_fieldPair, _adjustCWQty);
                    }
                    else
                    {
                        // Calculate new catch weight quantity based on original catch weight quantity and the difference between new and original inventory quantity
                        buffer.(_fieldPair.parmCWFieldId()) = origBuffer.(_fieldPair.parmCWFieldId())
                            + PdsCatchWeight::cwQty(this.itemId(), buffer.(_fieldPair.parmQtyFieldId()) - origBuffer.(_fieldPair.parmQtyFieldId()));
                    }
                }
            }
            else if (_fieldPair.parmUnitFieldId())
            {
                if ((buffer.(_fieldPair.parmQtyFieldId()) == 0)
                    || !_fieldPair.parmAllowQtyEdit())
                {
                    if (buffer.(_fieldPair.parmCWFieldId()) < origBuffer.(_fieldPair.parmCWFieldId()))
                    {
                        // Calculate  quantity using regular conversion algorithm  when catch weight quantity is decreased.
                        super(_fieldPair, _adjustCWQty);
                    }
                    else
                    {
                        // Calculate new inventory quantity based on original inventory quantity and the difference between new and original catch weight quantity
                        buffer.(_fieldPair.parmQtyFieldId()) = origBuffer.(_fieldPair.parmQtyFieldId())
                            + this.convertInventQty(
                                buffer.(_fieldPair.parmCWFieldId()) - origBuffer.(_fieldPair.parmCWFieldId()),
                                buffer.(_fieldPair.parmUnitFieldId()));
                    }
                }
            }
            else
            {
                // Calculate new inventory quantity based on original inventory quantity and the difference between new and original catch weight quantity
                if (buffer.(_fieldPair.parmCWFieldId()) < origBuffer.(_fieldPair.parmCWFieldId()))
                {
                    // Calculate  quantity using regular conversion algorithm  when catch weight quantity is decreased.
                    super(_fieldPair, _adjustCWQty);
                }
                else
                {
                    if ((buffer.(_fieldPair.parmQtyFieldId()) == 0)
                        || !_fieldPair.parmAllowQtyEdit())
                    {
                        buffer.(_fieldPair.parmQtyFieldId()) = origBuffer.(_fieldPair.parmQtyFieldId())
                            + this.convertInventQty(buffer.(_fieldPair.parmCWFieldId()) - origBuffer.(_fieldPair.parmCWFieldId()));
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PdsCWValidation_MinDelta construct()
    {
        return new PdsCWValidation_MinDelta();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>