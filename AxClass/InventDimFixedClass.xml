<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimFixedClass</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventDimFixedClass</c> class packs and unpacks an <c>InventDimParm</c> buffer into an <c>InventDimFixed</c> integer.
/// </summary>
public class InventDimFixedClass
{
    InventDimParm inventDimParm;

    const int InventLocationId_Idx = 0;
    const int Batch_Idx = 1;
    const int Location_Idx = 2;
    const int SerialId_Idx = 4;
    const int ConfigId_Idx = 5;
    const int InventSizeId_Idx = 6;
    const int InventColorId_Idx = 7;
    const int InventSiteId_Idx = 8;
    const int InventStyleId_Idx = 9;
    const int InventDimension1_Idx = 10;
    const int InventDimension2_Idx = 11;
    const int InventDimension3_Idx = 12;
    const int InventDimension4_Idx = 13;
    const int InventDimension5_Idx = 14;
    const int InventDimension6_Idx = 15;
    const int GTDId_Idx = 16;
    const int InventProfileId_Idx = 17;
    const int InventOwnerId_Idx = 18;
    const int InventDimension7_Idx = 19;
    const int WhsLicensePlateId_Idx = 20;
    const int WhsInventStatusId_Idx = 21;
    const int InventDimension8_Idx = 22;
    const int InventDimension9_Idx = 23;
    const int InventDimension10_Idx = 24;
	const int InventVersionId_Idx = 25;
	const int InventDimension11_Idx = 26;
	const int InventDimension12_Idx = 27;

    #INVENTDIMDEVELOP
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromInventdDimParm</Name>
				<Source><![CDATA[
    void initFromInventdDimParm(InventDimParm _inventDimParm)
    {
        inventDimParm.data(_inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventDimFixed</Name>
				<Source><![CDATA[
    void initFromInventDimFixed(InventDimFixed inventDimFixed)
    {
        #inventDimDevelop

        inventDimParm.InventSiteIdFlag      = InventDimFixedClass::dimFixed(inventDimFixed, InventSiteId_Idx);
        inventDimParm.InventLocationIdFlag  = InventDimFixedClass::dimFixed(inventDimFixed, InventLocationId_Idx);
        inventDimParm.InventBatchIdFlag     = InventDimFixedClass::dimFixed(inventDimFixed, Batch_Idx);
        inventDimParm.wmsLocationIdFlag     = InventDimFixedClass::dimFixed(inventDimFixed, Location_Idx);
        inventDimParm.InventSerialIdFlag    = InventDimFixedClass::dimFixed(inventDimFixed, SerialId_Idx);
        inventDimParm.ConfigIdFlag          = InventDimFixedClass::dimFixed(inventDimFixed, ConfigId_Idx);
        inventDimParm.InventSizeIdFlag      = InventDimFixedClass::dimFixed(inventDimFixed, InventSizeId_Idx);
        inventDimParm.InventColorIdFlag     = InventDimFixedClass::dimFixed(inventDimFixed, InventColorId_Idx);
		inventDimParm.InventVersionIdFlag   = InventDimFixedClass::dimFixed(inventDimFixed, InventVersionId_Idx);
        inventDimParm.LicensePlateFlag      = InventDimFixedClass::dimFixed(inventDimFixed, WhsLicensePlateId_Idx);
        inventDimParm.InventStatusFlag      = InventDimFixedClass::dimFixed(inventDimFixed, WhsInventStatusId_Idx);
        inventDimParm.InventStyleIdFlag     = InventDimFixedClass::dimFixed(inventDimFixed, InventStyleId_Idx);

        inventDimParm.InventDimension1Flag  = InventDimFixedClass::dimFixed(inventDimFixed, InventDimension1_Idx);
        inventDimParm.InventDimension2Flag  = InventDimFixedClass::dimFixed(inventDimFixed, InventDimension2_Idx);
        inventDimParm.InventDimension3Flag  = InventDimFixedClass::dimFixed(inventDimFixed, InventDimension3_Idx);
        inventDimParm.InventDimension4Flag  = InventDimFixedClass::dimFixed(inventDimFixed, InventDimension4_Idx);
        inventDimParm.InventDimension5Flag  = InventDimFixedClass::dimFixed(inventDimFixed, InventDimension5_Idx);
        inventDimParm.InventDimension6Flag  = InventDimFixedClass::dimFixed(inventDimFixed, InventDimension6_Idx);
        inventDimParm.InventDimension7Flag  = InventDimFixedClass::dimFixed(inventDimFixed, InventDimension7_Idx);
        inventDimParm.InventDimension8Flag  = InventDimFixedClass::dimFixed(inventDimFixed, InventDimension8_Idx);
        inventDimParm.InventDimension9Flag  = InventDimFixedClass::dimFixed(inventDimFixed, InventDimension9_Idx);
        inventDimParm.InventDimension10Flag = InventDimFixedClass::dimFixed(inventDimFixed, InventDimension10_Idx);
		inventDimParm.InventDimension11Flag = InventDimFixedClass::dimFixed(inventDimFixed, InventDimension11_Idx);
		inventDimParm.InventDimension12Flag = InventDimFixedClass::dimFixed(inventDimFixed, InventDimension12_Idx);

        // <GEERU>
        inventDimParm.InventGTDIdFlag_RU     = InventDimFixedClass::dimFixed(inventDimFixed, GTDId_Idx);
        inventDimParm.InventProfileIdFlag_RU = InventDimFixedClass::dimFixed(inventDimFixed, InventProfileId_Idx);
        inventDimParm.InventOwnerIdFlag_RU   = InventDimFixedClass::dimFixed(inventDimFixed, InventOwnerId_Idx);
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets flags for all the specified non-empty dimensions.
    /// </summary>
    /// <param name="_inventDim">
    /// The inventory dimensions.
    /// </param>
    /// <param name="_dimFieldList">
    /// The list of dimensions that need to be considered.
    /// </param>
    /// <remarks>
    /// By default all dimensions are considered.
    /// </remarks>
    internal void initFromInventDim(InventDim _inventDim, List _dimFieldList = InventDim::dimFieldsList())
    {
        inventDimParm.initFromInventDim(_inventDim, _dimFieldList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromReservationHierarchyList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the fields that are included in the specified list to yes.
    /// </summary>
    /// <param name="_hierarchyList">
    /// The list of the reservation hierarchy.
    /// </param>
    internal void initFromReservationHierarchyList(List _hierarchyList)
    {
        WHSReservationHierarchyInventDimUtil::initInventDimParmFromHierarchyList(_hierarchyList, inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimParm</Name>
				<Source><![CDATA[
    void initInventDimParm(InventDimParm _inventDimParm)
    {
        _inventDimParm.data(inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimFixed</Name>
				<Source><![CDATA[
    InventDimFixed inventDimFixed()
    {
        InventDimFixed inventDimFixed;

        #inventDimDevelop

        if (inventDimParm.InventSiteIdFlag)         inventDimFixed = InventDimFixedClass::setField(inventDimFixed, InventSiteId_Idx);
        if (inventDimParm.InventLocationIdFlag)     inventDimFixed = InventDimFixedClass::setField(inventDimFixed, InventLocationId_Idx);
        if (inventDimParm.InventBatchIdFlag)        inventDimFixed = InventDimFixedClass::setField(inventDimFixed, Batch_Idx);
        if (inventDimParm.wmsLocationIdFlag)        inventDimFixed = InventDimFixedClass::setField(inventDimFixed, Location_Idx);
        if (inventDimParm.InventSerialIdFlag)       inventDimFixed = InventDimFixedClass::setField(inventDimFixed, SerialId_Idx);
        if (inventDimParm.ConfigIdFlag)             inventDimFixed = InventDimFixedClass::setField(inventDimFixed, ConfigId_Idx);
        if (inventDimParm.InventSizeIdFlag)         inventDimFixed = InventDimFixedClass::setField(inventDimFixed, InventSizeId_Idx);
        if (inventDimParm.InventColorIdFlag)        inventDimFixed = InventDimFixedClass::setField(inventDimFixed, InventColorId_Idx);
		if (inventDimParm.InventVersionIdFlag)      inventDimFixed = InventDimFixedClass::setField(inventDimFixed, InventVersionId_Idx);
        if (inventDimParm.LicensePlateFlag)         inventDimFixed = InventDimFixedClass::setField(inventDimFixed, WhsLicensePlateId_Idx);
        if (inventDimParm.InventStatusFlag)         inventDimFixed = InventDimFixedClass::setField(inventDimFixed, WhsInventStatusId_Idx);
        if (inventDimParm.InventStyleIdFlag)        inventDimFixed = InventDimFixedClass::setField(inventDimFixed, InventStyleId_Idx);
        if (inventDimParm.InventDimension1Flag)     inventDimFixed = InventDimFixedClass::setField(inventDimFixed, InventDimension1_Idx);
        if (inventDimParm.InventDimension2Flag)     inventDimFixed = InventDimFixedClass::setField(inventDimFixed, InventDimension2_Idx);
        if (inventDimParm.InventDimension3Flag)     inventDimFixed = InventDimFixedClass::setField(inventDimFixed, InventDimension3_Idx);
        if (inventDimParm.InventDimension4Flag)     inventDimFixed = InventDimFixedClass::setField(inventDimFixed, InventDimension4_Idx);
        if (inventDimParm.InventDimension5Flag)     inventDimFixed = InventDimFixedClass::setField(inventDimFixed, InventDimension5_Idx);
        if (inventDimParm.InventDimension6Flag)     inventDimFixed = InventDimFixedClass::setField(inventDimFixed, InventDimension6_Idx);
        if (inventDimParm.InventDimension7Flag)     inventDimFixed = InventDimFixedClass::setField(inventDimFixed, InventDimension7_Idx);
        if (inventDimParm.InventDimension8Flag)     inventDimFixed = InventDimFixedClass::setField(inventDimFixed, InventDimension8_Idx);
        if (inventDimParm.InventDimension9Flag)     inventDimFixed = InventDimFixedClass::setField(inventDimFixed, InventDimension9_Idx);
        if (inventDimParm.InventDimension10Flag)    inventDimFixed = InventDimFixedClass::setField(inventDimFixed, InventDimension10_Idx);
		if (inventDimParm.InventDimension11Flag)    inventDimFixed = InventDimFixedClass::setField(inventDimFixed, InventDimension11_Idx);
		if (inventDimParm.InventDimension12Flag)    inventDimFixed = InventDimFixedClass::setField(inventDimFixed, InventDimension12_Idx);
        // <GEERU>
        if (inventDimParm.InventGTDIdFlag_RU)       inventDimFixed = InventDimFixedClass::setField(inventDimFixed, GTDId_Idx);
        if (inventDimParm.InventProfileIdFlag_RU)   inventDimFixed = InventDimFixedClass::setField(inventDimFixed, InventProfileId_Idx);
        if (inventDimParm.InventOwnerIdFlag_RU)     inventDimFixed = InventDimFixedClass::setField(inventDimFixed, InventOwnerId_Idx);
        // </GEERU>

        return inventDimFixed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationIdFlag</Name>
				<Source><![CDATA[
    NoYesId parmInventLocationIdFlag(NoYesId fixed = inventDimParm.InventLocationIdFlag)
    {
        inventDimParm.InventLocationIdFlag = fixed;
        return inventDimParm.InventLocationIdFlag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventOwnerIdFlag_RU</Name>
				<Source><![CDATA[
    NoYesId parmInventOwnerIdFlag_RU(NoYesId _inventOwnerIdFlag = inventDimParm.InventOwnerIdFlag_RU)
    {
        inventDimParm.InventOwnerIdFlag_RU = _inventOwnerIdFlag;
        return inventDimParm.InventOwnerIdFlag_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventProfileIdFlag_RU</Name>
				<Source><![CDATA[
    NoYesId parmInventProfileIdFlag_RU(NoYesId _inventProfileIdFlag = inventDimParm.InventProfileIdFlag_RU)
    {
        inventDimParm.InventProfileIdFlag_RU = _inventProfileIdFlag;
        return inventDimParm.InventProfileIdFlag_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSiteIdFlag</Name>
				<Source><![CDATA[
    NoYesId parmInventSiteIdFlag(NoYesId fixed = inventDimParm.InventSiteIdFlag)
    {
        inventDimParm.InventSiteIdFlag = fixed;
        return inventDimParm.InventSiteIdFlag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWMSLocationIdFlag</Name>
				<Source><![CDATA[
    NoYesId parmWMSLocationIdFlag(NoYesId fixed = inventDimParm.wmsLocationIdFlag)
    {
        inventDimParm.wmsLocationIdFlag = fixed;
        return inventDimParm.wmsLocationIdFlag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearField</Name>
				<Source><![CDATA[
    static InventDimFixed clearField(InventDimFixed inventDimFixed, Integer Idx)
    {
        inventDimFixed  = inventDimFixed & (maxInt() ^ (1 << Idx));
        return inventDimFixed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearNonPrimaryLocationDimensions</Name>
				<Source><![CDATA[
    static InventDimFixed clearNonPrimaryLocationDimensions(
        InventDimFixed          _inventDimFixed,
        InventDimGroupSetup     _inventDimGroupSetup)
    {
        InventDimGroupFieldSetupEnumerator      enumerator = _inventDimGroupSetup.getFieldSetupEnumerator();
        InventDimFixed                          inventDimFixed = _inventDimFixed;

        while (enumerator.moveNext())
        {
            InventDimGroupFieldSetup inventDimGroupFieldSetup = enumerator.current();
            FieldId inventDimFieldId = inventDimGroupFieldSetup.dimFieldId();

            if (inventDimGroupFieldSetup.isActive()
                && InventDim::isFieldIdStorageDimension(inventDimFieldId)
                && !inventDimGroupFieldSetup.isPrimaryStockingEnabled())
            {
                inventDimFixed = InventDimFixedClass::clearField(inventDimFixed, InventDimFixedClass::fieldId2Idx(inventDimFieldId));                
            }
        }
        return inventDimFixed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimFixed</Name>
				<Source><![CDATA[
    static NoYesId dimFixed(InventDimFixed inventDimFixed, Integer Idx)
    {
        return ((inventDimFixed & (1 << Idx)) >> Idx) ? NoYes::Yes : NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldId2Idx</Name>
				<Source><![CDATA[
    static Integer fieldId2Idx(FieldId fieldId)
    {
        #InventDimDevelop

        switch (fieldId)
        {
            case fieldNum(InventDim, InventSiteId)      :     return InventSiteId_Idx;
            case fieldNum(InventDim, InventLocationId)  :     return InventLocationId_Idx;
            case fieldNum(InventDim, InventBatchId)     :     return Batch_Idx;
            case fieldNum(InventDim, wmsLocationId)     :     return Location_Idx;
            case fieldNum(InventDim, InventSerialId)    :     return SerialId_Idx;
            case fieldNum(InventDim, ConfigId)          :     return ConfigId_Idx;
            case fieldNum(InventDim, InventSizeId)      :     return InventSizeId_Idx;
            case fieldNum(InventDim, InventColorId)     :     return InventColorId_Idx;
			case fieldNum(InventDim, InventVersionId)   :     return InventVersionId_Idx;
            case fieldNum(InventDim, LicensePlateId)    :     return WhsLicensePlateId_Idx;
            case fieldNum(InventDim, InventStatusId)    :     return WhsInventStatusId_Idx;
            case fieldNum(InventDim, InventStyleId)     :     return InventStyleId_Idx;
            case fieldNum(InventDim, InventDimension1)  :     return InventDimension1_Idx;
            case fieldNum(InventDim, InventDimension2)  :     return InventDimension2_Idx;
            case fieldNum(InventDim, InventDimension3)  :     return InventDimension3_Idx;
            case fieldNum(InventDim, InventDimension4)  :     return InventDimension4_Idx;
            case fieldNum(InventDim, InventDimension5)  :     return InventDimension5_Idx;
            case fieldNum(InventDim, InventDimension6)  :     return InventDimension6_Idx;
            case fieldNum(InventDim, InventDimension7)  :     return InventDimension7_Idx;
            case fieldNum(InventDim, InventDimension8)  :     return InventDimension8_Idx;
            case fieldNum(InventDim, InventDimension9)  :     return InventDimension9_Idx;
            case fieldNum(InventDim, InventDimension10) :     return InventDimension10_Idx;
			case fieldNum(InventDim, InventDimension11) :     return InventDimension11_Idx;
			case fieldNum(InventDim, InventDimension12) :     return InventDimension12_Idx;
            // <GEERU>
            case fieldNum(InventDim, InventGTDId_RU)    :     return GTDId_Idx;
            case fieldNum(InventDim, InventProfileId_RU):     return InventProfileId_Idx;
            case fieldNum(InventDim, InventOwnerId_RU)  :     return InventOwnerId_Idx;
            // </GEERU>
        }

        throw(error(strFmt("@SYS19306", funcName())));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPrimaryDim</Name>
				<Source><![CDATA[
    static InventDimFixed initPrimaryDim(InventDimGroupSetup _inventDimGroupSetup)
    {
        InventDimParm   inventDimParm;

        if (_inventDimGroupSetup)
        {
            _inventDimGroupSetup.inventDimParmActivePrimaryDimension(inventDimParm);
        }

        return InventDimFixedClass::inventDimParm2InventDimFixed(inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimFieldsDifferent</Name>
				<Source><![CDATA[
    static InventDimFixed inventDimFieldsDifferent(InventDim inventDim1, InventDim inventDim2, boolean ignoreBlank = false)
    {
        InventDimFixed  inventDimFixed = 0;
        ListEnumerator  enumerator  = InventDim::dimFieldListEnumerator();

        while (enumerator.moveNext())
        {
            FieldId inventDimFieldId = enumerator.current();
            if (! ignoreBlank)
            {
                if (inventDim1.(inventDimFieldId) != inventDim2.(inventDimFieldId))
                {
                    inventDimFixed = InventDimFixedClass::setField(inventDimFixed, InventDimFixedClass::fieldId2Idx(inventDimFieldId));
                }
            }
            else
            {
                if (inventDim1.(inventDimFieldId) != inventDim2.(inventDimFieldId) && inventDim1.(inventDimFieldId) && inventDim2.(inventDimFieldId))
                {
                    inventDimFixed = InventDimFixedClass::setField(inventDimFixed, InventDimFixedClass::fieldId2Idx(inventDimFieldId));
                }
            }
        }
        return inventDimFixed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimFixed2InventDimParm</Name>
				<Source><![CDATA[
    static void inventDimFixed2InventDimParm(InventDimFixed inventDimFixed, InventDimParm inventDimParm = null)
    {
        InventDimFixedClass inventDimFixedClass = InventDimFixedClass::newFixedDim(inventDimFixed);

        inventDimFixedClass.initInventDimParm(inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimParm2InventDimFixed</Name>
				<Source><![CDATA[
    static InventDimFixed inventDimParm2InventDimFixed(InventDimParm inventDimParm)
    {
        InventDimFixedClass inventDimFixedClass = InventDimFixedClass::newInventDimParm(inventDimParm);

        return inventDimFixedClass.inventDimFixed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocationIdFlag</Name>
				<Source><![CDATA[
    static NoYesId inventLocationIdFlag(InventDimFixed inventDimFixed)
    {
        return InventDimFixedClass::newFixedDim(inventDimFixed).parmInventLocationIdFlag();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSiteIdFlag</Name>
				<Source><![CDATA[
    static NoYesId inventSiteIdFlag(InventDimFixed inventDimFixed)
    {
        return InventDimFixedClass::newFixedDim(inventDimFixed).parmInventSiteIdFlag();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventLocationIdFlagSet</Name>
				<Source><![CDATA[
    static boolean isInventLocationIdFlagSet(InventDimFixed inventDimFixed)
    {
        return ((inventDimFixed & (1 << InventLocationId_Idx)) >> InventLocationId_Idx) ? NoYes::Yes : NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFixedDim</Name>
				<Source><![CDATA[
    static InventDimFixedClass newFixedDim(InventDimFixed inventDimFixed)
    {
        InventDimFixedClass  inventDimFixedClass = new InventDimFixedClass();

        inventDimFixedClass.initFromInventDimFixed(inventDimFixed);
        return inventDimFixedClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventDimParm</Name>
				<Source><![CDATA[
    static InventDimFixedClass newInventDimParm(InventDimParm inventDimParm)
    {
        InventDimFixedClass  inventDimFixedClass = new InventDimFixedClass();

        inventDimFixedClass.initFromInventdDimParm(inventDimParm);
        return inventDimFixedClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventDimFixedClass</c> class and sets flags for all the specified non-empty dimensions.
    /// </summary>
    /// <param name="_inventDim">
    /// The inventory dimensions.
    /// </param>
    /// <param name="_dimFieldList">
    /// The list of dimensions that need to be considered.
    /// </param>
    /// <returns>
    /// The instance of the <c>InventDimFixedClass</c> class.
    /// </returns>
    /// <remarks>
    /// By default all dimensions are considered.
    /// </remarks>
    internal static InventDimFixedClass newInventDim(InventDim _inventDim, List _dimFieldList = InventDim::dimFieldsList())
    {
        InventDimFixedClass  inventDimFixedClass = new InventDimFixedClass();

        inventDimFixedClass.initFromInventDim(_inventDim, _dimFieldList);
        return inventDimFixedClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReservationHierarchyList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventDimFixedClass</c> class and sets the fields that are included in the specified list to yes.
    /// </summary>
    /// <param name="_hierarchyList">
    /// The list of the reservation hierarchy.
    /// </param>
    /// <returns>
    /// The instance of the <c>InventDimFixedClass</c> class.
    /// </returns>
    internal static InventDimFixedClass newReservationHierarchyList(List _hierarchyList)
    {
        InventDimFixedClass  inventDimFixedClass = new InventDimFixedClass();

        inventDimFixedClass.initFromReservationHierarchyList(_hierarchyList);
        return inventDimFixedClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setField</Name>
				<Source><![CDATA[
    static InventDimFixed setField(InventDimFixed inventDimFixed, Integer Idx)
    {
        inventDimFixed  = inventDimFixed | (1 << Idx);
        return inventDimFixed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsLocationIdFlag</Name>
				<Source><![CDATA[
    static NoYesId wmsLocationIdFlag(InventDimFixed inventDimFixed)
    {
        return InventDimFixedClass::newFixedDim(inventDimFixed).parmWMSLocationIdFlag();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>