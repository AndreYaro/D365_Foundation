<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMobileAppUserDisplaySettingsProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using EnvironmentFactory = Microsoft.Dynamics.ApplicationPlatform.Environment.EnvironmentFactory;

/// <summary>
/// The <c>WHSMobileAppUserDisplaySettingsProvider</c> class is the providing class for the mobile device user settings.
/// </summary>
internal final class WHSMobileAppUserDisplaySettingsProvider
{
    private WHSMobileAppUserDisplaySettings userDisplaySettings;
    private LanguageId languageId = LanguageTable::defaultLanguage();

    private const str LabelAttributeName = 'text';
    private const str SelectedAttributeName = 'selected';
    private const str ValueAttributeName = 'value';
    private const str LanguagesNode = 'Languages';
    private const str DontShowNodeName = 'DontShow';
    private const str ServerAadTenantIdNodeName = 'ServerAadTenantId';
    private const str ServerEnvironmentIdNodeName = 'ServerEnvironmentId';
    private const str ServerAzureRegionNodeName = 'ServerAzureRegion';
    private const str ServerVersionNodeName = 'ServerVersion';
    private const str BatchFlightsNodeName = 'BatchFlightsEnabled';
    private const str DontShowEntityNodeName = 'Entity';
    private const str CategoryAttributeName = 'category';
    private const str TargetsAttributeName = 'targets';

    private const str ListSeparator = '||';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an instance of the <c>WHSMobileAppUserDisplaySettingsProvider</c> class.
    /// </summary>
    /// <returns>The created instance.</returns>
    [Hookable(false)]
    internal static WHSMobileAppUserDisplaySettingsProvider construct()
    {
        return new WHSMobileAppUserDisplaySettingsProvider();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUserSettingsFromXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates or creates mobile device user settings from the XML .
    /// </summary>
    /// <param name = "_xml">xml representing the mobile device user settings which should be changed.</param>
    [Hookable(false)]
    internal void setUserSettingsFromXML(XML _xml)
    {
        XmlDocument xmlDocument = XmlDocument::newXml(_xml);
        XmlNode userSettingsNode = xmlDocument.root();
        
        WHSUserId userId = userSettingsNode.getNamedElement(fieldStr(WHSMobileAppUserDisplaySettings, UserId)).text();
        WHSMobileAppDeviceBrandId deviceBrand = userSettingsNode.getNamedElement(fieldStr(WHSMobileAppUserDisplaySettings, DeviceBrand)).text();
        WHSMobileAppDeviceModelId deviceModel = deviceBrand != '' ? userSettingsNode.getNamedElement(fieldStr(WHSMobileAppUserDisplaySettings, DeviceModel)).text() : '';

        ttsbegin;

        this.createDeviceBrandAndModelIfNotExist(deviceBrand, deviceModel);
        
        userDisplaySettings = WHSMobileAppUserDisplaySettings::find(userId, deviceBrand, deviceModel, true);

        if (!userDisplaySettings)
        {
            userDisplaySettings.initValue();
            userDisplaySettings.UserId       = userId;
            userDisplaySettings.DeviceBrand  = deviceBrand;
            userDisplaySettings.DeviceModel  = deviceModel;
        }
        
        userDisplaySettings.UserSettingsXml = _xml;

        this.setFieldsValuesFromNode(userSettingsNode);

        if (userDisplaySettings.validateWrite())
        {
            userDisplaySettings.write();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldsValuesFromNode</Name>
				<Source><![CDATA[
    protected internal void setFieldsValuesFromNode(XmlNode _userSettingsNode)
    {
        this.setFieldValueFromNode(_userSettingsNode, fieldNum(WHSMobileAppUserDisplaySettings, DeviceClass));
        this.setFieldValueFromNode(_userSettingsNode, fieldNum(WHSMobileAppUserDisplaySettings, ButtonPosition));
        this.setFieldValueFromNode(_userSettingsNode, fieldNum(WHSMobileAppUserDisplaySettings, ScanWithCamera));
        this.setFieldValueFromNode(_userSettingsNode, fieldNum(WHSMobileAppUserDisplaySettings, ShowProductPhoto));
        this.setFieldValueFromNode(_userSettingsNode, fieldNum(WHSMobileAppUserDisplaySettings, DisplayColorTheme));
        this.setFieldValueFromNode(_userSettingsNode, fieldNum(WHSMobileAppUserDisplaySettings, SoundLevel));
        this.setFieldValueFromNode(_userSettingsNode, fieldNum(WHSMobileAppUserDisplaySettings, VibrationLevel));
        this.setFieldValueFromNode(_userSettingsNode, fieldNum(WHSMobileAppUserDisplaySettings, TextScalePercentage));
        this.setFieldValueFromNode(_userSettingsNode, fieldNum(WHSMobileAppUserDisplaySettings, ButtonScalePercentage));
        this.setFieldValueFromNode(_userSettingsNode, fieldNum(WHSMobileAppUserDisplaySettings, InteractionCategory));
        this.setFieldValueFromNode(_userSettingsNode, fieldNum(WHSMobileAppUserDisplaySettings, FieldFilteringAndOrdering));
        this.setFieldValueFromNode(_userSettingsNode, fieldNum(WHSMobileAppUserDisplaySettings, ProductPhotoPlacement));
        this.setFieldValueFromNode(_userSettingsNode, fieldNum(WHSMobileAppUserDisplaySettings, SpinnerMode));

        if (WHSMobileAppPlayRejectedScanSoundSettingFlight::instance().isEnabled())
        {
            this.setFieldValueFromNode(_userSettingsNode, fieldNum(WHSMobileAppUserDisplaySettings, PlayRejectedScanSoundSetting));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldValueFromNode</Name>
				<Source><![CDATA[
    protected internal void setFieldValueFromNode(XmlNode _userSettingsNode, FieldId _fieldId)
    {
        DictField dictField = new SysDictField(tableNum(WHSMobileAppUserDisplaySettings), _fieldId);
        XmlNode settingNode = _userSettingsNode.getNamedElement(dictField.name());

        if (settingNode)
        {
            switch(dictField.baseType())
            {
                case Types::String :
                    userDisplaySettings.(_fieldId) = settingNode.text();
                    break;
                case Types::Integer :
                    userDisplaySettings.(_fieldId) = any2Int(settingNode.text());
                    break;
                case Types::Enum :
                    userDisplaySettings.(_fieldId) = symbol2Enum(dictField.enumId(), settingNode.text());
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDeviceBrandAndModelIfNotExist</Name>
				<Source><![CDATA[
    private void createDeviceBrandAndModelIfNotExist(WHSMobileAppDeviceBrandId _deviceBrand, WHSMobileAppDeviceModelId _deviceModel)
    {
        WHSMobileAppDeviceBrandTable::createIfNotExists(_deviceBrand);
        WHSMobileAppDeviceModelTable::createIfNotExists(_deviceBrand, _deviceModel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateUserSettingsXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the mobile device user settings.
    /// </summary>
    /// <param name = "_userId">User id who runs the service.</param>
    /// <param name = "_deviceBrand">Device brand id from which service is run.</param>
    /// <param name = "_deviceModel">Device model id from which service is run.</param>
    /// <param name = "_deviceClass">Device class type from which service is run.</param>
    /// <returns>xml representing the mobile device user settings.</returns>
    [Hookable(false)]
    internal XML generateUserSettingsXML(WHSUserId _userId,
        WHSMobileAppDeviceBrandId _deviceBrand,
        WHSMobileAppDeviceModelId _deviceModel,
        WHSMobileAppDeviceClass _deviceClass)
    {
        const str UserSettingsNodeName = 'UserSettings';

        languageId = WHSWorkUser::retrieveWorkUserLanguage(_userId);

        XmlDocument xmlDocument = XmlDocument::newBlank();
        XmlNode userSettingsNode = xmlDocument.createElement(UserSettingsNodeName);
        xmlDocument.appendChild(userSettingsNode);

        userDisplaySettings = this.getUserSettings(_userId, _deviceBrand, _deviceModel, _deviceClass);

        if (!userDisplaySettings)
        {
            userDisplaySettings.initValue();
        }

        this.addNodesFromFields(xmlDocument,userSettingsNode);

        if (userDisplaySettings.UserSettingsXml != "")
        {
            this.addUnknownNodesFromSavedXml(xmlDocument, userSettingsNode, userDisplaySettings.UserSettingsXml);
        }

        this.addDontShowNode(xmlDocument, userSettingsNode, _userId);

        var environment = EnvironmentFactory::GetApplicationEnvironment();
        this.addNodeFromStrings(xmlDocument, userSettingsNode, ServerAadTenantIdNodeName, environment.Aad.TenantDomainGUID);
        this.addNodeFromStrings(xmlDocument, userSettingsNode, ServerEnvironmentIdNodeName, environment.LCS.LCSEnvironmentId);
        this.addNodeFromStrings(xmlDocument, userSettingsNode, ServerAzureRegionNodeName, environment.Common.AzureRegion);
        this.addNodeFromStrings(xmlDocument, userSettingsNode, ServerVersionNodeName, this.versionNumber());
        this.addBatchFlightsNode(xmlDocument, userSettingsNode);

        return xmlDocument.xml();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNodesFromFields</Name>
				<Source><![CDATA[
    protected internal void addNodesFromFields(XmlDocument _xmlDocument, XmlNode _userSettingsNode)
    {
        this.addNodeFromField(_xmlDocument, _userSettingsNode, fieldNum(WHSMobileAppUserDisplaySettings, UserId));
        this.addNodeFromField(_xmlDocument, _userSettingsNode, fieldNum(WHSMobileAppUserDisplaySettings, DeviceBrand));
        this.addNodeFromField(_xmlDocument, _userSettingsNode, fieldNum(WHSMobileAppUserDisplaySettings, DeviceModel));
        this.addNodeFromField(_xmlDocument, _userSettingsNode, fieldNum(WHSMobileAppUserDisplaySettings, DeviceClass));
        this.addNodeFromField(_xmlDocument, _userSettingsNode, fieldNum(WHSMobileAppUserDisplaySettings, ButtonPosition));
        this.addNodeFromField(_xmlDocument, _userSettingsNode, fieldNum(WHSMobileAppUserDisplaySettings, ScanWithCamera));
        this.addNodeFromField(_xmlDocument, _userSettingsNode, fieldNum(WHSMobileAppUserDisplaySettings, ShowProductPhoto));
        this.addNodeFromField(_xmlDocument, _userSettingsNode, fieldNum(WHSMobileAppUserDisplaySettings, DisplayColorTheme));
        this.addNodeFromField(_xmlDocument, _userSettingsNode, fieldNum(WHSMobileAppUserDisplaySettings, SoundLevel));
        this.addNodeFromField(_xmlDocument, _userSettingsNode, fieldNum(WHSMobileAppUserDisplaySettings, VibrationLevel));
        this.addNodeFromField(_xmlDocument, _userSettingsNode, fieldNum(WHSMobileAppUserDisplaySettings, TextScalePercentage));
        this.addNodeFromField(_xmlDocument, _userSettingsNode, fieldNum(WHSMobileAppUserDisplaySettings, ButtonScalePercentage));
        this.addNodeFromField(_xmlDocument, _userSettingsNode, fieldNum(WHSMobileAppUserDisplaySettings, InteractionCategory));
        this.addNodeFromField(_xmlDocument, _userSettingsNode, fieldNum(WHSMobileAppUserDisplaySettings, FieldFilteringAndOrdering));
        this.addNodeFromField(_xmlDocument, _userSettingsNode, fieldNum(WHSMobileAppUserDisplaySettings, ProductPhotoPlacement));
        this.addNodeFromField(_xmlDocument, _userSettingsNode, fieldNum(WHSMobileAppUserDisplaySettings, SpinnerMode));

        if (WHSMobileAppPlayRejectedScanSoundSettingFlight::instance().isEnabled())
        {
            this.addNodeFromField(_xmlDocument, _userSettingsNode, fieldNum(WHSMobileAppUserDisplaySettings, PlayRejectedScanSoundSetting));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addUnknownNodesFromSavedXml</Name>
				<Source><![CDATA[
    private void addUnknownNodesFromSavedXml(XmlDocument _xmlDocument, XmlNode _userSettingsNode, XML _savedUserSettingsXml)
    {
        try
        {
            XmlDocument savedUserSettngsXmlDoc = XmlDocument::newXml(_savedUserSettingsXml);
            XmlNode savedUserSettingsNode = savedUserSettngsXmlDoc.root();
            XmlNodeList savedUserSettingsList = savedUserSettingsNode.childNodes();
            DictTable dt = new DictTable(tableNum(WHSMobileAppUserDisplaySettings));

            for (int i = 0; i < savedUserSettingsList.length(); i++)
            {
                XmlNode savedSetting = savedUserSettingsList.nextNode();

                if (savedSetting && !dt.fieldName2Id(savedSetting.name()))
                {
                    this.addNodeFromNode(_xmlDocument, _userSettingsNode, savedSetting);
                }   
            }
        }
        catch
        {
            Debug::Assert(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserSettings</Name>
				<Source><![CDATA[
    private WHSMobileAppUserDisplaySettings getUserSettings(WHSUserId _userId,
        WHSMobileAppDeviceBrandId _deviceBrand,
        WHSMobileAppDeviceModelId _deviceModel,
        WHSMobileAppDeviceClass _deviceClass)
    {
        WHSMobileAppUserDisplaySettings mobileAppUserDisplaySettings;

        mobileAppUserDisplaySettings = WHSMobileAppUserDisplaySettings::find(_userId, _deviceBrand, _deviceModel);

        if (!mobileAppUserDisplaySettings)
        {
            mobileAppUserDisplaySettings = WHSMobileAppUserDisplaySettings::findByUserAndDeviceClass(_userId, _deviceClass);
        }

        if (!mobileAppUserDisplaySettings)
        {
            mobileAppUserDisplaySettings = WHSMobileAppUserDisplaySettings::find('', _deviceBrand, _deviceModel);
        }

        if (!mobileAppUserDisplaySettings)
        {
            mobileAppUserDisplaySettings = WHSMobileAppUserDisplaySettings::find('', _deviceBrand, '');
        }

        if (!mobileAppUserDisplaySettings)
        {
            mobileAppUserDisplaySettings = WHSMobileAppUserDisplaySettings::find('', '', '');
        }

        return mobileAppUserDisplaySettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNodeFromField</Name>
				<Source><![CDATA[
    protected internal void addNodeFromField(XmlDocument _xmlDocument, XmlNode _userSettingsNode, FieldId _fieldId)
    {
        SysDictField sysDictField = new SysDictField(tableNum(WHSMobileAppUserDisplaySettings), _fieldId);
        XmlElement settingElement = _xmlDocument.createElement(sysDictField.name());
        XmlNode settingNode = _userSettingsNode.appendChild(settingElement);

        settingElement.setAttribute(LabelAttributeName, SysLabel::labelId2String2(sysDictField.labelLabel(), languageId));

        switch(sysDictField.baseType())
        {
            case Types::String :
                settingElement.setAttribute(SelectedAttributeName, userDisplaySettings.(_fieldId));
                break;
            case Types::Integer :
                settingElement.setAttribute(SelectedAttributeName, int2str(userDisplaySettings.(_fieldId)));
                break;
            case Types::Enum :
                if (userDisplaySettings.(_fieldId) != 255
                    && !this.isFieldEnumValueSetToUnknown(sysDictField))
                {
                    settingElement.setAttribute(SelectedAttributeName, enum2Symbol(sysDictField.enumId(), userDisplaySettings.(_fieldId)));
                }
                else
                {
                    if (userDisplaySettings.UserSettingsXml != "")
                    {
                        try
                        {
                            XmlDocument savedUserSettingsXmlDoc = XmlDocument::newXml(userDisplaySettings.UserSettingsXml);
                            XmlNode savedUserSettingsNode = savedUserSettingsXmlDoc.root();

                            XmlNode savedSetting = savedUserSettingsNode.getNamedElement(sysDictField.name());

                            settingElement.setAttribute(SelectedAttributeName, savedSetting.text());
                        }
                        catch
                        {
                            Debug::Assert(false);
                        }
                    }
                }
                this.addNodeFromEnum(_xmlDocument, settingNode, sysDictField.enumId());
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldEnumValueSetToUnknown</Name>
				<Source><![CDATA[
    private boolean isFieldEnumValueSetToUnknown(SysDictField _sysDictField)
    {
        boolean ret;
        
        if (WHSMobileAppUserDisplaySettingEnumValueDefaultedToUnknownFlight::instance().isEnabled())
        {
            DictEnum dictEnum = new DictEnum(_sysDictField.enumId());
            
            ret = dictEnum.id() == enumName2Id(literalStr(UnknownNoYes))
                && userDisplaySettings.(_sysDictField.id()) == UnknownNoYes::Unknown;
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNodeFromStrings</Name>
				<Source><![CDATA[
    private void addNodeFromStrings(XmlDocument _xmlDocument, XmlNode _userSettingsNode, str _nodeName, str _nodeValue)
    {
        XmlElement settingElement = _xmlDocument.createElement(_nodeName);
        _userSettingsNode.appendChild(settingElement).innerText(_nodeValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNodeFromNode</Name>
				<Source><![CDATA[
    private void addNodeFromNode(XmlDocument _xmlDocument, XmlNode _userSettingsNode, XmlNode _nodeToCopy)
    {
        XmlElement settingElement = _xmlDocument.createElement(_nodeToCopy.name());
        _userSettingsNode.appendChild(settingElement);

        settingElement.setAttribute(SelectedAttributeName, _nodeToCopy.text());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBatchFlightsNode</Name>
				<Source><![CDATA[
    private void addBatchFlightsNode(XmlDocument _xmlDocument, XmlNode _userSettingsNode)
    {
        XmlElement dontShowElement = _xmlDocument.createElement(BatchFlightsNodeName);
        _userSettingsNode.appendChild(dontShowElement);

    }

]]></Source>
			</Method>
			<Method>
				<Name>addDontShowNode</Name>
				<Source><![CDATA[
    private void addDontShowNode(XmlDocument _xmlDocument, XmlNode _userSettingsNode, WHSUserId _userId)
    {
        XmlElement dontShowElement = _xmlDocument.createElement(DontShowNodeName);
        XmlNode dontShowNode = _userSettingsNode.appendChild(dontShowElement);

        WHSMobileAppDontShowAgainTable dontShowAgainTable;
        while select Category, Targets from dontShowAgainTable
            where dontShowAgainTable.UserId == _userId
        {
            XmlElement dontShowEntity = _xmlDocument.createElement(DontShowEntityNodeName);
            dontShowEntity.setAttribute(CategoryAttributeName, enum2Symbol(enumNum(WHSMobileAppDontShowAgainCategory), enum2int(dontShowAgainTable.Category)));
            dontShowEntity.setAttribute(TargetsAttributeName, con2Str(dontShowAgainTable.Targets, ListSeparator));
            dontShowNode.appendChild(dontShowEntity);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNodeFromEnum</Name>
				<Source><![CDATA[
    private void addNodeFromEnum(XmlDocument _xmlDocument, XmlNode _enumNode, EnumId _enumId)
    {
        DictEnum dictEnum = new DictEnum(_enumId);
        
        for (var i = 0; i < dictEnum.values(); i ++)
        {
            XmlElement enumElement = _xmlDocument.createElement(dictEnum.index2Symbol(i));
            enumElement.setAttribute(LabelAttributeName, SysLabel::labelId2String2(dictEnum.index2LabelId(i), languageId));
            _enumNode.appendChild(enumElement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>versionNumber</Name>
				<Source><![CDATA[
    private str versionNumber()
    {
        Microsoft.Dynamics.BusinessPlatform.ProductInformation.Provider.ProductInfoProvider provider = Microsoft.Dynamics.BusinessPlatform.ProductInformation.Provider.ProductInfoProvider::get_Provider();
        return provider.get_ApplicationVersion();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>