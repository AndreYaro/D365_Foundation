<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRRoyaltyVendTableStatusType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRRoyaltyVendTableStatusType</c> is an abstract class that holds the royalty processes specific to their current status.
/// </summary>
abstract public class MCRRoyaltyVendTableStatusType
{
    MCRRoyaltyVendTable mcrRoyaltyVendTable;
    private MCRRoyaltyInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canBeDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the royalty claim can be deleted.
    /// </summary>
    /// <returns>
    /// true, if the royalty claim can be deleted; otherwise, false.
    /// </returns>
    public boolean canBeDeleted()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a royalty claim record is inserted.
    /// </summary>
    public void inserting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a royalty claim record has been inserted.
    /// </summary>
    public void inserted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerPostingAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the royalty starting amount.
    /// </summary>
    /// <returns>
    /// The rebate starting amount.
    /// </returns>
    public Amount ledgerPostingAmount()
    {
        return mcrRoyaltyVendTable.StartingRoyaltyAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCRRoyaltyVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>MCRRoyaltyVendTable</c> table record on which royalty process is being performed.
    /// </summary>
    /// <param name="_mcrRoyaltyVendTable">
    /// The <c>MCRRoyaltyVendTable</c> table record.
    /// </param>
    /// <returns>
    /// The royalty table record.
    /// </returns>
    protected MCRRoyaltyVendTable parmMCRRoyaltyVendTable(Common _mcrRoyaltyVendTable = mcrRoyaltyVendTable)
    {
        if (!prmisdefault(_mcrRoyaltyVendTable))
        {
            mcrRoyaltyVendTable = _mcrRoyaltyVendTable;
        }

        return mcrRoyaltyVendTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>royaltyStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the royalty status.
    /// </summary>
    /// <returns>
    /// The rebate status.
    /// </returns>
    abstract public MCRRoyaltyVendTableStatus royaltyStatus()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>runApproved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the royalty approval is allowed or not.
    /// </summary>
    public void runApproved()
    {
        throw error(strfmt("@MCR:MCRRoyaltyVendTableApprovalStatusError", this.mcrRoyaltyVendTable.RoyaltyClaimId, this.royaltyStatus()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCumulated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the royalty cumulation is allowed or not.
    /// </summary>
    public void runCumulated()
    {
        throw error(strfmt("@MCR:MCRRoyaltyVendTableCumulationStatusError", this.mcrRoyaltyVendTable.RoyaltyClaimId, this.royaltyStatus()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a royalty claim record is deleted.
    /// </summary>
    public void deleting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a royalty claim record has been deleted.
    /// </summary>
    public void deleted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether royalty payment is allowed or not.
    /// </summary>
    public void runPayment()
    {
        throw error(strfmt("@MCR:MCRRoyaltyVendTablePaymentStatusError", this.mcrRoyaltyVendTable.RoyaltyClaimId, this.royaltyStatus()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>runProcessed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether royalty processing is allowed or not.
    /// </summary>
    /// <param name="_forAdjustment">
    /// A boolean value that determines if the rebate is an adjustment.
    /// </param>
    public void runProcessed(boolean _forAdjustment  = false)
    {
        throw error(strfmt("@MCR:MCRRoyaltyVendTableProcessStatusError", this.mcrRoyaltyVendTable.RoyaltyClaimId, this.royaltyStatus()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFinalStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the royalty to the 'Processed' status.
    /// </summary>
    public void setFinalStatus()
    {
        mcrRoyaltyVendTable.RoyaltyStatus   = MCRRoyaltyVendTableStatus::Processed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInitialStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the initial status of the royalty based on the cumulating type of the royalty.
    /// </summary>
    public void setInitialStatus()
    {
        MCRRoyaltyTable     mcrRoyaltyTable     = mcrRoyaltyVendTable.mcrRoyaltyTable();
        MCRRoyaltyContract  mcrRoyaltyContract  = mcrRoyaltyTable.royaltyContract();

        if (mcrRoyaltyContract.CumulateSalesBy  == MCRRoyaltyCumulationPeriod::Invoice)
        {
            mcrRoyaltyVendTable.RoyaltyStatus   = MCRRoyaltyVendTableStatus::Calculated;
        }
        else if (mcrRoyaltyContract.ApprovalRequired  == NoYes::Yes
            && mcrRoyaltyContract.CumulateSalesBy     != MCRRoyaltyCumulationPeriod::Invoice)
        {
            mcrRoyaltyVendTable.RoyaltyStatus   = MCRRoyaltyVendTableStatus::ToCalculate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNextStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets next status for royalty based on current statuses.
    /// </summary>
    public void setNextStatus()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRoyaltiesToCumulate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and sets the rebate amounts after cumulating.
    /// </summary>
    public void updateRoyaltiesToCumulate()
    {
        mcrRoyaltyVendTable.setCorrectedRoyaltyAmount();
        mcrRoyaltyVendTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates changes to a field in the <c>MCRRoyaltyVendTable</c> table.
    /// </summary>
    /// <param name="_fieldName">
    /// The field name to Validate.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the field to validate; optional.
    /// </param>
    /// <returns>
    /// true if the value in the field change is valid; otherwise, false.
    /// </returns>
    public boolean validateFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        return mcrRoyaltyVendTable.validateFieldValue(_fieldName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>MCRRoyaltyVendTableStatusType</c> class based on the reference buffer.
    /// </summary>
    /// <param name="_buffer">
    /// The reference buffer that decides which derived version of the class to instantiate.
    /// </param>
    /// <returns>
    /// A new instance of <c>TAMVendRebateTableStatusType</c> class.
    /// </returns>
    public static MCRRoyaltyVendTableStatusType newBuffer(Common _buffer)
    {
        MCRRoyaltyVendTableStatusType   mcrRoyaltyVendTableStatusType;
        MCRRoyaltyVendTable             mcrRoyaltyVendTable;

        switch (_buffer.TableId)
        {
            case tablenum(MCRRoyaltyVendTable)  :
                mcrRoyaltyVendTable = _buffer;
                break;
            default :
                throw error("");
        }

        switch (mcrRoyaltyVendTable.RoyaltyStatus)
        {
            case MCRRoyaltyVendTableStatus::Approved :
                mcrRoyaltyVendTableStatusType = MCRRoyaltyVendTableStatusType_Approved::construct();
                break;

            case MCRRoyaltyVendTableStatus::Calculated :
                mcrRoyaltyVendTableStatusType = MCRRoyaltyVendTableStatusType_Calculated::construct();
                break;

            case MCRRoyaltyVendTableStatus::Processed :
                mcrRoyaltyVendTableStatusType = MCRRoyaltyVendTableStatusType_Proc::construct();
                break;

            case MCRRoyaltyVendTableStatus::ToCalculate :
                mcrRoyaltyVendTableStatusType = MCRRoyaltyVendTableStatusType_ToCalc::construct();
                break;
        }

        MCRRoyaltyVendTableStatusType.parmMCRRoyaltyVendTable(mcrRoyaltyVendTable);

        return mcrRoyaltyVendTableStatusType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    final internal MCRRoyaltyInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = MCRRoyaltyInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>