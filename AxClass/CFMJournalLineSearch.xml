<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMJournalLineSearch</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class CFMJournalLineSearch
{
    CFMJournalProtoTrans protoTrans;
    CFMJournalTransFilter filter;
    CFMJournalTransSaver saver;
    QueryRun queryRun;
    List queryList;
    ListEnumerator queryListEnumerator;
    Map journalTransFieldsMap;
    CFMCashFlowDirection cashFlowDirection;
    RefRecId sourceRefRecId;
    NoYes useUncommittedValues;
    CFMCorrectionType correctionType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructFromCFMJournalSourceList</Name>
				<Source><![CDATA[
    public static CFMJournalLineSearch constructFromCFMJournalSourceList(CFMJournalSourceList _journalSourceList,
        CFMJournalTransSaver _saver,
        CFMCorrectionType _correctionType = CFMCorrectionType::None,
        NoYes _useUncommittedValues = NoYes::No)
    {
        CFMJournalSourceAttribute attribute = new CFMJournalSourceAttribute(_journalSourceList.CFMJournalTransSourceType);

        CFMJournalLineSearch jourLineSearch = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(CFMJournalLineSearch), attribute);

        jourLineSearch.parmCorrectionType(_correctionType);
        jourLineSearch.parmUseUncommittedValues(_useUncommittedValues);
        jourLineSearch.initFromSource(_journalSourceList);
        jourLineSearch.initFromSaver(_saver);

        return jourLineSearch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSourceTrans</Name>
				<Source><![CDATA[
    protected boolean checkSourceTrans()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    protected CFMJournalTrans createTrans()
    {
        return protoTrans.getCFMJournalTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCFMJournalTrans</Name>
				<Source><![CDATA[
    public CFMJournalTrans getCFMJournalTrans()
    {
        return this.createTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        this.initQueryList();

        queryListEnumerator = queryList.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSaver</Name>
				<Source><![CDATA[
    protected void initFromSaver(CFMJournalTransSaver _saver)
    {
        protoTrans.parmSaver(_saver);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSource</Name>
				<Source><![CDATA[
    protected void initFromSource(CFMJournalSourceList _source)
    {
        CFMJournalTable journalTable = CFMJournalTable::findRecId(_source.SourceRecId);

        cashFlowDirection = _source.CFMCashFlowDirection;

        filter = CFMJournalTransFilter::constructFromJournal(journalTable);

        protoTrans = CFMJournalProtoTrans::constructFromCFMJournalSourceList(_source);
        protoTrans.initFromCFMJournalTable(journalTable);
        protoTrans.parmCorrectionType(correctionType);
        protoTrans.parmUseUncommittedValues(this.parmUseUncommittedValues());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProtoTransParmContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes instance of contract for proto trans classes from <c>QueryRun</c>
    /// </summary>
    /// <param name="_queryRun">
    /// Instance of <c>QueryRun</c> class which contains selected recordset
    /// </param>
    /// <returns>
    /// Initialized instance of successor of <c>CFMJournalProtoTransParmContract</c> class
    /// </returns>
    abstract protected CFMJournalProtoTransParmContract initProtoTransParmContract(queryRun _queryRun)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProtoTransParmContractUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes contract for proto trans classes with uncommitted values
    /// </summary>
    /// <param name="_queryRun">
    /// Instance of <c>QueryRun</c> class which contains <c>CFMAnalyticDataEditUncommitted</c> table as datasource
    /// </param>
    /// <param name="_parmContract">
    /// Instance of successor of <c>CFMJournalProtoTransParmContract</c> class
    /// </param>
    protected void initProtoTransParmContractUncommitted(QueryRun _queryRun, CFMJournalProtoTransParmContract _parmContract)
    {
        if (this.parmCorrectionType() != CFMCorrectionType::None && _queryRun.query().dataSourceTable(tableNum(CFMAnalyticDataEditUncommitted)))
        {
            _parmContract.parmDataEditUncommitted(_queryRun.get(tableNum(CFMAnalyticDataEditUncommitted)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryList</Name>
				<Source><![CDATA[
    abstract protected void initQueryList()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>logRefRecId</Name>
				<Source><![CDATA[
    public container logRefRecId()
    {
        return protoTrans.logRefRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNext</Name>
				<Source><![CDATA[
    protected boolean moveNext()
    {
        boolean success = this.nextRecord();

        if (!success)
        {
            do
            {
                success = this.nextQuery();
            }
            while (success && !this.nextRecord());
        }

        return success;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        journalTransFieldsMap = new Map(Types::Integer, Types::Container);
        queryList = new List(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    public boolean next()
    {
        boolean isOk;

        do
        {
            isOk = this.moveNext();
        }
        while (isOk && !this.checkSourceTrans());

        return isOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextQuery</Name>
				<Source><![CDATA[
    protected boolean nextQuery()
    {
        if (queryListEnumerator.moveNext())
        {
            Query curQuery = queryListEnumerator.current();
            queryRun = new queryRun(curQuery);
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextRecord</Name>
				<Source><![CDATA[
    protected boolean nextRecord()
    {
        if (queryRun && queryRun.next())
        {
            CFMJournalProtoTransParmContract parmContract = this.initProtoTransParmContract(queryRun);
            protoTrans.initFromParmContract(parmContract);
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrectionType</Name>
				<Source><![CDATA[
    public CFMCorrectionType parmCorrectionType(CFMCorrectionType _correctionType = correctionType)
    {
        correctionType = _correctionType;
        return correctionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceRefRecId</Name>
				<Source><![CDATA[
    public RefRecId parmSourceRefRecId(RefRecId _sourceRefRecId = sourceRefRecId)
    {
        sourceRefRecId = _sourceRefRecId;
        return sourceRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseUncommittedValues</Name>
				<Source><![CDATA[
    public NoYes parmUseUncommittedValues(NoYes _useUncommittedValues = useUncommittedValues)
    {
        useUncommittedValues = _useUncommittedValues;

        return useUncommittedValues;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>