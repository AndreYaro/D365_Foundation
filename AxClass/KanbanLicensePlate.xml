<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanLicensePlate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanLicensePlate</c> class sets the license plate on a kanban jobs.
/// </summary>
public class KanbanLicensePlate
{
    KanbanJobType       kanbanJobType;
    KanbanJob           kanbanJob;
    Kanban              kanban;
    boolean             forceDiscardCurrentLicensePlate;

    WHSLicensePlateId   licensePLateId;
    WHSLicensePlateId   defaultLicensePlateId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canChangeLicensePlateOnInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the license plate can be changed on a given inventory dimension.
    /// </summary>
    /// <param name="_inventDim">
    ///    The inventory dimension.
    /// </param>
    /// <returns>
    ///    true if the license plate can be changed; otherwise, false.
    /// </returns>
    protected boolean canChangeLicensePlateOnInventDim(InventDim _inventDim)
    {
        return    !_inventDim.LicensePlateId
               || _inventDim.LicensePlateId == this.defaultLicensePlateId()
               || forceDiscardCurrentLicensePlate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSetLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the license plate can be set.
    /// </summary>
    /// <param name="_inventDim">
    ///    The inventory dimension used to check if the license plate can be set.
    /// </param>
    /// <param name="_kanbanJobType">
    ///    The kanban job type used to check if the license plate can be set; optional.
    /// </param>
    /// <returns>
    ///    true if the license plate can be set; otherwise, false.
    /// </returns>
    protected boolean canSetLicensePlate(
        InventDim     _inventDim,
        KanbanJobType _kanbanJobType = kanbanJobType)
    {
        return    _kanbanJobType
               && this.licensePlateId(_inventDim)
               && _kanbanJobType.canGetLicensePlateFromKanban()
               && this.canChangeLicensePlateOnInventDim(_inventDim)
               && this.canSetLicensePlateOnInventDim(_inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSetLicensePlateOnInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the license plate dimension can be set on a given inventory dimension.
    /// </summary>
    /// <param name="_inventDim">
    ///    The inventory dimension to check.
    /// </param>
    /// <returns>
    ///    true if the license plate can be set; otherwise, false.
    /// </returns>
    protected boolean canSetLicensePlateOnInventDim(InventDim _inventDim)
    {
        return    _inventDim.wmsLocationId
               && WMSLocation::find(_inventDim.wmsLocationId,_inventDim.InventLocationId).whsLocationIsLPControlled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultLicensePlateId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the default license plate ID.
    /// </summary>
    /// <returns>
    ///    the default license plate ID.
    /// </returns>
    protected WHSLicensePlateId defaultLicensePlateId()
    {
        if (!defaultLicensePlateId)
        {
            defaultLicensePlateId = kanban.KanbanId;
        }

        return defaultLicensePlateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimWithLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds or creates a inventory dimension that includes a given license plate ID.
    /// </summary>
    /// <param name="_inventDim">
    ///    The inventory dimensions.
    /// </param>
    /// <param name="_licensePlateId">
    ///    The license plate ID.
    /// </param>
    /// <returns>
    ///    A inventory dimension ID that represents the new or found inventory dimension record.
    /// </returns>
    protected InventDimId getInventDimWithLicensePlate(
        InventDim         _inventDim,
        WHSLicensePlateId _licensePlateId)
    {
        InventDim inventDimLocal      = _inventDim.data();
        inventDimLocal.LicensePlateId = _licensePlateId;
        inventDimLocal                = InventDim::findOrCreate(inventDimLocal);

        return inventDimLocal.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the license plate to be used for the given inventory dimension.
    /// </summary>
    /// <param name="_inventDim">
    ///    The inventory dimension.
    /// </param>
    /// <returns>
    ///    The license plate ID; otherwise, an empty string.
    /// </returns>
    public WHSLicensePlateId getLicensePlate(InventDim _inventDim)
    {
        WHSLicensePlateId   result = _inventDim.LicensePlateId;

        if (this.canSetLicensePlate(_inventDim))
        {
            result = this.licensePlateId(_inventDim);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanban</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the kanban for the kanban job.
    /// </summary>
    /// <returns>
    ///    The kanban.
    /// </returns>
    protected Kanban kanban()
    {
        if (!kanban)
        {
            kanban = kanbanJob.kanban();
        }

        return kanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>licensePlateId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the license plate to be used for the kanban job.
    /// </summary>
    /// <param name="_inventDim">
    ///    The inventory dimension that is used to determine the license plate ID.
    /// </param>
    /// <returns>
    ///    The license plate ID; otherwise, an empty string.
    /// </returns>
    protected WHSLicensePlateId licensePlateId(InventDim _inventDim)
    {
        if (!licensePlateId)
        {
            if (!forceDiscardCurrentLicensePlate)
            {
                if (   _inventDim.LicensePlateId
                    && _inventDim.LicensePlateId != this.defaultLicensePlateId())
                {
                    // if a license plate is already set, use it, unless it is the default license plate
                    licensePlateId = _inventDim.LicensePlateId;
                }
            }

            if (!licensePlateId)
            {
                // use the kanban card ID as a licenseplate
                licensePlateId = this.kanban().KanbanCardId;
            }

            if (!licensePlateId)
            {
                licensePlateId = this.defaultLicensePlateId();
            }
        }

        return licensePlateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForceDiscardCurrentLicensePlate</Name>
				<Source><![CDATA[
        public boolean parmForceDiscardCurrentLicensePlate(boolean _forceDiscardCurrentLicensePlate = forceDiscardCurrentLicensePlate)
    {
        forceDiscardCurrentLicensePlate = _forceDiscardCurrentLicensePlate;
        return forceDiscardCurrentLicensePlate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanJob</Name>
				<Source><![CDATA[
        protected KanbanJob parmKanbanJob(KanbanJob _kanbanJob = kanbanJob)
    {
        kanbanJob = _kanbanJob;
        return kanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanJobType</Name>
				<Source><![CDATA[
        protected KanbanJobType parmKanbanJobType(KanbanJobType _kanbanJobType = kanbanJobType)
    {
        kanbanJobType = _kanbanJobType;
        return kanbanJobType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the license plate inventory dimension value.
    /// </summary>
    /// <param name="_inventDim">
    ///    The initial inventory dimension.
    /// </param>
    /// <returns>
    ///    The license plate ID.
    /// </returns>
    public WHSLicensePlateId setLicensePlate(InventDim _inventDim)
    {
        WHSLicensePlateId   result = _inventDim.LicensePlateId;
        boolean             done   = false;

        if (this.canSetLicensePlate(_inventDim))
        {
            ttsbegin;
            // create new license plate, if it doesn't exist
            WHSLicensePlate whsLicensePlate = WHSLicensePlate::createLicensePlate(this.licensePlateId(_inventDim));
            result = whsLicensePlate.LicensePlateId;

            if (kanbanJob.RecId)
            {
                // set the receipt dimension
                KanbanJob kanbanJobLocal = KanbanJob::find(kanbanJob.RecId,true);
                InventDim receiptInventDim = kanbanJobLocal.inventDim();

                if (receiptInventDim.LicensePlateId != whsLicensePlate.LicensePlateId)
                {
                    kanbanJobLocal.setInventDimId(this.getInventDimWithLicensePlate(receiptInventDim,whsLicensePlate.LicensePlateId));
                    kanbanJobLocal.update();
                }

                // update  subsequent transfer jobs
                kanbanJobLocal = kanbanJob.nextJob(true);
                while (   kanbanJobLocal
                       && !done)
                {
                    KanbanJobType kanbanJobTypeLocal = kanbanJobLocal.type();
                    done = true;

                    InventDim issueInventDim = kanbanJobLocal.issueInventDim();
                    if (   issueInventDim.LicensePlateId != whsLicensePlate.LicensePlateId
                        && this.canSetLicensePlate(issueInventDim,kanbanJobTypeLocal))
                    {
                        done = false;
                        kanbanJobLocal.setIssueInventDimId(this.getInventDimWithLicensePlate(
                                                                    issueInventDim,
                                                                    whsLicensePlate.LicensePlateId));
                    }

                    receiptInventDim = kanbanJobLocal.inventDim();
                    if (   !done
                        && receiptInventDim.LicensePlateId != whsLicensePlate.LicensePlateId
                        && this.canSetLicensePlate(receiptInventDim,kanbanJobTypeLocal))
                    {
                        done = false;
                        kanbanJobLocal.setInventDimId(this.getInventDimWithLicensePlate(
                                                                    receiptInventDim,
                                                                    whsLicensePlate.LicensePlateId));
                    }

                    if (!done)
                    {
                        kanbanJobLocal.update();
                        kanbanJobLocal = kanbanJobLocal.nextJob(true);
                    }
                }
            }
            ttscommit;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static KanbanLicensePlate construct()
    {
        return new KanbanLicensePlate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instantiates a new instance of the <c>KanbanLicensePlate</c> class.
    /// </summary>
    /// <param name="_kanbanJob">
    ///    A <c>KanbanJob</c> table record that is used to initialize the instance.
    /// </param>
    /// <param name="_forceDiscardCurrentLicensePlate">
    ///    A Boolean value that indicates if the current license plate must be discarded.
    /// </param>
    /// <param name="_kanbanJobType">
    ///    A <c>KanbanJobType</c> class instance that is used to initialize the instance.
    /// </param>
    /// <returns>
    ///    A <c>KanbanLicensePlate</c> class instance.
    /// </returns>
    public static KanbanLicensePlate newStandard(
        KanbanJob     _kanbanJob,
        boolean       _forceDiscardCurrentLicensePlate = false,
        KanbanJobType _kanbanJobType                   = _kanbanJob.type())
    {
        KanbanLicensePlate  kanbanLicensePlate = KanbanLicensePlate::construct();

        kanbanLicensePlate.parmKanbanJob(_kanbanJob);
        kanbanLicensePlate.parmKanbanJobType(_kanbanJobType);
        kanbanLicensePlate.parmForceDiscardCurrentLicensePlate(_forceDiscardCurrentLicensePlate);

        return kanbanLicensePlate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLicensePlateForKanban</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the license plate on all relevant kanban jobs of the kanban.
    /// </summary>
    /// <param name="_kanban">
    ///    The kanban.
    /// </param>
    public static void setLicensePlateForKanban(Kanban _kanban)
    {
        if (   _kanban
            && _kanban.Type != LeanKanbanType::Withdrawal)
        {
            KanbanJob kanbanJob = _kanban.lastKanbanJobOfType(LeanKanbanJobType::Process);

            if (kanbanJob)
            {
                KanbanLicensePlate::newStandard(kanbanJob,true).setLicensePlate(kanbanJob.inventDim());
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
