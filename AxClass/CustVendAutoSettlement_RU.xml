<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendAutoSettlement_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class CustVendAutoSettlement_RU extends CustVendAutoDialog_RU
{
    LedgerVoucherGroup  ledgerVoucherGroup;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findCustVendTable</Name>
				<Source><![CDATA[
    abstract protected CustVendTable findCustVendTable(CustVendAC _custVendAC)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReverseMode</Name>
				<Source><![CDATA[
    public boolean isReverseMode()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    abstract SysModule module()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    #define.Value2(2)
    public void run()
    {
        CustVendTable               custVendTable;
        CustVendTransOpen           custVendTransOpen;
        CustVendTrans               custVendTrans;
        OffsetVoucher               offsetVoucher;
        CustVendSettle              custVendSettle;
        SpecTrans                   specTrans;
        SpecTransManager            specification;
        SettleDatePrinc             datePrinciple;
        TransDate                   datePrincipleSaveDate;
        CustVendOpenTransManager    manager;
        ;

        #AviFiles

        try
        {
            custVendSettle = CustVendSettle::construct(this.moduleCustVend() == ModuleCustVend::Cust ? SysModule::Cust : SysModule::Vend);
            datePrinciple         = custVendSettle.datePrinciple();
            datePrincipleSaveDate = custVendSettle.saveDate();

            ttsbegin;

            while (queryRun.next())
            {
                custVendTransOpen = queryRun.getNo(1);
                custVendTrans     = queryRun.getNo(#Value2);
                custVendTable     = this.findCustVendTable(custVendTrans.AccountNum);
                specification     = CustVendAutoDialog_RU::initSpecification(custVendTable, inBatch);
                manager           = CustVendOpenTransManager::construct(custVendTable);

                specification.insert(custVendTransOpen.company(),
                                     custVendTransOpen.TableId,
                                     custVendTransOpen.RecId,
                                     custVendTransOpen.remainAmountCashDisc(),
                                     custVendTrans.CurrencyCode);

                offsetVoucher = OffsetVoucher::construct(this.module(),
                                                         SettlementType::OpenTransact,
                                                         custVendTable);

                offsetVoucher.parmDateFrom_RU(dateFrom);
                offsetVoucher.parmDateTo_RU(dateTo);
                offsetVoucher.parmDimSettlementType_RU(DimSettlementType_RU::Auto);
                offsetVoucher.setDatePrinciple_RU(datePrinciple,datePrincipleSaveDate);
                offsetVoucher.updateNow(custVendTrans, SettlementType::OpenTransact);
                offsetVoucher.parmUseDatePrinciple_RU(true);

                select count(RecId) from specTrans
                    where specTrans.SpecTableId == custVendTable.TableId &&
                          specTrans.SpecRecId   == custVendTable.RecId   &&
                          specTrans.SpecCompany == custVendTable.company();

                if (specTrans.RecId > 1 &&
                    manager.validateSettlePostingDate(datePrinciple, datePrincipleSaveDate))
                {
                    ledgerVoucherGroup  = LedgerVoucherGroup::construct();

                    custVendSettle = CustVendSettle::newOffsetVoucher(this.module(), offsetVoucher, ledgerVoucherGroup);
                    custVendSettle.settleNow(curext(), custVendTable.TableId, custVendTable.RecId, true);

                    ledgerVoucherGroup.end();
                }
                else
                {
                    specification.deleteAll();
                }
            }
            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::Error)
        {
            ttsabort;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustVendAutoSettlement_RU construct(ModuleCustVend _module)
    {
        CustVendAutoSettlement_RU  custVendAutoSettlement;

        switch (_module)
        {
            case ModuleCustVend::Cust  :
                custVendAutoSettlement = new CustVendAutoSettlement_Cust_RU();
            break;
            case ModuleCustVend::Vend  :
                custVendAutoSettlement = new CustVendAutoSettlement_Vend_RU();
            break;
        }
        return custVendAutoSettlement;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>