<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdCalculatingWIPCancelEngine_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProdCalculatingWIPCancelEngine_RU
{
    ProdId                      prodId;

    Set                         prodIdSet;

    TransDate                   transDate;
    Voucher                     closingVoucher;
    Voucher                     cancelVoucher;

    ProdWIPCancelCallerType_RU  wipCancelCallerType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancelEnd</Name>
				<Source><![CDATA[
    protected void cancelEnd(TransDate  _cancelDate,
                             Voucher    _cancelVoucher,
                             Voucher    _newVoucher)
    {
        InventCostClosingCancel_EndWIP_RU inventCostClosingCancel_End = InventCostClosingCancel_EndWIP_RU::construct();
        inventCostClosingCancel_End.parmInventTransCurrency_RU(InventTransCurrency_RU::PrimaryCur);
        inventCostClosingCancel_End.parmCancelVoucher(_cancelVoucher);
        inventCostClosingCancel_End.parmCancelTransDate(_cancelDate);
        inventCostClosingCancel_End.parmNewVoucher(_newVoucher);
        inventCostClosingCancel_End.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelWorkInvent</Name>
				<Source><![CDATA[
    protected void cancelWorkInvent(TransDate   _cancelTransDate,
                                    Voucher     _cancelVoucher,
                                    ItemId      _itemId,
                                    Voucher     _newVoucher)
    {
        InventCostClosingCancel_WorkInventWIP_RU inventCostClosingCancel_WorkInvent = InventCostClosingCancel_WorkInventWIP_RU::construct();
        inventCostClosingCancel_WorkInvent.parmItemId(_itemId);
        inventCostClosingCancel_WorkInvent.parmInventTransCurrency_RU(InventTransCurrency_RU::PrimaryCur);
        inventCostClosingCancel_WorkInvent.parmCancelVoucher(_cancelVoucher);
        inventCostClosingCancel_WorkInvent.parmCancelTransDate(_cancelTransDate);
        inventCostClosingCancel_WorkInvent.parmNewVoucher(_newVoucher);
        inventCostClosingCancel_WorkInvent.parmNotAllowAbortTTS(wipCancelCallerType == ProdWIPCancelCallerType_RU::InventClosing);
        inventCostClosingCancel_WorkInvent.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProdWIPCancelCallerType_RU _wipCancelCallerType)
    {
        wipCancelCallerType = _wipCancelCallerType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCancelVoucher</Name>
				<Source><![CDATA[
    public Voucher parmCancelVoucher(Voucher _cancelVoucher = cancelVoucher)
    {
        cancelVoucher = _cancelVoucher;

        return cancelVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmClosingVoucher</Name>
				<Source><![CDATA[
    public Voucher parmClosingVoucher(Voucher _closingVoucher = closingVoucher)
    {
        closingVoucher = _closingVoucher;

        return closingVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdId</Name>
				<Source><![CDATA[
    public ProdId parmProdId(ProdId _prodId = prodId)
    {
        prodId = _prodId;

        return prodId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdIdSet</Name>
				<Source><![CDATA[
    public Set parmProdIdSet(Set _prodIdSet = prodIdSet)
    {
        prodIdSet = _prodIdSet;

        return prodIdSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWIPCancelCallerType</Name>
				<Source><![CDATA[
    public ProdWIPCancelCallerType_RU parmWIPCancelCallerType(ProdWIPCancelCallerType_RU _wipCancelCallerType = wipCancelCallerType)
    {
        wipCancelCallerType = _wipCancelCallerType;

        return wipCancelCallerType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount

        if (!this.validate())
        {
            error(strfmt("@GLS115869", prodId ? strfmt("@GLS106007", prodId) : ''));

            if (wipCancelCallerType != ProdWIPCancelCallerType_RU::InventClosing)
            {
                throw Exception::Error;
            }

            return;
        }

        try
        {
            if (wipCancelCallerType != ProdWIPCancelCallerType_RU::InventClosing)
            {
                ttsbegin;
            }

            switch (wipCancelCallerType)
            {
                case ProdWIPCancelCallerType_RU::InventClosingCancel    :
                    SetEnumerator setEnumarator = prodIdSet.getEnumerator();
                    while (setEnumarator.moveNext())
                    {
                        this.runCancel(setEnumarator.current());
                    }

                    // cancel WIP historical calculation which has PostedFromInventClosing value
                    this.updateWIPHistoricalCostTable(transDate, cancelVoucher, '', '', NoYes::Yes);
                    break;

                case ProdWIPCancelCallerType_RU::InventClosing          :
                case ProdWIPCancelCallerType_RU::WIPCalculation         :
                    this.runCancel();
                    break;
            }

            if (wipCancelCallerType != ProdWIPCancelCallerType_RU::InventClosing)
            {
                ttscommit;
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCancel</Name>
				<Source><![CDATA[
    protected void runCancel(ProdId _prodId = prodId)
    {
        ProdWIPHistoricalCostTable_RU       grWIPHistoricalCostTable;
        ProdWIPPostingInventClosingTable_RU wipPostingInventClosingTable;

        Set                                 datePostingSet  = new Set(Types::Container);
        Set                                 cancelWorkSet   = new Set(Types::Container);
        Map                                 newVoucherMap   = new Map(Types::Date, Types::String);

        if (!_prodId)
        {
            return;
        }

        while select grWIPHistoricalCostTable
            group by TransDate desc, Voucher, ItemId
            where grWIPHistoricalCostTable.ProdId                   == _prodId      &&
                  grWIPHistoricalCostTable.TransDate                >= transDate    &&
                  grWIPHistoricalCostTable.Cancelled                == NoYes::No    &&
                  grWIPHistoricalCostTable.PostedFromInventClosing  == NoYes::No    &&
                  grWIPHistoricalCostTable.CanBeCancelled           == NoYes::Yes
        {
            datePostingSet.add([grWIPHistoricalCostTable.TransDate, grWIPHistoricalCostTable.Voucher]);

            if (!newVoucherMap.exists(grWIPHistoricalCostTable.TransDate))
            {
                newVoucherMap.insert(grWIPHistoricalCostTable.TransDate, NumberSeq::newGetNum(ProdParameters::numRefProdCalcVoucherId()).num());
            }

            container key = [grWIPHistoricalCostTable.TransDate, grWIPHistoricalCostTable.Voucher, grWIPHistoricalCostTable.ItemId];
            if (! cancelWorkSet.in(key))
            {
                this.cancelWorkInvent(grWIPHistoricalCostTable.TransDate,
                                      grWIPHistoricalCostTable.Voucher,
                                      grWIPHistoricalCostTable.ItemId,
                                      newVoucherMap.lookup(grWIPHistoricalCostTable.TransDate));

                this.updateWIPHistoricalCostTable(grWIPHistoricalCostTable.TransDate, grWIPHistoricalCostTable.Voucher, _prodId, grWIPHistoricalCostTable.ItemId);
                cancelWorkSet.add(key);
            }
        }

        wipPostingInventClosingTable.ClosingVoucher = closingVoucher;
        wipPostingInventClosingTable.ClosingDate    = transDate;
        wipPostingInventClosingTable.Posted         = NoYes::No;

        SetEnumerator setEnumerator = datePostingSet.getEnumerator();
        while (setEnumerator.moveNext())
        {
            if (wipCancelCallerType == ProdWIPCancelCallerType_RU::InventClosing)
            {
                [wipPostingInventClosingTable.CancelDate, wipPostingInventClosingTable.CancelVoucher]   = setEnumerator.current();
                wipPostingInventClosingTable.NewVoucher                                                 = newVoucherMap.lookup(wipPostingInventClosingTable.CancelDate);
                wipPostingInventClosingTable.insert();
            }
            else
            {
                this.cancelEnd(conpeek(setEnumerator.current(), 1), conpeek(setEnumerator.current(), 2), newVoucherMap.lookup(conpeek(setEnumerator.current(), 1)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWIPHistoricalCostTable</Name>
				<Source><![CDATA[
    protected void updateWIPHistoricalCostTable(TransDate   _transDate,
                                                Voucher     _voucher,
                                                ProdId      _prodId                     = '',
                                                ItemId      _itemId                     = '',
                                                NoYesId     _postedFromInventClosing    = NoYes::No)
    {
        ProdWIPHistoricalCostTable_RU wipHistoricalCostTable;

        update_recordset wipHistoricalCostTable
            setting Cancelled = NoYes::Yes
            where wipHistoricalCostTable.TransDate                  == _transDate               &&
                  wipHistoricalCostTable.Voucher                    == _voucher                 &&
                  (! _prodId || wipHistoricalCostTable.ProdId       == _prodId)                 &&
                  (! _itemId || wipHistoricalCostTable.ItemId       == _itemId)                 &&
                  wipHistoricalCostTable.Cancelled                  == NoYes::No                &&
                  wipHistoricalCostTable.PostedFromInventClosing    == _postedFromInventClosing &&
                  wipHistoricalCostTable.CanBeCancelled             == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        boolean ret = true;

        if (wipCancelCallerType == ProdWIPCancelCallerType_RU::InventClosingCancel)
        {
            if (!prodIdSet || prodIdSet.empty())
            {
                ret = checkFailed("@GLS115866");
            }

            if (!cancelVoucher)
            {
                ret = checkFailed("@GLS115863");
            }
        }

        if (wipCancelCallerType == ProdWIPCancelCallerType_RU::WIPCalculation && !ProdTable::exist(prodId))
        {
            ret = checkFailed(strfmt(ProdTable::txtNotExist(), prodId));
        }

        if (wipCancelCallerType == ProdWIPCancelCallerType_RU::InventClosing && !closingVoucher)
        {
            ret = checkFailed("@GLS115867");
        }

        if (!transDate)
        {
            ret = checkFailed("@GLS115868");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProdCalculatingWIPCancelEngine_RU construct(ProdWIPCancelCallerType_RU _wipCancelCallerType)
    {
        return new ProdCalculatingWIPCancelEngine_RU(_wipCancelCallerType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventClosingCancel</Name>
				<Source><![CDATA[
    static ProdCalculatingWIPCancelEngine_RU newFromInventClosingCancel(Set          _prodIdSet,
                                                                               Voucher      _cancelVoucher,
                                                                               TransDate    _transDate)
    {
        ProdCalculatingWIPCancelEngine_RU prodCalculatingWIPCancelEngine = ProdCalculatingWIPCancelEngine_RU::construct(ProdWIPCancelCallerType_RU::InventClosingCancel);

        prodCalculatingWIPCancelEngine.parmProdIdSet(_prodIdSet);
        prodCalculatingWIPCancelEngine.parmCancelVoucher(_cancelVoucher);
        prodCalculatingWIPCancelEngine.parmTransDate(_transDate);

        return prodCalculatingWIPCancelEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWIPCalculation</Name>
				<Source><![CDATA[
    static ProdCalculatingWIPCancelEngine_RU newFromWIPCalculation(ProdId                        _prodId,
                                                                          TransDate                     _transDate,
                                                                          ProdWIPCancelCallerType_RU    _wipCancelCallerType,
                                                                          Voucher                       _closingVoucher = '')
    {
        ProdCalculatingWIPCancelEngine_RU prodCalculatingWIPCancelEngine = ProdCalculatingWIPCancelEngine_RU::construct(_wipCancelCallerType);

        prodCalculatingWIPCancelEngine.parmProdId(_prodId);
        prodCalculatingWIPCancelEngine.parmClosingVoucher(_closingVoucher);
        prodCalculatingWIPCancelEngine.parmTransDate(_transDate);

        return prodCalculatingWIPCancelEngine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
