<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustBillOfExchangeStatCalc_Bank</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustBillOfExchangeStatCalc_Bank extends CustBillOfExchangeStatCalc
{
    CompanyBankAccountId bankAccountId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcBillsInRemittance</Name>
				<Source><![CDATA[
    protected void calcBillsInRemittance()
    {
        CustBillOfExchangeJour custBillOfExchangeJour;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;
        CustTrans custTrans;
        CustTransOpen custTransOpen;
        SpecTrans specTrans;

        tmpBillOfExchangeStatistics.clear();
        tmpBillOfExchangeStatistics.CustBillOfExchangeStatistics = CustBillOfExchangeStatistics::BillsInRemittance;

        // When a Bill of Exchange (BOE) is created, it rolls all cross-company invoices that
        // are settled into one BOE CustTrans/Open record that exists in the same company as the
        // payment. As a result, the SpecTrans record never needs to go cross-company in order
        // to generate the correct results. So, all queries or calculations below are "safe" since
        // they all happen in the context of a single company.

        select count(RecId)
        from custBillOfExchangeJour
        where custBillOfExchangeJour.Status == CustVendNegInstStatus::Drawn ||
                custBillOfExchangeJour.Status == CustVendNegInstStatus::Redrawn
        exists join custTrans
            where custTrans.BillOfExchangeID == custBillOfExchangeJour.BillOfExchangeId
            join custTransOpen
            where custTransOpen.AccountNum == custTrans.AccountNum &&
                    custTransOpen.RefRecId == custTrans.RecId
            join specTrans
            where specTrans.SpecTableId == tablenum(LedgerJournalTrans) &&
                    specTrans.RefTableId == custTransOpen.TableId &&
                    specTrans.RefRecId == custTransOpen.RecId &&
                    specTrans.RefCompany == custTransOpen.dataAreaId
            join ledgerJournalTrans
            where ledgerJournalTrans.TableId == specTrans.SpecTableId &&
                    ledgerJournalTrans.RecId == specTrans.SpecRecId &&
                    ledgerJournalTrans.dataAreaId == specTrans.SpecCompany &&
                    ledgerJournalTrans.BankAccountId == bankAccountId
            join ledgerJournalTable
            where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                    ledgerJournalTable.JournalType == LedgerJournalType::CustPaymRemittance;

        tmpBillOfExchangeStatistics.Number = any2int(custBillOfExchangeJour.RecId);

        select sum(AmountMST),sum(SettleAmountMST)
        from custTrans
        exists join custBillOfExchangeJour
        where custBillOfExchangeJour.BillOfExchangeId == custTrans.BillOfExchangeID &&
               (custBillOfExchangeJour.Status == CustVendNegInstStatus::Drawn ||
                custBillOfExchangeJour.Status == CustVendNegInstStatus::Redrawn)
        exists join custTransOpen
            where custTransOpen.AccountNum == custTrans.AccountNum &&
                    custTransOpen.RefRecId == custTrans.RecId
            exists join specTrans
            where specTrans.SpecTableId == tablenum(LedgerJournalTrans) &&
                        specTrans.RefTableId == custTransOpen.TableId &&
                        specTrans.RefRecId == custTransOpen.RecId &&
                        specTrans.RefCompany == custTransOpen.dataAreaId
            exists join ledgerJournalTrans
            where ledgerJournalTrans.RecId == specTrans.SpecRecId &&
                        ledgerJournalTrans.dataAreaId == specTrans.SpecCompany &&
                        ledgerJournalTrans.BankAccountId == bankAccountId
            exists join ledgerJournalTable
            where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                        ledgerJournalTable.JournalType == LedgerJournalType::CustPaymRemittance;

        tmpBillOfExchangeStatistics.AmountMST = custTrans.AmountMST;
        tmpBillOfExchangeStatistics.RemaningAmount = custTrans.AmountMST - custTrans.SettleAmountMST;

        tmpBillOfExchangeStatistics.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDrawnBills</Name>
				<Source><![CDATA[
    protected void calcDrawnBills()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcHistoryOfProtestedBills</Name>
				<Source><![CDATA[
    protected void calcHistoryOfProtestedBills()
    {
        CustBillOfExchangeTrans custBillOfExchangeTrans;
        CustBillOfExchangeTrans custBillOfExchangeTrans2;
        CustTrans custTrans;

        tmpBillOfExchangeStatHistory.clear();
        tmpBillOfExchangeStatHistory.CustBillOfExchangeStatistics = CustBillOfExchangeStatistics::HistoryOfProtestedBills;
        select count(RecId),sum(AmountCur)
        from custBillOfExchangeTrans
        where custBillOfExchangeTrans.Status == CustVendNegInstStatus::Protested &&
                custBillOfExchangeTrans.RemittedToBankAccountId == bankAccountId
        exists join custBillOfExchangeTrans2
            where custBillOfExchangeTrans2.BillOfExchangeId == custBillOfExchangeTrans.BillOfExchangeId &&
                    custBillOfExchangeTrans2.SeqNum == custBillOfExchangeTrans.SeqNum &&
                    custBillOfExchangeTrans2.Status == CustVendNegInstStatus::Remitted;

        tmpBillOfExchangeStatHistory.Number = any2int(custBillOfExchangeTrans.RecId);
        if (custBillOfExchangeTrans.RecId)
        {
            select sum(AmountMST),sum(SettleAmountMST)
            from custTrans
            where custTrans.AmountMST > 0
            exists join custBillOfExchangeTrans
                where custBillOfExchangeTrans.BillOfExchangeId == custTrans.BillOfExchangeID &&
                        custBillOfExchangeTrans.SeqNum == custTrans.BillOfExchangeSeqNum &&
                        custBillOfExchangeTrans.Voucher == custTrans.Voucher &&
                        custBillOfExchangeTrans.RemittedToBankAccountId == bankAccountId &&
                        custBillOfExchangeTrans.Status == CustVendNegInstStatus::Protested
                exists join custBillOfExchangeTrans2
                    where custBillOfExchangeTrans2.BillOfExchangeId == custBillOfExchangeTrans.BillOfExchangeId &&
                            custBillOfExchangeTrans2.SeqNum == custBillOfExchangeTrans.SeqNum &&
                            custBillOfExchangeTrans2.Status == CustVendNegInstStatus::Remitted;

            tmpBillOfExchangeStatHistory.AmountMST = custTrans.AmountMST;
            tmpBillOfExchangeStatHistory.RemaningAmount = custTrans.AmountMST - custTrans.SettleAmountMST;
        }
        tmpBillOfExchangeStatHistory.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcHistoryOfRedrawnBills</Name>
				<Source><![CDATA[
    protected void calcHistoryOfRedrawnBills()
    {
        CustBillOfExchangeTrans custBillOfExchangeTrans;
        CustBillOfExchangeTrans custBillOfExchangeTrans2;
        CustTrans custTrans;

        tmpBillOfExchangeStatHistory.clear();
        tmpBillOfExchangeStatHistory.CustBillOfExchangeStatistics = CustBillOfExchangeStatistics::HistoryOfRedrawnBills;

        select count(RecId)
        from custBillOfExchangeTrans
        where custBillOfExchangeTrans.Status == CustVendNegInstStatus::Redrawn &&
                custBillOfExchangeTrans.RemittedToBankAccountId == bankAccountId
        exists join custBillOfExchangeTrans2
            where custBillOfExchangeTrans2.BillOfExchangeId == custBillOfExchangeTrans.BillOfExchangeId &&
                    custBillOfExchangeTrans2.SeqNum < custBillOfExchangeTrans.SeqNum &&
                    custBillOfExchangeTrans2.Status == CustVendNegInstStatus::Remitted;

        tmpBillOfExchangeStatHistory.Number = any2int(custBillOfExchangeTrans.RecId);
        if (custBillOfExchangeTrans.RecId)
        {
            select sum(AmountMST),sum(SettleAmountMST)
            from custTrans
            where custTrans.AmountMST > 0
            exists join custBillOfExchangeTrans
                where custBillOfExchangeTrans.BillOfExchangeId == custTrans.BillOfExchangeID &&
                        custBillOfExchangeTrans.Voucher == custTrans.Voucher &&
                        custBillOfExchangeTrans.RemittedToBankAccountId == bankAccountId &&
                        custBillOfExchangeTrans.Status == CustVendNegInstStatus::Redrawn
                exists join custBillOfExchangeTrans2
                    where custBillOfExchangeTrans2.BillOfExchangeId == custBillOfExchangeTrans.BillOfExchangeId &&
                            custBillOfExchangeTrans2.SeqNum < custBillOfExchangeTrans.SeqNum &&
                            custBillOfExchangeTrans2.Status == CustVendNegInstStatus::Remitted;

            tmpBillOfExchangeStatHistory.AmountMST = custTrans.AmountMST;
            tmpBillOfExchangeStatHistory.RemaningAmount = custTrans.AmountMST
                                                       - custTrans.SettleAmountMST;
        }
        tmpBillOfExchangeStatHistory.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcHonoredBills</Name>
				<Source><![CDATA[
    protected void calcHonoredBills()
    {
        CustBillOfExchangeJour custBillOfExchangeJour;
        CustBillOfExchangeJour custBillOfExchangeJour2;
        CustBillOfExchangeTrans custBillOfExchangeTrans;
        CustBillOfExchangeTrans custBillOfExchangeTrans2;
        CustBillOfExchangeTrans custBillOfExchangeTrans3;
        CustTrans custTrans;
        CustTrans custTrans2;
        BankRemittanceFilesCust bankRemittanceFilesCust;

        tmpBillOfExchangeStatistics.clear();
        tmpBillOfExchangeStatistics.CustBillOfExchangeStatistics = CustBillOfExchangeStatistics::HonoredBills;

        select count(RecId)
        from custBillOfExchangeJour
        where custBillOfExchangeJour.Status == CustVendNegInstStatus::Honored
        exists join custBillOfExchangeTrans
            where custBillOfExchangeTrans.BillOfExchangeId == custBillOfExchangeJour.BillOfExchangeId &&
                    custBillOfExchangeTrans.Status == custBillOfExchangeJour.Status &&
                    custBillOfExchangeTrans.RemittedToBankAccountId == bankAccountId
            exists join custBillOfExchangeTrans2
                where custBillOfExchangeTrans2.BillOfExchangeId == custBillOfExchangeTrans.BillOfExchangeId &&
                        custBillOfExchangeTrans2.SeqNum == custBillOfExchangeTrans.SeqNum &&
                        custBillOfExchangeTrans2.Status == CustVendNegInstStatus::Remitted
            notexists join custTrans
                where custTrans.BillOfExchangeID == custBillOfExchangeJour.BillOfExchangeId &&
                            custTrans.BankRemittanceFileId
            exists join bankRemittanceFilesCust
            where bankRemittanceFilesCust.FileId == custTrans.BankRemittanceFileId &&
                            bankRemittanceFilesCust.Closed == NoYes::Yes;

        tmpBillOfExchangeStatistics.Number = any2int(custBillOfExchangeJour.RecId);
        if (custBillOfExchangeJour.RecId)
        {
            select sum(AmountMST),sum(SettleAmountMST)
            from custTrans
            where custTrans.BillOfExchangeStatus == CustVendNegInstStatus::Honored
        exists join custBillOfExchangeJour
            where custBillOfExchangeJour.BillOfExchangeId == custTrans.BillOfExchangeID &&
                    custBillOfExchangeJour.BillOfExchangeSeqNum == custTrans.BillOfExchangeSeqNum &&
                    custBillOfExchangeJour.Status == CustVendNegInstStatus::Honored
            exists join custBillOfExchangeTrans
                where custBillOfExchangeTrans.BillOfExchangeId == custBillOfExchangeJour.BillOfExchangeId &&
                        custBillOfExchangeTrans.SeqNum == custTrans.BillOfExchangeSeqNum &&
                        custBillOfExchangeTrans.Status == custBillOfExchangeJour.Status &&
                        custBillOfExchangeTrans.RemittedToBankAccountId == bankAccountId
                exists join custBillOfExchangeTrans2
                    where custBillOfExchangeTrans2.BillOfExchangeId == custBillOfExchangeTrans.BillOfExchangeId &&
                            custBillOfExchangeTrans2.SeqNum == custBillOfExchangeTrans.SeqNum &&
                            custBillOfExchangeTrans2.Status == CustVendNegInstStatus::Remitted
                notexists join custBillOfExchangeJour2
                        where custBillOfExchangeJour2.BillOfExchangeId == custTrans.BillOfExchangeID &&
                                custBillOfExchangeJour2.BillOfExchangeSeqNum == custTrans.BillOfExchangeSeqNum &&
                                custBillOfExchangeJour2.Status == CustVendNegInstStatus::Honored
                            exists join custBillOfExchangeTrans3
                            where custBillOfExchangeTrans3.BillOfExchangeId == custTrans.BillOfExchangeID &&
                                        custBillOfExchangeTrans3.SeqNum == custTrans.BillOfExchangeSeqNum &&
                                        custBillOfExchangeTrans3.Status == CustVendNegInstStatus::Remitted
                                        exists join custTrans2
                                        where custTrans2.BillOfExchangeID == custBillOfExchangeTrans3.BillOfExchangeId &&
                                                    custTrans2.BillOfExchangeSeqNum == custBillOfExchangeTrans3.SeqNum &&
                                                    custTrans2.BillOfExchangeStatus == custBillOfExchangeTrans3.Status
                                        exists join bankRemittanceFilesCust
                                        where bankRemittanceFilesCust.FileId == custTrans2.BankRemittanceFileId &&
                                                    bankRemittanceFilesCust.BankAccountId == custBillOfExchangeTrans2.RemittedToBankAccountId &&
                                                    bankRemittanceFilesCust.Closed == NoYes::Yes;

            tmpBillOfExchangeStatistics.AmountMST = -custTrans.AmountMST;
            tmpBillOfExchangeStatistics.RemaningAmount = custTrans.AmountMST
                                                       - custTrans.SettleAmountMST;
        }
        tmpBillOfExchangeStatistics.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcHonoredClosedBills</Name>
				<Source><![CDATA[
    protected void calcHonoredClosedBills()
    {
        CustBillOfExchangeJour custBillOfExchangeJour;
        CustBillOfExchangeTrans custBillOfExchangeTrans;
        CustTrans custTrans;
        CustTrans custTrans2;
        BankRemittanceFilesCust bankRemittanceFilesCust;

        tmpBillOfExchangeStatistics.clear();
        tmpBillOfExchangeStatistics.CustBillOfExchangeStatistics = CustBillOfExchangeStatistics::HonoredClosedBills;

        select count(RecId)
        from custBillOfExchangeJour
        where custBillOfExchangeJour.Status == CustVendNegInstStatus::Honored
        exists join custBillOfExchangeTrans
            where custBillOfExchangeTrans.BillOfExchangeId == custBillOfExchangeJour.BillOfExchangeId &&
                    custBillOfExchangeTrans.Status == custBillOfExchangeJour.Status &&
                    custBillOfExchangeTrans.RemittedToBankAccountId == bankAccountId
                exists join custTrans
                where custTrans.BillOfExchangeID == custBillOfExchangeJour.BillOfExchangeId &&
                            custTrans.BillOfExchangeSeqNum == custBillOfExchangeTrans.SeqNum &&
                            custTrans.BankRemittanceFileId
                exists join bankRemittanceFilesCust
                where bankRemittanceFilesCust.FileId == custTrans.BankRemittanceFileId &&
                            bankRemittanceFilesCust.Closed == NoYes::Yes;

        tmpBillOfExchangeStatistics.Number = any2int(custBillOfExchangeJour.RecId);
        if (custBillOfExchangeJour.RecId)
        {
            select sum(AmountMST),sum(SettleAmountMST)
            from custTrans
            where custTrans.BillOfExchangeStatus == CustVendNegInstStatus::Honored
            exists join custBillOfExchangeJour
                where custBillOfExchangeJour.BillOfExchangeId == custTrans.BillOfExchangeID &&
                        custBillOfExchangeJour.BillOfExchangeSeqNum == custTrans.BillOfExchangeSeqNum &&
                        custBillOfExchangeJour.Status == CustVendNegInstStatus::Honored
                exists join custBillOfExchangeTrans
                    where custBillOfExchangeTrans.BillOfExchangeId == custBillOfExchangeJour.BillOfExchangeId &&
                            custBillOfExchangeTrans.SeqNum == custTrans.BillOfExchangeSeqNum &&
                            custBillOfExchangeTrans.Status == CustVendNegInstStatus::Remitted &&
                            custBillOfExchangeTrans.RemittedToBankAccountId == bankAccountId
                        exists join custTrans2
                        where custTrans2.BillOfExchangeID == custBillOfExchangeTrans.BillOfExchangeId &&
                                    custTrans2.BillOfExchangeSeqNum== custBillOfExchangeTrans.SeqNum &&
                                    custTrans2.BillOfExchangeStatus== custBillOfExchangeTrans.Status
                        exists join bankRemittanceFilesCust
                        where bankRemittanceFilesCust.FileId == custTrans2.BankRemittanceFileId &&
                                    bankRemittanceFilesCust.BankAccountId == custBillOfExchangeTrans.RemittedToBankAccountId &&
                                    bankRemittanceFilesCust.Closed == NoYes::Yes;

            tmpBillOfExchangeStatistics.AmountMST = -custTrans.AmountMST;
            tmpBillOfExchangeStatistics.RemaningAmount = custTrans.AmountMST
                                                       - custTrans.SettleAmountMST;
        }
        tmpBillOfExchangeStatistics.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcProtestedBills</Name>
				<Source><![CDATA[
    protected void calcProtestedBills()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcProtestedClosedBills</Name>
				<Source><![CDATA[
    protected void calcProtestedClosedBills()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRedrawnBills</Name>
				<Source><![CDATA[
    protected void calcRedrawnBills()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRemittedBills</Name>
				<Source><![CDATA[
    protected void calcRemittedBills()
    {
        CustBillOfExchangeJour custBillOfExchangeJour;
        CustBillOfExchangeTrans custBillOfExchangeTrans;
        CustTrans custTrans;
        CustTrans custTrans2;
        CustTransOpen custTransOpen;
        AmountMST settleAmountMST;
        AmountMST amountMST;

        tmpBillOfExchangeStatistics.clear();
        tmpBillOfExchangeStatistics.CustBillOfExchangeStatistics = CustBillOfExchangeStatistics::RemittedBills;

        select count(RecId)
        from custBillOfExchangeJour
        where custBillOfExchangeJour.Status == CustVendNegInstStatus::Remitted
        exists join custBillOfExchangeTrans
            where custBillOfExchangeTrans.BillOfExchangeId == custBillOfExchangeJour.BillOfExchangeId &&
                    custBillOfExchangeTrans.Status == custBillOfExchangeJour.Status &&
                    custBillOfExchangeTrans.RemittedToBankAccountId == bankAccountId;

        tmpBillOfExchangeStatistics.Number = any2int(custBillOfExchangeJour.RecId);

        if (custBillOfExchangeJour.RecId)
        {
            while select AmountMST,SettleAmountMST,BillOfExchangeID,BillOfExchangeSeqNum
            from custTrans
            exists join custBillOfExchangeJour
                where custBillOfExchangeJour.BillOfExchangeId == custTrans.BillOfExchangeID &&
                        custBillOfExchangeJour.Status == CustVendNegInstStatus::Remitted
            exists join custBillOfExchangeTrans
                where custBillOfExchangeTrans.BillOfExchangeId == custBillOfExchangeJour.BillOfExchangeId &&
                        custBillOfExchangeTrans.Status == custBillOfExchangeJour.Status &&
                        custBillOfExchangeTrans.RemittedToBankAccountId == bankAccountId
            exists join custTransOpen
                where custTransOpen.RefRecId == custTrans.RecId
            {
                select sum(AmountMST)
                  from custTrans2
                  where custTrans2.BillOfExchangeID == custTrans.BillOfExchangeID &&
                          custTrans2.BillOfExchangeSeqNum == custTrans.BillOfExchangeSeqNum &&
                          (custTrans2.BillOfExchangeStatus == CustVendNegInstStatus::Drawn ||
                           custTrans2.BillOfExchangeStatus == CustVendNegInstStatus::Redrawn) &&
                           custTrans2.AmountMST > 0;

                settleAmountMST += custTrans.AmountMST - custTrans.SettleAmountMST;
                amountMST += custTrans2.AmountMST;
            }
            tmpBillOfExchangeStatistics.AmountMST = amountMST;
            tmpBillOfExchangeStatistics.RemaningAmount = settleAmountMST;
        }
        tmpBillOfExchangeStatistics.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(CompanyBankAccountId _bankAccountId)
    {
        bankAccountId = _bankAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBillsInRemittance</Name>
				<Source><![CDATA[
    public CustTrans queryBillsInRemittance()
    {
        CustTrans custTrans;
        CustTransOpen custTransOpen;
        CustBillOfExchangeJour custBillOfExchangeJour;
        CustBillOfExchangeTrans custBillOfExchangeTrans;
        SpecTrans specTrans;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;
        CustTrans tmpCustTrans;

        tmpCustTrans.setTmp();
        custTrans.recordLevelSecurity(true);
        custBillOfExchangeJour.recordLevelSecurity(true);
        custBillOfExchangeTrans.recordLevelSecurity(true);
        custTransOpen.recordLevelSecurity(true);
        specTrans.recordLevelSecurity(true);
        ledgerJournalTrans.recordLevelSecurity(true);
        ledgerJournalTable.recordLevelSecurity(true);

        // When a Bill of Exchange (BOE) is created, it rolls all cross-company invoices that
        // are settled into one BOE CustTrans/Open record that exists in the same company as the
        // payment. As a result, the SpecTrans record never needs to go cross-company in order
        // to generate the correct results. So, all queries or calculations below are "safe" since
        // they all happen in the context of a single company.

        while select custTrans
        exists join custBillOfExchangeJour
            where custBillOfExchangeJour.BillOfExchangeId == custTrans.BillOfExchangeID &&
                    (custBillOfExchangeJour.Status == CustVendNegInstStatus::Drawn ||
                     custBillOfExchangeJour.Status == CustVendNegInstStatus::Redrawn)
        exists join custBillOfExchangeTrans
            where custBillOfExchangeTrans.BillOfExchangeId == custBillOfExchangeJour.BillOfExchangeId &&
                    custBillOfExchangeTrans.Status == custBillOfExchangeJour.Status
            exists join custTransOpen
                where custTransOpen.AccountNum == custTrans.AccountNum &&
                        custTransOpen.RefRecId == custTrans.RecId
                exists join specTrans
                where specTrans.RefTableId == custTransOpen.TableId &&
                            specTrans.RefRecId == custTransOpen.RecId &&
                            specTrans.RefCompany == custTransOpen.dataAreaId
                        exists join ledgerJournalTrans
                        where ledgerJournalTrans.RecId == specTrans.SpecRecId &&
                                    ledgerJournalTrans.TableId == specTrans.SpecTableId &&
                                    ledgerJournalTrans.dataAreaId == specTrans.SpecCompany
                        exists join ledgerJournalTable
                        where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                                    ledgerJournalTable.JournalType == LedgerJournalType::CustPaymRemittance
        {
            tmpCustTrans.data(custTrans);
            tmpCustTrans.insert();
        }
        return tmpCustTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryHistoryOfProtestedBills</Name>
				<Source><![CDATA[
    public CustTrans queryHistoryOfProtestedBills()
    {
        CustTrans custTrans;
        CustBillOfExchangeTrans custBillOfExchangeTrans;
        CustBillOfExchangeTrans custBillOfExchangeTrans2;
        CustTrans tmpCustTrans;

        tmpCustTrans.setTmp();
        custTrans.recordLevelSecurity(true);
        custBillOfExchangeTrans.recordLevelSecurity(true);
        custBillOfExchangeTrans2.recordLevelSecurity(true);
        while select custTrans
        where custTrans.AmountMST > 0
            exists join custBillOfExchangeTrans
                where custBillOfExchangeTrans.BillOfExchangeId == custTrans.BillOfExchangeID &&
                        custBillOfExchangeTrans.SeqNum == custTrans.BillOfExchangeSeqNum &&
                        custBillOfExchangeTrans.Voucher == custTrans.Voucher &&
                        custBillOfExchangeTrans.RemittedToBankAccountId == bankAccountId &&
                        custBillOfExchangeTrans.Status == CustVendNegInstStatus::Protested
                exists join custBillOfExchangeTrans2
                    where custBillOfExchangeTrans2.BillOfExchangeId == custBillOfExchangeTrans.BillOfExchangeId &&
                            custBillOfExchangeTrans2.SeqNum == custBillOfExchangeTrans.SeqNum &&
                            custBillOfExchangeTrans2.Status == CustVendNegInstStatus::Remitted
        {
            tmpCustTrans.data(custTrans);
            tmpCustTrans.insert();
        }
        return tmpCustTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryHistoryOfRedrawnBills</Name>
				<Source><![CDATA[
    public CustTrans queryHistoryOfRedrawnBills()
    {
        CustTrans custTrans;
        CustBillOfExchangeTrans custBillOfExchangeTrans;
        CustBillOfExchangeTrans custBillOfExchangeTrans2;
        CustTrans tmpCustTrans;

        tmpCustTrans.setTmp();
        custTrans.recordLevelSecurity(true);
        custBillOfExchangeTrans.recordLevelSecurity(true);
        custBillOfExchangeTrans2.recordLevelSecurity(true);
        while select custTrans
            where custTrans.AmountMST > 0
            exists join custBillOfExchangeTrans
                where custBillOfExchangeTrans.BillOfExchangeId == custTrans.BillOfExchangeID &&
                        custBillOfExchangeTrans.Voucher == custTrans.Voucher &&
                        custBillOfExchangeTrans.RemittedToBankAccountId == bankAccountId &&
                        custBillOfExchangeTrans.Status == CustVendNegInstStatus::Redrawn
                exists join custBillOfExchangeTrans2
                    where custBillOfExchangeTrans2.BillOfExchangeId == custBillOfExchangeTrans.BillOfExchangeId &&
                            custBillOfExchangeTrans2.SeqNum < custBillOfExchangeTrans.SeqNum &&
                            custBillOfExchangeTrans2.Status == CustVendNegInstStatus::Remitted

        {
            tmpCustTrans.data(custTrans);
            tmpCustTrans.insert();
        }
        return tmpCustTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryHonoredBills</Name>
				<Source><![CDATA[
    public CustTrans queryHonoredBills()
    {
        CustTrans custTrans;
        CustTrans custTrans2;
        CustBillOfExchangeJour custBillOfExchangeJour;
        CustBillOfExchangeTrans custBillOfExchangeTrans;
        CustBillOfExchangeTrans custBillOfExchangeTrans2;
        CustBillOfExchangeTrans custBillOfExchangeTrans3;
        CustTrans tmpCustTrans;
        BankRemittanceFilesCust bankRemittanceFilesCust;

        tmpCustTrans.setTmp();
        custTrans.recordLevelSecurity(true);
        custBillOfExchangeJour.recordLevelSecurity(true);
        custBillOfExchangeTrans.recordLevelSecurity(true);
        custBillOfExchangeTrans2.recordLevelSecurity(true);
        custBillOfExchangeTrans3.recordLevelSecurity(true);
        custTrans2.recordLevelSecurity(true);
        bankRemittanceFilesCust.recordLevelSecurity(true);
        while select custTrans
               where custTrans.BillOfExchangeStatus == CustVendNegInstStatus::Honored
        exists join custBillOfExchangeJour
            where custBillOfExchangeJour.BillOfExchangeId == custTrans.BillOfExchangeID &&
                    custBillOfExchangeJour.BillOfExchangeSeqNum == custTrans.BillOfExchangeSeqNum &&
                    custBillOfExchangeJour.Status == CustVendNegInstStatus::Honored
            exists join custBillOfExchangeTrans
                where custBillOfExchangeTrans.BillOfExchangeId == custBillOfExchangeJour.BillOfExchangeId &&
                        custBillOfExchangeTrans.SeqNum == custTrans.BillOfExchangeSeqNum &&
                        custBillOfExchangeTrans.Status == custBillOfExchangeJour.Status &&
                        custBillOfExchangeTrans.RemittedToBankAccountId == bankAccountId
                exists join custBillOfExchangeTrans2
                    where custBillOfExchangeTrans2.BillOfExchangeId == custBillOfExchangeTrans.BillOfExchangeId &&
                            custBillOfExchangeTrans2.SeqNum == custBillOfExchangeTrans.SeqNum &&
                            custBillOfExchangeTrans2.Status == CustVendNegInstStatus::Remitted
                 notexists join custBillOfExchangeTrans3
                    where custBillOfExchangeTrans3.BillOfExchangeId == custTrans.BillOfExchangeID &&
                                custBillOfExchangeTrans3.SeqNum == custTrans.BillOfExchangeSeqNum &&
                                custBillOfExchangeTrans3.Status == CustVendNegInstStatus::Remitted
                                exists join custTrans2
                                where custTrans2.BillOfExchangeID == custBillOfExchangeTrans3.BillOfExchangeId &&
                                            custTrans2.BillOfExchangeSeqNum == custBillOfExchangeTrans3.SeqNum &&
                                            custTrans2.BillOfExchangeStatus == custBillOfExchangeTrans3.Status
                                exists join bankRemittanceFilesCust
                                where bankRemittanceFilesCust.FileId == custTrans2.BankRemittanceFileId &&
                                            bankRemittanceFilesCust.BankAccountId == custBillOfExchangeTrans2.RemittedToBankAccountId &&
                                            bankRemittanceFilesCust.Closed == NoYes::Yes

        {
            tmpCustTrans.data(custTrans);
            tmpCustTrans.insert();
        }
        return tmpCustTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryHonoredClosedBills</Name>
				<Source><![CDATA[
    public CustTrans queryHonoredClosedBills()
    {
        CustTrans custTrans;
        CustTrans custTrans2;
        CustBillOfExchangeJour custBillOfExchangeJour;
        CustBillOfExchangeTrans custBillOfExchangeTrans;
        CustTrans tmpCustTrans;
        BankRemittanceFilesCust bankRemittanceFilesCust;

        tmpCustTrans.setTmp();
        custTrans.recordLevelSecurity(true);
        custBillOfExchangeJour.recordLevelSecurity(true);
        custBillOfExchangeTrans.recordLevelSecurity(true);
        custTrans2.recordLevelSecurity(true);
        bankRemittanceFilesCust.recordLevelSecurity(true);
        while select custTrans
               where custTrans.BillOfExchangeStatus == CustVendNegInstStatus::Honored
            exists join custBillOfExchangeJour
                 where custBillOfExchangeJour.BillOfExchangeId == custTrans.BillOfExchangeID &&
                        custBillOfExchangeJour.BillOfExchangeSeqNum == custTrans.BillOfExchangeSeqNum &&
                        custBillOfExchangeJour.Status == CustVendNegInstStatus::Honored
                exists join custBillOfExchangeTrans
                     where custBillOfExchangeTrans.BillOfExchangeId == custBillOfExchangeJour.BillOfExchangeId &&
                            custBillOfExchangeTrans.SeqNum == custTrans.BillOfExchangeSeqNum &&
                            custBillOfExchangeTrans.Status == CustVendNegInstStatus::Remitted &&
                            custBillOfExchangeTrans.RemittedToBankAccountId == bankAccountId
                        exists join custTrans2
                        where custTrans2.BillOfExchangeID == custBillOfExchangeTrans.BillOfExchangeId &&
                                    custTrans2.BillOfExchangeSeqNum== custBillOfExchangeTrans.SeqNum &&
                                    custTrans2.BillOfExchangeStatus== custBillOfExchangeTrans.Status
                        exists join bankRemittanceFilesCust
                        where bankRemittanceFilesCust.FileId == custTrans2.BankRemittanceFileId &&
                                    bankRemittanceFilesCust.BankAccountId == custBillOfExchangeTrans.RemittedToBankAccountId &&
                                    bankRemittanceFilesCust.Closed == NoYes::Yes
        {
            tmpCustTrans.data(custTrans);
            tmpCustTrans.insert();
        }
        return tmpCustTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRemittedBills</Name>
				<Source><![CDATA[
    public CustTrans queryRemittedBills()
    {
        CustTrans custTrans;
        CustTransOpen custTransOpen;
        CustBillOfExchangeJour custBillOfExchangeJour;
        CustBillOfExchangeTrans custBillOfExchangeTrans;
        CustTrans tmpCustTrans;

        tmpCustTrans.setTmp();
        custTrans.recordLevelSecurity(true);
        custBillOfExchangeJour.recordLevelSecurity(true);
        custBillOfExchangeTrans.recordLevelSecurity(true);
        custTransOpen.recordLevelSecurity(true);
        while select custTrans
             exists join custBillOfExchangeJour
                 where custBillOfExchangeJour.BillOfExchangeId == custTrans.BillOfExchangeID &&
                         custBillOfExchangeJour.Status == CustVendNegInstStatus::Remitted
                exists join custBillOfExchangeTrans
                    where custBillOfExchangeTrans.BillOfExchangeId == custBillOfExchangeJour.BillOfExchangeId &&
                            custBillOfExchangeTrans.Status == custBillOfExchangeJour.Status &&
                            custBillOfExchangeTrans.SeqNum == custTrans.BillOfExchangeSeqNum &&
                            custBillOfExchangeTrans.RemittedToBankAccountId == bankAccountId
                    exists join custTransOpen
                        where custTransOpen.RefRecId == custTrans.RecId
        {
            tmpCustTrans.data(custTrans);
            tmpCustTrans.insert();
        }
        return tmpCustTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>