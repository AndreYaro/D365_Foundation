<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqDemPlanTaskLoggerInterface</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>ReqDemPlanTaskLoggerInterface</c> interface provides a contract for task loggers.
/// </summary>
interface ReqDemPlanTaskLoggerInterface
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>appendTaskDetailLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends the given message to the detailed log information for the current task.
    /// </summary>
    /// <param name="_detailLog">
    /// The detailed logging information to log.
    /// </param>
    public void appendTaskDetailLog(ReqDemPlanTaskDetailLog _detailLog)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>finishLogging</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ends a logging session, updating the run time of the task collection.
    /// </summary>
    /// <param name="_cleanupLeftoverTasks">
    /// If set to true, should mark as failed any tasks still in progress,
    /// otherwise an exception should be thrown if there is a task in progress;
    /// optional, default is true.
    /// </param>
    public void finishLogging(boolean _cleanupLeftoverTasks = true)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>finishTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs the successful completion of a task.
    /// </summary>
    /// <param name="_executionLog">
    /// The execution logging information to log; optional.
    /// </param>
    public void finishTask(ReqDemPlanTaskDetailLog _executionLog = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLoggingErrors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether logging errors occurred during the lifetime of this instance.
    /// </summary>
    /// <returns>
    /// True if any logging errors occurred; otherwise, false.
    /// </returns>
    public boolean hasLoggingErrors()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>incrementTaskRecordsProcessed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Increments the number of records processed in the current task.
    /// </summary>
    /// <param name="_newRecordsProcessed">
    /// The number of records processed; optional, defaults to 1.
    /// </param>
    public void incrementTaskRecordsProcessed(int64 _newRecordsProcessed = 1)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>loggingErrors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of logging errors that occurred during the lifetime of this instance.
    /// </summary>
    /// <returns>
    /// The list of strings that contains logging errors that occurred during the lifetime of this instance.
    /// </returns>
    public List loggingErrors()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaskRank</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the rank of the current task.
    /// </summary>
    /// <param name="_rank">
    /// The rank of the current task.
    /// </param>
    public void setTaskRank(ReqDemPlanTaskRank _rank)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBundleId</Name>
				<Source><![CDATA[
    public void setBundleId(ReqDemPlanForecastAuthorizationBundleId _bundleId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>startLogging</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts a logging session.
    /// </summary>
    /// <returns>
    /// The RecId of the task collection created by this instance, if applicable.
    /// </returns>
    public ReqDemPlanTaskCollectionRecId startLogging()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>startTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts a task with a given name.
    /// </summary>
    /// <param name="_taskName">
    /// The name of the task.
    /// </param>
    /// <param name="_taskDataAreaId">
    /// The rank of the task; optional, defaults to empty (cross-company task).
    /// </param>
    public void startTask(
        ReqDemPlanTaskName  _taskName,
        DataAreaId          _taskDataAreaId = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>taskCollectionRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the RecId of the task collection currently in use by this instance.
    /// </summary>
    /// <returns>
    /// The RecId of the task collection currently in use by this instance,
    /// or zero if logging was not started.
    /// </returns>
    public ReqDemPlanTaskCollectionRecId taskCollectionRecId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>taskFailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs the failure of a task.
    /// Other data about the task is preserved.
    /// </summary>
    /// <param name="_failureLog">
    /// The failure logging information to log; optional.
    /// </param>
    public void taskFailed(ReqDemPlanTaskDetailLog _failureLog = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>bundleLogging</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs bundle information.
    /// </summary>
    /// <param name="_batchJobId">
    /// Batch job identificator.
    /// </param>
    public void bundleLogging(RefRecId _batchJobId)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>