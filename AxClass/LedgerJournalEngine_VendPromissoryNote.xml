<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalEngine_VendPromissoryNote</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerJournalEngine_VendPromissoryNote</c> class supports promissory note journals.
/// </summary>
/// <remarks>
/// This class is an extension of the <c>LedgerJournalEngine</c> class.
/// </remarks>
public class LedgerJournalEngine_VendPromissoryNote extends LedgerJournalEngine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountModified</Name>
				<Source><![CDATA[
    public DebCredProposal accountModified(
        LedgerJournalTrans _ledgerJournalTrans,
        LedgerJournalTrans_Project  _ledgerJournalTrans_Project = null,
        LedgerJournalTrans_Asset _ledgerJournalTrans_Asset = null,
        Tax1099BoxDetail _tax1099Detail = null,
        LedgerJournalTrans_RAsset _ledgerJournalTrans_RAsset = null,
        LedgerJournalTrans_RDeferrals _ledgerJournalTrans_RDeferrals = null)
    {
        DebCredProposal debCredProposal = super(
            _ledgerJournalTrans,
            _ledgerJournalTrans_Project,
            _ledgerJournalTrans_Asset,
            _tax1099Detail,
            _ledgerJournalTrans_RAsset,
            _ledgerJournalTrans_RDeferrals);

        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
        {
            debCredProposal = DebCredProposal::Debit;
        }

        return debCredProposal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendTable</Name>
				<Source><![CDATA[
    protected void initFromVendTable(LedgerJournalTrans ledgerJournalTrans, Tax1099BoxDetail _tax1099Detail = null)
    {
        ledgerJournalTrans.Due = ledgerJournalTrans.TransDate;
        ledgerJournalTrans.CurrencyCode = vendTable.Currency ? vendTable.Currency : ledgerJournalTrans.CurrencyCode;
        ledgerJournalTrans.PostingProfile = VendParameters::find().PostingProfile;
        ledgerJournalTrans.CustVendBankAccountId = vendTable.BankAccount;
        ledgerJournalTrans.PaymMode = vendTable.PaymMode;
        ledgerJournalTrans.PaymSpec = vendTable.PaymSpec;
        ledgerJournalTrans.BankTransType = VendPaymModeTable::find(vendTable.PaymMode).BankTransType;

        this.initVendOffsetAccount(ledgerJournalTrans);

        if (ledgerJournalTrans.ledgerJournalTable().JournalType == LedgerJournalType::VendPromissoryNoteRedraw)
        {
            ledgerJournalTrans.SettleVoucher = SettlementType::None;
        }
        else
        {
            ledgerJournalTrans.SettleVoucher = VendParameters::find().AutoSettle ? SettlementType::OpenTransact : SettlementType::None;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalTrans_Asset _ledgerJournalTrans_Asset = null)
    {
        super(_ledgerJournalTrans);

        this.initOffsetFromLedgerJournalTable(_ledgerJournalTrans);

        _ledgerJournalTrans.BankAccountId = _ledgerJournalTrans.ledgerJournalTable().BankAccountId;
        _ledgerJournalTrans.AccountType = LedgerJournalACType::Vend;

        if (_ledgerJournalTrans.ledgerJournalTable().JournalType == LedgerJournalType::VendPromissoryNoteRedraw)
        {
            _ledgerJournalTrans.SettleVoucher = SettlementType::None;
        }
        else
        {
            _ledgerJournalTrans.SettleVoucher = VendParameters::find().AutoSettle ? SettlementType::OpenTransact : SettlementType::None;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendOffsetAccount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initVendOffsetAccount(LedgerJournalTrans _ledgerJournalTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>markedForSettlementWarning</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean markedForSettlementWarning(LedgerJournalTrans _ledgerJournalTrans)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentModeModified</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void paymentModeModified(LedgerJournalTrans _ledgerJournalTrans)
    {
        _ledgerJournalTrans.paymModeModified();
        
        // Only set the offset financial tag when the offset account has value
        if (VendPromissoryNoteFinTagFlight::instance().isEnabled() && _ledgerJournalTrans.OffsetLedgerDimension)
        {
            this.performFinTagDefaulting(_ledgerJournalTrans, AccountOffsetaccount::OffsetAccount);
        }
        if (ledgerJournalTrans_ds)
        {
            ledgerJournalTrans_ds.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentModified</Name>
				<Source><![CDATA[
    public void paymentModified(LedgerJournalTrans ledgerJournalTrans)
    {
        if (ledgerJournalTrans.parmLedgerDimension())
        {
            if (ledgerJournalCashDiscService)
            {
                ledgerJournalCashDiscService.setCashDiscParameters(
                    ledgerJournalTrans.Company,
                    ledgerJournalTrans.CashDiscCode,
                    ledgerJournalTrans.Invoice,
                    ledgerJournalTrans.AccountType);
            }

            if (ledgerJournalTrans.SettleVoucher == SettlementType::None)
            {
                ledgerJournalTrans.Due = ledgerJournalTrans.DocumentDate ? ledgerJournalTrans.DocumentDate : ledgerJournalTrans.TransDate;
                if (ledgerJournalTrans.Invoice)
                {
                    ledgerJournalTrans.Due = PaymTerm::find(ledgerJournalTrans.Payment).due(ledgerJournalTrans.Due, this.paymDayId(ledgerJournalTrans));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleTransUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates settlement data for the journal line.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    A <c>LedgerJournalTrans</c> record buffer.
    /// </param>
    /// <remarks>
    ///    This method is used by the split payment feature.
    /// </remarks>
    public void settleTransUpdate(LedgerJournalTrans _ledgerJournalTrans)
    {
        SpecTrans specTrans;
        VendTransOpen vendTransOpen;
        VendTrans vendTrans;

        DueDate dueDate;
        VendPaymMode paymMode;
        VendPaymSpec paymSpec;
        PostingProfile postingProfile;
        CompanyBankAccountId companyBankAccountId;
        BankThirdPartyAccountId thirdPartyBankAccountId;

        boolean warningIssuedDueDate  = false;
        boolean crossCompanySettlement;

        super(_ledgerJournalTrans);

        while select crossCompany RecId from specTrans
            where specTrans.SpecCompany == _ledgerJournalTrans.DataAreaId
                && specTrans.SpecRecId == _ledgerJournalTrans.RecId
                && specTrans.SpecTableId == _ledgerJournalTrans.TableId
            join DueDate from vendTransOpen
                where vendTransOpen.DataAreaId == specTrans.RefCompany
                    && vendTransOpen.TableId == specTrans.RefTableId
                    && vendTransOpen.RecId == specTrans.RefRecId
            join vendTrans
                where vendTrans.RecId == vendTransOpen.RefRecId
                    && vendTrans.AccountNum == vendTransOpen.AccountNum
        {
            if (_ledgerJournalTrans.Company != vendTrans.company())
            {
                crossCompanySettlement = true;
            }

            if (dueDate && dueDate != vendTransOpen.DueDate && !warningIssuedDueDate)
            {
                warningIssuedDueDate = !checkFailed("@SYS73746");
            }

            if ((paymMode && paymMode != vendTrans.PaymMode)
                || (paymSpec && paymSpec != vendTrans.PaymSpec)
                || (postingProfile && postingProfile != vendTrans.PostingProfile)
                || (companyBankAccountId && companyBankAccountId != vendTrans.CompanyBankAccountId)
                || (thirdPartyBankAccountId && thirdPartyBankAccountId != vendTrans.ThirdPartyBankAccountId))
            {
                _ledgerJournalTrans.amountCur2DebCred(0);
                _ledgerJournalTrans.write();

                if (ledgerJournalTrans_ds)
                {
                    ledgerJournalTrans_ds.refresh();
                }

                SpecTransManager::constructServer(_ledgerJournalTrans, false).deleteAll();

                throw error("@SYS73747");
            }

            dueDate = max(dueDate, vendTransOpen.DueDate);
            paymMode = vendTrans.PaymMode;
            paymSpec = vendTrans.PaymSpec;
            postingProfile = vendTrans.PostingProfile;
            companyBankAccountId = vendTrans.CompanyBankAccountId;
            thirdPartyBankAccountId = vendTrans.ThirdPartyBankAccountId;
        }

        if (dueDate)
        {
            _ledgerJournalTrans.Due = dueDate;
        }

        if (!crossCompanySettlement)
        {
            if (paymMode)
            {
                _ledgerJournalTrans.PaymMode = paymMode;

                if (paymSpec)
                {
                    _ledgerJournalTrans.PaymSpec = paymSpec;
                }
                else
                {
                    _ledgerJournalTrans.PaymModeMap::modifiedPaymMode();
                }
            }

            if (postingProfile)
            {
                _ledgerJournalTrans.PostingProfile = postingProfile;
            }

            if (!_ledgerJournalTrans.BankAccountId && companyBankAccountId)
            {
                _ledgerJournalTrans.BankAccountId = companyBankAccountId;
            }
        }

        if (thirdPartyBankAccountId && !crossCompanySettlement)
        {
            _ledgerJournalTrans.CustVendBankAccountId = thirdPartyBankAccountId;
        }

        _ledgerJournalTrans.TransactionType = LedgerTransType::Payment;

        this.initVendOffsetAccount(_ledgerJournalTrans);

        _ledgerJournalTrans.write();

        if (ledgerJournalTrans_ds)
        {
            ledgerJournalTrans_ds.reread();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePaymentFee</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates payment fees and calls research on the data source of the payment fee line data source.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    A <c>LedgerJournalTrans</c> record buffer.
    /// </param>
    /// <param name="_custVendPaymJournalFee">
    ///    A <c>CustVendPaymJournalFee</c> record buffer.
    /// </param>
    public void updatePaymentFee(
        LedgerJournalTrans     _ledgerJournalTrans,
        CustVendPaymJournalFee _custVendPaymJournalFee)
    {
        if (!_ledgerJournalTrans.amount())
        {
            return;
        }

        this.dataSourceWrite(_ledgerJournalTrans);

        this.calcPaymentFee(_ledgerJournalTrans);

        FormDataUtil::getFormDataSource(_custVendPaymJournalFee).research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSettleNoteTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates transactions when the payment is settled for a particular vendor.
    /// </summary>
    /// <param name="_ledgerJournalId">
    ///    The journal ID of the selected ledger journal.
    /// </param>
    /// <returns>
    ///    true if all transactions are valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    When the user clicks the settlement menu item button, this method validates each line of the
    ///    journal to check its validity. The validation is based on comparing the bank account expiration
    ///    date and active date with the payment transaction date. Active date comparison takes place only if
    ///    the payment type is electronic.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean validateSettleNoteTransactions(LedgerJournalId _ledgerJournalId)
    {
        LedgerJournalTrans ledgerJournalTrans;
        VendBankAccount vendBankAccount;
        int numberOfInvalidBankAccounts;
        DialogButton dialogButton;
        VendPaymModeTable vendPaymModeTable;
        boolean ret;
        DimensionAttributeValueCombination dimAttrValueCombo;

        ledgerJournalTable = LedgerJournalTable::find(_ledgerJournalId);

        switch (ledgerJournalTable.JournalType)
        {
            case LedgerJournalType::VendPromissoryNoteSettle:
                while select JournalNum, LedgerDimension, CustVendBankAccountId, TransDate from ledgerJournalTrans
                    join AccountID, VendAccount, ExpiryDate from vendBankAccount
                        where ledgerJournalTrans.CustVendBankAccountId == vendBankAccount.AccountID
                            && ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
                            && ledgerJournalTrans.JournalNum == _ledgerJournalId
                    join RecId from dimAttrValueCombo
                        where dimAttrValueCombo.RecId == ledgerJournalTrans.LedgerDimension
                            && dimAttrValueCombo.DisplayValue == vendBankAccount.VendAccount
                {
                    if (vendBankAccount.ExpiryDate != Global::utcDateTimeNull()
                        && ledgerJournalTrans.TransDate > DateTimeUtil::date(vendBankAccount.ExpiryDate))
                    {
                        numberOfInvalidBankAccounts = numberOfInvalidBankAccounts + 1;
                        break;
                    }
                }

                if (numberOfInvalidBankAccounts > 0)
                {
                    if (ledgerJournalTable.numOfLines() > 1)
                    {
                        ret = checkFailed("@SYS115096");
                    }
                    else
                    {
                        ret = checkFailed("@SYS116179");
                    }
                }
                else
                {
                    ret = true;
                }

                numberOfInvalidBankAccounts = 0;

                if (ret)
                {
                    while select JournalNum, LedgerDimension, CustVendBankAccountId, PaymMode, TransDate from ledgerJournalTrans
                        join AccountID, VendAccount, ActiveDate from vendBankAccount
                            where ledgerJournalTrans.CustVendBankAccountId == vendBankAccount.AccountID
                                && ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
                        join RecId from dimAttrValueCombo
                            where dimAttrValueCombo.RecId == ledgerJournalTrans.LedgerDimension
                                && dimAttrValueCombo.DisplayValue == vendBankAccount.VendAccount
                        join PaymMode, PaymentType from vendPaymModeTable
                            where vendPaymModeTable.PaymMode == ledgerJournalTrans.PaymMode
                                && ledgerJournalTrans.JournalNum == _ledgerJournalId
                                && vendPaymModeTable.PaymentType == this.getPaymentTypeElectronicPayment()
                    {
                        if (vendBankAccount.ActiveDate != Global::utcDateTimeNull()
                            && ledgerJournalTrans.TransDate <= DateTimeUtil::date(vendBankAccount.ActiveDate))
                        {
                            numberOfInvalidBankAccounts = numberOfInvalidBankAccounts + 1;
                        }
                    }

                    if (numberOfInvalidBankAccounts > 0)
                    {
                        if (ledgerJournalTable.numOfLines() == numberOfInvalidBankAccounts
                            && ledgerJournalTable.numOfLines() != 1 )
                        {
                            ret = checkFailed("@SYS115077");
                        }
                        else if (ledgerJournalTable.numOfLines() > 1)
                        {
                            dialogButton = Box::okCancel("@SYS116177", DialogButton::Ok);
                            if (dialogButton == DialogButton::Ok)
                            {
                                ret = true;
                            }
                            else
                            {
                                ret = false;
                            }
                        }
                        else
                        {
                            select firstonly Voucher from ledgerJournalTrans
                                where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum;

                            ret = checkFailed(strfmt("@SYS115078",ledgerJournalTrans.Voucher));
                        }
                    }
                    else
                    {
                        ret = true;
                    }
                }
                break;

            default:
                ret = true;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentTypeElectronicPayment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the electronic payment enum value of <c>PaymentType</c>.
    /// </summary>
    /// <returns>
    ///     Enum value of electronic payment of enum <c>PaymentType</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected PaymentType getPaymentTypeElectronicPayment()
    {
        return PaymentType::ElectronicPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerJournalEngine_VendPromissoryNote construct(
        FormRun _formRun,
        LedgerJournalType _ledgerJournalType)
    {
        LedgerJournalEngine_VendPromissoryNote  ledgerJournalEngine;

        switch (_ledgerJournalType)
        {
            case LedgerJournalType::VendPromissoryNoteDraw:
                ledgerJournalEngine = new LedgerJournalEngine_VendNoteDraw(_formRun);
                break;

            case LedgerJournalType::VendPromissoryNoteRedraw:
                ledgerJournalEngine = new LedgerJournalEngine_VendNoteRedraw(_formRun);
                break;

            case LedgerJournalType::VendPaymRemittance:
                ledgerJournalEngine = new LedgerJournalEngine_VendRemittance(_formRun);
                break;

            case LedgerJournalType::VendPromissoryNoteSettle:
                ledgerJournalEngine = new LedgerJournalEngine_VendNoteSettle(_formRun);
                break;

            default:
                throw(error(strfmt("@SYS19306", funcname())));
        }

        return ledgerJournalEngine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>