<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesAgreementGenerateReleaseOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>SalesAgreementGenerateReleaseOrder</c> class creates a sales release order from a sales
///    agreement.
/// </summary>
/// <remarks>
///    This class extends the <c>AgreementGenerateReleaseOrder</c> class.
/// </remarks>
class SalesAgreementGenerateReleaseOrder extends AgreementGenerateReleaseOrder
{
    SalesTable                      salesTable;
    SalesCreateReleaseOrderLineTmp  releaseOrderLine;
    SalesCreateReleaseOrderTableTmp releaseOrderTable;
    SalesAgreementHeader            salesAgreementHeader;
    container                       releaseLineList;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        releaseOrderTable,
        releaseLineList
    #Endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that a release sales order can be created.
    /// </summary>
    /// <returns>
    ///    true if the release sales order data is okay; otherwise, false.
    /// </returns>
    public boolean check()
    {
        SalesCreateReleaseOrderLineTmp  releaseOrderLineLocal;
        AgreementLineQuantityCommitment agreementLineQuantityCommitment;
        boolean                         ok = true;
        boolean                         agreementLineRemainingQtyIsOK = true;

        releaseOrderLineLocal.setTmpData(releaseOrderLine);

        setPrefix("@SYS4440");

        while select sum (SalesQty) from releaseOrderLineLocal
            group by AgreementLineQuantityCommitment
        {
            agreementLineQuantityCommitment = AgreementLineQuantityCommitment::find(releaseOrderLineLocal.AgreementLineQuantityCommitment);

            agreementLineRemainingQtyIsOK = AgreementGenerateReleaseOrder::validateQty(releaseOrderLineLocal.SalesQty, agreementLineQuantityCommitment);
            if (!agreementLineRemainingQtyIsOK)
            {
                setPrefix(#PrefixField(releaseOrderLineLocal, ItemId));
                ok = checkFailed("@SYS301858");
            }
        }

        if (ok)
        {
            while select releaseOrderLineLocal
                where   releaseOrderLineLocal.Log        !=  ''
                    &&  releaseOrderLineLocal.LogType    == Exception::Error
                    &&  releaseOrderLineLocal.SalesQty   != 0
            {
                ok = checkFailed(strFmt("@SYS134694",releaseOrderLineLocal.ItemId));
            }
        }

        if (ok)
        {
            // Check all mandatory dimensions for the line are set...
            while select releaseOrderLineLocal
                where releaseOrderLineLocal.SalesQty   != 0
            {
                setPrefix(#PrefixField(releaseOrderLineLocal,ItemId));

                // Verify requested ship dates...
                agreementLineQuantityCommitment = AgreementLineQuantityCommitment::find(releaseOrderLineLocal.AgreementLineQuantityCommitment);
                if (!SalesAgreementGenerateReleaseOrder::checkShipDateRequested(releaseOrderLineLocal, agreementLineQuantityCommitment))
                {
                    ok = false;
                }

                InventDim curInventDim = InventDim::find(releaseOrderLineLocal.InventDimId, false);

                // Verify mandatory dimensions....
                if (!curInventDim.validateWriteMandatoryAndProductDim(releaseOrderLineLocal.ItemId))
                {
                    ok =  false;
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyLineAddressInfoFromHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Service method to copy the delivery address related fields from a header to a line.
    /// </summary>
    /// <param name="_releaseOrderTable">
    ///    A buffer of a <c>SalesCreateReleaseOrderTableTmp</c> header.
    /// </param>
    /// <param name="_releaseOrderLine">
    ///    A buffer of a <c>SalesCreateReleaseOrderLineTmp</c> line.
    /// </param>
    /// <remarks>
    ///    This method also copies the values of the <c>DlvMode</c> and <c>CustAccount</c> fields from a
    ///    header to a line.
    /// </remarks>
    public void copyLineAddressInfoFromHeader(SalesCreateReleaseOrderTableTmp _releaseOrderTable,
                                              SalesCreateReleaseOrderLineTmp  _releaseOrderLine)
    {
        _releaseOrderLine.AddressRefRecId          = _releaseOrderTable.AddressRefRecId;
        _releaseOrderLine.AddressRefTableId        = _releaseOrderTable.AddressRefTableId;
        _releaseOrderLine.DeliveryName             = _releaseOrderTable.DeliveryName;
        _releaseOrderLine.DeliveryPostalAddress    = _releaseOrderTable.DeliveryPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a sales release order on the server.
    /// </summary>
    /// <param name="_releaseOrderLine">
    ///    The <c>SalesCreateReleaseOrderLineTmp</c> table that contains the sales release lines to create.
    /// </param>
    /// <param name="_releaseOrderTable">
    ///    The <c>SalesCreateReleaseOrderTableTmp</c> table that contains the sales release order header to
    ///    create.
    /// </param>
    [SysObsolete('Deprecated. Please use method createOrderAndLines.', false, 17\12\2020)]
    protected void createOrder(SalesCreateReleaseOrderLineTmp  _releaseOrderLine,
                               SalesCreateReleaseOrderTableTmp _releaseOrderTable)
    {
        this.createOrderAndLines(_releaseOrderLine, _releaseOrderTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrderAndLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a sales release order and lines.
    /// </summary>
    /// <param name="_releaseOrderLine">
    ///    The <c>SalesCreateReleaseOrderLineTmp</c> table that contains the sales release lines to create.
    /// </param>
    /// <param name="_releaseOrderTable">
    ///    The <c>SalesCreateReleaseOrderTableTmp</c> table that contains the sales release order header to
    ///    create.
    /// </param>
    /// <returns>
    ///    The <c>SalesAutoCreate</c> object that was used to creare the order.
    /// </returns>
    protected SalesAutoCreate createOrderAndLines(SalesCreateReleaseOrderLineTmp  _releaseOrderLine,
                               SalesCreateReleaseOrderTableTmp _releaseOrderTable)
    {
        ttsbegin;

        SalesAutoCreate salesAutoCreate = SalesAutoCreate::construct(_releaseOrderLine, null, _releaseOrderTable);
        salesAutoCreate.create();

        ttscommit;

        return SalesAutoCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReleaseLineListFromBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a list from the <c>SalesCreateReleaseOrderLineTmp</c> buffer.
    /// </summary>
    protected void createReleaseLineListFromBuffer()
    {
        List list = new List(Types::Record);

        while select releaseOrderLine
        {
            list.addEnd(releaseOrderLine);
        }
        releaseLineList = list.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReleaseOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates the <c>SalesCreateReleaseOrderLineTmp</c> temporary table with records based on the
    ///    agreement lines.
    /// </summary>
    /// <param name="_releaseOrderLine">
    ///    A <c>SalesCreateReleaseOrderLineTmp</c> buffer.
    /// </param>
    /// <remarks>
    ///    This method calculates and caches a set of inventory dimensions for each blanket order line. These
    ///    dimensions may be edited during release.
    /// </remarks>
    public void createReleaseOrderLine(SalesCreateReleaseOrderLineTmp _releaseOrderLine)
    {
        AgreementLineQuantityCommitment agreementLine;

        agreementLine.recordLevelSecurity(true);

        if (SalesAgreementGenerateReleaseOrderSysDaQueryFlight::instance().isEnabled())
        {
            SysDaQueryObject agreementLineQuery = this.buildAgreementLineQuery(agreementLine);
            SysDaSearchObject agreementLineSearchObject = new SysDaSearchObject(agreementLineQuery);
            SysDaSearchStatement agreementLineSearchStatement = new SysDaSearchStatement();

            while (agreementLineSearchStatement.findNext(agreementLineSearchObject))
            {
                this.insertReleaseOrderLine(_releaseOrderLine, agreementLine);
            }
        }
        else
        {
            while select agreementLine
                order by Agreement, LineNumber
                where agreementLine.Agreement == salesAgreementHeader.RecId
                   && agreementLine.IsDeleted == NoYes::No
            {
                this.insertReleaseOrderLine(_releaseOrderLine, agreementLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertReleaseOrderLine</Name>
				<Source><![CDATA[
    private void insertReleaseOrderLine(SalesCreateReleaseOrderLineTmp _releaseOrderLine, AgreementLineQuantityCommitment _agreementLine)
    {
        _releaseOrderLine.clear();

        // Initialize line record using header...
        this.initFromHeader(releaseOrderTable, _releaseOrderLine);

        // Initialize with fields from AgreementLine
        this.initFromAgreementLineQuantityCommitment(_releaseOrderLine, _agreementLine);

        // Initialize Date related fields
        SalesCalcAvailableDlvDates::initDateFieldsOrderEntryDeadline(_releaseOrderLine);

        // Allign Date related fields initialized from delivery date control with validity period of the Agreement Line
        SalesAgreementGenerateReleaseOrder::AdjustRquestedDatesWithAgreemenLine(_releaseOrderLine, _agreementLine);
            
        // Perform insert operation
        _releaseOrderLine.insert();

        // Register editable inventory dimensions fields for current AgreementLineQuantityCommitment...
        this.registerEditableAgreementLineDimensions(_agreementLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAgreementLineQuery</Name>
				<Source><![CDATA[
    protected SysDaQueryObject buildAgreementLineQuery(AgreementLineQuantityCommitment _agreementLine)
    {
        SysDaQueryObject agreementLineQuery = new SysDaQueryObject(_agreementLine);
        agreementLineQuery.orderByClause()
                .add(fieldStr(AgreementLineQuantityCommitment, Agreement))
                .add(fieldStr(AgreementLineQuantityCommitment, LineNumber));

        agreementLineQuery.whereClause(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_agreementLine, fieldStr(AgreementLineQuantityCommitment, Agreement)),
                    new SysDaValueExpression(salesAgreementHeader.RecId))
                .and(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_agreementLine, fieldStr(AgreementLineQuantityCommitment, IsDeleted)),
                    new SysDaValueExpression(NoYes::No))));

        return agreementLineQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAgreementLineQuantityCommitment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the release order line from the agreement line.
    /// </summary>
    /// <param name = "_salesCreateReleaseOrderLineTmp">The release order line to initialize.</param>
    /// <param name = "_agreementLineQuantityCommitment">The source agreement line.</param>
    public void initFromAgreementLineQuantityCommitment(SalesCreateReleaseOrderLineTmp _salesCreateReleaseOrderLineTmp, AgreementLineQuantityCommitment _agreementLineQuantityCommitment)
    {
        AgreementLineDefault    agreementLineDefault = AgreementLineDefault::findAgreementLine(_agreementLineQuantityCommitment.RecId);
        InventDim               siteHolderInventDim;
        InventDim               warehouseHolderInventDim;
        InventDimParm           activeInventDimParm;
        CustTable               agreementCustomer;
        InventItemSalesSetup    inventItemSalesSetup;
        InventSiteId            releaseHeaderSettingsInventSiteId;
        InventLocationId        releaseHeaderSettingsInventLocationId;

        _salesCreateReleaseOrderLineTmp.ItemId                          = _agreementLineQuantityCommitment.ItemId;
        _salesCreateReleaseOrderLineTmp.AgreementLineQuantityCommitment = _agreementLineQuantityCommitment.RecId;
        _salesCreateReleaseOrderLineTmp.Units                           = _agreementLineQuantityCommitment.ProductUnitOfMeasure;

        if (!_salesCreateReleaseOrderLineTmp.DlvMode || agreementLineDefault.SalesModeOfDelivery)
        {
            // If Mode of Delivery is not yet set or Mode of Delivery is not empty for AgreementLine
            // we copy this field from Agreement Line
            _salesCreateReleaseOrderLineTmp.DlvMode = agreementLineDefault.SalesModeOfDelivery;
        }

        InventDim releaseLineInventDimInventoryDefaulted = this.initInventoryDimensions(_agreementLineQuantityCommitment);

        _salesCreateReleaseOrderLineTmp.InventDimId = releaseLineInventDimInventoryDefaulted.InventDimId;
        _salesCreateReleaseOrderLineTmp.initVariantId(InventDim::find(_salesCreateReleaseOrderLineTmp.InventDimId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReleaseOrderTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a record in the <c>SalesCreateReleaseOrderTableTmp</c> table, by using the sales agreement
    ///    that is releasing.
    /// </summary>
    /// <param name="_releaseOrderTable">
    ///    A <c>SalesCreateReleaseOrderTableTmp</c> buffer.
    /// </param>
    /// <remarks>
    ///    All previously saved entries are deleted before a new record is inserted into the table.
    /// </remarks>
    public void createReleaseOrderTable(SalesCreateReleaseOrderTableTmp _releaseOrderTable)
    {
        _releaseOrderTable.recordLevelSecurity(true);
        _releaseOrderTable.clear();

        _releaseOrderTable.DeliveryDateControlType = SalesParameters::find().DeliveryDateControlType;

        this.initAddressInfoFromCustomer(_releaseOrderTable);

        _releaseOrderTable.initFromSalesAgreement(salesAgreementHeader);

        SalesCalcAvailableDlvDates::initDateFieldsOrderEntryDeadline(_releaseOrderTable);

        _releaseOrderTable.insert();

        this.parmReleaseOrderTable(_releaseOrderTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes and displayes the dialog box.
    /// </summary>
    /// <returns>
    ///    A <c>FormRun</c> object that represents a <c>SalesAgreementGenerateReleaseOrder</c> form.
    /// </returns>
    public Object dialog()
    {
        Args     parameters = new Args();

        parameters.name(formStr(SalesAgreementGenerateReleaseOrder));
        parameters.caller(this);
        parameters.record(salesAgreementHeader);
        FormRun salesCreateSubOrder = classfactory.formRunClass(parameters);

        return salesCreateSubOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEditableInventDimFieldsPerLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves information about the editable <c>InventDim</c> fields for each
    ///    <c>AgreementLineQuantityCommitment</c> record in the <c>SalesAgreementHeader</c> parameter.
    /// </summary>
    /// <returns>
    ///    A map with a key of the record ID of a <c>AgreementLineQuantityCommitment</c> record and value that
    ///    contains an instance of the <c>InvenDimParm</c> with flags set to the <c>NoYes::Yes</c> enumeration
    ///    value according to each editable <c>InventDim</c> field for the instance of the
    ///    <c>AgreementLine</c> class.
    /// </returns>
    /// <remarks>
    ///    All active inventory dimension fields that are not set in the <c>AgreementLine</c> class are
    ///    considered editable.
    /// </remarks>
    public Map getEditableInventDimFieldsPerLines()
    {
        AgreementLineQuantityCommitment   curAgreementLine;
        InventDimParm                     curInventDimParm;

        // If this info allready cached - return it right away...
        if (editableInventDimFieldsPerLine)
        {
            return editableInventDimFieldsPerLine;
        }

        // There is no previously cached information available...
        // We'll create it
        editableInventDimFieldsPerLine = new Map(typeName2Type(extendedTypeStr(recId)), Types::Record);

        while select curAgreementLine
            where curAgreementLine.Agreement == salesAgreementHeader.RecId
            && curAgreementLine.AgreementLineProduct == AgreementLineProduct::Item
        {
            curInventDimParm.clear();

            // All active InventDim fields....
            InventDimGroupSetup::newInventTable(curAgreementLine.inventTable()).inventDimParmActive(curInventDimParm);

            // All invent dim fields for current agreement Line....
            InventDim curAgreementInventDim = curAgreementLine.inventDim(false);

            // Calculate editable fields...
            curInventDimParm = this.calculateEditableInventDimFields(curInventDimParm, curAgreementInventDim);

            // Register harvested information...
            editableInventDimFieldsPerLine.insert(curAgreementLine.RecId, curInventDimParm);
        }
        return editableInventDimFieldsPerLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAddressInfoFromCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the address information for the <c>SalesCreateReleaseOrderTableTmp</c> record based on
    ///    the related customer account.
    /// </summary>
    /// <param name="_releaseOrderTable">
    ///    The record to be initialized with the address information.
    /// </param>
    /// <remarks>
    ///    The <c>CustAccount</c> field should be set to the correct customer account before this method is
    ///    called.
    /// </remarks>
    public void initAddressInfoFromCustomer(SalesCreateReleaseOrderTableTmp _releaseOrderTable)
    {
        SalesTable salesTableBuf;

        salesTableBuf.CustAccount = _releaseOrderTable.CustAccount;
        salesTableBuf.initFromCustTable();

        // Move address information to the releaseOrderTable...
        _releaseOrderTable.AddressRefRecId   = salesTableBuf.AddressRefRecId;
        _releaseOrderTable.AddressRefTableId = salesTableBuf.AddressRefTableId;
        _releaseOrderTable.DeliveryPostalAddress = salesTableBuf.DeliveryPostalAddress;
        _releaseOrderTable.DeliveryName      = salesTableBuf.DeliveryName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the line instance of the <c>SalesCreateReleaseOrderLineTmp</c> table from the specified
    ///    header instance of <c>SalesCreateReleaseOrderTableTmp</c> table.
    /// </summary>
    /// <param name="_releaseOrderTable">
    ///    The header instance from which to initialize.
    /// </param>
    /// <param name="_releaseOrderLine">
    ///    The line instance to initialize.
    /// </param>
    /// <remarks>
    ///    This method copies address information together with the values from the <c>DlvMode</c> and
    ///    <c>CustAccount</c> fields.
    /// </remarks>
    public void initFromHeader(SalesCreateReleaseOrderTableTmp _releaseOrderTable,
                               SalesCreateReleaseOrderLineTmp  _releaseOrderLine  )
    {
        // Transfer Address fields...
        this.copyLineAddressInfoFromHeader(_releaseOrderTable, _releaseOrderLine);

        // Transfer DlvMode and CutsAccount...
        _releaseOrderLine.DlvMode        = _releaseOrderTable.DlvMode;
        _releaseOrderLine.CustAccount    = _releaseOrderTable.CustAccount;
        _releaseOrderLine.DeliveryDateControlType = _releaseOrderTable.DeliveryDateControlType;

        // Transfer currency
        _releaseOrderLine.Currency  =  salesAgreementHeader.Currency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        releaseLineToBaselineStorageDimensionsDefaulting = new Map(Types::Int64, Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        this.createReleaseLineListFromBuffer();
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReleaseOrderLine</Name>
				<Source><![CDATA[
    public SalesCreateReleaseOrderLineTmp parmReleaseOrderLine(SalesCreateReleaseOrderLineTmp _releaseOrderline = releaseOrderline)
    {
        releaseOrderline = _releaseOrderline;
        return releaseOrderline;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReleaseOrderTable</Name>
				<Source><![CDATA[
    public SalesCreateReleaseOrderTableTmp parmReleaseOrderTable(SalesCreateReleaseOrderTableTmp _releaseOrderTable = releaseOrderTable)
    {
        releaseOrderTable = _releaseOrderTable;
        return releaseOrderTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesAgreementHeader</Name>
				<Source><![CDATA[
    public SalesAgreementHeader parmSalesAgreementHeader(SalesAgreementHeader _salesAgreementHeader = salesAgreementHeader)
    {
        if (_salesAgreementHeader != salesAgreementHeader)
        {
            // Need reset cached information about the editable InventDim fields per line....
            editableInventDimFieldsPerLine = null;
        }
        salesAgreementHeader = _salesAgreementHeader;
        return salesAgreementHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesTable</Name>
				<Source><![CDATA[
    public SalesTable parmSalesTable(SalesTable _salesTable = salesTable)
    {
        salesTable = _salesTable;
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeInfoFromLog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Cleans the infolog for the relase process.
    /// </summary>
    /// <param name="_log">
    ///    The current log.
    /// </param>
    /// <returns>
    ///    A trimmed infolog.
    /// </returns>
    protected SalesCreateReleaseOrderLog removeInfoFromLog(SalesCreateReleaseOrderLog _log)
    {
        SalesCreateReleaseOrderLog  log     = _log;

        int startDel = strScan(log,"@SYS88270",1,strLen(log));
        if (startDel)
        {
            log = strLRTrim(strDel(log,startDel,strLen("@SYS88270")));
        }

        return log;
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoreRelaseLineBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Restores the <c>SalesCreateReleaseOrderLineTmp</c> buffer.
    /// </summary>
    protected void restoreRelaseLineBuffer()
    {
        List list = List::create(releaseLineList);
        ListEnumerator le = list.getEnumerator();

        while (le.moveNext())
        {
            releaseOrderline.data(le.current());
            releaseOrderline.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a release sales order on the server.
    /// </summary>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    A deadlock cannot be avoided.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An update conflice is detected in the nested transaction.
    /// </exception>
    public void run()
    {
        #OCCRetryCount

        this.progressInit("@SYS8801", 0,#Avifilemove, 1);
        progress.updateInterval(0);
        progress.setCount(0);
        progress.setText("@SYS27579");

        setPrefix("@SYS27579");

        try
        {
            this.createOrder(releaseOrderline, releaseOrderTable);
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        catch (Exception::Error)
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReleaseOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles changes for the date-related fields for the release sales order line.
    /// </summary>
    /// <param name="_releaseOrderTable">
    ///    The release order header.
    /// </param>
    /// <param name="_releaseOrderLine">
    ///    The release order line to analyze.
    /// </param>
    /// <param name="_tableFieldId">
    ///    The date field has been changed.
    /// </param>
    public void setReleaseOrderLine(SalesCreateReleaseOrderTableTmp _releaseOrderTable,
                                    SalesCreateReleaseOrderLineTmp  _releaseOrderLine,
                                    fieldId                         _tableFieldId = 0)
    {
        _releaseOrderLine.Log       = '';
        _releaseOrderLine.LogType   = Exception::Info;

        if (_releaseOrderLine.DeliveryDateControlType)
        {
            SalesCalcAvailableDlvDates salesCalcAvailableDlvDates = SalesCalcAvailableDlvDates::newCommonSalesDlvDateType(_releaseOrderLine, _tableFieldId);

            switch (_tableFieldId)
            {
                case fieldNum(SalesCreateReleaseOrderLineTmp, ShippingDateRequested):
                    salesCalcAvailableDlvDates.modifiedField(_releaseOrderLine,false,true,false);

                    if (releaseOrderLine.ShippingDateRequested != _releaseOrderTable.ShippingDateRequested)
                    {
                        _releaseOrderLine.ShippingDateRequested = _releaseOrderTable.ShippingDateRequested;
                        salesCalcAvailableDlvDates = SalesCalcAvailableDlvDates::newCommonSalesDlvDateType(_releaseOrderLine, _tableFieldId);
                        salesCalcAvailableDlvDates.modifiedField(_releaseOrderLine,false,true,true);
                    }

                    if (_releaseOrderLine.LogType == Exception::Error)
                    {
                        _releaseOrderLine.Log                  += '\n\n' + "@SYS91899";

                        _releaseOrderLine.ReceiptDateRequested  = _releaseOrderTable.ReceiptDateRequested;
                        _releaseOrderLine.ShippingDateRequested = _releaseOrderTable.ShippingDateRequested;
                    }
                    break;

                case fieldNum(SalesCreateReleaseOrderLineTmp,ReceiptDateRequested) :
                    salesCalcAvailableDlvDates.modifiedFieldBeforeInsert(_releaseOrderLine,true);

                    if (_releaseOrderLine.ReceiptDateRequested != _releaseOrderTable.ReceiptDateRequested)
                    {
                        _releaseOrderLine.ReceiptDateRequested = _releaseOrderTable.ReceiptDateRequested;
                        salesCalcAvailableDlvDates = SalesCalcAvailableDlvDates::newCommonSalesDlvDateType(_releaseOrderLine, _tableFieldId);
                        salesCalcAvailableDlvDates.modifiedField(_releaseOrderLine,false,true,true);
                    }

                    if (_releaseOrderLine.LogType == Exception::Error)
                    {
                        _releaseOrderLine.Log                  += '\n\n' + "@SYS91899";

                        _releaseOrderLine.ReceiptDateRequested  = _releaseOrderTable.ReceiptDateRequested;
                        _releaseOrderLine.ShippingDateRequested = _releaseOrderTable.ShippingDateRequested;
                    }
                    break;

                default :
                    salesCalcAvailableDlvDates.modifiedFieldBeforeInsert(_releaseOrderLine,true);
                    if (_releaseOrderLine.LogType == Exception::Error)
                    {
                        _releaseOrderLine.Log                  += '\n\n' + "@SYS91899";

                        _releaseOrderLine.ReceiptDateRequested  = _releaseOrderTable.ReceiptDateRequested;
                        _releaseOrderLine.ShippingDateRequested = _releaseOrderTable.ShippingDateRequested;
                    }
                    break;
            }
        }

        switch (_tableFieldId)
        {
            case fieldNum(SalesCreateReleaseOrderLineTmp,ShippingDateRequested) :
                if (_releaseOrderLine.ReceiptDateRequested < _releaseOrderLine.ShippingDateRequested)
                    _releaseOrderLine.ReceiptDateRequested = _releaseOrderLine.ShippingDateRequested;
                break;

            case fieldNum(SalesCreateReleaseOrderLineTmp,ReceiptDateRequested) :
                if (_releaseOrderLine.ReceiptDateRequested  < _releaseOrderLine.ShippingDateRequested)
                    _releaseOrderLine.ShippingDateRequested = _releaseOrderLine.ReceiptDateRequested;
                break;

            default :
                if (_releaseOrderLine.ReceiptDateRequested  < _releaseOrderLine.ShippingDateRequested)
                    _releaseOrderLine.ShippingDateRequested = _releaseOrderLine.ReceiptDateRequested;
                break;
        }

        SalesAgreementGenerateReleaseOrder::checkReceiptDateHeaderLineMatch(_releaseOrderTable, _releaseOrderLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = packedClass;
                this.restoreRelaseLineBuffer();
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesCreateReleaseOrderLineTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the changes that were made for the sales release order header.
    /// </summary>
    /// <param name="_releaseOrderTable">
    ///    The sales release order header.
    /// </param>
    /// <param name="_releaseOrderLine">
    ///    The sales release order line.
    /// </param>
    /// <param name="_tableFieldId">
    ///    The field that has been changed.
    /// </param>
    /// <remarks>
    ///    This method is invoked from the sales agreement release order form.
    /// </remarks>
    public void updateSalesCreateReleaseOrderLineTmp(SalesCreateReleaseOrderTableTmp _releaseOrderTable,
                                                     SalesCreateReleaseOrderLineTmp  _releaseOrderLine,
                                                     fieldId                         _tableFieldId)
    {
        SalesCreateReleaseOrderLineTmp          localReleaseOrderLine;

        //unbound the buffer from the form
        localReleaseOrderLine.setTmpData(_releaseOrderLine);

        while select localReleaseOrderLine
        {
            boolean doUpdateLine = false;
            AgreementLineQuantityCommitment agreementLine = AgreementLineQuantityCommitment::find(localReleaseOrderLine.AgreementLineQuantityCommitment);
            InventDim agreementInventDim = InventDim::find(agreementLine.InventDimId);

            // DeliveryDateControlType:
            if (_releaseOrderTable.DeliveryDateControlType != _releaseOrderTable.orig().DeliveryDateControlType)
            {
                localReleaseOrderLine.DeliveryDateControlType = _releaseOrderTable.DeliveryDateControlType;
                if (localReleaseOrderLine.DeliveryDateControlType != localReleaseOrderLine.orig().DeliveryDateControlType)
                {
                    doUpdateLine = true;
                }
            }

            InventDim localReleaseOrderLineInventDim = InventDim::find (localReleaseOrderLine.InventDimId);
            boolean inventDimHasBeenChanged = false;

            if (   (_releaseOrderTable.InventSiteId     != _releaseOrderTable.orig().InventSiteId)
                || (_releaseOrderTable.InventLocationId != _releaseOrderTable.orig().InventLocationId))
            {
                // InventSiteId and/or InventLocationId field has been changed on the header:
                // if possible we have to propogate these changes to the line.
                if (_releaseOrderTable.InventSiteId != localReleaseOrderLineInventDim.InventSiteId)
                {
                    // Site of the header is different than Site of the line.
                    // We can adjust Site of the line to correspond to the Site of the header only if
                    //    * Neither Site nor Location is set on the corresponded agreement line OR
                    //    * Site is not set but Location is set on agreement line and this location corresponds to the Site
                    //      we want to inherit from header:
                    if (   (!agreementInventDim.InventSiteId)
                        && (   !agreementInventDim.InventLocationId
                            || (_releaseOrderTable.InventSiteId == InventLocation::find(agreementInventDim.InventLocationId).InventSiteId)))
                    {
                        localReleaseOrderLineInventDim.InventSiteId = _releaseOrderTable.InventSiteId;
                        inventDimHasBeenChanged = true;
                    }
                }

                if (_releaseOrderTable.InventLocationId != localReleaseOrderLineInventDim.InventLocationId)
                {
                    // Location of the header is different than Location of the line.
                    // Locations can be adjusted only if agreement line has no location defined for it.
                    // Location of the line shouldn't be adjusted with header value if
                    // Site of the line is set and new not-empty Location value does not correspond to this Site.
                    if (   !agreementInventDim.InventLocationId
                        && (   !localReleaseOrderLineInventDim.InventSiteId
                            || (!_releaseOrderTable.InventLocationId)
                            || (localReleaseOrderLineInventDim.InventSiteId == InventLocation::find(_releaseOrderTable.InventLocationId).InventSiteId)))
                    {
                        localReleaseOrderLineInventDim.InventLocationId = _releaseOrderTable.InventLocationId;
                        inventDimHasBeenChanged = true;
                    }
                }

                if (inventDimHasBeenChanged)
                {
                    var localInventDim = InventDim::findOrCreate(localReleaseOrderLineInventDim);
                    localReleaseOrderLine.InventDimId = localInventDim.InventDimId;
                    releaseLineToBaselineStorageDimensionsDefaulting.insert(localReleaseOrderLine.AgreementLineQuantityCommitment, [localInventDim.InventSiteId, localInventDim.InventLocationId]);
                    localReleaseOrderLine.InventDimId = this.initDimensionsSpecificDefaulting(localReleaseOrderLine.ItemId, localInventDim, true).InventDimId;
                }

                if (localReleaseOrderLine.InventDimId != localReleaseOrderLine.orig().InventDimId)
                {
                    doUpdateLine = true;
                }
            }

            // DlvMode:
            if (_releaseOrderTable.DlvMode != _releaseOrderTable.orig().DlvMode)
            {
                localReleaseOrderLine.DlvMode = _releaseOrderTable.DlvMode;
                if (localReleaseOrderLine.DlvMode != localReleaseOrderLine.orig().DlvMode)
                {
                    doUpdateLine = true;
                }
            }

            // DeliveryName:
            if (_releaseOrderTable.DeliveryName != _releaseOrderTable.orig().DeliveryName)
            {
                localReleaseOrderLine.DeliveryName = _releaseOrderTable.DeliveryName;
                if (localReleaseOrderLine.DeliveryName != localReleaseOrderLine.orig().DeliveryName)
                {
                    doUpdateLine = true;
                }
            }

            // DeliveryPostalAddress:
            if (_releaseOrderTable.DeliveryPostalAddress != _releaseOrderTable.orig().DeliveryPostalAddress)
            {
                localReleaseOrderLine.DeliveryPostalAddress = _releaseOrderTable.DeliveryPostalAddress;
                if (localReleaseOrderLine.DeliveryPostalAddress != localReleaseOrderLine.orig().DeliveryPostalAddress)
                {
                    doUpdateLine = true;
                }
            }

            switch (_tableFieldId)
            {
                case fieldNum(SalesCreateReleaseOrderTableTmp,ReceiptDateRequested):
                    localReleaseOrderLine.ReceiptDateRequested = _releaseOrderTable.ReceiptDateRequested;
                    if (doUpdateLine || localReleaseOrderLine.ReceiptDateRequested != localReleaseOrderLine.orig().ReceiptDateRequested)
                    {
                        this.setReleaseOrderLine(_releaseOrderTable, localReleaseOrderLine, fieldNum(SalesCreateReleaseOrderLineTmp, ReceiptDateRequested));
                        localReleaseOrderLine.update();
                    }
                    break;

                case fieldNum(SalesCreateReleaseOrderTableTmp, ShippingDateRequested):
                    localReleaseOrderLine.ShippingDateRequested = _releaseOrderTable.ShippingDateRequested;
                    if (doUpdateLine || localReleaseOrderLine.ShippingDateRequested != localReleaseOrderLine.orig().ShippingDateRequested)
                    {
                        this.setReleaseOrderLine(_releaseOrderTable, localReleaseOrderLine, fieldNum(SalesCreateReleaseOrderLineTmp, ShippingDateRequested));
                        localReleaseOrderLine.update();
                    }
                    break;

                default:
                    if (_releaseOrderTable.ReceiptDateRequested != _releaseOrderTable.orig().ReceiptDateRequested)
                    {
                        localReleaseOrderLine.ReceiptDateRequested = _releaseOrderTable.ReceiptDateRequested;
                        if (localReleaseOrderLine.ReceiptDateRequested != localReleaseOrderLine.orig().ReceiptDateRequested)
                        {
                            if (!localReleaseOrderLine.DeliveryDateControlType)
                            {
                                localReleaseOrderLine.ShippingDateRequested = _releaseOrderTable.ShippingDateRequested;
                            }

                            this.setReleaseOrderLine(_releaseOrderTable,localReleaseOrderLine,fieldNum(SalesCreateReleaseOrderLineTmp,ReceiptDateRequested));
                            localReleaseOrderLine.update();
                            doUpdateLine = false;
                        }
                    }
                    else if (_releaseOrderTable.ShippingDateRequested != _releaseOrderTable.orig().ShippingDateRequested)
                    {
                        if (!localReleaseOrderLine.DeliveryDateControlType)
                        {
                            localReleaseOrderLine.ShippingDateRequested = _releaseOrderTable.ShippingDateRequested;
                            doUpdateLine = true;
                        }
                    }
            }
            if (doUpdateLine)
            {
                this.setReleaseOrderLine(_releaseOrderTable,localReleaseOrderLine);
                localReleaseOrderLine.update();
            }
            else
            {
                SalesAgreementGenerateReleaseOrder::checkReceiptDateHeaderLineMatch(_releaseOrderTable,localReleaseOrderLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validate that salas order is correct.
    /// </summary>
    /// <param name="_calledFrom">
    ///    The object or form that is calling this method.
    /// </param>
    /// <returns>
    ///    true if data is okay and can be used to created sales release order; otherwise, false.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = super(_calledFrom);
        if (ret)
        {
            ret = this.check();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustRquestedDatesWithAgreemenLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjust the <c>ReceiptDateRequested</c> field and the <c>ShippingDateRequeseted</c> field with the
    /// <c>AgreementLine</c> validity period.
    /// </summary>
    /// <param name="_releaseOrderLine">
    /// The <c>SalesCreateReleaseOrderLineTmp</c> buffer in which date fields should be aligned with the
    /// <c>AgreementLine</c> validity period.
    /// </param>
    /// <param name="_agreementLine">
    /// The <c>AgreementLine</c> buffer to align with.
    /// </param>
    /// <remarks>
    /// If <c>ShippingDateRequested</c> and <c>ReceiptDateRequested</c> are initialized to be before the
    /// <c>EffectiveDate</c> field of the <c>AgreementLine</c> record, they are set to the value of the
    /// <c>EffectiveDate</c> field of the <c>AgreementLine</c> record.If <c>ShippingDateRequested</c> and
    /// <c>ReceiptDateRequested</c> are initialized to be after the <c>ExpirationDate</c> field of the
    /// <c>AgreementLine</c> record, they are set to be the latest date out of the following two: today (in
    /// terms of SITE date or Company if SITE is not set.) or the expiration date of the
    /// <c>AgreementLine</c> record.
    /// </remarks>
    private static void adjustRquestedDatesWithAgreemenLine( SalesCreateReleaseOrderLineTmp    _releaseOrderLine,
                                                             AgreementLineQuantityCommitment   _agreementLine)
    {
        InventDim   releaseLineInventDim = InventDim::find(_releaseOrderLine.InventDimId);

        // Input validation
        if (!_agreementLine)
        {
            return;
        }

        // If ShippingDateRequested and ReceiptDateRequested are initialized to be BEFORE Agreement Line's EffectiveDate, they are set to
        // Agreement Line's EffectiveDate.
        // If ShippingDateRequested and ReceiptDateRequested are initialized to be AFTER Agreement Line's ExpirationDate, they are set to be
        // the latest date from the following two: today (in terms of SITE date or Company if SITE is not set.) and Agreement Line's ExpirationDate.

        utcDateTime userDateTime = DateTimeUtil::getSystemDateTime();
        utcDateTime siteDateTime = DateTimeUtil::applyTimeZoneOffset(userDateTime,InventSite::timeZoneSite(releaseLineInventDim.InventSiteId));
        date siteSpecificToday = DateTimeUtil::date(siteDateTime);

        if (_releaseOrderLine.ShippingDateRequested < _agreementLine.EffectiveDate)
        {
            _releaseOrderLine.ShippingDateRequested = _agreementLine.EffectiveDate;
        }
        else if (_releaseOrderLine.ShippingDateRequested > _agreementLine.ExpirationDate)
        {
            _releaseOrderLine.ShippingDateRequested = (siteSpecificToday >= _agreementLine.ExpirationDate) ? siteSpecificToday : _agreementLine.ExpirationDate;
        }

        if (_releaseOrderLine.ReceiptDateRequested < _agreementLine.EffectiveDate)
        {
            _releaseOrderLine.ReceiptDateRequested = _agreementLine.EffectiveDate;
        }
        else if (_releaseOrderLine.ReceiptDateRequested > _agreementLine.ExpirationDate)
        {
            _releaseOrderLine.ReceiptDateRequested = (siteSpecificToday >= _agreementLine.ExpirationDate) ? siteSpecificToday : _agreementLine.ExpirationDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReceiptDateHeaderLineMatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Analyses and reports conflicts in the values of the <c>ReceiptDateRequested</c> field that are set
    ///    for a header and line.
    /// </summary>
    /// <param name="_releaseOrderTable">
    ///    The sales release order header.
    /// </param>
    /// <param name="_releaseOrderLine">
    ///    The sales release order line.
    /// </param>
    /// <returns>
    ///    true if no conflict is detected; otherwise, false.
    /// </returns>
    public static boolean checkReceiptDateHeaderLineMatch(SalesCreateReleaseOrderTableTmp _releaseOrderTable,
                                                          SalesCreateReleaseOrderLineTmp  _releaseOrderLine)
    {
        SalesAgreementGenerateReleaseOrder  salesAgreementGenerateReleaseOrder;
        boolean                             ok = true;

        if (_releaseOrderLine.ReceiptDateRequested != _releaseOrderTable.ReceiptDateRequested)
        {
            ok = false;
            salesAgreementGenerateReleaseOrder = SalesAgreementGenerateReleaseOrder::construct();
            SalesCreateReleaseOrderLog log = salesAgreementGenerateReleaseOrder.removeInfoFromLog(_releaseOrderLine.Log);

            if (log == strLRTrim(_releaseOrderLine.Log))
            {
                if (_releaseOrderLine.Log)
                {
                     _releaseOrderLine.Log += '\n\n';
                }

                _releaseOrderLine.Log    += "@SYS88270";
                _releaseOrderLine.LogType = _releaseOrderLine.LogType > Exception::Info ? _releaseOrderLine.LogType : Exception::Info;
            }
        }
        else if (_releaseOrderLine.Log != '')
        {
            salesAgreementGenerateReleaseOrder = SalesAgreementGenerateReleaseOrder::construct();
            _releaseOrderLine.Log   = salesAgreementGenerateReleaseOrder.removeInfoFromLog(_releaseOrderLine.Log);
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkShipDateRequested</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies that the value of the <c>ShipDateRequested</c> field is in the corresponding
    ///    <c>AgreementLineQuantityCommitment</c> validity period.
    /// </summary>
    /// <param name="_releaseLineToTest">
    ///    The instance of the <c>SalesCreateReleaseOrderLineTmp</c> object to test.
    /// </param>
    /// <param name="_agreementLineQuantityCommitment">
    ///    The instance of the <c>AgreementLineQuantityCommitment</c> object to test.
    /// </param>
    /// <returns>
    ///    true if the specified value of the <c>ShipDateRequested</c> field is in the validity period.
    /// </returns>
    public static boolean checkShipDateRequested(SalesCreateReleaseOrderLineTmp _releaseLineToTest,
                                                 AgreementLineQuantityCommitment _agreementLineQuantityCommitment)
    {
        if (_releaseLineToTest.ShippingDateRequested     < _agreementLineQuantityCommitment.EffectiveDate
            ||  _releaseLineToTest.ShippingDateRequested > _agreementLineQuantityCommitment.ExpirationDate)
        {
            return checkFailed("@SYS134982");
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesAgreementGenerateReleaseOrder construct()
    {
        return new SalesAgreementGenerateReleaseOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        FormDataSource                      salesAgrementHeader_ds;

        if (!args)
        {
            throw error("@SYS25407");
        }

        SalesAgreementGenerateReleaseOrder salesAgreementGenerateReleaseOrder = SalesAgreementGenerateReleaseOrder::construct();

        if (args.dataset() && args.dataset() == tableNum(SalesAgreementHeader))
        {
            if (FormDataUtil::isFormDataSource(args.record()))
            {
                salesAgrementHeader_ds = FormDataUtil::getFormDataSource(args.record());
            }

            salesAgreementGenerateReleaseOrder.initFromArgs(args);
        }

        if (salesAgreementGenerateReleaseOrder.prompt())
        {
            salesAgreementGenerateReleaseOrder.execute();
            if (salesAgrementHeader_ds)
            {
                salesAgrementHeader_ds.active();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>SalesAgreementGenerateReleaseOrder</c> instance based on the passed args.
    /// </summary>
    /// <param name="_args">
    /// The passed arguments.
    /// </param>
    // This is an extension point to control initializing <c>SalesAgreementGenerateReleaseOrder</c> instance.
    protected void initFromArgs(Args _args)
    {
        this.parmSalesAgreementHeader(_args.record());
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes <c>SalesAgreementGenerateReleaseOrder</c>.
    /// </summary>
    // This is an extension point to control the execution of <c>SalesAgreementGenerateReleaseOrder</c>.
    protected void execute()
    {
        this.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SCM:GenerateReleaseOrder";
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Eventhandler invoked when modifying dimension fields.
    /// </summary>
    /// <param name = "_salesCreateReleaseOrderLineTmp">A release order line record.</param>
    /// <param name = "_inventDim">The lines <c>InventDim</c> record.</param>
    /// <param name = "_dimFieldId">The dimension field ID.</param>
    /// <returns>True if the <c>InventDim</c> was potentially updated; false, otherwise.</returns>
    public boolean modifyInventDim(SalesCreateReleaseOrderLineTmp _salesCreateReleaseOrderLineTmp, InventDim _inventDim, FieldId _dimFieldId)
    {
        if (!_salesCreateReleaseOrderLineTmp.ItemId)
        {
            return false;
        }

        if (!InventDistinctProductValidator::construct().isDistinctProductFullySpecified(_salesCreateReleaseOrderLineTmp.ItemId, _inventDim))
        {
            return false;
        }

        boolean productDimensionModified    = InventDim::isFieldIdProductDimension(_dimFieldId);
        boolean inventSiteIdModified        = fieldNum(InventDim, InventSiteId) == _dimFieldId;

        if (productDimensionModified || inventSiteIdModified)
        {
            if (productDimensionModified)
            {
                _inventDim = this.resetStorageDimensionsToBaseline(_salesCreateReleaseOrderLineTmp.AgreementLineQuantityCommitment, _inventDim);
                _salesCreateReleaseOrderLineTmp.initVariantId(_inventDim);
            }

            _salesCreateReleaseOrderLineTmp.InventDimId = this.initDimensionsSpecificDefaulting(_salesCreateReleaseOrderLineTmp.ItemId, _inventDim, false).inventDimId;
        }

        // the InventDim will potentially have been changed
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventItemOrderSetupType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the type of item order setup.
    /// </summary>
    /// <returns>Type of item order setup.</returns>
    public InventItemOrderSetupType getInventItemOrderSetupType()
    {
        return InventItemOrderSetupType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStorageDimensionsFromHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets storage dimensions i.e. site and warehouse based on the customer.
    /// </summary>
    /// <param name = "_releaseLineInventDimInventory"><c>InventDim</c> record to update.</param>
    /// <returns>Updated <c>InventDim</c> record.</returns>
    public InventDim setStorageDimensionsFromHeader(InventDim _releaseLineInventDimInventory)
    {
        // Check possible release header settings that would be used when releasing from agreement:
        CustTable agreementCustomer = salesAgreementHeader.custTable();

        _releaseLineInventDimInventory.InventSiteId     = agreementCustomer.InventSiteId;
        _releaseLineInventDimInventory.InventLocationId = agreementCustomer.InventLocation;

        return InventDim::findOrCreate(_releaseLineInventDimInventory);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>