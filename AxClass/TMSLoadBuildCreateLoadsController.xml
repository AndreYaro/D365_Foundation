<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSLoadBuildCreateLoadsController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TMSLoadBuildCreateLoadsController</c> class is the controller class for the create loads
/// operation defined on <c>TMSLoadBuildCreateLoadsService</c> class.
/// </summary>
class TMSLoadBuildCreateLoadsController extends SysOperationServiceController implements BatchRetryable
{
    TMSLoadBuildSessionId loadBuildSessionId;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        loadBuildSessionId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@SYP4861180";
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedState)
    {
        container packedSuper;
        int version;

        version = SysOperationHelper::getVersion(_packedState);
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedSuper] = _packedState;
                return super(packedSuper);

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>afterOperation</Name>
				<Source><![CDATA[
    protected void afterOperation(SysOperationExecutionMode _executionMode, AifAsyncResult _asyncResult)
    {
        TMSLoadBuildSession     loadBuildSession;

        super(_executionMode, _asyncResult);

        if (_asyncResult.parmIsCompleted() && !_asyncResult.parmHasException())
        {
            loadBuildSession = TMSLoadBuildSession::find(loadBuildSessionId);

            if (!loadBuildSession.RecId)
            {
                throw error("@SYP4861088");
            }

            if (loadBuildSession.SessionState != TMSLoadBuildSessionState::LoadsCreated)
            {
                throw error(strFmt("@SYP4861089", loadBuildSession.SessionState, TMSLoadBuildSessionState::LoadsCreated));
            }

            TMSLoadBuildSession::cleanUpSession(loadBuildSessionId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super(classStr(TMSLoadBuildCreateLoadsService),
            methodStr(TMSLoadBuildCreateLoadsService, createLoads),
            SysOperationExecutionMode::Synchronous);

        this.parmShowDialog(false);
        this.parmShowProgressForm(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadBuildSessionId</Name>
				<Source><![CDATA[
    public TMSLoadBuildSessionId parmLoadBuildSessionId(TMSLoadBuildSessionId _loadBuildSessionId = loadBuildSessionId)
    {
        loadBuildSessionId = _loadBuildSessionId;
        return loadBuildSessionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TMSLoadBuildCreateLoadsController construct()
    {
        return new TMSLoadBuildCreateLoadsController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        Common                               record;
        TMSLoadBuildCreateLoadsDataContract  dataContract = TMSLoadBuildCreateLoadsDataContract::construct();
        TMSLoadBuildCreateLoadsService       service = TMSLoadBuildCreateLoadsService::construct();
        TMSLoadBuildCreateLoadsController    operation;

        if (_args == null)
        {
            throw error("@SYS18626");
        }

        record = _args.record();

        if (!(record is TMSLoadBuildSession))
        {
            throw error("@SYS104799");
        }

        operation = TMSLoadBuildCreateLoadsController::construct();
        operation.parmExecutionMode(SysOperationExecutionMode::Synchronous);
        operation.parmLoadFromSysLastValue(false);
        operation.parmLoadBuildSessionId(record.RecId);
        dataContract = operation.getDataContractObject();
        dataContract.parmLoadBuildSessionId(record.RecId);

        operation.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>