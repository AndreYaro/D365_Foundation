<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceBaseBatchJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class InventInventoryDataServiceBaseBatchJob extends SysBatchTask
{
    internal static readonly int MaxJobRecurrencyInMinutes = 3 * 24 * 60;
    internal static readonly int JobRecurrencyOneDayInMinutes = 24 * 60;
    internal static readonly int JobRecurencyDelayIntervalInMinutes = 2;

    // The IV base batch job incorporates a retry logic where it will make up to 1 additional attempts if the initial run fails. Therefore, we need to multiply the expected base failure count by 2.
    internal static readonly int MaxFailedCount = 2 * 2;

    UserConnection  userConnection;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initBatch</Name>
				<Source><![CDATA[
    public void initBatch(Batch batch)
    {
        super(batch);

        batch.retriesOnFailure = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineRecurrence</Name>
				<Source><![CDATA[
    internal static SysRecurrenceData determineRecurrence(int jobRecurrencyInMinutes)
    {
        SysRecurrenceData recurrence;
        if (jobRecurrencyInMinutes >= MaxJobRecurrencyInMinutes)
        {
            recurrence = SysBatchTask::get72hours1AmRecurrenceData();
        }
        else if (jobRecurrencyInMinutes > JobRecurrencyOneDayInMinutes && jobRecurrencyInMinutes < MaxJobRecurrencyInMinutes)
        {
            recurrence = SysBatchTask::getDaily1AmRecurrenceData();
        }
        else
        {
            recurrence = SysBatchTask::getEveryXMinutesRecurrenceData(jobRecurrencyInMinutes);
        }

        return recurrence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CheckIfNeedToUpdateJobRecurrence</Name>
				<Source><![CDATA[
    internal static container CheckIfNeedToUpdateJobRecurrence(str _jobName, boolean _ifAllDataFails, InventInstrumentationLogger _logger)
    {
        boolean ifNeedtoUpdateParameter = false;
        var jobParameter = InventInventoryDataServiceBatchJobParameters::findOrCreate(_jobName);

        var cumulativeFailedCount = jobParameter.CumulativeFailedCount;
        var jobRecurrencyInMinutes = jobParameter.JobRecurrenceInMinutes;

        if (_ifAllDataFails)
        {
            cumulativeFailedCount++;
            if (cumulativeFailedCount >= maxFailedCount)
            {
                cumulativeFailedCount = 0;

                jobRecurrencyInMinutes = min(jobRecurrencyInMinutes + JobRecurencyDelayIntervalInMinutes, maxJobRecurrencyInMinutes);

                ifNeedtoUpdateParameter = true;
            }

            _logger.logInformation(strFmt('All data posts failed in job %1, current cumulativeFailedCount is %2, jobRecurrencyInMinutes is %3', _jobName, cumulativeFailedCount, jobRecurrencyInMinutes));
            ttsbegin;
            InventInventoryDataServiceBatchJobParameters::updateJobParameters(_jobName, cumulativeFailedCount, jobRecurrencyInMinutes);
            ttscommit;
        }
        else
        {
            if (cumulativeFailedCount != 0 || jobRecurrencyInMinutes != 1)
            {
                cumulativeFailedCount = 0;
                jobRecurrencyInMinutes = 1;

                ifNeedtoUpdateParameter = true;

                _logger.logInformation(strFmt('jobRecurrencyInMinutes has been reset to 1 since some data posts successfully in job %1', _jobName));
                ttsbegin;
                InventInventoryDataServiceBatchJobParameters::updateJobParameters(_jobName, cumulativeFailedCount, jobRecurrencyInMinutes);
                ttscommit;
            }
        }

        return [ifNeedtoUpdateParameter, jobRecurrencyInMinutes];
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateJobRecurrenceAndParametersIfNeeded</Name>
				<Source><![CDATA[
    internal static void UpdateJobRecurrenceAndParametersIfNeeded(str _jobName, ClassId _sysBatchTaskClassId, boolean _ifAllDataFails, InventInstrumentationLogger _logger)
    {
        container result = InventInventoryDataServiceBaseBatchJob::CheckIfNeedToUpdateJobRecurrence(_jobName, _ifAllDataFails, _logger);
        boolean _ifNeedToUpdateJobRecurrence = conPeek(result, 1);

        if (_ifNeedToUpdateJobRecurrence)
        {
            int _jobRecurrencyInMinutes = conPeek(result, 2);
            SysBatchTask::updateTaskRecurrence(_sysBatchTaskClassId, InventInventoryDataServiceBaseBatchJob::determineRecurrence(_jobRecurrencyInMinutes));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOneMinuteIntervalRecurrenceData</Name>
				<Source><![CDATA[
    protected static SysRecurrenceData getOneMinuteIntervalRecurrenceData()
    {
        var startTime = DateTimeUtil::utcNow();
        SysRecurrenceData recurrenceData = SysRecurrence::defaultRecurrence();
        recurrenceData = SysRecurrence::setRecurrenceStartDateTime(recurrenceData, startTime);
        recurrenceData = SysRecurrence::setRecurrenceNoEnd(recurrenceData);
        recurrenceData = SysRecurrence::setRecurrenceUnit(recurrenceData, SysRecurrenceUnit::Minute, 1);
        return recurrenceData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>waitForAsyncTasks</Name>
				<Source><![CDATA[
    protected void waitForAsyncTasks(System.Threading.Tasks.Task[] _threadTasklist)
    {
        int connectionKeepAlivePingIntervalInMilliSec = this.connectionKeepAlivePingIntervalInMilliSec();
        
        while (!System.Threading.Tasks.Task::WaitAll(_threadTasklist, connectionKeepAlivePingIntervalInMilliSec))
        {
            if (this.parmUserConnection())
            {
                var statement = this.parmUserConnection().createStatement();
                var sqlKeepAlive = 'select SYSDATETIME();';
        
                ResultSet resultset = statement.executeQueryWithParameters(sqlKeepAlive, SqlParams::create());
                resultset.next();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>connectionKeepAlivePingIntervalInMilliSec</Name>
				<Source><![CDATA[
    private int connectionKeepAlivePingIntervalInMilliSec()
    {
        return 5 * 60 * 1000; // 5 minutes in ms.
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserConnection</Name>
				<Source><![CDATA[
    private UserConnection parmUserConnection(UserConnection _userConnection = userConnection)
    {
        userConnection = _userConnection;
        return userConnection;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>