<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqCalcPeggingOptimizationPeggingSet</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqCalcPeggingOptimizationPeggingSet</c> class represents a set of pegging records (<c>ReqTransCov</c>).
/// The API of the class is designed for use in pegging optimization logic. 
/// </summary>
public class ReqCalcPeggingOptimizationPeggingSet
{
    ReqQty totalPeggedQty = 0;
    Set peggingSet = new Set(Types::Record);
    Map receiptMap = new Map(Types::Int64, Types::Record);
    Map tradableQuantities;
    ReqTrans latestNonDelayingReceipt;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqCalcPeggingOptimizationPeggingSet construct(Map _tradableQuantities = null)
    {
        ReqCalcPeggingOptimizationPeggingSet newSet = new ReqCalcPeggingOptimizationPeggingSet();
        newSet.tradableQuantities = _tradableQuantities;
        return newSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the specified <c>ReqTransCov</c> record to the set.
    /// </summary>
    /// <param name = "_pegging">The <c>ReqTransCov</c> record.</param>
    /// <param name = "_peggedReceipt">The receipt <c>ReqTrans</c> record related to the <c>ReqTransCov</c> record.</param>
    /// <param name = "_tradableQuantity">Denotes the quantity of the <c>ReqTransCov</c> record that can be traded.</param>
    public void add(ReqTransCov _pegging, ReqTrans _peggedReceipt)
    {
        peggingSet.add(_pegging);
        receiptMap.insert(_peggedReceipt.RecId, _peggedReceipt);
        totalPeggedQty += this.tradableQuantity(_pegging);
    }

]]></Source>
			</Method>
			<Method>
				<Name>remove</Name>
				<Source><![CDATA[
    public void remove(ReqTransCov _pegging)
    {
        peggingSet.remove(_pegging);
        receiptMap.remove(_pegging.ReceiptRecId);
        totalPeggedQty -= this.tradableQuantity(_pegging);
    }

]]></Source>
			</Method>
			<Method>
				<Name>peggedReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the cached receipt related to the specified pegging.
    /// </summary>
    /// <param name = "_pegging">The <c>ReqTransCov</c> record.</param>
    /// <returns>The related receipt <c>ReqTrans</c> record.</returns>
    public ReqTrans peggedReceipt(ReqTransCov _pegging)
    {
        return receiptMap.lookup(_pegging.ReceiptRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tradableQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the quantity that are available to be traded with other peggings.
    /// </summary>
    /// <param name = "_pegging">
    /// The <c>ReqTransCov</c> record.
    /// </param>
    /// <param name = "_tradableQuantitiesMap">
    /// A map that holds the remaining available quantities for trading of <c>ReqTransCov</c> records.
    /// </param>
    /// <returns>
    /// The quantity that can be traded for the given <c>ReqTransCov</c> record.
    /// </returns>
    public Qty tradableQuantity(ReqTransCov _pegging)
    {
        return abs((tradableQuantities && tradableQuantities.exists(_pegging.RecId)) ?
                        tradableQuantities.lookup(_pegging.RecId) : _pegging.Qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalPeggedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total pegged quantity of the <c>ReqTransCov</c> records in the set.
    /// </summary>
    /// <returns>The total pegged quantity of the <c>ReqTransCov</c> records in the set.</returns>
    public ReqQty totalPeggedQty()
    {
        return totalPeggedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the enumerator over the <c>ReqTransCov</c> records in the set.
    /// </summary>
    /// <returns></returns>
    public Enumerator getEnumerator()
    {
        return peggingSet.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>peggedIssueRecIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a set of all <c>RecId</c> values of all the pegged issue <c>ReqTrans</c> records in the set.
    /// </summary>
    /// <returns></returns>
    public Set peggedIssueRecIds()
    {
        Set issuesSet = new Set(typeName2Type(extendedTypeStr(RecId)));
        
        Enumerator enumerator = peggingSet.getEnumerator();
        while (enumerator.moveNext())
        {
            ReqTransCov pegging = enumerator.current();
            issuesSet.add(pegging.IssueRecId);
        }

        return issuesSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLatestNonDelayingReceipt</Name>
				<Source><![CDATA[
    public ReqTrans parmLatestNonDelayingReceipt(ReqTrans _latestNonDelayingReceipt = latestNonDelayingReceipt)
    {
        latestNonDelayingReceipt = _latestNonDelayingReceipt;
        return latestNonDelayingReceipt;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>