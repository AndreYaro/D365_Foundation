<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepreciationProfilesValidationAssetBook</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class contains business logic for depreciation profiles and
/// related fields validation on <c>AssetBook</c> table.
/// </summary>
[AssetDepreciationProfilesValidationAttribute(tablestr(AssetBook))]
final public class AssetDepreciationProfilesValidationAssetBook extends AssetDepreciationProfilesValidationBooks
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateDepreciationProfile</Name>
				<Source><![CDATA[
    public boolean validateDepreciationProfile()
    {
        boolean ret = super();

        ret = ret && this.checkTransactionsAndJournalsNotExistForDepreciationProfile();
        ret = ret && this.checkDepreciationProfileCompatibilityWithLifeTime();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDepreciationAltProfile</Name>
				<Source><![CDATA[
    public boolean validateDepreciationAltProfile()
    {
        boolean ret = super();

        ret = ret && this.checkTransactionsAndJournalsNotExistForDepreciationAltProfile();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDepreciationConvention</Name>
				<Source><![CDATA[
    public boolean validateDepreciationConvention()
    {
        boolean ret = super();

        ret = ret && this.checkTransactionsAndJournalsNotExistForDepreciationConvention();
        ret = ret && this.checkDepreciationConventionNoneForTaxValueModel_FR();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetBook</Name>
				<Source><![CDATA[
    private AssetBook assetBook()
    {
        return assetDepreciationProfilesValidationMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTransactionsAndJournalsNotExistForDepreciationProfile</Name>
				<Source><![CDATA[
    private boolean checkTransactionsAndJournalsNotExistForDepreciationProfile()
    {
        boolean ret = true;

        if (this.assetBook().DepreciationProfile != this.assetBook().orig().DepreciationProfile &&
            (AssetTrans::existDepreciationTrans(this.assetBook().AssetId, this.assetBook().BookId, true) ||
             LedgerJournalTrans_Asset::existDepreciationJournals(this.assetBook().AssetId, this.assetBook().BookId, true)))
        {
            ret = checkFailed(
                strFmt("@SYS95543",
                    AssetTransType::Depreciation,
                    AssetTransType::DepreciationAdj,
                    AssetTransType::BonusDepreciation,
                    AssetTransType::ExtraordinaryDepreciation));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTransactionsAndJournalsNotExistForDepreciationAltProfile</Name>
				<Source><![CDATA[
    private boolean checkTransactionsAndJournalsNotExistForDepreciationAltProfile()
    {
        boolean ret = true;

        if (this.assetBook().DepreciationAltProfile != this.assetBook().orig().DepreciationAltProfile &&
            (AssetTrans::existDepreciationTrans(this.assetBook().AssetId, this.assetBook().BookId, true) ||
             LedgerJournalTrans_Asset::existDepreciationJournals(this.assetBook().AssetId, this.assetBook().BookId, true)))
        {
            ret = checkFailed(
                strFmt("@SYS95544",
                    AssetTransType::Depreciation,
                    AssetTransType::DepreciationAdj,
                    AssetTransType::BonusDepreciation,
                    AssetTransType::ExtraordinaryDepreciation));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTransactionsAndJournalsNotExistForDepreciationConvention</Name>
				<Source><![CDATA[
    private boolean checkTransactionsAndJournalsNotExistForDepreciationConvention()
    {
        boolean ret = true;

        if (this.assetBook().DepreciationConvention != this.assetBook().orig().DepreciationConvention &&
            (AssetTrans::existDepreciationTrans(this.assetBook().AssetId, this.assetBook().BookId, true) ||
             LedgerJournalTrans_Asset::existDepreciationJournals(this.assetBook().AssetId, this.assetBook().BookId, true)))
        {
            ret = checkFailed(
                strFmt("@SYS110419",
                    AssetTransType::Depreciation,
                    AssetTransType::DepreciationAdj,
                    AssetTransType::DerogatoryDecrease,
                    AssetTransType::DerogatoryIncrease,
                    AssetTransType::ExtraordinaryDepreciation));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDepreciationProfileCompatibilityWithLifeTime</Name>
				<Source><![CDATA[
    private boolean checkDepreciationProfileCompatibilityWithLifeTime()
    {
        boolean ret = true;

        if (this.assetBook().Depreciation == NoYes::Yes)
        {
            ret = AssetDepreciationProfile::check(this.assetBook().DepreciationProfile, this.assetBook().LifeTime);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDepreciationConventionNoneForTaxValueModel_FR</Name>
				<Source><![CDATA[
    private boolean checkDepreciationConventionNoneForTaxValueModel_FR()
    {
        boolean ret = true;

        // Verify if a depreciation convention can be selected.  The tax value model might not allow to do so.
        if (this.assetBook().AssetDerogatoryModel_FR && this.assetBook().DepreciationConvention != AssetDepreciationConvention::None )
        {
            if (!AssetBook::find(this.assetBook().AssetId, this.assetBook().AssetDerogatoryModel_FR).checkIfConventionCanBeSet())
            {
                ret = checkFailed(strFmt("@FixedAssets:FA_MessageValidation_CannotAssignDepreciationConventionWithDerogatoryTaxModel", this.assetBook().DepreciationConvention, this.assetBook().AssetDerogatoryModel_FR));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>