<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQSealedAttachmentManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is a form class for sealed attachments on vendor replies.
/// </summary>
internal final class PurchRFQSealedAttachmentManager
{
    private static PurchRFQSealedBidInstrumentationLogger logger = PurchRFQSealedBidInstrumentationLogger::createLogger(classStr(PurchRFQSealedAttachmentManager));
    private PurchRFQTmpSealedReplyAttachment purchRFQTmpSealedReplyAttachment;
    private Common callingRecord;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called when a new record is being created for <c>PurchRFQTmpSealedReplyAttachment</c> table
    /// </summary>
    /// <returns>true if create is successful, otherwise false.</returns>
    [Hookable(false), Wrappable(false)]
    internal boolean create()
    {
        PurchRFQSealedBidFlightingManager::validatePreviewIsEnabled();

        Args args = new Args(formStr(PurchRFQSealedAttachmentUpload));
        args.menuItemName(menuItemDisplayStr(PurchRFQSealedAttachmentUpload));
        args.caller(this);
        args.record(callingRecord);

        FormRun purchRFQSealedAttachmentNew;
        purchRFQSealedAttachmentNew = classfactory.formRunClass(args);
        purchRFQSealedAttachmentNew.init();
        purchRFQSealedAttachmentNew.run();
        purchRFQSealedAttachmentNew.wait();

        return purchRFQSealedAttachmentNew.closedOk();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchRFQTmpSealedReplyAttachment</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal PurchRFQTmpSealedReplyAttachment parmPurchRFQTmpSealedReplyAttachment(PurchRFQTmpSealedReplyAttachment _purchRFQTmpSealedReplyAttachment = purchRFQTmpSealedReplyAttachment)
    {
        purchRFQTmpSealedReplyAttachment = _purchRFQTmpSealedReplyAttachment;
        return purchRFQTmpSealedReplyAttachment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallingRecord</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Common parmCallingRecord(Common _callingRecord = callingRecord)
    {
        callingRecord = _callingRecord;
        return callingRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>PurchRFQSealedAttachmentManager</c> class.
    /// </summary>
    /// <param name = "_attachmentSource">The <c>PurchRFQTmpSealedReplyAttachment</c> table record </param>
    /// <returns> An instance of the <c>PurchRFQSealedAttachmentManager</c> class. </returns>
    [Hookable(false), Wrappable(false)]
    internal static PurchRFQSealedAttachmentManager construct()
    {
        PurchRFQSealedBidFlightingManager::validatePreviewIsEnabled();

        return new PurchRFQSealedAttachmentManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPurchRFQTmpSealedReplyAttachment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>PurchRFQSealedAttachmentManager</c> class.
    /// </summary>
    /// <param name = "_attachmentSource">The <c>PurchRFQTmpSealedReplyAttachment</c> table record </param>
    /// <returns> An instance of the <c>PurchRFQSealedAttachmentManager</c> class. </returns>
    [Hookable(false), Wrappable(false)]
    internal static PurchRFQSealedAttachmentManager newFromPurchRFQTmpSealedReplyAttachment(PurchRFQTmpSealedReplyAttachment _attachmentSource)
    {
        PurchRFQSealedBidFlightingManager::validatePreviewIsEnabled();

        PurchRFQSealedAttachmentManager attachmentManager = PurchRFQSealedAttachmentManager::construct();
        attachmentManager.initialize(_attachmentSource);

        return attachmentManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>copySealedAttachmentsToDocuRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the sealed attachments for a given table record to <c> DocuRef </c> table.
    /// </summary>
    /// <param name = "_callingRecord"> A table record of having associated sealed attachments </param>
    [Hookable(false), Wrappable(false)]
    internal static void copySealedAttachmentsToDocuRef(Common _callingRecord)
    {
        PurchRFQSealedBidFlightingManager::validatePreviewIsEnabled();

        PurchRFQSealedAuditLogParameters auditLogParameters = PurchRFQSealedAuditLogParameters::construct(PurchRFQReplyActivity::Unsealed);

        PurchRFQTmpSealedReplyAttachment localpurchRFQTmpSealedReplyAttachment;
        localpurchRFQTmpSealedReplyAttachment.populateTmpSealedReplyAttachment(_callingRecord, auditLogParameters);

        while select * from localpurchRFQTmpSealedReplyAttachment
        {
            if (localpurchRFQTmpSealedReplyAttachment.File == '')
            {
                continue;
            }

            System.Byte[] byteArray = System.Convert::FromBase64String(localpurchRFQTmpSealedReplyAttachment.File);
            using(System.IO.MemoryStream stream = new System.IO.MemoryStream(byteArray))
            {
                DocumentManagement::attachFileToCommon(
                    _callingRecord,
                    'File',
                    stream,
                    localpurchRFQTmpSealedReplyAttachment.Name,
                    System.Web.MimeMapping::GetMimeMapping(localpurchRFQTmpSealedReplyAttachment.Name),
                    localpurchRFQTmpSealedReplyAttachment.Name,
                    localpurchRFQTmpSealedReplyAttachment.Notes);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unsealAttachmentsForTable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void unsealAttachmentsForTable(Common _callingRecord)
    {
        PurchRFQSealedBidFlightingManager::validatePreviewIsEnabled();

        DocuRef docuRef;
        PurchRFQSealedReplyTableAttachment purchRFQSealedReplyTableAttachment;
        PurchRFQReplyTable purchRFQReplyTable = _callingRecord;
        PurchRFQSealedReplyTable purchRFQSealedReplyTable;
        select firstonly purchRFQSealedReplyTable
            where purchRFQSealedReplyTable.PurchRFQReplyTable == purchRFQReplyTable.RecId;
        Common sealedRecord = purchRFQSealedReplyTable;

        while select docuRef
            where docuRef.RefCompanyId == sealedRecord.DataAreaId
                && docuRef.RefTableId == sealedRecord.TableId
                && docuRef.RefRecId == sealedRecord.RecId
            exists join purchRFQSealedReplyTableAttachment
                where purchRFQSealedReplyTableAttachment.DocuRefRecId == docuRef.RecId
        {
            PurchRFQSealedAttachmentManager::decryptAttachmentFromDocuRef(_callingRecord, docuRef);
        }

        delete_from docuRef
            where docuRef.RefCompanyId == sealedRecord.DataAreaId
                && docuRef.RefTableId == sealedRecord.TableId
                && docuRef.RefRecId == sealedRecord.RecId
            exists join purchRFQSealedReplyTableAttachment
                where purchRFQSealedReplyTableAttachment.DocuRefRecId == docuRef.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unsealAttachmentsForLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void unsealAttachmentsForLine(Common _callingRecord)
    {
        PurchRFQSealedBidFlightingManager::validatePreviewIsEnabled();

        DocuRef docuRef;
        PurchRFQSealedReplyLineAttachment purchRFQSealedReplyLineAttachment;
        PurchRFQReplyLine purchRFQReplyLine = _callingRecord;
        PurchRFQSealedReplyLine purchRFQSealedReplyLine;
        select firstonly purchRFQSealedReplyLine
            where purchRFQSealedReplyLine.PurchRFQReplyLine == purchRFQReplyLine.RecId;
        Common sealedRecord = purchRFQSealedReplyLine;

        while select docuRef
            where docuRef.RefCompanyId == sealedRecord.DataAreaId
                && docuRef.RefTableId == sealedRecord.TableId
                && docuRef.RefRecId == sealedRecord.RecId
            exists join PurchRFQSealedReplyLineAttachment
                where PurchRFQSealedReplyLineAttachment.DocuRefRecId == docuRef.RecId
        {
            PurchRFQSealedAttachmentManager::decryptAttachmentFromDocuRef(_callingRecord, docuRef);
        }

        delete_from docuRef
            where docuRef.RefCompanyId == sealedRecord.DataAreaId
                && docuRef.RefTableId == sealedRecord.TableId
                && docuRef.RefRecId == sealedRecord.RecId
            exists join PurchRFQSealedReplyLineAttachment
                where PurchRFQSealedReplyLineAttachment.DocuRefRecId == docuRef.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQIdFromCommon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets RFQId from the given <c>Common</c> table buffer.
    /// </summary>
    /// <param name="_common">
    /// A <c>Common</c> table buffer to get the RFQId from.
    /// </param>
    /// <returns>The <c>PurchRFQId</c>.</returns>
    [Hookable(false)]
    internal static PurchRFQId purchRFQIdFromCommon(Common _common)
    {
        PurchRFQId rfqId;

        switch(_common.tableId)
        {
            case tablenum(PurchRFQReplyTable):
                PurchRFQReplyTable replyTable  = _common as PurchRFQReplyTable;
                rfqId = replyTable.RFQId;
                break;

            case tablenum(PurchRFQReplyLine):
                PurchRFQReplyLine replyLine  = _common as PurchRFQReplyLine;
                rfqId = replyLine.RFQId;
                break;
            
            default:
                throw error(strFmt("@SYS19306", funcName())); // incorrect use
        }

        return rfqId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize(PurchRFQTmpSealedReplyAttachment _attachmentSource)
    {
        this.parmPurchRFQTmpSealedReplyAttachment(_attachmentSource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>decryptAttachmentFromDocuRef</Name>
				<Source><![CDATA[
    private static void decryptAttachmentFromDocuRef(Common _callingRecord, DocuRef _docuRef)
    {
        PurchRFQReplyTable localReplyTable;

        if (_callingRecord.TableId == tableNum(PurchRFQReplyTable))
        {
            localReplyTable = _callingRecord;
        }
        else if (_callingRecord.TableId == tableNum(PurchRFQReplyLine))
        {
            PurchRFQReplyLine localReplyLine = _callingRecord;
            localReplyTable = PurchRFQReplyTable::find(localReplyLine.RFQId);
        }

        PurchRFQSealedBidEncryptionManager purchRFQSealedBidEncryptionManager = PurchRFQSealedBidEncryptionManager::newFromPurchRFQReplyTableRecId(localReplyTable.RecId);

        System.IO.Stream attachmentStream = DocumentManagement::getAttachmentStream(_docuRef);
        System.IO.StreamReader streamReader =  new System.IO.StreamReader(attachmentStream);
        str attachmentStreamStr = streamReader.ReadToEnd();
        str attachmentStreamStrDecrypted = purchRFQSealedBidEncryptionManager.editEncryptedString(attachmentStreamStr, false);
        str fileNotesDecrypted = purchRFQSealedBidEncryptionManager.editEncryptedString(_docuRef.Notes, false);
        System.Byte[] byteArray = System.Convert::FromBase64String(attachmentStreamStrDecrypted);
        str fileNameDecrypted = PurchRFQSealedAttachmentManager::getFileNameFromAttachment(_callingRecord, _docuRef);

        try
        {
            using (System.IO.MemoryStream decryptedStream = new System.IO.MemoryStream(byteArray))
            {
                DocumentManagement::attachFileToCommon(_callingRecord
                                                   , 'File'
                                                   , decryptedStream
                                                   , fileNameDecrypted
                                                   , System.Web.MimeMapping::GetMimeMapping(fileNameDecrypted)
                                                   , fileNameDecrypted
                                                   , fileNotesDecrypted);
            }
        }
        catch
        {
            str fileExtension = Docu::GetFileExtension(fileNameDecrypted);

            using (var activityContext = logger.encryptionDecryptionActivities().uploadAttachmentFailed(_callingRecord.RecId, _callingRecord.TableId, fileNameDecrypted, fileExtension))
            {
                PurchRFQSealedBidManager::throwSealedBidError(logger);
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileNameFromAttachment</Name>
				<Source><![CDATA[
    private static str getFileNameFromAttachment(Common _callingRecord, DocuRef _docuRef)
    {
        PurchRFQSealedAuditLogParameters auditLogParameters = PurchRFQSealedAuditLogParameters::construct(PurchRFQReplyActivity::Unsealed);

        if (_callingRecord.TableId == tableNum(PurchRFQReplyTable))
        {
            return PurchRFQSealedAttachmentManager::getFileNameFromReplyTableAttachment(_callingRecord as PurchRFQReplyTable, _docuRef, auditLogParameters);
        }
        else
        {
            return PurchRFQSealedAttachmentManager::getFileNameFromReplyLineAttachment(_callingRecord as PurchRFQReplyLine, _docuRef, auditLogParameters);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileNameFromReplyTableAttachment</Name>
				<Source><![CDATA[
    private static str getFileNameFromReplyTableAttachment(PurchRFQReplyTable _purchRFQReplyTable, DocuRef _docuRef, PurchRFQSealedAuditLogParameters _auditLogParameters)
    {
        PurchRFQSealedReplyTableAttachment purchRFQSealedReplyTableAttachment;
        PurchRFQTmpSealedReplyAttachment purchRFQTmpSealedReplyAttachmentLocal;

        select firstonly purchRFQSealedReplyTableAttachment where purchRFQSealedReplyTableAttachment.DocuRefRecId == _docuRef.RecId;

        if (purchRFQSealedReplyTableAttachment)
        {
            unchecked(Uncheck::TableSecurityPermission)
            {
                PurchRFQSealedBidEncryptionManager sealedBidEncryptionManager = PurchRFQSealedBidEncryptionManager::newFromPurchRFQReplyTableRecId(_purchRFQReplyTable.RecId);
                purchRFQTmpSealedReplyAttachmentLocal = purchRFQSealedReplyTableAttachment.sealedRecordEdit(false, purchRFQSealedReplyTableAttachment.SealedRecord, sealedBidEncryptionManager, _auditLogParameters);
            }
        }

        return purchRFQTmpSealedReplyAttachmentLocal.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileNameFromReplyLineAttachment</Name>
				<Source><![CDATA[
    private static str getFileNameFromReplyLineAttachment(PurchRFQReplyLine _purchRFQReplyLine, DocuRef _docuRef, PurchRFQSealedAuditLogParameters _auditLogParameters)
    {
        PurchRFQSealedReplyLineAttachment purchRFQSealedReplyLineAttachment;
        PurchRFQTmpSealedReplyAttachment purchRFQTmpSealedReplyAttachmentLocal;

        select firstonly purchRFQSealedReplyLineAttachment where purchRFQSealedReplyLineAttachment.DocuRefRecId == _docuRef.RecId;

        if (purchRFQSealedReplyLineAttachment)
        {
            unchecked(Uncheck::TableSecurityPermission)
            {
                PurchRFQSealedBidEncryptionManager sealedBidEncryptionManager = PurchRFQSealedBidEncryptionManager::newFromPurchRFQReplyTableRecId(PurchRFQReplyTable::find(_purchRFQReplyLine.RFQId).RecId);
                purchRFQTmpSealedReplyAttachmentLocal = purchRFQSealedReplyLineAttachment.sealedRecordEdit(false, purchRFQSealedReplyLineAttachment.SealedRecord, sealedBidEncryptionManager, _auditLogParameters);
            }
        }

        return purchRFQTmpSealedReplyAttachmentLocal.Name;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>