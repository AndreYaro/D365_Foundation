<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankUpdateFromGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankUpdateFromGroup extends RunBaseBatch implements BatchRetryable
{
    BankGroupId         bankGroupId;
    BankGroup           bankGroup;
    BankAccountTable    bankAccountTable;
    CustBankAccount     custBankAccount;
    VendBankAccount     vendBankAccount;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        bankGroupId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankGroup</Name>
				<Source><![CDATA[
    BankGroupId parmBankGroup(BankGroupId _bankGroupId = bankGroupId)
    {
        bankGroupId = _bankGroupId;
        return bankGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        try
        {
            bankGroup = BankGroup::find(bankGroupId);

            if (! this.validate())
            {
                throw error("@SYS18447");
            }

            ttsbegin;

            // BankAccountTable
            select count(RecId) from bankAccountTable
                where bankAccountTable.BankGroupId == bankGroup.BankGroupId;

            this.progressInit(BankUpdateFromGroup::description(), any2int(bankAccountTable.RecId), #AviUpdate);

            this.updateBankAccountTable();

            // custBankAccount
            select count(RecId) from custBankAccount
                where custBankAccount.BankGroupId == bankGroup.BankGroupId;

            this.progressInit(BankUpdateFromGroup::description(), any2int(custBankAccount.RecId), #AviUpdate);

            this.updateCustBankAccount();

            // vendBankAccount
            select count(RecId) from vendBankAccount
                where vendBankAccount.BankGroupID == bankGroup.BankGroupId;

            this.progressInit(BankUpdateFromGroup::description(), any2int(vendBankAccount.RecId), #AviUpdate);

            this.updateVendBankAccount();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version     = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankAccountTable</Name>
				<Source><![CDATA[
    private void updateBankAccountTable()
    {
        while select forupdate bankAccountTable
            where bankAccountTable.BankGroupId == bankGroup.BankGroupId
        {
            bankAccountTable.initFromBankGroup(bankGroup);
            bankAccountTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustBankAccount</Name>
				<Source><![CDATA[
    private void updateCustBankAccount()
    {
        while select forupdate custBankAccount
            where custBankAccount.BankGroupId == bankGroup.BankGroupId
        {
            custBankAccount.initFromBankGroup(bankGroup);
            custBankAccount.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendBankAccount</Name>
				<Source><![CDATA[
    private void updateVendBankAccount()
    {
        while select forupdate vendBankAccount
            where vendBankAccount.BankGroupID == bankGroup.BankGroupId
        {
            vendBankAccount.initFromBankGroup(bankGroup);
            vendBankAccount.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS69957";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        BankGroup               bankGroup;
        BankUpdateFromGroup     bankUpdateFromGroup;

        if (args.caller() && args.dataset() == tableNum(BankGroup))
        {
            bankGroup = args.record();
        }
        else
        {
            throw error(Error::wrongUseOfFunction(BankUpdateFromGroup::description()));
        }

        bankUpdateFromGroup = new BankUpdateFromGroup();
        bankUpdateFromGroup.getLast();
        bankUpdateFromGroup.parmBankGroup(bankGroup.BankGroupId);
        if (bankUpdateFromGroup.prompt())
        {
            bankUpdateFromGroup.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for executing the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>