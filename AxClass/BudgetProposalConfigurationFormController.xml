<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetProposalConfigurationFormController</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class BudgetProposalConfigurationFormController
{
    private PowerAIInsightsStateMachineFacade stateMachineFacade;

    internal FormTabPageControl InsightsPredictionModel;

    internal FormGroupControl InsightsPredictionModel_WarmUp;
    internal FormStaticTextControl InsightsPredictionModel_WarmUp_status_label;

    internal FormGroupControl InsightsPredictionModel_Success;
    internal FormStaticTextControl InsightsPredictionModel_Success_LastRun;
    internal FormStaticTextControl InsightsPredictionModel_Success_LastTrained;

    internal FormGroupControl InsightsPredictionModel_Failure;
    internal FormStaticTextControl InsightsPredictionModel_Failure_status_label;
    internal FormCommandButtonControl InsightsPredictionModel_Failure_RestartButton;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new()
    {
        this.stateMachineFacade = PowerAIInsightsStateMachineFacade::newForFeatureName(FinanceInsightsConstants::BudgetProposalInsightsFeatureNameV2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processEvent</Name>
				<Source><![CDATA[
    internal void processEvent(PowerAIInsightsStateMachineEvent _event)
    {
        stateMachineFacade.processEvent(PowerAIInsightsEventNoArgs::newFromEvent(_event));

        this.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>refresh</Name>
				<Source><![CDATA[
    internal void refresh(boolean hasRecord = true)
    {
        if (this.anyControlIsNull())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (!hasRecord)
        {
            // Hide the status tab page.
            InsightsPredictionModel.visible(false);
            return;
        }

        PowerAIInsightsStateMachineState state = stateMachineFacade.getCurrentState();

        SysPowerAIModelState powerAIModelState;

        switch (state)
        {
            case BudgetProposalInsightsStateMachineState::Disabled:
                this.setDisabledMetadata();
                break;

            case BudgetProposalInsightsStateMachineState::Enabled:
                this.setEnabledMetadata();
                break;

            case BudgetProposalInsightsStateMachineState::BatchJobQueued,
                 BudgetProposalInsightsStateMachineState::BatchJobInProgress,
                 BudgetProposalInsightsStateMachineState::BatchJobSucceeded:
                this.setInitializingMetadata(state);
                break;

            case BudgetProposalInsightsStateMachineState::BatchJobFailed:
                this.setFailedMetadata(state);
                break;

            case BudgetProposalInsightsStateMachineState::ExternalServiceCallFailed:
                this.setFailedAndRestartableMetadata(state);
                break;

            case BudgetProposalInsightsStateMachineState::ExternalDataServicePolling:
                DataJobServiceState dataJobServiceState = stateMachineFacade.fetchPipelineState();
                DataJobServiceInitializeStatus initializeStatus = dataJobServiceState.parmInitializationStatus();

                switch (initializeStatus)
                {
                    case DataJobServiceInitializeStatus::Canceled,
                         DataJobServiceInitializeStatus::Failed:
                        this.setFailedAndRestartableMetadata(state);
                        break;

                    case DataJobServiceInitializeStatus::Initializing,
                         DataJobServiceInitializeStatus::Running:
                        this.setInitializingMetadata(state);
                        break;

                    case DataJobServiceInitializeStatus::Completed:
                        powerAIModelState = dataJobServiceState.parmPowerAIModelState();

                        if (powerAIModelState != null)
                        {
                            this.setPowerAIMetadata(powerAIModelState);
                        }
                        else
                        {
                            this.setUnknownStatusMetadata();
                        }
                        break;

                    case DataJobServiceInitializeStatus::None:
                        this.setUnknownStatusMetadata();
                        break;

                    default:
                        this.setUnknownStatusMetadata();
                        break;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPowerAIMetadata</Name>
				<Source><![CDATA[
    private void setPowerAIMetadata(SysPowerAIModelState _powerAIModelState)
    {
        switch (_powerAIModelState.parmStatus())
        {
            case SysPowerAIStatus::Scheduled,
                 SysPowerAIStatus::Published:
                this.setPowerAISuccessMetadata(_powerAIModelState);
                break;

            case SysPowerAIStatus::InitializeFailed,
                 SysPowerAIStatus::PublishFailed, 
                 SysPowerAIStatus::ScheduleFailed,
                 SysPowerAIStatus::TrainingFailed:
                this.setPowerAIFailedMetadata(_powerAIModelState);
                break;

            case SysPowerAIStatus::Initializing:
                this.setPowerAIInProgressMetadata(_powerAIModelState, "@FinanceInsightsContracts:AIFeatureInitializing");
                break;

            case SysPowerAIStatus::Created,
                 SysPowerAIStatus::TrainingDraftCreated,
                 SysPowerAIStatus::TrainingInProgress,
                 SysPowerAIStatus::TrainingComplete:
                this.setPowerAIInProgressMetadata(_powerAIModelState, "@FinanceInsightsContracts:AIFeatureTraining");
                break;

            case SysPowerAIStatus::PublishingDraftCreated,
                 SysPowerAIStatus::Publishing:
                this.setPowerAIInProgressMetadata(_powerAIModelState, "@FinanceInsightsContracts:AIFeaturePublishing");
                break;

            case SysPowerAIStatus::Unknown:
                this.setUnknownStatusMetadata();
                break;

            default:
                this.setUnknownStatusMetadata();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDisabledMetadata</Name>
				<Source><![CDATA[
    private void setDisabledMetadata()
    {
        InsightsPredictionModel.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnabledMetadata</Name>
				<Source><![CDATA[
    private void setEnabledMetadata()
    {
        InsightsPredictionModel.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInitializingMetadata</Name>
				<Source><![CDATA[
    private void setInitializingMetadata(PowerAIInsightsStateMachineState _state)
    {
        InsightsPredictionModel.visible(true);
        InsightsPredictionModel_WarmUp.visible(true);
        InsightsPredictionModel_WarmUp_status_label.text(strFmt("@FinanceInsightsContracts:AIFeatureStatusInProgressMessage", "@FinanceInsightsContracts:AIFeatureInitializing"));
        InsightsPredictionModel_Success.visible(false);
        InsightsPredictionModel_Failure.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFailedMetadata</Name>
				<Source><![CDATA[
    private void setFailedMetadata(PowerAIInsightsStateMachineState _state)
    {
        InsightsPredictionModel.visible(true);
        InsightsPredictionModel_WarmUp.visible(false);
        InsightsPredictionModel_Success.visible(false);
        InsightsPredictionModel_Failure.visible(true);
        InsightsPredictionModel_Failure_status_label.text("@FinanceInsightsContracts:AIFeatureInitializeFailed");
        InsightsPredictionModel_Failure_RestartButton.visible(false);
        InsightsPredictionModel_Failure_RestartButton.enabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFailedAndRestartableMetadata</Name>
				<Source><![CDATA[
    private void setFailedAndRestartableMetadata(PowerAIInsightsStateMachineState _state)
    {
        InsightsPredictionModel.visible(true);
        InsightsPredictionModel_WarmUp.visible(false);
        InsightsPredictionModel_Success.visible(false);
        InsightsPredictionModel_Failure.visible(true);
        InsightsPredictionModel_Failure_status_label.text("@FinanceInsightsContracts:AIFeatureInitializeFailed");
        InsightsPredictionModel_Failure_RestartButton.visible(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPowerAISuccessMetadata</Name>
				<Source><![CDATA[
    private void setPowerAISuccessMetadata(SysPowerAIModelState _powerAIState)
    {
        InsightsPredictionModel.visible(true);
        InsightsPredictionModel_WarmUp.visible(false);
        InsightsPredictionModel_Success.visible(true);
        InsightsPredictionModel_Success_LastRun.visible(_powerAIState.parmLastRun() != DateTimeUtil::minValue());
        InsightsPredictionModel_Success_LastRun.text(PowerAIInsightsLastModelRunAndTrainSinceDateFormatter::getLastRunDateTimeDifference(_powerAIState.parmLastRun()));
        InsightsPredictionModel_Success_LastTrained.visible(_powerAIState.parmLastTrained() != DateTimeUtil::minValue());
        InsightsPredictionModel_Success_LastTrained.text(PowerAIInsightsLastModelRunAndTrainSinceDateFormatter::getLastTrainedDateTimeDifference(_powerAIState.parmLastTrained()));        
        InsightsPredictionModel_Failure.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPowerAIFailedMetadata</Name>
				<Source><![CDATA[
    private void setPowerAIFailedMetadata(SysPowerAIModelState _powerAIState)
    {
        InsightsPredictionModel.visible(true);
        InsightsPredictionModel_WarmUp.visible(false);
        InsightsPredictionModel_Success.visible(false);
        InsightsPredictionModel_Failure.visible(true);
        InsightsPredictionModel_Failure_status_label.text(enum2Str(_powerAIState.parmStatus()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPowerAIInProgressMetadata</Name>
				<Source><![CDATA[
    private void setPowerAIInProgressMetadata(SysPowerAIModelState _powerAIModelState, LabelId _statusMessageLabelId)
    {
        InsightsPredictionModel.visible(true);
        InsightsPredictionModel_WarmUp.visible(true);
        InsightsPredictionModel_WarmUp_status_label.text(strFmt("@FinanceInsightsContracts:AIFeatureStatusInProgressMessage", _statusMessageLabelId));
        InsightsPredictionModel_Success.visible(false);
        InsightsPredictionModel_Failure.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUnknownStatusMetadata</Name>
				<Source><![CDATA[
    private void setUnknownStatusMetadata()
    {
        InsightsPredictionModel.visible(true);
        InsightsPredictionModel_WarmUp.visible(true);
        InsightsPredictionModel_WarmUp_status_label.text(strFmt("@FinanceInsightsContracts:AIFeatureStatusInProgressMessage", "@SysPowerAI:Unknown"));
        InsightsPredictionModel_Success.visible(false);
        InsightsPredictionModel_Failure.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyControlIsNull</Name>
				<Source><![CDATA[
    private boolean anyControlIsNull()
    {
        return InsightsPredictionModel == null
            || InsightsPredictionModel_WarmUp == null
            || InsightsPredictionModel_Success == null
            || InsightsPredictionModel_Failure == null
            || InsightsPredictionModel_WarmUp_status_label == null
            || InsightsPredictionModel_Failure_status_label == null
            || InsightsPredictionModel_Success_LastRun == null
            || InsightsPredictionModel_Success_LastTrained == null
            || InsightsPredictionModel_Failure_RestartButton == null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>