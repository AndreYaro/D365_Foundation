<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxEngineSQLDictionarySyncHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TaxEngineSQLDictionarySyncHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>syncTaxEngineSQLDictionary</Name>
				<Source><![CDATA[
    public static void syncTaxEngineSQLDictionary()
    {
        container tableList = [
            tableNum(TaxDocumentRowDeterminedComponent),
            tableNum(TaxDocumentRowTaxDeterminedInfo),
            tableNum(TaxMeasureType),
            tableNum(TaxMeasureTypeDetail),
            tableNum(TaxPeriodHeader),
            tableNum(TaxRtDocCompPostingProfDetVersion),
            tableNum(TaxRtDocCompPostingProfVersion),
            tableNum(TaxRtLookupStructFieldBindingVersion),
            tableNum(TaxRtLookupStructFieldCondColumnLink),
            tableNum(TaxRuntimeComponent),
            tableNum(TaxRuntimeComponentMeasure),
            tableNum(TaxRuntimeComponentMeasureVersion),
            tableNum(TaxRuntimeComponentVersion),
            tableNum(TaxRuntimeDefContext),
            tableNum(TaxRuntimeDefContextVersion),
            tableNum(TaxRuntimeDocComponent),
            tableNum(TaxRuntimeDocComponentMeasure),
            tableNum(TaxRuntimeDocComponentMeasureVersion),
            tableNum(TaxRuntimeDocComponentPostingProfile),
            tableNum(TaxRuntimeDocComponentPostingProfileDet),
            tableNum(TaxRuntimeDocComponentPostingType),
            tableNum(TaxRuntimeDocComponentVersion),
            tableNum(TaxRuntimeDocContext),
            tableNum(TaxRuntimeDocContextVersion),
            tableNum(TaxRuntimeDocModel),
            tableNum(TaxRuntimeDocModelAttr),
            tableNum(TaxRuntimeDocModelAttrVersion),
            tableNum(TaxRuntimeDocModelRow),
            tableNum(TaxRuntimeDocModelRowVersion),
            tableNum(TaxRuntimeDocModelVersion),
            tableNum(TaxRuntimeDocTaxType),
            tableNum(TaxRuntimeDocTaxTypePostingType),
            tableNum(TaxRuntimeDocTaxTypeVersion),
            tableNum(TaxRuntimeLookup),
            tableNum(TaxRuntimeLookupAccountingResult),
            tableNum(TaxRuntimeLookupAccountingResultDetail),
            tableNum(TaxRuntimeLookupCondition),
            tableNum(TaxRuntimeLookupMeasureResult),
            tableNum(TaxRuntimeLookupMeasureResultDetail),
            tableNum(TaxRuntimeLookupStructure),
            tableNum(TaxRuntimeLookupStructureBinding),
            tableNum(TaxRuntimeLookupStructureBindingVersion),
            tableNum(TaxRuntimeLookupStructureField),
            tableNum(TaxRuntimeLookupStructureFieldBinding),
            tableNum(TaxRuntimeLookupStructureFieldVersion),
            tableNum(TaxRuntimeLookupStructureVersion),
            tableNum(TaxRuntimeLookupTaxPeriodResult),
            tableNum(TaxRuntimeLookupVersion),
            tableNum(TaxRuntimeMeasure),
            tableNum(TaxRuntimeMeasureVersion),
            tableNum(TaxRuntimeModel),
            tableNum(TaxRuntimeModelAttr),
            tableNum(TaxRuntimeModelAttrVersion),
            tableNum(TaxRuntimeModelRow),
            tableNum(TaxRuntimeModelRowVersion),
            tableNum(TaxRuntimeModelVersion),
            tableNum(TaxRuntimePostingType),
            tableNum(TaxRuntimePostingTypeVersion),
            tableNum(TaxRuntimeReferenceModel),
            tableNum(TaxRuntimeReferenceModelAttr),
            tableNum(TaxRuntimeReferenceModelAttrVersion),
            tableNum(TaxRuntimeReferenceModelRow),
            tableNum(TaxRuntimeReferenceModelRowVersion),
            tableNum(TaxRuntimeReferenceModelVersion),
            tableNum(TaxRuntimeTaxType),
            tableNum(TaxRuntimeTaxTypeVersion),
            tableNum(TaxSolutionScope),
            tableNum(TaxSolutionScopeSetup),
            tableNum(ERSolutionTable),
            tableNum(ERSolutionVersionTable)
        ];

        int i;

        TableId curTableId;

        SysDictTable    dictTable;
        SysDictField    dictField;
        FieldId         fieldId;

        TaxEngineSQLDictionary taxEngineSQLDictionary;

        ttsBegin;

        delete_from taxEngineSQLDictionary;

        for (i = 1; i <= conLen(tableList); i++)
        {
            curTableId = conPeek(tableList, i);
            dictTable = new SysDictTable(curTableId);

            taxEngineSQLDictionary.clear();
            taxEngineSQLDictionary.RefTableId   = curTableId;
            taxEngineSQLDictionary.RefFieldId   = 0;
            taxEngineSQLDictionary.Name         = dictTable.name();
            taxEngineSQLDictionary.SQLName      = dictTable.name();
            taxEngineSQLDictionary.doInsert();

            fieldId = dictTable.fieldNext(0);

            while (fieldId)
            {
                dictField = dictTable.fieldObject(fieldId);

                if (dictField.isSql())
                {
                    taxEngineSQLDictionary.clear();
                    taxEngineSQLDictionary.RefTableId   = curTableId;
                    taxEngineSQLDictionary.RefFieldId   = fieldId;
                    taxEngineSQLDictionary.Name         = dictField.name();
                    taxEngineSQLDictionary.SQLName      = dictField.name();
                    taxEngineSQLDictionary.doInsert();
                }

                fieldId = dictTable.fieldNext(fieldId);
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>