<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PurchReqDP</c> class is the report data provider class for purchase requisition SSRS reports.
/// </summary>
[
    SRSReportQueryAttribute(querystr(PurchREQ)),
    SRSReportParameterAttribute(classstr(PurchReqContract))
]
public class PurchReqDP extends SRSReportDataProviderBase
{
    PurchReqTmp             purchReqTmp;
    PurchReqTableHistory    purchReqTableHistory;
    PurchReqLineHistory     purchReqLineHistory;
    PurchReqTableHistoryTotals purchReqTableHistoryTotals;
    RequisitionPurpose      requisitionPurpose;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the note that has been attached to the invoice.
    /// </summary>
    /// <param name="_common">
    /// A <c>Common</c> record that either contains the header information or line information.
    /// </param>
    /// <returns>
    /// The note that has been attached to the invoice.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// If the <c>common</c> record is not a <c>PurchReqTable</c> record or <c>PurchReqLine</c>
    /// record.
    /// </exception>
    public Notes getDocumentNote(Common _common)
        {
        DocuRefSearch   docuRefSearch;
        Notes           notes;
        DocuOnFormular  docuOnFormular;
        VendFormLetterDocument vendFormLetterDocument = VendFormLetterDocument::find();

        switch (_common.TableId)
        {
            case tableNum(PurchReqTable):
            docuOnFormular = DocuOnFormular::Head;
            break;

            case tableNum(PurchReqLine):
            docuOnFormular = DocuOnFormular::Line;
            break;

            default:
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if ((vendFormLetterDocument.DocuOnPurchReq == docuOnFormular)
                || (vendFormLetterDocument.DocuOnPurchReq == DocuOnFormular::All))
        {
            docuRefSearch = DocuRefSearch::newTypeIdAndRestriction(_common,
                                                                vendFormLetterDocument.DocuTypePurchReq,
                                                                DocuRestriction::External);
            notes = Docu::concatDocuRefNotes(docuRefSearch);
        }

        return notes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchReqTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full data from the <c>PurchReqTmp</c> table.
    /// </summary>
    /// <returns>
    /// The <c>PurchReqTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tablestr(PurchReqTmp))]
    public PurchReqTmp getPurchReqTmp()
    {
        select * from purchReqTmp;
        return purchReqTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates data into a temporary table.
    /// </summary>
    protected void insertIntoTempTable()
    {
        purchReqTmp.ItemId                  =   purchReqLineHistory.ItemId;
        purchReqTmp.Name                    =   purchReqLineHistory.itemName();
        purchReqTmp.ItemIdNonCatalog        =   purchReqLineHistory.ItemIdNonCatalog;
        purchReqTmp.PurchReqId              =   purchReqTableHistory.PurchReqId;
        purchReqTmp.Originator              =   HcmWorker::find(purchReqTableHistory.Originator).name();
        purchReqTmp.Qty                     =   purchReqLineHistory.PurchQty;
        purchReqTmp.Units                   =   UnitofMeasure::find(purchReqLineHistory.PurchUnitOfMeasure).Symbol;
        purchReqTmp.PurchReqName            =   purchReqTableHistory.PurchReqName;
        purchReqTmp.BuyingLegalEntity       =   DirPartyTable::findRec(purchReqLineHistory.BuyingLegalEntity).Name;
        purchReqTmp.ReceivingOperatingUnit  =   DirPartyTable::findRec(purchReqLineHistory.ReceivingOperatingUnit).Name;
        purchReqTmp.CompanyName             =   CompanyInfo::find().Name;
        purchReqTmp.PersonnelNumber         =   HcmWorker::find(purchReqLineHistory.Requisitioner).name();
        purchReqTmp.CompanyAddress          =   CompanyInfo::find().postalAddress().Address;
        purchReqTmp.CategoryName            =   purchReqLineHistory.categoryName();
        purchReqTmp.RequiredDate            =   purchReqLineHistory.RequiredDate;
        purchReqTmp.HeaderNotes             =   this.getDocumentNote(PurchReqTable::find(purchReqTableHistory.PurchReqTable));
        purchReqTmp.Notes                   =   this.getDocumentNote(PurchReqLine::find(purchReqLineHistory.PurchReqLine));

        if (requisitionPurpose == requisitionPurpose::Consumption)
        {
            purchReqTmp.CurrencyCode        =   purchReqLineHistory.CurrencyCode;
            purchReqTmp.LineDisc            =   purchReqLineHistory.LineDisc;
            purchReqTmp.LinePercent         =   purchReqLineHistory.LinePercent;
            purchReqTmp.PurchPrice          =   purchReqLineHistory.PurchPrice;
            purchReqTmp.VendAccount         =   purchReqLineHistory.VendAccount;
            purchReqTmp.LineAmount          =   purchReqLineHistory.LineAmount;
            purchReqTmp.LineAmount          =   purchReqLineHistory.LineAmount;

            purchReqTmp.ReqAmountMST        =   purchReqTableHistoryTotals.ReqAmountMST;
            purchReqTmp.RoundOff            =   purchReqTableHistoryTotals.RoundOff;
            purchReqTmp.SalesOrderBalance   =   purchReqTableHistoryTotals.SalesOrderBalance;
            purchReqTmp.SumLineDisc         =   purchReqTableHistoryTotals.SumLineDisc;
            purchReqTmp.SumMarkup           =   purchReqTableHistoryTotals.SumMarkup;
            purchReqTmp.SumTax              =   purchReqTableHistoryTotals.SumTax;
            purchReqTmp.CompanyCurrency     =   purchReqTableHistoryTotals.CurrencyCode;
        }

        purchReqTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic, calls methods, and inserts data into a temporary table.
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic. This method is called by SSRS
    /// at runtime. The method computes data and populates the data tables that are returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        RecId                   versionRecId;
        utcDateTime             versionDateTime;
        PurchReqContract        contract;
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;
        QueryRun                queryRun;
        Query                   query;

        query                   = this.parmQuery();
        contract                = this.parmDataContract() as PurchReqContract;
        versionRecId            = contract.parmRecordId();
        versionDateTime         = contract.parmVersioningTimeStamp();
        requisitionPurpose      = contract.parmRequisitionPurpose();

        query.validTimeStateAsOfDateTime(versionDateTime);

        if (requisitionPurpose == RequisitionPurpose::Replenishment)
        {
            queryBuildDataSource = query.dataSourceTable(tablenum(PurchReqTableHistoryTotals));
            queryBuildDataSource.enabled(false);
        }

        queryBuildDataSource    = query.dataSourceTable(tablenum(PurchReqTableVersion));
        queryBuildRange         = SysQuery::findOrCreateRange(queryBuildDataSource,fieldnum(PurchReqTableVersion, RecId));
        queryBuildRange.value(Sysquery::value(versionRecId));

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            purchReqTableHistory        =  queryRun.get(tablenum(PurchReqTableHistory));
            purchReqLineHistory         =  queryRun.get(tablenum(PurchReqLineHistory));
            if (requisitionPurpose == requisitionPurpose::Consumption)
            {
                purchReqTableHistoryTotals  =  queryRun.get(tablenum(PurchReqTableHistoryTotals));
            }
            this.insertIntoTempTable();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>