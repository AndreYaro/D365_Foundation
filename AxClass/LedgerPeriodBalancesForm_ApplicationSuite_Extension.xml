<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerPeriodBalancesForm_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(LedgerPeriodBalances))]
public final class LedgerPeriodBalancesForm_ApplicationSuite_Extension
{
    public Amount sumInTotalWithSim_IT;

    [DataSource]

    class TmpDateSumCode_extension
    {
        /// <summary>
        /// Display percentage sum with simulation.
        /// </summary>
        /// <param name = "_tmpDateSumCode"><c>TmpDateSumCode</c> record.</param>
        [SysClientCacheDataMethodAttribute(true)]
        public display Percent sumInPercentWithSim_IT(TmpDateSumCode _tmpDateSumCode)
        {
            return percent(_tmpDateSumCode.TotalWithSim_IT, sumInTotalWithSim_IT);
        }
    }

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setSumInTotalWithSim_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets total sum that includes simulation.
    /// </summary>
    /// <param name = "_sumInTotalWithSim">New sum value.</param>
    public void setSumInTotalWithSim_IT( Amount _sumInTotalWithSim)
    {
        this.sumInTotalWithSim_IT = _sumInTotalWithSim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>TmpDateSumCode_OnPostLinkActive_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes period balance.
    /// </summary>
    /// <param name="_sender"><c>FormDataSource</c> object.</param>
    /// <param name="_e">Event arguments.</param>
    [FormDataSourceEventHandler(formDataSourceStr(LedgerPeriodBalances, TmpDateSumCode), FormDataSourceEventType::PostLinkActive)]
    public static void TmpDateSumCode_OnPostLinkActive_IT(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        if (FeatureStateProvider::isFeatureEnabled(GeneralLedgerSimulationsFeature::instance()))
        {
            FormRun form = _sender.formRun();
            var FiscalYearEdit = form.design().controlName(formControlStr(LedgerPeriodBalances, FiscalYearEdit));
            TmpDateSumCode tmpDateSumCode = _sender.cursor();
            PeriodStart periodStart = FiscalCalendarYear::findByCalendarYearName(Ledger::fiscalCalendar(), FiscalYearEdit.valueStr()).StartDate;

            if (!periodStart)
            {
                throw error(strFmt("@SYS16631", FiscalYearEdit.valueStr()));
            }

            LedgerCreatePeriodBalances createPeriodBalances = LedgerCreatePeriodBalances::newPeriodStartDate(periodStart);

            switch (form.args().record().TableId)
            {
                case tablenum(MainAccount):
                    LedgerTrialBalanceListPageBalanceParms mainAccountParameters;

                    MainAccount mainAccount = form.args().record() as MainAccount;

                    if (mainAccount)
                    {
                        // read the full record because the input buffer may have used a field list
                        mainAccount = MainAccount::find(mainAccount.RecId);

                        LedgerIMainAccountBalanceParameterProvider mainAccountProvider = form.args().caller() as LedgerIMainAccountBalanceParameterProvider;
                        if (mainAccountProvider != null)
                        {
                            mainAccountParameters = mainAccountProvider.getBalanceParameters();
                        }

                        if (mainAccountParameters == null)
                        {
                            Debug::assert(false);
                            mainAccountParameters = LedgerTrialBalanceListPageBalanceParms::construct();
                        }
                        createPeriodBalances.parmSimulationJournalGroupId_IT(mainAccountParameters.parmSimulationJournalGroupId_IT());

                        createPeriodBalances.parmPostingLayerList(mainAccountParameters.getPostingLayers());
                        createPeriodBalances.createPeriodBalancesMainAccount(mainAccount);
                    }
                    break;

                case tablenum(DimensionAttributeValueCombination):
                    LedgerTrialBalanceListPageBalanceParms trialBalanceParameters;

                    DimensionAttributeValueCombination dimAttributeValueCombo = form.args().record() as DimensionAttributeValueCombination;

                    LedgerITrialBalanceBalanceParameterProvider trialBalanceProvider = form.args().caller() as LedgerITrialBalanceBalanceParameterProvider;
                    if (trialBalanceProvider != null)
                    {
                        trialBalanceParameters = trialBalanceProvider.getBalanceParameters();
                    }

                    if (trialBalanceParameters == null)
                    {
                        Debug::assert(false);
                        trialBalanceParameters = LedgerTrialBalanceListPageBalanceParms::construct();
                    }

                    if (dimAttributeValueCombo != null)
                    {
                        createPeriodBalances.parmPostingLayerList(trialBalanceParameters.getPostingLayers());
                        createPeriodBalances.createPeriodBalancesDimAttrValueCombo(dimAttributeValueCombo);
                    }
                    break;

                case tableNum(GeneralLedgerBalanceReportingDimension):
                    LedgerTrialBalanceListPageBalanceParms ledgerTrialBalanceParameters;

                    GeneralLedgerBalanceReportingDimension reportingDimensions = form.args().record() as GeneralLedgerBalanceReportingDimension;

                    if (reportingDimensions == null)
                    {
                        return;
                    }
                    else
                    {
                        // reread because the arg record may have used a field list
                        reportingDimensions = GeneralLedgerBalanceReportingDimension::find(reportingDimensions.RecId);
                    }

                    LedgerITrialBalanceBalanceParameterProvider ledgerTrialBalanceProvider = form.args().caller() as LedgerITrialBalanceBalanceParameterProvider;
                    if (ledgerTrialBalanceProvider != null)
                    {
                        ledgerTrialBalanceParameters = ledgerTrialBalanceProvider.getBalanceParameters();
                    }
                    
                    if (ledgerTrialBalanceParameters == null)
                    {
                        Debug::assert(false);
                        ledgerTrialBalanceParameters = LedgerTrialBalanceListPageBalanceParms::construct();
                    }

                    if (reportingDimensions != null)
                    {
                        createPeriodBalances.parmPostingLayerList(ledgerTrialBalanceParameters.getPostingLayers());
                        createPeriodBalances.createPeriodBalancesReportingDimensions(reportingDimensions);
                    }
                    break;
            }

            form.setSumInTotalWithSim_IT(createPeriodBalances.periodToDateWithSim_IT());
            TmpDateSumCode.SumInTotalWithSim_IT = createPeriodBalances.periodToDateWithSim_IT();

            tmpDateSumCode.setTmpData(createPeriodBalances.periodBalances());
            _sender.research();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>