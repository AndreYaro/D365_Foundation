<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReport_Ranking</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchReport_Ranking
{
    VendInvoiceJour             vendInvoiceJour;
    VendInvoiceTrans            vendInvoiceTrans;

    TmpAccountSum               sortRecord;
    RecordSortedList            sortArray;

    Counter                     quantity;
    Counter                     outputQty;
    purchRanking                outputSorting;

    PurchQty                    qty;
    AmountMST                   revenue;

    AmountMST                   totalRevenue;
    PurchQty                    totalQty;

    QueryRun                    queryRun;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(TmpAccountSum _sortRecord, QueryRun _queryRun)
    {
        sortRecord = _sortRecord;
        queryRun = _queryRun;

        sortArray = new RecordSortedList(tablenum(TmpAccountSum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputQty</Name>
				<Source><![CDATA[
    Counter outputQty(Counter _outputQty = outputQty)
    {
        outputQty = _outputQty;
        return outputQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputSorting</Name>
				<Source><![CDATA[
    purchRanking outputSorting(purchRanking _outputSorting = outputSorting)
    {
        outputSorting = _outputSorting;
        return outputSorting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>quantity</Name>
				<Source><![CDATA[
    Counter quantity(Counter _quantity = quantity) // Called from Report PurchRanking fetch method
    {
        quantity = _quantity;
        return quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void  run()
    {
        boolean                     firstRecord         = true;
        VendAccount                 oldOrderAccount     = '';
        CurrencyExchangeHelper currencyExchangeHelper = CurrencyExchangeHelper::newLedger(Ledger::current());

        revenue         = 0;
        qty             = 0;

        totalRevenue    = 0;
        totalQty        = 0;

        quantity        = 0;

        switch (outputSorting)
        {
            case purchRanking::Revenue :    sortArray.sortOrder(fieldnum(TmpAccountSum, Balance01), fieldnum(TmpAccountSum, AccountNum));
                break;
            case purchRanking::Qty     :    sortArray.sortOrder(fieldnum(TmpAccountSum, Balance03), fieldnum(TmpAccountSum, AccountNum));
                break;
            default                    :    sortArray.sortOrder(fieldnum(TmpAccountSum, Balance01), fieldnum(TmpAccountSum, AccountNum));
        }

        while (queryRun.next())
        {
            vendInvoiceJour = queryRun.get(tablenum(VendInvoiceJour));

            if (firstRecord)
                oldOrderAccount = vendInvoiceJour.OrderAccount;

            if (vendInvoiceJour.OrderAccount != oldOrderAccount)
                this.writeSortArray(oldOrderAccount);

            firstRecord     = false;
            oldOrderAccount = vendInvoiceJour.OrderAccount;

            qty     += vendInvoiceJour.Qty;

            currencyExchangeHelper.parmExchangeDate(vendInvoiceJour.InvoiceDate);
            currencyExchangeHelper.parmExchangeRate1(vendInvoiceJour.ExchRate);
            currencyExchangeHelper.parmExchangeRate2(vendInvoiceJour.ExchRateSecondary);
            revenue += currencyExchangeHelper.calculateTransactionToAccounting(vendInvoiceJour.CurrencyCode, vendInvoiceJour.SalesBalance, true);
        }

        this.writeSortArray(oldOrderAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortArray</Name>
				<Source><![CDATA[
    RecordSortedList sortArray(RecordSortedList _sortArray = sortArray) // Called from Report PurchRanking fetch method
    {
        sortArray = _sortArray;
        return sortArray;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalQty</Name>
				<Source><![CDATA[
    PurchQty totalQty(PurchQty _totalQty = totalQty)
    {
        totalQty = _totalQty;
        return totalQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalRevenue</Name>
				<Source><![CDATA[
    AmountMST totalRevenue(AmountMST _totalRevenue = totalRevenue)
    {
        totalRevenue = _totalRevenue;
        return totalRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeSortArray</Name>
				<Source><![CDATA[
    void writeSortArray(VendAccount orderAccount)
    {
        totalRevenue                += revenue;
        totalQty                    += qty;

        sortRecord.AccountNum       = orderAccount;
        sortRecord.Balance01        = -revenue;
        sortRecord.Balance03        = -qty;

        sortArray.ins(sortRecord);

        quantity++;

        qty     = 0;
        revenue = 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>