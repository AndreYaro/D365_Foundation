<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerCentJournalReportContractBE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data contract class for <c>LedgerCentJournalReportBE</c> SSRS report.
/// </summary>
/// <remarks>
/// This is the Data contract class for the <c>LedgerCentJournalReportBE</c> SSRS report.
/// </remarks>
[
    DataContractAttribute,
    SysOperationGroupAttribute('Criteria', "@SYS1046", '1')
]
public class LedgerCentJournalReportContractBE implements SysOperationValidatable//, SysOperationInitializable
{
    ToDate                                      toDate;
    FromDate                                    fromDate;
    VATNum                                      companyVATNum;
    TaxEnterpriseNumber                         companyEnterpriseNumber;
    NoYes                                       compression;
    FreeTxt                                     compr;
    ToDate                                      periodToDate;
    ToDate                                      periodClosingDate;
    FromDate                                    periodOpeningDate;
    FromDate                                    periodFromDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCompanyEnterpriseNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter companyEnterpriseNumber.
    /// </summary>
    /// <param name="_companyEnterpriseNumber">
    /// The new value of the datacontract parameter companyEnterpriseNumber; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter companyEnterpriseNumber.
    /// </returns>
    [
        DataMemberAttribute('CompanyEnterpriseNumber')
    ]
    public TaxEnterpriseNumber parmCompanyEnterpriseNumber(TaxEnterpriseNumber _companyEnterpriseNumber  = companyEnterpriseNumber)
    {
        companyEnterpriseNumber  = _companyEnterpriseNumber;
        return companyEnterpriseNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompanyVATNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter companyVATNum.
    /// </summary>
    /// <param name="_companyVATNum">
    /// The new value of the datacontract parameter companyVATNum; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter companyVATNum.
    /// </returns>
    [
        DataMemberAttribute('CompanyVATNum')
    ]
    public VATNum parmCompanyVATNum(VATNum _companyVATNum  = companyVATNum)
    {
        companyVATNum  = _companyVATNum;
        return companyVATNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompression</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter compression.
    /// </summary>
    /// <param name="_compr">
    /// The new value of the datacontract parameter compression; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter compression.
    /// </returns>
    [
        DataMemberAttribute('Compression')
    ]
    public FreeTxt parmCompression(FreeTxt _compr  = compr)
    {
        compr  = _compr;
        return compr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter fromDate.
    /// </summary>
    /// <param name="_fromDate">
    /// The new value of the datacontract parameter fromDate; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter fromDate.
    /// </returns>
    [
        DataMemberAttribute('FromDate'),
        SysOperationGroupMemberAttribute('Criteria'),
        SysOperationDisplayOrderAttribute('1')
    ]
    public FromDate parmFromDate(FromDate _fromDate  = fromDate)
    {
        fromDate  = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter toDate.
    /// </summary>
    /// <param name="_toDate">
    /// The new value of the datacontract parameter toDate; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter toDate.
    /// </returns>
    [
        DataMemberAttribute('ToDate'),
        SysOperationGroupMemberAttribute('Criteria'),
        SysOperationDisplayOrderAttribute('2')
    ]
    public ToDate parmToDate(ToDate _toDate  = toDate)
    {
        toDate  = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the from date and the to date values that are entered by the user.
    /// </summary>
    /// <returns>
    ///    true if validation is successful; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean     ret  = true;
        RecId       calendarRecId  = CompanyInfoHelper::fiscalCalendarRecId();

        periodFromDate     = LedgerFiscalCalendar::findPeriodStartDateByDate(calendarRecId, fromDate);
        periodToDate       = LedgerFiscalCalendar::findPeriodEndDateByDate(calendarRecId,toDate);
        periodClosingDate  = LedgerFiscalCalendar::findClosingPeriodStartDateByDate(calendarRecId,periodFromDate);
        periodOpeningDate  = LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId,periodFromDate);

        if (!fromDate)
        {
            ret = checkFailed(strfmt("@SYS26332","@SYS5209"));
        }

        if (!toDate)
        {
            ret = checkFailed(strfmt("@SYS26332","@SYS14656"));
        }

        if (toDate <= fromDate)
        {
            ret = checkFailed("@SYS16982");
        }

        if (periodClosingDate < periodToDate)
        {
            ret = checkFailed(strfmt("@SYS79672",periodClosingDate));
        }

        if (ret)
        {
            ret = this.validatePeriod();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the parameters.
    /// </summary>
    /// <returns>
    ///    true if validation is successful and the values are valid; otherwise, an error is thrown.
    /// </returns>
    public boolean validatePeriod()
    {
        LedgerJournalTableTypeBE         ledgerJournalTableTypeBE;
        LedgerJournalPeriodFinalPrintBE  ledgerJournalPeriodFinalPrintBE;
        LedgerPostingJournalId           firstLedgerPostingJournalId;
        LedgerJournalTypeBE              firstLedgerJournalTypeBE;
        boolean                          firstError  = true;
        boolean                          firstRecord = true;
        boolean                          ret         = true;

        //check for all posting journals with a journaltype (purchase, sales, financial, other)
        //if there is a final reporting for this period and if all those journals are compressed or not.
        while select JournalTypeBE, LedgerPostingJournalId from ledgerJournalTableTypeBE
            order by JournalTypeBE, LedgerPostingJournalId
            where ledgerJournalTableTypeBE.JournalTypeBE != LedgerJournalTypeBE::Empty
        {
            select firstonly ledgerJournalPeriodFinalPrintBE
                where ledgerJournalPeriodFinalPrintBE.LedgerPostingJournalId  == ledgerJournalTableTypeBE.LedgerPostingJournalId
                   && ledgerJournalPeriodFinalPrintBE.PeriodStart             == periodFromDate
                   && ledgerJournalPeriodFinalPrintBE.PeriodEnd               == periodToDate;

            if (firstRecord)
            {
                firstLedgerPostingJournalId  = ledgerJournalTableTypeBE.LedgerPostingJournalId;
                firstLedgerJournalTypeBE     = ledgerJournalTableTypeBE.JournalTypeBE;
                compression = ledgerJournalPeriodFinalPrintBE.Compressed;
            }

            //error: no final reporting for this journal
            if (! ledgerJournalPeriodFinalPrintBE)
            {
                if (firstError)
                {
                    setprefix("@SYS79682");
                }
                ret         = checkFailed(strfmt("@SYS79683",ledgerJournalTableTypeBE.LedgerPostingJournalId,
                                                     ledgerJournalTableTypeBE.JournalTypeBE));
                firstError = false;
            }

            //error: different use of compress function for this journal and first validated journal
            if (ledgerJournalPeriodFinalPrintBE.Compressed != compression)
            {
                if (firstError)
                {
                    setprefix("@SYS79682");
                }
                ret         = checkFailed(strfmt("@SYS79684",ledgerJournalTableTypeBE.LedgerPostingJournalId,
                                                     ledgerJournalTableTypeBE.JournalTypeBE,
                                                     firstLedgerPostingJournalId,
                                                     firstLedgerJournalTypeBE));
                firstError = false;
            }

            firstRecord = false;
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
