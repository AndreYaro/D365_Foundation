<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResCancelProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Cancel processor factory class.
/// </summary>
public abstract class ResCancelProcessor implements ResICancelProcessor
{
    ResReservationSchedule  schedule;
    ResReservationType      type;
    List                    schedules;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>Schedules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Schedule to cancel.
    /// </summary>
    /// <param name = "_schedules">Schedule to be cancelled.</param>
    /// <returns>Instance of <c>ResReservationSchedule</c> class.</returns>
    public List Schedules(List _schedules = schedules)
    {
        schedules = _schedules;
        return schedules;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReservationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the reservation type to cancel.
    /// </summary>
    /// <param name = "_type">Reservation type to cancel.</param>
    /// <returns>Reservation type to cancel.</returns>
    public ResReservationType ReservationType(ResReservationType _type = type)
    {
        type = _type;
        return type;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Cancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the cancel process.
    /// </summary>
    /// <returns>TRUE when the reserve operation succeeds.</returns>
    public boolean Cancel()
    {
        boolean result;

        if (schedules.elements())
        {
            ListEnumerator enum = schedules.getEnumerator();
            while (enum.moveNext())
            {
                schedule = enum.current();

                ResourceRecId resource = schedule.Resource();
                activityresourcerecid activityResource = schedule.ActivityResource();
                ActivityRecId activity = schedule.Activity();

                if (!activityResource && activity && resource)
                {
                    activityResource = ActivityResourceFacade::findByActivityAndResource(activity, resource);
                    schedule.ActivityResource(activityResource);
                }

                if (activityResource || activity)
                {
                    //Reservation cancellation priotiy is activity resource and activity
                    result = this.byConditions() || result;
                }
                else if (resource)
                {
                    //Then if resource and legal entity is specified, remove it
                    result = this.byResource() || result;
                }
                else
                {
                    //If user has specify none of the above, then remove by either date or commitment type conditions.
                    result = this.byConditions() || result;
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>byResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancel the entire resource booking and/or assignment within the specified on date range.
    /// by resource recid
    /// </summary>
    /// <returns>TRUE when the reservation cancelation operation succeeds.</returns>
    protected abstract boolean byResource()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>byConditions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancel the entire resource booking and/or assignment within the specified on the date range
    /// by any ResReservationSchedule properties combination but not the resource and legalentity properties.
    /// </summary>
    /// <returns>TRUE when the reservation cancelation operation succeeds.</returns>
    protected abstract boolean byConditions()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of <c>ResCancelProcessor</c> class.
    /// </summary>
    protected void new()
    {
        schedules = new List(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProcessor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of a Reserve processor based on the specified Booking type.
    /// </summary>
    /// <param name = "_bookingType">Booking type.</param>
    /// <returns>Instance of <c>ResReserveProcessor class</c>.</returns>
    public static ResICancelProcessor getProcessor(ResCancelationType _cancelType = ResCancelationType::EntireDay)
    {
        switch (_cancelType)
        {
            case ResCancelationType::EntireDay:
                return ResCancelEntireDay::construct();
            case ResCancelationType::HourDistribution:
                error("@Res:CancelHourDistributionNotImplemented");
                return null;
            case ResCancelationType::HourScheduling:
                error("@Res:CancelScheduleNotImplemented");
                return null;
            case ResCancelationType::PercentageDistribution:
                error("@Res:CancelPercentageDistributionNotImplemented");
                return null;
            case ResCancelationType::PercentageScheduling:
                error("@Res:CancelPercentageSchedulingNotImplemented");
                return null;
            default:
                return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipDatabaseLogAndEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Skip data base log and event to improve performance.
    /// </summary>
    /// <param name = "_table">The specify table buffer.</param>
    protected void skipDatabaseLogAndEvent(Common _table)
    {
        _table.skipDatabaseLog(true);
        _table.skipEvents(true);
        _table.skipDataMethods(true);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>