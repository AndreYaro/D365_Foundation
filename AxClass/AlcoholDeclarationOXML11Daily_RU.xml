<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AlcoholDeclarationOXML11Daily_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AlcoholDeclarationOXML11Daily_RU</c> class performs printing to Excel of the 11th form of the daily journal.
/// </summary>
class AlcoholDeclarationOXML11Daily_RU extends AlcoholDeclarationOXML_RU
{
    AlcoholDailyJournalTable_RU     dailyJournalTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes report.
    /// </summary>
    protected void createReport()
    {
        this.initValue();
        this.initSectionMap();

        this.setCurrentWorksheetNum(1);
        this.fillMovement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>declarationType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the declaration type of the current child of the <c>AlcoholDeclarationOXML_RU</c> class.
    /// </summary>
    /// <returns>
    ///    Retail11.
    /// </returns>
    protected AlcoholDeclarationType_RU declarationType()
    {
        return AlcoholDeclarationType_RU::Retail11;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills movement section in the report.
    /// </summary>
    protected void fillMovement()
    {
        AlcoholDailyTransMovement_RU                dailyTrans;
        SetEnumerator                               se;

        qtyFromCol  = this.movementTextColQty() + 1;
        lastCol     = this.movementColQty();
        this.execute(Headermovement);

        se = journalTransBranchSet.getEnumerator();
        totalArray = new ArrayExtend_RU(Types::Real, this.movementColQty() - this.movementTextColQty());

        while (se.moveNext())
        {
            dailyJournalTable = AlcoholDailyJournalTable_RU::findRecId(se.current());

            while select dailyTrans
                order by AlcoholProductionTypeId
                where dailyTrans.TransDate               == dailyJournalTable.TransDate
                   && dailyTrans.AlcoholDeclarationType  == this.declarationType()
                   && dailyTrans.BranchId                == dailyJournalTable.BranchId
            {
                this.insertBodyLineMovementDaily(dailyTrans);
            }
        }

        this.execute(Totallinemovement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a list of report sections which should be executed.
    /// </summary>
    protected void initSectionMap()
    {
        this.addSection(Headermovement);
        this.addSection(Bodylinemovement);
        this.addSection(Totallinemovement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes variables which will be often used during printing.
    /// </summary>
    public void initValue()
    {
        dailyJournalTable = common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBodyLineMovementDaily</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the declaration trans record into the Excel report.
    /// </summary>
    /// <param name="_dailyTrans">
    ///    AlcoholDeclarationTransMovement_RU record which is being printed.
    /// </param>
    protected void insertBodyLineMovementDaily(AlcoholDailyTransMovement_RU    _dailyTrans)
    {
        int i, j;
        arrayStr = new ArrayExtend_RU(Types::String, 3);

        i = 1;
        arrayStr.value(i,   strfmt("@SYS82282", _dailyTrans.TransDate));
        i++;
        arrayStr.value(i,   AlcoholProductionType_RU::find(_dailyTrans.AlcoholProductionTypeId).Name);
        i++;
        arrayStr.value(i,   _dailyTrans.AlcoholProductionTypeId);

        arrayReal = new ArrayExtend_RU(Types::Real, this.movementColQty() - this.movementTextColQty());

        i = 1;
        arrayReal.value(i, _dailyTrans.PeriodStartQty);
        i++;
        arrayReal.value(i, _dailyTrans.ManufacturerPurchQty);
        i++;
        arrayReal.value(i, _dailyTrans.WholesalePurchQty);
        i++;
        arrayReal.value(i, _dailyTrans.ImportPurchQty);
        i++;
        arrayReal.value(i, _dailyTrans.TotalPurchQty);
        i++;
        arrayReal.value(i, _dailyTrans.PurchReturnQty);
        i++;
        arrayReal.value(i, _dailyTrans.InternalTransferReceiptQty);
        i++;
        arrayReal.value(i, _dailyTrans.OtherRecieptQty);
        i++;
        arrayReal.value(i, _dailyTrans.TotalReceiptQty);
        i++;
        arrayReal.value(i, _dailyTrans.RetailSalesQty);
        i++;
        arrayReal.value(i, _dailyTrans.OtherIssueQty);
        i++;
        arrayReal.value(i, _dailyTrans.SalesReturnQty);
        i++;
        arrayReal.value(i, _dailyTrans.InternalTransferIssueQty);
        i++;
        arrayReal.value(i, _dailyTrans.TotalIssueQty);
        i++;
        arrayReal.value(i, _dailyTrans.PeriodEndQty);

        // adding to total array
        for (j = 1; j <= i; j++)
        {
            totalArray.value(j, totalArray.value(j) + arrayReal.value(j));
        }

        this.execute(Bodylinemovement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDaily</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows if the current child of <c>AlcoholDeclarationCalc_RU</c> class relates to the daily journal.
    /// </summary>
    /// <returns>
    ///    True.
    /// </returns>
    protected boolean isDaily()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>movementColQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the quantity of rows on the sheet with movement data.
    /// </summary>
    /// <returns>
    ///    Quantity of rows on the sheet with movement data.
    /// </returns>
    protected int movementColQty()
    {
        return 18;
    }

]]></Source>
			</Method>
			<Method>
				<Name>movementTextColQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the quantity of text columns on the sheet with movement data.
    /// </summary>
    /// <returns>
    ///    Quantity of text columns on the sheet with movement data.
    /// </returns>
    protected int movementTextColQty()
    {
        return 3;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns name of the working copy for report.
    /// </summary>
    /// <returns>
    ///    Name of the working copy for report.
    /// </returns>
    protected Filename templateName()
    {
        return resourceStr(AlcoholDeclarationOXMLDaily_RU);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>