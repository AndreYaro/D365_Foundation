<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmOutlookSyncSelectionForm_AX</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SysObsolete('Microsoft discontinued support for synchronizing contacts, appointments, and tasks between Dynamics 365 Supply Chain Management and Outlook.', false, 01\12\2023)]
class SmmOutlookSyncSelectionForm_AX extends smmOutlookSyncSelectionForm
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToMyContacts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the contacts to My Contacts.
    /// </summary>
    /// <returns>
    /// true if successful; otherwise, false.
    /// </returns>
    public boolean addToMyContacts()
    {
        smmContactPersonSynchronize smmContactPersonSynchronize;

        ttsbegin;

        // Traverse the contacts selected for synchronization
        while select contactsToBeSynchronized where contactsToBeSynchronized.SyncNoYes == NoYes::Yes
        {
            smmContactPersonSynchronize = smmContactPersonSynchronize::findContUser(contactsToBeSynchronized.ContactPersonId, curuserid(), true);
            if (smmContactPersonSynchronize.RecId != 0)
            {
                smmContactPersonSynchronize.Deleted = NoYes::No;
                smmContactPersonSynchronize.update();
            }
            else
            {
                // Create the contact in My Contacts
                smmContactPersonSynchronize.ContactPersonId = contactsToBeSynchronized.ContactPersonId;
                smmContactPersonSynchronize.UserId          = curuserid();
                smmContactPersonSynchronize.Worker          = smmUtility::getCurrentContactWorker();
                smmContactPersonSynchronize.EntryId         = contactsToBeSynchronized.EntryID;
                smmContactPersonSynchronize.OutlookSyncType = contactsToBeSynchronized.OutlookSyncType;

                smmContactPersonSynchronize.insert();
                // Create field mapping table
                smmContactPersonSynchronizeFieldMapping::createFieldMapping(smmContactPersonSynchronize.UserId, smmContactPersonSynchronize.ContactPersonId);
            }
        }

        ttscommit;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchContacts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the contacts.
    /// </summary>
    /// <param name="_prompt">
    /// A Boolean value that specifies whether to prompt.
    /// </param>
    /// <returns>
    /// A set of contacts.
    /// </returns>
    public smmTmpOutlookContacts fetchContacts(boolean _prompt = false)
    {
        Query                       q = new Query(querystr(dirPartyContacts));
        QueryRun                    qr;
        DirPerson                   person;
        DirPersonName               personName;
        ContactPerson               contact;
        smmContactPersonSynchronize smmContactPersonSynchronize;
        smmOutlookSyncPrinciple     syncPrinciple;
        smmOutlookSyncType          defaultSyncType;
        OutlookSyncParameters       outlookSyncParameters = OutlookSyncParameters::find();
        SysOperationProgress        progress;
        Counter                     totalRecords, counter, percentComplete;

        contactsToBeSynchronized.clear();

        // Find Outlook synchronization principle from parameters
        syncPrinciple   = outlookSyncParameters.OutlookSyncPrinciple;

        // Find Outlook default synchronization type from parameters
        defaultSyncType = outlookSyncParameters.OutlookDefaultSyncPrinciple;

        qr = new QueryRun(q);
        totalRecords = SysQuery::countTotal(qr);
        progress = SysOperationProgress::newGeneral(#aviUpdate, '', totalRecords);

        // If a contact range was specified, don't show the query selection dialog
        if (!_prompt || (_prompt && qr.prompt()))
        {
            delete_from contactsToBeSynchronized;

            while (qr.next())
            {
                progress.incCount();

                contact = qr.get(tablenum(ContactPerson));
                person = qr.get(tablenum(DirPerson));
                personName = qr.get(tablenum(DirPersonName));
                smmContactPersonSynchronize = qr.get(tablenum(smmContactPersonSynchronize));

                // Only add contact if it wasn't synchronized before by the current employee
                if (!smmContactPersonSynchronize || (smmContactPersonSynchronize && smmContactPersonSynchronize.UserId != curuserid()))
                {
                    percentComplete = real2int((counter/totalRecords)*100);
                    progress.setText(strfmt("@SYS325263", percentComplete));

                    // Is it only the main responsible that for edit synchronize contacts
                    if (syncPrinciple == smmOutlookSyncPrinciple::MainReponsibleMaster)
                    {
                        if (contact.MainResponsibleWorker == smmUtility::getCurrentContactWorker())
                        {
                            // Use default synchronization type from the parameters
                            contactsToBeSynchronized.OutlookSyncType = defaultSyncType;
                        }
                        else
                        {
                            // Only allow contact to be view synchronized
                            contactsToBeSynchronized.OutlookSyncType = smmOutlookSyncType::ViewContact;
                        }
                    }
                    else
                    {
                        // Use default synchronization type from the parameters
                        contactsToBeSynchronized.OutlookSyncType = defaultSyncType;
                    }

                    // Is contact already edit synchronized by another user
                    if (smmContactPersonSynchronize::isAlreadyEditSynchedBy(contact.ContactPersonId))
                    {
                        // Only allow contact to be view synchronized
                        contactsToBeSynchronized.OutlookSyncType = smmOutlookSyncType::ViewContact;
                    }

                    // If a contact range is specified the contact should be marked for synchronization
                    //if (_contactPersonIdRange || _partyIdRelationRange)
                    //{
                    //    contactsToBeSynchronized.SyncNoYes = NoYes::Yes;
                    //}

                    contactsToBeSynchronized.SelectFrom             = this.getSelectFrom();
                    contactsToBeSynchronized.ContactForParty        = contact.ContactForParty;
                    contactsToBeSynchronized.ContactPersonId        = contact.ContactPersonId;
                    contactsToBeSynchronized.ContactPersonFirstName = personName.FirstName;
                    contactsToBeSynchronized.ContactPersonLastName  = personName.LastName;
                    contactsToBeSynchronized.EntryID                = smmContactPersonSynchronize.EntryId;
                    contactsToBeSynchronized.LastEditAxDateTime     = contact.LastEditAxDateTime;
                    contactsToBeSynchronized.LastModOutlookDateTime = smmContactPersonSynchronize.LastSyncAxDateTime;

                    contactsToBeSynchronized.insert();
                }
            }
        }

        return contactsToBeSynchronized;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMainInstructionTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the instruction text.
    /// </summary>
    /// <returns>
    /// A string of text.
    /// </returns>
    public str getMainInstructionTxt()
    {
        return "@SYS325250";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectButtonTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the select button text.
    /// </summary>
    /// <returns>
    /// A string of text.
    /// </returns>
    public str getSelectButtonTxt()
    {
        return "@SYS88809";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the select form.
    /// </summary>
    /// <returns>
    /// An Outlook form.
    /// </returns>
    public smmOutlookSyncSelectFrom getSelectFrom()
    {
        return smmOutlookSyncSelectFrom::AX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSupplementalInstructionTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the instruction text.
    /// </summary>
    /// <returns>
    /// The string of text.
    /// </returns>
    public str getSupplementalInstructionTxt()
    {
        return "@SYS325251";
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructor for smmOutlookSyncSelectionForm_Outlook class.
    /// </summary>
    /// <returns>
    /// Instance of smmOutlookSyncSelectionForm_Outlook object
    /// </returns>
    public static smmOutlookSyncSelectionForm_AX construct()
    {
        if (smmOutlookSyncDeprecationHandler::isOutlookSyncDisabled())
        {
            smmOutlookSyncDeprecationHandler::logSyncSkipMessageToTelemetry();
            throw error(strFmt("@SYS19306",funcName()));
        }

        smmOutlookSyncDeprecationHandler::showDeprecationMessage();

        smmOutlookSyncSelectionForm_AX syncSelection = new smmOutlookSyncSelectionForm_AX();

        return syncSelection;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>