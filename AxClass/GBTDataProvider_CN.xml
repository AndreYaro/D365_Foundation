<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GBTDataProvider_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>GBTDataProvider_CN</c> class provides data for GBT generating xml.
/// </summary>
/// <remarks>
/// This is base class of GBT data provider class.
/// </remarks>
class GBTDataProvider_CN
{
    Map                             dataMethodMap;
    container                       fiscalCalendarPeriodCon;
    container                       fiscalPeriodRecIdCon;
    FiscalCalendarPeriod            fiscalCalendarPeriod;
    FiscalCalendarPeriod            startFiscalCalendarPeriod;
    FiscalCalendarPeriod            endFiscalCalendarPeriod;
    GBTDataElementTypeInfo_CN       elementTypeInfoHelper;
    FiscalYearName                  fiscalYearName;

    System.Data.DataRowCollection   drc;
    System.Data.DataRow             newRow;
    GBTParameters_CN                GBTParameters;
    CurrencyName                    companyCurrencyName;

    #LedgerGBT_CN
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createDataMethodMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates all fill data table method map by attribute.
    /// </summary>
    /// <returns>
    /// A Map object that contains all fill table table method.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected map createDataMethodMap()
    {
        DictClass   dictClass;
        DictMethod  dictMethod;
        int         i;
        int         methodCount;

        Map         map = new Map(Types::String, Types::String);

        GBTDataFillTargetTable_CNAttribute  attribute;

        dictClass = new DictClass(classIdGet(this));
        methodCount = dictClass.objectMethodCnt();

        for (i = 1; i <= methodCount; i++)
        {
            dictMethod = dictClass.objectMethodObject(i);
            attribute = dictMethod.getAttribute(classStr(GBTDataFillTargetTable_CNAttribute));
            if (attribute
                && dictMethod.parameterCnt() == #OnlyOneParameter
                && dictMethod.clrParameterType(#FirstParameter) == #RequiredCLRType)
            {
                map.insert(attribute.parmTableName(), dictMethod.name());
            }
        }

        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fill</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls fill data method to fill the data set.
    /// </summary>
    /// <param name="_data">
    /// A <c>GBTDataStructure_CN</c> calss object that contains data sets and data elements type info.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void fill(GBTDataStructure_CN _data)
    {
        System.Data.DataSet                 ds;
        System.Data.DataTableCollection     dtc;
        System.Data.DataTable               dt;

        int     i;
        int     tablesCount;

        if (_data == null || _data.parmDataSet() == null)
        {
            return;
        }

        this.parmElementTypeInfoHelper(_data.parmDataElementTypeInfo());

        ds = _data.parmDataSet();

        dtc = ds.get_Tables();
        tablesCount = dtc.get_Count();

        for (i = 0; i < tablesCount; i++)
        {
            dt = dtc.get_Item(i);
            this.fillDataTable(dt);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDataTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls actual fill data method in data provider class to fill data set.
    /// </summary>
    /// <param name="_dt">
    /// A data table object that will be filled by data.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillDataTable(System.Data.DataTable _dt)
    {
        TableName   tableName;
        MethodName  methodName;

        DictMethod  dictMethod;
        DictClass   dictClass;

        ExecutePermission   executePermission;

        if (_dt == null)
        {
            return;
        }

        tableName = _dt.get_TableName();
        if (dataMethodMap.exists(tableName))
        {
            methodName = dataMethodMap.lookup(tableName);
        }
        else
        {
            Debug::assert(false);
            return;
        }

        dictClass = new DictClass(classIdGet(this));
        dictMethod = new DictMethod(UtilElementType::ClassInstanceMethod, classIdGet(this), methodName);

        executePermission = new ExecutePermission();
        executePermission.assert();

        dictClass.callObject(methodName, this, _dt);

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDebitCreditSymbol</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the value of enum <c>DebCredProposal</c> to specified string that will be used by GBT generating xml.
    /// </summary>
    /// <param name="_mainAccount">
    /// The <c>MainAccouny</c> record.
    /// </param>
    /// <returns>
    /// The specified string that will be used by GBT generating xml.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str getDebitCreditSymbol(MainAccount _mainAccount)
    {
        str debCredForGBT;

        switch (_mainAccount.DebitCreditProposal)
        {
            case DebCredProposal::Debit:
                debCredForGBT = #Debit;
                break;

            case DebCredProposal::Credit:
                debCredForGBT = #Credit;
                break;

            default:
                switch (this.getMainAccountType(_mainAccount))
                {
                    case DimensionLedgerAccountType::Asset:
                    case DimensionLedgerAccountType::ProfitAndLoss:
                    case DimensionLedgerAccountType::BalanceSheet:
                    case DimensionLedgerAccountType::Expense:
                    case DimensionLedgerAccountType::Common_CN:
                        debCredForGBT = #Debit;
                        break;

                    case DimensionLedgerAccountType::Revenue:
                    case DimensionLedgerAccountType::Liability:
                    case DimensionLedgerAccountType::Equity:
                        debCredForGBT = #Credit;
                        break;

                    default:
                        debCredForGBT = '';
                        break;
                }
                break;
        }

        return debCredForGBT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Coverts an exchange rate for GBT generating xml.
    /// </summary>
    /// <param name="_exchangeRate">
    /// An exchange rate that is stored in the database.
    /// </param>
    /// <returns>
    /// An exchange rate that can be used by GBT generating xml.
    /// </returns>
    /// <remarks>
    /// After users enter exchange rates, they are multiplied by 100 and divided by the exchange rate
    /// display factor specified on the <c>ExchangeRateCurrencyPair</c> table, before they are finally
    /// stored in the database. This method applies the factor ExchangeRateDisplayFactor::One to rates
    /// that have been stored in this manner so that they can be correctly in the GBT generating xml.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CurrencyExchangeRate getExchangeRate(CurrencyExchangeRate _exchangeRate)
    {
        return CurrencyEuroDenomination::displayStoredExchangeRate_Static(_exchangeRate, ExchangeRateDisplayFactor::One);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalCalendarPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Coverts the Fiscal Calendar for GBT generating xml.
    /// </summary>
    /// <param name="_fiscalCalendarYear">
    /// The Fiscal calendar period stored in the database.
    /// </param>
    /// <param name="_date">
    /// The date stored in the database.
    /// </param>
    /// <returns>
    /// The Fiscal calendar period that can be used by GBT generating xml.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FiscalCalendarPeriod getFiscalCalendarPeriod(
        RefRecId    _fiscalCalendarYear,
        TransDate   _date)
    {
        FiscalCalendarPeriod    fiscalCalendarPeriodLocal;

        select firstOnly Name from  fiscalCalendarPeriodLocal
            where fiscalCalendarPeriodLocal.FiscalCalendarYear == _fiscalCalendarYear
                && fiscalCalendarPeriodLocal.StartDate         <= _date
                && fiscalCalendarPeriodLocal.EndDate           >= _date;

        return fiscalCalendarPeriodLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMainAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the main account type.
    /// </summary>
    /// <param name="_mainAccount">
    /// The <c>MainAccouny</c> record.
    /// </param>
    /// <returns>
    /// The main account type.
    /// </returns>
    /// <remarks>
    /// In the GBT generating xml, when the type of the main account is total, will take the type of its child whose type
    /// isn't total as his type.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public DimensionLedgerAccountType getMainAccountType(MainAccount _mainAccount)
    {
        MainAccount                 mainAccountLocal;
        DimensionLedgerAccountType  mainAccountType;

        if (_mainAccount.Type == DimensionLedgerAccountType::Total)
        {
            select firstOnly Type from mainAccountLocal
                order by mainAccountLocal.MainAccountId
                where mainAccountLocal.LedgerChartOfAccounts == _mainAccount.LedgerChartOfAccounts
                    && mainAccountLocal.MainAccountId != _mainAccount.MainAccountId
                    && mainAccountLocal.MainAccountId like _mainAccount.MainAccountId + #Star
                    && mainAccountLocal.Type != DimensionLedgerAccountType::Total;

            mainAccountType = mainAccountLocal.Type;
        }
        else
        {
            mainAccountType = _mainAccount.Type;
        }

        return mainAccountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the instance of the <c>GBTDataProvider_CN</c> class.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void init()
    {
        FiscalCalendarPeriod    tmpFiscalCalendarPeriod;

        dataMethodMap = this.createDataMethodMap();
        GBTParameters = GBTParameters_CN::find();

        startFiscalCalendarPeriod = FiscalCalendarPeriod::find(conPeek(fiscalCalendarPeriodCon, 1));
        endFiscalCalendarPeriod = FiscalCalendarPeriod::find(conPeek(fiscalCalendarPeriodCon, 2));
        fiscalCalendarPeriod = FiscalCalendarPeriod::find(conPeek(fiscalCalendarPeriodCon, 3));

        companyCurrencyName = Currency::find(Ledger::accountingCurrency()).Txt;
        fiscalYearName      = int2str(year(startFiscalCalendarPeriod.StartDate));

        while select RecId from tmpFiscalCalendarPeriod
            where tmpFiscalCalendarPeriod.StartDate >= startFiscalCalendarPeriod.StartDate
                && tmpFiscalCalendarPeriod.EndDate  <= endFiscalCalendarPeriod.EndDate
                && tmpFiscalCalendarPeriod.Type     == FiscalPeriodType::Operating
                && tmpFiscalCalendarPeriod.FiscalCalendarYear == startFiscalCalendarPeriod.FiscalCalendarYear
        {
            fiscalPeriodRecIdCon += tmpFiscalCalendarPeriod.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmElementTypeInfoHelper</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public GBTDataElementTypeInfo_CN parmElementTypeInfoHelper(GBTDataElementTypeInfo_CN _elementTypeInfoHelper = elementTypeInfoHelper)
    {
        elementTypeInfoHelper = _elementTypeInfoHelper;

        return elementTypeInfoHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmfiscalCalenderPeriod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container parmfiscalCalenderPeriod(container _fiscalCalendarPeriodCon = fiscalCalendarPeriodCon)
    {
        fiscalCalendarPeriodCon = _fiscalCalendarPeriodCon;

        return fiscalCalendarPeriodCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets value for specific data row and data column of data set.
    /// </summary>
    /// <param name="_dr">
    /// The data row of data set which will be set value.
    /// </param>
    /// <param name="_dcName">
    /// The data column name which will be set value.
    /// </param>
    /// <param name="_value">
    /// The value which will be used for setting to the specific data set field.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setValue(
        System.Data.DataRow     _dr,
        Name                    _dcName,
        anytype                 _value)
    {
        str     dataTableName;
        System.Data.DataTable dt;

        if (_dr != null)
        {
            dt = _dr.get_Table();
            dataTableName = dt.get_TableName();
            _dr.set_Item(_dcName, elementTypeInfoHelper.format(dataTableName, _dcName, _value));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the instance of the <c>GBTDataProvider_CN</c> class.
    /// </summary>
    /// <param name="_xmlCategory">
    /// The gbt xml category.
    /// </param>
    /// <param name="_fiscalCalenderPeriodRecidCon">
    /// The fiscal calender period RecId container.
    /// </param>
    /// <returns>
    /// The instance of the <c>GBTDataProvider_CN</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static GBTDataProvider_CN construct(
        GBTXmlCategory_CN       _xmlCategory,
        container               _fiscalCalenderPeriodRecidCon)
    {
        GBTDataProvider_CN  dataProvider;

        switch (_xmlCategory)
        {
            case GBTXmlCategory_CN::Common:
                dataProvider = new GBTDataProvider_Common_CN();
                break;
            case GBTXmlCategory_CN::ARAP:
                dataProvider = new GBTDataProvider_ARAP_CN();
                break;
            case GBTXmlCategory_CN::FA:
                dataProvider = new GBTDataProvider_FA_CN();
                break;
            case GBTXmlCategory_CN::GL:
                dataProvider = new GBTDataProvider_GL_CN();
                break;
        }

        dataProvider.parmfiscalCalenderPeriod(_fiscalCalenderPeriodRecidCon);
        dataProvider.init();

        return dataProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateGBTDataStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates gbt data structure.
    /// </summary>
    /// <param name="_category">
    /// The gbt xml category.
    /// </param>
    /// <param name="_fiscalCalendarPeriodRecIdCon">
    /// The fiscal calendar period rec id container.
    /// </param>
    /// <returns>
    /// The instance of the <c>GBTDataStructure_CN</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static GBTDataStructure_CN generateGBTDataStructure(
        GBTXmlCategory_CN       _category,
        Container                _fiscalCalendarPeriodRecIdCon)
    {
        GBTDataStructure_CN GBTDataStructure = new GBTDataStructure_CN();

        GBTDataStructure.unpack(GBTDataProvider_CN::genererateGBTDataOnServer(_category, _fiscalCalendarPeriodRecIdCon));

        return GBTDataStructure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>genererateGBTDataOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates corresponding GBT data by parameters.
    /// </summary>
    /// <param name="_category">
    /// The GBT xml category.
    /// </param>
    /// <param name="_fiscalCalendarPeriodRecIdCon">
    /// The RecID of <c>FiscalCalendarPeriod</c> table container.
    /// </param>
    /// <returns>
    /// The XML string that will be passed back to client to generate final xml file.
    /// </returns>
    /// <remarks>
    /// This method run on server, generates dataset from schema, fill dataset and seriable the dataset to xml string then pass back to client.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static container genererateGBTDataOnServer(
        GBTXmlCategory_CN       _category,
        container               _fiscalCalendarPeriodRecIdCon)
    {
        #File
        GBTXMLProcessing_CN             GBTXMLProcessing;
        GBTDataStructure_CN             GBTDataStructure;
        GBTDataProvider_CN              GBTDataProvider;

        GBTXMLProcessing = new GBTXMLProcessing_CN();
        GBTXMLProcessing.init();

        // Generates dataset from schema
        GBTDataStructure = GBTXMLProcessing.generateDataStructure(_category);

         // Fills dataset
        GBTDataProvider = GBTDataProvider_CN::construct(_category, _fiscalCalendarPeriodRecIdCon);
        GBTDataProvider.fill(GBTDataStructure);

        return GBTDataStructure.pack();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>