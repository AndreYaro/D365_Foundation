<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlGroupManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetControlGroupManager</c> class manages the budget control groups.
/// </summary>
public class BudgetControlGroupManager
{
    DimensionExpressionCriteriaCollection expressionCriteriaCollection;

    RecId groupMemberId;

    BudgetGroupMemberName   name;
    Description             description;
    RefRecId                budgetCycleTimeSpanRecId;
    BudgetResponsibleUser   budgetResponsibleUser;
    BudgetInterval          budgetInterval;
    BudgetThresholdPercent  budgetThresholdPercent;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearAllCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes all the criteria items.
    /// </summary>
    public void clearAllCriteria()
    {
        expressionCriteriaCollection = DimensionExpressionCriteriaCollection::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addExpressionCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the criteria expression to the group.
    /// </summary>
    /// <param name="_expressionCriteria">
    ///    The <c>DimensionExpressionCriteria</c> object to add.
    /// </param>
    public void addExpressionCriteria(DimensionExpressionCriteria _expressionCriteria)
    {
        // Remove any existing criteria as only one expression can be defined per dimension attribute.
        expressionCriteriaCollection.removeCriteriaForAttribute(_expressionCriteria.parmDimensionAttributeId());

        expressionCriteriaCollection.addExpressionCriteria(_expressionCriteria);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExpressionCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the criteria for the specified dimension attribute.
    /// </summary>
    /// <param name = "_dimensionAttributeRecId">
    ///    The dimension attribute ID for which to get the criteria.
    /// </param>
    /// <returns>
    ///    The criteria for the dimension attribute if it has been entered; otherwise, the default all values allowed criteria.
    /// </returns>
    protected DimensionExpressionCriteria getExpressionCriteria(DimensionAttributeRecId _dimensionAttributeRecId)
    {
        DimensionExpressionCriteria expressionCriteria;

        expressionCriteriaCollection.initializeEnumerator();

        while (expressionCriteriaCollection.moveNext())
        {
            if (expressionCriteriaCollection.current().parmDimensionAttributeId() == _dimensionAttributeRecId)
            {
                expressionCriteria = expressionCriteriaCollection.current();
                break;
            }
        }

        if (!expressionCriteria)
        {
            expressionCriteria = DimensionExpressionCriteria::newForDimensionExpression(
                _dimensionAttributeRecId,
                DimensionCriteriaOperators::WildcardSQL,
                '',
                '',
                false,
                false);
        }

        return expressionCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionExpressionCriteria</Name>
				<Source><![CDATA[
    internal DimensionExpressionCriteria getDimensionExpressionCriteria(DimensionAttributeRecId _dimensionAttributeRecid)
    {
        return this.getExpressionCriteria(_dimensionAttributeRecid);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeExpressionCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes the criteria for the specified dimension attribute.
    /// </summary>
    /// <param name = "_dimensionAttributeRecId">
    ///    The dimension attribute ID for which to remove the criteria.
    /// </param>
    public void removeExpressionCriteria(DimensionAttributeRecId _dimensionAttributeRecId)
    {
        expressionCriteriaCollection.removeCriteriaForAttribute(_dimensionAttributeRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGroupMemberId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the record ID of the <c>BudgetGroupMember</c> record.
    /// </summary>
    /// <returns>
    ///    The record ID of the <c>BudgetGroupMember</c> record.
    /// </returns>
    public recId getGroupMemberId()
    {
        return groupMemberId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>BudgetControlGroupManager</c> class.
    /// </summary>
    /// <param name="_groupMemberRecId">
    ///    The record ID of the <c>BudgetGroupMember</c> record.
    /// </param>
    protected void initialize(RecId _groupMemberRecId)
    {
        BudgetGroupMember groupMember = BudgetGroupMember::find(_groupMemberRecId);
        BudgetGroup budgetGroup = BudgetGroup::find(groupMember.BudgetGroup);

        name = groupMember.Name;
        description = groupMember.Description;
        groupMemberId = groupMember.RecId;

        budgetCycleTimeSpanRecId = budgetGroup.BudgetCycleTimeSpan;
        budgetResponsibleUser = budgetGroup.OverrideResponsibleUser;
        budgetInterval = budgetGroup.Interval;
        budgetThresholdPercent  = budgetGroup.ThresholdPercent;

        this.initializeExpressionCriteriaCollection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeExpressionCriteriaCollection</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>DimensionExpressionCriteriaCollection</c> object for the budget control group.
    /// </summary>
    public void initializeExpressionCriteriaCollection()
    {
        BudgetGroupMemberCriteria               groupMemberCriteria;
        BudgetControlDimensionAttribute         controlDimensionAttribute;
        BudgetPrimaryLedgerDimensionAttribute   budgetDimensionAttribute;
        DimensionAttribute                      dimensionAttribute;

        expressionCriteriaCollection = DimensionExpressionCriteriaCollection::construct();

        while select * from groupMemberCriteria
            where groupMemberCriteria.BudgetGroupMember == groupMemberId
            join RecId from controlDimensionAttribute
                order by controlDimensionAttribute.Ordinal
                where controlDimensionAttribute.RecId == groupMemberCriteria.BudgetControlDimensionAttribute
            join RecId from budgetDimensionAttribute
                where budgetDimensionAttribute.RecId == controlDimensionAttribute.BudgetPrimaryLedgerDimensionAttribute
            join RecId from dimensionAttribute
                where dimensionAttribute.RecId == budgetDimensionAttribute.DimensionAttribute
        {
            expressionCriteriaCollection.addExpressionCriteria(
                DimensionExpressionCriteria::newForDimensionExpression(
                    dimensionAttribute.RecId,
                    groupMemberCriteria.WildCardString,
                    groupMemberCriteria.RangeFrom,
                    groupMemberCriteria.RangeTo,
                    groupMemberCriteria.IsFromOpen,
                    groupMemberCriteria.IsToOpen));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetCycleTimeSpan</Name>
				<Source><![CDATA[
    public RefRecId parmBudgetCycleTimeSpan(RefRecId _budgetCycleTimeSpanRecId = budgetCycleTimeSpanRecId)
    {
        budgetCycleTimeSpanRecId = _budgetCycleTimeSpanRecId;

        return budgetCycleTimeSpanRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetInterval</Name>
				<Source><![CDATA[
    public BudgetInterval parmBudgetInterval(BudgetInterval _budgetInterval = budgetInterval)
    {
        budgetInterval = _budgetInterval;

        return budgetInterval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetResponsibleUser</Name>
				<Source><![CDATA[
    public BudgetResponsibleUser parmBudgetResponsibleUser(BudgetResponsibleUser _budgetResponsibleUser = budgetResponsibleUser)
    {
        budgetResponsibleUser = _budgetResponsibleUser;

        return budgetResponsibleUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetThresholdPercent</Name>
				<Source><![CDATA[
    public BudgetThresholdPercent parmBudgetThresholdPercent(BudgetThresholdPercent _budgetThresholdPercent = budgetThresholdPercent)
    {
        budgetThresholdPercent = _budgetThresholdPercent;

        return budgetThresholdPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDescription</Name>
				<Source><![CDATA[
    public Description parmDescription(Description _description = description)
    {
        description = _description;

        return description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmName</Name>
				<Source><![CDATA[
    public BudgetGroupMemberName parmName(BudgetGroupMemberName _name = name)
    {
        name = _name;

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExpressionCriteriaCollection</Name>
				<Source><![CDATA[
    public DimensionExpressionCriteriaCollection parmExpressionCriteriaCollection(
        DimensionExpressionCriteriaCollection _expressionCriteriaCollection = expressionCriteriaCollection)
    {
        expressionCriteriaCollection = _expressionCriteriaCollection;
        return expressionCriteriaCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>save</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the budget group member.
    /// </summary>
    /// <remarks>
    ///    The <c>BudgetGroupMember</c> and <c>BudgetGroupMemberCriteria</c> tables are affected by this
    ///    method.
    /// </remarks>
    public void save()
    {
        if (!BudgetGroupMember::exist(groupMemberId))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        ttsbegin;

        BudgetGroupMember groupMember = BudgetGroupMember::find(groupMemberId, true);
        BudgetGroup budgetGroup = BudgetGroup::find(groupMember.BudgetGroup, true);

        // Update the group.
        budgetGroup.Interval = this.parmBudgetInterval();
        budgetGroup.BudgetCycleTimeSpan = this.parmBudgetCycleTimeSpan();
        budgetGroup.OverrideResponsibleUser = this.parmBudgetResponsibleUser();
        budgetGroup.ThresholdPercent = this.parmBudgetThresholdPercent();
        budgetGroup.update();

        // Update the group member.
        groupMember.Name = this.parmName();
        groupMember.Description = this.parmDescription();
        groupMember.update();

        // Update the budget group member criteria.
        BudgetGroupMemberCriteria groupMemberCriteria;
        BudgetControlDimensionAttribute controlDimensionAttribute;
        BudgetPrimaryLedgerDimensionAttribute budgetDimensionAttribute;

        delete_from groupMemberCriteria
            where groupMemberCriteria.BudgetGroupMember == groupMemberId;

        // Insert the budget group member criteria records.
        groupMemberCriteria.BudgetGroupMember = groupMemberId;

        expressionCriteriaCollection.initializeEnumerator();

        while (expressionCriteriaCollection.moveNext())
        {
            DimensionExpressionCriteria expressionCriteria = expressionCriteriaCollection.current();

            // Get the budget control dimension attribute for the criteria.
            select firstonly RecId from controlDimensionAttribute
                where controlDimensionAttribute.BudgetControlConfiguration == budgetGroup.BudgetControlConfiguration
                exists join budgetDimensionAttribute
                    where budgetDimensionAttribute.RecId == controlDimensionAttribute.BudgetPrimaryLedgerDimensionAttribute
                        && budgetDimensionAttribute.DimensionAttribute == expressionCriteria.parmDimensionAttributeId();

            groupMemberCriteria.BudgetControlDimensionAttribute = controlDimensionAttribute.RecId;
            groupMemberCriteria.RangeFrom = expressionCriteria.parmRangeFromValue();
            groupMemberCriteria.RangeTo = expressionCriteria.parmRangeToValue();
            groupMemberCriteria.WildCardString = expressionCriteria.parmWildcardValue();
            groupMemberCriteria.IsFromOpen = expressionCriteria.parmIsRangeFromValueExcluded();
            groupMemberCriteria.IsToOpen = expressionCriteria.parmIsRangeToValueExcluded();

            groupMemberCriteria.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>BudgetGroupMember</c> record is valid.
    /// </summary>
    /// <param name="_doValidateCriteria">
    ///    A Boolean value indicating whether to validate the criteria; optional.
    /// </param>
    /// <returns>
    ///    true if the <c>BudgetGroupMember</c> record is valid; otherwise, false.
    /// </returns>
    public boolean validate(boolean _doValidateCriteria = true)
    {
        // Validate that the configuration is editable.
        boolean isValid = this.validateConfigurationEditPermitted();

        if (isValid)
        {
            // Validate that the name is unique.
            isValid = this.validateName();

            // Validate that the required fields are set.
            if (this.parmBudgetInterval() == 0)
            {
                isValid = checkFailed("@SYS315199");
            }

            if ( this.parmBudgetCycleTimeSpan() == 0)
            {
                isValid = checkFailed("@SYS315242");
            }

            if (_doValidateCriteria)
            {
                // Validate the criteria.
                isValid = this.validateCriteria() && isValid;
            }

            // Validate override responsible user
            isValid = this.validateOverrideResponsibleUser() && isValid;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateConfigurationEditPermitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the edit of the budget control configuration is permitted.
    /// </summary>
    /// <returns>
    ///    true if the edit of the budget control configuration is permitted; otherwise, false.
    /// </returns>
    private boolean validateConfigurationEditPermitted()
    {
        BudgetGroupMember budgetGroupMember = BudgetGroupMember::find(groupMemberId);
        BudgetGroup budgetGroup = BudgetGroup::find(budgetGroupMember.BudgetGroup);

        boolean isValid = BudgetControlConfigurationManager::validateConfigurationEditPermitted(budgetGroup.BudgetControlConfiguration);

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the criteria is valid.
    /// </summary>
    /// <returns>
    ///    true if the criteria is valid; otherwise, false.
    /// </returns>
    protected boolean validateCriteria()
    {
        boolean isValid = true;
        boolean isCriteriaIntersecting;

        DimensionExpressionCriteria existingCriteria;
        DimensionExpressionCriteria givenCriteria;

        DimensionAttribute dimensionAttribute;
        BudgetControlDimensionAttribute controlDimensionAttribute;
        BudgetPrimaryLedgerDimensionAttribute budgetDimensionAttribute;

        BudgetGroup existingBudgetGroup;
        BudgetGroupMember existingGroupMember;
        BudgetGroupMemberCriteria existingGroupMemberCriteria;

        BudgetGroupMember groupMember = BudgetGroupMember::find(groupMemberId);
        BudgetGroup budgetGroup = BudgetGroup::find(groupMember.BudgetGroup);

        while select RecId from existingGroupMember
            where existingGroupMember.RecId != groupMember.RecId
            exists join RecId from existingBudgetGroup
                where existingBudgetGroup.RecId == existingGroupMember.BudgetGroup
                    && existingBudgetGroup.BudgetControlConfiguration == budgetGroup.BudgetControlConfiguration
        {
            // Verify that for each existing group member the set of criteria does not intersect.
            while select Ordinal, RecId from controlDimensionAttribute
                order by Ordinal
                where controlDimensionAttribute.BudgetControlConfiguration == budgetGroup.BudgetControlConfiguration
                join RecId from budgetDimensionAttribute
                    where budgetDimensionAttribute.RecId == controlDimensionAttribute.BudgetPrimaryLedgerDimensionAttribute
                join RecId from dimensionAttribute
                    where dimensionAttribute.RecId == budgetDimensionAttribute.DimensionAttribute
            {
                // Get the criteria for the dimension attribute in the order that is defined by the configuration.
                // If it is not defined it is treated as a wildcard.
                givenCriteria = this.getExpressionCriteria(dimensionAttribute.RecId);

                // Get the existing group member criteria for the dimension attribute.
                select firstonly existingGroupMemberCriteria
                    where existingGroupMemberCriteria.BudgetGroupMember == existingGroupMember.RecId
                        && existingGroupMemberCriteria.BudgetControlDimensionAttribute == controlDimensionAttribute.RecId;

                if (existingGroupMemberCriteria)
                {
                    // The criteria for the dimension attribute is defined for the existing group member.
                    // Get the existing criteria.
                    existingCriteria = DimensionExpressionCriteria::newForDimensionExpression(
                        dimensionAttribute.RecId,
                        existingGroupMemberCriteria.WildCardString,
                        existingGroupMemberCriteria.RangeFrom,
                        existingGroupMemberCriteria.RangeTo,
                        existingGroupMemberCriteria.IsFromOpen,
                        existingGroupMemberCriteria.IsToOpen);
                }
                else
                {
                    // The criteria for the dimension attribute is not defined for the existing group member.
                    // Treat the existing criteria as a wildcard.
                    existingCriteria = DimensionExpressionCriteria::newForDimensionExpression(
                        dimensionAttribute.RecId,
                        DimensionCriteriaOperators::WildcardSQL,
                        '',
                        '',
                        false,
                        false);
                }

                isCriteriaIntersecting = DimensionExpressionCriteriaCollection::isExpressionCriteriaIntersecting(existingCriteria, givenCriteria);

                if (!isCriteriaIntersecting)
                {
                    // If any dimension attribute does not intersect then the criteria does not intersect.
                    break;
                }
            }

            if (isCriteriaIntersecting)
            {
                // The set of group member criteria intersects with an existing set of group member criteria.
                break;
            }
        }

        if (isCriteriaIntersecting)
        {
            isValid = checkFailed(strfmt("@Budget:BudgetControlGroupMemberCriteriaOverlap", groupMember.Name));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>Name</c> field of the <c>BudgetGroupMember</c> record is valid.
    /// </summary>
    /// <returns>
    ///    true if the <c>BudgetControlRule</c> record is valid; otherwise, false.
    /// </returns>
    private boolean validateName()
    {
        boolean isValid = true;

        BudgetGroupMember budgetGroupMember = BudgetGroupMember::find(groupMemberId);
        BudgetGroup budgetGroup = BudgetGroup::find(budgetGroupMember.BudgetGroup);

        BudgetGroup existingBudgetGroup;
        BudgetGroupMember existingBudgetGroupMember;

        select firstonly RecId from existingBudgetGroupMember
            where existingBudgetGroupMember.Name == this.parmName()
                && existingBudgetGroupMember.RecId != budgetGroupMember.RecId
            exists join existingBudgetGroup
                where existingBudgetGroup.RecId == existingBudgetGroupMember.BudgetGroup
                    && existingBudgetGroup.BudgetControlConfiguration == budgetGroup.BudgetControlConfiguration;

        if (existingBudgetGroupMember)
        {
            isValid = checkFailed(strfmt("@SYS321395", this.parmName()));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOverrideResponsibleUser</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the override responsible user is valid.
    /// </summary>
    /// <returns>
    ///    true when the override responsible user is valid; otherwise, false.
    /// </returns>
    private boolean validateOverrideResponsibleUser()
    {
        // Validate the unpersisted user.
        boolean isValid = BudgetControlConfigurationManager::validateResponsibleUserReference(this.parmBudgetResponsibleUser());

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupForRemovedParentBudgetGroupMember</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the <c>BudgetGroupMember</c> and <c>BudgetGroupMemberCriteria</c> records that no longer
    ///    reference a valid parent <c>BudgetGroupMember</c> record.
    /// </summary>
    /// <remarks>
    ///    This method will call itself to remove any records that become orphaned after the deletion.
    /// </remarks>
    private static void cleanupForRemovedParentBudgetGroupMember()
    {
        BudgetGroupMember parentGroupMember;
        BudgetGroupMember groupMember;
        BudgetGroupMemberCriteria groupMemberCriteria;

        // Delete the group member criteria records that no longer have a valid parent.
        delete_from groupMemberCriteria
            exists join groupMember
                where groupMember.RecId == groupMemberCriteria.BudgetGroupMember
                    && groupMember.ParentBudgetGroupMember != 0
            notexists join parentGroupMember
                where parentGroupMember.RecId == groupMember.ParentBudgetGroupMember;

        // Delete the group member records that no longer have a valid parent.
        delete_from groupMember
            where groupMember.ParentBudgetGroupMember != 0
            notexists join parentGroupMember
                where parentGroupMember.RecId == groupMember.ParentBudgetGroupMember;

        // Check if the deleted records caused further orphaned records.
        select firstonly groupMember
            where groupMember.ParentBudgetGroupMember != 0
            notexists join parentGroupMember
                where parentGroupMember.RecId == groupMember.ParentBudgetGroupMember;

        if (groupMember)
        {
            // Remove the newly orphaned records.
            BudgetControlGroupManager::cleanupForRemovedParentBudgetGroupMember();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs an instance of the <c>BudgetControlGroupManager</c> class.
    /// </summary>
    /// <param name="_groupMemberRecId">
    ///    The record ID of the <c>BudgetGroupMember</c> record.
    /// </param>
    /// <returns>
    ///    An instance of the <c>BudgetControlGroupManager</c> class.
    /// </returns>
    public static BudgetControlGroupManager construct(RecId _groupMemberRecId)
    {
        // Ensure group member exist.
        if (!BudgetGroupMember::exist(_groupMemberRecId))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        BudgetControlGroupManager groupManager = new BudgetControlGroupManager();
        groupManager.initialize(_groupMemberRecId);

        return groupManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetGroupMember</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>BudgetGroupMember</c> record.
    /// </summary>
    /// <param name="_controlConfigurationRecId">
    /// The record ID of the <c>BudgetControlConfiguration</c> record.
    /// </param>
    /// <param name="_groupRecId">
    /// The record ID of the <c>BudgetGroup</c> record.
    /// </param>
    /// <param name="_parentGroupMemberRecId">
    /// The record ID of the parent <c>BudgetGroupMember</c> record.
    /// </param>
    /// <param name="_name">
    /// The name of the <c>BudgetGroupMember</c>.
    /// </param>
    /// <param name="_description">
    /// The description of the <c>BudgetGroupMember</c>.
    /// </param>
    /// <returns>
    /// The <c>BudgetGroupMember</c> record; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    /// The <c>BudgetGroup</c> will be created if it does not exist.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// The <c>BudgetGroupMember</c> with the specified name already exists for the specified configuration and budget group.
    /// </exception>
    public static BudgetGroupMember createBudgetGroupMember(
        BudgetControlConfigurationRecId _controlConfigurationRecId,
        RecId _groupRecId,
        RecId _parentGroupMemberRecId,
        Name _name,
        Description _description)
    {
        BudgetGroupMember budgetGroupMember;
        BudgetGroup budgetGroup;

        // Validate input parameters.
        if (!BudgetControlConfiguration::exist(_controlConfigurationRecId) || !_name)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (BudgetControlGroupManager::validateNameForConfiguration(_name, _controlConfigurationRecId))
        {
            ttsbegin;

            if (!BudgetGroup::exist(_groupRecId))
            {
                BudgetControlConfiguration budgetControlConfiguration = BudgetControlConfiguration::find(_controlConfigurationRecId);

                budgetGroup.BudgetControlConfiguration = budgetControlConfiguration.RecId;
                budgetGroup.Ordinal = BudgetControlGroupManager::getNextGroupOrdinal(budgetControlConfiguration.RecId);
                budgetGroup.BudgetCycleTimeSpan = budgetControlConfiguration.DefaultBudgetCycleTimeSpan;
                budgetGroup.Interval = budgetControlConfiguration.DefaultInterval;
                budgetGroup.ThresholdPercent = budgetControlConfiguration.DefaultThresholdPercent;
                budgetGroup.OverrideResponsibleUser = budgetControlConfiguration.DefaultResponsibleUser;
                budgetGroup.insert();
            }
            else
            {
                budgetGroup = BudgetGroup::find(_groupRecId);
            }

            // Create the budget group member.
            budgetGroupMember.BudgetGroup = budgetGroup.RecId;
            budgetGroupMember.ParentBudgetGroupMember = _parentGroupMemberRecId;
            budgetGroupMember.Name = _name;
            budgetGroupMember.Description = _description;
            budgetGroupMember.insert();

            ttscommit;
        }

        return budgetGroupMember;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBudgetGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the <c>BudgetGroup</c> record and the associated <c>BudgetGroupMember</c> and
    ///    <c>BudgetGroupMemberCriteria</c> records.
    /// </summary>
    /// <param name="_budgetGroupRecId">
    ///    The record ID of the <c>BudgetGroup</c> record to delete.
    /// </param>
    public static void deleteBudgetGroup(RecId _budgetGroupRecId)
    {
        BudgetGroup budgetGroup = BudgetGroup::find(_budgetGroupRecId);
        BudgetControlConfiguration budgetControlConfiguration = BudgetControlConfiguration::find(budgetGroup.BudgetControlConfiguration);

        // Ensure the BudgetGroup is referencing a BudgetControlConfiguration with IsActive = false.
        if (!budgetGroup || budgetControlConfiguration.IsActive)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        ttsbegin;

        BudgetGroupMember budgetGroupMember;
        BudgetGroupMemberCriteria budgetGroupMemberCriteria;

        delete_from budgetGroupMemberCriteria
            exists join budgetGroupMember
                where budgetGroupMember.RecId == budgetGroupMemberCriteria.BudgetGroupMember
                    && budgetGroupMember.BudgetGroup == _budgetGroupRecId;

        delete_from budgetGroupMember
            where budgetGroupMember.BudgetGroup == _budgetGroupRecId;

        delete_from budgetGroup
            where budgetGroup.RecId == _budgetGroupRecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBudgetGroupMember</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the <c>BudgetGroupMember</c> record and the associated <c>BudgetGroupMemberCriteria</c>
    ///    records.
    /// </summary>
    /// <param name="_budgetGroupMemberRecId">
    ///    The record ID of the <c>BudgetGroupMember</c> record to delete.
    /// </param>
    /// <remarks>
    ///    The <c>BudgetGroup</c> record that is associated to the <c>BudgetGroupMember</c> record that is
    ///    being deleted will also be deleted if the <c>BudgetGroupMember</c> record is the last one that is
    ///    associated to the <c>BudgetGroup</c> record.
    /// </remarks>
    public static void deleteBudgetGroupMember(RecId _budgetGroupMemberRecId)
    {
        // Ensure the BudgetGroupMember exists.
        if (!BudgetGroupMember::exist(_budgetGroupMemberRecId))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        ttsbegin;

        // Get the budget group rec ID to check after the budget group member is deleted.
        RecId budgetGroupRecId = BudgetGroupMember::find(_budgetGroupMemberRecId).BudgetGroup;

        BudgetGroupMemberCriteria budgetGroupMemberCriteria;

        delete_from budgetGroupMemberCriteria
            where budgetGroupMemberCriteria.BudgetGroupMember == _budgetGroupMemberRecId;

        BudgetGroupMember budgetGroupMember;

        delete_from budgetGroupMember
            where budgetGroupMember.RecId == _budgetGroupMemberRecId;

        // Remove any orphaned budget group members.
        BudgetControlGroupManager::cleanupForRemovedParentBudgetGroupMember();

        // Check if the budget group has any remaining members.
        select firstonly RecId from budgetGroupMember
            where budgetGroupMember.BudgetGroup == budgetGroupRecId;

        if (budgetGroupMember.RecId == 0)
        {
            // Remove the budget group as it has no more members.
            BudgetGroup budgetGroup;

            delete_from budgetGroup
                where budgetGroup.RecId == budgetGroupRecId;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBudgetGroupMemberForInUseChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>BudgetGroupMember</c> record for the specified budget control configuration that was
    /// temporarily committed as part of the new budget group member setup process.
    /// </summary>
    /// <param name="_controlConfigurationRecId">
    /// The record ID of the <c>BudgetControlConfiguration</c> record for which to delete the
    /// <c>BudgetGroupMember</c> record.
    /// </param>
    /// <remarks>
    /// This method is intended to be called when the use by user changes on the budget control
    /// configuration from one user to another to make sure that invalid budget group members are not
    /// opened by the user who took control of the configuration from the user who was setting up the new
    /// budget group member.
    /// </remarks>
    public static void deleteBudgetGroupMemberForInUseChange(BudgetControlConfigurationRecId _controlConfigurationRecId)
    {
        // Validate input parameter.
        if (!_controlConfigurationRecId)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        BudgetControlConfiguration controlConfiguration = BudgetControlConfiguration::find(_controlConfigurationRecId);

        // Ensure the BudgetControlConfiguration exists and has IsActive = false.
        if (!controlConfiguration || controlConfiguration.IsActive)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        BudgetGroup budgetGroup;
        BudgetGroupMember budgetGroupMember;
        BudgetGroupMemberCriteria budgetGroupMemberCriteria;

        select count(RecId) from budgetGroupMember
            exists join budgetGroup
                where budgetGroup.RecId == budgetGroupMember.BudgetGroup
                    && budgetGroup.BudgetControlConfiguration == controlConfiguration.RecId;

        if (budgetGroupMember.RecId > 1)
        {
            // When there is more than one budget group member for the configuration there cannot be multiple rules
            // with no criteria defined.

            // Select the last budget group member that does not have criteria.
            select firstonly RecId from budgetGroupMember
                order by RecId desc
                exists join budgetGroup
                    where budgetGroup.RecId == budgetGroupMember.BudgetGroup
                        && budgetGroup.BudgetControlConfiguration == controlConfiguration.RecId
                notexists join budgetGroupMemberCriteria
                    where budgetGroupMemberCriteria.BudgetGroupMember == budgetGroupMember.RecId;

            if (budgetGroupMember)
            {
                // The last budget group member for the configuration has no criteria.
                // Based on how the BudgetControlConfiguration form budget group setup process utilizes the BudgetControlGroupExpressionController
                // class and this class, only one budget group member can have no criteria and it has to be the only one for the configuration.

                // Remove the budget group member as it was entered as part of the new budget group member setup process.
                BudgetControlGroupManager::deleteBudgetGroupMember(budgetGroupMember.RecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextGroupOrdinal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the next ordinal of the budget groups for the specified budget control configuration.
    /// </summary>
    /// <param name="_controlConfigurationRecId">
    ///    The record ID of the <c>BudgetControlConfiguration</c> record.
    /// </param>
    /// <returns>
    ///    The next budget group ordinal value.
    /// </returns>
    private static BudgetGroupOrdinal getNextGroupOrdinal(BudgetControlConfigurationRecId _controlConfigurationRecId)
    {
        BudgetGroup budgetGroup;

        select maxof(Ordinal) from budgetGroup
            where budgetGroup.BudgetControlConfiguration == _controlConfigurationRecId;

        return budgetGroup.Ordinal + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNameForConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the name is being used on a <c>BudgetGroupMember</c> record for the budget
    ///    control configuration.
    /// </summary>
    /// <param name="_name">
    ///    The name to validate.
    /// </param>
    /// <param name="_controlConfigurationRecId">
    ///    The record ID of the <c>BudgetControlConfiguration</c> record.
    /// </param>
    /// <returns>
    ///    true if the <c>BudgetGroupMember</c> record name is valid; otherwise, false.
    /// </returns>
    public static boolean validateNameForConfiguration(BudgetGroupMemberName _name, BudgetControlConfigurationRecId _controlConfigurationRecId)
    {
        boolean isValid = true;

        BudgetGroup budgetGroup;
        BudgetGroupMember budgetGroupMember;

        select firstonly RecId from budgetGroupMember
            where budgetGroupMember.Name == _name
            exists join budgetGroup
                where budgetGroup.BudgetControlConfiguration == _controlConfigurationRecId
                    && budgetGroup.RecId == budgetGroupMember.BudgetGroup;

        if (budgetGroupMember)
        {
            isValid = checkFailed(strfmt("@SYS321395", _name));
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>