<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionTransformerContext</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  The <c>RetailTransactionTransformerContext</c> class helps in transferring context across the methods of <c>RetailTransactionTransformer</c> class.
/// </summary>
public final class RetailTransactionTransformerContext implements System.IDisposable
{
    private boolean ignoreReturnLink;
    private static RetailTransactionTransformerContext instance;
    private boolean useTaxIncludedInPriceFlag;
    private boolean setGiftCard;
    private boolean readPaymentTrans;
    private boolean skipTaxRounding;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dispose</Name>
				<Source><![CDATA[
    public void dispose()
    {
        instance = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        if (instance)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        instance = this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the class.
    /// </summary>
    /// <returns>A new instance of the class.</returns>
    public static RetailTransactionTransformerContext construct()
    {
        return new RetailTransactionTransformerContext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>current</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the instance of the class.
    /// </summary>
    /// <returns>The instance of the class. If no instance is created null is returned.</returns>
    public static RetailTransactionTransformerContext current()
    {
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIgnoreReturnLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the context for ignoring the return link on <c>RetailTransactionTransformer</c> class.
    /// </summary>
    /// <param name = "_ignoreReturnLink">Value from context to ignore return link.</param>
    /// <returns>The context for ignoring the return link on <c>RetailTransactionTransformer</c> class.</returns>
    public boolean parmIgnoreReturnLink(boolean _ignoreReturnLink = ignoreReturnLink)
    {
        if (!prmIsDefault(_ignoreReturnLink))
        {
            ignoreReturnLink = _ignoreReturnLink;
        }

        return ignoreReturnLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseTaxIncludedInPriceFlag</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the context to decide whether TransactionTable's IsTaxIncludedInPrice should be used
    /// to determine for Tax Inclusion/Exclusion in <c>RetailTransactionTransformer</c> class.
    /// </summary>
    /// <param name = "_useTaxIncludedInPriceFlag">Value from context for using IsTaxIncludedInPrice flag of RetailTransaction Table.</param>
    /// <returns>The context for using IsTaxIncludedInPrice flag of RetailTransaction Table on <c>RetailTransactionTransformer</c> class.</returns>
    public boolean parmUseTaxIncludedInPriceFlag(boolean _useTaxIncludedInPriceFlag = useTaxIncludedInPriceFlag)
    {
        if (!prmIsDefault(_useTaxIncludedInPriceFlag))
        {
            useTaxIncludedInPriceFlag = _useTaxIncludedInPriceFlag;
        }

        return useTaxIncludedInPriceFlag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSetGiftCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the context to decide whether ItemInfo's GiftCard should be set or not
    /// </summary>
    /// <param name = "_setGiftCard">Value from context to set ItemInfo's GiftCard.</param>
    /// <returns>The context to set ItemInfo's GiftCard if the sales line has gift card item.</returns>
    public boolean parmSetGiftCard(boolean _setGiftCard = setGiftCard)
    {
        if (!prmIsDefault(_setGiftCard))
        {
            setGiftCard = _setGiftCard;
        }

        return setGiftCard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReadPaymentTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the context to decide whether payment transaction should be read.
    /// </summary>
    /// <param name = "_readPaymentTrans">A boolean value that specifies whether to read the payment transactions.</param>
    /// <returns>true if payment transactions can be read; otherwise, false.</returns>
    public boolean parmReadPaymentTrans(boolean _readPaymentTrans = readPaymentTrans)
    {
        if (!prmIsDefault(_readPaymentTrans))
        {
            readPaymentTrans = _readPaymentTrans;
        }

        return readPaymentTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipTaxRounding</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the context to decide whether taxes rounding should be avoided.
    /// </summary>
    /// <param name = "_skipTaxRounding">A boolean value that specifies whether rounding od taxes should be avoided.</param>
    /// <returns>true if rounding of taxes should be avoided; otherwise, false.</returns>
    public boolean parmSkipTaxRounding(boolean _skipTaxRounding = skipTaxRounding)
    {
        if (!prmIsDefault(_skipTaxRounding))
        {
            skipTaxRounding = _skipTaxRounding;
        }

        return skipTaxRounding;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>