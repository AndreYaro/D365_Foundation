<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25RegCalc_ProfitAllocation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  The class <c>RTax25RegCalc_ProfitAllocation</c> used for calculation of "Profit tax allocation" tax register.
/// </summary>
class RTax25RegCalc_ProfitAllocation extends RTax25RegCalc_Std implements BatchRetryable
{
    AmountMST           profitAmount;

    RAssetAmount        totalAvgAssetAmount;
    RTax25EmplData      totalAvgEmplData;

    Map                 separateDivisionMap;

    CurrencyCode        standardCurrency;
    Branches_RU         mainBranch;

    DialogField         dialogProfitAmount;

    #define.SequencesCode(1)
    #define.ProfitAmountField(6)

    #define.currentVersion(1)
    #localMacro.currentList
    profitAmount
    #endMacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///  This method receives data from sequence calculation and saves data to local variable.
    /// </summary>
    /// <param name="_transMap">
    ///  A map, which contains result of sequence calculation for single field.
    /// </param>
    /// <returns>
    ///  True, if data were succesfully read from map, otherwise false.
    /// </returns>
    public boolean addTrans(Map _transMap)
    {
        boolean ret = true;

        if (_transMap.exists(#profitAmountField))
        {
            profitAmount += _transMap.lookup(#profitAmountField).decimal();
        }
        else
        {
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    ///  The method calculates register data and saves it to buffer.
    /// </summary>
    /// <remarks>
    ///  First, if nesessary, sequences are calculated, to get profit amount, and then this amount is distributed between separate divisions.
    /// </remarks>
    public void calc()
    {
        try
        {
            ttsBegin;

            standardCurrency = CompanyInfoHelper::standardCurrency();
            mainBranch       = Branches_RU::findByVendAccount("");

            super();

            this.calculateAllocation();

            ttsCommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///  The method calculates allocation of profit amount between separate divisions.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calculateAllocation()
    {
        RAssetAmount              avgAssetNetBookValue;
        RTax25EmplData            avgEmplData;
        RTax25ProfitAllocPercent  percent;
        AmountMST                 profitAmountSepDivision;

        MapEnumerator             me;
        Name                      branchName;
        TaxCode                   taxCode;
        TaxValue                  taxValue;
        OKATO_RU                  OKATO;

        me = this.fillAmountMap().getEnumerator();

        while (me.moveNext())
        {
            [avgAssetNetBookValue, avgEmplData, percent, profitAmountSepDivision] = me.currentValue();

            if (me.currentKey() == mainBranch.BranchId)
            {
                branchName = CompanyInfo::find().Name;
            }
            else
            {
                branchName  = VendTable::find(Branches_RU::find(me.currentKey()).VendAccount).name();
            }

            [OKATO, taxCode, taxValue] = this.getTaxDetails(me.currentKey());

            regQuery.addBodyRecord(0,
                [
                    me.currentKey(),                 //branchId
                    OKATO,                           //OKATO
                    avgEmplData,                     //emplData
                    avgAssetNetBookValue,            //assetNetBookValue,
                    percent,                         //percent
                    profitAmountSepDivision,         //profitAmount on separate division
                    taxCode,                         //taxCode
                    taxValue                         //taxValue
                ],
                tableNum(Branches_RU),
                0,
                branchName,
                0,
                profitAmountSepDivision
                );
        }

        regQuery.addFooterRecord(0,
            [
                "",
                "",
                totalAvgEmplData,
                totalAvgAssetAmount,
                100.00,
                profitAmount,
                "",
                0.00
            ],
            0,
            "@SYS809",
            0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotals</Name>
				<Source><![CDATA[
    /// <summary>
    ///  The method calculates total value of fixed asset net book value for all separate divisions.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calculateTotals()
    {
        RTax25AllocCalcDetails    rTax25CalcDetails;
        ;
        //When average net book value being calculated, incoming balance is counted
        while select
                sum(AssetNetBookValue),
                count(RecId)
            from rTax25CalcDetails
            group by BranchId
            where rTax25CalcDetails.TransDate >= registerJournalTrans.fromDate() - 1 &&
                  rTax25CalcDetails.TransDate <= registerJournalTrans.toDate()
        {
            totalAvgAssetAmount += CurrencyExchangeHelper::amount(rTax25CalcDetails.AssetNetBookValue / rTax25CalcDetails.RecId, standardCurrency);
        }

        //When average number of employees being calculated, incoming balance is not counted
        while select
                sum(EmplData),
                count(RecId)
            from rTax25CalcDetails
            group by BranchId
            where rTax25CalcDetails.TransDate >= registerJournalTrans.fromDate() &&
                  rTax25CalcDetails.TransDate <= registerJournalTrans.toDate()
        {
            totalAvgEmplData    += round(rTax25CalcDetails.EmplData/rTax25CalcDetails.RecId, 0.01);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    ///  The method checks if register can be calculated.
    /// </summary>
    /// <returns>
    ///  True, if check succeed, otherwise false.
    /// </returns>
    /// <remarks>
    ///  Average values must be entered and "Profit tax" registers must be calculated and posted to GL.
    /// </remarks>
    public boolean check()
    {
        boolean ret;

        ret = super();

        this.calculateTotals();

        if (!totalAvgAssetAmount)
        {
            ret = checkFailed("@SYP4881211");
        }

        if (!totalAvgEmplData)
        {
            ret = checkFailed("@SYP4881241");
        }

        ret = this.checkRegisters() && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRegisters</Name>
				<Source><![CDATA[
    /// <summary>
    ///  The method checks, if "Profit tax" registers are calculated and posted to GL.
    /// </summary>
    /// <returns>
    ///  True if check succeed, otherwise false.
    /// </returns>
    private boolean checkRegisters()
    {
        boolean ret = true;
        RTax25RegisterJournalTable registerJournalTable,
                                   currentRegisterJournalTable = registerJournalTrans.registerJournalTable();
        ;
        select firstonly registerJournalTable
            where registerJournalTable.PeriodType          == currentRegisterJournalTable.PeriodType &&
                  registerJournalTable.PeriodNum           == currentRegisterJournalTable.PeriodNum  &&
                  registerJournalTable.FiscalYear          == currentRegisterJournalTable.FiscalYear &&
                  registerJournalTable.RegisterJournalType == RTax25RegisterJournalType::ProfitTax;

        boolean existJournalTransBasedOnTaxDiff = LedgerJournalCreate_Tax25_RU::canCreateReverseJournalStatic(
            registerJournalTable,
            LedgerJournalType::RTax25,
            false);
        boolean existJournalTransBasedOnTaxDiffByBalance = LedgerJournalCreate_Tax25_RU::canCreateReverseJournalStatic(
            registerJournalTable,
            LedgerJournalType::RTax25TaxDiffByBalance,
            false);

        if (!registerJournalTable.RecId
            || (!existJournalTransBasedOnTaxDiff
                && !existJournalTransBasedOnTaxDiffByBalance))
        {
            ret = checkFailed("@SYP4881227");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///  The method creates class dialog window. Profit amount prompted only if no setup made for sequence of calculation.
    /// </summary>
    /// <returns>
    ///  <c>DialogRunBase</c> class.
    /// </returns>
    public Object dialog()
    {
        DialogRunBase dialog = super();
        ;
        if (!this.isProfitCalculationSetUp())
        {
            dialogProfitAmount = dialog.addField(extendedTypeStr(AmountMST), "@SYP4881219", "@SYP4881221");
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillAmountMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///  The method calculates map, which contains data about average asset net book value and average headcount on each month date.
    /// </summary>
    /// <returns>
    ///  <c>Map</c> object.
    /// </returns>
    /// <remarks>
    ///  Average for asset net book value includes incoming balance, so there will be four records for each month used for calculation.
    ///  Average for employee data calculated only for data within period of calculation.
    /// </remarks>
    private Map fillAmountMap()
    {
        RTax25AllocCalcDetails    rTax25AllocCalcDetails;

        RAssetAmount              avgAssetNetBookValue;
        RTax25EmplData            avgEmplData;
        RTax25ProfitAllocPercent  percent;
        AmountMST                 profitAmountSepDivision;

        Map                       allocationMap = new Map(Types::String, Types::Container);
        AmountMST                 allocatedAmount;

        //for assets avg calculation includes incoming balance(prev period). So, for quarter there will be four records
        while select
                sum(AssetNetBookValue),
                count(RecId)
            from rTax25AllocCalcDetails
            group by BranchId
            where rTax25AllocCalcDetails.TransDate >= registerJournalTrans.fromDate() - 1 &&
                  rTax25AllocCalcDetails.TransDate <= registerJournalTrans.toDate()
        {
            avgAssetNetBookValue = CurrencyExchangeHelper::amount(rTax25AllocCalcDetails.AssetNetBookValue / rTax25AllocCalcDetails.RecId, standardCurrency);

            if (totalAvgAssetAmount)
            {
                percent = rTax25AllocCalcDetails.AssetNetBookValue/(rTax25AllocCalcDetails.RecId * totalAvgAssetAmount * 2) * 100;
            }

            allocationMap.insert(rTax25AllocCalcDetails.BranchId, [
                avgAssetNetBookValue,                                //Average FA net book value,
                avgEmplData,                                         //Average employee data
                percent                                              //Percent of profit
                ]);
        }

        while select
                sum(AssetNetBookValue),
                sum(EmplData),
                count(RecId)
            from rTax25AllocCalcDetails
            group by BranchId
            where rTax25AllocCalcDetails.TransDate >= registerJournalTrans.fromDate() &&
                  rTax25AllocCalcDetails.TransDate <= registerJournalTrans.toDate()
        {
            if (allocationMap.exists(rTax25AllocCalcDetails.BranchId))
            {
                [avgAssetNetBookValue, avgEmplData, percent] = allocationMap.lookup(rTax25AllocCalcDetails.BranchId);
            }
            else
            {
                avgAssetNetBookValue = 0;
                avgEmplData          = 0;
                percent              = 0;
            }

            avgEmplData = round(rTax25AllocCalcDetails.EmplData/rTax25AllocCalcDetails.RecId, 0.01);

            if (totalAvgEmplData)
            {
                percent += (rTax25AllocCalcDetails.EmplData/(rTax25AllocCalcDetails.RecId * totalAvgEmplData * 2)) * 100;
            }

            profitAmountSepDivision = CurrencyExchangeHelper::amount(percent * profitAmount / 100, standardCurrency);

            allocatedAmount += profitAmountSepDivision;

            allocationMap.insert(rTax25AllocCalcDetails.BranchId, [
                avgAssetNetBookValue,                                //Average FA net book value,
                avgEmplData,                                         //Average employee data
                percent,                                             //Percent of profit
                profitAmountSepDivision                              //Profit amount
                ]);
        }

        //if there penny differences they written off to main branch
        if (profitAmount - allocatedAmount != 0)
        {
            [avgAssetNetBookValue, avgEmplData, percent, profitAmountSepDivision] = allocationMap.lookup(mainBranch.BranchId);

            profitAmountSepDivision += profitAmount - allocatedAmount;

            allocationMap.insert(mainBranch.BranchId, [
                avgAssetNetBookValue,                                //Average FA net book value,
                avgEmplData,                                         //Average employee data
                percent,                                             //Percent of profit
                profitAmountSepDivision                              //Profit amount
                ]);
        }

        return allocationMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///  The method retrives data from dialog. Profit amount taken only if there's no setup for sequences.
    /// </summary>
    /// <returns>
    ///  True if succeed; otherwise false.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (!this.isProfitCalculationSetUp())
        {
            profitAmount = dialogProfitAmount.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDetails</Name>
				<Source><![CDATA[
    /// <summary>
    ///  The method retrieves information about profit tax which set up for division.
    /// </summary>
    /// <param name="_branchId">
    ///  A division id.
    /// </param>
    /// <returns>
    ///  A container with data about profit tax - TaxCode and TaxValue.
    /// </returns>
    /// <remarks>
    ///  New type of tax was added - ProfitTax. Several tax codes can be set up for each tax authority, but values taken only if it one TaxCode with type Profit tax set up.
    /// </remarks>
    private container getTaxDetails(SeparateDivisionId_RU _branchId)
    {
        TaxAuthorityAddress     taxAuthorityAddress;
        TaxTable                taxTable;
        TaxPeriodHead           taxPeriodHead;
        container               ret;
        ;
        if (_branchId == mainBranch.BranchId)
        {
            taxAuthorityAddress = TaxAuthorityAddress::findByOKATO_RU(CompanyInfoHelper::partyOKATOasOfDate_RU(CompanyInfo::find()));
        }
        else
        {
            taxAuthorityAddress = TaxAuthorityAddress::findByOKATO_RU(
                VendTable::find(
                    Branches_RU::find(_branchId).VendAccount).partyOKATOasOfDate_RU());
        }

        ret = [VendTable::find(taxAuthorityAddress.AccountNum).partyOKATOasOfDate_RU()];

        //returning value only if one record for authority
        select count(RecId), maxOf(TaxCode) from taxTable
            where taxTable.TaxType_W == TaxType_W::ProfitTax
        exists join taxPeriodHead
            where taxPeriodHead.TaxPeriod == taxTable.TaxPeriod &&
                  taxPeriodHead.TaxAuthority == taxAuthorityAddress.TaxAuthority;

        if (taxTable.RecId == 1)
        {
            ret += [taxTable.TaxCode, TaxData::percent(taxTable.TaxCode, registerJournalTrans.toDate(), 0)];
        }
        else
        {
            ret += ["", 0.00];
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///  The method initializes register data.
    /// </summary>
    /// <param name="_registerJournalTrans">
    ///  <c>RegisterJournalTrans</c> record being calculated.
    /// </param>
    /// <param name="_batch">
    ///  <c>Batch</c> record.
    /// </param>
    /// <returns>
    ///  True, if initialization succeed; Otherwise false.
    /// </returns>
    /// <remarks>
    ///  Because prompt and calculation executed by different instances of classes, getLast call added.
    /// </remarks>
    public boolean init(RTax25RegisterJournalTrans _registerJournalTrans = null, Batch _batch = null)
    {
        boolean ret;

        //reading profit amount from last value if it was entered manually
        if (!this.isProfitCalculationSetUp(_registerJournalTrans.RegisterId))
        {
            this.getLast();
        }

        ret = super(_registerJournalTrans, _batch);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProfitCalculationSetUp</Name>
				<Source><![CDATA[
    /// <summary>
    ///  The method determines, if profit calculation sequences were set up.
    /// </summary>
    /// <param name="_registerId">
    ///  Id of tax register.
    /// </param>
    /// <returns>
    ///  True, if sequences parameter set up; Otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean isProfitCalculationSetUp(RTax25RegisterId _registerId = registerId)
    {
        return RTax25RegisterParameters::find(_registerId, #SequencesCode).Parameter != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>mandatoryFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///  The method used to specify, which fields must be mandatory.
    /// </summary>
    /// <returns>
    ///  A container with number ids of fields.
    /// </returns>
    public container mandatoryFields()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#currentVersion, #currentList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>runSequences</Name>
				<Source><![CDATA[
    /// <summary>
    ///  The method executes sequences used for register calculation.
    /// </summary>
    /// <remarks>
    ///  Sequences are not executed, if profit calculation was not set up and profit amount entered manually to dialog.
    /// </remarks>
    protected void runSequences()
    {
        if (this.isProfitCalculationSetUp())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        container   packedSuper;
        Version     version = RunBase::getVersion(packedClass);
        boolean     ret = true;
        ;

        switch (version)
        {
            case #currentVersion:
                [version, #currentList, packedSuper] = packedClass;
                ret = super(packedSuper);
                break;
            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>