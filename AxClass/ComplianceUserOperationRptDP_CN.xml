<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ComplianceUserOperationRptDP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ComplianceUserOperationRptDP_CN</c> class is the report data provider class for the <c>ComplianceUserOperationLogReport_CN</c> SSRS report.
/// </summary>
[SRSReportParameterAttribute(classStr(ComplianceUserOperationRptContract_CN))]
public class ComplianceUserOperationRptDP_CN extends SRSReportDataProviderBase
{
    ComplianceUserOperationLogTmp_CN    complianceUserOperationLogTmp;
    SysDataBaseLog                      sysDataBaseLog;

    FieldName                           fieldNameText;
    str                                 oldValueText;
    str                                 newValueText;

    #Characters
    #define.Index_FieldId(1)
    #define.Index_NewValue(2)
    #define.Index_OldValue(3)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build query for report
    /// </summary>
    /// <returns>
    /// Query for report
    /// </returns>
    private Query buildQuery()
    {
        Query                                   query;
        QueryBuildDataSource                    qbds;
        ComplianceUserOperationRptContract_CN   contract;
        container                               usernameContainer;

        contract = this.parmDataContract() as ComplianceUserOperationRptContract_CN;

        if (!contract)
        {
            return null;
        }

        query                   = new Query(queryStr(SysDatabaseLogReport));
        qbds                    = query.dataSourceTable(tableNum(SysDataBaseLog));

        // If user's personnel number is empty, then ignore this range.
        if (contract.parmOperationUser())
        {
            // Retrive user with personnel number, if no user was found then directly show empty report without query data.
            usernameContainer = this.retrieveUserIds(contract.parmOperationUser());
            if (conLen(usernameContainer) == 0)
            {
                return null;
            }
            qbds.addRange(fieldNum(SysDataBaseLog, CreatedBy)).value(con2StrUnlimited(usernameContainer));
        }

        // Re-generate date range here, to keep consistency of date style in ssrs server.
        qbds.addRange(fieldNum(SysDataBaseLog, CreatedDateTime)).value(queryRange(contract.parmFromDate(), contract.parmToDate()));
        qbds.addRange(fieldNum(SysDataBaseLog, Table)).value(contract.parmOperationTable());
        qbds.addSortField(fieldNum(SysDataBaseLog, CreatedBy), SortOrder::Ascending);

        return query;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getComplianceUserOperationLogTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full data from the <c>TmpComplianceUserOperationLog_CN</c> temporary table.
    /// </summary>
    /// <returns>
    /// The <c>TmpComplianceUserOperationLog_CN</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute(tablestr(ComplianceUserOperationLogTmp_CN)), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ComplianceUserOperationLogTmp_CN getComplianceUserOperationLogTmp()
    {
        select complianceUserOperationLogTmp;
        return complianceUserOperationLogTmp;
    }
]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts record field data into <C>TmpComplianceUserOperationLog_CN</C> temporary table.
    /// </summary>
    private void insertIntoTempTable()
    {
        SysDictTable    sysDictTable                        = new SysDictTable(sysDataBaseLog.table);

        complianceUserOperationLogTmp.clear();

        if (sysDictTable)
        {
            complianceUserOperationLogTmp.OperationType     = sysDictTable.getRootConfigKeyLabel();
        }

        complianceUserOperationLogTmp.OperatorName          = DirPersonUser::userId2Name(sysDataBaseLog.createdBy);
        complianceUserOperationLogTmp.TableName             = sysDataBaseLog.tableName();
        complianceUserOperationLogTmp.LogType               = sysDataBaseLog.LogType;
        complianceUserOperationLogTmp.LogCreatedBy          = sysDataBaseLog.createdBy;
        complianceUserOperationLogTmp.FieldName             = fieldNameText;
        complianceUserOperationLogTmp.NewValue              = newvalueText;
        complianceUserOperationLogTmp.OldValue              = oldValueText;
        complianceUserOperationLogTmp.LogCreatedDateTime    = sysDataBaseLog.createdDateTime;
        complianceUserOperationLogTmp.insert();
    }
]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        ListEnumerator                          enumerator;
        fieldId                                 fieldId;
        boolean                                 inserted;
        QueryRun                                queryRun;
        Query                                   query;
        container                               tmp;

        query                       = this.buildQuery();

        if (query)
        {
            queryRun                = new QueryRun(query);

            while (queryRun.next())
            {
                sysDataBaseLog      = queryRun.get(tablenum(SysDataBaseLog));
                fieldNameText       = '';
                newvalueText        = '';
                oldValueText        = '';
                inserted            = false;

                enumerator = sysDataBaseLog.getDataAslist().getEnumerator();

                while (enumerator.moveNext())
                {
                    tmp = enumerator.current();

                    fieldId         = conpeek(tmp, #Index_FieldId);
                    fieldNameText   = fieldid2pname(sysDataBaseLog.Table, fieldId);
                    newValueText    = sysDataBaseLog.contents2Str(conpeek(tmp, #Index_NewValue), fieldId);
                    oldValueText    = sysDataBaseLog.contents2Str(conpeek(tmp, #Index_OldValue), fieldId);
                    inserted        = true;

                    this.insertIntoTempTable();
                }

                if (!inserted)
                {
                    this.insertIntoTempTable();
                }
            }
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>retrieveUserIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// To retrieve user Ids from personnel number range
    /// </summary>
    /// <param name="_personnelNumberRange">
    /// Range of personnel number of <C>HcmWorker</C>
    /// </param>
    /// <returns>
    /// Container of user Ids
    /// </returns>
    private container retrieveUserIds(Range _personnelNumberRange)
    {
        container                       userContainer;
        Query                           query;
        QueryRun                        queryRun;
        QueryBuildDataSource            hcmWorkerDS;
        QueryBuildDataSource            dirPersonUserDS;
        DirPersonUser                   dirPersonUser;

        query                   = new Query();
        dirPersonUserDS         = query.addDataSource(tableNum(DirPersonUser));

        hcmWorkerDS             = dirPersonUserDS.addDataSource(tableNum(HcmWorker));
        hcmWorkerDS.joinMode(JoinMode::ExistsJoin);
        hcmWorkerDS.addLink(fieldNum(DirPersonUser, PersonParty), fieldNum(HcmWorker, Person));
        hcmWorkerDS.addRange(fieldNum(HcmWorker, PersonnelNumber)).value(_personnelNumberRange);

        queryRun                = new QueryRun(query);

        while (queryRun.next())
        {
            dirPersonUser       = queryRun.get(tableNum(DirPersonUser));
            userContainer       += dirPersonUser.User;
        }

        return userContainer;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
