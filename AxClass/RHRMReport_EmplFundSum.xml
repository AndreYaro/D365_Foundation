<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RHRMReport_EmplFundSum</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RHRMReport_EmplFundSum extends RHRMReport implements BatchRetryable
{
    ComExcelDocument_RU excelDocument;
    RHRMEmplTable       emplTable;
    Yr                  yr;
    DialogField         df, grossAmountField;
    NoYesId             showGrossAmount;
    container           workPeriods;

    #Address_RU
    #define.start("start")
    #define.end("end")

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        showGrossAmount
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToTotal</Name>
				<Source><![CDATA[
    private container addToTotal(container _con1, container _con2)
    {
        container       result, element, flags;
        Map             datesMap = new Map(Types::Date, Types::Container);//(date -> ["start"/"end"; 0/1/2])
        MapEnumerator   me;
        TransDate       transDate;
        int             countDate;

        datesMap = this.appendCon(datesMap, _con1);
        datesMap = this.appendCon(datesMap, _con2);

        me = datesMap.getEnumerator();

        while (me.moveNext())
        {
            transDate = me.currentKey();
            flags = me.currentValue();

            if (conpeek(flags, 1) == #start)
            {
                element = [transDate];
                countDate = conpeek(flags, 2);

                while (countDate > 0 && me.moveNext())
                {
                    transDate = me.currentKey();
                    flags = me.currentValue();

                    switch (conpeek(flags, 1))
                    {
                        case #start:
                            countDate += conpeek(flags, 2);
                            break;
                        case #end:
                            countDate -= conpeek(flags, 2);
                            break;
                    }
                }

                element += transDate;

                result += [element];
            }
            else
            {
                throw error(strfmt("@SYS19306", funcname()));
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>animationBoxCaption</Name>
				<Source><![CDATA[
    public str animationBoxCaption()
    {
        return "@RUP3184";
    }

]]></Source>
			</Method>
			<Method>
				<Name>animationBoxText</Name>
				<Source><![CDATA[
    public str animationBoxText()
    {
        return "@RUP3184";
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendCon</Name>
				<Source><![CDATA[
    private Map appendCon(Map _datesMap, container _c)
    {
        container   element;
        Transdate   startPeriod, endPeriod;
        int         i;

        for (i = 1; i <= conlen(_c); i++)
        {
            element = conpeek(_c, i);

            startPeriod = conpeek(element, 1);
            endPeriod = conpeek(element, 2);

            _datesMap = this.updateDate(_datesMap, startPeriod, true);
            _datesMap = this.updateDate(_datesMap, endPeriod, false);
        }

        return _datesMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if report can be created.
    /// </summary>
    /// <returns>
    /// true if report can be created, false otherwise.
    /// </returns>
    protected boolean check()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            workPeriods = this.getWorkPeriods(emplTable.PayMainEmplId);

            if (!conlen(workPeriods))
            {
                info("@GLS101555");
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOfficeDocument</Name>
				<Source><![CDATA[
    protected ComOfficeDocument_RU createOfficeDocument()
    {
        excelDocument = new ComExcelDocument_RU();

        return excelDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Object dialog = super();

        dialog.caption("@RUP3184");
        df = dialog.addFieldValue(extendedTypeStr(Yr), yr, "@SYS107162");
        grossAmountField = dialog.addFieldValue(extendedTypeStr(NoYesId), showGrossAmount, "@RUP3289", "@RUP3290");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillAmountsAndExcludedDaysData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Amount and Excluded days sections.
    /// </summary>
    /// <param name="_workPeriods">
    /// Contains perionds of work.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void fillAmountsAndExcludedDaysData(container _workPeriods)
    {
        RPayCalcYearsForAverage     calcYearsForAverage;
        Yr                          firstYr;

        calcYearsForAverage = RPayCalcYearsForAverage::construct(
            emplTable.EmployeeId,
            any2int(RPayRateTable::find(RpayAverageEarnTable::find(RPaySickIllParameters::find(rPayIllType::Illness).AverageEarnCode).CalcByFund).getValue(RPayRateCallContext::construct(mkdate(01, 01, yr)))),
            mkdate(01, 01, yr));
        calcYearsForAverage.parmOnlyCurrentEmployer(true);

        firstYr = calcYearsForAverage.getFirstYear();

        if (conlen(_workPeriods))
        {
            firstYr = max(firstYr, year(conpeek(conpeek(_workPeriods, 1), 1)));
        }

        this.fillAmountsData(firstYr);
        this.fillExcludedDaysData(firstYr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillAmountsData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Amount section.
    /// </summary>
    /// <param name="_firstYear">
    /// The first year for printing.
    /// </param>
    #define.NumLength(2)
    #define.RowsInEmptyAmountSections(2)
    #define.NumberOfAmountSectionsInTemplate(3)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void fillAmountsData(Yr _firstYear)
    {
        RPayFundEmplSumTotal        payFundEmplSumTotal;
        Amount                      totalAmount, yrAmount;
        int                         i, indexToIns, yearAmountRowNum, toRow;
        Yr                          curYr;

        for (curYr = _firstYear; curYr <= yr; curYr ++)
        {
            payFundEmplSumTotal = RPayFundEmplSumTotal::findByYr(curYr, emplTable.EmployeeId, true);
            yrAmount            = showGrossAmount ? payFundEmplSumTotal.Amount - payFundEmplSumTotal.AmountOverLimit
                                                  : payFundEmplSumTotal.Amount - payFundEmplSumTotal.AmountOverLimit - payFundEmplSumTotal.AmountDeductions;
            totalAmount += yrAmount;

            i = yr - curYr + 1;

            if (i > #NumberOfAmountSectionsInTemplate)
            {
                indexToIns = 1;
            }
            else
            {
                indexToIns = i - 1;
            }

            excelDocument.insertValue(#YEAR_ + int2str(indexToIns),      int2str(curYr) + ' ' + "@GLS106033");
            excelDocument.insertValue(#AMOUNT + int2str(indexToIns),    strfmt('%1-%2 (%3)',
                                                                        num2Str0(yrAmount - frac(yrAmount), #NumLength, 0, 0, 3),
                                                                        num2Str0(frac(yrAmount) * 100, #NumLength),
                                                                        converter.numeralsToCurrency(yrAmount)));

            if (i > #NumberOfAmountSectionsInTemplate)
            {
                yearAmountRowNum = excelDocument.getRowNumber(#YEAR_ + int2str(indexToIns));
                toRow = yearAmountRowNum + #RowsInEmptyAmountSections - 1;
                excelDocument.insertRows(yearAmountRowNum, toRow, 1, toRow - yearAmountRowNum + 1 + #RowsInEmptyAmountSections);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillExcludedDaysData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Excluded days section.
    /// </summary>
    /// <param name="_firstYear">
    /// The first yar for printing.
    /// </param>
    #define.RowsInExcludedSections(4)
    #define.NumberOfExcludedSectionsInTemplate(3)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void fillExcludedDaysData(Yr _firstYear)
    {
        RPayFundEmplSumTotal        payFundEmplSumTotal;
        int                         i, j, indexToIns, excludedYearRowNum, excludedDocumentRowNum, toRow;
        RPayExcludeDaysController   excludeDays;
        Yr                          curYr;
        Days                        excludedDays;
        Set                         excludedDocuments;
        SetEnumerator               se;
        container                   excludedDocument;

        for (curYr = _firstYear; curYr <= yr; curYr ++)
        {
            payFundEmplSumTotal = RPayFundEmplSumTotal::findByYr(curYr, emplTable.EmployeeId, true);

            i = yr - curYr + 1;

            if (i > #NumberOfExcludedSectionsInTemplate)
            {
                indexToIns = 2;
            }
            else
            {
                indexToIns = i - 1;
            }

            excludeDays = RPayExcludeDaysController::construct(emplTable.EmployeeId, curYr);
            excludedDays = excludeDays.getExcludeDays();

            if (payFundEmplSumTotal.ExcludeDays != excludedDays)
            {
                warning(strfmt("@SYP4881287",
                    excludedDays,
                    emplTable.EmployeeId,
                    curYr,
                    payFundEmplSumTotal.ExcludeDays));
            }

            excludedDocuments = Set::create(excludeDays.getExcludedPeriods());
            se = excludedDocuments.getEnumerator();

            excelDocument.insertValue(#EXCLYEAR + int2str(indexToIns),  int2str(curYr));
            excelDocument.insertValue(#EXCLTOTALDAYS + int2str(indexToIns),  excludedDays);

            j = 1;
            while (se.moveNext())
            {
                if (j > 1)
                {
                    excludedDocumentRowNum = excelDocument.getRowNumber(#EXCLSTARTDATE + int2str(indexToIns));
                    excelDocument.insertRows(excludedDocumentRowNum, excludedDocumentRowNum + 1, 1, 2);
                }

                excludedDocument = se.current();
                excelDocument.insertValue(#EXCLSTARTDATE + int2str(indexToIns),  conpeek(excludedDocument, 1));
                excelDocument.insertValue(#EXCLENDDATE + int2str(indexToIns),  conpeek(excludedDocument, 2));
                excelDocument.insertValue(#EXCLDAYS + int2str(indexToIns),  conpeek(excludedDocument, 3));
                excelDocument.insertValue(#EXCLNAME + int2str(indexToIns),  conpeek(excludedDocument, 4));
                j++;
            }

            if (i > #NumberOfExcludedSectionsInTemplate)
            {
                excludedYearRowNum = excelDocument.getRowNumber(#EXCLYEAR + int2str(indexToIns));
                toRow = excludedYearRowNum + #RowsInExcludedSections - 1;
                excelDocument.insertRows(excludedYearRowNum, toRow, 1, toRow - excludedYearRowNum + 1);

                excelDocument.insertValue(#EXCLSTARTDATE + int2str(indexToIns),  '');
                excelDocument.insertValue(#EXCLENDDATE + int2str(indexToIns),  '');
                excelDocument.insertValue(#EXCLDAYS + int2str(indexToIns),  '');
                excelDocument.insertValue(#EXCLNAME + int2str(indexToIns),  '');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillInsuredData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Insured data section.
    /// </summary>
    /// <param name="_workPeriods">
    /// Contains perionds of work.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void fillInsuredData(container _workPeriods)
    {
        LogisticsPostalAddress      logisticsPostalAddress;
        RHRMPersonTable             personTable = emplTable.personTable();
        container                   period;
        int                         i, workPeriodRowNum;

        logisticsPostalAddress = DirParty::primaryPostalAddress(personTable.hcmWorker().Person);

        excelDocument.insertValue(#FIO,                     emplTable.name());
        excelDocument.insertValue(#PASP_SERIE,              personTable.IdentityCardSeries);
        excelDocument.insertValue(#PASP_NUMBER,             personTable.IdentityCardNumber);
        excelDocument.insertValue(#PASP_ISSUE,              (personTable.IdentityCardIssueDate
            ? (date2strUsr(personTable.IdentityCardIssueDate, DateFlags::None) + "@SYS35667")
            : '')  + personTable.IdentityCardIssueBy);

        excelDocument.insertValue(#ADR_INDEX,               logisticsPostalAddress.ZipCode);
        excelDocument.insertValue(#ADR_COUNTRY,             LogisticsAddressCountryRegion::name(logisticsPostalAddress.CountryRegionId));
        excelDocument.insertValue(#ADR_REGION,              LogisticsAddressState::find(logisticsPostalAddress.CountryRegionId, logisticsPostalAddress.State).fullName_RU());
        excelDocument.insertValue(#ADR_CITY,                logisticsPostalAddress.LogisticsPostalAddressMap::makeCity());
        excelDocument.insertValue(#ADR_STREET,              LogisticsAddressStreet_RU::findRecID(logisticsPostalAddress.StreetId_RU).fullName());

        excelDocument.insertValue(#ADR_HOUSE,               logisticsPostalAddress.BuildingCompliment);
        excelDocument.insertValue(#ADR_BUILDING,            logisticsPostalAddress.Building_RU);
        excelDocument.insertValue(#ADR_APARTMENT,           logisticsPostalAddress.Apartment_RU);

        for (i = 1; i <= conlen(_workPeriods); i++)
        {
            if (i > 1)
            {
                workPeriodRowNum = excelDocument.getRowNumber(#WORK_DATE_FROM);
                excelDocument.insertRows(workPeriodRowNum, workPeriodRowNum + 1, 1, 2);
            }

            period = conpeek(_workPeriods, i);
            excelDocument.insertValue(#WORK_DATE_FROM,      date2strUsr(conpeek(period, 1), DateFlags::None));

            excelDocument.insertValue(#WORK_DATE_TO,        date2strUsr(conpeek(period, 2), DateFlags::None));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillInsurerData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Insurer data section.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void fillInsurerData()
    {
        companyInfo = CompanyInfo::find();
        excelDocument.insertValue(#DATE_ISSUE,              date2strUsr(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), DateFlags::None));
        excelDocument.insertValue(#CERT_CODE,               NumberSeq::newGetNumFromCode(RPayParameters::numRefEmplFundSumReport().numberSequenceTable().NumberSequence).num());
        excelDocument.insertValue(#COMP_TITLE,              companyInfo.RFullName ? companyInfo.RFullName : companyInfo.Name);
        excelDocument.insertValue(#FSS_TITLE,               VendTable::find(companyInfo.FSSAccount_RU).name());

        excelDocument.insertValue(#CODE2_IN_FSS,            companyInfo.FSS_RU);
        excelDocument.insertValue(#CODE_SUBORD,             companyInfo.SubordinateCode);
        excelDocument.insertValue(#INN2KPP,                 strfmt('%1 / %2', CompanyInfoHelper::partyINN_RU(companyInfo), CompanyInfoHelper::partyKPP_RU(companyInfo)));
        excelDocument.insertValue(#CompanyAddress,          strReplace(companyInfo.postalAddress().Address, '\n', ' '));
        excelDocument.insertValue(#PHONE,                   companyInfo.phone());
        excelDocument.insertValue(#EMPL_FSS_CODE,           emplTable.payPFRINN());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSignaturesData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Signature data section.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void fillSignaturesData()
    {
        excelDocument.insertValue(#HEAD_OCCUPATION,         OfficialsTable_RU::findDirector().Title);
        excelDocument.insertValue(#HEAD_FIO,                OfficialsTable_RU::findDirector().Name);

        excelDocument.insertValue(#ACCOUNTANT_FIO,          OfficialsTable_RU::findAccountant().Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmplPeriods</Name>
				<Source><![CDATA[
    private container getEmplPeriods(RHRMEmplId _emplId, EndDate _endDate)
    {
        RPayHistory payHistory;
        container   periods;
        StartDate   startDate;
        EndDate     endDate;

        while select OperationType, StartDate from payHistory
            order by StartDate, TransTime
            where payHistory.Number         == _emplId &&
                  payHistory.StartDate      <= _endDate &&
                 (payHistory.operationType  == RHRMJournalType::Receive ||
                  payHistory.operationType  == RHRMJournalType::Dismiss)
        {
            if (payHistory.operationType == RHRMJournalType::Receive)
            {
                startDate = payHistory.StartDate;
            }
            else if (payHistory.operationType == RHRMJournalType::Dismiss)
            {
                endDate = payHistory.StartDate;
            }

            if (startDate && endDate)
            {
                periods     += [[startDate, endDate]];

                startDate   = datenull();
                endDate     = datenull();
            }
        }

        if (startDate && !endDate)
        {
            periods     += [[startDate, _endDate]];
        }

        return periods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        yr = df.value();

        showGrossAmount = grossAmountField.value();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkPeriods</Name>
				<Source><![CDATA[
    private container getWorkPeriods(RHRMEmplId _mainEmplId)
    {
        TransDate                   docEndDate, dateMax, lastEndDate, lastStartDate, endYear = mkdate(31, 12, yr);
        RHRMEmplTable               emplTableLoc;
        container                   periods, periodsEmpl, lastPeriodEmpl;
        int                         len;
        RPayExcludeDaysController   excludeDays;
        TransDate getDateMax()
        {
            TransDate maxDateLoc;

            lastPeriodEmpl = conpeek(periodsEmpl, len);
            lastStartDate = conpeek(lastPeriodEmpl, 1);
            lastEndDate = conpeek(lastPeriodEmpl, 2);
            maxDateLoc = max(docEndDate, min(lastEndDate, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
            maxDateLoc = min(maxDateLoc, endYear);

            return maxDateLoc;
        }

        while select EmployeeId from emplTableLoc
            where emplTableLoc.PayMainEmplId == _mainEmplId
        {
            periodsEmpl = this.getEmplPeriods(emplTableLoc.EmployeeId, endYear);

            if (conlen(periodsEmpl))
            {
                excludeDays = RPayExcludeDaysController::construct(emplTableLoc.EmployeeId, yr);
                docEndDate = excludeDays.getLastDocumentExcludeDate();

                len = conlen(periodsEmpl);

                dateMax = getDateMax();

                if (lastEndDate > dateMax)
                {
                    periodsEmpl = this.getEmplPeriods(emplTableLoc.EmployeeId, dateMax);

                    if (!conlen(periodsEmpl))
                    {
                        continue;
                    }

                    len = conlen(periodsEmpl);

                    dateMax = getDateMax();
                }

                lastEndDate = dateMax;
                lastPeriodEmpl = conpoke(lastPeriodEmpl, 2, lastEndDate);

                periodsEmpl = conpoke(periodsEmpl, len, lastPeriodEmpl);

                if (conlen(periodsEmpl))
                {
                    periods = this.addToTotal(periods, periodsEmpl);
                }
            }
        }

        return periods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initData</Name>
				<Source><![CDATA[
    public void initData(Args _args)
    {
        RHRMOrderTrans          hrmOrderTrans;

        super(_args);

        if (!RPayParameters::numRefEmplFundSumReport().numberSequenceTable().NumberSequence)
            throw error("@RUP3192");

        switch (_args.dataset())
        {
            case tableNum(rHRMEmplTable):
                emplTable   = _args.record();
                yr          = year(emplTable.PayResignedDate ? emplTable.PayResignedDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
                break;
            case tableNum(RHRMOrderTrans):
                hrmOrderTrans   = _args.record();
                emplTable       = RHRMemplTable::find(hrmOrderTrans.EmplId);
                yr             = year(hrmOrderTrans.StartDate);
                break;
            default: Error::wrongUseOfFunction(funcName());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.updateLastYear(emplTable.PayMainEmplId);

        this.fillInsurerData();

        this.fillInsuredData(workPeriods);

        this.fillAmountsAndExcludedDaysData(workPeriods);

        this.fillSignaturesData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
    private Map updateDate(Map _datesMap, TransDate _transDate, boolean _isStartDate)
    {
        container   flags;

        if (_datesMap.exists(_transDate))
        {
            flags = _datesMap.lookup(_transDate);

            switch (conpeek(flags, 1))
            {
                case _isStartDate ? #start : #end:
                    flags = conpoke(flags, 2, conpeek(flags, 2) + 1);
                    break;

                case _isStartDate ? #end : #start:
                    flags = connull();
                    break;
            }

            if (flags != connull())
            {
                _datesMap.insert(_transDate, flags);
            }
            else
            {
                _datesMap.remove(_transDate);
            }
        }
        else
        {
            _datesMap.insert(_transDate, [(_isStartDate ? #start : #end), 1]);
        }

        return _datesMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLastYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates last year.
    /// </summary>
    /// <param name="_mainEmplId">
    /// The code of employee.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateLastYear(RHRMEmplId _mainEmplId)
    {
        TransDate                   endYear = mkdate(31, 12, yr), dismissDate = datenull();
        RHRMEmplTable               emplTableLoc;
        RPayHistory                 payHistory;

        while select EmployeeId from emplTableLoc
            where emplTableLoc.PayMainEmplId == _mainEmplId
        {
            select firstonly StartDate, operationType from payHistory
                order by StartDate desc, TransTime desc
                where payHistory.Number          == emplTableLoc.EmployeeId &&
                      payHistory.StartDate       <= endYear &&
                     (payHistory.operationType   == RHRMJournalType::Dismiss ||
                      payHistory.operationType   == RHRMJournalType::Receive);

            if (payHistory.StartDate)
            {
                if (payHistory.operationType == RHRMJournalType::Dismiss)
                {
                    dismissDate = max(dismissDate, payHistory.StartDate);
                }
                else
                {
                    dismissDate = datenull();
                    break;
                }
            }
        }

        if (dismissDate)
        {
            yr = min(yr, year(dismissDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>