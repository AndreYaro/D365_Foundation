<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureTaxCorrectionEngine_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>FactureTaxCorrectionEngine_RU</c> calculates corrections for correcting factures.
/// </summary>
class FactureTaxCorrectionEngine_RU
{
    CurrencyCode    currencyCode;
    FactureJour_RU  factureJour;
    FactureTrans_RU factureTrans;

    container       factureJourOrigs;
    FactureTrans_RU factureTransOrig;
    FactureTrans_RU factureTransCache;

    FactureJour_RU  factureCorrTmp;
    boolean         viewCorrections;
    boolean         revisedOnly;
    boolean         throwOnCheck;
    boolean         includeCurrent;

    Map             mapRefRecId;
    Map             mapUnroundAmounts;
    Map             mapRoundAmounts;
    Map             mapRefOrigTrans;

    container       factureList;
    container       salesModuleCon;
    boolean         isSalesModuleOrig;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAmountsToMap</Name>
				<Source><![CDATA[
    private void addAmountsToMap(Map _map, RefRecId _recIdCorr, RefRecId _recIdOrig, container _amounts)
    {
        container amounts;
        Map       mapLineAmounts;

        if (_map.exists(_recIdCorr))
        {
            mapLineAmounts = _map.lookup(_recIdCorr);
        }
        else
        {
            mapLineAmounts = new Map(Types::Int64, Types::Container);
        }

        if (mapLineAmounts.exists(_recIdOrig))
        {
            amounts = mapLineAmounts.lookup(_recIdOrig);
            amounts = this.addCon(amounts, _amounts);
        }
        else
        {
            amounts = _amounts;
        }

        mapLineAmounts.insert(_recIdOrig, amounts);
        _map.insert(_recIdCorr, mapLineAmounts);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCon</Name>
				<Source><![CDATA[
    private container addCon(container _c1, container _c2)
    {
        int idx;

        for (idx = 1; idx <= conLen(_c1); idx++)
        {
            _c1 = conPoke(_c1, idx, conPeek(_c1, idx) + conPeek(_c2, idx));
        }

        return _c1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFactureList</Name>
				<Source><![CDATA[
    private void buildFactureList(FactureJour_RU _factureJour)
    {
        FactureJour_RU factureJourLocal = _factureJour.data();

        if (! _factureJour)
        {
            return;
        }

        factureList += [factureJourLocal];

        factureJourLocal = factureJourLocal.getCorrectedFacture();
        while (factureJourLocal)
        {
            this.buildFactureList(factureJourLocal);
            next factureJourLocal;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCorrections</Name>
				<Source><![CDATA[
    private void calcCorrections()
    {
        int                     idx, i;
        int64                   transId;
        boolean                 empty;
        FieldId                 fieldId;
        RefRecId                refRecId;
        RefRecId                factureCorrRecId;
        RefRecId                refTransRecId;
        RefRecId                refFactureLast;
        CustFreeInvoiceGTDId_RU refGTDId;
        FactureJour_RU          factureJourCorr;
        FactureJour_RU          factureActual;
        FactureTrans_RU         factureTransCorr;
        CustVendInvoiceTrans    custVendInvoiceTrans;
        ListEnumerator          enumerator;
        boolean                 isSalesModuleCorr;
        Sign                    sign;
        List                    factureListTaxCorr = new List(Types::Int64);
        Map                     mapRecId           = new Map(Types::Int64,     Types::Int64);
        Map                     mapAdjustRef       = new Map(Types::Container, Types::Int64);
        Set                     setFactureRecId    = new Set(Types::Int64);
        ;

        container mapAdjustRefKey()
        {
            return [refTransRecId, refGTDId, revisedOnly ? factureTransCorr.Price : 0];
        }

        delete_from factureTransOrig;
        delete_from factureTransCache;
        delete_from factureCorrTmp;

        for (i = 1; i <= conlen(factureList); i++)
        {
            factureJourCorr  = conpeek(factureList, i);
            factureCorrRecId = factureJourCorr.rev0().RecId;

            while select factureJourCorr
                order by CreatedDateTime desc, SeqNumber desc
                where  factureJourCorr.RecId             == factureCorrRecId            ||
                      (factureJourCorr.RefRevisedFacture == factureCorrRecId            &&
                      (factureJourCorr.CreatedDateTime   <  factureJour.CreatedDateTime ||
                      (factureJourCorr.CreatedDateTime   == factureJour.CreatedDateTime &&
                       factureJourCorr.SeqNumber         <  factureJour.SeqNumber)))
            {
                factureActual = factureJourCorr.getActualJour();
                if (setFactureRecId.in(factureActual.RecId))
                {
                    continue;
                }

                setFactureRecId.add(factureActual.RecId);

                if (viewCorrections)
                {
                    factureCorrTmp.FactureAmount += factureActual.FactureAmount;
                    factureCorrTmp.FactureTax    += factureActual.FactureTax;
                }
                else
                {
                    if (throwOnCheck && factureJourCorr.CurrencyCode != factureJour.CurrencyCode)
                    {
                        throw error("@SYS4081842");
                    }

                    if (! refFactureLast)
                    {
                        refFactureLast = factureActual.RecId;
                    }

                    if (factureJourCorr.FactureType == FactureType_RU::TaxCorrection ||
                        factureJourCorr.FactureType == FactureType_RU::AdvanceAdjustment)
                    {
                        factureListTaxCorr.addEnd(factureActual.RecId);
                    }
                    else
                    {
                        while select factureTransCorr
                            where factureTransCorr.FactureId == factureActual.FactureId &&
                                  factureTransCorr.Module    == factureActual.Module
                        {
                            if (factureTransCorr.FactureLineType != FactureLineType_RU::InvoiceLine)
                            {
                                buf2Buf(factureTransCorr, factureTransOrig);
                                transId++;
                                factureTransOrig.InvoiceTransRecId = transId;
                                factureTransOrig.insert();
                                mapRefRecId.insert(factureTransOrig.RecId, factureTransCorr.RecId);
                                mapRecId.insert(factureTransCorr.RecId, factureTransOrig.RecId);
                            }
                            else
                            {
                                switch (factureTransCorr.Module)
                                {
                                    case FactureModule_RU::Cust :
                                        custVendInvoiceTrans = CustInvoiceTrans::findFacture_RU(factureTransCorr);
                                        break;
                                    case FactureModule_RU::Vend :
                                        custVendInvoiceTrans = VendInvoiceTrans::findFacture_RU(factureTransCorr);
                                        break;
                                }

                                refTransRecId = custVendInvoiceTrans.CustVendInvoiceTrans::refAdjustedTrans_RU();
                                refGTDId = factureTransCorr.InventGTDId;
                                
                                if (mapAdjustRef.exists(mapAdjustRefKey()))
                                {
                                    refRecId = mapAdjustRef.lookup(mapAdjustRefKey());
                                }
                                else
                                {
                                    refRecId = 0;
                                }

                                select firstonly forupdate factureTransOrig
                                    where factureTransOrig.RecId == refRecId
                                        && factureTransOrig.InventGTDId == refGTDId;

                                if (factureTransOrig)
                                {
                                    for (idx = 1; idx <= conLen(FactureTaxCorrectionEngine_RU::amountFields()); idx++)
                                    {
                                        fieldId = conPeek(FactureTaxCorrectionEngine_RU::amountFields(), idx);
                                        factureTransOrig.(fieldId) += factureTransCorr.(fieldId);
                                    }

                                    if (custVendInvoiceTrans.SalesPurchId_RU || custVendInvoiceTrans.TableId == tableNum(CustInvoiceTrans))
                                    {
                                        factureTransOrig.Qty  += factureTransCorr.Qty;
                                    }
                                    else
                                    {
                                        factureTransOrig.Qty   = sign(factureTransOrig.LineAmount);
                                    }

                                    factureTransOrig.FactureId = factureTransCorr.FactureId;
                                    factureTransOrig.Module    = factureTransCorr.Module;
                                    factureTransOrig.LineNum   = factureTransCorr.LineNum;
                                    factureTransOrig.update();

                                    mapRecId.insert(factureTransCorr.RecId, factureTransOrig.RecId);
                                }
                                else
                                {
                                    buf2Buf(factureTransCorr, factureTransOrig);
                                    transId++;
                                    factureTransOrig.InvoiceTransRecId = transId;
                                    factureTransOrig.insert();
                                    mapRefRecId.insert(factureTransOrig.RecId, factureTransCorr.RecId);
                                    mapRecId.insert(factureTransCorr.RecId, factureTransOrig.RecId);

                                    mapAdjustRef.insert(mapAdjustRefKey(), factureTransOrig.RecId);
                                }
                            }

                            mapRefOrigTrans.insert(factureTransCorr.RecId, factureTransOrig.RecId);
                        }
                    }
                }
            }

            if (revisedOnly)
            {
                break;
            }
        }

        enumerator = factureListTaxCorr.getEnumerator();
        while (enumerator.moveNext())
        {
            factureJourCorr = FactureJour_RU::findRecId(enumerator.current());
            isSalesModuleCorr = confind(salesModuleCon, factureJourCorr.Module);
            sign = (isSalesModuleOrig == isSalesModuleCorr ? 1 : -1);

            while select factureTransCorr
                where factureTransCorr.FactureId == factureJourCorr.FactureId &&
                      factureTransCorr.Module    == factureJourCorr.Module
            {
                refTransRecId = 0;
                if (mapRecId.exists(factureTransCorr.RefCorrectedFactureTrans))
                {
                    refTransRecId = mapRecId.lookup(factureTransCorr.RefCorrectedFactureTrans);
                }
                else if (mapRecId.exists(factureTransCorr.refAdjustedTrans()))
                {
                    refTransRecId = mapRecId.lookup(factureTransCorr.refAdjustedTrans());
                }

                select firstonly forupdate factureTransOrig
                    where factureTransOrig.RecId == refTransRecId;

                if (factureTransOrig)
                {
                    for (idx = 1; idx <= conLen(FactureTaxCorrectionEngine_RU::amountFields()); idx++)
                    {
                        fieldId = conPeek(FactureTaxCorrectionEngine_RU::amountFields(), idx);
                        factureTransOrig.(fieldId) += sign * factureTransCorr.(fieldId);
                    }

                    if (factureJourCorr.RecId == refFactureLast)
                    {
                        factureTransOrig.InvoiceLineNum  = factureTransCorr.InvoiceLineNum;
                        factureTransOrig.InvoiceId       = factureTransCorr.InvoiceId;
                        factureTransOrig.MarkupRefRecId  = factureTransCorr.MarkupRefRecId;
                        factureTransOrig.FactureLineType = FactureLineType_RU::TaxCorrection;
                        factureTransOrig.TaxCode         = factureTransCorr.TaxCode;
                        factureTransOrig.VATValue        = factureTransCorr.VATValue;
                    }

                    factureTransOrig.update();
                }
                else
                {
                    buf2Buf(factureTransCorr, factureTransOrig);
                    transId++;
                    factureTransOrig.InvoiceTransRecId = transId;
                    factureTransOrig.insert();
                    mapRefRecId.insert(factureTransOrig.RecId, factureTransCorr.RefCorrectedFactureTrans);
                    mapRecId.insert(factureTransCorr.refAdjustedTrans(), factureTransOrig.RecId);
                }

                mapRefOrigTrans.insert(factureTransCorr.RecId, factureTransOrig.RecId);
            }
        }

        while select forupdate factureTransOrig
        {
            empty = true;
            for (idx = 1; idx <= conLen(FactureTaxCorrectionEngine_RU::amountFields()); idx++)
            {
                fieldId = conPeek(FactureTaxCorrectionEngine_RU::amountFields(), idx);
                if (factureTransOrig.(fieldId))
                {
                    empty = false;
                    break;
                }
            }
            if (empty && factureJour.CorrectionType == FactureCorrectionType_RU::Revision)
            {
                factureTransOrig.delete();
            }
        }

        while select forupdate factureTransOrig
            where factureTransOrig.Qty != 0
        {
            factureTransOrig.Price = CurrencyExchangeHelper::price(factureTransOrig.LineAmount / factureTransOrig.Qty, factureJour.CurrencyCode);
            factureTransOrig.update();
        }

        while select factureTransOrig
        {
            buf2Buf(factureTransOrig, factureTransCache);
            factureTransCache.insert();
        }

        factureCorrTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRoundOff</Name>
				<Source><![CDATA[
    private void calcRoundOff(RefRecId _recIdCorr)
    {
        int             idx;
        Amount          delta;
        container       amountsSum;
        container       amountsUnroundSum;
        container       amounts;
        MapEnumerator   mapEnumerator;
        Map             mapRoundLineAmounts;
        Map             mapUnroundLineAmounts;
        Amount          roundOffAmount = Currency::find(currencyCode).RoundingPrecision;

        if (! mapRoundAmounts.exists(_recIdCorr))
        {
            return;
        }

        mapRoundLineAmounts   = mapRoundAmounts.lookup(_recIdCorr);
        mapUnroundLineAmounts = mapUnroundAmounts.lookup(_recIdCorr);

        mapEnumerator = mapUnroundLineAmounts.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            amounts = mapEnumerator.currentValue();
            if (amountsUnroundSum == conNull())
            {
                amountsUnroundSum = amounts;
            }
            else
            {
                amountsUnroundSum = this.addCon(amountsUnroundSum, amounts);
            }

            amounts = mapRoundLineAmounts.lookup(mapEnumerator.currentKey());
            if (amountsSum == conNull())
            {
                amountsSum = amounts;
            }
            else
            {
                amountsSum = this.addCon(amountsSum, amounts);
            }

            for (idx = 1; idx <= conLen(amountsSum); idx++)
            {
                delta = CurrencyExchangeHelper::amount(conPeek(amountsUnroundSum, idx) - conPeek(amountsSum, idx), currencyCode);
                if (abs(delta) >= roundOffAmount)
                {
                    amounts     = conPoke(amounts,    idx, conPeek(amounts, idx)    + delta);
                    amountsSum  = conPoke(amountsSum, idx, conPeek(amountsSum, idx) + delta);
                }
            }

            mapRoundLineAmounts.insert(mapEnumerator.currentKey(), amounts);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTransToTmp</Name>
				<Source><![CDATA[
    private void copyTransToTmp(FactureJour_RU _factureJour, FactureTrans_RU _tmpFactureTrans)
    {
        FactureTrans_RU factureTransLocal;
        ;

        delete_from _tmpFactureTrans;

        while select factureTransLocal
            where factureTransLocal.FactureId == _factureJour.FactureId &&
                  factureTransLocal.Module    == _factureJour.Module
        {
            buf2Buf(factureTransLocal, _tmpFactureTrans);
            _tmpFactureTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>distributeAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Distributes amount to original facture trans lines.
    /// </summary>
    /// <param name="_factureTrans">
    /// Correction <c>FactureTrans_RU</c> record.
    /// </param>
    /// <param name="_amount">
    /// Amount of correction.
    /// </param>
    /// <param name="_setOrigTrans">
    /// Set with original <c>FactureTrans_RU</c> records.
    /// </param>
    /// <exception cref="Exception::Error">
    /// If corrected and original amount have different signs and amount is greater that original amount.
    /// </exception>
    public void distributeAmount(FactureTrans_RU _factureTrans, Amount _amount, Set _setOrigTrans)
    {
        TaxAmount       totalTaxAmount;
        Factor          factor;
        int             idx;
        container       amounts;
        container       amountsUnround;
        FieldId         fieldId;
        MapEnumerator   mapEnumerator;
        MapEnumerator   enumerator;
        Map             mapRoundLineAmounts;
        Map             mapLineAmounts;
        Set             setRecId         = new Set(Types::Int64);
        Amount          amount           = abs(_factureTrans.vat) < abs(_amount) ? _factureTrans.vat : _amount;
        FactureTrans_RU factureTransCorr = FactureTrans_RU::find(_factureTrans.FactureId, _factureTrans.Module, _factureTrans.LineNum);
        LedgerJournalTrans ledgerJournalTrans = LedgerJournalTrans_RU_Extension::findFacture_RU(_factureTrans);
        LedgerJournalTrans_W ledgerJournalTrans_W = ledgerJournalTrans.ledgerJournalTrans_W();

        const TransDate AllowOnlyTaxCorrectionDate = 01\01\2019;

        if (_factureTrans.vat * _amount <= 0)
        {
            return;
        }

        while select factureTransOrig
            where ((factureTransOrig.TaxCode == _factureTrans.TaxCode
                    && factureTransOrig.vatValue == _factureTrans.vatValue)
                || (ledgerJournalTrans.TransDate >= AllowOnlyTaxCorrectionDate
                    && ledgerJournalTrans_W.OrigPaymRefRecId_RU))
                && factureTransOrig.vat
        {
            if (! _setOrigTrans.in(factureTransOrig.RecId))
            {
                continue;
            }

            totalTaxAmount += abs(factureTransOrig.vat);
            setRecId.add(factureTransOrig.RecId);
        }

        if (amount * totalTaxAmount < 0 && abs(amount) > abs(totalTaxAmount))
        {
            throw error("@SYS4081844");
        }

        while select factureTransOrig
        {
            if (! setRecId.in(factureTransOrig.RecId))
            {
                continue;
            }

            factor = amount / factureTransCorr.vat;
            factor = factor * abs(factureTransOrig.vat) / totalTaxAmount;

            amounts = conNull();
            amountsUnround = conNull();
            for (idx = 1; idx <= conLen(FactureTaxCorrectionEngine_RU::amountFields()); idx++)
            {
                fieldId = conPeek(FactureTaxCorrectionEngine_RU::amountFields(), idx);
                amountsUnround += factor * factureTransCorr.(fieldId);
                amounts += CurrencyExchangeHelper::amount(factor * factureTransCorr.(fieldId), currencyCode);
            }

            this.addAmountsToMap(mapUnroundAmounts, factureTransCorr.RecId, factureTransOrig.RecId, amountsUnround);
            this.addAmountsToMap(mapRoundAmounts,   factureTransCorr.RecId, factureTransOrig.RecId, amounts);
        }

        this.calcRoundOff(factureTransCorr.RecId);

        if (! mapRoundAmounts.exists(factureTransCorr.RecId))
        {
            return;
        }

        mapRoundLineAmounts = mapRoundAmounts.lookup(factureTransCorr.RecId);
        mapEnumerator = mapRoundLineAmounts.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            select firstonly forupdate factureTransOrig
                where factureTransOrig.RecId == mapEnumerator.currentKey();

            select firstonly factureTransCache
                where factureTransCache.FactureId == factureTransOrig.FactureId &&
                      factureTransCache.Module    == factureTransOrig.Module    &&
                      factureTransCache.LineNum   == factureTransOrig.LineNum;

            for (idx = 1; idx <= conLen(FactureTaxCorrectionEngine_RU::amountFields()); idx++)
            {
                fieldId = conPeek(FactureTaxCorrectionEngine_RU::amountFields(), idx);
                factureTransOrig.(fieldId) = factureTransCache.(fieldId);
                factureTransCorr.(fieldId) = factureTransCorr.(fieldId) - conPeek(mapEnumerator.currentValue(), idx);
            }

            enumerator = mapRoundAmounts.getEnumerator();
            while (enumerator.moveNext())
            {
                mapLineAmounts = enumerator.currentValue();
                if (mapLineAmounts.exists(factureTransOrig.RecId))
                {
                    amounts = mapLineAmounts.lookup(factureTransOrig.RecId);
                    for (idx = 1; idx <= conLen(FactureTaxCorrectionEngine_RU::amountFields()); idx++)
                    {
                        fieldId = conPeek(FactureTaxCorrectionEngine_RU::amountFields(), idx);
                        factureTransOrig.(fieldId) += conPeek(amounts, idx);
                    }
                }
            }

            if (factureTransOrig.Qty)
            {
                factureTransOrig.Price = CurrencyExchangeHelper::price(factureTransOrig.LineAmount / factureTransOrig.Qty, currencyCode);
            }

            factureTransOrig.update();
        }

        for (idx = 1; idx <= conLen(FactureTaxCorrectionEngine_RU::amountFields()); idx++)
        {
            fieldId = conPeek(FactureTaxCorrectionEngine_RU::amountFields(), idx);
            _factureTrans.(fieldId) = factureTransCorr.(fieldId);
        }

        _factureTrans.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFactureJourCorr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets temporary table with correction <c>FactureJour_RU</c> record.
    /// </summary>
    /// <returns>
    /// Temporary table with correction <c>FactureJour_RU</c> record.
    /// </returns>
    public FactureJour_RU getFactureJourCorr()
    {
        return factureCorrTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFactureTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets temporary table with correction <c>FactureTrans_RU</c> record.
    /// </summary>
    /// <returns>
    /// Temporary table with correction <c>FactureTrans_RU</c> record.
    /// </returns>
    public FactureTrans_RU getFactureTrans()
    {
        return factureTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFactureTransOrig</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets temporary table with original <c>FactureTrans_RU</c> record.
    /// </summary>
    /// <returns>
    /// Temporary table with original <c>FactureTrans_RU</c> record.
    /// </returns>
    public FactureTrans_RU getFactureTransOrig()
    {
        return factureTransOrig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalFactures</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns original facture journal records.
    /// </summary>
    /// <returns>
    /// Original <c>FactureJour_RU</c> records packed in a container.
    /// </returns>
    public container getOriginalFactures()
    {
        return factureJourOrigs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigTransRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns record id of original facture trans.
    /// </summary>
    /// <param name="_recId">
    /// Source record id.
    /// </param>
    /// <returns>
    /// Record id of original facture trans.
    /// </returns>
    public RefRecId getOrigTransRecId(RefRecId _recId)
    {
        RefRecId ret;
        if (mapRefOrigTrans.exists(_recId))
        {
            ret = mapRefOrigTrans.lookup(_recId);
        }

        return  ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes class.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// When check fails.
    /// </exception>
    public void init()
    {
        FactureJour_RU origFacture;

        mapRefRecId     = new Map(Types::Int64, Types::Int64);
        mapRefOrigTrans = new Map(Types::Int64, Types::Int64);

        origFacture         = factureJour.getCorrectedFacture(true);
        currencyCode        = factureJour.CurrencyCode;
        isSalesModuleOrig   = confind(salesModuleCon, origFacture.Module);

        while (origFacture)
        {
            if (throwOnCheck && origFacture.CurrencyCode != currencyCode)
            {
                throw error("@SYS4081842");
            }

            factureJourOrigs += origFacture.RecId;

            next origFacture;
        }

        if (throwOnCheck && ! conlen(factureJourOrigs))
        {
            throw error("@SYS4081843");
        }

        factureList = connull();

        this.buildFactureList(factureJour);

        if (! includeCurrent)
        {
            factureList = condel(factureList, 1, 1);
        }
        else
        {
            factureJour.SeqNumber++;
            factureList = conPoke(factureList, 1, factureJour);
        }

        this.calcCorrections();
        this.copyTransToTmp(factureJour, factureTrans);

        mapUnroundAmounts = new Map(Types::Int64, Types::Class);
        mapRoundAmounts   = new Map(Types::Int64, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of <c>FactureTaxCorrectionEngine_RU</c> class.
    /// </summary>
    /// <param name="_factureJour">
    /// <c>FactureJour_RU</c> record.
    /// </param>
    /// <param name="_viewCorrections">
    /// Should corrections be displayed.
    /// </param>
    /// <param name="_revisedOnly">
    /// Should only revising factures be calculated.
    /// </param>
    /// <param name="_throwOnCheck">
    /// Should error be thrown when check fails.
    /// </param>
    /// <param name="_includeCurrent">
    /// Should the current facture be included in the calculation.
    /// </param>
    protected void new(FactureJour_RU _factureJour,
                       boolean        _viewCorrections,
                       boolean        _revisedOnly,
                       boolean        _throwOnCheck,
                       boolean        _includeCurrent)
    {
        factureJour     = _factureJour.data();
        viewCorrections = _viewCorrections;
        revisedOnly     = _revisedOnly;
        throwOnCheck    = _throwOnCheck;
        includeCurrent  = _includeCurrent;

        factureTrans.setTmp();
        factureTransOrig.setTmp();
        factureTransCache.setTmp();
        factureCorrTmp.setTmp();

        salesModuleCon  = [ FactureModule_RU::Cust,
                            FactureModule_RU::TaxCorrectionSales,
                            FactureModule_RU::TaxCorrectionSales_Vend ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeFromMap</Name>
				<Source><![CDATA[
    private void removeFromMap(Map _map, RefRecId _recIdOrig)
    {
        Map             mapLineAmounts;
        MapEnumerator   mapEnumerator;
        ;

        mapEnumerator = _map.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            mapLineAmounts = mapEnumerator.currentValue();
            if (mapLineAmounts.exists(_recIdOrig))
            {
                mapLineAmounts.remove(_recIdOrig);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates original tax trans amounts by given tax code.
    /// </summary>
    /// <param name="_taxCode">
    /// Tax code value.
    /// </param>
    public void resetTaxCode(TaxCode _taxCode)
    {
        FactureTrans_RU factureTransCorr;

        while select forupdate factureTransOrig
            where factureTransOrig.TaxCode == _taxCode
        {
            select firstonly factureTransCache
                where factureTransCache.FactureId   == factureTransOrig.FactureId
                   && factureTransCache.Module      == factureTransOrig.Module
                   && factureTransCache.LineNum     == factureTransOrig.LineNum;

            buf2Buf(factureTransCache, factureTransOrig);
            factureTransOrig.update();

            this.removeFromMap(mapUnroundAmounts, factureTransOrig.RecId);
            this.removeFromMap(mapRoundAmounts,   factureTransOrig.RecId);
        }

        while select forupdate factureTrans
            where factureTrans.TaxCode == _taxCode
        {
            factureTransCorr = FactureTrans_RU::find(factureTrans.FactureId, factureTrans.Module, factureTrans.LineNum);
            buf2Buf(factureTransCorr, factureTrans);
            factureTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates amounts in corrected facture trans lines.
    /// </summary>
    /// <returns>
    /// True, if update succeed, otherwise false.
    /// </returns>
    public boolean updateTrans()
    {
        int             idx;
        boolean         first;
        FieldId         fieldId;
        LineNum         lineNum;
        MapEnumerator   enumerator;
        MapEnumerator   mapEnumerator;
        FactureTrans_RU factureTransCorr;
        FactureTrans_RU factureTransLocal;

        select firstonly factureTrans
            where factureTrans.TaxAmount != 0;

        if (factureTrans)
        {
            return checkFailed("@SYS4081846");
        }

        ttsbegin;

        enumerator = mapRoundAmounts.getEnumerator();
        while (enumerator.moveNext())
        {
            factureTransCorr = FactureTrans_RU::findRecId(enumerator.currentKey(), true);
            first = true;
            mapEnumerator = enumerator.currentValue().getEnumerator();
            while (mapEnumerator.moveNext())
            {
                if (! first)
                {
                    select firstonly factureTransLocal
                        order by LineNum
                        where factureTransLocal.FactureId == factureTransCorr.FactureId &&
                              factureTransLocal.Module    == factureTransCorr.Module    &&
                              factureTransLocal.LineNum    > factureTransCorr.LineNum;

                    if (factureTransLocal)
                    {
                        lineNum = (factureTransCorr.LineNum + factureTransLocal.LineNum) / 2;
                    }
                    else
                    {
                        lineNum = factureTransCorr.LineNum + 1;
                    }

                    factureTransCorr.LineNum = lineNum;
                }

                select firstonly factureTransOrig
                    where factureTransOrig.RecId == mapEnumerator.currentKey();

                factureTransCorr.ItemName                 = factureTransOrig.ItemName;
                factureTransCorr.Qty                      = factureTransOrig.Qty;
                factureTransCorr.RefCorrectedFactureTrans = mapRefRecId.lookup(mapEnumerator.currentKey());

                for (idx = 1; idx <= conLen(FactureTaxCorrectionEngine_RU::amountFields()); idx++)
                {
                    fieldId = conPeek(FactureTaxCorrectionEngine_RU::amountFields(), idx);
                    factureTransCorr.(fieldId) = conPeek(mapEnumerator.currentValue(), idx);
                }

                if (factureTransCorr.Qty)
                {
                    factureTransCorr.Price = CurrencyExchangeHelper::price(factureTransCorr.LineAmount / factureTransCorr.Qty, factureJour.CurrencyCode);
                }

                if (first)
                {
                    factureTransCorr.update();
                }
                else
                {
                    factureTransCorr.insert();
                }

                first = false;
            }
        }

        factureJour.recalcTotalsDisplay();

        ttscommit;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns container with field ids of amount field on <c>FactureTrans_RU</c> record.
    /// </summary>
    /// <returns>
    /// Container with field ids of amount field on <c>FactureTrans_RU</c> record.
    /// </returns>
    static container amountFields()
    {
        return [fieldNum(FactureTrans_RU, LineAmount),
                fieldNum(FactureTrans_RU, LineAmountMST),
                fieldNum(FactureTrans_RU, TaxAmountMST),
                fieldNum(FactureTrans_RU, vatAmountMST),
                fieldNum(FactureTrans_RU, ExciseAmountMST),
                fieldNum(FactureTrans_RU, TaxAmount),
                fieldNum(FactureTrans_RU, Excise),
                fieldNum(FactureTrans_RU, vat)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of <c>FactureTaxCorrectionEngine_RU</c> class.
    /// </summary>
    /// <param name="_factureJour">
    /// <c>FactureJour_RU</c> record.
    /// </param>
    /// <param name="_viewCorrections">
    /// Should corrections be displayed.
    /// </param>
    /// <param name="_revisedOnly">
    /// Should only revising factures be calculated.
    /// </param>
    /// <param name="_throwOnCheck">
    /// Should error be thrown when check fails.
    /// </param>
    /// <param name="_includeCurrent">
    /// Should the current facture be included in the calculation.
    /// </param>
    /// <returns>
    /// New instance of <c>FactureTaxCorrectionEngine_RU</c> class.
    /// </returns>
    public static FactureTaxCorrectionEngine_RU newParameters(FactureJour_RU    _factureJour,
                                                              boolean           _viewCorrections = false,
                                                              boolean           _revisedOnly     = false,
                                                              boolean           _throwOnCheck    = false,
                                                              boolean           _includeCurrent  = false)
    {
        FactureTaxCorrectionEngine_RU engine = new FactureTaxCorrectionEngine_RU(_factureJour,
                                                                                 _viewCorrections,
                                                                                 _revisedOnly,
                                                                                 _throwOnCheck,
                                                                                 _includeCurrent);
        engine.init();

        return engine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>