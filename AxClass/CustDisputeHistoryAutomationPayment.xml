<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustDisputeHistoryAutomationPayment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>CustDisputeHistoryAutomationPayment</c> holds the logic to update payments being applied
/// that are being tracked by collections status.
/// </summary>
class CustDisputeHistoryAutomationPayment extends CustDisputeHistoryAutomation
{
    CustTrans cancelledPayment;
    ReasonCode reasonCode;
    ReasonComment reasonComment;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateCollectionsStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and run an instance of the <c>CustDisputeHistoryAutomationPayment</c> class.
    /// </summary>
    /// <param name = "_custTransPayment">The <c>RecId</c> of the payment being applied to a disputed <c>CustTrans</c> record.</param>
    /// <param name = "_isPaymentCancelled">Indication of the payment is being cancelled.</param>
    /// <param name = "_cancelledPayment">The <c>RecId</c> of cancelled payment <c>CustTrans</c> record.</param>
    /// <param name = "_reasonCode">The optional <c>ReasonCode</c> provided for write off and reversal</param>
    /// <param name = "_reasonComment">The optional <c>_reasonComment</c> provided for write off and reversal</param>
    public static void updateCollectionsStatus(
        RecId _custTrans,
        CustDisputeHistoryAutomationAction _action,
        ReasonCode _reasonCode = '',
        ReasonComment _reasonComment = '')
    {
        CustDisputeHistoryAutomationPayment helper = new CustDisputeHistoryAutomationPayment();

        helper.parmAction(_action);

        if (_action == CustDisputeHistoryAutomationAction::Reversal || _action == CustDisputeHistoryAutomationAction::WriteOff)
        {
            helper.parmOriginalCustTrans(CustTrans::find(_custTrans));
            helper.parmReasonCode(_reasonCode);
            helper.parmReasonComment(_reasonComment);
        }
        else if (_action == CustDisputeHistoryAutomationAction::PaymentCancel)
        {
            helper.parmCustTransPaymentRecord(CustTrans::find(_custTrans));
            helper.parmCancelledPayment(CustTrans::find(helper.parmCustTransPaymentRecord().OffsetRecid));
            helper.parmOriginalCustTrans(helper.getOriginalCustTransForCancellation(helper.parmCustTransPaymentRecord()));
        }
        else if (_action == CustDisputeHistoryAutomationAction::Payment)
        {
            helper.parmOriginalCustTrans(CustTrans::find(_custTrans));
            helper.parmCustTransPaymentRecord(CustTrans::findByVoucher(helper.parmOriginalCustTrans().LastSettleVoucher));
        }

        helper.parmCustDisputeRecord(CustDispute::findByCustTrans(helper.parmOriginalCustTrans().RecId));
        helper.parmLastStatusUpdate(helper.parmCustDisputeRecord().Status);

        helper.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCollectionsStatusForPaymentJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and runs an instance of <c>CustDisputeHistoryAutomationPayment</c> for a payment journal with dispute statuses.
    /// </summary>
    /// <param name = "_journalNum">The journal id.</param>
    public static void updateCollectionsStatusForPaymentJournal(LedgerJournalId _journalNum)
    {
        CustDisputeHistoryAutomationPayment::updateCollectionsStatusForPaymentJournalWithCustDispute(_journalNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCollectionsStatusForPaymentJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates collection status for each <t>LedgerJournalTrans</t> line. 
    /// </summary>
    /// <param name = "_ledgerJournalTrans">LedgerJounralTrans buffer.</param>
    public static void updateCollectionsStatusForPaymentJournalLine(LedgerJournalTrans _ledgerJournalTrans)
    {
        CustDispute custDispute;
        CustTrans custTrans;
        LedgerJournalTrans ledgerJournalTrans;

        select count(RecId) from ledgerJournalTrans
            where ledgerJournalTrans.Voucher == _ledgerJournalTrans.Voucher;

        //when oneVoucher functionality is enabled, multiple lines in <t>LedgerJournalTrans</t> will have same voucher number.
        //In this case, LedgerJournalTrans.Voucher == custTrans.LastSettleVoucher might retrieve transactions which are already processed.
        //To retrieve only corresponding custTrans records of particular <t>LedgerJournalTrans</t>, CustTransId relation is used.
        if (ledgerJournalTrans.RecId > 1)
        {
            while select OffsetRecId from custTrans
                    where custTrans.recId == _ledgerJournalTrans.CustTransId
                        && custTrans.TransDate == _ledgerJournalTrans.TransDate
                    join RecId from custDispute
                        where custDispute.CustTrans == custTrans.OffsetRecId
            {
                CustDisputeHistoryAutomationPayment::updateCollectionsStatus(custTrans.OffsetRecId, CustDisputeHistoryAutomationAction::Payment);
            }
        }
        else
        {
            while select RecId from custTrans
                    where custTrans.LastSettleVoucher == _ledgerJournalTrans.Voucher
                        && custTrans.LastSettleDate == _ledgerJournalTrans.TransDate
                    join RecId from custDispute
                        where custDispute.CustTrans == custTrans.RecId
            {
                CustDisputeHistoryAutomationPayment::updateCollectionsStatus(custTrans.RecId, CustDisputeHistoryAutomationAction::Payment);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCollectionsStatusForPaymentJournalWithCustDispute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates collection status for all payment journals with dispute. Improves performance by selecting all transactions with dispute in one call as compared to 
    /// checking each transaction for dispute.
    /// </summary>
    /// <param name = "_journalNum">The journal id.</param>
    private static void updateCollectionsStatusForPaymentJournalWithCustDispute(LedgerJournalId _journalNum)
    {
        CustDispute custDispute;
        CustTrans custTrans;
        CustTrans custTransPayment;
        LedgerJournalTrans ledgerJournalTrans;

        select count(RecId) from ledgerJournalTrans
            where ledgerJournalTrans.JournalNum == _journalNum
                && ledgerJournalTrans.TransactionType == LedgerTransType::Payment;
        
        // When customer payment journal is posted with multiple transactions to settle corresponding transactions,
        // Then each ledgerJournalTrans will have multiple payment transactions(count(recID) > 1) offsetting transactions in custtrans
        // In this case, joining on recId so as to avoid performance issue when voucher number is same.   
        if (ledgerJournalTrans.RecId > 1 && CustDisputeUpdateCollectionStatusFlight::instance().isEnabled())
        {
            while select Voucher, JournalNum from ledgerJournalTrans
                where ledgerJournalTrans.JournalNum == _journalNum
                    && ledgerJournalTrans.TransactionType == LedgerTransType::Payment
                join OffsetRecId from custTrans
                    where custTrans.RecId == ledgerJournalTrans.CustTransId
                        && custTrans.TransDate == ledgerJournalTrans.TransDate
                join CustTrans from custDispute
                    where custDispute.CustTrans == custTrans.OffsetRecId
            {
                CustDisputeHistoryAutomationPayment::updateCollectionsStatus(custTrans.OffsetRecId, CustDisputeHistoryAutomationAction::Payment);
            }
        }
        //when customer payment journal is posted as single transaction to settle multiple transactions
        //Then each ledgerJournalTrans will have only one corresponding payment transaction offsetting multiple transactions.
        //In this scenario, joining by voucher, as ledgerJournalTrans-CustTrans would be one-to-one join doesn't impact performance 
        else
        {
            while select Voucher, JournalNum from ledgerJournalTrans
                where ledgerJournalTrans.JournalNum == _journalNum
                    && ledgerJournalTrans.TransactionType == LedgerTransType::Payment
                join RecId from custTrans
                    where custTrans.Voucher == ledgerJournalTrans.Voucher
                        && custTrans.TransDate == ledgerJournalTrans.TransDate
                join LastSettleVoucher from custTransPayment
                    where custTransPayment.LastSettleVoucher == custTrans.Voucher
                join CustTrans from custDispute
                    where custDispute.CustTrans == custTransPayment.RecId
            {
                CustDisputeHistoryAutomationPayment::updateCollectionsStatus(custTransPayment.RecId, CustDisputeHistoryAutomationAction::Payment);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalCustTransForCancellation</Name>
				<Source><![CDATA[
    private CustTrans getOriginalCustTransForCancellation(CustTrans _custTransPayment)
    {
        CustSettlement custSettlement;

        select firstonly OffsetRecId from custSettlement
            where custSettlement.TransRecId == _custTransPayment.OffsetRecId
                && custSettlement.OffsetRecId != _custTransPayment.RecId;

        return CustTrans::find(CustSettlement.OffsetRecid);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustDisputeHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the <c>CustDisputeHistory</c> depending on the payment type.
    /// </summary>
    public void updateCustDisputeHistory()
    {
        switch (action)
        {
            case CustDisputeHistoryAutomationAction::PaymentCancel:
                this.trackCancelledPayment();
                break;
            case CustDisputeHistoryAutomationAction::Payment:
                this.trackPayment();
                break;
            case CustDisputeHistoryAutomationAction::Reversal:
            case CustDisputeHistoryAutomationAction::WriteOff:
                this.applyWriteOffOrReversal();
                this.transactionResolved(false);
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        if (custDispute)
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCancelledPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the cancelled <c>CustTrans</c> payment record.
    /// </summary>
    /// <param name = "_cancelledPayment">The cancelled CustTrans payment record</param>
    /// <returns></returns>
    public CustTrans parmCancelledPayment(CustTrans _cancelledPayment = cancelledPayment)
    {
        cancelledPayment = _cancelledPayment;
        return cancelledPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>ReasonCode</c>.
    /// </summary>
    /// <param name = "_reasonCode">The optional <c>ReasonCode</c>.</param>
    /// <returns>The <c>ReasonCode</c>.</returns>
    public ReasonCode parmReasonCode(ReasonCode _reasonCode)
    {
        reasonCode = _reasonCode;
        return reasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonComment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>ReasonComment</c>.
    /// </summary>
    /// <param name = "_reasonComment">The optional <c>ReasonComment</c>.</param>
    /// <returns>The <c>ReasonComment</c>.</returns>
    public ReasonComment parmReasonComment(ReasonComment _reasonComment)
    {
        reasonComment = _reasonComment;
        return reasonComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promiseToPay</Name>
				<Source><![CDATA[
    private void promiseToPay()
    {
        if (custTransPayment.TransDate > custDispute.FollowUpDate)
        {
            this.setPromiseBroken();
        }
        else if (this.determinePromiseToPayKept())
        {
            this.promiseToPayKept();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determinePromiseToPayKept</Name>
				<Source><![CDATA[
    private boolean determinePromiseToPayKept()
    {
        CustDisputeHistory custDisputeHistoryLocal;
        AmountCur balance;
        AmountCur amountPaid;

        while select TransactionBalance, AmountCur from custDisputeHistoryLocal
            order by CreatedDateTime desc
            where custDisputeHistoryLocal.Status == CustVendDisputeStatus::PromiseToPay
                && custDisputeHistoryLocal.CustTrans == custDispute.CustTrans
        {
            if (balance == custDisputeHistoryLocal.TransactionBalance)
            {
                break;
            }

            amountPaid += custDisputeHistoryLocal.AmountCur;
            balance = custDisputeHistoryLocal.TransactionBalance;
        }

        return amountPaid <= 0 ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackPayment</Name>
				<Source><![CDATA[
    private void trackPayment()
    {
        switch (lastStatus)
        {
            case CustVendDisputeStatus::PromiseToPay:
                this.applyPayment();
                this.promiseToPay();
                this.transactionResolved();
                break;
            case CustVendDisputeStatus::Disputed:
                this.applyPayment();
                this.transactionResolved();
                break;
            case CustVendDisputeStatus::PromiseToPayBroken:
                this.applyPayment();
                this.transactionResolved();
                break;
            case CustVendDisputeStatus::PromiseToPayKept:
                this.applyPayment();
                this.transactionResolved();
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackCancelledPayment</Name>
				<Source><![CDATA[
    private void trackCancelledPayment()
    {
        switch (lastStatus)
        {
            case CustVendDisputeStatus::PromiseToPay:
            case CustVendDisputeStatus::Disputed:
            case CustVendDisputeStatus::PromiseToPayBroken:
            case CustVendDisputeStatus::PromiseToPayKept:
                this.applyPayment();
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPromiseBroken</Name>
				<Source><![CDATA[
    protected void setPromiseBroken()
    {
        CustCollectionsSetTransactionStatusContext context = CustCollectionsSetTransactionStatusContext::contruct();
        context.parmAmountCur(custDispute.AmountCur);
        context.parmFollowUpDate(dateNull());
        context.parmReasonComment(strFmt("@AccountsReceivable:CustDisputeHistoryAutomationPayment", custTransPayment.Voucher));
        context.parmStatus(CustVendDisputeStatus::PromiseToPayBroken);
        context.parmCreateTask(true);
        context.parmNote(CustCollectionsSetTransactionStatusHelper::userMemo(context, custTransOrig.Voucher));

        this.updateDispute(context);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyWriteOffOrReversal</Name>
				<Source><![CDATA[
    private void applyWriteOffOrReversal()
    {
        CustCollectionsSetTransactionStatusContext context = CustCollectionsSetTransactionStatusContext::contruct();
        context.parmAmountCur(-(custTransOrig.AmountCur));
        context.parmReasonCode(reasonCode);

        if (action == CustDisputeHistoryAutomationAction::WriteOff)
        {
            context.parmReasonComment(reasonComment ? reasonComment : "@AccountsReceivable:CustDIsputeHistoryAutomationPaymentWriteOff");
        }
        else
        {
            context.parmReasonComment(reasonComment ? reasonComment : "@AccountsReceivable:CustDisputeHistoryAutomationPaymentReversed");
        }

        this.updateDispute(context);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyPayment</Name>
				<Source><![CDATA[
    private void applyPayment()
    {
        CustCollectionsSetTransactionStatusContext context = CustCollectionsSetTransactionStatusContext::contruct();
        context.parmAmountCur(custDispute.AmountCur);
        context.parmFollowUpDate(custDispute.FollowUpDate);
        context.parmStatus(lastStatus);

        if (action == CustDisputeHistoryAutomationAction::PaymentCancel)
        {
            context.parmReasonComment(strFmt("@AccountsReceivable:CustDisputeHistoryAutomationPaymentCancelled", custTransPayment.Voucher));
        }
        else
        {
            context.parmReasonComment(strFmt("@AccountsReceivable:CustDisputeHistoryAutomationPayment", custTransPayment.Voucher));
        }

        this.updateDispute(context);
    }

]]></Source>
			</Method>
			<Method>
				<Name>promiseToPayKept</Name>
				<Source><![CDATA[
    private void promiseToPayKept()
    {
        CustCollectionsSetTransactionStatusContext context = CustCollectionsSetTransactionStatusContext::contruct();
        context.parmFollowUpDate(dateNull());
        context.parmAmountCur(custDispute.AmountCur);
        context.parmReasonComment("@AccountsReceivable:CustDisputeHistoryAutomationPromiseKept");
        context.parmStatus(CustVendDisputeStatus::PromiseToPayKept);
        context.parmNote(CustCollectionsSetTransactionStatusHelper::userMemo(context, custTransOrig.Voucher));

        this.updateDispute(context);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionResolved</Name>
				<Source><![CDATA[
    private void transactionResolved(boolean _checkBalance = true)
    {
        custDispute.reread();

        if (_checkBalance && custDispute.TransactionBalance > 0)
        {
            return;
        }

        CustCollectionsSetTransactionStatusContext context = CustCollectionsSetTransactionStatusContext::contruct();
        context.parmFollowUpDate(dateNull());
        context.parmAmountCur(0);
        context.parmReasonComment("@AccountsReceivable:CustDisputeHistoryAutomationResolved");
        context.parmStatus(CustVendDisputeStatus::Resolved);
        context.parmNote(CustCollectionsSetTransactionStatusHelper::userMemo(context, custTransOrig.Voucher));

        this.updateDispute(context);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDispute</Name>
				<Source><![CDATA[
    private void updateDispute(CustCollectionsSetTransactionStatusContext _context)
    {
        CustVendDisputeHelper disputeHelper = CustVendDisputeHelper::construct(custTransOrig.company(), custTransOrig.TableId, custTransOrig.RecId);
        disputeHelper.setValuesByContext(_context);
        disputeHelper.parmLastPayment(custTransPayment.AmountCur);
        disputeHelper.parmIsAutomaticUpdate(true);
        disputeHelper.update();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>