<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTrackRegTrans_FinancialReceipt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is the controller class for the <c>InventTrackingRegisterTrans</c> form.
/// It is used when form is opened to register serial numbers for financial receipt.
/// </summary>
public class InventTrackRegTrans_FinancialReceipt extends InventTrackingRegisterTransForm
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTotalLinesCount</Name>
				<Source><![CDATA[
        public InventQty getTotalLinesCount()
    {
        return abs(InventTrackingRegisterTrans::qtyFinancialReceipt(inventTransOrigin.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormDatasource</Name>
				<Source><![CDATA[
        public void initFormDatasource(FormDataSource _formDataSource)
    {
        QueryBuildDataSource    queryBuildDS = _formDataSource.queryBuildDataSource();

        super(_formDataSource);

        QueryBuildRange financialRefRange = queryBuildDS.addRange(fieldNum(InventTrackingRegisterTrans, RecId));
        financialRefRange.status(RangeStatus::Hidden);
        // show only invoiced serial numbers
        financialRefRange.value(strFmt('(%1 != 0)', fieldStr(InventTrackingRegisterTrans, FinancialRefRecId)));

        QueryBuildRange cancelledRange = queryBuildDS.addRange(fieldNum(InventTrackingRegisterTrans, Cancelled));
        cancelledRange.status(RangeStatus::Hidden);
        cancelledRange.value(queryValue(NoYes::No));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineCountLabel</Name>
				<Source><![CDATA[
        public str lineCountLabel()
    {
        return "@SYS5965";
    }

]]></Source>
			</Method>
			<Method>
				<Name>unregisterSerialNumber</Name>
				<Source><![CDATA[
        public void unregisterSerialNumber(InventSerialId _inventSerialId)
    {
        InventTrackingRegisterTrans inventTrackingRegisterTrans;
        InventDim inventTrackingDim;

        ttsbegin;

        select forupdate firstonly inventTrackingRegisterTrans
        exists join inventTrackingDim
        where inventTrackingDim.InventDimId == inventTrackingRegisterTrans.InventDimId
            && inventTrackingDim.InventSerialId == _inventSerialId
            && inventTrackingRegisterTrans.InventTransOrigin == inventTransOrigin.RecId
            && !inventTrackingRegisterTrans.PhysicalRefRecId
            && !inventTrackingRegisterTrans.Cancelled;

        if (inventTrackingRegisterTrans)
        {
            inventTrackingRegisterTrans.ReadyForFinancialUpdate = NoYes::No;
            inventTrackingRegisterTrans.update();
            this.setOkStatus();
        }
        else
        {
            this.setUnknownSerialStatus();
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
