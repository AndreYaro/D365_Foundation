<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSEnableOrgWideAllocateWaveMethodParallelByDefaultFeature</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSEnableOrgWideAllocateWaveMethodParalledByDefaultFeature</c> class updates all Warehouse Management Processes enabled warehouses from all legal entities to 
/// run the AllocateWave method in parallel.
/// </summary>
internal final class WHSEnableOrgWideAllocateWaveMethodParallelByDefaultFeature extends RunBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the instance of the <c>WHSEnableOrgWideAllocateWaveMethodParalledByDefaultFeature</c>.
    /// </summary>
    /// <returns>An instance of <c>WHSEnableOrgWideAllocateWaveMethodParalledByDefaultFeature</c>.</returns>
    [Hookable(false)]
    internal static WHSEnableOrgWideAllocateWaveMethodParallelByDefaultFeature construct()
    {
        return new WHSEnableOrgWideAllocateWaveMethodParallelByDefaultFeature();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Upgrades all the legal entities to be executing waves in batch and all the warehouses to have the AllocateWave method to be run in parallel.
    /// </summary>
    [Hookable(false)]
    internal void run()
    {
        using (var perfTask = WHSInstrumentationWavePostMethodTaskConfigurationEnabledByDefaultPerformanceTask::newEnableOrgWideAllocateWaveParallelization())
        {
            ttsbegin;

            DataArea dataArea;

            while select id from dataArea
                where dataArea.isVirtual == NoYes::No
            {
                changecompany(dataArea.id)
                {
                    WHSEnableTaskConfigurationWavePostMethod::enableBatchWaveExecutionAndConfigureWaveLockWait();

                    WHSEnableTaskConfigurationWavePostMethod::enableWavePostMethodTaskConfigurationForAllWHSEnabledWarehouses(methodStr(WhsPostEngineBase, allocateWave), WHSAllocateWaveMethodConstants::AllocateWaveMethodDefaultMaximumBatchTasks);
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableWavePostMethodTaskConfigurationForAllWarehouses</Name>
				<Source><![CDATA[
    private void enableWavePostMethodTaskConfigurationForAllWarehouses(WHSPostMethodName _postMethodName, WHSMaximumBatchTasks _maximumBatchTasks)
    {
        InventLocation inventLocation;

        WHSWavePostMethodTaskConfiguration wavePostMethodConfiguration;
        WHSWavePostMethodTaskConfiguration existingWavePostMethodConfiguration;

        insert_recordset wavePostMethodConfiguration
            (InventLocationId, postMethodName, maximumBatchTasks)
        select inventLocationId, _postMethodName, _maximumBatchTasks from inventLocation
            where inventLocation.WHSEnabled == NoYes::Yes
        notexists join existingWavePostMethodConfiguration
            where existingWavePostMethodConfiguration.InventLocationId  == inventLocation.InventLocationId
               && existingWavePostMethodConfiguration.PostMethodName    == _postMethodName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>