<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RouteVersionApplicableResourceCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RouteVersionApplicableResourceCache
{
    date            searchDate;
    ImageListAppl   imageListAppl;
    SchedMethod     schedMethod;
    Map             activityRequirementSetMap;
    Map             applicableResourceCountMap;

    RouteVersion    routeVersion;

    #resAppl
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activityRequirementSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the activity requirement set that applies to the route.
    /// </summary>
    /// <param name="_route">
    /// The route for which to get the activity requirement set.
    /// </param>
    /// <returns>
    /// The activity requirement set record that applies to the route.
    /// </returns>
    public WrkCtrActivityRequirementSet activityRequirementSet(Route _route)
    {
        RouteOpr                        routeOpr;
        InventDim                       inventDim;
        WrkCtrActivityRequirementSet    wrkCtrActivityRequirementSet;

        if (activityRequirementSetMap.exists(_route.RecId))
        {
            return activityRequirementSetMap.lookup(_route.RecId);
        }

        inventDim = routeVersion.inventDim();
        routeOpr = _route.routeOpr(routeVersion.ItemId, inventDim.ConfigId, inventDim.InventSiteId, null);

        wrkCtrActivityRequirementSet = routeOpr.activityRequirementSet();
        activityRequirementSetMap.insert(_route.RecId, wrkCtrActivityRequirementSet);

        return wrkCtrActivityRequirementSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applicableResourceCount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the number of applicable resources for a route operation.
    /// </summary>
    /// <param name="_route">
    ///    The route operation record to find.
    /// </param>
    /// <returns>
    ///    The number of applicable resources for a route operation.
    /// </returns>
    public int applicableResourceCount(Route _route)
    {
        WrkCtrActivityRequirementSet    wrkCtrActivityRequirementSet;
        int                             resourceCount;

        if (applicableResourceCountMap.exists(_route.RecId))
        {
            return applicableResourceCountMap.lookup(_route.RecId);
        }

        wrkCtrActivityRequirementSet = this.activityRequirementSet(_route);
        resourceCount = wrkCtrActivityRequirementSet.applicableResourcesCount(this.parmSearchDate(),
                                                                         this.parmSearchDate(),
                                                                         routeVersion.inventSiteId(),
                                                                         this.parmSchedMethod() == SchedMethod::Detail,
                                                                         this.parmSchedMethod() == SchedMethod::Rough);

        applicableResourceCountMap.insert(_route.RecId, resourceCount);

        return resourceCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applicableResourceQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Composes a query for the resources that as of the search date satisfies all the requirements.
    /// </summary>
    /// <param name="_route">
    ///    The route operation to create the query for.
    /// </param>
    /// <returns>
    ///    A <c>Query</c> object that is based on the <c>WrkCtrTable</c> table as a primary data source.
    /// </returns>
    public Query applicableResourceQuery(Route _route)
    {
        WrkCtrActivityRequirementSet wrkCtrActivityRequirementSet = this.activityRequirementSet(_route);
        return wrkCtrActivityRequirementSet.applicableResourcesQuery(this.parmSearchDate(),this.parmSearchDate(), routeVersion.inventSiteId(),this.parmSchedMethod() == SchedMethod::Detail, this.parmSchedMethod() == SchedMethod::Rough);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applicableStatusImage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets an image number that indicates whether enough applicable resources can be found.
    /// </summary>
    /// <param name="_route">
    ///    A specific route operation to get the status for; optional.
    /// </param>
    /// <returns>
    ///    An image number that indicates whether enough applicable resources can be found.
    /// </returns>
    public int applicableStatusImage(Route _route = null)
    {
        RouteFeasibilityStatus routeFeasibility;

        if (_route)
        {
            routeFeasibility = this.enoughApplicableResources(_route);
        }
        else
        {
            routeFeasibility = this.validateAllOperations();
        }

        switch (routeFeasibility)
        {
            case RouteFeasibilityStatus::OK:
                return imageListAppl.image(#Image_OK);
            case RouteFeasibilityStatus::Error:
                return imageListAppl.image(#Image_NotAtAllOK);
            case RouteFeasibilityStatus::Warning:
                return ImageListAppl.image(#Image_Warning);
            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enoughApplicableResources</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether enough applicable resources can be found for an operation.
    /// </summary>
    /// <param name="_route">
    ///    A specific route operation to get the status for.
    /// </param>
    /// <returns>
    ///    true if enough applicable resources can be found for the operations; otherwise, false.
    /// </returns>
    protected RouteFeasibilityStatus enoughApplicableResources(Route _route)
    {
        int requirementQuantity     = this.requirementQuantity(_route);
        int applicableResourceCount = this.applicableResourceCount(_route);

        if (requirementQuantity == 0)
        {
            return RouteFeasibilityStatus::Warning;
        }
        else if (applicableResourceCount >= requirementQuantity)
        {
            return RouteFeasibilityStatus::OK;
        }
        else
        {
            return RouteFeasibilityStatus::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>imageList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the image list in which the status images can be found.
    /// </summary>
    /// <returns>
    /// An image list in which the status images can be found.
    /// </returns>
    public Imagelist imageList()
    {
        return imageListAppl.imageList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRouteVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the cache based on a route version.
    /// </summary>
    /// <param name="_routeVersion">
    ///    The <c>RouteVersion</c> record to use to initialize.
    /// </param>
    public void initFromRouteVersion(RouteVersion _routeVersion)
    {
        this.reset();

        routeVersion = _routeVersion;

        // Set the date
        searchDate = _routeVersion.FromDate;
        if (searchDate < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
        {
            searchDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        imageListAppl = new ImageListAppl_Req();

        searchDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        schedMethod = SchedMethod::Detail;

        this.reset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSchedMethod</Name>
				<Source><![CDATA[
    public SchedMethod parmSchedMethod(SchedMethod _schedMethod = schedMethod)
    {
        schedMethod = _schedMethod;
        return schedMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSearchDate</Name>
				<Source><![CDATA[
    public date parmSearchDate(date _searchDate = searchDate)
    {
        if (!prmisdefault(_searchDate))
        {
            if (!_searchDate ||
                ((_searchDate < routeVersion.FromDate) && routeVersion.FromDate) ||
                ((_searchDate > routeVersion.ToDate) && routeVersion.ToDate))
            {
                throw error("@SYS314251");
            }
            searchDate = _searchDate;
        }

        return searchDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requirementQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the required number of resources for a specific route operation.
    /// </summary>
    /// <param name="_route">
    /// The route operation to get the quantity for.
    /// </param>
    /// <returns>
    /// The required number of resources.
    /// </returns>
    public int requirementQuantity(Route _route)
    {
        return this.activityRequirementSet(_route).Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the cached objects.
    /// </summary>
    public void reset()
    {
        activityRequirementSetMap = new Map(Types::Int64, Types::Record);
        applicableResourceCountMap = new Map(Types::Int64, Types::Integer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAllOperations</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that all operations in the entire route have enough applicable resources.
    /// </summary>
    /// <returns>
    ///    The route feasibility; accept if all operations in the entire route have enough applicable resources,
    ///    error if there is not enough applicable resources
    ///    and warning for operations where there are no operation relation for the current set of dimensions.
    /// </returns>
    public RouteFeasibilityStatus validateAllOperations()
    {
        RouteFeasibilityStatus routeFeasibility = RouteFeasibilityStatus::OK;
        Route   route;

        while select route
            where route.RouteId == routeVersion.RouteId
        {
            routeFeasibility = this.enoughApplicableResources(route);
            if (routeFeasibility != RouteFeasibilityStatus::OK)
            {
                break;
            }
        }

        return routeFeasibility;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RouteVersionApplicableResourceCache construct()
    {
        return new RouteVersionApplicableResourceCache();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>