<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxRepRecordNumbering_340Sequence_ES</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxRepRecordNumbering_340Sequence_ES</c> class represents an algorithm for 340 sequence
///    numbering of tax report 340 records.The record numbers that are produced by this algorithm follow
///    the following rules: - every "Incoming Tax" report record will get a unique register ID value from
///    1, 2, ... , n. Where n is the total number of "Incoming Tax" report lines. - every "Outgoing Tax"
///    report record will get a unique register ID value from 1, 2, ..., m. Where m is the total number of
///    "Outgoing Tax" report lines.
/// </summary>
/// <remarks>
///    Attention! Numbering of "Incoming Tax" lines and "Outgoing Tax" records is independent.
/// </remarks>
public class TaxRepRecordNumbering_340Sequence_ES extends TaxRepRecordNumbering_ES
{
    int nextIncomingTaxRecordNumber;
    int nextOutgoingTaxRecordNumber;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>firstNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the first record number that is generated by the algorithm.
    /// </summary>
    /// <returns>
    ///    The first record number that is generated by the algorithm
    /// </returns>
    public TaxReportRecord firstNum()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextRecordNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the current <c>TaxReport340</c> line number, depending on properties of the line.
    /// </summary>
    /// <param name="_taxReportLines">
    ///    The line for which the record number is being generated.
    /// </param>
    /// <returns>
    ///    Next record number.
    /// </returns>
    public TaxReportRecord getNextRecordNumber(TaxReportLines _taxReportLines)
    {
        TaxReportRecord result = '';

        switch (_taxReportLines.TaxBookType)
        {
            case TaxBookType_ES::IncomingTax:
                result = int2str(nextIncomingTaxRecordNumber);
                nextIncomingTaxRecordNumber++;
                break;

            case TaxBookType_ES::OutgoingTax:
                result = int2str(nextOutgoingTaxRecordNumber);
                nextOutgoingTaxRecordNumber++;
                break;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the last record number that is generated by the algorithm.
    /// </summary>
    /// <returns>
    ///    The last record number that is generated by the algorithm.
    /// </returns>
    public TaxReportRecord lastNum()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new()
    {
        nextIncomingTaxRecordNumber = 1;
        nextOutgoingTaxRecordNumber = 1;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>