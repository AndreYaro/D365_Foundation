<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_ProdTableOverview_ProdTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Form control handler for the <c>ProdTable</c> datasource of the
/// <c>ProdTableOverview</c> form
/// </summary>
public class PmfFormCtrl_ProdTableOverview_ProdTable
    extends PmfFormCtrl
{
    boolean calledFromFormula;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCtrlPmfProdType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check, if the batch order type controls should be enabled
    /// </summary>
    /// <returns>
    /// true, if the controls should be enabled
    /// </returns>
    /// <remarks>
    /// Method is being used by the button manager to set the state of the
    /// batch order related controls
    /// </remarks>
    public NoYes checkCtrlPmfProdType()
    {
        return #PmfEnabled
            && !calledFromFormula;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCtrlProdType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check, if the standard production order type controls should be enabled
    /// </summary>
    /// <returns>
    /// true, if the controls should be enabled
    /// </returns>
    /// <remarks>
    /// Method is being used by the button manager to set the state of the
    /// standard production order related controls
    /// </remarks>
    public NoYes checkCtrlProdType()
    {
        return !this.checkCtrlPmfProdType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceExecuteQueryPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to be executed before the <c>executeQuery</c> event of the
    /// datasource is being processed
    /// </summary>
    /// <exception cref="Exception::Error">
    /// throws an exception, if the form element has not been set for the class
    /// </exception>
    public void dataSourceExecuteQueryPre()
    {
        FormCheckBoxControl fcc_lock;
        FormComboBoxControl fcc_pmfType;

        if (!this.parmFormRun())
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        fcc_lock = formRun.design().controlName(formControlStr(ProdTableOverview,ctrlLockProdType));
        fcc_pmfType = formRun.design().controlName(formControlStr(ProdTableOverview,ctrlPmfProdType));

        if (this.isPmfEnabled())
        {
            if (fcc_lock.value())
            {
                formDS.query().dataSourceTable(tablenum(ProdTable)).rangeField(
                    fieldnum(ProdTable,ProdType)).value(SysQuery::value(fcc_pmfType.selection()));
            }
            else
            {
                formDS.query().dataSourceTable(tablenum(ProdTable)).rangeField(
                    fieldnum(ProdTable,ProdType)).value(SysQuery::valueUnlimited());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to be called after the <c>ProdTable</c> datasource has been initialized
    /// </summary>
    /// <param name="_buffer">
    /// The record buffer associated with the datasource
    /// </param>
    public void dataSourceInitPost(Common _buffer)
    {
        super(_buffer);

        if (calledFromFormula)
        {
            formDS.query().dataSourceNo(1).addRange(
                fieldnum(ProdTable,ProdType)).value(
                    SysQuery::value(ProdType::Process));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to be called after the form element has been initialized
    /// </summary>
    /// <remarks>
    /// Initializes the form button manager and adjusts various
    /// properties for the usage of the form with formulas
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// throws an exception, if the form element has not been set for this class
    /// </exception>
    public void initPost()
    {
        super();

        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCtrlRules</Name>
				<Source><![CDATA[
    protected void registerCtrlRules()
    {
        super();

        if (this.isFormulaEnabled())
        {
            this.parmFormRun().design().caption("@PRO1970");
            this.parmFormRun().design().titleDatasource('');
        }

        if (this.isPmfEnabled())
        {
            this.registerPmfEnabledCtrlRules();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerPmfEnabledCtrlRules</Name>
				<Source><![CDATA[
    protected void registerPmfEnabledCtrlRules()
    {
        if (this.isCatchWeightEnabled())
        {
            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdTableOverview,BOMGrid)),
                    formRun.design().controlName(formControlStr(ProdTableOverview,ProdBOM_PdsCWUnitId)),
                    methodstr(PmfFormCtrl_ProdTableOverview_ProdTable,
                        isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdTableOverview,BOMGrid)),
                    formRun.design().controlName(formControlStr(ProdTableOverview,ProdBOM_PdsCWRemainFinancial)),
                    methodstr(PmfFormCtrl_ProdTableOverview_ProdTable,
                        isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdTableOverview,BOMGrid)),
                    formRun.design().controlName(formControlStr(ProdTableOverview,ProdBOM_PdsCWInventStup)),
                    methodstr(PmfFormCtrl_ProdTableOverview_ProdTable,
                        isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdTableOverview,BOMGrid)),
                    formRun.design().controlName(formControlStr(ProdTableOverview,ProdBOM_PdsCWRemainPhysical)),
                    methodstr(PmfFormCtrl_ProdTableOverview_ProdTable,
                        isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdTableOverview,BOMGrid)),
                    formRun.design().controlName(formControlStr(ProdTableOverview,ProdBOM_PdsCWInventCalc)),
                    methodstr(PmfFormCtrl_ProdTableOverview_ProdTable,
                        isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdTableOverview,ProductionGrid)),
                    formRun.design().controlName(formControlStr(ProdTableOverview,PdsCWReportedFinishedGood)),
                    methodstr(PmfFormCtrl_ProdTableOverview_ProdTable,
                        isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdTableOverview,ProductionGrid)),
                    formRun.design().controlName(formControlStr(ProdTableOverview,ProdTable_PdsCWBatchStup)),
                    methodstr(PmfFormCtrl_ProdTableOverview_ProdTable,
                        isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdTableOverview,ProductionGrid)),
                    formRun.design().controlName(formControlStr(ProdTableOverview,ProdTable_PdsCWBatchSched)),
                    methodstr(PmfFormCtrl_ProdTableOverview_ProdTable,
                        isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdTableOverview,ProductionGrid)),
                    formRun.design().controlName(formControlStr(ProdTableOverview,PdsCWReportedQtyError)),
                    methodstr(PmfFormCtrl_ProdTableOverview_ProdTable,
                        isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdTableOverview,RouteGrid)),
                    formRun.design().controlName(formControlStr(ProdTableOverview,pdsCWQtyGood)),
                    methodstr(PmfFormCtrl_ProdTableOverview_ProdTable,
                        isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdTableOverview,RouteGrid)),
                    formRun.design().controlName(formControlStr(ProdTableOverview,pdsCWQtyError)),
                    methodstr(PmfFormCtrl_ProdTableOverview_ProdTable,
                        isFormulaEnabled),
                    ButtonRuleEffectType::Visible);
        }

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdTableOverview,CoByProducts)),
                methodstr(PmfFormCtrl_ProdTableOverview_ProdTable,
                    isFormulaEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdTableOverview,Column2)),
                formRun.design().controlName(formControlStr(ProdTableOverview,ctrlPmfProdType)),
                methodstr(PmfFormCtrl_ProdTableOverview_ProdTable,
                    checkCtrlPmfProdType),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdTableOverview,Column2)),
                formRun.design().controlName(formControlStr(ProdTableOverview,ctrlProdType)),
                methodstr(PmfFormCtrl_ProdTableOverview_ProdTable,
                    checkCtrlProdType),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdTableOverview,Production)),
                methodstr(PmfFormCtrl_ProdTableOverview_ProdTable,
                    isFormulaEnabled),
                ButtonRuleEffectType::Caption,
                "@PRO90");

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdTableOverview,ProductionGrid)),
                formRun.design().controlName(formControlStr(ProdTableOverview,ProdTable_ProdId)),
                methodstr(PmfFormCtrl_ProdTableOverview_ProdTable,
                    isFormulaEnabled),
                ButtonRuleEffectType::Label,
                "@PRO90");

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdTableOverview,BOM)),
                methodstr(PmfFormCtrl_ProdTableOverview_ProdTable,
                    isFormulaEnabled),
                ButtonRuleEffectType::Caption,
                "@PRO1115");
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to be called before the form element will be initialized
    /// </summary>
    /// <remarks>
    /// Determine where the form is being called from
    /// </remarks>
    public void initPre()
    {
        FormRun prodTableOverviewForm = this.parmFormRun();

        if (prodTableOverviewForm.args().menuItemName()
                == menuitemdisplaystr(PmfProcessBatchOverview))
        {
            calledFromFormula = true;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check, if the production batch functionality should be enabled
    /// </summary>
    /// <returns>
    /// true, if the functionality should be enabled
    /// </returns>
    public NoYes isFormulaEnabled()
    {
        ProdTable prodTable = buffer;

        return #PmfEnabled
            && (calledFromFormula || prodTable.ProdType == ProdType::Process);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// A table buffer (Common) belonging to the 1st datasource instance.
    /// </param>
    /// <param name="_datasources2">
    /// A table buffer (Common) belonging to the 2nd datasource instance.
    /// </param>
    /// <param name="_datasources3">
    /// A table buffer (Common) belonging to the 3rd datasource instance.
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// </param>
    /// <remarks>
    /// Up to 5 datasources can be passed. If the implementation requires more datasources
    /// additional custom methods should be implemented on the rule implementer class.
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void setDatasources(
        Common  _datasources1,
        Common  _datasources2 = null,
        Common  _datasources3 = null,
        Common  _datasources4 = null,
        Common  _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(ProdTable))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfFormCtrl_ProdTableOverview_ProdTable construct()
    {
        return new PmfFormCtrl_ProdTableOverview_ProdTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new form control handler from the form element
    /// </summary>
    /// <param name="_fr">
    /// The form element to create the form control handler for
    /// </param>
    /// <returns>
    /// The created form control handler
    /// </returns>
    public static PmfFormCtrl_ProdTableOverview_ProdTable newFromForm(
        FormRun _fr)
    {
        PmfFormCtrl_ProdTableOverview_ProdTable frmCtrl;

        frmCtrl = PmfFormCtrl_ProdTableOverview_ProdTable::construct();
        frmCtrl.parmFormRun(_fr);

        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>