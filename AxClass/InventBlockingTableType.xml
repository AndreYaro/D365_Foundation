<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventBlockingTableType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventBlockingTableType</c> class wraps various properties of the different inventory blocking
/// types and callers.
/// </summary>
class InventBlockingTableType
{
    InventBlocking  inventBlocking;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowUnreservePhysicalReservedOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the inventory blocking type allows for unreservation of
    /// physically reserved transactions only.
    /// </summary>
    /// <returns>
    /// true if the type allows unreservation of physically reserved transactions only; otherwise, false.
    /// </returns>
    public boolean allowUnreservePhysicalReservedOnly()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeDeletedByUser</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the inventory blocking can be deleted by user.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean canBeDeletedByUser()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeEditedByUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the inventory blocking can be edited by user.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean canBeEditedByUser()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canExpectedReceiptBeDeletedByUser</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the expected receipt field value on the inventory blocking can be edited by user.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean canExpectedReceiptBeDeletedByUser()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateBlockingTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates or updates the inventory blocking transaction.
    /// </summary>
    /// <param name="_inventMovSubType">
    ///    An <c>InventMovSubType</c> enumeration value that specifies inventory blocking transaction sub
    ///    type; optional.
    /// </param>
    /// <returns>
    ///    <c>InventUpd_Estimated</c> class instance that was used to create or update blocking transactions.
    /// </returns>
    public InventUpd_Estimated createOrUpdateBlockingTransaction(InventMovSubType _inventMovSubType = InventMovSubType::None)
    {
        InventUpd_Estimated estimated = InventUpd_Estimated::newInventMovement(inventBlocking.inventMovement(_inventMovSubType));
        estimated.updateNow();

        return estimated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveBlockingAtStatusLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reserving the inventory at the status level for inventory blocking allows for work creation and execution
    /// but still prevents reserving for outbound orders (e.g., sales orders).
    /// </summary>
    [Hookable(false)]
    internal void reserveBlockingAtStatusLevel()
    {
        ttsbegin;
        
        InventTrans         inventTransIssue;
        InventTransOrigin   inventTransOrigin;
        InventDim           inventDim;

        while select forupdate inventTransIssue
            exists join inventTransOrigin
            where inventTransOrigin.RecId           == inventTransIssue.InventTransOrigin
                && inventTransOrigin.InventTransId  == inventBlocking.InventTransIdIssue
        {
            inventDim = inventTransIssue.inventDim();
            inventDim.clearLocationAndBelowDim(inventTransIssue.ItemId);
            inventDim = InventDim::findOrCreate(inventDim);
            
            inventTransIssue.inventDimId = inventDim.inventDimId;
            inventTransIssue.update();
        }
        
        InventTrans inventTransReceipt;

        while select forupdate inventTransReceipt
            exists join inventTransOrigin
            where inventTransOrigin.RecId           == inventTransReceipt.InventTransOrigin 
                && inventTransOrigin.InventTransId  == inventBlocking.InventTransIdReceipt
        {
            inventDim = inventTransReceipt.inventDim();
            inventDim.clearLocationAndBelowDim(inventTransReceipt.ItemId);
            inventDim = InventDim::findOrCreate(inventDim);
            
            inventTransReceipt.inventDimId = inventDim.inventDimId;
            inventTransReceipt.update();
        }
        
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before an inventory blocking record is deleted.
    /// </summary>
    public void deleting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after an inventory blocking record has been deleted.
    /// </summary>
    public void deleted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBlockingTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the inventory blocking transaction.
    /// </summary>
    /// <param name="_inventMovSubType">
    ///    A <c>InventMovSubType</c> that specifies inventory blocking transaction sub type; optional.
    /// </param>
    public void deleteBlockingTransaction(InventMovSubType _inventMovSubType = InventMovSubType::None)
    {
        InventUpd_DeleteMovement::newMovement(InventMovement::construct(inventBlocking.orig(),_inventMovSubType), false).updateNow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>InventBlocking</c> table buffer from the current item.
    /// </summary>
    public void initFromItem()
    {
        InventDim           inventDim;

        InventTable inventTable = InventTable::find(inventBlocking.ItemId);

        if (!inventTable)
        {
            return;
        }

        if (inventBlocking.InventDimId)
        {
            inventDim = InventDim::find(inventBlocking.InventDimId);
        }

        inventDim.initFromInventTable(inventTable);
        inventDim.setInventoryOwner(inventTable);

        inventBlocking.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before an inventory blocking record is inserted.
    /// </summary>
    public void inserting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after an inventory blocking record has been inserted.
    /// </summary>
    public void inserted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransRefId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the origin inventory transaction ID.
    /// </summary>
    /// <returns>
    ///    An empty string because no origin inventory transaction exists for the manual inventory blockings.
    /// </returns>
    public InventTransRefId inventTransRefId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransRefSign</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the sign of the referred origin inventory transactions.
    /// </summary>
    /// <returns>
    ///    The method returns zero because no origin inventory transaction exists for the manual inventory
    ///    blockings.
    /// </returns>
    public Integer inventTransRefSign()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventUpd_Reservation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>InventUpd_Reservation</c> class.
    /// </summary>
    /// <returns>
    ///     Returns a new instance of the <c>InventUpd_Reservation</c> class.
    ///  </returns>
    protected InventUpd_Reservation inventUpd_Reservation()
    {
        // Calculate reservation quantity
        InventMovement movement = InventMovement::construct(inventBlocking.orig());
        InventQty reservedQty = movement.transIdSum().reserved();
        PdsCWInventQty cwReservedQty = movement.transIdSum().pdsCWReserved();

        InventUpd_Reservation reservation = InventUpd_Reservation::newParameters(movement,
                                                                                 null,
                                                                                 null,
                                                                                 0,
                                                                                 -reservedQty,
                                                                                 true,
                                                                                  false,
                                                                                 -cwReservedQty);

        reservation.parmOnlyUnReservePhysicalReserved(inventBlocking.mustOnlyUnreservePhysicalReserved());

        return reservation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBlockedPhysically</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the inventory should be blocked physically.
    /// </summary>
    /// <returns>
    ///    Always returns <c>NoYes::Yes</c> because manual inventory blockings should always be blocked
    ///    physically.
    /// </returns>
    public NoYes mustBeBlockedPhysically()
    {
        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustClearIssueLocationAndBelow</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if inventory dimensions (location and below) for the blocking issue transaction should be cleared.
    /// </summary>
    /// <returns>
    ///     true if the dimensions should be cleared; otherwise, false.
    /// </returns>
    public boolean mustClearIssueLocationAndBelow()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRecreateReceiptAfterUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the expected receipt must be recreated after updating the inventory blocking record.
    /// </summary>
    /// <returns>
    /// true, if expected receipt must be recreated; otherwise, false.
    /// </returns>
    public boolean mustRecreateReceiptAfterUpdate()
    {
        return inventBlocking.mustRereserveBlockingTransaction() && inventBlocking.hasExpectedReceipt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateReceiptAfterUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the expected receipt must be created after updating the inventory blocking record.
    /// </summary>
    /// <returns>
    /// true, if expected receipt must be created; otherwise, false.
    /// </returns>
    public boolean mustCreateReceiptAfterUpdate()
    {
        return inventBlocking.ExpectReceipt == NoYes::Yes || inventBlocking.InventTransIdReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventBlocking</Name>
				<Source><![CDATA[
    public InventBlocking parmInventBlocking(InventBlocking _inventBlocking = inventBlocking)
    {
        inventBlocking = _inventBlocking;

        return inventBlocking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReceiptOnlyHaveDimensionAboveLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether receipt can only have dimensions above warehouse location.
    /// </summary>
    /// <returns>true, if receipts can only have dimensions above warehouse location; otherwise, false.</returns>
    public boolean canReceiptOnlyHaveDimensionAboveLocation()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveBlockingTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a reservation for the inventory blocking.
    /// </summary>
    public void reserveBlockingTransaction()
    {
        InventQty           reservedQty;

        InventMovement movement = InventMovement::construct(inventBlocking);
        InventUpd_Estimated estimated = InventUpd_Estimated::newInventMovement(movement);

        if (estimated)
        {
            if (this.mustCWForceActualsReservation())
            {
                estimated.parmCWForceActualsReservationUpdate(true);
            }

            // Update inventory reservation
            estimated.updateReservation();

            if (this.mustBeBlockedPhysically())
            {
                if (PdsGlobal::pdsIsCWItem(inventBlocking.ItemId))
                {
                    reservedQty = - estimated.movement().transIdSum(true).pdsCWReservPhysical();
                    if (reservedQty != inventBlocking.PdsCWQty)
                    {
                        throw error(strFmt("@SCM:InventBlockingInsufficientReservedQty", inventBlocking.PdsCWQty, reservedQty, inventBlocking.ItemId));
                    }
                }
                else
                {
                    // Calculate physically reserved quantity
                    reservedQty = - estimated.movement().transIdSum(true).reservPhysical();

                    // Throw exception if inventory must be but can't be blocked physically
                    if (reservedQty != inventBlocking.Qty)
                    {
                        throw error(strFmt("@SCM:InventBlockingInsufficientReservedQty", inventBlocking.Qty, reservedQty, inventBlocking.ItemId));
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unreserveBlockingTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes the reservation for the inventory blocking.
    /// </summary>
    public void unreserveBlockingTransaction()
    {
        using (var context = InventBlockingTableTypeSkipAdjustingQtyOnUnreserveFlight::instance().isEnabled() ? InventUpdReservationSkipAdjustingQtyForCWContext::construct() : null)
        {
            // Remove reservation
            this.inventUpd_Reservation().updateNow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before an inventory blocking record is updated.
    /// </summary>
    public void updating()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after an inventory blocking record has been updated.
    /// </summary>
    /// <param name="_inventBlockingOrig">
    /// The original inventory blocking which is updated.
    /// </param>
    public void updated(InventBlocking _inventBlockingOrig)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the selected <c>ItemId</c> field is inventoried.
    /// </summary>
    /// <param name="_fieldName">
    ///    The field to validate.
    /// </param>
    /// <param name="_arrayIndex">
    ///    The array index of the field to validate; optional.
    /// </param>
    /// <returns>
    ///    true if the <c>ItemId</c> field is inventoried; otherwise, false.
    /// </returns>
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret = true;

        switch (_fieldName)
        {
            case fieldStr(InventBlocking, ItemId):
                if (!InventTable::find(inventBlocking.ItemId).isStocked())
                {
                    ret = checkFailed("@SYS190621");
                }
                break;
            case fieldStr(InventBlocking, ExpectedReceiptDate):
                if (inventBlocking.ExpectedReceiptDate < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) && inventBlocking.ExpectedReceiptDate != inventBlocking.orig().ExpectedReceiptDate)
                {
                    ret = checkFailed(strFmt("@SYS91506", inventBlocking.ExpectedReceiptDate, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventBlockingTableType construct()
    {
        return new InventBlockingTableType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventBlocking</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>InventBlockingTableType</c> class.
    /// </summary>
    /// <param name="_inventBlocking">
    ///    An <c>InventBlocking</c> table record.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InventBlockingTableType</c> class.
    /// </returns>
    public static InventBlockingTableType newFromInventBlocking(InventBlocking _inventBlocking)
    {
        InventBlockingTypeFactoryAttribute attribute = new InventBlockingTypeFactoryAttribute(_inventBlocking.BlockingType);

        InventBlockingTableType inventBlockingTableType = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(InventBlockingTableType), attribute) as InventBlockingTableType;

        if (!inventBlockingTableType)
        {
            inventBlockingTableType = InventBlockingTableType::construct();
        }
       
        inventBlockingTableType.parmInventBlocking(_inventBlocking);
        return inventBlockingTableType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustClearAllBelowStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if inventory dimensions below inventory status should be cleared on the blocking transaction.
    /// </summary>
    /// <returns>
    /// true if the dimensions should be cleared; otherwise, false.
    /// </returns>
    public boolean mustClearAllBelowStatus()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCWForceActualsReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if actual catch weight quatity should be used for reservation.
    /// </summary>
    /// <returns>
    /// true if the actual catch weight quatity should be used for reservation; otherwise, false.
    /// </returns>
    [Hookable(false)]
    protected boolean mustCWForceActualsReservation()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>