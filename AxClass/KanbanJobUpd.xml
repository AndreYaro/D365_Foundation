<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanJobUpd</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>KanbanJobUpd</c> class hierarchy performs status updates for kanban jobs.
/// </summary>
public abstract class KanbanJobUpd extends UpdateBase
{
    KanbanJob               kanbanJob;
    KanbanJob               beforeUpdKanbanJob;
    KanbanJobStatusUpdate   kanbanJobStatusUpdate;
    boolean                 updateKanban;

    ProdJournalVoucherId    voucherId;
    NumberSeq               numberSeq;
    LedgerVoucher           ledgerVoucher;
    LeanConversionCostUpd   costUpd;
    KanbanJobStatus         kanbanJobStatus;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>beginLedger</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the data that is required to update the ledger voucher.
    /// </summary>
    /// <remarks>
    ///    The data is not committed before the <c>commitLedger</c> method is called.
    /// </remarks>
    protected void beginLedger()
    {
        TransactionTxt          transactionTxt = TransactionTxt::construct();
        KanbanJobType           kanbanJobType  = kanbanJob.type();
        TransDate               transDate      = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(kanbanJobStatusUpdate.TransactionDateTime,DateTimeUtil::getCompanyTimeZone()));
        LeanCostingFacadeBase   leanCostingFacade;

        numberSeq      = NumberSeq::newGetNum(ProdParameters::numRefProdJournalVoucherId());
        voucherId      = numberSeq.num();

        ledgerVoucher  = LedgerVoucher::newLedgerPost(DetailSummary::Summary, kanbanJobType.sysModule(), numberSeq.parmNumberSequenceCode());

        transactionTxt.setType(LedgerTransTxt::Kanban);
        transactionTxt.setDate(transDate);
        transactionTxt.setVoucher(voucherId);
        transactionTxt.setKey1(kanbanJob.kanban().KanbanId);

        LedgerVoucherObject ledgerVoucherObject = LedgerVoucherObject::newVoucher(voucherId,
                                                                                  transDate,
                                                                                  kanbanJobType.sysModule(),
                                                                                  kanbanJobType.ledgerTransType());
        ledgerVoucherObject.lastTransTxt(transactionTxt.txt());
        ledgerVoucher.addVoucher(ledgerVoucherObject);

        if (kanbanJobStatus)
        {
            leanCostingFacade = kanbanJobStatus.parmLeanCostingFacade();
        }

        // Initilize the kanbanCostUpdate class to handle the conversion cost
        costUpd = LeanConversionCostUpd::newFromParameters(ledgerVoucher, kanbanJob.kanban().leanProductionFlowReference(), leanCostingFacade, kanbanJob);
    }

]]></Source>
			</Method>
			<Method>
				<Name>commitLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Commits the voucher.
    /// </summary>
    protected void commitLedger()
    {
        if (ledgerVoucher)
        {
            costUpd.updateNow();
            ledgerVoucher.end();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>KanbanJob</c> table buffer from the <c>ParmBuffer</c> object.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the <c>KanbanJob</c> object for update; optional.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The record is not valid; the update was canceled.
    /// </exception>
    protected void initKanbanJob(boolean _forUpdate = false)
    {
        ParmBuffer              parmBuffer  = this.parmParmBuffer();
        KanbanJobStatusUpdate   statusUpdate;

        statusUpdate.data(parmBuffer);

        kanbanJob = KanbanJob::find(statusUpdate.Job,_forUpdate);

        if (!kanbanJob.checkValid(statusUpdate.RecId))
        {
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>KanbanJob</c> table buffer.
    /// </summary>
    /// <returns>
    /// The <c>KanbanJob</c> table buffer.
    /// </returns>
    public KanbanJob kanbanJob()
    {
        if (!kanbanJob)
        {
            this.initKanbanJob();
        }

        return kanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanJobStatusUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the buffer of the <c>KanbanJobStatusUpdate</c> table.
    /// </summary>
    /// <returns>
    ///    The buffer of the <c>KanbanJobStatusUpdate</c> table.
    /// </returns>
    public KanbanJobStatusUpdate kanbanJobStatusUpdate()
    {
        return kanbanJobStatusUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>KanbanJoUpd</c> class.
    /// </summary>
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>notifyRulesEngine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Notifies the rules engine of the status change.
    /// </summary>
    /// <remarks>
    ///    The rules engine must be notified after all status updates are completed for both job and status.
    /// </remarks>
    protected void notifyRulesEngine()
    {
        if (beforeUpdKanbanJob.Status != kanbanJob.Status)
        {
            //notify rules engine
            LeanRulesEngine::onKanbanJobStatusChange(kanbanJob,beforeUpdKanbanJob.Status,kanbanJob.Status < beforeUpdKanbanJob.Status);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanJobStatus</Name>
				<Source><![CDATA[
    public KanbanJobStatus parmKanbanJobStatus(KanbanJobStatus _kanbanJobStatus = kanbanJobStatus)
    {
        kanbanJobStatus = _kanbanJobStatus;
        return kanbanJobStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmBuffer</Name>
				<Source><![CDATA[
    public ParmBuffer parmParmBuffer(ParmBuffer _kanbanJobStatusUpdate = kanbanJobStatusUpdate)
    {
        if (!_kanbanJobStatusUpdate.RecId)
        {
            throw error(strFmt("@SYS134373",tableId2name(tableNum(KanbanJob))));
        }

        kanbanJobStatusUpdate = _kanbanJobStatusUpdate;

        return kanbanJobStatusUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateKanban</Name>
				<Source><![CDATA[
    public boolean parmUpdateKanban(boolean _updateKanban = updateKanban)
    {
        updateKanban = _updateKanban;
        return updateKanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRunStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Notifies the rules engine of the status change.
    /// </summary>
    /// <remarks>
    ///    Any subclass that overwrites this method must insert all logic before the call to the <c>super</c>
    ///    method.
    /// </remarks>
    protected void postRunStatus()
    {
        this.notifyRulesEngine();
        beforeUpdKanbanJob.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the unchanged <c>KanbanJob</c> record to a local variable for later comparison.
    /// </summary>
    /// <remarks>
    ///    Any subclass that overwrites this method must insert all logic after the call to the <c>super</c>
    ///    method.
    /// </remarks>
    protected void preRunStatus()
    {
        beforeUpdKanbanJob.data(kanbanJob);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs the status update.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The validation failed.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    An update conflict occurred and was not recovered.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An update conflict occurred.
    /// </exception>
    public void run()
    {
        #OCCRetryCount

        setPrefix(KanbanMultiJob::description());
        setPrefix(#PreFixField(KanbanJobStatusUpdate,KanbanId));

        try
        {
            ttsbegin;

            if (!this.validate())
            {
                throw Exception::Error;
            }

            this.setParameters();
            this.preRunStatus();
            this.runStatus();
            this.postRunStatus();

            this.updateJobJournal(ParmJobStatus::Executed);

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::DuplicateKeyExceptionNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::DuplicateKeyException;
            }
        }
        catch (Exception::Error)
        {
            this.updateJobJournal(ParmJobStatus::ContainErrors);
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs actions for a specific status update.
    /// </summary>
    abstract protected void runStatus()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets parameters for the status update.
    /// </summary>
    protected void setParameters()
    {
        this.initKanbanJob(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>status</c> field of the <c>KanbanJob</c> table buffer.
    /// </summary>
    /// <param name="_status">
    ///    The new status.
    /// </param>
    /// <remarks>
    ///    The <c>KanbanJob</c> record must already be selected for update.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The record validation failed.
    /// </exception>
    protected void setStatus(LeanKanbanJobStatus _status)
    {
        kanbanJob.Status = _status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>KanbanJob</c> record.
    /// </summary>
    /// <remarks>
    ///    The record must already be selected for update.
    /// </remarks>
    protected void updateKanbanJob()
    {
        kanbanJob.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePhysicalPickingList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the required inventory deduction for a picking list line.
    /// </summary>
    /// <param name="_flushing">
    /// A <c>FlushingPrincipKanban</c> enumeration value that is used to identify the picking list lines to
    /// update.
    /// </param>
    /// <remarks>
    /// There is only one picking list for a kanban.
    /// </remarks>
    protected void updatePhysicalPickingList(FlushingPrincipKanban _flushing)
    {
        KanbanJobPickingList                    kanbanJobPickingList;
        Kanban                                  kanban                 = kanbanJob.kanban();

        if (kanbanJob.type().canHaveBOM())
        {
            ttsbegin;
            KanbanJobPickingListCalcConsumption kanbanJobPickingListCalcConsumption = KanbanJobPickingListCalcConsumption::newStandard(kanbanJob,
                                                                                                                                       kanban
                                                                                                                                       );
            SourceDocumentLineImplementationList sourceDocumentLineImplementationList = SourceDocumentLineImplementationList::construct();

            while select forupdate kanbanJobPickingList
                where kanbanJobPickingList.Job               ==
                                                                kanbanJob.RecId
                   && kanbanJobPickingList.FlushingPrinciple == _flushing
            {
                setPrefix(#PreFixField(kanbanJobPickingList,ItemId));

                KanbanJobPickingListType kanbanJobPickingListType = KanbanJobPickingListType::construct(kanbanJobPickingList);
                if (kanbanJobPickingListType.mustBeInventoryControlled())
                {
                    InventQty inventQty = kanbanJobPickingListCalcConsumption.calculateConsumption(kanbanJobPickingList);

                    if (inventQty != kanbanJobPickingList.Quantity)
                    {
                        InventUpd_Estimated inventUpd_Estimated = InventUpd_Estimated::newInventMovement(kanbanJobPickingList.inventMovement());
                        inventUpd_Estimated.parmTransEstimated(-inventQty);
                        inventUpd_Estimated.parmEstimated(kanbanJobPickingList.Quantity-inventQty);
                        inventUpd_Estimated.updateNow();
                    }

                    InventUpd_Physical inventUpd_Physical = InventUpd_Physical::newKanbanJobPickingList(kanbanJobPickingList,inventQty);
                    inventUpd_Physical.updateNow(ledgerVoucher);

                    if (inventQty != 0)
                    {
                        if (KanbanItemCheckItemId::newStandard(kanbanJobPickingList.ItemId,false,true).isAllowed())
                        {
                            costUpd.addDirectMaterialConsumption(inventUpd_Physical.movement().inventModelType().inventCostMovement().parmInventItemPrice(),
                                                                 - inventUpd_Physical.movement().inventModelType().inventCostMovement().totalQty());
                        }
                    }
                }
                sourceDocumentLineImplementationList.addEnd(kanbanJobPickingList);
            }

            this.completeSourceDocument(Kanbanjob, sourceDocumentLineImplementationList, SourceDocumentAccountingStatus::Completed);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>completeSourceDocument</Name>
				<Source><![CDATA[
    protected void completeSourceDocument(SourceDocumentHeaderImplementation _sourceDocumentHeaderImplementation,
                                          SourceDocumentLineImplementationList _sourceDocumentLineImplementationList,
                                          SourceDocumentAccountingStatus _targetAccountingStatus)
    {
        const SourceDocumentProcessorCaller nullCaller = null;
        const boolean updateImplementationFalse = false;
        const boolean transitionToCompletedStateAccountFullyQualifiedValidationTrue = true;

        SourceDocumentProcessorFacade::submitSourceDocumentImplementation(_sourceDocumentHeaderImplementation,
                                                                          updateImplementationFalse,
                                                                          _targetAccountingStatus,
                                                                          nullCaller,
                                                                          curUserId(),
                                                                          transitionToCompletedStateAccountFullyQualifiedValidationTrue,
                                                                          _sourceDocumentLineImplementationList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the class.
    /// </summary>
    /// <param name="_kanbanJob">
    /// The <c>KanbanJob</c> table buffer used to create the class.
    /// </param>
    /// <param name="_leanKanbanJobStatus">
    /// The target kanban job status.
    /// </param>
    /// <param name="_updateKanban">
    /// A Boolean value that specifies if the parent kanban must be updated.
    /// </param>
    /// <param name="_kanbanJobStatus">
    /// The <c>KanbanJobStatus</c> record to retrieve the <c>LeanCostingFacadeBase</c> instance.
    /// </param>
    /// <returns>
    /// An instance of the <c>KanbanJobUpd</c> class.
    /// </returns>
    public static KanbanJobUpd newKanbanJob(
        KanbanJob           _kanbanJob,
        LeanKanbanJobStatus _leanKanbanJobStatus,
        boolean             _updateKanban,
        KanbanJobStatus     _kanbanJobStatus)
    {
        return KanbanJobUpd::newParmBuffer(KanbanJobStatusUpdate::makeParameters(_kanbanJob.status(),
                                                                                 _leanKanbanJobStatus),
                                                                                 _updateKanban,
                                                                                 _kanbanJobStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParmBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the class.
    /// </summary>
    /// <param name="_kanbanJobStatusUpdate">
    /// The <c>KanbanJobStatusUpdate</c> table buffer used to create the class.
    /// </param>
    /// <param name="_updateKanban">
    /// A Boolean value that specifies if the parent kanban must be updated.
    /// </param>
    /// <param name="_kanbanJobStatus">
    /// The <c>KanbanJobStatus</c> record to retrieve the <c>LeanCostingFacadeBase</c> instance.
    /// </param>
    /// <returns>
    /// An instance of the <c>KanbanJobUpd</c> class.
    /// </returns>
    public static KanbanJobUpd newParmBuffer(
        KanbanJobStatusUpdate _kanbanJobStatusUpdate,
        boolean               _updateKanban,
        KanbanJobStatus       _kanbanJobStatus)
    {
        KanbanJobUpd    kanbanJobUpd;

        if (!_kanbanJobStatusUpdate.ParmId)
        {
            _kanbanJobStatusUpdate.skipTTSCheck(true);
            _kanbanJobStatusUpdate.ParmBuffer::initParmId();
            _kanbanJobStatusUpdate.write();
        }

        switch (_kanbanJobStatusUpdate.Type)
        {
            case LeanKanbanJobStatus::Planned:
                kanbanJobUpd = KanbanJobUpdPlan::construct();
                break;
            case LeanKanbanJobStatus::Prepared:
                kanbanJobUpd = KanbanJobUpdPrepare::construct();
                break;
            case LeanKanbanJobStatus::InProgress:
                kanbanJobUpd = KanbanJobUpdInProgress::construct();
                break;
            case LeanKanbanJobStatus::Completed:
                kanbanJobUpd = KanbanJobUpdComplete::construct();
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        kanbanJobUpd.parmParmBuffer(_kanbanJobStatusUpdate);
        kanbanJobUpd.parmUpdateKanban(_updateKanban);
        kanbanJobUpd.parmKanbanJobStatus(_kanbanJobStatus);

        return kanbanJobUpd;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
