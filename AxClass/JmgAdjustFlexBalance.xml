<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgAdjustFlexBalance</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgAdjustFlexBalance</c> class is used to adjust workers flex balances.
/// </summary>
public class JmgAdjustFlexBalance extends RunBase
{
    QueryRun    queryRun;
    JmgDate     correctionDate;
    DialogField dfCorrectionDate;
    container   packedQuery;

    #define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        correctionDate,
        packedQuery
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        packedQuery = queryRun.pack();
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version     = RunBase::getVersion(_packedClass);
        boolean     ret = true;

        switch (version)
        {
            case #CurrentVersion  :
                [version, #CurrentList] = _packedClass;
                break;
            default :
                ret = false;
                break;
        }

        if (SysQuery::isPackedOk(packedQuery))
        {
            queryRun = new QueryRun(packedQuery);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog(DialogRunbase dialog = null, boolean forceOnClient = false)
    {
        Dialog ret = this.dialogInternal(dialog, forceOnClient);

        ret.caption("@SYS98220");
        dfCorrectionDate    = ret.addField(extendedtypestr(JmgDate), "@SYS98222");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS98220";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves values from the dialog entered by the user.
    /// </summary>
    /// <returns>
    ///    true if the retrieved values are validated correctly; otherwise, false.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret = super();

        correctionDate  = dfCorrectionDate.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found when you call the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        Query                   q;
        QueryBuildDataSource    qbds;
        QueryBuildRange         qbr;

        q       = new Query();
        qbds    = q.addDataSource(tablenum(JmgEmployee));
        qbds.addRange(fieldnum(JmgEmployee, Worker));
        qbds.addRange(fieldnum(JmgEmployee, CalculateGroupId));
        qbds.addRange(fieldnum(JmgEmployee, ApproveGroupId));
        qbds.addRange(fieldnum(JmgEmployee, FlexGroup));
        qbds.addRange(fieldnum(JmgEmployee, Active)).value(queryValue(NoYes::Yes));
        qbds.addRange(fieldnum(JmgEmployee, ActiveFrom)).value(queryRange(dateNull(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
        qbr     = qbds.addRange(fieldnum(JmgEmployee, FlexProfile));
        qbr.value(queryValue(NoYes::Yes));
        qbr.status(RangeStatus::Locked);

        queryRun = new QueryRun(q);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        JmgEmployee             jmgEmployee;
        #OCCRetryCount
        queryRun.reset();

        try
        {
            ttsbegin;

            while (queryRun.next())
            {
                jmgEmployee = queryRun.get(tablenum(JmgEmployee));

                // Check that employee has been transferred at the entered date:
                JmgFlex::createAutomaticFlexCorrections(jmgEmployee, correctionDate, correctionDate);
            }
            ttscommit;
        }
        catch (Exception::Error)
        {
            info("@SYS78886");
        }

        catch (Exception::Deadlock)
        {
            queryRun.reset();
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    queryRun.reset();
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDefaultButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a Default button is to be added to the dialog.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If you click this button it will reset the parameters to the default that is specified in the
    ///    <c>initParmDefault</c> method.
    /// </remarks>
    public boolean showDefaultButton()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to add a Select button to the dialog.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    ///    return a valid <c>queryRun</c> .If you change the return value to false the button will no longer
    ///    be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        JmgAdjustFlexBalance jmgAdjustFlexBalance = new JmgAdjustFlexBalance();

        if (jmgAdjustFlexBalance.prompt())
        {
            jmgAdjustFlexBalance.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>