<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CreditCardProviderAuthorizationResult</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CreditCardProviderAuthorizationResult</c> class stores result from a credit card authorization operation.
/// </summary>
public class CreditCardProviderAuthorizationResult extends CreditCardProviderResult
{
    private CreditCardAuthorizationResult creditCardAuthorizationResult;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the object from an array of properties.
    /// </summary>
    /// <param name="_properties">
    /// An array of properties.
    /// </param>
    protected void init(Microsoft.Dynamics.Retail.PaymentSDK.Portable.PaymentProperty[] _properties)
    {
        str ns = Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.GenericNamespace::get_AuthorizationResponse();
        CreditCardPaymentProperty property;

        super(_properties);

        property = properties.find(ns, Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.AuthorizationResponseProperties::get_UniqueCardId());
        this.parmCreditCardUniqueCardId(property ? property.parmStringValue() : '');
        property = properties.find(ns, Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.AuthorizationResponseProperties::get_Last4Digits());
        this.parmCreditCardNumber(property ? property.parmStringValue() : '');
        property = properties.find(ns, Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.AuthorizationResponseProperties::get_CardType());
        this.parmCreditCardTypeName(property ? property.parmStringValue() : '');
        property = properties.find(ns, Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.AuthorizationResponseProperties::get_ApprovedAmount());
        this.parmTransactionAmount(property ? property.parmDecimalValue() : 0);
        property = properties.find(ns, Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.AuthorizationResponseProperties::get_ProviderTransactionId());
        this.parmAuthorization(property ? property.parmStringValue() : '');
        property = properties.find(ns, Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.AuthorizationResponseProperties::get_AuthorizationResult());
        this.parmAuthorizationResult(property ? CreditCardProviderAuthorizationResult::getAuthorizationResult(property.parmStringValue()) : CreditCardAuthorizationResult::None);
        property = properties.find(ns, Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.AuthorizationResponseProperties::get_AVSResult());
        this.parmAvsResult(property ? CreditCard::convertAvsResult(property.parmStringValue()) : CreditCardAddressVerificationResult::NotReturned);
        property = properties.find(ns, Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.AuthorizationResponseProperties::get_AVSDetail());
        this.parmAvsDetail(property ? CreditCard::convertAvsDetail(property.parmStringValue()) : CreditCardMSAVSDetailCode::None);
        property = properties.find(ns, Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.AuthorizationResponseProperties::get_CVV2Result());
        this.parmCvcResult(property ? CreditCard::convertCvcResult(property.parmStringValue()) : CreditCardMSCVCResultCode::Unknown);
        property = properties.find(ns, Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.AuthorizationResponseProperties::get_PaymentTrackingId());
        this.parmMCRPaymentTrackingId(property ? property.parmStringValue() : '');

        if (EnhancedWalletSupportAndPaymentsImprovementFeature::isEnabled())
        {
            property = properties.find(ns, Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.AuthorizationResponseProperties::get_PaymentReference());
            this.parmProcessorReference(property ? property.parmStringValue() : '');

            property = properties.find(ns, Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.AuthorizationResponseProperties::get_ApprovalCode());
            this.parmApprovalCode(property ? property.parmStringValue() : '');

            property = properties.find(ns, Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.AuthorizationResponseProperties::get_PaymentMethodName());
            this.parmProcessorPayment(property ? property.parmStringValue() : '');
        }

        this.parmResultOK(this.parmAuthorizationResult() == CreditCardAuthorizationResult::Success);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAuthorizationResult</Name>
				<Source><![CDATA[
    public CreditCardAuthorizationResult parmAuthorizationResult(CreditCardAuthorizationResult _value = creditCardAuthorizationResult)
    {
        creditCardAuthorizationResult = _value;
        return creditCardAuthorizationResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromResponse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a result from a response object.
    /// </summary>
    /// <param name="_response">
    /// A response.
    /// </param>
    /// <returns>
    /// A result.
    /// </returns>
    public static CreditCardProviderAuthorizationResult constructFromResponse(Microsoft.Dynamics.Retail.PaymentSDK.Portable.Response _response)
    {
        CreditCardProviderAuthorizationResult result = new CreditCardProviderAuthorizationResult();

        result.init(_response.get_Properties());

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromXmlString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an result from a XML string.
    /// </summary>
    /// <param name="_xmlString">
    /// A XML string.
    /// </param>
    /// <returns>
    /// A result.
    /// </returns>
    public static CreditCardProviderAuthorizationResult constructFromXmlString(str _xmlString)
    {
        CreditCardProviderAuthorizationResult result = new CreditCardProviderAuthorizationResult();

        result.init(Microsoft.Dynamics.Retail.PaymentSDK.Portable.PaymentProperty::ConvertXMLToPropertyArray(_xmlString));

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAuthorizationResult</Name>
				<Source><![CDATA[
    private static CreditCardAuthorizationResult getAuthorizationResult(str _code)
    {
        if (_code == CreditCardProviderAuthorizationResult::authorizationResultToString(Microsoft.Dynamics.Retail.PaymentSDK.Portable.AuthorizationResult::None))
            return CreditCardAuthorizationResult::None;
        else if (_code == CreditCardProviderAuthorizationResult::authorizationResultToString(Microsoft.Dynamics.Retail.PaymentSDK.Portable.AuthorizationResult::Success))
            return CreditCardAuthorizationResult::Success;
        else if (_code == CreditCardProviderAuthorizationResult::authorizationResultToString(Microsoft.Dynamics.Retail.PaymentSDK.Portable.AuthorizationResult::Failure))
            return CreditCardAuthorizationResult::Failure;
        else if (_code == CreditCardProviderAuthorizationResult::authorizationResultToString(Microsoft.Dynamics.Retail.PaymentSDK.Portable.AuthorizationResult::Referral))
            return CreditCardAuthorizationResult::Referral;
        else if (_code == CreditCardProviderAuthorizationResult::authorizationResultToString(Microsoft.Dynamics.Retail.PaymentSDK.Portable.AuthorizationResult::PartialAuthorization))
            return CreditCardAuthorizationResult::PartialAuthorization;
        else if (_code == CreditCardProviderAuthorizationResult::authorizationResultToString(Microsoft.Dynamics.Retail.PaymentSDK.Portable.AuthorizationResult::ImmediateCaptureFailed))
            return CreditCardAuthorizationResult::ImmediateCaptureFailed;

        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>authorizationResultToString</Name>
				<Source><![CDATA[
    private static str authorizationResultToString(Microsoft.Dynamics.Retail.PaymentSDK.Portable.AuthorizationResult _value)
    {
        str s = System.Convert::ToString(_value);

        return s;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>