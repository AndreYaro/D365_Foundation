<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsasnItemCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsasnItemCreate</c> class is used to create ASN items from load lines.
/// </summary>
public class WhsasnItemCreate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addASNItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>WHSASNItem</c> records based on the tmpLoadLine records passed form the form.
    /// </summary>
    /// <param name="_loadLineDS">
    /// The <c>WHSTmpLoadLine</c> data source.
    /// </param>
    /// <param name="_whsuomStructure">
    /// The <c>WHSUOMStructure</c> record that the created asnItem record will relate to.
    /// </param>
    /// <param name="_addAll">
    /// A Boolean that determines if we create an asnItem record for the full qtyLeftToStructure of each loadLine.
    /// </param>
    public void addASNItems(
        FormDataSource  _loadLineDS,
        WHSUOMStructure _whsuomStructure,
        boolean         _addAll = false)
    {
        WHSASNItem          asnItem;
        WHSTmpLoadLine      loadLine;
        Qty                 convertedQtyLeftToStructure;
        InventDim           joinDim;
        InventDimId         newInventDimId;

        loadLine.setTmpData(_loadLineDS.cursor());

        ttsBegin;

        loadLine = _loadLineDS.getFirst();
        while (loadLine)
        {
            if (_addAll || loadLine.AddQuanitity)
            {
                asnItem.clear();
                joinDim = loadLine.joinChild();
                newInventDimId = InventDim::findOrCreate(joinDim).inventDimId;

                asnItem = WHSASNItem::findByLPModuleItemLineNum(_whsuomStructure.LicensePlateId, _whsuomStructure.Module, loadline.ItemId, loadLine.LoadLineRefRecId, newInventDimId, true);

                if (_addAll)
                {
                    EcoResProductUnitConverter productUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(
                                                                            loadLine.ItemId,
                                                                            loadLine.InventDimId,
                                                                            WHSLoadLine::findbyRecId(loadLine.LoadLineRefRecId).UOM,
                                                                            loadLine.UOM,
                                                                            NoYes::No,
                                                                            NoYes::No);
                    productUnitConverter.parmSkipException(true);
                    convertedQtyLeftToStructure = productUnitConverter.convertValue(loadLine.QtyLeftToStructure);

                    asnItem.Qty             += convertedQtyLeftToStructure;
                }
                else
                {
                    if (asnItem.RecId && loadLine.UOM != asnItem.UOM)
                    {
                        Qty convertedQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                                            asnItem.ItemId,
                                            asnItem.InventDimId,
                                            asnItem.Qty,
                                            asnItem.UOM,
                                            loadLine.UOM,
                                            NoYes::No,
                                            NoYes::No);

                        asnItem.Qty = convertedQty + loadLine.AddQuanitity;
                        asnItem.UOM = loadLine.UOM;
                    }
                    else
                    {
                        asnItem.Qty             += loadLine.AddQuanitity;
                    }
                }

                if (!asnItem.RecId)
                {
                    asnItem.LicensePlateId      = _whsuomStructure.LicensePlateId;
                    asnItem.LoadId              = _whsuomStructure.LoadId;
                    asnItem.ItemId              = loadLine.ItemId;
                    asnItem.uom                 = loadLine.uom;
                    asnItem.Module              = _whsuomStructure.Module;
                    asnItem.InventDimId         = newInventDimId;
                    asnItem.LoadLineRefRecId    = loadLine.LoadLineRefRecId;
                    asnItem.ShipmentId          = loadLine.ShipmentId;
                    asnItem.InventTransId       = loadLine.InventTransId;
                    asnItem.insert();
                }
                else
                {
                    asnItem.update();
                }
            }

            loadLine = _loadLineDS.getNext();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpLoadLine</Name>
				<Source><![CDATA[
	/// <summary>
	/// Creates a temporary load line record from the load lines in the shipment to structure.
	/// </summary>
	/// <param name="_whsuomStructure">
	/// <c>WHSUOMStructure</c> record that contains load and shipment info.
	/// </param>
	/// <returns>
	/// Temporary load line record.
	/// </returns>
    WHSTmpLoadLine getTmpLoadLine(WHSUOMStructure _whsuomStructure)
    {
        WHSLoadLine             loadLine;
        WHSTmpLoadLine          tmpLoadLine;

        while select loadLine
            where loadLine.LoadId                == _whsuomStructure.LoadId
            &&    loadLine.QtyLeftToStructure    >  0
            &&    loadLine.ShipmentId            == _whsuomStructure.ShipmentId
        {
            tmpLoadLine.initFromLoadLine(loadLine);
            tmpLoadLine.insert();
        }

        return tmpLoadLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>