<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>whsInventOnHandReserveBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>whsInventOnHandReserveBatch</c> class is used to reserve for batch enabled items.
/// </summary>
public class whsInventOnHandReserveBatch extends WHSInventOnHandReserve
{
    [SysObsolete('The class member is deprecated use sourceToTargetProductUnitConverter instead', false, 30\06\2020)]
    UnitOfMeasureConverter      sourceToTargetUnitConverter;

    [SysObsolete('The class member is deprecated use targetToSourceProductUnitConverter instead', false, 30\06\2020)]
    UnitOfMeasureConverter      targetToSourceUnitConverter;
    
    EcoResProductUnitConverter  sourceToTargetProductUnitConverter;
    EcoResProductUnitConverter  targetToSourceProductUnitConverter;

    UnitOfMeasureSymbol         sourceUnitId;
    UnitOfMeasureSymbol         targetUnitId;
    ItemId                      itemId;
    InventDimId                 inventDimId;
    boolean                     unitConverterResetNeeded;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>convertQuantityBetweenUnits</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts the inventory quantity value from one unit of measure to another by using the conversion
    ///    rules that are defined for an item.
    /// </summary>
    /// <param name="_value">
    ///    The value to convert.
    /// </param>
    /// <param name="_fromUnitId">
    ///    The unit of measure of the input quantity.
    /// </param>
    /// <param name="_toUnitId">
    ///    The unit of measure of the result quantity.
    /// </param>
    /// <param name="_itemId">
    ///    The ID of the item to convert.
    /// </param>
    /// <param name="_inventDimId">
    ///    The dimension ID.
    /// </param>
    /// <returns>
    ///    The converted inventory quantity.
    /// </returns>
    public InventQty convertQuantityBetweenUnits(
        InventQty           _value,
        UnitOfMeasureSymbol _fromUnitId,
        UnitOfMeasureSymbol _toUnitId,
        ItemId              _itemId,
        InventDimId         _inventDimId)
    {
        if (_fromUnitId == _toUnitId)
        {
            return _value;
        }

        this.initializeUnitConversion(_itemId, _inventDimId, _fromUnitId, _toUnitId);

        if (sourceUnitId == _fromUnitId && targetUnitId == _toUnitId)
        {
            return sourceToTargetProductUnitConverter.convertValue(_value);
        }

        return targetToSourceProductUnitConverter.convertValue(_value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertQtyBetweenUnits</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts the inventory quantity value from one unit of measure to another by using the conversion
    ///    rules that are defined for an item.
    /// </summary>
    /// <param name="_value">
    ///    The value to convert.
    /// </param>
    /// <param name="_fromUnitId">
    ///    The unit of measure of the input quantity.
    /// </param>
    /// <param name="_toUnitId">
    ///    The unit of measure of the result quantity.
    /// </param>
    /// <param name="_itemId">
    ///    The ID of the item to convert.
    /// </param>
    /// <param name="_inventDimId">
    ///    The dimension ID.
    /// </param>
    /// <returns>
    ///    The converted inventory quantity.
    /// </returns>
    [SysObsolete('The method is deprecated use convertQuantityBetweenUnits instead', false, 30\06\2018)]
    public InventQty convertQtyBetweenUnits(
        InventQty           _value,
        UnitOfMeasureSymbol _fromUnitId,
        UnitOfMeasureSymbol _toUnitId,
        ItemId              _itemId)
    {
        return this.convertQuantityBetweenUnits(_value, _fromUnitId, _toUnitId, _itemId, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeUnitConversion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets up the unit of measure conversion.
    /// </summary>
    /// <param name="_itemId">
    ///    The ID of the item to convert.
    /// </param>
    /// <param name="_inventDimId">
    ///    The dimension ID.
    /// </param>
    /// <param name="_sourceUnitId">
    ///    The source unit of measure.
    /// </param>
    /// <param name="_targetUnitId">
    ///    The target unit of measure.
    /// </param>
    private void initializeUnitConversion(
        ItemId              _itemId,
        InventDimId         _inventDimId,
        UnitOfMeasureSymbol _sourceUnitId,
        UnitOfMeasureSymbol _targetUnitId)
    {
        if (   !unitConverterResetNeeded
            && (itemId == _itemId              && inventDimId == _inventDimId)
            && ((sourceUnitId == _sourceUnitId && targetUnitId == _targetUnitId)
            ||  (sourceUnitId == _targetUnitId && targetUnitId == _sourceUnitId)))
        {
            return;
        }

        unitConverterResetNeeded = false;

        itemId       = _itemId;
        inventDimId  = _inventDimId;
        sourceUnitId = _sourceUnitId;
        targetUnitId = _targetUnitId;

        sourceToTargetProductUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(
                                                    itemId,
                                                    inventDimId,
                                                    sourceUnitId,
                                                    targetUnitId,
                                                    NoYes::Yes);

        targetToSourceProductUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(
                                                    itemId, 
                                                    inventDimId,
                                                    targetUnitId,
                                                    sourceUnitId,
                                                    NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransSumBuffer</Name>
				<Source><![CDATA[
    public InventTransSum parmTransSumBuffer(InventTransSum _transSumBuffer = transSumBuffer)
    {
        transSumBuffer = _transSumBuffer;

        return transSumBuffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveNow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the quantity that is reserved in the movement unit.
    /// </summary>
    /// <param name="_set">
    ///    true if the quantity passed in <paramref name="_reserveNow" /> is reserved; otherwise, false.
    /// </param>
    /// <param name="_whsInventReserve">
    ///    An <c>WHSInventReserve</c> record required to determine the quantity reserved.
    /// </param>
    /// <param name="_reserveNow">
    ///    The quantity that is reserved in the movement unit.
    /// </param>
    /// <returns>
    ///    The quantity that is reserved in the movement unit.
    /// </returns>
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the reserveHandlingQuantityNow method. Extenders should move their logic to wrap or override the reserveQuantityNow method.', false, 30\06\2020)]
    public Qty reserveNow(
        boolean             _set,
        WHSInventReserve    _whsInventReserve,
        InventQty           _reserveNow)
    {
        Qty qty = this.convertQuantityBetweenUnits(_reserveNow, targetUnitId, sourceUnitId, _whsInventReserve.ItemId, _whsInventReserve.InventDimId);

        qty = super(_set, _whsInventReserve, qty);

        return this.convertQuantityBetweenUnits(qty, sourceUnitId, targetUnitId, _whsInventReserve.ItemId, _whsInventReserve.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveHandlingQuantityNow</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public InventHandlingQty reserveHandlingQuantityNow(
        boolean             _set,
        WHSInventReserve    _whsInventReserve,
        InventHandlingQty   _reserveNow)
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightItemLogic(funcName(), this.movement().itemId()))
        {
            Qty qty = this.convertQuantityBetweenUnits(_reserveNow, targetUnitId, sourceUnitId, _whsInventReserve.ItemId, _whsInventReserve.InventDimId);

            qty =  super(_set, _whsInventReserve, qty);

            return this.convertQuantityBetweenUnits(qty, sourceUnitId, targetUnitId, _whsInventReserve.ItemId, _whsInventReserve.InventDimId);
        }
        
       // super will eventually call the derived reserveNow on this class which does the unit conversion
        return super(_set, _whsInventReserve, _reserveNow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSInventOnHandReserveBatch construct()
    {
        return new WHSInventOnHandReserveBatch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromFormRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WHSInventOnHandReserveBatch</c> class based on the reservation form instance.
    /// </summary>
    /// <param name="_onHandReserveFormRun">
    /// The reservation form.
    /// </param>
    /// <returns>
    /// A new instance of the <c>WHSInventOnHandReserveBatch</c> class.
    /// </returns>
    public static WHSInventOnHandReserveBatch newFromFormRun(FormRun _onHandReserveFormRun)
    {
        WHSInventOnHandReserveBatch reserve = WHSInventOnHandReserveBatch::construct();

        reserve.parmFormRun(_onHandReserveFormRun);

        return reserve;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canChangeReservation</Name>
				<Source><![CDATA[
        /// <summary>
    ///   Check if the reservation on the inventory dimensions can be changed for the specified quantity.
    /// </summary>
    /// <param name="_inventDim">
    ///   The inventDim value to be reserved.
    /// </param>
    /// <param name="_qtyToChange">
    ///   The quantity of reservation change.
    /// </param>
    /// <returns>
    ///   True if the reservation can be changed; Otherwise, false.
    /// </returns>
    public boolean canChangeReservation(InventDim _inventDim, Qty _qtyToChange)
    {
        return super(_inventDim, _qtyToChange);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
    public inventDimId parmInventDimId(inventDimId _inventDimId = inventDimId)
    {
        inventDimId = _inventDimId;

        return inventDimId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>