<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqCalcTaskControllerSingleThread</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ReqCalcTaskControllerSingleThread extends ReqCalcTaskController
{
    Map tasksList;
    Map statusStartTime;
    Map statusEndTime;

    RefRecId tempRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assignBundle</Name>
				<Source><![CDATA[
    public boolean assignBundle(ReqCalcTasksBundle _reqCalcTasksBundle)
    {
        _reqCalcTasksBundle.RecId = tasksList.elements();
        return _reqCalcTasksBundle.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns a new task from the task pool.
    /// </summary>
    /// <param name="_reqCalcTask">
    /// A <c>ReqCalcTask</c> record with the task that was assigned or an empty record if no more tasks are available to be processed.
    /// </param>
    /// <returns>
    /// true if more tasks are available to be processed; otherwise, false.
    /// </returns>
    public boolean assignTask(ReqCalcTask _reqCalcTask)
    {
        MapEnumerator mapEnumerator;
        ReqCalcTaskData taskData;

        mapEnumerator = tasksList.getEnumerator();
        if (mapEnumerator.moveNext())
        {
            taskData = mapEnumerator.currentValue();
            taskData.copyToRecord(_reqCalcTask);

            if (!statusStartTime.exists(_reqCalcTask.Status))
            {
                statusStartTime.insert(_reqCalcTask.Status, DateTimeUtil::utcNow());
            }

            return true;
        }

        _reqCalcTask.RecId = 0;
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBundle</Name>
				<Source><![CDATA[
    public ReqCalcTasksBundle createBundle(
        ReqProcessStatus     _status,
        BOMLevel             _level      = 0,
        ReqLevelState        _levelState = ReqLevelState::NotApplicable,
        ReqProcessListNum    _listNum = -1)
    {
        ReqCalcTasksBundle bundle;

        bundle.Status = _status;
        bundle.Level = _level;
        bundle.LevelState = _levelState;
        bundle.ListNum = _listNum;

        return bundle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBundle</Name>
				<Source><![CDATA[
    public ReqCalcTasksBundle initBundle(
        ReqProcessStatus     _status,
        BOMLevel             _level      = 0,
        ReqLevelState        _levelState = ReqLevelState::NotApplicable,
        ReqProcessListNum    _listNum = -1)
    {
        return this.createBundle(_status, _level, _levelState, _listNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllTasks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all the tasks for a given process.
    /// </summary>
    public void deleteAllTasks()
    {
        this.initTaskList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>startTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts a task by setting the start time to the current time, and state to processing.
    /// </summary>
    /// <param name="_reqCalcTask">
    /// A <c>ReqCalcTask</c> identifying the task to start.
    /// </param>
    public void startTask(ReqCalcTask _reqCalcTask)
    {
        _reqCalcTask.ProcessingState = ReqCalcTaskState::Processing;
        _reqCalcTask.StartTime = DateTimeUtil::utcNow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>endTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ends a task.
    /// </summary>
    /// <param name="_reqCalcTask">
    /// A <c>ReqCalcTask</c> identifying the task to end.
    /// </param>
    /// <param name="_copyTaskToTrace">
    /// A boolean that indicates whether the task should be copied to the task trace.
    /// </param>
    public void endTask(ReqCalcTask     _reqCalcTask,
                        boolean         _copyTaskToTrace = false)
    {
        _reqCalcTask.EndTime = DateTimeUtil::utcNow();
        statusEndTime.insert(_reqCalcTask.Status,  DateTimeUtil::utcNow());

        if (_copyTaskToTrace)
        {
            this.saveTaskToTrace(_reqCalcTask);
        }

        var reqCalcTaskData = reqCalcTaskData::newReqCalcTask(_reqCalcTask);

        tasksList.remove(this.taskKey(reqCalcTaskData));
    }

]]></Source>
			</Method>
			<Method>
				<Name>endTaskBundle</Name>
				<Source><![CDATA[
    public void endTaskBundle(ReqCalcTasksBundle _reqCalcTasksBundle)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>endTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Does nothing in the single threaded setup.
    /// </summary>
    public void endTransaction()
    {
        // do nothing since this is a single threaded setup
    }

]]></Source>
			</Method>
			<Method>
				<Name>endAllTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Does nothing in the single threaded setup.
    /// </summary>
    public void endAllTransactions()
    {
        // do nothing since this is a single threaded setup
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentBundleTask</Name>
				<Source><![CDATA[
    public ReqCalcTask getCurrentBundleTask()
    {
        this.assignTask(currentBundleTask);

        return currentBundleTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStatusRuntime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computes the runtime for a range of phases of the master planning process.
    /// </summary>
    /// <param name="_fromStatus">
    /// Lowest inclusive status to use for runtime computation.
    /// </param>
    /// <param name="_toStatus">
    /// Highest inclusive status to use for runtime computation.
    /// </param>
    /// <returns>
    /// The amount of seconds spent in the phases between the from and to statuses.
    /// </returns>
    public Integer getStatusRuntime(ReqProcessStatus _fromStatus,
                                    ReqProcessStatus _toStatus)
    {
        utcdatetime startTime;
        utcdatetime endTime;

        if (statusStartTime.exists(_fromStatus) && statusEndTime.exists(_toStatus))
        {
            startTime = statusStartTime.lookup(_fromStatus);
            endTime   = statusEndTime.lookup(_toStatus);
        }
        else
        {
            startTime = DateTimeUtil::minValue();
            endTime   = startTime;
        }

        return any2int(DateTimeUtil::getDifference(endTime, startTime));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getThreadCount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the count of threads.
    /// </summary>
    /// <returns>
    ///    The number of used threads.
    /// </returns>
    /// <remarks>
    ///    Always returns 1 because this is a single threaded task controller.
    /// </remarks>
    public int getThreadCount()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a task with a given status, level, level state and list number (bundle).
    /// </summary>
    /// <param name="_reqCalcTask">
    /// A <c>ReqCalcTask</c> record to be initialized.
    /// </param>
    /// <param name="_bundle">
    /// A bundle reference.
    /// </param>
    /// <param name="_itemId">
    /// The item ID to be processed in the task; optional.
    /// </param>
    /// <param name="_taskGroupId">
    /// Task group ID; optional.
    /// </param>
    protected void initTask(ReqCalcTask         _reqCalcTask,
                            ReqCalcTasksBundle  _bundle,
                            ItemId              _itemId     = ''
                            ,PmfReqTaskGroupId   _taskGroupId = 0
                            )
    {
        super(_reqCalcTask, _bundle, _itemId, _taskGroupId);
        // Set a fake RecId to ensure uniqueness in the key generation
        tempRecId++;
        _reqCalcTask.RecId              = tempRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaskList</Name>
				<Source><![CDATA[
    private void initTaskList()
    {
        tasksList = new Map(Types::String, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a task with a given status, level, level state and list number (bundle).
    /// </summary>
    /// <param name="_bundle">
    /// The bundle reference.
    /// </param>
    /// <param name="_itemId">
    /// The item ID to be processed by in the task; optional.
    /// </param>
    /// <param name="_taskGroupId">
    /// The task group ID.
    /// </param>
    /// <returns>
    /// The task ID.
    /// </returns>
    /// <remarks>
    /// Use <c>_bundle</c> parameter instead of obsoleted <c>_status</c>, <c>_level</c>, <c>_levelStage</c> and <c>_listNum</c> parameters.
    /// </remarks>
    public RecId insertTask(
                            ReqCalcTasksBundle   _bundle,
                            ItemId               _itemId        = '',
                            PmfReqTaskGroupId    _taskGroupId   = 0
                           )
    {
        ReqCalcTask     reqCalcTask;
        ReqCalcTaskData reqCalcTaskData;

        this.initTask(reqCalcTask, _bundle, _itemId, _taskGroupId);
        this.updateTaskFromBundle(reqCalcTask, _bundle);
        this.pmfAddTaskGroupId(_bundle.Level, _taskGroupId);

        reqCalcTaskData = ReqCalcTaskData::newReqCalcTask(reqCalcTask);
        tasksList.insert(this.taskKey(reqCalcTaskData), reqCalcTaskData);

        return reqCalcTask.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaskAndAddToList</Name>
				<Source><![CDATA[
    protected void initTaskAndAddToList(
                            ReqCalcTasksBundle  _bundle,
                            ItemId              _itemId     = '',
                            PmfReqTaskGroupId   _taskGroupId = 0
                           )
    {
        this.insertTask(_bundle, _itemId, _taskGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        this.initTaskList();
        statusStartTime = new Map(Types::Enum, Types::UtcDateTime);
        statusEndTime = new Map(Types::Enum, Types::UtcDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>readBundleTasks</Name>
				<Source><![CDATA[
    public boolean readBundleTasks(ReqCalcTasksBundle _bundle)
    {
        currentBundle = _bundle;

        return tasksList.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetAssignedNotCompletedTasks</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reverts the assignment status of the tasks that are in progress for a given thread.
    /// </summary>
    public void resetAssignedNotCompletedTasks()
    {
        // nothing done here
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaskBundleAsRunning</Name>
				<Source><![CDATA[
    public void setTaskBundleAsRunning(ReqCalcTasksBundle _reqCalcTaskBundle)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>detectAndResetOrphanTasksBundles</Name>
				<Source><![CDATA[
    /// <summary>
    /// Does nothing in the single threaded setup.
    /// </summary>
    internal void detectAndResetOrphanTasksBundles()
    {
        // do nothing since this is a single threaded setup
    }

]]></Source>
			</Method>
			<Method>
				<Name>startTransactionInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Does nothing in the single threaded setup.
    /// </summary>
    internal void startTransactionInternal()
    {
        // single threaded nothing done here
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeExistingUnprocessedBundles</Name>
				<Source><![CDATA[
    /// <summary>
    /// Does nothing in the single threaded setup.
    /// </summary>
    protected void removeExistingUnprocessedBundles(
        ReqProcessStatus     _status,
        BOMLevel             _level,
        ReqLevelState        _levelState,
        ReqProcessListNum    _listNum    = -1)
    {
        // single threaded nothing done here
    }

]]></Source>
			</Method>
			<Method>
				<Name>taskKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Defines the task key.
    /// </summary>
    /// <param name="_taskData">
    ///     The <c>ReqCalcTaskData</c> instance to form the key.
    /// </param>
    /// <returns>
    ///     The string representation of the key.
    /// </returns>
    private str taskKey(ReqCalcTaskData _taskData)
    {
        #define.IntOffset(1000000)
        #define.NumLength(10)
        #define.EnumLength(5)

        return num2Str0(enum2int(_taskData.parmProcessStatus()), #EnumLength) + '#' +
               num2Str0(_taskData.parmLevel() + #IntOffset, #NumLength) + '#' +
               num2Str0(enum2int(_taskData.parmLevelState()), #EnumLength) + '#' +
               num2Str0(_taskData.parmListNum() + #IntOffset, #NumLength) + '#' +
               _taskData.parmItemId()
               + '#' + int642str(_taskData.parmTaskGroupId())
               + '#' + int642str(_taskData.parmRecId())
               ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static ReqCalcTaskControllerSingleThread construct()
    {
        return new ReqCalcTaskControllerSingleThread();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newController</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>ReqCalcTaskControllerSingleThread</c> class.
    /// </summary>
    /// <param name="_reqPlanId">
    /// The plan ID.
    /// </param>
    /// <param name="_processId">
    /// The master planning process ID.
    /// </param>
    /// <returns>
    /// A new instance of the <c>ReqCalcTaskController</c> class.
    /// </returns>
    public static ReqCalcTaskControllerSingleThread newController(ReqPlanId     _reqPlanId,
                                                                  ReqProcessId  _processId)
    {
        ReqCalcTaskControllerSingleThread taskController = ReqCalcTaskControllerSingleThread::construct();

        if (!_reqPlanId || !_processId)
        {
            throw error(strfmt("@SYS118115", funcname()));
        }

        taskController.parmReqPlanId(_reqPlanId);
        taskController.parmProcessId(_processId);

        return taskController;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>