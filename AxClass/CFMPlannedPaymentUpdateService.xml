<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMPlannedPaymentUpdateService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Service class for planned payment update periodic operation.
/// </summary>
public class CFMPlannedPaymentUpdateService
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQueryCrossCompany</Name>
				<Source><![CDATA[
    private Query buildQueryCrossCompany(CFMPlannedPaymentUpdateContract _contract)
    {
        Query query = new Query();

        query.allowCrossCompany(true);

        for (int i = conLen(_contract.parmDataAreas()); i > 0 ; i--)
        {
            SelectableDataArea dataArea = conPeek(_contract.parmDataAreas(), i);
            query.addCompanyRange(dataArea);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCustInvoiceTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process Free Text Invoices.
    /// </summary>
    /// <param name="_contract">
    /// Contract
    /// </param>
    private void processCustInvoiceTables(CFMPlannedPaymentUpdateContract _contract)
    {
        Query query = this.buildQueryCrossCompany(_contract);

        QueryBuildDataSource qbds = query.addDataSource(tableNum(CustInvoiceTable));
        QueryBuildRange range = qbds.addRange(fieldNum(CustInvoiceTable, DueDate));
        range.value(queryRange(_contract.parmDateFrom(), _contract.parmDateTo() ? _contract.parmDateTo() : maxDate()));

        if (!_contract.parmRecalculateAll())
        {
            qbds = qbds.addDataSource(tableNum(CFMPlannedPaymentTable));
            qbds.joinMode(JoinMode::NoExistsJoin);
            qbds.addLink(fieldNum(SalesTable, RecId), fieldNum(CFMPlannedPaymentTable, SourceRecId));
            range = qbds.addRange(fieldNum(CFMPlannedPaymentTable, SourceType));
            range.value(queryValue(CFMPlannedPaymentSourceType::CustInvoiceTable));
        }

        QueryRun queryRun = new queryRun(query);

        while (queryRun.next())
        {
            CustInvoiceTable custInvoiceTable = queryRun.get(tableNum(CustInvoiceTable));

            changeCompany(custInvoiceTable.company())
            {
                CFMPlannedPaymentCalc calc = CFMPlannedPaymentCalc::construct(CustInvoiceTable);
                if (calc)
                {
                    calc.calc();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPurchaseOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process purchase orders.
    /// </summary>
    /// <param name="_contract">
    /// Contract
    /// </param>
    private void processPurchaseOrders(CFMPlannedPaymentUpdateContract _contract)
    {
        Query query = this.buildQueryCrossCompany(_contract);

        QueryBuildDataSource qbds = query.addDataSource(tableNum(PurchTable));

        QueryBuildRange range = qbds.addRange(fieldNum(PurchTable, DeliveryDate));

        // set range on ConfirmedDlv if it has value, otherwise use DeliveryDate
        range.value(
            strFmt('(((%1.%2 != %4) && (%1.%2 >= %5) && (%1.%2 <= %6)) ||'+
                   ' ((%1.%2 == %4) && (%1.%3 >= %5) && (%1.%3 <= %6)))',
                   qbds.name(),                            // %1: PurchTable
                   fieldStr(PurchTable, ConfirmedDlv),     // %2: ConfirmedDlv
                   fieldStr(PurchTable, DeliveryDate),     // %3: DeliveryDate
                   date2StrXpp(dateNull()),                // %4: dateNull
                   date2StrXpp(_contract.parmDateFrom()),  // %5: dateFrom
                   date2StrXpp(_contract.parmDateTo() ? _contract.parmDateTo() : maxDate())));  // %6: dateTo

        if (!_contract.parmRecalculateAll())
        {
            qbds.addRange(fieldNum(PurchTable, DocumentState)).value(queryValue(VersioningDocumentState::Confirmed));
            qbds = qbds.addDataSource(tableNum(CFMPlannedPaymentTable));
            qbds.joinMode(JoinMode::NoExistsJoin);
            qbds.addLink(fieldNum(PurchTable, RecId), fieldNum(CFMPlannedPaymentTable, SourceRecId));
            range = qbds.addRange(fieldNum(CFMPlannedPaymentTable, SourceType));
            range.value(queryValue(CFMPlannedPaymentSourceType::PurchTable));
        }

        QueryRun queryRun = new queryRun(query);

        while (queryRun.next())
        {
            PurchTable purchTable = queryRun.get(tableNum(PurchTable));

            changeCompany(purchTable.company())
            {
                CFMPlannedPaymentCalc calc = CFMPlannedPaymentCalc::construct(purchTable);

                if (calc)
                {
                    calc.calc();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSalesOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process sales orders.
    /// </summary>
    /// <param name="_contract">
    /// Contract
    /// </param>
    private void processSalesOrders(CFMPlannedPaymentUpdateContract _contract)
    {
        Query query = this.buildQueryCrossCompany(_contract);

        QueryBuildDataSource qbds = query.addDataSource(tableNum(SalesTable));
        QueryBuildRange range = qbds.addRange(fieldNum(SalesTable, ShippingDateRequested));

        // set range on ConfirmedDlv if it has value, otherwise use DeliveryDate
        range.value(
            strFmt('(((%1.%2 != %4) && (%1.%2 >= %5) && (%1.%2 <= %6)) ||' +
                   ' ((%1.%2 == %4) && (%1.%3 >= %5) && (%1.%3 <= %6)))',
                   qbds.name(),                                    // %1: SalesTable
                   fieldStr(SalesTable, ShippingDateConfirmed),    // %2: ConfirmedDlv
                   fieldStr(SalesTable, ShippingDateRequested),    // %3: DeliveryDate
                   date2StrXpp(dateNull()),                        // %4: dateNull
                   date2StrXpp(_contract.parmDateFrom()),          // %5: dateFrom
                   date2StrXpp(_contract.parmDateTo() ? _contract.parmDateTo() : maxDate()))); // %6: dateTo

        if (!_contract.parmRecalculateAll())
        {
            qbds = qbds.addDataSource(tableNum(CFMPlannedPaymentTable));
            qbds.joinMode(JoinMode::NoExistsJoin);
            qbds.addLink(fieldNum(SalesTable, RecId), fieldNum(CFMPlannedPaymentTable, SourceRecId));
            range = qbds.addRange(fieldNum(CFMPlannedPaymentTable, SourceType));
            range.value(queryValue(CFMPlannedPaymentSourceType::SalesTable));
        }

        QueryRun queryRun = new queryRun(query);

        while (queryRun.next())
        {
            SalesTable salesTable = queryRun.get(tableNum(SalesTable));

            changeCompany(salesTable.company())
            {
                CFMPlannedPaymentCalc calc = CFMPlannedPaymentCalc::construct(salesTable);

                if (calc)
                {
                    calc.calc();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs update procedure for all selected sources and data areas.
    /// </summary>
    /// <param name="_dataContract">
    /// Data contract.
    /// </param>
    public void update(CFMPlannedPaymentUpdateContract _dataContract)
    {
        if (conFind(_dataContract.parmSources(), CFMEnumLookupTmp::labelText(enumNum(CFMPlannedPaymentSourceType), CFMPlannedPaymentSourceType::SalesTable)))
        {
            this.processSalesOrders(_dataContract);
        }

        if (conFind(_dataContract.parmSources(), CFMEnumLookupTmp::labelText(enumNum(CFMPlannedPaymentSourceType), CFMPlannedPaymentSourceType::PurchTable)))
        {
            this.processPurchaseOrders(_dataContract);
        }

        if (conFind(_dataContract.parmSources(), CFMEnumLookupTmp::labelText(enumNum(CFMPlannedPaymentSourceType), CFMPlannedPaymentSourceType::CustInvoiceTable)))
        {
            this.processCustInvoiceTables(_dataContract);
        }

        info("@Cashflowmanagement:PlannedPaymentsCreated");
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>