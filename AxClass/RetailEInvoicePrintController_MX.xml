<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailEInvoicePrintController_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailEInvoicePrintController_MX</c> class is controller class for <c>EInvoiceReport_MX</c> report.
/// </summary>
public class RetailEInvoicePrintController_MX extends SrsReportRunController implements BatchRetryable
{
    EInvoiceJour_MX eInvoiceJour;
    FileName originFileName;
  
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmEInvoiceJour</Name>
				<Source><![CDATA[
    public EInvoiceJour_MX parmEInvoiceJour(EInvoiceJour_MX _eInvoiceJour = einvoiceJour)
    {
        eInvoiceJour = _eInvoiceJour;
        return eInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        SrsReportRdpRdlWrapperContractInfo wrapperContractInfo;
        SrsReportDesignProperties designProperties;
        SrsReportRdlDataMemberInfo rdlDataMemeberInfo;
        MapEnumerator parametersMapEnumerator;
    
        super();
    
        if (!this.getDataContractInfoObjects().exists(classStr(SrsReportRdpRdlWrapperContract)))
        {
            return;
        }
    
        wrapperContractInfo = this.getDataContractInfoObjects().lookup(classStr(SrsReportRdpRdlWrapperContract));
    
        if (wrapperContractInfo.getRdpContractInfo())
        {
            parametersMapEnumerator = wrapperContractInfo.getRdpContractInfo().getMembers().getEnumerator();
    
            while (parametersMapEnumerator.moveNext())
            {
                designProperties = parametersMapEnumerator.currentValue();
                designProperties.parmHidden(true);
            }
        }
    
        if (wrapperContractInfo.getRdlContractInfo())
        {
            parametersMapEnumerator = wrapperContractInfo.getRdlContractInfo().getMembers().getEnumerator();
    
            while (parametersMapEnumerator.moveNext())
            {
                rdlDataMemeberInfo = parametersMapEnumerator.currentValue();
                rdlDataMemeberInfo.parmVisible(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        EInvoiceCFDIReportContract_MX contract;
    
        super();
    
        this.setPrintSettings();
    
        contract = this.parmReportContract().parmRdpContract() as EInvoiceCFDIReportContract_MX;
        contract.parmRecordId(eInvoiceJour.RecId);
        contract.parmPrintCopyOriginal(PrintCopyOriginal::Original);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints Srs report for retail EInvoice.
    /// </summary>
    public void run()
    {
        RecordSortedList journalList = this.parmArgs().record() ? FormLetter::createJournalListCopy(this.parmArgs().record()) : this.parmArgs().object();
    
        if(!journalList)
        {
            throw error("@SYS26348");
        }
    
        journalList.first(eInvoiceJour);
    
        do
        {
            if (!eInvoiceJour)
            {
                throw error("@SYS26348");
            }
    
            super();
    
        }
        while (journalList.next(eInvoiceJour));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrintSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets print settings.
    /// </summary>
    public void setPrintSettings()
    {
        SRSPrintDestinationSettings printSettings;
        Filename filePath;
        Filename fileName;
        Filename fileExt;
    
        printSettings = this.parmReportContract().parmPrintSettings();
        printSettings.overwriteFile(true);
    
        if (originFileName)
        {
            printSettings.parmFileName(originFileName);
        }
        else
        {
            originFileName = printSettings.parmFileName();
        }
    
        [filePath, fileName, fileExt] = fileNameSplit(
            EInvoiceFreeTextController_MX::addInvoiceIdToFileName(
                RetailEInvoiceJourMap_MX::constructFromEInvoice(eInvoiceJour),
                printSettings));
    
        fileName += '_' + EInvoiceJourBaseMap_MX::eInvoiceJournalType(eInvoiceJour.IsReturn);
    
        printSettings.parmFileName(filePath + fileName + fileExt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the <c>EInvoiceReport_MX</c> SRS Report.
    /// </summary>
    /// <param name="_args">
    /// Args object.
    /// </param>
    public client static void main(Args _args)
    {
        SrsReportRunController controller = new RetailEInvoicePrintController_MX();
    
        controller.parmReportName(RetailEInvoicePrintController_MX::reportName());
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report name.
    /// </summary>
    /// <returns>
    /// Report name.
    /// </returns>
    public static str reportName()
    {
        return ssrsReportStr(EInvoiceCFDIReport_MX, Report);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>