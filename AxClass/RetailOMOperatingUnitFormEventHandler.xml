<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailOMOperatingUnitFormEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailOMOperatingUnitFormEventHandler</c> class subscribes to events involving the <c>OMOperatingUnit</c> form.
/// </summary>
public static class RetailOMOperatingUnitFormEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>OMOperatingUnit_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>OMOperatingUnit</c> form for retail operations.
    /// </summary>
    /// <param name="sender">
    /// The form run that triggered the event.
    /// </param>
    /// <param name="e">
    /// The event args relating to the form event.
    /// </param>
    [FormEventHandler(formStr(OMOperatingUnit), FormEventType::Initialized)]
    public static void OMOperatingUnit_OnInitialized(xFormRun sender, FormEventArgs e)
    {
        FormDataSource retailStoreTableDS = sender.dataSource(formDataSourceStr(OMOperatingUnit, RetailStoreTable)) as FormDataSource;

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            RetailOMOperatingUnitFormEventHandler::applyItemAssortmentFilter(sender);
        }
        else
        {
            FormDataSource retailOnlineChannelTableDS = sender.dataSource(formDataSourceStr(OMOperatingUnit, RetailOnlineChannelTable)) as FormDataSource;

            retailOnlineChannelTableDS.queryBuildDataSource().enabled(false);
            retailStoreTableDS.queryBuildDataSource().enabled(false);
        }

        retailStoreTableDS.object(fieldNum(RetailStoreTable, RetailChannelId)).mandatory(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatingWriteOMOperatingUnitFormDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>RetailStoreTable</c> form data source when the <c>validatingWriteOMOperatingUnitFormDataSource</c>
    /// delegate on the <c>OMOperatingUnit</c> form is called.
    /// </summary>
    /// <param name="_sender">
    /// The form data source that triggered the event.
    /// </param>
    /// <param name="_result">
    /// The event args relating to the delegate.
    /// </param>
    [SubscribesTo(formStr(OMOperatingUnit), delegateStr(OMOperatingUnit, validatingWriteOMOperatingUnitFormDataSource))]
    public static void validatingWriteOMOperatingUnitFormDataSource(FormDataSource _sender, EventHandlerResult _result)
    {
        boolean isValid = _result.booleanResult();

        FormRun formRun = _sender.formRun();
        OMOperatingUnit omOperatingUnit = _sender.cursor() as OMOperatingUnit;

        if (isValid
            && isConfigurationkeyEnabled(configurationKeyNum(Retail))
            && omOperatingUnit.OMOperatingUnitType == OMOperatingUnitType::RetailChannel
            && RetailOMOperatingUnitFormEventHandler::currentRetailChannelType(omOperatingUnit) == RetailChannelType::RetailStore)
        {
            FormDataSource retailStoreTableDS = formRun.dataSource(formDataSourceStr(OMOperatingUnit, RetailStoreTable)) as FormDataSource;

            isValid = retailStoreTableDS.validateWrite() && isValid;
        }

        _result.booleanResult(isValid);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doAllowEditAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether addresses can be created or edited for the current operating unit.
    /// </summary>
    /// <param name="_sender">
    /// The form data source that triggered the event.
    /// </param>
    /// <param name="_result">
    /// The event args relating to the delegate.
    /// </param>
    [SubscribesTo(formStr(OMOperatingUnit), delegateStr(OMOperatingUnit, doAllowEditAddress))]
    public static void doAllowEditAddress(FormDataSource _sender, EventHandlerResult _result)
    {
        boolean doAllowEditAddress = true;

        if (_result.hasResult())
        {
            doAllowEditAddress = _result.booleanResult();
        }

        OMOperatingUnit omOperatingUnit = _sender.cursor() as OMOperatingUnit;
        #ISOCountryRegionCodes
        if (doAllowEditAddress
            && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBR])
            && isConfigurationkeyEnabled(configurationKeyNum(Retail))
            && omOperatingUnit.omOperatingUnitType == OMOperatingUnitType::RetailChannel)
        {
            doAllowEditAddress = false;
        }

        _result.booleanResult(doAllowEditAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>OMOperatingUnit_OnPostLinkActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the <c>linkActive</c> method for the retail channel data source when <c>linkActive</c> is executed for the <c>OMOperatingUnit</c> form data source.
    /// </summary>
    /// <param name="sender">
    /// The form data source that triggered the event.
    /// </param>
    /// <param name="e">
    /// The event args relating to the data source event.
    /// </param>
    [FormDataSourceEventHandler(formDataSourceStr(OMOperatingUnit, OMOperatingUnit), FormDataSourceEventType::PostLinkActive)]
    public static void OMOperatingUnit_OnPostLinkActive(FormDataSource sender, FormDataSourceEventArgs e)
    {
        if (RetailOMOperatingUnitFormEventHandler::isRetailChannelDataSource(sender))
        {
            FormDataSource channelTypeTableDS = RetailOMOperatingUnitFormEventHandler::getChannelTypeDataSource(sender);

            if (channelTypeTableDS)
            {
                channelTypeTableDS.linkActive();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>OMOperatingUnit_OnDeleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the retail channel record when the <c>OMOperatingUnit</c> data source is deleting a record.
    /// </summary>
    /// <param name="sender">
    /// The form data source that triggered the event.
    /// </param>
    /// <param name="e">
    /// The event args relating to the data source event.
    /// </param>
    [FormDataSourceEventHandler(formDataSourceStr(OMOperatingUnit, OMOperatingUnit), FormDataSourceEventType::Deleting)]
    public static void OMOperatingUnit_OnDeleting(FormDataSource sender, FormDataSourceEventArgs e)
    {
        if (RetailOMOperatingUnitFormEventHandler::isRetailChannelDataSource(sender))
        {
            FormDataSource channelTypeTableDS = RetailOMOperatingUnitFormEventHandler::getChannelTypeDataSource(sender);

            if (channelTypeTableDS)
            {
                channelTypeTableDS.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>OMOperatingUnit_OnWritten</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the retail channel record when the <c>OMOperatingUnit</c> data source has written a record.
    /// </summary>
    /// <param name="sender">
    /// The form data source that triggered the event.
    /// </param>
    /// <param name="e">
    /// The event args relating to the data source event.
    /// </param>
    [FormDataSourceEventHandler(formDataSourceStr(OMOperatingUnit, OMOperatingUnit), FormDataSourceEventType::Written)]
    public static void OMOperatingUnit_OnWritten(FormDataSource sender, FormDataSourceEventArgs e)
    {
        if (RetailOMOperatingUnitFormEventHandler::isRetailChannelDataSource(sender))
        {
            FormDataSource channelTypeTableDS = RetailOMOperatingUnitFormEventHandler::getChannelTypeDataSource(sender);

            if (channelTypeTableDS)
            {
                channelTypeTableDS.write();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>OMOperatingUnit_OnCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the retail channel record when the <c>OMOperatingUnit</c> data source has created a record.
    /// </summary>
    /// <param name="sender">
    /// The form data source that triggered the event.
    /// </param>
    /// <param name="e">
    /// The event args relating to the data source event.
    /// </param>
    [FormDataSourceEventHandler(formDataSourceStr(OMOperatingUnit, OMOperatingUnit), FormDataSourceEventType::Created)]
    public static void OMOperatingUnit_OnCreated(FormDataSource sender, FormDataSourceEventArgs e)
    {
        if (RetailOMOperatingUnitFormEventHandler::isRetailChannelDataSource(sender))
        {
            FormDataSource channelTypeTableDS = RetailOMOperatingUnitFormEventHandler::getChannelTypeDataSource(sender);

            if (channelTypeTableDS)
            {
                channelTypeTableDS.create();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailStoreTable_OnCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates number sequences Ids when a record is created in the <c>RetailStoreTable</c> data source.
    /// </summary>
    /// <param name="sender">
    /// The form data source that triggered the event.
    /// </param>
    /// <param name="e">
    /// The event args relating to the data source event.
    /// </param>
    [FormDataSourceEventHandler(formDataSourceStr(OMOperatingUnit, RetailStoreTable), FormDataSourceEventType::Created)]
    public static void RetailStoreTable_OnCreated(FormDataSource sender, FormDataSourceEventArgs e)
    {
        RetailOMOperatingUnitFormEventHandler::numberSeqStoreId(sender).formMethodDataSourceCreate();
        RetailOMOperatingUnitFormEventHandler::numberSeqRetailChannelId(sender).formMethodDataSourceCreate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailStoreTable_OnPostLinkActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes <c>linkActive</c> number sequence logic when the <c>RetailStoreTable</c> data source has called the <c>linkActive</c> method.
    /// </summary>
    /// <param name="sender">
    /// The form data source that triggered the event.
    /// </param>
    /// <param name="e">
    /// The event args relating to the data source event.
    /// </param>
    [FormDataSourceEventHandler(formDataSourceStr(OMOperatingUnit, RetailStoreTable), FormDataSourceEventType::PostLinkActive)]
    public static void RetailStoreTable_OnPostLinkActive(FormDataSource sender, FormDataSourceEventArgs e)
    {
        RetailOMOperatingUnitFormEventHandler::numberSeqStoreId(sender).formMethodDataSourceLinkActive();
        RetailOMOperatingUnitFormEventHandler::numberSeqRetailChannelId(sender).formMethodDataSourceLinkActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailStoreTable_OnDeleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears number sequence data when the <c>RetailStoreTable</c> data source is deleting a record.
    /// </summary>
    /// <param name="sender">
    /// The form data source that triggered the event.
    /// </param>
    /// <param name="e">
    /// The event args relating to the data source event.
    /// </param>
    [FormDataSourceEventHandler(formDataSourceStr(OMOperatingUnit, RetailStoreTable), FormDataSourceEventType::Deleting)]
    public static void RetailStoreTable_OnDeleting(FormDataSource sender, FormDataSourceEventArgs e)
    {
        RetailOMOperatingUnitFormEventHandler::numberSeqStoreId(sender).formMethodDataSourceDelete();
        RetailOMOperatingUnitFormEventHandler::numberSeqRetailChannelId(sender).formMethodDataSourceDelete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailStoreTable_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates retail-specific form controls when the <c>RetailStoreTable</c> data source is activated.
    /// </summary>
    /// <param name="sender">
    /// The form data source that triggered the event.
    /// </param>
    /// <param name="e">
    /// The event args relating to the data source event.
    /// </param>
    [FormDataSourceEventHandler(formDataSourceStr(OMOperatingUnit, RetailStoreTable), FormDataSourceEventType::Activated)]
    public static void RetailStoreTable_OnActivated(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun formRun = sender.formRun();
        FormDataSource omOperatingUnitDS = formRun.dataSource(formDataSourceStr(OMOperatingUnit, OMOperatingUnit)) as FormDataSource;
        OMOperatingUnit omOperatingUnit = omOperatingUnitDS.cursor() as OMOperatingUnit;

        if (omOperatingUnit.RecId != 0)
        {
            RetailStoreTable retailStoreTable;

            select RecId, ChannelType from retailStoreTable
                where retailStoreTable.OmOperatingUnitID == omOperatingUnit.RecId;

            // If it is an existing retail store, get the channel type from the record.
            if (retailStoreTable.RecId)
            {
                FormComboBoxControl retailStoreTable_ChannelType = RetailOMOperatingUnitFormEventHandler::getFormControl(formRun, identifierStr(retailStoreTable_ChannelType)) as FormComboBoxControl;

                if (retailStoreTable_ChannelType)
                {
                    retailStoreTable_ChannelType.selectText(enum2str(retailStoreTable.ChannelType));
                }
            }
        }

        RetailStoreTable storeRecord = sender.cursor() as RetailStoreTable;

        if (sender.object(fieldnum(RetailStoreTable, RetailChannelId)).allowEdit())
        {
            sender.object(fieldnum(RetailStoreTable, RetailChannelId)).allowEdit(storeRecord.RecId == 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailStoreTable_OnValidatedWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates data on the <c>RetailStoreTable</c> data source that is to be written.
    /// </summary>
    /// <param name="sender">
    /// The form data source that triggered the event.
    /// </param>
    /// <param name="e">
    /// The event args relating to the data source event.
    /// </param>
    [FormDataSourceEventHandler(formDataSourceStr(OMOperatingUnit, RetailStoreTable), FormDataSourceEventType::ValidatedWrite)]
    public static void RetailStoreTable_OnValidatedWrite(FormDataSource sender, FormDataSourceEventArgs e)
    {
        RetailStoreTable retailStoreTable = sender.cursor() as RetailStoreTable;

        boolean isValid = retailStoreTable.InventLocation
            && retailStoreTable.TaxGroup
            && retailStoreTable.DefaultCustAccount
            && RetailOMOperatingUnitFormEventHandler::numberSeqRetailChannelId(sender).formMethodDataSourceValidateWrite()
            && RetailOMOperatingUnitFormEventHandler::numberSeqStoreId(sender).formMethodDataSourceValidateWrite();

        if (!isValid)
        {
            // Throw to prevent the data from being written.
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailStoreTable_OnWriting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares data on the <c>RetailStoreTable</c> data source that is to be written.
    /// </summary>
    /// <param name="sender">
    /// The form data source that triggered the event.
    /// </param>
    /// <param name="e">
    /// The event args relating to the data source event.
    /// </param>
    [FormDataSourceEventHandler(formDataSourceStr(OMOperatingUnit, RetailStoreTable), FormDataSourceEventType::Writing)]
    public static void RetailStoreTable_OnWriting(FormDataSource sender, FormDataSourceEventArgs e)
    {
        RetailOMOperatingUnitFormEventHandler::numberSeqStoreId(sender).formMethodDataSourceWrite();
        RetailOMOperatingUnitFormEventHandler::numberSeqRetailChannelId(sender).formMethodDataSourceWrite();

        FormRun formRun = sender.formRun();
        FormDataSource omOperatingUnitDS = formRun.dataSource(formDataSourceStr(OMOperatingUnit, OMOperatingUnit)) as FormDataSource;
        OMOperatingUnit omOperatingUnit = omOperatingUnitDS.cursor() as OMOperatingUnit;

        RetailStoreTable retailStoreTable = sender.cursor() as RetailStoreTable;

        if (!retailStoreTable.OmOperatingUnitID && omOperatingUnit.RecId)
        {
            retailStoreTable.OmOperatingUnitID = omOperatingUnit.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailStoreTable_DefaultCustAccount_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a form lookup for the default customer account control on the <c>OMOperatingUnit</c> form.
    /// </summary>
    /// <param name="sender">
    /// The form control that triggered the event.
    /// </param>
    /// <param name="e">
    /// The event args relating to the control event.
    /// </param>
    [FormControlEventHandler(formControlStr(OMOperatingUnit, RetailStoreTable_DefaultCustAccount), FormControlEventType::Lookup)]
    public static void RetailStoreTable_DefaultCustAccount_OnLookup(FormControl sender, FormControlEventArgs e)
    {
        RetailStoreTable retailStoreTable = sender.dataSourceObject().cursor() as RetailStoreTable;

        Query query = CustomerDataInteractorFactory::constructDefaultBaseQuery();
        query.allowCrossCompany(true);
        query.addCompanyRange(retailStoreTable.InventLocationDataAreaId);

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(
            tableNum(CustTable),
            sender,
            true,
            CustomerDataInteractorFactory::useExistingOrCreateResolver(sender, query));

        sysTableLookup.addLookupfield(fieldNum(CustTable, AccountNum), true);
        sysTableLookup.addLookupfield(fieldNum(CustTable, Party));
        sysTableLookup.addLookupfield(fieldNum(CustTable, DataAreaId));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();

        FormControlCancelableSuperEventArgs ce = e as FormControlCancelableSuperEventArgs;
        ce.CancelSuperCall();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailStoreTable_InventLocation_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a form lookup for the inventory location control on the <c>OMOperatingUnit</c> form.
    /// </summary>
    /// <param name="sender">
    /// The form control that triggered the event.
    /// </param>
    /// <param name="e">
    /// The event args relating to the control event.
    /// </param>
    [FormControlEventHandler(formControlStr(OMOperatingUnit, RetailStoreTable_InventLocation), FormControlEventType::Lookup)]
    public static void RetailStoreTable_InventLocation_OnLookup(FormControl sender, FormControlEventArgs e)
    {
        RetailStoreTable retailStoreTable = sender.dataSourceObject().cursor() as RetailStoreTable;

        Query query = new Query();
        query.allowCrossCompany(true);
        query.addCompanyRange(retailStoreTable.InventLocationDataAreaId);
        query.addDataSource(tableNum(InventLocation));
       
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(InventLocation), sender);
        
        sysTableLookup.addLookupfield(fieldNum(InventLocation, InventLocationId), true);
        sysTableLookup.addLookupfield(fieldNum(InventLocation, InventSiteId));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
        
        FormControlCancelableSuperEventArgs ce = e as FormControlCancelableSuperEventArgs;
        ce.CancelSuperCall();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailStoreTable_TaxGroup_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a form lookup for the tax group control on the <c>OMOperatingUnit</c> form.
    /// </summary>
    /// <param name="sender">
    /// The form control that triggered the event.
    /// </param>
    /// <param name="e">
    /// The event args relating to the control event.
    /// </param>
    [FormControlEventHandler(formControlStr(OMOperatingUnit, RetailStoreTable_TaxGroup), FormControlEventType::Lookup)]
    public static void RetailStoreTable_TaxGroup_OnLookup(FormControl sender, FormControlEventArgs e)
    {
        RetailStoreTable retailStoreTable = sender.dataSourceObject().cursor() as RetailStoreTable;

        Query query = new Query();
        query.allowCrossCompany(true);
        query.addCompanyRange(retailStoreTable.InventLocationDataAreaId);
        query.addDataSource(tableNum(TaxGroupHeading));

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(TaxGroupHeading), sender);

        sysTableLookup.addLookupfield(fieldNum(TaxGroupHeading, TaxGroup), true);
        sysTableLookup.addLookupfield(fieldNum(TaxGroupHeading, TaxGroupName));
        sysTableLookup.addLookupfield(fieldNum(TaxGroupHeading, DataAreaId));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();

        FormControlCancelableSuperEventArgs ce = e as FormControlCancelableSuperEventArgs;
        ce.CancelSuperCall();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailStoreTable_DefaultCustAccount_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves ambiguous references when the default customer account control on the <c>OMOperatingUnit</c> form is modified.
    /// </summary>
    /// <param name="sender">
    /// The form control that triggered the event.
    /// </param>
    /// <param name="e">
    /// The event args relating to the control event.
    /// </param>
    [FormControlEventHandler(formControlStr(OMOperatingUnit, RetailStoreTable_DefaultCustAccount), FormControlEventType::Modified)]
    public static void RetailStoreTable_DefaultCustAccount_OnModified(FormControl sender, FormControlEventArgs e)
    {
        RetailStoreTable retailStoreTable = sender.dataSourceObject().cursor() as RetailStoreTable;

        var query = CustomerDataInteractorFactory::constructDefaultBaseQuery();
        query.allowCrossCompany(true);
        query.addCompanyRange(retailStoreTable.InventLocationDataAreaId);

        FormStringControl control = sender as FormStringControl;
        control.text(CustomerDataInteractorFactory::resolveAmbiguousReferenceForControl(sender, Query));
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailChannelDetails_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a form to allow the user to edit the channel details when the retail channel details control on the <c>OMOperatingUnit</c> form is clicked.
    /// </summary>
    /// <param name="sender">
    /// The form control that triggered the event.
    /// </param>
    /// <param name="e">
    /// The event args relating to the control event.
    /// </param>
    [FormControlEventHandler(formControlStr(OMOperatingUnit, RetailChannelDetails), FormControlEventType::Clicked)]
    public static void RetailChannelDetails_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        FormDataSource omOperatingUnitDS = sender.formRun().dataSource(formDataSourceStr(OMOperatingUnit, OMOperatingUnit));
        OMOperatingUnit omOperatingUnit = omOperatingUnitDS.cursor() as OMOperatingUnit;

        RetailChannelTable::displayChannel(RetailOMOperatingUnitFormEventHandler::currentRetailChannelType(omOperatingUnit), omOperatingUnit.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyItemAssortmentFilter</Name>
				<Source><![CDATA[
    private static void applyItemAssortmentFilter(xFormRun _formRun)
    {
        InventTable inventTable;
        EcoResProduct product;
        OMOperatingUnit operatingUnit;
        Query q;
        QueryRun qr;

        if (_formRun.args() && _formRun.args().dataset() == tableNum(InventTable))
        {
            inventTable = _formRun.args().record();
            q = new Query(queryStr(RetailItemChannelFactBox));
            q.dataSourceTable(tableNum(InventTable))
                .addRange(fieldNum(InventTable, ItemId))
                .value(queryValue(inventTable.ItemId));

            qr = new QueryRun(q);
        }
        else if (_formRun.args() && _formRun.args().dataset() == tableNum(EcoResProduct))
        {
            product = _formRun.args().record();
            q = new Query(queryStr(RetailProductChannelFactBox));
            q.dataSourceTable(tableNum(EcoResProduct))
                .addRange(fieldNum(EcoResProduct, RecId))
                .value(queryValue(product.RecId));

            qr = new QueryRun(q);
        }

        if (qr)
        {
            while (qr.next())
            {
                if (qr.changed(tableNum(OMOperatingUnit)))
                {
                    operatingUnit = qr.get(tableNum(OMOperatingUnit));

                    FormDataSource omOperatingUnitDS = _formRun.dataSource(formDataSourceStr(OMOperatingUnit, OMOperatingUnit)) as FormDataSource;

                    omOperatingUnitDS.query()
                        .dataSourceTable(tableNum(OMOperatingUnit))
                        .addRange(fieldNum(OMOperatingUnit, RecId))
                        .value(queryValue(operatingUnit.RecId));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentRetailChannelType</Name>
				<Source><![CDATA[
    public static RetailChannelType currentRetailChannelType(OMOperatingUnit _omOperatingUnit)
    {
        return RetailChannelTable::findByOperatingUnitId(_omOperatingUnit.RecId).ChannelType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormControl</Name>
				<Source><![CDATA[
    public static FormControl getFormControl(FormRun _formRun, FormControlName _controlName)
    {
        return _formRun.control(_formRun.controlId(_controlName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChannelTypeDataSource</Name>
				<Source><![CDATA[
    private static FormDataSource getChannelTypeDataSource(FormDataSource _omOperatingUnitDS)
    {
        FormDataSource retailChannelTypeDS;
        FormRun formRun = _omOperatingUnitDS.formRun();
        OMOperatingUnit omOperatingUnit = _omOperatingUnitDS.cursor() as OMOperatingUnit;
        RetailChannelType channelType = RetailOMOperatingUnitFormEventHandler::currentRetailChannelType(omOperatingUnit);

        if (channelType == RetailChannelType::RetailStore)
        {
            retailChannelTypeDS = formRun.dataSource(formDataSourceStr(OMOperatingUnit, RetailStoreTable)) as FormDataSource;
        }
        else if (channelType == RetailChannelType::MCRCallCenter)
        {
            retailChannelTypeDS = formRun.dataSource(formDataSourceStr(OMOperatingUnit, RetailMCRChannelTable)) as FormDataSource;
        }
        else
        {
            retailChannelTypeDS = formRun.dataSource(formDataSourceStr(OMOperatingUnit, RetailOnlineChannelTable)) as FormDataSource;
        }

        return retailChannelTypeDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetailChannelDataSource</Name>
				<Source><![CDATA[
    public static boolean isRetailChannelDataSource(FormDataSource _omOperatingUnitDS)
    {
        boolean isRetailChannelDataSource;

        OMOperatingUnit omOperatingUnit = _omOperatingUnitDS.cursor() as OMOperatingUnit;

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail))
            && omOperatingUnit.OMOperatingUnitType == OMOperatingUnitType::RetailChannel)
        {
            isRetailChannelDataSource = true;
        }

        return isRetailChannelDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqRetailChannelId</Name>
				<Source><![CDATA[
    private static NumberSeqFormHandler numberSeqRetailChannelId(FormDataSource _retailChannelDS)
    {
        return NumberSeqFormHandler::newForm(
            RetailParameters::numRefRetailChannelId().NumberSequenceId,
            _retailChannelDS.formRun(),
            _retailChannelDS,
            fieldNum(RetailChannelTable, RetailChannelId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqStoreId</Name>
				<Source><![CDATA[
    private static NumberSeqFormHandler numberSeqStoreId(FormDataSource _retailStoreDS)
    {
        return NumberSeqFormHandler::newForm(
            RetailParameters::numRefStoreId().NumberSequenceId,
            _retailStoreDS.formRun(),
            _retailStoreDS,
            fieldNum(RetailStoreTable, StoreNumber));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>