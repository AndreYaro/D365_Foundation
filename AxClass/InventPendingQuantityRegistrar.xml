<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventPendingQuantityRegistrar</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventPendingQuantityRegistrar</c> class handles the registration for the
///    <c>InventPendingQuantity</c> records.
/// </summary>
public class InventPendingQuantityRegistrar
{
    InventRegistrationHandler   inventRegistrationHandler;
    InventPendingQuantity       inventPendingQuantity;
    InventQty                   quantityToRegister;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventPendingQuantity</Name>
				<Source><![CDATA[
        public InventPendingQuantity parmInventPendingQuantity(InventPendingQuantity _inventPendingQuantity = inventPendingQuantity)
    {
        inventPendingQuantity = _inventPendingQuantity;

        return inventPendingQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventRegistrationHandler</Name>
				<Source><![CDATA[
        public InventRegistrationHandler parmInventRegistrationHandler(InventRegistrationHandler _inventRegistrationHandler = inventRegistrationHandler)
    {
        inventRegistrationHandler = _inventRegistrationHandler;

        return inventRegistrationHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantityToRegister</Name>
				<Source><![CDATA[
        public InventQty parmQuantityToRegister(InventQty _quantityToRegister = quantityToRegister)
    {
        quantityToRegister = _quantityToRegister;

        return quantityToRegister;
    }

]]></Source>
			</Method>
			<Method>
				<Name>register</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the registration for the <c>InventPendingQuantity</c> records.
    /// </summary>
    public void register()
    {
        if (!this.validate())
        {
            throw error("@SYS18447");
        }

        if (quantityToRegister == 0)
        {
            return;
        }

        if (quantityToRegister < 0)
        {
            this.registerLess();
        }
        else
        {
            this.registerMore();
        }

        inventRegistrationHandler.notifyOnRegistration(quantityToRegister);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerLess</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the registration of negative quantities for the <c>InventPendingQuantity</c> records.
    /// </summary>
    private void registerLess()
    {
        inventPendingQuantity.updateQuantity(quantityToRegister);

        //we are reducing quantity on a pending reciept so we must update/create the corresponding pending registration
        InventPendingQuantity::writePendingQuantity(inventRegistrationHandler.getRegistrationProvider(),-quantityToRegister,InventProcessRole::PendingRegistration);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerMore</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the registration of positive quantities for the <c>InventPendingQuantity</c> records.
    /// </summary>
    private void registerMore()
    {
        inventPendingQuantity.updateQuantity(-quantityToRegister);

        //we are reducing quantity on a pending registration so we must update/create the corresponding pending receipt
        InventPendingQuantity::writePendingQuantity(inventRegistrationHandler.getRegistrationProvider(),quantityToRegister,InventProcessRole::PendingReceipt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates if the pre-conditions for performing the registrations are fulfilled.
    /// </summary>
    /// <returns>
    ///    true if the validation was successful; otherwise, false.
    /// </returns>
    private boolean validate()
    {
        boolean ok = true;

        //verify that the processRole and the sign of the quantity macthes
        if ((inventPendingQuantity.ProcessRole == InventProcessRole::PendingReceipt         && (quantityToRegister > 0))
        ||  (inventPendingQuantity.ProcessRole == InventProcessRole::PendingRegistration    && (quantityToRegister < 0)))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (!inventPendingQuantity.RecId)
        {
             ok = checkFailed(Error::missingRecord(tableId2name(tableNum(InventPendingQuantity))));
        }

        ok = inventRegistrationHandler.canRegister(quantityToRegister) && ok;

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventPendingQuantityRegistrar construct()
    {
        return new InventPendingQuantityRegistrar();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromRegistrationHandler</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>InventPendingQuantityRegistrar</c> class.
    /// </summary>
    /// <param name="_inventRegistrationHandler">
    ///    An instance of the <c>InventRegistrationHandler</c> interface.
    /// </param>
    /// <param name="_inventPendingQuantity">
    ///    The pending quantity to update.
    /// </param>
    /// <param name="_quantityToRegister">
    ///    The quantity in the inventory unit to register.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventPendingQuantityRegistrar</c> class.
    /// </returns>
    public static InventPendingQuantityRegistrar newFromRegistrationHandler(
        InventRegistrationHandler   _inventRegistrationHandler,
        InventPendingQuantity       _inventPendingQuantity,
        InventQty                   _quantityToRegister)
    {
        if ((_inventRegistrationHandler == null) || !_inventPendingQuantity)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        InventPendingQuantityRegistrar inventPendingQuantityRegistrar = InventPendingQuantityRegistrar::construct();

        inventPendingQuantityRegistrar.parmInventRegistrationHandler(_inventRegistrationHandler);
        inventPendingQuantityRegistrar.parmInventPendingQuantity(_inventPendingQuantity);
        inventPendingQuantityRegistrar.parmQuantityToRegister(_quantityToRegister);

        return inventPendingQuantityRegistrar;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
