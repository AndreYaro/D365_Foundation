<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxCalcReportFields2023_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class TaxCalcReportFields2023_JP implements TaxReportIParameters_JP
{
    protected FromDate fromDate;
    protected ToDate toDate;
    protected TaxPeriod taxPeriod;
    protected TaxRepVersion taxRepVersion;
    protected TaxVersion taxRepCounter;
    protected NoYes amendment;
    protected CalcMethod_JP calcMethod;
    protected TypeOfDeclaration_JP typeOfDeclaration;
    protected Apellative_JP apellative = CompanyInfo::find().CompanyRepresentative_JP;
    protected Map mapTaxValue;
    protected Map isTaxFieldBaseAmountMap;

    #TaxReportingCodes_JP

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    internal void calc(
        TaxReportDataLayout_JP _reportDataLayout,
        TaxReportDataLayout_JP _reportAddonDataLayout,
        TaxReportDataLayout_JP _appendix1DataLayout,
        TaxReportDataLayout_JP _appendix2DataLayout)
    {
        this.calculateTaxReportFields();

        if (amendment ||
            !LedgerConsumptionTaxCalcTrans_JP::existByTaxReportParametersVersion(this, TaxRepVersion::Latest, _appendix2DataLayout))
        {
            TaxReportCalculateFieldsAppendix2_JP::calculate(
                taxPeriod,
                fromDate,
                toDate,
                typeOfDeclaration,
                amendment,
                mapTaxValue,
                calcMethod,
                _appendix2DataLayout);
        }

        if (amendment ||
            !LedgerConsumptionTaxCalcTrans_JP::existByTaxReportParametersVersion(this, TaxRepVersion::Latest, _appendix1DataLayout))
        {
            TaxReportCalculateFieldsAppendix1_JP::calculate(
                taxPeriod,
                fromDate,
                toDate,
                typeOfDeclaration,
                amendment,
                mapTaxValue,
                calcMethod,
                _appendix1DataLayout,
                _appendix2DataLayout);
        }

        if (amendment ||
            !LedgerConsumptionTaxReportTrans_JP::existByTaxReportParametersVersion(this, TaxRepVersion::Latest, _reportAddonDataLayout))
        {
            TaxReportCalculateFieldsReportAddon_JP::calculate(
                taxPeriod,
                fromDate,
                toDate,
                typeOfDeclaration,
                amendment,
                calcMethod,
                _reportAddonDataLayout,
                _appendix1DataLayout);
        }

        if (amendment ||
            !LedgerConsumptionTaxReportTrans_JP::existByTaxReportParametersVersion(this, TaxRepVersion::Latest, _reportDataLayout))
        {
            TaxReportCalculateFieldsReport_JP::calculate(
                taxPeriod,
                fromDate,
                toDate,
                typeOfDeclaration,
                amendment,
                calcMethod,
                _reportDataLayout,
                _appendix1DataLayout,
                _appendix2DataLayout);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTaxReportFields</Name>
				<Source><![CDATA[
    protected void calculateTaxReportFields()
    {
        this.initializeCalculation();        

        TmpTaxReportById tmpTaxReportById = TaxTrans::taxAmountByReportId_Table(
            fromDate,
            toDate,
            taxPeriod,
            taxRepVersion,
            taxRepCounter,
            false);        

        while select sum(Amount), sum(TaxInCostPrice) from tmpTaxReportById
            group by TaxReportField, TaxValue_JP, TaxType_JP
        {
            this.addTaxReportField(tmpTaxReportById);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTaxReportField</Name>
				<Source><![CDATA[
    protected void addTaxReportField(TmpTaxReportById _tmpTaxReportById)
    {
        boolean isTaxBaseAmount = this.isTaxBaseAmount(_tmpTaxReportById.TaxReportField);

        this.addTaxReportByCode(
            _tmpTaxReportById.TaxReportField,
            _tmpTaxReportById.Amount,
            _tmpTaxReportById.TaxType_JP,
            _tmpTaxReportById.TaxValue_JP,
            isTaxBaseAmount);

        if (!isTaxBaseAmount)
        {
            this.addTaxReportByCode(
                TaxReportAmounts_JP::nationalTaxReportingCode(_tmpTaxReportById.TaxReportField),
                TaxReportCalculateFields_JP::calculateNationalTaxAmount(_tmpTaxReportById.TaxValue_JP, _tmpTaxReportById.TaxType_JP, _tmpTaxReportById.Amount - _tmpTaxReportById.TaxInCostPrice),
                _tmpTaxReportById.TaxType_JP,
                _tmpTaxReportById.TaxValue_JP,
                false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCalculation</Name>
				<Source><![CDATA[
    protected void initializeCalculation()
    {
        TaxReportByCode_JP taxReportByCode;

        delete_from taxReportByCode
            where taxReportByCode.SettlementPeriod == taxPeriod
                && taxReportByCode.PeriodOfTaxationFrom == fromDate
                && taxReportByCode.PeriodOfTaxationTo == toDate
                && taxReportByCode.TypeOfDeclaration == typeOfDeclaration;

        mapTaxValue = new Map(Types::Real, Types::Class);

        this.addTaxReportByCode(#field_1, 0, TaxType_JP::Standard, 0, true);
        this.addTaxReportByCode(#field_1, 0, TaxType_JP::Standard, 3, true);
        this.addTaxReportByCode(#field_1, 0, TaxType_JP::Standard, 5, true);
        this.addTaxReportByCode(#field_1, 0, TaxType_JP::Standard, 8, true);
        this.addTaxReportByCode(#field_1, 0, TaxType_JP::Reduced, 8, true);
        this.addTaxReportByCode(#field_1, 0, TaxType_JP::Standard, 10, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxBaseAmount</Name>
				<Source><![CDATA[
    protected boolean isTaxBaseAmount(TaxReportField _taxReportField)
    {
        if (isTaxFieldBaseAmountMap.exists(_taxReportField))
        {
            return isTaxFieldBaseAmountMap.lookup(_taxReportField);
        }

        TaxTable taxTable;

        select firstonly RecId from taxTable
            where taxTable.RepFieldBaseOutgoing == _taxReportField
                || taxTable.RepFieldBaseIncoming == _taxReportField
                || taxTable.RepFieldBaseOutgoingCreditNote == _taxReportField
                || taxTable.RepFieldBaseIncomingCreditNote == _taxReportField
                || taxTable.RepFieldTaxFreeSales == _taxReportField
                || taxTable.RepFieldTaxFreeSalesCreditNote == _taxReportField
                || taxTable.RepFieldBaseUseTax == _taxReportField
                || taxTable.RepFieldBaseUseTaxCreditNote == _taxReportField
                || taxTable.RepFieldBaseUseTaxOffset == _taxReportField
                || taxTable.RepFieldBaseUseTaxOffsetCreditNote == _taxReportField
                || taxTable.RepFieldTaxFreeBuy == _taxReportField
                || taxTable.RepFieldTaxFreeBuyCreditNote == _taxReportField;

        boolean isTaxBaseAmount = taxTable.RecId != 0;

        isTaxFieldBaseAmountMap.insert(_taxReportField, isTaxBaseAmount);

        return isTaxBaseAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTaxReportByCode</Name>
				<Source><![CDATA[
    protected void addTaxReportByCode(
        TaxReportField _field,
        TaxAmount _amount,
        TaxType_JP _taxType,
        TaxValue _taxValue,
        boolean _isBaseAmount)
    {
        ttsbegin;
        
        TaxReportByCode_JP taxReportByCode;

        select firstonly forupdate taxReportByCode
            where taxReportByCode.SettlementPeriod == taxPeriod
                && taxReportByCode.PeriodOfTaxationFrom == fromDate
                && taxReportByCode.PeriodOfTaxationTo == toDate
                && taxReportByCode.TypeOfDeclaration == typeOfDeclaration
                && taxReportByCode.TaxReportField == _field
                && taxReportByCode.TaxValue == _taxValue
                && taxReportByCode.TaxType == _taxType;

        if (!taxReportByCode)
        {
            taxReportByCode.PeriodOfTaxationFrom = fromDate;
            taxReportByCode.PeriodOfTaxationTo = toDate;
            taxReportByCode.SettlementPeriod = taxPeriod;
            taxReportByCode.CalcMethod = calcMethod;
            taxReportByCode.TypeOfDeclaration = typeOfDeclaration;
            taxReportByCode.Apellative = apellative;
            taxReportByCode.TaxReportField = _field;
            taxReportByCode.TaxReportLayout = TaxReportLayout::Japan;
            taxReportByCode.TaxValue = _taxValue;
            taxReportByCode.TaxType = _taxType;
        }

        if (_isBaseAmount)
        {
            taxReportByCode.TaxAmount = abs(_amount); 
        }
        else
        {
            taxReportByCode.TaxAmount += abs(_amount);
        }

        if (amendment)
        {
            taxReportByCode.Version = NoYes::Yes;
        }

        taxReportByCode.write();

        ttscommit;

        Map mapTaxReportFieldAmount;
        Map mapTaxType;

        if (mapTaxValue.exists(taxReportByCode.TaxValue))
        {
            mapTaxType = mapTaxValue.lookup(taxReportByCode.TaxValue);

            if (mapTaxType.exists(taxReportByCode.TaxType))
            {
                mapTaxReportFieldAmount = mapTaxType.lookup(taxReportByCode.TaxType);
            }
            else
            {
                mapTaxReportFieldAmount = new Map(Types::Integer, Types::Real);
                mapTaxType.insert(taxReportByCode.TaxType, mapTaxReportFieldAmount);
            }
        }
        else
        {
            mapTaxType = new Map(Types::Enum, Types::Class);
            mapTaxValue.insert(taxReportByCode.TaxValue, mapTaxType);

            mapTaxReportFieldAmount = new Map(Types::Integer, Types::Real);
            mapTaxType.insert(taxReportByCode.TaxType, mapTaxReportFieldAmount);
        }

        mapTaxReportFieldAmount.insert(taxReportByCode.TaxReportField, taxReportByCode.TaxAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        isTaxFieldBaseAmountMap = new Map(Types::Integer, Types::Enum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmendment</Name>
				<Source><![CDATA[
    internal NoYes parmAmendment(NoYes _amendment = amendment)
    {
        amendment = _amendment;

        return amendment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcMethod</Name>
				<Source><![CDATA[
    internal CalcMethod_JP parmCalcMethod(CalcMethod_JP _calcMethod = calcMethod)
    {
        calcMethod = _calcMethod;

        return calcMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxPeriod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxPeriod parmTaxPeriod(TaxPeriod _taxPeriod = taxPeriod)
    {
        taxPeriod = _taxPeriod;

        return taxPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxRepCounter</Name>
				<Source><![CDATA[
    internal TaxVersion parmTaxRepCounter(TaxVersion _taxRepCounter = taxRepCounter)
    {
        taxRepCounter = _taxRepCounter;

        return taxRepCounter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxRepVersion</Name>
				<Source><![CDATA[
    internal TaxRepVersion parmTaxRepVersion(TaxRepVersion _taxRepVersion = taxRepVersion)
    {
        taxRepVersion = _taxRepVersion;

        return taxRepVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTypeOfDeclaration</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TypeOfDeclaration_JP parmTypeOfDeclaration(TypeOfDeclaration_JP _typeOfDeclaration = typeOfDeclaration)
    {
        typeOfDeclaration = _typeOfDeclaration;

        return typeOfDeclaration; 
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static TaxCalcReportFields2023_JP construct()
    {
        return new TaxCalcReportFields2023_JP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTaxReport</Name>
				<Source><![CDATA[
    internal static TaxCalcReportFields2023_JP newFromTaxReport(TaxReport_JP _taxReport)
    {
        TaxCalcReportFields2023_JP taxCalcReportFields = new TaxCalcReportFields2023_JP();

        taxCalcReportFields.parmTaxRepVersion(_taxReport.taxRepVersion());
        taxCalcReportFields.parmTaxPeriod(_taxReport.taxPeriod());
        taxCalcReportFields.parmFromDate(_taxReport.fromDate());
        taxCalcReportFields.parmToDate(_taxReport.toDate());
        taxCalcReportFields.parmTypeOfDeclaration(_taxReport.parmTypeOfDeclaration());
        taxCalcReportFields.parmCalcMethod(_taxReport.calcMethod());
        taxCalcReportFields.parmAmendment(_taxReport.amendment());
        taxCalcReportFields.parmTaxRepCounter(0);

        return taxCalcReportFields;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>