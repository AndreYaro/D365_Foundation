<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendDocumentLineTypePhysical</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendDocumentLineTypePhysical</c> class is used for validation and applying default values to invoice lines.
/// It contains the logic related to storage of the lines.
/// </summary>
public abstract class VendDocumentLineTypePhysical
{
    VendDocumentLineMap vendDocumentLineMap;
    VendDocumentLineType mainStrategy;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultInventTransId</Name>
				<Source><![CDATA[
    public abstract void defaultInventTransId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultItemId</Name>
				<Source><![CDATA[
    public abstract void defaultItemId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultCWQtys</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the catch weight quantities that will be invoiced.
    /// </summary>
    /// <param name="_cwQty">
    /// The catch weight quantity that will be invoiced.
    /// </param>
    /// <returns>
    /// A container with the <c>PdsCWRemainBefore</c>, <c>PdsCWRemainAfter</c> and <c>PdsCWReceiveNow</c>
    /// values.
    /// </returns>
    public abstract container determineDefaultCWQtys(PdsCWInventQty _cwQty = naReal())
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultInventQtys</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the inventory quantities to be invoiced.
    /// </summary>
    /// <param name="_inventQty">
    ///    The inventory quantity upon which other quantities are determined; optional.
    /// </param>
    /// <returns>
    ///    A container with the <c>RemainBeforeInvent</c>, <c>RemainAfterInvent</c> and <c>InventNow</c>
    ///    values.
    /// </returns>
    public abstract container determineDefaultInventQtys(InventQty _inventQty = naReal())
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPurchQtys</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the purchase quantities to be invoiced.
    /// </summary>
    /// <param name="_purchQty">
    ///    The quantity to be invoiced, upon which other quantities are determined; optional.
    /// </param>
    /// <returns>
    ///    A container with the <c>RemainBefore</c>, <c>RemainAfter</c> and <c>ReceiveNow</c> values.
    /// </returns>
    public abstract container determineDefaultPurchQtys(PurchQty _purchQty = naReal())
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the line amount, the line prices, and discounts.
    /// </summary>
    public abstract void initPrice()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainStrategy</Name>
				<Source><![CDATA[
    protected VendDocumentLineType mainStrategy(VendDocumentLineType _mainStrategy = mainStrategy)
    {
        if (!prmisDefault(_mainStrategy))
        {
            mainStrategy = _mainStrategy;
        }

        return mainStrategy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventTransIdForInvoice</Name>
				<Source><![CDATA[
    public abstract boolean validateInventTransIdForInvoice()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemIdForInvoice</Name>
				<Source><![CDATA[
    public abstract boolean validateItemIdForInvoice()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReceiveNowForInvoice</Name>
				<Source><![CDATA[
    public abstract boolean validateReceiveNowForInvoice()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendDocumentLineMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>VendDocumentLineMap</c>.
    /// </summary>
    /// <param name="_vendDocumentLineMap">
    /// The value of <c>VendDocumentLineMap</c> to set; optional.
    /// </param>
    /// <returns>
    /// The value of <c>VendDocumentLineMap</c>.
    /// </returns>
    protected VendDocumentLineMap vendDocumentLineMap(VendDocumentLineMap _vendDocumentLineMap = vendDocumentLineMap)
    {
        if (!prmisDefault(_vendDocumentLineMap))
        {
            vendDocumentLineMap = _vendDocumentLineMap;
        }

        return vendDocumentLineMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the strategy that is used to validate and apply default values into either a
    ///    <c>PurchParmLine</c> or <c>VendInvoiceInfoLine</c> table record.
    /// </summary>
    /// <param name="_mainStrategy">
    ///    An instance of the <c>VendDocumentLineType</c> class.
    /// </param>
    /// <param name="_vendDocumentLineMap">
    ///    A <c>VendDocumentLineMap</c> record.
    /// </param>
    /// <returns>
    ///    An instance of the <c>VendDocumentLineTypePhysical</c> class.
    /// </returns>
    public static VendDocumentLineTypePhysical createFromTable(VendDocumentLineType _mainStrategy, VendDocumentLineMap _vendDocumentLineMap)
    {
        VendDocumentLineTypePhysical physicalStrategy;

        // prepare strategy for:
        //  interactive client or vendor portal scenarios
        //  service scenario
        switch (_vendDocumentLineMap.DocumentOrigin)
        {
            case DocumentOrigin::Manual, DocumentOrigin::VendorPortal:
                physicalStrategy = new VendDocumentLineTypePhysical_PurchParm();
                break;

            case DocumentOrigin::Service:
                physicalStrategy = new VendDocumentLineTypePhysical_VendIvc();
                break;
        }

        // fill in all required data
        // in the returned physical strategy
        physicalStrategy.vendDocumentLineMap(_vendDocumentLineMap);
        physicalStrategy.mainStrategy(_mainStrategy);

        return physicalStrategy;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>