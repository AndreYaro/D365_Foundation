<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankAutomationReconciliationWorksheetFormView</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankAutomationReconciliationWorksheetFormView</c> is form view for bank automation reconciliation worksheet form.
/// </summary>
internal final class BankAutomationReconciliationWorksheetFormView
{
    // Header information controls
    private FormStaticTextControl defaultSelectedCompanyTransDataControl;
    private FormStaticTextControl defaultSelectedBankStatementTransDataControl;
    private FormStaticTextControl bankEndingBalanceTotalAmountControl;
    private FormStaticTextControl bankUnmatchedTotalAmountControl;
    private FormStaticTextControl bankUnmatchedTotalLinesControl;
    private FormStaticTextControl bankMatchedTotalAmountControl;
    private FormStaticTextControl bankMatchedTotalLinesControl;
    private FormStaticTextControl companyEndingBalanceTotalAmountControl;
    private FormStaticTextControl companyUnmatchedTotalAmountControl;
    private FormStaticTextControl companyUnmatchedTotalLinesControl;
    private FormStaticTextControl companyMatchedTotalAmountControl;
    private FormStaticTextControl companyMatchedTotalLinesControl;
    private FormStaticTextControl differenceTotalAmountControl;
    private FormControl differenceAmountPreviewControl;

    // Unmatched summary data
    private FormGroupControl defaultSelectedBankStatementTransDataGroupControl;
    private FormGroupControl warningSelectedBankStatementTransDataGroupControl;
    private FormStaticTextControl warningSelectedBankStatementTransLineControl;
    private FormStaticTextControl warningSelectedBankStatementTransDataControl;
    private FormGroupControl normalSelectedBankStatementTransDataGroupControl;
    private FormStaticTextControl normalSelectedBankStatementTransLineControl;
    private FormStaticTextControl normalSelectedBankStatementTransDataControl;
    private FormStaticTextControl defaultToleranceControl;
    private FormStaticTextControl warningToleranceControl;
    private FormStaticTextControl normalToleranceControl;
    private FormGroupControl defaultSelectedCompanyTransDataGroupControl;
    private FormGroupControl warningSelectedCompanyTransDataGroupControl;
    private FormStaticTextControl warningSelectedCompanyTransDataControl;
    private FormStaticTextControl warningSelectedCompanyTransLineControl;
    private FormGroupControl normalSelectedCompanyTransDataGroupControl;
    private FormStaticTextControl normalSelectedCompanyTransDataControl;
    private FormStaticTextControl normalSelectedCompanyTransLineControl;
    private AmountCur markedStatementAmount;
    private Counter markedStatementCounter;
    private AmountCur markedDocumentAmount;
    private Counter markedDocumentCounter;
    private AmountCur maxTolerance;
    private AmountCur diff;

    // Marked matching groups
    private FormStaticTextControl selectedMatchedSummaryGroupNumsControl;
    private FormStaticTextControl selectedMatchedSummaryGroupAmountControl;

    private FormButtonControl generateDialogButtonControl;
    private FormButtonControl journalsButtonControl;
    private FormButtonControl reverseButtonControl;
    private FormButtonControl accountingButtonControl;
    private FormButtonControl generateVoucherButtonControl;

    private FormRun worksheetFormRun;
    private JournalTableData journalTableData;

    private BankReconciliationWorksheetFormCaller bankReconciliationWorksheetCaller;

    // Data sources
    private FormDataSource dsOpenStatement;
    private FormDataSource dsMatchedStatement;
    private FormDataSource dsOpenDocument;
    private FormDataSource dsMatchedDocument;
    private FormDataSource dsReconciliationHeader;

    // View model
    private BankAutomationReconciliationWorksheetViewModel worksheetViewModel;

    // Controls
    private FormButtonControl matchButtonControl;
    private FormFunctionButtonControl reconcileButtonControl;
    private FormFunctionButtonControl reconcileInBatchButtonControl;
    private FormFunctionButtonControl unreconcileButtonControl;
    private FormButtonControl unmatchButtonControl;
    private FormButtonControl unmatchAllButtonControl;
    private FormFunctionButtonControl runMatchingRulesButtonControl;
    private FormButtonControl salesTaxButtonControl;
    private FormButtonControl voucherButtonControl;
    private FormFunctionButtonControl printControl;
    private FormFunctionButtonControl printGERControl;

    private FormGroupControl matchedGroupControl;

    private QueryBuildRange qbrMatchedStatement;
    private QueryBuildRange qbrReconciliationHeader;

    private int qbrStatementTransRangeCount;
    private int qbrDocumentTransRangeCount;

    private boolean isNotReconciledOrLocked;

    private const FieldId StatementBookingDateFieldId = fieldNum(BankReconciliationStatementOpenTmp, BookingDate);
    private const FieldId StatementDebitAmountFieldId = fieldNum(BankReconciliationStatementOpenTmp, DebitAmount);
    private const FieldId StatementCreditAmountFieldId = fieldNum(BankReconciliationStatementOpenTmp, CreditAmount);
    private const str StatementDebitAmountFieldStr = fieldStr(BankReconciliationStatementOpenTmp, DebitAmount);
    private const str StatementCreditAmountFieldStr = fieldStr(BankReconciliationStatementOpenTmp, CreditAmount);
    private const FieldId StatementTransCodeFieldId = fieldNum(BankReconciliationStatementOpenTmp, ProprietaryBankTransactionCode);
    private const FieldId StatementTradingPartyFieldId = fieldNum(BankReconciliationStatementOpenTmp, TradingParty);
    private const FieldId StatementReferenceNumberFieldId = fieldNum(BankReconciliationStatementOpenTmp, ReferenceNumber);
    private const FieldId StatementIdentificationFieldId = fieldNum(BankReconciliationStatementOpenTmp, Identification);

    private const FieldId DocumentDateFieldId = fieldNum(BankReconciliationDocumentOpenTmp, TransactionDate);
    private const FieldId DocumentDebitAmountFieldId = fieldNum(BankReconciliationDocumentOpenTmp, DebitAmount);
    private const FieldId DocumentCreditAmountFieldId = fieldNum(BankReconciliationDocumentOpenTmp, CreditAmount);
    private const str DocumentDebitAmountFieldStr = fieldStr(BankReconciliationDocumentOpenTmp, DebitAmount);
    private const str DocumentCreditAmountFieldStr = fieldStr(BankReconciliationDocumentOpenTmp, CreditAmount);
    private const FieldId DocumentTransTypeFieldId = fieldNum(BankReconciliationDocumentOpenTmp, BankTransType);
    private const FieldId DocumentDocumentTypeFieldId = fieldNum(BankReconciliationDocumentOpenTmp, DocumentType);
    private const FieldId DocumentPartyNameFieldId = fieldNum(BankReconciliationDocumentOpenTmp, RelatedPartyName);
    private const FieldId DocumentPaymentReferenceFieldId = fieldNum(BankReconciliationDocumentOpenTmp, Reference);

    // Unmatched summary data
    private boolean isMaxToleranceSet = false;
    private boolean isAnyLineSelected = false;
    private str markedStatementCounterStr = "@Bank:ZeroLineStr";
    private str markedDocumentCounterStr = "@Bank:ZeroLineStr";

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bookRefresh</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes <c>BankReconciliationHeader</c> form when <c>BankReconciliationWorksheet</c> form is closed.
    /// </summary>
    private void bookRefresh()
    {
        FormRun callerForm = this.parmWorksheetFormRun().args().caller();
        FormDataSource dsReconciliation;

        if (callerForm)
        {
            dsReconciliation = callerForm.dataSource();
            dsReconciliation.reread();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSubtotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates sub totals of the reconciliation.
    /// </summary>
    /// <returns>
    /// The result of sub total.
    /// </returns>
    internal BankReconciliationHeaderSubtotalTmp calcSubtotal()
    {
        BankReconciliationDocumentOpenTmp documentTmp = dsOpenDocument.cursor();
        BankReconciliationStatementOpenTmp statementTmp = dsOpenStatement.cursor();

        return BankReconciliationHeaderSubtotalTmp::calculateSubtotal(documentTmp, statementTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankReconciliationHeaderUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates button status after bank reconciliation header is updated.
    /// </summary>
    internal void bankReconciliationHeaderUpdate()
    {
        worksheetViewModel.parmBankReconciliationHeader().reread();

        this.enableButtonsActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clickedReconcileButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// After click reconcile button.
    /// </summary>
    internal void clickedReconcileButton()
    {
        worksheetViewModel.parmBankReconciliationHeader().reread();

        this.enableButtonsActive();
        this.setGenerateDialogButton();
        this.setGenerateVoucherButton();

        this.performFormRefresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clickedRunMatchRulesButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// After click run matching rules button.
    /// </summary>
    internal void clickedRunMatchRulesButton()
    {
        worksheetViewModel.reLoadData();

        this.setSummaryInfo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears filters.
    /// </summary>
    /// <param name = "_dataSource">The form data source.</param>
    internal void clearFilters(FormDataSource _dataSource)
    {
        QueryBuildDataSource qbds = _dataSource.query().dataSourceName(_dataSource.name());

        switch (_dataSource.table())
        {
            case tableNum(BankReconciliationStatementOpenTmp):
                qbds.clearRange(StatementBookingDateFieldId);
                qbds.clearRange(StatementDebitAmountFieldId);
                qbds.clearRange(StatementCreditAmountFieldId);
                qbds.clearRange(StatementTradingPartyFieldId);
                qbds.clearRange(StatementReferenceNumberFieldId);
                qbds.clearRange(StatementIdentificationFieldId);
                for (int i = 1; i <= qbrStatementTransRangeCount; i++)
                {
                    qbds.clearRange(StatementTransCodeFieldId);
                }
                break;

            case tableNum(BankReconciliationDocumentOpenTmp):
                qbds.clearRange(DocumentDateFieldId);
                qbds.clearRange(DocumentDebitAmountFieldId);
                qbds.clearRange(DocumentCreditAmountFieldId);
                qbds.clearRange(DocumentDocumentTypeFieldId);
                qbds.clearRange(DocumentPartyNameFieldId);
                qbds.clearRange(DocumentPaymentReferenceFieldId);
                for (int i = 1; i <= qbrDocumentTransRangeCount; i++)
                {
                    qbds.clearRange(DocumentTransTypeFieldId);
                }
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
                break;
        }

        _dataSource.executequery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtonsActive</Name>
				<Source><![CDATA[
    private void enableButtonsActive()
    {
        BankReconciliationHeader header = worksheetViewModel.parmBankReconciliationHeader();

        if (header)
        {
            boolean isReconciled = header.IsReconciled();
            boolean isHeaderPendingApproval = header.isPendingWorkflowApproval();
            boolean isHeaderLockedInWorkflow = header.isLockedInWorkflow();
            boolean isHeaderBeingReconciledInBatch = header.ReconcileBatchStatus == BankReconciliationHeaderRunInBatchStatus::Running;
            boolean isBankReconciliationReportGEREnabled = FeatureStateProvider::isFeatureEnabled(BankReconciliationGERReportFlight::instance());

            isNotReconciledOrLocked = !isReconciled && !isHeaderLockedInWorkflow && !isHeaderBeingReconciledInBatch;
            matchButtonControl.enabled(isNotReconciledOrLocked);
            unmatchAllButtonControl.enabled(isNotReconciledOrLocked);
            runMatchingRulesButtonControl.enabled(isNotReconciledOrLocked);

            reconcileButtonControl.visible(!isReconciled && !isHeaderPendingApproval && !isHeaderBeingReconciledInBatch);
            reconcileInBatchButtonControl.visible(!isReconciled && !isHeaderPendingApproval && !isHeaderBeingReconciledInBatch);
            unreconcileButtonControl.visible(isReconciled && !isHeaderPendingApproval && !isHeaderBeingReconciledInBatch);
            printControl.visible(!isBankReconciliationReportGEREnabled);
            printGERControl.visible(isBankReconciliationReportGEREnabled);

            this.setReverseButtonControl();
            this.setUnmatchButtonControl();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initZeroValues</Name>
				<Source><![CDATA[
    private void initZeroValues()
    {
        AmountCur zeroAmount = 0.00;
        defaultSelectedCompanyTransDataControl.text(strFmt("%1", zeroAmount));
        defaultSelectedBankStatementTransDataControl.text(strFmt("%1", zeroAmount));
        selectedMatchedSummaryGroupAmountControl.text(strFmt("%1", zeroAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>formClosePre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs action before form close.
    /// </summary>
    internal void formClosePre()
    {
        if (journalTableData)
        {
            journalTableData.updateBlock(JournalBlockLevel::InUse, JournalBlockLevel::None, false);
        }

        bankReconciliationWorksheetCaller.updateFormCacheCurrent(journalTableData.journalTable(), true);

        this.bookRefresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formClosePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs action after form close.
    /// </summary>
    internal void formClosePost()
    {
        FormRun callerForm = this.parmWorksheetFormRun().args().caller();
        if (callerForm)
        {
            switch (callerForm.name())
            {
                case formStr(BankAutomationStatementForm):
                    BankAutomationStatementFormView automationStatementFormView = callerForm.getFormView();
                    automationStatementFormView.refreshBook(true);
                    break;
                case formStr(BankReconciliationHeader):
                    FormRun stepCallerForm = callerForm.args().caller();
                    if (stepCallerForm && stepCallerForm.name() == formStr(BankAutomationStatementForm))
                    {
                        BankAutomationStatementFormView callerAutomationStatementFormView = stepCallerForm.getFormView();
                        callerAutomationStatementFormView.refreshBook(true);
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles event after given form is initialized.
    /// </summary>
    /// <param name="_formRun">
    /// The form run object.
    /// </param>
    internal void formInitPost(FormRun _formRun)
    {
        if (!_formRun.args().caller()
            || !_formRun.args().dataset()
            || !_formRun.args().record())
        {
            throw error(strFmt("@SYS22678", _formRun.name()));
        }

        this.parmWorksheetFormRun(_formRun);
        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>BankReconciliationHeaderFormView</c> class.
    /// </summary>
    private void init()
    {
        // Initialize view model
        this.initWorksheetViewModel();

        // Initialize controls
        this.initFieldControls();

        // Block header form.
        this.updateBlockHeader();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFieldControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form view field controls.
    /// </summary>
    private void initFieldControls()
    {
        matchButtonControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, MatchButton));
        reconcileButtonControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, ReconcileButton));
        reconcileInBatchButtonControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, ReconcileInBatchButton));
        unreconcileButtonControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, UnreconcileButton));
        unmatchButtonControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, UnmatchButton));
        unmatchAllButtonControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, UnmatchAllButton));
        runMatchingRulesButtonControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, RunMatchingRules));
        matchedGroupControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, MatchedGroup));
        salesTaxButtonControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, SalesTaxButton));
        voucherButtonControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, VoucherButton));
        generateDialogButtonControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, GenerateDialogButton));
        defaultSelectedBankStatementTransDataGroupControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, DefaultSelectedBankStatementTransDataGroup));
        warningSelectedBankStatementTransDataGroupControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, WarningSelectedBankStatementTransDataGroup));
        warningSelectedBankStatementTransLineControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, WarningSelectedBankStatementTransLine));
        warningSelectedBankStatementTransDataControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, WarningSelectedBankStatementTransData));
        normalSelectedBankStatementTransDataGroupControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, NormalSelectedBankStatementTransDataGroup));
        normalSelectedBankStatementTransLineControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, NormalSelectedBankStatementTransLine));
        normalSelectedBankStatementTransDataControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, NormalSelectedBankStatementTransData));
        defaultToleranceControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, DefaultTolerance));
        warningToleranceControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, WarningTolerance));
        normalToleranceControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, NormalTolerance));
        defaultSelectedCompanyTransDataGroupControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, DefaultSelectedCompanyTransDataGroup));
        warningSelectedCompanyTransDataGroupControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, WarningSelectedCompanyTransDataGroup));
        warningSelectedCompanyTransDataControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, WarningSelectedCompanyTransData));
        warningSelectedCompanyTransLineControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, WarningSelectedCompanyTransLine));
        normalSelectedCompanyTransDataGroupControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, NormalSelectedCompanyTransDataGroup));
        normalSelectedCompanyTransDataControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, NormalSelectedCompanyTransData));
        normalSelectedCompanyTransLineControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, NormalSelectedCompanyTransLine));
        generateVoucherButtonControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, GenerateVoucherButton));
        journalsButtonControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, JournalsButton));
        reverseButtonControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, ReverseButton));
        accountingButtonControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, AccountingButton));
        bankEndingBalanceTotalAmountControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, BankEndingBalanceTotalAmount));
        defaultSelectedCompanyTransDataControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, DefaultSelectedCompanyTransData));
        defaultSelectedBankStatementTransDataControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, DefaultSelectedBankStatementTransData));
        bankUnmatchedTotalAmountControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, BankUnmatchedTotalAmount));
        bankUnmatchedTotalLinesControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, BankUnmatchedTotalLines));
        bankMatchedTotalAmountControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, BankMatchedTotalAmount));
        bankMatchedTotalLinesControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, BankMatchedTotalLines));
        companyEndingBalanceTotalAmountControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, CompanyEndingBalanceTotalAmount));
        companyUnmatchedTotalAmountControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, CompanyUnmatchedTotalAmount));
        companyUnmatchedTotalLinesControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, CompanyUnmatchedTotalLines));
        companyMatchedTotalAmountControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, CompanyMatchedTotalAmount));
        companyMatchedTotalLinesControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, CompanyMatchedTotalLines));
        differenceTotalAmountControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, DifferenceTotalAmount));
        differenceAmountPreviewControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, DifferenceAmountPreview));
        selectedMatchedSummaryGroupNumsControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, SelectedMatchedSummaryGroupNums));
        selectedMatchedSummaryGroupAmountControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, SelectedMatchedSummaryGroupAmount));
        printControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, PrintButton));
        printGERControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, PrintReportGERVersion));
        
        this.setSummaryInfo();

        this.enableButtonsActive();

        this.initZeroValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMatchedDocumentPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles event after data source of given buffer is initialized.
    /// </summary>
    /// <param name="_documentMatched">
    /// The <c>BankReconciliationDocumentOpenTmp</c> buffer for matched document.
    /// </param>
    internal void initMatchedDocumentPost(BankReconciliationDocumentOpenTmp _documentMatched)
    {
        if (!dsMatchedDocument)
        {
            dsMatchedDocument = FormDataUtil::getFormDataSource(_documentMatched);
        }

        this.queryAddRangeIsMatched(dsMatchedDocument, NoYes::Yes);
        this.queryAddOrderByMatchingId(dsMatchedDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMatchedStatementPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles event after data source of given buffer is initialized.
    /// </summary>
    /// <param name="_statementOpen">
    /// The <c>BankReconciliationStatementOpenTmp</c> buffer for open bank statement.
    /// </param>
    internal void initMatchedStatementPost(BankReconciliationStatementOpenTmp _statementOpen)
    {
        if (!dsMatchedStatement)
        {
            dsMatchedStatement = FormDataUtil::getFormDataSource(_statementOpen);
        }

        this.queryAddRangeIsMatched(dsMatchedStatement, NoYes::Yes);
        this.queryAddOrderByMatchingId(dsMatchedStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOpenDocumentPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles event after data source of given buffer is initialized.
    /// </summary>
    /// <param name="_documentOpen">
    /// The <c>BankReconciliationDocumentOpenTmp</c> buffer for open document.
    /// </param>
    internal void initOpenDocumentPost(BankReconciliationDocumentOpenTmp _documentOpen)
    {
        if (!dsOpenDocument)
        {
            dsOpenDocument = FormDataUtil::getFormDataSource(_documentOpen);
        }

        this.queryAddRangeIsMatched(dsOpenDocument, NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOpenStatementPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles event after data source of given buffer is initialized.
    /// </summary>
    /// <param name="_statementOpen">
    /// The <c>BankReconciliationStatementOpenTmp</c> buffer for open bank statement.
    /// </param>
    internal void initOpenStatementPost(BankReconciliationStatementOpenTmp _statementOpen)
    {
        if (!dsOpenStatement)
        {
            dsOpenStatement = FormDataUtil::getFormDataSource(_statementOpen);
        }

        this.queryAddRangeIsMatched(dsOpenStatement, NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWorksheetViewModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the bank reconciliation view model.
    /// </summary>
    private void initWorksheetViewModel()
    {
        worksheetViewModel = BankAutomationReconciliationWorksheetViewModel::newFromWorksheetView(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markChangedOpenDocumentPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles event after markChanged of open bank document.
    /// </summary>
    internal void markChangedOpenDocumentPost()
    {
        this.setMarkedDocumentsInfo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markChangedOpenStatementPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles event after markChanged of open statement line.
    /// </summary>
    internal void markChangedOpenStatementPost()
    {
        this.setMarkedStatementLinesInfo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankReconciliationHeaderAccountId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank reconciliation header account id.
    /// </summary>
    /// <returns>The bank reconciliation header account id.</returns>
    internal CompanyBankAccountId getBankReconciliationHeaderAccountId()
    {
        return worksheetViewModel.parmBankReconciliationHeader().AccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDSMatchedDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank reconciliation header account number.
    /// </summary>
    /// <param name = "_dsMatchedDocument">The matched bank document data source.</param>
    /// <returns>The bank reconciliation header account number.</returns>
    internal FormDataSource parmDSMatchedDocument(FormDataSource _dsMatchedDocument = dsMatchedDocument)
    {
        dsMatchedDocument = _dsMatchedDocument;

        return dsMatchedDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDSMatchedStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the matched bank statement data source.
    /// </summary>
    /// <param name = "_dsMatchedStatement">The matched bank statement data source.</param>
    /// <returns>The matched bank statement data source.</returns>
    internal FormDataSource parmDSMatchedStatement(FormDataSource _dsMatchedStatement = dsMatchedStatement)
    {
        dsMatchedStatement = _dsMatchedStatement;

        return dsMatchedStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDSOpenDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the open bank document data source.
    /// </summary>
    /// <param name = "_dsOpenDocument">The open bank document data source.</param>
    /// <returns>The open bank document data source.</returns>
    internal FormDataSource parmDSOpenDocument(FormDataSource _dsOpenDocument = dsOpenDocument)
    {
        dsOpenDocument = _dsOpenDocument;

        return dsOpenDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDSOpenStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the open bank statement data source.
    /// </summary>
    /// <param name = "_dsOpenStatement">The open bank statement data source.</param>
    /// <returns>The open bank statement data source.</returns>
    internal FormDataSource parmDSOpenStatement(FormDataSource _dsOpenStatement = dsOpenStatement)
    {
        dsOpenStatement = _dsOpenStatement;

        return dsOpenStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorksheetFormRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the worksheet form run.
    /// </summary>
    /// <param name = "_worksheetFormRun">The worksheet form run.</param>
    /// <returns>The worksheet form run.</returns>
    internal FormRun parmWorksheetFormRun(FormRun _worksheetFormRun = worksheetFormRun)
    {
        worksheetFormRun = _worksheetFormRun;

        return worksheetFormRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performMatchingProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the matching process.
    /// </summary>
    internal void performMatchingProcess()
    {
        worksheetViewModel.performMatchingProcess();
        this.setSummaryInfo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>performUnmatchingProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the unmatching process.
    /// </summary>
    internal void performUnmatchingProcess()
    {
        worksheetViewModel.performUnmatchingProcess();
        this.setSummaryInfo();
        this.setGenerateDialogButton();
        this.setGenerateVoucherButton();
        this.setMarkedMatchedStatementLineButtons();
        this.refreshMarkedMatchingGroups();
    }

]]></Source>
			</Method>
			<Method>
				<Name>performUnmatchingAllProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the unmatching all bank transactions process.
    /// </summary>
    internal void performUnmatchingAllProcess()
    {
        worksheetViewModel.performUnmatchingAllProcess();
        this.setSummaryInfo();
        this.setGenerateDialogButton();
        this.setGenerateVoucherButton();
        this.setMarkedMatchedStatementLineButtons();
        this.refreshMarkedMatchingGroups();
    }

]]></Source>
			</Method>
			<Method>
				<Name>performFormRefresh</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a data refresh for the bank reconciliation worksheet form.
    /// </summary>
    internal void performFormRefresh()
    {
        worksheetViewModel.reLoadData();
        this.setSummaryInfo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeIsMatched</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds data source ranges.
    /// </summary>
    /// <param name="_dataSource">
    /// Given data source.
    /// </param>
    /// <param name="_isMatched">
    /// Indicates the value of matched range.
    /// </param>
    private void queryAddRangeIsMatched(FormDataSource _dataSource, NoYesId _isMatched)
    {
        QueryBuildDataSource qbds = _dataSource.query().dataSourceName(_dataSource.name());

        switch (_dataSource.table())
        {
            case tableNum(BankReconciliationDocumentOpenTmp):
                qbds.addRange(fieldNum(BankReconciliationDocumentOpenTmp, IsMatched)).value(queryValue(_isMatched));
                break;

            case tableNum(BankReconciliationStatementOpenTmp):
                qbds.addRange(fieldNum(BankReconciliationStatementOpenTmp, IsMatched)).value(queryValue(_isMatched));
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBaseRangeDate</Name>
				<Source><![CDATA[
    private void queryBaseRangeDate(FormDataSource _dataSource, FieldId _fieldId, date _fromDate, date _endDate)
    {
        QueryBuildDataSource qbds = _dataSource.query().dataSourceName(_dataSource.name());
        qbds.clearRange(_fieldId);

        if (_fromDate || _endDate)
        {
            qbds.addRange(_fieldId).value(SysQuery::range(_fromDate, _endDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBaseRangeStr</Name>
				<Source><![CDATA[
    private void queryBaseRangeStr(FormDataSource _dataSource, FieldId _fieldId, str _filterStr)
    {
        QueryBuildDataSource qbds = _dataSource.query().dataSourceName(_dataSource.name());
        qbds.clearRange(_fieldId);

        if (_filterStr)
        {
            qbds.addRange(_fieldId).value(SysQuery::valueLike(_filterStr));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBaseRangeEnum</Name>
				<Source><![CDATA[
    private void queryBaseRangeEnum(FormDataSource _dataSource, FieldId _fieldId, int _emptyEnumValue, int _enumValue)
    {
        QueryBuildDataSource qbds = _dataSource.query().dataSourceName(_dataSource.name());
        qbds.clearRange(_fieldId);

        if (_enumValue != _emptyEnumValue)
        {
            qbds.addRange(_fieldId).value(queryValue(_enumValue));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountQueryRange</Name>
				<Source><![CDATA[
    private str getAmountQueryRange(
        str _name,
        str _fieldStr,
        AmountCur _amountFrom,
        AmountCur _amountTo)
    {
        const str FromToQuery = '((%1.%2 >= %3) && (%1.%2 <= %4))';
        const str FromQuery = '(%1.%2 >= %3)';
        const str ToQuery = '((%1.%2 > 0) && (%1.%2 <= %3))';
        str query;

        if (_amountFrom && _amountTo)
        {
            query = strFmt(FromToQuery,
                _name,
                _fieldStr,
                queryValue(_amountFrom),
                queryValue(_amountTo));
        }
        else if (_amountFrom)
        {
            query = strFmt(FromQuery, _name, _fieldStr, queryValue(_amountFrom));
        }
        else if (_amountTo)
        {
            query = strFmt(ToQuery, _name, _fieldStr, queryValue(_amountTo));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBaseRangeAmount</Name>
				<Source><![CDATA[
    private void queryBaseRangeAmount(
        FormDataSource _dataSource,
        FieldId _debitFieldId,
        FieldId _creditFieldId,
        str _debitFieldStr,
        str _creditFieldStr,
        AmountCurDebit _debitAmountFrom,
        AmountCurDebit _debitAmountTo,
        AmountCurCredit _creditAmountFrom,
        AmountCurCredit _creditAmountTo)
    {
        const str CombineQuery = '(%1 || %2)';

        QueryBuildDataSource qbds = _dataSource.query().dataSourceName(_dataSource.name());
        qbds.clearRange(_debitFieldId);
        qbds.clearRange(_creditFieldId);

        str name = qbds.name();
        str debitQuery = this.getAmountQueryRange(name, _debitFieldStr, _debitAmountFrom, _debitAmountTo);
        str creditQuery = this.getAmountQueryRange(name, _creditFieldStr, _creditAmountFrom, _creditAmountTo);

        if (debitQuery && creditQuery)
        {
            str query = strFmt(CombineQuery, debitQuery, creditQuery);
            qbds.addRange(_debitFieldId).value(query);
        }
        else if (debitQuery)
        {
            qbds.addRange(_debitFieldId).value(debitQuery);
        }
        else if (creditQuery)
        {
            qbds.addRange(_creditFieldId).value(creditQuery);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBaseRangeTransSelection</Name>
				<Source><![CDATA[
    private int queryBaseRangeTransSelection(FormDataSource _dataSource, FieldId _fieldId, container _selectValues, int _oldRangeCount)
    {
        int numberOfSelections = conLen(_selectValues);
        QueryBuildDataSource qbds = _dataSource.query().dataSourceName(_dataSource.name());
        for (int i = 1; i <= _oldRangeCount; i++)
        {
            qbds.clearRange(_fieldId);
        }

        int rangeCount = 0;
        for (int i = 1; i <= numberOfSelections; i++)
        {
            str transCodeType = conPeek(_selectValues, i);
            if (transCodeType)
            {
                qbds.addRange(_fieldId).value(queryValue(transCodeType));
                rangeCount += 1;
            }
        }

        return rangeCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds date range to the given data source.
    /// </summary>
    /// <param name = "_dataSource">The given data source.</param>
    /// <param name = "_fromDate">The from date.</param>
    /// <param name = "_toDate">The to date.</param>
    internal void queryAddRangeDate(
        FormDataSource _dataSource,
        date _fromDate,
        date _toDate)
    {
        FieldId dateField;
        switch (_dataSource.table())
        {
            case tableNum(BankReconciliationStatementOpenTmp):
                dateField = StatementBookingDateFieldId;
                break;

            case tableNum(BankReconciliationDocumentOpenTmp):
                dateField = DocumentDateFieldId;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
                break;
        }

        this.queryBaseRangeDate(
            _dataSource,
            dateField,
            _fromDate,
            _toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds amount range to the given data source.
    /// </summary>
    /// <param name = "_dataSource">The given data source.</param>
    /// <param name = "_debitAmountFrom">The debit amount from.</param>
    /// <param name = "_debitAmountTo">The debit amount to.</param>
    /// <param name = "_creditAmountFrom">The credit amount from.</param>
    /// <param name = "_creditAmountTo">The credit amount to.</param>
    internal void queryAddRangeAmount(
        FormDataSource _dataSource,
        AmountCurDebit _debitAmountFrom,
        AmountCurDebit _debitAmountTo,
        AmountCurCredit _creditAmountFrom,
        AmountCurCredit _creditAmountTo)
    {
        FieldId debitFieldId;
        FieldId creditFieldId;
        str debitFieldStr;
        str creditFieldStr;
        switch (_dataSource.table())
        {
            case tableNum(BankReconciliationStatementOpenTmp):
                debitFieldId = StatementDebitAmountFieldId;
                creditFieldId = StatementCreditAmountFieldId;
                debitFieldStr = StatementDebitAmountFieldStr;
                creditFieldStr = StatementCreditAmountFieldStr;
                break;

            case tableNum(BankReconciliationDocumentOpenTmp):
                debitFieldId = DocumentDebitAmountFieldId;
                creditFieldId = DocumentCreditAmountFieldId;
                debitFieldStr = DocumentDebitAmountFieldStr;
                creditFieldStr = DocumentCreditAmountFieldStr;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
                break;
        }

        this.queryBaseRangeAmount(
            _dataSource,
            debitFieldId,
            creditFieldId,
            debitFieldStr,
            creditFieldStr,
            _debitAmountFrom,
            _debitAmountTo,
            _creditAmountFrom,
            _creditAmountTo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds transaction type range to the given data source.
    /// </summary>
    /// <param name = "_dataSource">The given data source.</param>
    /// <param name = "_selectValues">The selected transaction types.</param>
    internal void queryAddRangeTrans(FormDataSource _dataSource, container _selectValues)
    {
        switch (_dataSource.table())
        {
            case tableNum(BankReconciliationStatementOpenTmp):
                qbrStatementTransRangeCount = this.queryBaseRangeTransSelection(_dataSource, StatementTransCodeFieldId, _selectValues, qbrStatementTransRangeCount);
                break;

            case tableNum(BankReconciliationDocumentOpenTmp):
                qbrDocumentTransRangeCount = this.queryBaseRangeTransSelection(_dataSource, DocumentTransTypeFieldId, _selectValues, qbrDocumentTransRangeCount);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeParty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds party name range to the given data source.
    /// </summary>
    /// <param name = "_dataSource">The given data source.</param>
    /// <param name = "_party">The party name.</param>
    internal void queryAddRangeParty(FormDataSource _dataSource, str _party)
    {
        FieldId field;
        switch (_dataSource.table())
        {
            case tableNum(BankReconciliationStatementOpenTmp):
                field = StatementTradingPartyFieldId;
                break;

            case tableNum(BankReconciliationDocumentOpenTmp):
                field = DocumentPartyNameFieldId;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
                break;
        }

        this.queryBaseRangeStr(_dataSource, field, _party);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds payment reference range to the given data source.
    /// </summary>
    /// <param name = "_dataSource">The given data source.</param>
    /// <param name = "_reference">The payment reference.</param>
    internal void queryAddRangeReference(FormDataSource _dataSource, str _reference)
    {
        FieldId field;
        switch (_dataSource.table())
        {
            case tableNum(BankReconciliationStatementOpenTmp):
                field = StatementReferenceNumberFieldId;
                break;

            case tableNum(BankReconciliationDocumentOpenTmp):
                field = DocumentPaymentReferenceFieldId;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
                break;
        }

        this.queryBaseRangeStr(_dataSource, field, _reference);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeIdentification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds identification range to the given data source.
    /// </summary>
    /// <param name = "_dataSource">The given data source.</param>
    /// <param name = "_identification">The identification.</param>
    internal void queryAddRangeIdentification(FormDataSource _dataSource, str _identification)
    {
        if (_dataSource.table() == tableNum(BankReconciliationStatementOpenTmp))
        {
            this.queryBaseRangeStr(_dataSource, StatementIdentificationFieldId, _identification);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds document type range to the given data source.
    /// </summary>
    /// <param name = "_dataSource">The given data source.</param>
    /// <param name = "_type">The document type.</param>
    internal void queryAddRangeDocumentType(FormDataSource _dataSource, BankDocumentBookType _type)
    {
        if (_dataSource.table() == tableNum(BankReconciliationDocumentOpenTmp))
        {
            this.queryBaseRangeEnum(_dataSource, DocumentDocumentTypeFieldId, enum2int(BankDocumentBookType::None), enum2int(_type));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMarkedDocumentsInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the marked bank documents information.
    /// </summary>
    private void setMarkedDocumentsInfo()
    {
        BankReconciliationDocumentOpenTmp documentTmpLocal;

        str markedInfo;

        markedDocumentAmount = 0;
        markedDocumentCounter = 0;

        documentTmpLocal = this.parmDSOpenDocument().getFirst(1);
        while (documentTmpLocal)
        {
            // Exclude cancelled bank document from bank currency amount calculation.
            if (documentTmpLocal.Cancelled == NoYes::No)
            {
                markedDocumentAmount += documentTmpLocal.BankCurrencyAmount;
            }
            markedDocumentCounter++;
            documentTmpLocal = this.parmDSOpenDocument().getNext();
        }

        this.setMaxToleranceAndDiff();

        markedDocumentCounterStr = this.getLineStr(markedDocumentCounter);

        this.setMarkedSummaryDataControl();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMarkedStatementLinesInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the marked statement lines information.
    /// </summary>
    private void setMarkedStatementLinesInfo()
    {
        BankReconciliationStatementOpenTmp statementTmpLocal;

        markedStatementAmount = 0;
        markedStatementCounter = 0;

        statementTmpLocal = this.parmDSOpenStatement().getFirst(1);
        while (statementTmpLocal)
        {
            markedStatementAmount += statementTmpLocal.BankCurrencyAmount;
            markedStatementCounter++;
            statementTmpLocal = this.parmDSOpenStatement().getNext();
        }

        this.setMaxToleranceAndDiff();

        markedStatementCounterStr = this.getLineStr(markedStatementCounter);

        this.setMarkedSummaryDataControl();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSummaryInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the summary information of bank document and bank statement.
    /// </summary>
    private void setSummaryInfo()
    {
        AmountCur bankEndingBalance;
        AmountCur bankUnmatchedAmountLoc;
        Counter bankUnmatchedLinesLoc;
        AmountCur bankMatchedAmountLoc;
        Counter bankMatchedLinesLoc;
        AmountCur companyEndingBalance;
        AmountCur companyUnmatchedAmountLoc;
        Counter companyUnmatchedLinesLoc;
        AmountCur companyMatchedAmountLoc;
        Counter companyMatchedLinesLoc;

        BankReconciliationHeader header = worksheetViewModel.parmBankReconciliationHeader();

        if (header.isReconciled())
        {
            BankAutomationReconciliationHeaderInformation headerInformation = BankAutomationReconciliationHeaderInformation::findByReconciliationHeader(header.RecId);
            if (headerInformation.RecId)
            {
                bankEndingBalance = headerInformation.BankEndingBalance;
                bankUnmatchedAmountLoc = headerInformation.BankUnmatchedAmount;
                bankUnmatchedLinesLoc = headerInformation.BankUnmatchedLines;
                bankMatchedAmountLoc = headerInformation.BankMatchedAmount;
                bankMatchedLinesLoc = headerInformation.BankMatchedLines;
                companyEndingBalance = headerInformation.CompanyEndingBalance;
                companyUnmatchedAmountLoc = headerInformation.CompanyUnmatchedAmount;
                companyUnmatchedLinesLoc = headerInformation.CompanyUnmatchedLines;
                companyMatchedAmountLoc = headerInformation.CompanyMatchedAmount;
                companyMatchedLinesLoc = headerInformation.CompanyMatchedLines;
            }
        }
        else
        {
            bankEndingBalance = header.getStatementEndingBalance();

            // Bank unmatched
            BankAutomationWorksheetHeaderInfoObject bankUnmatchedInfo = BankAutomationWorksheetHeaderInformationUtil::getBankUnmatchedAmountAndLines(this.parmDSOpenStatement().cursor());
            bankUnmatchedAmountLoc = bankUnmatchedInfo.parmBankCurrencyAmount();
            bankUnmatchedLinesLoc = bankUnmatchedInfo.parmLineCount();

            // Bank matched
            BankAutomationWorksheetHeaderInfoObject bankMatchedInfo = BankAutomationWorksheetHeaderInformationUtil::getBankMatchedAmountAndLines(this.parmDSOpenStatement().cursor());
            bankMatchedAmountLoc = bankMatchedInfo.parmBankCurrencyAmount();
            bankMatchedLinesLoc = bankMatchedInfo.parmLineCount();

            // Company ending balance
            AmountCur companyPostedBalance;
            BankAccountTable bankAccountTable = BankAccountTable::find(this.getBankReconciliationHeaderAccountId());
            if (bankAccountTable.RecId)
            {
                companyPostedBalance = bankAccountTable.getBalanceByDate(header.CutOffDate);
            }
            AmountCur companyUnpostedBalance = BankAutomationWorksheetHeaderInformationUtil::getCompanyUnpostedAmount(header.AccountId, header.CutOffDate);
            AmountCur companyPostedCorrectionAmount = BankAutomationWorksheetHeaderInformationUtil::getCompanyTotalPostedCorrectionAmount(this.parmDSOpenDocument().cursor());
            companyEndingBalance = companyPostedBalance + companyUnpostedBalance + companyPostedCorrectionAmount;

            // Company unmatched
            BankAutomationWorksheetHeaderInfoObject companyUnmatchedInfo = BankAutomationWorksheetHeaderInformationUtil::getCompanyTotalUnmatchedAmountAndLines(this.parmDSOpenDocument().cursor());
            companyUnmatchedAmountLoc = companyUnmatchedInfo.parmBankCurrencyAmount();
            companyUnmatchedLinesLoc = companyUnmatchedInfo.parmLineCount();

            // Matched amount + correction amount + generate voucher amount
            BankAutomationWorksheetHeaderInfoObject companyMatchedInfo = BankAutomationWorksheetHeaderInformationUtil::getCompanyTotalMatchedAmountAndLines(this.parmDSOpenDocument().cursor());
            companyMatchedAmountLoc = companyMatchedInfo.parmBankCurrencyAmount();
            companyMatchedLinesLoc = companyMatchedInfo.parmLineCount();
        }

        bankEndingBalanceTotalAmountControl.text(strFmt("%1", bankEndingBalance));
        bankUnmatchedTotalAmountControl.text(strFmt("%1", bankUnmatchedAmountLoc));
        bankUnmatchedTotalLinesControl.text(this.getLineStr(bankUnmatchedLinesLoc));
        bankMatchedTotalAmountControl.text(strFmt("%1", bankMatchedAmountLoc));
        bankMatchedTotalLinesControl.text(this.getLineStr(bankMatchedLinesLoc));
        companyEndingBalanceTotalAmountControl.text(strFmt("%1", companyEndingBalance));
        companyUnmatchedTotalAmountControl.text(strFmt("%1", companyUnmatchedAmountLoc));
        companyUnmatchedTotalLinesControl.text(this.getLineStr(companyUnmatchedLinesLoc));
        companyMatchedTotalAmountControl.text(strFmt("%1", companyMatchedAmountLoc));
        companyMatchedTotalLinesControl.text(this.getLineStr(companyMatchedLinesLoc));
        differenceTotalAmountControl.text(strFmt("%1", bankEndingBalance - companyEndingBalance));
        differenceAmountPreviewControl.helpText(strFmt("@Bank:DifferencePreview", bankEndingBalance, companyEndingBalance, bankEndingBalance - companyEndingBalance));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBlockHeader</Name>
				<Source><![CDATA[
    private void updateBlockHeader()
    {
        JournalTableData journalTableDataFromHeader = bankReconciliationWorksheetCaller.parmJournalTableData();
        JournalTableMap journalTableFromHeader;

        if (journalTableDataFromHeader)
        {
            journalTableDataFromHeader.journalTable().reread();
            journalTableFromHeader = journalTableDataFromHeader.journalTable().data();
        }

        journalTableData = JournalTableData::newTable(journalTableFromHeader);

        journalTableData.updateBlock(JournalBlockLevel::None, JournalBlockLevel::InUse);

        bankReconciliationWorksheetCaller.updateFormCacheCurrent(journalTableData.journalTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeOpenStatementPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs actions after writing open statement.
    /// </summary>
    internal void writeOpenStatementPost()
    {
        this.setSummaryInfo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>BankAutomationReconciliationWorksheetFormView</c> class.
    /// </summary>
    /// <returns>
    /// An instance of <c>BankAutomationReconciliationWorksheetFormView</c> class.
    /// </returns>
    internal static BankAutomationReconciliationWorksheetFormView construct()
    {
        return new BankAutomationReconciliationWorksheetFormView();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBankReconciliationWorksheetCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the bank reconciliation worksheet caller.
    /// </summary>
    /// <param name = "_formRun">The form run.</param>
    public void initBankReconciliationWorksheetCaller(FormRun _formRun)
    {
        FormRun bankReconciliationWorksheetCallerFormRun = _formRun.args().caller() as FormRun;

        if (bankReconciliationWorksheetCallerFormRun && _formRun.args().callerName() == formStr(BankReconciliationHeader))
        {
            bankReconciliationWorksheetCaller = bankReconciliationWorksheetCallerFormRun.journalForm() as BankReconciliationWorksheetFormCaller;
        }
        else if (bankReconciliationWorksheetCallerFormRun && _formRun.args().callerName() == formStr(BankAutomationStatementForm))
        {
            bankReconciliationWorksheetCaller = bankReconciliationWorksheetCallerFormRun.getWorksheetCaller();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectOpenStatementList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the selected open statement list.
    /// </summary>
    /// <returns>The selected open statement list.</returns>
    internal List getSelectOpenStatementList()
    {
        return worksheetViewModel.getSelectOpenStatementList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectOpenStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the selected open statement line.
    /// </summary>
    /// <returns>The selected open statement line.</returns>
    internal BankStmtISOReportEntry getSelectOpenStatement()
    {
        return worksheetViewModel.getSelectOpenStatement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGenerateDialogButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the generate payment button enabled or not.
    /// </summary>
    internal void setGenerateDialogButton()
    {
        generateDialogButtonControl.enabled(worksheetViewModel.isOpenStatementAllSelectAllowGenerate() && isNotReconciledOrLocked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMaxToleranceAndDiff</Name>
				<Source><![CDATA[
    private void setMaxToleranceAndDiff()
    {
        if (!isMaxToleranceSet)
        {
            FormRealControl pennyDiffControl = worksheetFormRun.design().controlName(formControlStr(BankAutomationReconciliationWorksheet, BankAccountTable_BankReconAllowedPennyDifference));
            maxTolerance = pennyDiffControl.realValue();
            isMaxToleranceSet = true;
        }

        if (markedStatementCounter == 0 && markedDocumentCounter == 0)
        {
            isAnyLineSelected = false;
        }
        else
        {
            isAnyLineSelected = true;
            diff = abs(markedStatementAmount - markedDocumentAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMarkedSummaryDataControl</Name>
				<Source><![CDATA[
    private void setMarkedSummaryDataControl()
    {
        if (isAnyLineSelected)
        {
            defaultToleranceControl.visible(false);
            defaultSelectedBankStatementTransDataGroupControl.visible(false);
            defaultSelectedCompanyTransDataGroupControl.visible(false);
            if (diff > maxTolerance)
            {
                warningToleranceControl.visible(true);
                warningSelectedBankStatementTransDataGroupControl.visible(true);
                warningSelectedCompanyTransDataGroupControl.visible(true);
                normalToleranceControl.visible(false);
                normalSelectedBankStatementTransDataGroupControl.visible(false);
                normalSelectedCompanyTransDataGroupControl.visible(false);
                warningToleranceControl.text(strFmt("%1 > %2", "@Bank:Correction", maxTolerance));
                warningSelectedBankStatementTransDataControl.text(strFmt("%1",markedStatementAmount));
                warningSelectedBankStatementTransLineControl.text(markedStatementCounterStr);
                warningSelectedCompanyTransDataControl.text(strFmt("%1",markedDocumentAmount));
                warningSelectedCompanyTransLineControl.text(markedDocumentCounterStr);
            }
            else
            {
                warningToleranceControl.visible(false);
                warningSelectedBankStatementTransDataGroupControl.visible(false);
                warningSelectedCompanyTransDataGroupControl.visible(false);
                normalToleranceControl.visible(true);
                normalSelectedBankStatementTransDataGroupControl.visible(true);
                normalSelectedCompanyTransDataGroupControl.visible(true);
                normalToleranceControl.text(strFmt("%1 <= %2", "@Bank:Correction", maxTolerance));
                normalSelectedBankStatementTransDataControl.text(strFmt("%1",markedStatementAmount));
                normalSelectedBankStatementTransLineControl.text(markedStatementCounterStr);
                normalSelectedCompanyTransDataControl.text(strFmt("%1",markedDocumentAmount));
                normalSelectedCompanyTransLineControl.text(markedDocumentCounterStr);
            }
        }
        else
        {
            defaultToleranceControl.visible(true);
            defaultSelectedBankStatementTransDataGroupControl.visible(true);
            defaultSelectedCompanyTransDataGroupControl.visible(true);
            warningToleranceControl.visible(false);
            warningSelectedBankStatementTransDataGroupControl.visible(false);
            warningSelectedCompanyTransDataGroupControl.visible(false);
            normalToleranceControl.visible(false);
            normalSelectedBankStatementTransDataGroupControl.visible(false);
            normalSelectedCompanyTransDataGroupControl.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMarkedMatchedStatementLineButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Unmatch/Reverse button enabled or not.
    /// </summary>
    private void setMarkedMatchedStatementLineButtons()
    {
        this.setUnmatchButtonControl();
        this.setReverseButtonControl();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrentMatchedStatementLineButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Journals/Voucher/Account/Sales tax button enabled or not.
    /// </summary>
    internal void setCurrentMatchedStatementLineButtons()
    {
        this.setMatchedStatementLineJournalsButton();

        boolean isCurrentStatementLineGenerateVoucher = worksheetViewModel.isCurrentStatementLineGenerateVoucher();
        voucherButtonControl.enabled(isCurrentStatementLineGenerateVoucher);
        accountingButtonControl.enabled(isCurrentStatementLineGenerateVoucher);
        salesTaxButtonControl.enabled(isCurrentStatementLineGenerateVoucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUnmatchButtonControl</Name>
				<Source><![CDATA[
    private void setUnmatchButtonControl()
    {
        unmatchButtonControl.enabled(isNotReconciledOrLocked && worksheetViewModel.isAllMarkedStatementNotGenerateVoucher());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReverseButtonControl</Name>
				<Source><![CDATA[
    private void setReverseButtonControl()
    {
        BankReconciliationHeader header = worksheetViewModel.parmBankReconciliationHeader();

        if (header)
        {
            boolean isHeaderLockedInWorkflow = header.isLockedInWorkflow();
            boolean isHeaderBeingReconciledInBatch = header.ReconcileBatchStatus == BankReconciliationHeaderRunInBatchStatus::Running;
            boolean isNotLocked = !isHeaderLockedInWorkflow && !isHeaderBeingReconciledInBatch;

            reverseButtonControl.enabled(isNotLocked && worksheetViewModel.isAllMarkedStatementGenerateVoucher());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMatchedStatementLineJournalsButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the journals button enabled or not.
    /// </summary>
    private void setMatchedStatementLineJournalsButton()
    {
        journalsButtonControl.enabled(worksheetViewModel.isCurrentMatchedStatementLineGeneratePayment());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMarkedMatchedStatementLineList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the marked matched statement line list.
    /// </summary>
    /// <returns>The marked matched statement line list.</returns>
    internal List getMarkedMatchedStatementLineList()
    {
        return worksheetViewModel.getMarkedMatchedStatementLineList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGenerateVoucherButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the generate voucher button enabled or not.
    /// </summary>
    internal void setGenerateVoucherButton()
    {
        generateVoucherButtonControl.enabled(isNotReconciledOrLocked && worksheetViewModel.isOpenStatementAllSelectAllowGenerateVoucher());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineStr</Name>
				<Source><![CDATA[
    private str getLineStr(Counter _counter)
    {
        if (_counter <= 1)
        {
            return strFmt("(%1 %2)", _counter, "@Bank:line");
        }
        else
        {
            return strFmt("(%1 %2)", _counter, "@Bank:lines");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReconciliationHeaderPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the reconciliation header data source.
    /// </summary>
    /// <param name = "_header">The bank reconciliation header.</param>
    internal void initReconciliationHeaderPost(BankReconciliationHeader _header)
    {
        if (!dsReconciliationHeader)
        {
            dsReconciliationHeader = FormDataUtil::getFormDataSource(_header);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDSReconciliationHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank reconciliation header data source.
    /// </summary>
    /// <param name = "_dsReconciliationHeader">The bank reconciliation header data source.</param>
    /// <returns>The bank reconciliation header data source.</returns>
    internal FormDataSource parmDSReconciliationHeader(FormDataSource _dsReconciliationHeader = dsReconciliationHeader)
    {
        dsReconciliationHeader = _dsReconciliationHeader;

        return dsReconciliationHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the bank reconciliation header.
    /// </summary>
    internal void refreshHeader()
    {
        worksheetViewModel.refreshHeader();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorksheetViewModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank reconciliation worksheet view model.
    /// </summary>
    /// <param name = "_worksheetViewModel">The bank reconciliation worksheet view model.</param>
    /// <returns>The bank reconciliation worksheet view model.</returns>
    internal BankAutomationReconciliationWorksheetViewModel parmWorksheetViewModel(BankAutomationReconciliationWorksheetViewModel _worksheetViewModel = worksheetViewModel)
    {
        worksheetViewModel = _worksheetViewModel;

        return worksheetViewModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddOrderByMatchingId</Name>
				<Source><![CDATA[
    private void queryAddOrderByMatchingId(FormDataSource _dataSource)
    {
        QueryBuildDataSource qbds = _dataSource.query().dataSourceName(_dataSource.name());

        switch (_dataSource.table())
        {
            case tableNum(BankReconciliationDocumentOpenTmp):
                qbds.addOrderByField(fieldNum(BankReconciliationDocumentOpenTmp, MatchingId));
                break;

            case tableNum(BankReconciliationStatementOpenTmp):
                qbds.addOrderByField(fieldNum(BankReconciliationStatementOpenTmp, MatchingId));
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks or unmarks the document.
    /// </summary>
    /// <param name = "_markTrans">Yes to mark, otherwise unmark.</param>
    /// <param name = "_matchingId">The matching id.</param>
    /// <param name = "_documentRecId">The document rec id.</param>
    internal void markDocument(NoYes _markTrans, int64 _matchingId, RecId _documentRecId)
    {
        this.mark(_markTrans, _matchingId);
        if (_markTrans == NoYes::Yes)
        {
            worksheetViewModel.setStatementPosition(_matchingId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks or unmarks the statement.
    /// </summary>
    /// <param name = "_markTrans">Yes to mark, otherwise unmark.</param>
    /// <param name = "_matchingId">The matching id.</param>
    /// <param name = "_statementRecId">The statement rec id.</param>
    internal void markStatement(NoYes _markTrans, int64 _matchingId, RecId _statementRecId)
    {
        this.mark(_markTrans, _matchingId);
        if (_markTrans == NoYes::Yes)
        {
            worksheetViewModel.setDocumentPosition(_matchingId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mark</Name>
				<Source><![CDATA[
    private void mark(NoYes _markTrans, int64 _matchingId)
    {
        worksheetViewModel.mark(_markTrans, _matchingId);

        this.setMarkedMatchedStatementLineButtons();
        this.refreshMarkedMatchingGroups();
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshMarkedMatchingGroups</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the marked matching groups.
    /// </summary>
    private void refreshMarkedMatchingGroups()
    {
        selectedMatchedSummaryGroupNumsControl.text(strFmt("%1 %2", this.worksheetViewModel.getMarkedMatchGroupsNumber(), this.getMarkedMatchGroupsStr()));
        selectedMatchedSummaryGroupAmountControl.text(strFmt("%1", this.worksheetViewModel.getMatchedGroupsAmount()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMarked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets whether it is marked or not.
    /// </summary>
    /// <param name = "_matchingId">The matching id.</param>
    /// <returns>true if it is marked, otherwise false.</returns>
    internal NoYes isMarked(int64 _matchingId)
    {
        return worksheetViewModel.isMarked(_matchingId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMarkedMatchGroupsNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the marked match groups number.
    /// </summary>
    /// <returns>The marked match groups number.</returns>
    internal int getMarkedMatchGroupsNumber()
    {
        return worksheetViewModel.getMarkedMatchGroupsNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMarkedMatchGroupsStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the marked match groups string.
    /// </summary>
    /// <returns>'Groups' if the marked match groups number is larger than 1, otherwise 'Group'.</returns>
    internal str getMarkedMatchGroupsStr()
    {
        if (this.getMarkedMatchGroupsNumber() > 1)
        {
            return "@Bank:groups";
        }
        else
        {
            return "@Bank:group";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMatchedGroupsAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the matched groups amount.
    /// </summary>
    /// <returns>The matched groups amount.</returns>
    internal AmountCur getMatchedGroupsAmount()
    {
        return worksheetViewModel.getMatchedGroupsAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unmarkByMatchingIdList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unmarks by matching id list.
    /// </summary>
    /// <param name = "_matchingIdList">The matching id list.</param>
    internal void unmarkByMatchingIdList(List _matchingIdList)
    {
        worksheetViewModel.unmarkByMatchingIdList(_matchingIdList);
        this.setMarkedMatchedStatementLineButtons();
        this.refreshMarkedMatchingGroups();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentMatchedStatementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current matched statement line.
    /// </summary>
    /// <returns>The current matched statement line.</returns>
    internal BankStmtISOReportEntry getCurrentMatchedStatementLine()
    {
        return worksheetViewModel.getCurrentMatchedStatementLine();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>