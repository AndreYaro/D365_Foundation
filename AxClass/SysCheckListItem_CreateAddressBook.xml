<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SysCheckListItem_CreateAddressBook</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SysCheckListItem_CreateAddressBook</c> class creates a checklist item to create address book.
/// </summary>
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
class SysCheckListItem_CreateAddressBook extends SysCheckListItem implements SysCheckListInterfaceUpgrade
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCheckListGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the group name of the checklist item.
    /// </summary>
    /// <returns>
    /// The group name of the checklist item.
    /// </returns>
    /// <remarks>
    /// Checklists that have the same group name are grouped when they are rendered.
    /// </remarks>
    public str getCheckListGroup()
    {
        return "@SYS115500";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHelpLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the link to the help topic of the checklist item.
    /// </summary>
    /// <returns>
    /// The link to the help topic.
    /// </returns>
    /// <remarks>
    /// When the user clicks on the Help link of the checklist, the help system will open this topic.
    /// </remarks>
    public str getHelpLink()
    {
        #define.TopicId('Dynamics://DynamicsHelp/Topic?Id=98082cf8-7e21-42a4-bd8b-ee37ba108df2')

        return #TopicId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMenuItemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the checklist menu item.
    /// </summary>
    /// <returns>
    /// The name of the checklist menu item.
    /// </returns>
    public menuItemName getMenuItemName()
    {
        return menuitemactionstr(SysCheckListItem_CreateAddressBook);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMenuItemType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type of the checklist menu item.
    /// </summary>
    /// <returns>
    /// The type of the checklist menu item.
    /// </returns>
    public MenuItemType getMenuItemType()
    {
        return MenuItemType::Action;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRunnable</Name>
				<Source><![CDATA[
    public boolean isRunnable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        this.addDependency(classnum(SysCheckListItem_ApplicationUpgrade));
        this.addDependency(classnum(SysCheckListItem_DataUpgrade));

        this.indeterminate(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAddressBook</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Create the single address book to associate all workers and customers to all stores.
    /// </summary>
    /// <param name="_params">
    ///     A parameter of container type must be presented in the method signature, so the method may be run in IL.
    ///     The container has one single <c>DirAddressBookName</c>.
    /// </param>
    /// <remarks>
    ///     The method is supposed to be executed in IL, once per each partition.
    /// </remarks>
    public static void createAddressBook(container _params)
    {
        DirAddressBookName              addressBookName;
        RetailStoreTable                retailStoreTable;
        RetailStaffTable                retailStaffTable;
        CustTable                       custTable;
        DirAddressBook                  addressBook;
        RetailStoreAddressBook          storeAddressBook;
        HCMWorker                       hcmWorker;
        DirAddressBookParty             partyAddressBook;

        [addressBookName] = _params;
        select RecId from addressBook where addressBook.Name == addressBookName;
        if (!addressBook.RecId)
        {
            addressBook.Name = addressBookName;
            addressBook.Description = "@RET4230017";
            addressBook.insert();
        }

        while select RecId from retailStoreTable
        {
            storeAddressBook.AddressBook = addressBook.RecId;
            storeAddressBook.StoreRecId = retailStoreTable.RecId;
            storeAddressBook.AddressBookType = RetailAddressBookType::Employee;
            storeAddressBook.insert();
        }

        while select StaffId from retailStaffTable
            join Person from hcmWorker
                where hcmWorker.PersonnelNumber == retailStaffTable.staffId
        {
            partyAddressBook.AddressBook = addressBook.RecId;
            partyAddressBook.Party = hcmWorker.Person;
            partyAddressBook.doInsert();
        }

        while select party from custTable
        {
            select partyAddressBook where partyAddressBook.Party == custTable.Party
                && partyAddressBook.AddressBook == addressBook.RecId;

            if (!partyAddressBook)
            {
                partyAddressBook.AddressBook = addressBook.RecId;
                partyAddressBook.Party = custTable.Party;
                partyAddressBook.doInsert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAddressBookPerPartition</Name>
				<Source><![CDATA[
    /// <summary>
    ///     For each partition, create the single address book to associate all workers and customers to all stores.
    /// </summary>
    /// <param name="_addressBookName">
    ///     The address book name.
    /// </param>
    public static void createAddressBookPerPartition(DirAddressBookName _addressBookName)
    {
        #Admin

        Partitions                      partitions;
        RunAsPermission                 perm;
        UserId                          runAsUser;

        runAsUser = #AdminUser;
        perm = new RunAsPermission(runAsUser);
        perm.assert();

        // Create address book per partition
        while select PartitionKey from partitions
        {
            runAs(
                runAsUser,
                classNum(SysCheckListItem_CreateAddressBook),
                staticMethodStr(SysCheckListItem_CreateAddressBook, createAddressBook),
                [_addressBookName],
                #DATCompany,
                '',
                partitions.PartitionKey);
        }

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static public void main(Args arg)
    {
        DialogField                     addressBookField;
        Dialog                          dialog = new Dialog();

        if (Box::yesNo("@RET4230014", DialogButton::No) == DialogButton::Yes)
        {
            addressBookField = dialog.addField(extendedtypestr(DirAddressBookName));

            if (dialog.run())
            {
                SysCheckListItem_CreateAddressBook::createAddressBookPerPartition(addressBookField.value());
            }
            SysCheckList::finished(classNum(SysCheckListItem_CreateAddressBook));
        }
        else
        {
            SysCheckList::finished(classNum(SysCheckListItem_CreateAddressBook));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>