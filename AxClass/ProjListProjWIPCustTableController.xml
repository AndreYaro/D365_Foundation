<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>ProjListProjWIPCustTableController</Name>
  <SourceCode>
    <Declaration><![CDATA[
/// <summary>
/// The <c>ProjListProjWIPCustTableController</c> class is the controller class for the
/// <c>ProjListProjWIPCustTableReport</c> report.
/// </summary>
class ProjListProjWIPCustTableController extends SrsReportRunController implements BatchRetryable
{
    #define.ReportName('ProjListProjWIPCustTable.Report')
    #define.parameterActive ('active')
    #define.parameterEliminated ('eliminated')
    #define.parameterFixedPrice ('fixedPrice')
    #define.parameterInvestment ('investment')
}
]]></Declaration>
    <Methods>
      <Method>
        <Name>preRunModifyContract</Name>
        <Source><![CDATA[
    /// <summary>
    /// Changes the report contract before running the report.
    /// </summary>
    protected void preRunModifyContract()
    {
        boolean    active;
        boolean    eliminated;
        boolean    fixedPrice;
        boolean    investment;
        Query      queryContract;
        SrsReportRdlDataContract    rdlContract;

        queryContract   = this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey());
        rdlContract     = this.parmReportContract().parmRdlContract();

        active      = rdlContract.getValue(#parameterActive);
        eliminated  = rdlContract.getValue(#parameterEliminated);
        fixedPrice  = rdlContract.getValue(#parameterFixedPrice);
        investment  = rdlContract.getValue(#parameterInvestment);

        this.setRanges(queryContract, fixedPrice, investment, active, eliminated);
    }

]]></Source>
      </Method>
      <Method>
        <Name>setRanges</Name>
        <Source><![CDATA[
    public void setRanges(Query _queryContract, boolean _fixedPrice, boolean _investment, boolean _active, boolean _eliminated)
    {
        void addParameterValueRangeToQuery(Query _reportRunQuery, tableId _rangeTable, fieldId _rangeField, str _parameterValue)
        {
            QueryBuildRange         queryBuildRange;
            QueryBuildDataSource    queryBuildDataSource;

            queryBuildDataSource    = SysQuery::findOrCreateDataSource(_reportRunQuery, _rangeTable);
            queryBuildRange         = queryBuildDataSource.addRange(_rangeField);
            queryBuildRange.value(_parameterValue);
            queryBuildRange.status(RangeStatus::Hidden);
        }

        _queryContract.dataSourceTable(tableNum(ProjTable)).clearRange(fieldNum(ProjTable, Type));
        _queryContract.dataSourceTable(tableNum(ProjWIPTable)).clearRange(fieldNum(ProjWIPTable, wipEliminated));

        if (!ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            if (_fixedPrice)
            {
                addParameterValueRangeToQuery(_queryContract, tableNum(ProjTable), fieldNum(ProjTable, Type), queryValue(ProjType::FixedPrice));
            }

            if (_investment)
            {
                addParameterValueRangeToQuery(_queryContract, tableNum(ProjTable), fieldNum(ProjTable, Type), queryValue(ProjType::Investment));
            }
        }

        if (_active == true && _eliminated == false)
        {
            addParameterValueRangeToQuery(_queryContract, tableNum(ProjWIPTable), fieldNum(ProjWIPTable, wipEliminated), queryValue(NoYes::No));
        }

        if (_eliminated == true && _active == false)
        {
            addParameterValueRangeToQuery(_queryContract, tableNum(ProjWIPTable), fieldNum(ProjWIPTable, wipEliminated), queryValue(NoYes::Yes));
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>main</Name>
        <Source><![CDATA[
    public static void main(Args _args)
    {
        ProjListProjWIPCustTableController controller  = new ProjListProjWIPCustTableController();
        controller.parmReportName(#ReportName);
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
      </Method>
      <Method>
        <Name>isRetryable</Name>
        <Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>