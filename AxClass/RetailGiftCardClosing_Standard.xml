<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailGiftCardClosing_Standard</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailGiftCardClosing_Standard</c> class closes expired gift cards.
/// </summary>
class RetailGiftCardClosing_Standard extends RetailGiftCardClosing implements BatchRetryable
{
    LedgerJournalTable       ledgerJournal;
    LedgerDimensionAccount   ledgerDimension;
    LedgerDimensionAccount   offsetLedgerDimension;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLedgerJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new gift card ledger journal.
    /// </summary>
    /// <returns>
    /// The <c>LedgerJournalTable</c> record created.
    /// </returns>
    protected LedgerJournalTable createLedgerJournal()
    {
        LedgerJournalName               journalName;
        NumberSeq                       journalNumSeq;

        journalName = LedgerJournalName::find(RetailGiftCardPostingParameters::getGiftCardLedgerJournalName());

        if (!journalName)
        {
            throw error("@SYP4880789");
        }

        // Get the number sequence for journal number
        journalNumSeq = NumberSeq::newGetNum(LedgerParameters::numRefJournalNum());

        ledgerJournal.JournalName = journalName.JournalName;
        ledgerJournal.JournalType = journalName.JournalType;
        ledgerJournal.JournalNum = journalNumSeq.num();
        ledgerJournal.NumberSequenceTable = journalName.NumberSequenceTable;

        ledgerJournal.initValue();
        ledgerJournal.defaultRow();

        ledgerJournal.insert();

        return ledgerJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes ledger accounts for gift card closing.
    /// </summary>
    protected void initLedgerAccounts()
    {
        ledgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(RetailGiftCardPostingParameters::getSalesOrderAccountNumber(curext()));
        offsetLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(RetailParameters::find().GiftCardClosingLedgerDimension);

        if (!offsetLedgerDimension)
        {
            throw error("@SYP4880777");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postGiftCardClosing</Name>
				<Source><![CDATA[
    protected void postGiftCardClosing(RetailGiftCardId _giftCardId, date _closeDate, CurrencyCode _currency, AmountCur _closeBalance)
    {
        if (!_closeBalance)
            return;

        if (!ledgerJournal)
        {
            //initializing ledger journal and accounts
            ledgerJournal = this.createLedgerJournal();
        }

        LedgerJournalTrans ledgerJournalLine;

        ledgerJournalLine.JournalNum = ledgerJournal.JournalNum;
        ledgerJournalLine.AccountType = LedgerJournalACType::Ledger;
        ledgerJournalLine.LedgerDimension = ledgerDimension;
        ledgerJournalLine.OffsetAccountType = LedgerJournalACType::Ledger;
        ledgerJournalLine.OffsetLedgerDimension = offsetLedgerDimension;
        ledgerJournalLine.CurrencyCode = _currency;
        ledgerJournalLine.TransDate = _closeDate;
        ledgerJournalLine.TransactionType = LedgerTransType::Transfer;
        ledgerJournalLine.AmountCurDebit = _closeBalance;
        ledgerJournalLine.Txt = strFmt("@SYP4880787", _giftCardId);

        ledgerJournalLine.initValue();
        LedgerJournalLine.defaultRow();

        ledgerJournalLine.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.initLedgerAccounts();

        ttsBegin;

        super();

        if (ledgerJournal)
        {
            // Posts gift cards closing journal
            LedgerJournalPost::postJournal(ledgerJournal, NoYes::No, false, true);
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYP4880781";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>