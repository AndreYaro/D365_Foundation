<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalVoucherList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JournalVoucherList</c> class is used together with the JournalVoucherObject class.
/// </summary>
/// <remarks>
///    A journal can consist of a lot of voucher numbers. To contain voucher numbers, the list class
///    contains a list of JournalVoucherObjects in a regular Map. The JournalVoucherList class  normally
///    should not be inherited.
/// </remarks>
// This class contains a list of vouchers.
// It should normally not be overloaded.

class JournalVoucherList
{
    JournalTableData        journalTableData;

    Map                     voucherIdx;     // Ex.: [Date],Voucher
    Map                     voucherRec;     // Ex.: Voucher,JournalVoucherObject

    JournalVoucherObject    voucherObject;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
        public boolean add(JournalVoucherObject _voucherObject)
    {
        if (_voucherObject.voucher())
        {
            voucherObject = _voucherObject;

            voucherIdx.insert(voucherObject.key(),voucherObject.voucher());
            voucherRec.insert(voucherObject.voucher(),_voucherObject);

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addJournalTransData</Name>
				<Source><![CDATA[
        public boolean addJournalTransData(
        JournalTransData    _journalTransData,
        boolean             _init)
    {
        JournalVoucherObject tmpVoucherObject;

        if (! _journalTransData.journalTrans().Voucher || _journalTransData.journalTrans().JournalId != this.journalTableData().journalTable().JournalId)
        {
            return false;
        }

        tmpVoucherObject = journalTableData.journalStatic().newJournalVoucherObject(this);
        tmpVoucherObject.initFromJournalTransData(_journalTransData,_init);

        return this.add(tmpVoucherObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
        public boolean find(Voucher _voucher)
    {
        if (! voucherObject || _voucher != voucherObject.voucher())
        {
            if (_voucher && voucherRec.exists(_voucher))
            {
                voucherObject = voucherRec.lookup(_voucher);
            }
            else
            {
                voucherObject = null;
            }
        }

        return voucherObject ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findIdx</Name>
				<Source><![CDATA[
        public boolean findIdx(container   _key)
    {
        if (! voucherObject || _key != voucherObject.key())
        {
            if (voucherIdx.exists(_key))
            {
                return this.find(voucherIdx.lookup(_key));
            }

            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>item</Name>
				<Source><![CDATA[
        public JournalVoucherObject item()
    {
        return voucherObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalTableData</Name>
				<Source><![CDATA[
        public JournalTableData journalTableData()
    {
        return journalTableData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(JournalTableData _journalTableData)
    {
        journalTableData    = _journalTableData;
        voucherIdx          = new Map(Types::Container,Types::String);
        voucherRec          = new Map(Types::String,Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        container   c = conNull();

        MapIterator iterator = new MapIterator(voucherRec);

        while (iterator.more())
        {
            voucherObject = iterator.value();

            c += [[voucherObject.voucher(),voucherObject.key(),voucherObject.data()]];

            iterator.next();
        }
        return c;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unPack</Name>
				<Source><![CDATA[
        public void unPack(container _packedClass)
    {
        JournalVoucherObject tmpVoucherObject;
        Integer              i;
        container            rec;

        for (i=1; i <= conLen(_packedClass); i++)
        {
            rec = conPeek(_packedClass,i);

            tmpVoucherObject = journalTableData.journalStatic().newJournalVoucherObject(this);
            tmpVoucherObject.voucher(conPeek(rec,1));
            tmpVoucherObject.setKey(conPeek(rec,2));
            tmpVoucherObject.setData(conPeek(rec,3));

            this.add(tmpVoucherObject);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
        public void update(JournalVoucherObject _voucherObject)
    {
        if (! this.find(_voucherObject.voucher()))
        {
            throw error(strFmt("@SYS19378",funcName()));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>