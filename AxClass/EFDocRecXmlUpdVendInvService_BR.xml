<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocRecXmlUpdVendInvService_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Service class part of the SysOperationFramework that is responsible for delegating the
/// vendor invoice line update task
/// </summary>
class EFDocRecXmlUpdVendInvService_BR extends SysOperationServiceBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTelemetry</Name>
				<Source><![CDATA[
    private void addTelemetry(
        System.Diagnostics.Stopwatch _stopwatch,
        boolean _status,
        int64 _linesCount,
        str _funcName)
    {
        _stopwatch.Stop();
        int timePerLine = _linesCount ? _stopwatch.ElapsedMilliseconds / _linesCount : 0;
        GlobalizationInstrumentationHelper::featureRunWithPerformance(
            GlobalizationConstants::FeatureReferenceBR00032,
            _funcName,
            GlobalizationInstrumentationHelper::DefaultFeatureVersion,
            SysCountryRegionCode::countryInfo(),
            _stopwatch.ElapsedMilliseconds,
            false,
            _status,
            timePerLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>countLines</Name>
				<Source><![CDATA[
    private int64 countLines(RefRecId _recId)
    {
        VendInvoiceInfoTable header;
        VendInvoiceInfoLine line;

        select count(RecId) from line
            where line.ParmId == header.ParmId
                && line.TableRefId == header.TableRefId
            exists join header
                where header.RecId == _recId;

        return line.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMappingFromContract</Name>
				<Source><![CDATA[
    private EFDocRecXmlMapToViLineTmp_BR createMappingFromContract(EFDocRecXmlUpdVendInvContract_BR _contract)
    {
        RefRecId                     vendorInvoiceRecId = _contract.parmVendorInvoiceRecId();
        VendInvoiceInfoTable         vendorInvoice      = VendInvoiceInfoTable::findRecId(vendorInvoiceRecId);
        EFDocumentReceivedXmlView_BR receivedXmlView    = EFDocumentReceivedXmlView_BR::findByAccessKey(vendorInvoice.vendInvoiceInfoTable_W().AccessKey_BR);

        return EFDocRecXmlMapToViLineTmp_BR::create(receivedXmlView.RecId, vendorInvoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendorInvoiceLinesFromMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the object responsible for updating the vendor invoice lines
    /// </summary>
    /// <param name="_mappedValues">
    /// Mapping between vendor invoice lines and NF-e received xml lines. This mapping will
    /// be used by the updater object in order to realize which xml line should be used to
    /// update a given vendor invoice line.
    /// </param>
    protected void updateVendorInvoiceLinesFromMapping(EFDocRecXmlMapToViLineTmp_BR _mappedValues)
    {
        EFDocRecXmlMapViLineUpdater_BR updater = EFDocRecXmlMapViLineUpdater_BR::newFromMapping(_mappedValues);

        updater.updateQuantityAndPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendorInvoiceLinesFromXml</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called by the SysOperationFramework in order to update the line quantity and price of the vendor invoice
    /// accordingly to the values that exist in the received NF-e XML
    /// </summary>
    /// <param name="_contract">
    /// Contract with the data required to execute the task. Basically, this contract will contain the vendor invoice table that
    /// should be updated
    /// </param>
    public void updateVendorInvoiceLinesFromXml(EFDocRecXmlUpdVendInvContract_BR _contract)
    {
        int64 linesCount = this.countLines(_contract.parmVendorInvoiceRecId());

        EFDocRecXmlMapToViLineTmp_BR mappedValues;

        System.Diagnostics.Stopwatch stopwatch = System.Diagnostics.Stopwatch::StartNew();
        System.Exception ex;

        try
        {
            if (_contract == null)
            {
                throw error(error::wrongUseOfFunction(funcName()));
            }

            mappedValues = this.createMappingFromContract(_contract);

            this.updateVendorInvoiceLinesFromMapping(mappedValues);
        }
        catch(ex)
        {
            this.addTelemetry(stopwatch, false, linesCount, funcName());
            throw ex;
        }
        finally
        {
            this.addTelemetry(stopwatch, true, linesCount, funcName());
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>