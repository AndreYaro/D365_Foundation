<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomsImpInvoiceVendAcctSetup_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the imported invoice number and vendor account number.
/// </summary>
class CustomsImpInvoiceVendAcctSetup_IN extends SysListPanel
{
    CustomsImporterInvoiceNumber_IN importInvoiceNumber;
    DirPartyName          dataRangeValue;

    #ResAppl
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method inserts the Import invoice number and Account number from container to table.
    /// </summary>
    /// <param name="_data">
    /// The parameter _data is a container holding the Import invoice number and Account number values.
    /// </param>
    /// <remarks>
    /// Container is inserted in the format [Id1, Id2, ...], Where Ids are the Ids given with getData()
    /// </remarks>
    public void addData(container _data)
    {
        int                                     i;
        CustomsImportInvoiceVendAcctSetup_IN    customsImportInvoiceVendAcctSetup;

        for (i = conlen(_data); i; i--)
        {
            customsImportInvoiceVendAcctSetup.CustomsImportInvoiceNumberTable = CustomsImportInvoiceNumberTable_IN::findByImporterInvoiceNumber(this.parmImportInvoiceNumber()).RecId;
            customsImportInvoiceVendAcctSetup.AccountNum                      = conpeek(_data, i);
            customsImportInvoiceVendAcctSetup.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method inserts the records into the containers fetched from the respective tables.
    /// </summary>
    /// <returns>
    /// Method returns the updated containers.
    /// </returns>
    /// <remarks>
    /// The conatiners must be in the format [[Id, column1, column2], [Id, column1, column2], ...],
    /// Where Id is the Ids used when adding and removing items.
    /// </remarks>
    public container getData()
    {
        container                               selectedData;
        container                               availableData;
        VendTable                               vendTable;
        CustomsImportInvoiceVendAcctSetup_IN    vendAccountSetup;
        AccountNum                              changeVendAccount = '';
        DirPartyTable                           dirPartyTable;
        DirPartyName                            vendNameFilter;

        vendNameFilter = this.parmDataRangeValue();

        while select AccountNum
            from vendTable
            join Name from dirPartyTable
            where dirPartyTable.RecId == vendTable.Party
                && (!vendNameFilter || dirPartyTable.Name like vendNameFilter)
            notexists join vendAccountSetup
            where vendAccountSetup.AccountNum          == vendTable.AccountNum
               && vendAccountSetup.CustomsImportInvoiceNumberTable == CustomsImportInvoiceNumberTable_IN::findByImporterInvoiceNumber(this.parmImportInvoiceNumber()).RecId
        {
            availableData += [[vendTable.AccountNum, vendTable.AccountNum, dirPartyTable.Name]];
        }

        while select AccountNum
            from vendAccountSetup
            order by AccountNum
            join AccountNum from vendTable
            join Name from dirPartyTable
            where vendAccountSetup.CustomsImportInvoiceNumberTable == CustomsImportInvoiceNumberTable_IN::findByImporterInvoiceNumber(this.parmImportInvoiceNumber()).RecId
                && vendTable.AccountNum == vendAccountSetup.AccountNum
                && dirPartyTable.RecId == vendTable.Party
                && (!vendNameFilter || dirPartyTable.Name like vendNameFilter)
        {
            if (changeVendAccount != vendAccountSetup.AccountNum)
            {
                selectedData  += [[vendAccountSetup.AccountNum, vendAccountSetup.AccountNum, dirPartyTable.Name]];
            }

            changeVendAccount = vendAccountSetup.AccountNum;
        }

        return [availableData, selectedData];
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfColumns</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of the column.
    /// </summary>
    /// <returns>
    /// The number of the the column.
    /// </returns>
    public int numOfColumns()
    {
        #define.numOfColumns(2)

        return #numOfColumns;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmImportInvoiceNumber</Name>
				<Source><![CDATA[
    public CustomsImporterInvoiceNumber_IN parmImportInvoiceNumber(CustomsImporterInvoiceNumber_IN _importInvoiceNumber = importInvoiceNumber)
    {
        importInvoiceNumber = _importInvoiceNumber;

        return importInvoiceNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes import invoices of vender account.
    /// </summary>
    /// <param name="_data">
    /// The instance of the <c>container</c> class that contains the vender account number.
    /// </param>
    public void removeData(container _data)
    {
        int                                     i;
        AccountNum                              removeVendAccount;
        CustomsImportInvoiceVendAcctSetup_IN    customsImportInvoiceVendAcctSetup;

        for (i = conlen(_data); i; i --)
        {
            removeVendAccount = conpeek(_data, i);
            ttsbegin;

            delete_from customsImportInvoiceVendAcctSetup
                where customsImportInvoiceVendAcctSetup.CustomsImportInvoiceNumberTable == CustomsImportInvoiceNumberTable_IN::findByImporterInvoiceNumber(this.parmImportInvoiceNumber()).RecId
                   && customsImportInvoiceVendAcctSetup.AccountNum          == removeVendAccount;

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustomsImpInvoiceVendAcctSetup_IN construct()
    {
        return new CustomsImpInvoiceVendAcctSetup_IN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new form on the list panel.
    /// </summary>
    /// <param name="formRun">
    /// The instance of the <c>FormRun</c> class.
    /// </param>
    /// <param name="parentId">
    /// The id of the parent container.
    /// </param>
    /// <param name="captionSelected">
    /// The caption on the selected side.
    /// </param>
    /// <param name="captionAvailable">
    /// The caption on the available side.
    /// </param>
    /// <param name="imageId">
    /// The id of the image.
    /// </param>
    /// <param name="hasAddAllButton">
    /// If 'True', all buttons will be added on the panel.
    /// </param>
    /// <param name="hasRemoveAllButton">
    /// If 'True', all buttons will be removed from the panel.
    /// </param>
    /// <returns>
    /// The instance of the <c>SysListPanel</c> class.
    /// </returns>
    public static SysListPanel newForm(FormRun     formRun,
                                       int         parentId,
                                       str         captionSelected,
                                       str         captionAvailable,
                                       int         imageId             = #ImageDefault,
                                       boolean     hasAddAllButton     = false,
                                       boolean     hasRemoveAllButton  = false)
    {
        SysListPanel sysListPanel = CustomsImpInvoiceVendAcctSetup_IN::construct();

        sysListPanel.parmFormRun(formRun);
        sysListPanel.parmParentId(parentId);
        sysListPanel.parmCaptionAvailable(captionAvailable);
        sysListPanel.parmCaptionSelected(captionSelected);
        sysListPanel.parmImageId(imageId);
        sysListPanel.parmHasAddAllButton(hasAddAllButton);
        sysListPanel.parmHasRemoveAllButton(hasRemoveAllButton);
        sysListPanel.build();

        return sysListPanel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataRangeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the data range value.
    /// </summary>
    /// <param name = "_dataRangeValue">The data range value.</param>
    /// <returns></returns>
    DirPartyName parmDataRangeValue(DirPartyName _dataRangeValue = dataRangeValue)
    {
        dataRangeValue = _dataRangeValue;

        return dataRangeValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>