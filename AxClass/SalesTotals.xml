<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTotals</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class  SalesTotals extends TradeTotals
{
    boolean              mcrCSForm;
    // <GEERU>
    boolean checkAgreementLimit;
    // </GEERU>
    // <GIN>
    AmountCur           taxWithholdAmount;
    NoYes               calcEstimate;

    protected boolean isAutoChargesSetupSequenceCompoundFeatureEnabled = AutoChargesSetupSequenceCompoundFeature::instance().IsEnabled();
    protected boolean markupCalcPerInvoiceForSummaryUpdate = SalesParameters::find().IsMarkupCalculationPerInvoiceForSummaryUpdateEnabled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcMarkupForTable</Name>
				<Source><![CDATA[
    public void calcMarkupForTable(ParmId _parmId, SalesId _salesId)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logInstrumentationMeasures</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs instrumentation measures.
    /// </summary>
    protected void logInstrumentationMeasures()
    {
        const TradeInstrumentationMeasureName NumberOfSalesOrderLines = 'NumberOfSalesOrderLines';
        const TradeInstrumentationMeasureName NumberOfSalesOrderTaxLines = 'NumberOfTaxLines';
        const TradeInstrumentationMeasureName NumberOfMarkupTransactions = 'NumberOfMarkupTransactions';
        const TradeInstrumentationMeasureName RuntimeDiscountTotalsCalculation = 'RuntimeDiscountTotalsCalculation';

        SalesInstrumentation::newInstrumentation(tableStr(SalesTable), int642Str(orderTable.RecId))
            .addMeasureElapsedMilliseconds(TradeInstrumentation::getMeasureNameByMethodName(classstr(TradeTotals), methodStr(TradeTotals, calc)), runTimeCalcTotals)
            .addMeasureElapsedMilliseconds(TradeInstrumentation::getMeasureNameByMethodName(classstr(TradeTotals), methodStr(TradeTotals, calcTaxInternal)), runTimeCalcTaxTotals)
            .addMeasureElapsedMilliseconds(TradeInstrumentation::getMeasureNameByMethodName(classstr(TradeTotals), methodStr(TradeTotals, markupCalc)), runTimeCalcMarkupTotals)
            .addMeasureElapsedMilliseconds(RuntimeDiscountTotalsCalculation, runTimeCalcDiscountTotals)
            .addMeasureCount(NumberOfSalesOrderLines, numberOfOrderLines)
            .addMeasureCount(NumberOfSalesOrderTaxLines, numberOfTaxLines)
            .addMeasureCount(NumberOfMarkupTransactions, numberOfMarkupTrans)
            .logMeasures();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateFreeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates free value.
    /// </summary>
    /// <returns>
    /// The value of the AmountCur.
    /// </returns>
    protected AmountCur calculateFreeValue()
    {
        CustTable custTable = CustTable::find(this.invoiceAccount());

        freeValue = custTable.CreditMax -
                    custTable.openBalanceMST() -
                    CurrencyExchangeHelper::mstAmount(this.totalAmount(), this.currencyCode(),
                        DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                        Currency::noYes2UnknownNoYes(this.triangulation()),
                        this.exchRate(), this.exchRateSecondary());

        return freeValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscAmount</Name>
				<Source><![CDATA[
    public DiscAmount cashDiscAmount()
    {
        // <GIN>
        TmpTaxWorkTrans     taxWorkTrans;
        TaxAmount           tmpAmount;
        boolean isGTEEnabled = TaxSolutionScopeIntegrationUtil::isCompanyEnabled();
        // </GIN>

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            if (!isGTEEnabled && this.tax())
            {
                taxWorkTrans    = this.tax().tmpTaxWorkTrans();
            }
        }
        if (TaxParameters::checkTaxParameters_IN() && CustParameters::find().CashDiscVAT)
        {
            if (!isGTEEnabled)
            {
                while select taxWorkTrans
                {
                    if (TaxTable::find(taxWorkTrans.TaxCode).TaxType_IN != TaxType_IN::None)
                    {
                        tmpAmount += taxWorkTrans.SourceTaxAmountCur;
                    }
                }
            }

            totalCashDisc = CustParameters::cashDiscAmount_IN(this.cashDiscCode(), this.currencyCode(), this.totalAmount(),
                                                              this.totalAmount() - this.totalTaxAmount(),
                                                              this.cashDiscPercent(),
                                                              -tmpAmount);
        }
        else
        {
        // </GIN>
            using (TaxIntegrationTaxJurisdictionParametersContext taxIntegrationTaxJurisdictionParametersContext = TaxIntegrationTaxJurisdictionParametersContext::construct(orderTable.TableId, orderTable.RecId))
            {
                totalCashDisc = CustParameters::cashDiscAmount(
                    this.cashDiscCode(),
                    this.currencyCode(),
                    this.totalAmount(),
                    this.totalAmount() - this.totalTaxAmount(),
                    this.cashDiscPercent());
            }
        // <GIN>
        }
        // </GIN>

        return totalCashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscDate</Name>
				<Source><![CDATA[
    public DiscDate  cashDiscDate()
    {
        return CustParameters::cashDiscDate(this.cashDiscCode(), this.documentDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLineQueryRun</Name>
				<Source><![CDATA[
    protected TradeTotalsIQueryRun createLineQueryRun()
    {
        return TradeTotalsCommonEnumerator::newFromCommonEnumerator(
                this.parmEnumerableFactory().createLineEnumerableProvider().lineEnumerable(this.parmContract()).getEnumerator());
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditMax</Name>
				<Source><![CDATA[
    public AmountMST  creditMax()
    {
        return CustTable::creditMax(this.invoiceAccount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMarkupTableSourceValue</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal AmountCur getMarkupTableSourceValue(Common _orderTableMarkup)
    {
        if (_orderTableMarkup.TableId == tableNum(SalesTable) && 
            isAutoChargesSetupSequenceCompoundFeatureEnabled && 
            markupCalcPerInvoiceForSummaryUpdate)
        {
            return this.totalBalance();
        }

        return super(_orderTableMarkup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTransAmount_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the custTrans amount.
    /// </summary>
    /// <returns>
    ///   The invoiceAmount subtracted of retained tax amount in transactional currency.
    /// </returns>
    public AmountCur custTransAmount_BR()
    {
        return this.totalAmount() - tax.totalTaxAmountRetained_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDate_ES</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the sales delivery date.
    /// </summary>
    /// <returns>
    ///    The sales delivery date.
    /// </returns>
    public TransDate deliveryDate_ES()
    {
        return this.documentDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the item module type.
    /// </summary>
    /// <returns>
    /// The item module type for the order.
    /// </returns>
    protected ModuleInventPurchSales itemModuleType()
    {
        return ModuleInventPurchSales::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQueryRunGet</Name>
				<Source><![CDATA[
    protected Common lineQueryRunGet(
        TradeTotalsIQueryRun    _lineQueryRun)
    {
        TradeTotalsCommonEnumerator lineQueryRun = _lineQueryRun as TradeTotalsCommonEnumerator;
        return lineQueryRun.parmCommonEnumerator().current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQueryRunNext</Name>
				<Source><![CDATA[
    protected boolean lineQueryRunNext(
        TradeTotalsIQueryRun    _lineQueryRun)
    {
        TradeTotalsCommonEnumerator lineQueryRun = _lineQueryRun as TradeTotalsCommonEnumerator;
        return lineQueryRun.parmCommonEnumerator().moveNext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckAgreementLimit_RU</Name>
				<Source><![CDATA[
    public boolean parmCheckAgreementLimit_RU(boolean _checkAgreementLimit = checkAgreementLimit)
    {
        checkAgreementLimit = _checkAgreementLimit;
        return checkAgreementLimit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
    abstract protected TradeTotalsIContract parmContract()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkupTableAmountTaxCalculated</Name>
				<Source><![CDATA[
    public boolean parmMarkupTableAmountTaxCalculated(boolean _markupTableAmountTaxCalculated = markupTableAmountTaxCalculated)
    {
        markupTableAmountTaxCalculated = _markupTableAmountTaxCalculated;

        return markupTableAmountTaxCalculated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCRCSForm</Name>
				<Source><![CDATA[
    boolean parmMCRCSForm(boolean _mcrCSForm = false)
    {
        if (!prmisdefault(_mcrCSForm))
        {
            mcrCSForm = _mcrCSForm;
        }
        return mcrCSForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxWithholdAmount_IN</Name>
				<Source><![CDATA[
    public AmountCur parmTaxWithholdAmount_IN(AmountCur _taxWithholdAmount = taxWithholdTotal)
    {
        taxWithholdTotal = _taxWithholdAmount;

        return taxWithholdTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyRemain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the quantity that remains in catch weight units.
    /// </summary>
    /// <returns>
    /// The quantity that remains in catch weight units.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The method is not implemented in a derived class.
    /// </exception>
    protected PdsCWInventQty pdsCWQtyRemain()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total catch weight inventory quantity.
    /// </summary>
    /// <returns>
    /// The total catch weight inventory quantity.
    /// </returns>
    protected PdsCWInventQty pdsCWQtyUnit()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundOff</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the round-off amount for sales.
    /// </summary>
    /// <param name="_currencyCode">
    ///    The <c>CurrencyCode</c> field for the current order line.
    /// </param>
    /// <returns>
    ///    The <c>RoundOff</c> field that is defined for sales on the <c>Currency</c> table.
    /// </returns>
    protected RoundOff roundOff(CurrencyCode _currencyCode)
    {
        return Currency::roundOffSales(_currencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundOffType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the rounding form for sales.
    /// </summary>
    /// <param name="_currencyCode">
    ///    The <c>CurrencyCode</c> field for the current order line.
    /// </param>
    /// <returns>
    ///    The <c>RoundOffType</c> field that is defined for sales on the <c>Currency</c> table.
    /// </returns>
    protected RoundOffType roundOffType(CurrencyCode _currencyCode)
    {
        return Currency::roundOffTypeSales(_currencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceLineRecId</Name>
				<Source><![CDATA[
    protected recId sourceLineRecId()
    {
        if (orderline.TableId == tablenum(SalesParmLine))
        {
            SalesParmLine salesParmLine = orderline;
            return salesParmLine.SalesLineRecId;
        }

        return orderLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for constructing a <c>SalesTotals</c> object.
    /// </summary>
    /// <param name = "_salesTotalsConstructParameters">A <c>SalesTotalsConstructParameters</c> instance.</param>
    /// <param name = "_result">An <c>EventHandlerResult</c> where an object of one of the subclasses of <c>SalesTotals</c> can be returned.</param>
    static delegate void constructDelegate(SalesTotalsConstructParameters   _salesTotalsConstructParameters,
                                           EventHandlerResult               _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static SalesTotals construct(Common           _orderTable,
                                 SalesUpdate      _specQty       = SalesUpdate::All,
                                 AccountOrder     _sumBy         = AccountOrder::None,
                                 ParmId           _parmId        = '',
                                 SalesId          _sumSalesId    = '',
                                 DocumentStatus   _documentStatus= DocumentStatus::None)
    {
        switch (_orderTable.TableId)
        {
            case tableNum(ProjProposalJour) :   return new SalesTotals_Proj(_orderTable);
            case tableNum(SalesBasket)      :   return new SalesTotals_Basket(_orderTable);
            case tableNum(SalesTable)       :   return SalesTotals_Sales::construct(_orderTable, _specQty, _sumBy, _parmId, _sumSalesId, _documentStatus);
            case tableNum(SalesParmTable)   :   return SalesTotals_Sales::construct(_orderTable, _specQty, _sumBy, _parmId, _sumSalesId, _documentStatus);
            case tableNum(SalesParmSubTable):   return new SalesTotals_ParmSubTable(_orderTable, _specQty, _sumBy, _parmId, _sumSalesId, _documentStatus);
            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                SalesTotalsConstructParameters salesTotalsConstructParameters = new SalesTotalsConstructParameters(_orderTable, _specQty, _sumBy, _parmId, _sumSalesId, _documentStatus);
                SalesTotals::constructDelegate(salesTotalsConstructParameters, result);
                if(result.hasResult())
                {
                    return result.result() as SalesTotals;
                }
        }
        throw(error(strFmt("@SYS19306", funcName())));
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTaxAmountRetained_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the total amount of retained taxes in accounting currency.
    /// </summary>
    /// <returns>
    ///     Total amount retained taxes in accounting currency.
    /// </returns>
    public TaxAmount totalTaxAmountRetained_BR()
    {
        return this.tax().totalTaxAmountRetained_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFieldsServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates totals and sets the fields values to be shown on the totals form.
    /// </summary>
    /// <param name="_orderTable">
    /// The order table to calculate totals for.
    /// </param>
    /// <param name="_specQty">
    /// Quantity to calculate totals for.
    /// </param>
    /// <param name="_currencyCode">
    /// Currency code to calculate totals for.
    /// </param>
    /// <returns>
    /// Container of the field values to be shown on the totals form.
    /// </returns>
    static public container displayFieldsServer(Common _orderTable, SalesUpdate _specQty, CurrencyCode _currencyCode)
    {
        CustCreditLimit         custCreditLimit;
        SalesTotals             salesTotals;

        if (_orderTable.TableId ==  tableNum(SalesParmTable))
        {
            SalesParmTable salesParmTable = _orderTable;
            salesTotals = SalesTotals::construct(salesParmTable, _specQty, AccountOrder::None, salesParmTable.ParmId, '', salesParmTable.Ordering);
            salesTotals.calcMarkupForTable(salesParmTable.ParmId, salesParmTable.SalesId);
            salesTotals.parmSalesInvoicePostingType_RU(salesParmTable.InvoicePostingType_RU);
        }
        else
        {
            salesTotals = SalesTotals::construct(_orderTable, _specQty);
        }

        CurrencyCode currencyCodeForCalculation = _currencyCode ? _currencyCode : salesTotals.currencyCode();

        salesTotals.calc();

        if (_orderTable.TableId !=  tableNum(SalesBasket))
        {
            custCreditLimit = CustCreditLimit::construct(_orderTable, salesTotals);
        }

        container resultContainer = salesTotals.displayFieldsCurrency(currencyCodeForCalculation);
        if (custCreditLimit)
        {
            resultContainer += (CurrencyExchangeHelper::curAmount(custCreditLimit.calcCreditAvailable(), currencyCodeForCalculation, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), UnknownNoYes::Unknown, conPeek(resultContainer, TradeTotals::posExchRate())));
        }
        else
        {
            resultContainer += 0;
        }

        return resultContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetailTotals</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculate an outstanding order balance and prepayment amounts for retail
    /// </summary>
    /// <param name="_salesTable">
    ///    A sales order for which to calculate outstanding order balance and prepayment amounts
    /// </param>
    /// <returns>
    ///    A container object containing an outstanding order balance and prepayment amounts for retail
    /// </returns>
    public static container getRetailTotals(SalesTable _salesTable)
    {
        container totalAmounts = [0, 0];

        totalAmounts= SalesTotals::calculatePaymentsTotal(_salesTable,false);

        return totalAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetailTotalsAllAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculate an outstanding order balance and prepayment amounts for retail
    /// </summary>
    /// <param name="_salesTable">
    ///    A sales order for which to calculate outstanding order balance and prepayment amounts
    /// </param>
    /// <returns>
    ///    A container object containing an outstanding order balance and prepayment amounts for retail without cust account
    /// </returns>
    public static container getRetailTotalsAllAccounts(SalesTable _salesTable)
    {
        container totalAmounts = [0, 0];

        totalAmounts= SalesTotals::calculatePaymentsTotal(_salesTable,true);

        return totalAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePaymentsTotal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculate an outstanding order balance and prepayment amounts for retail
    /// </summary>
    /// <param name="_salesTable">
    ///    A sales order for which to calculate outstanding order balance and prepayment amounts
    /// </param>
    /// /// <param name="_switchToNew">
    ///    A boolean _isCalculateForAllAccounts when set to true all prepayments are totaled otherwise only payments to order account are taking into consideration."
    /// </param>
    /// <returns>
    ///    A container object containing an outstanding order balance and prepayment amounts for retail with cust account and without cust account
    /// </returns>
    private static container calculatePaymentsTotal(SalesTable _salesTable, boolean _isCalculateForAllAccounts)
    {
        container totalAmounts = [0, 0];

        SalesTotals salesTotals = SalesTotals::construct(_salesTable, SalesUpdate::All);
        salesTotals.calc();
        container displayFields = salesTotals.displayFieldsCurrency(_salesTable.CurrencyCode ? _salesTable.CurrencyCode : salesTotals.currencyCode());

        switch (_salesTable.SalesStatus)
        {
            case SalesStatus::None:
            case SalesStatus::Backorder:
            case SalesStatus::Delivered:

                CustInvoiceJour     custInvoiceJour;
                select sum(InvoiceAmount) from custInvoiceJour
                where custInvoiceJour.SalesId == _salesTable.SalesId;

                AmountCur totalOutstandingBalance = custInvoiceJour.InvoiceAmount + conpeek(displayFields, TradeTotals::posTotalAmount());

                CustTrans           custTrans;
                LedgerJournalTrans  ledgerJournalTrans;
                AmountCur prepayment;

                if(_isCalculateForAllAccounts)
                {
                    while select AmountCur, CurrencyCode, TransDate from custTrans
                    where custTrans.PaymReference == _salesTable.SalesId
                    exists join ledgerJournalTrans
                        where ledgerJournalTrans.Voucher == custTrans.Voucher
                    {
                        if (custTrans.CurrencyCode == _salesTable.CurrencyCode)
                        {
                            prepayment += -custTrans.AmountCur;
                        }
                        else
                        {
                            prepayment += SalesTotals::convertCurrencyToCurrency(custTrans.AmountCur, custTrans.CurrencyCode, _salesTable.CurrencyCode, custTrans.TransDate);
                        }
                    }
                }
                else
                {
                    while select AmountCur, CurrencyCode, TransDate from custTrans
                    where custTrans.AccountNum == _salesTable.CustAccount
                       && custTrans.PaymReference == _salesTable.SalesId
                    exists join ledgerJournalTrans
                        where ledgerJournalTrans.Voucher == custTrans.Voucher
                    {
                        if (custTrans.CurrencyCode == _salesTable.CurrencyCode)
                        {
                            prepayment += -custTrans.AmountCur;
                        }
                        else
                        {
                            prepayment += SalesTotals::convertCurrencyToCurrency(custTrans.AmountCur, custTrans.CurrencyCode, _salesTable.CurrencyCode, custTrans.TransDate);
                        }
                    }
                }

                totalOutstandingBalance -= prepayment;

                totalAmounts = [totalOutstandingBalance, prepayment];

                break;
        }

        return totalAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCurrencyToCurrency</Name>
				<Source><![CDATA[
	/// <summary>
    /// Convert original currency amount to specified currency amount.
    /// </summary>
    /// <param name = "_amountCur">Amount to convert.</param>
    /// <param name = "_fromCurrencyCode">Currency code from which amount need to be converted.</param>
    /// <param name = "_toCurrencyCode">Currency code to which amount need to be converted.</param>
    /// <param name = "_transDate">Transaction Date.</param>
    /// <returns>Converted Amount.</returns>
    private static AmountMST convertCurrencyToCurrency(AmountCurDebCred _amountCur, CustCurrencyCode _fromCurrencyCode, CustCurrencyCode _toCurrencyCode, TransDate _transDate)
    {
        AmountMST convertedAmount;
        CurrencyExchangeHelper currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), _transDate);
        convertedAmount = -1 * currencyExchangeHelper.calculateCurrencyToCurrency(_fromCurrencyCode, _toCurrencyCode, _amountCur, true);
        return convertedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesTotalsForTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>SalesTotals</c> class for tax calculations.
    /// </summary>
    /// <param name = "_salesTable">A sales order record.</param>
    /// <returns>An instance of the <c>SalesTotals</c> class.</returns>
    protected static SalesTotals createSalesTotalsForTax(SalesTable _salesTable)
    {
        return SalesTotals::construct(_salesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>Tax</c> object from the total calculation.
    /// </summary>
    /// <param name="_record">
    ///    The record on which to base the calculation.
    /// </param>
    /// <returns>
    ///    A <c>Tax</c> object.
    /// </returns>
    /// <remarks>Recommend to use getTaxV2() method if it is not Brazil tax or Indian withholding tax.</remarks>
    static public Tax getTax(Common _record)
    {
        SalesTotals salesTotals = SalesTotals::createSalesTotalsForTax(_record);
        salesTotals.calc();
        return salesTotals.tax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>Tax</c> object from the tax calculation.
    /// </summary>
    /// <param name="_record">The record on which to base the calculation.</param>
    /// <returns>The <c>Tax</c> object.</returns>
    /// <remarks>This method only calculates tax amount, not total amount. Currently it does not support Brazil tax or Indian withholding tax.</remarks>
    internal static Tax getTaxV2(Common _record)
    {
        SalesTotals salesTotals = SalesTotals::createSalesTotalsForTax(_record);
        salesTotals.calcTax();
        return salesTotals.tax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTax</Name>
				<Source><![CDATA[
    static FormRun showTax(str _menuItemDisplayStr, SalesTable _salesTable)
    {
        using (var activityContext = SalesInstrumentationLogger::createLogger(classStr(SalesTotals))
            .salesTotalsActivities()
            .showTax())
        {
            SalesTotals salesTotals = SalesTotals::createSalesTotalsForTax(_salesTable);
            salesTotals.calc();
            salesTotals.logTaxTelemetry(activityContext);
            return Tax::showTaxes(_menuItemDisplayStr, salesTotals.tax(),_salesTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTaxLine</Name>
				<Source><![CDATA[
    static void showTaxLine(
        str         _menuItemDisplayStr,
        SalesTable  _salesTable,
        SalesLine   _salesLine,
        FormRun     _callerFormRun = null,
        boolean     _mcrCSForm = false)
    {
        SalesTotals salesTotals = SalesTotals::createSalesTotalsForTax(_salesTable);
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            salesTotals.parmMCRCSForm(_mcrCSForm);
        }
        salesTotals.calc();
        salesTotals.tax().sourceSingleLine(true, true);
        Tax::showTaxes(_menuItemDisplaystr, salesTotals.tax(),_salesLine,_callerFormRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showWithholdTaxLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a <c>FormRun</c> object of <c>TaxWithholdTmpWorkTrans_IN</c> form.
    /// </summary>
    /// <param name="_salesTable">
    /// A <c>SalesTable</c> buffer.
    /// </param>
    /// <param name="_salesLine">
    /// A <c>SalesLine</c> buffer.
    /// </param>
    /// <param name="_callerFormRun">
    /// A <c>FormRun</c> object.
    /// </param>
    /// <returns>
    /// A <c>FormRun</c> object of <c>TaxWithholdTmpWorkTrans_IN</c> form.
    /// </returns>
    public static FormRun showWithholdTaxLine_IN(
        SalesTable  _salesTable,
        SalesLine   _salesLine,
        FormRun     _callerFormRun = null )
    {
        SalesTotals salesTotals = SalesTotals::construct(_salesTable);
        salesTotals.calc();
        return TaxWithhold_IN::showWithholdTaxes(salesTotals.taxWithhold_IN(), _salesLine, _callerFormRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcEstimate</Name>
				<Source><![CDATA[
    NoYes parmCalcEstimate(NoYes _calcEstimate = calcEstimate)
    {
        if (!prmisdefault(_calcEstimate))
        {
            calcEstimate = _calcEstimate;
        }
        return calcEstimate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logTaxTelemetry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs tax telemetry.
    /// </summary>
    /// <param name = "_activityContext">The activity context to log the telemetry.</param>
    [Hookable(false)]
    internal void logTaxTelemetry(SysInstrumentationActivityContext _activityContext)
    {
        if (Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Sales))
        {
            _activityContext.addCustomProperty(TaxTelemetryConstants::TaxEngineType, TaxTelemetryConstants::TaxEngineTypeTaxCalculationService);
            _activityContext.addCustomProperty(
                TaxTelemetryConstants::TaxEngineTypeTaxCalculationService,
                enum2Value(TaxIntegrationUtils::getTaxSolutionProviderTypeByBusinessProcess(TaxIntegrationBusinessProcess::Sales)));
        }
        else if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            _activityContext.addCustomProperty(TaxTelemetryConstants::TaxEngineType, TaxTelemetryConstants::TaxEngineTypeIndiaGST);
        }
        else
        {
            _activityContext.addCustomProperty(TaxTelemetryConstants::TaxEngineType, TaxTelemetryConstants::TaxEngineTypeCoreTax);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>