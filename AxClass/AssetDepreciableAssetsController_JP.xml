<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepreciableAssetsController_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetDepreciableAssetsController</c> class is the controller class for the <c>AssetDepreciableAssets</c> report.
/// </summary>
class AssetDepreciableAssetsController_JP extends SrsReportRunController implements BatchRetryable
{
    AssetDepreciableAssetsContract_JP   contract;
    boolean                             printAppendedTable;
    AssetDepreciableAssetsReportType_JP reportType;
    AssetDepreciableAssetsReportMethod_JP   depreciableReportMethod;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceJP00027, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report name based on the report type.
    /// </summary>
    /// <param name="_reportType">
    /// The report type.
    /// </param>
    public void initReportName(AssetDepreciableAssetsReportType_JP _reportType)
    {
        switch (_reportType)
        {
            case AssetDepreciableAssetsReportType_JP::Main:
                reportName = ssrsReportStr(AssetDepreciableAssets_JP, Design);
                break;

            case AssetDepreciableAssetsReportType_JP::AppendedTable1:
                reportName = ssrsReportStr(AssetDepreciableAssets_JP, DesignAppended1);
                break;

            case AssetDepreciableAssetsReportType_JP::AppendedTable2:
                reportName = ssrsReportStr(AssetDepreciableAssets_JP, DesignAppended2);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        super();

        contract = this.getReportContract().parmRdpContract();
        contract.parmLabelLanguageId(currentUserLanguage());

        if (this.parmArgs())
        {
            contract.parmReportType(this.parmArgs().parmEnum());
            // when the report was printed from menu, the dialog should always be show.
            this.parmShowDialog(true);
        }

        this.setDialogCaptionByReportType(contract.parmReportType());

        contract.parmPrintDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        super();

        printAppendedTable = contract.parmIsIncludeAppendedTable();
        reportType              = contract.parmReportType();
        depreciableReportMethod = contract.parmReportDepreciationMethod();

        if (reportType == AssetDepreciableAssetsReportType_JP::Main)
        {
            if (depreciableReportMethod == AssetDepreciableAssetsReportMethod_JP::ElectronicMethod)
            {
                contract.parmReportIncludedAssets(AssetReportIncludedAssets_JP::AllAssets);
            }
            else
            {
                contract.parmReportIncludedAssets(AssetReportIncludedAssets_JP::AdditionalAssets);
            }
        }

        SRSPrintDestinationSettings printSetting  = this.parmReportContract().parmPrintSettings();
        ISrsReportFileFormatContract fileFormatContract = this.parmReportContract().parmRdpContract() as ISrsReportFileFormatContract;

        if (this.isInBatch())
        {
            printSetting.printMediumType(SRSPrintMediumType::Archive);
        }
        else
        {
            SrsReportFileFormatControllerHelper::setPrintMedium(printSetting, fileFormatContract.parmFileFormat(), this.parmReportName());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrintSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Suppress print setting.
    /// </summary>
    /// <returns>false</returns>
    public boolean showPrintSettings()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDialogCaptionByReportType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the dialog caption based on the report type.
    /// </summary>
    /// <param name="_reportType">
    /// The report type.
    /// </param>
    public void setDialogCaptionByReportType(AssetDepreciableAssetsReportType_JP _reportType)
    {
        switch (_reportType)
        {
            case AssetDepreciableAssetsReportType_JP::Main:
                this.parmDialogCaption("@SYS4003799");
                break;

            case AssetDepreciableAssetsReportType_JP::AppendedTable1:
                this.parmDialogCaption("@SYS4003800");
                break;

            case AssetDepreciableAssetsReportType_JP::AppendedTable2:
                this.parmDialogCaption("@SYS4003801");
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>startOperation</Name>
				<Source><![CDATA[
    public SysOperationStartResult startOperation()
    {
        SysOperationStartResult ret;

        ret = super();

        if (printAppendedTable && args && args.parmEnum() == AssetDepreciableAssetsReportType_JP::Main)
        {
            AssetDepreciableAssetsController_JP::printAppendedTable(this);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    protected boolean validate()
    {
        const int                       One = 1;
        LogisticsAddressCity            logisticsAddressCity;
        LogisticsAddressCountryRegionId countryRegionId;

        LogisticsPostalAddress  postalAddress = CompanyInfo::find().postalAddress();

        boolean ret;

        ret = super();

        if (!TaxRegistration::getTaxRegistrationNumber_JP(postalAddress.Location, postalAddress.CountryRegionId))
        {
            //The corporate identification number was not printed because the current legal entity does not have a registration number with a
            //registration type of 'Primary for the country'.
            info("@FixedAssetsIncentiveDepreciation:Report26NoCorporateNumberInfo");
        }
        else if (TaxRegistration::getCountOfTaxRegistrationNumber_JP(postalAddress.Location, postalAddress.CountryRegionId) > One)
        {
            info("@FixedAssetsIncentiveDepreciation:Report26MultipleCorporateNumbersInfo");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        AssetDepreciableAssetsController_JP controller = new AssetDepreciableAssetsController_JP();
        controller.initReportName(_args.parmEnum());
        controller.parmArgs(_args);
        controller.getReportContract().parmRdpContract().parmFileFormat(SRSReportFileFormat::PDF);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printAppendedTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the appended table 1 and 2 for <c>AssetDepreciableAssets_JP</c> report.
    /// </summary>
    /// <param name="_mainReportController">
    /// The <c>AssetDepreciableAssetsController_JP</c> object.
    /// </param>
    public static void printAppendedTable(AssetDepreciableAssetsController_JP _mainReportController)
    {
        AssetDepreciableAssetsController_JP appended1Controller;
        AssetDepreciableAssetsController_JP appended2Controller;

        // print appended 1
        appended1Controller = new AssetDepreciableAssetsController_JP();
        appended1Controller.parmLoadFromSysLastValue(false);
        appended1Controller.parmReportName(ssrsReportStr(AssetDepreciableAssets_JP, DesignAppended1));
        appended1Controller.parmReportContract(_mainReportController.parmReportContract());
        appended1Controller.getReportContract().parmRdpContract().parmReportType(AssetDepreciableAssetsReportType_JP::AppendedTable1);
        appended1Controller.getReportContract().parmReportName(ssrsReportStr(AssetDepreciableAssets_JP, DesignAppended1));
        appended1Controller.parmArgs(null);
        appended1Controller.parmShowDialog(false);
        appended1Controller.startOperation();

        // print appended 2
        appended2Controller = new AssetDepreciableAssetsController_JP();
        appended2Controller.parmLoadFromSysLastValue(false);
        appended2Controller.parmReportName(ssrsReportStr(AssetDepreciableAssets_JP, DesignAppended2));
        appended2Controller.parmReportContract(_mainReportController.parmReportContract());
        appended2Controller.getReportContract().parmRdpContract().parmReportType(AssetDepreciableAssetsReportType_JP::AppendedTable2);
        appended2Controller.getReportContract().parmReportName(ssrsReportStr(AssetDepreciableAssets_JP, DesignAppended2));
        appended2Controller.parmArgs(null);
        appended2Controller.parmShowDialog(false);
        appended2Controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>