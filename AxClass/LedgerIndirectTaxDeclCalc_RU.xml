<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerIndirectTaxDeclCalc_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerIndirectTaxDeclCalc_RU</c> class performs calculation and storing the data related to the indirect taxes declaration.
/// </summary>
class LedgerIndirectTaxDeclCalc_RU extends RunBaseBatch implements BatchRetryable
{
    LedgerIndirectTaxDeclJournalTable_RU    journalTable;
    LedgerIndirectTaxDeclJournalTrans_RU    journalTrans;
    Branches_RU                             branch;
    FromDate                                fromDate;
    ToDate                                  toDate;
    KeySum                                  keySumSection1,
                                            keySumSection2,
                                            keySumAppendix;

    Query                                   query;
    container                               packedRecIdSet;

    private const int CurrentVersion = 1;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that performs calculation.
    /// </summary>
    private void calculateJournalTrans()
    {
        TaxTrans                                    taxTrans;
        TaxTable                                    taxTable;
        VendInvoiceTrans                            vendInvoiceTrans;
        InventLocation                              inventLocation;
        QueryRun                                    queryRun;
        LedgerIndirectTaxExcisableMeasure_RU        excisableMeasure;
        UnitOfMeasureConversion                     unitOfMeasureConversion;
        LedgerIndirectTaxExcGoodsKindCodes_RU       kindCodes;
        LedgerIndirectTaxExcGoodsTaxCodes_RU        taxCodes;
        container                                   conKey, conData, conWarning;
        Qty                                         excisableProductionQty;
        LedgerIndirectTaxVATSetup_RU                VATSetup;
        boolean                                     inventLocationFound = false;
        boolean                                     isAlcohol;
        Set                                         warningSet = new Set(Types::Container);
        SetEnumerator                               se;

        setPrefix(strfmt("@SYS76766", "@SYP4860062", journalTrans.BranchId));

        query = new Query(queryStr(LedgerIndirectTaxQuery_RU));
        query.dataSourceTable(tableNum(TaxTrans)).findRange(fieldNum(TaxTrans, TransDate)).value(queryRange(fromDate, toDate));
        query.dataSourceTable(tableNum(TaxTable)).addRange(fieldNum(TaxTable, TaxType_W)).value(con2Str([TaxType_W::VAT,
                                                                                                         TaxType_W::VATReduced,
                                                                                                         TaxType_W::VATZero,
                                                                                                         TaxType_W::Excise]));

        while select InventLocationId from inventLocation
            where inventLocation.VendAccount == branch.VendAccount
        {
            query.dataSourceTable(tableNum(InventDim)).addRange(fieldNum(InventDim, InventLocationId)).value(queryValue(inventLocation.InventLocationId));
            inventLocationFound = true;
        }

        if (inventLocationFound)
        {
            queryRun = new QueryRun(query);

            while (queryRun.next())
            {
                taxTrans    = queryRun.get(tableNum(TaxTrans));
                taxTable    = queryRun.get(tableNum(TaxTable));

                if (   taxTable.TaxType_W   == TaxType_W::Excise
                    && taxTable.TaxBase     == TaxBaseType::AmountByUnit)
                {
                    taxCodes    = LedgerIndirectTaxExcGoodsTaxCodes_RU::find(taxTrans.TaxCode);
                    kindCodes   = LedgerIndirectTaxExcGoodsKindCodes_RU::find(taxCodes.KindCode);

                    if (! kindCodes)
                    {
                        warningSet.add([strfmt("@SYP4860063", taxTrans.TaxCode),
                                                menuItemDisplayStr(LedgerIndirectTaxExcGoodsKindCodes_RU)]);
                    }
                    else if (kindCodes.ExcludeExciseTax == NoYes::No)
                    {
                        vendInvoiceTrans = queryRun.get(tableNum(VendInvoiceTrans));
                        VendInvoiceJour vendInvoiceJour = queryRun.get(tableNum(VendInvoiceJour));
                        VendTable vendTable = vendInvoiceJour.vendTable_InvoiceAccount();
                        CountryOKSMCode_RU countryOKSMCode = LogisticsAddressCountryRegion::find(vendTable.postalAddress().CountryRegionId).OKSMCode_RU;

                        unitOfMeasureConversion = UnitOfMeasureConversion::findByConversion(UnitOfMeasure::unitOfMeasureIdBySymbol(vendInvoiceTrans.PurchUnit),
                            UnitOfMeasure::unitOfMeasureIdBySymbol(taxTable.TaxUnit),
                            InventTable::itemProduct(vendInvoiceTrans.ItemId));

                        if (vendInvoiceTrans.inventTable().AlcoholProductionTypeId_RU)
                        {
                            excisableMeasure = unitOfMeasureConversion.Denominator ?
                                decRound(unitOfMeasureConversion.Numerator / unitOfMeasureConversion.Denominator, 3) :
                                0;
                            isAlcohol = true;
                        }
                        else
                        {
                            excisableMeasure = unitOfMeasureConversion.Factor;
                            isAlcohol = false;
                        }

                        excisableProductionQty = excisableMeasure ? taxTrans.TaxBaseQty / excisableMeasure : 0;
                        excisableMeasure = isAlcohol ? excisableMeasure * 100 : excisableMeasure;

                        conKey  = [kindCodes.BudgetReceiptClassCode, kindCodes.KindCode, countryOKSMCode, taxTable.TaxUnit, excisableMeasure];
                        conData = [excisableProductionQty, taxTrans.TaxBaseQty, taxTrans.TaxAmount];
                        keySumSection2.updateNow(conKey, conData);
                    }
                }
                else if (   taxTable.TaxType_W == TaxType_W::VAT
                         || taxTable.TaxType_W == TaxType_W::VATZero
                         || taxTable.TaxType_W == TaxType_W::VATReduced)
                {
                    VATSetup = LedgerIndirectTaxVATSetup_RU::find(taxTrans.TaxCode);

                    if (VATSetup)
                    {
                        if (taxTrans.TaxValue == 0 && taxTrans.TaxDirection == TaxDirection::VATTaxAgentCharged_RU)
                        {
                            conKey  = [VATSetup.BudgetReceiptClassCode, LedgerIndirectTaxVATLineNum_RU::Line040];
                            keySumSection1.updateNow(conKey, taxTrans.TaxBaseAmount);   // line 040 contains base, not the tax
                        }
                        else
                        {
                            conKey  = [VATSetup.BudgetReceiptClassCode, VATSetup.LineNum];
                            keySumSection1.updateNow(conKey, taxTrans.TaxAmount);
                        }
                    }
                    else
                    {
                        warningSet.add([strfmt("@SYP4860064", taxTrans.TaxCode),
                                        menuItemDisplayStr(LedgerIndirectTaxVATSetup_RU)]);
                    }
                }
            }

            se = warningSet.getEnumerator();
            while (se.moveNext())
            {
                conWarning = se.current();
                warning(conpeek(conWarning,1), '', new SysInfoAction_MenuItemRun_RU(MenuItemType::Display, conpeek(conWarning,2)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code which checks if the class can run.
    /// </summary>
    /// <returns>
    ///    Always true.
    /// </returns>
    private boolean check()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRecords</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the previously created calculation results.
    /// </summary>
    private void deleteRecords()
    {
        LedgerIndirectTaxSection1DeclTrans_RU   section1DeclTrans;
        LedgerIndirectTaxSection2DeclTrans_RU   section2DeclTrans;

        delete_from section1DeclTrans
            where section1DeclTrans.JournalId == journalTrans.JournalId
               && section1DeclTrans.BranchId  == journalTrans.BranchId;

        delete_from section2DeclTrans
            where section2DeclTrans.JournalId == journalTrans.JournalId
               && section2DeclTrans.BranchId  == journalTrans.BranchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the <c>SysLastValue</c> record for this user and object.
    /// </summary>
    /// <remarks>
    ///     This is a customization of the standard SysLastValues functionality and is required to support the split
    ///     implementation of serializing (via pack and unpack) and persisting user input (SysLastValue).
    /// </remarks>
    public void getLast()
    {
        // Don't make the call to super as we don't want the #CurrentList to be read from SysLastValue
        // super();

        // The following fields must be maintained to mimic the functionality of the overriden
        // method.
        getLastCalled   = true;
        inGetSaveLast   = true;

        // This is a RunBaseBatch derivative class. Manually restore the user's settings on the batch tab since
        // super() is not being called.
        xSysLastValue::getLast(this.batchInfo());

        // The following fields must be maintained to mimic the functionality of the overriden
        // method.
        inGetSaveLast = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    public void initFromArgs(Args   _args)
    {
        AllChosen                               allChosen;
        Set                                     set;
        FormDataSource                          formDataSource;
        LedgerIndirectTaxDeclJournalTrans_RU    journalTransCaller, journalTransLocal;

        if (   ! _args
            ||  _args.dataset() != tablenum(LedgerIndirectTaxDeclJournalTrans_RU)
            ||  _args.parmEnumType() != enumNum(AllChosen))
        {
            throw error("@GLS104275");
        }

        allChosen = _args.parmEnum();
        formDataSource =FormDataUtil::getFormDataSource(_args.record());
        set = new Set(Types::Int64);

        switch (allChosen)
        {
            case AllChosen::Chosen:
                for (journalTrans = formDataSource.getFirst(1) ? formDataSource.getFirst(1) : _args.record();
                     journalTrans;
                     journalTrans = formDataSource.getNext())
                {
                    if (journalTrans.Status == LedgerIndirectTaxDeclStatus_RU::NotCalculated)
                    {
                        set.add(journalTrans.RecId);
                    }
                }
                break;

            case AllChosen::All:
                journalTransCaller = _args.record();
                while select journalTransLocal
                    where journalTransLocal.JournalId == journalTransCaller.JournalId
                       && journalTransLocal.Status    == LedgerIndirectTaxDeclStatus_RU::NotCalculated
                {
                    set.add(journalTransLocal.RecId);
                }
                break;

            default:
                throw error("@SYS104799");
        }

        if (set.elements())
        {
            packedRecIdSet = set.pack();
        }
        else
        {
            throw error("@SYP4860065");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVariables</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes some calculation-related variables.
    /// </summary>
    private void initVariables()
    {
        journalTable    = journalTrans.journalTable();
        fromDate        = journalTable.fromDate();
        toDate          = journalTable.toDate();
        branch          = Branches_RU::find(journalTrans.BranchId);

        keySumSection1  = KeySum::construct(2, 1);
        keySumSection2  = KeySum::construct(5, 3);
        keySumAppendix  = KeySum::construct(3, 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a container that holds the macros for <c>CurrentVersion</c> and <c>CurrentList</c>, which is defined in the <c>ClassDeclaration</c> method.
    /// </summary>
    /// <returns>
    ///    A container that holds the macros for <c>CurrentVersion</c> and <c>CurrentList</c>.
    /// </returns>
    public container pack()
    {
        return [CurrentVersion, packedRecIdSet];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackedRecIdSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Passes the packed set of RecIds of the records which have to be calculated.
    /// </summary>
    /// <param name="_packedRecIdSet">
    ///    Packed set of RecIds of the records which have to be calculated.
    /// </param>
    /// <returns>
    ///    Packed set of RecIds of the records which have to be calculated.
    /// </returns>
    public container parmPackedRecIdSet(container _packedRecIdSet = packedRecIdSet)
    {
        packedRecIdSet = _packedRecIdSet;
        return packedRecIdSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preCalculate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs some actions prior to the calculation.
    /// </summary>
    private void preCalculate()
    {
        if (! this.check())
            throw error("@GLS104171");

        this.deleteRecords();
        this.updateStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        Set             set;
        SetEnumerator   se;
        int             i;

        set = Set::create(packedRecIdSet);
        se  = set.getEnumerator();

        this.progressInit("@SYS31242", set.elements(),  #AviFormLetter);
        progress.setText("@SYS8577");
        setPrefix("@SYP4860061");

        try
        {
            ttsbegin;

            while (se.moveNext())
            {
                i++;
                progress.setCount(i);
                journalTrans = LedgerIndirectTaxDeclJournalTrans_RU::findRecId(se.current(), true);

                if (! journalTrans)
                {
                    throw error("@SYS6144");
                }

                progress.setText(strfmt("@SYP4860067", journalTrans.BranchId));

                if (journalTrans.Status == LedgerIndirectTaxDeclStatus_RU::NotCalculated)
                {
                    this.initVariables();
                    this.preCalculate();
                    this.calculateJournalTrans();
                    this.saveCalculatedData();
                }
            }

            ttscommit;

            info("@SYS9265");
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            ttsabort;
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveCalculatedData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs saving of the calculated data from temporary data structures to the persistent tables.
    /// </summary>
    private void saveCalculatedData()
    {
        int                                         idx;
        container                                   conKey, conData;
        LedgerIndirectTaxSection1DeclTrans_RU       section1DeclTrans, section1DeclTransTotal;
        LedgerIndirectTaxSection2DeclTrans_RU       section2DeclTrans;

        for (idx = 1; idx <= keySumSection1.numOfTrans(); idx++)
        {
            conKey = keySumSection1.index2Key(idx);

            section1DeclTrans.clear();
            section1DeclTrans.initValue();
            section1DeclTrans.initFromJournalTrans(journalTrans);
            [section1DeclTrans.BudgetReceiptClassCode,
             section1DeclTrans.LineNum] = conKey;
            section1DeclTrans.VATAmount = keySumSection1.index2Data(idx);

            if (section1DeclTrans.VATAmount)
            {
                section1DeclTrans.insert();
            }
        }

        while select sum(VATAmount) from section1DeclTrans
            group by BudgetReceiptClassCode
            where section1DeclTrans.JournalId == journalTrans.JournalId
               && section1DeclTrans.BranchId  == journalTrans.BranchId
        {
            section1DeclTransTotal.clear();
            section1DeclTransTotal.initValue();
            section1DeclTransTotal.initFromJournalTrans(journalTrans);
            section1DeclTransTotal.BudgetReceiptClassCode  = section1DeclTrans.BudgetReceiptClassCode;
            section1DeclTransTotal.LineNum                 = LedgerIndirectTaxVATLineNum_RU::Line030;
            section1DeclTransTotal.VATAmount               = section1DeclTrans.VATAmount;

            if (section1DeclTransTotal.VATAmount)
            {
                section1DeclTransTotal.insert();
            }
        }

        for (idx = 1; idx <= keySumSection2.numOfTrans(); idx++)
        {
            conKey  = keySumSection2.index2Key(idx);
            conData = keySumSection2.index2Data(idx);

            section2DeclTrans.clear();
            section2DeclTrans.initValue();
            section2DeclTrans.initFromJournalTrans(journalTrans);

            [section2DeclTrans.BudgetReceiptClassCode,
             section2DeclTrans.KindCode,
             section2DeclTrans.CountryOKSMCode,
             section2DeclTrans.Unit,
             section2DeclTrans.ExcisableMeasure] = conKey;

            [section2DeclTrans.ExcisableQty, 
             section2DeclTrans.TaxBaseQty,
             section2DeclTrans.ExciseAmount] = conData;


            if (section2DeclTrans.ExcisableQty || section2DeclTrans.TaxBaseQty || section2DeclTrans.ExciseAmount)
            {
                section2DeclTrans.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the <c>SysLastValue</c> record for this user and object.
    /// </summary>
    /// <remarks>
    ///    This is a customization of the standard SysLastValues functionality and is required to support the split
    ///    implementation of serializing (via pack and unpack) and persisting user input (SysLastValue).
    /// </remarks>
    public void saveLast()
    {
        ;
        // Don't make the call to super as we don't want the #CurrentList to be saved to SysLastValue
        // super();

        // The following fields must be maintained to mimic the functionality of the overriden
        // method.
        inGetSaveLast   = true;

        // This is a RunBaseBatch derivative class. Manually save the user's settings on the batch tab since
        // super() is not being called.
        xSysLastValue::saveLast(this.batchInfo());

        // The following fields must be maintained to mimic the functionality of the overriden
        // method.
        inGetSaveLast = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Unpacks what the <c>pack</c> method has packed.
    /// </summary>
    /// <param name="packedClass">
    ///    The packed class in a container.
    /// </param>
    /// <returns>
    ///    true if the container has been unpacked successfully; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    When the <c>isSwappingPrompt</c> method returns a value of true, it may be necessary to unpack some prompt-related variables as well.
    /// </remarks>
    public boolean unpack(container packedClass)
    {
        Integer version = conpeek(packedClass, 1);

        switch (version)
        {
            case CurrentVersion:
                [version, packedRecIdSet] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the status of the record being calculated.
    /// </summary>
    private void updateStatus()
    {
        journalTrans.Status = LedgerIndirectTaxDeclStatus_RU::Calculated;
        journalTrans.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static LedgerIndirectTaxDeclCalc_RU construct()
    {
        return new LedgerIndirectTaxDeclCalc_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Text description of the class which is shown in the dialog.
    /// </summary>
    /// <returns>
    ///   Text description of the class.
    /// </returns>
    public static ClassDescription description()
    {
        return "@SYP4860061";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args   _args)
    {
        FormDataSource                  formDataSource;
        LedgerIndirectTaxDeclCalc_RU    runClass = LedgerIndirectTaxDeclCalc_RU::construct();
        ;

        runClass.initFromArgs(_args);

        if (runClass.prompt())
        {
            runClass.runOperation();

            formDataSource =FormDataUtil::getFormDataSource(_args.record());

            if (formDataSource)
            {
                formDataSource.research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>