<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRPaymentAdjustments</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRPaymentAdjustments</c> class is used to adjust payment records if there is an extra charge.
/// </summary>
/// <remarks>
/// The charges or refunds may occur due to item substitutions or item cancellations.
/// If the previous order amount differs from the current order amount only by a penny then
/// no adjustments are made to the payments.
/// </remarks>
class MCRPaymentAdjustments
{
    AmountCur               beforePaymAmt;
    AmountCur               currentOrderAmt;
    AmountCur               amtChanged;
    SalesTable              salesTable;
    MCRSalesOrderTotals     mcrSalesOrderTotals;
    MCRPaymAdjustmentType   paymAdjustmentType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLedgerAmtForOrderPayMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the total ledger journal trans amount for a given
    /// payment method on the order being processed (canceled/returned).
    /// </summary>
    /// <param name="_paymMode">
    /// The payment method to calculate the amount posted.
    /// </param>
    /// <returns>
    /// The total amount for a given payment method.
    /// </returns>
    AmountCur getLedgerAmtForOrderPayMethod(PaymMode _paymMode)
    {
        AmountCur           ledgerPrePayAmt = 0;
        LedgerJournalTrans  ledgerJournalTrans;

        select sum (AmountCurDebit), sum (AmountCurCredit) from ledgerJournalTrans
            where ledgerJournalTrans.MCRPaymOrderID == salesTable.SalesId
                  && ledgerJournalTrans.PaymMode == _paymMode;

        return ledgerJournalTrans.AmountCurDebit - ledgerJournalTrans.AmountCurCredit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasMultiplePayments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if a given sales transaction has multiple payments.
    /// </summary>
    /// <returns>
    /// true if there are multiple payments; otherwise, false.
    /// </returns>
    boolean hasMultiplePayments()
    {
        if (MCRCustPaymTable::count(salesTable.TableId, salesTable.RecId) > 1)
            return true;
        else
            return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasSettlementSent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether or not the credit card settlement
    /// has been sent for the passed payment record.
    /// </summary>
    /// <param name="_custPaymTable">
    /// The payment that is being adjusted.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Method needs to be overridden in child classes.
    /// </exception>
    void hasSettlementSent(MCRCustPaymTable _custPaymTable)
    {
         throw error(strFmt("@MCR24326", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Initializes the class variable with the passed in information.
    /// </summary>
    /// <param name="_beforePaymAmount">
    ///The payment amount before the adjustment.
    /// </param>
    /// <param name="_salesTable">
    /// The transaction that the amount has to be adjusted on.
    /// </param>
    /// <param name="_mcrSalesOrderTotals">
    /// The sales order totals.
    /// </param>
    /// <param name="_currentOrderAmt">
    /// The current order amount the transaction.
    /// </param>
    /// <param name="_amtChanged">
    /// The changed amount on the transaction.
    /// </param>
    /// <remarks>
    /// If a valid salesbuffer is not passed the class is not instantiated and an error will be issued.
    /// </remarks>
    void new(AmountCur              _beforePaymAmount,
                SalesTable          _salesTable,
                MCRSalesOrderTotals  _mcrSalesOrderTotals,
                AmountCur           _currentOrderAmt,
                AmountCur           _amtChanged)
    {
        // Initialize the values of the class with passed in values.
        beforePaymAmt           = _beforePaymAmount;
        salesTable              = _salesTable;
        mcrSalesOrderTotals     = _mcrSalesOrderTotals;
        currentOrderAmt         = _currentOrderAmt;
        amtChanged              = abs(_amtChanged);  // Always make it positive, the child classes will know which direction
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPaymentAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the payments on the sales order.
    /// </summary>
    /// <remarks>
    ///  This method is the driver for adjusting the payments. First
    ///  we figure out if the payment on the sales order is a single payment
    ///  or if it is a multiple payment. Once this decision is made
    ///  appropriate methods are called to either charge the customer for
    ///  the additional amounts or refund the customer.
    ///  Transactions should be settled once the payments are adjusted.
    ///  Check the overall payment status using the Cust payment totals
    ///  If the overall payment status is pending - set the sales order
    ///  status to pending.
    /// </remarks>
    void processPaymentAdjustments()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebalancePercentages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rebalances the percentages on the payment records.
    /// </summary>
    /// <param name="_recIdChangedRec">
    /// The payment record ID for rebalancing.
    /// </param>
    /// <remarks>
    /// Rebalances the percentages on the payment records.
    ///     ----------------------------------------------------------------------------------
    ///     Formula for rebalancing:
    ///     1. Increase or decrease the amount on the record that is going to be
    ///     adjusted.
    ///     2. Loop through the remaining records recalculate the percentages
    ///     Example:
    ///     The following is a snap shot of the custPaymRecords
    ///     The original amount charged on this card was $33
    ///     The change in amount was $23, this will get to the on_Acct record that was
    ///     originally at 25%. Now figure out the percent that the changed amount
    ///     represents and change the remaining percentages, add up the percentages
    ///     to ensure they total to a 100.00.
    ///
    ///     creditcard - 25% - $6.18.
    ///     Cash       - 25% - $6.19.
    ///     On_Acct    - 25% - $6.19.
    ///     Chk_USD    -     - $8.25.
    ///     creditCard - 25% - $6.19
    ///     The records after the change will look as below.
    ///
    ///     creditcard -12.95% - $6.18.
    ///     Cash       - 12.96% - $6.19.
    ///     On_Acct    - 61.13% - $29.19.
    ///     Chk_USD    -        - $8.25.
    ///     creditCard - 12.96% - $6.19.
    /// </remarks>
    void rebalancePercentages(RecId _recIdChangedRec)
    {
        MCRCustPaymTable    mcrCustPaymTable;
        AmountCur           newOrderAmount;
        real                totalPercent;
        real                newPercent;
        real                difference;
        real                origPercentAmt;

        select sum(Amount) from mcrCustPaymTable
            where mcrCustPaymTable.RefRecId == salesTable.RecId
            && mcrCustPaymTable.RefTableId == salesTable.TableId
            && mcrCustPaymTable.PercentAmount != 0.0;

        if (mcrCustPaymTable.Amount  != 0)
        {
            newOrderAmount = mcrCustPaymTable.Amount;

            while select forupdate Amount, PercentAmount from mcrCustPaymTable
                    where mcrCustPaymTable.RefRecId == salesTable.RecId
                        && mcrCustPaymTable.RefTableId == salesTable.TableId
                        && mcrCustPaymTable.PercentAmount != 0.0
            {
                ttsBegin;
                    newPercent = (mcrCustPaymTable.Amount/newOrderAmount)*100;
                    mcrCustPaymTable.PercentAmount = newPercent;
                    totalPercent += mcrCustPaymTable.PercentAmount;
                    mcrCustPaymTable.update();
                ttsCommit;
            }
            // Check percentage total to ensure that it is equal to 100%
            if (totalPercent != 100.00)
            {
                difference = 100.00-totalPercent;
                mcrCustPaymTable = MCRCustPaymTable::findByRecID(_recIdChangedRec, true);
                origPercentAmt = mcrCustPaymTable.PercentAmount;
                origPercentAmt += difference;

                ttsBegin;
                    mcrCustPaymTable.PercentAmount = origPercentAmt;
                    mcrCustPaymTable.update();
                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new <c>MCRPaymentAdjustments</c> object.
    /// </summary>
    /// <param name="_beforePaymAmount">
    /// The total sales order amount before adjustment.
    /// </param>
    /// <param name="_salesTable">
    /// The sales order being modified.
    /// </param>
    /// <returns>
    /// A <c>MCRPaymentAdjustments_Refund</c> object is amount changed is
    /// negative; otherwise, a <c>MCRPaymentAdjustments_Charge</c> object.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// <c>SalesTable</c> record is required to execute logic in the class.
    /// </exception>
    public static MCRPaymentAdjustments construct(AmountCur _beforePaymAmount, SalesTable _salesTable)
    {
        MCRSalesOrderTotals  salesOrderTotals;
        AmountCur           currentOrderAmt;
        AmountCur           amtChanged;

        if (_salesTable)
        {
            if (MCRRecalculateChargesOnPaymentAdjustmentFlight::instance().isEnabled())
            {
                _salesTable.createMarkupTrans(false, true);
            }
            salesOrderTotals = new mcrSalesOrderTotals(_salesTable);
            currentOrderAmt   = salesOrderTotals.getTotalOrder();
            if (currentOrderAmt < 0)
            {
                // Check if the negative amount is equal to the discount amount
                // if it is set the current order amt to a zero since discounts
                // are taken care of by the order totals
                if (salesOrderTotals.getRemainingDisc() == abs(currentOrderAmt))
                {
                    currentOrderAmt = 0;
                }
            }
            amtChanged = currentOrderAmt-_beforePaymAmount;

            if (amtChanged > 0.0)
            {
                return new mcrPaymentAdjustments_Charge(_beforePaymAmount,
                                                        _salesTable,
                                                        salesOrderTotals,
                                                        currentOrderAmt,
                                                        amtChanged);
            }
            else
            {
                return new mcrPaymentAdjustments_Refund(_beforePaymAmount,
                                                        _salesTable,
                                                        salesOrderTotals,
                                                        currentOrderAmt,
                                                        amtChanged);
            }
        }
        else
        {
            throw error(strFmt("@SYS29104", classId2Name(classNum(MCRPaymentAdjustments))));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>