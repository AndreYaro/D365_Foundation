<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayTaxCalculate_Standard</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rPayTaxCalculate_Standard extends RPayTaxCalculate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTaxDeduct</Name>
				<Source><![CDATA[
        public RPayAmount calcTaxDeduct(ReportPeriod_RU _payPeriod)
    {
        container                   conIncomeCurrent;
        RPayAmount                  incomeTotalCurrent,
                                    incomeTotalPrev,
                                    deductionStandardCurrent,
                                    deductionStandardPrev,
                                    deductionStandardRefundable,
                                    dedStandardAmount,
                                    dedStandardRefundableAmount,
                                    incomeTotal,
                                    taxDeduct,
                                    incomeManual,
                                    deductTaxAmount,
                                    deductTaxAmountFuture,
                                    passToGni,
                                    redemptionAmount;
        RPayRateValue               percentage;
        RHRMVirtualNetworkFamily    rhrmVirtualNetworkFamily;
        RPayEmplTax                 emplTax;
        ReportPeriod_RU             payPeriodEnd;
        Map                         mapPeriod;
        int                         i;
        container                   con;

        void calcAmounts(ReportPeriod_RU _payPeriodStart, ReportPeriod_RU _payPeriodEnd)
        {
            incomeTotalCurrent += incomeManual;
            conTaxSumPrev       = RPayTaxEmplSum::getTaxSum(emplId,
                                                            rPayTaxIncomeGroupTable.RpayTaxIncomeGroupCode,
                                                            _payPeriodStart,
                                                            _payPeriodEnd,
                                                            dateNull(),
                                                            dateMax(),
                                                            true) ;

            incomeTotalPrev         += conPeek(conTaxSumPrev,1) - conPeek(conTaxSumPrev,3);
            deductionStandardPrev   += conPeek(conTaxSumPrev,2);
            deductTaxAmount         += conPeek(conTaxSumPrev,4) + conPeek(conTaxSumPrev,8);
            deductTaxAmountFuture   += conPeek(conTaxSumPrev,7);
            passToGni               += conPeek(conTaxSumPrev,10);
            redemptionAmount        =  conPeek(this.redemptionAmountSumType(_payPeriod), 2) + conPeek(conTaxSumPrev, 11);
        }

        emplTax  = RPayEmplTax::construct(emplId, RPayParameters::payPeriod(emplTable.EmployeeId));
        if (!emplTax.useLastTaxStatus())
            emplTax  = RPayEmplTax::construct(emplId, _payPeriod);

        while select rPayTaxIncomeTable
        {
            if (rPayTaxIncomeTable.RpayTaxDeductionCode && RPayTaxDeductionTable::find(rPayTaxIncomeTable.RpayTaxDeductionCode).ActOnRelative)
            {
                while select RecId from rhrmVirtualNetworkFamily
                    where (rhrmVirtualNetworkFamily.Relatives == RHRMRelationship::Son ||
                           rhrmVirtualNetworkFamily.Relatives == RHRMRelationship::Daughter) &&
                           rhrmVirtualNetworkFamily.PersonnelNumber == RHRMEmplTable::find(emplId).personTable().PersonnelNumber
                {
                    conIncomeCurrent    = this.calcTaxIncomeCurrent(rPayTaxIncomeTable.RpayTaxIncomeCode,rPayTaxIncomeGroupTable.Fund, _payPeriod,rhrmVirtualNetworkFamily.RecId);
                    incomeTotalCurrent += conPeek(conIncomeCurrent,1) - conPeek(conIncomeCurrent,2);
                }
            }
            else
            {
                conIncomeCurrent    = this.calcTaxIncomeCurrent(rPayTaxIncomeTable.RpayTaxIncomeCode, rPayTaxIncomeGroupTable.Fund, _payPeriod);
                incomeTotalCurrent += conPeek(conIncomeCurrent,1) - conPeek(conIncomeCurrent,2);
            }
        }

        if (RPayTaxParameters::find().TaxStatusRefund || emplTax.useLastTaxStatus())
        {
            calcAmounts(endmth(dateStartYr(_payPeriod)), endmth(prevMth(_payPeriod)));
        }
        else
        {
            mapPeriod = Map::create(emplTax.taxStatusPeriod());

            if (mapPeriod.exists(emplTax.taxStatus()))
            {
                con = mapPeriod.lookup(emplTax.taxStatus());
                for (i = 1; i <= conLen(con); i += 2)
                {
                    payPeriodEnd = conPeek(con, i + 1);
                    payPeriodEnd = payPeriodEnd == _payPeriod ? endmth(prevMth(_payPeriod)) : payPeriodEnd;
                    calcAmounts(conPeek(con, i), payPeriodEnd);
                }
            }
        }

        incomeManual = RPayTaxEmplSum::getNetIncomeManual(emplId,rPayTaxIncomeGroupTable.RpayTaxIncomeGroupCode,_payPeriod);

        if (rPayTaxIncomeGroupTable.StandardDeductions)
        {
            while select rPayTaxDeductionTable
                order by RpayTaxDeductionCode
                where rPayTaxDeductionTable.RpayTaxDeductionType == RpayTaxDeductionType::Standard
            {
                [dedStandardAmount, dedStandardRefundableAmount] = this.calcTaxDeductionCurrent(rPayTaxDeductionTable.RpayTaxDeductionCode,_payPeriod,incomeTotalCurrent);

                deductionStandardCurrent    += dedStandardAmount;
                deductionStandardRefundable += dedStandardRefundableAmount;
            }
        }

        percentage  = emplTax.taxGroup2RateValue(rPayTaxIncomeGroupTable) / 100;
        incomeTotal = incomeTotalPrev - deductionStandardPrev + incomeTotalCurrent - deductionStandardCurrent;
        taxDeduct   = incomeTotal * percentage - (deductTaxAmount - deductTaxAmountFuture + passToGni) + redemptionAmount;

        if (RPayTaxParameters::find().ReimbursementType == RPayTaxReimbursementType::ReckoningTax && taxDeduct < 0)
        {
            if (deductionStandardRefundable)
            {
                taxDeduct = max(taxDeduct, - deductionStandardRefundable * percentage);
            }
            else
            {
                taxDeduct = 0;
            }
        }

        taxDeduct = round(taxDeduct,RPayTaxParameters::find().TaxRound);

        return taxDeduct;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>