<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmContactPersonFormApplicationSuiteEventHandlers</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the form events for the <c>smmContactPerson</c> form and the <c>smmContactPerson.ApplicationSuiteExtension</c> form extension.
/// </summary>
public final class smmContactPersonFormApplicationSuiteEventHandlers
{
    HcmWorkerLookup     hcmWorkerLookupCurrentCompany;
    SysLookupMultiSelectCtrl citizenRegionsCtrl;

    boolean             initialized;

    boolean             createOrgPersonRelationRecord;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of this form event handler class and registers it with the base form.
    /// </summary>
    /// <param name = "_formRun">An instance of the form being extended.</param>
    public void new(FormRun _formRun)
    {
        initialized = false;

        // Register this event handlers with the main form
        _formRun.registerExtensionInstance(classStr(smmContactPersonFormApplicationSuiteEventHandlers), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// The OnInitializing event handler for the <c>smmContactPerson</c> form.
    /// </summary>
    /// <param name="_sender">The instance of the form being extended.</param>
    /// <param name="_e">The args for the event.</param>
    [FormEventHandler(formStr(smmContactPerson), FormEventType::Initializing)]
    public static void initializingForm(xFormRun _sender, FormEventArgs _e)
    {
        smmContactPersonFormApplicationSuiteEventHandlers extensionInstance = new smmContactPersonFormApplicationSuiteEventHandlers(_sender as FormRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializedForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// The OnInitialized event handler for the <c>smmContactPerson</c> form.
    /// </summary>
    /// <param name="_sender">The instance of the form being extended.</param>
    /// <param name="_e">The args for the event.</param>
    [FormEventHandler(formStr(smmContactPerson), FormEventType::Initialized)]
    public static void initializedForm(xFormRun _sender, FormEventArgs _e)
    {
        FormRun formRun = _sender as FormRun;

        smmContactPersonFormApplicationSuiteEventHandlers extensionInstance = formRun.getExtensionInstance(classStr(smmContactPersonFormApplicationSuiteEventHandlers));
        extensionInstance.registerInstanceEventHandlers(formRun);

        if (formRun.args())
        {
            switch (formRun.args().dataset())
            {
                case tableNum(PurchRFQCaseTable) :
                    var formDataSource = formRun.dataSource(formDataSourceStr(smmContactPerson, ContactPerson)) as FormDataSource;
                    formDataSource.allowCreate(false);
                    break;
            }
        }

        smmContactPersonFormApplicationSuiteEventHandlers::disableMicrosoftOutlookSynchronizationControls(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerInstanceEventHandlers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes this form event handler instance
    /// </summary>
    private void registerInstanceEventHandlers(FormRun _formRun)
    {
        FormReferenceGroupControl mainResponsibleWorkerControl;

        if (initialized)
        {
            return;
        }

        initialized = true;

        // Cache of the extension controls
        mainResponsibleWorkerControl = _formRun.design().controlName(formControlStr(smmContactPerson, Mainresponsible_MainResponsibleWorker)) as FormReferenceGroupControl;

        // Register overrides
        mainResponsibleWorkerControl.registerOverrideMethod(methodStr(FormReferenceControl, lookupReference), methodStr(smmContactPersonFormApplicationSuiteEventHandlers, mainResponsibleWorkerLookupReference), this);
        mainResponsibleWorkerControl.registerOverrideMethod(methodStr(FormReferenceControl, resolveReference), methodStr(smmContactPersonFormApplicationSuiteEventHandlers, mainResponsibleWorkerResolveReference), this);

        hcmWorkerLookupCurrentCompany = HcmWorkerLookup::newCustomOptions(true, true, true, false, true, true, true, true, true);

        this.registerCountryMultiSelect(_formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCountryMultiSelect</Name>
				<Source><![CDATA[
    private void registerCountryMultiSelect(FormRun _formRun)
    {
        FormStringControl citizenshipControl = _formRun.design().controlName(formControlStr(smmContactPerson, Group_Citizenship)) as FormStringControl;
        if (citizenshipControl != null)
        {
            Query countryQuery = new Query();
            QueryBuildDataSource countries = SysQuery::findOrCreateDataSource(countryQuery, tableNum(LogisticsAddressCountryRegion));
            countries.addSelectionField(fieldNum(LogisticsAddressCountryRegion, CountryRegionId));

            container selectedField = [tableNum(LogisticsAddressCountryRegion), fieldNum(LogisticsAddressCountryRegion, CountryRegionId)];

            citizenRegionsCtrl = SysLookupMultiSelectCtrl::constructWithQuery(
                _formRun,
                citizenshipControl,
                countryQuery,
                false,
                selectedField);

            citizenshipControl.registerOverrideMethod(methodStr(FormStringControl, modified), methodStr(smmContactPersonFormApplicationSuiteEventHandlers, citizenshipControlModified));

            var privateDetails_DS = _formRun.dataSource(formDataSourceStr(smmContactPerson, HcmPersonPrivateDetails)) as FormDataSource;
            privateDetails_DS.OnWriting += eventhandler(this.writingHcmPersonPrivateDetailsDataSource);
            privateDetails_DS.OnActivated += eventHandler(this.activatedHcmPersonPrivateDetailsDataSource);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writingHcmPersonPrivateDetailsDataSource</Name>
				<Source><![CDATA[
    private void writingHcmPersonPrivateDetailsDataSource(FormDataSource sender, FormDataSourceEventArgs e)
    {
        if (citizenRegionsCtrl)
        {
            HcmPersonPrivateDetails detailsRecord;

            select firstonly Person from detailsRecord where detailsRecord.RecId ==  sender.cursor().RecId;
            HcmPersonPrivateCitizenshipDetails::setPersonCitizenshipsFromContainer(detailsRecord.Person, citizenRegionsCtrl.getSelectedFieldValues());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>activatedHcmPersonPrivateDetailsDataSource</Name>
				<Source><![CDATA[
    private void activatedHcmPersonPrivateDetailsDataSource(FormDataSource sender, FormDataSourceEventArgs e)
    {
        if (citizenRegionsCtrl)
        {
            HcmPersonPrivateDetails detailsRecord;

            select firstonly Person from detailsRecord where detailsRecord.RecId ==  sender.cursor().RecId;
            citizenRegionsCtrl.set([conNull(), HcmPersonPrivateCitizenshipDetails::getPersonCitizenshipsAsContainer(detailsRecord.Person)]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>citizenshipControlModified</Name>
				<Source><![CDATA[
    private void citizenshipControlModified(FormControl sender, FormControlEventArgs e)
    {
        var privateDetails_DS = sender.formRun().dataSource(formDataSourceStr(smmContactPerson, HcmPersonPrivateDetails)) as FormDataSource;
        privateDetails_DS.forceWrite(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainResponsibleWorkerLookupReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Custom override method for handling the Mainresponsible_MainResponsibleWorker control's lookupReference.
    /// </summary>
    /// <param name = "_sender">The control initiating the lookup.</param>
    private Common mainResponsibleWorkerLookupReference(FormReferenceControl _sender)
    {
        return hcmWorkerLookupCurrentCompany.lookupWorker(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainResponsibleWorkerResolveReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Custom override method for handling the Mainresponsible_MainResponsibleWorker control's resolveReference.
    /// </summary>
    /// <param name = "_sender">The control initiating the lookup.</param>
    private Common mainResponsibleWorkerResolveReference(FormReferenceControl _sender)
    {
        HcmWorker ret;

        ret = _sender.resolveReference();

        if (ret != null && !hcmWorkerLookupCurrentCompany.validateWorker(ret.RecId))
        {
            ret = null;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activatedContactPersonDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the OnActivated event for the <c>smmContactPerson</c> form ContactPerson data source.
    /// </summary>
    /// <param name="_sender">The form data source being activated.</param>
    /// <param name="_e">The args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(smmContactPerson, ContactPerson), FormDataSourceEventType::Activated)]
    public static void activatedContactPersonDataSource(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        smmContactPersonFormApplicationSuiteEventHandlers::enableApplicableRelatedInfoButtons(_sender.formRun(), _sender.cursor());
        smmContactPersonFormApplicationSuiteEventHandlers::enableApplicableMarketButtons(_sender.formRun(), _sender.cursor());
        smmContactPersonFormApplicationSuiteEventHandlers::enableApplicableAccountsButtons(_sender.formRun(), _sender.cursor());
        smmContactPersonFormApplicationSuiteEventHandlers::enableAllowRemoveVendorPortalAccessControls(_sender.formRun(), _sender.cursor());
        smmContactPersonFormApplicationSuiteEventHandlers::enableVendorPortalUserRequestsControls(_sender.formRun(), _sender.cursor());
        smmContactPersonFormApplicationSuiteEventHandlers::disableMicrosoftOutlookSynchronizationControls(_sender.formRun());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableApplicableRelatedInfoButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the related information group buttons.
    /// </summary>
    /// <param name = "_formRun">The instance of the form being extended.</param>
    /// <param name = "_contactPerson">The <c>ContactPerson</c> record.</param>
    private static void enableApplicableRelatedInfoButtons(FormRun _formRun, ContactPerson _contactPerson)
    {
        boolean                 enableLeads, enableOpportunities;
        DirOrgPersonRelations   orgPersonRelations;
        SalesQuotationTable     salesQuotationTableRecord;
        SalesTable              salesTableRecord;
        CustAccount             custAccount;

        select firstonly RecId from orgPersonRelations
        where orgPersonRelations.ContactPersonId == _contactPerson.ContactPersonId &&
              orgPersonRelations.EntityRefTableId == tableNum(smmLeadTable);
        enableLeads = orgPersonRelations.RecId ? true : false;

        select firstonly RecId from orgPersonRelations
        where orgPersonRelations.ContactPersonId == _contactPerson.ContactPersonId &&
              orgPersonRelations.EntityRefTableId == tableNum(smmOpportunityTable);
        enableOpportunities = orgPersonRelations.RecId ? true : false;

        custAccount = _contactPerson.getCustAccount();

        if (custAccount)
        {
            select firstonly RecId from salesQuotationTableRecord
                where salesQuotationTableRecord.CustAccount == custAccount;

            select firstonly RecId from salesTableRecord
            where salesTableRecord.CustAccount == custAccount;
        }

        _formRun.design().controlName(formControlStr(smmContactPerson, SalesQuotationListPage)).enabled(salesQuotationTableRecord.RecId != 0);
        _formRun.design().controlName(formControlStr(smmContactPerson, SalesTableListPage)).enabled(salesTableRecord.RecId != 0);
        _formRun.design().controlName(formControlStr(smmContactPerson, smmLeadsListPage)).enabled(enableLeads);
        _formRun.design().controlName(formControlStr(smmContactPerson, smmOpportunitiesListPage)).enabled(enableOpportunities);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableApplicableMarketButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the market group buttons.
    /// </summary>
    /// <param name = "_formRun">The instance of the form being extended.</param>
    /// <param name = "_contactPerson">The <c>ContactPerson</c> record.</param>
    private static void enableApplicableMarketButtons(FormRun _formRun, ContactPerson _contactPerson)
    {
        smmTMCallListTable  smmTMCallListTable;
        smmMailings         smmMailingsRecord;
        smmCampaignSelection smmCampaignSelection;

        select firstonly RecId from smmCampaignSelection
            where smmCampaignSelection.ContactPersonId == _contactPerson.ContactPersonId;
        _formRun.design().controlName(formControlStr(smmContactPerson, smmCampaignsListPage)).enabled(smmCampaignSelection.RecId != 0);

        select firstonly RecId from smmTMCallListTable
            where smmTMCallListTable.ContactPersonId == _contactPerson.ContactPersonId;
        _formRun.design().controlName(formControlStr(smmContactPerson, smmCallListsListPage)).enabled(smmTMCallListTable.RecId != 0);

        select firstonly RecId from smmMailingsRecord
            where smmMailingsRecord.ContactPersonId == _contactPerson.ContactPersonId;

        _formRun.design().controlName(formControlStr(smmContactPerson, smmMailings)).enabled(smmMailingsRecord.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableApplicableAccountsButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the accounts button group buttons.
    /// </summary>
    /// <param name = "_formRun">The instance of the form being extended.</param>
    /// <param name = "_contactPerson">The <c>ContactPerson</c> record.</param>
    private static void enableApplicableAccountsButtons(FormRun _formRun, ContactPerson _contactPerson)
    {
        _formRun.design().controlName(formControlStr(smmContactPerson, CustTableMenuItem)).enabled(DirPartyTableHelper::isCustomer(_contactPerson.ContactForParty));
        _formRun.design().controlName(formControlStr(smmContactPerson, VendTableMenuItem)).enabled(DirPartyTableHelper::isvendor(_contactPerson.ContactForParty));
        _formRun.design().controlName(formControlStr(smmContactPerson, BusinessRelationMenuItem)).enabled(DirPartyTableHelper::isRelation(_contactPerson.ContactForParty));
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableAllowRemoveVendorPortalAccessControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the vendor Portal allow remove access buttons and controls.
    /// </summary>
    /// <param name = "_formRun">The instance of the form being extended.</param>
    /// <param name = "_contactPerson">The <c>ContactPerson</c> record.</param>
    private static void enableAllowRemoveVendorPortalAccessControls(FormRun _formRun, ContactPerson _contactPerson)
    {
        FormRun caller = _formRun.args().caller();

        if (caller == null || caller.name() != formStr(VendTable))
        {
            _formRun.design().controlName(formControlStr(smmContactPerson, VendVendorPortalAllowAccess)).visible(false);
            _formRun.design().controlName(formControlStr(smmContactPerson, VendVendorPortalAllowAccess)).enabled(false);
            _formRun.design().controlName(formControlStr(smmContactPerson, VendVendorPortalRemoveAccess)).visible(false);
            _formRun.design().controlName(formControlStr(smmContactPerson, VendVendorPortalRemoveAccess)).enabled(false);
            _formRun.design().controlName(formControlStr(smmContactPerson, ContactPerson_VendorPortalAccessAllowed)).visible(false);
            _formRun.design().controlName(formControlStr(smmContactPerson, ContactPerson_VendorPortalAccessAllowed)).enabled(false);
            _formRun.design().controlName(formControlStr(smmContactPerson, VendorPortalGroup)).visible(false);
            _formRun.design().controlName(formControlStr(smmContactPerson, VendorPortalGroup)).enabled(false);
        }
        else
        {
            _formRun.design().controlName(formControlStr(smmContactPerson, VendVendorPortalAllowAccess)).enabled(!_contactPerson.VendorPortalAccessAllowed && !_contactPerson.Inactive);
            _formRun.design().controlName(formControlStr(smmContactPerson, VendVendorPortalRemoveAccess)).enabled(_contactPerson.VendorPortalAccessAllowed);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableVendorPortalUserRequestsControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the vendor Portal user request form controls.
    /// </summary>
    /// <param name = "_formRun">The instance of the form being extended.</param>
    /// <param name = "_contactPerson">The <c>ContactPerson</c> record.</param>
    private static void enableVendorPortalUserRequestsControls(FormRun _formRun, ContactPerson _contactPerson)
    {
        FormRun caller = _formRun.args().caller();

        if (caller == null || caller.name() != formStr(VendTable))
        {
            _formRun.design().controlName(formControlStr(smmContactPerson, VendVendorPortalProvisionUser)).visible(false);
            _formRun.design().controlName(formControlStr(smmContactPerson, VendVendorPortalProvisionUser)).enabled(false);
            _formRun.design().controlName(formControlStr(smmContactPerson, VendVendorPortalInactivateUser)).visible(false);
            _formRun.design().controlName(formControlStr(smmContactPerson, VendVendorPortalInactivateUser)).enabled(false);
            _formRun.design().controlName(formControlStr(smmContactPerson, VendVendorPortalMaintainUserRoles)).visible(false);
            _formRun.design().controlName(formControlStr(smmContactPerson, VendVendorPortalMaintainUserRoles)).enabled(false);
            _formRun.design().controlName(formControlStr(smmContactPerson, VendVendorPortalUserRequestListPage)).visible(false);
            _formRun.design().controlName(formControlStr(smmContactPerson, VendVendorPortalUserRequestListPage)).enabled(false);
        }
        else
        {
            boolean activeUser = dirPersonUser::findParty(_contactPerson.Party).isActiveVendorPortalUser();
            boolean pendingVendorPortalUserRequest = VendVendorPortalUserRequest::existsPendingRequest(_contactPerson.Party);
            boolean isVendor = DirPartyTableHelper::isvendor(_contactPerson.ContactForParty);

            _formRun.design().controlName(formControlStr(smmContactPerson, VendVendorPortalProvisionUser)).enabled(isVendor && !activeUser && !pendingVendorPortalUserRequest);
            _formRun.design().controlName(formControlStr(smmContactPerson, VendVendorPortalInactivateUser)).enabled(isVendor && activeUser && !pendingVendorPortalUserRequest);
            _formRun.design().controlName(formControlStr(smmContactPerson, VendVendorPortalMaintainUserRoles)).enabled(isVendor && activeUser && !pendingVendorPortalUserRequest);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>disableMicrosoftOutlookSynchronizationControls</Name>
				<Source><![CDATA[
    private static void disableMicrosoftOutlookSynchronizationControls(FormRun _formRun)
    {
        _formRun.design().controlName(formControlStr(smmContactPerson, AddContacts)).visible(!smmOutlookSyncDeprecationHandler::isOutlookSyncDisabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addContactsClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the OnClicked event for the <c>smmContactPerson.ApplicationSuiteExtension</c> form extension's
    /// Add contacts button.
    /// </summary>
    /// <param name="sender">The Add contacts form control</param>
    /// <param name="_e">The args for the event.</param>
    [FormControlEventHandler(formControlStr(smmContactPerson, AddContacts), FormControlEventType::Clicked)]
    public static void addContactsClicked(FormControl _sender, FormControlEventArgs _e)
    {
        FormDataSource contactPerson_ds = _sender.formRun().dataSource(formDataSourceStr(smmContactPerson, ContactPerson)) as FormDataSource;

        smmContactPersonSynchronize::selectContactsFromDataSource(contactPerson_ds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>closing</Name>
				<Source><![CDATA[
    [FormEventHandler(formStr(smmContactPerson), FormEventType::Closing)]
    public static void closing(xFormRun _sender, FormEventArgs _e)
    {
        if (_sender.args())
        {
            ContactPerson   contactPerson   = _sender.dataSource(formDataSourceStr(smmContactPerson, ContactPerson)).cursor() as ContactPerson;
            Common          callerRecord    = _sender.args().record();

            if (contactPerson.RecId && (callerRecord.TableId == tableNum(smmOpportunityTable) || callerRecord.TableId == tableNum(smmLeadTable)))
            {
                FormDataSource formDataSource = _sender.args().caller().dataSource(tableStr(DirOrgPersonRelations));
                if (formDataSource)
                {
                    formDataSource.executeQuery();
                    formDataSource.refresh();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writingContactPersonDataSource</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(smmContactPerson, ContactPerson), FormDataSourceEventType::Writing)]
    public static void writingContactPersonDataSource(FormDataSource _sender, FormDataSourceEventArgs e)
    {
        var     formRun = _sender.formRun() as FormRun;
        var     extensionInstance = formRun.getExtensionInstance(classStr(smmContactPersonFormApplicationSuiteEventHandlers)) as smmContactPersonFormApplicationSuiteEventHandlers;

        extensionInstance.verifyOrgPersonRelationCreation(formRun, _sender.cursor());
    }

]]></Source>
			</Method>
			<Method>
				<Name>writtenContactPersonDataSource</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(smmContactPerson, ContactPerson), FormDataSourceEventType::Written)]
    public static void writtenContactPersonDataSource(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        var     formRun = _sender.formRun() as FormRun;
        var     extensionInstance = formRun.getExtensionInstance(classStr(smmContactPersonFormApplicationSuiteEventHandlers)) as smmContactPersonFormApplicationSuiteEventHandlers;

        extensionInstance.createOrgPersonRelation(formRun, _sender.cursor());
    }

]]></Source>
			</Method>
			<Method>
				<Name>verifyOrgPersonRelationCreation</Name>
				<Source><![CDATA[
    private void verifyOrgPersonRelationCreation(FormRun _formRun, ContactPerson _contactPerson)
    {
        createOrgPersonRelationRecord = false;

        if (_contactPerson.isNewRecord())
        {
            if (_formRun.args())
            {
                Common callerRecord = _formRun.args().record();

                if (callerRecord.TableId == tableNum(smmOpportunityTable) || callerRecord.TableId == tableNum(smmLeadTable))
                {
                    if (_formRun.args().openMode() == OpenMode::New)
                    {
                        createOrgPersonRelationRecord = true;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrgPersonRelation</Name>
				<Source><![CDATA[
    private void createOrgPersonRelation(FormRun _formRun, ContactPerson _contactPerson)
    {
        DirOrgPersonRelations   newContactDirOrgPersonRelations;
        DirPartyRelationship    newContactDirPartyRelationship;

        if (createOrgPersonRelationRecord)
        {
            Common callerRecord = _formRun.args().record();

            select RecId from newContactDirPartyRelationship
                    where newContactDirPartyRelationship.ParentParty == _contactPerson.ContactForParty && newContactDirPartyRelationship.ChildParty == _contactPerson.Party;

            newContactDirOrgPersonRelations.ContactPersonId = _contactPerson.ContactPersonId;
            newContactDirOrgPersonRelations.EntityRefTableId = callerRecord.TableId;
            newContactDirOrgPersonRelations.EntityRefRecId = callerRecord.RecId;
            newContactDirOrgPersonRelations.RelationsRefRecId = newContactDirPartyRelationship.RecId;
            if (newContactDirOrgPersonRelations.validateWrite())
            {
                newContactDirOrgPersonRelations.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryExecutingContactPersonDataSource</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(smmContactPerson, ContactPerson), FormDataSourceEventType::QueryExecuting)]
    public static void queryExecutingContactPersonDataSource(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        var  formRun = _sender.formRun() as formRun;

        QueryBuildRange             orgDirRange;
        QueryBuildRange             contactPersonRange;

        QueryBuildDataSource        contactPersonQueryBuildDataSource;

        contactPersonQueryBuildDataSource   = _sender.query().dataSourceTable(tableNum(ContactPerson));

        orgDirRange             = SysQuery::findOrCreateRange(contactPersonQueryBuildDataSource, fieldNum(ContactPerson, ContactForParty));
        contactPersonRange      = SysQuery::findOrCreateRange(contactPersonQueryBuildDataSource, fieldNum(ContactPerson, ContactPersonId));

        switch (formRun.args().dataset())
        {
            case tableNum(smmBusRelTable):
                var smmBusRelTable = formRun.args().record() as smmBusRelTable;
                orgDirRange.value(queryValue(smmBusRelTable.Party));
                break;

            case tableNum(smmTMCallListTable):
                var smmTMCallListTable = formRun.args().record() as smmTMCallListTable;
                contactPersonRange.value(queryValue(smmTMCallListTable.ContactPersonId));
                break;

            case tableNum(smmLeadTable):
                var smmLeadTable = formRun.args().record() as smmLeadTable;
                orgDirRange.value(queryValue(smmLeadTable.Party));
                break;

            case tableNum(smmOpportunityTable):
                var smmOpportunityTable = formRun.args().record() as smmOpportunityTable;
                orgDirRange.value(queryValue(smmOpportunityTable.Party));
                break;

            case tableNum(smmQuotationCompetitorGroup):
                var smmQuotationTable = formRun.args().record() as smmQuotationCompetitorGroup;
                orgDirRange.value(queryValue(smmQuotationTable.Party));
                break;

            case tableNum(smmActivities) :
                smmActivityParentLink::updateQuery(_sender.query().dataSourceTable(tableNum(ContactPerson)), formRun.args().record());
                break;

            case tableNum(PurchRFQCaseTable) :
                var PurchRFQVendLinkQueryBuildDataSource = _sender.query().dataSourceTable(tableNum(PurchRFQVendLink));
                PurchRFQVendLinkQueryBuildDataSource.clearDynalinks();
                PurchRFQVendLinkQueryBuildDataSource.addDynalink(fieldNum(PurchRFQVendLink, rfqCaseId), formRun.args().record(), fieldNum(PurchRFQCaseTable, rfqCaseId));
                break;
       }

        // Display merged customers when coming from a form (e.g.: customer service).
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter))
                && formRun.args().caller())
        {
            CustTable custTable;

            if (formRun.args().dataset() == tableNum(custTable))
            {
                custTable = formRun.args().record();
            }
            else if (formRun.args().dataset() == tableNum(salesTable))
            {
                var salesTable = formRun.args().record() as SalesTable;
                custTable = CustTable::find(salesTable.CustAccount);
            }

            if (custTable)
            {
                str                         mergedPartyQueryValue = '';
                boolean                     mergedCustomersExist = false;
                CustTable                   custTableSearch;

                mergedPartyQueryValue = queryValue(custTable.Party);

                while select Party from custTableSearch where custTableSearch.MCRMergedRoot == custTable.AccountNum
                {
                    mergedPartyQueryValue += strfmt(',%1',queryValue(custTableSearch.Party));
                    mergedCustomersExist = true;
                }

                if (mergedCustomersExist)
                {
                    // Remove the link and set the range to be the current customer and any customers that were
                    // merged into the current customer.
                    contactPersonQueryBuildDataSource.clearDynalinks();
                    contactPersonQueryBuildDataSource.clearRange(fieldNum(ContactPerson, ContactForParty));
                    contactPersonQueryBuildDataSource.addRange(fieldNum(ContactPerson, ContactForParty)).value(mergedPartyQueryValue);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializedContactPersonDataSource</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(smmContactPerson, ContactPerson), FormDataSourceEventType::Initialized)]
    public static void initializedContactPersonDataSource(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        var  formRun = _sender.formRun() as formRun;

        Query                   query;
        QueryBuildRange         qbRange;
        QueryBuildDataSource    qbds;
        QueryBuildDataSource    qbdsVendTable;
        QueryBuildDataSource    qbdsCustTable;
        CustTable               custTable;
        VendTable               vendTable;

        switch (formRun.args().dataset())
        {
            case tableNum(CustTable) :
                // Is this a Go To Main Table call?
                if (formRun.args().parmEnum() == NoYes::Yes)
                {
                    custTable       = formRun.args().record();
                    query           = new Query();
                    qbds            = query.addDataSource(tableNum(ContactPerson));
                    qbdsCustTable   = qbds.addDataSource(tableNum(CustTable));
                    qbdsCustTable.addRange(fieldNum(CustTable, AccountNum)).value(custTable.AccountNum);
                    qbds.addRange(fieldNum(ContactPerson, ContactPersonId)).value(custTable.ContactPersonId);
                    _sender.query(query);
                }
                break;

            case tableNum(VendTable) :
                // Is this a Go To Main Table call?
                if (formRun.args().parmEnum() == NoYes::Yes)
                {
                    vendTable       = formRun.args().record();
                    query           = new Query();
                    qbds            = query.addDataSource(tableNum(ContactPerson));
                    qbdsVendTable   = qbds.addDataSource(tableNum(VendTable));
                    qbdsVendTable.addRange(fieldNum(VendTable, AccountNum)).value(vendTable.AccountNum);
                    qbds.addRange(fieldNum(ContactPerson, ContactPersonId)).value(vendTable.ContactPersonId);
                    _sender.query(query);
                }
                break;

            case tableNum(PurchRFQCaseTable) :
                qbds = _sender.query().dataSourceTable(tableNum(VendTable)).addDataSource(tableNum(PurchRFQVendLink));
                qbds.joinMode(JoinMode::ExistsJoin);
                qbds.addLink(fieldNum(VendTable, AccountNum), fieldNum(PurchRFQVendLink, VendAccount));
                break;

            case tableNum(SalesQuotationTable) :
                SalesQuotationTable salesQuotationTable = formRun.args().record();
                qbds            = _sender.query().dataSourceTable(tableNum(ContactPerson));
                qbds.clearDynalinks();
                qbRange = qbds.addRange(fieldNum(ContactPerson, ContactForParty));
                qbRange.status(RangeStatus::Locked);
                qbRange.value(queryValue(salesQuotationTable.party()));
                break;

            case tableNum(salesTable) :
                SalesTable salesTable = formRun.args().record();
                qbds            = _sender.query().dataSourceTable(tableNum(ContactPerson));
                qbds.clearDynalinks();
                qbRange = qbds.addRange(fieldNum(ContactPerson, ContactForParty));
                qbRange.status(RangeStatus::Locked);
                qbRange.value(queryValue(salesTable.custTable_CustAccount().Party));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrievePartyFromCaller</Name>
				<Source><![CDATA[
    [SubscribesTo(formStr(smmContactPerson), delegateStr(smmContactPerson, onRetrievingPartyFromCaller))]
    public static void retrievePartyFromCaller(Common _callerRecord, EventHandlerResult _ret)
    {
        switch (_callerRecord.TableId)
        {
            case tableNum(VendDirPartyTableView) :
                _ret.result(DirPartyTable::findRec(_callerRecord.RecId));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateContactPersonDependentControls</Name>
				<Source><![CDATA[
    [SubscribesTo(formStr(smmContactPerson), delegateStr(smmContactPerson, onUpdateContactPersonDependentControls))]
    public static void updateContactPersonDependentControls(FormRun _formRun, ContactPerson _contactPerson)
    {
        boolean         inActive = _contactPerson.Inactive;
        FormDataSource  formDataSource;

        formDataSource = _formRun.dataSource(formDataSourceStr(smmContactPerson, HcmPersonSkillMapping)) as FormDataSource;
        formDataSource.allowEdit(!inActive);

        formDataSource = _formRun.dataSource(formDataSourceStr(smmContactPerson, HcmPersonPrivateDetails)) as FormDataSource;
        formDataSource.allowEdit(!inActive);
    }

]]></Source>
			</Method>
			<Method>
				<Name>personChanged</Name>
				<Source><![CDATA[
    [SubscribesTo(formStr(smmContactPerson), delegateStr(smmContactPerson, onPersonChanged))]
    public static void personChanged(FormRun _formRun, DirPerson _dirPerson)
    {
        FormDataSource  formDataSource;
        Common          dataSourceCursor;

        HcmPersonPrivateDetails personPrivateDetails;
        HcmPersonSkillMapping   personSkillMapping;

        personPrivateDetails = HcmPersonPrivateDetails::findByPerson(_dirPerson.RecId);
        personSkillMapping  = HcmPersonSkillMapping::findByPerson(_dirPerson.RecId);

        if (personPrivateDetails.RecId)
        {
            formDataSource = _formRun.dataSource(formDataSourceStr(smmContactPerson, HcmPersonPrivateDetails)) as FormDataSource;
            dataSourceCursor = formDataSource.cursor();

            dataSourceCursor.data(personPrivateDetails);
            dataSourceCursor.selectForUpdate(true);
            formDataSource.setCurrent();
        }
        else
        {
            formDataSource = _formRun.dataSource(formDataSourceStr(smmContactPerson, HcmPersonPrivateDetails)) as FormDataSource;
            personPrivateDetails = formDataSource.cursor() as HcmPersonPrivateDetails;

            personPrivateDetails.Person = _dirperson.RecId;
        }

        if (personSkillMapping.RecId)
        {
            formDataSource = _formRun.dataSource(formDataSourceStr(smmContactPerson, HcmPersonSkillMapping)) as FormDataSource;
            dataSourceCursor = formDataSource.cursor();

            dataSourceCursor.data(personSkillMapping);
            dataSourceCursor.selectForUpdate(true);
            formDataSource.setCurrent();
            formDataSource.rereadReferenceDataSources();
        }
        else
        {
            formDataSource = _formRun.dataSource(formDataSourceStr(smmContactPerson, HcmPersonPrivateDetails)) as FormDataSource;
            personSkillMapping = formDataSource.cursor() as HcmPersonSkillMapping;

            personSkillMapping.Person = _dirperson.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializedHcmPersonPrivateDetailsDataSource</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(smmContactPerson, HcmPersonPrivateDetails), FormDataSourceEventType::Initialized)]
    public static void initializedHcmPersonPrivateDetailsDataSource(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        // When possible, then this event handler should be subscribing to the Initializaing event

        if (!isConfigurationkeyEnabled(new DictTable(tableNum(HcmPersonPrivateDetails)).configurationKeyId()))
        {
            _sender.linkType(FormLinkType::Passive);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatingWriteHcmPersonPrivateDetailsDataSource</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(smmContactPerson, HcmPersonPrivateDetails), FormDataSourceEventType::ValidatingWrite)]
    public static void validatingWriteHcmPersonPrivateDetailsDataSource(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        var formRun = _sender.formRun();
        var dirPersonDatasource = formRun.dataSource(formDataSourceStr(smmContactPerson, DirPerson)) as FormDataSource;

        if (!dirPersonDatasource.cursor().RecId)
        {
            dirPersonDatasource.write();
        }

        var hcmPersonPrivateDetails = _sender.cursor() as HcmPersonPrivateDetails;
        hcmPersonPrivateDetails.Person = dirPersonDatasource.cursor().RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializedHcmPersonSkillMappingDataSource</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(smmContactPerson, HcmPersonSkillMapping), FormDataSourceEventType::Initialized)]
    public static void initializedHcmPersonSkillMappingDataSource(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        // When possible, then this event handler should be subscribing to the Initializaing event

        if (!isConfigurationkeyEnabled(new DictTable(tableNum(HcmPersonSkillMapping)).configurationKeyId()))
        {
            _sender.linkType(FormLinkType::Passive);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatingWriteHcmPersonSkillMappingDataSource</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(smmContactPerson, HcmPersonSkillMapping), FormDataSourceEventType::ValidatingWrite)]
    public static void validatingWriteHcmPersonSkillMappingDataSource(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        var formRun = _sender.formRun();
        var dirPersonDatasource = formRun.dataSource(formDataSourceStr(smmContactPerson, DirPerson)) as FormDataSource;

        if (!dirPersonDatasource.cursor().RecId)
        {
            dirPersonDatasource.write();
        }

        var hcmPersonSkillMapping = _sender.cursor() as HcmPersonSkillMapping;
        hcmPersonSkillMapping.Person = dirPersonDatasource.cursor().RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>