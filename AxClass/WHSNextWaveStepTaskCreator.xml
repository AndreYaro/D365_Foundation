<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSNextWaveStepTaskCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSNextWaveStepTaskCreator</c> is responsible for creating the batch task to run the next wave steps in sequence.
/// </summary>
public class WHSNextWaveStepTaskCreator
{
    protected WHSWaveId               waveId;
    protected WHSWaveExecutionID      waveExecutionId;
    protected WHSReleaseToWarehouseId releaseToWarehouseId;
    protected WHSWaveStepRefRecId     currentRunningWaveStepRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a batch job to run waves steps after the currently run wave steps.
    /// </summary>
    /// <returns>
    /// The RefRecId of the batch header that will be running the next wave steps.
    /// </returns>
    public RefRecId createTask()
    {
        ttsbegin;        
        //We may be in a situation where the wave was updated on a different AOS so we must read it inside tts due the the WHSWaveTable cache setting.
        var curWaveTable = WHSWaveTable::find(waveId);
        var waveExecute = WHSWaveExecute::newInstance(curWaveTable);
        waveExecute.parmReleaseToWarehouseId(releaseToWarehouseId);
        waveExecute.parmWaveExecutionId(waveExecutionId);
        waveExecute.parmLastRunWaveStepRefRecId(currentRunningWaveStepRecId);

        var batchHeader = BatchHeader::construct();
        batchHeader.parmCaption(this.generateBatchCaption(currentRunningWaveStepRecId));
        batchHeader.addTask(waveExecute);
        batchHeader.save();

        WHSWaveTableBatch::createSingleWaveBatchRelationship(curWaveTable.RecId, batchHeader.parmBatchHeaderId());
        ttscommit;
        WHSPostEngineBase::immediatelyStartNextBatchTaskForWave();

        return batchHeader.parmBatchHeaderId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateBatchCaption</Name>
				<Source><![CDATA[
    private BatchCaption generateBatchCaption(WHSWaveStepRefRecId _currentRunningWaveStepRecId)
    {
        WHSWaveTemplateLine waveTemplateLine = WHSWaveTemplateLine::findByRecId(_currentRunningWaveStepRecId);
        WHSPostMethodName nextPostMethodName = waveTemplateLine.getNextWaveStepName();

        BatchCaption batchCaption;
        if (nextPostMethodName)
        {
            batchCaption = strFmt(
                "@SYS76785",
                strFmt("@WAX:WaveProcessingBatchJobDescriptionPreviousWaveStep", waveId, waveTemplateLine.PostMethodName),
                strFmt("@WAX:WaveProcessingBatchJobDescriptionStartWaveStep", nextPostMethodName));
        }
        else
        {
            batchCaption = strFmt(
                "@SYS76785",
                strFmt("@WAX:WaveProcessingBatchJobDescriptionPreviousWaveStep", waveId, waveTemplateLine.PostMethodName),
                "@WAX:WaveProcessingBatchJobDescriptionLastWaveStep");
        }
        return batchCaption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentRunningWaveStep</Name>
				<Source><![CDATA[
    private WHSWaveStepRefRecId parmCurrentRunningWaveStep(WHSWaveStepRefRecId _currentRunningWaveStep = currentRunningWaveStepRecId)
    {
        currentRunningWaveStepRecId = _currentRunningWaveStep;

        return currentRunningWaveStepRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReleaseToWarehouseId</Name>
				<Source><![CDATA[
    private WHSReleaseToWarehouseId parmReleaseToWarehouseId(WHSReleaseToWarehouseId _releaseToWarehouseId = releaseToWarehouseId)
    {
        releaseToWarehouseId = _releaseToWarehouseId;

        return releaseToWarehouseId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveExecutionId</Name>
				<Source><![CDATA[
    private WHSWaveExecutionID parmWaveExecutionId(WHSWaveExecutionID _waveExecutionId = waveExecutionId)
    {
        waveExecutionId = _waveExecutionId;

        return waveExecutionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveId</Name>
				<Source><![CDATA[
    private WHSWaveId parmWaveId(WHSWaveId _waveId = waveId)
    {
        waveId = _waveId;

        return waveId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSNextWaveStepTaskCreator construct()
    {
        return new WHSNextWaveStepTaskCreator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    public static WHSNextWaveStepTaskCreator newStandard(
        WHSWaveId               _waveId,
        WHSWaveExecutionId      _waveExecutionId,
        WHSWaveStepRefRecId     _currentRunningWaveStepRecId,
        WHSReleaseToWarehouseId _releaseToWarehouseId)
    {
        WHSNextWaveStepTaskCreator whsNextWaveStepTaskCreator = WHSNextWaveStepTaskCreator::construct();
        whsNextWaveStepTaskCreator.waveId = _waveId;
        whsNextWaveStepTaskCreator.waveExecutionId = _waveExecutionId;
        whsNextWaveStepTaskCreator.currentRunningWaveStepRecId = _currentRunningWaveStepRecId;
        whsNextWaveStepTaskCreator.releaseToWarehouseId = _releaseToWarehouseId;

        return whsNextWaveStepTaskCreator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>