<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25RegCalc_DebtCreditInventoryMult</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class RTax25RegCalc_DebtCreditInventoryMult extends RTax25RegCalc_DebtInventoryMultiply implements BatchRetryable
{
    AmountMST   badDeptRemainVatAmountTotal,
                badDeptClosedVatAmountTotal,
                badDeptClosedAmountTotal,
                badDeptRemainTotal;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertRegisterFooter</Name>
				<Source><![CDATA[
    protected void insertRegisterFooter()
    {
        regQuery.addFooterRecord(0,
                                ['',
                                dateNull(),
                                dateNull(),
                                abs(badDeptRemainTotal),
                                badDeptRemainVatAmountTotal,
                                badDeptClosedAmountTotal,
                                badDeptClosedVatAmountTotal,
                                0],
                                0, '', startCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCustVendTrans</Name>
				<Source><![CDATA[
    protected void processCustVendTrans(CustVendTrans _custVendTrans)
    {
        CustVendCalcSettledAmounts_RU   custVendCalcSettledAmounts;
        Map                             mapTransAmounts, mapMapSettledAmounts, mapSettledAmounts;
        MapIterator                     it, it2;
        BookStructSmallVATAmounts_RU    transAmounts   = new BookStructSmallVATAmounts_RU(),
                                        settledAmounts = new BookStructSmallVATAmounts_RU();
        DueDate                         dueDate;
        DocumentNum                     sourceDocument;
        RefTableId                      refTableId;
        RefRecId                        refRecId;
        TransDate                       settlementDate;
        AmountMST                       badDeptRemainVatAmount,
                                        badDeptClosedVatAmount,
                                        badDeptClosedAmount,
                                        badDeptRemain;
        ;

        dueDate = CustVendTrans::getDueDate_RU(_custVendTrans);

        if (dueDate >= dateTo)
            return;

        custVendCalcSettledAmounts = CustVendCalcSettledAmounts_RU::construct(_custVendTrans);
        custVendCalcSettledAmounts.calcSettledAmounts();
        mapTransAmounts      = custVendCalcSettledAmounts.mapTransAmountsMST();
        mapMapSettledAmounts = custVendCalcSettledAmounts.mapMapSettledAmountsMST();

        it = new MapIterator(mapTransAmounts);

        while (it.more())
        {
            transAmounts.addAmounts2(BookStructSmallVATAmounts_RU::create(it.value()));
            it.next();
        }

        badDeptRemain          = -transAmounts.amountInclVAT();
        badDeptRemainVatAmount = -transAmounts.taxAmountVAT();

        it = new MapIterator(mapMapSettledAmounts);

        while (it.more())
        {
            settlementDate = conpeek(it.key(), 1);

            if (settlementDate < dateTo + 1)
            {
                mapSettledAmounts = it.value();

                it2 = new MapIterator(mapSettledAmounts);

                while (it2.more())
                {
                    settledAmounts.addAmounts2(BookStructSmallVATAmounts_RU::create(it2.value()));
                    it2.next();
                }
            }
            it.next();
        }

        badDeptClosedAmount    = -settledAmounts.amountInclVAT();
        badDeptClosedVatAmount = -settledAmounts.taxAmountVAT();

        if (badDeptRemain == badDeptClosedAmount)
            return;

        [sourceDocument, refTableId, refRecId] = this.sourceDocument(_custVendTrans);

        regQuery.addBodyRecord(0,
                               [
                                sourceDocument,
                                _custVendTrans.TransDate,
                                dueDate,
                                badDeptRemain,
                                badDeptRemainVatAmount,
                                badDeptClosedAmount,
                                badDeptClosedVatAmount,
                                0],
                                refTableId,
                                refRecId,
                                strfmt('%1-"%2","%3"', _custVendTrans.TableId == tablenum(CustTrans) ? "@SYS11779" : "@SYS8079",
                                       _custVendTrans.AccountNum,
                                       _custVendTrans.Voucher),
                                0);

        progress.incCount();
        startCount++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totals</Name>
				<Source><![CDATA[
    protected void totals(RTax25RegisterTransMap _trans)
    {
        RTax25RegisterTrans_DebtCreditInventory trans = _trans;
        badDeptClosedAmountTotal    += trans.ClosedAmount;
        badDeptRemainTotal          += trans.Debt;
        badDeptRemainVatAmountTotal += trans.DebtVATAmount;
        badDeptClosedVatAmountTotal += trans.ClosedVATAmount;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>