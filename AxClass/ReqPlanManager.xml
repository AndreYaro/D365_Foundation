<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqPlanManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReqPlanManager</c> class performs advanced management of master plans.
/// </summary>
public class ReqPlanManager implements System.IDisposable
{
    Map nestingLevelMap;
    boolean disposed;

    ReqReaderWriterLock readerWriterLock;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>acquireReaderLockOnPlanVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Acquires the reader lock on the specified master plan version.
    /// </summary>
    /// <param name="_planVersion">
    ///     The plan version to lock.
    /// </param>
    /// <remarks>
    ///     The method supports nested invocations.
    /// </remarks>
    public void acquireReaderLockOnPlanVersion(ReqPlanVersion _planVersion)
    {
        str lockName = ReqPlanManager::formatLockName(_planVersion);

        this.onAcquiringLockOnPlanVersion(_planVersion, ReqAppLockMode::Shared);
        readerWriterLock.enterReaderLock(lockName);
        this.onAcquiredLockOnPlanVersion(_planVersion, ReqAppLockMode::Shared);

        this.increaseNestingLevel(lockName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquireUpdateLockOnActivePlanVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Acquires the update lock on the active master plan version.
    /// </summary>
    /// <param name="_planId">
    ///     The master plan ID.
    /// </param>
    /// <returns>
    ///     The master plan version which has been locked.
    /// </returns>
    /// <remarks>
    ///     If the version which has been locked is inactive, the method will retry until the active version is locked.
    ///     The method supports nested invocations.
    /// </remarks>
    public ReqPlanVersion acquireUpdateLockOnActivePlanVersion(ReqPlanId _planId)
    {
        ReqPlan plan = ReqPlan::findReqPlanId(_planId);
        ReqPlanVersion planVersion;

        do
        {
            planVersion = plan.getActiveVersion();
            this.acquireUpdateLockOnPlanVersion(planVersion);

            planVersion = ReqPlanVersion::findWithCacheDisabled(planVersion.RecId);

            if (!planVersion.Active)
            {
                this.releaseLockOnPlanVersion(planVersion);
            }
        } while (!planVersion.Active);

        return planVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquireUpdateLockOnActiveVersionInCmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Acquires the update lock on the active master plan version in the specified company.
    /// </summary>
    /// <param name="_company">
    ///     The company ID.
    /// </param>
    /// <param name="_planId">
    ///     The master plan ID.
    /// </param>
    /// <returns>
    ///     The master plan version which has been locked.
    /// </returns>
    /// <remarks>
    ///     If the version which has been locked is inactive, the method will retry until the active version is locked.
    ///     The method supports nested invocations.
    /// </remarks>
    public ReqPlanVersion acquireUpdateLockOnActiveVersionInCmp(dataAreaId _company, ReqPlanId _planId)
    {
        changeCompany (_company)
        {
            return this.acquireUpdateLockOnActivePlanVersion(_planId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureStillHasUpdateLockOnPlanVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if an update lock is still acquired and if not tries to re-acquire the lock.
    /// Should be only called if update lock has been already acquired on a given plan version by the instance.
    /// </summary>
    /// <param name="_planVersion">
    /// The plan version to use.
    /// </param>
    /// <remarks>
    /// Throws if no lock on the given plan version have been previously acquired or re-acquiring failed.
    /// Does not check the type of lock that was previously acquired, so will pass if the instance has reader or
    /// exclusive lock with this name without changing type of the lock.
    /// </remarks>
    internal void ensureStillHasUpdateLockOnPlanVersion(ReqPlanVersion _planVersion)
    {
        str lockName = ReqPlanManager::formatLockName(_planVersion);

        readerWriterLock.ensureStillHasUpdateLock(lockName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquireUpdateLockOnPlanVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Acquires the update lock on the specified master plan version.
    /// </summary>
    /// <param name="_planVersion">
    ///     The plan version to lock.
    /// </param>
    /// <remarks>
    ///     The method supports nested invocations.
    /// </remarks>
    public void acquireUpdateLockOnPlanVersion(ReqPlanVersion _planVersion)
    {
        str lockName = ReqPlanManager::formatLockName(_planVersion);

        this.onAcquiringLockOnPlanVersion(_planVersion, ReqAppLockMode::Update);
        readerWriterLock.enterUpdateLock(lockName);
        this.onAcquiredLockOnPlanVersion(_planVersion, ReqAppLockMode::Update);

        this.increaseNestingLevel(lockName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquireWriterLockOnPlanVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Acquires writer lock on the specified master plan version.
    /// </summary>
    /// <param name="_planVersion">
    ///     The plan version to lock.
    /// </param>
    /// <remarks>
    ///     The method supports nested invocations.
    /// </remarks>
    public void acquireWriterLockOnPlanVersion(ReqPlanVersion _planVersion)
    {
        str lockName = ReqPlanManager::formatLockName(_planVersion);

        this.onAcquiringLockOnPlanVersion(_planVersion, ReqAppLockMode::Exclusive);
        readerWriterLock.enterWriterLock(lockName);
        this.onAcquiredLockOnPlanVersion(_planVersion, ReqAppLockMode::Exclusive);

        this.increaseNestingLevel(lockName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>decreaseNestingLevel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Decreases the nesting level.
    /// </summary>
    /// <param name="_lockName">
    ///    The lock name.
    /// </param>
    /// <returns>
    ///    The current nesting level.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    Occurs when current nesting level is zero and the attempt is made to decrease it again.
    /// </exception>
    private int decreaseNestingLevel(str _lockName)
    {
        int currentLevel;

        if (!nestingLevelMap.exists(_lockName))
        {
            throw error(strFmt("@SYS342111", _lockName));
        }

        currentLevel = nestingLevelMap.lookup(_lockName);
        --currentLevel;

        if (currentLevel)
        {
            nestingLevelMap.insert(_lockName, currentLevel);
        }
        else
        {
            nestingLevelMap.remove(_lockName);
        }

        return currentLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>increaseNestingLevel</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Increases the nesting level.
    /// </summary>
    /// <param name="_lockName">
    ///     The lock name.
    /// </param>
    private void increaseNestingLevel(str _lockName)
    {
        int currentLevel = 0;

        if (nestingLevelMap.exists(_lockName))
        {
            currentLevel = nestingLevelMap.lookup(_lockName);
        }

        nestingLevelMap.insert(_lockName, currentLevel + 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        nestingLevelMap = new Map(Types::String, Types::Integer);

        readerWriterLock = ReqReaderWriterLock::construct();

        if (ReqMRPReaderWriterLockOwnerTrackingToggle::instance().isEnabled())
        {
            readerWriterLock.enableLockOwnerTracking();
        }

        if (ReqMRPReaderWriterLockRetryAcquiringLockToggle::instance().isEnabled())
        {
            readerWriterLock.enableRetryOnAcquiringLock();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onAcquiredLockOnPlanVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Occurs immediately after the specified master plan version has been locked.
    /// </summary>
    /// <param name="_reqPlanVersion">
    ///     The master plan version.
    /// </param>
    /// <param name="_lockMode">
    ///     The lock mode.
    /// </param>
    delegate void onAcquiredLockOnPlanVersion(ReqPlanVersion _reqPlanVersion, ReqAppLockMode _lockMode)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onAcquiringLockOnPlanVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Occurs just before the specified master plan version is being locked.
    /// </summary>
    /// <param name="_reqPlanVersion">
    ///     The master plan version.
    /// </param>
    /// <param name="_lockMode">
    ///     The lock mode.
    /// </param>
    delegate void onAcquiringLockOnPlanVersion(ReqPlanVersion _reqPlanVersion, ReqAppLockMode _lockMode)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onReleasedLockOnPlanVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Occurs immediately after the specified master plan version has been unlocked.
    /// </summary>
    /// <param name="_reqPlanVersion">
    ///     The master plan version.
    /// </param>
    delegate void onReleasedLockOnPlanVersion(ReqPlanVersion _reqPlanVersion)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onReleasingLockOnPlanVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Occurs just before the specified master plan version is being unlocked.
    /// </summary>
    /// <param name="_reqPlanVersion">
    ///     The master plan version.
    /// </param>
    delegate void onReleasingLockOnPlanVersion(ReqPlanVersion _reqPlanVersion)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReaderWriterLock</Name>
				<Source><![CDATA[
    public ReqReaderWriterLock parmReaderWriterLock(ReqReaderWriterLock _readerWriterLock = readerWriterLock)
    {
        readerWriterLock = _readerWriterLock;

        return readerWriterLock;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseLockOnPlanVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Releases the previously acquired lock on the master plan version.
    /// </summary>
    /// <param name="_planVersion">
    ///     The master plan version to unlock.
    /// </param>
    /// <remarks>
    ///     The method supports nested invocations.
    /// </remarks>
    public void releaseLockOnPlanVersion(ReqPlanVersion _planVersion)
    {
        str lockName = ReqPlanManager::formatLockName(_planVersion);

        if (this.decreaseNestingLevel(lockName) == 0)
        {
            readerWriterLock.exit(lockName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqPlanManager construct()
    {
        return new ReqPlanManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatLockName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Formats the name of the lock to be acquired.
    /// </summary>
    /// <param name="_planVersion">
    ///    The master plan version.
    /// </param>
    /// <returns>
    ///     The formatted string representing the resource to be locked.
    /// </returns>
    public static str formatLockName(ReqPlanVersion _planVersion)
    {
        return strFmt('%1:%2:%3:%4', tableStr(ReqPlanVersion), _planVersion.ReqPlanDataAreaId, _planVersion.ReqPlanId, _planVersion.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDefaultDynamicReqPlanLocked</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the default dynamic master plan is locked.
    /// </summary>
    /// <returns>
    ///     true if the default dynamic master plan is locked; otherwise, false.
    /// </returns>
    public static boolean isDefaultDynamicReqPlanLocked()
    {
        return ReqPlanManager::isLocked(ReqPlanSched::defaultDynamicId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLocked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the specified master plan is locked.
    /// </summary>
    /// <param name="_reqPlanId">
    ///    Specifies the ID of the master plan.
    /// </param>
    /// <returns>
    ///    True if the master plan is locked; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Throws an error if the plan has no active version.
    /// </remarks>
    public static boolean isLocked(ReqPlanId _reqPlanId)
    {
        ReqPlanVersion activeVersion = ReqPlan::findReqPlanId(_reqPlanId).getActiveVersion();

        str lockName = ReqPlanManager::formatLockName(activeVersion);
        return !ReqReaderWriterLock::testUpdate(lockName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLockedNoThrow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the specified master plan is locked.
    ///    If the plan has no active version, it cannot be locked.
    /// </summary>
    /// <param name="_reqPlanId">
    ///    Specifies the ID of the master plan.
    /// </param>
    /// <returns>
    ///    True if the master plan is locked; otherwise, false.
    ///    Returns false if the master plan has no active version.
    /// </returns>
    public static boolean isLockedNoThrow(ReqPlanId _reqPlanId)
    {
        ReqPlan plan =  ReqPlan::findReqPlanId(_reqPlanId);
        ReqPlanVersion activeVersion = plan.findActiveVersion();

        if (activeVersion.RecId == 0)
        {
            return false;
        }

        str lockName = ReqPlanManager::formatLockName(activeVersion);
        return !ReqReaderWriterLock::testUpdate(lockName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPlanVersionLocked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the specified plan version is locked.
    /// </summary>
    /// <param name="_planVersion">
    ///    The plan version.
    /// </param>
    /// <returns>
    ///    true if the plan version is locked; otherwise, false.
    /// </returns>
    public static boolean isPlanVersionLocked(ReqPlanVersion _planVersion)
    {
        str lockName = ReqPlanManager::formatLockName(_planVersion);
        return !ReqReaderWriterLock::testWriter(lockName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disposes the current instance of an object.
    /// </summary>
    public void dispose()
    {
        if (readerWriterLock)
        {
            readerWriterLock.dispose();
        }
        disposed = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>disposed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if the current instance of an object is disposed.
    /// </summary>
    /// <returns>True if the instance of an object is disposed; otherwise, false.</returns>
    public boolean disposed()
    {
        return disposed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowSkipTTS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether it is allowed to skip the logging to <c>InventSumLogTTS</c>.
    /// </summary>
    /// <returns>
    /// true if it is allowed to skip the logging to <c>InventSumLogTTS</c>; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method should not be called from within master planning as the logic depends on having locked or not the active dynamic plan.
    /// </remarks>
    public static boolean allowSkipTTS()
    {
        return !ReqPlanManager::isDefaultDynamicReqPlanLocked();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>