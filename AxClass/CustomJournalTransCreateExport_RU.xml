<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomJournalTransCreateExport_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustomJournalTransCreateExport_RU extends CustomJournalTransCreate_RU
{
    SalesLine           salesLine;
    InventTrans         inventTrans;

    InventTransId       inventTransId;
    InvoiceId           invoiceId;
    PackingSlipId       packingSlipId;
    SalesId             salesId;
    DimensionDefault    dimension;
    UnitOfMeasureSymbol unitID;
    boolean             isGoodsInRoute;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAmountCur</Name>
				<Source><![CDATA[
        void calcAmountCur(CustomJournalTrans_RU _customJournalTrans)
    {
        Qty                 salesPurchQty;
        UnitOfMeasureSymbol unitIdInvent = InventTableModule::find(_customJournalTrans.ItemId, ModuleInventPurchSales::Invent).UnitId;

        if (inventTrans)
        {
            salesLine = SalesLine::findInventTransId(inventTransId);
        }

        if (salesLine)
        {
            salesPurchQty = InventTable::unitConvertValue(_customJournalTrans.ItemId,
                                                          _customJournalTrans.UnitId,
                                                          salesLine.SalesUnit,
                                                          unitIdInvent,
                                                          _customJournalTrans.Qty,
                                                          _customJournalTrans.InventDimId);

            _customJournalTrans.AmountCur    = salesLine.calcLineAmount(salesPurchQty);
            _customJournalTrans.CurrencyCode = salesLine.CurrencyCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>customJournalTransUpdate</Name>
				<Source><![CDATA[
        CustomJournalTrans_RU customJournalTransUpdate()
    {
        CustomJournalTrans_RU   customJournalTrans;

        if (salesLine)
        {
            select firstonly forupdate customJournalTrans
                where customJournalTrans.CustomJournalId            == customJournalTable.CustomJournalId   &&
                      customJournalTrans.ItemId                     == salesLine.ItemId                     &&
                      customJournalTrans.SalesPurchInventTransId    == salesLine.InventTransId              &&
                      customJournalTrans.SalesPurchId               == salesLine.SalesId                    &&
                      customJournalTrans.InventDimId                == salesLine.InventDimId                &&
                      customJournalTrans.DefaultDimension           == salesLine.DefaultDimension;
        }
        else if (inventTrans)
        {
            select firstonly forupdate customJournalTrans
                where customJournalTrans.CustomJournalId            == customJournalTable.CustomJournalId  &&
                      customJournalTrans.ItemId                     == inventTrans.ItemId                  &&
                      customJournalTrans.InventDimId                == inventTrans.InventDimId             &&
                      customJournalTrans.StatusIssue                == inventTrans.StatusIssue             &&
                      customJournalTrans.StatusReceipt              == inventTrans.StatusReceipt           &&
                      customJournalTrans.SalesPurchInventTransId    == inventTransId                       &&
                      customJournalTrans.SalesPurchId               == salesId                             &&
                      customJournalTrans.DefaultDimension           == dimension                           &&
                    ((isGoodsInRoute   && customJournalTrans.InvoiceId     == invoiceId)                   ||
                     (! isGoodsInRoute && customJournalTrans.PackingSlipId == packingSlipId));
        }

        return customJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTransId</Name>
				<Source><![CDATA[
        protected InventTransId getInventTransId()
    {
        return inventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventStatusList</Name>
				<Source><![CDATA[
        protected void initInventStatusList(CustomJournalTable_RU _customJournalTable = customJournalTable)
    {
        super();

        inventStatusIssueCon += SysQuery::value(StatusIssue::Deducted);

        if (_customJournalTable.InvoicePostingType == SalesInvoicePostingType_RU::GoodsInRoute)
        {
            inventStatusIssueCon += SysQuery::value(StatusIssue::Sold);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSource</Name>
				<Source><![CDATA[
        protected void initSource()
    {
        CustPackingSlipTrans    custPackingSlipTrans;
        CustInvoiceTrans        custInvoiceTrans;

        switch (tmpFrmVirtualLine.TableNum)
        {
            case tablenum(SalesLine):
                salesLine               = SalesLine::findRecId(tmpFrmVirtualLine.RecordNo);
                inventTransId           = salesLine.InventTransId;
                inventTrans             = null;
                unitID                  = InventTableModule::find(salesLine.ItemId, ModuleInventPurchSales::Invent).UnitId;
                break;

            case tablenum(InventTrans):
                salesLine               = null;
                inventTrans             = InventTrans::findRecId(tmpFrmVirtualLine.RecordNo, true);

                if (inventTrans.InventTransOriginSales_RU)
                {
                    inventTransId       = InventTransOrigin::find(inventTrans.InventTransOriginSales_RU).InventTransId;
                    custInvoiceTrans    = CustInvoiceTrans::findInventTransid(inventTransId);
                    invoiceId           = custInvoiceTrans.InvoiceId;
                    packingSlipId       = '';
                    salesId             = custInvoiceTrans.SalesId;
                    dimension           = custInvoiceTrans.DefaultDimension;
                    unitID              = InventTableModule::find(custInvoiceTrans.ItemId, ModuleInventPurchSales::Invent).UnitId;
                    isGoodsInRoute      = true;
                }
                else
                {
                    inventTransId           = InventTransOrigin::find(inventTrans.InventTransOrigin).InventTransId;
                    custPackingSlipTrans    = CustPackingSlipTrans::findInventTransId_RU(inventTransId);
                    packingSlipId           = custPackingSlipTrans.PackingSlipId;
                    invoiceId               = '';
                    salesId                 = custPackingSlipTrans.SalesId;
                    dimension               = custPackingSlipTrans.DefaultDimension;
                    unitID                  = InventTableModule::find(custPackingSlipTrans.ItemId, ModuleInventPurchSales::Invent).UnitId;
                    isGoodsInRoute          = false;
                }
                break;

            default:
                salesLine       = null;
                inventTrans     = null;
                inventTransId   = '';
                invoiceId       = '';
                packingSlipId   = '';
                salesId         = '';
                dimension       = 0;
                unitID          = '';
                isGoodsInRoute  = false;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransFromSource</Name>
				<Source><![CDATA[
        void initTransFromSource(CustomJournalTrans_RU _customJournalTrans)
    {
        super(_customJournalTrans);

        if (salesLine)
        {
            _customJournalTrans.ItemId                  = salesLine.ItemId;
            _customJournalTrans.SalesPurchInventTransId = salesLine.InventTransId;
            _customJournalTrans.SalesPurchId            = salesLine.SalesId;
            _customJournalTrans.InventDimId             = salesLine.InventDimId;
            _customJournalTrans.DefaultDimension        = salesLine.DefaultDimension;
            _customJournalTrans.UnitId                  = unitID;
        }
        else if (inventTrans)
        {
            _customJournalTrans.ItemId                  = inventTrans.ItemId;
            _customJournalTrans.InventDimId             = inventTrans.InventDimId;
            _customJournalTrans.StatusIssue             = inventTrans.StatusIssue;
            _customJournalTrans.StatusReceipt           = inventTrans.StatusReceipt;
            _customJournalTrans.SalesPurchInventTransId = inventTransId;
            _customJournalTrans.InvoiceId               = invoiceId;
            _customJournalTrans.PackingSlipId           = packingSlipId;
            _customJournalTrans.SalesPurchId            = salesId;
            _customJournalTrans.DefaultDimension        = dimension;
            _customJournalTrans.UnitId                  = unitID;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransUpdate</Name>
				<Source><![CDATA[
        protected void inventTransUpdate()
    {
        real sign;

        if (inventTrans)
        {
            ttsBegin;
            inventTrans = inventTrans::findRecId(inventTrans.RecId, true);
            sign = sign(inventTrans.Qty);
            if (tmpFrmVirtualLine.Qty < abs(inventTrans.Qty))
            {
                inventTrans.updateSplit(sign * tmpFrmVirtualLine.Qty, sign * tmpFrmVirtualLine.PdsCWQty);
            }

            inventTrans.GroupRefType_RU = isGoodsInRoute                                ?
                                          InventTransGroupRefType_RU::CustomJournalGIT  :
                                          InventTransGroupRefType_RU::CustomJournalStd;

            inventTrans.GroupRefId_RU   = customJournalTable.CustomJournalId;
            inventTrans.update();

            inventTrans.updateSumUp();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>