<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LogisticsPostalAddress_RU_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Extension class of table <c>LogisticsPostalAddress</c>
/// </summary>
[ExtensionOf(TableStr(LogisticsPostalAddress))]
internal final class LogisticsPostalAddress_RU_Extension
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formatAddressInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extension for format address instance method.
    /// </summary>
    public client server void formatAddressInstance()
    {
        str city = this.City;

        next formatAddressInstance();

        boolean isRU = LogisticsPostalAddressUtility::isCountryRegionRU(this.CountryRegionId);
        if(!LogisticsPostalAddress::isSimplifiedCustomerAddressFunctionalityEnabled() && !isRU)
        {
            return;
        }

        if (this.IsSimplifiedAddress_RU)
        {
            this.City = city;

            var addressStringBuilderParameters = new LogisticsPostalAddressStringBuilderParameters();

            if (LogisticsPostalAddressMap::isLogisticsPostalAddress(this.TableId))
            {
                addressStringBuilderParameters.initFromLogisticsPostalAddress(this as LogisticsPostalAddress);
            }
            else
            {
                addressStringBuilderParameters.initFromLogisticsPostalAddressMap(this);
            }

            this.Address = LogisticsPostalAddressStringBuilder::buildAddressStringFromParameters(addressStringBuilderParameters);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>isSimplifiedCustomerAddressFunctionalityEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines whether the simplified customer addresses functionality is enabled or not.
    /// </summary>
    /// <returns>True, if the functionality enabled, otherwise false.</returns>
    public static boolean isSimplifiedCustomerAddressFunctionalityEnabled()
    {
        #ISOCountryRegionCodes

        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDetailedSettlementCityLocalityFromCityTable</Name>
				<Source><![CDATA[
    private void getDetailedSettlementCityLocalityFromCityTable(RecId _cityTableRecId)
    {
        if (LogisticsPostalAddressUtility::isCountryRegionRU(this.CountryRegionId)
            && _cityTableRecId)
        {
            LogisticsAddressCity cityTable = LogisticsAddressCity::find_RU(_cityTableRecId);
            switch (cityTable.AddressLevel_RU)
            {
                case LogisticsCityAddressLevel_RU::Settlement:
                    this.SettlementRecId = cityTable.RecId;
                    this.CityRecId = cityTable.CityRecId;
                    break;

                case LogisticsCityAddressLevel_RU::City:
                    this.SettlementRecId = cityTable.SettlementRecId;
                    this.CityRecId = cityTable.RecId;
                    break;

                case LogisticsCityAddressLevel_RU::Locality:
                    this.SettlementRecId = cityTable.SettlementRecId;
                    this.CityRecId = cityTable.CityRecId;
                    this.LocalityRecId = cityTable.RecId;
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldZipCode</Name>
				<Source><![CDATA[
    public void modifiedFieldZipCode()
    {
        next modifiedFieldZipCode();

        this.getDetailedSettlementCityLocalityFromCityTable(this.CityRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromZipCodeView_RU</Name>
				<Source><![CDATA[
    public void initFromZipCodeView_RU(LogisticsAddressZIP_RU _zipView)
    {
        next initFromZipCodeView_RU(_zipView);

        this.getDetailedSettlementCityLocalityFromCityTable(this.CityRecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>