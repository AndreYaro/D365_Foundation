<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AgreementListPageInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class    AgreementListPageInteraction
       extends  SysListPageInteractionBase

{
    AgreementHeader agreementHeader;

    boolean canReleaseFromCurrentAgreement;
    boolean canDeleteCurrentAgreement;
    boolean confirmationExistsForCurrentAgreement;
    boolean areReleasesExistForCurrentAgreement;
    boolean areInvoicesExistForCurrentAgreement;
    boolean canViewRelatedAgreement;
    boolean canCreateIntercompanyAgreement;
    #ISOCountryRegionCodes
    boolean canCreateIntracompanyAgreement_RU;
    boolean canViewRelatedAgreement_RU;
    boolean canViewSettled_RU;
    boolean canViewNotSettled_RU;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currentAgreementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the current super-type record of the data source of the sales agreement or purchase
    ///    agreement list page form
    /// </summary>
    /// <returns>
    ///    The super-type record of the data source of the current agreement list page form.
    /// </returns>
    protected abstract AgreementHeader currentAgreementHeader()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStateOfCurrentAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Queries existing records associated with the current <c>AgreementHeader</c> record and populates
    ///    internal flags that indicate the current state of the agreement-like releases, such as whether
    ///    invoices exist for the current agreement or whether the current agreement can be deleted.
    /// </summary>
    /// <remarks>
    ///    This method issues a single call to the server method to perform all the necessary queries.
    /// </remarks>
    protected void getStateOfCurrentAgreement()
    {
        container relatedObjectsExistanceFlags;

        if (agreementHeader.RecId)
        {
            // Getting information about existing objects in a single call...
            relatedObjectsExistanceFlags = agreementHeader.relatedObjectExistanceFlags();

            // Unpacking info
            areReleasesExistForCurrentAgreement    = conpeek(relatedObjectsExistanceFlags, AgreementHeader::posReleasesExist());
            confirmationExistsForCurrentAgreement  = conpeek(relatedObjectsExistanceFlags, AgreementHeader::posConfirmationsExist());
            areInvoicesExistForCurrentAgreement    = conpeek(relatedObjectsExistanceFlags, AgreementHeader::posInvoicesExist());
            canViewRelatedAgreement                = conpeek(relatedObjectsExistanceFlags, AgreementHeader::posCanViewRelatedAgreement());
            canCreateIntercompanyAgreement         = conpeek(relatedObjectsExistanceFlags, AgreementHeader::posCanCreateIntercompanyAgreement());
            canDeleteCurrentAgreement              = conpeek(relatedObjectsExistanceFlags, AgreementHeader::posCanDeleteAgreement());
            // <GEERU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                canCreateIntracompanyAgreement_RU  = conpeek(relatedObjectsExistanceFlags, AgreementHeader::posCanCreateIntracompanyAgreement_RU());
                canViewRelatedAgreement_RU         = conpeek(relatedObjectsExistanceFlags, AgreementHeader::posCanViewRelatedAgreement_RU());
                canViewSettled_RU                  = conpeek(relatedObjectsExistanceFlags, AgreementHeader::posCanViewSettled_RU());
                canViewNotSettled_RU               = conpeek(relatedObjectsExistanceFlags, AgreementHeader::posCanViewNotSettled_RU());
            }
            // </GEERU>
        }
        else
        {
            canReleaseFromCurrentAgreement         = false;
            areReleasesExistForCurrentAgreement    = false;
            canDeleteCurrentAgreement              = false;
            confirmationExistsForCurrentAgreement  = false;
            areInvoicesExistForCurrentAgreement    = false;
            canViewRelatedAgreement                = false;
            canCreateIntercompanyAgreement         = false;
            // <GEERU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                canCreateIntracompanyAgreement_RU  = false;
                canViewRelatedAgreement_RU         = false;
                canViewSettled_RU                  = false;
                canViewNotSettled_RU               = false;
            }
            // </GEERU>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the selection changed and enables the action pane buttons.
    /// </summary>
    public void selectionChanged()
    {
        agreementHeader = this.currentAgreementHeader();

        // Gather intell about current Agreement...
        this.getStateOfCurrentAgreement();
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>