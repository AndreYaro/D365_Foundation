<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendCalcVolumeAccount</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustVendCalcVolumeAccount extends CustVendCalcVolume
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accumCustInvoice</Name>
				<Source><![CDATA[
    void accumCustInvoice(CustInvoiceJour _custInvoiceJour)
    {
        ttsbegin;

        select firstonly forupdate tmpCustVendVolume
        index hint TypeAccountNumIdx
        where tmpCustVendVolume.SalesPurch == SalesPurch::Sales &&
              tmpCustVendVolume.AccountNum == _custInvoiceJour.InvoiceAccount;

        this.custWriteRecord(_custInvoiceJour);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accumProjInvoice</Name>
				<Source><![CDATA[
    void accumProjInvoice(ProjInvoiceJour _projInvoiceJour)
    {
        ttsbegin;

        select firstonly forupdate tmpCustVendVolume
        index hint TypeAccountNumIdx
        where tmpCustVendVolume.SalesPurch == SalesPurch::Sales &&
              tmpCustVendVolume.AccountNum == _projInvoiceJour.InvoiceAccount;

        this.projWriteRecord(_projInvoiceJour);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accumVendInvoice</Name>
				<Source><![CDATA[
    void accumVendInvoice(VendInvoiceJour _vendInvoiceJour)
    {
        ttsbegin;

        select firstonly forupdate tmpCustVendVolume
        index hint TypeAccountNumIdx
        where tmpCustVendVolume.SalesPurch == SalesPurch::Purch &&
              tmpCustVendVolume.AccountNum == _vendInvoiceJour.InvoiceAccount;

        this.vendWriteRecord(_vendInvoiceJour);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceQuery</Name>
				<Source><![CDATA[
    void custInvoiceQuery(str _invoiceDate,
                          str _countryRegionType,
                          str _countryRegionId,
                          str _account,

                          str _vatNum,
                          List _billingClassification = null,
                          NoYes _inclTransWithNoBillingClass = NoYes::No)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            super(_invoiceDate, _countryRegionType, _countryRegionId, _account, _vatNum,
                                                                _billingClassification,
                                                                _inclTransWithNoBillingClass);
        }
        else
        {
            super(_invoiceDate, _countryRegionType, _countryRegionId, _account, _vatNum);
        }

        qCustVendVolume.query().dataSourceTable(tableNum(CustInvoiceJour)).addSortField(fieldNum(CustInvoiceJour,InvoiceAccount),SortOrder::Ascending);
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    Name name()
    {
        return tmpCustVendVolume.SalesPurch == SalesPurch::Sales ?
                                               CustTable::find(tmpCustVendVolume.AccountNum).Name() :
                                               VendTable::find(tmpCustVendVolume.AccountNum).Name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceQuery</Name>
				<Source><![CDATA[
    void projInvoiceQuery(str _invoiceDate,
                          str _countryRegionType,
                          str _countryRegionId,
                          str _account,
                          str _VATNum)
    {
        super(_invoiceDate, _countryRegionType, _countryRegionId, _account, _VATNum);

        qCustVendVolume.query().dataSourceTable(tablenum(ProjInvoiceJour)).addSortField(fieldnum(ProjInvoiceJour,InvoiceAccount),SortOrder::Ascending);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceQueryV2</Name>
				<Source><![CDATA[
    public void projInvoiceQueryV2(str _invoiceDate,
                          str _countryRegionType,
                          str _countryRegionId,
                          str _account,
                          str _VATNum,
                          boolean _skipCustInvoiceWithSameLedgerVoucher = true)
    {
        this.projInvoiceQuery(_invoiceDate, _countryRegionType, _countryRegionId, _account, _VATNum);

        if (_skipCustInvoiceWithSameLedgerVoucher)
        {
            QueryBuildDataSource projInvoiceJourDS = qCustVendVolume.query().dataSourceTable(tablenum(ProjInvoiceJour));
            QueryBuildDataSource custInvoiceJourDS = projInvoiceJourDS.addDataSource(tableNum(CustInvoiceJour));
            custInvoiceJourDS.joinMode(JoinMode::NoExistsJoin);
            custInvoiceJourDS.addLink(fieldNum(ProjInvoiceJour, OrderAccount), fieldNum(CustInvoiceJour, OrderAccount));
            custInvoiceJourDS.addLink(fieldNum(ProjInvoiceJour, LedgerVoucher), fieldNum(CustInvoiceJour, LedgerVoucher));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceQuery</Name>
				<Source><![CDATA[
    void vendInvoiceQuery(str _invoiceDate,
                          str _countryRegionType,
                          str _countryRegionId,
                          str _account,
                          str _VATNum)
    {
        super(_invoiceDate, _countryRegionType, _countryRegionId, _account, _VATNum);

        qCustVendVolume.query().dataSourceTable(tablenum(VendInvoiceJour)).addSortField(fieldnum(VendInvoiceJour,InvoiceAccount),SortOrder::Ascending);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>