<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkCreateCrossDock</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkCreateCrossDock</c> class creates warehouse work for cross docking opportunities.
/// </summary>
abstract public class WHSWorkCreateCrossDock extends WhsWorkCreate
{
    WHSWorkCreateId         workCreateId;
    WHSCrossDockOpportunity crossDockOpportunity;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmWorkCreateId</Name>
				<Source><![CDATA[
    public WHSWorkCreateId parmWorkCreateId(WHSWorkCreateId _workCreateId = workCreateId)
    {
        workCreateId = _workCreateId;

        return workCreateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOpportunitiesForCrossDock</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates work for all <c>WHSCrossDockOpportunity</c> records for a specific cross dock ID.
    /// </summary>
    /// <param name = "_crossDockId">
    /// The <c>WHSCrossDockId</c> to find all matching records.
    /// </param>
    /// <returns>
    /// A container with a <c>WHSWorkBuildId</c> if work was created successfully and how much total quantity work was created for.
    /// </returns>
    public static container processOpportunitiesForCrossDock(WHSCrossDockId _crossDockId)
    {
        WHSCrossDockOpportunity crossDockOpportunity;
        WHSWorkCreateId         workCreateId = NumberSeq::newGetNum(WHSParameters::numRefWHSWorkCreateId()).num();
        WHSWorkBuildId          workBuildId;
        InventQty				totalCreatedWorkQty;

        while select crossDockOpportunity
            where crossDockOpportunity.CrossDockId == _crossDockId
        {
            WHSLoadLine loadLine = WHSLoadLine::findbyRecId(crossDockOpportunity.LoadLine);

            WHSWorkCreateCrossDock createCrossDock  = WHSWorkCreateCrossDock::construct(InventTransOrigin::findByInventTransId(crossDockOpportunity.DemandTransId).ReferenceCategory,
                                                                                        loadLine,
                                                                                        workCreateId);

            createCrossDock.crossDockOpportunity    = crossDockOpportunity;
            createCrossDock.finalPutLocation        = crossDockOpportunity.DemandLocationId;
            createCrossDock.parmWorkCreateId(workCreateId);

            workBuildId			 = createCrossDock.createWork();
            totalCreatedWorkQty += crossDockOpportunity.CrossDockQuantity;
        }

        return [workBuildId, totalCreatedWorkQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSWorkCreateCrossDock construct(
        InventTransType _transType,
        Common          _common,
        WHSWorkCreateId _workCreateId = '')
    {
        WHSWorkCreateCrossDock  workCreateCrossDock;

        switch (_transType)
        {
            case InventTransType::TransferOrderShip:
                workCreateCrossDock = WHSWorkCreateCrossDockTransferOrderShip::construct(_common, _workCreateId);
                break;

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }

        return workCreateCrossDock;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>