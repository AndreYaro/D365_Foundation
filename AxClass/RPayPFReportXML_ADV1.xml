<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayPFReportXML_ADV1</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayPFReportXML_ADV1 extends RPayPFReportXML
{
    #define.ReportTitle("@RUP3077")
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return #ReportTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEmpl</Name>
				<Source><![CDATA[
    protected boolean checkEmpl(RHRMEmplTable   _emplTable,
                                boolean         _displayMessage = true,
                                str 20          _personCategory = '',
                                str 20          _formType       = '')
    {
        boolean ret = true;
        ;

        this.infoEmplPFNumber(_emplTable, _displayMessage);

        ret = this.checkEmplPersonalInfo(_emplTable, _displayMessage, true, false) && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>descriptionTag</Name>
				<Source><![CDATA[
    protected str descriptionTag()
    {
        return 'ВХОДЯЩАЯ_ОПИСЬ';
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPeriodFields</Name>
				<Source><![CDATA[
    protected boolean displayPeriodFields()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>docQty</Name>
				<Source><![CDATA[
    protected int docQty(str 100                _docType,
                         str 20                 _personCategory = '',
                         RPayPFSeniorityType    _seniorityType  = RPayPFSeniorityType::None)
    {
        return (_docType == #DocTypeADV1 ? totalEmplQty : 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDocument</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillDocument()
    {
        RHRMEmplTable   emplTableLocal;
        RHRMEmplTable   emplTableMainLocal;
        ;

        this.fillHeader(#DocTypeADV1, '');

        this.progressInit(this.caption(), SysQuery::countTotal(queryRun), #AviFormLetter);
        progress.updateInterval(0);

        queryRun.reset();
        while (queryRun.next())
        {
            emplTableLocal     = queryRun.get(tablenum(RHRMEmplTable));
            emplTableMainLocal = emplTableLocal.emplTableMain();

            progress.setText(strFmt("@RUP3038", emplTableLocal.EmployeeId, emplTableLocal.Name()));

            selectedEmplSet.add(emplTableLocal.EmployeeId);

            if (! printedEmplSet.in(emplTableLocal.PayMainEmplId) &&
                checkedEmplSet.in(emplTableLocal.PayMainEmplId))
            {
                this.fillLine(emplTableMainLocal);
                printedEmplSet.add(emplTableMainLocal.PayMainEmplId);
            }

            progress.incCount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillLine</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillLine(RHRMEmplTable _emplTable)
    {
        IdentityCardTable_RU        identityCardTable;
        container                   con;
        DirPersonName               dirPersonName;
        RHRMPersonTable             rhrmPersonTable;
        HcmPersonPrivateDetails     hcmPersonPrivateDetails;
        LogisticsPostalAddress      personAddress, logisticsPostalAddressPensionFund;
        ;

        numInPack++;

        dirPersonName = DirPersonName::find(_emplTable.employeeTable().worker().DirPerson().RecId);
        rhrmPersonTable = _emplTable.personTable();
        hcmPersonPrivateDetails = rhrmPersonTable.hcmPersonPrivateDetails();

        xmlLevel_3 = this.appendXMLElement(xmlLevel_2, #DocTypeADV1);

            xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'НомерВпачке',       int2str(numInPack));
            xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'АнкетныеДанные');

                xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'ФИО');

                    xmlLevel_6 = this.appendXMLElement(xmlLevel_5, 'Фамилия',       strupr(dirPersonName.LastName));
                    xmlLevel_6 = this.appendXMLElement(xmlLevel_5, 'Имя',           strupr(dirPersonName.FirstName));
                    xmlLevel_6 = this.appendXMLElement(xmlLevel_5, 'Отчество',      strupr(dirPersonName.MiddleName));

                xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'Пол',           rhrmPersonTable.Gender == RHRMGender::Male ? 'М' : 'Ж');
                xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'ДатаРождения',  date2str(hcmPersonPrivateDetails.BirthDate,123,2,2,2,2,4, DateFlags::FormatAll));

                xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'МестоРождения');

                    xmlLevel_6 = this.appendXMLElement(xmlLevel_5, 'ТипМестаРождения',      strupr(enum2str(rhrmPersonTable.BirthPlaceType)));
                    xmlLevel_6 = this.appendXMLElement(xmlLevel_5, 'ГородРождения',         strupr(rhrmPersonTable.TownBirth));
                    xmlLevel_6 = this.appendXMLElement(xmlLevel_5, 'РайонРождения',         strupr(rhrmPersonTable.CountyBirth));
                    xmlLevel_6 = this.appendXMLElement(xmlLevel_5, 'РегионРождения',        strupr(rhrmPersonTable.StateBirth));

                    if (rhrmPersonTable.BirthPlaceType == RHRMBirthPlaceType::Special ||
                        LogisticsAddressCountryRegion::find(rhrmPersonTable.CountryRegionBirthId).OKSMCode_RU != #OKSMCodeRU)
                    {
                        xmlLevel_6 = this.appendXMLElement(xmlLevel_5, 'СтранаРождения',    strupr(LogisticsAddressCountryRegion::name(rhrmPersonTable.CountryRegionBirthId)));
                    }

                xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'Гражданство',           strupr(rhrmPersonTable.citizenshipCountryRegionId()));

                personAddress = DirParty::primaryPostalAddress(rHRMPersonTable.hcmWorker().Person);

                if (! personAddress.LogisticsPostalAddressMap::isEmptyAdress())
                {
                    xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'АдресРегистрации');
                    this.fillAddress(_emplTable, xmlLevel_5);
                }

                logisticsPostalAddressPensionFund = LogisticsPostalAddress::findByLocation(rhrmPersonTable.PensionFundLocation);

                if (! logisticsPostalAddressPensionFund.LogisticsPostalAddressMap::isEmptyAdress() &&
                    ! this.isAddressesEqual(_emplTable))
                {
                    xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'АдресФактический');
                    this.fillAddress(_emplTable, xmlLevel_5, true);
                }

                xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'Телефон',   rhrmPersonTable.hcmWorker().phone());

            identityCardTable = IdentityCardTable_RU::find(rhrmPersonTable.IdentityCard);
            xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'УдостоверяющийДокумент');

                xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'ТипУдостоверяющего',    strupr(enum2str(IdentityCardTable_RU::find(rhrmPersonTable.IdentityCard).IdentityCardTypePf)));
                xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'Документ');

                    xmlLevel_6 = this.appendXMLElement(xmlLevel_5, 'НаименованиеУдостоверяющего',
                                                       strupr(enum2str(identityCardTable.IdentityCardTypePf)));

                    con = this.parsePassportNumber(_emplTable);
                    xmlLevel_6 = this.appendXMLElement(xmlLevel_5, 'СерияРимскиеЦифры',     conpeek(con, 1));
                    xmlLevel_6 = this.appendXMLElement(xmlLevel_5, 'СерияРусскиеБуквы',     conpeek(con, 2));
                    xmlLevel_6 = this.appendXMLElement(xmlLevel_5, 'НомерУдостоверяющего',  conpeek(con, 3));
                    xmlLevel_6 = this.appendXMLElement(xmlLevel_5, 'ДатаВыдачи',            date2str(rhrmPersonTable.IdentityCardIssueDate,123,2,2,2,2,4, DateFlags::FormatAll));
                    xmlLevel_6 = this.appendXMLElement(xmlLevel_5, 'КемВыдан',              strupr(this.strPrintable(rhrmPersonTable.IdentityCardIssueBy)));

            xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'ДатаЗаполнения',        date2str(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), 123, 2, 2, 2, 2, 4, DateFlags::FormatAll));
    }

]]></Source>
			</Method>
			<Method>
				<Name>formType</Name>
				<Source><![CDATA[
    protected str 20 formType(str 100   _docType,
                              str 20    _personCategory)
    {
        return (_docType == #DocTypeADV1 ? #FormTypeADV1 : '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (! this.checkCompanyInfo() || ! this.checkTaxParameters())
            return;

        this.initEmployeesData();

        if (this.checkEmployeesData())
        {
            if (this.makeDocument())
            {
                this.fillDocument();
                xmlDoc.save(conpeek(this.fileName(), 1));
            }
        }

        if (! printedEmplSet.elements())
        {
            info("@GLS101555");
        }

        this.displayResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return #ReportTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>