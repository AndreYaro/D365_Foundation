<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AxMCRCustTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AxMCRCustTable</c> class is the ax customer table that extends the <c>AxInternalBase</c> class.
/// </summary>
class AxMCRCustTable extends AxInternalBase
{
    MCRCustTable   mcrCustTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>axOrig</Name>
				<Source><![CDATA[
        public AxInternalBase axOrig()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the current record in the <c>MCRCustTable</c> table.
    /// </summary>
    /// <param name="_mcrCustTable">
    /// The <c>MCRCustTable</c> record to set; optional.
    /// </param>
    /// <returns>
    /// A <c>MCRCustTable</c> record.
    /// </returns>
    public Common currentRecord(Common _mcrCustTable = mcrCustTable)
    {
        if (!prmisDefault(_mcrCustTable))
        {
            super(_mcrCustTable);
            mcrCustTable = _mcrCustTable as MCRCustTable;
        }
        else
        {
            super();
        }

        return mcrCustTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emptyRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an empty record for the table, to which the <c>AxBC</c> class relates.
    /// </summary>
    /// <returns>
    ///    An empty record from the table to which the <c>AxBC</c> class relates.
    /// </returns>
    /// <remarks>
    ///    Before inserting new records, the <c>emptyRecord</c> method in the <c>AxInternalBase</c> class must
    ///    be implemented, in order to obtain a cleared record that is used when you create and instance of
    ///    the class.
    /// </remarks>
    protected Common emptyRecord()
    {
        MCRCustTable localMCRCustTable;
        return localMCRCustTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>MCRCustTable</c> buffer.
    /// </summary>
    /// <param name="_mcrCustTable">
    /// The <c>MCRCustTable</c> buffer to be set; optional.
    /// </param>
    /// <returns>
    /// The <c>MCRCustTable</c> buffer associated with this class.
    /// </returns>
    public MCRCustTable mcrCustTable(MCRCustTable _mcrCustTable = mcrCustTable)
    {
        if (!prmisDefault(_mcrCustTable))
        {
            this.setCurrentRecordFromExternal(_mcrCustTable);
        }

        return this.currentRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowOnAccount</Name>
				<Source><![CDATA[
        public MCRAllowOnAccount parmAllowOnAccount(MCRAllowOnAccount _mcrAllowOnAccount = NoYes::No)
    {
        if (!prmisDefault(_mcrAllowOnAccount))
        {
            this.setField(fieldNum(MCRCustTable, AllowOnAccount), _mcrAllowOnAccount);
        }

        return mcrCustTable.AllowOnAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAutoCancel</Name>
				<Source><![CDATA[
        public MCRAutoCancel parmAutoCancel(MCRAutoCancel _mcrAutoCancel = NoYes::No)
    {
        if (!prmisDefault(_mcrAutoCancel))
        {
            this.setField(fieldNum(MCRCustTable, AutoCancel), _mcrAutoCancel);
        }

        return mcrCustTable.AutoCancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckHoldNumberOfDays</Name>
				<Source><![CDATA[
        public MCRCheckHoldNumberOfDays parmCheckHoldNumberOfDays(MCRCheckHoldNumberOfDays _mcrCheckHoldNumberOfDays = 0)
    {
        if (!prmisDefault(_mcrCheckHoldNumberOfDays))
        {
            this.setField(fieldNum(MCRCustTable, CheckHoldNumberOfDays), _mcrCheckHoldNumberOfDays);
        }

        return mcrCustTable.CheckHoldNumberOfDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckHoldThresholdAmt</Name>
				<Source><![CDATA[
        public MCRCheckHoldThresholdAmt parmCheckHoldThresholdAmt(MCRCheckHoldThresholdAmt _mcrCheckHoldThresholdAmt = 0)
    {
        if (!prmisDefault(_mcrCheckHoldThresholdAmt))
        {
            this.setField(fieldNum(MCRCustTable, CheckHoldThresholdAmt), _mcrCheckHoldThresholdAmt);
        }

        return mcrCustTable.CheckHoldThresholdAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustStatus</Name>
				<Source><![CDATA[
        public MCRCustStatus parmCustStatus(MCRCustStatus _mcrCustStatus = MCRCustStatus::Blank)
    {
        if (!prmisDefault(_mcrCustStatus))
        {
            this.setField(fieldNum(MCRCustTable, CustStatus), _mcrCustStatus);
        }

        return mcrCustTable.CustStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEnableItemList</Name>
				<Source><![CDATA[
        public MCREnableItemList parmEnableItemList(MCREnableItemList _mcrEnableItemList = NoYes::No)
    {
        if (!prmisDefault(_mcrEnableItemList))
        {
            this.setField(fieldNum(MCRCustTable, EnableItemList), _mcrEnableItemList);
        }

        return mcrCustTable.EnableItemList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFTCExempt</Name>
				<Source><![CDATA[
        public NoYes parmFTCExempt(NoYes _mcrFTCExempt = NoYes::No)
    {
        if (!prmisDefault(_mcrFTCExempt))
        {
            this.setField(fieldNum(MCRCustTable, ftcExempt), _mcrFTCExempt);
        }

        return mcrCustTable.ftcExempt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInstallmentEligible</Name>
				<Source><![CDATA[
        public MCRInstallmentEligible parmInstallmentEligible(MCRInstallmentEligible _installmentElligible = NoYes::No)
    {
        if (!prmisDefault(_installmentElligible))
        {
            this.setField(fieldNum(MCRCustTable, InstallmentEligible), _installmentElligible);
        }

        return mcrCustTable.InstallmentEligible;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrigSourceId</Name>
				<Source><![CDATA[
        public MCRCustOrigSourceId parmOrigSourceId(MCRCustOrigSourceId _mcrOrigSourceId = '')
    {
        if (!prmisDefault(_mcrOrigSourceId))
        {
            this.setField(fieldNum(MCRCustTable, OrigSourceId), _mcrOrigSourceId);
        }

        return mcrCustTable.OrigSourceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostageGroupID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the postage group ID.
    /// </summary>
    /// <param name="_mcrPostageGroupID">
    /// The <c>MCRPostageGroupID</c> to be set; optional.
    /// </param>
    /// <returns>
    /// The newly set <c>MCRPostageGroupID</c> object.
    /// </returns>
    public str parmPostageGroupID(MCRPostageGroupID _mcrPostageGroupID = '')
    {
        if (!prmisDefault(_mcrPostageGroupID))
        {
            this.setField(fieldNum(MCRCustTable, PostageGroupID), _mcrPostageGroupID);
        }
        return mcrCustTable.PostageGroupID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSOAllocPriority</Name>
				<Source><![CDATA[
        public MCRSOAllocPriority parmSOAllocPriority(
        MCRSOAllocPriority _mcrsoAllocPriority = MCRSOAllocPriority::AllocationPriority1)
    {
        if (!prmisDefault(_mcrsoAllocPriority))
        {
            this.setField(fieldNum(MCRCustTable, soAllocPriority), _mcrsoAllocPriority);
        }

        return mcrCustTable.soAllocPriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceIDLastOrdered</Name>
				<Source><![CDATA[
        public MCRSourceID parmSourceIDLastOrdered(MCRSourceID _mcrSourceIDLastOrdered = '')
    {
        if (!prmisDefault(_mcrSourceIDLastOrdered))
        {
            this.setField(fieldNum(MCRCustTable, SourceIDLastOrdered), _mcrSourceIDLastOrdered);
        }

        return mcrCustTable.SourceIDLastOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceIDLastPromoted</Name>
				<Source><![CDATA[
        public MCRSourceID parmSourceIDLastPromoted(MCRSourceID _mcrSourceIDLastPromoted = '')
    {
        if (!prmisDefault(_mcrSourceIDLastPromoted))
        {
            this.setField(fieldNum(MCRCustTable, SourceIDLastPromoted), _mcrSourceIDLastPromoted);
        }

        return mcrCustTable.SourceIDLastPromoted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllowOnAccount</Name>
				<Source><![CDATA[
        protected void setAllowOnAccount()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(MCRCustTable, AllowOnAccount)))
        {
            return;
        }

        //Default to yes.
        this.parmAllowOnAccount(NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAutoCancel</Name>
				<Source><![CDATA[
        protected void setAutoCancel()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(MCRCustTable, AutoCancel)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCheckHoldNumberOfDays</Name>
				<Source><![CDATA[
        protected void setCheckHoldNumberOfDays()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(MCRCustTable, CheckHoldNumberOfDays)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCheckHoldThresholdAmt</Name>
				<Source><![CDATA[
        protected void setCheckHoldThresholdAmt()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(MCRCustTable, CheckHoldThresholdAmt)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustStatus</Name>
				<Source><![CDATA[
        protected void setCustStatus()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(MCRCustTable, CustStatus)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnableItemList</Name>
				<Source><![CDATA[
        protected void setEnableItemList()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(MCRCustTable, EnableItemList)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFTCExempt</Name>
				<Source><![CDATA[
        protected void setFTCExempt()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(MCRCustTable, ftcExempt)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInstallmentEligible</Name>
				<Source><![CDATA[
        protected void setInstallmentEligible()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(MCRCustTable, InstallmentEligible)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOrigSourceId</Name>
				<Source><![CDATA[
        protected void setOrigSourceId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(MCRCustTable, OrigSourceId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPostageGroupId</Name>
				<Source><![CDATA[
        protected void setPostageGroupId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(MCRCustTable, PostageGroupID)))
            {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSOAllocPriority</Name>
				<Source><![CDATA[
        protected void setSOAllocPriority()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(MCRCustTable, soAllocPriority)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSourceIDLastOrdered</Name>
				<Source><![CDATA[
        protected void setSourceIDLastOrdered()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(MCRCustTable, SourceIDLastOrdered)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSourceIDLastPromoted</Name>
				<Source><![CDATA[
        protected void setSourceIDLastPromoted()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(MCRCustTable, SourceIDLastPromoted)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTableFields</Name>
				<Source><![CDATA[
        protected void setTableFields()
    {
        super();

        useMapPolicy = false;

        this.setAllowOnAccount();
        this.setAutoCancel();
        this.setCheckHoldNumberOfDays();
        this.setCheckHoldThresholdAmt();
        this.setCustStatus();
        this.setFTCExempt();
        this.setInstallmentEligible();
        this.setOrigSourceId();
        this.setPostageGroupId();
        this.setSOAllocPriority();
        this.setSourceIDLastOrdered();
        this.setSourceIDLastPromoted();
        this.setEnableItemList();

        useMapPolicy = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static AxMCRCustTable construct()
    {
        return new AxMCRCustTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMCRCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>AxMCRCustTable</c> class.
    /// </summary>
    /// <param name="_mcrCustTable">
    /// The <c>MCRCustTable</c> record with which to initialize the <c>AxMCRCustTable</c> class.
    /// </param>
    /// <returns>
    /// The newly created <c>AxMCRCustTable</c> object.
    /// </returns>
    public static AxMCRCustTable newMCRCustTable(MCRCustTable _mcrCustTable)
    {
        AxMCRCustTable axMCRCustTable = AxMCRCustTable::construct();

        axMCRCustTable.mcrCustTable(_mcrCustTable);

        return axMCRCustTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>