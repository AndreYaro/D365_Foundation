<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>McrCustPaymHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>McrCustPaymHelper</c> class provides helper methods for payment records in Call Center.
/// </summary>
internal static final class McrCustPaymHelper
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isCallCenterCompleteButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the sales order can be Completed.
    /// </summary>
    /// <param name = "_salesTable">The sales order.</param>
    /// <returns>True if the order completion is allowed; otherwise, false.</returns>
    internal static boolean isCallCenterCompleteButtonEnabled(SalesTable _salesTable)
    {
        if (_salesTable.RecId == 0
            || _salesTable.InterCompanyOrder)
        {
            return false;
        }

        // The channel allows order completion.
        // OR
        // The Commerce payments feature is enabled for the order AND the current user is associated with the Call Center.
        return RetailMCRChannelTable::findChannelBySalesTable(_salesTable).McrEnableOrderCompletion
            || (RetailCommercePaymentsFeatureHelper::commercePaymentsEnabledForOrder(_salesTable, funcName())
                && RetailMCRChannelTable::findForCurrentUser().ChannelType == RetailChannelType::MCRCallCenter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPaymentVoidAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the payment on the sales order can be voided.
    /// </summary>
    /// <param name = "_mcrCustPaymTable">The payment record.</param>
    /// <param name = "_salesTable">The sales order.</param>
    /// <returns>True if the payment can be voided; otherwise, false.</returns>
    internal static boolean isPaymentVoidAllowed(MCRCustPaymTable _mcrCustPaymTable, SalesTable _salesTable)
    {
        // If an authorized payment is voided, then the sales order cannot be invoiced until a new payment is obtained.
        // A new payment can be obtained only when the Complete button is enabled for the user.
        // Also, if an incremental capture amount exists, then do not allow voiding of the payment.
        // This will help the user avoid issues such as refunding the amount for a line that was already invoiced.
        return _mcrCustPaymTable.RecId != 0
            && _salesTable.RecId != 0
            && _mcrCustPaymTable.Status == MCRCustPaymStatus::Authorized
            && McrCustPaymHelper::isCallCenterCompleteButtonEnabled(_salesTable)
            && !CreditCardAuthTrans::existsIncrementalCaptureAmount(_mcrCustPaymTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>askToContinueIfPickedOrPackedLinesButNotInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ask to continue if there picked/packed, but not invoiced sales lines.
    /// </summary>
    /// <param name="salesTable">Associated sales table.</param>
    /// <returns>Continue Yes/No.</returns>
    internal static DialogButton askToContinueIfPickedOrPackedLinesButNotInvoiced(SalesTable salesTable)
    {
        if (salesTable.mcrGetNumPickedOrPackedLines() > 0)
        {
            DialogButton res = Box::yesNo("@SalesExtensionLabels:MCRNotInvoicedLinesWarningText", DialogButton::No);
            return res;
        }

        return DialogButton::Yes;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>