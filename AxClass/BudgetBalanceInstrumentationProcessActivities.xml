<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetBalanceInstrumentationProcessActivities</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Logger utility class utilized by budget balances.
/// </summary>
internal final class BudgetBalanceInstrumentationProcessActivities
{
    private BudgetBalanceInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromLogger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instrumentation activity logger for budget balance process.
    /// </summary>
    /// <param name = "_logger">The <c>BudgetBalanceInstrumentationLogger</c> instance.</param>
    /// <returns>An instrumentation activity logger.</returns>
    internal static BudgetBalanceInstrumentationProcessActivities newFromLogger(BudgetBalanceInstrumentationLogger _logger)
    {
        return new BudgetBalanceInstrumentationProcessActivities(_logger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(BudgetBalanceInstrumentationLogger _logger)
    {
        logger = _logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContextForBalanceProcess</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext getActivityContextForBalanceProcess(BudgetBalanceProcessContract _contract, str _activity)
    {
        SysInstrumentationActivity activity = logger.activity(_activity);
        SysInstrumentationActivityContext activityContext = logger.activityContextWithCustomProperties(activity);
        activityContext.addCustomProperty(identifierStr(LedgerRecId), int642Str(_contract.parmLedgerRecId()));
        activityContext.addCustomProperty(identifierStr(FromDate), date2StrXpp(_contract.parmFromDate()));
        activityContext.addCustomProperty(identifierStr(ToDate), date2StrXpp(_contract.parmToDate()));

        if (_contract.parmWorkItem())
        {
            activityContext.addCustomProperty(identifierStr(ProcessExecutionId), guid2Str(_contract.parmWorkItem().parmExecutionId()));
        }
        else
        {
            activityContext.addCustomProperty(identifierStr(ProcessExecutionId), guid2Str(emptyGuid()));
        }

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContextForBalanceContract</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext getActivityContextForBalanceContract(BudgetBalanceIContract _contract, str _activity)
    {
        SysInstrumentationActivity activity = logger.activity(_activity);
        SysInstrumentationActivityContext activityContext = logger.activityContextWithCustomProperties(activity);
        activityContext.addCustomProperty(identifierStr(LedgerRecId), int642Str(_contract.parmLedgerRecId()));
        activityContext.addCustomProperty(identifierStr(FromDate), date2StrXpp(_contract.parmFromDate()));
        activityContext.addCustomProperty(identifierStr(ToDate), date2StrXpp(_contract.parmToDate()));

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContextForReportingDimensions</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext getActivityContextForReportingDimensions(BudgetBalanceContract _contract, str _activity)
    {
        SysInstrumentationActivity activity = logger.activity(_activity);
        SysInstrumentationActivityContext activityContext = logger.activityContextWithCustomProperties(activity);
        activityContext.addCustomProperty(identifierStr(LedgerRecId), int642Str(_contract.parmLedgerRecId()));
        activityContext.addCustomProperty(identifierStr(FromDate), date2StrXpp(_contract.parmFromDate()));
        activityContext.addCustomProperty(identifierStr(ToDate), date2StrXpp(_contract.parmToDate()));
        activityContext.addCustomProperty(identifierStr(DimensionHierarchyId), int642Str(_contract.parmDimensionHierarchyRecId()));

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logExceptionWillBeRetried</Name>
				<Source><![CDATA[
    internal void logExceptionWillBeRetried(
        str _sourceName,
        str _methodName,
        str _transientExceptionType,
        int _retryCount)
    {
        str logMessage = strFmt("@Budget:ExceptionWillBeRetried", _sourceName, _methodName, _retryCount, _transientExceptionType);
        logger.logWarning(logMessage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logExceptionWillNotBeRetried</Name>
				<Source><![CDATA[
    internal void logExceptionWillNotBeRetried(
        str _sourceName,
        str _methodName,
        str _transientExceptionType,
        int _retryCount)
    {
        str logMessage = strFmt("@Budget:ExceptionWillNotBeRetried", _sourceName, _methodName, _retryCount, _transientExceptionType);
        logger.logError(logMessage);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>