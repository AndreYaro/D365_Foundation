<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerAccountProvider_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// Provides account functionality for the CN country/region.
/// </summary>
[ExportMetadataAttribute("LedgerIAccountProvider_CN", "DefaultProvider"),ExportAttribute("Dynamics.AX.Application.LedgerIAccountProvider_CN")]
public class LedgerAccountProvider_CN implements LedgerIAccountProvider_CN
{
    LedgerAccountCreate_CN      accountCreate;
    LedgerSeparator_CN          separator;
    char                        separatorChar;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLedgerAccount</Name>
				<Source><![CDATA[
    public void createLedgerAccount(recId _chartOfAccounts)
    {
        if (!accountCreate)
        {
            accountCreate = LedgerAccountCreate_CN::construct(_chartOfAccounts);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSeparatorChar</Name>
				<Source><![CDATA[
    public char parmSeparatorChar()
    {
        Debug::assert(accountCreate != null);

        return accountCreate.parmSeparatorChar();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSeparator</Name>
				<Source><![CDATA[
    public LedgerSeparator_CN parmSeparator()
    {
        Debug::assert(accountCreate != null);

        return accountCreate.parmSeparator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAccount</Name>
				<Source><![CDATA[
    public boolean createAccount(MainAccount _mainAccount)
    {
        Debug::assert(accountCreate != null);

        return accountCreate.createAccount(_mainAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSubAccount</Name>
				<Source><![CDATA[
    public boolean createSubAccount(MainAccount _mainAccount, MainAccountNum _parentAccountId)
    {
        Debug::assert(accountCreate != null);

        return accountCreate.createSubAccount(_mainAccount, _parentAccountId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCopy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates source account number and destination account number for copy when <c>LedgerAccountCreate_CN</c> class is constructed.
    /// </summary>
    /// <param name = "_srcAccount">
    /// Source account number
    /// </param>
    /// <param name = "_destAccount">
    /// Destination account number
    /// </param>
    /// <returns>
    /// Flag indicates operation result.
    /// </returns>
    public boolean validateCopy(MainAccountNum _srcAccount, MainAccountNum _destAccount)
    {
        Debug::assert(accountCreate != null);

        return accountCreate.validateCopy(_srcAccount, _destAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates main account copy include its sub main account when <c>LedgerAccountCreate_CN</c> class is constructed.
    /// </summary>
    /// <param name = "_srcAccount">
    /// Source account number
    /// </param>
    /// <param name = "_destAccount">
    /// Destination account number
    /// </param>
    /// <param name = "_lstSrcSub">
    /// List for source sub account
    /// </param>
    /// <returns>
    /// Flag indicate the operation successful or not.
    /// </returns>
    public boolean copyAccount(MainAccountNum  _srcAccount, MainAccountNum  _destAccount, List _lstSrcSub)
    {
        Debug::assert(accountCreate != null);

        return accountCreate.copyAccount(_srcAccount, _destAccount, _lstSrcSub);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>