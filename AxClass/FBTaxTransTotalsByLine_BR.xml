<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBTaxTransTotalsByLine_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Provides a way to query taxes information by document line.
/// </summary>
public class FBTaxTransTotalsByLine_BR
{
    TaxBaseCur          taxBaseAmount;
    TaxAmount           taxAmount;
    TaxAmount           taxAmountOther;
    TaxAmount           taxBaseAmountExempt;
    TaxValue            taxValue;
    TaxationCode_BR     taxationCode;
    TaxFiscalValue_BR   fiscalValue;
    TaxType_BR          taxType;

    List                listOfChildren;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        listOfChildren = new List(Types::Class);
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalValue</Name>
				<Source><![CDATA[
    public TaxFiscalValue_BR parmFiscalValue(TaxFiscalValue_BR _fiscalValue = fiscalValue)
    {
        fiscalValue = _fiscalValue;
        return fiscalValue;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmTaxAmount</Name>
				<Source><![CDATA[
    public TaxAmount parmTaxAmount(TaxAmount _taxAmount = taxAmount)
    {
        taxAmount = _taxAmount;
        return taxAmount;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmTaxAmountOther</Name>
				<Source><![CDATA[
    public TaxAmount parmTaxAmountOther(TaxAmount _taxAmountOther = taxAmountOther)
    {
        taxAmountOther = _taxAmountOther;
        return taxAmountOther;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmTaxationCode</Name>
				<Source><![CDATA[
    public TaxationCode_BR parmTaxationCode(TaxationCode_BR _taxationCode = taxationCode)
    {
        taxationCode = _taxationCode;
        return taxationCode;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmTaxBaseAmount</Name>
				<Source><![CDATA[
    public TaxBaseCur parmTaxBaseAmount(TaxBaseCur _taxBaseAmount = taxBaseAmount)
    {
        taxBaseAmount = _taxBaseAmount;
        return taxBaseAmount;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmTaxBaseAmountExempt</Name>
				<Source><![CDATA[
    public TaxAmount parmTaxBaseAmountExempt(TaxAmount _taxBaseAmountExempt = taxBaseAmountExempt)
    {
        taxBaseAmountExempt = _taxBaseAmountExempt;
        return taxBaseAmountExempt;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmTaxType</Name>
				<Source><![CDATA[
    public TaxType_BR parmTaxType(TaxType_BR _taxType = taxType)
    {
        taxType = _taxType;
        return taxType;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmTaxValue</Name>
				<Source><![CDATA[
    public TaxValue parmTaxValue(taxValue _taxValue = taxValue)
    {
        taxValue = _taxValue;
        return taxValue;
    }
]]></Source>
			</Method>
			<Method>
				<Name>constructEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs an empty instance of the <c>FBTaxTransTotalsByLine_BR</c> class.
    /// </summary>
    /// <returns>
    ///     The instance of <c>FBTaxTransTotalsByLine_BR</c> class.
    /// </returns>
    public static FBTaxTransTotalsByLine_BR constructEmpty()
    {
        FBTaxTransTotalsByLine_BR taxTransTotalsByLine;

        taxTransTotalsByLine = new FBTaxTransTotalsByLine_BR();

        return taxTransTotalsByLine;
    }
]]></Source>
			</Method>
			<Method>
				<Name>constructFromFiscalDocumentTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs an instance of <c>FBTaxTransTotalsByLine_BR</c> for a specific fiscal document tax transaction.
    /// </summary>
    /// <param name="_fiscalDocumentTaxTrans">
    ///     A <c>FiscalDocumentTaxTrans_BR</c> table buffer representing the tax transaction.
    /// </param>
    /// <returns>
    ///     An instance of <c>FBTaxTransTotalsByLine_BR</c>.
    /// </returns>
    public static FBTaxTransTotalsByLine_BR constructFromFiscalDocumentTaxTrans(FiscalDocumentTaxTrans_BR _fiscalDocumentTaxTrans)
    {
        FBTaxTransTotalsByLine_BR taxTransTotalsByLine;

        taxTransTotalsByLine = new FBTaxTransTotalsByLine_BR();

        taxTransTotalsByLine.parmTaxType                (_fiscalDocumentTaxTrans.Type);
        taxTransTotalsByLine.parmTaxationCode           (_fiscalDocumentTaxTrans.TaxationCode);
        taxTransTotalsByLine.parmFiscalValue            (_fiscalDocumentTaxTrans.FiscalValue);
        taxTransTotalsByLine.parmTaxBaseAmount          (_fiscalDocumentTaxTrans.TaxBaseAmount);
        taxTransTotalsByLine.parmTaxBaseAmountExempt    (_fiscalDocumentTaxTrans.TaxBaseAmountExempt);
        taxTransTotalsByLine.parmTaxAmount              (_fiscalDocumentTaxTrans.TaxAmount);
        taxTransTotalsByLine.parmTaxAmountOther         (_fiscalDocumentTaxTrans.TaxAmountOther);

        if (_fiscalDocumentTaxTrans.FiscalValue == TaxFiscalValue_BR::WithCreditDebit)
        {
            taxTransTotalsByLine.parmTaxValue           (_fiscalDocumentTaxTrans.TaxValue - _fiscalDocumentTaxTrans.TaxNonRecoverablePct);
        }
        else
        {
            taxTransTotalsByLine.parmTaxValue           (_fiscalDocumentTaxTrans.TaxValue);
        }

        return taxTransTotalsByLine;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>