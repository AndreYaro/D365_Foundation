<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJourSummaryRoundingAdjustEntryBondExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SubledgerJourDetRoundAdjustEntryBond</c> class is responsible for adding rounding adjustment entries to the
/// subledger journal when Russian correspondence is active.
/// </summary>
/// <remarks>
/// This class perform penny difference recogizing to maintain correspondence.
/// </remarks>
[SourceDocumentExtension()]
public class SubledgerJourSummaryRoundingAdjustEntryBondExt extends SubledgerJourSummaryRoundingAdjustEntryExtension
{
    #ISOCountryRegionCodes

    SubledgerJournalAccountEntryTmpSummary tmpSummary;
    SourceDocument sourceDocument;

    LedgerBondBatchTransNum_RU  bondBatchTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAccCurrencyAmountsToSubledgerJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for insertion of rounding adjustment entry for amount in accounting currency.
    /// </summary>
    /// <param name="_tmpSummaryToAdjust">
    /// The <c>SubledgerJournalAccountEntryTmpSummary</c> entry to adjust rounding.
    /// </param>
    /// <param name="_roundingAdjustmentAccountingCurrencyAmount">
    /// The rounding adjustment accounting currency amount.
    /// </param>
    /// <param name="_roundingAdjustmentEntry">
    /// The rounding adjustment entry for amount in accounting currency.
    /// </param>
    public void addAccCurrencyAmountsToSubledgerJournal(
        SubledgerJournalAccountEntryTmpSummary _tmpSummaryToAdjust,
        AmountMST _roundingAdjustmentAccountingCurrencyAmount,
        SubledgerJournalAccountEntryTmpSummary _roundingAdjustmentEntry)
    {
        this.addRoundingAdjEntryToSubledgerJournal(_roundingAdjustmentEntry);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRoundingAdjEntryToSubledgerJournal</Name>
				<Source><![CDATA[
    private void addRoundingAdjEntryToSubledgerJournal(SubledgerJournalAccountEntryTmpSummary _roundingAdjustmentEntry)
    {
        SubledgerJourPennyDiffRecognizer pennyDifferenceRecognizer = SubledgerJourPennyDiffRecognizer::construct();

        if (_roundingAdjustmentEntry.AccountingCurrencyAmount || _roundingAdjustmentEntry.ReportingCurrencyAmount)
        {
            bondBatchTrans++;

            _roundingAdjustmentEntry.BondBatchTrans_RU = bondBatchTrans;

            _roundingAdjustmentEntry.update();

            pennyDifferenceRecognizer.recognizePennyDifference(sourceDocument, tmpSummary);

            update_recordSet tmpSummary
            setting BondBatchTrans_RU = bondBatchTrans,
                    TransactionCurrencyCode = _roundingAdjustmentEntry.TransactionCurrencyCode
            where tmpSummary.BondBatchTrans_RU == 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRptCurrencyAmountsToSubledgerJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for insertion of rounding adjustment entry for amount in reporting currency.
    /// </summary>
    /// <param name="_tmpSummaryToAdjust">
    /// The <c>SubledgerJournalAccountEntryTmpSummary</c> entry to adjust rounding.
    /// </param>
    /// <param name="_roundingAdjustmentReportingCurrencyAmount">
    /// The rounding adjustment reporting currency amount.
    /// </param>
    /// <param name="_roundingAdjustmentEntry">
    /// The rounding adjustment entry for amount in reporting currency.
    /// </param>
    public void addRptCurrencyAmountsToSubledgerJournal(
        SubledgerJournalAccountEntryTmpSummary _tmpSummaryToAdjust,
        AmountMSTSecondary _roundingAdjustmentReportingCurrencyAmount,
        SubledgerJournalAccountEntryTmpSummary _roundingAdjustmentEntry)
    {
        this.addRoundingAdjEntryToSubledgerJournal(_roundingAdjustmentEntry);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether to subscribe the journalizer event.
    /// </summary>
    /// <returns>
    /// True if we can subscribe the journalizer event; otherwise, false.
    /// </returns>
    protected boolean canSubscribe()
    {
        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
            && LedgerParameters::find().Correspondence_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialized</Name>
				<Source><![CDATA[
    public void initialized(SubledgerJournalAccountEntryTmpSummary _tmpSummary, SourceDocument _sourceDocument)
    {
        sourceDocument = _sourceDocument;

        tmpSummary.linkPhysicalTableInstance(_tmpSummary);

        select maxOf(BondBatchTrans_RU) from tmpSummary;

        bondBatchTrans = tmpSummary.BondBatchTrans_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDetailRoundingAdjustEntry</Name>
				<Source><![CDATA[
    public SubledgerJourSummaryRoundingAdjustEntry parmDetailRoundingAdjustEntry(SubledgerJourSummaryRoundingAdjustEntry _summaryRoundingAdjustEntry = summaryRoundingAdjustEntry)
    {
        summaryRoundingAdjustEntry = _summaryRoundingAdjustEntry;

        return summaryRoundingAdjustEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the subledger journalizer extension events.
    /// </summary>
    protected void subscribe()
    {
        summaryRoundingAdjustEntry.initialized                               += eventhandler(this.initialized);
        summaryRoundingAdjustEntry.addedAcctCurrencyAmountsToSubledgerJournal   += eventhandler(this.addAccCurrencyAmountsToSubledgerJournal);
        summaryRoundingAdjustEntry.addedRptCurrencyAmountsToSubledgerJournal    += eventhandler(this.addRptCurrencyAmountsToSubledgerJournal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SubledgerJourSummaryRoundingAdjustEntryBondExt construct()
    {
        return new SubledgerJourSummaryRoundingAdjustEntryBondExt();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>