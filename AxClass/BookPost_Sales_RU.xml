<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BookPost_Sales_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BookPost_Sales_RU extends RunBaseBatch implements BatchRetryable
{
    SalesBookVATProcessLogTable_RU        logTable;
    TmpSalesBookVATProcessLogTrans_RU     tmpProcessLogTrans;
    TmpSalesBookVATProcessLogTransOper_RU tmpProcessLogTransOper;
    SalesBookVATProcessCancelType_RU      processMode;
    SalesBookVATProcessLogTrans_RU        processLogTrans;
    LedgerVoucher                         ledgerVoucher, ledgerVoucherCorrect;
    CurrencyCode                          currencyCode;
    DialogField                           transDateCtrl;
    TransDate                             transDate;
    RecordSortedList                      processLogTransList;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
         processMode, transDate
    #ENDMACRO

    #MacroLib.AviFiles
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancelBlockedTrans</Name>
				<Source><![CDATA[
    protected void cancelBlockedTrans(RefRecId _recId)
    {
        SalesBookVATProcessLogTransOper_RU   processLogTransOper, reverseProcessLogTransOper;
        ;

        while select forupdate processLogTransOper
            where processLogTransOper.RefRecId          == _recId     &&
                  processLogTransOper.Blocked           == NoYes::Yes &&
                  processLogTransOper.CanceledRefRecId  == 0
        {
            reverseProcessLogTransOper.clear();
            reverseProcessLogTransOper.data(processLogTransOper);
            reverseProcessLogTransOper.AmountLiableToVAT = - processLogTransOper.AmountLiableToVAT;
            reverseProcessLogTransOper.TaxAmount         = - processLogTransOper.TaxAmount;
            reverseProcessLogTransOper.TransDate         = transDate;
            reverseProcessLogTransOper.CanceledRefRecId  = processLogTransOper.RecId;
            reverseProcessLogTransOper.LogTableRefRecId  = processLogTransOper.LogTableRefRecId;
            reverseProcessLogTransOper.Correct           = NoYes::Yes;
            reverseProcessLogTransOper.insert();

            processLogTransOper.CanceledRefRecId        = reverseProcessLogTransOper.RecId;
            processLogTransOper.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    #localmacro.operationKey
        tmpProcessLogTransOper.RefRecId,
        tmpProcessLogTransOper.LogTableRefRecId,
        tmpProcessLogTransOper.TaxCode,
        tmpProcessLogTransOper.DefaultDimension,
        tmpProcessLogTransOper.InventTransId,
        tmpProcessLogTransOper.RestoringType
    #endmacro
    protected boolean check()
    {
        boolean     ret = true;
        BookStructSmallVATAmounts_RU    selectedAmounts, settledAmounts, usedAmounts;
        Map                             map = new Map(Types::Container, Types::Class);
        MapEnumerator                   mapEnumerator;
        RefRecId                        refRecId,logTableRefRecId;
        InventTransId                   inventTransId;
        TaxCode                         taxCode;
        DimensionDefault                defaultDimension;
        SalesBookVATRestoringType_RU    restoringType;
        ;

        while select forupdate tmpProcessLogTrans
                where tmpProcessLogTrans.Marked  == NoYes::Yes
        {
            while select sum(AmountLiableToVAT),sum(TaxAmount) from tmpProcessLogTransOper
                group by TaxCode, DefaultDimension, RefRecId, LogTableRefRecId, InventTransId, RestoringType
                where tmpProcessLogTransOper.Marked             == NoYes::Yes               &&
                      tmpProcessLogTransOper.RefRecId           == tmpProcessLogTrans.RecId &&
                      tmpProcessLogTransOper.LogTableRefRecId   == tmpProcessLogTrans.LogTableRefRecId
            {
                selectedAmounts = new BookStructSmallVATAmounts_RU();
                selectedAmounts.addAmounts(tmpProcessLogTransOper.AmountLiableToVAT + tmpProcessLogTransOper.TaxAmount,
                                           tmpProcessLogTransOper.AmountLiableToVAT,
                                           tmpProcessLogTransOper.TaxAmount);
                map.insert([#operationKey], selectedAmounts);
            }
        }

        mapEnumerator = map.getEnumerator();

        while (mapEnumerator.moveNext())
        {
            [refRecId,
             logTableRefRecId,
             taxCode,
             defaultDimension,
             inventTransId,
             restoringType] = mapEnumerator.currentKey();

            selectedAmounts = mapEnumerator.currentValue();

            select firstonly tmpProcessLogTransOper
                where tmpProcessLogTransOper.RefRecId           == refRecId         &&
                      tmpProcessLogTransOper.LogTableRefRecId   == logTableRefRecId &&
                      tmpProcessLogTransOper.TaxCode            == taxCode          &&
                      tmpProcessLogTransOper.DefaultDimension   == defaultDimension &&
                      tmpProcessLogTransOper.InventTransId      == inventTransId    &&
                      tmpProcessLogTransOper.RestoringType      == restoringType;

            settledAmounts = BookStructSmallVATAmounts_RU::create(tmpProcessLogTransOper.SettledAmounts);
            usedAmounts    = BookStructSmallVATAmounts_RU::create(tmpProcessLogTransOper.UsedAmounts);

            settledAmounts.subAmounts2(usedAmounts);

            if ((settledAmounts.amountLiableToVAT() != selectedAmounts.amountLiableToVAT()) ||
                (settledAmounts.taxAmountVAT()      != selectedAmounts.taxAmountVAT()))
            {
                ret = false;

                select forupdate firstonly tmpProcessLogTrans
                    where tmpProcessLogTrans.RecId              == refRecId &&
                          tmpProcessLogTrans.LogTableRefRecId   == logTableRefRecId;

                tmpProcessLogTrans.Error = NoYes::Yes;
                tmpProcessLogTrans.update();
            }
        }

        if ( ! ret)
        {
            error("@GLS105051");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearErrors</Name>
				<Source><![CDATA[
    private void clearErrors()
    {
        while select forupdate tmpProcessLogTrans
            where tmpProcessLogTrans.Error == NoYes::Yes
        {
            tmpProcessLogTrans.Error = NoYes::No;
            tmpProcessLogTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog dialog = super();
        ;

        dialog.addText("@GLS101158");
        dialog.addText("@SYS60031");

        transDateCtrl = dialog.addFieldValue(extendedTypeStr(TransDate), transDate, "@SYS67");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endLedgerVoucher</Name>
				<Source><![CDATA[
    protected void endLedgerVoucher()
    {
        ledgerVoucherCorrect.end();
        ledgerVoucher.end();
    }

]]></Source>
			</Method>
			<Method>
				<Name>endLog</Name>
				<Source><![CDATA[
    protected void endLog()
    {
        logTable.EndTime = DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone());
        logTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        if (ret)
        {
            transDate = transDateCtrl.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        ;
        currencyCode = CompanyInfoHelper::standardCurrency();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerVoucher</Name>
				<Source><![CDATA[
    protected void initLedgerVoucher()
    {
        NumberSeq           numberSeq;
        Voucher             voucher;
        LedgerVoucherObject ledgerVoucherObject;
        boolean             cancelMode = (processMode == SalesBookVATProcessCancelType_RU::Process) ? false : true;
        ;
        numberSeq = NumberSeq::newGetNum(CustParameters::numRefSalesBookVATProcessVoucherId_RU());

        voucher   = numberSeq.num();

        ledgerVoucherObject = LedgerVoucherObject::newVoucher(voucher,
                                                              transDate,
                                                              SysModule::Tax,
                                                              LedgerTransType::Tax,
                                                              cancelMode);
        ledgerVoucherObject.parmVoucherCheck(false);

        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Summary, SysModule::Tax, voucher);
        ledgerVoucher.addVoucher(ledgerVoucherObject);

        ledgerVoucherObject = LedgerVoucherObject::newVoucher(voucher,
                                                              transDate,
                                                              SysModule::Tax,
                                                              LedgerTransType::Tax,
                                                              !cancelMode);
        ledgerVoucherObject.parmVoucherCheck(false);

        ledgerVoucherCorrect = LedgerVoucher::newLedgerPost(DetailSummary::Summary, SysModule::Tax, voucher);
        ledgerVoucherCorrect.addVoucher(ledgerVoucherObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLog</Name>
				<Source><![CDATA[
    protected void initLog()
    {
        logTable.clear();
        logTable.StartTime  = DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone());
        logTable.Executed   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        logTable.Performer  = curUserId();
        logTable.Voucher    = ledgerVoucher.findLedgerVoucherObject().parmVoucher();
        logTable.ActionType = processMode;
        logTable.TransDate  = transDate;
        logTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>logOperation</Name>
				<Source><![CDATA[
    protected SalesBookVATProcessLogTransOper_RU logOperation(AmountMST _taxAmount, AmountMST _amountLiableToVAT)
    {
        SalesBookVATProcessLogTransOper_RU processLogTransOper;
        ;

        processLogTransOper.clear();

        processLogTransOper.initFromTmpProcessLogTransOper(tmpProcessLogTransOper);

        processLogTransOper.LogTableRefRecId    = logTable.RecId;
        processLogTransOper.TransDate           = transDate;
        processLogTransOper.RefRecId            = processLogTrans.RecId;
        processLogTransOper.TaxAmount           = _taxAmount;
        processLogTransOper.AmountLiableToVAT   = _amountLiableToVAT;

        processLogTransOper.insert();

        return processLogTransOper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logTrans</Name>
				<Source><![CDATA[
    protected void logTrans()
    {
        void createNewRecord()
        {
            processLogTrans.clear();
            processLogTrans.initFromTmpSalesBookVATProcessLogTrans(tmpProcessLogTrans);
            processLogTrans.insert();
        }
        ;

        processLogTransList = SalesBookVATProcessLogTrans_RU::findFromSettlement(tmpProcessLogTrans.FactureId,
                                                                                 tmpProcessLogTrans.InvoiceRecIdRef,
                                                                                 tmpProcessLogTrans.PaymentRecIdRef,
                                                                                 tmpProcessLogTrans.InvoiceCompany,
                                                                                 tmpProcessLogTrans.PaymentCompany,
                                                                                 tmpProcessLogTrans.SettlementRecId,
                                                                                 tmpProcessLogTrans.SettlementDate,
                                                                                 tmpProcessLogTrans.ProcessingType);
        if (processLogTransList.len())
        {
            if (processMode == SalesBookVATProcessCancelType_RU::Process)
            {
                while (processLogTransList.next(processLogTrans))
                {
                    this.cancelBlockedTrans(processLogTrans.RecId);
                }
            }
            else
            {
                processLogTransList.first(processLogTrans);
            }
        }
        else
        {
            createNewRecord();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logTransReverse</Name>
				<Source><![CDATA[
    protected void logTransReverse()
    {
        processLogTransList = SalesBookVATProcessLogTrans_RU::findFromSettlement(tmpProcessLogTrans.FactureId,
                                                                                 tmpProcessLogTrans.InvoiceRecIdRef,
                                                                                 tmpProcessLogTrans.PaymentRecIdRef,
                                                                                 tmpProcessLogTrans.InvoiceCompany,
                                                                                 tmpProcessLogTrans.PaymentCompany,
                                                                                 tmpProcessLogTrans.ReverseSettlementRecId,
                                                                                 tmpProcessLogTrans.ReverseDate,
                                                                                 tmpProcessLogTrans.ProcessingType,
                                                                                 true);
        processLogTransList.first(processLogTrans);
        if (processLogTrans.RecId)
        {
            processLogTrans.Reversed = (processMode == SalesBookVATProcessCancelType_RU::Process);
            processLogTrans.ReverseDate = (processLogTrans.Reversed ? tmpProcessLogTrans.SettlementDate : dateNull());
            processLogTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container   packedProcessLogTrans,
                    packedProcessLogTransOper;

        // don't save parameters if we are not in batch mode
        if ( ! this.isInBatch())
        {
            return [#CurrentVersion, #CurrentList, conNull(), conNull()];
        }

        while select tmpProcessLogTrans
        {
            packedProcessLogTrans += [tmpProcessLogTrans];
        }
        while select tmpProcessLogTransOper
        {
            packedProcessLogTransOper += [tmpProcessLogTransOper];
        }

        return [#CurrentVersion, #CurrentList, packedProcessLogTrans, packedProcessLogTransOper];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcessLogTrans</Name>
				<Source><![CDATA[
    private TmpSalesBookVATProcessLogTrans_RU parmProcessLogTrans(TmpSalesBookVATProcessLogTrans_RU _processLogTrans = tmpProcessLogTrans)
    {
        tmpProcessLogTrans = _processLogTrans;

        return tmpProcessLogTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcessLogTransOper</Name>
				<Source><![CDATA[
    private TmpSalesBookVATProcessLogTransOper_RU parmProcessLogTransOper(TmpSalesBookVATProcessLogTransOper_RU _processLogTransOper = tmpProcessLogTransOper)
    {
        tmpProcessLogTransOper = _processLogTransOper;

        return tmpProcessLogTransOper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcessMode</Name>
				<Source><![CDATA[
    private SalesBookVATProcessCancelType_RU parmProcessMode(SalesBookVATProcessCancelType_RU _processMode = processMode)
    {
        processMode = _processMode;

        return processMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        int                                 sign = (processMode == SalesBookVATProcessCancelType_RU::Process) ? 1 : -1;
        Set                                 processedTrans = new Set(typeName2Type(extendedTypeStr(RecId)));
        SetEnumerator                       setEnumerator;
        Counter                             counter;
        Voucher                             voucher;
        SalesBookVATProcessLogTransOper_RU  localLogTransOper;
        BookPostTax_RU                      bookPostTax;
        ;

        select count(RecId) from tmpProcessLogTrans
            exists join tmpProcessLogTransOper
            where tmpProcessLogTrans.Marked                 == NoYes::Yes                           &&
                  tmpProcessLogTransOper.RefRecId           == tmpProcessLogTrans.RecId             &&
                  tmpProcessLogTransOper.LogTableRefRecId   == tmpProcessLogTrans.LogTableRefRecId  &&
                  tmpProcessLogTransOper.Marked             == NoYes::Yes                           &&
                  tmpProcessLogTransOper.AmountLiableToVAT;

        counter = any2int(tmpProcessLogTrans.RecId);

        if ( ! counter)
        {
            throw error("@GLS111372");
        }

        this.clearErrors();

        if ( ! this.check())
        {
            throw error("@GLS101992");
        }

        this.progressInit("@GLS112938", counter, #AviUpdate);
        progress.setText("@SYS26577");

        try
        {
            ttsbegin;

            this.init();
            this.initLedgerVoucher();
            this.initLog();

            while select tmpProcessLogTrans
                where tmpProcessLogTrans.Marked == NoYes::Yes
            {
                progress.setText(strFmt("@GLS111359", tmpProcessLogTrans.AccountNum, tmpProcessLogTrans.FactureExternalId));

                if (tmpProcessLogTrans.Reversed)
                {
                    this.logTransReverse();
                }

                this.logTrans();

                processedTrans.add(tmpProcessLogTrans.RecId);
                while select tmpProcessLogTransOper
                     where tmpProcessLogTransOper.RefRecId          == tmpProcessLogTrans.RecId             &&
                           tmpProcessLogTransOper.LogTableRefRecId  == tmpProcessLogTrans.LogTableRefRecId  &&
                           tmpProcessLogTransOper.Marked            == NoYes::Yes                           &&
                           tmpProcessLogTransOper.AmountLiableToVAT                                         &&
                           tmpProcessLogTransOper.CanceledRefRecId  == 0
                {
                    voucher = ledgerVoucher.findLedgerVoucherObject().parmVoucher();

                    localLogTransOper = this.logOperation(sign * tmpProcessLogTransOper.TaxAmount,
                                                          sign * tmpProcessLogTransOper.AmountLiableToVAT);

                    if (voucher && tmpProcessLogTransOper.Blocked == NoYes::No)
                    {
                        bookPostTax = BookPostTax_RU::construct(ledgerVoucher,
                                                                ledgerVoucherCorrect,
                                                                voucher,
                                                                transDate,
                                                                localLogTransOper.TransTxt,
                                                                processMode ? true : false,
                                                                localLogTransOper);

                        bookPostTax.calcAndPost(LedgerPostingController::newForLedgerPostingJournal(bookPostTax.parmLedgerVoucher()), '', dateNull());
                    }
                }

                progress.incCount();
            }

            this.endLedgerVoucher();
            this.endLog();

            setEnumerator = processedTrans.getEnumerator();

            while (setEnumerator.moveNext())
            {
                select RecId, LogTableRefRecId from tmpProcessLogTrans
                    where tmpProcessLogTrans.RecId == setEnumerator.current();

                delete_from tmpProcessLogTransOper
                    where tmpProcessLogTransOper.RefRecId           == tmpProcessLogTrans.RecId            &&
                          tmpProcessLogTransOper.LogTableRefRecId   == tmpProcessLogTrans.LogTableRefRecId &&
                          tmpProcessLogTransOper.Marked             == NoYes::Yes;

                select count(RecId) from tmpProcessLogTransOper
                    where tmpProcessLogTransOper.RefRecId           == tmpProcessLogTrans.RecId       &&
                          tmpProcessLogTransOper.LogTableRefRecId   == tmpProcessLogTrans.LogTableRefRecId;

                if (! tmpProcessLogTransOper.RecId)
                {
                    tmpProcessLogTrans.delete();
                }
            }

            info(strFmt("@SYS9799", ledgerVoucher.findLedgerVoucherObject().parmVoucher()));

            ttscommit;
        }

        catch(Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean                                 ret;
        Counter                                 x;
        Counter                                 maxCount;
        int                                     version     = conPeek(_packedClass,1);
        container                               packedProcessLogTrans,
                                                packedProcessLogTransOper;
        TmpSalesBookVATProcessLogTrans_RU       tmpSalesBookVATProcessLogTrans;
        TmpSalesBookVATProcessLogTransOper_RU   tmpSalesBookVATProcessLogTransOper;
        ;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedProcessLogTrans, packedProcessLogTransOper] = _packedClass;

                if (this.isInBatch())
                {
                    delete_from tmpProcessLogTrans;
                    delete_from tmpProcessLogTransOper;

                    maxCount = conLen(packedProcessLogTrans);

                    for (x = 1; x <= maxCount; x++)
                    {
                        [tmpSalesBookVATProcessLogTrans] = conPeek(packedProcessLogTrans, x);
                        tmpProcessLogTrans.clear();
                        tmpProcessLogTrans.data(tmpSalesBookVATProcessLogTrans);
                        tmpProcessLogTrans.insert();
                    }

                    maxCount = conLen(packedProcessLogTransOper);

                    for (x = 1; x <= maxCount; x++)
                    {
                        [tmpSalesBookVATProcessLogTransOper] = conPeek(packedProcessLogTransOper, x);
                        tmpProcessLogTransOper.clear();
                        tmpProcessLogTransOper.data(tmpSalesBookVATProcessLogTransOper);
                        tmpProcessLogTransOper.insert();
                    }
                }

                ret = true;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super(calledFrom);

        ret = SalesBookTable_RU::canProcessDate(transDate);

        if ( ! ret)
        {
            ret = checkFailed("@GLS107090");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS112938";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromVATProcess</Name>
				<Source><![CDATA[
    public static BookPost_Sales_RU newFromVATProcess(SalesBookVATProcessCancelType_RU      _processMode,
                                                      TmpSalesBookVATProcessLogTrans_RU     _processLogTrans,
                                                      TmpSalesBookVATProcessLogTransOper_RU _processLogTransOper)
    {
        BookPost_Sales_RU bookPost;

        switch (_processMode)
        {
            case SalesBookVATProcessCancelType_RU::Process :
                bookPost = new BookPost_Sales_Process_RU();
                break;

            case SalesBookVATProcessCancelType_RU::Cancel  :
                bookPost = new BookPost_Sales_Cancel_RU();
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        bookPost.parmProcessLogTrans(_processLogTrans);
        bookPost.parmProcessLogTransOper(_processLogTransOper);
        bookPost.parmProcessMode(_processMode);

        return bookPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>