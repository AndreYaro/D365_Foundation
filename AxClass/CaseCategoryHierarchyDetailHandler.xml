<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CaseCategoryHierarchyDetailHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CaseCategoryHierarchyDetailHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>CaseCategoryHierarchyDetail_Post_insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy responsibilities between hierarchies.
    /// </summary>
    /// <param name="_args">
    /// The event args.
    /// </param>
    [PostHandlerFor(tableStr(CaseCategoryHierarchyDetail), tableMethodStr(CaseCategoryHierarchyDetail, insert))]
    public static void CaseCategoryHierarchyDetail_Post_insert(XppPrePostArgs _args)
    {
        CaseCategoryHierarchyDetail caseCategoryHierarchyDetail = _args.getThis();

        if (caseCategoryHierarchyDetail.Process)
        {
            CaseCategoryHierarchyDetailHandler::copyResponsibilitiesFromProcess(caseCategoryHierarchyDetail);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CaseCategoryHierarchyDetail_Pre_update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy responsibilities between hierarchies.
    /// </summary>
    /// <param name="_args">
    /// The event args.
    /// </param>
    [PreHandlerFor(tableStr(CaseCategoryHierarchyDetail), tableMethodStr(CaseCategoryHierarchyDetail, update))]
    public static void CaseCategoryHierarchyDetail_Pre_update(XppPrePostArgs _args)
    {
        CaseCategoryHierarchyDetail caseCategoryHierarchyDetail = _args.getThis();
        boolean processChanged;

        if (caseCategoryHierarchyDetail.Process != caseCategoryHierarchyDetail.orig().Process)
        {
            processChanged = true;
        }

        if (processChanged && caseCategoryHierarchyDetail.Process)
        {
            CaseCategoryHierarchyDetailHandler::copyResponsibilitiesFromProcess(caseCategoryHierarchyDetail);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteResponsibilies</Name>
				<Source><![CDATA[
    private static void deleteResponsibilies(CaseCategoryHierarchyDetail _caseCategoryHierarchyDetail)
    {
        smmResponsibilitiesEmplTable respEmplTable;

        ttsbegin;

        delete_from respEmplTable
            where respEmplTable.RefTableId == _caseCategoryHierarchyDetail.TableId &&
                  respEmplTable.RefRecId == _caseCategoryHierarchyDetail.RecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyResponsibilitiesFromProcess</Name>
				<Source><![CDATA[
    private static void copyResponsibilitiesFromProcess(CaseCategoryHierarchyDetail _caseCategoryHierarchyDetail)
    {
        smmResponsibilitiesEmplTable    respEmplTable, respEmplTableExisting;
        smmResponsibilitiesTable        respTable;
        HierarchyIdBase                 hierarchyId;

        hierarchyId = Hierarchy::findByNameType(_caseCategoryHierarchyDetail.Process, HierarchyType::Case, true).HierarchyId;

        if (hierarchyId)
        {
            ttsbegin;

            while select ResponsibilityId from respTable
                where respTable.HierarchyId == hierarchyId
                notexists join respEmplTableExisting
                    where respEmplTableExisting.ResponsibilityId == respTable.ResponsibilityId
                    && respEmplTableExisting.RefTableId == _caseCategoryHierarchyDetail.TableId
                    && respEmplTableExisting.RefRecId == _caseCategoryHierarchyDetail.RecId
            {
                respEmplTable.clear();
                respEmplTable.ResponsibilityId = respTable.ResponsibilityId;
                respEmplTable.RefTableId = _caseCategoryHierarchyDetail.TableId;
                respEmplTable.RefRecId = _caseCategoryHierarchyDetail.RecId;

                if (respEmplTable.validateWrite())
                {
                    respEmplTable.insert();
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>