<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqLogCoverageSafety</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Implements in-memory tracking of planning coverage statistics. This class is intended to only be used by ReqLogCoverage.
/// </summary>
public class ReqLogCoverageSafety
{
    Map safetyStockLogDetails;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct new instance of planning safety stock statistics. This instance has no knowledge of the process ID, plan ID or coverage rule context.
    /// </summary>
    public void new()
    {
        safetyStockLogDetails = new Map(Types::Enum /* ReqMinSatisfy */, Types::Class /* ReqLogCoverageSafetyDetails */);
    }

]]></Source>
			</Method>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add planning statistics for this instance. Iteratively invoke to incrementally add more and more statistics for different items/dimensions.
    /// </summary>
    /// <param name = "_itemId">The item ID being coverage planned.</param>
    /// <param name = "_covInventDimId">The inventory dimensions being coverage planned.</param>
    /// <param name = "_minSatisfy">The fulfilment trigger being used.</param>
    /// <param name = "_covPeriod">The coverage period being used.</param>
    /// <param name = "_minimum">The minimum stock level being used.</param>
    /// <param name = "_maximum">The maximum stock level being used.</param>
    public void add(ItemId _itemId, ReqCovInventDimId _covInventDimId, ReqMinSatisfy _minSatisfy, ReqCovPeriod _covPeriod, InventQtyMinOnhand _minimum, InventQtyMaxOnhand _maximum)
    {
        ReqLogCoverageSafetyDetails reqLogCoverageSafetyDetails = this.getReqLogCoverageSafetyDetails(_minSatisfy);
        
        reqLogCoverageSafetyDetails.add(_itemId, _covInventDimId, _covPeriod, _minimum, _maximum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeTelemetry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enter the statistics in this instance, along with the parameter values (context for this instance) into telemetry.
    /// Invoking this method does not alter the data in this instance.
    /// </summary>
    /// <param name = "_processId">The process ID for planning run.</param>
    /// <param name = "_dataAreaId">The data area ID for the plan being run.</param>
    /// <param name = "_reqPlanId">The plan ID for the plan being run.</param>
    /// <param name = "_covRule">The coverage rule being used.</param>
    /// <returns>Boolean value returned from the instrumentation API invocation.</returns>
    public boolean invokeTelemetry(ReqProcessId _processId, DataAreaId _dataAreaId, ReqPlanId _reqPlanId, ReqCovType _covRule)
    {
        ReqLogCoverageSafetyDetails reqLogCoverageSafetyDetails;
        MapEnumerator safetyStockLogDetailsEnumerator = safetyStockLogDetails.getEnumerator();

        boolean result = true;

        while (safetyStockLogDetailsEnumerator.moveNext())
        {
            reqLogCoverageSafetyDetails = safetyStockLogDetailsEnumerator.currentValue();
            result = result & reqLogCoverageSafetyDetails.invokeTelemetry(_processId, _dataAreaId, _reqPlanId, _covRule, safetyStockLogDetailsEnumerator.currentKey());
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReqLogCoverageSafetyDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get an instance of ReqLogCoverageSafety for the specified fulfilment trigger.
    /// </summary>
    /// <param name = "_minSatisfy">The fulfilment trigger for the ReqLogCoverageSafetyDetails instance.</param>
    /// <param name = "_create">Whether to create a new instance if one does not already exist for the fulfilment trigger.</param>
    /// <returns>An instance of ReqLogCoverageSafetyDetails, or null if an instance does not already exist for the fulfilment trigger and _create is set to false.</returns>
    public ReqLogCoverageSafetyDetails getReqLogCoverageSafetyDetails(ReqMinSatisfy _minSatisfy, boolean _create = true)
    {
        if (safetyStockLogDetails.exists(_minSatisfy))
        {
            return safetyStockLogDetails.lookup(_minSatisfy);
        }
        else if (_create)
        {
            ReqLogCoverageSafetyDetails reqLogCoverageSafetyDetails = new ReqLogCoverageSafetyDetails();
            safetyStockLogDetails.insert(_minSatisfy, reqLogCoverageSafetyDetails);
            return reqLogCoverageSafetyDetails;
        }
        else
        {
            return null;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>