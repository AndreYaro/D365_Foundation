<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetSourceGeneralJournalEntry</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetSourceGeneralJournalEntry</c> class is responsible for data management for
///    <c>BudgetSource</c> records that are associated with <c>GeneralJournalEntry</c> records.
/// </summary>
/// <remarks>
///    This class extends <c>BudgetSourceIntegrator</c> class.
/// </remarks>
class BudgetSourceGeneralJournalEntry extends BudgetSourceIntegrator
{
    GeneralJournalEntry generalJournalEntry;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBudgetSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>BudgetSource</c> table buffer for the <c>GeneralJournalEntry</c> record.
    /// </summary>
    /// <returns>
    /// A <c>BudgetSource</c> table buffer.
    /// </returns>
    public BudgetSource createBudgetSource()
    {
        BudgetSource budgetSource;

        budgetSource.BudgetSourceType = BudgetSourceType::LedgerEntry;
        budgetSource.LedgerEntryGeneralJournalEntry = this.parmGeneralJournalEntry().RecId;
        budgetSource.BudgetControlSourceIntegrator = BudgetControlSourceIntegrator::LedgerEntry;

        return budgetSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetSourceTrackingNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget source tracking number.
    /// </summary>
    public Num getBudgetSourceTrackingNumber()
    {
        return generalJournalEntry.SubledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetSourceTrackingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget source tracking date.
    /// </summary>
    public TransDate getBudgetSourceTrackingDate()
    {
        return generalJournalEntry.AccountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBudgetSourceIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a set of IDs for <c>BudgetSource</c> records that are associated with the
    /// <c>GeneralJournalEntry</c> record.
    /// </summary>
    /// <returns>
    /// A set of IDs for <c>BudgetSource</c> records that are associated with the
    /// <c>GeneralJournalEntry</c> record.
    /// </returns>
    public Set findBudgetSourceIds()
    {
        RecId budgetSourceId;
        Set budgetSourceIds = new Set(typeName2Type(extendedtypestr(recId)));

        budgetSourceId = BudgetSourceGeneralJournalEntry::findBudgetSourceId(this.parmCommonId());

        if (budgetSourceId != 0)
        {
            budgetSourceIds.add(budgetSourceId);
        }

        return budgetSourceIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BudgetCheckResult</c> value that is associated with the specified <c>Common</c> record.
    /// </summary>
    /// <param name="_doCheckLedgerBudgetControlEnabled">
    /// A Boolean value that indicates whether to check that budget control is enabled on the primary
    /// ledger of the current legal entity before trying to get the <c>BudgetCheckResult</c> value;
    /// optional.
    /// </param>
    /// <returns>
    /// The <c>BudgetCheckResult</c> value of the <c>BudgetSource</c> record that is associated with the
    /// <c>Common</c> record.
    /// </returns>
    public BudgetCheckResult getBudgetCheckResult(boolean _doCheckLedgerBudgetControlEnabled = true)
    {
        BudgetCheckResult   budgetCheckResult;
        BudgetSource        budgetSource;

        budgetCheckResult = BudgetCheckResult::NoCheck;

        if (BudgetControlConfiguration::isControlConfigured() &&
            hasTableAccess(tableNum(BudgetSource)))
        {
            if (!_doCheckLedgerBudgetControlEnabled ||
                Ledger::isLedgerBudgetControlEnabled())
            {
                // Adding ranges for all the alternate key fields of budget source table
                // for performance reason.
                select firstonly RecId from budgetSource
                    where  (budgetSource.BudgetSourceType == BudgetSourceType::LedgerEntry &&
                            budgetSource.BudgetTransactionLine == 0 &&
                            budgetSource.SourceDocumentLine == 0 &&
                            budgetSource.LedgerEntryGeneralJournalEntry == generalJournalEntry.RecId &&
                            budgetSource.LedgerEntryJournalNumber == '' &&
                            budgetSource.LedgerEntryJournalReferenceNumber == '' &&
                            budgetSource.LedgerEntryJournalLegalEntity == 0);

                if (budgetSource.CheckResult)
                {
                    budgetCheckResult = budgetSource.CheckResult;
                }
            }
        }

        return budgetCheckResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGeneralJournalEntry</Name>
				<Source><![CDATA[
    protected GeneralJournalEntry parmGeneralJournalEntry(GeneralJournalEntry _generalJournalEntry = generalJournalEntry)
    {
        generalJournalEntry = _generalJournalEntry;

        return generalJournalEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBudgetSourceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record ID for the <c>BudgetSource</c> record that is associated with the <c>GeneralJournalEntry</c> record.
    /// </summary>
    /// <param name="_generalJournalEntryId">
    /// The record ID of the <c>GeneralJournalEntry</c> table.
    /// </param>
    /// <returns>
    /// The record ID for the <c>BudgetSource</c> record that is associated with the <c>GeneralJournalEntry</c> record.
    /// </returns>
    public static RecId findBudgetSourceId(RecId _generalJournalEntryId)
    {
        BudgetSource budgetSource;

        // Find budget source with general journal entry without a LedgerEntryJournal reference.
        // Adding ranges for all the alternate key fields of budget source table
        // for performance reason.
        select firstonly RecId from budgetSource
            where  (budgetSource.BudgetSourceType == BudgetSourceType::LedgerEntry &&
                    budgetSource.BudgetTransactionLine == 0 &&
                    budgetSource.SourceDocumentLine == 0 &&
                    budgetSource.LedgerEntryGeneralJournalEntry == _generalJournalEntryId &&
                    budgetSource.LedgerEntryJournalNumber == '' &&
                    budgetSource.LedgerEntryJournalReferenceNumber == '' &&
                    budgetSource.LedgerEntryJournalLegalEntity == 0);

        return budgetSource.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBudgetSourceGeneralJournalEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>BudgetSourceGeneralJournalEntry</c> class with a
    /// <c>GeneralJournalEntry</c> record.
    /// </summary>
    /// <param name="_generalJournalEntry">
    /// The <c>GeneralJournalEntry</c> record.
    /// </param>
    /// <returns>
    /// An instance of the <c>BudgetSourceGeneralJournalEntry</c> class.
    /// </returns>
    public static BudgetSourceGeneralJournalEntry newBudgetSourceGeneralJournalEntry(GeneralJournalEntry _generalJournalEntry)
    {
        BudgetSourceGeneralJournalEntry budgetSourceGeneralJournalEntry;

        if (!_generalJournalEntry)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        budgetSourceGeneralJournalEntry = new BudgetSourceGeneralJournalEntry();

        budgetSourceGeneralJournalEntry.parmGeneralJournalEntry(_generalJournalEntry);
        budgetSourceGeneralJournalEntry.parmCommonId(_generalJournalEntry.RecId);

        return budgetSourceGeneralJournalEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveBudgetSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the new <c>BudgetSource</c> record for the specified <c>GeneralJournalEntry</c> record.
    /// </summary>
    /// <param name="_generalJournalEntry">
    /// The <c>GeneralJournalEntry</c> record.
    /// </param>
    /// <returns>
    /// The record ID of the <c>BudgetSource</c> record that is saved.
    /// </returns>
    /// <remarks>
    /// If a <c>BudgetSource</c> record does not exist for the specified <c>GeneralJournalEntry</c> record,
    /// this method will insert one record; otherwise, it will just return the <c>BudgetSource</c> record
    /// ID.
    /// </remarks>
    public static BudgetSourceRecId saveBudgetSource(GeneralJournalEntry _generalJournalEntry)
    {
        RecId budgetSourceId;
        BudgetSource budgetSource;
        BudgetSourceGeneralJournalEntry budgetSourceGeneralJournalEntry = BudgetSourceGeneralJournalEntry::newBudgetSourceGeneralJournalEntry(_generalJournalEntry);

        budgetSourceId = BudgetSourceGeneralJournalEntry::findBudgetSourceId(_generalJournalEntry.RecId);

        if (!budgetSourceId)
        {
            budgetSource = budgetSourceGeneralJournalEntry.createBudgetSource();
            budgetSource.insert();

            budgetSourceId = budgetSource.RecId;
        }

        return budgetSourceId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>