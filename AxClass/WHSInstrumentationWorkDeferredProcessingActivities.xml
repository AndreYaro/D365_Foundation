<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInstrumentationWorkDeferredProcessingActivities</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides activities related to deferred work processing.
/// </summary>
internal class WHSInstrumentationWorkDeferredProcessingActivities
{
    private WHSInstrumentationLogger logger;

    private const str ActivityNamePrefix = 'WorkDeferredPut.';
    private const str ProcessTask = 'processTask';
    private const str CancelTask = 'CancelTask';
    private const str StartOperationFromTask = 'StartOperationFromTask';
    private const str StartOperationFromContract = 'StartOperationFromContract';
    private const str LockClusterTable = 'LockClusterTable';
    private const str CloseContainerTable = 'CloseContainerTable';
    private const str PutAwayToLocationConsiderDeferredPut = 'PutAwayToLocationConsiderDeferredPut';
    private const str LockPutWorkLine = 'LockPutWorkLine';
    private const str PutWorkLineRecVersionChangedAfterTaskCreation = 'PutWorkLineRecVersionChangedAfterTaskCreation';
    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(WHSInstrumentationLogger _logger)
    {
        logger = _logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLogger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new instance of the <cWHSInstrumentationWorkDeferredProcessingActivities></c> class. 
    /// </summary>
    /// <param name = "_logger">The logger used for logging the telemetry.</param>
    /// <returns>A new instance of the <cWHSInstrumentationWorkDeferredProcessingActivities></c> class</returns>
    [Hookable(false)]
    internal static WHSInstrumentationWorkDeferredProcessingActivities newFromLogger(WHSInstrumentationLogger _logger)
    {
        return new WHSInstrumentationWorkDeferredProcessingActivities(_logger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>activity</Name>
				<Source><![CDATA[
    private SysInstrumentationActivity activity(str _activityName)
    {
        return logger.activity(ActivityNamePrefix + _activityName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new activity context used when processing tasks.
    /// </summary>
    /// <returns>A new activity context.</returns>
    [Hookable(false)]    
    internal SysInstrumentationActivityContext processTask()
    {
        return logger.activityContext(this.activity(ProcessTask));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockClusterTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new activity context used when locking cluster table records.
    /// </summary>
    /// <returns>A new activity context.</returns>
    [Hookable(false)]    
    internal SysInstrumentationActivityContext lockClusterTable()
    {
        return logger.activityContext(this.activity(LockClusterTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeContainerTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new activity context used when closing container table records.
    /// </summary>
    /// <returns>A new activity context.</returns>
    [Hookable(false)]
    internal SysInstrumentationActivityContext closeContainerTable()
    {
        return logger.activityContext(this.activity(CloseContainerTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockPutWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new activity context used when locking the put work line record.
    /// </summary>
    /// <returns>A new activity context.</returns>
    [Hookable(false)]
    internal SysInstrumentationActivityContext lockPutWorkLine()
    {
        return logger.activityContext(this.activity(LockPutWorkLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>putWorkLineRecVersionChangedAfterTaskCreation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new activity context used when identifying that the put work lines recVersion has been changed after the task was created.
    /// </summary>
    /// <returns>A new activity context.</returns>
    [Hookable(false)]
    internal SysInstrumentationActivityContext putWorkLineRecVersionChangedAfterTaskCreation()
    {
        return logger.activityContext(this.activity(PutWorkLineRecVersionChangedAfterTaskCreation));
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new activity context used when cancelling tasks.
    /// </summary>
    /// <returns>A new activity context.</returns>
    [Hookable(false)]    
    internal SysInstrumentationActivityContext cancelTask()
    {
        return logger.activityContext(this.activity(CancelTask));
    }

]]></Source>
			</Method>
			<Method>
				<Name>startOperationFromTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new activity context used when starting the put operation from a task.
    /// </summary>
    /// <returns>A new activity context.</returns>
    [Hookable(false)]    
    internal SysInstrumentationActivityContext startOperationFromTask()
    {
        return logger.activityContext(this.activity(StartOperationFromTask));
    }

]]></Source>
			</Method>
			<Method>
				<Name>startOperationFromContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new activity context used when starting the put operation from a contract.
    /// </summary>
    /// <returns>A new activity context.</returns>
    [Hookable(false)]    
    internal SysInstrumentationActivityContext startOperationFromContract()
    {
        return logger.activityContext(this.activity(StartOperationFromContract));
    }

]]></Source>
			</Method>
			<Method>
				<Name>putAwayToLocationConsiderDeferredPut</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new activity context used when deciding if the deferred put processing should be used.
    /// </summary>
    /// <returns>A new activity context.</returns>
    [Hookable(false)]    
    internal SysInstrumentationActivityContext putAwayToLocationConsiderDeferredPut()
    {
        return logger.activityContext(this.activity(PutAwayToLocationConsiderDeferredPut));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>