<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMPaymentRequestMVEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CFMPaymentRequestMVEventHandler
{
    CFMPaymentRequestView formView;
    CFMPaymentRequestViewModel viewModel;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CFMPaymentRequestMVEventHandler construct(CFMPaymentRequestView _formView)
    {
        CFMPaymentRequestMVEventHandler vmEventHandler = new CFMPaymentRequestMVEventHandler();

        vmEventHandler.init(_formView);

        return vmEventHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementApplicableEventHandler</Name>
				<Source><![CDATA[
    public void agreementApplicableEventHandler(boolean _agreementApplicable)
    {
        if (formView.parmAgreementIdControl())
        {
            formView.parmAgreementIdControl().enabled(_agreementApplicable);
        }

        if (formView.parmAgreementDocumentTitleControl())
        {
            formView.parmAgreementDocumentTitleControl().enabled(_agreementApplicable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankPaymentApplicableEventHandler</Name>
				<Source><![CDATA[
    public void bankPaymentApplicableEventHandler(boolean _paymentConditionsApplicable)
    {
        if (formView.parmPaymModeControl())
        {
            formView.parmPaymModeControl().enabled(_paymentConditionsApplicable);
        }

        if (formView.parmPaymSpecControl())
        {
            formView.parmPaymSpecControl().enabled(_paymentConditionsApplicable);
        }

        if (formView.parmRecepientBankAccountControl())
        {
            formView.parmRecepientBankAccountControl().enabled(_paymentConditionsApplicable);
        }

        if (formView.parmRecepientBankAccountControl())
        {
            formView.parmRecepientBankAccountControl().enabled(_paymentConditionsApplicable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRequestOriginEnabledEventHandler</Name>
				<Source><![CDATA[
    public void displayRequestOriginEnabledEventHandler(boolean _enabled)
    {
        if (formView.parmRequestOriginButtonControl())
        {
            formView.parmRequestOriginButtonControl().enabled(_enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init(CFMPaymentRequestView _formView)
    {
        formView = _formView;
        viewModel = formView.parmPaymentRequestViewModel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccountApplicableEventHandler</Name>
				<Source><![CDATA[
    public void invoiceAccountApplicableEventHandler(boolean _isInvoiceAccountApplicable)
    {
        if (formView.parmInvoiceAccountNumControl())
        {
            formView.parmInvoiceAccountNumControl().enabled(_isInvoiceAccountApplicable);
            formView.parmInvoiceAccountNumControl().mandatory(_isInvoiceAccountApplicable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationCancellationAllowedEventHandler</Name>
				<Source><![CDATA[
    public void operationCancellationAllowedEventHandler(boolean _operationAllowed)
    {
        if (formView.parmCancellationButtonControl())
        {
            formView.parmCancellationButtonControl().enabled(_operationAllowed);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationConfirmationAllowedEventHandler</Name>
				<Source><![CDATA[
    public void operationConfirmationAllowedEventHandler(boolean _operationAllowed)
    {
        if (formView.parmConfirmationButtonControl())
        {
            formView.parmConfirmationButtonControl().enabled(_operationAllowed);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationSplitAllowedEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the event when payment request split operation availability is set.
    /// </summary>
    /// <param name="_operationAllowed">
    /// Operation is allowed.
    /// </param>
    public void operationSplitAllowedEventHandler(boolean _operationAllowed)
    {
        if (formView.parmSplitButtonControl())
        {
            formView.parmSplitButtonControl().enabled(_operationAllowed);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationUpdateFromSourceAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the event when payment request update operation availability is set.
    /// </summary>
    /// <param name="_operationAllowed">
    /// Operation is allowed.
    /// </param>
    public void operationUpdateFromSourceAllowed(boolean _operationAllowed)
    {
        if (formView.parmUpdateFromSourceButtonControl())
        {
            formView.parmUpdateFromSourceButtonControl().enabled(_operationAllowed);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentAccountTypeEventHandler</Name>
				<Source><![CDATA[
    public void paymentAccountTypeEventHandler(boolean _paymentAccountTypeCanBeChanged)
    {
        if (formView.parmPaymentAccountTypeControl())
        {
            formView.parmPaymentAccountTypeControl().enabled(_paymentAccountTypeCanBeChanged);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentDueDateEventHandler</Name>
				<Source><![CDATA[
    public void paymentDueDateEventHandler(boolean _paymentDueDateCanBeChanged)
    {
        if (formView.parmDueDateCtrlControl())
        {
            formView.parmDueDateCtrlControl().enabled(_paymentDueDateCanBeChanged);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentEditEventHandler</Name>
				<Source><![CDATA[
    public void paymentEditEventHandler(boolean _paymentEditCanBeChanged)
    {
        if (formView.parmEditButtonControl())
        {
            formView.parmEditButtonControl().enabled(_paymentEditCanBeChanged);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentFinDimensionsEventHandler</Name>
				<Source><![CDATA[
    public void paymentFinDimensionsEventHandler(boolean _paymentFinDimensionsCanBeChanged)
    {
        if (formView.parmDimensionsControl())
        {
            formView.parmDimensionsControl().allowEdit(_paymentFinDimensionsCanBeChanged);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentOnHoldEventHandler</Name>
				<Source><![CDATA[
    public void paymentOnHoldEventHandler(boolean _paymentOnHoldCanBeChanged)
    {
        if (formView.parmOnHoldButtonControl())
        {
            formView.parmOnHoldButtonControl().enabled(_paymentOnHoldCanBeChanged);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentOrderEventHandler</Name>
				<Source><![CDATA[
    public void paymentOrderEventHandler(boolean _paymentOrderCanBeChanged)
    {
        if (formView.parmOrderButtonControl())
        {
            formView.parmOrderButtonControl().enabled(_paymentOrderCanBeChanged);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentOrderRequisitesEventHandler</Name>
				<Source><![CDATA[
    public void paymentOrderRequisitesEventHandler(boolean _paymentOrderRequisitesEventHandler)
    {
        if (formView.parmPaymentOrderTabCtrl())
        {
            formView.parmPaymentOrderTabCtrl().visible(_paymentOrderRequisitesEventHandler);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentPrepaymentEventHandler</Name>
				<Source><![CDATA[
    public void paymentPrepaymentEventHandler(boolean _paymentPrepaymentCanBeChanged)
    {
        if (formView.parmPrepaymentControl())
        {
            formView.parmPrepaymentControl().enabled(_paymentPrepaymentCanBeChanged);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingProfileEventHandler</Name>
				<Source><![CDATA[
    public void postingProfileEventHandler(boolean _postingProfileCanBeChanged)
    {
        if (formView.parmPostingProfileControl())
        {
            formView.parmPostingProfileControl().enabled(_postingProfileCanBeChanged);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    public void subscribe()
    {
        viewModel.agreementApplicableEventHandler += eventhandler(this.agreementApplicableEventHandler);
        viewModel.bankPaymentApplicableEventHandler += eventhandler(this.bankPaymentApplicableEventHandler);
        viewModel.invoiceAccountApplicableEventHandler += eventhandler(this.invoiceAccountApplicableEventHandler);
        viewModel.paymentAccountTypeCanBeChanged += eventhandler(this.paymentAccountTypeEventHandler);
        viewModel.postingProfileCanBeChangedEventHandler += eventhandler(this.postingProfileEventHandler);
        viewModel.operationCancellationAllowedEventHandler += eventhandler(this.operationCancellationAllowedEventHandler);
        viewModel.operationConfirmationAllowedEventHandler += eventhandler(this.operationConfirmationAllowedEventHandler);
        viewModel.displayRequestOriginEnabledEventHandler += eventhandler(this.displayRequestOriginEnabledEventHandler);
        viewModel.paymentOnHoldCanBeChanged += eventhandler(this.paymentOnHoldEventHandler);
        viewModel.paymentEditCanBeChanged += eventhandler(this.paymentEditEventHandler);
        viewModel.paymentOrderCanBeChanged += eventhandler(this.paymentOrderEventHandler);
        viewModel.paymentDueDateCanBeChanged += eventhandler(this.paymentDueDateEventHandler);
        viewModel.paymentFinDimensionsCanBeChanged += eventhandler(this.paymentFinDimensionsEventHandler);
        viewModel.paymentPrepaymentCanBeChanged += eventhandler(this.paymentPrepaymentEventHandler);
        viewModel.operationUpdateFromSourceAllowed += eventhandler(this.operationUpdateFromSourceAllowed);
        viewModel.operationSplitAllowedEventHandler += eventhandler(this.operationSplitAllowedEventHandler);
        viewModel.paymentOrderRequisitesCanBeChanged += eventhandler(this.paymentOrderRequisitesEventHandler);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>