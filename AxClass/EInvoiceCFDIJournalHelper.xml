<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EInvoiceCFDIJournalHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EInvoiceCFDIJournalHelper</c> class provides functions to <c>EInvoiceCFDIJournal_AR</c> and <c>EInvoiceCFDIJournal_PJ</c> forms.
/// </summary>
public class EInvoiceCFDIJournalHelper
{
    EInvoiceJour_MX             eInvoiceJour;
    EInvoiceCFDIParameters_MX   eInvoiceCFDIParams;
    private DialogField dialogCancelReason;
    private DialogField substitutionDocument;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFileNameToExportXML</Name>
				<Source><![CDATA[
    private str getFileNameToExportXML(EInvoiceJour_MX _eInvoiceJour)
    {
        const str FilePrefixInvoice = 'Invoice_ID_';
        const str FilePrefixWitholding =  'Withholding_Id_';
        const str FileExtension = '.xml';

        str invoiceId;
        str filePrefix = FilePrefixInvoice;

        switch (_eInvoiceJour.RefTableId)
        {
            case tableNum(CustInvoiceJour):
                invoiceId = CustInvoiceJour::findRecId(_eInvoiceJour.RefRecId).InvoiceId;
                break;

            case tableNum(ProjInvoiceJour):
                invoiceId = ProjInvoiceJour::findRecId(_eInvoiceJour.RefRecId).ProjInvoiceId;
                break;

            case tableNum(RetailStatementJour):
            case tableNum(RetailEInvoiceAggregatedStatement_MX):
                invoiceId = _eInvoiceJour.invoiceId() + '_' + EInvoiceJourBaseMap_MX::eInvoiceJournalType(_eInvoiceJour.IsReturn);
                break;

            case tableNum(CFDIWithholdingJour_MX):
                invoiceId = CFDIWithholdingJour_MX::find(_eInvoiceJour.RefRecId).WithholdingJournalID;
                filePrefix = FilePrefixWitholding;
                break;

			default:
				break;
        }

        return filePrefix + invoiceId + FileExtension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EInvoiceCFDIJournalHelper construct(EInvoiceJour_MX _eInvoiceJour)
    {
        if (!_eInvoiceJour.RecId)
        {
            throw error("@SYS341183");
        }

        return new EInvoiceCFDIJournalHelper(_eInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>EInvoiceCFDIJournalHelper</c> class.
    /// </summary>
    /// <param name="_eInvoiceJour">A <c>EInvoiceJour_MX</c> record.</param>
    protected void new(EInvoiceJour_MX _eInvoiceJour)
    {
        eInvoiceJour        = _eInvoiceJour;
        eInvoiceCFDIParams  = EInvoiceCFDIParameters_MX::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowResubmission</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the electronic invoice can be resubmitted.
    /// </summary>
    /// <returns>A boolean value indicating the resubmission possibility.</returns>
    public boolean allowResubmission()
    {
        return eInvoiceCFDIParams.EnabledCFDI
            && (EInvoiceJour.CFDIStatus == EInvoiceCFDIStatus_MX::Rejected || EInvoiceJour.CFDIStatus == EInvoiceCFDIStatus_MX::CancelRejected);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the electronic invoice can be cancelled.
    /// </summary>
    /// <returns>A boolean value indicating the cancellation possibility.</returns>
    public boolean allowCancel()
    {
        return eInvoiceCFDIParams.EnabledCFDI
            && (EInvoiceJour.CFDIStatus == EInvoiceCFDIStatus_MX::Approved || EInvoiceJour.CFDIStatus == EInvoiceCFDIStatus_MX::CancelRejected);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowManualCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the electronic invoice can be manually cancelled.
    /// </summary>
    /// <returns>A boolean value indicating the manual cancellation possibility.</returns>
    public boolean allowManualCancel()
    {
        return this.allowCancel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEmailSending</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the electronic invoice can be sent as an e-mail attachment.
    /// </summary>
    /// <returns>A boolean value indicating the electronic mailing possibility.</returns>
    public boolean allowEmailSending()
    {
        return EInvoiceJour.CFDIStatus == EInvoiceCFDIStatus_MX::Approved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowPrinting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the electronic invoice can be print.
    /// </summary>
    /// <returns>A boolean value indicating the printing possibility.</returns>
    public boolean allowPrinting()
    {
        return EInvoiceJour.CFDIStatus == EInvoiceCFDIStatus_MX::Approved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowSetConfirmNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a user set confirm number for the electronic invoice.
    /// </summary>
    /// <returns>A boolean value indicating the setting possibility.</returns>
    public boolean allowSetConfirmNumber()
    {
        return EInvoiceJour.cfdiStatus != EInvoiceCFDIStatus_MX::Approved
            && EInvoiceJour.cfdiStatus != EInvoiceCFDIStatus_MX::Canceled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a user delete the electronic invoice.
    /// </summary>
    /// <returns>A boolean value indicating the deleting possibility.</returns>
    public boolean allowDelete()
    {
        return EInvoiceJour.RecId && EInvoiceJour.CFDIStatus == EInvoiceCFDIStatus_MX::Blank && EInvoiceJour.CFDIDocType==CFDIDocType_MX::Withholding;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowRetailCFDIReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a user can use Retail CFDI UUID references.
    /// </summary>
    /// <returns>A boolean value indicating the references are available.</returns>
    public boolean allowRetailCFDIReference()
    {
        return EInvoiceJour.IsReturn && EInvoiceJour.CFDIStatus == EInvoiceCFDIStatus_MX::Draft;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowXmlButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the xml viewer can be open.
    /// </summary>
    /// <returns>A boolean value indicating the XML file is available.</returns>
    internal boolean allowXmlButton()
    {
        return EInvoiceJour.XMLDoc != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowBusinessDocumentSubmissionDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the form Business document submission details can be open.
    /// </summary>
    /// <param name = "_refTableId">
    /// A reference to the table ID.
    /// </param>
    /// <param name = "_refRecId">
    /// A reference to the record ID.
    /// </param>
    /// <returns>
    /// A boolean value indicating the references are available.
    /// </returns>
    internal boolean allowBusinessDocumentSubmissionDetails(RefTableId _refTableId, RefRecId _refRecID) 
    {
        return BusinessDocumentSubmission::exists(_refTableId, _refRecID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendEInvoiceXmlToUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends the electronic invoice xml to the user.
    /// </summary>
    public void sendEInvoiceXmlToUser()
    {
        File::SendStringAsFileToUser(EInvoiceJour.XMLDoc, this.getFileNameToExportXML(eInvoiceJour));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setConfirmNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the confirmation number user specify
    /// </summary>
    void setConfirmNumber()
    {
        DialogField dlgConfirmNumber;
        Dialog dialog  = new Dialog("@MexicoCFDI:SetTheConfirmationNumber");

        boolean checkDuplicate()
        {
            EInvoiceJour_MX _eInvoiceJour;
            boolean ret = true;

            if (dlgConfirmNumber.value())
            {
                select firstonly RecId from _eInvoiceJour
                where _eInvoiceJour.cfdiConfirmNumber == dlgConfirmNumber.value()
                   && _eInvoiceJour.RecId != eInvoiceJour.RecId;

                if (_eInvoiceJour)
                {
                    ret = checkFailed(strFmt("@MexicoCFDI:SetTheConfirmationNumber_CheckFailed", "@SYS183847"));
                }
            }

            return ret;
        }

        dlgConfirmNumber = dialog.addFieldValue(extendedTypeStr(EInvoiceCFDIConfirmNumber_MX), eInvoiceJour.cfdiConfirmNumber);
        dialog.run();
        dialog.wait();

        if (dialog.closedOk() && checkDuplicate())
        {
            eInvoiceJour.cfdiConfirmNumber = dlgConfirmNumber.value();
            eInvoiceJour.write();

            CustTrans payment;
            CustSettlement settlement;

            switch (eInvoiceJour.RefTableId)
            {
                case tableNum(CustSettlement) :
                    settlement = CustSettlement::find(eInvoiceJour.RefRecId); // do not break
                case tableNum(CustTrans) :
                    payment = CustTrans::find(settlement ? settlement.TransRecId : eInvoiceJour.RefRecId, true);
                    break;
            }

            if (payment)
            {
                CustTrans_W custTrans_W = payment.custTrans_W();
                custTrans_W.cfdiConfirmNumber_MX = dlgConfirmNumber.value();
                payment.packCustTrans_W(custTrans_W);
                payment.update();

                EPaymentPost_MX ePaymentPost = EPaymentPost_MX::construct();
                [eInvoiceJour.xmlDoc, eInvoiceJour.cfdiOriginalString] = ePaymentPost.getXMLDataCon(payment, eInvoiceJour.cfdiDocType, settlement);
            }
            else
            {
                EInvoicePost_MX eInvoicePost = EInvoicePost_MX::construct(eInvoiceJour.invoiceJour());
                eInvoiceJour.xmlDoc = eInvoicePost.createXMLDoc();

                EInvoiceXMLDocReader_MX xmlEInvReader = EInvoiceXMLDocReader_MX::construct(eInvoiceJour);
                eInvoiceJour.cfdiOriginalString = xmlEInvReader.getOriginalChain();
            }

            eInvoiceJour.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrintInMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Print in national currency property
    /// </summary>
    void setPrintInMST(NoYes printInMST)
    {
        eInvoiceJour.PrintInMST = printInMST;
        eInvoiceJour.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPUETransaction</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean isPUETransaction(CustTrans _trans)
    {
        boolean isPUE;
        CustInvoiceJour custInvoiceJour;

        select firstonly RecId from custInvoiceJour
            where custInvoiceJour.InvoiceId == _trans.Invoice
                && custInvoiceJour.InvoiceDate == _trans.TransDate
                && custInvoiceJour.LedgerVoucher == _trans.Voucher
                && custInvoiceJour.InvoiceAccount == _trans.AccountNum;

        RecId invoiceJourRecId = custInvoiceJour.RecId;
        TableId invoiceJourTableId = tableNum(CustInvoiceJour);

        if (!invoiceJourRecId)
        {
            ProjInvoiceJour projInvoiceJour;

            select firstonly RecId from projInvoiceJour
                where projInvoiceJour.ProjInvoiceId == _trans.Invoice
                    && projInvoiceJour.InvoiceDate == _trans.TransDate
                    && projInvoiceJour.LedgerVoucher == _trans.Voucher
                    && projInvoiceJour.InvoiceAccount == _trans.AccountNum;

            invoiceJourRecId = ProjInvoiceJour.RecId;
            invoiceJourTableId = tableNum(ProjInvoiceJour);
        }

        if (invoiceJourRecId)
        {
            EInvoiceJour_MX eInvJour;

            select firstonly PaymMethod from eInvJour
                where eInvJour.RefTableId == invoiceJourTableId
                    && eInvJour.RefRecId == invoiceJourRecId;

            isPUE = (eInvJour.PaymMethod == 'PUE');
        }

        return isPUE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseInvoiceSerieAndFolio</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns parsed values of Serie and Folio fields of the document based on number sequence and voucher.
    /// </summary>
    /// <param name = "_numSeqFormat">
    /// Number sequence format.
    /// </param>
    /// <param name = "_voucher">
    /// Voucher.
    /// </param>
    /// <returns>
    /// Parsed values of Serie and Folio.
    /// </returns>
    public static container parseInvoiceSerieAndFolio(NumberSequenceFormat _numSeqFormat, str _voucher)
    {
        str serie = _voucher;
        str folio;

        if (_numSeqFormat)
        {
            Integer numberStartPos = strFind(_numSeqFormat, NumberSeq::formattingChars(), 1, strLen(_numSeqFormat));
            if (numberStartPos)
            {
                serie = subStr(_voucher, 1, numberStartPos - 1);
                folio = strFmt('%1', NumberSeq::numRemoveFormat(_voucher, _numSeqFormat));
            }
        }

        return [serie, folio];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCancelDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates dialog form for cancelation setup.
    /// </summary>
    /// <returns>Dialog form.</returns>
    internal Dialog createCancelDialog()
    {
        Dialog dialogCancel = new Dialog("@Mexico:EInvoice_CFDIJournalForm_CancelCFDIButton");
        dialogCancelReason = dialogCancel.addField(enumstr(EInvoiceCFDICancelReason_MX));
        dialogCancelReason.registerOverrideMethod(methodStr(FormComboBoxControl, enter), methodStr(EInvoiceCFDIJournalHelper, enterCancelReason), this);
        dialogCancelReason.registerOverrideMethod(methodStr(FormComboBoxControl, modified), methodStr(EInvoiceCFDIJournalHelper, modifiedCancelReason), this);
        dialogCancelReason.label("@MexicoCFDI:CFDICancelReason");

        substitutionDocument = dialogCancel.addField(extendedTypeStr(EInvoiceCFDIUUID_MX));
        substitutionDocument.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(EInvoiceCFDIJournalHelper, lookupSubstitution), this);
        substitutionDocument.label("@MexicoCFDI:SubstitutionDoc");

        return dialogCancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupSubstitution</Name>
				<Source><![CDATA[
    private void lookupSubstitution(FormControl _formControl)
    {
        Query query = new Query();

        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(EInvoiceJour_MX));
        queryBuildDataSource.addRange(fieldNum(EInvoiceJour_MX, CFDIUUID)).value(SysQuery::valueNot(''));

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(EInvoiceJour_MX), _formControl);
        sysTableLookup.addLookupfield(fieldNum(EInvoiceJour_MX, CFDIUUID), true);
        sysTableLookup.addLookupfield(fieldNum(EInvoiceJour_MX, InvoiceSeries));
        sysTableLookup.addLookupfield(fieldNum(EInvoiceJour_MX, InvoiceFolio));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enterCancelReason</Name>
				<Source><![CDATA[
    private void enterCancelReason(FormControl _formControl)
    {
        FormComboBoxControl control = _formControl;
        control.delete(enum2Str(EInvoiceCFDICancelReason_MX::Blank));
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedCancelReason</Name>
				<Source><![CDATA[
    private boolean modifiedCancelReason(FormComboBoxControl _control)
    {
        boolean ret = _control.modified();

        substitutionDocument.enabled(dialogCancelReason.value() == EInvoiceCFDICancelReason_MX::Substitution);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCancelReason</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns reason for document cancelation specified through the cancelation dialog.
    /// </summary>
    /// <returns>Cancelation reason.</returns>
    internal EInvoiceCFDICancelReason_MX getCancelReason()
    {
        return dialogCancelReason.value();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubstitutionDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns substitution document specified through the cancelation dialog.
    /// </summary>
    /// <returns>UUID of CFDI document.</returns>
    internal EInvoiceCFDIUUID_MX getSubstitutionDocument()
    {
        return substitutionDocument.value();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateCancelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates cancelation document for the specified electronic invoice with specified parameters.
    /// </summary>
    /// <param name = "_eInvoiceJourDS">Datasource that corresponds to E-invoice document to be canceled.</param>
    internal void generateCancelation(FormDataSource _eInvoiceJourDS)
    {
        Dialog dialog = this.createCancelDialog();
        EInvoiceJour_MX eInvoiceJourLoc;

        if (_eInvoiceJourDS && dialog.run())
        {
            if (this.getCancelReason() != EInvoiceCFDICancelReason_MX::Substitution
                || this.validateSubstitution(_eInvoiceJourDS))
            {
                for (Common common = _eInvoiceJourDS.getFirst(true) ? _eInvoiceJourDS.getFirst(true) : _eInvoiceJourDS.cursor();
                common;
                common = _eInvoiceJourDS.getNext())
                {
                    eInvoiceJourLoc = common as EInvoiceJour_MX;

                    if (eInvoiceJourLoc)
                    {
                        ttsbegin;
                        eInvoiceJourLoc.CFDICancelReason = this.getCancelReason();
                        eInvoiceJourLoc.CancelSubstitution = this.getSubstitutionDocument();
                        eInvoiceJourLoc.doUpdate();
                        ttscommit;

                        EInvoiceDocState_MX::construct(eInvoiceJourLoc).cancelEInvoice();
                    }
                }
                _eInvoiceJourDS.research(true);
            }
        }
        else
        {
            warning("@GEE7205");
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSubstitution</Name>
				<Source><![CDATA[
    private boolean validateSubstitution(FormDataSource _eInvoiceJourDS)
    {
        boolean ret = true;

        if (_eInvoiceJourDS.recordsMarked().lastIndex() > 1)
        {
            ret = checkFailed("@MexicoCFDI:SubstitutionCancelMultipleRecords_warning");
        }

        if (this.getSubstitutionDocument() == '')
        {
            ret = checkFailed("@MexicoCFDI:CFDICancelSubstitutionError_NoSubstitutor");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RIFTaxpayersWithholdingType</Name>
				<Source><![CDATA[
    internal static str RIFTaxpayersWithholdingType()
    {
        return '28';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>