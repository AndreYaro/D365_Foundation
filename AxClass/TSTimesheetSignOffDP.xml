<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TsTimesheetSignOffDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TSTimesheetSignOffDP</c> class is the report data provider class for the
///    <c>TSTimesheetSignOff</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(TSTimesheetSignOff)),
    SRSReportParameterAttribute(classStr(TSTimesheetSignOffDPContract))
]
class TsTimesheetSignOffDP  extends SRSReportDataProviderBase
{
    real                        totalHours, billHours;
    TSTimesheetNbr              timesheetNbr;

    TmpTSTimesheetSignOff       tmpTSTimesheetSignOff;
    TSTimesheetTable            tsTimesheetTable;
    TSTimesheetSummaryLine      tsSummaryLine;

    QueryRun                    queryRun;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTmpTSTimesheetSignOff</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets data from the <c>TmpTSTimesheetSignOff</c> table.
    /// </summary>
    /// <returns>
    ///    Data from the <c>TmpTSTimesheetSignOff</c> table.
    /// </returns>
    [SRSReportDataSetAttribute('TmpTSTimesheetSignOff')]
    public TmpTSTimesheetSignOff getTmpTSTimesheetSignOff()
    {
        select * from tmpTSTimesheetSignOff;
        return tmpTSTimesheetSignOff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTSTimesheetSignOff</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts values into the temporary table.
    /// </summary>
    /// <param name="_tsTimesheetTable">
    ///    A <c>TSTimesheetTable</c> table buffer.
    /// </param>
    /// <param name="_tsSummaryLine">
    ///    A <c>TSTimesheetSummaryLine</c> view.
    /// </param>
    private void insertTmpTSTimesheetSignOff(TSTimesheetTable _tsTimesheetTable, TSTimesheetSummaryLine _tsSummaryLine)
    {
        tmpTSTimesheetSignOff.clear();

        this.initTmpTSTimesheetSignOff(_tsTimesheetTable, _tsSummaryLine);

        tmpTSTimesheetSignOff.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpTSTimesheetSignOff</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the <c>TmpTSTimesheetSignOff</c> table fields.
    /// </summary>
    /// <param name = "_tsTimesheetTable">
    ///     An instance of <c>TSTimesheetTable</c> table buffer.
    /// </param>
    /// <param name = "_tsSummaryLine">
    ///     An instance of <c>TSTimesheetSummaryLine</c> table buffer.
    /// </param>
    protected void initTmpTSTimesheetSignOff(TSTimesheetTable _tsTimesheetTable, TSTimesheetSummaryLine _tsSummaryLine)
    {
        // header
        tmpTSTimesheetSignOff.TimesheetNbr = _tsTimesheetTable.TimesheetNbr;
        tmpTSTimesheetSignOff.PersonnelNumber = ResourceFacade::getPersonnelId(_tsTimesheetTable.Resource);
        tmpTSTimesheetSignOff.EmplName =  _tsTimesheetTable.resourceName();
        tmpTSTimesheetSignOff.PeriodFrom = _tsTimesheetTable.PeriodFrom;
        tmpTSTimesheetSignOff.PeriodTo = _tsTimesheetTable.PeriodTo;
        tmpTSTimesheetSignOff.ApprovalStatus = _tsTimesheetTable.ApprovalStatus;
        tmpTSTimesheetSignOff.TotalHours = totalHours;
        tmpTSTimesheetSignOff.BillHours = billHours;

        // week day abbreviations
        int startOfWeek = ProjPeriodTable::find(ResourceFacade::getPeriodId(_tsTimesheetTable.Resource)).WeekStart;

        Array tsWeekDayAbbreviations = TSPeriods::getSummaryWeekDayAbbrevations(startOfWeek);
        tmpTSTimesheetSignOff.Day1 = tsWeekDayAbbreviations.value(1);
        tmpTSTimesheetSignOff.Day2 = tsWeekDayAbbreviations.value(2);
        tmpTSTimesheetSignOff.Day3 = tsWeekDayAbbreviations.value(3);
        tmpTSTimesheetSignOff.Day4 = tsWeekDayAbbreviations.value(4);
        tmpTSTimesheetSignOff.Day5 = tsWeekDayAbbreviations.value(5);
        tmpTSTimesheetSignOff.Day6 = tsWeekDayAbbreviations.value(6);
        tmpTSTimesheetSignOff.Day7 = tsWeekDayAbbreviations.value(7);

        // line details

        tmpTSTimesheetSignOff.ProjectDataAreaId = _tsSummaryLine.ProjectDataAreaId;

        changecompany(_tsSummaryLine.ProjectDataAreaId)
        {
            // line details
            ProjTable projTable = ProjTable::find(_tsSummaryLine.ProjId);

            tmpTSTimesheetSignOff.LineNum = _tsSummaryLine.LineNum;
            tmpTSTimesheetSignOff.CustName = CustTable::find(projTable.CustAccount).name();
            tmpTSTimesheetSignOff.ProjName = projTable.Name;
            tmpTSTimesheetSignOff.ProjId = _tsSummaryLine.ProjId;
            tmpTSTimesheetSignOff.CategoryName = _tsSummaryLine.CategoryId;
            tmpTSTimesheetSignOff.LinePropertyName = ProjLineProperty::find(_tsSummaryLine.LinePropertyId).Name;
            tmpTSTimesheetSignOff.ActivityNumber = _tsSummaryLine.ActivityNumber;

            if (_tsSummaryLine.ActivityNumber)
            {
                smmActivities activities = smmActivities::find(_tsSummaryLine.ActivityNumber);
                tmpTSTimesheetSignOff.ActivityTxt = strFmt('%1 - %2', activities.ActivityNumber, activities.Purpose);
            }

            tmpTSTimesheetSignOff.LinePropertyId = _tsSummaryLine.LinePropertyId;

            // comment details
            tmpTSTimesheetSignOff.ComProjId = _tsSummaryLine.ProjId;
            tmpTSTimesheetSignOff.ComCategoryName = ProjCategory::find(_tsSummaryLine.CategoryId).Name;
            tmpTSTimesheetSignOff.ComComment = _tsSummaryLine.ExternalComments;
        }

        tmpTSTimesheetSignOff.DayFrom = _tsSummaryLine.DayFrom;
        tmpTSTimesheetSignOff.DayTo = _tsSummaryLine.DayTo;
        tmpTSTimesheetSignOff.Hours = _tsSummaryLine.Hours;
        tmpTSTimesheetSignOff.TotalHoursLine = _tsSummaryLine.Hours[1] +
                                                _tsSummaryLine.Hours[2] +
                                                _tsSummaryLine.Hours[3] +
                                                _tsSummaryLine.Hours[4] +
                                                _tsSummaryLine.Hours[5] +
                                                _tsSummaryLine.Hours[6] +
                                                _tsSummaryLine.Hours[7];
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. It will be called by SSRS at
    ///    runtime and computes the data and populates the data tables that will be returned to the SSRS.
    /// </remarks>
    public void processReport()
    {
        TSTimesheetNbr                  old_TimeCard, timesheetNbrParam;
        TSTimesheetSignOffDPContract    dataContract;
        QueryBuildDataSource            queryBuildDataSource;
        QueryBuildRange                 queryBuildRange;
        Query                           query;

        query = this.parmQuery();

        // Get the parameters passed from runtime.
        dataContract = this.parmDataContract();
        timesheetNbrParam = dataContract.parmTimesheetNbr();

        // Check if the value has been set by the run time
        if (timesheetNbrParam)
        {
            // Add parameters to the query.
            queryBuildDataSource = query.dataSourceTable(tableNum(TSTimesheetSummaryLine));
            queryBuildRange = queryBuildDataSource.findRange(fieldNum(TSTimesheetSummaryLine, TimesheetNbr));
            if (!queryBuildRange)
            {
                queryBuildRange = queryBuildDataSource.addRange(fieldNum(TSTimesheetSummaryLine, TimesheetNbr));
            }

            // If timesheet number has not been set, then use the parameter value to set it.
            if (!queryBuildRange.value())
            {
                queryBuildRange.value(timesheetNbrParam);
            }
        }
        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            if (SysReportRun::changed(queryRun,tableNum(TSTimesheetTable)))
            {
                tsTimesheetTable = queryRun.get(tableNum(TSTimesheetTable));
            }
            if (SysReportRun::changed(queryRun,tableNum(TSTimesheetSummaryLine)))
            {
                tsSummaryLine = queryRun.get(tableNum(TSTimesheetSummaryLine));
            }

            if (tsTimesheetTable.TimesheetNbr != old_TimeCard)
            {
                totalHours = 0.00;
                billHours = 0.00;
            }

            totalHours = totalHours + (tsSummaryLine.Hours[1] +
                            tsSummaryLine.Hours[2] +
                            tsSummaryLine.Hours[3] +
                            tsSummaryLine.Hours[4] +
                            tsSummaryLine.Hours[5] +
                            tsSummaryLine.Hours[6] +
                            tsSummaryLine.Hours[7]);

            if (tsSummaryLine.isBillable())
            {
                billHours = billHours + (tsSummaryLine.Hours[1] +
                            tsSummaryLine.Hours[2] +
                            tsSummaryLine.Hours[3] +
                            tsSummaryLine.Hours[4] +
                            tsSummaryLine.Hours[5] +
                            tsSummaryLine.Hours[6] +
                            tsSummaryLine.Hours[7]);
            }
            this.insertTmpTSTimesheetSignOff(tsTimesheetTable, tsSummaryLine);
            old_TimeCard = tsTimesheetTable.TimesheetNbr;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>