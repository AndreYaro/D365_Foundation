<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntrastatTransferIT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Transfers intrastat in Italy country context.
/// </summary>
#ISOCountryRegionCodes
[IntrastatCountryRegion(#isoIT)]
public class IntrastatTransferIT extends IntrastatTransfer implements BatchRetryable
{
    // These fields serve as a caching mechanism (they are set in the constructor and never modified)
    CompanyInfo     companyInfo;
    CurrencyCode    companyStandardCurrency;

    container       countryRegionsWithoutCurrencies;
    private LogisticsPostalAddress importDeliveryPostalAddress;
    private Set countryRegionsWithoutCurrencySet;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>vendPackingSlipInvoiceId</Name>
				<Source><![CDATA[
    public InvoiceId vendPackingSlipInvoiceId(VendPackingSlipTrans _vendPackingSlipTrans)
    {   
        return super(_vendPackingSlipTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveTypeOfDraft</Name>
				<Source><![CDATA[
    private static TypeOfDraft retrieveTypeOfDraft(ModuleInventCustVend _moduleInventCustVend, PaymMode _paymMode)
    {
        switch (_moduleInventCustVend)
        {
            case ModuleInventCustVend::Cust:
                return CustPaymModeTable::find(_paymMode).TypeOfDraft;
            case ModuleInventCustVend::Vend:
            case ModuleInventCustVend::Invent:
                return VendPaymModeTable::find(_paymMode).TypeOfDraft;
            default:
                EventHandlerResult result = new EventHandlerResult();
                IntrastatTransferIT::retrieveTypeOfDraftDelegate(_moduleInventCustVend, _paymMode, result);
                if (result.hasResult())
                {
                    return result.result();
                }
        }

        return TypeOfDraft::NoDraft;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveTypeOfDraftDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the type of draft for the <c>ModuleInventCustVend</c>.
    /// </summary>
    /// <param name = "_moduleInventCustVend">A <c>ModuleInventCustVend</c> value.</param>
    /// <param name = "_paymMode">A <c>PaymMode</c></param>
    /// <param name = "_result"></param>
    static delegate void retrieveTypeOfDraftDelegate(ModuleInventCustVend _moduleInventCustVend, 
        PaymMode _paymMode,
        EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPaymentMethod</Name>
				<Source><![CDATA[
    public static IntrastatPaymentMethod_IT calcPaymentMethod(ModuleInventCustVend _moduleCustVend, PaymMode _paymMode)
    {
        TypeOfDraft typeOfDraft = IntrastatTransferIT::retrieveTypeOfDraft(_moduleCustVend, _paymMode);

        switch (typeOfDraft)
        {
            case TypeOfDraft::Acceptance:
            case TypeOfDraft::BankAcceptance:
            case TypeOfDraft::NoAcceptance:
                return IntrastatPaymentMethod_IT::BillOfExchange;

            case TypeOfDraft::Promissory:
                return IntrastatPaymentMethod_IT::PromissoryNote;

            default:
                return IntrastatPaymentMethod_IT::Other;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS323";
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportToBeIncluded</Name>
				<Source><![CDATA[
    public boolean exportToBeIncluded(
        LogisticsAddressCountryRegionId _dlvcountry,
        RefNum                          _refNum                     = RefNum::SalesOrder,
        LogisticsAddressCountryRegionId _countryRegionOfShipment    = '',
        LogisticsAddressCountryRegionId _invoiceCountryRegion       = '',
        TradeLineDlvTypeId              _dlvType                    = TradeLineDlvType::None,
        LogisticsAddressCountryRegionId   _trnasportDocumentCountryRegion = '',
        IntrastatOrderType                _orderType = IntrastatOrderType::Order)
    {
        if (_refNum                         &&
            (_refNum != RefNum::SalesOrder) &&
            (_refNum != RefNum::Cust))
        {
            return false;
        }

        if (!this.isCountryRegionStateInEU(deliveryPostalAddress) &&
            !this.isSpecialDomesticCache(_dlvcountry))
        {
            return false;
        }

        // delivering to another EU country/region means that we should report
        if (_dlvcountry == primaryPostalAddressForCurrentCompany.CountryRegionId)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>importToBeIncluded</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the purchase order should be included for Instrastat.
    /// </summary>
    /// <param name="_vendAccount">
    ///    The account number of the vendor.
    /// </param>
    /// <param name="_countryRegion">
    ///    The delivery location country or region.
    /// </param>
    /// <param name="_trnasportDocumentCountryRegion">
    ///    The country or region of <c>TransportationDocument</c>.
    /// </param>
    /// <returns>
    ///    true if the purchase order is to be included for Intrastat; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    If the country or region of the vendor is an EU country or region and the delivery country or
    ///    region is either Italy or is in EU, the purchase order is to be included for Intrastat. San Marino
    ///    purchase orders should not be considered for Intrastat reporting.
    /// </remarks>

    public boolean importToBeIncluded(
        VendAccount                       _vendAccount,
        LogisticsAddressCountryRegionId   _countryRegion,
        LogisticsAddressCountryRegionId   _trnasportDocumentCountryRegion = '')
    {
        return this.isCountryRegionStateInEU(this.primaryPostalAddress(this.getVendTable(_vendAccount).Party))
            && (IntrastatCountryRegionParameters::isCountryRegionStateDomestic(importDeliveryPostalAddress)
                || this.isCountryRegionStateInEU(importDeliveryPostalAddress));
    }

]]></Source>
			</Method>
			<Method>
				<Name>alignSigns</Name>
				<Source><![CDATA[
    protected void alignSigns(Intrastat _intrastat, real _commonSign)
    {
        super(_intrastat, _commonSign);

        _intrastat.AmountCur = _commonSign * _intrastat.AmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCustInvoiceJourAccountNum</Name>
				<Source><![CDATA[
    protected CustAccount calcCustInvoiceJourAccountNum(CustInvoiceJour _custInvoiceJour)
    {
        // In Italy InvoiceAccount is used instead of OrderAccount because Italian intrastat contains both statistical and tax information
        return _custInvoiceJour.InvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCustPckSlipJourAccountNum</Name>
				<Source><![CDATA[
    protected CustAccount calcCustPckSlipJourAccountNum(CustPackingSlipJour _custPackingSlipJour)
    {
        // In Italy InvoiceAccount is used instead of OrderAccount because Italian intrastat contains both statistical and tax information
        return _custPackingSlipJour.InvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcProjInvoiceJourAccountNum</Name>
				<Source><![CDATA[
    protected CustAccount calcProjInvoiceJourAccountNum(ProjInvoiceJour _projInvoiceJour)
    {
        // In Italy InvoiceAccount is used instead of OrderAccount because Italian intrastat contains both statistical and tax information
        return _projInvoiceJour.InvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcVendInvoiceJourAccountNum</Name>
				<Source><![CDATA[
    protected CustAccount calcVendInvoiceJourAccountNum(VendInvoiceJour _vendInvoiceJour)
    {
        // In Italy InvoiceAccount is used instead of OrderAccount because Italian intrastat contains both statistical and tax information
        return _vendInvoiceJour.InvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcVendPckSlipJourAccountNum</Name>
				<Source><![CDATA[
    protected VendAccount calcVendPckSlipJourAccountNum(VendPackingSlipJour _vendPackingSlipJour)
    {
        // In Italy InvoiceAccount is used instead of OrderAccount because Italian intrastat contains both statistical and tax information
        return _vendPackingSlipJour.InvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcFreeCustInvoiceJourAccountNum</Name>
				<Source><![CDATA[
    protected CustAccount calcFreeCustInvoiceJourAccountNum(CustInvoiceJour _custInvoiceJour)
    {
        // In Italy InvoiceAccount is used instead of OrderAccount because Italian intrastat contains both statistical and tax information
        return _custInvoiceJour.InvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportToBeIncludedCustInvoiceTrans</Name>
				<Source><![CDATA[
    protected boolean exportToBeIncludedCustInvoiceTrans(CustInvoiceJour _custInvoiceJour, CustInvoiceTrans _custInvoiceTrans)
    {
        return super(_custInvoiceJour, _custInvoiceTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportToBeIncludedCustPckSlipTrans</Name>
				<Source><![CDATA[
    protected boolean exportToBeIncludedCustPckSlipTrans(CustPackingSlipJour _custPackingSlipJour, CustPackingSlipTrans _custPackingSlipTrans)
    {
        return super(_custPackingSlipJour, _custPackingSlipTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>importToBeIncludedVendInvoiceTrans</Name>
				<Source><![CDATA[
    protected boolean importToBeIncludedVendInvoiceTrans(VendInvoiceJour _vendInvoiceJour, VendInvoiceTrans _vendInvoiceTrans)
    {
        if (_vendInvoiceTrans.DestCountryRegionId)
        {
            importDeliveryPostalAddress.CountryRegionId = _vendInvoiceTrans.DestCountryRegionId;
            importDeliveryPostalAddress.State = _vendInvoiceTrans.DestState;
        }
        else
        {
            importDeliveryPostalAddress.CountryRegionId = _vendInvoiceJour.CountryRegionId;
            importDeliveryPostalAddress.State = _vendInvoiceJour.State;
        }

        return this.importToBeIncluded(_vendInvoiceJour.OrderAccount, _vendInvoiceJour.CountryRegionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>importToBeIncludedVendPckSlipTrans</Name>
				<Source><![CDATA[
    protected boolean importToBeIncludedVendPckSlipTrans(VendPackingSlipJour _vendPackingSlipJour, VendPackingSlipTrans _vendPackingSlipTrans)
    {
        importDeliveryPostalAddress = this.postalAddress(_vendPackingSlipJour.DeliveryPostalAddress);
        return this.importToBeIncluded(_vendPackingSlipJour.OrderAccount, importDeliveryPostalAddress.CountryRegionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDirectionAndOrderType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the direction and order type of an <c>Intrastat</c> transaction.
    /// </summary>
    /// <param name="_moduleCustVend">
    /// The module of the transaction.
    /// </param>
    /// <param name="_qty">
    /// Quantity of the transaction.
    /// </param>
    /// <param name="_intrastat">
    /// The <c>Intrastat</c> transaction to initialize.
    /// </param>
    /// <param name="_transactionCode">
    /// The <c>TransactionCode</c> value of the transaction.
    /// </param>
    /// <param name="_isReturnItem">
    /// Indicates that order type is return order; optional.
    /// </param>
    /// <remarks>
    /// For Italy we don't need to execute the common Intrastat logic for return orders.
    /// They should be processed like the regular ones.
    /// </remarks>
    protected void initDirectionAndOrderType(ModuleCustVend             _moduleCustVend,
                                             Qty                        _qty,
                                             Intrastat                  _intrastat,
                                             IntrastatTransactionCodeId _transactionCode,
                                             boolean                    _isReturnItem = false)
    {
        super(_moduleCustVend, _qty, _intrastat, _transactionCode, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromCustInvoiceTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromCustInvoiceTrans(CustInvoiceJour _custInvoiceJour,
                                                          CustInvoiceTrans _custInvoiceTrans,
                                                          CustInvoiceJour_Intrastat _custInvoiceJour_Intrastat = null,
                                                          CustInvoiceTrans_Intrastat _custInvoiceTrans_Intrastat = null)
    {
        Intrastat intrastat = super(_custInvoiceJour, _custInvoiceTrans, _custInvoiceJour_Intrastat, _custInvoiceTrans_Intrastat);

        if (intrastatParm.IntrastatDateSource_IT == IntrastatDateSource_IT::DocumentDate && _custInvoiceJour.DocumentDate)
        {
            intrastat.TransDate = _custInvoiceJour.DocumentDate;
        }

        intrastat.DlvMode          = _custInvoiceJour.DlvMode;
        intrastat.ItemType_IT      = intrastat.calcItemType_IT();
        intrastat.PaymentMethod_IT = IntrastatTransferIT::calcPaymentMethod(ModuleInventCustVend::Cust, _custInvoiceJour.paymMode());
        intrastat.OrigCounty       = intrastat.calcOrigCounty();

        intrastat.County           = this.calcCounty(intrastat, _custInvoiceTrans.InventDimId);

        if (!intrastat.County)
        {
            intrastat.County = primaryPostalAddressForCurrentCompany.County;
        }

        if (FeatureStateProvider::isFeatureEnabled(IntrastatTransferPartnerVATIDFeature::instance()))
        {
            intrastat.VATNum = _custInvoiceJour.VATNum;
        }

        this.updateTransactionCurrencyAmount(intrastat);

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromCustPckSlpTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromCustPckSlpTrans(CustPackingSlipJour _custPackingSlipJour,
                                                         CustPackingSlipTrans _custPackingSlipTrans,
                                                         CustPackingSlipJour_Intrastat _custPackingSlipJour_Intrastat = null,
                                                         CustPackingSlipTrans_Intrastat _custPackingSlipTrans_Intrastat = null)
    {
        Intrastat intrastat = super(_custPackingSlipJour, _custPackingSlipTrans, _custPackingSlipJour_Intrastat, _custPackingSlipTrans_Intrastat);

        intrastat.DlvMode          = _custPackingSlipJour.DlvMode;
        intrastat.ItemType_IT      = intrastat.calcItemType_IT();
        intrastat.OrigCounty       = intrastat.calcOrigCounty();

        intrastat.County           = this.calcCounty(intrastat, _custPackingSlipTrans.InventDimId);

        if (!intrastat.County)
        {
            intrastat.County = primaryPostalAddressForCurrentCompany.County;
        }

        if (FeatureStateProvider::isFeatureEnabled(IntrastatTransferPartnerVATIDFeature::instance()))
        {
            intrastat.VATNum = this.getCustTable(intrastat.AccountNum).getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, _custPackingSlipJour.DeliveryDate);
        }

        this.updateTransactionCurrencyAmount(intrastat);

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromFreeCustInvoiceTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromFreeCustInvoiceTrans(CustInvoiceJour _custInvoiceJour, CustInvoiceTrans _custInvoiceTrans)
    {
        Intrastat intrastat = super(_custInvoiceJour, _custInvoiceTrans);

        if (intrastatParm.IntrastatDateSource_IT == IntrastatDateSource_IT::DocumentDate && _custInvoiceJour.DocumentDate)
        {
            intrastat.TransDate = _custInvoiceJour.DocumentDate;
        }

        intrastat.DlvMode          = _custInvoiceJour.DlvMode;
        intrastat.ItemType_IT      = intrastat.calcItemType_IT();
        intrastat.PaymentMethod_IT = IntrastatTransferIT::calcPaymentMethod(ModuleInventCustVend::Cust, _custInvoiceJour.paymMode());
        intrastat.OrigCounty       = intrastat.calcOrigCounty();

        if (FeatureStateProvider::isFeatureEnabled(IntrastatTransferPartnerVATIDFeature::instance()))
        {
            intrastat.VATNum = _custInvoiceJour.VATNum;
        }

        this.updateTransactionCurrencyAmount(intrastat);

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromInventTransferJour</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromInventTransferJour(
        IntrastatDirection      _direction,
        InventTransferJour      _inventTransferJour,
        InventTransferJourLine  _inventTransferJourLine)
    {
        Intrastat intrastat = super(_direction, _inventTransferJour, _inventTransferJourLine);
        AccountNum vendAccount = this.getVendAccountFromInventLocationCache(_direction == IntrastatDirection::Export ? _inventTransferJour.InventLocationIdFrom : _inventTransferJour.InventLocationIdTo);
        PaymMode paymMode = this.getVendTable(vendAccount).PaymMode;

        intrastat.CurrencyCode     = companyStandardCurrency;
        intrastat.DlvMode          = _inventTransferJour.DlvModeId;
        intrastat.ItemType_IT      = intrastat.calcItemType_IT();
        intrastat.PaymentMethod_IT = IntrastatTransferIT::calcPaymentMethod(ModuleInventCustVend::Vend, paymMode);
        intrastat.OrigCounty       = intrastat.calcOrigCounty();

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromProjInvoiceItem</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromProjInvoiceItem(ProjInvoiceJour _projInvoiceJour, ProjInvoiceItem _projInvoiceItem)
    {
        Intrastat intrastat = super(_projInvoiceJour, _projInvoiceItem);

        CustTrans custTrans = CustTrans::findVoucherDate(_projInvoiceJour.LedgerVoucher, _projInvoiceJour.InvoiceDate);

        intrastat.PaymentMethod_IT = IntrastatTransferIT::calcPaymentMethod(ModuleInventCustVend::Cust, custTrans.PaymMode);

        intrastat.DlvMode          = _projInvoiceJour.DlvMode;
        intrastat.ItemType_IT      = intrastat.calcItemType_IT();
        intrastat.OrigCounty       = intrastat.calcOrigCounty();

        intrastat.State            = this.getInventTable(intrastat.ItemId).OrigStateId;
        if (!intrastat.State)
        {
            intrastat.State = primaryPostalAddressForCurrentCompany.County;
        }

        if (FeatureStateProvider::isFeatureEnabled(IntrastatTransferPartnerVATIDFeature::instance()))
        {
            intrastat.VATNum = this.getCustTable(intrastat.AccountNum).getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, _projInvoiceJour.InvoiceDate);
        }

        this.updateTransactionCurrencyAmount(intrastat);

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromVendInvoiceIntrastat</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromVendInvoiceIntrastat(VendInvoiceJour _vendInvoiceJour, VendInvoiceIntrastat _vendInvoiceIntrastat)
    {
        Intrastat intrastat = super(_vendInvoiceJour, _vendInvoiceIntrastat);
        VendTrans vendTrans;

        if (intrastatParm.IntrastatDateSource_IT == IntrastatDateSource_IT::DocumentDate && _vendInvoiceJour.DocumentDate)
        {
            intrastat.TransDate = _vendInvoiceJour.DocumentDate;
        }

        intrastat.DlvMode          = _vendInvoiceJour.DlvMode;
        intrastat.ItemType_IT      = intrastat.calcItemType_IT();

        vendTrans = VendTrans::findAccountVoucherDate(_vendInvoiceJour.InvoiceAccount, _vendInvoiceJour.LedgerVoucher, _vendInvoiceJour.InvoiceDate);
        intrastat.PaymentMethod_IT = IntrastatTransferIT::calcPaymentMethod(ModuleInventCustVend::Vend, vendTrans.PaymMode);
        intrastat.OrigCounty       = intrastat.calcOrigCounty();

        if (FeatureStateProvider::isFeatureEnabled(IntrastatTransferPartnerVATIDFeature::instance()))
        {
            intrastat.VATNum = _vendInvoiceJour.VATNum;
        }

        this.updateTransactionCurrencyAmount(intrastat);

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromVendInvoiceTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromVendInvoiceTrans(VendInvoiceJour _vendInvoiceJour,
                                                          VendInvoiceTrans _vendInvoiceTrans,
                                                          VendInvoiceJour_Intrastat _vendInvoiceJour_Intrastat = null,
                                                          VendInvoiceTrans_Intrastat _vendInvoiceTrans_Intrastat = null)
    {
        Intrastat intrastat;
        VendTrans vendTrans;
        VendPackingSlipJour vendPackingSlipJour;

        intrastat = super(_vendInvoiceJour, _vendInvoiceTrans, _vendInvoiceJour_Intrastat, _vendInvoiceTrans_Intrastat);

        if (intrastatParm.IntrastatDateSource_IT == IntrastatDateSource_IT::DocumentDate && _vendInvoiceJour.DocumentDate)
        {
            intrastat.TransDate = _vendInvoiceJour.DocumentDate;
        }

        intrastat.DlvMode          = _vendInvoiceJour.DlvMode;
        intrastat.ItemType_IT      = intrastat.calcItemType_IT();

        vendTrans = VendTrans::findAccountVoucherDate(_vendInvoiceJour.InvoiceAccount, _vendInvoiceJour.LedgerVoucher, _vendInvoiceJour.InvoiceDate);
        intrastat.PaymentMethod_IT = IntrastatTransferIT::calcPaymentMethod(ModuleInventCustVend::Vend, vendTrans.PaymMode);

        intrastat.OrigCounty       = intrastat.calcOrigCounty();

        intrastat.County           = this.calcCounty(intrastat, _vendInvoiceTrans.InventDimId);

        if (!intrastat.County)
        {
            select firstonly DeliveryPostalAddress from vendPackingSlipJour
                where vendPackingSlipJour.PurchId == _vendInvoiceTrans.PurchID;

            intrastat.County = this.postalAddress(vendPackingSlipJour.DeliveryPostalAddress).County;

            if (!intrastat.County)
            {
                intrastat.County = primaryPostalAddressForCurrentCompany.County;
            }
        }

        if (FeatureStateProvider::isFeatureEnabled(IntrastatTransferPartnerVATIDFeature::instance()))
        {
            intrastat.VATNum = _vendInvoiceJour.VATNum;
        }

        this.updateTransactionCurrencyAmount(intrastat);

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromVendPckSlpTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromVendPckSlpTrans(VendPackingSlipJour _vendPackingSlipJour,
                                                         VendPackingSlipTrans _vendPackingSlipTrans,
                                                         VendPackingSlipJour_Intrastat vendPackingSlipJour_Intrastat = null,
                                                         VendPackingSlipTrans_Intrastat vendPackingSlipTrans_Intrastat = null)
    {
        Intrastat intrastat;

        intrastat = super(_vendPackingSlipJour, _vendPackingSlipTrans, vendPackingSlipJour_Intrastat, vendPackingSlipTrans_Intrastat);

        intrastat.DlvMode          = _vendPackingSlipJour.DlvMode;
        intrastat.ItemType_IT      = intrastat.calcItemType_IT();

        intrastat.OrigCounty       = intrastat.calcOrigCounty();

        intrastat.County           = this.calcCounty(intrastat, _vendPackingSlipTrans.InventDimId);

        if (!intrastat.County)
        {
            intrastat.County = primaryPostalAddressForCurrentCompany.County;
        }

        if (FeatureStateProvider::isFeatureEnabled(IntrastatTransferPartnerVATIDFeature::instance()))
        {
            intrastat.VATNum = this.getVendTable(intrastat.AccountNum).getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, _vendPackingSlipJour.DocumentDate);
        }

        this.updateTransactionCurrencyAmount(intrastat);

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        companyInfo = CompanyInfo::find();
        companyStandardCurrency = CompanyInfoHelper::standardCurrency();
        countryRegionsWithoutCurrencySet = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransactionCurrencyAmount</Name>
				<Source><![CDATA[
	/// <summary>
    /// Updates the currency amount for an Intrastat record.
    /// </summary>
    /// <param name = "_intrastat">An Intrastat record.</param>
    protected void updateTransactionCurrencyAmount(Intrastat _intrastat)
    {
        int countryRegionsWithoutCurrency = countryRegionsWithoutCurrencySet.elements();

        CurrencyCode transactionCurrencyCode = _intrastat.CurrencyCode;
        IntrastatTransferIT::updateIntrastatTransactionCurrencyAmount(_intrastat, companyStandardCurrency, countryRegionsWithoutCurrencySet);
        
        // Update the countryRegionsWithoutCurrencies if it was changed by the IntrastatTransferIT::updateIntrastatTransactionCurrencyAmount method for backward compatibility.
        if (countryRegionsWithoutCurrencySet.elements() != countryRegionsWithoutCurrency)
        {
            countryRegionsWithoutCurrencies = conNull();

            SetEnumerator setEnumerator = countryRegionsWithoutCurrencySet.getEnumerator();
            while (setEnumerator.moveNext())
            {
                countryRegionsWithoutCurrencies += setEnumerator.current();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCounty</Name>
				<Source><![CDATA[
	/// <summary>
    /// Calculates county based on either an Intrastat record or an inventory dimension value.
    /// </summary>
    /// <param name = "_intrastat">An Intrastat record.</param>
    /// <param name = "_inventDimId">An inventory dimension value.</param>
    /// <returns> Address county id.</returns>
    /// <remarks>
    /// If both sources doesn't provide county - a county from the company address is used.
    /// </remarks>
    protected AddressCountyId calcCounty(Intrastat _intrastat, InventDimId _inventDimId)
    {
        return IntrastatTransferIT::calcIntrastatCounty(_intrastat.County, _inventDimId, primaryPostalAddressForCurrentCompany.County);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCurrencyCode</Name>
				<Source><![CDATA[
    private static CurrencyCode calcCurrencyCode(
        Intrastat _intrastat,
        CurrencyCode _transactionCurrencyCode,
        Set _countryRegionsWithoutCurrencies)
    {
        //Get the currency code for country from Foreign trade parameters
        IntrastatCountryRegionParameters intrastatCountryRegionParameters = IntrastatCountryRegionParameters::find(_intrastat.CountryRegionId);

        if (intrastatCountryRegionParameters.CurrencyCode)
        {
            return intrastatCountryRegionParameters.CurrencyCode;
        }

        if (!_countryRegionsWithoutCurrencies.in(_intrastat.CountryRegionId))
        {
            _countryRegionsWithoutCurrencies.add(_intrastat.CountryRegionId);
            warning(
                strFmt("@SYS4083055", _intrastat.CountryRegionId),
                '', 
                SysInfoAction_MenuFunction::newMenuItem(menuitemDisplayStr(IntrastatParameters), MenuItemType::Display));
        }

        //Use existing transaction currency and amount
        return _transactionCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get order type of a transaction.
    /// </summary>
    /// <param name="_moduleCustVend">
    /// The module of the transaction.
    /// </param>
    /// <param name="_qty">
    /// Quantity of the transaction.
    /// </param>
    /// <param name="_transactionCode">
    /// The <c>TransactionCode</c> value of the transaction.
    /// </param>
    /// <param name="_returnOrderCode">
    /// The <c>TransactionCode</c> code predefined for return order.
    /// </param>
    /// <returns>
    /// The order type of the transaction.
    /// </returns>
    protected IntrastatOrderType getOrderType(ModuleCustVend             _moduleCustVend,
                                                Qty                        _qty,
                                                IntrastatTransactionCodeId _transactionCode,
                                                IntrastatTransactionCodeId _returnOrderCode)
    {
        if (_qty >= 0)
        {
            return IntrastatOrderType::Order;
        }
        else
        {
            return IntrastatOrderType::Correction;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>importToBeIncludedInventTransferJour</Name>
				<Source><![CDATA[
    protected boolean importToBeIncludedInventTransferJour(InventTransferJour _inventTransferJour, InventTransferJourLine _inventTransferJourLine)
    {
        importDeliveryPostalAddress = this.postalAddress(_inventTransferJour.ToPostalAddress);
        return super(_inventTransferJour, _inventTransferJourLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>importToBeIncludedVendInvoiceIntrastat</Name>
				<Source><![CDATA[
    protected boolean importToBeIncludedVendInvoiceIntrastat(VendInvoiceJour _vendInvoiceJour)
    {
        importDeliveryPostalAddress = primaryPostalAddressForCurrentCompany;
        return super(_vendInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadIntrastatFromRecord</Name>
				<Source><![CDATA[
    protected void loadIntrastatFromRecord()
    {
        importDeliveryPostalAddress = null;
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustomerPrimaryAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows to check primary address of the customer
    /// </summary>
    /// /// <param name="_orderAccount">
    /// The <c>OrderAccount</c> value of CustAccount
    /// </param>
    /// <returns>
    /// If countryId of customers primary address equals Italy
    /// </returns>
    public boolean checkCustomerPrimaryAddress(CustAccount _orderAccount)
    {
        boolean check = true;

        if (_orderAccount &&
            primaryPostalAddressForCurrentCompany.CountryRegionId == this.primaryPostalAddress(this.getCustTable(_orderAccount).Party).CountryRegionId)
        {
            check = false;
        }

        return check;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateIntrastatTransactionCurrencyAmount</Name>
				<Source><![CDATA[
    internal static void updateIntrastatTransactionCurrencyAmount(
        Intrastat _intrastat, 
        CurrencyCode _companyStandardCurrency,
        Set _countryRegionsWithoutCurrencies)
    {
        CurrencyCode transactionCurrencyCode = _intrastat.CurrencyCode;

        _intrastat.CurrencyCode = IntrastatTransferIT::calcCurrencyCode(_intrastat, _intrastat.CurrencyCode, _countryRegionsWithoutCurrencies);

        if (_intrastat.CurrencyCode == _companyStandardCurrency)
        {
            //Reset the amount currency to zero if currency code is same as company currency
            _intrastat.AmountCur = 0;
            _intrastat.InvoiceMarkupCur = 0;
        }
        else if (_intrastat.CurrencyCode != transactionCurrencyCode)
        {
            //If the country currency code is not the currency code of transaction
            _intrastat.AmountCur = CurrencyExchangeHelper::curAmount(_intrastat.AmountMST, _intrastat.CurrencyCode, _intrastat.TransDate);
            _intrastat.InvoiceMarkupCur = CurrencyExchangeHelper::curAmount(_intrastat.InvoiceMarkupMST, _intrastat.CurrencyCode, _intrastat.TransDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcIntrastatCounty</Name>
				<Source><![CDATA[
    internal static AddressCountyId calcIntrastatCounty(AddressCountyId _intrastatCounty, InventDimId _inventDimId, AddressCountyId _primaryPostalAddressForCurrentCompanyCounty)
    {
        InventLocation inventLocation = InventDim::find(_inventDimId).inventLocation();
        AddressCountyId county = _intrastatCounty;

        if (inventLocation)
        {
            county = LogisticsLocationEntity::findPostalAddress(inventLocation, LogisticsLocationRoleType::Delivery).County;
        }

        return county;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateItemTypeFromInventTable</Name>
				<Source><![CDATA[
    internal static IntrastatItemType_IT calculateItemTypeFromInventTable(InventTable _inventTable, IntrastatCommodityId _intrastatCommodity)
    {
        if (_inventTable)
        {
            // If there is an Item specified for the current Intrastat record then we base result on InventTable.ItemType
            return _inventTable.ItemType == ItemType::Service ? IntrastatItemType_IT::Services : IntrastatItemType_IT::Goods;
        }
        else if (!_intrastatCommodity)
        {
            // Document based lines with empty commodity code are considered services
            return IntrastatItemType_IT::Services;
        }
        else
        {
            switch (strLen(strKeep(EcoResCategory::commodityCode(_intrastatCommodity), '0123456789')))
            {
                case 5,6:
                    // If commodity code stripped of non-numeric characters is 5 or 6 characters long then the line is considered of type Services
                    return IntrastatItemType_IT::Services;
                default:
                    return IntrastatItemType_IT::Goods;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateOrigCountyFromInventTable</Name>
				<Source><![CDATA[
    internal static ItemOrigCountyId calculateOrigCountyFromInventTable(InventTable _inventTable, ModuleInventCustVend _moduleInventCustVend)
    {
        if (_inventTable.OrigCountyId)
        {
            return _inventTable.OrigCountyId;
        }
        else if (_moduleInventCustVend == ModuleInventCustVend::Cust)
        {
            return IntrastatParameters::find().CountyOrigDest;
        }

        return '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>