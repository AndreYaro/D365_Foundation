<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventQuarantineMultiReportFinished</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventQuarantineMultiReportFinished extends InventQuarantineMulti implements BatchRetryable
{
    Map     wmsJournals;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    FormName formName()
    {
        return formStr(InventQuarantineParmReportFinished);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmBuffer</Name>
				<Source><![CDATA[
    void initParmBuffer(ParmBuffer _inventParmQuarantineOrder)
    {
        InventParmQuarantineOrder inventParmQuarantineOrder = _inventParmQuarantineOrder;
        super(inventParmQuarantineOrder);
        inventParmQuarantineOrder.Type      = InventQuarantineStatus::ReportedFinished;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWMSJournalId</Name>
				<Source><![CDATA[
    void initWMSJournalId(InventParmQuarantineOrder      _inventParmQuarantineOrder)
    {
        if (_inventParmQuarantineOrder.wmsJournalNameId && !_inventParmQuarantineOrder.wmsJournalId && wmsJournals.elements())
        {
            MapIterator mapIterator = new MapIterator(wmsJournals);
            while (mapIterator.more())
            {
                if (mapIterator.domainValue() == _inventParmQuarantineOrder.wmsJournalNameId)
                {
                    _inventParmQuarantineOrder.wmsJournalId = mapIterator.rangeValue();
                    break;
                }
                mapIterator.next();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();
        wmsJournals = new Map(Types::String, Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    Query query()
    {
        return new QueryRun(queryStr(InventQuarantineMultiSelectReportFinishe)).query();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instructs the batch framework that this class can run impersonating the user who requested the task
    /// </summary>
    /// <returns>
    ///    true always, because this class has been validated to be able to use impersonation.
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runUpdate</Name>
				<Source><![CDATA[
    void runUpdate(InventParmQuarantineOrder      _inventParmQuarantineOrder)
    {
        boolean                             createsJournal = false;

        if (_inventParmQuarantineOrder.wmsJournalNameId && !_inventParmQuarantineOrder.wmsJournalId && wmsJournals.elements())
            this.initWMSJournalId(_inventParmQuarantineOrder);

        if (_inventParmQuarantineOrder.wmsJournalNameId && !_inventParmQuarantineOrder.wmsJournalId)
            createsJournal = true;

        InventQuarantineUpdReportFinished inventQuarantineUpdReportFinished = InventQuarantineUpdReportFinished::newParmBuffer(_inventParmQuarantineOrder);
        inventQuarantineUpdReportFinished.run();

        if (createsJournal)
        {
            InventParmQuarantineOrder localOrder = inventQuarantineUpdReportFinished.parmParmBuffer();
            WMSJournalId wmsJournalId = localOrder.wmsJournalId;
            wmsJournals.insert(_inventParmQuarantineOrder.wmsJournalNameId, wmsJournalId);
            info(strFmt("@SYS58788", wmsJournalId),
                 '', SysInfoAction_TableField::newBuffer(WMSJournalTable::find(wmsJournalId)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        InventParmQuarantineOrder   inventParmQuarantineOrder;
        InventQuarantineOrder       inventQuarantineOrder;

        boolean ret = super(calledFrom);

        if (ret)
        {
            while select inventQuarantineOrder
                exists join inventParmQuarantineOrder
                where inventQuarantineOrder.QuarantineId    == inventParmQuarantineOrder.QuarantineId
                && inventParmQuarantineOrder.ParmId         == parmId
            {
                ret = inventQuarantineOrder.checkValidReturn() && ret;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventQuarantineMultiReportFinished construct()
    {
        InventQuarantineMultiReportFinished inventQuarantineMultiReportFinished = new InventQuarantineMultiReportFinished();

        return inventQuarantineMultiReportFinished;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS58429" + ' - ' + "@SYS12772";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (_args.parmEnum() == RunChoose::Run)
        {
            using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(_args))
            {
                InventQuarantineMultiReportFinished inventQuarantineMultiReportFinished = InventQuarantineMultiReportFinished::construct();
                RunBaseMultiParm::initFromForm(inventQuarantineMultiReportFinished, _args);

                if (! inventQuarantineMultiReportFinished.prompt())
                {
                    return;
                }

                inventQuarantineMultiReportFinished.runOnServer();

                if (_args && _args.caller())
                {
                    Object sysFormRun_doRe = _args.caller();
                    sysFormRun_doRe.doFormCache(inventQuarantineMultiReportFinished.packRecs());
                }
            }
        }
        else
        {
            RunBaseMultiParm::runSpecial(_args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>