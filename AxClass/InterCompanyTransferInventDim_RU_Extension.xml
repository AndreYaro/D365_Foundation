<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InterCompanyTransferInventDim_RU_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InterCompanyTransferInventDim_RU_Extension</c> class is an extension class which extends the <c>InterCompanyTransferInventDim</c> class.
/// </summary>
[ExtensionOf(classStr(InterCompanyTransferInventDim))]
public final class  InterCompanyTransferInventDim_RU_Extension
{
    #IsoCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>transferableDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a collection of the inventory dimensions that can be transferred.
    /// </summary>
    /// <returns>
    /// A collection of the inventory dimensions that can be transferred.
    /// </returns>
    protected Set transferableDimensions()
    {
        #InventDimDevelop

        Set dims = next transferableDimensions();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            dims.add(fieldNum(InventDimParm, InventGTDIdFlag_RU));
        }

        return dims;
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalInventDimensionsToTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    The final inventory dimension parameters to be transferred.
    /// </summary>
    /// <param name="_inventDimParm">
    ///    The inventory dimension parameters.
    /// </param>
    /// <param name="_inventLocationId">
    ///    The inventory location ID.
    /// </param>
    /// <returns>
    ///    The final inventory dimension parameters.
    /// </returns>
    /// <remarks>
    ///    GTD numbers that are below location in the reservation hierarchy of WHS enabled items
    ///    will not be synchronized.
    /// </remarks>
    protected InventDimParm finalInventDimensionsToTransfer(
        InventDimParm    _inventDimParm,
        InventLocationId _inventLocationId)
    {
        InventDimParm inventDimParm = next finalInventDimensionsToTransfer(_inventDimParm, _inventLocationId);

        if (!IntercompanyBatchSerialManualSyncContext::manualSyncInvoked()
            && isWHSEnabledItem 
            && inventDimParm.InventGTDIdFlag_RU
            && this.transferableDimensions().in(fieldNum(InventDimParm, InventGTDIdFlag_RU)))
        {
            InventLocation inventLocation = InventLocation::find(_inventLocationId);

            if (!inventLocation || inventLocation.whsEnabled)
            {
                inventDimParm.InventGTDIdFlag_RU =  actionPolicyTransfer.InventGTDId_RU ? inventDimParm.InventGTDIdFlag_RU : NoYes::No;
            }
        }

        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustTransferDimension</Name>
				<Source><![CDATA[
    // <summary>
    /// Determines if a given dimension must be transferred.
    /// </summary>
    /// <param name = "_inventDimFieldId">The field Id of the dimension.</param>
    /// <param name = "_actionPolicyTransfer">The policy.</param>
    /// <param name = "_forceTransfer">The forced transfer used when transferring invent dimensions automatically.</param>
    /// <returns>true if the dimension must be transferred.</returns>
    protected boolean mustTransferDimension(
        FieldId                                  _inventDimFieldId,
        InterCompanyEndpointActionPolicyTransfer _actionPolicyTransfer,
        boolean                                  _forceTransfer)
    {
        #InventDimDevelop

        boolean ret = next mustTransferDimension(_inventDimFieldId, _actionPolicyTransfer, _forceTransfer);

        switch (_inventDimFieldId)
        {
            case fieldNum(InventDim, InventGTDId_RU):
                ret = (_forceTransfer || _actionPolicyTransfer.InventGTDId_RU);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateActionPolicyTransferInventoryDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the intercompany synchronization configuration inventory dimensions.
    /// </summary>
    /// <param name = "_actionPolicyTransfer">An instance of <c>InterCompanyEndpointActionPolicyTransfer</c> object.</param>
    /// <returns>true if the inventory dimensions are set; otherwise, false.</returns>
    protected boolean validateActionPolicyTransferInventoryDimension(InterCompanyEndpointActionPolicyTransfer _actionPolicyTransfer)
    {
        boolean ret = next validateActionPolicyTransferInventoryDimension(_actionPolicyTransfer);
                        
        return ret || _actionPolicyTransfer.InventGTDId_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventDimField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a dimension on the passed <c>InventDim</c> record, and ensures related dimensions are created.
    /// </summary>
    /// <param name = "_inventDimFieldId">The invent dimension to initialize.</param>
    /// <param name = "_inventDim">The invent dimension to initialize.</param>
    /// <param name = "_fromDataAreaId">The data area to initialize from.</param>
    /// <param name = "_fromInventDim">The invent dimension to initialize from.</param>
    /// <param name = "_itemId">The item id.</param>
    protected void initializeInventDimField(
        FieldId                       _inventDimFieldId,
        InventDim                     _inventDim,
        DataAreaId                    _fromDataAreaId,
        InventDim                     _fromInventDim,
        ItemId                        _itemId)
    {
        #InventDimDevelop

        next initializeInventDimField(
            _inventDimFieldId,
            _inventDim,
            _fromDataAreaId,
            _fromInventDim,
            _itemId);

        switch (_inventDimFieldId)
        {
            case fieldNum(InventDim, InventGTDId_RU):
                this.synchronizeIntercompanyInventGTDId(
                    _inventDim,
                    _fromInventDim.InventGTDId_RU,
                    _fromDataAreaId,
                    _itemId,
                    _itemId);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventDimFieldWhenItemRename</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a dimension on the passed <c>InventDim</c> record, and ensures related dimensions are created when renaming item.
    /// </summary>
    /// <param name = "_inventDimFieldId">The invent dimension to initialize.</param>
    /// <param name = "_inventDim">The invent dimension to initialize.</param>
    /// <param name = "_fromDataAreaId">The data area to initialize from.</param>
    /// <param name = "_fromInventDim">The invent dimension to initialize from.</param>
    /// <param name = "_fromItemId">The from company item id.</param>
    /// <param name = "_toItemId">The to company item id.</param>
    protected void initializeInventDimFieldWhenItemRename(
        FieldId                       _inventDimFieldId,
        InventDim                     _inventDim,
        DataAreaId                    _fromDataAreaId,
        InventDim                     _fromInventDim,
        ItemId                        _fromItemId,
        ItemId                        _toItemId)
    {
        #InventDimDevelop

        next initializeInventDimFieldWhenItemRename(
            _inventDimFieldId,
            _inventDim,
            _fromDataAreaId,
            _fromInventDim,
            _fromItemId,
            _toItemId);

        switch (_inventDimFieldId)
        {
            case fieldNum(InventDim, InventGTDId_RU):
                this.synchronizeIntercompanyInventGTDId(
                    _inventDim,
                    _fromInventDim.InventGTDId_RU,
                    _fromDataAreaId,
                    _fromItemId,
                    _toItemId);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackingDimensionsBelowLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns all tracking dimensions that are below Location for an item.
    /// </summary>
    /// <param name = "_inventTable">The item.</param>
    /// <returns>An <c>InventDimParm</c> record with the tracking dimensions that are below location.</returns>
    protected InventDimParm trackingDimensionsBelowLocation(InventTable _inventTable)
    {
        InventDimParm inventDimsBelowLocation = next trackingDimensionsBelowLocation(_inventTable);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) 
            && WHSInventTable::exist(_inventTable.ItemId))
        {
            inventDimsBelowLocation.InventGTDIdFlag_RU = WHSReservationHierarchyInventDimUtil::isGTDBelowLocation(_inventTable);
        }

        return inventDimsBelowLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeIntercompanyInventGTDId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronize GTD dimension value in current company
    /// </summary>
    /// <param name = "_inventDim">The inventory dimensions</param>
    /// <param name = "_fromInventGTDId_RU">The GTD dimension value to initialize from.</param>
    /// <param name = "_fromDataAreaId">The company id, GTD dimension value from.</param>
    /// <param name = "_fromItemId">The item number, GTD dimension value from is related to.</param>
    /// <param name = "_toItemId">The item number, GTD dimension value will be related to.</param>
    private void synchronizeIntercompanyInventGTDId(
        InventDim       _inventDim,
        InventGTDId_RU  _fromInventGTDId_RU,
        DataAreaId      _fromDataAreaId,
        ItemId          _fromItemId,
        ItemId          _toItemId)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            _inventDim.InventGTDId_RU = _fromInventGTDId_RU;

            if (!InventGTD_RU::exist(_toItemId, _inventDim.InventGTDId_RU))
            {
                InventGTD_RU fromInventGTD_RU;
                changeCompany(_fromDataAreaId)
                {
                    fromInventGTD_RU = InventGTD_RU::find(_fromItemId, _fromInventGTDId_RU);
                }
                InventGTD_RU InventGTD_RU;
                InventGTD_RU.ItemId                    = _toItemId;
                InventGTD_RU.InventGTDId               = _inventDim.InventGTDId_RU;
                InventGTD_RU.ItemOrigCountryRegionId   = fromInventGTD_RU.ItemOrigCountryRegionId;
                InventGTD_RU.insert();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>