<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdTransReverse_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxwithholdTransReverse_IN</c> class is used to check whether the setllement process is run or not for selected voucher and transdate.
/// </summary>
class TaxWithholdTransReverse_IN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkSettlementProcessRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to check whether settlement process is run or not.
    /// </summary>
    /// <param name="_voucher">
    /// The voucher for which we are checking whether settlemet is done or not.
    /// </param>
    /// <param name="_transDate">
    /// The transDate.
    /// </param>
    public static void checkSettlementProcessRun(Voucher _voucher, TransDate _transDate)
    {
        if (TaxwithholdTransReverse_IN::isSettlementProcessRun(_voucher, _transDAte))
        {
            if (Box::yesNo("@GLS6278", DialogButton::No) == DialogButton::No)
            {
                throw error("@GLS6279");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSettlementProcessRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether settlement process has been run or not for specified transaction.
    /// </summary>
    /// <param name="_voucher">
    /// The voucher for which we are checking whether settlemet is done or not.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date for which we are checking whether settlemet is done or not.
    /// </param>
    /// <returns>
    /// If settlement process has been run for given transaction then true otherwise false.
    /// </returns>
    public static boolean isSettlementProcessRun(Voucher _voucher, TransDate _transDate)
    {
        TaxWithholdSettleTrans_IN   taxSettleTrans;

        select firstOnly RecId from taxSettleTrans
            where taxSettleTrans.OrigVoucher    == _voucher
               && taxSettleTrans.TransDate      == _transDate;

        if (taxSettleTrans.Recid)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseTaxWithholdTransForJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates witholding tax transaction.
    /// </summary>
    /// <param name="_origVoucher">
    /// Voucher number is used to find the record.
    /// </param>
    /// <param name="_origTransDate">
    /// Transaction date is used to find the record.
    /// </param>
    /// <param name="_reversalVoucher">
    /// Voucher number is updated to Voucher field of the newly created record of TaxWithholdTrans_IN for reverse transactions.
    /// </param>
    /// <param name="_reversalDate">
    /// Transaction date is updated to TransDate field of the newly created record of TaxWithholdTrans_IN for reverse transactions.
    /// </param>
    /// <param name="_reversalTraceNum">
    /// Trace number is updated to TraceNum field of the newly created record of TransactionReversalTrans for reverse transactions.
    /// </param>
    /// <param name="_revoke">
    /// true, if the previous last transaction is reversed, otherwise false.
    /// </param>
    /// <param name="_factor">
    /// Sign of amount which define whether it should be negative amounts or postive.
    /// </param>
    public static void reverseTaxWithholdTransForJournal(Voucher     _origVoucher,
                                                                TransDate   _origTransDate,
                                                                Voucher     _reversalVoucher,
                                                                TransDate   _reversalDate,
                                                                TraceNum    _reversalTraceNum,
                                                                boolean     _revoke,
                                                                Factor      _factor = -1)
    {
        TaxWithholdTrans_IN origTaxWithholdTrans;
        TaxWithholdTrans_IN reverseTaxWithholdTrans;

        ttsbegin;
        while select origTaxWithholdTrans
             where origTaxWithholdTrans.TransDate == _origTransDate
                && origTaxWithholdTrans.Voucher   == _origVoucher
        {
            reverseTaxWithholdTrans.clear();
            if (_revoke)
            {
                reverseTaxWithholdTrans.initFromTaxWithholdTrans(origTaxWithholdTrans, 1);
            }
            else
            {
                reverseTaxWithholdTrans.initFromTaxWithholdTrans(origTaxWithholdTrans, -1);
            }
            reverseTaxWithholdTrans.Voucher             = _reversalVoucher;
            reverseTaxWithholdTrans.TransDate           = _reversalDate;
            reverseTaxWithholdTrans.TransactionStatus   = TaxWithholdTransactionstatus_IN::Posted;
            reverseTaxWithholdTrans.SourceTransVoucher  = _origVoucher;
            reverseTaxWithholdTrans.SourceTransDate     = _origTransDate;
            reverseTaxWithholdTrans.insert();

            TransactionReversalTrans::createTransaction(tablenum(TaxWithholdTrans_IN), origTaxWithholdTrans.RecId, _reversalTraceNum);
            TransactionReversalTrans::createTransaction(tablenum(TaxWithholdTrans_IN), reverseTaxWithholdTrans.RecId, _reversalTraceNum);
        }

        Update_Recordset origTaxWithholdTrans
            setting TransactionReversal = true
            where origTaxWithholdTrans.TransDate == _origTransDate
                && origTaxWithholdTrans.Voucher  == _origVoucher;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseTaxWithholdTransForJournalV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates witholding tax transaction.
    /// </summary>
    /// <param name="_origVoucher">
    /// Voucher number is used to find the record.
    /// </param>
    /// <param name="_origTransDate">
    /// Transaction date is used to find the record.
    /// </param>
    /// <param name="_reversalVoucher">
    /// Voucher number is updated to Voucher field of the newly created record of TaxWithholdTrans_IN for reverse transactions.
    /// </param>
    /// <param name="_reversalDate">
    /// Transaction date is updated to TransDate field of the newly created record of TaxWithholdTrans_IN for reverse transactions.
    /// </param>
    /// <param name="_reversalTraceNum">
    /// Trace number is updated to TraceNum field of the newly created record of TransactionReversalTrans for reverse transactions.
    /// </param>
    /// <param name="_revoke">
    /// true if the previous last transaction is reversed, otherwise false.
    /// </param>
    /// <param name="_factor">
    /// Sign of amount which define whether it should be negative amounts or postive.
    /// </param>
    /// <returns>Returns the related records for origin and reverse <c>TaxWithholdTrans_IN</c> records.</returns>
    public static Map reverseTaxWithholdTransForJournalV2(
        Voucher     _origVoucher,
        TransDate   _origTransDate,
        Voucher     _reversalVoucher,
        TransDate   _reversalDate,
        TraceNum    _reversalTraceNum,
        boolean     _revoke,
        Factor      _factor = -1)
    {
        TaxWithholdTrans_IN origTaxWithholdTrans;
        TaxWithholdTrans_IN reverseTaxWithholdTrans;

        Map taxWHTransRecIdMap = new Map(Types::Int64, Types::Int64);

        ttsbegin;
        while select origTaxWithholdTrans
            where origTaxWithholdTrans.TransDate == _origTransDate
                && origTaxWithholdTrans.Voucher == _origVoucher
        {
            reverseTaxWithholdTrans.clear();
            if (_revoke)
            {
                reverseTaxWithholdTrans.initFromTaxWithholdTrans(origTaxWithholdTrans, 1);
            }
            else
            {
                reverseTaxWithholdTrans.initFromTaxWithholdTrans(origTaxWithholdTrans, -1);
            }
            reverseTaxWithholdTrans.Voucher             = _reversalVoucher;
            reverseTaxWithholdTrans.TransDate           = _reversalDate;
            reverseTaxWithholdTrans.TransactionStatus   = TaxWithholdTransactionstatus_IN::Posted;
            reverseTaxWithholdTrans.SourceTransVoucher  = _origVoucher;
            reverseTaxWithholdTrans.SourceTransDate     = _origTransDate;
            reverseTaxWithholdTrans.insert();

            taxWHTransRecIdMap.insert(origTaxWithholdTrans.RecId, reverseTaxWithholdTrans.RecId);

            TransactionReversalTrans::createTransaction(tablenum(TaxWithholdTrans_IN), origTaxWithholdTrans.RecId, _reversalTraceNum);
            TransactionReversalTrans::createTransaction(tablenum(TaxWithholdTrans_IN), reverseTaxWithholdTrans.RecId, _reversalTraceNum);
        }

        update_Recordset origTaxWithholdTrans
            setting TransactionReversal = true
            where origTaxWithholdTrans.TransDate == _origTransDate
                && origTaxWithholdTrans.Voucher  == _origVoucher;
        ttscommit;

        return taxWHTransRecIdMap;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>