<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventAdjOnhandSelect</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventAdjOnhandSelect extends InventAdjSelect
{
    InventDimParm       inventDimParm;
    TransDate           perDate;
    boolean             adjustClosing;
    DialogGroup         dialogInventDimParm;
    DialogRunbase       dialog;

    #DEFINE.CurrentVersion(5)
    #LOCALMACRO.CurrentList
        inventDimParm
        , perDate
        , adjustClosing
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the AOT.
    /// </remarks>
    public Object dialog()
    {
        dialog = super();

        dialogInventDimParm = inventDimParm.addFieldsToDialog(dialog,"@SYS54903");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        inventDimParm.getFromDialog(dialog,dialogInventDimParm);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    public void initQueryRun()
    {
        queryRun = new QueryRun(queryStr(InventSumAdjOnhand));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdjustClosing</Name>
				<Source><![CDATA[
    public boolean parmAdjustClosing(boolean _adjustClosing = adjustClosing)
    {
        adjustClosing = _adjustClosing;

        return adjustClosing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimParm</Name>
				<Source><![CDATA[
    public InventDimParm parmInventDimParm(InventDimParm _inventDimParm = inventDimParm)
    {
        inventDimParm = _inventDimParm;
        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPerDate</Name>
				<Source><![CDATA[
    public TransDate parmPerDate(TransDate _perDate = perDate)
    {
        perDate = _perDate;

        return perDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>QueryRun</c> class, which is used by the <c>QueryPrompt</c> class.
    /// </summary>
    /// <returns>
    ///    The <c>QueryRun</c> class, which is used by the <c>QueryPrompt</c> class.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a select menu item is added to a
    ///    dialog. Do not create an instance of the <c>QueryRun</c> class whenever the method is called. This
    ///    should be done in the <c>unpack</c> method and the <c>initParmDefault</c> method. Or it can be used
    ///    in the <c>init</c> method or in the method only when it is not created.
    /// </remarks>
    QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount
        InventDim               inventDim;
        InventDimParm           inventDimParmCriteria;
        InventDimParm           inventDimParmTmp;
        InventTable             inventTable;

        InventModelTypeCache    inventModelTypeCache        = InventModelTypeCache::construct();
        InventModelType         inventModelType;
        inventDimParm           inventDimParmFinancial;
        inventDim               inventDimFinancial;
        InventDimId             InventDimId;
        ItemId                  ItemId;
        boolean					hasNegativeOnHand = false;

        setPrefix(InventAdjOnhandSelect::description());
        try
        {
            ttsbegin;

            if (! this.validate())
            {
                throw error("@SYS18447");
            }

            delete_from tmpFormLookUp;

            inventDimParmTmp.initProductDimensionsAllGroups();
            inventDimParm = InventDimParm::orParms(inventDimParm,inventDimParmTmp);
            inventDimParm.ItemIdFlag            = NoYes::Yes;
            inventDimParmCriteria.ClosedFlag    = NoYes::Yes;

            InventSum::newQuery(queryRun.query(),'',null,inventDimParmCriteria,inventDimParm);
            queryRun.query().dataSourceTable(tableNum(InventSum)).addRange(fieldNum(InventSum, IsExcludedFromInventoryValue)).value(queryValue(NoYes::No));

            this.progressInit(InventCountCreate::description(),QueryRun::getQueryRowCount(queryRun.query(), maxInt()),#AviUpdate);
            progress.updateInterval(5);

            // <GEERU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                this.addInventProfileCostAdjAllowedRange_RU();
            }
            // </GEERU>

            Set set = new set(Types::Container);
            Counter lineCount = 1;
            while (queryRun.next())
            {
                InventSum inventSum = queryRun.get(tableNum(InventSum));
                inventDim = queryRun.get(tableNum(InventDim));

                progress.setText(inventSum.ItemId,1);
                progress.incCount();

                inventTable = inventSum.inventTable();

                inventModelType = inventModelTypeCache.inventModelType(inventTable.modelGroupId()
                    // <GEERU>
                    , inventTransCurrency
                    // </GEERU>
                    );
                if (inventTable.inventItemType().mustInventBeControlled() && inventModelType.allowOnhandAdjustment() &&
                    ((adjustClosing && inventModelType.mustBeClosed()) || (!adjustClosing && !inventModelType.mustBeClosed())))
                {
                    InventDimGroupSetup::newInventTable(inventTable).inventDimParmActiveFinancialInventory(inventDimParmFinancial);
                    inventDimFinancial.data(inventDim);
                    inventDimFinancial.clearNotSelectedDim(inventDimParmFinancial);

                    if (inventDimParmFinancial.InventOwnerIdFlag_RU == NoYes::Yes)
                    {
                        inventDimFinancial.InventOwnerId_RU = InventOwner_RU::findOrCreateCurrentLegalEntity().InventOwnerId;
                    }

                    set.add([inventSum.ItemId, InventDim::findOrCreate(inventDimFinancial).InventDimId]);
                }
            }
            SetEnumerator setEnumerator = set.getEnumerator();
            using (InventSumAddEmptyRangeValueForFinancialDimContext context = new InventSumAddEmptyRangeValueForFinancialDimContext())
            {
                while (setEnumerator.moveNext())
                {
                    [itemId, inventDimId] = setEnumerator.current();
                    inventDim = inventDim::find(InventDimId);
                    inventTable = inventTable::find(ItemId);
                    inventModelType = inventModelTypeCache.inventModelType(inventTable.modelGroupId());
                    InventSumOpenTransact openTransact = inventModelType.InventSumOpenTransact(perDate, itemId, inventDim, inventDimParm);
                    // <GEERU>
                    openTransact.parmInventTransCurrency_RU(inventTransCurrency);
                    // </GEERU>
                    tmpFormLookUp.ItemId      = itemId;
                    tmpFormLookUp.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;
                    tmpFormLookUp.qty = openTransact.sumTransQty();
                    tmpFormLookUp.postedValue = openTransact.sumTransValue();

                    if (this.shouldInsertForAdjustment(tmpFormLookUp))
                    {
                        tmpFormLookUp.LineNo        = lineCount;
                        tmpFormLookUp.insert();
                        lineCount++;
                    }
				    else
                    {
                        hasNegativeOnHand = true;
				    }
                }
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        do
        {
            inventModelType = inventModelTypeCache.nextCachedInventModelType();
            if (inventModelType && ! inventModelType.allowOnhandAdjustment())
            {
                Box::infoOnce(InventAdj_SumUp::description(),
                              strFmt("@SYS104800",inventModelType.isSettled() ? "@SYS104361" : "@SYS104360"),
                              this.lastValueElementName());
                break;
            }
        }
        while (inventModelType);

        if (hasNegativeOnHand)
        {
            Box::infoOnce(InventAdj_SumUp::description(), "@SCM:HideNegativeFromAdjustOnHand", this.lastValueElementName());
		}
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldInsertForAdjustment</Name>
				<Source><![CDATA[
    protected boolean shouldInsertForAdjustment(TmpFormLookUp _tmpFormLookUp)
    {
        return tmpFormLookUp.Qty > 0;
	}

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a Select button is to be added to the dialog.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    /// <remarks>
    ///    If the return value is changed to true, the button will be added. If the button is clicked, it will
    ///    show the query form. Therefore, the <c>queryRun</c> method has to return a valid <c>QueryRun</c>
    ///    class.
    /// </remarks>
    boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean         ret;
        Integer         version     = conPeek(packedClass,1);
        container       base;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,base] = packedClass;
                if (base)
                {
                    ret = super(base);
                }
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventAdjOnhandSelect construct()
    {
        return new InventAdjOnhandSelect();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS263";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    public static InventAdjOnhandSelect newFromForm(TmpFormLookUp tmpFormLookUp
        , TransDate _perDate = InventClosing::closingDate(true)
        , boolean _adjustClosing = true
        , InventTransCurrency_RU  _inventTransCurrency = InventTransCurrency_RU::PrimaryCur
        )
    {
        InventAdjOnhandSelect inventAdjOnhandSelect = InventAdjOnhandSelect::construct();

        inventAdjOnhandSelect.getLast();
        inventAdjOnhandSelect.setTmpFormLookUp(tmpFormLookUp);
        inventAdjOnhandSelect.parmPerDate(_perDate);
        inventAdjOnhandSelect.parmAdjustClosing(_adjustClosing);
        // <GEERU>
        inventAdjOnhandSelect.parmInventTransCurrency_RU(_inventTransCurrency);
        // </GEERU>
        return inventAdjOnhandSelect;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>