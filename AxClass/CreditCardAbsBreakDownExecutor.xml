<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CreditCardAbsBreakDownExecutor</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal abstract class CreditCardAbsBreakDownExecutor implements ICreditCardBreakDownExecute
{
    private const int MaxRetryCount = 3;
    private const int BaseExponentialWait = 2;
    protected int backOffWait;
    private CreditCardPaymentBreakDownLogger creditCardPaymentBreakDownLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        creditCardPaymentBreakDownLogger = CreditCardPaymentBreakDownLogger::createLogger();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateBackoffWait</Name>
				<Source><![CDATA[
    protected int generateBackoffWait()
    {
        return RandomGenerate::construct().randomInt(1000, 10000);
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    public CreditCardBreakDownExecutionResult execute(ICreditCardBreakDownProcessRun _creditCardBreakDownProcessRunner)
    {
        using (var runActivityContext = creditCardPaymentBreakDownLogger.activityContextWithCustomProperties(CreditCardPaymentBreakDownInstrumentationConstants::CreditCardPaymentBreakDownExecute))
        {
            str isTTSLevelZero = appl.ttsLevel() == 0 ? 'true' : 'false';
            runActivityContext.addCustomProperty(
                CreditCardPaymentBreakDownInstrumentationConstants::IsTTSLevelZero,
                isTTSLevelZero);
            try
            {
                creditCardPaymentBreakDownLogger.logInformation(strFmt('Try with step %1, count %2', classId2Name(classIdGet(_creditCardBreakDownProcessRunner)), xSession::currentRetryCount()+1));
                CreditCardBreakDownExecutionResult creditCardBreakDownExecutionResult = this.executeInternal(_creditCardBreakDownProcessRunner);
                return creditCardBreakDownExecutionResult;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= MaxRetryCount)
                {
                    creditCardPaymentBreakDownLogger.logError(strFmt('Maximum retry count hit for step %1', classId2Name(classIdGet(_creditCardBreakDownProcessRunner))));
                }
                else
                {
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (xSession::currentRetryCount() >= MaxRetryCount)
                {
                    creditCardPaymentBreakDownLogger.logError(strFmt('Maximum retry count hit for step %1', classId2Name(classIdGet(_creditCardBreakDownProcessRunner))));
                }
                else
                {
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
            }
            catch (Exception::DuplicateKeyException)
            {
                creditCardPaymentBreakDownLogger.logError(strFmt('Duplicated key error for step %1', classId2Name(classIdGet(_creditCardBreakDownProcessRunner))));
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (xSession::currentRetryCount() >= MaxRetryCount)
                {
                    creditCardPaymentBreakDownLogger.logError(strFmt('Maximum retry count hit for step %1', classId2Name(classIdGet(_creditCardBreakDownProcessRunner))));
                }
                else
                {
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
            }
            catch (Exception::CLRError)
            {
                System.Exception ex = CLRInterop::getLastException();
                creditCardPaymentBreakDownLogger.logException(ex, strFmt('CLR error for step %1', classId2Name(classIdGet(_creditCardBreakDownProcessRunner))));
            }
            catch (Exception::Error)
            {
                creditCardPaymentBreakDownLogger.logError(strFmt('System error for step %1', classId2Name(classIdGet(_creditCardBreakDownProcessRunner))));
            }
            catch
            {
                creditCardPaymentBreakDownLogger.logError(strFmt('System error for step %1', classId2Name(classIdGet(_creditCardBreakDownProcessRunner))));
            }
            finally
            {
                creditCardPaymentBreakDownLogger.logInformation(strFmt('End of step %1', classId2Name(classIdGet(_creditCardBreakDownProcessRunner))));
            }
            return CreditCardBreakDownExecutionResult::ApplicationExecutionExceptionOccured;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeInternal</Name>
				<Source><![CDATA[
    internal protected abstract CreditCardBreakDownExecutionResult executeInternal(ICreditCardBreakDownProcessRun _creditCardBreakDownProcessRunner)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>