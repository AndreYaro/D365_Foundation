<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceConvert_BasePrice</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PriceConvert_BasePrice implements PriceConvert
{
    ItemId              itemId;
    InventDimId         inventDimId;

    Price               originalPrice;
    PriceQty            originalPriceQty;
    InventPriceMarkup   originalMarkup;
    PriceUnit           originalPriceUnit;
    CurrencyCode        originalCurrencyCode;
    UnitOfMeasureSymbol originalUnitId;

    InventPriceMarkup   originalMarkupSecCur;
    Price               originalPriceSecCur;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmCurrencyCode()
    {
        return this.parmOriginalCurrencyCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
    public InventDimId parmInventDimId(InventDimId _inventDimId = inventDimId)
    {
        inventDimId = _inventDimId;
        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        if (!prmisdefault(_itemId))
        {
            itemId = _itemId;
        }

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkup</Name>
				<Source><![CDATA[
    public InventPriceMarkup parmMarkup()
    {
        return this.parmOriginalMarkup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkupSecCur_RU</Name>
				<Source><![CDATA[
    public InventPriceMarkup parmMarkupSecCur_RU()
    {
        return this.parmOriginalMarkupSecCur_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOriginalCurrencyCode</Name>
				<Source><![CDATA[
    protected CurrencyCode parmOriginalCurrencyCode(CurrencyCode _originalCurrencyCode = originalCurrencyCode)
    {
        if (!prmisdefault(_originalCurrencyCode))
        {
            originalCurrencyCode = _originalCurrencyCode;
        }

        return originalCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOriginalMarkup</Name>
				<Source><![CDATA[
    protected InventPriceMarkup parmOriginalMarkup(InventPriceMarkup _originalMarkup = originalMarkup)
    {
        if (!prmisdefault(_originalMarkup))
        {
            originalMarkup = _originalMarkup;
        }

        return originalMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOriginalMarkupSecCur_RU</Name>
				<Source><![CDATA[
    protected InventPriceMarkup parmOriginalMarkupSecCur_RU(InventPriceMarkup _originalMarkupSecCur = originalMarkupSecCur)
    {
        if (! prmisdefault(_originalMarkupSecCur))
        {
            originalMarkupSecCur = _originalMarkupSecCur;
        }

        return originalMarkupSecCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOriginalPrice</Name>
				<Source><![CDATA[
    protected Price parmOriginalPrice(Price _originalPrice = originalPrice)
    {
        if (!prmisdefault(_originalPrice))
        {
            originalPrice = _originalPrice;
        }

        return originalPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOriginalPriceQty</Name>
				<Source><![CDATA[
    protected PriceQty parmOriginalPriceQty(PriceQty _originalPriceQty = originalPriceQty)
    {
        if (!prmisdefault(_originalPriceQty))
        {
            originalPriceQty = _originalPriceQty;
        }

        return originalPriceQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOriginalPriceSecCur_RU</Name>
				<Source><![CDATA[
    protected Price parmOriginalPriceSecCur_RU(Price _originalPriceSecCur = originalPriceSecCur)
    {
        if (! prmisdefault(_originalPriceSecCur))
        {
            originalPriceSecCur = _originalPriceSecCur;
        }

        return originalPriceSecCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOriginalPriceUnit</Name>
				<Source><![CDATA[
    protected PriceUnit parmOriginalPriceUnit(PriceUnit _originalPriceUnit = originalPriceUnit)
    {
        if (!prmisdefault(_originalPriceUnit))
        {
            originalPriceUnit = _originalPriceUnit;
        }

        return originalPriceUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOriginalUnitId</Name>
				<Source><![CDATA[
    protected UnitOfMeasureSymbol parmOriginalUnitId(UnitOfMeasureSymbol _originalUnitId = originalUnitId)
    {
        if (!prmisdefault(_originalUnitId))
        {
            originalUnitId = _originalUnitId;
        }

        return originalUnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrice</Name>
				<Source><![CDATA[
    public Price parmPrice()
    {
        return this.parmOriginalPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceQty</Name>
				<Source><![CDATA[
    public PriceQty parmPriceQty()
    {
        return this.parmOriginalPriceQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceSecCur_RU</Name>
				<Source><![CDATA[
    public Price parmPriceSecCur_RU()
    {
        return this.parmOriginalPriceSecCur_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceUnit</Name>
				<Source><![CDATA[
    public PriceUnit parmPriceUnit()
    {
        return this.parmOriginalPriceUnit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitId</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol parmUnitId()
    {
        return this.parmOriginalUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static PriceConvert_BasePrice construct()
    {
        return new PriceConvert_BasePrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newItemPrice</Name>
				<Source><![CDATA[
    public static PriceConvert_BasePrice newItemPrice(ItemId                _itemId,
                                                      UnitOfMeasureSymbol   _originalUnitId,
                                                      Price                 _originalPrice,
                                                      PriceUnit             _originalPriceUnit,
                                                      InventPriceMarkup     _originalMarkup,
                                                      PriceQty              _originalPriceQty,
                                                      CurrencyCode          _originalCurrencyCode,
                                                      Price                 _originalPriceSecCur = 0,
                                                      InventPriceMarkup     _originalMarkupSecCur = 0)
    {
        PriceConvert_BasePrice priceConvert_BasePrice;
        priceConvert_BasePrice = PriceConvert_BasePrice::construct();
        priceConvert_BasePrice.parmItemId(_itemId);
        priceConvert_BasePrice.parmOriginalUnitId(_originalUnitId);
        priceConvert_BasePrice.parmOriginalPrice(_originalPrice);
        priceConvert_BasePrice.parmOriginalPriceUnit(_originalPriceUnit);
        priceConvert_BasePrice.parmOriginalMarkup(_originalMarkup);
        priceConvert_BasePrice.parmOriginalPriceQty(_originalPriceQty);
        priceConvert_BasePrice.parmOriginalCurrencyCode(_originalCurrencyCode);
        // <GEERU>
        priceConvert_BasePrice.parmOriginalPriceSecCur_RU(_originalPriceSecCur);
        priceConvert_BasePrice.parmOriginalMarkupSecCur_RU(_originalMarkupSecCur);
        // </GEERU>

        return priceConvert_BasePrice;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>