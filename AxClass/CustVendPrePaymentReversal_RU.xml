<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPrePaymentReversal_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class CustVendPrePaymentReversal_RU extends CustVendPrePaymentReversal
{
    #IsoCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mustCreatePrepaymentWithLog_W</Name>
				<Source><![CDATA[
    public boolean mustCreatePrepaymentWithLog_W()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reversePrePaymentTax</Name>
				<Source><![CDATA[
    public void reversePrePaymentTax(
        CustVendTrans       _custVendTransPrepayment,
        LedgerVoucher       _ledgerVoucher,
        AmountCur           _settleAmountCurPrepayment,
        AmountMST           _settleAmountMST        = 0,
        AmountMSTSecondary  _settleAmountReporting  = 0,
        CustVendTrans       _custVendTransOffset    = new DictTable(_custVendTransPrepayment.TableId).makeRecord())
    {
        CustVendSettlePostingLog_RU    postingLog;
        CustSettlePrepaymentVATType_RU vatTransType;

        if (! _custVendTransOffset)
        {
            return;
        }

        if ((! _custVendTransPrepayment.Prepayment && ! _custVendTransOffset.Prepayment))
        {
            return;
        }

        if (_custVendTransOffset.PostingProfile == _custVendTransPrepayment.PostingProfile &&
            _custVendTransOffset.Prepayment                                                &&
            _custVendTransPrepayment.Prepayment)
        {
            return;
        }

        _ledgerVoucher.findLedgerVoucherObject().parmVoucherCheck(false);

        postingLog = CustVendSettlePostingLog_RU::newCustVendSettle(CustVendTransPostingLogType_RU::PrepaymentStornoVAT,
                                                                    _custVendTransPrepayment,
                                                                    _custVendTransPrepayment,
                                                                    _custVendTransOffset);
        postingLog.parmVoucher(_ledgerVoucher.lastVoucher());
        postingLog.parmTransDate(_ledgerVoucher.lastTransDate());
        postingLog.parmCustVendSettle(custVendSettle);

        if (module == ModuleCustVend::Vend)
        {
            vatTransType = VendParameters::find().SettlePrepaymentVATType_W;
        }
        else
        {
            vatTransType = CustParameters::find().SettlePrepaymentVATType_RU;
        }

        _ledgerVoucher.findLedgerVoucherObject().parmCorrection(vatTransType == CustSettlePrepaymentVATType_RU::Storno ? ! _custVendTransPrepayment.Correct : _custVendTransPrepayment.Correct);

        // <GEECZ>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#IsoCZ]))
        {
            this.reverseTax_RU(_ledgerVoucher, _custVendTransPrepayment, postingLog, _settleAmountMST, _settleAmountCurPrepayment, _settleAmountReporting, _custVendTransOffset);
        }
        else
        {
        // </GEECZ>
            this.reverseTax_RU(_ledgerVoucher, _custVendTransPrepayment, postingLog, _settleAmountMST, _settleAmountCurPrepayment, _settleAmountReporting);
        // <GEECZ>
        }
        // </GEECZ>
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseTax_RU</Name>
				<Source><![CDATA[
    private void reverseTax_RU(
        LedgerVoucher               _ledgerVoucher,
        CustVendTrans               _prepaymentTrans,
        CustVendSettlePostingLog_RU _postingLog,
        AmountMST                   _settleAmountMst,
        AmountCur                   _settleAmountCur,
        AmountMSTSecondary          _settleAmountReporting
        , CustVendTrans               _offsetTrans = null
        )
    {
        LedgerDimensionAccount      vatPrePaymentLedgerDimension;
        LedgerBondClient_RU         ledgerBondClient;
        LedgerVoucherObject         ledgerVoucherObject;
        LedgerVoucherTransObject    ledgerVoucherTransObject;
        TaxReversePrepayment_RU     taxReversePrePayment;
        AmountCur                   taxAmountCur;
        AmountCur                   taxAmountCurWithoutUseTax;
        TaxAmount                   taxAmountMST;
        TaxAmount                   taxAmountMSTWithoutUseTax;
        AmountMSTSecondary          taxAmountReporting;
        AmountMSTSecondary          taxAmountReportingWithoutUseTax;
        TaxRefId                    taxRefId;

        CurrencyExchangeHelper      exchHelper;
        Set                         taxTransRecIDs;

        // <GEECZ>
        AmountMST                   amountDiffMST, amountDiffMSTSecondary;
        CustVendExchAdjParm_W       custVendExchAdjParm;
        LedgerVoucherTransObject    ledgerVoucherTransObjectAmountDiffMST;
        LedgerPostingType           posting;
        LedgerDimensionAccount      profitLossLedgerDimension;
        Sign                        sign;
        boolean                     isCZEnabled = SysCountryRegionCode::isLegalEntityInCountryRegion([#IsoCZ]);
        CurrencyCode                reportingCurrency;
        // </GEECZ>

        ledgerVoucherObject = _ledgerVoucher.findLedgerVoucherObject();

        ledgerBondClient    = ledgerVoucherObject.ledgerBondClient_RU();
        if (ledgerBondClient)
        {
            ledgerBondClient.addNewLogObject();
        }

        taxReversePrePayment = new TaxReversePrepayment_RU();
        // <GEECZ>
        if (isCZEnabled)
        {
            taxReversePrePayment.initFromSettlement(_prepaymentTrans,
                                                    _settleAmountMst,
                                                    _settleAmountCur,
                                                    _settleAmountReporting,
                                                    _offsetTrans);
        }
        else
        {
        // </GEECZ>
            taxReversePrePayment.initFromSettlement(_prepaymentTrans,
                                                    _settleAmountMst,
                                                    _settleAmountCur,
                                                    _settleAmountReporting);
        // <GEECZ>
        }
        // </GEECZ>

        taxReversePrePayment.parmVatPrePaymentLedgerDimension(LedgerDimensionFacade::serviceCreateLedgerDimension(this.vatPrePaymentAccount(_prepaymentTrans), _prepaymentTrans.DefaultDimension));

        [taxAmountCur, taxAmountMST, taxAmountReporting
            // <GEECZ>
            , amountDiffMST
            // </GEECZ>
            ] = taxReversePrePayment.calcPostAndInsertTaxes(LedgerPostingController::newForLedgerPostingJournal(_ledgerVoucher));

        taxTransRecIDs = taxReversePrePayment.taxTransRecIDs();

        if (taxAmountCur || taxAmountMST || taxRefId)
        {
            vatPrePaymentLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(this.vatPrePaymentAccount(_prepaymentTrans), _prepaymentTrans.DefaultDimension);

            if (TaxReversePrepaymentWithUseTaxAndOtherTaxFlight::instance().isEnabled())
            {
                boolean needOffsetVoucherTrans;
                TaxAmountCur reverseVoucherTransAmountCur;
                if (!taxReversePrePayment.parmUseTax())
                {
                    exchHelper = this.getCurrencyExchangeHelper(
                        taxAmountCur,
                        taxAmountMST,
                        taxAmountReporting,
                        ledgerVoucherObject.parmTransDate());

                    reverseVoucherTransAmountCur = -taxAmountCur;
                    needOffsetVoucherTrans = true;
                }
                else
                {
                    // Check if there is any other tax except the use tax
                    [taxAmountCurWithoutUseTax, taxAmountMSTWithoutUseTax, taxAmountReportingWithoutUseTax] = taxReversePrePayment.parmTotalTaxAmountsWithoutUseTaxContainer();
                    if (taxAmountCurWithoutUseTax || taxAmountMSTWithoutUseTax)
                    {
                        exchHelper = this.getCurrencyExchangeHelper(
                            taxAmountCurWithoutUseTax,
                            taxAmountMSTWithoutUseTax,
                            taxAmountReportingWithoutUseTax,
                            ledgerVoucherObject.parmTransDate());

                        reverseVoucherTransAmountCur = -taxAmountCurWithoutUseTax;
                        needOffsetVoucherTrans = true;
                    }
                }

                if (needOffsetVoucherTrans)
                {
                    ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                        ledgerVoucherObject,
                        LedgerPostingType::Tax,
                        vatPrePaymentLedgerDimension,
                        _prepaymentTrans.CurrencyCode,
                        reverseVoucherTransAmountCur,
                        exchHelper);

                    ledgerVoucherTransObject.parmSourceTableId(_prepaymentTrans.TableId);
                    ledgerVoucherTransObject.parmSourceRecId(_prepaymentTrans.RecId);
                    ledgerVoucherTransObject.parmTransTxt(_prepaymentTrans.Txt);
                    ledgerVoucherObject.addTrans(ledgerVoucherTransObject);
                }
            }
            else
            {
                if (!taxReversePrePayment.parmUseTax())
                {
                    exchHelper = this.getCurrencyExchangeHelper(
                    taxAmountCur,
                    taxAmountMST,
                    taxAmountReporting,
                    ledgerVoucherObject.parmTransDate());

                    ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(ledgerVoucherObject,
                                                                                             LedgerPostingType::Tax,
                                                                                             vatPrePaymentLedgerDimension,
                                                                                             _prepaymentTrans.CurrencyCode,
                                                                                             -taxAmountCur,
                                                                                             exchHelper);

                    ledgerVoucherTransObject.parmSourceTableId(_prepaymentTrans.TableId);
                    ledgerVoucherTransObject.parmSourceRecId(_prepaymentTrans.RecId);
                    ledgerVoucherTransObject.parmTransTxt(_prepaymentTrans.Txt);
                    ledgerVoucherObject.addTrans(ledgerVoucherTransObject);
                }
            }

            // <GEECZ>
            if (isCZEnabled && amountDiffMST)
            {
                reportingCurrency = Ledger::reportingCurrency();
                if (reportingCurrency)
                {
                    amountDiffMSTSecondary = CurrencyExchangeHelper::curAmount(amountDiffMST, reportingCurrency, _ledgerVoucher.lastTransDate(), Currency::noYes2UnknownNoYes(_prepaymentTrans.euroTriangulation));
                }

                custVendExchAdjParm = CustVendExchAdjParm_W::newFromParm(_prepaymentTrans, false, false);

                posting                     = custVendExchAdjParm.postingType(amountDiffMST);
                profitLossLedgerDimension   = LedgerDimensionFacade::serviceCreateLedgerDimension(custVendExchAdjParm.ledgerDimension(posting), _prepaymentTrans.DefaultDimension);
                sign                        = _prepaymentTrans.TableId == tableNum(CustTrans) ? 1 : -1;

                ledgerVoucherTransObjectAmountDiffMST = LedgerVoucherTransObject::newAdjustmentDefault(
                    ledgerVoucherObject,
                    posting,
                    profitLossLedgerDimension,
                    _prepaymentTrans.CurrencyCode,
                    sign * amountDiffMST,
                    sign * amountDiffMSTSecondary);

                ledgerVoucherTransObjectAmountDiffMST.parmCorrect(NoYes::Yes);
                ledgerVoucherObject.addTrans(ledgerVoucherTransObjectAmountDiffMST);

                ledgerVoucherTransObjectAmountDiffMST = LedgerVoucherTransObject::newAdjustmentDefault(
                    ledgerVoucherObject,
                    posting,
                    vatPrePaymentLedgerDimension,
                    _prepaymentTrans.CurrencyCode,
                    -sign * amountDiffMST,
                    -sign * amountDiffMSTSecondary);

                ledgerVoucherTransObjectAmountDiffMST.parmCorrect(NoYes::Yes);
                ledgerVoucherObject.addTrans(ledgerVoucherTransObjectAmountDiffMST);

                _postingLog.createFromLedgerTransObject(ledgerVoucherTransObjectAmountDiffMST, profitLossLedgerDimension, true);
            }
            // </GEECZ>
        }

        if (ledgerBondClient)
        {
            if (ledgerBondClient.currentLogLength() > 1)
            {
                ledgerBondClient.bondLastVRef2CurrentLog();
            }

            ledgerBondClient.removeCurrentLogObject();
        }

        if (ledgerVoucherTransObject)
        {
            _postingLog.parmTaxTransRecIDs(taxTransRecIDs);
            _postingLog.createFromLedgerTransObject(ledgerVoucherTransObject, 0, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyExchangeHelper</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an object of the class <c>CurrencyExchangeHelper</c>.
    /// </summary>
    /// <param name = "_amountCur">Amount in transaction currency.</param>
    /// <param name = "_amountMST">Amount in accounting currency.</param>
    /// <param name = "_amountReporting">Amount in reporting currency.</param>
    /// <param name = "_exchangeDate">Exchange date.</param>
    /// <returns>The object of the class <c>CurrencyExchangeHelper</c>.</returns>
    protected CurrencyExchangeHelper getCurrencyExchangeHelper(
        AmountCur _amountCur,
        AmountMST _amountMST,
        AmountMSTSecondary _amountReporting,
        TransDate _exchangeDate)
    {
        CurrencyExchangeHelper currencyExchangeHelperLoc = CurrencyExchangeHelper::newLedger(Ledger::current());
        //Anti-rounding exchange rate:
        currencyExchangeHelperLoc.parmExchangeRate1(CurrencyExchange::calculateExchangeRate(_amountCur, _amountMST));
        currencyExchangeHelperLoc.parmReportingExchangeRate1(CurrencyExchange::calculateExchangeRate(_amountCur, _amountReporting));
        currencyExchangeHelperLoc.parmExchangeDate(_exchangeDate);

        return currencyExchangeHelperLoc;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>