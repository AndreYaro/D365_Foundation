<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GeneralLedgerBalanceUpdateSim_IT_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>GeneralLedgerBalanceUpdateSim_IT_Extension</c> class creates or updates the general ledger balances.
/// </summary>
[ExtensionOf(classStr(GeneralLedgerBalanceUpdate))]
internal final class GeneralLedgerBalanceUpdateSim_IT_Extension
{
    private GeneralLedgerBalanceInstrumentationLogger simITLogger;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        simITLogger = GeneralLedgerBalanceInstrumentationLogger::createLogger(classStr(GeneralLedgerBalanceUpdateSim_IT_Extension));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBalanceUpdates</Name>
				<Source><![CDATA[
    protected void processBalanceUpdates()
    {       
        next processBalanceUpdates();

        SelectableDataArea dataArea = CompanyInfo::getDataArea(Ledger::primaryForLegalEntity(contract.parmLedgerRecId()));

        changecompany(dataArea)
        {
            if (FeatureStateProvider::IsFeatureEnabled(GeneralLedgerSimulationsFeature::instance()))
            {
                using (var activityContext = simITLogger.processActivities().getActivityContextForBalanceContract(contract, methodStr(GeneralLedgerBalanceUpdateSim_IT_Extension, processBalanceUpdates)))
                {
                    if (this.hasWorkSimIT())
                    {
                        GeneralLedgerBalanceRecIdTmp unprocessedTransRecordIdsTemp;

                        ttsbegin;

                        // Initiate the temp table for chunked record processing
                        select firstonly unprocessedTransRecordIdsTemp;

                        boolean isProcessed = this.preProcessSimIT(unprocessedTransRecordIdsTemp);

                        if (isProcessed)
                        {
                            this.createReportingStructureDimensionsSimIT(unprocessedTransRecordIdsTemp);

                            this.createBalancesSimIT(unprocessedTransRecordIdsTemp);

                            this.postProcessSimIT(unprocessedTransRecordIdsTemp);
                        }

                        ttscommit;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBalancesSimIT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the general ledger Italy simulation balances.
    /// </summary>
    /// <remarks>
    /// The general ledger balances are created or updated by using the temporary balances.
    /// </remarks>
    private void createBalancesSimIT(GeneralLedgerBalanceRecIdTmp _unprocessedTransTemp)
    {
        using (var activityContext = simITLogger.processActivities().getActivityContextForBalanceContract(contract, methodStr(GeneralLedgerBalanceUpdateSim_IT_Extension, createBalancesSimIT)))
        {
            GeneralLedgerBalanceSimTmp_IT balancesTemp;

            try
            {
                balancesTemp = this.createBalanceTempSimIT(_unprocessedTransTemp);

                // update the permanent records from the temp records
                this.updateBalancesSimIT(balancesTemp);
            }
            finally
            {
                balancesTemp.dispose();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBalanceTempSimIT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the temporary general ledger balances for balance updates in the <c>GeneralLedgerBalanceSim_IT</c> table.
    /// </summary>
    /// <returns>The temporary general ledger balances.</returns>
    /// <remarks>
    /// The general journal account entries are summed.
    /// </remarks>
    private GeneralLedgerBalanceSimTmp_IT createBalanceTempSimIT(GeneralLedgerBalanceRecIdTmp _unprocessedTransTemp)
    {
        GeneralJournalAccountEntrySim_IT generalJournalAccountEntrySim_IT;
        GeneralJournalEntrySim_IT generalJournalEntrySim_IT;
        FiscalCalendarPeriod fiscalCalendarPeriod;
        GeneralLedgerBalanceSimTmp_IT balancesTemp;
        GeneralLedgerBalanceSimTmp_IT balancesStagingTemp;
        NoYes isCreditAmount;
        NoYes isClosingTransactionType;

        insert_recordset balancesStagingTemp (AccountingDate, Ledger, PostingLayer, SimulationJournalNameId,
            LedgerDimension, IsCredit, PostingType,
            DebitAccountingCurrencyAmount, DebitReportingCurrencyAmount, // Store all amounts in the debit column initially
            Quantity, FiscalPeriodType)
        select AccountingDate, Ledger, PostingLayer, SimulationJournalNameId
            from generalJournalEntrySim_IT
            group by AccountingDate, Ledger, PostingLayer, SimulationJournalNameId
        join LedgerDimension, IsCredit, PostingType, sum(AccountingCurrencyAmount), sum(ReportingCurrencyAmount), sum(Quantity)
            from generalJournalAccountEntrySim_IT
                group by LedgerDimension, IsCredit, PostingType
                where generalJournalAccountEntrySim_IT.GeneralJournalEntry == generalJournalEntrySim_IT.RecId
        join Type
            from fiscalCalendarPeriod
                group by Type
                where fiscalCalendarPeriod.RecId == generalJournalEntrySim_IT.FiscalCalendarPeriod
        join _unprocessedTransTemp
            where _unprocessedTransTemp.RecordId == generalJournalEntrySim_IT.RecId;
        
        // Calculate debit balances excluding closing transactions
        isCreditAmount = NoYes::No;
        isClosingTransactionType = NoYes::No;

        insert_recordset balancesTemp (AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId,
            LedgerDimension, IsClosingTransaction, IsCredit,
            DebitAccountingCurrencyAmount, DebitReportingCurrencyAmount,
            Quantity)
        select AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId,
            LedgerDimension, isClosingTransactionType, isCreditAmount,
            sum(DebitAccountingCurrencyAmount), sum(DebitReportingCurrencyAmount),
            sum(Quantity) from balancesStagingTemp
        group by LedgerDimension, AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId, IsCredit
        where balancesStagingTemp.IsCredit == NoYes::No
            && (balancesStagingTemp.FiscalPeriodType != FiscalPeriodType::Closing
                || balancesStagingTemp.PostingType != LedgerPostingType::TransferOpeningClosing);

        // Calculate credit balances excluding closing transactions
        isCreditAmount = NoYes::Yes;
        isClosingTransactionType = NoYes::No;

        insert_recordset balancesTemp (AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId,
            LedgerDimension, IsClosingTransaction, IsCredit,
            CreditAccountingCurrencyAmount, CreditReportingCurrencyAmount,
            Quantity)
        select AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId,
            LedgerDimension, isClosingTransactionType, isCreditAmount,
            sum(DebitAccountingCurrencyAmount), sum(DebitReportingCurrencyAmount), // transfer debit column to credit since it was originally populated with the credit amount
        sum(Quantity) from balancesStagingTemp
        group by LedgerDimension, AccountingDate, Ledger, PostingLayer, FiscalPeriodType, IsCredit, SimulationJournalNameId
        where balancesStagingTemp.IsCredit == NoYes::Yes
            && (balancesStagingTemp.FiscalPeriodType != FiscalPeriodType::Closing
                || balancesStagingTemp.PostingType != LedgerPostingType::TransferOpeningClosing);

        // Calculate debit balances for closing transactions
        isCreditAmount = NoYes::No;
        isClosingTransactionType = NoYes::Yes;

        insert_recordset balancesTemp (AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId,
            LedgerDimension, IsClosingTransaction, IsCredit,
            DebitAccountingCurrencyAmount, DebitReportingCurrencyAmount,
            Quantity)
        select AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId,
            LedgerDimension, isClosingTransactionType, isCreditAmount,
            sum(DebitAccountingCurrencyAmount), sum(DebitReportingCurrencyAmount),
            sum(Quantity) from balancesStagingTemp
        group by LedgerDimension, AccountingDate, Ledger, PostingLayer, FiscalPeriodType, IsCredit, SimulationJournalNameId
        where balancesStagingTemp.IsCredit == NoYes::No
            && balancesStagingTemp.FiscalPeriodType == FiscalPeriodType::Closing
            && balancesStagingTemp.PostingType == LedgerPostingType::TransferOpeningClosing;       

        // Calculate credit balances for closing transactions
        isCreditAmount = NoYes::Yes;
        isClosingTransactionType = NoYes::Yes;

        insert_recordset balancesTemp (AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId,
            LedgerDimension, IsClosingTransaction, IsCredit,
            CreditAccountingCurrencyAmount, CreditReportingCurrencyAmount,
            Quantity)
        select AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId,
            LedgerDimension, isClosingTransactionType, isCreditAmount,
            sum(DebitAccountingCurrencyAmount), sum(DebitReportingCurrencyAmount), // transfer debit column to credit since it was originally populated with the credit amount
        sum(Quantity) from balancesStagingTemp
        group by LedgerDimension, AccountingDate, Ledger, PostingLayer, FiscalPeriodType, IsCredit, SimulationJournalNameId
        where balancesStagingTemp.IsCredit == NoYes::Yes
            && balancesStagingTemp.FiscalPeriodType == FiscalPeriodType::Closing
            && balancesStagingTemp.PostingType == LedgerPostingType::TransferOpeningClosing;

        return balancesTemp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBalancesSimIT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the current account balances with the balances from the new transaction entries.
    /// </summary>
    /// <param name = "_balanceTemp">The <c>GeneralLedgerBalanceSimTmp_IT</c> table instance containing balances from
    /// new transaction entries.</param>
    private void updateBalancesSimIT(GeneralLedgerBalanceSimTmp_IT _balanceTemp)
    {
        GeneralLedgerBalanceSim_IT balances;
        GeneralLedgerBalanceSim_IT existingBalances;

        // update the debits and credits separately because update_recordset
        // includes only one joined record in a 1:N relationship and separate
        // GeneralLedgerBalanceTmp records exist for debits and credits
        update_recordset balances
            setting DebitAccountingCurrencyAmount = balances.DebitAccountingCurrencyAmount + _balanceTemp.DebitAccountingCurrencyAmount,
                DebitReportingCurrencyAmount = balances.DebitReportingCurrencyAmount + _balanceTemp.DebitReportingCurrencyAmount,
                Quantity = balances.Quantity + _balanceTemp.Quantity
            join DebitAccountingCurrencyAmount, DebitReportingCurrencyAmount, Quantity from _balanceTemp
                where _balanceTemp.IsCredit == false
                    && _balanceTemp.AccountingDate == balances.AccountingDate
                    && _balanceTemp.Ledger == balances.Ledger
                    && _balanceTemp.PostingLayer == balances.PostingLayer
                    && _balanceTemp.FiscalPeriodType == balances.FiscalCalendarPeriodType
                    && _balanceTemp.LedgerDimension == balances.LedgerDimension
                    && _balanceTemp.IsClosingTransaction == balances.IsClosingTransaction
                    && _balanceTemp.SimulationJournalNameId == balances.SimulationJournalNameId;

        update_recordset balances
            setting CreditAccountingCurrencyAmount = balances.CreditAccountingCurrencyAmount + _balanceTemp.CreditAccountingCurrencyAmount,
                CreditReportingCurrencyAmount = balances.CreditReportingCurrencyAmount + _balanceTemp.CreditReportingCurrencyAmount,
                Quantity = balances.Quantity + _balanceTemp.Quantity
        join CreditAccountingCurrencyAmount, CreditReportingCurrencyAmount, Quantity from _balanceTemp
            where _balanceTemp.IsCredit == true
                && _balanceTemp.AccountingDate == balances.AccountingDate
                && _balanceTemp.Ledger == balances.Ledger
                && _balanceTemp.PostingLayer == balances.PostingLayer
                && _balanceTemp.FiscalPeriodType == balances.FiscalCalendarPeriodType
                && _balanceTemp.LedgerDimension == balances.LedgerDimension
                && _balanceTemp.IsClosingTransaction == balances.IsClosingTransaction
                && _balanceTemp.SimulationJournalNameId == balances.SimulationJournalNameId;

        // create new permanent records from the temp records
        insert_recordset balances (AccountingDate, Ledger, PostingLayer, FiscalCalendarPeriodType, SimulationJournalNameId,
            LedgerDimension,
            IsClosingTransaction,
            DebitAccountingCurrencyAmount, CreditAccountingCurrencyAmount,
            DebitReportingCurrencyAmount, CreditReportingCurrencyAmount,
            Quantity)
        select AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId,
            LedgerDimension,
            IsClosingTransaction,
            sum(DebitAccountingCurrencyAmount), sum(CreditAccountingCurrencyAmount),
            sum(DebitReportingCurrencyAmount), sum(CreditReportingCurrencyAmount),
            sum(Quantity) from _balanceTemp
        group by LedgerDimension,
            AccountingDate, Ledger, PostingLayer, FiscalPeriodType,
            IsClosingTransaction, SimulationJournalNameId
        notexists join existingBalances
            where existingBalances.AccountingDate == _balanceTemp.AccountingDate
                && existingBalances.Ledger == _balanceTemp.Ledger
                && existingBalances.PostingLayer == _balanceTemp.PostingLayer
                && existingBalances.FiscalCalendarPeriodType == _balanceTemp.FiscalPeriodType
                && existingBalances.LedgerDimension == _balanceTemp.LedgerDimension
                && existingBalances.IsClosingTransaction == _balanceTemp.IsClosingTransaction
                && existingBalances.SimulationJournalNameId == _balanceTemp.SimulationJournalNameId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReportingStructureDimensionsSimIT</Name>
				<Source><![CDATA[
    private void createReportingStructureDimensionsSimIT(GeneralLedgerBalanceRecIdTmp _unprocessedTransRecordIdsTemp)
    {
        GeneralLedgerBalanceReportingDimensionProviderSim_IT reportingDimensionProvider = GeneralLedgerBalanceReportingDimensionProviderSim_IT::newForContract(contract);
        reportingDimensionProvider.processUpdateAllReportingStructureDimensions(_unprocessedTransRecordIdsTemp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteProcessedTransactionsSimIT</Name>
				<Source><![CDATA[
    private int64 deleteProcessedTransactionsSimIT(GeneralLedgerBalanceRecIdTmp _unprocessedTransactionsRecordIds)
    {
        int64 recordCount = 0;

        using (var activityContext = simITLogger.processActivities().getActivityContextForBalanceContract(contract, methodStr(GeneralLedgerBalanceUpdateSim_IT_Extension, deleteProcessedTransactionsSimIT)))
        {
            GeneralJournalEntrySim_IT generalJournalEntrySimIT;

            // Delete the GeneralJournalEntrySim_IT records which were "reopened" (entry amounts were reversed)
            GeneralLedgerBalanceUnprocessedTransactionsSim_IT unprocessedSimulationReopenTransactions;

            delete_from generalJournalEntrySimIT
                exists join unprocessedSimulationReopenTransactions
                    where generalJournalEntrySimIT.RecId == unprocessedSimulationReopenTransactions.GeneralJournalEntry
                        && unprocessedSimulationReopenTransactions.IsReopenSimulation == NoYes::Yes
                exists join _unprocessedTransactionsRecordIds
                    where unprocessedSimulationReopenTransactions.GeneralJournalEntry == _unprocessedTransactionsRecordIds.RecordId;

            GeneralLedgerBalanceUnprocessedTransactionsSim_IT unprocessedTransactions;

            delete_from unprocessedTransactions
                exists join _unprocessedTransactionsRecordIds
                    where unprocessedTransactions.GeneralJournalEntry == _unprocessedTransactionsRecordIds.RecordId;

            recordCount = unprocessedTransactions.RowCount();
        }

        return recordCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateUnprocessedTransactionsSimIT</Name>
				<Source><![CDATA[
    private boolean updateUnprocessedTransactionsSimIT(GeneralLedgerBalanceRecIdTmp _unprocessedTransactionsRecordIds)
    {
        GeneralLedgerBalanceSqlStatementContract sqlStatementContract = GeneralLedgerBalanceSqlStatementContract::newForProcessContract(contract);

        GeneralLedgerBalanceSqlStatementProviderSim_IT statementProvider = GeneralLedgerBalanceSqlStatementProviderSim_IT::newForContract(sqlStatementContract);
        GeneralLedgerBalanceSqlStatement statement = statementProvider.buildUpdateUnprocessedTransactionsSimITSqlStatement(_unprocessedTransactionsRecordIds);

        System.Exception ex;

        using (var activityContext = simITLogger.processActivities().getActivityContextForBalanceContract(contract, methodStr(GeneralLedgerBalanceUpdateSim_IT_Extension, updateUnprocessedTransactionsSimIT)))
        {
            try
            {
                int64 recordCount = statementProvider.executeNonQuery(statement);

                return recordCount > 0;
            }
            catch (ex)
            {
                if (GeneralLedgerBalanceExceptionHandler::shouldExceptionBeRetriedWithLogging(
                    activityContext.getActivity().GetActivityName(),
                    methodStr(GeneralLedgerBalanceUpdateSim_IT_Extension, updateUnprocessedTransactionsSimIT),
                    ex))
                {
                    retry;
                }

                throw ex;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasWorkSimIT</Name>
				<Source><![CDATA[
    private boolean hasWorkSimIT()
    {
        GeneralLedgerBalanceUnprocessedTransactionsSim_IT unprocessedTransactions;
        GeneralJournalEntrySim_IT generalJournalEntry;

        select firstonly RecId from unprocessedTransactions
            where unprocessedTransactions.State == GeneralLedgerBalanceCalculationState::Pending
            join RecId from generalJournalEntry
                where generalJournalEntry.RecId == unprocessedTransactions.GeneralJournalEntry
                    && generalJournalEntry.Ledger == contract.parmLedgerRecId()
                    && (contract.parmFromDate() == dateNull() || generalJournalEntry.AccountingDate >= contract.parmFromDate())
                    && (contract.parmToDate() == dateNull() || generalJournalEntry.AccountingDate <= contract.parmToDate());

        return unprocessedTransactions.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preProcessSimIT</Name>
				<Source><![CDATA[
    private boolean preProcessSimIT(GeneralLedgerBalanceRecIdTmp _unprocessedTransactionsTemp)
    {
        int64 recordCount = this.updateUnprocessedTransactionsSimIT(_unprocessedTransactionsTemp);

        return recordCount > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProcessSimIT</Name>
				<Source><![CDATA[
    private void postProcessSimIT(GeneralLedgerBalanceRecIdTmp _unprocessedTransactionsTemp)
    {
        int64 deletedCount = this.deleteProcessedTransactionsSimIT(_unprocessedTransactionsTemp);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>