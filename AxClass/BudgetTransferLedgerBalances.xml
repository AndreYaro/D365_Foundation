<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetTransferLedgerBalances</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetTransferLedgerBalances</c> class contains the logic to create budget transaction lines
///    from daily ledger balances.
/// </summary>
class BudgetTransferLedgerBalances extends RunBaseBatch implements BatchRetryable
{
    #OCCRetryCount
    recId           budgetTransactionHeaderId;
    Periods         periodQuantity;
    PeriodUnit      periodType;
    TransTxt        text;
    Factor          factor;
    RealBase        minimum;
    RealBase        roundOff;
    NoYes           transferCreditsAsRevenueType;

    QueryRun                    query;
    BudgetTransactionManager    budgetTransactionManager;

    // key = [DAVC, accounting date, is credit]
    // value = [total accouting amount, quantity]
    Map ledgerDimensionDailyBalances;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        budgetTransactionHeaderId,
        periodQuantity,
        periodType,
        text,
        factor,
        minimum,
        roundOff,
        transferCreditsAsRevenueType
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a dialog box.
    /// </summary>
    /// <returns>
    ///    The initialized dialog box.
    /// </returns>
    public Object dialog()
    {
        return Dialog::newFormnameRunbase(formstr(BudgetTransferLedgerBalances), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets class values to what is stored in the <c>SysLastValues</c> object.
    /// </summary>
    /// <remarks>
    ///    Does not call the <c>super</c> method so that values are not retrieved when a new instance of this
    ///    class is created.
    /// </remarks>
    public void getLast()
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the parameters for the transfer operation.
    /// </summary>
    /// <param name="_periodQuantity">
    ///    The number of periods that balances must shift when they are transferred to the budget.
    /// </param>
    /// <param name="_periodType">
    ///    Indicates the unit of measure for the quantity of periods.
    /// </param>
    /// <param name="_text">
    ///    A comment that is applied to each record of the budget transaction line that is created during the
    ///    transfer.
    /// </param>
    /// <param name="_factor">
    ///    A multiplier to apply to the ledger balances amount and quantity that are transferred to the budget.
    /// </param>
    /// <param name="_minimum">
    ///    The minimum ledger balance that must be satisfied for the ledger transaction to be included in the
    ///    transfer.
    /// </param>
    /// <param name="_roundOff">
    ///    The value to round the amount and quantity.
    /// </param>
    /// <param name="_transferCreditsAsRevenueType">
    ///    Indicates whether to create the credit amounts as revenue budget amounts.
    /// </param>
    public void initParameters(Periods         _periodQuantity,
                               PeriodUnit      _periodType,
                               TransTxt        _text,
                               Factor          _factor,
                               RealBase        _minimum,
                               RealBase        _roundOff,
                               NoYes           _transferCreditsAsRevenueType)
    {
        periodQuantity  = _periodQuantity;
        periodType      = _periodType;
        text            = _text;
        factor          = _factor;
        minimum         = _minimum;
        roundOff        = _roundOff;
        transferCreditsAsRevenueType = _transferCreditsAsRevenueType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        QueryFilter filter;
        QueryBuildDataSource qbds;

        super();

        query = new QueryRun(querystr(BudgetTransferLedgerBalances));
        qbds = query.query().dataSourceTable(tablenum(GeneralJournalEntry));

        // Don't allow users to save queries.  A new query must be defined for each transfer.
        // If this wasn't restricted the start and end date from the previous query could be used.
        query.saveUserSetup(false);

        // Add a query filter for the AccountingDate field.
        filter = this.getRunBase().queryRun().query().addQueryFilter(qbds, fieldstr(GeneralJournalEntry, AccountingDate));

        // Lock the query filter for the AccountingDate field so the user can view but not edit the filter and its criteria.
        // Fields on the BudgetTransferLedgerBalances form allow the end user to update the filter criteria.
        filter.status(1);

        // Add a query filter for the Ledger field.
        filter = this.getRunBase().queryRun().query().addQueryFilter(qbds, fieldstr(GeneralJournalEntry, Ledger));

        // Hide the query filter for the Ledger field.
        // The Ledger field is not exposed to end users because the value is always set to the RecId of the current Ledger and cannot be changed.
        filter.status(2);

        // Set the Ledger field's filter criteria to the current Ledger.
        filter.value(SysQuery::value(Ledger::current()));

        budgetTransactionManager = BudgetTransactionManager::construct();

        ledgerDimensionDailyBalances = new Map(Types::Container, Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, query ? query.pack() : connull()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetTransactionHeaderId</Name>
				<Source><![CDATA[
    public recId parmBudgetTransactionHeaderId(recId _budgetTransactionHeaderId = budgetTransactionHeaderId)
    {
        budgetTransactionHeaderId = _budgetTransactionHeaderId;
        return budgetTransactionHeaderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves an instance of the <c>QueryRun</c> class for an instance of the
    ///    <c>BudgetTransferLedgerBalances</c> class.
    /// </summary>
    /// <returns>
    ///    A instance of the <c>QueryRun</c> class.
    /// </returns>
    public QueryRun queryRun()
    {
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates budget transaction lines by using daily ledger balances.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    A general error occurred.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    An unrecoverable update conflict occurred outside the scope of another transaction.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An unrecoverable update conflict occurred inside the scope of another transaction.
    /// </exception>
    public void run()
    {
        this.transferLedgerBalancesToBudget();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the transfer operation runs as impersonated.
    /// </summary>
    /// <returns>
    ///    Always true.
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferLedgerBalancesToBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates budget transaction lines by using daily ledger balances.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    A general error occurred.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    An unrecoverable update conflict occurred outside the scope of another transaction.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An unrecoverable update conflict occurred inside the scope of another transaction.
    /// </exception>
    private void transferLedgerBalancesToBudget()
    {
        boolean                         isCredit;
        Futures                         futures;
        AmountMST                       totalAccountingAmount;
        Qty                             totalQuantity;
        TransDate                       transactionDate;
        MapEnumerator                   mapEnumerator;
        GeneralJournalAccountEntry      generalJournalAccountEntry;
        GeneralJournalEntry             generalJournalEntry;
        BudgetTransactionLine           budgetTransactionLine;
        LedgerDimensionBudget           ledgerDimensionBudget;
        BudgetTransactionHeader         budgetTransactionHeader = BudgetTransactionHeader::find(budgetTransactionHeaderId);
        LineNum                         currentLineNumber = budgetTransactionHeader.maxLineNumber() + 1;
        Set                             ledgerDimensionsWithErrors = new Set(Types::Int64);
        CurrencyCode                    accountingCurrency;

        setPrefix("@Budget:RegisterEntryTransferBalancesDescription");

        if ((BudgetTransactionHeader::checkExist(budgetTransactionHeaderId) == false) || (budgetTransactionHeader.isUserBlocked() == true))
        {
            // Budget transaction does not exist or is in use by another user; throw error to cancel the transfer.
            throw error("@SYS131643");
        }

        if (budgetTransactionHeader.checkBudgetTransAvailableToComplete() == false)
        {
            // Budget transaction has already been processed; throw error to cancel the transfer.
            checkFailed("@SYS23025");
            throw error("@SYS131643");
        }

        accountingCurrency = Ledger::accountingCurrency();

        if (BudgetTransactionManager::validateCurrency(accountingCurrency) == false)
        {
            // The currency that would be used during the transfer failed validation; throw error to cancel the transfer.
            throw error("@SYS131643");
        }

        try
        {
            if (transferCreditsAsRevenueType)
            {
                // If credits need to be classified as revenue budget, add a group by for the IsCredit field.
                query.query().dataSourceTable(tablenum(GeneralJournalAccountEntry)).addGroupByField(fieldnum(GeneralJournalAccountEntry, IsCredit));
            }

            // Run the query for posted ledger amounts and aggregate the results by budget ledger dimension.
            while (query.next())
            {
                totalAccountingAmount = 0;
                totalQuantity = 0;

                generalJournalAccountEntry = query.get(tablenum(GeneralJournalAccountEntry)) as GeneralJournalAccountEntry;
                generalJournalEntry = query.get(tablenum(GeneralJournalEntry)) as GeneralJournalEntry;

                ledgerDimensionBudget = BudgetTransactionManager::saveBudgetLedgerDimension(generalJournalAccountEntry.LedgerDimension);

                // Add any dimension attributes that are not in use by the active budget structure to the cache.
                // This cache will be used at the end of the process to warn users that some dimension attributes
                // were not transferred to budget transactions.
                budgetTransactionManager.cacheDimAttributesNotBudgetEnabled(generalJournalAccountEntry.LedgerDimension);

                if (ledgerDimensionBudget != 0)
                {
                    isCredit = transferCreditsAsRevenueType ? generalJournalAccountEntry.IsCredit : false;

                    if (ledgerDimensionDailyBalances.exists([ledgerDimensionBudget, generalJournalEntry.AccountingDate, isCredit]))
                    {
                        // Get the existing values for the posted amount's ledger dimension and date.
                        [totalAccountingAmount, totalQuantity] = ledgerDimensionDailyBalances.lookup([ledgerDimensionBudget, generalJournalEntry.AccountingDate, isCredit]);
                    }

                    // Add the posted ledger amount and quantity to the totals.
                    totalAccountingAmount += generalJournalAccountEntry.AccountingCurrencyAmount;
                    totalQuantity += generalJournalAccountEntry.Quantity;

                    // Insert the values for the ledger dimension, date, and crediting.
                    ledgerDimensionDailyBalances.insert(
                        [ledgerDimensionBudget, generalJournalEntry.AccountingDate, isCredit],
                        [totalAccountingAmount, totalQuantity]);
                }
            }

            ttsbegin;

            // Create budget transaction lines for each combination of budget ledger dimension, date, and crediting.
            if (ledgerDimensionDailyBalances.elements() > 0)
            {
                mapEnumerator = ledgerDimensionDailyBalances.getEnumerator();

                while (mapEnumerator.moveNext())
                {
                    [ledgerDimensionBudget, transactionDate, isCredit] = mapEnumerator.currentKey();
                    [totalAccountingAmount, totalQuantity] = mapEnumerator.currentValue();

                    if (ledgerDimensionsWithErrors.in(ledgerDimensionBudget) == false)
                    {
                        // Attempt to create the line if the budget ledger dimension hasn't failed validation yet.

                        // Shift the date by the amount specified in the period quantity and period type.
                        futures         = Futures::construct(transactionDate, periodQuantity, periodType);
                        transactionDate = futures.next();

                        budgetTransactionLine.clear();
                        budgetTransactionLine.LineNumber                = currentLineNumber;
                        budgetTransactionLine.BudgetTransactionHeader   = budgetTransactionHeaderId;
                        budgetTransactionLine.TransactionCurrency       = accountingCurrency;
                        budgetTransactionLine.Date                      = transactionDate;
                        budgetTransactionLine.TransactionCurrencyAmount = round(CurrencyExchangeHelper::amount(totalAccountingAmount * factor, budgetTransactionLine.TransactionCurrency), roundOff);
                        budgetTransactionLine.AccountingCurrencyAmount  = BudgetTransactionManager::calculateTransAmountToAccountingAmount(
                                                                            budgetTransactionLine.TransactionCurrencyAmount,
                                                                            budgetTransactionLine.TransactionCurrency,
                                                                            budgetTransactionLine.Date);
                        budgetTransactionLine.Quantity                  = round(totalQuantity * factor, roundOff);
                        budgetTransactionLine.Comment                   = text;
                        budgetTransactionLine.LedgerDimension           = ledgerDimensionBudget;
                        budgetTransactionLine.BudgetType                = isCredit ? BudgetType::Revenue : BudgetType::Expense;

                        if (abs(budgetTransactionLine.TransactionCurrencyAmount) >= minimum)
                        {
                            if (budgetTransactionLine.validateWrite() == true &&
                                BudgetTransactionManager::validateLedgerDimension(budgetTransactionLine.LedgerDimension, budgetTransactionLine.Date) == true)
                            {
                                budgetTransactionLine.write();
                                currentLineNumber += 1;
                            }
                            else
                            {
                                // Validation errors occurred; warn the user the ledger dimension has been excluded from the transfer.
                                warning(strfmt("@SYS130656", LedgerDimensionFacade::getDisplayValueForLedgerDimension(budgetTransactionLine.LedgerDimension)));

                                // Add the ledger dimension to the list that failed validation.
                                ledgerDimensionsWithErrors.add(budgetTransactionLine.LedgerDimension);
                            }
                        }
                    }
                }
            }

            ttscommit;

            budgetTransactionManager.showWarningsDimAttsNotBudgetEnabled("@SYS300421");
        }
        catch (Exception::Error)
        {
            throw error("@SYS21628");
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean     ret;
        Version     version = RunBase::getVersion(_packedClass);
        container   packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = _packedClass;

                if (SysQuery::isPackedOk(packedQuery))
                {
                    query = new QueryRun(packedQuery);
                }
                else
                {
                    query = new QueryRun(querystr(BudgetTransferLedgerBalances));
                }

                ret = true;
                break;

            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>BudgetTransferLedgerBalances</c> class.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>BudgetTransferLedgerBalances</c> class.
    /// </returns>
    /// <remarks>
    ///    Use the following procedure to customize or extend the
    ///    <c>
    ///       BudgetTransferLedgerBalances
    ///    </c>
    ///     class.
    ///    <list type="number">
    ///       <item>
    ///          <description>
    ///             Create a new class that derives from the <c>BudgetTransferLedgerBalances</c> class.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Overlayer the <c>construct</c> method on the <c>BudgetTransferLedgerBalances</c> class so that it
    ///             returns an instance of the derived class.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Override the methods from the <c>BudgetTransferLedgerBalances</c> class that you want to customize
    ///             or extend in your derived class.
    ///          </description>
    ///       </item>
    ///    </list>
    ///     This procedure helps make sure that your customizations are maintained if the base version of the
    ///    <c>
    ///       BudgetTransferLedgerBalances
    ///    </c>
    ///     class is changed, minimizing code conflicts during an upgrade. For more information, see <see cref="Best Practices for Static Construct Methods" />
    ///    .
    /// </remarks>
    public static BudgetTransferLedgerBalances construct()
    {
        return new BudgetTransferLedgerBalances();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS17581";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        BudgetTransferLedgerBalances budgetTransferLedgerBalances;

        switch (args.dataset())
        {
            case tablenum(BudgetTransactionHeader):
                budgetTransferLedgerBalances = BudgetTransferLedgerBalances::construct();
                budgetTransferLedgerBalances.parmBudgetTransactionHeaderId(args.record().RecId);
                break;
            default:
                throw error("@SYS18626");
        }

        if (budgetTransferLedgerBalances.prompt())
        {
            budgetTransferLedgerBalances.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>