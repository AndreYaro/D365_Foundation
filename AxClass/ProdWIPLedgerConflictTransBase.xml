<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdWIPLedgerConflictTransBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdWIPLedgerConflictTransBase</c> class is the base class for the all tasks in the
/// <c>ProdWIPLedgerConflict</c> report.
/// </summary>
public abstract class ProdWIPLedgerConflictTransBase implements CostILedgerConflict, CostIAsyncRunnable
{
    InventLedgerConflictContract        inventLedgerConflictContract;
    DimensionAttributeValue             dimAttrValueMainAccount;
    CostReconciliationMethodStrategy    reconciliationMethodStrategy;

    #define.CurrentVersion(1)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addConflictMessageFinancial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a conflict message to a specified list of conflicts.
    /// </summary>
    /// <param name="_conflicts">
    /// The list of conflicts to which to add the conflict message.
    /// </param>
    /// <param name="_postingType">
    /// The transactions posting type.
    /// </param>
    /// <param name="_itemGroupId">
    /// The item group for the conflicting transaction.
    /// </param>
    /// <remarks>
    /// This method is called when a conflict is detected on a financial transaction. This method does not
    /// verify that a conflict occurred. This verification must be done before this method is called.
    /// </remarks>
    protected void addConflictMessageFinancial(
        List                        _conflicts,
        LedgerPostingType           _postingType,
        InventModelGroupId          _itemGroupId)
    {
        if (InventModelGroup::find(_itemGroupId).PostOnhandFinancial == NoYes::No
            || _postingType == LedgerPostingType::None)
        {
            _conflicts.addEnd(InventLedgerConflictMessage::newFromParm(strFmt("@GLS3800121", _itemGroupId)));
        }
        else
        {
            _conflicts.addEnd(InventLedgerConflictMessage::newFromParm(strFmt("@GLS3800122", _itemGroupId)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReferenceCategoryProdLineOrProduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the reference category type of the transaction.
    /// </summary>
    /// <param name="_referenceCategory">
    /// The reference category of the transaction.
    /// </param>
    /// <returns>
    /// true if the inventory transaction is a transfer or a journal type; otherwise, false.
    /// </returns>
    protected boolean isReferenceCategoryProdLineOrProduction(InventTransType _referenceCategory)
    {
        return _referenceCategory == InventTransType::Production
            || _referenceCategory == InventTransType::ProdLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWIPAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified account number is a WIP account.
    /// </summary>
    /// <param name="_mainAccountId">
    /// The account number to check.
    /// </param>
    /// <returns>
    /// true if the account number is an WIP account; otherwise, false.
    /// </returns>
    protected boolean isWIPAccount(MainAccountNum _mainAccountId)
    {
        if (!reconciliationMethodStrategy)
        {
            reconciliationMethodStrategy = CostReconciliationMethodStrategy::newFromParameters();
        }
        return reconciliationMethodStrategy.isWIPAccount(_mainAccountId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWIPPostingType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a posting type is a WIP posting type.
    /// </summary>
    /// <param name="_ledgerPostingType">
    /// The <c>LedgerPostingType</c> to check.
    /// </param>
    /// <returns>
    /// true if a posting type is a WIP posting type; otherwise, false.
    /// </returns>
    protected boolean isWIPPostingType(LedgerPostingType _ledgerPostingType)
    {
        boolean ret;

        switch (_ledgerPostingType)
        {
            case LedgerPostingType::ProdPicklistOffsetAccount:
            case LedgerPostingType::ProdReportFinishedOffsetAccount:
            case LedgerPostingType::ProdIssueOffsetAccount:
            case LedgerPostingType::ProdReceiptOffsetAccount:
            case LedgerPostingType::ProdLeanWIPServiceReceipt:
            case LedgerPostingType::ProdLeanWIPServiceClearing:
            case LedgerPostingType::ProdWIPIssue:
            case LedgerPostingType::ProdWIPValuation:
            case LedgerPostingType::IndirectEstimatedAbsorptionOffset:
            case LedgerPostingType::IndirectAbsorptionOffset:
            case LedgerPostingType::ProdWrkCtrIssueOffsetAccount:
                ret = true;
                break;
            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container  pack()
    {
        return [#CurrentVersion, inventLedgerConflictContract.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLedgerConflictContract</Name>
				<Source><![CDATA[
    public InventLedgerConflictContract parmInventLedgerConflictContract(InventLedgerConflictContract _inventLedgerConflictContract = inventLedgerConflictContract)
    {
        inventLedgerConflictContract = _inventLedgerConflictContract;

        return inventLedgerConflictContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int         version = RunBase::getVersion(_packedClass);
        container   packedInventLedgerConflictContract;

        switch (version)
        {
            case #CurrentVersion:
                [version, packedInventLedgerConflictContract] = _packedClass;
                if (packedInventLedgerConflictContract)
                {
                    inventLedgerConflictContract = InventLedgerConflictContract::construct();
                    return inventLedgerConflictContract.unpack(packedInventLedgerConflictContract);
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runAsync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and runs as an asynchronous task.
    /// </summary>
    /// <returns>The created asynchronous task.</returns>
    public abstract System.Threading.Tasks.Task runAsync()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMainAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that a conflict occurred on the account and the offset account for the transaction.
    /// </summary>
    /// <param name="_conflicts">
    /// A list of conflicts to which to add the conflict message.
    /// </param>
    /// <param name="_ledgerDimension">
    /// The ledger dimension of the transaction.
    /// </param>
    /// <param name="_ledgerDimensionOffset">
    /// The ledger offset dimension of the transaction.
    /// </param>
    /// <param name="_postingType">
    /// The account posting type of the transaction.
    /// </param>
    /// <param name="_postingTypeOffset">
    /// The offset account posting type of the transaction.
    /// </param>
    /// <remarks>
    /// This rule can only be applied for the <c>Item</c> type.
    /// </remarks>
    protected void validateMainAccount(
        List                        _conflicts,
        LedgerDimensionAccount  _ledgerDimension,
        LedgerDimensionAccount  _ledgerDimensionOffset,
        LedgerPostingType       _postingType,
        LedgerPostingType       _postingTypeOffset)
    {
        boolean isAccountWIP            = this.isWIPAccount(LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(_ledgerDimension));
        boolean isAccountOffsetWIP      = this.isWIPAccount(LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(_ledgerDimensionOffset));
        boolean isPostingTypeOffsetWIP  = this.isWIPPostingType(_postingTypeOffset);

        if (isPostingTypeOffsetWIP && !isAccountOffsetWIP)
        {
            _conflicts.addEnd(InventLedgerConflictMessage::newFromParm(strFmt("@GLS3800103", _postingTypeOffset), -1));
        }
        if (!isPostingTypeOffsetWIP && isAccountOffsetWIP)
        {
            _conflicts.addEnd(InventLedgerConflictMessage::newFromParm(strFmt("@GLS3800104", _postingTypeOffset), -1));
        }
        if (isAccountWIP && isAccountOffsetWIP)
        {
            _conflicts.addEnd(InventLedgerConflictMessage::newFromParm(strFmt("@GLS3800104", _postingType), -1));
        }
        if (isAccountWIP && !isAccountOffsetWIP)
        {
            _conflicts.addEnd(InventLedgerConflictMessage::newFromParm(strFmt("@GLS3800104", _postingType), -2));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>