<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetLVPTransferProposal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AssetLVPTransferProposal</c> class creates the necessary <c>LedgerJournalTable</c>,
///    <c>ledgerJournalTableLedgerJournalTrans</c>, and <c>LedgerJournalTrans_Asset</c> records for the
///    transfer of value model assets to a low value pool.
/// </summary>
class AssetLVPTransferProposal
{
    private const str FeatureReference = 'AU-00007';

    AssetId                     assetId;
    AssetBookId                 bookId;
    AssetBookId                 filterBookId;
    AssetTransDate              transDate;
    LedgerJournalNameId         journalName;
    Voucher                     voucher;
    LedgerJournalId             journalNum;
    AssetLowValuePoolType_AU    lvpType;
    Integer                     session;
    UTCTimestamp                timeStamp;
    CurrentOperationsTax        postingLayer;
    /// <summary>
    ///    Creates the necessary <c>LedgerJournalTable</c> and <c>ledgerJournalTable</c> records to transfer
    ///    value model assets to a low value pool.
    /// </summary>
    /// <returns>
    ///    true if validation and processing is successful; otherwise, false.
    /// </returns>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTransactions</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean createTransactions()
    {
        LedgerJournalTable                  ledgerJournalTable;
        LedgerJournalName                   ledgerJournalName;
        Amount                              amount;
        AssetSumCalc_Trans                  assetSumCalc_Trans;
        JournalVoucherNum                   journalVoucherNum;
        AssetBook                           toAssetBook;
        AssetBook                           fromAssetBook;
        AssetLVPTransferProposal_AU      assetsToTransfer

        ;

        if (!this.validate())
        {
            return false;
        }

        toAssetBook = AssetBook::find(assetId, bookId);

        ttsbegin;

        journalNum = JournalTableData::newTable(ledgerJournalTable).nextJournalId();

        ledgerJournalTable.JournalNum = journalNum;
        ledgerJournalTable.JournalName = journalName;
        ledgerJournalName = LedgerJournalName::find(ledgerJournalTable.JournalName);

        ledgerJournalTable.Name                     = "@SYS114016";
        ledgerJournalTable.NumberSequenceTable      = ledgerJournalName.NumberSequenceTable;
        ledgerJournalTable.parmOffsetLedgerDimension(ledgerJournalName.parmOffsetLedgerDimension());
        ledgerJournalTable.JournalType              = ledgerJournalName.JournalType;
        ledgerJournalTable.DocumentNum              = ledgerJournalName.DocumentNum;
        ledgerJournalTable.FixedExchRate            = ledgerJournalName.FixedExchRate;
        ledgerJournalTable.DetailSummaryPosting     = ledgerJournalName.DetailSummary;
        ledgerJournalTable.FixedOffsetAccount       = ledgerJournalName.FixedOffsetAccount;
        ledgerJournalTable.CurrencyCode             = ledgerJournalName.CurrencyCode;
        ledgerJournalTable.CurrentOperationsTax     = postingLayer;
        ledgerJournalTable.setDefaultDimension(ledgerJournalName);
        ledgerJournalTable.insert();

        while select AssetId, BookId from assetsToTransfer
            where assetsToTransfer.TransferToPool == true
                && assetsToTransfer.SessionId == session
                && assetsToTransfer.utcTimestamp == timeStamp
        {
            fromAssetBook = AssetBook::find(assetsToTransfer.AssetId, assetsToTransfer.BookId);

            assetSumCalc_Trans = AssetSumCalc_Trans::newAssetYear(assetsToTransfer.AssetId, assetsToTransfer.BookId);
            amount  = assetSumCalc_Trans.netBookValue();

            journalVoucherNum = new JournalVoucherNum(JournalTableData::newTable(LedgerJournalTable::find(journalNum)));
            voucher = journalVoucherNum.getNew(true);

            this.createTransLine(-amount,fromAssetBook,AssetTransTypeJournal::AcquisitionAdj, toAssetBook.AssetId);
            this.createTransLine(amount,toAssetBook,AssetTransTypeJournal::Acquisition);

            journalVoucherNum.used(voucher);
        }

        ttscommit;
        info (strfmt("@SYS114598",journalName,journalNum));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates <c>LedgerJournalTrans</c> and <c>LedgerJournalTrans_Asset</c> transactions by using the
    ///    given parameters.
    /// </summary>
    /// <param name="_paymentAmount">
    ///    The amount of the transaction.
    /// </param>
    /// <param name="_assetBook">
    ///    The asset book of the transaction.
    /// </param>
    /// <param name="_assetTransType">
    ///    The type of the asset transaction journal.
    /// </param>
    /// <param name="_lvpTransferId">
    ///    The transfer to asset ID; optional.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createTransLine(AmountCur                       _paymentAmount,
                            AssetBook                       _assetBook,
                            AssetTransTypeJournal           _assetTransType,
                            AssetLowValuePoolTransferId_AU  _lvpTransferId = '')

    {
        LedgerJournalTrans            ledgerJournalTrans;
        LedgerJournalTrans_Asset      ledgerJournalTrans_Asset;
        TransactionTxt                transactionTxt;
        LedgerDimensionDefaultAccount defaultAccount;

        transactionTxt    = TransactionTxt::construct(LedgerTransTxt::FixedAssetsPostingLedger);
        transactionTxt.setDate(transDate);
        transactionTxt.setVoucher(voucher);
        transactionTxt.setKey1(_assetBook.AssetId);
        transactionTxt.setKey2(AssetTable::find(_assetBook.AssetId).AssetGroup);

        ledgerJournalTrans.clear();

        ledgerJournalTrans.JournalNum           = journalNum;
        ledgerJournalTrans.Voucher              = voucher;
        ledgerJournalTrans.parmAccount(_assetBook.AssetId, LedgerJournalACType::FixedAssets);
        ledgerJournalTrans.PostingProfile       = AssetTable::find(_assetBook.AssetId).postingProfile(_assetBook.BookId);
        ledgerJournalTrans.TransactionType      = LedgerTransType::FixedAssets;
        ledgerJournalTrans.TransDate            = transDate;
        ledgerJournalTrans.CurrencyCode         = Ledger::accountingCurrency();
        ledgerJournalTrans.ExchRate             = ExchangeRateHelper::exchRate(ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate);
        ledgerJournalTrans.DefaultDimension     = AssetTable::find(_assetBook.AssetId).defaultDimension(_assetBook.BookId);
        ledgerJournalTrans.Txt                  = transactionTxt.txt();
        ledgerJournalTrans.Company              = curext();

        if (_paymentAmount > 0)
            ledgerJournalTrans.AmountCurDebit   = CurrencyExchangeHelper::amount(_paymentAmount, ledgerJournalTrans.CurrencyCode);
        else
            ledgerJournalTrans.AmountCurCredit  = CurrencyExchangeHelper::amount(-_paymentAmount, ledgerJournalTrans.CurrencyCode);

        ledgerJournalTrans.insert();

        // Setup LedgerJouranlTrans_Asset
        ledgerJournalTrans_Asset.RefRecId       = ledgerJournalTrans.RecId;
        ledgerJournalTrans_Asset.BookId         = _assetBook.BookId;
        ledgerJournalTrans_Asset.TransType      = _assetTransType;
        ledgerJournalTrans_Asset.AssetId        = ledgerJournalTrans.parmAccount();
        ledgerJournalTrans_Asset.Company        = ledgerJournalTrans.Company;

        if (_assetTransType == AssetTransTypeJournal::Acquisition)
        {
            ledgerJournalTrans_Asset.LowValuePoolType_AU = lvpType;
        }
        else
        {
            ledgerJournalTrans_Asset.lvpTransferId_AU = _lvpTransferId;
        }

        ledgerJournalTrans_Asset.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>AssetLVPTransferProposal</c> class by setting the session ID and timestamp.
    /// </summary>
    /// <param name="_session">
    ///    The session ID.
    /// </param>
    /// <param name="_timeStamp">
    ///    The timestamp.
    /// </param>
    /// <remarks>
    ///    When processing the transfer proposal records, only records with this session ID and timestamp will
    ///    be considered.
    /// </remarks>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void init(
                Integer                     _session,
                UTCTimestamp                _timeStamp)
    {
        ;

        session = _session;
        timeStamp = _timeStamp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new()

    {
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AssetId parmAssetId(AssetId _assetId = assetId)
    {
        ;
        assetId = _assetId;

        return assetId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBookId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AssetBookId parmBookId(AssetBookId _bookId = bookId)
    {
        ;
        bookId = _bookId;

        return bookId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentOperationsTax</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CurrentOperationsTax parmCurrentOperationsTax(CurrentOperationsTax _postingLayer = postingLayer)
    {
        ;
        postingLayer = _postingLayer;

        return postingLayer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFilterBookId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AssetBookId parmFilterBookId(AssetBookId _bookId = filterBookId)
    {
        ;
        filterBookId = _bookId;

        return filterBookId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerJournalNameId parmJournalName(LedgerJournalNameId _journalName = journalName)
    {
        ;
        journalName = _journalName;

        return journalName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLowValuePoolType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AssetLowValuePoolType_AU parmLowValuePoolType(AssetLowValuePoolType_AU _lvpType = lvpType)
    {
        ;
        lvpType = _lvpType;

        return lvpType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AssetTransDate parmTransDate(AssetTransDate _transDate = transDate)
    {
        ;
        transDate = _transDate;

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the class state.
    /// </summary>
    /// <returns>
    ///    true if the class state is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The following conditions are validated:
    ///    <list type="number">
    ///       <item>
    ///          <description>The asset exists</description>
    ///       </item>
    ///       <item>
    ///          <description>The value model exists for the asset</description>
    ///       </item>
    ///       <item>
    ///          <description>The transaction date is valid</description>
    ///       </item>
    ///       <item>
    ///          <description>The journal name is not empty</description>
    ///       </item>
    ///       <item>
    ///          <description>The transfer to value model is a low value pool</description>
    ///       </item>
    ///       <item>
    ///          <description>The transfer to asset uses low value pool depreciation</description>
    ///       </item>
    ///    </list>
    /// </remarks>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean validate()
    {
        boolean      ret = true;
        ;
        if (!AssetTable::exist(assetId))
        {
            ret = checkFailed(strfmt("@SYS67413",assetId));     // Asset does not exist
        }

        if (!AssetBook::exist(assetId, bookId))
        {
            ret = checkFailed(strfmt("@FixedAssets:FA_MessageError_BookDoesNotExistForFixedAsset",bookId, assetId));     // Value model for asset does not exist
        }

        if (!transDate)
        {
            ret = checkFailed(strfmt("@SYS18414",transDate));   // transdate not filled in
        }

        if (!journalName)
        {
            ret = checkFailed(strfmt("@SYS21496",journalName));
        }

        if (!lvpType)
        {
            ret = checkFailed("@SYS114015");                   //low value pool type not filled in
        }

        if (!AssetBook::isLowValuePoolBook(bookId))
        {
            ret = checkFailed("@SYS114138");                 // value model not set up for low value pool
        }

        if (!AssetTable::isLowValuePoolAsset(assetId))
        {
            ret = checkFailed("@SYS114139");                 // asset not set up for low value pool
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes a new instance of the <c>AssetLVPTransferProposal</c> class.
    /// </summary>
    /// <param name="_session">
    ///    The session ID.
    /// </param>
    /// <param name="_timeStamp">
    ///    The timestamp.
    /// </param>
    /// <returns>
    ///    An instance of the <c>AssetDepBookLVPTransferProposal</c> class.
    /// </returns>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static AssetLVPTransferProposal construct(
                Integer                     _session,
                UTCTimestamp                _timeStamp)
    {
        AssetLVPTransferProposal transferProposal;

        ;

        transferProposal = new AssetLVPTransferProposal();
        transferProposal.init(_session, _timeStamp);

        return transferProposal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public ClassDescription description()
    {
        return "@FixedAssets:FA_EntityActionButton_TransferAssetsToLowValuePool";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>