<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTrackingDimTracingHierarchy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventTrackingDimTracingHierarchy</c> class holds hierarchy information for tracking dimension tracing functionality.
/// </summary>
class InventTrackingDimTracingHierarchy
{
    InventTrackingDimTracingRelations   inventTrackingDimTracingRelations;
    ForwardBackward                     traceDirection;

    int                                 nextNodeId;

    Map                                 node2ParentNodeMap;
    Map                                 nodeInfoMap;
    Map                                 childNodesMap;              // Map with child nodes for nodes.
    Set                                 childNodesCalculated;       // Nodes for which child nodes has been calculated.

    private boolean includeWarehouseSpecificInventoryTransactions;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateChildNodes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculate the child nodes to show/include under the specified node.
    /// </summary>
    /// <param name="_nodeId">
    ///    The node for which children are calculated.
    /// </param>
    protected void calculateChildNodes(int _nodeId)
    {
        List            childTransactions;
        ListEnumerator  childTransactionsEnumerator;
        List            childNodes;
        int             childNodeId;

        TableId         currentNodeTableId;
        RefRecId        currentNodeRecId;

        InventDimTrackingInventTransNode        inventDimTrackingInventTransNode;

        if (_nodeId == 0)
        {
            // Top level node
            childTransactions = inventTrackingDimTracingRelations.rootNodes(traceDirection);
            if (childTransactions)
            {
                childTransactionsEnumerator = childTransactions.getEnumerator();
                childNodes = new List(Types::Integer);
                while (childTransactionsEnumerator.moveNext())
                {
                    inventDimTrackingInventTransNode = inventTrackingDimTracingRelations.nodeFromKey(childTransactionsEnumerator.current());
                    if (inventDimTrackingInventTransNode)
                    {
                        if (includeWarehouseSpecificInventoryTransactions)
                        {
                            childNodeId = this.createSubNodeFromNodeKey(0, inventDimTrackingInventTransNode.tracingNodeKey());
                            childNodes.addEnd(childNodeId);
                        }
                        else
                        {
                            childNodeId = this.createSubNode(0, tableNum(InventTrans), inventDimTrackingInventTransNode.parmInventTransDTO().recId());
                            childNodes.addEnd(childNodeId);
                        }
                    }
                }
            }
        }
        else
        {
            if (includeWarehouseSpecificInventoryTransactions)
            {
                str nodeKey;
                [nodeKey] = this.nodeRecordInfo(_nodeId);
                inventDimTrackingInventTransNode = inventTrackingDimTracingRelations.nodeFromKey(nodeKey);
            }
            else
            {
                [currentNodeTableId, currentNodeRecId] = this.nodeRecordInfo(_nodeId);
                inventDimTrackingInventTransNode = inventTrackingDimTracingRelations.nodeFromKey(InventTrackingDimTracingRelations::tracingNodeKey(currentNodeTableId, currentNodeRecId));
            }

            if (inventDimTrackingInventTransNode)
            {
                childTransactions = inventTrackingDimTracingRelations.childNodes(inventDimTrackingInventTransNode, traceDirection);
                childTransactionsEnumerator = childTransactions.getEnumerator();
                childNodes = new List(Types::Integer);
                while (childTransactionsEnumerator.moveNext())
                {
                    inventDimTrackingInventTransNode = inventTrackingDimTracingRelations.nodeFromKey(childTransactionsEnumerator.current());

                    if (includeWarehouseSpecificInventoryTransactions)
                    {
                        if (!this.isRecordInParentPathUseNodeKey(_nodeId, inventDimTrackingInventTransNode.tracingNodeKey()))
                        {
                            childNodeId = this.createSubNodeFromNodeKey(_nodeId, inventDimTrackingInventTransNode.tracingNodeKey());
                            childNodes.addEnd(childNodeId);
                        }
                    }
                    else
                    {
                        if (!this.isRecordInParentPath(_nodeId, tableNum(InventTrans), inventDimTrackingInventTransNode.parmInventTransDTO().recId()))
                        {
                            childNodeId = this.createSubNode(_nodeId, tableNum(InventTrans), inventDimTrackingInventTransNode.parmInventTransDTO().recId());
                            childNodes.addEnd(childNodeId);
                        }
                    }
                }
            }
        }
        childNodesMap.insert(_nodeId, childNodes);

        childNodesCalculated.add(_nodeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>childNodes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a list of child nodes for the specified node.
    /// </summary>
    /// <param name="_nodeId">
    ///    The node for which children are retrieved.
    /// </param>
    /// <returns>
    ///     A list.
    /// </returns>
    public List childNodes(int _nodeId)
    {
        if (!childNodesCalculated.in(_nodeId))
        {
            this.calculateChildNodes(_nodeId);
        }

        if (childNodesMap && childNodesMap.exists(_nodeId))
        {
            return childNodesMap.lookup(_nodeId);
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSubNode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new node in the hierarchy under the specified node.
    /// </summary>
    /// <param name="_nodeId">
    ///    The node under which the sub node is created.
    /// </param>
    /// <param name="_tableId">
    ///    The table ID for the record related to the node.
    /// </param>
    /// <param name="_refRecId">
    ///    The <c>RecId</c> for the record related to the node.
    /// </param>
    /// <returns>
    ///    The ID of the new node.
    /// </returns>
    public int createSubNode(
        int             _nodeId,
        TableId         _tableId,
        RefRecId        _refRecId)
    {
        str         nodeKey = this.tracingNodeKey(_tableId, _refRecId);

        int childNodeId = nextNodeId;
        nextNodeId++;

        node2ParentNodeMap.insert(childNodeId, _nodeId);
        nodeInfoMap.insert(childNodeId, [_tableId, _refRecId]);

        return childNodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSubNodeFromNodeKey</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal int createSubNodeFromNodeKey(
        int _nodeId,
        str _nodeKey)
    {
        int childNodeId = nextNodeId;
        nextNodeId++;

        node2ParentNodeMap.insert(childNodeId, _nodeId);
        nodeInfoMap.insert(childNodeId, [_nodeKey]);

        return childNodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRecordInParentPathUseNodeKey</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean isRecordInParentPathUseNodeKey(
        int             _nodeId,
        str             _searchKey)
    {
        str currentKey;

        [currentKey] = this.nodeRecordInfo(_nodeId);
        if (currentKey == '')
        {
            return false;
        }

        if (_searchKey == currentKey)
        {
            return true;
        }

        return this.isRecordInParentPathUseNodeKey(this.parentNodeId(_nodeId), _searchKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportChildNodesAsXML</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Writes the tracing hierarchy to the XML file.
    /// </summary>
    /// <param name="_xmlWriter">
    ///    The writer used to write the XML file.
    /// </param>
    /// <param name="_exportedNodes">
    ///    A set of hierarchy nodes already exported.
    /// </param>
    /// <param name="_exportedTransactions">
    ///    A set of inventory transactions already exported.
    /// </param>
    /// <param name="_nodeId">
    ///    The node being exported.
    /// </param>
    /// <param name="_level">
    ///    The current level in the tracing hierarchy.
    /// </param>
    public void exportChildNodesAsXML(
        XmlWriter   _xmlWriter,
        Set         _exportedNodes,
        Set         _exportedTransactions,
        int         _nodeId,
        int         _level)
    {
        List childNodes = this.childNodes(_nodeId);

        if (childNodes)
        {
            ListEnumerator childNodeEnumerator = childNodes.getEnumerator();
            while (childNodeEnumerator.moveNext())
            {
                int childNode = childNodeEnumerator.current();
                if (!_exportedNodes.in(childNode))
                {
                    InventDimTrackingInventTransNode inventDimTrackingInventTransNode = this.findInventTransNodeById(childNode);
                    if (inventDimTrackingInventTransNode)
                    {
                        InventTrackingDimTracingInventTransDTO inventTransDTO = inventDimTrackingInventTransNode.parmInventTransDTO();
                        _exportedNodes.add(childNode);
                        _xmlWriter.writeStartElement('ItemNode');
                        inventDimTrackingInventTransNode.writeNodeAttributesAsXML(_xmlWriter);

                        if (includeWarehouseSpecificInventoryTransactions && _exportedTransactions.typeId() == Types::String)
                        {
                            _xmlWriter.writeAttributeString('AlreadyIncluded', int2str(_exportedTransactions.in(inventDimTrackingInventTransNode.tracingNodeKey())));
                            if (!_exportedTransactions.in(inventDimTrackingInventTransNode.tracingNodeKey()))
                            {
                                _exportedTransactions.add(inventDimTrackingInventTransNode.tracingNodeKey());
                                this.exportChildNodesAsXML(_xmlWriter, _exportedNodes, _exportedTransactions, childNode, _level + 1);
                            }
                        }
                        else
                        {                                              
                            _xmlWriter.writeAttributeString('AlreadyIncluded', int2str(_exportedTransactions.in(inventTransDTO.recId())));
                            if (!_exportedTransactions.in(inventTransDTO.recId()))
                            {
                                _exportedTransactions.add(inventTransDTO.recId());
                                this.exportChildNodesAsXML(_xmlWriter, _exportedNodes, _exportedTransactions, childNode, _level + 1);
                            }                            
                           
                        }
                        _xmlWriter.writeEndElement();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportCurrentOnHandAsXML</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Writes the current on hand for the traced item to the XML file.
    /// </summary>
    /// <param name="_xmlWriter">
    ///    The writer used to write the XML file.
    /// </param>
    /// <param name="_tracedInventTable">
    ///    The record from the <c>InventTable</c> table for the traced item.
    /// </param>
    public void exportCurrentOnHandAsXML(XmlWriter _xmlWriter, InventTable _tracedInventTable)
    {
        _xmlWriter.writeStartElement('CurrentOnHand');
        _xmlWriter.writeAttributeString('Qty', InventTrackingDimExport::real2String(this.parmCurrentOnHand()));
        _xmlWriter.writeAttributeString('UnitId', _tracedInventTable.inventUnitId());
        if (_tracedInventTable.pdsCWItem())
        {
            // Catch weight quantity must be integral numbers though it is stored in a real data type; use integer for external data representation.
            _xmlWriter.writeAttributeString('CatchWeightQty', InventTrackingDimExport::int2String(real2int(this.parmCurrentOnHandCW())));
            _xmlWriter.writeAttributeString('CatchWeightUnitId', PdsCatchWeight::cwUnitId(_tracedInventTable.ItemId));
        }
        _xmlWriter.writeEndElement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes internal variables.
    /// </summary>
    protected void init()
    {
        nextNodeId = 1;
        node2ParentNodeMap = new Map(Types::Integer, Types::Integer);
        nodeInfoMap = new Map(Types::Integer, Types::Container);
        childNodesMap = new Map(Types::Integer, Types::Class);
        childNodesCalculated = new Set(Types::Integer);
        includeWarehouseSpecificInventoryTransactions = WHSInventoryTransactionConfigurationProvider::isWarehouseInventoryTransactionStackEnabled();

    }

]]></Source>
			</Method>
			<Method>
				<Name>isRecordInParentPath</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the specified record is already specified anywhere in the parent path of the specified node.
    /// </summary>
    /// <param name="_nodeId">
    ///    The node to traverse.
    /// </param>
    /// <param name="_tableId">
    ///    The table ID for the record to search for.
    /// </param>
    /// <param name="_refRecId">
    ///    The <c>RecId</c> for the record to search for.
    /// </param>
    /// <returns>
    ///    true if the record is found in the path; Otherwise, false.
    /// </returns>
    public boolean isRecordInParentPath(
        int             _nodeId,
        TableId         _tableId,
        RefRecId        _refRecId)
    {
        TableId     tableIdForNode;
        RefRecId    recIdForNode;

        [tableIdForNode, recIdForNode] = this.nodeRecordInfo(_nodeId);
        if (tableIdForNode == 0)
        {
            return false;
        }

        if (tableIdForNode  == _tableId
         && recIdForNode    == _refRecId)
        {
            return true;
        }

        return this.isRecordInParentPath( this.parentNodeId(_nodeId), _tableId, _refRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>nodeRecordInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a container with record information for the specified node.
    /// </summary>
    /// <param name="_nodeId">
    ///    The node for which record information is returned.
    /// </param>
    /// <returns>
    ///    A container with table ID and record ID.
    /// </returns>
    public container nodeRecordInfo(int _nodeId)
    {
        if (_nodeId && nodeInfoMap.exists(_nodeId))
        {
            return nodeInfoMap.lookup(_nodeId);
        }

        if (includeWarehouseSpecificInventoryTransactions)
        {
            return [''];
        }
        else
        {
            return [0,0];
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventTransNodeById</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the tracing tree node based on the node ID in the tree.
    /// </summary>
    /// <param name="_nodeId">
    /// The ID for the tracing hierarchy node.
    /// </param>
    /// <returns>
    /// The inventory transaction based tracing tree with the specified ID if it exists; otherwise, null.
    /// </returns>
    public InventDimTrackingInventTransNode findInventTransNodeById(int _nodeId)
    {
        if (includeWarehouseSpecificInventoryTransactions)
        {
            str nodeKey;
            [nodeKey] = this.nodeRecordInfo(_nodeId);
            return inventTrackingDimTracingRelations.nodeFromKey(nodeKey);
        }
        else
        {
            TableId     tableId;
            RefRecId    inventTransRecId;
            [tableId, inventTransRecId] = this.nodeRecordInfo(_nodeId);

            if (tableId == tableNum(InventTrans) && inventTransRecId)
            {
                str nodeKey = InventTrackingDimTracingRelations::tracingNodeKey(tableId, inventTransRecId);
                return inventTrackingDimTracingRelations.nodeFromKey(nodeKey);
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parentNodeId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the ID of the parent node for the specified node.
    /// </summary>
    /// <param name="_childNodeId">
    ///    The node for which the parent is returned.
    /// </param>
    /// <returns>
    ///    An integer.
    /// </returns>
    public int parentNodeId(int _childNodeId)
    {
        if (node2ParentNodeMap.exists(_childNodeId))
        {
            return node2ParentNodeMap.lookup(_childNodeId);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentOnHand</Name>
				<Source><![CDATA[
    public InventQty parmCurrentOnHand(InventQty _currentOnHand = 0)
    {
        if (!prmisDefault(_currentOnHand))
        {
            return inventTrackingDimTracingRelations.parmCurrentOnHand(_currentOnHand);
        }
        else
        {
            return inventTrackingDimTracingRelations.parmCurrentOnHand();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentOnHandCW</Name>
				<Source><![CDATA[
    public PdsCWInventQty parmCurrentOnHandCW(InventQty _currentOnHandCW = 0)
    {
        if (!prmisDefault(_currentOnHandCW))
        {
            return inventTrackingDimTracingRelations.parmCurrentOnHandCW(_currentOnHandCW);
        }
        else
        {
            return inventTrackingDimTracingRelations.parmCurrentOnHandCW();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTrackingDimTracingRelations</Name>
				<Source><![CDATA[
    public InventTrackingDimTracingRelations parmInventTrackingDimTracingRelations(InventTrackingDimTracingRelations _inventTrackingDimTracingRelations = inventTrackingDimTracingRelations)
    {
        inventTrackingDimTracingRelations = _inventTrackingDimTracingRelations;

        return inventTrackingDimTracingRelations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTraceDirection</Name>
				<Source><![CDATA[
    public ForwardBackward parmTraceDirection(ForwardBackward _traceDirection = traceDirection)
    {
        traceDirection = _traceDirection;

        return traceDirection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tracingNodeKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generate a unique key for the specified record used for caching purposes.
    /// </summary>
    /// <param name="_tableId">
    ///    The <c>TableID</c> of the record.
    /// </param>
    /// <param name="_refRecId">
    ///    The <c>RecID</c> of the record.
    /// </param>
    /// <returns>
    ///    A string.
    /// </returns>
    private str tracingNodeKey(
        TableId                 _tableId,
        RefRecId                _refRecId)
    {
        return strFmt('%1#%2', _tableId, _refRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventTrackingDimTracingHierarchy construct()
    {
        return new InventTrackingDimTracingHierarchy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPackedTracingResults</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventTrackingDimTracingHierarchy</c> class
    ///    and initialize it based on a packed version of data for the tracing results.
    /// </summary>
    /// <param name="_packedValues">
    ///    The packed version of the tracing results.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InventTrackingDimTracingHierarchy</c> class.
    /// </returns>
    public static InventTrackingDimTracingHierarchy newFromPackedTracingResults(container _packedValues)
    {
        InventTrackingDimTracingHierarchy   inventTrackingDimTracingHierarchy = InventTrackingDimTracingHierarchy::construct();

        if (conLen(_packedValues) > 0)
        {
            InventTrackingDimTracingRelations inventTrackingDimTracingRelations = InventTrackingDimTracingRelations::create(_packedValues);
            inventTrackingDimTracingHierarchy.parmInventTrackingDimTracingRelations(inventTrackingDimTracingRelations);
        }
        else
        {
            inventTrackingDimTracingHierarchy.parmInventTrackingDimTracingRelations(InventTrackingDimTracingRelations::construct());
        }

        return inventTrackingDimTracingHierarchy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTracingResults</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventTrackingDimTracingHierarchy</c> class
    ///    and initialize it based the tracing relations and criteria.
    /// </summary>
    /// <param name="_inventTrackingDimTracingRelations">
    ///    The <c>InventTrackingDimTracingRelations</c> returned by the tracing search; may be <c>null</c> if the search was unsuccessful.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InventTrackingDimTracingHierarchy</c> class.
    /// </returns>
    public static InventTrackingDimTracingHierarchy newFromTracingResults(InventTrackingDimTracingRelations _inventTrackingDimTracingRelations)
    {
        InventTrackingDimTracingHierarchy   inventTrackingDimTracingHierarchy = InventTrackingDimTracingHierarchy::construct();

        inventTrackingDimTracingHierarchy.parmInventTrackingDimTracingRelations(_inventTrackingDimTracingRelations);

        return inventTrackingDimTracingHierarchy;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>