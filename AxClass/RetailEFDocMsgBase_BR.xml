<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailEFDocMsgBase_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Represents a XML message to be sent to the tax authority for retail electronic fiscal documents.
/// </summary>
internal abstract class RetailEFDocMsgBase_BR
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getMessageAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a string representing the action that is being taken by the message.
    /// </summary>
    /// <returns>
    /// A text representation of the action being taken by the message on the electronic fiscal document.
    /// </returns>
    protected abstract str getMessageAction()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMessageType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type of the message.
    /// </summary>
    /// <returns>
    /// The type of the message.
    /// </returns>
    protected abstract EFDocMessageType_BR getMessageType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReceiveFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the receive format for the message.
    /// </summary>
    /// <param name="_fiscalEstablishment">
    /// The fiscal establishment that owns the message.
    /// </param>
    /// <param name="_fiscalDocument">
    /// The fiscal document that will be represented by the message.
    /// </param>
    /// <returns>
    /// A message format to be used when reading the message response.
    /// </returns>
    [Hookable(false)]
    protected IEFDocMsgFormat getReceiveFormat(FiscalEstablishment_BR _fiscalEstablishment, FiscalDocument_BR _fiscalDocument)
    {
        return EFDocFactory_BR::construct().createMsgFormat(_fiscalEstablishment, this.getWebService(), _fiscalDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSendFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an object reponsible for formatting the XML being sent.
    /// </summary>
    /// <param name="_fiscalEstablishment">Fiscal establishment related to the message.</param>
    /// <param name="_fiscalDocument">Fiscal document related to the message.</param>
    /// <returns>An object that implements <c>IEFDocMsgFormat</c> interface.</returns>
    [Hookable(false)]
    protected IEFDocMsgFormat getSendFormat(FiscalEstablishment_BR _fiscalEstablishment, FiscalDocument_BR _fiscalDocument)
    {
        return EFDocFactory_BR::construct().createMsgFormat(_fiscalEstablishment, this.getWebService(), _fiscalDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWebService</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the web service that the message should be sent to.
    /// </summary>
    /// <returns>
    /// An enum value that represents the web service.
    /// </returns>
    protected abstract EFDocWebService_BR getWebService()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveMsg</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the message after it has been communicated with the tax authority.
    /// </summary>
    /// <param name="_eFDocument">
    /// The electronic fiscal document that was handled by the message.
    /// </param>
    /// <param name="_sendStream">
    /// The stream that represents the message that was sent.
    /// </param>
    /// <param name="_returnStream">
    /// The stream that represents the message that was received.
    /// </param>
    /// <param name="_returnInfo">
    /// The information extracted from the returned message.
    /// </param>
    [Hookable(false)]
    protected void saveMsg(
        EFDocument_BR _eFDocument,
        IEFDocMsgStream_BR _sendStream,
        IEFDocMsgStream_BR _returnStream,
        EFiscalDocumentReturnInfo_BR _returnInfo)
    {
        this.validateMessageReturn(_returnInfo);

        ttsBegin;

        EFDocumentXML_BR efDocumentXml = EFDocumentXML_BR::findByRef(_eFDocument.RecId, true);

        if (!efDocumentXml)
        {
            efDocumentXml.EFDocRefRecId = _eFDocument.RecId;
        }

        efDocumentXml.Cancel = _sendStream.toString();
        efDocumentXml.CancelResponse = _returnStream.toString();
        efDocumentXml.write();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>send</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends the message to the tax authority by using the transport supplied.
    /// </summary>
    /// <param name="_eFiscalDocument">
    /// The electronic fiscal documents that will be represented by the message.
    /// </param>
    /// <param name="_transport">
    /// The transport that will be used to send the message.
    /// </param>
    /// <remarks>
    /// The message will be sent immediatelly to the tax authority.
    /// </remarks>
    [Hookable(false)]
    public void send(EFiscalDocument_BR _eFiscalDocument, IEFDocMsgTransport _transport)
    {
        EFiscalDocumentList_BR oneDocument = EFiscalDocumentList_BR::construct();
        oneDocument.add(_eFiscalDocument);

        IEFDocMsgStream_BR sendStream = _transport.getSendStream();

        this.getSendFormat(_eFiscalDocument.fiscalEstablishment(), _eFiscalDocument.fiscalDocument()).write(sendStream, oneDocument);

        EFiscalDocumentReturnInfo_BR returnInfo = EFiscalDocumentReturnInfo_BR::newFromAccessKey(_eFiscalDocument.accessKey());

        IEFDocMsgStream_BR returnStream = _transport.send(_eFiscalDocument.accessKey());

        this.getReceiveFormat(_eFiscalDocument.fiscalEstablishment(), _eFiscalDocument.fiscalDocument()).read(returnStream, returnInfo);

        this.saveMsg(_eFiscalDocument.eFDocument(), sendStream, returnStream, returnInfo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMessageReturn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the XML message return code status for a given type of message.
    /// </summary>
    /// <param name="_returnInfo">
    /// The return info object that has information of the return message.
    /// </param>
    /// <remarks>
    /// Should throw an exception if the returned code status is not valid for the message.
    /// </remarks>
    protected abstract void validateMessageReturn(EFiscalDocumentReturnInfo_BR _returnInfo)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromMessageType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a message object based on a given message type.
    /// </summary>
    /// <param name="_messageType">The type of the message to be sent or received.</param>
    /// <returns>An object implementing <c>IEFDocMsg_BR</c> interface.</returns>
    [Hookable(false)]
    public static RetailEFDocMsgBase_BR createFromMessageType(EFDocMessageType_BR _messageType)
    {
        RetailEFDocMsgBase_BR docMsg;

        switch(_messageType)
        {
            case EFDocMessageType_BR::Discard:
                docMsg = RetailEFDocMsg_Discard_BR::construct();
                break;

            case EFDocMessageType_BR::Cancel:
                docMsg = RetailEFDocMsg_Cancel_BR::construct();
                break;

            case EFDocMessageType_BR::CancelBySubstitution:
                docMsg = RetailEFDocMsg_CancelBySubstitution_BR::construct();
                break;

            default:
                throw error(strfmt("@GLS62577", _messageType));
        }

        return docMsg;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>