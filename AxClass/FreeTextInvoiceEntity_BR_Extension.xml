<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FreeTextInvoiceEntity_BR_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>FreeTextInvoiceEntity_BR_Extension</c> is used to deal with BR related logics for FreeTextInvoiceEntity.
/// </summary>
[ExtensionOf(dataentityviewstr(FreeTextInvoiceEntity))]
internal final class FreeTextInvoiceEntity_BR_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertFreeTextInvoiceHeaderV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and updates FTI headers (custInvoiceTable) with necessary information.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">The definition group.</param>
    /// <param name = "_sourceDocumentFTIMap">Temporary table with a mapping between Free text numbers, source document headers and staging table lines.</param>
    /// <param name = "_dimCacheTmpHeaderDefaultDimension">Temporary table containing found or unfound dimensions.</param>
    protected static void insertFreeTextInvoiceHeaderV2(
        DMFDefinitionGroupExecution _dmfDefinitionGroupExecution,
        FreeTextInvoiceSourceDocumentHeaderStaging _sourceDocumentFTIMap,
        DimensionDataEntitySFKCacheTmp _dimCacheTmpHeaderDefaultDimension)
    {
        next insertFreeTextInvoiceHeaderV2(_dmfDefinitionGroupExecution, _sourceDocumentFTIMap, _dimCacheTmpHeaderDefaultDimension);

        FreeTextInvoiceEntity::updateHeaderForBrazilianFields(_dmfDefinitionGroupExecution);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateHeaderForBrazilianFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>CustInvoiceTable</c> record for brazilian specific fields.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">The definition group.</param>
    private static void updateHeaderForBrazilianFields(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        FreeTextInvoiceStaging staging;
        FiscalEstablishment_BR fiscalEstablisment;
        FiscalDocumentType_BR fiscalDocumentType;

        CustInvoiceTable custInvoiceTable;
        custInvoiceTable.skipDataMethods(true);
        
        update_recordset custInvoiceTable
                setting
                    FiscalEstablishment_BR = fiscalEstablisment.RecId,
                    FiscalDocumentType_BR = fiscalDocumentType.RecId
                join staging
                    where custInvoiceTable.InvoiceId == staging.FreeTextNumber
                        && staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                        && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                        && (staging.TransferStatus == DMFTransferStatus::NotStarted || staging.TransferStatus == DMFTransferStatus::Validated)
                outer join RecId from fiscalEstablisment
                    where fiscalEstablisment.FiscalEstablishmentId == staging.FiscalEstablishmentId
                outer join RecId from fiscalDocumentType
                    where fiscalDocumentType.FiscalDocumentTypeId == staging.FiscalDocumentTypeId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>