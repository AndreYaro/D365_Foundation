<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustOutPaymRecord_Cheque</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustOutPaymRecord_Cheque extends CustOutPaymRecord
{
    CustVendCheque          custVendCheque;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkValues</Name>
				<Source><![CDATA[
    boolean checkValues(LedgerJournalTrans  _ledgerJournalTrans = null,
                        RunbaseProgress     _progress           = null)
    {
        LedgerJournalCheckPost  ledgerJournalCheckPost;
        BankAccountTable        bankAccountTable;
        BankAccountID           bankAccountID;
        AmountMST               paymAmountMST;
        boolean                 ret;

        ret = super(_ledgerJournalTrans, _progress);

        paymAmountMST = _ledgerJournalTrans.calcAmountMST();

        if (ret
            && paymAmountMST == 0)
        {
            ret = checkFailed(strfmt("@SYS82275", _ledgerJournalTrans.Voucher));
        }

        if (ret
            && paymAmountMST < 0)
        {
            ret = checkFailed(strfmt("@SYS26761", _ledgerJournalTrans.Voucher));
        }

        if (ret
            && _ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Rejected)
        {
            ret = checkFailed(strfmt("@SYS90802", _ledgerJournalTrans.Voucher, "@SYS784"));
        }

        if (ret
            && _ledgerJournalTrans.OffsetAccountType != LedgerJournalACType::Bank)
        {
            if (CustPaymModeTable::find(_ledgerJournalTrans.PaymMode).AccountType != LedgerJournalACType::Bank)
            {
                ret = checkFailed(strfmt("@SYS24990", "@SYS7439"));
            }
        }

        if (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank)
        {
            select firstonly AccountID from bankAccountTable index AccountIdx
                where bankAccountTable.AccountID == _ledgerJournalTrans.parmOffsetAccount();
        }
        else
        {
            if (FeatureStateProvider::isFeatureEnabled(BankBridgedTransAutoClearingFeature::instance()))
            {
                bankAccountID = CustVendPaymModeTable::getBridgingBankAccount(ModuleCustVend::Cust, _ledgerJournalTrans);
            }
            else
            {
                bankAccountID = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(CustPaymModeTable::find(_ledgerJournalTrans.PaymMode).PaymentLedgerDimension);
            }

            select firstonly AccountID from bankAccountTable index AccountIdx
                where bankAccountTable.AccountID == bankAccountID;
        }

        if (bankAccountTable)
        {
            ret = ret && BankAccountTable::checkIsActive(bankAccountTable.AccountID);
        }

        if (ret && bankAccountTable.CurrencyCode != _ledgerJournalTrans.CurrencyCode  &&
                !_ledgerJournalTrans.BankChequeNum)
        {
            // if the check format is not Spanish, German or Candian and the Other currencies flag is not marked,
            // check that the currency code from the transaction matches the bank account

            BankChequeLayout bankChequeLayout = BankChequeLayout::find(bankAccountTable.AccountID);
            ret = bankChequeLayout.validateOutPaymRecord();
        }

        if (ret)
        {
            ledgerJournalCheckPost   = LedgerJournalCheckPost::newLedgerJournalTrans(_ledgerJournalTrans,
                                                                                     LedgerJournalVoucher::Voucher,
                                                                                     NoYes::No,
                                                                                     NoYes::No,
                                                                                     NoYes::No);
            ledgerJournalCheckPost.parmShowErrorOk(false);
            ledgerJournalCheckPost.parmCheckPaymStatus(false);

            if (_progress)
            {
                ledgerJournalCheckPost.progress(_progress);
            }

            LedgerJournalCheckPost::processOperation(ledgerJournalCheckPost);

            if (ledgerJournalCheckPost.tableErrorLog() !='')
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>output</Name>
				<Source><![CDATA[
    void output()
    {
        custVendCheque.output(custVendPaym);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendCheque</Name>
				<Source><![CDATA[
    public CustVendCheque parmCustVendCheque(CustVendCheque _custVendCheque = custVendCheque)
    {
        ;
        custVendCheque = _custVendCheque;

        return custVendCheque;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>