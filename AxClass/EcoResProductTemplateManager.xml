<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductTemplateManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>EcoResProductTemplateManager</c> class is responsible for managing the product per company
///    templates.
/// </summary>
class EcoResProductTemplateManager
{
    #EcoResProductDetailsExtended

    FormRun                 recordTemplateFormRun;
    SysRecordTemplateType   recordTemplateType;
    Map                     dependentDataSources;
    SysRecordTemplateData   sysRecordTemplateData;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDataSourceDependency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add an ordering dependency for data sources, so that the template gets applied in the right order
    /// </summary>
    /// <param name="_depends">
    /// The name of the data source that needs to be created later
    /// </param>
    /// <param name="_dependsOn">
    /// The name of the data source that needs to be created first
    /// </param>
    private void addDataSourceDependency(str _depends, str _dependsOn)
    {
        container dependencyList = conNull();

        if (dependentDataSources.exists(_dependsOn))
        {
            dependencyList = dependentDataSources.lookup(_dependsOn);
        }

        dependencyList += [_depends];
        dependentDataSources.insert(_dependsOn, dependencyList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordTemplateStorage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the record template storage handler.
    /// </summary>
    /// <returns>
    /// An instance of the record template storage handler.
    /// </returns>
    public SysRecordTemplateStorage createRecordTemplateStorage()
    {
        return SysRecordTemplateStorage::newList(
            this.dataSourcesRecordList(),
            recordTemplateType,
            true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourcesNameForSaveList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a list that has form data source names on the <c>EcoResProductDetailsExtended</c> form that
    /// allows for templates.
    /// </summary>
    /// <returns>
    /// A list that has form data source names on the <c>EcoResProductDetailsExtended</c> form that allows
    /// for templates.
    /// </returns>
    /// <remarks>
    /// The elements in the list appear in the reverse order from what is defined in the
    /// <c>EcoResProductDetailsExtended</c> form.
    /// </remarks>
    public List dataSourcesNameForSaveList()
    {
        List           dataSourcesNameList           = this.dataSourcesNameList();
        ListEnumerator dataSourcesNameListEnumerator = dataSourcesNameList.getEnumerator();
        List           dataSourcesNameForSaveList    = new List(Types::String);
        Set            insertedDataSources           = new Set(Types::String);

        while (dataSourcesNameListEnumerator.moveNext())
        {
            this.insertDataSourceNameForSaveList(dataSourcesNameListEnumerator.current(), dataSourcesNameForSaveList, insertedDataSources);
        }

        return dataSourcesNameForSaveList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourcesNameList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a list that has form data source names on the <c>EcoResProductDetailsExtended</c> form that
    /// allow templates.
    /// </summary>
    /// <returns>
    /// A list that has form data source names on the <c>EcoResProductDetailsExtended</c> form that allow
    /// templates.
    /// </returns>
    /// <remarks>
    /// The elements in the list appear in the order they are traversed by the template framework, which is 
    /// compliant with the order of the datasources in <c>EcoResProductDetailsExtended</c> form.
    /// If you want to add a new datasource in the template, add it in the end of the datasource name list
    /// below, but also make sure the list's order is compliant with the datasources' order in the form.
    /// </remarks>
    public List dataSourcesNameList()
    {
        dependentDataSources = new Map(Types::String, Types::Container);

        List dataSourcesNameList = new List(Types::String);
        // get the list that is in sync with template data.
        if (sysRecordTemplateData)
        {
            dataSourcesNameList = this.dataSourcesNameListFromTemplateData(sysRecordTemplateData);
        }
        else
        {
            dataSourcesNameList.addEnd(#InventTableDS);
            dataSourcesNameList.addEnd(#PurchDS);
            dataSourcesNameList.addEnd(#InventDS);
            dataSourcesNameList.addEnd(#SalesDS);
            dataSourcesNameList.addEnd(#InventItemLocationDS);
            dataSourcesNameList.addEnd(#EcoResStorageDimensionGroupItemDS);
            dataSourcesNameList.addEnd(#EcoResTrackingDimensionGroupItemDS);
            dataSourcesNameList.addEnd(#InventItemGroupItemDS);
            dataSourcesNameList.addEnd(#InventModelGroupItemDS);

            if (isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
            {
                dataSourcesNameList.addEnd(#WHSInventTableDS);
                this.addDataSourceDependency(#WHSInventTableDS, #EcoResStorageDimensionGroupItemDS);
            }

            if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
            {
                dataSourcesNameList.addEnd(#RetailInventTableDS);
            }

            if (isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
            {
                dataSourcesNameList.addEnd(#WHSReservationHierarchyItemDS);
                this.addDataSourceDependency(#WHSReservationHierarchyItemDS, #EcoResStorageDimensionGroupItemDS);
                this.addDataSourceDependency(#WHSReservationHierarchyItemDS, #EcoResTrackingDimensionGroupItemDS);
                this.addDataSourceDependency(#WHSReservationHierarchyItemDS, #WHSInventTableDS);
            }

            dataSourcesNameList.addEnd(#MCRInventTableDS);
        
            dataSourcesNameList.addEnd(#EcoResProductDimensionGroupProductDS);
        }

        return dataSourcesNameList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourcesNameSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a set with form data source names on the <c>EcoResProductDetailsExtended</c> form that
    /// allows for templates.
    /// </summary>
    /// <returns>
    /// A set with form data source names on the <c>EcoResProductDetailsExtended</c> form that allows for
    /// templates.
    /// </returns>
    public Set dataSourcesNameSet()
    {
        List dataSourcesNameList = this.dataSourcesNameList();

        Set dataSourcesRecordSet = new Set(Types::String);

        ListEnumerator dataSourcesNameListEnumerator = dataSourcesNameList.getEnumerator();
        while (dataSourcesNameListEnumerator.moveNext())
        {
            dataSourcesRecordSet.add(dataSourcesNameListEnumerator.current());
        }

        return dataSourcesRecordSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourcesRecordList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a list that has form data source records in the <c>EcoResProductDetailsExtended</c> form
    /// that allows for templates.
    /// </summary>
    /// <returns>
    /// A list that has form data source records in the <c>EcoResProductDetailsExtended</c> form that
    /// allows for templates.
    /// </returns>
    /// <remarks>
    /// The elements in the list appear in the order they are traversed by the template framework.
    /// </remarks>
    public List dataSourcesRecordList()
    {
        Set dataSourcesNameSet = this.dataSourcesNameSet();
        List dataSourcesRecordList = new List(Types::Container);

        for (int i = 1; i <= recordTemplateFormRun.dataSourceCount(); i++)
        {
            FormDataSource formDataSource  = recordTemplateFormRun.dataSource(i);
            Common dataSourceBuffer = formDataSource.cursor();
            // Clear the buffer if relation is not valid to avoid saving template with invalid data.
            this.clearBufferWithMissingForeignKey(dataSourceBuffer);
            if (dataSourcesNameSet.in(formDataSource.name()))
            {
                dataSourcesRecordList.addEnd(Global::buf2Con(dataSourceBuffer));
            }
        }

        return dataSourcesRecordList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixRecordRelations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fixes the foreign key relations between data sources which may get lost during edition of templates
    /// when temporary data sources are used and RecId's get different values.
    /// </summary>
    public void fixRecordRelations()
    {
        FormDataSource formDataSourceInventTable = recordTemplateFormRun.dataSource(#InventTableDS);
        FormDataSource formDataSourceMCRInventTable = recordTemplateFormRun.dataSource(#MCRInventTableDS);

        InventTable inventTable = formDataSourceInventTable.cursor();
        MCRInventTable mcrInventTable = formDataSourceMCRInventTable.cursor();

        ttsBegin;

        select forUpdate firstOnly mcrInventTable;
        select firstOnly inventTable;

        mcrInventTable.InventTable = inventTable.RecId;
        mcrInventTable.doUpdate();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBufferByDataSourceNameDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for getting a record that corresponds to the specified <c>EcoResProductDetailsExtended</c> form data source
    /// and is related to the specified item Id.
    /// </summary>
    /// <param name = "_formDataSourceName">An <c>EcoResProductDetailsExtended</c> form data source name.</param>
    /// <param name = "_itemId">An item ID.</param>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update; optional.</param>
    /// <param name = "_result">An instance of <c>EventHandlerResult</c> where you should return the buffer for the particular data source.</param>
    delegate void getBufferByDataSourceNameDelegate(str _formDataSourceName, ItemId _itemId, boolean _forUpdate, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBufferByDataSourceName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a record that corresponds to the specified <c>EcoResProductDetailsExtended</c> form data
    /// source and is related to the specified item ID .
    /// </summary>
    /// <param name="_formDataSourceName">
    /// An <c>EcoResProductDetailsExtended</c> form data source name.
    /// </param>
    /// <param name="_itemId">
    /// An item ID.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record that corresponds to the specified <c>EcoResProductDetailsExtended</c> form data source and
    /// is related to the specified item ID.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The name of the <c>EcoResProductDetailsExtended</c> form data source is unknown.
    /// </exception>
    public Common getBufferByDataSourceName(str _formDataSourceName, ItemId _itemId, boolean _forUpdate = false)
    {
        Common common;

        switch (_formDataSourceName)
        {
            case #InventTableDS:
                common  = InventTable::find(_itemId, _forUpdate);
                break;

            case #PurchDS:
                common  = InventTableModule::find(_itemId, ModuleInventPurchSales::Purch, _forUpdate);
                break;

            case #InventDS:
                common  = InventTableModule::find(_itemId, ModuleInventPurchSales::Invent, _forUpdate);
                break;

            case #SalesDS:
                common  = InventTableModule::find(_itemId, ModuleInventPurchSales::Sales, _forUpdate);
                break;

            case #InventItemLocationDS:
                InventDimId inventDimIdBlank    = InventDim::inventDimIdBlank();
                InventItemLocation inventItemLocation  = InventItemLocation::find(_itemId, inventDimIdBlank, '', _forUpdate);
                inventItemLocation.ItemId       = _itemId;
                inventItemLocation.InventDimId  = inventDimIdBlank;
                common = inventItemLocation;
                break;

            case #EcoResStorageDimensionGroupItemDS:
                EcoResStorageDimensionGroupItem ecoResStorageDimensionGroupItem  = EcoResStorageDimensionGroupItem::findByItem(
                    curExt2dataareaid(tableNum(InventTable)),
                    _itemId,
                    _forUpdate);
                ecoResStorageDimensionGroupItem.ItemId          = _itemId;
                ecoResStorageDimensionGroupItem.ItemDataAreaId  = curExt2dataareaid(tableNum(InventTable));
                common  = ecoResStorageDimensionGroupItem;
                break;

            case #EcoResTrackingDimensionGroupItemDS:
                EcoResTrackingDimensionGroupItem ecoResTrackingDimensionGroupItem  = EcoResTrackingDimensionGroupItem::findByItem(
                    curExt2dataareaid(tableNum(InventTable)),
                    _itemId,
                    _forUpdate);
                ecoResTrackingDimensionGroupItem.ItemId         = _itemId;
                ecoResTrackingDimensionGroupItem.ItemDataAreaId = curExt2dataareaid(tableNum(InventTable));
                common  = ecoResTrackingDimensionGroupItem;
                break;

            case #EcoResProductDimensionGroupProductDS:
                common = EcoResProductDimensionGroupProduct::findByProduct(InventTable::find(_itemId).Product, _forUpdate);
                break;

            case #InventItemGroupItemDS:
                InventItemGroupItem inventItemGroupItem  = InventItemGroupItem::findByItemIdLegalEntity(
                    _itemId,
                    curExt2dataareaid(tableNum(InventTable)),
                    _forUpdate);
                inventItemGroupItem.ItemId              = _itemId;
                inventItemGroupItem.ItemDataAreaId      = curExt2dataareaid(tableNum(InventTable));
                inventItemGroupItem.ItemGroupDataAreaId = curExt2dataareaid(tableNum(InventItemGroup));
                common  = inventItemGroupItem;
                break;

            case #InventModelGroupItemDS:
                InventModelGroupItem inventModelGroupItem  = InventModelGroupItem::findByItemIdLegalEntity(
                    _itemId,
                    curExt2dataareaid(tableNum(InventTable)),
                    _forUpdate);
                inventModelGroupItem.ItemId                 = _itemId;
                inventModelGroupItem.ItemDataAreaId         = curExt2dataareaid(tableNum(InventTable));
                inventModelGroupItem.ModelGroupDataAreaId   = curExt2dataareaid(tableNum(InventModelGroup));
                common  = inventModelGroupItem;
                break;

            case #RetailInventTableDS:
                if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
                {
                    RetailInventTable retailInventTable = RetailInventTable::find(_itemId, _forUpdate);
                    retailInventTable.itemId    = _itemId;
                    common  = retailInventTable;
                }
                break;

            case #WHSReservationHierarchyItemDS:
                if (isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
                {
                    WHSReservationHierarchyItem whsReservationHierarchyItem = WHSReservationHierarchyItem::findByItem(
                        curExt2dataareaid(tableNum(InventTable)),
                        _itemId,
                        _forUpdate);
                    whsReservationHierarchyItem.ItemDataAreaId  = curExt2dataareaid(tableNum(InventTable));
                    whsReservationHierarchyItem.ItemId          = _itemId;
                    common = whsReservationHierarchyItem;
                }
                break;

            case #WHSInventTableDS:
                if (isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
                {
                    WHSInventTable whsInventTable = WHSInventTable::find(_itemId, _forUpdate);
                    whsInventTable.ItemId = _itemId;
                    common = whsInventTable;
                }
                break;

            case #MCRInventTableDS:
                MCRInventTable mcrInventTable = MCRInventTable::findByItemId(_itemId, _forUpdate);
                mcrInventTable.InventTable = InventTable::find(_itemId).RecId;
                common = mcrInventTable;
                break;

            default:
                EventHandlerResult result = new EventHandlerResult();
                this.getBufferByDataSourceNameDelegate(_formDataSourceName, _itemId, _forUpdate, result);

                if (!result.hasResult())
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }

                common = result.result();
                break;
        }

        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataSourceNameForSaveList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert a data source name into the list considering the dependencies
    /// </summary>
    /// <param name="_dataSourceName">
    /// Name of the datasource to add
    /// </param>
    /// <param name="_dataSourceList">
    /// The list where the data source should be added
    /// </param>
    /// <param name="_insertedDataSources">
    /// A set of data sources that are already added
    /// </param>
    private void insertDataSourceNameForSaveList(str _dataSourceName, List _dataSourceList, Set _insertedDataSources)
    {
        container dependencies = conNull();
        int i;

        // Ignore the data sources already on the list.
        if (_insertedDataSources.in(_dataSourceName))
            return;

        if (dependentDataSources.exists(_dataSourceName))
        {
            dependencies = dependentDataSources.lookup(_dataSourceName);
        }

        // If any data source depends on the current one, add the dependency first.
        // Note: since we're building the list in reverse order, there's no need to wait for all the dependencies to be in place, the first one is enough.
        for (i = 1; i <= conLen(dependencies); i++)
        {
            this.insertDataSourceNameForSaveList(conPeek(dependencies, i), _dataSourceList, _insertedDataSources);
        }

        _dataSourceList.addStart(_dataSourceName);
        _insertedDataSources.add(_dataSourceName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecordTemplateFormRun</Name>
				<Source><![CDATA[
    public FormRun parmRecordTemplateFormRun(FormRun _recordTemplateFormRun = recordTemplateFormRun)
    {
        recordTemplateFormRun = _recordTemplateFormRun;

        return recordTemplateFormRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecordTemplateType</Name>
				<Source><![CDATA[
    public SysRecordTemplateType parmRecordTemplateType(SysRecordTemplateType _recordTemplateType = recordTemplateType)
    {
        recordTemplateType = _recordTemplateType;

        return recordTemplateType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EcoResProductTemplateManager construct()
    {
        return new EcoResProductTemplateManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearBufferWithMissingForeignKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Clear a buffer of an <c>InventTable</c> relation table if it is missing the foreign key for the other side of the relation.
    /// </summary>
    /// <param name="_common">
    ///  A buffer of an <c>InventTable</c> relation table.
    /// </param>
    private void clearBufferWithMissingForeignKey(Common _common)
    {
        boolean needToClearBuffer = false;

        switch (_common.TableId)
        {
            case tableNum(InventItemGroupItem):
                needToClearBuffer = _common.(fieldNum(InventItemGroupItem, ItemGroupId)) == '';
                break;

            case tableNum(InventModelGroupItem):
                needToClearBuffer = _common.(fieldNum(InventModelGroupItem, ModelGroupId)) == '';
                break;

            case tableNum(EcoResStorageDimensionGroupItem):
                needToClearBuffer = _common.(fieldNum(EcoResStorageDimensionGroupItem, StorageDimensionGroup)) == 0;
                break;

            case tableNum(EcoResTrackingDimensionGroupItem):
                needToClearBuffer = _common.(fieldNum(EcoResTrackingDimensionGroupItem, TrackingDimensionGroup)) == 0;
                break;

            case tableNum(WHSReservationHierarchyItem):
                needToClearBuffer = _common.(fieldNum(WHSReservationHierarchyItem, ReservationHierarchy)) == 0;
                break;

            default:
                break;
        }

        if (needToClearBuffer)
        {
            _common.clear();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSysRecordTemplateData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets or gets the value of <c>sysRecordTemplateData</c> container.
    /// </summary>
    /// <param name = "_sysRecordTemplateData">Container with template data</param>
    /// <returns>The template data container.</returns>
    [Hookable(false)]
    internal SysRecordTemplateData parmSysRecordTemplateData(SysRecordTemplateData _sysRecordTemplateData = sysRecordTemplateData)
    {
        sysRecordTemplateData = _sysRecordTemplateData;

        return sysRecordTemplateData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourcesNameListFromTemplateData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a list that has form data source names on the <c>EcoResProductDetailsExtended</c> form that
    /// allow templates and data sources order matches with the template data.
    /// </summary>
    /// <param name = "_templateData">Stored template data.</param>
    /// <returns>
    /// A list that has form data source names on the <c>EcoResProductDetailsExtended</c> form that allow
    /// templates.
    /// </returns>
    /// <remarks>
    /// The elements in the list appear in the order they are stored in the template.
    /// The method is called when the data sources list used for <c>EcoResProductDetailsExtended</c> form template is required to edit/apply template.
    /// </remarks>
    [Hookable(false)]
    internal List dataSourcesNameListFromTemplateData(container _templateData)
    {
        List dataSourcesNameList = new List(Types::String);

        dependentDataSources = new Map(Types::String, Types::Container);

        for (int i = 1; i <= conLen(_templateData); i++)
        {
            // Get the container which holds the template data, template data consists of table names and its data,
            // get the individual table data into a separate container i.e. into <c>tableValues</c>
            container tableCon = conPeek(_templateData,i);
            container tableValues = conPeek(tableCon,2);
            str tableName = conPeek(tableCon,1);

            switch (tableName)
            {
                case tableStr(InventTable):
                    dataSourcesNameList.addEnd(#InventTableDS);
                    break;
                case tableStr(RetailInventTable):
                    if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
                    {
                        dataSourcesNameList.addEnd(#RetailInventTableDS);
                    }
                    break;
                case tableStr(InventTableModule):
                    // The <c>tableValues</c> container holds the fields and its values in a container,
                    // Module type is saved at 10th position, So get the module type and add the data source based on it.
                    ModuleInventPurchSales moduleType = this.getModuleTypeFromValues(tableValues);

                    if (moduleType == ModuleInventPurchSales::Purch)
                    {
                        dataSourcesNameList.addEnd(#PurchDS);
                    }
                    else if (moduleType == ModuleInventPurchSales::Invent)
                    {
                        dataSourcesNameList.addEnd(#InventDS);
                    }
                    else if (moduleType == ModuleInventPurchSales::Sales)
                    {
                        dataSourcesNameList.addEnd(#SalesDS);
                    }
                    break;
                case tableStr(InventItemLocation):
                    dataSourcesNameList.addEnd(#InventItemLocationDS);
                    break;
                case tableStr(EcoResStorageDimensionGroupItem):
                    dataSourcesNameList.addEnd(#EcoResStorageDimensionGroupItemDS);
                    break;
                case tableStr(EcoResTrackingDimensionGroupItem):
                    dataSourcesNameList.addEnd(#EcoResTrackingDimensionGroupItemDS);
                    break;
                case tableStr(InventItemGroupItem):
                    dataSourcesNameList.addEnd(#InventItemGroupItemDS);
                    break;
                case tableStr(InventModelGroupItem):
                    dataSourcesNameList.addEnd(#InventModelGroupItemDS);
                    break;
                case tableStr(WHSInventTable):
                    if (isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
                    {
                        dataSourcesNameList.addEnd(#WHSInventTableDS);
                        this.addDataSourceDependency(#WHSInventTableDS, #EcoResStorageDimensionGroupItemDS);
                    }
                    break;
                case tableStr(WHSReservationHierarchyItem):
                    if (isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
                    {
                        dataSourcesNameList.addEnd(#WHSReservationHierarchyItemDS);
                        this.addDataSourceDependency(#WHSReservationHierarchyItemDS, #EcoResStorageDimensionGroupItemDS);
                        this.addDataSourceDependency(#WHSReservationHierarchyItemDS, #EcoResTrackingDimensionGroupItemDS);
                        this.addDataSourceDependency(#WHSReservationHierarchyItemDS, #WHSInventTableDS);
                    }
                    break;
                case tableStr(MCRInventTable):
                    dataSourcesNameList.addEnd(#MCRInventTableDS);
                    break;
                case tableStr(EcoResProductDimensionGroupProduct):
                    dataSourcesNameList.addEnd(#EcoResProductDimensionGroupProductDS);
                    break;
            }
        }

        return dataSourcesNameList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModuleTypeFromValues</Name>
				<Source><![CDATA[
    private ModuleInventPurchSales getModuleTypeFromValues(container _tableValues)
    {
        for (int templateConIdx=1; templateConIdx <= conlen(_tableValues); templateConIdx++)
        {
            container fieldValue = conPeek(_tableValues, templateConIdx);
            
            if (conPeek(fieldValue, 1) == fieldId2Name(tableNum(InventTableModule), fieldNum(InventTableModule, ModuleType)))
            {
                return conPeek(fieldValue, 2);
            }
        }

        return 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>