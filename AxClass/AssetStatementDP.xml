<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetStatementDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AssetStatementDP</c> class declares variables and tables.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(AssetStatement)),
    SRSReportParameterAttribute(classStr(AssetStatementContract))
]
public class AssetStatementDP extends SRSReportDataProviderPreProcessTempDb
{
    AssetStatementTmp assetStatementTmp;
    AssetCalcReport assetCalcReport;
    StartDate startDate;
    EndDate endDate;
    AmountMST acquisitionPriorYears;
    AmountMST acquisitionThisYear;
    AmountMST disposalsThisYear;
    AmountMST reclassificationThisYear;
    AmountMST depreciationAdjThisYear;
    AmountMST depreciationThisYear;
    AmountMST accumulatedDepreciation;
    AmountMST netBookValueEndThisYear;
    AmountMST netBookValueEndPriorYear;
    AssetStatementRowName rowName;
    AssetStatementRow assetStatementRow;
    AmountMST depreciationDisposalThisYear;
    AmountMST interestThisYear;
    AmountMST acquisitionSpecialAdditionThisYear;
    AmountMST accumulatedDepreciationPriorYears;
    AmountMST depreciationSpecialAdditionThisYear;
    AmountMST writeUpAdjThisYear;
    AmountMST depreciationReclassificationThisYear;

    #ISOCountryRegionCodes

    boolean countryRegion_DEAT = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoDE, #isoAT]);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssetStatementTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns data from the <c>AssetStatementTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///    Data from the <c>AssetStatementTmp</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(AssetStatementTmp))]
    public AssetStatementTmp getAssetStatementTmp()
    {
        select assetStatementTmp;
        return assetStatementTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssetStatementTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the details into the temporary <c>AssetStatementTmp</c> table.
    /// </summary>
    protected void insertAssetStatementTmp()
    {
        assetStatementTmp.StartDate = startDate;
        assetStatementTmp.EndDate = endDate;
        assetStatementTmp.RowNameHeader = rowName;
        assetStatementTmp.RowNameTotal = rowName;
        assetStatementTmp.AcquisitionPriorYears = acquisitionPriorYears;
        assetStatementTmp.AcquisitionThisYear = acquisitionThisYear;
        assetStatementTmp.DisposalsThisYear = disposalsThisYear;
        assetStatementTmp.ReclassificationThisYear = reclassificationThisYear;
        assetStatementTmp.DepreciationAdjThisYear = depreciationAdjThisYear;
        assetStatementTmp.DepreciationThisYear = - depreciationThisYear;
        assetStatementTmp.AccumulatedDepreciation = accumulatedDepreciation;
        assetStatementTmp.NetBookValueEndThisYear = netBookValueEndThisYear;
        assetStatementTmp.NetBookValueEndLastYear = netBookValueEndPriorYear;

        if (countryRegion_DEAT)
        {
            assetStatementTmp.InterestThisYear = interestThisYear;
            assetStatementTmp.AcquisitionSpecialAdditionThisYear = acquisitionSpecialAdditionThisYear;

            assetStatementTmp.AcquistionEndThisYear =
            acquisitionPriorYears +
                acquisitionThisYear +
                acquisitionSpecialAdditionThisYear +
                reclassificationThisYear +
                disposalsThisYear;

            assetStatementTmp.AccumulatedDepreciationPriorYears = accumulatedDepreciationPriorYears;
            assetStatementTmp.DepreciationThisYear = depreciationThisYear;
            assetStatementTmp.DepreciationSpecialAdditionThisYear = depreciationSpecialAdditionThisYear;
            assetStatementTmp.WriteUpAdjThisYear = writeUpAdjThisYear;
            assetStatementTmp.DepreciationReclassificationThisYear = depreciationReclassificationThisYear;
            assetStatementTmp.DepreciationDisposalThisYear = depreciationDisposalThisYear;

            assetStatementTmp.AccumulatedDepreciation =
            accumulatedDepreciationPriorYears +
                depreciationThisYear +
                depreciationSpecialAdditionThisYear +
                writeUpAdjThisYear +
                depreciationReclassificationThisYear +
                depreciationDisposalThisYear;
        }

        assetStatementTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the required data for the report.
    /// </summary>
    public void processReport()
    {
        if (countryRegion_DEAT)
        {
            GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
                [#isoAT, GlobalizationConstants::FeatureReferenceAT00015],
                [#isoDE, GlobalizationConstants::FeatureReferenceDE00021] ],
                funcName()
            );
        }

        QueryRun queryRun;
        QueryBuildDataSource qbs;
        AssetBookTable assetBookTable;
        AssetBookId bookId[];
        AssetStatementInterval assetStatementInterval;
        AssetStatementInterval assetStatementIntervalQuery;
        int bookIdNum, i;
        AssetBook assetBook;
        AssetTrans assetTrans;
        boolean firstRow = true;
        AssetStatementContract contract = this.parmDataContract() as AssetStatementContract;
        AmountMST deprAmount;
        boolean specialAddition;
        AssetSumCalcType assetSumCalcType;

        startDate = contract.parmStartDate();
        endDate = contract.parmEndDate();

        if (contract.parmCurrencySelection() == LedgerCurrencySelection::Accounting)
        {
            assetSumCalcType = AssetSumCalcType::MST;
        }
        else if (contract.parmCurrencySelection() == LedgerCurrencySelection::Reporting)
        {
            assetSumCalcType = AssetSumCalcType::Reporting;
        }

        queryRun = new QueryRun(this.parmQuery());
        assetCalcReport = new AssetCalcReport(startDate, endDate);

        while (queryRun.next())
        {
            assetBookTable = queryRun.get(tableNum(AssetBookTable));
            if (assetBookTable.BookId)
            {
                bookIdNum++;
                bookId[bookIdNum] = assetBookTable.BookId;
            }
        }

        queryRun.reset();

        TransactionReversalTrans transactionReversalTrans;
        qbs = queryRun.query().dataSourceNo(1).addDataSource(tableNum(AssetStatementInterval));
        qbs.joinMode(1);
        qbs.relations(true);

        while (queryRun.next())
        {
            if (SysReportRun::changed(queryRun,tableNum(AssetStatementRow)))
            {
                assetStatementRow = queryRun.get(tableNum(AssetStatementRow));
                if (!firstRow)
                {
                    this.insertAssetStatementTmp();
                }
                firstRow = false;
                rowName = assetStatementRow.RowName;
                acquisitionPriorYears = 0;
                acquisitionThisYear = 0;
                disposalsThisYear = 0;
                reclassificationThisYear = 0;
                depreciationAdjThisYear = 0;
                depreciationThisYear = 0;
                accumulatedDepreciation = 0;
                netBookValueEndThisYear = 0;
                netBookValueEndPriorYear = 0;

                if (countryRegion_DEAT)
                {
                    interestThisYear = 0;
                    acquisitionSpecialAdditionThisYear = 0;
                    accumulatedDepreciationPriorYears = 0;
                    depreciationSpecialAdditionThisYear = 0;
                    writeUpAdjThisYear = 0;
                    depreciationReclassificationThisYear = 0;
                    depreciationDisposalThisYear = 0;
                }
            }

            if (assetStatementRow.RowType == RowType::Total)
            {
                assetStatementInterval = queryRun.get(tableNum(AssetStatementInterval));

                while select assetBook
                    where (assetBook.AssetId >= assetStatementInterval.FromAsset
                        && assetBook.AssetId <= assetStatementInterval.ToAsset
                        && assetStatementInterval.AssetIntervalRelation == AssetIntervalRelation::AssetId)
                        || (assetBook.AssetGroup >= assetStatementInterval.FromAsset
                        && assetBook.AssetGroup <= assetStatementInterval.ToAsset
                        && assetStatementInterval.AssetIntervalRelation == AssetIntervalRelation::AssetGroupId)
                {
                    if (assetStatementInterval.AssetIntervalRelation == AssetIntervalRelation::AssetId)
                    {
                        // There can be case where Asset Id and Asset Group ranges overlapping each other.
                        // Ignore Asset Id base records as they are already processed by asset group range.
                        select RecId from assetStatementIntervalQuery
                            where assetStatementIntervalQuery.FromAsset >= assetBook.AssetGroup
                            && assetStatementIntervalQuery.ToAsset <= assetBook.AssetGroup
                            && assetStatementIntervalQuery.AssetStatementLineNum == assetStatementInterval.AssetStatementLineNum
                            && assetStatementIntervalQuery.AssetIntervalRelation == AssetIntervalRelation::AssetGroupId;

                        if (assetStatementIntervalQuery.RecId)
                        {
                            continue;
                        }
                    }

                    if (assetBook.Status == AssetStatus::Sold  ||
                        assetBook.Status == AssetStatus::Scrapped)
                    {
                        select firstonly RecId from assetTrans
                            where assetTrans.AssetId    == assetBook.AssetId &&
                                  assetTrans.BookId     == assetBook.BookId  &&
                                  (assetTrans.TransType == AssetTransType::DisposalSale ||
                                   assetTrans.TransType == AssetTransType::DisposalScrap) &&
                                   assetTrans.TransDate < startDate
                        notexists join transactionReversalTrans
                            where transactionReversalTrans.RefTableId   == assetTrans.TableId
                                  && transactionReversalTrans.RefRecId  == assetTrans.RecId
                                  && transactionReversalTrans.Reversed  == NoYes::Yes;

                        if (assetTrans.RecId)
                        {
                            continue;
                        }
                    }
                                        
                    if (countryRegion_DEAT)
                    {
                        specialAddition = AssetAcquisitionMethod::find(assetBook.AcquisitionMethod).SpecialAddition;
                    }
                                       
                    for(i = 1; i <= bookIdNum; i++)
                    {
                        if (bookId[i] == assetBook.BookId)
                        {
                            assetCalcReport.calcAssetByCurrency(assetBook, assetSumCalcType);
                            acquisitionPriorYears += assetCalcReport.columnAcquisitionPriorYears();
                           
                            if (assetBook.Status == AssetStatus::Sold ||
                                assetBook.Status == AssetStatus::Scrapped)
                            {
                                disposalsThisYear += assetCalcReport.columnDisposalsCurrentYear();
                            }

                            reclassificationThisYear += assetCalcReport.columnReclassificationCurrentYear();
                            
                            if (countryRegion_DEAT)
                            {
                                interestThisYear += assetCalcReport.columnInterestRepYear();

                                accumulatedDepreciationPriorYears += assetCalcReport.columnDepreciationStartPeriod() + assetCalcReport.columnAdjStartPeriod();
                                
                                deprAmount =
                                assetCalcReport.columnDepreciationRepYear() +
                                    assetCalcReport.columnBonusDepreciationRepYear() +
                                    assetCalcReport.columnAdjWriteDownRepYear() +
                                    assetCalcReport.columnAdjRevaluationRepYear() -
                                    assetCalcReport.columnDeprReclassificationRepYear();

                           
                                if (specialAddition)
                                {
                                    acquisitionSpecialAdditionThisYear += assetCalcReport.columnAcquisitionCurrentYear();
                                    depreciationSpecialAdditionThisYear += deprAmount;
                                }
                                else
                                {
                                    acquisitionThisYear += assetCalcReport.columnAcquisitionCurrentYear();
                                    depreciationThisYear += deprAmount;
                                }

                                writeUpAdjThisYear += assetCalcReport.columnAdjWriteUpRepYear() - assetCalcReport.columnAdjWriteUpReclassificationRepYear();
                              
                                depreciationReclassificationThisYear += assetCalcReport.columnDeprReclassificationRepYear() + assetCalcReport.columnAdjWriteUpReclassificationRepYear();
                              
                                depreciationDisposalthisYear += assetCalcReport.columnDepreciationVoidedRepYear() + assetCalcReport.columnAdjVoidedRepYear();
                            }
                            else
                            {
                                acquisitionThisYear += assetCalcReport.columnAcquisitionCurrentYear();
                                accumulatedDepreciation += assetCalcReport.columnAccumulatedDepreciation();
                                depreciationAdjThisYear += assetCalcReport.columnDepreciationAdjCurrentYear();
                                depreciationThisYear += assetCalcReport.columnDepreciationCurrentYear();
                            }

                            netBookValueEndThisYear += assetCalcReport.columnNetBookValueEndCurrentYear();
                            netBookValueEndPriorYear += assetCalcReport.columnNetBookValueEndLastYear();
                          
                            break;
                        }
                    }
                }
            }
        }
        if (rowName)
        {
            this.insertAssetStatementTmp();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>