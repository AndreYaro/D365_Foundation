<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayPFReportCtrlRSVPF</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayPFReportCtrlRSVPF extends RPayPFReportCtrlSZV64
{
    Range                   exclSpecWorkCondDeductions;
    ReportPeriod_RU         keyPayPeriod;
    RPayPFCorrectionType    correctionTypePFRegister;
    RpayFundDeductionCode   deductionCode212A8p7;
    Range                   specWorkCondO4, specWorkCondB34,
                            specWorkCondB33, specWorkCondB32,
                            specWorkCondB31;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>appendPeriods</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container appendPeriods(
        container       _periods,
        ReportPeriod_RU _reportStartDate,
        ReportPeriod_RU _reportEndDate,
        ReportPeriod_RU _reportCorPeriodStart,
        ReportPeriod_RU _reportCorPeriodEnd)
    {
        ReportPeriod_RU startPeriod = correctionTypePFRegister == RPayPFCorrectionType::None ? _reportStartDate : _reportCorPeriodStart,
                        endPeriod = correctionTypePFRegister == RPayPFCorrectionType::None ? _reportEndDate : _reportCorPeriodEnd,
                        curPeriod;
        Map             existsPeriodMap = new Map(Types::Date, Types::Integer);
        MapEnumerator   me;
        int             i;
        container       data;

        for (curPeriod = startPeriod; curPeriod <= endPeriod; curPeriod = endmth(nextmth(curPeriod)))
        {
            existsPeriodMap.insert(curPeriod, false);
        }

        for (i = 1; i <= conlen(_periods); i++)
        {
            data = conpeek(_periods, i);

            if (existsPeriodMap.exists(conpeek(data, 4)))
            {
                existsPeriodMap.insert((conpeek(data, 4)), true);
            }
        }

        me = existsPeriodMap.getEnumerator();

        while (me.moveNext())
        {
            if (me.currentValue() == false)
            {
                _periods = conpoke(_periods, conlen(_periods) + 1, [[0, 0, 0], [0], [0], me.currentKey()]);
            }
        }

        return _periods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcEmplPeriod</Name>
				<Source><![CDATA[
    protected void calcEmplPeriod()
    {
        container periodData;
        int i;
        RPayPFReportCalcRSVPF reportCalcRSVPF;

        reportCalcRSVPF = new  RPayPFReportCalcRSVPF();
        reportCalcRSVPF.corReportPeriod(reportCorPeriodStart, reportCorPeriodEnd);
        reportCalcRSVPF.payReportPeriod(reportStartDate, reportEndDate);
        reportCalcRSVPF.init();
        reportCalcRSVPF.parmEmplId(keyEmplId);
        reportCalcRSVPF.parmFund(keyFund);
        reportCalcRSVPF.setDeductionCodes(this.deductionCodes());
        reportCalcRSVPF.setDeductionCodesPctBase(this.deductionPctBaseCodes());
        reportCalcRSVPF.parmGroupByPayPeriod(true);
        reportCalcRSVPF.calc();

        periodData = reportCalcRSVPF.periodAmount(datenull());

        periodData = this.appendPeriods(periodData, reportStartDate, reportEndDate, reportCorPeriodStart, reportCorPeriodEnd);

        for (i = 1; i <= conlen(periodData); i++)
        {
            [fundAmounts, deductAmounts, deductBasePctAmount, keyPeriod, keyPayPeriod] = conpeek(periodData, i);
            [fundTotalAmount, fundBaseAmount, fundAmount] = fundAmounts;

            this.initEmplPeriodData();

            if (this.dataValid())
            {
                if (this.checkKeyChanged())
                {
                    this.keyChanged();
                }

                this.initReportCommand();
                this.runCommand();

                fundAmount      = 0;
                fundTotalAmount = 0;
                fundBaseAmount  = 0;
            }
        }

        this.addCrossPeriods(reportCalcRSVPF.crossPeriods());
    }
]]></Source>
			</Method>
			<Method>
				<Name>deductionCodes</Name>
				<Source><![CDATA[
    protected container deductionCodes()
    {
        container   ret;
        Range       otherDeductions;

        void addSpecOtherDed()
        {
            ret += [[deductionCode212A8p7 ? deductionCode212A8p7 : SysQuery::valueEmptyString(), false]];

            otherDeductions = deductionCode212A8p7 ? SysQuery::valueNot(deductionCode212A8p7) : '';
            otherDeductions += deductionCodeExceedMax ?
                (otherDeductions != '' ? ',' : '') + SysQuery::valueNot(deductionCodeExceedMax) : '';
            otherDeductions += deductionFundInvalid ?
                (otherDeductions != '' ? ',' : '') + SysQuery::valueNot(deductionFundInvalid) : '';
            otherDeductions += exclSpecWorkCondDeductions ?
                (otherDeductions != '' ? ',' : '') + exclSpecWorkCondDeductions : '';

            ret += [[otherDeductions, false]];
        }

        ret = super();

        switch (keyFund)
        {
            case pensionInsuranceFund:

                if (conlen(ret) == 1)
                {
                    ret += [[SysQuery::valueEmptyString(), false]];
                }

                addSpecOtherDed();
                break;

            case pensionExtra1fund,
                 pensionExtra2fund:

                addSpecOtherDed();

                ret += [[specWorkCondO4 ? specWorkCondO4 : SysQuery::valueEmptyString(), false]];
                ret += [[specWorkCondB34 ? specWorkCondB34 : SysQuery::valueEmptyString(), false]];
                ret += [[specWorkCondB33 ? specWorkCondB33 : SysQuery::valueEmptyString(), false]];
                ret += [[specWorkCondB32 ? specWorkCondB32 : SysQuery::valueEmptyString(), false]];
                ret += [[specWorkCondB31 ? specWorkCondB31 : SysQuery::valueEmptyString(), false]];
                break;
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init()
    {
        super();
        this.initTemplateParameters();
    }
]]></Source>
			</Method>
			<Method>
				<Name>initData</Name>
				<Source><![CDATA[
    protected void initData()
    {
        reportData              = new RPayPFReportDataRSVPF(this.parmKey());
        monthFundAmountCommand  = new RPayReportCommandSZV64(reportData, [#MonthFundAmountDS]);
        fundAmountCommand       = new RPayReportCommandSZV6(reportData, [#FundAmountDS]);
        seniorityCommand        = new RPayReportCommandSZV6(reportData, [#SeniorityDS]);
    }
]]></Source>
			</Method>
			<Method>
				<Name>initTemplateParameters</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initTemplateParameters()
    {
        Set                             o4Set, b34Set,
                                        b33Set, b32Set,
                                        b31Set;
        SetEnumerator                   se;
        void updateDeductions(SetEnumerator _se)
        {
            while (_se.moveNext())
            {
                exclSpecWorkCondDeductions += (exclSpecWorkCondDeductions ? ',': '') + SysQuery::valueNot(_se.current());
            }
        }

        deductionCode212A8p7    = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportRSV1_2014, 3, "@RUP906", "@RUP3428", false);

        specWorkCondO4          = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportRSV1_2014, 8, "@RUP2170", "@SYP4881376", false);
        specWorkCondB34         = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportRSV1_2014, 9, "@RUP2170", "@SYP4881377", false);
        specWorkCondB33         = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportRSV1_2014, 10, "@RUP2170", "@SYP4881378", false);
        specWorkCondB32         = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportRSV1_2014, 11, "@RUP2170", "@SYP4881379", false);
        specWorkCondB31         = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportRSV1_2014, 12, "@RUP2170", "@SYP4881380", false);

        o4Set = Set::create(RPayPFRegisterGenerator::prepareSpecWorkCondSet(specWorkCondO4));
        b34Set = Set::create(RPayPFRegisterGenerator::prepareSpecWorkCondSet(specWorkCondB34));
        b33Set = Set::create(RPayPFRegisterGenerator::prepareSpecWorkCondSet(specWorkCondB33));
        b32Set = Set::create(RPayPFRegisterGenerator::prepareSpecWorkCondSet(specWorkCondB32));
        b31Set = Set::create(RPayPFRegisterGenerator::prepareSpecWorkCondSet(specWorkCondB31));

        se = o4Set.getEnumerator();
        updateDeductions(se);
        se = b34Set.getEnumerator();
        updateDeductions(se);
        se = b33Set.getEnumerator();
        updateDeductions(se);
        se = b32Set.getEnumerator();
        updateDeductions(se);
        se = b31Set.getEnumerator();
        updateDeductions(se);
    }
]]></Source>
			</Method>
			<Method>
				<Name>needInitMthCommand</Name>
				<Source><![CDATA[
    protected boolean needInitMthCommand()
    {
        boolean ret;

        ret = super();

        ret = ret || keyFund == pensionStorageFund;

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmMthKey</Name>
				<Source><![CDATA[
    protected container parmMthKey()
    {
        return [#parmKeyReport, keyPeriod, keyPayPeriod];
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmMthValue</Name>
				<Source><![CDATA[
    protected container parmMthValue()
    {
        RPayAmount  insFundTotalAmount,
                    insFundBaseAmount,
                    insMaxBaseDeduct,
                    extra1FundAmountTotal,
                    extra2FundAmountTotal,
                    fundAmountInsMth,
                    fundAmountStoMth,
                    fundAmountInsOver,
                    extra1FundBaseAmount, extra2FundBaseAmount,
                    extra1FundAmount, extra2FundAmount,
                    specDeduction,
                    specDeductionExtra1, specDeductionExtra2,
                    otherDeduction,
                    otherDeductionExtra1, otherDeductionExtra2,
                    deductionO4extra1, deductionB34extra1, deductionB33extra1, deductionB32extra1, deductionB31extra1,
                    deductionO4extra2, deductionB34extra2, deductionB33extra2, deductionB32extra2, deductionB31extra2;

        switch (keyFund)
        {
            case pensionInsuranceFund:
                insFundTotalAmount  = fundTotalAmount;
                insFundBaseAmount   = fundTotalAmount - conpeek(deductAmounts, 1);

                if (keyCategory == #InsuredPersonCatEmployee ||
                    keyCategory == #TempLiveForeign ||
                    keyCategory == #TempResidenceForeign)
                {
                    insMaxBaseDeduct    = conpeek(deductAmounts, 2);
                }

                fundAmountInsMth = fundAmount;
                fundAmountInsOver = conpeek(deductBasePctAmount, 1);
                specDeduction = conpeek(deductAmounts, 3);
                otherDeduction = conpeek(deductAmounts, 4);

                break;
            case pensionStorageFund:
                fundAmountStoMth = fundAmount;
                break;

            case pensionExtra1fund:
                extra1FundAmountTotal = fundTotalAmount;
                extra1FundBaseAmount = fundBaseAmount;
                extra1FundAmount = fundAmount;
                specDeductionExtra1 = conpeek(deductAmounts, 1);
                specDeductionExtra1 = conpeek(deductAmounts, 2);
                deductionO4extra1 = conpeek(deductAmounts, 3);
                deductionB34extra1 = conpeek(deductAmounts, 4);
                deductionB33extra1 = conpeek(deductAmounts, 5);
                deductionB32extra1 = conpeek(deductAmounts, 6);
                deductionB31extra1 = conpeek(deductAmounts, 7);
                break;

            case pensionExtra2fund:
                extra2FundAmountTotal = fundTotalAmount;
                extra2FundBaseAmount = fundBaseAmount;
                extra2FundAmount = fundAmount;
                specDeductionExtra2 = conpeek(deductAmounts, 1);
                specDeductionExtra2 = conpeek(deductAmounts, 2);
                deductionO4extra2 = conpeek(deductAmounts, 3);
                deductionB34extra2 = conpeek(deductAmounts, 4);
                deductionB33extra2 = conpeek(deductAmounts, 5);
                deductionB32extra2 = conpeek(deductAmounts, 6);
                deductionB31extra2 = conpeek(deductAmounts, 7);
                break;
        }

        return [ insFundTotalAmount,
                 insFundBaseAmount,
                 insMaxBaseDeduct,
                 extra1FundAmountTotal,
                 extra2FundAmountTotal,
                 fundAmountInsMth,
                 fundAmountStoMth,
                 fundAmountInsOver,
                 extra1FundBaseAmount,
                 extra1FundAmount,
                 extra2FundBaseAmount,
                 extra2FundAmount,
                 specDeduction,
                 specDeductionExtra1,
                 specDeductionExtra2,
                 otherDeduction,
                 otherDeductionExtra1,
                 otherDeductionExtra2,
                 deductionO4extra1, deductionB34extra1, deductionB33extra1, deductionB32extra1, deductionB31extra1,
                 deductionO4extra2, deductionB34extra2, deductionB33extra2, deductionB32extra2, deductionB31extra2];
    }
]]></Source>
			</Method>
			<Method>
				<Name>unpackData</Name>
				<Source><![CDATA[
    protected void unpackData(container _callParameters)
    {
        RPayPFReportParmContractRSVPF parmContractRSVPF = new RPayPFReportParmContractRSVPF();
        container packedQuery;
        parmContractRSVPF.unpack(_callParameters);

        reportStartDate             = parmContractRSVPF.reportStartPeriod();
        reportEndDate               = parmContractRSVPF.reportEndPeriod();
        seniorityStartPeriod        = parmContractRSVPF.seniorityStartPeriod();
        seniorityEndPeriod          = parmContractRSVPF.seniorityEndPeriod();
        reportCorPeriodStart        = parmContractRSVPF.corrReportStartPeriod();
        reportCorPeriodEnd          = parmContractRSVPF.corrReportEndPeriod();
        reportType                  = parmContractRSVPF.correctionType();
        reportYear                  = year(reportEndDate);
        corrReportYear              = year(reportCorPeriodEnd);
        reportType                  = parmContractRSVPF.correctionType();
        correctionTypePFRegister    = parmContractRSVPF.correctionTypePFRegister();

        packedQuery = parmContractRSVPF.queryRun();

        if (SysQuery::isPackedOk(packedQuery))
        {
            queryRun = new QueryRun(packedQuery);
        }
        else
        {
            this.initEmplQuery();
        }
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>