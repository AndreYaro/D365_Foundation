<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSCatchWeightTagAutoSelect</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// When implemented, the <c>WHSCatchWeightTagAutoSelect</c> class determines when catch weight tag auto selection can be used and does the auto selection.
/// </summary>
internal abstract class WHSCatchWeightTagAutoSelect
{
    #WHSRF

    WHSWorkExecuteMode          mode;
    WHSRFPassThrough            pass;
    
    private boolean             useAutoSelection;
    private InventDim           inventDim;
    private InventHandlingQty   quantity;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the item id.
    /// </summary>
    /// <returns>The item id.</returns>
    protected ItemId itemId()
    {
        return pass.lookupStr(#ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the inventory dimensions to use with auto selection.
    /// </summary>
    /// <returns>The inventory dimensions.</returns>
    protected InventDim inventDim()
    {
        if (!inventDim)
        {
            inventDim = this.createInventDim();
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the inventory dimensions to use with auto selections.
    /// </summary>
    /// <returns>The created inventory dimensions.</returns>
    protected InventDim createInventDim()
    {
        return pass.createInventDimFromPass();
    }

]]></Source>
			</Method>
			<Method>
				<Name>quantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the handling quantity for the catch weight item.
    /// </summary>
    /// <returns>The handling quantity for the catch weight item.</returns>
    protected abstract InventHandlingQty quantity() {}

]]></Source>
			</Method>
			<Method>
				<Name>isInbound</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if this auto-selection is for an inbound transaction.
    /// </summary>
    /// <returns>true if the auto-selection is for an inbound transaction; otherwise, false for an outbound transaction.</returns>
    protected boolean isInbound()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes processing for catch weight tag auto selection.
    /// </summary>
    /// <param name = "_mode">The work execution mode for the form.</param>
    /// <param name = "_pass">The form pass through.</param>
    protected void init(WHSWorkExecuteMode _mode, WHSRFPassThrough _pass)
    {
        mode = _mode;
        pass = _pass;

        useAutoSelection = false;

        if (this.isInbound())
        {
            useAutoSelection = WHSCatchWeightTagAutoSelect::useAutoSelectionForInbound(pass);

            if (useAutoSelection)
            {
                quantity = this.quantity();
            }
        }
        else
        {
            if (WHSInventTable::outboundCatchWeightTagCapturingMethod(this.itemId()) == WHSOutboundCatchWeightTagCapturingMethod::OnlyPromptWhenNeeded)
            {
                quantity = this.quantity();
        
                PmfQtyDataCarrier onhand = WHSInventOnHand::getWorkPhysicalQuantityByInventDim(this.itemId(), this.inventDim());

                useAutoSelection = onhand.parmCwQty() == quantity;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>useAutoSelectionForInbound</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if catch weight tag automatic selection can be used for an inbound transaction.
    /// </summary>
    /// <param name = "_pass">The form pass through variables.</param>
    /// <returns>true if catch weight tag automatic selection can be used for an inbound transaction; otherwise, false.</returns>
    [Hookable(false)]
    internal static boolean useAutoSelectionForInbound(WHSRFPassthrough _pass)
    {
        return WHSInventTable::catchWeightTagDimensionTrackingMethod(_pass.parmItemId()) == WHSCatchWeightTagDimensionTrackingMethod::ProductTrackingAndAllStorageDimensions
                && WHSRFMenuItemTable::find(_pass.parmMenuItem()).UseExistingCatchWeightTag == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUseAutoSelection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if catch weight tag automatic selection can be used in the current context.
    /// </summary>
    /// <returns>true if catch weight tag automatic selection can be used; otherwise, false.</returns>
    [Hookable(false)]
    internal boolean canUseAutoSelection()
    {
        return useAutoSelection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the catch weight tag automatic selection.
    /// </summary>
    /// <remarks>
    /// Only call this method if <c>canUseAutoSelection</c> returns true.
    /// </remarks>
    [Hookable(false)]
    internal void process()
    {
        if (!this.canUseAutoSelection())
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        WHSTransWeight weight;
        int tagCount;
        container selectedTags;
        container tagsSelectedForForm;

        if (pass.hasValue(WHSWorkExecuteDisplayCatchWeightControls::ScannedCatchWeightTagList))
        {
            tagsSelectedForForm = str2con(pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::ScannedCatchWeightTagList));
        }

        ttsbegin;

        InventHandlingQty runningQty = quantity;

        QueryRun tagQueryRun = new QueryRun(this.createTagSelectionQuery());
        while (tagQueryRun.next())
        {
            WHSCatchWeightTag tag = tagQueryRun.get(tableNum(WHSCatchWeightTag));

            if (runningQty > 0)
            {
                if (conFind(tagsSelectedForForm, tag.RecId))
                {
                    throw error(strFmt("@WAX:MobileDeviceControlValidationCatchWeightTagInvalidStatus", tag.TagNumber));
                }

                this.updateTagRegistration(tag);
                
                selectedTags += tag.RecId;

                weight += tag.CapturedWeight;
            }

            runningQty--;
            tagCount++;
        }

        if (runningQty)
        {
            if (this.isInbound())
            {
                throw error(strFmt("@WAX:CatchWeightTagInboundAutoSelectInconsistency", quantity, tagCount));
            }
            else
            {
                throw error(strFmt("@WAX:CatchWeightTagExactPickInconsistency", quantity, tagCount));
            }
        }

        ttscommit;

        this.updatePassOnCompletion(weight, selectedTags);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTagSelectionQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a query to use for catch weight tag automatic selection.
    /// </summary>
    /// <returns>A query to use to automatically select the catch weight tags.</returns>
    /// <remarks>
    /// The query object created must have <c>WHSCatchWeighTag</c> table as the primary data source.
    /// </remarks>
    protected abstract Query createTagSelectionQuery() { }

]]></Source>
			</Method>
			<Method>
				<Name>updateTagRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the catch weight tag registration.
    /// </summary>
    /// <param name = "_tag">The catch weight tag for which to update the registration.</param>
    /// <remarks>
    /// The base implementation does nothing.
    /// </remarks>
    protected void updateTagRegistration(WHSCatchWeightTag _tag)
    {
        // empty
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePassOnCompletion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the form pass through when catch weight tag automatically selection has completed.
    /// </summary>
    /// <param name = "_weight">The total weight of the selected tags.</param>
    /// <param name = "_selectedTags">A container with the record Ids for the <c>WHSCatchWeightTag</c> table for the tags that were automatically selected.</param>
    protected void updatePassOnCompletion(WHSTransWeight _weight, container _selectedTags)
    {
        pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter);
        pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty);

        if (this.shouldSaveSelectedTags())
        {
            this.saveSelectedTags(_selectedTags);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSaveSelectedTags</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the selected tags should be saved in form pass through variables for this auto selection.
    /// </summary>
    /// <returns>true if the selected tags should be saved; otherwise, false.</returns>
    protected boolean shouldSaveSelectedTags()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveSelectedTags</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the selected tags to the form pass through.
    /// </summary>
    /// <param name = "_selectedTags">A container with the record Ids for the <c>WHSCatchWeightTag</c> table for the tags that were automatically selected.</param>
    protected void saveSelectedTags(container _selectedTags)
    {
        container tagsSelectedForForm;

        if (pass.hasValue(WHSWorkExecuteDisplayCatchWeightControls::ScannedCatchWeightTagList))
        {
            // Must avoid lookupStr so we don't start the container with an empty value.
            tagsSelectedForForm = str2con(pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::ScannedCatchWeightTagList));
        }

        tagsSelectedForForm += _selectedTags;
        
        pass.insert(WHSWorkExecuteDisplayCatchWeightControls::ScannedCatchWeightTagList, con2Str(tagsSelectedForForm));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>