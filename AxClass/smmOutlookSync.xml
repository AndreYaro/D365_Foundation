<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmOutlookSync</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SysObsolete('Microsoft discontinued support for synchronizing contacts, appointments, and tasks between Dynamics 365 Supply Chain Management and Outlook.', false, 01\12\2023)]
abstract class SmmOutlookSync
{

    #smmMSOutlook2002ObjectModelConstants

    container                   fieldMapping;
    Email                       currentOutlookEmail;
    Email                       currentWorkerOutlookEmail;
    Email                       currentEmployeeOutlookEmail;
    Email                       currentUserOutlookEmail;

    smmOutlookUserId            currentOutlookUser;
    smmOutlookUserId            currentWorkerOutlookId;
    smmOutlookUserId            currentEmployeeOutlookId;
    smmOutlookUserId            currentUserOutlookId;

    Timezone                    outlookTimeZone;

    smmOutlookUserEntryID       currentOutlookUserEntryId;
    smmOutlookUserEntryID       currentWorkerOutlookEntryId;
    smmOutlookUserEntryID       currentEmployeeOutlookEntryId;
    smmOutlookUserEntryID       currentUserOutlookEntryId;
    smmIItem                    currentItem;

    smmOutlookMappingTypes      outlookMappingType;
    COM                         outlook;
    COM                         outlookNamespace;

    CrmWorkerRecId              currentWorker;
    UserId                      currentUser;
    boolean                     connectedToOutlook;
    smmOutlookMappingTypes      outlookItemType;
    smmOutlookSyncPrinciple     outlookSyncPrinciple;
    smmIFolder                  folder;
    TransDateTime               dateTimeOfLastSynchronization;

    TransDateTime               syncDateTime;

    boolean                     forceSync;

    SysIMapiEx                  mapiEx;

    boolean                     mapiInitialised;
    OutlookUserSetup            ewsFolderSelection;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkActiveOutlookUser</Name>
				<Source><![CDATA[
    // Checks whether active  outlook is same as the outlook selected for employee
    private boolean checkActiveOutlookUser()
    {
        DirPartyLocation                    partyLocation;
        LogisticsElectronicAddress          contactInfo;

        if (currentUserOutlookEmail   != currentOutlookEmail &&
            currentUserOutlookEntryId == currentOutlookUserEntryId)
        {
            select contactInfo
                where contactInfo.Locator == currentOutlookEmail && contactInfo.Type == LogisticsElectronicAddressMethodType::Email
                exists join partyLocation
                where partyLocation.Location == contactInfo.Location && partyLocation.Party == DirPersonUser::current().PersonParty;

            if (contactInfo)
            {
                currentUserOutlookEmail = currentOutlookEmail;
            }
        }
        // If user tries to choose a folder which does not belong to outlook profile selected on employee form
        if (currentUserOutlookEntryId != currentOutlookUserEntryId ||
            currentUserOutlookEmail   != currentOutlookEmail)
        {
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeMapiEx</Name>
				<Source><![CDATA[
    /// <summary>
    /// Closes the connection to the MAPi.
    /// </summary>
    void closeMapiEx()
    {
        // If MAPI was initialised
        if (mapiInitialised)
        {
            // Close outlook object before closing mapi
            this.closeOutlookObject();

            if (mapiEx)
            {
                // Logout from MAPi
                mapiEx.Logoff();
            }
            mapiInitialised = false;

            mapiEx = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOutlookObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Closes the outlook objects that are opened by the mapiEx.
    /// </summary>
    /// <param name="_save">
    /// A Boolean value that specifies whether to save.
    /// </param>
    abstract void closeOutlookObject(boolean _save = false)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>connectedToOutlook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Connected to the outlook.
    /// </summary>
    /// <returns>
    /// true if it is connected to outlook; otherwise, false.
    /// </returns>
    public boolean connectedToOutlook()
    {
        return connectedToOutlook;
    }

]]></Source>
			</Method>
			<Method>
				<Name>connectToOutlook</Name>
				<Source><![CDATA[
    private boolean connectToOutlook()
    {
        #OCCRetryCount
        InteropPermission                   permission;
        int                                 lines = infologLine();

        // Create the server COM object
        permission = new InteropPermission(InteropKind::ComInterop);
        permission.assert();

        try
        {
            mapiEx = smmSynchronizationConnection::createConnection();

            if (!mapiEx || !mapiEx.MapiInitialized() || !mapiEx.Logon("","",1))
            {
                return false;
            }
            mapiInitialised = true;

            connectedToOutlook = true;
        }
        catch (Exception::Error)
        {
            if (xSession::currentRetryCount() > #RetryNum)
            {
                // Remove unwanted system error message
                infolog.clear(lines);
                connectedToOutlook = false;
            }
            else
            {
                retry;
            }
        }

        CodeAccessPermission::revertAssert();
        return connectedToOutlook;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInOutlook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an item in Outlook.
    /// </summary>
    protected abstract void createInOutlook()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMappingField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>mappint</c> fields.
    /// </summary>
    /// <param name="_smmAxaptaOutlookMapping">
    /// The <c>mappint</c> Axapta fields in Outlook.
    /// </param>
    protected abstract void createMappingField(smmAxaptaOutlookMapping _smmAxaptaOutlookMapping)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMappingFieldList</Name>
				<Source><![CDATA[
    private void createMappingFieldList()
    {
        smmAxaptaOutlookMapping smmAxaptaOutlookMapping;

        while select smmAxaptaOutlookMapping where smmAxaptaOutlookMapping.OutlookMappingType == outlookMappingType
        {
            this.createMappingField(smmAxaptaOutlookMapping);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteItemInOutlook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes an item in Outlook.
    /// </summary>
    public abstract void deleteItemInOutlook()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats the date time into a string.
    /// </summary>
    /// <param name="_dateTime">
    /// A date time object.
    /// </param>
    /// <returns>
    /// The string representation of the date time.
    /// </returns>
    public str formatDate(TransDateTime _dateTime)
    {
        str time;
        str ampm;
        int flags;

        flags = DateFlags::None;
        time = time2str(DateTimeUtil::time(_dateTime),1,2);
        ampm = subStr(time,strLen(time)-1,2);
        time = subStr(time,1,5);
        time += ' '+ampm;
        return date2StrUsr(DateTimeUtil::date(_dateTime), flags) + ' '+ time;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentOutlookUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Outlook user.
    /// </summary>
    /// <returns>
    /// The user ID.
    /// </returns>
    public smmOutlookUserId getCurrentOutlookUser()
    {
        return currentOutlookUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current user.
    /// </summary>
    /// <returns>
    /// The user ID.
    /// </returns>
    public UserId getCurrentUser()
    {
        return currentUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentUserOutlookId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current Outlook user ID.
    /// </summary>
    /// <returns>
    /// The Outlook user ID.
    /// </returns>
    public smmOutlookUserId getCurrentUserOutlookId()
    {
        return currentUserOutlookId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getcurrentWorkerOutlookId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current worker Outlook ID.
    /// </summary>
    /// <returns>
    /// The worker Outlook ID.
    /// </returns>
    public smmOutlookUserId getcurrentWorkerOutlookId()
    {
        return currentWorkerOutlookId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateTimeOfLastSynchronization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the date time for the last synchronization.
    /// </summary>
    /// <returns>
    /// The date time.
    /// </returns>
    public TransDateTime getDateTimeOfLastSynchronization()
    {
        return dateTimeOfLastSynchronization;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFolder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the folder used by this class.
    /// This folder is used to create and search items.
    /// It is set following the configuration for the current employee.
    /// </summary>
    /// <returns>
    /// The <c>smmIFolder</c> used for synchronization.
    /// </returns>
    /// <remarks>
    /// This method is called by the form, that uses the same folder.
    /// </remarks>
    public smmIFolder getFolder()
    {
        return folder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the item for synchronization.
    /// </summary>
    /// <returns>
    /// Instance of item for synchronization.
    /// </returns>
    public abstract smmIItem getItem()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOulookItemFromOutlook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an Outlook item from Outlook.
    /// </summary>
    /// <param name="_outlookEntryId">
    /// The Outlook entry ID.
    /// </param>
    /// <param name="_echoErrorMessage">
    /// A Boolean value that specifies whether to echo the error message.
    /// </param>
    /// <returns>
    /// true if successful; otherwise, false.
    /// </returns>
    public abstract boolean getOulookItemFromOutlook(str _outlookEntryId, boolean _echoErrorMessage = true)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOutlookNameSpace</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Outlook name space.
    /// </summary>
    /// <returns>
    /// The COM for the name space.
    /// </returns>
    public COM getOutlookNameSpace()
    {
        return outlookNamespace;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// The initialization method.
    /// </summary>
    /// <param name="_calledFromWizard">
    /// A Boolean value that specifies whether it is called from wizard
    /// </param>
    /// <param name="_outlookUserId">
    /// The Outlook user ID.
    /// </param>
    /// <param name="_outlookUserEntryId">
    /// The Outlook user entry ID.
    /// </param>
    /// <param name="_outlookEmail">
    /// The Outlook email ID.
    /// </param>
    public void init(boolean _calledFromWizard = false,smmOutlookUserId _outlookUserId = '',smmOutlookUserEntryID _outlookUserEntryId = '',Email _outlookEmail ='')
    {
        // Try to establish contact with the Outlook client
        if (this.connectToOutlook())
        {
            // Find values for current employee and current Outlook user id set in Axapta
            this.setOutlookUserForCurrentUser();

            // If called from wizard to allow temporary profile selection
            if (_calledFromWizard)
            {
                currentUserOutlookId        = _outlookUserId;
                currentUserOutlookEntryId   = _outlookUserEntryId;
                currentUserOutlookEmail     = _outlookEmail;
            }

            // Find current Outlook user id and name
            this.setCurrentOutlookUser();

            // To check if it was connected successfully
            if (connectedToOutlook)
            {
                // Set up of Outlook item type to be synchronized (abstract)
                this.setOutlookItemType();

                // Find Outlook syncrhonization principle setup in the CRM parameters
                this.setOutlookSyncPrinciple();

                // Create mapping list based on the Axapta/Outlook field mapping setup
                this.createMappingFieldList();

                // If not called from wizard
                if (!_calledFromWizard)
                {
                    // Set current Outlook folder (abstract)
                    this.setOutlookFolder();
                }

                // Set date and time of last synchronization
                this.setDateAndTimeOfLastSynchronization();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openMessageStore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the message store in MAPi.
    /// </summary>
    /// <returns>
    /// true if the message store is open; otherwise, false.
    /// </returns>
    boolean openMessageStore()
    {
        if (!mapiInitialised || !mapiEx.openMessageStore(folder.storeId()))
        {
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outlookItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current item (may be a contact, task or appointment).
    /// </summary>
    /// <returns>
    /// The current <c>smmIItem</c>.
    /// </returns>
    public abstract smmIItem outlookItem()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>outlookProfileAndAxaptaUserMatch</Name>
				<Source><![CDATA[
    public boolean outlookProfileAndAxaptaUserMatch()
    {
        return strCmp(this.getCurrentUserOutlookId(), this.getCurrentOutlookUser()) != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForceSync</Name>
				<Source><![CDATA[
    public boolean parmForceSync(boolean _forceSync=forceSync)
    {
        forceSync = _forceSync;

        return forceSync;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOutlookTimeZone</Name>
				<Source><![CDATA[
    Timezone parmOutlookTimeZone(Timezone _outlookTimeZone = outlookTimeZone)
    {
        outlookTimeZone = _outlookTimeZone;
        return outlookTimeZone;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrentOutlookUser</Name>
				<Source><![CDATA[
    public void setCurrentOutlookUser()
    {
        smmOutlookUserId    currentUserName = '';
        int                 lines = infologLine();

        // Connect to Outlook
        try
        {
            if (!mapiInitialised)
            {
                throw Exception::Error;
            }

            mapiEx.loadCurrentProfile();

            currentUserName             = mapiEx.CurrentUser();
            currentOutlookUserEntryId   = mapiEx.CurrentUserEntryId();
            currentOutlookEmail         = mapiEx.CurrentUserEmail();

            if (!currentOutlookUserEntryId)
            {
                throw Exception::Error;
            }
        }
        catch (Exception::Error)
        {
            // Remove the COM error from the infolog
            infolog.clear(lines);

            // Could not communicate with Outlook client.
            error("@SYS83387");

            this.closeMapiEx();

            connectedToOutlook = false;

            return;
        }

        currentOutlookUser = currentUserName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrentUser</Name>
				<Source><![CDATA[
    // Set userId if not for current user
    public UserId setCurrentUser(UserId _currentUser = currentUser)
    {
        currentUser = _currentUser;
        currentWorker = HcmWorker::userId2Worker(currentUser);

        return currentUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDateAndTimeOfLastSynchronization</Name>
				<Source><![CDATA[
    private void setDateAndTimeOfLastSynchronization()
    {
        smmOutlookLastSync  smmOutlookLastSync;

        // Set method must never be executed if current employee is not set
        if (currentUser)
        {
            // Find synchronization record for the employee and type
            select firstonly smmOutlookLastSync where smmOutlookLastSync.UserId == currentUser && smmOutlookLastSync.SyncType == outlookMappingType;

            if (smmOutlookLastSync)
            {
                // Set date and time of last Outlook syncrhonization in the class
                dateTimeOfLastSynchronization = smmOutlookLastSync.LastSyncDateTime;
            }
            else
            {
                // The type for the employee was not syncrhonized before so a new synchronization record will be created
                ttsbegin;

                smmOutlookLastSync.UserId       = currentUser;
                smmOutlookLastSync.SyncType     = outlookMappingType;
                smmOutlookLastSync.LastSyncDateTime = utcDateTimeNull();

                smmOutlookLastSync.insert();

                dateTimeOfLastSynchronization = utcDateTimeNull();

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldsInOutlook</Name>
				<Source><![CDATA[
    protected abstract void setFieldsInOutlook()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFolder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets folder information for a user in OutlookUserSetup.
    /// </summary>
    /// <param name="_folderStoreId">
    /// Store Id of the user.
    /// </param>
    /// <param name="_folderEntryId">
    /// Folder entry Id for the folder selected by user.
    /// </param>
    /// <param name="_itemType">
    /// Item type of the folder , possible values are appointment, task and contacts.
    /// </param>
    /// <param name="_defaultFolder">
    /// Default folder.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Could not retrieve folder information from outlook.
    /// </exception>
    protected void setFolder(str _folderStoreId, str _folderEntryId, int _itemType, int _defaultFolder)
    {
        int                     lines = infologLine();
        OutlookUserSetup        outlookUserSetup = OutlookUserSetup::findByUser(currentUser);

        try
        {
            mapiEx.loadCurrentProfile();
            // Is folder ids present on the employee
            if (_folderEntryId && _folderStoreId)
            {
                folder = mapiEx.getFolder(_folderStoreId, _folderEntryId, _itemType, _defaultFolder);

                if (!folder || folder.isDeletedFolder() || folder.defaultItemType() != _itemType)
                {
                    throw Exception::Error;
                }
            }
            else
            {
                folder = mapiEx.getFolder(_folderStoreId, _folderEntryId, _itemType, _defaultFolder);
            }

            if (!mapiEx.openMessageStore(folder.storeId()))
            {
                throw Exception::Error;
            }
        }
        catch (Exception::Error)
        {
            // Remove the COM error from the infolog
            infolog.clear(lines);

            // Close connection to MAPi
            this.closeMapiEx();

            // Could not retrieve folder information from outlook.
            throw error("@SYS90843");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the item for synchronization.
    /// </summary>
    /// <param name="_item">
    /// Item to set for synchronization.
    /// </param>
    public abstract void setItem(smmIItem _item)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOutlookFolder</Name>
				<Source><![CDATA[
    protected abstract void setOutlookFolder()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOutlookItemType</Name>
				<Source><![CDATA[
    protected abstract void setOutlookItemType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOutlookSyncPrinciple</Name>
				<Source><![CDATA[
    private void setOutlookSyncPrinciple()
    {
        outlookSyncPrinciple = OutlookSyncParameters::find().OutlookSyncPrinciple;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOutlookUserForCurrentUser</Name>
				<Source><![CDATA[
    private void setOutlookUserForCurrentUser()
    {
        OutlookUserSetup outlookUserSetup;

        // If it is called for an AX user whoose is not mapped to current outlook user
        if (currentUser)
        {
           select firstonly outlookUserSetup where outlookUserSetup.UserId == currentUser;
        }
        // If it is called for current user
        else
        {
           select firstonly outlookUserSetup where outlookUserSetup.UserId == curUserId();
        }

        if (outlookUserSetup)
        {
            currentUser                 = outlookUserSetup.UserId;
            currentUserOutlookId        = outlookUserSetup.OutlookUserID;
            currentUserOutlookEntryId   = outlookUserSetup.OutlookUserEntryID;
            currentUserOutlookEmail     = SysUserInfo::find(currentUser).emailDisplay();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSynchronizeFromDateTime</Name>
				<Source><![CDATA[
    public void setSynchronizeFromDateTime(TransDateTime _synchronizeFromDateTime)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSynchronizeToDateTime</Name>
				<Source><![CDATA[
    public void setSynchronizeToDateTime(TransDateTime _synchronizeToDateTime)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupMailBoxConnection</Name>
				<Source><![CDATA[
    private void setupMailBoxConnection(boolean _calledFromWizard = false, smmOutlookUserId _outlookUserId = '', smmOutlookUserEntryID _outlookUserEntryId = '', Email _outlookEmail ='')
    {
        // Find values for current employee and current Outlook user id set in Axapta
        this.setOutlookUserForCurrentUser();

        // If called from wizard to allow temporary profile selection
        if (_calledFromWizard)
        {
            currentUserOutlookId        = _outlookUserId;
            currentUserOutlookEntryId   = _outlookUserEntryId;
            currentUserOutlookEmail     = _outlookEmail;
        }

        // Find current Outlook user id and name
        this.setCurrentOutlookUser();

        // To check if it was connected successfully
        if (this.connectedToOutlook())
        {
            // Set up of Outlook item type to be synchronized (abstract)
            this.setOutlookItemType();

            // Find Outlook syncrhonization principle setup in the CRM parameters
            this.setOutlookSyncPrinciple();

            // Create mapping list based on the Axapta/Outlook field mapping setup
            this.createMappingFieldList();

            // If not called from wizard
            if (!_calledFromWizard)
            {
                // Set current Outlook folder (abstract)
                this.setOutlookFolder();
            }

            // Set date and time of last synchronization
            this.setDateAndTimeOfLastSynchronization();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronize</Name>
				<Source><![CDATA[
    abstract public boolean synchronize()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLastSyncInformation</Name>
				<Source><![CDATA[
    protected void updateLastSyncInformation(TransDateTime _syncDateTime)
    {
        smmOutlookLastSync  smmOutlookLastSync;

        ttsbegin;

        select firstonly forupdate smmOutlookLastSync where smmOutlookLastSync.UserId == currentUser && smmOutlookLastSync.SyncType == outlookMappingType;

        if (smmOutlookLastSync)
        {
            // Update last synchronization date and time
            smmOutlookLastSync.LastSyncDateTime = _syncDateTime;

            smmOutlookLastSync.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    // To create objects of derived classes based on outlook mapping type
    public static smmOutlookSync construct(smmOutlookMappingTypes outlookMappingType, UserId _userId = curUserId())
    {
        if (smmOutlookSyncDeprecationHandler::isOutlookSyncDisabled())
        {
            smmOutlookSyncDeprecationHandler::logSyncSkipMessageToTelemetry();
            throw error(strFmt("@SYS19306",funcName()));
        }

        smmOutlookSync smmOutlookSync;

        switch (outlookMappingType)
        {
            case smmOutlookMappingTypes::Appointments :
                smmOutlookSync = new smmOutlookSync_Appointment();
                break;
            case smmOutlookMappingTypes::Tasks :
                smmOutlookSync = new smmOutlookSync_Task();
                break;
            case smmOutlookMappingTypes::Contacts :
                smmOutlookSync = new smmOutlookSync_Contact();
                break;
            default :
                throw error(strFmt("@SYS19306",funcName()));
        }

        // To set current employee if called for specific employee
        smmOutlookSync.setCurrentUser(_userId);
        smmOutlookSync.parmOutlookTimeZone(DateTimeUtil::getUserPreferredTimeZone());

        return smmOutlookSync;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromDate</Name>
				<Source><![CDATA[
    // Return COMVariant object for date
    public static COMVariant createFromDate(date _date = dateNull())
    {
        if (_date == dateNull())
        {
            // Return null date for outlook
            return COMVariant::createDateFromYMD(4501,1,1);
        }

        return COMVariant::createFromDate(_date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromDateAndTime</Name>
				<Source><![CDATA[
    // Return COMVariant object for date
    public static COMVariant createFromDateAndTime(utcdatetime _dateTime = utcDateTimeNull())
    {
        if (_dateTime == utcDateTimeNull())
        {
            // Return null date for outlook
            return COMVariant::createDateFromYMD(4501,1,1);
        }

        return COMVariant::createFromDateAndTime(DateTimeUtil::date(_dateTime),DateTimeUtil::time(_dateTime));
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentOutlookUser</Name>
				<Source><![CDATA[
    public static container currentOutlookUser()
    {
        smmOutlookUserId                outlookUserId;
        smmOutlookUserEntryID           outlookUserEntryId;
        Email                           outlookUserEmail;
        int                             lines = infologLine();
        container                       outlookUser;
        SysIMapiEx                      mapiEx;

        // Create the server COM object
        try
        {
            mapiEx = smmSynchronizationConnection::createConnection();

            if (!mapiEx || !mapiEx.MapiInitialized() || !mapiEx.Logon("","",1))
            {
                throw Exception::Error;
            }
            mapiEx.loadCurrentProfile();

            outlookUserId         = mapiEx.CurrentUser();
            outlookUserEntryId    = mapiEx.CurrentUserEntryId();
            outlookUserEmail      = mapiEx.CurrentUserEmail();

            if (!outlookUserEntryId)
            {
                throw Exception::Error;
            }

            outlookUser           = [outlookUserId,outlookUserEntryId,outlookUserEmail];

            return outlookUser;
        }
        catch
        {
            infolog.clear(lines);

            mapiEx = null;
            // Could not communicate with Outlook client.
            error("@SYS83387");

            return conNull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeObjects</Name>
				<Source><![CDATA[
    // Synchronize contacts
    static boolean synchronizeObjects(smmOutlookMappingTypes _outlookMappingTypes, boolean _forceSync = false,TransDateTime _synchronizeFromDateTime = DateTimeUtil::minValue(), TransDateTime _synchronizeToDateTime = DateTimeUtil::maxValue())
    {
        smmOutlookSync      smmOutlookSync;

        smmOutlookSync = smmOutlookSync::construct(_outlookMappingTypes);
        smmOutlookSync.init();

        if (smmOutlookSync.connectedToOutlook())
        {
            // Should contacts be synchronized even if they not edited since last syncrhonization
            if (_forceSync)
            {
                switch (_outlookMappingTypes)
                {
                    // Update contacts with current date and time to force syncrhonization
                    case smmOutlookMappingTypes::Contacts :
                    ContactPerson::touchContactPersons(HcmWorker::userId2Worker(curUserId()));
                    break;

                    // Update tasks with current date and time to force syncrhonization
                    case smmOutlookMappingTypes::Tasks :
                    smmActivities::touchActivities(HcmWorker::userId2Worker(curUserId()), smmActivityCategory::Task, DateTimeUtil::minValue(), DateTimeUtil::maxValue());
                    break;

                    // Update appointments with current date and time to force syncrhonization
                    case smmOutlookMappingTypes::Appointments :
                    smmActivities::touchActivities(HcmWorker::userId2Worker(curUserId()), smmActivityCategory::Appointment, _synchronizeFromDateTime, _synchronizeToDateTime);
                    break;
                }
                smmOutlookSync.parmForceSync(true);
            }

            // Pass the selected syncrhonization period to the class
            smmOutlookSync.setSynchronizeFromDateTime(_synchronizeFromDateTime);
            smmOutlookSync.setSynchronizeToDateTime(_synchronizeToDateTime);

            smmOutlookSync.synchronize();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateItemRecurrencePattern</Name>
				<Source><![CDATA[
    // Update the recurrence pattern from outlook
    void updateItemRecurrencePattern(smmActivities _activities, smmIRecurrence recurrencePattern, Timezone _outlookTimeZone)
    {
        smmOutlookRecurrencePattern smmOutlookRecurrencePattern;
        smmOutlookRecurrencePattern smmOutlookRecurrencePatternOrig;
        smmActivities               smmActivities;
        smmIAppointment             parentOutlookAppt;
        utcdatetime                 startDate;
        utcdatetime                 endDate;
        utcdatetime                   startTime;
        utcdatetime                   endTime;

        if (recurrencePattern && _activities.OutlookEntryID)
        {
            smmOutlookRecurrencePattern                 = smmOutlookRecurrencePattern::find(_activities.OutlookEntryID, true);
            smmOutlookRecurrencePatternOrig.data(smmOutlookRecurrencePattern::find(_activities.OutlookEntryID));

            new InteropPermission(InteropKind::ComInterop).assert();

            smmOutlookRecurrencePattern.DayofMonth      = recurrencePattern.dayOfMonth();

            smmOutlookRecurrencePattern.DaysOfWeek      = recurrencePattern.dayOfWeekMask();

            smmOutlookRecurrencePattern.DurationMinutes = recurrencePattern.duration();

            if (_activities.Category == smmActivityCategory::Appointment)
            {
                parentOutlookAppt = recurrencePattern.parent();
                if (parentOutlookAppt)
                {
                    startTime = parentOutlookAppt.start();

                    endTime = parentOutlookAppt.end();
                }
            }
            else
            {
                startTime   = recurrencePattern.patternStartDateTime(_activities.Category == smmActivityCategory::Appointment, _outlookTimeZone);

                endTime     = recurrencePattern.patternEndDateTime(_activities.Category == smmActivityCategory::Appointment, _outlookTimeZone);
            }

            smmOutlookRecurrencePattern.Instance = recurrencePattern.instance();

            smmOutlookRecurrencePattern.Interval = recurrencePattern.interval();

            smmOutlookRecurrencePattern.MonthOfYearId = recurrencePattern.monthOfYear();

            smmOutlookRecurrencePattern.NoEndDate = recurrencePattern.noEndDate();

            endDate   = recurrencePattern.patternEndDateTime(_activities.Category == smmActivityCategory::Appointment, _outlookTimeZone);

            startDate = recurrencePattern.patternStartDateTime(_activities.Category == smmActivityCategory::Appointment, _outlookTimeZone);

            smmOutlookRecurrencePattern.RecurrenceType = recurrencePattern.recurrenceType();

            smmOutlookRecurrencePattern.PatternStartDateTime = recurrencePattern.patternStartDateTime(_activities.Category == smmActivityCategory::Appointment, _outlookTimeZone);
            smmOutlookRecurrencePattern.PatternEndDateTime = recurrencePattern.patternEndDateTime(_activities.Category == smmActivityCategory::Appointment, _outlookTimeZone);

            if (!smmOutlookRecurrencePattern.NoEndDate)
            {
                smmOutlookRecurrencePattern.setEndDate(recurrencePattern.endDate(), _outlookTimeZone);
            }

            // If recurrence pattern has changed delete links with old activities in axapta
            if (smmOutlookRecurrencePattern.hasRecurrencePatternChanged(smmOutlookRecurrencePatternOrig))
            {
                if (_activities.Category == smmActivityCategory::Appointment && smmOutlookRecurrencePattern.RecId)
                {
                    // Delete links with old activities in axapta
                    while select forupdate smmActivities
                        where smmActivities.OutlookEntryID == _activities.OutlookEntryID &&
                              smmActivities.RecId !=  _activities.RecId
                    {
                        smmActivities.IsMasterAppointment = NoYes::No;
                        smmActivities.Modified = NoYes::No;
                        smmActivities.KeepSynchronized = NoYes::No;
                        smmActivities.OutlookEntryID   = '';
                        smmActivities.OutlookGlobalObjectID = '';
                        smmActivities.RecurrenceState  = smmOutlookRecurrenceState::NotRecurring;
                        smmActivities.update(false);
                    }
                }

                if (smmOutlookRecurrencePattern)
                {
                    smmOutlookRecurrencePattern.update();
                }
                else
                {
                    smmOutlookRecurrencePattern.MasterOutlookEntryID = _activities.OutlookEntryID;
                    smmOutlookRecurrencePattern.insert();
                }
            }
            CodeAccessPermission::revertAssert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>