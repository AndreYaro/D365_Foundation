<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostEmplProposalSale</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjPostEmplProposalSale extends ProjPostEmplProposal
{
    ProjProposalEmplDetail  projProposalEmplDetail;
    ProjEmplTransSale       projEmplTransSale;
    ProjInvoiceEmplDetail   projInvoiceEmplDetail;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustmentLedgerSalesAmount</Name>
				<Source><![CDATA[
        protected AmountCur adjustmentLedgerSalesAmount()
    {
        return this.parmAdjustmentLedgerSalesAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterTurnover</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether revenue should be posted for the transaction.
    /// </summary>
    /// <returns>
    /// true if the revenue amount is non-zero and the method <c>parmEnterTurnover</c> returns true;
    /// otherwise, false.
    /// </returns>
    protected boolean checkEnterTurnover()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondaryTurnover</Name>
				<Source><![CDATA[
        public ExchRate exchRateSecondaryTurnover()
    {
        ProjInvoiceJour         projInvoiceJourOrig;
        ProjInvoiceEmplDetail   projInvoiceEmplDetailOrig;

        if (this.checkProjTransStatusIsCreditNoteProposal(projEmplTransSale.TransStatus))
        {
            projInvoiceEmplDetail.reread();
            select projInvoiceEmplDetailOrig where projInvoiceEmplDetailOrig.RecId == projInvoiceEmplDetail.RefRecId;
            projInvoiceJourOrig = projInvoiceEmplDetailOrig.projInvoiceEmpl().projInvoiceJour();
            return projTrans.exchRateSecondarySales(projInvoiceJourOrig.InvoiceDate);
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateTurnover</Name>
				<Source><![CDATA[
        public ExchRate exchRateTurnover()
    {
        ProjInvoiceJour         projInvoiceJourOrig;
        ProjInvoiceEmplDetail   projInvoiceEmplDetailOrig;

        if (this.checkProjTransStatusIsCreditNoteProposal(projEmplTransSale.TransStatus))
        {
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))

            {
                projInvoiceEmplDetail.reread();
                select firstOnly projInvoiceEmplDetailOrig where projInvoiceEmplDetailOrig.RecId == projInvoiceEmplDetail.RefRecId;
                projInvoiceJourOrig = projInvoiceEmplDetailOrig.projInvoiceEmpl().projInvoiceJour();
                return projTrans.exchRateSales(projInvoiceJourOrig.InvoiceDate);
            }
            else
            {
                return projTrans.exchRateSales(projProposalEmpl.projProposalJour().InvoiceDate);
            }
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(ProjProposalEmpl  _projProposalEmpl, ProjProposalEmplDetail  _projProposalEmplDetail, ProjEmplTransSale _projEmplTransSale)
    {
        projProposalEmplDetail = _projProposalEmplDetail;
        projEmplTransSale = _projEmplTransSale;

        super(_projProposalEmpl);

        projTrans = ProjTrans::newProjProposalEmplSale(_projProposalEmpl, _projProposalEmplDetail, _projEmplTransSale);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceUpdate</Name>
				<Source><![CDATA[
        private void projInvoiceUpdate(RefRecId _saleRefRecId)
    {
        ProjInvoiceEmplDetail     projInvoiceEmplDetailOrginal;
        ProjInvoiceEmplDetail     projInvoiceEmplDetailReverse;

        ttsbegin;

        select forupdate RefRecId from projInvoiceEmplDetailOrginal
            where  projInvoiceEmplDetailOrginal.SaleRefRecId == _saleRefRecId
               && !projInvoiceEmplDetailOrginal.RefRecId;

        select forupdate RefRecId from projInvoiceEmplDetailReverse
            where  projInvoiceEmplDetailReverse.SaleRefRecId == _saleRefRecId
               &&  projInvoiceEmplDetailReverse.RecId != projInvoiceEmplDetailOrginal.RecId
               && !projInvoiceEmplDetailReverse.RefRecId;

        projInvoiceEmplDetailReverse.RefRecId = projInvoiceEmplDetailOrginal.RecId;

        projInvoiceEmplDetailOrginal.RefRecId = projInvoiceEmplDetailReverse.RecId;

        projInvoiceEmplDetailReverse.update();
        projInvoiceEmplDetailOrginal.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransCreate</Name>
				<Source><![CDATA[
        public void projTransCreate()
    {
        ProjInvoiceEmpl projInvoiceEmpl;

        projInvoiceEmplDetail.clear();
        projInvoiceEmplDetail = ProjInvoiceEmplDetail::initInvoiceFromProposale(projProposalEmpl, projProposalEmplDetail, projEmplTransSale);

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
        select RecId, psaContractLineNum from projInvoiceEmpl
            where projInvoiceEmpl.ProjInvoiceId == projProposalEmpl.projProposalJour().ProjInvoiceId &&
                projInvoiceEmpl.TransId == projProposalEmpl.projEmplTrans().TransId;
        }
        else
        {
            select RecId from projInvoiceEmpl
            where projInvoiceEmpl.ProjInvoiceId == projProposalEmpl.projProposalJour().ProjInvoiceId &&
                projInvoiceEmpl.TransId == projProposalEmpl.projEmplTrans().TransId;
        }

        projInvoiceEmplDetail.InvoiceRefRecId = projInvoiceEmpl.RecId;
        projInvoiceEmplDetail.insert();

        if (this.checkProjTransStatusIsCreditNoteProposal(projEmplTransSale.TransStatus))
        {
            this.projInvoiceUpdate(projEmplTransSale.RecId);
        }
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && ProjInvoiceTable::find(PSAContractLineItems::find(projInvoiceEmpl.psaContractLineNum).ProjInvoiceProjId).psaContractLines == NoYes::Yes)
        {
            PSAContractLineItemsServer::updateUnitsOrPercentInvoice(projInvoiceEmpl.psaContractLineNum, NoYes::Yes);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method after the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmUpdateTrans</c> method returns true.
    /// </remarks>
    public void projTransUpdate()
    {
        projEmplTransSale.selectForUpdate(true);
        projEmplTransSale.reread();

        if (this.checkCreditNoteSalesAccrued())
        {
            projEmplTransSale.LedgerSalesPosted      = this.checkEnterSalesAccrued();
            if (this.checkEnterSalesAccrued())
            {
                projEmplTransSale.LedgerSalesAmount  = -projTrans.transTurnoverMST();
            }
        }
        else
        {
            projEmplTransSale.LedgerSalesAmount = 0;
            projEmplTransSale.LedgerSalesPosted = NoYes::No;
        }

        projEmplTransSale.SalesPrice        = projTrans.salesPrice();
        projEmplTransSale.LineAmount        = projTrans.transTurnover();
        if (this.checkProjTransStatusIsCreditNoteProposal(projTrans.transStatus()))
        {
            projEmplTransSale.LineAmount = projEmplTransSale.LineAmount * -1;
        }
        projEmplTransSale.TransStatus       = this.parmTransStatus();

        projEmplTransSale.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of <c>ProjPostEmplProposalSale</c> class.
    /// </summary>
    /// <param name = "_projProposalEmpl">
    ///     An instance of <c>ProjProposalEmpl</c> table buffer.
    /// </param>
    /// <param name = "_projProposalEmplDetail">
    ///     An instance of <c>ProjProposalEmplDetail</c> table buffer.
    /// </param>
    /// <param name = "_projEmplTransSale">
    ///     An instance of <c>ProjEmplTransSale</c> table buffer.
    /// </param>
    /// <returns>
    ///     An instance of <c>ProjPostEmplProposalSale</c> class.
    /// </returns>
    public static ProjPostEmplProposalSale construct(ProjProposalEmpl  _projProposalEmpl, ProjProposalEmplDetail  _projProposalEmplDetail, ProjEmplTransSale _projEmplTransSale)
    {
        ProjPostEmplProposalSale projPostEmplProposalSale = new ProjPostEmplProposalSale(_projProposalEmpl, _projProposalEmplDetail, _projEmplTransSale);
        return projPostEmplProposalSale;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>