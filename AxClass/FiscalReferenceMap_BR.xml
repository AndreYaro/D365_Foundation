<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalReferenceMap_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FiscalReferenceMap_BR
{
    EFDocument_BR eFDocument;
    InvoicesReferencedByMap_BR invoicesReferencedByMap;

    FiscalEstablishmentId_BR externalFiscalEstablishmentId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>eFDocAccessKey</Name>
				<Source><![CDATA[
    public str eFDocAccessKey()
    {
        return invoicesReferencedByMap.AccessKey;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the fiscal document date.
    /// </summary>
    /// <returns>
    /// A <c>TransDate</c> representing the fiscal document date.
    /// </returns>
    public TransDate fiscalDocumentDate()
    {
        if (!this.eFDocAccessKey())
        {
            return invoicesReferencedByMap.IssueDate;
        }

        return datenull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalDocumentModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the fiscal document model.
    /// </summary>
    /// <returns>
    /// A string representing the fiscal document model.
    /// </returns>
    public str fiscalDocumentModel()
    {
        if (!this.eFDocAccessKey())
        {
            return invoicesReferencedByMap.FiscalDocuModel;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalDocumentNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the fiscal document number.
    /// </summary>
    /// <returns>
    /// The fiscal document number.
    /// </returns>
    public InvoiceId fiscalDocumentNumber()
    {
        if (!this.eFDocAccessKey())
        {
            return invoicesReferencedByMap.Number;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalDocumentSeries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the fiscal document series.
    /// </summary>
    /// <returns>
    /// A string representing the fiscal document series.
    /// </returns>
    public InvoiceSeries_BR fiscalDocumentSeries()
    {
        if (!this.eFDocAccessKey())
        {
            return invoicesReferencedByMap.Series;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>issuerCNPJ</Name>
				<Source><![CDATA[
    public CNPJCPFNum_BR issuerCNPJ()
    {
        CNPJCPFNum_BR issuerCNPJ;
        FiscalDocument_BR internalFiscalDocument;

        if (!this.eFDocAccessKey())
        {
            if (invoicesReferencedByMap.Issuer == FiscalDocumentIssuer_BR::OwnEstablishment)
            {
                switch (invoicesReferencedByMap.TableId)
                {
                    case tableNum(FiscalDocument_BR) :
                        internalFiscalDocument = invoicesReferencedByMap;
                        issuerCNPJ = internalFiscalDocument.FiscalEstablishmentCNPJCPF;
                        break;

                    case tableNum(ExternalFiscalDocument_BR) :
                        issuerCNPJ = FiscalEstablishment_BR::findById(externalFiscalEstablishmentId).CNPJCPFNum_BR;
                        break;

                    default : throw error(error::wrongUseOfFunction(funcName()));
                }
            }
            else
            {
                switch (invoicesReferencedByMap.AccountType)
                {
                    case CustVendType_BR::Customer :
                        issuerCNPJ = CustTable::find(invoicesReferencedByMap.InvoiceAccount).CNPJCPFNum_BR;
                        break;

                    case CustVendType_BR::Vendor :
                        issuerCNPJ = VendTable::find(invoicesReferencedByMap.InvoiceAccount).CNPJCPFNum_BR;
                        break;

                    case CustVendType_BR::FiscalEstablishment :
                        issuerCNPJ = FiscalEstablishment_BR::findById(invoicesReferencedByMap.InvoiceAccount).CNPJCPFNum_BR;
                        break;

                    default : throw error(error::wrongUseOfFunction(funcName()));
                }
            }
        }

        return issuerCNPJ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>issuerDirPartyType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the DirPartyType from the invoicesReferencedByMap map
    /// </summary>
    /// <returns>
    /// The related DirPartyType
    /// </returns>
    public DirPartyType issuerDirPartyType()
    {
        if (invoicesReferencedByMap.Issuer == FiscalDocumentIssuer_BR::OwnEstablishment
            || invoicesReferencedByMap.AccountType == CustVendType_BR::FiscalEstablishment)
        {
            return DirPartyType::Organization;
        }
        else if (invoicesReferencedByMap.AccountType == CustVendType_BR::Customer)
        {
            return CustTable::find(invoicesReferencedByMap.InvoiceAccount).partyType();
        }
        else
        {
            return VendTable::find(invoicesReferencedByMap.InvoiceAccount).partyType();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>issuerIE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the IE considering the Issuer and the Account Type
    /// </summary>
    /// <returns>
    /// The related IE Number
    /// </returns>
    public IENum_BR issuerIE()
    {
        IENum_BR          issuerIE;
        FiscalDocument_BR internalFiscalDocument;

        if (invoicesReferencedByMap.Issuer == FiscalDocumentIssuer_BR::OwnEstablishment)
        {
            switch (invoicesReferencedByMap.TableId)
            {
                case tableNum(FiscalDocument_BR) :
                    internalFiscalDocument = invoicesReferencedByMap;
                    issuerIE = internalFiscalDocument.FiscalEstablishmentIE;
                    break;

                case tableNum(ExternalFiscalDocument_BR) :
                    issuerIE = FiscalEstablishment_BR::findById(externalFiscalEstablishmentId).IENum_BR;
                    break;

                default : throw error(error::wrongUseOfFunction(funcName()));
            }
        }
        else
        {
            switch (invoicesReferencedByMap.AccountType)
            {
                case CustVendType_BR::Customer :
                    issuerIE = CustTable::find(invoicesReferencedByMap.InvoiceAccount).IENum_BR;
                    break;

                case CustVendType_BR::Vendor :
                    issuerIE = VendTable::find(invoicesReferencedByMap.InvoiceAccount).IENum_BR;
                    break;

                case CustVendType_BR::FiscalEstablishment :
                    issuerIE = FiscalEstablishment_BR::findById(invoicesReferencedByMap.InvoiceAccount).IENum_BR;
                    break;

                default : throw error(error::wrongUseOfFunction(funcName()));
            }
        }

        return issuerIE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>issuerStateIBGECode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the digits that represent the state from the IBGE code of the issuer's address.
    /// </summary>
    /// <returns>
    /// A string containing the retrieved digits.
    /// </returns>
    public str issuerStateIBGECode()
    {
        FiscalDocument_BR internalFiscalDocument;
        LogisticsPostalAddress postalAddress;

        if (!this.eFDocAccessKey())
        {
            if (invoicesReferencedByMap.Issuer == FiscalDocumentIssuer_BR::OwnEstablishment)
            {
                switch (invoicesReferencedByMap.TableId)
                {
                    case tableNum(FiscalDocument_BR) :
                        internalFiscalDocument = invoicesReferencedByMap;
                        postalAddress = FiscalEstablishment_BR::findById(internalFiscalDocument.FiscalEstablishment).postalAddress();
                        break;

                    case tableNum(ExternalFiscalDocument_BR) :
                        postalAddress = FiscalEstablishment_BR::findById(externalFiscalEstablishmentId).postalAddress();
                        break;

                    default : throw error(error::wrongUseOfFunction(funcName()));
                }
            }
            else
            {
                switch (invoicesReferencedByMap.AccountType)
                {
                    case CustVendType_BR::Customer :
                        postalAddress = CustTable::find(invoicesReferencedByMap.InvoiceAccount).postalAddress();
                        break;

                    case CustVendType_BR::Vendor :
                        postalAddress = VendTable::find(invoicesReferencedByMap.InvoiceAccount).postalAddress();
                        break;

                    case CustVendType_BR::FiscalEstablishment :
                        postalAddress = FiscalEstablishment_BR::findById(invoicesReferencedByMap.InvoiceAccount).postalAddress();
                        break;

                    default : throw error(error::wrongUseOfFunction(funcName()));
                }
            }

            return substr(LogisticsAddressCity::findLogisticsAddressMap(postalAddress).IBGECode_BR, 1, 2);
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(InvoicesReferencedByMap_BR _invoicesReferencedByMap)
    {
        if (_invoicesReferencedByMap.TableId == tableNum(FiscalDocument_BR))
        {
            eFDocument = EFDocument_BR::findByRef(_invoicesReferencedByMap.RecId);
        }

        invoicesReferencedByMap = _invoicesReferencedByMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retailFiscalPrinterSerialNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the fiscal printer serial number of the fiscal receipt.
    /// </summary>
    /// <returns>
    /// The fiscal printer serial number.
    /// </returns>
    /// <remarks>
    /// Only valid when referencing a fiscal receipt.
    /// </remarks>
    public RetailFiscalPrinterSerialNumber_BR retailFiscalPrinterSerialNumber()
    {
        ExternalFiscalDocument_BR externalFiscalDocument;

        if (!this.eFDocAccessKey())
        {
            if (invoicesReferencedByMap.TableId == tableNum(ExternalFiscalDocument_BR))
            {
                externalFiscalDocument = invoicesReferencedByMap;
                return externalFiscalDocument.RetailFiscalPrinterSerialNumber;
            }
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>retailTerminalNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the terminal number of the fiscal receipt.
    /// </summary>
    /// <returns>
    /// The terminal number.
    /// </returns>
    /// <remarks>
    /// Only valid when referencing a fiscal receipt.
    /// </remarks>
    public RetailTerminalNumber_BR retailTerminalNumber()
    {
        ExternalFiscalDocument_BR externalFiscalDocument;

        if (!this.eFDocAccessKey())
        {
            if (invoicesReferencedByMap.TableId == tableNum(ExternalFiscalDocument_BR))
            {
                externalFiscalDocument = invoicesReferencedByMap;
                return externalFiscalDocument.RetailTerminalNumber;
            }
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExternalFiscalEstablishmentId</Name>
				<Source><![CDATA[
    private void setExternalFiscalEstablishmentId(FiscalEstablishmentId_BR _externalFiscalEstablishmentId)
    {
        externalFiscalEstablishmentId = _externalFiscalEstablishmentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForExtFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>FiscalReferenceMap_BR</c> class for a given external fiscal document.
    /// </summary>
    /// <param name="_externalFiscalDocumentRecId">
    /// The <c>ExternalFiscalDocument_BR</c> table record to be used.
    /// </param>
    /// <param name="_fiscalEstablishmentId">
    /// The fiscal establishment id.
    /// </param>
    /// <returns>
    /// A new instance of the <c>FiscalReferenceMap_BR</c> class.
    /// </returns>
    public static FiscalReferenceMap_BR constructForExtFiscalDocument(recId _externalFiscalDocumentRecId, FiscalEstablishmentid_BR _fiscalEstablishmentId)
    {
        ExternalFiscalDocument_BR externalFiscalDocument;
        FiscalReferenceMap_BR fiscalReferenceMap_BR;

        externalFiscalDocument = ExternalFiscalDocument_BR::find(_externalFiscalDocumentRecId);

        fiscalReferenceMap_BR = new FiscalReferenceMap_BR(externalFiscalDocument);

        fiscalReferenceMap_BR.setExternalFiscalEstablishmentId(_fiscalEstablishmentId);

        return fiscalReferenceMap_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>FiscalReferenceMap_BR</c> class for a given fiscal document.
    /// </summary>
    /// <param name="_fiscalDocumentRecId">
    /// The <c>FiscalDocument_BR</c> table record to be used.
    /// </param>
    /// <returns>
    /// A new instance of the <c>FiscalReferenceMap_BR</c> class.
    /// </returns>
    public static FiscalReferenceMap_BR constructForFiscalDocument(recId _fiscalDocumentRecId)
    {
        FiscalDocument_BR fiscalDocument;

        fiscalDocument = FiscalDocument_BR::find(_fiscalDocumentRecId);
        return new FiscalReferenceMap_BR(fiscalDocument);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>