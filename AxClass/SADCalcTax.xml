<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SADCalcTax</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class SADCalcTax extends TradeCalcTax
{
    private Common source;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>showTaxLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Shows the temporary sales tax form for line.
    /// </summary>
    /// <param name="_menuItemDisplayStr">
    ///     The menu item that opens the <c>TaxTmpWorkTrans</c> form.
    /// </param>
    /// <param name="_sadTable">
    ///     The <c>PlSADTable</c> record.
    /// </param>
    /// <param name="_sadTrans">
    ///      The <c>PlSADTrans</c> record.
    /// </param>
    public static void showTaxLine(str _menuItemDisplayStr, Common _sadTable, Common _sadTrans)
    {
        SADCalcTax sadCalcTax = SADCalcTax::newForSourceTable(_sadTable);
        sadCalcTax.calcTax(null);
        sadCalcTax.tax().sourceSingleLine(true, true);
        Tax::showTaxes(_menuItemDisplayStr, sadCalcTax.tax(), _sadTrans);

        sadCalcTax.validateTaxcode(NoYes::No, _sadTrans.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Shows the temporary sales tax form.
    /// </summary>
    /// <param name="_menuItemDisplayStr">
    ///     The menu item that opens the <c>TaxTmpWorkTrans</c> form.
    /// </param>
    /// <param name="_sadTable">
    ///     The <c>PlSADTable</c> record.
    /// </param>
    public static void showTax(str _menuItemDisplayStr, Common _sadTable)
    {
        SADCalcTax sadCalcTax = SADCalcTax::newForSourceTable(_sadTable);
        sadCalcTax.calcTax(null);
        Tax::showTaxes(_menuItemDisplayStr, sadCalcTax.tax(), _sadTable);

        sadCalcTax.validateTaxcode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxcode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates sales tax code properties.
    /// </summary>
    /// <param name="_shouldBlock">
    ///     Whether to throw error when validation fails.
    /// </param>
    /// <param name="_sourceRecId">
    ///     The RecId of source transaction line.
    /// </param>
    public void validateTaxcode(boolean _shouldBlock = NoYes::No, RecId _sourceRecId = 0)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForSourceTable</Name>
				<Source><![CDATA[
    [Replaceable]
    public static SADCalcTax newForSourceTable(Common _common)
    {
        switch (_common.TableId)
        {
            case tablenum(PlSADTable):
                return SADCalcTax_Trans::newForSourceTable(_common);
            case tablenum(PlSADFinanceTable):
                return SADCalcTax_Finance::newForSourceTable(_common);
            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Instantiates the <c>SADCalcTax</c> object.
    /// </summary>
    /// <param name="_record">
    ///     The source record.
    /// </param>
    protected void init(Common  _record)
    {
        source = _record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the taxes for SAD Document.
    /// </summary>
    /// <param name="_tradeTotals">
    ///     An instance of the <c>TradeTotalsBase</c> class that is used to obtain totals.
    /// </param>
    /// <returns>
    ///     Total taxes.
    /// </returns>
    [Replaceable]
    public TaxAmountCur calcTax(TradeTotalsBase _tradeTotals)
    {
        TaxSAD taxSAD = TaxSAD::newForCalcTax(this);
        TaxAmountCur amountCur = taxSAD.calc();
        this.tax(taxSAD);
        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the source record.
    /// </summary>
    /// <returns>The source record.</returns>
    public Common getSource()
    {
        return source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the tableId of the source record.
    /// </summary>
    /// <returns>
    ///     The tableId of the source record.
    /// </returns>
    public TableId tableId()
    {
        return source.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the recId of the source record.
    /// </summary>
    /// <returns>
    ///     The recId of the source record.
    /// </returns>
    public RecId recId()
    {
        return source.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets delivery date.
    /// </summary>
    /// <returns>
    ///     The delivery date.
    /// </returns>
    public DlvDate deliveryDate()
    {
        return this.invoiceDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the document date.
    /// </summary>
    /// <returns>
    ///     The document date.
    /// </returns>
    public DocumentDate documentDate()
    {
        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the tax date.
    /// </summary>
    /// <returns>
    ///     The tax date.
    /// </returns>
    public TransDate taxDate()
    {
        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the transaction date.
    /// </summary>
    /// <returns>
    ///     The transaction date.
    /// </returns>
    public TransDate transactionDate()
    {
        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    CurrencyCode currencyCode()
    {
        return CompanyInfoHelper::standardCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    VendExchRate exchRate(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return ExchangeRateHelper::exchRate(this.currencyCode(), _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    ExchrateSecondary exchRateSecondary(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return ExchangeRateHelper::exchRateSecond(this.currencyCode(), _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    EUROTriangulation  triangulation(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return Currency::triangulation(this.currencyCode(), _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingCurrencyExchangeRate</Name>
				<Source><![CDATA[
    internal ReportingCurrencyExchRate reportingCurrencyExchangeRate(date _date = dateNull())
    {
        ReportingCurrencyExchRate reportingCurrencyExchRate;
        if (PurchParameters::find().DateOfExchRate_W != DateOfExchRate_W::PostingDate
            && _date
            && Ledger::isReportingCurrencyDefined())
        {
            ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), this.CurrencyCode());
            exchangeRateHelper.parmToCurrency(Ledger::reportingCurrency());
            exchangeRateHelper.parmExchangeRateTypeRecId(Ledger::reportingCurrencyExchangeRateType());
            exchangeRateHelper.parmExchangeDate(_date);
            reportingCurrencyExchRate = exchangeRateHelper.getExchangeRate1();
        }
        return reportingCurrencyExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatRegData_W</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method is used by various financial transactions to pass information from the financial transaction down to the tax calculation engine.
    /// </summary>
    /// <returns>
    ///     A container loaded with various fields needed by the tax calculation engine.
    /// </returns>
    public container vatRegData_W()
    {
        VatDueDate_W           vatDate;
        DocumentDate           documentDate;
        PlCustVendName         custVendName;
        VATNum                 vatNum;
        Addressing             addressing;
        PlTaxPeriodPaymentCode  taxPeriodPaymentCode;
        IntraComVATDueDate_W    useIntrComVatDate;
        PlCustVendAccount custVendAccount;

        VendAccount vendAccount = this.getVendAccount();
        if (vendAccount)
        {
            VendTable sadVend = VendTable::find(vendAccount);
            custVendName = sadVend.name();
            addressing = sadVend.postalAddress().Address;
            vatNum = sadVend.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, this.transactionDate());

            custVendAccount = sadVend.AccountNum;
        }

        vatDate = this.taxDate();
        documentDate = this.documentDate();

        return [ vatDate,
                 documentDate,
                 custVendName,
                 vatNum,
                 addressing,
                 taxPeriodPaymentCode,
                 NoYes::No,
                 useIntrComVatDate,
                 custVendAccount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendAccount</Name>
				<Source><![CDATA[
    protected VendAccount getVendAccount()
    {
        return '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>