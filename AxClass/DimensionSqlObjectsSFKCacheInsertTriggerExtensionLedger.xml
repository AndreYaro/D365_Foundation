<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimensionSqlObjectsSFKCacheInsertTriggerExtensionLedger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides extensions to the instead of insert trigger on <c>DimensionDataEntitySFKCache</c> for ledger accounts.
/// </summary>
[System.ComponentModel.Composition.ExportAttribute("Dynamics.AX.Application.DimensionSQLObjectsSFKCacheInsertTriggerExtension")]
public class DimensionSqlObjectsSFKCacheInsertTriggerExtensionLedger extends DimensionSQLObjectsSFKCacheInsertTriggerExtension
{
    const private str sqlEnumColumnAssignmentAccountStructureText = @"
                        UPDATE NR
                            SET
                            %1 = COALESCE( (SELECT TOP 1 PARSEDSTRING.DISPLAYVALUE FROM dbo.PARSEINTEGRATIONSTRING((NR.INTEGRATIONSTRING), dbo.GETCHARTOFACCOUNTSDELIMITER(NR.PARTITION), '\') PARSEDSTRING), '')
                            FROM @NEWREFERENCES NR
                            JOIN @NEWREFERENCES I ON I.ID = NR.ID
                            AND (NR.EXTENDEDDATATYPE = '%2' OR NR.EXTENDEDDATATYPE = '%3')
                            AND NR.ENUMVALUE = %4
                            AND NR.ENUMNAME = '%5'
                            AND NR.SECONDARYENUMVALUE = %6
                        ";

    const private str sqlEnumColumnAssignmentDynamicText = @"
                        UPDATE NR
                            SET
                            %1 = COALESCE( (SELECT PARSEDSTRING.DISPLAYVALUE FROM dbo.PARSEINTEGRATIONSTRING((NR.INTEGRATIONSTRING), dbo.GETCHARTOFACCOUNTSDELIMITER(NR.PARTITION), '\') PARSEDSTRING), ''),
                            ACCOUNTSTRUCTURE = (SELECT TOP 1 DH.RECID FROM DIMENSIONHIERARCHY DH WHERE DH.PARTITION = NR.PARTITION AND DH.STRUCTURETYPE = %2)
                            FROM @NEWREFERENCES NR
                            JOIN @NEWREFERENCES I ON I.ID = NR.ID
                            AND (NR.EXTENDEDDATATYPE = '%3' OR NR.EXTENDEDDATATYPE = '%4')
                            AND NR.ENUMVALUE = %5
                            AND NR.ENUMNAME = '%6'
                            AND NR.SECONDARYENUMVALUE = %7
                        ";

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getIntegrationFormatForDimensionType</Name>
				<Source><![CDATA[
    public str getIntegrationFormatForDimensionType()
    {
        str sqlStatement = strFmt(@"
                    WHEN '%1' THEN %2", identifierStr(LedgerDimensionAccount), enum2int(DimensionHierarchyType::DataEntityLedgerDimensionFormat));
        sqlStatement += strFmt(@"
                    WHEN '%1' THEN %2", identifierStr(LedgerDimensionDefaultAccount), enum2int(DimensionHierarchyType::DataEntityLedgerDimensionFormat));
        sqlStatement += strFmt(@"
                    WHEN '%1' THEN %2", identifierStr(DimensionDynamicAccount), enum2int(DimensionHierarchyType::DataEntityLedgerDimensionFormat));
        sqlStatement += strFmt(@"
                    WHEN '%1' THEN %2", identifierStr(DimensionDynamicDefaultAccount), enum2int(DimensionHierarchyType::DataEntityLedgerDimensionFormat));

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSegmentValuesForDimensionType</Name>
				<Source><![CDATA[
    public str getSegmentValuesForDimensionType()
    {
        // These types should have the IntegrationString split according to the IntegrationFormat
        str sqlStatement = strFmt(@"
                (EXTENDEDDATATYPE = '%1')", identifierStr(LedgerDimensionAccount));

        // DimensionDynamicAccount LedgerJournalACType::Ledger is handled as a ledger type
        sqlStatement += strFmt(@"
                OR
                (EXTENDEDDATATYPE = '%1' AND ENUMNAME = '%2' AND ENUMVALUE = %3)
                ", identifierStr(DimensionDynamicAccount), enumStr(LedgerJournalACType), enum2int(LedgerJournalACType::Ledger));

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSegmentColumnAssignment</Name>
				<Source><![CDATA[
    public str getSegmentColumnAssignment()
    {
        str sqlSelectStatmentText;
        SysDictEnum dynamicAccountType;

        // Do not support ModuleInventCustVend::Invent, default to ModuleInventCustVend::Cust
        sqlSelectStatmentText += strFmt(@"
        update @NEWREFERENCES set SECONDARYENUMVALUE = %1 where SECONDARYENUMVALUE = %2
        AND (
                ENUMNAME = '%3'
                OR ENUMNAME = '%4'
                OR ENUMNAME = '%5'
                OR ENUMNAME = '%6'
                OR ENUMNAME = '%7'
                OR ENUMNAME = '%8'
                OR ENUMNAME = '%9'
                OR ENUMNAME = '%10'
            )
        ", enum2int(ModuleInventCustVend::Cust),
            enum2int(ModuleInventCustVend::Invent),
            enumStr(LedgerJournalACType),
            enumStr(TrvPostMethod),
            enumStr(ProjOffsetType),
            enumStr(MarkupType),
            enumStr(BankCodaLedgerJournalACType),
            enumStr(LedgerJournalACTypeForPaymProposal),
            enumStr(RetailLedgerBank),
            enumStr(TaxWithholdACType_IN)
            );

        // Set each supported enum value and account structure
        sqlSelectStatmentText += this.getEnumColumnAssignment(enumStr(LedgerJournalACType));
        sqlSelectStatmentText += this.getEnumColumnAssignment(enumStr(TrvPostMethod));
        sqlSelectStatmentText += this.getEnumColumnAssignment(enumStr(ProjOffsetType));
        sqlSelectStatmentText += this.getEnumColumnAssignment(enumStr(MarkupType));
        sqlSelectStatmentText += this.getEnumColumnAssignment(enumStr(BankCodaLedgerJournalACType));
        sqlSelectStatmentText += this.getEnumColumnAssignment(enumStr(LedgerJournalACTypeForPaymProposal));

        sqlSelectStatmentText += this.getEnumCustomColumnAssignment();

        // Set default accounts types
        sqlSelectStatmentText += strFmt(@"
            UPDATE NR
                SET
                %1 = COALESCE( (SELECT TOP 1 PIS.DISPLAYVALUE FROM dbo.PARSEINTEGRATIONSTRING((NR.INTEGRATIONSTRING), dbo.GETCHARTOFACCOUNTSDELIMITER(NR.PARTITION), '\') PIS), '')
            FROM @NEWREFERENCES NR
                JOIN @NEWREFERENCES I ON I.ID = NR.ID
                AND NR.EXTENDEDDATATYPE = '%2'
            ",
            DimensionAttribute::find(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)).Name,
            identifierStr(LedgerDimensionDefaultAccount));

        return sqlSelectStatmentText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumCustomColumnAssignment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the sql for enums that depend on company specific data, ensuring enums can be handled in all configurations.
    /// </summary>
    /// <returns>The SQL statements to set additional dimension columns.</returns>
    private str getEnumCustomColumnAssignment()
    {
        str sqlSelectStatmentText;

        // Get the multi-type hierarchries
        RecId hierarchyId = DimensionHierarchy::getHierarchyIdByHierarchyType(DimensionHierarchyType::BankAccount);
        DimensionHierarchy dimBankHierarchy = DimensionHierarchy::find(hierarchyId);
        Name systemGeneratedBankName = DimensionAttribute::getSystemGeneratedAttributeName(dimBankHierarchy.StructureType);

        hierarchyId = DimensionHierarchy::getHierarchyIdByHierarchyType(DimensionHierarchyType::Customer);
        DimensionHierarchy dimCustHierarchy = DimensionHierarchy::find(hierarchyId);
        Name systemGeneratedCustName = DimensionAttribute::getSystemGeneratedAttributeName(dimBankHierarchy.StructureType);

        hierarchyId = DimensionHierarchy::getHierarchyIdByHierarchyType(DimensionHierarchyType::Vendor);
        DimensionHierarchy dimVendHierarchy = DimensionHierarchy::find(hierarchyId);
        Name systemGeneratedVendName = DimensionAttribute::getSystemGeneratedAttributeName(dimBankHierarchy.StructureType);

        // RetailLedgerBank
        sqlSelectStatmentText += strFmt(sqlEnumColumnAssignmentAccountStructureText,
                        DimensionAttribute::find(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)).Name,
                        identifierstr(LedgerDimensionDefaultAccount),
                        identifierstr(DimensionDynamicDefaultAccount),
                        enum2int(RetailLedgerBank::Ledger),
                        enumStr(RetailLedgerBank),
                        0);
        sqlSelectStatmentText += strFmt(sqlEnumColumnAssignmentDynamicText,
                        systemGeneratedBankName,
                        enum2int(dimBankHierarchy.StructureType),
                        identifierstr(DimensionDynamicAccount),
                        identifierstr(DimensionDynamicDefaultAccount),
                        enum2int(RetailLedgerBank::Bank),
                        enumStr(RetailLedgerBank),
                        0);

        // TaxWithholdACType_IN
        sqlSelectStatmentText += strFmt(sqlEnumColumnAssignmentAccountStructureText,
                        DimensionAttribute::find(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)).Name,
                        identifierstr(LedgerDimensionDefaultAccount),
                        identifierstr(DimensionDynamicDefaultAccount),
                        enum2int(TaxWithholdACType_IN::Ledger),
                        enumStr(TaxWithholdACType_IN),
                        0);
        sqlSelectStatmentText += strFmt(sqlEnumColumnAssignmentDynamicText,
                        systemGeneratedCustName,
                        enum2int(dimCustHierarchy.StructureType),
                        identifierstr(DimensionDynamicAccount),
                        identifierstr(DimensionDynamicDefaultAccount),
                        enum2int(TaxWithholdACType_IN::Cust),
                        enumStr(TaxWithholdACType_IN),
                        0);
        sqlSelectStatmentText += strFmt(sqlEnumColumnAssignmentDynamicText,
                        systemGeneratedVendName,
                        enum2int(dimVendHierarchy.StructureType),
                        identifierstr(DimensionDynamicAccount),
                        identifierstr(DimensionDynamicDefaultAccount),
                        enum2int(TaxWithholdACType_IN::Vend),
                        enumStr(TaxWithholdACType_IN),
                        0);

        // TaxEngineTaxJournalAccountType
        sqlSelectStatmentText += strFmt(sqlEnumColumnAssignmentAccountStructureText,
                        DimensionAttribute::find(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)).Name,
                        identifierstr(LedgerDimensionDefaultAccount),
                        identifierstr(DimensionDynamicDefaultAccount),
                        enum2int(TaxEngineTaxJournalAccountType::Ledger),
                        enumStr(TaxEngineTaxJournalAccountType),
                        0);
        sqlSelectStatmentText += strFmt(sqlEnumColumnAssignmentAccountStructureText,
                        DimensionAttribute::find(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)).Name,
                        identifierstr(LedgerDimensionDefaultAccount),
                        identifierstr(DimensionDynamicDefaultAccount),
                        enum2int(TaxEngineTaxJournalAccountType::Tax),
                        enumStr(TaxEngineTaxJournalAccountType),
                        0);
        sqlSelectStatmentText += strFmt(sqlEnumColumnAssignmentDynamicText,
                        systemGeneratedBankName,
                        enum2int(dimBankHierarchy.StructureType),
                        identifierstr(DimensionDynamicAccount),
                        identifierstr(DimensionDynamicDefaultAccount),
                        enum2int(RetailLedgerBank::Bank),
                        enumStr(RetailLedgerBank),
                        0);
        sqlSelectStatmentText += strFmt(sqlEnumColumnAssignmentDynamicText,
                        systemGeneratedCustName,
                        enum2int(dimCustHierarchy.StructureType),
                        identifierstr(DimensionDynamicAccount),
                        identifierstr(DimensionDynamicDefaultAccount),
                        enum2int(TaxWithholdACType_IN::Cust),
                        enumStr(TaxWithholdACType_IN),
                        0);
        sqlSelectStatmentText += strFmt(sqlEnumColumnAssignmentDynamicText,
                        systemGeneratedVendName,
                        enum2int(dimVendHierarchy.StructureType),
                        identifierstr(DimensionDynamicAccount),
                        identifierstr(DimensionDynamicDefaultAccount),
                        enum2int(TaxWithholdACType_IN::Vend),
                        enumStr(TaxWithholdACType_IN),
                        0);

        return sqlSelectStatmentText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumColumnAssignment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SQL for assigning the system generated columns based on the combination of each Enum and secondary Enum value.
    /// </summary>
    /// <param name = "_enumName">The name of the Enum.</param>
    /// <returns>A SQL update statement.</returns>
    private str getEnumColumnAssignment(EnumName _enumName)
    {
        SysDictEnum dynamicAccountType = new SysDictEnum(enumName2Id(_enumName));
        int dynamicAccountCounter;
        str sqlSelectStatmentText;

        for (dynamicAccountCounter = 0; dynamicAccountCounter < dynamicAccountType.values(); dynamicAccountCounter++)
        {
            int accountType = dynamicAccountType.index2Value(dynamicAccountCounter);

            int moduleValueCounter;
            SysDictEnum moduleType = new SysDictEnum(enumNum(ModuleInventCustVend));

            for (moduleValueCounter = 0; moduleValueCounter < moduleType.values(); moduleValueCounter++)
            {
                // Determine which column a dynamic default account should use based on enum Id, value, and ModuleInventCustVend value
                int moduleValue = moduleType.index2Value(moduleValueCounter);

                if (this.isEnumCombinationValid(accountType, _enumName, moduleValue))
                {
                    DimensionHierarchyType dimensionHierarchyType = DimensionHierarchyHelper::getHierarchyTypeByAccountType(accountType, enumName2Id(_enumName), moduleValue);

                    if (dimensionHierarchyType == DimensionHierarchyType::AccountStructure)
                    {
                        // Set dynamic default accounts to MainAccount.
                        sqlSelectStatmentText += strFmt(sqlEnumColumnAssignmentAccountStructureText,
                            DimensionAttribute::find(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)).Name,
                            identifierstr(LedgerDimensionDefaultAccount),
                            identifierstr(DimensionDynamicDefaultAccount),
                            accountType,
                            dynamicAccountType.name(),
                            moduleValue);
                    }
                    else
                    {
                        // Set dynamic default account to the SystemGenerated column.
                        RecId hierarchyId = DimensionHierarchy::getHierarchyIdByHierarchyType(dimensionHierarchyType);
                        DimensionHierarchy dimHierarchy = DimensionHierarchy::find(hierarchyId);
                        Name systemGeneratedName = DimensionAttribute::getSystemGeneratedAttributeName(dimHierarchy.StructureType);

                        sqlSelectStatmentText += strFmt(sqlEnumColumnAssignmentDynamicText,
                            systemGeneratedName,
                            enum2int(dimHierarchy.StructureType),
                            identifierstr(DimensionDynamicAccount),
                            identifierstr(DimensionDynamicDefaultAccount),
                            dynamicAccountType.index2Value(dynamicAccountCounter),
                            dynamicAccountType.name(),
                            moduleValue);
                    }
                }
            }
        }

        return sqlSelectStatmentText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnumCombinationValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the EnumName, AccountType, and Secondary Enum value are allowed.
    /// </summary>
    /// <param name = "_accountType">The account type of the dimension.</param>
    /// <param name = "_enumName">The Enum name of the dimension.</param>
    /// <param name = "_moduleCustVend">The secondary Enum value of the dimension.</param>
    /// <returns></returns>
    private boolean isEnumCombinationValid(int _accountType, EnumName _enumName, ModuleInventCustVend _moduleCustVend)
    {
        boolean isValidHierarchy = true;

        // <GIN>
        #ISOCountryRegionCodes
        // </GIN>

        if (_moduleCustVend == enum2int(ModuleInventCustVend::Invent))
        {
            isValidHierarchy = false;
        }

        if (_enumName == enumStr(BankCodaLedgerJournalACType)
            && _accountType == enum2int(BankCodaLedgerJournalACType::None))
        {
            isValidHierarchy = false;
        }

        if (_enumName == enumStr(LedgerJournalACTypeForPaymProposal)
            && _accountType == enum2int(LedgerJournalACTypeForPaymProposal::None))
        {
            isValidHierarchy = false;
        }

        return isValidHierarchy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimensionTypeForEDT</Name>
				<Source><![CDATA[
    public str getLedgerDimensionTypeForEDT()
    {
        str sqlStatementText = strFmt(@"
                WHEN (EXTENDEDDATATYPE = '%1') THEN %2
                WHEN (EXTENDEDDATATYPE = '%3') THEN %4
                WHEN (EXTENDEDDATATYPE = '%5') THEN %6
                WHEN (EXTENDEDDATATYPE = '%7') THEN
               ",
                identifierStr(LedgerDimensionAccount),
                enum2int(LedgerDimensionType::Account),

                identifierStr(DimensionDynamicAccount),
                enum2int(LedgerDimensionType::Account),

                identifierStr(LedgerDimensionDefaultAccount),
                enum2int(LedgerDimensionType::DefaultAccount),

                identifierStr(DimensionDynamicDefaultAccount));

                // Each DynamicDefaultAccount of type Ledger
                // LedgerJournalACType
                sqlStatementText += strFmt(@"
                    (CASE WHEN ENUMNAME = '%1' AND ENUMVALUE = %2 THEN %3",
                enumStr(LedgerJournalACType),
                enum2int(LedgerJournalACType::Ledger),
                enum2int(LedgerDimensionType::DefaultAccount));
                // TrvPostMethod
                sqlStatementText += strFmt(@"
                    WHEN ENUMNAME = '%1' AND ENUMVALUE = %2 THEN %3",
                enumStr(TrvPostMethod),
                enum2int(TrvPostMethod::Ledger),
                enum2int(LedgerDimensionType::DefaultAccount));
                // ProjOffsetType
                sqlStatementText += strFmt(@"
                    WHEN ENUMNAME = '%1' AND ENUMVALUE = %2 THEN %3",
                enumStr(ProjOffsetType),
                enum2int(ProjOffsetType::Ledger),
                enum2int(LedgerDimensionType::DefaultAccount));
                // MarkupType
                sqlStatementText += strFmt(@"
                    WHEN ENUMNAME = '%1' AND ENUMVALUE = %2 THEN %3",
                enumStr(MarkupType),
                enum2int(MarkupType::LedgerAccount),
                enum2int(LedgerDimensionType::DefaultAccount));
                // BankCodaLedgerJournalACType
                sqlStatementText += strFmt(@"
                    WHEN ENUMNAME = '%1' AND ENUMVALUE = %2 THEN %3",
                enumStr(BankCodaLedgerJournalACType),
                enum2int(BankCodaLedgerJournalACType::Ledger),
                enum2int(LedgerDimensionType::DefaultAccount));
                // LedgerJournalACTypeForPaymProposal
                sqlStatementText += strFmt(@"
                    WHEN ENUMNAME = '%1' AND ENUMVALUE = %2 THEN %3
                ELSE %4 END)
                ",
                enumStr(RetailLedgerBank),
                enum2int(RetailLedgerBank::Ledger),
                enum2int(LedgerDimensionType::DefaultAccount),
                enum2int(LedgerDimensionType::Account));

        return sqlStatementText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdditionalHierarchyAssignment</Name>
				<Source><![CDATA[
    public str getAdditionalHierarchyAssignment()
    {
        str sqlStatementText = strFmt(@"
        update @NewReferences SET ACCOUNTSTRUCTURE =
            (
                COALESCE(

                    (-- Determine Account structure from Main Account
                    SELECT TOP 1 DH.RECID FROM DIMENSIONHIERARCHY DH
                    JOIN DIRPARTYTABLE DPT ON DPT.PARTITION = NR.PARTITION AND DPT.INSTANCERELATIONTYPE = %1 AND DPT.DATAAREA = NR.DATAAREAID
                    JOIN LEDGERSTRUCTURE LS ON LS.DIMENSIONHIERARCHY = DH.RECID
                    JOIN LEDGER L ON LS.LEDGER = L.RECID AND L.PRIMARYFORLEGALENTITY = DPT.RECID
                    JOIN DIMENSIONHIERARCHYLEVEL DHL ON DHL.DIMENSIONHIERARCHY = DH.RECID
                    JOIN DIMENSIONATTRIBUTE DA ON DA.RECID = DHL.DIMENSIONATTRIBUTE AND DA.NAME = '%2'
                    JOIN DIMENSIONCONSTRAINTTREE DCT ON DCT.DIMENSIONHIERARCHY = DH.RECID
                    JOIN DIMENSIONCONSTRAINTNODE DCN ON DCN.DIMENSIONCONSTRAINTTREE = DCT.RECID AND DCN.DIMENSIONHIERARCHYLEVEL = DHL.RECID
                    JOIN DIMENSIONCONSTRAINTNODECRITERIA CRIT ON CRIT.DIMENSIONCONSTRAINTNODE = DCN.RECID
                    WHERE
                        HIERARCHYTYPE = %3
                    AND ((EXTENDEDDATATYPE = '%4' AND ENUMNAME = '%5' AND ENUMVALUE = %6)
                        OR
                        (EXTENDEDDATATYPE = '%7'))
                    AND DH.PARTITION = NR.PARTITION
                    AND L.PARTITION = NR.PARTITION
                    AND LS.PARTITION = NR.PARTITION
                    AND DHL.PARTITION = NR.PARTITION
                    AND DA.PARTITION = NR.PARTITION
                    AND DCT.PARTITION = NR.PARTITION
                    AND DCN.PARTITION = NR.PARTITION
                    AND CRIT.PARTITION = NR.PARTITION
                    AND DH.STRUCTURETYPE = 0
                    AND DH.ISDRAFT = 0
                    AND DH.DELETEDVERSION = 0
                    AND DH.ISSYSTEMGENERATED = 0
                    AND (NR.MAINACCOUNT LIKE CRIT.WILDCARDSTRING OR (
                        (CRIT.WILDCARDSTRING = '')
                    AND (CRIT.RANGEFROM = '' OR (CRIT.ISFROMOPEN = 0 AND NR.MAINACCOUNT >= CRIT.RANGEFROM) OR (CRIT.ISFROMOPEN = 1 AND NR.MAINACCOUNT > CRIT.RANGEFROM))
                    AND (CRIT.RANGETO = '' OR (CRIT.ISTOOPEN = 0 AND NR.MAINACCOUNT <= CRIT.RANGETO) OR (CRIT.ISTOOPEN = 1 AND NR.MAINACCOUNT < CRIT.RANGETO))
                    ))
                    ),
                    -- Use the provided Account Structure
                    (select DH.RECID
                        FROM DIMENSIONHIERARCHY DH
                        WHERE NR.HIERARCHYNAME != ''
                            AND NR.HIERARCHYNAME = DH.NAME
                            AND NR.PARTITION = DH.PARTITION
                            AND DH.STRUCTURETYPE = 0 -- AccountStructure
                            AND DH.ISSYSTEMGENERATED = 0
                            AND DH.ISDRAFT = 0
                            AND DH.DELETEDVERSION = 0
                            AND (NR.EXTENDEDDATATYPE = '%7')
                    )
                )
            )
            FROM @NEWREFERENCES NR",
            tableNum(CompanyInfo),
            strUpr(DimensionAttribute::find(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)).Name),
            enum2int(DimensionHierarchyType::DataEntityLedgerDimensionFormat),
            strUpr(identifierStr(DimensionDynamicAccount)),
            enumStr(LedgerJournalACType),
            enum2int(LedgerJournalACType::Ledger),
            strUpr(identifierStr(LedgerDimensionAccount)));

        return sqlStatementText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHierarchyToDAVCMapping</Name>
				<Source><![CDATA[
    public str getHierarchyToDAVCMapping()
    {
        str sqlStatmentText = strFmt(@"
            (select I.ACCOUNTSTRUCTURE WHERE
                                        ((I.EXTENDEDDATATYPE = '%1')
                                        OR
                                        (I.EXTENDEDDATATYPE = '%2' AND I.ENUMNAME = '%3' AND I.ENUMVALUE = '%4'))
                                        AND I.ACCOUNTSTRUCTURE != 0)",
            extendedTypeStr(LedgerDimensionAccount),
            extendedTypeStr(DimensionDynamicAccount),
            enumStr(LedgerJournalACType),
            enum2int(LedgerJournalACType::Ledger));

        return sqlStatmentText;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>