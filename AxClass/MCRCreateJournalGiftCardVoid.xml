<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRCreateJournalGiftCardVoid</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>MCRCreateJournalGiftCertVoid</c> class voids the liability account that the monies
///     were originally booked to have to be relieved and the offset revenue account
///     should be debited.
/// </summary>
class MCRCreateJournalGiftCardVoid
{
    RetailParameters        retailParameters;
    SalesLine               salesLine;
    InventTable             inventTable;
    MCRLedgerJournal        mcrLedgerJournal;
    MCRSalesLine            mcrSalesLine;
    RetailGiftCardTable     retailGiftCardTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountNumLiability</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the liability account for the gift certificate.
    /// </summary>
    /// <returns>
    ///     The liability account for the gift certificate.
    /// </returns>
    /// <remarks>
    ///     The liability account is the revenue account that is set up on the gift certificate
    ///     item. Gift certs are always booked as liabilites till they are used.
    /// </remarks>
    private LedgerDimensionDefaultAccount accountNumLiability()
    {
        LedgerDimensionDefaultAccount  liabilityAcct;
        // This account will be the liability account or the account
        // set up as the revenue account on the gift item.

        ItemId giftCardItem = (salesLine.ItemId != null) ? salesLine.ItemId : RetailParameters::find().GiftcardItem;
        ItemGroupId giftCardItemGroup = InventTable::find(giftCardItem).itemGroupId();

        liabilityAcct = InventPosting::accountItemLedgerDimensionFromParameters(
            this.buildAccountItemLedgerDimensionParameter(
                InventAccountType::SalesRevenue,
                giftCardItem,
                salesLine ? inventTable.itemGroupId() : giftCardItemGroup));
            
        return liabilityAcct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountNumOffset</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the offset account for the gift card.
    /// </summary>
    /// <returns>
    ///     The offset account for the gift card.
    /// </returns>
    /// <remarks>
    ///     The offset account which will be debited when a gift card is voided
    ///     is driven by set up on the inventory management parameters. If the check box to
    ///     use the inventory posting account is checked then the return cosumption account
    ///     on the inventory posting set up will be used. If this is not checked then the account
    ///     set up with the reason code on the gift void reason codes table will be used as the
    ///     offset.
    /// </remarks>
    private LedgerDimensionDefaultAccount accountNumOffset()
    {
        LedgerDimensionDefaultAccount   offsetAcct;

        // This account will be the offset account which will either be
        // the return consumption account on the item group or the account specified
        // based on the reason code in the invent parameters.

        ItemId giftCardItem = (salesLine.ItemId != null) ? salesLine.ItemId : RetailParameters::find().GiftcardItem;
        ItemGroupId giftCardItemGroup = InventTable::find(giftCardItem).itemGroupId();

        offsetAcct = InventPosting::accountItemLedgerDimensionFromParameters(
            this.buildAccountItemLedgerDimensionParameter(
                InventAccountType::SalesConsump,
                giftCardItem,
                salesLine ? inventTable.itemGroupId() : giftCardItemGroup));

        return offsetAcct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAccountItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting account ledger dimension for an item.
    /// </summary>
    /// <param name="_accountType">An inventory account type.</param>
    /// <param name="_itemId">An item Id.</param>
    /// <param name="_itemGroupId">An item group Id.</param>
    /// <returns>The built parameter instance.</returns>
    protected InventPostingAccountItemLedgerDimensionParameters buildAccountItemLedgerDimensionParameter(InventAccountType _accountType, ItemId _itemId, ItemGroupId _itemGroupId)
    {
        return InventPostingAccountItemLedgerDimensionParameters::newFromParameters(
            _accountType,
            _itemId,
            _itemGroupId,
            0,
            salesLine ? salesLine.CustAccount : '',
            salesLine ? salesLine.CustGroup : '',
            salesLine ? salesLine.TaxGroup : '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGeneralLedgerVoid</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the Ledger journal table and the ledger journal trans and post is run to post the
    ///     journal.
    /// </summary>
    /// <returns>
    ///     true if the ledger was successfully created; otherwise, false.
    /// </returns>
    public boolean createGeneralLedgerVoid()
    {
        LedgerJournalTable          ledgerJournalTable;
        LedgerJournalTrans          ledgerJournalTrans;
        int                         vouchersPosted;
        int                         vouchersInError;
        boolean                     ledgerCreated = false;
        GeneralJournalAccountEntry  generalJournalAccountEntry;
        GeneralJournalEntry         generalJournalEntry;
        LedgerEntryJournal          ledgerEntryJournal;

        try
        {
            ledgerJournalTable =   this.createLedgerJournalTable();
            ledgerJournalTrans =   this.createLedgerJournalTrans(ledgerJournalTable);
        }
        catch
        {
            info("@MCR35546");
            return ledgerCreated;
        }
        ttsBegin;
        if (ledgerJournalTable
            && ledgerJournalTrans)
        {
            mcrLedgerJournal.post(ledgerJournalTable);

            // At this point the LedgerTrans record is created. Retrieve it to change the posting type.
            // Even though we are creating a general ledger - the posting types are really that
            // of returns consumption offseting the sales revenue/liability. This needs to be
            // reflected on the ledger trans. The ledgerjournalcheck post creates the ledgerVoucherObject
            // which is where the posting type is decided. In that module these posting types cannot
            // be set hence modifying the ledgerTrans after the fact.
            vouchersPosted = mcrLedgerJournal.getNumVouchersBooked();
            vouchersInError = mcrLedgerJournal.getNumVouchersInError();

            if (vouchersInError == 0)
            {
                info(strFmt("@MCR37133", ledgerJournalTable.JournalNum));

                select firstonly forupdate generalJournalAccountEntry
                    join generalJournalEntry
                        where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                    join RecId from ledgerEntryJournal
                        where ledgerEntryJournal.JournalNumber == ledgerJournalTable.JournalNum
                        && generalJournalEntry.LedgerEntryJournal == ledgerEntryJournal.RecId;

                if (generalJournalAccountEntry.LedgerDimension == this.accountNumLiability())
                {
                    generalJournalAccountEntry.PostingType= LedgerPostingType::SalesRevenue;
                }
                if (generalJournalAccountEntry.LedgerDimension == this.accountNumOffset())
                {
                    generalJournalAccountEntry.PostingType = LedgerPostingType::SalesConsump;
                }
                generalJournalAccountEntry.write();

                ledgerCreated = true;
            }
        }

        ttsCommit;
        return ledgerCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Create the ledger journal table record.
    /// </summary>
    /// <returns>
    ///     The newly created ledger journal table record.
    /// </returns>
    private LedgerJournalTable createLedgerJournalTable()
    {
        LedgerJournalNameId     journalName;
        LedgerJournalTable      ledgerJournalTable;

        retailParameters = RetailParameters::find();

        if (retailParameters.MCRGiftCardVoidJournalName)
        {
            journalName = retailParameters.MCRGiftCardVoidJournalName;
        }

        mcrLedgerJournal = MCRLedgerJournal::construct(LedgerJournalType::Daily, journalName);

        ledgerJournalTable = mcrLedgerJournal.createLedgerJournalTable();

        ttsBegin;
        ledgerJournalTable.selectForUpdate(true);
        ledgerJournalTable.company(retailParameters.GiftCardCompany);
        ledgerJournalTable.update();
        ttsCommit;

        return ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the ledger journal transaction record.
    /// </summary>
    /// <param name="_ledgerJournalTable">
    ///     The ledger journal table record for which to create the ledger journal transaction record.
    /// </param>
    /// <returns>
    ///     The newly created ledger journal transaction record.
    /// </returns>
    private LedgerJournalTrans createLedgerJournalTrans(LedgerJournalTable _ledgerJournalTable)
    {
        ExchRate                exchRate;
        LedgerJournalTrans      ledgerJournalTrans;
        LedgerDimensionDefaultAccount dimension;

        dimension = LedgerJournalName::find(_ledgerJournalTable.JournalName).DefaultDimension;
        mcrLedgerJournal.parmCurrencyCode(retailGiftCardTable.CurrencyCode);
        mcrLedgerJournal.parmDocumentDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        mcrLedgerJournal.parmLedgerAccount(MCRAssistantLedgerDimension::mergeAccountAndDimension(LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(this.accountNumLiability()), dimension));
        mcrLedgerJournal.parmledgerOffsetAccount(MCRAssistantLedgerDimension::mergeAccountAndDimension(LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(this.accountNumOffset()), dimension));
        mcrLedgerJournal.parmLedgerOffsetAccountType(LedgerJournalACType::Ledger);
        mcrLedgerJournal.parmDefaultDimension(salesLine.DefaultDimension);
        exchRate = ExchangeRateHelper::getExchangeRate1_Static(
                   Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                   retailGiftCardTable.CurrencyCode,
                   DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        mcrLedgerJournal.parmExchRate(exchRate);

        // Gift card void should debit the offset account as
        // liability was credited when creating the void
        ledgerJournalTrans = mcrLedgerJournal.createLedgerJournalTrans(0, RetailGiftCardTransactions::calcBalance(retailGiftCardTable));
        ttsBegin;
        ledgerJournalTrans.selectForUpdate(true);
        ledgerJournalTrans.Company(retailParameters.GiftCardCompany);
        ledgerJournalTrans.update();
        ttsCommit;

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the record to the gift card record.
    /// </summary>
    /// <param name="_retailGiftCardTable">
    ///     The gift card record from which to initialize the new record.
    /// </param>
    public void new(RetailGiftCardTable _retailGiftCardTable)
    {
        RetailGiftCardTransactions retailGiftCardTransactionsTable;
        retailGiftCardTable = _retailGiftCardTable;

        if (retailGiftCardTable)
        {
            retailGiftCardTransactionsTable = MCRGiftCard::issuedTransaction(_retailGiftCardTable.EntryId);

            // Gift card created from call center will have the MCRInventTransId field populated.
            if (retailGiftCardTransactionsTable.MCRInventTransId)
            {
                salesLine = SalesLine::findInventTransId(retailGiftCardTransactionsTable.MCRInventTransId);
            }
            else
            {
                RetailTransactionTable rtt;

                // Gift cards created from POS will need to be handled differently as they do not populate the MCRInventTransId field.
                select firstonly1 salesOrderId from rtt where
                    rtt.transactionId == retailGiftCardTransactionsTable.transactionId;

                select firstonly1 salesLine where
                    salesLine.SalesId == rtt.salesOrderId &&
                    salesLine.CustomerRef == _retailGiftCardTable.entryId &&
                    salesLine.ItemId == RetailParameters::find().GiftcardItem;
            }

            inventTable = InventTable::find(salesLine.ItemId);
            mcrSalesLine = salesLine.mcrSalesLine();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>