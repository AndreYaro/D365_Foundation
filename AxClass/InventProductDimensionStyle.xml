<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventProductDimensionStyle</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventProductDimensionStyle</c> class defines the behavior of the style inventory dimension.
/// </summary>
class InventProductDimensionStyle extends InventProductDimension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmDefaultValueForItem</Name>
				<Source><![CDATA[
    public anytype parmDefaultValueForItem(InventTable _inventTable, anytype _value = _inventTable.StandardInventStyleId)
    {
        _inventTable.StandardInventStyleId = _value;
        return _inventTable.StandardInventStyleId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAlternativeValueForItem</Name>
				<Source><![CDATA[
    public anytype parmAlternativeValueForItem(InventTable _inventTable, anytype _value = _inventTable.AltInventStyleId)
    {
        _inventTable.AltInventStyleId = _value;
        return _inventTable.AltInventStyleId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDimensionByNaturalKey</Name>
				<Source><![CDATA[
    public Common findDimensionByNaturalKey(anytype _value)
    {
        return EcoResStyle::findByName(_value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveDimensionNaturalKey</Name>
				<Source><![CDATA[
    public anytype retrieveDimensionNaturalKey(RecId _id)
    {
        return EcoResStyle::find(_id).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveDimensionNaturalKeyByProductId</Name>
				<Source><![CDATA[
    public anytype retrieveDimensionNaturalKeyByProductId(RecId _productRecId)
    {
        EcoResStyle ecoResStyle;
        EcoResProductVariantStyle ecoResProductVariantStyle;

        RefRecId productDimensionAttribute   = EcoResProductDimensionAttribute::inventDimFieldId2DimensionAttributeRecId(this.parmInventDimFieldId());

        select firstonly Name
            from        ecoResStyle
            exists join ecoResProductVariantStyle
                where   ecoResProductVariantStyle.Style                                     == ecoResStyle.RecId
                    &&  ecoResProductVariantStyle.ProductDimensionAttribute                 == productDimensionAttribute
                    &&  ecoResProductVariantStyle.DistinctProductVariant                    == _productRecId;

        return ecoResStyle.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductDimensionValue</Name>
				<Source><![CDATA[
    public void createProductDimensionValue(
        EcoResDistinctProductVariant    _ecoResDistinctProductVariant,
        EcoResProductDimensionAttribute _ecoResProductDimensionAttribute,
        RefRecId                        _dimensionValue)
    {
        EcoResProductVariantStyle ecoResProductVariantStyle;
        ecoResProductVariantStyle.initFromDistinctProductVariant(_ecoResDistinctProductVariant);
        ecoResProductVariantStyle.ProductDimensionAttribute             = _ecoResProductDimensionAttribute.recId;
        ecoResProductVariantStyle.Style                                 = _dimensionValue;

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            EcoResProductMasterStyle ecoResProductMasterStyle;

            select RetailWeight, RetailDisplayOrder from ecoResProductMasterStyle
                        where ecoResProductMasterStyle.Style                == _dimensionValue &&
                              ecoResProductMasterStyle.StyleProductMaster   == _ecoResDistinctProductVariant.ProductMaster;
            ecoResProductVariantStyle.RetailWeight  = ecoResProductMasterStyle.RetailWeight;
            ecoResProductVariantStyle.RetailDisplayOrder = ecoResProductMasterStyle.RetailDisplayOrder;

            EcoResDistinctProductVariant ecoResDistinctProductVariant = EcoResDistinctProductVariant::find(_ecoResDistinctProductVariant.RecId,true);

            if (ecoResDistinctProductVariant)
            {
                ecoResDistinctProductVariant.setCalculatedRetailTotalWeight(ecoResProductVariantStyle.RetailWeight);
                ecoResDistinctProductVariant.doUpdate();
            }
        }

        ecoResProductVariantStyle.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTranslationByProduct</Name>
				<Source><![CDATA[
    public EcoResProductMasterDimValueTranslation findTranslationByProduct(EcoResProductRecId _productMasterRecId, anytype _dimensionValue, SystemLanguageId _languageId)
    {
        return EcoResProductMasterStyle::findTranslationByProduct(_productMasterRecId, _dimensionValue, _languageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetailSupported</Name>
				<Source><![CDATA[
    public boolean isRetailSupported()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the singleton instance of the <c>InventProductDimensionStyle</c> class.
    /// </summary>
    /// <returns>An instance of the <c>InventProductDimensionStyle</c> class.</returns>
    public static InventProductDimensionStyle getInstance()
    {
        return InventDimension::singletonFromInventDimFieldId(fieldNum(InventDim, InventStyleId)) as InventProductDimensionStyle;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>