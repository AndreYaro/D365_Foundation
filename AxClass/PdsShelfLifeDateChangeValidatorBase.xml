<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsShelfLifeDateChangeValidatorBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PdsShelfLifeDateChangeValidatorBase</c> class is the base class for a date validation
/// manager that implements the <c>PdsShelfLifeIDateChangeValidator</c> interface.
/// </summary>
public class PdsShelfLifeDateChangeValidatorBase implements PdsShelfLifeIDateChangeValidator
{
    Common                                  orderLine;
    InventTable                             inventTable;
    PdsShelfLifeIUpdateReservationManager   reservationManager;
    PdsShelfLifeIMovUpdConfirmDialog        confirmationDialogHandler;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructDialogHandler</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs the dialog handler to get and process user responses.
    /// </summary>
    /// <param name="_fieldNumberChanged">
    ///     The ID of the field that is being changed.
    /// </param>
    /// <param name="_isContextServerBound">
    ///     A boolean value indicating whether the context running is bound to the server.
    /// </param>
    /// <returns>
    ///     A constructed instance of an implementing class of the <c>PdsShelfLifeIMovUpdConfirmDialog</c> interface.
    /// </returns>
    protected PdsShelfLifeIMovUpdConfirmDialog constructDialogHandler(FieldId _fieldNumberChanged, boolean _isContextServerBound)
    {
        PdsShelfLifeMovUpdConfirmDialogFactory  confirmationDialogFactory = PdsShelfLifeMovUpdConfirmDialogFactory::construct();
        PdsShelfLifeMovUpdateReservationFactory reservationManagerFactory = PdsShelfLifeMovUpdateReservationFactory::construct();
        return  confirmationDialogFactory.createConfirmDialogFromLineAndField(orderLine, _fieldNumberChanged, _isContextServerBound);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructExecutionHelperClasses</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs the dialog handler and reservation manager to get and process user responses.
    /// </summary>
    /// <param name="_fieldNumberChanged">
    ///     The ID of the field that is being changed.
    /// </param>
    /// <param name="_isContextServerBound">
    ///     A boolean value indicating whether the context running is bound to the server.
    /// </param>
    protected void constructExecutionHelperClasses(FieldId _fieldNumberChanged, boolean _isContextServerBound)
    {
        if (reservationManager == null)
        {
            reservationManager          = this.constructReservationManager();
        }

        if (confirmationDialogHandler == null)
        {
            confirmationDialogHandler   = this.constructDialogHandler(_fieldNumberChanged, _isContextServerBound);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructReservationManager</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs the dialog handler and reservation manager to get and process user responses.
    /// </summary>
    /// <returns>
    ///     A constructed instance of an implementing class of the <c>PdsShelfLifeIUpdateReservationManager</c> interface.
    /// </returns>
    protected PdsShelfLifeIUpdateReservationManager constructReservationManager()
    {
        PdsShelfLifeMovUpdateReservationFactory reservationManagerFactory = PdsShelfLifeMovUpdateReservationFactory::construct();
        return reservationManagerFactory.createReservationManagerFromLine(orderLine, inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleInternalResponseCancel</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Handles the case of an user reply that has the <c>DialogButton::Cancel</c> value.
    /// </summary>
    /// <returns>
    ///     The boolean value of false.
    /// </returns>
    protected boolean handleInternalResponseCancel()
    {
        confirmationDialogHandler.showCancelNotification();
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleInternalResponseNo</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Handles the case of an user reply that has the <c>DialogButton::No</c> value.
    /// </summary>
    /// <returns>
    ///     The boolean value of true.
    /// </returns>
    protected boolean handleInternalResponseNo()
    {
        confirmationDialogHandler.showNoNotification();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleInternalResponseYes</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Handles the case of an user reply that has the <c>DialogButton::Yes</c> value.
    /// </summary>
    /// <returns>
    ///     The boolean value of true.
    /// </returns>
    protected boolean handleInternalResponseYes()
    {
        reservationManager.cancelInventoryReservation();
        confirmationDialogHandler.showYesNotification();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds an instance of the <c>PdsShelfLifeDateChangeValidatorBase</c> class.
    /// </summary>
    /// <param name="_orderLine">
    ///     The record to associate with the current class.
    /// </param>
    /// <param name="_itemId">
    ///     The ID of the item to associate with the current class.
    /// </param>
    protected void new(Common _orderLine, ItemId _itemId)
    {
        orderLine               = _orderLine;
        inventTable             = inventTable::find(_itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reReserveShelfInventory</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Re-Reserves the shelf life inventory in an operation that updated the receipt dates.
    /// </summary>
    public void  reReserveShelfInventory()
    {
        this.validateDateValueChanged(0, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetFieldValueOnCancel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets fields back to their original value on Cancel.
    /// </summary>
    /// <param name="_fieldChanged">
    /// The field ID of the field to reset.
    /// </param>
    protected void resetFieldValueOnCancel(FieldID _fieldChanged)
    {
        Common orig;

        if (_fieldChanged)
        {
            orig = orderLine.orig();
            orderLine.(_fieldChanged) = orig.(_fieldChanged);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDateValueChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the date change operation can be done based on existing shelf life reservation.
    /// </summary>
    /// <param name="_fieldChanged">
    /// The ID of the field being changed.
    /// </param>
    /// <param name="_isContextServerBound">
    /// A Boolean value indicating whether the validation request must be executed only on the server tier;
    /// optional.
    /// </param>
    /// <returns>
    /// true if the validation is successful and the dates can be changed, otherwise, false.
    /// </returns>
    public boolean validateDateValueChanged(FieldID _fieldChanged, boolean _isContextServerBound = false)
    {
        boolean         ret = true;
        DialogButton    userResponse;

        if (!#PdsShelfEnabled || !inventTable.isShelfLifeItem())
        {
            return ret;
        }

        this.constructExecutionHelperClasses(_fieldChanged, _isContextServerBound);
        if (reservationManager.getHasInventoryReservation())
        {
            userResponse = confirmationDialogHandler.showDialog();
            switch (userResponse)
            {
                case DialogButton::Yes:
                    ret = this.handleInternalResponseYes();
                    break;
                case DialogButton::No:
                    ret = this.handleInternalResponseNo();
                    break;
                case DialogButton::Cancel:
                    this.resetFieldValueOnCancel(_fieldChanged);
                    ret = this.handleInternalResponseCancel();
                    break;
                default:
                    //do nothing
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>