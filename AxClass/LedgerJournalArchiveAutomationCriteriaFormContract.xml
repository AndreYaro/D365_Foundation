<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalArchiveAutomationCriteriaFormContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Defines contract for <c>LedgerJournalArchiveAutomationCriteriaForm</c> this is more like a Model that handles logic for data source
/// on the form.
/// </summary>
public final class LedgerJournalArchiveAutomationCriteriaFormContract
{
    private JournalPostedDateTime startDateTime;
    private JournalPostedDateTime endDateTime;
    private DataAreaId journalDataAreaId;
    private const str EmptyString = '';
    private container availableJournalTypes;
    private container selectedJournalTypes;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static LedgerJournalArchiveAutomationCriteriaFormContract construct()
    {
        LedgerJournalArchiveAutomationCriteriaFormContract contract = new LedgerJournalArchiveAutomationCriteriaFormContract();

        // setting defaults
        contract.parmStartDateTime(DateTimeUtil::minValue());
        contract.parmEndDateTime(DateTimeUtil::minValue());
        contract.parmJournalDataAreaId(EmptyString);

        return contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartDateTime</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public JournalPostedDateTime parmStartDateTime(JournalPostedDateTime _startDateTime = startDateTime)
    {
        startDateTime = _startDateTime;
        return startDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndDateTime</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public JournalPostedDateTime parmEndDateTime(JournalPostedDateTime _endDateTime = endDateTime)
    {
        endDateTime = _endDateTime;
        return endDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalDataAreaId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataAreaId parmJournalDataAreaId(DataAreaId _journalDataAreaId = journalDataAreaId)
    {
        journalDataAreaId = _journalDataAreaId;
        return journalDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAvailableJournalTypes</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public container parmAvailableJournalTypes(container _availableJournalTypes = availableJournalTypes)
    {
        availableJournalTypes = _availableJournalTypes;
        return availableJournalTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedJournalTypes</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public container parmSelectedJournalTypes(container _selectedJournalTypes = selectedJournalTypes)
    {
        selectedJournalTypes = _selectedJournalTypes;
        return selectedJournalTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean validate()
    {
        return this.checkParmsValuesAreValid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkParmsValuesAreValid</Name>
				<Source><![CDATA[
    private boolean checkParmsValuesAreValid()
    {
        boolean isValid = true;

        if (isValid && !this.parmStartDateTime())
        {
            isValid = checkFailed("@LedgerJournal:LedgerJournalArchiveCriteriaStartDateTimeValidationMessage");
        }

        if (isValid && !this.parmEndDateTime())
        {
            isValid = checkFailed("@LedgerJournal:LedgerJournalArchiveCriteriaEndDateTimeValidationMessage");
        }

        if (isValid && !this.parmJournalDataAreaId())
        {
            isValid = checkFailed("@LedgerJournal:LedgerJournalArchiveCriteriaDataAreaIdValidationMessage");
        }

        if (isValid && this.parmSelectedJournalTypes() == conNull())
        {
            isValid = checkFailed("@LedgerJournal:LedgerJournalArchiveCriteriaJournalTypeValidationMessage");
        }

        if (isValid && DateTimeUtil::getDifference(this.parmEndDateTime(), this.parmStartDateTime()) <= 0)
        {
            isValid = checkFailed("@LedgerJournal:LedgerJournalArchiveCriteriaStartDateBeforeEndDateValidationMessage");
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>