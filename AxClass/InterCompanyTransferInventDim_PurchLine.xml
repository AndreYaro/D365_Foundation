<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InterCompanyTransferInventDim_PurchLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InterCompanyTransferInventDim_PurchLine</c> class handles the <c>invent</c> dimensions
///    transfer when called from a purchase order line.
/// </summary>
class InterCompanyTransferInventDim_PurchLine extends InterCompanyTransferInventDim
{
    PurchLine   purchLine;
    SalesLine   salesLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(PurchLine  _purchLine)
    {
        super(_purchLine);

        purchLine = _purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Controls the direction of the transfer, depending on whether the transaction is of type
    ///    <c>Issue</c> or <c>Receipt</c>.
    /// </summary>
    public void run()
    {
        boolean     ret;

        super();

        if (purchLine.QtyOrdered > 0
        &&  purchLine.purchTable().isInterCompanyOrder())
        {
            statusIssue = StatusIssue::Deducted;
            changecompany(purchLine.purchTable().InterCompanyCompanyId)
            {
                salesLine = SalesLine::findInventTransId(purchLine.InterCompanyInventTransId);
                interCompanyTransferExternal = salesLine.salesTable().interCompanyEndpointActionPolicy().getOrCreateInterCompanyPolicyTransfer(InterCompanyFieldTransferType::External);
            }

            if (salesLine.isStocked() && purchLine.isStocked())
            {
                using (IntercompanyBatchSerialManualSyncContext context = IntercompanyBatchSerialManualSyncContext::newManualSync())
                {
                    ret = this.transfer(salesLine.DataAreaId,
                                      salesLine.InventTransId,
                                      purchLine.DataAreaId,
                                      purchLine.InventTransId,
                                      interCompanyTransferExternal,
                                      statusIssue,
                                      '',
                                      false,
                                      true);
                }
            }
            if (ret)
            {
                info(this.getSynchronizationSuccessMessage());
            }
            else
            {
                warning(this.getSynchronizationFailedMessage(statusIssue));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>