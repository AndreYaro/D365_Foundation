<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustBalanceList</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustBalanceList extends CustVendBalanceList
{
    CustTmpAccountSum custTmpAccountSum;

    List multiBillingClassification;
    NoYes inclTransWithNoBillingClass;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateDetails</Name>
				<Source><![CDATA[
    void calculateDetails(CustVendTable _custTable)
    {
        Query query = new Query();

        query.addDataSource(tablenum(CustTable)).addRange(fieldNum(CustTable, AccountNum)).value(queryValue(_custTable.AccountNum));

        agingCalculation = this.constructAgingCalculation(new QueryRun(query));

        this.insertIntoTmpAccountSumV2(agingCalculation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDetailsCur</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the balance of a specified customer.
    /// </summary>
    /// <param name="_custTable">
    ///    The customer whose balance is being calculated.
    /// </param>
    public void calculateDetailsCur(CustVendTable _custTable)
    {
        this.calculateDetailsCurAsAlternateCust(_custTable, _custTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseTempTables</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Explicitly releases temp tables used in this class.
    /// </summary>
    /// <remarks>
    ///    Aging calculations create temp tables which are not released in a timely fashion.
    ///    The <c>releaseTempTables</c> method should to be called immediately after an aging calculations is completed and the results consumed.
    /// </remarks>
    public void releaseTempTables()
    {
        custTmpAccountSum.dispose();
        agingPeriodScaleTmp.dispose();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDetailsCurAsAlternateCust</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the aging results and stores them in the class level <c>AccountSumMap</c> table buffer.
    /// </summary>
    /// <param name="_custTable">
    ///    The customer whose balance is being calculated.
    /// </param>
    /// <param name="_custForBalance">
    ///    The customer where the balance is being stored.
    /// </param>
    /// <remarks>
    ///    Passing the same customer for both parameters is the most common usage. This method calculates only
    ///    transaction currency amounts. The aging results can be accessed from the <c>initTmpAccountSum</c> method,
    ///    the <c>parmTmpAccountSum</c> method or the <c>getBalanceByLineNum</c> method.
    /// </remarks>
    public void calculateDetailsCurAsAlternateCust(CustTable _custTable, CustTable _custForBalance)
    {
        var query = new Query();

        query.addDataSource(tablenum(CustTable)).addRange(fieldNum(CustTable, AccountNum)).value(queryValue(_custTable.AccountNum));

        agingCalculation = this.constructAgingCalculation(new QueryRun(query));

        this.insertIntoTmpAccountSumV2(agingCalculation, true, false, true, _custForBalance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDetailsCurSrl</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the aging results and stores them in the class level <c>AccountSumMap</c> table buffer.
    /// </summary>
    /// <param name="_accountNum">
    ///    The account for which aging should be run.
    /// </param>
    /// <returns>
    ///    An <c>AccountSumMap</c> table buffer that stores the aging results.
    /// </returns>
    /// <remarks>
    ///    This method calculates only the transaction currency amounts. The aging results can be accessed from
    ///    the <c>initTmpAccountSum</c> method, the <c>parmTmpAccountSum</c> method or the <c>getBalanceByLineNum</c> method.
    /// </remarks>
    CustTmpAccountSum calculateDetailsCurSrl(CustVendAC _accountNum)
    {
        var query = new Query();

        query.addDataSource(tablenum(CustTable)).addRange(fieldNum(CustTable, AccountNum)).value(queryValue(_accountNum));

        agingCalculation = this.constructAgingCalculation(new QueryRun(query));

        this.insertIntoTmpAccountSumV2(agingCalculation, true, false);

        return tmpAccountSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDetailsForMultiple</Name>
				<Source><![CDATA[
    public void calculateDetailsForMultiple(QueryRun _queryRun, Query _transactionQuery = null, boolean _withAmountCur = true, boolean _withAmountMst = true)
    {
        agingCalculation = this.constructAgingCalculation(_queryRun, _transactionQuery);

        this.insertIntoTmpAccountSumV2(agingCalculation, _withAmountCur, _withAmountMst);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDetailsSrl</Name>
				<Source><![CDATA[
    AccountSumMap calculateDetailsSrl(CustVendAC _accountNum)
    {
        var query = new Query();

        query.addDataSource(tablenum(CustTable)).addRange(fieldNum(CustTable, AccountNum)).value(queryValue(_accountNum));

        agingCalculation = this.constructAgingCalculation(new QueryRun(query));

        this.insertIntoTmpAccountSumV2(agingCalculation);
        return tmpAccountSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructAgingCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an instance of the <c>CustVendAgingCalculation</c> class.
    /// </summary>
    /// <param name="_queryRun">
    /// Select the customers to include in the balance list.
    /// </param>
    /// <param name="_transactionsQuery">
    /// Select the customer transactions to include in the balance list.
    /// </param>
    /// <returns>
    /// An instance of the <c>CustVendAgingCalculation</c> class.
    /// </returns>
    protected CustVendAgingCalculation constructAgingCalculation(QueryRun _queryRun, Query _transactionsQuery = null)
    {
        CustVendAgingCalculation custVendAgingCalculation = this.instantiateAgingCalculation(
                _queryRun,
                _transactionsQuery);

        custVendAgingCalculation.process();

        return custVendAgingCalculation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateAgingCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the <c>CustVendAgingCalculation</c> object.
    /// </summary>
    /// <param name="_queryRun">
    /// Select the customers to include in the balance list.
    /// </param>
    /// <param name="_transactionsQuery">
    /// Select the customer transactions to include in the balance list.
    /// </param>
    /// <returns>
    /// An instance of aging process calculation class.
    /// </returns>
    protected CustVendAgingCalculation instantiateAgingCalculation(QueryRun _queryRun, Query _transactionsQuery)
    {
        return CustVendAgingCalculation::construct(
                SysModule::Cust,
                _queryRun,
                this.getAgedBy(),
                agingPeriodScaleTmp,
                transactionDate,
                agingBucketCount - 1,
                payments,
                printReversed,
                details,
                excludeZeroBalance,
                excludeNegativeBalance,
                multiBillingClassification,
                inclTransWithNoBillingClass,
                _transactionsQuery,
                updateCollectionsStatus,
                agingDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAgedBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the date which will be used to assign aging bucket to transaction.
    /// </summary>
    /// <returns>
    /// Due date, Document date or Transaction date.
    /// </returns>
    protected DateTransactionDuedate getAgedBy()
    {
        return DateTransactionDuedate::DueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTmpAccountSum</Name>
				<Source><![CDATA[
    [SysObsolete('The insertIntoTmpAccountSum method is obsolete. Use the insertIntoTmpAccountSumV2 method instead.', false, 30\6\2020)]
    protected void insertIntoTmpAccountSum(CustVendAgingCalculation _agingCalculation, boolean _withAmountCur = true, boolean _withAmountMST = true, CustVendTable _toCustVendTable = null)
    {
        int withAmountCur = _withAmountCur;
        int withAmountMST = _withAmountMST;
        CustVendTransAging customers = agingCalculation.getCustVendTransAging();
        CustVendTransAging toCustomer;
        CustVendAgingCalculatedTmp agingCalculatedTmp = _agingCalculation.getAgingCalculated();

        if (direction == ForwardBackwardPrinting::Backward || agingBucket == '')
        {
            update_recordSet agingCalculatedTmp
                setting
                    BucketNumber = agingBucketCount - agingCalculatedTmp.BucketNumber
                where agingCalculatedTmp.BucketNumber != 0;
        }

        if (_toCustVendTable.AccountNum)
        {
            // Create a table with one record for the customer account to accumulate to
            toCustomer.AccountNum = _toCustVendTable.AccountNum;
            toCustomer.GroupId = _toCustVendTable.GroupId;
            toCustomer.Name = _toCustVendTable.name();
            toCustomer.insert();

            // Create records to hold the balances in the "to" customer
            insert_recordset custTmpAccountSum (CurrencyCode, BillingClassification, InvoiceId, TransDate, Txt, Voucher, AccountNum, Name, GroupId)
                select CurrencyCode, BillingClassification, InvoiceId, TransDate, Txt, Voucher
                    from agingCalculatedTmp
                    group by CurrencyCode, BillingClassification, TransDate, InvoiceId, Voucher, Txt
                    join AccountNum, Name, GroupId from toCustomer
                        group by AccountNum, Name, GroupId
                    notexists join custTmpAccountSum // Avoid inserting a duplicate
                        where custTmpAccountSum.AccountNum == _toCustVendTable.AccountNum
                                && agingCalculatedTmp.CurrencyCode == custTmpAccountSum.CurrencyCode
                                && agingCalculatedTmp.BillingClassification == custTmpAccountSum.BillingClassification
                                && agingCalculatedTmp.TransDate == custTmpAccountSum.TransDate
                                && agingCalculatedTmp.InvoiceId == custTmpAccountSum.InvoiceId
                                && agingCalculatedTmp.Voucher == custTmpAccountSum.Voucher
                                && agingCalculatedTmp.Txt == custTmpAccountSum.Txt;

#localmacro.updateBalanceTo1 // accumulate from bucket %1 to balance %2 and the total balance (01)
        update_recordSet custTmpAccountSum
            setting
                Balance01 = custTmpAccountSum.Balance01 + agingCalculatedTmp.Amount * withAmountMST,
                Balance%2 = custTmpAccountSum.Balance%2 + agingCalculatedTmp.Amount * withAmountMST,
                Balance01Cur = custTmpAccountSum.Balance01Cur + agingCalculatedTmp.AmountCur * withAmountCur,
                Balance%2Cur = custTmpAccountSum.Balance%2Cur + agingCalculatedTmp.AmountCur * withAmountCur
            join agingCalculatedTmp
                where custTmpAccountSum.AccountNum == _toCustVendTable.AccountNum
                        && agingCalculatedTmp.BucketNumber == %1
                        && agingCalculatedTmp.CurrencyCode == custTmpAccountSum.CurrencyCode
                        && agingCalculatedTmp.BillingClassification == custTmpAccountSum.BillingClassification
                        && agingCalculatedTmp.TransDate == custTmpAccountSum.TransDate
                        && agingCalculatedTmp.InvoiceId == custTmpAccountSum.InvoiceId
                        && agingCalculatedTmp.Voucher == custTmpAccountSum.Voucher
                        && agingCalculatedTmp.Txt == custTmpAccountSum.Txt;
#endmacro

            #updateBalanceTo1(1,02)
            #updateBalanceTo1(2,03)
            #updateBalanceTo1(3,04)
            #updateBalanceTo1(4,05)
            #updateBalanceTo1(5,06)
            #updateBalanceTo1(6,07)
        }
        else
        {
            // Create records to hold the balances
            insert_recordset custTmpAccountSum (AccountNum, CurrencyCode, BillingClassification, InvoiceId, TransDate, Txt, Voucher, Name, GroupId)
                select AccountNum, CurrencyCode, BillingClassification, InvoiceId, TransDate, Txt, Voucher
                    from agingCalculatedTmp
                    group by AccountNum, CurrencyCode, BillingClassification, TransDate, InvoiceId, Voucher, Txt
                    join Name, GroupId from customers
                        group by Name, GroupId
                        where agingCalculatedTmp.AccountNum == customers.AccountNum
                    notexists join custTmpAccountSum // Avoid inserting a duplicate
                        where custTmpAccountSum.AccountNum == agingCalculatedTmp.AccountNum
                                && agingCalculatedTmp.CurrencyCode == custTmpAccountSum.CurrencyCode
                                && agingCalculatedTmp.BillingClassification == custTmpAccountSum.BillingClassification
                                && agingCalculatedTmp.TransDate == custTmpAccountSum.TransDate
                                && agingCalculatedTmp.InvoiceId == custTmpAccountSum.InvoiceId
                                && agingCalculatedTmp.Voucher == custTmpAccountSum.Voucher
                                && agingCalculatedTmp.Txt == custTmpAccountSum.Txt;

#localmacro.updateBalance // accumulate from bucket %1 to balance %2 and the total balance (01)
        update_recordSet custTmpAccountSum
            setting
                Balance01 = custTmpAccountSum.Balance01 + agingCalculatedTmp.Amount * withAmountMST,
                Balance%2 = custTmpAccountSum.Balance%2 + agingCalculatedTmp.Amount * withAmountMST,
                Balance01Cur = custTmpAccountSum.Balance01Cur + agingCalculatedTmp.AmountCur * withAmountCur,
                Balance%2Cur = custTmpAccountSum.Balance%2Cur + agingCalculatedTmp.AmountCur * withAmountCur
            join agingCalculatedTmp
                where custTmpAccountSum.AccountNum == agingCalculatedTmp.AccountNum
                        && agingCalculatedTmp.BucketNumber == %1
                        && agingCalculatedTmp.CurrencyCode == custTmpAccountSum.CurrencyCode
                        && agingCalculatedTmp.BillingClassification == custTmpAccountSum.BillingClassification
                        && agingCalculatedTmp.TransDate == custTmpAccountSum.TransDate
                        && agingCalculatedTmp.InvoiceId == custTmpAccountSum.InvoiceId
                        && agingCalculatedTmp.Voucher == custTmpAccountSum.Voucher
                        && agingCalculatedTmp.Txt == custTmpAccountSum.Txt;
#endmacro

            #updateBalance(1,02)
            #updateBalance(2,03)
            #updateBalance(3,04)
            #updateBalance(4,05)
            #updateBalance(5,06)
            #updateBalance(6,07)
        }

        tmpAccountSum = custTmpAccountSum;

        _agingCalculation.releaseTempTables();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(
            PositiveDays _interval,
            TransDate _transactionDate,
            TransDate _zeroDate,
            NoYes _payments,
            DayMonth _period,
            ForwardBackwardPrinting _direction,
            CustVendReportName _agingBucket,
            NoYes _printReversed,
            NoYes _details,
            List _multiBillingClassification = null,
            NoYes _inclTransWithNoBillingClass = NoYes::No,
            NoYes _excludeZeroBalance = NoYes::No,
            NoYes _excludeNegativeBalance = NoYes::No,
            boolean _updateCollectionsStatus = true)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            multiBillingClassification = _multiBillingClassification;
            inclTransWithNoBillingClass = _inclTransWithNoBillingClass;
        }

        super(_interval, _transactionDate, _zeroDate, _payments, _period, _direction, _agingBucket,
                _printReversed, _details, _excludeZeroBalance, _excludeNegativeBalance, _updateCollectionsStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpAccountSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sums the amounts in the balance fields and populates the corresponding fields in the passed in map.
    /// </summary>
    /// <param name = "_tmpAccountSum">The map to populate.</param>
    /// <param name = "_returnAmountMST">true if the AmountMST fields are used; otherwise, the AmountCur field are used.</param>
    /// <returns>The map with populated fields.</returns>
    public AccountSumMap parmTmpAccountSum(AccountSumMap _tmpAccountSum, boolean _returnAmountMST = true)
    {
        QueryRun qr = new QueryRun(this.buildParmTmpAccountSumQuery());
        qr.setCursor(custTmpAccountSum);

        qr.next();

        custTmpAccountSum = qr.get(tableNum(CustTmpAccountSum));

        this.setAccountSumMapBalanceFields(_tmpAccountSum, _returnAmountMST);
        this.setAccountSumMapReportingCurrencyBalanceFields(_tmpAccountSum);

        return _tmpAccountSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccountSumMapBalanceFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the balance fields on the <c>AccountSumMap</c> from <c>CustTmpAccountSum</c> table buffer.
    /// </summary>
    /// <param name = "_tmpAccountSum">The account sum map.</param>
    /// <param name = "_returnAmountMST">Flag to set the balance fields to MST value.</param>
    protected void setAccountSumMapBalanceFields(AccountSumMap _tmpAccountSum, boolean _returnAmountMST)
    {
        _tmpAccountSum.Balance01 = _returnAmountMST ? custTmpAccountSum.Balance01 : custTmpAccountSum.Balance01Cur;
        _tmpAccountSum.Balance02 = _returnAmountMST ? custTmpAccountSum.Balance02 : custTmpAccountSum.Balance02Cur;
        _tmpAccountSum.Balance03 = _returnAmountMST ? custTmpAccountSum.Balance03 : custTmpAccountSum.Balance03Cur;
        _tmpAccountSum.Balance04 = _returnAmountMST ? custTmpAccountSum.Balance04 : custTmpAccountSum.Balance04Cur;
        _tmpAccountSum.Balance05 = _returnAmountMST ? custTmpAccountSum.Balance05 : custTmpAccountSum.Balance05Cur;
        _tmpAccountSum.Balance06 = _returnAmountMST ? custTmpAccountSum.Balance06 : custTmpAccountSum.Balance06Cur;
        _tmpAccountSum.Balance07 = _returnAmountMST ? custTmpAccountSum.Balance07 : custTmpAccountSum.Balance07Cur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccountSumMapReportingCurrencyBalanceFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the reporting currency balance fields on the <c>AccountSumMap</c> from <c>CustTmpAccountSum</c> table buffer.
    /// </summary>
    /// <param name = "_tmpAccountSum">The account sum map.</param>
    protected void setAccountSumMapReportingCurrencyBalanceFields(AccountSumMap _tmpAccountSum)
    {
        _tmpAccountSum.Balance01ReportingCurrency = custTmpAccountSum.Balance01ReportingCurrency;
        _tmpAccountSum.Balance02ReportingCurrency = custTmpAccountSum.Balance02ReportingCurrency;
        _tmpAccountSum.Balance03ReportingCurrency = custTmpAccountSum.Balance03ReportingCurrency;
        _tmpAccountSum.Balance04ReportingCurrency = custTmpAccountSum.Balance04ReportingCurrency;
        _tmpAccountSum.Balance05ReportingCurrency = custTmpAccountSum.Balance05ReportingCurrency;
        _tmpAccountSum.Balance06ReportingCurrency = custTmpAccountSum.Balance06ReportingCurrency;
        _tmpAccountSum.Balance07ReportingCurrency = custTmpAccountSum.Balance07ReportingCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildParmTmpAccountSumQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query used to summarize the <c>CustTmpAccountSum</c> table.
    /// </summary>
    /// <returns>The summarizing query.</returns>
    protected Query buildParmTmpAccountSumQuery()
    {
        Query tmpAccountSumQuery = new Query();

        QueryBuildDataSource qbdsCustTmpAccountSum = tmpAccountSumQuery.addDataSource(tableNum(CustTmpAccountSum));
        
        qbdsCustTmpAccountSum.addGroupByField(fieldNum(CustTmpAccountSum, AccountNum));
        qbdsCustTmpAccountSum.addGroupByField(fieldNum(CustTmpAccountSum, CurrencyCode));

        qbdsCustTmpAccountSum.addSelectionField(fieldNum(CustTmpAccountSum, Balance01), SelectionField::Sum);
        qbdsCustTmpAccountSum.addSelectionField(fieldNum(CustTmpAccountSum, Balance01Cur), SelectionField::Sum);
        qbdsCustTmpAccountSum.addSelectionField(fieldNum(CustTmpAccountSum, Balance01ReportingCurrency), SelectionField::Sum);

        qbdsCustTmpAccountSum.addSelectionField(fieldNum(CustTmpAccountSum, Balance02), SelectionField::Sum);
        qbdsCustTmpAccountSum.addSelectionField(fieldNum(CustTmpAccountSum, Balance02Cur), SelectionField::Sum);
        qbdsCustTmpAccountSum.addSelectionField(fieldNum(CustTmpAccountSum, Balance02ReportingCurrency), SelectionField::Sum);

        qbdsCustTmpAccountSum.addSelectionField(fieldNum(CustTmpAccountSum, Balance03), SelectionField::Sum);
        qbdsCustTmpAccountSum.addSelectionField(fieldNum(CustTmpAccountSum, Balance03Cur), SelectionField::Sum);
        qbdsCustTmpAccountSum.addSelectionField(fieldNum(CustTmpAccountSum, Balance03ReportingCurrency), SelectionField::Sum);

        qbdsCustTmpAccountSum.addSelectionField(fieldNum(CustTmpAccountSum, Balance04), SelectionField::Sum);
        qbdsCustTmpAccountSum.addSelectionField(fieldNum(CustTmpAccountSum, Balance04Cur), SelectionField::Sum);
        qbdsCustTmpAccountSum.addSelectionField(fieldNum(CustTmpAccountSum, Balance04ReportingCurrency), SelectionField::Sum);

        qbdsCustTmpAccountSum.addSelectionField(fieldNum(CustTmpAccountSum, Balance05), SelectionField::Sum);
        qbdsCustTmpAccountSum.addSelectionField(fieldNum(CustTmpAccountSum, Balance05Cur), SelectionField::Sum);
        qbdsCustTmpAccountSum.addSelectionField(fieldNum(CustTmpAccountSum, Balance05ReportingCurrency), SelectionField::Sum);

        qbdsCustTmpAccountSum.addSelectionField(fieldNum(CustTmpAccountSum, Balance06), SelectionField::Sum);
        qbdsCustTmpAccountSum.addSelectionField(fieldNum(CustTmpAccountSum, Balance06Cur), SelectionField::Sum);
        qbdsCustTmpAccountSum.addSelectionField(fieldNum(CustTmpAccountSum, Balance06ReportingCurrency), SelectionField::Sum);

        qbdsCustTmpAccountSum.addSelectionField(fieldNum(CustTmpAccountSum, Balance07), SelectionField::Sum);
        qbdsCustTmpAccountSum.addSelectionField(fieldNum(CustTmpAccountSum, Balance07Cur), SelectionField::Sum);
        qbdsCustTmpAccountSum.addSelectionField(fieldNum(CustTmpAccountSum, Balance07ReportingCurrency), SelectionField::Sum);

        return tmpAccountSumQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetTmpAccountSum</Name>
				<Source><![CDATA[
    public void resetTmpAccountSum()
    {
        custTmpAccountSum = null;
        tmpAccountSum = custTmpAccountSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTmpAccountSumV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Translates output from the <c>CustVendAgingCalculatedTmp</c> table to the <c>CustTmpAccountSum</c> table.
    /// </summary>
    /// <param name="_agingCalculation">
    /// An instance of the <c>CustVendAgingCalculation</c> class.
    /// </param>
    /// <param name="_withAmountCur">
    /// Translate amounts in transaction currency?
    /// </param>
    /// <param name="_withAmountMST">
    /// Translate amounts in accounting currency?
    /// </param>
    /// <param name="_withAmountMSTSecondary">
    /// Translate amounts in reporting currency?
    /// </param>
    /// <param name="_toCustVendTable">
    /// A <c>CustVendTable</c> table buffer for the customer or vendor to associate the aging with.
    /// </param>
    /// <remarks>
    /// If _toCustVendTable is missing the results are recorded under the original customer. The _toCustVendTable is used for
    /// cross-company calculations where the aging for multiple customers in different companies are accumulated to one
    /// customer. When used for cross-company aging, only one customer can be aged at a time.
    /// </remarks>
    protected void insertIntoTmpAccountSumV2(CustVendAgingCalculation _agingCalculation, boolean _withAmountCur = true, boolean _withAmountMST = true, boolean _withAmountMSTSecondary = true, CustVendTable _toCustVendTable = null)
    {
        CustVendAgingCalculatedTmp agingCalculatedTmp = _agingCalculation.getAgingCalculated();

        MapEnumerator bucketMapEnumerator = this.buildBucketToBalanceFieldsMap().getBucketMapEnumerator();

        Query updateBalanceQuery = this.buildUpdateCustTmpAccountSumBalanceFieldsForBucketQuery(_toCustVendTable.AccountNum, agingCalculatedTmp);

        QueryBuildRange bucketRange = SysQuery::findOrCreateRange(updateBalanceQuery.dataSourceTable(tableNum(CustVendAgingCalculatedTmp)), fieldNum(CustVendAgingCalculatedTmp, BucketNumber));

        if (direction == ForwardBackwardPrinting::Backward || agingBucket == '')
        {
            update_recordSet agingCalculatedTmp
                setting
                    BucketNumber = agingBucketCount - agingCalculatedTmp.BucketNumber
                where agingCalculatedTmp.BucketNumber != 0;
        }

        if (_toCustVendTable.AccountNum != '')
        {
            // Create a table with one record for the customer account to accumulate to
            CustVendTransAging toCustomer;
            toCustomer.AccountNum = _toCustVendTable.AccountNum;
            toCustomer.GroupId = _toCustVendTable.GroupId;
            toCustomer.Name = _toCustVendTable.name();
            toCustomer.insert();

            // Create records to hold the balances in the "to" customer
            CustBalanceListParameters custBalanceListParameters = CustBalanceListParameters::construct();
            custBalanceListParameters.custVendAgingCalculatedTmp = agingCalculatedTmp;
            custBalanceListParameters.custTmpAccountSum = custTmpAccountSum;
            custBalanceListParameters.custVendTransAging = toCustomer;

            CustTmpAccountSumFromCustBalanceList custTmpAccountSumFromCustBalanceList = CustTmpAccountSumFromCustBalanceList::newFromCustBalanceList(custBalanceListParameters);
            custTmpAccountSumFromCustBalanceList.execute();

            while (bucketMapEnumerator.moveNext())
            {
                bucketRange.value(queryValue(bucketMapEnumerator.currentKey()));

                this.updateCustTmpAccountSumBalanceFieldsForBucket(updateBalanceQuery,
                    bucketMapEnumerator.currentValue() as CustVendBalanceListBalanceFieldsParameters,
                    _withAmountMST,
                    _withAmountCur,
                    _withAmountMSTSecondary);
            }
        }
        else
        {
            CustTmpAccountSumBuilder::insertCustAccountsFromCustVendAgingCalculation(custTmpAccountSum, agingCalculatedTmp, agingCalculation.getCustVendTransAging());
            CustTmpAccountSumBuilder tmpAccountBuilder = CustTmpAccountSumBuilder::construct();

            while (bucketMapEnumerator.moveNext())
            {                
                SysDaUpdateObject updateObject = tmpAccountBuilder.buildCustTmpAccountSumQueryForAging(
                    custTmpAccountSum,
                    '',
                    agingCalculatedTmp,
                    bucketMapEnumerator.currentValue() as CustVendBalanceListBalanceFieldsParameters,
                    bucketMapEnumerator.currentKey(),
                    _withAmountCur,
                    _withAmountMST,
                    _withAmountMSTSecondary);

                ttsbegin;
                new SysDaUpdateStatement().update(updateObject);
                ttscommit;
            }
        }
        tmpAccountSum = custTmpAccountSum;

        _agingCalculation.releaseTempTables();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildBucketToBalanceFieldsMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the contract that maps aging buckets to their corresponding fields in the <c>CustTmpAccountSum</c> table buffer.
    /// </summary>
    /// <returns>The <c>CustVendBalanceListBucketToBalanceFieldReturn</c> instance with the map of bucket to fields.</returns>
    [Wrappable]
    protected final CustVendBalanceListBucketToBalanceFieldReturn buildBucketToBalanceFieldsMap()
    {
        CustVendBalanceListBucketToBalanceFieldReturn bucketsToFields = CustVendBalanceListBucketToBalanceFieldReturn::construct();

        bucketsToFields.addBucket(1,
            this.constructCustVendBalanceListBalanceFieldsParameters(fieldNum(CustTmpAccountSum, Balance02),
                fieldNum(CustTmpAccountSum, Balance02Cur),
                fieldNum(CustTmpAccountSum, Balance02ReportingCurrency)));

        bucketsToFields.addBucket(2,
            this.constructCustVendBalanceListBalanceFieldsParameters(fieldNum(CustTmpAccountSum, Balance03),
                fieldNum(CustTmpAccountSum, Balance03Cur),
                fieldNum(CustTmpAccountSum, Balance03ReportingCurrency)));
        
        bucketsToFields.addBucket(3,
            this.constructCustVendBalanceListBalanceFieldsParameters(fieldNum(CustTmpAccountSum, Balance04),
                fieldNum(CustTmpAccountSum, Balance04Cur),
                fieldNum(CustTmpAccountSum, Balance04ReportingCurrency)));

        bucketsToFields.addBucket(4,
            this.constructCustVendBalanceListBalanceFieldsParameters(fieldNum(CustTmpAccountSum, Balance05),
                fieldNum(CustTmpAccountSum, Balance05Cur),
                fieldNum(CustTmpAccountSum, Balance05ReportingCurrency)));

        bucketsToFields.addBucket(5,
            this.constructCustVendBalanceListBalanceFieldsParameters(fieldNum(CustTmpAccountSum, Balance06),
                fieldNum(CustTmpAccountSum, Balance06Cur),
                fieldNum(CustTmpAccountSum, Balance06ReportingCurrency)));

        bucketsToFields.addBucket(6,
            this.constructCustVendBalanceListBalanceFieldsParameters(fieldNum(CustTmpAccountSum, Balance07),
                fieldNum(CustTmpAccountSum, Balance07Cur),
                fieldNum(CustTmpAccountSum, Balance07ReportingCurrency)));

        return bucketsToFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructCustVendBalanceListBalanceFieldsParameters</Name>
				<Source><![CDATA[
    private CustVendBalanceListBalanceFieldsParameters constructCustVendBalanceListBalanceFieldsParameters(FieldId _balanceAmountMSTField, FieldId _balanceAmountCurField, FieldId _balanceReportingAmountField)
    {
        CustVendBalanceListBalanceFieldsParameters param = CustVendBalanceListBalanceFieldsParameters::construct();
        param.balanceMSTField = _balanceAmountMSTField;
        param.balanceCurField = _balanceAmountCurField;
        param.balanceReportingCurrencyField = _balanceReportingAmountField;

        return param;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildUpdateCustTmpAccountSumBalanceFieldsForBucketQuery</Name>
				<Source><![CDATA[
    private Query buildUpdateCustTmpAccountSumBalanceFieldsForBucketQuery(AccountNum _account, CustVendAgingCalculatedTmp _agingCalculatedTmp)
    {
        boolean isLimitedToAccount = (_account != '');

        Query q = new Query();

        QueryBuildDataSource qbdsCustTmpAccountSum = q.addDataSource(tableNum(CustTmpAccountSum));
        
        if (isLimitedToAccount)
        {
            qbdsCustTmpAccountSum.addRange(fieldNum(CustTmpAccountSum, AccountNum)).value(queryValue(_account));
        }

        qbdsCustTmpAccountSum.cursor(custTmpAccountSum);

        QueryBuildDataSource qbdsAgingCalculatedTmp = qbdsCustTmpAccountSum.addDataSource(tableNum(CustVendAgingCalculatedTmp));
        qbdsAgingCalculatedTmp.addLink(fieldNum(CustTmpAccountSum, CurrencyCode), fieldNum(CustVendAgingCalculatedTmp, CurrencyCode));
        qbdsAgingCalculatedTmp.addLink(fieldNum(CustTmpAccountSum, BillingClassification), fieldNum(CustVendAgingCalculatedTmp, BillingClassification));
        qbdsAgingCalculatedTmp.addLink(fieldNum(CustTmpAccountSum, TransDate), fieldNum(CustVendAgingCalculatedTmp, TransDate));
        qbdsAgingCalculatedTmp.addLink(fieldNum(CustTmpAccountSum, InvoiceId), fieldNum(CustVendAgingCalculatedTmp, InvoiceId));
        qbdsAgingCalculatedTmp.addLink(fieldNum(CustTmpAccountSum, Voucher), fieldNum(CustVendAgingCalculatedTmp, Voucher));
        qbdsAgingCalculatedTmp.addLink(fieldNum(CustTmpAccountSum, Txt), fieldNum(CustVendAgingCalculatedTmp, Txt));

        if (!isLimitedToAccount)
        {
            qbdsAgingCalculatedTmp.addLink(fieldNum(CustTmpAccountSum, AccountNum), fieldNum(CustVendAgingCalculatedTmp, AccountNum));
        }

        qbdsAgingCalculatedTmp.joinMode(JoinMode::InnerJoin);

        qbdsAgingCalculatedTmp.cursor(_agingCalculatedTmp);

        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustTmpAccountSumBalanceFieldsForBucket</Name>
				<Source><![CDATA[
    private void updateCustTmpAccountSumBalanceFieldsForBucket(Query _q,
        CustVendBalanceListBalanceFieldsParameters _balanceFields,
        boolean _shouldIncludeAmountMst,
        boolean _shouldIncludeAmountCur, 
        boolean _shouldIncludeAmountMSTSecondary)
    {
        Map balanceFieldSetMap = this.buildBalanceUpdateFieldMap(
            _q.dataSourceTable(tableNum(CustTmpAccountSum)).name(),
            _q.dataSourceTable(tableNum(CustVendAgingCalculatedTmp)).name(),
            _balanceFields,
            _shouldIncludeAmountMst,
            _shouldIncludeAmountCur,
            _shouldIncludeAmountMSTSecondary);

        Query::update_recordset(balanceFieldSetMap, _q, true, true, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildBalanceUpdateFieldMap</Name>
				<Source><![CDATA[
    private Map buildBalanceUpdateFieldMap(str _custTmpAccountSumQbdsName,
        str _agingCalculatedTmpQbdsName,
        CustVendBalanceListBalanceFieldsParameters _balanceFields,
        boolean _shouldIncludeAmountMst,
        boolean _shouldIncludeAmountCur,
        boolean _shouldIncludeAmountMSTSecondary)
    {
        Map fieldSetMap = new Map(Types::String, Types::String);

        if (_shouldIncludeAmountMst)
        {
            FieldId balance01FieldId = fieldNum(CustTmpAccountSum, Balance01);
            FieldId amountFieldId = fieldNum(CustVendAgingCalculatedTmp, Amount);
            FieldId balanceMSTFieldId = _balanceFields.balanceMSTField;

            fieldSetMap.insert(fieldId2Name(tableNum(CustTmpAccountSum), balance01FieldId),
                this.buildUpdateCalculationStrForBalances(_custTmpAccountSumQbdsName, balance01FieldId, _agingCalculatedTmpQbdsName, amountFieldId));

            fieldSetMap.insert(fieldId2Name(tableNum(CustTmpAccountSum), balanceMSTFieldId),
                this.buildUpdateCalculationStrForBalances(_custTmpAccountSumQbdsName, balanceMSTFieldId, _agingCalculatedTmpQbdsName, amountFieldId));
        }

        if (_shouldIncludeAmountCur)
        {
            FieldId balance01FieldId = fieldNum(CustTmpAccountSum, Balance01Cur);
            FieldId amountFieldId = fieldNum(CustVendAgingCalculatedTmp, AmountCur);
            FieldId balanceCurFieldId = _balanceFields.balanceCurField;

            fieldSetMap.insert(fieldId2Name(tableNum(CustTmpAccountSum), balance01FieldId),
                this.buildUpdateCalculationStrForBalances(_custTmpAccountSumQbdsName, balance01FieldId, _agingCalculatedTmpQbdsName, amountFieldId));

            fieldSetMap.insert(fieldId2Name(tableNum(CustTmpAccountSum), balanceCurFieldId),
                this.buildUpdateCalculationStrForBalances(_custTmpAccountSumQbdsName, balanceCurFieldId, _agingCalculatedTmpQbdsName, amountFieldId));
        }

        if (_shouldIncludeAmountMSTSecondary)
        {
            FieldId balance01FieldId = fieldNum(CustTmpAccountSum, Balance01ReportingCurrency);
            FieldId amountFieldId = fieldNum(CustVendAgingCalculatedTmp, AmountReporting);
            FieldId balanceReportingFieldId = _balanceFields.balanceReportingCurrencyField;

            fieldSetMap.insert(fieldId2Name(tableNum(CustTmpAccountSum), balance01FieldId),
                this.buildUpdateCalculationStrForBalances(_custTmpAccountSumQbdsName, balance01FieldId, _agingCalculatedTmpQbdsName, amountFieldId));

            fieldSetMap.insert(fieldId2Name(tableNum(CustTmpAccountSum), balanceReportingFieldId),
                this.buildUpdateCalculationStrForBalances(_custTmpAccountSumQbdsName, balanceReportingFieldId, _agingCalculatedTmpQbdsName, amountFieldId));
        }

        return fieldSetMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildUpdateCalculationStrForBalances</Name>
				<Source><![CDATA[
    private str buildUpdateCalculationStrForBalances(str _custTmpAccountSumQbdsName, FieldId _custTmpAccountSumField, str _agingCalculatedTmpQbdsName, FieldId _agingCalculatedTmpField)
    {
        return strFmt('%1.%3 + %2.%4',
            _custTmpAccountSumQbdsName,
            _agingCalculatedTmpQbdsName,
            fieldId2Name(tableNum(CustTmpAccountSum), _custTmpAccountSumField),
            fieldId2Name(tableNum(CustVendAgingCalculatedTmp), _agingCalculatedTmpField));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>