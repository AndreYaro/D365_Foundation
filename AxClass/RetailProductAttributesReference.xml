<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailProductAttributesReference</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Gets and compares the value for the <c>RetailAttributesGlobalLookup</c> and <c>RetailAttributesLegalEntityLookup</c> table.
/// </summary>
public class RetailProductAttributesReference implements SysPackable
{
    RefRecId categoryId;
    // when unpacking not all the fileds of the record will be set (category, legalentity)
    // the reason is that they are the primary key of the record.
    RetailAttributesGlobalLookup originalRetailAttributesGlobal;
    Map originalRetailAttributesLegalEntity;

    // this is the serialized version of the map above.
    container packedAttributesByLegalEntity;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        categoryId,
        originalRetailAttributesGlobal,
        packedAttributesByLegalEntity
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getOriginalRetailAttributesGlobal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the instance of table <c>RetailAttributesGlobalLookup</c>.
    /// </summary>
    /// <returns>
    /// An instance of table <c>RetailAttributesGlobalLookup</c>.
    /// </returns>
    public RetailAttributesGlobalLookup getOriginalRetailAttributesGlobal()
    {
        return originalRetailAttributesGlobal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalRetailAttributesLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the instance of table <c>RetailAttributesLegalEntityLookup</c>.
    /// </summary>
    /// <param name="_legalEntity">
    /// The given value of the legal entity.
    /// </param>
    /// <returns>
    /// An instance of table <c>RetailAttributesLegalEntityLookup</c> if the legal entity exists otherwise null.
    /// </returns>
    public RetailAttributesLegalEntityLookup getOriginalRetailAttributesLegalEntity(LegalEntity _legalEntity)
    {
        if (originalRetailAttributesLegalEntity.exists(_legalEntity))
        {
            return originalRetailAttributesLegalEntity.lookup(_legalEntity);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEqualTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the values in the original record and the current record are equal.
    /// </summary>
    /// <param name="otherObject">
    /// The instance of class <c>RetailProductAttributesReference</c>.
    /// </param>
    /// <returns>
    /// Boolean value true if the records are equal;otherwise false.
    /// </returns>
    boolean isEqualTo(RetailProductAttributesReference otherObject)
    {
        RetailAttributesGlobalLookup otherObjectGlobalAttributes;
        RetailAttributesLegalEntityLookup myLegalEntityAttributes;
        RetailAttributesLegalEntityLookup otherObjectLegalEntityAttributes;
        CompanyInfo legalEntity;

        if (!otherObject)
        {
            return false;
        }

        if (categoryId != otherObject.parmCategoryId())
        {
            return false;
        }

        otherObjectGlobalAttributes = otherObject.getOriginalRetailAttributesGlobal();

        if (((!originalRetailAttributesGlobal) ||
             (!otherObjectGlobalAttributes)) &&
             (originalRetailAttributesGlobal.RecId != otherObjectGlobalAttributes.RecId))
        {
            return false;
        }

        while select RecId from legalEntity
        {
            myLegalEntityAttributes = this.getOriginalRetailAttributesLegalEntity(legalEntity.RecId);
            otherObjectLegalEntityAttributes   = otherObject.getOriginalRetailAttributesLegalEntity(legalEntity.RecId);
            if (((!myLegalEntityAttributes) ||
                (!otherObjectLegalEntityAttributes)) &&
                (myLegalEntityAttributes.RecId != otherObjectLegalEntityAttributes.RecId))
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        private void new()
    {
        originalRetailAttributesLegalEntity = new Map(Types::Int64, Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        container pack()
    {
        packedAttributesByLegalEntity = originalRetailAttributesLegalEntity.pack();

        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCategoryId</Name>
				<Source><![CDATA[
        public RefRecId parmCategoryId()
    {
        return categoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOriginalValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for original record.
    /// </summary>
    /// <param name="_categoryId">
    /// The given value for category.
    /// </param>
    /// <remarks>
    /// Assigns the value for <c>RetailAttributesGlobalLookup</c> and <c>RetailAttributesLegalEntityLookup</c> tables.
    /// </remarks>
    public void setOriginalValues(RefRecId _categoryId)
    {
        RetailAttributesLegalEntityLookup attributesByLegalEntity;
        CompanyInfo legalEntity;

        categoryId = _categoryId;

        originalRetailAttributesGlobal = RetailAttributesGlobalLookup::findByCategory(_categoryId, false);

        while select RecId from legalEntity
        {
            attributesByLegalEntity = RetailAttributesLegalEntityLookup::findByCategory(_categoryId, legalEntity.RecId);

            if (attributesByLegalEntity)
            {
               originalRetailAttributesLegalEntity.insert(legalEntity.RecId, attributesByLegalEntity);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container _packedClass)
    {
        int version = conPeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                originalRetailAttributesLegalEntity = Map::create(packedAttributesByLegalEntity);
                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static RetailProductAttributesReference construct()
    {
        return new RetailProductAttributesReference();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an object of the class on Server and loads original category attribute values for a specific category.
    /// </summary>
    /// <param name="_categoryId">
    /// The category for which to load attribute values.
    /// </param>
    /// <returns>
    /// Packed object with loaded values.
    /// </returns>
    public static container constructOnServer(RefRecId _categoryId)
    {
        RetailProductAttributesReference retailProductAttributesReference = RetailProductAttributesReference::construct();
        retailProductAttributesReference.setOriginalValues(_categoryId);
        return retailProductAttributesReference.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// This creates an instance of a class from a container representing a previously packed object.
    /// </summary>
    /// <param name="_packedObject">
    /// A previously packed object
    /// </param>
    /// <returns>
    /// an instance of the class.
    /// </returns>
    /// <remarks>
    /// The unpacked object will miss the category id and legal entity on the deserialized records.
    /// Make sure that you dont count on those values.
    /// </remarks>
    public static RetailProductAttributesReference create(container _packedObject)
    {
        RetailProductAttributesReference instance = RetailProductAttributesReference::construct();
        instance.unpack(_packedObject);
        return instance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>