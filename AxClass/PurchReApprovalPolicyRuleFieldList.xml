<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReApprovalPolicyRuleFieldList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchReApprovalPolicyRuleFieldList</c> class is used to construct a UI presenting a list of
/// available and selected fields that should be included in the purchase order re-approval policy.Two
/// different views will be available, one for a flat list and one that displays a tree structure based
/// on fast tabs.
/// </summary>
class PurchReApprovalPolicyRuleFieldList extends SysListPanelSet
{
    #resAppl
    #PurchReApprovalPolicyRule

    Map                                 table2Field;
    Map                                 field2FastTab;
    Map                                 field2Data;
    Map                                 tableHierarchy;
    Map                                 fastTabControlMap;
    Map                                 fastTabOrderMap;
    Map                                 fastTabRoot2FormDataSourceId;
    Map                                 fieldIncludedInCompare;
    Map                                 replaceFieldLabel;

    Map                                 tableAvailableParent2Idx, tableSelectedParent2Idx;
    Map                                 fastTabAvailable2treeIdx, fastTabSelected2treeIdx;
    PurchreApprovalPolicyRuleViewType   viewType;

    Form                                detailsForm;
    FormBuildTreeControl                treeBuildAvailable, treeBuildSelected;
    FormBuildStatictextControl          detailsBuildText;

    FormTreeControl                     treeSelected, treeAvailable;
    FormStaticTextControl               detailsText;

    int                                 detailsControlId;

    Set                                 tableResources;

    PurchReApprovalPolicyRuleImageList  purchReApprovalPolicyRuleImageList;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    /// Iterates the selected tree items in the available field list and adds them to the selected fields
    /// list.
    /// </summary>
    /// <param name="_formListNext">
    /// An enumerator that specifies the location of the next item in the form list.
    /// </param>
    public void add(FormListNext _formListNext = FormListNext::Selected)
    {
        int                 idx = treeAvailable.getFirstSelected();
        int                 insertedAtIdx;
        List                idxList = new List(Types::Integer);
        ListEnumerator      idxListEnumerator;

        if (!this.parmOnlyViewAccess())
        {
            if (viewType == PurchreApprovalPolicyRuleViewType::List)
            {
                super(_formListNext);
            }
            else
            {
                treeAvailable.lockWindowUpdate(true);
                treeSelected.lockWindowUpdate(true);

                if (_formListNext == FormListNext::Selected)
                {
                    // Get selected tree items - GetNextSelected can not be used when we remove the current selected tree item
                    idx = treeAvailable.getFirstSelected();
                    while (idx != 0)
                    {
                        idxList.addEnd(idx);
                        idx = treeAvailable.getNextSelected(idx);
                    }
                }
                else
                {
                    idx = treeAvailable.getRoot();
                    while (idx != 0)
                    {
                        idxList.addEnd(idx);
                        idx = treeAvailable.getNextSibling(idx);
                    }
                }

                // Move tree items from left tree to right tree
                idxListEnumerator = idxList.getEnumerator();
                while (idxListEnumerator.moveNext())
                {
                    idx = idxListEnumerator.current();
                    insertedAtIdx = this.moveOneTreeItem(treeAvailable, treeSelected, fastTabAvailable2treeIdx, fastTabSelected2treeIdx, idx);
                }

                this.enableButtonsTree();

                treeAvailable.lockWindowUpdate(false);
                treeSelected.lockWindowUpdate(false);
                this.reload(AddRemove::Add);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a field to the fast tab structure.
    /// </summary>
    /// <param name="_formControlDataSourceId">
    /// The form data source ID of the field specified in <paramref name="_formControlDataField" /> .
    /// </param>
    /// <param name="_formControlDataField">
    /// The field ID of the field that should be added to the tree structure.
    /// </param>
    /// <param name="_formControlLabel">
    /// The label of the form control.
    /// </param>
    /// <param name="_fastTabRootFormDataSourceId">
    /// The form data source ID of the root <c>FormDataSource</c> associated to the fast tab.
    /// </param>
    /// <param name="_includeFormDataSource">
    /// A set of form data source IDs that is included in the fast tab.
    /// </param>
    /// <param name="_fastTabName">
    /// The name of fast tab which the field is associated.
    /// </param>
    /// <param name="_fastTabFields">
    /// The <c>Set</c> of fields that is associated to the fast tab specified in <paramref
    /// name="_fastTabName" /> .
    /// </param>
    private void addField(  int _formControlDataSourceId,
                            fieldId _formControlDataField,
                            str _formControlLabel,
                            int _fastTabRootFormDataSourceId,
                            Set _includeFormDataSource,
                            str _fastTabName,
                            Set _fastTabFields = null)
    {
        str     key;
        str     value;
        TableId table;
        Set     fieldsIncluded;

        if ((_formControlDataSourceId == _fastTabRootFormDataSourceId
                || _includeFormDataSource.in(_formControlDataSourceId))
            && _formControlDataField != 0)
        {
            table = detailsForm.dataSource(_formControlDataSourceId).table();

            fieldsIncluded = fieldIncludedInCompare.lookup(table);
            if (fieldsIncluded.in(_formControlDataField))
            {
                key = PurchReApprovalPolicyRuleFields::valueStr(table, _formControlDataField);
                value = PurchReApprovalPolicyRuleFields::valueStr(detailsForm.dataSource(_fastTabRootFormDataSourceId).table(), _fastTabName);

                this.addField2FastTab(key, value, _formControlLabel, _fastTabFields);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addField2FastTab</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the fast tab structure.
    /// </summary>
    /// <param name="_key">
    /// A field key.
    /// </param>
    /// <param name="_value">
    /// A field value.
    /// </param>
    /// <param name="_label">
    /// The label of the field on the form if overridden.
    /// </param>
    /// <param name="_fastTabFields">
    /// The set of fields that is associated to the fast tab specified in <paramref name="_fastTabName" />
    /// value.
    /// </param>
    private void addField2FastTab(str _key, str _value, str _label, Set _fastTabFields)
    {
        List fastTabs;

        _fastTabFields.add(_key);

        if (_label)
        {
            // Use label defined in the UI and not the field label
            replaceFieldLabel.insert(_key, _label);
        }

        fastTabs = new List(Types::String);
        fastTabs.addEnd(_value);
        field2FastTab.insert(_key, fastTabs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFormTreeItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>FormTreeItem</c> instance.
    /// </summary>
    /// <param name="_text">
    /// The text shown in the tree.
    /// </param>
    /// <param name="_resNo">
    /// The resource associated to the tree item.
    /// </param>
    /// <param name="_hasChildren">
    /// A Boolean value that indicates whether child tree items exists.
    /// </param>
    /// <param name="_dataKey">
    /// A unique key for the tree item that maps the tree structure mapping tables, fast tabs and fields.
    /// </param>
    /// <returns>
    /// A new instance of the <c>FormTreeItem</c> class.
    /// </returns>
    private FormTreeItem addFormTreeItem(str _text, int _resNo, boolean _hasChildren, str _dataKey)
    {
        return new FormTreeItem(_text, purchReApprovalPolicyRuleImageList.image(_resNo), _hasChildren, _dataKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTable2Hierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a table to the table hierarchy.
    /// </summary>
    /// <param name="_parentTable">
    ///    The table id of the parent table.
    /// </param>
    /// <param name="_tableId">
    ///    The table id of the child table.
    /// </param>
    protected final void addTable2Hierarchy(TableId _parentTable, TableId _tableId)
    {
        List    tables;

        tables = tableHierarchy.lookup(_parentTable);
        tables.addEnd(_tableId);
        tableHierarchy.insert(_parentTable, tables);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowDragDrop</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if drag functionality is enabled for the available and selected fields.
    /// </summary>
    private void allowDragDrop()
    {
        if (viewType == PurchreApprovalPolicyRuleViewType::List)
        {
            if (this.parmOnlyViewAccess())
            {
                viewSelected.dragDrop(FormDragDrop::None);
                viewAvailable.dragDrop(FormDragDrop::None);
            }
            else
            {
                viewSelected.dragDrop(FormDragDrop::Manual);
                viewAvailable.dragDrop(FormDragDrop::Manual);
            }
        }
        else
        {
            if (this.parmOnlyViewAccess())
            {
                treeSelected.dragDrop(FormDragDrop::None);
                treeAvailable.dragDrop(FormDragDrop::None);
            }
            else
            {
                treeSelected.dragDrop(FormDragDrop::Manual);
                treeAvailable.dragDrop(FormDragDrop::Manual);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>available_toolTip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tooltip for the list of available fields.
    /// </summary>
    /// <returns>
    /// The tooltip text.
    /// </returns>
    public str available_toolTip()
    {
        return "@GLS180251";
    }

]]></Source>
			</Method>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the tree structures used for the selected and available field.
    /// </summary>
    public void build()
    {
        Form                    form        = formRun.form();
        FormBuildDesign         buildDesign = form.design();
        FormBuildGroupControl   buildParentGroup;

        imagelistAppl = new ImageListAppl_Query();

        super();

        treeBuildAvailable = groupControlAvailable.addControl(FormControlType::Tree, 'Tree_ViewAvailable');
        this.initTreeView(treeBuildAvailable);
        treeBuildSelected = groupControlSelected.addControl(FormControlType::Tree, 'Tree_ViewSelected');
        this.initTreeView(treeBuildSelected);

        buildParentGroup = buildDesign.control(this.parmDetailsControlId());
        if (!buildParentGroup)
        {
            detailsBuildText = buildDesign.addControl(FormControlType::StaticText, 'DetailsText');
        }
        else
        {
            detailsBuildText = buildParentGroup.addControl(FormControlType::StaticText, 'DetailsText');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFastTab</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the fast tab structure by iterating a form structure.
    /// </summary>
    /// <param name="_formControl">
    /// A <c>FormControl</c> object that will be iterated if it contains child <c>FormControl</c> objects
    /// or added to the fast tab structure.
    /// </param>
    /// <param name="_formDataSource">
    /// The <c>FormDataSource</c> object associate to the <c>FormControl</c>
    /// </param>
    /// <param name="_includeFormDataSource">
    /// A set of form data source IDs that is included in the fast tab.
    /// </param>
    /// <param name="_fastTabName">
    /// The name of fast tab that will be added to the fast tab structure.
    /// </param>
    /// <param name="_fastTabFields">
    /// A set of fields that will be shown for each fast tab.
    /// </param>
    private void buildFastTab(FormBuildControl _formControl, FormBuildDataSource _formDataSource, Set _includeFormDataSource, str _fastTabName, Set _fastTabFields = null)
    {
        int i;
        FormBuildGroupControl formGroupControl = _formControl as FormBuildGroupControl;
        FormBuildTabPageControl formTabPageControl = _formControl as FormBuildTabPageControl;
        FormBuildTabControl formTabControl = _formControl as FormBuildTabControl;
        FormBuildCheckBoxControl formCheckBoxControl;
        FormBuildComboBoxControl formComboBoxControl;
        FormBuildDateControl formDateControl;
        FormBuildDateTimeControl formDateTimeControl;
        FormBuildInt64Control formInt64Control;
        FormBuildIntControl formIntControl;
        FormBuildRadioControl formRadioControl;
        FormBuildRealControl formRealControl;
        FormBuildReferenceGroupControl formReferenceGroupControl;
        FormBuildStringControl formStringControl;
        FormBuildTimeControl formTimeControl;
        Set fastTabFields;
        FieldId fieldId;
        TableId tableId;

        if (formGroupControl != null)
        {
            if (strScan(formGroupControl.name(), 'FinancialDimension', 1, strLen(formGroupControl.name()))
                && formGroupControl.dataSource() != 0)
            {
                switch (detailsForm.dataSource(formGroupControl.dataSource()).table())
                {
                    case tableNum(PurchTable):
                        fieldId = fieldNum(PurchTable, DefaultDimension);
                        break;
                    case tableNum(PurchLine):
                        fieldId = fieldNum(PurchLine, DefaultDimension);
                        break;
                    default:
                        fieldId = 0;
                }

                if (fieldId)
                {
                    this.addField(formGroupControl.dataSource(), fieldId2Ext(fieldId, 1), formGroupControl.caption(), _formDataSource.id(), _includeFormDataSource, _fastTabName, _fastTabFields);
                }
            }
            else
            {
                for (i=1; i <= formGroupControl.controlCount(); i++)
                {
                    this.buildFastTab(formGroupControl.controlNum(i), _formDataSource, _includeFormDataSource, _fastTabName, _fastTabFields);
                }
            }
        }
        else if (formTabPageControl != null)
        {
            tableId = _formDataSource.table();

            fastTabFields = this.getFastTabFields(tableId, formTabPageControl.name());

            for (i=1; i <= formTabPageControl.controlCount(); i++)
            {
                this.buildFastTab(formTabPageControl.controlNum(i), _formDataSource, _includeFormDataSource, formTabPageControl.name(), fastTabFields);
            }

            this.setFastTabNameMap(tableId, formTabPageControl.name(), formTabPageControl.caption(), fastTabFields);
        }
        else if (formTabControl != null)
        {
            for (i=1; i <= formTabControl.controlCount(); i++)
            {
                this.buildFastTab(formTabControl.controlNum(i), _formdataSource, _includeFormDataSource, formTabControl.name());
            }
        }
        else if (_formControl)
        {
            switch (_formControl.handle())
            {
                case classNum(FormBuildCheckBoxControl):
                    formCheckBoxControl = _formControl as FormBuildCheckBoxControl;
                    if (formCheckBoxControl != null)
                    {
                        this.addField(formCheckBoxControl.dataSource(), formCheckBoxControl.dataField(), formCheckBoxControl.label(), _formDataSource.id(), _includeFormDataSource, _fastTabName, _fastTabFields);
                    }
                    break;

                case classNum(FormBuildComboBoxControl):
                    formComboBoxControl = _formControl as FormBuildComboBoxControl;
                    if (formComboBoxControl != null)
                    {
                        this.addField(formComboBoxControl.dataSource(), formComboBoxControl.dataField(), formComboBoxControl.label(), _formDataSource.id(), _includeFormDataSource, _fastTabName, _fastTabFields);
                    }
                    break;

                case classNum(FormBuildDateControl):
                    formDateControl = _formControl as FormBuildDateControl;
                    if (formDateControl != null)
                    {
                        this.addField(formDateControl.dataSource(), formDateControl.dataField(), formDateControl.label(), _formDataSource.id(), _includeFormDataSource, _fastTabName, _fastTabFields);
                    }
                    break;

                case classNum(FormBuildDateTimeControl):
                    formDateTimeControl = _formControl as FormBuildDateTimeControl;
                    if (formDateTimeControl != null)
                    {
                        this.addField(formDateTimeControl.dataSource(), formDateTimeControl.dataField(), formDateTimeControl.label(), _formDataSource.id(), _includeFormDataSource, _fastTabName, _fastTabFields);
                    }
                    break;

                case classNum(FormBuildInt64Control):
                    formInt64Control = _formControl as FormBuildInt64Control;
                    if (formInt64Control != null)
                    {
                        this.addField(formInt64Control.dataSource(), formInt64Control.dataField(), formInt64Control.label(), _formDataSource.id(), _includeFormDataSource, _fastTabName, _fastTabFields);
                    }
                    break;

                case classNum(FormBuildIntControl):
                    formIntControl = _formControl as FormBuildIntControl;
                    if (formIntControl != null)
                    {
                        this.addField(formIntControl.dataSource(), formIntControl.dataField(), formIntControl.label(), _formDataSource.id(), _includeFormDataSource, _fastTabName, _fastTabFields);
                    }
                    break;

                case classNum(FormBuildRadioControl):
                    formRadioControl = _formControl as FormBuildRadioControl;
                    if (formRadioControl != null)
                    {
                        this.addField(formRadioControl.dataSource(), formRadioControl.dataField(), formRadioControl.caption(), _formDataSource.id(), _includeFormDataSource, _fastTabName, _fastTabFields);
                    }
                    break;

                case classNum(FormBuildRealControl):
                    formRealControl = _formControl as FormBuildRealControl;
                    if (formRealControl != null)
                    {
                        this.addField(formRealControl.dataSource(), formRealControl.dataField(), formRealControl.label(), _formDataSource.id(), _includeFormDataSource, _fastTabName, _fastTabFields);
                    }
                    break;

                case classNum(FormBuildStringControl):
                    formStringControl = _formControl as FormBuildStringControl;
                    if (formStringControl != null)
                    {
                        this.addField(formStringControl.dataSource(), formStringControl.dataField(), formStringControl.label(), _formDataSource.id(), _includeFormDataSource, _fastTabName, _fastTabFields);
                    }
                    break;

                case classNum(FormBuildReferenceGroupControl):
                    formReferenceGroupControl = _formControl as FormBuildReferenceGroupControl;
                    if (formReferenceGroupControl != null)
                    {
                        this.addField(formReferenceGroupControl.dataSource(), formReferenceGroupControl.referenceField(), formReferenceGroupControl.label(), _formDataSource.id(), _includeFormDataSource, _fastTabName, _fastTabFields);
                    }

                case classNum(FormBuildTimeControl):
                    formTimeControl = _formControl as FormBuildTimeControl;
                    if (formTimeControl != null)
                    {
                        this.addField(formTimeControl.dataSource(), formTimeControl.dataField(), formTimeControl.label(), _formDataSource.id(), _includeFormDataSource, _fastTabName, _fastTabFields);
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFieldData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a list of fields that have detail information such as label and help text.
    /// </summary>
    protected void buildFieldData()
    {
        FieldName                       fieldName;
        str                             fieldLabel;
        str                             fieldHelpLabel;
        int                             fieldIcon;
        str                             tableLabel;
        SysDictTable                    dictTable;
        SetEnumerator                   setEnumerator;
        Map                             fastTabs;
        MapEnumerator                   fastTabEnumerator;
        str                             key, table, field;
        MapEnumerator                   me;
        Set                             fields;
        Set                             fieldAdded = new Set(Types::String);
        TableId                         tableId;
        FieldId                         fieldId;

        me = table2Field.getEnumerator();
        while (me.moveNext())
        {
            table = me.currentKey();
            tableId = str2int(table);

            dictTable = new SysDictTable(tableId);
            if (dictTable)
            {
                tableLabel = dictTable.label();

                fastTabs = me.currentValue();
                fastTabEnumerator = fastTabs.getEnumerator();
                while (fastTabEnumerator.moveNext())
                {
                    fields = fastTabEnumerator.currentValue();
                    setEnumerator = fields.getEnumerator();
                    while (setEnumerator.moveNext())
                    {
                        if (!fieldAdded.in(setEnumerator.current()))
                        {
                            key = setEnumerator.current();
                            [table, field] = PurchReApprovalPolicyRuleFields::valueSplit(key);

                            tableId = str2int(table);
                            fieldId = str2int(field);
                            if (tableId != dictTable.id())
                            {
                                dictTable = new SysDictTable(tableId);
                                tableLabel = dictTable.label();
                            }

                            [fieldName, fieldLabel, fieldHelpLabel, fieldIcon] = this.getFieldNameAndLabel(tableId, tableLabel, key, fieldId);

                            field2Data.insert(key, [fieldName, fieldIcon, fieldLabel, fieldHelpLabel]);
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a tree structure for tables, fast tabs and fields.
    /// </summary>
    /// <param name="_table">
    /// The table ID of the table that should be added to the tree structure.
    /// </param>
    /// <param name="_parentTable">
    /// The table ID of the parent table.
    /// </param>
    /// <param name="_tree">
    /// The <c>FormTreeControl</c> object where <c>FromTreeItem</c> objects will be added.
    /// </param>
    /// <param name="_tableParent2Idx">
    /// A map that is used to find the <c>FormTreeItem</c> object associated to a table ID.
    /// </param>
    /// <param name="_fastTab2treeIdx">
    /// A map that is used to find the <c>FormTreeItem</c> object associated to a fast tab.
    /// </param>
    private void buildTree(int _table, int _parentTable, FormTreeControl _tree, Map _tableParent2Idx, Map _fastTab2treeIdx)
    {
        List tables;
        List fastTabOrder;
        Map     fastTabs;
        ListEnumerator tableEnumerator;
        ListEnumerator  fastTabOrderEnumerator;
        int idx, parentTableIdx;
        int fastTabsCount;
        SysDictTable dictTable = new SysDictTable(_table);
        str value, fastTabLabel;
        Set fastTabFields;

        // Do table have any fields that should be shown
        if (table2Field.exists(_table))
        {
            if (!_tableParent2Idx.exists(_table))
            {
                if (_tableParent2Idx.exists(_parentTable))
                {
                    idx = _tree.addItem(_tableParent2Idx.lookup(_parentTable), 0, this.addFormtreeItem(dictTable.label(), this.getTableIcon(dictTable.id()), true, dictTable.name()));
                }
                else
                {
                    idx = _tree.addItem(0, 0, this.addFormTreeItem(dictTable.label(), this.getTableIcon(dictTable.id()), true, dictTable.name()));
                }
                _tableParent2Idx.insert(_table, idx);
            }

            parentTableIdx = _tableParent2Idx.lookup(_table);

            // Create fast tabs
            fastTabOrder = fastTabOrderMap.lookup(_table);
            fastTabs = table2Field.lookup(_table);
            fastTabOrderEnumerator = fastTabOrder.getEnumerator();
            while (fastTabOrderEnumerator.moveNext())
            {
                // Create a combined value for tree item unique data key
                value = PurchReApprovalPolicyRuleFields::valueStr(_table, fastTabOrderEnumerator.current());

                fastTabFields = fastTabs.lookup(fastTabOrderEnumerator.current());
                // Is Fast tab already created and do Fast tab contain any fields
                if (fastTabFields.elements())
                {
                    if (!_fastTab2treeIdx.exists(value))
                    {
                        fastTabLabel = fastTabControlMap.lookup(value);

                        idx = _tree.addItem(parentTableIdx, false, this.addFormTreeItem(fastTabLabel, #ImageFastTab, false, value));
                        _fastTab2treeIdx.insert(value, idx);
                    }
                    fastTabsCount++;
                }
            }

            // Remove Parent in tree structure if no fast tabs has been added.
            if (!fastTabsCount)
            {
                _tree.delete(_tableParent2Idx.lookup(_table));
                _tableParent2Idx.remove(_table);
            }

            tables = tableHierarchy.lookup(_table);
            tableEnumerator = tables.getEnumerator();
            while (tableEnumerator.moveNext())
            {
                this.buildTree(tableEnumerator.current(), _table, _tree, _tableParent2Idx, _fastTab2treeIdx);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtonsTree</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables the add and remove buttons.
    /// </summary>
    private void enableButtonsTree()
    {
        int treeSelectedCount;
        int treeAvailableCount;

        if (!onlyViewAccess)
        {
            treeSelectedCount = this.getTreeItemCount(treeSelected);
            treeAvailableCount = this.getTreeItemCount(treeAvailable);
        }

        addButton.enabled(!onlyViewAccess && treeAvailableCount > 0);
        removeButton.enabled(!onlyViewAccess && treeSelectedCount > this.parmItemsNeeded());

        if (this.parmHasAddAllButton())
        {
            addAllButton.enabled(!onlyViewAccess && treeAvailableCount);
        }

        if (this.parmHasRemoveAllButton())
        {
            removeAllButton.enabled(!onlyViewAccess && treeSelectedCount > this.parmItemsNeeded());
        }

        this.enableButtons_upDown();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fill</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the view that displays the selected and available fields.
    /// </summary>
    public void fill()
    {
        container data;
        container selectedData, availableData;

        if (viewType == PurchreApprovalPolicyRuleViewType::List)
        {
            super();

            // List view is enabled also when onlyViewAccess is false to ensure that the structure can be navigated
            viewSelected.enabled(true);
            viewAvailable.enabled(true);
        }
        else
        {
            treeSelected.deleteAll();
            treeAvailable.deleteAll();

            data = this.getData();
            [availableData, selectedData] = data;

            tableAvailableParent2Idx = new Map(Types::Integer, Types::Integer);
            tableSelectedParent2Idx = new Map(Types::Integer, Types::Integer);
            fastTabAvailable2treeIdx = new Map(Types::String, Types::Integer);
            fastTabSelected2treeIdx = new Map(Types::String, Types::Integer);

            this.fillTree(treeAvailable, tableAvailableParent2Idx, fastTabAvailable2treeIdx, availableData);
            this.fillTree(treeSelected, tableSelectedParent2Idx, fastTabSelected2treeIdx, selectedData);

            treeAvailable.expand(tableAvailableParent2Idx.lookup(tableNum(PurchTable)), FormTreeExpand::Expand);
            treeSelected.expand(tableSelectedParent2Idx.lookup(tableNum(PurchTable)), FormTreeExpand::Expand);

            this.enableButtonsTree();

            // Tree structure is enabled also when onlyViewAccess is false to ensure that the structure can be navigated
            treeSelected.enabled(true);
            treeAvailable.enabled(true);
        }

        this.allowDragDrop();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the tree structure by adding <c>FormTreeItem</c> objects for tables, fast tabs and fields.
    /// </summary>
    /// <param name="_tree">
    /// The <c>FormTreeControl</c> object to which <c>FormTreeItem</c> objects are added.
    /// </param>
    /// <param name="_tableParent2Idx">
    /// A map that is used to find the <c>FormTreeItem</c> object associated to a table ID.
    /// </param>
    /// <param name="_fastTab2treeIdx">
    /// A map that is used to find the <c>FormTreeItem</c> object associated to a fast tab.
    /// </param>
    /// <param name="_data">
    /// A container that contains information about each tree node that is used when you create the
    /// <c>FormTreeItem</c> objects.
    /// </param>
    private void fillTree(FormTreeControl _tree, Map _tableParent2Idx, Map _fastTab2treeIdx, container _data)
    {
        int i;
        container dataRow;
        FormTreeItem item;
        int idx, resNo, offset, overlayResNo;
        str text;
        str tableValue, fastTabValue, value;
        Map itemDataMap;
        List fieldsFastTab;
        ListEnumerator fieldsFastTabEnumerator;
        FormTreeItem parentTreeItem;

        _tree.lockWindowUpdate(true);
        _tree.setImagelist(purchReApprovalPolicyRuleImageList.imageList());

        this.buildTree(tableNum(PurchTable), 0, _tree, _tableParent2Idx, _fastTab2treeIdx);  // Root

        for (i=conlen(_data); i; i--)
        {
            dataRow  = conpeek(_data, i);

            itemDataMap = new Map(Types::Integer, typeof(conpeek(dataRow, 1)));
            itemDataMap.insert(0,conpeek(dataRow, 1));

            if (this.parmUseImageListOverlay())
            {
                resNo        = conpeek(dataRow, 2);
                overlayResNo = conpeek(dataRow, 3);
                text         = conpeek(dataRow, 4);
                item         = this.addFormTreeItem(text, resNo, false, itemDataMap.lookup(0));
                offset       = 2;
            }
            else
            {
                resNo    = conpeek(dataRow, 2);
                text     = conpeek(dataRow, 3);
                item     = this.addFormTreeItem(text, resNo, false, itemDataMap.lookup(0));
                offset   = 1;
            }

            if (field2FastTab.exists(conpeek(dataRow, 1)))
            {
                fieldsFastTab = field2FastTab.lookup(conpeek(dataRow, 1));
                fieldsFastTabEnumerator = fieldsFastTab.getEnumerator();
                while (fieldsFastTabEnumerator.moveNext())
                {
                    value = fieldsFastTabEnumerator.current();
                    [tableValue, fastTabValue] = PurchReApprovalPolicyRuleFields::valueSplit(value);

                    idx = _tree.addItem(_fastTab2treeIdx.lookup(value), true, item);
                    parentTreeItem = _tree.getItem(_fastTab2treeIdx.lookup(value));
                    parentTreeItem.children(true);
                    _tree.setItem(parentTreeItem);
                }
            }

            if (overLayresNo != 0)
            {
                item = _tree.getItem(idx);
                item.overlayImage(purchReApprovalPolicyRuleImageList.image(overlayResNo));
                _tree.setItem(item);
            }
        }

        _tree.lockWindowUpdate(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates two containers that contain information about each tree node in the selected and available
    /// tree structure.
    /// </summary>
    /// <returns>
    /// A container that contains two containers that contains information about tree nodes.
    /// </returns>
    public container getData()
    {
        container                       selectedData, availableData;
        FieldName                       fieldName;
        str                             fieldLabel;
        str                             fieldHelpLabel;
        int                             fieldIcon;
        str                             table, field;
        str                             keyValue;
        MapEnumerator                   me;
        TableId                         tableId;
        FieldId                         fieldId;
        Map                             sortedFieldsLeft = new Map(Types::String, Types::Container);
        Map                             sortedFieldsRight = new Map(Types::String, Types::Container);
        MapEnumerator                   sortedFieldsEnumerator;

        me = field2Data.getEnumerator();
        while (me.moveNext())
        {
            [fieldName, fieldIcon, fieldLabel, fieldHelpLabel] = me.currentValue();

            [table, field] = PurchReApprovalPolicyRuleFields::valueSplit(me.currentKey());

            tableId = str2int(table);
            fieldId = str2int(field);

            keyValue = strFmt('%1_%2_%3', fieldLabel, fieldId, tableId);

            if (!inSet.in(fieldName))
            {
                sortedFieldsRight.insert(keyValue, [me.currentValue()]);
            }
            else
            {
                sortedFieldsLeft.insert(keyValue, [me.currentValue()]);
            }
        }

        sortedFieldsEnumerator = sortedFieldsRight.getEnumerator();
        while (sortedFieldsEnumerator.moveNext())
        {
            availableData += sortedFieldsEnumerator.currentValue();
        }

        sortedFieldsEnumerator = sortedFieldsLeft.getEnumerator();
        while (sortedFieldsEnumerator.moveNext())
        {
            selectedData += sortedFieldsEnumerator.currentValue();
        }

        return [availableData, selectedData];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFastTabFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a set of fields that is associated to the fast tab.
    /// </summary>
    /// <param name="_tableId">
    /// The table ID that contains fast tabs.
    /// </param>
    /// <param name="_fastTabName">
    /// The name of fast tab to which the field is associated.
    /// </param>
    /// <returns>
    /// A set of fields that is associated to the fast tab specified in <paramref name="_fastTabName" />
    /// value.
    /// </returns>
    private Set getFastTabFields(TableId _tableId, str _fastTabName)
    {
        Map fastTabNameMap;
        Set fastTabFields = new Set(Types::String);

        if (table2Field.exists(_tableId))
        {
            fastTabNameMap = table2Field.lookup(_tableId);
            if (fastTabNameMap.exists(_fastTabName))
            {
                fastTabFields = fastTabNameMap.lookup(_fastTabName);
            }
        }

        return fastTabFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFastTabName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the fast tab control that will be the root control that is used when you build the grouping
    /// structure.
    /// </summary>
    /// <param name="_formBuildDesign">
    /// The build design of the form from which to find a fast tab control.
    /// </param>
    /// <param name="_formBuildDataSource">
    /// The form data source from which to find a fast tab control.
    /// </param>
    /// <returns>
    /// The form control name of the root fast tab control.
    /// </returns>
    protected FormControlName getFastTabName(FormBuildDesign _formBuildDesign, FormBuildDataSource _formBuildDataSource)
    {
        FormControlName     controlName;
        FormBuildControl    control;

        if (_formBuildDataSource)
        {
            switch (_formBuildDataSource.table())
            {
                case tableNum(PurchTable):
                    // Check if the form has a control called HeaderDetailsTab
                    control = _formBuildDesign.control(formControlStr(PurchTable, HeaderDetailsTab));
                    if (control)
                    {
                        controlName = PurchReApprovalPolicyRuleFields::valueStr(_formBuildDataSource.table(), formControlStr(PurchTable, HeaderDetailsTab));
                    }
                    else
                    {
                        controlName = PurchReApprovalPolicyRuleFields::valueStr(_formBuildDataSource.table(), #FieldsWithoutFastTab);
                    }
                    break;
                case tableNum(PurchLine):
                    // Check if the form has a control called LineDetailsTab
                    control = _formBuildDesign.control(formControlStr(PurchTable, LineDetailsTab));
                    if (control)
                    {
                        controlName = PurchReApprovalPolicyRuleFields::valueStr(_formBuildDataSource.table(), formControlStr(PurchTable, LineDetailsTab));
                    }
                    else
                    {
                        controlName = PurchReApprovalPolicyRuleFields::valueStr(_formBuildDataSource.table(), #FieldsWithoutFastTab);
                    }
                    break;
                case tableNum(MarkupTrans):
                    // No fast tabs
                    controlName = PurchReApprovalPolicyRuleFields::valueStr(_formBuildDataSource.table(), #FieldsWithoutFastTab);
                    break;
                case tableNum(PurchPrepayTable):
                    // No fast tabs
                    controlName = PurchReApprovalPolicyRuleFields::valueStr(_formBuildDataSource.table(), #FieldsWithoutFastTab);
                    break;
                case tableNum(VendPaymSched),
                     tableNum(VendPaymSchedLine):
                    // No fast tabs
                    controlName = PurchReApprovalPolicyRuleFields::valueStr(_formBuildDataSource.table(), #FieldsWithoutFastTab);
                    break;
                case tableNum(AccountingDistribution):
                    // No fast tabs
                    controlName = PurchReApprovalPolicyRuleFields::valueStr(_formBuildDataSource.table(), #FieldsWithoutFastTab);
                    break;
            }
        }

        return controlName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldNameAndLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the field name and label.
    /// </summary>
    /// <param name="_tableId">
    /// The table ID that contains the field.
    /// </param>
    /// <param name="_tableLabel">
    /// The label for the table specified in <paramref name="_tableId" /> value.
    /// </param>
    /// <param name="_key">
    /// A key for looking up replacement labels.
    /// </param>
    /// <param name="_fieldId">
    /// The ID of the field.
    /// </param>
    /// <returns>
    /// A field name, label, help text and icon in a container.
    /// </returns>
    private container getFieldNameAndLabel(TableId _tableId, str _tableLabel, str _key, FieldId _fieldId)
    {
        FieldName       fieldName;
        str             fieldLabel;
        str             fieldHelpLabel;
        SysDictField    dictField;
        int             icon;

        if (_fieldId == 0)
        {
            // Entire record changed, e.g. Accounting distribution
            fieldLabel = "@GLS180260";
            fieldHelpLabel = "@GLS180263";
            icon = #ImageField;
        }
        else
        {
            dictField = new SysDictField(_tableId, _fieldId);
            if (dictField)
            {
                if (replaceFieldLabel.exists(_key))
                {
                    fieldLabel = replaceFieldLabel.lookup(_key);
                }
                else
                {
                    fieldLabel = dictField.label();
                }
                icon = dictField.image();
                fieldHelpLabel = dictField.help();
            }
        }

        fieldName = PurchReApprovalPolicyRuleFields::valueStr(_tableId, _fieldId);

        if (viewType == PurchreApprovalPolicyRuleViewType::List)
        {
            // For list view add label for the table as prefix
            fieldLabel = strFmt("%1.%2", _tableLabel, fieldLabel);
        }

        return [fieldName, fieldLabel, fieldhelpLabel, icon];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormDataSources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of form data sources for which the fast tabs should be iterated.
    /// </summary>
    /// <param name="_form">
    /// The <c>Form</c> object that contains form data sources and fast tabs.
    /// </param>
    /// <returns>
    /// A <c>List</c> of form data sources IDs.
    /// </returns>
    protected List getFormDataSources(form _form)
    {
        List                dataSourceList = new List(Types::Class);
        List                tables;
        int                 dataSourceCount;
        int                 parentDataSourceNo;
        int                 parentDataSourceTable;
        TableId             tableId;
        FormBuildDataSource formBuildDataSource;
        FormBuildDataSource parentFormBuildDataSource, formBuildDataSourceEnumerator;
        Set                 supportedTables = VersioningPurchaseOrder::archivedTables();
        Set                 fastTabFormDataSourceIds;
        FormControlName     fastTabControlName;
        Map                 table2fastTabControlName = new Map(Types::Integer, Types::String);

        for (dataSourceCount=1; dataSourceCount<= _form.dataSourceCount(); dataSourceCount++)
        {
            formBuildDataSource = _form.dataSource(dataSourceCount);
            tableId = formBuildDataSource.table();

            // check if is in version table list
            if (supportedTables.in(tableId))
            {
                fastTabControlName = this.getFastTabName(_form.design(), formBuildDataSource);
                if (fastTabControlName)
                {
                    fastTabRoot2FormDataSourceId.insert(fastTabControlName, new Set(Types::Integer));
                    table2fastTabControlName.insert(tableId, fastTabControlName);
                }

                if (!tableHierarchy.exists(tableId))
                {
                    tableHierarchy.insert(tableId, new List(Types::Integer));
                    if (tableId != tableNum(PurchTable))
                    {
                        this.addTable2Hierarchy(tableNum(PurchTable), TableId);
                    }
                    fieldIncludedInCompare.insert(tableId, Set::create(PurchReApprovalCompareRecordVersions::fieldsIncludedInCompare(tableId)));
                }
            }
            else if (tableId == tableNum(AccountingDistribution))
            {
                tableHierarchy.insert(tableId, new List(Types::Integer));
                this.addTable2Hierarchy(tableNum(PurchTable), TableId);
            }
        }

        for (dataSourceCount=1; dataSourceCount<= _form.dataSourceCount(); dataSourceCount++)
        {
            formBuildDataSource = _form.dataSource(dataSourceCount);

            // check if is in version table list
            if (supportedTables.in(formBuildDataSource.table()))
            {
                dataSourceList.addEnd(formBuildDataSource);

                if (formBuildDataSource.joinSource() == 0)
                {
                    parentFormBuildDataSource = null;
                }
                else
                {
                    parentFormBuildDataSource = _form.dataSource(formBuildDataSource.joinSource());
                }

                if (parentFormBuildDataSource)
                {
                    tables = tableHierarchy.lookup(parentFormBuildDataSource.table());

                    tables.addEnd(formBuildDataSource.table());
                    tableHierarchy.insert(parentFormBuildDataSource.table(), tables);

                    parentDataSourceTable = parentFormBuildDataSource.table();
                    formBuildDataSourceEnumerator = parentFormBuildDataSource;

                    while (parentDataSourceTable != 0)
                    {
                        if (table2fastTabControlName.exists(parentDataSourceTable))
                        {
                            fastTabControlName = table2fastTabControlName.lookup(parentDataSourceTable);
                            fastTabFormDataSourceIds = fastTabRoot2FormDataSourceId.lookup(fastTabControlName);
                            fastTabFormDataSourceIds.add(formBuildDataSource.id());
                            fastTabRoot2FormDataSourceId.insert(fastTabControlName, fastTabFormDataSourceIds);
                            break;
                        }

                        parentDataSourceNo = formBuildDataSourceEnumerator.joinSource();

                        if (parentDataSourceNo != 0)
                        {
                            formBuildDataSourceEnumerator = _form.dataSource(parentDataSourceNo);
                            parentDataSourceTable = formBuildDataSourceEnumerator.table();
                        }
                        else
                        {
                            parentDataSourceTable = 0;
                        }
                    }
                }
            }
            else if (tableId == tableNum(AccountingDistribution))
            {
                dataSourceList.addEnd(formBuildDataSource);
            }
        }

        return dataSourceList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getForms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of forms that will be used when iterating the fast tab and build the grouping structure.
    /// </summary>
    /// <returns>
    /// A list of form names.
    /// </returns>
    protected List getForms()
    {
        List formList = new List(Types::String);

        formList.addEnd(formStr(PurchTable));
        formList.addEnd(formStr(MarkupTrans));
        formList.addEnd(formStr(PurchPrepayTable));
        formList.addEnd(formStr(VendPaymSchedule));
        formList.addEnd(formStr(AccountingDistribution));

        return formList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableIcon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the icon for a table in the tree structure.
    /// </summary>
    /// <param name="_tableId">
    /// The ID of the table from whom to get the icon.
    /// </param>
    /// <returns>
    /// The resource number for an icon associated to a table.
    /// </returns>
    private int getTableIcon(TableId _tableId)
    {
        int icon;

        switch (_tableId)
        {
            case tableNum(MarkupTrans):
                icon = #ImageMarkup;
                break;
            case tableNum(PurchPrepayTable):
                icon = #ImagePrepayment;
                break;
            case tableNum(PurchTable):
                icon = #ImagePurchaseHeader;
                break;
            case tableNum(PurchLine):
                icon = #ImagePurchaseLine;
                break;
            case tableNum(VendPaymSched),
                 tableNum(VendPaymSchedLine):
                icon = #ImageVendPaymSchedule;
                break;
            case tableNum(AccountingDistribution):
                icon = #ImagePurchaseLine;
                break;
            default:
                icon = #ImageAccountingDistribution;
        }

        return icon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTreeItemCount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Counts the number of tree items of type field.
    /// </summary>
    /// <param name="_formTreeControl">
    ///    The <c>FormTreeControl</c> object that contains tree items.
    /// </param>
    /// <param name="_idx">
    ///    The index of the current tree item; if index is not specified the root tree item will be used.
    /// </param>
    /// <returns>
    ///    The number of tree item of type field.
    /// </returns>
    protected int getTreeItemCount(FormTreeControl _formTreeControl, int _idx = 0)
    {
        int             idx, idxCount, idxChild;
        FormTreeItem    formTreeItem;

        if (_idx)
        {
            idx = _idx;
        }
        else
        {
            idx = _formTreeControl.getRoot();
        }

        while (idx != 0)
        {
            formTreeItem = _formTreeControl.getItem(idx);
            idxChild = _formTreeControl.getChild(idx);
            if (idxChild)
            {
                idxCount += this.getTreeItemCount(_formTreeControl, idxChild);
            }
            else if (formTreeItem.image() != purchReApprovalPolicyRuleImageList.image(#ImageFastTab)
                    && !tableResources.in(formTreeItem.image()))
            {
                idxCount++;
            }

            idx = _formTreeControl.getNextSibling(idx);
        }

        return idxCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the selected and available tree structures.
    /// </summary>
    public void init()
    {
        super();

        purchReApprovalPolicyRuleImageList = PurchReApprovalPolicyRuleImageList::construct();

        this.setTableResources();

        treeAvailable = formRun.control(formRun.controlId(treeBuildAvailable.name()));
        treeSelected = formRun.control(formRun.controlId(treeBuildSelected.name()));
        detailsText = formRun.control(formRun.controlId(detailsBuildText.name()));

        treeSelected.helpText("@GLS180252");
        treeAvailable.helpText("@GLS180251");

        treeSelected.registerOverrideMethod(methodStr(FormTreeControl, toolTip), methodStr(PurchReApprovalPolicyRuleFieldList, selected_toolTip), this);
        treeSelected.registerOverrideMethod(methodStr(FormTreeControl, selectionChanged), methodStr(PurchReApprovalPolicyRuleFieldList, treeSelectionChanged), this);

        treeAvailable.registerOverrideMethod(methodStr(FormTreeControl, toolTip), methodStr(PurchReApprovalPolicyRuleFieldList, available_toolTip), this);
        treeAvailable.registerOverrideMethod(methodStr(FormTreeControl, selectionChanged), methodStr(PurchReApprovalPolicyRuleFieldList, treeSelectionChanged), this);

        viewSelected.helpText("@GLS180252");
        viewAvailable.helpText("@GLS180251");

        viewSelected.registerOverrideMethod(methodStr(FormListControl, toolTip), methodStr(PurchReApprovalPolicyRuleFieldList, selected_toolTip), this);

        viewAvailable.registerOverrideMethod(methodStr(FormListControl, toolTip), methodStr(PurchReApprovalPolicyRuleFieldList, available_toolTip), this);

        groupControlSelected.helpText("@GLS180252");
        groupControlAvailable.helpText("@GLS180251");

        groupControlSelected.registerOverrideMethod(methodStr(FormGroupControl, toolTip), methodStr(PurchReApprovalPolicyRuleFieldList, selected_toolTip), this);
        groupControlAvailable.registerOverrideMethod(methodStr(FormGroupControl, toolTip), methodStr(PurchReApprovalPolicyRuleFieldList, available_toolTip), this);

        detailsText.text('');

        this.prepareData();
        this.buildFieldData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTreeView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the default values for a <c>FormBuildTreeControl</c> object.
    /// </summary>
    /// <param name="_buildTree">
    /// The <c>FormBuildTreeControl</c> object that will get default values set.
    /// </param>
    private void initTreeView(FormBuildTreeControl _buildTree)
    {
        _buildTree.widthMode(FormWidth::ColumnWidth);
        _buildTree.heightMode(FormHeight::ColumnHeight);
        _buildTree.rowSelect(true);
        _buildTree.singleSelection(false);
        _buildTree.dragDrop(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveOneFastTab</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves all fields associated to a fast tab from one tree structure to another.
    /// </summary>
    /// <param name="_fromTree">
    /// The <c>FormTreeControl</c> object where tree items should be removed.
    /// </param>
    /// <param name="_toTree">
    /// The <c>FormTreeControl</c> object where tree items should be added.
    /// </param>
    /// <param name="_fromFastTab2treeIdx">
    /// A map that is used to find the <c>FormTreeItem</c> object associated to a fast tab.
    /// </param>
    /// <param name="_toFastTab2treeIdx">
    /// A map that is used to find the <c>FormTreeItem</c> object associated to a fast tab.
    /// </param>
    /// <param name="_formTreeItem">
    /// The fast tab <c>FormTreeItem</c> object.
    /// </param>
    private void moveOneFastTab(FormTreeControl _fromTree, FormTreeControl _toTree,
                                Map _fromFastTab2treeIdx, Map _toFastTab2treeIdx,
                                FormTreeItem _formTreeItem)
    {
        List            childIdxs;
        ListEnumerator  childIdxEnumerator;
        int             childIdx;
        FormTreeItem    parentTreeItem;

        childIdxs = new List(Types::Integer);
        childIdx = _fromTree.getChild(_fromFastTab2treeIdx.lookup(_formTreeItem.data()));
        while (childIdx != 0)
        {
            childIdxs.addEnd(childIdx);
            childIdx = _fromTree.getNextSibling(childIdx);
        }

        childIdxEnumerator = childIdxs.getEnumerator();
        while (childIdxEnumerator.moveNext())
        {
            this.moveOneTreeItem(_fromTree, _toTree, _fromFastTab2treeIdx, _toFastTab2treeIdx, childIdxEnumerator.current());
        }

        parentTreeItem = _fromTree.getItem(_fromFastTab2treeIdx.lookup(_formTreeItem.data()));
        parentTreeItem.children(false);
        _fromTree.setItem(parentTreeItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveOneTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves all fields associated to a table and fast tabs from one tree structure to another.
    /// </summary>
    /// <param name="_fromTree">
    /// The <c>FormTreeControl</c> object where tree items should be removed.
    /// </param>
    /// <param name="_toTree">
    /// The <c>FormTreeControl</c> object where tree items should be added.
    /// </param>
    /// <param name="_fromFastTab2treeIdx">
    /// A map that is used to find <c>FormTreeItem</c> object associated to a fast tab.
    /// </param>
    /// <param name="_toFastTab2treeIdx">
    /// A map that is used to find the <c>FormTreeItem</c> object associated to a fast tab.
    /// </param>
    /// <param name="_formTreeItem">
    /// The <c>FormTreeItem</c> record.
    /// </param>
    private void moveOneTable(  FormTreeControl _fromTree, FormTreeControl _toTree,
                                Map _fromFastTab2treeIdx, Map _toFastTab2treeIdx,
                                FormTreeItem _formTreeItem)
    {
        List            childIdxs;
        ListEnumerator  childIdxEnumerator;
        int             childIdx, tableId;

        tableId = tableName2id(_formTreeItem.data());

        childIdxs = new List(Types::Integer);
        childIdx = _fromTree.getChild(tableAvailableParent2Idx.lookup(tableId));
        while (childIdx != 0)
        {
            childIdxs.addEnd(childIdx);
            childIdx = _fromTree.getNextSibling(childIdx);
        }

        childIdxEnumerator = childIdxs.getEnumerator();
        while (childIdxEnumerator.moveNext())
        {
            this.moveOneTreeItem(_fromTree, _toTree, _fromFastTab2treeIdx, _toFastTab2treeIdx, childIdxEnumerator.current());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveOneTreeItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves a table, fast or field from one tree structure to another.
    /// </summary>
    /// <param name="_fromTree">
    /// The <c>FormTreeControl</c> object where tree items should be removed.
    /// </param>
    /// <param name="_toTree">
    /// The <c>FormTreeControl</c> object where tree items should be added.
    /// </param>
    /// <param name="_fromFastTab2treeIdx">
    /// A map that is used to find the <c>FormTreeItem</c> object that is associated to a fast tab.
    /// </param>
    /// <param name="_toFastTab2treeIdx">
    /// A map that is used to find the <c>FormTreeItem</c> object that is associated to a fast tab.
    /// </param>
    /// <param name="_index">
    /// The index of the current tree item.
    /// </param>
    /// <returns>
    /// The index of the added tree item in the <paramref name="_toTree" /> value.
    /// </returns>
    private int moveOneTreeItem(FormTreeControl _fromTree, FormTreeControl _toTree,
                                Map _fromFastTab2treeIdx, Map _toFastTab2treeIdx,
                                int _index)
    {
        FormTreeItem        formTreeItem;
        int                 newIdx;
        List                fieldsFastTab;
        ListEnumerator      fieldsFastTabEnumerator;
        str                 tableValue, fastTabValue, value;
        TableId             tableId;
        FormTreeItem        parentTreeItem;
        container           data;

        formTreeItem    = _fromTree.getItem(_index);

        formTreeItem.stateSelected(false);
        if (field2FastTab.exists(formTreeItem.data()))
        {
            // Move single field
            fieldsFastTab = field2FastTab.lookup(formTreeItem.data());
            fieldsFastTabEnumerator = fieldsFastTab.getEnumerator();
            while (fieldsFastTabEnumerator.moveNext())
            {
                value = fieldsFastTabEnumerator.current();
                [tableValue, fastTabValue] = PurchReApprovalPolicyRuleFields::valueSplit(value);

                newIdx = _toTree.addItem(_toFastTab2treeIdx.lookup(value), 0, formTreeItem);
                data += formTreeItem.data();

                // Set children property to true for the tree we move item to
                parentTreeItem = _toTree.getItem(_toFastTab2treeIdx.lookup(value));
                parentTreeItem.children(true);
                _toTree.setItem(parentTreeItem );

                _fromTree.delete(_index);

                // Set children property based on children left in the tree we move item from
                parentTreeItem = _fromTree.getItem(_fromFastTab2treeIdx.lookup(value));
                if (_fromTree.getChild(parentTreeItem.idx()) == 0)
                {
                    parentTreeItem.children(false);
                }
                else
                {
                    parentTreeItem.children(true);
                }
                _fromTree.setItem(parentTreeItem);
            }
        }
        else if (formTreeItem.image() == purchReApprovalPolicyRuleImageList.image(#ImageFastTab)
                && _fromFastTab2treeIdx.exists(formTreeItem.data()))
        {
            // Move fast tab and all fields included in the fast tab
            this.moveOneFastTab(_fromTree, _toTree, _fromFastTab2treeIdx, _toFastTab2treeIdx, formTreeItem);
        }
        else
        {
            tableValue = formTreeItem.data();
            tableId = tableName2id(tableValue);
            if (formTreeItem.image() == purchReApprovalPolicyRuleImageList.image(this.getTableIcon(tableId))
                && tableAvailableParent2Idx.exists(tableId))
            {
                // Move table including associated fast tabs and fields
                this.moveOneTable(_fromTree, _toTree, _fromFastTab2treeIdx, _toFastTab2treeIdx, formTreeItem);
            }
        }

        if (_fromTree.name() == treeAvailable.name())
        {
            this.addData(data);
        }
        else
        {
            this.removeData(data);
        }

        return newIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        tableHierarchy = new Map(Types::Integer, Types::Class);
        fastTabControlMap = new Map(Types::String, Types::String);
        fastTabOrderMap = new Map(Types::Integer, Types::Class);
        fastTabRoot2FormDataSourceId = new Map(Types::String, Types::Class);

        table2Field = new Map(Types::Integer, Types::Class);
        field2FastTab = new Map(Types::String, Types::Class);
        field2Data = new Map(Types::String, Types::Container);
        fieldIncludedInCompare = new Map(Types::Integer, Types::Class);
        replaceFieldLabel = new Map(Types::String, Types::String);

        inSet = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfColumns</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of columns that are displayed in the list and tree views.
    /// </summary>
    /// <returns>
    /// The number of columns shows in the list and tree views.
    /// </returns>
    int numOfColumns()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCaptionSelected</Name>
				<Source><![CDATA[
    str parmCaptionSelected(str _captionSelected = captionSelected)
    {
        return "@GLS180249";
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCaptionAvailable</Name>
				<Source><![CDATA[
    str parmCaptionAvailable(str _captionAvailable = captionAvailable)
    {
        return "@GLS180250";
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDetailsControlId</Name>
				<Source><![CDATA[
    public int parmDetailsControlId(int _detailsControlId = detailsControlId)
    {
        detailsControlId = _detailsControlId;

        return detailsControlId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHasAddAllButton</Name>
				<Source><![CDATA[
    public boolean parmHasAddAllButton(boolean _hasAddAllButton = false)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHasRemoveAllButton</Name>
				<Source><![CDATA[
    public boolean parmHasRemoveAllButton(boolean _hasRemoveAllButton = false)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a structure for tables, fast tabs and fields, used when you create the tree view.
    /// </summary>
    public void prepareData()
    {
        FormBuildDesign                 formDesign;
        ListEnumerator                  formEnumerator;
        ListEnumerator                  formDataSourceEnumerator;
        FormControlName                 fastTabControlName;
        FormBuildDataSource             formBuildDataSource;
        Set                             fastTabFields;
        int                             idx;
        str                             fastTabControlNameKey, key;
        TableId                         tableId;
        Set                             fieldsIncluded;
        SetEnumerator                   fieldsIncludedEnumerator;

        formEnumerator = this.getForms().getEnumerator();
        while (formEnumerator.moveNext())
        {
            detailsForm = new Form(formEnumerator.current(), true);
            formDesign = detailsForm.design();

            formDataSourceEnumerator = this.getFormDataSources(detailsForm).getEnumerator();

            while (formDataSourceEnumerator.moveNext())
            {
                formBuildDataSource = formDataSourceEnumerator.current();

                tableId = formBuildDataSource.table();

                fastTabControlNameKey = this.getFastTabName(formDesign, formBuildDataSource);
                fastTabControlName = conPeek(PurchReApprovalPolicyRuleFields::valueSplit(fastTabControlNameKey), 2);
                if (fastTabControlName == #FieldsWithoutFastTab)
                {
                    fastTabFields = this.getFastTabFields(tableId, #FieldsWithoutFastTab);

                    if (tableId == tableNum(AccountingDistribution))
                    {
                        // For accounting distribution a single field is added
                        this.addField2FastTab(  PurchReApprovalPolicyRuleFields::valueStr(tableId, 0),
                                                PurchReApprovalPolicyRuleFields::valueStr(tableId, #FieldsWithoutFastTab),
                                                '', fastTabFields);
                    }
                    else
                    {
                        // Iterate all root controls on the form and add them to fast tabs
                        for (idx = 1; idx <= formDesign.controlCount(); idx++)
                        {
                            this.buildFastTab(formDesign.controlNum(idx), formBuildDataSource, fastTabRoot2FormDataSourceId.lookup(fastTabControlNameKey), #FieldsWithoutFastTab, fastTabFields);
                        }
                    }

                    this.setFastTabNameMap(tableId, #FieldsWithoutFastTab, "@GLS180259", fastTabFields);
                }
                else if (fastTabControlName)
                {
                    // Iterate only the child control for the fast tab control
                    this.buildFastTab(formDesign.control(fastTabControlName), formBuildDataSource, fastTabRoot2FormDataSourceId.lookup(fastTabControlNameKey), '');
                }

                // Accounting distributions are not included in the versioning compare
                if (fieldIncludedInCompare.exists(tableId))
                {
                    // Add fields currently not associated with a fast tab, but is included in versioning
                    fieldsIncluded = fieldIncludedInCompare.lookup(tableId);

                    fastTabFields = this.getFastTabFields(tableId, #FieldsWithoutFastTab);

                    fieldsIncludedEnumerator = fieldsIncluded.getEnumerator();
                    while (fieldsIncludedEnumerator.moveNext())
                    {
                        key = PurchReApprovalPolicyRuleFields::valueStr(tableId, fieldsIncludedEnumerator.current());
                        if (!field2FastTab.exists(key))
                        {
                            this.addField2FastTab(  key,
                                                    PurchReApprovalPolicyRuleFields::valueStr(tableId, #FieldsWithoutFastTab),
                                                    '', fastTabFields);
                        }
                    }

                    this.setFastTabNameMap(tableId, #FieldsWithoutFastTab, "@GLS180259", fastTabFields);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>remove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Iterates the selected tree items in the selected field list and removes them to the available
    /// fields list.
    /// </summary>
    /// <param name="_formListNext">
    /// An enumerator that specifies the location of the next item in the form list.
    /// </param>
    protected void remove(FormListNext _formListNext = FormListNext::Selected)
    {
        int                 idx = treeSelected.getFirstSelected();
        int                 insertedAtIdx;
        List                idxList = new List(Types::Integer);
        ListEnumerator      idxListEnumerator;

        if (!this.parmOnlyViewAccess())
        {
            if (viewType == PurchreApprovalPolicyRuleViewType::List)
            {
                super(_formListNext);
            }
            else
            {
                treeSelected.lockWindowUpdate(true);
                treeAvailable.lockWindowUpdate(true);

                if (_formListNext == FormListNext::Selected)
                {
                    // Get selected tree items - GetNextSelected can not be used when we remove the current selected tree item
                    idx = treeSelected.getFirstSelected();
                    while (idx != 0)
                    {
                        idxList.addEnd(idx);
                        idx = treeSelected.getNextSelected(idx);
                    }
                }
                else
                {
                    idx = treeSelected.getRoot();
                    while (idx != 0)
                    {
                        idxList.addEnd(idx);
                        idx = treeSelected.getNextSibling(idx);
                    }
                }

                // Move tree items from left tree to right tree
                idxListEnumerator = idxList.getEnumerator();
                while (idxListEnumerator.moveNext())
                {
                    idx = idxListEnumerator.current();
                    insertedAtIdx = this.moveOneTreeItem(treeSelected, treeAvailable, fastTabSelected2treeIdx, fastTabAvailable2treeIdx, idx);
                }

                this.enableButtonsTree();

                treeAvailable.lockWindowUpdate(false);
                treeSelected.lockWindowUpdate(false);
                this.reload(AddRemove::Remove);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selected_toolTip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tooltip for the list of selected fields.
    /// </summary>
    /// <returns>
    /// The tooltip text.
    /// </returns>
    public str selected_toolTip()
    {
        return "@GLS180252";
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged_available</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the event raised when the view selection has changed.
    /// </summary>
    /// <param name="_idx">
    ///    The index of the selected list item.
    /// </param>
    /// <param name="_Data">
    ///    The data from a list item.
    /// </param>
    public void selectionChanged_available(int _idx, anytype _Data)
    {
        super(_idx, _Data);

        this.setDetailsText(_Data);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged_selected</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the event raised when the view selection has changed.
    /// </summary>
    /// <param name="_idx">
    ///    The index of the selected list item.
    /// </param>
    /// <param name="_Data">
    ///    The data from a list item.
    /// </param>
    public void selectionChanged_selected(int _idx, anytype _Data)
    {
        super(_idx, _Data);

        this.setDetailsText(_Data);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDetailsText</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the details sections with the help text for the selected item in the view or tree structure.
    /// </summary>
    /// <param name="_data">
    ///    The data from a list or tree item.
    /// </param>
    private void setDetailsText(anytype _data)
    {
        container data;

        if (field2Data.exists(_Data))
        {
            data = field2Data.lookup(_Data);
            // Get help text
            detailsText.text(conPeek(data, 4));
        }
        else
        {
            detailsText.text('');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFastTabNameMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the fast tab name map.
    /// </summary>
    /// <param name="_tableId">
    /// The table ID that contains the fast tabs.
    /// </param>
    /// <param name="_fastTabName">
    /// The name of fast tab which the field is associated.
    /// </param>
    /// <param name="_fastTabLabel">
    /// The label of the fast tab.
    /// </param>
    /// <param name="_fastTabFields">
    /// The set of fields that is associated to the fast tab specified in <paramref name="_fastTabName" />
    /// value.
    /// </param>
    private void setFastTabNameMap(TableId _tableId, str _fastTabName, str _fastTabLabel, Set _fastTabFields)
    {
        Map     fastTabNameMap;
        List    fastTabOrder;

        if (table2Field.exists(_tableId))
        {
            fastTabNameMap = table2Field.lookup(_tableId);
            table2Field.remove(_tableId);
        }
        else
        {
            fastTabNameMap = new Map(Types::String, Types::Class);
        }

        if (fastTabOrderMap.exists(_tableId))
        {
            fastTabOrder = fastTabOrderMap.lookup(_tableId);
        }
        else
        {
            fastTabOrder = new List(Types::String);
        }

        fastTabNameMap.insert(_fastTabName, _fastTabFields);
        table2Field.insert(_tableId, fastTabNameMap);

        fastTabControlMap.insert(PurchReApprovalPolicyRuleFields::valueStr(_tableId, _fastTabName), _fastTabLabel);

        fastTabOrder.addEnd(_fastTabName);
        fastTabOrderMap.insert(_tableId, fastTabOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTableResources</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a set of icons used for the tables in the tree structure.
    /// </summary>
    protected void setTableResources()
    {
        tableResources = new Set(Types::Integer);

        tableResources.add(purchReApprovalPolicyRuleImageList.image(#ImageMarkup));
        tableResources.add(purchReApprovalPolicyRuleImageList.image(#ImagePrepayment));
        tableResources.add(purchReApprovalPolicyRuleImageList.image(#ImagePurchaseHeader));
        tableResources.add(purchReApprovalPolicyRuleImageList.image(#ImagePurchaseLine));
        tableResources.add(purchReApprovalPolicyRuleImageList.image(#ImageVendPaymSchedule));
        tableResources.add(purchReApprovalPolicyRuleImageList.image(#ImagePurchaseLine));
        tableResources.add(purchReApprovalPolicyRuleImageList.image(#ImageAccountingDistribution));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setViewMode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the visible property on the list and tree view controls.
    /// </summary>
    /// <param name="_viewType">
    ///    A <c>PurchreApprovalPolicyRuleViewType</c> value for the current view state.
    /// </param>
    public void setViewMode(PurchreApprovalPolicyRuleViewType _viewType)
    {
        viewType = _viewType;

        treeAvailable.visible(_viewType == PurchreApprovalPolicyRuleViewType::Tree);
        treeSelected.visible(_viewType == PurchreApprovalPolicyRuleViewType::Tree);
        viewSelected.visible(_viewType == PurchreApprovalPolicyRuleViewType::List);
        viewAvailable.visible(_viewType == PurchreApprovalPolicyRuleViewType::List);

        if (inSet != null)
        {
            this.fill();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeSelectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the event that is raised when the tree structure selection has changed.
    /// </summary>
    /// <param name="_oldItem">
    /// The old form tree item.
    /// </param>
    /// <param name="_newItem">
    /// The new form tree item.
    /// </param>
    /// <param name="_how">
    /// The method of form tree item selection.
    /// </param>
    /// <param name="_formTreeControl">
    /// The form tree control that raised the event.
    /// </param>
    public void treeSelectionChanged(
        FormTreeItem        _oldItem,
        FormTreeItem        _newItem,
        FormTreeSelect      _how,
        FormTreeControl     _formTreeControl
        )
    {
        _formTreeControl.selectionChanged(_oldItem, _newItem, _how);

        if (_newItem
            && _newItem.image() != purchReApprovalPolicyRuleImageList.image(#ImageFastTab)
            && _newItem.image() != purchReApprovalPolicyRuleImageList.image(#ImageFastTab))
        {
            this.setDetailsText(_newItem.data());
        }
        else
        {
            detailsText.text();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchReApprovalPolicyRuleFieldList construct()
    {
        return new PurchReApprovalPolicyRuleFieldList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>PurchReApprovalPolicyRuleFieldList</c> class.
    /// </summary>
    /// <param name="_formRun">
    /// The <c>FormRun</c> object in which the view and tree structures will be added.
    /// </param>
    /// <param name="_parentControlId">
    /// The ID of a form group control where the view and tree structure will be added.
    /// </param>
    /// <param name="_detailsControlId">
    /// The ID of a form group control where detailed information about the view and tree structure will be
    /// added.
    /// </param>
    /// <returns>
    /// A new instance of the <c>PurchReApprovalPolicyRuleFieldList</c> class.
    /// </returns>
    static PurchReApprovalPolicyRuleFieldList newForm(  FormRun             _formRun,
                                                        int                 _parentControlId,
                                                        int                 _detailsControlId)
    {
        PurchReApprovalPolicyRuleFieldList sysListPanel = PurchReApprovalPolicyRuleFieldList::construct();

        sysListPanel.parmFormRun(_formRun);
        sysListPanel.parmParentId(_parentControlId);
        sysListPanel.parmDetailsControlId(_detailsControlId);
        sysListPanel.build();
        return sysListPanel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>