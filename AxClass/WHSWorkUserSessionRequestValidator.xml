<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkUserSessionRequestValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkUserSessionRequestValidator</c> validates requests against work user session state.
/// </summary>
class WHSWorkUserSessionRequestValidator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assertAgainstSessionState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Asserts request against session state check string. If assertion fails, exception is thrown.
    /// </summary>
    /// <param name = "_sessionStateCheck">Session state check string to assert against.</param>
    /// <param name = "_requestContainer">The container of the work execute request.</param>
    public static void assertAgainstSessionState(WHSWorkUserSessionStateCheck _sessionStateCheck, container _requestContainer)
    {
        WHSWorkUserSessionRequestValidator::assertSessionState(_sessionStateCheck, _requestContainer, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIdenticalStateVersions</Name>
				<Source><![CDATA[
    private static boolean isIdenticalStateVersions(str _state1, str _state2)
    {
        return subStr(_state1, 1, 5) == subStr(_state2, 1, 5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>assertSessionState</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSMobileDeviceProtocolViolationExceptionData assertSessionState(
        WHSWorkUserSessionStateCheck _sessionStateCheck,
        container _requestContainer,
        boolean _throwError)
    {
        WHSWorkUserSessionStateCheck requestSessionStateCheck = WHSWorkUserSessionStateCheckBuilder::buildFromContainerWithVersionNumber(_requestContainer);
        WHSMobileDeviceProtocolViolationExceptionData exceptionData;

        if (strCmp(_sessionStateCheck, requestSessionStateCheck))
        {
            exceptionData = WHSMobileDeviceProtocolViolationExceptionData::construct(_requestContainer);

            exceptionData.writeMobileDeviceProtocolViolationExceptionLog(requestSessionStateCheck, _sessionStateCheck);

            WHSWarehouseMobileDeviceTelemetryEventLogger::logMobileDeviceRequestViolationExeception(exceptionData);

            if (_throwError && 
                WHSWorkUserSessionRequestValidator::isIdenticalStateVersions(_sessionStateCheck, requestSessionStateCheck))
            {
                if (WHSWorkUserSessionRequestValidator::isUserLoggedInMultipleDevices(exceptionData.parmUserId(), exceptionData.parmDeviceId()))
                {
                    throw error(strFmt("@WAX736", "@WAX:MobileDeviceErrorMultiLoginDevices",
                                    "@WAX:WarehouseMobileDeviceRequestInputValidationError"
                                    + WHSMobileAppErrorCodes::UserLoginMultipleDevicesError));
                }

                throw error("@WAX:WarehouseMobileDeviceRequestInputValidationError"
                        + WHSMobileAppErrorCodes::RequestXmlPotentialTamperingError);
            }
        }

        return exceptionData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUserLoggedInMultipleDevices</Name>
				<Source><![CDATA[
    private static boolean isUserLoggedInMultipleDevices(UserId _currentUser, guid _currentDevice)
    {
        if (!_currentUser || !_currentDevice)
        {
            return false;
        }

        WHSWorkUserSession prevUserSession = WHSWorkUserSession::find(_currentUser);
        var sessionState = prevUserSession.sessionState();
        if (!prevUserSession || !sessionState.parmPass())
        {
            return false; 
        }

        WhsrfPassthrough prevPass = WHSRFPassthrough::create(sessionState.parmPass());
        if (!prevPass)
        {
            return false;
        }

        return prevPass.parmDeviceId() && (_currentDevice != prevPass.parmDeviceId());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>