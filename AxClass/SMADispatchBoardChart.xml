<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SMADispatchBoardChart</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SMADispatchBoardChart extends AVChartBuckets implements IAVChartController
{
    const Delimiter delimiter = "::";
    real aggregationFactor;
    const SMADispatchBoardChatCellState availiableCellIndicator = 'a';
    const SMADispatchBoardChatCellState bookedCellIndicator = 'b';
    const SMADispatchBoardChatCellState unavailableCellIndicator = 'c';
    const SMADispatchBoardChatCellState unavailableBookedCellIndicator = 'd';

    const str propertyNameCapacityContent = "CapacityContent";
    const str propertyNameStatus = "Status";
    const str propertyNameStatusLabel = "StatusLabel";

    str statusBooked;
    str statusBookedLabel;
    str statusAvailable;
    str statusAvailableLabel;
    str statusUnavailable;
    str statusUnavailableLabel;

    Map chartItemsMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        DictEnum dictEnum = new DictEnum(enumNum(ProjScheduleStatus));
        statusBooked = dictEnum.value2Symbol(ProjScheduleStatus::Booked);
        statusBookedLabel = dictEnum.value2Label(ProjScheduleStatus::Booked);
        statusAvailable = dictEnum.value2Symbol(ProjScheduleStatus::Available);
        statusAvailableLabel = dictEnum.value2Label(ProjScheduleStatus::Available);
        statusUnavailable = dictEnum.value2Symbol(ProjScheduleStatus::Unavailable);
        statusUnavailableLabel = dictEnum.value2Label(ProjScheduleStatus::Unavailable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChartQuery</Name>
				<Source><![CDATA[
    protected Query getChartQuery(AVTimeframeType _timescale, str _calendarId, utcdatetime _start, utcdatetime _end)
    {
        SMADispatchBoardChatQueryName queryName;
        switch (_timescale)
        {
            case AVTimeframeType::Hour:
                queryName ='SMADispatchBoardChartHourQuery';
                break;
            case AVTimeframeType::Day:
                queryName ='SMADispatchBoardChartDayQuery';
                break;
            case AVTimeframeType::Week:
                queryName ='SMADispatchBoardChartWeekQuery';
                break;
            case AVTimeframeType::Month:
                queryName ='SMADispatchBoardChartMonthQuery';
                break;
            case AVTimeframeType::Quarter:
                queryName ='SMADispatchBoardChartQuarterQuery';
                break;
            case AVTimeframeType::HalfYear:
                queryName ='SMADispatchBoardChartHalfYearQuery';
                break;
        }
        Query query = new Query(queryName);
        QueryBuildDataSource qDS = query.dataSourceNo(1);
        qDS.range(1).value(queryRange(_start, _end));
        qDS.range(2).value(queryValue(_calendarId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChart</Name>
				<Source><![CDATA[
    public AvailabilityViewChartDataContract getChart(str _collectionKey, str _start, str _end)
    {
        ResAvailabilityViewContext context = this.control().controlContext();
        aggregationFactor = context ? ResUtil::getCapacityAggregationFactor(context.CapacityAggregation()) : 1;

        ResourceRecId resource = str2int64(_collectionKey);
        AVTimeframeType timescale = this.control().timescale();
        AVTimeframe timeframe;
        utcdatetime defaultDateTime;
        utcdatetime start = AVUtil::getDateTime(_start);
        timeframe = AVTimeframe::getTimeframe(start, timescale);
        start = timeframe.Start();
        utcdatetime end = AVUtil::getDateTime(_end);
        timeframe = AVTimeframe::getTimeframe(end, timescale);
        end = timeframe.End();
        HcmWorker worker;
        GanttTmpSMA utilization;
        SmmActivities smmActivities;
        SmmActivityParentLinkTable smmActivityParentLinkTable;
        ResCalendarCapacity resCalendarCapacityStart;
        ResCalendarCapacity resCalendarCapacityEnd;
        List chartItems = new List(Types::Class);
        List tempChartItems = new List(Types::Class);
        int workerActivities = 0;
        SMAParameters smaParameters;
        int serviceActivityCategory = 0;

        smaParameters = SMAParameters::find();
        serviceActivityCategory = smaParameters.ServiceOrderActivityCategory;

        //The chat expects n cells for each worker for every time interval
        //Since multiple activities can be assigned a worker in a time interval
        //The code here ensures n cells are returned in every case ie worker has 0, 1 or mulitple activities
        while select smmActivities
        exists join  smmActivityParentLinkTable
        where        smmActivityParentLinkTable.ActivityNumber  == smmActivities.ActivityNumber
                  && smmActivityParentLinkTable.ParentType      == smmActivityParentType::ServiceOrderLine
                  && smmActivities.ResponsibleWorker            == resource
                  && smmActivities.Category                     == serviceActivityCategory
                  && smmActivities.Dispatched                   != SMADispatched::Never
                  && smmActivities.EndDateTime                  <= context.EndDateTime()
                  && smmActivities.StartDateTime                >= context.StartDateTime()

        {
            workerActivities++;
            utilization.WorkerResponsible = str2int64(_collectionKey);
            utilization.TotalWork = smmActivities.TotalWork;
            worker = HcmWorker::find(str2int64(_collectionKey));
            utilization.CalendarId = int642str(Workcalendartable::find(WorkCalendarEmployment::findCalendarIdSMA(worker.PersonnelNumber)).RecId);
            utilization.StartDateTime = smmActivities.StartDateTime;
            utilization.EndDateTime = smmActivities.EndDateTime;
            utilization.StartDate = smmActivities.startDate();
            utilization.EndDate = smmActivities.endDate();

            select firstonly resCalendarCapacityStart where resCalendarCapacityStart.Day == DateTimeUtil::newDateTime(utilization.StartDate, 0);
            select firstonly resCalendarCapacityEnd where resCalendarCapacityEnd.Day == DateTimeUtil::newDateTime(utilization.EndDate, 0);

            switch (timescale)
            {
                case AVTimeframeType::Day:
                    utilization.StartDatetime = DateTimeUtil::newDateTime(utilization.StartDate, 0);
                    utilization.EndDateTime = DateTimeUtil::newDateTime(utilization.EndDate, 0);
                    break;
                case AVTimeframeType::Week:
                    utilization.StartDatetime = resCalendarCapacityStart.Week;
                    utilization.EndDateTime = resCalendarCapacityEnd.Week;
                    break;
                case AVTimeframeType::Month:
                    utilization.StartDatetime = resCalendarCapacityStart.Month;
                    utilization.EndDateTime = resCalendarCapacityEnd.Month;
                    break;
                case AVTimeframeType::Quarter:
                    utilization.StartDatetime = resCalendarCapacityStart.Quarter;
                    utilization.EndDateTime = resCalendarCapacityEnd.Quarter;
                    break;
                case AVTimeframeType::HalfYear:
                    utilization.StartDatetime = resCalendarCapacityStart.HalfYear;
                    utilization.EndDateTime = resCalendarCapacityEnd.HalfYear;
                    break;
            }

            tempChartItems = this.resolveEntityResource(utilization, start, end);

            if (workerActivities == 1)
            {
                // Worker has (so far) only 1 activity so just use the generated activity list
                chartItems = List::merge(chartItems, tempChartItems);
            }
            else
            {
                // Worker has multiple activities so merge the new ones into the existing list
                ListIterator chartListIterator = new ListIterator(chartItems);
                while (chartListIterator.more())
                {
                    ChartItemDataContract chartItem = chartListIterator.value();
                    ChartItemDataContract chartItemTemp = chartItemsMap.lookup(chartItem.itemKey());

                    if (chartItemTemp.itemlayout() == bookedCellIndicator ||  chartItemTemp.itemlayout() == unavailableBookedCellIndicator)
                    {
                        if (chartItem.itemlayout() != chartItemTemp.itemlayout())
                        {
                            // Just copy the properties since the existing item was not booked
                            chartItem.properties(chartItemTemp.properties());
                            chartItem.itemlayout(chartItemTemp.itemlayout());
                        }
                        else
                        {
                            // Adjust the already booked value
                            this.modifyBookedCapacity(chartItem, this.extractBookedCapacity(chartItemTemp));
                        }
                    }
                    chartListIterator.next();
                }
            }
        }
        // setup blank cells in the chat, work has no activities
        if (workerActivities == 0)
        {
            utilization.WorkerResponsible = str2int64(_collectionKey);
            utilization.TotalWork = 0;
            worker = HcmWorker::find(str2int64(_collectionKey));
            utilization.CalendarId = int642str(Workcalendartable::find(WorkCalendarEmployment::findCalendarIdSMA(worker.PersonnelNumber)).RecId);
            utilization.StartDateTime = defaultDateTime;
            utilization.EndDateTime = defaultDateTime;
            utilization.StartDate = dateNull();
            utilization.EndDate = dateNull();
            chartItems = this.resolveEntityResource(utilization, start, end);
        }
        AvailabilityViewChartDataContract chart;
        chart = AvailabilityViewChartDataContract::construct();
        chart.Items(chartItems);
        return chart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extractBookedCapacity</Name>
				<Source><![CDATA[
    private real extractBookedCapacity(ChartItemDataContract _chartItem)
    {
        EntityFieldDataContract property = this.getBookedCapacityEntityField(_chartItem);
        if (property)
        {
            return property.FieldValue();
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyBookedCapacity</Name>
				<Source><![CDATA[
    private void modifyBookedCapacity(ChartItemDataContract _chartItem, real _addValue)
    {
        EntityFieldDataContract property = this.getBookedCapacityEntityField(_chartItem);
        if (property)
        {
            real bookedCapacity = property.FieldValue();
            property.FieldValue(bookedCapacity + _addValue);
        }
        else
        {
            this.addCapacityProperties(_chartItem.properties(), _addValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBookedCapacityEntityField</Name>
				<Source><![CDATA[
    private EntityFieldDataContract getBookedCapacityEntityField(ChartItemDataContract _chartItem)
    {
        ListIterator propertyListIterator = new ListIterator(_chartItem.properties());
        while (propertyListIterator.more())
        {
            EntityFieldDataContract property = propertyListIterator.value();
            if (property.FieldName() == propertyNameCapacityContent)
            {
                return property;
            }

            propertyListIterator.next();
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCapacityProperties</Name>
				<Source><![CDATA[
    private void addCapacityProperties(List _propertyList, real _capacityContent)
    {
        _propertyList.addEnd(EntityFieldDataContract::construct(propertyNameCapacityContent, _capacityContent));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addStatusProperties</Name>
				<Source><![CDATA[
    private void addStatusProperties(List _propertyList, str _status, str _statusLabel)
    {
        _propertyList.addEnd(EntityFieldDataContract::construct(propertyNameStatus, _status));
        _propertyList.addEnd(EntityFieldDataContract::construct(propertyNameStatusLabel, _statusLabel));
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveEntityResource</Name>
				<Source><![CDATA[
    public List resolveEntityResource(GanttTmpSMA _ganttTmpSMA, utcdatetime _start, utcdatetime _end)
    {
        ResCalendarCapacity resCalendarCapacity;
        utcdatetime lastTimeFrameIndex;

        List chartCellItems = new List(Types::Class);
        AVTimeframeType timescale = this.control().timescale();

        Query query = this.getChartQuery(timescale, _ganttTmpSMA.CalendarId, _start, _end);

        List chartItems = new List(Types::Class);
        chartItemsMap = new Map(Types::String, Types::Class);
        TableId tableId = tablenum(ResCalendarCapacity);
        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            resCalendarCapacity = queryRun.get(tableId);
            ChartItemDataContract chartItem = ChartItemDataContract::construct();
            str collectionKey = strfmt("%1", _ganttTmpSMA.WorkerResponsible);
            chartItem.collectionKey(collectionKey);
            utcdatetime timeframeIndex;

            switch (timescale)
            {
                case AVTimeframeType::Day:
                    timeframeIndex = resCalendarCapacity.Day;
                    break;
                case AVTimeframeType::Week:
                    timeframeIndex = resCalendarCapacity.Week;
                    break;
                case AVTimeframeType::Month:
                    timeframeIndex = resCalendarCapacity.Month;
                    break;
                default:
                    timeframeIndex = resCalendarCapacity.Hour;
                    break;
            }

            //Adding this because of the way grouping works, not needed for the Hour case(Query does not use group)
            if (timescale != AVTimeframeType::Hour)
            {
                if (timeframeIndex == lastTimeframeIndex)
                {
                    continue;
                }
                else
                {
                    lastTimeframeIndex = timeframeIndex;
                }
            }

            chartItem.timelineKey(AVUtil::getDateTimeStr(timeframeIndex));
            chartItem.setKeyFactors();

            List properties = new List(Types::Class);
            if ((timeframeIndex >= _ganttTmpSMA.StartDateTime) && (timeframeIndex <= _ganttTmpSMA.EndDateTime))
            {
                this.addCapacityProperties(properties, _ganttTmpSMA.TotalWork);

                if (resCalendarCapacity.End > 0)
                {
                    this.addStatusProperties(properties, statusBooked, statusBookedLabel);
                    chartItem.itemlayout(bookedCellIndicator);
                }
                else
                {
                    this.addStatusProperties(properties, statusUnavailable, statusUnavailableLabel);
                    chartItem.itemlayout(unavailableBookedCellIndicator);
                }
            }
            else
            {
                if (resCalendarCapacity.End > 0)
                {
                    this.addStatusProperties(properties, statusAvailable, statusAvailableLabel);
                    chartItem.itemlayout(availiableCellIndicator);
                }
                else
                {
                    this.addStatusProperties(properties, statusUnavailable, statusUnavailableLabel);
                    chartItem.itemlayout(unavailableCellIndicator);
                }
            }

            chartItem.properties(properties);
            chartCellItems.addEnd(chartItem);

            chartItemsMap.insert(chartItem.itemKey(), chartItem);
        }

        return chartCellItems;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static IAVChartController construct()
    {
        IAVChartController controller = new SMADispatchBoardChart();
        return controller;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>