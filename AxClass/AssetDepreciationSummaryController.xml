<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepreciationSummaryController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetDepreciationSummaryController</c> class is the controller for the <c>AssetDepreciationSummary</c> report.
/// </summary>
public class AssetDepreciationSummaryController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the values on the query ranges and the static parameters.
    /// </summary>
    protected void prePromptModifyContract()
    {
        AssetDepreciationSummaryContract contract;
        AssetBookTable assetBookTable;
        Range bookRange;
        Query query;
        QueryBuildDataSource qbds;

        super();

        while select BookId from assetBookTable
            where assetBookTable.CurrentOperationsTax == CurrentOperationsTax::Current
        {
            if (bookRange)
            {
                bookRange += ',';
            }

            bookRange += queryValue(assetBookTable.BookId);
        }

        query = this.getFirstQuery();
        qbds = query.dataSourceTable(tableNum(AssetBook));
        SysQuery::findOrCreateRange(qbds, fieldNum(AssetBook, BookId)).value(bookRange);
        SysQuery::findOrCreateRange(qbds, fieldNum(AssetBook, Status)).value(queryRange(AssetStatus::Open, AssetStatus::Scrapped));

        contract = this.parmReportContract().parmRdpContract() as AssetDepreciationSummaryContract;
        if (contract.parmFromDate() == dateNull())
        {
            contract.parmFromDate(DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
        }

        if (contract.parmToDate() == dateNull())
        {
            contract.parmToDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceLV00023, funcName());

        AssetDepreciationSummaryController::newArgs(_args).startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>AssetDepreciationSummaryController</c> class.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> object which is to be provided to the newly created controller instance.
    /// </param>
    /// <returns>
    /// An instance of the <c>AssetDepreciationSummaryController</c> class.
    /// </returns>
    public static AssetDepreciationSummaryController newArgs(Args _args)
    {
        AssetDepreciationSummaryController controller = new AssetDepreciationSummaryController();
        controller.parmReportName(ssrsReportStr(AssetDepreciationSummary, Report));
        controller.parmArgs(_args);
        return controller;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>