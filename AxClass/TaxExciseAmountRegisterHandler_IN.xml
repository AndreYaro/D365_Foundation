<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxExciseAmountRegisterHandler_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is the excise amount register handler class.
/// </summary>
public class TaxExciseAmountRegisterHandler_IN extends TaxExciseRegisterHandler_IN
{
    TaxExciseAmountRegister_IN        amountRegister;

    TaxModelTaxTransactionImpl_IN taxTransactionImpl;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createRegisterBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the register buffer
    /// </summary>
    /// <returns>
    /// The register buffer
    /// </returns>
    protected TaxExciseRegister_IN createRegisterBuffer()
    {
        TaxExciseRegister_IN ret;
        ExciseRG23ARegister_IN exciseRG23ARegister;
        ExciseRG23CRegister_IN exciseRG23CRegister;

        switch (taxModelExciseTaxable.getExciseDirectSettlement())
        {
            case DirectSettlement_IN::RG23A :
                ret = exciseRG23ARegister;
                break;
            case DirectSettlement_IN::RG23C :
                ret =  exciseRG23CRegister;
                break;
            default :
                ret = this.createRegisterBufferNormal();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRegisterBufferNormal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the register buffer
    /// </summary>
    /// <returns>
    /// The register buffer
    /// </returns>
    protected TaxExciseRegister_IN createRegisterBufferNormal()
    {
        TaxExciseRegister_IN ret;
        ExciseRG23ARegister_IN exciseRG23ARegister;
        ExciseRG23CRegister_IN exciseRG23CRegister;
        ExciseRG23DRegister_IN exciseRG23DRegister;

        switch (taxModelExciseTaxable.getExciseRecordType())
        {
            case ExciseRecordType_IN::RG23A :
                ret = exciseRG23ARegister;
                break;
            case ExciseRecordType_IN::RG23C :
                ret =  exciseRG23CRegister;
                break;
            case ExciseRecordType_IN::RG23D :
                ret =  exciseRG23DRegister;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExiseRegisterNumberSequenceReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the excise registration number sequence reference type.
    /// </summary>
    /// <returns>
    /// The excise registration number sequence reference type.
    /// </returns>
    protected ExciseReference_IN getExiseRegisterNumberSequenceReference()
    {
        ExciseReference_IN exciseReference;

        switch (taxModelExciseTaxable.getExciseDirectSettlement())
        {
            case DirectSettlement_IN::RG23A :
                exciseReference = ExciseReference_IN::RG23AII;
                break;
            case DirectSettlement_IN::RG23C :
                exciseReference = ExciseReference_IN::RG23CII;
                break;
            default :
                switch (taxModelExciseTaxable.getExciseRecordType())
                {
                    case ExciseRecordType_IN::RG23A :
                        exciseReference = ExciseReference_IN::RG23AII;
                        break;
                    case ExciseRecordType_IN::RG23C :
                        exciseReference = ExciseReference_IN::RG23CII;
                        break;
                    case ExciseRecordType_IN::RG23D :
                        exciseReference = ExciseReference_IN::RG23D;
                        break;
                }
            break;
        }

        return exciseReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberSequencePosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number sequence position.
    /// </summary>
    /// <returns>
    /// The position
    /// </returns>
    protected int getNumberSequencePosition()
    {
        #define.PartII(2)

        return #PartII;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the register
    /// </summary>
    public void init()
    {
        super();
        amountRegister = register as Common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefermentAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the deferment amount.
    /// </summary>
    /// <returns>
    /// Returns deferredAmount based on the ClaimPercentage defined for respective components.
    /// </returns>
    /// <remarks>
    /// Sets the deferment amount.
    /// </remarks>

    protected TaxAmount setDefermentAmount()
    {
        ExciseRG23ARegister_IN      rg23A;
        ExciseRG23CRegister_IN      rg23C;
        TaxExciseAmountRegister_IN  taxExciseAmountRegister;
        Amount                      deferredAmount;

        switch (amountRegister.ExciseRecordType)
        {
            case ExciseRecordType_IN::RG23A :
                if (taxModelExciseTaxable.getExciseDirectSettlement() == DirectSettlement_IN::RG23C)
                {
                    taxExciseAmountRegister = rg23A;
                    taxExciseAmountRegister.data(amountRegister);
                    taxExciseAmountRegister.RecoverableAmount = 0;
                    rg23A.RG23ADeferredBal = taxTransactionImpl.getDefermentAmount();
                    deferredAmount = rg23A.RG23ADeferredBal;
                    taxExciseAmountRegister.insert();
                }
                else
                {
                    rg23A = amountRegister;
                    rg23A.RG23ADeferredBal = taxTransactionImpl.getDefermentAmount();
                    deferredAmount = rg23A.RG23ADeferredBal;
                }
                break;

            case ExciseRecordType_IN::RG23C :
                if (taxModelExciseTaxable.getExciseDirectSettlement() == DirectSettlement_IN::RG23A)
                {
                    taxExciseAmountRegister = rg23C;
                    taxExciseAmountRegister.data(amountRegister);
                    taxExciseAmountRegister.RecoverableAmount = 0;
                    rg23C.RG23CDeferredBal = taxTransactionImpl.getDefermentAmount();
                    deferredAmount = rg23C.RG23CDeferredBal;
                    taxExciseAmountRegister.insert();
                }
                else
                {
                    rg23C = amountRegister;
                    rg23C.RG23CDeferredBal = taxTransactionImpl.getDefermentAmount();
                    deferredAmount = rg23C.RG23CDeferredBal;
                }
                break;
        }

        return deferredAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRegisterBasicData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the basic data for the registration.
    /// </summary>
    protected void setRegisterBasicData()
    {
        super();
        amountRegister.TransRecId = taxTransactionImpl.getRecId();
        amountRegister.ExciseRecordType = taxModelExciseTaxable.getExciseRecordType();
        if (taxTransactionImpl)
        {
            amountRegister.TaxCode = taxTransactionImpl.parmTaxCode();
            amountRegister.TaxComponentTable = TaxTable::find(amountRegister.TaxCode).TaxComponentTable_IN;
        }
        amountRegister.Item = taxModelTaxable.getItemId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRegisterData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the data to the register.
    /// </summary>
    public void setRegisterData()
    {
        super();
        if (taxTransactionImpl)
        {
            this.setTaxAmount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRegisterReferenceData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the reference data.
    /// </summary>
    protected void setRegisterReferenceData()
    {
        SalesPurchJournalLine orignalTable;
        super();
        orignalTable = taxModelTaxable.getDocumentLineOriginalTable();
        amountRegister.RefTableId = orignalTable.SourceTableId;
        amountRegister.RefRecId   = orignalTable.SourceRecId;
        amountRegister.PostedDocumentLineRecId = taxModelTaxable.getDocumentLineMainTableRecId();
        amountRegister.PostedDocumentLineTableId = taxModelTaxable.getDocumentLineMainTableId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the quantity.
    /// </summary>
    protected void setTaxAmount()
    {
        switch (taxModelTaxable.getTaxDirection())
        {
            case TaxDirection::IncomingTax :

                if (taxTransactionImpl.parmClaimPercentage())
                {
                    amountRegister.RecoverableAmount = taxTransactionImpl.getPostedTaxAmount() - this.setDefermentAmount();
                }
                else
                {
                     amountRegister.RecoverableAmount = taxTransactionImpl.getPostedTaxAmount();
                }
                break;
            case TaxDirection::OutgoingTax :
                if (taxTransactionImpl.parmClaimPercentage())
                {
                    if (taxModelExciseTaxable.getExciseDirectSettlement())
                    {
                        amountRegister.RecoverableAmount = taxTransactionImpl.getPostedTaxAmount() - this.setDefermentAmount();
                    }
                    else
                    {
                        amountRegister.PayableAmount = taxTransactionImpl.getPostedTaxAmount() - this.setDefermentAmount();
                    }
                }
                else
                {
                    if (taxModelExciseTaxable.getExciseDirectSettlement())
                    {
                        amountRegister.RecoverableAmount = taxTransactionImpl.getPostedTaxAmount();
                    }
                    else
                    {
                        amountRegister.PayableAmount = taxTransactionImpl.getPostedTaxAmount();
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxTransactionImpl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the tax transaction implements.
    /// </summary>
    /// <param name="_taxTransactionImpl">
    /// The tax transaction implements.
    /// </param>
    public void setTaxTransactionImpl(TaxModelTaxTransactionImpl_IN _taxTransactionImpl)
    {
        taxTransactionImpl = _taxTransactionImpl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the data before doing the register.
    /// </summary>
    /// <returns>
    /// True, the validation result is ok to posting register;Otherwise, false.
    /// </returns>
    public boolean validate()
    {
        ExciseRG23ARegister_IN exciseRG23ARegister;
        ExciseRG23CRegister_IN exciseRG23CRegister;
        boolean ret = true;

        ret = super();

        if (ret)
        {
            switch (taxModelExciseTaxable.getExciseDirectSettlement())
            {
                case DirectSettlement_IN::RG23A :
                    select sum(RG23ARecoverable) from exciseRG23ARegister
                        where exciseRG23ARegister.TaxRegistrationNumberTable == amountRegister.TaxRegistrationNumberTable
                            && exciseRG23ARegister.TaxComponentTable == amountRegister.TaxComponentTable;
                    if (abs(exciseRG23ARegister.RG23ARecoverable) < abs(amountRegister.RecoverableAmount))
                    {
                        ret = false;
                    }
                    break;
                case DirectSettlement_IN::RG23C :
                    select sum(RG23CRecoverable) from exciseRG23CRegister
                        where exciseRG23CRegister.TaxRegistrationNumberTable == amountRegister.TaxRegistrationNumberTable
                            && exciseRG23CRegister.TaxComponentTable == amountRegister.TaxComponentTable;
                    if (abs(exciseRG23CRegister.RG23CRecoverable) < abs(amountRegister.RecoverableAmount))
                    {
                        ret = false;
                    }
                    break;
            }
            if (!ret)
            {
                throw error(strFmt("@GLS5631",taxModelExciseTaxable.getExciseDirectSettlement()));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>