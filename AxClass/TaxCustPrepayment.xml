<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxCustPrepayment</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class TaxCustPrepayment extends Tax
{
    CustPrepaymentInvoiceCalcTax custPrepaymentInvoiceCalcTax;
    CustPrepaymentInvoiceTable custPrepaymentInvoiceTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public TaxAmountCur calc()
    {
        taxModuleType = TaxModuleType::Sales;

        if (Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Sales))
        {
            return this.calcUsingTaxIntegration();
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcUsingTaxIntegration</Name>
				<Source><![CDATA[
    private TaxAmount calcUsingTaxIntegration()
    {
        TaxIntegrationDocumentObject document = TaxIntegrationDocumentObject::constructWithRecord(custPrepaymentInvoiceCalcTax.getSource());
        this.setFieldsForTaxIntegrationDocumentObject(document);
        TaxIntegrationFacade::calculate(document);
        amountExclTaxMap = document.getAmountExcludingTax();

        return this.totalTaxAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init()
    {
        headingTableId = custPrepaymentInvoiceCalcTax.getSource().tableId;
        headingRecId = custPrepaymentInvoiceCalcTax.getSource().RecId;
        taxDate = custPrepaymentInvoiceCalcTax.getSource().InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldsForTaxIntegrationDocumentObject</Name>
				<Source><![CDATA[
    protected void setFieldsForTaxIntegrationDocumentObject(TaxIntegrationDocumentObject _document)
    {
        _document.setTransactionDate(custPrepaymentInvoiceCalcTax.invoiceDate());
        _document.setDocumentDate(custPrepaymentInvoiceCalcTax.documentDate());
        _document.setInvoiceDate(custPrepaymentInvoiceCalcTax.invoiceDate());
        _document.setHeadingTableId(this.headingTableId());
        _document.setHeadingRecId(this.headingRecId());

        _document.setSign(-1);
        _document.setSource(taxModuleType);
        _document.setBusinessProcess(TaxIntegrationBusinessProcess::Sales);
        _document.setLegacyTax(this);
        _document.setShouldSkipDocumentCharge(true);
        _document.setShouldSkipLineCharge(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForCalcTax</Name>
				<Source><![CDATA[
    [Replaceable]
    public static TaxCustPrepayment newForCalcTax(CustPrepaymentInvoiceCalcTax _calcTax)
    {
        TaxCustPrepayment taxCustPrepayment = new TaxCustPrepayment();
        taxCustPrepayment.initSource(_calcTax);

        return taxCustPrepayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSource</Name>
				<Source><![CDATA[
    private void initSource(CustPrepaymentInvoiceCalcTax _calcTax)
    {
        this.custPrepaymentInvoiceCalcTax = _calcTax;
        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    // This method is called for one line scenario cases only
    internal static TaxCustPrepayment construct(CustPrepaymentInvoiceTable _transactionTable, CustPrepaymentInvoiceLine _transactionLine, TaxGroup _taxGroup, TaxItemGroup _taxItemGroup, NoYes _post,
             LedgerVoucher _ledgerVoucher)
    {
        TaxCustPrepayment taxCustPrepayment = new TaxCustPrepayment();
        taxCustPrepayment.initValues(_transactionTable, _transactionLine, _taxGroup, _taxItemGroup, _post, _ledgerVoucher);
        return taxCustPrepayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    private void initValues(CustPrepaymentInvoiceTable _transactionTable, CustPrepaymentInvoiceLine _transactionLine, TaxGroup _taxGroup, TaxItemGroup _taxItemGroup, NoYes _post,
             LedgerVoucher _ledgerVoucher)
    {
        post = _post;
        voucher = _ledgerVoucher.lastVoucher();
        taxModuleType = TaxModuleType::Sales;
        headingRecId = _transactionLine.RecId;
        headingTableId = _transactionLine.TableId;
        custPrepaymentInvoiceTable = _transactionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLineInInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is an override of insertLineInInternal method in <c>Tax</c> class.
    /// This is done to handle the pass the dimension values to tax line posting.
    /// </summary>
    /// <param name = "_baseAmount"></param>
    /// <param name = "_baseQty"></param>
    /// <param name = "_baseUnit"></param>
    /// <param name = "_itemId"></param>
    /// <param name = "_unitAmount"></param>
    /// <param name = "_dimensionDefault"></param>
    /// <param name = "_operationLedgerDimension"></param>
    /// <param name = "_operationPostingType"></param>
    /// <param name = "_exchRate_W"></param>
    /// <param name = "_vatDueDate_W"></param>
    protected void insertLineInInternal(TaxBase                _baseAmount,
                                        TaxBase                _baseQty,
                                        UnitOfMeasureSymbol    _baseUnit,
                                        ItemId                 _itemId,
                                        TaxBase                _unitAmount,
                                        DimensionDefault       _dimensionDefault,
                                        LedgerDimensionAccount _operationLedgerDimension,
                                        LedgerPostingType      _operationPostingType = LedgerPostingType::None
                                        ,ExchRate            _exchRate_W = 0,
                                        VatDueDate_W        _vatDueDate_W = dateNull()
                                        )
    {
        if (custPrepaymentInvoiceTable)
        {
            super(_baseAmount, _baseQty, _baseUnit, _itemId, _unitAmount, custPrepaymentInvoiceTable.DefaultDimension, _operationLedgerDimension, _operationPostingType, _exchRate_W, _vatDueDate_W);            
        }
        else
        {
            super(_baseAmount, _baseQty, _baseUnit, _itemId, _unitAmount, _dimensionDefault, _operationLedgerDimension, _operationPostingType, _exchRate_W, _vatDueDate_W);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>