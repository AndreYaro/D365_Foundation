<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSShipConsolidationPolicyTypeProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSShipConsolidationPolicyTypeProvider</c> class is the abstract base class for shipment consolidation policy types.
/// </summary>
/// <remarks>The sub-classes must not contain any transient state, as the instance will be reused for performance reasons.</remarks>
public abstract class WHSShipConsolidationPolicyTypeProvider
{
    private WHSShipConsolidationPolicyType policyType;
    private Map mandatoryShipConsolidationPolicyFieldCache;
    private Map forbiddenShipConsolidationPolicyFieldCache;
    private Map defaultShipConsolidationPolicyFieldCache;
    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>singletonFromType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the singleton instance of a <c>WHSShipConsolidationPolicyTypeProvider</c> class based on a <c>WHSShipConsolidationPolicyType</c> enum.
    /// </summary>
    /// <param name = "_policyType">The type enum determining the sub-class.</param>
    /// <returns>A strategy instance; or null.</returns>
    [Hookable(false)]
    public static WHSShipConsolidationPolicyTypeProvider singletonFromType(WHSShipConsolidationPolicyType _policyType)
    {
        WHSShipConsolidationPolicyTypeStrategyFactoryAttribute attribute = new WHSShipConsolidationPolicyTypeStrategyFactoryAttribute(_policyType);
        WHSShipConsolidationPolicyTypeProvider instance = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WHSShipConsolidationPolicyTypeProvider), attribute) as WHSShipConsolidationPolicyTypeProvider;
        
        if (instance)
        {
            instance.policyType = _policyType;
        }
        
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipmentConsolidationPolicyCriteriaQueryName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the default query to use for shipment consolidation policy criteria.
    /// </summary>
    /// <returns>
    /// The name of the query.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Exception is thrown if the work type is not supported.
    /// </exception>
    public abstract QueryName shipmentConsolidationPolicyCriteriaQueryName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipmentConsolidationPolicyProcessQueryName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the default query to use for shipment consolidation process.
    /// </summary>
    /// <returns>
    /// The name of the query.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Exception is thrown if the work type is not supported.
    /// </exception>
    public abstract QueryName shipmentConsolidationPolicyProcessQueryName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>workTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns related work trans type.
    /// </summary>
    /// <returns>Work trans type</returns>
    public abstract WHSWorkTransType workTransType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipConsolidationQueryBuilder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns new instance of the <c>WHSShipConsolidationQueryBuilder</c> class.
    /// </summary>
    /// <returns>New instance of the <c>WHSShipConsolidationQueryBuilder</c> class.</returns>
    protected internal abstract WHSShipConsolidationQueryBuilder getShipConsolidationQueryBuilder()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mandatoryShipConsolidationPolicyFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the set of mandatory shipment consolidation policy fields.
    /// </summary>
    /// <param name="_shipConsolidationPolicy">A shipment consolidation policy.</param>
    /// <returns>
    /// The set of mandatory shipment consolidation policy fields.
    /// </returns>
    [Hookable(false)]
    public final Set mandatoryShipConsolidationPolicyFields(WHSShipConsolidationPolicy _shipConsolidationPolicy)
    {
        if (!mandatoryShipConsolidationPolicyFieldCache)
        {
            mandatoryShipConsolidationPolicyFieldCache = new Map(Types::Int64, Types::Class);
        }

        int64 cacheKey = _shipConsolidationPolicy.RecId;
        if (!mandatoryShipConsolidationPolicyFieldCache.exists(cacheKey))
        {
            mandatoryShipConsolidationPolicyFieldCache.insert(cacheKey, this.initializeMandatoryShipConsolidationPolicyFields(_shipConsolidationPolicy));
        }

        return mandatoryShipConsolidationPolicyFieldCache.lookup(cacheKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeMandatoryShipConsolidationPolicyFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the set of mandatory shipment consolidation policy fields.
    /// </summary>
    /// <param name="_shipConsolidationPolicy">A shipment consolidation policy.</param>
    /// <returns>
    /// The set of mandatory shipment consolidation policy fields.
    /// </returns>
    protected Set initializeMandatoryShipConsolidationPolicyFields(WHSShipConsolidationPolicy _shipConsolidationPolicy)
    {
        return this.fillMandatoryShipConsolidationPolicyFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillMandatoryShipConsolidationPolicyFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the set of mandatory shipment consolidation policy fields.
    /// </summary>
    /// <returns>
    /// The set of mandatory shipment consolidation policy fields.
    /// </returns>
    protected Set fillMandatoryShipConsolidationPolicyFields()
    {
        Set policyFields = new Set(Types::Container);

        return policyFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forbiddenShipConsolidationPolicyFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the set of forbidden shipment consolidation policy fields.
    /// </summary>
    /// <param name="_shipConsolidationPolicy">A shipment consolidation policy.</param>
    /// <returns>
    /// The set of forbidden shipment consolidation policy fields.
    /// </returns>
    [Hookable(false)]
    public final Set forbiddenShipConsolidationPolicyFields(WHSShipConsolidationPolicy _shipConsolidationPolicy)
    {
        if (!forbiddenShipConsolidationPolicyFieldCache)
        {
            forbiddenShipConsolidationPolicyFieldCache = new Map(Types::Int64, Types::Class);
        }

        int64 cacheKey = _shipConsolidationPolicy.RecId;
        if (!forbiddenShipConsolidationPolicyFieldCache.exists(cacheKey))
        {
            forbiddenShipConsolidationPolicyFieldCache.insert(cacheKey, this.initializeForbiddenShipConsolidationPolicyFields(_shipConsolidationPolicy));
        }

        return forbiddenShipConsolidationPolicyFieldCache.lookup(cacheKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeForbiddenShipConsolidationPolicyFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the set of forbidden shipment consolidation policy fields.
    /// </summary>
    /// <param name="_shipConsolidationPolicy">A shipment consolidation policy.</param>
    /// <returns>
    /// The set of forbidden shipment consolidation policy fields.
    /// </returns>
    protected Set initializeForbiddenShipConsolidationPolicyFields(WHSShipConsolidationPolicy _shipConsolidationPolicy)
    {
        return this.fillForbiddenShipConsolidationPolicyFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillForbiddenShipConsolidationPolicyFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the set of forbidden shipment consolidation policy fields.
    /// </summary>
    /// <returns>
    /// The set of forbidden shipment consolidation policy fields.
    /// </returns>
    protected Set fillForbiddenShipConsolidationPolicyFields()
    {
        Set policyFields = new Set(Types::Container);

        policyFields.add([tableNum(WHSShipmentTable), fieldNum(WHSShipmentTable, ShipmentId)]);
        policyFields.add([tableNum(WHSShipmentTable), fieldNum(WHSShipmentTable, ShipmentStatus)]);
        policyFields.add([tableNum(WHSShipmentTable), fieldNum(WHSShipmentTable, ShipConsolidationPolicy)]);
        policyFields.add([tableNum(WHSShipmentTable), fieldNum(WHSShipmentTable, WorkTransType)]);
        policyFields.add([tableNum(WHSShipmentTable), fieldNum(WHSShipmentTable, WaveId)]);
        policyFields.add([tableNum(WHSShipmentTable), fieldNum(WHSShipmentTable, LoadId)]);

        policyFields.add([tableNum(WHSLoadLine), fieldNum(WHSLoadLine, ShipmentId)]);
        policyFields.add([tableNum(WHSLoadLine), fieldNum(WHSLoadLine, LoadId)]);
        policyFields.add([tableNum(WHSLoadLine), fieldNum(WHSLoadLine, ShipConsolidationPolicy)]);

        return policyFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultShipConsolidationPolicyFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the set of default shipment consolidation policy fields.
    /// </summary>
    /// <param name="_shipConsolidationPolicy">A shipment consolidation policy.</param>
    /// <returns>
    /// The set of default shipment consolidation policy fields.
    /// </returns>
    [Hookable(false)]
    public final Set defaultShipConsolidationPolicyFields(WHSShipConsolidationPolicy _shipConsolidationPolicy)
    {
        if (!defaultShipConsolidationPolicyFieldCache)
        {
            defaultShipConsolidationPolicyFieldCache = new Map(Types::Int64, Types::Class);
        }

        int64 cacheKey = _shipConsolidationPolicy.RecId;

        if (!defaultShipConsolidationPolicyFieldCache.exists(cacheKey))
        {
            defaultShipConsolidationPolicyFieldCache.insert(cacheKey, this.initializeDefaultShipConsolidationPolicyFields(_shipConsolidationPolicy));
        }

        return defaultShipConsolidationPolicyFieldCache.lookup(cacheKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDefaultShipConsolidationPolicyFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the set of default shipment consolidation policy fields.
    /// </summary>
    /// <param name="_shipConsolidationPolicy">A shipment consolidation policy.</param>
    /// <returns>
    /// The set of default shipment consolidation policy fields.
    /// </returns>
    protected Set initializeDefaultShipConsolidationPolicyFields(WHSShipConsolidationPolicy _shipConsolidationPolicy)
    {
        return this.fillDefaultShipConsolidationPolicyFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDefaultShipConsolidationPolicyFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the set of default shipment consolidation policy fields.
    /// </summary>
    /// <returns>
    /// The set of default shipment consolidation policy fields.
    /// </returns>
    protected Set fillDefaultShipConsolidationPolicyFields()
    {
        Set policyFields = this.fillMandatoryShipConsolidationPolicyFields();

        return policyFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetCaches</Name>
				<Source><![CDATA[
    private void resetCaches()
    {
        mandatoryShipConsolidationPolicyFieldCache = null;
        forbiddenShipConsolidationPolicyFieldCache = null;
        defaultShipConsolidationPolicyFieldCache = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>flushAllCaches</Name>
				<Source><![CDATA[
    /// <summary>
    /// Flushes all caches.
    /// </summary>
    internal static void flushAllCaches()
    {
        SysDictEnum dictEnum = SysDictEnum::newName(enumStr(WHSShipConsolidationPolicyType));
        Enumerator enumValues = dictEnum.enumerationSet().getEnumerator();
        
        while (enumValues.moveNext())
        {
            WHSShipConsolidationPolicyType policyType = enumValues.current();
            WHSShipConsolidationPolicyTypeProvider provider = WHSShipConsolidationPolicyTypeProvider::singletonFromType(policyType);
            if (provider)
            {
                provider.resetCaches();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>WHSShipConsolidationPolicy_onUpdated</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(WHSShipConsolidationPolicy), DataEventType::Updated)]
    public static void WHSShipConsolidationPolicy_onUpdated(Common _sender, DataEventArgs _eventArgs)
    {
        WHSShipConsolidationPolicyTypeProvider::flushAllCaches();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>