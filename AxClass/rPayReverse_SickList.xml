<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayReverse_SickList</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rPayReverse_SickList extends RPayReverse_Average
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canReverse</Name>
				<Source><![CDATA[
        protected boolean canReverse()
    {
        boolean                         ret;
        RPayAverageEarnEmplPeriodTable  rPayAverageEarnEmplPeriodTable;
        RPayAverageEarnEngine_SickList  rPayAverageEarnEngine_SickList;

        ret = super();

        if (ret)
        {
            rPayAverageEarnEmplPeriodTable = common;

            rPayAverageEarnEngine_SickList = new RPayAverageEarnEngine_SickList(rPayAverageEarnEmplPeriodTable.EmplId,
                                                                                rPayAverageEarnEmplPeriodTable.rPayAverageEarnCode,
                                                                                rPayAverageEarnEmplPeriodTable.AverageEarnCalcPeriod);

            rPayAverageEarnEngine_SickList.rPayAverageEarnEmplPeriodTable(rPayAverageEarnEmplPeriodTable);
            ret = rPayAverageEarnEngine_SickList.disributeRestYearDays(dateStartYr(rPayAverageEarnEmplPeriodTable.StartDate), true);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMaxPeriod</Name>
				<Source><![CDATA[
        public ReportPeriod_RU parmMaxPeriod(ReportPeriod_RU _maxPeriod = maxPeriod)
    {
        maxPeriod = _maxPeriod;

        return maxPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMinPeriod</Name>
				<Source><![CDATA[
        public ReportPeriod_RU parmMinPeriod(ReportPeriod_RU _minPeriod = minPeriod)
    {
        minPeriod = _minPeriod;

        return minPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecalcSickListId</Name>
				<Source><![CDATA[
        public RPaySickListId parmRecalcSickListId(RPaySickListId _recalcSickListId = recalcSickListId)
    {
        recalcSickListId = _recalcSickListId;

        return recalcSickListId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateTbl</Name>
				<Source><![CDATA[
        public boolean parmUpdateTbl(boolean _updateTbl = updateTbl)
    {
        updateTbl = _updateTbl;

        return updateTbl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rPayAverageEarnEmplPeriodTable</Name>
				<Source><![CDATA[
        public void rPayAverageEarnEmplPeriodTable(RPayAverageEarnEmplPeriodTable  _rPayAverageEarnEmplPeriodTableNew)
    {
        rPayAverageEarnEmplPeriodTableNew = _rPayAverageEarnEmplPeriodTableNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runReverse</Name>
				<Source><![CDATA[
        void runReverse()
    {
        RPayAverageEarnTrans            rPayAverageEarnTransOrig;
        RPayAverageEarnTrans            rPayAverageEarnTransNew;
        RPayAverageEarnValue            rPayAverageEarnValueOrig;
        RPayAverageEarnValue            rPayAverageEarnValueNew;
        RPayTrans                       rPayTransOrig;
        RPayEmplPeriodTrans             rPayEmplPeriodTransOrig;
        RPayAverageEarnEngine_SickList  rPayAverageEarnEngine_SickList;
        boolean                         createTransLink;

        void initFields()
        {
            rPayAverageEarnEmplPeriodTableNew.PayPeriod       = RPayParameters::payPeriod(rPayAverageEarnEmplPeriodTableNew.EmplId);
            rPayAverageEarnEmplPeriodTableNew.CorrectedPeriod = rPayReverseMap.CorrectedPeriod;
            rPayAverageEarnEmplPeriodTableNew.DayNumber       = rPayReverseMap.DayNumber * (-1);
            rPayAverageEarnEmplPeriodTableNew.SumOnHand       = rPayReverseMap.SumOnHand * (-1);

            rPayAverageEarnEmplPeriodTableNew.CorrectedSickListId   = rPayAverageEarnEmplPeriodTableNew.RpaySickListId;
            rPayAverageEarnEmplPeriodTableNew.RecalcSickListId      = recalcSickListId;
        }

        if (rPayAverageEarnEmplPeriodTableNew)
        {
            initFields();
            rPayAverageEarnEmplPeriodTableNew.update();
            createTransLink = false;
        }
        else
        {
            rPayAverageEarnEmplPeriodTableNew.data(common);
            initFields();
            rPayAverageEarnEmplPeriodTableNew.insert();
            createTransLink = true;
        }

        if (createTransLink)
        {
            this.createSourceTransLink(common, rPayAverageEarnEmplPeriodTableNew);
        }

        if (this.parmUpdateTbl())
        {
            this.updateSpecTime(rPayAverageEarnEmplPeriodTableNew);
        }

        rPayAverageEarnEngine_SickList = new RPayAverageEarnEngine_SickList(rPayAverageEarnEmplPeriodTableNew.EmplId,
                                                                            rPayAverageEarnEmplPeriodTableNew.rPayAverageEarnCode,
                                                                            rPayAverageEarnEmplPeriodTableNew.AverageEarnCalcPeriod);

        rPayAverageEarnEngine_SickList.rPayAverageEarnEmplPeriodTable(rPayAverageEarnEmplPeriodTableNew);

        while select rPayTransOrig
            where rPayTransOrig.SourceTableId == rPayReverseMap.TableId &&
                  rPayTransOrig.SourceRecId   == rPayReverseMap.RecId   &&
                  rPayTransOrig.SourceDate    >= minPeriod              &&
                  (! maxPeriod                                          ||
                   rPayTransOrig.SourceDate   <= maxPeriod)
        {
            this.createReversePayTrans(rPayTransOrig, rPayAverageEarnEmplPeriodTableNew);
        }

        while select rPayAverageEarnTransOrig
            where rPayAverageEarnTransOrig.AverageEarnEmplPeriodRecId == common.RecId
        {
            rPayAverageEarnTransNew.data(rPayAverageEarnTransOrig);
            rPayAverageEarnTransNew.AverageEarnEmplPeriodRecId = rPayAverageEarnEmplPeriodTableNew.RecId;
            rPayAverageEarnTransNew.insert();
        }

        while select rPayAverageEarnValueOrig
            where rPayAverageEarnValueOrig.AverageEarnEmplPeriodRecid == common.RecId
        {
            rPayAverageEarnValueNew.data(rPayAverageEarnValueOrig);
            rPayAverageEarnValueNew.AverageEarnEmplPeriodRecid = rPayAverageEarnEmplPeriodTableNew.RecId;
            rPayAverageEarnValueNew.PayDayHour                 = rPayAverageEarnValueOrig.PayDayHour * (-1);
            rPayAverageEarnValueNew.Amount                     = rPayAverageEarnValueOrig.Amount * (-1);
            rPayAverageEarnValueNew.IsSourceLine               = rPayAverageEarnEmplPeriodTableNew.RecalcSickListId &&
                                                                 (rPayAverageEarnValueNew.PayPeriod < minPeriod ||
                                                                  rPayAverageEarnValueNew.PayPeriod > maxPeriod) ?
                                                                 NoYes::Yes : NoYes::No;
            rPayAverageEarnValueNew.insert();

            if (rPayAverageEarnEmplPeriodTableNew.RpayIllType != RPayIllType::ChildVacation)
            {
                while select rPayTransOrig
                    where rPayTransOrig.SourceTableId == rPayAverageEarnValueOrig.TableId &&
                          rPayTransOrig.SourceRecId   == rPayAverageEarnValueOrig.RecId   &&
                          (! rPayAverageEarnEmplPeriodTableNew.RecalcSickListId           ||
                           (rPayTransOrig.SourceDate    >= minPeriod                      &&
                           (! maxPeriod || rPayTransOrig.SourceDate   <= maxPeriod)))
                {
                    this.createReversePayTrans(rPayTransOrig, rPayAverageEarnValueNew);
                }
            }
        }

        if (rPayAverageEarnEmplPeriodTableNew.RpayIllType == RPayIllType::ChildVacation)
        {
            while select * from rPayEmplPeriodTransOrig
                where rPayEmplPeriodTransOrig.AverageEarnEmplPeriodRecId == common.RecId
            {
                while select rPayTransOrig
                    where rPayTransOrig.SourceTableId == rPayEmplPeriodTransOrig.TableId  &&
                          rPayTransOrig.SourceRecId   == rPayEmplPeriodTransOrig.RecId    &&
                          rPayTransOrig.PayPeriod     >= minPeriod                        &&
                          (! maxPeriod                                                    ||
                           rPayTransOrig.PayPeriod    <= maxPeriod)
                {
                    this.createReversePayTrans(rPayTransOrig, rPayAverageEarnEmplPeriodTableNew);
                }
            }
        }

        rPayAverageEarnEngine_SickList.disributeRestYearDays(dateStartYr(rPayAverageEarnEmplPeriodTableNew.StartDate), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static RPayReverse_Average construct()
    {
        return new RPayReverse_Average();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>