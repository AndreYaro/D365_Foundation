<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSalesByDiscountReportDataProviderV2</Name>
	<SourceCode>
		<Declaration><![CDATA[
using ACM = Microsoft.Dynamics.AX.Analytics.CalculationModel;

/// <summary>
/// The <c>RetailSalesByDiscountReportDataProvider</c> class is the data provider
/// class for retail sales by discount SSRS report.
/// </summary>
[SRSReportParameterAttribute(classstr(RetailSalesByDiscountReportDataContract))]
class RetailSalesByDiscountReportDataProviderV2 extends RetailSrsReportDataProviderBase
{
    RetailSalesByDiscountReportTable t;
    RetailSalesByDiscountReportDataContract dc;

    ACM.DynamicMeasureDefinition discountAmount;
    ACM.DynamicMeasureDefinition netAmountBeforeDiscount;
    ACM.DynamicMeasureDefinition qty;
    ACM.NumericExpression discountPercentage;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        discountAmount = new ACM.DynamicMeasureDefinition(
            tableStr(RetailSalesByDiscountViewV2),
            fieldStr(RetailSalesByDiscountViewV2, Amount),
            ACM.Aggregation::Sum
        );
        qty = new ACM.DynamicMeasureDefinition(
            tableStr(RetailSalesByDiscountViewV2),
            fieldStr(RetailSalesByDiscountViewV2, qty),
            ACM.Aggregation::Sum
        );
        netAmountBeforeDiscount = new ACM.DynamicMeasureDefinition(
            tableStr(RetailSalesByDiscountViewV2),
            fieldStr(RetailSalesByDiscountViewV2, netAmountBeforeDiscount),
            ACM.Aggregation::Sum
        );
        ACM.LogicalExpression isPreDiscountAmountZero = netAmountBeforeDiscount.CompareEquals(0);
        discountPercentage = new ACM.If(
            isPreDiscountAmountZero,
            ACM.Null::ConstValue,
            discountAmount.Divide(netAmountBeforeDiscount)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called by the SSRS framework to bring back data. It gets called after processReport.
    /// </summary>
    /// <returns>table buffer</returns>
    [SRSReportDataSetAttribute(tableStr(RetailSalesByDiscountReportTable))]
    public RetailSalesByDiscountReportTable getTable()
    {
        select t;
        return t;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    Provides the ability to write the report business logic. This method will be called by SSRS at
    ///    runtime. The method should compute data and populate the data tables that will be returned to
    ///    SSRS.Note that this is a framework class. Customizing this class may cause problems with future
    ///    upgrades to the software.
    /// </remarks>
    public void processReport()
    {
        try
        {
            SysQueryRun::ExecuteInManagedStack(true);

            dc = this.parmDataContract();
            date start = dc.parmFromDate();
            date end = dc.parmToDate();

            this.InsertChannelsToTmpTable(dc.parmHierarchyRelationId());
            Query q = new Query();
            QueryBuildDataSource ds = q.addDataSource(tableNum(RetailSalesByDiscountViewV2));

            ds.addSelectionFieldWithAlias('OfferId', fieldNum(RetailSalesByDiscountViewV2, OfferId));
            ds.addSelectionFieldWithAlias('ManualDiscount', fieldNum(RetailSalesByDiscountViewV2, ManualDiscountType));
            ds.addSelectionFieldWithAlias('Name', fieldNum(RetailSalesByDiscountViewV2, Name));
            ds.addCalculationField(discountAmount, 'discountAmount');
            ds.addCalculationField(discountPercentage, 'discountPercentage');
            ds.addCalculationField(qty, 'qty');
            ds.addCalculationField(netAmountBeforeDiscount, 'netAmountBeforeDiscount');

            ds.addGroupByField(fieldNum(RetailSalesByDiscountViewV2, OfferId));
            ds.addGroupByField(fieldNum(RetailSalesByDiscountViewV2, Name));
            ds.addGroupByField(fieldNum(RetailSalesByDiscountViewV2, ManualDiscountType));

            ds.addRange(fieldNum(RetailSalesByDiscountViewV2, transDate)).value(this.buildDateRangeForSpecifiedField(start, end, fieldStr(RetailSalesByDiscountViewV2, transDate)));

            //Add join with RetailReportChannelTable.
            this.JoinChannelFilter(ds, fieldNum(RetailSalesByDiscountViewV2, Channel));

            this.addOrderBy(ds);
            q.topRows(dc.parmTopCount());

            QueryRun::runAndPopulate(q, t, this.buildMapping());
        }
        finally
        {
            SysQueryRun::ExecuteInManagedStack(false);
        }

        this.ClearChannelFilterTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build mapping between query result and temp table buffer.
    /// </summary>
    /// <returns>Mapping</returns>
    private Map buildMapping()
    {
        Map m = new Map(Types::String, Types::String);
        m.insert('OfferId', fieldStr(RetailSalesByDiscountReportTable, DiscountId));
        m.insert('Name', fieldStr(RetailSalesByDiscountReportTable, DiscountName));
        m.insert('discountAmount', fieldStr(RetailSalesByDiscountReportTable, DiscountAmount));
        m.insert('discountPercentage', fieldStr(RetailSalesByDiscountReportTable, DiscountPercentage));
        m.insert('netAmountBeforeDiscount', fieldStr(RetailSalesByDiscountReportTable, SalesAmountBeforeDiscount));
        m.insert('qty', fieldStr(RetailSalesByDiscountReportTable, QuantityApplied));
        m.insert('ManualDiscount', fieldStr(RetailSalesByDiscountReportTable, ManualDiscountType));
        return m;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOrderBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Apply order by clause to datasource based on paramters.
    /// </summary>
    /// <param name = "ds">target datasource</param>
    private void addOrderBy(QueryBuildDataSource ds)
    {
        switch (dc.parmOrderBy())
        {
            case RetailDiscountReportViewMeasure::DiscountAmount:
                ds.addOrderByCalculationField(discountAmount, SortOrder::Ascending);
                break;
            case RetailDiscountReportViewMeasure::DiscountPercentage:
                ds.addOrderByCalculationField(discountPercentage, SortOrder::Descending);
                break;
            default:
                throw Global::error("@Retail:RetailReportOrderByNotSupported");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>