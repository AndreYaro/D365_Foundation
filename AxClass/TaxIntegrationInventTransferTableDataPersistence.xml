<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationInventTransferTableDataPersistence</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationInventTransferTableDataPersistence</c> class persists data to <c>InventTransferTable</c>, etc.
/// </summary>
[TaxIntegrationDataPersistence(tableStr(InventTransferTable))]
public class TaxIntegrationInventTransferTableDataPersistence
    extends TaxIntegrationAbstractDataPersistenceTemplate
{
    protected InventTransferTable inventTransferTable;
    protected InventTransferLine inventTransferLine;
    protected Map orderLineCacheMap = new Map(Types::Container, Types::Container);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the document.
    /// </summary>
    /// <returns>The query for the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentQueryObject()
    {
        if (TaxIntegrationConstructWithSourceRecordInventoryFlight::instance().isEnabled()
             && document.getLocalRecord())
        {
            inventTransferTable = document.getLocalRecord();
            inventTransferTable.selectForUpdate(true);
            return null;
        }
        else
        {
            return SysDaQueryObjectBuilder::from(this.inventTransferTable)
                .forUpdate()
                .where(this.inventTransferTable, fieldStr(InventTransferTable, RecId)).isEqualToLiteral(this.document.getLocalRecId())
                .toSysDaQueryObject();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the lines of the document.
    /// </summary>
    /// <returns>The query for the lines of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getLineQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.inventTransferLine)
            .forUpdate()
            .where(this.inventTransferLine, fieldStr(InventTransferLine, TransferId)).isEqualToLiteral(this.inventTransferTable.TransferId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of the document.
    /// </summary>
    /// <returns>The query for the charges of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentChargeQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.markupTransOfDocument)
            .forUpdate()
            .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransTableId)).isEqualToLiteral(this.inventTransferTable.TableId)
            .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransRecId)).isEqualToLiteral(this.inventTransferTable.RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of each line.
    /// </summary>
    /// <returns>The query for the charges of each line.</returns>
    [Replaceable]
    protected SysDaQueryObject getLineChargeQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.markupTransOfLine)
            .forUpdate()
            .where(this.markupTransOfLine, fieldStr(MarkupTrans, TransTableId)).isEqualToLiteral(this.inventTransferLine.TableId)
            .where(this.markupTransOfLine, fieldStr(MarkupTrans, TransRecId)).isEqualToLiteral(this.inventTransferLine.RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current line of the document.
    /// </summary>
    /// <returns>The current line of the document</returns>
    protected TaxIntegrationLineObject getLine()
    {
        TaxIntegrationLocalId localId = TaxIntegrationAbstractRecordObject::getLocalIdStatic(this.inventTransferLine.TableId, this.inventTransferLine.RecId);
        if (!document.checkLine(localId))
        {
            document.setException(new System.InvalidOperationException(
                strFmt("@TaxIntegrationException:LineOnDocumentNotFound", localId, document.getLocalId())));
            return null;
        }

        return document.getLine(localId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the document.
    /// </summary>
    /// <returns>Always true.</returns>
    protected boolean saveDocument()
    {
        TaxIntegrationListCodeUtility::saveListCodeFromDocumentToTable(document, inventTransferTable);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the current line of the document by saving the current line of the document.
    /// </summary>
    /// <returns>The current line of the document.</returns>
    protected TaxIntegrationLineObject processLine()
    {
        TaxIntegrationLineObject local = this.getLine();
        if (local)
        {
            TaxGroup taxGroup = local.getTaxGroup();
            TaxItemGroup taxItemGroup = local.getTaxItemGroup();
            container cacheKey = [inventTransferLine.RecId, document.getBusinessProcessDetail()];
            if (orderLineCacheMap.exists(cacheKey))
            {
                TaxGroup cachedTaxGroup;
                TaxItemGroup cachedTaxItemGroup;
                [cachedTaxGroup, cachedTaxItemGroup] = orderLineCacheMap.lookup(cacheKey);

                if (cachedTaxGroup != taxGroup || cachedTaxItemGroup != taxItemGroup)
                {
                    warning("@TaxIntegrationException:MultipleTaxGroupForOneTransactionLine");
                }

                inventTransferLine.reread();
            }
            else
            {
                orderLineCacheMap.insert(cacheKey, [taxGroup, taxItemGroup]);
            }
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the current line of the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    /// <returns>true if the operation is successful; otherwise, false.</returns>
    protected boolean saveLine(TaxIntegrationLineObject _line)
    {
        TaxGroup taxGroup = _line.getTaxGroup();
        TaxItemGroup taxItemGroup = _line.getTaxItemGroup();

        switch (document.getBusinessProcessDetail())
        {
            case TaxIntegrationBusinessProcessDetail::Shipment:
                inventTransferLine.TaxGroupShipment = taxGroup;
                inventTransferLine.TaxItemGroupShipment = taxItemGroup;
                break;
            case TaxIntegrationBusinessProcessDetail::Receive:
                inventTransferLine.TaxGroupReceipt = taxGroup;
                inventTransferLine.TaxItemGroupReceipt = taxItemGroup;
                break;
        }
        inventTransferLine.doUpdate();
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>