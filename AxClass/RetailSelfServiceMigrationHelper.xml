<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSelfServiceMigrationHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailSelfServiceMigrationHelper</c> class provides methods that are being used to migrate data from tables
/// <c>RetailSelfServicePackageInfo</c>, <c>RetailSharedParameters</c>, <c>RetailDefaultChannelPackages</c>, and
/// <c>RetailDefaultCompanyPackages</c> to new tables <c>RetailSelfServiceMergedPackages</c> and <c>RetailSelfServiceDefaultPackages</c>.
/// </summary>
internal class RetailSelfServiceMigrationHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateMergedPackageReferenceFromSelfServicePackageReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Migrates or populates a given record from a table that has legacy field reference (usually the field name is 'SelfServicePackage')
    /// to a new field (field name is MergedSelfServicePackageReference)
    /// </summary>
    /// <param name = "record">The record instance.</param>
    /// <param name = "selfServicePackageColumnIdentifier">The legacy field identifier.</param>
    /// <param name = "mergedPackageColumnIdentifier">The new field identifier.</param>
    internal static void populateMergedPackageReferenceFromSelfServicePackageReference(Common record, FieldId selfServicePackageColumnIdentifier, FieldId mergedPackageColumnIdentifier)
    {
        // Populate the new field on this particular record only if the legacy field has a value and new field has no value.
        if (record && record.(selfServicePackageColumnIdentifier) && !record.(mergedPackageColumnIdentifier))
        {
            // Get the legacy table (RetailSelfServicePackageInfo) record given the legacy field value.
            RetailSelfServicePackageInfo selfServicePackageTable = RetailSelfServicePackageInfo::findByRecId(
                record.(selfServicePackageColumnIdentifier));

            if (selfServicePackageTable)
            {
                RetailSelfServiceMergedPackages mergedPackagesTable;

                // Get the record from table RetailSelfServiceMergedPackages.
                select firstonly mergedPackagesTable
                    where mergedPackagesTable.PackageOrigin == RetailSelfServicePackageOrigin::BlobStorage
                    && mergedPackagesTable.TableReferenceId == selfServicePackageTable.RecId;

                ttsbegin;

                if (!mergedPackagesTable)
                {
                    // Insert a new row RetailSelfServiceMergedPackages if reference record from table
                    // RetailSelfServicePackageInfo does not exists.
                    mergedPackagesTable = RetailSelfServiceMergedPackages::insertSelfServicePackageInfo(selfServicePackageTable);
                }

                // Populate the new field from reference table RetailSelfServiceMergedPackages.
                record.(mergedPackageColumnIdentifier) = mergedPackagesTable.RecId;
                record.update();

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDefaultPackageReferencesFromRetailSharedParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Migrates or populate self-service default package references to table <c>RetailSelfServiceDefaultPackages</c> from table <c>RetailSharedParameters</c>.
    /// </summary>
    internal static void populateDefaultPackageReferencesFromRetailSharedParameters()
    {
        // No need to populate self-service package data from RetailSharedParameters table
        // to RetailSelfServiceDefaultPackages if we already done it before.
        if (!RetailSelfServiceMigration::isTableMigrated(tableNum(RetailSharedParameters)))
        {
            RetailSharedParameters retailSharedParameters;

            select firstonly retailSharedParameters;

            if (retailSharedParameters)
            {
                // RetailSharedParameters stores default global self-service package.
                // We're using RetailSelfServiceDefaultPackages for table identifier.
                RetailSelfServiceMigrationHelper::populateSelfServiceDefaultPackage(retailSharedParameters.DefaultMPOSWindowsPhonePkg, tableNum(RetailSelfServiceDefaultPackages));
                RetailSelfServiceMigrationHelper::populateSelfServiceDefaultPackage(retailSharedParameters.DefaultMPOSAndroidPkg, tableNum(RetailSelfServiceDefaultPackages));
                RetailSelfServiceMigrationHelper::populateSelfServiceDefaultPackage(retailSharedParameters.DefaultMPOSiOSPkg, tableNum(RetailSelfServiceDefaultPackages));
                RetailSelfServiceMigrationHelper::populateSelfServiceDefaultPackage(retailSharedParameters.DefaultHWSSelfServicePkg, tableNum(RetailSelfServiceDefaultPackages));
                RetailSelfServiceMigrationHelper::populateSelfServiceDefaultPackage(retailSharedParameters.DefaultHardwarePeripheralSimulatorPkg, tableNum(RetailSelfServiceDefaultPackages));
                RetailSelfServiceMigrationHelper::populateSelfServiceDefaultPackage(retailSharedParameters.DefaultRetailStoreUnitSelfServicePkg, tableNum(RetailSelfServiceDefaultPackages));
            }

            // RetailSharedParameters data is migrated, insert the table identifier to RetailSelfServiceMigration
            // so we don't have to do the data migration anymore.
            RetailSelfServiceMigration::setMigration(tableNum(RetailSharedParameters));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDefaultPackageReferencesFromRetailDefaultChannelPackages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Migrates or populate self-service default package references to table <c>RetailSelfServiceDefaultPackages</c> from table <c>RetailDefaultChannelPackages</c>.
    /// </summary>
    internal static void populateDefaultPackageReferencesFromRetailDefaultChannelPackages()
    {
        // No need to populate self-service package data from RetailDefaultChannelPackages table
        // to RetailSelfServiceDefaultPackages if we already done it before.
        if (!RetailSelfServiceMigration::isTableMigrated(tableNum(RetailDefaultChannelPackages)))
        {
            RetailDefaultChannelPackages defaultChannelPackages;

            while select defaultChannelPackages
            {
                RetailSelfServiceMigrationHelper::populateSelfServiceDefaultPackage(defaultChannelPackages.DefaultModernPOSPackage, tableNum(RetailStoreTable), defaultChannelPackages.ChannelRecId);
                RetailSelfServiceMigrationHelper::populateSelfServiceDefaultPackage(defaultChannelPackages.DefaultModernPOSOfflinePackage, tableNum(RetailStoreTable), defaultChannelPackages.ChannelRecId);
            }

            // RetailDefaultChannelPackages data is migrated, insert the table identifier to RetailSelfServiceMigration
            // so we don't have to do the data migration anymore.
            RetailSelfServiceMigration::setMigration(tableNum(RetailDefaultChannelPackages));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDefaultPackageReferencesFromRetailDefaultCompanyPackages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Migrates or populate self-service default package references to table <c>RetailSelfServiceDefaultPackages</c> from table <c>RetailDefaultCompanyPackages</c>.
    /// </summary>
    internal static void populateDefaultPackageReferencesFromRetailDefaultCompanyPackages()
    {
        // No need to populate self-service package data from RetailDefaultCompanyPackages table
        // to RetailSelfServiceDefaultPackages if we already done it before.
        if (!RetailSelfServiceMigration::isTableMigrated(tableNum(RetailDefaultCompanyPackages)))
        {
            RetailDefaultCompanyPackages defaultCompanyPackages;

            while select defaultCompanyPackages
            {
                RetailSelfServiceMigrationHelper::populateSelfServiceDefaultPackage(defaultCompanyPackages.DefaultModernPOSPackage, tableNum(CompanyInfo), defaultCompanyPackages.CompanyInfo);
                RetailSelfServiceMigrationHelper::populateSelfServiceDefaultPackage(defaultCompanyPackages.DefaultModernPOSOfflinePackage, tableNum(CompanyInfo), defaultCompanyPackages.CompanyInfo);
            }

            // RetailDefaultCompanyPackages data is migrated, insert the table identifier to RetailSelfServiceMigration
            // so we don't have to do the data migration anymore.
            RetailSelfServiceMigration::setMigration(tableNum(RetailDefaultCompanyPackages));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateRealtimeServiceDefaultPackageReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Migrates or populate default packages with type AsyncConnectorService and RealtimeServiceAX63 to table <c>RetailSelfServiceDefaultPackages</c>.
    /// </summary>
    internal static void populateRealtimeServiceDefaultPackageReference()
    {
        RetailSelfServiceDefaultPackages defaultPackages = RetailSelfServiceDefaultPackages::findDefaultPackage(
            tableNum(RetailSelfServiceDefaultPackages), PackageType::AsyncServerConnectorService);

        if (!defaultPackages)
        {
            RetailSelfServicePackageInfo legacyTable;

            // The legacy logic to get the default package is to get the first row of table RetailSelfServicePackageInfo
            // with package type AsyncServerConnectorService.
            select firstonly legacyTable
                where legacyTable.PackageType == PackageType::AsyncServerConnectorService;
            RetailSelfServiceMigrationHelper::populateSelfServiceDefaultPackage(legacyTable.RecId, tableNum(RetailSelfServiceDefaultPackages));
        }

        defaultPackages = RetailSelfServiceDefaultPackages::findDefaultPackage(
            tableNum(RetailSelfServiceDefaultPackages), PackageType::RealtimeServiceAX63);

        if (!defaultPackages)
        {
            RetailSelfServicePackageInfo legacyTable;

            // The legacy logic to get the default package is to get the first row of table RetailSelfServicePackageInfo
            // with package type RealtimeServiceAX63.
            select firstonly legacyTable
                where legacyTable.PackageType == PackageType::RealtimeServiceAX63;
            RetailSelfServiceMigrationHelper::populateSelfServiceDefaultPackage(legacyTable.RecId, tableNum(RetailSelfServiceDefaultPackages));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshAssetsFromRetailSelfServicePackageInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate table <c>RetailSelfServiceMergedPackages</c> with data from legacy table <c>RetailSelfServicePackageInfo</c>.
    /// </summary>
    /// <param name = "packageType">The package type.</param>
    internal static void refreshAssetsFromRetailSelfServicePackageInfo(PackageType packageType)
    {
        RetailSelfServiceMergedPackages mergedPackagesTable;
        RetailSelfServicePackageInfo selfServicePackageInfo;

        // Insert only packages from RetailSelfServicePackageInfo
        // that has not yet inserted to table RetailSelfServiceMergedPackages.
        while select selfServicePackageInfo
            where selfServicePackageInfo.PackageType == packageType
        notexists join mergedPackagesTable
            where (mergedPackagesTable.PackageOrigin == RetailSelfServicePackageOrigin::BlobStorage
                && mergedPackagesTable.PackageType == packageType
                && selfServicePackageInfo.RecId == mergedPackagesTable.TableReferenceId)
        {
            RetailSelfServiceMergedPackages row = RetailSelfServiceMergedPackages::findByPackageOrigin(
                RetailSelfServicePackageOrigin::BlobStorage, selfServicePackageInfo.RecId);

            if (row)
            {
                // This condition occurs when the package type is different between RetailSelfServicePackageInfo and RetailSelfServiceMergedPackages.
                // User could upload blob packages and override by package name (see SelfServicePackageManager.UploadPackage method).
                RetailSelfServiceMergedPackages::updateSelfServicePackageInfo(selfServicePackageInfo);
            }
            else
            {
                RetailSelfServiceMergedPackages::insertSelfServicePackageInfo(selfServicePackageInfo);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSelfServiceDefaultPackage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate default package data to <c>RetailSelfServiceMergedPackages</c>.
    /// </summary>
    /// <param name = "selfServicePackageRecId">The record identifier from table RetailSelfServicePackageInfo.</param>
    /// <param name = "tableIdentifier">The table identifier of legacy default table (e.g. RetailDefaultChannelPackages, RetailDefaultCompanyPackages).</param>
    /// <param name = "tableReferenceId">The record identifier from legacy default table. Zero if table reference identifier is RetailSelfServiceDefaultPackages.</param>
    private static void populateSelfServiceDefaultPackage(RefRecId selfServicePackageRecId, TableId tableIdentifier, RefRecId tableReferenceId = 0)
    {
        RetailSelfServicePackageInfo selfServicePackageInfo = RetailSelfServicePackageInfo::findByRecId(selfServicePackageRecId);

        if (selfServicePackageInfo)
        {
            RetailSelfServiceMergedPackages mergedPackagesTable = RetailSelfServiceMergedPackages::findOrPopulateSelfServicePackageInfo(selfServicePackageInfo);
            RetailSelfServiceDefaultPackages::findOrCreateDefaultPackage(mergedPackagesTable, tableIdentifier, tableReferenceId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>