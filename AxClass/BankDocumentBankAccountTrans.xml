<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankDocumentBankAccountTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>BankDocumentBankAccountTrans</c> class is the business class of bank document for other type.
/// </summary>
[BankDocumentAttribute(BankDocumentBookType::Others)]
class BankDocumentBankAccountTrans extends BankDocument
implements BankDocumentIStateChangeEventHandler
{
    bankAccountTrans bankAccountTrans;
    container relatedCustVendAccountInfo;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bankDocumentStateChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the event of bank document state change.
    /// </summary>
    /// <param name="_bankDocumentState">
    /// The bank document state.
    /// </param>
    public void bankDocumentStateChanged(BankDocumentState _bankDocumentState)
    {
        ttsBegin;

        this.processBankAccountTransReconcileStatus(_bankDocumentState.parmBankDocumentStatusChangeType());
        this.processBankAccountTransCorrection(_bankDocumentState.parmBankDocumentStatusChangeType());

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelatedPartyAccount</Name>
				<Source><![CDATA[
    public AccountNum getRelatedPartyAccount()
    {
        this.fillRelatedCustVendAccountInfo();
        return conPeek(relatedCustVendAccountInfo, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelatedPartyName</Name>
				<Source><![CDATA[
    public DirPartyName getRelatedPartyName()
    {
        this.fillRelatedCustVendAccountInfo();
        return conPeek(relatedCustVendAccountInfo, 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelatedPartyType</Name>
				<Source><![CDATA[
    public BankReconciliationRelatedPartyType getRelatedPartyType()
    {
        this.fillRelatedCustVendAccountInfo();
        return conPeek(relatedCustVendAccountInfo, 3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode getBankCurrencyCode()
    {
        return bankAccountTrans.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankTransType</Name>
				<Source><![CDATA[
    public BankTransactionType getBankTransType()
    {
        return bankAccountTrans.BankTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    [HookableAttribute(false)]
    public TransactionTextLarge getDescription()
    {
        return bankAccountTrans.Txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentNum</Name>
				<Source><![CDATA[
    public Num getDocumentNum()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentType</Name>
				<Source><![CDATA[
    public BankDocumentBookType getDocumentType()
    {
        return BankDocumentBookType::Others;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrignalBankDocumentStatusName</Name>
				<Source><![CDATA[
    public BankDocumentOrigDocumentStatus getOrignalBankDocumentStatusName()
    {
        return enum2str(DocumentStatus::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReference</Name>
				<Source><![CDATA[
    public PaymReference getReference()
    {
        return bankAccountTrans.PaymReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCurrency</Name>
				<Source><![CDATA[
    public CurrencyCode getTransactionCurrency()
    {
        return bankAccountTrans.BankTransCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCurrencyAmount</Name>
				<Source><![CDATA[
    public AmountCur getTransactionCurrencyAmount()
    {
        return bankAccountTrans.BankTransAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionDate</Name>
				<Source><![CDATA[
    public TransDate getTransactionDate()
    {
        return bankAccountTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadSourceBuffer</Name>
				<Source><![CDATA[
    protected void loadSourceBuffer()
    {
        bankAccountTrans = documentMap;       
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillRelatedCustVendAccountInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fills related customer or vendor account Information related to this <c>BankAccountTrans</c>
    /// </summary>
    [Wrappable(true)]
    protected final void fillRelatedCustVendAccountInfo()
    {
        if (conLen(relatedCustVendAccountInfo) == 0)
        {
            CustVendAccountInfo _custVendAccountInfo = bankAccountTrans.findRelatedCustVendAccountInfo();
            relatedCustVendAccountInfo = [_custVendAccountInfo.AccountNum, _custVendAccountInfo.AccountName, _custVendAccountInfo.AccountType];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBankAccountTransCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the correction of the bank account transaction.
    /// </summary>
    /// <param name="_changeType">
    /// The bank document state change type.
    /// </param>
    private void processBankAccountTransCorrection(BankDocumentStatusChangeType    _changeType)
    {
        if (documentTable.isWithCorrection())
        {
            if (_changeType == BankDocumentStatusChangeType::Reconcile)
            {
                BankDocument::postBankTransactionCorrection(bankAccountTrans.RecId, documentTable.getCorrectionBankCurrencyAmount());
            }
            else if (_changeType == BankDocumentStatusChangeType::ReverseReconcile)
            {
                BankDocument::reverseBankTransactionCorrection(bankAccountTrans.RecId);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>