<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocEventHandler_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is the entry point for actions on electronic fiscal documents. It receives
/// modification requests and handles and distributes notification events.
/// </summary>
public class EFDocEventHandler_BR
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>changeToContingency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes a NF-e document to contigency mode.
    /// </summary>
    /// <param name="_eFDocument">The <c>EFDocument_BR</c> record that will be changed to contigency.</param>
    public void changeToContingency(EFDocument_BR _eFDocument)
    {
        EFDocState_BR state;

        state = this.getEFDocStateFromEFDoc(_eFDocument);

        state.changeToContingency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventMessageSentForCorrectionLetter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the event of a message being sent for correction letter.
    /// </summary>
    /// <param name="_efDocument">The <c>EFDocument_BR</c> record of the NF-e that has been sent.</param>
    public void eventMessageSentForCorrectionLetter(EFDocument_BR _efDocument)
    {
        this.eventMessageSentInner(_efDocument, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventMessageSent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the event of a message being sent.
    /// </summary>
    /// <param name="_efDocument">The <c>EFDocument_BR</c> record of the NF-e that has been sent.</param>
    public void eventMessageSent(EFDocument_BR _efDocument)
    {
        this.eventMessageSentInner(_efDocument, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventMessageSentInner</Name>
				<Source><![CDATA[
    private void eventMessageSentInner(EFDocument_BR _efDocument, boolean _isCorrectionLetter)
    {
        EFDocState_BR  state;

        state = this.getEFDocStateFromEFDoc(_efDocument);

        if (state.canNotifyRecipients())
        {
            this.notifyRecipients(_efDocument, _isCorrectionLetter);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEFDocStateFromAccessKey</Name>
				<Source><![CDATA[
    protected EFDocState_BR getEFDocStateFromAccessKey(EFDocAccessKey_BR _accessKey)
    {
        return EFDocState_BR::createFromAccessKey(_accessKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEFDocStateFromEFDoc</Name>
				<Source><![CDATA[
    protected EFDocState_BR getEFDocStateFromEFDoc(EFDocument_BR _eFDocument)
    {
        return EFDocState_BR::createFromEFdocument(_eFDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEFDocStateFromFiscalDocument</Name>
				<Source><![CDATA[
    protected EFDocState_BR getEFDocStateFromFiscalDocument(FiscalDocument_BR _fiscalDocument)
    {
        return EFDocState_BR::createFromFiscalDocument(_fiscalDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>messageReceived</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the event of a message being received from the government.
    /// </summary>
    /// <param name="_efDocument">
    /// The <c>EFiscalDocument_BR</c> object of the NF-e that has been received.
    /// </param>
    /// <param name="_messageReturn">
    /// <c>EFiscalDocumentReturnInfo_BR</c> with the returning info.
    /// </param>
    public void messageReceived(EFiscalDocument_BR _efDocument, EFiscalDocumentReturnInfo_BR _messageReturn)
    {
        EFDocState_BR               state;
        FiscalDocumentPrintJob_BR   printJob;
        RecordSortedList            efdList;

        state = this.getEFDocStateFromAccessKey(_messageReturn.accessKey());
        state.messageReceived(_messageReturn);

        if (state.canNotifyRecipients())
        {
            this.notifyRecipients(_efDocument.eFDocument());
        }

        // Automatic printing upon approval.
        // Documents in contigency mode are not automatically printed because according
        // to contigency scenario the user already printed it by hand before its approval.
        if (_eFDocument.isAutomaticPrintEnabled() &&
            state.canPrintDanfe() &&
            _efDocument.contingencyMode() != EFDocContingMode_BR::SecurityForm &&
            _efDocument.contingencyMode() != EFDocCOntingMode_BR::SecurityFormDA)
        {
            efdList = new RecordSortedList(tableNum(FiscalDocument_BR));
            efdList.ins(_eFDocument.fiscalDocument());

            try
            {
                printJob = new FiscalDocumentPrintJob_BR();
                printJob.printFiscalDocuments(efdList, PrintCopyOriginal::OriginalPrint);
            }
            catch
            {
                // Exit gracefully since we don't want to abort anything due to printing problems
                warning(strFmt("@SYS4081393", _eFDocument.accessKey()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>messageSent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the event of a message being sent.
    /// </summary>
    /// <param name="_efDocument">The <c>EFDocument_BR</c> record of the NF-e that has been sent.</param>
    /// <param name="_messageReturn">A <c>EFiscalDocumentReturnInfo_BR</c> object with the return information from the webservice.</param>
    public void messageSent(EFDocument_BR _efDocument, EFiscalDocumentReturnInfo_BR _messageReturn)
    {
        EFDocState_BR  state;

        state = this.getEFDocStateFromEFDoc(_efDocument);
        state.messageSent(_messageReturn);

        if (state.canNotifyRecipients())
        {
            this.notifyRecipients(_efDocument);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>notifyRecipients</Name>
				<Source><![CDATA[
    private void notifyRecipients(EFDocument_BR _efDocument, boolean _isCorrectionLetter = false)
    {
        EFDocEmailHistory_BR emailHistory;

        if (_efDocument.MessageType == EFDocMessageType_BR::Submit)
        {
            emailHistory.EFDocEmailStatus_BR = EFDocEmailStatus_BR::Waiting;
            emailHistory.EFDocument_BR = _efDocument.RecId;

            if (_isCorrectionLetter)
            {
                emailHistory.Comment = "@ApplicationSuite_Localization:CorrectionLetterApproved";
                emailHistory.Type = EFDocEmailType_BR::CorrectionLetter;
            }
            else
            {
                emailHistory.Comment = "@SYS4007185";
                emailHistory.Type = EFDocEmailType_BR::Submit;
            }

            emailHistory.insert();
        }
        else
        {
            EFDocEmailSender_BR::construct(_efDocument).sendEmail();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post an electronic document.
    /// </summary>
    /// <param name="_postedFiscalDocument">
    /// The <c>FiscalDocument_BR</c> record of the fiscal document that will be sent to the government.
    /// </param>
    /// <remarks>
    /// This method is responsible for preparing the document to be sent and put it in a queue
    /// that is processed by the export and import NF-e job.
    /// </remarks>
    public void post(FiscalDocument_BR _postedFiscalDocument)
    {
        EFDocState_BR       state;

        state = this.getEFDocStateFromFiscalDocument(_postedFiscalDocument);
        state.post();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSendMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resends a NF-e to the government.
    /// </summary>
    /// <param name="_eFDocument">The <c>EFDocument_BR</c> record of the document to be resent.</param>
    public void reSendMessage(EFDocument_BR _eFDocument)
    {
        EFDocState_BR state;

        state = this.getEFDocStateFromEFDoc(_eFDocument);

        state.reSendMessage();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels an electronic fiscal document.
    /// </summary>
    /// <param name="_fiscalDocumentToReverse">
    /// The <c>FiscalDocument_BR</c> record of the document to be cancelled.
    /// </param>
    public void reverse(FiscalDocument_BR _fiscalDocumentToReverse)
    {
        EFDocState_BR       state;
        ;

        state = this.getEFDocStateFromFiscalDocument(_fiscalDocumentToReverse);

        state.reverse();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendEventMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends an event message to the government web service.
    /// </summary>
    /// <param name="_eventDocument">
    /// The <c>EFEventDocument_BR</c> to be sent.
    /// </param>
    public void sendEventMessage(EFEventDocument_BR _eventDocument)
    {
        IEFEventDocMsgFormat_BR format;
        IEFDocMsgTransport      transport;
        IEFDocEventMsg_BR       eventMessage;
        EFEventDocumentList_BR  list;
        URL                     url;
        IEFDocMsgStream_BR      msgStream;

        if (!this.validateContingencySvcForCorrLetter(_eventDocument))
        {
            throw Exception::Error;
        }

        FiscalEstablishment_BR fiscalEstablishment = _eventDocument.fiscalEstablishment();

        eventMessage    = EFDocEventMsgBase_BR::constructFromSchema(_eventDocument.parmEventType());
        format          = eventMessage.getSendFormat(fiscalEstablishment);
        url             = eventMessage.getURL(fiscalEstablishment);

        transport = EFDocMsgTransport_WebService_BR::newFromEvent(fiscalEstablishment, format.version(), url);

        if (transport is EFDocMsgTransport_WebService_BR)
        {
            EFDocEncoderType encoderType = EFDocEventMsgBase_BR::getEncorderType(eventMessage, fiscalEstablishment);
            EFDocSoapVersion soapVersion = EFDocEventMsgBase_BR::getSoapVersion(eventMessage, fiscalEstablishment);
            EFDocMsgTransport_WebService_BR transportTmp = transport;
            transportTmp.parmEncoderType(encoderType);
            transportTmp.parmSoapVersion(soapVersion);
        }

        list = EFEventDocumentList_BR::construct();
        list.add(_eventDocument);

        if (fiscalEstablishment.EFDocValidateSchemaOnPosting)
        {
            msgStream = new EFDocMsgStringStream_BR();
            format.write(msgStream,list);

            EFDocEventHandler_BR::validateSchema(_eventDocument, msgStream);
        }

        eventMessage.send(list, transport);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateContingencySvcForCorrLetter</Name>
				<Source><![CDATA[
    private boolean validateContingencySvcForCorrLetter(EFEventDocument_BR _eventDocument)
    {
        EFDocContingencyMode_BR contingencyMode;

        if (_eventDocument.parmEventType() == EFDocSchemaType_BR::CorrectionLetter)
        {
            contingencyMode = EFDocContingencyMode_BR::getCurrentContingencyMode(_eventDocument.fiscalEstablishment().FiscalEstablishmentId);

            if (contingencyMode.Mode == EFDocContingMode_BR::SvcAn || contingencyMode.Mode == EFDocContingMode_BR::SvcRs)
            {
                return checkFailed(strFmt("@Brazil:EFDocContingencyValidationCorrectionLetter", enum2str(EFDocSchemaType_BR::CorrectionLetter), enum2str(contingencyMode.Mode)));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>EFDocEventHandler_BR</c> object.
    /// </summary>
    /// <returns>A <c>EFDocEventHandler_BR</c> object.</returns>
    public static EFDocEventHandler_BR construct()
    {
        return new EFDocEventHandler_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSchema</Name>
				<Source><![CDATA[
    private static void validateSchema(EFEventDocument_BR _eventDocument,
                                                 IEFDocMsgStream_BR _msgStream)
    {
        FileIOPermission        fileIOPermission;
        Filename                xsdPath;
        EFDocXmlValidator_BR    validator;
        List                    listOfErrors;
        ListEnumerator          enumerator;

        xsdPath = EFDocSchema_BR::getSchemaPath(_eventDocument.parmEventType(), _eventDocument.fiscalEstablishment().EFDocVersion);

        if (xsdPath)
        {
            fileIOPermission = new FileIOPermission(xsdPath,'r');
            fileIOPermission.assert();
        }

        if (!xsdPath || !WinAPIServer::fileExists(xsdPath))
        {
            warning(strFmt("@SYS4081396", enum2str(_eventDocument.parmEventType()), enum2str(_eventDocument.fiscalEstablishment().EFDocVersion)));
            return;
        }

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00043, funcName());

        validator = EFDocXmlValidator_BR::construct(xsdPath);
        validator.validate(_msgStream.toString());

        if (validator.errorsFound())
        {
            setPrefix("@SYS4081397");
            listOfErrors = validator.allErrors();
            enumerator = listOfErrors.getEnumerator();
            while (enumerator.moveNext())
            {
                error(enumerator.current());
            }
            // Stop the posting
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>