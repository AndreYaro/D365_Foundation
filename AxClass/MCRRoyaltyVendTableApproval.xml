<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRRoyaltyVendTableApproval</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRRoyaltyVendTableApproval</c> class serves to approve calculated royalties.
/// </summary>
class MCRRoyaltyVendTableApproval extends RunBaseBatch implements BatchRetryable, SysErrorMessageHelpScopeIBatchProvider
{
    VendAccount vendAccount;
    DialogField dialogFieldVendAccount;
    QueryRun    queryRun;

    private MCRRoyaltyInstrumentationLogger instrumentationLogger;

    #DEFINE.CurrentVersion(4)
    #LOCALMACRO.CurrentList
        vendAccount
    #ENDMACRO

    #LOCALMACRO.CurrentListV3
        vendAccount
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the vendor related fields to the dialog box.
    /// </summary>
    /// <returns>
    /// The dialog box object.
    /// </returns>
    public Object dialog()
    {
        DialogRunbase dialogRunbase = super();

        dialogFieldVendAccount = dialogRunbase.addFieldValue(
                                extendedtypestr(VendAccount),
                                vendAccount,
                                "@SYS80105",
                                "@SYS14048");
        return dialogRunbase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the dialog vendor field values.
    /// </summary>
    /// <returns>
    /// true if the field values were retrieved successfully; otherwise, false.
    /// </returns>
    public boolean getFromDialog()
    {
        vendAccount = dialogFieldVendAccount.value();

        if (vendAccount && queryRun)
        {
            QueryBuildDataSource royaltyVendTable = queryRun.query().dataSourceTable(tableNum(MCRRoyaltyVendTable));
            
            QueryBuildRange queryBuildRangeVendAccount = SysQuery::findOrCreateRange(royaltyVendTable, fieldNum(MCRRoyaltyVendTable, VendAccount));
            queryBuildRangeVendAccount.value(queryValue(vendAccount));
            
            QueryBuildRange queryBuildRangeRoyaltyStatus = SysQuery::findOrCreateRange(royaltyVendTable, fieldNum(MCRRoyaltyVendTable, RoyaltyStatus));
            queryBuildRangeRoyaltyStatus.status(RangeStatus::Hidden);
            queryBuildRangeRoyaltyStatus.value(queryValue(MCRRoyaltyVendTableStatus::Calculated));
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQuerySelectButton</Name>
				<Source><![CDATA[
    public boolean showQuerySelectButton()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    private Query buildQuery()
    {
        return new Query(queryStr(MCRRoyaltyVendTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the application module value.
    /// </summary>
    /// <returns>
    /// The vendor application module value.
    /// </returns>
    public SysModule module()
    {
        return SysModule::Vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Substantiates the <c>MCRRoyaltyVendTableApproval</c> object.
    /// </summary>
    protected void new()
    {
        super();

        queryRun = new QueryRun(this.buildQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stores the dialog object parameters.
    /// </summary>
    /// <returns>
    /// The list of stored parameters.
    /// </returns>
    public container pack()
    {
        if (queryRun)
        {
            return [#CurrentVersion, #CurrentList, queryRun.pack()];
        }

        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method processes the list of records selected and approves the calculated rebates.
    /// </summary>
    public void run()
    {
        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextBatchServer(this))
        {
            #OCCRetryCount

            try
            {
                // Reset the queryRun, in case we ended up here as a result of retry.
                queryRun.reset();
                    
                using (var activityContext = this.instrumentationLogger().royaltyClaimActivities().runApproval(vendAccount))
                {
                    int royaltyClaimCount;
                    while (queryRun.next())
                    {
                        if (queryRun.changed(tableNum(MCRRoyaltyVendTable)))
                        {
                            ttsbegin;
                            MCRRoyaltyVendTable royaltyVendTable  = queryRun.get(tableNum(MCRRoyaltyVendTable));
                            royaltyVendTable.status().runProcessed();
                            ttscommit;

                            royaltyClaimCount++;
                        }
                    }
                    this.instrumentationLogger().royaltyClaimActivities().processedRoyaltyClaimsCount(activityContext, royaltyClaimCount);
                }
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw;
                }
                else
                {
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError(#RetryNum))
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Restores the last parameters saved.
    /// </summary>
    /// <param name="_packedClass">
    /// The list of stored parameters.
    /// </param>
    /// <returns>
    /// true if the restore succeded; otherwise, false.
    /// </returns>
    public boolean unpack(container _packedClass)
    {
        Integer     version     = conpeek(_packedClass,1);
        boolean     ret = true;
        container   packedQuery;

        switch (version)
        {
            case #CurrentVersion  :
                [version,#CurrentList, packedQuery] = _packedClass;
                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                else
                {
                    ret = false;
                }
                break;
            case 3 :
                [version,#CurrentListV3] = _packedClass;
                break;
            default :
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates dialog box values.
    /// </summary>
    /// <param name="_calledFrom">
    /// The object that called the cumulate.
    /// </param>
    /// <returns>
    /// true if the vendor exists; otherwise, false.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = super();

        if (ret && !vendAccount)
        {
            ret = checkFailed("@SYS328158");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an instance of the <c>MCRRoyaltyVendTableApproval</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>MCRRoyaltyVendTableApproval</c> class.
    /// </returns>
    public static MCRRoyaltyVendTableApproval construct()
    {
        return new MCRRoyaltyVendTableApproval();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the class description.
    /// </summary>
    /// <returns>
    /// The class description.
    /// </returns>
    public static ClassDescription description()
    {
        return "@MCR4410059";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method constructs an instance of the <c>MCRRoyaltyVendTableApproval</c> class and runs the class.
    /// </summary>
    /// <param name="_args">
    /// Any arguments passed to the class.
    /// </param>
    public static void main(Args _args)
    {
        MCRRoyaltyVendTableApproval mcrRoyaltyVendTableApproval = MCRRoyaltyVendTableApproval::construct();

        try
        {
            if (mcrRoyaltyVendTableApproval.prompt())
            {
                mcrRoyaltyVendTableApproval.runOperation();

                Common record = _args.record();
                if (record && FormDataUtil::getFormDataSource(record))
                {
                    FormDataSource mcrRoyaltyVendTable_ds = FormDataUtil::getFormDataSource(record);
                    mcrRoyaltyVendTable_ds.research();
                }
            }
        }
        catch (Exception::Error)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeFormName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the form name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The form name used for the error context.</returns>
    [Hookable(false)]
    public FormName errorMessageHelpScopeFormName()
    {
        return strFmt('%1_%2', formStr(Dialog), classId2Name(classIdGet(this)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeActionName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the action name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The action name used for the error context.</returns>
    [Hookable(false)]
    public str errorMessageHelpScopeActionName()
    {
        return menuItemActionStr(MCRRoyaltyVendTableApproval);
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private MCRRoyaltyInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = MCRRoyaltyInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>