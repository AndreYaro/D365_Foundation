<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjForecastReduce</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjForecastReduce
{
    List            projReduceCostPriorityList;
    ProjReduceCostPriority projReduceCostPriorityArray[10];
    int             projReduceCostPriorityArrayLength;
    int             minimumRequirementIndex;
    boolean         havePriorityList;
    Map             fieldValueMap;  //This contains the value of the important fields from incoming data
    List            forecastModelList;

    boolean         reduceLumpSumOnly;
    Qty             reduceForecastQty;
    Amount          reduceForecastAmount;
    ProjTransType   projTransType;
    ProjTransIdBase projTransId;
    ProjTransIdBase projTransIdOrig;

    //field of the posted records
    ProjId                  projId;
    ProjId                  parentProjId;
    ProjId                  estimateProjId;
    ProjCategoryId          projCategoryId;
    ProjCategoryGroupId     projCategoryGroupId;
    ProjActivityNumber      projActivityNumber;
    ProjCostGroupId         projCostGroupId;
    TransDate               projDate;
    EmplItemId              emplItemId;
    ResourceRecId           resourceRecId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkRemainingBudgetOnForecastModel</Name>
				<Source><![CDATA[
    public boolean checkRemainingBudgetOnForecastModel(ForecastModelId _modelId)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRemainingBudgetOnProject</Name>
				<Source><![CDATA[
    public boolean checkRemainingBudgetOnProject(ProjId _projId)
    {
        return ProjTable::find(_projId).CheckBudget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructQuery</Name>
				<Source><![CDATA[
    protected Map constructQuery(container fieldList, ForecastModelId modelId, int lumpSum )
    {
        Map                     mapForecast= new Map(Types::Container,Types::Enum);

        return mapForecast;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forecastMinus</Name>
				<Source><![CDATA[
    protected boolean forecastMinus(ProjTransIdBase _forecastTransId,ForecastModelId _modelId,Qty _qty,CostPrice _costPrice)
    {
        ProjForecastReductionHistory projForecastReductionHistory;

        // Log the reduction history
        projForecastReductionHistory.clear();
        projForecastReductionHistory.ProjTransId=this.parmProjTransId();
        projForecastReductionHistory.ForecastTransId=_forecastTransId;
        projForecastReductionHistory.ModelId = _modelId;
        projForecastReductionHistory.ProjTransType = this.parmProjTransType();
        projForecastReductionHistory.QtyReduced =_qty;
        projForecastReductionHistory.CostPriceReduced = _costPrice;
        projForecastReductionHistory.insert();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forecastPlus</Name>
				<Source><![CDATA[
    protected boolean forecastPlus(ProjTransIdBase _forecastTransId,ForecastModelId _modelId,Qty _qty,CostPrice _costPrice)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getForecastModelList</Name>
				<Source><![CDATA[
    private List getForecastModelList()
    {
        // return the forecast model list whose auto forecast reduction is enabled in forecast model parameter
        List modelList;
        ForecastModel forecastModel;

        modelList=new List(Types::String);

        switch (this.parmProjTransType())
        {
            case ProjTransType::Hour:
            while select ModelId from forecastModel
            where forecastModel.ProjHourReduction==NoYes::Yes &&
                  forecastModel.Blocked == NoYes::No

                {
                    modelList.addEnd(forecastModel.ModelId);
                }
                break;

            case ProjTransType::Item:
            while select ModelId from forecastModel
            where forecastModel.ProjItemReduction==NoYes::Yes &&
                  forecastModel.Blocked == NoYes::No
                {
                    modelList.addEnd(forecastModel.ModelId);
                }
                break;

            case ProjTransType::Cost:
            while select ModelId from forecastModel
            where forecastModel.ProjExpenseReduction==NoYes::Yes &&
                  forecastModel.Blocked == NoYes::No
                {
                    modelList.addEnd(forecastModel.ModelId);
                }
                break;
        }
        return modelList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPriorityList</Name>
				<Source><![CDATA[
    private boolean getPriorityList()
    {
        ProjParameters  projParameters=ProjParameters::find(false);
        ProjReduceCostPriority itemReduceMinimumRequirement;
        ProjReduceCostPriority hourReduceMinimumRequirement;
        ProjReduceCostPriority expenseReduceMinimumRequirement;
        int i;

        //This functions generate conditionList. Each value of this list is one allowed fields combination.
        // If ItemReduceCostPriority1="Project", ItemReduceCostPriority2="Category",
        //    ItemReduceCostPriority3="Parent project",ItemReduceCostPriority4="Estimate Project",ItemReduceCostPriority5="Category group"
        //    ItemReduceMinimumRequirement="parent project"
        //Then the conditionList contains
        //  conditionList[11: "Project","Category","Parent project"
        //  conditionList[11: "Project","Category","Parent project","Estimate Project"
        //  conditionList[11: "Project","Category","Parent project","Estimate Project","Category group"

        switch (this.parmProjTransType())
        {
            case ProjTransType::Cost:
            while select projParameters
                {
                    expenseReduceMinimumRequirement=projParameters.ExpenseReduceMinimumRequirement;

                    projReduceCostPriorityArray[1]=projParameters.ExpenseReduceCostPriority1;
                    projReduceCostPriorityArray[2]=projParameters.ExpenseReduceCostPriority2;
                    projReduceCostPriorityArray[3]=projParameters.ExpenseReduceCostPriority3;
                    projReduceCostPriorityArray[4]=projParameters.ExpenseReduceCostPriority4;
                    projReduceCostPriorityArray[5]=projParameters.ExpenseReduceCostPriority5;
                    projReduceCostPriorityArrayLength=5;

                    //get actual length by stopping at None field.
                    for (i=1;i<=projReduceCostPriorityArrayLength;i++)
                    {
                        if (projReduceCostPriorityArray[i]==expenseReduceMinimumRequirement)
                        {
                            minimumRequirementIndex=i;
                        }

                        if (projReduceCostPriorityArray[i]==ProjReduceCostPriority::None)
                        {
                            projReduceCostPriorityArrayLength=i-1;
                            break;
                        }
                    }
                }
                break;

            case ProjTransType::Hour:
            while select projParameters
                {
                    hourReduceMinimumRequirement=projParameters.HourReduceMinimumRequirement;

                    projReduceCostPriorityArray[1]=projParameters.HourReduceCostPriority1;
                    projReduceCostPriorityArray[2]=projParameters.HourReduceCostPriority2;
                    projReduceCostPriorityArray[3]=projParameters.HourReduceCostPriority3;
                    projReduceCostPriorityArray[4]=projParameters.HourReduceCostPriority4;
                    projReduceCostPriorityArray[5]=projParameters.HourReduceCostPriority5;
                    projReduceCostPriorityArrayLength=5;

                    //get actual length by stopping at None field.
                    for (i=1;i<=projReduceCostPriorityArrayLength;i++)
                    {
                        if (projReduceCostPriorityArray[i]==hourReduceMinimumRequirement)
                        {
                            minimumRequirementIndex=i;
                        }

                        if (projReduceCostPriorityArray[i]==ProjReduceCostPriority::None)
                        {
                            projReduceCostPriorityArrayLength=i-1;
                            break;
                        }
                    }
                }
                break;

            case ProjTransType::Item:
            while select projParameters
                {
                    itemReduceMinimumRequirement=projParameters.ItemReduceMinimumRequirement;

                    projReduceCostPriorityArray[1]=projParameters.ItemReduceCostPriority1;
                    projReduceCostPriorityArray[2]=projParameters.ItemReduceCostPriority2;
                    projReduceCostPriorityArray[3]=projParameters.ItemReduceCostPriority3;
                    projReduceCostPriorityArray[4]=projParameters.ItemReduceCostPriority4;
                    projReduceCostPriorityArray[5]=projParameters.ItemReduceCostPriority5;
                    projReduceCostPriorityArrayLength=5;

                    //get actual length by stopping at None field.
                    for (i=1;i<=projReduceCostPriorityArrayLength;i++)
                    {
                        if (projReduceCostPriorityArray[i]==itemReduceMinimumRequirement)
                        {
                            minimumRequirementIndex=i;
                        }

                        if (projReduceCostPriorityArray[i]==ProjReduceCostPriority::None)
                        {
                            projReduceCostPriorityArrayLength=i-1;
                            break;
                        }
                    }
                }
                break;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmplItemId</Name>
				<Source><![CDATA[
    public EmplItemId parmEmplItemId(EmplItemId _emplItemId=emplItemId)
    {
        emplItemId = _emplItemId;

        return emplItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEstimateProjId</Name>
				<Source><![CDATA[
    public ProjId parmEstimateProjId(ProjId _estimateProjId=estimateProjId)
    {
        estimateProjId = _estimateProjId;

        return estimateProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentProjId</Name>
				<Source><![CDATA[
    public ProjId parmParentProjId(ProjId _parentProjId=parentProjId)
    {
        parentProjId = _parentProjId;

        return parentProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjActivityNumber</Name>
				<Source><![CDATA[
    public ProjActivityNumber parmProjActivityNumber(ProjActivityNumber _projActivityNumber=projActivityNumber)
    {
        projActivityNumber = _projActivityNumber;

        return projActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjCategoryGroupId</Name>
				<Source><![CDATA[
    public ProjCategoryGroupId parmProjCategoryGroupId(ProjCategoryGroupId _projCategoryGroupId=projCategoryGroupId)
    {
        projCategoryGroupId = _projCategoryGroupId;

        return projCategoryGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjCategoryId</Name>
				<Source><![CDATA[
    public ProjCategoryId parmProjCategoryId(ProjCategoryId _projCategoryId=projCategoryId)
    {
        projCategoryId = _projCategoryId;

        return projCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjCostGroupId</Name>
				<Source><![CDATA[
    public ProjCostGroupId parmProjCostGroupId(ProjCostGroupId _projCostGroupId=projCostGroupId)
    {
        projCostGroupId = _projCostGroupId;

        return projCostGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjDate</Name>
				<Source><![CDATA[
    public TransDate parmProjDate(TransDate _projDate=projDate)
    {
        projDate = _projDate;

        return projDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjId</Name>
				<Source><![CDATA[
    public ProjId parmProjId(ProjId _projId=projId)
    {
        projId = _projId;

        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjTransId</Name>
				<Source><![CDATA[
    public ProjTransIdBase parmProjTransId(ProjTransIdBase _projTransId=projTransId)
    {
        projTransId = _projTransId;

        return projTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjTransIdOrig</Name>
				<Source><![CDATA[
    public ProjTransIdBase parmProjTransIdOrig(ProjTransIdBase _projTransIdOrig=projTransIdOrig)
    {
        projTransIdOrig = _projTransIdOrig;

        return projTransIdOrig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjTransType</Name>
				<Source><![CDATA[
    public ProjTransType parmProjTransType(ProjTransType _projTransType=projTransType)
    {
        projTransType = _projTransType;

        return projTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReduceForecastAmount</Name>
				<Source><![CDATA[
    public Amount parmReduceForecastAmount(Amount _reduceForecastAmount=reduceForecastAmount)
    {
        reduceForecastAmount = _reduceForecastAmount;

        return reduceForecastAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReduceForecastQty</Name>
				<Source><![CDATA[
    public Qty parmReduceForecastQty(Qty _reduceForecastQty=reduceForecastQty)
    {
        reduceForecastQty = _reduceForecastQty;

        return reduceForecastQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReduceLumpSumOnly</Name>
				<Source><![CDATA[
    public boolean parmReduceLumpSumOnly(boolean _reduceLumpSumOnly=reduceLumpSumOnly)
    {
        reduceLumpSumOnly = _reduceLumpSumOnly;

        return reduceLumpSumOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResource</Name>
				<Source><![CDATA[
    public ResourceRecId parmResource(ResourceRecId _resourceRecId = resourceRecId)
    {
        resourceRecId = _resourceRecId;

        return resourceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reduceForecast</Name>
				<Source><![CDATA[
    public boolean reduceForecast(Qty qty, Amount amount, ForecastModelId  forecastModelId='')
    {
        int i;
        int j;
        int level; //Indicates the priority, lump sum reduction has higher priority than normal forecast
        int initialLevel;
        container fieldList;
        ProjTransIdBase   forecastTransId;
        Qty qtyToReduce;
        Amount amountToReduce;
        Qty reducedQty;
        CostPrice reducedCostPrice;
        Map  reduceForecastMap;
        MapIterator mi;
        boolean isLumpSum;

        // Lump sum reduction has priority 1; Normal forecast reduction has priority 2
        #DEFINE.Priority(2)

        if (qty == 0 || amount == 0)
        {
            return true;
        }

        if (!havePriorityList)
        {
            havePriorityList=this.getPriorityList();
        }

        qtyToReduce=qty;
        amountToReduce=amount;

        if (this.parmReduceLumpSumOnly())
        {
            initialLevel=1;
        }
        else
        {
            initialLevel=0;
        }

        for (level=initialLevel; level<#Priority ; level++)
        {
            for (i=projReduceCostPriorityArrayLength;i>=minimumRequirementIndex;i--)
            {
                fieldList=conNull();
                reduceForecastMap=null;

                for (j=1; j<=i;j++)
                {
                    fieldList +=projReduceCostPriorityArray[j];
                }

                if (conLen(fieldList)>0)
                {
                    reduceForecastMap = this.constructQuery(fieldList,forecastModelId, level);
                }

                if (reduceForecastMap)
                {
                    mi = new MapIterator(reduceForecastMap);
                    mi.begin();
                    while (mi.more() && amountToReduce != 0)
                    {
                        [forecastTransId,reducedQty,reducedCostPrice]  = mi.key();
                        isLumpSum                                      = mi.value();
                        if (isLumpSum)  //lumpsum
                        {
                            if (reducedCostPrice*1>=amountToReduce) //have enough to reduce
                            {
                                reducedQty=0;
                                reducedCostPrice=amountToReduce;
                                amountToReduce=0;
                            }
                            else
                            {
                                reducedQty=0;
                                amountToReduce=amountToReduce-reducedCostPrice*1;
                            }
                        }
                        else   //not lumpsum
                        {
                            reducedCostPrice=0;

                            if (qtyToReduce<=reducedQty)  //We have enough to reduce
                            {
                                reducedQty=qtyToReduce;
                                qtyToReduce=0;
                                amountToReduce=0;
                            }
                            else  //We do not have enough to reduce
                            {
                                qtyToReduce=qtyToReduce-reducedQty;
                                amountToReduce=CurrencyExchangeHelper::amount(qtyToReduce * amount / qty);
                            }
                        }
                        this.forecastMinus(forecastTransId,forecastModelId,reducedQty,reducedCostPrice);
                        // for none lump, return true if QtyToReduce is zero; for lump, return true if amountToReduce is zero
                        if ((isLumpSum  && amountToReduce==0)
                        ||  (!isLumpSum && qtyToReduce==0))
                        {
                            return true;
                        }
                        mi.next();
                    }
                }
            }
        }
        // Not find enough forecast to reduce, will return false;
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnForecast</Name>
				<Source><![CDATA[
    public void returnForecast(Qty qty, Amount amount, ForecastModelId modelId='' )
    {
        ProjForecastReductionHistory    projForecastReductionHistory;
        Qty remainQty = qty;
        Qty reducedQty;
        Amount remainAmount=amount;
        CostPrice reducedCostPrice;
        boolean recovered;

        ttsbegin;
        while select forupdate projForecastReductionHistory
    order by projForecastReductionHistory.ReduceOrder desc
    where projForecastReductionHistory.ProjTransId == this.parmProjTransIdOrig()
     &&   projForecastReductionHistory.ProjTransType == this.parmProjTransType()
     &&   projForecastReductionHistory.ModelId == modelId
        {
            if (projForecastReductionHistory.CostPriceReduced==0) // not lump sum
            {
                if (remainQty >= projForecastReductionHistory.QtyReduced) //not enough forecast to return
                {
                    reducedQty = projForecastReductionHistory.QtyReduced;
                    reducedCostPrice = 0;
                    this.forecastPlus(projForecastReductionHistory.ForecastTransId,modelId,reducedQty,reducedCostPrice);
                    remainQty=remainQty-reducedQty;
                    remainAmount=CurrencyExchangeHelper::amount(remainAmount - amount / qty * reducedQty);
                    projForecastReductionHistory.delete();
                }
                else  //enough forecast to return
                {
                    reducedQty= remainQty;
                    reducedCostPrice = 0;
                    recovered=this.forecastPlus(projForecastReductionHistory.ForecastTransId,modelId,reducedQty,reducedCostPrice);
                    remainQty=0;
                    remainAmount=CurrencyExchangeHelper::amount(remainAmount - amount / qty * reducedQty);
                    if (recovered)
                    {
                        projForecastReductionHistory.QtyReduced -=reducedQty;
                        projForecastReductionHistory.CostPriceReduced =0;
                        projForecastReductionHistory.update();
                    }
                    else //If the forecast rec not exists, delete the history rec
                    {
                        projForecastReductionHistory.delete();
                    }
                }

                if (remainQty<=0)
                {
                    break;
                }
            }
            else if (projForecastReductionHistory.QtyReduced==0) //lump sum
            {
                if (remainAmount >=projForecastReductionHistory.CostPriceReduced * 1) //not enough forecast to return
                {
                    reducedCostPrice=projForecastReductionHistory.CostPriceReduced;
                    reducedQty=0;
                    this.forecastPlus(projForecastReductionHistory.ForecastTransId,modelId,reducedQty,reducedCostPrice);
                    remainAmount=remainAmount-projForecastReductionHistory.CostPriceReduced*1;
                    remainQty = remainQty - (reducedCostPrice*1/(amount/qty));
                    projForecastReductionHistory.delete();
                }
                else //enough forecast to return
                {
                    reducedCostPrice=remainAmount/1;
                    reducedQty=0;
                    recovered=this.forecastPlus(projForecastReductionHistory.ForecastTransId,modelId,reducedQty,reducedCostPrice);
                    remainAmount=0;
                    remainQty = remainQty - (reducedCostPrice*1/(amount/qty));
                    if (recovered)
                    {
                        projForecastReductionHistory.CostPriceReduced -= reducedCostPrice;
                        projForecastReductionHistory.QtyReduced=0;
                        projForecastReductionHistory.update();
                    }
                    else
                    {
                        projForecastReductionHistory.delete();
                    }
                }
                if (remainAmount<=0)
                {
                    break;
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        ListEnumerator      listEnum;
        ForecastModelId     forecastModelId;
        boolean             isEnoughBudget =true;
        ProjForecastReductionHistory projForecastReductionHistory;
        
        if (this.parmReduceForecastQty()==0
        ||this.parmReduceForecastAmount()==0
        || !this.parmProjTransId())
        {
            return;
        }
        
        // Reduce the forecast for every forecast models which enable the forecast reduction
        if (this.parmReduceForecastQty() > 0 ||
            (this.parmReduceForecastQty() < 0 && !ProjForecastReductionHistory::existProjTransId(this.parmProjTransIdOrig())))
        {
            forecastModelList=this.getForecastModelList();
            if (forecastModelList.empty())
            {
                return;
            }

            listEnum=forecastModelList.getEnumerator();
            listEnum.reset();

            while (listEnum.moveNext())
            {
                forecastModelId=listEnum.current();
                isEnoughBudget=this.reduceForecast(this.parmReduceForecastQty(),this.parmReduceForecastAmount(),forecastModelId);
                if ( this.checkRemainingBudgetOnForecastModel(forecastModelId)  &&
                this.checkRemainingBudgetOnProject(this.parmProjId())      &&
                (!isEnoughBudget))
                {
                    throw error(strFmt("@SYS310325",forecastModelId));
                }
            }
        }
        else  //return the forecast which was reduced before
        {
            while select projForecastReductionHistory
            group by ModelId
            where projForecastReductionHistory.ProjTransId==this.parmProjTransIdOrig()
            {
                this.returnForecast(-this.parmReduceForecastQty(),-this.parmReduceForecastAmount(), projForecastReductionHistory.ModelId );
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCostControl</Name>
				<Source><![CDATA[
    public static ProjForecastReduce newCostControl (CostControlTransCommittedCost costControlTransCommittedCost, Qty forecastReducedQty, Amount forecastReducedAmount)
    {
        ProjForecastReduce  projForecastReduce;
        ProjControlId       controlId;

        switch (costControlTransCommittedCost.ProjTransType)
        {
            case ProjTransType::Cost:
                projForecastReduce = new ProjForecastReduceCost();
                break;

            case ProjTransType::Hour:
                projForecastReduce = new ProjForecastReduceHour();
                break;

            case ProjTransType::Item:
                projForecastReduce = new ProjForecastReduceItem();
                break;

            default:
                throw error(Error::missingOverload(funcName()));
        }

        projForecastReduce.parmProjTransType(costControlTransCommittedCost.ProjTransType);
        projForecastReduce.parmReduceForecastQty(forecastReducedQty);
        projForecastReduce.parmReduceForecastAmount(forecastReducedAmount);

        projForecastReduce.parmReduceLumpSumOnly(false);

        projForecastReduce.parmProjId(costControlTransCommittedCost.ProjId);
        projForecastReduce.parmParentProjId(ProjTable::find(costControlTransCommittedCost.ProjId).ParentId);
        projForecastReduce.parmEstimateProjId(ProjTable::find(costControlTransCommittedCost.ProjId).wipProject);
        if (costControlTransCommittedCost.ProjTransType == ProjTransType::Item)
        {
            projForecastReduce.parmEmplItemId(costControlTransCommittedCost.EmplItemId);
        }
        else
        {
            projForecastReduce.parmResource(costControlTransCommittedCost.Resource);
        }
        projForecastReduce.parmProjActivityNumber(costControlTransCommittedCost.ActivityNumber);
        projForecastReduce.parmProjCategoryId(costControlTransCommittedCost.CategoryId);
        projForecastReduce.parmProjCategoryGroupId(ProjCategory::find(costControlTransCommittedCost.CategoryId).CategoryGroupId);

        if (projForecastReduce.parmEstimateProjId())
        {
            controlId=ProjWIPTable::find(projForecastReduce.parmEstimateProjId()).ControlId;
        }
        else
        {
            controlId=ProjParameters::find().CostTemplate;
        }

        if (controlId)
        {
            projForecastReduce.parmProjCostGroupId(ProjControlCategory::findCategoryGroup(controlId,
                                                                                      costControlTransCommittedCost.CategoryId));
        }

        projForecastReduce.parmProjDate(costControlTransCommittedCost.CommittedDate);
        projForecastReduce.parmProjTransId(costControlTransCommittedCost.ProjTransId);
        projForecastReduce.parmProjTransIdOrig(costControlTransCommittedCost.ProjTransId);

        return projForecastReduce;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForecastReturn</Name>
				<Source><![CDATA[
    public static ProjForecastReduce newForecastReturn (ProjTransIdBase projTransId, ProjTransType transType, Qty forecastReducedQty, Amount forecastReducedAmount)
    {
        ProjForecastReduce  projForecastReduce;

        if (forecastReducedQty>0 || forecastReducedAmount>0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        switch (transType)
        {
            case ProjTransType::Cost:
                projForecastReduce = new ProjForecastReduceCost();
                break;

            case ProjTransType::Hour:
                projForecastReduce = new ProjForecastReduceHour();
                break;

            case ProjTransType::Item:
                projForecastReduce = new ProjForecastReduceItem();
                break;

            default:
                throw error(Error::missingOverload(funcName()));
        }
        projForecastReduce.parmProjTransIdOrig(projTransId);
        projForecastReduce.parmProjTransId(projTransId);

        projForecastReduce.parmProjTransType(transType);
        projForecastReduce.parmReduceForecastQty(forecastReducedQty);
        projForecastReduce.parmReduceForecastAmount(forecastReducedAmount);

        return projForecastReduce;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProjForecastReduce</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes <c>ProjForecastReduce</c> based on transaction type.
    /// </summary>
    /// <param name = "_projTrans">
    ///     A <c>ProjTrans</c> table buffer.
    /// </param>
    /// <returns>
    ///     A new instance of <c>ProjForecastReduce</c>.
    /// </returns>
    protected static ProjForecastReduce initializeProjForecastReduce(ProjTrans _projTrans)
    {
        ProjForecastReduce  projForecastReduceLocal;
        switch (_projTrans.transType())
        {
            case ProjTransType::Cost:
                projForecastReduceLocal = new ProjForecastReduceCost();
                break;

            case ProjTransType::Hour:
                projForecastReduceLocal = new ProjForecastReduceHour();
                break;

            case ProjTransType::Item:
                projForecastReduceLocal = new ProjForecastReduceItem();
                break;
            default:  
                projForecastReduceLocal = ProjForecastReduce::getProjForecastReduce_CustomType(_projTrans);
                break;
        }
        return projForecastReduceLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjForecastReduce_CustomType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the new instance of the <c>ProjForecastReduce</c>.
    /// </summary>
    /// <param name = "_projTrans">
    ///     A <c>ProjTrans</c> table buffer.
    /// </param>
    /// <returns>
    ///     A new instance of <c>ProjForecastReduce</c>.
    /// </returns>
    protected static ProjForecastReduce getProjForecastReduce_CustomType(ProjTrans _projTrans)
    {
        return null;    
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProjPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the <c>ProjForecastReduce</c>.
    /// </summary>
    /// <param name = "projTrans">
    ///     A <c>ProjTrans</c> table buffer.
    /// </param>
    /// <param name = "forecastReducedQty">
    ///     Forecast reduced quantity.
    /// </param>
    /// <param name = "forecastReducedAmount">
    ///     Forecast reduced amount.
    /// </param>
    /// <returns>
    /// An instance of <c>ProjForecastReduce</c>.
    /// </returns>
    public static ProjForecastReduce newProjPost (ProjTrans projTrans, Qty forecastReducedQty, Amount forecastReducedAmount)
    {
        ProjControlId       controlId;
        ProjForecastReduce  projForecastReduce = ProjForecastReduce::initializeProjForecastReduce(projTrans);
        if (!projForecastReduce)
        {
            throw error(Error::missingOverload(funcName()));
        }

        projForecastReduce.parmProjTransType(projTrans.transType());
        projForecastReduce.parmReduceForecastQty(forecastReducedQty);
        projForecastReduce.parmReduceForecastAmount(forecastReducedAmount);

        projForecastReduce.parmProjId(projTrans.projId());
        projForecastReduce.parmParentProjId(ProjTable::find(projTrans.projId()).ParentId);
        projForecastReduce.parmEstimateProjId(ProjTable::find(projTrans.projId()).wipProject);

        projForecastReduce.parmProjActivityNumber(projTrans.activityNumber());
        projForecastReduce.parmProjCategoryId(projTrans.categoryId());
        projForecastReduce.parmProjCategoryGroupId(ProjCategory::find(projTrans.categoryId()).CategoryGroupId);

        if (projForecastReduce.parmEstimateProjId())
        {
            controlId=ProjWIPTable::find(projForecastReduce.parmEstimateProjId()).ControlId;
        }
        else
        {
            controlId=ProjParameters::find().CostTemplate;
        }

        if (controlId)
        {
            projForecastReduce.parmProjCostGroupId(ProjControlCategory::findCategoryGroup(controlId,
                                                                                      projTrans.categoryId()));
        }

        if (projTrans.transType() == ProjTransType::Item)
        {
            projForecastReduce.parmEmplItemId(projTrans.projEmplItemId());
        }
        else
        {
            projForecastReduce.parmResource(projTrans.resource());
        }

        projForecastReduce.parmProjDate(projTrans.transDate());

        return projForecastReduce;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newVirtual</Name>
				<Source><![CDATA[
    public static ProjForecastReduce newVirtual(ProjTransIdBase projTransId, ProjTransType transType)
    {
        ProjForecastReduce  projForecastReduce;

        projForecastReduce=new ProjForecastReduceVirtual();
        projForecastReduce.parmProjTransId(projTransId);
        projForecastReduce.parmProjTransType(transType);

        return projForecastReduce;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>