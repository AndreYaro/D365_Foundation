<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjWbsServerInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjWbsServerInteraction extends ServerInteraction
{
    HierarchyIdBase                     hierarchyId;
    WBSMode                             modeId;
    ProjWbsSessionContextDataContract       sessionContext;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setSessionContext</Name>
				<Source><![CDATA[
    public void setSessionContext(HierarchicalGridSessionContext _sessionContext)
    {
        sessionContext = _sessionContext as ProjWbsSessionContextDataContract;
        if (sessionContext != null)
        {
            hierarchyId = sessionContext.parmHierarchyId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInteractionContext</Name>
				<Source><![CDATA[
    public void setInteractionContext(IInteractionContext _interactionContext)
    {
        ProjWbsInteractionContextDataContract interactionContext;
        interactionContext = _interactionContext as ProjWbsInteractionContextDataContract;

        if (interactionContext != null)
        {
            modeId = str2enum(modeId, interactionContext.parmModeId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setModeId</Name>
				<Source><![CDATA[
    public void setModeId(WBSMode _modeId = WBSMode::SchedulePlanning)
    {
        modeId = _modeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentId</Name>
				<Source><![CDATA[
    protected CollectionDataContract getCurrentId()
    {
        List items = new List(Types::Class);
        HierarchicalGridCurrentIdContract hGridId = HierarchicalGridCurrentIdContract::construct();
        switch (this.modeId)
        {
            case WBSMode::SchedulePlanning:
                int64 maxId = ProjPlanVersion::getMaxTaskId(hierarchyId, sessionContext.parmWBSType() == ProjWBSType::Project);
                hGridId.parmCurrentId(int642str(maxId));
                break;

            default: //default implementation that can be enhanced if needed.
                hGridId.parmCurrentId(int2str(100));
                break;
        }

        items.addEnd(hGridId);
        CollectionDataContract dataCollection = CollectionDataContract::construct();
        dataCollection.parmItems(items);
        return dataCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getServerActions</Name>
				<Source><![CDATA[
    protected IServerActions getServerActions()
    {
        IServerActions serverActions;

        switch (this.modeId)
        {
            case WBSMode::SchedulePlanning:
                serverActions = ProjWbsSchedulePlanningServerActions::construct(sessionContext);
                break;
            case WBSMode::CostPlanning:
                serverActions = ProjWbsCostPlanningServerActions::construct(sessionContext);
                break;
            case WBSMode::Tracking:
                serverActions = ProjWbsTrackingServerActions::construct(hierarchyId);
                break;
            default:
                serverActions = null;
                break;
        }

        return serverActions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeDataRetrievalAction</Name>
				<Source><![CDATA[
    public CollectionDataContract executeDataRetrievalAction(ActionDataContract _action)
    {
        IServerActions          serverActions;
        CollectionDataContract  dataCollection;

        serverActions = this.getServerActions();

        if (serverActions != null)
        {
            dataCollection = serverActions.executeDataRetrievalAction(_action);
        }

        if (dataCollection == null)
        {
            dataCollection = CollectionDataContract::construct();
        }

        return dataCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeAction</Name>
				<Source><![CDATA[
    protected str executeAction(ActionDataContract _action)
    {
        str                     result;
        IServerActions          serverActions;

        serverActions = this.getServerActions();

        if (serverActions != null)
        {
            return serverActions.executeAction(_action);
        }

        return "";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>