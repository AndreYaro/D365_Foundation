<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesReport_Invoice4Paym_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesReport_Invoice4Paym_RU extends SalesPurchReport_Invoice4Paym_RU implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getModule</Name>
				<Source><![CDATA[
    protected ModuleInventPurchSales getModule()
    {
        return ModuleInventPurchSales::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableId</Name>
				<Source><![CDATA[
    protected tableId getTableId()
    {
        return tablenum(CustInvoice4PaymJour_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes currency.
    /// </summary>
    protected void initCurrency()
    {
        if (invoiceJour.CustVendInvoiceJour::getPrintStandardCurrency_RU())
        {
            header.CurrencyCode = CompanyInfoHelper::standardCurrency();
            exchRate            = invoiceJour.ExchRate;
            printInMST          = true;
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLineCategoryWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes line category weight.
    /// </summary>
    /// <returns><c>ItemGrossWeight</c> object.</returns>
    protected ItemGrossWeight initLineCategoryWeight()
    {
        ItemGrossWeight ret;

        if (dynamicData.Category)
        {
            ret = SalesLineForeignTradeCategory::find(invoiceTrans.InventTransId, invoiceTrans.dataAreaId).UnitWeight;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>offReportType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets report type.
    /// </summary>
    /// <returns>OffReportType_RU::SalesInvoice4Paym.</returns>
    protected OffReportType_RU offReportType()
    {
        return OffReportType_RU::SalesInvoice4Paym;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets order description.
    /// </summary>
    /// <returns><c>Description</c> object.</returns>
    protected Description orderDescription()
    {
        return this.lookupLabel(literalstr("@SYS7443"));
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareReportHeader</Name>
				<Source><![CDATA[
    protected void prepareReportHeader()
    {
        CustInvoice4PaymJour_RU             custInvoice4PaymJour = invoiceJour;

        super();
        header.DueDate         = header.DueDate ?
                                 header.DueDate :
                                 invoiceJour.DueDate; // Respite date

        SalesPurchReportCounteragentData_RU counteragentData = this.initContragentData(customer,
                                                                                       customerBankAccount,
                                                                                       invoiceJour.InvoiceAccount);
        header.CustName = counteragentData.parmName();
        header.CustBankAddress = strReplace(invoiceJour.deliveryAddress_RU(), '\n', '');
        header.CustINN = counteragentData.parmINN();
        header.CustKPP = counteragentData.parmKPP();

        CustPaymModeTable custPaymMode = custInvoice4PaymJour.SalesId                                        ?
                                         CustPaymModeTable::find(custInvoice4PaymJour.salesTable().PaymMode) :
                                         CustPaymModeTable::find(custInvoice4PaymJour.custInvoiceTable().PaymMode);

        if (costAllocationHistory)
        {
            VendInvoiceJour vendInvoiceJour = VendInvoiceJour::findRecId(costAllocationHistory.AllocatedInvoiceJourRecId);
            counteragentData = this.initCustVendData(VendTable::find(vendInvoiceJour.InvoiceAccount),
                                                                                    vendorBankAccount,
                                                                                    vendInvoiceJour.InvoiceAccount);

            header.VendBankAddress = counteragentData.fullAddress(true, true);
        }
        else
        {
            counteragentData       = this.initCompanyData(custInvoice4PaymJour.CompanyBankAccountId ?
                                                      custInvoice4PaymJour.CompanyBankAccountId :
                                                      (custPaymMode.AccountType == LedgerJournalACType::Bank ? custPaymMode.parmPaymAccount() : ""));

            header.VendBankAddress = counteragentData.fullAddress(true, true) + ', ' + counteragentData.fullBankAccountName();
        }

        header.VendName        = counteragentData.parmName();
        header.VendINN         = counteragentData.parmINN();
        header.VendKPP         = counteragentData.parmKPP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    protected void setParameters(PrintCopyOriginal   _printCopyOriginal = PrintCopyOriginal::Copy,
                                 CustVendInvoiceJour _invoiceJour       = null,
                                 RecordSortedList    _journalList       = null)
    {
        CustVendInvoiceJour localJour;

        if (_invoiceJour)
        {
            localJour = _invoiceJour;
        }
        else
        {
            localJour = new DictTable(tablenum(CustInvoice4PaymJour_RU)).makeRecord();
        }

        super(_printCopyOriginal, localJour, _journalList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets table Id.
    /// </summary>
    /// <returns><c>tableId</c> object.</returns>
    protected tableId transTableId()
    {
        return tablenum(CustInvoice4PaymTrans_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SalesReport_Invoice4Paym_RU launcher = new SalesReport_Invoice4Paym_RU();

        if (_args)
        {
            launcher.setParameters(_args.parmEnum(), _args.record(), _args.object());
            launcher.setCaller(_args.caller());
        }

        if (launcher.prompt())
        {
            launcher.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>