<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxDeliverySlip_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxDeliverySlip_BR</c> class integrates with the calculation of tax from the sales order lines by the
///    <see cref="T:DeliverySlipCalcTax_DeliverySlip_BR" />.
/// </summary>
/// <remarks>
///    This class is derived from the <c>Tax</c> class, and works as an extension of the main tax
/// </remarks>
class TaxDeliverySlip_BR extends Tax
{
    DeliverySlipCalcTax__DeliverySlip_BR  deliverySlipCalcTax;
    SalesLine           salesLine;

    Map                 orderBalances;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTaxAdjustmentTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add the collection of tax adjustments that can be used for tax adjustments
    /// </summary>
    protected void addTaxAdjustmentTypes()
    {
        super();

        if (deliverySlipCalcTax && deliverySlipCalcTax.useDetailsSalesTaxAdjustmentType())
        {
            this.addTaxAdjustmentType(TaxAdjustmentType::Detail);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowAdjustBaseAmountForTaxAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines whether the transaction supports adjusting the calculated base amount
    ///   when tax is included in item price and the users adjusts the tax amount.
    /// </summary>
    /// <returns>
    ///   true if adjusting the calculated base amount is supported; otherwise, false.
    /// </returns>
    public boolean allowAdjustBaseAmountForTaxAdjustment()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowSingleLineAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the transaction supports adjusting a single line.
    /// </summary>
    /// <returns>
    /// true if adjusting a single line is supported; otherwise, false.
    /// </returns>
    public boolean allowSingleLineAdjustment()
    {
        boolean allowSingleLineAdjustment;

        if (deliverySlipCalcTax)
        {
            allowSingleLineAdjustment = deliverySlipCalcTax.allowSingleLineAdjustment();
        }

        return allowSingleLineAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the tax.
    /// </summary>
    /// <returns>
    /// The tax
    /// </returns>
    TaxAmount calc()
    {
        TaxAmount                taxAmount;
        boolean                  moreLines;
        TaxBaseCur               baseAmount;
        AmountCur                lineAmount;

        Map                      amountInclTax   = new Map(Types::Container, Types::Real);
        Map                      amountExclTax   = new Map(Types::Container, Types::Real);
        RefRecId                 adjustRecId[];
        RefTableId               adjustedTableId[];
        AmountCur                pennyDiff[];
        Counter                  counter;
        Counter                  counterMax;
        TableId                  salesLineTableId;
        DiscPct                  cashDisc        = deliverySlipCalcTax.taxCashDiscPercent();
        RefRecId                 orderRecId;
        Percent                  endDiscPercent;

        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            return 0;
        }

        useAndConsumption_BR = deliverySlipCalcTax.useAndConsumption_BR();

        deliverySlipCalcTax.initCursor();
        moreLines = true;

        while (moreLines)
        {
            salesLine = deliverySlipCalcTax.nextLine() as SalesLine;

            if (deliverySlipCalcTax.lineExist())
            {
                if (!deliverySlipCalcTax.isNewLine())
                    continue;

                lineAmount = -deliverySlipCalcTax.transLineAmount();

                this.configureTaxForSalesLine();

                // get the line amount excluding tax (base amount)
                if (deliverySlipCalcTax.isTaxIncluded())
                {
                    baseAmount = this.amountExclTax(
                                        lineAmount,
                                        false,
                                        true,
                                        deliverySlipCalcTax.transQty(),
                                        salesLine.SalesUnit,
                                        salesLine.ItemId,
                                        salesLine.RecId,
                                        salesLine.TableId);
                }
                else
                {
                    baseAmount = lineAmount;
                }

                // deduct total discount from the base amount & line amount
                endDiscPercent = deliverySlipCalcTax.endDisc();
                if (endDiscPercent)
                {
                    baseAmount -= CurrencyExchangeHelper::amount(baseAmount, this.currencyCode()) * endDiscPercent / 100;
                    lineAmount -= CurrencyExchangeHelper::amount(lineAmount, this.currencyCode()) * endDiscPercent / 100;
                }

                // If this is a Tax included scenario then store the line amount and base amounts for later use.
                if (deliverySlipCalcTax.isTaxIncluded())
                {
                    amountInclTax.insert(this.taxTransOrigin(salesLine), lineAmount);
                    amountExclTax.insert(this.taxTransOrigin(salesLine), baseAmount);
                    taxIncludedInItemPrice = true;
                }

                // deduct non tax portion of the cash discount from the base amount
                if (this.taxParameters().TaxLessCashDisc)
                {
                    baseAmount        -= baseAmount        * cashDisc / 100;
                }

                salesLineTableId   = this.sourceTableId();

                this.insertLineInInternal(baseAmount,
                                          deliverySlipCalcTax.transQty() * -1,
                                          salesLine.SalesUnit,
                                          salesLine.ItemId,
                                          deliverySlipCalcTax.transPcsPrice(),
                                          salesLine.DefaultDimension,
                                          LedgerDimensionFacade::serviceCreateLedgerDimension(deliverySlipCalcTax.operationAccount(), salesLine.DefaultDimension),
                                          deliverySlipCalcTax.operationPosting());

                this.updateTaxationOriginOnTaxWorkTrans_BR(deliverySlipCalcTax.taxationOrigin());

                if (taxCalculateLine)
                {
                    taxAmount = this.calcTax();

                    this.saveInProcessTransaction();

                    if (!taxCalculateTotal &&
                        (deliverySlipCalcTax.exchRate(taxDate)      != ExchangeRateHelper::exchRate(sourceCurrencyCode, taxDate)      ||
                         deliverySlipCalcTax.exchRateSecondary(taxDate)  != ExchangeRateHelper::exchRateSecond(sourceCurrencyCode, taxDate)    ||
                         deliverySlipCalcTax.triangulation(taxDate) != Currency::triangulation(sourceCurrencyCode, taxDate))
                       )
                        this.adjustAmount(deliverySlipCalcTax.exchRate(taxDate),deliverySlipCalcTax.exchRateSecondary(taxDate));
                }

                orderRecId = deliverySlipCalcTax.orderLine_orderTable().RecId;
                orderBalances.insert(orderRecId, this.orderBalance(orderRecId) - lineAmount );
            }
            else
                moreLines   = false;
        }

        if (! this.checkTaxCodesInTotal())
        {
            throw error("@SYS22772");
        }

        if (taxCalculateTotal)
        {
            this.insertTotalInInternal(cashDisc);
            taxAmount = this.calcTax();
            this.saveTotalInProcessTransaction();
        }

        if (taxIncludedInItemPrice)
        {
            while select sum(SourceTaxAmountCur)
            from taxWorkTrans
            group by SourceTableId, SourceRecId
            where (taxWorkTrans.SourceTableId   == salesLineTableId ||
                   taxWorkTrans.SourceTableId   == tableNum(MarkupTrans)) &&
                  taxWorkTrans.TaxDirection    != TaxDirection::UseTax   &&
                  taxWorkTrans.TaxOrigin       != TaxOrigin::TaxReversed
            {
                if (amountInclTax.exists(this.taxWorkTransSource(taxWorkTrans)) &&
                    amountExclTax.exists(this.taxWorkTransSource(taxWorkTrans)))
                {
                    amountInclTax.insert(this.taxWorkTransSource(taxWorkTrans), CurrencyExchangeHelper::amount(amountInclTax.lookup(this.taxWorkTransSource(taxWorkTrans)), sourceCurrencyCode));
                    amountExclTax.insert(this.taxWorkTransSource(taxWorkTrans), CurrencyExchangeHelper::amount(amountExclTax.lookup(this.taxWorkTransSource(taxWorkTrans)), sourceCurrencyCode));

                    if ((amountExclTax.lookup(this.taxWorkTransSource(taxWorkTrans)) + taxWorkTrans.SourceTaxAmountCur) != amountInclTax.lookup(this.taxWorkTransSource(taxWorkTrans)))
                    {
                        counterMax++;
                        adjustRecId[counterMax] = taxWorkTrans.SourceRecId;
                        adjustedTableId[counterMax] = taxWorkTrans.SourceTableId;
                        pennyDiff[counterMax] = amountExclTax.lookup(this.taxWorkTransSource(taxWorkTrans)) +
                                                taxWorkTrans.SourceTaxAmountCur -
                                                amountInclTax.lookup(this.taxWorkTransSource(taxWorkTrans));
                    }
                }
            }
            if (counterMax)
            {
                for (counter = 1; counter <= counterMax; counter++)
                    this.adjustPennyDiff(pennyDiff[counter], adjustedTableId[counter], adjustRecId[counter]);
            }
        }

        this.roundTaxOnTaxGroup();

        taxAmount = this.totalTaxAmount();

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureTaxForSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Configure the delivery slip related tax for salesline record.
    /// </summary>
    private void configureTaxForSalesLine()
    {
        TaxCalculationDateType  taxCalculationDateType  = this.taxParameters().TaxCalculationDateType;
        TransDate               taxCalculationDate;

        switch (taxCalculationDateType)
        {
            case TaxCalculationDateType::DeliveryDate:
                taxCalculationDate = deliverySlipCalcTax.deliveryDate();
                break;

            case TaxCalculationDateType::DocumentDate:
                taxCalculationDate = deliverySlipCalcTax.documentDate();
                break;

            case TaxCalculationDateType::InvoiceDate:
                taxCalculationDate = deliverySlipCalcTax.invoiceDate();
                break;
        }

        this.insertIntersection(deliverySlipCalcTax.transTaxGroup(),
                                deliverySlipCalcTax.transTaxItemGroup(),
                                deliverySlipCalcTax.transTransId(),
                                this.transTxt(),
                                taxCalculationDate);

        if (! this.checkTaxCodesByLine())
            throw error("@SYS22772");
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAdjustmentDetailDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the tax adjustment detail for the specified tax source.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The table identity of the specified tax source.
    /// </param>
    /// <param name="_sourceRecId">
    /// The record identity of the specified tax source.
    /// </param>
    /// <returns>
    /// The description of the tax adjustment detail for the specified tax source.
    /// </returns>
    public TaxAdjustmentDetailDescription getTaxAdjustmentDetailDescription(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        return deliverySlipCalcTax.getTaxAdjustmentDetailDescription(_sourceTableId, _sourceRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAdjustmentDetailReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reference of the tax adjustment detail for the specified tax source.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The table identity of the specified tax source.
    /// </param>
    /// <param name="_sourceRecId">
    /// The record identity of the specified tax source.
    /// </param>
    /// <returns>
    /// The reference of the tax adjustment detail for the specified tax source.
    /// </returns>
    public TaxAdjustmentDetailReference getTaxAdjustmentDetailReference(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        return deliverySlipCalcTax.getTaxAdjustmentDetailReference(_sourceTableId, _sourceRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAdjustmentDetailType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type of the tax adjustment detail for the specified tax source.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The table identity of the specified tax source.
    /// </param>
    /// <param name="_sourceRecId">
    /// The record identity of the specified tax source.
    /// </param>
    /// <returns>
    /// The type of the tax adjustment detail for the specified tax source.
    /// </returns>
    public TaxAdjustmentDetailType getTaxAdjustmentDetailType(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        return deliverySlipCalcTax.getTaxAdjustmentDetailType(_sourceTableId, _sourceRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intialize the DeliverySlipCalcTax__DeliverySlip_BR object.
    /// </summary>
    /// <param name="_salesForm">
    /// DeliverySlipCalcTax__DeliverySlip_BR is set.
    /// </param>
    protected void init(DeliverySlipCalcTax__DeliverySlip_BR   _salesForm)
    {
        deliverySlipCalcTax        = _salesForm;
        taxModuleType          = TaxModuleType::Sales;

        taxDate                = deliverySlipCalcTax.invoiceDate();
        taxIncludedInItemPrice = deliverySlipCalcTax.isTaxIncluded();
        deliverySlipCalcTax.tax(this);

        this.setExchRates(deliverySlipCalcTax.currencyCode(), deliverySlipCalcTax.exchRate(), deliverySlipCalcTax.exchRateSecondary(), Currency::noYes2UnknownNoYes(deliverySlipCalcTax.triangulation(deliverySlipCalcTax.invoiceDate())), taxDate);
        this.setCashDiscount(deliverySlipCalcTax.taxCashDiscPercent(), 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPerLineTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads tax adjustments that are adjusting taxes for a specific line.
    /// </summary>
    /// <param name="_companyId">
    /// A value that specifies whether a tax adjustment can be located in another company. If they can, the
    /// current company and passed in company will be checked for adjustments.
    /// </param>
    /// <param name="_sourceTableId">
    /// The table ID of the transaction line.
    /// </param>
    /// <param name="_sourceRecId">
    /// The record ID of the transaction line.
    /// </param>
    protected void loadPerLineTaxAdjustments(SelectableDataArea _companyId, RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        TaxCalculationAdjustment taxCalculationAdjustment;

        taxCalculationAdjustment = TaxCalculationAdjustment::construct(taxWorkTrans, this);
        taxCalculationAdjustment.parmHeadingTableId(_sourceTableId);
        taxCalculationAdjustment.parmHeadingRecId(_sourceRecId);
        taxCalculationAdjustment.loadTaxAdjustments(_companyId, _sourceRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads tax adjustments that are adjusting taxes for a transaction.
    /// </summary>
    /// <param name="_amountInclTax">
    /// A collection of transaction amounts that include tax amounts.
    /// </param>
    protected void loadTaxAdjustments(Map _amountInclTax)
    {
        TaxCalculationAdjustment taxCalculationAdjustment;
        TmpTaxWorkTrans tmpTaxWorkTransLocal;

        if (this.allowSingleLineAdjustment())
        {
            tmpTaxWorkTransLocal.setTmpData(taxWorkTrans);
            while select SourceTableId, SourceRecId, DataAreaId from tmpTaxWorkTransLocal
                group by tmpTaxWorkTransLocal.SourceTableId, tmpTaxWorkTransLocal.SourceRecId, tmpTaxWorkTransLocal.DataAreaId
                where tmpTaxWorkTransLocal.HeadingTableId == headingTableId &&
                    tmpTaxWorkTransLocal.HeadingRecId == headingRecId
            {
                this.loadPerLineTaxAdjustments(tmpTaxWorkTransLocal.DataAreaId, tmpTaxWorkTransLocal.SourceTableId, tmpTaxWorkTransLocal.SourceRecId);
            }
        }
        else if (this.useSalesTaxAdjustments())
        {
            taxCalculationAdjustment = TaxCalculationAdjustment::construct(taxWorkTrans, this);

            if (taxCalculationAdjustment)
            {
                taxCalculationAdjustment.parmLineAmountIncludesTax(deliverySlipCalcTax.isTaxIncluded());
                taxCalculationAdjustment.parmAmountInclTaxMap(_amountInclTax);
                taxCalculationAdjustment.loadTaxAdjustments();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intialize a new instance of the <c>TaxDeliverySlip_BR</c> class.
    /// </summary>
    protected void new()
    {
        orderBalances = new Map(typeName2Type(extendedTypeStr(recId)), Types::Real);
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderBalance</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines the order balance amount based on the record id.
    /// </summary>
    /// <param name="_recId">
    /// Record id.
    /// </param>
    /// <returns>
    ///  Amounr.
    /// </returns>
    public AmountCur orderBalance(recId _recId)
    {
        AmountCur   orderBalance;

        if (orderBalances.exists(_recId))
        {
            orderBalance = orderBalances.lookup(_recId);
        }

        return orderBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the <c>RecId</c> of the transaction that is to be taxed. For instance, if the tax is called from a <c>SalesLine</c>, this method will return the <c>RecId</c> of that <c>SalesLine</c>.
    /// </summary>
    /// <returns>
    ///    The ID of the transaction to be taxed.
    /// </returns>
    /// <remarks>
    ///    This method is overridden by derived methods.
    /// </remarks>
    public recId sourceRecId()
    {
        return salesLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the <c>TableId</c> of the transaction that is to be taxed. That is, if the tax is called from a <c>SalesLine</c>, this method will return the <c>TableId </c>of the <c>SalesLine</c>.
    /// </summary>
    /// <returns>
    ///    The ID of the transaction to be taxed.
    /// </returns>
    /// <remarks>
    ///    This method is overridden by derived methods.
    /// </remarks>
    public RefTableId sourceTableId()
    {
        return salesLine.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTxt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the transaction text for the current tax transaction.
    /// </summary>
    /// <returns>
    ///    The <c>ItemId</c> value of the <c>SalesLine</c> record if present; otherwise the sales category of
    ///    the <c>SalesLine</c> record.
    /// </returns>
    protected TransTxt transTxt()
    {
        if (salesLine.ItemId)
            return(salesLine.ItemId);
        else
            return(EcoResCategory::find(salesLine.SalesCategory).Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSalesTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether to use sales tax adjustments.
    /// </summary>
    /// <returns>
    ///  true if sales tax adjustments should be used; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Returns always false.
    /// </remarks>
    public boolean useSalesTaxAdjustments()
    {
        boolean useSalesTaxAdjustment;

        if (deliverySlipCalcTax)
        {
            useSalesTaxAdjustment = deliverySlipCalcTax.useSalesTaxAdjustments();
        }

        return useSalesTaxAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intialize the new instance of <c>DeliverySlipCalcTax__DeliverySlip_BR</c> class.
    /// </summary>
    /// <param name="_salesForm">
    /// DeliverySlipCalcTax__DeliverySlip_BR
    /// </param>
    /// <returns>
    /// The new instance of <c>DeliverySlipCalcTax__DeliverySlip_BR</c> class.
    /// </returns>
    public static TaxDeliverySlip_BR construct(DeliverySlipCalcTax__DeliverySlip_BR   _salesForm)
    {
        TaxDeliverySlip_BR    taxDeliverySlip;
        ;

        taxDeliverySlip = new TaxDeliverySlip_BR();

        taxDeliverySlip.init(_salesForm);

        return taxDeliverySlip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the tax group.
    /// </summary>
    /// <param name="_dlvTermId">
    /// CustDlvTermId value is set.
    /// </param>
    /// <param name="_taxGroup">
    /// TaxGroup value is set.
    /// </param>
    /// <param name="_location">
    /// LogisticsLocationRecId value is set.
    /// </param>
    /// <returns>
    /// The tax group value.
    /// </returns>
    static TaxGroup custTaxGroup(CustDlvTermId _dlvTermId, TaxGroup _taxGroup, LogisticsLocationRecId _location = 0)
    {
        TaxGroup                     taxGroup;
        LogisticsLocationRoleType    locationRole;
        ;
        locationRole = DlvTerm::find(_dlvTermId).TaxLocationRole;

        if (_location && locationRole != LogisticsLocationRoleType::None && LogisticsLocation::find(_location).isRole(locationRole))
        {
            taxGroup = LogisticsLocationExt::find(_location).TaxGroup;
        }
        else
        {
            taxGroup = _taxGroup;
        }
        return taxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveFromDeliverySlip</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Update the temporary tax calculation table with packing slip transaction TableId and RecId
    ///     insert the records to Tax Transaction main table.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    /// A <c>TmpTaxWorkTrans</c> buffer..
    /// </param>
    /// <param name="_custPackingSlipJour">
    /// A <c>CustPackingSlipJour</c> buffer..
    /// </param>
    /// <param name="_salesLine">
    /// A <c>SalesLine</c> buffer..
    /// </param>
    Public Static void moveFromDeliverySlip(TmpTaxWorkTrans _tmpTaxWorkTrans, CustPackingSlipJour _custPackingSlipJour,
                                            SalesLine   _salesLine)
    {
        TaxTrans                taxTrans;
        CustPackingSlipTrans    custPackingSlipTrans;

        while select TableId,RecId from custPackingSlipTrans
                                where custPackingSlipTrans.SalesId        == _salesLine.SalesId
                                    && custPackingSlipTrans.InventTransId == _salesLine.InventTransId
                                    && custPackingSlipTrans.PackingSlipId == _custPackingSlipJour.PackingSlipId
									
        {
            while select forupdate _tmpTaxWorkTrans
                        where _tmpTaxWorkTrans.SourceTableId == _salesLine.TableId
                            &&_tmpTaxWorkTrans.SourceRecId   == _salesLine.RecId
            {
                ttsBegin;
                _tmpTaxWorkTrans.SourceTableId   = custPackingSlipTrans.TableId;
                _tmpTaxWorkTrans.SourceRecId     = custPackingSlipTrans.RecId;
                _tmpTaxWorkTrans.Voucher         = _custPackingSlipJour.LedgerVoucher;
                _tmpTaxWorkTrans.Update();
                ttsCommit;

                TaxDeliverySlip_BR taxDeliverySlip = new TaxDeliverySlip_BR();
                taxDeliverySlip.initFromTaxWorkTrans(taxTrans, _tmpTaxWorkTrans, _tmpTaxWorkTrans.TaxOrigin);
                taxTrans.insert();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>