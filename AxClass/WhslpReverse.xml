<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhslpReverse</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhslpReverse</c> class is used to reverse license plate.
/// </summary>
public class WhslpReverse
{
    ProdTable       prodTable;
    WHSUserId       userId;
    ItemId          itemId;
    WMSLocationId   wmsLocationId;
    Qty             physicalInvent;
    UnitIDBase      unitId;
    boolean         inFGLocation;
    WMSLocationId   defaultProdOutputLocation;
    ProdId          prodIdOfDefaultOutputLocation;

    private InventBatchId   inventBatchId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDefaultProdOutputLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the default production output location.
    /// </summary>
    /// <returns>
    ///     The default location report as finish has been posted to.
    /// </returns>
    private WMSLocationId getDefaultProdOutputLocation()
    {
        if (prodIdOfDefaultOutputLocation != prodTable.ProdId)
        {
            prodIdOfDefaultOutputLocation   = prodTable.ProdId;
            defaultProdOutputLocation       = prodTable.defaultOutputLocation(prodTable.ItemId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        }

        return defaultProdOutputLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buttonOk_clicked</Name>
				<Source><![CDATA[
	/// <summary>
	/// Reverses license plate when OK button is clicked.
	/// </summary>
	/// <param name="_prodId">
	/// Production order id.
	/// </param>
	/// <param name="_licensePlateId">
	/// License plate id.
	/// </param>
	/// <param name="_newQty">
	/// New quantity to be set on license plate.
	/// </param>
	/// <param name="_curQty">
	/// Current quantity on license plate.
	/// </param>
	/// <exception cref="Exception::Error">
	/// Exception is thrown when quantity is not changed.
	/// </exception>
	/// <exception cref="Exception::Error">
	/// Exception is thrown when production id or license plate id is not defined.
	/// </exception>
    public void buttonOk_clicked(ProdId _prodId,
        WHSLicensePlateId _licensePlateId,
        Qty               _newQty,
        Qty               _curQty)
    {
        if (_prodId && _licensePlateId)
        {
            if (itemId
                && PdsGlobal::pdsIsCWItem(itemId)) 
            {
                throw error("@WAX:ReverseLicensePlateIsNotSupportedForCatchWeightEnabledItems");
            }

            if (_newQty == _curQty)
            {
                throw error("@WAX3647");
            }

            if (_newQty > 0 || (_newQty == 0 && Box::yesNo("@WAX3648", DialogButton::No, "@SYS24514")))
            {
                if (!this.isProdTableSet())
                {
                    this.parmProdTable(ProdTable::find(_prodId));
                }

                this.reverseLP(_licensePlateId,
                               _newQty - _curQty,
                               this.parmInFGLocation(),
                               _newQty == 0);
            }
            else
            {
                return;
            }
        }
        else
        {
            throw error("@WAX3649");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelLPWork</Name>
				<Source><![CDATA[
	/// <summary>
	/// Cancels the work which has specific target license plate id.
	/// </summary>
	/// <param name="_licensePlateId">
	/// Target license plate id of the work to be cancelled.
	/// </param>
    public void cancelLPWork(WHSLicensePlateId _licensePlateId)
    {
        WHSWorkTable    workTable;

        select firstonly WorkId from workTable
            where workTable.TargetLicensePlateId == _licensePlateId;

        WHSWorkTable::cancelWork(workTable.WorkId, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProdTableSet</Name>
				<Source><![CDATA[
	/// <summary>
	/// Determines whether <c>ProdTable</c> record is set to the instance.
	/// </summary>
	/// <returns>
	/// True if the reocrd is set to the instance.
	/// </returns>
    public boolean isProdTableSet()
    {
        return prodTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveLPToFG</Name>
				<Source><![CDATA[
	/// <summary>
	/// Moves items in the license plate to finished goods location.
	/// </summary>
	/// <param name="_licensePlateId">
	/// License plate id.
	/// </param>
	/// <param name="_reverseQty">
	/// Reverse quantity.
	/// </param>
	/// <returns>
	/// The item quantity left in the original location.
	/// </returns>
    public container moveLPToFG(WHSLicensePlateId _licensePlateId, Qty _reverseQty)
    {
        InventDim       tmpInventDim;
        InventDim       inventDim;
        InventSum       inventSum;
        WMSLocationId   origLocationId;
        Qty             remainingQty;

        tmpInventDim = prodTable.inventDim();

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            select firstonly ItemId, PhysicalInvent, InventDimId from inventSum
                where inventSum.InventSiteId        == tmpInventDim.InventSiteId        &&
                      inventSum.InventLocationId    == tmpInventDim.InventLocationId    &&
                      inventSum.LicensePlateId      == _licensePlateId                  &&
                      inventSum.ClosedQty           == NoYes::No                        &&
                      inventSum.PhysicalInvent      != 0;

            inventDim = InventDim::find(inventSum.InventDimId);
        }
        else
        {
            select firstonly ItemId, PhysicalInvent from inventSum
                join inventDim
                where inventSum.InventDimId         == inventDim.InventDimId            &&
                      inventDim.InventSiteId        == tmpInventDim.InventSiteId        &&
                      inventDim.InventLocationId    == tmpInventDim.InventLocationId    &&
                      inventDim.LicensePlateId      == _licensePlateId                  &&
                      inventSum.ClosedQty           == NoYes::No                        &&
                      inventSum.PhysicalInvent      != 0;
        }

        origLocationId = inventDim.wmsLocationId;

        remainingQty = inventSum.PhysicalInvent + _reverseQty;

        if (inventSum.PhysicalInvent > WHSInventOnHand::getPhysicalAvailQty(inventSum.ItemId, inventDim))
        {
            WHSReservation::staticRemoveReservation(inventSum.ItemId,
                                                        inventDim.InventDimId,
                                                        inventSum.PhysicalInvent,
                                                        InventTransType::Production,
                                                        prodTable.ProdId,
                                                        prodTable.InventTransId);
        }

        WHSWorkCreateMovementBasic::createBasicMovementWork(userId,
                                                            inventSum.ItemId,
                                                            inventSum.PhysicalInvent,
                                                            InventTableModule::find(inventSum.ItemId, ModuleInventPurchSales::Invent).UnitId,
                                                            inventDim,
                                                            _licensePlateId,
                                                            origLocationId,
                                                            this.getDefaultProdOutputLocation(),
                                                            _licensePlateId,
                                                            inventDim.InventStatusId,
                                                            inventDim.InventStatusId);

        return [origLocationId, remainingQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveRemainingBack</Name>
				<Source><![CDATA[
	/// <summary>
	/// Creates movement work for remaining items.
	/// </summary>
	/// <param name="_licensePlateId">
	/// License plate id of the moved items.
	/// </param>
	/// <param name="_qty">
	/// Quantity to be moved.
	/// </param>
	/// <param name="_locationId">
	/// Location to move.
	/// </param>
    public void moveRemainingBack(WHSLicensePlateId _licensePlateId, Qty _qty, WMSLocationId _locationId)
    {
        InventDim   inventDim;
        InventSum   inventSum;

        inventDim = prodTable.inventDim();
        inventDim.wmsLocationId = this.getDefaultProdOutputLocation();
        inventDim.LicensePlateId = _licensePlateId;
        inventDim.inventBatchId = this.parmInventBatchId();

        inventDim = InventDim::findOrCreate(inventDim);

        if (_qty > WHSInventOnHand::getPhysicalAvailQty(prodTable.ItemId, inventDim))
        {
            WHSReservation::staticRemoveReservation(prodTable.ItemId,
                                                        inventDim.InventDimId, _qty,
                                                        InventTransType::Production,
                                                        prodTable.ProdId,
                                                        prodTable.InventTransId);
        }

        WHSWorkCreateMovementBasic::createBasicMovementWork(userId,
                                                            prodTable.ItemId,
                                                            _qty,
                                                            InventTableModule::find(inventSum.ItemId, ModuleInventPurchSales::Invent).UnitId,
                                                            inventDim,
                                                            _licensePlateId,
                                                            inventDim.wmsLocationId,
                                                            _locationId,
                                                            _licensePlateId,
                                                            inventDim.InventStatusId,
                                                            inventDim.InventStatusId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
	/// <summary>
	/// Constructor method taking <c>ProdTable</c> record as parameter.
	/// </summary>
	/// <param name="_prodTable">
	/// <c>ProdTable</c> record.
	/// </param>
    public void new(ProdTable _prodTable)
    {
        prodTable = _prodTable;
        userId    = WHSParameters::find().GenericWorkUserId;       
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInFGLocation</Name>
				<Source><![CDATA[
    public boolean parmInFGLocation(boolean _inFGLocation = inFGLocation)
    {
        inFGLocation = _inFGLocation;

        return inFGLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPhysicalInvent</Name>
				<Source><![CDATA[
    public Qty parmPhysicalInvent(Qty _physicalInvent = physicalInvent)
    {
        physicalInvent = _physicalInvent;

        return physicalInvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdTable</Name>
				<Source><![CDATA[
    ProdTable parmProdTable(ProdTable _prodTable = prodTable)
    {
        prodTable = _prodTable;

        return prodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitid</Name>
				<Source><![CDATA[
    public UnitIDBase parmUnitid(UnitIDBase _unitId = unitId)
    {
        unitId = _unitId;

        return unitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWmsLocationId</Name>
				<Source><![CDATA[
    public WMSLocationId parmWmsLocationId(WMSLocationId _wmsLocationId = wmsLocationId)
    {
        wmsLocationId = _wmsLocationId;

        return wmsLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventBatchId</Name>
				<Source><![CDATA[
    public WMSLocationId parmInventBatchId(InventBatchId _inventBatchId = inventBatchId)
    {
        inventBatchId = _inventBatchId;

        return inventBatchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFields</Name>
				<Source><![CDATA[
	/// <summary>
	/// Populates fields of the instance.
	/// </summary>
	/// <param name="_inventDim">
	/// Dimensions to be used to populate.
	/// </param>
	/// <param name="_licensePlateId">
	/// License plate id to be used to populate.
	/// </param>
    public void populateFields(InventDim   _inventDim, WHSLicensePlateId   _licensePlateId)
    {
        InventDim   tmpInventDim;
        InventSum   inventSum;

        tmpInventDim = _inventDim;
        
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            select firstonly ItemId, PhysicalInvent, wmsLocationId, InventBatchId from inventSum
            where inventSum.InventLocationId    == tmpInventDim.InventLocationId    &&
                  inventSum.LicensePlateId      == _licensePlateId                  &&
                  inventSum.ClosedQty           == NoYes::No                        &&
                  inventSum.PhysicalInvent      != 0;

            this.parmWmsLocationId(inventSum.wmsLocationId);
            this.parmItemId(inventSum.ItemId);
            this.parmPhysicalInvent(inventSum.PhysicalInvent);
            this.parmUnitid(InventTableModule::find(inventSum.ItemId, ModuleInventPurchSales::Invent).UnitId);
            this.parmInventBatchId(inventSum.InventBatchId);

            if (inventSum.wmsLocationId == this.getDefaultProdOutputLocation())
            {
                this.parmInFGLocation(true);
            }
        }
        else
        {
            InventDim inventDim;

            select firstonly ItemId, PhysicalInvent from inventSum
            join inventDim
            where inventSum.InventDimId         == inventDim.InventDimId            &&
                  inventDim.InventLocationId    == tmpInventDim.InventLocationId    &&
                  inventDim.LicensePlateId      == _licensePlateId                  &&
                  inventSum.ClosedQty           == NoYes::No                        &&
                  inventSum.PhysicalInvent      != 0;

			this.parmWmsLocationId(inventDim.wmsLocationId);
			this.parmItemId(inventSum.ItemId);
			this.parmPhysicalInvent(inventSum.PhysicalInvent);
			this.parmUnitid(InventTableModule::find(inventSum.ItemId, ModuleInventPurchSales::Invent).UnitId);
			this.parmInventBatchId(inventDim.inventBatchId);

            if (inventDim.wmsLocationId == this.getDefaultProdOutputLocation())
            {
                this.parmInFGLocation(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodIdField_modified</Name>
				<Source><![CDATA[
	/// <summary>
	/// Handles when Production ID field is modified.
	/// </summary>
	/// <param name="_prodId">
	/// Modified production id.
	/// </param>
    public void prodIdField_modified(str  _prodId)
    {
        if (_prodId != '')
        {
            prodTable = ProdTable::find(_prodId);
            this.parmProdTable(prodTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseLP</Name>
				<Source><![CDATA[
	/// <summary>
	/// Reverses license plate.
	/// </summary>
	/// <param name="_licensePlateId">
	/// License plate id.
	/// </param>
	/// <param name="_reverseQty">
	/// Quantity to be reversed.
	/// </param>
	/// <param name="_inFGLocation">
	/// Determines whether the license plate is in Finished Goods location.
	/// </param>
	/// <param name="_removePallet">
	/// Determines whether pallet is removed.
	/// </param>
	/// <exception cref="Exception::Error">
	/// Exception is thrown when production order id is not set.
	/// </exception>
	/// <exception cref="Exception::Error">
	/// Exception is thrown when the mobile device user is not set for warehouse.
	/// </exception>
    public void reverseLP(WHSLicensePlateId _licensePlateId,
        Qty     _reverseQty,
        boolean _inFGLocation,
        boolean _removePallet)
    {
        WMSLocationId   locationId;
        Qty             remainingQty;

        using(var activityContext = ProdInstrumentationLogger::createLogger(classStr(WhslpReverse)).whs().reverseLP())
        {
            if (!this.isProdTableSet())
            {
                throw error("@WAX3644");
            }

            if (!WHSWorkUserWarehouse::exist(userId, prodTable.inventDim().InventLocationId))
            {
                throw error(strFmt("@WAX3645", userId, prodTable.inventDim().InventLocationId));
            }

            ttsbegin;

            if (_inFGLocation)
            {
                if (_removePallet)  // New Qty = 0
                {
                    this.cancelLPWork(_licensePlateId);
                    this.reverseRAF(_licensePlateId, _reverseQty);
                }
                else
                {
                    if (_reverseQty < 0)
                    {
                        this.updateWorkQty(_licensePlateId, _reverseQty);
                        this.reverseRAF(_licensePlateId, _reverseQty);
                    }
                    else
                    {
                        this.reverseRAF(_licensePlateId, _reverseQty);
                        this.updateWorkQty(_licensePlateId, _reverseQty);
                    }
                }
            }
            else
            {
                [locationId, remainingQty] = this.moveLPToFG(_licensePlateId, _reverseQty);
                this.reverseRAF(_licensePlateId, _reverseQty);

                if (!_removePallet) // New Qty != 0
                {
                    this.moveRemainingBack(_licensePlateId, remainingQty, locationId);
                }
            }

            ttscommit;

            info("@WAX3646");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdParmReportFinished</Name>
				<Source><![CDATA[
    protected ProdParmReportFinished initProdParmReportFinished(WHSLicensePlateId _licensePlateId, Qty _reverseQty)
    {
        ProdParmReportFinished prodParmReportFinished;

        InventDim inventDim = InventDim::find(prodTable.InventDimId);
        inventDim.wmsLocationId = this.getDefaultProdOutputLocation();
        inventDim.LicensePlateId = _licensePlateId;
        inventDim = InventDim::findOrCreate(inventDim);

        prodParmReportFinished.initParmDefault();
        prodParmReportFinished.initFromProdTable(prodTable);
        prodParmReportFinished.InventDimId = inventDim.InventDimId;
        prodParmReportFinished.ParmId = NumberSeq::newGetNum(CompanyInfo::numRefParmId()).num();
        prodParmReportFinished.QtyGood = _reverseQty;
        prodParmReportFinished.bomAutoConsump = BOMAutoConsump::FlushingPrincip;
        prodParmReportFinished.AcceptError = false;
        prodParmReportFinished.EndJob = false;

        return prodParmReportFinished;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseRAF</Name>
				<Source><![CDATA[
	/// <summary>
	/// Reverses finished goods on license plate.
	/// </summary>
	/// <param name="_licensePlateId">
	/// The license plate id.
	/// </param>
	/// <param name="_reverseQty">
	/// The quantity to be reversed.
	/// </param>
    public void reverseRAF(WHSLicensePlateId _licensePlateId, Qty _reverseQty)
    {
        ProdUpdReportFinished  prodUpdReportFinished = new ProdUpdReportFinished();

        ttsbegin;

        ProdParmReportFinished prodParmReportFinished = this.initProdParmReportFinished(_licensePlateId, _reverseQty);
        prodParmReportFinished.insert();

        prodUpdReportFinished.parmParmBuffer(prodParmReportFinished);
        prodUpdReportFinished.initProdTable();
        prodUpdReportFinished.run();

        // As the design in ProdJournalProd.calcRemainInventPhysical() also reverses the error quantity at the same time.
        // Reversing LP only need reverse good quantity, no need to reduce the error quantity again.
        if (_reverseQty < 0 && !ProdJournalProdCalcRemainInventPhysicalNegativeQtyFlight::instance().isEnabled())
        {
            ProdTable prodTableLocal = ProdTable::find(prodTable.ProdId, true);
            prodTableLocal.RemainInventPhysical -= prodTableLocal.reportedFinishedError();
            if (prodTableLocal.RemainInventPhysical < 0)
            {
                prodTableLocal.RemainInventPhysical = 0;
            }
            prodTableLocal.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkQty</Name>
				<Source><![CDATA[
	/// <summary>
	/// Updates quantity on the work lines and work inventory transaction.
	/// </summary>
	/// <param name="_licensePlateId">
	/// The license plate id.
	/// </param>
	/// <param name="_reverseQty">
	/// The quantity that is reversed.
	/// </param>
    public void updateWorkQty(WHSLicensePlateId _licensePlateId, Qty _reverseQty)
    {
        WHSWorkInventTrans  workInventTrans;
        WHSWorkInventTrans  newWorkInventTrans;
        WHSWorkTable        workTable;
        WHSWorkLine         workLine;
        UnitOfMeasureSymbol inventUnitId;
        Qty                 newQty;

        select firstonly WorkId from workTable
            where workTable.TargetLicensePlateId == _licensePlateId
               && workTable.WorkStatus           == WHSWorkStatus::Open;

        if (!workTable.WorkId)
        {
            return;
        }

        select firstonly workLine
            where workLine.WorkId == workTable.WorkId;

        // Calculate the new quantity.
        newQty = workLine.InventQtyWork + _reverseQty;

        inventUnitId = InventTableModule::find(workLine.ItemId, ModuleInventPurchSales::Invent).UnitId;

        // Update the quantity on the Work Lines.
        while select forupdate workLine
            where workLine.WorkId == workTable.WorkId
        {
            workLine.InventQtyWork      = newQty;
            workLine.InventQtyRemain    = newQty;
            workLine.QtyWork            = newQty;
            workLine.QtyRemain          = newQty;
            workLine.UnitId             = inventUnitId;
            workLine.update();
        }

        select firstonly forupdate workInventTrans
            where workInventTrans.WorkId == workTable.WorkId;

        // Copy the WIT so we can delete and recreate it.
        buf2Buf(workInventTrans, newWorkInventTrans);

        // Delete the original WIT.
        workInventTrans.delete();

        // Update the quantity on the new WIT and insert it.
        newWorkInventTrans.Qty = newQty;
        newWorkInventTrans.InventQtyRemain = newQty;
        newWorkInventTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLicensePlate</Name>
				<Source><![CDATA[
	/// <summary>
	/// Validates that license plate is used with this production order.
	/// </summary>
	/// <param name="_licensePlateId">
	/// License plate id.
	/// </param>
	/// <returns>
	/// True if the license plate is validated.
	/// </returns>
    public boolean validateLicensePlate(WHSLicensePlateId _licensePlateId)
    {
        InventTrans         inventTrans;
        InventDim           prodInventDim;
        InventDim           inventDim;
        boolean             ret = _licensePlateId != '';
        InventTransOrigin   inventTransOrgin;

        if (ret)
        {
            prodInventDim = prodTable.inventDim();

            // Validate that the license plate was used with this Production Order.
            select firstonly RecId from inventTrans
            join inventDim
            where inventTrans.InventDimId       == inventDim.InventDimId            &&
                  inventDim.InventSiteId        == prodInventDim.InventSiteId       &&
                  inventDim.InventLocationId    == prodInventDim.InventLocationId   &&
                  inventDim.LicensePlateId      == _licensePlateId
                join RecId, ReferenceId from inventTransOrgin
                where inventTrans.InventTransOrigin == inventTransOrgin.RecId   &&
                      inventTransOrgin.ReferenceId  == prodTable.ProdId;

            ret = inventTrans.RecId != 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>WHSLicensePlate</c> table when show only license plates for a specific production order
    /// </summary>
    /// <param name="_ctrl">
    /// The form string control object with which to perform the lookup.
    /// </param>
    public void lookupLicensePlate(FormStringControl _ctrl)
    {
        InventDim prodInventDim = prodTable.inventDim();

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(WHSLicensePlate), _ctrl);
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(WHSLicensePlate));

        QueryBuildDataSource queryBuildDataSourceInventDim = queryBuildDataSource.addDataSource(tableNum(InventDim));
        queryBuildDataSourceInventDim.joinMode(JoinMode::ExistsJoin);
        queryBuildDataSourceInventDim.relations(true);

        queryBuildDataSourceInventDim.addRange(fieldNum(InventDim, InventSiteId)).value(prodInventDim.InventSiteId);
        queryBuildDataSourceInventDim.addRange(fieldNum(InventDim, InventLocationId)).value(prodInventDim.InventLocationId);

        QueryBuildDataSource queryBuildDataSourceInventTrans = queryBuildDataSourceInventDim.addDataSource(tableNum(InventTrans));
        queryBuildDataSourceInventTrans.joinMode(JoinMode::ExistsJoin);
        queryBuildDataSourceInventTrans.relations(true);

        queryBuildDataSourceInventTrans.addRange(fieldNum(InventTrans, ItemId)).value(prodTable.ItemId);

        QueryBuildDataSource queryBuildDataSourceInventTransOrig = queryBuildDataSourceInventTrans.addDataSource(tableNum(InventTransOrigin));
        queryBuildDataSourceInventTransOrig.joinMode(JoinMode::ExistsJoin);
        queryBuildDataSourceInventTransOrig.relations(true);

        queryBuildDataSourceInventTransOrig.addRange(fieldNum(InventTransOrigin, ReferenceId)).value(prodTable.ProdId);
        
        queryBuildDataSourceInventTransOrig.addRange(fieldNum(InventTransOrigin, ItemId)).value(prodTable.ItemId);
        
        sysTableLookup.addLookupfield(fieldNum(WHSLicensePlate, LicensePlateId));
        sysTableLookup.addLookupfield(fieldNum(WHSLicensePlate, LicensePlateLevel));
        sysTableLookup.addLookupfield(fieldNum(WHSLicensePlate, LicensePlateParent));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsLicensePlateId_validate</Name>
				<Source><![CDATA[
	/// <summary>
	/// Validates license plate id inputted by user.
	/// </summary>
	/// <param name="_prodId">
	/// Production order id.
	/// </param>
	/// <param name="_licensePlateId">
	/// License plate id.
	/// </param>
	/// <param name="_form">
	/// Form object.
	/// </param>
	/// <returns>
	/// True if the license plate id is validated.
	/// </returns>
    public boolean whsLicensePlateId_validate(ProdId _prodId,
        WHSLicensePlateId _licensePlateId,
        Object            _form)
    {
        boolean ret;

        if (_prodId && !this.validateLicensePlate(_licensePlateId))
        {
            ret = checkFailed(strFmt("@WAX:Error_LicensePlateNotValidWithProdId", _licensePlateId, _prodId));
        }
        else
        {
            _form.populateFields();
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formRun</Name>
				<Source><![CDATA[
	/// <summary>
	/// Creates a new <c>WHSLPReverse</c> instance when form is run.
	/// </summary>
	/// <param name="_prodId">
	/// Production id to be used in instance.
	/// </param>
	/// <param name="_ctrl">
	/// Form string control to be focused.
	/// </param>
	/// <returns>
	/// The <c>WHSLPReverse</c> instance.
	/// </returns>
    public static WHSLPReverse formRun(ProdId _prodId, FormStringControl _ctrl)
    {
        WHSLPReverse    newLPReverse;

        if (_prodId)
        {
            _ctrl.setFocus();
            newLPReverse = new WHSLPReverse(ProdTable::find(_prodId));
        }
        else
        {
            newLPReverse = new WHSLPReverse(null);
        }

        return newLPReverse;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>