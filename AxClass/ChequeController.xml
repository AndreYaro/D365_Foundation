<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ChequeController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ChequeController</c> class is the controller class for the <c>Cheque_UK</c>,
/// <c>Cheque_US</c>, <c>Cheque_DE</c>, <c>Cheque_DK</c>, <c>Cheque_ES</c>, and <c>Cheque_CA</c>
/// reports.
/// </summary>
public class ChequeController extends SRSReportRunController implements BatchRetryable
{
    #SRSFramework

    private ChequeTmp chequeTmp;
    private TmpChequePrintout tmpChequePrintout;

    protected SRSPrintDestinationSettings printDestinationSettings;
    protected SrsCatalogItemName chequeReport;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTempData</Name>
				<Source><![CDATA[
    // Payroll
    protected void deleteTempData()
    {
        delete_from chequeTmp;
        delete_from tmpChequePrintout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChequeReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the initialize method and returns a cheque report type.
    /// </summary>
    /// <returns>
    /// A cheque report type.
    /// </returns>
    public SrsCatalogItemName getChequeReport()
    {
        this.init();
        return chequeReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpChequePrintout</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets current table buffer of <c>TmpChequePrintout</c>.
    /// </summary>
    /// <returns>
    ///     Current table buffer of <c>TmpChequePrintout</c>.
    /// </returns>
    public TmpChequePrintout getTmpChequePrintout()
    {
        return tmpChequePrintout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrintDestinationSettingsDefaultValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the default values for print destination.
    /// </summary>
    protected void setPrintDestinationSettingsDefaultValues()
    {
        printDestinationSettings.printMediumType(SRSPrintMediumType::Printer);
        printDestinationSettings.fromPage(1);
        printDestinationSettings.toPage(99999999);
        printDestinationSettings.printLandscape(false);
        printDestinationSettings.printerName(printDestinationSettings.getPageSettingsPrinterSettingsPrinterName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes all the required objects here.
    /// </summary>
    /// <remarks>
    /// This method calls the <c>Cheque_UK</c>, <c>Cheque_US</c>, <c>Cheque_DE</c>, <c>Cheque_DK</c>,
    /// <c>Cheque_ES</c>, and <c>Cheque_CA</c> cheque reports based on the caller object.
    /// </remarks>
    public void init()
    {
        #ISOCountryRegionCodes
        Object caller = args.caller();
        BankChequePrint bankChequePrint;
        container printerSetting;

        printDestinationSettings = new SRSPrintDestinationSettings();

        // Init print settings and also temp table.
        switch (classidget(caller))
        {
            case classnum(BankChequePrint):

                bankChequePrint = caller;
                printerSetting = bankChequePrint.parmPrintJobSettingsPacked();

                if (conlen(printerSetting) > 0)
                {
                    printDestinationSettings.unpack(printerSetting);
                }
                else
                {
                    this.setPrintDestinationSettingsDefaultValues();
                }

                // validate printer settings
                if (printDestinationSettings.printMediumType() == SRSPrintMediumType::Printer
                    && printDestinationSettings.printerName() == #MicrosoftXPSDocumentWriter
                    && printDestinationSettings.fileName() == #EmptyString)
                {
                    throw error(strFmt("@SYP4861427", #MicrosoftXPSDocumentWriter));
                }

                tmpChequePrintout.setTmpData(bankChequePrint.parmTmpChequePrintout());
                break;

            case classnum(BankPrintTestCheque),
                classnum(BankChequeCopy):
                bankChequePrint = args.object();
                printerSetting = bankChequePrint.parmPrintJobSettingsPacked();

                if (conlen(printerSetting) > 0)
                {
                    printDestinationSettings.unpack(printerSetting);
                }

                tmpChequePrintout.setTmpData(bankChequePrint.parmTmpChequePrintout());
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        // init cheque report type, get from the record in tmp table.
        select tmpChequePrintout;

        BankChequeLayout bankChequeLayout = BankChequeLayout::find(tmpChequePrintout.AccountId);

        SRSPrinterPaperSettings printerPaperSettings = new SRSPrinterPaperSettings();
        printerPaperSettings.parmPageHeight(this.convertToHundredthsOfAnInch(bankChequeLayout.PaperSize, bankChequeLayout.PaperSizeUnit));
        printerPaperSettings.parmMarginTop(this.convertToHundredthsOfAnInch(bankChequeLayout.TopMargin, bankChequeLayout.TopMarginUnit));
        printerPaperSettings.parmMarginBottom(this.convertToHundredthsOfAnInch(bankChequeLayout.BottomMargin, bankChequeLayout.BottomMarginUnit));
        printDestinationSettings.parmPrinterPaperSettings(printerPaperSettings);

        chequeReport = this.determineReportMenuOutput(tmpChequePrintout.ChequeFormType, bankChequeLayout);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineReportMenuOutput</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine the report menu item.
    /// </summary>
    /// <param name = "_chequeFormType">The check form type.</param>
    /// <param name = "_bankChequeLayout">The bank cheque layout table buffer.</param>
    /// <returns>The menu item name</returns>
    protected str determineReportMenuOutput(ChequeFormType _chequeFormType, BankChequeLayout _bankChequeLayout)
    {
        CustomChequeLayout_BR customChequeLayout_BR;

        switch (_chequeFormType)
        {
            case ChequeFormType::CAStyle:
                chequeReport = ssrsReportStr(Cheque_CA, Report);
                break;

            case ChequeFormType::DEStyle:
                chequeReport = ssrsReportStr(Cheque_DE, Report);
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceDE00013, funcName());
                break;

            case ChequeFormType::DKStyle:
                chequeReport = ssrsReportStr(Cheque_DK, Report);
                break;

            case ChequeFormType::ESStyle:
                chequeReport = ssrsReportStr(Cheque_ES, Report);
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceES00008, funcName());
                break;

            case ChequeFormType::UKStyle:
                chequeReport = ssrsReportStr(Cheque_UK, Report);
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceGB00007, funcName());
                break;

            case ChequeFormType::USStyle:
                chequeReport = ssrsReportStr(Cheque_US, Report);
                break;

            case ChequeFormType::MXStyle:
                chequeReport = ssrsReportStr(Cheque_US, Report);
                break;

            case ChequeFormType::BRStyle:
                chequeReport = ssrsReportStr(Cheque_BR, Report);
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00063, funcName());
                if (_bankChequeLayout.CustomChequeLayout_BR)
                {
                    customChequeLayout_BR = CustomChequeLayout_BR::find(_bankChequeLayout.CustomChequeLayout_BR);

                    if (customChequeLayout_BR)
                    {
                        chequeReport = customChequeLayout_BR.ReportName;
                    }
                }
                break;
            default:
                EventHandlerResult eventResult = new EventHandlerResult();
                this.initChequeReportFromChequeFormTypeDelegate(tmpChequePrintout.ChequeFormType, _bankChequeLayout, eventResult);
                if (!eventResult.hasResult())
                {
                    throw error(Error::wrongUseOfFunction(funcname()));
                }
                else
                {
                    chequeReport = eventResult.result();
                }
        }

        return chequeReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initChequeReportFromChequeFormTypeDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate to be called in the default case within the init method for executing cheque form types.
    /// </summary>
    /// <param name = "_chequeFormType">The cheque form type used for execution.</param>
    /// <param name = "_bankChequeLayout">Instance of <c>BankChequeLayout</c> table buffer.</param>
    /// <param name = "_result"><c>EventHandlerResult</c> instance to be assigned to prior to exiting the method once the work is completed.</param>
    delegate void initChequeReportFromChequeFormTypeDelegate(ChequeFormType _chequeFormType, BankChequeLayout _bankChequeLayout, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToHundredthsOfAnInch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a length into hundredths of an inch.
    /// </summary>
    /// <param name="_length">
    /// The length to convert.
    /// </param>
    /// <param name="_unit">
    /// The units of the length to convert.
    /// </param>
    /// <returns>
    /// The length, in hundredths of an inch.
    /// </returns>
    protected int convertToHundredthsOfAnInch(ChequeLength _length, ChequeFormatUnit _unit)
    {
        const real MmPerInch = 25.3995;

        real lengthInInches = units2mm(_length, _unit) / MmPerInch;

        return real2int(lengthInInches * 100);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override this method to change the report contract before running the report.
    /// </summary>
    protected void preRunModifyContract()
    {
        SrsTmpTblMarshallerContract contract = this.parmReportContract().parmRdpContract() as SrsTmpTblMarshallerContract;

        // get the Temp table, and marshall it across to SSRS
        new SRSReportRunPermission().assert();
        contract.parmTmpTableDataRecId(SRSTmpTblMarshaller::SendTmpTblToDataProvider(tmpChequePrintout));

        // set the print destination in contract
        if (printDestinationSettings)
        {
            this.parmReportContract().parmPrintSettings(printDestinationSettings);

            boolean isPrintingToPrinter = printDestinationSettings.printMediumType() == SRSPrintMediumType::Printer;

            str chequeReportNameDotReplaced = strReplace(chequeReport, '.', '_');
            this.parmReportContract().parmPrintSettings().fileFormat(SRSReportFileFormat::PDF);
            this.parmReportContract().parmPrintSettings().fileName(chequeReportNameDotReplaced + '.pdf');
            this.parmReportContract().parmPrintSettings().printOnBothSides(SRSReportDuplexPrintingSetting::None);

            if (isPrintingToPrinter)
            {
                this.parmReportContract().parmPrintSettings().parmSendToPrinterAsPdf(true);
            }
            else
            {
                this.parmReportContract().parmPrintSettings().printMediumType(SRSPrintMediumType::File);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        ChequeController controller = new ChequeController();
        controller.parmArgs(_args);
        controller.deleteTempData();
        controller.parmReportName(controller.getChequeReport());
        controller.parmShowDialog(false);
        controller.parmDialogCaption("@SYS24090");
        controller.startOperation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>