<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventConsignmentReportDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The data provider class for the <c>InventConsignmentReport</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(InventConsignment)),
    SRSReportParameterAttribute(classStr(InventConsignmentReportContract))
]
public class InventConsignmentReportDP extends SRSReportDataProviderBase
{
    InventConsignmentLocationTmp inventConsignmentLocationTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>consignmentLocationExistsRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a record of the <c>InventConsignmentLocationTmp</c> table with specific values
    /// exists.
    /// </summary>
    /// <param name="_inventConsignmentLocationTmp">
    /// The temporary table for search.
    /// </param>
    /// <param name="_itemId">
    /// The item number for search.
    /// </param>
    /// <param name="_custAccount">
    /// The customer account for search.
    /// </param>
    /// <param name="_adressCountryRegionName">
    /// The country/region for search.
    /// </param>
    /// <returns>
    /// Returns true if corresponding record is exists, otherwise false .
    /// </returns>
    private boolean consignmentLocationExistsRecord(InventConsignmentLocationTmp    _inventConsignmentLocationTmp,
                                                    ItemId                          _itemId,
                                                    CustAccount                     _custAccount,
                                                    AddressCountryRegionName        _adressCountryRegionName)
    {
        select firstonly RecId from _inventConsignmentLocationTmp
            where _inventConsignmentLocationTmp.ItemId                  == _itemId      &&
                  _inventConsignmentLocationTmp.CustAccount             == _custAccount &&
                  _inventConsignmentLocationTmp.CountryRegionName       == _adressCountryRegionName;

        return _inventConsignmentLocationTmp.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>consignmentLocationFind</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record of the <c>InventConsignmentLocationTmp</c> table for specific values.
    /// </summary>
    /// <param name="_inventConsignmentLocationTmp">
    /// The temporary table for search.
    /// </param>
    /// <param name="_itemId">
    /// The item number for search.
    /// </param>
    /// <param name="_custAccount">
    /// The customer account for search.
    /// </param>
    /// <param name="_adressCountryRegionName">
    /// The country or region for search.
    /// </param>
    /// <param name="_isUpdate">
    /// A value indicating whether the select record needs an update.
    /// </param>
    /// <returns>
    /// The corresponding record of the <c>InventConsignmentLocationTmp</c> table.
    /// </returns>
    private InventConsignmentLocationTmp consignmentLocationFind(
                InventConsignmentLocationTmp    _inventConsignmentLocationTmp,
                ItemId                          _itemId,
                CustAccount                     _custAccount,
                AddressCountryRegionName        _adressCountryRegionName,
                boolean                         _isUpdate = false)
    {
        _inventConsignmentLocationTmp.selectForUpdate(_isUpdate);

        select firstonly _inventConsignmentLocationTmp
            where _inventConsignmentLocationTmp.ItemId                  == _itemId      &&
                  _inventConsignmentLocationTmp.CustAccount             == _custAccount &&
                  _inventConsignmentLocationTmp.CountryRegionName       == _adressCountryRegionName;

        return _inventConsignmentLocationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventConsignmentLocationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Queries the <c>InventConsignmentLocationTmp</c> table and retrieves the data table.
    /// </summary>
    /// <returns>
    ///    The required report data table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(InventConsignmentLocationTmp))
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventConsignmentLocationTmp getInventConsignmentLocationTmp()
    {
        select inventConsignmentLocationTmp;
        return inventConsignmentLocationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventConsignmentLocationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method inserts data into the <c>inventConsignmentLocationTmp</c> temporary table.
    /// </summary>
    /// <param name="_countryRegionName">
    /// The country or region value for record.
    /// </param>
    /// <param name="_custAccount">
    /// The customer account for record.
    /// </param>
    /// <param name="_custName">
    /// The customer name for record.
    /// </param>
    /// <param name="_itemId">
    /// The item number for record.
    /// </param>
    /// <param name="_itemName">
    /// The item name for record.
    /// </param>
    /// <param name="_unitId">
    /// The unit symbol for record.
    /// </param>
    private void insertInventConsignmentLocationTmp(LogisticsAddressCountryRegionShortName      _countryRegionName,
                                                    CustAccount                                 _custAccount,
                                                    CustName                                    _custName,
                                                    ItemId                                      _itemId,
                                                    ItemName                                    _itemName,
                                                    UnitOfMeasureSymbol                         _unitId)
    {
        inventConsignmentLocationTmp.CountryRegionName  = _countryRegionName;
        inventConsignmentLocationTmp.CustAccount        = _custAccount;
        inventConsignmentLocationTmp.CustName           = _custName;
        inventConsignmentLocationTmp.ItemId             = _itemId;
        inventConsignmentLocationTmp.ItemName           = _itemName;
        inventConsignmentLocationTmp.UnitId             = _unitId;

        inventConsignmentLocationTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic for the <c>InventConsignmentReport</c> report.
    /// </summary>
    public void processReport()
    {
        InventTrans                                 inventTrans2;
        InventTrans                                 inventTrans3;
        InventTransOrigin                           inventTransOrigin2;
        InventDimParm                               inventDimParm;
        InventTable                                 inventTable;
        InventLocation                              inventLocationOnHand;
        DirPartyPostalAddressView                   dirPartyPostalAddressView;

        InventDim                                   inventDimOnHand;

        Query query = this.parmQuery();
        InventConsignmentReportContract contract = this.parmDataContract() as InventConsignmentReportContract;

        StartDate         startDate         = contract.parmStartDate();
        EndDate           endDate           = contract.parmEndDate();
        boolean           selectedRegion    = contract.parmSelectedRegion();
        CountryRegionType countryRegionType = contract.parmCountryRegionType();
        this.setRanges(query, contract);

        QueryRun queryRun = new QueryRun(query);
        ttsbegin;
        while (queryRun.next())
        {
            LogisticsAddressCountryRegionTranslation logisticsAddressCountryRegionTranslation = queryRun.get(tableNum(LogisticsAddressCountryRegionTranslation));
            CustTable custTable = queryRun.get(tableNum(CustTable));
            InventLocation inventLocation = queryRun.get(tableNum(InventLocation));
            InventTrans inventTrans = queryRun.get(tableNum(InventTrans));
            if (((inventTrans.DatePhysical  >= startDate && inventTrans.DatePhysical  <= endDate                                                                                                                                       )||
                 (inventTrans.DateFinancial >= startDate && inventTrans.DateFinancial <= endDate      && inventTrans.DatePhysical == dateNull()                                                                                        )||
                 (inventTrans.DateInvent    >= startDate && inventTrans.DateInvent    <= endDate      && inventTrans.DatePhysical == dateNull()  && inventTrans.DateFinancial ==  dateNull()                                           )||
                 (inventTrans.DateExpected  >= startDate && inventTrans.DateExpected  <= endDate      && inventTrans.DatePhysical == dateNull()  && inventTrans.DateFinancial  == dateNull() && inventTrans.DateInvent    == dateNull())
                )
                &&
                ((inventTrans.StatusIssue  >  StatusIssue::None        && inventTrans.StatusIssue   <= StatusIssue::Picked)        ||
                 (inventTrans.StatusReceipt >  StatusReceipt::None      && inventTrans.StatusReceipt <= StatusReceipt::Registered)
                ))
            {
                if (! this.consignmentLocationExistsRecord(inventConsignmentLocationTmp, inventTrans.ItemId, inventLocation.CustAccount_HU, logisticsAddressCountryRegionTranslation.ShortName))
                {
                    inventConsignmentLocationTmp.clear();
                    this.insertInventConsignmentLocationTmp(logisticsAddressCountryRegionTranslation.ShortName,
                                                            custTable.AccountNum,
                                                            custTable.name(),
                                                            inventTrans.ItemId,
                                                            inventTrans.itemName(),
                                                            InventTableModule::find(inventTrans.ItemId, ModuleInventPurchSales::Invent).UnitId);
                }
                else
                {
                    inventConsignmentLocationTmp = this.consignmentLocationFind(inventConsignmentLocationTmp, inventTrans.ItemId, inventLocation.CustAccount_HU, logisticsAddressCountryRegionTranslation.ShortName, true);
                }

                InventTransOrigin inventTransOrigin = inventTrans.inventTransOrigin();

                if (inventTrans.StatusIssue > StatusIssue::None && inventTrans.StatusIssue <= StatusIssue::Picked)
                {
                    if (inventTransOrigin.ReferenceCategory == InventTransType::Sales)
                    {
                        inventConsignmentLocationTmp.DecreaseSales -= inventTrans.Qty;
                    }
                    else
                    {
                        if (this.checkReferenceCategory(inventTransOrigin.ReferenceCategory))
                        {
                            inventTransOrigin2 = inventTrans.transferInventTransOrigin();

                            select firstonly InventDimId from inventTrans3
                                where inventTrans3.InventTransOrigin == inventTransOrigin2.RecId &&
                                      inventTrans3.Qty               > 0;

                            if (inventTrans3.inventDim().inventLocation().CustAccount_HU != "")
                            {
                                inventConsignmentLocationTmp.DecreaseConsignation -= inventTrans.Qty;
                            }
                            else
                            {
                                inventConsignmentLocationTmp.DecreaseShipBack -= inventTrans.Qty;
                            }
                        }
                        else
                        {
                            inventConsignmentLocationTmp.DecreaseOther -= inventTrans.Qty;
                        }
                    }
                }
                if (inventTrans.StatusReceipt > StatusReceipt::None && inventTrans.StatusReceipt <= StatusReceipt::Registered)
                {
                    if (this.checkReferenceCategory(inventTransOrigin.ReferenceCategory))
                    {
                        inventTransOrigin2 = inventTrans.transferInventTransOrigin();

                        select firstonly InventDimId from inventTrans2
                            where inventTrans2.InventTransOrigin == inventTransOrigin2.RecId &&
                                  inventTrans2.Qty               < 0;
                        if (inventTrans2.inventDim().inventLocation().CustAccount_HU == "")
                        {
                            inventConsignmentLocationTmp.IncreaseSupplies += inventTrans.Qty;
                        }
                        else
                        {
                            inventConsignmentLocationTmp.IncreaseConsignation += inventTrans.Qty;
                        }
                    }
                    else
                    {
                        inventConsignmentLocationTmp.IncreaseOther += inventTrans.Qty;
                    }
                }

                inventConsignmentLocationTmp.update();
            }
        }

        inventDimParm.InventLocationIdFlag = true;
        InventQty openingQty = 0;
        while select ItemId from inventTable
            where inventTable.ItemType != ItemType::Service
        join InventLocationId, CustAccount_HU from inventLocationOnHand
            where inventLocationOnHand.CustAccount_HU != ''
        {
            select firstonly CountryRegionId, IsPrimary, Party from dirPartyPostalAddressView
                where dirPartyPostalAddressView.Party       == CustTable::find(inventLocationOnHand.CustAccount_HU).Party &&
                      dirPartyPostalAddressView.IsPrimary   == NoYes::Yes;
            if ((selectedRegion && IntrastatCountryRegionParameters::type(dirPartyPostalAddressView.CountryRegionId) == countryRegionType) || !selectedRegion)
            {
                inventDimOnHand.InventLocationId = inventLocationOnHand.InventLocationId;
                openingQty = InventSumDatePhysicalDim::onHandQty(startDate - 1, inventTable.ItemId, inventDimOnHand, inventDimParm);

                if (openingQty != 0)
                {
                    if (this.consignmentLocationExistsRecord(inventConsignmentLocationTmp, inventTable.ItemId, inventLocationOnHand.CustAccount_HU, LogisticsAddressCountryRegion::name(dirPartyPostalAddressView.CountryRegionId)))
                    {
                        inventConsignmentLocationTmp = this.consignmentLocationFind(inventConsignmentLocationTmp, inventTable.ItemId, inventLocationOnHand.CustAccount_HU,
                                                                                    LogisticsAddressCountryRegion::name(dirPartyPostalAddressView.CountryRegionId), true);
                        inventConsignmentLocationTmp.OpeningQty += openingQty;
                        inventConsignmentLocationTmp.update();
                    }
                    else
                    {
                        inventConsignmentLocationTmp.clear();
                        this.insertInventConsignmentLocationTmp(LogisticsAddressCountryRegion::name(dirPartyPostalAddressView.CountryRegionId),
                                                                inventLocationOnHand.CustAccount_HU,
                                                                CustTable::find(inventLocationOnHand.CustAccount_HU).name(),
                                                                inventTable.ItemId,
                                                                inventTable.itemName(),
                                                                InventTableModule::find(inventTable.ItemId, ModuleInventPurchSales::Invent).UnitId);
                        inventConsignmentLocationTmp.OpeningQty = openingQty;
                        inventConsignmentLocationTmp.update();
                    }
                }
            }
        }
        while select forupdate inventConsignmentLocationTmp
        {
            inventConsignmentLocationTmp.IncreaseSummary = inventConsignmentLocationTmp.IncreaseConsignation + inventConsignmentLocationTmp.IncreaseSupplies + inventConsignmentLocationTmp.IncreaseOther;

            inventConsignmentLocationTmp.DecreaseSummary = inventConsignmentLocationTmp.DecreaseConsignation + inventConsignmentLocationTmp.DecreaseOther + inventConsignmentLocationTmp.DecreaseSales + inventConsignmentLocationTmp.DecreaseShipBack;
            inventConsignmentLocationTmp.ClosingQty      = inventConsignmentLocationTmp.OpeningQty + inventConsignmentLocationTmp.IncreaseSummary - inventConsignmentLocationTmp.DecreaseSummary;
            inventConsignmentLocationTmp.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets query range parameters.
    /// </summary>
    /// <param name="_query">
    /// The target query object.
    /// </param>
    /// <param name="_contract">
    /// The object of the <c>InventConsignmentReportContract</c> class to get user set parameters.
    /// </param>
    private void setRanges(Query _query, InventConsignmentReportContract _contract)
    {
        if (_contract.parmSelectedRegion())
        {
            findOrCreateRange_W(_query.dataSourceTable(tableNum(IntrastatCountryRegionParameters)), fieldNum(IntrastatCountryRegionParameters, CountryRegionType), enum2str(_contract.parmCountryRegionType()));
        }
        else
        {
            _query.dataSourceTable(tableNum(IntrastatCountryRegionParameters)).clearRange(fieldNum(IntrastatCountryRegionParameters, CountryRegionType));
        }
        findOrCreateRange_W(_query.dataSourceTable(tableNum(LogisticsAddressCountryRegionTranslation)), fieldNum(LogisticsAddressCountryRegionTranslation, LanguageId), currentUserLanguage());
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReferenceCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the reference category is a transferReceiver, TransferOrderScrap and InventTransfer.
    /// </summary>
    /// <param name="_referenceCategory">
    ///    The reference category.
    /// </param>
    /// <returns>
    ///    true if the reference category is a transferReceiver, TransferOrderScrap and InventTransfer; otherwise, false.
    /// </returns>
    private boolean checkReferenceCategory(InventTransType _referenceCategory)
    {
        switch (_referenceCategory)
        {
            case InventTransType::TransferOrderReceive:
            case InventTransType::TransferOrderScrap:
            case InventTransType::TransferOrderShip:
            case InventTransType::InventTransfer:
                return true;

            default:
                return false;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
