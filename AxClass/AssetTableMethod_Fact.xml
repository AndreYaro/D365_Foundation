<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTableMethod_Fact</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AssetTableMethod_Fact extends AssetTableMethod
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the amount to depreciate for this interval.
    /// </summary>
    /// <returns>
    /// The amount to depreciate for this interval
    /// </returns>
    public AssetAmount calc()
    {
        AssetAmount     assetAmount = 0;

        real            currentPeriod;
        real            lastPeriod;
        AssetAmount     depreciate;
        AssetAmount     lastValue;

        if (currentInterval != 0 && assetBook.getLifetime() != 0 && currentInterval <= assetBook.getLifetime())
        {
            // finish off
            if (currentInterval == assetBook.getLifetime())
            {
                if (isReportingCurrencyDepreciation)
                {
                    depreciate = (assetAcquisitionValue - assetBook.ScrapValueReportingCurrency - parmPrevDep - this.parmPrevDepAmount());
                }
                else
                {                    
                    depreciate = (assetAcquisitionValue - assetBook.ScrapValue - parmPrevDep - this.parmPrevDepAmount());
                }
            }
            else
            {
                // current period, expressed as Lifetime = 1

                currentPeriod = currentInterval/assetBook.getLifetime();

                // current value, expressed as lValue = 1

                assetAmount = power(currentPeriod, power(10, (((this.percentage()/100) * 2) -1)));

                assetAmount = (assetAmount * this.revaluationFactor());

                // lCurrentValue * lValue gives the value to be depreciated to date
                // so we need just the amount for the month.

                if (currentInterval > 1 && assetBook.getLifetime())
                {
                    lastPeriod = (currentInterval-1) / assetBook.getLifetime(); // Lifetime;
                    lastValue = power(lastPeriod, power(10, (((this.percentage()/100) * 2) -1)));
                }
                else
                {
                    lastValue = 0;
                }

                if (isReportingCurrencyDepreciation)
                {
                    depreciate = CurrencyExchangeHelper::amount((assetAmount - lastValue) * (assetAcquisitionValue - assetBook.ScrapValueReportingCurrency));                    
                }
                else
                {  
                    depreciate = CurrencyExchangeHelper::amount((assetAmount - lastValue) * (assetAcquisitionValue - assetBook.ScrapValue));
                }
            }

            parmPrevDep += depreciate;
        }

        depreciate = this.correctForMinDepreciation(depreciate);

        // Ensures that the depreciation periods remaining gets updated
        this.calcRestPeriod(periodstart);

        return isReportingCurrencyDepreciation ? assetBook.roundOffDepreciationReportingCurrency(depreciate) : assetBook.roundOffDepreciation(depreciate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>AssetTableMethod_Fact</c> class.
    /// </summary>
    protected void init()
    {
        super();

        if (assetBook.DepreciationStartDate && periodEnd)
        {
            currentInterval = deprInterval.interval(assetBook.DepreciationStartDate, periodEnd);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a depreciation needs to be calculated for the given period.
    /// </summary>
    /// <returns>
    /// True if depreciation calculation needed; otherwise false.
    /// </returns>
    /// <remarks>
    /// The super method is overwritten as for the factor depreciation method
    /// LifeTime value needs to be verified with currentInterval.
    /// </remarks>
    public boolean next()
    {
        if (parmRunDate <= baseDate)
        {
            return false;
        }

        currentInterval++;

        if (currentInterval > assetBook.LifeTime)
        {
            return false;
        }

        this.setDepDate();

        //
        //  This prevents depreciations with invalid dates from
        //  being handled.
        //
        if (!depreciationDate ||
            depreciationDate > parmRunDate)
        {
            return false;
        }

        if (periodEnd < periodstart)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDepDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the date of the depreciation of depreciation.
    /// </summary>
    public void setDepDate()
    {
        depreciationDate = assetBook.DepreciationStartDate +
                           deprInterval.depInterval2Days(currentInterval,assetBook.DepreciationStartDate)
                           - 1;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>