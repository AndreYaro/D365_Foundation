<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBTaxAssessmentPayment_BR_EventHandlers</Name>
	<SourceCode>
		<Declaration><![CDATA[
public static class FBTaxAssessmentPayment_BR_EventHandlers
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postInitTaxAssessmentPaymentParameters</Name>
				<Source><![CDATA[
    [PostHandlerFor(tablestr(FBTaxAssessmentPayment_BR), tableMethodStr(FBTaxAssessmentPayment_BR, initFromPaymentParameters))]
    public static void postInitTaxAssessmentPaymentParameters(XppPrePostArgs _arguments)
    {
        FBTaxAssessmentPayment_BR payment = _arguments.getThis();
        FBTaxAssessmentPaymentParameters_BR parameters = _arguments.getArg('_parameters');

        payment.RevenueCode            = payment.PaymentByDocumentType == FBTaxAssessmentPaymentByDocumentType_BR::PovertyFundOnly
                ? parameters.RevenueCodePovertyFund : parameters.RevenueCode;

        payment.TaxAuthorityDataArea   = parameters.TaxAuthorityDataArea;
        payment.TaxAuthority           = parameters.TaxAuthority;
        payment.PaymentTermId          = parameters.PaymentTermId;
        payment.DueDate                = FBTaxAssessmentPost_BR::taxReportDate(FBTaxAssessment_BR::find(payment.FBTaxAssessment_BR), payment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postUpdateTaxAssessmentPaymentParameters</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(FBTaxAssessmentPaymentParameters_BR), tableStaticMethodStr(FBTaxAssessmentPaymentParameters_BR,  updateParameters))]
    public static void postUpdateTaxAssessmentPaymentParameters(XppPrePostArgs _arguments)
    {
        FBTaxAssessment_BR _taxAssessment = _arguments.getArg('_taxAssessment ');
        FBTaxAssessmentPayment_BR _payment = _arguments.getArg('_payment');

        FBTaxAssessmentPaymentParameters_BR paymentParameters;

        paymentParameters = FBTaxAssessmentPaymentParameters_BR::find(
                                _taxAssessment.bookingPeriod().FiscalEstablishmentDataArea,
                                _taxAssessment.TaxType,
                                _taxAssessment.State,
                                _taxAssessment.City,
                                true);

        if (paymentParameters && ((paymentParameters.PaymentTermId != _payment.PaymentTermId)
                || (paymentParameters.TaxAuthority != _payment.TaxAuthority)))
        {
            ttsBegin;
            paymentParameters.PaymentTermId = _payment.PaymentTermId;
            paymentParameters.TaxAuthority = _payment.TaxAuthority;
            paymentParameters.update();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onModifiedField</Name>
				<Source><![CDATA[
    [DataEventHandlerAttribute(tableStr(FBTaxAssessmentPayment_BR), DataEventType::ModifiedField)]
    public static void onModifiedField(Common _table, DataEventArgs _args)
    {
        FBTaxAssessmentPayment_BR payment = _table as FBTaxAssessmentPayment_BR;
        ModifyFieldEventArgs mArgs = _args;

        switch (mArgs.parmFieldId())
        {
            case fieldNum(FBTaxAssessmentPayment_BR, TaxAuthority) :
            case fieldNum(FBTaxAssessmentPayment_BR, PaymentTermId):
                FBTaxAssessmentPayment_BR_EventHandlers::calcDueDate(payment);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the Due Date for the Tax Assessment Payment.
    /// </summary>
    /// <remarks>
    /// Due Date is calculated considering the Payment calendar.
    /// </remarks>
    private static void calcDueDate(FBTaxAssessmentPayment_BR taxAssessmentPaym)
    {
        PaymTerm                            paymTerm;
        FBTaxAssessment_BR                  taxAssessment;
        PaymCalendarProcessor               paymCalendarProcessor;
        PaymCalendarSourceTaxAssessment_BR     calendarDerivation;
        PaymCalendarFindCalendarResults     paymCalendarResults;

        taxAssessment = FBTaxAssessment_BR::find(taxAssessmentPaym.FBTaxAssessment_BR);
        taxAssessmentPaym.DueDate  = FBTaxAssessmentPost_BR::taxReportDate(taxAssessment, taxAssessmentPaym);
        paymTerm      = PaymTerm::find(taxAssessmentPaym.PaymentTermId);

        if (paymTerm && paymTerm.VendorUpdateDueDate != PaymentDueDateUpdatePolicy::NoUpdate)
        {
            paymCalendarProcessor = PaymCalendarProcessor::construct();
            calendarDerivation = new PaymCalendarSourceTaxAssessment_BR(taxAssessmentPaym);
            paymCalendarResults = paymCalendarProcessor.findPaymCalendar(calendarDerivation);
            taxAssessmentPaym.dueDate = paymCalendarProcessor.adjustDateForCalendar(taxAssessmentPaym.dueDate, paymTerm.VendorUpdateDueDate, paymCalendarResults);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>