<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSOutboundWorkLoadChartHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSOutboundWorkLoadChartHelper</c> class is a helper class for the outbound work load chart generation.
/// </summary>
internal final class WHSOutboundWorkLoadChartHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isOutboundWorkOrderType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the work transaction type is outbound or not.
    /// </summary>
    /// <param name = "_workTransType">Work transaction type to validate</param>
    /// <returns>true, if the work transaction type is outbound; otherwise, false.</returns>
    [Hookable(false)]
    internal static boolean isOutboundWorkOrderType(WHSWorkTransType _workTransType)
    {
        WhsWorkTransactionType workTransactionType = WhsWorkTransactionType::singletonFromType(_workTransType);
        
        return (workTransactionType && workTransactionType.isOutbound());
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundWorkOrderTypeRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a concatenated string of all the outbound work transaction types.
    /// </summary>
    /// <returns>Collection of outbound work transaction types.</returns>
    [Hookable(false)]
    internal static Set outboundWorkOrderTypeRange()
    {
        DictEnum dictEnum = new DictEnum(enumNum(WHSWorkTransType));
        Set outboundWorkTransType = new Set(Types::Integer);

        for (int idx = 0; idx < dictEnum.values(); idx++)
        {
            if (WHSOutboundWorkLoadChartHelper::isOutboundWorkOrderType(dictEnum.index2Value(idx)))
            {
                outboundWorkTransType.add(dictEnum.index2Value(idx));
            }
        }

        return outboundWorkTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldEnumType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the field is of type enum or not.
    /// </summary>
    /// <param name = "_tableId">Table ID.</param>
    /// <param name = "_fieldId">Field ID.</param>
    /// <returns>true, if the field of type enum; otherwise, false.</returns>
    [Hookable(false)]
    internal static boolean isFieldEnumType(TableId _tableId, FieldId _fieldId)
    {
        SysDictField dictField = new SysDictField(_tableId, _fieldId);
        return (dictField.type() == Types::Enum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the enum reference.
    /// </summary>
    /// <param name = "_tableId">Table reference</param>
    /// <param name = "_fieldId">Field reference</param>
    /// <param name = "_enumName">Enum name to be converted</param>
    /// <returns>The enum reference</returns>
    [Hookable(false)]
    internal static int getEnumValue(TableId _tableId, FieldId _fieldId, str _enumName)
    {
        SysDictField dictField = new SysDictField(_tableId, _fieldId);
        SysDictEnum dictEnum = new SysDictEnum(dictField.enumId());
        return dictEnum.name2Value(_enumName);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>