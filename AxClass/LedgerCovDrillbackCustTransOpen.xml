<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerCovDrillbackCustTransOpen</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>LedgerCovDrillbackCustTransOpen</c> class provides the Cash Flow document drillback for open customer transactions source type.
/// </summary>
[ExportMetadata(enumStr(LedgerCovDocumentType), LedgerCovDocumentType::CustTransOpen)]
[Export(identifierStr(Dynamics.AX.Application.LedgerCovIDrillback))]
internal final class LedgerCovDrillbackCustTransOpen implements LedgerCovIDrillback
{
    private CustTransOpen custTransOpen;
    private CustTrans custTrans;
    private boolean hasCustTransOpenBeenRead;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>showOriginalDocument</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void showOriginalDocument(LedgerCovDrillbackContract _contract)
    {
        this.showCustTrans(this.getCustTrans(_contract), _contract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>userHasSecurityAccess</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean userHasSecurityAccess(LedgerCovDrillbackContract _contract)
    {
        return SecurityRights::construct().hasMenuItemAccess(SecurableType::MenuItemDisplay, menuItemDisplayStr(CustTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTransOpen</Name>
				<Source><![CDATA[
    private CustTransOpen getCustTransOpen(LedgerCovDrillbackContract _contract)
    {
        if (!hasCustTransOpenBeenRead)
        {
            custTransOpen = CustTransOpen::find(_contract.ledgerCov.TransRecId);

            hasCustTransOpenBeenRead = true;
        }

        return custTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTrans</Name>
				<Source><![CDATA[
    private CustTrans getCustTrans(LedgerCovDrillbackContract _contract)
    {
        if (!custTrans)
        {
            this.getCustTransOpen(_contract);
            
            if (custTransOpen)
            {
                custTrans = custTransOpen.custTrans();
            }
            else
            {
                custTrans = this.findCustTransFromCustTransOpenReference(_contract.ledgerCov);
            }
        }

        return custTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCustTrans</Name>
				<Source><![CDATA[
    private void showCustTrans(CustTrans _custTrans, LedgerCovDrillbackContract _contract)
    {
        Args args = new Args();
        args.record(_custTrans);
        args.caller(_contract.callingForm);

        MenuFunction menuFunction = new MenuFunction(menuItemDisplayStr(CustTrans), MenuItemType::Display);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustTransFromCustTransOpenReference</Name>
				<Source><![CDATA[
    private CustTrans findCustTransFromCustTransOpenReference(LedgerCov _ledgerCov)
    {
        CustSettlement custSettlement;

        select firstonly TransRecId, RecId from custSettlement
            where custSettlement.TransOpen == _ledgerCov.TransRecId;

        if (!custSettlement || custSettlement.TransRecId == 0)
        {
            LedgerCovDrillback::throwOriginatingDocumentNotFoundErrorMessage();
        }

        custTrans = CustTrans::find(custSettlement.TransRecId);

        if (!custTrans)
        {
            LedgerCovDrillback::throwOriginatingDocumentNotFoundErrorMessage();
        }

        return custTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>