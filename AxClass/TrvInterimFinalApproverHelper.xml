<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvInterimFinalApproverHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class provides helper functionality for setting and defaulting interim and final approvers.
/// </summary>
static class TrvInterimFinalApproverHelper
{
    const str defaultInterimApproverPersonalizationKey = 'TrvDefaultInterimApprover';
    const str defaultFinalApproverPersonalizationKey = 'TrvDefaultFinalApprover';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInterimApproverList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a comma separated string of worker names who are listed as interim approvers.
    /// </summary>
    /// <param name = "_trvExpTableRecId">RecId of the expense report to get the approvers for.</param>
    /// <returns>String of worker names who are listed as interim approvers.</returns>
    public static str getInterimApproverList(RecId _trvExpTableRecId)
    {
        TrvInterimApprover interimApproversTable;
        str approvers;

        while select ApproverWorker from interimApproversTable
            order by interimApproversTable.ApproverOrder asc
            where interimApproversTable.WorkflowContextRecId == _trvExpTableRecId

        {
            approvers = TrvInterimFinalApproverHelper::buildApproverList(approvers, HcmWorker::find(interimApproversTable.ApproverWorker).name());
        }

        return approvers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultInterimApproverList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a comma separated string of worker names who are listed as default interim approvers for the user.
    /// </summary>
    /// <param name = "_userId">User to get the default interim approvers for.</param>
    /// <param name = "_dataAreaId">Company to get the default interim approver for.</param>
    /// <returns>String of worker names who are listed as interim approvers.</returns>
    public static str getDefaultInterimApproverList(UserId _userId, DataAreaId _dataAreaId = curExt())
    {
        str approversString;
        container approvers = xSysLastValue::getValue(_dataAreaId, _userId, UtilElementType::Class, defaultInterimApproverPersonalizationKey);

        for (int i = 1; i <= conLen(approvers); i++)
        {
            userInfo userInfo;
            str approverId = conPeek(approvers, i);

            select firstfast RecId from userInfo where userInfo.id == approverId;

            if (!userInfo.RecId)
            {
                continue;
            }

            approversString = TrvInterimFinalApproverHelper::buildApproverList(approversString, DirPerson::find(DirPersonUser::find(approverId).PersonParty).Name);
        }

        return approversString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildApproverList</Name>
				<Source><![CDATA[
    private static str buildApproverList(str _approvers, str _name)
    {
        if (_approvers)
        {
            _approvers = strFmt('%1, %2', _approvers, _name);
        }
        else
        {
            _approvers = _name;
        }

        return _approvers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDefaultInterimApprover</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the approver is a default approver for the given user.
    /// </summary>
    /// <param name = "_approver">User to check if is a default approver.</param>
    /// <param name = "_user">User to check for.</param>
    /// <param name = "_dataAreaId">Company to check the default in.</param>
    /// <returns>True if the approver is in the list of default approvers, otherwise false.</returns>
    public static boolean isDefaultInterimApprover(UserId _approver, UserId _user, DataAreaId _dataAreaId = curExt())
    {
        container approvers = xSysLastValue::getValue(_dataAreaId, _user, UtilElementType::Class, defaultInterimApproverPersonalizationKey);

        return conFind(approvers, _approver) > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultInterimApprovers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the current interim approvers to be default for future expense reports for the employee.
    /// </summary>
    /// <param name = "_trvExpTable">Expense report record to set defaults from.</param>
    public static void setDefaultInterimApprovers(TrvExpTable _trvExpTable)
    {
        container approvers;
        TrvInterimApprover interimApprover;

        UserId user = HcmWorker::findPersonUser(_trvExpTable.CreatingWorker).User;

        while select Approver from interimApprover
            order by interimApprover.ApproverOrder asc
            where interimApprover.WorkflowContextRecId == _trvExpTable.RecId
        {
            approvers += interimApprover.Approver;
        }

        xSysLastValue::putValue(approvers, _trvExpTable.ReferenceDataAreaId, user, UtilElementType::Class, defaultInterimApproverPersonalizationKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultFinalApprover</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the current final approver to be default for future expense reports for the employee.
    /// </summary>
    /// <param name = "_trvExpTable">Expense report record to set defaults from.</param>
    public static void setDefaultFinalApprover(TrvExpTable _trvExpTable)
    {
        UserId user = HcmWorker::findPersonUser(_trvExpTable.CreatingWorker).User;
        xSysLastValue::putValue([_trvExpTable.FinalApprover], _trvExpTable.ReferenceDataAreaId, user, UtilElementType::Class, defaultFinalApproverPersonalizationKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyDefaultInterimApprovers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default interim approvers and applies them for the given report.
    /// </summary>
    /// <param name = "_trvExpTable">Expense report record to set defaults for.</param>
    public static void applyDefaultInterimApprovers(TrvExpTable _trvExpTable)
    {
        TrvInterimApprover interimApprover;
        UserId user = HcmWorker::findPersonUser(_trvExpTable.CreatingWorker).User;
        container approvers = xSysLastValue::getValue(_trvExpTable.ReferenceDataAreaId, user, UtilElementType::Class, defaultInterimApproverPersonalizationKey);

        for (int i = 1; i <= conLen(approvers); i++)
        {
            userInfo userInfo;
            str approverId = conPeek(approvers, i);

            select firstfast RecId from userInfo where userInfo.id == approverId;

            if (!userInfo.RecId)
            {
                continue;
            }

            ttsbegin;
            interimApprover.clear();
            interimApprover.Approver = approverId;
            interimApprover.ApproverOrder = i;
            interimApprover.WorkflowContextRecId = _trvExpTable.RecId;
            interimApprover.modifiedField(fieldNum(TrvInterimApprover, Approver));
            interimApprover.insert();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultFinalApprover</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default final approver for the given worker.
    /// </summary>
    /// <param name = "_reportOwner">Worker to reteive the default final approver for.</param>
    /// <param name = "_dataAreaId">Company to use when retreiving default final approver.</param>
    /// <returns>The default final approver.</returns>
    public static HcmWorkerRecId getDefaultFinalApprover(HcmWorkerRecId _reportOwner, DataAreaId _dataAreaId = curExt())
    {
        userInfo userInfo;
        UserId user = HcmWorker::findPersonUser(_reportOwner).User;
        HcmWorkerRecId finalApprover = conPeek(xSysLastValue::getValue(_dataAreaId, user, UtilElementType::Class, defaultFinalApproverPersonalizationKey), 1);
        UserId finalApproverId = HcmWorker::findPersonUser(finalApprover).User;

        select firstfast RecId from userInfo where userInfo.id == finalApproverId;

        if (!userInfo.RecId)
        {
            // Default the worker's manager.
            finalApprover = HcmPosition::getReportsToWorker(HcmWorkerHelper::getPrimaryPosition(_reportOwner));
        }

        return finalApprover;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyDefaultFinalApprover</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default final approver and applies it for the given report.
    /// </summary>
    /// <param name = "_trvExpTable">Expense report record to set defaults for.</param>
    public static void applyDefaultFinalApprover(TrvExpTable _trvExpTable)
    {
        ttsbegin;
        _trvExpTable.FinalApprover = TrvInterimFinalApproverHelper::getDefaultFinalApprover(_trvExpTable.CreatingWorker, _trvExpTable.ReferenceDataAreaId);
        _trvExpTable.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>TrvExpTable_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the default approvers when a expense report is created.
    /// </summary>
    /// <param name="sender">Record buffer of the TrvExpTable being created.</param>
    /// <param name="e">Args passed to the event handler.</param>
    [DataEventHandler(tableStr(TrvExpTable), DataEventType::Inserted)]
    public static void TrvExpTable_onInserted(Common sender, DataEventArgs e)
    {
        TrvExpTable trvExpTable = sender as TrvExpTable;

        TrvInterimFinalApproverHelper::applyDefaultInterimApprovers(trvExpTable);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>