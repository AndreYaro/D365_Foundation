<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HRMCompEventEmplCreateEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HRMCompEventEmplCreateEventHandler
{
   
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>HrmCompEventEmplCreate_getFixedCompensationPerformanceFactorPercent</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(HrmCompEventEmplCreate), delegateStr(HrmCompEventEmplCreate, getFixedCompensationPerformanceFactorPercent))]
    public static void HrmCompEventEmplCreate_getFixedCompensationPerformanceFactorPercent(HcmWorkerRecId _workerRecId, HcmPositionRecId _positionRecId, HcmCompToDate _cycleToDate, EventHandlerResult _result)
    {
        HRMCompPerfPlanEmpl compPerfPlanEmpl = HRMCompPerfPlanEmpl::findByDate(_workerRecId, _cycleToDate);
        HRMCompEventPercent performanceFactorPercent;

        if (compPerfPlanEmpl)
        {
            performanceFactorPercent = HRMCompEventEmplCreateEventHandler::getPerfFactorWorker(compPerfPlanEmpl, _positionRecId, _cycleToDate, HRMCompPlanType::Fixed);
        }
        else
        {
            performanceFactorPercent = 100;
        }

        HRMCompEventEmplCreateEventArgs compEventEmplCreateEventArgs = HRMCompEventEmplCreateEventArgs::construct();
        compEventEmplCreateEventArgs.parmPerformanceFactorPercent(performanceFactorPercent);
        compEventEmplCreateEventArgs.parmCompPerfPlanEmplRecordFound(compPerfPlanEmpl.RecId != 0);

        _result.result(compEventEmplCreateEventArgs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>HrmCompEventEmplCreate_getVariableCompensationPerformanceFactorPercent</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(HrmCompEventEmplCreate), delegateStr(HrmCompEventEmplCreate, getVariableCompensationPerformanceFactorPercent))]
    public static void HrmCompEventEmplCreate_getVariableCompensationPerformanceFactorPercent(HcmWorkerRecId _workerRecId, HcmPositionRecId _positionRecId, HcmCompToDate _cycleToDate, ToDate _toDate, EventHandlerResult _result)
    {
        HRMCompPerfPlanEmpl compPerfPlanEmpl = HRMCompPerfPlanEmpl::findByDate(_workerRecId, _toDate);
        HRMCompEventPercent performanceFactorPercent;

        if (compPerfPlanEmpl)
        {
            performanceFactorPercent = HRMCompEventEmplCreateEventHandler::getPerfFactorWorker(compPerfPlanEmpl, _positionRecId, _toDate, HRMCompPlanType::Variable);
        }
        else
        {
            performanceFactorPercent = 100;
        }

        HRMCompEventEmplCreateEventArgs compEventEmplCreateEventArgs = HRMCompEventEmplCreateEventArgs::construct();
        compEventEmplCreateEventArgs.parmPerformanceFactorPercent(performanceFactorPercent);
        compEventEmplCreateEventArgs.parmCompPerfPlanEmplRecordFound(compPerfPlanEmpl.RecId != 0);

        _result.result(compEventEmplCreateEventArgs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPerfFactorWorker</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the percentage of budgeted increase given based on individual performance.
    /// </summary>
    /// <param name="_compPerfPlanEmpl">
    ///     The <c>HRMCompPerfPlanEmpl</c>, employee performance record to use as basis for calculation.
    /// </param>
    /// <param name="_positionRecId">
    ///     The <c>HcmPositionRecId</c> for the worker's position to calculate for.
    /// </param>
    /// <param name="_toDate">
    ///     The date to use to retrieve the percentage.
    /// </param>
    /// <param name="_planType">
    ///     The compensation plan type to locate HRMCompPerfAllocationLine
    /// </param>
    /// <returns>
    ///     The percentage of budgeted increase given based on individual performance settings.
    /// </returns>
    /// <remarks>
    /// Returns 100 percent if the compensation allocation line is not found
    /// </remarks>
    public static HRMCompPercent getPerfFactorWorker(HRMCompPerfPlanEmpl _compPerfPlanEmpl, HcmPositionRecId _positionRecId, ToDate _toDate, HRMCompPlanType _planType)
    {
        // Called from both fixed and variable
        HRMCompPerfAllocation       compPerfAllocation;
        HRMCompPerfAllocationLine   compPerfAllocationLine;
        HcmPositionDetail           positionDetail;
        Percent                     performanceFactorPercent = 100;

        positionDetail = HcmPositionDetail::findByPosition(_positionRecId);
        compPerfAllocation = HRMCompPerfAllocation::findHierarchyByDate(_compPerfPlanEmpl.PerfPlanId, positionDetail.Department, _toDate);
        str departmentName = OMOperatingUnit::find(positionDetail.Department, OMOperatingUnitType::OMDepartment).Name;
        if (!compPerfAllocation)
        {
            // No performance allocation was found for performance plan %1, department %2 and date %3.
            info(strfmt("@HCM:CompNoPerformanceAllocationFound", _compPerfPlanEmpl.PerfPlanId, departmentName, date2strUsr(_toDate, DateFlags::FormatAll)));
            return performanceFactorPercent;
        }

        compPerfAllocationLine = HRMCompPerfAllocationLine::find(compPerfAllocation.AllocationId, _planType, _compPerfPlanEmpl.RatingModel, _compPerfPlanEmpl.CompPerfRatingId, _compPerfPlanEmpl.RatingLevel);

        if (compPerfAllocationLine)
        {
            // Performance allocation rating was found for performance plan %1 for department %2, date %3 and rating %4 = %5
            info(strFmt("@HCM:CompPerformanceAllocationFound",  _compPerfPlanEmpl.PerfPlanId, departmentName, date2strUsr(_toDate, DateFlags::FormatAll), _compPerfPlanEmpl.CompPerfRatingId, compPerfAllocationLine.PerfFactorPercent));

            performanceFactorPercent = compPerfAllocationLine.PerfFactorPercent;
        }
        else
        {
            if (_planType == HRMCompPlanType::Fixed)
            {
                //No performance allocation fixed pay matrix found for performance plan %1 for department %2, date %3 and rating %4.
                info(strfmt("@HCM:CompNoPerformanceAllocationFixedPayMatrixFound", _compPerfPlanEmpl.PerfPlanId, departmentName, date2strUsr(_toDate, DateFlags::FormatAll), _compPerfPlanEmpl.CompPerfRatingId));
            }
            else if (_planType == HRMCompPlanType::Variable)
            {
                // No performance allocation variable pay matrix found for performance plan %1 for department %2, date %3 and rating %4.
                info(strfmt("@HCM:CompNoPerformanceAllocationVariablePayMatrixFound", _compPerfPlanEmpl.PerfPlanId, departmentName, date2strUsr(_toDate, DateFlags::FormatAll), _compPerfPlanEmpl.CompPerfRatingId));
            }
        }

        return performanceFactorPercent;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>