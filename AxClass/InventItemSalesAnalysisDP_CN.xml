<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventItemSalesAnalysisDP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventItemSalesAnalysisReportDP_CN</c> class provides data for the <c>InventItemSalesAnalysisReport_CN</c> SSRS report.
/// </summary>
/// <remarks>
/// This is the Report Data Provider class for the <c>InventItemSalesAnalysisReport_CN</c> SSRS report.
/// </remarks>
[
    SRSReportParameterAttribute(classStr(InventItemSalesAnalysisContract_CN))
]

public class InventItemSalesAnalysisDP_CN extends SrsReportDataProviderPreProcessTempDB
{
    InventItemSalesAnalysisTmp_CN         itemSalesAnalysisTmp_CN;

    FromDate            fromDate;
    ToDate              toDate;
    ItemId              itemId;
    CustAccount         custAccount;

    InventTrans         inventTrans;
    CustTable           custTable;

    #define.Quantity(1)
    #define.firstTime(1)
    #define.salesIdDefault('')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcLatestContractPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the latest contract price based on specific parameters
    /// </summary>
    /// <param name="_inventTrans">
    /// Table for parameter _inventTrans
    /// </param>
    /// <param name="_custAccount">
    /// Account number for parameter _custAccount
    /// </param>
    /// <param name="_priceGroupId">
    /// PriceGroupId for parameter _priceGroupId
    /// </param>
    /// <returns>
    /// The latest contract price.
    /// </returns>
    private Price calcLatestContractPrice(
        InventTrans     _inventTrans,
        AccountNum      _custAccount,
        PriceGroupId    _priceGroupId)
    {
        PriceDisc priceDisc = this.createPriceDiscInstance(this.createAndInitPriceDiscParameters(_inventTrans, _custAccount));
        priceDisc.findPrice(_priceGroupId);

        return  priceDisc.price();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PriceDiscParameters</c> class.
    /// </summary>
    /// <returns>An instance of the <c>PriceDiscParameters</c> class.</returns>
    protected PriceDisc createPriceDiscInstance(PriceDiscParameters _parameters)
    {
        return PriceDisc::newFromPriceDiscParameters(_parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PriceDiscParameters</c> class.
    /// </summary>
    /// <returns>An instance of the <c>PriceDiscParameters</c> class.</returns>
    protected PriceDiscParameters createPriceDiscParameters()
    {
        return PriceDiscParameters::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndInitPriceDiscParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an instance of the <c>PriceDiscParameters</c> class.
    /// </summary>
    /// <param name = "_inventTrans">An <c>InventTrans</c> record.</param>
    /// <param name = "_custAccount">A customer <c>AccountNum</c>.</param>
    protected PriceDiscParameters createAndInitPriceDiscParameters(
        InventTrans     _inventTrans,
        AccountNum      _custAccount)
    {
        PriceDiscParameters parameters = this.createPriceDiscParameters();
        
        parameters.parmModuleType(ModuleInventPurchSales::Sales);
        parameters.parmItemId(_inventTrans.ItemId);
        parameters.parmInventDim(_inventTrans.inventDim());
        parameters.parmUnitID(InventTableModule::find(_inventTrans.ItemId, ModuleInventPurchSales::Invent).UnitId);
        parameters.parmPriceDiscDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        parameters.parmQty(#Quantity);
        parameters.parmAccountNum(_custAccount);
        parameters.parmCurrencyCode(_inventTrans.CurrencyCode);

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventItemSalesAnalysisTmp_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data from the <c>ItemSalesAnalysisReportTmp_CN</c> temporary table.
    /// </summary>
    /// <returns>
    /// An instance of the <c>ItemSalesAnalysisReportTmp_CN</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(InventItemSalesAnalysisTmp_CN))
    ]
    public InventItemSalesAnalysisTmp_CN getInventItemSalesAnalysisTmp_CN()
    {
        select itemSalesAnalysisTmp_CN;
        return itemSalesAnalysisTmp_CN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventItemSalesAnalysisTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates data got from query and inserts the results into the InventItemSalesAnalysisTmp_CN table.
    /// </summary>
    private void initInventItemSalesAnalysisTmp()
    {
        CustInvoiceTrans    custInvoiceTransLocal;
        CustInvoiceJour     custInvoiceJour;

        RecordInsertList itemSalesAnalysisTmp_CNList =
            new RecordInsertList(tableNum(InventItemSalesAnalysisTmp_CN), true, true, true, true, true, itemSalesAnalysisTmp_CN);

        Query queryBase = new Query(queryStr(InventItemSalesAnalysisBaseData_CN));
        Query queryTrans = new Query(queryStr(InventItemSalesAnalysisTransData_CN));

        //Base data query
        SysQuery::findOrCreateRange(queryBase.dataSourceTable(tableNum(InventTrans)), fieldNum(InventTrans, Qty)).value(queryrange(null, 0, true));
        SysQuery::findOrCreateRange(queryBase.dataSourceTable(tableNum(InventTrans)), fieldNum(InventTrans, ItemId)).value(itemId);
        SysQuery::findOrCreateRange(queryBase.dataSourceTable(tableNum(InventTrans)), fieldNum(InventTrans, DateFinancial)).value(queryRange(fromDate, toDate));
        SysQuery::findOrCreateRange(queryBase.dataSourceTable(tableNum(CustTable)), fieldNum(CustTable, AccountNum)).value(custAccount);

        //Trans data query
        SysQuery::findOrCreateRange(queryTrans.dataSourceTable(tableNum(InventTrans)), fieldNum(InventTrans, Qty)).value(queryrange(null, 0, true));
        SysQuery::findOrCreateRange(queryTrans.dataSourceTable(tableNum(InventTrans)), fieldNum(InventTrans, DateFinancial)).value(queryRange(fromDate, toDate));

        //Group by customer account and Item id to get the base report data, as well as the total Qty.
        QueryRun qRunBase = new QueryRun(queryBase);
        while (qRunBase.next())
        {
            //Initialize the local variables.
            Counter  transCount     = 0;
            LeadTime leadTimeTmp    = 0;
            Date     createDateTmp  = dateNull();
            Price    salesPriceTmp  = 0;
            SalesId  salesIdLocal   = #salesIdDefault;
            Qty      invoicedQtyTmp = 0;

            inventTrans     = qRunBase.get(tableNum(inventTrans));
            custTable       = qRunBase.get(tableNum(custTable));

            //Inserts data into InventItemSalesAnalysisTmp_CN table.
            itemSalesAnalysisTmp_CN.clear();
            itemSalesAnalysisTmp_CN.ItemId          = inventTrans.ItemId;
            itemSalesAnalysisTmp_CN.CustAccount     = custTable.AccountNum;
            itemSalesAnalysisTmp_CN.SalesQty        = -inventTrans.Qty;     //reverse the sign
            itemSalesAnalysisTmp_CN.CustName        = CustTable::find(itemSalesAnalysisTmp_CN.CustAccount).name();
            itemSalesAnalysisTmp_CN.ItemName        = InventTable::find(inventTrans.ItemId).itemName();
            itemSalesAnalysisTmp_CN.UnitID          = InventTableModule::find(itemSalesAnalysisTmp_CN.ItemId, ModuleInventPurchSales::Invent).UnitId;
            itemSalesAnalysisTmp_CN.StartDate       = fromDate;
            itemSalesAnalysisTmp_CN.EndDate         = toDate;

            //Modifies the ranges for Customer account and Item Id.
            SysQuery::findOrCreateRange(queryTrans.dataSourceTable(tableNum(InventTrans)), fieldNum(InventTrans, ItemId)).value(itemSalesAnalysisTmp_CN.ItemId);
            SysQuery::findOrCreateRange(queryTrans.dataSourceTable(tableNum(CustTable)), fieldNum(CustTable, AccountNum)).value(itemSalesAnalysisTmp_CN.CustAccount);

            //Executes the query for specific customer account and Item Id.
            QueryRun qRunTrans = new QueryRun(queryTrans);
            transCount = 0;
            while (qRunTrans.next())
            {
                InventTransOrigin inventTransOriginLocal = qRunTrans.get(tableNum(InventTransOrigin));
                InventTrans       inventTransLocal       = qRunTrans.get(tableNum(InventTrans));
                CustTable         custTableLocal         = qRunTrans.get(tableNum(CustTable));

                SalesLine salesLineLocal = salesLine::findInventTransId(inventTransOriginLocal.InventTransId);
                createDateTmp = DateTimeUtil::date(salesLineLocal.createdDateTime ? salesLineLocal.createdDateTime : SalesTable::find(salesLineLocal.SalesId).createdDateTime);
                leadTimeTmp     += inventTransLocal.DatePhysical - createDateTmp;
                transCount++;

                //Calculates times sold.
                if (salesIdLocal != inventTransOriginLocal.ReferenceId)
                {
                    itemSalesAnalysisTmp_CN.TimesSold++;
                    salesIdLocal = inventTransOriginLocal.ReferenceId;
                }

                //Calculates sales price.
                InventTableModule inventTableModuleLocal = InventTableModule::find(
                    inventTransLocal.ItemId,
                    ModuleInventPurchSales::Invent);

                select LineAmount, Qty, SalesUnit from custInvoiceTransLocal
                    where custInvoiceTransLocal.InventTransId == inventTransOriginLocal.InventTransId
                        && custInvoiceTransLocal.InvoiceDate  == inventTransLocal.DateFinancial
                    exists join custInvoiceJour
                        where custInvoiceJour.SalesId               == custInvoiceTransLocal.SalesId
                            && custInvoiceJour.InvoiceId            == custInvoiceTransLocal.InvoiceId
                            && custInvoiceJour.InvoiceDate          == custInvoiceTransLocal.InvoiceDate
                            && custInvoiceJour.numberSequenceGroup  == custInvoiceTransLocal.numberSequenceGroup
                            && custInvoiceJour.LedgerVoucher        == inventTransLocal.Voucher;

                Qty custInvoiceTransQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(inventTransLocal.ItemId,
																												inventTransLocal.InventDimId,
																												custInvoiceTransLocal.Qty,
																												custInvoiceTransLocal.SalesUnit,
																												inventTableModuleLocal.UnitId);

                invoicedQtyTmp  += custInvoiceTransQty;
                salesPriceTmp   = custInvoiceTransQty ? custInvoiceTransLocal.LineAmount / custInvoiceTransQty : 0;

                //Total sales amount
                itemSalesAnalysisTmp_CN.TotalSalesAmount      += custInvoiceTransLocal.LineAmount;

                if (itemSalesAnalysisTmp_CN.LowestPrice == 0)
                {
                    itemSalesAnalysisTmp_CN.LowestPrice = salesPriceTmp;
                }

                //Current records are last information when first time, calculates all last fields' value.
                if (transCount == #firstTime)
                {
                    //Gets last sales date.
                    itemSalesAnalysisTmp_CN.LastSalesDate   = inventTransLocal.DateFinancial;

                    //Gets last lead period.
                    itemSalesAnalysisTmp_CN.LastLeadPeriod  = leadTimeTmp;

                    //Gets last sales price.
                    itemSalesAnalysisTmp_CN.LastSalesPrice  = salesPriceTmp;

                    //Gets latest contract price.
                    itemSalesAnalysisTmp_CN.LatestContractPrice = this.calcLatestContractPrice(
                        inventTransLocal,
                        custTableLocal.AccountNum,
                        salesLineLocal.priceGroupId());
                }

                //Calculates lowest price
                itemSalesAnalysisTmp_CN.LowestPrice     = (itemSalesAnalysisTmp_CN.LowestPrice > salesPriceTmp)
                                                            ? salesPriceTmp
                                                            : itemSalesAnalysisTmp_CN.LowestPrice;

                //Calculates highest price
                itemSalesAnalysisTmp_CN.HighestPrice    = (itemSalesAnalysisTmp_CN.HighestPrice < salesPriceTmp)
                                                            ? salesPriceTmp
                                                            : itemSalesAnalysisTmp_CN.HighestPrice;

                //First salse date
                itemSalesAnalysisTmp_CN.FirstSalesDate    = inventTransLocal.DateFinancial;
            }

            //Calculates average lead period
            itemSalesAnalysisTmp_CN.AverageLeadPeriod     = real2int(leadTimeTmp / transCount);

            //Avarage unit price
            itemSalesAnalysisTmp_CN.AverageUnitPrice = invoicedQtyTmp != 0 ? itemSalesAnalysisTmp_CN.TotalSalesAmount / invoicedQtyTmp : 0;

            itemSalesAnalysisTmp_CNList.add(itemSalesAnalysisTmp_CN);
        }

        itemSalesAnalysisTmp_CNList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the business logic of the SQL Server Reporting Services report.
    /// </summary>
    /// <remarks>
    /// This method will be called by SSRS at run time. The method will compute the data and populate the
    /// data tables that will be returned to SSRS
    /// </remarks>
    public void processReport()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCN00133, funcName());

        InventItemSalesAnalysisContract_CN contract = this.parmDataContract() as InventItemSalesAnalysisContract_CN;

        fromDate        = contract.parmPeriodContract().parmFromDate();
        toDate          = contract.parmPeriodContract().parmToDate();
        itemId          = contract.parmItemNumber();
        custAccount     = contract.parmCustAccount();

        if (!fromDate)
        {
            fromDate = InventSRSHelper_CN::getCurrentPeriodDate();
        }
        if (!toDate)
        {
            toDate = InventSRSHelper_CN::getCurrentPeriodDate(false);
        }

        //Gets data from queries and inserts them into InventItemSalesAnalysisTmp_CN table
        this.initInventItemSalesAnalysisTmp();

        select firstOnly recId from itemSalesAnalysisTmp_CN;
        if (!itemSalesAnalysisTmp_CN.RecId)
        {
            itemSalesAnalysisTmp_CN.clear();
            itemSalesAnalysisTmp_CN.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>