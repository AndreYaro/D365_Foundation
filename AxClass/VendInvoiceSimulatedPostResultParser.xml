<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceSimulatedPostResultParser</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendInvoiceSimulatedPostResultParser</c> class contains methods that parse the infolog for vendor invoice simulated post messages.
/// </summary>
internal final class VendInvoiceSimulatedPostResultParser
{
    private static str messagePrefix = VendInvoiceSimulatedPostResultParser::getInfologMessagePrefix();
    private VendInvoiceSimulatedPostResult vendInvoiceSimulatedPostResult = VendInvoiceSimulatedPostResult::construct();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static VendInvoiceSimulatedPostResultParser construct()
    {
        return new VendInvoiceSimulatedPostResultParser();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getErrorsAndWarningsFromInfolog</Name>
				<Source><![CDATA[
    internal VendInvoiceSimulatedPostResult getErrorsAndWarningsFromInfolog(
        int _infologLineStart,
        int _infologLineEnd)
    {
        int prefixLength = strLen(VendInvoiceSimulatedPostResultParser::messagePrefix);

        for (int infoLine = _infologLineStart + 1; infoLine <= _infologLineEnd; infoLine++)
        {
            Microsoft.Dynamics.Ax.Xpp.ErrorException errorException;
            try
            {
                str infoMessage = infolog.text(infoLine);

                // Check if the message has the prefix 'Posting Simulate posting'.
                if (strScan(infoMessage, VendInvoiceSimulatedPostResultParser::messagePrefix, 1, prefixLength) > 0
                    && !this.isIgnoremessage(infoMessage))
                {
                    if (infolog.level(infoLine) != Exception::Info)
                    {
                        vendInvoiceSimulatedPostResult.parmResult(VendInvoiceSimulatedPostStatus::Failed);
                    }

                    str actualMessage = strDel(infoMessage, 1, prefixLength);

                    if (vendInvoiceSimulatedPostResult.parmResult() == VendInvoiceSimulatedPostStatus::NotRun
                        && actualMessage == strFmt("@SYS31423"))
                    {
                        vendInvoiceSimulatedPostResult.parmResult(VendInvoiceSimulatedPostStatus::Passed);
                    }

                    if (!this.isDuplicateMessage(actualMessage)
                        && actualMessage != strFmt("@SYS31423"))
                    {
                        vendInvoiceSimulatedPostResult.insertMessage(actualMessage);
                    }
                }
            }
            catch (errorException)
            {
                VendInstrumentation::logTelemetry(
                    VendInvoicePostTaskConstants::VendInvoiceSimulatedPost,
                    this.toString(),
                    funcName(),
                    VendInvoicePostTaskConstants::VendInvoiceSimulatePostingResult_Failed,
                    strFmt("%1", errorException.ToString()));
            }
        }

        return vendInvoiceSimulatedPostResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIgnoreMessage</Name>
				<Source><![CDATA[
    private boolean isIgnoreMessage(str _message)
    {
        return _message == strFmt("%1%2", VendInvoiceSimulatedPostResultParser::messagePrefix, "@SYS9265")
            || _message == strFmt("%1%2", VendInvoiceSimulatedPostResultParser::messagePrefix, "@SYS21533")
            || _message == strFmt("%1%2", VendInvoiceSimulatedPostResultParser::messagePrefix, strFmt("@SysOperationLabels:SysOperationSandbox_OperationCanceled", "@SYS23176"));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDuplicateMessage</Name>
				<Source><![CDATA[
    private boolean isDuplicateMessage(str _message)
    {
        boolean isDuplicate;
        ListEnumerator listEnumerator = vendInvoiceSimulatedPostResult.parmMessageList().getEnumerator();

        while (listEnumerator.moveNext())
        {
            if (_message == listEnumerator.current())
            {
                isDuplicate = true;
                break;
            }
        }

        return isDuplicate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInfologMessagePrefix</Name>
				<Source><![CDATA[
    private static str getInfologMessagePrefix()
    {
        setPrefix("@SYS25781");
        setPrefix("@AccountsPayable:SimulatePosting");
        return getPrefix();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>