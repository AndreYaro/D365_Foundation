<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLineProjItemTransImpl</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The tax model class for <c>CustInvoiceLine</c>.
/// </summary>
[TaxModelDocumentLineAttribute(tableStr(ProjItemTrans))]
public class TaxModelDocLineProjItemTransImpl extends TaxModelDocLineBaseImpl
{
    ProjItemTrans                   projItemTrans;
    ProjItemTransSale               projItemTransSale;
    ProjProposalJour                projProposalJour;
    ProjProposalItem                projProposalItem;
    ProjProposalItemDetail          projProposalItemDetail;
    ProjFundingSource               projFundingSource;
    CustTable                       custTable;
    boolean                         isMultipleFundingSource;
    Percent                         fundingSourceAllocationPercent;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustTable</c> based on the cust account on the transaction line.
    /// </summary>
    /// <returns>
    /// The <c>CustTable</c>
    /// </returns>
    public CustTable getCustTable()
    {
        CustTable ret;

        if (projProposalJour)
        {
            ret = CustTable::find(projProposalJour.InvoiceAccount);
        }
        else
        {
            ret = CustTable::find(ProjTable::find(projItemTrans.ProjID).CustAccount);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyLogisticsPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party <c>LogisticsPostalAddress</c> of this transaction document line.
    /// </summary>
    /// <returns>
    /// The tax <c>LogisticsPostalAddress</c>
    /// </returns>
    public LogisticsPostalAddress getPartyLogisticsPostalAddress()
    {
        if (isMultipleFundingSource)
        {
            return LogisticsPostalAddress::findByLocation(projFundingSource.InvoiceLocation);
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyTaxInfomationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party <c>TaxInformation_IN</c>.
    /// </summary>
    /// <returns>
    /// The party <c>TaxInformation_IN</c>
    /// </returns>
    public TaxInformation_IN getPartyTaxInfomationTable()
    {
        if (isMultipleFundingSource)
        {
            return TaxInformation_IN::findDefaultbyLocation(projFundingSource.InvoiceLocation);
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the quantity from the transaction line.
    /// </summary>
    /// <returns>
    ///    The quantity.
    /// </returns>
    /// <remarks>
    ///    If the transaction does not support quantities, 0 may be passed as the quantity. This will be used
    ///    to calculate taxes by unit.
    /// </remarks>
    public Qty getQuantity()
    {
        if (projItemTransSale.TransStatus == ProjTransStatus::CreditnoteProposal)
        {
            return -projItemTrans.Qty;
        }
        else
        {
            return projItemTrans.Qty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax direction.
    /// </summary>
    /// <returns>
    /// The tax direction
    /// </returns>
    public TaxDirection getTaxDirection()
    {
        return TaxDirection::OutgoingTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction posting date
    /// </summary>
    /// <returns>
    /// The transaction posting date
    /// </returns>
    public TransDate getTransDate()
    {
        return projProposalJour ? projProposalJour.InvoiceDate : ProjItemTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the domain object.
    /// The method should only be called by the <c>TaxModelDocLineFactoryable_IN</c> classes.
    /// </summary>
    /// <param name="_documentLineMap">
    /// The document line buffer.
    /// </param>
    public void init(SalesPurchJournalLine _documentLineMap)
    {
        Debug::assert(_documentLineMap.SourceTableId == tableNum(ProjItemTransSale)
            || _documentLineMap.SourceTableId == tableNum(ProjItemTrans)
            || _documentLineMap.SourceTableId == tableNum(ProjproposalItem));

        if (documentLineMap.SourceTableId == tableNum(ProjItemTrans))
        {
            projItemTrans = _documentLineMap;
        }
        else
        {
            if (_documentLineMap.SourceTableId == tableNum(ProjItemTransSale))
            {
                projItemTransSale      = _documentLineMap;

                select firstOnly projProposalItem
                join projProposalItemDetail
                    where projProposalItemDetail.ProposalRefRecId   == projProposalItem.RecId
                        && projProposalItemDetail.SaleRefRecId      == projItemTransSale.RecId
                join projProposalJour
                    where projProposalJour.ProposalId == projProposalItem.ProposalId
                        && projProposalJour.LineProperty == ProjLinePropertyCode::Open;
            }
            else if (_documentLineMap.SourceTableId == tableNum(ProjproposalItem))
            {
                projproposalItem      = _documentLineMap;

                select firstonly projItemTransSale where projItemTransSale.ProjTransId == projproposalItem.ProjTransId;

                select firstOnly projProposalJour
                    where projProposalJour.ProposalId == projProposalItem.ProposalId;
            }

            projItemTrans               = ProjItemTrans::find(projItemTransSale.ProjTransId);
            projFundingSource           = ProjFundingSource::find(projItemTransSale.FundingSource);

            isMultipleFundingSource         = ProjInvoiceTable::hasMultipleFundingSources(ProjTable::find(projItemTrans.ProjId).ProjInvoiceProjId);
            fundingSourceAllocationPercent  = this.getFundingSourcePercentage();
            custTable           = this.getCustTable();
        }

        super(projItemTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canModifyTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the document line can be edited or not on tax information.
    /// </summary>
    /// <returns>
    /// True if the document line is editable; otherwise, false.
    /// </returns>
    public NoYes canModifyTaxInformation()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction delivery date
    /// </summary>
    /// <returns>
    /// The transaction delivery date
    /// </returns>
    public Date getDeliveryDate()
    {
        return projProposalJour ? projProposalJour.InvoiceDate : ProjItemTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line amount of the document line.
    /// </summary>
    /// <returns>
    /// The line amount.
    /// </returns>
    public LineAmount getLineAmount()
    {
        return projProposalItemDetail.AmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax module type.
    /// </summary>
    /// <returns>
    /// The transaction tax module type.
    /// </returns>
    public TaxModuleType getTaxModuleType()
    {
        return TaxModuleType::Project;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFundingSourcePercentage</Name>
				<Source><![CDATA[
    private Percent getFundingSourcePercentage()
    {
        Percent         ret;
        ProjTurnover    transTurnover;

        if (isMultipleFundingSource)
        {
            transTurnover = projItemTransSale.projItemTrans().transTurnover();

            if (transTurnover)
            {
                ret = abs(projItemTransSale.LineAmount / transTurnover);
            }
        }
        else
        {
            ret = 1;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ItemId</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>ItemId</c>
    /// </returns>
    public ItemId getItemId()
    {
        return projItemTrans.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the unit of the item in this transaction document line.
    /// </summary>
    /// <returns>The unit of the item in this transaction line.</returns>
    public UnitOfMeasureSymbol getUnit()
    {
        return projItemTrans.CurrencyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction invoice date
    /// </summary>
    /// <returns>
    /// The transaction invoice date
    /// </returns>
    public InvoiceDate getDocumentInvoiceDate()
    {
        return projProposalJour.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction document date
    /// </summary>
    /// <returns>
    /// The transaction document date
    /// </returns>
    public DocumentDate getDocumentDate()
    {
        return projItemTrans.TransDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>