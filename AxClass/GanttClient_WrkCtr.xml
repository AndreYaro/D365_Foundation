<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GanttClient_WrkCtr</Name>
	<SourceCode>
		<Declaration><![CDATA[
class GanttClient_WrkCtr extends GanttClient
{
    #define.defaultGanttTableDays(30)

    DialogField         dialogFromDate;
    DialogField         dialogToDate;

    Days                ganttTableDays;
    Name                ganttTableName;
    GanttSchedId        ganttTableId;

    ReqPlanId           reqPlanIdPlannedProd;

    GanttCallerWrkCtr   ganttCaller;
    boolean             loadOnlySpecific;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addLoadIdsFromGanttTable</Name>
				<Source><![CDATA[
    public void addLoadIdsFromGanttTable(GanttTable _ganttTable)
    {
        GanttLine                   ganttLineResources;
        GanttLineResourceGroups     ganttLineResourceGroups;
        WrkCtrTable                 wrkCtrTable;
        WrkCtrResourceGroupResource wrkCtrResourceGroupResource;
        WrkCtrResourceGroup         wrkCtrResourceGroup;
        date                        validFromDate = this.parmFromDate();
        date                        validToDate = this.parmToDate();

        while select ganttLineResourceGroups
        order by     LineNum
        where        ganttLineResourceGroups.GanttSchedId            == _ganttTable.GanttSchedId
                     && ganttLineResourceGroups.GanttTableDataAreaId == _ganttTable.DataAreaId
        {
            wrkCtrResourceGroup = ganttLineResourceGroups.wrkCtrResourceGroup();

            if (wrkCtrResourceGroup.RecId)
            {
                while select validTimeState(validFromDate, validToDate) WrkCtrId
                from         wrkCtrResourceGroupResource
                where        wrkCtrResourceGroupResource.ResourceGroup == wrkCtrResourceGroup.RecId
                {
                    this.addLoadIds(wrkCtrResourceGroupResource.WrkCtrId);
                }
            }
        }

        while select ganttLineResources
        order by     LineNum
        where        ganttLineResources.GanttSchedId == _ganttTable.GanttSchedId
        {
            wrkCtrTable = ganttLineResources.wrkCtrTable();

            if (wrkCtrTable.RecId)
            {
                this.addLoadIds(wrkCtrTable.WrkCtrId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLoadIdsFromResourceGroupResource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds resources to load into the Gantt chart from a <c>WrkCtrResourceGroupResource</c> record or
    ///    data source.
    /// </summary>
    /// <param name="_resourceGroupResource">
    ///    A <c>WrkCtrResourceGroupResource</c> table buffer that contains the resource to load into the Gantt
    ///    chart.
    /// </param>
    /// <param name="_formDataSource">
    ///    A <c>FormDataSource</c> object that is used as a source to load multiple resources in the Gantt
    ///    chart.
    /// </param>
    public void addLoadIdsFromResourceGroupResource(WrkCtrResourceGroupResource _resourceGroupResource,
                                                    FormDataSource              _formDataSource = null)
    {
        WrkCtrResourceGroupResource resourceGroupResource;

        // read from data source if given
        if (_formDataSource)
        {
            resourceGroupResource = _formDataSource.getFirst(true);
        }

        if (!resourceGroupResource.RecId)
        {
            resourceGroupResource = _resourceGroupResource;
        }

        while (resourceGroupResource &&
               resourceGroupResource.RecId)
        {
            this.addLoadIds(resourceGroupResource.WrkCtrId);
            resourceGroupResource = _formDataSource ? _formDataSource.getNext() : null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLoadIdsFromWrkCtrResourceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds all resources that are members of the resource group.
    /// </summary>
    /// <param name="_wrkCtrResourceGroup">
    ///    The resource group to search base on.
    /// </param>
    /// <param name="_formDataSource">
    ///    The <c>FormDataSource</c> value is used to search multiple resource groups.
    /// </param>
    public void addLoadIdsFromWrkCtrResourceGroup(WrkCtrResourceGroup   _wrkCtrResourceGroup,
                                                  FormDataSource        _formDataSource = null)
    {
        WrkCtrResourceGroup         wrkCtrResourceGroup;
        WrkCtrResourceGroupResource wrkCtrResourceGroupResource;
        date                        validFromDate = this.parmFromDate();
        date                        validToDate = this.parmToDate();

        // read from data source if given
        if (_formDataSource)
        {
            wrkCtrResourceGroup = _formDataSource.getFirst(true);
        }

        if (!wrkCtrResourceGroup.RecId)
        {
            wrkCtrResourceGroup = _wrkCtrResourceGroup;
        }

        while (wrkCtrResourceGroup &&
               wrkCtrResourceGroup.RecId)
        {
            while select validTimeState(validFromDate, validToDate) WrkCtrId
                from wrkCtrResourceGroupResource
                where wrkCtrResourceGroupResource.ResourceGroup == wrkCtrResourceGroup.RecId
            {
                this.addLoadIds(wrkCtrResourceGroupResource.WrkCtrId);
            }

            wrkCtrResourceGroup = _formDataSource ? _formDataSource.getNext() : null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLoadIdsFromWrkCtrTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds resource IDs to be loaded into the Gantt chart that is based on a set of <c>WrkCtrTable</c>
    ///    records.
    /// </summary>
    /// <param name="_wrkCtrTable">
    ///    A <c>WrkCtrTable</c> table buffer that identifies the records for which to load the resource IDs.
    /// </param>
    /// <param name="_formDataSource">
    ///    A <c>FormDataSource</c> object to use for iterating through all the user selected records to load;
    ///    optional.
    /// </param>
    public void addLoadIdsFromWrkCtrTable(WrkCtrTable      _wrkCtrTable,
                                          FormDataSource   _formDataSource = null)
    {
        WrkCtrTable         wrkCtrTable;
        WrkCtrResourceGroup wrkCtrResourceGroup;

        // read from data source if given
        if (_formDataSource)
        {
            wrkCtrTable = _formDataSource.getFirst(true);
        }

        if (!wrkCtrTable.RecId)
        {
            wrkCtrTable = _wrkCtrTable;
        }

        while (wrkCtrTable &&
               wrkCtrTable.RecId)
        {
            if (wrkCtrTable.IsIndividualResource)
            {
                this.addLoadIds(wrkCtrTable.WrkCtrId);
            }
            else
            {
                wrkCtrResourceGroup = WrkCtrResourceGroup::findWrkCtrId(wrkCtrTable.WrkCtrId);
                this.addLoadIdsFromWrkCtrResourceGroup(wrkCtrResourceGroup);
            }

            wrkCtrTable = _formDataSource ? _formDataSource.getNext() : null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>extendTimeScaleInterval</Name>
				<Source><![CDATA[
    protected boolean extendTimeScaleInterval(FromDate _fromDate, ToDate _toDate)
    {
        if (_fromDate > this.parmFromDate() || _toDate < this.parmToDate())
        {
            return false;
        }

        this.parmFromDate(_fromDate);
        this.parmToDate(_toDate);

        GanttData_WrkCtr localData = this.parmGanttData() as GanttData_WrkCtr;
        localData.loadAdditionalDates();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReload</Name>
				<Source><![CDATA[
    protected boolean canReload()
    {
        if (this.canUndo())
        {
            if (Box::yesNo("@SYS113984", DialogButton::No) == DialogButton::No)
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>captionMainDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for setting the caption for the Gantt Client.
    /// </summary>
    /// <param name = "_ganttClient_WrkCtr">The caller of the delegate.</param>
    /// <param name = "_result">An <c>EventHandlerResult</c> class, where the caption can be set.</param>
    delegate void captionMainDelegate(GanttClient_WrkCtr _ganttClient_WrkCtr, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>captionMain</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates the caption to use for the Gantt chart dialog box.
    /// </summary>
    /// <param name="_addItemsToCaption">
    ///    A Boolean value that determines whether the items should be added to the caption; optional.
    /// </param>
    /// <returns>
    ///    A <c>ClassDescription</c> value that contains the string that will be used as a window caption.
    /// </returns>
    /// <remarks>
    ///    The caption is generated based on the caller.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    Exception thrown if the caller is invalid (is a wrong enumeration value).
    /// </exception>
    protected ClassDescription captionMain(boolean  _addItemsToCaption = true)
    {
        ClassDescription    caption;
        SetEnumerator       setEnumerator;
        boolean             isFirst = true;

        switch (this.parmGanttCaller())
        {
            case GanttCallerWrkCtr::WrkCtr:
                if (this.parmSetLoadIds().elements() > 1)
                {
                    caption = "@SYS10369";
                }
                else
                {
                    caption = "@SYS10597";
                }
                break;

            case GanttCallerWrkCtr::GanttTable :
                caption = ganttTableName ? ganttTableName : ganttTableId;
                break;

            case GanttCallerWrkCtr::Prod:
                if (this.parmSetLoadIds().elements() > 1)
                {
                    caption = "@SYS9747";
                }
                else
                {
                    caption = "@SYS89639";
                }
                break;

            case GanttCallerWrkCtr::PlannedProd:
                if (this.parmSetLoadIds().elements() > 1)
                {
                    caption = "@SYS12742";
                }
                else
                {
                    caption = "@SYS108495";
                }
                break;

            case GanttCallerWrkCtr::Proj:
                if (this.parmSetLoadIds().elements() > 1)
                {
                    caption = "@SYS50498";
                }
                else
                {
                    caption = "@SYS4534";
                }
                break;

            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                this.captionMainDelegate(this, result);

                if (result.hasResult())
                {
                    caption = result.result();
                }
                else
                {
                    throw error(strfmt("@SYS108494", classstr(GanttClient_WrkCtr)));
                }
                break;
        }

        caption = "@SYS20037" + ' - ' + caption;

        if (_addItemsToCaption)
        {
            if (this.parmGanttCaller() != GanttCallerWrkCtr::GanttTable)
            {
                setEnumerator = this.parmSetLoadIds().getEnumerator();

                while (setEnumerator && setEnumerator.moveNext())
                {
                    if (isFirst)
                    {
                        caption = caption + ': ';
                    }
                    else
                    {
                        caption = caption + ', ';
                    }

                    caption = caption + setEnumerator.current();

                    isFirst = false;
                }
            }

            if (this.parmGanttCaller() == GanttCallerWrkCtr::PlannedProd)
            {
                caption = caption + ', ' + fieldpname(ReqPlan, ReqPlanId) + ': ' + reqPlanIdPlannedProd;
            }
        }

        return caption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>captionPrintTitle</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the title of the Gantt chart.
    /// </summary>
    /// <returns>
    ///    A <c>ClassDescription</c> that contains the Gantt chart title.
    /// </returns>
    public ClassDescription captionPrintTitle()
    {
        return this.captionMain(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>captionPrompt</Name>
				<Source><![CDATA[
    protected ClassDescription captionPrompt()
    {
        ClassDescription caption;
        caption = super();

        if (this.isCalledFromWrkCtr())
        {
            caption = "@SYS20037" + ' - ';

            if (this.parmSetLoadIds().elements() > 1)
            {
                caption = caption + "@SYS10369";
            }
            else
            {
                caption = caption + "@SYS10597";
            }
        }

        return caption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkConfigurationKeyEnabled</Name>
				<Source><![CDATA[
    public boolean checkConfigurationKeyEnabled()
    {
        return super() && GanttClient_WrkCtr::isConfigurationKeyEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGanttColor</Name>
				<Source><![CDATA[
    protected GanttColor createGanttColor()
    {
        return GanttColor_WrkCtr::newGanttClient(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGanttData</Name>
				<Source><![CDATA[
    protected GanttData createGanttData()
    {
        if (GanttDataLoadPerfOptimizationFeature::instance().isEnabled())
        {
            return GanttData_WrkCtrV2::newGanttClient(this);
        }
        return GanttData_WrkCtr::newGanttClient(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGanttSetup</Name>
				<Source><![CDATA[
    protected GanttSetup createGanttSetup()
    {
        return GanttSetup_WrkCtr::newGanttClient(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGanttView</Name>
				<Source><![CDATA[
    protected GanttView createGanttView()
    {
        return GanttView_WrkCtr::newGanttClient(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGanttVisualization</Name>
				<Source><![CDATA[
    protected GanttVisualization createGanttVisualization()
    {
        return GanttControlVisualization_WrkCtr::newGanttClient(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog(DialogRunbase dialog = null, boolean forceOnClient = false)
    {
        DialogRunbase dialogRunbase;

        dialogRunbase = super();

        switch (this.parmGanttCaller())
        {
            case GanttCallerWrkCtr::WrkCtr:
                dialogFromDate  = dialogRunbase.addField(extendedtypestr(StartDate));
                dialogFromDate.value(this.parmFromDate());

                dialogToDate    = dialogRunbase.addField(extendedtypestr(EndDate));
                dialogToDate.value(this.parmToDate());
                break;

            case GanttCallerWrkCtr::GanttTable:
                dialogFromDate  = dialogRunbase.addField(extendedtypestr(StartDate));
                dialogFromDate.value(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
                break;
        }

        dialogRunbase.caption("@SYS136582");

        return dialogRunbase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        switch (this.parmGanttCaller())
        {
            case GanttCallerWrkCtr::WrkCtr:
                if (!this.checkDatesInterval(dialogFromDate.value(), dialogToDate.value(), true))
                {
                    return false;
                }

                this.parmFromDate(dialogFromDate.value());
                this.parmToDate(dialogToDate.value());
                break;

            case GanttCallerWrkCtr::GanttTable  :
                this.parmFromDate(dialogFromDate.value());
                this.parmToDate(this.parmFromDate() + (ganttTableDays - 1));
                break;

        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInfologPrefix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Infolog prefix for the current gantt client.
    /// </summary>
    /// <returns>
    /// A String with the Infolog prefix to use.
    /// </returns>
    public str getInfologPrefix()
    {
        str result;

        switch (this.parmGanttCaller())
        {
            case GanttCallerWrkCtr::WrkCtr:
                result = "@SYS20037" + ' - ' + "@SYS10369";
                break;

            case GanttCallerWrkCtr::GanttTable:
                result = "@SYS20037" + ' - ' + (ganttTableName ? ganttTableName : ganttTableId);
                break;

            case GanttCallerWrkCtr::Prod:
                result = "@SYS20037" + ' - ' + "@SYS9747";
                break;

            case GanttCallerWrkCtr::PlannedProd:
                result = "@SYS20037" + ' - ' + "@SYS12742";
                break;

            case GanttCallerWrkCtr::Proj        :
                result = "@SYS20037" + ' - ' + "@SYS50498";
                break;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        GanttData_WrkCtr    localData;
        GanttSetup_WrkCtr   localSetup;
        boolean ret;

        ret = super();

        if (loadOnlySpecific)
        {
            localData = this.parmGanttData();
            localData.parmLoadOnlySpecific(true);

            localSetup = this.parmGanttSetup();
            switch (ganttCaller)
            {
                case GanttCallerWrkCtr::Prod:
                    localSetup.parmLoadPlannedProdJobData(false);
                    localSetup.parmLoadProjData(false);
                    break;

                case GanttCallerWrkCtr::PlannedProd:
                    localSetup.parmLoadProdJobData(false);
                    localSetup.parmLoadProjData(false);
                    break;

                case GanttCallerWrkCtr::Proj:
                    localSetup.parmLoadProdJobData(false);
                    localSetup.parmLoadPlannedProdJobData(false);
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCalledFromWrkCtr</Name>
				<Source><![CDATA[
    public boolean isCalledFromWrkCtr()
    {
        if (ganttCaller == GanttCallerWrkCtr::WrkCtr || ganttCaller == GanttCallerWrkCtr::GanttTable)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    public identifierName lastValueDesignName()
    {
        IdentifierName name = enum2Symbol(enumnum(GanttCallerWrkCtr), enum2int(this.parmGanttCaller()));
        if (loadOnlySpecific)
        {
            // Settings for when opening the gantt in fast-view should be saved separately
            name += enum2str(NoYes::Yes);
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        ganttTableDays = #defaultGanttTableDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGanttCaller</Name>
				<Source><![CDATA[
    public GanttCallerWrkCtr parmGanttCaller(GanttCallerWrkCtr _ganttCaller = ganttCaller)
    {
        ganttCaller = _ganttCaller;

        return ganttCaller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGanttColor</Name>
				<Source><![CDATA[
    public GanttColor parmGanttColor(GanttColor _ganttColor = ganttColor)
    {
        return super(_ganttColor);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGanttData</Name>
				<Source><![CDATA[
    public GanttData parmGanttData(GanttData _ganttData = ganttData)
    {
        return super(_ganttData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGanttSetup</Name>
				<Source><![CDATA[
    public GanttSetup parmGanttSetup(GanttSetup _ganttSetup = ganttSetup)
    {
        return super(_ganttSetup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGanttTableDays</Name>
				<Source><![CDATA[
    public Days parmGanttTableDays(Days _ganttTableDays = ganttTableDays)
    {
        ganttTableDays = _ganttTableDays;

        return ganttTableDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGanttTableId</Name>
				<Source><![CDATA[
    public GanttSchedId parmGanttTableId(GanttSchedId _ganttTableId = ganttTableId)
    {
        ganttTableId = _ganttTableId;

        return ganttTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGanttTableName</Name>
				<Source><![CDATA[
    public Name parmGanttTableName(Name _ganttTableName = ganttTableName)
    {
        ganttTableName = _ganttTableName;

        return ganttTableName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGanttView</Name>
				<Source><![CDATA[
    public GanttView parmGanttView(GanttView _ganttView = ganttView)
    {
        return super(_ganttView);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGanttVisualization</Name>
				<Source><![CDATA[
    public GanttVisualization parmGanttVisualization(GanttVisualization _ganttVisualization = ganttVisualization)
    {
        return super(_ganttVisualization);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadOnlySpecific</Name>
				<Source><![CDATA[
    public boolean parmLoadOnlySpecific(boolean _loadOnlySpecific = loadOnlySpecific)
    {
        loadOnlySpecific = _loadOnlySpecific;
        return loadOnlySpecific;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqPlanIdPlannedProd</Name>
				<Source><![CDATA[
    public ReqPlanId parmReqPlanIdPlannedProd(ReqPlanId _reqPlanIdPlannedProd = reqPlanIdPlannedProd)
    {
        reqPlanIdPlannedProd = _reqPlanIdPlannedProd;

        return reqPlanIdPlannedProd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDialog</Name>
				<Source><![CDATA[
    public boolean showDialog()
    {
        if (this.isCalledFromWrkCtr())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean ret;

        ret = super(packedClass);

        if (!this.isCalledFromWrkCtr())
        {
            this.resetTimeScaleInterval();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static GanttClient_WrkCtr construct()
    {
        return new GanttClient_WrkCtr();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS20037" + ' - ' + "@SYS10369";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConfigurationKeyEnabled</Name>
				<Source><![CDATA[
    public static boolean isConfigurationKeyEnabled(boolean _showInfo = true)
    {
        DictConfigurationKey dictConfigKeyProdShop = new DictConfigurationKey(configurationkeynum(ProdShop));
        DictConfigurationKey dictConfigKeyProject  = new DictConfigurationKey(configurationkeynum(Project));
        DictConfigurationKey dictConfigKeyReq      = new DictConfigurationKey(configurationkeynum(Req));

        if (!dictConfigKeyProdShop.enabled()     &&
           !dictConfigKeyProject.enabled() &&
           !dictConfigKeyReq.enabled())
        {
            if (_showInfo)
            {
                return checkFailed(strfmt("@SYS75419"+'\'%1\', \'%2\', \'%3\'',
                                   dictConfigKeyProdShop.label(),
                                   dictConfigKeyProject.label(),
                                   dictConfigKeyReq.label()));
            }
            else
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of a <c>GanttClient_WrkCtr</c> class from a buffer.
    /// </summary>
    /// <param name = "_common">The buffer.</param>
    /// <returns>The new instance.</returns>
    /// <remarks>
    /// Use a post-method handler to create additional variants of <c>GanttClient_WrkCtr</c> classes.
    /// </remarks>
    public static GanttClient_WrkCtr newFromBuffer(Common _common)     
    {
        switch (_common.TableId)
        {
            case tablenum(GanttTable):
                return GanttClient_WrkCtr::newGanttTable(_common);

            case tablenum(ProdSupervisorScheduledOrders):
                return GanttClient_WrkCtr::newProdSupervisorScheduledOrder(_common, FormDataUtil::getFormDataSource(_common));

            case tablenum(JmgProdJobListView):
                return GanttClient_WrkCtr::newJmgProdJobListView(_common, FormDataUtil::getFormDataSource(_common));

            case tablenum(ProdTable):
                return GanttClient_WrkCtr::newProduction(_common, FormDataUtil::getFormDataSource(_common));

            case tablenum(WrkCtrTable):
            case tablenum(WrkCtrResourceGroup):
                return GanttClient_WrkCtr::newWrkCtr();

            case tablenum(WrkCtrResourceGroupResource):
                return GanttClient_WrkCtr::newResourceGroupResource(_common, FormDataUtil::getFormDataSource(_common));

            case tablenum(ProjTable):
                return GanttClient_WrkCtr::newProject(_common, FormDataUtil::getFormDataSource(_common));

            case tablenum(ProjForecastEmpl):
                ProjForecastEmpl projForecastEmpl = _common as ProjForecastEmpl;
                return GanttClient_WrkCtr::newProject(ProjTable::find(projForecastEmpl.ProjId), null);

            case tablenum(ReqPO):
                return GanttClient_WrkCtr::newPlannedProduction(_common, FormDataUtil::getFormDataSource(_common));
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        
        if (_args == null)
        {
            throw error(strfmt("@SYS27147", classstr(GanttClient_WrkCtr)));
        }
        Common argsRecord = _args.record();
        GanttClient_WrkCtr ganttClient = GanttClient_WrkCtr::newFromBuffer(argsRecord);
        if (!ganttClient)
        {
            throw error("@SYS18598");
        }

        if (_args.menuItemName() == menuitemDisplayStr(GanttWrkCtrActionSelectedOnly))
        {
            ganttClient.parmLoadOnlySpecific(true);
        }

        if (ganttClient.prompt())
        {
            switch (_args.dataset())
            {
                case tablenum(WrkCtrTable):
                    //Decide what WrkCtrIds to load based on the selected date interval
                    ganttClient.addLoadIdsFromWrkCtrTable(argsRecord, FormDataUtil::getFormDataSource(argsRecord));
                    break;

                case tablenum(WrkCtrResourceGroup):
                    //Decide what WrkCtrIds to load based on the selected date interval
                    ganttClient.addLoadIdsFromWrkCtrResourceGroup(argsRecord, FormDataUtil::getFormDataSource(argsRecord));
                    break;
            }

            ganttClient.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newGanttTable</Name>
				<Source><![CDATA[
    public static GanttClient_WrkCtr newGanttTable(GanttTable _ganttTable)
    {
        GanttClient_WrkCtr ganttClient = GanttClient_WrkCtr::construct();
        ganttClient.parmGanttCaller(GanttCallerWrkCtr::GanttTable);

        ganttClient.getLast();

        ganttClient.addLoadIdsFromGanttTable(_ganttTable);

        ganttClient.parmGanttTableId(_ganttTable.GanttSchedId);
        ganttClient.parmGanttTableName(_ganttTable.Name);
        ganttClient.parmGanttTableDays(_ganttTable.TimeFence);

        return ganttClient;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPlannedProduction</Name>
				<Source><![CDATA[
    public static GanttClient_WrkCtr newPlannedProduction(ReqPO          _reqPO,
                                                          FormDataSource _formDataSource)
    {
        GanttClient_WrkCtr ganttClient = GanttClient_WrkCtr::construct();

        ganttClient.parmGanttCaller(GanttCallerWrkCtr::PlannedProd);

        ganttClient.getLast();

        ganttClient.addLoadIdsFromDS(_reqPO,
                                     _formDataSource,
                                     fieldnum(ReqPO, RefId),
                                     fieldnum(ReqPO, SchedFromDate),
                                     fieldnum(ReqPO, SchedToDate));

        ganttClient.parmReqPlanIdPlannedProd(
            ReqPlanVersion::find(_reqPO.PlanVersion).ReqPlanId);

        return ganttClient;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdSupervisorScheduledOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new Gantt client object based on a <c>ProdSupervisorScheduledOrders</c> data source.
    /// </summary>
    /// <param name = "_scheduledOrder">The current record.</param>
    /// <param name = "_formDataSource">The data source to get the orders from.</param>
    /// <returns>A new instance of the gantt client.</returns>
    public static GanttClient_WrkCtr newProdSupervisorScheduledOrder(ProdSupervisorScheduledOrders  _scheduledOrder,
                                                                     FormDataSource                 _formDataSource)
    {
        GanttClient_WrkCtr ganttClient = GanttClient_WrkCtr::construct();
        ganttClient.parmGanttCaller(GanttCallerWrkCtr::Prod);

        ganttClient.getLast();

        ganttClient.addLoadIdsFromDS(_scheduledOrder,
                                     _formDataSource,
                                     fieldnum(ProdSupervisorScheduledOrders, ProdId),
                                     fieldnum(ProdSupervisorScheduledOrders, SchedStart),
                                     fieldnum(ProdSupervisorScheduledOrders, SchedEnd));

        return ganttClient;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJmgProdJobListView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new Gantt client object based on a <c>JmgProdJobListView</c> data source.
    /// </summary>
    /// <param name = "_job">The current record.</param>
    /// <param name = "_formDataSource">The data source to get the orders from.</param>
    /// <returns>A new instance of the gantt client.</returns>
    public static GanttClient_WrkCtr newJmgProdJobListView(JmgProdJobListView  _job,
                                                           FormDataSource      _formDataSource)
    {
        GanttClient_WrkCtr ganttClient = GanttClient_WrkCtr::construct();
        ganttClient.parmGanttCaller(GanttCallerWrkCtr::Prod);

        ganttClient.getLast();

        ganttClient.addLoadIdsFromDS(_job,
                                     _formDataSource,
                                     fieldnum(JmgProdJobListView, ModuleRefId),
                                     fieldnum(JmgProdJobListView, FromDate),
                                     fieldnum(JmgProdJobListView, ToDate));

        return ganttClient;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProduction</Name>
				<Source><![CDATA[
    public static GanttClient_WrkCtr newProduction(ProdTable        _prodTable,
                                                   FormDataSource   _formDataSource)
    {
        GanttClient_WrkCtr ganttClient = GanttClient_WrkCtr::construct();
        ganttClient.parmGanttCaller(GanttCallerWrkCtr::Prod);

        ganttClient.getLast();

        ganttClient.addLoadIdsFromDS(_prodTable,
                                     _formDataSource,
                                     fieldnum(ProdTable, ProdId),
                                     fieldnum(ProdTable, SchedStart),
                                     fieldnum(ProdTable, SchedEnd));

        return ganttClient;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProject</Name>
				<Source><![CDATA[
    public static GanttClient_WrkCtr newProject(ProjTable       _projTable,
                                                FormDataSource  _formDataSource)
    {
        GanttClient_WrkCtr ganttClient = GanttClient_WrkCtr::construct();
        ganttClient.parmGanttCaller(GanttCallerWrkCtr::Proj);

        ganttClient.getLast();

        ganttClient.addLoadIdsFromDS(_projTable,
                                     _formDataSource,
                                     fieldnum(ProjTable, ProjId),
                                     fieldnum(ProjTable, StartDate),
                                     fieldnum(ProjTable, EndDate));

        return ganttClient;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newResourceGroupResource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs a Gantt chart that uses a resource to resource group membership record as the starting
    ///    point.
    /// </summary>
    /// <param name="_resourceGroupResource">
    ///    A <c>WrkCtrResourceGroupResource</c> record that contains the resource to load in the Gantt chart.
    /// </param>
    /// <param name="_formDataSource">
    ///    A <c>FormDataSource</c> object that is used as a source to load multiple resources in the Gantt
    ///    chart.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>GanttClient_WrkCtr</c> class.
    /// </returns>
    public static GanttClient_WrkCtr newResourceGroupResource(WrkCtrResourceGroupResource   _resourceGroupResource,
                                                              FormDataSource                _formDataSource)
    {
        GanttClient_WrkCtr ganttClient = GanttClient_WrkCtr::construct();

        ganttClient.parmGanttCaller(GanttCallerWrkCtr::WrkCtr);
        ganttClient.getLast();
        ganttClient.addLoadIdsFromResourceGroupResource(_resourceGroupResource, _formDataSource);

        return ganttClient;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWrkCtr</Name>
				<Source><![CDATA[
    public static GanttClient_WrkCtr newWrkCtr()
    {
        GanttClient_WrkCtr ganttClient = GanttClient_WrkCtr::construct();

        ganttClient.parmGanttCaller(GanttCallerWrkCtr::WrkCtr);

        ganttClient.getLast();

        return ganttClient;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>