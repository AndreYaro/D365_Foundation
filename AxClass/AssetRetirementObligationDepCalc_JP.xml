<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetRetirementObligationDepCalc_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// It is used to do depreciation calculation for a retirement obligation document of asset.
/// </summary>
[AssetDocumentTypeAttribute_JP(AssetDocumentType_JP::AssetRetirementObligation)]
class AssetRetirementObligationDepCalc_JP extends AssetDocumentDepCalculation_JP
{
    AssetRetirementObligation_JP    assetRetirementObligation_JP;

    AssetId                         assetId;
    AssetBookId                     assetBookId;
    AssetDocumentId_JP              assetDocumentId;

    AssetBudgetModelId              assetBudgetModelId;
    AssetTransDate                  runDate;

    AssetAmount                     normalDepAmountExcludeARO;
    AssetAmount                     amountToNormalDepreciation;
    AssetTransDate                  normalDepreciationDate;

    Map                             beginningBalanceOfAccumulatedAROCache;
    boolean                         isDepreciationDone;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcForNormalPeriod</Name>
				<Source><![CDATA[
public AssetAmount calcForNormalPeriod()
    {
        AssetAmount     ret = 0;

        AssetAmount     accumulatedAROBeforeCurPeriod   = this.getBeginningBalanceOfARODep(periodEndDate + 1);
        AssetAmount     baseAmountToDepreciate          = AssetDepTransMap_JP::calcAmountToDepreciate(assetDepBookMap_JP, periodEndDate, null, assetDocumentEntry_JP.RecId);

        if (amountToNormalDepreciation
            && periodEndDate == normalDepreciationDate
            && baseAmountToDepreciate > accumulatedAROBeforeCurPeriod)
            {
            ret = baseAmountToDepreciate * normalDepAmountExcludeARO / amountToNormalDepreciation - accumulatedAROBeforeCurPeriod;
            if (ret < 0)
            {
                ret = 0;
            }

            ret = assetDepBookMap_JP.roundOffDepreciation(ret);

            this.updateBeginningBalanceOfAccARODep(periodEndDate + 1, ret);
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getAssetDocumentType</Name>
				<Source><![CDATA[
        public AssetDocumentType_JP getAssetDocumentType()
    {
        return AssetDocumentType_JP::AssetRetirementObligation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDepDate</Name>
				<Source><![CDATA[
public AssetTransDate getDepDate()
    {
        return periodEndDate;
    }
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
public void init()
    {
        assetRetirementObligation_JP = AssetRetirementObligation_JP::findByDocumentEntry(assetDocumentEntry_JP.RecId);
        Debug::assert(assetRetirementObligation_JP.RecId);

        super();

        accumulatedDepAmount    = AssetDepTransMap_JP::calcAccumulatedDepAmountMst(assetDepBookMap_JP, dateNull(), dateMax(), assetDocumentEntry_JP.RecId);
        amountToDepreciate      = AssetDepTransMap_JP::calcAmountToDepreciate(assetDepBookMap_JP, dateMax(), null, assetDocumentEntry_JP.RecId);

        beginningBalanceOfAccumulatedAROCache = new Map(Types::Date, Types::Real);
    }
]]></Source>
			</Method>
			<Method>
				<Name>initEndDayOfServiceLife</Name>
				<Source><![CDATA[
        protected void initEndDayOfServiceLife()
    {
        if (endDayOfServiceLife == dateNull())
        {
            endDayOfServiceLife = assetRetirementObligation_JP.getEndDayOfAROServiceLife();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
public boolean next(AssetTransDate _upperDate = dateMax())
    {
        boolean             ret = true;
        AssetTransDate      oldPeriodStart  = periodStartDate;
        AssetTransDate      oldPeriodEnd    = periodEndDate;

        // Stop the calculation when all amount has been depreciated.
        ret = (amountToDepreciate > accumulatedDepAmount);

        if (ret)
        {
            this.moveToNextPeriod();

            // For the last period in service life, it can be partial period.
            if (periodEndDate > _upperDate)
            {
                // Extended the upper date, go back to old period
                periodStartDate = oldPeriodStart;
                periodEndDate   = oldPeriodEnd;

                ret = false;
            }
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmAssetBudgetModelId</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public AssetBudgetModelId parmAssetBudgetModelId(AssetBudgetModelId _assetBudgetModelId = assetBudgetModelId)
    {
        assetBudgetModelId = _assetBudgetModelId;
        return assetBudgetModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNormalDepAmountExcludeARO</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public AssetAmount parmNormalDepAmountExcludeARO(AssetAmount _normalDepAmountExcludeARO = normalDepAmountExcludeARO)
    {
        normalDepAmountExcludeARO = _normalDepAmountExcludeARO;
        return normalDepAmountExcludeARO;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRunDate</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public AssetTransDate parmRunDate(AssetTransDate _runDate = runDate)
    {
        runDate = _runDate;
        return runDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBeginningBalanceOfAccumulatedARO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the beginning balance of accumulated depreciation amount for specified date.
    /// </summary>
    /// <param name="_date">
    /// The date.
    /// </param>
    /// <returns>
    /// The beginning balance of accumulated depreciation amount for specified date.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected AssetAmount calcBeginningBalanceOfAccumulatedARO(AssetTransDate _date)
    {
        AssetAmount         ret;

        ret = AssetDepTransMap_JP::calcBeginningBalOfAccumulatedDepAmtMst(
            assetDepBookMap_JP,
            assetTableInterval,
            _date,
            assetDocumentEntry_JP.RecId);

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>calcForEndPeriod</Name>
				<Source><![CDATA[
    public AssetAmount calcForEndPeriod()
    {
        AssetAmount ret;

        if (periodEndDate == normalDepreciationDate)
        {
            ret = super();
        }
        else
        {
            ret = 0;
        }
        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getBeginningBalanceOfARODep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the beginning balance of accumulated depreciation amount for specified date.
    /// </summary>
    /// <param name="_date">
    /// The date.
    /// </param>
    /// <returns>
    /// The beginning balance of accumulated depreciation amount for specified date.
    /// </returns>
    /// <remarks>
    /// It will use cache to improve performance. And the cache is also used to avoid
    /// accessing database for recatpure function.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    final public AssetAmount getBeginningBalanceOfARODep(AssetTransDate _date)
    {
        AssetAmount         ret;
        AssetTransDate      prevPeriodStartDate;

        prevPeriodStartDate = assetTableInterval.startOfPeriod(_date - 1);
        if (periodStartDate < _date)
        {
            prevPeriodStartDate = max(prevPeriodStartDate, periodStartDate);
        }

        if (beginningBalanceOfAccumulatedAROCache.exists(_date))
        {
            ret = beginningBalanceOfAccumulatedAROCache.lookup(_date);
        }
        else if (beginningBalanceOfAccumulatedAROCache.exists(prevPeriodStartDate))
        {
            // Add this logic to fix the cache continuity when period frequecy changes
            // between Yearly and Fiscal period during depreciaiton profile change
            ret = beginningBalanceOfAccumulatedAROCache.lookup(prevPeriodStartDate)
                + this.calcBeginningBalanceOfAccumulatedARO(_date)
                - this.calcBeginningBalanceOfAccumulatedARO(prevPeriodStartDate);
            beginningBalanceOfAccumulatedAROCache.insert(_date, ret);
        }
        else
        {
            ret = this.calcBeginningBalanceOfAccumulatedARO(_date);
            beginningBalanceOfAccumulatedAROCache.insert(_date, ret);
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>isTheEndPeriodOfServiceLife</Name>
				<Source><![CDATA[
    public boolean isTheEndPeriodOfServiceLife()
    {
        boolean ret;

        ret = isDepreciationDone;

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmAmountToNormalDeprecition</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public real parmAmountToNormalDeprecition(AssetAmount _amountToNormalDepreciation = amountToNormalDepreciation)
    {
        amountToNormalDepreciation = _amountToNormalDepreciation;
        return amountToNormalDepreciation;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmIsDepreciationDone</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmIsDepreciationDone(boolean _isDepreciationDone = isDepreciationDone)
    {
        isDepreciationDone = _isDepreciationDone;
        return isDepreciationDone;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmNormalDepreciationDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AssetTransDate parmNormalDepreciationDate(AssetTransDate _normalDepreciationDate = normalDepreciationDate)
    {
        normalDepreciationDate = _normalDepreciationDate;
        return normalDepreciationDate;
    }
]]></Source>
			</Method>
			<Method>
				<Name>updateBeginningBalanceOfAccARODep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the cache for beginning balance of accumulated depreciation amount for the new calculated depreciation amount.
    /// </summary>
    /// <param name="_periodStartDate">
    /// The start date of next period.
    /// </param>
    /// <param name="_periodDepAmount">
    /// The new calculated depreciation amount for current period.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    final protected void updateBeginningBalanceOfAccARODep(AssetTransDate _periodStartDate, AssetAmount _periodDepAmount)
    {
        AssetAmount                 newBeginningBalance  = this.getBeginningBalanceOfARODep(_periodStartDate) + _periodDepAmount;
        AssetTransDate              nextPeriodStartDate;

        nextPeriodStartDate = assetTableInterval.endPeriod(_periodStartDate) + 1;

        beginningBalanceOfAccumulatedAROCache.insert(
            _periodStartDate,
            newBeginningBalance);

        beginningBalanceOfAccumulatedAROCache.insert(
            nextPeriodStartDate,
            newBeginningBalance + this.calcBeginningBalanceOfAccumulatedARO(nextPeriodStartDate) - this.calcBeginningBalanceOfAccumulatedARO(_periodStartDate));
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>