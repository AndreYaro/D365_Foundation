<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSPalletCreateForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSPalletCreateForm</c> class contains the business logic of the <c>WHSPalletCreate</c> form.
/// </summary>
public class WHSPalletCreateForm
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setShipmentId</Name>
				<Source><![CDATA[
	/// <summary>
	/// Sets shipment id to form control.
	/// </summary>
	/// <param name="_whsLoadTable">
	/// Load that has shipment.
	/// </param>
	/// <param name="_ctrl">
	/// Form control.
	/// </param>
	/// <remarks>
	/// If there are multiple shipment ids in the same load, the form control is left empty.
	/// </remarks>
    void setShipmentId(WHSLoadTable         _whsLoadTable,
                       FormStringcontrol    _ctrl)
    {
        WHSLoadLine     loadLine;
        int             counter;
        WHSShipmentId   shipmentId;

        while select ShipmentId from loadLine
            group by loadLine.ShipmentId
            where loadLine.LoadId        == _whsLoadTable.LoadId &&
                  loadLine.ShipmentId    != ''
        {
            shipmentId = loadLine.ShipmentId;
            ++counter;
        }

        if (counter == 1)
        {
            _ctrl.text(shipmentId);
            _ctrl.allowEdit(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeWHSUOMStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the record of <c>WHSUOMStructure</c> to the database.
    /// </summary>
    /// <param name="_whsUOMStructure">
    ///    The record of <c>WHSUOMStructure</c> to write.
    /// </param>
    /// <param name="_shipmentId">
    ///    The shipment ID.
    /// </param>
    /// <param name="_licensePlate">
    ///    The licence plate ID.
    /// </param>
    /// <param name="_hasPacks">
    ///    The Boolean value that indicates whether packing structure has packs.
    /// </param>
    /// <param name="_loadTable">
    ///    The record of <c>WHSLoatTable</c>.
    /// </param>
    /// <returns>
    ///     true if the specified record has been saved; otherwise, false.
    /// </returns>
    public boolean writeWHSUOMStructure(WHSUOMStructure   _whsUOMStructure,
                                        WHSShipmentId     _shipmentId,
                                        WHSLicensePlateId _licensePlate,
                                        NoYes             _hasPacks,
                                        WHSLoadTable      _loadTable)
    {
        boolean ret = false;

        ttsbegin;

        WHSLicensePlate licensePlate = WHSLicensePlate::createLicensePlate(_licensePlate);

        _whsUOMStructure.clear();
        _whsUOMStructure.ShipmentId     = _shipmentId;
        _whsUOMStructure.LicensePlateId = licensePlate.LicensePlateId;
        _whsUOMStructure.HasPacks       = _hasPacks;
        _whsUOMStructure.LoadId         = _loadTable.LoadId;
        _whsUOMStructure.Module         = WHSShipmentTable::module(_shipmentId);

        if (!_whsUOMStructure.validateWrite())
        {
            throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(WHSUOMStructure)));
        }
        else
        {
            _whsUOMStructure.insert();
            ret = true;
        }

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>