<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankCurrencyRevalContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankCurrencyRevalContract</c> class holds the data contract values for the bank - foreign currency revaluation process.
/// </summary>
[DataContractAttribute]
[SysOperationAlwaysInitializeAttribute]
public final class BankCurrencyRevalContract extends SysOperationAttributedDataContractInfo implements SysOperationValidatable, SysOperationInitializable
{
    private TransDate transDate;
    private TransDate exchangeRateDate;
    private List selectedBankAccounts;
    private boolean previewBeforePost;
    private BankCurrencyRevalRunMode runMode;
    private TableName bankCurrencyRevalTmpTableName;
    private IFormRefreshable refreshableForm;
    private boolean needsToBeSplitIntoTasks;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    [DataMember]
    internal TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRateDate</Name>
				<Source><![CDATA[
    [DataMember]
    internal TransDate parmExchangeRateDate(TransDate _exchangeRateDate = exchangeRateDate)
    {
        exchangeRateDate = _exchangeRateDate;

        return exchangeRateDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedBankAccounts</Name>
				<Source><![CDATA[
    [
        DataMember,
        AifCollectionTypeAttribute('_selectedBankAccounts', Types::Int64),
        AifCollectionTypeAttribute('return', Types::Int64)
    ]
    internal List parmSelectedBankAccounts(List _selectedBankAccounts = selectedBankAccounts)
    {
        selectedBankAccounts = _selectedBankAccounts;

        return selectedBankAccounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRunMode</Name>
				<Source><![CDATA[
    [DataMember]
    internal BankCurrencyRevalRunMode parmRunMode(BankCurrencyRevalRunMode _runMode = runMode)
    {
        runMode = _runMode;
        return runMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankCurrencyRevalTmpTableName</Name>
				<Source><![CDATA[
    [DataMember]
    internal TableName parmBankCurrencyRevalTmpTableName(TableName _bankCurrencyRevalTmpTableName = bankCurrencyRevalTmpTableName)
    {
        bankCurrencyRevalTmpTableName = _bankCurrencyRevalTmpTableName;
        return bankCurrencyRevalTmpTableName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPreviewBeforePost</Name>
				<Source><![CDATA[
    [DataMember]
    internal boolean parmPreviewBeforePost(boolean _preview = previewBeforePost)
    {
        previewBeforePost = _preview;
        return previewBeforePost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHistoryForm</Name>
				<Source><![CDATA[
    internal IFormRefreshable parmHistoryForm(IFormRefreshable _refreshableForm = refreshableForm)
    {
        refreshableForm = _refreshableForm;
        return refreshableForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNeedsToBeSplitIntoTasks</Name>
				<Source><![CDATA[
    [DataMember]
    internal boolean parmNeedsToBeSplitIntoTasks(boolean _needsToBeSplitIntoTasks = needsToBeSplitIntoTasks)
    {
        needsToBeSplitIntoTasks = _needsToBeSplitIntoTasks;
        return needsToBeSplitIntoTasks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        boolean ok = true;

        if (this.transDate == dateNull())
        {
            ok = checkFailed(strFmt("@SYS331078", "@CashManagement:BankCurrencyRevalRevaluationDate"));
        }

        if (this.exchangeRateDate == dateNull())
        {
            ok = checkFailed(strFmt("@SYS331078", "@CashManagement:BankCurrencyRevalDateOfRate"));
        }

        if (selectedBankAccounts == null || selectedBankAccounts.elements() == 0)
        {
            ok = checkFailed("@CashManagement:BankCurrencyRevalBankAccountRequired");
        }

        ListEnumerator selectedBankAccountsEnumerator = selectedBankAccounts.getEnumerator();

        while (selectedBankAccountsEnumerator.moveNext())
        {
            RecId selectedBankAccount = selectedBankAccountsEnumerator.current();

            if (BankAccountTable::findByRecId(selectedBankAccount).RecId == 0)
            {
                ok = checkFailed("@CashManagement:BankCurrencyRevalBankAccountDoesNotExist");
            }
        }

        ok = ok && this.validateDates();

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDates</Name>
				<Source><![CDATA[
    private boolean validateDates()
    {
        boolean ok = true;
        Set validatedCompanies = new Set(Types::String);

        ListEnumerator selectedBankAccountsEnumerator = selectedBankAccounts.getEnumerator();

        while (selectedBankAccountsEnumerator.moveNext())
        {
            RecId selectedBankAccount = selectedBankAccountsEnumerator.current();
            BankAccountTable bankAccountTableLocal = BankAccountTable::findByRecId(selectedBankAccount);
            DataAreaId currentDataAreaId = bankAccountTableLocal.DataAreaId;

            if (!BankCurrencyRevalHistory::checkIsEligibleForRevaluation(currentDataAreaId, bankAccountTableLocal.AccountID, transDate))
            {
                ok = checkFailed(strFmt("@CashManagement:BankCurrencyRevalProcessedOnFutureDate", bankAccountTableLocal.AccountID, currentDataAreaId));
            }

            if (!validatedCompanies.in(currentDataAreaId))
            {
                changecompany(currentDataAreaId)
                {
                    RecId calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

                    // Validate dates fall in a currently open fiscal period.
                    if (!LedgerFiscalCalendar::checkDateIsValid(calendarRecId, transDate, FiscalPeriodType::Operating, false))
                    {
                        ok = checkFailed(strFmt("@CashManagement:BankCurrencyRevalDateNotInOpenFiscalYear", "@CashManagement:BankCurrencyRevalRevaluationDate", curExt()));
                    }

                    validatedCompanies.add(currentDataAreaId);
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    public void initialize()
    {
        if (selectedBankAccounts == null)
        {
            selectedBankAccounts = new List(Types::Int64);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>