<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransFormPoExplosion</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ReqTransFormPoExplosion extends ReqTransFormPO
{
    ReqTransFormExplosion   reqTransFormExplosion;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteReqTransFormCache</Name>
				<Source><![CDATA[
    public void deleteReqTransFormCache(container _con) // Packed map with ReqTrans
    {
        reqTransFormExplosion.updateReqTransFormCache(_con);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCaller</Name>
				<Source><![CDATA[
    public void initFromCaller()
    {
        super();

        reqTransFormExplosion = formRun.args().caller().reqTransForm();

        // skip for single planned order view e.g. jumpref event 
        if (formRun.args().lookupRecord())
        {
            return;
        }

        ReqTransFilterTmp   reqTransFilterTmp = reqTransFilterTempdb_ds.cursor();
        MapEnumerator       enumerator = reqTransFormExplosion.mapReqTrans().getEnumerator();
        RecordInsertList    reqTransFilterInsertList = new RecordInsertList(tablenum(ReqTransFilterTmp), true, true, true, true, true, reqTransFilterTmp);
        Set                 reqTransRecIds = new Set(Types::Int64);
        boolean             reqTransPoPmfCoProductToggleEnabled = ReqTransPoPmfCoProductToggle::instance().isEnabled();

        while (enumerator.moveNext())
        {
            ReqTrans reqTransTmp = enumerator.currentValue();
            boolean isPlannedOrder = reqTransTmp.isPlannedOrder();
            
            if (isPlannedOrder || (reqTransPoPmfCoProductToggleEnabled && reqTransTmp.RefType == ReqRefType::PmfCoProduct))
            {
                RecId reqTransRecId;

                if (isPlannedOrder)
                {
                    reqTransRecId = reqTransTmp.RecId;
                }
                else
                {
                    reqTransRecId = reqTransTmp.reqPo().reqTrans().RecId;
                }

                if (!reqTransRecIds.in(reqTransRecId))
                {                    
                    reqTransFilterTmp.clear();
                    reqTransFilterTmp.ReqTransRecId = reqTransRecId;
                    reqTransFilterInsertList.add(reqTransFilterTmp);
                    reqTransRecIds.add(reqTransRecId);
                }                
            }
        }

        reqTransFilterInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    public identifierName lastValueDesignName()
    {
        return formstr(ReqTransExplosion);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPoDSExecuteQueryPre</Name>
				<Source><![CDATA[
    public void reqPoDSExecuteQueryPre()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPoDSLinkActivePre</Name>
				<Source><![CDATA[
    public void reqPoDSLinkActivePre()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReqTransFormCache</Name>
				<Source><![CDATA[
    public void updateReqTransFormCache(container _con)
    {
        super(_con);

        reqTransFormExplosion.updateReqTransFormCache(_con);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqReqTransFilterDSInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method initializes tempdb form datasource used for matching explosion subset of planned orders 
    /// for other usages the datasource is disabled
    /// </summary>
    /// <param name = "_reqTransFilterTmp">A tempdb form datasource</param>
    /// <returns>
    /// A QueryBuildDataSource object
    /// </returns>
    public QueryBuildDataSource reqReqTransFilterDSInitPost(ReqTransFilterTmp _reqTransFilterTmp)
    {
        QueryBuildDataSource qbdsReqTransFilter_ds = super(_reqTransFilterTmp);

        if (qbdsReqTransFilter_ds.enabled())
        {
            qbdsReqTransFilter_ds.relations(true);
            qbdsReqTransFilter_ds.joinMode(JoinMode::ExistsJoin);
        }
        return qbdsReqTransFilter_ds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableReqTransFilterDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables reqTransFilter tempdb datasource
    /// </summary>
    /// <returns>
    /// Enables the datasource for explosion subset matching; disable for single planned order
    /// </returns>
    protected boolean enableReqTransFilterDataSource()
    {
        return formRun.args().lookupRecord() ? false : true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>