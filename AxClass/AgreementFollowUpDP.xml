<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AgreementFollowUpDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AgreementFollowUpDP</c> class is the report data provider class for the purchase and sales
/// agreement follow up SQL ServerReporting Services reports.
/// </summary>
[
    SRSReportParameterAttribute(classStr(AgreementFollowUpRDPContract)),
    SRSReportQueryAttribute(queryStr(AgreementFollowUp))
]
class AgreementFollowUpDP extends SrsReportDataProviderPreProcessTempDB
{
    AgreementFollowUpTmp        agreementFollowUpTmp;

    ModuleSalesPurch            moduleSalesPurch;

    InventDimFixed              inventDimToShow;
    container                   inventDimFields;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAgreementFollowUpTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the <c>AgreementFollowUpTmp</c> temporary table with the data and retrieves it.
    /// </summary>
    /// <returns>
    /// The <c>AgreementLineTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(AgreementFollowUpTmp))
    ]
    public AgreementFollowUpTmp getAgreementFollowUpTmp()
    {
        select * from agreementFollowUpTmp;
        return agreementFollowUpTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the container of the inventory dimension field IDs to print on the report.
    /// </summary>
    /// <returns>
    /// The container that contains the field IDs.
    /// </returns>
    protected container getInventDimFieldList()
    {
        container       con;
        fieldId         fieldId;
        List            inventDimFieldList = InventDim::dimAgreementFieldList();
        ListEnumerator  fieldListEnumerator = inventDimFieldList.getEnumerator();
        InventDimParm   inventDimParm;

        InventDimFixedClass::inventDimFixed2InventDimParm(inventDimToShow, inventDimParm);

        while (fieldListEnumerator.moveNext())
        {
            fieldId = fieldListEnumerator.current();
            if (inventDimParm.(InventDim::dim2dimParm(fieldId)))
            {
                con += fieldId;
            }
        }

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the <c>AgreementFollowUpTmp</c> table.
    /// </summary>
    protected void insertIntoTmpTable()
    {
        QueryRun                        queryRun;
        Query                           query = this.parmQuery();
        QueryBuildDataSource            qbds;

        if (moduleSalesPurch == ModuleSalesPurch::Sales)
        {
            qbds = query.dataSourceTable(tableNum(PurchAgreementHeader));
        }
        else
        {
            qbds = query.dataSourceTable(tableNum(SalesAgreementHeader));
        }
        qbds.enabled(false);

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            this.inizializeAgreementFollowUpTmp(queryRun);

            agreementFollowUpTmp.clear();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inizializeAgreementFollowUpTmp</Name>
				<Source><![CDATA[
    protected void inizializeAgreementFollowUpTmp(QueryRun _queryRun)
    {
        SalesAgreementHeader            salesAgreementHeader;
        PurchAgreementHeader            purchAgreementHeader;
        AgreementClassification         agreementClassification;
        AgreementLine                   agreementLine;
        AgreementLineQuantityCommitment agreementLineQuantityCommitment;
        AgreementLineVolumeCommitment   agreementLineVolumeCommitment;
        InventDim                       inventDim;
        AgreementHeader                 agreementHeader;
        EcoResCategory                  ecoResCategory;
        InventTable                     inventTable;
        container                       remains;
        boolean                         pdsCWEnabled = #PdsCatchWeightEnabled;

        #AgreementsRemains

        agreementLine = _queryRun.get(tablenum(AgreementLine));

        if (agreementLine.AgreementLineType == CommitmentType::ProductQuantity
            || agreementLine.AgreementLineType == CommitmentType::ProductVolume)
        {
            inventTable = _queryRun.get(tablenum(InventTable));
            if (inventTable.ItemId)
            {
                agreementFollowUpTmp.ItemId = agreementLine.ItemId;
                agreementFollowUpTmp.ItemName = InventTable::name(agreementLine.ItemId, inventDim);
            }
            else
            {
                //InventTable was filtered out so we should skip the line
                return;
            }
        }
        else
        {
            ecoResCategory = _queryRun.get(tablenum(EcoResCategory));
            if (ecoResCategory.Name)
            {
                agreementFollowUpTmp.Category         = ecoResCategory.Name;
            }
            else
            {
                //category was filtered out so we should skip the line
                return;
            }
        }

        agreementHeader = _queryRun.get(tablenum(AgreementHeader));
        agreementClassification = _queryRun.get(tablenum(AgreementClassification));

        agreementFollowUpTmp.Currency = agreementHeader.Currency;
        agreementFollowUpTmp.DocumentTitle = agreementHeader.DocumentTitle;
        agreementFollowUpTmp.AgreementClassificationName = agreementClassification.Name;

        if (moduleSalesPurch == ModuleSalesPurch::Sales)
        {
            salesAgreementHeader = _queryRun.get(tablenum(SalesAgreementHeader));
            agreementFollowUpTmp.AgreementId = salesAgreementHeader.SalesNumberSequence;
            agreementFollowUpTmp.CustVendName = strfmt("%1 - %2", salesAgreementHeader.CustAccount, salesAgreementHeader.custName());
        }
        else
        {
            purchAgreementHeader = _queryRun.get(tablenum(PurchAgreementHeader));
            agreementFollowUpTmp.AgreementId = purchAgreementHeader.PurchNumberSequence;
            agreementFollowUpTmp.CustVendName = strfmt("%1 - %2", purchAgreementHeader.VendAccount, purchAgreementHeader.vendName());
        }

        agreementFollowUpTmp.LineNumber = agreementLine.LineNumber;
        agreementFollowUpTmp.AgreementLineType = agreementLine.AgreementLineType;
        agreementFollowUpTmp.EffectiveDate = agreementLine.EffectiveDate;
        agreementFollowUpTmp.ExpirationDate = agreementLine.ExpirationDate;

        if (inventDimToShow)
        {
            inventDim = _queryRun.get(tablenum(InventDim));

            agreementFollowUpTmp.InventDim = InventDim::dimReportStrAll(inventDim, inventDimFields, infolog.language());
        }

        if (agreementLine is AgreementLineQuantityCommitment)
        {
            agreementLineQuantityCommitment = _queryRun.get(tablenum(AgreementLineQuantityCommitment));

            agreementFollowUpTmp.CommitedQuantity = agreementLineQuantityCommitment.CommitedQuantity;
            agreementFollowUpTmp.ProductUnitOfMeasure = agreementLineQuantityCommitment.ProductUnitOfMeasure;
            remains = agreementLineQuantityCommitment.calculateAgreementRemansOnServer();

            if (pdsCWEnabled && agreementLineQuantityCommitment.PdsCWCommitedQuantity)
            {
                agreementFollowUpTmp.pdsCWUnit            = PdsCatchWeight::cwUnitId(agreementLineQuantityCommitment.ItemId);
                agreementFollowUpTmp.PdsCWCommitedQuantity  = agreementLineQuantityCommitment.PdsCWCommitedQuantity;
                agreementFollowUpTmp.PdsCWRemainingQty      = conpeek(remains, #PdsCWRemainingIndex);
                agreementFollowUpTmp.PdsCWInvoicedQty       = conpeek(remains, #PdsCWInvoicedIndex);
                agreementFollowUpTmp.PdsCWReceivedQty       = conpeek(remains, #PdsCWReceivedNotInvoicedIndex);
                agreementFollowUpTmp.PdsCWOrderedQty        = conpeek(remains, #PdsCWReleasedNotInvoicedNorReceivedIndex);
            }
        }
        else
        {
            agreementLineVolumeCommitment = _queryRun.get(tablenum(AgreementLineVolumeCommitment));

            agreementFollowUpTmp.CommitedAmount = agreementLineVolumeCommitment.CommitedAmount;
            remains = agreementLineVolumeCommitment.calculateAgreementRemansOnServer();
        }

        agreementFollowUpTmp.RemainingQtyAmount = conpeek(remains, #RemainingIndex);
        agreementFollowUpTmp.InvoicedQtyAmount  = conpeek(remains, #InvoicedIndex);
        agreementFollowUpTmp.ReceivedQtyAmount  = conpeek(remains, #ReceivedNotInvoicedIndex);
        agreementFollowUpTmp.OrderedQtyAmount   = conpeek(remains, #ReleasedNotInvoicedNorReceivedIndex);

        this.setSortingNumber();

        agreementFollowUpTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parses the report parameters and inserts data into the temporary table.
    /// </summary>
    public void processReport()
    {
        AgreementFollowUpRDPContract contract = this.parmDataContract();

        super();

        moduleSalesPurch = contract.parmModuleSalesPurch();
        inventDimToShow  = contract.parmInventoryDimensions();

        if (inventDimToShow)
        {
            inventDimFields = this.getInventDimFieldList();
        }

        this.insertIntoTmpTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSortingNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of the <c>LineTypeSortingNumber</c> field in the <c>AgreementFollowUpTmp</c> table.
    /// </summary>
    /// <remarks>
    /// The line type groups will be sorted by the value of the <c>LineTypeSortingNumber</c> field on the
    /// report.
    /// </remarks>
    protected void setSortingNumber()
    {
        switch (agreementFollowUpTmp.AgreementLineType)
        {
            case CommitmentType::ProductQuantity:
                agreementFollowUpTmp.LineTypeSortingNumber = 1;
                break;
            case CommitmentType::ProductCategory:
                agreementFollowUpTmp.LineTypeSortingNumber = 2;
                break;
            case CommitmentType::ProductVolume:
                agreementFollowUpTmp.LineTypeSortingNumber = 3;
                break;
            case CommitmentType::ProductRootCategory:
                agreementFollowUpTmp.LineTypeSortingNumber = 4;
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>