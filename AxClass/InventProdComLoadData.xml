<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventProdComLoadData</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This dialog is responsible for importing data into <c>IntrastatToProdCom</c> table via DMF.
/// </summary>
class InventProdComLoadData extends RunBase
{
    private const str FeatureReference = 'BE-00020';

    private DialogRunbase                               prodComDialog;

    private DialogField                                 dialogDefinitionGroupName;
    private DMFDefinitionGroupName                      definitionGroupName;

    private Filename                                    filename;
    private System.IO.Stream                            fileStream;

    private SharedServiceUnitFileID                     fileID;

    private const str OkButtonName = 'OkButton';
    private const str FileUploadName = 'FileUpload';

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        filename,
        definitionGroupName
    #endmacro
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static InventProdComLoadData construct()
    {
        return new InventProdComLoadData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        InventProdComLoadData inventProdComLoadData = InventProdComLoadData::construct();

        if (inventProdComLoadData.prompt())
        {
            inventProdComLoadData.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        prodComDialog = new DialogRunbase("@SYS92099", this);

        dialogDefinitionGroupName = prodComDialog.addFieldValue(extendedTypeStr(DMFDefinitionGroupName), definitionGroupName);
        dialogDefinitionGroupName.registerOverrideMethod(
            methodStr(FormStringControl, lookup),
            methodStr(InventProdcomLoadData, lookUpDefinitionGroup),
            this);

        var dialogGroup = prodComDialog.addGroup();
        FormBuildControl formBuildControl = prodComDialog.formBuildDesign().control(dialogGroup.name());

        FileUploadBuild  dialogFileUpload = formBuildControl.addControlEx(classstr(FileUpload), FileUploadName);
        dialogFileUpload.style(FileUploadStyle::MinimalWithFilename);
        dialogFileUpload.baseFileUploadStrategyClassName(classstr(FileUploadTemporaryStorageStrategy));
        dialogFileUpload.fileNameLabel("@SYS308842");

        return prodComDialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        definitionGroupName = dialogDefinitionGroupName.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);
        FileUpload fileUpload = this.getFormControl(_dialog, FileUploadName);
        fileUpload.notifyUploadCompleted += eventhandler(this.uploadCompleted);
        this.setDialogOkButtonEnabled(_dialog, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        FileUpload fileUploadControl = this.getFormControl(prodComDialog, FileUploadName);
        FileUploadTemporaryStorageResult fileUploadResult = fileUploadControl.getFileUploadResult();

        if (fileUploadResult != null && fileUploadResult.getUploadStatus())
        {
            fileID = fileUploadResult.getFileId();
        }

        DataFileImportExportUtils_W::importDataFromFileToAX(fileID, definitionGroupName, tableStr(IntrastatToProdComEntity));
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conPeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, filename, definitionGroupName] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super();

        if (!filename)
        {
            ret = checkFailed("@SYS18624");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// After the file has been uploaded, the Ok button is enabled.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void uploadCompleted()
    {
        FileUpload fileUpload = this.getFormControl(prodComDialog, FileUploadName);
        fileUpload.notifyUploadCompleted -= eventhandler(this.UploadCompleted);

        filename = fileUpload.fileName();

        this.setDialogOkButtonEnabled(prodComDialog, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets form control by its name.
    /// </summary>
    /// <param name = "_dialog">The dialog.</param>
    /// <param name = "_controlName">Control name on the dialog.</param>
    /// <returns><c>FormControl</c> object on the dialog.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected FormControl getFormControl(DialogRunbase _dialog, str _controlName)
    {
        return _dialog.formRun().control(_dialog.formRun().controlId( _controlName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookUpDefinitionGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up the definition group name.
    /// </summary>
    /// <param name="_control">
    /// The look up control.
    /// </param>
    private void lookUpDefinitionGroup(FormStringControl _control)
    {
        DataFileImportExportUtils_W::lookUpDefinitionGroup(_control, tableStr(IntrastatToProdComEntity));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDialogOkButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the dialog Ok button.
    /// </summary>
    /// <param name = "_dialog">The <c>Runbase</c> dialog object.</param>
    /// <param name = "_isEnabled">Indicates to enable or disable the Ok button.</param>
    private void setDialogOkButtonEnabled(DialogRunbase _dialog, boolean _isEnabled)
    {
        FormControl okButtonControl = this.getFormControl(_dialog, OkButtonName);

        if (okButtonControl)
        {
            okButtonControl.enabled(_isEnabled);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>