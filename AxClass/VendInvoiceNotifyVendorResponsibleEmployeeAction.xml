<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceNotifyVendorResponsibleEmployeeAction</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

[DataContract]
[SysCopilotChatGlobalAction]
[SysCopilotChatActionDefinition(
    identifierStr(MS.ServerForm.VendInvoiceCopilot.SendNotification),
    'Send notification to vendor responsible employee',
    'Send a notification to vendor responsible employee of the vendor invoice',
    'VendInvoiceNotifyVendorResponsibleEmployeeAction',
    MenuItemType::Action)]
public final class VendInvoiceNotifyVendorResponsibleEmployeeAction extends SysCopilotChatAction
{
    private const str metricNamespace = 'VendorInvoiceCopilot';
    private const str actionName = 'MS.ServerForm.VendInvoiceCopilot.SendNotification';
    private str vendAccount;
    private str notificationMessage;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmVendAccount</Name>
				<Source><![CDATA[
    [DataMember('vendAccount'),
    SysCopilotChatActionInputParameter('Vendor account of the vendor invoice', true)]
    public str parmVendAccount(str _vendAccount = vendAccount)
    {
        vendAccount = _vendAccount;
        return vendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNotificationMessage</Name>
				<Source><![CDATA[
    [DataMember('notificationMessage'),
    SysCopilotChatActionInputParameter('Notification message to be sent to the vendor responsible employee', true)]
    public str parmNotificationMessage(str _notificationMessage = notificationMessage)
    {
        notificationMessage = _notificationMessage;
        return notificationMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeAction</Name>
				<Source><![CDATA[
    public void executeAction(SysCopilotChatActionDefinitionAttribute _actionDefinition, object _context)
    {
        SysInstrumentationLogger logger = SysInstrumentationLoggerFactory::CreateLogger(classStr(VendInvoiceNotifyVendorResponsibleEmployeeAction));

        using (var context = logger.activityContext(actionName, metricNamespace))
        {
            if (VendInvoiceCopilotMatchProductReceiptFlight::instance().isEnabled())
            {
                VendTable vendTable;

                select MainContactWorker from vendTable
                   where vendTable.AccountNum == this.parmVendAccount();

                if (vendTable.MainContactWorker)
                {
                    SystemNotificationDataContract notification = new SystemNotificationDataContract();
                    notification.Users().value(1, DirPersonUserEx::worker2UserId(HcmWorker::find(vendTable.MainContactWorker).RecId));
                    notification.Title('@AccountsPayable:VendResponsibleWorkerNoticeTitle');
                    notification.RuleId(any2Str(newGuid()));
                    notification.Message(this.parmNotificationMessage());
                    notification.ExpirationDateTime(DateTimeUtil::addDays(DateTimeUtil::utcNow(), 7));

                    SystemNotificationsManager::AddSystemNotification(notification);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>