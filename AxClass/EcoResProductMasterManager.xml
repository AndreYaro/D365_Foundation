<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductMasterManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
class EcoResProductMasterManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createDistinctProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a distinct product.
    /// </summary>
    /// <param name="_productNumber">
    ///    A product number.
    /// </param>
    /// <param name="_productSearchName">
    ///    A product search name.
    /// </param>
    /// <param name="_productType">
    ///    A product type.
    /// </param>
    /// <param name="_storageDimensionGroupRecId">
    ///    A reference to product storage dimension group.
    /// </param>
    /// <param name="_trackingDimensionGroupRecId">
    ///    A reference to product tracking dimension group.
    /// </param>
    /// <returns>
    ///    The <c>EcoResProductRecId</c> reference to a create a distinct product.
    /// </returns>
    public EcoResProductRecId createDistinctProduct(
        EcoResProductNumber                         _productNumber,
        EcoResProductSearchName                     _productSearchName,
        EcoResProductType                           _productType,
        EcoResStorageDimensionGroupRecId            _storageDimensionGroupRecId,
        EcoResTrackingDimensionGroupRecId           _trackingDimensionGroupRecId)
    {
        EcoResDistinctProduct               ecoResDistinctProduct;

        ttsbegin;

        EcoResProductNumberBuilder ecoResProductNumberBuilder = EcoResProductNumberBuilder::newFromProductNumber(_productNumber);

        ecoResDistinctProduct.SearchName            = _productSearchName;
        ecoResDistinctProduct.DisplayProductNumber  = ecoResProductNumberBuilder.buildDisplayProductNumber();
        ecoResDistinctProduct.ProductType           = _productType;

        if (!ecoResDistinctProduct.validateWrite())
        {
            throw error(strFmt("@SYS19306", funcName()));
        }

        ecoResDistinctProduct.insert();

        this.createProductIdentifier(ecoResDistinctProduct.RecId, ecoResDistinctProduct.DisplayProductNumber);

        EcoResProductInventoryDimensionGroups::updateDimensionGroupsForProduct(
            ecoResDistinctProduct.RecId,
            0,
            _storageDimensionGroupRecId,
            _trackingDimensionGroupRecId);

        ttscommit;

        return ecoResDistinctProduct.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductIdentifier</Name>
				<Source><![CDATA[
    protected void createProductIdentifier(
        EcoResProductRecId  _product,
        EcoResProductNumber _productNumber)
    {
        EcoResProductIdentifier             ecoResProductIdentifier;

        ecoResProductIdentifier.Product         = _product;
        ecoResProductIdentifier.ProductNumber   = _productNumber;
        ecoResProductIdentifier.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductMaster</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a product master.
    /// </summary>
    /// <param name="_productNumber">
    ///    A product number.
    /// </param>
    /// <param name="_productSearchName">
    ///    A product search name.
    /// </param>
    /// <param name="_productType">
    ///    A product type.
    /// </param>
    /// <param name="_variantConfigurationTechnology">
    ///    A product master variant configuration technology type.
    /// </param>
    /// <param name="_productDimensionGroupRecId">
    ///    A reference to product dimension group.
    /// </param>
    /// <param name="_storageDimensionGroupRecId">
    ///    A reference to product storage dimension group.
    /// </param>
    /// <param name="_trackingDimensionGroupRecId">
    ///    A reference to product tracking dimension group.
    /// </param>
    /// <returns>
    ///    The <c>EcoResProductRecId</c> reference to a created product master.
    /// </returns>
    public EcoResProductRecId createProductMaster(
        EcoResProductNumber                         _productNumber,
        EcoResProductSearchName                     _productSearchName,
        EcoResProductType                           _productType,
        EcoResVariantConfigurationTechnologyType    _variantConfigurationTechnology,
        EcoResProductDimensionGroupRecId            _productDimensionGroupRecId,
        EcoResStorageDimensionGroupRecId            _storageDimensionGroupRecId,
        EcoResTrackingDimensionGroupRecId           _trackingDimensionGroupRecId)
    {
        EcoResProductMaster                     ecoResProductMaster;

        ttsbegin;

        EcoResProductNumberBuilder ecoResProductNumberBuilder = EcoResProductNumberBuilder::newFromProductNumber(_productNumber);

        ecoResProductMaster.SearchName                      = _productSearchName;
        ecoResProductMaster.DisplayProductNumber            = ecoResProductNumberBuilder.buildDisplayProductNumber();
        ecoResProductMaster.ProductType                     = _productType;
        ecoResProductMaster.VariantConfigurationTechnology  = _variantConfigurationTechnology;

        if (!ecoResProductMaster.validateWrite())
        {
            throw error(strFmt("@SYS19306", funcName()));
        }

        ecoResProductMaster.insert();

        this.createProductIdentifier(ecoResProductMaster.RecId, ecoResProductMaster.DisplayProductNumber);
        this.createProductMasterModelingPolicy(ecoResProductMaster);

        EcoResProductInventoryDimensionGroups::updateDimensionGroupsForProduct(
            ecoResProductMaster.RecId,
            _productDimensionGroupRecId,
            _storageDimensionGroupRecId,
            _trackingDimensionGroupRecId);

        ttscommit;

        return ecoResProductMaster.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductMasterModelingPolicy</Name>
				<Source><![CDATA[
    protected void createProductMasterModelingPolicy(EcoResProductMaster _ecoResProductMaster)
    {
        EcoResProductMasterModelingPolicy   ecoResProductMasterModelingPolicy;

        if (_ecoResProductMaster.isDimensionBased()
        ||  _ecoResProductMaster.isPredefinedVariants())
        {
            ecoResProductMasterModelingPolicy.ProductMaster = _ecoResProductMaster.RecId;
            ecoResProductMasterModelingPolicy.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNewProductDimensionValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a new dimension value to the product master.
    /// </summary>
    /// <param name="_productMaster">The ID of a record in the <c>EcoResProductMaster</c> table.</param>
    /// <param name="_productDimensionAttribute">The ID of a record in the <c>EcoResProductDimensionAttribute</c> table.</param>
    /// <param name="_productDimensionValue">The ID of a record in a dimension table.</param>
    /// <param name="_productDimensionValueName">The name of _productDimensionValue, to be placed in <c>EcoResProductMasterDimValueTranslation</c>.</param>
    /// <param name="_productDimensionValueDescription">The description of _productDimensionValue, to be placed in <c>EcoResProductMasterDimValueTranslation</c>.</param>
    public static void addNewProductDimensionValue(
        RefRecId            _productMaster,
        RefRecId            _productDimensionAttribute,
        Name                _productDimensionValue,
        Name                _productDimensionValueName,
        EcoResDescription   _productDimensionValueDescription)
    {
        if (!EcoResProductMaster::exist(_productMaster))
        {
            throw error("@SYS134979");
        }

        EcoResProductDimensionAttribute ecoResProductDimensionAttribute = EcoResProductDimensionAttribute::find(_productDimensionAttribute);

        TableId dimensionTableId = ecoResProductDimensionAttribute.getDimensionTableId();
        FieldId dimensionTableValueFieldId = ecoResProductDimensionAttribute.getDimensionTableValueFieldId();

        EcoResProductMasterManager::validateActiveDimension(_productMaster, dimensionTableId);

        Query query = EcoResProductMasterManager::createDimensionQuery(_productDimensionValue, dimensionTableId, dimensionTableValueFieldId);

        ttsbegin;

        EcoResProductMasterDimensionValue ecoResProductMasterDimensionValue = EcoResProductMasterManager::insertProductMasterDimensionValue(
            _productMaster,
            _productDimensionAttribute,
            _productDimensionValue,
            ecoResProductDimensionAttribute,
            dimensionTableId,
            dimensionTableValueFieldId,
            query);

        EcoResProductMasterManager::insertProductMasterDimValueTranslation(ecoResProductMasterDimensionValue, _productDimensionValueName, _productDimensionValueDescription);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProductDimensionValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a new dimension value to the product master.
    /// </summary>
    /// <param name="_productMaster">
    ///    The ID of a record in the <c>EcoResProductMaster</c> table.
    /// </param>
    /// <param name="_productDimensionAttribute">
    ///    The ID of a record in the <c>EcoResProductDimensionAttribute</c> table.
    /// </param>
    /// <param name="_productDimensionValue">
    ///    The ID of a record in a dimension table.
    /// </param>
    /// <param name="_productDimensionDescription">
    ///    The name of _productDimensionValue, to be placed in <c>EcoResProductMasterDimValueTranslation</c>.
    /// </param>
    /// <param name="_productDimensionAddDescription">
    ///    The description of _productDimensionValue, to be placed in <c>EcoResProductMasterDimValueTranslation</c>.
    /// </param>
    [SysObsolete('This method is deprecated. Please use the addNewProductDimensionValue() method instead.', false, 19\10\2021)]
    public static void addProductDimensionValue(
        RefRecId            _productMaster,
        RefRecId            _productDimensionAttribute,
        Name                _productDimensionValue,
        EcoResDescription   _productDimensionDescription,
        Name                _productDimensionAddDescription)
    {
        EcoResProductMasterDimValueTranslation  productMasterDimValueTranslation;
        SysDictTable                            sysDictTable;
        Common                                  dimensionTable;

        if (!EcoResProductMaster::exist(_productMaster))
        {
            throw error("@SYS134979");
        }

        EcoResProductDimensionAttribute ecoResProductDimensionAttribute = EcoResProductDimensionAttribute::find(_productDimensionAttribute);

        TableId dimensionTableId = ecoResProductDimensionAttribute.getDimensionTableId();
        FieldId dimensionTableValueFieldId = ecoResProductDimensionAttribute.getDimensionTableValueFieldId();

        EcoResProductMasterManager::validateActiveDimension(_productMaster, dimensionTableId);

        Query query = EcoResProductMasterManager::createDimensionQuery(_productDimensionValue, dimensionTableId, dimensionTableValueFieldId);

        ttsbegin;

        EcoResProductMasterDimensionValue ecoResProductMasterDimensionValue = EcoResProductMasterManager::insertProductMasterDimensionValue(
            _productMaster,
            _productDimensionAttribute,
            _productDimensionValue,
            ecoResProductDimensionAttribute, 
            dimensionTableId, 
            dimensionTableValueFieldId, 
            query);

        EcoResProductMasterManager::createProductMasterDimValueTranslation(ecoResProductMasterDimensionValue, _productDimensionDescription, _productDimensionAddDescription);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateActiveDimension</Name>
				<Source><![CDATA[
    private static void validateActiveDimension(RefRecId _productMaster, TableId _dimensionTableId)
    {
        EcoResProductDimGroupSetup ecoResProductDimGroupSetup = EcoResProductDimGroupSetup::newDimensionGroup(
            EcoResProductDimensionGroupProduct::findByProduct(_productMaster).ProductDimensionGroup);

        boolean isDimensionActive = ecoResProductDimGroupSetup.getFieldSetup(
            EcoResProductDimensionAttribute::dimensionTable2InventDimFieldId(_dimensionTableId)).isActive();

        if (!isDimensionActive)
        {
            throw error(strFmt("@SYS19306", funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDimensionQuery</Name>
				<Source><![CDATA[
    private static Query createDimensionQuery(
        Name    _productDimensionValue,
        TableId _dimensionTableId,
        FieldId _dimensionTableValueFieldId)
    {
        Query query = new Query();

        // RLS is implicitly enabled when executing dynamically-built queries. RLS adds a filter to only return records
        // for the sub types that the user has access to. In this place we don't want a filtered result, so we need to disable RLS.
        query.recordLevelSecurity(false);

        QueryBuildDataSource dimensionTableQbds = query.addDataSource(_dimensionTableId);
        dimensionTableQbds.addRange(_dimensionTableValueFieldId).value(queryValue(_productDimensionValue));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProductMasterDimensionValue</Name>
				<Source><![CDATA[
    private static EcoResProductMasterDimensionValue insertProductMasterDimensionValue(
        RefRecId                        _productMaster,
        RefRecId                        _productDimensionAttribute,
        Name                            _productDimensionValue,
        EcoResProductDimensionAttribute _ecoResProductDimensionAttribute,
        TableId                         _dimensionTableId,
        FieldId                         _dimensionTableValueFieldId,
        Query                           _query)
    {
        SysDictTable                            sysDictTable;
        Common                                  dimensionTable;

        QueryRun queryRun = new QueryRun(_query);

        if (!queryRun.next())
        {
            sysDictTable = new SysDictTable(_dimensionTableId);
            dimensionTable = sysDictTable.makeRecord();
            dimensionTable.(_dimensionTableValueFieldId) = _productDimensionValue;
            dimensionTable.insert();
        }
        else
        {
            dimensionTable = queryRun.get(_dimensionTableId);
        }

        EcoResProductMasterManager::checkDimensionValue(_productMaster, _productDimensionAttribute, dimensionTable.RecId, true);

        sysDictTable = new SysDictTable(_ecoResProductDimensionAttribute.getMasterDimensionTableId());
        EcoResProductMasterDimensionValue ecoResProductMasterDimensionValue = sysDictTable.makeRecord() as EcoResProductMasterDimensionValue;

        ecoResProductMasterDimensionValue.setDimensionValueAndRelations(_productMaster, _productDimensionAttribute, dimensionTable.RecId);
        ecoResProductMasterDimensionValue.insert();

        return ecoResProductMasterDimensionValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductMasterDimValueTranslation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates translation for the new dimension value to the product master.
    /// </summary>
    /// <param name = "_ecoResProductMasterDimensionValue">
    /// The new dimension value to the product master.
    /// </param>
    /// <param name="_productDimensionDescription">
    /// The name of _productDimensionValue, to be placed in <c>EcoResProductMasterDimValueTranslation</c>.
    /// </param>
    /// <param name="_productDimensionAddDescription">
    /// The description of _productDimensionValue, to be placed in <c>EcoResProductMasterDimValueTranslation</c>.
    /// </param>
    [SysObsolete('This method is deprecated. Please use the insertProductMasterDimValueTranslation() method instead.', false, 19\10\2021)]
    protected static void createProductMasterDimValueTranslation(EcoResProductMasterDimensionValue _ecoResProductMasterDimensionValue,
                                                                EcoResDescription _productDimensionDescription,
                                                                Name _productDimensionAddDescription)
    {
        EcoResProductMasterDimValueTranslation  productMasterDimValueTranslation;

        EcoResProductMasterManager::initializeProductMasterDimValueTranslation(productMasterDimValueTranslation,
                                                                         _ecoResProductMasterDimensionValue,
                                                                         _productDimensionAddDescription,
                                                                         _productDimensionDescription);

        if (productMasterDimValueTranslation.canMaintainTranslation())
        {
            productMasterDimValueTranslation.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProductMasterDimValueTranslation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>EcoResProductMasterDimValueTranslation</c> record for the new dimension value to the product master.
    /// </summary>
    /// <param name = "_productMasterDimValueTranslation">
    /// The <c>EcoResProductMasterDimValueTranslation</c> record to be initialized.
    /// </param>
    /// <param name = "_ecoResProductMasterDimensionValue">
    /// The new dimension value to the product master.
    /// </param>
    /// <param name="_productDimensionDescription">
    /// The name of _productDimensionValue, to be placed in <c>EcoResProductMasterDimValueTranslation</c>.
    /// </param>
    /// <param name="_productDimensionAddDescription">
    /// The description of _productDimensionValue, to be placed in <c>EcoResProductMasterDimValueTranslation</c>.
    /// </param>
    [SysObsolete('This method is deprecated. Please use the initializeProductMasterDimValueTranslation() method instead.', true, 19\10\2021)]
    
    protected static void initProductMasterDimValueTranslation(EcoResProductMasterDimValueTranslation  _productMasterDimValueTranslation,
                                                               EcoResProductMasterDimensionValue _ecoResProductMasterDimensionValue,
                                                               EcoResDescription _productDimensionDescription,
                                                               Name _productDimensionAddDescription)
    {
        EcoResProductMasterManager::initializeProductMasterDimValueTranslation(
            _productMasterDimValueTranslation,
            _ecoResProductMasterDimensionValue,
            _productDimensionDescription,
            _productDimensionAddDescription);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProductMasterDimValueTranslation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts translation for the new dimension value to the product master.
    /// </summary>
    /// <param name = "_ecoResProductMasterDimensionValue">The new dimension value to the product master.</param>
    /// <param name="_productDimensionValueName">The name of _productDimensionValue, to be placed in <c>EcoResProductMasterDimValueTranslation</c>.</param>
    /// <param name="_productDimensionValueDescription">The description of _productDimensionValue, to be placed in <c>EcoResProductMasterDimValueTranslation</c>.</param>
    protected static void insertProductMasterDimValueTranslation(
        EcoResProductMasterDimensionValue   _ecoResProductMasterDimensionValue,
        Name                                _productDimensionValueName,
        EcoResDescription                   _productDimensionValueDescription)
    {
        EcoResProductMasterDimValueTranslation  productMasterDimValueTranslation;

        EcoResProductMasterManager::initializeProductMasterDimValueTranslation(
            productMasterDimValueTranslation,
            _ecoResProductMasterDimensionValue,
            _productDimensionValueName,
            _productDimensionValueDescription);

        if (productMasterDimValueTranslation.canMaintainTranslation())
        {
            productMasterDimValueTranslation.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProductMasterDimValueTranslation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>EcoResProductMasterDimValueTranslation</c> record for the new dimension value to the product master.
    /// </summary>
    /// <param name = "_productMasterDimValueTranslation">The <c>EcoResProductMasterDimValueTranslation</c> record to be initialized.</param>
    /// <param name = "_ecoResProductMasterDimensionValue">The new dimension value to the product master.</param>
    /// <param name="_productDimensionName">The name of _productDimensionValue, to be placed in <c>EcoResProductMasterDimValueTranslation</c>.</param>
    /// <param name="_productDimensionDescription">The description of _productDimensionValue, to be placed in <c>EcoResProductMasterDimValueTranslation</c>.</param>
    protected static void initializeProductMasterDimValueTranslation(
        EcoResProductMasterDimValueTranslation  _productMasterDimValueTranslation,
        EcoResProductMasterDimensionValue       _ecoResProductMasterDimensionValue,
        Name                                    _productDimensionValueName,
        EcoResDescription                       _productDimensionValueDescription)
    {
        _productMasterDimValueTranslation.ProductMasterDimensionValue = _ecoResProductMasterDimensionValue.RecId;
        _productMasterDimValueTranslation.LanguageId                  = SystemParameters::getSystemLanguageId();
        _productMasterDimValueTranslation.Name                        = _productDimensionValueName;
        _productMasterDimValueTranslation.Description                 = _productDimensionValueDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistDimensionValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a dimension value exists.
    /// </summary>
    /// <param name="_productMaster">
    ///    The ID of a record in the <c>EcoResProductMaster</c> table.
    /// </param>
    /// <param name="_productDimensionAttribute">
    ///    The ID of a record in the <c>EcoResProductDimensionAttribute</c> table.
    /// </param>
    /// <param name="_dimensionValue">
    ///    The ID of a record in a dimension table.
    /// </param>
    /// <param name="_throwError">
    ///    Specifies if exception should be thrown, in case the dimension value does not exist.
    /// </param>
    /// <returns>
    ///    true if the check is successful; otherwise, false.
    /// </returns>
    static boolean checkExistDimensionValue(
        RefRecId    _productMaster,
        RefRecId    _productDimensionAttribute,
        RefRecId    _dimensionValue,
        boolean     _throwError = false)
    {
        EcoResProductMasterDimensionValue masterDimensionTable = EcoResProductMasterManager::createTableInstance(_productDimensionAttribute);

        return masterDimensionTable.checkExistDimensionValue(_productMaster, _productDimensionAttribute, _dimensionValue, _throwError);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTableInstance</Name>
				<Source><![CDATA[
    static private EcoResProductMasterDimensionValue createTableInstance(RefRecId    _productDimensionAttribute)
    {
        EcoResProductDimensionAttribute ecoResProductDimensionAttribute = EcoResProductDimensionAttribute::find(_productDimensionAttribute);
        SysDictTable sysDictTable = new SysDictTable(ecoResProductDimensionAttribute.getMasterDimensionTableId());
        return sysDictTable.makeRecord() as EcoResProductMasterDimensionValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDimensionValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a dimension value is assigned to a product master.
    /// </summary>
    /// <param name="_productMaster">
    ///    The ID of a record in the <c>EcoResProductMaster</c> table.
    /// </param>
    /// <param name="_productDimensionAttribute">
    ///    The ID of a record in the <c>EcoResProductDimensionAttribute</c> table.
    /// </param>
    /// <param name="_dimensionValue">
    ///    The ID of a record in a dimension table.
    /// </param>
    /// <param name="_throwError">
    ///    Specifies if exception should be thrown, in case the dimension has been assigned to product master.
    /// </param>
    /// <returns>
    ///    true if the check is successful; otherwise, false.
    /// </returns>
    static boolean checkDimensionValue(
        RefRecId    _productMaster,
        RefRecId    _productDimensionAttribute,
        RefRecId    _dimensionValue,
        boolean     _throwError = false)
    {
        EcoResProductMasterDimensionValue masterDimensionTable = EcoResProductMasterManager::createTableInstance(_productDimensionAttribute);

        return masterDimensionTable.validateDimensionValueAndRelations(_productMaster, _productDimensionAttribute, _dimensionValue, _throwError);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EcoResProductMasterManager construct()
    {
        return new EcoResProductMasterManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyProductTranslations</Name>
				<Source><![CDATA[
    public static void copyProductTranslations(EcoResProductRecId _productRecIdFrom, EcoResProductRecId _productRecIdTo)
    {
        EcoResProductTranslation    ecoResProductTranslationFrom;
        EcoResProductTranslation    ecoResProductTranslationTo;
        EcoResProductTranslation    ecoResProductTranslationOrigin;

        ttsbegin;

        insert_recordset ecoResProductTranslationTo(Product, Name, Description, LanguageId)
        select _productRecIdTo, Name, Description, LanguageId
        from ecoResProductTranslationFrom
        where ecoResProductTranslationFrom.Product == _productRecIdFrom
        notexists join ecoResProductTranslationOrigin
            where   ecoResProductTranslationOrigin.Product == ecoResProductTranslationTo.Product
                &&  ecoResProductTranslationOrigin.LanguageId == ecoResProductTranslationTo.LanguageId;

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>