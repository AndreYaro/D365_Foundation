<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlDataMaintenanceService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetControlDataMaintenanceService</c> class manages budget control data maintenance operations.
/// </summary>
public class BudgetControlDataMaintenanceService
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findDocumentsForProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Use a <c>BudgetControlDataMaintenanceProvider</c> implementation to find documents that
    /// need budget control data maintenance.
    /// </summary>
    /// <param name="_budgetControlDataMaintenanceRecId">
    /// The <c>BudgetControlDataMaintenance</c> record ID.
    /// </param>
    /// <param name="_providerName">
    /// The class name of a <c>BudgetControlDataMaintenanceProvider</c> implementation.
    /// </param>
    public static void findDocumentsForProvider(
        BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId,
        ClassName _providerName)
    {
        BudgetControlDataMaintenanceProvider dataMaintenanceProvider = BudgetControlDataMaintenanceProvider::getProviderFromName(_providerName);
        if (!dataMaintenanceProvider)
        {
            throw error(strFmt("@Budget:DataMaintenanceProviderNotFound", _providerName));
        }

        BudgetControlInstrumentationLogger logger = BudgetControlInstrumentationLogger::createLogger(classStr(BudgetControlDataMaintenanceService));
        using (var activityContext = logger.dataMaintenance().findDataMaintenance(_providerName, _budgetControlDataMaintenanceRecId))
        {
            BudgetControlIDataMaintenanceSandbox sandboxProvider = dataMaintenanceProvider as BudgetControlIDataMaintenanceSandbox;
            boolean doFindInSandbox = sandboxProvider != null && sandboxProvider.doFindInSandbox();
            if (doFindInSandbox)
            {
                BudgetControlDataMaintenanceFindRequest request = BudgetControlDataMaintenanceFindRequest::constructWithValues(_providerName, _budgetControlDataMaintenanceRecId);
                SysOperationSandbox::callStaticMethod(classNum(BudgetControlDataMaintenanceService),
                    staticMethodStr(BudgetControlDataMaintenanceService, findDocumentsSandbox),
                    request.pack(),
                    dataMaintenanceProvider.getName());
            }
            else
            {
                dataMaintenanceProvider.findDocuments(_budgetControlDataMaintenanceRecId);
            }

            activityContext.addCustomProperty(BudgetControlInstrumentationConstants::DoFindInSandbox, any2Str(doFindInSandbox));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDocumentsSandbox</Name>
				<Source><![CDATA[
    private static void findDocumentsSandbox(container _inputParameters)
    {
        BudgetControlDataMaintenanceFindRequest request = BudgetControlDataMaintenanceFindRequest::construct();
        request.unpack(_inputParameters);

        BudgetControlDataMaintenanceProvider dataMaintenanceProvider = BudgetControlDataMaintenanceProvider::getProviderFromName(request.ProviderClassName);
        dataMaintenanceProvider.findDocuments(request.BudgetControlDataMaintenanceRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the primary ledger for the specified <c>BudgetControlDataMaintenance</c>
    /// record ID.
    /// </summary>
    /// <param name = "_budgetControlDataMaintenanceRecId">
    /// The <c>BudgetControlDataMaintenance</c> record ID.
    /// </param>
    /// <returns>
    /// The primary ledger ID.
    /// </returns>
    public static LedgerRecId getPrimaryLedger(BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId)
    {
        BudgetControlDataMaintenance budgetControlDataMaintenance;

        if (_budgetControlDataMaintenanceRecId)
        {
            select firstonly PrimaryLedger from budgetControlDataMaintenance
                where budgetControlDataMaintenance.RecId == _budgetControlDataMaintenanceRecId;
        }

        return budgetControlDataMaintenance.PrimaryLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDataMaintenanceRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes a budget control data maintenance request.
    /// </summary>
    /// <param name = "_request">
    /// An instance of the <c>BudgetControlDataMaintenanceRequest</c> class.
    /// </param>
    public static void processDataMaintenanceRequest(BudgetControlDataMaintenanceRequest _request)
    {
        boolean processCompleted = true;
        
        SysDictClass providerClass;
        BudgetControlDataMaintenanceTracking budgetControlDataMaintenanceTracking, budgetControlDataMaintenanceTrackingProviders;
        BudgetControlDataMaintenanceProvider budgetControlDataMaintenanceProvider;
        BudgetControlDataMaintenanceRecId budgetControlDataMaintenanceRecId = _request.parmBudgetControlDataMaintenanceRecId();

        BudgetControlDataMaintenance::setProcessGroupStatus(budgetControlDataMaintenanceRecId, BudgetControlDataMaintenanceStatus::Executing);
        int64 selectedCount = BudgetControlDataMaintenance::getSelectedDocumentCount(budgetControlDataMaintenanceRecId);

        LedgerRecId primaryLedgerRecId = BudgetControlDataMaintenanceService::getPrimaryLedger(budgetControlDataMaintenanceRecId);

        BudgetControlInstrumentationLogger logger = BudgetControlInstrumentationLogger::createLogger(classStr(BudgetControlDataMaintenanceService));
        using (var dataMaintenanceActivityContext = logger.dataMaintenance().processDataMaintenance(budgetControlDataMaintenanceRecId, selectedCount))
        {
            changecompany(CompanyInfo::getDataArea(Ledger::primaryForLegalEntity(primaryLedgerRecId)))
            {
                // Process the selected tracking documents per unique provider.
                while select DataMaintenanceProvider from budgetControlDataMaintenanceTrackingProviders
                group by DataMaintenanceProvider
                where budgetControlDataMaintenanceTrackingProviders.BudgetControlDataMaintenance == budgetControlDataMaintenanceRecId
                    && budgetControlDataMaintenanceTrackingProviders.Selected == NoYes::Yes
                {
                    boolean processCompletedLocal = true;
                    ClassName providerName = budgetControlDataMaintenanceTrackingProviders.DataMaintenanceProvider;

                    using (var providerActivityContext = logger.dataMaintenance().processDataMaintenanceProvider(providerName))
                    {
                        budgetControlDataMaintenanceProvider = BudgetControlDataMaintenanceProvider::getProviderFromName(providerName);

                        if (!budgetControlDataMaintenanceProvider)
                        {
                            processCompletedLocal = false;
                            error(strFmt("@Budget:DataMaintenanceProviderNotFound", providerName));
                            continue;
                        }

                        BudgetControlDataMaintenanceService::setProviderLogger(budgetControlDataMaintenanceProvider, logger);

                        budgetControlDataMaintenanceProvider.preProcessDocuments(budgetControlDataMaintenanceRecId);

                        BudgetControlISetBasedDataMaintenanceProvider setBasedProvider = budgetControlDataMaintenanceProvider as BudgetControlISetBasedDataMaintenanceProvider;
                        if (setBasedProvider != null)
                        {
                            processCompletedLocal = BudgetControlDataMaintenanceService::processGroupSetBased(setBasedProvider, budgetControlDataMaintenanceRecId, providerName);
                        }
                        else
                        {
                            processCompletedLocal = BudgetControlDataMaintenanceService::processGroup(budgetControlDataMaintenanceProvider, budgetControlDataMaintenanceRecId, providerName);
                        }

                        budgetControlDataMaintenanceProvider.postProcessDocuments(budgetControlDataMaintenanceRecId);

                        processCompleted = processCompletedLocal && processCompleted;
                    }
                }
            }

            BudgetControlDataMaintenanceStatus groupStatus = processCompleted ? BudgetControlDataMaintenanceStatus::Completed : BudgetControlDataMaintenanceStatus::Error;
            BudgetControlDataMaintenance::setProcessGroupStatus(budgetControlDataMaintenanceRecId, groupStatus);
            dataMaintenanceActivityContext.addCustomProperty(BudgetControlInstrumentationConstants::DataMaintenanceGroupStatus, any2Str(groupStatus));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processGroupSetBased</Name>
				<Source><![CDATA[
    private static boolean processGroupSetBased(
        BudgetControlISetBasedDataMaintenanceProvider _setBasedProvider,
        BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId,
        ClassName _dataMaintenanceProviderName)
    {
        boolean processCompleted = true;
        BudgetControlDataMaintenanceStatus finalStatus = BudgetControlDataMaintenanceStatus::Completed;

        BudgetControlDataMaintenanceTracking::setProcessStatusForSelected(_budgetControlDataMaintenanceRecId, _dataMaintenanceProviderName, BudgetControlDataMaintenanceStatus::Executing);

        try
        {
            _setBasedProvider.processDocumentsSetBased(_budgetControlDataMaintenanceRecId);
        }
        catch (Exception::Error)
        {
            finalStatus = BudgetControlDataMaintenanceStatus::Error;
            processCompleted = false;
        }

        BudgetControlDataMaintenanceTracking::setProcessStatusForSelected(_budgetControlDataMaintenanceRecId, _dataMaintenanceProviderName, finalStatus);

        return processCompleted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processGroup</Name>
				<Source><![CDATA[
    private static boolean processGroup(
        BudgetControlDataMaintenanceProvider budgetControlDataMaintenanceProvider,
        BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId,
        ClassName _dataMaintenanceProviderName)
    {
        boolean processCompleted = true;
        BudgetControlDataMaintenanceTracking budgetControlDataMaintenanceTracking;

        while select RecId from budgetControlDataMaintenanceTracking
            where budgetControlDataMaintenanceTracking.BudgetControlDataMaintenance == _budgetControlDataMaintenanceRecId
                && budgetControlDataMaintenanceTracking.DataMaintenanceProvider == _dataMaintenanceProviderName
                && budgetControlDataMaintenanceTracking.Selected == NoYes::Yes
        {
            BudgetControlDataMaintenanceStatus finalStatus = BudgetControlDataMaintenanceStatus::Completed;

            budgetControlDataMaintenanceProvider.setProcessStatus(budgetControlDataMaintenanceTracking.RecId, BudgetControlDataMaintenanceStatus::Executing);

            try
            {
                BudgetCheckResult budgetCheckResult = budgetControlDataMaintenanceProvider.processDocument(budgetControlDataMaintenanceTracking.RecId);
                
                budgetControlDataMaintenanceProvider.setBudgetCheckResult(budgetControlDataMaintenanceTracking.RecId, budgetCheckResult);
            }
            catch (Exception::Error)
            {
                // Budget control data maintenance validation failures for a single
                // document do not prevent the other documents from being processed.
                finalStatus = BudgetControlDataMaintenanceStatus::Error;
                processCompleted = false;
            }

            budgetControlDataMaintenanceProvider.setProcessStatus(budgetControlDataMaintenanceTracking.RecId, finalStatus);
        }

        return processCompleted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProviderLogger</Name>
				<Source><![CDATA[
    private static void setProviderLogger(BudgetControlDataMaintenanceProvider _budgetControlDataMaintenanceProvider, BudgetControlInstrumentationLogger _logger)
    {
        BudgetControlILoggable loggableProvider = _budgetControlDataMaintenanceProvider as BudgetControlILoggable;
        if (loggableProvider)
        {
            loggableProvider.setLogger(_logger);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>