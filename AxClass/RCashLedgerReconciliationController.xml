<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RCashLedgerReconciliationController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RCashLedgerReconciliationController</c> is
///     the controller class for associated SSRS report.
/// </summary>
public class RCashLedgerReconciliationController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Provides the opportunity to modify the contract before the dialog is shown to the user.
    /// </summary>
    protected void prePromptModifyContract()
    {
        RCashLedgerReconciliationContract contract = this.parmReportContract().parmRdpContract();

        if (contract.parmSpecification() == RCashReportSpecification::Balances)
        {
            contract.parmZeroBalance(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        RCashLedgerReconciliationContract contract = this.parmReportContract().parmRdpContract();
        Query query = this.getFirstQuery();
        QueryBuildRange qbr = SysQuery::findOrCreateRange(query.dataSourceTable(tablenum(RCashTable)),fieldnum(RCashTable, AccountNum));

        if (contract.parmRCashAccount())
        {
            qbr.value(queryValue(contract.parmRCashAccount()));
        }
        else
        {
            qbr.value(SysQuery::valueUnlimited());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunValidate</Name>
				<Source><![CDATA[
    protected container preRunValidate()
    {
        MainAccount::updateBalances();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SrsReportRunController controller = new RCashLedgerReconciliationController();

        controller.parmArgs(_args);

        #isoCountryRegionCodes
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([ [#isoRU, GlobalizationConstants::FeatureReferenceRU00039] ], funcName());

        controller.parmReportName(ssrsReportStr(RCashLedgerReconciliation, Report));
        controller.parmDialogCaption("@GLS104502");
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>