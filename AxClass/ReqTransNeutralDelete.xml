<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransNeutralDelete</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqTransNeutralDelete</c> class handles deleting of neutral transactions for the material
/// requirements planning (MRP).
/// 
/// Below is an example of neutral transactions that can be deleted:
/// - Site is the only coverage dimension.
/// - There is a transfer order from one warehouse to another within the same site.
/// - The transfer order will be shipped and received on the same day.
/// Such transfer order does not affect the total quantity that is available on the site
/// and hence does not affect master planning in any way.
/// 
/// There are several reasons to delete neutral transactions:
/// - MRP will run faster because there will be no need to determine coverage, delays and actions for neutral transactions.
/// - If the neutral issues are not excluded from the MRP run then they will be deducted from the demand forecast 
/// and will result in undersupply. 
/// - It can happen that the neutral issue will get pegged with the corresponding neutral receipt. 
/// In this case we will see an infinite explosion tree in the explosion form. 
/// </summary>
[SysObsolete('The ReqTransNeutralDelete class is obsolete, and the ReqTransNeutralTracker class should be used instead.', false, 30\06\2020)]
class ReqTransNeutralDelete
{
    ItemId                  itemId;
    BOMLevel                level;
    ReqPlanData             reqPlanData;
    ReqProcessId            processId;
    boolean                 useReqTransFilter;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    protected ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLevel</Name>
				<Source><![CDATA[
    protected BOMLevel parmLevel(BOMLevel _level = level)
    {
        level = _level;
        return level;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcessId</Name>
				<Source><![CDATA[
    protected ReqProcessId parmProcessId(ReqProcessId _processId = processId)
    {
        processId = _processId;
        return processId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqPlanData</Name>
				<Source><![CDATA[
    protected ReqPlanData parmReqPlanData(ReqPlanData _reqPlanData = reqPlanData)
    {
        if (!prmIsDefault(_reqPlanData))
        {
            reqPlanData = _reqPlanData;
        }
        return reqPlanData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseReqTransFilter</Name>
				<Source><![CDATA[
    public boolean parmUseReqTransFilter(boolean _useReqTransFilter = useReqTransFilter)
    {
        useReqTransFilter = _useReqTransFilter;
        return useReqTransFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustConsiderTransactionsWithTransferRefType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether transactions with the specified transfer reference type must to be considered.
    /// </summary>
    /// <param name = "_refType">Transfer reference type.</param>
    /// <returns>true, if transactions with the specified transfer reference type must to be considered; otherwise, false.</returns>
    protected boolean mustConsiderTransactionsWithTransferRefType(ReqRefType _refType)
    {
        if (_refType == ReqRefType::Kanban || _refType == ReqRefType::KanbanLine)
        {
            return isConfigurationkeyEnabled(configurationKeyNum(LeanManufacturing));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRefTypeRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the reference type ranges to the netural transactions query.
    /// </summary>
    /// <param name = "_dsReqTransNeutral">The main data source of the query.</param>
    protected void addRefTypeRanges(QueryBuildDataSource _dsReqTransNeutral)
    {
        SetEnumerator transferRefTypeEnumerator = ReqRefTypeDescriptor::transferTypes().getEnumerator();

        while (transferRefTypeEnumerator.moveNext())
        {
            ReqRefType transferRefType = transferRefTypeEnumerator.current();

            if (this.mustConsiderTransactionsWithTransferRefType(transferRefType))
            {
                _dsReqTransNeutral.addRange(fieldNum(ReqTransNeutral, RefType)).value(queryValue(transferRefType));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildNeutralTransactionDeleteQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query which lists neutral transactions.
    /// </summary>
    /// <returns>The query which lists neutral transactions.</returns>
    protected Query buildNeutralTransactionDeleteQuery()
    {
        Query query = new Query();

        QueryBuildDataSource dsReqTransNeutral = query.addDataSource(tableNum(ReqTransNeutral));

        ReqPlanVersionRefRecId planVersionRecId = reqPlanData ? reqPlanData.parmReqPlanVersionRefRecId() : 0;
        dsReqTransNeutral.addRange(fieldNum(ReqTransNeutral, PlanVersion)).value(queryValue(planVersionRecId));
                         
        this.addRefTypeRanges(dsReqTransNeutral);

        dsReqTransNeutral.addRange(fieldNum(ReqTransNeutral, SumQtyInNeutralGroup)).value(queryValue(0));

        if (itemId)
        {
            dsReqTransNeutral.addRange(fieldNum(ReqTransNeutral, ItemId)).value(queryValue(itemId));
        }
        else 
        {
            QueryBuildDataSource dsProcessItemFilter = dsReqTransNeutral.addDataSource(tableNum(ReqProcessItem));
            dsProcessItemFilter.joinMode(JoinMode::ExistsJoin);
            dsProcessItemFilter.fetchMode(QueryFetchMode::One2One);
            dsProcessItemFilter.addLink(fieldNum(ReqTransNeutral, ItemId), fieldNum(ReqProcessItem, ItemId));
            dsProcessItemFilter.addRange(fieldNum(ReqProcessItem, ProcessId)).value(queryValue(processId));
                        
            dsReqTransNeutral.addRange(fieldNum(ReqTransNeutral, Level)).value(queryValue(level));
        }

        if (useReqTransFilter)
        {
            QueryBuildDataSource dsReqTransFilter = dsReqTransNeutral.addDataSource(tableNum(ReqProcessTransFilter));
            dsReqTransFilter.joinMode(JoinMode::ExistsJoin);
            dsReqTransFilter.fetchMode(QueryFetchMode::One2One);
            dsReqTransFilter.addLink(fieldNum(ReqTransNeutral, RecId), fieldNum(ReqProcessTransFilter, ReqTrans));
            dsReqTransFilter.addRange(fieldNum(ReqProcessTransFilter, ProcessId)).value(queryValue(processId));

            SelectableDataArea processDataAreaId = curExt2dataareaid(tablenum(ReqProcessTransFilter));
            dsReqTransFilter.addRange(fieldNum(ReqProcessTransFilter, ProcessDataAreaId)).value(queryValue(processDataAreaId));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a deletion of the neutral requirement transactions from the requirement profile.
    /// </summary>
    public void run()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqTransNeutralDelete construct()
    {
        return new ReqTransNeutralDelete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>ReqTransNeutralDelete</c> class for a given item.
    /// </summary>
    /// <param name="_itemId">
    /// The item to delete neutral requirement transactions for.
    /// </param>
    /// <param name="_reqPlanData">
    /// The plan data information class.
    /// </param>
    /// <returns>
    /// A new <c>ReqTransNeutralDelete</c> instance.
    /// </returns>
    public static ReqTransNeutralDelete newItemId(ItemId        _itemId,
                                                  ReqPlanData   _reqPlanData)
    {
        ReqTransNeutralDelete reqTransNeutralDelete = ReqTransNeutralDelete::construct();

        reqTransNeutralDelete.parmItemId(_itemId);
        reqTransNeutralDelete.parmReqPlanData(_reqPlanData);

        return reqTransNeutralDelete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReqCalcBOMLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>ReqTransNeutralDelete</c> class for a BOM level.
    /// </summary>
    /// <param name="_level">
    /// The BOM level.
    /// </param>
    /// <param name="_processId">
    /// A <c>ReqProcessId</c> value that identifies the master planning run to use for filtering the items.
    /// </param>
    /// <param name="_reqPlanData">
    /// The plan data information class.
    /// </param>
    /// <returns>
    /// A new <c>ReqTransNeutralDelete</c> instance.
    /// </returns>
    public static ReqTransNeutralDelete newReqCalcBOMLevel(BOMLevel        _level,
                                                           ReqProcessId    _processId,
                                                           ReqPlanData     _reqPlanData)
    {
        ReqTransNeutralDelete   reqTransNeutralDelete = ReqTransNeutralDelete::construct();

        reqTransNeutralDelete.parmLevel(_level);
        reqTransNeutralDelete.parmProcessId(_processId);
        reqTransNeutralDelete.parmReqPlanData(_reqPlanData);

        return reqTransNeutralDelete;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>