<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustWriteOffPostedBusinessEventContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The data contract for a <c>CustWriteOffPostedBusinessEvent</c>.
/// </summary>
[DataContract]
public final class CustWriteOffPostedBusinessEventContract extends BusinessEventsContract
{
    private CustAccount customerAccount;
    private Voucher voucher;
    private TransDate writeOffDate;
    private AmountCurCredit writeOffAmount;
    private ReasonCode writeOffReason; 
    private LedgerJournalAC writeOffAccount; 
    private SelectableDataArea legalEntity;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>CustWriteOffPostedBusinessEventContract</c> from a <c>LedgerJournalTrans</c> record.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">A <c>LedgerJournalTrans</c> record.</param>
    /// <returns>A <c>CustWriteOffPostedBusinessEventContract</c>.</returns>
    public static CustWriteOffPostedBusinessEventContract newFromLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        var contract = new CustWriteOffPostedBusinessEventContract();
        contract.initialize(_ledgerJournalTrans);

        return contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize(LedgerJournalTrans _ledgerJournalTrans)
    {
        customerAccount = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(_ledgerJournalTrans.LedgerDimension);
        voucher = _ledgerJournalTrans.Voucher;
        writeOffDate = _ledgerJournalTrans.TransDate;
        
        if (_ledgerJournalTrans.AmountCurCredit != 0)
        {
            writeOffAmount = _ledgerJournalTrans.AmountCurCredit;
        }
        else if (_ledgerJournalTrans.AmountCurDebit != 0)
        {
            writeOffAmount = _ledgerJournalTrans.AmountCurDebit * -1;
        }

        writeOffReason = ReasonTableRef::find(_ledgerJournalTrans.ReasonRefRecId).Reason;
        writeOffAccount = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(CustWriteOffFinancialReasonsSetup::findByReasonCode(writeOffReason).WriteOffLedgerDimension);
        legalEntity = _ledgerJournalTrans.Company;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomerAccount</Name>
				<Source><![CDATA[
    [DataMember('CustomerAccount'), BusinessEventsDataMember("@AccountsReceivable:CustomerAccount")]
    public CustAccount parmCustomerAccount(CustAccount _customerAccount = customerAccount)
    {
        customerAccount = _customerAccount;
        
        return customerAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucher</Name>
				<Source><![CDATA[
    [DataMember('Voucher'), BusinessEventsDataMember("@AccountsReceivable:Voucher")]
    public Voucher parmVoucher(Voucher _voucher = voucher)
    {
        voucher = _voucher;

        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWriteOffDate</Name>
				<Source><![CDATA[
    [DataMember('WriteOffDate'), BusinessEventsDataMember("@AccountsReceivable:WriteOffDate")]
    public TransDate parmWriteOffDate(TransDate _writeOffDate = writeOffDate)
    {
        writeOffDate = writeOffDate;

        return writeOffDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWriteOffAmount</Name>
				<Source><![CDATA[
    [DataMember('WriteOffAmount'), BusinessEventsDataMember("@AccountsReceivable:WriteOffAmount")]
    public AmountCurCredit parmWriteOffAmount(AmountCurCredit _writeOffAmount = writeOffAmount)
    {
        writeOffAmount = _writeOffAmount;

        return writeOffAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWriteOffReason</Name>
				<Source><![CDATA[
    [DataMember('WriteOffReason'), BusinessEventsDataMember("@AccountsReceivable:WriteOffReason")]
    public ReasonCode parmWriteOffReason(ReasonCode _writeOffReason = writeOffReason)
    {
        writeOffReason = _writeOffReason;

        return writeOffReason;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWriteOffAccount</Name>
				<Source><![CDATA[
    [DataMember('WriteOffAccount'), BusinessEventsDataMember("@AccountsReceivable:WriteOffAccount")]
    public LedgerJournalAC  parmWriteOffAccount(LedgerJournalAC  _writeOffAccount = writeOffAccount)
    {
        writeOffAccount = _writeOffAccount;

        return writeOffAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLegalEntity</Name>
				<Source><![CDATA[
    [DataMember('LegalEntity'), BusinessEventsDataMember("@AccountsReceivable:LegalEntity")]
    public SelectableDataArea parmLegalEntity(SelectableDataArea _legalEntity = legalEntity)
    {
        legalEntity = _legalEntity;

        return legalEntity;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>