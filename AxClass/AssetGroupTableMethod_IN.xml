<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetGroupTableMethod_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates the depreciation amount for depreciaton table by an asset group.
/// </summary>
public abstract class AssetGroupTableMethod_IN
{
    AssetBook                   assetBook;
    AssetDepreciationProfile    assetDepreciationProfile;
    AssetSumCalc_Trans_IN       assetSumCalc_Trans;
    AssetTableInterval          deprInterval;

    AssetAcquisitionValue       assetAcquisitionValue;  // initial value of asset
    AssetTransDate              depreciationDate;       // date for transaction (date dep occured)
    AssetTransDate              baseDate;               // base date for depreciation

    AssetAmount                 amountToDepreciate;
    AssetInterval               currentInterval;        // the interval currently being depreciated

    AssetTransDate              parmRunDate;            // date used to depreciate to
    AssetAmount                 parmPrevDep;            // previously depreciated (used to 'add in' this run's deps)

    AssetTransDate              periodstart;
    AssetTransDate              periodEnd;
    AssetDepreciationTime       restPeriod;             // Used for returning depreciation period to user of class
    AssetAmount                 prevDepAmount;
    AssetAmount                 depreciationThisRun;
    AssetAmount                 prevDepAmountExternal;  // Used if an asset uses two depreciation-profiles.
    AssetBudgetModelId          assetBudgetModelId;

    AssetDepreciationTime       prevPeriods;            // Used if the depreciationStartDate is earlier
    boolean                     calculatePrevPeriods;   // then the first date of acquisition

    AssetTransDate              assetAcquisitionValueDate; // Date on which Acquisitionvalue is calculated.

    boolean                     dualDepreciation;           // Runs as two competing depr. profiles.
    boolean                     depreciationAltProfile;     // Calculate alternative depreciation profile.
    boolean                     depreciationExtProfile;     // Calculate extraordinary depreciation profile.

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addPrevDepAmountExternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add to previous depreciation amount.
    /// </summary>
    /// <param name="_prevDepAmountExternal">
    /// Previous depreciation amount.
    /// </param>
    public void addPrevDepAmountExternal(AssetAmount _prevDepAmountExternal)
    {
        prevDepAmountExternal += _prevDepAmountExternal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetSumCalc_Trans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets asset transaction sum calculation.
    /// </summary>
    /// <returns>
    /// The instance of the <c>AssetSumCalc_Trans_IN</c> class.
    /// </returns>
    protected AssetSumCalc_Trans_IN assetSumCalc_Trans()
    {
        return assetSumCalc_Trans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the amount to depreciate this interval.
    /// </summary>
    /// <returns>
    /// Returns the amount to depreciate this interval.
    /// </returns>
    public abstract AssetAmount calc()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the quantity depreciate - only for consumption depreciation.
    /// </summary>
    /// <returns>
    /// Returns the quantity depreciate - only for consumption depreciation.
    /// </returns>
    public AssetConsumptionQty calcQty()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRestPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate period of inactivity.
    /// </summary>
    /// <param name="_startOfPeriod">
    /// Start date of period.
    /// </param>
    protected void calcRestPeriod(AssetTransDate _startOfPeriod)
    {
        if (periodEnd && periodstart && _startOfPeriod)
        {
            restPeriod = ((periodEnd - periodstart + 1) / (periodEnd - _startOfPeriod + 1));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentIntervalAdjust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjust teh current interval.
    /// </summary>
    /// <param name="_decrease">
    /// The adjustment value.
    /// </param>
    protected void currentIntervalAdjust(int _decrease)
    {
        currentInterval += _decrease;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the depreciation date, a instance of the <c>AssetTransDate</c> class.
    /// </summary>
    /// <returns>
    /// The instance of the <c>AssetTransDate</c> class.
    /// </returns>
    public AssetTransDate depDate()
    {
        return depreciationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the depreciation period.
    /// </summary>
    /// <returns>
    /// The <c>read</c> type of the depreciation period.
    /// </returns>
    public real depPeriod()
    {
        return restPeriod + prevPeriods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the instance of the <c>AssetGroupTableMethod_IN</c> class.
    /// </summary>
    protected void init()
    {
        AssetBudget                 assetBudget;
        AssetGroupTrans_IN          assetTrans;
        AssetGroupInformation_IN    assetGroupInformation;
        AssetBookTable              assetBookTable = AssetBookTable::find(assetBook.BookId);

        if (depreciationExtProfile)
        {
            baseDate = assetBook.LastDepreciationDateExtraOrd ? assetBook.LastDepreciationDateExtraOrd : (assetBook.DepreciationStartDate-1);
        }
        else
        {
            baseDate = assetBook.LastDepreciationDate ? assetBook.LastDepreciationDate : (assetBook.DepreciationStartDate-1);
        }

        deprInterval = depreciationExtProfile ? AssetTableInterval::construct(assetBook.depreciationExtProfile(), assetBookTable.FiscalCalendar):
                                                AssetTableInterval::construct(assetBook.depreciationProfile(), assetBookTable.FiscalCalendar);

        if (depreciationAltProfile)
        {
            assetDepreciationProfile = assetBook.depreciationAltProfile();
        }
        else if (depreciationExtProfile)
        {
            assetDepreciationProfile = assetBook.depreciationExtProfile();
        }
        else
        {
            assetDepreciationProfile = assetBook.depreciationProfile();
        }
        assetAcquisitionValue   = assetSumCalc_Trans.acquisitionValue();

        prevDepAmount           = -(assetSumCalc_Trans.depreciationValue() +
                                    assetSumCalc_Trans.depreciationAdjValue());

        amountToDepreciate      = (assetSumCalc_Trans.netBookValue() - assetBook.ScrapValue);

        if (depreciationExtProfile)
        {
            if (assetBook.LastDepreciationDateExtraOrd)
            {
                periodstart = assetBook.LastDepreciationDateExtraOrd + 1;
                periodEnd   = deprInterval.endPeriod(assetBook.LastDepreciationDateExtraOrd + 1);
            }
            else
            {
                periodstart = assetBook.DepreciationStartDate;
                periodEnd   = deprInterval.endPeriod(assetBook.DepreciationStartDate);
            }
        }
        else
        {
        if (assetBook.LastDepreciationDate)
        {
            periodstart = assetBook.LastDepreciationDate + 1;
            periodEnd   = deprInterval.endPeriod(assetBook.LastDepreciationDate + 1);
        }
        else
        {
            periodstart = assetBook.DepreciationStartDate;
            periodEnd   = deprInterval.endPeriod(assetBook.DepreciationStartDate);
        }
        }

        if (assetBudgetModelId)
        {
            if (!assetAcquisitionValue)
            {
                assetAcquisitionValue   = AssetSumCalc_Budget_IN::newAssetYear(assetBook.AssetGroup,assetBook.BookId, assetBudgetModelId,assetAcquisitionValueDate,AssetYear::All).acquisitionValue();
                amountToDepreciate      = assetAcquisitionValue - assetBook.ScrapValue;

                select firstonly assetBudget
                 where assetBudget.BudgetModel      == assetBudgetModelId
                    && assetBudget.AssetGroup_IN    == assetBook.AssetGroup
                    && assetBudget.BookId           == assetBook.BookId
                    && assetBudget.TransType        == AssetTransType::Acquisition;

                if (assetBudget)
                {
                    periodstart = deprInterval.startOfPeriod(assetBudget.TransDate);
                    periodEnd   = deprInterval.endPeriod(assetBudget.TransDate);
                }
            }
        }
        else
        {
            if (!AssetStatusType::construct(assetBook.Status).isAcquired())
            {
                assetAcquisitionValue   = assetBook.AcquisitionPrice;
                amountToDepreciate      = assetAcquisitionValue - assetBook.ScrapValue;
            }
        }

        if (assetBook.RevaluationGroupId)
        {
            select sum(AmountCur) from assetGroupInformation
                where  assetGroupInformation.AssetGroup         == assetBook.AssetGroup
                    && assetGroupInformation.RevaluationTrans   == NoYes::Yes
            join AssetGroupInformation from assetTrans
                where assetTrans.BookId                         == assetBook.BookId;

            amountToDepreciate -= assetGroupInformation.AmountCur;
            amountToDepreciate += assetSumCalc_Trans.depreciationRevaluationValue();

            prevDepAmount -= assetSumCalc_Trans.depreciationRevaluationValue();
        }

        calculatePrevPeriods = true;

        // No depreciation before last/first date
        if (parmRunDate < baseDate)
        {
            currentInterval = 1;
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create new instance of the <c>AssetGroupTableMethod_IN</c> class.
    /// </summary>
    /// <param name="_assetBook">
    /// The instance of the <c>AssetBook</c> class.
    /// </param>
    /// <param name="_assetTransDate">
    /// The instance of the <c>AssetTransDate</c>
    /// </param>
    /// <param name="_dualDepreciation">
    /// A <c>boolean</c> type 'True' if there is any dual depreciation.
    /// </param>
    /// <param name="_depreciationAltProfile">
    /// A <c>boolean</c> type 'True' if there is any depreciation of ALT profile.
    /// </param>
    /// <param name="_depreciationExtProfile">
    /// A <c>boolean</c> type 'True' if there is any depreciation of EXT profile.
    /// </param>
    /// <param name="_assetBudgetModelId">
    /// The Id of the asset budget mode, a instance of the <c>AssetBudgetModelId</c> class.
    /// </param>
    public void new(AssetBook           _assetBook,
                    AssetTransDate      _assetTransDate,
                    boolean             _dualDepreciation,
                    boolean             _depreciationAltProfile,
                    boolean             _depreciationExtProfile,
                    AssetBudgetModelId  _assetBudgetModelId = '')

    {
        assetBook               = _assetBook;
        parmRunDate             = _assetTransDate;
        depreciationAltProfile  = _depreciationAltProfile;
        dualDepreciation        = _dualDepreciation;
        depreciationExtProfile  = _depreciationExtProfile;
        assetBudgetModelId      = _assetBudgetModelId;

        assetSumCalc_Trans = AssetSumCalc_Trans_IN::newAssetYear(assetBook.AssetGroup, assetBook.BookId);

        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if further depreciation has to be done.
    /// </summary>
    /// <returns>
    /// Returns true if further depreciation has to be done.
    /// </returns>
    public boolean next()
    {
        if (parmRunDate <= baseDate)
        {
            return false;
        }
        currentInterval++;

        if (currentInterval > assetBook.LifeTimeRest)
        {
            return false;
        }

        this.setDepDate();

    //
    //  This prevents depreciations with invalid dates from
    //  being handled.
    //
        if (!depreciationDate ||
            depreciationDate > parmRunDate)
        {
            return false;
        }

        if (periodEnd < periodstart)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRestPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get/Set the rest period.
    /// </summary>
    /// <param name="_restPeriod">
    /// The rest period value.
    /// </param>
    /// <returns>
    /// The rest period value.
    /// </returns>
    protected AssetDepreciationTime parmRestPeriod(AssetDepreciationTime _restPeriod = restPeriod)
    {
        restPeriod = _restPeriod;

        return restPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>percentage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the asset percentage.
    /// </summary>
    /// <returns>
    /// The asset percentage.
    /// </returns>
    protected AssetDepreciationPercentage percentage()
    {
        return assetDepreciationProfile.Percentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevDepAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the previous depreciation amount.
    /// </summary>
    /// <returns>
    /// Previous depreciation amount.
    /// </returns>
    protected AssetAmount prevDepAmount()
    {
        return prevDepAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>revaluationAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the revaluation amount
    /// </summary>
    /// <returns>
    /// The revaluation amount.
    /// </returns>
    public AssetRevaluationAmount revaluationAmount()
    {
        return 0.00;
    }

]]></Source>
			</Method>
			<Method>
				<Name>revaluationFactor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the revaluation factor.
    /// </summary>
    /// <returns>
    /// The revaluation factor.
    /// </returns>
    protected AssetRevaluationFactor revaluationFactor()
    {
        return 1.00;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAmountToDepreciate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the asset amount to depreciate.
    /// </summary>
    /// <param name="_assetTransDate">
    /// The transaction date.
    /// </param>
    protected void setAmountToDepreciate(AssetTransDate _assetTransDate = periodEnd)
    {
        AssetGroupTrans_IN          assetGroupTransLoc;
        AssetGroupInformation_IN    assetGroupInformation;
        AssetAmount                 salesValue;
        AssetBook                   assetBookLoc;
        AssetTrans                  assetTransSale;
        AssetAmount                 periodAcquisitionValue;

        periodAcquisitionValue  = assetAcquisitionValue;
        assetAcquisitionValue   = AssetGroupTrans_IN::amountToDepreciate(assetBook.AssetGroup, _assetTransDate, assetBook.BookId, assetBook.AssetId);

        select sum(AmountMst) from assetGroupInformation
            where assetGroupInformation.TransDate           <= _assetTransDate
               && assetGroupInformation.AssetGroup          == assetBook.AssetGroup
               && (assetGroupInformation.TransType          == AssetTransType::DisposalSale
               || assetGroupInformation.TransType           == AssetTransType::DisposalScrap)
        join AssetGroupInformation from assetGroupTransLoc
            where assetGroupTransLoc.BookId                 == assetBook.BookId
               && assetGroupTransLoc.AssetGroupInformation  == assetGroupInformation.RecId;

        salesValue = assetGroupInformation.AmountMst;

        //This is to get the SaleValue, when depreciation is ran for same year as of the sale.
        if ((salesValue == 0
                || _assetTransDate < periodstart)
            && periodAcquisitionValue == assetAcquisitionValue) //Sale of asset year is not equal to asset acquisitionValue.
        {
            select sum(AmountMST) from assetTransSale
                    where assetTransSale.BookId      == assetBook.BookId
                        && assetTransSale.AssetGroup == assetBook.AssetGroup
                        && assetTransSale.TransDate  >= periodstart
                        && assetTransSale.TransDate  <= periodEnd
                        && (assetTransSale.TransType    == AssetTransType::DisposalSale
                            || assetTransSale.TransType == AssetTransType::DisposalScrap);

            salesValue += assetTransSale.AmountMst;
        }

        while select AssetId, AssetGroup, BookId, DepreciationStartDate from assetBookLoc
            where assetBookLoc.AssetGroup           == assetBook.AssetGroup
               && assetBookLoc.BookId               == assetBook.BookId
               && assetBookLoc.DepreciationStartDate > periodEnd
        {
            assetAcquisitionValue   -= AssetTrans::amountToDepriciate(assetBookLoc.AssetId, _assetTransDate, assetBookLoc.BookId);
        }

        if (!assetAcquisitionValue &&
            (!AssetStatusType::construct(assetBook.Status).isAcquired() &&  assetBook.AcquisitionDate <= _assetTransDate))
        {
            assetAcquisitionValue   = assetBook.AcquisitionPrice;
        }

        //
        // If the scrapValue puts the asset into a negative amountToDepreciate
        // do set the amountToDepreciate to zero. This prevents a negative
        // amountToDepreciate from being used to calculate depreciations.
        //
        if (assetAcquisitionValue >= assetBook.ScrapValue)
        {
            amountToDepreciate      = assetAcquisitionValue - assetBook.ScrapValue;
        }
        else
        {
            amountToDepreciate      = 0;
        }
        if (salesValue)
        {
            amountToDepreciate      = (assetAcquisitionValue + salesValue);
        }
        else
        {
            amountToDepreciate      = assetAcquisitionValue;
        }
        while select AssetGroup, AssetId, BookId, DepreciationStartDate from assetBookLoc
            where assetBookLoc.AssetGroup == assetBook.AssetGroup
               && assetBookLoc.BookId     == assetBook.BookId
        {
            // Different logic is handled for standard calendar and fiscal calendar on _assetTransDate
            //    1. When it is standard calendar, _assetTransDate takes default value periodEnd
            //    2. When it is fiscal calendar, _assetTransDate takes the last date of last period
            // For special depreciation, only those posted before current period will impact normal depreciation
            if ((!prmisDefault(_assetTransDate) && _assetTransDate >= assetBookLoc.DepreciationStartDate)
                || (prmisDefault(_assetTransDate) && deprInterval.startOfPeriod(_assetTransDate) > assetBookLoc.DepreciationStartDate))
            {
                amountToDepreciate += AssetTrans::amountMSTPerDateTranstype(assetBookLoc.AssetId,_assetTransDate,assetBookLoc.BookId,AssetTransType::BonusDepreciation);
            }
        }
        if (assetBudgetModelId)
        {
            if (!assetAcquisitionValue)
            {
                //
                //  The acquisistion total for a budget proposal will now allow for a date restrictive result
                //  by retrieving the data directly from the AssetBudget transaction table.
                //
                assetAcquisitionValue   = AssetBudget::amountToDepreciate(assetBook.AssetGroup, _assetTransDate, assetBook.BookId);
                amountToDepreciate      = assetAcquisitionValue - assetBook.ScrapValue;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDepDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the date of depreciation.
    /// </summary>
    protected void setDepDate()
    {
        depreciationDate = periodEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construction of the <c>AssetGroupTableMethod_IN</c> class.
    /// </summary>
    /// <param name="_assetBook">
    /// The instance of the <c>AssetBook</c> class.
    /// </param>
    /// <param name="_assetTransDate">
    /// The instance of the <c>AssetTransDate</c> class.
    /// </param>
    /// <param name="_assetBudgetModelId">
    /// The instance of the <c>AssetBudgetModelId</c> class.
    /// </param>
    /// <param name="_dualDepreciation">
    /// A <c>boolean</c> type 'True' if there is any dual depreciation.
    /// </param>
    /// <param name="_depreciationAltProfile">
    /// A <c>boolean</c> type 'True' if there is any depreciation of ALT profile.
    /// </param>
    /// <param name="_depreciationExtProfile">
    /// A <c>boolean</c> type 'True' if there is any depreciation of EXT profile.
    /// </param>
    /// <returns>
    /// The instance of the <c>AssetGroupTableMethod_IN</c> class.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// An invalid method type in the depreciation construct.
    /// </exception>
    public static AssetGroupTableMethod_IN construct(AssetBook          _assetBook,
                                                     AssetTransDate     _assetTransDate,
                                                     AssetBudgetModelId _assetBudgetModelId = '',
                                                     boolean            _dualDepreciation = false,
                                                     boolean            _depreciationAltProfile = false,
                                                     boolean            _depreciationExtProfile = false)
    {
        AssetDepreciationMethod assetDepreciationMethod;

        if (_depreciationAltProfile)
        {
            assetDepreciationMethod = _assetBook.depreciationAltProfile().Method;
            _depreciationExtProfile = false;
        }
        else if (_depreciationExtProfile)
        {
            assetDepreciationMethod = _assetBook.depreciationExtProfile().Method;
            _depreciationAltProfile = false;
        }
        else
        {
            assetDepreciationMethod = _assetBook.depreciationProfile().Method;
        }

        switch (assetDepreciationMethod)
        {
            case AssetDepreciationMethod::ReducingBalance           :
            case AssetDepreciationMethod::ReducingBalance125        :
            case AssetDepreciationMethod::ReducingBalance150        :
            case AssetDepreciationMethod::ReducingBalance175        :
            case AssetDepreciationMethod::ReducingBalance200        : return new AssetGroupTableMethod_RB_IN(_assetBook,
                                                                                                             _assetTransDate,
                                                                                                             _dualDepreciation,
                                                                                                             _depreciationAltProfile,
                                                                                                             _depreciationExtProfile,
                                                                                                             _assetBudgetModelId);
            case AssetDepreciationMethod::StraightLinePercentage_IN : return new AssetGroupTableMethod_SLP_IN(_assetBook,
                                                                                                              _assetTransDate,
                                                                                                              _dualDepreciation,
                                                                                                              _depreciationAltProfile,
                                                                                                              _depreciationExtProfile,
                                                                                                              _assetBudgetModelId);
        }
        throw error("@SYS67591");
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>