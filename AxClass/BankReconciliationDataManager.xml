<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationDataManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankReconciliationDataManager</c> class manages the data for reconciliation
/// for the operation of matching, unmatching and marking as new.
/// </summary>
class BankReconciliationDataManager
{
    BankReconciliationHeader reconciliation;

    BankReconciliationStatementOpenTmp reconciliationStatementTmp;
    BankReconciliationDocumentOpenTmp reconciliationDocumentTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankReconciliationHeader</Name>
				<Source><![CDATA[
    public BankReconciliationHeader parmBankReconciliationHeader(BankReconciliationHeader _reconciliation = reconciliation)
    {
        reconciliation = _reconciliation;

        return reconciliation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReconciliationDocumentTmp</Name>
				<Source><![CDATA[
    public BankReconciliationDocumentOpenTmp parmReconciliationDocumentTmp(BankReconciliationDocumentOpenTmp _reconciliationDocumentTmp = reconciliationDocumentTmp)
    {
        reconciliationDocumentTmp.linkPhysicalTableInstance(_reconciliationDocumentTmp);

        return reconciliationDocumentTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReconciliationStatementTmp</Name>
				<Source><![CDATA[
    public BankReconciliationStatementOpenTmp parmReconciliationStatementTmp(BankReconciliationStatementOpenTmp _reconciliationStatementTmp = reconciliationStatementTmp)
    {
        reconciliationStatementTmp.linkPhysicalTableInstance(_reconciliationStatementTmp);

        return reconciliationStatementTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshMatchStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Referesh impacted entries buffer.
    /// </summary>
    /// <param name="_impactedStatementEntryIdList">
    /// The list of impacted statement entries.
    /// </param>
    /// <param name="_impactedDocumentEntryIdList">
    /// The list of impacted bank document entries.
    /// </param>
    public void refreshMatchStatus(
        List _impactedStatementEntryIdList,
        List _impactedDocumentEntryIdList)
    {
        if (_impactedStatementEntryIdList)
        {
            this.refreshMatchStatusOfStatement(_impactedStatementEntryIdList);
        }

        if (_impactedDocumentEntryIdList)
        {
            this.refreshMatchStatusOfDocument(_impactedDocumentEntryIdList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshMatchStatusOfDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Referesh impacted document entries buffer.
    /// </summary>
    /// <param name="_impactedDocumentEntryIdList">
    /// The list of impacted entries.
    /// </param>
    private void refreshMatchStatusOfDocument(List _impactedDocumentEntryIdList)
    {
        BankReconciliationDocumentOpenTmp documentOpenLocal;

        documentOpenLocal.linkPhysicalTableInstance(reconciliationDocumentTmp);

        ListEnumerator enumerator = _impactedDocumentEntryIdList.getEnumerator();

        while (enumerator.moveNext())
        {
            RecId recId = enumerator.current();

            select firstonly documentOpenLocal
                where documentOpenLocal.RecId == recId;

            if (documentOpenLocal.BankDocumentTableView)
            {
                if (FeatureStateProvider::isFeatureEnabled(BankModernReconciliationFeature::instance()))
                {
                    BankReconciliationMatchingItem matchingItem = BankReconciliationMatchingItem::findValidByDocumentRecId(documentOpenLocal.BankDocumentTableView);
                    boolean isMatchingItemFound = matchingItem.RecId != 0;
                    int64 matchingId;
                    BankReconciliationMatchingType matchingType;
                    if (isMatchingItemFound)
                    {
                        BankReconciliationMatching matching = BankReconciliationMatching::find(matchingItem.BankReconciliationMatching);
                        matchingId = matching.MatchingId;
                        matchingType = matching.BankReconciliationMatchingType;
                    }
                    documentOpenLocal.updateMatchedStatusWithIdAndType(isMatchingItemFound, matchingId, matchingType);
                }
                else
                {
                    boolean isMatchingItemFound = BankReconciliationMatchingItem::findValidByDocumentRecId(documentOpenLocal.BankDocumentTableView).RecId != 0;
                    documentOpenLocal.updateMatchedStatus(isMatchingItemFound);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshMatchStatusOfStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Referesh impacted statement entries buffer.
    /// </summary>
    /// <param name="_impactedStatementEntryIdList">
    /// The list of impacted entries.
    /// </param>
    private void refreshMatchStatusOfStatement(List _impactedStatementEntryIdList)
    {
        BankReconciliationStatementOpenTmp statementOpenLocal;

        statementOpenLocal.linkPhysicalTableInstance(reconciliationStatementTmp);

        ListEnumerator enumerator = _impactedStatementEntryIdList.getEnumerator();

        while (enumerator.moveNext())
        {
            RecId recId = enumerator.current();

            select firstonly statementOpenLocal
                where statementOpenLocal.RecId == recId;

            if (statementOpenLocal.BankStmtISOReportEntry)
            {
                if (FeatureStateProvider::isFeatureEnabled(BankModernReconciliationFeature::instance()))
                {
                    BankReconciliationMatchingItem matchingItem = BankReconciliationMatchingItem::findValidByStatementLineRecId(statementOpenLocal.BankStmtISOReportEntry);
                    boolean isMatchingItemFound = matchingItem.RecId != 0;
                    int64 matchingId;
                    BankReconciliationMatchingType matchingType;
                    if (isMatchingItemFound)
                    {
                        BankReconciliationMatching matching = BankReconciliationMatching::find(matchingItem.BankReconciliationMatching);
                        matchingId = matching.MatchingId;
                        matchingType = matching.BankReconciliationMatchingType;
                    }
                    statementOpenLocal.updateMatchedStatusWithIdAndType(isMatchingItemFound, matchingId, matchingType);
                }
                else
                {
                    boolean isMatchingItemFound = BankReconciliationMatchingItem::findValidByStatementLineRecId(statementOpenLocal.BankStmtISOReportEntry).RecId != 0;
                    boolean isNewBankDocument = BankStmtISOReportEntry::find(statementOpenLocal.BankStmtISOReportEntry).IsNewBankDocument;
                    statementOpenLocal.updateMatchedAndNewDocumentStatus(isMatchingItemFound, isNewBankDocument);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of <c>BankReconciliationDataManager</c>.
    /// </summary>
    /// <param name="_reconciliation">
    /// Given <c>BankReconciliationHeader</c> buffer.
    /// </param>
    /// <param name="_tmpStatement">
    /// Given <c>BankReconciliationStatementOpenTmp</c> buffer.
    /// </param>
    /// <param name="_tmpDocument">
    /// Given <c>BankReconciliationDocumentOpenTmp</c> buffer.
    /// </param>
    /// <returns>
    /// An instance of <c>BankReconciliationDataManager</c>.
    /// </returns>
    public static BankReconciliationDataManager construct(
        BankReconciliationHeader _reconciliation,
        BankReconciliationStatementOpenTmp _tmpStatement,
        BankReconciliationDocumentOpenTmp _tmpDocument)
    {
        BankReconciliationDataManager dataManager = new BankReconciliationDataManager();

        dataManager.parmBankReconciliationHeader(_reconciliation);
        dataManager.parmReconciliationStatementTmp(_tmpStatement);
        dataManager.parmReconciliationDocumentTmp(_tmpDocument);

        return dataManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPaymentMatched</Name>
				<Source><![CDATA[
    internal boolean hasPaymentMatched(List _impactedStatementTmpList)
    {
        ListEnumerator enumerator = _impactedStatementTmpList.getEnumerator();
        BankReconciliationStatementOpenTmp statementOpenLocal;
        statementOpenLocal.linkPhysicalTableInstance(reconciliationStatementTmp);

        while (enumerator.moveNext())
        {
            RecId recId = enumerator.current();
            select firstonly BankStmtISOReportEntry from statementOpenLocal
                where statementOpenLocal.RecId == recId;

            if (BankStmtISOReportEntry::hasPaymentMatched(statementOpenLocal.BankStmtISOReportEntry))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>