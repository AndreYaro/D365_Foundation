<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSLoadBuildProposeDataContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>TMSLoadBuildProposeDataContract</c> class provides a data contract for the load building process.
/// </summary>
[DataContractAttribute]
class TMSLoadBuildProposeDataContract implements SysOperationValidatable, SysPackable
{
    TMSLoadBuildLoadTemplateList    loadTemplateList;
    TMSLoadBuildStrategyId          loadBuildStrategyId;
    container                       packedSupplyDemandQueryRun;
    container                       loadTemplateListPack;
    TMSLoadBuildSupplyDemandType    loadBuildSupplyDemandType;
    TMSRouteCode                    scheduledRouteCode;

    #define.CurrentVersion(2)
    #localmacro.CurrentList
            loadTemplateListPack,
            loadBuildStrategyId,
            packedSupplyDemandQueryRun,
            loadBuildSupplyDemandType,
            scheduledRouteCode
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies object state from another instance of <c>TMSLoadBuildProposeDataContract</c> class.
    /// </summary>
    /// <param name="_loadBuildProposeDataContract">
    /// An instance of <c>TMSLoadBuildProposeDataContract</c> class from which to copy the object state.
    /// </param>
    public void copy(TMSLoadBuildProposeDataContract _loadBuildProposeDataContract)
    {
        this.parmLoadBuildStrategyId(_loadBuildProposeDataContract.parmLoadBuildStrategyId());
        this.parmLoadBuildSupplyDemandType(_loadBuildProposeDataContract.parmLoadBuildSupplyDemandType());
        this.parmLoadTemplateList(_loadBuildProposeDataContract.parmLoadTemplateList());
        this.parmPackedSupplyDemandQueryRun(_loadBuildProposeDataContract.parmPackedSupplyDemandQueryRun());
        this.parmScheduledRouteCode(_loadBuildProposeDataContract.parmScheduledRouteCode());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        loadTemplateListPack = loadTemplateList.pack();
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadBuildStrategyId</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public TMSLoadBuildStrategyId parmLoadBuildStrategyId(TMSLoadBuildStrategyId _loadBuildStrategyId = loadBuildStrategyId)
    {
        loadBuildStrategyId = _loadBuildStrategyId;
        return loadBuildStrategyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadBuildSupplyDemandType</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public TMSLoadBuildSupplyDemandType parmLoadBuildSupplyDemandType(TMSLoadBuildSupplyDemandType _loadBuildSupplyDemandType = loadBuildSupplyDemandType)
    {
        loadBuildSupplyDemandType = _loadBuildSupplyDemandType;
        return loadBuildSupplyDemandType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadTemplateList</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public TMSLoadBuildLoadTemplateList parmLoadTemplateList(TMSLoadBuildLoadTemplateList _loadTemplateList = loadTemplateList)
    {
        loadTemplateList = _loadTemplateList;
        return loadTemplateList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmScheduledRouteCode</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public TMSRouteCode parmScheduledRouteCode(TMSRouteCode _scheduledRouteCode = scheduledRouteCode)
    {
        scheduledRouteCode = _scheduledRouteCode;
        return scheduledRouteCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackedSupplyDemandQueryRun</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public container parmPackedSupplyDemandQueryRun(container _packedSupplyDemandQueryRun = packedSupplyDemandQueryRun)
    {
        packedSupplyDemandQueryRun = _packedSupplyDemandQueryRun;
        return packedSupplyDemandQueryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                break;
            default:
                return false;
        }

        loadTemplateList = TMSLoadBuildLoadTemplateList::construct();
        loadTemplateList.unpack(loadTemplateListPack);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the data contract.
    /// </summary>
    /// <returns>
    ///     true if the data contract is valid; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean ret = true;
        SysQueryRun queryRun;

        if (!loadBuildStrategyId)
        {
            ret = checkFailed("@SYP4861032");
        }

        if (ret && !loadTemplateList)
        {
            ret = checkFailed("@SYP4861031");
        }

        if (ret && !packedSupplyDemandQueryRun)
        {
            ret = checkFailed("@SYP4861033");
        }

        if (ret)
        {
            queryRun = new SysQueryRun(packedSupplyDemandQueryRun);

            if (!queryRun)
            {
                ret = checkFailed("@SYP4861094");
            }
        }

        if (ret)
        {
            ret = loadTemplateList.validate();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TMSLoadBuildProposeDataContract construct()
    {
        return new TMSLoadBuildProposeDataContract();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>