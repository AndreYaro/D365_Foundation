<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SplitPaymentMandatoryRuleEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SplitPaymentMandatoryRuleEngine</c> class is class that works as an abstraction over the invoice
/// lines for the Purch and Sales modules. Finds and updates paymMode with split payment state.
/// </summary>
abstract class SplitPaymentMandatoryRuleEngine
{
    private boolean blockIfError;
    private Common common;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateFindRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and updates payment mode if rule is found.
    /// </summary>
    protected void validateFindRule()
    {
        SplitPaymentMandatoryRule_PL rule = this.findRuleForOrder(this.getAmount());

        if (rule && (this.getCurrentSplitPayment() != rule.getSplitPayment() || this.getCurrentSplitPaymentVoluntary() != rule.getSplitPaymentVoluntary()))
        {
            if (rule.IsOverrideNonMandatorySplit)
            {
                this.updateCommonTable(rule.PaymMode, rule.Specification);
                info(strFmt("@AccountsPayable:MethodOfPaymentAndOrPaymentSpecificationHaveBeenUpdatedTo", rule.PaymMode, rule.Specification));
            }
            else if (blockIfError && rule.BlockWhilePosting)
            {
                throw error(this.getMessageOfWrongSplitPayment(rule, rule.PaymMode, rule.Specification));
            }
            else
            {
                warning(this.getMessageOfWrongSplitPayment(rule, rule.PaymMode, rule.Specification));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateHasRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates and updates that current paymant mode setted correctly in order.
    /// </summary>
    protected void validateHasRule()
    {
        SplitPaymentMandatoryRule_PL rule = this.findRuleForOrder(this.getAmount());

        if (!rule)
        {
            rule = SplitPaymentMandatoryRule_PL::findPaymModeOverrideMandatory(this.getDocumentType());

            if (!rule)
            {
                rule = SplitPaymentMandatoryRule_PL::findPaymModeOverrideNonMandatory(this.getDocumentType());
            }

            if (rule)
            {
                if (rule.IsOverrideMandatorySplit)
                {
                    this.updateCommonTable(rule.PaymModeRevert, rule.SpecificationRevert);
                    info(strFmt("@AccountsPayable:MethodOfPaymentAndOrPaymentSpecificationHaveBeenUpdatedTo", rule.PaymModeRevert, rule.SpecificationRevert));
                }
                else if (blockIfError && rule.BlockWhilePosting)
                {
                    throw error(strFmt("@AccountsPayable:MethodOfPaymentAndOrPaymentSpecificationShouldNotBeSplitPaymentForExample", rule.PaymModeRevert, rule.SpecificationRevert));
                }
                else
                {
                    warning(strFmt("@AccountsPayable:MethodOfPaymentAndOrPaymentSpecificationShouldNotBeSplitPaymentForExample", rule.PaymModeRevert, rule.SpecificationRevert));
                }
            }
            else
            {
                warning(strFmt("@AccountsPayable:SplitPaymentRulesAreNotSpecifiedPaymentMethodNotValidated", this.getCurrentPaymMode()));
            }
        }
        else if (rule.getSplitPaymentVoluntary() != this.getCurrentSplitPaymentVoluntary())
        {
            this.validateFindRule();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRuleForOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds split payment rule to order.
    /// </summary>
    /// <param name = "_totalAmount">
    /// Total amount value of order.
    /// </param>
    /// <returns>
    /// The found rule.
    /// </returns>
    abstract protected SplitPaymentMandatoryRule_PL findRuleForOrder(Amount _totalAmount)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCommonTable</Name>
				<Source><![CDATA[
    protected Common parmCommonTable(Common _common = common)
    {
        common = _common;

        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentPaymMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets current payment mode.
    /// </summary>
    /// <returns>
    /// The current payment mode.
    /// </returns>
    abstract protected PaymMode getCurrentPaymMode()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets current document type.
    /// </summary>
    /// <returns>
    /// The current document type.
    /// </returns>
    abstract protected SplitPaymentDocumentType_PL getDocumentType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets current amount of order.
    /// </summary>
    /// <returns>
    /// The current amount of order.
    /// </returns>
    abstract protected Amount getAmount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSplitPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets split payment state of payment mode.
    /// </summary>
    /// <returns>
    /// The split payment state of payment mode.
    /// </returns>
    abstract protected boolean isSplitPayment()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBlockIfError</Name>
				<Source><![CDATA[
    private boolean parmBlockIfError(boolean _blockIfError = blockIfError)
    {
        blockIfError = _blockIfError;

        return blockIfError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCommonTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates common table by new payment mode.
    /// </summary>
    /// <param name = "_paymMode">
    /// Payment mode value.
    /// </param>
    /// <param name = "_paymSpec">
    /// Payment specification value.
    /// </param>
    abstract protected void updateCommonTable(PaymMode _paymMode, PaymSpec _paymSpec)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    private void run()
    {
        if (this.isSplitPayment())
        {
            this.validateHasRule();
        }
        else
        {
            this.validateFindRule();
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>analyseAndUpdateSplitPaymMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates and updates payment mode according to the rules
    /// </summary>
    /// <param name = "_common">
    /// Record of current journal.
    /// </param>
    /// <param name = "_blockIfError">
    /// State shows that needs to throw catch if error is got.
    /// </param>
    public static void analyseAndUpdateSplitPaymMode(Common _common, boolean _blockIfError = false)
    {
        SplitPaymentMandatoryRuleEngine ruleEngine = SplitPaymentMandatoryRuleEngine::newFromCommon(_common);

        ruleEngine.parmCommonTable(_common);
        ruleEngine.parmBlockIfError(_blockIfError);

        ruleEngine.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromCommon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init extended class of the <c>SplitPaymentMandatoryRuleEngine</c> class.
    /// </summary>
    /// <param name = "_common">
    /// Journal record.
    /// </param>
    /// <returns>
    /// New instance of <c>SplitPaymentMandatoryRuleEngine</c> class.
    /// </returns>
    protected static SplitPaymentMandatoryRuleEngine newFromCommon(Common _common)
    {
        SplitPaymentMandatoryRuleEngine ruleEngine;

        switch (_common.TableId)
        {
            case tableNum(SalesTable):
                ruleEngine = SplitPaymentMandatoryRuleEngine_Sales::construct();
                break;

            case tableNum(CustInvoiceTable):
                ruleEngine = SplitPaymentMandatoryRuleEngine_FreeTextInvoice::construct();
                break;

            case tableNum(PurchTable):
                ruleEngine = SplitPaymentMandatoryRuleEngine_Purchase::construct();
                break;

            case tableNum(LedgerJournalTrans):
                LedgerJournalTrans ledgerJournalTrans = _common;

                switch (ledgerJournalTrans.ledgerJournalTable().JournalType)
                {
                    case LedgerJournalType::Approval:
                        ruleEngine = SplitPaymentMandatoryRuleEngine_VendInvoiceApprovalJournal::construct();
                        break;
                    default:
                        ruleEngine = SplitPaymentMandatoryRuleEngine_VendInvoiceJournal::construct();
                        break;
                }
                break;

            case tableNum(VendInvoiceInfoTable):
                ruleEngine = SplitPaymentMandatoryRuleEngine_VendInvoiceInfoTable::construct();
                break;

            default:
                ruleEngine = SplitPaymentMandatoryRuleEngine::newFromCommonDefault(_common);
        }

        return ruleEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromCommonDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processing for not definite journal.
    /// </summary>
    /// <param name = "_common">
    /// Journal record.
    /// </param>
    /// <returns>
    /// New instance of <c>SplitPaymentMandatoryRuleEngine</c> class.
    /// </returns>
    [Replaceable]
    protected static SplitPaymentMandatoryRuleEngine newFromCommonDefault(Common _common)
    {
        throw error(Error::wrongUseOfFunction(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentSplitPaymentVoluntary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of current split payment voluntary parameter.
    /// </summary>
    /// <returns>The value of current split payment voluntary parameter.</returns>
    protected VoluntarySplitPayment_W getCurrentSplitPaymentVoluntary()
    {
        return SplitPaymentMandatoryRuleEngine::getVoluntarySplitPaymentFromPaymModeSpec(
            this.getDocumentType(),
            this.getCurrentPaymMode(),
            this.getCurrentPaymModeSpec());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentPaymModeSpec</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current specification of the payment method.
    /// </summary>
    /// <returns>
    /// The current specification of the payment method.
    /// </returns>
    /// <remarks>This method should be overridden.</remarks>
    protected PaymSpec getCurrentPaymModeSpec()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentSplitPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current value of split payment parameter.
    /// </summary>
    /// <returns>
    /// The current value of split payment parameter.
    /// </returns>
    protected NoYes getCurrentSplitPayment()
    {
        return SplitPaymentMandatoryRuleEngine::getSplitPaymentFromPaymModeSpec(
            this.getDocumentType(),
            this.getCurrentPaymMode(),
            this.getCurrentPaymModeSpec());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMessageOfWrongSplitPayment</Name>
				<Source><![CDATA[
    private str getMessageOfWrongSplitPayment(SplitPaymentMandatoryRule_PL _rule, PaymMode _paymModeExample, PaymSpec _paymSpecExample)
    {
        return strFmt(_rule.getSplitPaymentVoluntary() == NoYes::No
                        ? "@AccountsPayable:MethodOfPaymentAndOrPaymentSpecificationShouldBeMandatorySplitPaymentForExample"
                        : "@AccountsPayable:MethodOfPaymentAndOrPaymentSpecificationShouldBeVoluntarySplitPaymentForExample",
                    _paymModeExample,
                    _paymSpecExample);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSplitPaymentFromPaymModeSpec</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the split payment parameter for the <paramref name="_paymMode"/> and <paramref name="_paymSpec"/>.
    /// </summary>
    /// <param name = "_custVend">The type of account.</param>
    /// <param name = "_paymMode">The value of method of payment.</param>
    /// <param name = "_paymSpec">The value of payment specification.</param>
    /// <returns>The value of the split payment parameter for the <paramref name="_paymMode"/> and <paramref name="_paymSpec"/>.</returns>
    public static NoYes getSplitPaymentFromPaymModeSpec(SplitPaymentDocumentType_PL _custVend, PaymMode _paymMode, PaymSpec _paymSpec = '')
    {
        NoYes ret;

        switch (_custVend)
        {
            case SplitPaymentDocumentType_PL::Customer:
                ret = CustPaymModeTable::find(_paymMode).SplitPayment_W;
                break;
            case SplitPaymentDocumentType_PL::Vendor:
                ret = VendPaymModeSpec::findSpec(_paymMode, _paymSpec).SplitPayment_W;
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoluntarySplitPaymentFromPaymModeSpec</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the voluntary split payment parameter for the <paramref name="_paymMode"/> and <paramref name="_paymSpec"/>.
    /// </summary>
    /// <param name = "_custVend">The type of account.</param>
    /// <param name = "_paymMode">The value of method of payment.</param>
    /// <param name = "_paymSpec">The value of payment specification.</param>
    /// <returns>The value of the voluntary split payment parameter for the <paramref name="_paymMode"/> and <paramref name="_paymSpec"/>.</returns>
    public static VoluntarySplitPayment_W getVoluntarySplitPaymentFromPaymModeSpec(SplitPaymentDocumentType_PL _custVend, PaymMode _paymMode, PaymSpec _paymSpec)
    {
        VoluntarySplitPayment_W ret;

        switch (_custVend)
        {
            case SplitPaymentDocumentType_PL::Customer:
                ret = CustPaymModeSpec::findSpec(_paymMode, _paymSpec).VoluntarySplitPayment_W;
                break;
            case SplitPaymentDocumentType_PL::Vendor:
                ret = VendPaymModeSpec::findSpec(_paymMode, _paymSpec).VoluntarySplitPayment_W;
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>