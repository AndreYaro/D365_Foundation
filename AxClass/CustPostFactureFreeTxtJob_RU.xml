<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustPostFactureFreeTxtJob_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class CustPostFactureFreeTxtJob_RU extends CustPostInvoiceJob implements BatchRetryable
{
    boolean updateFreeTxt;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createCustPostInvoice_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates new instance of <c>CustPostFactureFreeTxt_RU</c> class.
    /// </summary>
    /// <param name="_custInvoiceTable">
    ///     CustInvoiceTable record which has to be posted.
    /// </param>
    /// <param name="_typeOfCreditmaxCheck">
    ///     The enum that shows what level of credit limit control to apply.
    /// </param>
    /// <param name="_creditError">
    ///     true for storno operation.
    /// </param>
    /// <returns>
    ///     object of <c>CustPostFactureFreeTxt_RU</c> class.
    /// </returns>
    protected CustPostInvoice createCustPostInvoice_RU( CustInvoiceTable       _custInvoiceTable,
                                                        TypeOfCreditmaxCheck   _typeOfCreditmaxCheck = CustParameters::find().CreditMaxCheck,
                                                        NoYes                  _creditError          = NoYes::No)
    {
        return new CustPostFactureFreeTxt_RU(_custInvoiceTable,
                                             _typeOfCreditmaxCheck,
                                             _creditError);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custPostInvoiceUpdate</Name>
				<Source><![CDATA[
    public void custPostInvoiceUpdate()
    {
        CustInvoiceTable                custInvoiceTable;
        CustPostFactureFreeTxt_RU       custPostFacture;
        CustInvoiceJour                 custInvoiceJour;
        CustPrintOutInvoice             custPrintOutInvoice;
        RecordSortedList                recordSortedList;

        this.getUpdateFreeTxt_RU();

        if (updateFreeTxt)
        {
            super();
        }
        else
        {
            custPostFacture = this.createCustPostInvoice_RU(custInvoiceTable,
                                                            custCreditMaxCheck,
                                                            creditError);

            custPostFacture.parmUseOriginalDocumentAsFacture_RU(useOriginalDocumentAsFacture);

            custPostFacture.parmPrintFacture_RU(printFacture);

            if (printOut == NoYes::Yes || printAcceptanceReport == NoYes::Yes)
            {
                custPrintOutInvoice = CustPrintOutInvoice::newPrintOriginalCopy(printerSettingsFreeText,
                                                                                printerSettingsFreeTextCopy,
                                                                                this.isInBatch());
                custPrintOutInvoice.parmPrintFormLetter_RU(printOut);
                custPrintOutInvoice.parmPrintAcceptanceReport_RU(printAcceptanceReport);
                custPrintOutInvoice.parmPrintFacture_RU(false);
                custPrintOutInvoice.parmPrintInMST_RU(printInMST);

                recordSortedList = new RecordSortedList(tableNum(CustInvoiceTable));
                recordSortedList.sortOrder(fieldNum(CustInvoiceTable, RecId));
            }

            while (queryRun.next())
            {
                custInvoiceTable = queryRun.get(tableNum(CustInvoiceTable));
                custInvoiceJour = custInvoiceTable.custInvoiceJour();
                if (!custInvoiceJour.custInvoiceJour_RU().FacturedFully_RU)
                {
                    custPostFacture.parmCustInvoiceTable(custInvoiceTable);
                    custPostFacture.postFacture_RU(custInvoiceJour, printerSettingsFreeText);
                }

                if (printOut == NoYes::Yes || printAcceptanceReport == NoYes::Yes)
                {
                    custInvoiceTable.reread();

                    recordSortedList.ins(custInvoiceTable);

                    if (printOutWhen == Printout::Current)
                    {
                        custPrintOutInvoice.printOut(NoYes::No, recordSortedList, NoYes::No, printOutWhen, usePrintManagement);

                        recordSortedList.del(custInvoiceTable);
                    }
                }
            }

            if ((printOut == NoYes::Yes || printAcceptanceReport == NoYes::Yes) && printOutWhen == Printout::After && recordSortedList.len())
            {
                custPrintOutInvoice.printOut(NoYes::No, recordSortedList, NoYes::No, printOutWhen, usePrintManagement);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.caption("@GLS106738");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUpdateFreeTxt_RU</Name>
				<Source><![CDATA[
    public boolean getUpdateFreeTxt_RU()
    {
        while (! updateFreeTxt && queryRun.next())
        {
            if (! queryRun.get(tableNum(CustInvoiceTable)).(fieldNum(CustInvoiceTable, Posted)))
            {
                updateFreeTxt = true;
            }
        }

        queryRun.reset();

        return updateFreeTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showFacture_RU</Name>
				<Source><![CDATA[
    public boolean showFacture_RU()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuild</Name>
				<Source><![CDATA[
    public void updateQueryBuild(CustInvoiceTable _custInvoiceTable)
    {
        QueryBuildDataSource qbdsInvoiceJour;
        QueryBuildDataSource ds;

        super(_custInvoiceTable);

        // find or create datasource
        qbdsInvoiceJour = queryRun.query().dataSourceTable(tableNum(CustInvoiceJour), 1);
        if (!qbdsInvoiceJour)
        {
            qbdsInvoiceJour = queryRun.query().dataSourceTable(tableNum(CustInvoiceTable)).addDataSource(
                tableNum(CustInvoiceJour));
        }
        qbdsInvoiceJour.relations(true);
        qbdsInvoiceJour.fetchMode(QueryFetchMode::One2One);

        // activate or deactivate 'factured' range
        if (_custInvoiceTable.Posted)
        {
            ds = queryRun.query().dataSourceTable(tableNum(CustInvoiceJour_RU));
            if (ds == null)
            {
                ds = CustInvoiceJour_RU::addDataSource(qbdsInvoiceJour);
            }

            findOrCreateRange_W(ds, fieldNum(CustInvoiceJour_RU, FacturedFully_RU)).value(enum2Value(NoYes::No));
        }
        else
        {
            qbdsInvoiceJour.joinMode(JoinMode::OuterJoin);

            ds = queryRun.query().dataSourceTable(tableNum(CustInvoiceJour_RU));
            if (ds == null)
            {
                ds = CustInvoiceJour_RU::addDataSource(qbdsInvoiceJour, JoinMode::OuterJoin);
            }

            findOrCreateRange_W(ds, fieldNum(CustInvoiceJour_RU, FacturedFully_RU)).value(SysQuery::valueUnlimited());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS106738";
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>