<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchCommitmentLineLookup_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class populates and filters the commitment line lookup field for purchase orders and invoices.
/// </summary>
class PurchCommitmentLineLookup_PSN extends SysReferenceTableLookup
{
    VendInvoiceInfoLine     vendInvoiceInfoLine;
    PurchLine               purchLine;

    //
    // Currently this class is only used to populate lookups for either a PurchLine record or a VendInvoiceInfoLine record.
    // If this class is ever expanded to support other document types then a new Base Enum should be created to track what
    // type of record is being used to populate the lookup.  The below boolean should then be removed and the Base Enum used instead.
    //
    boolean                 isPurchLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmPurchLine</Name>
				<Source><![CDATA[
    // French RI Test change
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PurchLine parmPurchLine(PurchLine _purchLine = purchLine)
    {
        //set the purchLine class variable
        purchLine = _purchLine;

        isPurchLine = true;

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendInvoiceInfoLine</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public VendInvoiceInfoLine parmVendInvoiceInfoLine(VendInvoiceInfoLine _vendInvoiceInfoLine = vendInvoiceInfoLine)
    {
        //set the vendInvoiceInfoLine class variable.
        vendInvoiceInfoLine = _vendInvoiceInfoLine;

        isPurchLine = false;

        return vendInvoiceInfoLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performFormLookup</Name>
				<Source><![CDATA[
    public Common performFormLookup()
    {
        PurchCommitmentLine_PSN         purchCommitmentLineLookupRecord;

        this.setupLookupFields();

        if (isPurchLine)
        {
            //Generate a query that filters based on values from the purchLine record.
            this.performFormLookupPurchaseOrder();
        }
        else
        {
            //Generate a query that filters based on values from the vendInvoiceInfoLine record.
            this.performFormLookupInvoice();
        }

        purchCommitmentLineLookupRecord = super();

        return purchCommitmentLineLookupRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performFormLookupInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the lookup query that will be used to filter the lookup when the calling document is an invoice line.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void performFormLookupInvoice()
    {
        QueryBuildDataSource            queryDSPurchCommitmentHeader_PSN;
        QueryBuildDataSource            queryDSPurchCommitmentLine_PSN;
        QueryBuildDataSource            queryDSSourceDocumentLine;
        Query                           localQuery;

        FiscalCalendarYear              fiscalCalendarYear;

        localQuery = new Query();

        //Since the reference is to PurchCommitmentLine_PSN, it has to be the main table rather than PurchCommitmentHeader_PSN.
        queryDSPurchCommitmentLine_PSN = localQuery.addDataSource(tableNum(PurchCommitmentLine_PSN));

        // Add the header so that we can show fields from it and filter the query based on values stored on the header.
        queryDSPurchCommitmentHeader_PSN = queryDSPurchCommitmentLine_PSN.addDataSource(tableNum(PurchCommitmentHeader_PSN));
        queryDSPurchCommitmentHeader_PSN.fetchMode(QueryFetchMode::One2One);
        queryDSPurchCommitmentHeader_PSN.relations(true);

        // Add the source document line datasource so that closed lines can be filtered off.
        queryDSSourceDocumentLine = queryDSPurchCommitmentLine_PSN.addDataSource(tableNum(SourceDocumentLine));
        queryDSSourceDocumentLine.fetchMode(QueryFetchMode::One2One);
        queryDSSourceDocumentLine.relations(true);

        //Only show commitments where the header document status is complete.
        queryDSPurchCommitmentHeader_PSN.addRange(fieldNum(PurchCommitmentHeader_PSN, DocumentStatus))
                        .value(SysQuery::value(PurchCommitmentDocumentStatus_PSN::Complete));

        //if the commitment has a vendor then don't show records associated with another vendor.
        if (vendInvoiceInfoLine.vendInvoiceInfoTable().InvoiceAccount != '')
        {
            queryDSPurchCommitmentHeader_PSN.addRange(fieldNum(PurchCommitmentHeader_PSN, VendorAccount))
                            .value(SysQuery::value(vendInvoiceInfoLine.vendInvoiceInfoTable().InvoiceAccount));
            queryDSPurchCommitmentHeader_PSN.addRange(fieldNum(PurchCommitmentHeader_PSN, VendorAccount))
                            .value(SysQuery::value(''));
        }

        //only show commitments where fiscal year match with that of Invoice
        fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(Ledger::fiscalCalendar(CompanyInfo::current()), vendInvoiceInfoLine.vendInvoiceInfoTable().TransDate);

        queryDSPurchCommitmentLine_PSN.addRange(fieldNum(PurchCommitmentLine_PSN, LineDate))
                        .value(SysQuery::range(fiscalCalendarYear.StartDate, fiscalCalendarYear.EndDate));

        //if there is a purchase agreement on the Invoice, then the purchase agreement must match the one on the commitment
        if (vendInvoiceInfoLine.AgreementLine_PSN != 0)
        {
            queryDSPurchCommitmentLine_PSN.addRange(fieldNum(PurchCommitmentLine_PSN, AgreementLine))
                        .value(SysQuery::value(vendInvoiceInfoLine.AgreementLine_PSN));
        }

        // filter off closed commitments.
        queryDSSourceDocumentLine.addRange(fieldNum(SourceDocumentLine, AccountingStatus))
                        .value(SysQuery::valueNot(SourceDocumentLineAccountingStatus::Finalized));

        //set the query for the class object, will be used by the framework to create a recordset for the lookup.
        this.parmQuery(localQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>performFormLookupPurchaseOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the lookup query that will be used to filter the lookup when the calling document is a purchase order line.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void performFormLookupPurchaseOrder()
    {
        QueryBuildDataSource            queryDSPurchCommitmentHeader_PSN;
        QueryBuildDataSource            queryDSPurchCommitmentLine_PSN;
        QueryBuildDataSource            queryDSSourceDocumentLine;
        Query                           localQuery;

        FiscalCalendarYear              fiscalCalendarYear;

        localQuery = new Query();

        // Since the reference is to PurchCommitmentLine_PSN, it has to be the main table rather than PurchCommitmentHeader_PSN.
        queryDSPurchCommitmentLine_PSN = localQuery.addDataSource(tableNum(PurchCommitmentLine_PSN));

        // Add the header so that we can show fields from it and filter the query based on values stored on the header.
        queryDSPurchCommitmentHeader_PSN = queryDSPurchCommitmentLine_PSN.addDataSource(tableNum(PurchCommitmentHeader_PSN));
        queryDSPurchCommitmentHeader_PSN.fetchMode(QueryFetchMode::One2One);
        queryDSPurchCommitmentHeader_PSN.relations(true);

        // Add the source document line datasource so that closed lines can be filtered off.
        queryDSSourceDocumentLine = queryDSPurchCommitmentLine_PSN.addDataSource(tableNum(SourceDocumentLine));
        queryDSSourceDocumentLine.fetchMode(QueryFetchMode::One2One);
        queryDSSourceDocumentLine.relations(true);

        // Only show commitments where the header document status is complete.
        queryDSPurchCommitmentHeader_PSN.addRange(fieldNum(PurchCommitmentHeader_PSN, DocumentStatus))
                        .value(SysQuery::value(PurchCommitmentDocumentStatus_PSN::Complete));

        // if the commitment has a vendor then don't show records associated with another vendor.
        if (purchLine.VendAccount != '')
        {
            queryDSPurchCommitmentHeader_PSN.addRange(fieldNum(PurchCommitmentHeader_PSN, VendorAccount))
                            .value(SysQuery::value(purchLine.VendAccount));
            queryDSPurchCommitmentHeader_PSN.addRange(fieldNum(PurchCommitmentHeader_PSN, VendorAccount))
                            .value(SysQuery::value(''));
        }

        //only show commitments where fiscal year match with that of PO
        fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(Ledger::fiscalCalendar(CompanyInfo::current()), purchLine.purchTable().AccountingDate);

        queryDSPurchCommitmentLine_PSN.addRange(fieldNum(PurchCommitmentLine_PSN, LineDate))
                        .value(SysQuery::range(fiscalCalendarYear.StartDate, fiscalCalendarYear.EndDate));

        // if there is a purchase agreement on the PO, then the purchase agreement must match the one on the commitment
        if (purchLine.MatchingAgreementLine != 0)
        {
            queryDSPurchCommitmentLine_PSN.addRange(fieldNum(PurchCommitmentLine_PSN, AgreementLine))
                        .value(SysQuery::value(purchLine.MatchingAgreementLine));
        }

        // filter off closed commitments.
        queryDSSourceDocumentLine.addRange(fieldNum(SourceDocumentLine, AccountingStatus))
                        .value(SysQuery::valueNot(SourceDocumentLineAccountingStatus::Finalized));

        // set the query for the class object, will be used by the framework to create a recordset for the lookup.
        this.parmQuery(localQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupLookupFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the table and lookup fields that should be shown in the lookup.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setupLookupFields()
    {
        this.parmTableId(tableNum(PurchCommitmentLine_PSN));

        //This determines what fields will be shown in the lookup.
        this.addLookupfield(fieldNum(PurchCommitmentLine_PSN, PurchCommitmentHeader_PSN));
        this.addLookupfield(fieldNum(PurchCommitmentLine_PSN, LineNumber));
        this.addLookupfield(fieldNum(PurchCommitmentLine_PSN, LedgerDimension));
        this.addLookupfield(fieldNum(PurchCommitmentLine_PSN, LineAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new <c>PurchCommitmentLineLookup_PSN</c> object.
    /// </summary>
    /// <param name="_callingControl">
    /// The lookup control that is being used to perform the lookup.
    /// </param>
    /// <param name="_record">
    /// The current record context.
    /// </param>
    /// <returns>
    /// The new <c>PurchCommitmentLineLookup_PSN</c> object.
    /// </returns>
    /// <remarks>
    /// The current record context may be either a <c>PurchLine</c> record or a <c>VendInvoiceInfoLine</c> record.
    /// </remarks>
    public static PurchCommitmentLineLookup_PSN construct(FormReferenceControl _callingControl, Common _record)
    {
        PurchCommitmentLineLookup_PSN   purchCommitmentLineLookup = new PurchCommitmentLineLookup_PSN();

        purchCommitmentLineLookup.parmCallingControl(_callingControl);

        switch (_record.TableId)
        {
            case tableNum(VendInvoiceInfoLine) :
                purchCommitmentLineLookup.parmVendInvoiceInfoLine(_record as VendInvoiceInfoLine);
            break;

            case tableNum(PurchLine) :
                purchCommitmentLineLookup.parmPurchLine(_record as PurchLine);
            break;

            default :
                throw error(strFmt("@SYS19306", classId2Name(classIdGet(purchCommitmentLineLookup))));
        }

        return purchCommitmentLineLookup;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>