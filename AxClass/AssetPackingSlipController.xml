<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetPackingSlipController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>AssetPackingSlipController</c> class is the controller for the <c>AssetPackingSlip</c> report.
/// </summary>
public class AssetPackingSlipController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the query range values based on parameter values specified by the user.
    /// </summary>
    protected void preRunModifyContract()
    {
        LtAssetPackingSlip packingSlip;
        TransportationDocument transportationDocument;
        TransportationVehicle transportationVehicle;
        AssetPackingSlipContract contract;
        PackingSlipId slipId;
        Query query;
        QueryBuildDataSource qbds;

        slipId = this.parmArgs().parm();
        select PackingSlipNo, DepartmentToId, RegisterById, TransportationDocument from packingSlip
            where packingSlip.PackingSlipNo == slipId;

        if (packingSlip)
        {
            query = this.getFirstQuery();
            qbds  = query.dataSourceTable(tableNum(LtAssetPackingSlipLine));
            qbds.clearRanges();
            SysQuery::findOrCreateRange(qbds, fieldNum(LtAssetPackingSlipLine, LtAssetPackingSlip)).value(queryValue(packingSlip.RecId));

            contract = this.parmReportContract().parmRdpContract() as AssetPackingSlipContract;

            contract.parmPackingSlipNumber(packingSlip.PackingSlipNo);
            contract.parmToDepartment(OMOperatingUnit::find(packingSlip.DepartmentToId, OMOperatingUnitType::OMDepartment).Name);
            contract.parmRegisteredBy(HcmWorker::worker2Name(packingSlip.RegisterById));
            contract.parmRegisteredByTitle(HcmWorker::worker2ProfessionalTitle(packingSlip.RegisterById));

            transportationDocument = TransportationDocument::find(packingSlip.TransportationDocument);

            if (transportationDocument && transportationDocument.DoPrintTransportationDocument)
            {
                contract.parmPrintTransportationDetails(true);
                contract.parmCarrierCode(transportationDocument.CarrierCode);
                contract.parmCarrierType(transportationDocument.CarrierType);
                contract.parmLoadedAddressName(transportationDocument.LoadedAddressName);
                contract.parmLoadedPostalAddress(LogisticsPostalAddress::addressFromRecId(transportationDocument.LoadedPostalAddress));
                contract.parmLoadedDateTime(transportationDocument.LoadedDateTime);
                contract.parmUnloadedAddressName(transportationDocument.UnloadedAddressName);
                contract.parmUnloadedPostalAddress(LogisticsPostalAddress::addressFromRecId(transportationDocument.UnloadedPostalAddress));
                contract.parmUnloadedDateTime(transportationDocument.UnloadedDateTime);
                contract.parmPackageDescription(transportationDocument.PackageDescription);
                contract.parmPackageDangerDegree(transportationDocument.PackageDangerDegree);
                contract.parmIssuedBy(transportationDocument.issuedByName());
                contract.parmIssuedByTitle(transportationDocument.issuedByTitle());

                select transportationvehicle
                    where transportationvehicle.TransportationDocument == transportationDocument.RecId;

                if (transportationVehicle)
                {
                    contract.parmDriver(transportationVehicle.DriverName);
                    contract.parmTrailerNumber(transportationVehicle.TrailerNumber);
                    contract.parmRegisterNumber(transportationVehicle.PlateNumber);
                    contract.parmVehicleModel(VehicleModelTable_W::find(transportationVehicle.Model).VehicleModel);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQuerySelectButton</Name>
				<Source><![CDATA[
    public boolean showQuerySelectButton(str parameterName)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues(str parameterName)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceLT00020, funcName());

        AssetPackingSlipController controller = new AssetPackingSlipController();
        controller.parmReportName(ssrsReportStr(AssetPackingSlip, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>