<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchJournalIndirectCost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchJournalIndirectCost</c> class calculates the indirect costs for a purchase order,
///    writes the result to the <c>ProdIndirectTrans</c> table and adds entries to the ledger voucher for
///    additional posting.
/// </summary>
class PurchJournalIndirectCost extends InventCostJournalIndirectCost
{
    LedgerDimensionDefaultAccount   accountPhysicalPurchaseOffset;
    LedgerPostingType               postingTypePhysicalPurchaseOffset;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>costPriceType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies which costing sheet section to load for the calculation of indirect costs.
    /// </summary>
    /// <returns>
    /// Always returns the <c>CostPriceType::Purchase</c> enumeration value.
    /// </returns>
    CostPriceType costPriceType()
    {
        return CostPriceType::Purchase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFinancialAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes accounts on the <c>ProdIndirectTrans</c> record from the costing sheet node to use for
    /// indirect cost posting during financial updates.
    /// </summary>
    /// <param name="_calculationNode">
    /// The costing sheet node to use for the indirect cost.
    /// </param>
    /// <param name="_voucher">
    /// The voucher number to use for posting the indirect cost.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date to use for posting the indirect cost.
    /// </param>
    /// <param name="_prodIndirectTrans">
    /// The <c>ProdIndirectTrans</c> record in which to set accounts.
    /// </param>
    protected void initFinancialAccounts(
        CostSheetNodeCalculation    _calculationNode,
        Voucher                     _voucher,
        TransDate                   _transDate,
        ProdIndirectTrans           _prodIndirectTrans)
    {
        throw error(Error::wrongUseOfFunction(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPhysicalAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes accounts on the <c>ProdIndirectTrans</c> record from the costing sheet node to use for
    /// indirect cost posting during physical updates.
    /// </summary>
    /// <param name="_calculationNode">
    /// The costing sheet node to use for the indirect cost.
    /// </param>
    /// <param name="_voucher">
    /// The voucher number to use for posting the indirect cost.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date to use for posting the indirect cost.
    /// </param>
    /// <param name="_prodIndirectTrans">
    /// The <c>ProdIndirectTrans</c> record in which to set accounts.
    /// </param>
    protected void initPhysicalAccounts(
        CostSheetNodeCalculation    _calculationNode,
        Voucher                     _voucher,
        TransDate                   _transDate,
        ProdIndirectTrans           _prodIndirectTrans)
    {
        _prodIndirectTrans.VoucherEstimation = _voucher;
        _prodIndirectTrans.DateEstimation = _transDate;
        _prodIndirectTrans.Calculated = NoYes::No;
        _prodIndirectTrans.EstimatedIndirectAbsorpLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(_calculationNode.getAcctEstimatedIndirectAbsorption(), _prodIndirectTrans.DefaultDimension);
        _prodIndirectTrans.PostingEstimatedIndirectAbsorption = LedgerPostingType::IndirectEstimatedAbsorption;

        _prodIndirectTrans.EstimIndirectAbsorpOffsetLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(accountPhysicalPurchaseOffset, _prodIndirectTrans.DefaultDimension);
        _prodIndirectTrans.PostingEstimatedIndirectAbsorptionOffset = postingTypePhysicalPurchaseOffset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdIndirectTrans</Name>
				<Source><![CDATA[
    public void initProdIndirectTrans(boolean _physical, LedgerVoucher _ledgerVoucher, Voucher _voucher, TransDate _transDate, CostSheetNodeCalculation _calculationNode, ProdIndirectTrans _prodIndirectTrans, boolean _postLedger
        , boolean _stornoPhysical = false
        )
    {
        super(_physical, _ledgerVoucher, _voucher, _transDate, _calculationNode, _prodIndirectTrans, _postLedger
            // <GEERU>
            , _stornoPhysical
            // </GEERU>
            );

        // Round the amount to avoid problems when splitting transactions
        _prodIndirectTrans.Amount = CurrencyExchangeHelper::amount(_prodIndirectTrans.Amount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountPhysicalPurchaseOffset</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount parmAccountPhysicalPurchaseOffset(LedgerDimensionDefaultAccount _accountPhysicalPurchaseOffset = accountPhysicalPurchaseOffset)
    {
        accountPhysicalPurchaseOffset = _accountPhysicalPurchaseOffset;

        return accountPhysicalPurchaseOffset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingTypePhysicalPurchaseOffset</Name>
				<Source><![CDATA[
    public LedgerPostingType parmPostingTypePhysicalPurchaseOffset(LedgerPostingType _postingTypePhysicalPurchaseOffset = postingTypePhysicalPurchaseOffset)
    {
        postingTypePhysicalPurchaseOffset = _postingTypePhysicalPurchaseOffset;

        return postingTypePhysicalPurchaseOffset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchJournalIndirectCost construct()
    {
        return new PurchJournalIndirectCost();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
