<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransitDocumentTransTaxInfoRuleDelegateHandler_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The transit document rule handler for trans tax information.
/// </summary>
class TransitDocumentTransTaxInfoRuleDelegateHandler_IN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initRulesForTransTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes transact document transaction rule list for transaction tax information.
    /// </summary>
    /// <param name = "_ruleList">A list contains all rule objects.</param>
    [SubscribesTo(classstr(TransitDocumentTransactionRuleHelper_IN), delegateStr(TransitDocumentTransactionRuleHelper_IN,initTransitDocumentTransactionRuleList))]
    public static void initRulesForTransTaxInformation(List _ruleList)
    {
        if (_ruleList)
        {
            //init rule: document type -> transaction type
            RefRecId      normalType;
            RefRecId      inventTransferFromType;
            RefRecId      inventTransferToType;

            // normal type
            normalType = TransitDocumentType_IN::findOrDefineType(
                tableNum(TransTaxInformation),
                fieldNum(TransTaxInformation, Type),
                TransTaxInformationType_IN::Normal).RecId;

            inventTransferFromType = TransitDocumentType_IN::findOrDefineType(
                tableNum(TransTaxInformation),
                fieldNum(TransTaxInformation, Type),
                TransTaxInformationType_IN::InventTransferFrom).RecId;

            inventTransferToType = TransitDocumentType_IN::findOrDefineType(
                tableNum(TransTaxInformation),
                fieldNum(TransTaxInformation, Type),
                TransTaxInformationType_IN::InventTransferTo).RecId;

            // Rule definitions for one-to-one relation
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(PurchLine), normalType));
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(VendInvoiceInfoLine), normalType));
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(LedgerJournalTrans), normalType));
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(LedgerJournalTrans_Project), normalType));
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(CustInvoiceLine), normalType));
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(CustInvoiceLineTemplate), normalType));
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(PurchReqLine), normalType));
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(PurchRFQLine), normalType));
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(SalesLine), normalType));
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(ProjTable), normalType));
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(ProdTable), normalType));
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(InventJournalTrans), normalType));
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(ProjJournalTrans), normalType));
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(ProjInvoiceTable), normalType));
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(BOMParmReportFinish), normalType));
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(SalesQuotationLine), normalType));
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(SMAServiceOrderLine), normalType));
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(ProdJournalBOM), normalType));
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(ProjEmplTrans), normalType));
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(ProjCostTrans), normalType));
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(ProjItemTrans), normalType));
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(ProjRevenueTrans), normalType));
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(ProjOnAccTrans), normalType));
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(TmpProjAdjustment), normalType));
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(TmpProjAdjustmentCreate), normalType));
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(TaxEngineTaxJournalLine), normalType));
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(MarkupTrans), normalType));
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(AgreementLine), normalType));
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(TSTimesheetLine), normalType));
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(ProjAdjustmentCreateInProcess), normalType));
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(ProjAdvancedJournalLine), normalType));
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(ProjAdvancedJournalLineTaxExtensionIN), normalType));

            // Rule definitions for one-to-many relation
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(InventTransferLine), inventTransferFromType));
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(InventTransferLine), inventTransferToType));

            // These rules are kept for return scenario
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(SalesParmLine), normalType));
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(CustInvoiceTrans), normalType));
            _ruleList.addEnd(TransitDocumentTransTaxInfoRuleDelegateHandler_IN::initializeRuleObject(tableNum(VendInvoiceTrans), normalType));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeRuleObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the transit document transaction rule object for transTaxInformation.
    /// </summary>
    /// <param name = "_tableId">The table id for the transaction.</param>
    /// <param name = "_transitDocumentTypeRecId">The record id of transitDocumentType.</param>
    /// <returns>The <c>TransitDocumentTransactionRuleObject_IN</c> object.</returns>
    private static TransitDocumentTransactionRuleObject_IN initializeRuleObject(RefTableId _tableId, RefRecId _transitDocumentTypeRecId)
    {
        return TransitDocumentTransactionRuleObject_IN::construct(
            _tableId,
            TransitDocumentType_IN::find(_transitDocumentTypeRecId),
            TransitDocumentTransitAction_IN::Copy,
            TransitDocumentTransitOption_IN::Replace);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTaxDocumentTransit_PreHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Pre-action before the copied transit document is inserted.
    /// </summary>
    /// <param name="_sourceTransitDocument">
    /// The source transit document.
    /// </param>
    /// <param name="_targetTransitDocument">
    /// The new transit document.
    /// </param>
    /// <param name = "_targetTransactionHeader">The record of the target transaction header table.</param>
    [SubscribesTo(classstr(TransitDocumentManager_IN), delegateStr(TransitDocumentManager_IN, copyTransitDocument_Pre))]
    public static void copyTaxDocumentTransit_PreHandler(Common _sourceTransitDocument, Common _targetTransitDocument, Common _targetTransactionHeader)
    {
        TransTaxInformation targetTaxInformation; 

        if (_sourceTransitDocument is TransTaxInformation && _targetTransitDocument is TransTaxInformation)
        {
            targetTaxInformation = _targetTransitDocument;
            if (_targetTransactionHeader)
            {
                targetTaxInformation.HeadingTableId = _targetTransactionHeader.TableId;
                targetTaxInformation.HeadingRecId = _targetTransactionHeader.RecId;
            }
            else
            {
                targetTaxInformation.HeadingTableId = 0;
                targetTaxInformation.HeadingRecId = 0;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTransationDocumentsByHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all transit documents that are associated with the transaction header.
    /// </summary>
    /// <param name = "_transHeader">The transaction header.</param>
    [SubscribesTo(classstr(TransitDocumentManager_IN), delegateStr(TransitDocumentManager_IN, deleteTransationDocumentsByHeader))]
    public static void deleteTransationDocumentsByHeader(Common _transHeader)
    {
        if (TaxIntegrationUtils::isTransitDocumentEnabled())
        {
            TransTaxInformation transTaxInformation;
            TransitDocumentTransTaxInfoRelation_IN  taxInfoRelation;

            delete_from transTaxInformation
                where transTaxInformation.HeadingTableId == _transHeader.TableId
                && transTaxInformation.HeadingRecId == _transHeader.RecId
                exists join taxInfoRelation
                    where taxInfoRelation.TransTaxInformationRecId == transTaxInformation.RecId
                    && taxInfoRelation.IsHistory == Noyes::No;

            delete_from taxInfoRelation
                where taxInfoRelation.HeadingTableId == _transHeader.TableId
                && taxInfoRelation.HeadingRecId == _transHeader.RecId
                && taxInfoRelation.IsHistory == Noyes::No;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>