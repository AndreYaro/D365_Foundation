<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendPaymFormatCtrl</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendPaymFormatCtrl extends CustVendPaymFormatCtrl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allAvailableFormats</Name>
				<Source><![CDATA[
    public container allAvailableFormats()
    {
        return VendPaymFormatCtrl::availableFormats();
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedFormats</Name>
				<Source><![CDATA[
    public container selectedFormats(BankFormat bankFormat)
    {
        return VendPaymFormat::selectedFormats(bankFormat);
    }

]]></Source>
			</Method>
			<Method>
				<Name>availableFormats</Name>
				<Source><![CDATA[
    public static container availableFormats()
    {
        #ISOCountryRegionCodes

        VendOutPaym vendOutPaym;
        VendPaymReconciliationImport vendPaymReconciliationImport;
        CustVendPaymFileAnalyze custVendPaymFileAnalyze;

        container exports;
        container imports;
        container returns;
        container remittances;
        container exportNames;
        container importNames;
        container returnNames;
        container remittanceNames;
        container fileAnalyzes;
        container fileAnalyzeNames;

        DictClass dictClass;
        List listVendOutPaym;
        List listVendPaymReconcile;
        List listVendOutPaymRemittance;
        List listVendFileAnalyze;
        ListEnumerator listEnumerator;
        boolean norwayEnabled = false;

        listVendOutPaym = new DictClass(classnum(VendOutPaym)).extendedBy();
        listVendPaymReconcile = new DictClass(classnum(VendPaymReconciliationImport)).extendedBy();
        listVendOutPaymRemittance = new DictClass(classnum(VendOutPaymRemittance)).extendedBy();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
        {
            norwayEnabled = true;
            listVendFileAnalyze = new DictClass(classnum(CustVendPaymFileAnalyze)).extendedBy();
        }

        // Exports
        listEnumerator = listVendOutPaym.getEnumerator();
        while (listEnumerator.moveNext())
        {
            dictClass = new DictClass(listEnumerator.current());

            if (dictClass
                && !SysDictClass::isSuperclass(dictClass.id(), classnum(VendOutPaymRemittance))
                && !dictClass.isAbstract())
            {
                vendOutPaym = dictClass.makeObject();

                if (vendOutPaym.interfaceName() && CustVendPaymFormatCtrl::checkConfigurationKey(vendOutPaym))
                {
                    exports += dictClass.id();
                    exportNames += vendOutPaym.interfaceName();
                }
            }
        }

        // Reconciliation
        listEnumerator = listVendPaymReconcile.getEnumerator();
        while (listEnumerator.moveNext())
        {
            dictClass = new DictClass(listEnumerator.current());

            if (dictClass && !dictClass.isAbstract())
            {
                vendPaymReconciliationImport = dictClass.makeObject();

                if (vendPaymReconciliationImport.interfaceName()
                    && ((norwayEnabled && CustVendPaymFormatCtrl::checkConfigurationKey(vendOutPaym))
                        || (!norwayEnabled && CustVendPaymFormatCtrl::checkConfigurationKey(vendPaymReconciliationImport))))

                {
                    returns += className2Id(vendPaymReconciliationImport.name());
                    returnNames += vendPaymReconciliationImport.interfaceName();
                }
            }
        }

        // Remittance
        listEnumerator = listVendOutPaymRemittance.getEnumerator();
        while (listEnumerator.moveNext())
        {
            dictClass = new DictClass(listEnumerator.current());

            if (dictClass && !dictClass.isAbstract())
            {
                vendOutPaym = dictClass.makeObject();

                if (vendOutPaym.interfaceName() && CustVendPaymFormatCtrl::checkConfigurationKey(vendOutPaym))
                {
                    remittances += dictClass.id();
                    remittanceNames += vendOutPaym.interfaceName();
                }
            }
        }

        // File analyze
        if (norwayEnabled)
        {
            listEnumerator = listVendFileAnalyze.getEnumerator();

            while (listEnumerator.moveNext())
            {
                dictClass = new DictClass(listEnumerator.current());

                if (dictClass && !dictClass.isAbstract())
                {
                    custVendPaymFileAnalyze = dictClass.makeObject();

                    if (custVendPaymFileAnalyze.interfaceName() && CustVendPaymFormatCtrl::checkConfigurationKey(vendOutPaym))
                    {
                        fileAnalyzes += dictClass.id();
                        fileAnalyzeNames += custVendPaymFileAnalyze.interfaceName();
                    }
                }
            }

            return [exports, exportNames, imports, importNames, returns, returnNames, remittances, remittanceNames, fileAnalyzes, fileAnalyzeNames];
        }

        return [exports, exportNames, imports, importNames, returns, returnNames, remittances, remittanceNames];
    }

]]></Source>
			</Method>
			<Method>
				<Name>availableSpecifications</Name>
				<Source><![CDATA[
    public static container availableSpecifications(ClassId vendOutPaymClassId)
    {
        return CustVendPaymFormatCtrl::availableSpecifications(vendOutPaymClassId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>