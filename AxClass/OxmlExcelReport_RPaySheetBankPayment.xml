<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OxmlExcelReport_RPaySheetBankPayment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// List for transferring to bank report.
/// </summary>
class OxmlExcelReport_RPaySheetBankPayment extends XMLExcelReport_RU implements BatchRetryable
{
    QueryRun reportQR;

    RHRMPersonBankAccount   personBankAccount;
    BankGroup               bankGroup;
    RPaySheetTrans          paySheetTrans;
    RHRMPersonTable         personTable;

    RPayAmount              bankAmountTotal;
    ReportPeriod_RU         startPeriod, endPeriod;

    BankGroupId             bankGroupId;

    Counter             pageNumber, emplNumber, lineNumberPerPage;
    date                reportDate;
    utcdatetime         reportTime;
    EmplName            directorName, chAccName;

    //sections
    #define.PageHeader("PageHeader")
    #define.BankHeadingSection("BankHeadingSection")
    #define.TableHeader("TableHeader")
    #define.TableBody("TableBody")
    #define.TotalSection("TotalSection")
    #define.SignatureSection("SignatureSection")
    #define.NewPage("NewPage") //pseudo section used to define new page action

    #define.MaxLinesPerPage(37)
    #define.WidthPage(97)

    #define.FileName('PaySheetBankPayment')

    #define.CompanyName('CompanyName')
    #define.PageNo('PageNo')
    #define.ReportDate('ReportDate')
    #define.ReportTime('ReportTime')

    #define.BankHeading('BankHeading')

    #define.EmplNumColName('EmplNumColName')
    #define.EmplNameColName('EmplNameColName')
    #define.BankAccColName('BankAccColName')
    #define.AmountColName('AmountColName')

    #define.EmplNo('EmplNo')
    #define.EmplName('EmplName')
    #define.BankAccount('BankAccount')
    #define.Amount('Amount')

    #define.TotalText('TotalText')
    #define.TotalBankAmount('TotalBankAmount')

    #define.DirectorText('DirectorText')
    #define.ChiefAccText('ChiefAccText')
    #define.DirectorName('DirectorName')
    #define.ChAccName('ChAccName')

    #define.StateStart  (0)
    #define.StatePrint  (1)
    #define.StateEnd    (2)



    int stateCurrent;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
        protected real calcRangeHeight(Bookmark _bookmark)
    {
        #define.minHeight(14.4)

        return #minHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
        protected void createReport()
    {
        boolean dataExists = false;
        this.initSectionMap();

        this.setCurrentWorksheetNum(1, #WidthPage);

        reportDate   = DateTimeUtil::date(DateTimeUtil::utcNow());
        reportTime   = DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::utcNow(), DateTimeUtil::getClientMachineTimeZone());
        directorName = OfficialsTable_RU::findDirector().getFIO();
        chAccName    = OfficialsTable_RU::findAccountant().getFIO();
        stateCurrent = #StateStart;

        while (reportQR.next())
        {
            dataExists = true;
            bankGroup           = reportQR.get(tableNum(BankGroup));
            personTable         = reportQR.get(tableNum(RHRMPersonTable));
            paySheetTrans       = reportQR.get(tableNum(RPaySheetTrans));
            personBankAccount   = reportQR.get(tableNum(RHRMPersonBankAccount));

            this.handleAction(this.defineActionSeq());
        }

        this.handleAction(this.defineActionSeq());

        if (!dataExists)
        {
            document.closeDocument(false);
            throw info("@GLS101555");
        }

        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defineActionSeq</Name>
				<Source><![CDATA[
        private container defineActionSeq()
    {
        container con;

        if (stateCurrent == #StateStart && bankGroup != null)
        {
            pageNumber = 1;
            emplNumber = 1;
            con = [#PageHeader, #BankHeadingSection, #TableHeader, #TableBody];

            stateCurrent = #StatePrint;
        }
        else if (stateCurrent == #StatePrint)
        {
            if (bankGroupId != bankGroup.BankGroupId && bankGroup != null)
            {
                pageNumber = 0;
                emplNumber = 1;
                con = [#TotalSection, #SignatureSection, #NewPage, #PageHeader, #BankHeadingSection, #TableHeader, #TableBody];
            }
            else if (this.isNewPage())
            {
                con = [#NewPage, #PageHeader, #BankHeadingSection, #TableHeader, #TableBody];
            }
            else if (bankGroup == null)
            {
                con = [#TotalSection, #SignatureSection];
                stateCurrent = #StateEnd;
            }
            else
            {
                con = [#TableBody];
            }
        }

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
        protected Filename fileName()
    {
        return #FileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
        protected Filename fileNamePostfix()
    {
        return '_' + curUserId() + '_' + strRem(DateTimeUtil::toStr(DateTimeUtil::utcNow()), ':');
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report body.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillBody()
    {
        this.insertValueToSection(#EmplNo, emplNumber);
        this.insertValueToSection(#EmplName, personTable.fio());
        this.insertValueToSection(#BankAccount, personBankAccount.AccountNum);
        this.insertValueToSection(#Amount, paySheetTrans.Amount);

        lineNumberPerPage++;
        emplNumber++;
        bankAmountTotal += paySheetTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
        protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #PageHeader:
                this.fillPageHeader();
                break;
            case #BankHeadingSection:
                this.fillReportHeader();
                break;
            case #TableHeader:
                this.fillTableHeader();
                break;
            case #TableBody:
                this.fillBody();
                break;
            case #TotalSection:
                this.fillTotal();
                break;
            case #SignatureSection:
                this.fillSignatures();
                break;
            case #NewPage:
                this.newPage();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report page header.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillPageHeader()
    {
        this.insertValueToSection(#CompanyName, CompanyInfo::find().Name);
        this.insertValueToSection(#PageNo, strFmt("@SYS24160", pageNumber));
        this.insertValueToSection(#ReportDate, reportDate);
        this.insertValueToSection(#ReportTime, reportTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report header.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillReportHeader()
    {
        TempStr txtStr;
        #define.LineBreak('\n')

        if (startPeriod == endPeriod)
        {
            txtStr = strFmt("@GLS106145",
                         #LineBreak,
                         mthName(mthOfYr(endPeriod)),
                         year(endPeriod),
                         #LineBreak,
                         bankGroup.Name);
        }
        else
        {
            txtStr = strFmt("@GLS111050",
                         #LineBreak,
                         RNumDateInWordConverter::construct().date2strMonth(startPeriod),
                         year(startPeriod),
                         mthName(mthOfYr(endPeriod)),
                         year(endPeriod),
                         #LineBreak,
                         bankGroup.Name);
        }

        this.insertValueToSection(#BankHeading, txtStr);

        bankGroupId = bankGroup.BankGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSignatures</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report signatures.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillSignatures()
    {
        this.insertValueToSection(#DirectorText, "@GLS100676");
        this.insertValueToSection(#ChiefAccText, "@GLS100677");
        this.insertValueToSection(#DirectorName, directorName);
        this.insertValueToSection(#ChAccName, chAccName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTableHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report table header with column names.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillTableHeader()
    {
        this.insertValueToSection(#EmplNumColName, "@GLS106147");
        this.insertValueToSection(#EmplNameColName, "@SYS54564");
        this.insertValueToSection(#BankAccColName, "@SYS68772");
        this.insertValueToSection(#AmountColName, "@GLS105334");
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report totals.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillTotal()
    {
        this.insertValueToSection(#TotalText, "@RUP1129");
        this.insertValueToSection(#TotalBankAmount, bankAmountTotal);
        bankAmountTotal = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleAction</Name>
				<Source><![CDATA[
        private void handleAction(container _actions)
    {
        int i;

        for (i = 1; i <= conLen(_actions); ++i)
        {
            if (conPeek(_actions, i) == #NewPage)
            {
                this.newPage();
            }
            else
            {
                this.execute(conPeek(_actions, i));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
        protected void initSectionMap()
    {
        this.addSection(#PageHeader);
        this.addSection(#BankHeadingSection);
        this.addSection(#TableHeader);
        this.addSection(#TableBody);
        this.addSection(#TotalSection);
        this.addSection(#SignatureSection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewPage</Name>
				<Source><![CDATA[
        private boolean isNewPage()
    {
        return lineNumberPerPage > #MaxLinesPerPage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPage</Name>
				<Source><![CDATA[
        private void newPage()
    {
        pageNumber++;
        lineNumberPerPage = 0;
        document.insertPageBreak(currentRow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndPeriod</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public ReportPeriod_RU parmEndPeriod(ReportPeriod_RU _endPeriod = endPeriod)
    {
        endPeriod = _endPeriod;

        return endPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartPeriod</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public ReportPeriod_RU parmStartPeriod(ReportPeriod_RU _startPeriod = startPeriod)
    {
        startPeriod = _startPeriod;

        return startPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets <c>QueryRun</c> objects to use.
    /// </summary>
    /// <param name="_qr">
    /// The <c>QueryRun</c>
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setQueryRun(QueryRun _qr)
    {
        reportQR = _qr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
        protected Filename templateName()
    {
        return resourceStr(RPaySheetBankPayment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
        protected Counter totalCells()
    {
        return SysQuery::countTotal(reportQR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>