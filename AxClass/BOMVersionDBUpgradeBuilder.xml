<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOMVersionDBUpgradeBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BOMVersionDBUpgradeBuilder</c> class is responsible for upgdating <c>BOMVersion</c> table with partitioned Sequence identification
/// in order to support corresponding entity export/import operations
/// </summary>
internal class BOMVersionDBUpgradeBuilder extends ApplicationSQLObjects
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runDataUpgrade</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the data upgrade.
    /// </summary>
    internal static void runDataUpgrade()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(BOM)))
        {
            BOMVersionDBUpgradeBuilder::construct().run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static BOMVersionDBUpgradeBuilder construct()
    {
        return new BOMVersionDBUpgradeBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    internal boolean run()
    {
        return this.createSqlObjects();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        this.initialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFunctions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a function to update <c>BOMVersion</c> sequence Id.
    /// </summary>
    /// <returns>true if the update was successful; otherwise, false.</returns>
    [Replaceable(true)]
    protected boolean createFunctions()
    {
        if (BOMVersionDBUpgradeBuilderState::hasDataUpgradeCompleted())
        {
            return true;
        }

        return this.partitionSequenceId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>partitionSequenceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>BOMVersion</c> table with SequenceId partitioned by PARTITION, DATAAREAID, BOMID, ITEMID
    /// </summary>
    /// <returns>
    /// true if the data upgrade was successful; otherwise, false.
    /// </returns>
    private boolean partitionSequenceId()
    {
        boolean isSuccessful = this.executeSqlStatementWithParameters(
            this.prepareSequenceIdSetDmlStatement(tableNum(BOMVersion),
                                                  fieldNum(BOMVersion, Partition),
                                                  fieldNum(BOMVersion, DataAreaId),
                                                  fieldNum(BOMVersion, BOMId),
                                                  fieldNum(BOMVersion, ItemId),
                                                  fieldNum(BOMVersion, SequenceId),
                                                  fieldNum(BOMVersion, RecId)),
            SqlParams::create());

        if (isSuccessful)
        {
            BOMVersionDBUpgradeBuilderState::markDataUpgradeComplete();
        }
        return isSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareSequenceIdSetDmlStatement</Name>
				<Source><![CDATA[
    private SysSQLStatementText prepareSequenceIdSetDmlStatement(TableId _tableId,
                                                                 FieldId _partitionFieldId,
                                                                 FieldId _dataAreaIdFieldId,
                                                                 FieldId _bomIdFieldId,
                                                                 FieldId _itemIdFieldId,
                                                                 FieldId _sequenceIdFieldId,
                                                                 FieldId _recordIdFieldId)
    {
        /* UPDATE t1
           SET t1.SEQUENCEID = t1.SeqID
           FROM
                (SELECT SEQUENCEID, ROW_NUMBER() OVER
                    (PARTITION BY PARTITION, DATAAREAID, BOMID, ITEMID ORDER BY RECID) as SeqID
                    FROM dbo.BOMVERSION) t1 */

        return strFmt(@"UPDATE t1
                        SET t1.%6 = t1.SeqID 
                        FROM
                            (SELECT %6, ROW_NUMBER() OVER
                                (PARTITION BY %2, %3, %4, %5 ORDER BY %7) as SeqID
                                FROM %1) t1",
                        ReleaseUpdateDB::backendTableName(_tableId),
                        ReleaseUpdateDB::backendFieldName(_tableId, _partitionFieldId),
                        ReleaseUpdateDB::backendFieldName(_tableId, _dataAreaIdFieldId),
                        ReleaseUpdateDB::backendFieldName(_tableId, _bomIdFieldId),
                        ReleaseUpdateDB::backendFieldName(_tableId, _itemIdFieldId),
                        ReleaseUpdateDB::backendFieldName(_tableId, _sequenceIdFieldId),
                        ReleaseUpdateDB::backendFieldName(_tableId, _recordIdFieldId));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>