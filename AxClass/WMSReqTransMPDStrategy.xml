<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>wmsReqTransMPDStrategy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WMSReqTransMPDStrategy</c> class implements the strategy pattern for the
/// <c>WMSReqTransMovementsPerDayDP</c> class.
/// </summary>
abstract class wmsReqTransMPDStrategy
{
    WMSReqTransMovementsPerDayContract  localContract;
    boolean                             showBacklog;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds query used by the <c>WMSReqTransMovementsPerDayDP</c> class to find data.
    /// </summary>
    /// <returns>
    /// The query object.
    /// </returns>
    public Query buildQuery()
    {
        QueryBuildDataSource                dsReqTrans;
        QueryBuildDataSource                dsInventDim;
        QueryBuildRange                     qbdr;
        Query                               query = new Query();

        dsReqTrans = query.addDataSource(tableNum(ReqTrans));

        // exclude the reqTrans records that don't contribute to receipts/issues
        dsReqTrans.addRange(fieldNum(ReqTrans, RefType)).value(
            strFmt('((%1.%2 != %3) && (%1.%2 != %4))',
                dsReqTrans.name(),
                fieldStr(ReqTrans, RefType),
                enum2int(ReqRefType::InventOnHand),
                enum2int(ReqRefType::SafetyInvent)));

        qbdr = dsReqTrans.addRange(fieldNum(ReqTrans, ReqDate));
        if (showBacklog)
        {
            // for backlog we need all data until today
            qbdr.value(queryRange(dateNull(), localContract.parmDate()));
        }
        else
        {
            // otherwise just today's data
            qbdr.value(queryValue(localContract.parmDate()));
        }

        dsReqTrans.addOrderByField(fieldNum(ReqTrans, ReqDate), SortOrder::Ascending);
        dsReqTrans.addOrderByField(fieldNum(ReqTrans, Qty), SortOrder::Descending);

        dsInventDim = dsReqTrans.addDataSource(tableNum(InventDim));
        dsInventDim.joinMode(JoinMode::InnerJoin);
        dsInventDim.fetchMode(QueryFetchMode::One2One);
        dsInventDim.relations(true);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canProcessReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the report should be processed.
    /// </summary>
    /// <returns>
    /// true if report should be processed.
    /// </returns>
    public boolean canProcessReport()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs object initialization.
    /// </summary>
    public void initialize()
    {
        if (!localContract)
        {
            throw error(Error::missingParameter(this));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>WMSMovementsPerDayContract</c> used by this object.
    /// </summary>
    /// <param name="_contract">
    /// <c>WMSMovementsPerDayContract</c> to use.
    /// </param>
    /// <returns>
    /// Currently used <c>WMSMovementsPerDayContract</c>.
    /// </returns>
    public WMSReqTransMovementsPerDayContract parmContract(WMSReqTransMovementsPerDayContract _contract = localContract)
    {
        localContract = _contract;

        return localContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowBacklog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets whether backlog records should be included in result.
    /// </summary>
    /// <param name="_showBacklog">
    /// Boolean whether to include backlog.
    /// </param>
    /// <returns>
    /// True if backlog items should be included.
    /// </returns>
    public boolean parmShowBacklog(boolean _showBacklog = showBacklog)
    {
        showBacklog = _showBacklog;

        return showBacklog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates fields of the <c>WMSMovementsPerDayTmp</c> table.
    /// </summary>
    /// <param name="_wmsMovementsPerDayTmp">
    /// The <c>WMSMovementsPerDayTmp</c> table to populate.
    /// </param>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> table to use as reference.
    /// </param>
    /// <returns>
    /// true if succeeded; otherwise, false.
    /// </returns>
    public abstract boolean populateFields(WMSMovementsPerDayTmp    _wmsMovementsPerDayTmp,
                                           InventTable              _inventTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructSpaceUtil</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs space utilization specific instance.
    /// </summary>
    /// <returns>
    /// An instance of the class.
    /// </returns>
    public static WMSReqTransMPDStrategy constructSpaceUtil()
    {
        return new WMSReqTransMPDStrategy_SpaceUtil();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructWorkload</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs workload utilization specific instance.
    /// </summary>
    /// <returns>
    /// An instance of the class.
    /// </returns>
    public static WMSReqTransMPDStrategy constructWorkload()
    {
        return new WMSReqTransMPDStrategy_Workload();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>