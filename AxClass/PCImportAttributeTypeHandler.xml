<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCImportAttributeTypeHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PCImportAttributeTypeHandler extends PCImportModelNodeHandler
{
    EcoResAttributeType         attributeType;
    Map                         deletedTextValuesReferencedByTableConstraintCells;
    RefRecId                    deletedRecId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>importData</Name>
				<Source><![CDATA[
    protected void importData()
    {
        PCImportXmlDocumentHandler                         root   = this.root();

        deletedTextValuesReferencedByTableConstraintCells   = new Map(Types::String, Types::Int64);

        this.copyField(fieldStr(EcoResAttributeType, Name));
        this.copyIntField(fieldStr(EcoResAttributeType, DataType));
        this.copyIntField(fieldStr(EcoResAttributeType, IsEnumeration));

        this.prepareForAttributeTypeImport();

        attributeType.insert();

        root.importedAttributeTypes().insert(attributeType.Name, attributeType.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the record to the old attribute with the same name, replacing them with references to the new one.
    /// Deletes the old record and all enumeration values referencing it.
    /// </summary>
    protected void postProcess()
    {
        EcoResAttribute                             attribute;
        EcoResEnumerationAttributeTypeValue         enumerationAttributeTypeValue;
        PCTableConstraintColumnDefinition           tableConstraintColumn;
        EcoResAttributeType                         localAttributeType;
        MapEnumerator                               me;
        EcoResTextValue                             textValue;
        EcoResTextValue                             oldTextValue;
        PCTableConstraintCell                       cell;
        RefRecId                                    oldValueRecId;
        PCSolverTextValue                           solverTextValue;
        EcoResIntValue                              intValue;

        update_recordset attribute
            setting AttributeType = attributeType.RecId
            where attribute.AttributeType == deletedRecId;

        update_recordset tableConstraintColumn
            setting AttributeType = attributeType.RecId
            where tableConstraintColumn.AttributeType == deletedRecId;

        me = deletedTextValuesReferencedByTableConstraintCells.getEnumerator();
        while (me.moveNext())
        {
            oldValueRecId = me.currentValue();

            // Find new text value if it exists
            select firstonly RecId from textValue
                exists join enumerationAttributeTypeValue
                    where enumerationAttributeTypeValue.AttributeType == attributeType.RecId
                       && enumerationAttributeTypeValue.Value         == textValue.RecId
                exists join solverTextValue
                    where solverTextValue.TextValue == textValue.RecId
                       && solverTextValue.Value     == me.currentKey()
                exists join oldTextValue
                    where oldTextValue.TextValue == textValue.TextValue
                       && oldTextValue.RecId     == oldValueRecId;

            if (textValue.RecId)
            {
                update_recordset cell
                    setting Value = textValue.RecId
                    where cell.Value == oldValueRecId;
            }

            // Find new int value if it exists
            select firstonly RecId from intValue
                exists join enumerationAttributeTypeValue
                    where enumerationAttributeTypeValue.AttributeType == attributeType.RecId
                        && enumerationAttributeTypeValue.Value         == intValue.RecId;

            if (intValue.RecId)
            {
                update_recordset cell
                    setting Value = intValue.RecId
                    where cell.Value == oldValueRecId;
            }
        }

        delete_from localAttributeType
            where localAttributeType.RecId == deletedRecId;

        delete_from enumerationAttributeTypeValue
            where enumerationAttributeTypeValue.AttributeType == deletedRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareForAttributeTypeImport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the old attribute type with the same name, collects the references to it and
    /// then renames the old record.
    /// </summary>
    private void prepareForAttributeTypeImport()
    {
        EcoResAttributeType                 localAttributeType;
        PCTableConstraintCell               cell;
        PCTableConstraintColumnDefinition   columnDefinition;
        PCSolverTextValue                   solverTextValue;

        select forupdate firstonly localAttributeType
            where localAttributeType.Name == attributeType.Name;

        deletedRecId = localAttributeType.RecId;

        if (localAttributeType.IsEnumeration)
        {
            while select solverTextValue
                exists join cell
                    where cell.Value == solverTextValue.TextValue
                exists join columnDefinition
                    where columnDefinition.RecId == cell.TableConstraintColumnDefinition
                       && columnDefinition.AttributeType == deletedRecId
            {
                deletedTextValuesReferencedByTableConstraintCells.insert(solverTextValue.Value, solverTextValue.TextValue);
            }
        }

        // Rename attribute type to allow import of new one. It will be deleted afterwards.
        if (localAttributeType.RecId)
        {
            localAttributeType.Name = guid2str(newGuid());
            localAttributeType.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>record</Name>
				<Source><![CDATA[
    public Common record(boolean _suppressValidation = false)
    {
        return attributeType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCImportAttributeTypeHandler construct()
    {
        return new PCImportAttributeTypeHandler();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>