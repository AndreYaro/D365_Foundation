<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EGAISWaybillActCreate_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>EGAISWaybillActCreate_RU</c> class is used to create EGAIS waybill acts.
/// </summary>
public class EGAISWaybillActCreate_RU extends RunBase
{
    EGAISWaybillAcceptStatus_RU acceptStatus;
    EGAISWaybillActNum_RU       actNum;
    EGAISWaybillActDate_RU      actDate;
    EGAISWaybillActNote_RU      note;

    DialogField                 fieldAcceptStatus;
    DialogField                 fieldActNum;
    DialogField                 fieldActDate;
    DialogField                 fieldNote;

    EGAISWaybillJour_RU         waybillJour;
    EGAISWaybillActJour_RU      waybillActJour;
    RefRecId                    waybillJourRecId;

    EGAISIdentityBuilder_RU     identityBuilder;

    protected const int CurrentVersion = 1;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSaveLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if the last user choices can be saved and restored.
    /// </summary>
    /// <returns>
    /// true, if the last user choices can be saved and restored; false, otherwise
    /// </returns>
    protected boolean canSaveLast()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWaybillActJour</Name>
				<Source><![CDATA[
    private void createWaybillActJour()
    {
        waybillActJour.clear();
        waybillActJour.WaybillAcceptStatus  = acceptStatus;
        waybillActJour.ActNum               = actNum;
        waybillActJour.ActDate              = actDate;
        waybillActJour.Identity             = identityBuilder.getNext();
        waybillActJour.Note                 = note;
        waybillActJour.WaybillRegId         = waybillJour.RegId;
        waybillActJour.WaybillJour          = waybillJour.RecId;
        waybillActJour.Version              = waybillJour.Version;
        waybillActJour.StatusIssue          = EGAISWaybillActStatusIssue_RU::Created;
        waybillActJour.Direction            = EGAISDocumentDirection_RU::Outgoing;
        waybillActJour.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWaybillActLines</Name>
				<Source><![CDATA[
    private void createWaybillActLines()
    {
        EGAISWaybillLine_RU         waybillLine;
        EGAISWaybillActLine_RU      waybillActLine;
        EGAISInformB_RU             informB;
        EGAISWaybillSettlement_RU   settlement;

        if (acceptStatus == EGAISWaybillAcceptStatus_RU::Rejected
            || (   waybillActJour.Version == EGAISDocumentVersion_RU::Version2
                && acceptStatus == EGAISWaybillAcceptStatus_RU::Accepted))
        {
            return;
        }

        while select Identity, Qty, InformB from waybillLine
            where waybillLine.waybillJour == waybillJour.RecId
        join RegIdNew from informB
            where informB.RecId == waybillLine.InformB
        {
            select sum(Qty) from settlement
                where settlement.WaybillLine == waybillLine.RecId;

            if ((waybillActJour.Version == EGAISDocumentVersion_RU::Version1 && settlement.Qty < waybillLine.Qty)    // for the version 1 act should include only lines with difference
                || (waybillActJour.Version == EGAISDocumentVersion_RU::Version2))                                       // for the version 2 act should include all lines
            {
                waybillActLine.clear();
                waybillActLine.WaybillActJour   = waybillActJour.RecId;
                waybillActLine.Identity         = waybillLine.Identity;
                waybillActLine.RealQty          = settlement.Qty;
                waybillActLine.InformBRegId     = informB.RegIdNew;
                waybillActLine.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog                      dialog = super();
        EGAISWaybillJour_RU         waybillJourLoc = EGAISWaybillJour_RU::findRecId(waybillJourRecId);
        EGAISWaybillLine_RU         waybillLine;
        EGAISWaybillSettlement_RU   settlement;

        fieldAcceptStatus   = dialog.addField(enumStr(EGAISWaybillAcceptStatus_RU));
        fieldAcceptStatus.enabled(false);

        if (waybillJourLoc.Direction == EGAISDocumentDirection_RU::Outgoing)
        {
            fieldAcceptStatus.value(EGAISWaybillAcceptStatus_RU::Rejected);
        }
        else
        {
            select firstOnly RecId from waybillLine
                where waybillLine.WaybillJour == waybillJourLoc.RecId
            exists join settlement
                where settlement.WaybillLine == waybillLine.RecId;

            if (waybillLine.RecId)
            {
                switch (waybillJourLoc.Version)
                {
                    case EGAISDocumentVersion_RU::Version1:
                        fieldAcceptStatus.value(EGAISWaybillAcceptStatus_RU::Accepted);
                        break;

                    case EGAISDocumentVersion_RU::Version2:
                        if (waybillJourLoc.isFullySettled())
                            fieldAcceptStatus.value(EGAISWaybillAcceptStatus_RU::Accepted);
                        else
                            fieldAcceptStatus.value(EGAISWaybillAcceptStatus_RU::Differences);
                        break;

                    default:
                        throw error(strfmt("@EGAIS:EgaisDocumentTypeVersionIsNotSupported", EGAISDocumentType_RU::WayBillAct, waybillJourLoc.Version));
                }
            }
            else
            {
                fieldAcceptStatus.value(EGAISWaybillAcceptStatus_RU::Rejected);
            }
        }

        fieldActNum     = dialog.addField(extendedtypestr(EGAISWaybillActNum_RU));
        fieldActDate    = dialog.addFieldValue(extendedtypestr(EGAISWaybillActDate_RU), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        fieldNote       = dialog.addField(extendedtypestr(EGAISWaybillActNote_RU));

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        acceptStatus    = fieldAcceptStatus.value();
        actNum          = fieldActNum.value();
        actDate         = fieldActDate.value();
        note            = fieldNote.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the last choice that is stored in the last value table.
    /// </summary>
    /// <remarks>
    ///    If no record can be found or the <c>unpack</c> method returns false, <c>initParmDefault</c> method
    ///    will be called. Normally, this method should not be overridden.
    /// </remarks>
    public void getLast()
    {
        if (this.canSaveLast())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    private void initParameters()
    {
        waybillJour     = EGAISWaybillJour_RU::findRecId(waybillJourRecId);
        identityBuilder = new EGAISIdentityBuilder_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, waybillJourRecId, acceptStatus, actNum, actDate, note];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaybillJourRecId</Name>
				<Source><![CDATA[
    public RefRecId parmWaybillJourRecId(RefRecId _waybillJourRecId = waybillJourRecId)
    {
        waybillJourRecId = _waybillJourRecId;

        return waybillJourRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        SysInfoAction_MenuFunction  sysInfoAction;

        setPrefix(EGAISWaybillActCreate_RU::description());

        if (!this.validate())
        {
            throw error("@SYS18447");
        }

        try
        {
            ttsBegin;

            this.initParameters();
            this.createWaybillActJour();
            this.createWaybillActLines();

            ttsCommit;

            sysInfoAction = SysInfoAction_MenuFunction::newMenuItem(menuitemDisplayStr(EGAISWaybillActJourOutgoing_RU), MenuItemType::Display);
            sysInfoAction.parmCallerBuffer(waybillActJour);

            info(strFmt("@EGAIS:EgaisDisagreementStatementNumberDateHasBeenCreated", actNum, actDate), '', sysInfoAction);

        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the last choice by using the <c>pack</c> method.
    /// </summary>
    /// <remarks>
    ///    This method should not normally be overridden.
    /// </remarks>
    public void saveLast()
    {
        if (this.canSaveLast())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conPeek(_packedClass, 1);

        switch (version)
        {
            case CurrentVersion:
                [version, waybillJourRecId, acceptStatus, actNum, actDate, note] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean                 ret = super(_calledFrom);
        EGAISWaybillJour_RU     waybillJourLoc;

        if (!actNum)
        {
            ret = checkFailed(strFmt("@SYS84753", "@EGAIS:StatementNumber"));
        }

        if (!actDate)
        {
            ret = checkFailed(strFmt("@SYS84753", "@EGAIS:StatementDate"));
        }

        if (acceptStatus == EGAISWaybillAcceptStatus_RU::None)
        {
            ret = checkFailed(strFmt("@SYS84753", "@EGAIS:AcceptanceStatus"));
        }

        waybillJourLoc = EGAISWaybillJour_RU::findRecId(waybillJourRecId);

        if (!waybillJourLoc.canWaybillActBeCreated())
        {
            ret = checkFailed(strFmt("@EGAIS:EgaisDisagreementStatementCannotBeCreatedForTheEga", waybillJourLoc.WaybillNum, waybillJourLoc.WaybillDate));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static EGAISWaybillActCreate_RU construct()
    {
        return new EGAISWaybillActCreate_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the description of the class.
    /// </summary>
    /// <returns>
    ///    The description of the class.
    /// </returns>
     static public ClassDescription description()
    {
        return "@EGAIS:CreateEgaisDisagreementStatement";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        EGAISWaybillActCreate_RU    runClass;
        FormDataSource              formDataSource;

        if (!_args || _args.dataset() != tableNum(EGAISWaybillJour_RU))
        {
            throw error(strFmt("@SYS25516", EGAISWaybillActCreate_RU::description()));
        }

        runClass = EGAISWaybillActCreate_RU::newFromWaybillJour(_args.record());

        if (runClass.prompt())
        {
            runClass.runOperation();

            if (_args && _args.record() && _args.record().isFormDataSource())
            {
                formDataSource = _args.record().dataSource();

                if (formDataSource)
                {
                    formDataSource.research(true);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWaybillJour</Name>
				<Source><![CDATA[
    public static EGAISWaybillActCreate_RU newFromWaybillJour(EGAISWaybillJour_RU _waybillJour)
    {
        EGAISWaybillActCreate_RU  runClass = EGAISWaybillActCreate_RU::construct();

        runClass.parmWaybillJourRecId(_waybillJour.RecId);

        return runClass;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>