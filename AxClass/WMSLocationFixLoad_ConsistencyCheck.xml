<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsLocationFixLoad_ConsistencyCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WMSLocationFixLoad_ConsistencyCheck</c> class provides the algorithm variation to update the
/// location load information adjusted to the consistency check logic.
/// </summary>
public class WmsLocationFixLoad_ConsistencyCheck extends WMSLocationFixLoad
{
    Counter                         numberOfCorrectionsToMake;
    WMSConsistencyCheck_Location    wmsConsistencyCheck;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canTrackPhysicalLoad</Name>
				<Source><![CDATA[
    protected boolean canTrackPhysicalLoad()
    {
        return this.getWMSLocationBuffer(true).trackPhysicalLoad();
    }

]]></Source>
			</Method>
			<Method>
				<Name>logInconsistencies</Name>
				<Source><![CDATA[
    protected void logInconsistencies()
    {
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        WMSLocation             wmsLocation                 = this.getWMSLocationBuffer(true);
        WMSVolume               freeVolumeCalculated        = wmsLocation.freeVolumeFromQuantity(totalCurrentVolumeCalculated);
        WMSWeight               freeWeightCalculated        = wmsLocation.freeWeightFromQuantity(totalCurrentWeightCalculated);

        query                   = new Query();
        queryBuildDataSource    = query.addDataSource(tableNum(WMSLocation));
        queryBuildRange         = queryBuildDataSource.addRange(fieldNum(WMSLocation, wmsLocationId));
        queryBuildRange.value(queryValue(wmsLocationId));
        queryBuildRange         = queryBuildDataSource.addRange(fieldNum(WMSLocation, InventLocationId));
        queryBuildRange.value(queryValue(inventLocationId));

        if (correctionCurrentWeight != 0)
        {
            checkFailed(strFmt("@SYS323962", wmsLocationLoadSummed.CurrentWeightAdjusted, totalCurrentWeightCalculated),
                    '', SysInfoAction_FormrunQuery::newFormnameControlnameQuery(formStr(WMSLocation), identifierStr(MaxWeight), query));

            numberOfCorrectionsToMake++;
        }

        if (correctionCurrentVolume != 0)
        {
            checkFailed(strFmt("@SYS323964", wmsLocationLoadSummed.CurrentVolumeAdjusted, totalCurrentVolumeCalculated),
                    '', SysInfoAction_FormrunQuery::newFormnameControlnameQuery(formStr(WMSLocation), identifierStr(MaxVolume), query));

            numberOfCorrectionsToMake++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustPostCorrections</Name>
				<Source><![CDATA[
    protected boolean mustPostCorrections()
    {
        if (wmsConsistencyCheck.checkFix() == CheckFix::Fix && numberOfCorrectionsToMake)
        {
            wmsConsistencyCheck.updateCorrected( numberOfCorrectionsToMake );
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWmsConsistencyCheck</Name>
				<Source><![CDATA[
    public WMSConsistencyCheck_Location parmWmsConsistencyCheck(WMSConsistencyCheck_Location _wmsConsistencyCheck = wmsConsistencyCheck)
    {
        wmsConsistencyCheck = _wmsConsistencyCheck;

        return wmsConsistencyCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WMSLocationFixLoad_ConsistencyCheck construct()
    {
        return new WMSLocationFixLoad_ConsistencyCheck();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>