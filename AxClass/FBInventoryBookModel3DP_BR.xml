<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBInventoryBookModel3DP_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FBInventoryBookModel3DP_BR</c> class is the Report Data Provider class for the
/// FBInventoryBookModel3_BR SSRS report.
/// </summary>
[SRSReportParameterAttribute(classStr(FBHeaderContract_BR))]
public class FBInventoryBookModel3DP_BR extends SRSReportDataProviderBase
{
    TmpFBInventoryBookModel3_BR tmpFBInventoryBookModel3;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query to retrieve data filtered by contract parameters
    /// </summary>
    /// <returns>
    /// The query return to retrieve report data.
    /// </returns>
    protected Query buildQuery()
    {
        Query                   query;
        QueryBuildDataSource    qbds;
        FBHeaderContract_BR     contract = this.parmDataContract() as FBHeaderContract_BR;

        query = new Query();

        qbds = query.addDataSource(tableNum(FBBookingPeriodFiscalDocument_BR));
        qbds.addRange(fieldNum(FBBookingPeriodFiscalDocument_BR, FBBookingPeriod_BR)).value(SysQuery::value(contract.parmFBBookingPeriodRecId()));

        qbds = qbds.addDataSource(tableNum(FiscalDocument_BR));
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.addLink(fieldNum(FBBookingPeriodFiscalDocument_BR, FiscalDocument_BR), fieldNum(FiscalDocument_BR, RecId));
        qbds.addSelectionField(fieldNum(FiscalDocument_BR, Specie));
        qbds.addSelectionField(fieldNum(FiscalDocument_BR, FiscalDocumentSeries));
        qbds.addSelectionField(fieldNum(FiscalDocument_BR, FiscalDocumentNumber));
        qbds.addSelectionField(fieldNum(FiscalDocument_BR, FiscalDocumentDate));
        qbds.addSelectionField(fieldNum(FiscalDocument_BR, Direction));
        qbds.addSelectionField(fieldNum(FiscalDocument_BR, ComplementedFiscalDocument));
        qbds.addRange(fieldNum(FiscalDocument_BR, RefTableId)).value(SysQuery::valueNot(tableNum(TaxFiscalDocument_BR)));

        qbds = qbds.addDataSource(tableNum(FiscalDocumentLine_BR));
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.relations(true);
        qbds.addSelectionField(fieldNum(FiscalDocumentLine_BR, CFOP));
        qbds.addSelectionField(fieldNum(FiscalDocumentLine_BR, Quantity));
        qbds.addSelectionField(FieldNum(FiscalDocumentLine_BR, AccountingAmount));
        // The report must not include any type of transactions related with fixed asset
        qbds.addRange(fieldNum(FiscalDocumentLine_BR, AssetId)).value(SysQuery::valueEmptyString());

        qbds = qbds.addDataSource(tableNum(InventTable));
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.addLink(fieldNum(FiscalDocumentLine_BR, ItemId), fieldNum(InventTable, ItemId));
        qbds.addSelectionField(fieldNum(InventTable, ItemId));
        qbds.addSelectionField(fieldNum(InventTable, TaxFiscalClassification_BR));

        qbds = qbds.addDataSource(tableNum(EcoResProductTranslation));
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.joinMode(JoinMode::OuterJoin);
        qbds.addLink(fieldNum(InventTable, Product), fieldNum(EcoResProductTranslation, Product));
        qbds.addRange(fieldNum(EcoResProductTranslation, LanguageId)).value(SysQuery::value('PT-BR'));
        qbds.addSelectionField(fieldNum(EcoResProductTranslation, Name));

        // Free text invoice transactions must not be included in this report, since they are not generating inventory movement
        qbds = query.dataSourceTable(tableNum(FiscalDocument_BR)).addDataSource(tableNum(CustInvoiceJour));
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.joinMode(JoinMode::NoExistsJoin);
        qbds.addLink(fieldNum(FiscalDocument_BR, RefTableId), fieldNum(CustInvoiceJour, TableId));
        qbds.addLink(fieldNum(FiscalDocument_BR, RefRecId), fieldNum(CustInvoiceJour, RecId));
        qbds.addRange(fieldNum(CustInvoiceJour, RefNum)).value(SysQuery::value(RefNum::Cust));

        // The report must not include fiscal document lines that don't generate inventory movement
        qbds = query.dataSourceTable(tableNum(FiscalDocumentLine_BR)).addDataSource(tableNum(InventTransOrigin));
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.addLink(fieldNum(FiscalDocumentLine_BR, InventTransId), fieldNum(InventTransOrigin, InventTransId));
        qbds.addSelectionField(fieldNum(InventTransOrigin, InventTransId));

        qbds = qbds.addDataSource(tableNum(InventTrans));
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.addLink(fieldNum(InventTransOrigin, RecId), fieldNum(InventTrans, InventTransOrigin));

        query.dataSourceTable(tableNum(FiscalDocumentLine_BR)).addOrderByField(fieldNum(FiscalDocumentLine_BR, ItemId));
        query.dataSourceTable(tableNum(InventTransOrigin)).addOrderByField(fieldNum(InventTransOrigin, InventTransId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryRetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query to retrieve data filtered by contract parameters
    /// </summary>
    /// <returns>
    /// The query return to retrieve report data.
    /// </returns>
    protected Query buildQueryRetail()
    {
        Query                   query;
        QueryBuildDataSource    qbds;
        FBHeaderContract_BR     contract = this.parmDataContract() as FBHeaderContract_BR;

        query = new Query();

        // FBBookingPeriodFiscalDocument
        qbds = query.addDataSource(tableNum(FBBookingPeriodFiscalDocument_BR));
        qbds.addRange(fieldNum(FBBookingPeriodFiscalDocument_BR, FBBookingPeriod_BR)).value(SysQuery::value(contract.parmFBBookingPeriodRecId()));

        // RetailZReport_BR
        qbds = qbds.addDataSource(tableNum(RetailZReport_BR));
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.relations(true);

        // RetailFiscalReceipt_BR
        qbds = qbds.addDataSource(tableNum(RetailFiscalReceipt_BR));
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.relations(true);
        qbds.addRange(fieldNum(RetailFiscalReceipt_BR, Status)).value(SysQuery::value(FiscalDocumentStatus_BR::Approved));
        qbds.addSelectionField(fieldNum(RetailFiscalReceipt_BR, FiscalReceiptNumber));
        qbds.addSelectionField(fieldNum(RetailFiscalReceipt_BR, FiscalReceiptDateTime));

        // RetailFiscalReceiptLine_BR
        qbds = qbds.addDataSource(tableNum(RetailFiscalReceiptLine_BR));
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.relations(true);
        qbds.addRange(fieldNum(RetailFiscalReceiptLine_BR, CancelledQuantity)).value(SysQuery::value(0));
        qbds.addSelectionField(fieldNum(RetailFiscalReceiptLine_BR, CFOP));
        qbds.addSelectionField(fieldNum(RetailFiscalReceiptLine_BR, Quantity));
        qbds.addSelectionField(fieldNum(RetailFiscalReceiptLine_BR, LineAmount));
        qbds.addSelectionField(fieldNum(RetailFiscalReceiptLine_BR, LineDiscountAmount));
        qbds.addOrderByField(fieldNum(RetailFiscalReceiptLine_BR, ItemId));

        // InventTable
        qbds = qbds.addDataSource(tableNum(InventTable));
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.relations(true);
        qbds.addSelectionField(fieldNum(InventTable, ItemId));
        qbds.addSelectionField(fieldNum(InventTable, TaxFiscalClassification_BR));

        // EcoResProductTranslation
        qbds = qbds.addDataSource(tableNum(EcoResProductTranslation));
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.joinMode(JoinMode::OuterJoin);
        qbds.addLink(fieldNum(InventTable, Product), fieldNum(EcoResProductTranslation, Product));
        qbds.addRange(fieldNum(EcoResProductTranslation, LanguageId)).value(SysQuery::value('PT-BR'));
        qbds.addSelectionField(fieldNum(EcoResProductTranslation, Name));

        // RetailTransactionTable
        qbds = query.dataSourceTable(tableNum(RetailFiscalReceipt_BR)).addDataSource(tableNum(RetailTransactionTable));
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.addLink(fieldNum(RetailFiscalReceipt_BR, StoreId), fieldNum(RetailTransactionTable, Store));
        qbds.addLink(fieldNum(RetailFiscalReceipt_BR, TerminalId), fieldNum(RetailTransactionTable, Terminal));
        qbds.addLink(fieldNum(RetailFiscalReceipt_BR, TransactionId), fieldNum(RetailTransactionTable, TransactionId));

        // RetailTransactionSalesTrans
        qbds = query.dataSourceTable(tableNum(RetailTransactionTable)).addDataSource(tableNum(RetailTransactionSalesTrans));
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.relations(true);

        // Join with InventTransOrigin
        qbds = query.dataSourceTable(tableNum(RetailTransactionSalesTrans)).addDataSource(tableNum(InventTransOrigin));
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.relations(true);
        qbds.addSelectionField(fieldNum(InventTransOrigin, InventTransId));
        qbds.addOrderByField(fieldNum(InventTransOrigin, InventTransId));

        query.dataSourceTable(tableNum(RetailFiscalReceiptLine_BR)).addOrderByField(fieldNum(RetailFiscalReceiptLine_BR, ItemId));
        query.dataSourceTable(tableNum(InventTransOrigin)).addOrderByField(fieldNum(InventTransOrigin, InventTransId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpFBInventoryBookModel3</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TmpFBInventoryBookModel3_BR</c> table.
    /// </summary>
    /// <returns>
    /// The <c>TmpFBInventoryBookModel3_BR</c>
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(TmpFBInventoryBookModel3_BR))]
    public TmpFBInventoryBookModel3_BR getTmpFBInventoryBookModel3()
    {
        select tmpFBInventoryBookModel3;
        return tmpFBInventoryBookModel3;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a register from Fiscal Document in the table <c>TmpFBInventoryBookModel3_BR</c>
    /// </summary>
    /// <param name="_iterator">
    /// An iterator pointing to the Fiscal Document to be inserted.
    /// </param>
    /// <param name="_counter">
    /// The value to be used in field Count from table <c>TmpFBInventoryBookModel3_BR</c>
    /// </param>
    protected void insertFiscalDocument(QueryRun _iterator, int _counter)
    {
        InventTable                 inventTable;
        EcoResProductTranslation    ecoResProductTranslation;
        FiscalDocument_BR           fiscalDocument;
        FiscalDocumentLine_BR       fiscalDocumentLine;

        inventTable                 = _iterator.get(tableNum(InventTable)) as InventTable;
        ecoResProductTranslation    = _iterator.get(tableNum(EcoResProductTranslation)) as EcoResProductTranslation;
        fiscalDocument              = _iterator.get(tableNum(FiscalDocument_BR)) as FiscalDocument_BR;
        fiscalDocumentLine          = _iterator.get(TableNum(FiscalDocumentLine_BR)) as FiscalDocumentLine_BR;

        if (!inventTable.modelGroup().StockedProduct)
        {
            return;
        }

        tmpFBInventoryBookModel3.clear();
        tmpFBInventoryBookModel3.Count                      = _counter;

        tmpFBInventoryBookModel3.ItemId                     = inventTable.ItemId;
        tmpFBInventoryBookModel3.NameAlias                  = ecoResProductTranslation.Name;
        tmpFBInventoryBookModel3.UnitId                     = inventTable.inventTableModuleInvent().UnitId;
        tmpFBInventoryBookModel3.TaxFiscalClassification    = inventTable.TaxFiscalClassification_BR;

        tmpFBInventoryBookModel3.Specie                 = fiscalDocument.Specie;
        tmpFBInventoryBookModel3.FiscalDocumentSeries   = fiscalDocument.FiscalDocumentSeries;
        tmpFBInventoryBookModel3.FiscalDocumentNumber   = fiscalDocument.FiscalDocumentNumber;
        tmpFBInventoryBookModel3.FiscalDocumentDate     = fiscalDocument.FiscalDocumentDate;
        tmpFBInventoryBookModel3.Direction              = fiscalDocument.Direction;
        tmpFBInventoryBookModel3.TextRelease            = fiscalDocument.Direction == FiscalDocDirection_BR::Incoming ? 'Ordem de compra' : 'Ordem de venda';

        tmpFBInventoryBookModel3.CFOP               = fiscalDocumentLine.CFOP;
        tmpFBInventoryBookModel3.Quantity           = fiscalDocument.ComplementedFiscalDocument ? 0 : fiscalDocumentLine.Quantity;
        tmpFBInventoryBookModel3.QuantityOther      = 0;
        tmpFBInventoryBookModel3.QuantityDiversity  = 0;
        tmpFBInventoryBookModel3.LineAmount         = fiscalDocumentLine.AccountingAmount;
        tmpFBInventoryBookModel3.TaxAmountIPI       = fiscalDocumentLine.getTaxAmount(TaxType_BR::IPI);

        this.insertTmpFBInventoryBookModel3();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFiscalReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a register from Fiscal Receipt in the table <c>TmpFBInventoryBookModel3_BR</c>
    /// </summary>
    /// <param name="_iterator">
    /// An iterator pointing to the Fiscal Receipt to be inserted.
    /// </param>
    /// <param name="_counter">
    /// The value to be used in field Count from table <c>TmpFBInventoryBookModel3_BR</c>
    /// </param>
    protected void insertFiscalReceipt(QueryRun _iterator, int _counter)
    {
        InventTable                 inventTable;
        EcoResProductTranslation    ecoResProductTranslation;
        RetailFiscalReceipt_BR      fiscalReceipt;
        RetailFiscalReceiptLine_BR  fiscalReceiptLine;

        inventTable                 = _iterator.get(tableNum(InventTable)) as InventTable;
        ecoResProductTranslation    = _iterator.get(tableNum(EcoResProductTranslation)) as EcoResProductTranslation;
        fiscalReceipt               = _iterator.get(tableNum(RetailFiscalReceipt_BR)) as RetailFiscalReceipt_BR;
        fiscalReceiptLine           = _iterator.get(tableNum(RetailFiscalReceiptLine_BR)) as RetailFiscalReceiptLine_BR;

        if (!inventTable.modelGroup().StockedProduct)
        {
            return;
        }

        tmpFBInventoryBookModel3.clear();
        tmpFBInventoryBookModel3.Count                      = _counter;

        tmpFBInventoryBookModel3.ItemId                     = inventTable.ItemId;
        tmpFBInventoryBookModel3.NameAlias                  = ecoResProductTranslation.Name;
        tmpFBInventoryBookModel3.UnitId                     = inventTable.inventTableModuleInvent().UnitId;
        tmpFBInventoryBookModel3.TaxFiscalClassification    = inventTable.TaxFiscalClassification_BR;

        tmpFBInventoryBookModel3.Specie                 = FiscalDocumentSpecie_BR::CF;
        tmpFBInventoryBookModel3.FiscalDocumentSeries   = '';
        tmpFBInventoryBookModel3.FiscalDocumentNumber   = int2str(fiscalReceipt.FiscalReceiptNumber);
        tmpFBInventoryBookModel3.FiscalDocumentDate     = DateTimeUtil::date(fiscalReceipt.FiscalReceiptDateTime);
        tmpFBInventoryBookModel3.Direction              = FiscalDocDirection_BR::Outgoing;
        tmpFBInventoryBookModel3.TextRelease            = 'Cupom fiscal';

        tmpFBInventoryBookModel3.CFOP               = fiscalReceiptLine.CFOP;
        tmpFBInventoryBookModel3.Quantity           = fiscalReceiptLine.Quantity;
        tmpFBInventoryBookModel3.QuantityOther      = 0;
        tmpFBInventoryBookModel3.QuantityDiversity  = 0;
        tmpFBInventoryBookModel3.LineAmount         = fiscalReceiptLine.LineAmount - fiscalReceiptLine.LineDiscountAmount;
        tmpFBInventoryBookModel3.TaxAmountIPI       = 0;

        this.insertTmpFBInventoryBookModel3();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpFBInventoryBookModel3</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a register in the table <c>TmpFBInventoryBookModel3_BR</c>
    /// </summary>
    private void insertTmpFBInventoryBookModel3()
    {
        tmpFBInventoryBookModel3.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIteratorValid</Name>
				<Source><![CDATA[
    private boolean isIteratorValid(QueryRun iterator)
    {
        InventTable inventTable;

        inventTable = iterator.get(tableNum(InventTable)) as InventTable;

        return inventTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>iteratorCmp</Name>
				<Source><![CDATA[
    private int iteratorCmp(QueryRun it1, QueryRun it2)
    {
        InventTable inventTable1;
        InventTable inventTable2;
        InventTransOrigin inventTransOrigin1;
        InventTransOrigin inventTransOrigin2;
        int cmp;

        inventTable1 = it1.get(tableNum(InventTable)) as InventTable;
        inventTable2 = it2.get(tableNum(InventTable)) as InventTable;

        cmp = strCmp(inventTable1.ItemId, inventTable2.ItemId);

        if (cmp == 0)
        {
            inventTransOrigin1 = it1.get(tableNum(InventTransOrigin)) as InventTransOrigin;
            inventTransOrigin2 = it2.get(tableNum(InventTransOrigin)) as InventTransOrigin;

            cmp = strCmp(inventTransOrigin1.InventTransId, inventTransOrigin2.InventTransId);
        }

        return cmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        FBBookingPeriod_BR          bookingPeriod;

        Query                       query;
        QueryRun                    iterator;

        query                       queryRetail;
        QueryRun                    iteratorRetail;

        int                         counter;
        FBHeaderContract_BR         contract = this.parmDataContract() as FBHeaderContract_BR;

        bookingPeriod = FBBookingPeriod_BR::find(contract.parmFBBookingPeriodRecId());

        changeCompany (bookingPeriod.FiscalEstablishmentDataArea)
        {
            query = this.buildQuery();
            iterator = new QueryRun(query);

            queryRetail = this.buildQueryRetail();
            iteratorRetail = new QueryRun(queryRetail);

            counter = 1;
            iterator.next();
            iteratorRetail.next();
            while (this.isIteratorValid(iterator) && this.isIteratorValid(iteratorRetail))
            {
                if (this.iteratorCmp(iterator, iteratorRetail) < 0)
                {
                    this.insertFiscalDocument(iterator, counter);
                    iterator.next();
                }
                else
                {
                    this.insertFiscalReceipt(iteratorRetail, counter);
                    iteratorRetail.next();
                }
                counter = counter + 1;
            }

            while (this.isIteratorValid(iterator))
            {
                this.insertFiscalDocument(iterator, counter);
                iterator.next();
                counter = counter + 1;
            }

            while (this.isIteratorValid(iteratorRetail))
            {
                this.insertFiscalReceipt(iteratorRetail, counter);
                iteratorRetail.next();
                counter = counter + 1;
            }

            this.updateQuantityInventory();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuantityInventory</Name>
				<Source><![CDATA[
    private void updateQuantityInventory()
    {
        FBHeaderContract_BR         contract;
        FiscalEstablishment_BR      fiscalEstablishment;
        FBInventoryCalculator_BR    inventoryCalculator;
        FBBookingPeriod_BR          bookingPeriod;
        ItemId                      itemId;
        Qty                         qty;
        Qty                         qtyTotal;
        InventTable                 inventTable;

        contract = this.parmDataContract() as FBHeaderContract_BR;
        fiscalEstablishment = FiscalEstablishment_BR::findById(contract.parmFiscalEstablishmentId());
        inventoryCalculator = new FBInventoryCalculator_BR(fiscalEstablishment.recId);

        bookingPeriod = FBBookingPeriod_BR::find(contract.parmFBBookingPeriodRecId());

        itemId = '';
        while select forUpdate tmpFBInventoryBookModel3 order by tmpFBInventoryBookModel3.Count desc
        {
            if (tmpFBInventoryBookModel3.ItemId == itemId)
            {
                tmpFBInventoryBookModel3.QuantityInventory = qty;
                tmpFBInventoryBookModel3.update();

                if (tmpFBInventoryBookModel3.Direction == FiscalDocDirection_BR::Incoming)
                {
                    qty = qty - tmpFBInventoryBookModel3.Quantity;
                }
                else
                {
                    qty = qty + tmpFBInventoryBookModel3.Quantity;
                }
            }
            else
            {
                itemId = tmpFBInventoryBookModel3.ItemId;

                inventTable = InventTable::find(tmpFBInventoryBookModel3.ItemId);
                inventoryCalculator.calculateInventoryBalancesForItem(bookingPeriod.periodTo(), inventTable);
                qtyTotal = inventoryCalculator.getQty();

                tmpFBInventoryBookModel3.QuantityInventory = qtyTotal;
                tmpFBInventoryBookModel3.update();

                if (tmpFBInventoryBookModel3.Direction == FiscalDocDirection_BR::Incoming)
                {
                    qty = qtyTotal - tmpFBInventoryBookModel3.Quantity;
                }
                else
                {
                    qty = qtyTotal + tmpFBInventoryBookModel3.Quantity;
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
