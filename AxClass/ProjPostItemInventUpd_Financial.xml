<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostItemInventUpd_Financial</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjPostItemInventUpd_Financial extends  ProjPost
{
    InventUpd_Financial financial;
    PurchLine           purchLine;
    ProdTable           prodTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    public boolean checkTrans(boolean _throwerror = false)
    {
        boolean ok  = true;

        ok  = super();

        if (ok)
        {
            if (ProjCategory::find(projTrans.categoryId()).CategoryType == ProjCategoryType::Revenue)
            {
                ok = checkFailed(strFmt("@SYS54897",projTrans.categoryId()));
            }

            if (purchLine.salesLine())
            {
                if (!projTrans.salesUnit())
                {
                    ok = checkFailed("@SYS73707");
                }

                if (!projTrans.currencyIdSales())
                {
                    ok = checkFailed("@SYS73708");
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount creditAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId )
    {
        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet :
                return projTrans.offsetAccountItemLedgerDimension(_fundingSourceId);

            default:
                throw error(strFmt("@SYS50933","@SYS50276"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>debitAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount debitAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId)
    {
        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet:
                return projTrans.statusAccountItemLedgerDimension(_fundingSourceId);

            default:
                throw error(strFmt("@SYS50933","@SYS50276"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendInvoiceTrans</Name>
				<Source><![CDATA[
    public VendInvoiceTrans getVendInvoiceTrans(ProjItemTrans _projItemTrans)
    {
        VendInvoiceTrans    vendInvoiceTrans;
        VendInvoiceJour     vendInvoiceJour;
        PurchLine           purchLineLocal;
        InventTransOrigin   inventTransOrigin_Project;
        InventTrans         inventTrans_Project;

        select firstonly ProjTransId, StockedProduct, InventTransId from purchLineLocal
            where purchLineLocal.ProjTransId == _projItemTrans.ProjTransIdRef;

        if (purchLineLocal.StockedProduct)
        {
            select InventTransId, RecId from vendInvoiceTrans
                where purchLineLocal.InventTransId == vendInvoiceTrans.InventTransId
                    join InvoiceId, ProjAdjustRefId, DateFinancial from inventTrans_Project
                        where inventTrans_Project.InvoiceId == vendInvoiceTrans.InvoiceId
                            && inventTrans_Project.ProjAdjustRefId == _projItemTrans.ProjAdjustRefId
                            && inventTrans_Project.DateFinancial == vendInvoiceTrans.InvoiceDate
                    join InventTransId from inventTransOrigin_Project
                        where inventTransOrigin_Project.InventTransId == _projItemTrans.InventTransId;
        }
        else
        {
            select firstonly PurchID, InvoiceId, InvoiceDate, NumberSequenceGroup, InternalInvoiceId from vendInvoiceTrans
                where vendInvoiceTrans.InventTransId == _projItemTrans.InventTransId
                    exists join PurchId, InvoiceId, InvoiceDate, NumberSequenceGroup, InternalInvoiceId, LedgerVoucher from vendInvoiceJour
                        where vendInvoiceJour.PurchId == vendInvoiceTrans.PurchID &&
                            vendInvoiceJour.InvoiceId == vendInvoiceTrans.InvoiceId &&
                            vendInvoiceJour.InvoiceDate == vendInvoiceTrans.InvoiceDate &&
                            vendInvoiceJour.NumberSequenceGroup == vendInvoiceTrans.NumberSequenceGroup &&
                            vendInvoiceJour.InternalInvoiceId == vendInvoiceTrans.InternalInvoiceId &&
                            vendInvoiceJour.LedgerVoucher == _projItemTrans.VoucherPackingSlip;
        }

        return vendInvoiceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init()
    {
        projTrans           = ProjTrans::newInventUpd_Financial(financial, this.parmAdjustRefId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdTable</Name>
				<Source><![CDATA[
    protected void initProdTable()
    {
        projTrans   = ProjTrans::newProjItemProdTable(prodTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPurchLIne</Name>
				<Source><![CDATA[
    protected void initPurchLIne()
    {
        projTrans   = ProjTrans::newProjItemPurchLine(purchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common _common)
    {
        super(_common);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventUpd_Financial</Name>
				<Source><![CDATA[
    public InventUpd_Financial parmInventUpd_Financial(InventUpd_Financial _financial = financial)
    {
        financial = _financial;

        return financial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdTable</Name>
				<Source><![CDATA[
    public ProdTable parmProdTable(ProdTable _prodTable = prodTable)
    {
        prodTable = _prodTable;

        return prodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchLIne</Name>
				<Source><![CDATA[
    public PurchLine parmPurchLIne(PurchLine _purchLine = purchLine)
    {
        purchLine = _purchLine;

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger posting type that is associated with posting project costs based on the current
    /// project ledger status.
    /// </summary>
    /// <returns>
    /// The ledger posting type for project costs.
    /// </returns>
    /// <remarks>
    /// This method must be implemented in the class that extends from it.
    /// </remarks>
    public LedgerPostingType postingTypeCost()
    {
        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet :
                return LedgerPostingType::ProjStatusAccountItem;

            default:
                throw error(strFmt("@SYS50933","@SYS50276"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeOffsetCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger posting type for project offset cost posting based on the current ledger status of
    /// the project.
    /// </summary>
    /// <returns>
    /// The ledger posting type for project offset costs.
    /// </returns>
    /// <remarks>
    /// This method must be implemented in the class that extends from it.
    /// </remarks>
    public LedgerPostingType postingTypeOffsetCost()
    {
        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet:
                return LedgerPostingType::ProjOffsetAccountItem;

            default:
                throw error(strFmt("@SYS50933","@SYS50276"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows for extensibility in creating a transaction posting. The method contains no code.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method before the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmCreateTrans</c> method is true.
    /// </remarks>
    public void projTransCreate()
    {
        ProjItemTrans               projItemTrans;
        ProjItemTransSale           projItemTransSale;
        MapEnumerator               enumerateMap;
        ProjFundingSource           projFundingSource;
        ProjItemTransTaxExtensionIN projItemTransTaxExtensionIN;

        projItemTrans.clear();

        projItemTrans  = ProjItemTrans::initTransFromInventUpd_Financial(financial);

        projItemTrans.VoucherPackingSlip    = ledgerVoucher.lastVoucher();

        if (! projItemTrans.validateWrite())
        {
            // Update has been aborted due to an error.
            throw error("@SYS21628");
        }

        projItemTrans.ProjAdjustRefId = this.parmAdjustRefId();
        projItemTrans.InventTransId   = this.parmInventTransId();

        projTrans.parmProjAdjustRefId(this.parmAdjustRefId());

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            projItemTransTaxExtensionIN = projItemTrans.projItemTransTaxExtensionIN();
            projItemTrans.packProjItemTrans_IN(projItemTransTaxExtensionIN);
        }
        // </GIN>

        projItemTrans.insert();

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            projItemTrans.VendInvoiceTransRecId = this.getVendInvoiceTrans(projItemTrans).RecId;
            
            if (FeatureStateProvider::isFeatureEnabled(ProjProjectTransactionsListPageVendFeature::instance()))
            {
                ProjVendInvoiceVendorInfo vendorInfo = ProjVendInvoiceVendorInfo::newFromVendorInvoiceTransRecId(projItemTrans.VendInvoiceTransRecId);

                projItemTrans.VendorAccount = vendorInfo.getVendorAccount();
                projItemTrans.VendorName = vendorInfo.getVendorName();
            }

            projItemTrans.update();
        }

        VendInvoiceTrans vendInvoiceTrans;
        if (projItemTrans.VendInvoiceTransRecId)
        {
            vendInvoiceTrans = VendInvoiceTrans::findRecId(projItemTrans.VendInvoiceTransRecId);
        }

        VendInvoiceJour vendInvoiceJour;
        if (vendInvoiceTrans)
        {
            vendInvoiceJour = vendInvoiceTrans.vendInvoiceJour();
        }

        VendInvoiceInfoLine vendInvoiceInfoLine;
        if (vendInvoiceJour)
        {
            select firstOnly vendInvoiceInfoLine
                where vendInvoiceInfoLine.ParmId == vendInvoiceJour.ParmId
                    && vendInvoiceInfoLine.InventTransId == vendInvoiceTrans.InventTransId;
        }

        // <GTE> <GIN> 
        if ((TaxSolutionScopeIntegrationUtil::isCompanyEnabled() || SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
            && projItemTrans.TransactionOrigin == ProjOrigin::PurchaseOrder)
        {
            if (vendInvoiceInfoLine)
            {
                TransTaxInformationHelper::copyTransTaxInformation(vendInvoiceInfoLine, projItemTrans);

                if (TaxParameters::checkTaxParameters_IN() && projItemTrans.TransactionOrigin == ProjOrigin::PurchaseOrder)
                {
                    VendInvoiceInfoLine_W vendInvoiceInfoLine_W = vendInvoiceInfoLine.vendInvoiceInfoLine_W();
                    if (vendInvoiceInfoLine_W)
                    {
                        projItemTransTaxExtensionIN = projItemTrans.projItemTransTaxExtensionIN();
                        ttsbegin;
                        projItemTransTaxExtensionIN.selectForUpdate(true);
                        projItemTransTaxExtensionIN.AssessableValueTransactionCurrency  = vendInvoiceInfoLine_W.AssessableValue_IN;
                        projItemTransTaxExtensionIN.update();
                        ttscommit;
                    }
                }
            }

            ProjTable projTable = ProjTable::find(projItemTrans.ProjId);
            TransTaxInformation transTaxInforProjTable   = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(projTable);
            TransTaxInformation transTaxInforProjItem    = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(projItemTrans);

            ttsbegin;
            transTaxInforProjItem.selectForUpdate(true);
            transTaxInforProjItem.CustomerLocation       = transTaxInforProjTable.CustomerLocation;
            transTaxInforProjItem.CustomerTaxInformation = transTaxInforProjTable.CustomerTaxInformation;
            transTaxInforProjItem.update();
            ttscommit;
        }
        // </GTE> </GIN> 

        if (projTrans.qty() != 0)
        {
            if (vendInvoiceInfoLine)
            {
                ProjFundingLimitTrackingManager::updateUsingSourceDocumentLine(vendInvoiceInfoLine.SourceDocumentLine, ProjFundingLimitTrackingAction::Release, false);
            }

            AmountCur transAmount;

            if (projItemTrans.SalesQty != 0 && projItemTrans.TransactionOrigin == ProjOrigin::PurchaseOrder)
            {
                transAmount = CurrencyExchangeHelper::amount(projItemTrans.SalesQty * projTrans.salesPrice(), projTrans.currencyIdSales());
            }
            else
            {
                transAmount = projTrans.transTurnover();
            }

            // Calculate the amount if this invoice with stocked product has vendor payment retention terms.
            if (ProjItemTrans::isStocked(this.InventTransId))
            {
                transAmount = ProjectSourceDocumentLineItemHelper::calcProjectVendorInvoiceRetentionForStockedItem(projItemTrans.VendInvoiceTransRecId, transAmount);
            }

            this.createCostSalesDistributions(projTrans.transCost(), transAmount);
            if (allocationError == NoYes::No)
            {
                enumerateMap = new MapEnumerator(saleDistributions);
                while (enumerateMap.moveNext())
                {
                    // Create ProjItemTransSale record
                    projItemTransSale.clear();
                    projItemTransSale.ProjTransId       = projItemTrans.ProjTransId;
                    projItemTransSale.LedgerTransdate   = ledgerVoucher.lastTransDate();
                    projItemTransSale.FundingSource     = enumerateMap.currentKey();

                    if (projItemTrans.SalesQty != 0 && projItemTrans.TransactionOrigin == ProjOrigin::PurchaseOrder)
                    {
                        projItemTransSale.LineAmount = enumerateMap.currentValue();
                        projItemTransSale.SalesPrice = CurrencyExchangeHelper::price(projItemTransSale.LineAmount / projItemTrans.SalesQty, this.currencyIdSales());
                    }
                    else
                    {
                        projItemTransSale.LineAmount = enumerateMap.currentValue();
                        projItemTransSale.SalesPrice = CurrencyExchangeHelper::price(projItemTransSale.LineAmount / projTrans.qty(), this.currencyIdSales());
                    }
                    projFundingSource = ProjFundingSource::find(projItemTransSale.FundingSource);
                    projItemTransSale.DefaultDimension  = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(projTrans.defaultDimension(), projFundingSource.DefaultDimension);

                    if (this.checkEnterSalesAccrued()&& ProjFundingSource::isExternalFunding(projItemTransSale.FundingSource))
                    {
                        projItemTransSale.LedgerSalesPosted = true;
                        if (projTrans.transTurnoverMST() != 0.0)
                        {
                            projItemTransSale.LedgerSalesAmount = CurrencyExchangeHelper::mstAmount(CurrencyExchangeHelper::amount(projItemTransSale.LineAmount, this.currencyIdSales()), this.currencyIdSales(), projTrans.transDate(), Currency::noYes2UnknownNoYes(projTrans.triangulationSales()), this.exchRateSales(), this.exchRateSecondarySales());
                        }
                    }
                    projItemTransSale.TransStatus = ProjTransStatus::Posted;
                    projItemTransSale.insert();
                }
            }
            ProjPost::postItemReverseTransaction(this);
        }

        if (financial.movement() && financial.movement().buffer())  //buffer could be purchLine or prodTable(finished method)
        {
            // Document handling
            Docu::copy(financial.movement().buffer(), projItemTrans);
        }

        this.parmTransIdCost(projItemTrans.ProjTransId);
        this.parmTransIdSales(projItemTrans.ProjTransId);

        if (ProjPost::checkCreateProjCost(projItemTrans.ItemId,projItemTrans.ProjId))
        {
            this.updateProjItemTransCost(projItemTrans, ledgerVoucher.lastVoucher());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method after the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmUpdateTrans</c> method returns true.
    /// </remarks>
    public void projTransUpdate()
    {
        ProjItemTrans::splitNeverLedger(this.parmInventTransId(), this.parmAdjustRefId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProjPostItemInventUpd_Financial</Name>
				<Source><![CDATA[
    public static ProjPostItemInventUpd_Financial newProjPostItemInventUpd_Financial(InventUpd_Financial _financial, ProjAdjustRefId _projAdjustRefId)
    {
        ProjPostItemInventUpd_Financial projPost;

        projPost = new ProjPostItemInventUpd_Financial(_financial.movement().buffer());
        projPost.parmInventUpd_Financial(_financial);
        projPost.parmAdjustRefId(_projAdjustRefId);
        projPost.init();

        return projPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProjPostItemProdTable</Name>
				<Source><![CDATA[
    public static ProjPostItemInventUpd_Financial newProjPostItemProdTable(ProdTable _prodTable)
    {
        ProjPostItemInventUpd_Financial projPost;

        projPost = new ProjPostItemInventUpd_Financial(_prodTable);
        projPost.parmProdTable(_prodTable);
        projPost.initProdTable();

        return projPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProjPostItemPurchLine</Name>
				<Source><![CDATA[
    public static ProjPostItemInventUpd_Financial newProjPostItemPurchLine(PurchLine _purchLine)
    {
        ProjPostItemInventUpd_Financial projPost;

        projPost = new ProjPostItemInventUpd_Financial(_purchLine);
        projPost.parmPurchLIne(_purchLine);
        projPost.initPurchLIne();

        return projPost;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>