<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTableMethod_RB</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetTableMethod_RB extends AssetTableMethod
{
    AssetDepreciationTime   periods;
    AssetAmount             assetAmount;

    AssetTransDate previousDepreciationDate;

    boolean                 theEnd;

//
//  Properties required for the depreciation conventions
//
    AssetTableDepConv       deprConv;
    AssetAmount             prevDepAmountPriorYears;
    AssetAmount             prevDepAmountThisYear;

    // Used to cache the values in the assetParameters record.
    // We will call and determine this once in the init() method.
    AssetParameters         assetParameters;
    boolean                 isInfologAlreadyDisplayed;

    // <GIN>
    boolean                             firstYear;
    // </GIN>

    // Use to short-circuit expensive CatchUp Depreciation logic if not needed
    boolean                 isTrueUpDepreciationRequired;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public AssetAmount calc()
    {
        AssetTransDate          startOfPeriod;
        AssetAmount             extraordinaryDepAmount;
        AssetTransDate          orgPeriodEnd;
        AssetAmount             basisForDepreciation; // Value used for depreciation convention calculation.
        AssetAmount             adjustmentAmount;
        boolean                 isCurrentPeriodAdjustment;
        // <GIN>
        AssetAmount             amountToCalc;
        AssetBookTable          assetBookTable;
        container               percentages;
        boolean                 depreciationCompaniesAct;
        // </GIN>

        // <GIN>
        if (assetDepreciationProfile.Method == AssetDepreciationMethod::ReducingBalance
            && AssetParameters::isDepreciationCompaniesActEnable_IN()
            && AssetBookShiftDepreciation_IN::existByAssetIdBookId(assetBook.AssetId, assetBook.BookId))
        {
            assetBookTable = AssetBookTable::find(assetBook.BookId);
            if (assetBookTable.CurrentOperationsTax == CurrentOperationsTax::Current
                && FiscalCalendar_IN::findByFiscalCalendar(assetBookTable.FiscalCalendar).CalendarType == CalendarType_IN::DayBased)
            {
                depreciationCompaniesAct = true;
            }
        }

        if (depreciationCompaniesAct
            && firstYear)
        {
            startOfPeriod = periodstart;
            firstYear = false;
        }
        else
        {
        // </GIN>
            startOfPeriod = deprInterval.startOfPeriod(periodstart);
        // <GIN>
        }
        // </GIN>
        orgPeriodEnd  = periodEnd;

        if (this.parmIsOtherAdjustments() && assetBook.DepreciationConvention != AssetDepreciationConvention::None)
        {
            deprConv.parmIsOtherAdjustments(this.parmIsOtherAdjustments());
        }

        // <GIN>
        if (depreciationCompaniesAct)
        {
            percentages   = [singleShift,doubleShift,tripleShift];
        }
        // </GIN>

        if (periodEnd <= parmRunDate)
        {
            this.setDepDate();
            this.setAmountToDepreciate();

            if (isReportingCurrencyDepreciation)
            {
                extraordinaryDepAmount = - AssetTrans::amountReportingCurrencyPerDateTranstype(assetBook.AssetId, periodEnd, assetBook.BookId, AssetTransType::ExtraordinaryDepreciation);
            }
            else
            {
                extraordinaryDepAmount = - AssetTrans::amountMSTPerDateTranstype(assetBook.AssetId, periodEnd, assetBook.BookId, AssetTransType::ExtraordinaryDepreciation);
            }

            if (calculatePrevPeriods == false)
            {
                prevPeriods = 0;
            }

            //calculate depreciation for adjument transaction for Revaluation, WriteDownAdj, WriteUpAdj.
            if ( (assetBook.IsTrueUpDepreciation && isTrueUpDepreciationRequired)
                && periodEnd >= assetBook.LastDepreciationDate && this.parmDepAmountPriorYears())
            {
                [prevDepAmountPriorYears, prevDepAmountThisYear] = this.parmDepAmountPriorYears(); // first year depreciation with respect to adjusted value.
                this.parmDepAmountPriorYears(conNull());
                if (!this.parmIsCatchUpDepreciation() && assetBook.DepreciationConvention == AssetDepreciationConvention::None)
                {
                    prevDepAmount = prevDepAmountPriorYears;
                }
            }

            if (previousDepreciationDate &&
                deprInterval.hasYearChanged(previousDepreciationDate, periodEnd))
            {
                prevDepAmount = this.prvDepreciationAmount(periodstart) + depreciationThisRun + prevDepAmountExternal;
                prevPeriods = 0;
                if (assetBook.DepreciationConvention != AssetDepreciationConvention::None)
                {
                    prevDepAmountPriorYears += prevDepAmountThisYear;
                    prevDepAmountPriorYears += prevDepAmountExternal;
                    prevDepAmountExternal = 0;
                    prevDepAmountThisYear = 0;
                }

                //calculate depreciation for adjument transaction for Revaluation, WriteDownAdj, WriteUpAdj.
                if ( (assetBook.IsTrueUpDepreciation && isTrueUpDepreciationRequired)
                    && this.parmIsCatchUpDepreciation() && assetBook.DepreciationConvention == AssetDepreciationConvention::None)
                {
                    prevDepAmount = depreciationThisRun + prevDepAmountExternal;
                }

                if ( (assetBook.IsTrueUpDepreciation && isTrueUpDepreciationRequired)
                    && !this.parmIsCatchUpDepreciation() && assetBook.DepreciationConvention == AssetDepreciationConvention::None)
                {
                    prevDepAmount = depreciationThisRun + prevDepAmountThisYear + prevDepAmountPriorYears + prevDepAmountExternal;
                }
            }

            // Modifed code to avoid recalaution of depreciation in case of other adjustment.
            if (this.parmIsOtherAdjustments())
            {
                extraordinaryDepAmount = 0;
                prevDepAmount          = 0;
                prevDepAmountExternal  = 0;
            }
            
            // <GIN>
            if (depreciationCompaniesAct
                && AssetParameters::find().MaxAcquisitionValue_IN >= amountToDepreciate)
            {
                assetAmount = amountToDepreciate;
            }
            else
            {
            // </GIN>

                if (deprInterval.assetDepreciationTime(depreciationDate))
                {
                    basisForDepreciation = this.calculateBasisForDepreciation(extraordinaryDepAmount, startOfPeriod);

                    //  This code branch ensures the accuracy of the original calculated amount.
                    if (assetBook.DepreciationConvention == AssetDepreciationConvention::None)
                    {
                        // <GIN>
                        if (depreciationCompaniesAct
                            && shiftDepreciation)
                        {
                            amountToCalc = amountToDepreciate - prevDepAmount - extraordinaryDepAmount;
                            assetAmount  = this.calcAmountForShiftDepreciation_IN(
                                assetBook,
                                amountToCalc,
                                startOfPeriod,
                                orgPeriodEnd,
                                percentages);
                        }
                        else
                        {
                        // </GIN>

                            // If this is the first year of depreciation, and we have a partial month/year,
                            // we need to take a smaller amount for the first year.
                            if (isFirstYearPartialDepreciation
                                && assetBook.DepreciationConvention == AssetDepreciationConvention::None
                                && isProratedDaysCalculation
                                && !deprInterval.hasYearChanged(depreciationDate, assetBook.UsedFromDate))
                            {
                                AssetAmount annualAssetAmount = 
                                    (amountToDepreciate - prevDepAmount - extraordinaryDepAmount - this.previousDepreciationBeforeSplit(startOfPeriod))
                                    * this.percentage() / 100;
                                assetAmount = this.calculatePartialYearPeriodAmount(depreciationDate, annualAssetAmount);
                            }
                            else
                            {
                                if (isFirstYearPartialDepreciation)
                                {
                                    isFirstYearPartialDepreciation = false;
                                }

                                assetAmount = ((amountToDepreciate - prevDepAmount - extraordinaryDepAmount - this.previousDepreciationBeforeSplit(startOfPeriod))
                                    * this.percentage() / 100)
                                    / deprInterval.assetDepreciationTime(depreciationDate);

                                if (isoCountryCode == #isoIN)
                                {
                                    assetAmount = this.adjustDepreciationAmountForDayBasedCalendar_IN(assetAmount);
                                }
                            }

                        // <GIN>
                        }
                        // </GIN>
                    }
                    else
                    {
                        //  Depreciation conventions require an assetBook.serviceLife value.
                        if (assetBook.ServiceLife)
                        {
                            // <GIN>
                            if (depreciationCompaniesAct
                                && shiftDepreciation)
                            {
                                assetAmount = deprConv.calc_RB((this.calcAmountForShiftDepreciation_IN( assetBook, (amountToDepreciate - prevDepAmount - extraordinaryDepAmount), startOfPeriod, orgPeriodEnd, percentages)),
                                                                                                        prevDepAmountThisYear,
                                                                                                        periodEnd,
                                                                                                        round(periods + prevPeriods,0));
                            }
                            else
                            {
                            // </GIN>
                                assetAmount = deprConv.calc_RB((basisForDepreciation * this.percentage() / 100),
                                                                prevDepAmountThisYear,
                                                                periodEnd,
                                                                round(periods + prevPeriods,0));
                            // <GIN>
                            }
                            // </GIN>
                        }
                        else
                        {
                            assetAmount = 0;
                            if (! dualDepreciation)
                                theEnd = true;
                        }
                    }
                }
                else
                {
                    assetAmount = 0;
                }

                this.calcRestPeriod(startOfPeriod);

            // <GIN>
            }
            // </GIN>

            if (isoCountryCode == #isoIN)
            {
                assetAmount = this.adjustAvailableAssetAmountDependsOnScrap(assetAmount);
            }

            //  Code added because RB was not updating the assetBook.lifeTimeRest property.
            periods -= restPeriod;

            assetAmount = assetBook.roundDepreciationAmount(
                assetAmount * this.revaluationFactor(),
                isReportingCurrencyDepreciation);

            AssetAmount minimumDepreciation = this.getMinimumDepreciation();

            // Correction for minimal depreciation
            if (assetBook.getAcquisitionAmountSign() * assetAmount < minimumDepreciation)
            {
                Amount restToDepreciate;

                // <GIN>
                //  This code branch ensures the accuracy of the original calculated amount.
                if (depreciationCompaniesAct)
                {
                    if (days && shift)
                    {
                        if (assetBook.DepreciationConvention == AssetDepreciationConvention::None)
                        {
                            restToDepreciate = amountToDepreciate
                                - prevDepAmount
                                - extraordinaryDepAmount;
                        }
                        else
                        {
                            restToDepreciate = amountToDepreciate
                                - prevDepAmountPriorYears
                                - prevDepAmountThisYear
                                - extraordinaryDepAmount;
                        }
                    }
                }
                else
                {
                // </GIN>
                    //  This code branch ensures the accuracy of the original calculated amount.
                    if (assetBook.DepreciationConvention == AssetDepreciationConvention::None)
                    {
                        restToDepreciate = amountToDepreciate
                            - this.prvDepreciationAmount(periodstart,true)
                            - depreciationThisRun
                            - prevDepAmountExternal
                            - extraordinaryDepAmount;
                    }
                    else
                    {
                        restToDepreciate = amountToDepreciate
                            - prevDepAmountPriorYears
                            - prevDepAmountThisYear
                            - extraordinaryDepAmount;
                    }

                // <GIN>
                }
                // </GIN>

                if (isoCountryCode == #isoIN)
                {
                    restToDepreciate = this.adjustRestToDepreciateAmountDependsOnScrap(restToDepreciate);
                }

                assetAmount = assetBook.getAcquisitionAmountSign() * min(
                    minimumDepreciation,
                    assetBook.getAcquisitionAmountSign() * restToDepreciate);
            }

            periodEnd++;
            periodstart = periodEnd;
            periodEnd   = deprInterval.endPeriod(periodstart);

            previousDepreciationDate = depreciationDate;
            // Modifed code to avoid recalaution of depreciation in case of other adjustment.
            isCurrentPeriodAdjustment = (assetBook.IsTrueUpDepreciation && isTrueUpDepreciationRequired) &&
                                        AssetTrans::existAdjustmentTransPerDate(assetBook.AssetId, assetBook.BookId, startOfPeriod, orgPeriodEnd) &&
                                        assetBook.depreciationProfile().Accrual != AssetAccrual::Monthly && assetBook.depreciationProfile().Accrual != AssetAccrual::FiscalPeriod;

            if (this.parmIsOtherAdjustments())
            {
                adjustmentAmount = assetAmount;
            }
            if (! prevPeriods && !isCurrentPeriodAdjustment)
            {
                if (isReportingCurrencyDepreciation)
                {
                    assetAmount = assetBook.roundOffDepreciationReportingCurrency(assetAmount);
                }
                else
                {
                    assetAmount = assetBook.roundOffDepreciation(assetAmount);
                }
            }

            depreciationThisRun += assetAmount;
            if (assetBook.DepreciationConvention != AssetDepreciationConvention::None)
            {
                prevDepAmountThisYear += assetAmount;
            }
        }

        //  This code branch ensures the accuracy of the original calculated amount.
        if (assetBook.DepreciationConvention == AssetDepreciationConvention::None)
        {
            AssetAmount totalPreviousDepreciationAmount;
            if (AssetTableMethod_RBIncludeCurYearAmountFlight::instance().isEnabled())
            {
                totalPreviousDepreciationAmount = this.prvDepreciationAmount(periodstart, true);
            }
            else
            {
                // prvDepreciationAmount(periodstart) calculates the amount up to the end of last year of periodstart.
                // previousDepreciationBeforeSplit(startOfPeriod) calculates the amount from the start of current year of startOfPeriod to the split date.
                // When year of periodstart larger than year of startOfPeriod , there will be a duplicate happens in prvDepreciationAmount and previousDepreciationBeforeSplit.
                if (this.isPeriodStartYearGreaterThanStartOfPeriodYear(assetBook, periodstart, startOfPeriod))
                {
                    totalPreviousDepreciationAmount = this.prvDepreciationAmount(periodstart);
                }
                else
                {
                    totalPreviousDepreciationAmount = this.prvDepreciationAmount(periodstart) + this.previousDepreciationBeforeSplit(startOfPeriod);
                }
            }

            Amount depreciatedAmount = 
                totalPreviousDepreciationAmount
                + depreciationThisRun 
                + prevDepAmountExternal 
                + extraordinaryDepAmount;

            if (!prevPeriods
                && assetBook.getAcquisitionAmountSign() * depreciatedAmount
                 >= assetBook.getAcquisitionAmountSign() * amountToDepreciate
                && !this.parmIsCatchUpDepreciation())
            {
                assetAmount -= depreciatedAmount - amountToDepreciate;
                prevDepAmount = amountToDepreciate - extraordinaryDepAmount;

                if (AssetTableMethod_RBIncludeCurYearAmountFlight::instance().isEnabled())
                {
                    depreciationThisRun = 
                        amountToDepreciate 
                        - totalPreviousDepreciationAmount
                        - prevDepAmountExternal 
                        - extraordinaryDepAmount;
                }
                else
                {
                    depreciationThisRun =
                        amountToDepreciate
                        - this.prvDepreciationAmount(periodstart)
                        - prevDepAmountExternal
                        - extraordinaryDepAmount;
                }

                theEnd = true;
                this.parmIsEndPeriod(theEnd);
            }
            else
            {
                // Round periods to 2 decimals as this is what the UI is limited to.  Needed in order to avoid multiple rounds
                //  that sum up to very close to 0 but just above 0.
                if (assetDepreciationProfile.AssetEndDependOnServiceLife == true && decRound(periods, 2) <= 0)
                {
                    if (orgPeriodEnd <= parmRunDate)
                    {
                        assetAmount -= this.prvDepreciationAmount(parmRunDate,true) + depreciationThisRun + prevDepAmountExternal + extraordinaryDepAmount - amountToDepreciate;
                        
                        if (isoCountryCode == #isoIN)
                        {
                            assetAmount -= assetBook.ScrapValue;                
                        }
                        theEnd = true;
                        this.parmIsEndPeriod(theEnd);
                    }
                }
            }
        }
        else
        {
            Amount depreciatedAmount =
                prevDepAmountPriorYears 
                + prevDepAmountThisYear 
                + prevDepAmountExternal 
                + extraordinaryDepAmount;

            if (!prevPeriods
                && assetBook.getAcquisitionAmountSign() * depreciatedAmount
                    >= assetBook.getAcquisitionAmountSign() * amountToDepreciate
                && !this.parmIsCatchUpDepreciation())
            {
                assetAmount -= depreciatedAmount - amountToDepreciate;
                theEnd = true;
            }
            else
            {
                // Round periods to 2 decimals as this is what the UI is limited to.  Needed in order to avoid multiple rounds
                //  that sum up to very close to 0 but just above 0.
                if (assetDepreciationProfile.AssetEndDependOnServiceLife == true && decRound(periods, 2) <= 0)
                {
                    if (orgPeriodEnd <= parmRunDate)
                    {
                        assetAmount -= depreciatedAmount - amountToDepreciate;
                        theEnd = true;
                        this.parmIsEndPeriod(theEnd);
                    }
                }
            }
        }
        // Modifed code to avoid recalaution of depreciation in case of other adjustment.
        if (this.parmIsOtherAdjustments())
        {
            assetAmount = adjustmentAmount;
        }
        if (theEnd)
        {
            this.parmIsEndOfAccountingDepreciation(theEnd);
        } 
        return assetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPeriodStartYearGreaterThanStartOfPeriodYear</Name>
				<Source><![CDATA[
    private boolean isPeriodStartYearGreaterThanStartOfPeriodYear(AssetBook _assetBook, TransDate _periodStart, TransDate _startOfPeriod)
    {
        boolean isPeriodStartYearGreaterThanStartOfPeriodYear;

        if (AssetTableMethod_RBPeriodDatesFlight::instance().isEnabled())
        {
            RefRecId fiscalCalendarRecId = AssetBookTable::find(_assetBook.BookId).getFiscalCalendar();
            FiscalCalendarYear periodStartFiscalYear = FiscalCalendarYear::findYearByCalendarDate(fiscalCalendarRecId, _periodStart);
            FiscalCalendarYear startOfPeriodFiscalYear = FiscalCalendarYear::findYearByCalendarDate(fiscalCalendarRecId, _startOfPeriod);

            if (periodStartFiscalYear.StartDate > startOfPeriodFiscalYear.StartDate)
            {
                isPeriodStartYearGreaterThanStartOfPeriodYear = true;
            }
        }
        else
        {
            if (year(_periodstart) > year(_startOfPeriod))
            {
                isPeriodStartYearGreaterThanStartOfPeriodYear = true;
            }
        }

        return isPeriodStartYearGreaterThanStartOfPeriodYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustDepreciationAmountForDayBasedCalendar_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts depreciation amount for a period to take into account
    /// the number of days in the period compared to the total number of days in the year
    /// when depreciation calendar is fiscal and day based.
    /// </summary>
    /// <param name = "_assetAmount">Depreciation amount for a period.</param>
    /// <returns>
    /// Adjusted depreciation amount for a period when depreciation calendar is fiscal and day based;
    /// Unchanged depreciation amount otherwise.
    /// </returns>
    private AssetAmount adjustDepreciationAmountForDayBasedCalendar_IN(AssetAmount _assetAmount)
    {
        AssetAmount ret = _assetAmount;

        if (assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Fiscal)
        {
            RefRecId fiscalCalendarRecId = assetBook.assetBookTable().getFiscalCalendar();
            FiscalCalendar_IN fiscalCalendar = FiscalCalendar_IN::findByFiscalCalendar(fiscalCalendarRecId);

            if (fiscalCalendar && fiscalCalendar.CalendarType == CalendarType_IN::DayBased)
            {
                FiscalCalendarYear year = FiscalCalendarYear::findYearByCalendarDate(fiscalCalendarRecId, periodstart);
                Days_IN yearDays = FiscalCalendarPeriod_IN::getTotalDaysInCalendarYear(year.RecId);

                if (yearDays)
                {
                    Days_IN periodDays = FiscalCalendarPeriod_IN::getTotalDaysInCalendarPeriods(fiscalCalendarRecId, periodstart, periodEnd);
                    AssetDepreciationTime periodCount = deprInterval.assetDepreciationTime(periodstart);

                    ret *= (periodDays / yearDays) * periodCount;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBasisForDepreciation</Name>
				<Source><![CDATA[
    private AssetAmount calculateBasisForDepreciation(AssetAmount _extraordinaryDepAmount, TransDate _startOfPeriod)
    {
        return amountToDepreciate
            - prevDepAmountPriorYears
            - _extraordinaryDepAmount
            - this.previousDepreciationBeforeSplit(_startOfPeriod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>previousDepreciationBeforeSplit</Name>
				<Source><![CDATA[
    private AssetAmount previousDepreciationBeforeSplit(TransDate _startOfPeriod)
    {
        TransDate splitDate = this.getSplitDateThisYear(_startOfPeriod);
        AssetAmount depreciationAmount = 0;

        if (splitDate)
        {
            depreciationAmount = this.getDepreciationBeforeSplit(splitDate);
        }

        return depreciationAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSplitDateThisYear</Name>
				<Source><![CDATA[
    private TransDate getSplitDateThisYear(TransDate _startOfPeriod)
    {
        TransDate fromDate = deprInterval.openingPeriodDate(_startOfPeriod);
        TransDate toDate = deprInterval.endPeriod(_startOfPeriod);

        AssetTransTmp assetTransTmp = AssetCacheManager::getCacheAssetTrans(assetBook.AssetId, assetBook.BookId);
        select firstonly TransDate from assetTransTmp
            order by assetTransTmp.TransDate desc
            where assetTransTmp.AssetId == assetBook.AssetId
                && assetTransTmp.BookId == assetBook.BookId
                && assetTransTmp.TransDate >= fromDate
                && assetTransTmp.TransDate <= toDate
                && assetTransTmp.Txt == "@SYS67430"
                && (assetTransTmp.TransType == AssetTransType::DepreciationAdj
                    || assetTransTmp.TransType == AssetTransType::Depreciation);

        return assetTransTmp.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDepreciationBeforeSplit</Name>
				<Source><![CDATA[
    private Amount getDepreciationBeforeSplit(TransDate _splitDate)
    {
        Amount amount = 0;

        if (_splitDate)
        {
            TransDate fromDate = deprInterval.openingPeriodDate(_splitDate);

            AssetTransTmp assetTransTmp = AssetCacheManager::getCacheAssetTrans(assetBook.AssetId, assetBook.BookId);

            select sum(AmountMST), sum(ReportingCurrencyAmount) from assetTransTmp
            where assetTransTmp.AssetId == assetBook.AssetId
                && assetTransTmp.BookId == assetBook.BookId
                && assetTransTmp.TransDate >= fromDate
                && assetTransTmp.TransDate <= _splitDate
                && (assetTransTmp.TransType == AssetTransType::DepreciationAdj
                    || assetTransTmp.TransType == AssetTransType::Depreciation);

            if (isReportingCurrencyDepreciation)
            {
                amount = -assetTransTmp.ReportingCurrencyAmount;
            }
            else
            {
                amount = -assetTransTmp.AmountMST;
            }
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentDepreciationPeriodStartDate</Name>
				<Source><![CDATA[
    private TransDate getCurrentDepreciationPeriodStartDate()
    {
        return assetBook.LastDepreciationDate ? assetBook.LastDepreciationDate + 1 : assetBook.DepreciationStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the amount to depreciate for this interval.
    /// </summary>
    /// <param name="_amountToDepreciate">
    /// The amount to depreciate.
    /// </param>
    /// <returns>
    /// Returns the amount to depreciate for this interval.
    /// </returns>
    public AssetAmount calc_IN(AssetAmount    _amountToDepreciate = 0)
    {
        AssetTransDate              startOfPeriod;
        AssetAmount                 extraordinaryDepAmount;
        AssetTransDate              orgPeriodEnd;
        AssetAmount                 basisForDepreciation; // Value used for depreciation convention calculation.
        AssetGroupInformation_IN    assetGroupInformation;
        AssetGroupTrans_IN          assetGroupTrans;
        AssetProposalDepreciation   assetProposalDepreciation;
        AssetAmount                 postedBonusAmount;
        AssetDepBookMap_IN          depBookMap;
        AssetAmount                 amountToDepreciateLoc = _amountToDepreciate;

        assetProposalDepreciation = new AssetProposalDepreciation();
        startOfPeriod = deprInterval.startOfPeriod(periodstart);
        orgPeriodEnd  = periodEnd;
        if (periodEnd <= parmRunDate)
        {
            this.setDepDate();
            this.setAmountToDepreciate();
            // <GIN>
            // When adjustment exists for the asset, Bonus depreciation is not deducted for the next available year.
            // So, Deducting the Bonus depreciation from the AmountToDepreciate here.
            if (amountToDepreciateLoc != 0
                && AssetParameters::isDepreciationIncomeTaxActEnable_IN()
                && assetBook.AssetGroupDepreciation_IN
                && this.parmIsAssetFirstYearDepreciation_IN())
            {
                if (deprInterval.startOfPeriod(periodEnd) > assetBook.DepreciationStartDate)
                {
                    if (assetBook.LastDepreciationDate)
                    {
                        amountToDepreciateLoc = amountToDepreciateLoc + AssetTrans::amountMSTPerDateTranstype(assetBook.AssetId, assetBook.LastDepreciationDate, assetBook.BookId, AssetTransType::BonusDepreciation);
                    }
                    else
                    {
                        amountToDepreciateLoc = amountToDepreciateLoc + AssetTrans::amountMSTPerDateTranstype(assetBook.AssetId, periodEnd, assetBook.BookId, AssetTransType::BonusDepreciation);
                    }
                }
                //If asset doesnt fall in the period, ignore for depreciation.
                else if (deprInterval.endPeriod(periodEnd) < assetBook.AcquisitionDate)
                {
                    amountToDepreciateLoc = 0;
                }
            }
            // </GIN>
            extraordinaryDepAmount = - AssetTrans::amountMSTPerDateTranstype(assetBook.AssetId, periodEnd, assetBook.BookId, AssetTransType::ExtraordinaryDepreciation);
            if (calculatePrevPeriods == false)
            {
                prevPeriods = 0;
            }
            if (previousDepreciationDate &&
                deprInterval.hasYearChanged(previousDepreciationDate, periodEnd))
            {
                prevDepAmount = this.prvDepreciationAmount(periodstart) + depreciationThisRun + prevDepAmountExternal;
                prevPeriods = 0;
                if (assetBook.DepreciationConvention != AssetDepreciationConvention::None)
                {
                    prevDepAmountPriorYears += prevDepAmountThisYear;
                    prevDepAmountPriorYears += prevDepAmountExternal;
                    prevDepAmountExternal = 0;
                    prevDepAmountThisYear = 0;
                }
            }

            //If MultiAsset check fails and PrevDepreciation is not calculated, find the previous depreciation amount.
            if (prevDepAmount == 0
                && amountToDepreciateLoc == 0
                && assetProposalDepreciation.checkMultiAssetForAssetGroup_IN(assetBook.AssetGroup, assetBook.BookId))
            {
                select sum(AmountMst) from assetGroupInformation
                    where  assetGroupInformation.AssetGroup     == assetBook.AssetGroup
                        && assetGroupInformation.TransDate      <= assetBook.LastDepreciationDate
                        && assetGroupInformation.TransType      == AssetTransType::Depreciation
                        || assetGroupInformation.TransType      == AssetTransType::DepreciationAdj
                    exists join AssetGroupInformation from assetGroupTrans
                        where  assetGroupTrans.BookId           == assetBook.BookId
                            && assetGroupTrans.AssetId          == assetBook.AssetId
                            && assetGroupTrans.AssetGroupInformation == assetGroupInformation.RecId;

                prevDepAmount = abs(assetGroupInformation.AmountMst);
            }

            if (deprInterval.assetDepreciationTime(depreciationDate))
            {
                //  This code branch ensures the accuracy of the original calculated amount.
                if (assetBook.DepreciationConvention == AssetDepreciationConvention::None)
                {
                    AssetAmount amountToDepreciateNow = amountToDepreciateLoc ? amountToDepreciateLoc : amountToDepreciate;
                    TransDate firstDepreciationYearEnd = deprInterval.findLastDayOfYear(assetBook.DepreciationStartDate);

                    if (orgPeriodEnd <= firstDepreciationYearEnd
                        && (firstDepreciationYearEnd - assetBook.DepreciationStartDate + 1) <= AssetParameters::find().DepreciationThreshold_IN)
                    {
                        assetAmount = this.getAmountInThresholdPeriod_IN(amountToDepreciateNow-prevDepAmount-extraordinaryDepAmount);
                    }
                    else
                    {
                        AssetAmount amountToDepreciateInThresholdPeriod = this.getAmountToDepreciateInThresholdPeriod_IN(orgPeriodEnd);
                        AssetAmount assetAmountInThresholdPeriod;

                        if (amountToDepreciateInThresholdPeriod && amountToDepreciateInThresholdPeriod < amountToDepreciateNow)
                        {
                            amountToDepreciateNow -= amountToDepreciateInThresholdPeriod;
                            assetAmountInThresholdPeriod = this.getAmountInThresholdPeriod_IN(amountToDepreciateInThresholdPeriod);
                        }

                        assetAmount = this.getAmountAfterThresholdPeriod_IN(amountToDepreciateNow-prevDepAmount-extraordinaryDepAmount) + assetAmountInThresholdPeriod;
                    }
                }
                else
                {
                    //  Depreciation conventions require an assetBook.serviceLife value.
                    if (assetBook.ServiceLife)
                    {
                            basisForDepreciation = amountToDepreciate -
                                                   prevDepAmountPriorYears -
                                                   extraordinaryDepAmount;

                            assetAmount = deprConv.calc_RB((basisForDepreciation * this.percentage() / 100),
                                                           prevDepAmountThisYear,
                                                           periodEnd,
                                                           round(periods + prevPeriods,0));
                    }
                    else
                    {
                        assetAmount = 0;
                        if (! dualDepreciation)
                        {
                            theEnd = true;
                        }
                    }
                }
            }
            else
            {
                assetAmount = 0;
            }
            this.calcRestPeriod(startOfPeriod);
            //  Code added because RB was not updating the assetBook.lifeTimeRest property.
            periods -= restPeriod;

            assetAmount = assetBook.roundDepreciationAmount(
                assetAmount * this.revaluationFactor(),
                isReportingCurrencyDepreciation);

            // Correction for minimal depreciation
            if (assetAmount < AssetParameters::find().DepreciationMin)
            {
                //  This code branch ensures the accuracy of the original calculated amount.
                if (assetBook.DepreciationConvention == AssetDepreciationConvention::None)
                {
                    assetAmount = min(AssetParameters::find().DepreciationMin,amountToDepreciate-prevDepAmount-extraordinaryDepAmount);
                }
                else
                {
                    assetAmount = min(AssetParameters::find().DepreciationMin,amountToDepreciate-prevDepAmountPriorYears-prevDepAmountThisYear-extraordinaryDepAmount);
                }
            }

            periodEnd++;
            periodstart = periodEnd;
            periodEnd   = deprInterval.endPeriod(periodstart);

            previousDepreciationDate = depreciationDate;

            if (! prevPeriods)
            {
                assetAmount = assetBook.roundOffDepreciation(assetAmount);
            }

            depreciationThisRun += assetAmount;
            if (assetBook.DepreciationConvention != AssetDepreciationConvention::None)
            {
                prevDepAmountThisYear += assetAmount;
            }
        }

        //  This code branch ensures the accuracy of the original calculated amount.
        if (assetBook.DepreciationConvention == AssetDepreciationConvention::None)
        {
            if (! prevPeriods &&
                this.prvDepreciationAmount(periodstart) + depreciationThisRun + prevDepAmountExternal + extraordinaryDepAmount >= amountToDepreciate)
            {
                assetAmount -= this.prvDepreciationAmount(periodstart) + depreciationThisRun + prevDepAmountExternal + extraordinaryDepAmount - amountToDepreciate;
                prevDepAmount = amountToDepreciate - extraordinaryDepAmount;
                depreciationThisRun = amountToDepreciate - this.prvDepreciationAmount(periodstart) - prevDepAmountExternal - extraordinaryDepAmount;
                theEnd = true;
            }
            else
            {
                if ((assetDepreciationProfile.AssetEndDependOnServiceLife == true) && (periods < 1))
                {
                    if (orgPeriodEnd <= parmRunDate)
                    {
                        assetAmount -= this.prvDepreciationAmount(parmRunDate,true) + depreciationThisRun + prevDepAmountExternal + extraordinaryDepAmount - amountToDepreciate;
                        theEnd = true;
                    }
                }
            }
        }
        else
        {
            if (! prevPeriods &&
                prevDepAmountPriorYears + prevDepAmountThisYear + prevDepAmountExternal + extraordinaryDepAmount >= amountToDepreciate)
            {
                assetAmount -= prevDepAmountPriorYears + prevDepAmountThisYear + prevDepAmountExternal + extraordinaryDepAmount - amountToDepreciate;
                theEnd = true;
            }
            else
            {
                if ((assetDepreciationProfile.AssetEndDependOnServiceLife == true) && (periods < 1))
                {
                    if (orgPeriodEnd <= parmRunDate)
                    {
                        assetAmount -= prevDepAmountPriorYears + prevDepAmountThisYear + prevDepAmountExternal + extraordinaryDepAmount - amountToDepreciate;
                        theEnd = true;
                    }
                }
            }
        }

        return assetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountAfterThresholdPeriod_IN</Name>
				<Source><![CDATA[
    private AssetAmount getAmountAfterThresholdPeriod_IN(AssetAmount _amountToDepreciate)
    {
        return (_amountToDepreciate *
               this.percentage() / 100) /
               this.getNumberOfPeriodsInCurrentYear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountInThresholdPeriod_IN</Name>
				<Source><![CDATA[
    private AssetAmount getAmountInThresholdPeriod_IN(AssetAmount _amountToDepreciate)
    {
        return (_amountToDepreciate *
               (this.percentage() / 100) *
               (AssetParameters::find().ThresholdPercentage_IN / 100)) /
               this.getNumberOfPeriodsInCurrentYear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfPeriodsInCurrentYear</Name>
				<Source><![CDATA[
    private int getNumberOfPeriodsInCurrentYear()
    {
        TransDate deprecationStartYear = deprInterval.findFirstDayOfYear(assetBook.DepreciationStartDate);
        TransDate deprecationYear = deprInterval.findFirstDayOfYear(depreciationDate);

        int ret = deprecationStartYear == deprecationYear
            ? deprInterval.numOfPeriodsLeftInYear(assetBook.DepreciationStartDate)
            : deprInterval.assetDepreciationTime(depreciationDate);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountToDepreciateInThresholdPeriod_IN</Name>
				<Source><![CDATA[
    private AssetAmount getAmountToDepreciateInThresholdPeriod_IN(TransDate _periodEnd)
    {
        AssetAmount amountToDepreciateInDepreciationThreshold;

        if (!previousDepreciationDate
            && assetBook.AssetGroupDepreciation_IN == NoYes::Yes
            && assetDepreciationProfile.Accrual == AssetAccrual::Yearly
            && AssetParameters::isDepreciationIncomeTaxActEnable_IN())
        {
            TransDate periodStartDate = _periodEnd - AssetParameters::find().DepreciationThreshold_IN;

            if (isReportingCurrencyDepreciation)
            {
                amountToDepreciateInDepreciationThreshold = AssetTrans::amountReportingCurrencyPerDate(assetBook.AssetId, assetBook.BookId, periodStartDate, _periodEnd);
            }
            else
            {
                amountToDepreciateInDepreciationThreshold = AssetTrans::amountMSTPerDate(assetBook.AssetId, assetBook.BookId, periodStartDate, _periodEnd);
            }
        }

        return amountToDepreciateInDepreciationThreshold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMaxPercentForYear</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the maximum percent of depreciation that is allowed in Germany.
    /// </summary>
    /// <param name="_oldPercentage">
    ///    The existing percentage that is calculated as part of the percentage method on this class.
    /// </param>
    /// <returns>
    ///    If the percentage specified by the <paramref name="_oldPercentage" /> parameter is less than the
    ///    maximum allowed percentage, the value of the <paramref name="_oldPercentage" /> parameter is
    ///    returned; otherwise, the maximum allowed percentage is returned.
    /// </returns>
    /// <remarks>
    ///    This method is intended to be used with the German feature that allows the user to setup a maximum
    ///    percentage and a maximum relation for reducing balance depreciation proposals. German law requires
    ///    that the maximum amount of depreciation taken in a year cannot exceed either a specified percentage
    ///    or a specified factor of the straight line depreciation calculation for the asset.
    /// </remarks>
    AssetDepreciationPercentage calcMaxPercentForYear(AssetDepreciationPercentage _oldPercentage)
    {
        AssetParametersDeprRates_DE     assetParametersDeprRates;
        AssetDepreciationPercentage     maxPercentForYear;
        AssetDepreciationPercentage     yearlySLRelationDeprRate;
        AssetDepreciationPercentage     returnPercent;
        str                             infologMessage;
        AssetBook                       assetBookLocal;

        // If there are already depreciation transactions posted against this asset, the Percent after validation value
        //  should be 'locked in' and used from here on out.
        if (AssetTrans::existDepreciationTrans(assetBook.AssetId, assetBook.BookId))
        {
            if (assetBook.MaxPercentRB != 0)
            {
                return assetBook.MaxPercentRB;
            }
            else
            {
                return _oldPercentage;
            }
        }

        // Find the correct AssetParametersDeprRates record based on the acquisition date of this asset
        assetParametersDeprRates = AssetParametersDeprRates_DE::findByDate(assetBook.AcquisitionDate);

        if (assetParametersDeprRates.RecId)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceDE00002, funcName());
        }

        // If no record exists in the Maximum depreciation rates table, return the original calculated percentage
        if (!assetParametersDeprRates
            || (!assetParametersDeprRates.MaxPercentRB
            && !assetParametersDeprRates.MaxRelationRBFactor))
        {
            infologMessage = "@SYS108318";

            // If this infolog message is not already the last message in the infolog
            if (!isInfologAlreadyDisplayed)
            {
                warning(infologMessage);
                isInfologAlreadyDisplayed = true;
            }

            returnPercent = _oldPercentage;
        }

        // Find the maximum percentage allowed taking into account the relation factor.
        //  The calculation to find the maximum allowed per year is (Acquisition Cost/Service Life) * Maximum relation factor
        // If statement used to avoid a divide by 0 error
        if (assetBook.ServiceLife && assetBook.AcquisitionPrice)
        {
            yearlySLRelationDeprRate = ((assetBook.AcquisitionPrice / assetBook.ServiceLife) / assetBook.AcquisitionPrice)
                                        * assetParametersDeprRates.MaxRelationRBFactor * 100;
        }
        else    // If no Service Life or Acquisition Price, we can't calculate, so just return the profile's percent
        {
            return _oldPercentage;
        }

        if (!returnPercent)
        {
            // We always take the lesser of the two calculated percentages
            if (assetParametersDeprRates.MaxPercentRB < yearlySLRelationDeprRate)
            {
                maxPercentForYear = assetParametersDeprRates.MaxPercentRB;
            }
            else
            {
                maxPercentForYear = yearlySLRelationDeprRate;
            }

            // Finally we take the lesser of the original calculated percent (_oldPercentage)
            //  and the new max percentage that we found.
            if (maxPercentForYear < _oldPercentage)
            {
                returnPercent = maxPercentForYear;

                if (!isInfologAlreadyDisplayed)
                {
                    infologMessage = strFmt("@SYS108319", maxPercentForYear);
                    info(infologMessage);
                    isInfologAlreadyDisplayed = true;
                }
            }
            else
            {
                returnPercent = _oldPercentage;
            }
        }

        // Need to place returnPercent value into table field, because field and variable of the same type have different decimal precision.
        assetBookLocal.MaxPercentRB = returnPercent;

        // If the percentage being used is different than what is on the assetBook, change it to this percentage
        if (assetBookLocal.MaxPercentRB != assetBook.MaxPercentRB)
        {
            // Update the assetBook with the last used percentage
            //  We only need to do this one time for each depreciation proposal run
            assetBook.selectForUpdate(true);
            assetBook.MaxPercentRB = returnPercent;
            assetBook.update();
            assetBook.selectForUpdate(false);
        }

        return returnPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRestPeriod</Name>
				<Source><![CDATA[
    protected void calcRestPeriod(AssetTransDate _startOfPeriod)
    {
        super(_startOfPeriod);

        //
        //  The restPeriod may be updated based on the assets depreciation convention or
        //  will be returned unchanged.
        //
        deprConv.parmIsPartialMonthCalculation(isFirstPeriodPartialDepreciation);
        restPeriod = deprConv.calcRestPeriod(restPeriod, periodstart, periods);

        //Modifed code to avoid, applying convention rule in case of of other adjustment.
        if (this.parmIsOtherAdjustments())
        {
            restPeriod = 1;
        }

        if (calculatePrevPeriods && ! amountToDepreciate)
        {
            prevPeriods += restPeriod;
        }
        else
        {
            calculatePrevPeriods = false;
            //
            //  This code branch ensures the accuracy of the original calculated amount.
            //

            if (AssetParameters::checkAssetParameters_IN())
            {
                if (!shiftDepreciation && assetBook.AssetGroupDepreciation_IN == NoYes::No)
                {
                    this.adjustAssetAmount();
                }
            }
            else
            {
                this.adjustAssetAmount();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustAssetAmount</Name>
				<Source><![CDATA[
    private void adjustAssetAmount()
    {
        if (assetBook.DepreciationConvention == AssetDepreciationConvention::None)
        {
            if (isFirstYearPartialDepreciation && isProratedDaysCalculation)
            {
                assetAmount = assetBook.roundDepreciationAmount(
                    assetAmount,
                    isReportingCurrencyDepreciation);
            }
            else
            {
                assetAmount = assetBook.roundDepreciationAmount(
                    assetAmount * (restPeriod + prevPeriods),
                    isReportingCurrencyDepreciation);
            }
        }
        else
        {
            assetAmount = deprConv.calcCurrencyAmount(assetAmount, (restPeriod + prevPeriods));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>AssetTableeMethod</c> class.
    /// </summary>
    public void init()
    {
        super();
        // <GIN>
        if (AssetParameters::checkAssetParameters_IN())
        {
            firstYear = true;
        }
        // </GIN>
    //
    //  This property is required to get the asset completely depreciatiate based on service life
    //  and must be initialized from the assetBook.LifeTimeRest property and updated based on the
    //  restPeriod value.
    //
        periods  = assetBook.LifeTimeRest;

        prevDepAmount = this.prvDepreciationAmount(this.getCurrentDepreciationPeriodStartDate());

        // Construct an asset depreciation convention class.
        deprConv = AssetTableDepConv::newCalcAssetAmount(assetBook, deprInterval, assetDepreciationProfile);
        deprConv.parmIsReportingCurrencyDepreciation(isReportingCurrencyDepreciation);

        if (assetBook.DepreciationConvention != AssetDepreciationConvention::None)
        {
            //  Calculate any depreciations taken the previous years.
            prevDepAmountPriorYears = this.prevDepAmountPriorYears(this.getCurrentDepreciationPeriodStartDate());

            if (assetBook.RevaluationGroupId)
            {
                prevDepAmountPriorYears -= assetSumCalc_Trans.depreciationRevaluationValue();
            }

            //  Calculate any depreciations taken this year.
            prevDepAmountThisYear = this.prevDepAmountThisYear(this.getCurrentDepreciationPeriodStartDate());
        }

        // Needed as part of German Declining Depreciations
        assetParameters = AssetParameters::find();

        isTrueUpDepreciationRequired = assetBook.isTrueUpDepreciationRequired();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(
        AssetBook           _assetBook,
        AssetTransDate      _assetTransDate,
        boolean             _dualDepreciation,
        boolean             _depreciationAltProfile,
        boolean             _depreciationExtProfile,
        AssetBudgetModelId  _assetBudgetModelId = '')
    {
        super(_assetBook,
            _assetTransDate,
            _dualDepreciation,
            _depreciationAltProfile,
            _depreciationExtProfile,
            _assetBudgetModelId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    public boolean next()
    {
        // <GIN>
        AssetBookTable  assetBookTable;
        // </GIN>
    //
    //  This is to prevent divide by zeros errors during the percentage() method
    //  if the assetBook.ServiceLife property is zero. It will cause the asset to
    //  be ignored during the depreciation "Profile" or "Proposal" process.
    //
        switch (assetDepreciationProfile.Method)
        {
            //
            //  These "Reducing Balance" depreciation methods require a "ServiceLife"
            //  value order to provide a correct precentage value to the calculation process.
            //
            //  The standard reducing balance depreciation method does not require
            //  a "ServiceLife" to provide a correct percentage value so therefore
            //  it is not included in this validation.
            //
            case AssetDepreciationMethod::ReducingBalance125:
            case AssetDepreciationMethod::ReducingBalance150:
            case AssetDepreciationMethod::ReducingBalance175:
            case AssetDepreciationMethod::ReducingBalance200:
                if (!assetBook.ServiceLife)
                {
                    return false;
                }
        }

        if (theEnd)
            return false;

        if (parmRunDate <= baseDate)
            return false;

        // <GIN>
        if (AssetParameters::isDepreciationCompaniesActEnable_IN()
            && assetDepreciationProfile.Method == AssetDepreciationMethod::ReducingBalance
            && parmRunDate >= periodstart
            && parmRunDate <= periodEnd
            && AssetBookShiftDepreciation_IN::existByAssetIdBookId(assetBook.AssetId, assetBook.BookId))
        {
            assetBookTable = AssetBookTable::find(assetBook.BookId);
            if (assetBookTable.CurrentOperationsTax == CurrentOperationsTax::Current
                && FiscalCalendar_IN::findByFiscalCalendar(assetBookTable.FiscalCalendar).CalendarType == CalendarType_IN::DayBased)
            {
                periodEnd = parmRunDate;
            }
        }
        // </GIN>

        this.setDepDate();

        //
        //  This prevents depreciations with invalid dates from
        //  being handled.
        //
        if (!depreciationDate ||
            depreciationDate > parmRunDate)
        {
            return false;
        }

        if (periodEnd < periodstart)
        {
            return false;
        }

        //calculate depreciation for adjument transaction for Revaluation, WriteDownAdj, WriteUpAdj.
        if ( (assetBook.IsTrueUpDepreciation && isTrueUpDepreciationRequired)
                && this.parmIsCatchUpDepreciation() && periodEnd > assetBook.LastDepreciationDate)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriod</Name>
				<Source><![CDATA[
    public AssetDepreciationTime parmPeriod(AssetDepreciationTime _periods = periods)
    {
        ;
        periods = _periods;

        return periods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrevDepAmountPriorYears</Name>
				<Source><![CDATA[
    public AssetAmount parmPrevDepAmountPriorYears(AssetAmount _prevDepAmountPriorYears = prevDepAmountPriorYears)
    {
        prevDepAmountPriorYears = _prevDepAmountPriorYears;

        return prevDepAmountPriorYears;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrevDepAmountThisYear</Name>
				<Source><![CDATA[
    public AssetAmount parmPrevDepAmountThisYear(AssetAmount _prevDepAmountThisYear = prevDepAmountThisYear)
    {
        prevDepAmountThisYear = _prevDepAmountThisYear;

        return prevDepAmountThisYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>percentage</Name>
				<Source><![CDATA[
    protected AssetDepreciationPercentage percentage()
    {
        #DEFINE.RB125_Factor(1.25)
        #DEFINE.RB150_Factor(1.50)
        #DEFINE.RB175_Factor(1.75)
        #DEFINE.RB200_Factor(2.00)

        AssetDepreciationPercentage percentage;
        AssetParametersDeprRates_DE assetParametersDeprRatesDE;

        switch (assetDepreciationProfile.Method)
        {
            case AssetDepreciationMethod::ReducingBalance125:
                percentage = AssetTableMethod_RB::calculatePercentagByFactor(#RB125_Factor, assetBook.ServiceLife);
                break;

            case AssetDepreciationMethod::ReducingBalance150:
                percentage = AssetTableMethod_RB::calculatePercentagByFactor(#RB150_Factor, assetBook.ServiceLife);
                break;

            case AssetDepreciationMethod::ReducingBalance175:
                percentage = AssetTableMethod_RB::calculatePercentagByFactor(#RB175_Factor, assetBook.ServiceLife);
                break;

            case AssetDepreciationMethod::ReducingBalance200:
                percentage = AssetTableMethod_RB::calculatePercentagByFactor(#RB200_Factor, assetBook.ServiceLife);
                break;

            default:
                //  Call the parent class method in order to maintain original code.
                percentage = super();
                break;
        }

        if (isoCountryCode == #isoDE)
        {
            // Used for German Declining Depreciation feature
            if ( assetParameters.CheckMaxPercentRB
                &&  assetBook.CheckMaxPercentRB
                &&  assetDepreciationProfile.Method == AssetDepreciationMethod::ReducingBalance )
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceDE00010, funcName());

                percentage = this.calcMaxPercentForYear(percentage);
            }
            else
            {
                // If Maximum depreciatin period is defined with values max. relation and max. percentage (e.g. 25% and 2,5 )
                // and parameter "Check maximum percent" is not activated warn the user.
                if (!isInfologAlreadyDisplayed
                    && assetParameters.CheckMaxPercentRB
                    && !assetBook.CheckMaxPercentRB)
                {
                    assetParametersDeprRatesDE = AssetParametersDeprRates_DE::findByDate(assetBook.AcquisitionDate);
                    if (assetParametersDeprRatesDE.MaxPercentRB && assetParametersDeprRatesDE.MaxRelationRBFactor )
                    {
                        warning(strFmt("@SYS152376", assetBook.AssetId));
                        isInfologAlreadyDisplayed = true;
                    }
                }

                // If the Depreciation proposal or Inquiry > Profile is now being run without German Declining Depreciation
                //  validation being used, then set MaxPercentRB back to 0.
                if (assetBook.MaxPercentRB != 0
                    && !AssetTrans::existDepreciationTrans(assetBook.AssetId, assetBook.BookId))
                {
                    assetBook.selectForUpdate(true);
                    assetBook.MaxPercentRB = 0;
                    assetBook.update();
                    assetBook.selectForUpdate(false);
                }
            }

            // Take care of the case where German Declining Depreciation has validated to a limited percentage
            //  and then the functionality has bee turned off
            if (AssetTrans::existDepreciationTrans(assetBook.AssetId, assetBook.BookId)
                && assetBook.MaxPercentRB)
            {
                return assetBook.MaxPercentRB;
            }
        }

        return percentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevDepAmountPriorYears</Name>
				<Source><![CDATA[
    //  This method caculates the assets total amount of depreciation for all years prior to the current year.
    private AssetAmount prevDepAmountPriorYears(AssetTransDate _assetTransDate)
    {
        //  This date range represents the earliest transaction date possible to the
        //  last day of the previous year.
        AssetTransDate fromDate = dateNull();
        AssetTransDate toDate = deprInterval.openingPeriodDate(_assetTransDate) - 1;

        AssetSumCalc assetSumCalc = this.getAssetSumCalcForPeriod(fromDate, toDate);

        if (assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Calendar && year(_assetTransDate) <= year(assetBook.AcquisitionDate))
        {
            assetSumCalc.parmIsPriorYear(true);
        }

        if (assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Fiscal && deprInterval.closingPeriodDate(_assetTransDate) <= deprInterval.closingPeriodDate(assetBook.AcquisitionDate))
        {
            assetSumCalc.parmIsPriorYear(true);
        }

        //  Create a total for all the asset depreciations and
        //  depreciation adjustments between (including) the two (2) dates.
        AmountMST depreciationValue = assetSumCalc.depreciationValue();
        AmountMST depreciationAdjValue = assetSumCalc.depreciationAdjValue();
        AssetAmount retValue = -(depreciationValue + depreciationAdjValue);

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevDepAmountThisYear</Name>
				<Source><![CDATA[
    //  This method caculates the assets total amount of depreciation for the current year.
    private AssetAmount prevDepAmountThisYear(AssetTransDate _assetTransDate)
    {
        //  This date range represents the beginning of this year to the
        //  date the of the next depreciation.
        AssetTransDate fromDate = deprInterval.openingPeriodDate(_assetTransDate);
        AssetTransDate toDate = deprInterval.endPeriod(_assetTransDate);

        AssetSumCalc assetSumCalc = this.getAssetSumCalcForPeriod(fromDate, toDate);

        if (assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Calendar && year(_assetTransDate) <= year(assetBook.AcquisitionDate))
        {
            assetSumCalc.parmIsCurrentYear(true);
        }

        if (assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Fiscal && deprInterval.closingPeriodDate(_assetTransDate) <= deprInterval.closingPeriodDate(assetBook.AcquisitionDate))
        {
            assetSumCalc.parmIsCurrentYear(true);
        }

        //  Create a total for all the asset depreciations and
        //  depreciation adjustments between (including) the two (2) dates.
        AmountMST depreciationValue = assetSumCalc.depreciationValue();
        AmountMST depreciationAdjValue = assetSumCalc.depreciationAdjValue();
        AssetAmount retValue = -(depreciationValue + depreciationAdjValue);

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetSumCalcForPeriod</Name>
				<Source><![CDATA[
    //  This method creates a period based AssetSumCalc for the current asset
    //  using the from date and the to date as the date range.
    private AssetSumCalc getAssetSumCalcForPeriod(AssetTransDate _fromDate, AssetTransDate _toDate)
    {
        AssetSumCalc assetSumCalc;

        if (assetBook.AssetGroupDepreciation_IN
            && AssetParameters::isDepreciationIncomeTaxActEnable_IN())
        {
            assetSumCalc = AssetSumCalc_Trans_IN::newAssetPeriod(
                assetBook.AssetGroup,
                assetBook.BookId,
                _fromDate,
                _toDate);
        }
        else
        {
            if (isReportingCurrencyDepreciation)
            {
                assetSumCalc = AssetSumCalc_Trans::newAssetPeriodByCurrency(
                    assetBook.AssetId,
                    assetBook.BookId,
                    _fromDate,
                    _toDate,
                    AssetSumCalcType::Reporting);
            }
            else
            {
                assetSumCalc = AssetSumCalc_Trans::newAssetPeriod(
                    assetBook.AssetId,
                    assetBook.BookId,
                    _fromDate,
                    _toDate);
            }
        }

        return assetSumCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prvDepreciationAmount</Name>
				<Source><![CDATA[
    public AssetAmount prvDepreciationAmount(AssetTransDate _assetTransDate, boolean _fixedDate = false)
    {
        AssetTransDate  depYearStart;
        AssetAmount     prvDepreciationAmount;

        if (! _fixedDate)
        {
            depYearStart = deprInterval.openingPeriodDate(_assetTransDate);
        }
        else
        {
            depYearStart = _assetTransDate;
        }

        // <GIN>
        if (AssetParameters::isDepreciationIncomeTaxActEnable_IN()
            && assetBook.AssetGroupDepreciation_IN)
        {
            prvDepreciationAmount = this.prvDepreciationAmount_IN(depYearStart);
        }
        else if (isReportingCurrencyDepreciation)
        {
            prvDepreciationAmount = -(AssetTrans::amountReportingCurrencyPerDateForDepreciation(
                                        assetBook.AssetId,
                                        assetBook.BookId,
                                        dateNull(),
                                        depYearStart - 1));
        }
        else
        {
        // </GIN>
            prvDepreciationAmount = -(AssetTrans::amountMSTPerDateForDepreciation(
                                        assetBook.AssetId,
                                        assetBook.BookId,
                                        dateNull(),
                                        depYearStart - 1));

        // <GIN>
        }
        // </GIN>
        return prvDepreciationAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prvDepreciationAmount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method caculates the assets total amount of depreciation for the previous year
    /// </summary>
    /// <param name="_depYearStart">
    /// The depreciation start year.
    /// </param>
    /// <returns>
    /// Returns the total amount of depreciation for the previous year.
    /// </returns>
    private AssetAmount prvDepreciationAmount_IN(AssetTransDate  _depYearStart)
    {
        AssetAmount     totalAcqAmount,tmpDepAmount;
        AssetTrans      assetTrans;
        AssetAmount     prvDepreciationAmount;
        AssetBook       assetBookLocal;

        AssetProposalDepreciation    assetProposalDepreciation = new AssetProposalDepreciation();

        if (assetProposalDepreciation.checkMultiAssetForAssetGroup_IN(assetBook.AssetGroup, assetBook.BookId))
        {
            prvDepreciationAmount   = 0;
        }
        else
        {
            if (assetBook.AssetGroupDepreciation_IN == NoYes::Yes && assetBook.LastDepreciationDate > assetBook.DepreciationStartDate)
            {
                prvDepreciationAmount = -(AssetGroupTrans_IN::amountMSTPerDateTranstype(assetBook.AssetGroup, _depYearStart - 1, assetBook.BookId, AssetTransType::Depreciation, assetBook.AssetId) +
                                          AssetGroupTrans_IN::amountMSTPerDateTranstype(assetBook.AssetGroup, _depYearStart - 1, assetBook.BookId, AssetTransType::DepreciationAdj, assetBook.AssetId));
                if (prvDepreciationAmount > 0)
                {
                    while select AssetGroup, BookId, TransDate, TransType, AssetId from assetTrans
                        where assetTrans.AssetGroup == assetBook.AssetGroup
                           && assetTrans.BookId     == assetBook.BookId
                           && assetTrans.TransDate   < _depYearStart - 1
                           && (assetTrans.TransType == AssetTransType::Acquisition
                           || assetTrans.TransType  == AssetTransType::AcquisitionAdj)
                    {
                        if (AssetBook::find(assetTrans.AssetId,assetTrans.BookId).DepreciationStartDate < AssetBook::find(assetTrans.AssetId,assetTrans.BookId).LastDepreciationDate)
                        {
                            totalAcqAmount += AssetGroupTrans_IN::acquisitionAmount(assetTrans.AssetId,_depYearStart - 1,assetTrans.BookId);
                        }
                    }

                    tmpDepAmount = totalAcqAmount * assetBook.depreciationPercentage() / 100;

                    if (prvDepreciationAmount != tmpDepAmount)
                    {
                        select assetBookLocal
                            where assetBookLocal.AssetGroupDepreciation_IN  == NoYes::Yes
                               && assetBookLocal.AssetGroup                 == assetBook.AssetGroup
                               && assetBookLocal.BookId                     ==  assetBook.BookId
                               && (assetBookLocal.Status                    ==  AssetStatus::Sold
                               || assetBookLocal.Status                     ==  AssetStatus::Scrapped);

                        if (assetBookLocal || this.existBookAcquiredInFirst180Days(_depYearStart))
                        {
                            if ((_depYearStart - assetBook.DepreciationStartDate) < 180)
                            {
                                if (totalAcqAmount)
                                {
                                    prvDepreciationAmount = ((AssetGroupTrans_IN::acquisitionAmount(assetBook.AssetId,_depYearStart - 1,assetBook.BookId))/ totalAcqAmount) *
                                                              tmpDepAmount * (AssetParameters::find().ThresholdPercentage_IN / 100) ;
                                }
                            }
                            else
                            {
                                if (totalAcqAmount)
                                {
                                    prvDepreciationAmount = ((AssetGroupTrans_IN::acquisitionAmount(assetBook.AssetId,_depYearStart - 1,assetBook.BookId))/ totalAcqAmount) *
                                                              tmpDepAmount;
                                }
                            }
                        }
                        else
                        {
                            if ((_depYearStart - assetBook.DepreciationStartDate) < 180)
                            {
                                if (totalAcqAmount)
                                {
                                    prvDepreciationAmount = ((AssetGroupTrans_IN::acquisitionAmount(assetBook.AssetId,_depYearStart - 1,assetBook.BookId))/ totalAcqAmount) *
                                                              prvDepreciationAmount * (AssetParameters::find().ThresholdPercentage_IN / 100) ;
                                }
                            }
                            else
                            {
                                if (totalAcqAmount)
                                {
                                    prvDepreciationAmount = ((AssetGroupTrans_IN::acquisitionAmount(assetBook.AssetId,_depYearStart - 1,assetBook.BookId))/ totalAcqAmount) *
                                                              prvDepreciationAmount;
                                }
                            }
                        }
                    }
                    else
                    {
                        if (totalAcqAmount)
                        {
                            prvDepreciationAmount = round(((AssetGroupTrans_IN::acquisitionAmount(assetBook.AssetId,_depYearStart - 1,assetBook.BookId))/ totalAcqAmount) * abs(prvDepreciationAmount),1.0);
                        }
                    }
                }
            }
        }
        return prvDepreciationAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existBookAcquiredInFirst180Days</Name>
				<Source><![CDATA[
    private boolean existBookAcquiredInFirst180Days(
        TransDate _depYearStart)
    {
        boolean bookExist = false;

        AssetBook assetBookLocal;
        while select assetBookLocal
            where assetBookLocal.AssetGroupDepreciation_IN == NoYes::Yes
                && assetBookLocal.AssetGroup == assetBook.AssetGroup
                && assetBookLocal.BookId == assetBook.BookId
                && _depYearStart > assetBookLocal.DepreciationStartDate
        {
            if (_depYearStart < assetBookLocal.DepreciationStartDate + 180)
            {
                bookExist = true;
                break;
            }
        }

        return bookExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePercentagByFactor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the percentage value based on the deprecation factor.
    /// </summary>
    /// <param name="_percentFactor">
    /// Factor amount used to calculate the percentage amount.
    /// </param>
    /// <param name="_serviceLife">
    /// The service life of the asset.
    /// </param>
    /// <returns>
    /// Percentage amount if the service life and factor are specified; otherwise zero.
    /// </returns>
    public static AssetDepreciationPercentage calculatePercentagByFactor(Percent _percentFactor, AssetServiceLife _serviceLife)
    {
        AssetDepreciationPercentage returnValue;

        if (_serviceLife)
        {
            returnValue = (1 / _serviceLife * _percentFactor) * 100;
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMaxPercentRB</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the 'Percentage after validation' field of the asset book.
    /// </summary>
    /// <param name = "_assetBook">Asset book.</param>
    /// <param name = "_assetTransDate">Asset trans date.</param>
    /// <param name = "_assetBudgetModelId">Asset budget model Identifier.</param>
    /// <param name = "_dualDepreciation">Dual depreciation.</param>
    /// <param name = "_depreciationAltProfile">Alternative depreciation profile.</param>
    /// <param name = "_depreciationExtProfile">Extraordinary depreciation profile.</param>
    /// <param name = "_depreciationAccleratedProfile_JP">Accelerated depreciation profile.</param>
    public static void updateMaxPercentRB(AssetBook          _assetBook,
                                          AssetTransDate     _assetTransDate,
                                          AssetBudgetModelId _assetBudgetModelId = '',
                                          boolean            _dualDepreciation = false,
                                          boolean            _depreciationAltProfile = false,
                                          boolean            _depreciationExtProfile = false,
                                          boolean            _depreciationAccleratedProfile_JP = false)
    {
        AssetTableMethod assetTableMethod = AssetTableMethod::construct(_assetBook, _assetTransDate, _assetBudgetModelId, _dualDepreciation, _depreciationAltProfile, _depreciationExtProfile, _depreciationAccleratedProfile_JP);

        if (assetTableMethod is AssetTableMethod_RB)
        {
            AssetTableMethod_RB assetTableMethod_RB = assetTableMethod;
            assetTableMethod_RB.percentage();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustAvailableAssetAmountDependsOnScrap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the available amount to depreciate depends on scrap value.
    /// </summary>
    /// <param name="_assetAmount">
    /// The amount to depreciate.
    /// </param>
    /// <returns>
    /// The available amount to depreciate.
    /// </returns>
    private AssetAmount adjustAvailableAssetAmountDependsOnScrap(AssetAmount _assetAmount)
    {
        AssetAmount assetAmountLoc = _assetAmount;
        AssetScrapValue scrapValue = isReportingCurrencyDepreciation ? assetBook.ScrapValueReportingCurrency : assetBook.ScrapValue;

        if (assetAmountLoc && scrapValue)
        {
            AssetAmount previousYearsDepAmount = this.prvDepreciationAmount(periodstart);
            AssetAmount currentYearDepAmount = this.prevDepAmountThisYear(periodstart);

            AssetAmount availableAssetAmount = amountToDepreciate
                - previousYearsDepAmount
                - currentYearDepAmount
                - depreciationThisRun
                - scrapValue;

            assetAmountLoc = availableAssetAmount > 0 ? min(availableAssetAmount, assetAmountLoc) : 0;
        }

        return assetAmountLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustRestToDepreciateAmountDependsOnScrap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the available rest to depreciate amount or zero
    /// if the initial value is less or equal to the scrap value.
    /// </summary>
    /// <param name="_restToDepreciate">
    /// Rest to depreciate amount.
    /// </param>
    /// <returns>
    /// Available rest to depreciate amount.
    /// </returns>
    private Amount adjustRestToDepreciateAmountDependsOnScrap(Amount _restToDepreciate)
    {
        Amount restToDepreciateLoc = _restToDepreciate;
        AssetScrapValue scrapValue = isReportingCurrencyDepreciation
            ? assetBook.ScrapValueReportingCurrency
            : assetBook.ScrapValue;

        int sign = assetBook.getAcquisitionAmountSign();

        if (sign * restToDepreciateLoc <= sign * scrapValue)
        {
            restToDepreciateLoc = 0.0;
        }

        return restToDepreciateLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccumulatedDepreciation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets already posted depreciation amount.
    /// </summary>
    /// <returns>
    /// Returns the total amount depreciated.
    /// </returns>
    internal AssetAmount getAccumulatedDepreciation()
    {
        AssetAmount accumulatedDepreciation;

        if (assetBook.AssetGroupDepreciation_IN
            && AssetParameters::isDepreciationIncomeTaxActEnable_IN())
        {
            accumulatedDepreciation = this.prvDepreciationAmount_IN(assetBook.LastDepreciationDate);
        }
        else if (isReportingCurrencyDepreciation)
        {
            accumulatedDepreciation = -(AssetTrans::amountReportingCurrencyPerDateForDepreciation(
                                        assetBook.AssetId,
                                        assetBook.BookId,
                                        dateNull(),
                                        assetBook.LastDepreciationDate));
        }
        else
        {
            accumulatedDepreciation = -(AssetTrans::amountMSTPerDateForDepreciation(
                                        assetBook.AssetId,
                                        assetBook.BookId,
                                        dateNull(),
                                        assetBook.LastDepreciationDate));
        }

        return accumulatedDepreciation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>