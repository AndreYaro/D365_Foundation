<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayTblStream</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class for working with database.
/// </summary>
class RPayTblStream
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getRPayTblTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find or creates <c>RPayTblTrans</c> record base on parameters.
    /// </summary>
    /// <param name="_journal">
    /// <c>RPayTblJournal</c> record.
    /// </param>
    /// <param name="_dimension">
    /// Time dimension.
    /// </param>
    /// <param name="_context">
    /// Time context
    /// </param>
    /// <returns>
    /// <c>RPayTblTrans</c> record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayTblTrans getRPayTblTrans(RPayTblJournal _journal, RPayTblDimension _dimension, RPayTblContext _context)
    {
        RPayTblTrans    tblTrans;

        select firstOnly tblTrans
            where tblTrans.PayTblNum        == _journal.TblNum
               && tblTrans.SourceDate       == _dimension.parmSourceDate()
               && tblTrans.EmplId           == _context.parmEmpId()
               && tblTrans.Stavka[1]        == conPeek(_dimension.parmTblRate(), 1)
               && tblTrans.Stavka[2]        == conPeek(_dimension.parmTblRate(), 2)
               && tblTrans.Stavka[3]        == conPeek(_dimension.parmTblRate(), 3)
               && tblTrans.HcmTitle         == _dimension.parmHcmTitleId()
               && tblTrans.PayCalendarId    == _dimension.parmCalendarId()
               && tblTrans.CorrectedPeriod  == _dimension.parmCorrectedPeriod();

        if ( !tblTrans)
        {
            tblTrans.clear();
            tblTrans.PayTblNum      = _journal.TblNum;
            tblTrans.SourceDate     = _dimension.parmSourceDate();
            tblTrans.EmplId         = _context.parmEmpId();
            tblTrans.Stavka[1]      = conPeek(_dimension.parmTblRate(), 1);
            tblTrans.Stavka[2]      = conPeek(_dimension.parmTblRate(), 2);
            tblTrans.Stavka[3]      = conPeek(_dimension.parmTblRate(), 3);
            tblTrans.HcmTitle       = _dimension.parmHcmTitleId();
            tblTrans.PayCalendarId  = _dimension.parmCalendarId();
            tblTrans.CorrectedPeriod = _dimension.parmCorrectedPeriod();
            tblTrans.insert();
        }

        tblTrans.selectForUpdate(true);
        return tblTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readTime</Name>
				<Source><![CDATA[
private RPayTblTimeList readTime(
        ReportPeriod_RU _sourceDate,
        ReportPeriod_RU _startDate,
        ReportPeriod_RU _endDate,
        RPayTblContext  _context,
        RPayTblDate     _tblDate = dateNull())
    {
        RPayTblTimeList ret = new RPayTblTimeList();
        RPayTblTrans    tblTrans;
        RPayTblJournal  tblJournal;
        TransDate       start, end;
        TransDate       curDate;
        RPayTblDayHourTrans dayHourTrans;
        RPayTblDayHour  h;

        void addTime()
        {
            RPayTblTime     curTime;

            curTime = new RPayTblTime();
            curTime.dimension().parmCalendarId(tblTrans.PayCalendarId);
            curTime.dimension().parmTimeCode(dayHourTrans.PayTblTimeCode);
            curTime.dimension().parmHcmTitleId(tblTrans.HcmTitle);
            curTime.dimension().parmOrganizationId(tblTrans.rpayTblJournal().HrmOrganizationId);
            curTime.dimension().parmPayFormType(tblTrans.rpayTblJournal().PayFormType);
            curTime.dimension().parmSourceDate(tblTrans.SourceDate);
            curTime.dimension().parmTblRate([tblTrans.Stavka[1],tblTrans.Stavka[2],tblTrans.Stavka[3]]);
            curTime.dimension().parmCorrectedPeriod(tblTrans.CorrectedPeriod);
            curTime.parmStartDate(start);
            curTime.parmEndDate(end);
            curTime.parmHours(h);
            if (h)
            {
                ret.addEnd(curTime);
            }
        }
        while select tblTrans
            where tblTrans.SourceDate       == _sourceDate
               && tblTrans.EmplId           == _context.parmEmpId()
            join tblJournal
                where tblJournal.TblNum == tblTrans.PayTblNum &&
                      (tblJournal.TblDate >= _tblDate || !_tblDate)
        {
            while select dayHourTrans
                where dayHourTrans.TblTransRecId == tblTrans.RecId
            {
                h = dayHourTrans.getHour(dayOfMth(_startDate));
                start = _startDate;
                for (curDate = _startDate; curDate <= _endDate; curDate++)
                {
                    if (h == dayHourTrans.getHour(dayOfMth(curDate)))
                    {
                        end = curDate;
                    }
                    else
                    {
                        addTime();

                        start = curDate;
                        end = start;
                        h = dayHourTrans.getHour(dayOfMth(curDate));
                    }
                }
                addTime();
            }
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>readTimeList</Name>
				<Source><![CDATA[
/// <summary>
    /// Reads actual state for all times in list.
    /// </summary>
    /// <param name="_list">
    /// <c>RPayTblTimeList</c> list
    /// </param>
    /// <param name="_context">
    /// time context.
    /// </param>
    /// <param name="_tblDate">
    /// The minimum period of timesheet that should be considered.
    /// </param>
    /// <returns>
    /// <c>RPayTblTimeList</c> list with actual state
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayTblTimeList readTimeList(RPayTblTimeList _list, RPayTblContext _context, RPayTblDate _tblDate = dateNull())
    {
        RPayTblTimeList ret = new RPayTblTimeList();
        Set             datesSet = new Set(Types::Container);
        SetEnumerator   se;
        RPayTblTime     time;
        ListEnumerator le = _list.periods().getEnumerator();

        while (le.moveNext())
        {
            time = le.current();
            datesSet.add([time.dimension().parmSourceDate(), time.parmStartDate(), time.parmEndDate()]);
        }

        se = datesSet.getEnumerator();

        while (se.moveNext())
        {
            ret.append(this.readTime(conPeek(se.current(), 1), conPeek(se.current(), 2), conPeek(se.current(), 3), _context, _tblDate));
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>updateCalendarTimeTrans</Name>
				<Source><![CDATA[
    private void updateCalendarTimeTrans(RPayCalendarTimeTrans _calendarTrans, RPayTblTime _time)
    {
        RPayTblTimeTable tblTime = RPayTblTimeTable::find(_time.dimension().parmPayFormType(), _time.dimension().parmTimeCode());

        int days = _time.parmEndDate() - _time.parmStartDate() + 1;

        if (RPayTblTimeTypeCalc::Days != tblTime.PayTblTimeTypeCalc)
        {
            _calendarTrans.Hour += _time.parmHours() * days;
        }

        if (RPayTblTimeTypeCalc::Hours != tblTime.PayTblTimeTypeCalc && abs(_time.parmHours()) > 4)
        {
            _calendarTrans.Day  += days * (_time.parmHours() < 0 ? (-1) : 1);
        }

        if (_calendarTrans.Day == 0 && _calendarTrans.Hour == 0)
        {
            _calendarTrans.delete();
        }
        else
        {
            _calendarTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDayHourTrans</Name>
				<Source><![CDATA[
    private void updateDayHourTrans(RPayTblDayHourTrans _trans, RPayTblTime _time)
    {
        TransDate               curDate;
        TransDate               start;
        TransDate               end;

        start = max(_time.parmStartDate(), dateStartMth(RPayTblTrans::findRecId(_trans.TblTransRecId).SourceDate));
        end   = min(_time.parmEndDate(), dateEndMth(RPayTblTrans::findRecId(_trans.TblTransRecId).SourceDate));
        if (start > end)
        {
            return;
        }

        for (curDate = start; curDate <= end; curDate++)
        {
            _trans.addHour(dayOfMth(curDate), _time.parmHours());
        }

        if (_trans.sumHours() == 0)
        {
            _trans.doDelete();
        }
        else
        {
            _trans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeTime</Name>
				<Source><![CDATA[
    private void writeTime(RPayTblTime _time, RPayTblContext _context)
    {
        RPayTblJournal          tblJournal;
        RPayTblTrans            tblTrans;
        RPayCalendarTimeTrans   calendarTimeTrans;
        RPayTblDayHourTrans     dayHourTrans;
        RPayTblDimension        dim = _time.dimension();
        container               conSrcDoc;

        if (_time.parmHours() == 0)
        {
            return;
        }

        tblJournal = RPayTblJournal::findOrCreate(dim.parmOrganizationId(),
                                                  max(RPayParameters::payPeriod(_context.parmEmpId()), dim.parmSourceDate()),
                                                  dim.parmPayFormType());

        tblTrans = this.getRPayTblTrans(tblJournal, dim, _context);

        conSrcDoc = _time.parmSrcDocumentAttr();
        RPayTblTransDocRelation::addRelation(tblTrans.RecId, conPeek(conSrcDoc, 1),  conPeek(conSrcDoc, 2));

        //RPayCalendarTimeTrans
        calendarTimeTrans = RPayCalendarTimeTrans::findOrCreateByTimeCode(tblTrans.RecId, _time.dimension().parmTimeCode());
        this.updateCalendarTimeTrans(calendarTimeTrans, _time);
        //RPayTblDayHourTrans
        dayHourTrans = RPayTblDayHourTrans::findOrCreate(tblTrans.RecId, _time.dimension().parmTimeCode());
        this.updateDayHourTrans(dayHourTrans, _time);

        RPayTblEmplSum::calculateEmpl(_context.parmEmpId(), _time.dimension().parmSourceDate(),
                                      RPayEmplTblSum::payCalendarId(_context.parmEmpId(), _time.dimension().parmSourceDate()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeTimeList</Name>
				<Source><![CDATA[
    /// <summary>
    /// updates database and write all times in list.
    /// </summary>
    /// <param name="_list">
    /// <c>RPayTblTimeList</c> to write.
    /// </param>
    /// <param name="_context">
    /// time context
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void writeTimeList(RPayTblTimeList _list, RPayTblContext _context)
    {
        ListEnumerator le = _list.periods().getEnumerator();

        while (le.moveNext())
        {
            this.writeTime(le.current(), _context);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>