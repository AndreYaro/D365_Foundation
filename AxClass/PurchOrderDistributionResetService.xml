<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchOrderDistributionResetService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchOrderDistributionSelfService</c> class provides the service to Reset the Purchase Order Distributions. 
/// </summary>
public class PurchOrderDistributionResetService extends SysOperationServiceController
{
    PurchId                             purchId;
    PurchTable                          purchTable;
    SourceDocumentHeader                sourceDocumentHeader;
    SourceDocumentLine                  sourceDocumentLine;
    RefRecId                            sourceDocumentHeaderRecId;
    
    private PurchInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private PurchInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = PurchInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOperations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets Purchase Order Distributions associated with <c>PurchId</c> records specified by the
    /// provided <c>PurchOrderDistributionResetContract</c> contract.
    /// </summary>
    /// <param name = "_contract">
    /// A <c>PurchOrderDistributionResetContract</c> object specifying the <c>PurchId</c> that should
    /// have its Distributions reset.
    /// </param>
    public void processOperations(PurchOrderDistributionResetContract _contract)
    {
        purchId =  _contract.parmPurchId();

        using (var activityContext = this.instrumentationLogger().purchOrderDistributionReset().run(purchId))
        {
            this.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount

        try
        {
            if (this.validate())
            {
                ttsbegin;

                if (Ledger::isLedgerBudgetControlEnabled())
                {
                    this.relieveBudgetAmount();
                }
                
                this.updatePurchTable();
                this.updateSourceDocumentTables();
                this.updatePurchReqSourceDocumentLines();
                this.deleteDistributions();

                ttscommit;
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            throw error("@SYS107340");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>relieveBudgetAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Relieves budget related to the <c>PurchId</c> using <c>BudgetControlSelfServiceProcessor</c>.
    /// </summary>
    private void relieveBudgetAmount()
    {
        using (var activityContext = this.instrumentationLogger().purchOrderDistributionReset().relieveBudgetAmount())
        {
            BudgetControlSelfServiceProcessor::submitSourceDocumentToReturnRemaining(purchTable.SourceDocumentHeader);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the header record assocaited to the <c>PurchId</c>.
    /// </summary>
    protected void updatePurchTable()
    {
        using (var activityContext = this.instrumentationLogger().purchOrderDistributionReset().updatePurchTable())
        {
            purchTable = PurchTable::find(purchId, true);
            sourceDocumentHeaderRecId = purchTable.SourceDocumentHeader;
        
            if (this.isChangeManagementEnabled())
            {
                VersioningPurchaseOrder versioningPurchOrder = VersioningPurchaseOrder::newPurchaseOrder(purchTable);

                if (!versioningPurchOrder.resetToDraft())
                {
                    purchTable.DocumentState = VersioningDocumentState::Draft;
                    purchTable.doUpdate();
                }
            }
            else
            {
                purchTable.DocumentState = VersioningDocumentState::Approved;
                purchTable.doUpdate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceDocumentTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the Source Document records associated to the <c>PurchId</c>.
    /// </summary>
    protected void updateSourceDocumentTables()
    {
        using (var activityContext = this.instrumentationLogger().purchOrderDistributionReset().updateSourceDocumentTables())
        {
            sourceDocumentHeader.skipDataMethods(true);
     
            update_recordset sourceDocumentHeader
                setting AccountingStatus = SourceDocumentAccountingStatus::InProcess
                where sourceDocumentHeader.RecId == sourceDocumentHeaderRecId;
                            
            sourceDocumentLine.skipDataMethods(true);
       
            update_recordset sourceDocumentLine
                setting AccountingStatus =  SourceDocumentLineAccountingStatus::Draft
                where sourceDocumentLine.SourceDocumentHeader == sourceDocumentHeaderRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteDistributions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the Accounting Distributions related to the <c>PurchId</c>.
    /// </summary>
    protected void deleteDistributions()
    {
        using (var activityContext = this.instrumentationLogger().purchOrderDistributionReset().deleteDistributions())
        {
            ProjectAccountingDistribution       projectAccountingDistribution;
            AccountingDistribution              accountingDistribution;

            if (projectAccountingDistribution)
            {
                projectAccountingDistribution.skipDataMethods(true);
                projectAccountingDistribution.skipDeleteActions(true);

                delete_from projectAccountingDistribution
                exists join accountingDistribution
                    where projectAccountingDistribution.AccountingDistribution == accountingDistribution.RecId
                       && accountingDistribution.SourceDocumentHeader == sourceDocumentHeaderRecId;
            }
        
            accountingDistribution.skipDataMethods(true);
            accountingDistribution.skipDeleteActions(true);

            delete_from accountingDistribution
            exists join sourceDocumentHeader
                where accountingDistribution.SourceDocumentHeader == sourceDocumentHeaderRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isChangeManagementEnabled</Name>
				<Source><![CDATA[
    private boolean isChangeManagementEnabled()
    {  
        return PurchTable::find(PurchId).ChangeRequestRequired;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies the <c>PurchId</c> if it is in the correct data state for the tool to be run.
    /// </summary>
    /// <returns>Returns true if <c>PurchId</c> is in correct state.</returns>
    public boolean validate()
    {
        boolean             ret = true;
        LedgerParameters    ledgerParameters;

        using (var activityContext = this.instrumentationLogger().purchOrderDistributionReset().validate())
        {
            select PurchId, DocumentState, PurchStatus from purchTable
                where purchTable.PurchId == purchId;

            select AccountingStatus from sourceDocumentLine
                join purchTable
                   where sourceDocumentLine.RecId == purchTable.SourceDocumentLine
                        && purchTable.PurchId == purchId;

            if (ledgerParameters.IsEncumbranceProcessEnabled == 1)
            {
                ret = checkFailed("@SCM:EncumbranceEnabled_SelfService");
            }
            else if ((purchTable.PurchStatus == PurchStatus::Canceled)
                || (purchTable.PurchStatus == PurchStatus::Invoiced)
                || (purchTable.DocumentState == VersioningDocumentState::Finalized)
                || ((purchTable.DocumentState == VersioningDocumentState::InReview)
                    && (sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Draft)))
            {
                ret = checkFailed("@SCM:PurchOrderIncorrectState");
            }

            if (PurchOrderDistributionResetServiceValidateFlight::instance().isEnabled())
            {
                ret = ret && purchTable.canAccountingDistributionsBeReset();
            }
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchReqSourceDocumentLines</Name>
				<Source><![CDATA[
    protected void updatePurchReqSourceDocumentLines()
    {
        using (var activityContext = this.instrumentationLogger().purchOrderDistributionReset().updatePurchReqSourceDocumentLines())
        {
            PurchReqLine purchReqLine;
            SourceDocumentLine parentSourceDocumentLine;

            sourceDocumentLine.skipDataMethods(true);
            sourceDocumentLine.skipEvents(true);

            update_recordset sourceDocumentLine
            setting AccountingStatus = SourceDocumentLineAccountingStatus::Completed
            join purchReqLine
            where purchReqLine.PurchId == purchId &&
                 (purchReqLine.SourceDocumentLine == sourceDocumentLine.RecId || purchReqLine.SourceDocumentLine == sourceDocumentLine.ParentSourceDocumentLine) &&
                  sourceDocumentLine.AccountingStatus <  SourceDocumentLineAccountingStatus::Completed;

            update_recordset sourceDocumentLine
            setting AccountingStatus = SourceDocumentLineAccountingStatus::Completed
            join parentSourceDocumentLine
                where parentSourceDocumentLine.RECID == sourceDocumentLine.ParentSourceDocumentLine
            join purchReqLine
                where purchReqLine.PurchId == purchId &&
                      purchReqLine.SourceDocumentLine == parentSourceDocumentLine.ParentSourceDocumentLine &&
                      sourceDocumentLine.AccountingStatus <  SourceDocumentLineAccountingStatus::Completed;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>