<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankStatementInteractionHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     This <c>BankStatementInteractionHelper</c> class is the helper class for controlling the enable status of buttons on
///     <c>BankReconciliationStatementListPage</c> and <c>BankReconciliationStatement</c> forms.
/// </summary>
public class BankStatementInteractionHelper
{
    BankStmtISOAccountStatement statement;

    boolean isGetRecord;
    boolean isEditable;
    boolean isManual;
    boolean isPostable;
    private boolean isPosted;
    boolean isStatementReversible;
    boolean isPassedValidation;
    boolean isAllowedReopen;
    private boolean isNewLineUnposted;

    boolean buttonEditEnabled;
    boolean buttonEditInGridEnabled;
    boolean buttonValidateEnabled;
    boolean buttonReopenEnabled;
    boolean buttonDeleteEnabled;

    boolean buttonAddLineEnabled;
    boolean buttonRemoveLineEnabled;

    boolean buttonPostEnabled;
    boolean buttonReversePostEnabled;

    private boolean buttonUpdateLineAccountingDateEnabled;
    private boolean isPostInBatchFeatureEnabled;
    private boolean isStatementPostBatchIsProcessing;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getEnabledAddLineButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the enable status of add line button.
    /// </summary>
    protected void getEnabledAddLineButton()
    {
        buttonAddLineEnabled = isGetRecord && isEditable && isManual;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnabledDeleteButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the enable status of delete button.
    /// </summary>
    protected void getEnabledDeleteButton()
    {
        buttonDeleteEnabled = isEditable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnabledEditButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the enable status of edit button.
    /// </summary>
    protected void getEnabledEditButton()
    {
        buttonEditEnabled = isGetRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnabledEditInGridButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the enable status of edit in grid button.
    /// </summary>
    protected void getEnabledEditInGridButton()
    {
        buttonEditInGridEnabled = isGetRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnabledPostButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the enable status of post button.
    /// </summary>
    protected void getEnabledPostButton()
    {
        buttonPostEnabled = isGetRecord && isPostable && !isStatementPostBatchIsProcessing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnabledReversePostButton</Name>
				<Source><![CDATA[
    protected void getEnabledReversePostButton()
    {
        buttonReversePostEnabled = isGetRecord && isStatementReversible;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnabledRemoveLineButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the enable status of remove line button.
    /// </summary>
    protected void getEnabledRemoveLineButton()
    {
        buttonRemoveLineEnabled = isGetRecord && isEditable && isManual;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnabledReopenButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the enable status of reopen button.
    /// </summary>
    protected void getEnabledReopenButton()
    {
        buttonReopenEnabled = isGetRecord && isAllowedReopen && !isStatementPostBatchIsProcessing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnabledValidateButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the enable status of validate button.
    /// </summary>
    protected void getEnabledValidateButton()
    {
        buttonValidateEnabled = isGetRecord && !isPassedValidation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnabledUpdateAccountingDateButton</Name>
				<Source><![CDATA[
    protected void getEnabledUpdateAccountingDateButton()
    {
        buttonUpdateLineAccountingDateEnabled = isGetRecord && !isPosted && isNewLineUnposted && !isStatementPostBatchIsProcessing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnabledGenerateButton</Name>
				<Source><![CDATA[
    [SysObsolete('This method is obsoleted', false, 07\11\2023)]
    protected void getEnabledGenerateButton()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnabledJournalsButton</Name>
				<Source><![CDATA[
    [SysObsolete('This method is obsoleted', false, 07\11\2023)]
    protected void getEnabledJournalsButton()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostInBatchFeatureEnabled</Name>
				<Source><![CDATA[
    private void getPostInBatchFeatureEnabled()
    {
        isPostInBatchFeatureEnabled = FeatureStateProvider::isFeatureEnabled(BankStatementPostInBatchFeature::instance());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the enable status of buttons on <c>BankReconciliationStatementListPage</c> form.
    /// </summary>
    public void initActions()
    {
        this.getEnabledEditButton();
        this.getEnabledEditInGridButton();
        this.getEnabledValidateButton();
        this.getEnabledReopenButton();
        this.getEnabledDeleteButton();
        this.getEnabledPostButton();
        this.getEnabledReversePostButton();
        this.getEnabledUpdateAccountingDateButton();
        this.getEnabledGenerateButton();
        this.getEnabledJournalsButton();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDetailsActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the enable status of buttons on <c>BankReconciliationStatement</c> form.
    /// </summary>
    public void initDetailsActions()
    {
        this.getEnabledEditButton();
        this.getEnabledValidateButton();
        this.getEnabledReopenButton();
        this.getEnabledDeleteButton();
        this.getEnabledAddLineButton();
        this.getEnabledRemoveLineButton();
        this.getEnabledPostButton();
        this.getEnabledReversePostButton();
        this.getEnabledUpdateAccountingDateButton();
        this.getEnabledGenerateButton();
        this.getEnabledJournalsButton();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the initial value based on given <c>BankStmtISOAccountStatement</c> record buffer.
    /// </summary>
    /// <param name="_statement">
    ///     The given <c>BankStmtISOAccountStatement</c> record.
    /// </param>
    private void new(BankStmtISOAccountStatement _statement)
    {
        statement = _statement;
        if (statement != null)
        {
            isGetRecord = true;
        }

        isEditable = statement.isEditable();
        isManual = statement.isManual();
        isPostable = statement.isPostable();
        isPosted = statement.Posted;
        isStatementReversible = statement.isStatementReversible();
        isPassedValidation = statement.isPassedValidation();
        isAllowedReopen = statement.isAllowedUpdateStatus(BankStatementStatus::Open);
        isPostInBatchFeatureEnabled = FeatureStateProvider::isFeatureEnabled(BankStatementPostInBatchFeature::instance());
        isStatementPostBatchIsProcessing = isPostInBatchFeatureEnabled && BankReconciliationOperationValidator::isAnyBatchJobProcessingOnRecord(statement.TableId, statement.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonAddLineEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonAddLineEnabled()
    {
        return buttonAddLineEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonDeleteEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonDeleteEnabled()
    {
        return buttonDeleteEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonEditEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonEditEnabled()
    {
        return buttonEditEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonEditInGridEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonEditInGridEnabled()
    {
        return buttonEditInGridEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonPostEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonPostEnabled()
    {
        return buttonPostEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonReversePostEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonReversePostEnabled()
    {
        return buttonReversePostEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonRemoveLineEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonRemoveLineEnabled()
    {
        return buttonRemoveLineEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonReopenEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonReopenEnabled()
    {
        return buttonReopenEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonValidateEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonValidateEnabled()
    {
        return buttonValidateEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonUpdateLineAccountingDateEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonUpdateLineAccountingDateEnabled()
    {
        return buttonUpdateLineAccountingDateEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIsNewLineUnposted</Name>
				<Source><![CDATA[
    internal void setIsNewLineUnposted(BankStmtISOReportEntry _statementLine)
    {
        isNewLineUnposted = _statementLine.IsNewBankDocument && !_statementLine.isPosted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostButtonVisible</Name>
				<Source><![CDATA[
    internal boolean parmPostButtonVisible()
    {
        // Remove form control after feature moving to the stage of mandatory
        return !isPostInBatchFeatureEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs the instance of <c>BankStatementInteractionHelper</c>
    ///     based on a given <c>BankStmtISOAccountStatement</c> record buffer.
    /// </summary>
    /// <param name="_statement">
    ///     The given <c>BankStmtISOAccountStatement</c> record.
    /// </param>
    /// <returns>
    ///     Returns instance of <c>BankStatementInteractionHelper</c>.
    /// </returns>
    public static BankStatementInteractionHelper construct(BankStmtISOAccountStatement _statement)
    {
        return new BankStatementInteractionHelper(_statement);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>