<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceJourExportSalesVAT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustInvoiceJourExportSalesVAT</c> class is responsible for domestic VAT calculation for export sales.
/// </summary>
public class CustInvoiceJourExportSalesVAT
{
    LedgerJournalNameId journalName;
    LedgerJournalId     journalNum;
    TransDate           postingDate;
    CustInvoiceJour     custInvoiceJour;
    ExportSalesInvoice  exportSalesInvoice;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createExportSalesDomesticTaxVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record of <c>ExportSalesInvoiceDomesticTaxVoucher</c> with the specified journal number and voucher.
    /// </summary>
    /// <param name="_journalNum">
    /// The journal number.
    /// </param>
    /// <param name="_voucher">
    /// The voucher.
    /// </param>
    /// <returns>
    /// A record of <c>ExportSalesInvoiceDomesticTaxVoucher</c> with the specified journal number and voucher.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected ExportSalesInvoiceDomesticTaxVoucher createExportSalesDomesticTaxVoucher(LedgerJournalId _journalNum, Voucher _voucher)
    {
        ExportSalesInvoiceDomesticTaxVoucher exportSalesInvoiceDomesticTaxVoucher;

        exportSalesInvoiceDomesticTaxVoucher = this.initializeExportSalesDomesticTaxVoucher(_journalNum, _voucher);

        return exportSalesInvoiceDomesticTaxVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExportSalesVAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates domestic VAT for the export sales and creates journal and journal lines for the calculated VAT.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void createExportSalesVAT()
    {
        LedgerJournalTable  ledgerJournalTable;
        Voucher             voucher;
        boolean             areLinesCreated;

        if (custInvoiceJour)
        {
            ledgerJournalTable = this.createJournalForExportSalesVAT();
        }

        if (ledgerJournalTable)
        {
            ttsbegin;
            voucher = this.getNewVoucher(ledgerJournalTable);
            areLinesCreated = this.createJournalLinesForExportSalesVAT(ledgerJournalTable, voucher);

            if (areLinesCreated)
            {
                this.createExportSalesDomesticTaxVoucher(ledgerJournalTable.JournalNum, voucher);
                ttscommit;
            }
            else
            {
                ttsabort;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalForExportSalesVAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a journal for the calculated domestic VAT for the export sales.
    /// </summary>
    /// <returns>
    /// A journal for the calculated domestic VAT for the export sales.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Journal is closed, user is blocked from using the journal, or journal is currently in use.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LedgerJournalTable createJournalForExportSalesVAT()
    {
        LedgerJournalTable  ledgerJournalTable;
        LedgerJournalName   ledgerJournalName;
        JournalTableData    journalTableData;

        if (journalNum)
        {
            ledgerJournalTable = LedgerJournalTable::find(journalNum);

            ledgerJournalName  = LedgerJournalName::find(ledgerJournalTable.JournalName);

            if (!ledgerJournalTable.checkJournalOpen()      ||
                !ledgerJournalTable.checkNotUserBlocked()   ||
                !ledgerJournalTable.checkNotSystemBlocked() ||
                !ledgerJournalTable.checkNotGroupBlocked())
            {
                throw error("@GLS222361");
            }
        }
        else
        {
            ledgerJournalName = LedgerJournalName::find(journalName);
            ledgerJournalTable.JournalName  = ledgerJournalName.JournalName;
            journalTableData = JournalTableData::newTable(ledgerJournalTable);
            ledgerJournalTable.JournalNum = NumberSeq::newGetNum(journalTableData.journalStatic().numRefJournalId(),true).num();
            ledgerJournalTable.initFromLedgerJournalName();
            ledgerJournalTable.insert();
        }

        return ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLinesForExportSalesVAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create journal lines in the specified journal with the specified voucher for the calculated domestic VAT for the export sales.
    /// </summary>
    /// <param name="_ledgerJournalTable">
    /// The journal.
    /// </param>
    /// <param name="_voucher">
    /// The voucher.
    /// </param>
    /// <returns>
    /// The journal lines for the calculated domestic VAT for the export sales.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean createJournalLinesForExportSalesVAT(LedgerJournalTable _ledgerJournalTable, Voucher _voucher)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger dimension for the journal line.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The journal line.
    /// </param>
    /// <returns>
    /// The ledger dimension for the journal line.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LedgerDimensionAccount getLedgerDimension(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerDimensionDefaultAccount   defaultAccount;
        LedgerDimensionAccount          ledgerDimensionAccount;

        defaultAccount = TaxLedgerAccountGroup::accountLedgerDimension(_ledgerJournalTrans.TaxCode, TaxDirection::OutgoingTax);
        ledgerDimensionAccount = _ledgerJournalTrans.getLedgerDimensionForLedgerType(
            defaultAccount,
            curext());

        return ledgerDimensionAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a new voucher number to create a journal line in the specified journal.
    /// </summary>
    /// <param name="_ledgerJournalTable">
    /// The journal.
    /// </param>
    /// <returns>
    /// A new voucher number to create a journal line in the specified journal.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Voucher cannot be created because new voucher number cannot be picked in the number sequence.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Voucher getNewVoucher(LedgerJournalTable _ledgerJournalTable)
    {
        JournalVoucherNum   journalVoucherNum;
        Voucher             voucher;

        journalVoucherNum = new JournalVoucherNum(JournalTableData::newTable(_ledgerJournalTable));

        if (journalVoucherNum)
        {
            voucher = journalVoucherNum.getNew(false);
        }

        if (!voucher)
        {
            throw error("@SYS26396");
        }

        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOffsetLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the offset ledger dimension for the journal line.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The journal line.
    /// </param>
    /// <returns>
    /// The offset ledger dimension for the journal line.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LedgerDimensionAccount getOffsetLedgerDimension(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerDimensionDefaultAccount   defaultAccount;
        LedgerDimensionAccount          offsetLedgerDimensionAccount;

        defaultAccount = CustLedgerAccounts::exportSalesLedgerDimension(custInvoiceJour.InvoiceAccount);
        offsetLedgerDimensionAccount    = _ledgerJournalTrans.getOffsetLedgerDimensionForLedgerType(
            defaultAccount,
            curext());

        return offsetLedgerDimensionAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeExportSalesDomesticTaxVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an <c>ExportSalesInvoiceDomesticTaxVoucher</c> record with the specified journal number and voucher.
    /// </summary>
    /// <param name="_journalNum">
    /// The journal number.
    /// </param>
    /// <param name="_voucher">
    /// The voucher.
    /// </param>
    /// <returns>
    /// An <c>ExportSalesInvoiceDomesticTaxVoucher</c> record with the specified journal number and voucher.
    /// </returns>
    /// <remarks>
    /// This method initialiizes an <c>ExportSalesInvoiceDomesticTaxVoucher</c> record. It does not insert the record to the <c>ExportSalesInvoiceDomesticTaxVoucher</c> table.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected ExportSalesInvoiceDomesticTaxVoucher initializeExportSalesDomesticTaxVoucher(LedgerJournalId _journalNum, Voucher _voucher)
    {
        ExportSalesInvoiceDomesticTaxVoucher exportSalesInvoiceDomesticTaxVoucher;

        exportSalesInvoiceDomesticTaxVoucher.ExportSalesInvoice = exportSalesInvoice.RecId;
        exportSalesInvoiceDomesticTaxVoucher.JournalNumber = _journalNum;
        exportSalesInvoiceDomesticTaxVoucher.Voucher = _voucher;
        exportSalesInvoiceDomesticTaxVoucher.PostingDate = postingDate;

        return exportSalesInvoiceDomesticTaxVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>LedgerJournalTrans</c> record with the specified journal number, voucher, and tax code.
    /// </summary>
    /// <param name="_journalNum">
    /// The journal number.
    /// </param>
    /// <param name="_voucher">
    /// The voucher.
    /// </param>
    /// <param name="_taxCode">
    /// The tax code.
    /// </param>
    /// <returns>
    /// A <c>LedgerJournalTrans</c> record with the specified journal number, voucher, and tax code.
    /// </returns>
    /// <remarks>
    /// This method initialiizes an <c>LedgerJournalTrans</c> record. It does not insert the record to the <c>LedgerJournalTrans</c> table.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LedgerJournalTrans initializeLedgerJournalTrans(LedgerJournalId _journalNum, Voucher _voucher, TaxCode _taxCode)
    {
        LedgerJournalTrans              ledgerJournalTrans;

        ledgerJournalTrans.clear();
        ledgerJournalTrans.initValue();
        ledgerJournalTrans.JournalNum               = _journalNum;
        ledgerJournalTrans.Voucher                  = _voucher;
        ledgerJournalTrans.TransDate                = postingDate? postingDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        ledgerJournalTrans.AccountType              = LedgerJournalACType::Ledger;
        ledgerJournalTrans.CurrencyCode             = custInvoiceJour.CurrencyCode;
        ledgerJournalTrans.ExchRate                 = custInvoiceJour.ExchRate;
        ledgerJournalTrans.SettleVoucher            = SettlementType::None;
        ledgerJournalTrans.OffsetAccountType        = LedgerJournalACType::Ledger;
        ledgerJournalTrans.Invoice                  = custInvoiceJour.InvoiceId;
        ledgerJournalTrans.DocumentDate             = custInvoiceJour.DocumentDate;
        ledgerJournalTrans.Txt                      = "@GLS110220";
        ledgerJournalTrans.TaxCode                  = _taxCode;
        ledgerJournalTrans.LedgerDimension          = this.getLedgerDimension(ledgerJournalTrans);
        ledgerJournalTrans.OffsetLedgerDimension    = this.getOffsetLedgerDimension(ledgerJournalTrans);

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustInvoiceJour</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected CustInvoiceJour parmCustInvoiceJour(CustInvoiceJour _custInvoiceJour = custInvoiceJour)
    {
        if (custInvoiceJour.RecId != _custInvoiceJour.RecId)
        {
            custInvoiceJour = _custInvoiceJour;

            if (custInvoiceJour)
            {
                exportSalesInvoice = ExportSalesInvoice::findByCustInvoiceJour(custInvoiceJour.RecId);
            }
        }

        return custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LedgerJournalNameId parmJournalName(LedgerJournalNameId _journalName = journalName)
    {
        journalName = _journalName;

        return journalName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalNum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LedgerJournalId parmJournalNum(LedgerJournalId _journalNum = journalNum)
    {
        journalNum = _journalNum;

        return journalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TransDate parmPostingDate(TransDate _postingDate = postingDate)
    {
        postingDate = _postingDate;

        return postingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>CustInvoiceJourExportSalesVAT</c> class.
    /// </summary>
    /// <returns>
    /// An instance of <c>CustInvoiceJourExportSalesVAT</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static CustInvoiceJourExportSalesVAT construct()
    {
        CustInvoiceJourExportSalesVAT custInvoiceJourExportSalesVAT;

        custInvoiceJourExportSalesVAT = new CustInvoiceJourExportSalesVAT();

        return custInvoiceJourExportSalesVAT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExportSalesDomesticVAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates domestic VAT for the export sales and creates journal and journal lines for the calculated VAT with an instance of <c>CustInvoiceJourEditTax</c> class.
    /// </summary>
    /// <param name="_custInvoiceJourEditTax">
    /// An instance of <c>CustInvoiceJourEditTax</c> class.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void createExportSalesDomesticVAT(CustInvoiceJourEditTax _custInvoiceJourEditTax)
    {
        CustInvoiceJourExportSalesVAT::createExportSalesDomesticVATServer(_custInvoiceJourEditTax.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExportSalesDomesticVATServer</Name>
				<Source><![CDATA[
    private static void createExportSalesDomesticVATServer(container _packedCustInvoiceJourEditTax)
    {
        CustInvoiceJourEditTax        custInvoiceJourEditTax;
        CustInvoiceJourExportSalesVAT custInvoiceJourExportSalesVAT;

        custInvoiceJourEditTax = CustInvoiceJourEditTax::construct();
        custInvoiceJourEditTax.unpack(_packedCustInvoiceJourEditTax);

        custInvoiceJourExportSalesVAT = CustInvoiceJourExportSalesVAT::newExportSalesVAT(
            custInvoiceJourEditTax.parmJournalName(),
            custInvoiceJourEditTax.parmJournaNum(),
            custInvoiceJourEditTax.parmPostingDate(),
            custInvoiceJourEditTax.parmExportSalesVATDirection(),
            custInvoiceJourEditTax.parmCustInvoiceJourId());

        custInvoiceJourExportSalesVAT.createExportSalesVAT();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newExportSalesVAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>CustInvoiceJourExportSalesVAT</c> object with the specified journal name, journal number, posting date, VAT calculatio direction, and the record identity of a <c>CustInvoiceJour</c>
    /// to calculate and create journal for the domestic VAT for the export sales.
    /// </summary>
    /// <param name="_journalName">
    /// The journal name.
    /// </param>
    /// <param name="_journalNum">
    /// The journal number.
    /// </param>
    /// <param name="_postingDate">
    /// The posting date.
    /// </param>
    /// <param name="_vatDirection">
    /// The VAT calculation direction.
    /// </param>
    /// <param name="_custInvoiceJourId">
    /// The record identity of the <c>CustInvoiceJour</c> record.
    /// </param>
    /// <returns>
    /// A <c>CustInvoiceJourExportSalesVAT</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static CustInvoiceJourExportSalesVAT newExportSalesVAT(
        LedgerJournalNameId _journalName,
        LedgerJournalId _journalNum,
        TransDate _postingDate,
        ExportSalesVATDirection _vatDirection,
        RefRecId _custInvoiceJourId)
    {
        CustInvoiceJourExportSalesVAT custInvoiceJourExportSalesVAT;
        CustInvoiceJour                 custInvoiceJour;

        if (_custInvoiceJourId)
        {
            custInvoiceJour = CustInvoiceJour::findRecId(_custInvoiceJourId);
        }

        switch (_vatDirection)
        {
            case ExportSalesVATDirection::In:
                custInvoiceJourExportSalesVAT = CustInvoiceJourExportSalesVATIn::construct();
                break;

            case ExportSalesVATDirection::Out:
                custInvoiceJourExportSalesVAT = CustInvoiceJourExportSalesVATOut::construct();
                break;

            default:
                // Export sales VAT direction not supported.
                Debug::assert(false);
                custInvoiceJourExportSalesVAT = CustInvoiceJourExportSalesVAT::construct();
                break;
        }

        custInvoiceJourExportSalesVAT.parmJournalName(_journalName);
        custInvoiceJourExportSalesVAT.parmJournalNum(_journalNum);
        custInvoiceJourExportSalesVAT.parmPostingDate(_postingDate);
        custInvoiceJourExportSalesVAT.parmCustInvoiceJour(custInvoiceJour);

        return custInvoiceJourExportSalesVAT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExportSalesDomesticVATForPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the status of the <c>ExportSalesInvoiceDomesticTaxVoucher</c> record to posted for the specified journal number and voucher.
    /// </summary>
    /// <param name="_journalNum">
    /// The journal number.
    /// </param>
    /// <param name="_voucher">
    /// The voucher.
    /// </param>
    /// <remarks>
    /// This method runs on the caller tier.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void updateExportSalesDomesticVATForPosting(LedgerJournalId _journalNum, Voucher _voucher)
    {
        CustInvoiceJourExportSalesVAT::updateExportSalesVATForPostingServer(_journalNum, _voucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExportSalesVATForPostingServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the status of the <c>ExportSalesInvoiceDomesticTaxVoucher</c> record to posted for the specified journal number and voucher.
    /// </summary>
    /// <param name="_journalNum">
    /// The journal number.
    /// </param>
    /// <param name="_voucher">
    /// The voucher.
    /// </param>
    /// <remarks>
    /// This method runs on the server tier.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void updateExportSalesVATForPostingServer(LedgerJournalId _journalNum, Voucher _voucher)
    {
        ExportSalesInvoiceDomesticTaxVoucher    exportSalesInvoiceDomesticTaxVoucherToUpdate;
        ExportSalesInvoiceDomesticTaxVoucher    exportSalesInvoiceDomesticTaxVoucherToDelete;
        RefRecId                                exportSalesInvoiceId;

        if (_journalNum && _voucher)
        {
            ttsbegin;

            exportSalesInvoiceDomesticTaxVoucherToUpdate = ExportSalesInvoiceDomesticTaxVoucher::findByJournalAndVoucher(_journalNum, _voucher, true);

            if (exportSalesInvoiceDomesticTaxVoucherToUpdate)
            {
                exportSalesInvoiceId = exportSalesInvoiceDomesticTaxVoucherToUpdate.ExportSalesInvoice;
                exportSalesInvoiceDomesticTaxVoucherToUpdate.IsPosted = true;
                exportSalesInvoiceDomesticTaxVoucherToUpdate.update();

                // Delete all other export sales VAT vouchers that were created but not posted for the same export sales invoice.
                delete_from exportSalesInvoiceDomesticTaxVoucherToDelete
                    where exportSalesInvoiceDomesticTaxVoucherToDelete.ExportSalesInvoice == exportSalesInvoiceId &&
                        !exportSalesInvoiceDomesticTaxVoucherToDelete.IsPosted;
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>