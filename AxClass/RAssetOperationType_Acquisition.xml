<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetOperationType_Acquisition</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetOperationType_Acquisition extends RAssetOperationType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canBePosted</Name>
				<Source><![CDATA[
        public boolean canBePosted()
    {
        return rAssetStatusType.allowAcquisition(rAssetStandardId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
        public boolean check()
    {
        boolean ret;

        ret = super();
        ret = ret && this.checkNetBookValue();
        ret = ret && this.checkClothsRigging();
        ret = ret && this.checkAssembling();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAssembling</Name>
				<Source><![CDATA[
        /// <summary>
    /// Check putting into operation journal line
    /// </summary>
    /// <returns>
    /// false, if the line hasn't got ledger offset account type
    /// </returns>
    /// <remarks>
    /// the line must have at least one unposted linked component
    /// </remarks>
    public boolean checkAssembling()
    {
        if (common.TableId == tableNum(LedgerJournalTrans)                         &&
            (select firstonly RecId from rAssetScrap
                 where rAssetScrap.AssetId    == rAssetTable.AccountNum            &&
                       rAssetScrap.Assembling == NoYes::Yes                        &&
                       ! rAssetScrap.TransDate).RecId                              &&
            common.(fieldNum(LedgerJournalTrans, OffsetAccountType)) != LedgerJournalACType::Ledger)
            return checkFailed("@GLS116490");

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkClothsRigging</Name>
				<Source><![CDATA[
        private boolean checkClothsRigging()
    {
        RAssetScrap                 rAssetScrap;
        RAssetInventIssueQuotas     quotas;
        RAssetInventIssueQuotaTypes quotaTypes;
        InventQty                   inventQty;

        if (rAssetStandardId == RAssetParameters::standardIdDefault() &&
            rAssetTable.needAssembling()                              &&
            (rAssetTable.AssetType == RAssetType::Cloths              ||
             rAssetTable.AssetType == RAssetType::Rigging))
        {
            select firstonly ItemId from rAssetScrap
                where rAssetScrap.AssetId    == rAssetTable.AccountNum &&
                      rAssetScrap.Assembling == NoYes::Yes             &&
                      ! rAssetScrap.StornoRecId                        &&
                      ! rAssetScrap.TransDate;

            quotas = RAssetInventIssueQuotas::findQuotas(rAssetTable.employee(transDate),
                                                         rAssetTable.QuotaTypesRecId,
                                                         InventTable::find(rAssetScrap.ItemId).itemGroupId(),
                                                         rAssetScrap.ItemId);

            if (quotas)
            {
                quotaTypes = RAssetInventIssueQuotaTypes::find(rAssetTable.QuotaTypesRecId);
                inventQty = RAssetTable::clothAndRiggingQty(rAssetScrap.ItemId, rAssetTable.employee(transDate), rAssetTable.QuotaTypesRecId);
                if (! quotaTypes.SuperQuota && (quotas.Quota < inventQty + 1))
                    return checkFailed(strfmt("@GLS113986",
                                       rAssetScrap.ItemId,
                                       rAssetTable.employee(transDate),
                                       EmployeeTable_RU::findByEmployeeId(rAssetTable.employee(transDate)).employeeName()));
            }
            else
            {
                return checkFailed(strfmt("@GLS113987", rAssetScrap.ItemId));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventory</Name>
				<Source><![CDATA[
        public boolean checkInventory()
    {
        if (common.TableId == tablenum(LedgerJournalTrans))
        {
            return ! RAssetInventoryTable::checkInventory(rAssetTable,transDate,common.(fieldnum(LedgerJournalTrans,JournalNum)));
        }
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rAssetTransType</Name>
				<Source><![CDATA[
        public RAssetTransType rAssetTransType()
    {
        return RAssetTransType::Acquisition;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>