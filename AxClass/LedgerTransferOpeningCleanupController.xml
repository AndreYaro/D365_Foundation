<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransferOpeningCleanupController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerTransferOpeningCleanupController</c> class acts as a controller for the
///    <c>LedgerTransferOpeningCleanupService</c> service.
/// </summary>
internal final class LedgerTransferOpeningCleanupController extends SysOperationServiceController
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultCaption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected ClassDescription defaultCaption()
    {
        return strFmt("@GeneralLedger:LedgerTransferOpeningCleanupBatchJobDescription", strUpr(curExt()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ClassDescription caption()
    {
        return this.defaultCaption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowDialog</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean parmShowDialog(boolean _showDialog = showDialog)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowProgressForm</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean parmShowProgressForm(boolean _showProgressForm = showProgressForm)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createYearEndCloseCleanupJob</Name>
				<Source><![CDATA[
    internal static void createYearEndCloseCleanupJob(
        boolean _isPublicSectorYearEndProcessingEnabled,
        boolean _runReport,
        SessionId _processSession,
        UTCTimestamp _processTimestamp,
        LedgerTransferOpeningProcessState _processState,
        SysOperationExecutionMode _sysOperationExecutionMode)
    {
        LedgerTransferOpeningCleanupController controller = new LedgerTransferOpeningCleanupController(
            classstr(LedgerTransferOpeningCleanupService),
            methodstr(LedgerTransferOpeningCleanupService, cleanUp),
            _sysOperationExecutionMode);

        LedgerTransferOpeningCleanupDataContract dataContract = controller.getDataContractObject() as LedgerTransferOpeningCleanupDataContract;
        dataContract.parmIsPublicSectorYearEndProcessingEnabled(_isPublicSectorYearEndProcessingEnabled);
        dataContract.parmRunReport(_runReport);
        dataContract.parmProcessSession(_processSession);
        dataContract.parmProcessTimestamp(_processTimestamp);
        dataContract.parmProcessState(_processState);

        controller.runOperation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>