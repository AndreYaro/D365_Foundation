<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TAMVendRebateTableStatusType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TAMVendRebateTableStatusType</c> is an abstract class that holds the rebate processes specific to their current status.
/// </summary>
abstract public class TAMVendRebateTableStatusType
{
    TAmVendRebateTable tamVendRebateTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>inserting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a rebate record is inserted.
    /// </summary>
    public void inserting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a rebate record has been inserted.
    /// </summary>
    public void inserted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerPostingAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the rebate starting amount.
    /// </summary>
    /// <returns>
    /// The rebate starting amount.
    /// </returns>
    public Amount ledgerPostingAmount()
    {
        return tamVendRebateTable.StartingRebateAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendRebateTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>TAMVendRebateTable</c> table record on which rebate process is being performed.
    /// </summary>
    /// <param name="_tamVendRebateTable">
    /// The <c>TAMVendRebateTable</c> table record.
    /// </param>
    /// <returns>
    /// The rebate table record.
    /// </returns>
    public TAMVendRebateTable parmVendRebateTable(Common _tamVendRebateTable = tamVendRebateTable)
    {
        if (!prmisdefault(_tamVendRebateTable))
        {
            tamVendRebateTable = _tamVendRebateTable;
        }

        return tamVendRebateTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runApproved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the rebate approval is allowed or not.
    /// </summary>
    public void runApproved()
    {
        throw error(strfmt("@PDS1507", this.tamVendRebateStatus()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>runDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether rebate deletion is allowed or not.
    /// </summary>
    public void runDeleted()
    {
        throw error(strfmt("@PDS1509", this.tamVendRebateStatus()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether rebate payment is allowed or not.
    /// </summary>
    public void runPayment()
    {
        throw error(strfmt("@PDS1510", this.tamVendRebateStatus()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRunPayment</Name>
				<Source><![CDATA[
    /// <summary>
    ///		Determines whether rebate payment must be run.
    /// </summary>
    /// <returns>
    ///		true if rebate payment must be run; otherwise, false.
    /// </returns>
    protected internal boolean mustRunPayment()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runProcessed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether rebate processing is allowed or not.
    /// </summary>
    /// <param name="_forAdjustment">
    /// A boolean value that determines if the rebate is an adjustment.
    /// </param>
    public void runProcessed(boolean _forAdjustment  = false)
    {
        throw error(strfmt("@PDS1511", this.tamVendRebateStatus()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFinalStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the rebate to the 'Processed' status.
    /// </summary>
    public void setFinalStatus()
    {
        tamVendRebateTable.RebateStatus = TAMVendRebateStatus::Processed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInitialStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the initial status of the rebate based on the cumulating type of the rebate agreement.
    /// </summary>
    public void setInitialStatus()
    {
        TAMVendRebateAgreement  tamVendRebateAgreement = tamVendRebateTable.VendRebateAgreement();

        if (tamVendRebateAgreement.CumulatePurchaseBy    == TAMCumulationPeriod::Invoice)
        {
            tamVendRebateTable.RebateStatus    = TAMVendRebateStatus::Calculated;
        }
        else if (tamVendRebateAgreement.ApprovalRequired    == NoYes::Yes)
        {
            tamVendRebateTable.RebateStatus    = TAMVendRebateStatus::ToCalculate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNextStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets next status for rebates based on current statuses.
    /// </summary>
    public void setNextStatus()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>tamVendRebateStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the rebate status.
    /// </summary>
    /// <returns>
    /// The rebate status.
    /// </returns>
    abstract public TAMVendRebateStatus tamVendRebateStatus()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRebatesToCumulate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and sets the rebate amounts after cumulating.
    /// </summary>
    public void updateRebatesToCumulate()
    {
        tamVendRebateTable.setCorrectedRebateAmount();
        tamVendRebateTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates changes to a field in the <c>TAMVendRebateTable</c> table.
    /// </summary>
    /// <param name="_fieldName">
    /// The field name to Validate.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the field to validate; optional.
    /// </param>
    /// <returns>
    /// true if the value in the field change is valid; otherwise, false.
    /// </returns>
    public boolean validateFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        return tamVendRebateTable.validateFieldValue(_fieldName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>TAmVendRebateTableStatusType</c> class based on the reference buffer.
    /// </summary>
    /// <param name="_buffer">
    /// The reference buffer that decides which derived version of the class to instantiate.
    /// </param>
    /// <returns>
    /// A new instance of <c>TAMVendRebateTableStatusType</c> class.
    /// </returns>
    public static TAMVendRebateTableStatusType newBuffer(Common _buffer)
    {
        TAMVendRebateTableStatusType    tamVendRebateTableStatusType;
        TAMVendRebateTable              tamVendRebateTable;

        switch (_buffer.TableId)
        {
            case tablenum(TAMVendRebateTable)  :
                tamVendRebateTable = _buffer;
                break;
            default :
                throw error("@SYS72176");
        }

        switch (tamVendRebateTable.RebateStatus)
        {
            case TAMVendRebateStatus::Approved :
                tamVendRebateTableStatusType = TAMVendRebateTableStatusType_Approved::construct();
                break;

            case TAMVendRebateStatus::Calculated :
                tamVendRebateTableStatusType = TAMVendRebateTableStatusType_Calculated::construct();
                break;

            case TAMVendRebateStatus::Processed :
                tamVendRebateTableStatusType = TAMVendRebateTableStatusType_Processed::construct();
                break;

            case TAMVendRebateStatus::ToCalculate :
                tamVendRebateTableStatusType = TAMVendRebateTableStatusType_ToCalculate::construct();
                break;
        }

        tamVendRebateTableStatusType.parmVendRebateTable(tamVendRebateTable);

        return tamVendRebateTableStatusType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeProcessed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finalizes the processing. This method should be called after <c>runProcessed</c>.
    /// </summary>
    public void finalizeProcessed()
    {
        throw error(strfmt("@SYP4881537", this.tamVendRebateStatus()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>