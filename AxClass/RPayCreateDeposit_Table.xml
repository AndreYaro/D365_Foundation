<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayCreateDeposit_Table</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class RPayCreateDeposit_Table extends RPayCreateDeposit
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTotalAmount</Name>
				<Source><![CDATA[
        protected void calcTotalAmount()
    {
        RPaySheetTable rPaySheetTableLocal;
        paySheetDepositAmount = 0;

        for (rPaySheetTableLocal = rPaySheetTable_ds.getFirst(true) ? rPaySheetTable_ds.getFirst(true) : rPaySheetTable_ds.cursor();
             rPaySheetTableLocal;
             rPaySheetTableLocal = rPaySheetTable_ds.getNext())
        {
            paySheetDepositAmount += rPaySheetTableLocal.payBankSum() - rPaySheetTableLocal.payBankSumInJournal();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
        protected void createTrans()
    {
        RPayDepositTable    rPayDepositTableLocal;
        RPaySheetTable      rPaySheetTableLocal, rPaySheetTableUpdate;
        RPaySheetTrans      rPaySheetTransUpdate;
        RPayAmount          amount;
        ttsbegin;

        super();

        for (rPaySheetTableLocal = rPaySheetTable_ds.getFirst(true) ? rPaySheetTable_ds.getFirst(true) : rPaySheetTable_ds.cursor();
             rPaySheetTableLocal;
             rPaySheetTableLocal = rPaySheetTable_ds.getNext())
        {
            amount = 0;

            while select forupdate rPaySheetTransUpdate
                where rPaySheetTransUpdate.SheetTableRecId == rPaySheetTableLocal.RecId &&
                      rPaySheetTransUpdate.SendToBank      == NoYes::Yes                &&
                      ! rPaySheetTransUpdate.JournalNum
            {
                rPaySheetTransUpdate.SendToBank    = NoYes::No;
                rPaySheetTransUpdate.Deposit       = NoYes::Yes;
                rPaySheetTransUpdate.BankPayment   = NoYes::No;
                rPaySheetTransUpdate.SendToDeposit = NoYes::Yes;
                rPaySheetTransUpdate.update();

                rPayDepositTableLocal.initFromRPaySheetTrans(rPaySheetTransUpdate);
                rPayDepositTableLocal.Voucher     = voucherNum;
                rPayDepositTableLocal.VoucherDate = ledgerVoucher.lastTransDate();
                rPayDepositTableLocal.insert();

                amount += rPaySheetTransUpdate.Amount;
            }

            rPaySheetTableUpdate = RPaySheetTable::find(rPaySheetTableLocal.RecId, true);
            if (rPaySheetTableUpdate)
            {
                select firstonly RecId from rPaySheetTransUpdate
                    where rPaySheetTransUpdate.SheetTableRecId == rPaySheetTableUpdate.RecId &&
                          rPaySheetTransUpdate.SendToBank      == NoYes::Yes                 &&
                          rPaySheetTransUpdate.JournalNum;

                rPaySheetTableUpdate.BankPayment = rPaySheetTransUpdate.RecId ? NoYes::Yes : NoYes::No;
                rPaySheetTableUpdate.updateDisbursedSum(amount);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>