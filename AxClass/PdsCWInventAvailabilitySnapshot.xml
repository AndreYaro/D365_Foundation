<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsCWInventAvailabilitySnapshot</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PdsCWInventAvailabilitySnapshot</c> class allows to store a copy of
/// the information about on hand availability for catch weight items.
/// </summary>
/// <remarks>
/// The class is optimized to minimize memory consuption and can be used for caching purposes.
/// </remarks>
class PdsCWInventAvailabilitySnapshot implements PdsCWInventIAvailability, SysPackable
{
    PdsCWAvailReservation   pdsCWAvailReservation;
    PdsCWAvailPhysical      pdsCWAvailPhysical;
    PdsCWAvailOrdered       pdsCWAvailTotal;
    PdsCWReservPhysical     pdsCWReservPhysical;
    PdsCWReservOrdered      pdsCWReservOrdered;
    PdsCWOrdered            pdsCWOrdered;
    PdsCWOrdered            pdsCWOrderedSum;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        pdsCWAvailReservation,
        pdsCWAvailPhysical,
        pdsCWAvailTotal,
        pdsCWReservPhysical,
        pdsCWReservOrdered,
        pdsCWOrdered,
        pdsCWOrderedSum
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromAvailability</Name>
				<Source><![CDATA[
    private void initFromAvailability(PdsCWInventIAvailability _availability)
    {
        if (_availability)
        {
            pdsCWAvailReservation    = _availability.pdsCWAvailReservation(true);
            pdsCWAvailPhysical       = _availability.pdsCWAvailPhysical();
            pdsCWAvailTotal          = _availability.pdsCWAvailTotal();
            pdsCWReservPhysical      = _availability.pdsCWReservPhysical();
            pdsCWReservOrdered       = _availability.pdsCWReservOrdered();
            pdsCWOrdered             = _availability.pdsCWOrdered();
            pdsCWOrderedSum          = _availability.pdsCWOrderedSum();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWAvailPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the the quantity available for physical reservation.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    public PdsCWAvailPhysical pdsCWAvailPhysical()
    {
        return pdsCWAvailPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWAvailReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity available for reservation.
    /// </summary>
    /// <param name="_allowReserveOrdered">
    /// A value indicating wither the result should include
    /// the ordered goods that are available for reservation.
    /// </param>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    public PdsCWAvailReservation pdsCWAvailReservation(NoYes _allowReserveOrdered = NoYes::Yes)
    {
        return _allowReserveOrdered ? pdsCWAvailReservation : this.pdsCWAvailPhysical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWAvailTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total available quantity.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    /// <remarks>
    /// The total available quantity is the total quantity available for reservation
    /// minus the quantity that is on order but not reserved.
    /// </remarks>
    public PdsCWAvailOrdered pdsCWAvailTotal()
    {
        return pdsCWAvailTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ordered quantity.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    public PdsCWOrdered pdsCWOrdered()
    {
        return pdsCWOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWOrderedSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity that was ordered
    /// but is not physically available in the warehouse yet.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    /// <remarks>
    /// Goods that are in the Arrived status are not physically available
    /// in the warehouse yet so the result of this method is the Ordered + Arrived quantity.
    /// </remarks>
    public PdsCWOrdered pdsCWOrderedSum()
    {
        return pdsCWOrderedSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReservOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity reserved against ordered on hand.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    public PdsCWReservOrdered pdsCWReservOrdered()
    {
        return pdsCWReservOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReservPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity reserved against on hand that is physically available.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    public PdsCWReservPhysical pdsCWReservPhysical()
    {
        return pdsCWReservPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conPeek(_packedClass, 1);
        boolean ret = true;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                break;

            default :
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static PdsCWInventAvailabilitySnapshot construct()
    {
        return new PdsCWInventAvailabilitySnapshot();
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PdsCWInventAvailabilitySnapshot</c> class.
    /// </summary>
    /// <param name="_packedSnapshot">
    /// A container which holds a serialized <c>PdsCWInventAvailabilitySnapshot</c> class object.
    /// </param>
    /// <returns>
    /// An instance of the <c>PdsCWInventAvailabilitySnapshot</c> class.
    /// </returns>
    public static PdsCWInventAvailabilitySnapshot create(container _packedSnapshot)
    {
        PdsCWInventAvailabilitySnapshot snapshot = PdsCWInventAvailabilitySnapshot::construct();

        if (!snapshot.unpack(_packedSnapshot))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return snapshot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromAvailability</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new availability snapshot of the specified availability object.
    /// </summary>
    /// <param name="_availability">
    /// The original availability object.
    /// </param>
    /// <returns>
    /// A new availability snapshot.
    /// </returns>
    public static PdsCWInventAvailabilitySnapshot newFromAvailability(PdsCWInventIAvailability _availability)
    {
        PdsCWInventAvailabilitySnapshot availability = PdsCWInventAvailabilitySnapshot::construct();

        availability.initFromAvailability(_availability);

        return availability;
    }

]]></Source>
			</Method>
			<Method>
				<Name>zero</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new <c>PdsCWInventAvailabilitySnapshot</c> where all quantities are zero.
    /// </summary>
    /// <returns>
    /// A <c>PdsCWInventAvailabilitySnapshot</c> object.
    /// </returns>
    public static PdsCWInventAvailabilitySnapshot zero()
    {
        return PdsCWInventAvailabilitySnapshot::construct();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>