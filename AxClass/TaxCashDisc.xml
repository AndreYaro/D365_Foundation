<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxCashDisc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxCashDisc</c> class is used to calculate tax upon settling and reverse settling of
/// customer transactions and vendor transactions.
/// </summary>
/// <remarks>
/// This class derives from the <see cref="T:TaxReverse" /> class and works as an extension of the main
/// tax engine.
/// </remarks>
final class TaxCashDisc extends TaxReverse
{
    Voucher         invoiceVoucher;
    TransDate       invoiceDate;
    TableId         invoiceTableId;
    RecId           invoiceRecId;
    TableId         cashDiscSourceTableId;
    RecId           cashDiscSourceRecId;
    boolean         isCustVendSettlementSingleCompany;

    LedgerDimensionDefaultAccount   operationLedgerDimension;         //Added for LedgerDimension update
    LedgerDimensionDefaultAccount   differingCashDiscountLedgerDimension; //Added for LedgerDimension update
    // <GEERU>
    container taxAmounts_RU;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustOperationLedgerDimension</Name>
				<Source><![CDATA[
    protected LedgerDimensionAccount adjustOperationLedgerDimension(LedgerDimensionAccount _operationLedgerDimension,
                                                                     TaxTrans              _taxTrans)
    {
        DimensionDefault       defaultDimension;

        defaultDimension = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(_operationLedgerDimension);
        return this.operationLedgerDimension(_taxTrans, defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChargeLineAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method is used to get the correct <c>LedgerDimensionAccount</c> for charge posting.
    /// </summary>
    /// <param name="_operationLedgerDimension">
    ///     The <c>LedgerDimensionAccount</c> from the parent of this tax line.
    /// </param>
    /// <returns>
    ///     The correct <c>LedgerDimensionAccount</c> is fetched when TaxOrigin is Cash discount and
    ///     CustVendSettlement is Single company
    /// </returns>
    protected LedgerDimensionAccount getChargeLineAccount(LedgerDimensionAccount _operationLedgerDimension)
    {
        LedgerDimensionAccount  chargeLineAccount;

        if (taxWorkTrans.TaxOrigin == TaxOrigin::CashDisc && isCustVendSettlementSingleCompany)
        {
            chargeLineAccount = _operationLedgerDimension;

            if (!chargeLineAccount)
            {
                chargeLineAccount = taxWorkTrans.LedgerDimension;
            }
        }

        return chargeLineAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAndInsertTaxes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates tax that is based on tax transactions for sales tax receivable, sales tax payable, and
    /// use tax and import sales tax.
    /// </summary>
    /// <returns>
    /// A <c>TaxAmount</c> that indicates the calculated tax.
    /// </returns>
    /// <remarks>
    /// The calculated tax is inserted in the <c>TmpTaxWorkTrans</c> table.
    /// </remarks>
    protected TaxAmount calcAndInsertTaxes()
    {
        TaxTrans        taxTrans;
        TaxAmount       taxAmount;
        TaxGroupHeading taxGroupHeading;
        TaxGroup        taxGroup;
        TaxAmountCur    originalActualTaxAmountCur;
        TaxAmountCur    allocatedActualTaxAmountCur;
        TaxAmountCur    originalCalculatedTaxAmountCur;
        TaxAmountCur    allocatedCalculatedTaxAmountCur;
        TaxAmountCur    roundingCalculatedDifference;
        TaxAmountCur    roundingActualDifference;
        boolean         roundingCalcDiffExists;
        boolean         roundingActualDiffExists;               

        ttsbegin;

        LedgerJournalId journalNum = this.getJournalNumByVoucherAndDate(invoiceVoucher, invoiceDate);
                   
        while select * from taxTrans
            where taxTrans.Voucher             == invoiceVoucher &&
                    taxTrans.TransDate           == invoiceDate &&
                    taxTrans.TaxOrigin           == TaxOrigin::Tax &&
                    ((taxTrans.ExemptTax           == NoYes::No  &&
                      (taxTrans.TaxDirection       == TaxDirection::IncomingTax ||
                       taxTrans.TaxDirection       == TaxDirection::OutgoingTax ||
                       taxTrans.TaxDirection       == TaxDirection::UseTax))
                    ||
                     (taxTrans.ExemptTax == NoYes::Yes &&
                      (taxTrans.TaxDirection == TaxDirection::TaxExemptSales ||
                       taxTrans.TaxDirection == TaxDirection::TaxExemptPurchase))
                    ||
                    (taxTrans.ExemptTax == NoYes::Yes &&
                      taxTrans.ReverseCharge_w == NoYes::Yes &&
                      taxTrans.TaxDirection == TaxDirection::OutgoingTax)
                    ) &&
                    taxTrans.JournalNum          == journalNum
        {
            if (taxGroup != taxTrans.TaxGroup)
            {
                taxGroupHeading = TaxGroupHeading::find(taxTrans.TaxGroup);
                taxGroup = taxTrans.TaxGroup;
            }

            // <GIN>
            if (isTaxParametersEnabled)
            {
                if (taxGroupHeading.TaxReverseOnCashDisc &&
                    TaxTable::find(taxTrans.TaxCode).TaxType_IN != TaxType_IN::None)
                {
                    continue;
                }
            }
            // </GIN>

            boolean shouldReverseTaxOnCashDisc = taxGroupHeading.TaxReverseOnCashDisc;
            if (invoiceTableId == tableNum(CustInvoiceJour) 
                || invoiceTableId == tableNum(VendInvoiceJour)
                || invoiceTableId == tableNum(ProjInvoiceJour))
            {
                TaxIntegrationTaxJurisdictionParameters taxIntegrationTaxJurisdictionParameters = TaxIntegrationFacade::getTaxJurisdictionParameters(invoiceTableId, invoiceRecId);

                if (taxIntegrationTaxJurisdictionParameters && !taxIntegrationTaxJurisdictionParameters.empty())
                {
                    shouldReverseTaxOnCashDisc = taxIntegrationTaxJurisdictionParameters.shouldReverseTaxOnCashDisc();
                }
            }

            if (shouldReverseTaxOnCashDisc)
            {
                if (TaxTable::find(taxTrans.TaxCode).TaxBase != TaxBaseType::AmountByUnit)
                {
                    this.initTaxWorkTransFromTaxTrans(taxTrans);

                    originalCalculatedTaxAmountCur += taxWorkTrans.SourceTaxAmountCur;
                    originalActualTaxAmountCur += taxWorkTrans.SourceRegulateAmountCur;
                    this.adjustByPercentage(true, taxTrans.SourceCurrencyCode);
                    allocatedCalculatedTaxAmountCur += taxWorkTrans.SourceTaxAmountCur;
                    allocatedActualTaxAmountCur += taxWorkTrans.SourceRegulateAmountCur;

                    taxWorkTrans.insert();

                    if (taxTrans.TaxDirection != TaxDirection::UseTax)
                    {
                        taxAmount += taxWorkTrans.SourceRegulateAmountCur;
                    }
                }
            }
        }

        roundingCalcDiffExists   = (originalCalculatedTaxAmountCur && allocatedCalculatedTaxAmountCur) ? true : false;
        roundingActualDiffExists = (originalActualTaxAmountCur && allocatedActualTaxAmountCur) ? true : false;

        if (roundingCalcDiffExists || roundingActualDiffExists)
        {
            roundingCalculatedDifference = (CurrencyExchangeHelper::amount(originalCalculatedTaxAmountCur * -1 * percent / 100, sourceCurrencyCode)) - allocatedCalculatedTaxAmountCur;
            roundingActualDifference = (CurrencyExchangeHelper::amount(originalActualTaxAmountCur * -1 * percent / 100, sourceCurrencyCode)) - allocatedActualTaxAmountCur;
        }

        // When tax direction is Usetax, no need to consider the tax amount here, hence no need to apply the rounding for tax.
        if (taxAmount)
        {
            taxAmount += roundingActualDifference;
        }

        if (roundingCalculatedDifference || roundingActualDifference)
        {
            select forupdate firstonly taxWorkTrans
                order by taxWorkTrans.SourceRegulateAmountCur asc
                where taxWorkTrans.SourceRegulateAmountCur != 0
                    && taxWorkTrans.TaxDirection != TaxDirection::UseTax;

            if (taxWorkTrans.RecId)
            {
                taxWorkTrans.SourceRegulateAmountCur += roundingActualDifference;
                // After SourceRegulateAmountCur is adjusted to 0, it does not make sense that TaxInCostPrice & TaxInCostPriceRegulated still not 0.
                // Ideally, they should be adjusted with the same percentage corresponding to SourceRegulateAmountCur.
                // Inorder to minimize the impact with this change, only do this adjustment for the case that SourceRegulateAmountCur is adjusted to 0.
                if (taxWorkTrans.SourceRegulateAmountCur == 0)
                {
                    taxWorkTrans.TaxInCostPrice = 0;
                    taxWorkTrans.TaxInCostPriceRep = 0;
                    taxWorkTrans.TaxInCostPriceRegulated = 0;
                }

                taxWorkTrans.SourceTaxAmountCur += roundingCalculatedDifference;

                if (taxWorkTrans.TaxInCostPrice || taxWorkTrans.TaxInCostPriceRegulated)
                {
                    taxWorkTrans.TaxInCostPrice += roundingCalculatedDifference;
                    taxWorkTrans.TaxInCostPriceRep += roundingCalculatedDifference;
                    taxWorkTrans.TaxInCostPriceRegulated  += roundingCalculatedDifference;
                }

                taxWorkTrans.TaxBaseAmount +=  sign(taxWorkTrans.TaxBaseAmount) * roundingCalculatedDifference;
                taxWorkTrans.TaxBaseAmountCur +=  sign(taxWorkTrans.TaxBaseAmountCur) * roundingCalculatedDifference;
                taxWorkTrans.TaxBaseAmountRep +=  sign(taxWorkTrans.TaxBaseAmountRep) * roundingCalculatedDifference;
                taxWorkTrans.SourceBaseAmountCur +=  sign(taxWorkTrans.SourceBaseAmountCur) * roundingCalculatedDifference;
                taxWorkTrans.TaxAutogenerated = NoYes::No;

                // convert transactional to Accounting and tax code currency
                this.convertCurrencies();
                taxWorkTrans.update();
            }
        }

        ttscommit;

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAndPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates tax, inserts the calculated tax into the TmpTaxWorkTrans table, posts the transactions from the tmpTaxWorkTrans table, and inserts records in the TaxTrans table.
    /// </summary>
    /// <param name="_ledgerPostingController">
    /// The ledger posting controller to use for ledger posting.
    /// </param>
    /// <returns>
    ///    The calculated <c>TaxAmount</c>.
    /// </returns>
    /// <remarks>
    ///    This method calls two methods-first, the <c>CalcAndInsertTaxes</c> method and, next, the <c>SaveAndPost</c> method. The calculated <c>TaxAmount</c> from the <c>CalcAndInsertTaxes</c> method is
    ///    returned.
    /// </remarks>
    TaxAmount calcAndPost(LedgerPostingController _ledgerPostingController)
    {
        TaxAmount taxAmount = 0;

        this.initLedgerPosting(_ledgerPostingController);

        temporaryLedgerPostingJournal = _ledgerPostingController.getJournal();

        if (percent && invoiceRecId && cashDiscSourceTableId && cashDiscSourceRecId)
        {
            taxAmount = this.calcAndInsertTaxes();

            this.saveAndPost(_ledgerPostingController);
        }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkParameters</Name>
				<Source><![CDATA[
    boolean checkParameters(Voucher         _voucher        = '',
                           TransDate        _transDate      = _transDate,
                           RecId            _invoiceRecId   = 0 ,
                           TableId          _paymentTableId = 0,
                           RecId            _paymentRecId   = 0,
                           LedgerVoucher    _ledgerVoucher  = null)
    {
        boolean ok = true;
        ;
        if (! _voucher || ! _transDate)
        {
            ok =  checkFailed(strFmt("@SYS27147", funcName()));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    ExchRate exchRate(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        ;
        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContainers</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a container that consists of the two variables ConLedgerAccount and ConSourceBaseAmountCur.
    /// </summary>
    /// <returns>
    ///    A container that consists of the two variables ConLedgerAccount and ConSourceBaseAmountCur.
    /// </returns>
    container getContainers()
    {
        return [conLedgerDimension, conSourceBaseAmountCur, taxTransRecId, originalTaxTransRecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxWorkTransLedgerDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the ledger dimensions for the <c>taxWorkTrans</c> record.
    /// </summary>
    /// <param name="_taxTrans">
    /// The tax transaction for reversal.
    /// </param>

    public void initTaxWorkTransLedgerDimensions(TaxTrans _taxTrans)
    {
        super(_taxTrans);

        taxWorkTrans.OperationLedgerDimension = this.adjustOperationLedgerDimension(taxWorkTrans.OperationLedgerDimension, _taxTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Voucher              _invoiceVoucher,
             TransDate            _invoiceDate,
             TableId              _invoiceTableId,
             RecId                _invoiceRecId,
             CurrencyCode         _discCurrencyCode,
             TableId              _cashDiscSourceTableId,
             RecId                _cashDiscSourceRecId,
             Percent              _percent,
             ExchRate             _exchRate        = 0,
             ExchRate             _exchRateSecond  = 0,
             UnknownNoYes         _triangulation   = UnknownNoYes::Unknown)
    {
        super(_percent);

        if (_percent != 0)
        {
            if (! this.checkParameters(_invoiceVoucher,
                                       _invoiceDate,
                                       _invoiceRecId,
                                       _cashDiscSourceTableId,
                                       _cashDiscSourceRecId))
            {
                throw error("@SYS18447");
            }

            invoiceVoucher          = _invoiceVoucher;
            invoiceDate             = _invoiceDate;
            invoiceTableId          = _invoiceTableId;
            invoiceRecId            = _invoiceRecId;
            percent                 = _percent;
            cashDiscSourceTableId   = _cashDiscSourceTableId;
            cashDiscSourceRecId     = _cashDiscSourceRecId;
            headingTableId          = invoiceTableId;
            headingRecId            = invoiceRecId;
            taxModuleType           = TaxModuleType::Voucher;

            this.setExchRates(_discCurrencyCode, _exchRate, _exchRateSecond, _triangulation, taxDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the ledgerDimension account value from the operation account and the default dimension.
    /// </summary>
    /// <param name = "_taxTrans">The buffer of <c>TaxTrans</c>.</param>
    /// <param name = "_defaultDimension">The default dimension.</param>
    /// <returns>The created operation ledger dimension.</returns>
    // HQ-939-69-GDNk
    LedgerDimensionAccount operationLedgerDimension(TaxTrans _taxTrans, DimensionDefault _defaultDimension)
    {
        LedgerDimensionDefaultAccount   ledgerDimension;
        LedgerDimensionAccount          mergedLedgerDimension;
        MainAccount                     mainAccount;
        MainAccountLegalEntity          mainAccountLegalEntity;

        ledgerDimension = TaxCashDisc::findOperationLedgerDimension( _taxTrans,
                                                            operationLedgerDimension,
                                                            differingCashDiscountLedgerDimension,
                                                            cashDiscSourceTableId);

        if (!_defaultDimension)
        {
            mainAccount = LedgerDimensionFacade::getMainAccountFromLedgerDimension(ledgerDimension);
            mainAccountLegalEntity = MainAccountLegalEntity::findByMainAccountLegalEntity(mainAccount.RecId, CompanyInfo::current());
        }

        //create the ledgerDimension account value from the operation account and the default dimension.
        mergedLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerDimension, _defaultDimension ? _defaultDimension : mainAccountLegalEntity.DefaultDimension);

        return mergedLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDifferingCashDiscountLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets or gets the variable DifferingCashDiscountLedgerDimension.
    /// </summary>
    /// <param name="_differingCashDiscountLedgerDimension">
    ///    The <c>LedgerAccount</c> to set; optional. Defaults to the value of the variable operationAccount.
    /// </param>
    /// <returns>
    ///    The <c>LedgerDimensionDefaultAccount</c> value of the variable DifferingCashDiscountLedgerDimension.
    /// </returns>
    public LedgerDimensionDefaultAccount parmDifferingCashDiscountLedgerDimension(LedgerDimensionDefaultAccount _differingCashDiscountLedgerDimension = operationLedgerDimension)
    {
        ;
        differingCashDiscountLedgerDimension = _differingCashDiscountLedgerDimension;

        return differingCashDiscountLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOperationLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets or gets the operationLedgerDimension variable.
    /// </summary>
    /// <param name="_operationLedgerDimension">
    ///    The value to set the operationLedgerDimension variable to; optional.
    /// </param>
    /// <returns>
    ///    The value of the operationLedgerDimension variable.
    /// </returns>
    public LedgerDimensionDefaultAccount parmOperationLedgerDimension(LedgerDimensionDefaultAccount _operationLedgerDimension = operationLedgerDimension)
    {
        ;
        operationLedgerDimension = _operationLedgerDimension;

        return operationLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPercent</Name>
				<Source><![CDATA[
    public Percent parmPercent(Percent _percent = percent)
    {
        percent = _percent;

        return percent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCharge</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Posts the sales tax charge.
    /// </summary>
    /// <param name="_ledgerPostingController">
    ///     The ledger posting controller to use for ledger posting.
    /// </param>
    /// <param name="_taxTrans">
    ///     The <c>TaxTrans</c> record that holds the amount to be posted.
    /// </param>
    /// <param name="_chargeAmount">
    ///     The charge amount to post.
    /// </param>
    /// <param name="_exchRateHelper">
    ///     The <c>CurrencyExchHelper</c> instance for the <c>TaxTrans</c> record being posted.
    /// </param>
    /// <param name="_transactionLineAccount">
    ///     The <c>LedgerDimensionAccount</c> from the parent of this tax line.
    /// </param>
    /// <remarks>
    ///     The incoming _transactionLineAccount is for the current tax company, but the charges can be in a different company, so we call the getLedgerDimensionForChargeLine() method
    ///     to get either the correct expense account or a due to/due from account to post in the current company.
    /// </remarks>
    public void postCharge(LedgerPostingController _ledgerPostingController, TaxTrans _taxTrans, TaxAmountCur _chargeAmount, CurrencyExchangeHelper _exchRateHelper, LedgerDimensionAccount _transactionLineAccount)
    {
        LedgerDimensionAccount taxChargeLedgerDimension;

        taxChargeLedgerDimension = this.getLedgerDimensionForChargeLine(_chargeAmount, _transactionLineAccount);

        super(_ledgerPostingController, _taxTrans, _chargeAmount, _exchRateHelper, taxChargeLedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveAndPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Posts the transactions from the tmpTaxWorkTrans table and inserts records in the TaxTrans table.
    /// </summary>
    /// <param name="_ledgerPostingController">
    /// The ledger posting controller to use for ledger posting.
    /// </param>
    public void saveAndPost(LedgerPostingController _ledgerPostingController)
    {
        TaxTrans            taxTrans;
        ExchRate            exchRateOnTax;
        CurrencyExchangeHelper  exchangeRateHelper;
        // <GEERU>
        TaxAmountCur taxAmountCur;
        #isoCountryRegionCodes
        boolean             countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        container addToLastElement(container _con, Amount _amount)
        {
            int last = conLen(_con);
            return conPoke(_con, last, conPeek(_con, last) + taxAmountCur);
        }
        // </GEERU>

        exchangeRateHelper = CurrencyExchangeHelper::newLedger(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId));

        this.initLedgerPosting(_ledgerPostingController);

        temporaryLedgerPostingJournal = _ledgerPostingController.getJournal();

        if (!this.checkTaxCodesByOperationAccount())
        {
            throw error("@SYS18447");
        }

        ttsbegin;

        while select * from taxWorkTrans
              where taxWorkTrans.HeadingRecId     == headingRecId &&
                    taxWorkTrans.InvoiceRecId     == invoiceRecId
        {
            taxTrans.clear();
            this.initFromTaxWorkTrans(taxTrans, taxWorkTrans, this.taxOrigin(taxWorkTrans.TaxOrigin));

            taxTrans.SourceDocumentLine = taxWorkTrans.SourceDocumentLine;

            this.taxInCostPriceReporting(taxTrans, taxWorkTrans.TaxInCostPrice);

            this.initTaxTrans(taxTrans, _ledgerPostingController.getJournal().parmVoucherSeriesCode());

            taxTrans.insert();

            if (taxTrans.SourceRegulateAmountCur != 0 && !triangulation && this.exchRate() != taxTrans.TaxAmount / taxTrans.SourceRegulateAmountCur * 100)
            {
                exchRateOnTax = taxTrans.TaxAmount / taxTrans.SourceRegulateAmountCur * 100;
            }
            else
            {
                exchRateOnTax = this.exchRate();
            }

            exchangeRateHelper.parmExchangeRate1(exchRateOnTax);
            exchangeRateHelper.parmExchangeDate(taxTrans.TransDate);

            // <GEERU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ, #isoEE, #isoHU, #isoLT, #isoLV, #isoPL, #isoRU]))
            {
                this.post(_ledgerPostingController,
                      taxTrans,
                      taxTrans.SourceRegulateAmountCur,
                      taxTrans.TaxInCostPrice,
                      exchangeRateHelper,
                      taxWorkTrans.LedgerDimension,
                      taxWorkTrans.OperationLedgerDimension,
                      taxWorkTrans.TaxOffsetUseTaxLedgerDimension,
                      LedgerDetailLevel::Summary,
                      null,
                      taxWorkTrans.OffsetLedgerDimension_RU);
                taxAmountCur = taxWorkTrans.OffsetLedgerDimension_RU ? taxTrans.SourceTaxAmountCur : 0;
                conSourceBaseAmountCur = addToLastElement(conSourceBaseAmountCur, taxAmountCur);
                taxAmounts_RU += taxTrans.SourceTaxAmountCur - taxAmountCur;
            }
            else
            {
            // </GEERU>
                this.post(_ledgerPostingController,
                          taxTrans,
                          taxTrans.SourceRegulateAmountCur,
                          taxTrans.TaxInCostPrice,
                          exchangeRateHelper,
                          taxWorkTrans.LedgerDimension,
                          taxWorkTrans.OperationLedgerDimension,
                          taxWorkTrans.TaxOffsetUseTaxLedgerDimension,
                          LedgerDetailLevel::Summary);
            // <GEERU>
            }
            // </GEERU>

            this.postCharge(_ledgerPostingController, taxTrans, taxTrans.TaxInCostPrice, exchangeRateHelper, taxWorkTrans.OperationLedgerDimension);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the <c>recId</c> of the transaction that is to be taxed.
    /// </summary>
    /// <returns>
    ///    The <c>recID</c> of the transaction to be taxed.
    /// </returns>
    /// <remarks>
    ///    For example, if the tax is called from a <c>SalesLine</c> transaction, this method will return the
    ///    <c>recId</c> of the <c>SalesLine</c> record. This method may be overwritten by a derived method.
    /// </remarks>
    public RecId sourceRecId()
    {
        return cashDiscSourceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the <c>tableId</c> of the transaction that is to be taxed.
    /// </summary>
    /// <returns>
    ///    The <c>tableId</c> of the transaction that is to be taxed.
    /// </returns>
    /// <remarks>
    ///    For example, if the tax is called from a <c>SalesLine</c> transaction, this method will return the
    ///    <c>tableId</c> of the <c>SalesLine</c> table. This method may be overridden by a derived method.
    /// </remarks>
    public RefTableId sourceTableId()
    {
        return cashDiscSourceTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmounts_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns container of tax amounts
    /// </summary>
    /// <returns>container of Amount</returns>
    container taxAmounts_RU()
    {
        return taxAmounts_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTaxOnCashDiscountTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes tax transaction records that are equal to zero.
    /// </summary>
    /// <param name="_voucher">
    /// The voucher of the tax transaction records.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date of the tax transaction records.
    /// </param>
    public static void deleteTaxOnCashDiscountTrans(Voucher _voucher, TransDate _transDate)
    {
        TaxTrans taxTrans;
        TaxTransGeneralJournalAccountEntry taxTransLink;
        boolean canDeleteTaxTrans = true;

        while select
                  sum (TaxAmount),
                  sum (TaxAmountCur),
                  sum (SourceTaxAmountCur),
                  sum (TaxBaseAmount),
                  sum (TaxBaseAmountCur),
                  sum (SourceBaseAmountCur),
                  sum (SourceRegulateAmountCur),
                  sum (TaxInCostPrice),
                  sum (TaxInCostPriceRegulated),
                  sum (TaxInCostPriceMST),
                  sum (TaxInCostPriceCur)
              from taxTrans
              group by TaxCode, TaxDirection, CurrencyCode,
                       SourceCurrencyCode, TaxAutogenerated, euroTriangulation, TaxGroup, TaxItemGroup,
                       ExemptTax
              where taxTrans.Voucher             == _voucher &&
                    taxTrans.TransDate           == _transDate &&
                    taxTrans.TaxOrigin           == TaxOrigin::CashDisc &&
                    ((taxTrans.ExemptTax           == NoYes::No  &&
                      (taxTrans.TaxDirection       == TaxDirection::IncomingTax ||
                       taxTrans.TaxDirection       == TaxDirection::OutgoingTax ||
                       taxTrans.TaxDirection       == TaxDirection::UseTax))
                    ||
                     (taxTrans.ExemptTax == NoYes::Yes &&
                      (taxTrans.TaxDirection == TaxDirection::TaxExemptSales ||
                       taxTrans.TaxDirection == TaxDirection::TaxExemptPurchase)))
        {
            if (taxTrans.TaxAmount || taxTrans.TaxAmountCur || taxTrans.SourceTaxAmountCur
                || taxTrans.TaxBaseAmount || taxTrans.TaxBaseAmountCur || taxTrans.SourceBaseAmountCur
                || taxTrans.SourceRegulateAmountCur || taxTrans.TaxInCostPrice || taxTrans.TaxInCostPriceRegulated
                || taxTrans.TaxInCostPriceMST || taxTrans.TaxInCostPriceCur)
            {
                // Tax amounts for voucher doesn't net to zero, so can't delete transactions
                canDeleteTaxTrans = false;
            }
        }

        if (canDeleteTaxTrans)
        {
            while select forupdate RecId from taxTrans
                  where taxTrans.Voucher             == _voucher &&
                        taxTrans.TransDate           == _transDate &&
                        taxTrans.TaxOrigin           == TaxOrigin::CashDisc &&
                        ((taxTrans.ExemptTax           == NoYes::No  &&
                          (taxTrans.TaxDirection       == TaxDirection::IncomingTax ||
                           taxTrans.TaxDirection       == TaxDirection::OutgoingTax ||
                           taxTrans.TaxDirection       == TaxDirection::UseTax))
                        ||
                         (taxTrans.ExemptTax == NoYes::Yes &&
                          (taxTrans.TaxDirection == TaxDirection::TaxExemptSales ||
                           taxTrans.TaxDirection == TaxDirection::TaxExemptPurchase)))
            {
                delete_from  taxTransLink  where taxTransLink.TaxTrans == taxTrans.RecId;
                taxTrans.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOperationLedgerDimension</Name>
				<Source><![CDATA[
    // HQ-939-69-GDNk
    static LedgerDimensionDefaultAccount findOperationLedgerDimension(TaxTrans         _taxTrans,
                                                       LedgerDimensionDefaultAccount    _operationLedgerDimension,
                                                       LedgerDimensionDefaultAccount    _differingCashDiscLedgerDimension,
                                                       TableId          _cashDiscSourceTableId)
    {
        LedgerDimensionDefaultAccount ledgerDimension;
        ;

        if (_differingCashDiscLedgerDimension)
        {
            ledgerDimension = _differingCashDiscLedgerDimension;
        }

        else if (_cashDiscSourceTableId == tableNum(CustTrans))
        {
            ledgerDimension = TaxLedgerAccountGroup::find(TaxTable::find(_taxTrans.TaxCode).TaxAccountGroup).CashDiscountOutgoingLedgerDimension;
        }
        else if (_cashDiscSourceTableId == tableNum(VendTrans))
        {
            ledgerDimension = TaxLedgerAccountGroup::find(TaxTable::find(_taxTrans.TaxCode).TaxAccountGroup).CashDiscountIncomingLedgerDimension;
        }
        else
        {
            switch (_taxTrans.TaxDirection)
            {
                case TaxDirection::IncomingTax:
                    ledgerDimension = TaxLedgerAccountGroup::find(TaxTable::find(_taxTrans.TaxCode).TaxAccountGroup).CashDiscountIncomingLedgerDimension;
                    break;

                case TaxDirection::OutgoingTax:
                    ledgerDimension = TaxLedgerAccountGroup::find(TaxTable::find(_taxTrans.TaxCode).TaxAccountGroup).CashDiscountOutgoingLedgerDimension;
                    break;

                default:
                    ledgerDimension = _operationLedgerDimension;
                    break;
            }
        }

        if (!ledgerDimension)
        {
            ledgerDimension = _operationLedgerDimension;
        }

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendSettlementSingleCompany</Name>
				<Source><![CDATA[
    public boolean parmCustVendSettlementSingleCompany(boolean  _isCustVendSettlementSingleCompany)
    {
        isCustVendSettlementSingleCompany = _isCustVendSettlementSingleCompany;

        return  isCustVendSettlementSingleCompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxWorkTransFromTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the field of <c>TmpTaxWorkTrans</c>
    /// </summary>
    /// <param name = "_taxTrans">
    /// The buffer of <c>TaxTrans</c>.
    /// </param>
    [Hookable(true)]
    protected void initTaxWorkTransFromTaxTrans(TaxTrans _taxTrans)
    {
        // <GEERU><GIN>
        #isoCountryRegionCodes
        // </GIN></GEERU>

        // <GEERU>
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        taxWorkTrans.clear();
        taxWorkTrans.initFromTaxTrans(_taxTrans);
        this.initTaxWorkTransLedgerDimensions(_taxTrans);
        taxWorkTrans.HeadingTableId           = headingTableId;
        taxWorkTrans.HeadingRecId             = headingRecId;
        taxWorkTrans.SourceTableId            = this.sourceTableId();
        taxWorkTrans.SourceRecId              = this.sourceRecId();
        taxWorkTrans.InvoiceRecId             = invoiceRecId;
        taxWorkTrans.Source                   = taxModuleType;
        taxWorkTrans.Voucher                  = voucher;
        taxWorkTrans.TransDate                = taxDate;
        taxWorkTrans.SourceCurrencyCode       = sourceCurrencyCode;

        taxWorkTrans.TaxReports = NoYes::Yes;
        taxWorkTrans.TaxOrigin  = TaxOrigin::CashDisc;
        taxWorkTrans.Txt        = enum2str(TaxOrigin::CashDisc);
        // <GEERU>
        if (countryRegion_RU)
        {
            taxWorkTrans.OffsetLedgerDimension_RU = _taxTrans.taxTrans_RU().OffsetLedgerDimension_RU;
        }
        // </GEERU>

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
        {
            taxWorkTrans.VatDueDate_W = taxDate;
        }  
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalNumByVoucherAndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns table buffer <c>LedgerJournalVoucherChanged</c> based on the invoice voucher and invoice date.   
    /// </summary>
    /// <param name="_invoicevoucher">
    /// The invoice voucher.
    /// </param>
    /// <param name="_invoicedate">
    /// The invoice date.
    /// </param>
    /// <returns>
    /// A <c>LedgerJournalVoucherChanged</c> table.
    /// </returns>
    private LedgerJournalId getJournalNumByVoucherAndDate(Voucher _invoicevoucher, TransDate _invoicedate)
    {
        LedgerJournalVoucherChanged ledgerJournalVoucherChangedLocal;
        TaxTrans taxTrans,taxTransLocal;
        LedgerJournalId journalNum;

        //When the Invoice Register and Invoice Approval journal voucher and transaction date is same,
        // then we are picking the invoice approval journal number from the LedgerJournalVoucherChanged table.
        select firstonly JournalNum from ledgerJournalVoucherChangedLocal
            where ledgerJournalVoucherChangedLocal.FromVoucher == _invoicevoucher
               && ledgerJournalVoucherChangedLocal.FromDate == _invoicedate
               && ledgerJournalVoucherChangedLocal.DataAreaId == curExt()
            join taxTransLocal
            where taxTransLocal.JournalNum == ledgerJournalVoucherChangedLocal.JournalNum
               && taxTransLocal.Voucher    == ledgerJournalVoucherChangedLocal.FromVoucher
               && taxTransLocal.DataAreaId == ledgerJournalVoucherChangedLocal.DataAreaId;

        if (ledgerJournalVoucherChangedLocal)
        {
            journalNum = ledgerJournalVoucherChangedLocal.JournalNum;
        }
        else
        {
            select firstonly JournalNum
            from    taxTrans
            order by JournalNum
            where   taxTrans.Voucher             == _invoicevoucher &&
                    taxTrans.TransDate           == _invoicedate &&
                    taxTrans.TaxOrigin           == TaxOrigin::Tax &&
                    (taxTrans.TaxDirection       == TaxDirection::IncomingTax ||
                    taxTrans.TaxDirection        == TaxDirection::OutgoingTax ||
                    taxTrans.TaxDirection        == TaxDirection::UseTax ||
                    taxTrans.TaxDirection        == TaxDirection::TaxExemptSales ||
                    taxTrans.TaxDirection        == TaxDirection::TaxExemptPurchase);

            journalNum = taxTrans.JournalNum;
        }

        return journalNum;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>