<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InvoicePostedBusinessEvent</Name>
	<SourceCode>
		<Declaration><![CDATA[
[BusinessEvents(classStr(InvoicePostedBusinessEventContract), 'AccountsReceivable:InvoicePostedBusinessEventName', 'AccountsReceivable:InvoicePostedBusinessEventDescription', ModuleAxapta::Customer)]
public final class InvoicePostedBusinessEvent extends BusinessEventsBase
{
    private Common invoiceJour;
    private InvoicePostedBusinessEventEntityType invoiceEventEntityType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmInvoiceJour</Name>
				<Source><![CDATA[
    private Common parmInvoiceJour(Common _invoiceJour = invoiceJour)
    {
        invoiceJour = _invoiceJour;
        return invoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceEntityType</Name>
				<Source><![CDATA[
    private InvoicePostedBusinessEventEntityType parmInvoiceEntityType(InvoicePostedBusinessEventEntityType _invoicePostedBusinessEventEntityType = invoiceEventEntityType)
    {
        invoiceEventEntityType = _invoicePostedBusinessEventEntityType;
        return invoiceEventEntityType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInvoiceJour</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static InvoicePostedBusinessEvent newFromInvoiceJour(InvoicePostedBusinessEventEntityType _invoicePostedBusinessEventEntityType, Common _invoiceJour)
    {
        if (!InvoicePostedBusinessEvent::validate(_invoicePostedBusinessEventEntityType, _invoiceJour))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        InvoicePostedBusinessEvent businessEvent = new InvoicePostedBusinessEvent();
        businessEvent.parmInvoiceJour(_invoiceJour);
        businessEvent.parmInvoiceEntityType(_invoicePostedBusinessEventEntityType);
        return businessEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    private static boolean validate(InvoicePostedBusinessEventEntityType _invoicePostedBusinessEventEntityType, Common _invoiceJour)
    {
        boolean isValid;
        TableId invoiceJourTableId = _invoiceJour.tableId;
        switch (invoiceJourTableId)
        {
            case tableNum(ProjInvoiceJour):
                if (_invoicePostedBusinessEventEntityType == InvoicePostedBusinessEventEntityType::projectInvoiceEntity)
                {
                    isValid = true;
                }
                break;
            case tableNum(CustInvoiceJour):
                if (_invoicePostedBusinessEventEntityType == InvoicePostedBusinessEventEntityType::custFreeTextInvoiceEntity || _invoicePostedBusinessEventEntityType == InvoicePostedBusinessEventEntityType::salesInvoiceEntity)
                {
                    isValid = true;
                }
                break;
            default:
                isValid = false;
        }
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildContract</Name>
				<Source><![CDATA[
    [Wrappable(true), Replaceable(true), Hookable(false)]
    public BusinessEventsContract buildContract()
    {
        return InvoicePostedBusinessEventContract::newFromInvoiceJour(invoiceEventEntityType, invoiceJour);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>