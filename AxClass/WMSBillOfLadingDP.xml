<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsBillOfLadingDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The WMSBillOfLadingDP class is the report data provider class for the associated
///    <c>WMSBillOfLading</c> reports.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(WMSBillOfLading))
]
public class WmsBillOfLadingDP extends SRSReportDataProviderBase
{
    WMSBillOfLadingCarrier      wmsBillOfLadingCarrier;
    WMSBillOfLadingOrder        wmsBillOfLadingOrder;
    WMSBillOfLading             wmsBillOfLading;
    WMSBillOfLadingTmp          wmsBillOfLadingTmp;

    BarcodeEAN128               barcode;

    InventQty                   totalQty;
    Weight                      totalWeight;

    int                         counter;
    int                         counterPageForCustomer;
    int                         counterPageForCarrier;

    InventQty                   totalCarrierHandlingQty;
    InventQty                   totalCarrierPackageQty;
    Weight                      totalCarrierWeight;

    Integer                     totalNumberOfPages;
    Integer                     currentPage;

    RecordLinkList              orderList;
    RecordLinkList              carrierList;

    #define.FrontPageOrderLines(8)
    #define.FrontPageCarrierLines(8)

    #define.SupplementPageOrderLines(15)
    #define.SupplementPageCarrierLines(17)

    #define.CheckedX('X')
    #define.CircleChar('O')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>barcode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the bar-code.
    /// </summary>
    /// <returns>
    ///    A <c>WMSBillOfLadingId</c> extended data type value that represents the bar-code.
    /// </returns>
    private WMSBillOfLadingId barcode()
    {
        barcode.clear();
        return barcode.WMSBillOfLadingId(true, wmsBillOfLading.BillOfLadingId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateBOL</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates the Bill Of lading calculations.
    /// </summary>
    /// <remarks>
    ///    This method calculates the total quantities for carrier and order. It also calculates the total
    ///    number of pages for a Bill of lading specified by Bill Of lading ID.
    /// </remarks>
    private void generateBOL()
    {
        Integer orderPages, carrierPages;

        totalQty                = 0;
        totalWeight             = 0;
        totalCarrierHandlingQty = 0;
        totalCarrierPackageQty  = 0;
        totalCarrierWeight      = 0;

        orderList               = new RecordLinkList();

        while select wmsBillOfLadingOrder
            where wmsBillOfLadingOrder.BillOfLadingId == wmsBillOfLading.BillOfLadingId
        {
            totalQty            += wmsBillOfLadingOrder.Qty;
            totalWeight         += wmsBillOfLadingOrder.Weight;
            orderList.ins(wmsBillOfLadingOrder);
            this.attachUnderlyingBOL(wmsBillOfLading, true);
        }

        carrierList             = new RecordLinkList();

        while select wmsBillOfLadingCarrier
            where wmsBillOfLadingCarrier.BillOfLadingId == wmsBillOfLading.BillOfLadingId
        {
            totalCarrierHandlingQty     += wmsBillOfLadingCarrier.HandlingQty;
            totalCarrierPackageQty      += wmsBillOfLadingCarrier.PackageQty;
            totalCarrierWeight          += wmsBillOfLadingCarrier.Weight;
            carrierList.ins(wmsBillOfLadingCarrier);
        }

        this.attachBOLCarrier(wmsBillOfLading, true);

        if (orderList.len() <= #FrontPageOrderLines &&
            carrierList.len() <= #FrontPageCarrierLines)
        {
            totalNumberOfPages  = 1;
        }
        else
        {
            orderPages          = real2int(1 + orderList.len() / #SupplementPageOrderLines);
            if ((orderPages - 1) * #SupplementPageOrderLines == orderList.len())
            {
                orderPages--;
            }

            carrierPages        = real2int(1 + carrierList.len() / #SupplementPageCarrierLines);
            if ((carrierPages - 1) * #SupplementPageCarrierLines == carrierList.len())
            {
                carrierPages--;
            }

            totalNumberOfPages = 1 + max(orderPages, carrierPages);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentPageForOrderAndCarrier</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the current page for order or carrier.
    /// </summary>
    /// <param name="_rowNum">
    ///    The row number.
    /// </param>
    /// <returns>
    ///    The current page number.
    /// </returns>
    private int getCurrentPageForOrderAndCarrier(int _rowNum)
    {
        int     currentPageNumber = 0;
        int     row;
        int     additionalPages;
        real    additionalPage;
        int     firstPageStandard;
        int     supplementPageStandard;

        firstPageStandard = #FrontPageOrderLines;
        supplementPageStandard = max(#SupplementPageOrderLines,#SupplementPageCarrierLines);

        if (_rowNum + 1 <= firstPageStandard)
        {
            currentPageNumber = 1;
        }
        else
        {
            row = _rowNum + 1 - firstPageStandard;
            additionalPages = row div supplementPageStandard;
            additionalPage = row mod supplementPageStandard;
            if (additionalPage == 0)
            {
                currentPageNumber = 1 + additionalPages;
            }
            else
            {
                currentPageNumber = 1 + additionalPages + 1;
            }
        }

        return currentPageNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDummyRecordsForCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the dummy record must be inserted for order details.
    /// </summary>
    /// <param name="_rowCount">
    ///    The row number.
    /// </param>
    /// <returns>
    ///    true if the dummy records should be inserted for the order; otherwise, false.
    /// </returns>
    private boolean getDummyRecordsForCustomer(int _rowCount)
    {
        boolean check       = false;
        int     gap         = #SupplementPageCarrierLines - #SupplementPageOrderLines;
        int     divisor     = 0;
        int     remainder   = 0;
        int     excludeRows = 0;
        int     rowCount;

        rowCount            = _rowCount + 1;

        if (rowCount > #FrontPageOrderLines)
        {
            rowCount            = rowCount - #FrontPageOrderLines;
            divisor             = rowCount div #SupplementPageOrderLines;
            if (divisor == 0)
            {
                check = false;
            }
            else
            {
                excludeRows     = (divisor - 1) * 2;
                remainder       = (rowCount - excludeRows) mod #SupplementPageOrderLines;
                if (remainder == 0)
                {
                    check = false;
                }
                else
                {
                    if (remainder <= gap)
                    {
                        check = true;
                    }
                    else
                    {
                        check = false;
                    }
                }
            }
        }

        return check;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalRecords</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the maximum number of records as per page details for a bill of lading ID.
    /// </summary>
    /// <returns>
    ///    The total number of records for the bill Of lading ID.
    /// </returns>
    private int getTotalRecords()
    {
        int maxRows     = 0;
        maxRows         = #FrontPageOrderLines + ((totalNumberOfPages - 1) * #SupplementPageCarrierLines);

        return maxRows;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWMSBillOfLadingTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the data from the temporary <c>WMSBillOfLadingTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the temporary <c>WMSBillOfLadingTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute('WMSBillOfLadingTmp')
    ]
    public WMSBillOfLadingTmp getWMSBillOfLadingTmp()
    {
        select * from wmsBillOfLadingTmp;
        return wmsBillOfLadingTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBarcode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the Barcode to a EAN128 data type value.
    /// </summary>
    private void initBarcode()
    {
        barcode = Barcode::construct(BarcodeType::EAN128);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the specified records in the temporary table.
    /// </summary>
    /// <param name="_rowNum">
    ///    The row or record number for the bill of lading ID.
    /// </param>
    /// <param name="_emptyRecords">
    ///    A Boolean value that specifies whether empty records should be inserted.
    /// </param>
    /// <param name="_dummyRecordsForCustomer">
    ///    A Boolean value that specifies whether dummy records should entered for customers or order details.
    /// </param>
    /// <param name="_peekCustomer">
    ///    A Boolean value that indicates whether to look for a customer related record link list for the next
    ///    record.
    /// </param>
    /// <param name="_peekCarrier">
    ///    A Boolean value that indicates whether to look for a carrier related to a record link list for the
    ///    next record.
    /// </param>
    /// <remarks>
    ///    This method checks for a particular record and inserts it and also inserts dummy records when it is
    ///    required.
    /// </remarks>

    private void insertIntoTempTable(
        int         _rowNum,
        boolean     _emptyRecords,
        boolean     _dummyRecordsForCustomer,
        boolean     _peekCustomer,
        boolean     _peekCarrier)
    {
        this.barcode();
        
        this.initWMSBillOfLadingTmp(_rowNum, _emptyRecords, _dummyRecordsForCustomer, _peekCustomer, _peekCarrier);

        wmsBillOfLadingTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWMSBillOfLadingTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>WMSBillOfLadingTmp</c> record before insertion.
    /// </summary>
    /// <param name="_rowNum">
    ///    The row or record number for the bill of lading ID.
    /// </param>
    /// <param name="_emptyRecords">
    ///    A Boolean value that specifies whether empty records should be inserted.
    /// </param>
    /// <param name="_dummyRecordsForCustomer">
    ///    A Boolean value that specifies whether dummy records should entered for customers or order details.
    /// </param>
    /// <param name="_peekCustomer">
    ///    A Boolean value that indicates whether to look for a customer related record link list for the next
    ///    record.
    /// </param>
    /// <param name="_peekCarrier">
    ///    A Boolean value that indicates whether to look for a carrier related to a record link list for the
    ///    next record.
    /// </param>
    protected void initWMSBillOfLadingTmp(
        int         _rowNum,
        boolean     _emptyRecords,
        boolean     _dummyRecordsForCustomer,
        boolean     _peekCustomer,
        boolean     _peekCarrier)
    {
        wmsBillOfLadingTmp.TotalNumberOfPages           = totalNumberOfPages;

        wmsBillOfLadingTmp.ShippingName                 = wmsBillOfLading.shippingName();
        wmsBillOfLadingTmp.Addressing1                  = wmsBillOfLading.shippingAddress();
        wmsBillOfLadingTmp.ShipmentId                   = wmsBillOfLading.ShipmentId;
        wmsBillOfLadingTmp.BillOfLadingId               = wmsBillOfLading.BillOfLadingId;
        wmsBillOfLadingTmp.bolIdBarCode                 = barcode.barcodeStr();
        wmsBillOfLadingTmp.bolIdBarCodeHR               = barcode.barcodeStrHR();

        wmsBillOfLadingTmp.Name2                        = wmsBillOfLading.receivingName();
        wmsBillOfLadingTmp.Addressing2                  = wmsBillOfLading.receivingAddress();
        wmsBillOfLadingTmp.CustAccount                  = wmsBillOfLading.CustAccount;
        wmsBillOfLadingTmp.Name3                        = wmsBillOfLading.thirdPartyName();
        wmsBillOfLadingTmp.Addressing3                  = wmsBillOfLading.thirdPartyAddress();
        wmsBillOfLadingTmp.MasterBOLIdText              = (wmsBillOfLading.MasterBOLId) ? "@SYS50761" : '';
        wmsBillOfLadingTmp.MasterBOLId                  = wmsBillOfLading.MasterBOLId;
        wmsBillOfLadingTmp.SubBOLId                     = (wmsBillOfLading.MasterBOL) ? "@SYS50762" : '';
        wmsBillOfLadingTmp.SubBOLIds                    = this.subBOLIds(wmsBillOfLading, true);
        wmsBillOfLadingTmp.CarrierName                  = wmsBillOfLading.CarrierName;
        wmsBillOfLadingTmp.TrailerId                    = wmsBillOfLading.TrailerId;
        wmsBillOfLadingTmp.SealId                       = wmsBillOfLading.SealId;
        wmsBillOfLadingTmp.FreightPrepaid               = (wmsBillOfLading.FreightChargeTerms == WMSFreightChargeTerms::Prepaid) ? #CheckedX : '';
        wmsBillOfLadingTmp.FreightCollect               = (wmsBillOfLading.FreightChargeTerms == WMSFreightChargeTerms::Collect) ? #CheckedX : '';
        wmsBillOfLadingTmp.FreightThirdParty            = (wmsBillOfLading.FreightChargeTerms == WMSFreightChargeTerms::ThirdParty) ? #CheckedX : '';
        wmsBillOfLadingTmp.MasterBOL                    = (wmsBillOfLading.MasterBOL == NoYes::Yes) ? #CheckedX : '';

        wmsBillOfLadingTmp.CurrentPageCustomer          = this.getCurrentPageForOrderAndCarrier(_rowNum);
        wmsBillOfLadingTmp.CurrentPageCarrier           = this.getCurrentPageForOrderAndCarrier(_rowNum);

        if (_peekCustomer && !_emptyRecords && !_dummyRecordsForCustomer)
        {
            wmsBillOfLadingOrder                        = orderList.peek();
            wmsBillOfLadingTmp.CircleY                  = (wmsBillOfLadingOrder.InventTransRefId && wmsBillOfLadingOrder.IsPallet) ? #CircleChar : '';
            wmsBillOfLadingTmp.CircleN                  = (wmsBillOfLadingOrder.InventTransRefId && !wmsBillOfLadingOrder.IsPallet) ? #CircleChar : '';
            wmsBillOfLadingTmp.InventTransRefId         = wmsBillOfLadingOrder.InventTransRefId;
            wmsBillOfLadingTmp.OrderQty                 = wmsBillOfLadingOrder.Qty;
            wmsBillOfLadingTmp.OrderWeight              = wmsBillOfLadingOrder.Weight;
            wmsBillOfLadingTmp.OrderAdditionalInfo      = wmsBillOfLadingOrder.AdditionalInfo;

            wmsBillOfLadingTmp.DummyCustomer = NoYes::No;//Set the DummyCustomer Column to Yes
        }
        else
        {
            wmsBillOfLadingTmp.CircleY                  = '';
            wmsBillOfLadingTmp.CircleN                  = '';
            wmsBillOfLadingTmp.InventTransRefId         = '';
            wmsBillOfLadingTmp.OrderQty                 = 0;
            wmsBillOfLadingTmp.OrderWeight              = 0;
            wmsBillOfLadingTmp.OrderAdditionalInfo      = '';
            //If Dummy record is inserted for Customer set the DummyCustomer Column to Yes
            if (_dummyRecordsForCustomer)
            {
                wmsBillOfLadingTmp.DummyCustomer        = NoYes::Yes;
            }
            else
            {
                wmsBillOfLadingTmp.DummyCustomer        = NoYes::No;
            }
        }

        if (_peekCarrier && !_emptyRecords)
        {
            wmsBillOfLadingCarrier = carrierList.peek();
            wmsBillOfLadingTmp.CarrierHandlingQty           = wmsBillOfLadingCarrier.HandlingQty;
            wmsBillOfLadingTmp.CarrierHandlingPackageType   = wmsBillOfLadingCarrier.HandlingPackageType;
            wmsBillOfLadingTmp.CarrierPackageQty            = wmsBillOfLadingCarrier.PackageQty;
            wmsBillOfLadingTmp.CarrierPackagePackageType    = wmsBillOfLadingCarrier.PackagePackageType;
            wmsBillOfLadingTmp.CarrierWeight                = wmsBillOfLadingCarrier.Weight;
            wmsBillOfLadingTmp.HazardousMaterial            = (wmsBillOfLadingCarrier.HazardousMaterial == NoYes::Yes) ? #CheckedX : '';
            wmsBillOfLadingTmp.CarrierAdditionalInfo        = wmsBillOfLadingCarrier.AdditionalInfo;
        }
        else
        {
            wmsBillOfLadingTmp.CarrierHandlingQty           = 0;
            wmsBillOfLadingTmp.CarrierHandlingPackageType   = WMSPackageType::None;
            wmsBillOfLadingTmp.CarrierPackageQty            = 0;
            wmsBillOfLadingTmp.CarrierPackagePackageType    = WMSPackageType::None;
            wmsBillOfLadingTmp.CarrierWeight                = 0;
            wmsBillOfLadingTmp.HazardousMaterial            = '';
            wmsBillOfLadingTmp.CarrierAdditionalInfo        = '';
        }

        wmsBillOfLadingTmp.TrailerLoaded                    = wmsBillOfLading.TrailerLoaded;
        wmsBillOfLadingTmp.LoadedByShipperValue             = (wmsBillOfLading.TrailerLoaded == WMSTrailerLoaded::ByShipper) ? #CheckedX : '';
        wmsBillOfLadingTmp.LoadedByDriverValue              =  (wmsBillOfLading.TrailerLoaded == WMSTrailerLoaded::ByDriver) ? #CheckedX : '';
        wmsBillOfLadingTmp.FreightCounted                   = wmsBillOfLading.FreightCounted;
        wmsBillOfLadingTmp.CountedByShipperValue            = (wmsBillOfLading.FreightCounted == WMSFreightCounted::ByShipper) ? #CheckedX : '';
        wmsBillOfLadingTmp.CountedByDriver1Value            = (wmsBillOfLading.FreightCounted == WMSFreightCounted::ByDriverPallets) ? #CheckedX : '';
        wmsBillOfLadingTmp.CountedByDriver2Value            = (wmsBillOfLading.FreightCounted == WMSFreightCounted::ByDriverPieces) ? #CheckedX : '';

        wmsBillOfLadingTmp.GrandTotalQtyCustomer            = totalQty;
        wmsBillOfLadingTmp.GrandTotalWeightCustomer         = totalWeight;

        wmsBillOfLadingTmp.GrandTotalHandlingQtyCarrier     = totalCarrierHandlingQty;
        wmsBillOfLadingTmp.GrandTotalPackageQtyCarrier      = totalCarrierPackageQty;
        wmsBillOfLadingTmp.GrandTotalWeightCarrier          = totalCarrierWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic. Calls helper methods and inserts data to temporary table.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. It will be called by SSRS at
    ///    runtime. It should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        QueryRun                queryRun;
        int                     len;
        int                     counterPrimary,counterSecondaryOrder,counterSecondaryCarrier;
        boolean                 multiplePages;
        boolean                 dummyRecordsForCustomers;
        boolean                 peekCustomer;
        boolean                 peekCarrier;

        queryRun = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            //Set all variables to normal for each Bill of lading record/Id
            multiplePages                    =   false;
            currentPage                      =   0;
            len                              =   0;
            counterPrimary                   =   0;
            counterSecondaryOrder            =   0;
            counterSecondaryCarrier          =   0;
            dummyRecordsForCustomers         =   false;
            peekCustomer                     =   false;
            peekCarrier                      =   false;

            wmsBillOfLading                  =   queryRun.get(tableNum(WMSBillOfLading));
            this.initBarcode();
            this.generateBOL();
            len = this.getTotalRecords();

            // If multi pages insert dummy columns in first page
            if (totalNumberOfPages > 1)
            {
                multiplePages = true;
                for (counterPrimary = 0;counterPrimary< #FrontPageOrderLines;counterPrimary++)
                {
                    this.insertIntoTempTable(counterPrimary,true,dummyRecordsForCustomers,peekCustomer,peekCarrier);
                }
            }

            while (counterPrimary<len)
            {
                // Get wether to insert dummy columns or not
                if (multiplePages)
                {
                    dummyRecordsForCustomers = this.getDummyRecordsForCustomer(counterPrimary);
                }

                if (counterSecondaryCarrier<carrierList.len())
                {
                    carrierList.next();// Go To next record in record list
                    peekCarrier = true;
                    counterSecondaryCarrier++;
                }
                else
                {
                    peekCarrier = false;
                }

                if (!dummyRecordsForCustomers)
                {
                    if (counterSecondaryOrder<orderList.len())
                    {
                        orderList.next();
                        peekCustomer = true;
                        counterSecondaryOrder++;
                    }
                    else
                    {
                        peekCustomer = false;
                    }
                }
                else
                {
                    peekCustomer = false;
                }

                this.insertIntoTempTable(counterPrimary,false,dummyRecordsForCustomers,peekCustomer,peekCarrier);

                counterPrimary++;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>subBOLIds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the sub bill of lading IDs and concatenates them.
    /// </summary>
    /// <param name="_wmsBillOfLading">
    ///    The bill of lading for which the operation will be performed.
    /// </param>
    /// <param name="_requireMaster">
    ///    Controls whether the bill of lading must be a master bill of lading.
    /// </param>
    /// <returns>
    ///    The concatenated sub bill of lading IDs.
    /// </returns>
    private String255 subBOLIds(WMSBillOfLading _wmsBillOfLading,  boolean _requireMaster = false)
    {
        String255       res = '';
        String255       resTemp = '';
        WMSBillOfLading     subWMSBillOfLading;

        if (_requireMaster && !_wmsBillOfLading.MasterBOL)
        {
            return res;
        }
        while select BillOfLadingId from subWMSBillOfLading
            where subWMSBillOfLading.MasterBOLId == _wmsBillOfLading.BillOfLadingId
        {
            if (res)
            {
                res += ', ';
            }
            res += subWMSBillOfLading.BillOfLadingId;
            resTemp = this.subBOLIds(subWMSBillOfLading);
            if (resTemp)
            {
                res += ', ' + resTemp;
            }
        }
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>attachUnderlyingBOL</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates the underlying bill of lading calculations for master bill of lading.
    /// </summary>
    /// <param name="_wmsBillOfLadingMaster">
    ///    The bill of lading for which calculations will be performed.
    /// </param>
    /// <param name="_requireMaster">
    ///    Controls whether the bill of lading must be a master bill of lading.
    /// </param>
    /// <remarks>
    ///    This method calculates the total quantities.
    /// </remarks>
    private void attachUnderlyingBOL(WMSBillOfLading _wmsBillOfLadingMaster, boolean _requireMaster = false)
    {
        WMSBillOfLading      wmsBillOfLadingLocal;
        WMSBillOfLadingOrder wmsBillOfLadingOrderLocal;

        if (_requireMaster && !_wmsBillOfLadingMaster.MasterBOL)
        {
            return;
        }
        while select wmsBillOfLadingOrderLocal
            join wmsBillOfLadingLocal
                where wmsBillOfLadingOrderLocal.BillOfLadingId == wmsBillOfLadingLocal.BillOfLadingId
                    && wmsBillOfLadingLocal.MasterBOLId == _wmsBillOfLadingMaster.BillOfLadingId
                    && wmsBillOfLadingLocal.MasterBOLId != wmsBillOfLadingLocal.BillOfLadingId // avoid infinite loop
        {
            totalQty += wmsBillOfLadingOrderLocal.Qty;
            totalWeight += wmsBillOfLadingOrderLocal.Weight;
            orderList.ins(wmsBillOfLadingOrderLocal);
            this.attachUnderlyingBOL(wmsBillOfLadingLocal);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>attachBOLCarrier</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates the bill of lading carrier calculations for master bill of lading.
    /// </summary>
    /// <param name="_wmsBillOfLadingMaster">
    ///    The bill of lading for which calculations will be performed.
    /// </param>
    /// <param name="_requireMaster">
    ///    Controls whether the bill of lading must be a master bill of lading.
    /// </param>
    /// <remarks>
    ///    This method calculates the total quantities.
    /// </remarks>
    private void attachBOLCarrier(WMSBillOfLading _wmsBillOfLadingMaster, boolean _requireMaster = false)
    {
        if (_requireMaster && !_wmsBillOfLadingMaster.MasterBOL)
        {
            return;
        }

        WMSBillOfLading         wmsBillOfLadingLocal;
        WMSBillOfLadingCarrier  wmsBillOfLadingCarrierLocal;

        while select wmsBillOfLadingCarrierLocal
        join wmsBillOfLadingLocal
            where wmsBillOfLadingCarrierLocal.BillOfLadingId == wmsBillOfLadingLocal.BillOfLadingId
               && wmsBillOfLadingLocal.MasterBOLId           == _wmsBillOfLadingMaster.BillOfLadingId
        {
            totalCarrierHandlingQty += wmsBillOfLadingCarrierLocal.handlingQty;
            totalCarrierPackageQty  += wmsBillOfLadingCarrierLocal.PackageQty;
            totalCarrierWeight      += wmsBillOfLadingCarrierLocal.Weight;

            carrierList.ins(wmsBillOfLadingCarrierLocal);
            this.attachBOLCarrier(wmsBillOfLadingLocal);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>