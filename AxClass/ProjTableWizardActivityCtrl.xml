<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTableWizardActivityCtrl</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjTableWizardActivityCtrl extends ProjTableWizard
{
    ProjId      oldId;
    ProjId      newId;
    ProjTable   projTableNew;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createdQtyDB</Name>
				<Source><![CDATA[
    Integer createdQtyDB()
    {
        return any2int((select count(RecId) from projActivity).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createdQtyFile</Name>
				<Source><![CDATA[
    Integer createdQtyFile()
    {
        #define.star('*')

        int                 tmpCount;
        ProjTable           projTable;
        HierarchyIdBase     hierarchyId;
        HierarchyTreeTable  hierarchyTreeTable;

        while select projTable where projTable.ProjId like oldId + #star
        {
            hierarchyId = HierarchyLinkTable::findRefTableRecId(tablenum(ProjTable), projTable.RecId).HierarchyId;
            select count(RecId) from hierarchyTreeTable
                where hierarchyTreeTable.HierarchyId == hierarchyId &&
                      hierarchyTreeTable.ElementNodeType == ElementNodeType::Activity;
            tmpCount = tmpCount + any2int(hierarchyTreeTable.RecId);
        }

        return tmpCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static Name description()
    {
        return "@SYS58767";
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDB</Name>
				<Source><![CDATA[
    void insertDB()
    {
        ProjTableWizardActivityCtrl::insertDBOnServer(oldId, newId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewId</Name>
				<Source><![CDATA[
    ProjId parmNewId(ProjId    _newId = newId)
    {
        newId  = _newId;

        return newId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOldId</Name>
				<Source><![CDATA[
    ProjId parmOldId(ProjId    _oldId = oldId)
    {
        oldId  = _oldId;

        return oldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjTable</Name>
				<Source><![CDATA[
    ProjTable parmProjTable(FormDataSource   _form_DS  = null)
    {
        FormDataSource      form_DS;

        if (_form_DS)
        {
            form_DS             = _form_DS;
            projTableNew        = form_DS.cursor();
        }

        return projTableNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProjTableWizardActivityCtrl construct()
    {
        return new ProjTableWizardActivityCtrl();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDBOnServer</Name>
				<Source><![CDATA[
    private static void insertDBOnServer(ProjId _oldProjId, ProjId _newProjId)
    {
        #define.star('*')

        ProjId                      newProjId;
        ProjTable                   newProjTable;
        ProjTable                   projTable;

        ttsbegin;

        while select projTable where projTable.ProjId like _oldProjId + #star
        {
            // copy only if old proj has hierarchy
            HierarchyLinkTable hierarchyLinkTable = HierarchyLinkTable::findRefTableRecId(tablenum(ProjTable), projTable.RecId);
            if (hierarchyLinkTable)
            {
                newProjId   = ProjTableWizardCtrl::setNewProjId(projTable.ProjId,
                                                                projTable.ParentId,
                                                                _oldProjId,
                                                                _newProjId);
                newProjTable = ProjTable::find(newProjId);

                if (newProjTable)
                {
                    ProjTableWizardActivityCtrl::createHierarchy(hierarchyLinkTable, newProjTable);
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>Hierarchy</c> object based on a new <c>ProjTable</c> buffer.
    /// </summary>
    /// <param name = "_hierarchyLinkTable"><c>HierarchyLinkTable</c> instance of the source <c>ProjTable</c> to be used in the new Project hierarchy.</param>
    /// <param name = "_newProjTable">A <c>ProjTable</c>buffer instance.</param>
    protected static void createHierarchy(HierarchyLinkTable _hierarchyLinkTable, ProjTable _newProjTable)
    {
        Hierarchy                   hierarchy;

        //create hierarchylinktable record
        if (HierarchyLinkTable::findRefTableRecId(tablenum(ProjTable), _newProjTable.RecId) == null)
        {
            //create Hierarchy record
            HierarchyCreate hierarchyCreate = HierarchyCreate::construct(HierarchyType::Project);
            hierarchyCreate.parmSourceCommon(_newProjTable);
            hierarchyCreate.run();
            hierarchy = hierarchyCreate.parmHierarchy();
        }
        else
        {
            HierarchyIdBase hierarchyId = HierarchyLinkTable::findRefTableRecId(tableNum(ProjTable), _newProjTable.RecId).HierarchyId;
            hierarchy = Hierarchy::find(hierarchyId);
        }

        if (hierarchy)
        {
            ProjPlanVersionsManager::preImportHierarchy(_hierarchyLinkTable.HierarchyId, hierarchy.HierarchyId, 1);
            ProjPlanVersionsManager::importTemplateHierarchy(_hierarchyLinkTable.HierarchyId, hierarchy.HierarchyId, 1);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>