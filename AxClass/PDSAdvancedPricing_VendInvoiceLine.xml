<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PDSAdvancedPricing_VendInvoiceLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>PDSAdvancedPricing_VendInvoiceLine</c> computes prices using potency pricing calculation expressions for a vendor invoice line.
/// </summary>
public class PDSAdvancedPricing_VendInvoiceLine extends PDSAdvancedPricing
{
    VendInvoiceInfoLine         vendInvoiceInfoLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
        public Price calc()
    {
        LineAmount      calculatedUnitPrice;

        calculatedUnitPrice = super();

        if (!this.isError() && calculatedUnitPrice == 0 && this.unitPrice() != 0)
        {
            this.evalError(strFmt("@PSC757", this.itemId()));
        }

        return calculatedUnitPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculationId</Name>
				<Source><![CDATA[
        protected PDSCalculationId calculationId()
    {
        return vendInvoiceInfoLine.PDSCalculationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTableModule</Name>
				<Source><![CDATA[
        protected InventTableModule inventTableModule()
    {
        return InventTableModule::find(this.itemId(), ModuleInventPurchSales::Purch);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
        protected InventTransId inventTransId()
    {
        return vendInvoiceInfoLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
        protected ItemId itemId()
    {
        return vendInvoiceInfoLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxReceiptStatus</Name>
				<Source><![CDATA[
        protected StatusReceipt maxReceiptStatus()
    {
        return StatusReceipt::Received;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendInvoiceInfoLine</Name>
				<Source><![CDATA[
        public VendInvoiceInfoLine parmVendInvoiceInfoLine(VendInvoiceInfoLine _vendInvoiceInfoLine = vendInvoiceInfoLine)
    {
        vendInvoiceInfoLine = _vendInvoiceInfoLine;

        return vendInvoiceInfoLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
        protected Qty qty()
    {
        return vendInvoiceInfoLine.ReceiveNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitPrice</Name>
				<Source><![CDATA[
        protected PriceCur unitPrice()
    {
        PriceCur            price;

        price = vendInvoiceInfoLine.PurchPrice;
        if (!price)
        {
            price = vendInvoiceInfoLine.LineAmount / vendInvoiceInfoLine.ReceiveNow;
        }

        return price;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PDSAdvancedPricing_VendInvoiceLine construct()
    {
        return new PDSAdvancedPricing_VendInvoiceLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFromLineHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies additional PDS calculation fields when a vendor invoice info line record is copied.
    /// </summary>
    /// <param name="_args">
    /// The event handler arguments.
    /// </param>
    /// <remarks>
    /// This is a post event handler for <c>VendInvoiceInfoLine</c> table method <c>copyFromVendInvoiceInfoLine</c>.
    /// </remarks>
    public static void copyFromLineHandler(XppPrePostArgs _args)
    {
        VendInvoiceInfoLine     infoLine                = _args.getThis();
        VendInvoiceInfoLine     vendInvoiceInfoLine     = _args.getArg('_vendInvoiceInfoLine');

        infoLine.PDSCalculationId           = vendInvoiceInfoLine.PDSCalculationId;
        infoLine.PDSCalculatedUnitPrice     = vendInvoiceInfoLine.PDSCalculatedUnitPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPriceDiscHandler</Name>
				<Source><![CDATA[
        [PostHandlerFor(tableStr(VendInvoiceInfoLine), tableMethodStr(VendInvoiceInfoLine, initFromPriceDisc))]
    /// <summary>
    /// Initializes the PDS calculation fields.
    /// </summary>
    /// <param name="_args">
    /// The event handler arguments.
    /// </param>
    /// <remarks>
    /// This is a post event handler for <c>VendInvoiceInfoLine</c> table method <c>initFromPriceDisc</c>.
    /// </remarks>
    public static void initFromPriceDiscHandler(XppPrePostArgs _args)
    {
        VendInvoiceInfoLine     infoLine    = _args.getThis();
        PriceDisc_Price         priceDisc   = _args.getArg('_priceDisc');

        if (#PDSPotencyEnabled && infoLine.inventTable().PDSBaseAttributeId)
        {
            infoLine.PDSCalculationId = priceDisc.pdsCalculationId();
            if (infoLine.PDSCalculationId != '')
            {
                infoLine.PDSCalculatedUnitPrice = PDSAdvancedPricing::newRecord(infoLine).calc();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendInvoiceTransFromPurchLineHandler</Name>
				<Source><![CDATA[
        [PostHandlerFor(tableStr(VendInvoiceTrans), tableMethodStr(VendInvoiceTrans, initFromPurchLine))]
    /// <summary>
    /// Handles additional initialization from purchase order line advancing pricing fields for vendor invoice line.
    /// </summary>
    /// <param name="_args">
    /// The pre-/post-arguments for the event.
    /// </param>
    /// <remarks>
    /// This is expected to be subscribed as a post-event event handler on <see cref="VendInvoiceTrans table"/> method <c>initFromPurchLine</c>.
    /// </remarks>
    public static void initVendInvoiceTransFromPurchLineHandler(XppPrePostArgs _args)
    {
        VendInvoiceTrans        vendInvoiceTrans = _args.getThis();
        PurchLine               purchLine        = _args.getArg('_purchLine');
        PDSAdvancedPriceInfo    advancedPriceInfo;

        advancedPriceInfo = purchLine.pdsAdvancedPriceInfo();
        if (advancedPriceInfo)
        {
            vendInvoiceTrans.PurchPrice     = advancedPriceInfo.CalculatedUnitPrice;
            vendInvoiceTrans.LineAmount     = advancedPriceInfo.CalculatedLineAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountModifiedHandler</Name>
				<Source><![CDATA[
        [PostHandlerFor(tableStr(VendInvoiceInfoLine), tableMethodStr(VendInvoiceInfoLine, lineAmountModified))]
    /// <summary>
    /// Initializes the PDS calculation fields when the line amount has been modified directly.
    /// </summary>
    /// <param name="_args">
    /// The event handler arguments.
    /// </param>
    /// <remarks>
    /// This is a post event handler for <c>VendInvoiceInfoLine</c> table method <c>lineAmountModified</c>.
    /// </remarks>
    public static void lineAmountModifiedHandler(XppPrePostArgs _args)
    {
        vendInvoiceInfoLine     infoLine = _args.getThis();

        infoLine.PDSCalculatedUnitPrice = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newVendInvoiceInfoLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>PDSAdvancedPricing</c> for a vendor invoice info line.
    /// </summary>
    /// <param name="_vendInvoiceInfoLine">
    /// The <c>VendInvoiceInfoLine</c> for which to calculate a price.
    /// </param>
    /// <returns>
    /// A <c>PDSAdvancedPricing</c> to compute the calculated adjusted price for <paramref name="_vendInvoiceInfoLine"/>.
    /// </returns>
    public static PDSAdvancedPricing newVendInvoiceInfoLine(VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
        PDSAdvancedPricing_VendInvoiceLine  advPricing;

        advPricing = PDSAdvancedPricing_VendInvoiceLine::construct();
        advPricing.parmVendInvoiceInfoLine(_vendInvoiceInfoLine);
        advPricing.parmPDSCalculationTable(PDSCalculationTable::find(_vendInvoiceInfoLine.PDSCalculationId));

        return advPricing;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>