<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjOnAccountInvoicePlanDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjOnAccountInvoicePlanDP</c> class provides data for the <c>ProjOnAccountInvoicePlan</c>
///    report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(ProjOnAccountInvoicePlan)),
    SRSReportParameterAttribute(classstr(ProjOnAccountInvoicePlanContract))
]
class ProjOnAccountInvoicePlanDP extends SRSReportDataProviderBase
{
    TmpProjOnAccountInvoicePlan tmpProjOnAccountInvoicePlan;
    ProjTable                   projTable;
    ProjOnAccTrans              projOnAccTrans;
    ProjOnAccTransSale          projOnAccTransSale;

    boolean                     includeInvoiced;
    boolean                     includeChargeable;
    boolean                     includeTimeMaterial;
    boolean                     includeFixedPrice;
    boolean                     includeTimeMaterialBillingMethod;
    boolean                     includeFixedPriceBillingMethod;

    TransDate                   fromDate;
    TransDate                   toDate;

    projInvoiceSort             projInvoiceSort;

    QueryRun                    queryRun;
    /// <summary>
    ///    Retrieves the data from the <c>TmpProjOnAccountInvoicePlan</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>TmpProjOnAccountInvoicePlan</c> table.
    /// </returns>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTmpProjOnAccountInvoicePlan</Name>
				<Source><![CDATA[
    [SRSReportDataSetAttribute('TmpProjOnAccountInvoicePlan')]
    public TmpProjOnAccountInvoicePlan getTmpProjOnAccountInvoicePlan()
    {
        select * from tmpProjOnAccountInvoicePlan;
        return tmpProjOnAccountInvoicePlan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpProjOnAccountInvoicePlan</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the values into the temporary table.
    /// </summary>
    private void insertTmpProjOnAccountInvoicePlan()
    {
        tmpProjOnAccountInvoicePlan.clear();

        tmpProjOnAccountInvoicePlan.ProjId = projTable.ProjId;
        tmpProjOnAccountInvoicePlan.Name = projTable.Name;
        tmpProjOnAccountInvoicePlan.Responsible = HcmWorker::find(projTable.WorkerResponsible).PersonnelNumber;
        tmpProjOnAccountInvoicePlan.TransDate = projOnAccTrans.TransDate;
        tmpProjOnAccountInvoicePlan.Description = projOnAccTrans.Description;
        tmpProjOnAccountInvoicePlan.ProjProposalId = projOnAccTrans.proposalId();
        tmpProjOnAccountInvoicePlan.ProjInvoiceId = projOnAccTrans.projInvoiceId();
        tmpProjOnAccountInvoicePlan.CurrencyId = projOnAccTrans.CurrencyId;
        tmpProjOnAccountInvoicePlan.AmountCur = projOnAccTransSale.Amount;
        if (projOnAccTrans.TransactionOrigin == ProjOrigin::BeginningBalance && !tmpProjOnAccountInvoicePlan.AmountMST)
        {
            tmpProjOnAccountInvoicePlan.AmountMST = CurrencyExchangeHelper::amountCur2MST(projOnAccTrans.transTurnover(),projOnAccTrans.CurrencyId,
                                                    ExchangeRateHelper::exchRate(projOnAccTrans.CurrencyId,projOnAccTrans.TransDate));
        }
        else
        {
            tmpProjOnAccountInvoicePlan.AmountMST = projOnAccTrans.amountMst();
        }

        tmpProjOnAccountInvoicePlan.CustAccount = projTable.CustAccount;
        tmpProjOnAccountInvoicePlan.ProjInvoiceProjId = projTable.ProjInvoiceProjId;

        tmpProjOnAccountInvoicePlan.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the query ranges.
    /// </summary>
    protected void modifyQuery()
    {
        if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            QueryBuildDataSource qbdsPSAContractLineItems = queryRun.query().dataSourceTable(tableNum(PSAContractLineItems));
            qbdsPSAContractLineItems.enabled(true);
            PSAContractLineItemRangesHelper::addBillingMethodRangesToDS(
                qbdsPSAContractLineItems,
                includeTimeMaterialBillingMethod,
                includeFixedPriceBillingMethod);
        }
        else
        {
            // ProjTable
            QueryBuildDataSource qbdsProjTable = queryRun.query().dataSourceTable(tablenum(ProjTable));
            qbdsProjTable.addRange(fieldnum(ProjTable, Type)).status(RangeStatus::Hidden);

            if (includeTimeMaterial)
            {
                qbdsProjTable.addRange(fieldnum(ProjTable,Type)).value(queryValue(ProjType::TimeMaterial));
            }

            if (includeFixedPrice)
            {
                qbdsProjTable.addRange(fieldnum(ProjTable,Type)).value(queryValue(ProjType::FixedPrice));
            }
        }

        // ProjOnAccTransSale table
        QueryBuildDataSource qbdsProjOnAccTransSale = queryRun.query().dataSourceTable(tablenum(ProjOnAccTransSale));
        qbdsProjOnAccTransSale.addRange(fieldnum(ProjOnAccTransSale, TransStatus)).status(RangeStatus::Hidden);

        if (includeInvoiced)
        {
            qbdsProjOnAccTransSale.addRange(fieldnum(ProjOnAccTransSale, TransStatus)).value(queryValue(ProjTransStatus::Invoiced));
            qbdsProjOnAccTransSale.addRange(fieldnum(ProjOnAccTransSale, TransStatus)).value(queryValue(ProjTransStatus::MarkedCreditnote));
            qbdsProjOnAccTransSale.addRange(fieldnum(ProjOnAccTransSale, TransStatus)).value(queryValue(ProjTransStatus::Estimated));
            qbdsProjOnAccTransSale.addRange(fieldnum(ProjOnAccTransSale, TransStatus)).value(queryValue(ProjTransStatus::Eliminated));
            qbdsProjOnAccTransSale.addRange(fieldnum(ProjOnAccTransSale, TransStatus)).value(queryValue(ProjTransStatus::CreditnoteProposal));
        }
        if (includeChargeable)
        {
            qbdsProjOnAccTransSale.addRange(fieldnum(ProjOnAccTransSale, TransStatus)).value(queryValue(ProjTransStatus::Registered));
            qbdsProjOnAccTransSale.addRange(fieldnum(ProjOnAccTransSale, TransStatus)).value(queryValue(ProjTransStatus::InvoiceProposal));
        }

        // ProjOnAccTrans table
        QueryBuildDataSource qbdsProjOnAccTrans = queryRun.query().dataSourceTable(tablenum(ProjOnAccTrans));
        TransDate tmpFromDate = (fromDate ? fromDate : dateNull());
        TransDate tmpToDate = (toDate ? toDate : dateMax());

        if (tmpFromDate <= tmpToDate)
        {
            qbdsProjOnAccTrans.addRange(fieldnum(ProjOnAccTrans, TransDate)).value(strfmt("%1..%2",queryValue(tmpFromDate), queryValue(tmpToDate)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. It will be called by SQL
    ///    Server Reporting Services (SSRS) at run time. The method should compute data and populate the data
    ///    tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        ProjOnAccountInvoicePlanContract contract = this.parmDataContract() as ProjOnAccountInvoicePlanContract;

        includeTimeMaterial = contract.parmTimeMaterial();
        includeFixedPrice = contract.parmFixedPrice();
        includeInvoiced = contract.parmInvoiced();
        includeChargeable = contract.parmChargeable();

        includeTimeMaterialBillingMethod = contract.parmTimeMaterialBillingMethod();
        includeFixedPriceBillingMethod = contract.parmFixedPriceBillingMethod();

        fromDate = contract.parmFromDate();
        toDate = contract.parmToDate();

        projInvoiceSort = contract.parmProjInvoiceSort();

        queryRun = new SysQueryRun(this.parmQuery());

        this.setSortField();
        this.modifyQuery();

        while (queryRun.next())
        {
            if (SysReportRun::changed(queryRun,tablenum(ProjTable)))
            {
                projTable = queryRun.get(tablenum(ProjTable));
            }
            if (SysReportRun::changed(queryRun,tablenum(ProjOnAccTrans)))
            {
                projOnAccTrans = queryRun.get(tablenum(ProjOnAccTrans));
            }
            if (SysReportRun::changed(queryRun,tablenum(ProjOnAccTransSale)))
            {
                projOnAccTransSale = queryRun.get(tablenum(ProjOnAccTransSale));
            }

            this.insertTmpProjOnAccountInvoicePlan();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSortField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the query sort field.
    /// </summary>
    public void setSortField()
    {
        QueryBuildDataSource    queryProjTableDS, queryProjOnAccTransDS;
        int                     sortNo;

        queryProjTableDS = queryRun.query().dataSourceTable(tablenum(ProjTable));
        queryProjOnAccTransDS = queryRun.query().dataSourceTable(tablenum(ProjOnAccTrans));

        queryProjTableDS.sortClear();
        queryProjOnAccTransDS.sortClear();

        switch (projInvoiceSort)
        {
            case projInvoiceSort::InvoiceDate:
                queryProjOnAccTransDS.addSortField(fieldnum(ProjOnAccTrans,TransDate));
                sortNo = queryProjOnAccTransDS.sortFieldCount();
                queryProjOnAccTransDS.autoSum(sortNo, true);
                break;
            case projInvoiceSort::Customer:
                queryProjTableDS.addSortField(fieldnum(ProjTable,CustAccount));
                sortNo = queryProjTableDS.sortFieldCount();
                queryProjTableDS.autoSum(sortNo, true);
                break;
            case projInvoiceSort::InvoiceProject:
                queryProjTableDS.addSortField(fieldnum(ProjTable,ProjInvoiceProjId));
                sortNo = queryProjTableDS.sortFieldCount();
                queryProjTableDS.autoSum(sortNo, true);
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>