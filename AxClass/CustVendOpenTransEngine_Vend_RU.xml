<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendOpenTransEngine_Vend_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustVendOpenTransEngine_Vend_RU extends CustVendOpenTransEngine_RU
{
    boolean                  paymentGroupEnabled;
    DimSettlementCtrlType_RU dimSettlementCtrlType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLookupForAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the purchase agreements lookup.
    /// </summary>
    /// <param name="_ctrl">
    ///     The control for which lookup will be created.
    /// </param>
    /// <param name="_company">
    ///     The company account identifier; optional.
    /// </param>
    protected void createLookupForAgreement(
        FormStringControl   _ctrl,
        CompanyId           _company = curext())
    {
        PurchTable purchTable;

        purchTable.OrderAccount = custVendAC;

        changeCompany(this.validateCompany(_company))
        {
            PurchAgreementHeader::purchAgreementLookup(_ctrl, purchTable, '', true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpRecIDValue_RU</Name>
				<Source><![CDATA[
    //Create table with recIDs table CustTrans are
    protected TmpRecIDValue_RU createTmpRecIDValue_RU()
    {
        TmpRecIDValue_RU        retTmpRecIDValue_RU;

        Query                   q;
        QueryBuildDataSource    ds;
        QueryBuildRange         range;

        ;

        //Add transactions amount difference
        q = new Query(queryStr(VendOpenTrans_FactureJour_RU));
        ds = q.dataSourceTable(tableNum(VendTransOpen));

        range = findOrCreateRange_W(ds, fieldNum(VendTransOpen, AccountNum));
        range.value(this.custVendAC());

        range = findOrCreateRange_W(ds, fieldNum(VendTransOpen, AccountNum));
        range.value(this.custVendAC());

        retTmpRecIDValue_RU = TmpRecIDValue_RU::create( q,
                                                        tableNum(VendTrans),
                                                        fieldNum(VendTrans, RecId),
                                                        tableNum(FactureJour_RU),
                                                        fieldNum(FactureJour_RU, FactureId));

        //Add everything else transactions entry into invoice
        q = new Query(queryStr(VendOpenTrans_FactureTrans_RU));
        ds = q.dataSourceTable(tableNum(VendTransOpen));

        range = findOrCreateRange_W(ds, fieldNum(VendTransOpen, AccountNum));
        range.value(this.custVendAC());

        retTmpRecIDValue_RU = TmpRecIDValue_RU::create( q,
                                                        tableNum(VendTrans),
                                                        fieldNum(VendTrans, RecId),
                                                        tableNum(FactureJour_RU),
                                                        fieldNum(FactureJour_RU, FactureId),
                                                        retTmpRecIDValue_RU);

        //If temporary table ther aren't records, need add into table empty records
        select firstonly retTmpRecIDValue_RU;

        if (! retTmpRecIDValue_RU)
        {
            retTmpRecIDValue_RU = TmpRecIDValue_RU::emptyTable();
        }

        return retTmpRecIDValue_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDataSourceName</Name>
				<Source><![CDATA[
    //Initialize datasources
    #define.CreditVendTrans('CreditVendTrans')
    #define.CreditVendTransOpen('CreditVendTransOpen')

    #define.DebitVendTrans('DebitVendTrans')
    #define.DebitVendTransOpen('DebitVendTransOpen')

    protected void initDataSourceName()
    {
        ;
        super();

        //Datasources names are
        creditCustVendTransName     = #CreditVendTrans;
        creditCustVendTransOpenName = #CreditVendTransOpen;

        debitCustVendTransName      = #DebitVendTrans;
        debitCustVendTransOpenName  = #DebitVendTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    //It do initialization form from LedgerJournalTrans
    protected void initFormFromLedgerJournalTrans()
    {
        LedgerJournalTrans      ledgerJournalTrans;

        ;

        ledgerJournalTrans= formRun.args().record();

        if (! ledgerJournalTrans.RecId)
        {
             throw error("@SYS22996");
        }

        transactionDate = ledgerJournalTrans.TransDate;
        currencyCode    = ledgerJournalTrans.CurrencyCode;
        custVendAC      = ledgerJournalTrans.parmAccount();
        custVendTable   = VendTable::find(custVendAC);
        partyRecId      = custVendTable.Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormFromPurchTable</Name>
				<Source><![CDATA[
    //It do initialization form from PurchTable
    protected void initFormFromPurchTable()
    {
        PurchTable              purchTable;

        ;

        purchTable  = formRun.args().record();

        if (! purchTable.RecId)
        {
             throw error("@SYS22996");
        }

        currencyCode    = purchTable.CurrencyCode;
        custVendAC      = purchTable.InvoiceAccount;
        custVendTable   = VendTable::find(custVendAC);
        partyRecId      = custVendTable.Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormFromVendTable</Name>
				<Source><![CDATA[
    //It do initialization form from VendTable
    protected void initFormFromVendTable()
    {
        ;

        custVendTable = formRun.args().record();

        if (! custVendTable.RecId)
            throw error("@SYS22904");

        custVendAC      = custVendTable.AccountNum;
        currencyCode    = custVendTable.Currency;
        partyRecId      = custVendTable.Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCommon</Name>
				<Source><![CDATA[
    //Initialization from common table [common == formRun.args().record()]
    protected void initFromCommon()
    {
        ;

        super();

        switch (common.TableId)
        {
            case (tableNum(VendTable)):
                this.initFormFromVendTable();
                break;

            case (tableNum(PurchTable)):
                this.initFormFromPurchTable();
                break;

            case (tableNum(LedgerJournalTrans)):
                this.initFormFromLedgerJournalTrans();
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRemainAmount</Name>
				<Source><![CDATA[
    public void initRemainAmount()
    {
        SpecTrans       specTrans;
        VendTransOpen   vendTransOpen;
        ;

        while select specTrans
            where specTrans.SpecTableId   == common.TableId
               && specTrans.SpecRecId     == common.RecId
            join  RecId from vendTransOpen
            where vendTransOpen.TableId   == specTrans.RefTableId
               && vendTransOpen.RecId     == specTrans.RefRecId
        {
            if (specTrans.Balance01 > 0)
            {
                this.insertIntoDebitAmount(vendTransOpen.RecId,
                                           specTrans.Balance01,
                                           specTrans.vendTrans().CurrencyCode,
                                           DebCredUnknown_RU::Debit);
            }
            else if (specTrans.Balance01 < 0)
            {
                this.insertIntoCreditAmount(vendTransOpen.RecId,
                                            specTrans.Balance01,
                                            specTrans.vendTrans().CurrencyCode,
                                            DebCredUnknown_RU::Credit);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTableID</Name>
				<Source><![CDATA[
    //Initialize TableId
    protected void initTableID()
    {
        ;
        custVendInvoiceJourID    = tableNum(VendInvoiceJour);
        custVendInvoiceTransID   = tableNum(VendInvoiceTrans);
        custVendTableID          = tableNum(VendTable);
        custVendTransID          = tableNum(VendTrans);
        custVendTransOpenID      = tableNum(VendTransOpen);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markTransPaymentGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs validation on the record to be marked or unmarked and then makes sure that any records
    ///    with a different payment group are unmarked and any with the same payment group are marked.
    /// </summary>
    /// <param name="_custVendTransOpen">
    ///     The record that will be marked or unmarked.
    /// </param>
    /// <param name="_markTrans">
    ///     Yes if the record is to be marked; otherwise, No.
    /// </param>
    protected void markTransPaymentGroup(
        CustVendTransOpen _custVendTransOpen,
        NoYes             _markTrans)
    {
        VendTrans vendTrans = CustVendTransOpenData::construct(_custVendTransOpen).custVendTrans();

        if (_markTrans && vendTrans.VendPaymentGroup != '')
        {
            this.custVendOpenTransManager().vendPaymentGroupsUpdateTransMarked(_custVendTransOpen,
                                                                       _markTrans,
                                                                       debitCustVendTransOpen_ds,
                                                                       vendTrans.VendPaymentGroup,
                                                                       null,
                                                                       common,
                                                                       false,
                                                                       DebCredUnknown_RU::Debit);

            this.custVendOpenTransManager().vendPaymentGroupsUpdateTransMarked(_custVendTransOpen,
                                                                       _markTrans,
                                                                       creditCustVendTransOpen_ds,
                                                                       vendTrans.VendPaymentGroup,
                                                                       null,
                                                                       common,
                                                                       false,
                                                                       DebCredUnknown_RU::Credit);
        }
        else
        {
            this.custVendOpenTransManager().vendPaymentGroupsUpdateTransMarked(_custVendTransOpen,
                                                                       _markTrans,
                                                                       FormDataUtil::getFormDataSource(_custVendTransOpen),
                                                                       vendTrans.VendPaymentGroup,
                                                                       null,
                                                                       common,
                                                                       false);
        }

        debitAmount.removeAll();
        creditAmount.removeAll();

        this.initRemainAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FormRun _formRun)
    {
        VendParameters vendParameters = VendParameters::find();

        super(_formRun);

        cashDiscUnspecificSpecific = vendParameters.CashDisc;
        paymentGroupEnabled        = vendParameters.VendPaymentGroupingEnable;
        dimSettlementCtrlType      = vendParameters.DimSettlementCtrlType_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentGroupEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if grouping by payment group enabled
    /// </summary>
    /// <param name="_custVendTransOpen">
    /// <c>CustVendTransOpen</c> record
    /// </param>
    /// <param name="_markTrans">
    /// Should transactions be marked
    /// </param>
    /// <returns>
    /// True if enabled; otherwise false
    /// </returns>
    public boolean paymentGroupEnabled(
        CustVendTransOpen _custVendTransOpen = null,
        NoYes             _markTrans         = NoYes::No)
    {
        CustVendTransOpenData data;
        VendTrans             vendTrans;

        if (_custVendTransOpen)
        {
            data      = CustVendTransOpenData::construct(_custVendTransOpen);
            vendTrans = data.custVendTrans();
        }

        return paymentGroupEnabled &&
               (! vendTrans.VendPaymentGroup                                                                  ||
                dimSettlementCtrlType == DimSettlementCtrlType_RU::None                                       ||
                (_markTrans == NoYes::Yes && Box::yesNo("@GLS116014", DialogButton::Yes) == DialogButton::Yes) ||
                (_markTrans == NoYes::No  && Box::yesNo("@GLS116015", DialogButton::Yes) == DialogButton::Yes));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFilterValueForAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets filter value for the agreement.
    /// </summary>
    /// <param name="_formDS">
    ///     Datasource where filter will be applied to.
    /// </param>
    /// <param name="_agreementId">
    ///     The filter value.
    /// </param>
    protected void setFilterValueForAgreement(FormDataSource _formDS, Range _agreementId)
    {
        QueryBuildDataSource    ds;
        QueryBuildRange         range;
        Query                   q = this.getQuery(_formDS);
        RecId                   dimAttrRecId = AgreementHeaderExt_RU::getAgreementDimensionAttribute();
        ;

        SysQuery::clearDimensionRangesFromQuery(q);

        if (_agreementId && dimAttrRecId)
        {
            ds = q.dataSourceTable(custVendTransID);

            range = SysQuery::addDimensionAttributeRange(
                q,
                ds.name(),
                fieldStr(VendTrans, DefaultDimension),
                DimensionComponent::DimensionAttribute,
                _agreementId,
                DimensionAttribute::find(dimAttrRecId).Name);

            if (range)
            {
                range.status(RangeStatus::Locked);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPermanentFilterValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets permanent filter value.
    /// </summary>
    /// <param name="_formDataSource">
    ///     Datasource where filter will be applied to.
    /// </param>
    protected void setPermanentFilterValue(FormDataSource _formDataSource)
    {
        QueryBuildDataSource    dsCustVendTrans;
        Query                   query;

        query = this.getQuery(_formDataSource);

        dsCustVendTrans     = query.dataSourceTable(tableNum(VendTrans_W));

        findOrCreateRange_W(dsCustVendTrans, fieldNum(VendTrans_W, BankCurrencyTransferId_RU), SysQuery::valueEmptyString());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>