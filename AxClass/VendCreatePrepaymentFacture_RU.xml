<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendCreatePrepaymentFacture_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
//Creates prepayment factures in postponed mode
class VendCreatePrepaymentFacture_RU
{
    VendTmpPrepaymentTrans_RU   tmpPrepaymentTrans;
    TmpTaxWorkTrans             taxWorkTrans;

    UnknownNoYes                jourInclTax;
    boolean                     deleteTaxRegulated;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTax</Name>
				<Source><![CDATA[
    protected void calcTax(VendTmpPrepaymentTrans_RU  _tmpPrepaymentTrans)
    {
        TaxCalculation  taxCalculation;

        deleteTaxRegulated = false;

        if (_tmpPrepaymentTrans.PostedTax)
        {
            this.calcTaxPosted(_tmpPrepaymentTrans);
        }
        else
        {
            taxCalculation = this.calcTaxUnposted(_tmpPrepaymentTrans);
            if (deleteTaxRegulated)
            {
                TaxCalculationAdjustment::deleteTaxRegulation(taxCalculation);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxPosted</Name>
				<Source><![CDATA[
    private void calcTaxPosted(VendTmpPrepaymentTrans_RU  _tmpPrepaymentTrans)
    {
        TaxTrans    taxTrans;

        while select sum(SourceBaseAmountCur),
                     sum(SourceTaxAmountCur),
                     sum(SourceRegulateAmountCur),
                     sum(TaxBaseAmount),
                     sum(TaxAmount) from taxTrans
            group by TaxCode, TaxAutogenerated, TaxGroup, TaxItemGroup, TransDate
            where taxTrans.TransDate   == _tmpPrepaymentTrans.TransDate  &&
                  taxTrans.Voucher     == _tmpPrepaymentTrans.Voucher    &&
                  taxTrans.TaxOrigin   == TaxOrigin::Tax
        {
            taxWorkTrans.clear();
            taxWorkTrans.SourceBaseAmountCur        = taxTrans.SourceBaseAmountCur;
            taxWorkTrans.SourceTaxAmountCur         = taxTrans.SourceTaxAmountCur;
            taxWorkTrans.SourceRegulateAmountCur    = taxTrans.SourceRegulateAmountCur;
            taxWorkTrans.TaxAmount                  = taxTrans.TaxAmount;

            taxWorkTrans.TaxCode            = taxTrans.TaxCode;
            taxWorkTrans.TaxAutogenerated   = taxTrans.TaxAutogenerated;
            taxWorkTrans.TaxGroup           = taxTrans.TaxGroup;
            taxWorkTrans.TaxItemGroup       = taxTrans.TaxItemGroup;
            taxWorkTrans.TransDate          = taxTrans.TransDate;
            taxWorkTrans.Voucher            = tmpPrepaymentTrans.Voucher;
            taxWorkTrans.TaxOrigin          = TaxOrigin::Tax;

            taxWorkTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxUnposted</Name>
				<Source><![CDATA[
    Tax calcTaxUnposted(VendTmpPrepaymentTrans_RU  _tmpPrepaymentTrans)
    {
        TaxCalculation             taxCalculation;
        LedgerJournalTrans         ledgerJournalTrans;

        ledgerJournalTrans = this.ledgerJournalTrans(_tmpPrepaymentTrans);
        taxCalculation = this.getTaxInstance(ledgerJournalTrans);

        if (taxCalculation.totalTaxAmount())
        {
            taxWorkTrans = taxCalculation.tmpTaxWorkTrans();
        }
        else
        {
            taxWorkTrans.clear();
            taxWorkTrans.SourceBaseAmountCur = _tmpPrepaymentTrans.AmountCur;
            taxWorkTrans.insert();
        }

        deleteTaxRegulated = ledgerJournalTrans.isTmp();

        return taxCalculation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    protected boolean check()
    {
        Days vendPrepaymentIssuePeriod;
        boolean ret = true;

        //check closed period
        ret = PurchBookTable_RU::canProcessDate(tmpPrepaymentTrans.FactureReportDate);

        vendPrepaymentIssuePeriod = VendParameters::find().FactureIssuePeriod_RU;
        if (vendPrepaymentIssuePeriod && !ret)
        {
            ret = (tmpPrepaymentTrans.FactureDate_External - tmpPrepaymentTrans.TransDate) >= vendPrepaymentIssuePeriod;
        }

        if (! ret)
        {
            ret = checkFailed(strFmt("@GLS104853", tmpPrepaymentTrans.FactureExternalId, tmpPrepaymentTrans.FactureDate));
        }

        ret = tmpPrepaymentTrans.validateFactureParms() && ret;

        ret = FactureJour_RU::checkTaxReportingDate(tmpPrepaymentTrans.FactureDate,
                                                    tmpPrepaymentTrans.FactureDate_External,
                                                    tmpPrepaymentTrans.FactureReportDate) && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFactureLines</Name>
				<Source><![CDATA[
    protected void createFactureLines(FactureJour_RU    _factureJour)
    {
        TaxTable        taxTable;
        FactureTrans_RU trans;

        VATType_RU   vatType;
        ExchRate     exchRate;
        AmountCur    baseAmountCur;
        int          sign;

        TmpTaxWorkTrans tmpTaxWorkTrans;
        CalcTaxes_RU    calcTaxes;

        exchRate = tmpPrepaymentTrans.AmountCur ? tmpPrepaymentTrans.AmountMST / tmpPrepaymentTrans.AmountCur * 100 : 0;
        sign     = tmpPrepaymentTrans.AmountCur > 0 ? 1 : -1;

        tmpTaxWorkTrans.setTmpData(taxWorkTrans);
        tmpTaxWorkTrans = this.tmpTaxWorkTrans(tmpTaxWorkTrans);

        while select sum(SourceBaseAmountCur),
                     sum(SourceBaseAmountCurRegulated),
                     sum(SourceTaxAmountCur),
                     sum(SourceRegulateAmountCur),
                     sum(TaxBaseAmount),
                     sum(TaxAmount) from taxWorkTrans
            group by TaxCode, TaxGroup, TaxItemGroup
        {
            if (! taxWorkTrans.SourceBaseAmountCur)
                continue;

            taxTable = TaxTable::find(taxWorkTrans.TaxCode);

            switch (taxTable.TaxType_W)
            {
                case TaxType_W::VAT        :
                    vatType = VATType_RU::Full;
                    break;
                case TaxType_W::VATReduced :
                    vatType = VATType_RU::Reduced;
                    break;
                case TaxType_W::VATZero    :
                    vatType = VATType_RU::Zero;
                    break;
                default                    :
                    vatType = VATType_RU::NonLiable;
                    break;
            }

            if (!taxWorkTrans.SourceBaseAmountCurRegulated && taxWorkTrans.SourceRegulateAmountCur)
            {
                baseAmountCur = tmpPrepaymentTrans.AmountCur - abs(taxWorkTrans.transactionCurrencyTaxAmount()) * sign;
            }
            else
            {
                baseAmountCur = taxWorkTrans.taxBaseCur_W();
            }

            select tmpTaxWorkTrans
                where tmpTaxWorkTrans.TaxCode      == taxWorkTrans.TaxCode
                   && tmpTaxWorkTrans.TaxGroup     == taxWorkTrans.TaxGroup
                   && tmpTaxWorkTrans.TaxItemGroup == taxWorkTrans.TaxItemGroup;

            calcTaxes = CalcTaxes_RU::construct(tmpTaxWorkTrans);
            calcTaxes.calc();

            trans = _factureJour.newTrans(baseAmountCur,
                                  taxWorkTrans.transactionCurrencyTaxAmount(),
                                  taxTable.TaxType_W == TaxType_W::Excise ? taxWorkTrans.transactionCurrencyTaxAmount(): 0,
                                  FactureLineType_RU::Prepayment,
                                  exchRate,
                                  TaxData::percent(taxTable.TaxCode, tmpPrepaymentTrans.TransDate, taxTable.TaxBase),
                                  taxTable.TaxType_W == TaxType_W::VATZero    ? taxWorkTrans.transactionCurrencyTaxAmount() : 0,
                                  taxTable.TaxType_W == TaxType_W::VATReduced ? taxWorkTrans.transactionCurrencyTaxAmount() : 0,
                                  taxTable.TaxType_W == TaxType_W::VAT        ? taxWorkTrans.transactionCurrencyTaxAmount() : 0,
                                  vatType,
                                  this.transTxt(_factureJour),
                                  tmpPrepaymentTrans.DefaultDimension,
                                  tmpPrepaymentTrans.AmountMST -
                                  abs(calcTaxes.taxAmount_VAT()        +
                                      calcTaxes.taxAmount_VATReduced() +
                                      calcTaxes.taxAmount_VATZero())    * sign,
                                  abs(calcTaxes.totalTaxAmount())       * sign,
                                  abs(calcTaxes.taxAmount_Excise())     * sign,
                                  abs(calcTaxes.taxAmount_VATZero())    * sign,
                                  abs(calcTaxes.taxAmount_VATReduced()) * sign,
                                  abs(calcTaxes.taxAmount_VAT())        * sign);

            trans.ExciseValue    = taxTable.TaxType_W == TaxType_W::Excise                                  ?
                                   TaxData::percent(taxTable.TaxCode, taxWorkTrans.TransDate, taxTable.TaxBase) :
                                   0;
            trans.TaxGroup       = taxWorkTrans.TaxGroup;
            trans.TaxItemGroup   = taxWorkTrans.TaxItemGroup;
            trans.TaxCode        = trans.vatType == VATType_RU::NonLiable ? "" : taxWorkTrans.TaxCode;

            if (!tmpPrepaymentTrans.Posted)
            {
                trans.MarkupRefRecId   = tmpPrepaymentTrans.SourceTransRecId;
                trans.MarkupRefTableId = tableNum(LedgerJournalTrans);
            }
            trans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournal</Name>
				<Source><![CDATA[
    protected FactureJour_RU createJournal()
    {
        FactureJour_RU  factureJour;
        CalcTaxes_RU    calcTaxes;
        VendTrans       vendTrans;
        VendTrans_W     vendTrans_W;

        int             sign;

        this.initJournal(factureJour);

        select taxWorkTrans;
        calcTaxes = CalcTaxes_RU::construct(taxWorkTrans);
        calcTaxes.calc();

        sign = tmpPrepaymentTrans.AmountCur > 0 ? 1 : -1;

        factureJour.FactureAmount = tmpPrepaymentTrans.AmountCur - abs(calcTaxes.taxAmountCur_VAT()        +
                                                                       calcTaxes.taxAmountCur_VATReduced() +
                                                                       calcTaxes.taxAmountCur_VATZero())   * sign;
        factureJour.FactureTax    =  abs(calcTaxes.totalTaxAmountCur()) * sign;
        factureJour.insert();

        this.createFactureLines(factureJour);

        if (tmpPrepaymentTrans.Posted)
        {
            vendTrans = VendTrans::find(tmpPrepaymentTrans.SourceTransRecId, true);
            vendTrans_W = vendTrans.vendTrans_W();
            vendTrans_W.PrepaymentFactureId_W = factureJour.FactureId;
            vendTrans.packVendTrans_W(vendTrans_W);
            vendTrans.update();
        }

        factureJour.OperationTypeCodes = FactureJour_RU::getInitialTypeCodes(factureJour);
        factureJour.doUpdate();

        return factureJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPersistentTaxInstance</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Copy of LedgerJournalTrans::getTaxInstance without unnecessary branches and with reset excempt tax
    /// </summary>
    /// <param name="_journalNum">journal number</param>
    /// <param name="_voucher">voucher</param>
    /// <param name="_invoiceId">invoice number</param>
    /// <param name="_unsavedLedgerJournalTrans">current ledger journal trans</param>
    /// <returns><c>TaxCalciulation</c></returns>
    protected TaxCalculation getPersistentTaxInstance(LedgerJournalId _journalNum, Voucher _voucher, InvoiceId _invoiceId, LedgerJournalTrans _unsavedLedgerJournalTrans = null)
    {
        TaxCalculationJournal    ret;
        LedgerJournalTaxDocument ledgerJournalTaxDocument;
        dataAreaId dataAreaId;

        ledgerJournalTaxDocument = LedgerJournalTaxDocument::construct(_journalNum, _voucher, _invoiceId, _unsavedLedgerJournalTrans);
        ledgerJournalTaxDocument.parmForceTaxable_RU(true);
        ledgerJournalTaxDocument.parmSkipUseTaxUncommitted_RU(! ledgerJournalTaxDocument.getTaxOnPrepayment());

        dataAreaId = _unsavedLedgerJournalTrans.Company ? _unsavedLedgerJournalTrans.Company : _unsavedLedgerJournalTrans.company() ? _unsavedLedgerJournalTrans.company() : curext();
        changecompany(dataAreaId)
        {
            ret = TaxCalculation::newForSourceType(TaxSourceType::Journals, ledgerJournalTaxDocument);
            ret.parmResetExemptTax_RU(true);
            ret.calculateTax();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxInstance</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets instance of tax calculation for given LedgerJournalTrans
    /// </summary>
    /// <param name="_journalTrans">record of temporary table</param>
    /// <returns>new instance of TaxCalculation</returns>
    private TaxCalculation getTaxInstance(LedgerJournalTrans _journalTrans)
    {
        return _journalTrans.isTmp() ?
            this.getTemporaryTaxInstance(_journalTrans) :
            this.getPersistentTaxInstance(_journalTrans.JournalNum, _journalTrans.Voucher, _journalTrans.Invoice, _journalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTemporaryTaxInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// gets tax instance for temporary table
    /// </summary>
    /// <param name="_journalTrans">current journal line</param>
    /// <returns>
    /// the new <c>TaxCalculation</c>
    /// </returns>
    protected TaxCalculationJournal getTemporaryTaxInstance(LedgerJournalTrans _journalTrans)
    {
        LedgerJournalTaxDocumentTmp_RU  taxDocument;
        TaxCalculationJournal           ret;
        LedgerJournalTable              journalTable;

        journalTable.setTmp();
        journalTable.JournalNum = _journalTrans.JournalNum;
        journalTable.LedgerJournalInclTax = true;
        journalTable.doInsert();

        taxDocument = LedgerJournalTaxDocumentTmp_RU::construct(journalTable, _journalTrans);
        taxDocument.parmTaxOnPrepayment_RU(true);

        ret = TaxCalculation::newForSourceType(TaxSourceType::Journals, taxDocument);
        ret.parmResetExemptTax_RU(true);
        ret.calculateTax();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournal</Name>
				<Source><![CDATA[
    protected void initJournal(FactureJour_RU   _factureJour)
    {
        NumberSeq                    factureNumberSeq;
        CommReportTransPrepayment_RU commReportTrans;

        factureNumberSeq = NumberSeq::newGetNum(VendParameters::numRefVendFactureId_RU(),false,true);

        if (! factureNumberSeq)
            throw error(strFmt("@SYS53911", "@GLS106861", "@SYS25194"));

        _factureJour.initValue();

        _factureJour.FactureId                  = factureNumberSeq.num();
        _factureJour.FactureExternalId          = tmpPrepaymentTrans.FactureExternalId;
        _factureJour.FactureDate                = tmpPrepaymentTrans.FactureDate;
        _factureJour.FactureReportDate          = tmpPrepaymentTrans.FactureReportDate;
        _factureJour.CustVendInvoiceAccount     = tmpPrepaymentTrans.Account;
        _factureJour.CurrencyCode               = tmpPrepaymentTrans.CurrencyCode;
        _factureJour.FactureType                = FactureType_RU::Prepayment;
        _factureJour.Consignee                  = '';
        _factureJour.Consignor                  = '';
        _factureJour.OffSessionId               = '';
        _factureJour.Module                     = this.module();
        _factureJour.LanguageId                 = this.languageId();
        _factureJour.FactureDate_External       = tmpPrepaymentTrans.FactureDate_External;
        _factureJour.Voucher                    = tmpPrepaymentTrans.Voucher;
        _factureJour.DocumentNum                = tmpPrepaymentTrans.DocumentNum;
        _factureJour.DocumentDate               = tmpPrepaymentTrans.DocumentDate;
        _factureJour.InventProfileType          = CustVendTrans::inventProfileType_RU(tmpPrepaymentTrans.CommProfileType);
        
        if (tmpPrepaymentTrans.Posted)
        {
            _factureJour.CustVendTransRecId     = tmpPrepaymentTrans.SourceTransRecId;
            _factureJour.CustVendTransTableId   = tableNum(VendTrans);
        }
        else if (tmpPrepaymentTrans.IsCommReport)
        {
            commReportTrans = CommReportTransPrepayment_RU::find(tmpPrepaymentTrans.SourceTransRecId);

            _factureJour.RefCommReportTrans     = tmpPrepaymentTrans.SourceTransRecId;
            _factureJour.CommPartner            = commReportTrans.CustAccount;
            _factureJour.DocumentNum            = commReportTrans.DocumentNum;
            _factureJour.DocumentDate           = commReportTrans.DocumentDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>languageId</Name>
				<Source><![CDATA[
    protected LanguageId languageId()
    {
        LanguageId  langId = VendTable::find(tmpPrepaymentTrans.Account).languageId();
        return langId ? langId : infolog.language();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTrans</Name>
				<Source><![CDATA[
    protected LedgerJournalTrans ledgerJournalTrans(VendTmpPrepaymentTrans_RU  _tmpPrepaymentTrans)
    {
        LedgerJournalTrans  ledgerJournalTrans;
        ExchRate            exchRate;

        if (_tmpPrepaymentTrans.Posted || _tmpPrepaymentTrans.IsCommReport)
        {
            exchRate = _tmpPrepaymentTrans.AmountCur ? _tmpPrepaymentTrans.AmountMST / _tmpPrepaymentTrans.AmountCur * 100 : 0;
            jourInclTax = UnknownNoYes::Yes;
            ledgerJournalTrans.setTmp();
            ledgerJournalTrans.LineNum          = 1;
            ledgerJournalTrans.AccountType      = LedgerJournalACType::Vend;
            ledgerJournalTrans.parmAccount(_tmpPrepaymentTrans.Account);
            ledgerJournalTrans.Prepayment       = NoYes::Yes;
            ledgerJournalTrans.CurrencyCode     = _tmpPrepaymentTrans.CurrencyCode;
            ledgerJournalTrans.Voucher          = _tmpPrepaymentTrans.Voucher;
            ledgerJournalTrans.TransDate        = _tmpPrepaymentTrans.TransDate;
            ledgerJournalTrans.DocumentDate     = _tmpPrepaymentTrans.DocumentDate;
            ledgerJournalTrans.DocumentNum      = _tmpPrepaymentTrans.DocumentNum;
            ledgerJournalTrans.TransactionType  = LedgerTransType::Payment;
            ledgerJournalTrans.ExchRate         = exchRate;
            ledgerJournalTrans.amountCur2DebCred(_tmpPrepaymentTrans.AmountCur);

            ledgerJournalTrans.insert();

            // The current ledgerJournalTrans is temp table, and temp table will re-use the same recid,
            // the same recid will result in different transaction line use the same tax regulation record.
            // Sets recid = SourceTransRecId to make sure these recid are unique.
            ledgerJournalTrans.RecId = _tmpPrepaymentTrans.SourceTransRecId;
        }
        else
        {
            ledgerJournalTrans = LedgerJournalTrans::findRecId(_tmpPrepaymentTrans.SourceTransRecId, false);
            jourInclTax = ledgerJournalTrans.ledgerJournalTable().LedgerJournalInclTax ? UnknownNoYes::Yes : UnknownNoYes::No;
        }

        ledgerJournalTrans.TaxGroup      = _tmpPrepaymentTrans.TaxGroup;
        ledgerJournalTrans.TaxItemGroup  = _tmpPrepaymentTrans.TaxItemGroup;

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    protected FactureModule_RU module()
    {
        return FactureModule_RU::Vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        update_recordset tmpPrepaymentTrans
            setting FactureReportDate = tmpPrepaymentTrans.FactureDate
            where tmpPrepaymentTrans.Mark == NoYes::Yes     &&
                  tmpPrepaymentTrans.TaxGroup               &&
                  tmpPrepaymentTrans.TaxItemGroup           &&
                  tmpPrepaymentTrans.FactureDate_External   &&
                  tmpPrepaymentTrans.FactureDate            &&
                  tmpPrepaymentTrans.FactureExternalId      &&
                ! tmpPrepaymentTrans.FactureReportDate;
        
        while select tmpPrepaymentTrans
            where tmpPrepaymentTrans.Mark == NoYes::Yes     &&
                  tmpPrepaymentTrans.TaxGroup               &&
                  tmpPrepaymentTrans.TaxItemGroup           &&
                  tmpPrepaymentTrans.FactureDate_External   &&
                  tmpPrepaymentTrans.FactureDate            &&
                  tmpPrepaymentTrans.FactureExternalId
        {
            if (this.check())
            {
                this.calcTax(tmpPrepaymentTrans);
                ttsbegin;
                this.createJournal();
                delete_from taxWorkTrans;
                tmpPrepaymentTrans.delete();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrepaymentTrans</Name>
				<Source><![CDATA[
    void setPrepaymentTrans(VendTmpPrepaymentTrans_RU _tmpPrepaymentTrans)
    {
        tmpPrepaymentTrans = _tmpPrepaymentTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpTaxWorkTrans</Name>
				<Source><![CDATA[
    private TmpTaxWorkTrans tmpTaxWorkTrans(TmpTaxWorkTrans  _taxWorkTrans)
    {
        CurrencyCode companyCurrency= CompanyInfoHelper::standardCurrency();

        ttsbegin;

        while select forupdate _taxWorkTrans
            where ! _taxWorkTrans.TaxAutogenerated
        {
            if (_taxWorkTrans.SourceCurrencyCode == companyCurrency)
            {
                _taxWorkTrans.TaxAmount = _taxWorkTrans.transactionCurrencyTaxAmount();
            }
            else
            {
                _taxWorkTrans.TaxAmount = CurrencyExchangeHelper::mstAmount(_taxWorkTrans.transactionCurrencyTaxAmount(), _taxWorkTrans.SourceCurrencyCode, _taxWorkTrans.TransDate);
            }

            _taxWorkTrans.doUpdate();
        }

        ttscommit;

        return _taxWorkTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTxt</Name>
				<Source><![CDATA[
    protected FactureItemName_RU transTxt(FactureJour_RU    _jour)
    {
        FactureItemName_RU  transTxt;

        transTxt = SysLabel::labelId2String(literalStr("@SYS50745"), _jour.LanguageId);

        return transTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSource</Name>
				<Source><![CDATA[
    protected void updateSource()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static VendCreatePrepaymentFacture_RU construct(VendTmpPrepaymentTrans_RU _tmpPrepaymentTrans)
    {
        VendCreatePrepaymentFacture_RU  vendCreatePrepayment;

        vendCreatePrepayment = new VendCreatePrepaymentFacture_RU();
        vendCreatePrepayment.setPrepaymentTrans(_tmpPrepaymentTrans);

        return vendCreatePrepayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTaxes</Name>
				<Source><![CDATA[
    static void showTaxes(VendTmpPrepaymentTrans_RU  _tmpPrepaymentTrans)
    {
        VendCreatePrepaymentFacture_RU  createFacture;
        Tax tax;

        createFacture = VendCreatePrepaymentFacture_RU::construct(_tmpPrepaymentTrans);
        tax = createFacture.calcTaxUnposted(_tmpPrepaymentTrans);

        Tax::showTaxes(menuitemDisplayStr(TaxTmpWorkPrepayment_RU), tax, createFacture.ledgerJournalTrans(_tmpPrepaymentTrans));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>