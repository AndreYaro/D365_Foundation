<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBudgetOrigWFEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjBudgetOrigWFEventHandler implements WorkflowStartedEventHandler,
                                                     WorkflowCanceledEventHandler,
                                                     WorkflowCompletedEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when a cancel action is applied to a workflow item.
    /// </summary>
    /// <param name="_workflowEventArgs">
    /// The value to use to get the workflow context of the workflow item that fired the event.
    /// </param>
    public void canceled(WorkflowEventArgs _workflowEventArgs)
    {
        WorkflowContext workflowContext;

        // Get the workflow context from _workflowEventArgs
        workflowContext = _workflowEventArgs.parmWorkflowContext();

        ProjBudget::updateProjBudgetStatus(workflowContext.parmRecId(), ProjBudgetWorkflowStatus::Created);
    }

]]></Source>
			</Method>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
/// <summary>
    /// Called when an approve action is applied to a workflow item.
    /// </summary>
    /// <param name="_workflowEventArgs">
    /// The value to use to get the workflow context of the workflow item that fired the event.
    /// </param>
    public void completed(WorkflowEventArgs _workflowEventArgs)
    {
        WorkflowContext workflowContext;
        ProjBudget          projBudget;
        Args                args = new Args();

        // Get the workflow context from _workflowEventArgs
        workflowContext = _workflowEventArgs.parmWorkflowContext();

        ProjBudget::updateProjBudgetStatus(workflowContext.parmRecId(), ProjBudgetWorkflowStatus::Approved);
        projBudget = ProjBudget::find(workflowContext.parmRecId());

        if (projBudget.BudgetWorkflowStatus == ProjBudgetWorkflowStatus::Approved)
        {
            args.record(projBudget);
            args.parmEnumType(enumnum(ProjBudgetManagerActionType));
            args.parmEnum(ProjBudgetManagerActionType::Commit);

            ProjBudgetManager::main(args);
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
    /// <summary>
    /// Occurs when the even is started for a workflow item.
    /// </summary>
    /// <param name="_workflowEventArgs">
    /// The value to use to get the workflow context of the workflow item that fired the event.
    /// </param>
    public void started(WorkflowEventArgs _workflowEventArgs)
    {
        WorkflowContext workflowContext;

        // Get the workflow context from _workflowEventArgs
        workflowContext = _workflowEventArgs.parmWorkflowContext();

        ProjBudget::updateProjBudgetStatus(workflowContext.parmRecId(), ProjBudgetWorkflowStatus::Submitted);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>