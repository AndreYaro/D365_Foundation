<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccountingSourceExplorerBalanceParameters</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the filter settings for the <c>AccountingSourceExplorerParameters</c> form.
/// </summary>
class AccountingSourceExplorerBalanceParameters
{
    DateCode                                                        dateCode;
    date                                                            startDate;
    date                                                            endDate;
    MainAccountNum                                                  mainAccountNum;
    private MainAccountNum                                          mainAccountNumTo;
    DimensionAttributeValueCombination                              dimensionFocus;
    DimensionHierarchy                                              dimensionHierarchy;
    GeneralJournalAccountEntryRecId                                 generalJournalAccountEntryRecId;
    boolean                                                         processPendingReferenceIdentities;
    ProjId                                                          projId;
    LedgerRecId                                                     ledgerRecId;
    private Voucher                                                 voucher;
    private Voucher                                                 voucherTo;
    private AccountingSourceExplorerGeneralJournalAccountEntryTmp   sysQueryGeneralJournalAccountEntryTmp;
    private boolean                                                 filterUsingSysQuery;
    private GeneralLedgerBalanceReportingDimension                  reportingDimensions;

    private static int CurrentVersion = 3;
    private const int Version2 = 2;

    #LOCALMACRO.CurrentList
        dateCode,
        startDate,
        endDate,
        mainAccountNum,
        mainAccountNumTo,
        dimensionFocus,
        generalJournalAccountEntryRecId,
        projId,
        ledgerRecId,
        processPendingReferenceIdentities,
        voucher,
        voucherTo,
        reportingDimensions
    #ENDMACRO

    #LOCALMACRO.CurrentList_v2
        dateCode,
        startDate,
        endDate,
        mainAccountNum,
        mainAccountNumTo,
        dimensionFocus,
        generalJournalAccountEntryRecId,
        projId,
        ledgerRecId,
        processPendingReferenceIdentities,
        voucher,
        voucherTo
    #ENDMACRO

    #LOCALMACRO.CurrentList_v1
        dateCode,
        startDate,
        endDate,
        mainAccountNum,
        dimensionFocus,
        generalJournalAccountEntryRecId,
        projId,
        ledgerRecId,
        processPendingReferenceIdentities
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loadDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the default start and end date for the <c>AccountingSourceExplorerParameters</c> form.
    /// </summary>
    public void loadDefault()
    {
        FiscalCalendarPeriod fiscalCalendarPeriod;
        date                 sessionDate;

        if (startDate == dateNull() && endDate == dateNull())
        {
            // default to the fiscal calendar period for the system date
            sessionDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            fiscalCalendarPeriod = FiscalCalendarPeriod::findPeriodByCalendarDate(Ledger::fiscalCalendar(), sessionDate);

            if (fiscalCalendarPeriod != null)
            {
                startDate = fiscalCalendarPeriod.StartDate;
                endDate = fiscalCalendarPeriod.EndDate;
            }
        }

        filterUsingSysQuery = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateCode</Name>
				<Source><![CDATA[
    public DateCode parmDateCode(
        DateCode _dateCode = dateCode)
    {
        dateCode = _dateCode;
        return dateCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucherFrom</Name>
				<Source><![CDATA[
    public Voucher parmVoucherFrom(
        Voucher _voucher = voucher)
    {
        voucher = _voucher;
        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucherTo</Name>
				<Source><![CDATA[
    public Voucher parmVoucherTo(
        Voucher _voucherTo = voucherTo)
    {
        voucherTo = _voucherTo;
        return voucherTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensionFocus</Name>
				<Source><![CDATA[
    public DimensionAttributeValueCombination parmDimensionFocus(
        DimensionAttributeValueCombination _davc = dimensionFocus)
    {
        dimensionFocus = _davc;
        return dimensionFocus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportingDimensions</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal GeneralLedgerBalanceReportingDimension parmReportingDimensions(
        GeneralLedgerBalanceReportingDimension _reportingDimensions = reportingDimensions)
    {
        reportingDimensions = _reportingDimensions;
        return reportingDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensionHierarchy</Name>
				<Source><![CDATA[
    public DimensionHierarchy parmDimensionHierarchy(
        DimensionHierarchy _dimensionHierarchy = dimensionHierarchy)
    {
        dimensionHierarchy = _dimensionHierarchy;
        return dimensionHierarchy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndDate</Name>
				<Source><![CDATA[
    public date parmEndDate(
        date _endDate = endDate)
    {
        endDate = _endDate;

        if (!prmisDefault(_endDate))
        {
            if (endDate < startDate && endDate != dateNull())
            {
                startDate = endDate;
            }
        }

        return endDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGeneralJournalAccountEntry</Name>
				<Source><![CDATA[
    public GeneralJournalAccountEntryRecId parmGeneralJournalAccountEntry(
        GeneralJournalAccountEntryRecId _generalJournalAccountEntryRecId = generalJournalAccountEntryRecId)
    {
        generalJournalAccountEntryRecId = _generalJournalAccountEntryRecId;
        return generalJournalAccountEntryRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMainAccountNum</Name>
				<Source><![CDATA[
    public MainAccountNum parmMainAccountNum(MainAccountNum _mainAccountNum = mainAccountNum)
    {
        mainAccountNum = _mainAccountNum;
        return mainAccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMainAccountNumTo</Name>
				<Source><![CDATA[
    public MainAccountNum parmMainAccountNumTo(MainAccountNum _mainAccountNumTo = mainAccountNumTo)
    {
        mainAccountNumTo = _mainAccountNumTo;
        return mainAccountNumTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcessPendingReferenceIdentities</Name>
				<Source><![CDATA[
    public boolean parmProcessPendingReferenceIdentities(boolean _processPendingReferenceIdentities = processPendingReferenceIdentities)
    {
        processPendingReferenceIdentities = _processPendingReferenceIdentities;
        return processPendingReferenceIdentities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartDate</Name>
				<Source><![CDATA[
    public date parmStartDate(date _startDate = startDate)
    {
        startDate = _startDate;

        if (!prmisDefault(_startDate))
        {
            if (startDate > endDate && endDate != dateNull())
            {
                endDate = startDate;
            }
        }

        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjId</Name>
				<Source><![CDATA[
    public ProjId parmProjId(ProjId _projId = projId)
    {
        projId = _projId;
        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedger</Name>
				<Source><![CDATA[
    public LedgerRecId parmLedger(LedgerRecId _ledgerRecId = ledgerRecId)
    {
        ledgerRecId = _ledgerRecId;
        return ledgerRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFilterUsingSysQuery</Name>
				<Source><![CDATA[
    public boolean parmFilterUsingSysQuery(boolean _filterUsingSysQuery = filterUsingSysQuery)
    {
        filterUsingSysQuery = _filterUsingSysQuery;
        return filterUsingSysQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSysQueryGeneralJournalAccountEntryTmp</Name>
				<Source><![CDATA[
    public AccountingSourceExplorerGeneralJournalAccountEntryTmp parmSysQueryGeneralJournalAccountEntryTmp
        (AccountingSourceExplorerGeneralJournalAccountEntryTmp _sysQueryGeneralJournalAccountEntryTmp = sysQueryGeneralJournalAccountEntryTmp)
    {
        sysQueryGeneralJournalAccountEntryTmp = _sysQueryGeneralJournalAccountEntryTmp;
        return sysQueryGeneralJournalAccountEntryTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>AccountingSourceExplorerBalanceParameters</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>AccountingSourceExplorerBalanceParameters</c> class.
    /// </returns>
    public static AccountingSourceExplorerBalanceParameters construct()
    {
        AccountingSourceExplorerBalanceParameters balanceParameters;

        balanceParameters = new AccountingSourceExplorerBalanceParameters();
        balanceParameters.loadDefault();

        return balanceParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadLastValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the last values for the form name.
    /// </summary>
    /// <param name="_formName">
    /// The form name of the form.
    /// </param>
    /// <remarks>
    /// The default values are used if there is nothing to load.
    /// </remarks>
    public void loadLastValue(identifierName _formName)
    {
        container packedForm;
        Version version;

        packedForm = xSysLastValue::getValue(curext(), curUserId(), UtilElementType::Form, _formName);

        version = conpeek(packedForm, 1);

        if (version == CurrentVersion)
        {
            [version, #CurrentList] = packedForm;
        }
        else if (version == Version2)
        {
            [version, #CurrentList_v2] = packedForm;
        }
        else
        {
            this.loadDefault();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLastValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the last values for the form name.
    /// </summary>
    /// <param name="_formName">
    /// The form name of the form.
    /// </param>
    public void saveLastValue(identifierName _formName)
    {
        xSysLastValue::putValue([CurrentVersion, #CurrentList], curext(), curUserId(), UtilElementType::Form, _formName);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>