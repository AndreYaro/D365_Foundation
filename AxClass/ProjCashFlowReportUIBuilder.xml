<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjCashFlowReportUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjCashFlowReportUIBuilder extends SrsReportDataContractUIBuilder
{
    DialogField             dialogField;
    DialogField             inclExpectedPaymentField;
    DialogField             actualBudgetDeviationSumField;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>actualBudgetDeviationSum_Modified</Name>
				<Source><![CDATA[
    public void actualBudgetDeviationSum_Modified(FormComboBoxControl _control = null)
    {
        dialogField inclPaidPaymentField = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(ProjCashFlowProjectReportContract, parmInclPaidPayment));

        switch (actualBudgetDeviationSumField.value())
        {
            // Actual selected
            case ProjActualBudget::Actual:
                // Reset some elements to be edited
                inclExpectedPaymentField.allowEdit(true);
                inclPaidPaymentField.allowEdit(true);

                this.setVisibilityForControls(methodstr(ProjCashFlowProjectReportContract, parmProjBreakDate), false);
                this.setVisibilityForControls(methodstr(ProjCashFlowProjectReportContract, parmPaymentBreakDate), false);
                this.disableOrEnableControls(methodstr(ProjCashFlowProjectReportContract, parmForecastModelId), false);
                break;

            // Budget selected
            case ProjActualBudget::Budget:
                // Set some elements to be not allowed to be edited
                inclExpectedPaymentField.allowEdit(false);
                inclExpectedPaymentField.value(false);
                inclPaidPaymentField.allowEdit(false);
                inclPaidPaymentField.value(false);

                dialogField = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(ProjCashFlowProjectReportContract, parmExpectedCostPayDate));
                if (dialogField)
                {
                    dialogField.value(dateNull());
                }

                dialogField = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(ProjCashFlowProjectReportContract, parmMinimumSalesPayDate));
                if (dialogField)
                {
                    dialogField.value(dateNull());
                }

                dialogField = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(ProjCashFlowProjectReportContract, parmAddDaysToSales));
                if (dialogField)
                {
                    dialogField.value(0);
                }

                dialogField = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(ProjCashFlowProjectReportContract, parmAddDaysToCost));
                if (dialogField)
                {
                    dialogField.value(0);
                }
                this.setVisibilityForControls(methodstr(ProjCashFlowProjectReportContract, parmProjBreakDate), false);
                this.setVisibilityForControls(methodstr(ProjCashFlowProjectReportContract, parmPaymentBreakDate), false);
                this.disableOrEnableControls(methodstr(ProjCashFlowProjectReportContract, parmForecastModelId), true);

                break;

            // Sum selected
            case ProjActualBudget::Sum_:
                // Handle the special condition to handle the deviation on general tab
                this.setVisibilityForControls(methodstr(ProjCashFlowProjectReportContract, parmProjBreakDate), true);
                this.setVisibilityForControls(methodstr(ProjCashFlowProjectReportContract, parmPaymentBreakDate), true);
                this.disableOrEnableControls(methodstr(ProjCashFlowProjectReportContract, parmForecastModelId), true);

                // Reset some elements to be edited
                inclExpectedPaymentField.allowEdit(true);
                inclPaidPaymentField.allowEdit(true);
                break;

            // Deviation selected
            case ProjActualBudget::Deviation:
                this.setVisibilityForControls(methodstr(ProjCashFlowProjectReportContract, parmProjBreakDate), false);
                this.setVisibilityForControls(methodstr(ProjCashFlowProjectReportContract, parmPaymentBreakDate), false);
                this.disableOrEnableControls(methodstr(ProjCashFlowProjectReportContract, parmForecastModelId), true);

                // Reset some elements to be edited
                inclExpectedPaymentField.allowEdit(true);
                inclPaidPaymentField.allowEdit(true);
                break;
        }

        this.enablePaymentDates(inclExpectedPaymentField.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>disableOrEnableControls</Name>
				<Source><![CDATA[
    public void disableOrEnableControls(identifierName methodName, boolean _enable = false)
    {
        DialogField             dialogField1;

        dialogField1 = this.bindInfo().getDialogField(this.dataContractObject(), methodName);
        if (dialogField1)
        {
            dialogField1.enabled(_enable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enablePaymentDates</Name>
				<Source><![CDATA[
    public void enablePaymentDates(boolean _enable = false)
    {
        this.disableOrEnableControls(methodstr(ProjCashFlowProjectReportContract, parmAddDaysToSales), _enable);
        this.disableOrEnableControls(methodstr(ProjCashFlowProjectReportContract, parmMinimumSalesPayDate), _enable);
        this.disableOrEnableControls(methodstr(ProjCashFlowProjectReportContract, parmAddDaysToCost), _enable);
        this.disableOrEnableControls(methodstr(ProjCashFlowProjectReportContract, parmExpectedCostPayDate), _enable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inclExpectedPayment_Modified</Name>
				<Source><![CDATA[
    public boolean inclExpectedPayment_Modified(FormCheckBoxControl _control)
    {
        boolean ret;

        ret = true;
        this.enablePaymentDates(inclExpectedPaymentField.value());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postBuild</Name>
				<Source><![CDATA[
    public void postBuild()
    {
        Args args;

        super();

        args = this.controller().parmArgs();

        // Default actual settings
        dialogField = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(ProjCashFlowProjectReportContract, parmProjBreakDate));
        if (dialogField)
        {
            dialogField.visible(false);
        }
        dialogField = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(ProjCashFlowProjectReportContract, parmPaymentBreakDate));
        if (dialogField)
        {
            dialogField.visible(false);
        }

        // Set the payment types
        inclExpectedPaymentField = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(ProjCashFlowProjectReportContract, parmInclExpectedPayment));
        if (InclExpectedPaymentField)
        {
            InclExpectedPaymentField.enabled(true);
            InclExpectedPaymentField.value(false);
        }

        dialogField = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(ProjCashFlowProjectReportContract, parmInclPaidPayment));
        if (dialogField)
        {
            dialogField.enabled(true);
            dialogField.value(false);
        }

        if (args.menuItemName() == menuitemoutputstr(ProjCashFlowProject))
        {
            dialogField = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(ProjCashFlowProjectReportContract, parmProjView));
            dialogField.visible(true);
            dialogField = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(ProjCashFlowProjectReportContract, parmLevel));
            dialogField.visible(true);
        }
        actualBudgetDeviationSumField = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(ProjCashFlowProjectReportContract, parmActualBudgetDeviationSum));
        this.actualBudgetDeviationSum_Modified();

        boolean projMultContractLinesForProjFeatureEnabled = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();

        this.setVisibilityForControls(methodstr(ProjCashFlowProjectReportContract, parmTimeMaterial), !projMultContractLinesForProjFeatureEnabled);
        this.setVisibilityForControls(methodstr(ProjCashFlowProjectReportContract, parmFixedPrice), !projMultContractLinesForProjFeatureEnabled);
        this.setVisibilityForControls(methodstr(ProjCashFlowProjectReportContract, parmInvestment), !projMultContractLinesForProjFeatureEnabled);
        this.setVisibilityForControls(methodstr(ProjCashFlowProjectReportContract, parmInternalCost), !projMultContractLinesForProjFeatureEnabled);
        this.setVisibilityForControls(methodstr(ProjCashFlowProjectReportContract, parmTime), !projMultContractLinesForProjFeatureEnabled);
        this.setVisibilityForControls(methodstr(ProjCashFlowProjectReportContract, parmOnAcc), !projMultContractLinesForProjFeatureEnabled);
        this.setVisibilityForControls(methodstr(ProjCashFlowProjectReportContract, parmTimeMaterialBillingMethod), projMultContractLinesForProjFeatureEnabled);
        this.setVisibilityForControls(methodstr(ProjCashFlowProjectReportContract, parmFixedPriceBillingMethod), projMultContractLinesForProjFeatureEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs post run actions
    /// </summary>
    public void postRun()
    {
        super();

        dialog.dialogForm().formRun().controlMethodOverload(false);
        inclExpectedPaymentField.registerOverrideMethod(methodstr(FormCheckBoxControl, modified), methodstr(ProjCashFlowReportUIBuilder, inclExpectedPayment_Modified), this);
        actualBudgetDeviationSumField.registerOverrideMethod(methodstr(FormComboBoxControl, SelectionChange), methodstr(ProjCashFlowReportUIBuilder, actualBudgetDeviationSum_Modified), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibilityForControls</Name>
				<Source><![CDATA[
    public void setVisibilityForControls(identifierName methodName, boolean _visible = false)
    {
        DialogField             dialogField1;

        dialogField1 = this.bindInfo().getDialogField(this.dataContractObject(), methodName);
        if (dialogField1)
        {
            dialogField1.visible(_visible);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>