<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeTotalsBuildQueryRun</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TradeTotalsBuildQueryRun</c> class is an abstract class that provides an interface to expose
/// <c>QueryRun</c> objects to be utilized by the <c>TradeTotals</c> class and the <c>TradeCalcTax</c>
/// class for iterating records.
/// </summary>
abstract class TradeTotalsBuildQueryRun implements TradeTotalsIBuildQueryRun
{
    TradeTotalsIContract    contract;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildLineQueryRun</Name>
				<Source><![CDATA[
        abstract public QueryRun buildLineQueryRun()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainLineDataSourceNumber</Name>
				<Source><![CDATA[
        abstract public DataSourceNumber mainLineDataSourceNumber()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
        public TradeTotalsIContract parmContract(
        TradeTotalsIContract    _contract = contract)
    {
        contract = _contract;

        return contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>TradeTotalsBuildQueryRun</c> class.
    /// </summary>
    /// <param name="_contract">
    ///    The <c>TradeTotalsIContract</c> object used to instantiate the <c>TradeTotalsBuildQueryRun</c> class.
    /// </param>
    /// <returns>
    ///    An instance of the <c>TradeTotalsBuildQueryRun</c> class.
    /// </returns>
    public static TradeTotalsBuildQueryRun  newFromContract(
        TradeTotalsIContract    _contract)
    {
        TradeTotalsBuildQueryRun buildQueryRun;

        switch (classIdGet(_contract))
        {
            case classNum(SalesTotalsTransContract):
                buildQueryRun = SalesTotalsBuildQueryRunTrans::newFromSalesTransContract(_contract as SalesTotalsTransContract);
                break;
            case classNum(SalesTotalsParmTransContract):
                buildQueryRun = SalesTotalsBuildQueryRunParmTrans::newFromSalesParmTransContract(_contract as SalesTotalsParmTransContract);
                break;
            case classNum(SalesTotalsSubParmTransContract):
                buildQueryRun = SalesTotalsBuildQueryRunSubParmTrans::newFromSalesSubParmTransContract(_contract as SalesTotalsSubParmTransContract);
                break;
            case classNum(BankLCExportSalesTotalsTransContract):
                buildQueryRun = BankLCExportSalesTotalsBuildQueryRun::newFromExportSalesTransContract(_contract as BankLCExportSalesTotalsTransContract);
                break;
            case classNum(SalesTotalsBasketContract):
                buildQueryRun = SalesTotalsBuildQueryRunBasket::newFromSalesBasketContract(_contract as SalesTotalsBasketContract);
                break;
            case classNum(SalesTotalsProjProposalContract):
                buildQueryRun = SalesTotalsBuildQueryRunProjProposal::newFromProjProposalContract(_contract as SalesTotalsProjProposalContract);
                break;
        }
        return buildQueryRun;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>