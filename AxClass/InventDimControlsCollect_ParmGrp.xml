<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimControlsCollect_ParmGrp</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventDimControlsCollect_ParmGrp extends InventDimControlsCollect
{
    InventDimFormInterface     inventDimForm;

    FormGroupControl    formGroupControl;
    NoYes               useLargeFieldGroup;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildDataFieldList</Name>
				<Source><![CDATA[
    protected void buildDataFieldList()
    {
        if (useLargeFieldGroup)
        {
            dimFieldIdSet = InventDim::dimFieldList2Set(InventDimMetaDataCache::dimParmFieldListLarge());
        }
        else
        {
            dimFieldIdSet = InventDim::dimFieldList2Set(InventDimMetaDataCache::dimParmFieldList());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDataSourceList</Name>
				<Source><![CDATA[
    protected void buildDataSourceList()
    {
        // We don't need any lists for the simple checkbox form
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFromForm</Name>
				<Source><![CDATA[
    protected void buildFromForm()
    {
        if (!formGroupControl)
        {
            return;
        }

        //work around compiler bug
        Object dummy = inventDimForm;
        InventDimAxFormAdapter adapter = dummy;

        FormRun runForm = adapter.parmFormObject();

        this.addFormGroupControl(formGroupControl, runForm, runForm.form());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFormGroupControl</Name>
				<Source><![CDATA[
    protected void addFormGroupControl(FormGroupControl _formGroupControl, FormRun _formRun, Form _form)
    {
        int              i,h;
        FormControl      parent, child;
        FormBuildControl buildParent, buildChild;

        parent      = _formRun.design().control(_formGroupControl.id());
        buildParent = _form.design().control(parent.id());
        i           = buildParent.controlCount();

        for (h = 1; h <= i; h++)
        {
            buildChild  = buildParent.controlNum(h);
            child       = _formRun.design().control(buildChild.id());
            if (!(buildChild is FormBuildGroupControl))
            {
                this.insertFormFieldControl(child, false);
            }
            else
            {
                this.addFormGroupControl(child, _formRun, _form);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>tableId</c> value of the table that holds the dimension fields.
    /// </summary>
    /// <returns>
    ///    A <c>tableId</c> value of the <c>InventDimParm</c> table.
    /// </returns>
    protected TableId dimTableId()
    {
        return tableNum(InventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formSetControls</Name>
				<Source><![CDATA[
    public void formSetControls(
        InventDimParm   _inventDimParmEnable,
        InventDimParm   _inventDimParmShow      = null)
    {
        InventDimFormControlInterface  fc;

        inventDimForm.lock();

        for (fc = this.first(); fc; fc = this.next())
        {
            int fieldId = this.fieldId(fc);
            if (_inventDimParmShow.(fieldId) && !fc.visible())
            {
                fc.visible(true);
            }
            else if (!_inventDimParmShow.(fieldId) && fc.visible())
            {
                fc.visible(false);
            }
            fc.allowEdit(_inventDimParmEnable.(fieldId));
        }
        inventDimForm.unLock();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes this class.
    /// </summary>
    /// <remarks>
    ///    This method is called from the constructing new method.
    /// </remarks>
    protected void init()
    {
        super();

        this.buildDataFieldList();

        if (inventDimForm is InventDimAxFormAdapter)
        {
            this.buildFromForm();
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInsertInList</Name>
				<Source><![CDATA[
    protected boolean mustInsertInList(InventDimControlInterface _o)
    {
        //we are short circuiting this because we need all the controls
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormGroupControl</Name>
				<Source><![CDATA[
    public FormGroupControl parmFormGroupControl(FormGroupControl _formGroupControl = formGroupControl)
    {
        formGroupControl = _formGroupControl;
        return formGroupControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimForm</Name>
				<Source><![CDATA[
    public InventDimFormInterface parmInventDimForm(InventDimFormInterface _inventDimForm = inventDimForm)
    {
        inventDimForm = _inventDimForm;
        return inventDimForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseLargeFieldGroup</Name>
				<Source><![CDATA[
    public NoYes parmUseLargeFieldGroup(NoYes _useLargeFieldGroup = useLargeFieldGroup)
    {
        useLargeFieldGroup = _useLargeFieldGroup;
        return useLargeFieldGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventDimControlsCollect_ParmGrp construct()
    {
        return new InventDimControlsCollect_ParmGrp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes an instance of the <c>InventDimControlsCollect_ParmGrp</c> class for forms.
    /// </summary>
    /// <param name="_formRun">
    ///    The form where controls are maintained.
    /// </param>
    /// <param name="_fgc">
    ///    The group of controls to manipulate.
    /// </param>
    /// <param name="_useLargeFieldGroup">
    ///    Indicates whether a large or small field group should be used.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventDimControlsCollect_ParmGrp</c> class to use in a form.
    /// </returns>
    public static InventDimControlsCollect_ParmGrp newFromForm(
        FormRun             _formRun,
        FormGroupControl    _fgc,
        NoYes               _useLargeFieldGroup)
    {
        InventDimControlsCollect_ParmGrp   collect = InventDimControlsCollect_ParmGrp::construct();
        InventDimFormInterface formInterface = InventDimAxFormAdapter::newFromForm(_formRun);

        collect.parmInventDimForm(formInterface);
        collect.parmFormGroupControl(_fgc);
        collect.parmUseLargeFieldGroup(_useLargeFieldGroup);

        collect.init();

        return collect;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
