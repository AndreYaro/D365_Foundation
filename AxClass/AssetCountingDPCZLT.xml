<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetCountingDPCZLT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetCountingDPCZLT</c> class is the data provider for the <c>AssetCountingCZLT</c> report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(AssetCountingCZLT)),
    SRSReportParameterAttribute(classstr(AssetCountingContractCZLT))
]
public class AssetCountingDPCZLT extends SrsReportDataProviderPreProcessTempDB
{
    AssetCountingTmpCZLT assetCountingTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssetCountingTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the data in the <c>AssetCountingTmpCZLT</c> table.
    /// </summary>
    /// <returns>
    ///     The <c>AssetCountingTmpCZLT</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(AssetCountingTmpCZLT))
    ]
    public AssetCountingTmpCZLT getAssetCountingTmp()
    {
        select assetCountingTmp;
        return assetCountingTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        QueryRun                  qr;
        AssetCountingContractCZLT contract;
        AssetTable                assetTable;
        AssetBook                 assetBook;
        AssetTrans                assetTrans;
        RecId                     assetCountingTmpRecId;
        boolean                   firstRecordFound = false;
        AmountMST                 totalAssetAmount = 0;
        Integer                   totalRowCount = 0;
        TransDate                 transDate;
        AssetLocationId           location;
        AssetLocationName         locationName;
        RNumDateInWordConverter   wordConverter;

        contract    = this.parmDataContract() as AssetCountingContractCZLT;
        transDate   = contract.parmTransDate();

        qr = new QueryRun(this.parmQuery());
        location = this.parmQuery().dataSourceTable(tableNum(AssetTable)).rangeField(fieldNum(AssetTable, Location)).value();
        if (location)
        {
            locationName = AssetLocation::find(location).Name;
        }
        else
        {
            locationName = '';
        }

        while (qr.next())
        {
            assetTable  = qr.get(tableNum(AssetTable)) as AssetTable;

            if (qr.changed(tableNum(AssetTable)))
            {
                assetBook   = qr.get(tableNum(AssetBook)) as AssetBook;
                assetTrans  = qr.get(tableNum(AssetTrans)) as AssetTrans;

                // If the asset has a status of sold or scrapped, the record is skipped unless there exists
                // an entry in AssetTrans which has a type of NetBookValue and a date after or on the trans
                // date specified in the contract.
                if (assetBook.Status == AssetStatus::Sold || assetBook.Status == AssetStatus::Scrapped)
                {
                    select firstonly RecId from assetTrans
                        where assetTrans.AssetId   == assetBook.AssetId &&
                              assetTrans.TransDate >= transDate         &&
                              assetTrans.TransType == AssetTransType::NetBookValue;
                    if (!assetTrans.RecId)
                    {
                        continue;
                    }
                }
                assetCountingTmp.AcquisitionDate = assetBook.AcquisitionDate;
                assetCountingTmp.Quantity        = assetTable.Quantity;
                assetCountingTmp.AssetName       = assetTable.Name;
                assetCountingTmp.AssetId         = assetTable.AssetId;
                assetCountingTmp.AssetAmount     = AssetSumCalc_Trans::newAssetPeriod(assetTable.AssetId,
                                                        assetBook.BookId,
                                                        dateNull(),
                                                        transDate).netBookValue();
                assetCountingTmp.LocationName    = locationName;
                assetCountingTmp.UnitOfMeasure   = assetTable.UnitOfMeasure ? assetTable.UnitOfMeasure : "@GLS107634";

                totalAssetAmount += assetCountingTmp.AssetAmount;
                totalRowCount++;

                assetCountingTmp.insert();
                if (!firstRecordFound)
                {
                    assetCountingTmpRecId = assetCountingTmp.RecId;
                    firstRecordFound = true;
                }
            }
        }

        // Since we are populating only the first row of the temp table with the totals, ensure that the report
        // always uses something like this for displaying these totals -
        // First(Fields!TotalRowCount.Value, "AssetCountingDS")
        if (firstRecordFound)
        {
            ttsBegin;
            select forUpdate firstOnly assetCountingTmp
                where assetCountingTmp.RecId == assetCountingTmpRecId;
            wordConverter                                = RNumDateInWordConverter::construct(currentUserLanguage());
            assetCountingTmp.TotalAssetAmount      = totalAssetAmount;
            assetCountingTmp.TotalAssetAmountWords = wordConverter.numeralsToCurrency(totalAssetAmount);
            assetCountingTmp.TotalRowCount         = totalRowCount;
            assetCountingTmp.TotalRowCountWords    = wordConverter.numeralsToTxt(totalRowCount);

            assetCountingTmp.update();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>