<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkInventoryTransactionDescriptor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkInventoryTransactionDescriptor</c> class describes a particular inventory change.
/// </summary>
public final class WHSWorkInventoryTransactionDescriptor
{
    private Map inventoryTransactionDescriptorMap = new Map(Types::Container, Types::Class);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a given inventory transaction descriptor element to the current collection of inventory changes.
    /// </summary>
    /// <param name = "_inventoryTransactionDesciptorElement">An inventory transaction element to add.</param>
    [Hookable(false)]
    internal void add(WHSWorkInventoryTransactionDescriptorElement _inventoryTransactionDesciptorElement)
    {
        Debug::assert(_inventoryTransactionDesciptorElement != null);

        container descriptorElementKey = _inventoryTransactionDesciptorElement.getKey();

        if (inventoryTransactionDescriptorMap.exists(descriptorElementKey))
        {
            WHSWorkInventoryTransactionDescriptorElement existingDescriptorElement = inventoryTransactionDescriptorMap.lookup(descriptorElementKey);

            existingDescriptorElement.addQuantities(
                _inventoryTransactionDesciptorElement.parmHandlingQty(),
                _inventoryTransactionDesciptorElement.parmHandlingWeight());
        }
        else
        {
            inventoryTransactionDescriptorMap.add(descriptorElementKey, _inventoryTransactionDesciptorElement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstOrDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the first inventory transaction descriptor.
    /// </summary>
    /// <returns>First inventory transaction descriptor, if there are any; otherwise, null.</returns>
    [Hookable(false)]
    public WHSWorkInventoryTransactionDescriptorElement firstOrDefault()
    {
        WHSWorkInventoryTransactionDescriptorElement inventoryTransactionDesciptorElement;

        if (!inventoryTransactionDescriptorMap.empty())
        {
            MapEnumerator descriptorEnumerator = inventoryTransactionDescriptorMap.getEnumerator();
            descriptorEnumerator.moveNext();

            inventoryTransactionDesciptorElement = descriptorEnumerator.currentValue();
        }

        return inventoryTransactionDesciptorElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumerator</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSWorkInventoryTransactionDescriptorEnumerator getEnumerator()
    {
        return WHSWorkInventoryTransactionDescriptorEnumerator::newFromDescriptorEnumerator(inventoryTransactionDescriptorMap.getEnumerator());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there are any inventory changes.
    /// </summary>
    /// <returns>true if there are no inventory changes; otherwise, false.</returns>
    [Hookable(false)]
    public boolean isEmpty()
    {
        return inventoryTransactionDescriptorMap.empty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>elementCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of elements in the collection of inventory changes.
    /// </summary>
    /// <returns>the number of elements in the collection of inventory changes.</returns>
    [Hookable(false)]
    public int elementCount()
    {
        return inventoryTransactionDescriptorMap.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSWorkInventoryTransactionDescriptor construct()
    {
        return new WHSWorkInventoryTransactionDescriptor();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>