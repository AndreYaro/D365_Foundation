<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WorkCalendarDelete</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WorkCalendarDelete extends RunBaseBatch implements BatchRetryable
{
    TransDate           toDate;

    DialogRunbase       dialog;
    DialogField         dialogToDate;

    QueryRun            queryRun;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        toDate
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCalendarDate</Name>
				<Source><![CDATA[
    void deleteCalendarDate()
    {
        WorkCalendarTable   workCalendarTable;
        WorkCalendarDate    workCalendarDate;

        while (queryRun.next())
        {
            workCalendarTable = queryRun.get(tableNum(WorkCalendarTable));

            setPrefix(#preFixField(workCalendarTable,calendarId));

            progress.setText(workCalendarTable.CalendarId,1);
            progress.incCount();

            delete_from workCalendarDate
                where workCalendarDate.CalendarId == workCalendarTable.CalendarId &&
                      workCalendarDate.TransDate  <  toDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    Object dialog()
    {
        dialog = super();
        dialogToDate = dialog.addFieldValue(extendedTypeStr(TransDate),toDate,"@SYS67920","@SYS67920");
        dialog.addMenuItemButton(MenuItemType::Display,menuitemDisplayStr(RunbaseQueryDialog),DialogMenuItemGroup::BottomGrp);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        toDate = dialogToDate.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [SuppressBpWarning('BPErrorClassNewNotProtected', 'The constructor is preserved public due to API compatibility.')]
    public void new()
    {
        super();
        queryRun = new QueryRun(queryStr(WorkCalendarDelete));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion,#CurrentList,queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            if (! this.validate())
            {
                throw error("@SYS18447");
            }

            this.progressInit(WorkCalendarDelete::description(), SysQuery::countLoops(queryRun), #AviFileDel);

            this.deleteCalendarDate();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer         version         = conPeek(packedClass,1);
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,packedQuery] = packedClass;
                if (packedQuery && conLen(packedQuery) == 1)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static WorkCalendarDelete construct()
    {
        WorkCalendarDelete   workCalendarDelete;

        workCalendarDelete =  new WorkCalendarDelete();

        return workCalendarDelete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS67922";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    [SuppressBpWarning('BPParameterNotUsed', 'The parameter is not used but it is mandate by the API it is extending, implementing or mocking.')]
    static void main(Args _args)
    {
        WorkCalendarDelete  workCalendarDelete = WorkCalendarDelete::newMain();

        if (workCalendarDelete.prompt())
        {
            workCalendarDelete.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMain</Name>
				<Source><![CDATA[
    static WorkCalendarDelete newMain()
    {
        WorkCalendarDelete workCalendarDelete = WorkCalendarDelete::construct();
        workCalendarDelete.getLast();
        workCalendarDelete.parmToDate(prevMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
        return workCalendarDelete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>