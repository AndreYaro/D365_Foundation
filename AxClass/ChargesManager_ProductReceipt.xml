<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ChargesManager_ProductReceipt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Charges event handlers for product receipt document.
/// </summary>
public class ChargesManager_ProductReceipt
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>onBeforePostDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check allocation has been done for all allocation mandatory charges on <c>PurchParmTable</c>.
    /// </summary>
    /// <param name="purchParmTable">
    /// The record to check.
    /// </param>
    /// <param name="args">
    /// The <c>ChargeArgs</c> instance which contains the return value(s).
    /// </param>
    [SubscribesTo(classStr(PurchPackingSlipJournalCreate), delegatestr(PurchPackingSlipJournalCreate, beforePostDocument))]
    public static void onBeforePostDocument(PurchParmTable purchParmTable, ChargesArgs args)
    {
        if (PurchParameters::find().ProductReceiptCharges)
        {
            args.setReturnValue(purchParmTable.checkCharges(false));
        }
        else
        {
            args.setReturnValue(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onInitCharges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize charges for product receipt based on charges on purchase order and lines involved.
    /// </summary>
    /// <param name="purchParmUpdate">
    /// The uber record for the product receipt instance.
    /// </param>
    [SubscribesTo(classStr(PurchFormLetterParmDataPackingSlip), delegatestr(PurchFormLetterParmDataPackingSlip, initCharges))]
    public static void onInitCharges(PurchParmUpdate purchParmUpdate)
    {
        PurchParmTable          purchParmTable;
        PurchParmLine           purchParmLine;
        PurchTable              localPurchTable;
        PurchLine               localPurchLine;
        MarkupTrans             markupTrans;
        MarkupCopy              markupCopy;

        if (PurchParameters::find().ProductReceiptCharges)
        {
            markupCopy = MarkupCopy::construct();

            while select purchParmTable
            where purchParmTable.ParmId == purchParmUpdate.ParmId
            join localPurchTable
                where localPurchTable.PurchId == purchParmTable.PurchId
            notexists join markupTrans
                where markupTrans.TransTableId == purchParmTable.TableId
                    && markupTrans.TransRecId == purchParmTable.RecId
                    && !markupTrans.IsDeleted
            {
                MarkupCopyFromPurchOrderParameters copyFromPurchOrderToParmTableParameters =
                    MarkupCopyFromPurchOrderParameters::createCopyFromPurchOrderParameters(
                        localPurchTable, 
                        purchParmTable, 
                        '', 
                        purchParmTable.CurrencyCode, 
                        SourceDocumentLineAccountingStatus::None, 
                        localPurchTable, 
                        false);
                markupCopy.copyFromPurchOrder(copyFromPurchOrderToParmTableParameters);
                if (ChargesManager_ProductReceipt_MultiplePOLinesFlight::instance().isEnabled())
                {
                    while select purchParmLine
                        where purchParmLine.ParmId == purchParmTable.ParmId
                       && purchParmLine.TableRefId == purchParmTable.TableRefId
                        join localPurchLine
                            where localPurchLine.RecId == purchParmLine.PurchLineRecId
                        join localPurchTable
                         where localPurchTable.PurchId == localPurchLine.PurchId
                        notexists join markupTrans
                            where markupTrans.TransTableId == purchParmLine.TableId
                                && markupTrans.TransRecId == purchParmLine.RecId
                                && markupTrans.MarkupCategory != MarkupCategory::Pcs
                                && markupTrans.MarkupCategory != MarkupCategory::Percent
                                && !markupTrans.IsDeleted
                         {
                            MarkupCopyFromPurchOrderParameters copyFromPurchOrderToParmLineParameters =
                            MarkupCopyFromPurchOrderParameters::createCopyFromPurchOrderParameters(
                                localPurchLine,
                                purchParmLine,
                                '',
                                '',
                                SourceDocumentLineAccountingStatus::None,
                                localPurchTable,
                                false);
                            markupCopy.copyFromPurchOrder(copyFromPurchOrderToParmLineParameters);
                        }
                }
                else
                {
                    while select purchParmLine
                            where purchParmLine.ParmId == purchParmTable.ParmId
                                && purchParmLine.TableRefId == purchParmTable.TableRefId
                        join localPurchLine
                            where localPurchLine.RecId == purchParmLine.PurchLineRecId
                                && localPurchLine.PurchId == purchParmLine.OrigPurchId
                        notexists join markupTrans
                            where markupTrans.TransTableId == purchParmLine.TableId
                                && markupTrans.TransRecId == purchParmLine.RecId
                                && (markupTrans.MarkupCategory == MarkupCategory::Pcs ||
                                    markupTrans.MarkupCategory == MarkupCategory::Percent)
                                && !markupTrans.IsDeleted
                    {
                        MarkupCopyFromPurchOrderParameters copyFromPurchOrderToParmLineParameters =
                            MarkupCopyFromPurchOrderParameters::createCopyFromPurchOrderParameters(
                            localPurchLine,
                            purchParmLine,
                            '',
                            '',
                            SourceDocumentLineAccountingStatus::None,
                            localPurchTable,
                            false);
                        markupCopy.copyFromPurchOrder(copyFromPurchOrderToParmLineParameters);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onPostCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post charge for product receipt.
    /// </summary>
    /// <param name="vendPackingSlipTrans">
    /// Product receipt line associated with the charge.
    /// </param>
    /// <param name="transDate">
    /// The <c>TransDate</c> to be used for posting.
    /// </param>
    /// <param name="voucher">
    /// The <c>Voucher</c> to be used for posting.
    /// </param>
    [SubscribesTo(classStr(PurchPackingSlipJournalPost), delegatestr(PurchPackingSlipJournalPost, postCharge))]
    public static void onPostCharge(VendPackingSlipTrans vendPackingSlipTrans, TransDate transDate, Voucher voucher)
    {
        MarkupTrans             markupTrans;
        Amount                  postAmount;
        MonetaryDocumentLineMap monetaryDocumentLine;

        if (PurchParameters::find().ProductReceiptCharges)
        {
            monetaryDocumentLine = MonetaryDocumentLineMap::initFromCommon(vendPackingSlipTrans);

            while select forupdate markupTrans
                where markupTrans.TransTableId == vendPackingSlipTrans.TableId
                    && markupTrans.TransRecId == vendPackingSlipTrans.RecId
                    && !markupTrans.Voucher
                    && !markupTrans.IsDeleted
            {
                markupTrans.Voucher     = voucher;
                markupTrans.TransDate   = transDate;
                postAmount              = Markup::calcMarkupAmount(markupTrans,
                                                                   monetaryDocumentLine.Qty,
                                                                   monetaryDocumentLine.LineAmount,
                                                                   0,
                                                                   false); //_isInclTax

                //Making sure the sign is consistent with VendInvoice
                switch (markupTrans.ModuleType)
                {
                    case MarkupModuleType::Vend :
                        if (markupTrans.markupTable().CustType != MarkupType::Item
                            && markupTrans.markupTable().VendType == MarkupType::LedgerAccount)
                        {
                            postAmount = -postAmount;
                        }
                        break;
                }

                markupTrans.CalculatedAmount = postAmount;
                markupTrans.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onTransferCharges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfer charges from <c>PurchParmTable</c> to <c>VendPackingSlipJour</c>.
    /// </summary>
    /// <param name="purchParmTable">
    /// The <c>PurchParmTable</c> record to be used to lookup charges which will be transfered.
    /// </param>
    /// <param name="vendPackingSlipJour">
    /// The <c>VendPackingSlipJour</c> record the charges will be transfered to.
    /// </param>
    [SubscribesTo(classStr(PurchPackingSlipJournalPost), delegatestr(PurchPackingSlipJournalPost, transferCharges))]
    public static void onTransferCharges(PurchParmTable purchParmTable, VendPackingSlipJour vendPackingSlipJour)
    {
        PurchParmLine           productReceiptParmLine;
        VendPackingSlipTrans    productReceiptJournalLine;

        if (PurchParameters::find().ProductReceiptCharges)
        {
            //Transfer charges for header
            MarkupTrans::transferCharges(purchParmTable, vendPackingSlipJour);

            while select InventTransId from productReceiptParmLine
                where productReceiptParmLine.ParmId == purchParmTable.ParmId
                    && productReceiptParmLine.TableRefId == purchParmTable.TableRefId
            {
                select RecId, TableId from productReceiptJournalLine
                    where productReceiptJournalLine.InventTransId == productReceiptParmLine.InventTransId
                        && productReceiptJournalLine.VendPackingSlipJour == vendPackingSlipJour.RecId;

                //Transfer charges for line
                MarkupTrans::transferCharges(productReceiptParmLine, productReceiptJournalLine);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>