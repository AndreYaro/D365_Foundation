<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailEInvoiceTransMap_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailEInvoiceTransMap_MX</c> class extends the <c>EInvoiceTransBaseMap_MX</c>
/// class to implement the mapping from the <c>RetailTransactionTable</c> table.
/// </summary>
public class RetailEInvoiceTransMap_MX extends EInvoiceTransBaseMap_MX
{
    RetailStoreTable storeTable;
    RetailTransactionTable transactionTable;
    RetailTransactionTableExt transactionTableExt;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amount</Name>
				<Source><![CDATA[
    public LineAmount amount()
    {
        return this.amountExcludePrepayments();
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountExcludePrepayments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the amount exclude prepayments.
    /// </summary>
    /// <returns>
    /// The amount exclude prepayments.
    /// </returns>
    private LineAmount amountExcludePrepayments()
    {
        return -1 * transactionTableExt.NetAmountExclPrepayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountCur</Name>
				<Source><![CDATA[
    public LineAmount amountCur()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discountAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a discount amount for the receipt.
    /// </summary>
    /// <returns>
    /// A discount amount for the receipt.
    /// </returns>
    public AmountCur discountAmount()
    {
        return this.discountWithoutTaxExcludePrepayments();
    }

]]></Source>
			</Method>
			<Method>
				<Name>discountWithoutTaxExcludePrepayments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the discount amount without tax and without prepayments.
    /// </summary>
    /// <returns>
    /// The discount without tax and without prepayments.
    /// </returns>
    /// <remarks>Discount amount without tax equals discount amount in tax exclusive scenario.</remarks>
    private AmountCur discountWithoutTaxExcludePrepayments()
    {
        return transactionTableExt.DiscAmountWithoutTaxExclPrepayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discountExcludePrepayments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the discount exclude prepayments.
    /// </summary>
    /// <returns>
    /// The discount exclude prepayments.
    /// </returns>
    public AmountCur discountExcludePrepayments()
    {
        return transactionTableExt.DiscAmountExclPrepayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discountAmountMST</Name>
				<Source><![CDATA[
    public AmountMST discountAmountMST()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLine</Name>
				<Source><![CDATA[
    protected void initLine(Common _originalJournalLine)
    {
        this.initTransactionTable(_originalJournalLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransactionTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class variables.
    /// </summary>
    /// <param name="_transactionTable">
    /// A <c>RetailTransactionTable</c> record.
    /// </param>
    protected void initTransactionTable(RetailTransactionTable _transactionTable)
    {
        storeTable = RetailStoreTable::find(_transactionTable.store);
        transactionTable = _transactionTable;
        transactionTableExt = RetailTransactionTableExt::find(_transactionTable.transactionId, _transactionTable.store, _transactionTable.terminal);
        eInvoiceTrans = EInvoiceTrans_MX::findByRef(transactionTable.TableId, transactionTable.RecId);
        eInvoiceJour = EInvoiceJour_MX::find(eInvoiceTrans.RefEInvoiceJourRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    public InventTransId inventTransId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUnitApplicable</Name>
				<Source><![CDATA[
    public boolean isUnitApplicable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    public ItemId itemId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    public ItemFreeTxt itemName()
    {
        return EInvoiceCFDIParameters_MX::find().getRetailItemDescription();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupTransList</Name>
				<Source><![CDATA[
    public List markupTransList()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productId</Name>
				<Source><![CDATA[
    public str productId()
    {
        return transactionTable.receiptId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    public Qty qty()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    public RefRecId sourceRecId()
    {
        return transactionTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    public RefTableId sourceTableId()
    {
        return transactionTable.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmount</Name>
				<Source><![CDATA[
    public Amount taxAmount()
    {
        return -1 * transactionTableExt.TaxAmountExclPrepayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unit</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol unit()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitPrice</Name>
				<Source><![CDATA[
    public SalesPrice unitPrice()
    {
        return this.amount() + this.discountAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitPriceMST</Name>
				<Source><![CDATA[
    public SalesPrice unitPriceMST()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>RetailEInvoiceCFDITransMap_MX</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>RetailEInvoiceCFDITransMap_MX</c> class.
    /// </returns>
    public static RetailEInvoiceTransMap_MX construct()
    {
        return new RetailEInvoiceTransMap_MX();
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode currencyCode()
    {
        return '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>