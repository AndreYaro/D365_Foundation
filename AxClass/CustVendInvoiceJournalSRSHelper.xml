<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendInvoiceJournalSRSHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustVendInvoiceJournalSRSHelper</c> class supports the
///    <c>CustVendInvoiceJournalSRSHelper</c> which is used to calculate the <c>taxAmount</c>,
///    <c>financialIncome</c>, and <c>invoiceAmount</c> for the given record.
/// </summary>
public class CustVendInvoiceJournalSRSHelper
{
    VendInvoiceJour vendInvoiceJour;
    CustInvoiceJour custInvoiceJour;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>additionalTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the tax amount currency for each record.
    /// </summary>
    /// <param name="_custVendInvoiceJourRecId">
    ///    The <c>custVendInvoiceJourRecId</c> of the record for which to find the currency of the tax amount.
    /// </param>
    /// <param name="_addTax">
    ///    The <c>addTax</c> is the value captured from the input parameter.
    /// </param>
    /// <param name="_sysModule">
    ///    The <c>sysModule</c> is the enum which returns the Vend/Cust module.
    /// </param>
    /// <returns>
    ///    Returns tax amount currency of the record.
    /// </returns>
    public TaxAmountCur additionalTaxAmount(RecId _custVendInvoiceJourRecId, TaxCode _addTax, SysModule _sysModule)
    {
        TaxSpec taxSpec;
        vendInvoiceJour vendInvoiceJourLocal;
        custInvoiceJour custInvoiceJourLocal;
        TaxAmountCur taxAmountCur;

        if (_sysModule == SysModule::Vend)
        {
            vendInvoiceJourLocal = vendInvoiceJour::findRecId(_custVendInvoiceJourRecId);
            taxSpec = TaxSpec::construct(vendInvoiceJourLocal.LedgerVoucher, vendInvoiceJourLocal.InvoiceDate, vendInvoiceJourLocal.RecId);
        }
        else if (_sysModule == SysModule::Cust)
        {
            custInvoiceJourLocal = custInvoiceJour::findRecId(_custVendInvoiceJourRecId);
            taxSpec = TaxSpec::construct(custInvoiceJourLocal.LedgerVoucher, custInvoiceJourLocal.InvoiceDate, custInvoiceJourLocal.RecId);
        }

        while (taxSpec.parmTaxSpec())
        {
            if (taxSpec.taxCode() == _addTax)
                taxAmountCur += taxSpec.taxAmount();
        }

        return -taxAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>financialIncome</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the financial income for each record.
    /// </summary>
    /// <param name="_custVendInvoiceJourRecId">
    ///    The <c>custVendInvoiceJourRecId</c> of the record for which to find the financial income.
    /// </param>
    /// <param name="_finIncome">
    ///    The value captured from the input parameter.
    /// </param>
    /// <param name="_sysModule">
    ///    The enumeration that returns the Vend/Cust module.
    /// </param>
    /// <returns>
    ///    The financial income based on the input values.
    /// </returns>
    public AmountCur financialIncome(RecId _custVendInvoiceJourRecId, MarkupCode _finIncome, SysModule _sysModule)
    {
        QueryRun tradeLoopTrans;
        MarkupTrans markupTrans;
        VendInvoiceTrans vendInvoiceTrans;
        AmountCur amountCur;
        VendInvoiceJour vendInvoiceJourLocal;
        CustInvoiceTrans custInvoiceTrans;
        CustInvoiceJour custInvoiceJourLocal;

        if (_sysModule == SysModule::Vend)
        {
            vendInvoiceJourLocal = VendInvoiceJour::findRecId(_custVendInvoiceJourRecId);

            while select Posted from markupTrans
                where markupTrans.TransRecId == vendInvoiceJourLocal.RecId &&
                    markupTrans.TransTableId == vendInvoiceJourLocal.TableId &&
                    markupTrans.ModuleType ==
                                            MarkupModuleType::Vend &&
                    markupTrans.MarkupCode == _finIncome &&
                   !markupTrans.IsDeleted

            {
                amountCur += markupTrans.Posted;
            }

            tradeLoopTrans = new TradeLoopTrans(vendInvoiceJourLocal,tablenum(VendInvoiceTrans)).buildQueryRun();

            while (tradeLoopTrans.next())
            {
                vendInvoiceTrans = tradeLoopTrans.get(tablenum(VendInvoiceTrans));
                while select Posted from markupTrans
                    where markupTrans.TransRecId == vendInvoiceTrans.RecId &&
                        markupTrans.TransTableId == vendInvoiceTrans.TableId &&
                        markupTrans.ModuleType ==
                                            MarkupModuleType::Cust &&
                        markupTrans.MarkupCode == _finIncome &&
                       !markupTrans.IsDeleted
                {
                    amountCur += markupTrans.Posted;
                }
            }
        }
        else if (_sysModule == SysModule::Cust)
        {
            custInvoiceJourLocal = custInvoiceJour::findRecId(_custVendInvoiceJourRecId);

            while select Posted from markupTrans
                where markupTrans.TransTableId == custInvoiceJourLocal.TableId &&
                    markupTrans.TransRecId == custInvoiceJourLocal.RecId &&
                    markupTrans.Voucher == custInvoiceJourLocal.LedgerVoucher &&
                    markupTrans.ModuleType ==
                                            MarkupModuleType::Cust &&
                    markupTrans.MarkupCode == _finIncome &&
                   !markupTrans.IsDeleted
            {
                amountCur += markupTrans.Posted;
            }

            tradeLoopTrans = new TradeLoopTrans(custInvoiceJourLocal,tablenum(custInvoiceTrans)).buildQueryRun();

            while (tradeLoopTrans.next())
            {
                custInvoiceTrans = tradeLoopTrans.get(tablenum(custInvoiceTrans));

                while select Posted from markupTrans
                    where markupTrans.TransRecId == custInvoiceJourLocal.RecId &&
                        markupTrans.TransTableId == custInvoiceJourLocal.TableId &&
                        markupTrans.ModuleType ==
                                            MarkupModuleType::Cust &&
                        markupTrans.MarkupCode == _finIncome &&
                       !markupTrans.IsDeleted
                {
                    amountCur += markupTrans.Posted;
                }
            }
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the <c>invoiceAmount</c> of each record.
    /// </summary>
    /// <param name="_invoiceAmount">
    ///    The <c>invoiceAmount</c> of the record for which to find the Invoice amount.
    /// </param>
    /// <param name="_custVendInvoiceJourRecId">
    ///    The <c>custVendInvoiceJourRecId</c> of the record for which to find the Invoice amount.
    /// </param>
    /// <param name="_sysModule">
    ///    An enumeration that returns the Vend/Cust module.
    /// </param>
    /// <returns>
    ///    The Invoice amount based on input values.
    /// </returns>
    public AmountMST invoiceAmountMST(AmountMST _invoiceAmount, RecId _custVendInvoiceJourRecId, SysModule _sysModule)
    {
        vendInvoiceJour vendInvoiceJourLocal;
        custInvoiceJour custInvoiceJourLocal;
        AmountMST amountMST;

        if (_sysModule == SysModule::Vend)
        {
            vendInvoiceJourLocal = vendInvoiceJour::findRecId(_custVendInvoiceJourRecId);
            amountMST = vendInvoiceJourLocal.amountMST(_invoiceAmount);
        }
        else if (_sysModule == SysModule::Cust)
        {
            custInvoiceJourLocal = custInvoiceJour::findRecId(_custVendInvoiceJourRecId);
            amountMST = custInvoiceJourLocal.amountMST(_invoiceAmount);
        }

        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns all the record values based on the <c>custInvoiceJourRecId</c> value.
    /// </summary>
    /// <param name="_custVendInvoiceJourRecId">
    ///    The <c>custVendInvoiceJourRecId</c> that is used to find the required record.
    /// </param>
    /// <param name="_sysModule">
    ///    A <c>SysModule</c> enumeration value that returns the Vend/Cust module.
    /// </param>
    public void parmCustVendInvoiceJour(RecId _custVendInvoiceJourRecId, SysModule _sysModule)
    {
        if (_sysModule == SysModule::Cust)
        {
            custInvoiceJour = custInvoiceJour::findRecId(_custVendInvoiceJourRecId);
        }
        else if (_sysModule == SysModule::Vend)
        {
            vendInvoiceJour = vendInvoiceJour::findRecId(_custVendInvoiceJourRecId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>