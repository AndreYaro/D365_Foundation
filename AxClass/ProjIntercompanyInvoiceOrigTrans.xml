<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjIntercompanyInvoiceOrigTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This interface provides attributes from project transactions that were posted in a legal entity
/// that is lending resources for another. These atributes are used to create lines for an intercompany
/// invoice issued by the lending company against the borrowing one.
/// </summary>
/// <remarks>
/// The values from getTransOrigin() and getRecId() should together constitute a unique key.
/// </remarks>
public interface ProjIntercompanyInvoiceOrigTrans
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getActivityNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the activity number of the transaction.
    /// </summary>
    /// <returns>
    /// The activity number of the transaction.
    /// </returns>
    public ProjActivityNumber getActivityNumber()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total line amount to be invoiced to the other legal entity.
    /// </summary>
    /// <returns>
    /// The line amount to be invoiced to the other legal entity.
    /// </returns>
    /// <remarks>
    /// The total amount to be invoiced is expected, i.e. any associated indirect costs should be included.
    /// </remarks>
    public AmountCur getAmountCur()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code in which the cost is incurred in the lending company.
    /// </summary>
    /// <returns>
    /// The currency code in which the cost is incurred in the lending company.
    /// </returns>
    public CurrencyCode getCostCurrency()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the cost price of the transaction incurred in the lending company.
    /// </summary>
    /// <returns>
    /// The cost price of the transaction incurred in the lending company.
    /// </returns>
    public Amount getCostPrice()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code of the transaction, which is the one that the borrowing legal entity will be invoiced.
    /// </summary>
    /// <returns>
    /// The currency code in which the borrowing legal entity will be invoiced for this transaction.
    /// </returns>
    public CurrencyCode getCurrencyCode()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data area ID of the lending legal entity.
    /// </summary>
    /// <returns>
    /// The data area ID of the lending legal entity.
    /// </returns>
    public DataAreaId getDataAreaId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a default dimension set of the transaction.
    /// </summary>
    /// <returns>
    /// A description of the transaction.
    /// </returns>
    public LedgerDefaultDimensionValueSet getDefaultDimension()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a description of the transaction.
    /// </summary>
    /// <returns>
    /// A description of the transaction.
    /// </returns>
    public Description getDescription()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinalSalesCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency in which the sales price to the end customer is expressed in.
    /// </summary>
    /// <returns>
    /// The currency in which the sales price to the end customer is expressed in.
    /// </returns>
    public CurrencyCode getFinalSalesCurrencyCode()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinalSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales price that the final customer will be charged for this item.
    /// </summary>
    /// <returns>
    /// The sales price that the final customer will be charged for this item.
    /// </returns>
    public AmountCur getFinalSalesPrice()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIndirectCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the invoice indirect component amount.
    /// </summary>
    /// <returns>
    /// The invoice indirect component amount of the transaction.
    /// </returns>
    public Amount getIndirectCost()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLinePropertyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the line property ID of the transaction.
    /// </summary>
    /// <returns>
    /// The line property ID of the transaction.
    /// </returns>
    /// <remarks>
    /// The line property should exist in the borrowing legal entity.
    /// </remarks>
    public ProjLinePropertyId getLinePropertyId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the project category ID of the transaction.
    /// </summary>
    /// <returns>
    /// The project category ID of the transaction.
    /// </returns>
    /// <remarks>
    /// The category should exist in the borrowing legal entity.
    /// </remarks>
    public ProjCategoryId getProjectCategoryId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data area ID of the borrowing legal entity.
    /// </summary>
    /// <returns>
    /// The data area ID of the borrowing legal entity.
    /// </returns>
    public DataAreaId getProjectDataAreaId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the related project in the borrowing legal entity.
    /// </summary>
    /// <returns>
    /// The ID of the related project in the borrowing legal entity.
    /// </returns>
    /// <remarks>
    /// This is the project where the costs will be incurred at the borrowing legal entity side.
    /// </remarks>
    public ProjId getProjectId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the number of items in this transactions.
    /// </summary>
    /// <returns>
    /// The number of items in this transactions.
    /// </returns>
    public Qty getQuantity()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the intercompany transaction.
    /// </summary>
    /// <returns>
    /// The record ID of the intercompany transaction.
    /// </returns>
    public RefRecId getRecId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales price of the transaction in the currency that the borrowing company will be invoiced.
    /// </summary>
    /// <returns>
    /// The sales price of the transaction in the currency that the borrowing company will be invoiced.
    /// </returns>
    /// <remarks>
    /// This is the sales price alone and does not include additional costs, e.g. indirect component amounts.
    /// </remarks>
    public Amount getSalesPrice()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the source document line associated with the transaction.
    /// </summary>
    /// <returns>
    /// The record ID of the source document line associated with the transaction.
    /// </returns>
    public SourceDocumentLineRecId getSourceDocumentLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item sales tax group that will be used in the invoice line for this transaction.
    /// </summary>
    /// <returns>
    /// The item sales tax group that will be used in the invoice line for this transaction.
    /// </returns>
    public TaxItemGroup getTaxItemGroup()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxGroup</Name>
				<Source><![CDATA[
    public TaxGroup getTaxGroup()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction date.
    /// </summary>
    /// <returns>
    /// The transaction date.
    /// </returns>
    public TransDate getTransDate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the origin of the transaction.
    /// </summary>
    /// <returns>
    /// The origin of the transaction.
    /// </returns>
    public ProjTransactionOrigin getTransOrigin()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the type of the project transaction.
    /// </summary>
    /// <returns>
    /// The type of the project transaction.
    /// </returns>
    public ProjTransType getTransType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnitOfMeasureSymbol</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the symbol of the unit of measure in which the quantity of this item is expressed.
    /// </summary>
    /// <returns>
    /// The symbol of the unit of measure in which the quantity of this item is expressed.
    /// </returns>
    public UnitOfMeasureSymbol getUnitOfMeasureSymbol()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnitPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the unit price of the resource being invoiced.
    /// </summary>
    /// <returns>
    /// The unit price of the resource being invoiced.
    /// </returns>
    /// <remarks>
    /// This unit price should include any additional amounts that will be invoiced agains the borrowing legal entity.
    /// </remarks>
    public AmountCur getUnitPrice()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the worker related to this transaction.
    /// </summary>
    /// <returns>
    /// The record ID of the worker related to this transaction.
    /// </returns>
    public HcmWorkerRecId getWorker()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourceName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns bookable resource name
    /// </summary>
    /// <returns>
    /// The resource name related to this transaction.
    /// </returns>
    public Name getResourceName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBilled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the billing status of the transaction being invoiced.
    /// </summary>
    /// <param name="_billed">
    /// true if the transaction was included in some intercompany invoice; false if it should be available to be invoiced again.
    /// </param>
    public void setBilled(boolean _billed)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the transaction in a form.
    /// </summary>
    /// <remarks>
    /// Used for auditing purposes.
    /// </remarks>
    public void showTrans()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>