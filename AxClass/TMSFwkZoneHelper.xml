<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSFwkZoneHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Ax.Tms.Base.Data;
using Microsoft.Dynamics.Ax.Tms.Base.Utility;
using System.Xml.Linq;

/// <summary>
/// The <c>TMSFwkZoneHelper</c> class calculates transportation zones and zone distances and applies them to relevant XML elements.
/// </summary>
class TMSFwkZoneHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>retrieveAndApplyZoneDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a zone data and appends the result to drop-off element.
    /// </summary>
    /// <param name = "_transactionFacade">Transaction facade.</param>
    /// <param name = "_ratingEntity">Rating entity.</param>
    /// <param name = "_pickup">Pick-up element.</param>
    /// <param name = "_dropOff">Drop-off element.</param>
    /// <param name = "_zoneMasterCode">Zone master code.</param>
    /// <param name = "_ratingDto">Rating DTO.</param>
    /// <returns>An object containing zone data.</returns>
    public static TMSFwkZoneHelperResponse retrieveAndApplyZoneDetail(
        TmsTransactionFacade    _transactionFacade,
        XElement                _ratingEntity,
        XElement                _pickup,
        XElement                _dropOff,
        TMSZoneMasterCode       _zoneMasterCode,
        RatingDto               _ratingDto)
    {
        TMSFwkZoneHelperResponse response = null;
        TMSZoneMaster zoneMaster = TMSZoneMaster::find(_zoneMasterCode);
        XElement zoneSection = null;

        zoneSection = TMSFwkZoneHelper::retrieveZoneSection(_ratingEntity, _dropOff, zoneMaster);
        XElement zoneMasters = zoneSection.Element(GenericNodeXmlConstants::ZoneMasters);

        if (zoneMasters != null)
        {
            XElementList zoneElements = new XElementList(zoneMasters.Elements(GenericNodeXmlConstants::ZoneMaster));
            XElement zoneElement = zoneElements.WhereMatchingStringElement(ElementXmlConstants::ZoneMasterCode, _zoneMasterCode).FirstOrDefault();

            if (zoneElement != null)
            {
                response = TMSFwkZoneHelper::createResponseFromZoneElement(zoneElement);
            }
        }

        if (response == null)
        {
            response = TMSFwkZoneHelper::retrieveZone(
                _transactionFacade,
                _pickup,
                _dropOff,
                zoneMaster.ZoneEngineCode,
                zoneMaster.ZoneMasterCode,
                zoneMaster.ZoneType,
                _ratingDto);

            TMSFwkZoneHelper::addZone(zoneSection, response);
        }

        return response;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveAndApplyZoneDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a list of zone data objects and appends the result to drop-off elements.
    /// </summary>
    /// <param name = "_transactionFacade">Transaction facade.</param>
    /// <param name = "_pickup">Pick-up address.</param>
    /// <param name = "_dropOff">Drop-off address.</param>
    /// <param name = "_routingZoneMasterCodes">A set of strings, containing zone master codes applicable for retrieval of zone data.</param>
    /// <param name = "_zoneType">The type of zone data to retrieve.</param>
    /// <param name = "_ratingDto">Rating DTO.</param>
    /// <returns>A list of objects containing zone data.</returns>
    public static TMSFwkZoneHelperResponseList retrieveAndApplyZoneDetails(
        TmsTransactionFacade    _transactionFacade,
        XElement                _pickup,
        XElement                _dropOff,
        Set                     _routingZoneMasterCodes,
        TMSZoneType             _zoneType,
        RatingDto               _ratingDto)
    {
        XElement xmlZones = _dropOff.GenerateElementForXPath(GenericNodeXmlConstants::ZoneMasters);
        TMSFwkZoneHelperResponseList zoneHelperResponses;

        if (_routingZoneMasterCodes != null && _routingZoneMasterCodes.elements() > 0)
        {
            //Retieve Zones present in XML
            XElementList zoneElements = new XElementList(_dropOff.Element(GenericNodeXmlConstants::ZoneMasters).Elements(GenericNodeXmlConstants::ZoneMaster));
            zoneHelperResponses = TMSFwkZoneHelper::createResponseListFromZoneElements(zoneElements);
            Set zoneMasterCodesInXML = zoneHelperResponses.getZoneMasterCodes();
            Set applicableZoneMasters = Set::difference(_routingZoneMasterCodes, zoneMasterCodesInXML);

            if (applicableZoneMasters.elements() > 0)
            {
                TMSZoneMaster zoneMaster;

                //Retrieve all zone masters in the db where not in XML
                while select ZoneMasterCode, ZoneEngineCode from zoneMaster
                where zoneMaster.ZoneType == _zoneType
                {
                    if (applicableZoneMasters.in(zoneMaster.ZoneMasterCode))
                    {
                        TMSFwkZoneHelperResponse zoneHelperResponse = TMSFwkZoneHelper::retrieveZone(
                            _transactionFacade,
                            _pickup,
                            _dropOff,
                            zoneMaster.ZoneEngineCode,
                            zoneMaster.ZoneMasterCode,
                            _zoneType,
                            _ratingDto);

                        if (zoneHelperResponse.parmZone() != '')
                        {
                            zoneHelperResponses.addEnd(zoneHelperResponse);
                            TMSFwkZoneHelper::addZone(_dropOff, zoneHelperResponse);
                        }
                    }
                }
            }
        }
        else
        {
            zoneHelperResponses = TMSFwkZoneHelperResponseList::construct();
        }

        zoneHelperResponses.addEnd(TMSFwkZoneHelperResponse::construct());

        return zoneHelperResponses;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createResponseListFromZoneElements</Name>
				<Source><![CDATA[
    private static TMSFwkZoneHelperResponseList createResponseListFromZoneElements(XElementList _elementList)
    {
        TMSFwkZoneHelperResponseList result = TMSFwkZoneHelperResponseList::construct();
        XElementListEnumerator elementEnumerator = _elementList.GetListEnumerator();

        while (elementEnumerator.MoveNext())
        {
            result.addEnd(TMSFwkZoneHelper::createResponseFromZoneElement(elementEnumerator.Current()));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createResponseFromZoneElement</Name>
				<Source><![CDATA[
    private static TMSFwkZoneHelperResponse createResponseFromZoneElement(XElement _zoneElement)
    {
        TMSFwkZoneHelperResponse result = TMSFwkZoneHelperResponse::construct();

        XElementList errorsElements = new XElementList(_zoneElement.Descendants(ElementXmlConstants::Error));
        XElement errorElement = errorsElements.FirstOrDefault();

        if (errorElement != null)
        {
            ErrorDto errorDto = new ErrorDto();
            errorDto.Code = errorElement.RetrieveFirstInstanceDown(ElementXmlConstants::ErrorCode);
            errorDto.Description = errorElement.RetrieveFirstInstanceDown(ElementXmlConstants::ErrorDescription);
            result.parmErrorDto(errorDto);
        }

        result.parmZone(_zoneElement.GetString(ElementXmlConstants::Zone));
        result.parmZoneMasterCode(_zoneElement.GetString(ElementXmlConstants::ZoneMasterCode));

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveZoneSection</Name>
				<Source><![CDATA[
    private static XElement retrieveZoneSection(XElement _ratingEntity, XElement _dropOff, TMSZoneMaster _zoneMaster)
    {
        XElement result;

        if (_zoneMaster.ZoneType == TMSZoneType::Rating)
        {
            result = _ratingEntity;
        }
        else
        {
            result = _dropOff;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveZone</Name>
				<Source><![CDATA[
    private static TMSFwkZoneHelperResponse retrieveZone(
            TmsTransactionFacade    _transactionFacade,
            XElement                _pickup,
            XElement                _dropOff,
            TMSZoneEngineCode       _zoneEngineCode,
            TMSZoneMasterCode       _zoneMasterCode,
            TMSZoneType             _zoneType,
            RatingDto               _ratingDto)
    {
        TMSFwkZoneHelperResponse result;
        TMSFwkIZoneEngine zoneEngine = TMSFwkZoneEngineFactory::createZoneEngine(_zoneEngineCode);

        if (_zoneType == TMSZoneType::Rating)
        {
            result = zoneEngine.RetrieveRatingZone(_transactionFacade, _pickup, _dropOff, _zoneMasterCode, _ratingDto);
        }
        else
        {
            result = zoneEngine.RetrieveRoutingZone(_transactionFacade, _pickup, _dropOff, _zoneMasterCode);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addZone</Name>
				<Source><![CDATA[
    private static void addZone(XElement element, TMSFwkZoneHelperResponse zoneHelperResponse)
    {
        XElement zone = new XElement(GenericNodeXmlConstants::ZoneMaster,
                                    new XElement(ElementXmlConstants::ZoneMasterCode, zoneHelperResponse.parmZoneMasterCode()));

        if (System.String::IsNullOrEmpty(zoneHelperResponse.parmErrorDto().Code) && zoneHelperResponse.parmZone() != '')
        {
            zone.Add(new XElement(ElementXmlConstants::Zone, zoneHelperResponse.parmZone()));
        }
        else
        {
            zone.AddError(zoneHelperResponse.parmErrorDto());
        }

        element.GenerateElementForXPath(GenericNodeXmlConstants::ZoneMasters).Add(zone);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>