<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchPurchaseOrderDP_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(PurchPurchaseOrderDP))]
public final class PurchPurchaseOrderDP_ApplicationSuite_Extension
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an order line.
    /// </summary>
    /// <param name = "_purchaseOrderHeader">
    /// A <c>PurchPurchaseOrderHeader</c> record which is the order header.
    /// </param>
    /// <param name = "_highlightUpdated">
    /// A Boolean describing whether an updated order line must be highlighted.
    /// </param>
    /// <param name = "_orderLineSelection">
    /// A <c>PurchPurchaseOrderDPOrderLineQuerySelection</c> object which the order line should be created for.
    /// </param>
    /// <returns>
    /// The initialized <c>PurchPurchaseOrderTmp</c> order line record.
    /// </returns>
    protected PurchPurchaseOrderTmp initializeOrderLine(
        PurchPurchaseOrderHeader _purchaseOrderHeader,
        boolean _highlightUpdated,
        PurchPurchaseOrderDPOrderLineQuerySelection _orderLineSelection)
    {
        PurchPurchaseOrderTmp purchPurchaseOrderTmp = next initializeOrderLine(
            _purchaseOrderHeader,
            _highlightUpdated,
            _orderLineSelection);

        if (!this.isPurchConfirmationRequestJournal()
            && conFind(FreeNotesOnDocumentsConstants::DocuOnFormularAllLine, this.parmVendFormletterDocument().DocuOnPurchOrder))
        {
            PurchLine purchOrderPurchLine;
            PurchLineAllVersions purchLineAllVersions = _orderLineSelection.parmPurchLineAllVersions();

            if (purchLineAllVersions.IsArchived)
            {
                purchOrderPurchLine = PurchLine::findInventTransId(purchLineAllVersions.InventTransId);
            }
            else
            {
                purchOrderPurchLine.RecId = purchLineAllVersions.RecId1;
            }

            DocuRefSearch purchOrderDocuRefSearch = DocuRefSearch::newTypeIdAndRestriction(
                purchOrderPurchLine,
                this.parmVendFormletterDocument().DocuTypePurchOrder,
                DocuRestriction::External);

            if (purchOrderDocuRefSearch)
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00041, funcName());
            }

            purchPurchaseOrderTmp.NotesTrans = Docu::concatDocuRefNotes(purchOrderDocuRefSearch);
        }

        return purchPurchaseOrderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTaxLine</Name>
				<Source><![CDATA[
    protected PurchPurchaseOrderTmp initializeTaxLine(
        PurchPurchaseOrderHeader _purchaseOrderHeader,
        TaxSpec _taxSpec,
        boolean _printTaxAmountMST)
    {
        PurchPurchaseOrderTmp purchPurchaseOrderTmp = next initializeTaxLine(_purchaseOrderHeader, _taxSpec, _printTaxAmountMST);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]) && _taxSpec)
        {
            if (!_taxSpec.taxCode())
            {
                purchPurchaseOrderTmp.TaxCode = _taxSpec.reportingTaxCode();
            }

            if (!_taxSpec.taxWriteCode())
            {
                purchPurchaseOrderTmp.PrintCode = _taxSpec.reportingTaxWriteCode();
            }
        }

        return purchPurchaseOrderTmp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>