<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMJournalTransFilter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <s>CFMJournalTransFilter</s> is a class for represent filter records logic.
/// </summary>
public class CFMJournalTransFilter
{
    CFMJournalType journalType;
    boolean existsPaymAccountFilter;
    FromDate dateFrom;
    ToDate dateTo;
    RefRecId sourceRecId;
    CFMJournalSetupSourceType sourceType;
    Map paymAccChoosen;
    Set sourceDataAreaIds;
    CFMJournalIncludeOverduePayment includeOverduePayment;
    NoYes transLogOutdated;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructFromJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>CFMJournalTransFilter</c> class.
    /// </summary>
    /// <param name="_journalTable">
    /// The table buffer of <c>CFMJournalTable</c> type.
    /// </param>
    /// <returns>
    /// A new instance of the <c>CFMJournalTransFilter</c> class.
    /// </returns>
    public static CFMJournalTransFilter constructFromJournal(CFMJournalTable _journalTable)
    {
        CFMJournalTransFilter filter = new CFMJournalTransFilter();

        filter.initialize(_journalTable);

        return filter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cfmAccTypeToLedgerJournalACType</Name>
				<Source><![CDATA[
    private LedgerJournalACType cfmAccTypeToLedgerJournalACType(CFMPaymentAccountType _type)
    {
        return _type == CFMPaymentAccountType::Bank ? LedgerJournalACType::Bank : LedgerJournalACType::RCash;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPaymentAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether an account meets the conditions.
    /// </summary>
    /// <param name="_accountType">
    /// Type of account for check.
    /// </param>
    /// <param name="_accountNum">
    /// Account for check.
    /// </param>
    /// <returns>
    /// true if specified account meets condition, otherwise false.
    /// </returns>
    public boolean checkPaymentAccount(CFMPaymentAccountType _accountType, AccountNum _accountNum)
    {
        boolean ret;

        if (existsPaymAccountFilter)
        {
            Container key = [_accountType, _accountNum];

            if (paymAccChoosen.exists(key))
            {
                ret = paymAccChoosen.lookup(key);
            }
            else
            {
                CFMJournalPaymAccountList paymAccounts;

                select firstOnly RecId from paymAccounts
                    where paymAccounts.SourceRecId == sourceRecId
                       && paymAccounts.SetupSourceType == sourceType
                       && paymAccounts.AccountNum == _accountNum
                       && paymAccounts.AccountType == _accountType;

                ret = paymAccounts.RecId == 0 ? false : true;

                paymAccChoosen.insert(key, ret);
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiallizes internal data from <c>CFMJournalTable</c> cursor
    /// </summary>
    /// <param name="_journalTable">
    /// The table buffer of <c>CFMJournalTable</c> type
    /// </param>
    protected void initialize(CFMJournalTable _journalTable)
    {
        dateFrom = _journalTable.DateFrom;
        dateTo = _journalTable.DateTo;

        journalType = _journalTable.JournalType;
        includeOverduePayment = _journalTable.IncludeOverduePayment;

        sourceRecId = _journalTable.RecId;
        sourceType = CFMJournalName::tableIdToSourceType(_journalTable.TableId);

        sourceDataAreaIds = new Set(Types::String);

        CFMJournalOrgUnitList orgUnitList;

        while select DataArea from orgUnitList
            where orgUnitList.SetupSourceType == sourceType
               && orgUnitList.SourceRecId == sourceRecId
        {
            sourceDataAreaIds.add(orgUnitList.DataArea);
        }
        CFMJournalPaymAccountList paymAccountList;
        
        select firstOnly RecId from paymAccountList
            where paymAccountList.SetupSourceType == sourceType
               && paymAccountList.SourceRecId     == sourceRecId;

        existsPaymAccountFilter = paymAccountList.RecId;

        if (existsPaymAccountFilter)
        {
            paymAccChoosen = new Map(Types::Container, Types::Integer);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs a new instance of the <c>CFMJournalTransSaver</c> class.
    /// </summary>
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccountTypeFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the  restrictions by payment accounts to records which contains references to account in dimension dynamic accounts.
    /// </summary>
    /// <param name="_qbds">
    /// The <c>QueryBuildDataSource</c> to apply the filter.
    /// </param>
    /// <param name="_fieldIdAccountType">
    /// The id of field to link.
    /// </param>
    /// <param name="_type">
    /// The payment account type to set filter.
    /// </param>
    public void setAccountTypeFilter(QueryBuildDatasource _qbds, FieldId _fieldIdAccountType, CFMPaymentAccountType _type)
    {
        findOrCreateRange_W(_qbds, _fieldIdAccountType, queryValue(_type));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCashFlowDirectionFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies filter by value of <c>CFMCashFlowDirection</c> to select the only direction of cash flow.
    /// </summary>
    /// <param name="_qbds">
    /// The <c>QueryBuildDataSource</c> to apply the range values to.
    /// </param>
    /// <param name="_fieldId">
    /// The id of field to apply the range to.
    /// </param>
    /// <param name="_cashFlowDirection">
    /// Value direction to apply.
    /// </param>
    public void setCashFlowDirectionFilter(QueryBuildDatasource _qbds, FieldId _fieldId, CFMCashFlowDirection _cashFlowDirection)
    {
        findOrCreateRange_W(_qbds, _fieldId, queryValue(_cashFlowDirection));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCashFlowDirectionFilterAmountSign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies range values to select the only direction of cash flow.
    /// </summary>
    /// <param name="_qbds">
    /// The <c>QueryBuildDataSource</c> to apply the range values to.
    /// </param>
    /// <param name="_fieldId">
    /// The id of field to apply the range to.
    /// </param>
    /// <param name="_cashFlowDirection">
    /// Value of cash flow direction to select.
    /// </param>
    /// <param name="_isInflowPositive">
    /// The flag that shows whether the positive value of amount in source data means inflow Cash flow direction in the Payment schedule journal.
    /// </param>
    public void setCashFlowDirectionFilterAmountSign(QueryBuildDatasource _qbds, FieldId _fieldId, CFMCashFlowDirection _cashFlowDirection, boolean _isInflowPositive)
    {
        if ((_cashFlowDirection == CFMCashFlowDirection::Inflow && _isInflowPositive) ||
            (_cashFlowDirection == CFMCashFlowDirection::Outflow && !_isInflowPositive))
        {
            findOrCreateRange_W(_qbds, _fieldId, queryValue('>0'));
        }
        else
        {
            findOrCreateRange_W(_qbds, _fieldId, queryValue('<0'));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDateInterval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies date range to select.
    /// </summary>
    /// <param name="_qbds">
    /// The <c>QueryBuildDataSource</c> to apply the range values to.
    /// </param>
    /// <param name="_fieldId">
    /// The id of field to apply the range to.
    /// </param>
    /// <param name="_useOverDuePayment">
    /// The flag that shows whether OverduePayment parameter shold be used.
    /// </param>
    public void setDateInterval(QueryBuildDatasource _qbds, FieldId _fieldId, boolean _useOverDuePayment = true)
    {
        findOrCreateRange_W(_qbds, _fieldId, SysQuery::range(_useOverDuePayment && includeOverduePayment ? dateNull() : dateFrom, dateTo));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDateIntervalOpenBankCashJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies date range to select opening balance records.
    /// </summary>
    /// <param name="_qbds">
    /// The <c>QueryBuildDataSource</c> to apply the range values to.
    /// </param>
    /// <param name="_fieldId">
    /// The id of field to apply the range to.
    /// </param>
    public void setDateIntervalOpenBankCashJour(QueryBuildDatasource _qbds, FieldId _fieldId)
    {
        findOrCreateRange_W(_qbds, _fieldId, SysQuery::range(dateNull(), dateTo));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDateIntervalOpeningBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies date range to select opening balance records.
    /// </summary>
    /// <param name="_qbds">
    /// The <c>QueryBuildDataSource</c> to apply the range values to.
    /// </param>
    /// <param name="_fieldId">
    /// The id of field to apply the range to.
    /// </param>
    public void setDateIntervalOpeningBalance(QueryBuildDatasource _qbds, FieldId _fieldId)
    {
        findOrCreateRange_W(_qbds, _fieldId, SysQuery::range(dateNull(), dateFrom - 1));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNotPaymentRequestFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the  restrictions to retrieve records without relation with payment request
    /// </summary>
    /// <param name="_qbds">
    /// The <c>QueryBuildDataSource</c> to apply the filter.
    /// </param>
    /// <param name="_fieldId">
    /// The id of field to link.
    /// </param>
    /// <param name="_sourceType">
    /// Source type of payment request records.
    /// </param>
    public void setNotPaymentRequestFilter(QueryBuildDatasource _qbds, FieldId _fieldId, CFMPaymentRequestSourceType _sourceType)
    {
        QueryBuildDataSource paymentRequestFilter = _qbds.addDataSource(tableNum(CFMPaymentRequestTable));

        paymentRequestFilter.relations(false);
        paymentRequestFilter.addLink(_fieldId, fieldNum(CFMPaymentRequestTable, SourceRefRecId));
        findOrCreateRange_W(paymentRequestFilter, fieldNum(CFMPaymentRequestTable, SourceType), queryValue(_sourceType));
        paymentRequestFilter.joinMode(JoinMode::NoExistsJoin);
        paymentRequestFilter.fetchMode(QueryFetchMode::One2One);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOnHoldFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies OnHold range to select.
    /// </summary>
    /// <param name="_qbds">
    /// The <c>QueryBuildDataSource</c> to apply the range values to.
    /// </param>
    /// <param name="_fieldId">
    /// The id of field to apply the range to.
    /// </param>
    public void setOnHoldFilter(QueryBuildDatasource _qbds, FieldId _fieldId)
    {
        findOrCreateRange_W(_qbds, _fieldId, queryValue(NoYes::No));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOrgUnitFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the restrictions by organization init list to retrieve records.
    /// </summary>
    /// <param name="_qbds">
    /// The <c>QueryBuildDataSource</c> to apply the filter.
    /// </param>
    /// <param name="_fieldId">
    /// The id of field to link.
    /// </param>
    public void setOrgUnitFilter(QueryBuildDatasource _qbds, FieldId _fieldId)
    {
        QueryBuildDataSource orgUnitQBDS = _qbds.addDataSource(tableNum(CFMJournalOrgUnitList));

        orgUnitQBDS.addLink(_fieldId, fieldNum(CFMJournalOrgUnitList, DataArea));
        orgUnitQBDS.addSelectionField(fieldNum(CFMJournalOrgUnitList, TableId));
        orgUnitQBDS.joinMode(JoinMode::InnerJoin);
        orgUnitQBDS.fetchMode(QueryFetchMode::One2One);

        findOrCreateRange_W(orgUnitQBDS, fieldNum(CFMJournalOrgUnitList, SourceRecId), queryValue(sourceRecId));
        findOrCreateRange_W(orgUnitQBDS, fieldNum(CFMJournalOrgUnitList, SetupSourceType), queryValue(sourceType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOrgUnitFilterCrossCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the restrictions by organization unit list to query.
    /// </summary>
    /// <param name="_query">
    /// The <c>Query</c> to apply the filter.
    /// </param>
    public void setOrgUnitFilterCrossCompany(Query _query)
    {
        SetEnumerator se = sourceDataAreaIds.getEnumerator();

        _query.allowCrossCompany(true);

        while (se.moveNext())
        {
            _query.addCompanyRange(queryValue(se.current()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymentFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the restrictions by payment accounts.
    /// </summary>
    /// <param name="_qbds">
    /// The <c>QueryBuildDataSource</c> to apply the filter.
    /// </param>
    /// <param name="_fieldIdAccNum">
    /// The id of field to link.
    /// </param>
    /// <param name="_fieldIdType">
    /// The id of field to link by account type.
    /// </param>
    public void setPaymentFilter(QueryBuildDatasource _qbds, FieldId _fieldIdAccNum, FieldId _fieldIdType)
    {
        QueryBuildDataSource paymentSourceQBDS = _qbds.addDataSource(tableNum(CFMJournalPaymAccountList));

        paymentSourceQBDS.addLink(_fieldIdAccNum, fieldNum(CFMJournalPaymAccountList, AccountNum));
        paymentSourceQBDS.fetchMode(QueryFetchMode::One2One);

        if (_fieldIdType)
        {
            paymentSourceQBDS.addLink(_fieldIdType, fieldNum(CFMJournalPaymAccountList, AccountType));
        }

        paymentSourceQBDS.addSelectionField(fieldNum(CFMJournalPaymAccountList, TableId));
        paymentSourceQBDS.joinMode(JoinMode::InnerJoin);
        paymentSourceQBDS.fetchMode(QueryFetchMode::One2One);

        findOrCreateRange_W(paymentSourceQBDS, fieldNum(CFMJournalPaymAccountList, SourceRecId), queryValue(sourceRecId));
        findOrCreateRange_W(paymentSourceQBDS, fieldNum(CFMJournalPaymAccountList, SetupSourceType), queryValue(sourceType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHierarchyTypeByAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>DimensionHierarchyType</c> field for the specified account type.
    /// </summary>
    /// <param name="_accountType">
    /// The account type from which to retrieve a <c>DimensionHierarchyType</c>.
    /// </param>
    /// <param name="_enumType">
    /// The type of the enumeration that specifies the account type.
    /// </param>
    /// <param name="_custVend">
    /// A value that indicates whether this is a customer or vendor module.
    /// </param>
    /// <returns>
    /// A system-generated dimension hierarchy for the specified account type.
    /// </returns>
    public static DimensionHierarchyType getHierarchyTypeByAccountType(int _accountType, EnumId _enumType = enumNum(LedgerJournalACType), ModuleInventCustVend _custVend = ModuleInventCustVend::Cust)
    {
        DimensionHierarchyType ret;
        anytype accountTypeValue = _accountType;
        #ISOCountryRegionCodes

        switch (_enumType)
        {
            case enumNum(LedgerJournalACType):
                switch (accountTypeValue)
                {
                    case LedgerJournalACType::Bank:
                        ret = DimensionHierarchyType::BankAccount;
                        break;

                    case LedgerJournalACType::Cust:
                        ret = DimensionHierarchyType::Customer;
                        break;

                    case LedgerJournalACType::FixedAssets:
                        ret = DimensionHierarchyType::FixedAsset;
                        break;

                    case LedgerJournalACType::Ledger:
                        ret = DimensionHierarchyType::AccountStructure; // Used by dynamic accounts as a marker to mean account structure or default account
                        break;

                    case LedgerJournalACType::Project:
                        ret = DimensionHierarchyType::Project;
                        break;
                    case LedgerJournalACType::Vend:
                        ret = DimensionHierarchyType::Vendor;
                        break;
                    case LedgerJournalACType::FixedAssets_RU:
                        ret = DimensionHierarchyType::FixedAssets_RU;
                        break;

                    case LedgerJournalACType::RDeferrals:
                        ret = DimensionHierarchyType::RDeferrals;
                        break;

                    case LedgerJournalACType::RCash:
                        ret = DimensionHierarchyType::RCash;
                        break;

                    case LedgerJournalACType::Employee_RU:
                        ret = DimensionHierarchyType::Employee_RU;
                        break;

                    // Should not get to here, as the enumeration was not expected to exist
                    default:
                        throw error(Error::wrongUseOfFunction(funcName()));
                }
                break;

            case enumNum(TrvPostMethod):
                switch (_accountType)
                {
                    case TrvPostMethod::Bank:
                        ret = DimensionHierarchyType::BankAccount;
                        break;

                    case TrvPostMethod::Employee:
                        ret = DimensionHierarchyType::Employee;
                        break;

                    case TrvPostMethod::None:
                    case TrvPostMethod::Ledger:
                        ret = DimensionHierarchyType::AccountStructure; // Used by dynamic accounts as a marker to mean account structure or default account
                        break;

                    case TrvPostMethod::Vendor:
                        ret = DimensionHierarchyType::Vendor;
                        break;
                    // Should not get to here, as the enumeration was not expected to exist
                    default:
                        throw error(Error::wrongUseOfFunction(funcName()));
                }
                break;

            case enumNum(ProjOffsetType):
                switch (_accountType)
                {
                    case ProjOffsetType::Bank:
                        ret = DimensionHierarchyType::BankAccount;
                        break;

                    case ProjOffsetType::Cust:
                        ret = DimensionHierarchyType::Customer;
                        break;

                    case ProjOffsetType::Ledger:
                        ret = DimensionHierarchyType::AccountStructure; // Used by dynamic accounts as a marker to mean account structure or default account
                        break;

                    case ProjOffsetType::Vend:
                        ret = DimensionHierarchyType::Vendor;
                        break;

                    // Should not get to here, as the enumeration was not expected to exist
                    default:
                        throw error(Error::wrongUseOfFunction(funcName()));
                }
                break;

            case enumNum(MarkupType):
                switch (_accountType)
                {
                    case MarkupType::CustVend:
                        switch (_custVend)
                        {
                            case ModuleInventCustVend::Cust:
                                ret = DimensionHierarchyType::Customer;
                                break;

                            case ModuleInventCustVend::Vend:
                                ret = DimensionHierarchyType::Vendor;
                                break;
                        }
                        break;
                    case MarkupType::Item:
                        ret = DimensionHierarchyType::Item;
                        break;

                    case MarkupType::LedgerAccount:
                        ret = DimensionHierarchyType::AccountStructure; // Used by dynamic accounts as a marker to mean account structure or default account
                        break;

                    // Should not get to here, as the enumeration was not expected to exist
                    default:
                        throw error(Error::wrongUseOfFunction(funcName()));
                }
                break;

            case enumNum(BankCodaLedgerJournalACType):
                switch (_accountType)
                {
                    case BankCodaLedgerJournalACType::Cust:
                        ret = DimensionHierarchyType::Customer;
                        break;

                    case BankCodaLedgerJournalACType::Ledger:
                        ret = DimensionHierarchyType::AccountStructure; // Used by dynamic accounts as a marker to mean account structure or default account
                        break;

                    case BankCodaLedgerJournalACType::Vend:
                        ret = DimensionHierarchyType::Vendor;
                        break;

                    case BankCodaLedgerJournalACType::None:
                        // The type BankCodaLedgerJournalACType::None should never be used with a value, so return 0
                        ret = DimensionHierarchyType::AccountStructure;
                        break;
                    // Should not get to here, as the enumeration was not expected to exist
                    default:
                        ret = CFMJournalTransFilter::extensionGetDimensionHierarchyTypeByBankCodaLedgerJournalACType(_accountType);
                        break;
                }
                break;

            case enumNum(LedgerJournalACTypeForPaymProposal):
                switch (_accountType)
                {
                    case LedgerJournalACTypeForPaymProposal::Bank:
                        ret = DimensionHierarchyType::BankAccount;
                        break;

                    case LedgerJournalACTypeForPaymProposal::Ledger:
                        ret = DimensionHierarchyType::AccountStructure; // Used by dynamic accounts as a marker to mean account structure or default account
                        break;

                    case LedgerJournalACTypeForPaymProposal::None:
                        // The type LedgerJournalACTypeForPaymProposal::None should never be used with a value, so return 0 
                        ret = 0;
                        break;

                    // Should not get to here, as the enumeration was not expected to exist
                    default:
                        throw error(Error::wrongUseOfFunction(funcName()));
                }
                break;

            case enumNum(RetailLedgerBank):
                if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
                {
                    RetailLedgerBank retailLedgerBank=_accountType;
                    switch (retailLedgerBank)
                    {
                        case RetailLedgerBank::Bank:
                            ret = DimensionHierarchyType::BankAccount;
                            break;

                        case RetailLedgerBank::Ledger:
                            ret = DimensionHierarchyType::AccountStructure; // Used by dynamic accounts as a marker to mean account structure or default account
                            break;

                        case RetailLedgerBank::RCash:
                            ret = DimensionHierarchyType::RCash;
                            break;

                        // Should not get to here, as the enumeration was not expected to exist
                        default:
                            throw error(Error::wrongUseOfFunction(funcName()));
                    }
                }
                break;

            case enumNum(TaxWithholdACType_IN):
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    switch (_accountType)
                    {
                        case TaxWithholdACType_IN::Cust:
                            ret = DimensionHierarchyType::Customer;
                            break;

                        case TaxWithholdACType_IN::Ledger:
                            ret = DimensionHierarchyType::AccountStructure; // Used by dynamic accounts as a marker to mean account structure or default account
                            break;

                        case TaxWithholdACType_IN::Vend:
                            ret = DimensionHierarchyType::Vendor;
                            break;
                        // Should not get to here, as the enumeration was not expected to exist
                        default:
                            throw error(Error::wrongUseOfFunction(funcName()));
                    }
                }
                break;

            case enumNum(TaxEngineTaxJournalAccountType):
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    switch (_accountType)
                    {
                        case TaxEngineTaxJournalAccountType::Ledger:
                        case TaxEngineTaxJournalAccountType::Tax:
                            ret = DimensionHierarchyType::AccountStructure; // Used by dynamic accounts as a marker to mean account structure or default account
                            break;

                        case TaxEngineTaxJournalAccountType::Cust:
                            ret = DimensionHierarchyType::Customer;
                            break;

                        case TaxEngineTaxJournalAccountType::Vend:
                            ret = DimensionHierarchyType::Vendor;
                            break;

                        case TaxEngineTaxJournalAccountType::Bank:
                            ret = DimensionHierarchyType::BankAccount;
                            break;
                        // Should not get to here, as the enumeration was not expected to exist
                        default:
                            throw error(Error::wrongUseOfFunction(funcName()));
                    }
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extensionGetDimensionHierarchyTypeByBankCodaLedgerJournalACType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the extension of dimension hierarchy according type field for account type.
    /// </summary>
    /// <param name = "_bankCodaLedgerJournalACType">
    /// The account type.
    /// </param>
    /// <returns>
    /// A system-generated dimension hierarchy for the specified account type.
    /// </returns>
    [Replaceable(true)]
    protected static DimensionHierarchyType extensionGetDimensionHierarchyTypeByBankCodaLedgerJournalACType(BankCodaLedgerJournalACType _bankCodaLedgerJournalACType)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymentFilterOnLedgerDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the restrictions by payment accounts to records which contains references to account in dimension dynamic accounts.
    /// </summary>
    /// <param name="_qbds">
    /// The <c>QueryBuildDataSource</c> to apply the filter.
    /// </param>
    /// <param name="_fieldIdLedgerDim">
    /// The id of field to link.
    /// </param>
    /// <param name="_type">
    /// The payment account type to set filter.
    /// </param>
    public void setPaymentFilterOnLedgerDim(QueryBuildDatasource _qbds, FieldId _fieldIdLedgerDim, CFMPaymentAccountType _type)
    {
        DimensionAttributeRecId dimAttr = DimensionAttribute::getAttributeByHierarchyType(CFMJournalTransFilter::getHierarchyTypeByAccountType(enum2int(this.cfmAccTypeToLedgerJournalACType(_type)))).RecId;

        QueryBuildDataSource dimAttrLevelValueViewQBDS = _qbds.addDataSource(tableNum(DimensionAttributeLevelValueView));
        dimAttrLevelValueViewQBDS.relations(false);
        dimAttrLevelValueViewQBDS.joinMode(JoinMode::ExistsJoin);
        dimAttrLevelValueViewQBDS.fetchMode(QueryFetchMode::One2One);
        dimAttrLevelValueViewQBDS.addLink(_fieldIdLedgerDim, fieldnum(DimensionAttributeLevelValueView, ValueCombinationRecId));

        findOrCreateRange_W(dimAttrLevelValueViewQBDS, fieldnum(DimensionAttributeLevelValueView, DimensionAttribute), queryValue(dimAttr));

        QueryBuildDataSource paymentSourceQBDS = dimAttrLevelValueViewQBDS.addDataSource(tableNum(CFMJournalPaymAccountList));
        paymentSourceQBDS.addLink(fieldnum(DimensionAttributeLevelValueView, DisplayValue), fieldNum(CFMJournalPaymAccountList, AccountNum));
        paymentSourceQBDS.fetchMode(QueryFetchMode::One2One);
        paymentSourceQBDS.joinMode(JoinMode::ExistsJoin);
        findOrCreateRange_W(paymentSourceQBDS, fieldNum(CFMJournalPaymAccountList, SourceRecId), queryValue(sourceRecId));
        findOrCreateRange_W(paymentSourceQBDS, fieldNum(CFMJournalPaymAccountList, SetupSourceType), queryValue(sourceType));
        findOrCreateRange_W(paymentSourceQBDS, fieldNum(CFMJournalPaymAccountList, AccountType), queryValue(_type));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymentFilterType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the restrictions by payment accounts to the cursors that does not contain account type fields.
    /// </summary>
    /// <param name="_qbds">
    /// The <c>QueryBuildDataSource</c> to apply the filter.
    /// </param>
    /// <param name="_fieldIdAccNum">
    /// The id of field to link.
    /// </param>
    /// <param name="_type">
    /// Type of account to filter.
    /// </param>
    public void setPaymentFilterType(QueryBuildDatasource _qbds, FieldId _fieldIdAccNum, CFMPaymentAccountType _type)
    {
        LedgerJournalACType ledgerJournalACType = _type == CFMPaymentAccountType::Bank ? LedgerJournalACType::Bank : LedgerJournalACType::RCash;

        QueryBuildDataSource paymentSourceQBDS = _qbds.addDataSource(tableNum(CFMJournalPaymAccountList));
        paymentSourceQBDS.addLink(_fieldIdAccNum, fieldNum(CFMJournalPaymAccountList, AccountNum));

        paymentSourceQBDS.joinMode(JoinMode::ExistsJoin);
        findOrCreateRange_W(paymentSourceQBDS, fieldNum(CFMJournalPaymAccountList, SourceRecId), queryValue(sourceRecId));
        findOrCreateRange_W(paymentSourceQBDS, fieldNum(CFMJournalPaymAccountList, SetupSourceType), queryValue(sourceType));
        findOrCreateRange_W(paymentSourceQBDS, fieldNum(CFMJournalPaymAccountList, AccountType), queryValue(ledgerJournalACType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymentReqJourOutdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies range values to select the only actual state of journal.
    /// </summary>
    /// <param name="_qbds">
    /// The <c>QueryBuildDataSource</c> to apply the range values to.
    /// </param>
    /// <param name="_fieldId">
    /// The id of field to apply the range to.
    /// </param>
    public void setPaymentReqJourOutdated(QueryBuildDatasource _qbds, FieldId _fieldId)
    {
        if (_qbds.table() == tableNum(CFMJournalTransLog) && _fieldId == fieldNum(CFMJournalTransLog, Outdated))
        {
            findOrCreateRange_W(_qbds, _fieldId, queryValue(translogOutdated));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymentReqNotInJourFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies range values to select the only type of journal in query.
    /// </summary>
    /// <param name="_qbds">
    /// The <c>QueryBuildDataSource</c> to apply the range values to.
    /// </param>
    /// <param name="_fieldId">
    /// The id of field to apply the range to.
    /// </param>
    public void setPaymentReqNotInJourFilter(QueryBuildDatasource _qbds, FieldId _fieldId)
    {
        if (_qbds.table() == tableNum(CFMJournalTransLog) && _fieldId == fieldNum(CFMJournalTransLog, JournalType))
        {
            findOrCreateRange_W(_qbds, _fieldId, queryValue(journalType));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymentRequestStatusFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the restrictions by status of Payment requests.
    /// </summary>
    /// <param name="_qbds">
    /// The <c>QueryBuildDataSource</c> to apply the filter.
    /// </param>
    /// <param name="_fieldId">
    /// The id of field to link.
    /// </param>
    public void setPaymentRequestStatusFilter(QueryBuildDatasource _qbds, FieldId _fieldId)
    {
        if (journalType == CFMJournalType::Fact)
        {
            _qbds.addRange(_fieldId).value(queryValue(CFMPaymentRequestStatus::Confirmed));
            _qbds.addRange(_fieldId).value(queryValue(CFMPaymentRequestStatus::Scheduled));
        }
        else
        {
            _qbds.addRange(_fieldId).value(queryValue(CFMPaymentRequestStatus::Confirmed));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransLogOutdated</Name>
				<Source><![CDATA[
    public void setTransLogOutdated(NoYes _translogOutdated)
    {
        translogOutdated = _translogOutdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkflowStatusFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies Workflow status range to select.
    /// </summary>
    /// <param name="_qbds">
    /// The <c>QueryBuildDataSource</c> to apply the range values to.
    /// </param>
    /// <param name="_fieldId">
    /// The id of field to apply the range to.
    /// </param>
    public void setWorkflowStatusFilter(QueryBuildDatasource _qbds, FieldId _fieldId)
    {
        if (journalType == CFMJournalType::Fact)
        {
            _qbds.addRange(_fieldId).value(queryValue(CFMPaymentRequestWorkflowStatus::None));
            _qbds.addRange(_fieldId).value(queryValue(CFMPaymentRequestWorkflowStatus::Approved));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>