<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PublicSectorUtils</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PublicSectorUtils</c> class is the utility class for the public sector.
/// </summary>
public class PublicSectorUtils
{
    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isCustBillingClassificationEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the public sector customer billing classification is enabled.
    /// </summary>
    /// <returns>
    /// true if customer billing classification for free text invoices is enabled; otherwise, false.
    /// </returns>
    public static boolean isCustBillingClassificationEnabled()
    {
        return  isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && CustParameters::find().CustUseBillingClassification_PSN == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFrenchRegulatoryEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the French regulatory features are enabled.
    /// </summary>
    /// <returns>
    /// true if the French regulatory features are enabled; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The French regulatory features are public sector only features.  This method is used by the French regulatory features
    /// to determine if the system is configured to enable French regulatory functionality.  In order for French Regulatory to be enabled
    /// The <c>PurchFrenchRegulatory_PSN</c> configuration key must be enabled and the <c>IsFrenchRegulatoryEnabled</c> field on SystemParameters
    /// must be set to yes.
    /// </remarks>
    public static boolean isFrenchRegulatoryEnabled()
    {
        return  BudgetParameters::find().IsFrenchRegulatoryEnabled == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLedgerYearEndClosingEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a Boolean value that indicates whether the closing and opening transactions year end process
    /// for general ledger is enabled in public sector.
    /// </summary>
    /// <returns>
    /// true if the closing and opening transactions process for general ledger is enabled in public
    /// sector; otherwise, false.
    /// </returns>
    public static boolean isLedgerYearEndClosingEnabled()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            return LedgerParameters::find().LedgerYearEndClosingEnabled_PSN;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLegalEntityInSupportedCountryRegion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the Legal Entrity is in Country/Region supported by Public Sector.
    /// </summary>
    /// <returns>
    /// True if the Legal Entrity is in Country/Region supported by Public Sector. Otherwise, False.
    /// </returns>
    public static boolean isLegalEntityInSupportedCountryRegion()
    {
        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoUS]) ||
            SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCA])    ||
            SysCountryRegionCode::isLegalEntityInCountryRegion([#isoFR])    ||
            SysCountryRegionCode::isLegalEntityInCountryRegion([#isoGB]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPurchYearEndEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the public sector purchase order year end process is enabled.
    /// </summary>
    /// <returns>
    /// true if the year end process for purchase order is enabled; otherwise, false.
    /// </returns>
    public static boolean isPurchYearEndEnabled()
    {
        return  isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && LedgerParameters::find().PurchYearEndEnabled_PSN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>arePostingDefinitionsEnabledForPubSect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines a Boolean value that indicates whether Posting Definitions are enabled
    /// for Public Sector specifically.
    /// </summary>
    /// <returns>
    /// true if Posting Definitions are enabled for Public Sector; otherwise, false.
    /// </returns>
    public static boolean arePostingDefinitionsEnabledForPubSect()
    {
        return isConfigurationkeyEnabled(configurationKeyNum(PublicSector))
                && LedgerParameters::find().JournalizingDefinitionEnableValue == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBudgetReservationEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the budget reservation feature is enabled.
    /// </summary>
    /// <returns>
    /// true if the budget reservation feature is enabled; otherwise, false.
    /// </returns>
    public static boolean isBudgetReservationEnabled()
    {
        return BudgetParameters::find().IsBudgetReservationEnabled == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SysPolicyRuleTypeListViewItemAdding</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler that subscribes to the SysPolicyRuleTypeListviewItemAdding delegate. The purpose
    /// is to determine if the item should be allowed to be added to the listview. This handler checks
    /// to see if the item is a particular French regulatory feature, and if so, will only allow the item
    /// to be added if the French regulatory features are enabled through parameters.
    /// </summary>
    /// <param name = "policyRuleTypeEnum"></param>
    /// <param name = "_result"></param>
    [SubscribesTo(formStr(SysPolicy), delegateStr(SysPolicy, ruleTypeListViewItemAdding))]
    public static void SysPolicyRuleTypeListViewItemAdding(SysPolicyRuleTypeEnum policyRuleTypeEnum, EventHandlerResult _result)
    {
        if (policyRuleTypeEnum == SysPolicyRuleTypeEnum::PurchThresholdPolicyRule_PSN && !PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            // no logical AND required here, since false will always "win"
            _result.booleanResult(false);
        }
        else
        {
            // the result needs to take any previous result for this event into account, so the default
            // value should be a logical AND of the previous result with TRUE
            _result.booleanResult(_result.booleanResult() && true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSystemDateWithUserTimeZoneOffset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the date value based on the user time zone.
    /// </summary>
    /// <returns>
    /// The system date translated from the user's time zone.
    /// </returns>
    public static date getSystemDateWithUserTimeZoneOffset()
    {
        return DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertFundClassToFundClassAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a <c>FundClassValue</c> to a <c>FundClassValueAll</c>
    /// </summary>
    /// <param name = "_fundClass"></param>
    /// <returns>The correct <c>FundClassValueAll</c> enum value.</returns>
    [Hookable(false)]
    public static final FundClassValueAll convertFundClassToFundClassAll(FundClassValue _fundClass)
    {
        FundClassValueAll fundClassAll;
        switch (_fundClass)
        {
            case FundClassValue::Memo:
                fundClassAll = FundClassValueAll::Memo;
                break;
            case FundClassValue::Fiduciary:
                fundClassAll = FundClassValueAll::Fiduciary;
                break;
            case FundClassValue::Governmental:
                fundClassAll = FundClassValueAll::Governmental;
                break;
            case FundClassValue::Proprietary:
                fundClassAll = FundClassValueAll::Proprietary;
                break;
            default:
                fundClassAll = FundClassValueAll::All;
                break;
        }

        return fundClassAll;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>