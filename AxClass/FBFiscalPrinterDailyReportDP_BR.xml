<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBFiscalPrinterDailyReportDP_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FBFiscalPrinterDailyReportDP_BR</c> class implements the data provider for the <c>FBFiscalPrinterDailyReport_BR</c> report.
/// </summary>
[SRSReportParameterAttribute(classStr(FBFiscalPrinterDailyReportContract_BR))]
public class FBFiscalPrinterDailyReportDP_BR extends SRSReportDataProviderBase
{
    #RetailZReportTotalizers_BR

    TmpFBFiscalPrinterDailyReport_BR tmpFiscalPrinterDailyReport;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query to retrieve data filtered by contract parameters.
    /// </summary>
    /// <returns>
    /// The query return to retrieve report data.
    /// </returns>
    protected Query buildQuery()
    {
        Query                                   query;
        QueryBuildDataSource                    qbds;
        FBFiscalPrinterDailyReportContract_BR   contract = this.parmDataContract() as FBFiscalPrinterDailyReportContract_BR;
        query = new Query();
        query.allowCrossCompany(true);

        // FBBookingPeriodFiscalDocument_BR
        qbds = query.addDataSource(tableNum(FBBookingPeriodFiscalDocument_BR));
        qbds.addRange(fieldNum(FBBookingPeriodFiscalDocument_BR, FBBookingPeriod_BR)).value(SysQuery::value(contract.parmFBBookingPeriodRecId()));

        // RetailZReport_BR
        qbds = qbds.addDataSource(tableNum(RetailZReport_BR));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.relations(true);
        qbds.addRange(fieldNum(RetailZReport_BR, AccountingDate)).value(SysQuery::range(contract.parmFromDate(), contract.parmToDate()));
        qbds.addOrderByField(fieldNum(RetailZReport_BR, AccountingDate));
        qbds.addOrderByField(fieldNum(RetailZReport_BR, FiscalPrinterSerialNumber));

        // RetailZReportTotalizer_BR
        qbds = qbds.addDataSource(tableNum(RetailZReportTotalizer_BR));
        qbds.joinMode(JoinMode::OuterJoin);
        qbds.addLink(fieldNum(RetailZReport_BR, ZReportNumber), fieldNum(RetailZReportTotalizer_BR, ZReportNumber));
        qbds.addLink(fieldNum(RetailZReport_BR, FiscalPrinterSerialNumber), fieldNum(RetailZReportTotalizer_BR, FiscalPrinterSerialNumber));
        qbds.addLink(fieldNum(RetailZReport_BR, AdditionalFiscalMemoryIndex), fieldNum(RetailZReportTotalizer_BR, AdditionalFiscalMemoryIndex));
        qbds.addRange(fieldNum(RetailZReportTotalizer_BR, TotalizerAmount)).value   ('> 0');
        // Select totalizers that are associated with an ICMS debit operation
        qbds.addRange(fieldNum(RetailZReportTotalizer_BR, TotalizerName)).value     (
            strFmt('((%1.%2 LIKE "*%3*") && (%1.%2 != "%4") && (%1.%2 != "%5") && (%1.%2 != "%6"))',
                qbds.name(),
                fieldStr(RetailZReportTotalizer_BR, TotalizerName),
                #ICMSTotalizerCharacter,
                #ICMSCancelTotalizerName,
                #ICMSSurchargeTotalizerName,
                #ICMSDiscountTotalizerName));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastFD02Number</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recovers the number of the last fiscal document model 02 associated to an accounting date.
    /// The higher fiscal document number is not necessarily associated to the last fiscal document model 02.
    /// It is necessary to take into account the fiscal document series.
    /// </summary>
    /// <param name="accountingDate">
    /// A value of accounting date referring to the fiscal document model 02 that is being recovered.
    /// </param>
    /// <param name="storeId">
    /// A value of store id referring to the fiscal document model 02 that is being recovered.
    /// </param>
    /// <param name="terminalId">
    /// A value of terminal id referring to the fiscal document model 02 that is being recovered.
    /// </param>
    /// <param name="series">
    /// The series value of the last fiscal document 02 associated to an accounting date.
    /// </param>
    /// <returns>
    /// The number of the last fiscal document model 02 associated to an accounting date.
    /// </returns>
    private FiscalDocumentNumber_BR getLastFD02Number(TransDate accountingDate, RetailStoreIdEx2 storeId, RetailTerminalId terminalId, FiscalDocumentSeries_BR series)
    {
        RetailFiscalDocumentModel2_BR retailFiscalDocumentModel2;

        select maxof(FiscalDocumentNumber) from retailFiscalDocumentModel2
            where   retailFiscalDocumentModel2.FiscalDocumentDate   == accountingDate
                &&  retailFiscalDocumentModel2.FiscalDocumentSeries == series
                &&  retailFiscalDocumentModel2.StoreId              == storeId
                &&  retailFiscalDocumentModel2.TerminalId           == terminalId;

        return retailFiscalDocumentModel2.FiscalDocumentNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastFD02Series</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recovers the last fiscal document model 02 series of an accounting date.
    /// </summary>
    /// <param name="accountingDate">
    /// A value of accounting date referring to the fiscal document model 02 that is being recovered.
    /// </param>
    /// <param name="storeId">
    /// A value of store id referring to the fiscal document model 02 that is being recovered.
    /// </param>
    /// <param name="terminalId">
    /// A value of terminal id referring to the fiscal document model 02 that is being recovered.
    /// </param>
    /// <returns>
    /// Fiscal document series of the last fiscal document of an accounting date.
    /// </returns>
    private FiscalDocumentSeries_BR getLastFD02Series(TransDate accountingDate, RetailStoreIdEx2 storeId, RetailTerminalId terminalId)
    {
        RetailFiscalDocumentModel2_BR retailFiscalDocumentModel2;

        select maxof(FiscalDocumentSeries) from retailFiscalDocumentModel2
            where   retailFiscalDocumentModel2.FiscalDocumentDate   == accountingDate
                &&  retailFiscalDocumentModel2.StoreId              == storeId
                &&  retailFiscalDocumentModel2.TerminalId           == terminalId;

        return retailFiscalDocumentModel2.FiscalDocumentSeries;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastFiscalPrinterDailyReportNumber</Name>
				<Source><![CDATA[
        private PositiveNumber getLastFiscalPrinterDailyReportNumber(TransDate _accountingDate, FBBookingPeriodRecId_BR _fbBookingPeriodId)
    {
        FBFiscalPrinterDailyReport_BR       fbFiscalPrinterDailyReport;

        select Number from fbFiscalPrinterDailyReport
            where   fbFiscalPrinterDailyReport.AccountingDate     == _accountingDate &&
                    fbFiscalPrinterDailyReport.FBBookingPeriod_BR == _fbBookingPeriodId;

        return fbFiscalPrinterDailyReport.Number;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxValue</Name>
				<Source><![CDATA[
        private real getTaxValue(RetailTotalizerName_BR totalizerName)
    {
        str taxStrValue = subStr(totalizerName, 4, 99);
        int taxIntValue = str2int(taxStrValue);

        return taxIntValue / 100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpFiscalPrinterDailyReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>FBTmpEcfDailyOperationsReport_BR</c> table.
    /// </summary>
    /// <returns>
    /// The <c>FBTmpEcfDailyOperationsReport_BR</c>
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(TmpFBFiscalPrinterDailyReport_BR))]
    public TmpFBFiscalPrinterDailyReport_BR getTmpFiscalPrinterDailyReport()
    {
        select tmpFiscalPrinterDailyReport
        order by tmpFiscalPrinterDailyReport.AccountingDate;

        return tmpFiscalPrinterDailyReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the temporary table associated with the report.
    /// </summary>
    public void processReport()
    {
        Query       query;
        QueryRun    queryRun;

        RetailZReport_BR                        retailZReport;
        RetailZReportTotalizer_BR               retailZReportTotalizer;
        FiscalDocumentSeries_BR                 lastFD02Series;
        RetailFiscalPrinterSerialNumber_BR      lastFiscalPrinterSerialNumber;
        TransDate                               lastAccountingDate;
        PositiveNumber                          lastFiscalPrinterDailyReportNumber;
        FBFiscalPrinterDailyReportContract_BR   contract = this.parmDataContract() as FBFiscalPrinterDailyReportContract_BR;

        query = this.buildQuery();
        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            retailZReport                   = queryRun.get(tableNum(RetailZReport_BR));
            retailZReportTotalizer          = queryRun.get(tableNum(RetailZReportTotalizer_BR));

            tmpFiscalPrinterDailyReport.AccountingDate               = retailZReport.AccountingDate;
            tmpFiscalPrinterDailyReport.FinalGrandTotalAmount        = retailZReport.FinalGrandTotalAmount;
            tmpFiscalPrinterDailyReport.FirstReceiptNumber           = retailZReport.FirstReceiptNumber;
            tmpFiscalPrinterDailyReport.FiscalPrinterSerialNumber    = retailZReport.FiscalPrinterSerialNumber;
            tmpFiscalPrinterDailyReport.InitialGrandTotalAmount      = retailZReport.InitialGrandTotalAmount;
            tmpFiscalPrinterDailyReport.LastReceiptNumber            = retailZReport.LastReceiptNumber;
            tmpFiscalPrinterDailyReport.ZReportNumber                = retailZReport.ZReportNumber;

            if (retailZReport.FiscalPrinterSerialNumber != lastFiscalPrinterSerialNumber ||
                retailZReport.AccountingDate            != lastAccountingDate)
            {
                changeCompany(contract.parmFiscalEstablishmentDataArea())
                {
                    if (retailZReport.AccountingDate != lastAccountingDate)
                    {
                        lastFiscalPrinterDailyReportNumber = this.getLastFiscalPrinterDailyReportNumber(retailZReport.AccountingDate, contract.parmFBBookingPeriodRecId());
                    }

                    // FD02
                    lastFD02Series  = this.getLastFD02Series(retailZReport.AccountingDate, retailZReport.StoreId, retailZReport.TerminalId);
                    tmpFiscalPrinterDailyReport.LastFiscalDocumentSeries     = lastFD02Series;
                    tmpFiscalPrinterDailyReport.LastFiscalDocumentNumber     = this.getLastFD02Number(retailZReport.AccountingDate, retailZReport.StoreId, retailZReport.TerminalId, lastFD02Series);

                    // Totals
                    tmpFiscalPrinterDailyReport.GrossDailySale               = retailZReport.GrossDailySale;
                    tmpFiscalPrinterDailyReport.TotalCanceledAmount          = retailZReport.ICMSCancelAmount();
                    tmpFiscalPrinterDailyReport.TotalDiscountAmount          = retailZReport.ICMSDiscountAmount();
                    tmpFiscalPrinterDailyReport.TotalISSAmount               = retailZReport.ISSTotalAmount() + retailZReport.ISSCancelAmount() + retailZReport.ISSDiscountAmount();
                    tmpFiscalPrinterDailyReport.NetAmount                    = retailZReport.NetAmount;
                    tmpFiscalPrinterDailyReport.TotalExemptAmount            = retailZReport.getICMSExemptAmount() + retailZReport.getICMSNonTribAmount();
                    tmpFiscalPrinterDailyReport.TotalSTAmount                = retailZReport.getICMSTribSubstitutionAmount();

                    lastFiscalPrinterSerialNumber   = retailZReport.FiscalPrinterSerialNumber;
                    lastAccountingDate              = retailZReport.AccountingDate;
                }
            }
            else
            {
                tmpFiscalPrinterDailyReport.GrossDailySale               = 0.00;
                tmpFiscalPrinterDailyReport.NetAmount                    = 0.00;
                tmpFiscalPrinterDailyReport.TotalISSAmount               = 0.00;
                tmpFiscalPrinterDailyReport.TotalCanceledAmount          = 0.00;
                tmpFiscalPrinterDailyReport.TotalDiscountAmount          = 0.00;
                tmpFiscalPrinterDailyReport.TotalExemptAmount            = 0.00;
                tmpFiscalPrinterDailyReport.TotalSTAmount                = 0.00;
            }

            // Taxes
            // ZReport may not have an associated operation with ICMS debit
            if (strLen(retailZReportTotalizer.TotalizerName) >= 7)
            {
                tmpFiscalPrinterDailyReport.TaxValue = this.getTaxValue(retailZReportTotalizer.TotalizerName);
                tmpFiscalPrinterDailyReport.TaxBaseAmount = retailZReportTotalizer.TotalizerAmount;

                CurrencyCode currencyCode = Ledger::accountingCurrency();

                tmpFiscalPrinterDailyReport.TaxAmount = CurrencyExchange::round(tmpFiscalPrinterDailyReport.TaxBaseAmount * (tmpFiscalPrinterDailyReport.TaxValue / 100), currencyCode);
            }
            else
            {
                tmpFiscalPrinterDailyReport.TaxValue                     = 0.00;
                tmpFiscalPrinterDailyReport.TaxBaseAmount                = 0.00;
                tmpFiscalPrinterDailyReport.TaxAmount                    = 0.00;
            }

            tmpFiscalPrinterDailyReport.Number = lastFiscalPrinterDailyReportNumber;

            tmpFiscalPrinterDailyReport.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>