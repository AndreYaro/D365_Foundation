<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTableMethod_SL</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetTableMethod_SL extends AssetTableMethod
{
    AssetDepreciationTime periods;
    AssetAmount periodAmount;

    AssetRevaluationAmount revaluationAmount;

    boolean theEnd;

    AssetTransDate previousDepreciationDate;
    AssetAmount             extraordinaryDepAmount;

    // Properties required for the depreciation conventions
    AssetTableDepConv       deprConv;
    AssetAmount             prevDepAmountPriorYears;
    AssetAmount             prevDepAmountThisYear;

    // Variables used for additional acquisitions.
    boolean                 applyAdditionalAcquistionsLogic;
    int64                   numberOfAdditionalAcquisitions;
    boolean                 isStraightLineLifeExtended;

    // Use to short-circuit expensive CatchUp Depreciation logic if not needed
    boolean                 isTrueUpDepreciationRequired;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountToDepriciateAdjusted</Name>
				<Source><![CDATA[
    protected AssetAmount amountToDepriciateAdjusted(AssetTransDate _assetTransDate = periodEnd)
    {
        AssetAmount ret;

        if (applyAdditionalAcquistionsLogic)
        {
            ret = AssetAdditionalAcquisitions::getAmountToDepriciateAdjusted(assetBook.AssetId,
                assetBook.BookId,
                _assetTransDate,
                deprInterval,
                assetDepreciationProfile);
        }
        else
        {
            ret = super(_assetTransDate);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCalculatePeriodAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the period amount should be calculated.
    /// </summary>
    /// <returns>
    /// true if the period amount should be calculated; otherwise, false.
    /// </returns>
    protected boolean shouldCalculatePeriodAmount()
    {
        return periodEnd <= parmRunDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public AssetAmount calc()
    {
        // Variables to store depreciation amounts for the additional acquisitions.
        container additionalDepreciationValues;
        AssetAmount periodDepreciationAmount;
        AssetAmount adjustmentAmount;

        AssetTransDate startOfPeriod = deprInterval.startOfPeriod(periodstart);
        if (this.parmIsOtherAdjustments() && assetBook.DepreciationConvention != AssetDepreciationConvention::None)
        {
            deprConv.parmIsOtherAdjustments(this.parmIsOtherAdjustments());
            periods = this.parmRemaningPeriods();
        }

        this.parmRemaningPeriods(periods);

        // Verify number of additional acquisitions
        if (applyAdditionalAcquistionsLogic && !assetBook.IsTrueUpDepreciation)
        {
            numberOfAdditionalAcquisitions =  AssetAdditionalAcquisitions::getNumberOfAdditionalAcquisitions(assetBook.AssetId,
                assetBook.BookId, startOfPeriod - 1, periodEnd);
        }

        if (this.shouldCalculatePeriodAmount())
        {
            this.setDepDate();
            this.setAmountToDepreciate();

            if (isReportingCurrencyDepreciation)
            {
                extraordinaryDepAmount = - AssetTrans::amountReportingCurrencyPerDateTranstype(assetBook.AssetId, periodEnd, assetBook.BookId, AssetTransType::ExtraordinaryDepreciation);
            }
            else
            {
                extraordinaryDepAmount = - AssetTrans::amountMSTPerDateTranstype(assetBook.AssetId, periodEnd, assetBook.BookId, AssetTransType::ExtraordinaryDepreciation);
            }

            //calculate depreciation for adjument transaction forAcquisitionAdj, Acquisition, CapitalReserveTransfer.
            if (assetBook.IsTrueUpDepreciation
                && isTrueUpDepreciationRequired
                && periodEnd >= assetBook.LastDepreciationDate
                && this.parmDepAmountPriorYears())
            {
                [prevDepAmountPriorYears, prevDepAmountThisYear] = this.parmDepAmountPriorYears(); // first year depreciation with respect to adjusted value.
                this.parmDepAmountPriorYears(conNull());
            }

            if (calculatePrevPeriods == false)
            {
                prevPeriods = 0;
            }

            if (previousDepreciationDate
                && (prevDepAmountThisYear || prevDepAmountExternal)
                && deprInterval.hasYearChanged(previousDepreciationDate, periodEnd))
            {
                periods = round(periods + prevPeriods, 0);
                prevPeriods = 0;

                if (assetBook.DepreciationConvention != AssetDepreciationConvention::None)
                {
                    prevDepAmountPriorYears += prevDepAmountThisYear;
                    prevDepAmountPriorYears += prevDepAmountExternal;
                    prevDepAmountExternal = 0;
                    prevDepAmountThisYear = 0;
                }
            }

            if (this.parmIsOtherAdjustments())
            {
                extraordinaryDepAmount = 0;
                prevDepAmount = 0;
                prevDepAmountExternal = 0;
            }

            this.determineFirstYearCalcualtion();

            if (assetDepreciationProfile.Method == AssetDepreciationMethod::StraightLine)
            {
                this.calc_SL_ServiceLife();

                if (assetBook.IsTrueUpDepreciation && isTrueUpDepreciationRequired)
                {
                    extraordinaryDepAmount = 0;
                }
            }
            else
            {
                // The periodAmount must be recalculated each time because there could
                // have been posted e.g. an acquisition adjustment before earlier depreciations
                // have been posted.
                // If multiple acquisition, calculate period amount with the aditional adjustments.
                if (applyAdditionalAcquistionsLogic && numberOfAdditionalAcquisitions > 0)
                {
                    // Calculate depreciation for additional acquisitions.
                    TransDate additionalAcquisitionDate = AssetAdditionalAcquisitions::getNextAcquisitionDate(assetBook.AssetId,
                        assetBook.BookId, startOfPeriod - 1, periodEnd);

                    while (additionalAcquisitionDate)
                    {
                        if (periodEnd >= additionalAcquisitionDate)
                        {
                            additionalDepreciationValues = this.calcAdditionalDepreciations(additionalAcquisitionDate,
                                periodstart, periods);
                            periodDepreciationAmount += conPeek(additionalDepreciationValues, 1);

                            // Decrement additional acquisition amount from  the amount to depreciate.
                            // That way calc method can calculate depreciation for the primary acquisition using an existing logic.
                            amountToDepreciate -= conPeek(additionalDepreciationValues, 2);
                        }

                        additionalAcquisitionDate = AssetAdditionalAcquisitions::getNextAcquisitionDate(assetBook.AssetId,
                            assetBook.BookId, additionalAcquisitionDate, periodEnd);
                    }
                }

                this.calc_SL_RemainingLife();
                this.setAmountToDepreciate();
            }

            this.calcRestPeriod(startOfPeriod);

            periods -= restPeriod;

            // In the last year of depreciation and in the last period value, when the depreciation start periods was
            // not in the first one of the year, the engine can determine the last period to be of value of 1,
            // yet the period remaing value is less than 1.  If that is the case, the period number becomes
            // less than 0 and it needs be corrected.
            if (periods < 0 && !isStraightLineLifeExtended)
            {
                periods = 0;
            }

            revaluationAmount = assetBook.roundDepreciationAmount(
                periodAmount * this.revaluationFactor(),
                isReportingCurrencyDepreciation) - periodAmount;

            periodAmount += revaluationAmount;

            periodAmount = this.correctForMinDepreciation(periodAmount);

            periodEnd++;
            periodstart = periodEnd;
            periodEnd = deprInterval.endPeriod(periodstart);

            // <GIN>
            if (shiftDepreciation && !AssetBookShiftDepreciation_IN::exists(assetBook.AssetId, assetBook.BookId, periodEnd))
            {
                periodEnd = dateNull();
            }
            // </GIN>

            previousDepreciationDate = depreciationDate;
        
            // This code branch ensures the accuracy of the original calculated amount.
            periodAmount = this.validatePeriodAmount(periodAmount);

            boolean isCurrentPeriodAdjustment = assetBook.IsTrueUpDepreciation
                && isTrueUpDepreciationRequired
                && assetBook.depreciationProfile().Accrual != AssetAccrual::Monthly
                && assetBook.depreciationProfile().Accrual != AssetAccrual::FiscalPeriod
                && AssetTrans::existAdjustmentTransPerDate(assetBook.AssetId, assetBook.BookId, startOfPeriod, deprInterval.endPeriod(startOfPeriod));

            if (this.parmIsOtherAdjustments())
            {
                adjustmentAmount = periodAmount;
            }

            AssetAmount orgPeriodAmount = periodAmount;

            if (periodAmount
                && !prevPeriods
                && !isCurrentPeriodAdjustment)
            {
                periodAmount = isReportingCurrencyDepreciation ? assetBook.roundOffDepreciationReportingCurrency(periodAmount) : assetBook.roundOffDepreciation(periodAmount);
            }

            //  This code branch ensures the accuracy of the original calculated amount.
            [theEnd, periodAmount] = this.validatePeriodAmountPreviousPeriods(orgPeriodAmount, periodAmount, theEnd);

            // If multiple acquisition, adjust the period amount with additional depriciation amounts.
            // The primary and addition acquisitions need to be posted as one amount.
            if (applyAdditionalAcquistionsLogic && numberOfAdditionalAcquisitions > 0)
            {
                CurrencyCode currencyCode = this.getCurrencyCode();

                if (periods == 1)
                {
                    periodDepreciationAmount = assetBook.roundDepreciationAmount(
                        periodDepreciationAmount,
                        isReportingCurrencyDepreciation);
                }
                else
                {
                    periodDepreciationAmount = assetBook.roundDepreciationAmount(
                        periodDepreciationAmount,
                        isReportingCurrencyDepreciation,
                        this.determineRoundOffType());
                }

                periodAmount +=  periodDepreciationAmount;
            }

            prevDepAmount += periodAmount;

            if (assetBook.DepreciationConvention != AssetDepreciationConvention::None)
            {
                prevDepAmountThisYear += periodAmount;
            }
        }
        else
        {
            periodAmount = 0;
        }

        if (this.parmIsOtherAdjustments())
        {
            periodAmount = adjustmentAmount;
        }

        return periodAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePeriodAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures the period amount <c>AssetAmount</c> is not exceeding the sum of already depreciated amount against the amounts to depreciate.
    /// </summary>
    /// <param name = "_periodAmount">
    /// The period depreciation amount.
    /// </param>
    /// <returns>
    /// The calculated <c>AssetAmount</c> amount.
    /// </returns>
    protected AssetAmount validatePeriodAmount(AssetAmount _periodAmount)
    {
        AssetAmount returnAmount = _periodAmount;
        Amount prevDepreciationAmount = prevDepAmountPriorYears + prevDepAmountThisYear + prevDepAmountExternal + extraordinaryDepAmount;

        if (assetBook.DepreciationConvention == AssetDepreciationConvention::None)
        {
            prevDepreciationAmount = prevDepAmount + prevDepAmountExternal + extraordinaryDepAmount;
        }

        if (assetBook.getAcquisitionAmountSign() * amountToDepreciate
                < assetBook.getAcquisitionAmountSign() * (prevDepreciationAmount + returnAmount))
        {
            returnAmount = assetBook.roundDepreciationAmount(
                    amountToDepreciate - prevDepreciationAmount,
                    isReportingCurrencyDepreciation);
        }

        return returnAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePeriodAmountPreviousPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures the period amount <c>AssetAmount</c> is not exceeding the sum of already depreciated amount against the amounts to depreciate based on previous periods.
    /// </summary>
    /// <param name = "_orgPeriodAmount">
    /// Original period depreciation amount.
    /// </param>
    /// <param name = "_periodAmount">
    /// Rounded period depreciation amount.
    /// </param>
    /// <param name = "_theEnd">
    /// The Boolean value which marks the end.
    /// </param>
    /// <returns>
    /// A container value that returns boolean value and calculated original <c>AssetAmount</c> amount.
    /// </returns>
    protected container validatePeriodAmountPreviousPeriods(AssetAmount _orgPeriodAmount, AssetAmount _periodAmount, boolean _theEnd)
    {
        AssetAmount returnAmount = _periodAmount;
        boolean isEndValue = _theEnd;
        Amount roundedAmountToDepreciate = assetBook.roundDepreciationAmount(amountToDepreciate, isReportingCurrencyDepreciation);

        if (assetBook.DepreciationConvention == AssetDepreciationConvention::None)
        {
            Amount prevDepreciationAmount = prevDepAmount + prevDepAmountExternal + extraordinaryDepAmount;

            if (!prevPeriods
                    && (assetBook.getAcquisitionAmountSign() * roundedAmountToDepreciate <= assetBook.getAcquisitionAmountSign() * (prevDepreciationAmount + returnAmount)
                        || assetBook.getAcquisitionAmountSign() * roundedAmountToDepreciate <= assetBook.getAcquisitionAmountSign() * (prevDepreciationAmount + _orgPeriodAmount)))
            {
                isEndValue = true;
                returnAmount = roundedAmountToDepreciate - prevDepreciationAmount;
            }
        }
        else
        {
            Amount prevDepreciationAmount = prevDepAmountPriorYears + prevDepAmountThisYear + prevDepAmountExternal + extraordinaryDepAmount;

            if (!prevPeriods
                    && (assetBook.getAcquisitionAmountSign() * roundedAmountToDepreciate <= assetBook.getAcquisitionAmountSign() * (prevDepreciationAmount + returnAmount)
                        || assetBook.getAcquisitionAmountSign() * roundedAmountToDepreciate <= assetBook.getAcquisitionAmountSign() * (prevDepreciationAmount + _orgPeriodAmount)
                        || (assetBook.getAcquisitionAmountSign() * roundedAmountToDepreciate <= assetBook.getAcquisitionAmountSign() * round(prevDepreciationAmount + returnAmount, 1)
                            && assetBook.IsTrueUpDepreciation
                            && isTrueUpDepreciationRequired)))
            {
                isEndValue = true;
                returnAmount = roundedAmountToDepreciate - prevDepreciationAmount;
            }
        }

        return [isEndValue, returnAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_SL_RemainingLife</Name>
				<Source><![CDATA[
    private void calc_SL_RemainingLife()
    {
        AssetAmount basisForDepreciation;

        // basisForDepreciation    = Value used for depreciation calculation.
        // amountToDepreciate      = Acquisition cost - salvage value.
        // prevDepAmountExternal   = Total previous depreciations from alternate profile.
        // extraordinaryDepAmount  = Total extraordinary depreciations.
        // prevDepAmountPriorYears = Total depreciation from prior years.
        //
        // The periodAmount must be recalculated each time because there could
        // have been posted e.g. an acquisition adjustment before earlier depreciations
        // have been posted.

        if (periods == 1)
        {
            //
            //  This code branch ensures the accuracy of the original calculated amount.
            //
            if (assetBook.DepreciationConvention == AssetDepreciationConvention::None)
            {
                periodAmount = assetBook.roundDepreciationAmount(
                    (amountToDepreciate -
                        prevDepAmount -
                        prevDepAmountExternal -
                        extraordinaryDepAmount) /
                        round(periods + prevPeriods, 0),
                    isReportingCurrencyDepreciation);
            }
            else
            {
                // Depreciation conventions require an assetBook.serviceLife value.
                if (assetBook.ServiceLife)
                {
                    basisForDepreciation = amountToDepreciate - prevDepAmountPriorYears - extraordinaryDepAmount;

                    periodAmount = assetBook.roundDepreciationAmount(
                        deprConv.calc_SL(basisForDepreciation,
                            prevDepAmountThisYear,
                            prevDepAmountExternal,
                            0,
                            periodEnd,
                            round(periods + prevPeriods, 0)),
                        isReportingCurrencyDepreciation);
                }
                else
                {
                    periodAmount = 0;

                    if (!dualDepreciation)
                    {
                        theEnd = true;
                    }
                }
            }
        }
        else if (periods > 0)
        {
            // This code branch ensures the accuracy of the original calculated amount.
            if (assetBook.DepreciationConvention == AssetDepreciationConvention::None)
            {
                if (isFirstYearPartialDepreciation && isProratedDaysCalculation)
                {
                    if (AssetTableMethod_SLRoundDepreciationAmountFlight::instance().isEnabled())
                    {
                        periodAmount = assetBook.roundDepreciationAmount(
                            (amountToDepreciate - extraordinaryDepAmount) / assetBook.ServiceLife,
                            isReportingCurrencyDepreciation);
                    }
                    else
                    {
                        periodAmount = (amountToDepreciate - extraordinaryDepAmount) / assetBook.ServiceLife;
                    }
                }
                else
                {
                    periodAmount = assetBook.roundDepreciationAmount(
                        (amountToDepreciate -
                            prevDepAmount -
                            prevDepAmountExternal -
                            extraordinaryDepAmount) /
                            round(periods + prevPeriods, 0),
                        isReportingCurrencyDepreciation,
                        this.determineRoundOffType());
                }
            }
            else
            {
                // Depreciation conventions require an assetBook.serviceLife value.
                if (assetBook.ServiceLife)
                {
                    basisForDepreciation = amountToDepreciate - prevDepAmountPriorYears - extraordinaryDepAmount;

                    periodAmount = assetBook.roundDepreciationAmount(
                        deprConv.calc_SL(basisForDepreciation,
                            prevDepAmountThisYear,
                            prevDepAmountExternal,
                            0,
                            periodEnd,
                            round(periods + prevPeriods, 0)),
                        isReportingCurrencyDepreciation,
                        this.determineRoundOffType());
                }
                else
                {
                    periodAmount = 0;

                    if (!dualDepreciation)
                    {
                        theEnd = true;
                    }
                }
            }
        }
        else
        {
            periodAmount = 0;

            if (!dualDepreciation)
            {
                theEnd = true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_SL_ServiceLife</Name>
				<Source><![CDATA[
    private void calc_SL_ServiceLife()
    {
        if (assetBook.LifeTime
            && assetBook.ServiceLife)
        {
            //
            //  Depreciation conventions require an assetBook.serviceLife value.
            //
            if (assetBook.IsTrueUpDepreciation)
            {
                amountToDepreciate -= extraordinaryDepAmount;
            }

            if (periods == 1  && !isStraightLineLifeExtended)
            {
                periodAmount = assetBook.roundDepreciationAmount(
                    (amountToDepreciate -
                        prevDepAmount -
                        prevDepAmountExternal -
                        extraordinaryDepAmount) /
                        round(periods + prevPeriods, 0),
                    isReportingCurrencyDepreciation);
            }
            else if (isFirstYearPartialDepreciation
                && isProratedDaysCalculation)
            {
                if (AssetTableMethod_SLRoundDepreciationAmountFlight::instance().isEnabled())
                {
                    periodAmount = assetBook.roundDepreciationAmount(
                        (amountToDepreciate / assetBook.ServiceLife),
                        isReportingCurrencyDepreciation);
                }
                else
                {
                    periodAmount = amountToDepreciate / assetBook.ServiceLife;
                }
            }
            // <GTH>
            else if (assetBook.DepreciationConvention == AssetDepreciationConvention::None
                && TaxThaiGovCertificationFeatureChecker::isCountryRegionTH())
            {
                if (AssetTableMethod_SLRoundDepreciationAmountFlight::instance().isEnabled())
                {
                    periodAmount = assetBook.roundDepreciationAmount(
                        (amountToDepreciate / assetBook.LifeTime),
                        isReportingCurrencyDepreciation);
                }
                else
                {
                    periodAmount = amountToDepreciate / assetBook.LifeTime;
                }
            }
            // </GTH>
            else
            {
                periodAmount = deprConv.calc_SL(amountToDepreciate,
                    prevDepAmountThisYear,
                    0,
                    prevDepAmountPriorYears,
                    periodEnd,
                    round(periods + prevPeriods,0));
            }
        }
        else
        {
            periodAmount = 0;
            if (! dualDepreciation)
                theEnd = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAdditionalAcqDepreciationStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the start date for the asset depreciation.
    /// </summary>
    /// <param name="_transDate">
    ///    The date on which the asset depreciation start date will be based.
    /// </param>
    /// <returns>
    ///    The start date for the asset depreciation.
    /// </returns>
    /// <remarks>
    ///    If date is in the same period as primary depreciation then start date will be set
    ///    on primary depreciation date otherwise start date will be set on first date of period.
    /// </remarks>
    private TransDate calcAdditionalAcqDepreciationStartDate(TransDate _transDate)
    {
        TransDate startDate;

        if (assetDepreciationProfile.HalfYearDepreciation_AT)
        {
            TransDate middleOfYear = deprInterval.findMiddleOfYear(_transDate);

            if (_transDate < middleOfYear)
            {
                startDate = deprInterval.findFirstDayOfYear(_transDate);
            }
            else
            {
                startDate = middleOfYear;
            }

            if (!deprInterval.hasYearChanged(startDate, assetBook.DepreciationStartDate))
            {
                if ((assetBook.DepreciationStartDate < middleOfYear && startDate < middleOfYear)
                    || (assetBook.DepreciationStartDate >= middleOfYear && startDate >= middleOfYear))
                {
                    startDate = assetBook.DepreciationStartDate;
                }
            }
        }
        else if (assetDepreciationProfile.FullYearDepreciation_DE)
        {
            startDate = deprInterval.findFirstDayOfYear(_transDate);

            if (!deprInterval.hasYearChanged(startDate, assetBook.DepreciationStartDate))
            {
                startDate = assetBook.DepreciationStartDate;
            }
        }

        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAdditionalAcquistionsHalfYearFactor</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the number of half-year multipliers that should be applied to current depreciation
    ///    period.
    /// </summary>
    /// <param name="_currentPeriodDate">
    ///    The start date of the current period for which the deprecation is calculated.
    /// </param>
    /// <param name="_depStartDate">
    ///    The start date of the depreciation.
    /// </param>
    /// <param name="_lifeRemainingCount">
    ///    The number of periods left for depreciation.
    /// </param>
    /// <returns>
    ///    A number that represents how many half-year multipliers should be applied to current depreciation
    ///    period.
    /// </returns>
    /// <remarks>
    ///    This method deals with the half-year rule for yearly depreciation. If the asset has been acquired
    ///    in the second half of the year, only half of the depreciation has to be accounted for in the given
    ///    period.
    /// </remarks>
    private real calcAdditionalAcquistionsHalfYearFactor(TransDate _currentPeriodDate, TransDate _depStartDate, real _lifeRemainingCount)
    {
        real periodMultiplier = 1;

        restPeriod = 1;

        // Yearly calculation needs to be calculated more carefully.
        // The half-year rule as well as forcing the additional acquisitions to end depreciation
        // on the same period as the main acquisition may cause the period amount to be half the amount.

        if (assetDepreciationProfile.Accrual == AssetAccrual::Yearly && assetDepreciationProfile.HalfYearDepreciation_AT)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceAT00007, funcName());
            if (assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Fiscal)
            {
                // Determine where in the year period the acquistion happen and compare the date
                // with the mid-year date.  If the acquistion happen in the second part of the year,
                // only half of the amount can be used.  Also, if the main acquisition has only half
                // period left, the addition acquistion can only use the half of the depreciation.

                TransDate newDate = deprInterval.startingPeriodDate(deprInterval.findMiddleOfYear(_currentPeriodDate));
                if ( _depStartDate >= newDate || _lifeRemainingCount < 1 )
                {
                        periodMultiplier = 0.5;
                }
            }
            else
            {
                // If the depreciation start year and current period matches and the depreciation
                // start happens in the second half year, the period multiplier is 1/2.
                if (year(_depStartDate) == year(_currentPeriodDate) &&  mthOfYr(_depStartDate) > 6)
                {
                     periodMultiplier = 0.5;
                }
            }
        }

        return periodMultiplier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAdditionalDepreciations</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the depreciation for additional acquisitions.
    /// </summary>
    /// <param name="_acquistionDate">
    ///    The date of the acquisition transaction.
    /// </param>
    /// <param name="_mainAcqPeriodStart">
    ///    The start date of the current depreciation period.
    /// </param>
    /// <param name="_mainAcqPeriodLifeRemaining">
    ///    The current count of the periods left for depreciation.
    /// </param>
    /// <returns>
    ///    A container value that returns the amount of depreciation for the additional asset and the
    ///    acquisition amount of the additional acquisitions.
    /// </returns>
    private container calcAdditionalDepreciations(AssetTransDate _acquistionDate,
        AssetTransDate _mainAcqPeriodStart,
        AssetDepreciationTime _mainAcqPeriodLifeRemaining)
    {
        AssetAmount periodAssetAmount;
        AssetDepreciationTime lifeCountBeforeAcquistion;

        // The return value will have depreciation for a given period and
        // to-date depreciation for the acquisition.
        container returnValue = [0,0];
        boolean countPrevDepreciation = false;
        real periodMultiplier = 1;
        AssetDepreciationTime partOfFirstPeriod = 1;

        //Retrieve the acquistion info
        AssetAmount acquisitionAmount;
        
        if (isReportingCurrencyDepreciation)
        {
            acquisitionAmount = AssetAdditionalAcquisitions::getAcquisitionAmountReportingCurrency(assetBook.AssetId, assetBook.BookId, _acquistionDate);
        }
        else
        {
            acquisitionAmount = AssetAdditionalAcquisitions::getAcquisitionAmount(assetBook.AssetId, assetBook.BookId, _acquistionDate);
        }

        if (acquisitionAmount)
        {
            AssetDepreciationTime lifeRemainingCount = _mainAcqPeriodLifeRemaining;
            AssetTransDate currentPeriodEnd = deprInterval.endPeriod(_mainAcqPeriodStart);
            AssetTransDate currentPeriodStart = _mainAcqPeriodStart;
            AssetTransDate primaryAcquisitionPeriodStart = deprInterval.startOfPeriod(_acquistionDate);

            // Determine where the additional acquistion should start to depreciate
            AssetTransDate depreciationStartDate = this.calcAdditionalAcqDepreciationStartDate(_acquistionDate);

            // If the current period start needs to be changed,
            // update the started date.
            if (depreciationStartDate < currentPeriodStart)
            {
                currentPeriodStart = deprInterval.startOfPeriod(depreciationStartDate);
                countPrevDepreciation = true;
            }

            // Calculates part of the first period
            if (depreciationStartDate == assetBook.DepreciationStartDate && depreciationStartDate != currentPeriodStart)
            {
                currentPeriodEnd = deprInterval.endPeriod(currentPeriodStart);

                int periodLength = currentPeriodEnd - currentPeriodStart + 1;

                if (periodLength)
                {
                    partOfFirstPeriod = (currentPeriodEnd - depreciationStartDate + 1) / periodLength;
                }
            }

            // If acquisition start date happened in the prior period versus the main acquision period,
            // recalculate the original number of periods.
            if (currentPeriodStart < _mainAcqPeriodStart)
            {
                if (depreciationStartDate == assetBook.DepreciationStartDate)
                {
                    lifeRemainingCount = assetBook.LifeTime;
                }
                else
                {
                    // Increment the number of period if there are additional periods.
                    lifeRemainingCount += this.calcNumPeriodRemaining(currentPeriodStart, _mainAcqPeriodStart);
                }

                currentPeriodEnd = deprInterval.endPeriod(currentPeriodStart);

                do
                {
                      // If the acquistion has not been reached, continue searching for it.
                      // lifeCountBeforeAcquistion counts how many periods have been counted
                      // before the acquisition has been found.
                        if (countPrevDepreciation && currentPeriodStart < primaryAcquisitionPeriodStart)
                        {
                          lifeCountBeforeAcquistion ++;
                        }

                        currentPeriodStart = currentPeriodEnd + 1;
                        currentPeriodEnd = deprInterval.endPeriod(currentPeriodStart);
                }
                while (currentPeriodStart <  _mainAcqPeriodStart);
            }

            // Recalculate life remaining count as there is a case that only half of the year needs to be used
            // for depreciation caclulation.
            periodMultiplier = this.calcAdditionalAcquistionsHalfYearFactor(currentPeriodStart, depreciationStartDate, lifeRemainingCount);

            if (periodMultiplier < 1 && (lifeRemainingCount - periodMultiplier) > 0)
            {
               lifeRemainingCount -=  periodMultiplier;
            }

            // Calculate the depreciation amount for this period.
            periodAssetAmount = periodMultiplier * sign(acquisitionAmount) * (acquisitionAmount / lifeRemainingCount);

            // Apply rounding off rules defined for the model
            if (periodAssetAmount)
            {
                // RoundoffDepreciation method does not handle negative amounts.  Pass the pasitve amount instead,
                // and upone rounding off is done, reverse the sign of the period asset amount.
                if (periodAssetAmount < 0)
                {
                    periodAssetAmount = isReportingCurrencyDepreciation  ? -1 * assetBook.roundOffDepreciationReportingCurrency(periodAssetAmount * -1) : -1 * assetBook.roundOffDepreciation(periodAssetAmount * -1);
                }
                else
                {
                    periodAssetAmount = isReportingCurrencyDepreciation ? assetBook.roundOffDepreciationReportingCurrency(periodAssetAmount) : assetBook.roundOffDepreciation(periodAssetAmount);
                }
            }

            CurrencyCode currencyCode = this.getCurrencyCode();

            if (periods == 1)
            {
                periodAssetAmount = assetBook.roundDepreciationAmount(
                    periodAssetAmount,
                    isReportingCurrencyDepreciation);
            }
            else
            {
                periodAssetAmount = assetBook.roundDepreciationAmount(
                    periodAssetAmount,
                    isReportingCurrencyDepreciation,
                    this.determineRoundOffType());
            }

            // Adjust the period amount
            if (countPrevDepreciation || partOfFirstPeriod != 1)
            {
                lifeCountBeforeAcquistion += partOfFirstPeriod;
                countPrevDepreciation = false;
                periodAssetAmount = periodAssetAmount *  lifeCountBeforeAcquistion;
            }
        }

        returnValue = [periodAssetAmount, acquisitionAmount];

        return  returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcNumPeriodRemaining</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the number of periods that have passed between the start and end date for a given
    ///    depreciation frequency.
    /// </summary>
    /// <param name="_startDate">
    ///    The start date of the time frame.
    /// </param>
    /// <param name="_endDate">
    ///    The end date of the time frame.
    /// </param>
    /// <returns>
    ///    The number of periods for the given time frame.
    /// </returns>
    private real calcNumPeriodRemaining(TransDate _startDate, TransDate _endDate)
    {
        real    returnValue;
        real    periodMultiplier = 1;
        AssetTransDate oldDate;
        AssetTransDate newDate;

        // Determine number of periods from the start date to the end date for the fiscal year.
        if (assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Fiscal)
        {
            // For fiscal calendar and yearly depreciation, determine number of
            // years between start and end date.
            if (assetDepreciationProfile.Accrual == AssetAccrual::Yearly )
            {
                // Loop through the next closing period date and calculate number of years
                // between start and end date.
                oldDate = _startDate;
                newDate = deprInterval.closingPeriodDate(oldDate) + 1;
                while (newDate <= _endDate )
                {
                    if (deprInterval.hasYearChanged(oldDate, newDate))
                    {
                        returnValue++;
                    }
                    oldDate = newDate;
                    newDate = deprInterval.closingPeriodDate(oldDate) + 1;
                }
            }
            else
            {
                returnValue = deprInterval.numOfPeriods(_startDate, _endDate - 1);
            }
        }
        else
        // Determine number of periods from the start date to the end date for  for the calendar year.
        {
            if (_endDate < _startDate)
            {
                returnValue = 0;
            }
            else
            {
                returnValue = (mthOfYr(_endDate) + year(_endDate) * 12) -
                              (mthOfYr(_startDate) + year(_startDate) * 12);
            }
        }

        // Help to determine how many periods are in a year.
        switch (assetDepreciationProfile.Accrual)
        {
            case AssetAccrual::FiscalPeriod  :
                periodMultiplier = 1;
                break;
            case AssetAccrual::Monthly :
                periodMultiplier = 1;
                break;
            case AssetAccrual::Quarterly :
                periodMultiplier = 3;
                break;
            case AssetAccrual::HalfYearly :
                periodMultiplier = 6;
                break;
            case AssetAccrual::Yearly :
                if (assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Fiscal)
                {
                    periodMultiplier = 1;
                }
                else
                {
                    periodMultiplier = 12;
                }
                break;
        }

        return (returnValue / periodMultiplier);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCalculatePartialYearPeriodAmount</Name>
				<Source><![CDATA[
    internal boolean shouldCalculatePartialYearPeriodAmount()
    {
        boolean shouldCalculatePartialYearPeriodAmount;

        if (isFirstYearPartialDepreciation
            && isProratedDaysCalculation
            && !deprInterval.hasYearChanged(depreciationDate, assetBook.UsedFromDate))
        {
            shouldCalculatePartialYearPeriodAmount = true;
        }

        return shouldCalculatePartialYearPeriodAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRestPeriod</Name>
				<Source><![CDATA[
    protected void calcRestPeriod(AssetTransDate _startOfPeriod)
    {
        real firstYearPeriodsNumber;

        if (this.shouldCalculatePartialYearPeriodAmount())
        {
            periodAmount = this.calculatePartialYearPeriodAmount(depreciationDate, periodAmount);
        }

        if (isFirstYearPartialDepreciation
            && isProratedDaysCalculation
            && assetDepreciationProfile.Method == AssetDepreciationMethod::StraightLineLifeRemaining)
        {
            AssetTransDate endOfFirstPeriodDate = deprInterval.endPeriod(assetBook.UsedFromDate);

            // Determine the total number of depreciation periods used in a given year.
            if (firstYearTotalNumberOfDays)
            {
                firstYearPeriodsNumber = (firstYearNumberOfDays / firstYearTotalNumberOfDays) * deprInterval.assetDepreciationTime(assetBook.UsedFromDate);
            }

            // If the first month has partial depreciation, subtract the partial amount from the first periods
            // and calculate the remaining depreciation amounts.
            if (isFirstPeriodPartialDepreciation)
            {
                real firstPeriodDaysRation = this.getParialPeriodDaysRatio(assetBook.UsedFromDate, endOfFirstPeriodDate);
                restPeriod = firstYearPeriodsNumber * firstPeriodDaysRation;

                if (deprInterval.indexofPeriod(assetBook.UsedFromDate) != deprInterval.indexofPeriod(periodstart))
                {
                    firstYearPeriodsNumber = firstYearPeriodsNumber - restPeriod;
                    var numOfPeriodsLeftInYear = deprInterval.numOfPeriodsLeftInYear(endOfFirstPeriodDate + 1);
                    if (numOfPeriodsLeftInYear)
                    {
                        restPeriod = firstYearPeriodsNumber / numOfPeriodsLeftInYear;
                    }
                }
            }
            else
            {
                var numOfPeriodsLeftInYear = deprInterval.numOfPeriodsLeftInYear(assetBook.UsedFromDate);
                if (numOfPeriodsLeftInYear)
                {
                    restPeriod = firstYearPeriodsNumber / numOfPeriodsLeftInYear;
                }
            }
        }
        else
        {
            super(_startOfPeriod);
        }

        // The restPeriod may be updated based on the assets depreciation convention or
        // will be returned unchanged.

        deprConv.parmIsPartialMonthCalculation(isFirstPeriodPartialDepreciation);
        restPeriod = deprConv.calcRestPeriod(restPeriod, periodstart, periods);

        // <GIN>
        // When the depreciation calculation is running during disposal, the shift depreciation calculation is done in method
        // AssetTableDepConv_None\calculateDisposalDepreciationAdjRatio() instead to make the value correct. This is because standard does prorated calculation on the depreciationAmount.
        if (isIndiaDepreciationEnabled
            && assetBook.assetBookTable().CurrentOperationsTax == CurrentOperationsTax::Current
            && ((isDayBasedCalendarEnabled && assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Fiscal)
                || shiftDepreciation) // DayBased calculation is applicable only when DayBasedCalendar is attached or ShiftDepreciation is marked.
            && !isDisposal)
        {
            if (isDayBasedCalendarEnabled
                && !(isFirstYearPartialDepreciation && isProratedDaysCalculation))
            {
                restPeriod = this.getShiftDepBasedRestPeriod_IN();
            }
            else
            {
                AssetDepreciationTime shiftBasedRatio = this.getShiftDepBasedRatio_IN();
                restPeriod = restPeriod * shiftBasedRatio;
                if (isFirstYearPartialDepreciation
                    && isProratedDaysCalculation
                    && !deprInterval.hasYearChanged(depreciationDate, assetBook.UsedFromDate))
                {
                    periodAmount = periodAmount * shiftBasedRatio;
                }
            }
        }
        // </GIN>

        //Modifed code to avoid, applying convention rule in case of of other adjustment.
        if (this.parmIsOtherAdjustments())
        {
            restPeriod = 1;
        }

        if (calculatePrevPeriods && ! amountToDepreciate)
        {
            prevPeriods += restPeriod;
        }
        else
        {
            calculatePrevPeriods = false;

            //  This code branch ensures the accuracy of the original calculated amount.
            if (assetBook.DepreciationConvention == AssetDepreciationConvention::None)
            {
                if (isFirstYearPartialDepreciation
                    && isProratedDaysCalculation)
                {
                    periodAmount = assetBook.roundDepreciationAmount(
                        periodAmount,
                        isReportingCurrencyDepreciation);
                }
                else
                {
                    periodAmount = assetBook.roundDepreciationAmount(
                        periodAmount * (restPeriod + prevPeriods),
                        isReportingCurrencyDepreciation);
                }
            }
            else
            {
                periodAmount = deprConv.calcCurrencyAmount(periodAmount, (restPeriod + prevPeriods));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineFirstYearCalcualtion</Name>
				<Source><![CDATA[
    private void determineFirstYearCalcualtion()
    {
        // Verify if the partial year and partial period calculation needs to be done in order
        // to calculate depreciation amount.
        if (isFirstYearPartialDepreciation
            && assetBook.DepreciationConvention == AssetDepreciationConvention::None)
        {
            if (!isProratedDaysCalculation)
            {
                if (isFirstPeriodPartialDepreciation
                    && deprInterval.endPeriod(assetBook.UsedFromDate) < periodstart)
                {
                    isFirstPeriodPartialDepreciation = false;
                }
            }
            else
            {
                if (deprInterval.hasYearChanged(depreciationDate, assetBook.UsedFromDate))
                {
                    isFirstYearPartialDepreciation = false;
                    isFirstPeriodPartialDepreciation = false;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShiftDepBasedRatio_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculated the Shift ratio for the depreciation Period when shiftDepreciation is marked for DepreciationYear of type Calendar.
    /// </summary>
    /// <returns>
    /// Returns the Shift ratio for the depreciation Period when shiftDepreciation is marked for DepreciationYear of type Calendar.
    /// </returns>
    /// <remarks>
    /// This method calculates the shift ratio for the depreciation period when shiftDepreciation is marked.
    /// This is applied on the standard restPeriod value.
    /// </remarks>
    protected AssetDepreciationTime getShiftDepBasedRatio_IN()
    {
        AssetDepreciationTime           restPeriodLoc;
        AssetDepreciationTime           periodDepreciationDays;

        periodDepreciationDays  = AssetBookShiftDepreciation_IN::getTotalShiftDaysInCalendarPeriods(assetBook,
                                                                                                    periodstart,
                                                                                                    periodEnd,
                                                                                                    singleShift,
                                                                                                    doubleShift,
                                                                                                    tripleShift,
                                                                                                    noneShift);
        if (periodEnd - periodStart + 1)
        {
            restPeriodLoc = periodDepreciationDays / (periodEnd - periodStart + 1);
        }

        return restPeriodLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShiftDepBasedRestPeriod_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculated the DaysBased And Shift Prorated ratio for the depreciation Period.
    /// </summary>
    /// <returns>
    /// Returns the DaysBased Prorated ratio for the depreciation Period.
    /// </returns>
    /// <remarks>
    /// This method overrides the restPeriod calculated in standard process,
    /// when india shiftDepreciation is marked or Asset Calendar used is DayBased.
    /// </remarks>
    protected AssetDepreciationTime getShiftDepBasedRestPeriod_IN()
    {
        AssetDepreciationTime           restPeriodLoc;
        AssetDepreciationTime           periodDepreciationDays;
        int                             fiscalCalendarYearDays;

        periodDepreciationDays  = AssetBookShiftDepreciation_IN::getTotalShiftDaysInCalendarPeriods(assetBook,
                                                                                                    periodstart,
                                                                                                    periodEnd,
                                                                                                    singleShift,
                                                                                                    doubleShift,
                                                                                                    tripleShift,
                                                                                                    noneShift);
        if (assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Fiscal
            && FiscalCalendar_IN::findByFiscalCalendar(assetBook.assetBookTable().getFiscalCalendar()).CalendarType == CalendarType_IN::DayBased)
        {
            fiscalCalendarYearDays  = FiscalCalendarPeriod_IN::getTotalDaysInCalendarYear(
                                                                FiscalCalendarYear::findYearByCalendarDate(assetBook.assetBookTable().getFiscalCalendar(),
                                                                    periodstart).RecId);
        }
        else
        {
            fiscalCalendarYearDays = (deprInterval.findLastDayOfYear(assetBook.UsedFromDate) - deprInterval.findFirstDayOfYear(assetBook.UsedFromDate) + 1);
        }

        if (assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Fiscal)
        {
            if (fiscalCalendarYearDays)
            {
                restPeriodLoc = (periodDepreciationDays / fiscalCalendarYearDays) * deprInterval.assetDepreciationTime(periodstart);
            }
        }
        else
        {
            restPeriodLoc = periodDepreciationDays / (periodEnd - periodstart + 1);
        }
        return restPeriodLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>AssetTableeMethod</c> class.
    /// </summary>
    public void init()
    {
        super();

        periods  = assetBook.LifeTimeRest;

        // Construct an asset depreciation convention class.
        deprConv = AssetTableDepConv::newCalcAssetAmount(assetBook, deprInterval, assetDepreciationProfile);
        deprConv.parmIsReportingCurrencyDepreciation(isReportingCurrencyDepreciation);

        if (assetBook.DepreciationConvention != AssetDepreciationConvention::None)
        {
            //  Calculate any depreciations taken the previous years.
            prevDepAmountPriorYears = this.prevDepAmountPriorYears(assetBook.LastDepreciationDate ? assetBook.LastDepreciationDate + 1: assetBook.DepreciationStartDate);

            if (assetBook.RevaluationGroupId)
            {
                prevDepAmountPriorYears -= assetSumCalc_Trans.depreciationRevaluationValue();
            }
            //  Calculate any depreciations taken this year.
            prevDepAmountThisYear = this.prevDepAmountThisYear(assetBook.LastDepreciationDate ? assetBook.LastDepreciationDate + 1: assetBook.DepreciationStartDate);
        }

        //
        // Determine if the additional acquisition logic needs to be used.
        //
        applyAdditionalAcquistionsLogic =
            AssetAdditionalAcquisitions::applyAdditionalAcquistionsLogic(   assetDepreciationProfile,
                                                                            assetBook.DepreciationConvention);

        isTrueUpDepreciationRequired = assetBook.isTrueUpDepreciationRequired();

        // Verify if the acquired value model needs to extend the life of the model in case an additional acquisition is posted.
        if (assetBook.Status != AssetStatus::NoAcquisition
            && !isTrueUpDepreciationRequired
            && assetBook.depreciationProfile().Method == AssetDepreciationMethod::StraightLine
            // <GTH>
            && (!TaxThaiGovCertificationFeatureChecker::isCountryRegionTH()
                || assetDepreciationProfile.Accrual != AssetAccrual::Daily))
            // </GTH>
        {
            isStraightLineLifeExtended = (AssetTrans::findNumberOfAcquisitionTransactions(assetBook.AssetId, assetBook.BookId) > 1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    public boolean next()
    {
        if (theEnd)
        {
            return false;
        }

        if (parmRunDate <= baseDate)
        {
            return false;
        }

        this.setDepDate();

        //
        //  This prevents depreciations with invalid dates from
        //  being handled.
        //
        if (!depreciationDate ||
            depreciationDate > parmRunDate)
        {
            return false;
        }

        if (periodEnd < periodstart)
        {
            return false;
        }

        //calculate depreciation for adjument transaction forAcquisitionAdj, Acquisition, CapitalReserveTransfer.
        if ( (assetBook.IsTrueUpDepreciation && isTrueUpDepreciationRequired)
            && this.parmIsCatchUpDepreciation() && periodEnd > assetBook.LastDepreciationDate)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriod</Name>
				<Source><![CDATA[
    public AssetDepreciationTime parmPeriod(AssetDepreciationTime _periods = periods)
    {
        periods = _periods;

        return periods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrevDepAmountPriorYears</Name>
				<Source><![CDATA[
    public AssetAmount parmPrevDepAmountPriorYears(AssetAmount _prevDepAmountPriorYears = prevDepAmountPriorYears)
    {
        prevDepAmountPriorYears = _prevDepAmountPriorYears;

        return prevDepAmountPriorYears;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrevDepAmountThisYear</Name>
				<Source><![CDATA[
    public AssetAmount parmPrevDepAmountThisYear(AssetAmount _prevDepAmountThisYear = prevDepAmountThisYear)
    {
        prevDepAmountThisYear = _prevDepAmountThisYear;

        return prevDepAmountThisYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevDepAmountPriorYears</Name>
				<Source><![CDATA[
    //  This method caculates the assets total amount of depreciation for all years prior to the current year.
    private AssetAmount prevDepAmountPriorYears(AssetTransDate _assetTransDate)
    {
        AssetSumCalc_Trans assetSumCalc_Trans_PriorYears;
        AssetTransDate toDate = deprInterval.openingPeriodDate(_assetTransDate) - 1;

        //
        //  Create a period based AssetSumCalc_Trans for the current asset
        //  using the lowest date value dateNull() (01/01/1900) and the
        //  to date as the date range.
        //  This date range represents the earliest transaction date possible to the
        //  last day of the previous year.
        //

        if (isReportingCurrencyDepreciation)
        {
            assetSumCalc_Trans_PriorYears = AssetSumCalc_Trans::newAssetPeriodByCurrency(assetBook.AssetId,
                                                                            assetBook.BookId,
                                                                            dateNull(),
                                                                            toDate,
                                                                            AssetSumCalcType::Reporting);
        }
        else
        {
            assetSumCalc_Trans_PriorYears = AssetSumCalc_Trans::newAssetPeriod(assetBook.AssetId, assetBook.BookId, dateNull(), toDate);
        }

        if (assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Calendar && year(_assetTransDate) <= year(assetBook.AcquisitionDate))
            assetSumCalc_Trans_PriorYears.parmIsPriorYear(true);

        if (assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Fiscal && deprInterval.closingPeriodDate(_assetTransDate) <= deprInterval.closingPeriodDate(assetBook.AcquisitionDate))
            assetSumCalc_Trans_PriorYears.parmIsPriorYear(true);

        //
        //  Create a total for all the asset depreciations and
        //  depreciation adjustments between (including) the two (2) dates.
        //
        AssetAmount retValue = -(assetSumCalc_Trans_PriorYears.depreciationValue()  +
                     assetSumCalc_Trans_PriorYears.depreciationAdjValue());

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevDepAmountThisYear</Name>
				<Source><![CDATA[
    //  This method caculates the assets total amount of depreciation for the current year.
    private AssetAmount prevDepAmountThisYear(AssetTransDate _assetTransDate)
    {
        AssetSumCalc_Trans assetSumCalc_Trans_ThisYear;
        AssetTransDate fromDate = deprInterval.openingPeriodDate(_assetTransDate);

        //  Set the to date to the end of the depreciation period for the passed in date.
        AssetTransDate toDate = deprInterval.endPeriod(_assetTransDate);

        //
        //  Create a period based AssetSumCalc_Trans for the current asset
        //  using the from date and the to date as the date range.
        //  This date range represents the beginning of this year to the
        //  date the of the next depreciation.
        //
        if (isReportingCurrencyDepreciation)
        {
            assetSumCalc_Trans_ThisYear = AssetSumCalc_Trans::newAssetPeriodByCurrency(assetBook.AssetId,
                                                                            assetBook.BookId,
                                                                            fromDate,
                                                                            toDate,
                                                                            AssetSumCalcType::Reporting);
        }
        else
        {
            assetSumCalc_Trans_ThisYear = AssetSumCalc_Trans::newAssetPeriod(assetBook.AssetId, assetBook.BookId, fromDate, toDate);
        }

        if (assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Calendar && year(_assetTransDate) <= year(assetBook.AcquisitionDate))
            assetSumCalc_Trans_ThisYear.parmIsCurrentYear(true);

        if (assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Fiscal && deprInterval.closingPeriodDate(_assetTransDate) <= deprInterval.closingPeriodDate(assetBook.AcquisitionDate))
            assetSumCalc_Trans_ThisYear.parmIsCurrentYear(true);

        //
        //  Create a total for all the asset depreciations and
        //  depreciation adjustments between (including) the two (2) dates.
        //
        AssetAmount retValue = -(assetSumCalc_Trans_ThisYear.depreciationValue() +
                     assetSumCalc_Trans_ThisYear.depreciationAdjValue());

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>revaluationAmount</Name>
				<Source><![CDATA[
    public AssetRevaluationAmount revaluationAmount()
    {
        return revaluationAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineRoundOffType</Name>
				<Source><![CDATA[
    private RoundOffType determineRoundOffType()
    {
        #EECountryRegionCodes
        RoundOffType roundOffType = RoundOffType::RoundDown;

        if (AssetTableMethod_SLRoundDepreciationAmountFlight::instance().isEnabled())
        {
            if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAll))
            {
                roundOffType = RoundOffType::Ordinary;
            }
        }

        return roundOffType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>