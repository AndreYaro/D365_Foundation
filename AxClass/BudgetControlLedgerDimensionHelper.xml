<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlLedgerDimensionHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetControlLedgerDimensionHelper</c> class provides helper methods to use to access budget
///    control data for ledger dimensions.
/// </summary>
public class BudgetControlLedgerDimensionHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findBudgetControlLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the budget control ledger dimension for the specified primary ledger and source ledger
    ///    dimension.
    /// </summary>
    /// <param name="_primaryLedgerRecId">
    ///    The record ID of the primary ledger record.
    /// </param>
    /// <param name="_ledgerDimension">
    ///    The record ID of the source ledger dimension record.
    /// </param>
    /// <returns>
    ///    The budget control ledger dimension; otherwise, 0.
    /// </returns>
    public static LedgerDimensionBudgetControl findBudgetControlLedgerDimension(
        RecId _primaryLedgerRecId,
        LedgerDimensionBase _ledgerDimension)
    {
        BudgetControlConfiguration controlConfiguration;
        BudgetControlDimensionAttribute controlDimensionAttribute;
        BudgetPrimaryLedgerDimensionAttribute primaryLedgerDimensionAttribute;

        DimensionHierarchy dimensionHierarchy;
        DimensionHierarchyLevel dimensionHierarchyLevel;
        DimensionAttributeLevelValueView attributeLevelValueView;
        DimensionAttribute dimensionAttribute;

        DimensionStorage dimensionStorage;
        DimensionStorageSegment dimensionStorageSegment;
        boolean saveRecord = false;

        container cachedResult;

        cachedResult = BudgetCache::getValue(BudgetCacheScope::BudgetControlLedgerDimension, [_primaryLedgerRecId, _ledgerDimension]);

        if (cachedResult == connull())
        {
            if (BudgetControlLedgerDimensionHelper::isMainAccountEnabledForBudgetControl(_primaryLedgerRecId, _ledgerDimension))
            {
                // A ledger dimension can only be used to obtain a budget control ledger dimension when
                // the main account is enabled for budget control or is not part of the ledger dimension.
                changecompany(CompanyInfo::getDataArea(Ledger::primaryForLegalEntity(_primaryLedgerRecId)))
                {

                    // Get the active BudgetControlConfiguration for the primary ledger.
                    controlConfiguration = BudgetControlConfiguration::findActiveByPrimaryLedger(_primaryLedgerRecId);

                    if (controlConfiguration && _ledgerDimension)
                    {
                        dimensionHierarchy = DimensionHierarchy::getAccountStructureFromDimensionCombination(_ledgerDimension);
                    }

                    if (controlConfiguration &&
                        dimensionHierarchy.RecId == controlConfiguration.DimensionHierarchyAccountStructure)
                    {
                        // Create a dimension storage instance to create the budget control ledger dimension.
                        dimensionStorage = DimensionStorage::construct(0, LedgerDimensionType::BudgetControl);
                        dimensionStorage.addHierarchy(dimensionHierarchy.RecId);

                        // Get the attribute values from the source ledger dimension.
                        // All values will be retrieved regardless of whether they are a budget control dimension attribute
                        // to ensure the main account is included to be checked.
                        while select * from attributeLevelValueView
                            where attributeLevelValueView.ValueCombinationRecId == _ledgerDimension
                            join RecId from dimensionAttribute
                                where dimensionAttribute.RecId == attributeLevelValueView.DimensionAttribute
                                join Level from dimensionHierarchyLevel
                                    where dimensionHierarchyLevel.DimensionAttribute == dimensionAttribute.RecId &&
                                        dimensionHierarchyLevel.DimensionHierarchy == dimensionHierarchy.RecId
                            exists join primaryLedgerDimensionAttribute
                                where primaryLedgerDimensionAttribute.DimensionAttribute == attributeLevelValueView.DimensionAttribute &&
                                    primaryLedgerDimensionAttribute.PrimaryLedger == _primaryLedgerRecId
                                exists join controlDimensionAttribute
                                    where controlDimensionAttribute.BudgetPrimaryLedgerDimensionAttribute == primaryLedgerDimensionAttribute.RecId &&
                                        controlDimensionAttribute.BudgetControlConfiguration == controlConfiguration.RecId
                        {
                            // The dimension is a budget control dimension attribute.
                            // Set the dimension segment.
                            dimensionStorageSegment = DimensionStorageSegment::constructFromLevelValueView(attributeLevelValueView);
                            dimensionStorage.setSegment(dimensionHierarchyLevel.Level, dimensionStorageSegment);
                            saveRecord = true;
                        }

                        if (saveRecord)
                        {
                            cachedResult = [dimensionStorage.save()];
                        }
                    }
                }

                BudgetCache::insertValue(
                    BudgetCacheScope::BudgetControlLedgerDimension,
                    [_primaryLedgerRecId, _ledgerDimension],
                    cachedResult);
            }
        }

        return conpeek(cachedResult, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBudgetControlRuleByLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>BudgetControlRule</c> record for the specified source ledger dimension.
    /// </summary>
    /// <param name="_primaryLedgerRecId">
    ///    The record ID of the primary ledger record.
    /// </param>
    /// <param name="_ledgerDimension">
    ///    The record ID of the source ledger dimension record.
    /// </param>
    /// <returns>
    ///    The <c>BudgetControlRule</c> record; otherwise, an empty record.
    /// </returns>
    public static BudgetControlRule findBudgetControlRuleByLedgerDimension(
        RecId _primaryLedgerRecId,
        LedgerDimensionBase _ledgerDimension)
    {
        Query query;

        QueryBuildDataSource qbdsConfiguration;
        QueryBuildDataSource qbdsRule;
        QueryBuildDataSource qbdsCriteria;

        QueryRun queryRun;

        Map dimensionValues;
        MapEnumerator dimensionValuesEnumerator;

        str criteriaRange;
        str controlDimAttrCriteria;
        boolean isFirst;

        RecId controlDimAttrId;
        DimensionValue displayValue;

        BudgetControlRule controlRule;

        container cachedResult;
        RecId cachedRecId;

        cachedResult = BudgetCache::getValue(BudgetCacheScope::BudgetControlRuleByLedgerDimension, [_primaryLedgerRecId, _ledgerDimension]);

        if (cachedResult != connull())
        {
            cachedRecId = conpeek(cachedResult, 1);

            if (cachedRecId)
            {
                controlRule = BudgetControlRule::find(cachedRecId);
            }
        }
        else
        {
            if (BudgetControlLedgerDimensionHelper::isMainAccountEnabledForBudgetControl(_primaryLedgerRecId, _ledgerDimension))
            {
                // A ledger dimension can only be used to obtain a budget control rule when
                // the main account is enabled for budget control or is not part of the ledger dimension.

                // Get the budget control dimension values from the source ledger dimension.
                dimensionValues = BudgetControlDimensionAttribute::getBudgetControlDimensionAttributeValues(_primaryLedgerRecId, _ledgerDimension);

                if (dimensionValues.elements() > 0)
                {
                    // The dimension values map will only have elements if the primary ledger and source ledger dimension are valid.

                    // Create the query.
                    query = new Query();

                    // Add the BudgetControlConfiguration data source.
                    qbdsConfiguration = query.addDataSource(tablenum(BudgetControlConfiguration), 'BCC');
                    qbdsConfiguration.addRange(fieldnum(BudgetControlConfiguration, PrimaryLedger)).value(SysQuery::value(_primaryLedgerRecId));
                    qbdsConfiguration.addRange(fieldnum(BudgetControlConfiguration, IsActive)).value(SysQuery::value(NoYes::Yes));

                    // Add the BudgetControlRule data source.
                    qbdsRule = qbdsConfiguration.addDataSource(tablenum(BudgetControlRule), 'BCR');
                    qbdsRule.relations(true);
                    qbdsRule.joinMode(JoinMode::InnerJoin);

                    // Add the BudgetControlRuleCriteria data source.
                    qbdsCriteria = qbdsRule.addDataSource(tablenum(BudgetControlRuleCriteria), 'BCRC');
                    qbdsCriteria.relations(true);
                    qbdsCriteria.joinMode(JoinMode::NoExistsJoin);

                    // Build the rule criteria ranges for the dimension values.
                    criteriaRange = '(';
                    isFirst = true;

                    dimensionValuesEnumerator = dimensionValues.getEnumerator();

                    while (dimensionValuesEnumerator.moveNext())
                    {
                        controlDimAttrId = dimensionValuesEnumerator.currentKey();
                        displayValue = dimensionValuesEnumerator.currentValue();

                        if (displayValue)
                        {
                            // We need to escape the value before using it
                            displayValue = queryValue(displayValue);

                            // Restrict the budget control dimension attribute of the rule criteria.
                            controlDimAttrCriteria = strfmt(
                                '((BCRC.BudgetControlDimensionAttribute = %1)',
                                int642str(controlDimAttrId));

                            // Restrict the from value and to values of the rule criteria.
                            controlDimAttrCriteria += strfmt(
                                ' && (((BCRC.WildCardString = "") && (((BCRC.RangeFrom != "") && ((BCRC.IsFromOpen = 0) && (BCRC.RangeFrom > "%1")) || ((BCRC.IsFromOpen = 1) && (BCRC.RangeFrom >= "%1")))',
                                displayValue);

                            controlDimAttrCriteria += strfmt(
                                ' || ((BCRC.RangeTo != "") && ((BCRC.IsToOpen = 0) && (BCRC.RangeTo < "%1")) || ((BCRC.IsToOpen = 1) && (BCRC.RangeTo <= "%1")))))',
                                displayValue);

                            // Restrict the wild card value of the rule criteria.
                            controlDimAttrCriteria += strfmt(
                                ' || ((BCRC.WildCardString != "") && (!("%1" like BCRC.WildCardString)))))',
                                displayValue);
                        }
                        else
                        {
                            // Blank values are not allowed when rule criteria exists.
                            controlDimAttrCriteria = strfmt(
                                '(BCRC.BudgetControlDimensionAttribute = %1)',
                                int642str(controlDimAttrId));
                        }

                        if (isFirst)
                        {
                            criteriaRange += controlDimAttrCriteria;
                            isFirst = false;
                        }
                        else
                        {
                            criteriaRange = criteriaRange + ' || ' + controlDimAttrCriteria;
                        }
                    }

                    criteriaRange += ')';

                    // Add the rule criteria range.
                    qbdsCriteria.addRange(fieldnum(BudgetControlRuleCriteria, WildCardString)).value(criteriaRange);

                    queryRun = new QueryRun(query);

                    while (queryRun.next())
                    {
                        if (Debug::debugMode())
                        {
                            // Only one budget control rule should be found.
                            Debug::assert(!controlRule);
                        }

                        controlRule = queryRun.get(tablenum(BudgetControlRule)).data();
                    }
                }
            }

            BudgetCache::insertValue(
                BudgetCacheScope::BudgetControlRuleByLedgerDimension,
                [_primaryLedgerRecId, _ledgerDimension],
                [controlRule.RecId]);
        }

        return controlRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBudgetControlRuleLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>BudgetControlRuleLedgerDimension</c> record for the specified primary ledger and source ledger dimension.
    /// </summary>
    /// <param name="_primaryLedgerRecId">
    ///    The record ID of the primary ledger record.
    /// </param>
    /// <param name="_ledgerDimension">
    ///    The record ID of the source ledger dimension record.
    /// </param>
    /// <returns>
    ///    A record in the <c>BudgetControlRuleLedgerDimension</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetControlRuleLedgerDimension findBudgetControlRuleLedgerDimension(
        LedgerRecId _primaryLedgerRecId,
        LedgerDimensionBase _ledgerDimension)
    {
        BudgetControlRuleLedgerDimension controlRuleLedgerDimension;
        BudgetControlRule controlRule = BudgetControlLedgerDimensionHelper::findBudgetControlRuleByLedgerDimension(_primaryLedgerRecId, _ledgerDimension);

        if (controlRule)
        {
            // The control rule was found but it may not guarantee that a control ledger dimension can be created.
            // Control rules can be setup to allow blank values, but the segments for the ledger dimension may be required.
            LedgerDimensionBudgetControl controlLedgerDimension = BudgetControlLedgerDimensionHelper::findBudgetControlLedgerDimension(_primaryLedgerRecId, _ledgerDimension);

            if (controlLedgerDimension)
            {
                controlRuleLedgerDimension = BudgetControlLedgerDimensionHelper::saveBudgetControlRuleLedgerDimension(
                    _primaryLedgerRecId,
                    controlLedgerDimension,
                    controlRule.RecId);
            }
        }

        return controlRuleLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetControlRuleLedgerDimensionForExistingDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the <c>BudgetControlRuleLedgerDimension</c> record for the specified primary ledger and existing control ledger dimension.
    /// </summary>
    /// <param name="_primaryLedgerRecId">
    ///    The record ID of the primary ledger record.
    /// </param>
    /// <param name="_controlLedgerDimension">
    ///    The record ID of the control ledger dimension record.
    /// </param>
    internal static void createBudgetControlRuleLedgerDimensionForExistingDimension(
        LedgerRecId _primaryLedgerRecId,
        LedgerDimensionBase _controlLedgerDimension)
    {
        BudgetControlRule controlRule = BudgetControlLedgerDimensionHelper::findBudgetControlRuleByLedgerDimension(_primaryLedgerRecId, _controlLedgerDimension);

        if (controlRule)
        {
            BudgetControlRuleLedgerDimension controlRuleLedgerDimension = BudgetControlLedgerDimensionHelper::saveBudgetControlRuleLedgerDimension(
                    _primaryLedgerRecId,
                    _controlLedgerDimension,
                    controlRule.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBudgetGroupByMemberLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>BudgetGroup</c> record for the specified source ledger dimension.
    /// </summary>
    /// <param name="_primaryLedgerRecId">
    ///    The record ID of the primary ledger record.
    /// </param>
    /// <param name="_ledgerDimension">
    ///    The record ID of the source ledger dimension record.
    /// </param>
    /// <param name="_userConnection">
    ///    The <c>UserConnection</c> object to use to commit the changes; optional.
    /// </param>
    /// <returns>
    ///    The <c>BudgetGroup</c> record; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    ///    If a budget group is found, the <c>BudgetGroupLedgerDimension</c> record is created for the ledger
    ///    dimension if it does not exist.
    /// </remarks>
    public static BudgetGroup findBudgetGroupByMemberLedgerDimension(
        RecId _primaryLedgerRecId,
        LedgerDimensionBase _ledgerDimension,
        UserConnection _userConnection = null)
    {
        Query query;

        QueryBuildDataSource qbdsConfiguration;
        QueryBuildDataSource qbdsGroup;
        QueryBuildDataSource qbdsMember;
        QueryBuildDataSource qbdsCriteria;

        QueryRun queryRun;

        Map dimensionValues;
        MapEnumerator dimensionValuesEnumerator;

        str criteriaRange;
        str dimAttrCriteria;
        boolean isFirst;

        RecId controlDimAttrId;
        DimensionValue displayValue;

        BudgetGroup budgetGroup;

        container cachedResult;
        RecId cachedRecId;

        cachedResult = BudgetCache::getValue(BudgetCacheScope::BudgetGroupByLedgerDimension, [_primaryLedgerRecId, _ledgerDimension]);

        if (cachedResult != connull())
        {
            cachedRecId = conpeek(cachedResult, 1);

            if (cachedRecId)
            {
                budgetGroup = BudgetGroup::find(cachedRecId);
            }
        }
        else
        {
            if (BudgetControlLedgerDimensionHelper::isMainAccountEnabledForBudgetControl(_primaryLedgerRecId, _ledgerDimension))
            {
                // A ledger dimension can only be used to obtain a budget group when
                // the main account is enabled for budget control or is not part of the ledger dimension.

                // Get the budget control dimension values from the source ledger dimension.
                dimensionValues = BudgetControlDimensionAttribute::getBudgetControlDimensionAttributeValues(_primaryLedgerRecId, _ledgerDimension);

                if (dimensionValues.elements() > 0)
                {
                    // The dimension values map will only have elements if the primary ledger and source ledger dimension are valid.

                    // Create the query.
                    query = new Query();

                    // Add the BudgetControlConfiguration data source.
                    qbdsConfiguration = query.addDataSource(tablenum(BudgetControlConfiguration), 'BCC');
                    qbdsConfiguration.addRange(fieldnum(BudgetControlConfiguration, PrimaryLedger)).value(SysQuery::value(_primaryLedgerRecId));
                    qbdsConfiguration.addRange(fieldnum(BudgetControlConfiguration, IsActive)).value(SysQuery::value(NoYes::Yes));

                    // Add the BudgetGroup data source.
                    qbdsGroup = qbdsConfiguration.addDataSource(tablenum(BudgetGroup), 'BG');
                    qbdsGroup.relations(true);
                    qbdsGroup.joinMode(JoinMode::InnerJoin);

                    // Add the BudgetGroupMember data source.
                    qbdsMember = qbdsGroup.addDataSource(tablenum(BudgetGroupMember), 'BGM');
                    qbdsMember.relations(true);
                    qbdsMember.joinMode(JoinMode::ExistsJoin);

                    // Add the BudgetGroupMemberCriteria data source.
                    qbdsCriteria = qbdsMember.addDataSource(tablenum(BudgetGroupMemberCriteria), 'BGMC');
                    qbdsCriteria.relations(true);
                    qbdsCriteria.joinMode(JoinMode::NoExistsJoin);

                    // Add criteria for dimension values
                    criteriaRange = '(';
                    isFirst = true;

                    dimensionValuesEnumerator = dimensionValues.getEnumerator();

                    while (dimensionValuesEnumerator.moveNext())
                    {
                        controlDimAttrId = dimensionValuesEnumerator.currentKey();
                        displayValue = dimensionValuesEnumerator.currentValue();

                        if (displayValue)
                        {
                            // Restrict the budget control dimension attribute of the group member criteria.
                            dimAttrCriteria = strfmt(
                                '((BGMC.BudgetControlDimensionAttribute = %1)',
                                int642str(controlDimAttrId));

                            // Restrict the from value and to values of the group member criteria.
                            dimAttrCriteria += strfmt(
                                ' && (((BGMC.WildCardString = "") && (((BGMC.RangeFrom != "") && ((BGMC.IsFromOpen = 0) && (BGMC.RangeFrom > "%1")) || ((BGMC.IsFromOpen = 1) && (BGMC.RangeFrom >= "%1")))',
                                displayValue);

                            dimAttrCriteria += strfmt(
                                ' || ((BGMC.RangeTo != "") && ((BGMC.IsToOpen = 0) && (BGMC.RangeTo < "%1")) || ((BGMC.IsToOpen = 1) && (BGMC.RangeTo <= "%1")))))',
                                displayValue);

                            // Restrict the wild card value of the group member criteria.
                            dimAttrCriteria += strfmt(
                                ' || ((BGMC.WildCardString != "") && (!("%1" like BGMC.WildCardString)))))',
                                displayValue);
                        }
                        else
                        {
                            // Blank values are not allowed when group member criteria exists.
                            dimAttrCriteria = strfmt(
                                '(BGMC.BudgetControlDimensionAttribute = %1)',
                                int642str(controlDimAttrId));
                        }

                        if (isFirst)
                        {
                            criteriaRange += dimAttrCriteria;
                            isFirst = false;
                        }
                        else
                        {
                            criteriaRange = criteriaRange + ' || ' + dimAttrCriteria;
                        }
                    }

                    criteriaRange += ')';

                    // Add criteria range.
                    qbdsCriteria.addRange(fieldnum(BudgetGroupMemberCriteria, WildCardString)).value(criteriaRange);

                    queryRun = new QueryRun(query);

                    while (queryRun.next())
                    {
                        if (Debug::debugMode())
                        {
                            // Only one budget group should be found.
                            Debug::assert(!budgetGroup);
                        }

                        budgetGroup = queryRun.get(tablenum(BudgetGroup)).data();
                    }
                }

                if (budgetGroup)
                {
                    // save the BudgetGroupLedgerDimension
                    BudgetControlLedgerDimensionHelper::saveBudgetGroupLedgerDimension(_primaryLedgerRecId, _ledgerDimension, budgetGroup.RecId, _userConnection);
                }
            }

            BudgetCache::insertValue(
                BudgetCacheScope::BudgetGroupByLedgerDimension,
                [_primaryLedgerRecId, _ledgerDimension],
                [budgetGroup.RecId]);
        }

        return budgetGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBudgetModelByLedgerDimensionAndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>BudgetModel</c> record for the specified source ledger dimension and date.
    /// </summary>
    /// <param name="_primaryLedgerRecId">
    /// The record ID of the primary ledger record.
    /// </param>
    /// <param name="_ledgerDimension">
    /// The record ID of the source ledger dimension record.
    /// </param>
    /// <param name="_date">
    /// The date for which to find the budget cycle that is associated to the budget model.
    /// </param>
    /// <returns>
    /// The <c>BudgetModel</c> record; otherwise, an empty record.
    /// </returns>
    public static BudgetModel findBudgetModelByLedgerDimensionAndDate(
        RecId _primaryLedgerRecId,
        LedgerDimensionBase _ledgerDimension,
        Date _date)
    {
        BudgetModel budgetModel;

        BudgetControlRule budgetControlRule;
        BudgetControlBudgetCycle budgetControlBudgetCycle;
        BudgetCycle budgetCycle;

        // Get the budget control rule for the source ledger dimension.
        budgetControlRule = BudgetControlLedgerDimensionHelper::findBudgetControlRuleByLedgerDimension(_primaryLedgerRecId, _ledgerDimension);

        if (budgetControlRule)
        {
            // Get the budget cycle for the rule's budget cycle time span and date.
            budgetCycle = BudgetCycle::findBudgetCycleByDate(budgetControlRule.BudgetCycleTimeSpan, _date);

            if (budgetCycle)
            {
                // Get the budget model for the budget cycle and active configuration.
                select firstonly budgetModel
                    exists join budgetControlBudgetCycle
                        where budgetControlBudgetCycle.BudgetControlConfiguration == budgetControlRule.BudgetControlConfiguration &&
                            budgetControlBudgetCycle.BudgetCycle == budgetCycle.RecId &&
                            budgetControlBudgetCycle.BudgetModelId == budgetModel.ModelId &&
                            budgetControlBudgetCycle.BudgetModelSubModelId == budgetModel.SubModelId &&
                            budgetControlBudgetCycle.BudgetModelType == budgetModel.Type &&
                            budgetControlBudgetCycle.BudgetModelDataAreaId == budgetModel.dataAreaId;
            }
        }

        return budgetModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLedgerDimensionEnabledForBudgetControl</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the ledger dimension is enabled for budget control.
    /// </summary>
    /// <param name="_primaryLedgerRecId">
    ///    The record ID of the primary ledger record.
    /// </param>
    /// <param name="_ledgerDimension">
    ///    The record ID of the ledger dimension.
    /// </param>
    /// <returns>
    ///    true if the ledger dimension is enabled for budget control; otherwise, false.
    /// </returns>
    public static boolean isLedgerDimensionEnabledForBudgetControl(
        RecId _primaryLedgerRecId,
        LedgerDimensionBase _ledgerDimension)
    {
        boolean isEnabled;

        if (BudgetControlLedgerDimensionHelper::findBudgetControlRuleLedgerDimension(_primaryLedgerRecId, _ledgerDimension))
        {
            // The BudgetControlRuleLedgerDimension record was found that contains the rule and resolved a budget control combination.
            isEnabled = true;
        }

        return isEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMainAccountEnabledForBudgetControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the main account is enabled for budget control.
    /// </summary>
    /// <param name="_primaryLedgerRecId">
    /// The record ID of the primary ledger record.
    /// </param>
    /// <param name="_ledgerDimension">
    /// The record ID of the source ledger dimension record from which to obtain the main account.
    /// </param>
    /// <returns>
    /// true if the main account is enabled for budget control; otherwise, false.
    /// </returns>
    /// <remarks>
    /// When the main account is not part of the ledger dimension, this method returns true.
    /// </remarks>
    private static boolean isMainAccountEnabledForBudgetControl(
        RecId _primaryLedgerRecId,
        LedgerDimensionBase _ledgerDimension)
    {
        boolean isEnabled;
        MainAccount mainAccount;
        BudgetControlConfiguration controlConfiguration;

        // Get the active BudgetControlConfiguration for the primary ledger.
        controlConfiguration = BudgetControlConfiguration::findActiveByPrimaryLedger(_primaryLedgerRecId);

        if (controlConfiguration && _ledgerDimension)
        {
            // Get the main account from the ledger dimension.
            mainAccount = LedgerDimensionFacade::getMainAccountFromLedgerDimension(_ledgerDimension);

            if (mainAccount)
            {
                if (BudgetControlDimensionAttribute::isMainAccountInBudgetControlDimAttrbs(controlConfiguration.RecId) ||
                    BudgetControlMainAccount::existByMainAccountConfiguration(mainAccount.RecId, controlConfiguration.RecId))
                {
                    // The main account is being tracked by the active configuration.
                    isEnabled = true;
                }
            }
            else
            {
                // The ledger dimension does not contain a main account.
                isEnabled = true;
            }
        }

        return isEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveBudgetControlRuleLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the <c>BudgetControlRuleLedgerDimension</c> record for the specified budget control ledger
    ///    dimension and budget control rule.
    /// </summary>
    /// <param name="_primaryLedgerRecId">
    ///    The record ID of the primary ledger record.
    /// </param>
    /// <param name="_controlLedgerDimension">
    ///    The budget control ledger dimension for which to save the record.
    /// </param>
    /// <param name="_budgetControlRuleRecId">
    ///    The budget control rule for which to save the record.
    /// </param>
    /// <param name="_userConnection">
    ///    The <c>UserConnection</c> object to use to commit the changes; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>BudgetControlRuleLedgerDimension</c> table; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    ///    This method searches for an existing record. If a record is not found, it creates a record.
    /// </remarks>
    private static BudgetControlRuleLedgerDimension saveBudgetControlRuleLedgerDimension(
        LedgerRecId _primaryLedgerRecId,
        LedgerDimensionBudgetControl _controlLedgerDimension,
        RecId _budgetControlRuleRecId,
        UserConnection _userConnection = null)
    {
        #OCCRetryCount

        BudgetControlRuleLedgerDimension controlRuleLedgerDimension;
        DimensionAttributeValueCombination dimAttrValueCombo;

        if (_userConnection)
        {
            controlRuleLedgerDimension.setConnection(_userConnection);
            dimAttrValueCombo.setConnection(_userConnection);
        }

        try
        {
            ttsbegin;

            select firstonly RecId from dimAttrValueCombo
                where dimAttrValueCombo.LedgerDimensionType == LedgerDimensionType::BudgetControl
                    && dimAttrValueCombo.RecId  == _controlLedgerDimension
                outer join controlRuleLedgerDimension
                    where controlRuleLedgerDimension.PrimaryLedger == _primaryLedgerRecId
                        && controlRuleLedgerDimension.BudgetControlLedgerDimension == dimAttrValueCombo.RecId
                        && controlRuleLedgerDimension.BudgetControlRule == _budgetControlRuleRecId;

            if (dimAttrValueCombo && !controlRuleLedgerDimension)
            {
                // Create BudgetControlRuleLedgerDimension
                controlRuleLedgerDimension.PrimaryLedger = _primaryLedgerRecId;
                controlRuleLedgerDimension.BudgetControlLedgerDimension = _controlLedgerDimension;
                controlRuleLedgerDimension.BudgetControlRule = _budgetControlRuleRecId;
                controlRuleLedgerDimension.insert();
            }

            ttscommit;
        }
        catch (Exception::DuplicateKeyException)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::DuplicateKeyExceptionNotRecovered;
            }
            else
            {
                retry;
            }
        }

        return controlRuleLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveBudgetGroupLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the <c>BudgetGroupLedgerDimension</c> record for the specified budget control ledger
    /// dimension and budget group.
    /// </summary>
    /// <param name="_primaryLedgerRecId">
    /// The record ID of the primary ledger record.
    /// </param>
    /// <param name="_controlLedgerDimension">
    /// The budget control ledger dimension for which to save the record.
    /// </param>
    /// <param name="_budgetGroupRecId">
    /// The budget group for which to save the record.
    /// </param>
    /// <param name="_userConnection">
    /// The <c>UserConnection</c> object to use to commit the changes; optional.
    /// </param>
    /// <remarks>
    /// This method searches for an existing record. If a record is not found, it creates a record.
    /// </remarks>
    private static void saveBudgetGroupLedgerDimension(
        LedgerRecId _primaryLedgerRecId,
        LedgerDimensionBudgetControl _controlLedgerDimension,
        RecId _budgetGroupRecId,
        UserConnection _userConnection = null)
    {
        BudgetGroupLedgerDimension groupLedgerDimension;
        DimensionAttributeValueCombination dimAttrValueCombo;

        if (_userConnection)
        {
            groupLedgerDimension.setConnection(_userConnection);
        }

        select firstonly RecId from dimAttrValueCombo
            where dimAttrValueCombo.LedgerDimensionType == LedgerDimensionType::BudgetControl
                && dimAttrValueCombo.RecId  == _controlLedgerDimension
            outer join groupLedgerDimension
                where groupLedgerDimension.BudgetControlLedgerDimension == dimAttrValueCombo.RecId
                    && groupLedgerDimension.BudgetGroup == _budgetGroupRecId;

        if (dimAttrValueCombo.RecId != 0 && groupLedgerDimension.RecId == 0)
        {
            // Create BudgetGroupLedgerDimension
            groupLedgerDimension.PrimaryLedger = _primaryLedgerRecId;
            groupLedgerDimension.BudgetGroup = _budgetGroupRecId;
            groupLedgerDimension.BudgetControlLedgerDimension = _controlLedgerDimension;
            groupLedgerDimension.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>