<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsWorkExecuteDisplayController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsWorkExecuteDisplayController</c> class controls which buttons are supported in various warehouse mobile scenarios.
/// </summary>
/// <remarks>Add post-method handlers when extending scenarios.</remarks>
final class WhsWorkExecuteDisplayController
{
    #WHSWorkExecuteDisplayCases
    #WHSRF

    private WHSWorkTransType receivingWorkTransType = WHSWorkTransType::Purch;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmReceivingWorkTransType</Name>
				<Source><![CDATA[
    internal WHSWorkTransType parmReceivingWorkTransType(WHSWorkTransType _receivingWorkTransType = receivingWorkTransType)
    {
        receivingWorkTransType = _receivingWorkTransType;

        return receivingWorkTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddFullButtonForStep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if a step supports the Full button.
    /// </summary>
    /// <param name = "_step">The step.</param>
    /// <returns>true when supported; otherwise, false.</returns>   
    public boolean canAddFullButtonForStep(int _step)
    {
        switch (_step)
        {
            case #SplitWork:
            case #ShortPick:
            case #ShortPickConf:
            case #ManualReallocationList:
            case #ManualReallocationListShortPickConf:
            case #OverpickStep:
            case #CWOutBoundWeightCapture:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddOverrideButtonForStep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if a step supports the Override button.
    /// </summary>
    /// <param name = "_step">The step.</param>
    /// <returns>true when supported; otherwise, false.</returns>
    public boolean canAddOverrideButtonForStep(int _step)
    {
        switch (_step)
        {
            case #NoLocation:
            case #ShortPick:
            case #ShortPickConf:
            case #ManualReallocationList:
            case #ManualReallocationListShortPickConf:
            case #SplitWork:
            case #SplitPutWork:
            case #RFPickingComment:
            case #AssignSerialStep:
            case #WorkAuditTemplate:
            case #OverpickStep:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddOkButtonForWorkType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if a work type supports the Ok button.
    /// </summary>
    /// <param name = "_whsWorkType">The work type.</param>
    /// <returns>true when supported; otherwise, false.</returns>
    public boolean canAddOkButtonForWorkType(WhsWorkType _whsWorkType)
    {
        switch (_whsWorkType)
        {
            case WHSWorkType::Pick:
            case WHSWorkType::Put:
            case WHSWorkType::Custom:
            case WHSWorkType::PackToNestedLicensePlate:
                return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddOkButtonForStep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if a step supports the Ok button.
    /// </summary>
    /// <param name = "_step">The step.</param>
    /// <returns>true when supported; otherwise, false.</returns>
    public boolean canAddOkButtonForStep(int _step)
    {
        switch (_step)
        {
            case #ManualReallocationList:
            case #ManualReallocationListShortPickConf:
            case #FEFOWarehouseLocationList:
            case #LocOrLPCheck:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddOverpickButtonForStep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if a step supports the Over pick button.
    /// </summary>
    /// <param name = "_step">The step.</param>
    /// <returns>true when supported; otherwise, false.</returns>
    public boolean canAddOverpickButtonForStep(int _step)
    {
        switch (_step)
        {
            case #ShortPick:
            case #ShortPickConf:
            case #ManualReallocationList:
            case #ManualReallocationListShortPickConf:
            case #NoLocation:
            case #OverrideStep1:
            case #OverrideStep2:
            case #SplitWork:
            case #RFPickingComment:
            case #AssignSerialStep:
            case #WorkAuditTemplate:
            case #OverpickStep:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddShortPickButtonForStep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if a step supports the Short pick button.
    /// </summary>
    /// <param name = "_step">The step.</param>
    /// <returns>true when supported; otherwise, false.</returns>
    public boolean canAddShortPickButtonForStep(int _step)
    {
        switch (_step)
        {
            case #ShortPick:
            case #ShortPickConf:
            case #NoLocation:
            case #OverrideStep1:
            case #OverrideStep2:
            case #SplitWork:
            case #RFPickingComment:
            case #AssignSerialStep:
            case #WorkAuditTemplate:
            case #OverpickStep:
            case #ManualReallocationList:
            case #ManualReallocationListShortPickConf:
            case #FEFOWarehouseLocationList:
            case #CWOutboundWeightCapture:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddSkipButtonForStep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if a step supports the Skip button.
    /// </summary>
    /// <param name = "_step">The step.</param>
    /// <returns>true when supported; otherwise, false.</returns>
    public boolean canAddSkipButtonForStep(int _step)
    {
        switch (_step)
        {
            case #ShortPick:
            case #ShortPickConf:
            case #OverrideStep1:
            case #OverrideStep2:
            case #SplitWork:
            case #RFPickingComment:
            case #WorkAuditTemplate:
            case #SplitPutWork:
            case #OverpickStep:
            case #ManualReallocationList:
            case #ManualReallocationListShortPickConf:
            case #FEFOWarehouseLocationList:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddOverPickButtonForWorkTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if a work transaction type supports the Over pick button.
    /// </summary>
    /// <param name = "_workTransType">The work transaction type.</param>
    /// <returns>true when supported; otherwise, false.</returns>
    public boolean canAddOverPickButtonForWorkTransType(WHSWorkTransType _workTransType)
    {
        return WhsWorkTransactionType::singletonFromTypeOrDefault(_workTransType).isOverPickSupported();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddShortPickButtonForWorkTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if a work transaction type supports the Short pick button.
    /// </summary>
    /// <param name = "_workTransType">The work transaction type.</param>
    /// <returns>true when supported; otherwise, false.</returns>
    public boolean canAddShortPickButtonForWorkTransType(WHSWorkTransType _workTransType)
    {
        switch (_workTransType)
        {
            case WHSWorkTransType::KanbanPick:
            case WHSWorkTransType::PackedContainerPicking:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canShowGetLocationScreenForWorkType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if a work type supports the Get location screen.
    /// </summary>
    /// <param name = "_whsWorkType">The work transaction type.</param>
    /// <returns>true when supported; otherwise, false.</returns>
    public boolean canShowGetLocationScreenForWorkType(WHSWorkType _whsWorkType)
    {
        switch (_whsWorkType)
        {
            case WHSWorkType::Put:
            case WHSWorkType::Custom:
            case WHSWorkType::Print:
            case WHSWorkType::QualityCheck:
                return false;
        } 
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canShowGetLocationScreenForPutForWorkTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if a work transaction type supports the Get location screen for Put work type.
    /// </summary>
    /// <param name = "_whsWorkTransType">The work transaction type.</param>
    /// <returns>true when supported; otherwise, false.</returns>
    public boolean canShowGetLocationScreenForPutForWorkTransType(WHSWorkTransType _whsWorkTransType)
    {
        WhsWorkTransactionType workTransactionType = WhsWorkTransactionType::singletonFromType(_whsWorkTransType);

        if (workTransactionType &&
            workTransactionType.isInbound())
        {
            return false;
        }
            
        if (_whsWorkTransType == WHSWorkTransType::Invent ||
            _whsWorkTransType == WHSWorkTransType::Replenishment)
        {
            return false;
        }
            
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canShowDispositionCodeForMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if a work execution mode supports the showing disposition code.
    /// </summary>
    /// <param name = "_mode">The work transaction type.</param>
    /// <param name="_dispositionTable">Disposition record</param>
    /// <returns>true when supported; otherwise, false.</returns>
    public boolean canShowDispositionCodeForMode(
        WHSWorkExecuteMode      _mode, 
        WHSDispositionTable     _dispositionTable)
    {
        boolean ret = true;

        switch (_mode)
        {
            case WHSWorkExecuteMode::LicensePlateReceiving:
            case WHSWorkExecuteMode::LicensePlateReceivingAndLocate:
            case WHSWorkExecuteMode::LoadItemReceiving:
            case WHSWorkExecuteMode::LoadItemReceivingAndLocate:
                ret = this.canShowDispositionCodeForWorkTransType(_dispositionTable, receivingWorkTransType);
                break;
            case WHSWorkExecuteMode::ReturnOrder:
            case WHSWorkExecuteMode::ReturnOrderAndLocate:
            case WHSWorkExecuteMode::ReturnItemReceiving:
                if (!_dispositionTable.ReturnDispositionCodeId)
                {
                    ret = false;
                }
                break;
            case WHSWorkExecuteMode::ReportAsFinished:
            case WHSWorkExecuteMode::ReportAsFinishedAndLocate:
                if (_dispositionTable.ReturnDispositionCodeId
                ||  WHSInventStatus::find(_dispositionTable.InventStatusId).InventStatusBlocking
                ||  (_dispositionTable.WorkTemplateCode
                &&   !WHSWorkTemplateTable::exist(_dispositionTable.WorkTemplateCode, WHSWorkTransType::ProdPut)))
                {
                    ret = false;
                }
                break;
            // Mixed license plate receiving is handled in method canShowDispositionCodeForMixedLPMode
            case WHSWorkExecuteMode::MixedLPReceiving:
            case WHSWorkExecuteMode::MixedLPReceivingAndLocate:
                ret = false;
                break;
            default:
                var workExecutionMode = WHSWorkExecutionMode::newFromMode(_mode);
                if (workExecutionMode.isInboundOrderReceiving())
                {
                    ret = this.canShowDispositionCodeForWorkTransType(_dispositionTable, workExecutionMode.inboundOrderWorkTransType());
                }
                break;
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canShowDispositionCodeForMixedLPMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if a mixed license plate mode supports the showing disposition code.
    /// </summary>
    /// <param name = "_mode">The work transaction type.</param>
    /// <param name="_dispositionTable">Disposition record</param>
    /// <param name = "_mixedLPMode">The mode being used to receive mixed license plates.</param>
    /// <returns>true when supported; otherwise, false.</returns>
    public boolean canShowDispositionCodeForMixedLPMode(
        WHSWorkExecuteMode      _mode,
        WHSDispositionTable     _dispositionTable,
        WHSMixedLPReceivingMode _mixedLPMode)
    {
        boolean ret;

        if (_mode == WHSWorkExecuteMode::MixedLPReceiving
        ||  _mode == WHSWorkExecuteMode::MixedLPReceivingAndLocate)
        {
            ret = true;

            switch (_mixedLPMode)
            {
                case WHSMixedLPReceivingMode::ReturnOrderReceiving:
                    if (!_dispositionTable.ReturnDispositionCodeId)
                    {
                        ret = false;
                    }
                    break;
                case WHSMixedLPReceivingMode::LoadItemReceiving:
                    ret = this.canShowDispositionCodeForWorkTransType(_dispositionTable, receivingWorkTransType);
                    break;
                default:
                    var workTransType = WHSRFMenuItemTable::getWorkTransTypeForMixedLPReceivingMode(_mixedLPMode);
                    if (WhsWorkTransactionType::singletonFromType(workTransType).isForExternalInboundShipment())
                    {
                        ret = this.canShowDispositionCodeForWorkTransType(_dispositionTable, workTransType);
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canShowDispositionCodeForWorkTransType</Name>
				<Source><![CDATA[
    private boolean canShowDispositionCodeForWorkTransType(WHSDispositionTable _dispositionTable, WHSWorkTransType _workTransType)
    {
        return !(_dispositionTable.ReturnDispositionCodeId
                 ||  (_dispositionTable.WorkTemplateCode
                 &&   !WHSWorkTemplateTable::exist(_dispositionTable.WorkTemplateCode, _workTransType)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddSplitAndLPOverrideButtonsForWorkTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if a work transaction type supports the Split and License plate override buttons.
    /// </summary>
    /// <param name = "_whsWorkTransType">The work transaction type.</param>
    /// <returns>true when supported; otherwise, false.</returns>
    public boolean canAddSplitAndLPOverrideButtonsForWorkTransType(WHSWorkTransType _whsWorkTransType)
    {
        WhsWorkTransactionType workTransactionType = WhsWorkTransactionType::singletonFromType(_whsWorkTransType);

        if (workTransactionType &&
            workTransactionType.isInbound())
        {
            return true;
        }
            
        if (_whsWorkTransType == WHSWorkTransType::Invent ||
            _whsWorkTransType == WHSWorkTransType::Replenishment)
        {
            return true;
        }
            
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddShortPickButtonForMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if a work execution mode supports the Short pick button.
    /// </summary>
    /// <param name = "_mode">The work transaction type.</param>
    /// <returns>true when supported; otherwise, false.</returns>
    public boolean canAddShortPickButtonForMode(WHSWorkExecuteMode _mode)
    {
        switch (_mode)
        {
            case WHSWorkExecuteMode::UserDirected:
            case WHSWorkExecuteMode::SystemDirected:
            case WHSWorkExecuteMode::SystemGrouping:
            case WHSWorkExecuteMode::UserGrouping:
            case WHSWorkExecuteMode::ValidatedUserDirected:
            case WHSWorkExecuteMode::TransportLoading:
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddOverPickButtonForMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if a work execution mode supports the Over pick button.
    /// </summary>
    /// <param name = "_mode">The work transaction type.</param>
    /// <returns>true when supported; otherwise, false.</returns>
    public boolean canAddOverPickButtonForMode(WHSWorkExecuteMode _mode)
    {
        switch (_mode)
        {
            case WHSWorkExecuteMode::UserDirected:
            case WHSWorkExecuteMode::SystemDirected:
            case WHSWorkExecuteMode::SystemGrouping:
            case WHSWorkExecuteMode::UserGrouping:
            case WHSWorkExecuteMode::ValidatedUserDirected:
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddFullButtonForMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if a work execution mode supports the Full button.
    /// </summary>
    /// <param name = "_mode">The work transaction type.</param>
    /// <returns>true when supported; otherwise, false.</returns>
    public boolean canAddFullButtonForMode(WHSWorkExecuteMode _mode)
    {
        switch (_mode)
        {
            case WHSWorkExecuteMode::UserDirected:
            case WHSWorkExecuteMode::UserGrouping:
            case WHSWorkExecuteMode::SystemGrouping:
            case WHSWorkExecuteMode::SystemDirected:
            case WHSWorkExecuteMode::ValidatedUserDirected:
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddOkButtonForMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if a work execution mode supports the Ok button.
    /// </summary>
    /// <param name = "_mode">The work mode.</param>
    /// <returns>true when supported; otherwise, false.</returns>
    public boolean canAddOkButtonForMode(WHSWorkExecuteMode _mode)
    {
        switch (_mode)
        {
            case WHSWorkExecuteMode::Movement:
            case WHSWorkExecuteMode::MovementByTemplate:
            case WHSWorkExecuteMode::Quarantine:
            case WHSWorkExecuteMode::InquiryLocation:
            case WHSWorkExecuteMode::ProductionScrap:
            case WHSWorkExecuteMode::InquiryItem:
            case WHSWorkExecuteMode::MaterialConsumption:
            case WHSWorkExecuteMode::TransportLoading:
                return true;
        }       

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInboundOrderLineOrItemWithoutPutawayReceiving</Name>
				<Source><![CDATA[
    private boolean isInboundOrderLineOrItemWithoutPutawayReceiving(WHSWorkExecuteMode _mode)
    {
        var workExecutionMode = WHSWorkExecutionMode::newFromMode(_mode);

        // returns true for OrderLineReceiving, OrderLineReceivingAndLocate and OrderItemReceiving,
        // but not for OrderItemReceivingAndLocate

        return workExecutionMode.isInboundOrderLineReceiving() 
            || (workExecutionMode.isInboundOrderItemReceiving() && !workExecutionMode.isInboundOrderReceivingAndPutaway());
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddBackButtonForMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if a work execution mode supports the Back button.
    /// </summary>
    /// <param name = "_mode">The work mode.</param>
    /// <returns>true when supported; otherwise, false.</returns>
    public boolean canAddBackButtonForMode(WHSWorkExecuteMode _mode)
    {
        switch (_mode)
        {
            case WHSWorkExecuteMode::Movement:
            case WHSWorkExecuteMode::MovementByTemplate:
            case WHSWorkExecuteMode::Quarantine:
            case WHSWorkExecuteMode::LicensePlateReceiving:
            case WHSWorkExecuteMode::LicensePlateReceivingAndLocate:
                return false;
        }

        return !this.isInboundOrderLineOrItemWithoutPutawayReceiving(_mode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddConsumeLPButtonForMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if a work execution mode supports the Consume License plate button.
    /// </summary>
    /// <param name = "_mode">The work mode.</param>
    /// <returns>true when supported; otherwise, false.</returns>
    public boolean canAddConsumeLPButtonForMode(WHSWorkExecuteMode _mode)
    {
        switch (_mode)
        {
            case WHSWorkExecuteMode::MaterialConsumption:
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddDoneButtonForStep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if a work type supports the Done button.
    /// </summary>
    /// <param name = "_step">The step.</param>
    /// <returns>true when supported; otherwise, false.</returns>
    public boolean canAddDoneButtonForStep(int _step)
    {
        switch (_step)
        {
            case #OverrideStep1:
            case #OverrideStep2:
            case #WorkAuditTemplate:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddDropButtonForWorkType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if a work type supports the Drop button.
    /// </summary>
    /// <param name = "_type">The work type.</param>
    /// <returns>true when supported; otherwise, false.</returns>
    public boolean canAddDropButtonForWorkType(WHSWorkType _type)
    {
        switch (_type)
        {
            case WHSWorkType::Pick:
            case WHSWorkType::Put:
            case WHSWorkType::Custom:
            case WHSWorkType::None:
            case WHSWorkType::Print:
            case WHSWorkType::PackToNestedLicensePlate:
            case WHSWorkType::QualityCheck:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddDoneButtonForWorkType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if a work type supports the Done button.
    /// </summary>
    /// <param name = "_type">The work type.</param>
    /// <returns>true when supported; otherwise, false.</returns>
    public boolean canAddDoneButtonForWorkType(WHSWorkType _type)
    {
        switch (_type)
        {
            case WHSWorkType::Pick:
            case WHSWorkType::Put:
            case WHSWorkType::Custom:
            case WHSWorkType::Print:
            case WHSWorkType::None:
            case WHSWorkType::PackToNestedLicensePlate:
            case WHSWorkType::QualityCheck:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddDropButtonForMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if a work execution mode supports the Drop button.
    /// </summary>
    /// <param name = "_mode">The work mode.</param>
    /// <returns>true when supported; otherwise, false.</returns>
    public boolean canAddDropButtonForMode(WHSWorkExecuteMode _mode)
    {
        switch (_mode)
        {
            case WHSWorkExecuteMode::Movement:
            case WHSWorkExecuteMode::MovementByTemplate:
            case WHSWorkExecuteMode::Quarantine:
            case WHSWorkExecuteMode::LicensePlateReceiving:
            case WHSWorkExecuteMode::LicensePlateReceivingAndLocate:
                return false;
        }

        return !this.isInboundOrderLineOrItemWithoutPutawayReceiving(_mode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddMoveLPButtonForMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if a work execution mode supports the Move License plate button.
    /// </summary>
    /// <param name = "_mode">The work mode.</param>
    /// <returns>true when supported; otherwise, false.</returns>
    public boolean canAddMoveLPButtonForMode(WHSWorkExecuteMode _mode)
    {
        switch (_mode)
        {
            case WHSWorkExecuteMode::Movement:
            case WHSWorkExecuteMode::MovementByTemplate:
            case WHSWorkExecuteMode::WarehouseTransfer:
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddExceptionButtonForMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if a work execution mode supports the Exception button.
    /// </summary>
    /// <param name = "_mode">The work mode.</param>
    /// <returns>true when supported; otherwise, false.</returns>
    public boolean canAddExceptionButtonForMode(WHSWorkExecuteMode _mode)
    {
        switch (_mode)
        {
            case WHSWorkExecuteMode::UserGrouping:
            case WHSWorkExecuteMode::PickPack:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddExceptionButtonForStep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if a step supports the Exception button.
    /// </summary>
    /// <param name = "_step">The step.</param>
    /// <returns>true when supported; otherwise, false.</returns>
    public boolean canAddExceptionButtonForStep(int _step)
    {
        switch (_step)
        {
            case #ReceivingExceptionStep1:
            case #ReceivingExceptionStep2:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddDoneButtonForMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if a work execution mode supports the Done button.
    /// </summary>
    /// <param name = "_mode">The work mode.</param>
    /// <returns>true when supported; otherwise, false.</returns>
    public boolean canAddDoneButtonForMode(WHSWorkExecuteMode _mode)
    {
        switch (_mode)
        {
            case WHSWorkExecuteMode::Movement:
            case WHSWorkExecuteMode::MovementByTemplate:
            case WHSWorkExecuteMode::Quarantine:
            case WHSWorkExecuteMode::LicensePlateReceiving:
            case WHSWorkExecuteMode::LicensePlateReceivingAndLocate:
                return false;
        }

        return !this.isInboundOrderLineOrItemWithoutPutawayReceiving(_mode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddCancelButtonForMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if a work execution mode supports the Cancel button.
    /// </summary>
    /// <param name = "_mode">The work mode.</param>
    /// <returns>true when supported; otherwise, false.</returns>
    public boolean canAddCancelButtonForMode(WHSWorkExecuteMode _mode)
    {
        switch (_mode)
        {
            case WHSWorkExecuteMode::Movement:
            case WHSWorkExecuteMode::MovementByTemplate:
            case WHSWorkExecuteMode::Quarantine:
            case WHSWorkExecuteMode::MaterialConsumption:
            case WHSWorkExecuteMode::TransportLoading:
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddCancelButtonForWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if a work line and pass supports the Cancel button.
    /// </summary>
    /// <param name = "_workLine">The work line.</param>
    /// <param name = "_mode">The work mode.</param>
    /// <param name = "_pass">The pass values.</param>
    /// <returns>true when supported; otherwise, false.</returns>
    public boolean canAddCancelButtonForWorkLine(WHSWorkline _workLine, WHSWorkExecuteMode _mode, WHSRFPassthrough _pass)
    {
        if (_workLine.WorkType == WHSWorkType::Pick)
        {
            switch (_mode)
            {
                case WHSWorkExecuteMode::SystemGrouping:
                    if (_workLine.InventQtyRemain > 0 &&
                        !_pass.exists(#AddDoneButton))
                    {
                        return true;
                    }
                    return false;

                case WHSWorkExecuteMode::PickPack:
                    if (_pass.exists(#TargetWorkId) &&
                        _workLine.WorkId != _pass.lookup(#TargetWorkId))
                    {
                        return false;
                    }
                    //Fall through

                default:
                    if (_workLine.WorkStop ||
                        (_workLine.InventQtyRemain > 0 && !WHSWorkTable::allPicksBeforeFirstPutCompleted(_workLine.WorkId)))
                    {
                        return true;
                    }
                    return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddCancelButtonForWorkType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if a work type supports the Cancel button.
    /// </summary>
    /// <param name = "_workType">The work type.</param>
    /// <returns>true when supported; otherwise, false.</returns>
    public boolean canAddCancelButtonForWorkType(WHSWorkType _workType)
    {
        switch (_workType)
        {
            case WHSWorkType::Pick:
            case WHSWorkType::Put:
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddBackButtonForWorkType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if a work type supports the Back button.
    /// </summary>
    /// <param name = "_workType">The work type.</param>
    /// <returns>true when supported; otherwise, false.</returns>
    public boolean canAddBackButtonForWorkType(WHSWorkType _workType)
    {
        switch (_workType)
        {
            case WHSWorkType::Pick:                  
            case WHSWorkType::Custom:
            case WHSWorkType::Put:                  
            case WHSWorkType::Print:                   
            case WHSWorkType::None:
            case WHSWorkType::PackToNestedLicensePlate:
            case WHSWorkType::QualityCheck:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddShipConfirmButtonForMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if a work execution mode supports the Ship confirm button.
    /// </summary>
    /// <param name = "_mode">The work mode.</param>
    /// <returns>true when supported; otherwise, false.</returns>
    public boolean canAddShipConfirmButtonForMode(WHSWorkExecuteMode _mode)
    {
        switch (_mode)
        {
			case WHSWorkExecuteMode::TransportLoading:
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddShipConfirmButtonForAllowedShipConfirmationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if an allowed ship confirmation type supports the Ship confirm button.
    /// </summary>
    /// <param name = "_allowedShipConfirmationType">
	/// The allowed ship confirmation type.
	/// </param>
    /// <returns>true when supported; otherwise, false.</returns>
    public boolean canAddShipConfirmButtonForAllowedShipConfirmationType(WHSRFAllowedShipConfirmationType _allowedShipConfirmationType)
    {
        switch (_allowedShipConfirmationType)
        {
            case WHSRFAllowedShipConfirmationType::TransportLoad:
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static public WhsWorkExecuteDisplayController construct()
    {
        return new WhsWorkExecuteDisplayController();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>