<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransAccountVoucherDP_FRCalculateForMainAccountQuery</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerTransAccountVoucherDP_FRCalculateForMainAccountQuery</c> class creates queries related to the <c>LedgerTransAccountVoucherDP_FR</c> class.
/// </summary>
public final class LedgerTransAccountVoucherDP_FRCalculateForMainAccountQuery
{
    private MainAccount mainAccount;
    private MainAccountNum fromAccount;
    private MainAccountNum toAccount;
    private boolean includeGroupAccount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize(
        MainAccount _mainAccount,
        MainAccountNum _fromAccount,
        MainAccountNum _toAccount,
        boolean _includeGroupAccount)
    {
        mainAccount = _mainAccount;
        fromAccount = _fromAccount;
        toAccount = _toAccount;
        includeGroupAccount = _includeGroupAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSearchObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects records from the <c>MainAccount</c> table.
    /// </summary>
    /// <param name = "_mainAccount">
    /// The <c>MainAccount</c> buffer.
    /// </param>
    /// <param name = "_fromAccount">
    /// The account range.
    /// </param>
    /// <param name = "toAccount">
    /// The account range.
    /// </param>
    /// <param name = "_includeGroupAccount">
    /// A boolean value.
    /// </param>
    /// <returns>
    /// The selected records.
    /// </returns>
    internal static SysDaSearchObject createSearchObject(
        MainAccount _mainAccount,
        MainAccountNum _fromAccount,
        MainAccountNum toAccount,
        boolean _includeGroupAccount)
    {
        LedgerTransAccountVoucherDP_FRCalculateForMainAccountQuery ledgerTransAccountVoucherDP_FRCalculateForMainAccountQuery = new LedgerTransAccountVoucherDP_FRCalculateForMainAccountQuery();

        ledgerTransAccountVoucherDP_FRCalculateForMainAccountQuery.initialize(_mainAccount, _fromAccount, toAccount, _includeGroupAccount);

        SysDaQueryObject query = ledgerTransAccountVoucherDP_FRCalculateForMainAccountQuery.createQueryObject();
        SysDaSearchObject searchObject = new SysDaSearchObject(query);

        return searchObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject createQueryObject()
    {
        SysDaQueryObject queryObject = this.addFieldsToQueryObjectWhereClause();

        return queryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldsToQueryObjectWhereClause</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the where clause expression to a query.
    /// </summary>
    [Wrappable(true)]
    protected final SysDaQueryObject addFieldsToQueryObjectWhereClause()
    {
        SysDaQueryObject queryObject = new SysDaQueryObject(mainAccount);
        queryObject.orderByClause().add(fieldStr(MainAccount, MainAccountId));

        queryObject.whereClause(new SysDaAndExpression(new SysDaGreaterThanOrEqualsExpression(
            new SysDaFieldExpression(mainAccount, fieldStr(MainAccount, MainAccountId)), new SysDaValueExpression(fromAccount)).or(new SysDaValueExpression(!fromAccount)),
            new SysDaLessThanOrEqualsExpression(new SysDaFieldExpression(mainAccount, fieldStr(MainAccount, MainAccountId)), new SysDaValueExpression(toAccount)).or(new SysDaValueExpression(!toAccount)))
            .and(new SysDaEqualsExpression(new SysDaFieldExpression(mainAccount, fieldStr(MainAccount, Type)), new SysDaValueExpression(DimensionLedgerAccountType::Liability))
                .or(new SysDaEqualsExpression(new SysDaFieldExpression(mainAccount, fieldStr(MainAccount, Type)), new SysDaValueExpression(DimensionLedgerAccountType::Asset)))
                .or(new SysDaEqualsExpression(new SysDaFieldExpression(mainAccount, fieldStr(MainAccount, Type)), new SysDaValueExpression(DimensionLedgerAccountType::BalanceSheet)))
                .or(new SysDaEqualsExpression(new SysDaFieldExpression(mainAccount, fieldStr(MainAccount, Type)), new SysDaValueExpression(DimensionLedgerAccountType::Expense)))
                .or(new SysDaEqualsExpression(new SysDaFieldExpression(mainAccount, fieldStr(MainAccount, Type)), new SysDaValueExpression(DimensionLedgerAccountType::Revenue)))
                .or(new SysDaEqualsExpression(new SysDaFieldExpression(mainAccount, fieldStr(MainAccount, Type)), new SysDaValueExpression(DimensionLedgerAccountType::ProfitAndLoss)))
                .or(new SysDaEqualsExpression(new SysDaFieldExpression(mainAccount, fieldStr(MainAccount, Type)), new SysDaValueExpression(DimensionLedgerAccountType::Equity)))
                .or(new SysDaAndExpression(new SysDaEqualsExpression(new SysDaFieldExpression(mainAccount, fieldStr(MainAccount, Type)), new SysDaValueExpression(DimensionLedgerAccountType::Total)),
                    new SysDaValueExpression(includeGroupAccount))))
            .and(new SysDaEqualsExpression(new SysDaFieldExpression(mainAccount, fieldStr(MainAccount, LedgerChartOfAccounts)), new SysDaValueExpression(LedgerChartOfAccounts::current()))));

        return queryObject;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>