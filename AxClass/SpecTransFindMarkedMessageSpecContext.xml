<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SpecTransFindMarkedMessageSpecContext</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>SpecTransFindMarkedMessageSpecContext</c> class provides a marked transaction error with details on the marking process.
/// </summary>
/// <remarks>
/// Each <c>SpecContext</c> record in turn references another process such as customer accounts.
/// </remarks>
[Export(identifierStr(Dynamics.AX.Application.SpecTransIFindMarkedMessage)),
ExportMetadata(enumStr(SpecTransMarkedByType), enumLiteralStr(SpecTransMarkedByType, SpecContext))]
internal final class SpecTransFindMarkedMessageSpecContext implements SpecTransIFindMarkedMessage
{
    private DataAreaId specCompany;
    private RefRecId specRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void init(DataAreaId _specCompany, RefRecId _specRecId)
    {
        specCompany = _specCompany;
        specRecId = _specRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionMarkedErrorMessage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public str getTransactionMarkedErrorMessage()
    {
        str errorMessage = "@CashManagement:TransactionMarkedByAnotherUser";

        SpecContext specContext = this.findSpecContext();

        // Self-referencing SpecContext would result in an infinite loop
        if (specContext.SourceTableId != tableNum(SpecContext))
        {
            errorMessage = this.findSpecContextSource(specContext).getTransactionMarkedErrorMessage();
        }

        return errorMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentLabel</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public str getDocumentLabel()
    {
        str documentLabel;

        SpecContext specContext = this.findSpecContext();

        // Self-referencing SpecContext would result in an infinite loop
        if (specContext.SourceTableId != tableNum(SpecContext))
        {
            documentLabel = this.findSpecContextSource(specContext).getDocumentLabel();
        }

        return documentLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSpecContext</Name>
				<Source><![CDATA[
    private SpecContext findSpecContext()
    {
        return SpecContext::find(specRecId, specCompany);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSpecContextSource</Name>
				<Source><![CDATA[
    private SpecTransIFindMarkedMessage findSpecContextSource(SpecContext _specContext)
    {
        return SpecTransFindMarkedMessageFactory::newFromSpecRecord(
            _specContext.SourceCompany,
            _specContext.SourceTableId,
            _specContext.SourceRecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>