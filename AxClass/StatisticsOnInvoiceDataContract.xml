<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>StatisticsOnInvoiceDataContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>StatisticsOnInvoiceDataContract</c> class is a data contract for recalculation of statistics on invoices.
/// </summary>
[DataContract]
[SysOperationContractProcessing(classStr(StatisticsOnInvoiceUIBuilder))]
public class StatisticsOnInvoiceDataContract extends SysOperationDataContractBase implements SysOperationValidatable
{
    private FromDate dateFrom;
    private ToDate dateTo;
    private PostingProfileMultiSelection postingProfiles;
    private VendGroupIdMultiSelection vendGroupId;
    private StatisticsOnInvoiceRecalculate recalculate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmDateFrom</Name>
				<Source><![CDATA[
    [DataMember]
    public FromDate parmDateFrom(FromDate _dateFrom = dateFrom)
    {
        dateFrom = _dateFrom;
        return dateFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateTo</Name>
				<Source><![CDATA[
    [DataMember]
    public ToDate parmDateTo(ToDate _dateTo = dateTo)
    {
        dateTo = _dateTo;
        return dateTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecalculate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables the recalculation from the scratch mode (as a contrast to incremental recalculation).
    /// </summary>
    /// <param name = "_recalculate">
    /// The boolean value that indicates that the complete recalculation should be performed for the period.
    /// </param>
    /// <returns>
    /// true, if the complete recalculation should be performed for the period; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Reserved for future use.
    /// </remarks>
    [DataMember, SysOperationControlVisibility(false)]
    public StatisticsOnInvoiceRecalculate parmRecalculate(StatisticsOnInvoiceRecalculate _recalculate = recalculate)
    {
        recalculate = _recalculate;
        return recalculate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingProfiles</Name>
				<Source><![CDATA[
    [DataMember]
    public PostingProfileMultiSelection parmPostingProfiles(PostingProfileMultiSelection _postingProfiles = postingProfiles)
    {
        postingProfiles = _postingProfiles;
        return postingProfiles;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendGroupIds</Name>
				<Source><![CDATA[
    [DataMember]
    public VendGroupIdMultiSelection parmVendGroupIds(VendGroupIdMultiSelection _vendGroupId = vendGroupId)
    {
        vendGroupId = _vendGroupId;
        return vendGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the parameters are valid.
    /// </summary>
    /// <returns>
    /// true if the parameters are valid; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean isValid = true;

        if (!dateFrom)
        {
            isValid = checkFailed("@StatisticsOnInvoice:FromDateValidate");
        }

        if (!dateTo)
        {
            isValid = checkFailed("@StatisticsOnInvoice:ToDateValidate");
        }

        if (dateFrom && dateTo && dateFrom > dateTo)
        {
            isValid = checkFailed("@StatisticsOnInvoice:FromToDateValidate");
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>