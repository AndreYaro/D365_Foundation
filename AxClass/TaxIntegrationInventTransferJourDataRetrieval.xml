<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationInventTransferJourDataRetrieval</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationInventTransferJourDataRetrieval</c> class retrieves data from <c>InventTransferJour</c>, etc.
/// </summary>
[TaxIntegrationDataRetrieval(tableStr(InventTransferJour))]
public class TaxIntegrationInventTransferJourDataRetrieval
    extends TaxIntegrationInventTransferTableDataRetrieval
{
    protected InventTransferJour inventTransferJour;

    protected InventTransferJourLine inventTransferJourLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the document.
    /// </summary>
    /// <returns>The query for the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentQueryObject()
    {
        if (TaxIntegrationConstructWithSourceRecordInventoryFlight::instance().isEnabled()
             && document.getLocalRecord())
        {
            inventTransferJour = document.getLocalRecord();
            return SysDaQueryObjectBuilder::from(this.inventTransferTable)
                .where(this.inventTransferTable, fieldStr(InventTransferTable, TransferId))
                    .isEqualToLiteral(this.inventTransferJour.TransferId)
                .toSysDaQueryObject();
        }
        else
        {
            return SysDaQueryObjectBuilder::from(this.inventTransferJour)
                .where(this.inventTransferJour, fieldStr(InventTransferJour, RecId))
                    .isEqualToLiteral(this.document.getLocalRecId())
                .innerJoin(this.inventTransferTable)
                    .where(this.inventTransferTable, fieldStr(InventTransferTable, TransferId))
                        .isEqualTo(this.inventTransferJour, fieldStr(InventTransferJour, TransferId))
                .toSysDaQueryObject();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineFromLineTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document from <c>InventTransferJourLine</c>.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToLineFromLineTable(TaxIntegrationLineObject _line)
    {
        super(_line);

        _line.setInventoryTransactionId(this.inventTransferJourLine.InventTransId);

        if (this.inventTransferJour.CanceledShipment)
        {
            // Since cancel shipment process will call tax calculation service.
            // To ensure the same tax calculation result with orignial journal, set override sales tax as yes.
            _line.setOverrideSalesTax(NoYes::Yes);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the lines of the document.
    /// </summary>
    /// <returns>The query for the lines of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getLineQueryObject()
    {
        SysDaQueryObject ret = this.getLineQueryObjectWithoutError();
        if (ret)
        {
            return ret;
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineQueryObjectWithoutError</Name>
				<Source><![CDATA[
    protected SysDaQueryObject getLineQueryObjectWithoutError()
    {
        switch (this.inventTransferJour.UpdateType)
        {
            case InventTransferUpdateType::Shipment:
                return SysDaQueryObjectBuilder::from(this.inventTransferJourLine)
                    .where(this.inventTransferJourLine, fieldStr(InventTransferJourLine, VoucherId))
                        .isEqualToLiteral(this.inventTransferJour.VoucherId)
                    .where(this.inventTransferJourLine, fieldStr(InventTransferJourLine, TransferId))
                        .isEqualToLiteral(this.inventTransferJour.TransferId)
                    .innerJoin(this.inventTransferLine)
                        .where(this.inventTransferLine, fieldStr(InventTransferLine, TransferId))
                            .isEqualTo(this.inventTransferJourLine, fieldStr(InventTransferJourLine, TransferId))
                        .where(this.inventTransferLine, fieldStr(InventTransferLine, InventTransId))
                            .isEqualTo(this.inventTransferJourLine, fieldStr(InventTransferJourLine, InventTransId))
                    .outerJoin(this.inventDim) // alternate key
                        .where(this.inventDim, fieldStr(InventDim, inventDimId))
                            .isEqualTo(this.inventTransferLine, fieldStr(InventTransferLine, InventDimId))
                    .toSysDaQueryObject();

            case InventTransferUpdateType::Receive:
                return SysDaQueryObjectBuilder::from(this.inventTransferJourLine)
                    .where(this.inventTransferJourLine, fieldStr(InventTransferJourLine, VoucherId))
                        .isEqualToLiteral(this.inventTransferJour.VoucherId)
                    .where(this.inventTransferJourLine, fieldStr(InventTransferJourLine, TransferId))
                        .isEqualToLiteral(this.inventTransferJour.TransferId)
                    .innerJoin(this.inventTransferLine)
                        .where(this.inventTransferLine, fieldStr(InventTransferLine, TransferId))
                            .isEqualTo(this.inventTransferJourLine, fieldStr(InventTransferJourLine, TransferId))
                        .where(this.inventTransferLine, fieldStr(InventTransferLine, InventTransIdReceive)) // receive
                            .isEqualTo(this.inventTransferJourLine, fieldStr(InventTransferJourLine, InventTransId))
                    .outerJoin(this.inventDim) // alternate key
                        .where(this.inventDim, fieldStr(InventDim, inventDimId))
                            .isEqualTo(this.inventTransferLine, fieldStr(InventTransferLine, InventDimId))
                    .toSysDaQueryObject();

            default:
                return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of the document.
    /// </summary>
    /// <returns>The query for the charges of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentChargeQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.markupTransOfDocument)
            .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransTableId))
                .isEqualToLiteral(this.inventTransferJour.TableId)
            .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransRecId))
                .isEqualToLiteral(this.inventTransferJour.RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of each line.
    /// </summary>
    /// <returns>The query for the charges of each line.</returns>
    [Replaceable]
    protected SysDaQueryObject getLineChargeQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.markupTransOfLine)
            .where(this.markupTransOfLine, fieldStr(MarkupTrans, TransTableId))
                .isEqualToLiteral(this.inventTransferJourLine.TableId)
            .where(this.markupTransOfLine, fieldStr(MarkupTrans, TransRecId))
                .isEqualToLiteral(this.inventTransferJourLine.RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a line of the document.
    /// </summary>
    /// <returns>The constructed line of the document.</returns>
    protected TaxIntegrationLineObject constructLine()
    {
        return TaxIntegrationLineObject::constructOnDocument(
            this.inventTransferJourLine.TableId,
            this.inventTransferJourLine.RecId,
            this.document);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyQuantityAndTransactionAmountToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document's quantity and amount.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyQuantityAndTransactionAmountToLine(TaxIntegrationLineObject _line)
    {
        switch (document.getBusinessProcessDetail())
        {
            case TaxIntegrationBusinessProcessDetail::Shipment:
                _line.setQuantity(this.inventTransferJourLine.QtyShipped);
                break;
            case TaxIntegrationBusinessProcessDetail::Receive:
                _line.setQuantity(this.inventTransferJour.AutoReceiveQty
                    ? this.inventTransferJourLine.QtyShipped
                    : this.inventTransferJourLine.QtyReceived);
                break;
            default:
                break;
        }

        Ledger ledger = Ledger::findByLegalEntity(CompanyInfo::current());
        Amount lineAmount = CurrencyExchangeHelper::amount(_line.getQuantity() * this.inventTransferJourLine.inventTransferLine().UnitPrice, ledger.AccountingCurrency);
        _line.setLineAmount(lineAmount);
        _line.setTransactionAmount(_line.getLineAmount());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>