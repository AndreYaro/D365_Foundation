<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailBusinessPartnerCreateProspectProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailBusinessPartnerCreateProspectProcessor</c> class to creation B2B Prospects from <c>RetailBusinessPartnerOperation</c>.
/// </summary>
internal class RetailBusinessPartnerCreateProspectProcessor extends RetailBusinessPartnerOperationProcessorBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the B2B prospect and returns a container with the operation status and an error message (in case of error).
    /// </summary>
    /// <param name = "_operation">B2B create prospect contract.</param>
    protected void processInternal(RetailBusinessPartnerOperation _operation)
    {
        smmBusRelTable              prospect;
        smmBusRelTypeGroup          relTypeGroup;
        DirPartyRecId               partyRecId;
        DataAreaId                  dataAreaId;

        eventSource.WriteProcessingB2BOperationProcessInternalStarted(_operation.RecId);

        RetailBusinessPartnerCreateProspectExtensions::preCreateProspect(_operation);

        RetailBusinessPartnerCreateProspectContract contract = RetailBusinessPartnerCreateProspectContract::deserialize(_operation.Value);
        if (contract == null)
        {
            throw error(strFmt("@Retail:RetailB2BProspectDeserializationFailed", "root"));
        }

        RetailBusinessPartnerAddressContract addressContract = contract.parmAddress();
        if (addressContract == null)
        {
            throw error(strFmt("@Retail:RetailB2BProspectDeserializationFailed", "addressContract"));
        }

        // Check and set AddressTypeValue as 'Business'.
        if (addressContract.parmAddressTypeValue() == enum2int(logisticsLocationRoleType::None))
        {
            addressContract.parmAddressTypeValue(logisticsLocationRoleType::Business);
        }

        dataAreaId = RetailChannelTable::findByRecId(_operation.Channel).DefaultCustDataAreaId;
        if (!dataAreaId)
        {
            eventSource.WriteProcessingB2BProspectCreateDataAreaIdNotFound(_operation.RecId);
            throw error(strFmt(strFmt("@Retail:RetailB2BProspectDataAreaIdNotFound", _operation.RecId)));
        }
        else
        {
            eventSource.WriteProcessingB2BProspectCreateOperationAssociatedDataAreaId(dataAreaId);
        }

        // As prospects records are saving for current company.
        // So to fix the issue we get the dataAreaId from the prospect records for which the prospect created in channel.
        changecompany(dataAreaId)
        {
            partyRecId = RetailBusinessPartnerCreateProspectExtensions::findExistingPartyRecId(addressContract.parmEmail());

            smmBusRelTypeId b2bBusRelTypeId = smmBusRelTypeGroup::getB2BProspectType();

            if (partyRecId)
            {
                select firstonly RecId
                    from prospect
                    where prospect.Party == partyRecId && prospect.BusRelTypeId == b2bBusRelTypeId;

                if (prospect.RecId)
                {
                    eventSource.WriteProcessingB2BProspectWithEmailAlreadyExists(prospect.RecId);
                    throw error(strFmt("@Retail:RetailB2BProspectAlreadyExistsError", addressContract.parmEmail()));
                }

                // Check if user wants to disable automatic association of B2B prospect's postal address with
                // the existing customer.
                RetailParameters retailParameters = RetailParameters::find(false);
                eventSource.EventWriteDisableB2BProspectAddressAssocWithCustomerFieldStatus(
                    retailParameters.DisableB2BProspectAddressAssocWithCustomer,
                    partyRecId,
                    _operation.RecId,
                    dataAreaId);
                if (!retailParameters.DisableB2BProspectAddressAssocWithCustomer)
                {
                    this.updateCustomerAddress(addressContract, partyRecId);
                }
            }
            else
            {
                partyRecId = this.createParty(contract, _operation.Channel);
            }

            CustTable channelDefaultCustomer = CustTable::find(RetailChannelTable::findByRecId(_operation.Channel).DefaultCustAccount);

            prospect.initValue();
            prospect.BusRelTypeId = b2bBusRelTypeId;
            prospect.Party = partyRecId;
            prospect.BusRelAccount = smmParameters::getNumber(smmNumbSeqUsed::BusRel);
            prospect.CustGroup = channelDefaultCustomer.CustGroup;
            prospect.TaxGroup = addressContract.parmTaxGroup();
            prospect.insert();

            DocuTypeId type = DocuType::typeNote();
            var docType = DocuType::find(type);

            if (!docType)
            {
                throw error(strFmt("@Retail:DocuTypeDoesNotExist", type));
            }

            DocumentManagement::attachNoteToCommon(prospect, type, "@Retail:B2BProspectCommentsLabel", contract.parmComments());

            RetailSmmBusRelTable b2bProspect;

            b2bProspect.initValue();
            b2bProspect.B2BProspectStatus = RetailB2BProspectStatus::Pending;
            b2bProspect.smmBusRelTable = prospect.RecId;
            b2bProspect.CompanyName = contract.parmCompanyName();
            b2bProspect.RetailChannel = _operation.Channel;
            b2bProspect.Department = contract.department();
            b2bProspect.CompanySize = contract.companySize();
            b2bProspect.ProspectType = contract.retailProspectType();
            b2bProspect.IsPromoteProspect = NoYes::No;
            b2bProspect.insert();

            RetailBusinessPartnerCreateProspectExtensions::postCreateProspect(_operation, prospect, b2bProspect);
            eventSource.WriteProcessingB2BOperationProcessInternalCompleted(_operation.RecId, prospect.RecId, b2bProspect.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustomerAddress</Name>
				<Source><![CDATA[
    private void updateCustomerAddress(RetailBusinessPartnerAddressContract _addressContract, RecId _partyId)
    {
        CustTable custTable = CustTable::findByPartyRecId(_partyId);

        if (custTable)
        {
            RetailTransactionServiceCustomer::createAddress(
                custTable.AccountNum,
                custTable.name(),
                _addressContract.parmStreet(),
                _addressContract.parmCity(),
                _addressContract.parmCounty(),
                _addressContract.parmState(),
                _addressContract.parmZipCode(),
                _addressContract.parmThreeLetterISORegionName(),
                _addressContract.parmPhone(),
                null,
                _addressContract.parmUrl(),
                _addressContract.parmTaxGroup(),
                _addressContract.parmAddressTypeValue(),
                _addressContract.parmStreetNumber(),
                _addressContract.parmDistrictName(),
                _addressContract.parmBuildingCompliment(),
                _addressContract.parmIsPrimary());

            eventSource.WriteProcessingB2BProspectUpdateCustomerAddress(custTable.RecId);
        }
        else
        {
            eventSource.WriteProcessingB2BProspectCustTableNotFoundForCreateCustomerAddress(_partyId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParty</Name>
				<Source><![CDATA[
    private DirPartyRecId createParty(RetailBusinessPartnerCreateProspectContract _contract, RetailChannelRecId _channel)
    {
        DirPerson                   person;
        DirPartyContactInfoView     contactInfoView;
        DirPartyPostalAddressView   addressView;
        container                   storeAddressBooks;
        RetailStoreAddressBook      retailStoreAddressBook;

        person.initValue();
        person.Name = strFmt("%1 %2", _contract.parmFirstName(), _contract.parmLastName());
        person.ProfessionalTitle = _contract.jobTitle();
        person.insert();

        DirPersonName::addNewNameToPerson(person.RecId, _contract.parmFirstName(), null, _contract.parmLastName());

        // Assign address books from the store to the customer.
        while select AddressBook, AddressBookType from retailStoreAddressBook
                    where retailStoreAddressBook.StoreRecId == _channel
                    && retailStoreAddressBook.AddressBookType == RetailAddressBookType::Customer
        {
            storeAddressBooks += retailStoreAddressBook.AddressBook;
        }

        DirAddressBookParty::createPartyRelations(person.RecId, storeAddressBooks);

        DirParty dirParty = DirParty::constructFromPartyRecId(person.RecId);

        RetailBusinessPartnerAddressContract addressContract = _contract.parmAddress();

        // Create "Email" contact info
        contactInfoView.Party = person.RecId;
        contactInfoView.Type = LogisticsElectronicAddressMethodType::Email;
        contactInfoView.IsPrimary = NoYes::Yes;
        contactInfoView.Locator = addressContract.parmEmail();
        dirParty.createOrUpdateContactInfo(contactInfoView);

        eventSource.WriteProcessingB2BProspectCreateEmailContact(person.RecId);

        // Create "Phone" contact info
        str phone = addressContract.parmPhone();
        if (phone != null && phone != '')
        {
            contactInfoView.clear();
            contactInfoView.Party = person.RecId;
            contactInfoView.Type = LogisticsElectronicAddressMethodType::Phone;
            contactInfoView.IsPrimary = NoYes::Yes;
            contactInfoView.Locator = phone;
            contactInfoView.LocatorExtension = addressContract.parmPhoneExt();
            dirParty.createOrUpdateContactInfo(contactInfoView);

            eventSource.WriteProcessingB2BProspectCreatePhoneContact(person.RecId);
        }

        // Create "Url" contact info
        str url = addressContract.parmUrl();
        if (url != null && url != '')
        {
            contactInfoView.clear();
            contactInfoView.Party = person.RecId;
            contactInfoView.Type = LogisticsElectronicAddressMethodType::URL;
            contactInfoView.IsPrimary = NoYes::Yes;
            contactInfoView.Locator = url;
            dirParty.createOrUpdateContactInfo(contactInfoView);

            eventSource.WriteProcessingB2BProspectCreateURLContact(person.RecId);
        }

        // Create postal address
        AddressStreet street = addressContract.parmStreet();
        AddressCity city = addressContract.parmCity();
        AddressZipCodeId zipCode = addressContract.parmZipCode();
        AddressStateId state = addressContract.parmState();
        AddressCountyId county = addressContract.parmCounty();
        AddressCountryRegionId country = addressContract.parmThreeLetterISORegionName();
        LogisticsAddressStreetNumber streetNumber = addressContract.parmStreetNumber();
        LogisticsAddressDistrictName districtName = addressContract.parmDistrictName();
        LogisticsAddressBuildingCompliment buildingCompliment = addressContract.parmBuildingCompliment();

        if (street != '' || city != '' || zipCode != '' || state != '' || county != ''
            || country != '' || streetNumber != '' || districtName != '' || buildingCompliment != '')
        {
            addressView.Party = person.RecId;
            addressView.IsPrimary = NoYes::Yes;
            addressView.LocationName = addressContract.parmName();
            addressView.Street = street;
            addressView.City = city;
            addressView.ZipCode = zipCode;
            addressView.State = state;
            addressView.County = county;
            addressView.CountryRegionId = country;
            addressView.StreetNumber = streetNumber;
            addressView.DistrictName = districtName;
            addressView.BuildingCompliment = buildingCompliment;
            addressView.ValidFrom = DateTimeUtil::utcNow();
            addressView.ValidTo = DateTimeUtil::maxValue();

            container roleContainer = [LogisticsLocationRole::findBytype(addressContract.parmAddressTypeValue()).RecId];
        
            dirParty.createOrUpdatePostalAddress(addressView, roleContainer);
            eventSource.WriteProcessingB2BProspectCreatePostalAddress(person.RecId);
        }

        return person.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>