<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesLineTypeHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesLineTypeHelper</c> class is responsible for performing reflection on the <c>PriceDiscResultFields</c> map and getting 
/// the set of fields that trigger price/discount calculation on the <c>SalesLine</c> table. Only one instance of the class should exist so
/// the class is cached.
/// </summary>
public class SalesLineTypeHelper
{
    private Set priceCalcTriggeringFieldsSet = new Set(Types::Integer);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        PriceDiscPolicyFieldMappingCache    fieldMapping = PriceDiscResultFields::tableFieldMapping();
        SalesLine                           salesLine;

        PriceDiscPolicyFieldList originalPriceCalcTriggeringPolicyFieldList = PriceDiscPolicyRule::createInstance(salesLine).priceCalcTriggeringPolicyFieldList();

        var saleslineTable = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetTable(tableStr(SalesLine));

        Enumerator tableMapEnumerator = fieldMapping.parmPolicyTableMapList().getEnumerator();
        while (tableMapEnumerator.moveNext())
        {
            TableId tableMapId = tableMapEnumerator.current();

            var tableMapping = saleslineTable.Mappings.GetObject(tableId2Name(tableMapId));
            if (tableMapping)
            {
                var tableMappingConnectionsEnumerator = tableMapping.Connections.GetEnumerator();
                while (tableMappingConnectionsEnumerator.MoveNext())
                {
                    var mappingConnection = tableMappingConnectionsEnumerator.Current;
                    var priceDiscResultFieldName = mappingConnection.MapField;
                    PriceDiscPolicyField policyField = PriceDiscPolicyField::newTableMapField(tableMapId, fieldName2Id(tableMapId, priceDiscResultFieldName));

                    if (originalPriceCalcTriggeringPolicyFieldList.policyFieldExists(policyField))
                    {
                        var salesLineFieldName = mappingConnection.MapFieldTo;
                        FieldId salesLineFieldId = fieldName2Id(salesLine.TableId, salesLineFieldName);

                        if (salesLineFieldId)
                        {
                            priceCalcTriggeringFieldsSet.add(salesLineFieldId);
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    public static SalesLineTypeHelper instance()
    {
        SysGlobalCache globalCache = appl.globalCache();

        if (!globalCache.isSet(classStr(SalesLineTypeHelper), 0))
        {
            appl.globalCache().set(classStr(SalesLineTypeHelper), 0, new SalesLineTypeHelper());
        }

        return globalCache.get(classStr(SalesLineTypeHelper), 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPriceCalcTriggeringFieldsSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the set of fields that trigger price/disc calculation on the <c>SalesLine</c> table.
    /// </summary>
    /// <returns>
	/// Returns the set of fields on the <c>SalesLine</c> table that trigger price/disc calculation.</returns>
    /// <remarks>
    /// The set of fields on the <c>SalesLine</c> table are gotten via reflection of the <c>PriceDiscResultFields</c> map. 
	/// Since this class is cache, unwanted changes to the priceCalcTriggeringFieldsSet is prevented by creating and returning a new set which is an exact copy of the original.
	/// </remarks>
    public Set getPriceCalcTriggeringFieldsSet() 
    {
        return Set::create(priceCalcTriggeringFieldsSet.pack());
	}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>