<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSControlWeightToConsume</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSControlWeightToConsume</c> class is responsible for handling the weight to consume controls on the mobile device.
/// </summary>
#WHSRF
[WhsControlFactory(#WeightToConsume)]
public class WHSControlWeightToConsume extends WhsControl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public boolean process()
    {
        // Method should not be called for items that are not catch weight enabled.
        if (!PdsGlobal::pdsIsCWItem(pass.lookupStr(#ItemId)))
        {
            return this.fail(Error::wrongUseOfFunction(funcName()));
        }

        WHSTransWeight catchWeight = decRound(WHSWorkExecuteDisplay::str2numDisplay(this.parmData()), InventTable::inventDecimals(pass.lookupStr(#ItemId)));

        if (!PDSCatchWeight::validateInventQty(pass.lookupStr(#ItemId),
                                            catchWeight,
                                            fieldValues.parmQtyToConsume(),
                                            false))
        {
            return this.fail(strFmt("@WAX:Error_InvalidCatchWeight", catchWeight, fieldValues.parmQtyToConsume(), pass.lookupStr(#ItemId)));
        }

        if (mode == WHSWorkExecuteMode::MaterialConsumption
            && WHSInventTable::outboundWeightVarianceMethod(pass.lookupStr(#ItemId)) == WHSOutboundWeightVarianceMethod::Restrict
            && !this.validateRemainingOnHandAndPickedQuantity(pass.lookupStr(#ItemId), fieldValues.parmQtyToConsume(), catchWeight))
        {
            return false;
        }

        fieldValues.insert(WHSWorkExecuteDisplayCatchWeightControls::WeightToConsume, catchWeight);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultValueToBlank</Name>
				<Source><![CDATA[
    protected boolean defaultValueToBlank()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRemainingOnHandAndPickedQuantity</Name>
				<Source><![CDATA[
    private boolean validateRemainingOnHandAndPickedQuantity(ItemId _itemId, PdsCWQty _consumeCWQty, WHSTransWeight _consumeWeight)
    {
        boolean isValid;

        [isValid, errorMessage] = WHSControlWeightToConsume::validateRemainingOnHandAndPickedQuantityForConsumption(pass, _itemId, _consumeCWQty, _consumeWeight);

        if (!isValid)
        {
            return this.fail(errorMessage);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRemainingOnHandAndPickedQuantityForConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates consumption weight tolerances for remaining inventory on hand and picked.
    /// </summary>
    /// <param name = "_pass">The pass through variables for the form.</param>
    /// <param name = "_itemId">The item ID.</param>
    /// <param name = "_consumeCWQty">The consumed handling quantity.</param>
    /// <param name = "_consumeWeight">The consumed weight.</param>
    /// <returns>A container with two values, the first is a <c>boolean</c> true if the remaining on hand and picked quantities are within catch weight tolerances; otherwise, false. 
    /// The second value is a string error message if the validation failed (the first value is <i>false</i>).</returns>
    [Hookable(false)]
    internal static container validateRemainingOnHandAndPickedQuantityForConsumption(WhsrfPassthrough _pass, ItemId _itemId, PdsCWQty _consumeCWQty, WHSTransWeight _consumeWeight)
    {
        InventDim inventDim = _pass.createInventDimFromPass();

        // Some may have been picked
        PmfQtyDataCarrier picked = WHSMaterialConsumptionJournalHelper::getRemainingTransQuantitiesForConsumptionForPick(_pass.lookupStr(#ProdId), _itemId, inventDim);

        if (_consumeCWQty <= picked.parmCwQty())
        {
            if (!PdsCatchWeight::validateInventQty(_itemId, picked.parmInventQty() - _consumeWeight, picked.parmCwQty() - _consumeCWQty, false))
            {
                return [false, strFmt("@WAX:Error_InvalidCatchWeightPickRemaining", picked.parmInventQty() - _consumeWeight, picked.parmCwQty() - _consumeCWQty, _itemId)];
            }
        }
        else
        {
            // Validate portion that is coming from on-hand
            PdsCWQty consumedCWFromOnhand = _consumeCWQty - picked.parmCwQty();
            WHSTransWeight consumedWeightFromOnHand = _consumeWeight - picked.parmInventQty();

            if (!PdsCatchWeight::validateInventQty(_itemId, consumedWeightFromOnHand, consumedCWFromOnhand, false))
            {
                return [false, strFmt("@WAX:Error_InvalidCatchWeightOnHandWeight", consumedWeightFromOnHand, consumedCWFromOnhand, _itemId, picked.parmInventQty(), picked.parmCwQty())];
            }

            PmfQtyDataCarrier onhand = WHSInventOnHand::getWorkPhysicalQuantityByInventDim(_itemId, inventDim);
        
            if (!PdsCatchWeight::validateInventQty(_itemId, onhand.parmInventQty() - consumedWeightFromOnHand, onhand.parmCwQty() - consumedCWFromOnhand, false))
            {
                if (picked.parmCwQty() > 0)
                {
                    return [false, strFmt("@WAX:Error_InvalidCatchWeightOnHandRemaining", onhand.parmInventQty() - consumedWeightFromOnHand, onhand.parmCwQty() - consumedCWFromOnhand, _itemId, picked.parmInventQty(), picked.parmCwQty())];
                }
                else
                {
                    return [false, strFmt("@WAX:Error_InvalidCatchWeightRemaining", onhand.parmInventQty() - consumedWeightFromOnHand, onhand.parmCwQty() - consumedCWFromOnhand, _itemId)];
                }
            }
        }

        return [true];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>