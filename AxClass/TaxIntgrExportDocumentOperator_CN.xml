<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntgrExportDocumentOperator_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntgrExportDocumentOperator_CN</c> is abstraction of export document operator.
/// </summary>
abstract class TaxIntgrExportDocumentOperator_CN
{
    Set         setOfImpactedSource;
    Set         setOfImpactedDocument;
    Set         setOfTargetSource;

    Set         setOfSource;
    Set         setOfDocument;

    RefRecId    historyRecId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs calculation.
    /// </summary>
    /// <param name="_sourceRecId">
    /// The source record id.
    /// </param>
    abstract protected void calculate(RefRecId _sourceRecId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExportDocumentSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the export document source.
    /// </summary>
    /// <param name="_exportDocumentSource">
    /// The export document source.
    /// </param>
    /// <returns>
    /// True if it passed the checking; otherwise, false.
    /// </returns>
    protected boolean checkExportDocumentSource(TaxIntgrExportDocumentSource_CN _exportDocumentSource)
    {
        boolean result = true;
        if (_exportDocumentSource.isWithDocumentExported())
        {
            result = checkFailed("@SYS4002236");
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the actual operation.
    /// </summary>
    /// <param name="_sourceRecId">
    /// The source record id.
    /// </param>
    /// <param name = "_isGenerateFromOriginalDoc">
    /// true if this document is generated based on the original document; otherwise, false. Optional.
    /// </param>
    abstract protected void doOperation(RefRecId _sourceRecId, boolean _isGenerateFromOriginalDoc = false)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOperationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets operation type.
    /// </summary>
    /// <returns>
    /// The operation type.
    /// </returns>
    public TaxIntgrExportDocumentOperationType_CN getOperationType()
    {
        return TaxIntgrExportDocumentOperationType_CN::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the operation history.
    /// </summary>
    protected void initializeHistory()
    {
        historyRecId = TaxIntgrExportDocumentManager_CN::populateExportDocumentHistory(
            setOfImpactedDocument,
            this.getOperationType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeImpactedSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the impacted sources.
    /// </summary>
    protected void initializeImpactedSource()
    {
        setOfImpactedSource = setOfSource;
        setOfImpactedDocument = setOfDocument;

        setOfTargetSource = setOfSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAnyDocumentExported</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there is any document exported.
    /// </summary>
    /// <returns>
    /// True if there is any document exported; otherwise, false.
    /// </returns>
    protected boolean isAnyDocumentExported()
    {
        TaxIntgrExportDocOperationHistoryLine_CN    historyLine;
        TaxIntgrExportDocument_CN                   exportDocument;

        select firstOnly RecId from exportDocument
        exists join historyLine
            where   historyLine.TaxIntgrExportDocOperationHistory_CN == historyRecId
                &&  historyLine.ExportDocumentId == exportDocument.Id
                &&  exportDocument.IsExported == true;

        return (exportDocument.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAnyDocumentSplitOrMerged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there is any document split or merged.
    /// </summary>
    /// <returns>
    /// True if there is any document split or merged; otherwise, false.
    /// </returns>
    protected boolean isAnyDocumentSplitOrMerged()
    {
        TaxIntgrExportDocOperationHistoryLine_CN    historyLine;
        TaxIntgrExportDocument_CN                   exportDocument;
        TaxIntgrExportDocumentOperation_CN          operation;

        select firstOnly RecId from exportDocument
        exists join historyLine
            where   historyLine.TaxIntgrExportDocOperationHistory_CN == historyRecId
                &&  historyLine.ExportDocumentId == exportDocument.Id
        exists join operation
            where   operation.TaxIntgrExportDocument_CN         == exportDocument.RecId
                &&  (operation.OperationType                    == TaxIntgrExportDocumentOperationType_CN::Merge
                    || operation.OperationType                  == TaxIntgrExportDocumentOperationType_CN::Split);

        return (exportDocument.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidateOnEachDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether to perform validation for each document.
    /// </summary>
    /// <returns>
    /// True if needed; otherwise, false.
    /// </returns>
    protected boolean isValidateOnEachDocument()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the validation and operation.
    /// </summary>
    /// <param name = "_isGenerateFromOriginalDoc">
    /// true if the document is generated based on the original document; otherwise, false. Optional.
    /// </param>
    /// <returns>
    /// True if the operation succeeds; otherwise, false.
    /// </returns>
    public boolean operation(boolean _isGenerateFromOriginalDoc = false)
    {
        boolean         result;
        SetEnumerator   targetEnumerator;
        #avifiles

        SysOperationProgress                progressLocal;

        ttsBegin;

        this.initializeImpactedSource();

        this.initializeHistory();

        if (this.validate())
        {
            progressLocal = SysOperationProgress::newGeneral(#AviFormLetter, "@SYS8577", setOfTargetSource.elements());
            targetEnumerator = setOfTargetSource.getEnumerator();
            while (targetEnumerator.moveNext())
            {
                this.calculate(targetEnumerator.current());
                this.doOperation(targetEnumerator.current(), _isGenerateFromOriginalDoc);

                progressLocal.incCount();
            }

            this.removeExistingExportDocument();
            result = true;
        }

        if (result)
        {
            ttsCommit;
        }
        else
        {
            ttsAbort;
        }

        if (progressLocal)
        {
            progressLocal.reset();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmsetOfDocument</Name>
				<Source><![CDATA[
    public Set parmsetOfDocument(Set _setOfDocument = setOfDocument)
    {
        setOfDocument = _setOfDocument;

        return setOfDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSetOfSource</Name>
				<Source><![CDATA[
    public Set parmSetOfSource(Set _setOfSource = setOfSource)
    {
        setOfSource = _setOfSource;

        return setOfSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeExistingExportDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the existing export document.
    /// </summary>
    protected void removeExistingExportDocument()
    {
        TaxIntgrExportDocumentManager_CN::removeExportDocument(historyRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the export document record id.
    /// </summary>
    /// <param name="_sourceRecId">
    /// The source record id.
    /// </param>
    public void setSourceRecId(RefRecId _sourceRecId)
    {
        TaxIntgrExportDocument_CN           exportDocument;
        TaxIntgrExportDocumentOperation_CN  exportDocumentOperation;

        Set setOfSourceLocal = new Set(Types::Int64);
        Set setOfDocLocal = new Set(Types::String);

        setOfSourceLocal.add(_sourceRecId);

        while select Id from exportDocument
        exists join exportDocumentOperation
            where exportDocument.RecId == exportDocumentOperation.TaxIntgrExportDocument_CN
                && exportDocumentOperation.TaxIntgrExportDocumentSource_CN == _sourceRecId
        {
            setOfDocLocal.add(exportDocument.Id);
        }

        this.parmSetOfSource(setOfSourceLocal);
        this.parmsetOfDocument(setOfDocLocal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs validation.
    /// </summary>
    /// <returns>
    /// True if it passed the validation; otherwise, false.
    /// </returns>
    protected boolean validate()
    {
        boolean result = true;

        if (this.isAnyDocumentExported())
        {
            result = checkFailed("@SYS4002236");
        }

        if (result)
        {
            if (this.isValidateOnEachDocument())
            {
                result = this.validateOnEachDocument();
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOnEachDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates for each document.
    /// </summary>
    /// <returns>
    /// True if the validation on each document passed; otherwise, false.
    /// </returns>
    protected boolean validateOnEachDocument()
    {
        TaxIntgrExportDocumentSource_CN exportDocumentSource;

        SetEnumerator enumerator = setOfImpactedSource.getEnumerator();
        boolean result = true;

        //default validation on each source
        while (enumerator.moveNext())
        {
            exportDocumentSource = TaxIntgrExportDocumentSource_CN::find(enumerator.current());
            result = this.checkExportDocumentSource(exportDocumentSource);

            if (!result)
            {
                break;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the instance of <c>TaxIntgrExportDocumentOperator_CN</c>.
    /// </summary>
    /// <param name="_operationType">
    /// The operation type.
    /// </param>
    /// <returns>
    /// The instance of <c>TaxIntgrExportDocumentOperator_CN</c>.
    /// </returns>
    public static TaxIntgrExportDocumentOperator_CN construct(TaxIntgrExportDocumentOperationType_CN _operationType)
    {
        TaxIntgrExportDocumentOperator_CN exportDocumentOperator;

        switch (_operationType)
        {
            case TaxIntgrExportDocumentOperationType_CN::None:
                exportDocumentOperator = new TaxIntgrExportDocumentReset_CN();
                break;

            case TaxIntgrExportDocumentOperationType_CN::Split:
                exportDocumentOperator = new TaxIntgrExportDocumentSplit_CN();
                break;

            case TaxIntgrExportDocumentOperationType_CN::Merge:
                exportDocumentOperator = new TaxIntgrExportDocumentMerge_CN();
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return exportDocumentOperator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operateExportDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Operates the export document.
    /// </summary>
    /// <param name="_operationType">
    /// The operation type.
    /// </param>
    /// <param name="_setSourceContainer">
    /// The source pack.
    /// </param>
    /// <param name="_setDocContainer">
    /// The document pack.
    /// </param>
    /// <returns>
    /// True if the operation succeeds; otherwise, false.
    /// </returns>
    public static boolean operateExportDocument(
        TaxIntgrExportDocumentOperationType_CN _operationType,
        container _setSourceContainer,
        container _setDocContainer = conNull())
    {
        TaxIntgrExportDocumentOperator_CN   operator;
        Set                                 setOfSource;
        Set                                 setOfDocument;

        setOfSource = Set::create(_setSourceContainer);
        //_setDocContainer is not need for all types of operation
        if (_setDocContainer != conNull())
        {
            setOfDocument = Set::create(_setDocContainer);
        }

        operator = TaxIntgrExportDocumentOperator_CN::construct(_operationType);
        operator.parmSetOfSource(setOfSource);
        operator.parmSetOfDocument(setOfDocument);
        return operator.operation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>