<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankModernReconciliationUpgradeWizardTrigger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankModernReconciliationUpgradeWizardTrigger</c> contains the logic to trigger the <c>BankModernReconciliationUpgradeWizard</c>.
/// </summary>
internal final class BankModernReconciliationUpgradeWizardTrigger
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBankModernReconciliationUpgradeWizardExecutionStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the execution status of the <c>BankModernReconciliationUpgradeWizard</c> of current legal entity.
    /// </summary>
    /// <returns>Current <c>BankModernReconciliationUpgradeWizard</c> execution status. </returns>
    internal static BankModernReconciliationUpgradeWizardExecutionStatus getBankModernReconciliationUpgradeWizardExecutionStatus()
    {
        BankParameters bankParameter = BankParameters::find();
        return bankParameter.BankModernReconciliationUpgradeWizardExecutionStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExecutionStatusAndPromptBoxToTriggerWizard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the execution status of the <c>BankModernReconciliationUpgradeWizard</c> and prompts the user to trigger the wizard if it is not executed.
    /// </summary>
    /// <returns>true if the wizard is executed; otherwise, false. </returns>
    internal static boolean checkExecutionStatusAndPromptBoxToTriggerWizard()
    {
        boolean isExecuted;
        switch (BankModernReconciliationUpgradeWizardTrigger::getBankModernReconciliationUpgradeWizardExecutionStatus())
        {
            case BankModernReconciliationUpgradeWizardExecutionStatus::NotExecuted:
                if (BankModernReconciliationUpgradeWizardTrigger::isClassBatchRunning(classNum(BankModernReconciliationUpgradeWizardController)))
                {
                    warning("@Bank:BankModernReconciliationUpgradeWizardIsExecutingInBatchInfo");
                }
                else if (Box::okCancel("@Bank:BankModernReconciliationUpgradeWizardBoxPromptText", DialogButton::Ok) == DialogButton::Ok)
                {
                    MenuFunction menuFunction = new MenuFunction(menuItemDisplayStr(BankModernReconciliationUpgradeWizard), MenuItemType::Display);
                    menuFunction.run();
                }
                break;
            case BankModernReconciliationUpgradeWizardExecutionStatus::Executing:
                warning("@Bank:BankModernReconciliationUpgradeWizardIsExecutingInBatchInfo");
                break;
            case BankModernReconciliationUpgradeWizardExecutionStatus::Executed:
                isExecuted = true;
                break;
            default:
                break;
        }
        return isExecuted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExecutionStatusAndAddInfoForBankStatementForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the execution status of the <c>BankModernReconciliationUpgradeWizard</c> for bank statement form and adds info message.
    /// </summary>
    internal static void checkExecutionStatusAndAddInfoForBankStatementForm()
    {
        switch (BankModernReconciliationUpgradeWizardTrigger::getBankModernReconciliationUpgradeWizardExecutionStatus())
        {
            case BankModernReconciliationUpgradeWizardExecutionStatus::NotExecuted:
                if (BankModernReconciliationUpgradeWizardTrigger::isClassBatchRunning(classNum(BankModernReconciliationUpgradeWizardController)))
                {
                    info("@Bank:BankModernReconciliationUpgradeWizardIsExecutingInBatchInfo");
                }
                else
                {
                    info("@Bank:BankModernReconciliationUpgradeWizardNotExecuted");
                }
                break;
            case BankModernReconciliationUpgradeWizardExecutionStatus::Executing:
                info("@Bank:BankModernReconciliationUpgradeWizardExecuting");
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExecutionStatusAndAddWarning</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the execution status of the <c>BankModernReconciliationUpgradeWizard</c> and adds warning message.
    /// </summary>
    /// <returns>true if the wizard is executed; otherwise, false.</returns>
    internal static boolean checkExecutionStatusAndAddWarning()
    {
        boolean isExecuted;
        switch (BankModernReconciliationUpgradeWizardTrigger::getBankModernReconciliationUpgradeWizardExecutionStatus())
        {
            case BankModernReconciliationUpgradeWizardExecutionStatus::NotExecuted:
                if (BankModernReconciliationUpgradeWizardTrigger::isClassBatchRunning(classNum(BankModernReconciliationUpgradeWizardController)))
                {
                    warning("@Bank:BankModernReconciliationUpgradeWizardIsExecutingInBatchInfo");
                }
                else
                {
                    warning("@Bank:BankModernReconciliationUpgradeWizardNotExecutedBlockingProcess");
                }
                break;
            case BankModernReconciliationUpgradeWizardExecutionStatus::Executing:
                warning("@Bank:BankModernReconciliationUpgradeWizardIsExecutingInBatchInfo");
                break;
            case BankModernReconciliationUpgradeWizardExecutionStatus::Executed:
                isExecuted = true;
                break;
            default:
                break;
        }
        return isExecuted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isClassBatchRunning</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if any class batch job is running.
    /// </summary>
    /// <param name="_classId">The class id.</param>
    /// <returns>true if the class batch is running; otherwise, false.</returns>
    internal static boolean isClassBatchRunning(ClassId _classId)
    {
        Batch batch;
        BatchJob batchJob;
        boolean isRunning;

        select firstonly RecId from batchJob
            where batchJob.Status != BatchStatus::Error
                && batchJob.Status != BatchStatus::Cancelling
                && batchJob.Status != BatchStatus::Canceled
                && batchJob.Status != BatchStatus::Finished
            join RecId from batch
                where batch.ClassNumber == _classId
                    && batch.BatchJobId == batchJob.RecId;

        if (batchJob.RecId)
        {
            isRunning = true;
        }

        return isRunning;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>