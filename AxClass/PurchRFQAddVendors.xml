<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQAddVendors</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class that helps to add vendors to the <c>PurchRFQCaseTable</c>.
/// </summary>
class PurchRFQAddVendors
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addVendorsFromList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a given list of vendors to the <c>PurchRFQCaseTable</c>.
    /// </summary>
    /// <param name="_selectedVendorList">
    /// A list of vendors that are to be added to the <c>PurchRFQCaseTable</c>.
    /// </param>
    /// <param name="_purchRFQCaseTable">
    /// An instance of the <c>PurchRFQCaseTable</c> table.
    /// </param>
    /// <param name="_checkForExistingVendors">
    /// A boolean value specifying whether to check for existing vendors.
    /// </param>
    /// <returns>
    /// true if vendors were added to the <c>PurchRFQCaseTable</c>; otherwise, false.
    /// </returns>
    public static boolean addVendorsFromList(
        List                _selectedVendorList,
        PurchRFQCaseTable   _purchRFQCaseTable,
        boolean             _checkForExistingVendors)
    {
        RecordInsertList    recordInsertList;

        ListEnumerator      vendorsSelected;
        PurchRFQVendLink    rfqVendLink;
        boolean             vendorsAdded;
        boolean             doAnyVendorsExist;

        doAnyVendorsExist = PurchRFQVendLink::doVendorsExistForRFQCase(_purchRFQCaseTable.RFQCaseId);
        vendorsSelected = _selectedVendorList.getEnumerator();

        recordInsertList = new RecordInsertList(tableNum(PurchRFQVendLink));

        ttsBegin;

        while (vendorsSelected.moveNext())
        {
            if (doAnyVendorsExist
                    && _checkForExistingVendors
                    && PurchRFQVendLink::doVendorExistForRFQCase(_purchRFQCaseTable.RFQCaseId, vendorsSelected.current()))
            {
                continue;
            }

            rfqVendLink.RFQCaseId =  _purchRFQCaseTable.RFQCaseId;
            rfqVendLink.VendAccount = vendorsSelected.current();
            rfqVendLink.initFromVendTable(VendTable::find(vendorsSelected.current()));

            recordInsertList.add(rfqVendLink);

            vendorsAdded =true;
        }

        if (vendorsAdded)
        {
            recordInsertList.insertDatabase();
        }

        ttsCommit;

        return vendorsAdded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoPopulateVendors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a list of vendors to the <c>PurchRFQCaseTable</c> based on the procurement category of the lines.
    /// </summary>
    /// <param name="_purchRFQCaseTable">
    /// An instance of the <c>PurchRFQCaseTable</c> table for which vendors are to be auto populated.
    /// </param>
    /// <returns>
    /// Returns true if vendors were added to the <c>PurchRFQCaseTable</c>; otherwise, false.
    /// </returns>
    public static boolean autoPopulateVendors(PurchRFQCaseTable   _purchRFQCaseTable)
    {
        RecordInsertList                recordInsertList;
        VendCurrentVendorSearchRequest  vendCurrentVendorSearchRequest;
        PurchRFQVendLink                rfqVendLink;
        VendTable                       vendTableCurrent;

        QueryBuildDataSource            vendTableDs, purchRFQVendLindkDs;
        QueryRun                        queryRun;
        Query                           query;

        str                             procurementCategories;
        boolean                         vendorsAdded;

        procurementCategories = PurchRFQAddVendors::getProcurementCategories(_purchRFQCaseTable.RFQCaseId);

        if (procurementCategories == "")
        {
            return false;
        }

        vendCurrentVendorSearchRequest = new vendCurrentVendorSearchRequest();

        recordInsertList = new RecordInsertList(tableNum(PurchRFQVendLink));

        vendCurrentVendorSearchRequest.parmCriterionGroup(strMin());
        vendCurrentVendorSearchRequest.parmProcurementCategory(procurementCategories);
        vendCurrentVendorSearchRequest.parmVendCategoryStatusList(enum2str(VendCategoryStatus::Preferred) + ',' + enum2str(VendCategoryStatus::Standard));
        query  = vendCurrentVendorSearchRequest.buildQuery();

        vendTableDs = query.dataSourceTable(tableNum(VendTable));
        purchRFQVendLindkDs= vendTableDs.AddDataSource(tableNum(PurchRFQVendLink));

        purchRFQVendLindkDs.clearLinks();
        purchRFQVendLindkDs.addLink(fieldNum(VendTable, AccountNum), fieldNum(PurchRFQVendLink, VendAccount), vendTableDs.name());
        purchRFQVendLindkDs.joinMode(JoinMode::NoExistsJoin);
        purchRFQVendLindkDs.addRange(fieldNum(PurchRFQVendLink, RFQCaseId)).value(queryvalue(_purchRFQCaseTable.RFQCaseId));

        ttsBegin;

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            vendTableCurrent = queryRun.get(tablenum(VendTable));

            rfqVendLink.clear();
            rfqVendLink.RFQCaseId =  _purchRFQCaseTable.RFQCaseId;
            rfqVendLink.VendAccount = vendTableCurrent.AccountNum;
            rfqVendLink.initFromVendTable(vendTableCurrent);

            recordInsertList.add(rfqVendLink);

            vendorsAdded =true;
        }

        if (vendorsAdded)
        {
            recordInsertList.insertDatabase();
        }

        ttsCommit;

        return vendorsAdded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProcurementCategories</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the procurement category for all the lines in the given <c>PurchRFQCaseTable</c>.
    /// </summary>
    /// <param name="_purchRFQCaseId">
    /// The RFQ case ID for the currrent RFQ.
    /// </param>
    /// <returns>
    /// The procurement category list for all the lines in the given <c>PurchRFQCaseTable</c> in a comma separated string.
    /// </returns>
    protected static str getProcurementCategories(PurchRFQCaseId _purchRFQCaseId)
    {
        PurchRFQCaseLine                purchRFQCaseLine;
        EcoResCategory                  ecoResCategory;
        str                             procurementCategoryList;

        while select Name from ecoResCategory
            group by ecoResCategory.Name
        exists join purchRFQCaseLine
            where ecoResCategory.RecId == purchRFQCaseLine.CategoryId
                && purchRFQCaseLine.RFQCaseId == _purchRFQCaseId
        {
            procurementCategoryList = procurementCategoryList + ecoResCategory.Name + ",";
        }

        // Remove the last comma from the string
        if (procurementCategoryList != "")
        {
            procurementCategoryList = subStr(procurementCategoryList, 0, strLen(procurementCategoryList)-1);
        }

        return procurementCategoryList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>