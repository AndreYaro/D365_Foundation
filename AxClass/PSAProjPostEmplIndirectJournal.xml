<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PsaProjPostEmplIndirectJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PsaProjPostEmplIndirectJournal extends PSAProjPostEmplIndirect
{
    boolean interCompany;
    boolean skipCostComponent;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkLedgerStatusOrig</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the ledger posting status is set not to post.
    /// </summary>
    /// <returns>
    /// true if the project ledger status is equal to the <c>ProjLedgerStatus::None</c> enumeration value;
    /// otherwise, false .
    /// </returns>
    public boolean checkLedgerStatusOrig()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterSalesAccrued</Name>
				<Source><![CDATA[
    protected boolean checkEnterSalesAccrued()
    {
        return projTrans.indirectComponentInvoiceAmount()
                && projTrans.canBeAccrued()
                && this.parmEnterSalesAccrued();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterCostValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the posting requires posting to a cost account and whether a non-zero value has been entered.
    /// </summary>
    /// <returns>
    ///    true if the value for cost is non-zero and the post to the cost account is true; otherwise, false.
    /// </returns>
    protected boolean checkEnterCostValue()
    {
        return (this.parmEnterCost() && (projTrans.indirectCostAmount() != 0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateForecast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns false if the variable <c>intercompany</c> is set to true.
    /// </summary>
    /// <returns>
    /// False in intercompany mode, otherwise calls the base class method.
    /// </returns>
    public boolean checkUpdateForecast()
    {
        if (interCompany)
        {
            return false;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>costEnterCredit</Name>
				<Source><![CDATA[
    protected boolean costEnterCredit()
    {
        boolean ret;

        if (this.parmIntercompanyDueToCompany())
        {
            return false;
        }

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costEnterDebit</Name>
				<Source><![CDATA[
    protected boolean costEnterDebit()
    {
        boolean ret;

        if (this.parmIntercompanyDueToCompany())
        {
            return false;
        }

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndUpdateTrans</Name>
				<Source><![CDATA[
    private void createAndUpdateTrans(ProjEmplTrans _tProjEmplTrans, boolean _isInterCompany = false)
    {
        PSAIndirectCompoundingSetup tIndirectCompoundingSetup;
        PSAIndirectComponentTrans tIndirectTrans;
        ProjEmplTransCost tProjEmplTransCost;
        ProjEmplTransSale tProjEmplTransSale;

        ttsbegin;

        while select tIndirectCompoundingSetup
            group by ComponentId
            where tIndirectCompoundingSetup.ProjComponentGroupId == m_tProjJournalTrans.psaIndirectComponentGroup
        {
            if (!_isInterCompany && !skipCostComponent)
            {
                PSAIndirectComponentTrans::insertCostAmount(m_tProjJournalTrans, tIndirectCompoundingSetup.ComponentId,fundingSourceList, this.parmCostUseOrig());
            }
            PSAIndirectComponentTrans::insertIndirectRevenueAmount(m_tProjJournalTrans, tIndirectCompoundingSetup.ComponentId, fundingSourceList, this.parmsalesUseOrig());
            PSAIndirectComponentTrans::insertIndirectInvoiceAmount(m_tProjJournalTrans, tIndirectCompoundingSetup.ComponentId, fundingSourceList, this.parmsalesUseOrig());
        }

        boolean isCalcIndirectCostForMulFundSrcFlightEnabled = ProjCalcIndirectCostForMulFundSrcFlight::instance().isEnabled();

        // Update indirect cost by <c>TransId</c> and <c>ProjFundingSource</c>
        while select sum(Amount),ProjFundingSource from tIndirectTrans 
            group by tIndirectTrans.ProjFundingSource
            where tIndirectTrans.TransId == m_tProjJournalTrans.TransId
                && tIndirectTrans.IndirectComponentType == PSAIndirectComponentType::Cost
        {
            select firstonly forupdate tProjEmplTransCost
                where tProjEmplTransCost.TransId == m_tProjJournalTrans.TransId
                    && tProjEmplTransCost.FundingSource == tIndirectTrans.ProjFundingSource;

            if (!tProjEmplTransCost && isCalcIndirectCostForMulFundSrcFlightEnabled)
            {
                ProjEmplTrans projEmplTransLoc;

                select firstonly forupdate tProjEmplTransCost
                    where tProjEmplTransCost.FundingSource == tIndirectTrans.ProjFundingSource
                exists join projEmplTransLoc
                    where projEmplTransLoc.TransId == tProjEmplTransCost.TransId
                       && projEmplTransLoc.TransIdRef == m_tProjJournalTrans.TransId;
            }

            if (tProjEmplTransCost)
            {
                tProjEmplTransCost.psaIndirectCost = CurrencyExchangeHelper::amount(tIndirectTrans.Amount, _tProjEmplTrans.CurrencyId);
                tProjEmplTransCost.update();
            }
        }

        // Update indirect invoice by <c>TransId</c> and <c>ProjFundingSource</c>
        while select sum(Amount),ProjFundingSource from tIndirectTrans 
            group by tIndirectTrans.ProjFundingSource
            where tIndirectTrans.TransId == m_tProjJournalTrans.TransId
                  && tIndirectTrans.IndirectComponentType == PSAIndirectComponentType::Invoice
        {
            select firstonly forupdate tProjEmplTransSale
                where tProjEmplTransSale.TransId == m_tProjJournalTrans.TransId
                    && tProjEmplTransSale.FundingSource == tIndirectTrans.ProjFundingSource;

            if (!tProjEmplTransSale && isCalcIndirectCostForMulFundSrcFlightEnabled)
            {
                ProjEmplTrans projEmplTransLoc;

                select firstonly forupdate tProjEmplTransSale
                    where tProjEmplTransSale.FundingSource == tIndirectTrans.ProjFundingSource
                exists join projEmplTransLoc
                    where projEmplTransLoc.TransId == tProjEmplTransSale.TransId
                       && projEmplTransLoc.TransIdRef == m_tProjJournalTrans.TransId;
            }

            if (tProjEmplTransSale)
            {
                tProjEmplTransSale.psaIndirectInvoice = CurrencyExchangeHelper::amount(tIndirectTrans.Amount, _tProjEmplTrans.CurrencyId);
                tProjEmplTransSale.update();
            }
        }

        // Update indirect revenue by <c>TransId</c> and <c>ProjFundingSource</c>
        while select sum(Amount),ProjFundingSource from tIndirectTrans 
            group by tIndirectTrans.ProjFundingSource
            where tIndirectTrans.TransId == m_tProjJournalTrans.TransId
                  && tIndirectTrans.IndirectComponentType == PSAIndirectComponentType::Revenue
        {
            select firstonly forupdate tProjEmplTransSale
                where tProjEmplTransSale.TransId == m_tProjJournalTrans.TransId
                    && tProjEmplTransSale.FundingSource == tIndirectTrans.ProjFundingSource;

            if (!tProjEmplTransSale && isCalcIndirectCostForMulFundSrcFlightEnabled)
            {
                ProjEmplTrans projEmplTransLoc;

                select firstonly forupdate tProjEmplTransSale
                    where tProjEmplTransSale.FundingSource == tIndirectTrans.ProjFundingSource
                exists join projEmplTransLoc
                    where projEmplTransLoc.TransId == tProjEmplTransSale.TransId
                       && projEmplTransLoc.TransIdRef == m_tProjJournalTrans.TransId;
            }

            if (tProjEmplTransSale)
            {
                tProjEmplTransSale.psaIndirectRevenue = CurrencyExchangeHelper::amount(tIndirectTrans.Amount, _tProjEmplTrans.CurrencyId);
                tProjEmplTransSale.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>indirectCreditAccountCostValue</Name>
				<Source><![CDATA[
    protected LedgerDimensionDefaultAccount indirectCreditAccountCostValue(ProjId _sProjId, ProjCategoryId _sCategoryId)
    {
        if (interCompany)
        {
            return ProjPosting::getLedgerDimension(ProjAccountType::PayrollAllocation, '', _sCategoryId, any2int64(0));
        }

        if (this.parmIntercompanyDueToCompany())
        {
            return LedgerInterCompany::findCompanyPair(
                curExt(),
                CompanyInfo::findRecId(this.parmIntercompanyDueToCompany()).DataArea).DestinationCreditLedgerDimension;
        }
        else
        {
            return ProjPosting::getLedgerDimension(ProjAccountType::PayrollAllocation, _sProjId, _sCategoryId, any2int64(0));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>indirectDebitAccountCostValue</Name>
				<Source><![CDATA[
    protected LedgerDimensionDefaultAccount indirectDebitAccountCostValue(ProjId _sProjId, ProjCategoryId _sCategoryId)
    {
        LedgerDimensionAccount sLedgerAccount;
        ProjLedgerStatus eLedgerStatus;
        boolean bToBeCapitalize;

        if (interCompany)
        {
            return ProjPosting::getLedgerDimension(ProjAccountType::CostAccount, '', _sCategoryId, any2int64(0));
        }

        bToBeCapitalize = ProjLineProperty::find(ProjLinePropertySetup::findLinePropertyId(_sProjId, _sCategoryId)).ToBeCapitalize;

        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet:
                sLedgerAccount = bToBeCapitalize
                               ? ProjPosting::getLedgerDimension(ProjAccountType::StatusAccount,
                                                               _sProjId,
                                                               _sCategoryId,
                                                               any2int64(0))
                               : ProjPosting::getLedgerDimension(ProjAccountType::CostAccount,
                                                               _sProjId,
                                                               _sCategoryId,
                                                               any2int64(0));
                break;

            case ProjLedgerStatus::Operations:
                sLedgerAccount = ProjPosting::getLedgerDimension(ProjAccountType::CostAccount,
                                                               _sProjId,
                                                               _sCategoryId,
                                                               any2int64(0));
                break;
        }

        return sLedgerAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>indirectPostingTypeCost</Name>
				<Source><![CDATA[
    protected LedgerPostingType indirectPostingTypeCost(ProjId _sProjId, ProjCategoryId _sCategoryId)
    {
        if (intercompany)
        {
            return LedgerPostingType::ProjCost;
        }

        boolean bToBeCapitalize = ProjLineProperty::find(ProjLinePropertySetup::findLinePropertyId(_sProjId, _sCategoryId)).ToBeCapitalize;

        LedgerPostingType ledgerPostingType;

        switch (projTrans.ledgerStatusCost())
        {
            case ProjLedgerStatus::None :
                    switch (this.parmLedgerStatusCost())
                    {
                        case ProjLedgerStatus::BalanceSheet :
                            if (bToBeCapitalize)
                            {
                                ledgerPostingType = LedgerPostingType::ProjWIPCostvalue;
                            }
                            else
                            {
                                ledgerPostingType = LedgerPostingType::ProjCost;
                            }
                            break;

                        case ProjLedgerStatus::Operations :
                            ledgerPostingType = LedgerPostingType::ProjCost;
                            break;
                    }
                break;
             case ProjLedgerStatus::BalanceSheet :
                    switch (this.parmLedgerStatusCost())
                    {
                        case ProjLedgerStatus::None :
                            ledgerPostingType = LedgerPostingType::ProjPayrollAllocation;
                            break;

                        case ProjLedgerStatus::Operations :
                            ledgerPostingType = LedgerPostingType::ProjCost;
                            break;
                    }
                break;
            case ProjLedgerStatus::Operations :
                    switch (this.parmLedgerStatusCost())
                    {
                        case ProjLedgerStatus::None :
                            ledgerPostingType = LedgerPostingType::ProjPayrollAllocation;
                            break;

                        case ProjLedgerStatus::BalanceSheet :
                            if (bToBeCapitalize)
                            {
                                ledgerPostingType = LedgerPostingType::ProjWIPCostvalue;
                            }
                            break;
                    }
                break;
        }
        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>indirectpostingTypeOffsetCost</Name>
				<Source><![CDATA[
    protected LedgerPostingType indirectpostingTypeOffsetCost()
    {
        if (this.parmIntercompanyDueToCompany())
        {
            return LedgerPostingType::InterCompany;
        }
        else
        {
            return LedgerPostingType::ProjPayrollAllocation;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the ledger journal entries for posting to cost accounts.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>ledgerTransActionsCreate</c> method.
    /// </remarks>
    protected void postCost()
    {
        PSAIndirectComponentTrans tProjindirectTrans;
        LedgerVoucherTransObject oLedgerTransObject;
        ProjTrans oProjTransIndirect;
        ProjCategoryId sCategoryId;
        LedgerVoucherObject ledgerVoucherObject;
        CurrencyExchangeHelper exchangeRateHelper;
        LedgerDimensionDefaultAccount defaultLedgerDimension;
        LedgerDimensionAccount mergedLedgerDimension;
        AmountCur amountCur;
        AmountMST locLedgerCostAmountMST;
        ProjLedger tmpProjLedger;
        ProjEmplTrans projEmplTrans;

        projEmplTrans = ProjEmplTrans::find(projTrans.transId());

        ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();

        exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), ledgerVoucherObject.parmAccountingDate());
        exchangeRateHelper.parmExchangeRate1(this.exchRate());
        exchangeRateHelper.parmExchangeRate2(this.exchRateSecondary());

        while select tProjindirectTrans
            where tProjindirectTrans.TransId == projTrans.transId()
                && tProjindirectTrans.IndirectComponentType == PSAIndirectComponentType::Cost
        {
            oProjTransIndirect = ProjTrans::psaNewProjEmplIndirecTrans(tProjindirectTrans);
            sCategoryId = PSAIndirectComponent::find(tProjindirectTrans.IndirectComponentId).ComponentCategory;

            if (this.costEnterDebit())
            {
                locLedgerCostAmountMST = 0;
                this.postingType(this.indirectPostingTypeCost(projTrans.projId(), sCategoryId));
                amountCur = oProjTransIndirect.transCost();

                if (interCompany == false)
                {
                    tmpProjLedger = ProjLedger::newProjectCost(
                        oProjTransIndirect, 
                        (this.parmCostUseOrig() ? this.parmTransIdOrig() : oProjTransIndirect.transId()),
                        this.parmTransactionOrigin(),
                        this.parmLedgerOrigin(),
                        (this.investmentElimination() ? false : this.parmElimination()),
                        tProjindirectTrans.ProjFundingSource);
                }

                defaultLedgerDimension = this.parmLedgerDimension(this.indirectDebitAccountCostValue(projTrans.projId(), sCategoryId));

                // need to merge the default account with the default dimensions
                mergedLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultLedgerDimension, this.defaultDimension(), ProjFundingSource::find(tProjindirectTrans.ProjFundingSource).DefaultDimension);
                
                oLedgerTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                            ledgerVoucherObject,
                            this.postingType(),
                            mergedLedgerDimension,
                            this.currencyIdCost(),
                            amountCur,
                            exchangeRateHelper);

                oLedgerTransObject.parmQuantity(oProjTransIndirect.qty());
                oLedgerTransObject.parmProjLedger(tmpProjLedger);
                oLedgerTransObject.parmTransTxt(oProjTransIndirect.txt());
                ledgerVoucher.addTrans(oLedgerTransObject);
                locLedgerCostAmountMST += ledgerVoucher.lastAmountMST();
            }

            if (this.costEnterCredit())
            {
                locLedgerCostAmountMST = 0;
                this.postingType(this.indirectpostingTypeOffsetCost());
                amountCur = -oProjTransIndirect.transCost();

                if (interCompany == false)
                {
                    tmpProjLedger = ProjLedger::newProjectCost(
                        oProjTransIndirect, 
                        (this.parmCostUseOrig() ? this.parmTransIdOrig() : oProjTransIndirect.transId()),
                        this.parmTransactionOrigin(),
                        this.parmLedgerOrigin(),
                        (this.investmentElimination() ? false : this.parmElimination()),
                        tProjindirectTrans.ProjFundingSource);
                }

                defaultLedgerDimension = this.parmLedgerDimension(this.indirectCreditAccountCostValue(projTrans.projId(), sCategoryId));
                // need to merge the default account with the default dimensions
                mergedLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultLedgerDimension, this.defaultDimension());

                oLedgerTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                            ledgerVoucherObject,
                            this.postingType(),
                            mergedLedgerDimension,
                            this.currencyIdCost(),
                            amountCur,
                            exchangeRateHelper);

                oLedgerTransObject.parmQuantity(oProjTransIndirect.qty());
                oLedgerTransObject.parmProjLedger(tmpProjLedger);
                oLedgerTransObject.parmTransTxt(oProjTransIndirect.txt());
                ledgerVoucher.addTrans(oLedgerTransObject);
                locLedgerCostAmountMST += ledgerVoucher.lastAmountMST();
            }
        }
        this.ledgerCostAmountMST(locLedgerCostAmountMST);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postNeverLedger</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the posting of ledger journal entries when the ledger posting type is equal to the enumeration value <c>LedgerPostingType::ProjNeverLedger</c>.
    /// </summary>
    /// <remarks>
    ///    This routine is called by the method <c>ledgerTransActionsCreate()</c>.
    /// </remarks>
    public void postNeverLedger()
    {
        PSAIndirectComponentTrans tProjindirectTrans;
        ProjTrans oProjTransIndirect;
        ProjLedger projLedger;
        TransDate transDate;
        Voucher voucher;

        if (ledgerVoucher && ledgerVoucher.findLedgerVoucherObject())
        {
            transDate = ledgerVoucher.findLedgerVoucherObject().parmTransDate();
            if (!transDate)
            {
                transDate = projTrans.transDate();
            }
        }
        else
        {
            transDate = projTrans.transDate();
        }

        if (ledgerVoucher && ledgerVoucher.lastVoucher())
        {
            voucher = ledgerVoucher.lastVoucher();
        }
        else
        {
            voucher = '';
        }

        while select tProjindirectTrans
            where tProjindirectTrans.TransId == projTrans.transId()
                && tProjindirectTrans.IndirectComponentType == PSAIndirectComponentType::Cost
        {
            oProjTransIndirect = ProjTrans::psaNewProjEmplIndirecTrans(tProjindirectTrans);

            projLedger = ProjLedger::newProjectCost(
                oProjTransIndirect, 
                (this.parmCostUseOrig() ? this.parmTransIdOrig() : oProjTransIndirect.transId()),
                this.parmTransactionOrigin(),
                this.parmLedgerOrigin(),
                NoYes::No,
                tProjindirectTrans.ProjFundingSource);

            if (projLedger)
            {
                ProjLedgerUpdate::newNeverLedger(projLedger,
                                                LedgerPostingType::ProjNeverLedger,
                                                this.defaultDimension(),
                                                voucher,
                                                transDate,
                                                oProjTransIndirect.transCostMST()).insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postNoneLedger</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the posting of ledger journal entries when the ledger posting type is equal to the enumeration value <c>LedgerPostingType::ProjNoneLedger</c>.
    /// </summary>
    /// <remarks>
    ///    This routine is called by the method <c>ledgerTransActionsCreate()</c>.
    /// </remarks>
    public void postNoneLedger()
    {
        PSAIndirectComponentTrans tProjindirectTrans;
        ProjTrans oProjTransIndirect;
        ProjLedger projLedger;
        TransDate transDate;
        Voucher voucher;

        if (ledgerVoucher && ledgerVoucher.findLedgerVoucherObject())
        {
            transDate = ledgerVoucher.findLedgerVoucherObject().parmTransDate();
            if (!transDate)
            {
                transDate = projTrans.transDate();
            }
        }
        else
        {
            transDate = projTrans.transDate();
        }

        if (ledgerVoucher && ledgerVoucher.lastVoucher())
        {
            voucher = ledgerVoucher.lastVoucher();
        }
        else
        {
            voucher = '';
        }

        while select tProjindirectTrans
            where tProjindirectTrans.TransId == projTrans.transId()
                && tProjindirectTrans.IndirectComponentType == PSAIndirectComponentType::Cost
        {
            oProjTransIndirect = ProjTrans::psaNewProjEmplIndirecTrans(tProjindirectTrans);

            projLedger = ProjLedger::newProjectCost(
                oProjTransIndirect, 
                (this.parmCostUseOrig() ? this.parmTransIdOrig() : oProjTransIndirect.transId()),
                this.parmTransactionOrigin(),
                this.parmLedgerOrigin(),
                NoYes::No,
                tProjindirectTrans.ProjFundingSource);

            if (projLedger)
            {
                ProjLedgerUpdate::newNoneLedger(projLedger,
                                                LedgerPostingType::ProjNoLedger,
                                                this.defaultDimension(),
                                                voucher,
                                                transDate,
                                                oProjTransIndirect.transCostMST()).insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows for extensibility in creating a transaction posting. The method contains no code.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method before the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmCreateTrans</c> method is true.
    /// </remarks>
    public void projTransCreate()
    {
        ProjEmplTrans tProjEmplTrans;
        boolean isIntercompany = false;

        tProjEmplTrans = ProjEmplTrans::find(m_tProjJournalTrans.TransId);

        if (this.parmIntercompanyDueToCompany())
        {
            isIntercompany = true;
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            if (ProjInvoiceTable::find(PSAContractLineItems::find(tProjEmplTrans.psaContractLineNum).ProjInvoiceProjId).psaContractLines == NoYes::Yes)
            {
                if (PSAContractLineItems::find(tProjEmplTrans.psaContractLineNum).IncludeIndirectCost == NoYes::Yes)
                {
                    if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
                    {
                        this.createAndUpdateTrans(tProjEmplTrans, isIntercompany);
                    }
                }
            }
            else
            {
                if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
                {
                    this.createAndUpdateTrans(tProjEmplTrans, isIntercompany);
                }
            }
        }
        else
        {
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                this.createAndUpdateTrans(tProjEmplTrans, isIntercompany);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIntercompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the posting job to work with an intercompany transaction.
    /// </summary>
    public void setIntercompany()
    {
        interCompany = true;
        this.parmLedgerStatusCost(ProjLedgerStatus::Operations);
        this.parmEnterCost(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common _buffer)
    {
        super(_buffer);
        skipCostComponent = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipCostComponent</Name>
				<Source><![CDATA[
    public boolean parmSkipCostComponent(boolean _skipCostComponent = skipCostComponent)
    {
        skipCostComponent = _skipCostComponent;
        return skipCostComponent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default dimension values from either ProjTrans or Worker
    /// </summary>
    /// <returns>
    /// The default dimension value from the Worker or ProjTrans
    /// </returns>
    public DimensionDefault defaultDimension()
    {
        DimensionDefault defaultDimension;

        if (this.postingType() == LedgerPostingType::ProjPayrollAllocation)
        {
            if(ProjPayrollAllocationAllowsTransDimensionsFlight::instance().isEnabled())
            {
                defaultDimension = super();
            }

            ProjWorkerRecId workerRecId = ResourceFacade::getWorker(projTrans.resource());

            if (workerRecId && HcmWorker::workerStatusServer(workerRecId) == HcmWorkerStatus::Terminated)
            {
                ProjTransPosting projTransPosting;
                select firstOnly DefaultDimension from projTransPosting
                    where projTransPosting.TransId == this.parmAdjRefTransId()
                        && projTransPosting.PostingType == LedgerPostingType::ProjPayrollAllocation;

                defaultDimension = projTransPosting.DefaultDimension;
            }
            else
            {
                utcdatetime projTransDate = DateTimeUtil::newDateTime(projTrans.transDate(), 0);
                DimensionDefault workerDefaultDimension = HcmEmployment::findByWorkerLegalEntity(workerRecId, CompanyInfo::current(), projTransDate).DefaultDimension;

                if (!workerDefaultDimension)
                {
                    workerDefaultDimension = HcmEmployment::findByWorkerLegalEntity(workerRecId, HcmWorkerHelper::getLegalEntity(workerRecId).RecId, projTransDate).DefaultDimension;
                }

                if (FeatureStateProvider::isFeatureEnabled(ProjPayrollAllocationAllowsOnlyWorkerDimensionsFeature::instance()))
                {
                    defaultDimension = workerDefaultDimension;
                }
                else
                {
                    defaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(workerDefaultDimension, defaultDimension, ProjTable::find(projTrans.projId()).DefaultDimension);
                }
            }
        }

        return defaultDimension ? defaultDimension : super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>