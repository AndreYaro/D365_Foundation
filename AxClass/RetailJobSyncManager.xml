<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailJobSyncManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailJobSyncManager</c> class performs advanced management of batch job synchronization using read/write locks.
/// </summary>
internal class RetailJobSyncManager implements System.IDisposable
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

    private const int defaultWaitMilliseconds = 1800000; // Default wait time of 30 minutes. Can be changed with an entry in RetailConfigurationParameters

    private ReqReaderWriterLock readerWriterLock;
    private readonly str lockName;
    private readonly str funcName;
    private boolean isLockAcquired;
    private int waitMilliseconds;
    private str exceptionMessage;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RetailJobSyncManager construct(str _lockName, str _funcName)
    {
        eventSource.EventWriteInventoryPostingCreateLockManager(_lockName, _funcName);

        return new RetailJobSyncManager(_lockName, _funcName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(str _lockName, str _funcName)
    {
        int configuredMaximumDefaultWaitMilliseconds = RetailStatementFeatureControl::getRetailJobSyncManagerMaxWaitMilliseconds();

        this.readerWriterLock = ReqReaderWriterLock::construct();
        this.lockName = _lockName;
        this.funcName = _funcName;
        this.isLockAcquired = false;
        this.waitMilliseconds = (configuredMaximumDefaultWaitMilliseconds > 0) ? configuredMaximumDefaultWaitMilliseconds : defaultWaitMilliseconds;
        this.exceptionMessage = "@Retail:RetailJobSyncManagerExceptionMessageDefault";
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquireLock</Name>
				<Source><![CDATA[
    /// <summary>
    /// Acquires the lock in the specified mode. If there is an error, swallow it and throw our error instead.
    /// </summary>
    /// <param name="lockMode">
    /// The type of lock to be acquired.
    /// </param>
    /// <param name="_waitMilliseconds">
    /// How long the manager should wait to acquire the lock. Set to the instance variable value if not specified.
    /// </param>
    private void acquireLock(ReqAppLockMode lockMode, int _waitMilliseconds = waitMilliseconds)
    {
        System.Diagnostics.Stopwatch stopWatch = new System.Diagnostics.Stopwatch();

        int fromLine;
        int toLine;
        
        fromLine = Global::infologLine() + 1;

        System.Exception ex;

        try
        {
            ttsbegin;

            stopWatch.Start();

            if (lockMode == ReqAppLockMode::Update)
            {
                eventSource.EventWriteInventoryPostingAcquireLock(this.lockName, this.funcName, _waitMilliseconds/1000);

                this.isLockAcquired = readerWriterLock.tryEnterUpdateLock(this.lockName, _waitMilliseconds);
            }

            stopWatch.Stop();

            System.TimeSpan timeSpan = stopWatch.Elapsed;
            real timeWaited = timeSpan.TotalSeconds;

            if (!this.isLockAcquired)
            {
                eventSource.EventWriteInventoryPostingFailedToAcquireLock(this.lockName, this.funcName, timeWaited, _waitMilliseconds/1000);

                throw Exception::Error;
            }
            
            eventSource.EventWriteInventoryPostingLockAcquired(this.lockName, this.funcName, timeWaited);

            ttscommit;
        }
        catch (ex)
        {        
            eventSource.EventWriteInventoryPostingExceptionWhileAcquiringLock(this.lockName, this.funcName, RetailJobSyncManager::exceptionToString(ex));

            // Swallow exceptions by cutting them from the infolog
            toLine = Global::infologLine();
            infolog.cut(fromLine, toLine);

            // Throw our own error
            throw error(strFmt(exceptionMessage, this.lockName));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquireUpdateLock</Name>
				<Source><![CDATA[
    /// <summary>
    /// Acquires the lock as an "update" (Update) lock.
    /// </summary>
    /// <param name="_waitMilliseconds">
    /// How long the manager should wait to acquire the lock. Set to the instance variable value if not specified.
    /// </param>
    public void acquireUpdateLock(int _waitMilliseconds = waitMilliseconds)
    {
        this.acquireLock(ReqAppLockMode::Update, _waitMilliseconds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disposes the current instance of an object.
    /// </summary>
    public void dispose()
    {
        if (readerWriterLock)
        {
            eventSource.EventWriteInventoryPostingDisposeLockManager(this.lockName, this.funcName);

            if (this.isLockAcquired)
            {
                eventSource.EventWriteInventoryPostingReleasingLock(this.lockName, this.funcName);
            }

            readerWriterLock.dispose();
            this.isLockAcquired = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaitMilliseconds</Name>
				<Source><![CDATA[
    public int parmWaitMilliseconds(int _waitMilliseconds = waitMilliseconds)
    {
        this.waitMilliseconds = _waitMilliseconds;
        return this.waitMilliseconds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExceptionMessage</Name>
				<Source><![CDATA[
    public str parmExceptionMessage(str _exceptionMessage = exceptionMessage)
    {
        this.exceptionMessage = _exceptionMessage;
        return this.exceptionMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLockName</Name>
				<Source><![CDATA[
    public str getLockName()
    {
        return this.lockName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsLockAcquired</Name>
				<Source><![CDATA[
    public boolean getIsLockAcquired()
    {
        return this.isLockAcquired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exceptionToString</Name>
				<Source><![CDATA[
    private static str exceptionToString(System.Exception _exception)
    {
        if (_exception != null)
        {
            str exceptionType = _exception.GetType().FullName;
            str stackTrace = _exception.StackTrace != null ? _exception.StackTrace.ToString() : strFmt('Exception stack trace was null. Current stack is: %1', System.Environment::StackTrace);
            str exceptionMessage = _exception.Message != null ? _exception.Message : 'Exception message was null';
            str exceptionToLog = strFmt("Exception Type: %1 / Exception message: %2 / Exception stacktrace: %3", exceptionType, exceptionMessage, stackTrace);

            return exceptionToLog;
        }
        else
        {
            return strFmt('%1 was called with a null exception. Printing the current call stack: %2', funcName(),  System.Environment::StackTrace);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>