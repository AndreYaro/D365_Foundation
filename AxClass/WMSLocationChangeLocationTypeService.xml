<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsLocationChangeLocationTypeService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WMSLocationChangeLocationTypeService</c> class changes the location type of the location.
/// </summary>
public class WmsLocationChangeLocationTypeService extends RunBase
{
    InventLocationId    inventLocationId;
    WMSLocationId       wmsLocationId;
    WMSLocationType     newWMSLocationType;
    WMSLocationType     oldWMSLocationType;
    DataAreaId          wmsLocationDataAreaId;

    DialogField         dialogFieldNewWMSLocationType;
    DialogField         dialogFieldInventLocationId;
    DialogField         dialogFieldWMSLocationId;
    DialogField         dialogFieldOldWMSLocationType;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        inventLocationId, wmsLocationId, newWMSLocationType, oldWMSLocationType, wmsLocationDataAreaId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the description from the current class by calling the static description method on the
    /// class if there is one.
    /// </summary>
    /// <returns>
    /// The description from the current class.
    /// </returns>
    /// <remarks>
    /// This method can be overridden to give a more precise description, for example, when you need some
    /// internal variables to build the description text.The static <c>RunBase::description</c> method is
    /// used to obtain the description of a class, because you do not have to create an instance of the
    /// class to call it. The method speeds up displaying the description in a grid, for example.
    /// </remarks>
    public ClassDescription caption()
    {
        return "@SYS329680";
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventoryValueByLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there are no any open inventory transactions that exist against the current location.
    /// </summary>
    /// <returns>
    /// true if there are no any open inventory transactions that exist against the current location;
    /// otherwise, false.
    /// </returns>
    public boolean checkInventoryValueByLocation()
    {
        boolean     ret = true;
        InventSum   inventSum;
        
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            select firstonly RecId from inventSum
            where inventSum.ClosedQty == NoYes::No
                && inventSum.wmsLocationId == wmsLocationId
                && inventSum.InventLocationId == inventLocationId;
        }
        else
        {
            InventDim   inventDim;

            select firstonly RecId from inventSum
            where inventSum.ClosedQty == NoYes::No
            exists join inventDim
                where inventDim.InventDimId == inventSum.InventDimId
                    && inventDim.wmsLocationId == wmsLocationId
                    && inventDim.InventLocationId == inventLocationId;
        }

        if (inventSum.RecId)
        {
            ret = checkFailed("@SYS329685");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLoad</Name>
				<Source><![CDATA[
    protected void deleteLoad()
    {
        WMSLocationLoad::deleteLoad(wmsLocationId, inventLocationId, wmsLocationDataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = super();

        dialogFieldInventLocationId = dialog.addFieldValue(
            identifierStr(InventLocationId),
            inventLocationId,
            "@SYS6437");

        dialogFieldWMSLocationId = dialog.addFieldValue(
            identifierStr(WMSLocationId),
            wmsLocationId,
            "@SYS101242");

        dialogFieldOldWMSLocationType = dialog.addFieldValue(
            identifierStr(WMSLocationType),
            oldWMSLocationType,
            "@SYS329684");

        dialogFieldNewWMSLocationType = dialog.addFieldValue(
            identifierStr(WMSLocationType),
            newWMSLocationType,
            "@SYS329683");

        dialogFieldInventLocationId.allowEdit(false);
        dialogFieldWMSLocationId.allowEdit(false);
        dialogFieldOldWMSLocationType.allowEdit(false);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = true;
        str     messageStr;

        newWMSLocationType = dialogFieldNewWMSLocationType.value();

        if ( WMSLocation::trackPhysicalLoadFromLocationType(oldWMSLocationType)
        && !WMSLocation::trackPhysicalLoadFromLocationType(newWMSLocationType))
        {
            messageStr = strFmt("@SYS329682", oldWMSLocationType, newWMSLocationType);

            if (Box::okCancel(messageStr, DialogButton::Ok, "@SYS329680") != DialogButton::Ok)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    public void getLast()
    {
        // do nothing
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustTrackPhysicalLoadOnNewLocation</Name>
				<Source><![CDATA[
    protected boolean mustTrackPhysicalLoadOnNewLocation()
    {
        return WMSLocation::trackPhysicalLoadFromLocationType(newWMSLocationType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    public InventLocationId parmInventLocationId(InventLocationId _inventLocationId = inventLocationId)
    {
        inventLocationId = _inventLocationId;

        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewWMSLocationType</Name>
				<Source><![CDATA[
    public WMSLocationType parmNewWMSLocationType(WMSLocationType _newWMSLocationType = newWMSLocationType)
    {
        newWMSLocationType = _newWMSLocationType;

        return newWMSLocationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOldWMSLocationType</Name>
				<Source><![CDATA[
    public WMSLocationType parmOldWMSLocationType(WMSLocationType _oldWMSLocationType = oldWMSLocationType)
    {
        oldWMSLocationType = _oldWMSLocationType;

        return oldWMSLocationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWmsLocationDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId parmWmsLocationDataAreaId(DataAreaId _wmsLocationDataAreaId = wmsLocationDataAreaId)
    {
        wmsLocationDataAreaId = _wmsLocationDataAreaId;

        return wmsLocationDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWmsLocationId</Name>
				<Source><![CDATA[
    public WMSLocationId parmWmsLocationId(WMSLocationId _wmsLocationId = wmsLocationId)
    {
        wmsLocationId = _wmsLocationId;

        return wmsLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        this.unpack(WMSLocationChangeLocationTypeService::runOnServer(this.pack()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>runInternal</Name>
				<Source><![CDATA[
    protected void runInternal()
    {
        if (this.checkInventoryValueByLocation())
        {
            this.updateWMSLocationType();

            if (this.mustTrackPhysicalLoadOnNewLocation())
            {
                this.updateLoad();
            }
            else
            {
                this.deleteLoad();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    public void saveLast()
    {
        // do nothing
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCaller</Name>
				<Source><![CDATA[
    protected void updateCaller(Args _args)
    {
        if (_args.caller() && _args.caller() is FormRun
        && formHasMethod(_args.caller(), identifierStr(refresh)))
        {
            _args.caller().refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLoad</Name>
				<Source><![CDATA[
    protected void updateLoad()
    {
        WMSLocationFixLoad  wmsLocationFixLoad;

        wmsLocationFixLoad = WMSLocationFixLoad::construct(inventLocationId, wmsLocationId, newWMSLocationType, wmsLocationDataAreaId);

        wmsLocationFixLoad.fixLoad();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWMSLocationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the current location with the new location type.
    /// </summary>
    public void updateWMSLocationType()
    {
        WMSLocation wmsLocation;

        ttsbegin;

        wmsLocation = WMSLocation::find(wmsLocationId, inventLocationId, true);
        wmsLocation.LocationType = newWMSLocationType;
        wmsLocation.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WMSLocationChangeLocationTypeService construct()
    {
        return new WMSLocationChangeLocationTypeService();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        WMSLocationChangeLocationTypeService    wmsLocationChangeLocationTypeService;

        wmsLocationChangeLocationTypeService = WMSLocationChangeLocationTypeService::newFromArgs(_args);

        if (wmsLocationChangeLocationTypeService.prompt())
        {
            wmsLocationChangeLocationTypeService.runOperation();

            wmsLocationChangeLocationTypeService.updateCaller(_args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromArgs</Name>
				<Source><![CDATA[
    public static WMSLocationChangeLocationTypeService newFromArgs(Args _args)
    {
        WMSLocationChangeLocationTypeService    wmsLocationChangeLocationTypeService = WMSLocationChangeLocationTypeService::construct();
        WMSLocation                             wmsLocation;

        if (_args && _args.record() is WMSLocation)
        {
            wmsLocation = _args.record() as WMSLocation;

            wmsLocationChangeLocationTypeService.parmInventLocationId(wmsLocation.InventLocationId);
            wmsLocationChangeLocationTypeService.parmWmsLocationId(wmsLocation.wmsLocationId);
            wmsLocationChangeLocationTypeService.parmOldWMSLocationType(wmsLocation.LocationType);
            wmsLocationChangeLocationTypeService.parmWmsLocationDataAreaId(wmsLocation.DataAreaId);
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return wmsLocationChangeLocationTypeService;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPackedClass</Name>
				<Source><![CDATA[
    public static WMSLocationChangeLocationTypeService newFromPackedClass(container _packedClass)
    {
        WMSLocationChangeLocationTypeService wmsLocationChangeLocationTypeService;

        wmsLocationChangeLocationTypeService = WMSLocationChangeLocationTypeService::construct();
        wmsLocationChangeLocationTypeService.unpack(_packedClass);

        return wmsLocationChangeLocationTypeService;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    public static container runOnServer(container _packedClass)
    {
        WMSLocationChangeLocationTypeService wmsLocationChangeLocationTypeService;

        wmsLocationChangeLocationTypeService = WMSLocationChangeLocationTypeService::newFromPackedClass(_packedClass);

        wmsLocationChangeLocationTypeService.runInternal();

        return wmsLocationChangeLocationTypeService.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>