<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashReportDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CashReportDP</c> class provides data for the <c>CashReport_PL</c> report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(CashReport))
]
class CashReportDP extends SRSReportDataProviderBase
{
    CashReportHeaderTmp cashReportHeader;
    CashReportLinesTmp  cashReportLines;
    RCashReportJour_PL  cashReportJour;
    RCashTrans          cashTrans;

    Integer             qtyPayIn;
    Integer             qtyPayOut;
    AmountCur           closingAmount;
    int                 recordNum;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTmpTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the temporary line transaction for cash report.
    /// </summary>
    /// <param name="_queryRun">
    ///     The queryRun object.
    /// </param>
    protected void createTmpTransactions(QueryRun _queryRun)
    {
        cashTrans = _queryRun.get(tableNum(RCashTrans));
        if (_queryRun.changed(tableNum(RCashTrans)))
        {
            this.insertIntoCashReportLinesTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashReportHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CashReportHeaderTmp</c> table buffer.
    /// </summary>
    /// <returns>
    /// The <c>CashReportHeaderTmp</c> table buffer.
    /// </returns>
    [
        SrsReportDataSet(tablestr(CashReportHeaderTmp))
    ]
    public CashReportHeaderTmp getCashReportHeaderTmp()
    {
        select cashReportHeader;
        return cashReportHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashReportLinesTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CashReportLinesTmp</c> table buffer.
    /// </summary>
    /// <returns>
    /// The <c>CashReportLinesTmp</c> table buffer.
    /// </returns>
    [
        SrsReportDataSet(tablestr(CashReportLinesTmp))
    ]
    public CashReportLinesTmp getCashReportLinesTmp()
    {
        select cashReportLines;
        return cashReportLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIssueAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the issue amount in transaction currency.
    /// </summary>
    /// <returns>
    /// Amount in transaction currency.
    /// </returns>
    /// <remarks>
    /// Derived classes can override this method to provide country/region specific variations.
    /// </remarks>
    protected AmountCur getIssueAmount()
    {
        return cashTrans.AmountCur < 0 ? - cashTrans.AmountCur : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOpeningAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the opening amount for the report instance.
    /// </summary>
    /// <returns>
    /// The opening amount is the total amount of previous cash transactions for the same cash account and
    /// currency code.
    /// </returns>
    /// <remarks>
    /// A previous cash transaction is the one with lower transaction date or same transaction date and
    /// lower report number.
    /// </remarks>

    protected AmountCur getOpeningAmount()
    {
        RCashReportJour_PL reportJour;
        RCashTrans         cashTransLocal;
        AmountCur          openingAmount;

        while select AccountNum, ReportNum, CurrencyCode from reportJour
            index hint TransDateIdx
            where reportJour.AccountNum    == cashReportJour.AccountNum
               && reportJour.ReportNum     != cashReportJour.ReportNum
               && reportJour.CurrencyCode  == cashReportJour.CurrencyCode
               && (reportJour.TransDate     < cashReportJour.TransDate
                || (reportJour.TransDate     == cashReportJour.TransDate
                    && reportJour.ReportNum     < cashReportJour.ReportNum))
        {
            select sum(AmountCur) from cashTransLocal
                where cashTransLocal.AccountNum   == reportJour.AccountNum
                   && cashTransLocal.ReportNum_PL == reportJour.ReportNum
                   && cashTransLocal.CurrencyCode == reportJour.CurrencyCode
                   && cashTransLocal.TransStatus  == RCashTransStatus::Approved;

            openingAmount += cashTransLocal.AmountCur;
        }

        return openingAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreparedBy</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the name of the user who created the cash report.
    /// </summary>
    /// <returns>
    ///     Name of the user.
    /// </returns>
    protected UserName getPreparedBy()
    {
        return cashReportJour.PreparedBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides an opportunity to change the cash report query.
    /// </summary>
    /// <returns>
    /// The query to retrieve data for cash report.
    /// </returns>
    protected Query getQuery()
    {
        return this.parmQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRevenueAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the revenue amount in transaction currency.
    /// </summary>
    /// <returns>
    /// Amount in transaction currency.
    /// </returns>
    /// <remarks>
    /// Derived classes can override this method to provide country/region specific variations.
    /// </remarks>
    protected AmountCur getRevenueAmount()
    {
        return cashTrans.AmountCur > 0 ? cashTrans.AmountCur : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCashReportHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the <c>CashReportHeaderTmp</c> table.
    /// </summary>
    /// <returns>
    ///     The <c>CashReportHeaderTmp</c> table buffer.
    /// </returns>
    protected CashReportHeaderTmp initializeCashReportHeaderTmp()
    {
        CompanyInfo companyInfo = CompanyInfo::find();

        cashReportHeader.CompanyName    = companyInfo.Name;
        cashReportHeader.CompanyAddress = companyInfo.postalAddress().Address;
        cashReportHeader.OpeningAmount  = this.getOpeningAmount();
        cashReportHeader.PreparedBy     = this.getPreparedBy();
        cashReportHeader.ApprovedBy     = cashReportJour.ApprovedBy;
        cashReportHeader.AccountNum     = cashReportJour.AccountNum;
        cashReportHeader.TransDate      = cashReportJour.TransDate;
        cashReportHeader.ReportNum      = cashReportJour.ReportNum;
        cashReportHeader.CurrencyCode   = cashReportJour.CurrencyCode;

        return cashReportHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCashReportLinesTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the <c>CashReportLinesTmp</c> table.
    /// </summary>
    /// <returns>
    ///     The <c>CashReportLinesTmp</c> table buffer.
    /// </returns>
    protected CashReportLinesTmp initializeCashReportLinesTmp()
    {
        recordNum++;
        cashReportLines.clear();
        cashReportLines.Voucher             = cashTrans.Voucher;
        cashReportLines.CurrencyCode        = cashTrans.CurrencyCode;
        cashReportLines.Txt                 = cashTrans.Txt;
        cashReportLines.DocId               = cashTrans.DocId;
        cashReportLines.TransDate           = cashTrans.TransDate;
        cashReportLines.RevenueAmountCur    = this.getRevenueAmount();
        cashReportLines.IssueAmountCur      = this.getIssueAmount();
        cashReportLines.AmountCur           = cashTrans.AmountCur;
        cashReportLines.OffsetMainAccountId = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(cashTrans.OffsetLedgerDimension);
        cashReportLines.RecordNum           = recordNum;
        return cashReportLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoCashReportHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record into <c>CashReportHeaderTmp</c> table.
    /// </summary>
    /// <param name="_queryRun">
    /// The query run object.
    /// </param>
    /// <returns>
    /// The inserted <c>CashReportHeaderTmp</c> table buffer.
    /// </returns>
    protected CashReportHeaderTmp insertIntoCashReportHeaderTmp(QueryRun _queryRun)
    {
        cashReportJour   = _queryRun.get(tableNum(RCashReportJour_PL));
        cashReportHeader = this.initializeCashReportHeaderTmp();

        cashReportHeader.insert();
        return cashReportHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoCashReportLinesTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record into <c>CashReportLinesTmp</c> table.
    /// </summary>
    /// <returns>
    /// The inserted <c>CashReportLinesTmp</c> table buffer.
    /// </returns>
    protected CashReportLinesTmp insertIntoCashReportLinesTmp()
    {
        cashReportLines = this.initializeCashReportLinesTmp();
        cashReportLines.insert();

        return cashReportLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loopThroughTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Traverses through the records fetched by the query and creates transactions
    /// in temporary tables to be used by the report.
    /// </summary>
    /// <param name="_queryRun">
    /// The <c>QueryRun</c> object for the query.
    /// </param>
    protected void loopThroughTransactions(QueryRun _queryRun)
    {
        boolean headerCreated;
        ttsBegin;
        while (_queryRun.next())
        {
            if (!headerCreated)
            {
                this.insertIntoCashReportHeaderTmp(_queryRun);
                headerCreated = true;
            }
            this.createTmpTransactions(_queryRun);
            this.updateTotals();
        }
        this.saveTotals();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by SSRS at
    /// runtime. The method computes data and populates the data tables that will be returned to SSRS. Note
    /// that this is a framework class. customizing this class may cause problems with future upgrades to
    /// the software.
    /// </remarks>
    public void processReport()
    {
        QueryRun queryRun = new queryRun(this.getQuery());
        this.loopThroughTransactions(queryRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Commits the totals to the <c>CashReportHeaderTmp</c> table buffer after the
    /// records fetched by the query have been processed.
    /// </summary>
    protected void saveTotals()
    {
        if (cashReportHeader)
        {
            cashReportHeader.selectForUpdate(true);
            cashReportHeader.QtyIn          = qtyPayIn;
            cashReportHeader.QtyOut         = qtyPayOut;
            cashReportHeader.ClosingAmount  = closingAmount + cashReportHeader.OpeningAmount;
            cashReportHeader.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the totals as each record fetched by the query is processed.
    /// </summary>
    protected void updateTotals()
    {
        if (cashTrans.AmountCur >= 0)
        {
            qtyPayIn ++;
        }
        else
        {
            qtyPayOut ++;
        }

        closingAmount += cashTrans.AmountCur;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>