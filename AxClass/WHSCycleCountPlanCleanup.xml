<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSCycleCountPlanCleanup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSCycleCountPlanCleanup</c> class is used to run batch job to cleanup cycle count plan batch records.
/// </summary>
public class WHSCycleCountPlanCleanup extends RunBaseBatch implements BatchRetryable, SysErrorMessageHelpScopeIBatchProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        BatchJob                    batchJob;
        WHSCycleCountPlanOverview   cycleCountPlanOverview;

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextBatchServer(this))
        {
            ttsbegin;

            while select forUpdate cycleCountPlanOverview
            {
                if (cycleCountPlanOverview.CycleCountPlanStatus != WHSCycleCountPlanStatus::Closed &&
                    cycleCountPlanOverview.BatchJobRecId            > 0)
                {
                    select firstOnly forUpdate batchJob
                        where batchJob.RecId == cycleCountPlanOverview.BatchJobRecId;

                    container con = SysRecurrence::next(batchJob.recurrenceData, BatchRun::getBatchJobHistoryCount(cycleCountPlanOverview.BatchJobRecId));

                    if (con == conNull() || (con != conNull() && conPeek(con, 1) < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())))
                    {
                        cycleCountPlanOverview.CycleCountPlanStatus     = WHSCycleCountPlanStatus::Closed;
                        cycleCountPlanOverview.ClosedDateTime           = DateTimeUtil::utcNow();
                        cycleCountPlanOverview.BatchJobRecId            = 0;

                        BatchJobHistory::deleteJobHistory(batchJob.RecId);

                        batchJob.delete();
                    }
                    else
                    {
                        cycleCountPlanOverview.LastRanDateTime = DateTimeUtil::utcNow();
                    }

                    cycleCountPlanOverview.update();
                }
                else if (cycleCountPlanOverview.BatchJobRecId)
                {
                    select firstOnly forUpdate batchJob
                        where batchJob.RecId == cycleCountPlanOverview.BatchJobRecId;

                    cycleCountPlanOverview.BatchJobRecId = 0;
                    cycleCountPlanOverview.update();

                    BatchJobHistory::deleteJobHistory(batchJob.RecId);

                    batchJob.delete();
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static WHSCycleCountPlanCleanup construct()
    {
        return new WHSCycleCountPlanCleanup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@WAX4010";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        WHSCycleCountPlanCleanup cycleCountPlanCleanup = WHSCycleCountPlanCleanup::construct();

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextBatchController(cycleCountPlanCleanup))
        {
            if (cycleCountPlanCleanup.prompt())
            {
                cycleCountPlanCleanup.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeFormName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the form name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The form name used for the error context.</returns>
    [Hookable(false)]
    public FormName errorMessageHelpScopeFormName()
    {
        return strFmt('%1_%2', formStr(Dialog), classStr(WHSCycleCountPlanCleanup));
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeActionName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the action name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The action name used for the error context.</returns>
    [Hookable(false)]
    public str errorMessageHelpScopeActionName()
    {
        return menuItemActionStr(WHSCycleCountPlanCleanup);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>