<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchDocumentStatusConsistencyCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchDocumentStatusConsistencyCheck</c> class is a consistency check that verifies if the purchase order header document status corresponds to the
/// document created farthest in the engagement process.
/// </summary>
public class PurchDocumentStatusConsistencyCheck extends SysConsistencyCheck implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    configurationKeyId configurationKey()
    {
        return configurationkeynum(LogisticsBasic);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executionOrder</Name>
				<Source><![CDATA[
    Integer executionOrder()
    {
        return 30;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        Query purchaseOrderQuery = this.buildPurchaseOrdersQuery();
        QueryRun purchaseOrderQueryRun = new QueryRun(purchaseOrderQuery);

        progress.setTotal(QueryRun::getQueryRowCount(purchaseOrderQuery, maxInt()));
        
        info(strFmt("@ProcurementAndSourcing:PurchDocumentStatusConsistencyCheck_FoundToCheckTotal", int2Str(QueryRun::getQueryRowCount(purchaseOrderQuery, maxInt()))));

        while (purchaseOrderQueryRun.next())
        {
            PurchTable purchaseOrder = purchaseOrderQueryRun.get(tableNum(PurchTable));
            progress.setText(strFmt("@ProcurementAndSourcing:PurchDocumentStatusConsistencyCheck_ProgressUpdateText", purchaseOrder.PurchId));
            progress.incCount();

            setPrefix(strFmt("@ProcurementAndSourcing:PurchDocumentStatusConsistencyCheck_PurchOrderLogSectionTitle", purchaseOrder.PurchId));
            int statusErrorsFixed = this.fixPurchaseOrderDocumentStatus(purchaseOrder);
            if (statusErrorsFixed > 0)
            {
                info("@ProcurementAndSourcing:PurchDocumentStatusConsistencyCheck_DocumentStatusIsFixed");
                this.updateCorrected(statusErrorsFixed);
            }
        }

        this.updateNotCorrected();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@ProcurementAndSourcing:PurchDocumentStatusConsistencyCheck_Description";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    static HelpTxt helpText()
    {
        return "@ProcurementAndSourcing:PurchDocumentStatusConsistencyCheck_HelpText";
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
    ClassId treeParentClassId()
    {
        return classNum(PurchRootConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixPurchaseOrderDocumentStatus</Name>
				<Source><![CDATA[
    private int fixPurchaseOrderDocumentStatus(PurchTable _purchaseOrder)
    {
        int statusErrorsFixed;

        DocumentStatus correctDocumentStatus = _purchaseOrder.findCorrectDocumentStatus();
        
        if (correctDocumentStatus != _purchaseOrder.DocumentStatus
            && !(correctDocumentStatus == DocumentStatus::PackingSlip 
                && _purchaseOrder.DocumentStatus == DocumentStatus::ReceiptsList))
        {
            warning(strFmt(
                    "@ProcurementAndSourcing:PurchDocumentStatusConsistencyCheck_InvalidDocumentStatusDetectedForOrder",
                    enum2Str(_purchaseOrder.DocumentStatus),
                    enum2Str(correctDocumentStatus)));

            if (this.checkFix() == CheckFix::Fix)
            {
                this.updateDocumentStatus(_purchaseOrder, correctDocumentStatus);
                statusErrorsFixed++;
            }
        }

        return statusErrorsFixed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocumentStatus</Name>
				<Source><![CDATA[
    private void updateDocumentStatus(PurchTable _purchaseOrder, DocumentStatus _documentStatus)
    {
        #OCCRetryCount

        try
        {
            _purchaseOrder.updateDocumentStatus(_documentStatus);
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() != 0)
            {
                throw Exception::UpdateConflict;
            }
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::UpdateConflictNotRecovered;
            }
            retry;
        }
        catch (Exception::DuplicateKeyException)
        {
            if (appl.ttsLevel() != 0)
            {
                throw Exception::DuplicateKeyException;
            }
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::DuplicateKeyExceptionNotRecovered;
            }
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPurchaseOrdersQuery</Name>
				<Source><![CDATA[
    private Query buildPurchaseOrdersQuery()
    {
        Query query = new Query();

        QueryBuildDataSource qbds = query.addDataSource(tableNum(PurchTable));
        qbds.update(true);

        this.addDocumentStatusQueryRanges(fieldNum(PurchTable, DocumentStatus), qbds);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDocumentStatusQueryRanges</Name>
				<Source><![CDATA[
    private void addDocumentStatusQueryRanges(fieldId _documentStatusFieldId, QueryBuildDataSource _qbds)
    {
        QueryBuildRange documentStatusQueryBuildRange = _qbds.addRange(_documentStatusFieldId);
        documentStatusQueryBuildRange.value(SysQuery::valueNot(DocumentStatus::Invoice));
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>