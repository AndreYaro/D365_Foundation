<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalEngine_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(LedgerJournalEngine))]
public final class LedgerJournalEngine_ApplicationSuite_Extension
{
    public boolean isInAccountModified_IT;
    public boolean isInTransDateModified_IT;
    public boolean custMessageDisplayed_IT;

    public boolean vendMessageDisplayed_IT;
    public boolean errorVendMessageDisplayed_IT;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountNumModified</Name>
				<Source><![CDATA[
    public void accountNumModified(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalTrans_Project _ledgerJournalTransProj)
    {
        next accountNumModified(_ledgerJournalTrans, _ledgerJournalTransProj);

        _ledgerJournalTrans.initUsualExporter_IT();

        if (BankLCImportFeatureChecker::checkBankLCImportEnabled()
            || BankLCExportFeatureChecker::checkBankLCExportEnabled())
        {
            LedgerJournalTransBankLC::syncSettlement(_ledgerJournalTrans, 0);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCompanyIntentLetter_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if Intent letter usage is applicable.
    /// </summary>
    /// <returns>true if the Intent letter usage is applicable, otherwise false.</returns>
    public boolean checkCompanyIntentLetter_IT()
    {
        boolean ret;

        switch (classIdGet(this))
        {
            case classNum(LedgerJournalEngine_Daily):
            case classNum(LedgerJournalEngine_VendApprove):
            case classNum(LedgerJournalEngine_VendInvoice):
            case classNum(LedgerJournalEngine_VendInvoiceRegister):
                ret = true;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initUsualExporter_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes Usual exporter fields.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The <c>LedgerJournalTrans</c> record to initialize.</param>
    /// <param name = "_invoiceAccount">The invoice account.</param>
    /// <param name = "_refDate">The reference date.</param>
    public void initUsualExporter_IT(
        LedgerJournalTrans _ledgerJournalTrans,
        AccountNum _invoiceAccount,
        TransDate _refDate = _ledgerJournalTrans.TransDate)
    {
        if (_ledgerJournalTrans.TransactionType != LedgerTransType::GeneralJournal)
        {
            VendParameters vendParameters =  VendParameters::find();
        
            if (_ledgerJournalTrans.IntentLetterId_IT)
            {
                _ledgerJournalTrans.TaxGroup = vendParameters.PlafondTaxGroup_IT;
            }
            else
            {
                IntentLetter_IT intentLetter;

                if (vendParameters.AutomaticIntentLetterAssignment_IT)
                {
                    intentLetter = IntentLetter_IT::findActiveIntentLetterByType(
                    _invoiceAccount,
                    IntentLetterType_IT::Amount,
                    _refDate);
                }

                if (intentLetter && vendParameters.PlafondTaxGroup_IT)
                {
                    _ledgerJournalTrans.IntentLetterId_IT = intentLetter.IntentLetterId;
                    _ledgerJournalTrans.TaxGroup =vendParameters.PlafondTaxGroup_IT;
                    info("@ExtendedItallianLocalization:UsExpTaxGroupUsed");
                }

                if (!intentLetter
                    && vendParameters.PlafondTaxGroup_IT
                    && _ledgerJournalTrans.TaxGroup == vendParameters.PlafondTaxGroup_IT)
                {
                    warning("@ExtendedItallianLocalization:UsExpTaxGroupUsedButNoActiveLetters");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentDateModified</Name>
				<Source><![CDATA[
    public void documentDateModified(LedgerJournalTrans ledgerJournalTrans)
    {
        next documentDateModified(ledgerJournalTrans);

        if (FeatureStateProvider::isFeatureEnabled(PlafondFeature::instance()))
        {
            ledgerJournalTrans.initPlafondDate_IT();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxGroupVend</Name>
				<Source><![CDATA[
    protected TaxGroup initTaxGroupVend(LedgerJournalTrans _ledgerJournalTrans)
    {
        TaxGroup localTaxGroup = next initTaxGroupVend(_ledgerJournalTrans);

        if (FeatureStateProvider::isFeatureEnabled(PlafondFeature::instance()) && this.checkCompanyIntentLetter_IT())
        {
            VendTable localVendTable = _ledgerJournalTrans.findVendTable();
            this.initUsualExporter_IT(_ledgerJournalTrans, localVendTable.AccountNum);
            localTaxGroup = _ledgerJournalTrans.TaxGroup;
        }

        return localTaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalTrans_Asset _ledgerJournalTrans_Asset)
    {
        next initValue(_ledgerJournalTrans, _ledgerJournalTrans_Asset);

        if (FeatureStateProvider::isFeatureEnabled(PlafondFeature::instance()))
        {
            _ledgerJournalTrans.initPlafondDate_IT();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDateModified</Name>
				<Source><![CDATA[
    public void transDateModified(LedgerJournalTrans _ledgerJournalTrans)
    {
        if (FeatureStateProvider::isFeatureEnabled(PlafondFeature::instance()))
        {
            isInTransDateModified_IT = true;
        }

        next transDateModified(_ledgerJournalTrans);
        isInTransDateModified_IT = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVendTable_IT</Name>
				<Source><![CDATA[
    public VendTable findVendTable_IT(LedgerJournalTrans _ledgerJournalTrans)
    {
        VendTable vendTable = this.parmVendTable_W();

        if (!_ledgerJournalTrans.isCompanyIntercompany(currentCompany))
        {
            vendTable.AccountNum = _ledgerJournalTrans.parmAccount();

            if (!VendTableList.find(VendTable))
            {
                vendTable = VendTable::find(_ledgerJournalTrans.parmAccount());
                vendTableList.ins(VendTable);
            }
        }
        else
        {
            if (! xDataArea::exist(_ledgerJournalTrans.Company))
            {
                throw error(strfmt("@SYS10666", _ledgerJournalTrans.Company));
            }

            changecompany(_ledgerJournalTrans.Company)
            {
                vendTable = VendTable::find(_ledgerJournalTrans.parmAccount());
            }
        }

        this.parmVendTable_W(vendTable);
        return vendTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>intentLetterIdModified_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs tax group update if valid intent letter attached.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The <c>LedgerJournalTrans</c> record to adjust.</param>
    public void intentLetterIdModified_IT(LedgerJournalTrans _ledgerJournalTrans)
    {
        if (_ledgerJournalTrans.IntentLetterId_IT)
        {
            if (IntentLetter_IT::find(_ledgerJournalTrans.IntentLetterId_IT).Status == IntentLetterStatus_IT::Open)
            {
                _ledgerJournalTrans.TaxGroup = VendParameters::find().PlafondTaxGroup_IT;
                info("@ExtendedItallianLocalization:UsExpTaxGroupUsed");
            }
        }
        else
        {
            vendTable = _ledgerJournalTrans.findVendTable();
            _ledgerJournalTrans.TaxGroup = vendTable.TaxGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustIntentLetter_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if it is a <c>LedgerJournalEngine_Daily</c> object.
    /// </summary>
    /// <returns>true if it is a <c>LedgerJournalEngine_Daily</c> object; false otherwise.</returns>
    public boolean checkCustIntentLetter_IT()
    {
        return this is LedgerJournalEngine_Daily;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountModified</Name>
				<Source><![CDATA[
    public DebCredProposal accountModified(
        LedgerJournalTrans _ledgerJournalTrans,
        LedgerJournalTrans_Project _ledgerJournalTrans_Project,
        LedgerJournalTrans_Asset _ledgerJournalTrans_Asset,
        Tax1099BoxDetail _tax1099Detail,
        LedgerJournalTrans_RAsset _ledgerJournalTrans_RAsset,
        LedgerJournalTrans_RDeferrals _ledgerJournalTrans_RDeferrals)
    {
        boolean featureEnabled = FeatureStateProvider::isFeatureEnabled(IntentLettersFeature::instance()) || FeatureStateProvider::isFeatureEnabled(PlafondFeature::instance());

        if (featureEnabled)
        {
            isInAccountModified_IT = true;
            _ledgerJournalTrans.IntentLetterId_IT = '';
        }

        DebCredProposal ret = next accountModified(
            _ledgerJournalTrans,
            _ledgerJournalTrans_Project,
            _ledgerJournalTrans_Asset,
            _tax1099Detail,
            _ledgerJournalTrans_RAsset,
            _ledgerJournalTrans_RDeferrals);

        if (featureEnabled)
        {
            isInAccountModified_IT = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultDimension</Name>
				<Source><![CDATA[
    public void initDefaultDimension(
        LedgerJournalTrans _ledgerJournalTrans,
        LedgerJournalTrans_Asset _ledgerJournalTrans_Asset,
        LedgerJournalTrans_RAsset _ledgerJournalTrans_RAsset,
        LedgerJournalTrans_RDeferrals _ledgerJournalTrans_RDeferrals)
    {
        if (isInAccountModified_IT && (FeatureStateProvider::isFeatureEnabled(IntentLettersFeature::instance()) || FeatureStateProvider::isFeatureEnabled(PlafondFeature::instance())))
        {
            custMessageDisplayed_IT = false;
            vendMessageDisplayed_IT = false;
        }

        next initDefaultDimension(
            _ledgerJournalTrans,
            _ledgerJournalTrans_Asset,
             _ledgerJournalTrans_RAsset,
            _ledgerJournalTrans_RDeferrals);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxGroupCust</Name>
				<Source><![CDATA[
    protected TaxGroup initTaxGroupCust(LedgerJournalTrans _ledgerJournalTrans)
    {
        TaxGroup ret = next initTaxGroupCust(_ledgerJournalTrans);

        if (FeatureStateProvider::isFeatureEnabled(IntentLettersFeature::instance()))
        {
            CustTable localCustTable = this.findCustTable(_ledgerJournalTrans);

            ret = localCustTable.TaxGroup;

            if (this.checkCustIntentLetter_IT() && localCustTable.UsualExporter_IT)
            {
                if (this.setCustUsualExporterTaxGroup_IT(
                    _ledgerJournalTrans,
                    localCustTable.AccountNum,
                    _ledgerJournalTrans.TransDate ? _ledgerJournalTrans.TransDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())))
                {
                    ret = _ledgerJournalTrans.TaxGroup;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshDataSource</Name>
				<Source><![CDATA[
    protected void refreshDataSource(LedgerJournalTrans _ledgerJournalTrans)
    {
        if (isInTransDateModified_IT)
        {
            if (FeatureStateProvider::isFeatureEnabled(IntentLettersFeature::instance()))
            {
                custMessageDisplayed_IT = false;
                this.initTaxGroup(_ledgerJournalTrans);
                this.initOverrideSalesTax(_LedgerJournalTrans);
            }

            if (FeatureStateProvider::isFeatureEnabled(PlafondFeature::instance()))
            {
                vendMessageDisplayed_IT = false;
                _ledgerJournalTrans.initPlafondDate_IT();
            }

        }



        next refreshDataSource(_ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustUsualExporterTaxGroup_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates tax group according with usual exporter settings.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">Journal line to update.</param>
    /// <param name = "_invoiceAccount">Customer ID.</param>
    /// <param name = "_currentDate">Date to retrieve the valid intent letter.</param>
    /// <returns>true if usual exporter tax group is set, otherwise false.</returns>
    /// <exception>Throws exception if usual exporter tax group is not set.</exception>
    public boolean setCustUsualExporterTaxGroup_IT(
        ledgerJournalTrans _ledgerJournalTrans,
        AccountNum _invoiceAccount,
        TransDate _currentDate)
    {
        boolean ret;
        TaxGroup usExpExemptionTaxGroup = CustParameters::find().UsualExporterExemptionTaxGroup_IT;

        if (!usExpExemptionTaxGroup)
        {
            throw error("@ExtendedItallianLocalization:UsExpTaxGroupNotSet");
        }

        CustIntentLetter_IT custIntentLetter = CustIntentLetter_IT::findActiveIntentLetter(_invoiceAccount, _currentDate);

        if (custIntentLetter && _ledgerJournalTrans.TaxGroup != usExpExemptionTaxGroup)
        {
            _ledgerJournalTrans.TaxGroup = usExpExemptionTaxGroup;
            ret = true;

            if (FormDataUtil::isFormDataSource(_ledgerJournalTrans) && !custMessageDisplayed_IT)
            {
                info("@ExtendedItallianLocalization:TaxGroupUpdated");
                custMessageDisplayed_IT = true;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendTable_W</Name>
				<Source><![CDATA[
    public VendTable parmVendTable_W(VendTable _vendTable = vendTable)
    {
        vendTable = _vendTable;
        return vendTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxGroup</Name>
				<Source><![CDATA[
    protected void initTaxGroup(LedgerJournalTrans _ledgerJournalTrans)
    {
        next initTaxGroup(_ledgerJournalTrans);

        if (FeatureStateProvider::isFeatureEnabled(GeneralLedgerSimulationsFeature::instance()))
        {
            if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Cust
                || _ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
                || _ledgerJournalTrans.isTransIntercompany(currentCompany)
                || _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust
                || _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend)
            {
                return;
            }
            else
            {
                NoYes simulationPosted = _ledgerJournalTrans.ledgerJournalTable().SimulationPosted_IT;

                if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger)
                {
                    if (simulationPosted)
                    {
                        _ledgerJournalTrans.TaxGroup = '';
                    }
                    else
                    {
                        return;
                    }

                }
                else if (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger)
                {
                    if (simulationPosted)
                    {
                        _ledgerJournalTrans.TaxGroup ='';

                    }
                    else
                    {
                        return;
                    }
                }
            }

            // Verify that a tax code is derived for the given Tax Group and Tax Item Group.
            if (_ledgerJournalTrans.TaxGroup && _ledgerJournalTrans.TaxItemGroup)
            {
                if (CheckTaxGroups::Error == Tax::isValidTaxGroupIntersectionV2(
                                                _ledgerJournalTrans.TaxGroup,
                                                _ledgerJournalTrans.TaxItemGroup,
                                                _ledgerJournalTrans.isTaxIntegrationEnabled()))
                {
                    // In this scenario there are no dervied tax codes and the user has asked that we flag this condition as an error.
                    // Due to how the journal forms display taxes through display methods it is best to not allow this field to be set to a Tax Group
                    // with no over lapping Tax Codes. The error message will let the user know what Tax Group was trying to default.
                    error (strFmt("@SYS4009766", _ledgerJournalTrans.TaxGroup,_ledgerJournalTrans.TaxItemGroup));
                    _ledgerJournalTrans.TaxGroup = '';
                }
            }

            //It is possible that more than one line is associated with the voucher
            if (LedgerJournalEngine_Server::updateTaxGroup(_ledgerJournalTrans))
            {
                changecompany(_ledgerJournalTrans.company())
                {
                    _ledgerJournalTrans.write();
                }

                if (ledgerJournalTrans_ds)
                {
                    ledgerJournalTrans_ds.research(true);
                }
            }

            // Attempt to cache the results.
            if (methodResultCache.isInScope())
            {
                methodResultCache.add(
                    funcName(),
                    // this list of inputs occurs twice in this method
                    [_ledgerJournalTrans.AccountType,
                        _ledgerJournalTrans.OffsetAccountType,
                        _ledgerJournalTrans.LedgerDimension,
                        _ledgerJournalTrans.OffsetLedgerDimension,
                        _ledgerJournalTrans.Company,
                        _ledgerJournalTrans.OffsetCompany,
                        curext()],
                    // this list of outputs occurs twice in this method
                    [_ledgerJournalTrans.TaxGroup]);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>