<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCROneTimePromotionFundLumpSum</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>MCROneTimePromotionFundLumpSum</c> is used to posts the lump sum and matched against the deduction.
/// </summary>
internal class MCROneTimePromotionFundLumpSum
{
    protected TAMMerchandisingEvent merchandisingEvent;
    protected TAMTradePromotion tamTradePromotionTo;
    protected TAMDeduction tamDeduction;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postAndMatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the lump sum to be matched against the deduction.
    /// </summary>
    public void postAndMatch()
    {
        if (tamTradePromotionTo.PromotionStatus == TAMStatus::CustomerApproved)
        {
            try
            {
                TAMMerchEventPricing tamMerchEventPricing = this.getMerchEventPricingFromMerchEvent();

                if (!tamMerchEventPricing)
                {
                    throw error(Error::missingRecord(tableStr(TAMMerchEventPricing)));
                }

                if (tamMerchEventPricing.tfClaimPayType != TAMPaymentType::CustomerDeduction)
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }

                this.postLumpPayment(tamMerchEventPricing);

                this.matchDeduction();
            }
            catch
            {
                info("@MCR4410346");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMerchEventPricingFromMerchEvent</Name>
				<Source><![CDATA[
    protected TAMMerchEventPricing getMerchEventPricingFromMerchEvent()
    {
        TAMMerchEventPricing tamMerchEventPricing;

        select firstonly forupdate tamMerchEventPricing
            where tamMerchEventPricing.MerchandisingEventID == merchandisingEvent.MerchandisingEventID;

        return tamMerchEventPricing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLumpPayment</Name>
				<Source><![CDATA[
    protected void postLumpPayment(TAMMerchEventPricing _tamMerchEventPricing)
    {
        TAMLumpSumPaymentPost::main(_tamMerchEventPricing);
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchDeduction</Name>
				<Source><![CDATA[
    protected void matchDeduction()
    {
        MCROneTimePromotionFund::matchDeduction(merchandisingEvent, tamDeduction);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromMerchEventPromotionDeduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of <c>MCROneTimePromotionFundLumpSum</c>
    /// </summary>
    /// <param name = "_merchandisingEvent">The lump sum that is to be posted.</param>
    /// <param name = "_tamTradePromotionTo">The trade allowance agreement that was created for the one time promotion.</param>
    /// <param name = "_tamDeduction">The deduction to which to match the lump sum.</param>
    /// <returns>A new instance of <c>MCROneTimePromotionFundLumpSum</c></returns>
    public static MCROneTimePromotionFundLumpSum newFromMerchEventPromotionDeduction(TAMMerchandisingEvent _merchandisingEvent, 
        TAMTradePromotion _tamTradePromotionTo,
        TAMDeduction _tamDeduction)
    {
        MCROneTimePromotionFundLumpSum mcrOneTimePromotionFundLumpSum = new MCROneTimePromotionFundLumpSum();
        mcrOneTimePromotionFundLumpSum.merchandisingEvent = _merchandisingEvent;
        mcrOneTimePromotionFundLumpSum.tamTradePromotionTo = _tamTradePromotionTo;
        mcrOneTimePromotionFundLumpSum.tamDeduction = _tamDeduction;

        return mcrOneTimePromotionFundLumpSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMerchandisingEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set the lump sum that is to be posted.
    /// </summary>
    /// <param name = "_merchandisingEvent">The lump sum that is to be posted.</param>
    /// <returns>The lump sum that is to be posted.</returns>
    public TAMMerchandisingEvent parmMerchandisingEvent(TAMMerchandisingEvent _merchandisingEvent = merchandisingEvent)
    {
        merchandisingEvent = _merchandisingEvent;
        return merchandisingEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTamTradePromotionTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set the trade allowance agreement that was created for the one time promotion.
    /// </summary>
    /// <param name = "_tamTradePromotionTo">The trade allowance agreement that was created for the one time promotion.</param>
    /// <returns>The trade allowance agreement that was created for the one time promotion.</returns>
    public TAMTradePromotion parmTamTradePromotionTo(TAMTradePromotion _tamTradePromotionTo = tamTradePromotionTo)
    {
        tamTradePromotionTo = _tamTradePromotionTo;
        return tamTradePromotionTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTamDeduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set the deduction to which to match the lump sum.
    /// </summary>
    /// <param name = "_tamDeduction">The deduction to which to match the lump sum.</param>
    /// <returns>The deduction to which to match the lump sum.</returns>
    public TAMDeduction parmTamDeduction(TAMDeduction _tamDeduction = tamDeduction)
    {
        tamDeduction = _tamDeduction;
        return tamDeduction;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>