<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTransUpdateRCash</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LedgerJournalTransUpdateRCash extends LedgerJournalTransUpdate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
        public boolean check(LedgerJournalTrans         _ledgerJournalTrans,
                         boolean                    _checkNoSettlement = true,
                         LedgerVoucher              _ledgerVoucher = null,
                         LedgerPostingMessageLog    _ledgerPostingMessageCollection = null)
    {
        boolean ret = super(_ledgerJournalTrans, _checkNoSettlement, _ledgerVoucher, _ledgerPostingMessageCollection);

        return this.checkCash(_ledgerJournalTrans, _ledgerPostingMessageCollection) && ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCash</Name>
				<Source><![CDATA[
        private boolean checkCash(LedgerJournalTrans _ledgerJournalTrans, LedgerPostingMessageLog _ledgerPostingMessageCollection)
    {
        LedgerJournalTrans_RCash ledgerJournalTrans_RCash = LedgerJournalTrans_RCash::find(_ledgerJournalTrans.RecId);
        RCashVoucher             cashVoucher = new RCashVoucher(_ledgerJournalTrans, ledgerJournalTrans_RCash);
        RCashTrans               cashTrans;
        boolean                  ok = true;
        ;

        if (LedgerJournalTrans_RCash::find(LedgerJournalTrans::findRecId(_ledgerJournalTrans.RecId,
                                           false).RecId).TransStatus != RCashTransStatus::None)
            return true;

        if (_ledgerJournalTrans.orig().AccountType       == LedgerJournalACType::RCash &&
            _ledgerJournalTrans.orig().OffsetAccountType == LedgerJournalACType::RCash)
        {
            if (_ledgerPostingMessageCollection)
            {
                ok = _ledgerPostingMessageCollection.logCheckFailed(strfmt("@GLS104455"));
            }
            else
            {
                ok = checkFailed(strfmt("@GLS104455"));
            }
        }

        if (ledgerJournalTrans_RCash.CashDocId && ledgerJournalTrans_RCash.TransStatus == RCashTransStatus::None)
        {
            if (! RCashVoucher::checkReuseNum(_ledgerJournalTrans, ledgerJournalTrans_RCash))
            {
                if (_ledgerPostingMessageCollection)
                {
                    ok = _ledgerPostingMessageCollection.logCheckFailed(strfmt("@GLS104419", ledgerJournalTrans_RCash.CashDocId));
                }
                else
                {
                    ok = checkFailed(strfmt("@GLS104419", ledgerJournalTrans_RCash.CashDocId));
                }
            }
        }

        if (_ledgerJournalTrans.TaxGroup     &&
            _ledgerJournalTrans.TaxItemGroup &&
            ! _ledgerJournalTrans.ledgerJournalTable().LedgerJournalInclTax)
        {
            if (_ledgerPostingMessageCollection)
            {
                ok = _ledgerPostingMessageCollection.logCheckFailed("@GLS110680");
            }
            else
            {
                ok = checkFailed("@GLS110680");
            }
        }

        cashTrans = cashVoucher.initCashTrans(cashTrans);
        ok = cashVoucher.checkTrans(cashTrans) && ok;

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkWhenPost</Name>
				<Source><![CDATA[
        public boolean checkWhenPost(LedgerJournalTrans         _ledgerJournalTrans,
                                 LedgerJournalTrans         _originalLedgerJournalTrans,
                                 boolean                    _checkNoSettlement = true,
                                 LedgerPostingMessageLog    _ledgerPostingMessageCollection = null)
    {
        LedgerJournalTrans_RCash ledgerJournalTrans_RCash = LedgerJournalTrans_RCash::find(_ledgerJournalTrans.RecId);
        boolean                  ret = super(_ledgerJournalTrans, _originalLedgerJournalTrans, _checkNoSettlement, _ledgerPostingMessageCollection);

        if (_ledgerJournalTrans.ledgerJournalTable().JournalType == LedgerJournalType::RCash &&
            ledgerJournalTrans_RCash.TransStatus                 != RCashTransStatus::Approved)
        {
            if (_ledgerPostingMessageCollection)
            {
                ret = _ledgerPostingMessageCollection.logCheckFailed("@GLS104427");
            }
            else
            {
                ret = checkFailed("@GLS104427");
            }
        }
        ret = this.checkCash(_ledgerJournalTrans, _ledgerPostingMessageCollection) && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the main account of specified journal lines.
    /// </summary>
    /// <param name="_journalTrans">
    /// A <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <returns>
    /// The main account of specified journal lines.
    /// </returns>
    public LedgerDimensionDefaultAccount ledgerDimension(LedgerJournalTrans _journalTrans)
    {
        return RCashLedgerAccount::summaryLedgerDimension(_journalTrans.parmAccount(), _journalTrans.PostingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
        public void updateNow(LedgerVoucher      _ledgerVoucher,
                          LedgerPostingType  _posting,
                          LedgerJournalTrans _ledgerJournalTrans,
                          LedgerJournalTrans _originalLedgerJournalTrans,
                          boolean            _interCompany = false,
                          boolean            _reversalsMayExist = true,
                          boolean            _dueToDueFromAccount =  false
                          )
    {
        RCashVoucher             cashVoucher;
        TaxAmount                taxAmount;
        LedgerJournalTrans_RCash ledgerJournalTrans_RCash = LedgerJournalTrans_RCash::find(_ledgerJournalTrans.RecId);
        LedgerVoucherTransObject ledgerVoucherTransObject;

        CurrencyExchangeHelper   exchangeRateHelper;

        ;

        if (ledgerJournalTrans_RCash.TransStatus != RCashTransStatus::Canceled)
        {
            ttsbegin;

            if (taxVoucherService)
            {
                taxAmount = taxVoucherService.taxAmountForVendCustType(_ledgerJournalTrans, _interCompany, _posting, _dueToDueFromAccount);
            }

            if (_posting == LedgerPostingType::InterCompany)
            {
                exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), _ledgerVoucher.findLedgerVoucherObject().parmAccountingDate());
                exchangeRateHelper.parmExchangeRate1(_ledgerJournalTrans.ExchRate);
                exchangeRateHelper.parmExchangeRate2(_ledgerJournalTrans.ExchRateSecond);

                ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                    _ledgerVoucher.findLedgerVoucherObject(),
                                    _posting,
                                    _ledgerJournalTrans.parmLedgerDimension(),
                                    _ledgerJournalTrans.CurrencyCode,
                                    _ledgerJournalTrans.amount()+taxAmount,
                                    exchangeRateHelper);

                ledgerVoucherTransObject.parmSourceTableId(_ledgerJournalTrans.TableId);
                ledgerVoucherTransObject.parmSourceRecId(_ledgerJournalTrans.RecId);
                ledgerVoucherTransObject.parmQuantity(_ledgerJournalTrans.Qty);
                ledgerVoucherTransObject.parmTransTxt(_ledgerJournalTrans.Txt);

                _ledgerVoucher.addTrans(ledgerVoucherTransObject);
            }
            else
            {
                cashVoucher = new RCashVoucher(_ledgerJournalTrans, ledgerJournalTrans_RCash);
                cashVoucher.parmReasonRefRecID(_ledgerJournalTrans.ReasonRefRecID);

                cashVoucher.post(_ledgerVoucher, taxAmount);
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>