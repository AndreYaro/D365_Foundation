<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqDemPlanForecastChangeTracker</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>ReqDemPlanForecastChangeTracker</c> class is responsible for tracking
///     and reapplying changes made to the baseline demand forecast.
/// </summary>
public class ReqDemPlanForecastChangeTracker
{
    RefRecId baselineForecast;
    int64 trackedRecordsCount;
    int64 modifiedRecordsCount;
    private container companyForecastModelMapping;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyAllChanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Applies tracked changes to all forecast records.
    /// </summary>
    /// <param name="_forecastVersion">
    ///     The forecast version.
    /// </param>
    public void applyAllChanges(RefRecId _forecastVersion)
    {
        ReqDemPlanForecastChangeEntry   changeEntryPerCompany;
        ReqDemPlanDataProcessingHelper  dataProcessingHelper = new ReqDemPlanDataProcessingHelper();

        while select crosscompany DataAreaId from changeEntryPerCompany group by DataAreaId
        {
            changecompany(changeEntryPerCompany.DataAreaId)
            {
                ReqDemPlanForecast              forecast;
                ReqDemPlanForecastChangeEntry   changeEntry;
                dataProcessingHelper.skipAll(forecast);

                update_recordSet forecast
                    setting Qty = changeEntry.Qty
                where
                    forecast.Version == _forecastVersion
                join  changeEntry
                    where  baselineForecast                     == changeEntry.Forecast
                        && forecast.ForecastDate                == changeEntry.Date
                        && forecast.AllocationKey               == changeEntry.AllocationKey
                        && forecast.ItemId                      == changeEntry.ItemId
                        && forecast.Site                        == changeEntry.Site
                        && forecast.Warehouse                   == changeEntry.Warehouse
                        && forecast.Configuration               == changeEntry.Configuration
                        && forecast.Color                       == changeEntry.Color
                        && forecast.Size                        == changeEntry.Size
                        && forecast.Style                       == changeEntry.Style
                        && forecast.ProductVersion              == changeEntry.ProductVersion
                        && forecast.CustGroupId                 == changeEntry.CustGroupId
                        && forecast.CustAccount                 == changeEntry.CustAccount
                        && forecast.LogisticsCountryRegionCode  == changeEntry.LogisticsCountryRegionCode
                        && forecast.LogisticsAddressStateId     == changeEntry.LogisticsAddressStateId;

                modifiedRecordsCount += forecast.RowCount();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearExistingLog</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Clears any previously existing change log for the current forecast.
    /// </summary>
    public void clearExistingLog()
    {
        if (conLen(companyForecastModelMapping) != 0)
        {
            DataAreaId dataAreaId;
            ForecastModelId modelId;

            ttsBegin;

            for (int i = 1; i <= conLen(companyForecastModelMapping); i++)
            {
                [dataAreaId, modelId] = conPeek(companyForecastModelMapping, i);

                this.clearExistingLogPerCompany(dataAreaId);
            }

            ttsCommit;
        }
        else
        {
            ReqDemPlanForecastChangeEntry forecastChangeEntry;
            ReqDemPlanForecastChangeEntry forecastChangeEntryToDelete;

            new SkipAOSValidationPermission().assert();

            forecastChangeEntryToDelete.skipAosValidation(true);

            ttsBegin;

            while select crossCompany dataAreaId
            from forecastChangeEntry
            group by dataAreaId
            where forecastChangeEntry.Forecast == baselineForecast
            {
                changeCompany(forecastChangeEntry.dataAreaId)
                {
                    forecastChangeEntryToDelete.company(forecastChangeEntry.dataAreaId);
                    delete_from forecastChangeEntryToDelete
                        where forecastChangeEntryToDelete.Forecast == baselineForecast;
                }
            }

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearExistingLogPerCompany</Name>
				<Source><![CDATA[
    private void clearExistingLogPerCompany(DataAreaId _dataAreaId)
    {
        ReqDemPlanForecastChangeEntry reqDemPlanForecastChangeEntry;

        new SkipAOSValidationPermission().assert();

        reqDemPlanForecastChangeEntry.skipAosValidation(true);

        ttsbegin;

        changeCompany(_dataAreaId)
        {
            reqDemPlanForecastChangeEntry.company(_dataAreaId);

            delete_from reqDemPlanForecastChangeEntry
                where reqDemPlanForecastChangeEntry.Forecast == baselineForecast;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forecastToString</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns a string representation of a forecast record that is to
    ///     be used for error handling.
    /// </summary>
    /// <param name="_forecast">
    ///     The forecast record to be converted to string.
    /// </param>
    /// <param name="_fieldList">
    ///     The list of field IDs in the forecast table.
    /// </param>
    /// <returns>
    ///     A string value.
    /// </returns>
    private str forecastToString(ReqDemPlanForecast _forecast, List _fieldList)
    {
        ListEnumerator e = _fieldList.getEnumerator();
        str            s = '';

        while (e.moveNext())
        {
            if (s)
            {
                s += ', ';
            }
            s += strFmt('%1', _forecast.(e.current()));
        }

        return strFmt('[%1, %2]', _forecast.ForecastDate, s);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the object.
    /// </summary>
    private void init()
    {
        trackedRecordsCount     = 0;
        modifiedRecordsCount    = 0;

        if (!baselineForecast)
        {
            throw error("@DMP1176");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBaselineForecast</Name>
				<Source><![CDATA[
    private RefRecId parmBaselineForecast(RefRecId _baselineForecast = baselineForecast)
    {
        baselineForecast = _baselineForecast;

        return baselineForecast;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedRecordsCount</Name>
				<Source><![CDATA[
    public int64 modifiedRecordsCount()
    {
        return modifiedRecordsCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackedRecordsCount</Name>
				<Source><![CDATA[
    public int64 trackedRecordsCount()
    {
        return trackedRecordsCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method checks if the forecast entry has changed and tracks the change if so.
    /// </summary>
    /// <param name="_forecast">
    ///     A buffer holding the values to be checked.
    /// </param>
    /// <param name="_forecastFieldList">
    ///     A list of fields in the forecast table.
    /// </param>
    /// <param name="_changeEntryFieldList">
    ///     A list of fields in the forecact change entry table.
    /// </param>
    /// <returns>
    ///     True if the record contained changes and was tracked, otherwise false.
    /// </returns>
    public boolean trackData(ReqDemPlanForecast _forecast, List _forecastFieldList, List _changeEntryFieldList)
    {
        boolean                         changeWasTracked = false;
        ReqDemPlanForecastChangeEntry   forecastChangeEntry;

        if (_forecast.Qty != _forecast.OriginalQty)
        {
            forecastChangeEntry.initFromForecastLine(_forecast, _forecastFieldList, _changeEntryFieldList);
            forecastChangeEntry.Forecast = baselineForecast;
            forecastChangeEntry.Qty      = _forecast.Qty;

            changeCompany(forecastChangeEntry.dataAreaId)
            {
                forecastChangeEntry.insert();
            }

            changeWasTracked = true;
            ++trackedRecordsCount;
        }

        return changeWasTracked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance on <c>ReqDemPlanForecastChangeTracker</c>.
    /// </summary>
    /// <param name="_baselineForecast">
    ///     The baseline forecast record identificator to initialize the tracker with.
    /// </param>
    /// <returns>
    ///     An instance of the <c>ReqDemPlanForecastChangeTracker</c> class.
    /// </returns>
    public static ReqDemPlanForecastChangeTracker newStandard(RefRecId _baselineForecast = ReqDemPlanGeneratedForecast::findLatest().RecId)
    {
        ReqDemPlanForecastChangeTracker tracker = new ReqDemPlanForecastChangeTracker();
        tracker.parmBaselineForecast(_baselineForecast);
        tracker.init();

        return tracker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompanyForecastModelMapping</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public container parmCompanyForecastModelMapping(container _companyForecastModelMapping = companyForecastModelMapping)
    {
        companyForecastModelMapping = _companyForecastModelMapping;
        return companyForecastModelMapping;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>