<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendPaymentGroupManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
class VendPaymentGroupManager
{
    VendDocumentTableMap    parmTable;
    VendTrans               vendTrans;
    VendInvoiceInfoTable    vendInvoiceInfoTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validatePaymentGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if a payment group may be added to a record based upon the passed in values.
    /// </summary>
    /// <param name="_common">
    /// The record that is being validated.
    /// </param>
    /// <param name="_returnFalseValidation">
    /// A Boolean true if all validation should take place; otherwise false.
    /// </param>
    /// <param name="_field">
    /// Id of the field being validated, optional.
    /// </param>
    /// <returns>
    /// true if the record may be updated with the new payment group; otherwise, false.
    /// </returns>
    public static boolean validatePaymentGroup(Common _common, boolean _returnFalseValidation, fieldId _field = 0)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;
        VendInvoiceInfoTable parmTable;
        VendInvoiceInfoTable commonParmTable;
        VendTrans vendTrans, commonVendTrans;
        VendInvoiceJour vendInvoiceJour;
        PurchTable purchTable;
        VendTable vendTable;
        VendPaymMode currentPaymMode, paymMode;
        VendCurrencyCode currentCurrencyCode, currency;
        VendBankAccountId currentBankAccountId, bankAccount;
        RemittanceLocation currentRemittanceLocation, remittanceLocation;
        VendAccount vendAccount;
        VendPaymentGrouping vendPaymentGroup;
        DirPartyRecId currentparty;
        PaymSchedId paymentSchedule;
        container sharedServiceCompanies;
        boolean paymentGroupRecordFound = false;
        boolean ret = true;
        boolean isPaymentScheduleApplied = false;
        fieldId fieldId;
        VendTransOpen vendTransOpen;

        switch (_common.TableId)
        {
            case tableNum(VendInvoiceInfoTable):
                commonParmTable = _common;
                sharedServiceCompanies = CustVendOpenTransManager::findSharedServiceCompanies(commonParmTable.company());
                //set the values to be validated here.
                currency            = commonParmTable.CurrencyCode;
                paymMode            = commonParmTable.PaymMode;
                bankAccount         = commonParmTable.VendBankAccountID;
                vendAccount         = commonParmTable.InvoiceAccount;
                vendPaymentGroup    = commonParmTable.VendPaymentGroup;
                remittanceLocation  = commonParmTable.RemittanceLocation;
                paymentSchedule     = commonParmTable.PaymentSched;
                fieldId             = fieldNum(VendDocumentTableMap, RemittanceLocation);
                if (commonParmTable.PaymentSched != '')
                {
                    paymentSchedule  = commonParmTable.PaymentSched;
                }
                else
                {
                    select crosscompany:sharedServiceCompanies PaymentSched from purchTable
                        where purchTable.PurchId == commonParmTable.PurchId;
                    paymentSchedule = purchTable.PaymentSched;
                }
                break;

            case tableNum(VendTrans):
                commonVendTrans = _common;
                sharedServiceCompanies = CustVendOpenTransManager::findSharedServiceCompanies(commonVendTrans.company());
                //set the values to be validated here.
                currency            = commonVendTrans.CurrencyCode;
                paymMode            = commonVendTrans.PaymMode;
                bankAccount         = commonVendTrans.ThirdPartyBankAccountId;
                vendAccount         = commonVendTrans.AccountNum;
                vendPaymentGroup    = commonVendTrans.VendPaymentGroup;
                remittanceLocation  = commonVendTrans.RemittanceLocation;
                fieldId             = fieldNum(VendTrans, RemittanceLocation);

                //get the payment schedule from vendInvoiceJour
                select crosscompany:sharedServiceCompanies PaymentSched from vendInvoiceJour
                    where vendInvoiceJour.LedgerVoucher == commonVendTrans.Voucher &&
                          vendInvoiceJour.InvoiceAccount == commonVendTrans.AccountNum &&
                          vendInvoiceJour.InvoiceDate == commonVendTrans.TransDate;

                //save the payment schedule
                paymentSchedule  = vendInvoiceJour.PaymentSched;
                isPaymentScheduleApplied = commonVendTrans.CustVendTrans::checkPaymentScheduleApplied();
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (vendPaymentGroup == '')
        {
            return true;
        }

        //must not be associated with a payment schedule
        if (paymentSchedule != '' || isPaymentScheduleApplied)
        {
            error("@SYS135245");
            return false;
        }

        //next code block grabs Active values from VendTrans and VendInvoiceInfoTable to be used for validation.
        select firstonly crosscompany:sharedServiceCompanies PaymMode, CurrencyCode, VendBankAccountID, InvoiceAccount, RemittanceLocation from parmTable
            where (parmTable.ParmJobStatus == ParmJobStatus::Waiting || parmTable.ParmJobStatus == ParmJobStatus::ContainErrors) &&
                  (parmTable.Ordering == DocumentStatus::Invoice || parmTable.Ordering == DocumentStatus::ApproveJournal) &&
                  (parmTable.VendPaymentGroup == vendPaymentGroup) && (parmTable.ParmId != '')
            join Party from vendTable
                where parmTable.InvoiceAccount == vendTable.AccountNum;
        //if a record is found then use values from it.
        if (parmTable)
        {
            paymentGroupRecordFound     = true;
            currentPaymMode             = parmTable.PaymMode;
            currentCurrencyCode         = parmTable.CurrencyCode;
            currentBankAccountId        = parmTable.VendBankAccountID;
            currentparty                = vendTable.Party;
            currentRemittanceLocation   = parmTable.RemittanceLocation;
        }
        //record not found, check vendTrans
        else
        {
            select firstonly crosscompany:sharedServiceCompanies PaymMode, CurrencyCode, ThirdPartyBankAccountId, AccountNum, RemittanceLocation from vendTrans
                where vendTrans.VendPaymentGroup == vendPaymentGroup &&
                      vendTrans.Closed == dateNull()
                join Party from vendTable
                    where vendTrans.AccountNum == vendTable.AccountNum;

            //if a record is found then use values from it.
            if (vendTrans)
            {
                paymentGroupRecordFound     = true;
                currentPaymMode             = vendTrans.PaymMode;
                currentCurrencyCode         = vendTrans.CurrencyCode;
                currentBankAccountId        = vendTrans.ThirdPartyBankAccountId;
                currentparty                = vendTable.Party;
                currentRemittanceLocation   = vendTrans.RemittanceLocation;
            }
            //no record is found, look in VendInvoiceInfoTable.
            else
            {
                //look for Saved invoices in VendInvoiceInfoTable that have a payment group
                select firstonly crosscompany:sharedServiceCompanies PaymMode, CurrencyCode, VendBankAccountID, InvoiceAccount, RemittanceLocation from vendInvoiceInfoTable
                    where   vendInvoiceInfoTable.VendPaymentGroup == vendPaymentGroup && vendInvoiceInfoTable.ParmId == ''
                    join Party from vendTable
                        where vendInvoiceInfoTable.InvoiceAccount == vendTable.AccountNum;
                //if VendInvoiceInfoTable has a record then use the value in it.
                if (vendInvoiceInfoTable)
                {
                    paymentGroupRecordFound     = true;
                    currentPaymMode             = vendInvoiceInfoTable.PaymMode;
                    currentCurrencyCode         = vendInvoiceInfoTable.CurrencyCode;
                    currentBankAccountId        = vendInvoiceInfoTable.VendBankAccountID;
                    currentparty                = vendTable.Party;
                    currentRemittanceLocation   = vendInvoiceInfoTable.RemittanceLocation;
                }
                else
                {
                    return true;
                }
            }
        }

        vendTable.clear();

        //grab the vendTable record for the passed in values.
        select Party from vendTable
            where vendTable.AccountNum == vendAccount;

        //must be from the same vendor
        if (currentparty != vendTable.Party && (paymentGroupRecordFound))
        {
            error("@SYS133131");
            ret = false;
        }
        else
        {
            if (paymentGroupRecordFound)
            {
                // The remittance address is changing for a grouped invoices
                if (currentRemittanceLocation != remittanceLocation && _field == fieldId && _returnFalseValidation)
                {
                    return false;
                }

                if ( currentPaymMode != paymMode
                    || currentCurrencyCode != currency
                    || currentBankAccountId != bankAccount)
                {
                    if (_returnFalseValidation)
                    {
                        error("@SYS133001");
                        ret = false;
                    }
                    else
                    {
                        warning("@SYS133001");
                    }
                }
                else if (currentRemittanceLocation != remittanceLocation && _returnFalseValidation)
                {
                    //only show this error if they are the same account (this means the previous check passed)
                    error("@SYS300935");
                    ret = false;
                }
            }
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && vendTrans)
        {
            //get the payment schedule from vendInvoiceJour
            select crosscompany:sharedServiceCompanies ThirdPartyBankAccountId from vendTransOpen
                where vendTransOpen.RefRecId == vendTrans.RecId;

            //save the payment schedule
            currentBankAccountId  = vendTransOpen.ThirdPartyBankAccountId;
            if (currentBankAccountId != '')
            {
                error("@SPS286");
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePaymentGroupNotMarkedInSeparateJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the vendor payment group being applied to the current transaction is marked for
    /// settlement in another journal.
    /// </summary>
    /// <param name = "_paymentGroup">The Payment group code being applied.</param>
    /// <param name = "_originator">The originator of the settlement.</param>
    /// <returns>true if the payment group is marked for settlement in another journal; otherwise, false.</returns>
    public static boolean validatePaymentGroupNotMarkedInSeparateJournal(VendPaymentGrouping _paymentGroup, Common _originator = null)
    {
        container sharedServiceCompanies = CustVendOpenTransManager::findSharedServiceCompanies(_originator.company());
        VendTrans vendTrans;
        VendTransOpen vendTransOpen;
        SpecTrans specTrans;

        if (_paymentGroup == '')
        {
            return true;
        }

        select firstonly crosscompany:sharedServiceCompanies RecId from vendTrans
            where vendTrans.VendPaymentGroup == _paymentGroup
            join RecId from vendTransOpen
                where vendTransOpen.RefRecId == vendTrans.RecId
            join RecId from specTrans
                where specTrans.RefCompany == vendTransOpen.dataAreaId
                    && specTrans.RefTableId == tableNum(VendTransOpen)
                    && specTrans.RefRecId == vendTransOpen.RecId
                    && !(specTrans.SpecCompany == _originator.company()
                        && specTrans.SpecTableId == _originator.TableId
                        && specTrans.SpecRecId == _originator.RecId);

        boolean isValid = specTrans.RecId == 0;

        if (!isValid)
        {
            error("@CashManagement:VendPaymentGroupAlreadyMarked");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePaymentSched</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if a payment schedule may be added to a record based upon the passed in values.
    /// </summary>
    /// <param name="_common">
    /// The record that is being validated.
    /// </param>
    /// <param name="_returnFalseValidation">
    /// true if all validation should take place; otherwise, false.
    /// </param>
    /// <returns>
    /// true if the record may be updated with the new payment schedule; otherwise, false.
    /// </returns>
    public static boolean validatePaymentSched(Common _common, boolean _returnFalseValidation)
    {
        VendInvoiceInfoTable    vendInvoiceInfoTableLocal;
        PurchTable              purchTable;
        VendPaymentGrouping     vendPaymentGroup;
        PaymSchedId             paymentSchedule;
        boolean                 isValid = true;

        Debug::assert(_common.TableId == tableNum(VendInvoiceInfoTable));

        vendInvoiceInfoTableLocal = _common as VendInvoiceInfoTable;
        //set the values to be validated here.
        paymentSchedule = vendInvoiceInfoTableLocal.PaymentSched;
        vendPaymentGroup = vendInvoiceInfoTableLocal.VendPaymentGroup;

        if (vendInvoiceInfoTableLocal.PaymentSched)
        {
            paymentSchedule = vendInvoiceInfoTableLocal.PaymentSched;
        }
        else
        {
            select PaymentSched from purchTable
                where purchTable.PurchId == vendInvoiceInfoTableLocal.PurchId;

            paymentSchedule = purchTable.PaymentSched;
        }

        if (!paymentSchedule)
        {
            isValid = true;
        }

        if (vendPaymentGroup)
        {
            error("@SYS135245");
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVendPaymentGroupsCanBeDisabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates if the AP Payment Groups feature may be disabled.
    /// </summary>
    /// <param name="originator">
    ///    The table record buffer that the validation should validate against. This is used to determine the
    ///    company in cross company validation.
    /// </param>
    /// <returns>
    ///    true if the AP Payment Groups feature may be disabled; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The AP Payment Groups feature may not be disabled if there are any unpaid invoices.
    /// </remarks>
    public static boolean validateVendPaymentGroupsCanBeDisabled(Common originator)
    {
        VendTrans               vendTrans;
        VendInvoiceInfoTable    vendInvoiceInfoTable;
        container               sharedServiceCompanies;

        sharedServiceCompanies = CustVendOpenTransManager::findSharedServiceCompanies(originator.company());

        //look for open active invoices in PurchParmTable that have a payment group.
        select firstonly crosscompany:sharedServiceCompanies RecId from vendInvoiceInfoTable
                where
                    (vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Waiting || vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::ContainErrors) &&
                    (vendInvoiceInfoTable.Ordering == DocumentStatus::Invoice || vendInvoiceInfoTable.Ordering == DocumentStatus::ApproveJournal) &&
                    (vendInvoiceInfoTable.VendPaymentGroup != '');

        if (vendInvoiceInfoTable.RecId != 0)
        {
            return false;
        }

        //look for open payments in VendTrans that have a payment group.
        select firstonly crosscompany:sharedServiceCompanies RecId from vendTrans
            where vendTrans.VendPaymentGroup != '' &&
            vendTrans.Closed == dateNull();

        if (vendTrans.RecId != 0)
        {
            return false;
        }

        //no existing invoices
            return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>