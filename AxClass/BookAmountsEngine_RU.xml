<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BookAmountsEngine_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class BookAmountsEngine_RU
{
    Map                          taxMap;
    List                         ctrlList;
    Set                          formSetLines;

    FormRun                      formRun;
    Query                        formQuery;
    FormGroupControl             vatGroupDomestic, vatGroupExport, vatGroupRestored;

    str                          baseAmountHelp;
    SalesPurch                   module;
    SalesPurchBookRecId_RU       bookRecId;

    BookStructSmallVATAmounts_RU amountVATZeroDomestic,        amountVATZeroExport,
                                 amountVATReducedDomestic,     amountVATReducedExport,
                                 amountVATStandardDomestic,    amountVATStandardExport,
                                 amountVATStandard20Domestic,  amountVATStandard20Export;

    BookStructSmallVATAmounts_RU amountVATZeroRestored,
                                 amountVATReducedRestored,
                                 amountVATStandardRestored,
                                 amountVATStandard20Restored;

    AmountMST                    amountNotLiableToVATDomestic, amountNotLiableToVATExport,
                                 amountInclVATDomestic,        amountInclVATExport;

    AmountMST                    amountNotLiableToVATRestored,
                                 amountInclVATRestored;

    int                          controlIndex;

    protected const int Value2 = 2;
    protected const int Value3 = 3;
    protected const int Value4 = 4;
    protected const int Value5 = 5;
    protected const int Value6 = 6;
    protected const int Value7 = 7;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAmount</Name>
				<Source><![CDATA[
    private void addAmount(Map       _vatMap,
                           Amount    _vatBase,
                           TaxAmount _vatAmount,
                           TaxValue  _vatValue,
                           NoYes     _exportProcessing,
                           NoYes     _restoredVAT,
                           boolean   _prepayment = false)
    {
        BookStructSmallVATAmounts_RU vatAmounts;

        if (_vatBase)
        {
            if (_vatMap.exists([_vatValue, _exportProcessing, _restoredVAT]))
            {
                vatAmounts = _vatMap.lookup([_vatValue, _exportProcessing, _restoredVAT]);
            }
            else
            {
                vatAmounts = new BookStructSmallVATAmounts_RU();
                _vatMap.insert([_vatValue, _exportProcessing, _restoredVAT], vatAmounts);
            }

            vatAmounts.addAmounts(_vatBase + _vatAmount,
                                  _prepayment ? 0 : _vatBase,
                                  _vatAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addVATGroup</Name>
				<Source><![CDATA[
    private void addVATGroup(Amount             _vatBase,
                             TaxAmount          _vatAmount,
                             real               _vatValue,
                             FormGroupControl   _vatGroup)
    {
        FormGroupControl    groupCtrl;
        FormRealControl     realCtrl;
        str                 vatValueStr;

        controlIndex++;
        vatValueStr = num2str(_vatValue, 1, frac(_vatValue) ? -1 : 0, Value2, Value3);

        groupCtrl = _vatGroup.addControl(FormControlType::Group, strFmt('BookAmountsEngine_VATGroupCtrl%1', controlIndex));
        groupCtrl.caption(strFmt("@GLS107151", vatValueStr));
        ctrlList.addEnd(groupCtrl);

        realCtrl  = groupCtrl.addControl(FormControlType::Real, strFmt('BookAmountsEngine_VATBaseCtrl%1', controlIndex));
        realCtrl.label("@GLS104936");
        realCtrl.helpText(strFmt(baseAmountHelp, vatValueStr));
        realCtrl.realValue(_vatBase);
        realCtrl.extendedDataType(extendedTypeNum(AmountMST));
        realCtrl.allowEdit(false);
        ctrlList.addStart(realCtrl);

        realCtrl  = groupCtrl.addControl(FormControlType::Real, strFmt('BookAmountsEngine_VATAmountCtrl%1', controlIndex));
        realCtrl.label(strFmt("@GLS107151", vatValueStr));
        realCtrl.helpText(strFmt("@GLS107153", vatValueStr));
        realCtrl.realValue(_vatAmount);
        realCtrl.extendedDataType(extendedTypeNum(TaxAmount));
        realCtrl.allowEdit(false);
        ctrlList.addStart(realCtrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildVATgroups</Name>
				<Source><![CDATA[
    public void buildVATgroups()
    {
        Map                             vatMap = this.fetchTaxMap();
        MapEnumerator                   vatMapEnumerator = vatMap.getEnumerator();
        ListEnumerator                  ctrlListEnumerator;
        BookStructSmallVATAmounts_RU    vatAmounts;
        TaxValue                        vatValue;
        NoYes                           exportProcessing;
        NoYes                           restoredVAT;
        boolean                         domesticExists, exportExists, restoredExists;

        if (ctrlList)
        {
            ctrlListEnumerator = ctrlList.getEnumerator();

            while (ctrlListEnumerator.moveNext())
            {
                formRun.design().removeControl(ctrlListEnumerator.current().id());
            }
        }

        ctrlList = new List(Types::Class);

        while (vatMapEnumerator.moveNext())
        {
            vatAmounts                   = vatMapEnumerator.currentValue();
            [vatValue,
             exportProcessing,
             restoredVAT]                = vatMapEnumerator.currentKey();

            domesticExists               = domesticExists ? domesticExists : ! exportProcessing;
            exportExists                 = exportExists   ? exportExists   : exportProcessing;
            restoredExists               = restoredExists ? restoredExists : restoredVAT;

            this.addVATGroup(vatAmounts.amountLiableToVAT(),
                             vatAmounts.taxAmountVAT(),
                             vatValue,
                             (restoredVAT && vatGroupRestored) ?
                              vatGroupRestored                 :
                             ((exportProcessing && vatGroupExport) ? vatGroupExport : vatGroupDomestic));
        }

        vatGroupDomestic.visible(domesticExists);
        if (vatGroupExport)
        {
            vatGroupExport.visible(exportExists);
        }
        if (vatGroupRestored)
        {
            vatGroupRestored.visible(restoredExists);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchTaxMap</Name>
				<Source><![CDATA[
    public Map fetchTaxMap()
    {
        #macrolib.SalesBook_RU
        #macrolib.PurchBook_RU

        Map                     vatMap;
        QueryRun                queryRun;
        SalesBookTrans_RU       salesBookTrans;
        PurchBookTrans_RU       purchBookTrans;
        SalesPurchBookTrans_RU  salesPurchBookTrans;
        FactureJour_RU          factureJour;
        AmountMST               amountLiableToVAT, taxAmountVAT;
        Integer                 sign;
        container               vatCon;
        NoYes                   restoredVAT;
        boolean                 prepayment;
        AmountMST               amountNotLiableToVATDomesticPrepayment;
        AmountMST               amountNotLiableToVATExportPrepayment;
        AmountMST               amountNotLiableToVATRestoredPrepayment;

        BookStructSmallVATAmounts_RU getStruct(BookStructSmallVATAmounts_RU _domesticStruct,
                                               BookStructSmallVATAmounts_RU _exportStruct,
                                               BookStructSmallVATAmounts_RU _restoredStruct)
        {
            return restoredVAT ? _restoredStruct : (factureJour.ExportProcessing ? _exportStruct : _domesticStruct);
        }
        ;

        amountVATZeroDomestic       = new BookStructSmallVATAmounts_RU();
        amountVATReducedDomestic    = new BookStructSmallVATAmounts_RU();
        amountVATStandardDomestic   = new BookStructSmallVATAmounts_RU();
        amountVATStandard20Domestic = new BookStructSmallVATAmounts_RU();

        amountVATZeroExport         = new BookStructSmallVATAmounts_RU();
        amountVATReducedExport      = new BookStructSmallVATAmounts_RU();
        amountVATStandardExport     = new BookStructSmallVATAmounts_RU();
        amountVATStandard20Export   = new BookStructSmallVATAmounts_RU();

        amountVATZeroRestored       = new BookStructSmallVATAmounts_RU();
        amountVATReducedRestored    = new BookStructSmallVATAmounts_RU();
        amountVATStandardRestored   = new BookStructSmallVATAmounts_RU();
        amountVATStandard20Restored = new BookStructSmallVATAmounts_RU();

        baseAmountHelp = module == SalesPurch::Purch ? "@GLS107165" : "@GLS107152";

        if (taxMap.exists(bookRecId))
        {
            vatCon                       = taxMap.lookup(bookRecId);
            vatMap                       = Map::create(conPeek(vatCon, 1));
            amountNotLiableToVATDomestic = conPeek(vatCon, Value2);
            amountInclVATDomestic        = conPeek(vatCon, Value3);
            amountNotLiableToVATExport   = conPeek(vatCon, Value4);
            amountInclVATExport          = conPeek(vatCon, Value5);
            amountNotLiableToVATRestored = conPeek(vatCon, Value6);
            amountInclVATRestored        = conPeek(vatCon, Value7);
        }
        else
        {
            queryRun = this.initQueryRun();

            vatMap = new Map(Types::Container, Types::Class);

            while (queryRun.next())
            {
                if (queryRun.query().dataSourceTable(tableNum(SalesBookTrans_RU)) && queryRun.changed(tableNum(SalesBookTrans_RU)))
                {
                    salesBookTrans = queryRun.get(tableNum(SalesBookTrans_RU));
                }
                else if (queryRun.query().dataSourceTable(tableNum(PurchBookTrans_RU)) && queryRun.changed(tableNum(PurchBookTrans_RU)))
                {
                    purchBookTrans = queryRun.get(tableNum(PurchBookTrans_RU));
                }

                if (module == SalesPurch::Sales)
                {
                    sign = salesBookTrans ? 1 : - 1;
                }
                else
                {
                    sign = purchBookTrans ? 1 : - 1;
                }

                restoredVAT = (salesBookTrans &&
                               (salesBookTrans.TransType == SalesPurchBookTransType_RU::PrepaymentStorno ||
                                salesBookTrans.TransType == SalesPurchBookTransType_RU::VATRestoring));

                if (salesBookTrans)
                {
                    salesPurchBookTrans = salesBookTrans;
                }
                else
                {
                    salesPurchBookTrans = purchBookTrans;
                }

                if (formSetLines && ! formSetLines.in([salesPurchBookTrans.TableId, salesPurchBookTrans.RecId]))
                {
                    continue;
                }

                if (queryRun.query().dataSourceTable(tableNum(FactureJour_RU)))
                {
                    factureJour = queryRun.get(tableNum(FactureJour_RU));
                    if (factureJour && (factureJour.Module != salesBookTrans.factureModule()))
                    {
                        continue;
                    }
                }

                if (salesPurchBookTrans.TransType != SalesPurchBookTransType_RU::Prepayment &&
                    salesPurchBookTrans.TransType != SalesPurchBookTransType_RU::PrepaymentStorno)
                {
                    prepayment = false;
                }
                else
                {
                    prepayment = true;
                }

                if (salesPurchBookTrans.AmountLiableToVAT0)
                {
                    amountLiableToVAT = salesPurchBookTrans.AmountLiableToVAT0 * sign;

                    this.addAmount(vatMap, amountLiableToVAT, 0, 0, factureJour.ExportProcessing, restoredVAT, prepayment);
                    getStruct(amountVATZeroDomestic,
                              amountVATZeroExport,
                              amountVATZeroRestored).addAmounts(amountLiableToVAT,
                                                                prepayment ? 0 : amountLiableToVAT,
                                                                0);
                }

                if (salesPurchBookTrans.AmountLiableToVAT10)
                {
                    amountLiableToVAT = salesPurchBookTrans.AmountLiableToVAT10 * sign;
                    taxAmountVAT      = salesPurchBookTrans.TaxAmountVAT10      * sign;

                    this.addAmount(vatMap,
                                   amountLiableToVAT,
                                   taxAmountVAT,
                                   this.vatValue(salesPurchBookTrans.TableId,
                                                 salesPurchBookTrans.FactureId,
                                                 salesPurchBookTrans.TransType,
                                                 VATType_RU::Reduced),
                                   factureJour.ExportProcessing,
                                   restoredVAT, prepayment);
                    getStruct(amountVATReducedDomestic,
                              amountVATReducedExport,
                              amountVATReducedRestored).addAmounts(amountLiableToVAT + taxAmountVAT,
                                                                   prepayment ? 0 : amountLiableToVAT,
                                                                   taxAmountVAT);
                }
                if (salesPurchBookTrans.AmountLiableToVAT20)
                {
                    this.addAmount(vatMap,
                                   salesPurchBookTrans.AmountLiableToVAT20 * sign,
                                   salesPurchBookTrans.TaxAmountVAT20 * sign,
                                   this.vatValue(salesPurchBookTrans.TableId,
                                                 salesPurchBookTrans.FactureId,
                                                 salesPurchBookTrans.TransType,
                                                 VATType_RU::Full),
                                   factureJour.ExportProcessing,
                                   restoredVAT, prepayment);

                    AmountMST amountLiableToVAT20, taxAmountVAT20,
                        amountLiableToVAT18, taxAmountVAT18;
                    if (salesBookTrans)
                    {
                        [ amountLiableToVAT20, taxAmountVAT20,
                            amountLiableToVAT18, taxAmountVAT18 ] = salesBookTrans.amountsVATStandard();
                    }
                    else
                    {
                        [ amountLiableToVAT20, taxAmountVAT20,
                            amountLiableToVAT18, taxAmountVAT18 ] = purchBookTrans.amountsVATStandard();
                        amountLiableToVAT20 = amountLiableToVAT20 * sign;
                        taxAmountVAT20 = taxAmountVAT20 * sign;
                        amountLiableToVAT18 = amountLiableToVAT18 * sign;
                        taxAmountVAT18 = taxAmountVAT18 * sign;
                    }

                    getStruct(amountVATStandardDomestic,
                              amountVATStandardExport,
                              amountVATStandardRestored).addAmounts(amountLiableToVAT18 + taxAmountVAT18,
                                                                    prepayment ? 0 : amountLiableToVAT18,
                                                                    taxAmountVAT18);
                    getStruct(amountVATStandard20Domestic,
                              amountVATStandard20Export,
                              amountVATStandard20Restored).addAmounts(amountLiableToVAT20 + taxAmountVAT20,
                                                                      prepayment ? 0 : amountLiableToVAT20,
                                                                      taxAmountVAT20);
                }
                if (salesPurchBookTrans.AmountNotLiableToVAT)
                {
                    if (restoredVAT)
                    {
                        if (!prepayment)
                        {
                            amountNotLiableToVATRestored += salesPurchBookTrans.AmountNotLiableToVAT * sign;
                        }
                        else
                        {
                            amountNotLiableToVATRestoredPrepayment += salesPurchBookTrans.AmountNotLiableToVAT * sign;
                        }
                    }
                    else
                    {
                        if (factureJour.ExportProcessing)
                        {
                            if (!prepayment)
                            {
                                amountNotLiableToVATExport += salesPurchBookTrans.AmountNotLiableToVAT * sign;
                            }
                            else
                            {
                                amountNotLiableToVATExportPrepayment += salesPurchBookTrans.AmountNotLiableToVAT * sign;
                            }
                        }
                        else
                        {
                            if (!prepayment)
                            {
                                amountNotLiableToVATDomestic += salesPurchBookTrans.AmountNotLiableToVAT * sign;
                            }
                            else
                            {
                                amountNotLiableToVATDomesticPrepayment += salesPurchBookTrans.AmountNotLiableToVAT * sign;
                            }
                        }
                    }
                }
            }

            amountInclVATDomestic = amountVATZeroDomestic.amountInclVAT()       +
                                    amountVATReducedDomestic.amountInclVAT()    +
                                    amountVATStandardDomestic.amountInclVAT()   +
                                    amountVATStandard20Domestic.amountInclVAT() +
                                    amountNotLiableToVATDomestic                +
                                    amountNotLiableToVATDomesticPrepayment;

            amountInclVATExport   = amountVATZeroExport.amountInclVAT()       +
                                    amountVATReducedExport.amountInclVAT()    +
                                    amountVATStandardExport.amountInclVAT()   +
                                    amountVATStandard20Export.amountInclVAT() +
                                    amountNotLiableToVATExport                +
                                    amountNotLiableToVATExportPrepayment;

            amountInclVATRestored = amountVATZeroRestored.amountInclVAT()       +
                                    amountVATReducedRestored.amountInclVAT()    +
                                    amountVATStandardRestored.amountInclVAT()   +
                                    amountVATStandard20Restored.amountInclVAT() +
                                    amountNotLiableToVATRestored                +
                                    amountNotLiableToVATRestoredPrepayment;

            taxMap.insert(bookRecId, [vatMap.pack(),
                                      amountNotLiableToVATDomestic,
                                      amountInclVATDomestic,
                                      amountNotLiableToVATExport,
                                      amountInclVATExport,
                                      amountNotLiableToVATRestored,
                                      amountInclVATRestored]);
        }

        return vatMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountInclVAT</Name>
				<Source><![CDATA[
    public AmountMST getAmountInclVAT()
    {
        return amountInclVATDomestic + amountInclVATExport + amountInclVATRestored;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountInclVATDomestic</Name>
				<Source><![CDATA[
    public AmountMST getAmountInclVATDomestic()
    {
        return amountInclVATDomestic;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountInclVATExport</Name>
				<Source><![CDATA[
    public AmountMST getAmountInclVATExport()
    {
        return amountInclVATExport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountInclVATRestored</Name>
				<Source><![CDATA[
    public AmountMST getAmountInclVATRestored()
    {
        return amountInclVATRestored;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountNotLiableToVAT</Name>
				<Source><![CDATA[
    public AmountMST getAmountNotLiableToVAT()
    {
        return amountNotLiableToVATDomestic + amountNotLiableToVATExport + amountNotLiableToVATRestored;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountNotLiableToVATDomestic</Name>
				<Source><![CDATA[
    public AmountMST getAmountNotLiableToVATDomestic()
    {
        return amountNotLiableToVATDomestic;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountNotLiableToVATExport</Name>
				<Source><![CDATA[
    public AmountMST getAmountNotLiableToVATExport()
    {
        return amountNotLiableToVATExport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountNotLiableToVATRestored</Name>
				<Source><![CDATA[
    public AmountMST getAmountNotLiableToVATRestored()
    {
        return amountNotLiableToVATRestored;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountVATReduced</Name>
				<Source><![CDATA[
    public BookStructSmallVATAmounts_RU getAmountVATReduced()
    {
        BookStructSmallVATAmounts_RU    amountVATReduced = new BookStructSmallVATAmounts_RU();;

        amountVATReduced.addAmounts2(amountVATReducedDomestic);
        amountVATReduced.addAmounts2(amountVATReducedExport);
        amountVATReduced.addAmounts2(amountVATReducedRestored);

        return amountVATReduced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountVATStandard</Name>
				<Source><![CDATA[
    public BookStructSmallVATAmounts_RU getAmountVATStandard()
    {
        BookStructSmallVATAmounts_RU    amountVATStandard = new BookStructSmallVATAmounts_RU();;

        amountVATStandard.addAmounts2(amountVATStandardDomestic);
        amountVATStandard.addAmounts2(amountVATStandardExport);
        amountVATStandard.addAmounts2(amountVATStandardRestored);

        return amountVATStandard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountVATStandard20</Name>
				<Source><![CDATA[
    public BookStructSmallVATAmounts_RU getAmountVATStandard20()
    {
        BookStructSmallVATAmounts_RU    amountVATStandard20 = new BookStructSmallVATAmounts_RU();;

        amountVATStandard20.addAmounts2(amountVATStandard20Domestic);
        amountVATStandard20.addAmounts2(amountVATStandard20Export);
        amountVATStandard20.addAmounts2(amountVATStandard20Restored);

        return amountVATStandard20;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountVATZero</Name>
				<Source><![CDATA[
    public BookStructSmallVATAmounts_RU getAmountVATZero()
    {
        BookStructSmallVATAmounts_RU    amountVATZero = new BookStructSmallVATAmounts_RU();;

        amountVATZero.addAmounts2(amountVATZeroDomestic);
        amountVATZero.addAmounts2(amountVATZeroExport);
        amountVATZero.addAmounts2(amountVATZeroRestored);

        return amountVATZero;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    #VATTransitionPeriod_RU
    private QueryRun initQueryRun()
    {
        Query                   query = new Query();
        QueryRun                queryRun;
        QueryBuildDataSource    qbds;
        SalesPurchBookTrans_RU  salesPurchBookTrans;

        switch (module)
        {
            case SalesPurch::Sales :
                if (SalesBookTable_RU::find(bookRecId).getToDate() < #BookCorrectionDate)
                {
                    qbds = query.addDataSource(tableNum(SalesBookTrans_RU));
                    qbds.addRange(fieldNum(SalesBookTrans_RU, SalesBookTable_RU)).value(queryValue(bookRecId));
                }
                else
                {
                    qbds = query.addDataSource(tableNum(SalesBookTrans_RU));
                    SalesBookTable_RU::initDefaultQuery(bookRecId, qbds);

                    qbds = query.addDataSource(tableNum(PurchBookTrans_RU));
                    SalesBookTable_RU::initDefaultQuery(bookRecId, qbds);
                }

                qbds = query.dataSourceTable(tableNum(SalesBookTrans_RU));
                qbds = qbds.addDataSource(tableNum(FactureJour_RU));
                qbds.addLink(fieldNum(SalesBookTrans_RU, FactureId), fieldNum(FactureJour_RU, FactureId));
                qbds.addSelectionField(fieldNum(FactureJour_RU, ExportProcessing));
                qbds.addSelectionField(fieldNum(FactureJour_RU, Module));
                qbds.joinMode(JoinMode::InnerJoin);
                break;

            case SalesPurch::Purch :
                if (PurchBookTable_RU::find(bookRecId).getToDate() < #BookCorrectionDate)
                {
                    qbds = query.addDataSource(tableNum(PurchBookTrans_RU));
                    qbds.addRange(fieldNum(PurchBookTrans_RU, PurchBookTable_RU)).value(queryValue(bookRecId));
                }
                else
                {
                    qbds = query.addDataSource(tableNum(PurchBookTrans_RU));
                    PurchBookTable_RU::initDefaultQuery(bookRecId, qbds);

                    qbds = query.addDataSource(tableNum(SalesBookTrans_RU));
                    PurchBookTable_RU::initDefaultQuery(bookRecId, qbds);
                }
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (formQuery)
        {
            formSetLines = new Set(Types::Container);

            queryRun = new QueryRun(formQuery);
            while (queryRun.next())
            {
                salesPurchBookTrans = queryRun.getNo(1);
                formSetLines.add([salesPurchBookTrans.TableId, salesPurchBookTrans.RecId]);
            }
        }

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        taxMap = new Map(Types::Int64, Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBookRecId</Name>
				<Source><![CDATA[
    public SalesPurchBookRecId_RU parmBookRecId(SalesPurchBookRecId_RU _bookRecId = bookRecId)
    {
        bookRecId = _bookRecId;
        return bookRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormQuery</Name>
				<Source><![CDATA[
    public Query parmFormQuery(Query _formQuery = formQuery)
    {
        ;
        formQuery = _formQuery;
        return formQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormRun</Name>
				<Source><![CDATA[
    public FormRun parmFormRun(FormRun _formRun = formRun)
    {
        ;
        formRun = _formRun;
        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModule</Name>
				<Source><![CDATA[
    public SalesPurch parmModule(SalesPurch _module = module)
    {
        module = _module;
        return module;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVatGroup</Name>
				<Source><![CDATA[
    public FormGroupControl parmVatGroup(FormGroupControl _vatGroupDomestic = vatGroupDomestic)
    {
        vatGroupDomestic = _vatGroupDomestic;
        return vatGroupDomestic;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVatGroupExport</Name>
				<Source><![CDATA[
    public FormGroupControl parmVatGroupExport(FormGroupControl _vatGroupExport = vatGroupExport)
    {
        vatGroupExport = _vatGroupExport;
        return vatGroupExport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVatGroupRestored</Name>
				<Source><![CDATA[
    public FormGroupControl parmVatGroupRestored(FormGroupControl _vatGroupRestored = vatGroupRestored)
    {
        vatGroupRestored = _vatGroupRestored;
        return vatGroupRestored;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatValue</Name>
				<Source><![CDATA[
    private TaxValue vatValue(tableId                    _tableId,
                              FactureId_RU               _factureId,
                              SalesPurchBookTransType_RU _transType,
                              VATType_RU                 _vatType)
    {
        FactureTrans_RU trans;

        void selectOne(FactureModule_RU _module)
        {
            select firstonly vatValue from trans
                where trans.FactureId == _factureId &&
                      trans.Module    == _module    &&
                      trans.vatType   == _vatType;
        }

        void selectTwo(FactureModule_RU _module,
                       FactureModule_RU _moduleSec)
        {
            select firstonly vatValue from trans
                where trans.FactureId == _factureId  &&
                      (trans.Module   == _module ||
                       trans.Module   == _moduleSec) &&
                      trans.vatType   == _vatType;
        }

        switch (_tableId)
        {
            case tableNum(SalesBookTrans_RU) :
                switch (_transType)
                {
                    case SalesPurchBookTransType_RU::TaxCorrection :
                        selectTwo(FactureModule_RU::TaxCorrectionSales,
                                  FactureModule_RU::TaxCorrectionSales_Vend);
                        break;

                    case SalesPurchBookTransType_RU::PrepaymentStorno :
                        selectOne(FactureModule_RU::Vend);
                        break;

                    case SalesPurchBookTransType_RU::VATRestoring :
                        select firstonly vatValue from trans
                            where trans.FactureId   == _factureId                           &&
                                  trans.vatType     == _vatType                             &&
                                  (trans.Module     == FactureModule_RU::Vend               ||
                                   trans.Module     == FactureModule_RU::Empl               ||
                                   trans.Module     == FactureModule_RU::TaxCorrectionPurch ||
                                   trans.Module     == FactureModule_RU::TaxCorrectionPurch_Cust);
                        break;

                    default :
                        selectOne(FactureModule_RU::Cust);
                }
                break;

            case tableNum(PurchBookTrans_RU) :
                switch (_transType)
                {
                    case SalesPurchBookTransType_RU::PrepaymentStorno        :
                    case SalesPurchBookTransType_RU::VATStandardCancellation :
                        selectOne(FactureModule_RU::Cust);
                        break;

                    case SalesPurchBookTransType_RU::AdvanceReport    :
                        selectOne(FactureModule_RU::Empl);
                        break;

                    case SalesPurchBookTransType_RU::TaxCorrection    :
                        selectTwo(FactureModule_RU::TaxCorrectionPurch,
                                  FactureModule_RU::TaxCorrectionPurch_Cust);
                        break;

                    default                                           :
                        selectOne(FactureModule_RU::Vend);
                }
                break;
        }

        return trans.vatValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForCalc</Name>
				<Source><![CDATA[
    public static BookAmountsEngine_RU constructForCalc(SalesPurch             _module,
                                                        SalesPurchBookRecId_RU _bookRecId)
    {
        BookAmountsEngine_RU bookAmountsEngine;

        bookAmountsEngine = new BookAmountsEngine_RU();

        bookAmountsEngine.parmModule(_module);
        bookAmountsEngine.parmBookRecId(_bookRecId);

        return bookAmountsEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForDisplay</Name>
				<Source><![CDATA[
    public static BookAmountsEngine_RU constructForDisplay(SalesPurch              _module,
                                                           SalesPurchBookRecId_RU  _bookRecId,
                                                           FormRun                 _formRun,
                                                           FormGroupControl        _vatGroupDomestic,
                                                           FormGroupControl        _vatGroupExport   = null,
                                                           FormGroupControl        _vatGroupRestored = null)
    {
        BookAmountsEngine_RU bookAmountsEngine;

        bookAmountsEngine = new BookAmountsEngine_RU();

        bookAmountsEngine.parmFormRun(_formRun);
        bookAmountsEngine.parmModule(_module);
        bookAmountsEngine.parmVatGroup(_vatGroupDomestic);
        bookAmountsEngine.parmVatGroupExport(_vatGroupExport);
        bookAmountsEngine.parmVatGroupRestored(_vatGroupRestored);
        bookAmountsEngine.parmBookRecId(_bookRecId);

        return bookAmountsEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAllFactures</Name>
				<Source><![CDATA[
    static void processAllFactures(NoYes                                     _mark,
                                          NoYes                                     _onOff,
                                          SalesPurchBookVATProcessLogTransOper_RU   _logTransOper,
                                          SalesPurchBookDataMap_RU                  _logTrans,
                                          FormDataSource                            _logTransDS,
                                          FormDataSource                            _logTransOperDS,
                                          QueryRun                                  _logTransQR)
    {
        SalesPurchBookDataMap_RU    common, localLogTrans;
        QueryRun                    queryRun = new QueryRun(_logTransQR.pack());
        ;

        common.RecId = _logTrans.RecId;
        queryRun.setCursor(_logTrans);

        while (queryRun.next())
        {
            localLogTrans = queryRun.get(_logTrans.TableId);
            if (_mark)
            {
                if (localLogTrans.Marked != _onOff)
                {
                    localLogTrans.Marked = _onOff;
                    localLogTrans.doUpdate();
                    BookAmountsEngine_RU::processFacture(_mark, _onOff, _logTransOper, _logTrans, _logTransOperDS, false);
                }
            }
            else
            {
                BookAmountsEngine_RU::processFacture(_mark, _onOff, _logTransOper, _logTrans, _logTransOperDS, false);
            }
        }

        _logTransDS.research();
        _logTransDS.positionToRecord(common);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processFacture</Name>
				<Source><![CDATA[
    static void processFacture(NoYes                                   _mark,
                                      NoYes                                   _onOff,
                                      SalesPurchBookVATProcessLogTransOper_RU _logTransOper,
                                      SalesPurchBookDataMap_RU                _logTrans,
                                      FormDataSource                          _logTransOperDS,
                                      boolean                                 _research = true)
    {
        SalesPurchBookVATProcessLogTransOper_RU localLogTransOper;
        boolean                                 access, fieldEditable;
        ModuleCustVend                          module = _logTrans.TableId == tableNum(SalesBookVATProcessLogTrans_RU) ?
                                                         ModuleCustVend::Cust                                          :
                                                         ModuleCustVend::Vend;
        boolean                                 isDeferrals;
        ;

        localLogTransOper.RecId = _logTransOper.RecId;

        while select forupdate _logTransOper
            where _logTransOper.RefRecId         == _logTrans.RecId &&
                  _logTransOper.LogTableRefRecId == _logTrans.LogTableRefRecId
        {
            if (_mark)
            {
                _logTransOper.Marked = _onOff;
            }
            else
            {
                [access, fieldEditable] = _logTrans.SalesPurchBookDataMap_RU::isEditable(module);
                if (access || fieldEditable)
                {
                    if (_logTransOper.TableId == tableNum(TmpPurchBookVATProcessLogTransOper_RU))
                    {
                        isDeferrals = _logTransOper.Deferrals;
                    }

                    if (!isDeferrals)
                    {
                        _logTransOper.Blocked = _onOff;
                    }
                }
            }
            _logTransOper.doUpdate();
        }

        if (_research)
        {
            _logTransOperDS.research();
            _logTransOperDS.positionToRecord(localLogTransOper);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processFactureAdj</Name>
				<Source><![CDATA[
    public static void processFactureAdj(TmpPurchBookVATProcessLogTrans_RU       _logTrans,
                                         FormDataSource                          _logTransDS,
                                         SalesPurchBookVATProcessLogTransOper_RU _logTransOper)
    {
        TmpPurchBookVATProcessLogTrans_RU logTrans;
        TmpPurchBookVATProcessLogTrans_RU localLogTrans;
        boolean                           refresh;
        ;

        if (_logTrans.TransType != SalesPurchBookTransType_RU::Invoice &&
            _logTrans.TransType != SalesPurchBookTransType_RU::CreditNote)
        {
            return;
        }

        _logTransDS.write();

        localLogTrans.data(_logTrans);
        logTrans.setTmpData(_logTrans);

        while select forupdate logTrans
            where logTrans.CorrectedFactureId == localLogTrans.FactureId             &&
                  logTrans.TransType          == SalesPurchBookTransType_RU::SumDiff &&
                  logTrans.CorrectedPeriod
        {
            logTrans.Marked = localLogTrans.Marked;
            logTrans.doUpdate();

            while select forupdate _logTransOper
                where _logTransOper.RefRecId         == logTrans.RecId &&
                      _logTransOper.LogTableRefRecId == logTrans.LogTableRefRecId
            {
                _logTransOper.Marked = logTrans.Marked;
                _logTransOper.doUpdate();
            }

            refresh = true;
        }

        if (refresh)
        {
            _logTransDS.research();
            _logTransDS.positionToRecord(localLogTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLabels</Name>
				<Source><![CDATA[
    #define.DefaultStandardVATRate(20)
    public static Map setLabels( 
        Map _vatRateCache,
        FactureModule_RU _module,
        FactureId_RU _factureId,
        VATType_RU _vatType,
        FormGroupControl _vatGroup,
        FormRealControl _vatBaseContol,
        FormRealControl _vatAmountControl,
        str _vatBaseContolHelp = "@GLS107165",
        str _vatBaseContolLabel = _vatBaseContol ? _vatBaseContol.label() : "",
        str _vatAmountControlLabel = "@GLS107153",
        str _vatGroupCaption = "@GLS107151")
    {
        FactureTrans_RU  trans;
        real             displayVATValue;
        container        key = [ _factureId, _module, _vatType ];
        str              displayVATValueStr;

        if (! _vatRateCache)
        {
            _vatRateCache = new Map(Types::Container, Types::Real);
        }

        if (_vatRateCache.exists(key))
        {
            displayVATValue = _vatRateCache.lookup(key);
        }
        else
        {
            select firstonly vatValue from trans
                where trans.FactureId   == _factureId
                    && trans.Module     == _module
                    && trans.vatType    == _vatType;

            displayVATValue = trans ? trans.vatValue : #DefaultStandardVATRate;

            _vatRateCache.insert(key, displayVATValue);
        }

        displayVATValueStr = num2str(displayVATValue, 1, frac(displayVATValue) ? -1 : 0, Value2, Value3);

        if (_vatGroup)
        {
            _vatGroup.caption(strFmt(_vatGroupCaption, displayVATValueStr));
        }
        if (_vatBaseContol)
        {
            _vatBaseContol.label(strFmt(_vatBaseContolLabel, displayVATValueStr));
            _vatBaseContol.helpText(strFmt(_vatBaseContolHelp, displayVATValueStr));
        }
        if (_vatAmountControl)
        {
            _vatAmountControl.label(strFmt(_vatAmountControlLabel, displayVATValueStr));
            _vatAmountControl.helpText(strFmt(_vatAmountControlLabel, displayVATValueStr));
        }

        return _vatRateCache;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>