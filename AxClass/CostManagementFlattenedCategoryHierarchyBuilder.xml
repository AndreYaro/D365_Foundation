<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostManagementFlattenedCategoryHierarchyBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostManagementFlattenedCategoryHierarchyBuilder</c> class is responsible for building the <c>CostManagementFlattenedCategoryHierarchyView</c> view.
/// </summary>
public class CostManagementFlattenedCategoryHierarchyBuilder extends ApplicationSQLObjects
{
    SysDictTable    categoryTableDict;
    SysDictView     flattenedDimensionHierarchyDict;

    TableName       viewName,
                    dimensionHierarchyNodeTableName,
                    partitionsTableName;

    FieldName       categoryNameFieldName;

    container       asHierarchyLevelContainer,
                    cteHierarchyLevelParamentersContainer;

    const TableName CteJoinIdentifier       = 'PARENT';
    const TableName ChildNodeJoinIdentifier = 'CHILD';
    const FieldName LevelCte                = 'LEVEL';

    const EcoResCategoryNamedHierarchyRole CostManagementHierarchyRole = EcoResCategoryNamedHierarchyRole::CostManagement;

    const int       NumberOfHierarchyLevels = 15;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildCostManagementFlattenedCategoryHierarchyView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds synchronization of the view to the database.
    /// </summary>
    public static void buildCostManagementFlattenedCategoryHierarchyView()
    {
        CostManagementFlattenedCategoryHierarchyBuilder::construct().createSqlObjects();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createViews</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recreates the <c>CostManagementFlattenedCategoryHierarchyView</c> view.
    /// </summary>
    protected boolean createViews()
    {
        this.dropView(viewName);

        return this.executeSqlStatement(this.createViewSqlStmt());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createViewSqlStmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the SQL statement to create the <c>CostManagementFlattenedCategoryHierarchyView</c> view.
    /// </summary>
    private SysSQLStatementText createViewSqlStmt()
    {
        SysSQLStatementText sqlStmt = 'CREATE VIEW ' + viewName + ' AS ' + this.createSqlStatement();

        return sqlStmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        this.initializeBuilder();

        this.initialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static CostManagementFlattenedCategoryHierarchyBuilder construct()
    {
        return new CostManagementFlattenedCategoryHierarchyBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>as</Name>
				<Source><![CDATA[
    private SysSQLStatementText as(FieldName _fieldName, FieldName _alias)
    {
        return _fieldName + ' AS ' + _alias;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFieldName</Name>
				<Source><![CDATA[
    private FieldName buildFieldName(SysDictTable _table, FieldId _fieldId, boolean _skipTableName = false)
    {
        FieldName fieldName = _table.fieldObject(_fieldId).name(DbBackend::Sql);

        return _skipTableName 
            ? fieldName
            : _table.name(DbBackend::Sql) + '.' + fieldName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFullFieldName</Name>
				<Source><![CDATA[
    private FieldName buildFullFieldName(TableName _tableName, FieldName _fieldName)
    {
        Debug::assert(!strContains(_fieldName, '.'));

        return _tableName + '.' + _fieldName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeBuilder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the builder parameters.
    /// </summary>
    protected void initializeBuilder()
    {
        categoryTableDict               = new SysDictTable(tableNum(EcoResCategory));
        flattenedDimensionHierarchyDict = new SysDictView(tableNum(CostManagementFlattenedCategoryHierarchyView));
        viewName                        = flattenedDimensionHierarchyDict.name(DbBackend::Sql);
        categoryNameFieldName           = this.buildFieldName(categoryTableDict, fieldNum(EcoResCategory, Name), true);

        asHierarchyLevelContainer       = [flattenedDimensionHierarchyDict.fieldObject(fieldNum(CostManagementFlattenedCategoryHierarchyView, HierarchyLevel1 )).name(DbBackend::Sql),
                                            flattenedDimensionHierarchyDict.fieldObject(fieldNum(CostManagementFlattenedCategoryHierarchyView, HierarchyLevel2 )).name(DbBackend::Sql),
                                            flattenedDimensionHierarchyDict.fieldObject(fieldNum(CostManagementFlattenedCategoryHierarchyView, HierarchyLevel3 )).name(DbBackend::Sql),
                                            flattenedDimensionHierarchyDict.fieldObject(fieldNum(CostManagementFlattenedCategoryHierarchyView, HierarchyLevel4 )).name(DbBackend::Sql),
                                            flattenedDimensionHierarchyDict.fieldObject(fieldNum(CostManagementFlattenedCategoryHierarchyView, HierarchyLevel5 )).name(DbBackend::Sql),
                                            flattenedDimensionHierarchyDict.fieldObject(fieldNum(CostManagementFlattenedCategoryHierarchyView, HierarchyLevel6 )).name(DbBackend::Sql),
                                            flattenedDimensionHierarchyDict.fieldObject(fieldNum(CostManagementFlattenedCategoryHierarchyView, HierarchyLevel7 )).name(DbBackend::Sql),
                                            flattenedDimensionHierarchyDict.fieldObject(fieldNum(CostManagementFlattenedCategoryHierarchyView, HierarchyLevel8 )).name(DbBackend::Sql),
                                            flattenedDimensionHierarchyDict.fieldObject(fieldNum(CostManagementFlattenedCategoryHierarchyView, HierarchyLevel9 )).name(DbBackend::Sql),
                                            flattenedDimensionHierarchyDict.fieldObject(fieldNum(CostManagementFlattenedCategoryHierarchyView, HierarchyLevel10)).name(DbBackend::Sql),
                                            flattenedDimensionHierarchyDict.fieldObject(fieldNum(CostManagementFlattenedCategoryHierarchyView, HierarchyLevel11)).name(DbBackend::Sql),
                                            flattenedDimensionHierarchyDict.fieldObject(fieldNum(CostManagementFlattenedCategoryHierarchyView, HierarchyLevel12)).name(DbBackend::Sql),
                                            flattenedDimensionHierarchyDict.fieldObject(fieldNum(CostManagementFlattenedCategoryHierarchyView, HierarchyLevel13)).name(DbBackend::Sql),
                                            flattenedDimensionHierarchyDict.fieldObject(fieldNum(CostManagementFlattenedCategoryHierarchyView, HierarchyLevel14)).name(DbBackend::Sql),
                                            flattenedDimensionHierarchyDict.fieldObject(fieldNum(CostManagementFlattenedCategoryHierarchyView, HierarchyLevel15)).name(DbBackend::Sql)];

        cteHierarchyLevelParamentersContainer = ['HIERARCHYLEVEL1',
                                                 'HIERARCHYLEVEL2',
                                                 'HIERARCHYLEVEL3',
                                                 'HIERARCHYLEVEL4',
                                                 'HIERARCHYLEVEL5',
                                                 'HIERARCHYLEVEL6',
                                                 'HIERARCHYLEVEL7',
                                                 'HIERARCHYLEVEL8',
                                                 'HIERARCHYLEVEL9',
                                                 'HIERARCHYLEVEL10',
                                                 'HIERARCHYLEVEL11',
                                                 'HIERARCHYLEVEL12',
                                                 'HIERARCHYLEVEL13',
                                                 'HIERARCHYLEVEL14',
                                                 'HIERARCHYLEVEL15'];

        Debug::assert(conLen(asHierarchyLevelContainer) == conLen(cteHierarchyLevelParamentersContainer));
        Debug::assert(conLen(asHierarchyLevelContainer) == NumberOfHierarchyLevels);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSqlStatement</Name>
				<Source><![CDATA[
    protected SysSQLStatementText createSqlStatement()
    {
        const TableName CteName             = 'FlattenedCTE';
        const FieldName HierarchyCte        = 'CategoryHierarchy';
        const FieldName HierarchyNameCte    = 'CategoryHierarchyName';
        const FieldName RecIdCte            = 'RecId';
        const FieldName PartitionCte        = 'Partition';
        const FieldName IsActiveCte         = 'IsActive';

        SysDictTable categoryHierarchyTable                     = new SysDictTable(tableNum(EcoResCategoryHierarchy));
        TableName categoryHierarchyTableName                    = categoryHierarchyTable.name(DbBackend::Sql);
        FieldName categoryHierarchyRecIdFieldName               = this.buildFieldName(categoryHierarchyTable, fieldNum(EcoResCategoryHierarchy, RecId));
        FieldName categoryHierarchyNameFieldName               = this.buildFieldName(categoryHierarchyTable, fieldNum(EcoResCategoryHierarchy, Name), true);
        FieldName categoryHierarchyPartitionFieldName           = this.buildFieldName(categoryHierarchyTable, fieldNum(EcoResCategoryHierarchy, Partition));

        SysDictTable categoryHierarchyRoleTable                 = new SysDictTable(tableNum(EcoResCategoryHierarchyRole));
        TableName categoryHierarchyRoleTableName                = categoryHierarchyRoleTable.name(DbBackend::Sql);
        FieldName categoryHierarchyRoleHierarchyFieldName       = this.buildFieldName(categoryHierarchyRoleTable, fieldNum(EcoResCategoryHierarchyRole, CategoryHierarchy));
        FieldName categoryHierarchyRoleNamedRoleFieldName       = this.buildFieldName(categoryHierarchyRoleTable, fieldNum(EcoResCategoryHierarchyRole, NamedCategoryHierarchyRole));
        
        SysDictTable productCategoryTable                       = new SysDictTable(tableNum(EcoResProductCategory));
        TableName productCategoryTableName                      = productCategoryTable.name(DbBackend::Sql);
        FieldName productCategoryCategoryIdFieldName            = this.buildFieldName(productCategoryTable, fieldNum(EcoResProductCategory, Category));
        FieldName productCategoryProductIdFieldName             = this.buildFieldName(productCategoryTable, fieldNum(EcoResProductCategory, Product));

        SysDictTable inventTable                                = new SysDictTable(tableNum(InventTable));
        TableName inventTableName                               = inventTable.name(DbBackend::Sql);
        FieldName inventTableProductFieldName                   = this.buildFieldName(inventTable, fieldNum(InventTable, Product));
        FieldName inventTableItemIdFieldName                    = this.buildFieldName(inventTable, fieldNum(InventTable, ItemId));
        FieldName inventTableDataAreaIdFieldName                = this.buildFieldName(inventTable, fieldNum(InventTable, DataAreaId));

        FieldName categoryTableName                             = categoryTableDict.name(DbBackend::Sql);
        FieldName categoryParentCategoryFieldName               = this.buildFieldName(categoryTableDict, fieldNum(EcoResCategory, PARENTCATEGORY), true);
        FieldName categoryLevelFieldName                        = this.buildFieldName(categoryTableDict, fieldNum(EcoResCategory, Level), true);
        FieldName categoryIsActiveFieldName                     = this.buildFieldName(categoryTableDict, fieldNum(EcoResCategory, IsActive), true);
        FieldName categoryRecIdFieldName                        = this.buildFieldName(categoryTableDict, fieldNum(EcoResCategory, RecId), true);
        FieldName categoryHierarchyFieldName                    = this.buildFieldName(categoryTableDict, fieldNum(EcoResCategory, CategoryHierarchy), true);
        FieldName categoryPartitionFieldName                    = this.buildFieldName(categoryTableDict, fieldNum(EcoResCategory, Partition), true);
        
        FieldName asCategoryHierarchyName                       = this.buildFieldName(flattenedDimensionHierarchyDict, fieldNum(CostManagementFlattenedCategoryHierarchyView, CategoryHierarchyName), true);
        FieldName asItemId                                      = this.buildFieldName(flattenedDimensionHierarchyDict, fieldNum(CostManagementFlattenedCategoryHierarchyView, ItemId), true);
        FieldName asRecId                                       = this.buildFieldName(flattenedDimensionHierarchyDict, fieldNum(CostManagementFlattenedCategoryHierarchyView, RecId), true);
        FieldName asPartition                                   = this.buildFieldName(flattenedDimensionHierarchyDict, fieldNum(CostManagementFlattenedCategoryHierarchyView, Partition), true);
        FieldName asDataAreaId                                  = this.buildFieldName(inventTable, fieldNum(InventTable, DataAreaId), true);

        return 'WITH ' + CteName + ' (' +
                    HierarchyNameCte + ', ' +
                    HierarchyCte + ', ' +
                    RecIdCte + ', ' +
                    PartitionCte + ', ' +
                    LevelCte + ', ' +
                    IsActiveCte + ', ' +
                    this.getCteHierarchyLevelsParameterList() +
               ') AS (' +
               'SELECT ' +
                    this.buildFullFieldName(categoryHierarchyTableName, categoryHierarchyNameFieldName) + ', ' +
                    this.buildFullFieldName(categoryTableName, categoryHierarchyFieldName) + ', ' +
                    'CAST(0 AS BIGINT)' +', ' +
                    this.buildFullFieldName(categoryTableName, categoryPartitionFieldName) +', ' +
                    '0' +', ' +
                    '1' +', ' +
                    this.getEmptyHierarchiesLevels() +
                ' FROM ' + categoryTableName + 
                    ' JOIN ' + categoryHierarchyTableName + ' ON ' + this.buildFullFieldName(categoryTableName, categoryPartitionFieldName) + ' = ' +
                        categoryHierarchyPartitionFieldName + ' AND ' + 
                        categoryHierarchyRecIdFieldName + ' = ' + this.buildFullFieldName(categoryTableName, categoryHierarchyFieldName) +
                    ' JOIN ' + categoryHierarchyRoleTableName + ' ON ' + categoryHierarchyRoleHierarchyFieldName + ' = ' + categoryHierarchyRecIdFieldName +
                ' WHERE ' + this.buildFullFieldName(categoryTableName, categoryParentCategoryFieldName) + ' = 0 AND ' +
                    categoryHierarchyRoleNamedRoleFieldName + ' = ' + int2Str(enum2int(CostManagementHierarchyRole)) +
                ' UNION ALL ' +
                ' SELECT ' +
                    this.buildFullFieldName(CteJoinIdentifier,       HierarchyNameCte)   + ', ' +
                    this.buildFullFieldName(CteJoinIdentifier,       HierarchyCte)   + ', ' +
                    this.buildFullFieldName(ChildNodeJoinIdentifier, categoryRecIdFieldName)       + ', ' +
                    this.buildFullFieldName(ChildNodeJoinIdentifier, categoryPartitionFieldName)   + ', ' +
                    this.buildFullFieldName(CteJoinIdentifier,       LevelCte)       +' + 1' + ', ' +
                    this.buildFullFieldName(ChildNodeJoinIdentifier, categoryIsActiveFieldName)    + ', ' +
                    this.getCasesForLevels() +
            ' FROM ' + categoryTableName + ' ' + ChildNodeJoinIdentifier + 
                ' JOIN ' + CteName + ' ' + CteJoinIdentifier + ' ON ' +
                    this.buildFullFieldName(CteJoinIdentifier, PartitionCte) + ' = ' + this.buildFullFieldName(ChildNodeJoinIdentifier, categoryPartitionFieldName) + ' AND ' +
                    this.buildFullFieldName(CteJoinIdentifier, RecIdCte) + ' = ' + this.buildFullFieldName(ChildNodeJoinIdentifier, categoryParentCategoryFieldName) + ' AND ' +
                    this.buildFullFieldName(CteJoinIdentifier, categoryHierarchyFieldName) + ' = ' + this.buildFullFieldName(ChildNodeJoinIdentifier, categoryHierarchyFieldName) +
                ' ) SELECT ' +
                       this.as(this.buildFullFieldName(CteName, HierarchyNameCte), asCategoryHierarchyName) + ', ' +
                       this.as(this.buildFullFieldName(CteName, RecIdCte),              asRecId) + ', ' +
                       this.as(this.buildFullFieldName(CteName, PartitionCte),          asPartition) + ', ' +
                       this.as(inventTableItemIdFieldName,              asItemId) + ', ' +
                       this.as(inventTableDataAreaIdFieldName, asDataAreaId) + ', ' +
                       this.getHierarchyLevelSelectionList(CteName) +
                      ' FROM ' + CteName +
                          ' JOIN ' + productCategoryTableName + ' ON ' + this.buildFullFieldName(CteName, RecIdCte) + ' = ' + productCategoryCategoryIdFieldName +
                          ' JOIN ' + inventTableName + ' ON ' + productCategoryProductIdFieldName + ' = ' + inventTableProductFieldName +
                      ' WHERE ' + this.buildFullFieldName(CteName, IsActiveCte) + ' = 1';
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        CostManagementFlattenedCategoryHierarchyBuilder::construct().createSqlObjects();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCasesForLevels</Name>
				<Source><![CDATA[
    private SysSQLStatementText getCasesForLevels()
    {
        SysSQLStatementText    result;

        for (int i = 1; i <= NumberOfHierarchyLevels; ++i)
        {
            if (i > 1)
            {
                result += ', ';
            }

            result += strFmt('CASE %1.%2 WHEN %3 THEN %4.%5 ELSE %1.%6 END ', CteJoinIdentifier, LevelCte, i-1, ChildNodeJoinIdentifier, categoryNameFieldName, conPeek(cteHierarchyLevelParamentersContainer, i));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmptyHierarchiesLevels</Name>
				<Source><![CDATA[
    private SysSQLStatementText getEmptyHierarchiesLevels()
    {
        SysSQLStatementText    result;

        int dimensionHierarchyNodeNameStrLength;

        SqlDictionary sqlDictionary;
        select firstonly strSize from sqlDictionary
            where sqlDictionary.tabId   == tableNum(ECORESCATEGORY)
                && sqlDictionary.fieldId == fieldNum(ECORESCATEGORY, Name)
                && sqlDictionary.name    == fieldStr(ECORESCATEGORY, Name);

        dimensionHierarchyNodeNameStrLength = sqlDictionary.strSize;

        if (dimensionHierarchyNodeNameStrLength == 0.0)
        {
            dimensionHierarchyNodeNameStrLength = new DictType(extendedTypeNum(EcoResCategoryName)).stringLen();
        }

        SysSQLStatementText emptyString = SysComputedColumn::cast('\'\'', strFmt('NVARCHAR(%1)', dimensionHierarchyNodeNameStrLength));

        for (int i = 1; i <= NumberOfHierarchyLevels; ++i)
        {
            if (i > 1)
            {
                result += ', ';
            }

            result += emptyString;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCteHierarchyLevelsParameterList</Name>
				<Source><![CDATA[
    private SysSQLStatementText getCteHierarchyLevelsParameterList()
    {
        SysSQLStatementText parameterList;

        for (int i = 1; i <= conLen(cteHierarchyLevelParamentersContainer); ++i)
        {
            if (i > 1)
            {
                parameterList += ', ';
            }

            parameterList += conPeek(cteHierarchyLevelParamentersContainer, i);
        }

        return parameterList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHierarchyLevelSelectionList</Name>
				<Source><![CDATA[
    private SysSQLStatementText getHierarchyLevelSelectionList(str _tableName)
    {
        SysSQLStatementText result;

        for (int i = 1; i <= conLen(cteHierarchyLevelParamentersContainer); ++i)
        {
            if (i > 1)
            {
                result += ', ';
            }

            result += this.as(this.buildFullFieldName(_tableName, conPeek(cteHierarchyLevelParamentersContainer, i)), conPeek(asHierarchyLevelContainer, i));
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>