<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGOp_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class LedgerRRGOp_RU
{
    LedgerRRGEBufferEval_W      bufferEval;
    LedgerRRGOperationParm_RU   parms;
    DateCode                    period;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
	abstract public AmountMST calc()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>eval</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str eval()
    {
        return num2str(this.calc(), -1, parms.pointSignNum(), 1, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void init(LedgerRRGEBufferEval_W _bufferEval)
    {
        if (!_bufferEval)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        bufferEval = _bufferEval;
        parms      = bufferEval.parms();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNumeric</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isNumeric()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
	protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBufferEval</Name>
				<Source><![CDATA[
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
	public static LedgerRRGOp_RU newFromBufferEval(LedgerRRGEBufferEval_W _bufferEval)
    {
        LedgerRRGOp_RU              operation;
        LedgerRRGOperationTable_RU  operationTable;
       
    
        if (!_bufferEval)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }
    
        operationTable = _bufferEval.parms().operation();
    
        switch(operationTable.DataType)
        {
            case LedgerRRGDataType_RU::Trans :
            case LedgerRRGDataType_RU::Contractor:
                operation = LedgerRRGOp_Ledger_Trans_RU::newFromOperationType(operationTable.LedgerOperation);
                break;
    
            case LedgerRRGDataType_RU::Budget:
                operation = LedgerRRGOp_Ledger_Budget_RU::newFromOperationType(operationTable.LedgerOperation);
                break;
    
            case LedgerRRGDataType_RU::Register :
                operation = LedgerRRGOp_Reg_RU::newFromOperationType(operationTable.LedgerOperation);
                break;
    
            case LedgerRRGDataType_RU::Constant :
                operation = LedgerRRGOp_Const_RU::construct();
                break;
    
            case LedgerRRGDataType_RU::DimFocusBalance:
                if (FeatureStateProvider::IsFeatureEnabled(GeneralLedgerBalanceFeature::instance()))
                {
                    operation = LedgerRRGOp_Ledger_GeneralLedgerBalance_RU::construct();
                }
                else
                {
                    operation = LedgerRRGOp_Ledger_DimFocus_RU::construct();
                }
                break;
        }
    
        if (operation)
        {
            operation.init(_bufferEval);
        }
        else
        {
            throw error(strfmt("@LedgerRRG:LedgerRRG_OperationTypeNotSupported", operationTable.LedgerOperation, operationTable.DataType));
        }
    
        return operation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>