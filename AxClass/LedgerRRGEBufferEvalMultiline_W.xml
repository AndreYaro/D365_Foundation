<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGEBufferEvalMultiline_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerRRGEBufferEvalMultiline_W extends LedgerRRGEBufferEval_W
{
    Map                     multiLineDatasources;
    Map                     sortedMultiLineDatasources;
    LedgerRRGEBufferEval_W  lastEvaluator;
    boolean                 multiLineDatasourcesLocked;
    LedgerRRGEBufferEval_W  currentEvaluator;
    LedgerRRGELoadBase_W    loadBase;

    protected const int StructDatasourceIdx = 1;
    protected const int StructEvaluatorListId = 2;
    protected const int StructTablesMapIdx = 3;
    protected const str DatasourceQueryName = 'DatasourceQuery';
    protected const str EvaluatorListName = 'EvaluatorList';
    protected const str TablesMapName = 'TablesMap';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currentEvaluator</Name>
				<Source><![CDATA[
    public LedgerRRGEBufferEval_W currentEvaluator(LedgerRRGEBufferEval_W _currentEvaluator = currentEvaluator)
    {
        currentEvaluator = _currentEvaluator;
        return currentEvaluator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceQuery</Name>
				<Source><![CDATA[
    public LedgerRRGEDatasourceQuery_W datasourceQuery(LedgerRRGEQueryRecId_W _queryRecId, LedgerRRGEDocuments_W _document = null)
    {
        Struct          datasourceStruct;
        Map             tablesMap;
        SetEnumerator   se;

        LedgerRRGEDatasourceQuery_W res = super(_queryRecId, _document);

        if (res)
        {
            res.parmEvaluator(currentEvaluator);

            if (!multiLineDatasourcesLocked && res.isQueryMultiLine() && currentEvaluator && lastEvaluator != currentEvaluator)
            {
                lastEvaluator = currentEvaluator;
                if (!multiLineDatasources)
                {
                    multiLineDatasources = new Map(Types::Int64, Types::Class);
                }

                if (!sortedMultiLineDatasources)
                {
                    sortedMultiLineDatasources = new Map(Types::Integer, Types::Class);
                }

                if (!multiLineDatasources.exists(_queryRecId))
                {
                    datasourceStruct = new Struct(Types::Class, DatasourceQueryName,
                                                  Types::Class, EvaluatorListName,
                                                  Types::Class, TablesMapName);

                    tablesMap = new Map(Types::Integer, Types::Class);

                    se = res.tablesMap().keySet().getEnumerator();
                    while (se.moveNext())
                    {
                        tablesMap.insert(se.current(), new List(Types::Class));
                    }

                    datasourceStruct.valueIndex(StructDatasourceIdx, res);
                    datasourceStruct.valueIndex(StructTablesMapIdx, tablesMap);
                    multiLineDatasources.insert(_queryRecId, datasourceStruct);
                    sortedMultiLineDatasources.insert(res.sortOrder(), datasourceStruct);
                }
            }
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>eval</Name>
				<Source><![CDATA[
	protected str eval()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPropertyValue</Name>
				<Source><![CDATA[
    public str findPropertyValue(LedgerRRGEPropertyId_W _propertyId)
    {
        if (loadBase)
        {
            return loadBase.findPropertyValue(_propertyId);
        }

        return super(_propertyId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkToTableId</Name>
				<Source><![CDATA[
    public void linkToTableId(LedgerRRGEQueryRecId_W _queryRecId, int _tableId)
    {
        Struct  datasourceStruct;
        List    evaluatorList;
        Map     tablesMap;

        if (!multiLineDatasourcesLocked && multiLineDatasources && multiLineDatasources.exists(_queryRecId))
        {
            if (multiLineDatasources.exists(_queryRecId))
            {
                datasourceStruct = multiLineDatasources.lookup(_queryRecId);
                tablesMap        = datasourceStruct.valueIndex(StructTablesMapIdx);
                if(tablesMap.exists(_tableId))
                {
                    evaluatorList = tablesMap.lookup(_tableId);
                    evaluatorList.addEnd(currentEvaluator);
                }
                else
                {
                    throw error(strFmt("@LedgerRRG:LedgerRRG_UnknownTableID", _tableId, _queryRecId));
                }
            }
            else
            {
                throw error(strFmt("@LedgerRRG:LedgerRRG_IncorrectQueryD", _queryRecId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lock</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean lock(boolean _lock = multiLineDatasourcesLocked)
    {
        multiLineDatasourcesLocked = _lock;
        return multiLineDatasourcesLocked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>multiLineDatasources</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Map multiLineDatasources()
    {
        return multiLineDatasources;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadBase</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGELoadBase_W parmLoadBase(LedgerRRGELoadBase_W _loadBase = loadBase)
    {
        loadBase = _loadBase;
        return loadBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    public void reset()
    {
        super();

        multiLineDatasources        = null;
        currentEvaluator            = null;
        lastEvaluator               = null;
        multiLineDatasourcesLocked  = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static server LedgerRRGEBufferEvalMultiline_W construct()
    {
        return new LedgerRRGEBufferEvalMultiline_W();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>