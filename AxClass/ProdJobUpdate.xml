<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdJobUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProdJobUpdate
{
    ProdId              prodId;
    OprNum              oprNum;
    OprNum              oprNumOrig;

    BOMCalcData         bomCalcData;

    ProdTable           prodTable;

    boolean             scheduleAllJobs;

    // Provides quick access to all existing prodRouteJobs
    Map                 foundJobTypes; // [oprNum, OprPrio, JobType] -> integer

    // Shop Floor Control - Begin
    RecordLinkList      existingProdRouteJobs;
    // Shop Floor Control - End

    boolean             deleteCapacityReservations;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAllProdRouteJobs</Name>
				<Source><![CDATA[
    protected void createAllProdRouteJobs(ProdJobType                   _prodJobType,
                                          ProdRoute                     _prodRoute,
                                          RouteGroup                    _routeGroup,
                                          WrkCtrActivityRequirementSet  _activityRequirementSet)
    {
        ProdRouteJob                    primaryJob;
        ProdRouteJob                    prodRouteJob;
        Integer                         x;
        boolean                         updatePrev;

        if (!_prodJobType.activation(_routeGroup))
        {
            return;
        }

        Integer numberOfJobsToCreatePerJobtype = _activityRequirementSet.Quantity;
        if (!this.parmScheduleAllJobs())
        {
            numberOfJobsToCreatePerJobtype = 1;
        }

        if (!_prodRoute.OprPriority)
        {
            x = 0;
            while (x < numberOfJobsToCreatePerJobtype)
            {
                x += 1;

                prodRouteJob.clear();
                prodRouteJob.initFromProdRoute(_prodRoute);
                prodRouteJob.PropertyId       = _prodJobType.propertyId(_prodRoute, _prodRoute);
                prodRouteJob.JobControl       = _prodJobType.mustJobBeControlled(_routeGroup);

                if (!prodTable.status().isBefore(ProdStatus::StartedUp))
                    prodRouteJob.JobStatus    = ProdJobStatus::Waiting;

                prodRouteJob.CalcTimeHours    = _prodJobType.calcWrkCtrHours(bomCalcData,
                                                                             _prodRoute.primary(),
                                                                             _prodRoute.primary(),
                                                                             '',
                                                                             _prodRoute,
                                                                             _prodRoute) * _activityRequirementSet.LoadPercent / 100;

                prodRouteJob.NumType          = _prodJobType.numType();
                prodRouteJob.NumPrimary       = x;
                prodRouteJob.NumSecondary     = 0;
                prodRouteJob.JobType          = _prodJobType.routeJobType();

                if (x ==numberOfJobsToCreatePerJobtype)
                {
                    prodRouteJob.Link           = _prodJobType.scheduleNextJobLink();
                    prodRouteJob.LinkType       = _prodRoute.LinkType == SchedJobLinkType::Hard ? SchedJobLinkType::Hard : _prodJobType.scheduleNextJobLinkType();
                }
                else
                {
                    prodRouteJob.Link           = SchedJobLink::SS;
                    prodRouteJob.LinkType       = SchedJobLinkType::Hard;
                }

                if (prodRouteJob.CalcTimeHours > 0 || (prodRouteJob.CalcTimeHours == 0 && prodRouteJob.JobType == RouteJobType::Process))
                {
                    if (prodRouteJob.OprPriority == RouteOprPriority::Primary)
                        prodRouteJob.PropertyId   = prodRouteJob.PropertyId ? prodRouteJob.PropertyId : prodTable.PropertyId;

                    prodRouteJob.insert();
                    // Shop Floor Control - Begin
                    this.matchExistingProdRouteJob(prodRouteJob);
                    // Shop Floor Control - End

                    updatePrev    = true;
                }
            }

            if (updatePrev)
            {
                this.updatePrevLink(_prodJobType, _prodRoute);
            }
        }
        else
        {
            while select primaryJob
                where primaryJob.ProdId         == _prodRoute.ProdId      &&
                      primaryJob.OprNum         == _prodRoute.OprNum      &&
                      primaryJob.NumType        == _prodJobType.numType()        &&
                      primaryJob.OprPriority    == RouteOprPriority::Primary
            {
                x = 0;
                while (x < numberOfJobsToCreatePerJobtype)
                {
                    x += 1;

                    prodRouteJob.clear();
                    prodRouteJob.initFromProdRoute(_prodRoute);
                    prodRouteJob.PropertyId       = _prodJobType.propertyId(_prodRoute, _prodRoute);
                    prodRouteJob.JobControl       = _prodJobType.mustJobBeControlled(_routeGroup);

                    if (prodTable.status().isAfterOrEqualTo(ProdStatus::StartedUp))
                        prodRouteJob.JobStatus    = ProdJobStatus::Waiting;

                    prodRouteJob.CalcTimeHours    = primaryJob.CalcTimeHours;

                    prodRouteJob.NumType          = _prodJobType.numType();
                    prodRouteJob.NumPrimary       = primaryJob.NumPrimary;
                    prodRouteJob.NumSecondary     = x;
                    prodRouteJob.JobType          = _prodJobType.routeJobType();

                    prodRouteJob.Link             = SchedJobLink::None;
                    prodRouteJob.LinkType         = SchedJobLinkType::None;

                    if (prodRouteJob.CalcTimeHours > 0 || prodRouteJob.JobType == RouteJobType::Process)
                    {
                        prodRouteJob.PropertyId = prodRouteJob.PropertyId ? prodRouteJob.PropertyId : prodTable.PropertyId;
                    }

                    prodRouteJob.insert();

                    // Shop Floor Control - Begin
                    this.matchExistingProdRouteJob(prodRouteJob);
                    // Shop Floor Control - End
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJobs</Name>
				<Source><![CDATA[
    protected void createJobs(ProdRoute                     _prodRoute,
                              RouteGroup                    _routeGroup,
                              WrkCtrActivityRequirementSet  _activityRequirementSet)
    {
        ProdJobTypeSearch   prodJobTypeSearch = new ProdJobTypeSearch();

        if (prodJobTypeSearch.first())
        do
        {
            ProdJobType prodJobType = prodJobTypeSearch.prodJobType();

            Container key = [_prodRoute.OprNum, _prodRoute.OprPriority, prodJobType.routeJobType()];
            if (!foundJobTypes.exists(key))
            {
                if (prodJobType.scheduleAllJobs())
                {
                    this.createAllProdRouteJobs(prodJobType, _prodRoute, _routeGroup, _activityRequirementSet);
                }
                else
                {
                    this.createOneProdRouteJob(prodJobType, _prodRoute, _routeGroup, _activityRequirementSet);
                }
            }
        } while (prodJobTypeSearch.next());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOneProdRouteJob</Name>
				<Source><![CDATA[
    protected void createOneProdRouteJob(ProdJobType                    _prodJobType,
                                         ProdRoute                      _prodRoute,
                                         RouteGroup                     _routeGroup             = _prodRoute.routeGroup(),
                                         WrkCtrActivityRequirementSet   _activityRequirementSet = _prodRoute.activityRequirementSet())
    {
        ProdRouteJob                    prodRouteJob;

        if (!_prodRoute.OprPriority && _prodJobType.activation(_routeGroup))
        {
            prodRouteJob.initFromProdRoute(_prodRoute);
            prodRouteJob.PropertyId     = _prodJobType.propertyId(_prodRoute, _prodRoute);
            prodRouteJob.JobControl     = _prodJobType.mustJobBeControlled(_routeGroup);

            if (!prodTable.status().isBefore(ProdStatus::StartedUp))
            {
                prodRouteJob.JobStatus  = ProdJobStatus::Waiting;
            }

            prodRouteJob.CalcTimeHours  = _prodJobType.calcWrkCtrHours(bomCalcData,
                                                                       _prodRoute.primary(),
                                                                       _prodRoute.primary(),
                                                                       '',
                                                                       _prodRoute,
                                                                       _prodRoute) * _activityRequirementSet.LoadPercent / 100;

            if (prodRouteJob.CalcTimeHours > 0)
            {
                prodRouteJob.NumType        = _prodJobType.numType();
                prodRouteJob.NumPrimary     = 1;
                prodRouteJob.NumSecondary   = 0;
                prodRouteJob.JobType        = _prodJobType.routeJobType();

                prodRouteJob.Link           = _prodJobType.scheduleNextJobLink();
                prodRouteJob.LinkType       = _prodRoute.LinkType == SchedJobLinkType::Hard ? SchedJobLinkType::Hard : _prodJobType.scheduleNextJobLinkType();

                this.updatePrevLink(_prodJobType, _prodRoute);

                prodRouteJob.insert();
                // Shop Floor Control - Begin
                this.matchExistingProdRouteJob(prodRouteJob);
                // Shop Floor Control - End
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadExistingRouteJobs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads all the existing jobs for the specified production.
    /// </summary>
    protected void loadExistingRouteJobs()
    {
        foundJobTypes = new Map(Types::Container, Types::Integer);

        ProdRouteJob prodRouteJob = ProdRouteJob::findProdId(prodId);
        while (prodRouteJob.RecId)
        {
            Container key = [prodRouteJob.OprNum, prodRouteJob.OprPriority, prodRouteJob.JobType];
            foundJobTypes.insert(key, 1);
            next prodRouteJob;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchExistingProdRouteJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Synchronizes the a production job with the shop floor control jobs.
    /// </summary>
    /// <param name="_newProdRouteJob">
    ///    A <c>ProdRouteJob</c> record that has the production job to use for filtering the shop floor jobs
    ///    to update.
    /// </param>
    /// <remarks>
    ///    An update of the job ID is performed for all jobs in the shop floor that have the same production
    ///    order, operation number and priority, and job type.
    /// </remarks>
    // Shop Floor Control - Begin
    protected void matchExistingProdRouteJob(ProdRouteJob _newProdRouteJob)
    {
        ProdRouteJob            existingProdRouteJob;
        JmgTermReg              jmgTermReg;
        JmgStampJournalTrans    jmgStampJournalTrans;
        JmgStampTrans           jmgStampTrans;

        if (isConfigurationkeyEnabled(configurationkeynum(JmgJob)) && existingProdRouteJobs != null)
        {
            boolean moreRecords = existingProdRouteJobs.first(existingProdRouteJob);
            while (moreRecords)
            {
                if (existingProdRouteJob.ProdId         == _newProdRouteJob.ProdId      &&
                    existingProdRouteJob.OprNum         == _newProdRouteJob.OprNum      &&
                    existingProdRouteJob.JobType        == _newProdRouteJob.JobType     &&
                    existingProdRouteJob.OprPriority    == _newProdRouteJob.OprPriority)
                {
                    // Mapping found. Replace job ids in SFC registration tables
                    jmgTermReg.skipDataMethods(true);
                    update_recordset jmgTermReg
                        setting JobId = _newProdRouteJob.JobId
                        where jmgTermReg.JobId == existingProdRouteJob.JobId;

                    jmgStampJournalTrans.skipDataMethods(true);
                    update_recordset jmgStampJournalTrans
                        setting JobId = _newProdRouteJob.JobId
                        where jmgStampJournalTrans.JobId    == existingProdRouteJob.JobId;

                    jmgStampTrans.skipDataMethods(true);
                    update_recordset jmgStampTrans
                        setting JobId = _newProdRouteJob.JobId
                        where jmgStampTrans.JobId == existingProdRouteJob.JobId;

                    // Match found. Remove matched job from set and break
                    existingProdRouteJobs.del();
                    break;
                }
                moreRecords = existingProdRouteJobs.next(existingProdRouteJob);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    // Shop Floor Control - End

    protected void new()
    {
        this.parmScheduleAllJobs(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMCalcData</Name>
				<Source><![CDATA[
    BOMCalcData parmBOMCalcData(BOMCalcData _bomCalcData = bomCalcData)
    {
        bomCalcData = _bomCalcData;
        return bomCalcData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeleteCapacityReservations</Name>
				<Source><![CDATA[
    public boolean parmDeleteCapacityReservations(boolean _deleteCapacityReservations = deleteCapacityReservations)
    {
        deleteCapacityReservations = _deleteCapacityReservations;
        return deleteCapacityReservations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOprNum</Name>
				<Source><![CDATA[
    OprNum parmOprNum(OprNum _oprNum = oprNum)
    {
        oprNum = _oprNum;
        return oprNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOprNumOrig</Name>
				<Source><![CDATA[
    OprNum parmOprNumOrig(OprNum _oprNumOrig = oprNumOrig)
    {
        oprNumOrig = _oprNumOrig;
        return oprNumOrig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdId</Name>
				<Source><![CDATA[
    ProdId parmProdId(ProdId _prodId = prodId)
    {
        prodId = _prodId;
        return prodId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdTable</Name>
				<Source><![CDATA[
    ProdTable parmProdTable(ProdTable _prodTable = prodTable)
    {
        prodTable = _prodTable;
        return prodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmScheduleAllJobs</Name>
				<Source><![CDATA[
    public boolean parmScheduleAllJobs(boolean _scheduleAllJobs = scheduleAllJobs)
    {
        scheduleAllJobs = _scheduleAllJobs;
        return scheduleAllJobs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeExistingProdRouteJobs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes the registration from shop floor jobs for the jobs in the existing jobs set.
    /// </summary>
    // Shop Floor Control - Begin
    protected void removeExistingProdRouteJobs()
    {
        ProdRouteJob            existingProdRouteJob;
        JmgTermReg              jmgTermReg;
        JmgStampJournalTrans    jmgStampJournalTrans;
        JmgStampTrans           jmgStampTrans;

        if (isConfigurationkeyEnabled(configurationkeynum(JmgJob)))
        {
            // All records left in the existingProdRouteJobs set were not matched
            // with a new. Remove registrations from Shop Floor Control.
            boolean moreRecords = existingProdRouteJobs.first(existingProdRouteJob);

            JmgIpcActivity jmgIpcActivity = JmgIpcActivity::findJobId(JmgIpcActivity::findSignTypeJobId(JmgSignInOut::SysIndirect));
            while (moreRecords)
            {
                // Change the related registeration to "SysIndirect" only if the job does't exist now.
                if (ProdRouteJob::findJobId(existingProdRouteJob.JobId))
                {
                    moreRecords = existingProdRouteJobs.next(existingProdRouteJob);
                    continue;
                }

                // Delete registration from JmgTermReg
                jmgTermReg.skipDeleteMethod(true);
                delete_from jmgTermReg
                    where jmgTermReg.JobId == existingProdRouteJob.JobId;

                // Change registration to "SysIndirect", meaning we know the
                // employee was at work, but we do not know what he was doing.
                update_recordset jmgStampJournalTrans
                    setting JobId       = jmgIpcActivity.JobId,
                            JourRegType = JmgJourRegTypeEnum::IndActivity
                    where jmgStampJournalTrans.JobId    == existingProdRouteJob.JobId;

                update_recordset jmgStampTrans
                    setting JobId       = jmgIpcActivity.JobId,
                            StampType   = JmgStampTypeEnum::Work,
                            JobRef      = jmgIpcActivity.Category,
                            Module      = JmgModuleEnum::IPC,
                            JourRegType = JmgJourRegTypeEnum::IndActivity,
                            ActOprId    = jmgIpcActivity.Activity
                    where jmgStampTrans.JobId == existingProdRouteJob.JobId;
                moreRecords = existingProdRouteJobs.next(existingProdRouteJob);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    // Shop Floor Control - End

    public void run()
    {
        #OCCRetryCount
        RouteGroup                      routeGroup;

        ProdRoute                       prodRoute;
        ProdRoute                       lastProdRoute;

        WrkCtrProdRouteActivity         wrkCtrProdRouteActivity;
        wrkCtrActivityRequirementSet    wrkCtrActivityRequirementSet;

        setprefix("@SYS9468");

        if (!this.validate())
        {
            throw error("@SYS18447");
        }

        try
        {
            ttsbegin;

            this.setParameters();

            setprefix(#PreFixField(ProdRoute,ProdId));

            //Delete existing jobs and capacity reservations (for original operation number)
            ProdRouteJob::deleteProduction(prodId,oprNumOrig);

            if (deleteCapacityReservations)
            {
                WrkCtrCapResHandler::construct().deleteOrderReservations(WrkCtrCapRefType::Production, prodId, oprNumOrig);
            }

            // Shop Floor Control - Begin
            this.saveExistingProdRouteJobs(prodId);
            // Shop Floor Control - End

            this.loadExistingRouteJobs();

            //Create new jobs
            while select prodRoute
               order by OprNum, OprPriority
               where prodRoute.ProdId   == prodId  &&
                    (prodRoute.OprNum    == oprNum   || !oprNum)
            join routeGroup
                where routeGroup.RouteGroupId == prodRoute.RouteGroupId
            join ProdId, OprNum, OprPriority, Activity from wrkCtrProdRouteActivity
                where   wrkCtrProdRouteActivity.ProdId          == prodRoute.ProdId
                &&      wrkCtrProdRouteActivity.OprNum          == prodRoute.OprNum
                &&      wrkCtrProdRouteActivity.OprPriority     == prodRoute.OprPriority
                &&      wrkCtrProdRouteActivity.RouteDataAreaId == curExt2dataareaid(tablenum(ProdRoute))
            join wrkCtrActivityRequirementSet
                where wrkCtrActivityRequirementSet.Activity     == wrkCtrProdRouteActivity.Activity
            {
                setprefix(#PreFixField(ProdRoute,OprNum));
                setprefix(#PrefixField(ProdRoute,OprId));

                if (!routeGroup.checkValid())
                {
                    throw error("@SYS18447");
                }

                this.createJobs(prodRoute, routeGroup, wrkCtrActivityRequirementSet);

                lastProdRoute.data(prodRoute);
            }

            this.updateFlag();

            // Shop Floor Control - Begin
            this.removeExistingProdRouteJobs();
            // Shop Floor Control - End

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveExistingProdRouteJobs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the jobs for one production order in the existing jobs set.
    /// </summary>
    /// <param name="_prodId">
    ///    The production order ID for which to save the jobs.
    /// </param>
    // Shop Floor Control - Begin
    protected void saveExistingProdRouteJobs(ProdId _prodId)
    {
        ProdRouteJob    prodRouteJob;

        if (isConfigurationkeyEnabled(configurationkeynum(JmgJob)))
        {
            existingProdRouteJobs   = new RecordLinkList();
            while select prodRouteJob
                where prodRouteJob.ProdId   == _prodId
            {
                existingProdRouteJobs.ins(prodRouteJob);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    // Shop Floor Control - End

    void setParameters()
    {
        if (! prodTable)
            prodTable= ProdTable::find(prodId,true);

        if (! bomCalcData)
            bomCalcData  = BOMCalcData::newProdTable(prodTable.QtySched,prodTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFlag</Name>
				<Source><![CDATA[
    void updateFlag()
    {
        if (!oprNum)
        {
            prodTable.RouteJobs= NoYes::Yes;
            prodTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePrevLink</Name>
				<Source><![CDATA[
    void updatePrevLink(ProdJobType prodJobType,ProdRoute prodRoute)
    {
        ProdRouteJob previousJob;

        if (prodJobType.schedulePrevJobLink()       != SchedJobLink::None ||
            prodJobType.schedulePrevJobLinkType()   != SchedJobLinkType::None)
        {
            select firstonly reverse forupdate previousJob
                index ProdOprIdx
                where previousJob.ProdId    == prodRoute.ProdId  &&
                      previousJob.OprNum    == prodRoute.OprNum  &&
                      previousJob.NumType   <  prodJobType.numType();

            if (previousJob)
            {
                if (prodJobType.schedulePrevJobLink()       != SchedJobLink::None)
                    previousJob.Link        = prodJobType.schedulePrevJobLink();

                if (prodRoute.LinkType != SchedJobLinkType::Hard)
                {
                    if (prodJobType.schedulePrevJobLinkType()   != SchedJobLinkType::None)
                        previousJob.LinkType    = prodJobType.schedulePrevJobLinkType();
                }

                previousJob.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean  validate()
    {
        if (! ProdTable::checkExist(prodId))
            return false;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        ProdId              prodId;

        if (! args.caller() || ! args.record().TableId)
            throw error(strfmt("@SYS22828",funcname()));

        Common buffer = args.record();

        if (fieldname2id(buffer.TableId,fieldstr(ProdTable,ProdId)))
        {
            prodId= buffer.(fieldname2id(buffer.TableId,fieldstr(ProdTable,ProdId)));

            if (!prodId)
            {
                FormRun callerForm = args.caller();

                if (callerForm && callerForm.args() && callerForm.args().record())
                {
                    buffer = callerForm.args().record();

                    prodId = buffer.(fieldname2id(callerForm.args().record().TableId,fieldstr(ProdTable,ProdId)));
                }
            }
        }

        if (! prodId)
            throw error(strfmt("@SYS22828",funcname()));

        if (ProdTable::existsJobRegistration(prodId))
        {
            throw error(strFmt("@SCM:CannotUpdateJobWhenRegistrationExists",prodId));
        }

        ProdJobUpdate prodJobUpdate = ProdJobUpdate::newProdId(prodId);
        prodJobUpdate.run();

        if (args.caller() && args.caller().name() == formstr(ProdRouteJob))
        {
            args.caller().doResearch();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>ProdJobUpdate</c> class.
    /// </summary>
    /// <param name="_prodId">
    /// The production order ID to process by the newly created class instance.
    /// </param>
    /// <returns>
    /// A new <c>ProdJobUpdate</c> instance.
    /// </returns>
    static ProdJobUpdate newProdId(ProdId    _prodId)
    {
        ProdJobUpdate prodJobUpdate = new ProdJobUpdate();
        prodJobUpdate.parmProdId(_prodId);
        prodJobUpdate.parmDeleteCapacityReservations(true);
        return prodJobUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdIdOprNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>ProdJobUpdate</c> class.
    /// </summary>
    /// <param name="_prodId">
    /// The production order ID to be process by the newly created <c>ProdJobUpdate</c> class instance.
    /// </param>
    /// <param name="_oprNum">
    /// An operation number to used to filter the jobs to create; optional.
    /// </param>
    /// <param name="_oprNumOrig">
    /// The original operation number.
    /// </param>
    /// <param name="_deleteCapacityReservations">
    /// A Boolean value that specifies whether to delete the capacity reservations that is associated with
    /// the production order.
    /// </param>
    /// <returns>
    /// A new instance of the <c>ProdJobUpdate</c> class.
    /// </returns>
    static ProdJobUpdate newProdIdOprNum(ProdId  _prodId,
                                                OprNum  _oprNum,
                                                OprNum  _oprNumOrig                 = _oprNum,
                                                boolean _deleteCapacityReservations = true)
    {
        ProdJobUpdate prodJobUpdate = new ProdJobUpdate();

        prodJobUpdate.parmProdId(_prodId);
        prodJobUpdate.parmOprNum(_oprNum);
        prodJobUpdate.parmOprNumOrig(_oprNumOrig);
        prodJobUpdate.parmDeleteCapacityReservations(_deleteCapacityReservations);

        return prodJobUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new <c>ProdJobUpdate</c> class instance.
    /// </summary>
    /// <param name="_prodTable">
    /// A <c>ProdTable</c> record that identifies the production order to process with the newly created
    /// <c>ProdJobUpdate</c> class instance.
    /// </param>
    /// <param name="_bomCalcData">
    /// A <c>BOMCalcData</c> object to use during the job creation process for the job runtime calculations.
    /// </param>
    /// <param name="_deleteCapacityReservations">
    /// A Boolean value that specifies whether to delete the capacity reservations that are associated with
    /// the production order.
    /// </param>
    /// <returns>
    /// A new instance of the <c>ProdJobUpdate</c> class.
    /// </returns>
    static ProdJobUpdate newProdTable(ProdTable      _prodTable,
                                             BOMCalcData    _bomCalcData,
                                             boolean        _deleteCapacityReservations = true)
    {
        ProdJobUpdate prodJobUpdate = new ProdJobUpdate();

        prodJobUpdate.parmProdTable(_prodTable);
        prodJobUpdate.parmBOMCalcData(_bomCalcData);
        prodJobUpdate.parmProdId(_prodTable.ProdId);
        prodJobUpdate.parmDeleteCapacityReservations(_deleteCapacityReservations);

        return prodJobUpdate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>