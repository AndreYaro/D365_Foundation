<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsReqTransMovementsPerDayDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WMSReqTransMovementsPerDayDP</c> class is the Report Data Provider class for the
///    <c>WMSReqTransMovementsPerDay</c> report.
/// </summary>
[SRSReportParameterAttribute(classStr(WMSReqTransMovementsPerDayContract))]
public class WmsReqTransMovementsPerDayDP extends SRSReportDataProviderBase
{
    WMSSpaceUtilizationRun              lastReportRun;
    WMSMovementsPerDayTmp               wmsMovementsPerDayTmp;
    WMSReqTransMovementsPerDayContract  localContract;
    WMSReqTransMPDStrategy              strategy;
    boolean                             showBacklog;

    date                                lastRunDate;

    int                                 addedRecords;
    int                                 addedBacklogRecords;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canProcessRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a <c>ReqTrans</c> record should be processed.
    /// </summary>
    /// <param name="_currentRecord">
    /// The <c>ReqTrans</c> record to be examined.
    /// </param>
    /// <returns>
    /// true if the record should be processed; otherwise, false.
    /// </returns>
    private boolean canProcessRecord(ReqTrans _currentRecord)
    {
        boolean shouldProcessRecord = false;

        if ((wmsMovementsPerDayTmp.MovementType == WMSMovementType::Backlog
                && addedBacklogRecords >= localContract.parmBackLogWMSTopN())
            || (wmsMovementsPerDayTmp.MovementType == WMSMovementType::Regular
                    && addedRecords >= localContract.parmWMSTopN()))
        {
            shouldProcessRecord = false;
        }
        else
        {
            switch (localContract.parmWMSReqTransMovementStatus())
            {
                case WMSReqTransMovementStatus::All:
                    shouldProcessRecord = true;
                    break;

                case WMSReqTransMovementStatus::Confirmed:
                    shouldProcessRecord = _currentRecord.InventTransOrigin != 0;
                    break;

                case WMSReqTransMovementStatus::Planned:
                    shouldProcessRecord = _currentRecord.InventTransOrigin == 0;
                    break;

                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }

        return shouldProcessRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWMSMovementsPerDayTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches data from the <c>WMSMovementsPerDayTmp</c> record.
    /// </summary>
    /// <returns>
    /// The data from the <c>WMSMovementsPerDayTmp</c> record.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(WMSMovementsPerDayTmp))
    ]
    public WMSMovementsPerDayTmp getWMSMovementsPerDayTmp()
    {
        select wmsMovementsPerDayTmp;
        return wmsMovementsPerDayTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class prior processing the record.
    /// </summary>
    private void initialize()
    {
        localContract = this.parmDataContract() as WMSReqTransMovementsPerDayContract;

        if (!localContract)
        {
            throw error(Error::missingParameter(this));
        }

        if (!localContract.parmInventSiteId())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        // take into consideration also the general setting
        lastReportRun = WMSSpaceUtilizationRun::lastRun(localContract.parmWMSReportSetup());

        // Adjust the date to the timezone of the report setup.
        lastRunDate = DateTimeUtil::date(
                            DateTimeUtil::applyTimeZoneOffset(
                                lastReportRun.LastRun,
                                WMSReportSetup::getCompanyTimezone()));

        showBacklog = lastRunDate == localContract.parmDate();

        // Initialize the strategy object
        strategy = localContract.parmIsWorkloadUtil() == 0 ?
                    WMSReqTransMPDStrategy::constructSpaceUtil() :
                    WMSReqTransMPDStrategy::constructWorkload();

        strategy.parmContract(localContract);
        strategy.parmShowBacklog(showBacklog);
        strategy.initialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeMovementType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the type of movement record.
    /// </summary>
    /// <param name="_sourceRecord">
    /// The source transaction.
    /// </param>
    private void initializeMovementType(ReqTrans _sourceRecord)
    {
        wmsMovementsPerDayTmp.MovementType      = (showBacklog && _sourceRecord.ReqDate < lastRunDate) ?
                                                    WMSMovementType::Backlog :
                                                    WMSMovementType::Regular;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the fields by using the current query line.
    /// </summary>
    /// <param name="_queryRun">
    /// The query run that contains the current record.
    /// </param>
    /// <returns>
    /// true if the record was added; otherwise, false.
    /// </returns>
    private boolean populateFields(QueryRun _queryRun)
    {
        ReqTrans                reqTrans = _queryRun.get(tableNum(ReqTrans));
        InventTable             inventTable = _queryRun.get(tableNum(InventTable));
        boolean                 result = false;

        wmsMovementsPerDayTmp.ReqType           = reqTrans.RefType;
        wmsMovementsPerDayTmp.InventDirection   = reqTrans.Direction;
        wmsMovementsPerDayTmp.RefId             = reqTrans.RefId;
        wmsMovementsPerDayTmp.ItemId            = reqTrans.ItemId;
        wmsMovementsPerDayTmp.Qty               = abs(reqTrans.Qty);
        wmsMovementsPerDayTmp.Status            = (reqTrans.InventTransOrigin != 0) ?
                                                    WMSReqTransMovementStatus::Confirmed :
                                                    WMSReqTransMovementStatus::Planned;

        result = strategy.populateFields(wmsMovementsPerDayTmp, inventTable);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    Provides the ability to write the report business logic. This method will be called by SSRS at
    ///    runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    ///    Note that this is a framework class. Customizing this class may cause problems with future upgrades
    ///    to the software.
    /// </remarks>
    public void processReport()
    {
        ReqTrans                reqTrans;
        QueryRun                queryRun;
        int                     recordsToShow, backLogRecordsToShow;

        // initialize the current object
        this.initialize();

        if (!strategy.canProcessReport())
        {
            return;
        }

        // get the query
        queryRun             = new QueryRun(strategy.buildQuery());
        recordsToShow        = localContract.parmWMSTopN();
        backLogRecordsToShow = localContract.parmBackLogWMSTopN();

        // generate the actual report content
        while ((addedRecords < recordsToShow
                || addedBacklogRecords < backLogRecordsToShow)
                && queryRun.next())
        {
            reqTrans = queryRun.get(tableNum(ReqTrans));

            wmsMovementsPerDayTmp.clear();
            this.initializeMovementType(reqTrans);

            if (!this.canProcessRecord(reqTrans))
            {
                continue;
            }

            if (this.populateFields(queryRun))
            {
                wmsMovementsPerDayTmp.insert();

                switch (wmsMovementsPerDayTmp.MovementType)
                {
                    case WMSMovementType::Backlog:
                        addedBacklogRecords++;
                        break;
                    case WMSMovementType::Regular:
                        addedRecords++;
                        break;
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
