<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MarkupBaseValueCalcEngineProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class MarkupBaseValueCalcEngineProvider
{
    private Map instanceMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static MarkupBaseValueCalcEngineProvider construct()
    {
        return new MarkupBaseValueCalcEngineProvider();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        instanceMap = new Map(Types::Container, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInstance</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal MarkupBaseValueCalcEngine getInstance(Common _source, Tax _tax)
    {
        if (!this.isSourceSupported(_source))
        {
            return null;
        }

        container instanceKey = this.retrieveSourceHeaderInstanceKey(_source);

        if (instanceMap.exists(instanceKey))
        {
            return instanceMap.lookup(instanceKey);
        }
        else
        {
            MarkupBaseValueCalcEngine calcEngine = MarkupBaseValueCalcEngine::construct();

            calcEngine.setTax(_tax);

            instanceMap.add(instanceKey, calcEngine);
            
            return calcEngine;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSourceSupported</Name>
				<Source><![CDATA[
    private boolean isSourceSupported(Common _source)
    {
        if (_source)
        {
            if (Markup::isSequenceAndCompoundEnabledForHeaderSource(_source.TableId)
                || Markup::isSequenceAndCompoundEnabledForLineSource(_source.TableId))
            {
                return true;
            }
            else if (_source.TableId == tableNum(MarkupTrans))
            {
                MarkupTrans markupTrans = _source;

                return Markup::isSequenceAndCompoundEnabledForHeaderSource(markupTrans.TransTableId)
                    || Markup::isSequenceAndCompoundEnabledForLineSource(markupTrans.TransTableId);
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSourceHeaderInstanceKey</Name>
				<Source><![CDATA[
    private container retrieveSourceHeaderInstanceKey(Common _source)
    {
        switch (_source.TableId)
        {
            case tableNum(SalesTable):
                SalesTable salesTable = _source;
                return [tableNum(SalesTable), salesTable.DataAreaId, salesTable.SalesId];

            case tableNum(SalesLine):
                SalesLine salesLine = _source;
                return [tableNum(SalesTable), salesLine.DataAreaId, salesLine.SalesId];

            case tableNum(SalesQuotationTable):
                SalesQuotationTable salesQuotationTable = _source;
                return [tableNum(SalesQuotationTable), salesQuotationTable.DataAreaId, salesQuotationTable.QuotationId];

            case tableNum(SalesQuotationLine):
                SalesQuotationLine salesQuotationLine = _source;
                return [tableNum(SalesQuotationTable), salesQuotationLine.DataAreaId, salesQuotationLine.QuotationId];

            case tableNum(MarkupTrans):
                MarkupTrans markupTrans = _source;
                
                if (markupTrans.TransTableId == tableNum(SalesTable))
                {
                    return [tableNum(SalesTable), markupTrans.DataAreaId, (select SalesId from salesTable where salesTable.RecId == markupTrans.TransRecId).SalesId];
                }
                else if (markupTrans.TransTableId == tableNum(SalesLine))
                {
                    return [tableNum(SalesTable), markupTrans.DataAreaId, (select SalesId from salesLine where salesLine.RecId == markupTrans.TransRecId).SalesId];
                }
                else if (markupTrans.TransTableId == tableNum(SalesQuotationTable))
                {
                    return [tableNum(SalesQuotationTable), markupTrans.DataAreaId, (select QuotationId from salesQuotationTable where salesQuotationTable.RecId == markupTrans.TransRecId).QuotationId];
                }
                else if (markupTrans.TransTableId == tableNum(SalesQuotationLine))
                {
                    return [tableNum(SalesQuotationTable), markupTrans.DataAreaId, (select QuotationId from salesQuotationLine where salesQuotationLine.RecId == markupTrans.TransRecId).QuotationId];
                }

            default:
                throw error(strFmt("@SCM:MarkupBaseValueCalcEngineProviderSourceNotSupported", tableId2PName(_source.TableId)));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>