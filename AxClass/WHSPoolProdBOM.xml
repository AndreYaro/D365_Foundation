<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSPoolProdBOM</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WHSPoolProdBOM</c> class holds business logic for the <c>WHSProdBOMPool</c> table.
/// </summary>
public class WHSPoolProdBOM extends WHSPool
{
    WHSProdBOMPool      prodBOMPool;
    ProdBOM             prodBOM;
    InventTransOriginId inventTransOriginId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addWavedQty</Name>
				<Source><![CDATA[
    [SysObsolete('Method is obsoleted to support catch weight items. Method is replaced by the addWavedHandlingQty method. Please file an extensibility request if access is required.', true, 30\9\2019)]
    protected void addWavedQty(InventQty _qtyToAdd)
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), this.itemId());

        this.addWavedHandlingQuantities(_qtyToAdd);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWavedHandlingQuantities</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected internal void addWavedHandlingQuantities(InventHandlingQty _qtyToAdd)
    {
        WHSProdBOMPool::adjustWavedHandlingQty(prodBOMPool.InventTransId, _qtyToAdd);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineLastBatchConsumed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the last consumed batch ID.
    /// </summary>
    /// <param name="_inventDim">
    ///    The inventory dimension that holds the warehouse location where the batch was consumed.
    /// </param>
    /// <returns>
    ///    The batch ID.
    /// </returns>
    /// <remarks>
    ///    This method assumes that the order in which production orders are created somewhat correlates to when they
    ///    are executed and consume raw materials.
    /// </remarks>
    public InventBatchId determineLastBatchConsumed(InventDim  _inventDim)
    {
        prodBOM             prodBOMLocal;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        InventDim           inventDim;

        select firstOnly RecId from prodBOMLocal
            order by inventTrans.DateInvent desc, prodBOMLocal.RecId desc
            where prodBOMLocal.ItemId == this.itemId()
            join inventTransid from inventTransOrigin
               where inventTransOrigin.InventTransId == prodBOMLocal.InventTransId
               join TableId from inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                    join inventBatchId from inventDim
                    where inventDim.inventDimId   == inventTrans.inventDimId
                       && inventDim.wMSLocationId == _inventDim.wMSLocationId;

        return inventDim.inventBatchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineLastSerialConsumed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the last consumed serial ID.
    /// </summary>
    /// <param name="_inventDim">
    ///    The inventory dimension that holds the warehouse location where the serial was consumed.
    /// </param>
    /// <returns>
    ///    The serial ID.
    /// </returns>
    /// <remarks>
    ///    This method assumes that the order in which production orders are created somewhat correlates to when they
    ///    are executed and consume raw materials.
    /// </remarks>
    protected InventSerialId determineLastSerialConsumed(InventDim _inventDim)
    {
        ProdBOM             prodBomLocal;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        InventDim           inventDim;

        select firstonly RecId from prodBomLocal
            order by inventTrans.DateInvent desc, prodBOMLocal.RecId desc
            where prodBOMLocal.ItemId == this.itemId()
            join inventTransid from inventTransOrigin
                where inventTransOrigin.InventTransId == prodBOMLocal.InventTransId
                join TableId from inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                    join inventSerialId from inventDim
                    where inventDim.inventDimId   == inventTrans.inventDimId
                       && inventDim.wMSLocationId == _inventDim.wMSLocationId;

        return inventDim.inventSerialId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>id</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the pool.
    /// </summary>
    /// <returns>
    ///    The ID.
    /// </returns>
    public Num id()
    {
        return prodBOMPool.ProdId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the pool record from a table buffer.
    /// </summary>
    /// <param name="_common">
    ///    The table buffer to initialize from.
    /// </param>
    /// <param name="_prodParmRelease">
    ///    The table buffer used to set the release quantity.
    /// </param>
    public void initFromBuffer(
	    Common		    _common,
        ProdParmRelease	_prodParmRelease = null)
    {
        ProdBOM prodBOMLocal = _common as ProdBOM;

        prodBOMPool.ProdId         = prodBOMLocal.ProdId;
        prodBOMPool.InventTransId  = prodBOMLocal.InventTransId;
        prodBOMPool.ItemId         = prodBOMLocal.ItemId;
        prodBOMPool.InventDimId    = prodBOMLocal.InventDimId;

        if (this.parmIsCWItem())
        {
            // Track catch weight quantity for catch weight items.
            prodBOMPool.WavedQty = -inventTransIdSum::newTransOriginId(this.inventTransOriginId()).pdsCWPicked();
        }
        else
        {
            prodBOMPool.WavedQty = -inventTransIdSum::newTransOriginId(this.inventTransOriginId()).picked();
        }
        
        prodBOMPool.ReleasedInventQty = this.getReleaseHandlingQty(prodBOMLocal, _prodParmRelease);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReleaseQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the released quantity of the bill of material.
    /// </summary>
    /// <param name = "_prodBOM">The bill of material tied to the released quantity.</param>
    /// <param name = "_prodParmRelease">The <c>ProdParmRelease</c> record that holds the additional released quantity.</param>
    public void updateReleaseQty(
        ProdBOM         _prodBOM,
        ProdParmRelease _prodParmRelease)
    {
        prodBOMPool.ReleasedInventQty += this.getReleaseHandlingQty(_prodBOM, _prodParmRelease);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReleaseHandlingQty</Name>
				<Source><![CDATA[
    private WHSReleasedQty getReleaseHandlingQty(
        ProdBOM         _prodBOM,
		ProdParmRelease _prodParmRelease)
    {
        WHSReleasedQty releaseQty;

		if (_prodParmRelease.ReleaseQty > 0)
        {
            ProdTable       prodTable       = _prodBOM.prodTable();
            InventUnitId inventHandlingUnitId = WHSCatchWeightHelper::inventHandlingUnitId(prodTable.ItemId);
            InventHandlingQty inventHandlingQty;

            if (_prodParmRelease.ReleaseUnitId != inventHandlingUnitId)
            {
                EcoResReleasedProductUnitConverter converter = EcoResReleasedProductUnitConverter::construct();

                inventHandlingQty = converter.convertGivenUnitSymbols(_prodParmRelease.ReleaseQty,
                                                                    _prodParmRelease.ReleaseUnitId,
                                                                    inventHandlingUnitId,
                                                                    NoYes::No,
                                                                    prodTable.ItemId,
                                                                    prodTable.InventDimId,
                                                                    NoYes::No);
            }
            else
            {
                inventHandlingQty = _prodParmRelease.ReleaseQty;
            }
            
            BOMCalcData bomCalcData = BOMCalcData::newProdTableUnitId(inventHandlingQty, prodTable, inventHandlingUnitId);

            ProdBOMCalc	prodBOMCalc = ProdBOMCalc::newBOMCalcData(bomCalcData,
                                                                _prodBOM,
                                                                ProdBOMConsumpProposal::Qty,
                                                                BOMAutoConsump::Never,
                                                                !_prodBOM.ConstantReleased);

            prodBOMCalc.setProposal();
            releaseQty = PdsGlobal::pdsIsCWItem(_prodBOM.ItemId) ? 
                            prodBOMCalc.pdsCWInventProposal() : prodBOMCalc.inventProposal();
        }
        else
        {
            releaseQty = PdsGlobal::pdsIsCWItem(_prodBOM.ItemId) ? 
                            _prodBOM.PdsCWInventCalc : _prodBOM.QtyInventCalc;
        }

        // Check to make sure we are not releasing more than what is left.
        InventHandlingQty qtyRemainingToBeReleased = PdsGlobal::pdsIsCWItem(_prodBOM.ItemId) ? 
                                                        _prodBOM.PdsCWInventCalc - prodBOMPool.ReleasedInventQty : _prodBOM.QtyInventCalc - prodBOMPool.ReleasedInventQty;

        return min(releaseQty, qtyRemainingToBeReleased);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the inventory dimension of the pool.
    /// </summary>
    /// <returns>
    ///    The inventory dimension.
    /// </returns>
    public InventDim inventDim()
    {
        return InventDim::find(prodBOMPool.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the inventory transaction ID of the pool.
    /// </summary>
    /// <returns>
    ///    The inventory transaction ID.
    /// </returns>
    public InventTransId inventTransId()
    {
        return prodBOMPool.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the inventory transaction origin of the pool.
    /// </summary>
    /// <returns>
    ///    The inventory transaction origin.
    /// </returns>
    public InventTransOriginId inventTransOriginId()
    {
        if (!inventTransOriginId)
        {
            ProdBOM prodBOMLocal = this.prodBOM();
            inventTransOriginId  = InventTransOriginProdBOM::findInventTransOriginId(prodBOMLocal.dataAreaId,prodBOMLocal.InventTransId);
        }

        return inventTransOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOnOpenWave</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the pool is on an open wave.
    /// </summary>
    /// <returns>
    ///    true if the current pool is on an open wave; otherwise, false.
    /// </returns>
    public boolean isOnOpenWave()
    {
        WHSProdWaveLine prodWaveLine;
        WHSWaveTable    waveTable;

        select firstOnly RecId from prodWaveLine
            where prodWaveLine.InventTransId == prodBOMPool.InventTransId
            exists join WaveStatus from waveTable
                where waveTable.WaveId     == prodWaveLine.WaveId
                   && waveTable.WaveStatus <  WHSWaveStatus::Held;

        return prodWaveLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the item ID of the pool.
    /// </summary>
    /// <returns>
    ///    The item ID.
    /// </returns>
    public ItemId itemId()
    {
        return prodBOMPool.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>movementBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the inventory movement buffer of the pool.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value indicating if the buffer should be selected for update; optional.
    /// </param>
    /// <returns>
    ///    The inventory movement buffer.
    /// </returns>
    protected Common movementBuffer(boolean _forUpdate = false)
    {
        return ProdBOM::findTransId(prodBOMPool.InventTransId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWHSProdBOMPool</Name>
				<Source><![CDATA[
    protected WHSProdBOMPool parmWHSProdBOMPool(WHSProdBOMPool _prodBOMPool)
    {
        prodBOMPool = _prodBOMPool;
        return prodBOMPool;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pool</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the current pool record.
    /// </summary>
    /// <returns>
    ///    The pool record.
    /// </returns>
    public Common pool()
    {
        return prodBOMPool;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodBOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>ProdBOM</c> record.
    /// </summary>
    /// <returns>
    ///    The production BOM record.
    /// </returns>
    protected ProdBOM prodBOM()
    {
        if (prodBOM.RecId == 0)
        {
            prodBOM = this.movementBuffer() as ProdBOM;
        }

        return prodBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyLeftToWave</Name>
				<Source><![CDATA[
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the handlingQtyLeftToWave method. Extenders should move their logic to wrap or override the handlingQuantityLeftToWave method.', false, 30\9\2019)]
    public InventQty qtyLeftToWave()
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), this.itemId());

        return this.handlingQuantityLeftToWave();
    }

]]></Source>
			</Method>
			<Method>
				<Name>handlingQuantityLeftToWave</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the handling quantity that is left to wave.
    /// </summary>
    /// <returns>
    /// The handling quantity left to wave.
    /// </returns>
    [Wrappable(true)]
    protected internal InventHandlingQty handlingQuantityLeftToWave()
    {
        return prodBOMPool.ReleasedInventQty - prodBOMPool.WavedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>waveTemplateType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the wave template type for the pool.
    /// </summary>
    /// <returns>
    ///    The wave template type.
    /// </returns>
    public WHSWaveTemplateType waveTemplateType()
    {
        return WHSWaveTemplateType::Production;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSPoolProdBOM construct()
    {
        return new WHSPoolProdBOM();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPoolAndWave</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a pool and wave(s) for a given production order.
    /// </summary>
    /// <param name="_prodId">
    ///    The order ID of the production order to create the pool and wave for.
    /// </param>
    /// <param name="_enumerator">
    ///    The enumerator used to determine which bill of materials create pools and waves.
    /// </param>
    /// <param name="_prodParmRelease">
    ///    The parameter release record that holds the quantity to release.
    /// </param>
    public static void createPoolAndWave(
        ProdId                      _prodId,
        WHSProdBOMReleaseEnumerator _enumerator         = null,
	    ProdParmRelease		        _prodParmRelease    = null)
    {
        WHSProdBomPool				prodBomPool;
        InventTrans					inventTrans;
        InventTransOrigin			inventTransOrigin;
        WHSInventEnabled			whsInventEnabled;
        InventLocation				inventLocation;
        InventDim				    inventDim;
        WHSProdBOMReleaseEnumerator enumerator = _enumerator;

        if (WHSInventEnabled.isTmp())
        {
            return;
        }

        if (enumerator == null)
        {
            enumerator = ProdWHSRelease::defaultWHSProdBOMReleaseEnumerator(_prodId);
        }

        ttsbegin;
        RecordInsertList recordInsertList = new recordInsertList(tableNum(WHSProdBOMPool));

        // Only process items that are WHS enabled and on WHS enabled warehouses.
        enumerator.restartFromFirstProdBOMLineInProdOrder();
        while (enumerator.nextProdBOMInOrder())
        {
            ProdBom        prodBom        = enumerator.currentProdBOM();
            WHSProdBomPool newProdBomPool = WHSProdBOMPool::find(prodBOM.InventTransId, true);

            if (newProdBomPool.RecId == 0)
            {
                InventDim prodBOMInventDim = prodBom.inventDim();
                // Reserve inventory for items that allow negative
                if (prodBOMInventDim.InventLocationId 
                    && prodBOMInventDim.inventLocation().RetailInventNegPhysical 
                    && prodBom.inventTable().whsAllowPhysNeg())
                {
                    WHSReservation reservation = WHSReservation::construct();
                    boolean isCWItem = PdsGlobal::pdsIsCWItem(prodBom.ItemId);
                    // Loop over non-reserved invent trans records for this sales line and call to reserve them.
                    while select inventTrans
                        join RecId, InventTransId from inventTransOrigin
                        where inventTransOrigin.RecId           == inventTrans.InventTransOrigin
                            && inventTransOrigin.InventTransId   == prodBom.InventTransId
                            && inventTrans.StatusIssue           >  StatusIssue::ReservPhysical
                    {
                        // Pass in negative qty

                        reservation.reserveInventoryHandlingQty(inventTrans,
                            PdsGlobal::pdsIsCWItem(inventTrans.ItemId) ? inventTrans.PdsCWQty : inventTrans.Qty);
                    }
                }

                // Create a new pool record.
                newProdBomPool.whsPoolProdBOM().initFromBuffer(prodBom, _prodParmRelease);
                recordInsertList.add(newProdBomPool);
            }
            else
            {
                // Update the release quantity of the existing pool record.
                newProdBomPool.whsPoolProdBOM().updateReleaseQty(prodBom, _prodParmRelease);
                newProdBomPool.update();
            }
        }

        recordInsertList.insertDatabase();

	    WHSPoolProdBOM::createWave(_prodId, enumerator);

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOpenAutoExecutableWavesToSet</Name>
				<Source><![CDATA[
    private boolean addOpenAutoExecutableWavesToSet(Set _autoExecutableWaves)
    {
        WHSProdWaveLine         prodWaveLine;
        WHSWaveTable            waveTable;
        WHSWaveTemplateTable    waveTemplate;
        boolean                 ret;

        select firstonly WaveId from waveTable
            where waveTable.waveStatus   < WHSWaveStatus::Held
            join AutoExecuteWaveAtLoadPost from waveTemplate
                where waveTemplate.WaveTemplateName == waveTable.WaveTemplateName
            exists join prodWaveLine
                where prodWaveLine.InventTransId == prodBOMPool.InventTransId
                &&    prodWaveLine.WaveId        == waveTable.WaveId;

        if (waveTable.WaveId)
        {
            ret = true;

            if (waveTemplate.AutoExecuteWaveAtLoadPost)
            {
                if (!_autoExecutableWaves.in(waveTable.WaveId))
                {
                    _autoExecutableWaves.add(waveTable.WaveId);
                }
            }
            else
            {
                info(strfmt("@WAX:WHSPoolProdBOM_ReleasedQuantityAssociatedWithAWave_Info", prodBomPool.ProdId, prodBOMPool.ItemId, waveTable.WaveId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWave</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates wave(s) for a given production order.
    /// </summary>
    /// <param name="_prodId">
    ///    The order ID of the production order to create the wave for.
    /// </param>
    /// <param name="_enumerator">
    ///    The enumerator used to determine which bill of materials to wave.
    /// </param>
    private static void createWave(
        ProdId                      _prodId,
        WHSProdBOMReleaseEnumerator _enumerator)
    {
        Set autoExecutableWaves = new Set(Types::String);

        ttsBegin;

	    _enumerator.restartFromFirstProdBOMLineInProdOrder();
        while (_enumerator.nextProdBOMInOrder())
        {
            ProdBom        prodBom     = _enumerator.currentProdBOM();        
            WHSProdBomPool prodBomPool = WHSProdBOMPool::find(prodBom.InventTransId);

            autoExecutableWaves = WHSPoolProdBOM::assignOrCreateWaveAddtoSet(prodBomPool, 
                                                                            autoExecutableWaves,
                                                                            PdsGlobal::pdsIsCWItem(prodBom.ItemId) 
                                                                                ? prodBOM.PdsCWInventCalc 
                                                                                : prodBOM.QtyInventCalc);
	    }

        ttscommit;

        info(strfmt("@WAX3333", _prodId));

        // Execute waves that should be autoExecuted.
        WHSWaveTable::autoExecuteWaves(autoExecutableWaves);
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignOrCreateWaveAddtoSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns or creates a wave for the given instance of <c>WHSProdBOMPool</c>
    /// and adds it to the given wave set.
    /// </summary>
    /// <param name = "_prodBOMPool">The <c>WHSProdBOMPool</c> record being added to a wave.</param>
    /// <param name = "_waveSet">Wave set to add the new wave to.</param>
    /// <param name = "_prodBOMQtyInventCalc">The <c>QtyInventCalc</c> value of the related <c>ProdBOM</c>.</param>
    /// <returns>The given wave set with the new wave added</returns>
    public static Set assignOrCreateWaveAddtoSet(
        WHSProdBOMPool _prodBOMPool,
        Set       _waveSet,
        InventQty _prodBOMQtyInventCalc)
    {
        WHSPoolProdBOM whsPoolProdBOM = _prodBOMPool.whsPoolProdBOM();

        if (whsPoolProdBOM.addOpenAutoExecutableWavesToSet(_waveSet))
        {
            return _waveSet;
        }
            
        // Assign or Create Wave
        WHSWaveTable waveTable = WHSWaveTable::assignOrCreateWave(null, whsPoolProdBOM, _waveSet);

        if (!waveTable.RecId)
        {
            return _waveSet;
        }

        // Create ProdWaveLine
        WHSProdWaveLine::createFromWaveIdAndProdBomPool(waveTable.WaveId, _prodBOMPool);

        if (!_waveSet.in(waveTable.WaveId))
        {
            _waveSet.add(waveTable.WaveId);
        }

        return _waveSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>WHSPoolProdBOM</c> class.
    /// </summary>
    /// <param name="_prodBOMPool">
    ///    The <c>WHSProdBOMPool</c> table record of the class.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>WHSPoolProdBOM</c> class.
    /// </returns>
    public static WHSPoolProdBOM newStandard(WHSProdBOMPool _prodBOMPool)
    {
        WHSPoolProdBOM  whsPoolProdBOM = WHSPoolProdBOM::construct();

        whsPoolProdBOM.parmWHSProdBOMPool(_prodBOMPool);

        return whsPoolProdBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickHandlingQtyFromWorkCenter</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Picks the specified inventory quantity form a work center location.
    /// </summary>
    /// <param name="_inventDim">
    ///    The inventory dimension to pick from.
    /// </param>
    /// <param name="_handlingQtyToPick">
    ///    The handling quantity to be picked.
    /// </param>
    final protected void pickHandlingQtyFromWorkCenter(InventDim _inventDim, InventHandlingQty _handlingQtyToPick)
    {
        this.pickProductionQuantitiesFromWorkCenter(_inventDim, _handlingQtyToPick);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickProductionQuantitiesFromWorkCenter</Name>
				<Source><![CDATA[
    private void pickProductionQuantitiesFromWorkCenter(InventDim _inventDim, InventHandlingQty _handlingQtyToPick)
    {
        InventDim inventDimFrom = InventDim::find(_inventDim.inventDimId);
        ProdBOM   localProdBOM  = this.movementBuffer(true);

        // If we are processing a bill of material get dimensions above location to check for open pick lists.
        inventDimFrom.clearLocationAndBelowDim(localProdBOM.ItemId);
        inventDimFrom = InventDim::findOrCreate(inventDimFrom);
  
        // If we are dealing with a bill of material with open pick lists then we update the pick list transactions.
        if (ProdJournalBOM::hasOpenReservedRecord(localProdBOM.InventTransId, inventDimFrom.inventDimId))
        {
            WHSPoolProdBOM::updateWithPickListTransactionsHandlingQty(localProdBOM.InventTransId, localProdBOM.ItemId, _inventDim, _handlingQtyToPick, 0, WHSRawMaterialPolicy::Pick);
        }
        else
        {
            using (var context = WhsInventPickingContext::newSkipPickIdAllocation())
            {
                if (PdsGlobal::pdsIsCWItem(localProdBOM.ItemId))
                {
                    InventTrans localProdBomTrans = InventTrans::findTransId(localProdBOM.InventTransId);
                
                    WHSTransWeight weightToPickCW;
                    if (_inventDim.inventSerialId && PdsGlobal::pdsIsCWFullVisItem(localProdBOM.ItemId))
                    {
                        // If item is serial number controlled, actual weight is used.
                        PdsCWInventQty  inventoryCWQty;
                        [inventoryCWQty, weightToPickCW] = WHSInventOnHand::getPhysicalHandlingQuantities(localProdBOM.ItemId, _inventDim.inventDimId);
                    }
                    else
                    {
                        weightToPickCW = WHSCatchWeightHelper::calculateAverageWeight(_handlingQtyToPick, -localProdBomTrans.PdsCWQty, -localProdBomTrans.Qty, InventTable::inventDecimals(localProdBOM.ItemId));
                    }

                    WHSInvent::pickQuantities(localProdBOM, _inventDim.InventDimId, weightToPickCW, _handlingQtyToPick,
                                        WHSReservationHierarchyInventDimUtil::initInventDimParmAboveLocation(InventTable::find(localProdBOM.ItemId)));
                }
                else
                {
                    WHSInvent::pickQuantities(localProdBOM, _inventDim.InventDimId, _handlingQtyToPick, 0,
                                        WHSReservationHierarchyInventDimUtil::initInventDimParmAboveLocation(InventTable::find(localProdBOM.ItemId)));
                }
            }
        }

        this.addWavedHandlingQty(_handlingQtyToPick);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWithPickListTransactionsHandlingQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the transactions for the open pick lists.
    /// </summary>
    /// <param name = "_inventTransId">Transaction ID used to find open pick lists.</param>
    /// <param name = "_itemId">The item ID for the pick lists.</param>
    /// <param name = "_inventDimTo">The dimension set the transactions are being moved to.</param>
    /// <param name = "_qtyToUnreserveOrUnpick">The handling quantity that needs to be unreserved or unpicked from the bill of material.</param>
    /// <param name = "_weightToUnreserveOrUnpick">The weight that needs to be unreserved or unpicked from the bill of material.</param>
    /// <param name = "_rmPolicy">Determines if the transactions should be unpicked or unreserved; optional.</param>
    [Hookable(false)]
    internal static void updateWithPickListTransactionsHandlingQty(
        InventTransId	     _inventTransId,
        ItemId			     _itemId,
        InventDim		     _inventDimTo,
        InventHandlingQty    _qtyToUnreserveOrUnpick,
        WHSHandlingWeight    _weightToUnreserveOrUnpick,
        WHSRawMaterialPolicy _rmPolicy)
    {
        WHSPoolProdBOM::updateWithPickListTransactionsHandlingQuantities(_inventTransId, _itemId, _inventDimTo, _qtyToUnreserveOrUnpick, _weightToUnreserveOrUnpick, _rmPolicy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWithPickListTransactionsHandlingQuantities</Name>
				<Source><![CDATA[
    private static void updateWithPickListTransactionsHandlingQuantities(
        InventTransId	     _inventTransId,
        ItemId			     _itemId,
        InventDim		     _inventDimTo,
        InventHandlingQty    _qtyToUnreserveOrUnpick,
        WHSHandlingWeight    _weightToUnreserveOrUnpick,
        WHSRawMaterialPolicy _rmPolicy)
    {
        InventHandlingQty runningQty = _qtyToUnreserveOrUnpick;
        ProdBOM localProdBOM;
        WHSHandlingWeight weightPickedCW;
        
        if (runningQty > 0)
        {
            InventDim inventDimFrom = InventDim::find(_inventDimTo.inventDimId);
            inventDimFrom.clearLocationAndBelowDim(_itemId);
            inventDimFrom = InventDim::findOrCreate(inventDimFrom);

            InventDimParm toDimParm;
            InventDimParm fromDimParm;
            toDimParm.initFromInventDim(_inventDimTo);
            fromDimParm.initFromInventDim(inventDimFrom);
            
            InventMovement		movement;
            ProdJournalBom		journalBOM;
            ProdJournalTable	journalTable;
            InventTrans			inventTrans;
            InventTransOrigin	inventTransOrigin;
            InventHandlingQty   updateQty;
            InventQty           inventTransQty;
            PdsCWInventQty      inventTransPdsCWQty;
            WHSHandlingWeight   weightToPickCW;

            localProdBOM = ProdBOM::findTransId(_inventTransId);
            
            ttsbegin;

            while select journalBOM
                where journalBOM.InventTransId			== _inventTransId
                &&	  journalBOM.InventTransChildType	== InventTransChildType::ProdJournalBOM
                join Qty, PdsCWQty from inventTrans
                    order by Qty, PdsCWQty // Order by Qty to reduce the number of transactions we need to update.
                    where inventTrans.TransChildRefId	== journalBOM.InventTransChildRefId
                    &&	  inventTrans.inventDimId		== inventDimFrom.inventDimId
                    &&	  inventTrans.StatusIssue		== StatusIssue::ReservPhysical
                exists join journalTable
                    where journalTable.JournalId == journalBOM.JournalId
                    &&	  journalTable.Posted	 == NoYes::No
            {
                movement  = InventMovement::construct(localProdBOM, InventMovSubType::None, journalBOM);
                updateQty = movement.pdsCWItem() ? min(runningQty, -inventTrans.PdsCWQty) : min(runningQty, -inventTrans.Qty);
                
                if (movement.pdsCWItem())
                {
                    inventTransQty = inventTrans.Qty;
                    inventTransPdsCWQty = inventTrans.PdsCWQty;
                }

                if (_rmPolicy == WHSRawMaterialPolicy::Pick)
                {
                    if (movement.pdsCWItem())
                    {
                        weightToPickCW = WHSCatchWeightHelper::calculateAverageWeight(updateQty, -inventTransPdsCWQty, -inventTransQty, InventTable::inventDecimals(localProdBOM.ItemId));
                        weightPickedCW += weightToPickCW;

                        // For catch weight item, captured weight may differ from quantity on prod bom line, so prod bom line need be updated.
                        localProdBOM.selectForUpdate(true);
                    }

                    InventUpd_Picked picked = InventUpd_Picked::newParameters(movement,
                                                                            _inventDimTo,
                                                                            toDimParm,
                                                                            inventDimFrom,
                                                                            fromDimParm,
                                                                            movement.pdsCWItem() ? -weightToPickCW : -updateQty,
                                                                            '',
                                                                            movement.pdsCWItem() ? -updateQty : 0);
                    picked.updateNow();
                }
                else
                {
                    WHSWorkTable::changeReservedHandlingQuantityDimensions(movement, updateQty, inventDimFrom, _inventDimTo);
                }

                runningQty -= updateQty;

                if (runningQty <= 0)
                {
                    if (_rmPolicy == WHSRawMaterialPolicy::Pick && _weightToUnreserveOrUnpick > weightPickedCW)
                    {
                        weightToPickCW = _weightToUnreserveOrUnpick - weightPickedCW;
                        InventUpd_Picked picked = InventUpd_Picked::newParameters(movement,
                                                                            _inventDimTo,
                                                                            toDimParm,
                                                                            inventDimFrom,
                                                                            fromDimParm,
                                                                            -weightToPickCW,
                                                                            '',
                                                                            0);
                        picked.updateNow();
                    }

                    break;
                }
            }

            // If there is remaining quantity attempt to use prodBOM without a picking list journal.
            if (runningQty > 0)
            {
                if (_rmPolicy == WHSRawMaterialPolicy::Pick)
                {
                    boolean isCWItem = PdsGlobal::pdsIsCWItem(localProdBOM.ItemId);

                    if (isCWItem)
                    {
                        if (!inventTransQty)
                        {
                            inventTransQty = -_weightToUnreserveOrUnpick;
                            inventTransPdsCWQty = -_qtyToUnreserveOrUnpick;
                        }

                        weightToPickCW = WHSCatchWeightHelper::calculateAverageWeight(runningQty, -inventTransPdsCWQty, -inventTransQty, InventTable::inventDecimals(localProdBOM.ItemId));
                    }

                    InventQty       inventQtyToPick = isCWItem ? weightToPickCW : runningQty;
                    PdsCWInventQty  cwQtyToPick     = isCWItem ? runningQty : 0;
                    
                    using (var context = WhsInventPickingContext::newSkipPickIdAllocation())
                    {
                        WHSInvent::pickQuantities(localProdBOM, _inventDimTo.InventDimId, inventQtyToPick, cwQtyToPick, WHSReservationHierarchyInventDimUtil::initInventDimParmAboveLocation(InventTable::find(localProdBOM.ItemId)));
                    }
                }
                else
                {
                    // The Raw materials might have been picked already by the time the replenishment work is completed
                    //Final reservation should include all the dimensions for the receipt transaction.
                    WHSWorkTable::changeReservedHandlingQuantityDimensionsAllowingReduction(InventMovement::construct(localProdBOM), runningQty, inventDimFrom, _inventDimTo);
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>