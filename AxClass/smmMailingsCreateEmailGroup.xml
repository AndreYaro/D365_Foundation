<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmMailingsCreateEmailGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SmmMailingsCreateEmailGroup extends RunBaseBatch implements BatchRetryable
{
    DialogField                 dialogEmailGroup;
    DialogField                 dialogEmailCategory;
    DialogField                 dialogEmailAddressee;

    smmEMailGroupId             emailGroup;
    smmEmailCategoryId          emailCategory;
    smmEMailToCopyOrBlindCopy   addressee;

    QueryRun                    qRun;

    #define.CurrentVersion(2)
    #localMacro.CurrentList
        emailGroup,
        emailCategory,
        addressee
    #endMacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// This method must be in this class because it is called from the <c>DialogRunbase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEmailGroup</Name>
				<Source><![CDATA[
    public void createEmailGroup()
    {
        smmEmailGroups  smmEmailGroups;

        smmEmailGroups.GroupId      = emailGroup;
        smmEmailGroups.CategoryId   = emailCategory;

        smmEmailGroups.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        // Create email group
        DialogRunbase dialog = new DialogRunbase("@SYS80590", this);

        // Add email group
        dialogEmailGroup        = dialog.addField(extendedTypeStr(smmEMailGroupId));
        dialogEmailGroup.lookupButton(1);

        // Add category for email group
        dialogEmailCategory     = dialog.addField(extendedTypeStr(smmEmailCategoryId));

        // Add email type
        dialogEmailAddressee    = dialog.addField(enumStr(smmEMailToCopyOrBlindCopy));
        dialogEmailAddressee.value(smmEMailToCopyOrBlindCopy::BCC);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS80590";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        emailGroup    = dialogEmailGroup.value();
        emailCategory = dialogEmailCategory.value();
        addressee     = dialogEmailAddressee.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, (qRun ? qRun.pack() : conNull())];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        Counter             emailMembersAdded;

        emailMembersAdded = smmMailingsCreateEmailGroup::processOnServer(emailGroup,
                                                                         emailCategory,
                                                                         addressee,
                                                                         qRun.pack());
        if (emailMembersAdded == -1)
        {
            // No email members
            throw error("@SYS80693");
        }
        else
        {
            // %1 members added to the email group %2
            info(strFmt("@SYS86736", emailMembersAdded, emailGroup));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the batch job will be run with the account of the user who created the job.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// If you want a batch job that extends this class to run on a client, you must override this method
    /// to return false. Jobs that return true must not access any client-side functionality. If true is
    /// returned, the batch server will execute the job by using the <c>runAs</c> method.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryRunFromCommon</Name>
				<Source><![CDATA[
    void setQueryRunFromCommon(Common common)
    {
        FormDataSource  dataSource;
        Query           query;
        dataSource = FormDataUtil::getFormDataSource(common);
        if (dataSource)
        {
            qRun = dataSource.queryRun();
            if (qRun)
            {
                query = qRun.query();
                SysQuery::queryAddDynaCursorAsRangeAndValue(query,qRun.query(),1);
                query.dataSourceNo(1).clearDynalinks();
                qRun = new QueryRun(query);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        int version     = RunBase::getVersion(packedClass);
        container       packedQuery;
        boolean         ret;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,packedQuery] = packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    qRun = new QueryRun(packedQuery);
                }

                ret = true;
                break;

            default :
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ok = true;

        // Check for duplicates of email group
        if (smmEmailGroups::exist(emailGroup))
        {
            // Group already exists
            error("@SYS80694");
            ok = false;
        }

        // Check for duplicates of email group
        if (!emailGroup)
        {
            // Email group is required
            error("@SYS80695");
            ok = false;
        }

        // Check for email category
        if (!emailCategory)
        {
            // Email category is required
            error("@SYS80696");
            ok = false;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        smmMailingsCreateEmailGroup mailingsCreateEmailGroup;
        FormDataSource              dataSource;

        mailingsCreateEmailGroup = new smmMailingsCreateEmailGroup();
        mailingsCreateEmailGroup.setQueryRunFromCommon(args.record());

        if (mailingsCreateEmailGroup.prompt())
        {
            if (mailingsCreateEmailGroup.validate())
            {
                mailingsCreateEmailGroup.runOperation();

                // Refresh data source
                dataSource = FormDataUtil::getFormDataSource(args.record());
                if (dataSource)
                {
                    dataSource.reread();
                    dataSource.refresh();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOnServer</Name>
				<Source><![CDATA[
    private static Counter processOnServer(smmEMailGroupId             emailGroup,
                                                  smmEmailCategoryId          emailCategory,
                                                  smmEMailToCopyOrBlindCopy   addressee,
                                                  container                   packedQuery)
    {
        smmMailings         smmMailings;
        smmEmailGroups      smmEmailGroups;
        smmEmailMembers     smmEmailMembers = null;
        QueryRun            mailingsQueryRun;
        Counter             emailMembersAdded;

        mailingsQueryRun  = new QueryRun(packedQuery);
        mailingsQueryRun.recordLevelSecurity(true);

        if (!QueryRun::getQueryRowCount(mailingsQueryRun.query(), intMax()))
        {
            return -1;
        }

        ttsbegin;

        // Create email group
        smmEmailGroups.GroupId      = emailGroup;
        smmEmailGroups.CategoryId   = emailCategory;
        smmEmailGroups.insert();

        while (mailingsQueryRun.next())
        {
            smmMailings = mailingsQueryRun.get(tableNum(smmMailings));

            smmEmailMembers.clear();
            smmEmailMembers.GroupId                 = emailGroup;
            smmEmailMembers.eMailToCopyOrBlindCopy  = addressee;
            smmEmailMembers.ContactPersonId         = smmMailings.ContactPersonId;
            smmEmailMembers.Party                   = smmMailings.Party;
            smmEmailMembers.KeyId                   = smmMailings.KeyId;

            // Check if the contact is in the group already
            if (!smmEmailMembers::findContact(emailGroup, smmEmailMembers.ContactPersonId))
            {
                // Insert the contact in the email group
                smmEmailMembers.insert();
                emailMembersAdded++;
            }
        }

        ttscommit;

        return emailMembersAdded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>