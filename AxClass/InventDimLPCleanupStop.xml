<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimLPCleanupStop</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class InventDimLPCleanupStop extends RunBase
{
    private InventDimLPCleanupJob cleanupJob;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        cleanupJob
     #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimLPCleanupStop</Name>
				<Source><![CDATA[
    public InventDimLPCleanupJob parmInventDimLPCleanupStop(InventDimLPCleanupJob _cleanupJob = cleanupJob)
    {
        cleanupJob = _cleanupJob;
        return cleanupJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        setPrefix(InventDimLPCleanupStop::description());

        try
        {
            ttsbegin;
            if (!this.validate())
            {
                throw error("@SYS18722");
            }

            cleanupJob = InventDimLPCleanupJob::findBySessionId(cleanupJob.SessionId, true);
            cleanupJob.StopRunning = NoYes::Yes;
            cleanupJob.update();
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        cleanupJob = InventDimLPCleanupJob::findBySessionId(cleanupJob.SessionId);

        if (!cleanupJob.RecId)
        {
            return checkFailed("@SCM:InventDimLPCleanupCancelledOrDeleted");
        }

        if (cleanupJob.Status == InventDimLPCleanupStatus::ReadyForUpdateRefTable
         || cleanupJob.Status == InventDimLPCleanupStatus::UpdateRefTableInProgress
         || cleanupJob.Status == InventDimLPCleanupStatus::Complete)
        {
            return checkFailed(strFmt("@SCM:StatusOfInventDimLPCleanup", cleanupJob.Status));
        }

        if (cleanupJob.StopRunning)
        {
            return checkFailed("@SYS78040");
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventDimLPCleanupStop construct()
    {
        return new InventDimLPCleanupStop();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SCM:InventDimLPCleanupStopDescription";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        if (! args || args.dataset() != tableNum(InventDimLPCleanupJob))
        {
            throw error(strFmt("@SYS29104", classStr(InventDimLPCleanupStop)));
        }

        InventDimLPCleanupStop inventDimLPCleanupStop = InventDimLPCleanupStop::newInventDimLPCleanupJob(args.record());
        inventDimLPCleanupStop.runOperation();

        if (args && args.caller())
        {
            InventDimLPCleanupJob inventDimLPCleanupJob = args.record();

            if (FormDataUtil::getFormDataSource(inventDimLPCleanupJob))
            {
                FormDataUtil::getFormDataSource(inventDimLPCleanupJob).reread();
                FormDataUtil::getFormDataSource(inventDimLPCleanupJob).refresh();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventDimLPCleanupJob</Name>
				<Source><![CDATA[
    public static InventDimLPCleanupStop newInventDimLPCleanupJob(InventDimLPCleanupJob _cleanupJob)
    {
        InventDimLPCleanupStop inventDimLPCleanupStop = InventDimLPCleanupStop::construct();

        inventDimLPCleanupStop.getLast();
        inventDimLPCleanupStop.parmInventDimLPCleanupStop(_cleanupJob);
        inventDimLPCleanupStop.init();

        return inventDimLPCleanupStop;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>