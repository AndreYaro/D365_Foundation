<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransTablesEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class that handles the OnInsert and OnDeleted events of the Project Invoice Proposal related tables.
/// Proposal Id and Project Id related to these tables are stored in ProjProposalTransTable which is then used in Project Invoice Proposal listpage.
/// ProjProposalTransTable replaced the view ProjProposalTransUnion in the listpage for performance reasons.
/// </summary>
public class ProjTransTablesEventHandler
{
    private static const str ActivityPattern = '%1-%2';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ProjEmplTrans_onInserted</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(ProjEmplTrans), DataEventType::Inserted)]
    public static void ProjEmplTrans_onInserted(Common _sender, DataEventArgs _e)
    {
        try
        {
            ProjTransTablesEventHandler::logTransactionEvent(
                tableStr(ProjEmplTrans),
                DataEventType::Inserted,
                _sender.(fieldNum(ProjEmplTrans, ProjId)),
                _sender.(fieldNum(ProjEmplTrans, TransId)),
                _sender.(fieldNum(ProjEmplTrans, TransIdRef)),
                _sender.(fieldNum(ProjEmplTrans, AdjRefTransId)),
                _sender.(fieldNum(ProjEmplTrans, TransactionOrigin)),
                _sender.(fieldNum(ProjEmplTrans, CategoryId)));
        }
        catch
        {
            // do nothing
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProjCostTrans_onInserted</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(ProjCostTrans), DataEventType::Inserted)]
    public static void ProjCostTrans_onInserted(Common _sender, DataEventArgs _e)
    {
        try
        {
            ProjTransTablesEventHandler::logTransactionEvent(
                tableStr(ProjCostTrans),
                DataEventType::Inserted,
                _sender.(fieldNum(ProjCostTrans, ProjId)),
                _sender.(fieldNum(ProjCostTrans, TransId)),
                _sender.(fieldNum(ProjCostTrans, TransIdRef)),
                _sender.(fieldNum(ProjCostTrans, AdjRefTransId)),
                _sender.(fieldNum(ProjCostTrans, TransactionOrigin)),
                _sender.(fieldNum(ProjCostTrans, CategoryId)));
        }
        catch
        {
            // do nothing
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProjOnAccTrans_onInserted</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(ProjOnAccTrans), DataEventType::Inserted)]
    public static void ProjOnAccTrans_onInserted(Common _sender, DataEventArgs _e)
    {
        try
        {
            ProjTransTablesEventHandler::logTransactionEvent(
                tableStr(ProjOnAccTrans),
                DataEventType::Inserted,
                _sender.(fieldNum(ProjOnAccTrans, ProjId)),
                _sender.(fieldNum(ProjOnAccTrans, TransId)),
                _sender.(fieldNum(ProjOnAccTrans, TransIdRef)),
                _sender.(fieldNum(ProjOnAccTrans, AdjRefTransId)),
                _sender.(fieldNum(ProjOnAccTrans, TransactionOrigin)));
        }
        catch
        {
            // do nothing
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProjRevenueTrans_onInserted</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(ProjRevenueTrans), DataEventType::Inserted)]
    public static void ProjRevenueTrans_onInserted(Common _sender, DataEventArgs _e)
    {
        try
        {
            ProjTransTablesEventHandler::logTransactionEvent(
                tableStr(ProjRevenueTrans),
                DataEventType::Inserted,
                _sender.(fieldNum(ProjRevenueTrans, ProjId)),
                _sender.(fieldNum(ProjRevenueTrans, TransId)),
                _sender.(fieldNum(ProjRevenueTrans, TransIdRef)),
                _sender.(fieldNum(ProjRevenueTrans, AdjRefTransId)),
                _sender.(fieldNum(ProjRevenueTrans, TransactionOrigin)),
                _sender.(fieldNum(ProjRevenueTrans, CategoryId)));
        }
        catch
        {
            // do nothing
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProjItemTrans_onInserted</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(ProjItemTrans), DataEventType::Inserted)]
    public static void ProjItemTrans_onInserted(Common _sender, DataEventArgs _e)
    {
        try
        {
            ProjTransTablesEventHandler::logTransactionEvent(
                tableStr(ProjItemTrans),
                DataEventType::Inserted,
                _sender.(fieldNum(ProjItemTrans, ProjId)),
                _sender.(fieldNum(ProjItemTrans, ProjTransId)),
                _sender.(fieldNum(ProjItemTrans, ProjTransIdRef)),
                _sender.(fieldNum(ProjItemTrans, AdjRefTransId)),
                _sender.(fieldNum(ProjItemTrans, TransactionOrigin)),
                _sender.(fieldNum(ProjItemTrans, CategoryId)));
        }
        catch
        {
            // do nothing
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProjEmplTrans_onUpdated</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(ProjEmplTrans), DataEventType::Updated)]
    public static void ProjEmplTrans_onUpdated(Common _sender, DataEventArgs _e)
    {
        try
        {
            ProjTransTablesEventHandler::logTransactionEvent(
                tableStr(ProjEmplTrans),
                DataEventType::Updated,
                _sender.(fieldNum(ProjEmplTrans, ProjId)),
                _sender.(fieldNum(ProjEmplTrans, TransId)),
                _sender.(fieldNum(ProjEmplTrans, TransIdRef)),
                _sender.(fieldNum(ProjEmplTrans, AdjRefTransId)),
                _sender.(fieldNum(ProjEmplTrans, TransactionOrigin)),
                _sender.(fieldNum(ProjEmplTrans, CategoryId)));
        }
        catch
        {
            // do nothing
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProjCostTrans_onUpdated</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(ProjCostTrans), DataEventType::Updated)]
    public static void ProjCostTrans_onUpdated(Common _sender, DataEventArgs _e)
    {
        try
        {
            ProjTransTablesEventHandler::logTransactionEvent(
                tableStr(ProjCostTrans),
                DataEventType::Updated,
                _sender.(fieldNum(ProjCostTrans, ProjId)),
                _sender.(fieldNum(ProjCostTrans, TransId)),
                _sender.(fieldNum(ProjCostTrans, TransIdRef)),
                _sender.(fieldNum(ProjCostTrans, AdjRefTransId)),
                _sender.(fieldNum(ProjCostTrans, TransactionOrigin)),
                _sender.(fieldNum(ProjCostTrans, CategoryId)));
        }
        catch
        {
            // do nothing
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProjOnAccTrans_onUpdated</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(ProjOnAccTrans), DataEventType::Updated)]
    public static void ProjOnAccTrans_onUpdated(Common _sender, DataEventArgs _e)
    {
       try
        {
            ProjTransTablesEventHandler::logTransactionEvent(
                tableStr(ProjOnAccTrans),
                DataEventType::Updated,
                _sender.(fieldNum(ProjOnAccTrans, ProjId)),
                _sender.(fieldNum(ProjOnAccTrans, TransId)),
                _sender.(fieldNum(ProjOnAccTrans, TransIdRef)),
                _sender.(fieldNum(ProjOnAccTrans, AdjRefTransId)),
                _sender.(fieldNum(ProjOnAccTrans, TransactionOrigin)));
        }
        catch
        {
            // do nothing
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProjRevenueTrans_onUpdated</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(ProjRevenueTrans), DataEventType::Updated)]
    public static void ProjRevenueTrans_onUpdated(Common _sender, DataEventArgs _e)
    {
        try
        {
            ProjTransTablesEventHandler::logTransactionEvent(
                tableStr(ProjRevenueTrans),
                DataEventType::Updated,
                _sender.(fieldNum(ProjRevenueTrans, ProjId)),
                _sender.(fieldNum(ProjRevenueTrans, TransId)),
                _sender.(fieldNum(ProjRevenueTrans, TransIdRef)),
                _sender.(fieldNum(ProjRevenueTrans, AdjRefTransId)),
                _sender.(fieldNum(ProjRevenueTrans, TransactionOrigin)),
                _sender.(fieldNum(ProjRevenueTrans, CategoryId)));
        }
        catch
        {
            // do nothing
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProjItemTrans_onUpdated</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(ProjItemTrans), DataEventType::Updated)]
    public static void ProjItemTrans_onUpdated(Common _sender, DataEventArgs _e)
    {
        try
        {
            ProjTransTablesEventHandler::logTransactionEvent(
                tableStr(ProjItemTrans),
                DataEventType::Updated,
                _sender.(fieldNum(ProjItemTrans, ProjId)),
                _sender.(fieldNum(ProjItemTrans, ProjTransId)),
                _sender.(fieldNum(ProjItemTrans, ProjTransIdRef)),
                _sender.(fieldNum(ProjItemTrans, AdjRefTransId)),
                _sender.(fieldNum(ProjItemTrans, TransactionOrigin)),
                _sender.(fieldNum(ProjItemTrans, CategoryId)));
        }        
        catch
        {
            // do nothing
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProjEmplTrans_onDeleted</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(ProjEmplTrans), DataEventType::Deleted)]
    public static void ProjEmplTrans_onDeleted(Common _sender, DataEventArgs _e)
    {
        try
        {
            ProjTransTablesEventHandler::logTransactionEvent(
                tableStr(ProjEmplTrans),
                DataEventType::Deleted,
                _sender.(fieldNum(ProjEmplTrans, ProjId)),
                _sender.(fieldNum(ProjEmplTrans, TransId)),
                _sender.(fieldNum(ProjEmplTrans, TransIdRef)),
                _sender.(fieldNum(ProjEmplTrans, AdjRefTransId)),
                _sender.(fieldNum(ProjEmplTrans, TransactionOrigin)),
                _sender.(fieldNum(ProjEmplTrans, CategoryId)));
        }
        catch
        {
            // do nothing
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProjCostTrans_onDeleted</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(ProjCostTrans), DataEventType::Deleted)]
    public static void ProjCostTrans_onDeleted(Common _sender, DataEventArgs _e)
    {
        try
        {
            ProjTransTablesEventHandler::logTransactionEvent(
                tableStr(ProjCostTrans),
                DataEventType::Deleted,
                _sender.(fieldNum(ProjCostTrans, ProjId)),
                _sender.(fieldNum(ProjCostTrans, TransId)),
                _sender.(fieldNum(ProjCostTrans, TransIdRef)),
                _sender.(fieldNum(ProjCostTrans, AdjRefTransId)),
                _sender.(fieldNum(ProjCostTrans, TransactionOrigin)),
                _sender.(fieldNum(ProjCostTrans, CategoryId)));
        }
        catch
        {
            // do nothing
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProjOnAccTrans_onDeleted</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(ProjOnAccTrans), DataEventType::Deleted)]
    public static void ProjOnAccTrans_onDeleted(Common _sender, DataEventArgs _e)
    {
        try
        {
            ProjTransTablesEventHandler::logTransactionEvent(
                tableStr(ProjOnAccTrans),
                DataEventType::Deleted,
                _sender.(fieldNum(ProjOnAccTrans, ProjId)),
                _sender.(fieldNum(ProjOnAccTrans, TransId)),
                _sender.(fieldNum(ProjOnAccTrans, TransIdRef)),
                _sender.(fieldNum(ProjOnAccTrans, AdjRefTransId)),
                _sender.(fieldNum(ProjOnAccTrans, TransactionOrigin)));
        }
        catch
        {
            // do nothing
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProjRevenueTrans_onDeleted</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(ProjRevenueTrans), DataEventType::Deleted)]
    public static void ProjRevenueTrans_onDeleted(Common _sender, DataEventArgs _e)
    {
        try
        {
            ProjTransTablesEventHandler::logTransactionEvent(
                tableStr(ProjRevenueTrans),
                DataEventType::Deleted,
                _sender.(fieldNum(ProjRevenueTrans, ProjId)),
                _sender.(fieldNum(ProjRevenueTrans, TransId)),
                _sender.(fieldNum(ProjRevenueTrans, TransIdRef)),
                _sender.(fieldNum(ProjRevenueTrans, AdjRefTransId)),
                _sender.(fieldNum(ProjRevenueTrans, TransactionOrigin)),
                _sender.(fieldNum(ProjRevenueTrans, CategoryId)));
        }
        catch
        {
            // do nothing
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProjItemTrans_onDeleted</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(ProjItemTrans), DataEventType::Deleted)]
    public static void ProjItemTrans_onDeleted(Common _sender, DataEventArgs _e)
    {
        try
        {
            ProjTransTablesEventHandler::logTransactionEvent(
                tableStr(ProjItemTrans),
                DataEventType::Deleted,
                _sender.(fieldNum(ProjItemTrans, ProjId)),
                _sender.(fieldNum(ProjItemTrans, ProjTransId)),
                _sender.(fieldNum(ProjItemTrans, ProjTransIdRef)),
                _sender.(fieldNum(ProjItemTrans, AdjRefTransId)),
                _sender.(fieldNum(ProjItemTrans, TransactionOrigin)),
                _sender.(fieldNum(ProjItemTrans, CategoryId)));
        }
        catch
        {
            // do nothing
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logTransactionEvent</Name>
				<Source><![CDATA[
    private static void logTransactionEvent(
        str _tableName,
        DataEventType _dataEventType,
        ProjId _projId,
        ProjTransIdBase _transId,
        ProjTransIdBase _transIdRef,
        ProjTransIdBase _adjRefTransId,
        ProjTransactionOrigin _transactionOrigin,
        ProjCategoryId _categoryId = strMin())
    {
        if (ProjEnableTransPostingTelemetryFlight::instance().isEnabled())
        {
            ProjOpsManagementLogger logger = ProjOpsManagementLogger::createLogger(_tableName);
        
            str activity = strFmt(ActivityPattern, _tableName, enum2Symbol(enumNum(DataEventType), _dataEventType));
            str callStack =  ProjOpsInstrumentationLogger::getCallStack(xSession::xppCallStack());

            SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();
            serializer.setValue(ProjOpsInstrumentationBaseActitivies::ActionProperty, activity);
            serializer.setValue(ProjOpsInstrumentationBaseActitivies::ProjectIdProperty, _projId);
            serializer.setValue(ProjOpsInstrumentationBaseActitivies::TransIdProperty, _transId);
            serializer.setValue(ProjOpsInstrumentationBaseActitivies::TransIdRefProperty, _transIdRef);
            serializer.setValue(ProjOpsInstrumentationBaseActitivies::AdjRefTransIdProperty, _adjRefTransId);
            serializer.setValue(ProjOpsInstrumentationBaseActitivies::TransactionOriginProperty,
                enum2Symbol(enumNum(ProjTransactionOrigin), enum2int(_transactionOrigin)));

            if (_tableName != tableStr(ProjOnAccTrans))
            {
                serializer.setValue(ProjOpsInstrumentationBaseActitivies::CategoryIdProperty, _categoryId);
            }

            serializer.setValue(ProjOpsInstrumentationBaseActitivies::CallStackProperty, callStack);

            str logMessage = serializer.toString();
            logger.logInformation(logMessage);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>