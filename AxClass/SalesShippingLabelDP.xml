<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesShippingLabelDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>SalesShippingLabelDP</c> class provides data to the <c>SalesShippingLabel</c> report.
/// </summary>
/// <remarks>
///    This class provides methods that are used by the <c>SalesShippingLabel</c> report, which prints
///    shipping labels.
/// </remarks>
[
    SRSReportQueryAttribute(queryStr(SalesShippingLabel)),
    SRSReportParameterAttribute(classstr(SalesShippingLabelContract))
]
public class SalesShippingLabelDP extends SRSReportDataProviderBase
{
    boolean                 useJournalList;
    RecordSortedList        journalList;
    boolean                 newPage;
    boolean                 list;
    CompanyInfo             companyInfo;
    CustTable               custTable;
    CustPackingSlipJour     custPackingSlipJour;
    CustInvoiceJour         custInvoiceJour;
    boolean                 copy;
    int                     pageNo;
    int                     maxPage;
    int                     packageNo;
    SalesShippingStat       salesShippingStat;
    SalesShippingLabelTmp   salesShippingLabelTmp;
    LogisticsPostalAddress  logisticsPostalAddress;
    FormLetterTxt           formLetterTxt;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getRecIds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the record ID values.
    /// </summary>
    /// <param name="_stringConatiner">
    ///    A container with new record ID values; optional.
    /// </param>
    /// <returns>
    ///    A container that contains the record ID values.
    /// </returns>
    private container getRecIds(FormLetterTxt _stringConatiner)
    {
        XmlDocument xmlDocument = new XmlDocument();

        xmlDocument.loadXml(_stringConatiner);
        XmlNode xmlNode = xmlDocument.childNodes().item(0);
        container con = Global::containerFromXMLNode(xmlNode);

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesShippingLabelTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Queries the <c>SalesShippingLabelTmp</c> table to retrieve the required data.
    /// </summary>
    /// <returns>
    ///    The required report data.
    /// </returns>
    [
        SRSReportDataSetAttribute('SalesShippingLabelTmp')
    ]
    public SalesShippingLabelTmp getSalesShippingLabelTmp()
    {
        select * from salesShippingLabelTmp;
        return salesShippingLabelTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSalesShippingLabelTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the filtered data into the <c>SalesShippingLabelTmp</c> temporary table.
    /// </summary>
    /// <param name="_custPSJ">
    ///    The <c>CustPackingSlipJour</c> table data.
    /// </param>
    /// <param name="_all">
    ///    The table data.
    /// </param>
    private void insertSalesShippingLabelTmp(boolean _custPSJ, boolean _all = false)
    {
        companyInfo = CompanyInfo::find();
        salesShippingLabelTmp.CompanyInfoName       = companyInfo.name();
        salesShippingLabelTmp.CompanyInfoAddress    = companyInfo.postalAddress().Address;
        if (list)
        {
            salesShippingLabelTmp.CompanyCity                   = companyInfo.postalAddress().City;
            salesShippingLabelTmp.CompanyInfoZipCode            = companyInfo.postalAddress().ZipCode;
            salesShippingLabelTmp.CompanyInfoCountryRegionId    = companyInfo.postalAddress().CountryRegionId;
            salesShippingLabelTmp.CompanyInfoPhone              = companyInfo.phone();
        }

        if (_custPSJ || _all)
        {
            logisticsPostalAddress = LogisticsPostalAddress::findRecId(custPackingSlipJour.DeliveryPostalAddress);
            salesShippingLabelTmp.CustPSJDeliveryName       = custPackingSlipJour.DeliveryName;
            salesShippingLabelTmp.CustPSJDeliveryAddress    = custPackingSlipJour.deliveryAddress();
            if (list)
            {
                salesShippingLabelTmp.CustPSJDlvState           = logisticsPostalAddress.State;
                salesShippingLabelTmp.PackingSlipCity           = logisticsPostalAddress.City;
                salesShippingLabelTmp.CustPSJDlvZipCode         = logisticsPostalAddress.ZipCode;
                salesShippingLabelTmp.CustPSJDlvCountryRegionId = logisticsPostalAddress.CountryRegionId;
            }
        }

        if (!_custPSJ || _all)
        {
            logisticsPostalAddress = LogisticsPostalAddress::findRecId(custInvoiceJour.DeliveryPostalAddress);
            salesShippingLabelTmp.Name      = custInvoiceJour.DeliveryName;
            salesShippingLabelTmp.Address   = custInvoiceJour.deliveryAddress();
            if (list)
            {
                salesShippingLabelTmp.State             = logisticsPostalAddress.State;
                salesShippingLabelTmp.InvoiceCity       = logisticsPostalAddress.City;
                salesShippingLabelTmp.ZipCode           = logisticsPostalAddress.ZipCode;
                salesShippingLabelTmp.CountryRegionId   = logisticsPostalAddress.CountryRegionId;
            }
        }

        if (list)
        {
            salesShippingLabelTmp.SalesShippingStatQuantity    = salesShippingStat.Quantity;
            salesShippingLabelTmp.SalesShippingStatGrossWeight = salesShippingStat.GrossWeight;
        }
        else
        {
            salesShippingLabelTmp.Label     = 1;
            salesShippingLabelTmp.LabelNo   = this.labelNo();
        }

        if (newPage)
        {
            salesShippingLabelTmp.PageNumber = pageNo;
        }
        salesShippingLabelTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>labelNo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the label string.
    /// </summary>
    /// <returns>
    ///    The label string that is based on the condition.
    /// </returns>
    public str labelNo()
    {
        if (journalList)
        {
            return "@SYS420"+strfmt('  %1',packageNo)+'/'+strfmt('%1',journalList.len());
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the business logic.
    /// </summary>
    /// <remarks>
    ///    This method processes the report business logic that is used by the <c>SalesShippingLabel</c>
    ///    report.
    /// </remarks>
    public void processReport()
    {
        int                         i;
        SalesShippingLabelContract  contract = this.parmDataContract() as SalesShippingLabelContract;

        this.setReportLayoutType();

        useJournalList = contract.parmMultipleRecords();
        formLetterTxt  = contract.parmSalesShippingStatRecIds();
        Query query    = new Query(this.parmQuery());

        container cont = this.getRecIds(formLetterTxt);
        for (i = 2;i <= conlen(cont); i++)
        {
            recId recId = str2int64(conpeek(cont,i));
            select salesShippingStat
            where salesShippingStat.RecId == recId;
            if (useJournalList)
            {
                if (!journalList)
                {
                    journalList = new RecordSortedList(tablenum(SalesShippingStat));
                }
                journalList.ins(salesShippingStat);
            }
            i++;
        }

        select firstonly custPackingSlipJour
                  where custPackingSlipJour.SalesId         == salesShippingStat.SalesId        &&
                        custPackingSlipJour.PackingSlipId   == salesShippingStat.PackingSlipId  &&
                        custPackingSlipJour.DeliveryDate    == salesShippingStat.DeliveryDate;

        custPackingSlipJour = custPackingSlipJour.data();

        select firstonly custInvoiceJour
                  where custInvoiceJour.SalesId     == salesShippingStat.SalesId        &&
                        custInvoiceJour.InvoiceId   == salesShippingStat.InvoiceId      &&
                        custInvoiceJour.InvoiceDate == salesShippingStat.InvoiceDate;

        custInvoiceJour = custInvoiceJour.data();
        packageNo = 1;
        this.sendData(salesShippingStat);
        if (useJournalList)
        {
            while (journalList.next(salesShippingStat))
            {
                if (SalesParameters::find().PrePrintLevelShippingLabel == SalesShippingReport::Label)
                {
                    newPage = true;
                }
                packageNo++;
                this.sendData(salesShippingStat);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportLayoutType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Set the sales shipping report layout Type.
    /// </summary>
    protected void setReportLayoutType()
    {
        switch (SalesParameters::find().PrePrintLevelShippingLabel)
        {
            case SalesShippingReport::List      :
                list =  true;
                break;

            case SalesShippingReport::Label     :
                list = false;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInsertSalesShippingLabelTmpAsDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Check if insert data into the <c>SalesShippingLabelTmp</c> temporary table
    /// </summary>
    /// <returns>
    ///    True will insert data; otherwise, false.
    /// </returns>
    protected boolean mustInsertSalesShippingLabelTmpAsDefault()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calls the <c>insertSalesShippingLabelTmp</c> method.
    /// </summary>
    /// <param name="salesStat">
    ///    The <c>SalesShippingStat</c> table parameter.
    /// </param>
    /// <remarks>
    ///    This method inserts particular data based on the conditions.
    /// </remarks>
    public void sendData(SalesShippingStat salesStat)
    {
        int copies;

        pageNo = 1;
        if (salesStat.Nolabels == 0)
            salesStat.Nolabels = 1;

        maxPage = salesStat.Nolabels;

        if (SalesParameters::find().PrePrintLevelShippingLabel == SalesShippingReport::Label)
        {
            for (copies=1;copies<=salesStat.Nolabels;copies++)
            {
                if (copies != salesStat.Nolabels)
                {
                    newPage = true;
                }
                if (custPackingSlipJour)
                {
                    this.insertSalesShippingLabelTmp(true);
                }
                else
                {
                    this.insertSalesShippingLabelTmp(false);
                }
                pageNo++;
            }
        }
        else
        {
            if (this.mustInsertSalesShippingLabelTmpAsDefault())
            {
                this.insertSalesShippingLabelTmp(true, true);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>