<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendRequestProcureAuditDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendRequestProcureAuditDP</c> class is the report data provider class of the vendor
/// procurement request reports.
/// </summary>
[
    SRSReportParameterAttribute(classstr(VendRequestProcureAuditContract))
]
class VendRequestProcureAuditDP extends SRSReportDataProviderBase
{
    List                        companyAccounts;
    List                        vendRequestTypes;

    VendRequestProcureAuditTmp  vendRequestProcureAuditTmp;
    VendTable                   vendTable;
    VendRequestAddVendor        vendRequestAddVendor;
    VendRequestCategory         vendRequestCategory;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get parameters from report dialog and set them to relevent variables.
    /// </summary>
    /// <returns>
    /// Returns boolean value
    /// </returns>
    private boolean getFromDialog()
    {
        boolean                             ret = true;
        VendRequestProcureAuditContract     contract;
        DataArea                            dataArea;

        // Get parameter which is stored in a data contract
        contract            = this.parmDataContract() as VendRequestProcureAuditContract;
        vendRequestTypes    = contract.parmVendRequestTypes();

        // Set company according to parameters. O means 'All'
        companyAccounts = new List(Types::String);
        if (contract.parmCompanyAccount() == 0)
        {
            while select Id from dataArea
                where dataArea.IsVirtual == false
            {
                companyAccounts.addStart(dataArea.Id);
            }
        }
        else
        {
            select Id from dataArea
                where dataArea.RecId == contract.parmCompanyAccount();
            companyAccounts.addStart(dataArea.Id);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new temporary record that is based on vendor request data and vendor data.
    /// </summary>
    /// <param name="_vendRequest">
    /// <c>VendRequest</c> record that contains the request data.
    /// </param>
    /// <param name="_newVendRequest">
    /// true if this is the first temporary record for a vendor request.
    /// </param>
    /// <param name="_newCompany">
    /// true means this is the first temporary record for a vendor request and a company account.
    /// </param>
    private void insertIntoTempTable(VendRequest _vendRequest, boolean _newVendRequest, boolean _newCompany)
    {
        EcoResCategory  ecoResCategory;
        VendCategory    vendCategory;

        vendRequestProcureAuditTmp.clear();

        // If flag is true, it means this temp record is the first record for a vendor request.
        // Therefore needs to show vendor request information.
        if (_newVendRequest)
        {
            vendRequestProcureAuditTmp.VendRequestCompanyAccount    = _vendRequest.DataAreaId;
            vendRequestProcureAuditTmp.VendRequestNumber            = _vendRequest.VendRequestNumber;
            vendRequestProcureAuditTmp.VendRequestType              = enum2str(_vendRequest.requestTypeName());
            vendRequestProcureAuditTmp.VendorName                   = _vendRequest.showVendorName();
        }

        // If flag is true, it means this temp record is the first record for a specific company
        // and vendor request. Therefore needs to show company and vendor information.
        if (_newCompany)
        {
            vendRequestProcureAuditTmp.AddVendorCompanyAccount  = vendRequestAddVendor.Company;
            vendRequestProcureAuditTmp.AccountNum               = vendTable.AccountNum;
            vendRequestProcureAuditTmp.VendorCreatedDate        = DateTimeUtil::date(vendTable.CreatedDateTime);
            vendRequestProcureAuditTmp.VendorCreatedBy = vendTable.CreatedBy;
        }

        // Fill in category and operating unit information
        select ecoResCategory
            where ecoResCategory.RecId == vendRequestCategory.Category;

        vendRequestProcureAuditTmp.CategoryName         = ecoResCategory.Name;
        vendRequestProcureAuditTmp.OperatingUnitName    = DirPartyTable::findRec(vendRequestCategory.OperatingUnit).Name;

        // Fill in approved category
        vendCategory = VendCategory::find(_vendRequest.AccountNum,
                            vendRequestCategory.Category,
                            vendRequestAddVendor.RecId ? vendRequestAddVendor.Company : _vendRequest.DataAreaId);
        vendRequestProcureAuditTmp.CategoryApproved = (vendCategory.RecId != 0 ? 'X' : '');

        // Fill in category status and approved operating unit
        if (vendCategory.RecId)
        {
            vendRequestProcureAuditTmp.OperatingUnitApproved    = vendRequestProcureAuditTmp.OperatingUnitName;
            vendRequestProcureAuditTmp.CategoryStatus           = enum2str(VendProcurementCategoryStatus::findVendorCategoryAsOfDate(vendCategory.RecId, DateTimeUtil::date(DateTimeUtil::utcNow())).VendorCategoryStatus);
        }

        vendRequestProcureAuditTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches records that are based on the parameter values and inserts the records into the temporary
    /// table.
    /// </summary>
    public void processReport()
    {
        ListEnumerator                  listEnumerator;
        VendRequestInstanceEntityType   vendRequestType;

        // Get parameter values from data contract
        this.getFromDialog();

        // Check which types of vendor requests need to be shown
        if (vendRequestTypes != null)
        {
            listEnumerator = vendRequestTypes.getEnumerator();
            while (listEnumerator.moveNext())
            {
                vendRequestType = listEnumerator.current();

                switch (vendRequestType)
                {
                    case VendRequestInstanceEntityType::Category:
                        this.processVendRequestCategoryExtension();
                        break;

                    case VendRequestInstanceEntityType::Company:
                        this.processVendRequestCompany();
                        break;
                }
            }
        }
        else
        {
            // If parameter is empty, then show both kinds of vendor requests
            this.processVendRequestCompany();
            this.processVendRequestCategoryExtension();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processVendRequestCategoryExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes all the approved category extension requests.
    /// </summary>
    /// <remarks>
    /// Instead of performing a grouping in the report design, this RDP class directly trims data and
    /// orders records.
    /// </remarks>
    private void processVendRequestCategoryExtension()
    {
        boolean                         newVendRequest = true;
        boolean                         newCompany = true;
        VendRequestCategoryExtension    vendRequestCategoryExtension;
        ListEnumerator                  listEnumerator;
        dataAreaId                      company;

        ttsbegin;

        listEnumerator = companyAccounts.getEnumerator();

        while (listEnumerator.moveNext())
        {
            company = listEnumerator.current();

            changecompany(company)
            {
                // Clear table buffer, in order for the join to work correctly
                vendTable.clear();
                vendRequestCategoryExtension.clear();
                vendRequestCategory.clear();

                while select vendRequestCategoryExtension
                    order by VendRequestNumber
                        where vendRequestCategoryExtension.CategoryExtensionStatus == VendRequestCategoryStatus::CategoryRequestApproved
                    join vendTable
                        where vendTable.AccountNum == vendRequestCategoryExtension.AccountNum
                {
                    // Process a new vendor request. The first record needs to show vendor request
                    // information, company information and vendor information.
                    newVendRequest = true;
                    newCompany = true;

                    while select vendRequestCategory
                        where vendRequestCategory.VendRequest == vendRequestCategoryExtension.RecId
                    {
                        this.insertIntoTempTable(vendRequestCategoryExtension, newVendRequest, newCompany);
                        newVendRequest = false;
                        newCompany = false;
                    }
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processVendRequestCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process all the completed new vendor requests.
    /// </summary>
    /// <remarks>
    /// Instead of performing the grouping in the report design, this RDP class directly trims data and
    /// orders records.
    /// </remarks>
    private void processVendRequestCompany()
    {
        boolean             newVendRequest = true;
        boolean             newCompany = true;
        VendRequestCompany  vendRequestCompany;
        ListEnumerator      listEnumerator;
        dataAreaId          company;

        ttsbegin;

        listEnumerator = companyAccounts.getEnumerator();

        while (listEnumerator.moveNext())
        {
            company = listEnumerator.current();

            changecompany(company)
            {
                // Clear table buffer, in order for the join to work correctly
                vendTable.clear();
                vendRequestCompany.clear();
                vendRequestCategory.clear();
                vendRequestAddVendor.clear();

                while select vendRequestCompany
                    order by VendRequestNumber
                    join vendTable
                        where vendTable.AccountNum == vendRequestCompany.AccountNum
                {
                    // Process a new vendor request. The first record needs to show vendor request
                    // information, company information and vendor information.
                    newVendRequest  = true;
                    newCompany      = true;
                    while select vendRequestCategory
                        where vendRequestCategory.VendRequest == vendRequestCompany.RecId
                    {
                        this.insertIntoTempTable(vendRequestCompany, newVendRequest, newCompany);
                        newVendRequest  = false;
                        newCompany      = false;
                    }

                    // Process vendor records that is generated for other companies. The first record needs
                    // to show company information and vendor information.
                    newCompany = true;
                    while select vendRequestAddVendor
                        where vendRequestAddVendor.VendRequest == vendRequestCompany.RecId
                        join vendRequestCategory
                            where vendRequestCategory.VendRequest == vendRequestCompany.RecId
                    {
                        vendTable = VendTable::findByCompany(vendRequestAddVendor.Company, vendRequestAddVendor.VendAccountNum);
                        this.insertIntoTempTable(vendRequestCompany, newVendRequest, newCompany);
                        newCompany = false;
                    }
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendRequestProcureAuditTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the actual data for the report from the temporary table.
    /// </summary>
    /// <returns>
    /// The <c>VendRequestProcureAuditTmp</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute('VendRequestProcureAuditTmp'), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public VendRequestProcureAuditTmp vendRequestProcureAuditTmp()
    {
        select * from vendRequestProcureAuditTmp;
        return vendRequestProcureAuditTmp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
