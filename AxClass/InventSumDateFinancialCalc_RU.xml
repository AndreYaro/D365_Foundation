<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSumDateFinancialCalc_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Class calculates InventSumDateFinancial data for the <c>InventTurnoverReport_RU</c> inquiry.
/// </summary>
public class InventSumDateFinancialCalc_RU extends RunBaseBatch implements IInventSumDateFinancialCalcStrategy_RU, BatchRetryable
{
    Map                                     financialDimCache;
    FromDate                                fromDate;
    ToDate                                  toDate;
    ParmId                                  parmId;
    TransDate                               baseDate;
    RecId                                   mainAccountDimAttrId;
    DimensionFocusRecId                     dimensionFocusId;

    IInventSumDateFinancialCalcStrategy_RU  calcStrategy;

    private const Version CurrentVersion = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTrans</Name>
				<Source><![CDATA[
    private void addTrans(ItemId                          _itemId,
                          InventTransType                 _inventTransType,
                          InventDirection                 _direction,
                          boolean                         _physical,
                          boolean                         _storno,
                          InventSumDateFinancialDimId_RU  _financialDimId,
                          Qty                             _qty,
                          CostAmount                      _costAmount,
                          Map                             _prevTransMap,
                          Map                             _newTransMap)
    {
        container                       prevTransKey = [_itemId, _financialDimId];
        InventSumDateFinancialTrans_RU  trans        = this.getPrevTrans(_itemId, _financialDimId, toDate, _prevTransMap, prevTransKey);

        if (this.isTransfer(_inventTransType))
        {
            if (_physical)
        {
                this.addTransPhysicalTransfer(trans, _direction, _storno, _qty, _costAmount);
            }
            else
            {
                this.addTransFinancialTransfer(trans, _direction, _storno, _qty, _costAmount);
            }
        }
        else
        {
            if (_physical)
            {
                this.addTransPhysicalOther(trans, _direction, _storno, _qty, _costAmount);
        }
        else
        {
                this.addTransFinancialOther(trans, _direction, _storno, _qty, _costAmount);
            }
        }

        _prevTransMap.insert(prevTransKey, trans);

        trans.TransDate = toDate;
        trans.ParmId    = parmId;

        _newTransMap.insert(trans.key(), trans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTransFinancialOther</Name>
				<Source><![CDATA[
    private void addTransFinancialOther(InventSumDateFinancialTrans_RU    _trans,
                                        InventDirection                   _direction,
                                        boolean                           _storno,
                                        Qty                               _qty,
                                        CostAmount                        _costAmount)
    {
        switch (_direction)
        {
            case InventDirection::Issue:
                if (_storno)
                {
                    _trans.QtyReceipt += _qty;
                    _trans.AmountReceipt += _costAmount;
                }
                else
                {
                    _trans.QtyIssue += _qty;
                    _trans.AmountIssue += _costAmount;
                }
                break;
            case InventDirection::Receipt:
                if (_storno)
                {
                    _trans.QtyIssue += _qty;
                    _trans.AmountIssue += _costAmount;
                }
                else
                {
                    _trans.QtyReceipt += _qty;
                    _trans.AmountReceipt += _costAmount;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTransFinancialTransfer</Name>
				<Source><![CDATA[
    private void addTransFinancialTransfer(InventSumDateFinancialTrans_RU    _trans,
                                           InventDirection                   _direction,
                                           boolean                           _storno,
                                           Qty                               _qty,
                                           CostAmount                        _costAmount)
    {
        switch (_direction)
        {
            case InventDirection::Issue:
                if (_storno)
                {
                    _trans.TransferQtyReceipt += _qty;
                    _trans.TransferAmountReceipt += _costAmount;
                }
                else
                {
                    _trans.TransferQtyIssue += _qty;
                    _trans.TransferAmountIssue += _costAmount;
                }
                break;
            case InventDirection::Receipt:
                if (_storno)
                {
                    _trans.TransferQtyIssue += _qty;
                    _trans.TransferAmountIssue += _costAmount;
                }
                else
                {
                    _trans.TransferQtyReceipt += _qty;
                    _trans.TransferAmountReceipt += _costAmount;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTransPhysicalOther</Name>
				<Source><![CDATA[
    private void addTransPhysicalOther(InventSumDateFinancialTrans_RU    _trans,
                                       InventDirection                   _direction,
                                       boolean                           _storno,
                                       Qty                               _qty,
                                       CostAmount                        _costAmount)
    {
        switch (_direction)
        {
            case InventDirection::Issue:
                if (_storno)
                {
                    _trans.PhysicalQtyReceipt += _qty;
                    _trans.PhysicalAmountReceipt += _costAmount;
                }
                else
                {
                    _trans.PhysicalQtyIssue += _qty;
                    _trans.PhysicalAmountIssue += _costAmount;
                }
                break;
            case InventDirection::Receipt:
                if (_storno)
                {
                    _trans.PhysicalQtyIssue += _qty;
                    _trans.PhysicalAmountIssue += _costAmount;
                }
                else
                {
                    _trans.PhysicalQtyReceipt += _qty;
                    _trans.PhysicalAmountReceipt += _costAmount;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTransPhysicalTransfer</Name>
				<Source><![CDATA[
    private void addTransPhysicalTransfer(InventSumDateFinancialTrans_RU    _trans,
                                          InventDirection                   _direction,
                                          boolean                           _storno,
                                          Qty                               _qty,
                                          CostAmount                        _costAmount)
    {
        switch (_direction)
        {
            case InventDirection::Issue:
                if (_storno)
                {
                    _trans.PhysicalTransferQtyReceipt += _qty;
                    _trans.PhysicalTransferAmountReceipt += _costAmount;
                }
                else
                {
                    _trans.PhysicalTransferQtyIssue += _qty;
                    _trans.PhysicalTransferAmountIssue += _costAmount;
                }
                break;
            case InventDirection::Receipt:
                if (_storno)
                {
                    _trans.PhysicalTransferQtyIssue += _qty;
                    _trans.PhysicalTransferAmountIssue += _costAmount;
                }
                else
                {
                    _trans.PhysicalTransferQtyReceipt += _qty;
                    _trans.PhysicalTransferAmountReceipt += _costAmount;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcItem</Name>
				<Source><![CDATA[
    private void calcItem(ItemId _itemId, FromDate _fromDate)
    {
        Map   prevTrans = new Map(Types::Container, Types::Record);
        Map   newTrans  = new Map(Types::Container, Types::Record);

        this.calcTransFinancial(_itemId, _fromDate, true,  prevTrans, newTrans);
        this.calcTransFinancial(_itemId, _fromDate, false, prevTrans, newTrans);

        this.calcTransPhysical(_itemId, _fromDate, StatusIssue::Sold, StatusReceipt::Purchased, true,  prevTrans, newTrans);
        this.calcTransPhysical(_itemId, _fromDate, StatusIssue::Sold, StatusReceipt::Purchased, false, prevTrans, newTrans);

        this.calcTransFinancialSettlements(_itemId, _fromDate, StatusIssue::Sold, StatusReceipt::Purchased, prevTrans, newTrans);
        this.calcTransPhysicalSettlements (_itemId, _fromDate, StatusIssue::Sold, StatusReceipt::Purchased, prevTrans, newTrans);

        this.calcTransPhysical(_itemId, _fromDate, StatusIssue::Deducted, StatusReceipt::Received, true,  prevTrans, newTrans);
        this.calcTransPhysical(_itemId, _fromDate, StatusIssue::Deducted, StatusReceipt::Received, false, prevTrans, newTrans);

        this.calcTransFinancialSettlements(_itemId, _fromDate, StatusIssue::Deducted, StatusReceipt::Received, prevTrans, newTrans);
        this.calcTransPhysicalSettlements (_itemId, _fromDate, StatusIssue::Deducted, StatusReceipt::Received, prevTrans, newTrans);

        this.flushItem(newTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcItems</Name>
				<Source><![CDATA[
    private void calcItems()
    {
        QueryRun    queryRun       = new QueryRun(calcStrategy.onCalcCreateItemsQuery(new Query(queryStr(InventTable))));
        FromDate    fromDateActual = this.getFromDateActual();

        this.progressInit(this.caption(), 0, #AVIUPDATE);

        while (queryRun.next())
        {
            InventTable inventTable = queryRun.get(tableNum(InventTable));
            setPrefix(inventTable.caption());
            progress.setText(inventTable.caption());

            ttsbegin;
            this.calcItem(inventTable.ItemId, fromDateActual);
            ttscommit;
            progress.incCount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTransFinancial</Name>
				<Source><![CDATA[
    private void calcTransFinancial(ItemId    _itemId,
                                    FromDate  _fromDate,
                                    boolean   _diffVouchers,
                                    Map       _prevTrans,
                                    Map       _newTrans)
    {
        InventTrans             inventTrans;
        InventTransPosting      postingFinancial;
        InventTransPosting      postingPhysical;
        InventDim               inventDim;
        InventTransOrigin       inventTransOrigin;
        InventTransDirection    inventTransDirection;

        while select Storno_RU, StornoPhysical_RU, PackingSlipReturned, sum(Qty), sum(CostAmountPosted), sum(CostAmountPhysical) from inventTrans
            group by Storno_RU, StornoPhysical_RU, PackingSlipReturned
            where inventTrans.ItemId                            ==  _itemId
               && inventTrans.DateStatus                        >=  _fromDate
               && inventTrans.DateStatus                        <=   toDate
               && ((inventTrans.StatusReceipt == StatusReceipt::Purchased && inventTrans.StatusIssue == StatusIssue::None)
               || (inventTrans.StatusReceipt == StatusReceipt::None && inventTrans.StatusIssue == StatusIssue::Sold))
               && ((!_diffVouchers && (inventTrans.Voucher == inventTrans.VoucherPhysical)) ||
                   ( _diffVouchers && (inventTrans.Voucher != inventTrans.VoucherPhysical)))
            join InventSiteId, InventLocationId, InventProfileId_RU from inventDim
                group by InventSiteId, InventLocationId, InventProfileId_RU
                where inventDim.InventDimId == inventTrans.InventDimId
            join DefaultDimension, LedgerDimension, IsPosted from postingPhysical
                group by DefaultDimension, LedgerDimension, IsPosted
                where postingPhysical.InventTransOrigin         == inventTrans.InventTransOrigin
                   && postingPhysical.TransDate                 == inventTrans.DatePhysical
                   && postingPhysical.Voucher                   == inventTrans.VoucherPhysical
                   && postingPhysical.InventTransPostingType    == InventTransPostingType::Physical
            join DefaultDimension, LedgerDimension, IsPosted from postingFinancial
                group by DefaultDimension, LedgerDimension, IsPosted
                where postingFinancial.InventTransOrigin        == inventTrans.InventTransOrigin
                   && postingFinancial.TransDate                == inventTrans.DateFinancial
                   && postingFinancial.Voucher                  == inventTrans.Voucher
                   && postingFinancial.InventTransPostingType   == InventTransPostingType::Financial
            join ReferenceCategory from inventTransOrigin
                group by ReferenceCategory
                where inventTransOrigin.RecId                   == inventTrans.InventTransOrigin
                   && inventTransOrigin.ReferenceCategory       != InventTransType::SummedUp
            join Direction from inventTransDirection
                group by Direction
                where ((inventTrans.Qty < 0
                   &&   inventTransDirection.Direction      == InventDirection::Issue)
                   ||  (inventTrans.Qty > 0
                   &&   inventTransDirection.Direction      == InventDirection::Receipt))
        {
            boolean addTransPhysical = false;
            boolean addTransPhysicalReverseAll = false;
            boolean addTransPhysicalReverseDirection = false;
            boolean addTransFinancial = false;
            boolean stornoPhysical = false;
            boolean stornoPhysicalAddTrans = false;

            switch (inventTransOrigin.ReferenceCategory)
            {
                case InventTransType::Purch:
                case InventTransType::ProdRelease_RU:
                case InventTransType::Production:
                    if (! inventTrans.PackingSlipReturned)
                    {
                        if (inventTransDirection.Direction == InventDirection::Receipt)
                        {
                            stornoPhysical = inventTrans.StornoPhysical_RU;
                        }
                        stornoPhysicalAddTrans     = stornoPhysical;
                        addTransPhysicalReverseAll = true;
                        addTransFinancial          = true;
                    }
                    break;
                case InventTransType::Sales:
                    if (! inventTrans.PackingSlipReturned)
                    {
                        if (inventTransDirection.Direction == InventDirection::Issue)
                        {
                            stornoPhysical = inventTrans.StornoPhysical_RU;
                        }
                        stornoPhysicalAddTrans     = stornoPhysical;
                        addTransPhysicalReverseAll = true;
                        addTransFinancial          = true;
                    }
                    break;
                case InventTransType::ProdLine:
                    stornoPhysical = inventTrans.StornoPhysical_RU;
                    if (inventTrans.PackingSlipReturned)
                    {
                        addTransPhysical                 = ! inventTrans.StornoPhysical_RU && ! _diffVouchers;
                        addTransPhysicalReverseDirection = inventTrans.StornoPhysical_RU;
                        stornoPhysicalAddTrans           =  false;
                    }
                    else
                    {
                        addTransPhysicalReverseAll = true;
                        addTransFinancial          = true;
                        stornoPhysicalAddTrans     = stornoPhysical;
                    }
                    break;
                default:
                    addTransFinancial = ! inventTrans.PackingSlipReturned;
            }
            if (addTransPhysical)
            {
                this.addTrans(_itemId,
                              inventTransOrigin.ReferenceCategory,
                              inventTransDirection.Direction,
                              true,
                              stornoPhysicalAddTrans,
                              this.getDimId(inventDim, postingPhysical.DefaultDimension, postingPhysical.LedgerDimension, stornoPhysical, postingPhysical.IsPosted),
                              inventTrans.Qty,
                              inventTrans.CostAmountPhysical,
                              _prevTrans,
                              _newTrans);
            }
            if (addTransPhysicalReverseAll)
            {
                this.addTrans(_itemId,
                              inventTransOrigin.ReferenceCategory,
                              inventTransDirection.Direction == InventDirection::Issue ? InventDirection::Receipt : InventDirection::Issue,
                              true,
                              stornoPhysicalAddTrans,
                              this.getDimId(inventDim, postingPhysical.DefaultDimension, postingPhysical.LedgerDimension, stornoPhysical, postingPhysical.IsPosted),
                              -inventTrans.Qty,
                              -inventTrans.CostAmountPhysical,
                              _prevTrans,
                              _newTrans);
            }
            if (addTransPhysicalReverseDirection)
            {
                this.addTrans(_itemId,
                              inventTransOrigin.ReferenceCategory,
                              inventTransDirection.Direction == InventDirection::Issue ? InventDirection::Receipt : InventDirection::Issue,
                              true,
                              stornoPhysicalAddTrans,
                              this.getDimId(inventDim, postingPhysical.DefaultDimension, postingPhysical.LedgerDimension, stornoPhysical, postingPhysical.IsPosted),
                              inventTrans.Qty,
                              inventTrans.CostAmountPhysical,
                              _prevTrans,
                              _newTrans);
            }
            if (addTransFinancial)
            {
                this.addTrans(_itemId,
                              inventTransOrigin.ReferenceCategory,
                              inventTransDirection.Direction,
                              false,
                              inventTrans.Storno_RU,
                              this.getDimId(inventDim, postingFinancial.DefaultDimension, postingFinancial.LedgerDimension, inventTrans.Storno_RU, postingFinancial.IsPosted),
                              inventTrans.Qty,
                              inventTrans.CostAmountPosted,
                              _prevTrans,
                              _newTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTransFinancialSettlements</Name>
				<Source><![CDATA[
    private void calcTransFinancialSettlements(ItemId        _itemId,
                                               FromDate      _fromDate,
                                               StatusIssue   _statusIssue,
                                               StatusReceipt _statusReceipt,
                                               Map           _prevTrans,
                                               Map           _newTrans)
    {
        InventTrans             inventTrans;
        InventDim               inventDim;
        InventSettlement        settlement;
        InventTransOrigin       inventTransOrigin;
        InventTransDirection    inventTransDirection;

        boolean                 storno;
        boolean                 reverseDirection;
        real                    transSign;

        void loop(boolean _positive, boolean _includeSummedUp)
        {
            int positive = _positive ? 1 : -1;

            while select DefaultDimension, BalanceSheetLedgerDimension, Posted, sum(CostAmountAdjustment) from settlement
                group by DefaultDimension, BalanceSheetLedgerDimension, Posted
                where settlement.ItemId                 == _itemId
                   && settlement.Cancelled              ==  NoYes::No
                   && settlement.InventTransCurrency_RU == InventTransCurrency_RU::PrimaryCur
                   && settlement.TransDate              >= _fromDate
                   && settlement.TransDate              <=  toDate
                   && settlement.SettleModel            != InventSettleModel::PhysicalValue
                   && positive * settlement.CostAmountAdjustment  > 0
                   && (!_includeSummedUp || settlement.BalanceSheetLedgerDimension != 0)
                join Storno_RU, StornoPhysical_RU from inventTrans
                    group by Storno_RU, StornoPhysical_RU
                    where inventTrans.RecId == settlement.TransRecId
                       && ((inventTrans.StatusReceipt == _statusReceipt && inventTrans.StatusIssue == StatusIssue::None)
                       || (inventTrans.StatusReceipt == StatusReceipt::None && inventTrans.StatusIssue == _statusIssue))
                       && inventTrans.PackingSlipReturned == NoYes::No
                join InventSiteId, InventLocationId, InventProfileId_RU from inventDim
                    group by InventSiteId, InventLocationId, InventProfileId_RU
                    where inventDim.InventDimId == inventTrans.InventDimId
                join ReferenceCategory from inventTransOrigin
                    group by ReferenceCategory
                    where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                       && (   ( _includeSummedUp && inventTransOrigin.ReferenceCategory == InventTransType::SummedUp)
                           || (!_includeSummedUp && inventTransOrigin.ReferenceCategory != InventTransType::SummedUp))
                join Direction from inventTransDirection
                    group by Direction
                    where ((inventTrans.Qty < 0
                       &&   inventTransDirection.Direction      == InventDirection::Issue)
                       ||  (inventTrans.Qty > 0
                       &&   inventTransDirection.Direction      == InventDirection::Receipt))
            {
                storno           = this.isStornoAdj(inventTransOrigin.ReferenceCategory, inventTransDirection.Direction, inventTrans.Storno_RU, settlement);
                transSign        = inventTransDirection.Direction == InventDirection::Issue ? -1 : 1;
                reverseDirection = (! storno && (sign(settlement.CostAmountAdjustment) != transSign)) ||
                                   (  storno && (sign(settlement.CostAmountAdjustment) == transSign));

                this.addTrans(_itemId,
                               inventTransOrigin.ReferenceCategory,
                               reverseDirection ? (inventTransDirection.Direction == InventDirection::Issue ? InventDirection::Receipt : InventDirection::Issue) : inventTransDirection.Direction,
                               false,
                               false,
                               this.getDimId(inventDim, settlement.DefaultDimension, settlement.BalanceSheetLedgerDimension, storno, settlement.Posted),
                               0,
                               settlement.CostAmountAdjustment,
                              _prevTrans,
                              _newTrans);
            }
        }

        loop(true, true);
        loop(true, false);
        loop(false, true);
        loop(false, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTransPhysical</Name>
				<Source><![CDATA[
    private void calcTransPhysical(ItemId        _itemId,
                                   FromDate      _fromDate,
                                   StatusIssue   _statusIssue,
                                   StatusReceipt _statusReceipt,
                                   boolean       _diffVouchers,
                                   Map           _prevTrans,
                                   Map           _newTrans)
    {
        InventTrans             inventTrans;
        InventTransPosting      postingPhysical;
        InventDim               inventDim;
        InventTransOrigin       inventTransOrigin;
        InventTransDirection    inventTransDirection;
        InventSettlement        settlementPhysical;

        while select Storno_RU, StornoPhysical_RU, PackingSlipReturned, sum(Qty), sum(CostAmountPhysical) from inventTrans
            group by Storno_RU, StornoPhysical_RU, PackingSlipReturned
            where inventTrans.ItemId                        == _itemId
               && inventTrans.DatePhysical                  >= _fromDate
               && inventTrans.DatePhysical                  <=  toDate
               && (inventTrans.StatusIssue                  == _statusIssue 
               || inventTrans.StatusReceipt                 == _statusReceipt)
               && ((!_diffVouchers && (inventTrans.Voucher  == inventTrans.VoucherPhysical)) ||
                   ( _diffVouchers && (inventTrans.Voucher  != inventTrans.VoucherPhysical)))
            join InventSiteId, InventLocationId, InventProfileId_RU from inventDim
                group by InventSiteId, InventLocationId, InventProfileId_RU
                where inventDim.InventDimId == inventTrans.InventDimId
            join DefaultDimension, LedgerDimension, IsPosted from postingPhysical
                group by DefaultDimension, LedgerDimension, IsPosted
                where postingPhysical.InventTransOrigin      == inventTrans.InventTransOrigin
                   && postingPhysical.TransDate              == inventTrans.DatePhysical
                   && postingPhysical.Voucher                == inventTrans.VoucherPhysical
                   && postingPhysical.InventTransPostingType == InventTransPostingType::Physical
            join ReferenceCategory from inventTransOrigin
                group by ReferenceCategory
                where inventTransOrigin.RecId                  == inventTrans.InventTransOrigin
                   && (inventTransOrigin.ReferenceCategory     == InventTransType::Purch ||
                       inventTransOrigin.ReferenceCategory     == InventTransType::Sales ||
                       inventTransOrigin.ReferenceCategory     == InventTransType::ProdLine ||
                       inventTransOrigin.ReferenceCategory     == InventTransType::Production ||
                       inventTransOrigin.ReferenceCategory     == InventTransType::ProdRelease_RU)
            join Direction from inventTransDirection
                group by Direction
                where ((inventTrans.Qty < 0
                   &&   inventTransDirection.Direction      == InventDirection::Issue)
                   ||  (inventTrans.Qty > 0
                   &&   inventTransDirection.Direction      == InventDirection::Receipt))
            outer join sum(CostAmountAdjustment) from settlementPhysical
                where settlementPhysical.TransRecId             == inventTrans.RecId
                   && settlementPhysical.Cancelled              ==  NoYes::No
                   && settlementPhysical.InventTransCurrency_RU == InventTransCurrency_RU::PrimaryCur
                   && settlementPhysical.SettleModel            == InventSettleModel::PhysicalValue
        {
            CostAmountPhysical costAmountPostedPhysical = inventTrans.CostAmountPhysical - settlementPhysical.CostAmountAdjustment;
            boolean storno = false;
            boolean addTrans = false;

            switch (inventTransOrigin.ReferenceCategory)
            {
                case InventTransType::Purch:
                case InventTransType::ProdRelease_RU:
                case InventTransType::Production:
                    if (inventTransDirection.Direction != InventDirection::Receipt)
                    {
                        storno = inventTrans.StornoPhysical_RU;
                    }
                    addTrans = true;
                    break;
                case InventTransType::Sales:
                    if (inventTransDirection.Direction != InventDirection::Issue)
                    {
                        storno = inventTrans.StornoPhysical_RU;
                    }
                    addTrans = true;
                    break;
                case InventTransType::ProdLine:
                    addTrans = ! inventTrans.PackingSlipReturned || (inventTrans.PackingSlipReturned && _diffVouchers && !inventTrans.StornoPhysical_RU);
                    break;
            }

            if (addTrans)
            {
                this.addTrans(_itemId,
                               inventTransOrigin.ReferenceCategory,
                               inventTransDirection.Direction,
                               true,
                               storno,
                               this.getDimId(inventDim, postingPhysical.DefaultDimension, postingPhysical.LedgerDimension, storno, postingPhysical.IsPosted),
                               inventTrans.Qty,
                               costAmountPostedPhysical,
                              _prevTrans,
                              _newTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTransPhysicalSettlements</Name>
				<Source><![CDATA[
    private void calcTransPhysicalSettlements(ItemId        _itemId,
                                              FromDate      _fromDate,
                                              StatusIssue   _statusIssue,
                                              StatusReceipt _statusReceipt,
                                              Map           _prevTrans,
                                              Map           _newTrans)
    {
        InventTrans             inventTrans;
        InventDim               inventDim;
        InventSettlement        settlement;
        InventTransOrigin       inventTransOrigin;
        InventTransDirection    inventTransDirection;

        boolean                 storno;
        boolean                 reverseDirection;
        real                    transSign;

        void loop(boolean _positive, boolean _includeSummedUp)
        {
            int positive = _positive ? 1 : -1;

            while select DefaultDimension, BalanceSheetLedgerDimension, Posted, sum(CostAmountAdjustment) from settlement
                group by DefaultDimension, BalanceSheetLedgerDimension, Posted
                where settlement.ItemId                 == _itemId
                   && settlement.Cancelled              == NoYes::No
                   && settlement.InventTransCurrency_RU == InventTransCurrency_RU::PrimaryCur
                   && settlement.TransDate              >= _fromDate
                   && settlement.TransDate              <=  toDate
                   && settlement.SettleModel            == InventSettleModel::PhysicalValue
                       && positive * settlement.CostAmountAdjustment  > 0
                join StornoPhysical_RU from inventTrans
                    group by StornoPhysical_RU
                    where inventTrans.RecId == settlement.TransRecId
                       && (inventTrans.StatusIssue == _statusIssue || inventTrans.StatusReceipt == _statusReceipt)
                       && inventTrans.PackingSlipReturned == NoYes::No
                join InventSiteId, InventLocationId, InventProfileId_RU from inventDim
                    group by InventSiteId, InventLocationId, InventProfileId_RU
                    where inventDim.InventDimId == inventTrans.InventDimId
                join ReferenceCategory from inventTransOrigin
                    group by ReferenceCategory
                    where inventTransOrigin.RecId               == inventTrans.InventTransOrigin
                       && ((_includeSummedUp && inventTransOrigin.ReferenceCategory == InventTransType::SummedUp)
                           || (!_includeSummedUp &&
                                 (inventTransOrigin.ReferenceCategory == InventTransType::Purch           ||
                                  inventTransOrigin.ReferenceCategory == InventTransType::Sales           ||
                                  inventTransOrigin.ReferenceCategory == InventTransType::ProdLine        ||
                                  inventTransOrigin.ReferenceCategory == InventTransType::ProdRelease_RU  ||
                                  inventTransOrigin.ReferenceCategory == InventTransType::Production)))
                join Direction from inventTransDirection
                    group by Direction
                    where ((inventTrans.Qty < 0
                       &&   inventTransDirection.Direction      == InventDirection::Issue)
                       ||  (inventTrans.Qty > 0
                       &&   inventTransDirection.Direction      == InventDirection::Receipt))
            {
                storno           = this.isStornoAdj(inventTransOrigin.ReferenceCategory, inventTransDirection.Direction, inventTrans.StornoPhysical_RU, settlement);
                transSign        = inventTransDirection.Direction == InventDirection::Issue ? -1 : 1;
                reverseDirection = (! storno && (sign(settlement.CostAmountAdjustment) != transSign)) ||
                                   (  storno && (sign(settlement.CostAmountAdjustment) == transSign));

                this.addTrans(_itemId,
                               inventTransOrigin.ReferenceCategory,
                               reverseDirection ? (inventTransDirection.Direction == InventDirection::Issue ? InventDirection::Receipt : InventDirection::Issue) : inventTransDirection.Direction,
                               true,
                               false,
                               this.getDimId(inventDim, settlement.DefaultDimension, settlement.BalanceSheetLedgerDimension, storno, settlement.Posted),
                               0,
                               settlement.CostAmountAdjustment,
                              _prevTrans,
                              _newTrans);
            }
        }

        loop(true, true);
        loop(true, false);
        loop(false, true);
        loop(false, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>flushItem</Name>
				<Source><![CDATA[
    private void flushItem(Map _newTrans)
    {
        RecordInsertList                insertList  = new RecordInsertList(tableNum(InventSumDateFinancialTrans_RU));
        MapEnumerator                   e           = _newTrans.getEnumerator();

        while (e.moveNext())
        {
            InventSumDateFinancialTrans_RU trans = e.currentValue();
            insertList.add(trans);
        }
        insertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBaseDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns base date.
    /// </summary>
    /// <returns>
    ///     Base date.
    /// </returns>
    public TransDate getBaseDate()
    {
        return baseDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimId</Name>
				<Source><![CDATA[
    private InventSumDateFinancialDimId_RU getDimId(InventDim               _inventDim,
                                                    DimensionDefault        _defaultDimension,
                                                    LedgerDimensionAccount  _ledgerDimension,
                                                    boolean                 _storno,
                                                    boolean                 _isPosted)
    {
        MainAccountNum                    account = _isPosted ? LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(_ledgerDimension) : '';
        DimensionHierarchyLevel           dimensionHierarchyLevel;
        DimensionAttributeLevelValueView  dimAttrLevelValueView;
        DefaultDimensionView              defaultDimensionView;
        RecId                             mainAccountDimAttr = DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);
        InventSumDateFinancialDim_RU      financialDim;

        container   key = [_inventDim.InventSiteId,
                           _inventDim.InventLocationId,
                           _inventDim.InventProfileId_RU,
                           _defaultDimension,
                            account,
                           _storno];

        if (! financialDimCache)
        {
            financialDimCache = new Map(Types::Container, Types::String);
        }

        if (!financialDimCache.exists(key))
        {
            financialDim.clear();
            financialDim.InventSiteId      = _inventDim.InventSiteId;
            financialDim.InventLocationId  = _inventDim.InventLocationId;
            financialDim.InventProfileId   = _inventDim.InventProfileId_RU;
            financialDim.InventProfileType =  InventProfile_RU::find(_inventDim.InventProfileId_RU).InventProfileType;

            financialDim.DefaultDimension  = _defaultDimension;
            financialDim.Storno            = _storno;
            financialDim.Account           = account;

            if (account)
            {
                while select DimensionAttribute, DisplayValue from dimAttrLevelValueView
                    where dimAttrLevelValueView.ValueCombinationRecId == _ledgerDimension
                       && dimAttrLevelValueView.DimensionAttribute    != mainAccountDimAttrId
                {
                    dimensionHierarchyLevel = DimensionHierarchyLevel::findByDimensionHierarchyAndDimAttribute(dimensionFocusId, dimAttrLevelValueView.DimensionAttribute);
                    if (dimensionHierarchyLevel)
                    {
                        financialDim.Dimension[dimensionHierarchyLevel.Level] = dimAttrLevelValueView.DisplayValue;
                    }
                }
            }
            else
            if (_defaultDimension)
            {
                while select DimensionAttributeId, DisplayValue from defaultDimensionView
                    where defaultDimensionView.DefaultDimension == _defaultDimension
                {
                    dimensionHierarchyLevel = DimensionHierarchyLevel::findByDimensionHierarchyAndDimAttribute(dimensionFocusId, defaultDimensionView.DimensionAttributeId);
                    if (dimensionHierarchyLevel)
                    {
                        financialDim.Dimension[dimensionHierarchyLevel.Level] = defaultDimensionView.DisplayValue;
                    }
                }
            }

            financialDim = InventSumDateFinancialDim_RU::findOrCreate(financialDim);

            financialDimCache.insert(key, financialDim.FinancialDimId);
        }

        return financialDimCache.lookup(key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDateActual</Name>
				<Source><![CDATA[
    private FromDate getFromDateActual()
    {
        FromDate fromDateActual;

        baseDate = this.getInventClosingDate(toDate);

        if (baseDate)
        {
            fromDateActual = baseDate + 1;
        }
        else
        {
            fromDateActual = fromDate;
        }

        if (fromDate > fromDateActual)
        {
            fromDateActual = fromDate;
        }

        return fromDateActual;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventClosingDate</Name>
				<Source><![CDATA[
    private TransDate getInventClosingDate(TransDate _transDate)
    {
        InventClosing inventClosing;

        select firstonly TransDate from inventClosing
            order by TransDate desc
            where inventClosing.Active                                == NoYes::Yes
               && inventClosing.AdjustmentType                        == InventAdjustmentType::Closing
               && inventClosing.Cancellation                          == NoYes::No
               && inventClosing.InventCostStatus                      == InventCostStatus::Ended
               && inventClosing.InventTransCurrency_RU                == InventTransCurrency_RU::PrimaryCur
               && inventClosing.TransDate                             <= _transDate
               && inventClosing.InventSumDateFinancialCalcFinished_RU == NoYes::Yes;

        return inventClosing.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrevTrans</Name>
				<Source><![CDATA[
    private InventSumDateFinancialTrans_RU getPrevTrans(ItemId                          _itemId,
                                                        InventSumDateFinancialDimId_RU  _financialDimId,
                                                        TransDate                       _transDate,
                                                        Map                             _prevTransMap,
                                                        container                       _prevTransKey)
    {
        InventSumDateFinancialTrans_RU prevTrans;

        if (! _prevTransMap.exists(_prevTransKey))
        {
             prevTrans = InventSumDateFinancialTrans_RU::findPrev(_itemId,
                                                                  _financialDimId,
                                                                   parmId,
                                                                  _transDate);
            if (! prevTrans)
            {
                prevTrans.ItemId          = _itemId;
                prevTrans.FinancialDimId  = _financialDimId;
                prevTrans.ParmId          = parmId;
                prevTrans.insert();
            }

            _prevTransMap.insert(_prevTransKey, prevTrans);
        }

        prevTrans = _prevTransMap.lookup(_prevTransKey);

        return prevTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStornoAdj</Name>
				<Source><![CDATA[
    private boolean isStornoAdj(InventTransType  _inventTransType,
                                InventDirection  _direction,
                                boolean          _storno,
                                InventSettlement _settlement)
    {
        real       adjSign   = sign(_settlement.CostAmountAdjustment);
        boolean    isIssue   = _direction == InventDirection::Issue;
        boolean    isReceipt = _direction == InventDirection::Receipt;

        if (InventParameters::find().StornoAdjPosting)
        {
            switch (_inventTransType)
            {
                case InventTransType::Purch:
                case InventTransType::ProdRelease_RU:
                case InventTransType::Production:
                    if ((isIssue   &&  _storno && adjSign == -1) ||
                        (isIssue   && !_storno && adjSign ==  1) ||
                        (isReceipt &&             adjSign == -1))
                    {
                        return true;
                    }
                    break;
                case InventTransType::Sales:
                    if ((isReceipt &&  _storno && adjSign ==  1) ||
                        (isReceipt && !_storno && adjSign == -1) ||
                        (isIssue               && adjSign ==  1))
                    {
                        return true;
                    }
                    break;
                case InventTransType::ProdLine:
                    if ((isReceipt && !_storno && adjSign == -1) ||
                        (isIssue   && !_storno && adjSign ==  1))
                    {
                        return true;
                    }
                    break;
                default:
                    if ((isReceipt &&  _storno && adjSign ==  1) ||
                        (isIssue   &&  _storno && adjSign == -1) ||
                        (isReceipt && !_storno && adjSign == -1) ||
                        (isIssue   && !_storno && adjSign ==  1))
                    {
                        return true;
                    }
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransfer</Name>
				<Source><![CDATA[
    private boolean isTransfer(InventTransType _inventTransType)
    {
        switch (_inventTransType)
        {
            case InventTransType::InventTransfer:
            case InventTransType::Blocking:
            case InventTransType::WMSTransport:
            case InventTransType::QuarantineOrder:
            case InventTransType::TransferOrderShip:
            case InventTransType::TransferOrderReceive:
            case InventTransType::TransferOrderScrap:
            case InventTransType::QualityOrder:
            case InventTransType::KanbanJobTransferIssue:
            case InventTransType::KanbanJobTransferReceipt:
                return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        calcStrategy         = this;
        mainAccountDimAttrId = DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);
        dimensionFocusId     = InventParameters::find().InventSumDateFinancialDimensionFocus_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onCalcCreateItemsQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Modifies items query.
    /// </summary>
    /// <param name="_query">
    ///     Original items query.
    /// </param>
    /// <returns>
    ///     Modified query.
    /// </returns>
    public Query onCalcCreateItemsQuery(Query _query)
    {
        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onCalcEnd</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Runs post-calculation events.
    /// </summary>
    /// <param name="_calc">
    ///     <c>InventSumDateFinancialCalc_RU</c> class instance.
    /// </param>
    public void onCalcEnd(InventSumDateFinancialCalc_RU _calc)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onCalcStart</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Runs pre-calculation events.
    /// </summary>
    /// <param name="_calc">
    ///     <c>InventSumDateFinancialCalc_RU</c> class instance.
    /// </param>
    public void onCalcStart(InventSumDateFinancialCalc_RU _calc)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, toDate, parmId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcStrategy</Name>
				<Source><![CDATA[
    public IInventSumDateFinancialCalcStrategy_RU parmCalcStrategy(IInventSumDateFinancialCalcStrategy_RU _calcStrategy = calcStrategy)
    {
        calcStrategy = _calcStrategy;
        return calcStrategy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmId</Name>
				<Source><![CDATA[
    public ParmId parmParmId(ParmId _parmId = parmId)
    {
        parmId = _parmId;
        return parmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        setPrefix(this.caption());
        InventTransDirection::initAllRecords();

        ttsbegin;
        calcStrategy.onCalcStart(this);
        ttscommit;

        this.calcItems();

        ttsbegin;
        calcStrategy.onCalcEnd(this);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case CurrentVersion:
                [version, toDate, parmId] = packedClass;
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Deletes all previosly calculated InventSumDateFinancial data.
    /// </summary>
    /// <remarks>
    ///     Called when invent turnover dimension set is changed.
    /// </remarks>
    static void deleteAllData()
    {
        InventSumDateFinancialTrans_RU  inventSumDateFinancialTrans;
        InventSumDateFinancialDim_RU    inventSumDateFinancialDim;

        ttsbegin;

        delete_from inventSumDateFinancialTrans;

        inventSumDateFinancialDim.skipDeleteMethod(true);
        delete_from inventSumDateFinancialDim;

        // delete InventTurnoverReport_RU report settings since aviable dimensions fields set has changed
        xSysLastValue::deleteAllUsers(InventTurnoverReport_RU::construct());
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@GLS114023";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates new instance of the <c>InventSumDateFinancialCalc_RU</c> class and initializes it.
    /// </summary>
    /// <param name="_parmId">
    ///     Calculation Id.
    /// </param>
    /// <param name="_fromDate">
    ///     Start date.
    /// </param>
    /// <param name="_toDate">
    ///     End date.
    /// </param>
    /// <param name="_calcStrategy">
    ///     The <c>IInventSumDateFinancialCalcStrategy_RU</c> interface instance.
    /// </param>
    /// <returns>
    ///     New instance of the <c>InventSumDateFinancialCalc_RU</c> class.
    /// </returns>
    public static InventSumDateFinancialCalc_RU newParameters(
        ParmId                                  _parmId,
        FromDate                                _fromDate,
        ToDate                                  _toDate,
        IInventSumDateFinancialCalcStrategy_RU  _calcStrategy)
    {
        InventSumDateFinancialCalc_RU calc = new InventSumDateFinancialCalc_RU();

        calc.parmParmId(_parmId);
        calc.parmFromDate(_fromDate);
        calc.parmToDate(_toDate);
        calc.parmCalcStrategy(_calcStrategy);

        return calc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>