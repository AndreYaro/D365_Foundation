<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceControllerFileURLsCollectionIdProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>CustInvoiceControllerFileURLsCollectionIdProvider</c> class provides the
///     file URL collection ID for grouping the printing to file of customer sales invoices, free text invoices, 
///     and debit or credit notes from print management into 
///     a single <c>.zip</c> file for output to the client.
/// </summary>
/// <remarks>
///     This is necessary because the platform limits the number of new Tabs that can be spawned 
///     for individual print to file output on the web client.
/// </remarks>
internal final class CustInvoiceControllerFileURLsCollectionIdProvider
{
    internal static const str DefaultZipFileName = "@AccountsReceivable:PrintedToFileNameLabel";

    private str fileURLsCollectionId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        fileURLsCollectionId = guid2Str(newGuid());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileURLsCollectionId</Name>
				<Source><![CDATA[
    internal str getFileURLsCollectionId()
    {
        return fileURLsCollectionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static CustInvoiceControllerFileURLsCollectionIdProvider construct()
    {
        return new CustInvoiceControllerFileURLsCollectionIdProvider();
    }

]]></Source>
			</Method>
			<Method>
				<Name>downloadAndCompressFilesFromCollection</Name>
				<Source><![CDATA[
    internal static void downloadAndCompressFilesFromCollection(
        Args _args, 
        str _zipFileName = CustInvoiceControllerFileURLsCollectionIdProvider::DefaultZipFileName)
    {
        if (_args.parmObject() is CustInvoiceControllerFileURLsCollectionIdProvider)
        {
            // Output the collection
            CustInvoiceControllerFileURLsCollectionIdProvider fileURLsCollectionIdProvider = _args.parmObject() as CustInvoiceControllerFileURLsCollectionIdProvider;

            if (CustInvoiceControllerFileURLsCollectionIdProvider::existFileURLsCollectionIdInFileCache(fileURLsCollectionIdProvider.getFileURLsCollectionId()))
            {
                SrsReportRunUtil::downloadAndCompressFilesFromCollection(fileURLsCollectionIdProvider.getFileURLsCollectionId(), _zipfileName);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existFileURLsCollectionIdInFileCache</Name>
				<Source><![CDATA[
    private static boolean existFileURLsCollectionIdInFileCache(str _fileURLsCollectionId)
    {
        SysGlobalObjectCache globalCache = classfactory.globalObjectCache();
        container collectionIdContainer = [guidFromString(_fileURLsCollectionId)];
        container cacheValueContainer = globalCache.find(classStr(Dynamics.AX.Application.File), collectionIdContainer);
        
        if (!cacheValueContainer)
        {
            return false;
        }

        container fileCollectionContainer = conPeek(cacheValueContainer, 1);

        if (fileCollectionContainer && conLen(fileCollectionContainer) > 1)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>