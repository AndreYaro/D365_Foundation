<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25RegCalc_DebtCreditMovementMult</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class RTax25RegCalc_DebtCreditMovementMult extends RTax25RegCalc_DebtMovementMultiply implements BatchRetryable
{
    AmountMST       totalBadDebt,
                    totalBadDebtVAT,
                    totalBadDebtAmountDiff,
                    totalBadDebtAmountDiffVAT,
                    totalWriteOffAmount,
                    totalWriteOffAmountVAT,
                    totalBadDebtRemain,
                    totalBadDebtRemainVAT;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>debtType</Name>
				<Source><![CDATA[
    protected RTax25DebtType debtType()
    {
        return RTax25DebtType::Credit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRegisterFooter</Name>
				<Source><![CDATA[
    protected void insertRegisterFooter()
    {
        container totals = ['', dateNull(), '', dateNull(), ''];

        totals += totalBadDebt;
        totals += totalBadDebtVAT;
        totals += totalBadDebtAmountDiff;
        totals += totalBadDebtAmountDiffVAT;

        totals += [dateNull(), ''];

        totals += totalWriteOffAmount;
        totals += totalWriteOffAmountVAT;
        totals += totalBadDebtRemain;
        totals += totalBadDebtRemainVAT;

        regQuery.addFooterRecord(0,
                                 totals,
                                 0,
                                 strfmt("@SYS7446"),
                                 startCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processFoundCustVendTrans</Name>
				<Source><![CDATA[
    #define.ConPos2(2)
    #define.ConPos5(5)
    #define.ConPos6(6)
    #define.ConPos7(7)
    #define.ConPos8(8)
    #define.ConPos9(9)
    protected void processFoundCustVendTrans(CustVendTrans    _custVendTrans,
                                             DueDate          _dueDate)
    {
        CustVendCalcSettledAmounts_RU   custVendCalcSettledAmounts;
        Map                             mapTransAmounts, mapMapSettledAmounts, mapSettledAmounts;
        MapIterator                     it, it2;
        BookStructSmallVATAmounts_RU    transAmounts, settledAmounts, diffAmounts;

        Num                     num;
        Description             description = '';

        container               mainCon, transCon = connull();

        AmountMST               badDebt,
                                badDebtTaxAmount,
                                balance = 0.0;

        RefRecId                profitTableRecId = 0;
        RefTableId              refTableId = 0;
        RefRecId                refRecId = 0;

        boolean                 firstLine = true;
        TransDate               settlementDate = dateNull();
        ;

        // Get settlements
        custVendCalcSettledAmounts = CustVendCalcSettledAmounts_RU::construct(_custVendTrans);
        custVendCalcSettledAmounts.calcSettledAmounts();
        mapMapSettledAmounts = custVendCalcSettledAmounts.mapMapSettledAmountsMST();
        mapTransAmounts      = custVendCalcSettledAmounts.mapTransAmountsMST();

        mainCon = [conpeek(this.transDescription(_custVendTrans), 1),
                   _custVendTrans.TransDate,
                   _custVendTrans.Txt,
                   _dueDate,
                   this.accountsOrder(_custVendTrans)];

        it = new MapIterator(mapTransAmounts);

        transAmounts = new BookStructSmallVATAmounts_RU();

        while (it.more())
        {
            transAmounts.addAmounts2(BookStructSmallVATAmounts_RU::create(it.value()));
            it.next();
        }

        // Calc bad debt remain
        badDebt          = -transAmounts.amountInclVAT();
        badDebtTaxAmount = -transAmounts.taxAmountVAT();

        settledAmounts = new BookStructSmallVATAmounts_RU();

        it = new MapIterator(mapMapSettledAmounts);

        while (it.more() && settlementDate < dateFrom)
        {
            settlementDate = conpeek(it.key(), 1);

            if (settlementDate < dateFrom)
            {
                mapSettledAmounts = it.value();

                it2 = new MapIterator(mapSettledAmounts);

                while (it2.more() )
                {
                    settledAmounts = BookStructSmallVATAmounts_RU::create(it2.value());
                    it2.next();
                }
            }
            it.next();
        }

        if (settledAmounts.amountInclVAT() == transAmounts.amountInclVAT())
            return;

        badDebt          += settledAmounts.amountInclVAT();
        badDebtTaxAmount += settledAmounts.taxAmountVAT();

        mainCon += [badDebt,
                    badDebtTaxAmount,
                    0.0,    // amount diff
                    0.0];   // amount diff invoice date

        it.begin();

        if (it2)
        {
            it2.begin();
        }

        firstLine = true;

        while (it.more() && settlementDate <= dateTo)
        {
            settlementDate = conpeek(it.key(), 1);

            if (settlementDate >= dateFrom && settlementDate <= dateTo)
            {
                // Calc settled amounts -->
                settledAmounts = new BookStructSmallVATAmounts_RU();
                mapSettledAmounts = it.value();
                it2 = new MapIterator(mapSettledAmounts);
                while (it2.more() )
                {
                    settledAmounts.addAmounts2(BookStructSmallVATAmounts_RU::create(it2.value()));
                    it2.next();
                }
                // Calc settled amounts <--

                // Create register line -->
                if (! firstLine)
                {
                    regQuery.addBodyRecord(profitTableRecId ,
                                   mainCon + transCon,
                                   refTableId,
                                   refRecId,
                                   description,
                                   0,
                                   balance);
                    startCount++;
                    // clear debt amount for next iteration
                    mainCon      = conpoke(mainCon, #ConPos6, 0.0);
                    mainCon      = conpoke(mainCon, #ConPos7, 0.0);
                }
                else
                {
                    firstLine = false;
                }

                profitTableRecId  = 0;
                balance  = 0.0;
                this.initCurrentSettlement(_custVendTrans, conpeek(it.key(), #ConPos2));

                // Amount & exch rate difference
                if (currentCustVendSettlement.ExchAdjustment)
                {
                    diffAmounts = new BookStructSmallVATAmounts_RU();

                    profitTableRecId = this.calcExchRateDifference(_custVendTrans, currentOffsetCustVendTrans, settlementDate, diffAmounts);

                    if ( ! diffAmounts.amountInclVAT())
                    {
                        profitTableRecId = this.calcAmountDifference(_custVendTrans, currentOffsetCustVendTrans, settlementDate, diffAmounts);
                    }

                    balance = abs(diffAmounts.amountInclVAT());
                }

                mainCon = conpoke(mainCon, #ConPos8, diffAmounts ? diffAmounts.amountInclVAT() : 0.0);
                mainCon = conpoke(mainCon, #ConPos9, diffAmounts ? diffAmounts.taxAmountVAT() : 0.0);

                // debt amortisation
                if (currentOffsetCustVendTrans.TransType == LedgerTransType::RTax25_BadDebtDebitAmortisation)
                {
                    profitTableRecId = this.getProfitTableId(_custVendTrans);
                    balance  = -settledAmounts.amountInclVAT();
                }

                refTableId = currentCustVendSettlement.TableId;
                refRecId   = currentCustVendSettlement.RecId;

                [num, description] = this.transDescription(currentOffsetCustVendTrans);
                transCon = [currentOffsetCustVendTrans.TransDate,
                            strfmt("@GLS111165", description, num, currentOffsetCustVendTrans.Txt),
                            -settledAmounts.amountInclVAT(),
                            -settledAmounts.taxAmountVAT(),
                            0.0,
                            0.0];

                description = strfmt("@GLS111166",
                                      _custVendTrans.TableId == tablenum(CustTrans) ? "@SYS11779" : "@SYS8079",
                                      _custVendTrans.AccountNum,
                                      _custVendTrans.Voucher);

                badDebt          += settledAmounts.amountInclVAT();
                badDebtTaxAmount += settledAmounts.taxAmountVAT();
                // Create register line <--
            }
            it.next();
        }

        if (! firstLine || ! conlen(transCon))
        {
            // Last line with an invoice open balance
            if (! conlen(transCon)) // not settled
            {
                profitTableRecId   = 0;
                balance    = 0.0;
                refTableId = _custVendTrans.TableId;
                refRecId   = _custVendTrans.RecId;

                description = strfmt("@GLS111166",
                                      _custVendTrans.TableId == tablenum(CustTrans) ? "@SYS11779" : "@SYS8079",
                                      _custVendTrans.AccountNum,
                                      _custVendTrans.Voucher);

                transCon = [dateNull(), "", 0.0, 0.0];
            }

            transCon = conpoke(transCon, #ConPos5, badDebt);
            transCon = conpoke(transCon, #ConPos6, badDebtTaxAmount);

            regQuery.addBodyRecord(profitTableRecId ,
                                   mainCon + transCon,
                                   refTableId,
                                   refRecId,
                                   description,
                                   0,
                                   balance);
            startCount++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>totals</Name>
				<Source><![CDATA[
    protected void totals(RTax25RegisterTransMap _trans)
    {
        RTax25RegisterTrans_DebtCreditMovement trans = _trans;

        totalBadDebt              += trans.Debt;
        totalBadDebtVAT           += trans.DebtVATAmount;
        totalBadDebtAmountDiff    += trans.AmountDifference;
        totalBadDebtAmountDiffVAT += trans.ExchDifferenceVAT;

        totalWriteOffAmount       += trans.CloseAmount;
        totalWriteOffAmountVAT    += trans.ClosedVATAmount;
        totalBadDebtRemain        += trans.UnsettledDebtAmount;
        totalBadDebtRemainVAT     += trans.UnsettledDebtAmountVAT;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>