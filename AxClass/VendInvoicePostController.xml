<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoicePostController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendInvoicePostController</c> class is the <c>SysOperationServiceController</c> class for posting vendor invoices.
/// </summary>
internal class VendInvoicePostController extends SysOperationServiceController implements BatchRetryable
{
    private static readonly VendInvoiceIQueue invoiceQueue = VendInvoiceQueueFactory::getVendInvoiceQueue();
    private ProcessExecutionSourceLinkItem processExecutionSourceLinkItem;
    private VendInvoiceInfoTable vendInvoiceInfoTable;
    private VendInvoiceWorkflowPostStatus vendInvoiceWorkflowPostStatus;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static VendInvoicePostController construct()
    {
        return new VendInvoicePostController(
            classStr(VendInvoicePostController),
            methodStr(VendInvoicePostController, run),
            SysOperationExecutionMode::ReliableAsynchronous);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProcessExecutionSourceLinkItem</Name>
				<Source><![CDATA[
    internal void initProcessExecutionSourceLinkItem(ProcessScheduleWorkItem _processScheduleWorkItem)
    {
        processExecutionSourceLinkItem = ProcessExecutionSourceLinkItem::newFromProcessScheduleWorkItemAndStatus(
            _processScheduleWorkItem,
            ProcessExecutionSourceStatus::Success);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        List invoiceList = this.getInvoiceList();

        if (invoiceList.elements() == 0)
        {
            return;
        }

        ListEnumerator listEnumerator = invoiceList.getEnumerator();

        while (listEnumerator.moveNext())
        {
            VendInvoiceWorkflowAutomatedTaskDataContract vendInvoiceWorkflowAutomatedTaskDataContract = listEnumerator.current();

            if (!vendInvoiceWorkflowAutomatedTaskDataContract.validateContract())
            {
                continue;
            }

            vendInvoiceInfoTable = VendInvoiceInfoTable::findRecIdCrossCompany(
                vendInvoiceWorkflowAutomatedTaskDataContract.parmWorkflowContextRecId());

            if (!vendInvoiceInfoTable)
            {
                continue;
            }

            Microsoft.Dynamics.Ax.Xpp.ErrorException errorException;

            try
            {
                this.postInvoice(vendInvoiceWorkflowAutomatedTaskDataContract);
                invoiceQueue.dequeue(vendInvoiceWorkflowAutomatedTaskDataContract);
            }
            catch (errorException)
            {
                this.logExceptionTelemetry(errorException, funcName());
                throw;
            }

            this.logProcessAutomationResult();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceList</Name>
				<Source><![CDATA[
    private List getInvoiceList()
    {
        List invoiceList = new List(Types::Class);

        using (ReqReaderWriterLock reqReaderWriterLock = ReqReaderWriterLock::construct())
        {
            try
            {
                if (reqReaderWriterLock.tryEnterWriterLock("Peek lock on VendInvoiceQueue"))
                {
                    invoiceList = invoiceQueue.peek();
                }
            }
            catch
            {
                if (xSession::currentRetryCount() <= VendInvoicePostTaskConstants::MaxRetryAttemptsOnException)
                {
                    int backOffWait = RandomGenerate::construct().randomInt(50, 1000);

                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
            }
            finally
            {
                reqReaderWriterLock.releaseAllLocks();
            }
        }

        return invoiceList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInvoice</Name>
				<Source><![CDATA[
    private void postInvoice(VendInvoiceWorkflowAutomatedTaskDataContract _vendInvoiceWorkflowAutomatedTaskDataContract)
    {
        // Do not attempt to post the invoice in the invoice was already posted
        if (vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Executed)
        {
            VendInstrumentation::logTelemetry(
                VendInvoicePostTaskConstants::InstrumentationNamespace,
                this.toString(),
                funcName(),
                VendInvoicePostTaskConstants::VendorInvoiceBatchPosting_AlreadyPosted,
                strFmt("Invoice RecId '%1'", int642Str(vendInvoiceInfoTable.RecId)));

            return;
        }

        WorkflowCorrelationId correlationId = _vendInvoiceWorkflowAutomatedTaskDataContract.parmWorkflowCorrelationId();
        WorkflowElementId elementId = _vendInvoiceWorkflowAutomatedTaskDataContract.parmWorkflowElementId();
        SysWorkflowExternalElement::startProcessing(correlationId, elementId);
        RefRecId batchJobId;

        if (this.isInBatch())
        {
            batchJobId = this.parmCurrentBatch().BatchJobId;
        }

        changecompany(vendInvoiceInfoTable.company())
        {
            LogText logText;
            WorkflowComment workflowComment;
            Counter infologLineStart;
            Microsoft.Dynamics.Ax.Xpp.ErrorException errorException;
            int backOffWait = RandomGenerate::construct().randomInt(50, 1000);

            using (VendorInvoiceProcessContext vendorInvoiceProcessContext = VendorInvoiceProcessContext::instance())
            {
                try
                {
                    vendInvoiceWorkflowPostStatus = VendInvoiceWorkflowPostStatus::Failed;
                    infologLineStart = infologLine();

                    ttsbegin;

                    if (vendInvoiceInfoTable.ParmId != strMin())
                    {
                        VendInvoiceInfoTable::moveFromActiveToSaved(vendInvoiceInfoTable);
                    }

                    vendorInvoiceProcessContext.parmIsWorkflowEventInProcess(true);
                    VendInvoicePaymentAuthorizationTask::postSavedInvoice(vendInvoiceInfoTable);

                    ttscommit;

                    vendInvoiceWorkflowPostStatus = VendInvoiceWorkflowPostStatus::Passed;
                    workflowComment = strFmt("@AccountsPayable:VendInvoicePostController_Success", vendInvoiceInfoTable.Num, batchJobId);
                }
                catch (Exception::Deadlock)
                {
                    if (xSession::currentRetryCount() <= VendInvoicePostTaskConstants::MaxRetryAttemptsOnException)
                    {
                        sleep(xSession::currentRetryCount() * backOffWait);
                        retry;
                    }
                    else
                    {
                        workflowComment = strFmt("@AccountsPayable:VendInvoicePostController_Failure_Deadlock", vendInvoiceInfoTable.Num, batchJobId);
                    }
                }
                catch (Exception::UpdateConflict)
                {
                    if (xSession::currentRetryCount() <= VendInvoicePostTaskConstants::MaxRetryAttemptsOnException)
                    {
                        sleep(xSession::currentRetryCount() * backOffWait);
                        retry;
                    }
                    else
                    {
                        workflowComment = strFmt("@AccountsPayable:VendInvoicePostController_Failure_UpdateConflict", vendInvoiceInfoTable.Num, batchJobId);
                    }
                }
                catch (errorException)
                {
                    if (errorException.Message != strMin())
                    {
                        workflowComment = errorException.Message;
                    }
                    else
                    {
                        workflowComment = strFmt("@AccountsPayable:VendInvoicePostController_Failure", vendInvoiceInfoTable.Num, batchJobId);
                    }
                }
                catch
                {
                    workflowComment = strFmt("@AccountsPayable:VendInvoicePostController_Failure", vendInvoiceInfoTable.Num, batchJobId);
                }
            }

            logText = Info::infoCon2Str(infolog.copy(infologLineStart + 1, infologLine()));
            workflowComment = strFmt("%1 %2", workflowComment, logText);

            if (vendInvoiceWorkflowPostStatus == VendInvoiceWorkflowPostStatus::Passed)
            {
                SysWorkflowExternalElement::complete(correlationId, elementId, workflowComment);
            }
            else
            {
                SysWorkflowExternalElement::fault(correlationId, elementId, workflowComment);
            }

            this.setVendInvoiceInfoTableLog(logText);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVendInvoiceInfoTableLog</Name>
				<Source><![CDATA[
    private void setVendInvoiceInfoTableLog(LogText _logText)
    {
        Microsoft.Dynamics.Ax.Xpp.ErrorException errorException;

        try
        {
            VendInvoiceInfoTable vendInvoiceInfoTableForLogUpdate;

            ttsbegin;

            update_recordset vendInvoiceInfoTableForLogUpdate
                setting Log = _logText
                where vendInvoiceInfoTableForLogUpdate.RecId == vendInvoiceInfoTable.RecId;

            ttscommit;
        }
        catch (errorException)
        {
            this.logExceptionTelemetry(errorException, funcName());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logProcessAutomationResult</Name>
				<Source><![CDATA[
    private void logProcessAutomationResult()
    {
        if (!processExecutionSourceLinkItem || !processExecutionSourceLinkItem.parmExecutionId())
        {
            this.initProcessExecutionSourceLinkItem(this.getContract());
        }

        Microsoft.Dynamics.Ax.Xpp.ErrorException errorException;

        try
        {
            VendInvoicePostWorkflowAutomationResult vendInvoicePostWorkflowAutomationResult = VendInvoicePostWorkflowAutomationResult::construct();
            vendInvoicePostWorkflowAutomationResult.parmProcessExecutionSourceLinkItem(processExecutionSourceLinkItem);
            vendInvoicePostWorkflowAutomationResult.parmVendInvoiceInfoTable(VendInvoiceInfoTable::findRecIdCrossCompany(vendInvoiceInfoTable.RecId));
            vendInvoicePostWorkflowAutomationResult.parmVendInvoiceWorkflowPostStatus(vendInvoiceWorkflowPostStatus);

            if (this.isInBatch())
            {
                vendInvoicePostWorkflowAutomationResult.parmBatchJobId(this.parmCurrentBatch().BatchJobId);
            }

            vendInvoicePostWorkflowAutomationResult.insertProcessAutomationResult();
        }
        catch (errorException)
        {
            this.logExceptionTelemetry(errorException, funcName());
            throw;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContract</Name>
				<Source><![CDATA[
    private ProcessScheduleWorkItem getContract()
    {
        ProcessScheduleWorkItem processScheduleWorkItem = ProcessScheduleWorkItem::construct();

        // The only use case of this check is to allow unit tests that run outside of the Batch.
        if (this.isInBatch())
        {
            processScheduleWorkItem = this.getDataContractInfoObject().dataContractObject() as ProcessScheduleWorkItem;
        }

        return processScheduleWorkItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logExceptionTelemetry</Name>
				<Source><![CDATA[
    private void logExceptionTelemetry(Microsoft.Dynamics.Ax.Xpp.ErrorException _errorException, MethodName _methodName)
    {
        VendInstrumentation::logTelemetry(
            VendInvoicePostTaskConstants::InstrumentationNamespace,
            this.toString(),
            _methodName,
            this.toString(),
            strFmt("%1", _errorException.ToString()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>