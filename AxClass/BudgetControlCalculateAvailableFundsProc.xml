<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlCalculateAvailableFundsProc</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>BudgetControlCalculateAvailableFundsProc</c> is a budget control stored procedure.
/// </summary>
[ExportMetadata(enumStr(BudgetControlSQLObjectType), BudgetControlSQLObjectType::StoredProcedure),
 ExportAttribute(identifierstr(Dynamics.AX.Application.BudgetControlISQLObject))]
internal final class BudgetControlCalculateAvailableFundsProc implements BudgetControlISQLObject
{
    private const str procName = 'BudgetControlCalculateAvailableFundsProc';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getName</Name>
				<Source><![CDATA[
    public str getName()
    {
        return procName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefinition</Name>
				<Source><![CDATA[
    public str getDefinition()
    {
        str sqlStatementText;

        // Use constant values for budget control category values for better performance.
        sqlStatementText = @"
    CREATE PROCEDURE [BudgetControlCalculateAvailableFundsProc]
    (
         @PartitionId                                   BIGINT
        ,@SummaryTrackingDateBegin                      DATETIME
        ,@SummaryTrackingDateEnd                        DATETIME
        ,@AccountingCurrencyAmount                      NUMERIC(32,16)
        ,@PrimaryLedger                                 BIGINT
        ,@BudgetControlRule                             BIGINT = NULL
        ,@BudgetGroup                                   BIGINT = NULL
        ,@MaxCarryForward                               INT
        ,@IsSimulation                                  INT
        ,@BudgetControlLedgerDimension                  BIGINT = NULL
        ,@ThresholdRate                                 NUMERIC(32,16)
        ,@OverbudgetOption                              INT
        ,@IsOverrunApproved                             INT
        ,@WarnOnOverBudgetThreshold                     INT
        ,@BudgetModelID                                 NVARCHAR(10)
        ,@BudgetModelType                               INT
        ,@BudgetModelSubModelID                         NVARCHAR(10)
        ,@BudgetModelDataAreaID                         NCHAR(4)
        ,@IsAnySummarized                               BIT

        ,@AccountingCurrencyAmountOverRemaining         NUMERIC(32,16) = 0 OUTPUT
        ,@AccountingCurrencyAmountOverThreshold         NUMERIC(32,16) = 0 OUTPUT
        ,@CheckResult                                   INT = 2 OUTPUT
        ,@CheckResultErrorWarning                       INT = 0 OUTPUT
        ,@CheckResultErrorWarningType                   INT = 0 OUTPUT
        ,@ReturnMsg										NVARCHAR(4000) OUTPUT

        ,@logErrorFl                                    CHAR(1)

         --<PubSect>
        ,@Category                                        INT = 0
         --</PubSect>
        ,@BudgetControlProcessingHeader                 BIGINT
        ,@ProcessingLogEventLevel                       INT
    )
    AS

    SET NOCOUNT ON;

    -- declarations

    DECLARE  @SPName                VARCHAR(126) = OBJECT_NAME(@@PROCID) -- the name of the stored proc
            ,@RetCode               INT = 0
            ,@ErrorTrying           VARCHAR(80) -- string describing command that failed
            ,@Rowcount              INT -- local variable for @@ROWCOUNT
            ,@Error_Number          INT -- from ERROR_NUMBER()
            ,@Error_Line            INT -- from ERROR_LINE()
            ,@Error_State           INT = 1 -- from ERROR_STATE()
            ,@Error_Severity        INT = 16 -- from ERROR_SEVERITY()
            ,@Error_Procedure       NVARCHAR(126) = OBJECT_NAME(@@PROCID) -- from ERROR_PROCEDURE()
            ,@ErrorMessage          NVARCHAR(4000) = N'' -- from ERROR_MESSAGE()
            ,@isIncludeErrorLineNum CHAR(1) = 'Y'
            ,@BudgetControlBuildErrorMsg NVARCHAR(4000)
            ,@CheckResultBranch     INT

            ,@AvailableUnrevisedBudgetAmountSummary                 NUMERIC(32,16)  = 0
            ,@AvailableRevisedBudgetAmountSummary                   NUMERIC(32,16)  = 0

            ,@AvailableBudgetAmount                                 NUMERIC(32,16)  = 0
            ,@AvailableThresholdAmount                              NUMERIC(32,16)  = 0

            ,@_OVERBUDGETOPTION_Prevent                             INT     = 0
            ,@_OVERBUDGETOPTION_Allow                               INT     = 1
            ,@_OVERBUDGETOPTION_PreventAtThreshold                  INT     = 2

            ,@_CHECKRESULT_NoCheck                                  INT     = 1
            ,@_CHECKRESULT_Passed                                   INT     = 2
            ,@_CHECKRESULT_PassedWithWarnings                       INT     = 3
            ,@_CHECKRESULT_Failed                                   INT     = 4

            ,@_ERRORWARNING_LegalEntityInvalid                      INT     = 1
            ,@_ERRORWARNING_BudgetCycleInvalid                      INT     = 3
            ,@_ERRORWARNING_UserIdInvalid                           INT     = 4
            ,@_ERRORWARNING_DateInvalid                             INT     = 5
            ,@_ERRORWARNING_BudgetModelInvalid                      INT     = 6
            ,@_ERRORWARNING_BudgetSourceInvalid                     INT     = 7
            ,@_ERRORWARNING_BudgetThresholdExceeded                 INT     = 9
            ,@_ERRORWARNING_BudgetFundsAvailableExceeded            INT     = 10
            ,@_ERRORWARNING_RelievingBudgetSourceInvalid            INT     = 11
            ,@_ERRORWARNING_RelievingBudgetCategoryInvalid          INT     = 13
            ,@_ERRORWARNING_BudgetFundsAvailableExceededAllowed     INT     = 14
            ,@_ERRORWARNING_BudgetFundsAvailableExceededApproved    INT     = 15
            ,@_ERRORWARNING_BudgetThresholdExceededApproved         INT     = 16
            ,@_ERRORWARNING_BudgetThresholdExceededAllowed          INT     = 17
            ,@_ERRORWARNING_CurrencyInvalid                         INT     = 18
            ,@_ERRORWARNING_BudgetAvailExceededUnderThreshAllowed   INT     = 19
            ,@_ERRORWARNING_BudgetFundsRuleOverGroupUnderAvailable  INT     = 20
            ,@_ERRORWARNINGTYPE_InvalidRequest                      INT     = 1
            ,@_ERRORWARNINGTYPE_BudgetAvailableCheck                INT     = 2
             -- <PubSect>
            ,@_ERRORWARNING_ApportionmentBudgetExceeds              INT     = 21

            ,@_UseApportionmentAmount                                BIT        = 0
             -- </PubSect>
            ,@LogMessage                                NVARCHAR(1000)

            --Constants match up with x++ BudgetControlEventLevel enum values
            ,@_EVENTLEVEL_None          INT     = 0
            ,@_EVENTLEVEL_Critical      INT     = 1
            ,@_EVENTLEVEL_Error         INT     = 2
            ,@_EVENTLEVEL_Warning       INT     = 3
            ,@_EVENTLEVEL_Informational INT     = 4
            ,@_EVENTLEVEL_Verbose       INT     = 5
    ;

    -- param validation

    SET @LogMessage = 'BudgetControlCalculateAvailableFundsProc - Start';
    EXEC [BudgetControlLogMessageProc] @LogMessage, @_EVENTLEVEL_Informational, @BudgetControlProcessingHeader, @ProcessingLogEventLevel, @PartitionId

    IF @BudgetControlRule IS NULL
    AND @BudgetGroup IS NULL
      BEGIN
        SELECT @ErrorTrying = '@BudgetControlRule and @BudgetGroup params cannot both be NULL';
        GOTO lblErrorTrap;
      END;
    IF @BudgetControlRule IS NOT NULL
    AND @BudgetGroup IS NOT NULL
      BEGIN
        SELECT @ErrorTrying = '@BudgetControlRule and @BudgetGroup params cannot both be NON-NULL';
        GOTO lblErrorTrap;
      END;
    IF @PartitionId IS NULL
        OR @PartitionId = 0
        BEGIN
            SELECT @ErrorTrying = '@PartitionId cannot be 0 or NULL';
            GOTO lblErrorTrap;
        END;

    CREATE TABLE #BudgetGroupLedgerDimension
        (    [BudgetControlLedgerDimension]                 BIGINT PRIMARY KEY CLUSTERED)
    ;

    CREATE TABLE #BCCDC
        (    [IsDraft]                                      INT
            ,[Category]                                     INT
            PRIMARY KEY CLUSTERED ([Category], [IsDraft])
        )
    ;

    BEGIN TRY
        INSERT INTO #BCCDC
            ([IsDraft]
            ,[Category]
            )
        SELECT  v.[IsDraft]
                ,v.[Category]
        FROM    [BudgetControlConfigDraftCategoryView] v
        WHERE   v.[PrimaryLedger] = @PrimaryLedger
        ;
    END TRY
    BEGIN CATCH
        SELECT   @ErrorTrying = N'INSERT INTO #BCCDC';
        SELECT   @Error_Number     = ERROR_NUMBER()
                ,@Error_Line       = ERROR_LINE()
                ,@Error_State      = ERROR_STATE()
                ,@Error_Severity   = ERROR_SEVERITY()
                ,@Error_Procedure  = ERROR_PROCEDURE()
                ,@ErrorMessage     = ERROR_MESSAGE();
        GOTO lblErrorTrap;
    END CATCH;
    ;

    IF @BudgetGroup IS NOT NULL
      BEGIN TRY -- setup to process by group

        INSERT INTO #BudgetGroupLedgerDimension([BudgetControlLedgerDimension])
        SELECT  bgld.[BUDGETCONTROLLEDGERDIMENSION]
        FROM    [BUDGETGROUPLEDGERDIMENSION] bgld
        WHERE   [BUDGETGROUP] = @BudgetGroup
        AND [PARTITION] = @PartitionId
        ;

        SELECT @rowcount = @@ROWCOUNT;
        IF @rowcount = 0
          BEGIN
            SELECT  @ErrorTrying = N'No BudgetGroupLedgerDimensions for '
                                + CAST(@BudgetGroup AS NVARCHAR)
            ;
            GOTO lblErrorTrap;
          END;

      END TRY
      BEGIN CATCH
        SELECT   @Error_Number     = ERROR_NUMBER()
                ,@Error_Line       = ERROR_LINE()
                ,@Error_State      = ERROR_STATE()
                ,@Error_Severity   = ERROR_SEVERITY()
                ,@Error_Procedure  = ERROR_PROCEDURE()
                ,@ErrorMessage     = ERROR_MESSAGE();
        SELECT   @ErrorTrying = 'Insert @BudgetControlLedgerDimension';
        GOTO lblErrorTrap;
      END CATCH; -- setup to process by group member

    -- Get thresholds based on rule or **group

    BEGIN TRY

        --<PubSect>
        Select @_UseApportionmentAmount = USEAPPORTIONEDAMOUNT From BUDGETCONTROLCONFIGURATION Where PRIMARYLEDGER = @PrimaryLedger
        AND PARTITION = @PartitionId
        --</PubSect>

        SELECT @ErrorTrying = N'SELECT  @AvailableRevisedBudgetAmountSummary';

        SELECT  @AvailableRevisedBudgetAmountSummary = COALESCE(SUM(s.[ACCOUNTINGCURRENCYAMOUNT]),0)
        FROM    [BUDGETSOURCETRACKINGSUMMARY] s WITH (REPEATABLEREAD)
        WHERE   s.[TRACKINGDATE] BETWEEN @SummaryTrackingDateBegin AND @SummaryTrackingDateEnd
        AND s.[PARTITION] = @PartitionId
        AND EXISTS
            (   SELECT  1
                FROM    #BCCDC v
                WHERE   v.[IsDraft] = s.[ISDRAFT]
                AND     v.[Category] = s.[CATEGORY]
            )
        AND s.[BUDGETCONTROLLEDGERDIMENSION] IN
            (SELECT @BudgetControlLedgerDimension
             UNION ALL
             SELECT bgld.[BudgetControlLedgerDimension]
             FROM   #BudgetGroupLedgerDimension bgld
            )
       --<PubSect>
        AND (
              (s.[CATEGORY] IN
              (1 --CATEGORY_Orig
              ,2 --CATEGORY_Amend
              ,3 --CATEGORY_XferIn
              ,4 --CATEGORY_XferOut
              ,5 --CATEGORY_CFwd
              ,13) --CATEGORY_PreliminaryBudget
              AND @_UseApportionmentAmount = 1
              AND @Category = 12)
           OR
              (s.[Category] = 12 --CATEGORY_Apportionment
               AND @_UseApportionmentAmount = 1
               AND @Category <> 12)
           OR
              (s.[CATEGORY] IN
              (1 --CATEGORY_Orig
              ,2 --CATEGORY_Amend
              ,3 --CATEGORY_XferIn
              ,4 --CATEGORY_XferOut
              ,5 --CATEGORY_CFwd
              ,13) --CATEGORY_PreliminaryBudget
              AND @_UseApportionmentAmount = 0
              AND @Category <> 12)
             )
        --</PubSect>
        AND (
                (s.[BUDGETMODELID] = @BudgetModelID
                    AND s.[BUDGETMODELSUBMODELID] = @BudgetModelSubModelID
                    AND s.[BUDGETMODELTYPE] = @BudgetModelType
                    AND s.[BUDGETMODELDATAAREAID] = @BudgetModelDataAreaId
                )
                OR
                (s.[BUDGETMODELID] = N''
                )
            )
        AND s.[ISCARRYFORWARD] <= @MaxCarryForward
        AND s.[ISSIMULATION] <= @IsSimulation
        AND s.[PRIMARYLEDGER] = @PrimaryLedger
        ;

        SELECT @ErrorTrying = N'SELECT  @AvailableUnrevisedBudgetAmountSummary';

        SELECT  @AvailableUnrevisedBudgetAmountSummary = COALESCE(SUM(s.[ACCOUNTINGCURRENCYAMOUNT]),0)
        FROM    [BUDGETSOURCETRACKINGSUMMARY] s WITH (REPEATABLEREAD)
        WHERE   s.[TRACKINGDATE] BETWEEN @SummaryTrackingDateBegin AND @SummaryTrackingDateEnd
        AND s.[PARTITION] = @PartitionId
        AND EXISTS
            (   SELECT  1
                FROM    #BCCDC v
                WHERE   v.[IsDraft] = s.[ISDRAFT]
                AND     v.[Category] = s.[CATEGORY]
            )
        AND s.[BUDGETCONTROLLEDGERDIMENSION] IN
            (SELECT @BudgetControlLedgerDimension
             UNION ALL
             SELECT bgld.[BudgetControlLedgerDimension]
             FROM   #BudgetGroupLedgerDimension bgld
            )
        --<PubSect>
        AND (
             (@_UseApportionmentAmount = 0
              AND s.[CATEGORY] IN (6,7,8,11)
              )
            OR
             (@_UseApportionmentAmount = 1
              AND @Category = 12
              AND s.[CATEGORY] IN (6,7,8,11,12)
              )
             OR
             (@_UseApportionmentAmount = 1
              AND @Category <> 12
              AND s.[CATEGORY] IN (6,7,8,11)
              )
            )
        --</PubSect>
        AND (
                (s.[BUDGETMODELID] = @BudgetModelID
                    AND s.[BUDGETMODELSUBMODELID] = @BudgetModelSubModelID
                    AND s.[BUDGETMODELTYPE] = @BudgetModelType
                    AND s.[BUDGETMODELDATAAREAID] = @BudgetModelDataAreaId
                )
                OR
                (s.[BUDGETMODELID] = N''
                )
            )
        AND s.[ISCARRYFORWARD] <= @MaxCarryForward
        AND s.[ISSIMULATION] <= @IsSimulation
        AND s.[PRIMARYLEDGER] = @PrimaryLedger
        ;

    END TRY
    BEGIN CATCH
    SELECT   @Error_Number     = ERROR_NUMBER()
            ,@Error_Line       = ERROR_LINE()
            ,@Error_State      = ERROR_STATE()
            ,@Error_Severity   = ERROR_SEVERITY()
            ,@Error_Procedure  = ERROR_PROCEDURE()
            ,@ErrorMessage     = ERROR_MESSAGE();
    GOTO lblErrorTrap;
    END CATCH;

        --<PubSect>
        If (@_UseApportionmentAmount = 1 AND @Category <> 12)
        BEGIN
            SELECT  @AvailableRevisedBudgetAmountSummary = @AvailableRevisedBudgetAmountSummary *(-1)
        END
        --</PubSect>

    -- calculations are split up for clarity
    SELECT  @AvailableBudgetAmount =
                  @AvailableRevisedBudgetAmountSummary
                + @AvailableUnrevisedBudgetAmountSummary
            ,@AvailableThresholdAmount =
                  (@AvailableRevisedBudgetAmountSummary * @ThresholdRate)
                + @AvailableUnrevisedBudgetAmountSummary
    ;

    SELECT  @AccountingCurrencyAmountOverRemaining =
                @AvailableBudgetAmount + @AccountingCurrencyAmount
            ,@AccountingCurrencyAmountOverThreshold =
                @AvailableThresholdAmount + @AccountingCurrencyAmount
    ;

    SELECT  @AccountingCurrencyAmountOverRemaining =
                COALESCE(
                    CASE WHEN @AccountingCurrencyAmountOverRemaining > 0 THEN 0 END
                    ,@AccountingCurrencyAmountOverRemaining
                )
            ,@AccountingCurrencyAmountOverThreshold =
                COALESCE(
                    CASE WHEN @AccountingCurrencyAmountOverThreshold > 0 THEN 0 END
                    ,@AccountingCurrencyAmountOverthreshold
                )
    ;

    SELECT @CheckResultErrorWarningType = @_ERRORWARNINGTYPE_BudgetAvailableCheck;

     --<PubSect>
    IF @Category = 12
    BEGIN
        IF @_UseApportionmentAmount = 0
        BEGIN
            SELECT  @CheckResult = @_CHECKRESULT_Passed
        END
        ELSE
        BEGIN
            IF @AccountingCurrencyAmountOverRemaining < 0
            BEGIN
                SELECT  @CheckResult = @_CHECKRESULT_Failed
                ,@CheckResultErrorWarning = @_ERRORWARNING_ApportionmentBudgetExceeds;
            END
            ELSE
            BEGIN
                SELECT  @CheckResult = @_CHECKRESULT_Passed
            END
        END
    END
    ELSE
    BEGIN
    --</PubSect>

    IF (@AccountingCurrencyAmountOverRemaining < 0
        OR @AccountingCurrencyAmountOverThreshold < 0
       )
        BEGIN
        IF @ThresholdRate <= 1
          BEGIN
            IF @OverbudgetOption = @_OVERBUDGETOPTION_Prevent
              BEGIN
                IF @AccountingCurrencyAmountOverRemaining < 0
                  BEGIN
                    SELECT  @CheckResult = @_CHECKRESULT_Failed
                            ,@CheckResultErrorWarning = @_ERRORWARNING_BudgetFundsAvailableExceeded
                            ,@CheckResultBranch = 1;
                  END
                ELSE
                  BEGIN
                    IF @WarnOnOverbudgetThreshold = 1
                        BEGIN
                            SELECT  @CheckResult = @_CHECKRESULT_PassedWithWarnings
                                    ,@CheckResultErrorWarning = @_ERRORWARNING_BudgetThresholdExceededAllowed
                                    ,@CheckResultBranch = 2;
                        END
                    ELSE
                        BEGIN
                            SELECT  @CheckResult = @_CHECKRESULT_Passed
                                    ,@CheckResultBranch = 3;
                        END
                  END
              END
            ELSE IF @OverbudgetOption = @_OVERBUDGETOPTION_PreventAtThreshold
              BEGIN
                SELECT  @CheckResult = @_CHECKRESULT_Failed
                        ,@CheckResultErrorWarning = @_ERRORWARNING_BudgetThresholdExceeded
                        ,@CheckResultBranch = 4;
              END
            ELSE --IF @OverbudgetOption = @_OVERBUDGETOPTION_Allow
              BEGIN
                IF @AccountingCurrencyAmountOverRemaining < 0
                  BEGIN
                    SELECT  @CheckResult = @_CHECKRESULT_PassedWithWarnings
                            ,@CheckResultErrorWarning = @_ERRORWARNING_BudgetFundsAvailableExceededAllowed
                            ,@CheckResultBranch = 5;
                  END
                ELSE
                  BEGIN
                    IF @WarnOnOverbudgetThreshold = 1
                        BEGIN
                            SELECT  @CheckResult = @_CHECKRESULT_PassedWithWarnings
                                    ,@CheckResultErrorWarning = @_ERRORWARNING_BudgetThresholdExceededAllowed
                                    ,@CheckResultBranch = 6;
                        END
                    ELSE
                        BEGIN
                            SELECT  @CheckResult = @_CHECKRESULT_Passed
                                    ,@CheckResultBranch = 7;
                        END
                  END
              END;
          END;
        ELSE -- @ThresholdRate > 1
          BEGIN
          IF @OverbudgetOption = @_OVERBUDGETOPTION_Prevent
            BEGIN
              IF @AccountingCurrencyAmountOverThreshold < 0
                BEGIN
                  SELECT  @CheckResult = @_CHECKRESULT_Failed
                          ,@CheckResultErrorWarning = @_ERRORWARNING_BudgetFundsAvailableExceeded
                          ,@CheckResultBranch = 8;
                END
              ELSE
                BEGIN
                  SELECT  @CheckResult = @_CHECKRESULT_Failed
                          ,@CheckResultErrorWarning = @_ERRORWARNING_BudgetFundsAvailableExceeded
                          ,@CheckResultBranch = 9;
                END
            END
          ELSE IF @OverbudgetOption = @_OVERBUDGETOPTION_PreventAtThreshold
            BEGIN
              IF @AccountingCurrencyAmountOverThreshold < 0
                BEGIN
                  SELECT  @CheckResult = @_CHECKRESULT_Failed
                          ,@CheckResultErrorWarning = @_ERRORWARNING_BudgetThresholdExceeded
                          ,@CheckResultBranch = 10;
                END
              ELSE
                BEGIN
                  SELECT  @CheckResult = @_CHECKRESULT_PassedWithWarnings
                          ,@CheckResultErrorWarning = @_ERRORWARNING_BudgetAvailExceededUnderThreshAllowed
                          ,@CheckResultBranch = 11;
                END
            END
          ELSE --IF @OverbudgetOption = @_OVERBUDGETOPTION_Allow
            BEGIN
              IF @AccountingCurrencyAmountOverThreshold < 0
                BEGIN
                  SELECT  @CheckResult = @_CHECKRESULT_PassedWithWarnings
                          ,@CheckResultErrorWarning = @_ERRORWARNING_BudgetFundsAvailableExceededAllowed
                          ,@CheckResultBranch = 12;
                END
              ELSE
                BEGIN
                  SELECT  @CheckResult = @_CHECKRESULT_PassedWithWarnings
                          ,@CheckResultErrorWarning = @_ERRORWARNING_BudgetFundsAvailableExceededAllowed
                          ,@CheckResultBranch = 13;
                END
            END;
          END;
      END;
    ELSE -- budget check passed
      BEGIN
            SELECT    @CheckResult = @_CHECKRESULT_Passed
                      ,@CheckResultBranch = 14;
      END;
    --<PubSect>
    END;
    --</PubSect>



    IF (@BudgetGroup IS NOT NULL)
    BEGIN
        SET @LogMessage = 'BudgetGroup = ' + CAST(@BudgetGroup AS VARCHAR(40));
        EXEC [BudgetControlLogMessageProc] @LogMessage, @_EVENTLEVEL_Informational, @BudgetControlProcessingHeader, @ProcessingLogEventLevel, @PartitionId
    END

    SET @LogMessage = N'CheckResult Branch ' + CAST(@CheckResultBranch as VARCHAR(2));
    EXEC [BudgetControlLogMessageProc] @LogMessage, @_EVENTLEVEL_Informational, @BudgetControlProcessingHeader, @ProcessingLogEventLevel, @PartitionId

    SET @LogMessage = 'CheckResult = ' + CAST(@CheckResult AS VARCHAR(40));
    EXEC [BudgetControlLogMessageProc] @LogMessage, @_EVENTLEVEL_Informational, @BudgetControlProcessingHeader, @ProcessingLogEventLevel, @PartitionId

    SET @LogMessage = 'AccountingCurrencyAmount = ' + CAST(@AccountingCurrencyAmount AS VARCHAR(40));
    EXEC [BudgetControlLogMessageProc] @LogMessage, @_EVENTLEVEL_Informational, @BudgetControlProcessingHeader, @ProcessingLogEventLevel, @PartitionId

    SET @LogMessage = 'AvailableRevisedBudgetAmountSummary = ' + CAST(@AvailableRevisedBudgetAmountSummary AS VARCHAR(40));
    EXEC [BudgetControlLogMessageProc] @LogMessage, @_EVENTLEVEL_Informational, @BudgetControlProcessingHeader, @ProcessingLogEventLevel, @PartitionId

    SET @LogMessage = 'AvailableUnrevisedBudgetAmountSummary = ' + CAST(@AvailableUnrevisedBudgetAmountSummary AS VARCHAR(40));
    EXEC [BudgetControlLogMessageProc] @LogMessage, @_EVENTLEVEL_Informational, @BudgetControlProcessingHeader, @ProcessingLogEventLevel, @PartitionId

    SET @LogMessage = 'AvailableBudgetAmount = ' + CAST(@AvailableBudgetAmount AS VARCHAR(40));
    EXEC [BudgetControlLogMessageProc] @LogMessage, @_EVENTLEVEL_Informational, @BudgetControlProcessingHeader, @ProcessingLogEventLevel, @PartitionId

    SET @LogMessage = 'AccountingCurrencyAmountOverThreshold = ' + CAST(@AccountingCurrencyAmountOverThreshold AS VARCHAR(40));
    EXEC [BudgetControlLogMessageProc] @LogMessage, @_EVENTLEVEL_Informational, @BudgetControlProcessingHeader, @ProcessingLogEventLevel, @PartitionId

    SET @LogMessage = 'AccountingCurrencyAmountOverRemaining = ' + CAST(@AccountingCurrencyAmountOverRemaining AS VARCHAR(40));
    EXEC [BudgetControlLogMessageProc] @LogMessage, @_EVENTLEVEL_Informational, @BudgetControlProcessingHeader, @ProcessingLogEventLevel, @PartitionId

    SET @LogMessage = 'BudgetControlCalculateAvailableFundsProc - End';
    EXEC [BudgetControlLogMessageProc] @LogMessage, @_EVENTLEVEL_Informational, @BudgetControlProcessingHeader, @ProcessingLogEventLevel, @PartitionId

    -- normal termination

    RETURN (0)

    -- error termination

    lblErrorTrap:

    EXEC [BudgetControlBuildErrorMessageProc]  
         @callerProcedure       = @SPName
        ,@Error_Number          = @Error_Number
        ,@Error_Line            = @Error_Line
        ,@Error_State           = @Error_State
        ,@Error_Severity        = @Error_Severity
        ,@Error_Message         = @ErrorMessage
        ,@Error_Procedure       = @Error_Procedure
        ,@ErrorTrying           = @ErrorTrying
        ,@isIncludeErrorLineNum = @isIncludeErrorLineNum
        ,@ReturnErrorMsg		= @BudgetControlBuildErrorMsg OUTPUT
    ;

    IF @RetCode = 0
        BEGIN
            SELECT @RetCode = -1
        END

    SELECT @ReturnMsg = @BudgetControlBuildErrorMsg;

    RETURN (@RetCode)
    ";

        return sqlStatementText;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>