<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcImportForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PcImportForm
{
    Filename filename;
    Set selectedLegalEntities;
    FormControl buttonImport;
    FormControl buttonImportInBatch;
    PCImportXmlDocumentHandler handler;
    System.IO.Stream fileStream;
    boolean importInBatch;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a legal entity for import.
    /// </summary>
    /// <param name="_companyInfo">
    /// The legal entity to add.
    /// </param>
    public void addLegalEntity(CompanyInfo _companyInfo)
    {
        selectedLegalEntities.add(_companyInfo.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>import</Name>
				<Source><![CDATA[
    /// <summary>
    /// Imports a product configuration model.
    /// </summary>
    public void import()
    {
        this.importFromXml(this.getXmlContents());
    }

]]></Source>
			</Method>
			<Method>
				<Name>importFromXml</Name>
				<Source><![CDATA[
    /// <summary>
    /// Imports a configuration model.
    /// </summary>
    /// <param name = "_xml">An XML representation of a configuration model.</param>
    public void importFromXml(str _xml)
    {
        handler.importModel(selectedLegalEntities.pack(), _xml);
    }

]]></Source>
			</Method>
			<Method>
				<Name>importInBatch</Name>
				<Source><![CDATA[
    internal void importInBatch(FormRun _pcImportForm)
    {
        this.parmImportInBatch(true);

        Args args = new Args(_pcImportForm);

        args.parm(this.getXmlContents());
        args.parmObject(this.getSelectedLegalEntities());

        new MenuFunction(menuItemActionStr(PCImportXml), MenuItemType::Action).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        PCImportTreeBuilder     builder = PCImportTreeBuilder::construct();

        selectedLegalEntities = new Set(Types::Int64);
        handler               = builder.buildHandlerTree();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonImport</Name>
				<Source><![CDATA[
    public FormControl parmButtonImport(FormControl _buttonImport)
    {
        buttonImport = _buttonImport;

        return buttonImport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonImportInBatch</Name>
				<Source><![CDATA[
    public FormControl parmButtonImportInBatch(FormControl _buttonImportInBatch)
    {
        buttonImportInBatch = _buttonImportInBatch;

        return buttonImportInBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmImportInBatch</Name>
				<Source><![CDATA[
    public boolean parmImportInBatch(boolean _importInBatch = importInBatch)
    {
        importInBatch = _importInBatch;

        return importInBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileStream</Name>
				<Source><![CDATA[
    public System.IO.Stream parmFileStream(System.IO.Stream _fileStream = fileStream)
    {
        fileStream = _fileStream;

        // Update state on setting value.
        if (!prmisDefault(_fileStream))
        {
            this.setButtonImportEnabledState();
        }

        return fileStream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedLegalEntities</Name>
				<Source><![CDATA[
    internal Set getSelectedLegalEntities()
    {
        return selectedLegalEntities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getXmlContents</Name>
				<Source><![CDATA[
    internal str getXmlContents()
    {
        System.IO.StreamReader reader = new System.IO.StreamReader(fileStream);
        return reader.ReadToEnd();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonImportEnabledState</Name>
				<Source><![CDATA[
    protected void setButtonImportEnabledState()
    {
        boolean buttonEnabled = this.parmFileStream() != null;

        if (buttonImport != null)
        {
            buttonImport.enabled(buttonEnabled);
        }

        if (buttonImportInBatch != null)
        {
            buttonImportInBatch.enabled(buttonEnabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the caller
    /// </summary>
    /// <param name="_callerFormRun">
    /// The form that calls this method
    /// </param>
    public void updateCaller(FormRun _callerFormRun=null)
    {
        Args args = new Args();

        if ( _callerFormRun)
        {
            if (_callerFormRun.args() && _callerFormRun.name() == formStr(PCProductConfigurationModelListPage))
            {
                // Set focus on the imported model and do a refresh
                _callerFormRun.args().lookupRecord(handler.parmProductConfigurationModel());
                _callerFormRun.dataSource().research(true);
            }
            else
            {
                args.record(handler.parmProductConfigurationModel());
                args.caller(this);

                new MenuFunction(menuitemDisplayStr(PCProductConfigurationModelDetails), MenuItemType::Display).run(args);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCImportForm construct()
    {
        return new PCImportForm();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>