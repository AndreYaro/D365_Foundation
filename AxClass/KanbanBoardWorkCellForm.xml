<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanBoardWorkCellForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>KanbanBoardWorkCellForm</c> class provides the business logic required for the
/// <c>KanbanBoardWorkCell</c> form including filter management and inventory dimension setup.
/// </summary>
public class KanbanBoardWorkCellForm extends KanbanBoardForm
{
    InventDimCtrl_Frm       inventDimFormSetupProcessJobList;
    InventDimCtrl_Frm       inventDimFormSetupTransferJobList;
    InventDimCtrl_Frm       inventDimFormSetupPickListPegging;

    FormDataSource          inventDimProcessJobList;
    FormDataSource          inventDimTransferJobList;
    FormDataSource          inventDimPickListAndPegging;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancelSelectedKanbanJobs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels one or more selected kanban jobs.
    /// </summary>
    public void cancelSelectedKanbanJobs()
    {
        this.revertStatusSelectedKanbanJobs(LeanKanbanJobStatus::NotPlanned,true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimFormSetupPickListPegging</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventDimForm</c> object used for dimensions setup in the picking list and pegging.
    /// </summary>
    /// <returns>
    ///    An <c>InventDimCtrl_Frm</c> instance to be used for dimensions setup.
    /// </returns>
    public InventDimCtrl_Frm parmInventDimFormSetupPickListPegging()
    {
        return inventDimFormSetupPickListPegging;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimFormSetupProcessJobList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>InventDimForm</c> object that is used for dimensions setup in the process jobs
    ///    list.
    /// </summary>
    /// <returns>
    ///    The <c>InventDimForm </c> object that is used for dimensions setup.
    /// </returns>
    public InventDimCtrl_Frm parmInventDimFormSetupProcessJobList()
    {
        return inventDimFormSetupProcessJobList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimFormSetupTransferJobList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventDimForm</c> object that is used for dimensions setup in the transfer jobs list.
    /// </summary>
    /// <returns>
    ///    The <c>InventDimForm</c> object that is used for dimensions setup.
    /// </returns>
    public InventDimCtrl_Frm parmInventDimFormSetupTransferJobList()
    {
        return inventDimFormSetupTransferJobList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimPickListAndPegging</Name>
				<Source><![CDATA[
    public FormDataSource parmInventDimPickListAndPegging(FormDataSource _inventDimPickListAndPegging = inventDimPickListAndPegging)
    {
        inventDimPickListAndPegging = _inventDimPickListAndPegging;

        return inventDimPickListAndPegging;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimProcessJobList</Name>
				<Source><![CDATA[
    public FormDataSource parmInventDimProcessJobList(FormDataSource _inventDimProcessJobList = inventDimProcessJobList)
    {
        inventDimProcessJobList = _inventDimProcessJobList;

        return inventDimProcessJobList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimTransferJobList</Name>
				<Source><![CDATA[
    public FormDataSource parmInventDimTransferJobList(FormDataSource _inventDimTransferJobList = inventDimTransferJobList)
    {
        inventDimTransferJobList = _inventDimTransferJobList;

        return inventDimTransferJobList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>revertStatusSelectedKanbanJobs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverts the status of one or more selected kanban jobs.
    /// </summary>
    /// <param name="_leanKanbanJobStatus">
    /// A <c>LeanKanbanJoStatus</c> enum value that specifies the target kanban job status; optional.
    /// </param>
    /// <param name="_silent">
    /// A <c>Boolean</c> value that indicates if the status reversal should be processed silently; optional.
    /// </param>
    public void revertStatusSelectedKanbanJobs(
        LeanKanbanJobStatus _leanKanbanJobStatus = LeanKanbanJobStatus::Completed,
        boolean             _silent              = false)
    {
        int                             conIdx;

        FormDataSource kanbanBoardTmpProcessJob_ds = formRun.dataSource(tablestr(KanbanBoardTmpProcessJob));
        container selectedJobs = KanbanBoardForm::selectedRecords(kanbanBoardTmpProcessJob_ds);

        if (selectedJobs)
        {
            List listSelectedJobs = new List(Types::Record);
            int selectedJobsCount = conlen(selectedJobs);

            for (conIdx = 1; conIdx <= selectedJobsCount; conIdx++)
            {
                KanbanBoardTmpProcessJob kanbanBoardTmpProcessJob = conpeek(selectedJobs, conIdx);
                listSelectedJobs.addEnd(kanbanBoardTmpProcessJob);
            }
            if (listSelectedJobs.elements() > 0)
            {
                KanbanMultiJobReset kanbanMultiJobReset = KanbanMultiJob::newCallerListBuffer(_leanKanbanJobStatus, listSelectedJobs, _silent, true);
                kanbanMultiJobReset.runMain(KanbanMulti::makeArgs(_silent, '', formRun));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectCard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Highlights the specified card in the list of jobs or outputs an error message to the message board
    ///    if the card is not found.
    /// </summary>
    /// <param name="_cardId">
    ///    The card identifier of the card to select in the job list.
    /// </param>
    /// <param name="_dataSourceName">
    ///    The data source name of the data source that contains the job list.
    /// </param>
    /// <param name="_messageBoard">
    ///    A <see cref="T:KanbanBoardTmpMessageBoard" /> instance to output error messages to.
    /// </param>
    /// <returns>
    ///    true if the card was found and selected; otherwise, false.
    /// </returns>
    public boolean selectCard(
        KanbanCardId               _cardId,
        str                        _dataSourceName,
        KanbanBoardTmpMessageBoard _messageBoard)
    {
        Kanban                          kanban;
        boolean                         kanbanAssigned = false;
        boolean                         found = false;

        FormDataSource kanbanBoardJob_ds = formRun.dataSource(_dataSourceName);

        // Get the first multi selection or single selection record
        Common currentJob = kanbanBoardJob_ds.getFirst();
        FieldId cardFieldId = fieldName2id(currentJob.TableId,fieldStr(KanbanCard,CardId));

        while (currentJob)
        {
            // Card found, select the record
            if (currentJob.(cardFieldId) == _cardId)
            {
                kanbanBoardJob_ds.findRecord(currentJob);
                found = true;
            }
            else
            {
                kanbanBoardJob_ds.markRecord(currentJob, 0);
            }

            currentJob = kanbanBoardJob_ds.getNext();
        }

        // Card not found in the list
        if (    _messageBoard
            && !found)
        {
            // Try to find an assigned kanban
            if (KanbanCard::findCardId(_cardId).Kanban)
            {
                _messageBoard.error(strFmt("@SYS136406", _cardId, kanban.KanbanId));
            }
            else
            {
                _messageBoard.error(strFmt("@SYS136248", _cardId));
            }
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Highlights the specified job in the list of jobs.
    /// </summary>
    /// <param name="_jobId">
    ///    The job identifier of the job to select in the job list.
    /// </param>
    /// <param name="_dataSourceName">
    ///    The data source name of the data source that contains the job list.
    /// </param>
    /// <returns>
    ///    true if the job was found and selected; otherwise, false.
    /// </returns>
    public boolean selectJob(
        RecId _jobId,
        str   _dataSourceName)
    {
        return    _jobId
               && this.selectFormDataSourceRecord(formRun.dataSource(_dataSourceName),fieldStr(KanbanBoardTmpProcessJob,Job),_jobId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>toggleSelectedJobsPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the kanban priority of one or more selected kanban jobs.
    /// </summary>
    /// <remarks>
    /// If one or more selected jobs are currently not a priority, all jobs are set to priority.
    /// If all jobs are currently a priority, all jobs are set to non-priority.
    /// </remarks>
    public void toggleSelectedJobsPriority()
    {
        NoYes                           isPriority = NoYes::No;
        int                             conIdx;

        FormDataSource kanbanBoardTmpProcessJob_ds = formRun.dataSource(tablestr(KanbanBoardTmpProcessJob));
        container selectedJobs = KanbanBoardForm::selectedRecords(kanbanBoardTmpProcessJob_ds);

        if (selectedJobs)
        {
            int selectedJobsCount = conlen(selectedJobs);
            for (conIdx = 1; conIdx <= selectedJobsCount; conIdx++)
            {
                KanbanBoardTmpProcessJob kanbanBoardTmpProcessJob = conpeek(selectedJobs, conIdx);
                if (kanbanBoardTmpProcessJob.Express == NoYes::No)
                {
                    //found at least one kanban that is currently not a priority
                    isPriority = NoYes::Yes;
                    break;
                }
            }

            KanbanBoardWorkCellForm::UpdateSelectedJobsPriority(selectedJobs, isPriority);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Triggers design updates to create or update the <c>InventDimFormSetup</c> helpers.
    /// </summary>
    /// <param name="_mode">
    ///    An <c>InventDimFormDesignUpdate</c> value that specifies the type of action; for example,
    ///    initialize or update.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    An invalid parameter was specified.
    /// </exception>
    public void updateDesign(InventDimFormDesignUpdate _mode)
    {
        Set     set;
        InventDimParm   inventDimParm;

        switch (_mode)
        {
            case InventDimFormDesignUpdate::Init:
                inventDimParm.initProductDimensionsAllGroups();

                if (!inventDimFormSetupProcessJobList)
                {
                    set = new Set(Types::String);
                    set.add(inventDimProcessJobList.name());
                    inventDimFormSetupProcessJobList = InventDimCtrl::newFromFormValidDataSources(formRun,set);
                    inventDimFormSetupProcessJobList.parmDimParmVisibleGrid(inventDimParm.data());
                }
                if (!inventDimFormSetupPickListPegging)
                {
                    set = new Set(Types::String);
                    set.add(inventDimPickListAndPegging.name());
                    inventDimFormSetupPickListPegging = InventDimCtrl::newFromFormValidDataSources(formRun,set);
                    inventDimFormSetupPickListPegging.parmDimParmVisibleGrid(inventDimParm.data());
                }
                if (!inventDimFormSetupTransferJobList)
                {
                    set = new Set(Types::String);
                    set.add(inventDimTransferJobList.name());
                    inventDimFormSetupTransferJobList = InventDimCtrl::newFromFormValidDataSources(formRun,set);
                    inventDimFormSetupTransferJobList.parmDimParmVisibleGrid(inventDimParm.data());
                }

            case InventDimFormDesignUpdate::Active:
                inventDimFormSetupProcessJobList.formActiveSetup();
                inventDimFormSetupProcessJobList.formSetControls(true);
                inventDimFormSetupPickListPegging.formActiveSetup();
                inventDimFormSetupPickListPegging.formSetControls(true);
                inventDimFormSetupTransferJobList.formActiveSetup();
                inventDimFormSetupTransferJobList.formSetControls(true);
                break;

            default:
                throw error(strFmt("@SYS54195",funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkCellFilterValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that the work cell filter of the form is valid.
    /// </summary>
    /// <param name="_workCellFilter">The current work cell filter.</param>
    /// <returns>true if the filter is valid; otherwise, false.</returns>
    public boolean isWorkCellFilterValid(WrkCtrId _workCellFilter)
    {
        boolean isWorkCellFilterValid = true;

        if (_workCellFilter)
        {
            isWorkCellFilterValid = WrkCtrResourceGroup::isWorkCellValid(_workCellFilter);
        }

        return isWorkCellFilterValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static KanbanBoardWorkCellForm construct()
    {
        return new KanbanBoardWorkCellForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a helper class for the kanban board form class based on the <c>FormRun</c> data.
    /// </summary>
    /// <param name="_formRun">
    /// A <c>FormRun</c> object that represents the kanban board form.
    /// </param>
    /// <param name="_inventDimProcessJobList">
    /// A data source with the inventory dimensions of the process jobs list.
    /// </param>
    /// <param name="_inventDimPickListPegging">
    /// A data source with the inventory dimensions of the picking list and pegging.
    /// </param>
    /// <param name="_inventDimTransferJobList">
    /// A data source with the inventory dimensions of the transfer jobs list.
    /// </param>
    /// <returns>
    /// An instance of the <c>KanbanBoardWorkCellForm</c> class.
    /// </returns>
    public static KanbanBoardWorkCellForm newForm(
        FormRun        _formRun,
        FormDataSource _inventDimProcessJobList,
        FormDataSource _inventDimPickListPegging,
        FormDataSource _inventDimTransferJobList)
    {
        if (!_formRun)
        {
            return null;
        }

        KanbanBoardWorkCellForm kanbanBoardWorkCellForm = KanbanBoardWorkCellForm::construct();
        kanbanBoardWorkCellForm.parmFormRun(_formRun);
        kanbanBoardWorkCellForm.parmInventDimProcessJobList(_inventDimProcessJobList);
        kanbanBoardWorkCellForm.parmInventDimPickListAndPegging(_inventDimPickListPegging);
        kanbanBoardWorkCellForm.parmInventDimTransferJobList(_inventDimTransferJobList);

        return kanbanBoardWorkCellForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renewWorkCellFilter</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Obtains a new work cell filter from the user by using the <c>KanbanBoardWorkCellProcessFilter</c>
    ///    form.
    /// </summary>
    /// <param name="_workCellFilterRecId">
    ///    The current work cell filter record identifier.
    /// </param>
    /// <param name="_isShowSuppressKanbanQty">
    ///    A Boolean value that indicates whether the suppressed quantity must be displayed; optional.
    /// </param>
    /// <param name="_isSuppressKanbanQty">
    ///    A <c>NoYes</c> value that indicates whether the quantity must be suppressed; optional.
    /// </param>
    /// <returns>
    ///    The new filter if the user updated it; otherwise, the previous filter.
    /// </returns>
    public static container renewWorkCellFilter(recId _workCellFilterRecId,
                                                boolean _isShowSuppressKanbanQty = false,
                                                NoYes _isSuppressKanbanQty = NoYes::No)
    {
        boolean         cancel = false;

        recId newWorkCellFilter = _workCellFilterRecId;
        NoYes isSuppressKanbanQty = _isSuppressKanbanQty;

        FormRun filterFormRun = classfactory.formRunClass(new Args(formstr(KanbanBoardWorkCellFilter)));
        filterFormRun.init();

        Object obj = filterFormRun;
        obj.parmWorkCellFilter(_workCellFilterRecId);
        obj.IsShowSuppressKanbanQty(_isShowSuppressKanbanQty);
        obj.parmIsSuppressKanbanQty(_isSuppressKanbanQty);

        filterFormRun.run();
        filterFormRun.wait();

        cancel = !filterFormRun.closedOk();

        if (   !cancel
            && obj.parmWorkCellFilter())
        {
            newWorkCellFilter = obj.parmWorkCellFilter();
            isSuppressKanbanQty = obj.parmIsSuppressKanbanQty();
        }

        return [cancel,newWorkCellFilter,isSuppressKanbanQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSelectedJobsPriority</Name>
				<Source><![CDATA[
    /// <summary>
    ///    update the kanban priority of one or more selected kanban jobs.
    /// </summary>
    /// <param name="_selectedJobs">
    ///    The selected jobs.
    /// </param>
    /// <param name="_isPriority">
    ///    The priority value that should be set; optional.
    /// </param>
    public static void updateSelectedJobsPriority(container _selectedJobs,
                                                         NoYes _isPriority = NoYes::No)
    {
        Kanban                          kanban;
        int                             selectedJobsCount = conlen(_selectedJobs);
        int                             conIdx;

        //update
        ttsbegin;
        for (conIdx = 1; conIdx <= selectedJobsCount; conIdx++)
        {
            KanbanBoardTmpProcessJob kanbanBoardTmpProcessJob = conpeek(_selectedJobs, conIdx);
            Kanban kanbanRecord = Kanban::findKanbanJobRecId(kanbanBoardTmpProcessJob.Job);
            kanban.setPriority(_isPriority, 0, kanbanRecord.KanbanId);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFilter</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies that the custom filter of the form is valid.
    /// </summary>
    /// <param name="_workCellFilterRecId">
    ///    The current work cell filter.
    /// </param>
    /// <returns>
    ///    true if the filter is valid; otherwise, false.
    /// </returns>
    public static boolean validateFilter(RecId _workCellFilterRecId)
    {
        boolean filtersValid = false;

        if (_workCellFilterRecId)
        {
            WrkCtrResourceGroup wrkCtrResourceGroup = WrkCtrResourceGroup::find(_workCellFilterRecId);

            if (   wrkCtrResourceGroup.RecId
                && wrkCtrResourceGroup.IsWorkCell)
            {
                filtersValid = true;
            }
        }

        return filtersValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
