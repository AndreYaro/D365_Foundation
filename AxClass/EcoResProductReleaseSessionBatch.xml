<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductReleaseSessionBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>EcoResProductReleaseSessionBatch</c> class is responsible for executing a product release
///    session in batch mode.
/// </summary>
class EcoResProductReleaseSessionBatch extends RunBaseBatch implements BatchRetryable
{
    EcoResReleaseSessionRecId   releaseSessionRecId;
    boolean                     showInfologUponErrors;
    boolean                     runInBatch;

    #define.CurrentVersion(5)
    #localmacro.CurrentList
        releaseSessionRecId,
        showInfologUponErrors,
        runInBatch
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmRunInBatch</Name>
				<Source><![CDATA[
    public boolean parmRunInBatch(boolean _runInBatch = runInBatch)
    {
        runInBatch = _runInBatch;
        return runInBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowInfologUponErrors</Name>
				<Source><![CDATA[
    public boolean parmShowInfologUponErrors(boolean _showInfolog = showInfologUponErrors)
    {
        showInfologUponErrors = _showInfolog;
        return showInfologUponErrors;
    }

]]></Source>
			</Method>
			<Method>
				<Name>blockReleaseSession</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Blocks the release session.
    /// </summary>
    protected void blockReleaseSession()
    {
        EcoResReleaseSession::blockReleaseSession(releaseSessionRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a dialog to execute a release session.
    /// </summary>
    /// <returns>
    ///    A dialog object.
    /// </returns>
    public Object dialog()
    {
        this.batchInfo().parmBatchExecute(NoYes::Yes);
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReleaseSessionRecId</Name>
				<Source><![CDATA[
    public EcoResReleaseSessionRecId parmReleaseSessionRecId(EcoResReleaseSessionRecId _releaseSessionRecId = releaseSessionRecId)
    {
        releaseSessionRecId = _releaseSessionRecId;

        return releaseSessionRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the release session.
    /// </summary>
    /// <remarks>
    ///    The products will be released to the legal entities according to the release session settings.
    /// </remarks>
    public void run()
    {
        boolean releaseResult = EcoResProductReleaseSessionManager::newFromReleaseSessionRecId(releaseSessionRecId).execute();
        if (!releaseResult && !runInBatch && showInfologUponErrors)
        {
            checkFailed(
                "@SYS331199",
                "",
                SysInfoAction_MenuFunction::newMenuItem(menuitemDisplayStr(EcoResProductReleaseSessions), MenuItemType::Display));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unblockReleaseSession</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Unblocks the release session.
    /// </summary>
    protected void unblockReleaseSession()
    {
        EcoResReleaseSession::unblockReleaseSession(releaseSessionRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Check whether Tracking dimension group with Russian mandatory would be used in company without Russian context
    /// </summary>
    /// <param name="_calledFrom">
    ///    The reference to the caller object.
    /// </param>
    /// <returns>
    ///    False in case of attempt to use Tracking dimension group with Russian mandatory dimension in company without Russian context.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        return super(_calledFrom) && 
               EcoResTrackingDimGroupSetup::checkRUReleaseDimForNotRuContextCompany(releaseSessionRecId) &&
               EcoResTrackingDimGroupSetup::checkReleaseOwnerNotEnabledWithoutInventProfile_RU(releaseSessionRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EcoResProductReleaseSessionBatch construct()
    {
        return new EcoResProductReleaseSessionBatch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS321273";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        EcoResProductReleaseSessionBatch::runJob(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>EcoResProductReleaseSessionBatch</c> class.
    /// </summary>
    /// <param name="_args">
    ///    The input arguments.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>EcoResProductReleaseSessionBatch</c> class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    An <c>EcoResReleaseSession</c> table buffer was not passed to the method.
    /// </exception>
    public static EcoResProductReleaseSessionBatch newFromArgs(Args _args)
    {
        EcoResProductReleaseSessionBatch    productReleaseSessionBatch = EcoResProductReleaseSessionBatch::construct();

        if (    _args
            &&  _args.record() is EcoResReleaseSession
            &&  _args.record().RecId)
        {
            productReleaseSessionBatch.getLast();

            productReleaseSessionBatch.parmReleaseSessionRecId(_args.record().RecId);
            productReleaseSessionBatch.init();
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return productReleaseSessionBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays a <c>RunBase</c> dialog box and executes the <c>RunBase</c> job if the OK button is
    ///    clicked.
    /// </summary>
    /// <param name="_args">
    ///    The arguments for the <c>EcoResProductReleaseSessionBatch</c> object.
    /// </param>
    /// <param name="_showInfoLogOnError">
    ///    If true, the user will get an infolog with the result.
    /// </param>
    /// <param name="_runInBatch">
    ///    If true the batch dialog will be prompted
    /// </param>
    /// <returns>
    ///    true, if the <c>RunBase</c> job is executed successfully; otherwise, false.
    /// </returns>
    public static boolean runJob(Args _args, boolean _showInfoLogOnError = true, boolean _runInBatch = true)
    {
        EcoResProductReleaseSessionBatch    productReleaseSessionBatch = EcoResProductReleaseSessionBatch::newFromArgs(_args);
        productReleaseSessionBatch.parmShowInfologUponErrors(_showInfoLogOnError);
        productReleaseSessionBatch.parmRunInBatch(_runInBatch);

        boolean ret = true;

        productReleaseSessionBatch.blockReleaseSession();

        if (productReleaseSessionBatch.promptIfRunInBatch(_runInBatch))
        {
            productReleaseSessionBatch.parmRunInBatch(productReleaseSessionBatch.parmInBatch());
            productReleaseSessionBatch.runOperation();
        }
        else
        {
            //prompt() can return false in two situations - dialog has been cancelled or a job is to be run in batch mode
            //we can check if a batch job has been created to distinguish between these two situations
            if (!productReleaseSessionBatch.batchInfo().parmBatch().RecId)
            {
                productReleaseSessionBatch.unblockReleaseSession();
                //return false only if cancelled
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptIfRunInBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prompts the batch dialog in case of running in batch.
    /// </summary>
    /// <param name = "_runInBatch">If true the batch dialog will be prompted.</param>
    /// <returns>true if the product release session is to be executed; otherwise, false.</returns>
    protected boolean promptIfRunInBatch(boolean _runInBatch)
    {
        if (_runInBatch)
        {
            //The dialog is only shown when runInBatch was selected
            return this.prompt();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>