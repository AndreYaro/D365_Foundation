<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerSettlementsAutomationProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerSettlementsAutomationProcessor</c> class handles the orchestration of the execution of the ledger settlements automation
/// processing. This class handles the translation of saved criteria to runtime criteria, and the execution of ledger settlement process.
/// </summary>
internal final class LedgerSettlementsAutomationProcessor
{
    private BatchHeader batchHeader;
    private ProcessExecutionSourceLink sourceLink;

    private static const str LedgerSettleMainAccountsProcessed = 'Number of main accounts settled: %1';
    private static const str LedgerSettleDimensionsMatched = 'Number of dimensions matched in settlement process: %1';
    private static const str LedgerSettleFinancialTagsMatched = 'Number of financial tags matched in settlement process: %1';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    internal void run(ProcessScheduleWorkItem _processScheduleWorkItem)
    {
        Microsoft.Dynamics.Ax.Xpp.ErrorException errorEx;
        LedgerTransSettlementAccount ledgerTransSettlementAccount;
        MainAccountRecId mainAccountRecId;
        LedgerSettleBatch ledgerSettleBatch;
        LedgerSettleBatch ledgerSettleBatchDependants;
        MainAccount mainAccount;
        int taskCount = 1;

        try
        {
            ttsbegin;

            if (!LedgerTransSettlementAdvancedParameters::isPASettlementParameterEnabled())
            {
                throw error(strFmt('@GeneralLedger:LedgerSettlementProcessAutomationAwarenessParmDisabledErr', Ledger::name()));
            }

            // Hydrate batch header - This must happen before all other actions to ensure tasks are added to the correct batch.
            sourceLink = this.createProcessExecutionSourceLink(_processScheduleWorkItem);

            LedgerSettlementsAutomationExecutionContract automationExecutionContract = this.initExecutionContract(_processScheduleWorkItem, sourceLink.RecId);

            this.getBatchHeader();

            // Create a task for each main account to settle transactions against
            LedgerSettlementsAutomationMatchSelection ledgerSettlementsAutomationMatchSelection;

            RefRecId ledgerSettlementsAutomationCriteriaRecId = automationExecutionContract.processLedgerSettlementsAutomationCriteria.RecId;

            this.logSettlementTelemetry(ledgerSettlementsAutomationCriteriaRecId);

            // Join against the LedgerTransSettleAccount table to make sure the account is still a valid settlement account.
            // This is to catch the scenario where a process was created using specific settlement accounts, but after that, one or more of those
            // accounts were removed from the LedgerTransSettlementAccount table.
            while select SelectionRecId from ledgerSettlementsAutomationMatchSelection
                join MainAccountId from mainAccount
                    where mainAccount.RecId == ledgerSettlementsAutomationMatchSelection.SelectionRecId
                        && mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                exists join ledgerTransSettlementAccount
                    where ledgerTransSettlementAccount.MainAccount == mainAccount.RecId
                        && ledgerSettlementsAutomationMatchSelection.LedgerSettlementsAutomationCriteria == ledgerSettlementsAutomationCriteriaRecId
                        && ledgerSettlementsAutomationMatchSelection.SelectionCriteria == LedgerSettlementsAutomationCriteriaSelection::MainAccounts
            {
                if (taskCount == 1)
                {
                    ledgerSettleBatch = LedgerSettleBatch::constructFromAutomationExecutionContract(automationExecutionContract, ledgerSettlementsAutomationMatchSelection.SelectionRecId);
                    ledgerSettleBatch.batchInfo().parmCaption(strFmt('@GeneralLedger:LedgerSettlementsAutomationTaskName', mainAccount.MainAccountId));
                    
                    batchHeader.addTask(ledgerSettleBatch);
                }
                else
                {
                    //Add task with dependency on previous task created.  Run them in serial.
                    ledgerSettleBatchDependants = LedgerSettleBatch::constructFromAutomationExecutionContract(automationExecutionContract, ledgerSettlementsAutomationMatchSelection.SelectionRecId);
                    ledgerSettleBatchDependants.batchInfo().parmCaption(strFmt('@GeneralLedger:LedgerSettlementsAutomationTaskName', mainAccount.MainAccountId));
                    
                    batchHeader.addTask(ledgerSettleBatchDependants);
                    batchHeader.addDependency(ledgerSettleBatchDependants, ledgerSettleBatch, BatchDependencyStatus::Finished);

                    // swap the values so the task just created is now the header
                    ledgerSettleBatch = ledgerSettleBatchDependants;
               }

                taskCount ++;
            }

            // Create monitor task and add dependency
            LedgerSettlementsAutomationRuntimeMonitor monitorTask = this.createRuntimeMonitorTask(sourceLink.RecId, true);
            batchHeader.addTask(monitorTask);
            batchHeader.addDependency(monitorTask, ledgerSettleBatch, BatchDependencyStatus::FinishedOrError);

            batchHeader.save();
           
            ttscommit;
        }
        catch (errorEx)
        {
            this.logFailure(_processScheduleWorkItem, errorEx.Message);

            throw;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBatchHeader</Name>
				<Source><![CDATA[
    private BatchHeader getBatchHeader()
    {
        if (batchHeader == null)
        {
            batchHeader = BatchHeader::getCurrentBatchHeader();
        }

        return batchHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initExecutionContract</Name>
				<Source><![CDATA[
    private LedgerSettlementsAutomationExecutionContract initExecutionContract(
        ProcessScheduleWorkItem _processScheduleWorkItem,
        RefRecId _sourceLinkRecId)
    {
        LedgerSettlementsAutomationExecutionContract automationExecutionContract = LedgerSettlementsAutomationExecutionContract::construct();

        LedgerSettlementsAutomationCriteria ledgerSettlementsAutomationCriteria;
        RefRecId scheduleOccurrenceRecId = _processScheduleWorkItem.parmProcessScheduleOccurrenceRecId();

        automationExecutionContract.processScheduleTypeName = _processScheduleWorkItem.parmProcessScheduleTypeName();
        automationExecutionContract.processScheduleOccurrenceRecId = scheduleOccurrenceRecId;
        automationExecutionContract.processExecutionSourceLinkRecId = _sourceLinkRecId;

        select firstonly * from ledgerSettlementsAutomationCriteria
                where ledgerSettlementsAutomationCriteria.ProcessScheduleOccurrence == scheduleOccurrenceRecId;

        automationExecutionContract.processLedgerSettlementsAutomationCriteria = ledgerSettlementsAutomationCriteria;

        return automationExecutionContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRuntimeMonitorTask</Name>
				<Source><![CDATA[
    private LedgerSettlementsAutomationRuntimeMonitor createRuntimeMonitorTask(
        RefRecId _executionSourceLinkRecId,
        boolean _isFinalRuntimeMonitor)
    {
        LedgerSettlementsAutomationRuntimeMonitor runtimeMonitor = new LedgerSettlementsAutomationRuntimeMonitor(
            classStr(LedgerSettlementsAutomationRuntimeMonitor),
            methodStr(LedgerSettlementsAutomationRuntimeMonitor, runMonitor),
            SysOperationExecutionMode::Synchronous);

        LedgerSettlementsAutomationRuntimeMonitorContract contract = runtimeMonitor.getDataContractInfoObject().dataContractObject() as LedgerSettlementsAutomationRuntimeMonitorContract;
        contract.parmProcessExecutionSourceLinkRecId(_executionSourceLinkRecId);
        contract.parmBatchJobId(this.getBatchHeader().parmBatchHeaderId());
        contract.parmIsFinalRuntimeMonitor(_isFinalRuntimeMonitor);
        contract.parmSuccessMessage("@GeneralLedger:LedgerSettlementsAutomationSucceeded");
        contract.parmFailureMessage("@GeneralLedger:LedgerSettlementsAutomationFailed");

        this.getBatchHeader().addTask(runtimeMonitor);

        return runtimeMonitor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProcessExecutionSourceLink</Name>
				<Source><![CDATA[
    private ProcessExecutionSourceLink createProcessExecutionSourceLink(ProcessScheduleWorkItem _processScheduleWorkItem)
    {
        ProcessExecutionSourceLinkItem sourceLinkItem = ProcessExecutionSourceLinkItem::construct();
        sourceLinkItem.parmExecutionId(_processScheduleWorkItem.parmExecutionId());
        sourceLinkItem.parmProcessScheduleOccurrenceRecId(_processScheduleWorkItem.parmProcessScheduleOccurrenceRecId());
        sourceLinkItem.parmProcessScheduleSeriesPatternRecId(_processScheduleWorkItem.parmProcessScheduleSeriesPatternRecId());
        sourceLinkItem.parmMessage("@GeneralLedger:LedgerSettlementsAutomationExecuting");
        sourceLinkItem.parmExecutionSourceStatus(ProcessExecutionSourceStatus::Warning);
        
        return ProcessExecutionSourceLink::insertSourceLink(sourceLinkItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logFailure</Name>
				<Source><![CDATA[
    private void logFailure(ProcessScheduleWorkItem _processScheduleWorkItem, ProcessExecutionSourceLinkMessage _messageText)
    {
        ttsbegin;
        
        if (sourceLink.RecId != 0)
        {            
            sourceLink.RefRecId = 0;
            sourceLink.RefTableId = 0;
            sourceLink.Header = '';
            sourceLink.Message = "@GeneralLedger:LedgerSettlementsAutomationFailed";
            sourceLink.Status = ProcessExecutionSourceStatus::Error;
            sourceLink.update();
        }
        else
        {
            ProcessExecutionSourceLinkItem sourceLinkItem = ProcessExecutionSourceLinkItem::construct();
            sourceLinkItem.parmExecutionId(_processScheduleWorkItem.parmExecutionId());
            sourceLinkItem.parmProcessScheduleOccurrenceRecId(_processScheduleWorkItem.parmProcessScheduleOccurrenceRecId());
            sourceLinkItem.parmProcessScheduleSeriesPatternRecId(_processScheduleWorkItem.parmProcessScheduleSeriesPatternRecId());
            sourceLinkItem.parmMessage("@GeneralLedger:LedgerSettlementsAutomationFailed");
            sourceLinkItem.parmSourceTableId(0);
            sourceLinkItem.parmSourceRecId(0);
            sourceLinkItem.parmExecutionSourceStatus(ProcessExecutionSourceStatus::Error);

            sourceLink = ProcessExecutionSourceLink::insertSourceLink(sourceLinkItem);
        }

        if (_messageText == '')
        {
            _messageText = "@GeneralLedger:LedgerSettlementsAutomationFailed";
        }
        
        ProcessExecutionMessageLogItem messageLogItem = ProcessExecutionMessageLogItem::construct();
        messageLogItem.parmProcessExecutionSourceLink(sourceLink.RecId);
        messageLogItem.parmException(Exception::Error);
        messageLogItem.parmMessage(_messageText);
        
        ProcessExecutionMessageLog::insertMessage(messageLogItem);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logSettlementTelemetry</Name>
				<Source><![CDATA[
    private void logSettlementTelemetry(RefRecId _ledgerSettlementsAutomationCriteriaRecId)
    {
        this.logInformation(
            strFmt(LedgerSettleMainAccountsProcessed,
            this.getNumberOfMatchCriteriaProcessed(
                _ledgerSettlementsAutomationCriteriaRecId,
                LedgerSettlementsAutomationCriteriaSelection::MainAccounts)));

        this.logInformation(
            strFmt(LedgerSettleDimensionsMatched,
            this.getNumberOfMatchCriteriaProcessed(
                _ledgerSettlementsAutomationCriteriaRecId,
                LedgerSettlementsAutomationCriteriaSelection::FinancialDimensions)));

        this.logInformation(
            strFmt(LedgerSettleFinancialTagsMatched,
            this.getNumberOfMatchCriteriaProcessed(
                _ledgerSettlementsAutomationCriteriaRecId,
                LedgerSettlementsAutomationCriteriaSelection::Tags)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfMatchCriteriaProcessed</Name>
				<Source><![CDATA[
    private int getNumberOfMatchCriteriaProcessed(
        RefRecId _ledgerSettlementsAutomationCriteriaRecId,
        LedgerSettlementsAutomationCriteriaSelection _matchCriteria)
    {
        LedgerSettlementsAutomationMatchSelection ledgerSettlementsAutomationMatchSelection;

        select count(RecId) from ledgerSettlementsAutomationMatchSelection
            where ledgerSettlementsAutomationMatchSelection.LedgerSettlementsAutomationCriteria == _ledgerSettlementsAutomationCriteriaRecId
                && ledgerSettlementsAutomationMatchSelection.SelectionCriteria == _matchCriteria;

        return ledgerSettlementsAutomationMatchSelection.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logInformation</Name>
				<Source><![CDATA[
    private SysInstrumentationLogger logInformation(str _message)
    {
        SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(classStr(LedgerSettlementsAutomationProcessor));
        instrumentationLogger.logInformation(_message);

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>