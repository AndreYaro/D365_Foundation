<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMobileAppServiceXMLTranslator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSMobileAppServiceXMLTranslator</c> class translates the xml received from <c>WHSMobileAppServiceFacade</c> class.
/// </summary>
public class WHSMobileAppServiceXMLTranslator extends WHSServiceXMLTranslator
{
    private const int  MaxInputSize       = 2500000;

    private WHSMobileAppServiceXMLDecorator decorator;
    private Map                             controlsMap;
    private container                       receivedContainer;
    private boolean                         isErrorState;
    private ItemId                          ItemId;
    private Map                             productDimMap;

    private boolean trimOnlyTrailingSpacesFlightIsEnabled = WHSMobileAppServiceXMLTranslatorTrimOnlyTrailingSpacesV2Flight::instance().isEnabled();
    private WHSMobileAppServiceXMLAttributeFilter attributeFilter;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSMobileAppServiceXMLTranslator construct()
    {
        return new WHSMobileAppServiceXMLTranslator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReceivedContainer</Name>
				<Source><![CDATA[
    public void parmReceivedContainer(container _receivedContainer)
    {
        receivedContainer = _receivedContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReceivedCon</Name>
				<Source><![CDATA[
    internal container parmReceivedCon()
    {
        return receivedContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readXMLDoThrow</Name>
				<Source><![CDATA[
    public container readXMLDoThrow(XML _xmlString)
    {
        container con;
        WHSRFPassthrough pass = new WHSRFPassthrough(Types::String, Types::String);

        this.validateXmlSize(_xmlString);

        using (System.IO.StringReader stringReader = new System.IO.StringReader(_xmlString))
        {
            using (System.Xml.XmlTextReader reader = WHSWorkExecuteSerializationHelper::createXMLTextReader(stringReader))
            {
                if (!_xmlString || _xmlString == #XMLEmpty)
                {
                    return con;
                }
                // Add the Mode/Step to the container
                con = conIns(con, #StateInfo, [WHSWorkExecuteMode::WebRequestDefault, 0]);

                // Read through the XML and get all the elements and associated attributes
                container controlsCon = conNull();
                while (reader.Read())
                {
                    if (reader.get_NodeType() == System.Xml.XmlNodeType::Element)
                    {
                        var elementName = reader.get_Name();
                        switch (elementName)
                        {
                            case #XMLParentNode:
                            case #XMLAuthenticationNode:
                                pass.insert(#UserId, reader.GetAttribute(#XMLAuthNodeUserId));
                                pass.insert(#UserSessionId, reader.GetAttribute(#XMLAuthNodeSessionId));

                                str token = reader.GetAttribute(#XMLSessionToken);
                                if (token)
                                {
                                    pass.parmSessionToken(str2Guid(token));
                                }
                                break;

                            case #XMLControlNode:
                                controlsCon = this.addNodeToContainer(reader, controlsCon);
                                break;

                            case #XMLDeviceNode:
                                this.readDeviceNode(pass, reader);
                                break;

                            case #XMLStepNode:
                                pass.parmMobileAppStepId(reader.GetAttribute(#Id));
                                break;
                        }
                    }
                }

                pass.parmRequestXml(_xmlString);
                // Add the Pass Through data to the container
                con = conIns(con, #PassthroughInfo, pass.pack());
                // Add the controls data to the container
                con += controlsCon;
            }
        }

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readDeviceNode</Name>
				<Source><![CDATA[
    private void readDeviceNode(WHSRFPassthrough _pass, System.Xml.XmlTextReader _reader)
    {
        var mobileDeviceData = WHSMobileDeviceData::newFromValues(
            str2Guid(_reader.GetAttribute(#XMLDeviceIdAttribute)),
            _reader.GetAttribute(#XMLAppVersionAttribute),
            _reader.GetAttribute(#XMLDeviceBrandNameAttribute),
            _reader.GetAttribute(#XMLDeviceModelAttribute),
            _reader.GetAttribute(#XMLDevicePlatformAttribute),
            _reader.GetAttribute(#XMLDevicePlatformVersionAttribute),
            WHSMobileDeviceAlertFlight::instance().isEnabled() ? _reader.GetAttribute(#XMLDeviceAlertAttribute) : '');

        if (WHSMobileAppDeviceFriendlyNameAndHWIDFlight::instance().isEnabled())
        {
            mobileDeviceData.hardwareIdentification = _reader.GetAttribute(#XMLDeviceHardwareIdentificationAttribute);
        }

        _pass.setDeviceData(mobileDeviceData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateXmlSize</Name>
				<Source><![CDATA[
    private void validateXmlSize(System.String _xmlString)
    {
        // 10M characters corresponds >= 10Mb message.
        // If we need to send/receive bigger messages then we should rethink the architecture.
        const int maxNumberOfChars = 10000000;
        System.String xmlMessageAsString = _xmlString;
        if (xmlMessageAsString.Length > maxNumberOfChars)
        {
            throw error("@WAX:MaxXmlSizeExceeded");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNodeToContainer</Name>
				<Source><![CDATA[
    private container addNodeToContainer(System.Xml.XmlTextReader _xmlReader, container _con)
    {
        container controlCon = conNull();

        str xmlControlName = _xmlReader.GetAttribute(#XMLControlName);
        str xmlControlData = _xmlReader.GetAttribute(#XMLControlData);
        xmlControlData = trimOnlyTrailingSpacesFlightIsEnabled
            ? strRTrim(xmlControlData)
            : strLRTrim(xmlControlData);                       
        
        controlCon = conIns(controlCon, 1, this.readAttribute(_xmlReader, #XMLControlCtrlType),
                                        xmlControlName,
                                        this.readAttribute(_xmlReader, #XMLControlLabel),
                                        str2Int(this.readAttribute(_xmlReader, #XMLControlNewLine)),
                                        xmlControlData,
                                        this.readAttribute(_xmlReader, #XMLControlType),
                                        str2Int(this.readAttribute(_xmlReader, #XMLControlLength)),
                                        this.readAttribute(_xmlReader, #XMLControlError),
                                        str2Int(this.readAttribute(_xmlReader, #XMLControlDefaultButton)),
                                        str2Int(this.readAttribute(_xmlReader, #XMLControlEnabled)),
                                        this.readAttribute(_xmlReader, #XMLControlSelected),
                                        this.readAttribute(_xmlReader, #XMLControlColor),
                                        str2Int(this.readAttribute(_xmlReader, #XMLControlStatus)),
                                        str2Int(this.readAttribute(_xmlReader, #XMLControlInputType)),
                                        this.readAttribute(_xmlReader, #XMLControlDisplayArea),
                                        this.readAttribute(_xmlReader, #XMLControlAttachedTo),
                                        this.readAttribute(_xmlReader, #XMLControlInstructionControl));

        str contextSelected = _xmlReader.GetAttribute(#XMLControlContextSelected);
        if (contextSelected)
        {
            controlCon += contextSelected;
        }

        return _con + [controlCon];
    }

]]></Source>
			</Method>
			<Method>
				<Name>readAttribute</Name>
				<Source><![CDATA[
    private anytype readAttribute(System.Xml.XmlTextReader _xmlReader, str _attributeName)
    {
        str value = _xmlReader.GetAttribute(_attributeName);

        if (!value)
        {
            return WHSMobileAppServiceXMLAttributeFilter::defaultValue(_attributeName);
        }

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pageTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the page's title.
    /// </summary>
    /// <param name = "_pagePattern">The pattern of the page.</param>
    /// <param name = "_pass">The pass</param>
    /// <param name = "_controlsList">The control list.</param>
    /// <returns>The page's title.</returns>
    protected str pageTitle(WHSMobileAppPagePattern _pagePattern, WhsrfPassthrough _pass, List _controlsList)
    {
        if (_pagePattern == WHSMobileAppPagePattern::Menu)
        {
            return this.findFirstNonErrorControlLabel(_controlsList);
        }

        if (_pass && _pass.exists(#MenuItem))
        {
            return WHSRFMenuItemTable::find(_pass.lookup(#MenuItem)).rfTitle;
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXML</Name>
				<Source><![CDATA[
    public XML createXML(container _con)
    {
        XML result;
        container	con = _con;
        int length = conLen(con);

        this.initializeDecorator(con);

        using (System.IO.StringWriter stringWriter = new System.IO.StringWriter())
        {
            using(System.Xml.XmlTextWriter xmlTextWriter = WHSWorkExecuteSerializationHelper::createXMLTextWriter(stringWriter))
            {
                // Initialize a blank XML document
                xmlTextWriter.WriteProcessingInstruction(#XmlXml, #XmlVersion);

                // Check if container has any authentication data and controls. If not then return blank XML
                if (length >= #PassThroughInfo)
                {
                    container subCon = conPeek(con, #PassthroughInfo);
                    WhsrfPassthrough pass;
                    if (conLen(subCon) > 0)
                    {
                        pass = WHSRFPassthrough::create(subCon);
                    }
                    this.initProductImageDetails();
                    List controlsList = new List(Types::AnyType);
                    this.buildControlMapList(controlsList, con);

                    xmlTextWriter.WriteStartElement(#XMLParentNode);

                    WHSMobileAppPagePattern pagePattern = decorator.requestedPattern();
                    attributeFilter = WHSMobileAppServiceXMLAttributeFilter::newFromAppVersion(pass.parmAppVersion());
                    this.addControlsNode(xmlTextWriter, pagePattern, controlsList, pass);

                    if (this.canAddStepInfo(pagePattern))
                    {
                        this.addStepInfoNode(xmlTextWriter, controlsList, pass, pagePattern);
                    }
                    
                    this.addAuthenticationNode(xmlTextWriter, pass);
                    this.addDeviceIdentificationNode(xmlTextWriter, pass);
                    this.addServerIdentificationNode(xmlTextWriter);                    
                    this.addWarehouseNode(xmlTextWriter, pass);

                    xmlTextWriter.WriteEndElement();
                }

                System.Text.StringBuilder stringBuilder = stringWriter.GetStringBuilder();
                result = stringBuilder.ToString();
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWarehouseNode</Name>
				<Source><![CDATA[
    private void addWarehouseNode(System.Xml.XmlTextWriter _xmlTextWriter, WhsrfPassthrough _pass)
    {
        if (WHSWarehouseInfoFlight::instance().isEnabled() &&
            _pass &&
            _pass.parmSendWarehouseInfo())
        {
            WHSWorkUserSession userSession = WHSWorkUserSession::find(_pass.parmUserId());

            if (userSession)
            {
                //<Warehouse Id="{warehouseId}" Name="{warehouseName}" SiteName="{siteName}" SiteId="{siteId}" DataAreaId="{company}"/>

                InventLocation inventLocation = InventLocation::find(userSession.InventLocationId);
                InventSite inventSite = inventLocation.inventSite();

                _xmlTextWriter.WriteStartElement(#XMLWarehouseNode);

                _xmlTextWriter.WriteAttributeString(#XMLWarehouseIdAttribute, userSession.InventLocationId);
                _xmlTextWriter.WriteAttributeString(#XMLWarehouseNameAttribute, inventLocation.Name);
                _xmlTextWriter.WriteAttributeString(#XMLWarehouseSiteIdAttribute, inventSite.SiteId);
                _xmlTextWriter.WriteAttributeString(#XMLWarehouseSiteNameAttribute, inventSite.Name);
                _xmlTextWriter.WriteAttributeString(#XMLWarehouseDataAreaIdAttribute, curExt());

                _xmlTextWriter.WriteEndElement();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addControlsNode</Name>
				<Source><![CDATA[
    private void addControlsNode(System.Xml.XmlTextWriter _xmlTextWriter, WHSMobileAppPagePattern _pagePattern, List _controlsList, WhsrfPassthrough _pass)
    {
        _xmlTextWriter.WriteStartElement(#XMLControlsNode);

        _xmlTextWriter.WriteAttributeString(#XMLControlPagePattern, enum2Symbol(enumNum(WHSMobileAppPagePattern), enum2int(_pagePattern)));

        str pageTitle = this.pageTitle(_pagePattern, _pass, _controlsList);
        _xmlTextWriter.WriteAttributeString(#XMLControlPageTitle, pageTitle);
        _xmlTextWriter.WriteAttributeString(#XMLControlMenuItemName, _pass.parmMenuItem());
        
        if (WHSWorkUserSession::isInDetourSession(_pass.parmUserId()))
        {
            _xmlTextWriter.WriteAttributeString(#XMLIsInDetourSession, '1');
        }

        WHSMobileAppAttachedImageDetails imageDetails = this.createImageDetails(_pagePattern);
        if (imageDetails)
        {
            imageDetails.parmDataAreaId(curExt());
            this.addImageDetailsAttribute(_xmlTextWriter, imageDetails);

            if (WHSCheckImageExistanceForWMAFlightV2::instance().isEnabled())
            {
                boolean imageExists = this.imageExists(imageDetails);
                this.addImageExistsAttribute(_xmlTextWriter, imageExists);
            }
        }

        WHSMobileAppPageInfo pageInfo = this.buildPageInfo(_controlsList, _pass);
        this.buildControlBody(_xmlTextWriter, pageInfo);
        _xmlTextWriter.WriteEndElement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddStepInfo</Name>
				<Source><![CDATA[
    private boolean canAddStepInfo(WHSMobileAppPagePattern _pagePattern)
    {
        return _pagePattern == WHSMobileAppPagePattern::Default ||
               _pagePattern == WHSMobileAppPagePattern::Inquiry ||
               _pagePattern == WHSMobileAppPagePattern::InquiryWithNavigation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addStepInfoNode</Name>
				<Source><![CDATA[
    private void addStepInfoNode(System.Xml.XmlTextWriter _xmlTextWriter, List _controlsList, WhsrfPassthrough _pass, WHSMobileAppPagePattern _pagePattern)
    {
        WHSMobileAppStepInfo stepInfo = WHSMobileAppStepInfoBuilderFactory::getBuilder(_pass, _controlsList, _pagePattern).build();
        if (stepInfo)
        {
            _xmlTextWriter.WriteStartElement(#XMLStepNode);
            this.addStepInfoAttributes(_xmlTextWriter, stepInfo);
            _xmlTextWriter.WriteEndElement();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addStepInfoAttributes</Name>
				<Source><![CDATA[
    private void addStepInfoAttributes(System.Xml.XmlTextWriter _xmlTextWriter, WHSMobileAppStepInfo _stepInfo)
    {
        if (_stepInfo.parmStepId())
        {
            _xmlTextWriter.WriteAttributeString(#Id, _stepInfo.parmStepId());
        }

        if (_stepInfo.parmStepIcon())
        {
            var imageDetails = WHSMobileAppAttachedImageDetails::newFromParams(WHSMobileAppImageType::StepIcon, _stepInfo.parmStepIcon());
            _xmlTextWriter.WriteAttributeString(#XMLIconAttribute, imageDetails.serialize());
        }

        if (_stepInfo.parmStepTitle())
        {
            _xmlTextWriter.WriteAttributeString(#XMLStepTitle, _stepInfo.parmStepTitle());
        }

        if (_stepInfo.parmStepInstruction())
        {
            _xmlTextWriter.WriteAttributeString(#XMLStepInstruction, _stepInfo.parmStepInstruction());
        }

        if (_stepInfo.parmExtraInfo())
        {
            MapEnumerator enumer = _stepInfo.parmExtraInfo().getEnumerator();
            while (enumer.moveNext())
            {
                _xmlTextWriter.WriteAttributeString(enumer.currentKey(), enumer.currentValue());
            }
        }

        if (_stepInfo.parmPromotedFields())
        {
            _xmlTextWriter.WriteAttributeString(#XMLStepPromotedFields, _stepInfo.parmPromotedFields());
        }

        if (_stepInfo.parmHighlightedFields())
        {
            _xmlTextWriter.WriteAttributeString(#XMLStepHighlightedFields, _stepInfo.parmHighlightedFields());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createImageDetails</Name>
				<Source><![CDATA[
    private WHSMobileAppAttachedImageDetails createImageDetails(WHSMobileAppPagePattern _pagePattern)
    {
        WHSMobileAppAttachedImageDetails imageDetails;
        if (_pagePattern == WHSMobileAppPagePattern::Login)
        {
            imageDetails = new WHSMobileAppAttachedImageDetails(WHSMobileAppImageType::CompanyLogo, curExt());
        }
        else if (productDimMap.lookup(#ItemId) != '')
        {
            imageDetails = new WHSMobileAppAttachedImageDetails(WHSMobileAppImageType::Product);
            imageDetails.setIdentifierFromMap(productDimMap);
        }
        return imageDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addImageDetailsAttribute</Name>
				<Source><![CDATA[
    private void addImageDetailsAttribute(System.Xml.XmlTextWriter _xmlTextWriter, WHSMobileAppAttachedImageDetails _imageDetails)
    {
        _xmlTextWriter.WriteAttributeString(#XMLImageInfo, _imageDetails.serialize());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addImageExistsAttribute</Name>
				<Source><![CDATA[
    private void addImageExistsAttribute(System.Xml.XmlTextWriter _xmlTextWriter, boolean _imageExists)
    {
        _xmlTextWriter.WriteAttributeString(#XMLImageExists, strFmt('%1', _imageExists));
    }

]]></Source>
			</Method>
			<Method>
				<Name>imageExists</Name>
				<Source><![CDATA[
    private boolean imageExists(WHSMobileAppAttachedImageDetails _imageDetails)
    {
        WHSMobileAppImageProvider imageProvider = WHSMobileAppImageProvider::newFromImageDetails(_imageDetails.serialize());

        if (!imageProvider)
        {
            return false;
        }
        
        imageProvider.setThumbnailImageSize(true); // setting thumbnail to mimic client behavior

        return imageProvider.imageExists();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPageInfo</Name>
				<Source><![CDATA[
    private WHSMobileAppPageInfo buildPageInfo(List _controlsList, WhsrfPassthrough _pass)
    {
        WHSUserId               userId = '';
        WHSWorkUserSessionId    userSessionId = emptyGuid();
        WHSMenuItemName         menuItemName = ''; 

        if (_pass.exists(#UserId))
        {
            userId = _pass.lookup(#UserId);
        }
        if (_pass.exists(#UserSessionId))
        {
            userSessionId = str2Guid(_pass.lookup(#UserSessionId));
        }
        if (_pass.exists(#MenuItem))
        {
            menuItemName = _pass.lookup(#MenuItem);
        }

        return WHSMobileAppPageInfo::newFromParameters(_controlsList, userId, userSessionId, receivedContainer, isErrorState, menuItemName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildControlBody</Name>
				<Source><![CDATA[
    private void buildControlBody(System.Xml.XmlTextWriter _xmlTextWriter, WHSMobileAppPageInfo _pageInfo)
    {
        decorator.decorate(_pageInfo);
        ListEnumerator le = _pageInfo.parmControlsEnumerator();
        while (le.moveNext())
        {
            this.buildControl(_xmlTextWriter, le.current());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProductImageDetails</Name>
				<Source><![CDATA[
    private void initProductImageDetails()
    {
        productDimMap = new Map(Types::String, Types::AnyType);
        productDimMap.insert(#ItemId, '');

        ListEnumerator dimFields = InventDim::dimProductDimensionEnabledFieldList().getEnumerator();
        while (dimFields.moveNext())
        {
            productDimMap.insert(fieldId2Name(tableNum(InventDim), dimFields.current()), '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProductDimControl</Name>
				<Source><![CDATA[
    private boolean isProductDimControl(WHSMobileAppControlName _controlName)
    {
        return productDimMap.exists(_controlName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildControlMapList</Name>
				<Source><![CDATA[
    private void buildControlMapList(List _controlsList, container _con)
    {
        for (int i = #ControlsStart; i <= conLen(_con); ++i)
        {
            container subCon = conPeek(_con, i);
            _controlsList.addEnd(this.buildControlMap(subCon, i));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProductDimValue</Name>
				<Source><![CDATA[
    private void setProductDimValue(WHSMobileAppControlName _controlName, str _data)
    {
        productDimMap.insert(_controlName, _data);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildControlMap</Name>
				<Source><![CDATA[
    private Map buildControlMap(container _con, int _sequence)
    {
        WHSMobileAppControlName controlName = conPeek(_con, #name);
        WHSMobileAppControlType controlType = conPeek(_con, #controlType);
        str                     controlData = WHSWorkExecuteDisplay::prepareControlData(conPeek(_con, #data));
        if ((controlName == #RFError) && (controlType == #RFlabel))
        {
            isErrorState = true;
        }

        Map controlMap = new Map(Types::String, Types::AnyType);
        controlMap.insert(#XMLControlCtrlType, controlType);
        controlMap.insert(#XMLControlName, controlName);
        controlMap.insert(#XMLControlLabel, conPeek(_con, #label));
        controlMap.insert(#XMLControlNewLine, int2str(conPeek(_con, #newLine)));
        controlMap.insert(#XMLControlData, controlData);
        controlMap.insert(#XMLControlType, conPeek(_con, #type));
        controlMap.insert(#XMLControlLength, int2str(conPeek(_con, #length)));
        controlMap.insert(#XMLControlError, conPeek(_con, #error));
        controlMap.insert(#XMLControlDefaultButton, int2str(conPeek(_con, #defaultButton)));
        controlMap.insert(#XMLControlEnabled, int2str(conPeek(_con, #enabled)));
        controlMap.insert(#XMLControlSelected, conPeek(_con, #selected));
        controlMap.insert(#XMLControlColor, conPeek(_con, #color));
        controlMap.insert(#XMLControlStatus, conPeek(_con, #status));
        controlMap.insert(#XMLControlInputType, conPeek(_con, #inputType));
        controlMap.insert(#XMLControlDisplayArea, '');

        WHSMobileAppField mobileAppField = WHSMobileAppField::findByExtendedType(conPeek(_con, #inputType));
        str priority      = '0';
        str subPriority   = '0';
        str inputMode     = '';
        str inputType     = '';
        int numOfDecimals = WHSFieldDecimalsValues::Unset;
        if (mobileAppField)
        {
            inputMode = WHSFieldInputModeConversionHelper::getInputModeName(mobileAppField);
            inputType = enum2Symbol(enumNum(WHSFieldInputType), mobileAppField.InputType);
            // 0 defaults to -1 to fallback to default behavior. Supporting an explicit 0 value in the future will require a data upgrade script.
            numOfDecimals = mobileAppField.NumOfDecimals ? mobileAppField.NumOfDecimals : numOfDecimals;
            WHSMobileAppFieldPriority mobileAppFieldPriority = WHSMobileAppFieldPriority::findByMobileAppField(mobileAppField);
            if (mobileAppFieldPriority)
            {
                priority = int2Str(mobileAppFieldPriority.Priority);
                subPriority = int2Str(mobileAppFieldPriority.SubPriority);
            }
        }

        controlMap.insert(#XMLControlPreferredInputMode, inputMode);
        controlMap.insert(#XMLControlPreferredInputType, inputType);
        controlMap.insert(#XMLControlDisplayPriority, priority);
        controlMap.insert(#XMLControlDisplaySubPriority, subPriority);
        controlMap.insert(#XMLControlNumDecimals, numOfDecimals);
        controlMap.insert(#XMLControlDataSequence, int2Str(_sequence));

        controlMap.insert(#XMLControlAttachedTo, '');
        controlMap.insert(#XMLControlInstructionControl, '');
        controlMap.insert(#XMLControlFooter1, '');
        controlMap.insert(#XMLControlFooter2, '');
        controlMap.insert(#MobileAppField, mobileAppField);

        if (this.isProductDimControl(controlName))
        {
            var value = controlType == #RFlabel ? conPeek(_con, #label) : controlData;
            this.setProductDimValue(controlName, value);
        }
        return controlMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeControlAttribute</Name>
				<Source><![CDATA[
    private void writeControlAttribute(System.Xml.XmlTextWriter _xmlTextWriter, str _name, str _value)
    {
        if (attributeFilter.shouldInclude(_name, _value))
        {
            _xmlTextWriter.WriteAttributeString(_name, _value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildControl</Name>
				<Source><![CDATA[
    private void buildControl(System.Xml.XmlTextWriter _xmlTextWriter, Map _controlMap)
    {
        _xmlTextWriter.WriteStartElement(#XMLControlNode);
        this.writeControlAttribute(_xmlTextWriter, #XMLControlCtrlType, _controlMap.lookup(#XMLControlCtrlType));
        this.writeControlAttribute(_xmlTextWriter, #XMLControlName, _controlMap.lookup(#XMLControlName));
        this.writeControlAttribute(_xmlTextWriter, #XMLControlLabel, _controlMap.lookup(#XMLControlLabel));
        this.writeControlAttribute(_xmlTextWriter, #XMLControlNewLine, _controlMap.lookup(#XMLControlNewLine));
        this.writeControlAttribute(_xmlTextWriter, #XMLControlData, _controlMap.lookup(#XMLControlData));

        switch (_controlMap.lookup(#XMLControlCtrlType))
        {
            case #RFButton:
                if (decorator.requestedPattern() == WHSMobileAppPagePattern::Menu 
                    && _controlMap.lookup(#XMLControlName) != #RFBack)
                {
                    this.writeControlAttribute(_xmlTextWriter, #XMLIconAttribute, WHSMobileAppMenuIconSelector::menuIcon(_controlMap.lookup(#XMLControlName)));
                }
                else
                {
                    this.writeControlAttribute(_xmlTextWriter, #XMLIconAttribute, WHSMobileAppActionIconSelector::construct().actionIcon(_controlMap.lookup(#XMLControlName)));
                }
                break;
            case #RFDetourButton:
                this.writeControlAttribute(_xmlTextWriter, #XMLIconAttribute, WHSMobileAppMenuIconSelector::menuIcon(_controlMap.lookup(#XMLControlName)));
                break;
        }

        this.writeControlAttribute(_xmlTextWriter, #XMLControlType, _controlMap.lookup(#XMLControlType));
        this.writeControlAttribute(_xmlTextWriter, #XMLControlLength, _controlMap.lookup(#XMLControlLength));
        this.writeControlAttribute(_xmlTextWriter, #XMLControlError, _controlMap.lookup(#XMLControlError));
        this.writeControlAttribute(_xmlTextWriter, #XMLControlDefaultButton, _controlMap.lookup(#XMLControlDefaultButton));
        this.writeControlAttribute(_xmlTextWriter, #XMLControlEnabled, _controlMap.lookup(#XMLControlEnabled));
        this.writeControlAttribute(_xmlTextWriter, #XMLControlSelected, _controlMap.lookup(#XMLControlSelected));
        this.writeControlAttribute(_xmlTextWriter, #XMLControlColor, _controlMap.lookup(#XMLControlColor));
        this.writeControlAttribute(_xmlTextWriter, #XMLControlStatus, _controlMap.lookup(#XMLControlStatus));
        this.writeControlAttribute(_xmlTextWriter, #XMLControlNumDecimals, _controlMap.lookup(#XMLControlNumDecimals));
        this.writeControlAttribute(_xmlTextWriter, #XMLControlDisplayArea, _controlMap.lookup(#XMLControlDisplayArea));
        this.writeControlAttribute(_xmlTextWriter, #XMLControlPreferredInputMode, _controlMap.lookup(#XMLControlPreferredInputMode));
        this.writeControlAttribute(_xmlTextWriter, #XMLControlPreferredInputType, _controlMap.lookup(#XMLControlPreferredInputType));
        this.writeControlAttribute(_xmlTextWriter, #XMLControlDisplayPriority, _controlMap.lookup(#XMLControlDisplayPriority));
        this.writeControlAttribute(_xmlTextWriter, #XMLControlDisplaySubPriority, _controlMap.lookup(#XMLControlDisplaySubPriority));
        this.writeControlAttribute(_xmlTextWriter, #XMLControlDataSequence, _controlMap.lookup(#XMLControlDataSequence));
        this.writeControlAttribute(_xmlTextWriter, #XMLControlAttachedTo, _controlMap.lookup(#XMLControlAttachedTo));
        this.writeControlAttribute(_xmlTextWriter, #XMLControlInstructionControl, _controlMap.lookup(#XMLControlInstructionControl));
        this.writeControlAttribute(_xmlTextWriter, #XMLControlFooter1, _controlMap.lookup(#XMLControlFooter1));
        this.writeControlAttribute(_xmlTextWriter, #XMLControlFooter2, _controlMap.lookup(#XMLControlFooter2));
        this.writeControlAttribute(_xmlTextWriter, #XMLControlInputType, _controlMap.lookup(#XMLControlInputType));
        _xmlTextWriter.WriteEndElement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDeviceIdentificationNode</Name>
				<Source><![CDATA[
    private void addDeviceIdentificationNode(System.Xml.XmlTextWriter _xmlTextWriter, WhsrfPassthrough _pass)
    {
        _xmlTextWriter.WriteStartElement(#XMLDeviceNode);
        _xmlTextWriter.WriteAttributeString(#XMLDeviceIdAttribute, guid2Str(_pass.parmDeviceId()));
        _xmlTextWriter.WriteEndElement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addServerIdentificationNode</Name>
				<Source><![CDATA[
    private void addServerIdentificationNode(System.Xml.XmlTextWriter _xmlTextWriter)
    {
        _xmlTextWriter.WriteStartElement(#XMLServerActivityNode);
        _xmlTextWriter.WriteAttributeString(#XMLServerActivityIdAttribute, guid2Str(System.Diagnostics.Tracing.EventSource::CurrentThreadActivityId));
        _xmlTextWriter.WriteEndElement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDecorator</Name>
				<Source><![CDATA[
    private void initializeDecorator(container _con)
    {
        container stateSubCon = conPeek(_con, #StateInfo);
        var modeAttribute = new WhsWorkExecuteModeAttribute(conPeek(stateSubCon, #StateInfoMode));
        WHSIMobileAppServiceXMLDecoratorFactory decoratorFactory =
            SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WHSIMobileAppServiceXMLDecoratorFactory), modeAttribute) as WHSIMobileAppServiceXMLDecoratorFactory;

        if (!decoratorFactory)
        {
            decoratorFactory = new WHSMobileAppServiceXMLDecoratorFactoryDefault();
        }

        if (decoratorFactory)
        {
            decorator = decoratorFactory.getDecorator(_con);
        }
        else
        {
            decorator = new WHSMobileAppServiceXMLDecoratorDefault();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstNonErrorControlLabel</Name>
				<Source><![CDATA[
    private str findFirstNonErrorControlLabel(List _controlsList)
    {
        ListEnumerator le = _controlsList.getEnumerator();
        while (le.moveNext())
        {
            Map controlMap = le.current();

            if (controlMap && (controlMap.lookup(#XMLControlName) != #RFError))
            {
                return controlMap.lookup(#XMLControlLabel);
            }
        }

        return '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>