<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostCostJournalCostAdj</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjPostCostJournalCostAdj extends ProjPostCostJournal
{
    ProjCostTrans               projCostTransLocal;
    TmpProjAdjustmentCreateCost tmpProjAdjustmentCreateCost;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProjCostTrans _projCostTrans, TmpProjAdjustmentCreateCost _tmpProjAdjustmentCreateCost)
    {
        LedgerJournalTrans ledgerJournalTransLocal = LedgerJournalTrans::findRecId(_projCostTrans.LedgerJournalTrans, false);
        
        projCostTransLocal = _projCostTrans;
        tmpProjAdjustmentCreateCost = _tmpProjAdjustmentCreateCost;

        super(ledgerJournalTransLocal);

        projTrans = ProjTrans::newProjTransCostTransCostAdj(_projCostTrans, _tmpProjAdjustmentCreateCost);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method before the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmCreateTrans</c> method returns true.
    /// </remarks>
    public void projTransCreate()
    {
        int mul;

        TransDate getLedgerTransDate()
        {
            return ledgerVoucher.lastTransDate();
        }

        ProjTransStatus getTransStatus()
        {
            ProjTransStatus ret;

            ret = this.parmTransStatus();

            if (!ret)
            {
                ret = ProjTransStatus::Posted;
            }

            return ret;
        }

        if (this.parmElimination() && this.parmReverseAccrued())
        {
            mul = -1;
        }
        else
        {
            mul = 1;
        }

        //Create ProjCostTransCost record
        projCostTransCost.clear();
        projCostTransCost.TransId = projCostTransLocal.TransId;
        
        if (this.parmAdjustment() && this.parmAdjustmentDate())
        {
            projCostTransCost.LedgerTransdate = this.parmAdjustmentDate();
        }
        else
        {
            projCostTransCost.LedgerTransdate = getLedgerTransDate();
        }

        if (ProjAdjustCostUnbalancedPostingFromPurchOrderFlight::instance().isEnabled() && projTrans.origin() == ProjOriginAdjustment::PurchOrder)
        {
            // If the original transaction comes from an invoiced purchase order, the cost price is calculated using Purchasing rounding
            // As such, we need to match the precision that the PO posting using (which is to not round the cost price)
            Price rawPrice = 0;
            if (projTrans.qty())
            {
                rawPrice = (this.costValueCUR() - this.parmTaxAmountCUR()) / projTrans.qty();
                date origLedgerTransDate = this.getLedgerDateForOrigTrans(projCostTransLocal);
                ExchRate costExchangeRate = this.parmExchangeRate() ? this.parmExchangeRate() : ExchangeRateHelper::exchRate(projCostTransLocal.CurrencyIdCost, origLedgerTransDate);

                // We pass in false here to make sure that rounding does not occur
                projCostTransCost.CostPrice = CurrencyExchangeHelper::mstAmount(
                    rawPrice,
                    projTrans.currencyIdCost(),
                    origLedgerTransDate,
                    UnknownNoYes::Unknown,
                    costExchangeRate,
                    ExchangeRateHelper::exchRateSecond(projCostTransLocal.CurrencyIdCost, origLedgerTransDate),
                    false);

            }
            else
            {
                projCostTransCost.CostPrice = 0;
            }

            // The rawPrice is already in the CurAmount, so we don't need to convert it
            projCostTransCost.CostPriceCurrency = rawPrice;

            projCostTransCost.LineAmount = this.costValueCUR() * mul;
        }
        else
        {
        
            if (projTrans.qty())
            {
                projCostTransCost.CostPriceCurrency = CurrencyExchangeHelper::price((this.costValueCUR() - this.parmTaxAmountCur()) / projTrans.qty(), projTrans.currencyIdCost());
            }
            else
            {
                projCostTransCost.CostPriceCurrency = 0 ;
            }

            projCostTransCost.LineAmount = this.costValueCUR() * mul;

            date origLedgerTransDate = this.getLedgerDateForOrigTrans(projCostTransLocal);

            projCostTransCost.CostPrice = ExchangeRateHelper::mstPrice(projCostTransCost.CostPriceCurrency,
                projTrans.currencyIdCost(),
                origLedgerTransDate,
                UnknownNoYes::Unknown,
                this.parmExchangeRate() ? this.parmExchangeRate() : ExchangeRateHelper::exchRate(projCostTransLocal.CurrencyIdCost, origLedgerTransDate),
                ExchangeRateHelper::exchRateSecond(projCostTransLocal.CurrencyIdCost, origLedgerTransDate));
        }

        projCostTransCost.CostPrice = projCostTransCost.CostPrice * mul;
        projCostTransCost.CostPriceCurrency = projCostTransCost.CostPriceCurrency * mul;

        if (projTrans.projLineProperty().ToBeCapitalize)
        {
            projCostTransCost.LedgerStatusCost = this.parmLedgerStatusCost();
        }
        else
        {
            projCostTransCost.LedgerStatusCost = ProjLedgerStatus::Operations;
        }

        projCostTransCost.FundingSource = tmpProjAdjustmentCreateCost.FundingSource;
        projCostTransCost.TransStatus = getTransStatus();
        projCostTransCost.DefaultDimension = tmpProjAdjustmentCreateCost.DefaultDimension;
        projCostTransCost.insert();

        this.parmTransIdCost(projCostTransCost.TransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount creditAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId)
    {
        LedgerDimensionDefaultAccount ledgerDimensionByStatus(ProjLedgerStatus _ledgerStatus, ProjFundingSourceRefId _fundingSourceRefId)
        {
            LedgerDimensionDefaultAccount returnLedgerDimensionValue;
            switch (_ledgerStatus)
            {
                case ProjLedgerStatus::BalanceSheet :
                    returnLedgerDimensionValue = projTrans.costAccountLedgerDimension(_fundingSourceRefId);
                    break;

                case ProjLedgerStatus::Operations   :
                    if (projTrans.projLineProperty().ToBeCapitalize)
                    {
                        returnLedgerDimensionValue = projTrans.statusAccountLedgerDimension(_fundingSourceRefId);
                    }
                    else
                    {
                        returnLedgerDimensionValue = projTrans.costAccountLedgerDimension(_fundingSourceRefId);
                    }
                    break;
            }

            return returnLedgerDimensionValue;
        }

        LedgerDimensionDefaultAccount ledgerDimension;

        if (projCostTransLocal.TransactionOrigin == ProjOrigin::CostJournal ||
             projCostTransLocal.TransactionOrigin == ProjOrigin::ExpenseManagement &&
             projCostTransLocal.AdjRefTransId)
        {
            ProjCostTrans origProjCostTrans;
            select firstonly ProjId, CategoryId, TransId from origProjCostTrans where origProjCostTrans.TransId == projCostTransLocal.AdjRefTransId;
            
            LedgerJournalTrans              localLedgerJournalTrans;
            LedgerJournalTrans_Project      localLedgerJournalTrans_Project;
            select firstonly OffsetLedgerDimension, RecId from localLedgerJournalTrans
                exists join localLedgerJournalTrans_Project
                        where localLedgerJournalTrans_Project.RefRecId   == localLedgerJournalTrans.RecId
                        && localLedgerJournalTrans_Project.ProjId     == origProjCostTrans.ProjId
                        && localLedgerJournalTrans_Project.CategoryId == origProjCostTrans.CategoryId
                        && localLedgerJournalTrans_Project.TransId    == origProjCostTrans.TransId;

            if (localLedgerJournalTrans.RecId && localLedgerJournalTrans.OffsetLedgerDimension)
            {
                ledgerDimension = DimensionAttributeValueCombination::find(localLedgerJournalTrans.OffsetLedgerDimension).RecId;
            }
            else
            {
                ledgerDimension = ProjDefaultOffsetSetup::findDefaultOffsetAccount(projCostTransLocal.ProjId,
                                                                       projCostTransLocal.CategoryId,
                                                                       projCostTransLocal.Resource).parmLedgerDimension();
            }
        }
        else if (projCostTransLocal.TransactionOrigin == ProjOrigin::ProjAdvancedJournal && 
                 projCostTransLocal.AdjRefTransId)
        {
            ProjAdvancedJournalLine projAdvancedJournalLine = ProjAdvancedJournalLine::findByVoucher(projCostTransLocal.VoucherJournal);
            ledgerDimension = DimensionAttributeValueCombination::find(projAdvancedJournalLine.OffsetLedgerDimension).RecId;
        }
        else if ((projCostTransLocal.TransactionOrigin == ProjOrigin::PurchaseOrder ||
                  projCostTransLocal.TransactionOrigin == ProjOrigin::VendorInvoice) &&
                  projCostTransLocal.AdjRefTransId)
        {
            ledgerDimension = this.getLedgerDimension(LedgerPostingType::VendBalance);
            
            if (!ledgerDimension)
            {
                ledgerDimension = ledgerDimensionByStatus(projTrans.ledgerStatusCost(), _fundingSourceId);
            }
        }
        else if (projCostTransLocal.TransactionOrigin == ProjOrigin::InvoiceJournal &&
                  projCostTransLocal.AdjRefTransId)
        {   
            ledgerDimension = this.getLedgerDimension(LedgerPostingType::LedgerJournal);
            
            if (!ledgerDimension)
            {
                ledgerDimension = ledgerDimensionByStatus(projTrans.ledgerStatusCost(), _fundingSourceId);
            }
        }
        else
        {
            ledgerDimension = ledgerDimensionByStatus(projTrans.ledgerStatusCost(), _fundingSourceId);
        }

        if (!ledgerDimension)
        {
            ledgerDimension = super(_fundingSourceId);
        }

        return ledgerDimension;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimension</Name>
				<Source><![CDATA[
    private LedgerDimensionAccount getLedgerDimension(LedgerPostingType _ledgerPostingType)
    {
        ProjCostTrans   localProjCostTrans;

        select VoucherJournal from localProjCostTrans 
            where localProjCostTrans.TransId ==  projCostTransLocal.AdjRefTransId;
                
        GeneralJournalEntry         generalJournalEntry;
        GeneralJournalAccountEntry  generalJournalAccountEntry;

        if (_ledgerPostingType == LedgerPostingType::LedgerJournal)
        {
            select firstonly RecId from generalJournalEntry
                where generalJournalEntry.SubledgerVoucher == localProjCostTrans.VoucherJournal &&
                    generalJournalEntry.SubledgerVoucherDataAreaId == curExt()
            join firstonly LedgerDimension from generalJournalAccountEntry
                where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId &&
                    generalJournalAccountEntry.PostingType == _ledgerPostingType;
        }
        else
        {
            select firstonly RecId from generalJournalEntry
                where generalJournalEntry.SubledgerVoucher == localProjCostTrans.VoucherJournal
            join firstonly LedgerDimension from generalJournalAccountEntry
                where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId &&
                    generalJournalAccountEntry.PostingType == _ledgerPostingType;
        }

        return DimensionAttributeValueCombination::find(generalJournalAccountEntry.LedgerDimension).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costEnterCredit</Name>
				<Source><![CDATA[
    protected boolean costEnterCredit()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeOffsetCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger posting type for project offset cost posting based on the current ledger status of the project
    /// </summary>
    /// <returns>
    /// The ledger posting type for project offset costs.
    /// </returns>
    public LedgerPostingType postingTypeOffsetCost()
    {
        LedgerPostingType   retval;

        if ((projCostTransLocal.TransactionOrigin == ProjOrigin::CostJournal || 
             projCostTransLocal.TransactionOrigin == ProjOrigin::ExpenseManagement||
             projCostTransLocal.TransactionOrigin == ProjOrigin::ProjAdvancedJournal ||
             projCostTransLocal.TransactionOrigin == ProjOrigin::GeneralJournal ||
             projCostTransLocal.TransactionOrigin == ProjOrigin::InvoiceJournal) &&
             projCostTransLocal.AdjRefTransId)
        {
            retval = LedgerPostingType::LedgerJournal;
        }
        else
        {
            retval = super();
        }

        return retval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method after the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmUpdateTrans</c> returns true.
    /// </remarks>
    public void projTransUpdate()
    {
        projCostTransCost.CostAmountLedger = CurrencyExchangeHelper::mstAmount(projTrans.transCost(), projTrans.currencyIdCost(), this.getLedgerDateForOrigTrans(projCostTransLocal));

        projCostTransCost.update();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>