<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerChartofAccountsbyDimDP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerChartofAccountsbyDimDP_CN</c> class provides data for the <c>LedgerChartofAccountsbyDimensions_CN</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(LedgerChartofAccountsbyDimContract_CN))
]
public class LedgerChartofAccountsbyDimDP_CN extends SRSReportDataProviderBase
{
    LedgerChartofAccountsbyDimensionsTmp_CN     chartofAccountsbyDimensionsTmp_CN;

    Map                                         openingBalancesMap;
    AmountMSTDebCred                            totalDebit;
    AmountMSTDebCred                            totalCredit;

    #Dimensions
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getChartofAccountsbyDimensionsTmp_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches data from the <c>LedgerChartofAccountsbyDimensionsTmp_CN</c> table.
    /// </summary>
    /// <returns>
    /// Data from the <c>LedgerChartofAccountsbyDimensionsTmp_CN</c> table for the report.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(LedgerChartofAccountsbyDimensionsTmp_CN))
    ]
    public LedgerChartofAccountsbyDimensionsTmp_CN getChartofAccountsbyDimensionsTmp_CN()
    {
        return chartofAccountsbyDimensionsTmp_CN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionValueName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of dimension based on dimension value.
    /// </summary>
    /// <param name="_dimensionName">
    /// Dimension Attribute name.
    /// </param>
    /// <param name="_dimensionValueValue">
    /// Dimension Attribute value.
    /// </param>
    /// <returns>
    /// Returns the dimension attribute name.
    /// </returns>
    private Name getDimensionValueName(Name _dimensionName, Name _dimensionValueValue)
    {
        Name dimensionValueName;

        if (_dimensionName && _dimensionValueValue)
        {
            dimensionValueName = DimensionAttributeValue::findByDimensionAttributeAndValue(
                DimensionAttribute::findByName(_dimensionName),
                _dimensionValueValue).getName();
        }

        return dimensionValueName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertChartofAccountsbyDimensionsTmp_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the <c>LedgerChartofAccountsbyDimensionsTmp_CN</c> temp table.
    /// </summary>
    /// <param name="_mainAccountId">
    /// MainAccount Id.
    /// </param>
    /// <param name="_dimAttrName">
    /// Dimension Attribute Name.
    /// </param>
    private void insertChartofAccountsbyDimensionsTmp_CN(MainAccountNum _mainAccountId, Name _dimAttrName)
    {
        MainAccount     mainAccountLocal;
        MapEnumerator   mapEnum;

        if (_mainAccountId)
        {
            mainAccountLocal = MainAccount::findByMainAccountId (_mainAccountId);

            chartofAccountsbyDimensionsTmp_CN.AccountName = mainAccountLocal.localizedName();
            chartofAccountsbyDimensionsTmp_CN.AccountNum = mainAccountLocal.MainAccountId;
            chartofAccountsbyDimensionsTmp_CN.DebitAmount = totalDebit;
            chartofAccountsbyDimensionsTmp_CN.CreditAmount = totalCredit;
            if (openingBalancesMap.exists(_mainAccountId))
            {
                chartofAccountsbyDimensionsTmp_CN.BeginningBalance = openingBalancesMap.lookup(_mainAccountId);
            }
            else
            {
                chartofAccountsbyDimensionsTmp_CN.BeginningBalance = 0;
            }
            chartofAccountsbyDimensionsTmp_CN.BeginningDirection = chartofAccountsbyDimensionsTmp_CN.BeginningBalance > 0 ? 1 : ((chartofAccountsbyDimensionsTmp_CN.BeginningBalance == 0) ? 0 : -1);
            chartofAccountsbyDimensionsTmp_CN.EndingBalance = chartofAccountsbyDimensionsTmp_CN.BeginningBalance + chartofAccountsbyDimensionsTmp_CN.CreditAmount + chartofAccountsbyDimensionsTmp_CN.DebitAmount;
            chartofAccountsbyDimensionsTmp_CN.DimAttrName =_dimAttrName;
            chartofAccountsbyDimensionsTmp_CN.EndingDirection = chartofAccountsbyDimensionsTmp_CN.EndingBalance > 0 ? 1 : ((chartofAccountsbyDimensionsTmp_CN.EndingBalance == 0) ? 0 : -1);

            chartofAccountsbyDimensionsTmp_CN.doInsert();
        }
        else
        {
            mapEnum = openingBalancesMap.getEnumerator();

            while (mapEnum.moveNext())
            {
                mainAccountLocal = MainAccount::findByMainAccountId (mapEnum.currentKey());

                chartofAccountsbyDimensionsTmp_CN.AccountName = mainAccountLocal.localizedName();
                chartofAccountsbyDimensionsTmp_CN.AccountNum = mainAccountLocal.MainAccountId;
                chartofAccountsbyDimensionsTmp_CN.DebitAmount = 0;
                chartofAccountsbyDimensionsTmp_CN.CreditAmount = 0;
                chartofAccountsbyDimensionsTmp_CN.BeginningBalance = mapEnum.currentValue();
                chartofAccountsbyDimensionsTmp_CN.BeginningDirection = chartofAccountsbyDimensionsTmp_CN.BeginningBalance > 0 ? 1 : ((chartofAccountsbyDimensionsTmp_CN.BeginningBalance == 0) ? 0 : -1);
                chartofAccountsbyDimensionsTmp_CN.EndingBalance = mapEnum.currentValue();
                chartofAccountsbyDimensionsTmp_CN.DimAttrName =_dimAttrName;
                chartofAccountsbyDimensionsTmp_CN.EndingDirection = chartofAccountsbyDimensionsTmp_CN.EndingBalance > 0 ? 1 : ((chartofAccountsbyDimensionsTmp_CN.EndingBalance == 0) ? 0 : -1);

                chartofAccountsbyDimensionsTmp_CN.doInsert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the required data for the report.
    /// </summary>
    public void processReport()
    {
        Name                                    dimAttrValueName;
        MainAccountNum                          lastAccountNum;
        DimensionAttributeLevelValueView        dimensionAttributeLevelValueView;
        DimensionAttributeValueCombination      dimensionAttributeValueCombination;
        boolean                                 insertData = false;
        boolean                                 displayOnlyBalances = true;
        Name                                    dimensionAttributeName;
        DimensionValue                          dimensionValue;
        TransDate                               toDate;
        TransDate                               fromDate;
        RecId                                   dimensionAttributeRecId;
        GeneralJournalEntry                     generalJournalEntry;
        GeneralJournalAccountEntry              generalJournalAccountEntry;
        MainAccount                             mainAccount;
        CurrentOperationsTax                    postingLayer;

        LedgerChartofAccountsbyDimContract_CN contract = this.parmDataContract() as LedgerChartofAccountsbyDimContract_CN;

        openingBalancesMap = new Map(Types::String, Types::Real);

        dimensionValue          = contract.parmDimensionValue();
        dimensionAttributeName  = contract.parmDimensionAttributeName();
        fromDate                = contract.parmFromDate();
        toDate                  = contract.parmToDate();
        postingLayer            = contract.parmPostingLayer();

        if (!fromDate)
        {
            fromDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        if (!toDate)
        {
            toDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        if (year(fromDate) != year(toDate))
        {
            fromDate = mkDate(1, 1, year(toDate));
        }

        dimAttrValueName =  this.getDimensionValueName(dimensionAttributeName, dimensionValue);

        dimensionAttributeRecId = DimensionAttribute::findByName(dimensionAttributeName).RecId;

        // Get opening balances for all related main accounts
        while select RecId from generalJournalEntry
            group by mainAccount.MainAccountId
            where generalJournalEntry.AccountingDate < fromDate
                && generalJournalEntry.Ledger == Ledger::current()
            join sum(AccountingCurrencyAmount) from generalJournalAccountEntry
                where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
            join RecId from dimensionAttributeValueCombination
                where dimensionAttributeValueCombination.RecId == generalJournalAccountEntry.LedgerDimension
            join RecId, MainAccountId from mainAccount order by mainAccount.MainAccountId
                where mainAccount.RecId == dimensionAttributeValueCombination.MainAccount
            join DisplayValue,DimensionAttribute from dimensionAttributeLevelValueView
                where generalJournalAccountEntry.LedgerDimension == dimensionAttributeLevelValueView.ValueCombinationRecId
                    && dimensionAttributeLevelValueView.DimensionAttribute == dimensionAttributeRecId
                    && dimensionAttributeLevelValueView.DisplayValue == dimensionValue
                    && generalJournalEntry.PostingLayer == postingLayer
        {
            openingBalancesMap.insert(mainAccount.MainAccountId, generalJournalAccountEntry.AccountingCurrencyAmount);
        }

        // Get accounts in period one
        while select RecId from generalJournalEntry
            group by mainAccount.MainAccountId, generalJournalAccountEntry.IsCredit
            where generalJournalEntry.AccountingDate >= fromDate
               && generalJournalEntry.AccountingDate <= toDate
               && generalJournalEntry.Ledger == Ledger::current()
            join sum(AccountingCurrencyAmount) from generalJournalAccountEntry
                where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
            join RecId from dimensionAttributeValueCombination
                where dimensionAttributeValueCombination.RecId == generalJournalAccountEntry.LedgerDimension
            join RecId, MainAccountId from mainAccount order by mainAccount.MainAccountId
                where mainAccount.RecId == dimensionAttributeValueCombination.MainAccount
            join DisplayValue,DimensionAttribute from dimensionAttributeLevelValueView
                where generalJournalAccountEntry.LedgerDimension == dimensionAttributeLevelValueView.ValueCombinationRecId
                    && dimensionAttributeLevelValueView.DimensionAttribute == dimensionAttributeRecId
                    && dimensionAttributeLevelValueView.DisplayValue == dimensionValue
                    && generalJournalEntry.PostingLayer == postingLayer
        {
            displayOnlyBalances = false;
            insertData = true;

            if (mainAccount.MainAccountId != lastAccountNum && lastAccountNum != '')
            {
                this.insertChartofAccountsbyDimensionsTmp_CN(lastAccountNum, dimAttrValueName);
                totalDebit = 0;
                totalCredit = 0;
            }

            if (!generalJournalAccountEntry.IsCredit)
            {
                totalDebit += generalJournalAccountEntry.AccountingCurrencyAmount;
            }
            else
            {
                totalCredit += generalJournalAccountEntry.AccountingCurrencyAmount;
            }

            lastAccountNum = mainAccount.MainAccountId;
        }

        // Insert the last accountNum
        if (insertData)
        {
            this.insertChartofAccountsbyDimensionsTmp_CN(lastAccountNum, dimAttrValueName);
        }

        if (displayOnlyBalances)
        {
            this.insertChartofAccountsbyDimensionsTmp_CN('', dimAttrValueName);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>