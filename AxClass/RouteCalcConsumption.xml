<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RouteCalcConsumption</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RouteCalcConsumption
{
    RouteOprTime        _processTime;
    InventQty           _processNumOf;
    int                 decimals;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcOprQty</Name>
				<Source><![CDATA[
    Qty calcOprQty(
        BOMCalcData     calc,
        RouteMap        primaryRoute,
        RouteOprMap     primaryOpr,
        RouteMap        secondaryRoute   = primaryRoute,
        RouteOprMap     secondaryOpr     = primaryOpr
        )
    {
        if (!primaryRoute.RecId || primaryRoute.OprPriority != RouteOprPriority::Primary)
            throw error("@SYS17275");

        return this.decRoundQty((calc.seriesSize() * (primaryRoute.AccError > 0 ? primaryRoute.AccError : 1)), calc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcOprQtyError</Name>
				<Source><![CDATA[
    Qty   calcOprQtyError(BOMCalcData      calc,
                         RouteMap          primaryRoute,
                         RouteOprMap       primaryOpr,
                         RouteMap          secondaryRoute   = primaryRoute,
                         RouteOprMap       secondaryOpr     = primaryOpr
                        )
    {
        return this.calcOprQty(calc,primaryRoute,primaryOpr,secondaryRoute,secondaryOpr) -
               this.calcOprQtyGood(calc,primaryRoute,primaryOpr,secondaryRoute,secondaryOpr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcOprQtyGood</Name>
				<Source><![CDATA[
    Qty   calcOprQtyGood(BOMCalcData      calc,
                         RouteMap          primaryRoute,
                         RouteOprMap       primaryOpr,
                         RouteMap          secondaryRoute   = primaryRoute,
                         RouteOprMap       secondaryOpr     = primaryOpr
                        )
    {
        RouteMap routeNext;

        if (! primaryRoute.RecId || primaryRoute.OprPriority != RouteOprPriority::Primary)
            throw error("@SYS17275");

        routeNext = primaryRoute.nextOperation();

        return this.decRoundQty((calc.seriesSize() * (routeNext.AccError > 0 ? routeNext.AccError : 1)), calc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcProcessTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the process time for a route operation.
    /// </summary>
    /// <param name = "_calc">
    /// <c>BOMCalcData</c> containing the seriesSize used for calculation.
    /// </param>
    /// <param name = "_primaryRoute">
    /// Primary route operation corresponding to the route operation used for calculation.
    /// </param>
    /// <param name = "_primaryOpr">
    /// Primary route operation corresponding to the route operation used for calculation.
    /// </param>
    /// <param name = "_secondaryRoute">
    /// Route operation used for calculation.
    /// </param>
    /// <param name = "_secondaryOpr">
    /// Route operation used for calculation.
    /// </param>
    /// <param name = "_wrkCtrId">
    /// <c>WrkCtrId</c> to which the operation is assigned.
    /// </param>
    /// <returns>
    /// Calculated process time.
    /// </returns>
    public Hours calcProcessTime(BOMCalcData    _calc,
                                 RouteMap       _primaryRoute,
                                 RouteOprMap    _primaryOpr,
                                 RouteMap       _secondaryRoute   = _primaryRoute,
                                 RouteOprMap    _secondaryOpr     = _primaryOpr,
                                 WrkCtrId       _wrkCtrId         = '')
    {
        TempReal tempProcTime = this.calcProcessTimePerJobWithoutRounding(_calc,
                                                                          _primaryRoute,
                                                                          _primaryOpr,
                                                                          _secondaryOpr,
                                                                          _wrkCtrId);

        return this.applyActivityReqSetQuantity(tempProcTime, _primaryOpr, _secondaryOpr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcProcessTimePerJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the process time for a job in the route operation.
    /// </summary>
    /// <param name = "_calc">
    /// <c>BOMCalcData</c> containing the seriesSize used for calculation.
    /// </param>
    /// <param name = "_primaryRoute">
    /// Primary route operation corresponding to the route operation used for calculation.
    /// </param>
    /// <param name = "_primaryOpr">
    /// Primary route operation corresponding to the route operation used for calculation.
    /// </param>
    /// <param name = "_secondaryOpr">
    /// Route operation used for calculation.
    /// </param>
    /// <param name = "_wrkCtrId">
    /// <c>WrkCtrId</c> to which the operation is assigned.
    /// </param>
    /// <returns>
    /// Calculated process time.
    /// </returns>
    public Hours calcProcessTimePerJob(BOMCalcData    _calc,
                                       RouteMap       _primaryRoute,
                                       RouteOprMap    _primaryOpr,
                                       RouteOprMap    _secondaryOpr     = _primaryOpr,
                                       WrkCtrId       _wrkCtrId         = '')
    {
        TempReal tempProcTime = this.calcProcessTimePerJobWithoutRounding(_calc,
                                                                          _primaryRoute,
                                                                          _primaryOpr,
                                                                          _secondaryOpr,
                                                                          _wrkCtrId);

        return decround(tempProcTime,decimals);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSetUpTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the setup time for a route operation.
    /// </summary>
    /// <param name = "_calc">
    /// <c>BOMCalcData</c> containing the seriesSize used for calculation.
    /// </param>
    /// <param name = "_primaryRoute">
    /// Primary route operation corresponding to the route operation used for calculation.
    /// </param>
    /// <param name = "_primaryOpr">
    /// Primary route operation corresponding to the route operation used for calculation.
    /// </param>
    /// <param name = "_secondaryRoute">
    /// Route operation used for calculation.
    /// </param>
    /// <param name = "_secondaryOpr">
    /// Route operation used for calculation.
    /// </param>
    /// <returns>
    /// Calculated setup time.
    /// </returns>
    public Hours calcSetUpTime(BOMCalcData       _calc,
                               RouteMap          _primaryRoute,
                               RouteOprMap       _primaryOpr,
                               RouteMap          _secondaryRoute   = _primaryRoute,
                               RouteOprMap       _secondaryOpr     = _primaryOpr)
    {
        TempReal tempWrkCtrTime = this.calcSetUpTimePerJobWithoutRounding(_calc,
                                                                          _primaryRoute,
                                                                          _primaryOpr,
                                                                          _secondaryOpr);

        return this.applyActivityReqSetQuantity(tempWrkCtrTime, _primaryOpr, _secondaryOpr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSetUpTimePerJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the setup time for a job in the route operation.
    /// </summary>
    /// <param name = "_calc">
    /// <c>BOMCalcData</c> containing the seriesSize used for calculation.
    /// </param>
    /// <param name = "_primaryRoute">
    /// Primary route operation corresponding to the route operation used for calculation.
    /// </param>
    /// <param name = "_primaryOpr">
    /// Primary route operation corresponding to the route operation used for calculation.
    /// </param>
    /// <param name = "_secondaryOpr">
    /// Route operation used for calculation.
    /// </param>
    /// <returns>
    /// Calculated setup time.
    /// </returns>
    public Hours calcSetUpTimePerJob(BOMCalcData       _calc,
                                     RouteMap          _primaryRoute,
                                     RouteOprMap       _primaryOpr,
                                     RouteOprMap       _secondaryOpr     = _primaryOpr)
    {
        TempReal tempWrkCtrTime = this.calcSetUpTimePerJobWithoutRounding(_calc,
                                                                          _primaryRoute,
                                                                          _primaryOpr,
                                                                          _secondaryOpr);

        return decround(tempWrkCtrTime,decimals);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWrkCtrProcessTime</Name>
				<Source><![CDATA[
    public Hours calcWrkCtrProcessTime(BOMCalcData  _calc,
                                       RouteMap     _primaryRoute,
                                       RouteOprMap  _primaryOpr,
                                       WrkCtrId     _wrkCtrId = '')
    {
        if (!_primaryRoute.RecId ||  !_primaryOpr.RecId          ||
            _primaryRoute.OprPriority !=  RouteOprPriority::Primary
           )
        {
            throw error("@SYS17275");
        }

        return decround((_calc.seriesSize() *
                    (_primaryRoute.AccError > 1 ? _primaryRoute.AccError : 1) *
                    (_primaryOpr.ProcessTime/ minOne(_primaryOpr.ProcessPerQty)) *
                    minOne(_primaryOpr.ToHours)),decimals);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWrkCtrSetUpTime</Name>
				<Source><![CDATA[
    public Hours calcWrkCtrSetUpTime(BOMCalcData    _calc,
                                     RouteMap       _primaryRoute,
                                     RouteOprMap    _primaryOpr)
    {
        if (!_primaryOpr.RecId || _primaryRoute.OprPriority != RouteOprPriority::Primary)
        {
            throw error("@SYS17275");
        }

        return decround((_primaryOpr.SetupTime * minOne(_primaryOpr.ToHours)),decimals);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWrkCtrTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>WrkCtrTable</c> table using either the resource ID or the
    ///    costing resource.
    /// </summary>
    /// <param name="_wrkCtrId">
    ///    The resource ID.
    /// </param>
    /// <param name="_primaryOpr">
    ///    An operation map on which to  base the search.
    /// </param>
    /// <returns>
    ///    A <c>WrkCtrTable</c> record.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    No resource could be found so the calculation must be canceled.
    /// </exception>
    protected WrkCtrTable findWrkCtrTable(WrkCtrId _wrkCtrId, RouteOprMap _primaryOpr)
    {
        WrkCtrActivityRequirementSet    wrkCtrActivityRequirementSet;
        WrkCtrTable                     wrkCtrTable;
        ProdRoute                       prodRoute;

        if (!_wrkCtrId)
        {
            if (_primaryOpr.WrkCtrIdCost)
            {
                wrkCtrTable = WrkCtrTable::find(_primaryOpr.WrkCtrIdCost);
            }
            else if (_primaryOpr.TableId == tableNum(ProdRoute))
            {
                prodRoute = _primaryOpr;
                wrkCtrTable = prodRoute.getResource(true, true);
            }
            else
            {
                wrkCtrActivityRequirementSet = _primaryOpr.activityRequirementSet();
                wrkCtrTable = wrkCtrActivityRequirementSet.firstApplicableResource( DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            }
        }
        else
        {
            wrkCtrTable = WrkCtrTable::find(_wrkCtrId);
        }

        if (!wrkCtrTable || !wrkCtrTable.checkValid())
        {
            throw error("@SYS19457");
        }

        return wrkCtrTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWrkCtrHoursResourceIndependent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whetherthe calculation of the <c>wrkCtrHours</c> value depends on the resource.
    /// </summary>
    /// <returns>
    ///    true when the calculation of the <c>wrkCtrHours</c> value is resource independent; otherwise, false.
    /// </returns>
    public boolean isWrkCtrHoursResourceIndependent()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        decimals = 10;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCalcOprQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the catch weight operation quantity.
    /// </summary>
    /// <param name="_calc">
    /// The calculation data.
    /// </param>
    /// <param name="_primaryRoute">
    /// The primary route mapping.
    /// </param>
    /// <returns>
    /// The catch weight good quantity.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The primary operation is not specified or is not primary.
    /// </exception>
    public PdsCWInventQty pdsCWCalcOprQty(BOMCalcData   _calc,
                                          RouteMap      _primaryRoute)
    {
        if (!_primaryRoute.RecId || _primaryRoute.OprPriority != RouteOprPriority::Primary)
        {
            throw error("@SYS17275");
        }

        return decRound((_calc.pdsCWSeriesSize() * (_primaryRoute.AccError > 0 ? _primaryRoute.AccError : 1)), 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCalcOprQtyError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the catch weight error quantity.
    /// </summary>
    /// <param name="_calc">
    /// The calculation data.
    /// </param>
    /// <param name="_primaryRoute">
    /// The primary route mapping.
    /// </param>
    /// <returns>
    /// The catch weight error quantity.
    /// </returns>
    public PdsCWInventQty pdsCWCalcOprQtyError(BOMCalcData _calc,
                                               RouteMap    _primaryRoute)
    {
        return this.pdsCWCalcOprQty(_calc, _primaryRoute) -
               this.pdsCWCalcOprQtyGood(_calc, _primaryRoute);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCalcOprQtyGood</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the catch weight good quantity.
    /// </summary>
    /// <param name="_calc">
    /// The calculation data.
    /// </param>
    /// <param name="_primaryRoute">
    /// The primary route mapping.
    /// </param>
    /// <returns>
    /// The catch weight good quantity.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The primary operation is not specified or is not primary.
    /// </exception>
    public PdsCWInventQty pdsCWCalcOprQtyGood(BOMCalcData _calc,
                                              RouteMap    _primaryRoute)
    {
        RouteMap routeNext;

        if (! _primaryRoute.RecId || _primaryRoute.OprPriority != RouteOprPriority::Primary)
        {
            throw error("@SYS17275");
        }

        routeNext = _primaryRoute.nextOperation();

        return decRound((_calc.pdsCWSeriesSize() * (routeNext.AccError > 0 ? routeNext.AccError : 1)), 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs a new instance of the <c>RouteCalcConsumption</c> class based on the given formula.
    /// </summary>
    /// <param name="formula">
    ///    The formula that will be used for the calculation; optional.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>RouteCalcConsumption</c> class based on the given formula.
    /// </returns>
    static RouteCalcConsumption construct(RouteFormula formula = RouteFormula::Formula0)
    {
        switch (formula)
        {
            case RouteFormula::Formula0  : return new RouteCalc_Formula0();
            case RouteFormula::Formula1  : return new RouteCalc_Formula1();
            case RouteFormula::Formula2  : return new RouteCalc_Formula2();
            case RouteFormula::Formula3  : return new RouteCalc_Formula3();
        }
        return new RouteCalc_Formula0();
    }

]]></Source>
			</Method>
			<Method>
				<Name>decRoundQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rounds the quantity number to the specified number of decimal places
    /// </summary>
    /// <param name = "_qty">The quantity number to be rounded to the specified number of decimal places</param>
    /// <param name = "_calc">BOMCalcData</param>
    /// <returns>Quantity number rounded to the specified numbre of decimal places</returns>
    private Qty decRoundQty(Qty _qty, BOMCalcData _calc)
    {
        InventUnitId inventUnitId = _calc.inventUnitId();

        if (inventUnitId)
        {
            _qty = decRound(_qty, UnitOfMeasure::findBySymbol(inventUnitId).DecimalPrecision);
        }

        return _qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyActivityReqSetQuantity</Name>
				<Source><![CDATA[
    private Hours applyActivityReqSetQuantity(TempReal _timePerJob, RouteOprMap _primaryOpr, RouteOprMap _secondaryOpr)
    {
        WrkCtrActivityRequirementSet wrkCtrActivityRequirementSetPrimary   = _primaryOpr.activityRequirementSet();
        WrkCtrActivityRequirementSet wrkCtrActivityRequirementSetSecondary = _secondaryOpr.activityRequirementSet();

        TempReal time = (_timePerJob * wrkCtrActivityRequirementSetPrimary.Quantity);

        if (_primaryOpr.RecId != _secondaryOpr.RecId)
        {
            time = (time * minOne(wrkCtrActivityRequirementSetSecondary.Quantity));
        }

        return decround(time,decimals);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSetUpTimePerJobWithoutRounding</Name>
				<Source><![CDATA[
    private TempReal calcSetUpTimePerJobWithoutRounding(BOMCalcData       _calc,
                                                        RouteMap          _primaryRoute,
                                                        RouteOprMap       _primaryOpr,
                                                        RouteOprMap       _secondaryOpr     = _primaryOpr)
    {
        if (!_primaryOpr.RecId || _primaryRoute.OprPriority != RouteOprPriority::Primary)
        {
            throw error("@SYS17275");
        }

        TempReal tempWrkCtrTime = this.calcWrkCtrSetUpTime(_calc,
                                                           _primaryRoute,
                                                           _primaryOpr);

        WrkCtrActivityRequirementSet wrkCtrActivityRequirementSetSecondary   = _secondaryOpr.activityRequirementSet();

        return tempWrkCtrTime * wrkCtrActivityRequirementSetSecondary.LoadPercent/ 100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcProcessTimePerJobWithoutRounding</Name>
				<Source><![CDATA[
    private TempReal calcProcessTimePerJobWithoutRounding(BOMCalcData    _calc,
                                                          RouteMap       _primaryRoute,
                                                          RouteOprMap    _primaryOpr,
                                                          RouteOprMap    _secondaryOpr     = _primaryOpr,
                                                          WrkCtrId       _wrkCtrId         = '')
    {
        if (!_primaryRoute.RecId                                 ||
            !_primaryOpr.RecId                                   ||
            _primaryRoute.OprPriority !=  RouteOprPriority::Primary
           )
        {
            throw error("@SYS17275");
        }

        TempReal tempProcTime = this.calcWrkCtrProcessTime(_calc,
                                                           _primaryRoute,
                                                           _primaryOpr,
                                                           _wrkCtrId);

        WrkCtrActivityRequirementSet wrkCtrActivityRequirementSetSecondary   = _secondaryOpr.activityRequirementSet();

        return tempProcTime * wrkCtrActivityRequirementSetSecondary.LoadPercent / 100;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>