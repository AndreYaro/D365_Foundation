<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxableDocVendInvoiceInfoLineRowDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Row data provider for vendInvoiceInfoLine.
/// </summary>
public class TaxableDocVendInvoiceInfoLineRowDP extends TaxableDocPurchLineRowDataProvider
{
    VendInvoiceInfoLine vendInvoiceInfoLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initMainTable</Name>
				<Source><![CDATA[
    protected void initMainTable()
    {
        vendInvoiceInfoLine = mainRecord as VendInvoiceInfoLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRelatedTables</Name>
				<Source><![CDATA[
    protected void initRelatedTables()
    {
        if (vendInvoiceInfoLine.inventTable())
        {
            ecoResProduct = EcoResProduct::find(vendInvoiceInfoLine.inventTable().Product);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustomsImportOrder_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if this is an import order or not.
    /// </summary>
    /// <returns>
    /// True if this transaction is an import order; otherwise, false.
    /// </returns>
    // <GIN>
    [Replaceable]
    protected boolean isCustomsImportOrder_IN()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportingCurrencyExchangeRate</Name>
				<Source><![CDATA[
    // </GIN>
     
    /// <summary>
    /// Gets reporting currency exchange rate
    /// </summary>
    /// <returns>
    /// Reporting currency exchange rate
    /// </returns>
    [Replaceable]
    protected ExchRate getReportingCurrencyExchangeRate(TaxableDocumentLineObject _lineObj)
    {    
        if (this.isCustomsImportOrder_IN())
        {
            // In case accountingCurrencyCode == reportingCurrencyCode, it should apply same exchange rate as accounting currency.
            // This change can be done in base class TaxableDocumentRowDataProviderLine.fillInReportingCurrencyExchangeRateParameter, as it is a general requirement.
            // But there is model (e.g. Project, #318453) didn't uptake reporting fixed exchange rate yet, change the base will cause voucher imbalance while posting.
            // Therefore, we just make the change case by case.
            if (accountingCurrencyCode == reportingCurrencyCode)
            {
                return this.getAccountingCurrencyExchangeRate(_lineObj);
            }
        }

        return super(_lineObj);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingCurrencyExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets accounting currency exchange rate
    /// </summary>
    /// <returns>
    /// Accounting currency exchange rate
    /// </returns>
    [Replaceable]
    protected ExchRate getAccountingCurrencyExchangeRate(TaxableDocumentLineObject _lineObj)
    {
        if (this.isCustomsImportOrder_IN())
        {
            ExchangeRateTypeRecId exchangeRateTypeRecId = this.getIndiaExchangeRateTypeRecId(_lineObj);
            if (exchangeRateTypeRecId)
            {
                ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::construct();
                exchangeRateHelper.parmFromCurrency(transactionCurrencyCode);
                exchangeRateHelper.parmToCurrency(accountingCurrencyCode);
                exchangeRateHelper.parmExchangeDate(this.getTransDate());
                exchangeRateHelper.parmExchangeRateTypeRecId(exchangeRateTypeRecId);

                return exchangeRateHelper.getExchangeRate1() / 100;
            }
        }

        return  super(_lineObj);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasFixedExchangeRateAccountCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Has fixed exchange rate of accounting currency or not.
    /// </summary>
    /// <returns>True if has fixed exchange rate of accounting currency, otherwise false.</returns>
    protected boolean hasFixedExchangeRateAccountCurrency()
    {
        return this.getFixedExchRate() != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFixedExchangeRateAccountCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets fixed exchange rate of accounting currency.
    /// </summary>
    /// <returns>Fixed exchange rate of accounting currency.</returns>
    protected ExchRate getFixedExchangeRateAccountCurrency()
    {
        return this.getFixedExchRate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasFixedExchangeRateReportCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Has fixed exchange rate of reporting currency or not.
    /// </summary>
    /// <returns>True if has fixed exchange rate of reporting currency, otherwise false.</returns>
    protected boolean hasFixedExchangeRateReportCurrency()
    {
        return this.getReportingCurrencyFixedExchRate() != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFixedExchangeRateReportCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets fixed exchange rate of reporting currency.
    /// </summary>
    /// <returns>Fixed exchange rate of reporting currency.</returns>
    protected ExchRate getFixedExchangeRateReportCurrency()
    {
        return this.getReportingCurrencyFixedExchRate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIndiaExchangeRateTypeRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets exchange rate type defined in ledger for import transaction
    /// </summary>
    /// <param name = "_lineObj">taxable document line instance</param>
    /// <returns>exchange rate type defined in ledger for import transaction</returns>
    private ExchangeRateTypeRecId getIndiaExchangeRateTypeRecId(TaxableDocumentLineObject _lineObj)
    {
        ExchangeRateTypeRecId exchangeRateTypeRecId;

        TaxModelTaxable_IN taxModelTaxableLoc = taxModelTaxable as TaxModelTaxable_IN;
        if (taxModelTaxableLoc && taxModelTaxableLoc.isForeignTransaction())
        {
            if (taxModelTaxableLoc.getVendTable())
            {
                exchangeRateTypeRecId = TaxIntegrationUtils::getLedgerExtensionIN().CustomsImportExchangeRateType;
            }
        }

        return exchangeRateTypeRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction posting date
    /// </summary>
    /// <returns>
    /// The transaction posting date
    /// </returns>
    private TransDate getTransDate()
    {
        CustomsVendBOETrans_IN customsVendBOETrans_IN;
        VendInvoiceInfoTable vendInvoiceInfoTable = vendInvoiceInfoLine.vendInvoiceInfoTable();

        if (this.isCustomsImportOrder_IN())
        {
            if (VendInvoiceMatchPRDeleteBOESubLine_INFlight::instance().isEnabled())
            {
                customsVendBOETrans_IN = VendInvoiceInfoLineVendDocumentLine::getCustomsVendBOETrans_IN(vendInvoiceInfoLine.RecId, vendInvoiceInfoTable.ParmId);
            }
            else
            {
                VendInvoiceInfoSubLine vendInvoiceInfoSubLine;

                select firstOnly RecId, BillOfEntryDate from customsVendBOETrans_IN
                    join RecId from vendInvoiceInfoSubLine
                        where vendInvoiceInfoSubLine.JournalRefTableId == tableNum(CustomsVendBOETrans_IN)
                            && vendInvoiceInfoSubLine.JournalRefRecId  == customsVendBOETrans_IN.RecId
                            && vendInvoiceInfoSubLine.LineRefRecId     == vendInvoiceInfoLine.RecId
                            && vendInvoiceInfoSubLine.ParmId           == vendInvoiceInfoTable.ParmId;
            }

            if (customsVendBOETrans_IN.RecId)
            {
                return customsVendBOETrans_IN.BillOfEntryDate;
            }
        }

        return vendInvoiceInfoTable.UpdateDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFixedExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets fixed exchange rate from invoice header
    /// </summary>
    /// <returns>fixed exchange rate from invoice header</returns>
    private ExchRate getFixedExchRate()
    {
        VendInvoiceInfoTable vendInvoiceInfoTable = relatedRecordsQueryRun.getNo(1) as VendInvoiceInfoTable;
        if (!vendInvoiceInfoTable)
        {
            vendInvoiceInfoTable = vendInvoiceInfoLine.vendInvoiceInfoTable();
        }
        
        return vendInvoiceInfoTable.FixedExchRate == NoYes::No ? 0 : vendInvoiceInfoTable.ExchRate / 100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportingCurrencyFixedExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets reporting currency fixed exchange rate from invoice header
    /// </summary>
    /// <returns>Reporting currency fixed exchange rate from invoice header</returns>
    private ExchRate getReportingCurrencyFixedExchRate()
    {
        VendInvoiceInfoTable vendInvoiceInfoTable = relatedRecordsQueryRun.getNo(1) as VendInvoiceInfoTable;
        if (!vendInvoiceInfoTable)
        {
            vendInvoiceInfoTable = vendInvoiceInfoLine.vendInvoiceInfoTable();
        }
        
        return vendInvoiceInfoTable.FixedExchRate == NoYes::No ? 0 : vendInvoiceInfoTable.ReportingCurrencyExchangeRate / 100;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>