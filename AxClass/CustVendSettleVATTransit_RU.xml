<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendSettleVATTransit_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class CustVendSettleVATTransit_RU
{
    CustVendTrans       custVendTrans;
    CustVendSettle      custVendSettle;
    AmountMST           settleAmountAccounting;
    AmountCur           settleAmountTransaction;
    AmountMSTSecondary  settleAmountReporting;
    LedgerVoucherObject ledgerVoucherObject;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountCur</Name>
				<Source><![CDATA[
    protected AmountCur amountCur(AmountCur _amountCur)
    {
        return _amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAndPostTaxes</Name>
				<Source><![CDATA[
    public void calcAndPostTaxes(boolean _useSourceRecId = false) // true for amount difference
    {
        TaxAmount                     taxAmountTransaction;
        TaxAmount                     taxAmountAccounting;
        TaxAmount                     taxAmountReporting;
        TaxBase                       baseAmountTransaction;
        TaxBase                       baseAmountAccounting;
        CustVendCalcSettledAmounts_RU custVendCalcSettledAmounts;
        Map                           taxAmountsAccounting;
        Map                           taxAmountsTransaction;
        Map                           taxAmountsReporting;

        MapEnumerator                 me;
        BookStructSmallVATAmounts_RU  bookStructSmallVATAmounts;
        TaxCode                       taxCode;
        DimensionDefault              defaultDimension;
        LedgerDimensionAccount        ledgerDimension;
        InventTransId                 inventTransId;

        custVendCalcSettledAmounts = CustVendCalcSettledAmounts_RU::construct(
            custVendTrans,
            _useSourceRecId,
            true,
            null,
            false,
            ledgerVoucherObject);

        custVendCalcSettledAmounts.calcSettledAmounts();
        custVendCalcSettledAmounts.calcNewSettlement(settleAmountAccounting, settleAmountTransaction, settleAmountReporting);

        taxAmountsAccounting    = custVendCalcSettledAmounts.mapLastSettledAmountsMST();
        taxAmountsTransaction   = custVendCalcSettledAmounts.mapLastSettledAmountsCur();
        taxAmountsReporting     = custVendCalcSettledAmounts.mapLastSettledAmountsReporting();

        ttsbegin;
        me = taxAmountsAccounting.getEnumerator();
        while (me.moveNext())
        {
            [taxCode, defaultDimension, inventTransId, ledgerDimension] = me.currentKey();

            bookStructSmallVATAmounts   = BookStructSmallVATAmounts_RU::create(me.currentValue());
            taxAmountAccounting         = -bookStructSmallVATAmounts.taxAmountVAT();
            baseAmountAccounting        = -bookStructSmallVATAmounts.amountLiableToVAT();

            bookStructSmallVATAmounts   = BookStructSmallVATAmounts_RU::create(taxAmountsTransaction.lookup(me.currentKey()));
            taxAmountTransaction        = -bookStructSmallVATAmounts.taxAmountVAT();
            baseAmountTransaction       = -bookStructSmallVATAmounts.amountLiableToVAT();

            bookStructSmallVATAmounts   = BookStructSmallVATAmounts_RU::create(taxAmountsReporting.lookup(me.currentKey()));
            taxAmountReporting          = -bookStructSmallVATAmounts.taxAmountVAT();

            this.post(
                taxCode ? LedgerDimensionFacade::serviceCreateLedgerDimension(this.debetLedgerDimension(taxCode), defaultDimension) : 0,
                ledgerDimension,
                custVendTrans.CurrencyCode,
                baseAmountTransaction,
                baseAmountAccounting,
                taxAmountTransaction,
                taxAmountAccounting,
                taxAmountReporting,
                taxCode,
                null,
                ledgerVoucherObject,
                inventTransId);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerTrans</Name>
				<Source><![CDATA[
    protected void createLedgerTrans(LedgerDimensionAccount _ledgerDimension,
                                     CurrencyCode           _currencyCode,
                                     TaxAmount              _taxAmountTransaction,
                                     TaxAmount              _taxAmountAccounting,
                                     TaxAmount              _taxAmountReporting,
                                     LedgerVoucherObject    _ledgerVoucherObject = ledgerVoucherObject)
    {
        LedgerVoucherTransObject    ledgerVoucherTransObject;

        ledgerVoucherTransObject = LedgerVoucherTransObject::newBasicDefault(
            _ledgerVoucherObject,
            LedgerPostingType::Tax,
            _ledgerDimension,
            _currencyCode,
            _taxAmountTransaction,
            _taxAmountAccounting,
            _taxAmountReporting);

        ledgerVoucherTransObject.parmTransTxt(custVendTrans.Txt);
        _ledgerVoucherObject.addTrans(ledgerVoucherTransObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>debetLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates <c>LedgerDimensionAccount</c> for posting of VAT transit. Abstract.
    /// </summary>
    /// <param name="_taxCode">
    /// <c>TaxCode</c> which can be used for calculation.
    /// </param>
    /// <returns>
    /// <c>LedgerDimensionAccount</c> for posting of VAT transit.
    /// </returns>
    abstract protected LedgerDimensionDefaultAccount debetLedgerDimension(TaxCode _taxCode)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSettlement</Name>
				<Source><![CDATA[
    public void initFromSettlement(CustVendTrans       _custVendTrans,
                                   LedgerVoucherObject _ledgerVoucherObject,
                                   AmountMST           _settleAmountAccounting,
                                   AmountCur           _settleAmountTransaction,
                                   AmountMSTSecondary  _settleAmountReporting,
                                   CustVendSettle      _custVendSettle)
    {
        ledgerVoucherObject     = _ledgerVoucherObject;
        custVendTrans           = _custVendTrans;
        custVendSettle          = _custVendSettle;
        settleAmountAccounting  = _settleAmountAccounting;
        settleAmountTransaction = _settleAmountTransaction;
        settleAmountReporting   = _settleAmountReporting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreatePostingLog</Name>
				<Source><![CDATA[
    protected boolean mustCreatePostingLog()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    protected void post(
        LedgerDimensionAccount _ledgerDimension,
        LedgerDimensionAccount _offsetLedgerDimension,
        CurrencyCode           _currencyCode,
        TaxBase                _baseAmountTransaction,
        TaxBase                _baseAmountAccounting,
        TaxAmount              _taxAmountTransaction,
        TaxAmount              _taxAmountAccounting,
        TaxAmount              _taxAmountReporting,
        TaxCode                _taxCode             = "",
        Set                    _taxTransRecIDs      = null,
        LedgerVoucherObject    _ledgerVoucherObject = ledgerVoucherObject,
        InventTransId          _inventTransId       = "")
    {
        LedgerBondClient_RU         ledgerBondClient = _ledgerVoucherObject.ledgerBondClient_RU();
        CustVendTransPostingLog_RU  postingLog;

        if (_taxAmountTransaction || _taxAmountAccounting || _taxAmountReporting)
        {
            if (ledgerBondClient)
            {
                ledgerBondClient.addNewLogObject();
            }

            this.createLedgerTrans(
                _ledgerDimension,
                _currencyCode,
                _taxAmountTransaction,
                _taxAmountAccounting,
                _taxAmountReporting,
                _ledgerVoucherObject);

            this.createLedgerTrans(
                _offsetLedgerDimension,
                _currencyCode,
                -_taxAmountTransaction,
                -_taxAmountAccounting,
                -_taxAmountReporting,
                _ledgerVoucherObject);

            if (ledgerBondClient)
            {
                ledgerBondClient.bondLastVRef2CurrentLog();
                ledgerBondClient.removeCurrentLogObject();
            }
        }

        if (this.mustCreatePostingLog() && custVendSettle)
        {
            postingLog = custVendSettle.createPostingTransLog_RU(
                CustVendTransPostingLogType_RU::VATTransit,
                custVendTrans,
                LedgerPostingType::Tax,
                _ledgerDimension,
                0,
                _taxAmountAccounting,
                _taxAmountReporting,
                _taxTransRecIDs,
                0,
                this.amountCur(_taxAmountTransaction));

            postingLog.Voucher               = _ledgerVoucherObject.parmVoucher();
            postingLog.TransDate             = _ledgerVoucherObject.parmTransDate();
            postingLog.Correct               = _ledgerVoucherObject.parmCorrection();
            postingLog.OffsetLedgerDimension = _offsetLedgerDimension;
            postingLog.CurrencyCode          = _currencyCode;
            postingLog.TaxCode               = _taxCode;
            postingLog.TaxBaseAmountCur      = _baseAmountTransaction;
            postingLog.TaxBaseAmountMST      = _baseAmountAccounting;
            postingLog.InventTransId         = _inventTransId;
            postingLog.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTrans</Name>
				<Source><![CDATA[
    public static CustVendSettleVATTransit_RU newFromTrans(CustVendTrans _trans)
    {
        CustVendSettleVATTransit_RU transit;

        switch (_trans.TableId)
        {
            case (tableNum(CustTrans)) :
                transit = CustSettleVATTransit_RU::construct();
                break;
            case (tableNum(VendTrans)) :
                transit = new VendSettleVATTransit_RU();
                break;
        }

        return transit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>