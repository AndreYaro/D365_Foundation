<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetAssessedAssignTax</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetAssessedAssignTax extends RunBaseBatch implements BatchRetryable
{
    QueryRun                queryRun;
    DialogRunbase           dialog;

    RAssetAssessedTaxCode   taxCode;
    DialogField             taxCodeControl;
    RAssetTransportTaxCode  transportTaxCode;
    DialogField             transportTaxCodeControl;
    RAssetAssessedTaxType   taxType;
    DialogField             taxTypeControl;

    #DEFINE.CurrentVersion(3)
    #LOCALMACRO.CurrentList
        taxCode,
        transportTaxCode,
        taxType
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAssesedTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs check of the assessed tax code.
    /// </summary>
    /// <param name="_taxType">
    /// The type of tax code.
    /// </param>
    /// <param name="_taxCode">
    /// The tax code.
    /// </param>
    /// <returns>
    /// true if the all checks are valid; otherwise, false.
    /// </returns>
    protected boolean checkAssesedTaxCode(RAssetAssessedTaxType _taxType, TaxCode _taxCode)
    {
        RTax25TaxTable                          rtax;
        PaymentOrderBudgetReceiptClassTable_RU  classCode;
        boolean                                 ret = true;

        if (!_taxCode)
            return ret;

        select firstonly RecId from rtax
            where rtax.TaxCode      == _taxCode                  &&
                  rtax.TaxModule    == RTax25TaxModule::Asset_RU &&
                  rtax.SalesTaxType == TaxType_W::AssessedTax
            exists join classCode
                where classCode.PaymentOrderBudgetReceiptClassCode == rtax.PaymentOrderBudgetReceiptClassCode &&
                      classCode.ssgs                               == (_taxType == RAssetAssessedTaxType::First);

        if (!rtax)
        {
            ret = checkFailed(strFmt(TaxTable::txtNotExist(), _taxCode));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs check of the tax code.
    /// </summary>
    /// <param name="_taxCode">
    /// The tax code.
    /// </param>
    /// <param name="_taxType">
    /// The type of tax code.
    /// </param>
    /// <returns>
    /// true if the all checks are valid; otherwise, false.
    /// </returns>
    boolean checkTaxCode(TaxCode _taxCode, TaxType_W _taxType)
    {
        boolean ret = TaxTable::checkExist(_taxCode);

        if (ret && _taxCode && TaxTable::find(_taxCode).TaxType_W != _taxType)
        {
            ret = checkFailed(strFmt(TaxTable::txtNotExist(), _taxCode));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        FormBuildComboBoxControl formComboBoxControlTaxType;
        FormBuildStringControl   formStringControlTaxCode;

        dialog = super();

        dialog.caption("@GLS116805");
        taxTypeControl              = dialog.addField(enumStr(RAssetAssessedTaxType));
        formComboBoxControlTaxType  = taxTypeControl.control();
        formComboBoxControlTaxType.registerOverrideMethod(methodStr(FormComboBoxControl, validate),
                                                        methodStr(RAssetAssessedAssignTax, taxType_modified),
                                                        this);

        taxCodeControl              = dialog.addField(extendedTypeStr(RAssetAssessedTaxCode), "@GLS110662");
        formStringControlTaxCode    = taxCodeControl.control();
        formStringControlTaxCode.registerOverrideMethod(methodStr(FormStringControl, lookup),
                                                        methodStr(RAssetAssessedAssignTax, taxCode_Lookup),
                                                        this);

        transportTaxCodeControl = dialog.addField(extendedTypeStr(RAssetTransportTaxCode), "@GLS116928");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;
        ret = super();
        taxType          = taxTypeControl.value();
        taxCode          = taxCodeControl.value();
        transportTaxCode = transportTaxCodeControl.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        queryRun = new QueryRun(queryStr(RAssetTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssessedTaxCode</Name>
				<Source><![CDATA[
    // the method was created for automation test
    public RAssetAssessedTaxCode parmAssessedTaxCode(RAssetAssessedTaxCode _taxCode = taxCode)
    {
        taxCode = _taxCode;
        return taxCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxType</Name>
				<Source><![CDATA[
    // the method was created for automation test
    public RAssetAssessedTaxType parmTaxType(RAssetAssessedTaxType _taxType = taxType)
    {
        taxType = _taxType;
        return taxType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransportTaxCode</Name>
				<Source><![CDATA[
    // the method was created for automation test
    public RAssetTransportTaxCode parmTransportTaxCode(RAssetTransportTaxCode _transportTaxCode = transportTaxCode)
    {
        transportTaxCode = _transportTaxCode;
        return transportTaxCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RAssetTable  rAssetTable;
        Counter      progressTotal;
        Counter      progressCounter;

        ttsbegin;

        progressTotal = SysQuery::countTotal(queryRun);
        this.progressInit("@GLS116804", progressTotal, #AviFindFile);

        queryRun.query().dataSourceTable(tableNum(RAssetTable)).update(true);

        while (queryRun.next())
        {
            rAssetTable = queryRun.get(tableNum(RAssetTable));

            progressCounter++;
            progress.setCount(progressCounter);
            progress.setText(strFmt("@GLS116356", rAssetTable.AccountNum));

            if (! rAssetTable.TaxCode && taxCode && ! rAssetTable.AssessedTaxType)
            {
                rAssetTable.TaxCode         = taxCode;
                rAssetTable.AssessedTaxType = taxType;
            }
            if (! rAssetTable.TransportTaxCode && transportTaxCode)
            {
                rAssetTable.TransportTaxCode = transportTaxCode;
            }
            rAssetTable.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCode_Lookup</Name>
				<Source><![CDATA[
    private void taxCode_Lookup(FormStringControl _control)
    {
        Query                 locQuery = new Query();
        QueryBuildDataSource  queryTaxTable, queryRTax25TaxTable, querySSGS;
        QueryBuildRange       queryBuildRange;
        SysTableLookup        sysTableLookup;

        sysTableLookup = SysTableLookup::newParameters(tableNum(TaxTable), _control);
        sysTableLookup.addLookupfield(fieldNum(TaxTable, TaxCode));
        sysTableLookup.addLookupfield(fieldNum(TaxTable, TaxName));
        queryTaxTable = locQuery.addDataSource(tableNum(TaxTable));

        queryRTax25TaxTable = queryTaxTable.addDataSource(tableNum(RTax25TaxTable));
        queryBuildRange = queryRTax25TaxTable.addRange(fieldNum(RTax25TaxTable, TaxModule));
        queryBuildRange.value(queryValue(RTax25TaxModule::Asset_RU));
        queryRTax25TaxTable.addRange(fieldNum(RTax25TaxTable, SalesTaxType)).value(queryValue(TaxType_W::AssessedTax));
        queryRTax25TaxTable.joinMode(JoinMode::ExistsJoin);
        queryRTax25TaxTable.addLink(fieldNum(TaxTable, TaxCode), fieldNum(RTax25TaxTable, TaxCode));

        querySSGS = queryRTax25TaxTable.addDataSource(tableNum(PaymentOrderBudgetReceiptClassTable_RU));
        queryBuildRange = querySSGS.addRange(fieldNum(PaymentOrderBudgetReceiptClassTable_RU, ssgs));
        queryBuildRange.value(queryValue(taxTypeControl.value() == RAssetAssessedTaxType::First ? NoYes::Yes : NoYes::No));
        querySSGS.joinMode(JoinMode::ExistsJoin);
        querySSGS.addLink(fieldNum(RTax25TaxTable, PaymentOrderBudgetReceiptClassCode), fieldNum(PaymentOrderBudgetReceiptClassTable_RU, PaymentOrderBudgetReceiptClassCode));

        sysTableLookup.parmQuery(locQuery);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxType_modified</Name>
				<Source><![CDATA[
    private boolean taxType_modified(FormComboBoxControl _control)
    {
        if (_control.modified())
        {
            taxCodeControl.value('');
        }

        return _control.modified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer         version = conPeek(_packedClass, 1);
        container       packedQuery = conPeek(_packedClass, conLen(_packedClass));

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun  = new SysQueryRun(packedQuery);
                }
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (ret && (! taxCode && ! transportTaxCode))
            ret = checkFailed("@GLS116806");

        ret = ret && this.checkTaxCode(taxCode, TaxType_W::AssessedTax) && this.checkAssesedTaxCode(taxType, taxCode);
        ret = ret && this.checkTaxCode(transportTaxCode, TaxType_W::TransportTax);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@GLS116805";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RAssetAssessedAssignTax  assignTax;

        assignTax = new RAssetAssessedAssignTax();
        if (assignTax.prompt())
        {
            assignTax.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>