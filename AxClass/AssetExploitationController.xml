<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetExploitationController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetExploitationController</c> class acts as the controller for the <c>AssetExploitation</c> report.
/// </summary>
public class AssetExploitationController extends SrsReportRunController implements BatchRetryable
{
    AssetTrans assetTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the contract before the dialog is shown to the user.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// No record passed as an argument.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// A <c>AssetTrans</c> record was not passed as an argument.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// A <c>AssetTrans</c> record was not found for acquisition transaction found.
    /// </exception>
    protected void prePromptModifyContract()
    {
        Query                     query;
        QueryBuildDataSource      qbds;
        AssetExploitationContract contract;
        AssetTrans                parmAssetTrans;

        super();

        if (!this.parmArgs())
        {
            throw error(strFmt("@GLS221124", this.parmReportName()));
        }

        parmAssetTrans = this.parmArgs().record() as AssetTrans;

        if (!parmAssetTrans)
        {
            throw error(strFmt("@GLS221124", this.parmReportName()));
        }

        assetTrans = AssetTrans::findFirstType_W(parmAssetTrans.AssetId, parmAssetTrans.BookId, AssetTransType::Acquisition);

        if (!assetTrans)
        {
            throw error(Error::missingRecord(tableStr(AssetTrans)));
        }

        contract   = this.parmReportContract().parmRdpContract() as AssetExploitationContract;
        contract.parmDocumentDate(assetTrans.DocumentDate_W ? assetTrans.DocumentDate_W : assetTrans.TransDate);
        contract.parmDocumentNumber(assetTrans.DocumentNum_W);

        query = this.getFirstQuery();

        qbds = query.dataSourceTable(tableNum(AssetBook));
        qbds.clearRanges();
        SysQuery::findOrCreateRange(qbds, fieldNum(AssetBook, AssetId)).value(assetTrans.AssetId);
        SysQuery::findOrCreateRange(qbds, fieldNum(AssetBook, BookId)).value(assetTrans.BookId);

        qbds = query.dataSourceTable(tableNum(AssetTable));
        qbds.clearRanges();
        SysQuery::findOrCreateRange(qbds, fieldNum(AssetTable, AssetId)).value(assetTrans.AssetId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the opportunity to modify the contract before the report is run.
    /// </summary>
    /// <remarks>
    ///  The following are common scenarios for which to use this method:
    ///  <list type="bullet">
    ///   <item>
    ///   <description>Modifying the query.</description>
    ///   </item>
    ///   <item>
    ///   <description>Setting the contract values that are hidden from the user on the dialog.</description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    Subscribing to the <c>renderingComplete</c> event.
    ///    </description>
    ///   </item>
    ///  </list>
    /// </remarks>
    protected void preRunModifyContract()
    {
        AssetExploitationContract contract;
        RNumDateInWordConverter   wordConverter;
        HcmWorkerRecId            commission1;
        HcmWorkerRecId            commission2;
        HcmWorkerRecId            commission3;
        DocumentDate              documentDate;
        DocumentNum               documentNumber;
        AssetBook                 assetBook;
        AssetTable                assetTable;
        AssetTrans                parmAssetTrans;
        AssetDepreciationProfile  depreciationProfile;

        super();

        if (this.isInBatch())
        {
            // In batch mode, class variable initializations done in prePromptModifyContract do not persist so do it again
            parmAssetTrans = this.parmArgs().record() as AssetTrans;
            assetTrans     = AssetTrans::findFirstType_W(parmAssetTrans.AssetId, parmAssetTrans.BookId, AssetTransType::Acquisition);
        }

        if (!assetTrans)
        {
            throw error(Error::missingRecord(tableStr(AssetTrans)));
        }

        contract       = this.parmReportContract().parmRdpContract() as AssetExploitationContract;
        documentDate   = contract.parmDocumentDate();
        documentNumber = contract.parmDocumentNumber();
        assetTrans.updateDocument_W(documentNumber, documentDate);

        commission1 = contract.parmCommission1();

        if (commission1)
        {
            contract.parmCommissionName1(HcmWorker::worker2Name(commission1));
            contract.parmCommissionTitle1(HcmWorker::worker2ProfessionalTitle(commission1));
        }

        commission2 = contract.parmCommission2();

        if (commission2)
        {
            contract.parmCommissionName2(HcmWorker::worker2Name(commission2));
            contract.parmCommissionTitle2(HcmWorker::worker2ProfessionalTitle(commission2));
        }

        commission3 = contract.parmCommission3();

        if (commission3)
        {
            contract.parmCommissionName3(HcmWorker::worker2Name(commission3));
            contract.parmCommissionTitle3(HcmWorker::worker2ProfessionalTitle(commission3));
        }

        wordConverter       = RNumDateInWordConverter::construct(currentUserLanguage());
        assetBook           = AssetBook::find(assetTrans.AssetId, assetTrans.BookId);
        depreciationProfile = assetBook.depreciationProfile();

        contract.parmAcquisitionDateText(wordConverter.date2strExt(assetBook.AcquisitionDate));
        contract.parmAssetBookDescription(AssetBookTable::find(assetBook.BookId).Description);
        contract.parmAssetBookId(assetBook.BookId);
        contract.parmAssetDepreciationInterval(enum2Value(depreciationProfile.Accrual));
        contract.parmAssetDepreciationMethod(enum2Value(depreciationProfile.Method));
        contract.parmAssetLifeTime(assetBook.LifeTime);
        contract.parmAssetScrapValue(assetBook.ScrapValue);

        AssetInitDepreciationProfile profile = AssetInitDepreciationProfile::newFromBookDate(assetBook);
        profile.parmCalculateOnlyDepreciation(true);
        contract.parmLiquidationDate(profile.calcDepreciationProfile().TransDate);

        contract.parmVendInvoiceId(assetBook.VendInvoiceId);

        assetTable = AssetTable::find(assetTrans.AssetId);
        contract.parmAssetLocationId(assetTable.Location);
        contract.parmAssetLocationName(AssetLocation::find(assetTable.Location).Name);
        contract.parmAssetResponsibleName(HcmWorker::worker2Name(assetTable.WorkerResponsible));
        contract.parmAssetResponsibleTitle(HcmWorker::worker2ProfessionalTitle(assetTable.WorkerResponsible));

        contract.parmCompanyHead(CompanyInfo::find().Head_LT);
        contract.parmOrderDateText(wordConverter.date2strExt(documentDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQuerySelectButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a select button to the dialog.
    /// </summary>
    /// <param name="parameterName">
    /// The name of the query parameter in the data contract.
    /// </param>
    /// <returns>
    /// true if select button is to be shown otherwise false.
    /// </returns>
    /// <remarks>
    /// Used by the query UI builder.
    /// </remarks>
    public boolean showQuerySelectButton(str parameterName)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds query values to the dialog.
    /// </summary>
    /// <param name="parameterName">
    /// The name of the query parameter in the data contract.
    /// </param>
    /// <returns>
    /// true if query values are to be shown; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method is used by the query UI builder.
    /// </remarks>
    public boolean showQueryValues(str parameterName)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceLT00018, funcName());

        AssetExploitationController::newArgs(_args).startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the controller.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> object which is to be provided to the newly created controller instance.
    /// </param>
    /// <returns>
    /// A controller instance.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static AssetExploitationController newArgs(Args _args)
    {
        AssetExploitationController controller = new AssetExploitationController();
        controller.parmReportName(ssrsReportStr(AssetExploitation, Report));
        controller.parmArgs(_args);
        controller.parmDialogCaption("@GLS107517");
        return controller;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>