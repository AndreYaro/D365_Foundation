<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPeriodicDiscountPublishController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// RetailPeriodicDiscountPublishController is used to publish retail periodic discounts.
/// </summary>
public class RetailPeriodicDiscountPublishController extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a RetailPeriodicDiscountPublishController. RetailPeriodicDiscountPublishController is used to execute processingOperations.
    /// </summary>
    /// <param name="_className">
    /// The class name to use when executing the service operation.
    /// </param>
    /// <param name="_methodName">
    /// The method name to use when executing the service operation.
    /// </param>
    /// <param name="_executionMode">
    /// The execution mode to use when executing the service operation.
    /// </param>
    internal void new(
        identifierName _className = classStr(RetailPeriodicDiscountPublishService),
        identifierName _methodName = methodStr(RetailPeriodicDiscountPublishService, processOperations),
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::ScheduledBatch)
    {
        super(_className, _methodName, _executionMode);
        this.parmShowProgressForm(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run the batch service.
    /// </summary>
    /// <param name = "_args">The arguments.</param>
    public static void main(Args _args)
    {
        identifierName className;
        identifierName methodName;
        SysOperationExecutionMode executionMode;

        BatchHeader batchHeader = BatchHeader::construct();
        batchHeader.parmCaption("@RetailPricing:RetailPeriodicDiscountPublishBatchLabel");

        [className, methodName, executionMode] = SysOperationServiceController::parseServiceInfo(_args);

        int taskNum = RetailConfigurationParameters::getNumberOfParallelDiscountPublishTasks();

        if (taskNum == 1 && RetailRunDiscountPublishTasksForAllDiscountsFlight::instance().isEnabled())
        {
            RetailPeriodicDiscountPublishController controller;

            if (_args.parm())
            {
                [className, methodName, executionMode] = SysOperationServiceController::parseServiceInfo(_args);
                controller = new RetailPeriodicDiscountPublishController(className, methodName, executionMode);
            }
            else
            {
                controller = new RetailPeriodicDiscountPublishController();
            }

            // Set the offerids container to conNull explicitly as it's default to [''].
            RetailPeriodicDiscountPublishContract dataContract = controller.getDataContractObject();
            RetailPeriodicDiscount periodicDiscount = _args.record();
            dataContract.parmOfferIds(conNull());

            // As we're trying to enable this feature by default, we should fully publish this if it's from the batch job form.
            dataContract.parmIsFullPublish(true);

            controller.startOperation();
        }
        else
        {
            for (int i = 1; i <= taskNum; i++)
            {
                RetailPeriodicDiscountPublishController controller;

                if (_args.parm())
                {
                    controller = new RetailPeriodicDiscountPublishController(className, methodName, executionMode);
                }
                else
                {
                    controller = new RetailPeriodicDiscountPublishController();
                }

                // Set the offerids container to conNull explicitly as it's default to [''].
                RetailPeriodicDiscountPublishContract dataContract = controller.getDataContractObject();
                RetailPeriodicDiscount periodicDiscount = _args.record();
                dataContract.parmOfferIds(conNull());

                // As we're trying to enable this feature by default, we should fully publish this if it's from the batch job form.
                dataContract.parmIsFullPublish(true);

                controller.parmDialogCaption("@RetailPricing:RetailPeriodicDiscountPublishBatchLabel" + strFmt(' (#%1)', i));

                batchHeader.addTask(controller);
            }

            batchHeader.save();

            // The Process commerce discounts job is added to the batch queue.
            info(strFmt("@SYS73254", "@RetailPricing:RetailPeriodicDiscountPublishBatchLabel"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if the class must run in batch or not.
    /// Forces the slider in the dialog to true.
    /// </summary>
    /// <returns>False since this class must not always run in batch.</returns>
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>