<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchAgreementForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchAgreementForm extends AgreementForm
{
    AgreementFormArgs purchAgreementFormArgs;

    private boolean isIntegrationOwnerCLM;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmPurchAgreementFormArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or set the arguments object containing all parameters passed to the <see cref="PurchAgreement Form"/>.
    /// </summary>
    /// <param name = "_purchAgreementFormArgs">The <c>AgreementFormArgs</c> object.</param>
    /// <returns>
    /// The <c>AgreementFormArgs</c> object.
    /// </returns>
    public AgreementFormArgs parmPurchAgreementFormArgs(AgreementFormArgs _purchAgreementFormArgs = purchAgreementFormArgs)
    {
        purchAgreementFormArgs = _purchAgreementFormArgs;
        return purchAgreementFormArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the <see cref="PurchAgreementCreate Form"/>.
    /// </summary>
    /// <returns>
    /// The result of the form creation.
    /// </returns>
    public AgreementCreateResult create()
    {
        xArgs args = new xArgs();
        FormRun purchAgreementCreate;
        AgreementCreateIForm agreementCreateFormHelper;

        args.name(this.createFormName());
        args.caller(this);
        args.parmObject(purchAgreementFormArgs);
        purchAgreementCreate = classFactory.formRunClass(args);
        agreementCreateFormHelper = purchAgreementCreate as AgreementCreateIForm;
        purchAgreementCreate.init();
        purchAgreementCreate.run();
        purchAgreementCreate.wait();

        return agreementCreateFormHelper.getResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFormName</Name>
				<Source><![CDATA[
    public str createFormName()
    {
        return formStr(PurchAgreementCreate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCalledInVendorContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the call is from a vendor context.
    /// </summary>
    /// <param name = "_args">Arguments that will be used to check if the record is in vendor context.</param>
    /// <returns>true if the form is called from a vendor record; Otherwise false.</returns>
    public boolean isCalledInVendorContext(xArgs _args)
    {
        return _args.record().TableId == tableNum(VendTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCreateFormArgsFromCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>PurchAgreementFormArgs</c> parameters to be used in the <c>PurchAgreementCreate</c> form
    /// </summary>
    /// <param name = "_args">Arguments used as source for the <c>PurchAgreementCreate</c> form.</param>
    public void initCreateFormArgsFromCaller(xArgs _args)
    {
        VendTable vendorRecord;
        if (purchAgreementFormArgs && _args)
        {
            // Filling the Purchase Agreement args DTO.
            purchAgreementFormArgs.parmCallerDataSet(_args.dataset());
            purchAgreementFormArgs.parmCallerRecord(_args.record());

            if (this.isCalledInVendorContext(_args))
            {
                vendorRecord = _args.record();
                purchAgreementFormArgs.parmTransferAccountOnCreate(true);
                purchAgreementFormArgs.parmTransferCustVendAccountAccountNum(vendorRecord.AccountNum);
                purchAgreementFormArgs.parmTransferCustVendAccountDataAreaId(vendorRecord.DataAreaId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasVendorChangedInVendorContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if vendor account changed while called from a vendor context.
    /// </summary>
    /// <param name = "_args">Arguments used as vendor context and vendor account original reference.</param>
    /// <param name = "_purchAgreementHeader">Purchase agreement header buffer used for vendor account comparison against the arguments.</param>
    /// <returns>true if called from a vendor context and vendor account from the purchase agreement header buffer is different than the vendor account in the originating vendor context arguments;
    /// Otherwise false.</returns>
    public boolean hasVendorChangedInVendorContext(xArgs _args, PurchAgreementHeader _purchAgreementHeader)
    {
        boolean vendorChanged;

        if (this.isCalledInVendorContext(_args))
        {
            VendTable vendTable = _args.record();
            vendorChanged = vendTable.AccountNum != _purchAgreementHeader.VendAccount;
        }

        return vendorChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openRecordInNewForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens record in a new form by running <c>PurchAgreementDetails</c> display menu item.
    /// </summary>
    /// <param name = "_purchAgreementHeader">Purchase agreement header record to open the form for.</param>
    public void openRecordInNewForm(PurchAgreementHeader _purchAgreementHeader)
    {
        Args args = new Args();
        args.lookupRecord(_purchAgreementHeader);
        new MenuFunction(menuItemDisplayStr(PurchAgreementDetails), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>disableHeaderButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disables the agreement header level buttons.
    /// </summary>
    public void disableHeaderButtons()
    {
        FormDesign design = formRun.design();

        design.controlName(formControlStr(PurchAgreement, buttonReleaseOrderCreate)).enabled(false);
        design.controlName(formControlStr(PurchAgreement, buttonConfirmation)).enabled(false);
        design.controlName(formControlStr(PurchAgreement, buttonConfirmationHistory)).enabled(false);
        design.controlName(formControlStr(PurchAgreement, buttonReleaseOrderMatch)).enabled(false);
        design.controlName(formControlStr(PurchAgreement, buttonInvoiceHistory)).enabled(false);
        design.controlName(formControlStr(PurchAgreement, SalesAgreementGenerationTask)).enabled(false);
        design.controlName(formControlStr(PurchAgreement, ViewIntercompanyAgreement)).enabled(false);
        // <GEERU>
        if (countryRegion_RU)
        {
            design.controlName(formcontrolstr(PurchAgreement, SalesAgreementGenerationTask_RU)).enabled(false);
            design.controlName(formcontrolstr(PurchAgreement, ViewIntracompanyAgreement_RU)).enabled(false);
            design.controlName(formcontrolstr(PurchAgreement, AgreementSettlePurchTable_RU)).enabled(false);
            design.controlName(formcontrolstr(PurchAgreement, AgreementNotSettlePurchTable_RU)).enabled(false);
        }
        // </GEERU>

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            design.controlName(formControlStr(PurchAgreement, PurchAgreementTree_PSN)).enabled(false);
            design.controlName(formControlStr(PurchAgreement, PurchAgreementChild_PSN)).enabled(false);
            design.controlName(formControlStr(PurchAgreement, ChangeContractor_PSN)).enabled(false);
            design.controlName(formControlStr(PurchAgreement, PurchAgreementFinDimensionAccess_PSN)).enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>disableLineButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disables the agreement line level buttons.
    /// </summary>
    public void disableLineButtons()
    {
        FormDesign design = formRun.design();

        design.controlName(formControlStr(PurchAgreement, newLineGridCmdButton)).enabled(false);
        design.controlName(formControlStr(PurchAgreement, deleteLineGridCmdButton)).enabled(false);
        design.controlName(formControlStr(PurchAgreement, attachmentsLineGridCmdButton)).enabled(false);
        design.controlName(formControlStr(PurchAgreement, buttonReleaseOrderMatchLineGrid)).enabled(false);
        design.controlName(formControlStr(PurchAgreement, buttonInvoiceHistoryLineGrid)).enabled(false);
        design.controlName(formControlStr(PurchAgreement, BudgetReservationLineAgreementLineMenu_PSN)).enabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the agreement header level buttons.
    /// </summary>
    /// <param name="_agreementHeader">
    /// A table buffer that contains the current Agreement Header table values.
    /// </param>
    public void enableHeaderButtons(AgreementHeader _agreementHeader)
    {
        PurchAgreementHeader purchAgreementHeader;
        FormDataSource       purchAgreementHeader_ds = SysFormDataSource::findDataSource(formRun, tableNum(PurchAgreementHeader));

        container relatedObjectsExistanceFlags = _agreementHeader.relatedObjectExistanceFlags();

        boolean areReleasesExistForCurrentAgreement    = conPeek(relatedObjectsExistanceFlags, AgreementHeader::posReleasesExist());
        boolean confirmationExistsForCurrentAgreement  = conPeek(relatedObjectsExistanceFlags, AgreementHeader::posConfirmationsExist());
        boolean areInvoicesExistForCurrentAgreement    = conPeek(relatedObjectsExistanceFlags, AgreementHeader::posInvoicesExist());
        boolean canRelease                             = conPeek(relatedObjectsExistanceFlags, AgreementHeader::posCanReleaseAgreement()) && this.isProjectStageValidToCreateItemTask(_agreementHeader);
        boolean canCreateIntercompanyAgreement         = conPeek(relatedObjectsExistanceFlags, AgreementHeader::posCanCreateIntercompanyAgreement());
        boolean canViewRelatedAgreement                = !isIntegrationOwnerCLM && conPeek(relatedObjectsExistanceFlags, AgreementHeader::posCanViewRelatedAgreement());
        boolean canDeleteAgreement                     = conPeek(relatedObjectsExistanceFlags, AgreementHeader::posCanDeleteAgreement());

        boolean enableControl;
        boolean frenchContextEnabled;
        boolean canAddLinesToAgreement  = true;

        FormDesign design = formRun.design();
        // <GEERU>
        boolean canCreateIntracompanyAgreement_RU      = conPeek(relatedObjectsExistanceFlags, AgreementHeader::posCanCreateIntracompanyAgreement_RU());
        boolean canViewRelatedAgreement_RU             = !isIntegrationOwnerCLM && conPeek(relatedObjectsExistanceFlags, AgreementHeader::posCanViewRelatedAgreement_RU());
        boolean canViewSettled_RU                      = conPeek(relatedObjectsExistanceFlags, AgreementHeader::posCanViewSettled_RU());
        boolean canViewNotSettled_RU                   = conPeek(relatedObjectsExistanceFlags, AgreementHeader::posCanViewNotSettled_RU());
        // </GEERU>

        boolean canEnableConfirmAndProformaButtons = _agreementHeader.canConfirmAgreement();

        design.controlName(formControlStr(PurchAgreement, buttonConfirmation)).enabled(canEnableConfirmAndProformaButtons);
        design.controlName(formControlStr(PurchAgreement, PurchAgreementProFormaConfirm)).enabled(canEnableConfirmAndProformaButtons);
        design.controlName(formControlStr(PurchAgreement, buttonConfirmationHistory)).enabled(confirmationExistsForCurrentAgreement);
        design.controlName(formControlStr(PurchAgreement, buttonInvoiceHistory)).enabled(areInvoicesExistForCurrentAgreement);
        purchAgreementHeader_ds.allowDelete(canDeleteAgreement);
        design.controlName(formControlStr(PurchAgreement, SalesAgreementGenerationTask)).enabled(canCreateIntercompanyAgreement);
        design.controlName(formControlStr(PurchAgreement, ViewIntercompanyAgreement)).enabled(canViewRelatedAgreement);

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            frenchContextEnabled = PublicSectorUtils::isFrenchRegulatoryEnabled();

            if (frenchContextEnabled)
            {
                canAddLinesToAgreement = _agreementHeader.canAddLinesToAgreement();

                design.controlName(formControlStr(PurchAgreement, PurchAgreementChild_PSN)).enabled(!_agreementHeader.canCreateChildAgreement());
                design.controlName(formControlStr(PurchAgreement, PurchAgreementTree_PSN)).enabled(true);
                design.controlName(formControlStr(PurchAgreement, ChangeContractor_PSN)).enabled(_agreementHeader.canChangeContractor());
                design.controlName(formControlStr(PurchAgreement, PurchAgreementFinDimensionAccess_PSN)).enabled(_agreementHeader.canAuthorizeFinancialDimension());
            }

            enableControl = !this.getDirectInvoiceEnabledState(_agreementHeader);

            design.controlName(formControlStr(PurchAgreement, buttonReleaseOrderCreate)).enabled(enableControl && canRelease && canAddLinesToAgreement);
            design.controlName(formControlStr(PurchAgreement, buttonReleaseOrderMatch)).enabled(enableControl && areReleasesExistForCurrentAgreement);

            if (_agreementHeader is PurchAgreementHeader)
            {
                purchAgreementHeader = _agreementHeader as PurchAgreementHeader;
                this.updateDesign_PSN(FormDataUtil::getFormDataSource(purchAgreementHeader));
            }
        }
        else
        {
            design.controlName(formControlStr(PurchAgreement, buttonReleaseOrderCreate)).enabled(canRelease);
            design.controlName(formControlStr(PurchAgreement, buttonReleaseOrderMatch)).enabled(areReleasesExistForCurrentAgreement);
        }

        design.controlName(formControlStr(PurchAgreement, PurchAgreementHeader_ParentPurchAgreementID_PSN)).visible(frenchContextEnabled);
        design.controlName(formControlStr(PurchAgreement, PurchAgreementSubcontractor_PurchAgreementVendorType_PSN)).visible(frenchContextEnabled);
        design.controlName(formControlStr(PurchAgreement, PurchAgreementSubcontractor_MaximumAmount_PSN)).visible(frenchContextEnabled);
        design.controlName(formControlStr(PurchAgreement, CurrentAmount_PSN)).visible(frenchContextEnabled);
        design.controlName(formControlStr(PurchAgreement, VendBankAccount_PSN)).visible(frenchContextEnabled);

        // <GEERU>
        if (countryRegion_RU)
        {
            design.controlName(formControlStr(PurchAgreement, SalesAgreementGenerationTask_RU)).enabled(canCreateIntracompanyAgreement_RU);
            design.controlName(formControlStr(PurchAgreement, ViewIntracompanyAgreement_RU)).enabled(canViewRelatedAgreement_RU);
            design.controlName(formcontrolstr(PurchAgreement, AgreementSettlePurchTable_RU)).enabled(canViewSettled_RU);
            design.controlName(formControlStr(PurchAgreement, AgreementNotSettlePurchTable_RU)).enabled(canViewNotSettled_RU);

            if (CFMParameters::isPaymentRequestsEnabled())
            {
                purchAgreementHeader_ds.allowDelete(canDeleteAgreement && !CFMPaymentRequestTable::existByAgreementId(purchAgreementHeader.PurchNumberSequence));
            }
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the allow edit property on the specified table fields of the purchase agreement header.
    /// </summary>
    /// <param name="_purchAgreementHeader_ds">
    /// A handle to the data source of the purchase agreement header form.
    /// </param>
    /// <param name="_dataProvider">
    /// The data provider that provides data necessary for determining agreement header fields editability.
    /// </param>
    public void enableHeaderFields(
        FormDataSource                              _purchAgreementHeader_ds,
        AgreementHeaderFieldEditabilityDataProvider _dataProvider = AgreementHeaderFieldEditabilityDataProvider::newFromAgreementHeader(_purchAgreementHeader_ds.cursor()))
    {
        PurchAgreementHeaderFieldEditabilityDataProvider dataProvider = _dataProvider;

        super(_purchAgreementHeader_ds, _dataProvider);

        this.setAllowEdit(_purchAgreementHeader_ds, fieldNum(PurchAgreementHeader, VendAccount), dataProvider.canEditVendor());

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            _purchAgreementHeader_ds.object(fieldNum(PurchAgreementHeader, ParentPurchAgreementID_PSN)).allowEdit(false);
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            this.updateDesign_PSN(_purchAgreementHeader_ds);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderFields_RU</Name>
				<Source><![CDATA[
    public void enableHeaderFields_RU(FormDataSource _purchAgreementHeader_ds,
        FormDataSource _purchAgreementHeaderExt_RU_ds,
        FormDataSource _purchAgreementHeaderDefault_ds)
    {
        PurchAgreementHeader purchAgreementHeader = _purchAgreementHeader_ds.cursor() as PurchAgreementHeader;

        super(_purchAgreementHeader_ds, _purchAgreementHeaderExt_RU_ds, _purchAgreementHeaderDefault_ds);

        if (purchAgreementHeader.RecId)
        {
            _purchAgreementHeader_ds.object(fieldNum(PurchAgreementHeader, VendAccount)).allowEdit(false);
            _purchAgreementHeader_ds.object(fieldNum(PurchAgreementHeader, VendAccount)).skip(true);
        }

        _purchAgreementHeaderDefault_ds.object(fieldNum(PurchAgreementHeaderDefault, VendorInvoiceAccount)).allowEdit(
            _purchAgreementHeader_ds.object(fieldNum(PurchAgreementHeader, VendAccount)).allowEdit());
        _purchAgreementHeaderDefault_ds.object(fieldNum(PurchAgreementHeaderDefault, VendorInvoiceAccount)).skip(
            _purchAgreementHeader_ds.object(fieldNum(PurchAgreementHeader, VendAccount)).skip());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the agreement line level buttons.
    /// </summary>
    /// <param name="_agreementLine">
    /// A table buffer that contains the current agreement line table values.
    /// </param>
    /// <param name="_agreementHeader">
    /// A table buffer that contains the current agreement header table values.
    /// </param>
    public void enableLineButtons(AgreementLine _agreementLine, AgreementHeader _agreementHeader)
    {
        container relatedObjectsExistanceFlags = _agreementLine.relatedObjectExistanceFlags();

        boolean areReleasesExistForCurrentLine      = conPeek(relatedObjectsExistanceFlags, AgreementLine::posReleasesExist());
        boolean areInvoicesExistForCurrentLine      = conPeek(relatedObjectsExistanceFlags, AgreementLine::posInvoicesExist());
        boolean canDeleteAgreementLine              = !isIntegrationOwnerCLM && conPeek(relatedObjectsExistanceFlags, AgreementLine::posCanDeleteAgreementLine());
        boolean canCreateNewLine                    = !isIntegrationOwnerCLM && _agreementHeader.RecId;
        boolean attachmentsEnabledForCurrentLine    = _agreementLine.RecId;
        boolean isParent;
        boolean directInvoicingRequired             = this.getDirectInvoiceEnabledState(_agreementHeader);
        PurchAgreementHeader purchAgreementHeader   = _agreementHeader;
        boolean isCreatedFromPurchRFQReplyLine      = PurchRFQReplyLinePurchAgreementLine::findByPurchAgreementLine(_agreementLine.RecId).RecId !=0;

        boolean isLineSelected                      = _agreementLine.RecId != 0;
 
        FormDesign design = formRun.design();

        design.controlName(formControlStr(PurchAgreement, newLineGridCmdButton)).enabled(canCreateNewLine);
        design.controlName(formControlStr(PurchAgreement, deleteLineGridCmdButton)).enabled(canDeleteAgreementLine);
        design.controlName(formControlStr(PurchAgreement, attachmentsLineGridCmdButton)).enabled(attachmentsEnabledForCurrentLine);
        design.controlName(formControlStr(PurchAgreement, buttonReleaseOrderMatchLineGrid)).enabled(!directInvoicingRequired && areReleasesExistForCurrentLine);
        design.controlName(formControlStr(PurchAgreement, buttonInvoiceHistoryLineGrid)).enabled(areInvoicesExistForCurrentLine);
        design.controlName(formControlStr(PurchAgreement, buttonRequestForQuotationLineGrid)).enabled(isCreatedFromPurchRFQReplyLine);

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            isParent = purchAgreementHeader.hasChildren();

            design.controlName(formControlStr(PurchAgreement, newLineGridCmdButton)).enabled(_agreementHeader.canAddLinesToAgreement());
            design.controlName(formControlStr(PurchAgreement, DeleteLineGridCmdButton)).enabled(!isParent);
            design.controlName(formControlStr(PurchAgreement, RelatedInfoLineGridMenuButton)).enabled(!isParent);
            design.controlName(formControlStr(PurchAgreement, GeneralLineGridMenuButton)).enabled(!isParent);
        }

        design.controlName(formControlStr(PurchAgreement, BudgetReservationLineAgreementLineMenu_PSN)).enabled(isLineSelected);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nonStatusHeaderFieldChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Examines the passed in <c>PurchAgreementHeader</c> form datasource and determines if any field other than
    /// the <c>AgreementStatus</c> field has been modified.
    /// </summary>
    /// <param name="_purchAgreementHeader_ds">
    /// The <c>PurchAgreementHeader</c> datasource to examine.
    /// </param>
    /// <returns>
    /// true if any field other than the <c>AgreementStatus</c> field has been modified; otherwise false
    /// </returns>
    /// <remarks>
    /// This method expects that the datasource passed in is the <c>PurchAgreementHeader</c> table datasource
    /// and will raise an exception if it is not.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Wrong use of function exception thrown if the passed in datasource is null or not the <c>PurchAgreementHeader</c> datasource.
    /// </exception>
    public boolean nonStatusHeaderFieldChanged(FormDataSource _purchAgreementHeader_ds)
    {
        SysDictTable            sysDictAgreementHeader;
        SysDictField            field;
        boolean                 nonStatusHeaderFieldChanged;
        SetEnumerator           fieldSetEnumerator;
        PurchAgreementHeader    purchAgreementHeader;
        AgreementHeader         agreementHeader;

        if ((!_purchAgreementHeader_ds) || _purchAgreementHeader_ds.table() != tableNum(PurchAgreementHeader))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        sysDictAgreementHeader  = new SysDictTable(tableNum(PurchAgreementHeader));
        fieldSetEnumerator      = sysDictAgreementHeader.fields(true, true, true).getEnumerator();
        purchAgreementHeader    = _purchAgreementHeader_ds.cursor() as PurchAgreementHeader;
        agreementHeader         = purchAgreementHeader as AgreementHeader;

        while (fieldSetEnumerator.moveNext())
        {
            field = fieldSetEnumerator.current();

            if (field && (field.visible()) && (field.isSql()) && (!field.isSystem() && (field.allowEdit()))
                        && (field.name() != fieldStr(AgreementHeader, AgreementState)))
            {
                if (field.tableid() == tableNum(PurchAgreementHeader)
                                && purchAgreementHeader.getFieldValue(field.name()) != purchAgreementHeader.orig().getFieldValue(field.name()))
                {
                    nonStatusHeaderFieldChanged = true;
                    break;
                }
                else if (field.tableid() == tableNum(AgreementHeader)
                                && agreementHeader.getFieldValue(field.name()) != agreementHeader.orig().getFieldValue(field.name()))
                {
                    nonStatusHeaderFieldChanged = true;
                    break;
                }
            }
        }

        return nonStatusHeaderFieldChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the allow edit property on the specified table fields of the agreement line.
    /// </summary>
    /// <param name="_agreementLine_ds">
    ///    A handle to the data source of the agreement line form.
    /// </param>
    /// <param name="_agreementLineQuantityCommitment_ds">
    ///    A handle to the data source of the quantity commitment form of the agreement line.
    /// </param>
    /// <param name="_dataProvider">
    ///     The data provider that provides data necessary for determining agreement line fields editability.
    /// </param>
    public void enableLineFields(
        FormDataSource                              _agreementLine_ds,
        FormDataSource                              _agreementLineQuantityCommitment_ds,
        AgreementLineFieldEditabilityDataProvider   _dataProvider)
    {
        this.setAllowEditAndMandatory(_agreementLine_ds, fieldNum(AgreementLine, ProjectProjId), _dataProvider.canEditProjectId());

        super(_agreementLine_ds, _agreementLineQuantityCommitment_ds, _dataProvider);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableProjectHeaderFieldAccess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables project-related fields on the agreement header.
    /// </summary>
    /// <param name = "_purchAgreementHeader_ds">The data source for the <c>PurchAgreementHeader</c> table.</param>
    /// <param name = "_agreementHeaderDefault_ds">The data source for the <c>AgreementHeaderDefault</c> table.</param>
    /// <param name="_dataProvider">The data provider that provides data necessary for determining agreement fields editability; optional.</param>
    public void enableProjectHeaderFieldAccess(
        FormDataSource                                      _purchAgreementHeader_ds,
        FormDataSource                                      _agreementHeaderDefault_ds,
        PurchAgreementHeaderFieldEditabilityDataProvider    _dataProvider = PurchAgreementHeaderFieldEditabilityDataProvider::newFromAgreementHeader(_purchAgreementHeader_ds.cursor()))
    {
        if (isProject)
        {
            this.setAllowEdit(_agreementHeaderDefault_ds, fieldNum(AgreementHeaderDefault, Project), _dataProvider.canEditProjectId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDirectInvoiceEnabledState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the direct invoice state of the selected purchase agreement in a list page.
    /// </summary>
    /// <param name="_purchAgreementHeader">
    /// The active record in the <c>PurchAgreementHeader</c> table.
    /// </param>
    /// <returns>
    /// A Boolean value that indicates whether direct invoice is enabled on the classification of selected
    /// purchase orders in the list page.
    /// </returns>
    /// <remarks>
    /// This is public sector code.
    /// </remarks>
    public boolean getDirectInvoiceEnabledState(PurchAgreementHeader _purchAgreementHeader)
    {
        return AgreementClassification::find(_purchAgreementHeader.AgreementClassification).DirectInvoiceEnable_PSN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRangesFromCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form data sources and ranges by using the calling object.
    /// </summary>
    /// <param name="_agreementHeader_ds">
    /// A handle to the data source of the <c>AgreementHeader</c> form.
    /// </param>
    /// <param name="_agreementHeaderDefault_ds">
    /// A handle to the data source of the <c>AgreementHeaderDefault</c> form.
    /// </param>
    public void initRangesFromCaller(FormDataSource _agreementHeader_ds, FormDataSource _agreementHeaderDefault_ds)
    {
        PurchRFQLine            purchRFQLine;
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        if (formRun.args().dataset() == tableNum(PurchRFQLine) &&
            formRun.args().menuItemName() == menuitemDisplayStr(PurchAgreement))
        {
            purchRFQLine = formRun.args().record() as PurchRFQLine;
            queryBuildDataSource = SysQuery::findOrCreateDataSource(_agreementHeader_ds.query(), tableNum(PurchAgreementHeader));

            queryBuildDataSource.clearDynalinks();
            queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(PurchAgreementHeader, PurchNumberSequence));
            queryBuildRange.value(queryValue(purchRFQLine.AgreementId));
            queryBuildRange.status(RangeStatus::Locked);
        }
        else
        {
            super(_agreementHeader_ds, _agreementHeaderDefault_ds);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqFormHandlerAgreementId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the number sequence form handler.
    /// </summary>
    /// <param name="_agreementHeader_ds">
    ///    The data source for which the number sequence handler is needed.
    /// </param>
    /// <returns>
    ///    The number sequence form handler.
    /// </returns>
    /// <remarks>
    ///    The handler is used to manage the number sequence values for the <c>PurchNumberSequence</c> field
    ///    of the <c>PurchAgreementHeader</c> table.For more information, see <see
    ///    cref="formMethodDataSourceCreate Method" />, <see cref="formMethodDataSourceDelete Method" />, <see
    ///    cref="formMethodDataSourceLinkActive Method" />, <see cref="formMethodDataSourceValidateWrite
    ///    Method" />, <see cref="formMethodDataSourceWrite Method" />.
    /// </remarks>
    protected NumberSeqFormHandler numberSeqFormHandlerAgreementId(FormDataSource _agreementHeader_ds)
    {
        // <GEERU>
        PurchAgreementHeader purchAgreementHeader;
        RefRecId             numberSequenceId;

        if (countryRegion_RU)
        {
            purchAgreementHeader = _agreementHeader_ds.cursor() as PurchAgreementHeader;

            if (purchAgreementHeader.AgreementClassification)
            {
                numberSequenceId = AgreementClassificationExt_RU::findByAgreementClassification(purchAgreementHeader.AgreementClassification).NumberSequenceTable;
            }

            if (!numberSequenceId)
            {
                numberSequenceId = PurchParameters::numRefPurchAgreementId().NumberSequenceId;
            }

            if (numberSeqFormHandlerAgreementId &&
                numberSeqFormHandlerAgreementId.parmNumberSequenceId() != numberSequenceId)
            {
                numberSeqFormHandlerAgreementId = null;
            }
        }
        // </GEERU>
        if (!numberSeqFormHandlerAgreementId)
        {
            numberSeqFormHandlerAgreementId = NumberSeqFormHandler::newForm(
                // <GEERU>
                numberSequenceId ? numberSequenceId : PurchParameters::numRefPurchAgreementId().NumberSequenceId,
                // </GEERU>
                formRun,
                _agreementHeader_ds,
                fieldNum(PurchAgreementHeader, PurchNumberSequence));
        }
        return numberSeqFormHandlerAgreementId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>relationType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the relation type of the <c>AgreementHeader</c> table.
    /// </summary>
    /// <returns>
    ///    The relation type of the <c>AgreementHeader</c>.
    /// </returns>
    public RelationType relationType()
    {
        return tableNum(PurchAgreementHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign_PSN</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Controls the visibility and editability of the <c>PurchAgreement</c> form's controls based on Public Sector requirements.
    ///     These reqiurements are to be met when workflow is enabled for Purchase Agreements.
    /// </summary>
    /// <param name="_purchAgreementHeader_ds">
    ///    A handle to the data source of the purchase agreement header form.
    /// </param>
    public void updateDesign_PSN(FormDataSource _purchAgreementHeader_ds = null, FormDataSource _agreementLine_ds = null)
    {
        boolean                 canDeleteAgreement;
        boolean                 canEditAgreement;
        boolean                 canConfirmAgreement;
        boolean                 isWorkFlowStatusVisible;
        boolean                 isAgreementStateEditable = true;

        FormDesign              design;
        PurchAgreementHeader    purchAgreementHeader;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            design = formRun.design();

            if (!_purchAgreementHeader_ds)
            {
                _purchAgreementHeader_ds = SysFormDataSource::findDataSource(formRun, tableNum(PurchAgreementHeader));
            }

            if (!_agreementLine_ds)
            {
                _agreementLine_ds = SysFormDataSource::findDataSource(formRun, tableNum(AgreementLine));
            }

            purchAgreementHeader = _purchAgreementHeader_ds.cursor() as PurchAgreementHeader;

            if (purchAgreementHeader.hasActiveWorkFlow())
            {
                isWorkFlowStatusVisible     = true;

                canConfirmAgreement = purchAgreementHeader.canConfirmAgreement_PSN();
                canDeleteAgreement  = purchAgreementHeader.canDeleteAgreement_PSN();
                canEditAgreement    = purchAgreementHeader.canEditAgreement_PSN();

                design.controlName(formControlStr(PurchAgreement, buttonConfirmation)).enabled(canConfirmAgreement);
                _purchAgreementHeader_ds.allowDelete(canDeleteAgreement);

                if (canEditAgreement)
                {
                    design.viewEditMode(ViewEditMode::Auto);
                }
                else
                {
                    design.viewEditMode(ViewEditMode::View);
                }

                _purchAgreementHeader_ds.allowDelete(canDeleteAgreement);
                _purchAgreementHeader_ds.allowEdit(canEditAgreement);

                _agreementLine_ds.allowDelete(canDeleteAgreement);
                _agreementLine_ds.allowEdit(canEditAgreement);
                _agreementLine_ds.allowCreate(canEditAgreement);
            }
            else if (PurchAgreementHeader::activeWorkflowTemplateExists())
            {
                design.controlName(formControlStr(PurchAgreement, buttonConfirmation)).enabled(false);
            }

            _purchAgreementHeader_ds.object(fieldNum(PurchAgreementHeader, WorkflowStatus_PSN)).visible(isWorkFlowStatusVisible);
            _purchAgreementHeader_ds.object(fieldNum(PurchAgreementHeader, WorkflowStatus_PSN)).skip(!isWorkFlowStatusVisible);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkflowStatusForEdit_PSN</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the Purchase Agreements workflow status when the Purchase Agreements form is in Edit mode,
    ///     according to the Public Sector requirements.
    /// </summary>
    /// <param name="_purchAgreementHeader_ds">
    ///     A handle to the data source of the purchase agreement header form.
    /// </param>
    public void updateWorkflowStatusForEdit_PSN(FormDataSource  _purchAgreementHeader_ds)
    {
        PurchAgreementHeader purchAgreementHeader = _purchAgreementHeader_ds.cursor() as PurchAgreementHeader;

        if (purchAgreementHeader.mustUpdateWorkflowStatusForEdit_PSN())
        {
            purchAgreementHeader.updateWorkflowStatusForEdit_PSN();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>PurchAgreementForm</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>PurchAgreementForm</c> class.
    /// </returns>
    static public PurchAgreementForm construct()
    {
        PurchAgreementForm purchAgreementForm = new PurchAgreementForm();

        return purchAgreementForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFormRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>PurchAgreementForm</c> class.
    /// </summary>
    /// <param name="_formRun">
    ///    A handle to the current purchase agreement form.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>PurchAgreementForm</c> class.
    /// </returns>
    static public PurchAgreementForm newFormRun(FormRun  _formRun)
    {
        PurchAgreementForm      purchAgreementForm = PurchAgreementForm::construct();

        purchAgreementForm.parmFormRun(_formRun);

        return purchAgreementForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectStageValidToCreateItemTask</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Method to check if project is in valid stage to release the purchase agreement.
    /// </summary>
    /// <param name="_agreementHeader">
    ///    A table buffer that contains the current Agreement Header table values.
    /// </param>
    /// <returns>
    ///    true if user has set project parameters to allow creating item tasks for the given project stage
    ///    or when purchase agreement is not assigned to any project, false otherwise.
    /// </returns>
    private boolean isProjectStageValidToCreateItemTask(AgreementHeader _agreementHeader)
    {
        ProjId projId = _agreementHeader.agreementHeaderDefault().Project;
        if (projId)
        {
            return ProjTable::isCreateItemTaskRuleDefined(projId);
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsIntegrationOwnerCLM</Name>
				<Source><![CDATA[
    internal boolean parmIsIntegrationOwnerCLM(boolean _isIntegrationOwnerCLM = isIntegrationOwnerCLM)
    {
        isIntegrationOwnerCLM = _isIntegrationOwnerCLM;
        return isIntegrationOwnerCLM;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>