<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReleaseUpdateDB70_FixedAssetSetupDepBookRemovalDepBookJournalName</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Upgrades data from <c>AssetDepBookJournalName</c> to <c>LedgerJournalName</c> table.
/// </summary>
class ReleaseUpdateDB70_FixedAssetSetupDepBookRemovalDepBookJournalName extends ReleaseUpdateDB70_FixedAssets
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preSyncUpgradeAssetDepBookJournalName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Move <c>AssetDepBookJournalName</c> data into a temporary table.
    /// </summary>
    [UpgradeScriptDescriptionAttribute("@FixedAssets:FA_MessageDeveloper_AssetDepBookTableUpgrade"),
     UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PreSyncUpdate),
     UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::SharedScript),
     UpgradeScriptTableAttribute('AssetDepBookJournalName', false, true, false, false)
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void preSyncUpgradeAssetDepBookJournalName()
    {
        // Drop the AssetDepBookJournalNameUpgradeTmp table if it exists.
        this.executeSqlStatement(this.getSQLDropAssetDepBookJournalNameUpgradeTmp());

        // Create temp upgrade table.
        this.executeSqlStatement(this.getSQLCreateAssetDepBookJournalNameUpgradeTmp());

        // Move AssetDepBookJournalName rows to temp table.
        this.executeSqlStatement(this.getSQLInsertAssetDepBookJournalNameUpgradeTmp());
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSyncUpgradeAssetDepBookJournalName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the <c>AssetDepBookJournalName</c> data from the temporary table into <c>LedgerJournalName</c> table.
    /// </summary>
    [UpgradeScriptDescriptionAttribute("@FixedAssets:FA_MessageDeveloper_AssetDepBookTableUpgrade"),
     UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PostSyncUpdate),
     UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::SharedScript),
     UpgradeDependsOnModuleAttribute(classStr(ReleaseUpdateDB70_FixedAssetJournalDepBookRemovalDepBookJournalTrans), methodStr(ReleaseUpdateDB70_FixedAssetJournalDepBookRemovalDepBookJournalTrans, postSyncAllocateVoucherAssetDepBookJournalTrans)),
     UpgradeScriptTableAttribute(tableStr(LedgerJournalName), true, true, false, false),
     UpgradeScriptTableAttribute('AssetDepBookJournalName', false, true, false, false)
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void postSyncUpgradeAssetDepBookJournalName()
    {
        // Move the data into the LedgerJournalName from the AssetDepBookJournalNameUpgradeTmp table
        this.executeSqlStatement(this.getSQLInsertLedgerJournalName());

        // drop temporary upgrade table
        this.executeSqlStatement(this.getSQLDropAssetDepBookJournalNameUpgradeTmp());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLDropAssetDepBookJournalNameUpgradeTmp</Name>
				<Source><![CDATA[
    private str getSQLDropAssetDepBookJournalNameUpgradeTmp()
    {
        str sqlStatement = @"
            IF OBJECT_ID ( 'dbo.ASSETDEPBOOKJOURNALNAMEUPGRADETMP', 'U') IS NOT NULL
                DROP TABLE ASSETDEPBOOKJOURNALNAMEUPGRADETMP";

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLCreateAssetDepBookJournalNameUpgradeTmp</Name>
				<Source><![CDATA[
    private str getSQLCreateAssetDepBookJournalNameUpgradeTmp()
    {
        str sqlStatement = @"
            IF OBJECT_ID ( 'dbo.ASSETDEPBOOKJOURNALNAMEUPGRADETMP', 'U') IS NULL
                CREATE TABLE [dbo].[ASSETDEPBOOKJOURNALNAMEUPGRADETMP](
                    [BLOCKUSERGROUPID] [nvarchar](10) NOT NULL,
                    [DESCRIPTION] [nvarchar](60) NOT NULL,
                    [JOURNALNAMEID] [nvarchar](10) NOT NULL,
                    [LINESLIMIT] [int] NOT NULL,
                    [NUMBERSEQUENCETABLE] [bigint] NOT NULL,
                    [DATAAREAID] [nvarchar](4) NOT NULL,
                    [PARTITION] [bigint] NOT NULL
                 CONSTRAINT [I_10868JOURNALNAMEUPGRADETMPIDX] PRIMARY KEY CLUSTERED
                (
                    [PARTITION] ASC,
                    [DATAAREAID] ASC,
                    [JOURNALNAMEID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                ";

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLInsertAssetDepBookJournalNameUpgradeTmp</Name>
				<Source><![CDATA[
    private str getSQLInsertAssetDepBookJournalNameUpgradeTmp()
    {
        str sqlStatement = @"
            INSERT INTO [dbo].[ASSETDEPBOOKJOURNALNAMEUPGRADETMP] (
                    [BLOCKUSERGROUPID],
                    [DESCRIPTION],
                    [JOURNALNAMEID],
                    [LINESLIMIT],
                    [NUMBERSEQUENCETABLE],
                    [DATAAREAID],
                    [PARTITION]
                ) SELECT
                    [BLOCKUSERGROUPID],
                    [DESCRIPTION],
                    [JOURNALNAMEID],
                    [LINESLIMIT],
                    0,
                    [DATAAREAID],
                    [PARTITION]
                FROM [dbo].ASSETDEPBOOKJOURNALNAME
                WHERE NOT EXISTS
            (SELECT RECID FROM [dbo].[ASSETDEPBOOKJOURNALNAMEUPGRADETMP]
                WHERE [ASSETDEPBOOKJOURNALNAMEUPGRADETMP].[JOURNALNAMEID] = [ASSETDEPBOOKJOURNALNAME].[JOURNALNAMEID]
                    AND [ASSETDEPBOOKJOURNALNAMEUPGRADETMP].[DATAAREAID] = [ASSETDEPBOOKJOURNALNAME].[DATAAREAID]
                    AND [ASSETDEPBOOKJOURNALNAMEUPGRADETMP].[PARTITION] = [ASSETDEPBOOKJOURNALNAME].[PARTITION])
        ";

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLInsertLedgerJournalName</Name>
				<Source><![CDATA[
    private str getSQLInsertLedgerJournalName()
    {
        str sqlStatement = strFmt(@"
            INSERT INTO [dbo].[LEDGERJOURNALNAME] (
                    [BLOCKUSERGROUPID],
                    [NAME],
                    [CURRENTOPERATIONSTAX],
                    [JOURNALNAME],
                    [LINESLIMITBEFOREDISTRIBUTION],
                    [JOURNALTYPE],
                    [NUMBERSEQUENCETABLE],
                    [DATAAREAID],
                    [PARTITION])
                SELECT
                    [BLOCKUSERGROUPID],
                    [DESCRIPTION],
                    %1,
                    [JOURNALNAMEID],
                    [LINESLIMIT],
                    %2,
                    [NUMBERSEQUENCETABLE],
                    [DATAAREAID],
                    [PARTITION]
                FROM [dbo].[ASSETDEPBOOKJOURNALNAMEUPGRADETMP]
                WHERE NOT EXISTS
            (SELECT RECID FROM [dbo].[LEDGERJOURNALNAME]
                WHERE [LEDGERJOURNALNAME].[JOURNALNAME] = [ASSETDEPBOOKJOURNALNAMEUPGRADETMP].[JOURNALNAMEID]
                    AND [LEDGERJOURNALNAME].[DATAAREAID] = [ASSETDEPBOOKJOURNALNAMEUPGRADETMP].[DATAAREAID]
                    AND [LEDGERJOURNALNAME].[PARTITION] = [ASSETDEPBOOKJOURNALNAMEUPGRADETMP].[PARTITION])",
            enum2int(CurrentOperationsTax::None),
            enum2int(LedgerJournalType::Assets));

        return sqlStatement;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>