<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_ProdCoByProducts</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Form control handler for the <c>PmfProdCoBy</c> form
/// </summary>
class PmfFormCtrl_ProdCoByProducts extends PmfFormCtrl
{
    InventDim inventDim;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowCreateAndDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// validates if production co/by's can be created and deleted
    /// </summary>
    /// <returns>
    /// allow create - delete
    /// </returns>
    public boolean allowCreateAndDelete()
    {
        boolean ret = false;

        if (this.pmfProdCoByProduct()
            && this.pmfProdCoByProduct().prodTable().status().isBeforeOrEqualTo(ProdStatus::CostEstimated))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// sets form's datasource allow properties
    /// </summary>
    /// <param name="_doAllow">
    /// flag for allow
    /// </param>
    public void allowEdit(boolean _doAllow)
    {
        formDS.allowEdit(_doAllow);
        formDS.allowCreate(_doAllow);
        formDS.allowDelete(_doAllow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an active <c>ProdTable</c> buffer, either the caller buffer or the ProdTable
    /// record related to the caller buffer.
    /// </summary>
    /// <returns>
    /// An active <c>ProdTable</c> record.
    /// </returns>
    public Common callerBuffer()
    {
        Common                  ret;
        InventQualityOrderTable inventQualityOrderTable;
        JmgTermJob_Prod         jmgTermJob;
        PmfProdCoBy             pmfProdCoBy;

        ret = super();

        switch (ret.TableId)
        {
            case tablenum(InventQualityOrderTable) :
                ret = ProdTable::find(inventQualityOrderTable.InventRefId);
                break;

            case tablenum(JmgJobTable) :
                jmgTermJob = JmgTermJob::constructJobTable(ret);
                ret = jmgTermJob.prodRoute().prodTable();
                break;

            case tablenum(pmfProdCoBy):
                pmfProdCoBy = ret;
                ret = pmfProdCoBy.prodTable();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canClosePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// returns if the form can close
    /// </summary>
    /// <returns>
    /// allow create
    /// </returns>
    public boolean canClosePost()
    {
        PmfProdCoBy prodCoBy = buffer;
        ProdTable   prodTable = prodCoBy.prodTable();
        boolean     ret = true;

        #define.RoundDecimal(4)
        #define.CharNo(7)

        if (prodTable.ItemId
            && decround(prodTable.pmfRemainCostAlloc(),
                        #RoundDecimal))
        {
            if (InventTable::find(prodTable.ItemId).PmfProductType
                == PmfProductType::MainItem)
            {
                warning("@PRO997");
                warning("@PRO1000"
                    + num2str(decround(
                        prodTable.pmfTotalCostAlloc(),
                        #RoundDecimal),
                        #CharNo,
                        #RoundDecimal,
                        1,
                        0));

                ret = false;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceActivePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// called after the datasource active method
    /// </summary>
    public void dataSourceActivePost()
    {
        PmfProdCoBy pmfProdCoByProduct  = this.pmfProdCoByProduct();
        boolean     isCWItem            = false;
        boolean     createandDelete;

        super();

        createandDelete = this.allowCreateAndDelete();
        formDS.allowCreate(createandDelete);
        formds.allowDelete(createandDelete);

        isCWItem =  PdsGlobal::pdsIsCWItem(pmfProdCoByProduct.ItemId);
        if (pmfProdCoByProduct.prodTable().ProdStatus == ProdStatus::Created
            || pmfProdCoByProduct.prodTable().ProdStatus
                == ProdStatus::CostEstimated)
        {
            if (pmfProdCoByProduct.ProductType == PmfProductType::Co_Product)
            {
                formDS.object(fieldnum(PmfProdCoBy,CostAllocation)).enabled(true);
                formDS.object(fieldnum(PmfProdCoBy,CostAllocationPct)).enabled(true);
                formDS.object(fieldnum(PmfProdCoBy,BurdenType)).enabled(false);
                formDS.object(fieldnum(PmfProdCoBy,OverheadAmt)).enabled(false);
            }
            else if (pmfProdCoByProduct.ProductType
                == PmfProductType::By_Product)
            {
                formDS.object(fieldnum(PmfProdCoBy,CostAllocation)).enabled(false);
                formDS.object(fieldnum(PmfProdCoBy,CostAllocationPct)).enabled(false);
                formDS.object(fieldnum(PmfProdCoBy,BurdenType)).enabled(true);
                formDS.object(fieldnum(PmfProdCoBy,OverheadAmt)).enabled(true);
            }
            formDS.object(fieldnum(PmfProdCoBy, PdsCWInventCalc)).enabled(isCWItem);
        }
        else
        {
            formDS.object(fieldnum(PmfProdCoBy,CostAllocation)).enabled(false);
            formDS.object(fieldnum(PmfProdCoBy,CostAllocationPct)).enabled(false);
            formDS.object(fieldnum(PmfProdCoBy,BurdenType)).enabled(false);
            formDS.object(fieldnum(PmfProdCoBy,OverheadAmt)).enabled(false);

            formDS.object(fieldnum(PmfProdCoBy,PdsCWInventCalc)).enabled(false);
            formDS.object(fieldnum(PmfProdCoBy, PdsCWQty)).enabled(false);

            formDS.object(fieldnum(PmfProdCoBy,CoByQty)).enabled(false);
        }
        this.enableFormQtyFields(pmfProdCoByProduct.ItemId != '', isCWItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceCreatePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// called before the datasource create method
    /// </summary>
    public void dataSourceCreatePost()
    {
        PmfProdCoBy pmfProdCoByProduct = this.pmfProdCoByProduct();

        pmfProdCoByProduct.initFromProdTable(this.callerBuffer());
        pmfProdCoByProduct.ProductType = PmfProductType::Co_Product;

        this.enableFormQtyFields(false, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceInitValuePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// called after the datasource init method
    /// </summary>
    public void dataSourceInitValuePost()
    {
        PmfProdCoBy pmfProdCoByProduct = this.parmBuffer();
        ProdTable   prodTable = this.callerBuffer();

        pmfProdCoByProduct.CoByQtySerie = prodTable.QtySched;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceLinkActivePre</Name>
				<Source><![CDATA[
    /// <summary>
    /// called before the datasources linkactive method
    /// </summary>
    public void dataSourceLinkActivePre()
    {
        ProdTable prodTable = this.callerBuffer();

        super();

        formDS.query().dataSourceTable(tablenum(PmfProdCoBy))
            .findRange(fieldnum(PmfProdCoBy, ProdId))
            .value(prodTable.ProdId);

        if (prodTable.ProdStatus == ProdStatus::Completed)
        {
            this.allowEdit(false);
            formRun.design().viewEditMode(ViewEditMode::View);
        }
        this.setCaption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceWritePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called after the datasource write method
    /// </summary>
    public void dataSourceWritePost()
    {
        PmfProdCoBy pmfProdCoByProduct = this.pmfProdCoByProduct();

        super();

        if (pmfProdCoByProduct.InventDimId != inventDim.InventDimId)
        {
            inventDim.data(InventDim::find(pmfProdCoByProduct.InventDimId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceWritePre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called before the datasource write method
    /// </summary>
    public void dataSourceWritePre()
    {
        PmfProdCoBy pmfProdCoByProduct = this.parmBuffer();

        super();

        InventMovement::bufferSetRemainQty(pmfProdCoByProduct);

        pmfProdCoByProduct.InventDimId
            = InventDim::findOrCreate(inventDim).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doReRead</Name>
				<Source><![CDATA[
    /// <summary>
    /// refreshes the form's data source
    /// </summary>
    public void doReRead()
    {
        formDS.reread();
        formDS.refresh();
        formDS.active();

        if (this.caller())
        {
            this.caller().doReread();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doResearch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Research's the forms datasource
    /// </summary>
    public void doResearch()
    {
        if (this.caller())
        {
            this.caller().doReread();
        }

        formDS.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableFormQtyFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the <c>Enabled</c> status on the catch weight fields with the specified value.
    /// </summary>
    /// <param name="_setEnabled">
    ///     A boolean value that determines whether the controls should be enabled.
    /// </param>
    /// <param name="_isCWItem">
    ///     A boolean value that indicates whether the item is a catch weight item.
    /// </param>
    protected void enableFormQtyFields(boolean _setEnabled, boolean _isCWItem)
    {
        this.enableDSField(fieldnum(PmfProdCoBy,PdsCWQty), _setEnabled && _isCWItem);
        this.enableDSField(fieldnum(PmfProdCoBy,CoByQty),  _setEnabled && !_isCWItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdBurdenType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the id of the <c>BurdenType</c> field of the <c>PmfFormulaCoBy</c> table.
    /// </summary>
    /// <returns>
    /// The id of the field.
    /// </returns>
    protected fieldId fieldIdBurdenType()
    {
        return fieldnum(PmfProdCoBy, BurdenType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdCostAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// returns fieldId of the cost allocation field
    /// </summary>
    /// <returns>
    /// Field id
    /// </returns>
    protected fieldId fieldIdCostAllocation()
    {
        return fieldnum(PmfProdCoBy,CostAllocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdCostAllocationPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// returns fieldId of the cost allocation percent field
    /// </summary>
    /// <returns>
    /// Field id
    /// </returns>
    protected fieldId fieldIdCostAllocationPct()
    {
        return fieldnum(PmfProdCoBy,CostAllocationPct);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdOverheadAmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// returns fieldId of the overhead amount field
    /// </summary>
    /// <returns>
    /// Field id
    /// </returns>
    protected fieldId fieldIdOverheadAmt()
    {
        return fieldnum(PmfProdCoBy,OverheadAmt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handle the lookup for the fields on the <c>PmfProdCoBy</c> record
    /// </summary>
    /// <param name="_fieldId">
    /// The id of the field to handle the lookup for
    /// </param>
    /// <param name="_formControl">
    /// The formcontrol initiating the lookup
    /// </param>
    /// <param name="_filterStr">
    /// Additional filter for the lookup
    /// </param>
    public void fieldLookup(
        fieldId     _fieldId,
        FormControl _formControl,
        str         _filterStr)
    {
        boolean handled = false;

        switch (_fieldId)
        {
            case fieldnum(PmfProdCoBy, ItemId) :
                handled = true;
                InventTable::lookupItemTypeCoByProducts(_formControl);
                break;
        }

        if (!handled)
        {
            super(_fieldId, _formControl, _filterStr);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handle the modification of fields for the PmfProdCoBy datasource
    /// </summary>
    /// <param name="_fieldId">
    /// The id of the field that has changed
    /// </param>
    public void fieldModified(fieldId _fieldId)
    {
        PmfProdCoBy pmfProdCoByProduct;
        ItemId      itemId;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(PmfProdCoBy,BurdenType),
                fieldnum(PmfProdCoBy,CostAllocation) :
                pmfProdCoByProduct = this.pmfProdCoByProduct();

                if (pmfProdCoByProduct.BurdenType != PmfBurdenType::None)
                {
                    pmfProdCoByProduct.CostAllocationPct = 0;
                }
                else
                {
                    pmfProdCoByProduct.OverheadAmt = 0;
                }
                //fallthrough
            case fieldnum(PmfProdCoBy,ProductType),
                fieldnum(PmfProdCoBy,ItemId):
                itemId = this.pmfProdCoByProduct().ItemId;
                this.enableFormQtyFields(itemId != '', PdsGlobal::pdsIsCWItem(itemId));
                this.updateDesign();
                break;
            case fieldnum(PmfProdCoBy, CostAllocationPct),
                fieldnum(PmfProdCoBy, OverheadAmt),
                fieldnum(PmfProdCoBy, QtyCoByCalc):
                formDS.refresh();
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overridden method to be called after the form has been initialized
    /// </summary>
    /// <remarks>
    /// Overriding classes need to set the from datasources.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// thrown, if the formrun has not been set
    /// </exception>
    public void initPost()
    {
        ProdTable prodTable = this.callerBuffer();

        formDS.query().dataSourceTable(tablenum(PmfProdCoBy))
            .addRange(fieldnum(PmfProdCoBy,ProdId)).value(prodTable.ProdId);
        formDS.query().dataSourceTable(tablenum(PmfProdCoBy))
            .addRange(fieldnum(PmfProdCoBy,ProductType)).value(
                strfmt("@SYS26868",
                    enum2str(PmfProductType::Co_Product),
                    enum2str(PmfProductType::By_Product)));

        super();

        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCaption</Name>
				<Source><![CDATA[
    protected void setCaption()
    {
        ProdTable prodTable = this.callerBuffer();

        this.parmFormRun().design().caption(
            strfmt(
                "@PRO172",
                prodTable.ProdId,
                prodTable.Name));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs operations necessary before the form is initialized.
    /// </summary>
    /// <remarks>
    /// Overriding classes need to set the FormRun object.
    /// </remarks>
    public void initPre()
    {
        super();

        if ((!this.caller()))
        {
            if (this.args().dataset() != tablenum(PmfProdCoBy))
            {
                if (this.args().dataset() != tablenum(ProdTable)
                    && this.args().dataset() != tablenum(InventQualityOrderTable))
                {
                    throw error(
                        strfmt("@SYS22494", this.parmFormRun().name(), tablestr(ProdTable), tablestr(InventQualityOrderTable)));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// The object is created
    /// </summary>
    protected void new()
    {
        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);

        this.addCWCtrl();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCWCtrl</Name>
				<Source><![CDATA[
    private void addCWCtrl()
    {
        if (this.isCatchWeightEnabled())
        {
            PdsCWFormCtrl cwFormCtrl = PdsCWFormCtrl_Std::construct();
            cwFormCtrl.parmFormRun(this.parmFormRun());
            cwFormCtrl.parmFieldIds(PdsCWValidation::fieldMapFromContainers(
                [[fieldnum(PmfProdCoBy, CoByQty),
                    fieldnum(PmfProdCoBy, PdsCWQty),
                    false]]
                ));
            cwFormCtrl.parmItemFieldId(fieldnum(PmfProdCoBy, ItemId));
            cwFormCtrl.parmUnitMethodStr(tablemethodstr(PmfProdCoBy, pdsCWUnitId));

            this.addSubFormCtrl(cwFormCtrl);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfProdCoByProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the buffer as a typed <c>PmfProdCoBy</c> record
    /// </summary>
    /// <returns>
    /// The buffer as a <c>PmfProdCoBy</c> record
    /// </returns>
    public PmfProdCoBy pmfProdCoByProduct()
    {
        return buffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the production id
    /// </summary>
    /// <returns>
    /// The production id
    /// </returns>
    public ProdId prodId()
    {
        ProdTable prodTable;

        prodTable = this.callerBuffer();

        return prodTable.ProdId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// A table buffer (Common) belonging to the 1st datasource instance.
    /// </param>
    /// <param name="_datasources2">
    /// A table buffer (Common) belonging to the 2nd datasource instance.
    /// </param>
    /// <param name="_datasources3">
    /// A table buffer (Common) belonging to the 3rd datasource instance.
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// </param>
    /// <remarks>
    /// Up to 5 datasources can be passed. If the implementation requires more datasources
    /// additional custom methods should be implemented on the rule implementer class.
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void setDatasources(
        Common  _datasources1,
        Common  _datasources2 = null,
        Common  _datasources3 = null,
        Common  _datasources4 = null,
        Common  _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(PmfProdCoBy))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (_datasources2.TableId != tablenum(InventDim))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        inventDim = _datasources2;

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the form design
    /// </summary>
    public void updateDesign()
    {
        PmfBurdenType   burdenType;
        NoYes           allocate;

        super();

        if (this.isPmfEnabled())
        {
            burdenType = buffer.(this.fieldIdBurdenType());
            allocate    = buffer.(this.fieldIdCostAllocation())
                            == PmfCostAllocationMethod::Manual;

            if (this.fieldIdOverheadAmt())
            {
                this.enableDSField(this.fieldIdOverheadAmt(), burdenType != PmfBurdenType::None);
            }

            if (this.fieldIdCostAllocation())
            {
                this.enableDSField(this.fieldIdCostAllocationPct(), allocate);
            }

            this.enableDSField(fieldnum(PmfProdCoBy,CoByQtySerie),false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an instance of the class
    /// </summary>
    /// <returns>
    /// returns instance
    /// </returns>
    public static PmfFormCtrl_ProdCoByProducts construct()
    {
        return new PmfFormCtrl_ProdCoByProducts();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates a new class derived from <c>PmfFormCtrl_ProdCoByProducts</c>
    /// </summary>
    /// <param name="_fr">
    /// FormRun Object of caller
    /// </param>
    /// <returns>
    /// returns instance
    /// </returns>
    public static PmfFormCtrl_ProdCoByProducts newFromForm(FormRun _fr)
    {
        PmfFormCtrl frmCtrl;

        frmCtrl = PmfFormCtrl_ProdCoByProducts::construct();
        frmCtrl.parmFormRun(_fr);
        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>