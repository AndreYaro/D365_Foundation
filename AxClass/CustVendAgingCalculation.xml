<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendAgingCalculation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustVendAgingCalculation</c> class runs aging process for customers or vendors.
/// </summary>
/// <remarks>
/// Aging is a process which provides the way to analyze how big and/or old are the unpaid amounts of the specific customer or vendor.
/// This class and it's derivatives provide the set-based calculation of unpaid amounts per aging buckets which are built either based on system-defined aging period definition or custom settings.
/// The result is saved in the table buffer which then is used for other functionalities like reporting.
/// </remarks>
public abstract class CustVendAgingCalculation
{
    DateTransactionDuedate agedBy;
    QueryRun custVendQuery;
    Query custVendTransQuery;

    TransDate balanceAsOfDate;

    NoYes paymentsToSpecialBucket;
    NoYes includeReversedTransactions;
    NoYes calculateDetails;
    NoYes excludeZeroBalance;
    NoYes excludeNegativeBalance;
    int agingBucketCount;
    CustVendTransAging customersVendors;
    CustVendAgingPeriodScaleTmp agingPeriodScaleTmp;
    CustVendAgingCalculatedTmp agingCalculatedTmp;
    CustAgingDate agingDate;

    boolean updateCollectionsStatus = true;
    private NoYes selectClosedTransactions = NoYes::No;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAgingCalculated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustVendAgingCalculatedTmp</c> buffer.
    /// </summary>
    /// <returns>
    /// The <c>CustVendAgingCalculatedTmp</c> buffer.
    /// </returns>
    public CustVendAgingCalculatedTmp getAgingCalculated()
    {
        return agingCalculatedTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseTempTables</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Explicitly releases temp tables used in this class.
    /// </summary>
    /// <remarks>
    ///    Aging calculations create temp tables which are not released in a timely fashion.
    ///    The <c>releaseTempTables</c> method should to be called immediately after an aging calculations is completed and the results consumed.
    /// </remarks>
    public void releaseTempTables()
    {
        agingCalculatedTmp.dispose();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomerOrVendorTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustTable</c> or <c>VendTable</c> table id.
    /// </summary>
    /// <remarks>
    /// The <c>CustTable</c> or <c>VendTable</c> table id is used in insertCustVendData method.
    /// </remarks>
    /// <returns>
    /// The <c>CustTable</c> if customer aging is run or <c>VendTable</c> table id if vendor aging is run.
    /// </returns>
    protected abstract TableId getCustomerOrVendorTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransAging</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustVendTransAging</c> buffer.
    /// </summary>
    /// <returns>
    /// The <c>CustVendTransAging</c> buffer with customers or vendors that will be aged.
    /// </returns>
    public CustVendTransAging getCustVendTransAging()
    {
        return customersVendors;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustTrans</c> or <c>VendTrans</c> table id.
    /// </summary>
    /// <remarks>
    /// The <c>CustTrans</c> or <c>VendTrans</c> table id is used in selectTransactions method.
    /// </remarks>
    /// <returns>
    /// The <c>CustTrans</c> if customer aging is run or <c>VendTrans</c> table id if vendor aging is run.
    /// </returns>
    protected abstract TableId getTransactionTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateFieldMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes field mapping to do a set-based insert from query of customers or vendors to <c>CustVendTransAging</c> buffer.
    /// </summary>
    /// <returns>The map of source (query) and target (buffer) fields together with identification which datasource query fields come from.</returns>
    protected abstract Map generateFieldMapping()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateOrderByString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialized list of fields specified in the query for order by clause
    /// </summary>
    /// <returns>Order by clause used for ROW_NUMBER()</returns>
    protected str generateOrderByString()
    {
        str orderBy = 'order by ';
        str ret = '';

        for (int i=1; i<=custVendQuery.query().dataSourceCount(); i++)
        {
            ret = this.addOrderByFieldsForDatasource(custVendQuery.query().dataSourceNo(i), ret);
        }

        if (!ret)
        {
            ret = orderBy + 'AccountNum asc';
        }
        else
        {
            ret = orderBy + subStr(ret, 1, strLen(ret) - 1);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSortingDirection</Name>
				<Source><![CDATA[
    protected str getSortingDirection(QueryBuildDataSource _qbds, int _sortFieldCount)
    {
        SortOrder sortOrder = _qbds.sortDirection(_sortFieldCount);
        if (sortOrder == SortOrder::Ascending)
        {
            return ' asc,';
        }
        else
        {
            return ' desc,';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOrderByFieldsForDatasource</Name>
				<Source><![CDATA[
    protected str addOrderByFieldsForDatasource(QueryBuildDataSource _qbds, str _orderByStr)
    {
        str ret = _orderByStr;

        if (_qbds.table() == tableNum(DirPartyTable))
        {
            for (int i=1; i<=_qbds.sortFieldCount(); i++)
            {
                if (_qbds.sortField(i) == fieldNum(DirPartyTable, Name))
                {
                    ret = ret + ' ' + fieldStr(CustVendTransAging, Name) + this.getSortingDirection(_qbds, i);
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDestinationFieldToFieldMapping</Name>
				<Source><![CDATA[
    protected void addDestinationFieldToFieldMapping(
        QueryBuildFieldList _fieldList,
        int _tableId,
        Map _fieldMapping,
        int _dataSourceUniqueId,
        FieldName _sourceFieldName,
        FieldName _destinationFieldName)
    {
        _fieldList = _fieldList.addField(fieldName2Id(_tableId, _sourceFieldName));
        _fieldMapping.insert(_destinationFieldName, [_dataSourceUniqueId, _sourceFieldName]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeSql</Name>
				<Source><![CDATA[
    private boolean executeSql(str _sql)
    {
        Statement stmt = new Connection().createStatement();

        new SqlStatementExecutePermission(_sql).assert();

        boolean isSuccessful;

        try
        {
            stmt.executeUpdateWithParameters(_sql, SqlParams::create());
            isSuccessful = true;
        }
        catch
        {
            // An error was thrown from the statement execution
            isSuccessful = false;
        }

        CodeAccessPermission::revertAssert();
        return isSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustVendData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a <c>CustVendTransAging</c> buffer of customers or vendors based on aging process parameters which contains AccountNum, Name and Group.
    /// </summary>
    protected void insertCustVendData()
    {
        var insertRecordsetMap = this.generateFieldMapping();
        var query = custVendQuery.query();

        CustVendTransAging customersVendorsNoSorting;

        Query::insert_recordset(customersVendorsNoSorting, insertRecordsetMap, query);

        CustVendTable custVendTable = custVendQuery.get(this.getCustomerOrVendorTableId());

        DirPartyTable dirParty;

        update_recordSet customersVendorsNoSorting
            setting
                Name = dirParty.name
            join custVendTable
                where customersVendorsNoSorting.AccountNum == custVendTable.AccountNum
            join dirParty
                where custVendTable.Party == dirParty.RecId;

        CustVendTransAging customersVendorsWithSorting;
        var tableNameWithSorting = customersVendorsWithSorting.getPhysicalTableName();
        var tableNameNoSorting = customersVendorsNoSorting.getPhysicalTableName();

        //Setup the connection needed to send the command to SQL Server.
        var sql = 'INSERT INTO %1 (ACCOUNTNUM, GROUPID, NAME, SORTORDER) SELECT ACCOUNTNUM, GROUPID, NAME, (ROW_NUMBER() OVER (%2)) AS SORTORDER FROM %3';
        sql = strFmt(sql, tableNameWithSorting, this.generateOrderByString(), tableNameNoSorting);

        if (this.executeSQL(sql))
        {
            customersVendors.linkPhysicalTableInstance(customersVendorsWithSorting);
            customersVendorsNoSorting.dispose();
        }
        else
        {
            // if direct SQL failed for whatever reason render report without sorting.
            customersVendors.linkPhysicalTableInstance(customersVendorsNoSorting);
            customersVendorsWithSorting.dispose();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance based on specified parameters.
    /// </summary>
    /// <param name="_custVendQuery">
    /// The set of customers or vendors that will be aged.
    /// </param>
    /// <param name="_agedBy">
    /// The date which will be used to assign aging bucket to transaction.
    /// </param>
    /// <param name="_agingPeriodScaleTmp">
    /// A <c>CustVendAgingPeriodScaleTmp</c> buffer which assigns a date to a bucket.
    /// </param>
    /// <param name="_balanceAsOfDate">
    /// The transactions cut-off date when transactions posted later are not included in aging process.
    /// </param>
    /// <param name="_agingBucketCount">
    /// The count of aging buckets.
    /// </param>
    /// <param name="_paymentsToSpecialBucket">
    /// A boolean value which specifies whether or not payments are assigned to the bucket farthest in future regardless of their date as amounts which do not age.
    /// </param>
    /// <param name="_includeReversedTransactions">
    /// A boolean value which specifies whether or not reversed transactions are included in calculated results.
    /// </param>
    /// <param name="_calculateDetails">
    /// A boolean value which specifies whether or not calculated results should include per-transaction details which are Invoice, Voucher, Date (depending on which date specified by <paramref name = "_agedBy"/>).
    /// </param>
    /// <param name="_excludeZeroBalance">
    /// A boolean value which specifies whether to exclude or include customers or vendors with balance equal to zero on <paramref name ="_balanceAsOfDate"/>.
    /// </param>
    /// <param name="_excludeNegativeBalance">
    /// A boolean value which specifies whether to exclude or include customers with negative balance or vendors with positive balance on <paramref name ="_balanceAsOfDate"/>.
    /// </param>
    /// <param name="_custVendTransQuery">
    /// The set of customer or vendor transactions that will be aged.
    /// </param>
    /// <param name="_agingDate">
    /// The date which the transactions are being aged by.
    /// </param>
    /// <param name="_updateCollectionsStatus">
    /// A boolean value which specifies whether the collections being tracked by <c>CustDispute</c> will be updated.
    /// </param>
    /// <remarks>
    /// Do not use new method directly, use <c>construct</c> method instead.
    /// </remarks>
    protected void new(
            QueryRun _custVendQuery,
            DateTransactionDuedate _agedBy,
            CustVendAgingPeriodScaleTmp _agingPeriodScaleTmp,
            TransDate _balanceAsOfDate,
            int _agingBucketCount,
            boolean _paymentsToSpecialBucket,
            boolean _includeReversedTransactions,
            boolean _calculateDetails,
            boolean _excludeZeroBalance,
            boolean _excludeNegativeBalance,
            Query _custVendTransQuery,
            boolean _updateCollectionsStatus = true,
            CustAgingDate _agingDate = dateNull())
    {
        custVendQuery = _custVendQuery;
        agedBy = _agedBy;
        agingPeriodScaleTmp = _agingPeriodScaleTmp;
        balanceAsOfDate = _balanceAsOfDate;
        agingBucketCount = _agingBucketCount;
        paymentsToSpecialBucket = _paymentsToSpecialBucket;
        includeReversedTransactions = _includeReversedTransactions;
        calculateDetails = _calculateDetails;
        excludeZeroBalance = _excludeZeroBalance;
        excludeNegativeBalance = _excludeNegativeBalance;
        custVendTransQuery = _custVendTransQuery;
        agingDate = _agingDate;
        updateCollectionsStatus = _updateCollectionsStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates total balance for customers or vendors and excludes zero balance or negative balance ones if needed.
    /// </summary>
    /// <returns>
    /// A <c>CustVendAgingCalculatedTmp</c> table containing totals.
    /// </returns>
    protected CustVendAgingCalculatedTmp postProcess()
    {
        CustVendAgingCalculatedTmp totalBalances;

        insert_recordset totalBalances (AccountNum, Amount)
            select AccountNum, sum(Amount)
                from agingCalculatedTmp
                group by AccountNum;

        // This method is overridden in derived classes CustAgingCalculation and VendAgingCalculation, where the actual exclusion based on excludeZeroBalance and excludeNegativeBalance is happening.
        // The override is needed because exclusion of customers with negative balance is the same as exclusion of vendors with positive balance which makes the query clause different.

        return totalBalances;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns buckets to transactions selected for aging.
    /// </summary>
    /// <param name="_agingProcessingTmp">
    /// A <c>CustVendAgingProcessingTmp</c> table containing transaction data.
    /// </param>
    /// <param name="_agingProcessingDetailsTmp">
    /// A <c>CustVendAgingProcessingDetailsTmp</c> table containing transaction details.
    /// </param>
    /// <remarks>
    /// If calculateDetails is false then transaction details are removed from the results.
    /// </remarks>
    protected void preProcess(CustVendAgingProcessingTmp _agingProcessingTmp, CustVendAgingProcessingDetailsTmp _agingProcessingDetailsTmp)
    {
        // get bucketNumber for ProcessingRecId
        update_recordSet _agingProcessingDetailsTmp
            setting
                BucketNumber = agingPeriodScaleTmp.BucketNumber
            join agingPeriodScaleTmp
                where _agingProcessingDetailsTmp.TransDate == agingPeriodScaleTmp.TransDate;

        select maxOf(TransDate) from agingPeriodScaleTmp;
        var scaleEnd = agingPeriodScaleTmp.TransDate;

        if (scaleEnd == dateMax())
        {
            select maxOf(TransDate) from agingPeriodScaleTmp where agingPeriodScaleTmp.TransDate != dateMax();
            scaleEnd = agingPeriodScaleTmp.TransDate;

            update_recordSet _agingProcessingDetailsTmp
                setting
                    BucketNumber = agingBucketCount
                where _agingProcessingDetailsTmp.TransDate > scaleEnd;
        }

        select minOf(TransDate) from agingPeriodScaleTmp;
        var scaleStart = agingPeriodScaleTmp.TransDate;

        if (scaleStart == dateNull())
        {
            select minOf(TransDate) from agingPeriodScaleTmp where agingPeriodScaleTmp.TransDate != dateNull();
            scaleStart = agingPeriodScaleTmp.TransDate;

            update_recordSet _agingProcessingDetailsTmp
                setting
                    BucketNumber = 1
                where _agingProcessingDetailsTmp.TransDate < scaleStart;
        }

        if (paymentsToSpecialBucket)
        {
            update_recordSet _agingProcessingDetailsTmp
                setting
                    BucketNumber = agingBucketCount
                exists join _agingProcessingTmp
                    where _agingProcessingTmp.RecId == _agingProcessingDetailsTmp.ProcessingRecId
                            && _agingProcessingTmp.IsPayment;
        }

        if (!calculateDetails)
        {
            update_recordSet _agingProcessingDetailsTmp
                setting
                    TransDate = dateNull(),
                    Voucher = '',
                    InvoiceId = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the aging calculation.
    /// </summary>
    /// <remarks>
    /// This method must be called once and only once, immediately after construction and before calling any other methods.
    /// </remarks>
    public void process()
    {
        // reads customers or vendors data using specified query and inserts AccountNum, Name, Group to the CustVendTransAging table buffer
        this.insertCustVendData();

        // Selects transactions to process. This includes finding unpaid (unsettled) transactions and transactions which were paid later then balanceAsOfDate.
        // Deletes reversed transactions if needed. If user set any ranges on transactions in initial query, it will also filter set of transactions selected for aging
        // to include only those which are in provided ranges.
        var agingProcessingTmp = this.selectTransactions();

        // Details are saved to details table buffer for transactions selected in above method: invoice, voucher and date.
        var agingProcessingDetailsTmp = this.selectDetailsOfTransactions(agingProcessingTmp);

        // Each selected transaction amount is assigned to aging bucket. This is done using details table buffer because Due date or Transaction date or Document date is saved there from above method.
        // After each transaction amount (unpaid or future paid) received bucket number, if calculateDetails was set to False then InvoiceId, Voucher and Date table fields are erased.
        // This gives ability for the aggregation query below to return correct results with same grouping in detailed and non-detailed way.
        this.preProcess(agingProcessingTmp, agingProcessingDetailsTmp);

        CustVendAgingCalculationParameters custVendAgingCalculationParameters = CustVendAgingCalculationParameters::construct();
        custVendAgingCalculationParameters.custVendAgingProcessingTmp = agingProcessingTmp;
        custVendAgingCalculationParameters.custVendAgingProcessingDetailsTmp = agingProcessingDetailsTmp;
        custVendAgingCalculationParameters.custVendAgingCalculatedTmp = agingCalculatedTmp;

        CustVendAgingCalculatedTmpCopyFromProcessingTmp custVendAgingCalculatedTmpCopyFromProcessingTmp = CustVendAgingCalculatedTmpCopyFromProcessingTmp::newFromParameters(custVendAgingCalculationParameters);
        custVendAgingCalculatedTmpCopyFromProcessingTmp.execute();

        if (calculateDetails)
        {
            update_recordSet agingCalculatedTmp
                setting
                    Txt = agingCalculatedTmp.Voucher + '/' + agingCalculatedTmp.InvoiceId
                where agingCalculatedTmp.Voucher != '' || agingCalculatedTmp.InvoiceId != '';
        }
        else
        {
            update_recordSet agingCalculatedTmp
                setting
                    Txt = customersVendors.Name
                join customersVendors
                    where agingCalculatedTmp.AccountNum == customersVendors.AccountNum;
        }

        // Total balance is calculated for all customers and vendors which is sum of all buckets on the balanceAsOfDate.
        // Based on specified parameters the ones of total balance less or equal to 0 may be excluded.
        // Also if balance equal to 0 is not excluded, we have to add "empty" customers or vendor also which didn't have any transactions earlier then balanceAsOfDate or had everything paid at that time.
        // This requires one more step because such customers or vendors are not selected in selectTransactionsForProcessing method.
        this.postProcess();

        agingProcessingTmp.dispose();
        agingProcessingDetailsTmp.dispose();
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectClosedTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects and saves transactions which are settled as of today but were not yet settled on the date specified in balanceAsOfDate.
    /// </summary>
    /// <param name="_agingProcessingTmp">
    /// A <c>CustVendAgingProcessingTmp</c> table into which transaction data will be added.
    /// </param>
    protected void selectClosedTransactions(CustVendAgingProcessingTmp _agingProcessingTmp)
    {
        var custVendTrans = this.setCustVendTransBuffer();
        var custVendSettlement = this.setCustVendSettlementBuffer();

        CustVendAgingCalculationParameters custVendAgingCalculationParameters = CustVendAgingCalculationParameters::construct();
        custVendAgingCalculationParameters.custVendAgingProcessingTmp = _agingProcessingTmp;
        custVendAgingCalculationParameters.customersVendors = customersVendors;
        custVendAgingCalculationParameters.custVendTrans = custVendTrans;
        custVendAgingCalculationParameters.custVendSettlement = custVendSettlement;
        custVendAgingCalculationParameters.balanceAsOfDate = balanceAsOfDate;

        CustVendAgingCalculationPopulateClosedTransactions custVendAgingCalculationPopulateClosedTransactions = CustVendAgingCalculationPopulateClosedTransactions::newFromParameters(custVendAgingCalculationParameters);
        custVendAgingCalculationPopulateClosedTransactions.execute();

        // Below query is helping to include exchange adjustment amount only once.
        // Otherwise the exchange adjustment transaction itself also may be selected into the scope based on the balanceAsOfDate and aggregated to the sum.
        update_recordSet _agingProcessingTmp
            setting
                Amount = _agingProcessingTmp.Amount - _agingProcessingTmp.ExchAdjustment
            where _agingProcessingTmp.ExchAdjustment != 0;

        update_recordSet _agingProcessingTmp
            setting
                AmountReporting = _agingProcessingTmp.AmountReporting - _agingProcessingTmp.ExchAdjustmentReporting
            where _agingProcessingTmp.ExchAdjustmentReporting != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectDetailsOfTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects and saves details for customers or vendors transactions that will be aged. That includes transaction date (due date or document date depending on what was select in agedBy), invoiceId and voucher.
    /// </summary>
    /// <param name="_agingProcessingTmp">
    /// A <c>CustVendAgingProcessingTmp</c> table containing transaction data.
    /// </param>
    /// <remarks>
    /// Add information with details of aged transactions in 3 steps.
    /// <list type = "bullet">
    /// <item>
    /// <description>Add needed fields to the <c>CustVendAgingProcessingDetailsTmp</c> table.</description>
    /// </item>
    /// <item>
    /// <description>Add code which fills new fields by overriding this method and executing a set-based update.</description>
    /// </item>
    /// <item>
    /// <description>Empty these new fields in preProcess method in case summarized data is calculated.</description>
    /// </item>
    /// </list>
    /// </remarks>
    /// <returns>
    /// A <c>CustVendAgingProcessingDetailsTmp</c> table containing transaction details.
    /// </returns>
    protected CustVendAgingProcessingDetailsTmp selectDetailsOfTransactions(CustVendAgingProcessingTmp _agingProcessingTmp)
    {
        var custVendTrans = this.setCustVendTransBuffer();
        CustVendAgingProcessingDetailsTmp agingProcessingDetailsTmp;

        insert_recordset agingProcessingDetailsTmp
                (ProcessingRecId, TransDate, InvoiceId, Voucher)
            select RecId from _agingProcessingTmp
                join TransDate, Invoice, Voucher from custVendTrans
                    where custVendTrans.TransDate <= balanceAsOfDate
                            && (!custVendTrans.Closed || custVendTrans.Closed >= balanceAsOfDate)
                            && custVendTrans.RecId == _agingProcessingTmp.TransRecId
                exists join customersVendors
                    where custVendTrans.AccountNum == customersVendors.AccountNum;

        return agingProcessingDetailsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectOpenTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects and saves open transactions for customers and vendors that will be aged.
    /// </summary>
    /// <param name="_agingProcessingTmp">
    /// A <c>CustVendAgingProcessingTmp</c> table buffer to which transaction data is added.
    /// </param>
    protected void selectOpenTransactions(CustVendAgingProcessingTmp _agingProcessingTmp)
    {
        var custVendTrans = this.setCustVendTransBuffer();
        var custVendTransOpen = this.setCustVendTransOpenBuffer();

        // set TransDate everywhere and update based on AgedBy later
        CustVendAgingCalculationParameters custVendAgingCalculationParameters = CustVendAgingCalculationParameters::construct();
        custVendAgingCalculationParameters.custVendAgingProcessingTmp = _agingProcessingTmp;
        custVendAgingCalculationParameters.customersVendors = customersVendors;
        custVendAgingCalculationParameters.custVendTrans = custVendTrans;
        custVendAgingCalculationParameters.custVendTransOpen = custVendTransOpen;
        custVendAgingCalculationParameters.balanceAsOfDate = balanceAsOfDate;
        CustVendAgingCalculationPopulateOpenTransactions custVendAgingCalculationPopulateOpenTransactions = CustVendAgingCalculationPopulateOpenTransactions::newFromParameters(custVendAgingCalculationParameters);
        custVendAgingCalculationPopulateOpenTransactions.execute();
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects and saves transactions for customers and vendors that will be aged.
    /// </summary>
    /// <returns>
    /// A <c>CustVendAgingProcessingTmp</c> table buffer to which transaction data is added.
    /// </returns>
    /// <remarks>
    /// <list type = "bullet">
    /// <item>
    ///     <description>Transactions which are opened (not settled) when aging process is run.</description>
    /// </item>
    /// <item>
    ///     <description>Transactions which are opened (not settled) when aging process is run but settled as of today.</description>
    /// </item>
    /// </list>
    /// </remarks>
    protected CustVendAgingProcessingTmp selectTransactions()
    {
        CustVendAgingProcessingTmp agingProcessingTmp;

        if (balanceAsOfDate < dateMax() && this.hasSettlementsAfterBalanceAsOfDate())
        {
            this.selectClosedTransactions(agingProcessingTmp);
            selectClosedTransactions = NoYes::Yes;
        }

        this.selectOpenTransactions(agingProcessingTmp);

        if (!includeReversedTransactions)
        {
            TransactionReversalTrans reversalTrans;

            delete_from agingProcessingTmp
                exists join reversalTrans
                    where reversalTrans.RefTableId == this.getTransactionTableId()
                            && reversalTrans.RefRecId == agingProcessingTmp.TransRecId
                            && reversalTrans.Reversed;
        }

        if (custVendTransQuery)
        {
            this.filterSelectedTransactionsByQueryRanges(agingProcessingTmp);
        }

        // Payment identification is different for Vendors and Customers so IsPayment field is updated in derived classes.
        // For this purpose this method is overridden in CustAgingCalculation and VendAgingCalculation.

        return agingProcessingTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasSettlementsAfterBalanceAsOfDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if there are settlement records with a trans date that is after the balance as of date.
    /// </summary>
    /// <returns>true if there are settlements after the balance as of date; otherwise, false.</returns>
    private boolean hasSettlementsAfterBalanceAsOfDate()
    {
        CustVendSettlement settlement = this.setCustVendSettlementBuffer();

        select firstonly RecId from settlement
            where settlement.TransDate > balanceAsOfDate
            exists join customersVendors
                where customersVendors.AccountNum == settlement.AccountNum;

        return settlement.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterSelectedTransactionsByQueryRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes transactions from aging processing table which were not in ranges specified by user.
    /// </summary>
    /// <param name="_agingProcessingTmp">
    /// A <c>CustVendAgingProcessingTmp</c> table buffer where transaction data is filtered.
    /// </param>
    protected void filterSelectedTransactionsByQueryRanges(CustVendAgingProcessingTmp _agingProcessingTmp)
    {
        var insertRecordsetMap = new Map(Types::String, Types::Container);
        var tableId = this.getTransactionTableId();
        var dataSourceId = custVendTransQuery.dataSourceTable(tableId).uniqueId();

        if (!selectClosedTransactions && CustAgingReportFilterOpenTransFlight::instance().isEnabled())
        {
            this.joinOpenTransactionsToFilterQuery(custVendTransQuery);
        }

        custVendTransQuery.clearAllFields();

        var fieldList = custVendTransQuery.dataSourceTable(tableId).fields();
        fieldList.dynamic(1);

        this.addDestinationFieldToFieldMapping(
                        fieldList,
                        tableId,
                        insertRecordsetMap,
                        dataSourceId,
                        fieldId2Name(tableId, fieldName2Id(tableId, 'RecId')),
                        fieldStr(CustVendAgingProcessingTmp, TransRecId));

        CustVendAgingProcessingTmp transForProcessing;

        Query::insert_recordset(transForProcessing, insertRecordsetMap, custVendTransQuery);

        delete_from _agingProcessingTmp
            notexists join transForProcessing
                where _agingProcessingTmp.TransRecId == transForProcessing.TransRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustVendSettlementBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>CustVendSettlement</c> map to refer to specific buffer type <c>VendSettlement</c> or <c>CustSettlement</c>.
    /// </summary>
    /// <returns>
    /// The <c>CustVendSettlement</c> map with correct table buffer under it.
    /// </returns>
    protected abstract CustVendSettlement setCustVendSettlementBuffer()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustVendTransBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>CustVendTrans</c> map to refer to specific <c>CustTrans</c> or <c>VendTrans</c>.
    /// </summary>
    /// <returns>
    /// The <c>CustVendTrans</c> map with correct table buffer under it.
    /// </returns>
    protected abstract CustVendTrans setCustVendTransBuffer()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustVendTransOpenBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>CustVendTransOpen</c> map to refer to specific <c>CustTransOpen</c> or <c>VendTransOpen</c>.
    /// </summary>
    /// <returns>
    /// The <c>CustVendTransOpen</c> map with correct table buffer under it.
    /// </returns>
    protected abstract CustVendTransOpen setCustVendTransOpenBuffer()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance based on specified parameters.
    /// </summary>
    /// <param name="_sysModule">
    /// The module that specifies which class to instantiate - <c>CustAgingCalculation</c> or <c>VendAgingCalculation</c>.
    /// </param>
    /// <param name="_custVendQuery">
    /// The set of customers or vendors that will be aged.
    /// </param>
    /// <param name="_agedBy">
    /// The date which will be used to assign aging bucket to transaction.
    /// </param>
    /// <param name="_agingPeriodScaleTmp">
    /// A <c>_agingPeriodScaleTmp</c> table which defines the aging periods.
    /// </param>
    /// <param name="_balanceAsOfDate">
    /// The transactions cut-off date when transactions posted later are not included in aging process.
    /// </param>
    /// <param name="_agingDate">
    /// The date which the transactions are being aged by.
    /// </param>
    /// <param name="_agingBucketCount">
    /// The count of aging buckets.
    /// </param>
    /// <param name="_paymentsToSpecialBucket">
    /// A boolean value which specifies whether or not payments are assigned to the bucket farthest in future regardless of their date as amounts which do not age.
    /// </param>
    /// <param name="_includeReversedTransactions">
    /// A boolean value which specifies whether or not reversed transactions are included in calculated results.
    /// </param>
    /// <param name="_calculateDetails">
    /// A boolean value which specifies whether or not calculated results should include per-transaction details which are Invoice, Voucher, Date (depending on which date specified by <paramref name = "_agedBy"/>).
    /// </param>
    /// <param name="_excludeZeroBalance">
    /// A boolean value which specifies whether to exclude or include customers or vendors with balance equal to zero on <paramref name ="_balanceAsOfDate"/>.
    /// </param>
    /// <param name="_excludeNegativeBalance">
    /// A boolean value which specifies whether to exclude or include customers with negative balance or vendors with positive balance on <paramref name ="_balanceAsOfDate"/>.
    /// </param>
    /// <param name="_billingClassificationList">
    /// The list of billing classifications which aging process is run for.
    /// </param>
    /// <param name="_inclTransWithNoBillingClass">
    /// A boolean value which specifies whether to exclude or include customer transactions with no billing classification specified.
    /// </param>
    /// <returns>
    /// Instance of aging process calculation class.
    /// </returns>
    public static CustVendAgingCalculation construct(
        SysModule _sysModule,
        QueryRun _custVendQuery,
        DateTransactionDuedate _agedBy,
        CustVendAgingPeriodScaleTmp _agingPeriodScaleTmp,
        TransDate _balanceAsOfDate,
        int _agingBucketCount = CustVendBalanceList::getMaximumAgingBuckets(),
        boolean _paymentsToSpecialBucket = false,
        boolean _includeReversedTransactions = false,
        boolean _calculateDetails = true,
        boolean _excludeZeroBalance = false,
        boolean _excludeNegativeBalance = false,
        List _billingClassificationList = null,
        NoYes _inclTransWithNoBillingClass = NoYes::No,
        Query _custVendTransQuery = null,
        boolean _updateCollectionsStatus = true,
        CustAgingDate _agingDate = dateNull())
    {
        CustVendAgingCalculation agingCalculation;

        switch (_sysModule)
        {
            case SysModule::Cust :
                agingCalculation = new CustAgingCalculation(
                        _custVendQuery,
                        _agedBy,
                        _agingPeriodScaleTmp,
                        _balanceAsOfDate,
                        _agingBucketCount,
                        _paymentsToSpecialBucket,
                        _includeReversedTransactions,
                        _calculateDetails,
                        _excludeZeroBalance,
                        _excludeNegativeBalance,
                        _billingClassificationList,
                        _inclTransWithNoBillingClass,
                        _custVendTransQuery,
                        _updateCollectionsStatus,
                        _agingDate);
                break;

            case SysModule::Vend :
                agingCalculation = new VendAgingCalculation(
                        _custVendQuery,
                        _agedBy,
                        _agingPeriodScaleTmp,
                        _balanceAsOfDate,
                        _agingBucketCount,
                        _paymentsToSpecialBucket,
                        _includeReversedTransactions,
                        _calculateDetails,
                        _excludeZeroBalance,
                        _excludeNegativeBalance,
                        _custVendTransQuery);
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return agingCalculation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>joinOpenTransactionsToFilterQuery</Name>
				<Source><![CDATA[
    internal void joinOpenTransactionsToFilterQuery(Query _q)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>