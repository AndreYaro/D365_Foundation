<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendBalanceDP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data provider class for report <c>VendBalanceDP_CN</c>.
/// </summary>
class VendBalanceDP_CN
{
    CustVendLedgerBalanceTmp_CN vendBalanceTmp;

    Map openingBalanceMap;
    Map periodBalanceMap;
    Map defaultDimensionMap;
    Set keySet;

    TransDate fromDate;
    TransDate toDate;

    private const int DebitAmountPosition = 1;
    private const int CreditAmountPosition = 2;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prepareData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the required data for the report.
    /// </summary>
    /// <param name = "_contract">
    /// The instance of <c>VendBalanceContract_CN</c> .
    /// </param>
    /// <param name = "_finDimDataContract">
    /// The instance of <c>ERFinDimensionsRunDataContract</c> .
    /// </param>
    public CustVendLedgerBalanceTmp_CN prepareData(VendBalanceContract_CN _contract, ERFinDimensionsRunDataContract _finDimDataContract = null)
    {
        openingBalanceMap = new Map(Types::Container, Types::Real);
        periodBalanceMap = new Map(Types::Container, Types::Container);
        defaultDimensionMap = new Map(Types::Container, Types::Int64);
        keySet = new Set(Types::Container);

        fromDate = _contract.parmLedgerFiscalPeriodNameContractER_CN().parmFromDate();
        toDate = _contract.parmLedgerFiscalPeriodNameContractER_CN().parmToDate();

        Query q = new Query(queryStr(VendBalance_CN));

        QueryBuildDataSource qbdsVendTrans = q.dataSourceTable(tableNum(VendTrans));
        QueryBuildDataSource qbdsVendTable = q.dataSourceTable(tableNum(VendTable));
        SysQuery::findOrCreateRange(qbdsVendTrans, fieldNum(VendTrans, TransDate)).value(SysQuery::range(dateNull(), toDate));
        SysQuery::findOrCreateRange(qbdsVendTrans, fieldNum(VendTrans, PostingProfile)).value(SysQuery::range(_contract.parmFromProfile(), _contract.parmToProfile()));
        SysQuery::findOrCreateRange(qbdsVendTable, fieldNum(VendTable, VendGroup)).value(SysQuery::range(_contract.parmFromVendGroup(), _contract.parmToVendGroup()));
        SysQuery::findOrCreateRange(qbdsVendTable, fieldNum(VendTable, ItemBuyerGroupId)).value(SysQuery::range(_contract.parmFromBuyerGroup(), _contract.parmToBuyerGroup()));

        // Get dimesion attributes from the dimension set
        container dimensionAttributeNameCon;
        if (_finDimDataContract)
        {
            ERFinancialDimensionsHelper eRFinancialDimensionsHelper = ERFinancialDimensionsHelper::construct();
            List dimensionAttributeNameList = eRFinancialDimensionsHelper.getValidDimensionSequenceFromFinDimDetailsRunContract(_finDimDataContract);
            if (dimensionAttributeNameList)
            {
                ListEnumerator enumerator = dimensionAttributeNameList.getEnumerator();
                while (enumerator.moveNext())
                {
                    dimensionAttributeNameCon += enumerator.current();
                }
            }
        }

        VendTrans vendTrans;
        VendTable vendTable;
        DirPartyTable dirPartyTable;
        VendGroup vendGroup;
        InventBuyerGroup buyerGroup;
        container dimenionValueCon;
        VendTrans lastVendTrans;
        VendTable lastVendTable;
        DirPartyName lastDirPartyName;
        Description lastVendGroupName;
        Description lastBuyerGroupDescription;

        QueryRun qr = new QueryRun(q);

        while (qr.next())
        {
            DimensionAttributeValueSetItem dimensionAttributeValueSetItem = qr.get(tableNum(DimensionAttributeValueSetItem));
            DimensionAttribute dimensionAttribute = qr.get(tableNum(DimensionAttribute));

            // Go through the dimension value
            if (!qr.changed(tableNum(VendTrans)))
            {
                int dimensionValuePosition = conFind(dimensionAttributeNameCon, dimensionAttribute.Name);
                if (dimensionValuePosition)
                {
                    dimenionValueCon = conPoke(dimenionValueCon, dimensionValuePosition, dimensionAttributeValueSetItem.DisplayValue);
                }
            }
            // New vendTrans
            else
            {
                // Calculate the number for last vend trans
                this.calculateAmountsForVendTrans(lastVendTrans, lastVendTable, lastVendGroupName, lastBuyerGroupDescription, lastDirPartyName, dimenionValueCon);

                dimenionValueCon = conNull();
                for (int i = 1; i <= conLen(dimensionAttributeNameCon); i++)
                {
                    dimenionValueCon += '';
                }

                int dimensionValuePosition = conFind(dimensionAttributeNameCon, dimensionAttribute.Name);
                if (dimensionValuePosition)
                {
                    dimenionValueCon = conPoke(dimenionValueCon, dimensionValuePosition, dimensionAttributeValueSetItem.DisplayValue);
                }

                vendTrans = qr.get(tableNum(VendTrans));
                vendTable = qr.get(tableNum(VendTable));
                dirPartyTable = qr.get(tableNum(DirPartyTable));
                vendGroup = qr.get(tableNum(VendGroup));
                buyerGroup = qr.get(tableNum(InventBuyerGroup));

                lastVendTrans = vendTrans.data();
                lastVendTable = vendTable.data();
                lastDirPartyName = dirPartyTable.Name;
                lastVendGroupName = vendGroup.Name;
                lastBuyerGroupDescription = buyerGroup.Description;
            }
        }
        this.calculateAmountsForVendTrans(lastVendTrans, lastVendTable, lastVendGroupName, lastBuyerGroupDescription, lastDirPartyName, dimenionValueCon);

        this.insertVendBalanceTmpTable();

        return vendBalanceTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAmountsForVendTrans</Name>
				<Source><![CDATA[
    private void calculateAmountsForVendTrans(
        VendTrans _vendTrans,
        VendTable _vendTable,
        Description _vendGroupName,
        Description _buyerGroupDescription,
        DirPartyName _dirPartyName,
        container _dimensionValueCon)
    {
        AmountMST beginBalance, debitAmount, creditAmount;
        container keyContainerLocal;

        if (!_vendTrans.AccountNum)
        {
            return;
        }

        keyContainerLocal = [
            _vendTrans.AccountNum,
            _vendTrans.PostingProfile,
            _dirPartyName,
            _vendTable.CreditMax,
            _vendTable.VendGroup,
            _vendGroupName,
            _vendTable.ItemBuyerGroupId,
            _buyerGroupDescription,
            _dimensionValueCon];

        if (!keySet.in(keyContainerLocal))
        {
            keySet.add(keyContainerLocal);
            defaultDimensionMap.insert(keyContainerLocal, _vendTrans.DefaultDimension);
        }

        if (_vendTrans.TransDate < fromDate)
        {
            if (openingBalanceMap.exists(keyContainerLocal))
            {
                openingBalanceMap.insert(
                    keyContainerLocal,
                    openingBalanceMap.lookup(keyContainerLocal) + _vendTrans.AmountMST);
            }
            else
            {
                openingBalanceMap.insert(keyContainerLocal, _vendTrans.AmountMST);
            }
            }
        else
        {
            creditAmount = (_vendTrans.AmountMST < 0 && !_vendTrans.Correct) ?
                -_vendTrans.AmountMST : 0;
            debitAmount  = (_vendTrans.AmountMST >= 0 || (_vendTrans.AmountMST < 0 && _vendTrans.Correct)) ?
                _vendTrans.AmountMST : 0;

            container periodAmountContainerLocal = [0, 0];
            if (periodBalanceMap.exists(keyContainerLocal))
            {
                periodAmountContainerLocal = periodBalanceMap.lookup(keyContainerLocal);
                creditAmount += conPeek(periodAmountContainerLocal, CreditAmountPosition);
                debitAmount  += conPeek(periodAmountContainerLocal, DebitAmountPosition);
            }
            periodAmountContainerLocal = conPoke(periodAmountContainerLocal, CreditAmountPosition, creditAmount);
            periodAmountContainerLocal = conPoke(periodAmountContainerLocal, DebitAmountPosition, debitAmount);

            periodBalanceMap.insert(keyContainerLocal, periodAmountContainerLocal);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertVendBalanceTmpTable</Name>
				<Source><![CDATA[
    private void insertVendBalanceTmpTable()
    {
        Amount              amountDebitLocal;
        Amount              amountCreditLocal;
        Amount              beginningBalanceAmountLocal;
        Amount              endingBalanceAmountLocal;
        VendPostingProfile  vendPostingProfileLocal;
        SetEnumerator       setEnumerator = keySet.getEnumerator();
        container           keyContainerLocal;
        container           dimensionValueConLocal;

        while (setEnumerator.moveNext())
        {
            amountDebitLocal            = 0;
            amountCreditLocal           = 0;
            BeginningBalanceAmountLocal = 0;
            endingBalanceAmountLocal    = 0;

            keyContainerLocal = setEnumerator.current();
            [
                vendBalanceTmp.AccountNum,
                vendPostingProfileLocal,
                vendBalanceTmp.AccountName,
                vendBalanceTmp.CreditLimit,
                vendBalanceTmp.AccountGroup,
                vendBalanceTmp.AccountGroupName,
                vendBalanceTmp.OperatorGroup,
                vendBalanceTmp.OperatorGroupName,
                dimensionValueConLocal
            ] = keyContainerLocal;

            if (vendPostingProfileLocal)
            {
                LedgerDimensionDefaultAccount summaryAccount = VendLedgerAccounts::summaryLedgerDimension(vendBalanceTmp.AccountNum, vendPostingProfileLocal);
                MainAccount mainAccount = MainAccount::find(DimensionAttributeValueCombination::find(summaryAccount).MainAccount);
                vendBalanceTmp.MainAccount = mainAccount.MainAccountId;
                vendBalanceTmp.MainAccountName = mainAccount.localizedName();
            }

            if (openingBalanceMap.exists(keyContainerLocal))
            {
                BeginningBalanceAmountLocal     = openingBalanceMap.lookup(keyContainerLocal);
            }

            if (periodBalanceMap.exists(keyContainerLocal))
            {
                [amountDebitLocal, amountCreditLocal] = periodBalanceMap.lookup(keyContainerLocal);
            }

            endingBalanceAmountLocal = BeginningBalanceAmountLocal + amountDebitLocal - amountCreditLocal;

            vendBalanceTmp.DefaultDimension = defaultDimensionMap.lookup(keyContainerLocal);
            vendBalanceTmp.BeginBalance  = BeginningBalanceAmountLocal;
            vendBalanceTmp.DebitAmount   = amountDebitLocal;
            vendBalanceTmp.CreditAmount  = amountCreditLocal;
            vendBalanceTmp.EndBalance    = endingBalanceAmountLocal;
            vendBalanceTmp.doInsert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>