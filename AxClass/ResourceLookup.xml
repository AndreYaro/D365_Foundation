<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResourceLookup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ResourceLookup
{
    Query                   query;
    boolean                 includeActive;
    boolean                 includePending;
    boolean                 includeTerminated;
    boolean                 includeOnlyCurrentLegalEntity;
    boolean                 lockResourceStatusFilters;
    boolean                 lockLegalEntityFilters;
    boolean                 enableVirtualCompany;
    ResResourceType         resourceType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmIncludeOnlyCurrentLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets whether to include only resources with employments in the current company.
    /// </summary>
    /// <param name="_includeOnlyCurrentLegalEntity">
    ///    The value to set.
    /// </param>
    /// <returns>
    /// true if only resources with employments in the current company are included in the lookup; otherwise, false.
    /// </returns>
    public boolean parmIncludeOnlyCurrentLegalEntity(boolean _includeOnlyCurrentLegalEntity = includeOnlyCurrentLegalEntity)
    {
        includeOnlyCurrentLegalEntity = _includeOnlyCurrentLegalEntity;

        return includeOnlyCurrentLegalEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmlockLegalEntityFilters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets whether the legal entity filter control is locked in the lookup.
    /// </summary>
    /// <param name="_lockLegalEntityFilters">
    ///    The value to set.
    /// </param>
    /// <returns>
    /// true if the legal entity filter control is locked in the lookup; otherwise, false.
    /// </returns>
    public boolean parmlockLegalEntityFilters(boolean _lockLegalEntityFilters = lockLegalEntityFilters)
    {
        lockLegalEntityFilters = _lockLegalEntityFilters;

        return lockLegalEntityFilters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourceStatusRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get enumerator <c>HcmWorkerStatusRange</c> value based on current resource status range.
    /// </summary>
    /// <returns>
    /// Returns enumerator <c>HcmWorkerStatusRange</c> value based on current resource status range.
    /// </returns>
    public HcmWorkerStatusRange getResourceStatusRange()
    {
        HcmWorkerStatusRange range;

        if (includeActive && includePending && includeTerminated)
        {
            range = HcmWorkerStatusRange::All;
        }
        else if (includeActive && includePending)
        {
            range = HcmWorkerStatusRange::EmployedAndPending;
        }
        else if (includeActive && includeTerminated)
        {
            range = HcmWorkerStatusRange::EmployedAndTerminated;
        }
        else if (includeActive)
        {
            range = HcmWorkerStatusRange::Employed;
        }
        else if (includePending)
        {
            range = HcmWorkerStatusRange::Pending;
        }
        else if (includeTerminated)
        {
            range = HcmWorkerStatusRange::Terminated;
        }

        return range;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setResourceStatusRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the resource status range based on the <c>HcmWorkerStatusRange</c> enumerator value.
    /// </summary>
    /// <param name="_statusRange">
    /// <c>HcmWorkerStatusRange</c> enumerator value.
    /// </param>
    public void setResourceStatusRange(HcmWorkerStatusRange _statusRange)
    {
        switch (_statusRange)
        {
            case HcmWorkerStatusRange::Employed:
                // Include only active resources
                includeActive = true;
                includePending = false;
                includeTerminated = false;
                break;

            case HcmWorkerStatusRange::Pending:
                // Include only pending resources
                includeActive = false;
                includePending = true;
                includeTerminated = false;
                break;

            case HcmWorkerStatusRange::Terminated:
                // Include only terminated resources
                includeActive = false;
                includePending = false;
                includeTerminated = true;
                break;

            case HcmWorkerStatusRange::EmployedAndPending:
                // Include both employed and pending resources
                includeActive = true;
                includePending = true;
                includeTerminated = false;
                break;

            case HcmWorkerStatusRange::EmployedAndTerminated:
                // Include both employed and terminated resources
                includeActive = true;
                includePending = false;
                includeTerminated = true;
                break;

            case HcmWorkerStatusRange::All:
                // Include all resources
                includeActive = true;
                includePending = true;
                includeTerminated = true;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLegalEntityRange</Name>
				<Source><![CDATA[
    public HcmLegalEntityRange getLegalEntityRange()
    {
        HcmLegalEntityRange range;

        if (this.parmIncludeOnlyCurrentLegalEntity())
        {
            range = HcmLegalEntityRange::CurrentLegalEntity;
        }
        else
        {
            range = HcmLegalEntityRange::AllLegalEntities;
        }

        return range;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applySelectedParametersToQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Modifies the ranges of the query to match the selected parameters in the <c>ResourceLookup</c>
    ///    object.
    /// </summary>
    /// <returns>
    ///    The updated query.
    /// </returns>
    /// <remarks>
    ///    The <c>ResourceLookup</c> form uses this method to adjust the query as the user makes changes to
    ///    the filter options.
    /// </remarks>
    public Query applySelectedParametersToQuery()
    {
        return this.localUpdateQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>localUpdateQuery</Name>
				<Source><![CDATA[
    private Query localUpdateQuery(ResourceRecId _resourceRecId = 0)
    {
        utcdatetime             now = DateTimeUtil::utcNow();
        
        QueryBuildDataSource qbdsResource       = query.dataSourceTable(tableNum(ResourceView));
        qbdsResource.clearRanges();
        QueryBuildRange resourceTypeRange       = qbdsResource.addRange(fieldNum(ResourceView, Type));
        QueryBuildRange resourceCompanyIdRange  = qbdsResource.addRange(fieldNum(ResourceView, ResourceCompanyId));
        
        QueryBuildDataSource qbdsResourceLegalEntity = query.dataSourceName(queryDatasourceStr(ResourceLookup, ResourceLegalEntity));
        qbdsResourceLegalEntity.clearRanges();
        QueryBuildDataSource qbdsActiveResourceLegalEntity = query.dataSourceName(queryDatasourceStr(ResourceLookup, ActiveResourceLegalEntity));
        qbdsActiveResourceLegalEntity.clearRanges();

        QueryBuildRange validFromRange   = qbdsResourceLegalEntity.addRange(fieldNum(ResourceLegalEntityView, ValidFrom));
        QueryBuildRange validToRange     = qbdsResourceLegalEntity.addRange(fieldNum(ResourceLegalEntityView, ValidTo));
        QueryBuildRange legalEntityRange = qbdsResourceLegalEntity.addRange(fieldNum(ResourceLegalEntityView, LegalEntity));
        QueryBuildRange resourceRange    = qbdsResourceLegalEntity.addRange(fieldNum(ResourceLegalEntityView, Resource));

        QueryBuildRange resourceLegalEntityValidFromRange = qbdsActiveResourceLegalEntity.addRange(fieldNum(ResourceLegalEntityView, ValidFrom));
        QueryBuildRange resourceLegalEntityValidToRange   = qbdsActiveResourceLegalEntity.addRange(fieldNum(ResourceLegalEntityView, ValidTo));

        // disable this query data source, and re-enable conditionally when only showing pending/terminated resources
        qbdsActiveResourceLegalEntity.enabled(false);

        if (_resourceRecId != 0)
        {
            // Filter the ResourceView table on the passed resource rec id
            resourceRange.value(queryValue(_resourceRecId));
        }
        else
        {
            // Include all resources
            resourceRange.value(SysQuery::valueUnlimited());
        }

        if (includeOnlyCurrentLegalEntity == false
            || (_resourceRecId != 0 && lockLegalEntityFilters == false))
        {
            // Include all companies
            legalEntityRange.value(SysQuery::valueUnlimited());
            resourceCompanyIdRange.value(SysQuery::valueUnlimited());
        }
        else
        {
            if (enableVirtualCompany && isVirtualCompany())
            {
                // Set to the virtual company list
                legalEntityRange.value(con2StrUnlimited(CompanyInfo::getVirtualCompanyList()));
            }
            else
            {
                // Limit to the current company
                resourceCompanyIdRange.value(queryValue(curExt()));
                legalEntityRange.value(queryValue(CompanyInfo::current()));
            }
        }

        if (includeActive && includePending && includeTerminated
            || (_resourceRecId != 0 && lockResourceStatusFilters == false))
        {
            validFromRange.value(SysQuery::valueUnlimited());
            validToRange.value(SysQuery::valueUnlimited());
        }
        else if (includeActive && includePending)
        {
            validToRange.value(SysQueryRangeUtil::greaterThanUtcNow());
        }
        else if (includeTerminated && includeActive)
        {
            validFromRange.value(SysQueryRangeUtil::lessThanUtcNow());
        }
        else if (includeTerminated && includePending)
        {
            qbdsActiveResourceLegalEntity.enabled(true);
            resourceLegalEntityValidFromRange.value(queryRange(DateTimeUtil::minValue(), DateTimeUtil::utcNow()));
            resourceLegalEntityValidToRange.value(queryRange(DateTimeUtil::utcNow(), DateTimeUtil::maxValue()));
        }
        else if (includeActive)
        {
            validFromRange.value(queryRange(DateTimeUtil::minValue(), DateTimeUtil::utcNow()));
            validToRange.value(queryRange(DateTimeUtil::utcNow(), DateTimeUtil::maxValue()));
        }
        else if (includeTerminated)
        {
            validToRange.value(SysQueryRangeUtil::lessThanUtcNow());
        }
        else if (includePending)
        {
            validFromRange.value(SysQueryRangeUtil::greaterThanUtcNow());
        }
        else
        {
            validFromRange.value(SysQueryRangeUtil::valueEmptyString());
            validToRange.value(SysQueryRangeUtil::valueEmptyString());
        }

        resourceTypeRange.value(QueryValue(resourceType));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookup</Name>
				<Source><![CDATA[
    public ResourceView lookup(FormControl _callerFormControl)
    {
        ResourceView            selectedRecord;
        str                     lookupFormName = formStr(ResourceLookup);
        Form                    resourceLookupForm = new Form(lookupFormName);
        FormReferenceControl    referenceControl = _callerFormControl as FormReferenceControl;

        Args args = new Args();
        args.name(lookupFormName);
        args.caller(_callerFormControl.formRun());
        args.parmObject(this);

        // position the lookup to highlight the current record
        // use different approaches to find the record depending on
        // what value the calling control contains
        if (referenceControl)
        {
            // a reference control supposed to contain a key RecId value
            selectedRecord = ResourceView::find(referenceControl.value());
        }

        if (selectedRecord.RecId != 0)
        {
            args.lookupRecord(selectedRecord);
        }

        // perform form lookup on the caller form control
        if (referenceControl)
        {
            FormRun formRun = FormAutoLookupFactory::buildReferenceLookupFromCustomForm(referenceControl, resourceLookupForm, args);
            referenceControl.performFormLookup(formRun);

            selectedRecord = formRun.selectRecordModeSelectedRecord();
        }

        return selectedRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(
        boolean _includeActive,
        boolean _includePending,
        boolean _includeTerminated,
        boolean _includeOnlyCurrentLegalEntity,
        boolean _lockResourceStatusFilters,
        boolean _lockLegalEntityFilters,
        boolean _enableVirtualCompany = false,
        ResResourceType _resourceType = ResResourceType::Personnel
    )
    {
        query = new Query(queryStr(ResourceLookup));
        includeActive = _includeActive;
        includePending = _includePending;
        includeTerminated = _includeTerminated;
        includeOnlyCurrentLegalEntity = _includeOnlyCurrentLegalEntity;
        lockResourceStatusFilters = _lockResourceStatusFilters;
        lockLegalEntityFilters = _lockLegalEntityFilters;
        enableVirtualCompany = _enableVirtualCompany;
        resourceType = _resourceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    public void updateQuery(Query _query, Args _args)
    {
        if (_args && _args.dataset())
        {
            ProjValCheckTrans projValTrans = new ProjValCheckTrans();
            if (projValTrans.checkBuffer(_args))
            {
                projValTrans.setVariablesFromBuffer(_args);
            }

            ProjId         projId      = projValTrans.parmProjId();
            ProjCategoryId categoryId  = projValTrans.parmCategoryId();
            boolean        serviceItem = projValTrans.parmServiceItem();

            QueryBuildDataSource qbdsResourceView = _query.dataSourceTable(tableNum(ResourceView));

            if (projId && ResourceLookup::createProjConnection())
            {
                QueryBuildDataSource qbdsProjEmployeeAssoc = qbdsResourceView.addDataSource(tableNum(ProjProjectEmployeeAssoc));
                qbdsProjEmployeeAssoc.relations(false);
                qbdsProjEmployeeAssoc.joinMode(JoinMode::ExistsJoin);
                qbdsProjEmployeeAssoc.addLink(fieldNum(ResourceView, RecId), fieldNum(ProjProjectEmployeeAssoc, Resource));
                qbdsProjEmployeeAssoc.addRange(fieldNum(ProjProjectEmployeeAssoc, ProjId)).value(projId);
            }

            if (categoryId && !serviceItem && ResourceLookup::createCategoryConnection())
            {
                QueryBuildDataSource qbdsProjEmplCategoryAssoc = qbdsResourceView.addDataSource(tableNum(ProjEmplCategoryAssoc));
                qbdsProjEmplCategoryAssoc.relations(false);
                qbdsProjEmplCategoryAssoc.joinMode(JoinMode::ExistsJoin);
                qbdsProjEmplCategoryAssoc.addLink(fieldNum(ResourceView, RecId), fieldNum(ProjEmplCategoryAssoc, Resource));
                qbdsProjEmplCategoryAssoc.addRange(fieldNum(ProjEmplCategoryAssoc, CategoryId)).value(categoryId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a given <c>ResourceRecId</c> value is valid under the filter restrictions of
    /// the lookup object.
    /// </summary>
    /// <param name="_resourceRecId">
    /// The record ID of the <c>Resource</c> record to validate.
    /// </param>
    /// <returns>
    /// true if the resource is valid under the filter restrictions; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method is used in the <c>ResolveReference</c> method override to make sure that the record is
    /// valid.
    /// </remarks>
    public boolean validate(ResourceRecId _resourceRecId)
    {
        ResourceView            resource;
        boolean                 ret = true;

         select firstonly crossCompany RecId from resource
             where resource.RecId == _resourceRecId;

        if (resource.RecId == 0)
        {
            //ret = checkfailed('Resource could not be found');
            ret = false;
        }

        query = this.localUpdateQuery(_resourceRecId);
        QueryRun queryRun = new QueryRun(query);

        if (queryRun.next() == false)
        {
            //ret = checkfailed('Resource did not match filter criteria');
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCategoryConnection</Name>
				<Source><![CDATA[
    public static boolean createCategoryConnection()
    {
        ProjParameters projParameters = ProjParameters::find();

        if (projParameters.ValidationEmplCategory == ProjValParameter::None)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjConnection</Name>
				<Source><![CDATA[
    public static boolean createProjConnection()
    {
        ProjParameters projParameters = ProjParameters::find();

        if (projParameters.ValidationEmplProj == ProjValParameter::None)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocalResourceLookup</Name>
				<Source><![CDATA[
    private static ResourceLookup getLocalResourceLookup(Common _record = null, boolean _lockLegalEntityFilters = true)
    {
        ProjParameters projParameters = ProjParameters::find();
        boolean showInactiveResource = projParameters.ShowInactiveEmployees == NoYes::Yes ? true : false;

        if (ResourceLookup::showOnlyActiveAndPendingResoures(_record.TableId))
        {
            return ResourceLookup::newCustomOptions(true, true, showInactiveResource, true, false, _lockLegalEntityFilters);
        }
        else if (ResourceLookup::showOnlyActiveResources(_record.TableId) ||
           (ResourceLookup::isJournal(_record.TableId) && !showInactiveResource))
        {
            return ResourceLookup::newCustomOptions(true, false, false, true, true, _lockLegalEntityFilters);
        }

        return ResourceLookup::newAllResourcesWithinCompany(_lockLegalEntityFilters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showOnlyActiveAndPendingResoures</Name>
				<Source><![CDATA[
    private static boolean showOnlyActiveAndPendingResoures(TableId _tmpTableId)
    {
        boolean ret = false;

        if (_tmpTableId == tableNum(ProjHourCostPrice)  ||
            _tmpTableId == tableNum(ProjHourSalesPrice) ||
            _tmpTableId == tableNum(ProjTransferPrice))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournal</Name>
				<Source><![CDATA[
    private static boolean isJournal(TableId _tmpTableId)
    {
        boolean ret = false;

        if (_tmpTableId == tableNum(ProjJournalTrans)        ||
            _tmpTableId == tableNum(InventJournalTrans)      ||
            _tmpTableId == tableNum(LedgerJournalTrans)      ||
            _tmpTableId == tableNum(TmpProjAdjustmentCreate) ||
            _tmpTableId == tableNum(SalesTable)              ||
            _tmpTableId == tableNum(SalesLine)               ||
            _tmpTableId == tableNum(PurchTable)              ||
            _tmpTableId == tableNum(ProjForecastEmpl)        ||
            _tmpTableId == tableNum(ProjForecastRevenue)     ||
            _tmpTableId == tableNum(ProjJournalTable)        ||
            _tmpTableId == tableNum(ProjForecastCost)        ||
            _tmpTableId == tableNum(SMAServiceOrderLine)     ||
            _tmpTableId == tableNum(SMAAgreementLine)        ||
            _tmpTableId == tableNum(SMAServiceOrderTable)    ||
            _tmpTableId == tableNum(SMAAgreementTable)       ||
            _tmpTableId == tableNum(SalesQuotationLine)      ||
            _tmpTableId == tableNum(LedgerJournalTrans_Project)
        )
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the resource lookup with an applied filter to restrict the lookup to the specified subset of
    /// resources.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The form control that opens the resource lookup.
    /// </param>
    /// <param name="_record">
    /// A table buffer.
    /// </param>
    /// <param name="_lockLegalEntityFilters">
    /// true if you want disable legal entity filters. otherwise false
    /// </param>
    /// <returns>
    /// A <c>HcmResource</c> record buffer that references the selected record.
    /// </returns>
    public static ResourceView lookupResource(FormReferenceControl _formReferenceControl, Common _record = null, boolean _lockLegalEntityFilters = true)
    {
        ResourceLookup  resourceLookup = ResourceLookup::resourceLookup(_record, _lockLegalEntityFilters);
        return resourceLookup.lookup(_formReferenceControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newActiveResources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>ResourceLookup</c> object for filtering the lookup on active resources.
    /// </summary>
    /// <returns>
    /// The instantiated <c>ResourceLookup</c> object.
    /// </returns>
    public static ResourceLookup newActiveResources()
    {
        ResourceLookup resourceLookup = new ResourceLookup(
        true,//_includeActive,
        false,//_includePending,
        false,//_includeTerminated,
        false,//_includeOnlyCurrentLegalEntity,
        false,//_lockResourceStatusFilters,
        false//,_lockLegalEntityFilters,
        );

        resourceLookup.localUpdateQuery();

        return resourceLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAllResourcesWithinCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance the <c>ResourceLookup</c> class that filters the lookup on all of the resources
    /// in the current company.
    /// </summary>
    /// <param name="_lockLegalEntityFilters">
    /// true if you want disable legal entity filters. otherwise false
    /// </param>
    /// <returns>
    /// The instance of the <c>ResourceLookup</c> class that was initialized.
    /// </returns>
    public static ResourceLookup newAllResourcesWithinCompany(boolean _lockLegalEntityFilters = true)
    {
        ResourceLookup resourceLookup = new ResourceLookup(
                                               true,//_includeActive
                                               true,//_includePending
                                               true,//_includeTerminated
                                               true,//_includeOnlyCurrentLegalEntity
                                               false,//_lockResourceStatusFilters
                                               _lockLegalEntityFilters//,_lockLegalEntityFilters
                                               );

        resourceLookup.localUpdateQuery();

        return resourceLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCustomOptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a custom <c>ResourceLookup</c> object for filtering the lookup.
    /// </summary>
    /// <param name="_includeActive">
    /// Whether to include active resources.
    /// </param>
    /// <param name="_includePending">
    /// Whether to include pending resources.
    /// </param>
    /// <param name="_includeTerminated">
    /// Whether to include terminated resources.
    /// </param>
    /// <param name="_includeOnlyCurrentLegalEntity">
    /// Whether to display the resources for current legal entity only.     
    /// </param>
    /// <param name="_lockWorkerStatusFilters">
    /// Whether to display the specific resource for the specified status range only.
    /// </param>
    /// <param name="_lockLegalEntityFilters">
    /// Whether the legal entities filter control should be locked.
    /// </param>
    /// <returns>
    /// The instantiated <c>ResourceLookup</c> object.
    /// </returns>
    public static ResourceLookup newCustomOptions(
        boolean _includeActive,
        boolean _includePending,
        boolean _includeTerminated,
        boolean _includeOnlyCurrentLegalEntity,
        boolean _lockWorkerStatusFilters,
        boolean _lockLegalEntityFilters
    )
    {
        if (_includeActive == false && _includePending == false && _includeTerminated == false)
        {
            error("@SYS95118");
        }

        ResourceLookup resourceLookup = new ResourceLookup(  _includeActive,
                                                             _includePending,
                                                             _includeTerminated,
                                                             _includeOnlyCurrentLegalEntity,
                                                             _lockWorkerStatusFilters,
                                                             _lockLegalEntityFilters
                                                           );

        return resourceLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newOnlyActiveResources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>ResourceLookup</c> object for filtering the lookup on only active resources.
    /// </summary>
    /// <returns>
    /// The instantiated <c>ResourceLookup</c> object.
    /// </returns>
    public static ResourceLookup newOnlyActiveResources()
    {
        ResourceLookup resourceLookup = new ResourceLookup(
            true,//_includeActive
            false,//_includePending
            false,//_includeTerminated
            false,//_includeOnlyCurrentLegalEntity
            true,//_lockResourceStatusFilters
            false//_lockLegalEntityFilters
            );

        resourceLookup.localUpdateQuery();

        return resourceLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newOnlyActiveResourcesWithinCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>resourceLookup</c> object for filtering the lookup on only active
    /// resources in the current company.
    /// </summary>
    /// <returns>
    /// The instantiated <c>resourceLookup</c> object.
    /// </returns>
    public static ResourceLookup newOnlyActiveResourcesWithinCompany()
    {
        ResourceLookup resourceLookup = new ResourceLookup(
                                               true,//_includeActive
                                               false,//_includePending
                                               false,//_includeTerminated
                                               true,//_includeOnlyCurrentLegalEntity
                                               true,//_lockResourceStatusFilters
                                               true//_lockLegalEntityFilters
                                               );

        resourceLookup.localUpdateQuery();

        return resourceLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceLookup</Name>
				<Source><![CDATA[
    private static ResourceLookup resourceLookup(Common _record = null, boolean _lockLegalEntityFilters = true)
    {
        Args            args = new Args();
        Query           query = new Query();

        ResourceLookup resourceLookup = ResourceLookup::getLocalResourceLookup(_record, _lockLegalEntityFilters);
        query = resourceLookup.localUpdateQuery();

        args.record(_record);
        resourceLookup.updateQuery(query, args);

        return resourceLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showOnlyActiveResources</Name>
				<Source><![CDATA[
    private static boolean showOnlyActiveResources(TableId _tmpTableId)
    {
        boolean ret = false;

        if (_tmpTableId == tableNum(SalesQuotationTable)        ||
            _tmpTableId == tableNum(TSAppEmplSub)
        )
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a given <c>ResourceRecId</c> is valid under the filter restrictions of the
    /// lookup object.
    /// </summary>
    /// <param name="_resourceRecId">
    /// The record ID of the <c>Resource</c> to validate.
    /// </param>
    /// <param name="_record">
    /// A table buffer.
    /// </param>
    /// <param name="_lockLegalEntityFilters">
    /// true to allow resources only on the current legal entity; false to allow resources from other LE's.
    /// </param>
    /// <returns>
    /// true if the resource is valid under the filter restrictions; otherwise, false.
    /// </returns>
    public static boolean validateResource(ResourceRecId _resourceRecId, Common _record = null, boolean _lockLegalEntityFilters = true)
    {
        boolean ret = true;
        ResourceLookup resourceLookup = ResourceLookup::resourceLookup(_record, _lockLegalEntityFilters);

        if (!resourceLookup.validate(_resourceRecId))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildResourceQueryByDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters the active resources in the lookup as per the date given and a parameter that decides whether to display resources from all legal entities or
    /// only from the current company.
    /// </summary>
    /// </param>
    /// <param name="_endDateTime">
    /// End date to filter the data in the lookup.
    /// </param>
    /// <param name="_applyCurrentLEfilter">
    /// The value to set whether to include only resources with employments in the current company.
    /// </param>
    /// <returns>
    /// The updated query.
    /// </returns>
    internal static Query buildResourceQueryByDate(utcdatetime _endDateTime = DateTimeUtil::maxValue(), boolean _applyCurrentLEfilter = true)
    {
        Query resourceLookupQuery =  new Query();

        QueryBuildDataSource qbdsResourceView = resourceLookupQuery.addDataSource(tableNum(ResourceView));
        QueryBuildDataSource qbdsResourceWorkerLE = qbdsResourceView.addDataSource(tableNum(ResourceWorkerLegalEntityView));
        qbdsResourceWorkerLE.relations(false);
        qbdsResourceWorkerLE.addLink(fieldNum(ResourceView, RecId), fieldNum(ResourceWorkerLegalEntityView, Resource));
        qbdsResourceWorkerLE.joinMode(JoinMode::ExistsJoin);

        if (_applyCurrentLEfilter)
        {
            qbdsResourceWorkerLE.addRange(fieldNum(ResourceWorkerLegalEntityView, LegalEntity)).value(queryValue(CompanyInfo::current()));
        }

        qbdsResourceWorkerLE.addRange(fieldNum(ResourceWorkerLegalEntityView, ValidFrom)).value(strFmt('<%1', _endDateTime));
        qbdsResourceWorkerLE.addRange(fieldNum(ResourceWorkerLegalEntityView, ValidTo)).value(strFmt('>%1', _endDateTime));
        
        return resourceLookupQuery;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>