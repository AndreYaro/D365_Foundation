<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimListPageControlAdapter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventDimListPageControlAdapter</c> class is the list page control adapter for the
///    <c>InventDim</c> framework.
/// </summary>
/// <remarks>
///    This class adapts a list page control to be manipulated by the <c>InventDim</c> framework.
/// </remarks>
public class InventDimListPageControlAdapter implements InventDimFormControlInterface
{
    str fieldName;
    ListPageInteraction listPageInteraction;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets a Boolean value that indicates whether the control is editable.
    /// </summary>
    /// <param name="_value">
    /// A Boolean value that indicates whether the control is editable; optional.
    /// </param>
    /// <returns>
    /// true if the control is be editable; otherwise, false.
    /// </returns>
    public boolean allowEdit(boolean _value = false)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the control object that corresponds to the control.
    /// </summary>
    /// <returns>
    /// The list page interaction object.
    /// </returns>
    public Object controlObject()
    {
        return listPageInteraction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data field ID that corresponds to the control.
    /// </summary>
    /// <returns>
    /// The data field ID that is linked to the control.
    /// </returns>
    public FieldId dataField()
    {
        return listPageInteraction.listPage().listPageFieldDataField(fieldName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data source that corresponds to the control.
    /// </summary>
    /// <returns>
    /// The data source that is linked to the control.
    /// </returns>
    /// <remarks>
    /// For this list page control adapter, this method throws an error.
    /// </remarks>
    public int dataSource()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInGrid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the control is in a grid.
    /// </summary>
    /// <returns>
    /// true if the control is in a grid; otherwise, false.
    /// </returns>
    public boolean isInGrid()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mandatory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets a Boolean value that indicates whether the control is mandatory.
    /// </summary>
    /// <param name="_value">
    /// A Boolean value that indicates whether the control is mandatory; optional.
    /// </param>
    /// <returns>
    /// true if the control is be mandatory; otherwise, false.
    /// </returns>
    public boolean mandatory(boolean _value = false)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets a the name of the field.
    /// </summary>
    /// <param name="_fieldName">
    ///    The field name to set.
    /// </param>
    /// <returns>
    ///    The name of the field.
    /// </returns>
    public str parmFieldName(str _fieldName = fieldName)
    {
        fieldName = _fieldName;
        return fieldName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmListPageInteraction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets a the list page interaction object.
    /// </summary>
    /// <param name="_listPageInteraction">
    ///    The list page interaction object to set.
    /// </param>
    /// <returns>
    ///    The list page interaction object associated with the adapter.
    /// </returns>
    public ListPageInteraction parmListPageInteraction(ListPageInteraction _listPageInteraction = listPageInteraction)
    {
        listPageInteraction = _listPageInteraction;
        return listPageInteraction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportsMandatory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the control supports mandatory.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    public boolean supportsMandatory()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID of the control.
    /// </summary>
    /// <returns>
    /// The table ID of the control.
    /// </returns>
    public int tableId()
    {
        return listPageInteraction.listPage().listPageFieldTableId(fieldName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>visible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets a Boolean value that indicates whether the control is visible.
    /// </summary>
    /// <param name="_value">
    /// A Boolean value that indicates whether the control is visible; optional.
    /// </param>
    /// <returns>
    /// true if the control should be visible; otherwise, false.
    /// </returns>
    public boolean visible(boolean _value = false)
    {
        if (!prmisDefault(_value))
        {
            return listPageInteraction.listPage().listPageFieldVisible(fieldName, _value);
        }
        else
        {
            return listPageInteraction.listPage().listPageFieldVisible(fieldName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs an InventDim list page control adapter.
    /// </summary>
    /// <returns>
    ///    The constructed InventDim list page control adapter.
    /// </returns>
    public static InventDimListPageControlAdapter construct()
    {
        return new InventDimListPageControlAdapter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newListPageControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new list page control.
    /// </summary>
    /// <param name="_fieldName">
    /// The field name of the control.
    /// </param>
    /// <param name="_listPageInteraction">
    /// The associated list page interaction object.
    /// </param>
    /// <returns>
    /// The newly created adapter as an <c>InventDimFormControlInterface</c> interface.
    /// </returns>
    public static InventDimFormControlInterface newListPageControl(
                                                    str _fieldName,
                                                    ListPageInteraction _listPageInteraction)
    {
        InventDimListPageControlAdapter adapter = InventDimListPageControlAdapter::construct();

        adapter.parmFieldName(_fieldName);
        adapter.parmListPageInteraction(_listPageInteraction);

        return adapter;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>