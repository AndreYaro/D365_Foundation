<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqTotals</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class PurchReqTotals extends TradeTotals
{
    PurchUpdate         specQty;
    CurrencyCode        currencyCode;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        TradeCalcTax    tradeCalcTax;
        boolean         taxDocumentError = false;

        super();

        if (calculateTaxAmount)
        {
            tradeCalcTax    = this.constructCalcTax();
            tradeCalcTax.transferEnumerableFactory(this.parmEnumerableFactory());
            tradeCalcTax.parmSkipLineMarkup(!calculateMarkupLineAmount);
            tradeCalcTax.parmSkipTableMarkup(!calculateMarkupTableAmount);

            taxTotal    = tradeCalcTax.calcTax(this);
            taxTotalGTE = taxTotal;

            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                PurchReqLine purchReqLineLocal;
                while select purchReqLineLocal
                    where purchReqLineLocal.PurchReqTable == orderTable.RecId
                {
                    ITaxableDocument taxableDocument = TaxableDocumentObject::construct(TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(purchReqLineLocal));
                    ITaxDocument taxDocumentObject = TaxBusinessService::calculateTax(taxableDocument);

                    if (taxDocumentObject)
                    {
                        ITaxDocumentMeasureValue    totalTaxMeasureValue;
                        ITaxDocumentMeasureValue    partyTaxMeasureValue;

                        // PurchReq currency code always defaults from ledger accounting currency in totals form.(Details please refer PurchTotals:init() method.)
                        // So the sales tax also defaults from accounting currency.
                        totalTaxMeasureValue = taxDocumentObject.getTotalTax();
                        taxTotalGTE += totalTaxMeasureValue.amountAccountingCurrency();

                        partyTaxMeasureValue = taxDocumentObject.sumByTaxAccountingProvider(TaxAccountingProvider::Party, TaxAccountingPostingProfileDistributionSide::Credit);
                        taxTotal += partyTaxMeasureValue.amountAccountingCurrency();

                        partyTaxMeasureValue = taxDocumentObject.sumByTaxAccountingProvider(TaxAccountingProvider::Party, TaxAccountingPostingProfileDistributionSide::Debit);
                        taxTotal -= partyTaxMeasureValue.amountAccountingCurrency();
                    }
                    else
                    {
                        taxDocumentError = true;
                    }
                }

                if (taxDocumentError)
                {
                    taxTotalGTE = taxTotal;
                }
            }

            taxAmountCalculated = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateFreeValue</Name>
				<Source><![CDATA[
    protected AmountCur calculateFreeValue()
    {
        freeValue   = VendTable::find(this.invoiceAccount()).freeValueCur(totalAmount);
        return freeValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscAmount</Name>
				<Source><![CDATA[
    public DiscAmount cashDiscAmount()
    {
        using (TaxIntegrationTaxJurisdictionParametersContext taxIntegrationTaxJurisdictionParametersContext = TaxIntegrationTaxJurisdictionParametersContext::construct(orderTable.TableId, orderTable.RecId))
        {
            totalCashDisc = VendParameters::cashDiscAmount(this.cashDiscCode(), this.currencyCode(), totalAmount, totalAmount - taxTotal, this.cashDiscPercent());
        }

        return totalCashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscPercent</Name>
				<Source><![CDATA[
    public DiscPct cashDiscPercent()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLineQueryRun</Name>
				<Source><![CDATA[
    protected TradeTotalsIQueryRun createLineQueryRun()
    {
        return TradeTotalsQueryRun::newFromQueryRun(this.queryBuild());
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditMax</Name>
				<Source><![CDATA[
    public AmountMST creditMax()
    {
        return VendTable::find(this.invoiceAccount()).CreditMax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the currency code of the record in the <c>Currency</c> table.
    /// </summary>
    /// <returns>
    ///    The currency code of the record in the <c>Currency</c> table.
    /// </returns>
    public CurrencyCode currencyCode()
    {
        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    public ExchRate exchRate()
    {
        return ExchangeRateHelper::exchRate(this.currencyCode(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    public ExchrateSecondary exchRateSecondary()
    {
        return ExchangeRateHelper::exchRateSecond(this.currencyCode(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAmountValue</Name>
				<Source><![CDATA[
    public AmountCur invoiceAmountValue()
    {
        return (conPeek(this.displayFields(), TradeTotals::posTotalAmount()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    protected TransDate invoiceDate()
    {
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceRoundOffValue</Name>
				<Source><![CDATA[
    public RoundOff invoiceRoundOffValue()
    {
        return (conPeek(this.displayFields(), TradeTotals::posRoundOff()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the item module type.
    /// </summary>
    /// <returns>
    /// The item module type for the order.
    /// </returns>
    protected ModuleInventPurchSales itemModuleType()
    {
        return ModuleInventPurchSales::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineCostPrice</Name>
				<Source><![CDATA[
    protected CostPrice lineCostPrice()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDiscValue</Name>
				<Source><![CDATA[
    public PurchSumLineDiscAmount lineDiscValue()
    {
        return (conPeek(this.displayFields(), TradeTotals::posLineDisc()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQueryRunGet</Name>
				<Source><![CDATA[
    protected Common lineQueryRunGet(
        TradeTotalsIQueryRun    _lineQueryRun)
    {
        TradeTotalsQueryRun lineQueryRun = _lineQueryRun as TradeTotalsQueryRun;
        return this.queryGet(lineQueryRun.parmQueryRun());
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQueryRunNext</Name>
				<Source><![CDATA[
    protected boolean lineQueryRunNext(
        TradeTotalsIQueryRun    _lineQueryRun)
    {
        TradeTotalsQueryRun lineQueryRun = _lineQueryRun as TradeTotalsQueryRun;
        return this.nextLine(lineQueryRun.parmQueryRun());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(Common _orderTable, PurchUpdate _specQty = PurchUpdate::All)
    {
        super(_orderTable);

        specQty = _specQty;

        if (SystemParameters::find(false).SystemCurrencyCode)
        {
            this.setCurrencyCode(SystemParameters::find(false).SystemCurrencyCode);
        }
        else
        {
            this.setCurrencyCode(PurchReqLine::findLine(_orderTable.RecId,1).CurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    protected boolean nextLine(
        QueryRun    _queryRun)
    {
        return _queryRun.next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyRemain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the quantity that remains in catch weight units.
    /// </summary>
    /// <returns>
    /// The quantity that remains in catch weight units.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// This method is not implemented in a derived class.
    /// </exception>
    protected PdsCWInventQty pdsCWQtyRemain()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the order line quantity in catch weight units.
    /// </summary>
    /// <returns>
    /// The order line quantity in catch weight units.
    /// </returns>
    protected PdsCWInventQty pdsCWQtyUnit()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyInvent</Name>
				<Source><![CDATA[
    protected InventQty qtyInvent()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyInventRemain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the quantity that remains in inventory units.
    /// </summary>
    /// <returns>
    /// The quantity that remains in inventory units.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The method is not implemented in a derived class.
    /// </exception>
    protected InventQty qtyInventRemain()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    abstract protected QueryRun  queryBuild()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGet</Name>
				<Source><![CDATA[
    abstract protected Common  queryGet(
        QueryRun    _transact)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundOff</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the round off amount for purchase.
    /// </summary>
    /// <param name="_currencyCode">
    ///    The <c>CurrencyCode</c> field for the current order line.
    /// </param>
    /// <returns>
    ///    The <c>RoundOff</c> field defined for purchase in the <c>Currency</c> table.
    /// </returns>
    protected RoundOff roundOff(CurrencyCode _currencyCode)
    {
        return Currency::roundOffPurch(_currencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundOffType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the rounding form for purchase.
    /// </summary>
    /// <param name="_currencyCode">
    /// The <c>CurrencyCode</c> field for the current order line.
    /// </param>
    /// <returns>
    /// The <c>RoundOffType</c> field defined for purchase on the <c>Currency</c> table.
    /// </returns>
    protected RoundOffType roundOffType(CurrencyCode _currencyCode)
    {
        return Currency::roundOffTypePurch(_currencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Assigns a specific currency code.
    /// </summary>
    /// <param name="_targetCurrencyCode">
    ///     The currency code of a record in the <c>Currency</c> table.
    /// </param>
    public void setCurrencyCode(CurrencyCode _targetCurrencyCode)
    {
        currencyCode = _targetCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceLineRecId</Name>
				<Source><![CDATA[
    protected recId sourceLineRecId()
    {
        return orderLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumLines</Name>
				<Source><![CDATA[
    public AmountCur sumLines()
    {
        return (conPeek(this.displayFields(), TradeTotals::posBalance()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumMarkUpValue</Name>
				<Source><![CDATA[
    public MarkupSumPurch sumMarkUpValue()
    {
        return (conPeek(this.displayFields(), TradeTotals::posMarkup()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumTaxValue</Name>
				<Source><![CDATA[
    public TaxAmountCur sumTaxValue()
    {
        return (conPeek(this.displayFields(), TradeTotals::posTaxTotal()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    public EUROTriangulation triangulation()
    {
        return Currency::triangulation(this.currencyCode(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchReqTotals construct(Common _orderTable, PurchUpdate   _specQty   = PurchUpdate::All)
    {
        if (_orderTable.TableId == tableNum(PurchReqTable))
        {
            return  PurchReqTotals_Trans::construct(_orderTable, _specQty);
        }
        else
        {
            throw(error(strFmt("@SYS19306", funcName())));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMarkupTax</Name>
				<Source><![CDATA[
    public void setMarkupTax(Markup _markup)
    {

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>