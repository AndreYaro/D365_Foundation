<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayTblEmplSum</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class for resulting information about employee worked hours recalculations.
/// </summary>
final class RPayTblEmplSum extends RunBase
{
     QueryRun          queryRun;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
        public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
        public Object dialog()
    {
        Dialog ret;

        ret = super() as Dialog;

        ret.caption("@RUP1112");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new()
    {
        Query  query = new Query("@RUP1112");

        super();

        query.addDataSource(tablenum(RHRMEmplTable));

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
        public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculate</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void recalculate(ReportPeriod_RU _payPeriod)
    {
        RHRMEmplTable emplTable;

        while (queryRun.next())
        {
            emplTable = queryRun.get(tablenum(RHRMEmplTable));
            if (emplTable.checkEmplBeforeCalc(_payPeriod))
            {
                RPayTblEmplSum::calculateEmpl(emplTable.EmployeeId,
                                              _payPeriod,RPayEmplTblSum::payCalendarId(emplTable.EmployeeId, _payPeriod));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
        public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container _packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateEmpl</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static void calculateEmpl(RHRMEmplId _emplId, ReportPeriod_RU _payPeriod, RPayCalendarId _calendarId)
    {
        RPayTblEmplSum::updateScheduleTime(_emplId, _payPeriod, _calendarId);
        RPayTblEmplSum::updateFactTime(_emplId, _payPeriod, _calendarId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOrUpdate</Name>
				<Source><![CDATA[
        #RpayTblConstants
    #RpayModuleName
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void deleteOrUpdate(RPayTblTrans _payTblTrans)
    {
        RPayEmplTblSum          rPayEmplTblSum;
        RPayTblTimeTable        rPayTblTimeTable;
        RPayCalendarTimeTrans   timeTrans;

        ttsbegin;

        while select PayTblTimeCode from rPayTblTimeTable
            where rPayTblTimeTable.PayFormType == RPayTblJournal::find(_payTblTrans.PayTblNum).PayFormType
        {
            rPayEmplTblSum = RPayEmplTblSum::find(_payTblTrans.SourceDate,
                                                  _payTblTrans.EmplId,
                                                  _payTblTrans.PayCalendarId,
                                                  rPayTblTimeTable.PayTblTimeCode,
                                                  true);
            if (rPayEmplTblSum)
            {
                timeTrans = RPayCalendarTimeTrans::findByTimeCode(_payTblTrans.RecId, rPayTblTimeTable.PayTblTimeCode);
                rPayEmplTblSum.DayFact  -= timeTrans.Day;
                rPayEmplTblSum.HourFact -= timeTrans.Hour;

                if (rPayEmplTblSum.DayFact || rPayEmplTblSum.HourFact)
                {
                    rPayEmplTblSum.update();
                }
                else
                {
                    rPayEmplTblSum.delete();
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpSumTable</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static TmpRPayTimeGroupSum initTmpSumTable(RHRMEmplId _emplId, ReportPeriod_RU _payPeriod)
    {
        TmpRPayTimeGroupSum     tmpRPayTimeGroupSum;
        RPayEmplTblSum          rPayEmplTblSum;
        RPayTimeGroupMember     rPayTimeGroupMember;

        ttsbegin;

        while select DayFact,HourFact,TimeCode, DaySchedule, HourSchedule from rPayEmplTblSum
                  where rPayEmplTblSum.EmplId    == _emplId &&
                        rPayEmplTblSum.PayPeriod == _payPeriod
              join TimeGroup from rPayTimeGroupMember
                  where rPayTimeGroupMember.PayCalendarTimeCode == rPayEmplTblSum.TimeCode
        {
            tmpRPayTimeGroupSum.clear();
            tmpRPayTimeGroupSum.EmplId              = _emplId;
            tmpRPayTimeGroupSum.TimeGroup           = rPayTimeGroupMember.TimeGroup;

            tmpRPayTimeGroupSum.Day                 = rPayEmplTblSum.DayFact;
            tmpRPayTimeGroupSum.Hour                = rPayEmplTblSum.HourFact;

            tmpRPayTimeGroupSum.DayShedule          = rPayEmplTblSum.DaySchedule;
            tmpRPayTimeGroupSum.HourShedule         = rPayEmplTblSum.HourSchedule;

            tmpRPayTimeGroupSum.PayCalendarTimeCode = rPayEmplTblSum.TimeCode;
            tmpRPayTimeGroupSum.TransDate           = _payPeriod;
            tmpRPayTimeGroupSum.insert();
        }

        ttscommit;

        return tmpRPayTimeGroupSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEmplTblSumReversed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if employee sum is reserved.
    /// </summary>
    /// <param name="_emplTblSum">
    /// The resulting information about employee worked hours table record.
    /// </param>
    /// <returns>
    /// True if sum is reserved.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected static boolean isEmplTblSumReversed(RPayEmplTblSum _emplTblSum)
    {
        RPayTblTrans            tblTrans;
        RPayCalendarTimeTrans   timeTrans;

        select firstOnly RecId from tblTrans
            where tblTrans.EmplId              == _emplTblSum.EmplId        &&
                    tblTrans.CorrectedPeriod   == _emplTblSum.PayPeriod     &&
                    tblTrans.PayCalendarId     == _emplTblSum.PayCalendarId
                exists join timeTrans
                where timeTrans.TblTransRecId == tblTrans.RecId
                   && timeTrans.PayCalendarTimeCode == _emplTblSum.TimeCode;

        return tblTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFactTime</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static void updateFactTime(RHRMEmplId      _emplId,
                                      ReportPeriod_RU _payPeriod,
                                      RPayCalendarId  _calendarId)
    {
        RPayEmplTblSum        payEmplTblSum;
        RpayCalendarTimeTable rpayCalendarTimeTable;
        RPayDayHour           work_days = 0;
        RPayDayHour           work_hours = 0;

        void updateEmplTblSum(RPayCalendarTimeCode _calendarTimeCode)
        {
            payEmplTblSum = RPayEmplTblSum::find(_payPeriod,
                                                 _emplId,
                                                 _calendarId,
                                                 _calendarTimeCode,
                                                 true);
            if (payEmplTblSum)
            {
                payEmplTblSum.DayFact   = work_days;
                payEmplTblSum.HourFact  = work_hours;
                if (payEmplTblSum.DaySchedule || payEmplTblSum.HourSchedule ||
                    payEmplTblSum.DayFact    || payEmplTblSum.HourFact ||
                    RPayTblEmplSum::isEmplTblSumReversed(payEmplTblSum))
                {
                    payEmplTblSum.update();
                }
                else
                {
                    payEmplTblSum.delete();
                }
            }
            else if (work_hours || work_days)
            {
                payEmplTblSum.clear();
                payEmplTblSum.EmplId         = _emplId;
                payEmplTblSum.PayPeriod      = _payPeriod;
                payEmplTblSum.TimeCode       = _calendarTimeCode;
                payEmplTblSum.PayCalendarId  = _calendarId;
                payEmplTblSum.DayFact        = work_days;
                payEmplTblSum.HourFact       = work_hours;
                payEmplTblSum.insert();
            }
        }
        ;

        ttsbegin;

        while select PayCalendarTimeCode from rpayCalendarTimeTable
        {
            work_days  = RPayTblTrans::realDayHour(_payPeriod,
                                                   _emplId,
                                                   RPayDayHourCalc::Day,
                                                   rpayCalendarTimeTable.PayCalendarTimeCode,
                                                   _calendarId);

            work_hours = RPayTblTrans::realDayHour(_payPeriod,
                                                   _emplId,
                                                   RPayDayHourCalc::Hour,
                                                   rpayCalendarTimeTable.PayCalendarTimeCode,
                                                   _calendarId);

            updateEmplTblSum(rpayCalendarTimeTable.PayCalendarTimeCode);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateScheduleTime</Name>
				<Source><![CDATA[
        #timeConstants
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void updateScheduleTime(RHRMEmplId      _emplId,
                                          ReportPeriod_RU _payPeriod,
                                          RPayCalendarId  _calendarId)
    {
        RPayCalendarDateLine  rPayCalendarDateLine;
        RPayEmplTblSum        payEmplTblSum;
        RPayEmplTblSum        rPayEmplTblSum;
        RPayCalendarTimeCode  payCalendarTimeCode = '';

        RPayDayHour           schedule_days = 0;
        RPayDayHour           schedule_hours = 0;
        RPayDayHour           tmp_hour = 0;
        TransDate             currentDate = dateNull();

        void updateEmplTblSum(RPayCalendarTimeCode _calendarTimeCode, RPayCalendarId _payCalendarId)
        {
            RPayTblTimeTypeCalc rPayTblTimeTypeCalc = RpayCalendarTimeTable::find(_calendarTimeCode).PayTblTimeTypeCalc;

            payEmplTblSum = RPayEmplTblSum::find(_payPeriod,
                                                 _emplId,
                                                 _payCalendarId,
                                                 _calendarTimeCode,
                                                 true);
            if (payEmplTblSum)
            {
                payEmplTblSum.DaySchedule   = (rPayTblTimeTypeCalc == RPayTblTimeTypeCalc::Both ||
                                               rPayTblTimeTypeCalc == RPayTblTimeTypeCalc::Days) ?
                                               schedule_days : 0;

                payEmplTblSum.HourSchedule  = schedule_hours;
                if (payEmplTblSum.DaySchedule || payEmplTblSum.HourSchedule ||
                    payEmplTblSum.DayFact    || payEmplTblSum.HourFact ||
                    RPayTblEmplSum::isEmplTblSumReversed(payEmplTblSum))
                {
                    payEmplTblSum.update();
                }
                else
                {
                    payEmplTblSum.delete();
                }
            }
            else if (schedule_hours || schedule_days)
            {
                payEmplTblSum.clear();
                payEmplTblSum.EmplId         = _emplId;
                payEmplTblSum.PayPeriod      = _payPeriod;
                payEmplTblSum.TimeCode       = _calendarTimeCode;
                payEmplTblSum.PayCalendarId  = _payCalendarId;
                payEmplTblSum.DaySchedule    = (rPayTblTimeTypeCalc == RPayTblTimeTypeCalc::Both ||
                                                rPayTblTimeTypeCalc == RPayTblTimeTypeCalc::Days) ?
                                                schedule_days : 0;
                payEmplTblSum.HourSchedule   = schedule_hours;
                payEmplTblSum.insert();
            }
        }
        ;

        ttsbegin;

        while select rPayCalendarDateLine order by PayCalendarTimeCode, TransDate
            where rPayCalendarDateLine.CalendarId == _calendarId
        {
            if (endmth(rPayCalendarDateLine.TransDate) != _payPeriod)
            {
                continue;
            }

            if (payCalendarTimeCode == rPayCalendarDateLine.PayCalendarTimeCode)
            {
                schedule_hours += rPayCalendarDateLine.capacity() / #SecondsPerHour;
                if (currentDate != rPayCalendarDateLine.TransDate)
                {
                    schedule_days += RPayCalendarTable::hoursToDay(tmp_hour);
                    tmp_hour      = 0;
                    currentDate   = rPayCalendarDateLine.TransDate;
                }
                tmp_hour += rPayCalendarDateLine.capacity() / #SecondsPerHour;
            }
            else
            {
                schedule_days += RPayCalendarTable::hoursToDay(tmp_hour);
                if (schedule_hours)
                {
                    updateEmplTblSum(payCalendarTimeCode, _calendarId);
                }
                schedule_hours  = rPayCalendarDateLine.capacity() / #SecondsPerHour;
                tmp_hour        = rPayCalendarDateLine.capacity() / #SecondsPerHour;
                schedule_days   = 0;

                payCalendarTimeCode = rPayCalendarDateLine.PayCalendarTimeCode;
                currentDate         = rPayCalendarDateLine.TransDate;
            }
        }
        if (schedule_hours)
        {
            schedule_days += RPayCalendarTable::hoursToDay(tmp_hour);
            updateEmplTblSum(payCalendarTimeCode, _calendarId);
        }

        while select TimeCode from rPayEmplTblSum
            where rPayEmplTblSum.PayCalendarId != _calendarId &&
                  rPayEmplTblSum.EmplId        == _emplId     &&
                  rPayEmplTblSum.PayPeriod     == _payPeriod
        {
            schedule_days  = 0;
            schedule_hours = 0;
            updateEmplTblSum(rPayEmplTblSum.TimeCode, rPayEmplTblSum.PayCalendarId);
        }

        while select TimeCode from rPayEmplTblSum
                  where rPayEmplTblSum.PayCalendarId == _calendarId &&
                        rPayEmplTblSum.EmplId        == _emplId     &&
                        rPayEmplTblSum.PayPeriod     == _payPeriod
              notexists join rPayCalendarDateLine
                  where rPayCalendarDateLine.PayCalendarTimeCode == rPayEmplTblSum.TimeCode &&
                        rPayCalendarDateLine.CalendarId          == rPayEmplTblSum.PayCalendarId
        {
            schedule_days  = 0;
            schedule_hours = 0;
            updateEmplTblSum(rPayEmplTblSum.TimeCode, _calendarId);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>