<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AdvancedLedgerEntryCopy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>AdvancedLedgerEntryCopy</c> class handles the copy functionality for the Advanced Ledger Entry.
/// </summary>
public class AdvancedLedgerEntryCopy extends RunBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyAdvancedLedgerEntry</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a copy of advanced ledger entry.
    /// </summary>
    /// <param name="_source">
    ///     A record of the <c>AdvancedLedgerEntryHeader</c> table.
    /// </param>
    /// <returns>
    ///     A new record of the <c>AdvancedLedgerEntryHeader</c> table, created by copying field values
    ///     from the <paramref name="_source"/> parameter, against a new Advanced ledger entry transaction number.
    /// </returns>
    private AdvancedLedgerEntryHeader copyAdvancedLedgerEntry(AdvancedLedgerEntryHeader _source)
    {
        AdvancedLedgerEntryManager manager = AdvancedLedgerEntryManager::construct();
        return manager.copyAdvancedLedgerEntry(_source);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openAdvancedLedgerEntryForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Opens an instance of Advanced ledger entry form.
    /// </summary>
    /// <param name="_args">
    ///     Holds arguments needed to open the form.
    /// </param>
    private void openAdvancedLedgerEntryForm(Args _args)
    {
        MenuFunction menuFunction;

        menuFunction = new MenuFunction(menuitemDisplayStr(AdvancedLedgerEntry), MenuItemType::Display);
        menuFunction.run(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs a new instance of the class using the default constructor.
    /// </summary>
    /// <returns>
    ///     A new instance of the <c>AdvancedLedgerEntryCopy</c> class.
    /// </returns>
    public static AdvancedLedgerEntryCopy construct()
    {
        // Create a new instance and return.
        return new AdvancedLedgerEntryCopy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        AdvancedLedgerEntryCopy   advancedLedgerEntryCopy;
        AdvancedLedgerEntryHeader source;
        AdvancedLedgerEntryHeader targetHeader;

        if (!_args)
        {
            throw error(strFmt("@SPS1272", funcName()));
        }

        source = _args.record() as AdvancedLedgerEntryHeader;
        advancedLedgerEntryCopy = AdvancedLedgerEntryCopy::construct();

        targetHeader = advancedLedgerEntryCopy.copyAdvancedLedgerEntry(source);

        if (_args.caller() && (_args.caller().name() == formStr(AdvancedLedgerEntry)))
        {
            _args.record(targetHeader);
            advancedLedgerEntryCopy.openAdvancedLedgerEntryForm(_args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>