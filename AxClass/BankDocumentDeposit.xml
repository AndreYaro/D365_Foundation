<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankDocumentDeposit</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>BankDocumentDeposit</c> class is the business class of bank document for deposit.
/// </summary>
[BankDocumentAttribute(BankDocumentBookType::DepositSlip)]
class BankDocumentDeposit extends BankDocument
implements BankDocumentIStateChangeEventHandler
{
    BankDepositDocument bankDepositDocument;

    AccountNum          relatedCustAccount;
    CompanyId           relatedCustCompany;

    #define.FromSingleCustAccount(1)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bankDocumentStateChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the event of bank document state change.
    /// </summary>
    /// <param name="_bankDocumentState">
    /// The bank document state.
    /// </param>
    public void bankDocumentStateChanged(BankDocumentState _bankDocumentState)
    {
        this.processBankAccountTransReconcileStatus(_bankDocumentState.parmBankDocumentStatusChangeType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCurrencyCode</Name>
				<Source><![CDATA[
        public CurrencyCode getBankCurrencyCode()
    {
        return bankDepositDocument.BankCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankTransType</Name>
				<Source><![CDATA[
        public BankTransactionType getBankTransType()
    {
        return bankDepositDocument.BankTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
        public TransTxt getDescription()
    {
        return bankDepositDocument.Txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentNum</Name>
				<Source><![CDATA[
        public Num getDocumentNum()
    {
        return bankDepositDocument.DepositNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentType</Name>
				<Source><![CDATA[
        public BankDocumentBookType getDocumentType()
    {
        return BankDocumentBookType::DepositSlip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrignalBankDocumentStatusName</Name>
				<Source><![CDATA[
        public BankDocumentOrigDocumentStatus getOrignalBankDocumentStatusName()
    {
        return "@SYS107952";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReference</Name>
				<Source><![CDATA[
        public PaymReference getReference()
    {
        return bankDepositDocument.PaymReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelatedPartyAccount</Name>
				<Source><![CDATA[
        public AccountNum getRelatedPartyAccount()
    {
        return relatedCustAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelatedPartyCompany</Name>
				<Source><![CDATA[
        public CompanyId getRelatedPartyCompany()
    {
        return relatedCustCompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelatedPartyType</Name>
				<Source><![CDATA[
        public BankReconciliationRelatedPartyType getRelatedPartyType()
    {
        if (relatedCustAccount)
        {
            return DirPartyRoleType::Customer;
        }

        return DirPartyRoleType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCurrency</Name>
				<Source><![CDATA[
        public CurrencyCode getTransactionCurrency()
    {
        return bankDepositDocument.TransactionCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCurrencyAmount</Name>
				<Source><![CDATA[
        public AmountCur getTransactionCurrencyAmount()
    {
        return bankDepositDocument.TransactionCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionDate</Name>
				<Source><![CDATA[
        public TransDate getTransactionDate()
    {
        return bankDepositDocument.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadSourceBuffer</Name>
				<Source><![CDATA[
        protected void loadSourceBuffer()
    {
        BankDeposit         bankDepositDetailsSummary;
        Counter             depositGroupCount;

        bankDepositDocument = documentMap;

        //Gets the realted party account only if the the deposit lines are from same cust account
        while select CustAccount, RefCompany from bankDepositDetailsSummary
            group by CustAccount, RefCompany
            where bankDepositDetailsSummary.BankDepositDocument == bankDepositDocument.RecId
        {
            depositGroupCount++;
            if (depositGroupCount > #FromSingleCustAccount)
            {
                break;
            }
            relatedCustAccount = bankDepositDetailsSummary.CustAccount;
            relatedCustCompany = bankDepositDetailsSummary.RefCompany;
        }

        if (depositGroupCount != #FromSingleCustAccount)
        {
            relatedCustAccount = '';
            relatedCustCompany = '';
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>