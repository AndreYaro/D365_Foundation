<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntgrImport_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;
/// <summary>
/// The <c>TaxIntgrImport_CN</c> class is used for tax import invoice and tax integration.
/// </summary>
public class TaxIntgrImport_CN extends RunBaseBatch implements BatchRetryable
{
    DialogRunbase   dialog;

    FileUploadBuild                         dialogImportFileUpload;
    DialogField                             dialogImportModelMappingId;
    DialogField                             dialogTaxProfileId;
    DialogField                             dialogIntegrationPointSwitcher;
    NoYes                                   integrationPointSwitcher;
    TaxProfileId_CN                         taxProfileId;
    Filename                                uploadFileName;
    str                                     uploadFileURL;
    SharedServiceUnitFileID                 uploadFileID;
    ERModelMappingId                        importModelMapping;

    private const str IntegrationPoint1 = classStr(ERTableDestination) + '#' + tableStr(TaxIntgrExportDocumentConfirmEnity);
    private const str IntegrationPoint2 = classStr(ERTableDestination) + '#' + tableStr(TaxIntgrExportDocument_CN);

    const str fileUploadControlLabel = "@GLS221360";
    const str zipFileSuffix = 'zip';
    const str txtFileSuffix = 'txt';
    const str OkButtonName = 'OkButton';

    #define.CurrentVersion(3)
    #localmacro.CurrentList
        importModelMapping,
        integrationPointSwitcher
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        dialog = super();

        FormBuildControl formBuildControl;
        DialogGroup dialogGroup;

        // Tax integration import
        dialog.caption("@GLS60748");

        // Import
        dialogGroup = dialog.addGroup("@SYS54759");
        formBuildControl = dialog.formBuildDesign().control(dialogGroup.name());

        dialogIntegrationPointSwitcher = dialog.addFieldValue(enumStr(NoYes), integrationPointSwitcher, "@TaxIntgr:TaxIntgrPointForBaiWongImport");
        dialogImportModelMappingId = dialog.addFieldValue(extendedTypeStr(ERModelMappingId), importModelMapping);
        dialogImportModelMappingId.control().registerOverrideMethod(
            methodStr(FormReferenceControl, lookupReference),
            methodStr(TaxIntgrImport_CN, dialogImportModelMappingId_lookup),
            this);

        dialogImportFileUpload = formBuildControl.addControlEx(classstr(FileUpload), fileUploadControlLabel);
        // Select a file to upload.
        dialogImportFileUpload.fileNameLabel("@SYS308842");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogImportModelMappingId_lookup</Name>
				<Source><![CDATA[
    private Common dialogImportModelMappingId_lookup(FormReferenceControl _formControl)
    {
        return ERModelMappingTable::lookup(_formControl, dialogIntegrationPointSwitcher.value() ? IntegrationPoint1 : IntegrationPoint2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        integrationPointSwitcher = dialogIntegrationPointSwitcher.value();
        importModelMapping = dialogImportModelMappingId.value();

        FileUpload fileUploadControl = this.getFormControl(dialog, fileUploadControlLabel);
        FileUploadTemporaryStorageResult fileUploadResult = fileUploadControl.getFileUploadResult();
        if (fileUploadResult != null && fileUploadResult.getUploadStatus())
        {
            uploadFileURL = fileUploadResult.getDownloadUrl();
            uploadFileName = fileUploadResult.getFileName();
            uploadFileID = fileUploadResult.getFileId();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get form control instance of dialog control.
    /// </summary>
    /// <param name = "_dialog">current dialog.</param>
    /// <param name = "_controlName">name of the control.</param>
    /// <returns>form control instance of the given dialog control.</returns>
    protected FormControl getFormControl(DialogRunbase _dialog, str _controlName)
    {
        return _dialog.formRun().control(_dialog.formRun().controlId( _controlName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>importTaxInvoices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Import tax invoices.
    /// </summary>
    protected void importTaxInvoices()
    {
        List importFiles;
        SharedServiceUnitFileID taxIntegrationToImportFileId;
        str importFileName;

        if (strEndsWith(uploadFileName, zipFileSuffix))
        {
            container txtFileSuffixes = [txtFileSuffix];
            importFiles = DataFileImportExportUtils_W::getUnzippedFiles(uploadFileURL, txtFileSuffixes);
        }
        else
        {
            importFiles = new List(Types::Container);
            importFiles.addEnd([uploadFileID, uploadFileName]);
        }

        ListEnumerator importFileEnumerators = importFiles.getEnumerator();

        while (importFileEnumerators.moveNext())
        {
            [taxIntegrationToImportFileId, importFileName] = importFileEnumerators.current();

            this.runER(taxIntegrationToImportFileId, importFileName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runER</Name>
				<Source><![CDATA[
    private void runER(SharedServiceUnitFileID _uploadedResponse, str _responseFileName)
    {
        ERmodelDefinitionInputParametersAction inputParameters = new ERmodelDefinitionInputParametersAction();
        inputParameters.addParameter('$FileName', _responseFileName);

        ERIModelMappingDestinationRun runner = ERObjectsFactory::createMappingDestinationRunByImportFormatMappingId(importModelMapping, integrationPointSwitcher ? IntegrationPoint1 : IntegrationPoint2);
        runner.withParameter(inputParameters);
        runner.init();

        ERModelDefinitionParameters parameters = runner.getParameters();
        ERModelDefinitionParametersTraverser traverser = new ERModelDefinitionParametersTraverser(parameters);

        while (traverser.moveNext())
        {
            ERIImportFormatDataSourceContract current = ERCast::asAny(traverser.current()) as ERIImportFormatDataSourceContract;
            if (current)
            {
                current.parmInputDataStream(File::UseFileFromURL(DMFStagingWriter::getDownloadURLFromFileId(_uploadedResponse)));
                break;
            }
        }

        runner.runUnattended();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean     ret;

        ret = super(calledFrom);

        if (ret && !importModelMapping)
        {
            ret = checkFailed("@TaxIntgr:ImportFormatIsNotSpecified");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.importTaxInvoices();
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// After the file has been uploaded, the Ok button is enabled.
    /// </summary>
    protected void uploadCompleted()
    {
        FileUpload fileUpload = this.getFormControl(dialog, fileUploadControlLabel);
        fileUpload.notifyUploadCompleted -= eventhandler(this.UploadCompleted);

        this.setDialogOkButtonEnabled(dialog, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDialogOkButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the dialog Ok button.
    /// </summary>
    /// <param name = "_dialog">The <c>Runbase</c> dialog object.</param>
    /// <param name = "_isEnabled">Indicates to enable or disable the Ok button.</param>
    protected void setDialogOkButtonEnabled(DialogRunbase _dialog, boolean _isEnabled)
    {
        FormControl okButtonControl = this.getFormControl(_dialog, OkButtonName);

        if (okButtonControl)
        {
            okButtonControl.enabled(_isEnabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase _dialog)
    {
        FileUpload fileUpload = this.getFormControl(_dialog, fileUploadControlLabel);
        fileUpload.notifyUploadCompleted += eventhandler(this.uploadCompleted);
        this.setDialogOkButtonEnabled(_dialog, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        if (!CustParameters::isTaxIntegrationSystem_CN())
        {
            // This form cannot be activitated unless the paratmeter '%1' is checked.
            warning(strfmt("@GLS54626", fieldid2pname(tablenum(CustParameters), fieldnum(CustParameters, TaxIntegrationSystem_CN))));
            return;
        }

        TaxIntgrImport_CN import = new TaxIntgrImport_CN();

        if (import.prompt())
        {
            import.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>