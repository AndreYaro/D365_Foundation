<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjFormLetter_invoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjFormLetter_invoice extends ProjFormLetter implements BatchRetryable
{
    Markup              markup;
    ProjTrans           ledgerProjTrans;
    LedgerAccount       account;
    LedgerAccount       offsetAccount;
    LedgerPostingType   ledgerPostingType;
    AmountMST           ledgerAmountMST;

    LedgerVoucher       ledgerVoucherSMA;
    TransactionTxt      transactionTxtSMA;
    Voucher             voucherSMA;

    SalesFormLetter_InvoiceProject     salesFormLetter;
    ProjProposalJour    tProjProposalJour;

    #ISOCountryRegionCodes
    #define.CurrentVersion(12)
    #LOCALMACRO.ParmList
        ParmId,
        proforma,
        CreditRemaining,
        QueryCriteria,
        Editing,
        PrintOut,
        PrintFormletter,
        PrinterSettingsFormLetter,
        readyForInvoicing,
        usePrintManagement,
        projInvoiceTable,
        currency,
        orderAccount,
        invoiceAccount,
        datasourceRecordsPacked,
        formletterProformaPrintPacked,
        batchJobId,
        isBillingRule,
        isRelease,
        isManaged,
        batchGroupId
    //<GEEU>
        ,parmProjProposalJour
        ,ltDocNumberingCode
    //</GEEU>
        ,storno
        ,checkCreditMax
        ,lateSelection
        ,lateSelectionQuery
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowSaveLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the <c>RunBaseBatch</c> implementation
    /// </summary>
    /// <returns>
    /// <c>RunBaseBatch</c> that returns true which allows to save the last values
    /// </returns>
    public boolean allowSaveLast()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canMultiThread</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether multithreading should be enabled.
    /// </summary>
    /// <returns>
    /// true if the posting can be multithreaded; otherwise, false.
    /// </returns>
    /// <remarks>
    /// When the Italian sales tax book section functionality is enabled, multithreading is not possible
    /// because invoices are not able to be posted in parallel.
    /// </remarks>
    public boolean canMultiThread()
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]))
        {
            return false;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkClientOutput</Name>
				<Source><![CDATA[
    protected boolean checkClientOutput()
    {
        return FormLetter::isClientOutput(printerSettingsFormletter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteProforma</Name>
				<Source><![CDATA[
    private void deleteProforma()
    {
        if (projInvoiceJour.isProforma())
        {
            projInvoiceJour.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus documentStatus()
    {
        return DocumentStatus::Invoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journal</Name>
				<Source><![CDATA[
    public ProjInvoiceJour journal()
    {
        return projInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a record sorted list.
    /// </summary>
    /// <returns>
    /// The constructed record sorted list.
    /// </returns>
    public RecordSortedList newJournalList()
    {
        RecordSortedList recordSortedList;
        recordSortedList = new RecordSortedList(tableNum(ProjInvoiceJour));
        recordSortedList.sortOrderFromContainer(this.formLetterSorting(tableNum(ProjInvoiceJour), fieldNum(ProjInvoiceJour, RecId)));
        return recordSortedList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#ParmList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjProposalJour</Name>
				<Source><![CDATA[
    public ProjProposalJour parmProjProposalJour(ProjProposalJour _projProposalJour = tProjProposalJour)
    {
        tProjProposalJour = _projProposalJour;
        return tProjProposalJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printJournal</Name>
				<Source><![CDATA[
    public void printJournal(Set _journalList = null, boolean _blPrint = false)
    {
        SetEnumerator se = _journalList.getEnumerator();

        journalList = this.newJournalList();
        while (se.moveNext())
        {
            journalList.ins(se.current(),false);
        }

        if (printFormletter)
        {
            if (journalList && journalList.len() > 1)
            {
                this.projPrintFormLetter_GroupByInvoiceFormat(this, journalList, _blPrint);
            }
            else
            {
                ProjFormLetter_Invoice::projPrintFormLetter(projInvoiceJour, this, journalList, _blPrint);
            }

            this.sendAsXML();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projPrintFormLetter_GroupByInvoiceFormat</Name>
				<Source><![CDATA[
    protected void projPrintFormLetter_GroupByInvoiceFormat(ProjFormLetter _projFormLetter, RecordSortedList _journalList, boolean _blPrint)
    {
        Map invoicesGroupByInvoiceFormat = new Map(Types::Enum, typeOf(_journalList));
        
        ProjInvoiceJour projInvoiceJourLocal;
        boolean newLine = _journalList.first(projInvoiceJourLocal);

        // Group invoice list by invoice format
        while (newLine)
        {
            if (invoicesGroupByInvoiceFormat.exists(projInvoiceJourLocal.PSAInvoiceFormats))
            {
                RecordSortedList invoiceList = invoicesGroupByInvoiceFormat.lookup(projInvoiceJourLocal.PSAInvoiceFormats);
                invoiceList.ins(projInvoiceJourLocal);
            }
            else
            {
                RecordSortedList invoiceList = this.newJournalList();
                invoiceList.ins(projInvoiceJourLocal);
                invoicesGroupByInvoiceFormat.insert(projInvoiceJourLocal.PSAInvoiceFormats, invoiceList);
            }

            newLine = _journalList.next(projInvoiceJourLocal);
        }

        MapEnumerator me = invoicesGroupByInvoiceFormat.getEnumerator();
        while (me.moveNext())
        {
            // Print for each invoice format
            ProjFormLetter_Invoice::projPrintFormLetter(null, this, me.currentValue(), _blPrint);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMgmtDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies the print management document type.
    /// </summary>
    /// <returns>
    /// The print management document type for project invoice.
    /// </returns>
    protected PrintMgmtDocumentType printMgmtDocumentType()
    {
        return PrintMgmtDocumentType::ProjectInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMgmtNodeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies a print management node type.
    /// </summary>
    /// <returns>
    /// The print management node type.
    /// </returns>
    protected PrintMgmtNodeType printMgmtNodeType()
    {
        return PrintMgmtNodeType::Project;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeJournalFromList</Name>
				<Source><![CDATA[
    void removeJournalFromList()
    {
        journalList.del(projProposalJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendAsXML</Name>
				<Source><![CDATA[
    protected void sendAsXML()
    {
        boolean newLine;

        if (!this.proforma())
        {
            boolean isIT = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]);

            if (isIT || new SRSPrintDestinationSettings(printerSettingsFormletter).printMediumType() != SRSPrintMediumType::Screen
                || FeatureStateProvider::isFeatureEnabled(ForcedElectronicInvoicesGenerationFeature_W::instance()))
            {
                newLine = journalList.first(projInvoiceJour);
                while (newLine)
                {
                    if (isIT)
                    {
                        using (EInvoiceContext_IT eInvoiceContext = EInvoiceContext_IT::instance())
                        {
                            eInvoiceContext.parmCheckERDestinationExists(true);
                            EInvoice_IT::exportXMLToSharePoint(projInvoiceJour.RecId, tableNum(ProjInvoiceJour));
                        }
                    }
                    else
                    {
                        projInvoiceJour.sendElectronically(PrintCopyOriginal::Original, false);
                    }

                    newLine = journalList.next(projInvoiceJour);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogTxt</Name>
				<Source><![CDATA[
    protected TransTxt transactionLogTxt()
    {
        return "@SYS50149";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogType</Name>
				<Source><![CDATA[
    protected TransactionLogType transactionLogType()
    {
        return TransactionLogType::ProjInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version     = RunBase::getVersion(_packedClass);
        boolean     ret         = true;

        #LOCALMACRO.ParmList_v40
            ParmId,
            proforma,
            CreditRemaining,
            QueryCriteria,
            Editing,
            PrintOut,
            PrintFormletter,
            PrinterSettingsFormLetter,
            readyForInvoicing,
            usePrintManagement
        #ENDMACRO

        switch (version)
        {
            case #CurrentVersion :
                [version,#ParmList] = _packedClass;
                break;

            case 4 :
                [version, #ParmList_v40] = _packedClass;
                break;

            default :
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether to continue.
    /// </summary>
    /// <param name="_calledFrom">
    /// The object from which this method is called; optional.
    /// </param>
    /// <returns>
    /// true to continue; otherwise, false.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super(_calledFrom);

        // <GMX>
        if (EInvoiceCFDIParameters_MX::isElectronicInvoiceEnabled())
        {
            if (!CertificateHelper_MX::isCurrentCFDIPACPrivateKeyReadable() || !CertificateHelper_MX::isCurrentCFDIPrivateKeyReadable())
            {
                ret = checkFailed("@SYS341994");
            }

            if (!EInvoiceCFDIParameters_MX::schemaFileExists())
            {
                ret = checkFailed(strFmt("@SYS109820", EInvoiceCFDIParameters_MX::find().cfdiXsdFile));
            }
        }
        // </GMX>

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    private static ClassDescription description()
    {
        return "@SYS10619";
    }

]]></Source>
			</Method>
			<Method>
				<Name>projPrintFormLetter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the project form letter.
    /// </summary>
    /// <param name = "_projInvoiceJour">
    /// A <c>ProjInvoiceJour</c> table buffer.
    /// </param>
    /// <param name = "_projFormLetter">
    /// A <c>ProjFormLetter</c> instance; optional.
    /// </param>
    /// <param name = "_journalList">
    /// A record sorted list that contains the journals to be processed; optional.
    /// </param>
    /// <param name = "_blCheck">
    /// A boolean value; optional.
    /// </param>
    protected static void projPrintFormLetter(ProjInvoiceJour  _projInvoiceJour,
                                            ProjFormLetter   _projFormLetter   = null,
                                            RecordSortedList _journalList      = null,
                                            boolean          _blCheck          = false)
    {
        Args parameters = new Args();

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            ProjInvoiceJour projInvoiceJourLocal;

            if (_journalList.len() > 0)
            {
                _journalList.first(projInvoiceJourLocal);
            }
            else if (_projInvoiceJour.RecId)
            {
                projInvoiceJourLocal = _projInvoiceJour;
            }
            else
            {
                throw error("@SYS26348");
            }

            parameters.object(_journalList);
            parameters.caller(_projFormLetter);
            parameters.parmEnumType(enumNum(PrintCopyOriginal));
            parameters.parmEnum(PrintCopyOriginal::OriginalPrint);
            
            MenuFunction projInvoiceMenu = ProjFormLetter_Invoice::getProjInvoiceMenuFunction(_projInvoiceJour, projInvoiceJourLocal, _projFormLetter, _journalList, _blCheck);
            projInvoiceMenu.run(parameters);
        }
        else
        {
            parameters.caller(_projFormLetter);
            parameters.parmEnumType(enumNum(PrintCopyOriginal));
            parameters.parmEnum(PrintCopyOriginal::OriginalPrint);
            if (_journalList)
            {
                parameters.object(_journalList);
            }
            else
            {
                parameters.record(_projInvoiceJour);
            }
            //Calls the SSRS ProjInvoice report
            if (!_blCheck)
            {
                MenuFunction menuFunction = new MenuFunction(menuitemOutputStr(ProjInvoice), MenuItemType::Output);
                menuFunction.run(parameters);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjInvoiceMenuFunction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>MenuFunction</c> instance for the specified project invoice.
    /// </summary>
    /// <param name = "_projInvoiceJourOrig">
    /// A <c>ProjInvoiceJour</c> table buffer.
    /// </param>
    /// <param name = "_projInvoiceJourFound">
    /// A <c>ProjInvoiceJour</c> table buffer.
    /// </param>
    /// <param name = "_projFormLetter">
    /// A <c>ProjFormLetter</c> instance.
    /// </param>
    /// <param name = "_journalList">
    /// A record sorted list that contains the journals to be processed.
    /// </param>
    /// <param name = "_blCheck">
    /// A boolean value.
    /// </param>
    /// <returns>
    /// A <c>MenuFunction</c> instance.
    /// </returns>
    protected static MenuFunction getProjInvoiceMenuFunction(ProjInvoiceJour _projInvoiceJourOrig,
                                            ProjInvoiceJour _projInvoiceJourFound,
                                            ProjFormLetter   _projFormLetter,
                                            RecordSortedList _journalList,
                                            boolean          _blCheck)
    {
        MenuFunction projInvoiceMenu;

        if (_projInvoiceJourFound.psaInvoiceFormats == PSAInvoiceFormats::ManageInvoice)
        {
            projInvoiceMenu = new MenuFunction(menuitemOutputStr(PSAManageInvoice),MenuItemType::Output);
        }
        else if (_projFormLetter.isRelease())
        {
            projInvoiceMenu = new MenuFunction(menuitemOutputStr(PSACustRetentionReleaseInvoice),MenuItemType::Output);
        }
        else
        {
            switch (_projInvoiceJourFound.psaInvoiceFormats)
            {
                case PSAInvoiceFormats::SummaryByCategory :
                    projInvoiceMenu = new MenuFunction(menuitemOutputStr(PSAProjInvoice),MenuItemType::Output);
                    break;

                case PSAInvoiceFormats::DetailInvoice :
                case PSAInvoiceFormats::SummaryInvoice :
                     if (_projFormLetter.isBillingRule() 
                        && !ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled()
                        && PSAProjProposalProj::hasBillingRules(_projInvoiceJourFound.ProposalId))
                    {
                        projInvoiceMenu = new MenuFunction(menuitemOutputStr(PSAContractLineInvoice),MenuItemType::Output);
                    }
                    else
                    {
                        projInvoiceMenu = new MenuFunction(menuitemOutputStr(PSAProjInvoice),MenuItemType::Output);
                    }
                    break;

                default :
                    projInvoiceMenu = new MenuFunction(menuitemOutputStr(PSAProjInvoice),MenuItemType::Output);
                    break;
            }
        }

        return projInvoiceMenu;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaIndirectTransExist</Name>
				<Source><![CDATA[
    public static boolean psaIndirectTransExist(ProjInvoiceJour  _tProjInvoiceJour,
                                                       RecordSortedList _oJournalList = null)
    {
        ProjInvoiceJour             tProjInvoiceJour, tOldProjInvoiceJour;
        ProjInvoiceEmpl             tProjInvoiceEmpl;
        PSAIndirectComponentTrans   tTrans;
        boolean                     ret;

        if (!isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            return ret;
        }

        if (_oJournalList)
        {
            _oJournalList.first(tProjInvoiceJour);

            if (!tProjInvoiceJour)
            {
                throw error("@SYS26348");
            }

            tOldProjInvoiceJour.recordLevelSecurity(true);

            while (tProjInvoiceJour)
            {
                select firstonly tProjInvoiceEmpl
                        where tProjInvoiceEmpl.ProjInvoiceId == tProjInvoiceJour.ProjInvoiceId &&
                              tProjInvoiceEmpl.InvoiceDate == tProjInvoiceJour.InvoiceDate;
                if (!tProjInvoiceEmpl || tProjInvoiceEmpl.RecId == 0)
                {
                    ret = false;
                }
                else
                {
                    while select ProjInvoiceId, InvoiceDate, TransId from tProjInvoiceEmpl
                               where tProjInvoiceEmpl.ProjInvoiceId == tProjInvoiceJour.ProjInvoiceId &&
                                     tProjInvoiceEmpl.InvoiceDate == tProjInvoiceJour.InvoiceDate
                    {
                        tTrans = PSAIndirectComponentTrans::findByTransId(tProjInvoiceEmpl.TransId,
                                                                          PSAIndirectComponentType::Invoice);
                        if (tTrans.RecId != 0)
                        {
                            ret = true;
                            break;
                        }
                        else
                        {
                            ret = false;
                        }
                    }
                }
                if (ret == true)
                {
                    break;
                }
                if (!_oJournalList.next(tOldProjInvoiceJour))
                {
                    break;
                }
                else
                {
                    tProjInvoiceJour = tOldProjInvoiceJour.data();
                }
            }
        }
        else
        {
            tProjInvoiceJour = _tProjInvoiceJour.data();
            select firstonly ProjInvoiceId, InvoiceDate, RecId from tProjInvoiceEmpl
                        where tProjInvoiceEmpl.ProjInvoiceId == tProjInvoiceJour.ProjInvoiceId &&
                              tProjInvoiceEmpl.InvoiceDate == tProjInvoiceJour.InvoiceDate;
            if (!tProjInvoiceEmpl || tProjInvoiceEmpl.RecId == 0)
            {
                ret = false;
            }
            else
            {
                while select ProjInvoiceId, InvoiceDate, TransId from tProjInvoiceEmpl
                           where tProjInvoiceEmpl.ProjInvoiceId == tProjInvoiceJour.ProjInvoiceId &&
                                 tProjInvoiceEmpl.InvoiceDate == tProjInvoiceJour.InvoiceDate
                {
                    tTrans = PSAIndirectComponentTrans::findByTransId(tProjInvoiceEmpl.TransId,
                                                                      PSAIndirectComponentType::Invoice);
                    if (tTrans.RecId != 0)
                    {
                        ret = true;
                        break;
                    }
                    else
                    {
                        ret = false;
                    }
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renderingCompleted</Name>
				<Source><![CDATA[
    [SysObsoleteAttribute('Proforma clean-up is handled by the form letter framework', true , 27\04\2014)]
    static void renderingCompleted(SrsReportRunController _sender, SrsRenderingCompletedEventArgs _eventArgs)
    {
        // from the sender get the underyling SalesPackingSlipJournalPrint instance
        ProjFormLetter_Invoice callerInvoice = _sender.parmArgs().caller();
        callerInvoice.deleteProforma();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckCreditMax</Name>
				<Source><![CDATA[
    public TypeOfCreditmaxCheck parmCheckCreditMax(TypeOfCreditmaxCheck _checkCreditMax = checkCreditMax)
    {
        checkCreditMax = _checkCreditMax;
        return checkCreditMax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>