<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailGiftCardPostingParameters</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailGiftCardPostingParameters</c> class is used during statement posting to retrieve gift card related parameters and settings.
/// </summary>
class RetailGiftCardPostingParameters
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getGiftCardCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method finds the Gift card liabaility company
    /// </summary>
    /// <returns>
    /// Gift Card company
    /// </returns>
    public static DataAreaId getGiftCardCompany()
    {
        return RetailParameters::find().GiftCardCompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGiftCardLedgerJournalName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method finds the ledger journal name set on the RetailParameters
    /// </summary>
    /// <returns>
    /// ledger journal name
    /// </returns>
    public static str getGiftCardLedgerJournalName()
    {
        return RetailParameters::find().GiftCardLedgerJournalName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGiftcardPaymentAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method finds the main account number for the GiftCard payment for the store
    /// </summary>
    /// <param name="_storeNumber">
    /// store id
    /// </param>
    /// <returns>
    /// gift card payment account number
    /// </returns>
    public static LedgerDimensionDefaultAccount getGiftcardPaymentAccount(RetailStoreId _storeNumber)
    {
        return RetailGiftCardPostingParameters::getStoreGiftcardTenderType(_storeNumber).LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGiftcardPaymentAccountByChannel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method finds the main account number for the GiftCard payment for the channel.
    /// </summary>
    /// <param name="_channel">
    /// Retail Channel recid.
    /// </param>
    /// <returns>
    /// gift card payment account number.
    /// </returns>
    public static LedgerDimensionDefaultAccount getGiftcardPaymentAccountByChannel(RecId _channel)
    {
        return RetailGiftCardPostingParameters::getGiftcardTenderTypeByChannel(_channel).LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGiftcardTenderTypeByChannel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method finds the GiftCard tender type for the Call center.
    /// </summary>
    /// <param name="_channel">
    /// Retail Channel Table recid.
    /// </param>
    /// <returns>
    /// gift card tender type.
    /// </returns>
    public static RetailStoreTenderTypeTable getGiftcardTenderTypeByChannel(RecId _channel)
    {
        RetailChannelTable          retailChannelTable;
        RetailStoreTenderTypeTable  channelTenderTypeTable;

        select firstOnly RecId from retailChannelTable
            where retailChannelTable.RecId == _channel
            join channelTenderTypeTable
                where channelTenderTypeTable.Channel == retailChannelTable.RecId
                    && channelTenderTypeTable.posOperation == 214;     // Operation ID for gift card payment on POS.

        return channelTenderTypeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesOrderAccountNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method finds the main account number from the Items’ Item model groups’s Sales Order, Revenue account
    /// </summary>
    /// <param name="_company">
    /// DataAreaID of the Company to be retrieved.
    /// </param>
    /// <param name="defaultDimension">
    /// default dimension for the account.
    /// </param>
    /// <returns>
    /// Account number.
    /// </returns>
    /// <remarks>
    /// DimensionAttributeValueCombination is a global table so query needs to include the DataAreaID.
    /// </remarks>
    public static LedgerDimensionAccount getSalesOrderAccountNumber(DataAreaId _company, DimensionDefault defaultDimension = 0)
    {
        return RetailGiftCardPostingParameters::getSalesOrderAccountNumberForStatementId(_company, defaultDimension, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesOrderAccountNumberForStatementId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method finds the main account number from the Items’ Item model groups’s Sales Order, Revenue account
    /// </summary>
    /// <param name="_company">
    /// DataAreaID of the Company to be retrieved.
    /// </param>
    /// <param name="defaultDimension">
    /// default dimension for the account.
    /// </param>
    /// <param name="_statementId">
    /// The statement id.
	/// </param>
    /// <returns>
    /// Account number.
    /// </returns>
    /// <remarks>
    /// DimensionAttributeValueCombination is a global table so query needs to include the DataAreaID.
    /// </remarks>
    public static LedgerDimensionAccount getSalesOrderAccountNumberForStatementId(DataAreaId _company, DimensionDefault defaultDimension = 0, RetailStatementId _statementId = '')
    {
        LedgerDimensionAccount      soAccountNum;

        changeCompany(_company)
        {
            ItemId giftCardItem;
            if (_statementId)
            {
                giftCardItem = RetailEodStatementConfigurationAccessor::constructFromStatementId(_statementId).getGiftCardItem();
            }
            else
            {
                giftCardItem = RetailParameters::find().GiftcardItem;
            }
            RetailParameters            retailParameter;
            InventItemGroupItem         inventItemGroupItem;
            InventItemGroupForm         inventItemGroupForm;

            select ItemId, ItemDataAreaId from inventItemGroupItem
                    where inventItemGroupItem.ItemId == giftCardItem
                        && inventItemGroupItem.ItemDataAreaId == _company
                join LedgerDimension, ItemGroupId, LedgerDimensionGroup, InventAccountType, dataAreaId from inventItemGroupForm
                    where inventItemGroupForm.ItemGroupId == inventItemGroupItem.ItemGroupId
                        && inventItemGroupForm.LedgerDimensionGroup == ItemGroupLedgerDimensionGroup::Sales
                        && inventItemGroupForm.InventAccountType == InventAccountType::SalesRevenue
                        && inventItemGroupForm.dataAreaId == _company;

            soAccountNum = LedgerDimensionFacade::serviceCreateLedgerDimension(inventItemGroupForm.LedgerDimension, defaultDimension);
        }

        return soAccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInterCompanySalesPostingAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method finds the main account number for the GiftCard item for the store.
    /// </summary>
    /// <param name="_company">
    /// DataAreaID of the Company to be retrieved.
    /// </param>
    /// <param name="_storeNumber">
    /// Store id.
    /// </param>
    /// <param name="defaultDimension">
    /// default dimension for the account.
    /// </param>
    /// <returns>
    /// gift card offset account
    /// </returns>
    public static LedgerDimensionDefaultAccount getInterCompanySalesPostingAccount(DataAreaId _company, RetailStoreId _storeNumber, DimensionDefault defaultDimension = 0)
    {
        LedgerDimensionAccount ledgerDimensionGC, soAccountNum;

        ledgerDimensionGC = RetailGiftCardPostingParameters::getStoreGiftcardTenderType(_storeNumber).LedgerDimensionGiftCardCompany;

        changeCompany(_company)
        {
            soAccountNum = LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerDimensionGC, defaultDimension);
        }

        return soAccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesPostingAccountByChannel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method finds the main account number for the GiftCard item for the channel.
    /// </summary>
    /// <param name="_company">
    /// DataAreaID of the Company to be retrieved.
    /// </param>
    /// <param name="_channel">
    /// Retail Channel recId.
    /// </param>
    /// <param name="defaultDimension">
    /// default dimension for the account.
    /// </param>
    /// <returns>
    /// gift card offset account
    /// </returns>
    public static LedgerDimensionDefaultAccount getSalesPostingAccountByChannel(DataAreaId _company,  RecId _channel, DimensionDefault defaultDimension = 0)
    {
        LedgerDimensionAccount ledgerDimensionGC, soAccountNum;

        ledgerDimensionGC = RetailGiftCardPostingParameters::getGiftcardTenderTypeByChannel(_channel).LedgerDimensionGiftCardCompany;

        changeCompany(_company)
        {
            soAccountNum = LedgerDimensionFacade::serviceCreateLedgerDimension(
            ledgerDimensionGC,
            defaultDimension);
        }

        return soAccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStoreGiftcardTenderType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method finds the GiftCard tender type for the store
    /// </summary>
    /// <param name="_storeNumber">
    /// store id
    /// </param>
    /// <returns>
    /// gift card tender type
    /// </returns>
    public static RetailStoreTenderTypeTable getStoreGiftcardTenderType(RetailStoreId _storeNumber)
    {
        RetailStoreTable            retailStoreTable;
        RetailStoreTenderTypeTable  storeTenderTypeTable;

        select firstOnly RecId from retailStoreTable
            where retailStoreTable.StoreNumber == _storeNumber
            join storeTenderTypeTable
                where storeTenderTypeTable.Channel == retailStoreTable.RecId
                    && storeTenderTypeTable.posOperation == 214;     // Operation ID for gift card payment on POS.

        return storeTenderTypeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGiftcardTaxWithPayableAndHoldingAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get container of Payable accounts, Holding accounts and aggregated Tax % for a Gift Card Item Tax Group and Store Sales Tax Group.
    /// </summary>
    /// <param name="_company">
    /// DataAreaID of the Company to be retrieved.
    /// </param>
    /// <param name="_storeNumber">
    /// Store Id.
    /// </param>
    /// <returns>
    /// container contains GC Sales Tax Payable and Holding account with Tax % value.
    /// </returns>
    public static container getGiftcardTaxWithPayableAndHoldingAccount(DataAreaId _company, RetailStoreId _storeNumber)
    {
        return RetailGiftCardPostingParameters::getGiftcardTaxWithPayableAndHoldingAccountForStatement(_company, _storeNumber, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGiftcardTaxWithPayableAndHoldingAccountForStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get container of Payable accounts, Holding accounts and aggregated Tax % for a Gift Card Item Tax Group and Store Sales Tax Group.
    /// </summary>
    /// <param name="_company">
    /// DataAreaID of the Company to be retrieved.
    /// </param>
    /// <param name="_storeNumber">
    /// Store Id.
    /// </param>
    /// <param name="_statementId">
    /// Statement Id.
	/// </param>
    /// <returns>
    /// container contains GC Sales Tax Payable and Holding account with Tax % value.
    /// </returns>
    public static container getGiftcardTaxWithPayableAndHoldingAccountForStatement(DataAreaId _company, RetailStoreId _storeNumber, RetailStatementId _statementId = '')
    {
        TaxLedgerAccountGroup   taxLedgerAccountGroup;
        TaxTable                taxTable;
        TaxData                 taxData;
        TaxGroupData            taxGroupData;
        TaxGroupHeading         taxGroupHeading;
        TaxOnItem               taxOnItem;
        TaxItemGroupHeading     taxItemGroupHeading;
        RetailStoreTable        retailStoreTable;
        InventTableModule       inventTableModule;
        container               payableAndHoldingAccountContainer;
        int                     position = 1;

        ItemId                  giftcardItemId;
        if (_statementId)
        {
            giftcardItemId = RetailEodStatementConfigurationAccessor::constructFromStatementId(_statementId).getGiftCardItem();
        }
        else
        {
            giftcardItemId = RetailParameters::find().GiftcardItem;
        }

        changeCompany(_company)
        {
            while select TaxOutgoingLedgerDimension, TaxReportLedgerDimension from taxLedgerAccountGroup
                join TaxAccountGroup, TaxCode from taxTable
                    where taxTable.TaxAccountGroup == taxLedgerAccountGroup.TaxAccountGroup
                join TaxValue from taxData
                    where taxData.TaxCode == taxTable.TaxCode
                exists join taxGroupData
                    where taxGroupData.TaxCode == taxTable.TaxCode
                exists join taxGroupHeading
                    where taxGroupHeading.TaxGroup == taxGroupData.TaxGroup
                exists join retailStoreTable
                    where retailStoreTable.taxGroup == taxGroupHeading.TaxGroup
                        && retailStoreTable.StoreNumber == _storeNumber
                exists join taxOnItem
                    where taxOnItem.TaxCode == taxGroupData.TaxCode
                exists join taxItemGroupHeading
                    where taxItemGroupHeading.TaxItemGroup == taxOnItem.TaxItemGroup
                exists join inventTableModule
                    where inventTableModule.TaxItemGroupId == taxItemGroupHeading.TaxItemGroup
                        && inventTableModule.ItemId == giftcardItemId
                        && inventTableModule.ModuleType == ModuleInventPurchSales::Sales
            {
                payableAndHoldingAccountContainer = conIns(payableAndHoldingAccountContainer, position, [taxLedgerAccountGroup.TaxOutgoingLedgerDimension, taxLedgerAccountGroup.TaxReportLedgerDimension, taxTable.TaxCode, taxData.TaxValue]);

                position++;
            }
        }

        return payableAndHoldingAccountContainer;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>