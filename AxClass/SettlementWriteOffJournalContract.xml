<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SettlementWriteOffJournalContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SettlementWriteOffJournalContract</c> class provides a contract for distributing processing parameters from the UI to the
/// settlement write off engine classes. This class contains the accounts and settings necessary to create journal data.
/// </summary>
internal final class SettlementWriteOffJournalContract
{
    // Origin
    private RefRecId originLedgerJournalTrans;
    private CustVendAC originCustVendAccount;

    // Accounts
    private DimensionDynamicAccount adjustmentAccount;
    private CustVendAC transferAccount;

    // Context
    private TransDate adjustmentDate;
    private ReasonCode adjustmentReasonCode;
    private CurrencyCode adjustmentCurrency;

    // Control
    private boolean shouldAddJournalLinesToExistingJournal;
    private boolean shouldPostCreatedJournal;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isContractForAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the contract is for a customer or vendor account.
    /// </summary>
    /// <returns>True if for a customer or vendor account; otherwise, false.</returns>
    internal boolean isContractForAccount()
    {
        return originCustVendAccount != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isContractForJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the contract is for a customer or vendor payment journal.
    /// </summary>
    /// <returns>True if for a customr or vendor payment journal; otherwise, false.</returns>
    internal boolean isContractForJournal()
    {
        return originLedgerJournalTrans != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdjustmentAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the adjustment account for the offset dimension.
    /// </summary>
    /// <param name = "_adjustmentAccount">The adjustment account.</param>
    /// <returns>The adjustment account.</returns>
    internal DimensionDynamicAccount parmAdjustmentAccount(DimensionDynamicAccount _adjustmentAccount = adjustmentAccount)
    {
        if (!prmIsDefault(_adjustmentAccount))
        {
            adjustmentAccount = _adjustmentAccount;
        }

        return adjustmentAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdjustmentCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the currency code for journal data.
    /// </summary>
    /// <param name = "_currency">The currency code.</param>
    /// <returns>The currency code.</returns>
    internal CurrencyCode parmAdjustmentCurrency(CurrencyCode _currency = adjustmentCurrency)
    {
        if (!prmIsDefault(_currency))
        {
            adjustmentCurrency = _currency;
        }

        return adjustmentCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdjustmentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the adjustment date for journal data.
    /// </summary>
    /// <param name = "_adjustmentDate">The adjustment date.</param>
    /// <returns>The adjustment date.</returns>
    internal TransDate parmAdjustmentDate(TransDate _adjustmentDate = adjustmentDate)
    {
        if (!prmIsDefault(_adjustmentDate))
        {
            adjustmentDate = _adjustmentDate;
        }

        return adjustmentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdjustmentReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the reason code associated with the adjustment journal data.
    /// </summary>
    /// <param name = "_adjustmentReasonCode">The reason code.</param>
    /// <returns>The reason code.</returns>
    internal ReasonCode parmAdjustmentReasonCode(ReasonCode _adjustmentReasonCode = adjustmentReasonCode)
    {
        if (!prmIsDefault(_adjustmentReasonCode))
        {
            adjustmentReasonCode = _adjustmentReasonCode;
        }

        return adjustmentReasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransferAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the transfer account for journal data.
    /// </summary>
    /// <param name = "_transferAccount">The transfer account.</param>
    /// <returns>The transfer account.</returns>
    internal CustVendAC parmTransferAccount(CustVendAC _transferAccount = transferAccount)
    {
        if (!prmIsDefault(_transferAccount))
        {
            transferAccount = _transferAccount;
        }

        return transferAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOriginCustVendAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the origin customer or vendor account for journal processing.
    /// </summary>
    /// <param name = "_originCustVendAccount">The origin customer or vendor account.</param>
    /// <returns>The origin customer or vendor account.</returns>
    internal AccountNum parmOriginCustVendAccount(AccountNum _originCustVendAccount = originCustVendAccount)
    {
        if (!prmIsDefault(_originCustVendAccount))
        {
            originCustVendAccount = _originCustVendAccount;
        }

        return originCustVendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOriginLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the origin payment journal line for journal processing.
    /// </summary>
    /// <param name = "_originLedgerJournalTrans">The origin payment journal line.</param>
    /// <returns>The origin payment journal line.</returns>
    internal RecId parmOriginLedgerJournalTrans(RecId _originLedgerJournalTrans = originLedgerJournalTrans)
    {
        if (!prmIsDefault(_originLedgerJournalTrans))
        {
            originLedgerJournalTrans = _originLedgerJournalTrans;
        }

        return originLedgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShouldPostCreatedJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the new payment journal should be automatically posted.
    /// </summary>
    /// <param name = "_shouldPostCreatedJournal">Whether to automatically post the new payment journal.</param>
    /// <returns>True if the payment journal should be automatically posted; otherwise, false.</returns>
    internal boolean parmShouldPostCreatedJournal(boolean _shouldPostCreatedJournal = shouldPostCreatedJournal)
    {
        if (!prmIsDefault(_shouldPostCreatedJournal))
        {
            shouldPostCreatedJournal = _shouldPostCreatedJournal;
        }

        return shouldPostCreatedJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldTransferTotalAdjustmentBalancetoTransferAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the total adjustment balance for this write off transaction should be transferred to an account.
    /// </summary>
    /// <returns>True if the balance should be transferred.</returns>
    internal boolean shouldTransferTotalAdjustmentBalancetoTransferAccount()
    {
        return transferAccount != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal protected void new ()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new journal contract.
    /// </summary>
    /// <returns>The new journal contract.</returns>
    internal static SettlementWriteOffJournalContract construct()
    {
        return new SettlementWriteOffJournalContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new journal contract from a payment journal line.
    /// </summary>
    /// <param name = "_ledgerJournalTransRecId">The origin payment journal line.</param>
    /// <returns>The new journal contract.</returns>
    internal static SettlementWriteOffJournalContract newFromJournal(RecId _ledgerJournalTransRecId)
    {
        SettlementWriteOffJournalContract contract = SettlementWriteOffJournalContract::construct();
        contract.parmOriginLedgerJournalTrans(_ledgerJournalTransRecId);
        contract.parmAdjustmentDate(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));

        contract.shouldAddJournalLinesToExistingJournal = true;

        return contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new journal contract from a customer or vendor account.
    /// </summary>
    /// <param name = "_accountNum">The customer or vendor account.</param>
    /// <returns>The new journal contract.</returns>
    internal static SettlementWriteOffJournalContract newFromAccount(AccountNum _accountNum)
    {
        SettlementWriteOffJournalContract contract = SettlementWriteOffJournalContract::construct();
        contract.parmOriginCustVendAccount(_accountNum);
        contract.parmAdjustmentDate(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));

        return contract;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>