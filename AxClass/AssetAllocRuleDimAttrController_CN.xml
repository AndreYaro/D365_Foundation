<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetAllocRuleDimAttrController_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>DimensionAttributeController</c> class manages the lookup, validation and storage
///    of dimension attribute of an allocation rule.
/// </summary>
public class AssetAllocRuleDimAttrController_CN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>lookupDimensionName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    How the dimension attributes are queried.
    /// </summary>
    /// <param name="_ctrl">
    ///    <c>FormStringControl</c>, the control to perform the look up.
    /// </param>
    public void lookupDimensionName(FormStringControl _ctrl)
    {
        DimensionHierarchy::lookupDimensionAttributeByLocalizedName(_ctrl, 0, true, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyDimensionName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    The handler of the event that happends after selecting another dimension attribute
    ///    for an allocation rule.
    /// </summary>
    /// <param name="_rule">
    ///    The current record of <c>AssetAllocationRule_CN</c>.
    /// </param>
    /// <param name="_dimAttrName">
    ///    The name of the new dimension attribute.
    /// </param>
    public void modifyDimensionName(AssetAllocationRule_CN _rule, Name _dimAttrName)
    {
        AssetAllocationRuleLine_CN  line;
        DimensionAttribute          dimAttr;

        if (_rule)
        {
            ttsBegin;

            delete_from line
                where line.AssetAllocationRule == _rule.RecId;

            ttsCommit;
        }

        dimAttr = DimensionAttribute::findByLocalizedName(_dimAttrName);

        if (dimAttr)
        {
            _rule.DimensionAttribute = dimAttr.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDimensionName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validate if a dimension attribute name is valid in current company's account structure.
    /// </summary>
    /// <param name="_rule">
    ///    The current record of <c>AssetAllocationRule_CN</c>.
    /// </param>
    /// <param name="_dimAttrName">
    ///    The string value of the new dimension attribute.
    /// </param>
    /// <returns>
    ///    If the dimension attribute is valid.
    /// </returns>
    public boolean validateDimensionName(AssetAllocationRule_CN _rule, Name _dimAttrName)
    {
        DimensionAttribute          dimAttr;
        DimensionAttributeSetItem   attrItem;
        boolean                     ret = true;

        dimAttr = DimensionAttribute::findByLocalizedName(_dimAttrName);

        select firstOnly RecId from attrItem
                where dimAttr.recid == attrItem.DimensionAttribute
                    && attrItem.DimensionAttributeSet == DimensionCache::getDimensionAttributeSetForLedger();

        if (!dimAttr || !attrItem)
        {
            // @SYS4002361 - Invalid Financial dimension %1.
            error(strFmt("@SYS4002361", _dimAttrName));
            return false;
        }

        if (_rule.DimensionAttribute != dimAttr.RecId)
        {
            // @SYS4002353 - All rules will be deleted. Yes/No?
            if (_rule && Box::yesNo("@SYS4002353", DialogButton::No) == DialogButton::No)
            {
                ret = false;
            }
        }
        else
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs an instance of the <c>DimensionAttributeController</c> class that can handle
    ///    dimension attribute lookup, validate and storage for an allocation rule.
    /// </summary>
    /// <param name="_form">
    ///    The <c>FormRun</c> object that hosts the container that contains the added controls.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>DimensionAttributeController</c> class that can handle
    ///    dimension attribute lookup, validate and storage for an allocation rule.
    /// </returns>
    public static AssetAllocRuleDimAttrController_CN construct()
    {
        return new AssetAllocRuleDimAttrController_CN();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>