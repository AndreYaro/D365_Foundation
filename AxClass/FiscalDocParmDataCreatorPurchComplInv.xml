<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocParmDataCreatorPurchComplInv</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is reponsible for generating a <c>FiscalDocumentParmData_BR</c> object
/// model for a purchase complementary invoice posting scenario.
/// </summary>
class FiscalDocParmDataCreatorPurchComplInv extends FiscalDocumentParmDataCreator_BR
{
    FiscalDocument_BR               origFiscalDocument;
    PurchComplementaryInvoiceHeader complInvoice;
    VendTable                       vendTable;
    FiscalDocumentType_BR           fiscalDocType;
    PurchComplInvCalcTotals         calcTotals;
    AmountMST                       totalAmount;
    VendTrans                       vendTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fiscalReferenceSourceCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns currency code of fiscal reference
    /// </summary>
    /// <returns>
    /// The currency code
    /// </returns>
    protected CurrencyCode fiscalReferenceSourceCurrencyCode()
    {
        return complInvoice.Currency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceRecId</Name>
				<Source><![CDATA[
    protected RecId fiscalReferenceSourceRecId()
    {
        return complInvoice.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceTableId</Name>
				<Source><![CDATA[
    protected TableId fiscalReferenceSourceTableId()
    {
        return complInvoice.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCustVendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the fiscal document in context has customer-vendor transactions.
    /// </summary>
    /// <returns>
    /// true if the fiscal document has customer-vendor transactions; otherwise, false.
    /// </returns>
    protected boolean hasCustVendTrans()
    {
        return vendTrans != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendTransParmData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>FiscalDocumentCustVendTransParmData_BR</c> class that represents
    /// a customer-vendor transaction that is associated with a fiscal document.
    /// </summary>
    /// <returns>
    /// An instance of the <c>FiscalDocumentCustVendTransParmData_BR</c> class.
    /// </returns>
    protected FiscalDocumentCustVendTransParmData_BR initCustVendTransParmData()
    {
        List                                    installments = new List(Types::Class);
        VendPaymSched                           vendPaymSched;
        VendPaymSchedLine                       vendPaymSchedLine;
        FiscalDocumentCustVendTransParmData_BR  custVendTransParmData = new FiscalDocumentCustVendTransParmData_BR();
        FiscalDocumentInstallmentParmData_BR    installmentParmData;
        PrimaryMethod_BR                        primaryMethod;
        int i;

        if (complInvoice.VendPaymModeTable)
        {
            primaryMethod = VendPaymModeTable::find(complInvoice.VendPaymModeTable).PrimaryMethod_BR;
        }

        if (!primaryMethod)
        {
            primaryMethod = BrazilParameters::find().PurchPrimaryMethod_BR;
        }

        custVendTransParmData.parmAmount(vendTrans.AmountMST);
        custVendTransParmData.parmDueDate(vendTrans.DueDate);
        custVendTransParmData.parmDocumentType(primaryMethod);

        while select DueDate, DueAmount
            from vendPaymSchedLine
            join recId from vendPaymSched
            where vendPaymSchedLine.FatherRecID == vendPaymSched.RecId
                && vendPaymSched.ExtRecId == complInvoice.RecId
                && vendPaymSched.ExtTableId == complInvoice.TableId
        {
            installmentParmData = new FiscalDocumentInstallmentParmData_BR();

            i++;
            installmentParmData.parmInstallmentNumber(i);
            installmentParmData.parmDueDate(vendPaymSchedLine.DueDate);
            installmentParmData.parmAmount(vendPaymSchedLine.DueAmount);

            custVendTransParmData.addInstallment(installmentParmData);
        }

        return custVendTransParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderParmData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>FiscalDocumentParmData_BR</c> class that represents the fiscal
    /// document header information.
    /// </summary>
    /// <returns>
    /// An instance of the <c>FiscalDocumentParmData_BR</c> class.
    /// </returns>
    protected FiscalDocumentParmData_BR initHeaderParmData()
    {
        FiscalDocumentParmData_BR fiscalDocument;

        fiscalDocument = new FiscalDocumentParmData_BR();

        fiscalDocument.parmAccountingDate(complInvoice.TransDate);
        fiscalDocument.parmComplementaryType(complInvoice.ComplementaryType);
        fiscalDocument.parmComplementedFiscalDocument(complInvoice.ComplementedFiscalDocument);
        fiscalDocument.parmFinalUser(complInvoice.VendFinalUser);

        if (fiscalDocument.parmFinalUser())
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00083, funcName());
        }

        fiscalDocument.parmDirection(origFiscalDocument.Direction);
        fiscalDocument.parmImportDeclaration(origFiscalDocument.ImportDeclaration);

        fiscalDocument.parmPresenceType(EFDocPresenceType_BR::DoesNotApply);
        fiscalDocument.parmPaymentAmount(totalAmount);
        fiscalDocument.parmPaymentMethod(origFiscalDocument.PaymentMethod);
    
        fiscalDocument.parmFiscalDocumentAccountType(CustVendType_BR::Vendor);
        fiscalDocument.parmFiscalDocumentAccountNum(complInvoice.VendTable);
        fiscalDocument.parmFiscalDocumentDate(complInvoice.DocumentDate);
        fiscalDocument.parmFiscalDocumentType(fiscalDocType);
        fiscalDocument.parmFiscalDocumentIssuer(complInvoice.Issuer);
        if (complInvoice.Issuer == FiscalDocumentIssuer_BR::OwnEstablishment)
        {
            fiscalDocument.parmFiscalDocumentNumber(this.getInvoiceIdWithoutSeriesPrefix(complInvoice.Number, complInvoice.Series));
        }
        else
        {
            fiscalDocument.parmFiscalDocumentNumber(complInvoice.Number);
            fiscalDocument.parmFiscalDocumentAccessKey(complInvoice.AccessKey_BR);
        }
        fiscalDocument.parmFiscalDocumentSeries(complInvoice.Series);
        fiscalDocument.parmSpecie(complInvoice.Specie);
        fiscalDocument.parmModel(complInvoice.Model);

        fiscalDocument.parmFiscalEstablishmentID(origFiscalDocument.FiscalEstablishment);
        fiscalDocument.parmFiscalEstablishmentCCMNum(origFiscalDocument.FiscalEstablishmentCCMNum);
        fiscalDocument.parmFiscalEstablishmentCNPJCPF(origFiscalDocument.FiscalEstablishmentCNPJCPF);
        fiscalDocument.parmFiscalEstablishmentIE(origFiscalDocument.FiscalEstablishmentIE);
        fiscalDocument.parmFiscalEstablishmentName(origFiscalDocument.FiscalEstablishmentName);
        fiscalDocument.parmFiscalEstablishmentPostalAddress(origFiscalDocument.FiscalEstablishmentPostalAddress);
        fiscalDocument.parmFiscalEstablishmentPhone(origFiscalDocument.FiscalEstablishmentPhone);

        fiscalDocument.parmThirdPartyCCMNum(origFiscalDocument.ThirdPartyCCMNum);
        fiscalDocument.parmThirdPartyCNPJCPF(origFiscalDocument.ThirdPartyCNPJCPF);
        fiscalDocument.parmThirdPartyIE(origFiscalDocument.ThirdPartyIE);
        fiscalDocument.parmThirdPartyName(origFiscalDocument.ThirdPartyName);
        fiscalDocument.parmThirdPartyPostalAddress(origFiscalDocument.ThirdPartyPostalAddress);
        fiscalDocument.parmThirdPartyPhone(origFiscalDocument.ThirdPartyPhone);
        fiscalDocument.parmThirdPartyEmail(origFiscalDocument.ThirdPartyEmail);
        fiscalDocument.parmThirdPartyIcmsContributor(origFiscalDocument.ThirdPartyICMSContributor);
        fiscalDocument.parmThirdPartyForeignerId(origFiscalDocument.ThirdPartyForeignerId);
        fiscalDocument.parmFreightChargeTerms(FiscalDocumentFreightTerms_BR::Nofreight);

        fiscalDocument.parmVoucher(complInvoice.LedgerVoucher);
        fiscalDocument.parmInventoryVoucher(complInvoice.CostLedgerVoucher);
        fiscalDocument.parmRefRecId(complInvoice.RecId);
        fiscalDocument.parmRefTableId(complInvoice.TableId);
        fiscalDocument.parmTotalAmount(totalAmount);

        fiscalDocument.parmListOfTextsParmData(this.addTexts(complInvoice));
        this.initTagsReplacer(fiscalDocument.parmTextTagReplacer());

        return fiscalDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLinesParmData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a list of instances of the <c>FiscalDocumentLineParmData_BR</c> class that represent
    /// the fiscal document lines.
    /// </summary>
    /// <returns>
    /// A list of instances of the <c>FiscalDocumentLineParmData_BR</c> class.
    /// </returns>
    protected List initLinesParmData()
    {
        FiscalDocumentLineParmData_BR fiscalDocLine;
        PurchComplementaryInvoiceLine complInvLine;
        InventTable inventTable;
        FiscalDocumentLine_BR originalFiscalDocumentLine;
        LogisticsPostalAddress logisticsPostalAddress;
    
        List ret = new List(Types::Class);
    
        if (complInvoice.Issuer == FiscalDocumentIssuer_BR::OwnEstablishment)
        {
            logisticsPostalAddress = LogisticsPostalAddress::findRecId(origFiscalDocument.FiscalEstablishmentPostalAddress);
        }
        else
        {
            logisticsPostalAddress = LogisticsPostalAddress::findRecId(origFiscalDocument.ThirdPartyPostalAddress);
        }

        boolean isAnyICMSAsset;
        TaxBenefitCodeSetupHeading_BR taxBenefitCodeSetupHeading = TaxBenefitCodeSetupHeading_BR::findByCountryRegionIdAndStateId(logisticsPostalAddress.CountryRegionId, logisticsPostalAddress.State);
        while select complInvLine
            where complInvLine.PurchComplementaryInvoiceHeader == complInvoice.RecId
        {
            // Skip complementary lines with zero amount
            if (complInvoice.ComplementaryType == InvoiceComplementaryType_BR::Price &&
                complInvLine.Amount == 0)
            {
                continue;
            }
            else if (complInvoice.ComplementaryType == InvoiceComplementaryType_BR::Tax &&
                     complInvLine.AdditionalIPIAmount == 0 && complInvLine.AdditionalICMSAmount == 0)
            {
                continue;
            }

            fiscalDocLine = new FiscalDocumentLineParmData_BR();

            fiscalDocLine.parmCFOP(CFOPTable_BR::find(complInvLine.CFOPTable_BR).CFOPId);
            fiscalDocLine.parmDescription(complInvLine.Description);

            if (complInvLine.ItemId)
            {
                inventTable = InventTable::find(complInvLine.ItemId);
                fiscalDocLine.parmFiscalClassification(inventTable.TaxFiscalClassification_BR);
                fiscalDocLine.parmItemId(inventTable.ItemId);
                fiscalDocLine.parmItemType(inventTable.ItemType == ItemType::Item ? FiscalDocumentLineItemType_BR::Product : FiscalDocumentLineItemType_BR::Service);
                fiscalDocLine.parmScaleIndicator(inventTable.ScaleIndicator_BR);
                fiscalDocLine.parmCNPJ(inventTable.CNPJ_BR);

                fiscalDocLine.parmBenefitCode(TaxBenefitCodeSetupData_BR::findAdjustmentCode(
                                                taxBenefitCodeSetupHeading.RecId,
                                                complInvLine.ItemId,
                                                CustVendType_BR::Vendor,
                                                complInvoice.VendTable,
                                                fiscalDocLine.parmCFOP(),
                                                SalesPurchTrntype_BR::Purchase));
                fiscalDocLine.parmAdjustmentCode53(TaxBenefitCodeSetupData_BR::findAdjustmentCode53(
                                                    taxBenefitCodeSetupHeading.RecId,
                                                    complInvLine.ItemId,
                                                    CustVendType_BR::Vendor,
                                                    complInvoice.VendTable,
                                                    fiscalDocLine.parmCFOP(),
                                                    SalesPurchTrntype_BR::Purchase));
                fiscalDocLine.parmObservationCode(TaxBenefitCodeSetupData_BR::findObservationCode(
                                                    taxBenefitCodeSetupHeading.RecId,
                                                    complInvLine.ItemId,
                                                    CustVendType_BR::Vendor,
                                                    complInvoice.VendTable,
                                                    fiscalDocLine.parmCFOP(),
                                                    SalesPurchTrntype_BR::Purchase));
            }

            fiscalDocLine.parmLineAmount(complInvLine.Amount);

            originalFiscalDocumentLine = FiscalDocumentLine_BR::find(complInvLine.ComplementedFiscalDocumentLine);
            fiscalDocLine.parmOrigin(originalFiscalDocumentLine.Origin);
            fiscalDocLine.parmQuantity(1);
            fiscalDocLine.parmUnit(originalFiscalDocumentLine.Unit);
            fiscalDocLine.parmAssetId(originalFiscalDocumentLine.AssetId);
            if (originalFiscalDocumentLine.AssetId)
            {
                AssetTable asset = AssetTable::find(originalFiscalDocumentLine.AssetId);
                isAnyICMSAsset = isAnyICMSAsset ? isAnyICMSAsset : (asset.ICMSCreditInstallments_BR || asset.TaxICMSOutgoing_BR);
            }
            fiscalDocLine.parmDIAddition(originalFiscalDocumentLine.DIAddition);

            fiscalDocLine.parmFinancialLedgerDimension (FiscalDocParmDataCreatorPurchComplInv::getFinancialDimension(complInvLine, originalFiscalDocumentLine));

            fiscalDocLine.parmRefRecId(complInvLine.RecId);
            fiscalDocLine.parmRefTableId(complInvLine.TableId);

            fiscalDocLine.parmListOfTextsParmData().appendList(this.addTexts(complInvLine));
            this.initTagsReplacer(fiscalDocLine.parmTextTagReplacer());

            ret.addEnd(fiscalDocLine);
        }

        if (isAnyICMSAsset)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00082, funcName());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfInstallments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a list of instances of the <c>FiscalDocumentInstallmentParmData_BR</c> class that
    /// represent the fiscal document installments.
    /// </summary>
    /// <returns>
    /// A list of instances of the <c>FiscalDocumentInstallmentParmData_BR</c> class.
    /// </returns>
    protected List initListOfInstallments()
    {
        int installmentNum;

        List list = new List(Types::Class);

        FiscalDocumentInstallmentParmData_BR installment;

        VendPaymSched       vendPaymSched;
        VendPaymSchedLine   vendPaymSchedLine;

        select firstonly recId from vendPaymSched
            where vendPaymSched.ExtTableId == complInvoice.TableId
                && vendPaymSched.ExtRecId == complInvoice.RecId;

        if (vendPaymSched)
        {
            while select DueDate, DueAmount from vendPaymSchedLine
                    where vendPaymSchedLine.FatherRecID == vendPaymSched.RecId
            {
                installmentNum++;

                installment = new FiscalDocumentInstallmentParmData_BR();

                installment.parmDueDate(vendPaymSchedLine.DueDate);
                installment.parmAmount(CurrencyExchangeHelper::amountCur2MST(vendPaymSchedLine.DueAmount, complInvoice.Currency, complInvoice.ExchRate()));
                installment.parmInstallmentNumber(installmentNum);

                list.addEnd(installment);
            }
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfShipmentStatParmData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a list of instances of the <c>FiscalDocumentParmData_BR</c> class that represents the
    /// shipment specifications for a specified Fiscal Document line.
    /// </summary>
    /// <param name="_fiscalDocumentParmData">
    /// An instance of the <c>FiscalDocumentParmData_BR</c> class that represents a specific fiscal
    /// document line.
    /// </param>
    /// <returns>
    /// A list of instances of the <c>FiscalDocumentParmData_BR</c> class.
    /// </returns>
    protected List initListOfShipmentStatParmData(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        List ret = new List(Types::Class);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTagsReplacer</Name>
				<Source><![CDATA[
    private void initTagsReplacer(FiscalDocumentTextTagReplacer_BR _replacer)
    {
        _replacer.parmCustomer_Address(vendTable.postalAddress().Address);
        _replacer.parmCustomer_CnpjCpf(vendTable.CNPJCPFNum_BR);
        _replacer.parmCustomer_IE(vendTable.IENum_BR);
        _replacer.parmCustomer_Name(vendTable.name());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxTransParmDataFromTaxTrans</Name>
				<Source><![CDATA[
    protected void initTaxTransParmDataFromTaxTrans(FiscalDocumentParmData_BR _fiscalDocumentParmData,
                                                    FiscalDocumentTaxTransParmData_BR _fiscalDocumentTaxTransParmData,
                                                    TaxTrans _taxTrans,
                                                    TaxTrans_BR _taxTrans_BR)
    {
        super(_fiscalDocumentParmData,
              _fiscalDocumentTaxTransParmData,
              _taxTrans,
              _taxTrans_BR);

        if (origFiscalDocument.Direction == FiscalDocDirection_BR::Outgoing && _taxTrans_BR.TaxType_BR == TaxType_BR::ICMS)
        {
            _fiscalDocumentTaxTransParmData.parmTaxBaseAmount(0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(PurchComplementaryInvoiceHeader _complementaryInvoiceHeader,
                    AmountMST _totalAmount,
                    VendTrans _vendTrans)
    {
        super();

        complInvoice = _complementaryInvoiceHeader;
        vendTable = VendTable::find(complInvoice.VendTable);
        fiscalDocType = FiscalDocumentType_BR::findRecId(complInvoice.FiscalDocumentType);
        origFiscalDocument = FiscalDocument_BR::find(complInvoice.ComplementedFiscalDocument);
        totalAmount = _totalAmount;
        vendTrans = _vendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentPurpose</Name>
				<Source><![CDATA[
    protected FiscalDocumentPurpose_BR getFiscalDocumentPurpose()
    {
        FiscalDocumentPurpose_BR    fiscalDocumentPurpose;

        if (complInvoice.ComplementaryType == InvoiceComplementaryType_BR::Price)
        {
            fiscalDocumentPurpose = FiscalDocumentPurpose_BR::PriceComplement;
        }
        else
        {
            fiscalDocumentPurpose = FiscalDocumentPurpose_BR::TaxComplement;
        }

        return fiscalDocumentPurpose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPovertyFundTaxForLine</Name>
				<Source><![CDATA[
    protected void setPovertyFundTaxForLine(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData,
                                            FiscalDocumentTaxPovertyFundCalc_BR _fiscalDocumentTaxPovertyFundCalc)
    {
        PurchComplementaryInvoiceLine       purchComplementaryInvoiceLine;
        ListEnumerator                      taxesEnumerator;
        FiscalDocumentTaxTransParmData_BR   fiscalDocumentTaxTransParmData;

        if (complInvoice.ComplementaryType == InvoiceComplementaryType_BR::Tax)
        {
            select firstonly RecId, TableId, AdditionalPovertyFundAmount from purchComplementaryInvoiceLine
                where purchComplementaryInvoiceLine.RecId == _fiscalDocumentLineParmData.parmRefRecId()
                    && purchComplementaryInvoiceLine.TableId == _fiscalDocumentLineParmData.parmRefTableId();

            taxesEnumerator = _fiscalDocumentLineParmData.parmListOfTaxes().getEnumerator();
            while (taxesEnumerator.moveNext())
            {
                fiscalDocumentTaxTransParmData = taxesEnumerator.current();
                if (fiscalDocumentTaxTransParmData.parmType() == TaxType_BR::ICMS)
                {
                    fiscalDocumentTaxTransParmData.parmTaxPovertyFundPercentage(0);

                    if (fiscalDocumentTaxTransParmData.parmFiscalValue() == TaxFiscalValue_BR::WithoutCreditDebitExempt)
                    {
                        fiscalDocumentTaxTransParmData.parmTaxPovertyFundAmount(0);
                    }
                    else
                    {
                        fiscalDocumentTaxTransParmData.parmTaxPovertyFundAmount(purchComplementaryInvoiceLine.AdditionalPovertyFundAmount);
                    }
                }
            }
        }
        else
        {
            super(_fiscalDocumentLineParmData, _fiscalDocumentTaxPovertyFundCalc);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinancialDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the financial dimension for the given PurchComplementaryInvoiceLine.
    /// </summary>
    /// <param name="_purchComplementaryInvoiceLine">
    /// The PurchComplementaryInvoiceLine record.
    /// </param>
    /// <param name="_originalFiscalDocumentLine">
    /// The original FiscalDocumentLine_BR record.
    /// </param>
    /// <returns>
    /// The financial dimension record id.
    /// </returns>
    public static RecId getFinancialDimension(PurchComplementaryInvoiceLine _purchComplementaryInvoiceLine, FiscalDocumentLine_BR _originalFiscalDocumentLine = null)
    {
        FiscalDocumentLine_BR originalFiscalDocumentLine = _originalFiscalDocumentLine;

        if (!originalFiscalDocumentLine)
        {
            select firstOnly FinancialLedgerDimension from originalFiscalDocumentLine
                where originalFiscalDocumentLine.RecId == _purchComplementaryInvoiceLine.ComplementedFiscalDocumentLine;
        }

        return originalFiscalDocumentLine.FinancialLedgerDimension;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>