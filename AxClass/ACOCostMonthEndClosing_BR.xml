<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AcoCostMonthEndClosing_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AcoCostMonthEndClosing_BR extends RunBaseBatch implements BatchRetryable
{
    Counter                         numberOfRecords, progressTotal, progressCounter;
    boolean                         ledgerVoucherIsSet, useInternalNumber;
    NumberSeq                       numberSeq;
    Num                             number;
    Voucher                         voucher;
    DialogRunbase                   dialog;
    DialogField                     dialogMonthYr;
    ACOCostMonthClosingDate_BR      costMonthClosingDate, transDate;
    ProdJournalRoute                prodJournalRoute;
    CurrencyCode                    currency;
    FromDate                        fromDate;
    ToDate                          toDate;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        costMonthClosingDate
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds transaction to the <c>LedgerVoucher</c> object.
    /// </summary>
    /// <param name="_ledgerVoucher">
    /// The <c>LedgerVoucher</c> object which will hold the transactions.
    /// </param>
    /// <param name="_prodOverHeadCostTrans">
    /// The <c>ACOProdOverHeadCostTrans_BR</c> object that represents the ledger transaction original record.
    /// </param>
    /// <param name="_ledgerDimensionAccount">
    /// The ledger account in which the ledger transaction will be created.
    /// </param>
    /// <param name="_totalCostAmount">
    /// The amount of the ledger transaction
    /// </param>
    protected void addTrans(LedgerVoucher _ledgerVoucher, ACOProdOverHeadCostTrans_BR _prodOverHeadCostTrans, LedgerDimensionAccount  _ledgerDimensionAccount, CostAmount _totalCostAmount, LedgerPostingType _ledgerPostingType = LedgerPostingType::None)
    {
        LedgerVoucherTransObject    ledgerVoucherTransObject;
        LedgerVoucherObject         ledgerVoucherObject;
        CurrencyExchangeHelper      currencyExchangeHelper;

        ledgerVoucherObject     = _ledgerVoucher.findLedgerVoucherObject();

        currencyExchangeHelper  = CurrencyExchangeHelper::newExchangeDate(
                                                    Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                    ledgerVoucherObject.parmAccountingDate());

        ledgerVoucherTransObject    = LedgerVoucherTransObject::newTransactionAmountDefault(
            ledgerVoucherObject,
            _ledgerPostingType,
            _ledgerDimensionAccount,
            currency,
            -_totalCostAmount,
            currencyExchangeHelper);

        ledgerVoucherTransObject.parmSourceRecId(_prodOverHeadCostTrans.RecId);
        ledgerVoucherTransObject.parmSourceTableId(_prodOverHeadCostTrans.TableId);

        _ledgerVoucher.addTrans(ledgerVoucherTransObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allocates a new number sequence for the voucher.
    /// </summary>
    /// <returns>
    /// A <c>NumberSeq</c> object to manage the number sequence.
    /// </returns>
    NumberSeq  allocateVoucher()
    {
        NumberSeq       tmpNumberSeq;

        tmpNumberSeq    = NumberSeq::newGetVoucher(ACOParameters_BR::numRefAbsorbedCostsVoucher());

        return tmpNumberSeq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates ledger transactions related to the absorbed costs of a given production order.
    /// </summary>
    /// <param name="_prodTable">
    /// The production order record.
    /// </param>
    /// <param name="_ledgerVoucher">
    /// The voucher to be used for these transactions.
    /// </param>
    /// <param name="_acoProdCostTable">
    /// The cost table to be used for these transactions.
    /// </param>

    protected void createLedgerTransactions(ProdTable _prodTable, LedgerVoucher _ledgerVoucher, ACOProdCostTable_BR _acoProdCostTable)
    {
        ACOProdOverHeadCostTrans_BR acoProdOverHeadCostTrans;
        CostAmount                  costAmount;

        while select sum(CostAmount), ProdId, WrkCtrId, LedgerDimension from acoProdOverHeadCostTrans
            group by acoProdOverHeadCostTrans.WrkCtrId, acoProdOverHeadCostTrans.ProdId, acoProdOverHeadCostTrans.LedgerDimension
            where acoProdOverHeadCostTrans.ProdId   == _prodTable.ProdId
                && acoProdOverHeadCostTrans.Voucher == _acoProdCostTable.Voucher
        {
            costAmount = -CurrencyExchangeHelper::amount(acoProdOverHeadCostTrans.CostAmount);
            this.postCostInLedger(_ledgerVoucher, acoProdOverHeadCostTrans, _prodTable, costAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProdTableJourEntries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the absorbed cost transaction in the production posting.
    /// </summary>
    /// <param name="_prodTable">
    /// The production order record.
    /// </param>
    /// <param name="_costAmount">
    /// The absorbed cost amount.
    /// </param>
    protected void createProdTableJourEntries(ProdTable _prodTable, CostAmount _costAmount)
    {
        ProdTableJour   prodTableJour;

        prodTableJour.initFromProdTable(_prodTable);
        prodTableJour.TransDate         = transDate;
        prodTableJour.Voucher           = voucher;
        prodTableJour.AmountFinancial   = _costAmount;
        prodTableJour.JournalType       = ProdJourType::AbsorbedCost;
        prodTableJour.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogGroup     groupMonthyr;

        dialog  = super();

        groupMonthyr  = dialog.addGroup("@GLS236");
        groupMonthyr.frameType(FormFrameType::Auto);
        dialogMonthYr = dialog.addFieldValue(extendedTypeStr(ACOCostMonthClosingDate_BR), costMonthClosingDate);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existACOProdCostTableInPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if absorbed costs exist in the period.
    /// </summary>
    /// <param name="_fromDate">
    /// The initial date of the period.
    /// </param>
    /// <param name="_toDate">
    /// The final date of the period.
    /// </param>
    /// <returns>
    /// True absorbed costs exist in the period; otherwise, false.
    /// </returns>
    protected boolean existACOProdCostTableInPeriod(TransDate _fromDate, TransDate _toDate)
    {
        ACOProdCostTable_BR             acoProdCostTable;
        ACOProdOverHeadCostTrans_BR     acoProdOverHeadCostTrans;

        select RecId from acoProdCostTable exists join acoProdOverHeadCostTrans
            where   acoProdCostTable.CostStatus         == ACOCostStatus_BR::Posted                 &&
                    acoProdCostTable.Voucher            == acoProdOverHeadCostTrans.Voucher         &&
                    acoProdCostTable.ProdId             == acoProdOverHeadCostTrans.ProdId          &&
                    acoProdOverHeadCostTrans.TransDate  >= _fromDate                                 &&
                    acoProdOverHeadCostTrans.TransDate  <= _toDate;

        return acoProdCostTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        costMonthClosingDate = dialogMonthYr.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucher</Name>
				<Source><![CDATA[
    container  getVoucher()
    {
        return [numberSeq.voucher()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new voucher
    /// </summary>
    /// <param name="_transactionTxt">
    /// The transaction text for the voucher.
    /// </param>
    /// <param name="_transactionDate">
    /// The transaction date for the voucher.
    /// </param>
    /// <returns>
    /// A <c>LedgerVoucher</c> object that represents the transactions voucher.
    /// </returns>
    protected LedgerVoucher initLedgerVoucher(TransactionTxt    _transactionTxt,
                                      TransDate         _transactionDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        LedgerVoucherObject ledgerVoucherObject;
        LedgerVoucher       ledgerVoucher;

        if (!ledgerVoucherIsSet)
        {
            ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Summary,
                                                         SysModule::Prod,
                                                         numberSeq.parmVoucherSequenceCode());

            ledgerVoucherObject = LedgerVoucherObject::newVoucher(voucher,
                                                                  _transactionDate,
                                                                  SysModule::Prod,
                                                                  LedgerTransType::Production,
                                                                  NoYes::No);

            ledgerVoucher.addVoucher(ledgerVoucherObject);
        }

        ledgerVoucher.findLedgerVoucherObject(voucher).lastTransTxt(_transactionTxt.txt());

        return ledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransactionTxt</Name>
				<Source><![CDATA[
    protected TransactionTxt  initTransactionTxt(LedgerTransTxt  ledgerTransTxt)
    {
        TransactionTxt  transactionTxt;

        transactionTxt = TransactionTxt::construct();
        transactionTxt.setType          (ledgerTransTxt);
        transactionTxt.setVoucher       (voucher);

        return transactionTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVoucher</Name>
				<Source><![CDATA[
    void initVoucher()
    {
        numberSeq   = this.allocateVoucher();
        [voucher]   = this.getVoucher();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the inventory transaction cost amount for the produced item.
    /// </summary>
    /// <param name="_prodTable">
    /// The production order <c>ProdTable</c> record.
    /// </param>
    /// <param name="_acoProdCostTable">
    /// The abosrbed costs <c>ACOProdCostTable_BR</c> record.
    /// </param>
    /// <param name="_totalCostAmount">
    /// The total cost amount of the production order.
    /// </param>
    protected void inventTransAdjustment(ProdTable _prodTable, ACOProdCostTable_BR _acoProdCostTable, CostAmount _totalCostAmount)
    {
        CostAmount                  costAmountAdjustment, totalCostAmountAdjustment;
        int                         totalInventCount;
        InventQty                   totalInventQty;
        InventTrans                 inventTrans;
        InventTransAdjust           transAdjust;
        InventTransOrigin           inventTransOrigin;

        select sum(Qty), count(RecId) from inventTrans
            where inventTrans.ValueOpen     == InventTransOpen::Yes &&
                  inventTrans.StatusReceipt == StatusReceipt::Purchased &&
                  inventTrans.StatusIssue   == StatusIssue::None
            exists join inventTransOrigin
            where   inventtransOrigin.InventTransId == _prodTable.InventTransId &&
                    inventTransOrigin.RecId         == inventTrans.InventTransOrigin;

        totalInventQty   = inventTrans.Qty;
        totalInventCount = any2int(inventTrans.RecId);

        if (!totalInventQty)
            throw error(strfmt("@GLS171", _prodTable.ProdId));

        while select forupdate inventTrans
            where inventTrans.ValueOpen     == InventTransOpen::Yes &&
                  inventTrans.StatusReceipt == StatusReceipt::Purchased &&
                  inventTrans.StatusIssue   == StatusIssue::None
            exists join inventTransOrigin
            where   inventtransOrigin.InventTransId == _prodTable.InventTransId &&
                    inventTransOrigin.RecId         == inventTrans.InventTransOrigin
        {
            if (totalInventCount > 1)
            {
                costAmountAdjustment       = CurrencyExchangeHelper::amount(_totalCostAmount * inventTrans.Qty / totalInventQty);
                totalCostAmountAdjustment += costAmountAdjustment;
                totalInventCount--;
            }
            else
            {
                costAmountAdjustment = _totalCostAmount - totalCostAmountAdjustment;
            }

            transAdjust = new InventTransAdjust(transDate, _acoProdCostTable.Voucher);

            transAdjust.updateNow(inventTrans,
                                  NoYes::No,
                                  NoYes::Yes,
                                  costAmountAdjustment);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCostInLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the absorbed costs transactions in the general ledger.
    /// </summary>
    /// <param name="_ledgerVoucher">
    /// The <c>LedgerVoucher</c> object which will hold the transactions.
    /// </param>
    /// <param name="_prodOverHeadCostTrans">
    /// The <c>ACOProdOverHeadCostTrans_BR</c> object that represents the ledger transaction original record.
    /// </param>
    /// <param name="_prodTable">
    /// The production order record.
    /// </param>
    /// <param name="_totalCostAmount">
    /// The amount of the absorbed cost.
    /// </param>
    protected void postCostInLedger(LedgerVoucher _ledgerVoucher, ACOProdOverHeadCostTrans_BR _prodOverHeadCostTrans, ProdTable _prodTable, CostAmount _totalCostAmount)
    {
        LedgerDimensionAccount      mergedLedgerDimension, itemLedgerDimension;
        DimensionDefault            defaultDimension;
        WrkCtrTable                 wrkCtrTable;
        ProdTable                   prodTable;

        wrkCtrTable = WrkCtrTable::find(_prodOverHeadCostTrans.WrkCtrId);
        prodTable   = ProdTable::find(_prodOverHeadCostTrans.ProdId);

        mergedLedgerDimension   = LedgerDimensionFacade::serviceCreateLedgerDimension(_prodOverHeadCostTrans.LedgerDimension, _prodTable.DefaultDimension);

        this.addTrans(_ledgerVoucher, _prodOverHeadCostTrans, mergedLedgerDimension, -_totalCostAmount, LedgerPostingType::ProdWrkCtrIssue);

        defaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(_prodOverHeadCostTrans.LedgerDimension), prodTable.DefaultDimension);

        mergedLedgerDimension   = LedgerDimensionFacade::serviceCreateLedgerDimension(wrkCtrTable.ResourceIssueOffsetLedgerDimension, defaultDimension);
        this.addTrans(_ledgerVoucher, _prodOverHeadCostTrans, mergedLedgerDimension, _totalCostAmount, LedgerPostingType::ProdWrkCtrIssueOffsetAccount);

        // InventAccount
        itemLedgerDimension = InventPosting::itemLedgerDimensionFromParameter(
                                                this.buildItemLedgerDimensionParameter(InventAccountType::ProdReceiptOffsetAccount, _prodTable));

        mergedLedgerDimension   = LedgerDimensionFacade::serviceCreateLedgerDimension(itemLedgerDimension, prodTable.DefaultDimension);
        this.addTrans(_ledgerVoucher, _prodOverHeadCostTrans, mergedLedgerDimension, - _totalCostAmount, LedgerPostingType::ProdReceiptOffsetAccount);

        itemLedgerDimension = InventPosting::itemLedgerDimensionFromParameter(
                                                this.buildItemLedgerDimensionParameter(InventAccountType::ProdReceipt, _prodTable));

        mergedLedgerDimension   = LedgerDimensionFacade::serviceCreateLedgerDimension(itemLedgerDimension, prodTable.DefaultDimension);

        this.addTrans(_ledgerVoucher, _prodOverHeadCostTrans, mergedLedgerDimension, _totalCostAmount, LedgerPostingType::ProdReceipt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting ledger dimension for an item.
    /// </summary>
    /// <param name = "_inventAccountType">A inventory account type.</param>
    /// <param name="_prodTable">The production order record.</param>
    /// <returns>The built parameter instance.</returns>
    protected InventPostingItemLedgerDimensionParameters buildItemLedgerDimensionParameter(
        InventAccountType   _inventAccountType,
        ProdTable           _prodTable)
    {
        ItemGroupId itemGroupId = InventTable::find(_prodTable.ItemId).itemGroupId();
        
        return InventPostingItemLedgerDimensionParameters::newFromParameters(
            _inventAccountType,
            _prodTable.ItemId,
            itemGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00051, funcName());

        ACOProdCostTable_BR             acoProdCostTable;
        ACOProdOverHeadCostTrans_BR     acoProdOverHeadCostTrans;
        int                             month;
        Yr                              yr;
        ProdTable                       prodTable;
        ProdId                          prodId;
        LedgerVoucher                   ledgerVoucher;
        LedgerVoucherObject             ledgerVoucherObject;
        TransactionTxt                  transactionTxt;
        boolean                         existsAbsorbedCostsInPeriod = false;

        this.progressInit("@SYS25781", progressTotal, #AviFormLetter);
        progress.setText("@SYS26577");

        setprefix("@SYS25781");

        month       = mthofyr(costMonthClosingDate);
        yr          = year(costMonthClosingDate);
        fromDate    = mkdate(01,month, yr);
        toDate      = endmth(fromDate);

        transDate   = toDate;

        currency    = Ledger::accountingCurrency(CompanyInfo::current());

        if (!this.existACOProdCostTableInPeriod(fromDate, toDate))
        {
            ttsBegin;

            while select acoProdCostTable
            where   acoProdCostTable.TransDate  >= fromDate                         &&
                    acoProdCostTable.TransDate  <= toDate                           &&
                    acoProdCostTable.CostStatus == ACOCostStatus_BR::Created
            {
                select sum(CostAmount) from acoProdOverHeadCostTrans
                order by acoProdOverHeadCostTrans.ProdId
                where   acoProdOverHeadCostTrans.Voucher  == acoProdCostTable.Voucher &&
                        acoProdOverHeadCostTrans.ProdId   == acoProdCostTable.ProdId  &&
                        acoProdOverHeadCostTrans.TransDate  >= fromDate               &&
                        acoProdOverHeadCostTrans.TransDate  <= toDate;

                if (prodId != acoProdCostTable.ProdId)
                {
                    prodTable   = ProdTable::find(acoProdCostTable.ProdId);
                    prodId      = acoProdCostTable.ProdId;

                    if (ledgerVoucher != null)
                    {
                        ledgerVoucher.end();
                    }

                    existsAbsorbedCostsInPeriod = true;

                    this.initVoucher();

                    transactionTxt      = this.initTransactionTxt(LedgerTransTxt::ProdHistoricalCostAdjustment);
                    ledgerVoucher       = this.initLedgerVoucher(transactionTxt, transDate);
                    ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();

                    ledgerVoucherObject.parmDocument(prodTable.transDate(), prodTable.ProdId);
                }

                this.createProdTableJourEntries(prodTable, acoProdOverHeadCostTrans.CostAmount);
                this.createLedgerTransactions(prodTable, ledgerVoucher, acoProdCostTable);
                this.inventTransAdjustment(prodTable, acoProdCostTable, acoProdOverHeadCostTrans.CostAmount);
                this.setACOProdCostTableAsPosted(acoProdCostTable);

                progress.incCount();
            }

            if (ledgerVoucher != null)
            {
                ledgerVoucher.end();
            }

            ttsCommit;
        }

        info(existsAbsorbedCostsInPeriod ? "@GLS223616" : "@GLS223631");
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setACOProdCostTableAsPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the absorbed cost transactions as posted in the general ledger.
    /// </summary>
    /// <param name="_acoProdCostTable">
    /// The <c>ACOProdCostTable_BR</c> record that will me marked as posted.
    /// </param>
    protected void setACOProdCostTableAsPosted(ACOProdCostTable_BR _acoProdCostTable)
    {
        ACOProdCostTable_BR acoProdCostTable;

        acoProdCostTable            = ACOProdCostTable_BR::find(_acoProdCostTable.RecId, true);
        acoProdCostTable.CostStatus = ACOCostStatus_BR::Posted;

        acoProdCostTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@GLS157";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        ACOCostMonthEndClosing_BR costMonthEndClosing = new ACOCostMonthEndClosing_BR();

        if (! costMonthEndClosing.prompt())
            return;

        costMonthEndClosing.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>