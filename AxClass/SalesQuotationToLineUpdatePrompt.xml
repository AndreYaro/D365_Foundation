<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationToLineUpdatePrompt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesQuotationToLineUpdatePrompt</c> class handles the dialog form used in the header to line feature for sales quotations.
/// </summary>
class SalesQuotationToLineUpdatePrompt extends SalesPurchTableToLineUpdatePrompt
{
    DialogButton                copyTaxGroupToMarkupTrans;
    boolean                     wasLineUpdated;
    PriceDiscUpdatePriceDisc    updatePriceDiscMode;
    DialogField                 updatePriceDiscDialogField;
    NoYes                       updatePricedisc;
    Set                         priceDiscUpdateTriggers;
    container                   packedPriceDiskFieldList;
    boolean                     priceDiscChangePolicyExistOnLine;
    NoYes                       alwaysPromtPriceDiscUpdate;

    #define.CurrentVersion(2)
    #localmacro.CurrentList
        packedFieldList,
        packedPreviousAnswers,
        sourceTable,
        copyTaxGroupToMarkupTrans,
        updatePriceDiscMode,
        packedPriceDiskFieldList,
        priceDiscChangePolicyExistOnLine,
        updatePricedisc
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addNewFieldsToDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds new fields to the dialog.
    /// </summary>
    /// <param name="_dialogGroup">
    /// The dialog group to add fields to.
    /// </param>
    /// <param name="_dialog">
    /// The <c>Dialog</c> object to add the field to.
    /// </param>
    /// <param name="_refreshable">
    ///  A Boolean value that indicates whether the new field can be refreshed; optional.
    /// </param>
    protected void addNewFieldsToDialog(DialogGroup _dialogGroup, Dialog _dialog, boolean _refreshable = true)
    {
        super(_dialogGroup, _dialog, _refreshable);
        SalesQuotationTable salesQuotationTable = sourceTable as SalesQuotationTable;

        // If the prevent unintentional price recalculation feature is enabled, for retail sales quotes,
        // the dialog should not show price and discount section.
        boolean shouldSkipPriceAndDiscountSection = RetailPricingCustomizableFeatureToggle::isPreventUnintendedRecalculationEnabled()
            && salesQuotationTable.isRetailSaleQuotation();

        if (!shouldSkipPriceAndDiscountSection)
        {
            updatePriceDiscDialogField = PriceDiscResultFields::promptPriceDiscPolicyUpdate(_dialogGroup,
                                                                                            _dialog,
                                                                                            updatePriceDiscMode,
                                                                                            _refreshable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogSelectCtrl</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the section of the dialog box that is about the price discount policy.
    /// </summary>
    public void dialogSelectCtrl()
    {
        super();

        if (priceDiscChangePolicyExistOnLine && updatePriceDiscDialogField != null)
        {
            if (alwaysPromtPriceDiscUpdate == NoYes::Yes)
            {
                updatePricedisc = alwaysPromtPriceDiscUpdate;
            }
            else
            {
                SetEnumerator priceDiscUpdateTriggersEnumerator = priceDiscUpdateTriggers.getEnumerator();
                while (priceDiscUpdateTriggersEnumerator.moveNext())
                {
                    RefFieldId fieldId = priceDiscUpdateTriggersEnumerator.current();
                    if (fieldList.exists(fieldId))
                    {
                        DialogField dialogField = fieldList.lookup(fieldId);
                        updatePricedisc = dialogField.value();
                        updatePriceDiscDialogField.enabled(updatePricedisc);
                        if (updatePricedisc == NoYes::Yes)
                        {
                            break;
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existNonPromptDialogFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether there exist non prompt dialog fields.
    /// </summary>
    /// <returns>
    /// true if there exist non prompt dialog fields; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Used for adding fields to the dialog that are not in the <c>HeaderToLineUpdate</c> field group in
    /// the <c>SalesQuotationTable</c> table.
    /// </remarks>
    protected boolean existNonPromptDialogFields()
    {
        return priceDiscChangePolicyExistOnLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the field for the given field ID will be enabled on the parameters form.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID to check for enabling.
    /// </param>
    /// <returns>
    /// true if the field should be enabled; otherwise, false.
    /// </returns>
    public boolean fieldEnabled(FieldId _fieldId)
    {
        return SalesQuotationToLineParameters::fieldEnabled(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewFieldsFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets new fields from the dialog.
    /// </summary>
    protected void getNewFieldsFromDialog()
    {
        super();

        if (priceDiscChangePolicyExistOnLine
            && updatePriceDiscDialogField != null)
        {
            updatePriceDiscMode = updatePriceDiscDialogField.value();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID for the header table that is used in the header to line feature.
    /// </summary>
    /// <returns>
    /// The ID for the <c>SalesQuotationTable</c> table.
    /// </returns>
    protected TableId headerTableId()
    {
        return tableNum(SalesQuotationTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerToLineFieldIdList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the fields that are supported by the table-to-line functionality of the module.
    /// </summary>
    /// <returns>
    /// A container of fields that are supported by the table-to-line functionality of the module.
    /// </returns>
    public container headerToLineFieldIdList()
    {
        return SalesQuotationToLineParameters::header2LineFieldIdList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPriceDiscUpdateTriggers</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a list of header fields that trigger update of price and discount on the related body
    ///    lines.
    /// </summary>
    protected void initPriceDiscUpdateTriggers()
    {
        priceDiscUpdateTriggers = new Set(Types::Integer);

        priceDiscUpdateTriggers.add(fieldNum (SalesQuotationTable, CustAccount));
        priceDiscUpdateTriggers.add(fieldNum (SalesQuotationTable, InventSiteId));
        priceDiscUpdateTriggers.add(fieldNum (SalesQuotationTable, InventLocationId));
        priceDiscUpdateTriggers.add(fieldNum (SalesQuotationTable, PriceGroupId));
        priceDiscUpdateTriggers.add(fieldNum (SalesQuotationTable, LineDisc));
        priceDiscUpdateTriggers.add(fieldNum (SalesQuotationTable, ReceiptDateRequested));
        priceDiscUpdateTriggers.add(fieldNum (SalesQuotationTable, ShippingDateRequested));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDependentFieldChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a field is changed beyond the usual comparison.
    /// </summary>
    /// <param name="_fieldId">
    /// The field to be checked.
    /// </param>
    /// <returns>
    /// true if the field is considered changed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This enables each module to check for changes to dependent fields.
    /// </remarks>
    protected boolean isDependentFieldChanged(FieldId _fieldId)
    {
        if (_fieldId == fieldNum(SalesQuotationTable, InventLocationId))
        {
            if (this.isFieldChanged(fieldNum(SalesQuotationTable, InventSiteId)))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the individual part of a field array have been changed.
    /// </summary>
    /// <param name="_arrayFieldId">
    /// The field to be checked.
    /// </param>
    /// <returns>
    /// true if the field value changed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This must be done by each module on the concrete table. The field comparison will not work directly
    /// on the sourceTable, as xRecord.orig().(fieldId) does not compile.
    /// </remarks>
    protected boolean isFieldChanged(FieldId _arrayFieldId)
    {
        SalesQuotationTable salesQuotationTable = sourceTable as SalesQuotationTable;

        return salesQuotationTable.(_arrayFieldId) != salesQuotationTable.orig().(_arrayFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lines2Update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether there are sales quotation lines to update.
    /// </summary>
    /// <returns>
    /// true if there are sales quotation lines to update; otherwise, false.
    /// </returns>
    protected boolean lines2Update()
    {
        SalesQuotationTable salesQuotationTable = sourceTable as SalesQuotationTable;

        return SalesQuotationLine::exist(salesQuotationTable.QuotationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        this.initPriceDiscUpdateTriggers();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFieldObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>SalesPurchTableToLineField</c> class based on a field IS.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID to create the <c>SalesPurchTableToLineField</c> class from.
    /// </param>
    /// <returns>
    /// A <c>SalesPurchTableToLineField</c> class.
    /// </returns>
    protected SalesPurchTableToLineField newFieldObject(FieldId _fieldId)
    {
        return SalesQuotationToLineField::newFieldId(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        packedFieldList          = updateFields.pack();
        packedPriceDiskFieldList = priceDiscUpdateTriggers.pack();
        this.packPreviousAnswers();
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyTaxGroupToMarkupTrans</Name>
				<Source><![CDATA[
    public DialogButton parmCopyTaxGroupToMarkupTrans(DialogButton _copyTaxGroupToMarkupTrans = copyTaxGroupToMarkupTrans)
    {
        copyTaxGroupToMarkupTrans = _copyTaxGroupToMarkupTrans;

        return copyTaxGroupToMarkupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceTable</Name>
				<Source><![CDATA[
    public Common parmSourceTable(Common _sourceTable = null)
    {
        Common ret = super(_sourceTable);

        if (_sourceTable)
        {
            SalesQuotationTable salesQuotationTable = _sourceTable as SalesQuotationTable;
            priceDiscChangePolicyExistOnLine = salesQuotationTable.priceDiscChangePolicyExistOnLine();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceDiscFieldsToUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether any header field configured to always update the lines are of the type triggering
    /// recalculation of prices or discounts.
    /// </summary>
    /// <returns>
    /// true if any always-update lines fields are changed and subject to trigger price or discount
    /// recalculation; otherwise, false.
    /// </returns>
    protected boolean priceDiscFieldsToUpdate()
    {
        boolean                     priceDiscFieldsToUpdate;

        ListEnumerator salesQuotationToLineUpdateFieldsEnumerator = updateFields.getEnumerator();
        while (salesQuotationToLineUpdateFieldsEnumerator.moveNext() && !priceDiscFieldsToUpdate)
        {
            SalesQuotationToLineField salesQuotationToLineField = salesQuotationToLineUpdateFieldsEnumerator.current();
            if (priceDiscUpdateTriggers.in(salesQuotationToLineField.parmFieldId())
            && salesQuotationToLineField.parmUpdateLines())
            {
                priceDiscFieldsToUpdate = true;
                break;
            }
        }

        return priceDiscFieldsToUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds and executes the dialog form used in the header to line feature for sales quotations.
    /// </summary>
    /// <returns>
    /// true if the dialog box has been closed using the OK button; otherwise, false.
    /// </returns>
    public boolean prompt()
    {
        boolean ret = super();

        if (ret
            && updatePricedisc == NoYes::Yes
            && (priceDiscChangePolicyExistOnLine
            &&  updatePriceDiscMode == PriceDiscUpdatePriceDisc::UpdateIndividual))
        {
            SalesQuotationTable salesQuotationTable = sourceTable as SalesQuotationTable;
            ret = salesQuotationTable.PriceDiscResultFields::updateLinePolicies();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        if (!this.fieldsToUpdate())
        {
            wasLineUpdated = false;
            return;
        }

        SalesQuotationToLineUpdate quotationToLineUpdate = SalesQuotationToLineUpdate::construct(this);

        quotationToLineUpdate.parmUpdatePricedisc(updatePricedisc);
        quotationToLineUpdate.parmUpdatePriceDiscMode(updatePriceDiscMode);
        
        quotationToLineUpdate.parmCopyTaxGroupToMarkupTrans(copyTaxGroupToMarkupTrans);
        quotationToLineUpdate.update();
        wasLineUpdated = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean         ret;
        Integer         version    = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                ret = true;
                break;

            default:
                ret = false;
        }

        if (ret)
        {
            //When moving data from server to client, we need to copy all updateFields list,
            //because dialog() is using it. Otherwise, it is better to move only checkbox results in order not
            //to overwrite changed settings in updateFields
            if (!updateFields)
            {
                updateFields = List::create(packedFieldList);
            }
            else
            {
                this.unpackPreviousAnswers();
            }

            priceDiscUpdateTriggers     = Set::create(packedPriceDiskFieldList);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wasLineUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the sales quotation line was updated.
    /// </summary>
    /// <returns>
    /// true if line was updated; otherwise, false
    /// </returns>
    public boolean wasLineUpdated()
    {
        return wasLineUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>SalesQuotationToLineUpdatePrompt</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>SalesQuotationToLineUpdatePrompt</c> class.
    /// </returns>
    public static SalesQuotationToLineUpdatePrompt construct()
    {
        return new SalesQuotationToLineUpdatePrompt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS180174";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newExecutePrompt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>SalesQuotationToLineUpdatePrompt</c> class and executes the <c>prompt</c> instance method.
    /// </summary>
    /// <param name="_salesQuotationTable">
    ///    A buffer of the <c>SalesQuotationTable</c> table.
    /// </param>
    /// <param name="_copyTaxGroupToMarkupTrans">
    ///    A DialogButton type.
    /// </param>
    /// <returns>
    ///    An initiated instance the <c>SalesQuotationToLineUpdatePrompt</c> class if any fields are to be updated; otherwise,
    ///    a nulled object of the <c>SalesQuotationToLineUpdatePrompt</c> class.
    /// </returns>
    public static SalesQuotationToLineUpdatePrompt newExecutePrompt(
        SalesQuotationTable _salesQuotationTable,
        DialogButton _copyTaxGroupToMarkupTrans)
    {
        SalesQuotationToLineUpdatePrompt salesQuotationToLineUpdatePrompt = SalesQuotationToLineUpdatePrompt::newFromSalesQuotationTable(_salesQuotationTable);

        salesQuotationToLineUpdatePrompt.parmCopyTaxGroupToMarkupTrans(_copyTaxGroupToMarkupTrans);

        salesQuotationToLineUpdatePrompt.parmExtendedPromptReturnValue(salesQuotationToLineUpdatePrompt.prompt());

        if (!salesQuotationToLineUpdatePrompt.fieldsToUpdate())
        {
            salesQuotationToLineUpdatePrompt = null;
        }

        return salesQuotationToLineUpdatePrompt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    public Object dialog()
    {
        updatePricedisc = this.priceDiscFieldsToUpdate();

        dialog = super();

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSalesQuotationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>SalesQuotationToLineUpdatePrompt</c> class based on a
    /// <c>SalesQuotationTable</c> record.
    /// </summary>
    /// <param name="_salesQuotationTable">
    /// A <c>SalesQuotationTable</c> record to initialize the <c>SalesQuotationToLineUpdatePrompt</c> class
    /// from.
    /// </param>
    /// <returns>
    /// An instance of the <c>SalesQuotationToLineUpdatePrompt</c> class.
    /// </returns>
    public static SalesQuotationToLineUpdatePrompt newFromSalesQuotationTable(SalesQuotationTable _salesQuotationTable)
    {
        SalesQuotationToLineUpdatePrompt    salesQuotationToLineUpdatePrompt = SalesQuotationToLineUpdatePrompt::construct();

        //Call getLast to prevent it from being called during prompt, thus rewriting the field list with saved values
        salesQuotationToLineUpdatePrompt.getLast();

        //Get previous answers from saved field list and store them
        salesQuotationToLineUpdatePrompt.packPreviousAnswers();

        salesQuotationToLineUpdatePrompt.parmSourceTable(_salesQuotationTable);

        return salesQuotationToLineUpdatePrompt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>