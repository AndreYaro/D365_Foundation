<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMovementFactoryAttribute</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventMovementFactoryAttribute</c> class can decorate subclasses of <c>InventMovement</c>
/// with the type of argument (and if necessary the <c>InventMovSubType</c>) with which instances of them should be created.
/// </summary>
class InventMovementFactoryAttribute extends SysAttribute implements SysExtensionIAttribute
{
    str tableName;
    InventMovSubType inventMovSubType;

    int numberOfDefaultParameters;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(str _tableName, InventMovSubType _inventMovSubType = InventMovSubType::None)
    {
        tableName = _tableName;
        inventMovSubType = _inventMovSubType;
        if (prmIsDefault(_inventMovSubType))
        {
            numberOfDefaultParameters++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the key used for storing cached data for this attribute.
    /// </summary>
    /// <returns>
    /// A string representing the cache key.
    /// </returns>
    /// <remarks>
    /// The key typically includes the class name and relevant members.
    /// The key must be invariant across different languages, e.g. use int2str() instead of enum2str() when including enum members.
    /// </remarks>
    public str parmCacheKey()
    {
        return classStr(InventMovementFactoryAttribute)
            +';'+int2Str(numberOfDefaultParameters)
            +';'+tableName
            +';'+int2Str(enum2int(inventMovSubType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSingleton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the same instance should be returned by the extension framework for a given extension.
    /// </summary>
    /// <returns>
    /// true, if the same instance should be used; otherwise, false.
    /// </returns>
    /// <remarks>
    /// When returning false, the SysExtension framework will create a new class instance for every invocation.
    /// If the class is immutable, consider returning true to save memory and gain performance.
    /// </remarks>
    public boolean useSingleton()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>