<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceJourDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustInvoiceJourDP</c> class fetches records for the <c>CustInvoiceJour</c> report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(CustInvoiceJour)),
    SRSReportParameterAttribute(classstr(CustInvoiceJourContract))
]

public class CustInvoiceJourDP extends SRSReportDataProviderBase
{
    CustInvoiceJourTmp custInvoiceJourTmp;
    CustInvoiceJour custInvoiceJour;
    TaxCode addTax;
    MarkupCode finIncome;
    boolean calculateAdditionalTax;

    // <GEECZ>
    CurrencyCode accountingCurrency;
    boolean countryRegion_CZ;
    #ISOCountryRegionCodes
    // </GEECZ>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>additionalTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates additional Tax Amount value.
    /// </summary>
    /// <returns>
    ///  TaxAmountCur value.
    /// </returns>
    private TaxAmountCur additionalTaxAmount()
    {
        TaxAmountCur taxAmountCur;

        if (!calculateAdditionalTax)
        {
            return taxAmountCur;
        }

        TaxSpec taxSpec = TaxSpec::construct(custInvoiceJour.LedgerVoucher, custInvoiceJour.InvoiceDate, custInvoiceJour.RecId);

        while (taxSpec.parmTaxSpec())
        {
            if (taxSpec.taxCode() == addTax)
            {
                taxAmountCur += taxSpec.taxAmount();
            }
        }

        return -taxAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>financialIncome</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates financial Income value.
    /// </summary>
    /// <returns>
    /// AmountCur value.
    /// </returns>
    private AmountCur financialIncome()
    {
        CustInvoiceTrans custInvoiceTrans;
        MarkupTransView markupTransView;
        AmountCur postedAmount;

        postedAmount = 0;

        select sum(PostedAmount) from markupTransView
            where markupTransView.TransRecId == custInvoiceJour.RecId &&
                    markupTransView.TransTableId == custInvoiceJour.TableId &&
                    markupTransView.ModuleType == MarkupModuleType::Cust &&
                    markupTransView.MarkupCode == finIncome &&
                    markupTransView.PostedAmount != 0 &&
                    !markupTransView.IsDeleted;

        postedAmount += markupTransView.PostedAmount;

        select sum(PostedAmount) from markupTransView
            where markupTransView.ModuleType == MarkupModuleType::Cust &&
                    markupTransView.MarkupCode == finIncome &&
                    markupTransView.PostedAmount != 0 &&
                    !markupTransView.IsDeleted
            join RecId from custInvoiceTrans
                where custInvoiceTrans.RecId == markupTransView.TransRecId &&
                custInvoiceTrans.TableId == markupTransView.TransTableId &&
                custInvoiceTrans.SalesId == custInvoiceJour.SalesId &&
                custInvoiceTrans.InvoiceId == custInvoiceJour.InvoiceId &&
                custInvoiceTrans.InvoiceDate == custInvoiceJour.InvoiceDate &&
                custInvoiceTrans.numberSequenceGroup == custInvoiceJour.numberSequenceGroup;

        postedAmount += markupTransView.PostedAmount;

        return postedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustInvoiceJourTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data for the report from the temporary table.
    /// </summary>
    /// <returns>
    /// The temporary table <c>CustInvoiceJourTmp</c>.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(CustInvoiceJourTmp))
    ]
    public CustInvoiceJourTmp getCustInvoiceJourTmp()
    {
        select custInvoiceJourTmp;
        return custInvoiceJourTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMarkupTransPostedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the posted amount for all <c>MarkupTrans</c> records for the referenced transaction record ID and table ID.
    /// </summary>
    /// <param name="_transTableId">
    ///     The table ID of the transaction record referenced by the <c>MarkupTrans</c> records.
    /// </param>
    /// <param name="_transRecId">
    ///     The record ID of the transaction record referenced by the <c>MarkupTrans</c> records.
    /// </param>
    /// <returns>
    ///     The sum of the posted amounts.
    /// </returns>
    private AmountCur getMarkupTransPostedAmount(RefTableId _transTableId, RefRecId _transRecId)
    {
        MarkupTrans markupTrans;
        AmountCur postedAmount;

        if (_transRecId && _transTableId)
        {
            select sum(Posted), sum(Value) from markupTrans
                where markupTrans.TransRecId == _transRecId &&
                      markupTrans.TransTableId == _transTableId &&
                      markupTrans.ModuleType == MarkupModuleType::Cust &&
                      markupTrans.MarkupCode == finIncome &&
                     !markupTrans.IsDeleted;

            postedAmount = sign(markupTrans.Value) * abs(markupTrans.Posted);
        }

        return postedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustInvoiceJourTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records to <c>CustInvoiceJourTmp</c> temporary table.
    /// </summary>
    private void insertCustInvoiceJourTmp()
    {
        // <GEECZ>
        CustTrans custTrans;
        // </GEECZ>
        RefRecId custBillingClassification;

        custInvoiceJourTmp.InvoiceId = custInvoiceJour.InvoiceId;
        custInvoiceJourTmp.InvoiceDate = custInvoiceJour.InvoiceDate;
        custInvoiceJourTmp.NumberSequenceGroup = custInvoiceJour.NumberSequenceGroup;
        custInvoiceJourTmp.InvoiceAccount = custInvoiceJour.InvoiceAccount;
        custInvoiceJourTmp.CustName = custInvoiceJour.InvoicingName;
        custInvoiceJourTmp.SumLineDisc = custInvoiceJour.SumLineDisc;
        custInvoiceJourTmp.SumMarkup = custInvoiceJour.SumMarkup;
        custInvoiceJourTmp.FinancialIncome = this.financialIncome();
        custInvoiceJourTmp.EndDisc = custInvoiceJour.EndDisc;
        custInvoiceJourTmp.SumTax = custInvoiceJour.SumTax;
        custInvoiceJourTmp.AdditionalTaxAmount = this.additionalTaxAmount();
        custInvoiceJourTmp.CurrencyCode = custInvoiceJour.CurrencyCode;
        custInvoiceJourTmp.InvoiceAmount = custInvoiceJour.InvoiceAmount;
        custInvoiceJourTmp.InvoiceAmountMST = custInvoiceJour.InvoiceAmountMST; ///.amountMST(custInvoiceJour.InvoiceAmount);
        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            custInvoiceJourTmp.FiscalEstablishmentId = FiscalEstablishment_BR::find(custInvoiceJour.custInvoiceJour_BR().FiscalEstablishment_BR).FiscalEstablishmentId;
        }
        // </GBR>
        custBillingClassification = CustTrans::findFromInvoice(custInvoiceJour.InvoiceId, custInvoiceJour.InvoiceAccount).CustBillingClassification;

        if (custBillingClassification)
        {
            custInvoiceJourTmp.BillingClassification = CustBillingClassification::find(custBillingClassification).BillingClassification;
        }
        // <GEECZ>
        if (countryRegion_CZ)
        {
            custInvoiceJourTmp.AccountingCurrency = accountingCurrency;

            custInvoiceJourTmp.DueDate = custInvoiceJour.DueDate;
            custInvoiceJourTmp.VATDueDate = custInvoiceJour.vatDueDate_W();
            custInvoiceJourTmp.LedgerVoucher = custInvoiceJour.LedgerVoucher;
            custInvoiceJourTmp.CustRegNum = CustTable::find(custInvoiceJour.InvoiceAccount).getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, custInvoiceJour.InvoiceDate);
            custInvoiceJourTmp.SumTaxMST = custInvoiceJour.SumTaxMST;

            select sum(SettleAmountMST), sum(SettleAmountCur) from custTrans
                where custTrans.AccountNum == custInvoiceJour.OrderAccount &&
                    custTrans.TransDate == custInvoiceJour.InvoiceDate &&
                    custTrans.Invoice == custInvoiceJour.InvoiceId;

            custInvoiceJourTmp.SettleAmountCur = custTrans.SettleAmountCur;
            custInvoiceJourTmp.SettleAmountMST = custTrans.SettleAmountMST;
        }
        // </GEECZ>

        custInvoiceJourTmp.insert();
        custInvoiceJourTmp.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Retrieves records based on the parameters entered.
    /// </summary>
    public void processReport()
    {
        QueryRun queryRun;

        boolean isPublicSectorScenario;
        List listBillingClassification;
        QueryBuildDataSource qbdsCustTrans;

        CustInvoiceJourContract contract = this.parmDataContract() as CustInvoiceJourContract;

        addTax = contract.parmSalesTaxCode();
        calculateAdditionalTax = (addTax != "") ? true : false;
        finIncome = contract.parmMiscChargesCode();

        // <GEECZ>
        countryRegion_CZ = SysCountryRegionCode::countryInfo() == #isoCZ;

        if (countryRegion_CZ)
        {
            accountingCurrency = Ledger::accountingCurrencyByLedger(Ledger::current());
        }
        // </GEECZ>

        queryRun = new QueryRun(this.parmQuery());

        listBillingClassification = contract.parmBillingClassification();
        isPublicSectorScenario = CustBillingClassificationReportManager::isPublicSectorScenario(listBillingClassification)
                                            && !BrazilParameters::isEnabled();

        if (isPublicSectorScenario)
        {
            qbdsCustTrans = queryRun.query().dataSourceTable(tableNum(CustInvoiceJour)).addDataSource(tableNum(CustTrans));
            qbdsCustTrans.joinMode(JoinMode::InnerJoin);
            qbdsCustTrans.relations(true);

            CustBillingClassificationReportManager::setBillingClassificationRanges(qbdsCustTrans, listBillingClassification, contract.parmInclTransWithNoBillingClass(), fieldNum(CustTrans, CustBillingClassification));
        }

        while (queryRun.next())
        {
            custInvoiceJour = queryRun.get(tablenum(CustInvoiceJour));
            this.insertCustInvoiceJourTmp();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>