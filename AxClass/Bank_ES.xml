<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Bank_ES</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class Bank_ES extends Bank
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBankAccount</Name>
				<Source><![CDATA[
    public boolean checkBankAccount(BankAccountMap _bankAccountMap)
    {
        return this.checkBankAccountNum(_bankAccountMap.AccountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBankAccountNum</Name>
				<Source><![CDATA[
    public boolean checkBankAccountNum(BankAccount _bankAccount)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceES00013, funcName());

        int digit, multiply;
        int sum1 = 0;
        int sum2 = 0;

        int i = strLen(_bankAccount);
        if (!i)
        {
            return true;
        }

        if (i != 20)
        {
            return checkFailed(strFmt("@SYS54162", 20));
        }

        for (i = 0; i < 20; i = i)
        {
            do
            {
                i++;
                digit = char2Num(_bankAccount, i) - char2num('0', 1);
                if (digit < 0 || digit > 9)
                {
                    return checkFailed("@SYS97947");
                }
            }
            while (i == 9 || i == 10);

            switch ((i < 9 ? i + 2 : i) mod 10)
            {
                case 0: multiply = 6; break;
                case 1: multiply = 1; break;
                case 2: multiply = 2; break;
                case 3: multiply = 4; break;
                case 4: multiply = 8; break;
                case 5: multiply = 5; break;
                case 6: multiply = 10; break;
                case 7: multiply = 9; break;
                case 8: multiply = 7; break;
                case 9: multiply = 3; break;
            }

            if (i < 9)
            {
                sum1 += digit * multiply;
            }
            else
            {
                sum2 += digit * multiply;
            }
        }

        if (!this.checkDigit(subStr(_bankAccount, 9, 1), sum1))
        {
            return checkFailed(strFmt("@SYS54163",1));
        }

        if (!this.checkDigit(subStr(_bankAccount, 10, 1), sum2))
        {
            return checkFailed(strfmt("@SYS54163",2));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDigit</Name>
				<Source><![CDATA[
    private boolean checkDigit(str _checkDigit, int _dividend)
    {
        int i = 11 - (_dividend mod 11);

        switch (i)
        {
            case 10:
                i = 1;
                break;

            case 11:
                i = 0;
                break;
        }

        return str2Int(_checkDigit) == i;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite(BankAccountMap _bankAccountMap)
    {
        boolean ret = true;

        if (_bankAccountMap.AccountNum && _bankAccountMap.fieldAccessRight(fieldstr(BankAccountMap, AccountNum)) != AccessRight::NoAccess)
        {
            ret = this.checkBankAccountNum(_bankAccountMap.AccountNum);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>