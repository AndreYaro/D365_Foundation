<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendBalanceListController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>VendBalanceListController</c> class starts the vendor balance list report.
/// </summary>
class VendBalanceListController extends SrsReportRunController implements BatchRetryable
{
    TransDate transDate;

    const SRSCatalogItemName reportNameLocal = 'VendBalanceList.Report';
    const str parameterAsOnDate = 'AsOn';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getUIBuilderForDataContractInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the UI builder instance to be used with the data contract.
    /// </summary>
    /// <param name="_contractInfo">
    ///     A <c>SysOperationDataContractInfo</c> instance.
    /// </param>
    /// <returns>
    ///     A <c>SysOperationUIBuilder</c> instance.
    /// </returns>
    /// <remarks>
    ///     Since the <c>VendBalanceList</c> report is not an RDP based report, this method
    ///     is overridden to allow hooking up the custom UI builder class with the report.
    /// </remarks>
    protected SysOperationUIBuilder getUIBuilderForDataContractInfo(SysOperationDataContractInfo _contractInfo)
    {
        SysOperationUIBuilder ret;

        if (_contractInfo is SrsReportRdlDataContractInfo)
        {
            ret = new VendBalanceListUIBuilder(dialog, this, _contractInfo.key());
        }
        else
        {
            ret = super(_contractInfo);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Override this method to change the report contract before running the report.
    /// </summary>
    protected void preRunModifyContract()
    {
        transDate = this.parmReportContract().parmRdlContract().getParameter(parameterAsOnDate).getValueTyped();
        this.setRanges(this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey()), transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Modifies the report query and parameters based on the arguments.
    /// </summary>
    /// <param name="_query">
    ///    A <c>Query</c> object.
    /// </param>
    /// <param name="_transDate">
    ///    A <c>TransDate</c> object.
    /// </param>
    public void setRanges(Query _query, TransDate _transDate)
    {
        QueryBuildRange queryBuildRange;
        QueryBuildDataSource queryBuildDataSource;

        queryBuildDataSource = SysQuery::findOrCreateDataSource(_query, tableNum(VendTrans));

        queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(VendTrans, TransDate));
        // Assign value to the TransDate field.
        queryBuildRange.value(strFmt('%1..%2', dateNull(), _transDate));

        // Set the range status to Hidden.
        queryBuildRange.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        VendBalanceListController controller = new VendBalanceListController();

        controller.parmReportName(reportNameLocal);
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>