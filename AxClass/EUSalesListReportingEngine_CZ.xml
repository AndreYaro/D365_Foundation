<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EuSalesListReportingEngine_CZ</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>EUSalesListReportingEngine_CZ</c> extends the functionality of <c>EUSalesListReportingEngine</c>
///     class to support requirements specific to Czech Republic.
/// </summary>
#ISOCountryRegionCodes
[CountryRegionAttribute(#isoCZ)]
class EuSalesListReportingEngine_CZ extends EUSalesListReportingEngineCorrections implements BatchRetryable
{
    Set             setOfIncludedItemInvoices;
    Set             setOfIncludedTriangularInvoices;
    Set             setOfIncludedServiceInvoices;
    Set             setOfIncludedPropertyMovingInvoices;

    AmountMST           totalAmountPropertyMoving;
    AmountMST           totalCancelledAmountPropertyMoving;

    IntrastatParameters intrastatParameters;

    private HcmWorkerRecId              authorizedBy;
    private CzAuthorizedByRole          authorizedByRole;
    private HcmWorkerRecId              filledBy;
    private CzCompanyNameAppendix       companyNameAppendix;
    private TaxpayerType_CZ             taxPayerType;
    private PersonTitle                 personTitle;
    private NaturalPersonFirstName_CZ   naturalPersonFirstName;
    private NaturalPersonLastName_CZ    naturalPersonLastName;

    private DialogField     fieldAuthorizedBy;
    private DialogField     fieldAuthorizedByRole;
    private DialogField     fieldFilledBy;
    private DialogField     fieldCompanyNameAppendix;
    private DialogField     fieldTaxPayerType;
    private DialogField     fieldPersonTitle;
    private DialogField     fieldNaturalPersonFirstName;
    private DialogField     fieldNaturalPersonLastName;

    private TaxParameters taxParameters;
    private boolean isMultipleTaxIdEnabledForEUSalesList;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addHeader</Name>
				<Source><![CDATA[
    protected EUSalesListReportingHeader addHeader()
    {
        EUSalesListReportingHeader  euSalesListReportingHeader;
        LogisticsPostalAddress      logisticsPostalAddress;
        HcmWorker                   hcmWorker;
        DirPersonName               dirPersonName;

        euSalesListReportingHeader = super();

        euSalesListReportingHeader.TaxAuthority = isMultipleTaxIdEnabledForEUSalesList
            ? (select firstonly TaxAuthorityAddressRegistration
                where taxAuthorityAddressRegistration.TaxID == taxRegistrationRecId).TaxAuthority
            : intrastatParameters.TaxAuthority_CZ;
        euSalesListReportingHeader.HcmWorkerRecId = isMultipleTaxIdEnabledForEUSalesList ? authorizedBy : intrastatParameters.AuthorizedBy_CZ;
        euSalesListReportingHeader.AuthorizedByRole_CZ = isMultipleTaxIdEnabledForEUSalesList ? authorizedByRole : intrastatParameters.AuthorizedByRole_CZ;
        euSalesListReportingHeader.CompanyNameAppendix_CZ = isMultipleTaxIdEnabledForEUSalesList ? companyNameAppendix : intrastatParameters.CompanyNameAppendix_CZ;
        euSalesListReportingHeader.TaxpayerType_CZ = isMultipleTaxIdEnabledForEUSalesList ? taxPayerType : taxParameters.TaxpayerType_CZ;
        euSalesListReportingHeader.PersonTitle_CZ = isMultipleTaxIdEnabledForEUSalesList ? personTitle : taxParameters.PersonTitle_CZ;
        euSalesListReportingHeader.NaturalPersonFirstName_CZ = isMultipleTaxIdEnabledForEUSalesList ? naturalPersonFirstName : taxParameters.NaturalPersonFirstName_CZ;
        euSalesListReportingHeader.NaturalPersonLastName_CZ = isMultipleTaxIdEnabledForEUSalesList ? naturalPersonLastName : taxParameters.NaturalPersonLastName_CZ;

        HcmWorkerRecId filledByLoc = isMultipleTaxIdEnabledForEUSalesList ? filledBy : intrastatParameters.FilledBy;

        if (filledByLoc)
        {
            hcmWorker = HcmWorker::find(filledByLoc);
            euSalesListReportingHeader.Phone = hcmWorker.phone();

            dirPersonName = DirPersonName::find(hcmWorker.Person);
            euSalesListReportingHeader.FilledByFirstName_CZ = dirPersonName.FirstName;
            euSalesListReportingHeader.FilledByLastName_CZ = dirPersonName.LastName;
        }

        LegalEntityRecId legalEntityRecId = isMultipleTaxIdEnabledForEUSalesList ? CompanyInfo::find().RecId : intrastatParameters.LegalEntityRecId;

        if (legalEntityRecId)
        {
            euSalesListReportingHeader.LegalEntity = legalEntityRecId;
            euSalesListReportingHeader.euSalesListTaxCode = isMultipleTaxIdEnabledForEUSalesList
                ? TaxCountryRegionParameters::find(TaxRegistration::find(taxRegistrationRecId).showCountryId()).SalesTaxCode
                : TaxCountryRegionParameters::find(DirParty::primaryPostalAddress(legalEntityRecId).CountryRegionId).SalesTaxCode;
        }

        // Strip CoRegNum
        euSalesListReportingHeader.StrippedVATNum = TaxVATNumTable::stripVATNum(
            isMultipleTaxIdEnabledForEUSalesList
                ? TaxRegistration::find(taxRegistrationRecId).RegistrationNumber
                : CompanyInfo::findRecId(euSalesListReportingHeader.LegalEntity).CoRegNum,
            euSalesListReportingHeader.euSalesListTaxCode);

        // Set reference to address. This is either explicitly defined in parameters, or defaulted from the legal entity for which we are reporting
        LogisticsLocationRecId location = isMultipleTaxIdEnabledForEUSalesList
            ? DirPartyLocation::findRec(TaxRegistration::find(taxRegistrationRecId).DirPartyLocation).Location
            : intrastatParameters.Location;

        logisticsPostalAddress = location ?
            LogisticsPostalAddress::findByLocation(location) :
            CompanyInfo::findRecId(euSalesListReportingHeader.LegalEntity).postalAddress();

        euSalesListReportingHeader.LogisticsPostalAddressAlternate = logisticsPostalAddress.RecId;
        euSalesListReportingHeader.CompanyCountryName_CZ  = LogisticsAddressCountryRegionTranslation::find(logisticsPostalAddress.CountryRegionId).ShortName;

        euSalesListReportingHeader.update();

        return euSalesListReportingHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLine</Name>
				<Source><![CDATA[
    protected EUSalesListReportingLine addLine(RefRecId _euSalesListReportingGroupRecId)
    {
        EUSalesListReportingLine    ret;

        ret = super(_euSalesListReportingGroupRecId);

        this.initInvoiceTracking();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLineToTotals</Name>
				<Source><![CDATA[
    protected void addLineToTotals(EUSalesListReportingLine _euSalesListReportingLine)
    {
        super(_euSalesListReportingLine);

        amountCount = _euSalesListReportingLine.PropertyMovingAmountMST_CZ ? amountCount + 1 : amountCount;

        if (_euSalesListReportingLine.Cancelled)
        {
            totalCancelledAmountPropertyMoving  += _euSalesListReportingLine.PropertyMovingAmountMST_CZ;
        }
        else
        {
            totalAmountPropertyMoving   += _euSalesListReportingLine.PropertyMovingAmountMST_CZ;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyCorrectionLogic</Name>
				<Source><![CDATA[
    protected EUSalesListReportingLine applyCorrectionLogic(EUSalesListReportingLine _euSalesListReportingLine)
    {
        EUSalesListReportingLine    previouslyReportedLine = super(_euSalesListReportingLine);

        if (previouslyReportedLine.RecId)
        {
            this.applyCorrectionLogicForAmount(previouslyReportedLine, _euSalesListReportingLine, fieldNum(EUSalesListReportingLine, PropertyMovingAmountMST_CZ));
        }

        return previouslyReportedLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyCorrectionLogicForAmount</Name>
				<Source><![CDATA[
    protected void applyCorrectionLogicForAmount(
        EUSalesListReportingLine    _previouslyReportedLine,
        EUSalesListReportingLine    _euSalesListReportingLine,
        FieldId                     _amountFieldId)
    {
        FieldId                     invoiceCountFieldId;

        super(_previouslyReportedLine, _euSalesListReportingLine, _amountFieldId);

        switch (_amountFieldId)
        {
            case fieldNum(EUSalesListReportingLine, ItemAmountMST):              invoiceCountFieldId = fieldNum(EUSalesListReportingLine, NumberOfItemInvoices_CZ); break;
            case fieldNum(EUSalesListReportingLine, ServiceAmountMST):           invoiceCountFieldId = fieldNum(EUSalesListReportingLine, NumberOfServiceInvoices_CZ); break;
            case fieldNum(EUSalesListReportingLine, TriangularAmountMST):        invoiceCountFieldId = fieldNum(EUSalesListReportingLine, NumberOfTriangularInvoices_CZ); break;
            case fieldNum(EUSalesListReportingLine, PropertyMovingAmountMST_CZ): invoiceCountFieldId = fieldNum(EUSalesListReportingLine, NumberOfPropertyMovingInvoices_CZ); break;
            default:
                // Non-supported amount type. Do nothing.
                return;
        }

        if (!_previouslyReportedLine.(_amountFieldId))
        {
            _previouslyReportedLine.(invoiceCountFieldId) = 0.00;
        }
        if (!_euSalesListReportingLine.(_amountFieldId))
        {
            _euSalesListReportingLine.(invoiceCountFieldId) = 0.00;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateGrandTotals</Name>
				<Source><![CDATA[
    protected void calculateGrandTotals(EUSalesListReportingHeader _euSalesListReportingHeader)
    {
        _euSalesListReportingHeader.TotalAmountPropertyMoving_CZ = totalAmountPropertyMoving;
        _euSalesListReportingHeader.TotalCancelledAmountPropertyMoving_CZ = totalCancelledAmountPropertyMoving;

        super(_euSalesListReportingHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInvoiceTracking</Name>
				<Source><![CDATA[
    private void initInvoiceTracking()
    {
        setOfIncludedItemInvoices = new Set(Types::String);
        setOfIncludedTriangularInvoices = new Set(Types::String);
        setOfIncludedServiceInvoices = new Set(Types::String);
        setOfIncludedPropertyMovingInvoices = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEmptyLine</Name>
				<Source><![CDATA[
    protected boolean isEmptyLine(EUSalesListReportingLine _euSalesListReportingLine)
    {
        boolean ret;

        ret = super(_euSalesListReportingLine) && _euSalesListReportingLine.PropertyMovingAmountMST_CZ == 0;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        this.initInvoiceTracking();
        intrastatParameters = IntrastatParameters::find();
        taxParameters = TaxParameters::find();
        isMultipleTaxIdEnabledForEUSalesList = TaxIntegrationUtils::isMultipleTaxIdEnabledForEUSalesList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLastLineAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>EUSalesListReportingLineAmountItems</c> table buffers with updated amounts.
    /// </summary>
    /// <param name="_euSalesListReportingLine">
    ///    The <c>EUSalesListReportingLine</c> table buffer.
    /// </param>
    /// <remarks>
    ///    This method is overwritten to save the number of unique invoices covered by the reported line.
    /// </remarks>
    protected void saveLastLineAmounts(EUSalesListReportingLine _euSalesListReportingLine)
    {
        _euSalesListReportingLine.NumberOfItemInvoices_CZ = setOfIncludedItemInvoices.elements();
        _euSalesListReportingLine.NumberOfTriangularInvoices_CZ = setOfIncludedTriangularInvoices.elements();
        _euSalesListReportingLine.NumberOfServiceInvoices_CZ = setOfIncludedServiceInvoices.elements();
        _euSalesListReportingLine.NumberOfPropertyMovingInvoices_CZ = setOfIncludedPropertyMovingInvoices.elements();

        super(_euSalesListReportingLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackInvoiceNumbers</Name>
				<Source><![CDATA[
    private void trackInvoiceNumbers(EUSalesList _euSalesList)
    {
        if (_euSalesList.AmountMST)
        {
            switch (_euSalesList.Listcode)
            {
                case Listcode::EUTrade:
                case Listcode::ProductionOnToll:
                    setOfIncludedItemInvoices.add(_euSalesList.Invoice);
                    break;

                case Listcode::TriangularEUTrade:
                case Listcode::TriangularProductionOnToll:
                    setOfIncludedTriangularInvoices.add(_euSalesList.Invoice);
                    break;

                case Listcode::PropertyMoving_CZ:
                    setOfIncludedPropertyMovingInvoices.add(_euSalesList.Invoice);
                    break;

                default:
                    // Non-supported listcode. Do nothing.
            }
        }

        if (_euSalesList.ServiceAmountMST)
        {
            setOfIncludedServiceInvoices.add(_euSalesList.Invoice);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLineAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the line amounts and totals by using the current record in query.
    /// </summary>
    /// <param name="_euSalesListReportingLine">
    ///    The <c>EUSalesListReportingLine</c> table buffer.
    /// </param>
    /// <remarks>
    ///    This method is overwritten to keep track of the unique invoices covered by the reported line.
    /// </remarks>
    protected void updateLineAmounts(EUSalesListReportingLine _euSalesListReportingLine)
    {
        EUSalesList                 euSalesList;

        euSalesList = queryRun.get(tableNum(EUSalesList));
        this.trackInvoiceNumbers(euSalesList);

        if (euSalesList.AmountMST && euSalesList.Listcode == Listcode::PropertyMoving_CZ)
        {
            _euSalesListReportingLine.selectForUpdate(true);
            _euSalesListReportingLine.PropertyMovingAmountMST_CZ += euSalesList.AmountMST;
        }

        super(_euSalesListReportingLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return EUSalesListReportingEngine::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        if (isMultipleTaxIdEnabledForEUSalesList)
        {
            dialog.addGroup("@SYS69996");
            fieldAuthorizedBy = dialog.addFieldValue(extendedTypeStr(HcmWorkerRecId), authorizedBy, "@EUSalesListCommon:AuthorizedBy");
            fieldAuthorizedByRole = dialog.addFieldValue(extendedTypeStr(CzAuthorizedByRole), authorizedByRole);
            fieldFilledBy = dialog.addFieldValue(extendedTypeStr(HcmWorkerRecId), filledBy, "@EUSalesListCommon:FiledBy");
            fieldCompanyNameAppendix = dialog.addFieldValue(extendedTypeStr(CzCompanyNameAppendix), companyNameAppendix);

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
            {
                taxPayerType = taxParameters.TaxpayerType_CZ;
                personTitle = taxParameters.PersonTitle_CZ;
                naturalPersonFirstName = taxParameters.NaturalPersonFirstName_CZ;
                naturalPersonLastName = taxParameters.NaturalPersonLastName_CZ;
            }

            fieldTaxPayerType = dialog.addFieldValue(enumStr(TaxpayerType_CZ), taxPayerType);
            fieldPersonTitle = dialog.addFieldValue(extendedTypeStr(PersonTitle), personTitle, "@EUSalesListCommon:NaturalPersonTitle");
            fieldNaturalPersonFirstName = dialog.addFieldValue(extendedTypeStr(NaturalPersonFirstName_CZ), naturalPersonFirstName);
            fieldNaturalPersonLastName = dialog.addFieldValue(extendedTypeStr(NaturalPersonLastName_CZ), naturalPersonLastName);
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        if (ret)
        {
            if (isMultipleTaxIdEnabledForEUSalesList)
            {
                authorizedBy = fieldAuthorizedBy.value();
                authorizedByRole = fieldAuthorizedByRole.value();
                filledBy = fieldFilledBy.value();
                companyNameAppendix = fieldCompanyNameAppendix.value();
                taxPayerType = fieldTaxPayerType.value();
                personTitle = fieldPersonTitle.value();
                naturalPersonFirstName = fieldNaturalPersonFirstName.value();
                naturalPersonLastName = fieldNaturalPersonLastName.value();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container packed = super();

        if (isMultipleTaxIdEnabledForEUSalesList)
        {
            packed = this.appendVariableToPack(packed, classStr(EUSalesListReportingEngine_CZ), varStr(authorizedBy), authorizedBy);
            packed = this.appendVariableToPack(packed, classStr(EUSalesListReportingEngine_CZ), varStr(authorizedByRole), authorizedByRole);
            packed = this.appendVariableToPack(packed, classStr(EUSalesListReportingEngine_CZ), varStr(filledBy), filledBy);
            packed = this.appendVariableToPack(packed, classStr(EUSalesListReportingEngine_CZ), varStr(companyNameAppendix), companyNameAppendix);
            packed = this.appendVariableToPack(packed, classStr(EUSalesListReportingEngine_CZ), varStr(taxPayerType), taxPayerType);
            packed = this.appendVariableToPack(packed, classStr(EUSalesListReportingEngine_CZ), varStr(personTitle), personTitle);
            packed = this.appendVariableToPack(packed, classStr(EUSalesListReportingEngine_CZ), varStr(naturalPersonFirstName), naturalPersonFirstName);
            packed = this.appendVariableToPack(packed, classStr(EUSalesListReportingEngine_CZ), varStr(naturalPersonLastName), naturalPersonLastName);
        }

        return packed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        if (super(packedClass))
        {
            if (isMultipleTaxIdEnabledForEUSalesList)
            {
                authorizedBy = this.extractPackedVariable(packedClass, classStr(EUSalesListReportingEngine_CZ), varStr(authorizedBy));
                authorizedByRole = this.extractPackedVariable(packedClass, classStr(EUSalesListReportingEngine_CZ), varStr(authorizedByRole));
                filledBy = this.extractPackedVariable(packedClass, classStr(EUSalesListReportingEngine_CZ), varStr(filledBy));
                companyNameAppendix = this.extractPackedVariable(packedClass, classStr(EUSalesListReportingEngine_CZ), varStr(companyNameAppendix));
                taxPayerType = this.extractPackedVariable(packedClass, classStr(EUSalesListReportingEngine_CZ), varStr(taxPayerType));
                personTitle = this.extractPackedVariable(packedClass, classStr(EUSalesListReportingEngine_CZ), varStr(personTitle));
                naturalPersonFirstName = this.extractPackedVariable(packedClass, classStr(EUSalesListReportingEngine_CZ), varStr(naturalPersonFirstName));
                naturalPersonLastName = this.extractPackedVariable(packedClass, classStr(EUSalesListReportingEngine_CZ), varStr(naturalPersonLastName));
            }

            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>