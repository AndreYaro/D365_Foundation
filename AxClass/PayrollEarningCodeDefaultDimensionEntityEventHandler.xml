<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollEarningCodeDefaultDimensionEntityEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles events for the <c>PayrollEarningCodeDefaultDimensionEntityEventHandler</c> table.
/// </summary>
public final class PayrollEarningCodeDefaultDimensionEntityEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>PayrollEarningCodeDefaultDimensionEntity_onMappingEntityToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the <c>onMappingEntityToDataSource</c> event.
    /// </summary>
    /// <param name="_sender">The entity context.</param>
    /// <param name="_eventArgs">The data event args.</param>
    [DataEventHandler(tableStr(PayrollEarningCodeDefaultDimensionEntity), DataEventType::MappingEntityToDataSource)]
    public static void PayrollEarningCodeDefaultDimensionEntity_onMappingEntityToDataSource(Common _sender, DataEventArgs _eventArgs)
    {
        DataEntityContextEventArgs entityContextEventArgs = _eventArgs as DataEntityContextEventArgs;
        DataEntityDataSourceRuntimeContext dataSourceCtx = entityContextEventArgs.parmEntityDataSourceContext();

        if (dataSourceCtx.name() == dataEntityDataSourceStr(PayrollEarningCodeDefaultDimensionEntity, PayrollEarningCodeDefaultDimension))
        {
            PayrollEarningCodeDefaultDimensionEntity payrollEarningCodeDefaultDimensionEntity = _sender as PayrollEarningCodeDefaultDimensionEntity;
            payrollEarningCodeDefaultDimensionEntity.initializeValues();

            if (payrollEarningCodeDefaultDimensionEntity.isFieldSet(fieldNum(PayrollEarningCodeDefaultDimensionEntity, AccountingDistributionTemplateId)))
            {
                CompanyInfo legalEntity = CompanyInfo::findDataArea(payrollEarningCodeDefaultDimensionEntity.LegalEntityId);

                AccountingDistributionTemplate accountintDistributionTemplate = AccountingDistributionTemplate::findByNameAndLegalEntity(
                    payrollEarningCodeDefaultDimensionEntity.AccountingDistributionTemplateId,
                    legalEntity.RecId
                );

                PayrollEarningCodeDefaultDimension earningCodeDefaultDimension = dataSourceCtx.getBuffer();
                earningCodeDefaultDimension.AccountingDistributionTemplate = accountintDistributionTemplate.RecId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollEarningCodeDefaultDimensionEntity_onMappingDatasourceToEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the <c>onMappingdatasourceToEntity</c> event and sets field values appropriately.
    /// </summary>
    /// <param name="_sender">The entity context.</param>
    /// <param name="_eventArgs">The data event args.</param>
    [DataEventHandler(tableStr(PayrollEarningCodeDefaultDimensionEntity), DataEventType::MappingDatasourceToEntity)]
    public static void PayrollEarningCodeDefaultDimensionEntity_onMappingDatasourceToEntity(Common _sender, DataEventArgs _eventArgs)
    {
        DataEntityContextEventArgs etityContextEventArgs = _eventArgs as DataEntityContextEventArgs;
        DataEntityRuntimeContext entityCtx = etityContextEventArgs.parmEntityContext();
        DataEntityDataSourceRuntimeContext dataSourceCtx = etityContextEventArgs.parmEntityDataSourceContext();

        if (dataSourceCtx.name() == dataEntityDataSourceStr(PayrollEarningCodeDefaultDimensionEntity, PayrollEarningCodeDefaultDimension))
        {
            PayrollEarningCodeDefaultDimension earningCodeDefaultDimension = dataSourceCtx.getBuffer();

            DataEntityDataSourceRuntimeContext distributionTemplateContext = entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(PayrollEarningCodeDefaultDimensionEntity, AccountingDistributionTemplate));
            AccountingDistributionTemplate distributionTemplate = distributionTemplateContext.getBuffer();

            if (distributionTemplate.RecId != earningCodeDefaultDimension.AccountingDistributionTemplate)
            {
                AccountingDistributionTemplate accountingDistributionTemplate = AccountingDistributionTemplate::find(earningCodeDefaultDimension.AccountingDistributionTemplate);

                PayrollEarningCodeDefaultDimensionEntity payrollEarningCodeDefaultDimensionEntity = _sender as PayrollEarningCodeDefaultDimensionEntity;
                payrollEarningCodeDefaultDimensionEntity.setFieldValue(fieldPName(PayrollEarningCodeDefaultDimensionEntity, AccountingDistributionTemplate), earningCodeDefaultDimension.AccountingDistributionTemplate);          
                payrollEarningCodeDefaultDimensionEntity.AccountingDistributionTemplateId = accountingDistributionTemplate.Name;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>