<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransPoMarkSched</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReqTransPoMarkSched extends ReqTransPoMark implements BatchRetryable
{
    ReqSchedDirection           reqSchedDirection;
    SchedDate                   schedDate;
    SchedTime                   schedTime;
    ProdSchedMethod             schedMethod;

    SchedLimitCap               capacityLimited;
    SchedLimitProperty          propertyLimited;
    SchedLimitMat               materialLimited;
    KeepProductionUnit          keepProductionUnit;
    KeepWarehouseFromResource   keepWarehouseFromResource;
    WrkCtrSchedulerPrimaryResourceSelection primaryResourceSelection;

    ReqPlanData                 reqPlanData;

    // Dialog

    DialogField             dialogReqSchedDirection;
    DialogField             dialogSchedDate;
    DialogField             dialogSchedTime;
    DialogField             dialogSchedMethod;
    DialogField             dialogCapacityLimited;
    DialogField             dialogPropertyLimited;
    DialogField             dialogMaterialLimited;
    DialogField             dialogKeepProductionUnit;
    DialogField             dialogKeepWarehouseFromResource;
    DialogField             dialogPrimaryResourceSelection;

    ReqTransExplodeAdapter  explosionAdapter;

    #DEFINE.dialogSchedMethodFieldNo(900)

    #DEFINE.CurrentVersion(6)
    #LOCALMACRO.CurrentList
        reqSchedDirection,
        schedDate,
        schedTime,
        schedMethod,
        capacityLimited,
        propertyLimited,
        materialLimited,
        keepProductionUnit,
        keepWarehouseFromResource,
        primaryResourceSelection
    #ENDMACRO

    #LOCALMACRO.Version4List
        reqSchedDirection,
        schedDate,
        schedTime,
        schedMethod,
        capacityLimited,
        propertyLimited,
        materialLimited
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DictConfigurationKey    dictConfigurationKey = new DictConfigurationKey(configurationKeyNum(ProdRouting));

        dialog = super();

        this.dialogAddDefaultFields(dialog,false,true);

        dialogReqSchedDirection         = dialog.addFieldValue(enumStr(ReqSchedDirection), reqSchedDirection);
        dialogSchedDate                 = dialog.addFieldValue(extendedTypeStr(SchedDate), schedDate);
        dialogSchedTime                 = dialog.addFieldValue(extendedTypeStr(SchedTime), schedTime  , "@SYS8758","@SYS27637");

        dialogSchedMethod = new DialogField(dialog,enumStr(SchedMethod),#dialogSchedMethodFieldNo);
        dialog.addCtrlDialogField(dialogSchedMethod.name());
        dialogSchedMethod.init(dialog);
        dialogSchedMethod.label("@SYS15097");
        dialogSchedMethod.helpText("@SYS50930");
        if (ReqTransPoMarkInitSchedMethodToggle::instance().isEnabled())
        {
            dialogSchedMethod.value(schedMethod);
        }
        else
        {
            dialogSchedMethod.value();
        }
        dialogSchedMethod.registerOverrideMethod(methodStr(FormComboBoxControl, selectionChange), methodStr(ReqTransPoMarkSched, schedMethodSelectionChangeHandler), this);

        dialog.addGroup("@SYS22835");
        dialogCapacityLimited           = dialog.addFieldValue(extendedTypeStr(SchedLimitCap)               , capacityLimited);
        dialogMaterialLimited           = dialog.addFieldValue(extendedTypeStr(SchedLimitMat)               , materialLimited);
        dialogPropertyLimited           = dialog.addFieldValue(extendedTypeStr(SchedLimitProperty)          , propertyLimited);
        dialogKeepProductionUnit        = dialog.addFieldValue(extendedTypeStr(KeepProductionUnit)          , keepProductionUnit);
        dialogKeepWarehouseFromResource = dialog.addFieldValue(extendedTypeStr(KeepWarehouseFromResource)   , keepWarehouseFromResource);
        dialogPrimaryResourceSelection  = dialog.addFieldValue(enumStr(WrkCtrSchedulerPrimaryResourceSelection), primaryResourceSelection, "@SYS303221");

        // Hide route related buttons if Production II is not enabled
        if (!dictConfigurationKey.enabled())
        {
            dialogCapacityLimited.enabled(false);
            dialogCapacityLimited.visible(false);
            dialogKeepProductionUnit.enabled(false);
            dialogKeepProductionUnit.visible(false);
            dialogKeepWarehouseFromResource.enabled(false);
            dialogKeepWarehouseFromResource.visible(false);
        }

        explosionAdapter.dialog(dialog);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Launches the post run dialog.
    /// </summary>
    /// <param name="_dialog">
    ///    The dialog instance to start.
    /// </param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);

        if (dialogSchedMethod.value() == SchedMethod::Rough)
        {
            dialogPropertyLimited.active(false);
            dialogPropertyLimited.value(NoYes::No);
            dialogPrimaryResourceSelection.active(false);
            dialogPrimaryResourceSelection.value(WrkCtrSchedulerPrimaryResourceSelection::Duration);
        }
        else
        {
            dialogPropertyLimited.active(true);
            dialogPrimaryResourceSelection.active(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>schedMethodSelectionChangeHandler</Name>
				<Source><![CDATA[
    public int schedMethodSelectionChangeHandler(FormComboBoxControl _control)
    {
        if (_control != null && _control.modified())
        {
            if (dialogSchedMethod.value() == SchedMethod::Rough)
            {
                dialogPropertyLimited.active(false);
                dialogPropertyLimited.value(NoYes::No);
                dialogPrimaryResourceSelection.active(false);
                dialogPrimaryResourceSelection.value(WrkCtrSchedulerPrimaryResourceSelection::Duration);
            }
            else
            {
                dialogPropertyLimited.active(true);
                dialogPrimaryResourceSelection.active(true);
            }
        }

        return dialogSchedMethod.value();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        reqSchedDirection           = dialogReqSchedDirection.value();
        schedDate                   = dialogSchedDate.value();
        schedTime                   = dialogSchedTime.value();
        schedMethod                 = dialogSchedMethod.value();
        capacityLimited             = dialogCapacityLimited.value();
        propertyLimited             = dialogPropertyLimited.value();
        materialLimited             = dialogMaterialLimited.value();
        keepProductionUnit          = dialogKeepProductionUnit.value();
        keepWarehouseFromResource   = dialogKeepWarehouseFromResource.value();
        primaryResourceSelection    = dialogPrimaryResourceSelection.value();

        explosionAdapter.getFromDialog();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>labelDialogMarkedElements</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a label to be used in the dialog for showing how many marked records were marked.
    /// </summary>
    /// <param name="_countMarkedElements">
    ///    The number of marked records.
    /// </param>
    /// <returns>
    ///    A label.
    /// </returns>
    protected str labelDialogMarkedElements(int _countMarkedElements)
    {
        str text;

        switch (_countMarkedElements)
        {
            case 0:
                text = "@SYS345110";
                break;
            case 1:
                text = "@SYS69955";
                break;
            default:
                text = strFmt("@SYS69956",_countMarkedElements);
                break;
        }

        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,super(),#CurrentList, explosionAdapter.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCapacityLimited</Name>
				<Source><![CDATA[
    public SchedLimitCap parmCapacityLimited(SchedLimitCap _capacityLimited = capacityLimited)
    {
        capacityLimited = _capacityLimited;
        return capacityLimited;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExplosionAdapter</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Get a <c>ReqTransExplodeAdapter</c> instance.
    /// </summary>
    /// <param name="_explosionAdapter">
    ///    A <c>ReqTransExplodeAdapter</c> instance.
    /// </param>
    /// <returns>
    ///    A class that represents <c>ReqTransExplodeAdapter</c> instance.
    /// </returns>
    public ReqTransExplodeAdapter parmExplosionAdapter(ReqTransExplodeAdapter _explosionAdapter = explosionAdapter)
    {
        explosionAdapter = _explosionAdapter;
        return explosionAdapter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPropertyLimited</Name>
				<Source><![CDATA[
    public SchedLimitProperty parmPropertyLimited(SchedLimitProperty _propertyLimited = propertyLimited)
    {
        propertyLimited = _propertyLimited;
        return propertyLimited;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqSchedDirection</Name>
				<Source><![CDATA[
    public ReqSchedDirection parmReqSchedDirection(ReqSchedDirection  _reqSchedDirection = reqSchedDirection)
    {
        reqSchedDirection = _reqSchedDirection;
        return reqSchedDirection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSchedDate</Name>
				<Source><![CDATA[
    public SchedDate parmSchedDate(SchedDate _schedDate = schedDate)
    {
        schedDate = _schedDate;
        return schedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSchedMethod</Name>
				<Source><![CDATA[
    public ProdSchedMethod parmSchedMethod(ProdSchedMethod _schedMethod = schedMethod)
    {
        schedMethod = _schedMethod;
        return schedMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSchedTime</Name>
				<Source><![CDATA[
    public SchedTime parmSchedTime(SchedTime _schedTime = schedTime)
    {
        schedTime = _schedTime;
        return schedTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        MapEnumerator		me;
        ReqTrans			reqTrans;
        ReqCalcExplodePo	reqCalcExplode;

        setPrefix(ReqTransPoMarkSched::description());

        super();

        if (!this.validate())
        {
            throw error("@SYS18447");
        }

        if (   mapReqTransMark
            && mapReqTransMark.elements())
        {
            this.progressInit(ReqTransPoMarkSched::description(), mapReqTransMark.elements(), #AviUpdate);

            // schedule selected planned orders
            me = mapReqTransMark.getEnumerator();

            while (me.moveNext())
            {
                try
                {
                    ttsBegin;

                    progress.incCount();

                    reqTrans = me.currentValue();
                    this.updateScheduling(reqTrans);

                    if (ReqTrans::refTypeIsPlannedOrder(reqTrans.RefType) && ReqCalcExplode::canRunReqTrans(reqTrans.RefType))
                    {
                        reqCalcExplode = ReqCalcExplode::newReqTrans(reqTrans, reqPlanData) as ReqCalcExplodePo;
                        explosionAdapter.setReqCalcExplodePo(reqCalcExplode);
                        explosionAdapter.run();
                    }

                    ttsCommit;
                }
                catch (Exception::Deadlock)
                {
                    retry;
                }
                catch (Exception::TransientSqlConnectionError)
                {
                    if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                    {
                        retry;
                    }
                    else
                    {
                        throw;
                    }
                }
                catch (Exception::UpdateConflict)
                {
                    if (appl.ttsLevel() == 0)
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            throw Exception::UpdateConflictNotRecovered;
                        }
                        else
                        {
                            retry;
                        }
                    }
                    else
                    {
                        throw Exception::UpdateConflict;
                    }
                }
                catch (Exception::Error)
                {
                    exceptionTextFallThrough();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    public void saveLast()
    {
        super();
        explosionAdapter.saveLast();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer         version = conPeek(_packedClass,1);
        container       base;
        container       explosionAdapterPacked;

        switch (version)
        {
            case #CurrentVersion:
                [version,base,#CurrentList, explosionAdapterPacked] = _packedClass;
                explosionAdapter = new ReqTransExplodeAdapter();
                explosionAdapter.unpack(explosionAdapterPacked);
                super(base);
                break;

            case 4:
                [version,base,#Version4List] = _packedClass;
                super(base);
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateScheduling</Name>
				<Source><![CDATA[
    protected void updateScheduling(ReqTrans _reqTrans)
    {
        WrkCtrScheduler_Req     scheduleReq;
        WrkCtrParmSchedule      parmSchedule;

        ReqPO                   reqPO;

        if (_reqTrans.RefType != ReqRefType::BOMPlannedOrder
            && _reqTrans.RefType != ReqRefType::PmfPlannedProdBatch
            )
        {
            throw error("@SYS69941");
        }

        if (!reqPlanData || reqPlanData.parmReqPlanVersionRefRecId() != _reqTrans.PlanVersion)
        {
            reqPlanData = ReqPlanData::newReqPlanVersion(_reqTrans.PlanVersion);
        }

        reqPO = _reqTrans.getReqPo(reqPlanData);

        scheduleReq = WrkCtrScheduler_Req::newCheckLockingTTSLevel(false);

        // requested date should be updated for derived requirements when rescheduling planned production
        // in order to avoid outstanding delayed futures date when running regeneration (approved PPO is a primary context)
        parmSchedule = WrkCtrParmSchedule::newReqTransParameters(_reqTrans,
                                                                 reqPO,
                                                                 reqPlanData,
                                                                 reqSchedDirection,
                                                                 schedMethod,
                                                                 schedDate,
                                                                 schedTime,
                                                                 true,
                                                                 capacityLimited,
                                                                 propertyLimited,
                                                                 materialLimited,
                                                                 keepProductionUnit,
                                                                 keepWarehouseFromResource,
                                                                 primaryResourceSelection,
                                                                 true);
        scheduleReq.addWrkCtrParmSchedule(parmSchedule);
        scheduleReq.run();

        scheduleReq.dispose();

        mapReqTransUpdated.insert(_reqTrans.RecId,_reqTrans);
        mapReqPoUpdated.insert(reqPO.RecId,reqPO);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static ReqTransPoMarkSched construct()
    {
        return new ReqTransPoMarkSched();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS69945";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        ReqTransPoMarkSched     reqTransPoMarkSched;

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(_args))
        {
            reqTransPoMarkSched = ReqTransPoMarkSched::newForm(_args);
            reqTransPoMarkSched.executeAction();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    public static ReqTransPoMarkSched newForm(Args _args)
    {
        ReqTransPoMarkSched     reqTransPoMarkSched    = ReqTransPoMarkSched::construct();
        ReqTrans                reqTrans               = ReqTransPoMark::getReqTransFromArgs(_args);
        ReqPlanData             reqPlanData;

        ReqPlanId               reqPlanId = ReqPlanVersion::find(reqTrans.PlanVersion).ReqPlanId;

        reqTransPoMarkSched.getLast();

        reqTransPoMarkSched.initFromArgs(_args);
        reqTransPoMarkSched.parmReqSchedDirection(ReqSchedDirection::BackwardFromReqDate);
        reqTransPoMarkSched.parmSchedDate(reqTrans.ReqDate);
        reqTransPoMarkSched.parmSchedTime(reqTrans.ReqTime);

        reqPlanData = ReqPlanData::newReqPlanId(reqPlanId);

        reqTransPoMarkSched.parmSchedMethod(reqPlanData.covSchedMethod());
        reqTransPoMarkSched.parmCapacityLimited(reqPlanData.covCapLimited());
        reqTransPoMarkSched.parmPropertyLimited(reqPlanData.covPropertyLimited());

        reqTransPoMarkSched.parmExplosionAdapter(ReqTransExplodeAdapter::newReqTrans(reqTrans, reqPlanData));

        return reqTransPoMarkSched;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>