<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InterCompanyInventAvailabilityProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InterCompanyInventAvailabilityProvider</c> is a service that provides intercompany inventory on hand availability information.
/// </summary>
/// <remarks>
/// Availability for different types of items can be calculated differently.
/// Use the intercompany availability provider to make sure correct availability is fetched regardless of the item type.
/// </remarks>
public static class InterCompanyInventAvailabilityProvider
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doFind_InterCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds availability based on the specified search parameters.
    /// </summary>
    /// <param name="_search">
    /// The parameters of the search.
    /// </param>
    /// <returns>
    /// The <c>InventAvailabilityByUnit</c> object.
    /// </returns>
    public static InventAvailabilityByUnit doFind_InterCompany(InterCompanyInventAvailabilitySearch _search)
    {
        InventSumAvailability       inventSumAvailability;
        InventOnHandQty             inventOnHandQty;
        WHSInventReserveQty         whsInventReserveQty;
        InventDim                   inventDimCriteria;
        InventSum                   inventSum;
        InventAvailabilityByUnit    result;

        InterCompanyInventDim interCompanyInventDim = _search.interCompanyInventDimCriteria();
        InterCompanyInventSum interCompanyInventSum = _search.interCompanyInventSum();

        interCompanyInventDim.toInventDim(inventDimCriteria);
        interCompanyInventSum.toInventSum(inventSum);

        if (_search.isItemIdWHSEnabled())
        {
            whsInventReserveQty = WHSInventReserveQty::newFromParms(_search.interCompanyinventTable(), inventDimCriteria, inventDimCriteria.toDimParm(), inventSum);
            result = InventAvailabilityByUnit::newFromParms(whsInventReserveQty);
        }
        else if (_search.isInterCompanyInventSumSet())
        {
            inventSumAvailability = InventSumAvailability::newFromInventSum(inventSum);
            result = InventAvailabilityByUnit::newFromParms(inventSumAvailability, inventSumAvailability);
        }
        else
        {
            inventOnHandQty = InventOnHandQty::newParameters(_search.item(), inventDimCriteria);
            result = InventAvailabilityByUnit::newFromParms(inventOnHandQty, inventOnHandQty);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find_InterCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds availability based on the specified search parameters.
    /// </summary>
    /// <param name="_search">
    /// The parameters of the search.
    /// </param>
    /// <returns>
    /// The <c>InventAvailabilityByUnit</c> object.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws an error if <c>_search</c> is null.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Throws an error if <c>_search</c> is not valid.
    /// </exception>
    public static InventAvailabilityByUnit find_InterCompany(InterCompanyInventAvailabilitySearch _search)
    {
        InventAvailabilityByUnit res;

        if (!_search || !_search.isValid_InterCompany())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        res = InterCompanyInventAvailabilityProvider::doFind_InterCompany(_search);

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByInterCompanySumDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds availability based on the specified <c>InterCompanyInventSum</c> and
    /// the dimensions that were used as a filter to find this record.
    /// </summary>
    /// <param name="_interCompanyInventSum">
    /// The <c>InterCompanyInventSum</c> record that contains on-hand information
    /// for the specified dimension criteria.
    /// </param>
    /// <param name="_interCompanyInventDim">
    /// The inventory dimensions of the <c>InterCompanyInventDim</c> record.
    /// </param>
    /// <returns>
    /// The <c>InventAvailabilityByUnit</c> object.
    /// </returns>
    /// <remarks>
    /// Non-empty dimension values from the dimension criteria will be used to filter the availability.
    /// Empty dimensions will be ignored.
    /// Note that it is the responsibility of the user of the API to provide the correct dimensions that were used
    /// to find the specified <c>InterCompanyInventSum</c>.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Throws an error if <c>InterCompanyInventSum.ItemId</c> is blank.
    /// </exception>
    public static InventAvailabilityByUnit findByInterCompanySumDim(InterCompanyInventSum _interCompanyInventSum, InterCompanyInventDim _interCompanyInventDim)
    {
        InterCompanyInventAvailabilitySearch search = InterCompanyInventAvailabilitySearch::newFromInterCompanySumDim(_interCompanyInventSum, _interCompanyInventDim);

        return InterCompanyInventAvailabilityProvider::find_InterCompany(search);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>