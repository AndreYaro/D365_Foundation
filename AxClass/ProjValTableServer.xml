<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjValTableServer</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjValTableServer
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCategoryToEmplCategory</Name>
				<Source><![CDATA[
    static void addCategoryToEmplCategory(
        container                    categoryLine,
        ProjValEmplCategoryGroupId  _groupId)
    {
        int                         i;
        ProjValEmplCategorySetUp    projValEmplCategorySetUp;
        ProjCategoryId              categoryId;

        for (i=1; i<=conLen(categoryLine); i++)
        {
            categoryId = conPeek(categoryLine, i);
            projValEmplCategorySetUp.GroupId        = _groupId;
            projValEmplCategorySetUp.CategoryId     = categoryId;
            if (projValEmplCategorySetUp.validateWrite())
            {
                projValEmplCategorySetUp.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCategoryToProjCategory</Name>
				<Source><![CDATA[
    static void addCategoryToProjCategory(
        container                    categoryLine,
        ProjValProjCategoryGroupId  _groupId)
    {
        int                         i;
        ProjValProjCategorySetUp    projValProjCategorySetUp;
        ProjCategoryId              categoryId;

        for (i=1; i<=conLen(categoryLine); i++)
        {
            categoryId = conPeek(categoryLine, i);
            projValProjCategorySetUp.GroupId        = _groupId;
            projValProjCategorySetUp.CategoryId     = categoryId;
            if (projValProjCategorySetUp.validateWrite())
            {
                projValProjCategorySetUp.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProjToEmplProj</Name>
				<Source><![CDATA[
    static void addProjToEmplProj(
        container               projLine,
        ProjValEmplProjGroupId  _groupId)
    {
        int                     i;
        ProjValEmplProjSetup    projValEmplProjSetup;
        ProjId                  projId;

        for (i=1; i<=conLen(projLine); i++)
        {
            projId = conPeek(projLine, i);
            projValEmplProjSetup.GroupId        = _groupId;
            projValEmplProjSetup.Projid     = projId;
            projValEmplProjSetup.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProjToProjCategory</Name>
				<Source><![CDATA[
    static void addProjToProjCategory(container projLine, ProjValProjCategoryGroupId _groupId)
    {
        int                      i;
        ProjId                   projId;
        ProjValProjCategorySetUp projValProjCategorySetUp;

        for (i=1; i<=conLen(projLine); i++)
        {
            projId = conPeek(projLine, i);

            projValProjCategorySetUp.GroupId = _groupId;
            projValProjCategorySetUp.ProjId  = projId;

            if (projValProjCategorySetUp.validateWrite())
            {
                projValProjCategorySetUp.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addResourceToEmplCategory</Name>
				<Source><![CDATA[
    static void addResourceToEmplCategory(
        container                   projLine,
        ProjValEmplCategoryGroupId  _groupId)
    {
        int                         i;
        ProjValEmplCategorySetUp    projValEmplCategorySetUp;
        ResourceRecId               resourceRecId;

        for (i=1; i<=conLen(projLine); i++)
        {
            resourceRecId = conPeek(projLine, i);
            projValEmplCategorySetUp.GroupId    = _groupId;
            projValEmplCategorySetUp.Resource   = resourceRecId;            
            if (projValEmplCategorySetUp.validateWrite())
            {
                projValEmplCategorySetUp.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addResourceToEmplCategoryIntercompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the selected resources from other legal entity to resource or category validation table.
    /// </summary>
    /// <param name="projLine">
    /// A set of selected resources from the resource or category validation form
    /// </param>
    /// <param name="_groupId">
    /// A <c>ProjValEmplProjGroupId</c> value of the resource or category validation table.
    /// </param>
    static void addResourceToEmplCategoryIntercompany(
        Set                          projLine,
        ProjValEmplProjGroupId       _groupId)
    {
        SetEnumerator               projLineEnumerator = projLine.getEnumerator();
        ProjValEmplCategorySetUp    projValEmplCategorySetUp;
        ResourceRecId               resourceRecId;       

        while (projLineEnumerator.moveNext())
        {           
            resourceRecId = projLineEnumerator.current();            

            projValEmplCategorySetUp.GroupId    = _groupId;
            projValEmplCategorySetUp.Resource   = resourceRecId;            

            if (projValEmplCategorySetUp.validateWrite())
            {
                projValEmplCategorySetUp.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addResourceToEmplProj</Name>
				<Source><![CDATA[
    static void addResourceToEmplProj(
        container                   projLine,
        ProjValEmplProjGroupId       _groupId)
    {
        int                         i;
        ProjValEmplProjSetup        projValEmplProjSetup;
        ResourceRecId               resourceRecId;

        for (i=1; i<=conLen(projLine); i++)
        {
            resourceRecId = conPeek(projLine, i);
            projValEmplProjSetup.GroupId    = _groupId;
            projValEmplProjSetup.Resource   = resourceRecId;

            if (ResourceFacade::isResourceInCurrentCompany(projValEmplProjSetup.Resource))
            {
                projValEmplProjSetup.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addResourceToEmplProjIntercompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the selected resources from another legal entity to the resource or project validation table.
    /// </summary>
    /// <param name="projLine">
    /// A Set of selected resources from the resource or project validation form.
    /// </param>
    /// <param name="_groupId">
    /// The group ID of the resource or project validation table.
    /// </param>
    static void addResourceToEmplProjIntercompany(
        Set                          projLine,
        ProjValEmplProjGroupId       _groupId)
    {
        SetEnumerator               projLineEnumerator = projLine.getEnumerator();
        ProjValEmplProjSetup        projValEmplProjSetup;
        ResourceRecId               resourceRecId;
       
        while (projLineEnumerator.moveNext())
        {            
            resourceRecId = projLineEnumerator.current();           

            projValEmplProjSetup.GroupId    = _groupId;
            projValEmplProjSetup.Resource   = resourceRecId;

            projValEmplProjSetup.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCategoryFromEmplCategory</Name>
				<Source><![CDATA[
    static void deleteCategoryFromEmplCategory(
            container                     categoryLine,
            ProjValEmplCategoryGroupId   _groupId)
    {
        ProjCategoryId              categoryId;
        ProjValEmplCategorySetUp    projValEmplCategorySetUp;
        int i;

        for (i=1; i<=conLen(categoryLine); i++)
        {
            categoryId = conPeek(categoryLine, i);

            delete_from projValEmplCategorySetUp
                where projValEmplCategorySetUp.GroupId      == _groupId &&
                      projValEmplCategorySetUp.CategoryId   == categoryId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCategoryFromProjCategory</Name>
				<Source><![CDATA[
    static void deleteCategoryFromProjCategory(
        container                     categoryLine,
        ProjValProjCategoryGroupId   _groupId)
    {
        ProjCategoryId              categoryId;
        ProjValProjCategorySetUp    projValProjCategorySetUp;
        int i;

        for (i=1; i<=conLen(categoryLine); i++)
        {
            categoryId = conPeek(categoryLine, i);

            delete_from projValProjCategorySetUp
                where projValProjCategorySetUp.GroupId      == _groupId &&
                      projValProjCategorySetUp.CategoryId   == categoryId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteProjFromEmplProj</Name>
				<Source><![CDATA[
    static void deleteProjFromEmplProj(
        container                 projLine,
        ProjValEmplProjGroupId   _groupId)
    {
        ProjId                  projId;
        ProjValEmplProjSetup    projValEmplProjSetup;
        int i;

        for (i=1; i<=conLen(projLine); i++)
        {
            projId = conPeek(projLine, i);

            delete_from projValEmplProjSetup
                where projValEmplProjSetup.GroupId      == _groupId &&
                      projValEmplProjSetup.Projid   == projId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteProjFromProjCategory</Name>
				<Source><![CDATA[
    static void deleteProjFromProjCategory(container projLine, ProjValProjCategoryGroupId _groupId)
    {
        int                      i;
        ProjId                   projId;
        ProjValProjCategorySetUp projValProjCategorySetUp;

        for (i=1; i<=conLen(projLine); i++)
        {
            projId = conPeek(projLine, i);

            delete_from projValProjCategorySetUp
                where projValProjCategorySetUp.GroupId == _groupId &&
                      projValProjCategorySetUp.ProjId  == projId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteResourceFromEmplCategory</Name>
				<Source><![CDATA[
    static void deleteResourceFromEmplCategory(container _projLine, ProjValEmplCategoryGroupId   _groupId)
    {
        ResourceRecId               resourceRecId;
        ProjValEmplCategorySetUp    projValEmplCategorySetUp;
        int                         i;
        ;

        for (i = 1; i <= conLen(_projLine); i++)
        {
            resourceRecId = conPeek(_projLine, i);

            delete_from projValEmplCategorySetUp
                where   projValEmplCategorySetUp.GroupId  == _groupId
                &&      projValEmplCategorySetUp.Resource  == resourceRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteResourceFromEmplProj</Name>
				<Source><![CDATA[
    static void deleteResourceFromEmplProj(
        container                projLine,
        ProjValEmplProjGroupId   _groupId)
    {
        ResourceRecId           resourceRecId;
        ProjValEmplProjSetup    projValEmplProjSetup;
        int i;

        for (i=1; i<=conLen(projLine); i++)
        {
            resourceRecId = conPeek(projLine, i);

            delete_from projValEmplProjSetup
                where projValEmplProjSetup.GroupId  == _groupId &&
                      projValEmplProjSetup.Resource  == resourceRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteResourceFromEmplProjIntercompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the selected resources from the resource or project validation table.
    /// </summary>
    /// <param name="projLine">
    /// A set of selected resources from resource or project validation form.
    /// </param>
    /// <param name="_groupId">
    /// The group ID of the resource or project validation table.
    /// </param>
    static void deleteResourceFromEmplProjIntercompany(
        Set                 projLine,
        ProjValEmplProjGroupId   _groupId)
    {
        SetEnumerator               projLineEnumerator = projLine.getEnumerator();
        ProjValEmplProjSetup        projValEmplProjSetup;
        ResourceRecId               resourceRecId;       

        while (projLineEnumerator.moveNext())
        {           
            resourceRecId = projLineEnumerator.current();
           
            delete_from projValEmplProjSetup
                where projValEmplProjSetup.GroupId  == _groupId &&
                      projValEmplProjSetup.Resource  == resourceRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaAddProjInvoiceToProjCategory</Name>
				<Source><![CDATA[
    // Define validation on project invoice table
    static void psaAddProjInvoiceToProjCategory(container _cnProjInvoiceLine, ProjValProjCategoryGroupId _sGroupId)
    {
        int                         i;
        ProjValProjCategorySetUp    tProjValProjCategorySetUp;
        for (i=1; i<=conLen(_cnProjInvoiceLine); i++)
        {
            tProjValProjCategorySetUp.GroupId               = _sGroupId;
            if (tProjValProjCategorySetUp.validateWrite())
            {
                tProjValProjCategorySetUp.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaDeleteProjInvoiceFromProjCategory</Name>
				<Source><![CDATA[
    // Define validation on project invoice table
    static void psaDeleteProjInvoiceFromProjCategory(container _cnProjLine, ProjValProjCategoryGroupId _sGroupId)
    {
        ProjValProjCategorySetUp    tProjValProjCategorySetUp;
        int i;

        for (i=1; i<=conLen(_cnProjLine); i++)
        {
            delete_from tProjValProjCategorySetUp
                where tProjValProjCategorySetUp.GroupId  == _sGroupId;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>