<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSCrossDockDemandSelectorTransferIssueDateAndTime</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSCrossDockDemandSelectorTransferIssueDateAndTime</c> is responsible for finding transfer issue demand sources for cross docking, that match the strategy date and time.
/// </summary>
[WHSCrossDockDemandSelectorAttribute(WHSWorkTransType::TransferIssue, WHSCrossDockFulFillmentStrategy::DateAndTime)]
class WHSCrossDockDemandSelectorTransferIssueDateAndTime extends WHSCrossDockDemandSelector
{
    InventQty                   remainingSupplyQty;
    InventDim                   supplyInventDim;
    InventTransId               supplyTransId;
    InventTransOriginIdMarked   markedTransOriginId;
    WMSLocationId               apptLocation;
    boolean                     requiresLocation;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDemandQuery</Name>
				<Source><![CDATA[
    private Query getDemandQuery()
    {
        Query demandQuery = new Query(queryStr(WHSCrossDockDemandTransfer));

        ItemId    itemId   = InventTransOrigin::findByInventTransId(supplyTransId).ItemId;
        InventDim queryDim = InventDim::find(supplyInventDim.inventDimId);
        queryDim.clearLocationAndBelowDim(itemId);

        demandQuery.dataSourceTable(tableNum(InventTransferTable)).addRange(fieldNum(InventTransferTable, InventLocationIdFrom)).value(supplyInventDim.InventLocationId);
        demandQuery.dataSourceTable(tableNum(InventTransferLine)).addRange(fieldNum(InventTransferLine, ItemId)).value(itemId);
        InventDim::queryAddRangeCriteria(demandQuery.dataSourceTable(tableNum(InventDim)), queryDim, InventDim::dimEnabledFieldList(), true);

        if (markedTransOriginId)
        {
            demandQuery.dataSourceTable(tableNum(WHSLoadLine)).addRange(fieldNum(WHSLoadLine, InventTransId)).value(InventTransOrigin::find(markedTransOriginId).InventTransId);
        }

        return demandQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidDemandSource</Name>
				<Source><![CDATA[
    private boolean isValidDemandSource(WHSLoadLine _demandLoadLine)
    {
        boolean isValid = this.validateDemandTransactions(_demandLoadLine);

        isValid = isValid && this.validateDemandSourceAssignedLocation(_demandLoadLine);

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDemandTransactions</Name>
				<Source><![CDATA[
    private boolean validateDemandTransactions(WHSLoadLine _demandLoadLine)
    {
        InventTransOriginId supplyTransOriginId = InventTransOrigin::findByInventTransId(supplyTransId).RecId;
        InventTransOrigin   demandTransOrigin;
        InventTrans         demandTrans;

        select firstonly RecId from demandTrans
            where demandTrans.inventDimId  == _demandLoadLine.inventDimId
            &&    demandTrans.Qty           < 0
            &&    (demandTrans.StatusIssue == StatusIssue::OnOrder
            ||     demandTrans.StatusIssue == StatusIssue::ReservOrdered)
            &&    (!demandTrans.MarkingRefInventTransOrigin
            ||     demandTrans.MarkingRefInventTransOrigin == supplyTransOriginId)
            exists join demandTransOrigin
                where demandTransOrigin.RecId         == demandTrans.InventTransOrigin
                &&    demandTransOrigin.InventTransId == _demandLoadLine.InventTransId;

        return demandTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDemandSourceAssignedLocation</Name>
				<Source><![CDATA[
    private boolean validateDemandSourceAssignedLocation(WHSLoadLine _demandLoadLine)
    {
        if (!requiresLocation)
        {
            return true;
        }

        Query query = this.buildDemandLoadWithAssignedLocationValidationQuery(_demandLoadLine);
        QueryRun queryRun = new QueryRun(query);
        queryRun.next();

        // Make sure the load of the demand has an appointment with an assigned location.
        TMSAppointment tmsAppointment = queryRun.get(tableNum(TMSAppointment));

        apptLocation = tmsAppointment.WMSLocationId;

        return tmsAppointment.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDemandLoadWithAssignedLocationValidationQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query used to validate the load of the demand has an appointment with an assigned location.
    /// </summary>
    /// <param name = "_demandLoadLine">The load line of the demand.</param>
    /// <returns>The query used to validate the load of the demand has an appointment with an assigned location.</returns>
    protected Query buildDemandLoadWithAssignedLocationValidationQuery(WHSLoadLine _demandLoadLine)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsTMSAppointment = query.addDataSource(tableNum(TMSAppointment));
        qbdsTMSAppointment.firstOnly(true);

        qbdsTMSAppointment.fields().clearFieldList();
        qbdsTMSAppointment.fields().addField(fieldNum(TMSAppointment, RecId));
        qbdsTMSAppointment.fields().addField(fieldNum(TMSAppointment, WMSLocationId));

        qbdsTMSAppointment.addRange(fieldNum(TMSAppointment, ApptRefType)).value(queryValue(TMSApptRefType::Load));
        qbdsTMSAppointment.addRange(fieldNum(TMSAppointment, ApptRefNum)).value(queryValue(_demandLoadLine.LoadId));
        qbdsTMSAppointment.addRange(fieldNum(TMSAppointment, WMSLocationId)).value(SysQuery::valueNotEmptyString());
        qbdsTMSAppointment.addRange(fieldNum(TMSAppointment, ApptStatus)).value(SysQuery::valueNot(TMSApptStatus::Cancelled));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectDemandSourcesToCrossDock</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks for matching demand sources that are available to cross dock.
    /// </summary>
    /// <param name = "_supplyQty">
    /// The quantity being supplied.
    /// </param>
    /// <param name = "_supplyInventDim">
    /// The inventDim of the inventory being supplied.
    /// </param>
    /// <param name = "_supplyTransId">
    /// The <C>InventTransId</C> of the supply transaction for cross docking.
    /// </param>
    /// <param name = "_crossDockId">
    /// The current <c>WHSCrossDockId</c> being used.
    /// </param>
    /// <param name = "_markedTransOriginId">
    /// The transaction origin Id that is marked against current supply
    /// </param>
    /// <returns>
    /// Returns the quantity amount that was cross docked.
    /// </returns>
    public InventQty selectDemandSourcesToCrossDock(
        InventQty                   _supplyQty,
        InventDim                   _supplyInventDim,
        InventTransId               _supplyTransId,
        boolean                     _requiresLocation,
        WHSCrossDockId              _crossDockId = '',
        InventTransOriginIdMarked   _markedTransOriginId = 0)
    {
        remainingSupplyQty  = _supplyQty;
        supplyInventDim     = _supplyInventDim;
        supplyTransId       = _supplyTransId;
        crossDockId         = _crossDockId;
        markedTransOriginId = _markedTransOriginId;
        requiresLocation    = _requiresLocation;

        ttsbegin;

        Query demandQuery = this.getDemandQuery();

        this.runDemandQuery(demandQuery);

        ttscommit;

        // Returns the amount that was not cross docked.
        return remainingSupplyQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runDemandQuery</Name>
				<Source><![CDATA[
    private void runDemandQuery(Query _demandQuery)
    {
        QueryRun qr = new QueryRun(_demandQuery);

        ttsbegin;

        while (qr.next())
        {
            WHSLoadLine loadLine = qr.get(tableNum(WHSLoadLine));

            if (this.isValidDemandSource(loadLine))
            {
                WHSLoadLineQuantityWithoutWork loadLineQtyWithoutWork = qr.get(tableNum(WHSLoadLineQuantityWithoutWork));

                if (!crossDockId)
                {
                    crossDockId = NumberSeq::newGetNum(WHSParameters::numRefWHSCrossDockId()).num();
                }

                this.createCrossDockOpportunityRecord(loadLine, loadLineQtyWithoutWork.QuantityWithoutWork);

				if (remainingSupplyQty <= 0)
                {
                    break;
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCrossDockOpportunityRecord</Name>
				<Source><![CDATA[
    private void createCrossDockOpportunityRecord(
        WHSLoadLine _loadLine,
        InventQty   _quantityWithoutWork)
    {
        ttsbegin;

        WHSCrossDockOpportunity crossDockOpportunity;
        crossDockOpportunity.CrossDockId       = crossDockId;
        crossDockOpportunity.DemandTransId     = _loadLine.InventTransId;
        crossDockOpportunity.SupplyTransId     = supplyTransId;
        crossDockOpportunity.CrossDockQuantity = min(remainingSupplyQty, _quantityWithoutWork);
        crossDockOpportunity.LoadLine          = _loadLine.RecId;
        crossDockOpportunity.SupplyInventDimId = supplyInventDim.inventDimId;
        crossDockOpportunity.DemandLocationId  = apptLocation;
        crossDockOpportunity.insert();

        remainingSupplyQty -= crossDockOpportunity.CrossDockQuantity;

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>