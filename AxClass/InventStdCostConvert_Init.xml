<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventStdCostConvert_Init</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventStdCostConvert_Init</c> class initializes the conversion process.
/// </summary>
/// <remarks>
///    If running in batch, for each item that has to be processed, a separate batch task will be created.
/// </remarks>

class InventStdCostConvert_Init extends InventStdCostConvert implements BatchRetryable
{
    boolean             inventoryClosingExecuted;

    // Dialog
    DialogField         dialogStopOnError;
    DialogField         dialogActivateCostingVersion;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkInventoryClosing</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if an inventory closing at the end of the transition period exists.
    /// </summary>
    /// <returns>
    ///    true if the inventory closing at the end of the transition period exists; otherwise, false.
    /// </returns>

    protected boolean checkInventoryClosing()
    {
        InventClosing    prevInventClosing;

        // First of all, get the inventClosing record
        prevInventClosing = InventClosing::findClosingDate(this.inventStdCostConv().TransitionEndDate - 1, this.inventStdCostConv().InventTransCurrency_RU);

        return prevInventClosing.RecId ? true : false ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTasks</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the worker tasks.
    /// </summary>

    protected void createTasks()
    {
        InventStdCostConvert_Item       inventStdCostConvert_Item;
        InventStdCostConvert_Level      curInventStdCostConvert_Level;
        InventStdCostConvert_Level      prevInventStdCostConvert_Level;
        InventStdCostConvert_End        inventStdCostConvert_End;
        InventStdCostConvItem           inventStdCostConvItem;
        InventTable                     inventTable;
        BatchHeader                     batchHeader;
        BOMLevel                        curBOMLevel;

        // Initialize the default values of the end class
        inventStdCostConvert_End  = InventStdCostConvert_End::construct();
        inventStdCostConvert_End.parmInventStdCostConvRecId(this.inventStdCostConv().RecId);
        inventStdCostConvert_End.parmActivateCostingVersion(activateCostingVersion);
        inventStdCostConvert_End.parmStopOnError(stopOnError);

        if (this.isInBatch())
        {
            // Initialize the batch header using the recId that this class
            // currently holds to add the tasks to the same job
            ttsbegin;
            batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);

            // Add the ending task
            batchHeader.addTask(inventStdCostConvert_End);
        }
        else
        {
            progress.setText("@SYS8516");
            progress.update(true);
        }

        // Initialize with -1 because BOM levels start with 0
        curBOMLevel = -1;

        // Add all the items that needs to be converted
        while select ItemId, RecId from inventStdCostConvItem
            where inventStdCostConvItem.StdCostConvRecId == this.inventStdCostConv().RecId
               && inventStdCostConvItem.Status == InventStdCostConvItemStatus::Checked
            join bomLevel from inventTable
            order by bomLevel desc
            where inventTable.ItemId == inventStdCostConvItem.ItemId
        {
            if (this.isInBatch() &&
                curBOMLevel != inventTable.bomLevel)
            {
                // Set the BOM Level
                curBOMLevel = inventTable.bomLevel;

                if (curInventStdCostConvert_Level)
                {
                    prevInventStdCostConvert_Level = curInventStdCostConvert_Level;
                }

                // Initialize the default values of the level class
                curInventStdCostConvert_Level  = InventStdCostConvert_Level::construct();
                curInventStdCostConvert_Level.parmStopOnError(stopOnError);
                curInventStdCostConvert_Level.parmActivateCostingVersion(activateCostingVersion);
                curInventStdCostConvert_Level.parmInventStdCostConvRecId(this.inventStdCostConv().RecId);
                curInventStdCostConvert_Level.parmBomLevel(inventTable.bomLevel);

                // Add level task
                batchHeader.addTask(curInventStdCostConvert_Level, BatchConstraintType::And);
            }

            // For each record add a new Batch Task
            inventStdCostConvert_Item = InventStdCostConvert_Item::construct();
            inventStdCostConvert_Item.parmInventStdCostConvRecId(this.inventStdCostConv().RecId);
            inventStdCostConvert_Item.parmInventStdCostConvItemRecId(inventStdCostConvItem.RecId);
            inventStdCostConvert_Item.parmStopOnError(stopOnError);

            // Add the tasks and make the end class depend on them
            if (this.isInBatch())
            {
                // Add task
                batchHeader.addTask(inventStdCostConvert_Item, BatchConstraintType::And);

                // Add dependency to curent level task
                batchHeader.addDependency(curInventStdCostConvert_Level,
                                          inventStdCostConvert_Item,
                                          stopOnError ? BatchDependencyStatus::Finished : BatchDependencyStatus::FinishedOrError);

                // Add dependency to the previous level task
                if (prevInventStdCostConvert_Level)
                {
                    batchHeader.addDependency(inventStdCostConvert_Item,
                                              prevInventStdCostConvert_Level,
                                              stopOnError ? BatchDependencyStatus::Finished : BatchDependencyStatus::FinishedOrError);
                }

                // Add dependency to end task
                batchHeader.addDependency(inventStdCostConvert_End,
                                          inventStdCostConvert_Item,
                                          BatchDependencyStatus::Finished);
            }
            else
            {
                progress.setText(strFmt("@SYS121578", inventStdCostConvItem.ItemId));
                progress.incCount();
                inventStdCostConvert_Item.runOperation();
            }
        }

        // Save
        if (this.isInBatch())
        {
            batchHeader.save();
            ttscommit;
        }
        else
        {
            progress.setText("@SYS17508");
            progress.update(true);

            inventStdCostConvert_End.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the dialog box to prompt the user.
    /// </summary>
    /// <returns>
    ///    An initialized <see cref="T:DialogRunbase" />.
    /// </returns>

    public Object dialog()
    {
        DialogRunbase       dialog;

        dialog = super();

        dialog.caption(InventStdCostConvert_Init::description(this.inventStdCostConv().InventTransCurrency_RU));

        dialogStopOnError = dialog.addField(enumStr(NoYes), "@SYS121581");
        dialogStopOnError.value(stopOnError);

        dialogActivateCostingVersion  = dialog.addField(enumStr(NoYes), "@SYS121582", "@SYS126497");
        dialogActivateCostingVersion.value(activateCostingVersion);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the conversion process.
    /// </summary>
    /// <remarks>
    ///    The following sequence is executed:
    ///    <list type="bullet">
    ///       <item>
    ///          <description>Execute an inventory closing.</description>
    ///       </item>
    ///       <item>
    ///          <description>Change the status to indicate it is in progress.</description>
    ///       </item>
    ///       <item>
    ///          <description>Update the bill of material levels.</description>
    ///       </item>
    ///       <item>
    ///          <description>Create the worker tasks.</description>
    ///       </item>
    ///    </list>
    /// </remarks>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An OCC conflict cannot be recovered.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    An OCC conflict cannot be recovered.
    /// </exception>

    protected void execute()
    {
        #OCCRetryCount

        setPrefix(InventStdCostConvert_Init::description());

        try
        {
            if (this.isInBatch() == false)
            {
                this.progressInit(InventStdCostConvert::description(this.inventStdCostConv().InventTransCurrency_RU),0,#AviUpdate);
            }

            if (this.inventStdCostConv())
            {
                this.executeInventoryClosing();

                // First of all, switch the conversion to in progress
                if (this.inventStdCostConv().Status == InventStdCostConvStatus::Ready)
                {
                    this.setInventStdCostConvStatus(InventStdCostConvStatus::InProgress);
                }

                // Now calculate the BOM Levels on the item
                this.updateBOMLevel();

                // Now create the worker tasks
                this.createTasks();
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeInventoryClosing</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes an inventory closing at the end of the transition period.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    No inventory closing exists before the transition period end, the update has been canceled.
    /// </exception>

    protected void executeInventoryClosing()
    {
        InventClosing    prevInventClosing;

        if (! this.checkInventoryClosing())
        {
            // No closing was found, so I need to execute one
            // For the parameters find the last existing inventory closing
            prevInventClosing = InventClosing::findPrevClosingDate(this.inventStdCostConv().TransitionEndDate - 1,
                                                                   this.inventStdCostConv().InventTransCurrency_RU);

            if (!prevInventClosing)
            {
                // Assert, should never occur
                throw error("@SYS121583");
            }

            // Now manupulate some parameters
            // Later recalulations needs to be canceled and it does not make
            // sense to trigger a recalculation before everything has been converted.
            prevInventClosing.CancelRecalculation = true;
            prevInventClosing.RunRecalculation    = false;

            // Clear period code so that the date doesn't get adjusted
            prevInventClosing.PeriodCode = "";

            // Now run the closing
            InventCostClosing::newInventClosing(prevInventClosing, this.inventStdCostConv().TransitionEndDate - 1, this.inventStdCostConv().InventTransCurrency_RU).runOperation();

            inventoryClosingExecuted = true;
        }
        else
        {
            inventoryClosingExecuted = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the user input from the dialog box.
    /// </summary>
    /// <returns>
    ///    A Boolean flag indicating that the user input was valid.
    /// </returns>

    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        stopOnError             = dialogStopOnError.value();
        activateCostingVersion  = dialogActivateCostingVersion.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the last values entered by the user from the <see cref="T:SysLastValue" />.
    /// </summary>

    public void getLast()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the caption for a batch record.
    /// </summary>
    /// <param name="batch">
    ///    The batch record where the caption should be set.
    /// </param>

    public void initBatch(Batch batch)
    {
        super(batch);

        batch.Caption = InventStdCostConvert_Init::description(this.inventStdCostConv().InventTransCurrency_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the default values for the conversion parameters.
    /// </summary>

    public void initParmDefault()
    {
        super();

        stopOnError             = NoYes::No;
        activateCostingVersion  = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calls the super method.
    /// </summary>
    /// <remarks>
    ///    This method is overridden to add new attribute.
    /// </remarks>
    public void run()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBOMLevel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Triggers the <see cref="T:BOMLevelCalc" /> to update the bill of material (BOM) levels.
    /// </summary>
    /// <remarks>
    ///    When an inventory closing was executed during the initialization process, this can be saved,
    ///    because the BOM levels have been updated during the inventory closing.
    /// </remarks>

    protected void updateBOMLevel()
    {
        // If an IC wass executed in this process, I can spare the recalc of the BOM levels
        if (! inventoryClosingExecuted)
        {
            // Recompute BOM levels from scratch
            BOMLevelCalc::construct().runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the user input.
    /// </summary>
    /// <param name="calledFrom">
    ///    The object from where this method was called.
    /// </param>
    /// <returns>
    ///    A Boolean flag indicating if the user input was valid.
    /// </returns>

    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (ret)
        {
            // Bring a dialog box to remind the user if he has switched the system into the single user mode
            if (Box::yesNo("@SYS121586", DialogButton::No) == DialogButton::No)
            {
                ret = checkFailed("@SYS121585");
            }
        }

        if (ret && ! this.checkInventoryClosing())
        {
            // Bring a dialog box to remind the user that an IC will be executed automatically
            if (Box::yesNo("@SYS121584", DialogButton::No) == DialogButton::No)
            {
                ret = checkFailed(strFmt("@SYS121587", date2StrUsr( this.inventStdCostConv().TransitionEndDate - 1, DateFlags::FormatAll)));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs a new instance of the <c>InventStdCostConvert_Init</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>InventStdCostConvert_Init</c> class according to the inventory standard
    ///    cost convert work type.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The function was called by using an invalid conversion work type.
    /// </exception>
    public static InventStdCostConvert_Init construct()
    {
        return new InventStdCostConvert_Init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description(InventTransCurrency_RU _inventTransCurrency = InventTransCurrency_RU::PrimaryCur)
    {
        return _inventTransCurrency == InventTransCurrency_RU::PrimaryCur ? "@SYS121570" : "@GLS112114";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static public void main(Args args)
    {
        InventStdCostConv                    inventStdCostConv;

        if (args && args.caller() && args.dataset() == tableNum(InventStdCostConv))
            inventStdCostConv= args.record();

        InventStdCostConvert_Init inventStdCostConvert_Init = InventStdCostConvert_Init::newFromParameters(inventStdCostConv.RecId);

        if ( ! inventStdCostConvert_Init.prompt())
            return;

        inventStdCostConvert_Init.runOperation();

        if (inventStdCostConv.RecId)
        {
            if (FormDataUtil::isFormDataSource(inventStdCostConv))
                FormDataUtil::getFormDataSource(inventStdCostConv).research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a new instance of the <see cref="T:InventStdCostConvert_Init" />.
    /// </summary>
    /// <param name="_inventStdCostConvRecId">
    ///    The inventory standard cost conversion record ID for which the conversion process should be
    ///    initialized.
    /// </param>
    /// <returns>
    ///    An initialized instance of the <see cref="T:InventStdCostConvert_Init" />.
    /// </returns>
    public static InventStdCostConvert_Init newFromParameters(RecId  _inventStdCostConvRecId)
    {
        InventStdCostConvert_Init    inventStdCostConvert_Init = InventStdCostConvert_Init::construct();

        inventStdCostConvert_Init.parmInventStdCostConvRecId(_inventStdCostConvRecId);
        inventStdCostConvert_Init.rereadRecords();

        return inventStdCostConvert_Init;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>
