<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdIntersection</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class TaxWithholdIntersection
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isValidWHTGroupIntersection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value which indicates if the combination of withholding tax group and item withholding tax group are valid.
    /// </summary>
    /// <param name="_checkIntersection">
    /// Determines that checking intersection for accounts receivable or accounts payable.
    /// </param>
    /// <param name="_taxWithholdGroup">
    /// The withholding tax group from the document line.
    /// </param>
    /// <param name="_taxWithholdItemGroupRecId">
    /// The item withholding tax group recId from the document line.
    /// </param>
    /// <param name="_company">
    /// Company to check intersection.
    /// </param>
    /// <returns>
    /// A value which indicates if an error or warning occured.
    /// </returns>
    internal static TaxWithholdCheckWHTGroups isValidWHTGroupIntersection(
        TaxWithholdCheckWHTGroups _checkIntersection,
        TaxWithholdGroup _taxWithholdGroup,
        TaxWithholdItemGroupId_TH _taxWithholdItemGroupRecId,
        SelectableDataArea _company = curext())
    {
        TaxWithholdCheckWHTGroups returnValue = TaxWithholdCheckWHTGroups::None;

        if (_taxWithholdGroup && _taxWithholdItemGroupRecId)
        {
            changecompany (_company)
            {
                if (_checkIntersection == TaxWithholdCheckWHTGroups::Warning || _checkIntersection == TaxWithholdCheckWHTGroups::Error)
                {
                    container cachedResult = TaxWithholdIntersection::insertIntersection(_taxWithholdGroup, _taxWithholdItemGroupRecId);

                    if (cachedResult && cachedResult == [conNull()])
                    {
                        TaxWithholdItemGroupHeading_TH taxWithholdItemGroupHeading = TaxWithholdItemGroupHeading_TH::find(_taxWithholdItemGroupRecId);

                        switch (_checkIntersection)
                        {
                            case TaxWithholdCheckWHTGroups::Error :
                                returnValue = TaxWithholdCheckWHTGroups::Error;
                                error(strFmt("@Tax_WithholdTax:ValidationGroupItemGroupIntersectionInvalid", _taxWithholdGroup, taxWithholdItemGroupHeading.TaxWithholdItemGroup));
                                break;

                            case TaxWithholdCheckWHTGroups::Warning :
                                returnValue = TaxWithholdCheckWHTGroups::Warning;
                                warning(strFmt("@Tax_WithholdTax:ValidationGroupItemGroupIntersectionInvalid", _taxWithholdGroup, taxWithholdItemGroupHeading.TaxWithholdItemGroup));
                                break;

                            default :
                                break;
                        }
                    }
                }
            }
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntersection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts or get the intersection value from cache.
    /// </summary>
    /// <param name = "_taxWithholdGroup">
    /// The withholding tax group from the document line.
    /// </param>
    /// <param name = "_taxWithholdItemGroupRecId">
    /// The item withholding tax group recId from the document line.
    /// </param>
    /// <returns>The cached results.</returns>
    internal static container insertIntersection(TaxWithholdGroup _taxWithholdGroup, TaxWithholdItemGroupId_TH _taxWithholdItemGroupRecId)
    {
        container cachedResult;
        TaxWithholdGroupData taxWithholdGroupData;
        TaxWithholdOnItem_TH taxWithholdOnItem;

        if (_taxWithholdGroup && _taxWithholdItemGroupRecId)
        {
            SelectableDataArea company = curext();

            // Pull the intersection information from cache
            cachedResult = TaxWithholdCache::getValue(TaxWithholdCacheScope::IntersectionData, [company, _taxWithholdGroup, _taxWithholdItemGroupRecId]);

            if (cachedResult == conNull())
            {
                while select TaxWithholdGroup, TaxWithholdCode from taxWithholdGroupData
                    where taxWithholdGroupData.TaxWithholdGroup == _taxWithholdGroup
                        exists join taxWithholdOnItem
                            where taxWithholdOnItem.TaxWithholdItemGroupHeading_TH == _taxWithholdItemGroupRecId
                                && taxWithholdOnItem.TaxWithholdCode == taxWithholdGroupData.TaxWithholdCode
                {
                    cachedResult += [taxWithholdGroupData.TaxWithholdGroup, taxWithholdGroupData.TaxWithholdCode];
                }

                if (cachedResult == conNull())
                {
                    // Special case where intersection is empty, cache [connull()] to ensure the selection isn't done again
                    cachedResult = [conNull()];
                }

                TaxWithholdCache::insertValue(TaxWithholdCacheScope::IntersectionData, [company, _taxWithholdGroup, _taxWithholdItemGroupRecId], cachedResult);
            }
        }

        return cachedResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkForIntersectionAndDisplayErrorMessage</Name>
				<Source><![CDATA[
    internal static void checkForIntersectionAndDisplayErrorMessage(
        TaxWithholdCheckWHTGroups _checkIntersection,
        TaxWithholdGroup _taxWithholdGroup,
        TaxWithholdItemGroupId_TH _taxWithholdItemGroupRecId,
        SelectableDataArea _company = curext())
    {
        if (_taxWithholdGroup && _taxWithholdItemGroupRecId)
        {
            changecompany (_company)
            {
                container cachedResult = TaxWithholdIntersection::insertIntersection(_taxWithholdGroup, _taxWithholdItemGroupRecId);

                if (cachedResult && cachedResult == [conNull()])
                {
                    TaxWithholdItemGroupHeading_TH taxWithholdItemGroupHeading = TaxWithholdItemGroupHeading_TH::find(_taxWithholdItemGroupRecId);

                    switch (_checkIntersection)
                    {
                        case TaxWithholdCheckWHTGroups::Warning :
                            warning(strFmt("@Tax_WithholdTax:ValidationGroupItemGroupIntersectionInvalid", _taxWithholdGroup, taxWithholdItemGroupHeading.TaxWithholdItemGroup));
                            break;

                        case TaxWithholdCheckWHTGroups::Error :
                            throw error(strFmt("@Tax_WithholdTax:ValidationGroupItemGroupIntersectionInvalid", _taxWithholdGroup, taxWithholdItemGroupHeading.TaxWithholdItemGroup));

                        default :
                            break;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>