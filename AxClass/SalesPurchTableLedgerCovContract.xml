<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPurchTableLedgerCovContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class SalesPurchTableLedgerCovContract
{
    private LedgerCoverage ledgerCoverage;
    private SalesPurchTableInterface salesPurchTableInterface;
    private TableId salesPurchLineTableId;
    private CustVendTable invoiceCustVendTable;
    private Delivery2Invoice delivery2Invoice;
    private Markup markup;
    private TaxCov taxCov;
    private LedgerPostingType summaryPostingType;
    private int sign;
    private LedgerCovAvgAverageDaysSelector ledgerCovAvgAverageDaysSelectorPayment;
    private LedgerCovAvgAverageDaysSelector ledgerCovAvgAverageDaysSelectorInvoice;

    private salesTotals salesTotals;
    private PurchTotals purchTotals;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmLedgerCoverage</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    internal LedgerCoverage parmLedgerCoverage()
    {
        return ledgerCoverage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerCovAvgAverageDaysSelectorPayment</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    internal LedgerCovAvgAverageDaysSelector parmLedgerCovAvgAverageDaysSelectorPayment()
    {
        return ledgerCovAvgAverageDaysSelectorPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerCovAvgAverageDaysSelectorInvoice</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    internal LedgerCovAvgAverageDaysSelector parmLedgerCovAvgAverageDaysSelectorInvoice()
    {
        return ledgerCovAvgAverageDaysSelectorInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPurchTableInterface</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    internal SalesPurchTableInterface parmSalesPurchTableInterface()
    {
        return SalesPurchTableInterface;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPurchLineTableId</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    internal TableId parmSalesPurchLineTableId()
    {
        return salesPurchLineTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceCustVendTable</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    internal CustVendTable parmInvoiceCustVendTable()
    {
        return invoiceCustVendTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDelivery2Invoice</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    internal Delivery2Invoice parmDelivery2Invoice()
    {
        return delivery2Invoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkup</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    internal Markup parmMarkup()
    {
        return markup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxCov</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    internal TaxCov parmTaxCov()
    {
        return taxCov;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSummaryPostingType</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    internal LedgerPostingType parmSummaryPostingType()
    {
        return summaryPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSign</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    internal int parmSign()
    {
        return sign;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchTotals</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    internal PurchTotals parmPurchTotals()
    {
        return purchTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesTotals</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    internal SalesTotals parmSalesTotals()
    {
        return salesTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAmount</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    internal AmountCur totalAmount()
    {
        AmountCur totalAmount;

        if (this.parmSalesPurchLineTableId() == tableNum(SalesLine))
        {
            totalAmount = salesTotals.totalAmount();
        }
        else
        {
            totalAmount = purchTotals.purchTotalAmount();
        }

        return totalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tax</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    internal Tax tax()
    {
        Tax tax;

        if (this.parmSalesPurchLineTableId() == tableNum(SalesLine))
        {
            tax = salesTotals.tax();
        }
        else
        {
            tax = purchTotals.tax();
        }

        return tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesPaymentScheduleExist</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    internal boolean doesPaymentScheduleExist()
    {
        boolean doesPaymentScheduleExist;

        if (this.parmSalesPurchLineTableId() == tableNum(SalesLine))
        {
            if (CustPaymSched::exist(
                salesPurchTableInterface.parmSalesPurchTable().TableId,
                salesPurchTableInterface.parmSalesPurchTable().RecId))
            {
                doesPaymentScheduleExist = true;
            }
        }
        else
        {
            if (VendPaymSched::exist(
                salesPurchTableInterface.parmSalesPurchTable().TableId,
                salesPurchTableInterface.parmSalesPurchTable().RecId))
            {
                doesPaymentScheduleExist = true;
            }
        }

        return doesPaymentScheduleExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInvoiceLineDetailsQuery</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    internal Query buildInvoiceLineDetailsQuery()
    {
        Query query = new Query();

        if (this.parmSalesPurchLineTableId() == tableNum(SalesLine))
        {
            QueryBuildDataSource qbds = query.addDataSource(tableNum(SalesLine));

            qbds.addRange(fieldNum(SalesLine, SalesId)).value(SysQuery::value(salesPurchTableInterface.parmSalesPurchTable().SalesPurchId));

            qbds.addRange(fieldNum(SalesLine, RemainSalesFinancial)).value(
                strFmt(' ((%1 > 0) || (%2 > 0)) ',
                 fieldStr(SalesLine, RemainSalesFinancial),
                 fieldStr(SalesLine, RemainSalesPhysical)));

            qbds.addOrderByField(fieldNum(SalesLine, ShippingDateConfirmed));
            qbds.addOrderByField(fieldNum(SalesLine, ShippingDateRequested));
        }
        else
        {
            QueryBuildDataSource qbds = query.addDataSource(tableNum(PurchLine));

            qbds.addRange(fieldNum(PurchLine, PurchId)).value(SysQuery::value(salesPurchTableInterface.parmSalesPurchTable().SalesPurchId));
            qbds.addRange(fieldNum(PurchLine, IsDeleted)).value(SysQuery::value(NoYes::No));

            qbds.addRange(fieldNum(PurchLine, RemainPurchPhysical)).value(
                strFmt(' ((%1 > 0) || (%2 > 0)) ',
                 fieldStr(PurchLine, RemainPurchPhysical),
                 fieldStr(PurchLine, RemainPurchFinancial)));

            qbds.addOrderByField(fieldNum(PurchLine, ConfirmedDlv));
            qbds.addOrderByField(fieldNum(PurchLine, DeliveryDate));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSalesPurchTable</Name>
				<Source><![CDATA[
    internal static SalesPurchTableLedgerCovContract newFromSalesPurchTable(LedgerCoverage _ledgerCoverage, SalesPurchTable _salesPurchTable)
    {
        SalesPurchTableLedgerCovContract instance = new SalesPurchTableLedgerCovContract();

        instance.init(_ledgerCoverage, _salesPurchTable);

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init(LedgerCoverage _ledgerCoverage, SalesPurchTable _salesPurchTable)
    {
        ledgerCoverage = _ledgerCoverage;

        SalesPurchTable salesPurchTable = _salesPurchTable;
        salesPurchTableInterface = salesPurchTable.salesPurchTableInterface();

        if (_salesPurchTable.TableId == tableNum(SalesTable))
        {
            salesPurchLineTableId = tableNum(SalesLine);

            invoiceCustVendTable = CustTable::find(salesPurchTableInterface.parmInvoiceAccount());

            SalesTable salesTable = salesPurchTableInterface.parmSalesPurchTable();
            salesTotals = SalesTotals::construct(salesTable, SalesUpdate::All);
            salesTotals.calc();

            delivery2Invoice = SalesParameters::find().Delivery2Invoice;

            markup = new Markup(salesPurchTableInterface.parmCurrencyCode());
            markup.setTax(salesTotals.tax());

            summaryPostingType = LedgerPostingType::CustBalance;

            sign = 1;

            ledgerCovAvgAverageDaysSelectorPayment = LedgerCovAvgAverageDaysSelector::CustAverageDaysFromInvoiceToPayment;
            ledgerCovAvgAverageDaysSelectorInvoice = LedgerCovAvgAverageDaysSelector::CustAverageDaysFromDeliveryToInvoice;
        }
        else
        {
            salesPurchLineTableId = tableNum(PurchLine);

            invoiceCustVendTable = VendTable::find(salesPurchTableInterface.parmInvoiceAccount());

            PurchTable purchTable = salesPurchTableInterface.parmSalesPurchTable();
            purchTotals = PurchTotals_TransLedgerCov::construct(purchTable, PurchUpdate::All);
            purchTotals.calc();

            delivery2Invoice = PurchParameters::find().Delivery2Invoice;

            markup = new Markup(salesPurchTableInterface.parmCurrencyCode());
            markup.setTax(purchTotals.tax());

            summaryPostingType = LedgerPostingType::VendBalance;

            sign = -1;

            ledgerCovAvgAverageDaysSelectorPayment = LedgerCovAvgAverageDaysSelector::VendAverageDaysFromInvoiceToPayment;
            ledgerCovAvgAverageDaysSelectorInvoice = LedgerCovAvgAverageDaysSelector::VendAverageDaysFromDeliveryToInvoice;
        }

        taxCov = new TaxCov(ledgerCoverage);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>