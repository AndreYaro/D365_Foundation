<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventAdjustPostClosing</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventAdjustPostClosing</c> class posts the adjustments and indirect cost during an
///    inventory closing.
/// </summary>
/// <remarks>
///    This class will handle the posting of the <c>inventSettlement</c> and the production indirect trans
///    records that have been created during an inventory closing. It will be called during the ledger
///    posting stage of the inventory closing.
/// </remarks>

class InventAdjustPostClosing extends InventAdjustPost
{
    /// <summary>
    ///    Processes a <c>ProdIndirectTrans</c> record.
    /// </summary>
    /// <param name="_prodIndirectTrans">
    ///    The <c>ProdIndirectTrans</c> record that should be posted.
    /// </param>
    /// <remarks>
    ///    This method is called from the <c>updateProduction</c> method to post the indirect cost. Open
    ///    production order adjustments will be posted to the estimated accounts. Ended production order
    ///    adjustments will be posted to the absorption accounts.
    /// </remarks>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processProdIndirectTrans</Name>
				<Source><![CDATA[
    protected void processProdIndirectTrans(ProdIndirectTrans _prodIndirectTrans)
    {
        AmountMST                   indirectCostAmount;
        AmountCur                   indirectCostAmountCur;

        indirectCostAmount = CurrencyExchangeHelper::amount(_prodIndirectTrans.Amount);

        if (currencyCode == standardCurrency)
        {
            indirectCostAmountCur = indirectCostAmount;
        }
        else
        {
            indirectCostAmountCur = CurrencyExchangeHelper::curAmount(indirectCostAmount, currencyCode, transDate);
        }

        // Important: Check if this is an open order or an ended one
        if (_prodIndirectTrans.OpenProdOrder == NoYes::Yes)
        {
            // open order ==> Post to the estimation account
            this.addLedger( ledgerVoucher,
                            _prodIndirectTrans.PostingEstimatedIndirectAbsorption,
                            _prodIndirectTrans.EstimatedIndirectAbsorpLedgerDimension,
                            _prodIndirectTrans.DefaultDimension,
                            -indirectCostAmountCur);

            this.addLedger( ledgerVoucher,
                            _prodIndirectTrans.PostingEstimatedIndirectAbsorptionOffset,
                            _prodIndirectTrans.EstimIndirectAbsorpOffsetLedgerDimension,
                            _prodIndirectTrans.DefaultDimension,
                            indirectCostAmountCur);
        }
        else
        {
            // Ended order ==> absorption account
            this.addLedger( ledgerVoucher,
                            _prodIndirectTrans.PostingIndirectAbsorption,
                            _prodIndirectTrans.IndirectAbsorptionLedgerDimension,
                            _prodIndirectTrans.DefaultDimension,
                            -indirectCostAmountCur);

            this.addLedger( ledgerVoucher,
                            _prodIndirectTrans.PostingIndirectAbsorptionOffset,
                            _prodIndirectTrans.IndirectAbsorptionOffsetLedgerDimension,
                            _prodIndirectTrans.DefaultDimension,
                            indirectCostAmountCur);
        }
        // <GEERU>
        if (correspondenceEnable && this.ledgerBondClient_RU())
        {
            this.ledgerBondClient_RU().bondLast2();
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Selects the inventory settlements that must be processed.
    /// </summary>
    /// <remarks>
    ///    During a closing, only inventory settlements that are not canceled and not posted should be posted.
    /// </remarks>
    protected void updateItem()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventSettlementRanges</Name>
				<Source><![CDATA[
    protected void setInventSettlementRanges(QueryBuildDataSource _qbdsInventSettlement)
    {
        super(_qbdsInventSettlement);

        // Post all the records, that are not posted and not canceled
        // This is done, because otherwise if cancelation and closing are running simultaneously
        // there might be a double posting
        _qbdsInventSettlement.addRange(fieldNum(InventSettlement, Cancelled)).value(queryValue(NoYes::No));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePosted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Marks the processed records as posted.
    /// </summary>
    /// <param name="_canceled">
    ///    A <c>NoYes</c> enumeration value that indicates whether the records that should be updated are
    ///    canceled; optional.
    /// </param>
    /// <remarks>
    ///    There is no super call because the closing should only handle <c>inventSettlement</c> records that
    ///    are not canceled. The <c>prodIndirectTrans</c> records must be marked as posted.
    /// </remarks>
    protected void updatePosted(NoYes _canceled = NoYes::No)
    {
        ProdIndirectTrans       prodIndirectTrans;
        InventSettlement    inventSettlement;

        inventSettlement.skipDataMethods(true);
        update_recordset inventSettlement
            setting Posted = NoYes::Yes
            where inventSettlement.TransDate                == transDate
               && inventSettlement.Voucher                  == voucher
               && inventSettlement.CostAmountAdjustment     != 0
               // <GEERU>
               && inventSettlement.InventTransCurrency_RU   == this.inventTransCurrency_RU()
               // </GEERU>
               && inventSettlement.Posted                   == NoYes::No
               && inventSettlement.Cancelled                == _canceled
               && (inventSettlement.BalanceSheetLedgerDimension != 0
                  || inventSettlement.OperationsLedgerDimension != 0);

        // Now update the prodIndirectTrans records as posted
        update_recordset prodIndirectTrans
            setting Posted = NoYes::Yes
            where ((prodIndirectTrans.VoucherEstimation  == voucher && prodIndirectTrans.DateEstimation  == transDate)
               ||  (prodIndirectTrans.VoucherCalc        == voucher && prodIndirectTrans.DateCalc        == transDate))
               && prodIndirectTrans.Posted     == NoYes::No
               && prodIndirectTrans.Canceled   == _canceled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProduction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Selects the <c>ProdIndirectTrans</c> records that should be posted.
    /// </summary>
    /// <remarks>
    ///    The records will be grouped by the accounts and the <c>openProdOrder</c> flag so that open
    ///    production orders and ended production orders can be processed differently.
    /// </remarks>

    protected void updateProduction()
    {
        // The production orders already have been adjusted with the indirect costs
        // Only the postings into ledger needs to be done.
        ProdIndirectTrans       prodIndirectTrans;

        while select sum(Amount) from prodIndirectTrans
            group by OpenProdOrder, DefaultDimension,
                     PostingEstimatedIndirectAbsorption, EstimatedIndirectAbsorpLedgerDimension,
                     PostingEstimatedIndirectAbsorptionOffset, EstimIndirectAbsorpOffsetLedgerDimension,
                     PostingIndirectAbsorption, IndirectAbsorptionLedgerDimension,
                     PostingIndirectAbsorptionOffset, IndirectAbsorptionOffsetLedgerDimension
            where ((prodIndirectTrans.VoucherEstimation  == voucher && prodIndirectTrans.DateEstimation  == transDate)
               ||  (prodIndirectTrans.VoucherCalc        == voucher && prodIndirectTrans.DateCalc        == transDate))
               && prodIndirectTrans.Posted          == NoYes::No
               && prodIndirectTrans.Canceled        == NoYes::No
        {
            this.processProdIndirectTrans(prodIndirectTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromCurrency_RU</Name>
				<Source><![CDATA[
    static InventAdjustPostClosing newFromCurrency_RU(
        Voucher                _voucher,
        TransDate              _transDate,
        InventAdjustmentSpec   _specification,
        LedgerTransTxt         _transTxtType,
        NoYes                  _correct,
        Voucher                _offsetVoucher,
        boolean                _onClosingDate,
        boolean                _checkOpen,
        NumberSequenceCode     _voucherSequence,
        InventTransCurrency_RU _inventTransCurrency)
    {
        var factoryAttr = new InventTransCurrencyAdjPostClosingFactoryAttribute(_inventTransCurrency);
        var instatiationStrategy = new InventAdjustPostInstantiation(_voucher,
                                                                     _transDate,
                                                                     _specification,
                                                                     _transTxtType,
                                                                     _correct,
                                                                     _offsetVoucher,
                                                                     _onClosingDate,
                                                                     _checkOpen,
                                                                     _voucherSequence);

        var instance = SysExtensionAppClassFactory::getClassFromSysAttributeWithInstantiationStrategy(classStr(InventAdjustPostClosing),
            factoryAttr, instatiationStrategy);

        if (instance == null)
        {
            instance = new InventAdjustPostClosing(_voucher,
                                                   _transDate,
                                                   _specification,
                                                   _transTxtType,
                                                   _correct,
                                                   _offsetVoucher,
                                                   _onClosingDate,
                                                   _checkOpen,
                                                   _voucherSequence);
        }

        return instance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>