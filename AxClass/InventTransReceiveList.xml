<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransReceiveList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventTransReceiveList</c> class initializes a sorted list with inventory transactions to receive.
/// </summary>
public class InventTransReceiveList
{
    protected InventTransReceiveListParameters parameters;

    private InventQty               qtySpecifiedDimensions;
    private InventDim               inventDim;
    private Set                     receiptTransSetSpecified;
    private Map                     orderedRecords;
    private boolean                 primaryList;

    private InventDimParm           physicalDimParm;
    private InventTable             inventTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventTransReceiveList</c> class.
    /// </summary>
    /// <param name="_parameters">The parameters to identify the inventory transactions.</param>
    /// <returns>An <c>InventTransReceiveList</c> instance that can be used to initialize a sorted list with inventory transactions to receive.</returns>
    public static InventTransReceiveList newFromParameters(InventTransReceiveListParameters _parameters)
    {
        InventTransReceiveList inventTransReceiveList = new InventTransReceiveList();
        
        inventTransReceiveList.parameters = _parameters;
        
        inventTransReceiveList.initializeInventTransToReceiveList();
        return inventTransReceiveList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventTransToReceiveList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a sorted list with inventory transactions to receive.
    /// </summary>
    protected void initializeInventTransToReceiveList()
    {
        inventTable = parameters.movement.inventTable();
        InventDimGroupSetup::newInventTable(inventTable).inventDimParmActivePhysicalInventory(physicalDimParm);

        orderedRecords = new Map(Types::String, Types::Record);
        receiptTransSetSpecified = new Set(Types::Int64);
        primaryList = true;

        if (!parameters.inventDimId || parameters.inventDimParm.isAllFlagNo())
        {
            this.buildReceiptTransListAllDimension();
        }
        else if (parameters.inventDimId && parameters.inventDimParm.isAllFlagYes())
        {
            this.buildReceiptTransListSpecifiedDimId(parameters.inventDimId);
            if (parameters.addRecordsNotMatchingCriteria && qtySpecifiedDimensions < parameters.maxQty)
            {
                primaryList = false;
                this.buildReceiptTransListAllDimension();
            }
        }
        else
        {
            this.buildReceiptTransListSpecifiedDimension();
            if (parameters.addRecordsNotMatchingCriteria && qtySpecifiedDimensions < parameters.maxQty)
            {
                primaryList = false;

                // When tracking dimensions are specified, try to make better job by finding partially matching original inventory transactions (allowing empty inventory dimensions on source transactions) instead of immediately falling back on picking any inventory transaction.
                // For performance reasons, do not perform this 'smarter' matching logic if tracking dimensions are not specified since tracking dimensions related scenarios is what this matching method tries to address in the first place.
                if (parameters.inventDimCriteria.anyTrackingDimensionSpecified())
                {
                    this.buildReceiptTransListSpecifiedDimensionAllowBlank();
                }

                if (qtySpecifiedDimensions < parameters.maxQty)
                {
                    this.buildReceiptTransListAllDimension();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the inventory transaction into the <c>orderedRecords</c> map.
    /// </summary>
    private void addRecord(InventTrans _inventTrans)
    {
        str preferredKey;
        boolean preferred = _inventTrans.RecId == parameters.preferedInventTransRecId;

        const int MaxDecimalsForQty = 16;
        const int MaxLengthForQty = 20 + MaxDecimalsForQty;

        boolean fullPhysicalTrackingDim;
        InventDim inventTransDim = _inventTrans.inventDim();

        if ((!physicalDimParm.InventBatchIdFlag || inventTransDim.inventBatchId || inventTable.BatchNumGroupId)
            && (!physicalDimParm.InventSerialIdFlag || inventTransDim.inventSerialId || inventTable.SerialNumGroupId))
        {
            fullPhysicalTrackingDim = true;
        }

        InventCWPostWithInventDimPhysicalMatchContext context;

        context = InventCWPostWithInventDimPhysicalMatchContext::current();

        if (preferred)
        {
            preferredKey = '0';
        }
        else if (  parameters.fromStatus == StatusReceipt::Registered
                && parameters.toStatus == StatusReceipt::Registered
                && !parameters.inventDimId
                && _inventTrans.inventDimId == parameters.movement.inventDimId()
                && parameters.inventDimParm.isAllFlagNo() )
        {
            preferredKey = '1';
        }
        else if (  context
                && context.parmConsiderInventDimPhysicalMatched()
                && parameters.fromStatus == StatusReceipt::Registered
                && parameters.toStatus == StatusReceipt::Registered
                && parameters.inventDimId
                && _inventTrans.inventDimId == parameters.inventDimId)
        {
            preferredKey = '1';
        }
        else if (parameters.preferFullPhysicalTrackingDim && fullPhysicalTrackingDim)
        {
            preferredKey = '2';
        }
        else if (_inventTrans.Qty == parameters.maxQty)
        {
            preferredKey = '3';
        }
        else
        {
            preferredKey = '4';
        }

        // Syncronization of batch/serial numbers should take priority over assignment of automatic number through the "Batch number group"/"Serial number group" when posting intercompany packing slip and receiving items.
        str transferDimKey;
        InventTransAutoCreateDimCheck autoCreateDimCheck = InventTransAutoCreateDimCheck::newFromMovementDim(parameters.movement, _inventTrans.inventDim(), true);

        if (_inventTrans.InterCompanyInventDimTransferred
        && parameters.movement.interCompanyTransaction()
        && (!autoCreateDimCheck.mustAutoCreateSerial() || !autoCreateDimCheck.mustAutoCreateBatch()))
        {
            transferDimKey ='0';
        }
        else
        {
            transferDimKey ='1';
        }

        // Records are ordered by this key alphabetically
        str orderKey = InventTransReceiveList::buildOrderKey(
            _inventTrans,
            primaryList,
            preferredKey,
            transferDimKey,
            MaxDecimalsForQty,
            MaxLengthForQty);

        // This implementation requires the map to be ordered by the key.
        orderedRecords.insert(orderKey, _inventTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildOrderKey</Name>
				<Source><![CDATA[
    public static str buildOrderKey(InventTrans _inventTrans, boolean _primaryList, str _preferredKey, str _transferDimKey, int _maxDecimalsForQty, int _MaxLengthForQty)
    {
        return strFmt('%1,%2,%3,%4,%5,%6,%7,%8',
            _primaryList ? '0' : '1',
            num2Str0(_inventTrans.StatusReceipt, 3),                                          // Convert enum to str3 with the integer value. Ensures all enum values are ordered correctly
            _inventTrans.MarkingRefInventTransOrigin ? '0' : '1',
            _preferredKey,
            _transferDimKey,                                                                   // Set the higher priority for transferred dimension
            strRFix(num2str(_inventTrans.Qty,-1, _maxDecimalsForQty,-1,-1), _MaxLengthForQty),  // Sort by quantity to minimize splitting of transactions
            _inventTrans.inventDimId,
            _inventTrans.RecId                                                                // Ensure uniqueness
            );
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortMarkedList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a sorted list with issues marked against the receipts.
    /// </summary>
    /// <param name = "_listToSort">The list to sort.</param>
    /// <param name = "_allDimensions">A Boolean indicating whether all inventory dimensions should be used to query the transactions.</param>
    /// <remarks>The list is sorted by delivery date.</remarks>
    /// <returns>A sorted list containing the issues marked against the receipts.</returns>
    private List sortMarkedList(List _listToSort, boolean _allDimensions)
    {
        int elements = _listToSort.elements();
        if (elements <= 1)
        {
            return _listToSort;
        }

        // Iteration 100 elements in record list won't impact the performance
        const int MaxElementsCanBeProcessed = 100;

        if (elements <= MaxElementsCanBeProcessed || !InventReceiveListSortByStatusDateExpectedFlight::instance().isEnabled())
        {
            return this.sortMarkedListByStatusDateTransOrigin(_listToSort, _allDimensions);
        }
        else
        {
            return this.sortMarkedListByStatusDateExpected(_listToSort, _allDimensions);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>sortMarkedListByStatusDateTransOrigin</Name>
				<Source><![CDATA[
    private List sortMarkedListByStatusDateTransOrigin(List _listToSort, boolean _allDimensions)
    {
        InventTrans     inventTransMarked;
        InventTrans     inventTransReceipt;

        List result = new List(Types::Record);

        if (_allDimensions)
        {
            select inventTransMarked
                group by inventTransReceipt.StatusReceipt, inventTransMarked.DateExpected, inventTransMarked.InventTransOrigin
                order by inventTransReceipt.StatusReceipt, inventTransMarked.DateExpected, inventTransMarked.InventTransOrigin
                where inventTransMarked.StatusIssue                     == StatusIssue::ReservOrdered
                    || inventTransMarked.StatusIssue                    == StatusIssue::ReservPhysical
                    || inventTransMarked.StatusIssue                    == StatusIssue::OnOrder
                join StatusReceipt from inventTransReceipt
                where inventTransReceipt.InventTransOrigin              == parameters.movement.inventTransOriginId()
                    && inventTransReceipt.MarkingRefInventTransOrigin   == inventTransMarked.InventTransOrigin
                    && inventTransReceipt.RecId                         != parameters.preferedInventTransRecId;
        }
        else
        {
            select inventTransMarked
                group by inventTransReceipt.StatusReceipt, inventTransMarked.DateExpected, inventTransMarked.InventTransOrigin
                order by inventTransReceipt.StatusReceipt, inventTransMarked.DateExpected, inventTransMarked.InventTransOrigin
                where inventTransMarked.StatusIssue                     == StatusIssue::ReservOrdered
                    || inventTransMarked.StatusIssue                    == StatusIssue::ReservPhysical
                    || inventTransMarked.StatusIssue                    == StatusIssue::OnOrder
                join StatusReceipt from inventTransReceipt
                where inventTransReceipt.InventTransOrigin              == parameters.movement.inventTransOriginId()
                    && inventTransReceipt.MarkingRefInventTransOrigin   == inventTransMarked.InventTransOrigin
                    && inventTransReceipt.RecId                         != parameters.preferedInventTransRecId
                #inventDimExistsJoin(inventTransReceipt.InventDimId, inventDim, parameters.inventDimCriteria, parameters.inventDimParm);
        }

        Counter remainingRecords = _listToSort.elements();
        InventTrans  inventTransTmp;
        ListIterator listIterator;

        while (inventTransMarked)
        {
            listIterator = new ListIterator(_listToSort);
            while (listIterator.more())
            {
                inventTransTmp = null;
                inventTransTmp = listIterator.value();
                if (inventTransTmp.MarkingRefInventTransOrigin  == inventTransMarked.InventTransOrigin
                     && inventTransTmp.StatusReceipt            == inventTransReceipt.StatusReceipt)
                {
                    result.addEnd(inventTransTmp);
                    remainingRecords--;
                    if (remainingRecords == 0)
                    {
                        return result;
                    }
                    listIterator.delete();
                }
                else
                {
                    listIterator.next();
                }
            }

            next inventTransMarked;
        }

        if (_listToSort.elements() > 0)
        {
            // shouldn't happen unless marking is single sided (issue marked on receipt doesn't appear to be marked).
            result.appendList(_listToSort);
        }

        return result;

    }

]]></Source>
			</Method>
			<Method>
				<Name>sortMarkedListByStatusDateExpected</Name>
				<Source><![CDATA[
    private List sortMarkedListByStatusDateExpected(List _listToSort, boolean _allDimensions)
    {
        InventTrans     inventTransMarked;
        InventTrans     inventTransReceipt;      

        if (_allDimensions)
        {
            select inventTransMarked
                group by inventTransReceipt.StatusReceipt, inventTransMarked.DateExpected, inventTransMarked.InventTransOrigin
                order by inventTransReceipt.StatusReceipt, inventTransMarked.DateExpected, inventTransMarked.InventTransOrigin
                where inventTransMarked.StatusIssue                     == StatusIssue::ReservOrdered
                    || inventTransMarked.StatusIssue                     == StatusIssue::ReservPhysical
                    || inventTransMarked.StatusIssue                     == StatusIssue::OnOrder
                join StatusReceipt from inventTransReceipt
                where inventTransReceipt.InventTransOrigin              == parameters.movement.inventTransOriginId()
                    && inventTransReceipt.MarkingRefInventTransOrigin    == inventTransMarked.InventTransOrigin
                    && inventTransReceipt.RecId                          != parameters.preferedInventTransRecId;
        }
        else
        {
            select inventTransMarked
                group by inventTransReceipt.StatusReceipt, inventTransMarked.DateExpected, inventTransMarked.InventTransOrigin
                order by inventTransReceipt.StatusReceipt, inventTransMarked.DateExpected, inventTransMarked.InventTransOrigin
                where inventTransMarked.StatusIssue                     == StatusIssue::ReservOrdered
                    || inventTransMarked.StatusIssue                     == StatusIssue::ReservPhysical
                    || inventTransMarked.StatusIssue                     == StatusIssue::OnOrder
                join StatusReceipt from inventTransReceipt
                where inventTransReceipt.InventTransOrigin              == parameters.movement.inventTransOriginId()
                    && inventTransReceipt.MarkingRefInventTransOrigin    == inventTransMarked.InventTransOrigin
                    && inventTransReceipt.RecId                          != parameters.preferedInventTransRecId
                #inventDimExistsJoin(inventTransReceipt.InventDimId, inventDim, parameters.inventDimCriteria, parameters.inventDimParm);
        }

        Map statusExpectedDateToTransOriginSetMap = new Map(Types::String, Types::Container);
        List statusReceiptList = new List(Types::Integer);
        List dateExpectedList = new List(Types::Date);
        Set markedTransOriginSet;
        str mapKey;

        // Fetch all the distinguish combinations of inventTransReceipt.StatusReceipt and inventTransMarked.DateExpected by order, and this combination value will
        // be used as an map key to store related inventTransMarked.InventTransOrigin values, these inventTransMarked.InventTransOrigin values linking to the same
        // combination value mentioned above should have the same priority to be processed, and then use two lists to store these two values to keep the same sorted order as 
        // the sorted result from query above, and iterate each combination of inventTransReceipt.StatusReceipt and inventTransMarked.DateExpected to sort the marked list 
        // based on inventTransReceipt.StatusReceipt and inventTransMarked.InventTransOrigin values
        while (inventTransMarked)
        {
            mapKey = int2Str(enum2int(inventTransReceipt.StatusReceipt)) + '#' + date2StrXpp(inventTransMarked.DateExpected);
            if (statusExpectedDateToTransOriginSetMap.exists(mapKey))
            {
                container markedTransOriginSetCon = statusExpectedDateToTransOriginSetMap.lookup(mapKey);
                markedTransOriginSet = Set::create(markedTransOriginSetCon);
                markedTransOriginSet.add(inventTransMarked.InventTransOrigin);
                statusExpectedDateToTransOriginSetMap.insert(mapKey, markedTransOriginSet.pack());
            }
            else
            {
                statusReceiptList.addEnd(inventTransReceipt.StatusReceipt);
                dateExpectedList.addEnd(inventTransMarked.DateExpected);
                markedTransOriginSet = new Set(Types::Int64);
                markedTransOriginSet.add(inventTransMarked.InventTransOrigin);
                statusExpectedDateToTransOriginSetMap.insert(mapKey, markedTransOriginSet.pack());
            }

            markedTransOriginSet = null;
            next inventTransMarked;
        }

        List result = new List(Types::Record);
        Counter remainingRecords = _listToSort.elements();
        ListEnumerator statusReceiptEnumerator = statusReceiptList.getEnumerator();
        ListEnumerator dateExpectedEnumerator = dateExpectedList.getEnumerator();

        while (statusReceiptEnumerator.moveNext() && dateExpectedEnumerator.moveNext())
        {
            mapKey = int2Str(enum2int(statusReceiptEnumerator.current())) + '#' + date2StrXpp(dateExpectedEnumerator.current());
            if (statusExpectedDateToTransOriginSetMap.exists(mapKey))
            {
                container markedTransOriginSetCon = statusExpectedDateToTransOriginSetMap.lookup(mapKey);
                markedTransOriginSet = Set::create(markedTransOriginSetCon);
                statusExpectedDateToTransOriginSetMap.remove(mapKey);
            }
            else
            {
                throw error(strFmt("@SCM:MapKeyValueNotExists", mapKey, classStr(InventReceiveListSortByStatusDateExpectedFlight)));
            }

            ListIterator listIterator = new ListIterator(_listToSort);
            InventTrans inventTransTmp;
            while (listIterator.more())
            {
                inventTransTmp = null;
                inventTransTmp = listIterator.value();
                if (markedTransOriginSet.in(inventTransTmp.MarkingRefInventTransOrigin) &&
                    inventTransTmp.StatusReceipt == statusReceiptEnumerator.current())
                {
                    result.addEnd(inventTransTmp);
                    remainingRecords--;
                    if (remainingRecords == 0)
                    {
                        return result;
                    }
                    listIterator.delete();
                }
                else
                {
                    listIterator.next();
                }
            }

        }

        if (_listToSort.elements() > 0)
        {
            // shouldn't happen unless marking is single sided (issue marked on receipt doesn't appear to be marked).
            result.appendList(_listToSort);
        }

        return result;

    }

]]></Source>
			</Method>
			<Method>
				<Name>convertMapToList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the <c>orderedRecords</c> map to a list.
    /// </summary>
    /// <returns>The map converted to a list.</returns>
    public List convertMapToList()
    {
        List result = new List(Types::Record);
        List markedList = new List(Types::Record);

        MapEnumerator enum = orderedRecords.getEnumerator();
        InventTrans inventTrans;
        boolean allDim;

        while (enum.moveNext())
        {
            inventTrans = enum.currentValue();

            // if more than 1 marked receipt with same StatusReceipt we need to sort on delivery date of marked issue
            if (inventTrans.MarkingRefInventTransOrigin
                 && inventTrans.RecId != parameters.preferedInventTransRecId)
            {
                markedList.addEnd(inventTrans);
                allDim = !receiptTransSetSpecified.in(inventTrans.RecId); //If present in the set, it is captured by a dim specific query
            }
            else
            {
                if (markedList.elements())
                {
                    result.appendList(this.sortMarkedList(markedList, allDim));
                    markedList = new List(Types::Record);
                }
                result.addEnd(inventTrans);
            }
        }

        if (markedList.elements())
        {
            result.appendList(this.sortMarkedList(markedList, allDim));
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildReceiptTransListSpecifiedDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build a sorted list matching required dimensions.
    /// </summary>
    /// <remarks>Marked receipts are sorted by delivery date of the issue.</remarks>
    private void buildReceiptTransListSpecifiedDimension()
    {
        InventTrans inventTransReceipt;

        while select forupdate forceplaceholders inventTransReceipt
            where inventTransReceipt.InventTransOrigin  == parameters.movement.inventTransOriginId()
                && inventTransReceipt.TransChildType    == parameters.inventTransChildType
                && inventTransReceipt.TransChildRefId   == parameters.inventTransChildRefId
                && inventTransReceipt.StatusReceipt     >= parameters.fromStatus
                && inventTransReceipt.StatusReceipt     <= parameters.toStatus
                && inventTransReceipt.StatusIssue       == StatusIssue::None
            #inventDimExistsJoin(inventTransReceipt.InventDimId, inventDim, parameters.inventDimCriteria, parameters.inventDimParm)
        {
            if (this.mustAddTransactionToReceiptList(inventTransReceipt))
            {
                this.addRecord(inventTransReceipt);
                receiptTransSetSpecified.add(inventTransReceipt.RecId);
                qtySpecifiedDimensions += inventTransReceipt.Qty;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildReceiptTransListSpecifiedDimensionAllowBlank</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a sorted list matching non-empty inventory transaction dimensions.
    /// </summary>
    /// <remarks>Marked receipts are sorted by delivery date of the issue.</remarks>
    private void buildReceiptTransListSpecifiedDimensionAllowBlank()
    {
        InventTrans     inventTransReceipt;
        InventDimParm   inventDimParmAllowBlank;

        inventDimParmAllowBlank.setAllInventDim();

        while select forupdate forceplaceholders inventTransReceipt
            where inventTransReceipt.InventTransOrigin  == parameters.movement.inventTransOriginId()
                && inventTransReceipt.TransChildType    == parameters.inventTransChildType
                && inventTransReceipt.TransChildRefId   == parameters.inventTransChildRefId
                && inventTransReceipt.StatusReceipt     >= parameters.fromStatus
                && inventTransReceipt.StatusReceipt     <= parameters.toStatus
                && inventTransReceipt.StatusIssue       == StatusIssue::None
            #inventDimExistsJoinAllowBlank(inventTransReceipt.InventDimId, inventDim, parameters.inventDimCriteria, parameters.inventDimParm, inventDimParmAllowBlank)
        {
            if (this.mustAddTransactionToReceiptList(inventTransReceipt))
            {
                this.addRecord(inventTransReceipt);
                receiptTransSetSpecified.add(inventTransReceipt.RecId);
                qtySpecifiedDimensions += inventTransReceipt.Qty;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildReceiptTransListSpecifiedDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a sorted list matching required inventDimId.
    /// </summary>
    /// <param name = "_inventDimId">The exact inventory dimension.</param>
    /// <remarks>Marked receipts are sorted by delivery date of the issue.</remarks>
    private void buildReceiptTransListSpecifiedDimId(InventDimId _inventDimId)
    {
        InventTrans inventTransReceipt;

        while select forupdate inventTransReceipt
            where inventTransReceipt.InventTransOrigin  == parameters.movement.inventTransOriginId()
                && inventTransReceipt.TransChildType    == parameters.inventTransChildType
                && inventTransReceipt.TransChildRefId   == parameters.inventTransChildRefId
                && inventTransReceipt.StatusReceipt     >= parameters.fromStatus
                && inventTransReceipt.StatusReceipt     <= parameters.toStatus
                && inventTransReceipt.StatusIssue       == StatusIssue::None
                && inventTransReceipt.InventDimId       == _inventDimId
        {
            if (this.mustAddTransactionToReceiptList(inventTransReceipt))
            {
                this.addRecord(inventTransReceipt);
                receiptTransSetSpecified.add(inventTransReceipt.RecId);
                qtySpecifiedDimensions += inventTransReceipt.Qty;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildReceiptTransListAllDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a sorted list matching all dimensions.
    /// </summary>
    /// <remarks>Marked receipts are sorted by delivery date of the issue.</remarks>
    protected void buildReceiptTransListAllDimension()
    {
        InventTrans inventTransReceipt;

        while select forupdate forceplaceholders inventTransReceipt
            where inventTransReceipt.InventTransOrigin  == parameters.movement.inventTransOriginId()
                && inventTransReceipt.TransChildType    == parameters.inventTransChildType
                && inventTransReceipt.TransChildRefId   == parameters.inventTransChildRefId
                && inventTransReceipt.StatusReceipt     >= parameters.fromStatus
                && inventTransReceipt.StatusReceipt     <= parameters.toStatus
                && inventTransReceipt.StatusIssue       == StatusIssue::None
        {
            // To avoid duplicates only add transactions that are not already in the receiptTransList
            if (this.mustAddTransactionToReceiptList(inventTransReceipt))
            {
                this.addRecord(inventTransReceipt);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAddTransactionToReceiptList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a transaction must be added to the receipt list.
    /// </summary>
    /// <param name = "_inventTransReceipt">An inventory transaction.</param>
    /// <returns>true if the inventory transaction must be added to the receipt list; otherwise, false.</returns>
    protected boolean mustAddTransactionToReceiptList(InventTrans _inventTransReceipt)
    {
        return !receiptTransSetSpecified.in(_inventTransReceipt.RecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>