<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMAnalyticFormDataEditMultiple</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Performs changing values for set of lines in <c>CFMAnalyticFormDataEdit</c>.
/// </summary>
class CFMAnalyticFormDataEditMultiple extends RunBaseBatch implements BatchRetryable
{
    CFMAnalyticFormDataEditTmp dataEditTmp, dataEditParm;
    CurrencyCode currencyCode;
    Array markedRecords;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructFromEditFormArgs</Name>
				<Source><![CDATA[
    public static CFMAnalyticFormDataEditMultiple constructFromEditFormArgs(Args _args)
    {
        CFMAnalyticFormDataEditMultiple editMultiple = new CFMAnalyticFormDataEditMultiple();

        Object caller = _args.caller();

        if (!caller || !(caller is FormRun))
        {
            throw error(error::missingParameter(null));
        }

        if (formHasMethod(caller, identifierStr(currencyCode)))
        {
            editMultiple.parmCurrencyCode(caller.currencyCode());
        }

        if (formHasMethod(caller, identifierStr(markedRecords)))
        {
            editMultiple.parmMarkedRecords(caller.markedRecords());
        }

        editMultiple.initFromEditTmpTable(_args.record());

        return editMultiple;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static  void main(Args _args)
    {
        CFMAnalyticFormDataEditMultiple editMultiple = CFMAnalyticFormDataEditMultiple::constructFromEditFormArgs(_args);

        if (editMultiple.prompt())
        {
            editMultiple.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataEditParm</Name>
				<Source><![CDATA[
    public CFMAnalyticFormDataEditTmp dataEditParm(CFMAnalyticFormDataEditTmp _dataEditParm = dataEditParm)
    {
        dataEditParm = _dataEditParm;

        return dataEditParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = Dialog::newFormnameRunbase(formstr(CFMAnalyticFormDataEditMultiple),this);

        dialog = this.dialogInternal(dialog);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromEditTmpTable</Name>
				<Source><![CDATA[
    public void initFromEditTmpTable(CFMAnalyticFormDataEditTmp _dataEditTmp)
    {
        dataEditTmp.linkPhysicalTableInstance(_dataEditTmp);

        dataEditParm.clear();
        dataEditParm.initValue();
        dataEditParm.SourceDataAreaId = _dataEditTmp.SourceDataAreaId;
        dataEditParm.SourceType = _dataEditTmp.SourceType;
        dataEditParm.AccountType = _dataEditTmp.AccountType;
        dataEditParm.PaymentDataAreaId = _dataEditTmp.PaymentDataAreaId;
        dataEditParm.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmCurrencyCode(CurrencyCode _currencyCode = currencyCode)
    {
        currencyCode = _currencyCode;

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkedRecords</Name>
				<Source><![CDATA[
    public Array parmMarkedRecords(Array _markedRecords = markedRecords)
    {
        markedRecords = _markedRecords;

        return markedRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (!markedRecords)
        {
            return;
        }

        container fieldIdChanges;

        fieldIdChanges = dataEditParm.fieldIdChanges();

        if (fieldIdChanges != conNull())
        {
            int arrayLen = markedRecords.lastIndex();
            int conChangeLen = conLen(fieldIdChanges);

            ttsBegin;

            for (int i = 1; i <= arrayLen; i++)
            {
                RecId recId = markedRecords.value(i);

                select firstonly forUpdate  dataEditTmp
                    where dataEditTmp.RecId == recId;

                if (dataEditTmp.AccountType == dataEditParm.AccountType)
                {
                    for (int j = 1; j <= conChangeLen; j++)
                    {
                        FieldId fieldIdChange = conPeek(fieldIdChanges, j);
                        dataEditTmp.(fieldIdChange) = dataEditParm.(fieldIdChange);
                    }

                    dataEditTmp.update();
                }
            }
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>