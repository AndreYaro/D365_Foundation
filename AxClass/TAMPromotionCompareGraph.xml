<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TAMPromotionCompareGraph</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>TAMPromotionCompareGraph</c> builds the
/// promotion comparison graph.
/// </summary>
class TAMPromotionCompareGraph extends Graphics
{

    smmCampaignTable        smmCampaignTable;
    MCRSourceCodeSetup      mcrSourceCodeSetup;
    ProjTable               projTable;

    TAMPromoStatistic        tamPromoStatistic;
    TmpMCRPromotionStatistic tmpMCRPromotionStatisticActual;
    TmpMCRPromotionStatistic tmpMCRPromotionStatisticBudget;

    FormActiveXControl      graphControl;

    // When true calculate stats for campaigns and all their
    // children.  When false class calculates for a source
    // code.
    boolean                 childPromo;

    Counter                 progressTotal;
    Counter                 progressCounter;

    QueryRun                queryRun;

    NoYes                   actual;
    NoYes                   budget;
    TAMPromoStatisticCalc   tamPromoStatisticCalc;

    DialogField             dialogActual;
    DialogField             dialogBudget;
    DialogField             dialogPromoStatistic;

    #define.currentVersion(1)
    #LOCALMACRO.ParmList
        actual,
        budget,
        TAMPromoStatisticCalc
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcStatsForCampaign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates statistics for the passed campaign.
    /// </summary>
    /// <param name="_smmCampaignTable">
    /// The campaign record for which the statistics should be calculated.
    /// </param>
    void calcStatsForCampaign(smmCampaignTable _smmCampaignTable)
    {
        if (smmCampaignTable.MCRSourceID)
        {
            mcrSourceCodeSetup = MCRSourceCodeSetup::find(smmCampaignTable.MCRSourceID);
        }
        else
        {
            mcrSourceCodeSetup = null;
        }

        if (smmCampaignTable.ProjId)
        {
            projTable = ProjTable::find(smmCampaignTable.ProjId);
        }
        else
        {
            projTable = null;
        }

        if (actual)
        {
            this.tamPromoStatistic(ProjActualBudget::Actual, tmpMCRPromotionStatisticActual);
            tamPromoStatistic.parmActual(true);
            tamPromoStatistic.parmTransId(smmCampaignTable.CampaignId);
            tamPromoStatistic.calc();

            tmpMCRPromotionStatisticActual.setTmpData(tamPromoStatistic.tmpMCRPromotionStatistic());
        }

        if (budget)
        {
            this.tamPromoStatistic(ProjActualBudget::Budget, tmpMCRPromotionStatisticBudget);
            tamPromoStatistic.parmTransId(smmCampaignTable.CampaignId);
            tamPromoStatistic.calc();

            tmpMCRPromotionStatisticBudget.setTmpData(tamPromoStatistic.tmpMCRPromotionStatistic());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcStatsForSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates statistics for the passed source code.
    /// </summary>
    /// <param name="_mcrSourceCodeSetup">
    /// The cource code record for which statistics should be calculated.
    /// </param>
    void calcStatsForSource(MCRSourceCodeSetup   _mcrSourceCodeSetup)
    {
        select firstonly ProjId from smmCampaignTable
            where smmCampaignTable.MCRSourceID == mcrSourceCodeSetup.SourceID;

        if (smmCampaignTable.ProjId)
        {
            projTable = ProjTable::find(smmCampaignTable.ProjId);
        }
        else
        {
            projTable = null;
        }

        if (actual)
        {
            this.tamPromoStatistic(ProjActualBudget::Actual, tmpMCRPromotionStatisticActual);
            tamPromoStatistic.parmActual(true);
            tamPromoStatistic.parmTransId(mcrSourceCodeSetup.SourceID);
            tamPromoStatistic.calc();

            tmpMCRPromotionStatisticActual.setTmpData(tamPromoStatistic.tmpMCRPromotionStatistic());
        }

        if (budget)
        {
            this.tamPromoStatistic(ProjActualBudget::Budget, tmpMCRPromotionStatisticBudget);
            tamPromoStatistic.parmTransId(mcrSourceCodeSetup.SourceID);
            tamPromoStatistic.calc();

            tmpMCRPromotionStatisticBudget.setTmpData(tamPromoStatistic.tmpMCRPromotionStatistic());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>chart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the promotion comparision chart.
    /// </summary>
    /// <param name="_campaign">
    /// A <c>boolean</c> value used to determine whether or not
    /// to include campaigns.
    /// </param>
    /// <returns>
    /// true if the user didn't cancel; otherwise, false.
    /// </returns>
    public boolean chart(boolean _campaign)
    {
        #macrolib.ChartFx
        boolean promptCanceled = false;

        this.resetGraph();
        this.parmScrollable(true);

        this.parmTitleYAxis("@SYS81541");

        if (_campaign)
        {
            this.parmChildPromo(true);
        }

        if (this.prompt())
        {
            this.parmTitle(enum2str(tamPromoStatisticCalc));
            this.run();
            this.showGraph();
        }
        else
        {
            promptCanceled = true;
        }

        return promptCanceled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog;
        this.updateQueryBuild();

        dialog = super();

        dialogPromoStatistic = dialog.addField(enumStr(TAMPromoStatisticCalc));
        dialogActual = dialog.addField(enumStr(NoYes), "@SYS33313", "@MCR26484");
        dialogActual.value(NoYes::Yes);
        dialogBudget = dialog.addField(enumStr(NoYes), "@MCR26461", "@MCR26485");
        dialogBudget.value(NoYes::Yes);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the user entered values from dialog form.
    /// </summary>
    /// <returns>
    /// true if the dialog runs successfully; otherwise, false.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        actual   = dialogActual.value();
        budget   = dialogBudget.value();
        tamPromoStatisticCalc = dialogPromoStatistic.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container  pack()
    {
        if (queryRun)
        {
            return [#CurrentVersion, #ParmList, queryRun.pack()];
        }
        else
        {
            return [#CurrentVersion, #ParmList, null];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCampaignTable</Name>
				<Source><![CDATA[
    public smmCampaignTable parmCampaignTable(smmCampaignTable _smmCampaignTable = smmCampaignTable)
    {
        smmCampaignTable  = _smmCampaignTable;

        return smmCampaignTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChildPromo</Name>
				<Source><![CDATA[
    public boolean parmChildPromo(boolean _childPromo = childPromo)
    {
        childPromo = _childPromo;

        return childPromo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceCodeSetup</Name>
				<Source><![CDATA[
    public MCRSourceCodeSetup parmSourceCodeSetup(MCRSourceCodeSetup _mcrSourceCodeSetup = mcrSourceCodeSetup)
    {
        mcrSourceCodeSetup  = _mcrSourceCodeSetup;

        return mcrSourceCodeSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loops over the source or campaign table and calculates the
    /// statistic specified by the user.
    /// </summary>
    public void run()
    {
        this.validate();

        progressTotal = SysQuery::countTotal(queryRun);
        this.progressInit("@SYS93174", progressTotal, #AviFormLetter);

        progress.setText("@SYS93174");

        while (queryRun.next())
        {
            progressCounter++;
            progress.setCount(progressCounter);

            if (childPromo)
            {
                smmCampaignTable = queryRun.get(tableNum(smmCampaignTable));
                this.calcStatsForCampaign(smmCampaignTable);
            }
            else
            {
                mcrSourceCodeSetup = queryRun.get(tableNum(MCRSourceCodeSetup));
                this.calcStatsForSource(mcrSourceCodeSetup);
            }
        }

        this.setGraphValues();

        progress = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGraphValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the values for the chart being generated, results depend on
    /// choices made by user.
    /// </summary>
    public void setGraphValues()
    {
        // Load graphics data and set titles.
        if (actual)
        {
            while select TransId, plTotalRevenue, plCostTotalCost, plTotalGrossMargin, PromoOrderCount
                from tmpMCRPromotionStatisticActual
            {
                if (tamPromoStatisticCalc == TAMPromoStatisticCalc::Revenue)
                {
                    this.loadData(tmpMCRPromotionStatisticActual.TransId, "@SYS33313", tmpMCRPromotionStatisticActual.plTotalRevenue);     // Actual Total Revenue
                }

                if (tamPromoStatisticCalc == TAMPromoStatisticCalc::Cost)
                {
                    this.loadData(tmpMCRPromotionStatisticActual.TransId, "@SYS33313", tmpMCRPromotionStatisticActual.plCostTotalCost);     // Actual Cost
                }

                if (tamPromoStatisticCalc == TAMPromoStatisticCalc::Margin)
                {
                    this.loadData(tmpMCRPromotionStatisticActual.TransId, "@SYS33313", tmpMCRPromotionStatisticActual.plTotalGrossMargin); // Actual Profit
                }

                if (tamPromoStatisticCalc == TAMPromoStatisticCalc::OrderCount)
                {
                    this.loadData(tmpMCRPromotionStatisticActual.TransId, "@SYS33313", tmpMCRPromotionStatisticActual.PromoOrderCount);    // Actual Order Count
                }
            }
        }

        if (budget)
        {
            while select TransId, plTotalRevenue, plCostTotalCost, plTotalGrossMargin, PromoOrderCount
                from tmpMCRPromotionStatisticBudget
            {
                if (tamPromoStatisticCalc == TAMPromoStatisticCalc::Revenue)
                {
                    this.loadData(tmpMCRPromotionStatisticBudget.TransId, "@MCR26461", tmpMCRPromotionStatisticBudget.plTotalRevenue);     // Projected Revenue
                }

                if (tamPromoStatisticCalc == TAMPromoStatisticCalc::Cost)
                {
                    this.loadData(tmpMCRPromotionStatisticBudget.TransId, "@MCR26461", tmpMCRPromotionStatisticBudget.plCostTotalCost);     // Projected Cost
                }

                if (tamPromoStatisticCalc == TAMPromoStatisticCalc::Margin)
                {
                    this.loadData(tmpMCRPromotionStatisticBudget.TransId, "@MCR26461", tmpMCRPromotionStatisticBudget.plTotalGrossMargin); // Projected Profit
                }

                if (tamPromoStatisticCalc == TAMPromoStatisticCalc::OrderCount)
                {
                    this.loadData(tmpMCRPromotionStatisticBudget.TransId, "@MCR26461", tmpMCRPromotionStatisticBudget.PromoOrderCount);    // Projected Order Count
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showZAxisLeg</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows or hides the Z axis label.
    /// </summary>
    /// <remarks>
    /// Method is empty to prevent anything from executing.
    /// The Z axis label should be legends.
    /// </remarks>
    public void showZAxisLeg()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>tamPromoStatistic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates and initializes a <c>TAMPromoStatistics</c> object.
    /// </summary>
    /// <param name="_projActualBudget">
    /// Stores actual budget information used to instantiate the statistics object.
    /// </param>
    /// <param name="_tmpPromotionStatistic">
    /// Temporary table buffer used to instantiate statistics object.
    /// </param>
    /// <returns>
    /// A <c>TAMPromoStatistics</c> object.
    /// </returns>
    public TAMPromoStatistic tamPromoStatistic(ProjActualBudget _projActualBudget,
                                              TmpMCRPromotionStatistic  _tmpPromotionStatistic)
    {
        ProjId  searchProjId;
        tamPromoStatistic   = new TAMPromoStatistic(_tmpPromotionStatistic);

        // If a project is associtated to the campaign or source calculate the stats for it.
        if (projTable)
        {
            if (childPromo)
            {
                searchProjId = projTable.ProjId + '*';
            }
            else
            {
                searchProjId = projTable.ProjId;
            }

            tamPromoStatistic.parmProjId(projTable.ProjId);

            if ((select firstonly RecId from projTable
                    where projTable.ProjId like searchProjId
                    && projTable.Type == ProjType::TimeMaterial).RecId)
            {
                tamPromoStatistic.parmTimeMaterial(true);
                tamPromoStatistic.parmRevenue(true);
                tamPromoStatistic.parmHour(true);
                tamPromoStatistic.parmExpenses(true);
                tamPromoStatistic.parmItem(true);
                tamPromoStatistic.parmOnAcc(true);
            }

            if ((select firstonly RecId from projTable
                    where projTable.ProjId like searchProjId
                    && projTable.Type == ProjType::FixedPrice).RecId)
            {
                tamPromoStatistic.parmFixedPrice(true);
                tamPromoStatistic.parmRevenue(true);
                tamPromoStatistic.parmHour(true);
                tamPromoStatistic.parmExpenses(true);
                tamPromoStatistic.parmItem(true);
                tamPromoStatistic.parmOnAcc(true);
            }

            if ((select firstonly RecId from projTable
                    where projTable.ProjId like searchProjId
                    && projTable.Type == ProjType::Investment).RecId)
            {
                tamPromoStatistic.parmInvestment(true);

                tamPromoStatistic.parmHour(true);
                tamPromoStatistic.parmExpenses(true);
                tamPromoStatistic.parmItem(true);
            }

            if ((select firstonly RecId from projTable
                    where projTable.ProjId like searchProjId
                    && (projTable.Type == ProjType::Cost ||
                        projTable.Type == ProjType::Internal)).RecId)
            {
                tamPromoStatistic.parmInternalCost(true);

                tamPromoStatistic.parmHour(true);
                tamPromoStatistic.parmExpenses(true);
                tamPromoStatistic.parmItem(true);
            }

            if ((select firstonly RecId from projTable
                    where projTable.ProjId like searchProjId
                    && projTable.Type  == ProjType::Time).RecId)
            {
                tamPromoStatistic.parmTime(true);
                tamPromoStatistic.parmHour(true);
            }
        }
        else
        {
            tamPromoStatistic.parmProjId('');
        }

        tamPromoStatistic.parmPromoSO(true);
        tamPromoStatistic.parmPromoCosts(true);
        tamPromoStatistic.parmChildPromo(childPromo);
        tamPromoStatistic.parmCampaignId(smmCampaignTable.CampaignId);
        tamPromoStatistic.parmSourceId(mcrSourceCodeSetup.SourceID);
        tamPromoStatistic.parmActualBudget(_projActualBudget);

        return tamPromoStatistic;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean  unpack(container  packedClass)
    {
        Version     version = conPeek(packedClass, 1);
        boolean     ret;
        container   packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #ParmList, packedQuery] = packedClass;

                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }

                ret = true;
                break;
            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>QueryRun</c> class variable based on
    /// childPromo class variable.
    /// </summary>
    /// <returns>
    /// A <c>QueryRun</c> object.
    /// </returns>
    public QueryRun updateQueryBuild()
    {
        // Query based on the smmCampaignTable.
        if (childPromo)
        {
            queryRun = new QueryRun(queryStr(MCRCampaignStats));
        }
        // Query based on the MCRSourceCodeSetup table.
        else
        {
            queryRun = new QueryRun(queryStr(MCRSourceCodeStats));
        }

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the user's input.
    /// </summary>
    /// <param name="calledFrom">
    /// The form from which the graph was called.
    /// </param>
    /// <returns>
    /// true if the input is valid; otherwise, false.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super();

        if (!actual && !budget)
        {
            ret = false;
            throw error("@MCR39762");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newGraphicsNoTitles</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the graph.
    /// </summary>
    /// <param name="_control">
    /// Form control that will display the graph.
    /// </param>
    /// <param name="_width">
    /// Width of the graph.
    /// </param>
    /// <param name="_height">
    /// Height of the graph.
    /// </param>
    /// <returns>
    /// A <c>TAMPromotionCompareGraph</c> object.
    /// </returns>
    public static TAMPromotionCompareGraph newGraphicsNoTitles(FormManagedHostControl _control,
                                                              int                  _width,
                                                              int                  _height)
    {
        #macrolib.ChartFx
        TAMPromotionCompareGraph    graphics;
        return graphics;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>