<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_BlockingReceipt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventMov_BlockingReceipt</c> class is a specialized <c>InventMovement</c> class version
///    responsible for handling inventory blocking receipt transactions.
/// </summary>
[InventMovementFactoryAttribute(tableStr(InventBlocking),InventMovSubType::TransferReceipt)]
class InventMov_BlockingReceipt extends InventMov_Blocking
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the relationship between the inventory transactions originator and the owner.
    /// </summary>
    public void createOriginOwnerRelationship()
    {
        InventTransOriginId originId = this.inventTransOriginId();

        if (originId && inventBlocking.RecId)
        {
            InventTransOriginBlockingReceipt::writeOriginOwnerRelationship(inventBlocking.RecId, originId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the relationship between the inventory transactions originator and the corresponded owner.
    /// </summary>
    public void deleteOriginOwnerRelationship()
    {
        if (inventBlocking.RecId)
        {
            InventTransOriginBlockingReceipt::deleteOwnerRelationship(inventBlocking.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransIdTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Takes the corresponding inventory transaction ID of issue inventory blocking transaction from the
    ///    <c>InventBlocking</c> table.
    /// </summary>
    /// <returns>
    ///    The corresponding inventory transaction ID.
    /// </returns>
    protected InventTransId inventTransIdTransfer()
    {
        return inventBlocking.InventTransIdIssue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets or gets the ID of the inventory transaction originator that corresponds to the movement.
    /// </summary>
    /// <param name="_inventTransOriginId">
    ///    The new value of the ID of the inventory transaction originator.
    /// </param>
    /// <returns>
    ///    The ID of the inventory transaction originator that corresponds to the movement.
    /// </returns>
    public InventTransOriginId inventTransOriginId(InventTransOriginId _inventTransOriginId = inventTransOriginId)
    {
        if (_inventTransOriginId != inventTransOriginId)
        {
            inventTransOriginId = _inventTransOriginId;
        }
        else
        {
            if (!inventTransOriginId)
            {
                inventTransOriginId = InventTransOriginBlockingReceipt::findInventTransOriginId(inventBlocking.RecId);
            }
        }

        return inventTransOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustShowMarkingWarningOnUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines if a warning message is shown if marking cannot be updated according to dimensions.
    /// </summary>
    /// <returns>
    ///   false because we don't want comments for inventory blocking as they never get posted anyway.
    /// </returns>
    public boolean mustShowMarkingWarningOnUpdate()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>InventMovement</c> class based on the original record.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>InventMovement</c> class based on the original record.
    /// </returns>
    public InventMovement newMovement_Orig()
    {
        InventMovement movement_orig;

        if (inventBlocking.orig().hasExpectedReceipt())
        {
            movement_orig = InventMovement::construct(inventBlocking.orig(), this.inventMovSubType());
        }

        return movement_orig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_TransferIssue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventMovement</c> class that corresponds to the related issue
    ///    inventory blocking transaction.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>InventMovement</c> class that corresponds to the related issue inventory
    ///    blocking transaction.
    /// </returns>
    public InventMovement  newMovement_TransferIssue()
    {
        return InventMovement::construct(inventBlocking,InventMovSubType::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_TransferReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves this instance of the <c>InventMovement</c> class.
    /// </summary>
    /// <returns>
    ///    The current instance of the <c>InventMovement</c>.
    /// </returns>
    public InventMovement  newMovement_TransferReceipt()
    {
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWTransQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the inventory blocking catch weight quantity as the inventory transaction catch weight
    /// quantity when a receipt is expected.
    /// </summary>
    /// <returns>
    /// The inventory transaction catch weight quantity if a receipt is expected; otherwise, zero quantity.
    /// </returns>
    public PdsCWInventQty pdsCWTransQty()
    {
        if (!inventBlocking.ExpectReceipt)
        {
            return 0;
        }

        return inventBlocking.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a transaction date.
    /// </summary>
    /// <returns>
    /// The transaction date.
    /// </returns>
    public TransDate transDate()
    {
        // Ensure that if blocking is modified then dates are updated if exceeding system date
        return max(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), inventBlocking.ExpectedReceiptDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferDirection</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the transfer direction of the inventory blocking movements.
    /// </summary>
    /// <returns>
    ///    The transfer direction of the inventory blocking movements.
    /// </returns>
    public InventDirection transferDirection()
    {
        return InventDirection::Receipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the receipt inventory blocking transaction ID from the <c>InventBlocking</c> table.
    /// </summary>
    /// <returns>
    ///    The receipt inventory blocking transaction ID.
    /// </returns>
    public InventTransId transId()
    {
        return inventBlocking.InventTransIdReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the inventory blocking quantity as the inventory transaction quantity if a receipt is
    ///    expected.
    /// </summary>
    /// <returns>
    ///    The inventory transaction quantity if a receipt is expected; otherwise, zero quantity.
    /// </returns>
    public InventQty  transQty()
    {
        if (!inventBlocking.ExpectReceipt)
        {
            return 0;
        }

        return inventBlocking.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transSign</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies the inventory transaction sign.
    /// </summary>
    /// <returns>
    ///    The method always returns one as every receipt inventory transaction has positive sign.
    /// </returns>
    public Integer transSign()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventBlocking</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>InventMov_BlockingReceipt</c> class based on the specified
    ///    record.
    /// </summary>
    /// <param name="_inventBlocking">
    ///    The <c>InventBlocking</c> record for which the class is instantiated.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventMov_BlockingReceipt</c> class.
    /// </returns>
    public static InventMov_BlockingReceipt newFromInventBlocking(InventBlocking _inventBlocking)
    {
        return new InventMov_BlockingReceipt(_inventBlocking);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>