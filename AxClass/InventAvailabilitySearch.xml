<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventAvailabilitySearch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventAvailabilitySearch</c> class is a builder of
/// the search criteria that can be used to find the on hand availability.
/// </summary>
/// <remarks>
/// <para>
/// The <c>InventAvailabilitySearch</c> has a number of setter methods that allow you to specify
/// as much information about the desired on hand as you have. The more information you can provide
/// the better performance you will get. E.g. providing an <c>InventTable</c> record instead of <c>ItemId</c>
/// will result in better performance.
/// </para>
/// <para>
/// If you don't specify some of the mandatory parameters
/// your search criteria will be invalid (see more in the documentation to the <c>isValid</c> method.
/// </para>
/// <para>
/// Note that the <c>InventAvailabilitySearch</c> should only be used to instantiate
/// a single search criteria. Reusing the same search criteria for different searches is not supported.
/// I.e. you should never do the following:
/// - create a search criteria
/// - run the availability search
/// - change the same search criteria (e.g. the dimension criteria)
/// - run the availability search again.
/// Always create a new criteria insted.
/// </para>
/// </remarks>
public class InventAvailabilitySearch implements SysPackable
{
    ItemId          itemId;
    InventTable     inventTable;
    UnknownNoYes    isItemWHSEnabled;

    InventSum       inventSum;

    InventDim       inventDimCriteria;
    InventDimParm   inventDimCriteriaParm;
    boolean         isInventDimCriteriaSet;
    boolean         isInventSumSet;

    #LOCALMACRO.FieldsList
        itemId,
        isItemWHSEnabled,
        isInventDimCriteriaSet,
        inventDimCriteria,
        inventDimCriteriaParm
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canDetermineInventDimCriteria</Name>
				<Source><![CDATA[
    private boolean canDetermineInventDimCriteria()
    {
        if (!isInventDimCriteriaSet)
        {
            return inventSum.InventDimId != '';
        }

        return isInventDimCriteriaSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// The inventory dimensions criteria.
    /// </summary>
    /// <returns>
    /// An <c>InventDim</c> record.
    /// </returns>
    /// <remarks>
    /// Even if the dimension criteria was not set explicitly by the user of the API
    /// it can be derived from the <c>InventSum.InventDimId</c> field.
    /// Also, the dim criteria will be automatically populated if the <c>InventSum</c>
    /// record was joined to an <c>InventDim</c> record.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Throws an error if it was not possible to derive the dimension criteria
    /// based on the provided information.
    /// </exception>
    public InventDim inventDimCriteria()
    {
        if (!isInventDimCriteriaSet)
        {
            if (inventSum.InventDimId)
            {
                this.setInventDimCriteria(inventSum.inventDim());
            }
        }

        return inventDimCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimCriteriaParm</Name>
				<Source><![CDATA[
    /// <summary>
    /// An <c>InventDimParm</c> record that defines which of the dimension criteria values
    /// should be used when searching for the availability.
    /// </summary>
    /// <returns>
    /// An <c>InventDimParm</c> record.
    /// </returns>
    public InventDimParm inventDimCriteriaParm()
    {
        return inventDimCriteriaParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// The <c>InventSum</c> record that matches the search criteria.
    /// </summary>
    /// <returns>
    /// An <c>InventSum</c> record.
    /// </returns>
    /// <remarks>
    /// If the caller of the API did not provide the <c>InventSum</c> record then an empty record will be returned.
    /// If the <c>isInventSumSet</c> method returns false, then this record is considered to be empty.
    /// </remarks>
    public InventSum inventSum()
    {
        return inventSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// The item criteria.
    /// </summary>
    /// <returns>
    /// An <c>InventTable</c> record.
    /// </returns>
    /// <remarks>
    /// Even if the <c>InventTable</c> record was not provided by the user of the API explicitly
    /// the record will be found based on the ID of the criteria item.
    /// </remarks>
    public InventTable inventTable()
    {
        inventTable = inventTable ? inventTable : InventTable::find(itemId);
        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventSumSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if the <c>InventSum</c> record has been set for this search criteria.
    /// </summary>
    /// <returns>
    /// True if the <c>InventSum</c> record has been set; otherwise, false.
    /// </returns>
    public boolean isInventSumSet()
    {
        return isInventSumSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemWHSEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the criteria item is WHS-enabled.
    /// </summary>
    /// <returns>
    /// true if the criteria item is WHS-enabled; otherwise, false.
    /// </returns>
    public boolean isItemWHSEnabled()
    {
        if (isItemWHSEnabled == UnknownNoYes::Unknown)
        {
            isItemWHSEnabled = WHSInventEnabled::exist(itemId) ? UnknownNoYes::Yes : UnknownNoYes::No;
        }

        return isItemWHSEnabled == UnknownNoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the search criteria is valid or not.
    /// </summary>
    /// <returns>
    /// true, if the search criteria is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// <para>
    /// You always have to provide the criteria item. There are multiple ways of doing that
    /// (you can provide the ID of the item, you can provide the <c>InventTable</c> record
    /// and it can also be derived from <c>InventSum.ItemId</c>).
    /// </para>
    /// </remarks>
    public boolean isValid()
    {
        return itemId != ''
            && this.canDetermineInventDimCriteria();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// The ID of the criteria item.
    /// </summary>
    /// <returns>
    /// The ID of the criteria item.
    /// </returns>
    public ItemId itemId()
    {
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container inventSumPacked = isInventSumSet ? [isInventSumSet, inventSum] : [isInventSumSet];

        return [#FieldsList, inventSumPacked];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the inventory dimensions criteria.
    /// </summary>
    /// <param name="_inventDimCriteria">
    /// The inventory dimensions criteria.
    /// </param>
    /// <param name="_inventDimCriteriaParm">
    /// The flags that define which of the specified inventory dimensions should be used as filters; optional.
    /// </param>
    /// <remarks>
    /// By default all the non-empty dimensions are used as filters.
    /// </remarks>
    public void setInventDimCriteria(
        InventDim       _inventDimCriteria,
        InventDimParm   _inventDimCriteriaParm = _inventDimCriteria.toDimParm())
    {
        inventDimCriteria = _inventDimCriteria;
        inventDimCriteriaParm = _inventDimCriteriaParm;

        isInventDimCriteriaSet = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>InventSum</c> record that matches the search criteria.
    /// </summary>
    /// <param name="_inventSum">
    /// The <c>InventSum</c> record.
    /// </param>
    /// <remarks>
    /// <para>
    /// This is an optional parameter that you can set to boost performance.
    /// If it is not specified the search provider will be able to find it based on the rest of the criteria.
    /// </para>
    /// <para>
    /// It is the responsiblity of the user of the API to make sure that the provided <c>InventSum</c> record
    /// matches the rest of the criteria.
    /// </para>
    /// <para>
    /// If you set the <c>InventSum</c> record then you don't need to explicitly specify the ID of the criteria item.
    /// </para>
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Throws an error if the search criteria is holding a reference to an item
    /// that is different from <c>InventSum.ItemId</c>
    /// </exception>
    public void setInventSum(InventSum _inventSum)
    {
        inventSum = _inventSum;

        isInventSumSet = true;

        if (inventSum.ItemId)
        {
            this.setItemId(inventSum.ItemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>InventTable</c> record for the criteria item.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> record.
    /// </param>
    /// <remarks>
    /// <para>
    /// This is an optional parameter that you can set to boost performance
    /// if you have already fetched the <c>InventTable</c> record.
    /// If it is not specified the search crtieria object will be able to find it based on the rest of the criteria.
    /// </para>
    /// <para>
    /// If you set this parameter then you don't need to set the ID of the item explicitly.
    /// </para>
    /// </remarks>
    public void setInventTable(InventTable _inventTable)
    {
        inventTable = _inventTable;

        this.setItemId(_inventTable.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the ID of the criteria item.
    /// </summary>
    /// <param name="_itemId">
    /// The ID of the criteria item.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Throws an error if the search criteria is holding a reference to another item already.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Throws an error if the ID is not specified.
    /// </exception>
    public void setItemId(ItemId _itemId)
    {
        if (!_itemId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (itemId && itemId != _itemId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        itemId = _itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItemIsWHSEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value indicating whether the criteria item is WHS-enabled.
    /// </summary>
    /// <param name="_isWHSEnabled">
    /// The value indicating whether the criteria item is WHS-enabled.
    /// </param>
    /// <remarks>
    /// <para>It is an optional parameter that can be passed in to boost the performance.</para>
    /// <para>It is the responsiblity of the user of the API to provide the correct information about the criteria item.</para>
    /// </remarks>
    public void setItemIsWHSEnabled(boolean _isWHSEnabled)
    {
        isItemWHSEnabled = _isWHSEnabled ? UnknownNoYes::Yes : UnknownNoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packed)
    {
        container packedInventSum;

        [#FieldsList, packedInventSum] = _packed;

        isInventSumSet = conPeek(packedInventSum, 1);
        if (isInventSumSet)
        {
            inventSum = conPeek(packedInventSum, 2);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventAvailabilitySearch construct()
    {
        return new InventAvailabilitySearch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromItemDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates search criteria based on the specified item and dimension criteria.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> record for the item.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The inventory dimension criteria.
    /// </param>
    /// <returns>
    /// The <c>InventAvailabilitySearch</c> object.
    /// </returns>
    /// <remarks>
    /// Non-empty dimension values from the dimension criteria will be used to filter the availability.
    /// Empty dimensions will be ignored.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Throws an error if the <c>_itemId</c> is blank.
    /// </exception>
    public static InventAvailabilitySearch newFromItemDim(InventTable _inventTable, InventDim _inventDimCriteria)
    {
        InventAvailabilitySearch search = InventAvailabilitySearch::construct();

        search.setInventTable(_inventTable);
        search.setInventDimCriteria(_inventDimCriteria);

        return search;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromItemIdDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates search criteria based on the specified item ID and dimension criteria.
    /// </summary>
    /// <param name="_itemId">
    /// The ID of the item.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The inventory dimension criteria.
    /// </param>
    /// <returns>
    /// The <c>InventAvailabilitySearch</c> object.
    /// </returns>
    /// <remarks>
    /// Non-empty dimension values from the dimension criteria will be used to filter the availability.
    /// Empty dimensions will be ignored.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Throws an error if the <c>_itemId</c> is blank.
    /// </exception>
    public static InventAvailabilitySearch newFromItemIdDim(ItemId _itemId, InventDim _inventDimCriteria)
    {
        InventAvailabilitySearch search = InventAvailabilitySearch::construct();

        search.setItemId(_itemId);
        search.setInventDimCriteria(_inventDimCriteria);

        return search;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromItemSumDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates search criteria based on the specified item, the specified <c>InventSum</c> and
    /// the dimensions that were used as a filter to find this record.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> record for the item.
    /// </param>
    /// <param name="_inventSum">
    /// The <c>InventSum</c> record that contains on hand information
    /// for the specified dimension criteria.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The inventory dimension criteria.
    /// </param>
    /// <returns>
    /// The <c>InventAvailabilitySearch</c> object.
    /// </returns>
    /// <remarks>
    /// Non-empty dimension values from the dimension criteria will be used to filter the availability.
    /// Empty dimensions will be ignored.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Throws an error if the <c>_inventTable</c> record is not specified.
    /// </exception>
    public static InventAvailabilitySearch newFromItemSumDim(
        InventTable _inventTable,
        InventSum   _inventSum,
        InventDim   _inventDimCriteria)
    {
        InventAvailabilitySearch search = InventAvailabilitySearch::construct();

        search.setInventTable(_inventTable);
        search.setInventSum(_inventSum);
        search.setInventDimCriteria(_inventDimCriteria);

        return search;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a search criteria based on the specified <c>InventSum</c>.
    /// </summary>
    /// <param name="_inventSum">
    /// The <c>InventSum</c> record that contains on hand information
    /// for the specified dimension criteria.
    /// </param>
    /// <returns>
    /// The <c>InventAvailabilitySearch</c> object.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws an error if <c>InventSum.InventDimId</c> is blank.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Throws an error if <c>InventSum.ItemId</c> is blank.
    /// </exception>
    public static InventAvailabilitySearch newFromSum(InventSum _inventSum)
    {
        InventAvailabilitySearch search = InventAvailabilitySearch::construct();

        search.setInventSum(_inventSum);

        return search;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSumDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates search criteria based on the specified <c>InventSum</c> and
    /// the dimensions that were used as a filter to find this record.
    /// </summary>
    /// <param name="_inventSum">
    /// The <c>InventSum</c> record that contains on hand information
    /// for the specified dimension criteria.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The inventory dimensions of the <c>InventSum</c> record.
    /// </param>
    /// <returns>
    /// The <c>InventAvailabilitySearch</c> object.
    /// </returns>
    /// <remarks>
    /// Non-empty dimension values from the dimension criteria will be used to filter the availability.
    /// Empty dimensions will be ignored.
    /// Note that it is the responsibility of the user of the API to provide the correct dimensions that were used
    /// to find the specified <c>InventSum</c>.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Throws an error if <c>InventSum.ItemId</c> is blank.
    /// </exception>
    public static InventAvailabilitySearch newFromSumDim(InventSum _inventSum, InventDim _inventDimCriteria)
    {
        InventAvailabilitySearch search = InventAvailabilitySearch::construct();

        search.setInventSum(_inventSum);
        search.setInventDimCriteria(_inventDimCriteria);

        return search;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
