<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendDocumentTableTypePhysical_PurchParm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendDocumentTableTypePhysical_PurchParm</c> class is used for validation, and also to apply
/// default values to active invoice headers.
/// </summary>
public class VendDocumentTableTypePhysical_PurchParm extends VendDocumentTableTypePhysical
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkDateForInvoice</Name>
				<Source><![CDATA[
    // Active invoice headers defaulting and validation.
    // Logic executed when invoice is entered through UI
    /// <summary>
    /// Validates the accounting date provided for invoice documents.
    /// </summary>
    /// <param name="_accountingDate">
    /// The date to be verified.
    /// </param>
    /// <returns>
    /// true if the date provided is valid; otherwise, false.
    /// </returns>
    public boolean checkDateForInvoice(date _accountingDate)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable = this.vendDocumentTableMap();

        // just display infolog
        if (!vendInvoiceInfoTable.checkAccountingDate(_accountingDate))
        {
            checkFailed("@SYS335117");
        }

        return true; // posting code will validate
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies default values to an active invoice header record.
    /// </summary>
    public void defaultRow()
    {
        // Do not put fields that are common between service and interactive defaulting into this method.
        // If a field should be defaulted for both scenarios, but the defaulting is different
        // use either VendDocumentTableType.defaultRow or VendDocumentTableType.defaultAdditionalFields.
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultRecalculate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default value for the recalculate field.
    /// </summary>
    /// <param name="_recalculate">
    /// The suggested value of the recalculate field.
    /// </param>
    /// <returns>
    /// The default value of recalculate field for the current record.
    /// </returns>
    public NoYes determineDefaultRecalculate(NoYes _recalculate)
    {
        return _recalculate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultVendInvoiceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default value for the <c>VendInvoiceGroup</c> field.
    /// </summary>
    /// <returns>
    /// The default value of <c>VendInvoiceGroup</c> field for the current record.
    /// </returns>
    /// <remarks>
    /// The default <c>InvoiceGroup</c> field for web services is returned if the current invoice is
    /// created from a Web service; otherwise the default <c>VendInvoiceGroup</c> field for invoices that
    /// was created internally is returned.
    /// </remarks>
    public VendInvoiceGrouping determineDefaultVendInvoiceGroup()
    {
        if (VendParameters::find().VendInvoiceGroupingEnable == NoYes::Yes)
        {
            return VendParameters::getDefaultInternalInvoiceGroup();
        }

        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultVendInvoiceSaveStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the save status of an invoice.
    /// </summary>
    /// <returns>
    /// An applicable <c>VendInvoiceSaveStatus</c> value.
    /// </returns>
    public VendInvoiceSaveStatus determineDefaultVendInvoiceSaveStatus()
    {
        VendInvoiceInfoTable vendInvoiceInfoTable = this.vendDocumentTableMap();

        if (vendInvoiceInfoTable.DocumentOrigin == DocumentOrigin::EnterprisePortal)
        {
            return VendInvoiceSaveStatus::Pending;
        }

        return VendInvoiceSaveStatus::New;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultCashDiscDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies default values to fields that are required to calculate the <c>CashDiscDate</c> field.
    /// </summary>
    public void initDefaultCashDiscDate()
    {
        // do not do anything
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceId_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoiceId by joining invoice series with invoice number
    /// </summary>
    /// <returns>
    /// The invoiceId
    /// </returns>
    private InvoiceId invoiceId_BR()
    {
        return strLRTrim(this.vendDocumentTableMap().VendDocumentTableMap::parmFiscalDocumentSeries_BR()) + strLRTrim(this.vendDocumentTableMap().Num);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCurrencyCodeForInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>CurrencyCode</c> field for invoice documents.
    /// </summary>
    /// <returns>
    /// true if the <c>CurrencyCode</c> field is valid; otherwise, false.
    /// </returns>
    public boolean validateCurrencyCodeForInvoice()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDocumentDateForInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>DocumentDate</c> field for the invoice documents.
    /// </summary>
    /// <returns>
    /// true if the <c>DocumentDate</c> field is valid; otherwise, false.
    /// </returns>
    public boolean validateDocumentDateForInvoice()
    {
        VendInvoiceInfoTable vendInvoiceInfoTable = this.vendDocumentTableMap();

        if (!vendInvoiceInfoTable.useDocumentDate())
        {
            // Using transDate for accounting date
            return true;
        }

        return this.checkDateForInvoice(this.vendDocumentTableMap().DocumentDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInvoiceAccountForInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>InvoiceAccount</c> field for invoice documents.
    /// </summary>
    /// <returns>
    /// true if the <c>InvoiceAccount</c> field is valid; otherwise, false.
    /// </returns>
    public boolean validateInvoiceAccountForInvoice()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNumForInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>Num</c> field for invoice documents.
    /// </summary>
    /// <returns>
    /// true if the <c>Num</c> field is valid; otherwise, false.
    /// </returns>
    public boolean validateNumForInvoice()
    {
        boolean ret;
        VendInvoiceInfoTable header = this.vendDocumentTableMap();
        VendTable vendTable = VendTable::find(header.InvoiceAccount);

        // just display infolog
        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            ret = vendTable.checkInvoice(
                  this.invoiceId_BR(),
                  header.TransDate);
        }
        else
        {
            // </GBR>
            ret = vendTable.checkInvoice(
                  header.Num,
                  header.TransDate);

            if (ret && !FeatureStateProvider::isFeatureEnabled(VendInvoiceExtendInvoiceIdFeature::instance()) && strLen(header.Num) > 20)
            {
                ret = checkFailed(strFmt("@AccountsPayable:VendInvoiceWithLongNumFail", header.Num));
            }
            // <GBR>
        }
        // </GBR>
        
        if (ret && PurchOrderCheckSkipValidationOnEmptyPurchIdFlight::instance().isEnabled())
        {
            ReuseVoucher reuseVoucher;
            reuseVoucher = VendParameters::find().CheckInvoice;
            if (reuseVoucher == ReuseVoucher::NoDuplicate || reuseVoucher == ReuseVoucher::NoDuplicateInYear)
            {
                if (!this.mainStrategy().purchTable().IntercompanycompanyId)
                {
                    CustInvoiceJour custInvoiceJour;
                    if (this.vendDocumentTableMap().PurchId && !custInvoiceJour.checkIntercompanyInvoice(this.vendDocumentTableMap().InvoiceAccount, this.vendDocumentTableMap().Num, vendTable.DataAreaId))
                    {
                        ret = checkFailed(strFmt("@SCM:NonIntercompanyPurchOrderInvoiceWithInterCompanySalesOrderInvoiceIdLabel", this.vendDocumentTableMap().Num));
                    }
                 }
            }
        }

        return ret; // posting code will validate
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePurchIdForInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>PurchId</c> field for invoice documents.
    /// </summary>
    /// <returns>
    /// true if the <c>PurchId</c> field is valid; otherwise, false.
    /// </returns>
    public boolean validatePurchIdForInvoice()
    {
        boolean ret = super();

        // Do not allow adding a purchase order when account is intercompany and a non-PO line exists.
        VendInvoiceInfoTable vendInvoiceInfoTable = this.vendDocumentTableMap() as VendInvoiceInfoTable;

        if (ret && vendInvoiceInfoTable.existIntercompanyNonPurchaseOrderLine())
        {
            error("@AccountsPayable:VendorInvoiceIntercompanyPurchaseOrderValidation");
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransDateForInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>TransDate</c> field for the invoice documents.
    /// </summary>
    /// <returns>
    /// true if the <c>TransDate</c> field is valid; otherwise, false.
    /// </returns>
    public boolean validateTransDateForInvoice()
    {
        VendInvoiceInfoTable vendInvoiceInfoTable = this.vendDocumentTableMap() as VendInvoiceInfoTable;

        if (vendInvoiceInfoTable.useDocumentDate())
        {
            // Using document date for accounting date
            return true;
        }

        return this.checkDateForInvoice(this.vendDocumentTableMap().TransDate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>