<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdMathEvaluator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// A class that can evaluate mathematical expressions.
/// </summary>
public class ProdMathEvaluator
{
    boolean handleException;
    boolean throwOnError;
    str     calculationExpression;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>evaluateExpression</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluates the result of an expression represented as an OML string.
    /// </summary>
    /// <returns>
    /// A real number containing the equation result.
    /// </returns>
    public real evaluateExpression()
    {
        real result;

        try
        {
            result = Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.MathEvaluator::Evaluate(calculationExpression);
        }
        catch (Exception::CLRError)
        {
            if (handleException)
            {
                ProdMathEvaluator::handleCLRException(calculationExpression, throwOnError);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        handleException = true;
        throwOnError    = true;
        calculationExpression = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalculationExpression</Name>
				<Source><![CDATA[
    public str parmCalculationExpression(str _calculationExpression = calculationExpression)
    {
        calculationExpression = _calculationExpression;
        return calculationExpression;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHandleException</Name>
				<Source><![CDATA[
    public boolean parmHandleException(boolean _handleException = handleException)
    {
        handleException = _handleException;
        return handleException;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThrowOnError</Name>
				<Source><![CDATA[
    public boolean parmThrowOnError(boolean _throwOnError = throwOnError)
    {
        throwOnError = _throwOnError;
        return throwOnError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs an instance of the <c>ProdMathEvaluator</c> class.
    /// </summary>
    /// <returns>
    ///     An instantiated object of the <c>ProdMathEvaluator</c> class.
    /// </returns>
    public static ProdMathEvaluator construct()
    {
        return new ProdMathEvaluator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluates the result of an expression represented as an OML string.
    /// </summary>
    /// <param name="_expression">
    /// The expression.
    /// </param>
    /// <returns>
    /// A real number containing the equation result.
    /// </returns>
    public static real evaluate(str _expression)
    {
        ProdMathEvaluator mathEvaluator = ProdMathEvaluator::construct();
        mathEvaluator.parmHandleException(true);
        mathEvaluator.parmThrowOnError(true);
        mathEvaluator.parmCalculationExpression(_expression);
        return mathEvaluator.evaluateExpression();
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleCLRException</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles a CLR exception thrown by the evaluation.
    /// </summary>
    /// <param name="_expression">
    /// The expression being evaluated.
    /// </param>
    /// <param name="_throwOnError">
    /// A boolean value indicating whether to throw on error.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Throws an error message representing the CLR exception.
    /// </exception>
    protected static void handleCLRException(str _expression, boolean _throwOnError)
    {
        System.Exception exception = CLRInterop::getLastException();
        System.Exception innerException = exception.get_InnerException();

        System.Type type = innerException.GetType();
        
        str exceptionError;
        str exceptionTypeString = type.get_FullName();

        switch (exceptionTypeString)
        {
            case 'System.DivideByZeroException':
                exceptionError = strFmt("@PSC162", _expression);
                break;
            case 'Microsoft.SolverFoundation.Common.OmlParseException',
                'System.InvalidOperationException':
                exceptionError = strFmt("@PSC159", _expression);
                break;
            default:
                exceptionError = innerException.get_Message();
                ApplicationUnhandledExceptionLogger::LogCLRException(exception);
                break;
        }

        if (_throwOnError)
        {
            throw error(exceptionError);
        }
        else
        {
            error(exceptionError);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>