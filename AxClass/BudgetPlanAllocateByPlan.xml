<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanAllocateByPlan</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanAllocateByPlan</c> class manages the budget allocation
/// to and from budget plan to its associated budget plan.
/// </summary>
abstract public class BudgetPlanAllocateByPlan extends BudgetPlanAllocate
{
    BudgetPlanHeader        parentBudgetPlanHeader;
    BudgetPlanScenarioRecId sourceBudgetPlanScenarioRecId;
    BudgetPlanHeaderRecId   targetBudgetPlanHeaderRecId;
    BudgetPlanningProcess   budgetPlanningProcess;
    BudgetPlanLine          targetBudgetPlanLine;
    CurrencyExchangeHelper  currencyExchange;
    UnitOfMeasureRecId      unitOfMeasureRecId;
    CurrencyCode            parentAccountingCurrencyCode;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateNewLineNumFactor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the new line number factor to one.
    /// </summary>
    /// <param name="_budgetPlanLine">
    /// The source <c>BudgetPlanLine</c> record to allocate.
    /// </param>
    /// <remarks>
    /// The new line will be the last budget plan line in the budget plan header
    /// and no lines comes after it.
    /// </remarks>
    protected void calculateNewLineNumFactor(BudgetPlanLine _budgetPlanLine)
    {
        // No budget plan line after the source budget plan line.
        newLineNumFactor = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePlanCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the budget plan currency amount for the given budget plan line.
    /// </summary>
    /// <param name="_sourceBudgetPlanLine">
    /// The source <c>BudgetPlanLine</c> record to be used.
    /// </param>
    /// <returns>
    /// The budget plan currency amount for the given budget plan line.
    /// </returns>
    protected AmountCur calculatePlanCurrencyAmount(BudgetPlanLine _sourceBudgetPlanLine)
    {
        Currency currency = Currency::find(_sourceBudgetPlanLine.TransactionCurrencyCode);

        return currency.amount_Instance(_sourceBudgetPlanLine.TransactionCurrencyAmount * factor);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateReportingCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the budget plan reporting currency amount for the given budget plan line.
    /// </summary>
    /// <param name="_sourceBudgetPlanLine">
    /// The source <c>BudgetPlanLine</c> record to be used.
    /// </param>
    /// <returns>
    /// The budget plan currency amount for the given budget plan line.
    /// </returns>
    protected AmountCur calculateReportingCurrencyAmount(BudgetPlanLine _sourceBudgetPlanLine)
    {
        Currency currency = Currency::find(_sourceBudgetPlanLine.TransactionCurrencyCode);

        return currency.amount_Instance(_sourceBudgetPlanLine.ReportingCurrencyAmount * factor);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAccountingCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the budget plan accounting currency amount for the given budget plan line.
    /// </summary>
    /// <param name="_sourceBudgetPlanLine">
    /// The source <c>BudgetPlanLine</c> record to be used.
    /// </param>
    /// <returns>
    /// The budget plan currency amount for the given budget plan line.
    /// </returns>
    protected AmountCur calculateAccountingCurrencyAmount(BudgetPlanLine _sourceBudgetPlanLine)
    {
        Currency currency = Currency::find(_sourceBudgetPlanLine.TransactionCurrencyCode);

        return currency.amount_Instance(_sourceBudgetPlanLine.AccountingCurrencyAmount * factor);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetPlanLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new budget plan lines in the budget plan.
    /// </summary>
    /// <param name="_sourceBudgetPlanLine">
    /// The <c>BudgetPlanLine</c> record ID to allocate.
    /// </param>
    /// <exception cref="Exception::Error">
    /// An error exception is thrown when the required parameters are null.
    /// </exception>
    protected void createBudgetPlanLines(BudgetPlanLine _sourceBudgetPlanLine)
    {
        BudgetPlanLine         budgetPlanLineNew;
        UnitOfMeasureConverter unitOfMeasureConverter;

        this.validateSourceBudgetPlanLinePostDelete(_sourceBudgetPlanLine);

        if (!targetBudgetPlanHeaderRecId)
        {
            throw error(Error::missingParameter(null));
        }

        budgetPlanLineNew.BudgetPlanHeader = targetBudgetPlanHeaderRecId;

        // initialize the target budget plan line table buffer with the source budget plan line table buffer.
        this.initTargetBudgetPlanLine(_sourceBudgetPlanLine, budgetPlanLineNew);

        if (targetBudgetPlanScenario.UnitOfMeasureClass == UnitOfMeasureClass::Monetary)
        {
            budgetPlanLineNew.TransactionCurrencyAmount = this.calculatePlanCurrencyAmount(budgetPlanLineNew);
            budgetPlanLineNew.ReportingCurrencyAmount   = this.calculateReportingCurrencyAmount(budgetPlanLineNew);
            budgetPlanLineNew.AccountingCurrencyAmount  = this.calculateAccountingCurrencyAmount(budgetPlanLineNew);
        }

        if (_sourceBudgetPlanLine.UnitOfMeasure == unitOfMeasureRecId
            || !unitOfMeasureRecId)
        {
            budgetPlanLineNew.Quantity = decround((_sourceBudgetPlanLine.Quantity * factor), 2);
        }
        else
        {
            if (unitOfMeasureRecId && _sourceBudgetPlanLine.EstimateType == BudgetPlanEstimateType::Quantity)
            {
                unitOfMeasureConverter = UnitOfMeasureConverter::newFromConversionParameters(
                    _sourceBudgetPlanLine.UnitOfMeasure,
                    unitOfMeasureRecId,
                    NoYes::No);

                budgetPlanLineNew.Quantity = unitOfMeasureConverter.convertValue(_sourceBudgetPlanLine.Quantity * factor);
            }
            else
            {
                budgetPlanLineNew.Quantity += decround((_sourceBudgetPlanLine.Quantity * factor), 2);
            }
        }

        if (budgetPlanLineNew.validateWrite())
        {
            budgetPlanLineNew.insert();
        }
        else
        {
            // Abort the allocation process when one budget
            // plan line fails to allocate.
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doSetSourceBudgetPlanLine</Name>
				<Source><![CDATA[
    protected boolean doSetSourceBudgetPlanLine(BudgetPlanLineRecId _sourceBudgetPlanLineRecId, BudgetPlanLineRecId _newBudgetPlanLineRecId)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewLineCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the number of target budget plan lines for source budget plan line.
    /// </summary>
    /// <returns>
    /// The number of budget plan line is one for the target budget plan header.
    /// </returns>
    protected LineNum getNewLineCount()
    {
        // For each source budget plan line add one target budget plan line.
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize(BudgetPlanAllocateRequest _budgetPlanAllocateRequest)
    {
        BudgetPlanAllocateRequestByPlan allocateRequestByPlan;

        super(_budgetPlanAllocateRequest);

        allocateRequestByPlan = _budgetPlanAllocateRequest as BudgetPlanAllocateRequestByPlan;

        sourceBudgetPlanScenarioRecId = allocateRequestByPlan.parmSourceBudgetPlanScenarioRecId();
        parentBudgetPlanHeader = BudgetPlanHeader::find(allocateRequestByPlan.parmParentBudgetPlanHeaderRecId());

        budgetPlanningProcess = BudgetPlanningProcess::find(parentBudgetPlanHeader.BudgetPlanningProcess);
        unitOfMeasureRecId = BudgetPlanScenario::find(targetBudgetPlanScenarioRecId).UnitOfMeasure;

        parentAccountingCurrencyCode = Ledger::accountingCurrencyByLedger(budgetPlanningProcess.Ledger);

        currencyExchange = CurrencyExchangeHelper::newLedger(budgetPlanningProcess.Ledger);
        currencyExchange.parmExchangeRateTypeRecId(Ledger::budgetExchangeRateTypeByLedger(budgetPlanningProcess.Ledger));
        currencyExchange.parmErrorType(AifErrorType::Fault);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSourceBudgetPlanLinePostDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the source <c>BudgetPlanLine</c> record.
    /// </summary>
    /// <param name="_sourceBudgetPlanLine">
    /// The budget plan line to be validated.
    /// </param>
    /// <exception cref="Exception::Error">
    /// The source <c>BudgetPlanLine</c> record does not exist.
    /// </exception>
    protected void validateSourceBudgetPlanLinePostDelete(BudgetPlanLine _sourceBudgetPlanLine)
    {
        //
        // It is possible for the source BudgetPlanLine to be deleted after it was determined to be in the set of lines to allocate.
        // One way this can occur is the circular reference between lines and scenarios in the BudgetPlanLineSource hierarchy determined by the SourceBudgetPlanLine references.
        // When the circular reference is the cause then the pre-deletion of the target lines triggers a cascade delete of the BudgetPlanLineSource hierarchy which removes the source line.
        // This is caught at the time of processing to avoid the expense of determining the error prior to processing and due to the fact it is an unlikely scenario to encounter.
        //
        if (!BudgetPlanLine::exist(_sourceBudgetPlanLine.RecId))
        {
            throw error("@SYS4000299");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>