<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferJournalLineTransactionValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventTransferJournalLineTransactionValidator extends InventJournalLineTransactionValidator
{
    private Map issueFinancialDimsToQtys = new Map(Types::String, Types::Real); // InventDimId -> InventQty
    private Map issueOwnersToQtys = new Map(Types::String, Types::Real); // InventOwnerId -> InventQty
    private Map receiptOwnersToQtys = new Map(Types::String, Types::Real); // InventOwnerId -> InventQty
   
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromInventJournalTrans</Name>
				<Source><![CDATA[
    public static InventTransferJournalLineTransactionValidator newFromInventJournalTrans(InventJournalTrans _inventJournalTrans)
    {
        var validator = new InventTransferJournalLineTransactionValidator();
        validator.journalLine = _inventJournalTrans;

        return validator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateIssueDimQtyMaps</Name>
				<Source><![CDATA[
    private void populateIssueDimQtyMaps(boolean _needToCheckInventoryOwners)
    {
        InventDimParm inventDimParmFinancial;
        InventDimGroupSetup::newItemId(journalLine.ItemId).inventDimParmActiveFinancialInventory(inventDimParmFinancial);
        // Inventory owner is not an actual financial dimension, unless it changes from a legal entity owner to a vendor owner or vice versa.
        // We exclude the owner here and validate it separately.
        inventDimParmFinancial.InventOwnerIdFlag_RU = false;

        InventTransOriginJournalTrans   inventTransOriginJournalTrans;
        InventTrans                     inventTrans;
        InventDim                       inventDim;

        while select TableId from inventTransOriginJournalTrans
            where inventTransOriginJournalTrans.InventJournalDataAreaId == journalLine.DataAreaId
                && inventTransOriginJournalTrans.InventJournalId        == journalLine.JournalId
                && inventTransOriginJournalTrans.InventJournalLineNum   == journalLine.LineNum
            join Qty from inventTrans
                where inventTrans.InventTransOrigin == inventTransOriginJournalTrans.InventTransOrigin
                    && inventTrans.StatusIssue      != StatusIssue::None
                join inventDim
                    where inventDim.InventDimId == inventTrans.InventDimId
        {
            InventDim inventDimFinancial;
            inventDimFinancial.data(inventDim.data());
            inventDimFinancial.clearNotSelectedDim(inventDimParmFinancial);
            inventDimFinancial = InventDim::findOrCreate(inventDimFinancial);

            this.addQtyToMap(issueFinancialDimsToQtys, inventDimFinancial.inventDimId, inventTrans.Qty);

            if (_needToCheckInventoryOwners && inventDim.InventOwnerId_RU)
            {
                this.addQtyToMap(issueOwnersToQtys, inventDim.InventOwnerId_RU, inventTrans.Qty);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateReceiptOwnerQtyMap</Name>
				<Source><![CDATA[
    private void populateReceiptOwnerQtyMap()
    {
        InventTransOriginJournalTransReceipt    inventTransOriginJournalTransReceipt;
        InventTrans                             inventTrans;
        InventDim                               inventDim;

        while select TableId from inventTransOriginJournalTransReceipt
            where inventTransOriginJournalTransReceipt.JournalTransferReceiptDataAreaId == journalLine.DataAreaId
                && inventTransOriginJournalTransReceipt.JournalTransferReceiptId        == journalLine.JournalId
                && inventTransOriginJournalTransReceipt.JournalTransferReceiptLineNum   == journalLine.LineNum
            join Qty from inventTrans
                where inventTrans.InventTransOrigin == inventTransOriginJournalTransReceipt.InventTransOrigin
                    && inventTrans.StatusReceipt    != StatusReceipt::None
                join InventOwnerId_RU from inventDim
                    where inventDim.InventDimId         == inventTrans.InventDimId
                        && inventDim.InventOwnerId_RU   != ''
        {
            this.addQtyToMap(receiptOwnersToQtys, inventDim.InventOwnerId_RU, inventTrans.Qty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDimensionQuantityMaps</Name>
				<Source><![CDATA[
    protected void populateDimensionQuantityMaps(boolean _needToCheckInventoryOwners)
    {
        this.populateIssueDimQtyMaps(_needToCheckInventoryOwners);
        this.populateReceiptOwnerQtyMap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNoMixedCostingImpactQuantityMap</Name>
				<Source><![CDATA[
    protected Map getNoMixedCostingImpactQuantityMap()
    {
        return issueOwnersToQtys;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNoMultipleFinancialDimensions</Name>
				<Source><![CDATA[
    protected boolean checkNoMultipleFinancialDimensions()
    {
        boolean ok = true;

        // If the item is standard cost, we can skip this validation
        // because those dimensions are on same journal line and
        // always have same standard cost price.
        if (journalLine.inventTable().modelGroup().InventModel == InventModel::StdCost)
        {
            return true;
        }

        if (issueFinancialDimsToQtys.elements() > 1)
        {
            MapEnumerator mapEnumerator = issueFinancialDimsToQtys.getEnumerator();
            while (mapEnumerator.moveNext())
            {
                InventDim inventDimFinancial = InventDim::find(mapEnumerator.currentKey());

                info(strFmt("@SYS112204", inventDimFinancial.preFix(), mapEnumerator.currentValue()));
            }

            ok = checkFailed("@SYS112205");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOwnerQuantitiesMatch</Name>
				<Source><![CDATA[
    protected boolean checkOwnerQuantitiesMatch()
    {
        boolean ok = issueOwnersToQtys.elements() == receiptOwnersToQtys.elements();

        if (ok)
        {
            if (this.canHaveDifferentInventoryOwnership())
            {
                ok = this.validateQtysWithMappedInventOwnership();
            }
            else
            {
                MapEnumerator issueMapEnumerator = issueOwnersToQtys.getEnumerator();
                while (ok && issueMapEnumerator.moveNext())
                {
                    InventOwnerId_RU issueOwnerId = issueMapEnumerator.currentKey();

                    ok = receiptOwnersToQtys.exists(issueOwnerId)
                        && receiptOwnersToQtys.lookup(issueOwnerId) == abs(issueMapEnumerator.currentValue());
                }
             }
        }

        return ok || checkFailed("@Consignment:Message_TransferJournalOwnerQuantityMismatch");
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalLine</Name>
				<Source><![CDATA[
    protected boolean checkJournalLine(boolean _needToCheckInventoryOwners)
    {
        boolean ret = this.checkNoMultipleFinancialDimensions();

        if (ret && _needToCheckInventoryOwners)
        {
            ret = ret && this.checkNoMixedCostingImpactOwners();
            ret = ret && this.checkOwnerQuantitiesMatch();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQtysWithMappedInventOwnership</Name>
				<Source><![CDATA[
    private boolean validateQtysWithMappedInventOwnership()
    {
        InventOwnerId fromInventOwnerId = journalLine.inventDim().InventOwnerId_RU;

        if (!issueOwnersToQtys.exists(fromInventOwnerId))
        {
            return false;
        }

        InventOwnerId toInventOwnerId = journalLine.toInventDim().InventOwnerId_RU;

        return receiptOwnersToQtys.exists(toInventOwnerId)
            && receiptOwnersToQtys.lookup(toInventOwnerId) == abs(issueOwnersToQtys.lookup(fromInventOwnerId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveDifferentInventoryOwnership</Name>
				<Source><![CDATA[
    private boolean canHaveDifferentInventoryOwnership()
    {
        boolean ret;

        if (WHSWarehouseInventoryOwnerFlight::instance().isEnabled()
            && InventTable::find(journalLine.ItemId).whsItemInventoryOwnershipEnabled())
        {
            InventLocation fromWarehouse = journalLine.inventDim().inventLocation();

            if (!fromWarehouse.WHSEnabled)
            {
                return false;
            }

            InventLocation toWarehouse = journalLine.toInventDim().inventLocation();

            if (toWarehouse.WHSEnabled)
            {
                ret = true;
            }
        }
        
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>