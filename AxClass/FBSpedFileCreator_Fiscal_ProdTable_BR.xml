<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBSpedFileCreator_Fiscal_ProdTable_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is responsible for generating the Sped Fiscal Block K.
/// </summary>
public class FBSpedFileCreator_Fiscal_ProdTable_BR
{
    FBSpedFileItemTmp_BR spedFileItem;
    FBBookingPeriod_BR fbBookingPeriod;

    FiscalEstablishment_BR fiscalEstablishment;

    FBSpedFileItemManufacturedTmp_BR spedFileManufacturedProduct;
    FBSpedFileItemManufacturedInPeriodTmp_BR spedFileManufacturedProductInPeriod;
    FBSpedItemIdGenerator_BR spedItemIdGenerator;
    FBSpedFiscalBlockKWriter_BR spedFileBlockKWriter;

    private FBSPEDFiscalBlockK_BR blockK;
    private FBSPEDFiscalVersion_BR spedFiscalVersion;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculatedScrapVarTotal</Name>
				<Source><![CDATA[
    private Qty calculatedScrapVarTotal(Qty _totalScrapVarWeighted, Qty _totalScheduledQty)
    {
        Qty calculatedVariableScrap = 0.0;

        if(_totalScheduledQty > 0)
        {
            calculatedVariableScrap = (_totalScrapVarWeighted / _totalScheduledQty) * 100;
        }

        return calculatedVariableScrap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBomLinesEqualProdBomLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether any of the lines from ProdBOM have been changed.
    /// </summary>
    /// <param name="_fbProdTableView">
    ///     The record <c>FBProdTableView</c> that contains a booked production order.
    /// </param>
    /// <param name="_bomId">
    ///     The bom identification.
    /// </param>
    /// <returns>
    ///     Returns true if any of the lines from ProdBOM have been changed; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     To checks if any of the lines from ProdBOM have been changed. We will need to three information:
    ///         - The total lines from the BOM table;
    ///         - The total lines from the ProdBom table;
    ///         - The total lines from ProdBOM table that have the same basic setup to BOM;
    ///
    ///     If all three values are equal, the lines from prodBOM are equal to BOM lines.
    /// </remarks>
    private boolean checkBomLinesEqualProdBomLines(FBProdTableMinStartDateView_BR _fbProdTableView, BOMId _bomId)
    {
        boolean ret;
        Bom bomLines;
        ProdBom prodBomLines;

        select count(RecId) from bomLines
            where bomLines.BomId == _bomId;

        select count(RecId) from prodBomLines
            where prodBomLines.ProdId == _fbProdTableView.ProdId;

        if (prodBomLines.RecId == bomLines.RecId)
        {
            Bom bom;
            ProdBom prodBom;

            select count(RecId) from prodBom
                where prodBom.BomId == _fbProdTableView.BomId
                   && prodBom.ProdId == _fbProdTableView.ProdId
            exists join bom
                where bom.BomId == _bomId 
                    && bom.ItemId == prodBom.ItemId
                    && bom.LineNum == prodBom.LineNum
                    && bom.Formula == prodBom.Formula
                    && bom.bomQty == prodBom.bomQty
                    && bom.bomQtySerie == prodBom.bomQtySerie
                    && bom.UnitId == prodBom.UnitId
                    && bom.BomConsump == prodBom.BomConsump
                    && bom.ScrapConst == prodBom.ScrapConst
                    && bom.ScrapVar == prodBom.ScrapVar
                    && bom.RoundUp == prodBom.RoundUp
                    && bom.RoundUpQty == prodBom.RoundUpQty
                    && bom.Height == prodBom.Height
                    && bom.Width == prodBom.Width
                    && bom.Depth == prodBom.Depth
                    && bom.Density == prodBom.Density
                    && bom.Constant == prodBom.Constant
                    && bom.PdsCWQty == prodBom.PdsCWQty;

            ret = prodBom.RecId == bomLines.RecId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordK230</Name>
				<Source><![CDATA[
    private void createRecordK230(date _toDate,
        FBProdTableMinStartDateView_BR _fbProdTableView,
        Qty _qtyGood)
    {
        SpedItemId spedItemId;

        if (InventTable::find(_fbProdTableView.ItemId).PmfProductType == PmfProductType::BOM)
        {
            BOMId masterBOMId = this.getMasterBOMIdFromFinishedGood(_fbProdTableView.ItemId, _fbProdTableView.BOMId);

            spedItemId = this.generateSpedItemId(_fbProdTableView, masterBOMId);
            spedFileItem.insertUniqueFromSpedFiscalBlockK(
            fiscalEstablishment.RecId,
            _fbProdTableView.ItemId,
            spedItemId,
            masterBOMId);

            spedFileManufacturedProduct.insertUnique(fiscalEstablishment.RecId, _fbProdTableView, spedItemId);

            if (_fbProdTableView.ItemId != spedItemId)
            {
                spedFileManufacturedProductInPeriod.insertUnique(fiscalEstablishment.RecId, spedItemId, _toDate, _qtyGood);
            }
        }
        else
        {
            spedItemId = _fbProdTableView.ItemId;
        }

        spedFileBlockKWriter.writeRecordK230(
            _fbProdTableView.MinStartDate,
            _fbProdTableView.RealDate,
            _fbProdTableView.ProdId,
            spedItemId,
            _qtyGood);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordK230ForAllProductionOrders</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Reports records K230 (production) and K235 (material consumption) for a given period.
    /// </summary>
    /// <param name="_fromDate">
    ///     The starting date of the period.
    /// </param>
    ///     <param name="_toDate">
    /// The end date of the period.
    /// </param>
    ///
    /// <remarks>
    ///     The report of all K230 and K235 must consider that we might have the following situations in a period:
    ///         - Production with consumption (K230 and K235 must be reported)
    ///         - Production without consumption (only K230 is reported)
    ///         - No production, but with consumption (K230 must be reported with Qty=0, and K235 reported normally)
    ///         - No production and no consumption (Nothing to report)
    ///     The algorythm to handle these scenarios is a "merge of sorted vectors" where we have 2 vectors: the production and the consumption
    ///     Both are sorted by ProdId and the material consumption is a left join of the production orders with the material consumption.
    ///     Thus we can use it as the outer while of the algorithm.
    /// </remarks>
    public void createRecordK230ForAllProductionOrders(date _fromDate, date _toDate)
    {
        boolean headerPrinted;
        ProdId currentProdId;
        boolean skipCurrentProdId;

        PmfProdCoBy pmfProdCoBy;

        // The "vector" of total production sorted by ProdId
        ProdTableJour journalTotalProduction = this.getTotalProduction();
        // The "vector" of production sorted by ProdId
        FBProdTableReportAsFinishedView_BR reportAsFinishedView = this.getProductionForAssessmentPeriod(_fromDate, _toDate);

        FBBookingPeriodProdTable_BR fbBookingPeriodProdTable;
        FBProdTableMinStartDateView_BR fbProdTableView;
        FBProdTableMaterialConsumptionView_BR materialConsumptionView;
        InventTable inventTable;

        // The "vector" of material consumption sorted by ProdId
        while select ProdId, MinStartDate, RealDate, ItemId, ProdStatus, QtyStUp, BomId from fbProdTableView
            group by ProdId, MinStartDate, RealDate, ItemId, ProdStatus, QtyStUp, BomId
            order by ProdId
                join InventProductType_BR from inventTable
                    group by InventProductType_BR
                where inventTable.ItemId == fbProdTableView.ItemId
                    && inventTable.ItemType == ItemType::Item
                outer join sum(Qty) from materialConsumptionView
                    group by TransDate, ItemId, SPEDProductType
                    where materialConsumptionView.ProdId == fbProdTableView.ProdId
                        && materialConsumptionView.TransDate >= _fromDate
                        && materialConsumptionView.TransDate <= _toDate
                        // Exclude all the consumption that was reverted (Both the original consumption and the negative consumption will have PackingSlipReturned == Yes)
                        && materialConsumptionView.PackingSlipReturned == NoYes::No
                // Only production orders booked to Fiscal Books
                exists join fbBookingPeriodProdTable
                    where fbBookingPeriodProdTable.ProdTable == fbProdTableView.ProdTableRecId
                        && fbBookingPeriodProdTable.FBBookingPeriod_BR == fbBookingPeriod.RecId
                        && fbBookingPeriodProdTable.FBInventoryAdjustmentSource_BR == FBInventoryAdjustmentSource_BR::K230K235
                notExists join pmfProdCoBy
                    where pmfProdCoBy.ProdId == fbProdTableView.ProdId
        {
            if (currentProdId != fbProdTableView.ProdId)
            {
                currentProdId = fbProdTableView.ProdId;
                headerPrinted = false;
                skipCurrentProdId = false;

                // Iterate reportAsFinished "vector" ultil it reaches fbProdTableView.ProdId (or the first line after it)
                while (reportAsFinishedView && reportAsFinishedView.ProdId < fbProdTableView.ProdId)
                {
                    next reportAsFinishedView;
                }

                // Iterate on journalTotalProduction "vector" until it reaches fbProdTableView.ProdId (or the first line after it)
                while (journalTotalProduction && journalTotalProduction.ProdId < fbProdTableView.ProdId)
                {
                    next journalTotalProduction;
                }

                // If the total production is 0, the production order is not reported (The production order was probably cancelled)
                if (fbProdTableView.ProdId == journalTotalProduction.ProdId
                    && fbProdTableView.ProdStatus == ProdStatus::Completed
                    && journalTotalProduction.QtyGood == 0)
                {
                    skipCurrentProdId = true;
                }

                // The list of product types that must be reported is in SPED Fiscal manual. Show a warning if another type of item is found.
                if (!FBSpedFileCreator_Fiscal_ProdTable_BR::shouldReportProductionOfProductType(inventTable.InventProductType_BR))
                {
                    warning(strFmt("@FiscalBooks_SpedFiscal:FBSpedFileCtreator_OrderValidation", fbProdTableView.ProdId, fbProdTableView.ItemId, inventTable.InventProductType_BR));
                    skipCurrentProdId = true;
                }
            }

            if (skipCurrentProdId)
            {
                continue;
            }

            // If K230 was not reported yet, report it.
            if (!headerPrinted)
            {
                if ((materialConsumptionView.Qty != 0)
                    && (!reportAsFinishedView
                    || (reportAsFinishedView.ProdId > fbProdTableView.ProdId)
                    || ((reportAsFinishedView.ProdId == fbProdTableView.ProdId) && (reportAsFinishedView.Qty == 0))))
                {
                    // Material consumption without production (reportAsFinished is not valid, is not the same ProdId, or Qty is 0)
                    this.createRecordK230(_toDate, fbProdTableView, 0);
                    headerPrinted = true;
                }
                else if (reportAsFinishedView
                        && (reportAsFinishedView.ProdId == fbProdTableView.ProdId)
                        && (reportAsFinishedView.Qty != 0))
                {
                    // Production with or without consumption (reportAsFinished is valid and has value different than 0)
                    this.createRecordK230(_toDate, fbProdTableView, reportAsFinishedView.Qty);
                    headerPrinted = true;
                }
            }

            // If there was consumption, report it.
            if ((spedFiscalVersion < FBSPEDFiscalVersion_BR::v116 || blockK == FBSPEDFiscalBlockK_BR::Full) && materialConsumptionView.Qty != 0)
            {
                // The list of product types that must be reported is in SPED Fiscal manual. Show a warning if another type of item is found.
                if (FBSpedFileCreator_Fiscal_ProdTable_BR::shouldReportConsumptionOfProductType(materialConsumptionView.SPEDProductType))
                {
                    this.createRecordK235(materialConsumptionView);
                }
                else
                {
                    warning(strFmt("@FiscalBooks_SpedFiscal:FBSpedFileCtreator_ItemValidation", materialConsumptionView.ItemId, fbProdTableView.ProdId, materialConsumptionView.SPEDProductType));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordK235</Name>
				<Source><![CDATA[
    private void createRecordK235(FBProdTableMaterialConsumptionView_BR _materialConsumption)
    {
        if (!FBSpedFileItemTmp_BR::existsForItemId(spedFileItem, fiscalEstablishment.RecId, _materialConsumption.ItemId))
        {
            spedFileItem.insertFromFiscalDocumentLine(fiscalEstablishment.RecId, _materialConsumption.ItemId);
        }

        spedFileBlockKWriter.writeRecordK235(
            _materialConsumption.TransDate,
            _materialConsumption.ItemId,
            -1 * _materialConsumption.Qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordK260</Name>
				<Source><![CDATA[
    private void createRecordK260(date _toDate,
        FBProdTableMinStartDateView_BR _fbProdTableView,
        Qty _qtyGood)
    
    {
        if (_qtyGood > 0  && !FBSpedFileItemTmp_BR::existsForItemId(spedFileItem, fiscalEstablishment.RecId, _fbProdTableView.ItemId))
        {
            spedFileItem.insertFromFiscalDocumentLine(fiscalEstablishment.RecId, _fbProdTableView.ItemId);
        }
        
        spedFileBlockKWriter.writeRecordK260(
            _fbProdTableView.MinStartDate,
            _fbProdTableView.RealDate,
            _fbProdTableView.ProdId,
            _fbProdTableView.ItemId,
            _qtyGood,
            _qtyGood); 
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordK260ForAllReworkOrders</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Reports records K260 (rework orders) and K265 (material consumption) for a given period
    /// </summary>
    /// <param name="_fromDate">
    ///     The starting date of the period
    /// </param>
    ///     <param name="_toDate">
    /// The end date of the period
    /// </param>
    ///
    /// <remarks>
    ///     The report of all K260 and K265 must consider that we might have the following situations in a period:
    ///         - Rework order with consumption (K260 and K265 must be reported)
    ///         - Rework order without consumption (only K260 is reported)
    ///         - No production, but with consumption (K260 must be reported with Qty=0, and K265 reported normally)
    ///         - No production and no consumption (Nothing to report)
    ///     The algorythm to handle these scenarios is a "merge of sorted vectors" where we have 2 vectors: the production and the consumption
    ///     Both are sorted by ProdId and the material consumption is a left join of the production orders with the material consumption.
    ///     Thus we can use it as the outer while of the algorithm
    /// </remarks>
    public void createRecordK260ForAllReworkOrders(date _fromDate, date _toDate)
    
    {
        if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v116 && blockK != FBSPEDFiscalBlockK_BR::Full)
        {
            return;
        }

        ProdTableJour                           journalTotalProduction;
        
        FBBookingPeriodProdTable_BR             fbBookingPeriodProdTable;
        FBProdTableMinStartDateView_BR          fbProdTableView;
        FBProdTableMaterialConsumptionView_BR   materialConsumptionView;
        FBProdTableReportAsFinishedView_BR      reportAsFinishedView;
        InventTable                             inventTable;
        
        boolean                                 headerPrinted = false;
        ProdId                                  currentProdId = '';
        boolean                                 skipCurrentProdId = false;
        
        // The "vector" of total production sorted by ProdId
        journalTotalProduction = this.getTotalProduction();
        // The "vector" of production sorted by ProdId
        reportAsFinishedView = this.getProductionForAssessmentPeriod(_fromDate, _toDate);

        // The "vector" of material consumption sorted by ProdId
        while select ProdId, MinStartDate, RealDate, ItemId, ProdStatus, QtyStUp, BomId
            from fbProdTableView
            group by ProdId, MinStartDate, RealDate, ItemId, ProdStatus, QtyStUp, BomId
            order by ProdId
                join InventProductType_BR from inventTable
                    group by InventProductType_BR
                where inventTable.ItemId == fbProdTableView.ItemId
                    && inventTable.ItemType == ItemType::Item
                outer join sum(Qty) from materialConsumptionView
                    group by TransDate, ItemId, SPEDProductType
                    where materialConsumptionView.ProdId == fbProdTableView.ProdId
                        && materialConsumptionView.TransDate >= _fromDate
                        && materialConsumptionView.TransDate <= _toDate
                        // Exclude all the consumption that was reverted (Both the original consumption and the negative consumption will have PackingSlipReturned == Yes)
                        && materialConsumptionView.PackingSlipReturned == NoYes::No
                // Only production orders booked to Fiscal Books
                exists join fbBookingPeriodProdTable
                    where fbBookingPeriodProdTable.ProdTable == fbProdTableView.ProdTableRecId
                        && fbBookingPeriodProdTable.FBBookingPeriod_BR == fbBookingPeriod.RecId
                        && fbBookingPeriodProdTable.FBInventoryAdjustmentSource_BR == FBInventoryAdjustmentSource_BR::K260K265
        
        {
            if (currentProdId != fbProdTableView.ProdId)   
            {
                currentProdId = fbProdTableView.ProdId;
                headerPrinted = false;
                skipCurrentProdId = false;
                
                // Iterate reportAsFinished "vector" ultil it reaches fbProdTableView.ProdId (or the first line after it)
                while (reportAsFinishedView && reportAsFinishedView.ProdId < fbProdTableView.ProdId)  
                {
                    next reportAsFinishedView;   
                }
                
                // Iterate on journalTotalProduction "vector" until it reaches fbProdTableView.ProdId (or the first line after it)
                while (journalTotalProduction && journalTotalProduction.ProdId < fbProdTableView.ProdId)
                {
                    next journalTotalProduction;  
                }
                
                // If the total production is 0, the production order is not reported (The production order was probably cancelled)
                if (fbProdTableView.ProdId == journalTotalProduction.ProdId
                    && fbProdTableView.ProdStatus == ProdStatus::Completed
                    && journalTotalProduction.QtyGood == 0)
                {
                    skipCurrentProdId = true;
                }
                
                // The list of product types that must be reported is in SPED Fiscal manual. Show a warning if another type of item is found.
                if (!FBSpedFileCreator_Fiscal_ProdTable_BR::shouldReportProductionOfProductType(inventTable.InventProductType_BR))
                {
                    warning(strFmt("@SPEDFiscalLayout13:FBSpedFileCreator_K260Validation", fbProdTableView.ProdId, fbProdTableView.ItemId, inventTable.InventProductType_BR));
                    skipCurrentProdId = true;  
                } 
            }
            
            if (skipCurrentProdId)
            {
                continue;
            }
            
            // If K260 was not reported yet, report it.
            if (!headerPrinted)
            {
                if ((materialConsumptionView.Qty != 0)
                    && !ProdTable::find(fbProdTableView.ProdId).PmfReworkBatch
                    && (!reportAsFinishedView
                    || (reportAsFinishedView.ProdId > fbProdTableView.ProdId)
                    || ((reportAsFinishedView.ProdId == fbProdTableView.ProdId) && (reportAsFinishedView.Qty == 0))))
                {
                    // Material consumption without production (reportAsFinished is not valid, is not the same ProdId, or Qty is 0)
                    this.createRecordK260(_toDate, fbProdTableView, 0);
                    headerPrinted = true;
                }
                else if ((reportAsFinishedView
                    && (reportAsFinishedView.ProdId == fbProdTableView.ProdId)
                    && (reportAsFinishedView.Qty != 0)) 
                    || ProdTable::find(fbProdTableView.ProdId).PmfReworkBatch)
                {
                    // Production with or without consumption (reportAsFinished is valid and has value different than 0)
                    this.createRecordK260(_toDate, fbProdTableView, reportAsFinishedView.Qty);
                    headerPrinted = true;
                }
            }
            
            // If there was consumption, report it.
            if (materialConsumptionView.Qty != 0)
            {
                // The list of product types that must be reported is in SPED Fiscal manual. Show a warning if another type of item is found.
                if (FBSpedFileCreator_Fiscal_ProdTable_BR::shouldReportConsumptionOfProductType(materialConsumptionView.SPEDProductType)
                    && materialConsumptionView.ItemId != fbProdTableView.ItemId)
                {
                    this.createRecordK265(materialConsumptionView);
                }

                else
                {
                    warning(strFmt("@SPEDFiscalLayout13:FBSpedFileCreator_K265Validation", materialConsumptionView.ItemId, fbProdTableView.ProdId, materialConsumptionView.SPEDProductType));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordK265</Name>
				<Source><![CDATA[
    private void createRecordK265(FBProdTableMaterialConsumptionView_BR _materialConsumption) 
    {
        if (!FBSpedFileItemTmp_BR::existsForItemId(spedFileItem, fiscalEstablishment.RecId, _materialConsumption.ItemId))
        {
            spedFileItem.insertFromFiscalDocumentLine(fiscalEstablishment.RecId, _materialConsumption.ItemId);
        }
        
        spedFileBlockKWriter.writeRecordK265(
            _materialConsumption.ItemId,
            -1 * _materialConsumption.Qty,
            -1 * _materialConsumption.Qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordK270ForAllInventoryAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Reports records K270 (adjustments for goods for production orders) and K275 (adjustments for materials for production orders) for a given period
    /// </summary>
    public void createRecordK270ForAllInventoryAdjustments()
    {
        FBBookingPeriodInventTrans_BR fBBookingPeriodInventTrans_BR;
        InventTransOrigin inventTransOrigin;
        InventTable inventTable;
        InventTrans InventTrans;

        while select fBBookingPeriodInventTrans_BR
            where fBBookingPeriodInventTrans_BR.FBBookingPeriod_BR == fbBookingPeriod.RecId
                && fBBookingPeriodInventTrans_BR.ProdId != ''
            join inventTransOrigin
                where inventTransOrigin.InventtransId == fBBookingPeriodInventTrans_BR.InventTransId
            join inventTable
            order by fBBookingPeriodInventTrans_BR.ProdId asc, inventTable.InventProductType_BR desc
                where inventTable.ItemId == inventTransOrigin.ItemId
        {
            select firstonly DatePhysical, Qty from inventTrans
                where inventTrans.inventTransOrigin == inventTransOrigin.RecId;

            if (inventTrans.DatePhysical < spedFileBlockKWriter.parmTaxAssessmentFromDate() || inventTrans.DatePhysical > spedFileBlockKWriter.parmTaxAssessmentToDate())
            {
                continue;
            }

            if (ProdTable::find(fBBookingPeriodInventTrans_BR.ProdId).ItemId == inventTransOrigin.ItemId
                && FBSpedFileCreator_Fiscal_ProdTable_BR::shouldReportProductionOfProductType(inventTable.InventProductType_BR))
            {
                if (!FBSpedFileItemTmp_BR::existsForItemId(spedFileItem, fiscalEstablishment.RecId, inventTransOrigin.ItemId))
                {
                    spedFileItem.insertFromFiscalDocumentLine(fiscalEstablishment.RecId, inventTransOrigin.ItemId);
                }

                spedFileBlockKWriter.writeRecordK270(
                    spedFileBlockKWriter.parmTaxAssessmentFromDate(),
                    spedFileBlockKWriter.parmTaxAssessmentToDate(),
                    fBBookingPeriodInventTrans_BR.ProdId,
                    inventTransOrigin.ItemId,
                    InventTrans.Qty > 0 ? InventTrans.Qty : 0,
                    InventTrans.Qty < 0 ? abs(InventTrans.Qty) : 0,
                    fBBookingPeriodInventTrans_BR.FBInventoryAdjustmentSource_BR);
            }
            else if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v116 && blockK == FBSPEDFiscalBlockK_BR::Simplified)
            {
                continue;
            }
            else if (FBSpedFileCreator_Fiscal_ProdTable_BR::shouldReportConsumptionOfProductType(inventTable.InventProductType_BR))
            {
                if (!FBSpedFileItemTmp_BR::existsForItemId(spedFileItem, fiscalEstablishment.RecId, inventTransOrigin.ItemId))
                {
                    spedFileItem.insertFromFiscalDocumentLine(fiscalEstablishment.RecId, inventTransOrigin.ItemId);
                }

                spedFileBlockKWriter.writeRecordK275(
                    inventTransOrigin.ItemId,
                    InventTrans.Qty < 0 ? abs(InventTrans.Qty) : 0,
                    InventTrans.Qty > 0 ? InventTrans.Qty : 0,
                    '');
            }
            else
            {
                warning(strFmt("@SPEDFiscalLayout13:FBSpedFileCreator_K270K275Validation", inventTable.ItemId, fBBookingPeriodInventTrans_BR.ProdId, inventTable.InventProductType_BR));
            }
        } 
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordK280ForAllInventoryAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Reports records K280 (all adjustments) for a given period
    /// </summary>
    /// <param name="_fBSpedFilePartyTmp_BR">
    /// The global FBSpedFilePartyTmp_BR table record.
    /// </param>
    public void createRecordK280ForAllInventoryAdjustments(FBSpedFilePartyTmp_BR _fBSpedFilePartyTmp_BR)
    {
        if (spedFileBlockKWriter.parmTaxAssessmentFromDate() != fbBookingPeriod.periodFrom())
        {
            return;
        }

        FBBookingPeriodInventTrans_BR fBBookingPeriodInventTrans_BR;
        InventTransOrigin inventTransOrigin;
        AccountNum custAccount, vendAccount;

        InventTrans InventTrans;

        Map k280Map = new Map(Types::String, Types::Container);

        while select fBBookingPeriodInventTrans_BR
            where fBBookingPeriodInventTrans_BR.FBBookingPeriod_BR == fbBookingPeriod.RecId
            join inventTransOrigin
                where inventTransOrigin.InventtransId == fBBookingPeriodInventTrans_BR.InventTransId
        {
            select firstonly InventTrans
                where InventTrans.inventTransOrigin == inventTransOrigin.RecId;

            if (InventTrans.DatePhysical >= fbBookingPeriod.periodFrom())
            {
                continue;
            }

            custAccount = InventLocation::find(InventTrans.inventLocationId()).CustAccount_BR;
            vendAccount = InventLocation::find(InventTrans.inventLocationId()).VendAccount;

            if (custAccount != '')
            {
                if (!FBSpedFilePartyTmp_BR::existsForAccountTypeAndNum(_fBSpedFilePartyTmp_BR,
                    FiscalEstablishment_BR::findById(fbBookingPeriod.FiscalEstablishmentId).RecId,
                    FBThirdPartyType_BR::Customer, custAccount))
                {
                    _fBSpedFilePartyTmp_BR.insertFromCustVendTable(CustTable::find(custAccount),
                        fbBookingPeriod.FiscalEstablishmentId, FBThirdPartyType_BR::Customer);
                }
                else
                {
                    select firstonly _fBSpedFilePartyTmp_BR
                        where _fBSpedFilePartyTmp_BR.PartyType == FBThirdPartyType_BR::Customer
                            && _fBSpedFilePartyTmp_BR.AccountNum == custAccount;
                }
            }
            else if(vendAccount != '')
            {
                if (!FBSpedFilePartyTmp_BR::existsForAccountTypeAndNum(_fBSpedFilePartyTmp_BR,
                    FiscalEstablishment_BR::findById(fbBookingPeriod.FiscalEstablishmentId).RecId,
                    FBThirdPartyType_BR::Vendor, vendAccount))
                {
                    _fBSpedFilePartyTmp_BR.insertFromCustVendTable(VendTable::find(vendAccount),
                        fbBookingPeriod.FiscalEstablishmentId, FBThirdPartyType_BR::Vendor);
                }
                else
                {
                    select firstonly _fBSpedFilePartyTmp_BR
                        where _fBSpedFilePartyTmp_BR.PartyType == FBThirdPartyType_BR::Vendor
                            && _fBSpedFilePartyTmp_BR.AccountNum == vendAccount;
                }
            }


            ToDate dateToPrevious = fbBookingPeriod.periodFrom() - 1;
            FromDate identificationDate = InventTrans.DatePhysical;

            while (identificationDate <= dateToPrevious)
            {
                identificationDate = Global::dateEndMth(identificationDate);

                str k280Key = date2Str(identificationDate, 1, 1, 1, 1, 1, 2)
                    + inventTransOrigin.ItemId
                    + queryValue(InventLocation::find(InventTrans.inventLocationId()).InventCountingGroup_BR)
                    + (vendAccount != '' || custAccount != '' ? _fBSpedFilePartyTmp_BR.code() : '');

                if (k280Map.exists(k280Key))
                {
                    container k280MapValue = k280Map.lookup(k280Key);

                    k280Map.insert(k280Key, [identificationDate,
                        inventTransOrigin.ItemId,
                        (InventTrans.Qty > 0 ? InventTrans.Qty : 0) + conPeek(k280MapValue, 3),
                        (InventTrans.Qty < 0 ? abs(InventTrans.Qty): 0) + conPeek(k280MapValue, 4),
                        InventLocation::find(InventTrans.inventLocationId()).InventCountingGroup_BR,
                        vendAccount != '' || custAccount != '' ? _fBSpedFilePartyTmp_BR.code() : '']);
                }

                else
                {
                    k280Map.insert(k280Key, [identificationDate,
                        inventTransOrigin.ItemId,
                        InventTrans.Qty > 0 ? InventTrans.Qty : 0,
                        InventTrans.Qty < 0 ? abs(InventTrans.Qty) : 0,
                        InventLocation::find(InventTrans.inventLocationId()).InventCountingGroup_BR,
                        vendAccount != '' || custAccount != '' ? _fBSpedFilePartyTmp_BR.code() : '']);
                }

                identificationDate += 1;
            }
        }

        MapEnumerator k280MapEnum = k280Map.getEnumerator();

       
        while (k280MapEnum.moveNext())
        {
            container enumCont = k280MapEnum.currentValue();

            if (FBSpedFileCreator_Fiscal_ProdTable_BR::shouldReportCorrectionOfProductType(inventTable::find(conPeek(enumCont, 2)).InventProductType_BR))
            {
                real sumQty = conPeek(enumCont, 3) - conPeek(enumCont, 4);

                if (sumQty != 0)
                {
                    if (!FBSpedFileItemTmp_BR::existsForItemId(spedFileItem, fiscalEstablishment.RecId, conPeek(enumCont, 2)))
                    {
                        spedFileItem.insertFromFiscalDocumentLine(fiscalEstablishment.RecId, conPeek(enumCont, 2));
                    }

                    spedFileBlockKWriter.writeRecordK280(
                        conPeek(enumCont, 1),
                        conPeek(enumCont, 2),
                        sumQty > 0 ? sumQty : 0,
                        sumQty < 0 ? abs(sumQty) : 0,
                        conPeek(enumCont, 5),
                        conPeek(enumCont, 6));
                }
            }
            else
            {
                warning(strFmt("@SPEDFiscalLayout13:FBSpedFileCreator_K280Validation", conPeek(enumCont, 2), inventTable::find(conPeek(enumCont, 2)).InventProductType_BR));
            }
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordK290ForAllProductionOrders</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Reports records K290 (production), K291 (items produced) and K292 (material consumption) for a given period
    /// </summary>
    /// <param name="_fromDate">
    ///     The starting date of the period
    /// </param>
    ///     <param name="_toDate">
    /// The end date of the period
    /// </param>
    public void createRecordK290ForAllProductionOrders(date _fromDate, date _toDate)
    {
        PmfProdCoBy                             pmfProdCoBy;
        
        FBBookingPeriodProdTable_BR             fbBookingPeriodProdTable;
        FBProdTableMinStartDateView_BR          fbProdTableView;
        FBProdTableReportAsFinishedView_BR      reportAsFinishedView;
        InventTable                             inventTable;
        
        while select ProdId, MinStartDate, RealDate, ItemId, ProdStatus, QtyStUp, BomId
            from fbProdTableView
            group by ProdId, MinStartDate, RealDate, ItemId, ProdStatus, QtyStUp, BomId
            order by ProdId
                exists join pmfProdCoBy
                    where pmfProdCoBy.ProdId == fbProdTableView.ProdId
                // Only production orders booked to Fiscal Books
                exists join fbBookingPeriodProdTable
                    where fbBookingPeriodProdTable.ProdTable == fbProdTableView.ProdTableRecId
                        && fbBookingPeriodProdTable.FBBookingPeriod_BR == fbBookingPeriod.RecId
            && (fbBookingPeriodProdTable.FBInventoryAdjustmentSource_BR == FBInventoryAdjustmentSource_BR::K291
            || fbBookingPeriodProdTable.FBInventoryAdjustmentSource_BR == FBInventoryAdjustmentSource_BR::K292)
        {
            select sum(Qty)
                from reportAsFinishedView
                group by ProdId
                where reportAsFinishedView.ProdId == fbProdTableView.ProdId
                    && reportAsFinishedView.TransDate >= _fromDate
                    && reportAsFinishedView.TransDate <= _toDate
                    && reportAsFinishedView.PackingSlipReturned == NoYes::No
                exists join inventTable
                    where inventTable.ItemId == reportAsFinishedView.ItemId
                        && (inventTable.InventProductType_BR == '03' || inventTable.InventProductType_BR == '04');
            
            // If the total production is 0, the production order is not reported (The production order was probably cancelled)
            if (fbProdTableView.ProdStatus == ProdStatus::Completed && reportAsFinishedView.Qty == 0)
            {
                continue;
            }
            
            spedFileBlockKWriter.writeRecordK290(fbProdTableView.MinStartDate,
                fbProdTableView.RealDate,
                fbProdTableView.ProdId);
            
            this.createRecordK291(fbProdTableView.ProdId, _fromDate, _toDate);
            if (spedFiscalVersion < FBSPEDFiscalVersion_BR::v116 || blockK == FBSPEDFiscalBlockK_BR::Full)
            {
                this.createRecordK292(fbProdTableView.ProdId, _fromDate, _toDate);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordK291</Name>
				<Source><![CDATA[
    private void createRecordK291(ProdId _prodId, FromDate _fromDate, ToDate _toDate)  
    {
        FBProdTableReportAsFinishedView_BR reportAsFinishedView;
        InventTable inventTable;
        
        while select sum(Qty)
            from reportAsFinishedView
            group by ItemId, inventTable.InventProductType_BR
            where reportAsFinishedView.ProdId == _prodId
                && reportAsFinishedView.TransDate >= _fromDate
                && reportAsFinishedView.TransDate <= _toDate
                // Exclude all the production that was reverted (Both the original production and the negative production will have PackingSlipReturned == Yes)
                && reportAsFinishedView.PackingSlipReturned == NoYes::No
            join InventProductType_BR from inventTable
                where inventTable.ItemId == reportAsFinishedView.ItemId
        {
            // If there was no production, don't report it.
            if (reportAsFinishedView.Qty == 0)
            {
                continue;
            }
            
            // The list of product types that must be reported is in SPED Fiscal manual. Show a warning if another type of item is found.
            if (FBSpedFileCreator_Fiscal_ProdTable_BR::shouldReportProductionOfProductType(inventTable.InventProductType_BR))
            {
                if (!FBSpedFileItemTmp_BR::existsForItemId(spedFileItem, fiscalEstablishment.RecId, reportAsFinishedView.ItemId))
                {
                    spedFileItem.insertFromFiscalDocumentLine(fiscalEstablishment.RecId, reportAsFinishedView.ItemId);
                }
                
                spedFileBlockKWriter.writeRecordK291(reportAsFinishedView.ItemId,
                    reportAsFinishedView.Qty);  
            }
            else
            {
                warning(strFmt("@SPEDFiscalLayout13:SpedFiscalK291Warning", reportAsFinishedView.ItemId, _prodId, inventTable.InventProductType_BR));
            }
            
            
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordK292</Name>
				<Source><![CDATA[
    private void createRecordK292(ProdId _prodId, FromDate _fromDate, ToDate _toDate)    
    {
        FBProdTableMaterialConsumptionView_BR   materialConsumptionView;
        
        while select sum(Qty) from materialConsumptionView
                group by ItemId, SPEDProductType
                where materialConsumptionView.ProdId == _prodId
                    && materialConsumptionView.TransDate >= _fromDate
                    && materialConsumptionView.TransDate <= _toDate
                    // Exclude all the consumption that was reverted (Both the original consumption and the negative consumption will have PackingSlipReturned == Yes)
                    && materialConsumptionView.PackingSlipReturned == NoYes::No
        {
            // If there was no consumption, don't report it.
            if (materialConsumptionView.Qty == 0)
            
            {
                continue; 
            }

            // The list of product types that must be reported is in SPED Fiscal manual. Show a warning if another type of item is found.
            if (FBSpedFileCreator_Fiscal_ProdTable_BR::shouldReportConsumptionOfProductType(materialConsumptionView.SPEDProductType))
            {
                if (!FBSpedFileItemTmp_BR::existsForItemId(spedFileItem, fiscalEstablishment.RecId, materialConsumptionView.ItemId))
                {
                    spedFileItem.insertFromFiscalDocumentLine(fiscalEstablishment.RecId, materialConsumptionView.ItemId);
                    
                }
                
                spedFileBlockKWriter.writeRecordK292(materialConsumptionView.ItemId,
                    -1 * materialConsumptionView.Qty);
            }
            else
            
            {
                warning(strFmt("@SPEDFiscalLayout13:SpedFiscalK292Warning", materialConsumptionView.ItemId, _prodId, materialConsumptionView.SPEDProductType));
            }
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordK990</Name>
				<Source><![CDATA[
    private void createRecordK990()
    {
        spedFileBlockKWriter.writeRecordK990();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateSpedItemId</Name>
				<Source><![CDATA[
    private SpedItemId generateSpedItemId(FBProdTableMinStartDateView_BR _fbProdTableView, BOMId _masterBOMId)
    {
        if (!this.checkBomLinesEqualProdBomLines(_fbProdTableView, _masterBOMId))
        {
            FBSpedFileItemManufacturedTmp_BR manufacturedProduct = FBSpedFileItemManufacturedTmp_BR::findProdId(
                spedFileManufacturedProduct,
                fiscalEstablishment.RecId,
                _fbProdTableView.ProdId);

            if (manufacturedProduct)
            {
                return manufacturedProduct.SpedItemId;
            }
            else
            {
                return spedItemIdGenerator.createSpedItemId(_fbProdTableView.ItemId);
            }
        }

        return _fbProdTableView.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMasterBOMIdFromFinishedGood</Name>
				<Source><![CDATA[
    private BOMId getMasterBOMIdFromFinishedGood(ItemId _fbProdTableViewFinishedGood, BOMId _bomIDRelatedProduction)
    {
        BOMId masterBOMId = FBSpedFileItemTmp_BR::getMasterBOMId(spedFileItem, fiscalEstablishment.RecId, _fbProdTableViewFinishedGood);

        return !masterBOMId ? _bomIDRelatedProduction : masterBOMId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductionForAssessmentPeriod</Name>
				<Source><![CDATA[
    private FBProdTableReportAsFinishedView_BR getProductionForAssessmentPeriod(date _fromDate, date _toDate)
    {
        FBProdTableReportAsFinishedView_BR reportAsFinishedView;
        ProdTable prodTable;
        FBBookingPeriodProdTable_BR fbBookingPeriodProdTable;
        InventTable inventTable;

        select sum(Qty) from reportAsFinishedView
            group by ProdId, ItemId
            order by ProdId
            where reportAsFinishedView.TransDate >= _fromDate
                && reportAsFinishedView.TransDate <= _toDate
                && reportAsFinishedView.PackingSlipReturned == NoYes::No
                exists join prodTable
                    where prodTable.ProdId == reportAsFinishedView.ProdId
                        && prodTable.ItemId == reportAsFinishedView.ItemId
                exists join inventTable
                    where inventTable.ItemId == prodTable.ItemId
                        && (inventTable.InventProductType_BR == '03' || inventTable.InventProductType_BR == '04')
                exists join fbBookingPeriodProdTable
                    where fbBookingPeriodProdTable.ProdTable == prodTable.RecId
                        && fbBookingPeriodProdTable.FBBookingPeriod_BR == fbBookingPeriod.RecId;

        return reportAsFinishedView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalProduction</Name>
				<Source><![CDATA[
    private ProdTableJour getTotalProduction()
    {
        ProdTableJour journalTotalProduction;
        ProdTable prodTable;
        FBBookingPeriodProdTable_BR fbBookingPeriodProdTable;
        InventTable inventTable;

        select sum(QtyGood) from journalTotalProduction
            group by ProdId, ItemId
            order by ProdId
            where journalTotalProduction.JournalType == ProdJourType::Receipt
                exists join prodTable
                    where prodTable.ProdId == journalTotalProduction.ProdId
                        && prodTable.ItemId == journalTotalProduction.ItemId
                exists join inventTable
                    where inventTable.ItemId == prodTable.ItemId
                        && (inventTable.InventProductType_BR == '03' || inventTable.InventProductType_BR == '04')
                exists join fbBookingPeriodProdTable
                    where fbBookingPeriodProdTable.ProdTable == prodTable.RecId
                        && fbBookingPeriodProdTable.FBBookingPeriod_BR == fbBookingPeriod.RecId;

        return journalTotalProduction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFBBookingPeriod</Name>
				<Source><![CDATA[
    public FBBookingPeriod_BR parmFBBookingPeriod(FBBookingPeriod_BR _fbBookingPeriod = fbBookingPeriod)
    {
        fbBookingPeriod =_fbBookingPeriod;

        return _fbBookingPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalEstablishment</Name>
				<Source><![CDATA[
    private FiscalEstablishment_BR parmFiscalEstablishment(FiscalEstablishment_BR _fiscalEstablishment = fiscalEstablishment)
    {
        fiscalEstablishment = _fiscalEstablishment;

        return fiscalEstablishment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpedFileBlockKWriter</Name>
				<Source><![CDATA[
    public FBSpedFiscalBlockKWriter_BR parmSpedFileBlockKWriter(FBSpedFiscalBlockKWriter_BR _spedFileBlockKWriter = spedFileBlockKWriter)
    {
        spedFileBlockKWriter = _spedFileBlockKWriter;

        return spedFileBlockKWriter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpedFileItem</Name>
				<Source><![CDATA[
    public FBSpedFileItemTmp_BR parmSpedFileItem(FBSpedFileItemTmp_BR _spedFileItem = spedFileItem)
    {
        spedFileItem =_spedFileItem;

        return spedFileItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpedFileManufacturedProduct</Name>
				<Source><![CDATA[
    public FBSpedFileItemManufacturedTmp_BR parmSpedFileManufacturedProduct(FBSpedFileItemManufacturedTmp_BR _spedFileManufacturedProduct = spedFileManufacturedProduct)
    {
        spedFileManufacturedProduct = _spedFileManufacturedProduct;

        return spedFileManufacturedProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpedFileManufacturedProductInPeriod</Name>
				<Source><![CDATA[
    public FBSpedFileItemManufacturedInPeriodTmp_BR parmSpedFileManufacturedProductInPeriod(FBSpedFileItemManufacturedInPeriodTmp_BR _spedFileManufacturedProductInPeriod = spedFileManufacturedProductInPeriod)
    {
        spedFileManufacturedProductInPeriod = _spedFileManufacturedProductInPeriod;

        return spedFileManufacturedProductInPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpedItemIdGenerator</Name>
				<Source><![CDATA[
    public FBSpedItemIdGenerator_BR parmSpedItemIdGenerator(FBSpedItemIdGenerator_BR _spedItemIdGenerator = spedItemIdGenerator)
    {
        spedItemIdGenerator = _spedItemIdGenerator;

        return spedItemIdGenerator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populate0200RecordsWithMissingItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the 0200 record backing table with items that must exist in record 0200 so that the generated file is valid.
    /// </summary>
    /// <remarks>
    /// This method is executed after every block that has item related information (except for 0200)
    /// so that it can act as post-processing and detect items that must be report on 0200 but were not added to the backing table.
    /// </remarks>
    public void populate0200RecordsWithMissingItems()
    {
        this.populate0200WithBOMItemsNotUsedInProd();
        this.populate0200WithFinishedGoodsInK220();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populate0200WithBOMItemsNotUsedInProd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts 0200 records in the <c>FBSpedFileItemTmp_BR</c> for items that are listed in BOMs,
    /// but were never used in a production (due to insufficient on-hand inventory, for example).
    /// </summary>
    private void populate0200WithBOMItemsNotUsedInProd()
    {
        ProdBOM prodBOM;
        InventTransOrigin inventTransOrigin;
        FBSpedFileItemTmp_BR localSpedFileItem;

        localSpedFileItem.linkPhysicalTableInstance(spedFileItem);

        insert_recordset localSpedFileItem (FiscalEstablishmentRecId, ItemId)
        select FiscalEstablishmentRecId
            from spedFileManufacturedProduct
            group by FiscalEstablishmentRecId
            join ItemId
                from prodBom
                group by ItemId
                where prodBom.ProdId == spedFileManufacturedProduct.ProdId
            exists join inventTransOrigin
                where prodBom.InventTransId == inventTransOrigin.InventTransId
            notexists join spedFileItem
                where spedFileItem.ItemId == prodBOM.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populate0200WithFinishedGoodsInK220</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts 0200 records in the <c>FBSpedFileItemTmp_BR</c> for finished goods that were, in a given period,
    /// always produced with a BOM different than the original BOM and are present in the K220.
    /// </summary>
    private void populate0200WithFinishedGoodsInK220()
    {
        FBSpedFileItemTmp_BR localSpedFileItem;

        localSpedFileItem.linkPhysicalTableInstance(spedFileItem);

        insert_recordset localSpedFileItem (FiscalEstablishmentRecId, ItemId)
        select FiscalEstablishmentRecId, ItemId
            from spedFileManufacturedProduct
            group by FiscalEstablishmentRecId, ItemId
            where spedFileManufacturedProduct.FiscalEstablishmentRecId == fiscalEstablishment.RecId
               && spedFileManufacturedProduct.SpedItemId != spedFileManufacturedProduct.ItemId
            join spedFileManufacturedProductInPeriod
                where spedFileManufacturedProductInPeriod.SpedItemId               == spedFileManufacturedProduct.SpedItemId
                   && spedFileManufacturedProductInPeriod.FiscalEstablishmentRecId == spedFileManufacturedProduct.FiscalEstablishmentRecId
                   && spedFileManufacturedProductInPeriod.TotalGoodQty > 0
            notexists join spedFileItem
                where spedFileItem.ItemId == spedFileManufacturedProduct.ItemId
                   && (spedFileItem.SpedItemId == '' || spedFileItem.SpedItemId == spedFileItem.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRecord0210BasedOnProduction</Name>
				<Source><![CDATA[
    public final void processRecord0210BasedOnProduction(SpedItemId _spedItemId)
    {
        boolean isInventProductTypeValid(InventProductTypeId_BR _inventProductType, ItemId _bomItemId, ProdId _prodId)
        {
            if (_inventProductType == '00'
                || _inventProductType == '01'
                || _inventProductType == '02'
                || _inventProductType == '03'
                || _inventProductType == '04'
                || _inventProductType == '05'
                || _inventProductType == '10')
            {
                return true;
            }
            else
            {
                warning(strFmt("@FiscalBooks_SpedFiscal:FBSpedFileCtreator_BomItemValidation", _bomItemId, _prodId, _inventProductType));
                return false;
            }
        }

        Qty bomTotalQty = 0.0;
        Qty scrapVarWeightedTotal = 0.0;
        Qty scrapConstTotal = 0.0;

        ProdBom prodBom;
        ProdBom lastProdBom;
        FBSpedFileItemManufacturedTmp_BR lastSpedFileManufacturedProduct;
        InventTransOrigin inventTransOrigin;
        InventProductTypeId_BR inventProductType;

        while select ItemId, ProdId, TotalScheduledQty, CountOfProdId from spedFileManufacturedProduct
            where spedFileManufacturedProduct.SpedItemId == _spedItemId
            // select the production order BOM lines
            join ItemId, Formula, BomQty, BomQtySerie, ProdLineType, BomId, BomConsump, Constant, Depth, Height, Width, Density, LineNum,
                  ScrapVar, ScrapConst, UnitId, ProdId, InventTransId
            from prodBom
                order by prodBom.ItemId
                where prodBom.ProdId == spedFileManufacturedProduct.ProdId &&
                      prodBom.ProdLineType != BomType::Phantom
            exists join inventTransOrigin
                where prodBom.InventTransId == inventTransOrigin.InventTransId
        {
            InventTable inventTable = InventTable::find(prodBom.ItemId);

            if (inventTable.ItemType != ItemType::Item)
            {
                continue;
            }

            Qty bomQty = 0.0;

            if (lastProdBom.ItemId && prodBom.ItemId != lastProdBom.ItemId)
            {
                if (lastProdBom.ItemId && isInventProductTypeValid(inventProductType, lastProdBom.ItemId, lastProdBom.ProdId))
                {
                    spedFileBlockKWriter.writeRecord0210(lastProdBom.ItemId, bomTotalQty,
                                                     this.calculatedScrapVarTotal(scrapVarWeightedTotal, bomTotalQty) +
                                                     lastSpedFileManufacturedProduct.calculateScrapConstTotal(scrapConstTotal, bomTotalQty));
                }

                bomTotalQty = 0;
                scrapVarWeightedTotal = 0;
                scrapConstTotal = 0;
            }

            if (prodBom.BOMQty > 0)
            {
                bomQty = FBSpedFileCreator_Fiscal_ProdTable_BR::calcBomQtyPerInventUnitId_BR(prodBom);
                bomTotalQty += bomQty;
                scrapVarWeightedTotal += bomQty * (prodBom.ScrapVar/100);
                scrapConstTotal += prodBom.ScrapConst;
            }
            else
            {
                bomQty = abs(InventTrans::findTransId(prodBom.InventTransId).Qty);
                bomTotalQty += bomQty;
            }

            lastSpedFileManufacturedProduct.data(spedFileManufacturedProduct.data());
            lastProdBom.ItemId = prodBom.ItemId;
            lastProdBom.ProdId = prodBom.ProdId;
            inventProductType = inventTable.InventProductType_BR;
        }

        if (lastProdBom.ItemId && isInventProductTypeValid(inventProductType, lastProdBom.ItemId, lastProdBom.ProdId))
        {
            spedFileBlockKWriter.writeRecord0210(lastProdBom.ItemId, bomTotalQty,
                                             this.calculatedScrapVarTotal(scrapVarWeightedTotal, bomTotalQty) +
                                             lastSpedFileManufacturedProduct.calculateScrapConstTotal(scrapConstTotal, bomTotalQty));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBomQtyPerInventUnitId_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the bom quantity and checks whether a conversion of unit of measure is valid. If that the case, the bom unit will be converted to unit of measure of inventory.
    /// </summary>
    /// <param name="_prodBom">
    /// The bom record.
    /// </param>
    /// <returns>
    /// The bomQty calculated and converted, if that the case, in the inventory unit. Otherwise return zero (0).
    /// </returns>
    public static BOMQty calcBomQtyPerInventUnitId_BR(ProdBOM _prodBom)
    {
        BOMQty ret;
        InventTable inventTable = _prodBom.inventTable();

        if(_prodBom.checkUnit())
        {
            ret = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_prodBom.ItemId,
                                                                                        _prodBom.InventDimId,
                                                                                        _prodBom.bomQtyFormula(1, _prodBom.ItemId),
                                                                                        _prodBom.UnitId,
                                                                                        inventTable.inventUnitId(),
                                                                                        NoYes::Yes,
                                                                                        NoYes::No);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FBSpedFileCreator_Fiscal_ProdTable_BR construct(
        FBSpedFileItemTmp_BR _spedFileItem,
        FBSpedFileItemManufacturedTmp_BR _spedFileManufacturedProduct,
        FBSpedFileItemManufacturedInPeriodTmp_BR _spedFileManufacturedProductInPeriod,
        FBBookingPeriod_BR _fbBookingPeriod,
        FBSpedFiscalBlockKWriter_BR  _spedFileCreatorFiscalBlockK)
    {
        FBSpedFileCreator_Fiscal_ProdTable_BR spedFileCreatorFiscalBlockK = new FBSpedFileCreator_Fiscal_ProdTable_BR();

        spedFileCreatorFiscalBlockK.parmSpedFileBlockKWriter(_spedFileCreatorFiscalBlockK);

        spedFileCreatorFiscalBlockK.parmSpedFileItem(_spedFileItem);
        spedFileCreatorFiscalBlockK.parmSpedFileManufacturedProduct(_spedFileManufacturedProduct);
        spedFileCreatorFiscalBlockK.parmSpedFileManufacturedProductInPeriod(_spedFileManufacturedProductInPeriod);
        spedFileCreatorFiscalBlockK.parmFBBookingPeriod(_fbBookingPeriod);
        spedFileCreatorFiscalBlockK.parmFiscalEstablishment(spedFileCreatorFiscalBlockK.parmFBBookingPeriod().fiscalEstablishment());
        spedFileCreatorFiscalBlockK.parmSpedItemIdGenerator(FBSpedItemIdGenerator_BR::construct());

        return spedFileCreatorFiscalBlockK;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldReportConsumptionOfProductType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether an invent productinon type should be reported in Sped Fiscal when this item is a comsumption item.
    /// </summary>
    /// <param name="_inventProductType">
    /// The product type classification.
    /// </param>
    /// <returns>
    /// True if the invent production type is reportable. Otherwise return false.
    /// </returns>

    public static boolean shouldReportConsumptionOfProductType(InventProductTypeId_BR _inventProductType)
    {
        return _inventProductType == '00'
            || _inventProductType == '01'
            || _inventProductType == '02'
            || _inventProductType == '03'
            || _inventProductType == '04'
            || _inventProductType == '05'
            || _inventProductType == '10';
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldReportCorrectionOfProductType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether an invent productinon type should be reported in Sped Fiscal when this item is a correction item.
    /// </summary>
    /// <param name="_inventProductType">
    /// The product type classification.
    /// </param>
    /// <returns>
    /// True if the invent production type is reportable. Otherwise return false.
    /// </returns>

    public static boolean shouldReportCorrectionOfProductType(InventProductTypeId_BR _inventProductType)
    {
        return _inventProductType == '00'
            || _inventProductType == '01'
            || _inventProductType == '02'
            || _inventProductType == '03'
            || _inventProductType == '04'
            || _inventProductType == '05'
            || _inventProductType == '06'
            || _inventProductType == '10';
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldReportProductionOfProductType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether an invent productinon type should be reported in Sped Fiscal when this item is a finished good.
    /// </summary>
    /// <param name="_inventProductType">
    /// The product type classification.
    /// </param>
    /// <returns>
    /// True if the invent production type is reportable. Otherwise return false.
    /// </returns>
    public static boolean shouldReportProductionOfProductType(InventProductTypeId_BR _inventProductType)
    {
        return _inventProductType == '03'
            || _inventProductType == '04';
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldReportJointOfProductType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether an invent productinon type should be reported in Sped Fiscal when this item is a co-product or by-product.
    /// </summary>
    /// <param name="_inventProductType">
    /// The product type classification.
    /// </param>
    /// <returns>
    /// True if the invent production type is reportable. Otherwise return false.
    /// </returns>
    public static boolean shouldReportJointOfProductType(InventProductTypeId_BR _inventProductType)
    {
        return _inventProductType == '05'
            || _inventProductType == '06';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBlockK</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal FBSPEDFiscalBlockK_BR parmBlockK(FBSPEDFiscalBlockK_BR _blockK = blockK)
    {
        blockK = _blockK;
        return blockK;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpedFiscalVersion</Name>
				<Source><![CDATA[
    internal FBSPEDFiscalVersion_BR parmSpedFiscalVersion(FBSPEDFiscalVersion_BR _spedFiscalVersion = spedFiscalVersion)
    {
        spedFiscalVersion = _spedFiscalVersion;
        return spedFiscalVersion;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>