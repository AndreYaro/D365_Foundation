<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>UniqueCertificationValidate_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class checks if Unique Certification data are consistent.
/// </summary>
public class UniqueCertificationValidate_IT extends RunBase
{
    public UniqueCertificationHeader_IT uniqueCertificationHeader;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmUniqueCertificationHeader</Name>
				<Source><![CDATA[
    public UniqueCertificationHeader_IT parmUniqueCertificationHeader(UniqueCertificationHeader_IT _uniqueCertificationHeader = uniqueCertificationHeader)
    {
        uniqueCertificationHeader = _uniqueCertificationHeader;
        return uniqueCertificationHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    // <summary>
    /// Validates the Unique Certification.
    /// </summary>
    public void run()
    {
        if (this.validateCertification())
        {
            info("@SYS104317");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCertification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the Unique Certification.
    /// </summary>
    /// <returns>true if Unique Certification is consistent; false otherwise.</returns>
    public boolean validateCertification()
    {
        return this.validateHeader() && this.validateVendor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>UniqueCertificationHeader</c> record.
    /// </summary>
    /// <returns>true if the <c>UniqueCertificationHeader</c> record is consistent; false otherwise.</returns>
    public boolean validateHeader()
    {
        boolean ret = true;

        if (!uniqueCertificationHeader.SignatureFiscalCode
            || !uniqueCertificationHeader.SignaturePosition
            || !uniqueCertificationHeader.SignatureLastName
            || !uniqueCertificationHeader.SignatureFirstName)
        {
            info("@ExtendedItallianLocalization:TitlePage");
            ret = checkfailed("@ExtendedItallianLocalization:SignatoryDataMandatory");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cheks if <c>UniqueCertificationVendorDetail</c> record data are consistent.
    /// </summary>
    /// <returns>true if <c>UniqueCertificationVendorDetail</c> record data are consistent; false otherwise.</returns>
    public boolean validateVendor()
    {
        boolean ret = true;
        UniqueCertificationVendorList_IT vendorList;
        UniqueCertificationVendorDetail_IT vendorDetail;

        while select vendorList
            where vendorList.RefRecId == uniqueCertificationHeader.RecId
        {
            setprefix(strfmt(
                '%1 %2',
                "@ExtendedItallianLocalization:Vendor",
                vendorList.VendAccount));

            select firstOnly SubstitutePhone, SubstituteATECOFINCode_IT, VendorFiscalCode, VendorBirthDate from vendorDetail
                where vendorDetail.RefRecId == vendorlist.RecId;

            if (vendorDetail.SubstitutePhone != stralpha(vendorDetail.SubstitutePhone))
            {
                ret = checkfailed(strfmt(
                    '%1 %2, %3',
                    "@SYS8498",
                    "@SYS7869",
                    "@ExtendedItallianLocalization:UseAlphanumericsCharacter"));
            }

            if (vendorDetail.SubstituteATECOFINCode_IT != stralpha(vendorDetail.SubstituteATECOFINCode_IT))
            {
                ret = checkfailed("@SYS125619");
            }

            if (strlen(vendorDetail.VendorFiscalCode) == 16 && !vendorDetail.VendorBirthDate)
            {
                ret = checkfailed("@SYS61088");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static UniqueCertificationValidate_IT construct()
    {
        return new UniqueCertificationValidate_IT();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        UniqueCertificationValidate_IT validator = UniqueCertificationValidate_IT::construct();

        if (args && args.record().TableId == tablenum(UniqueCertificationHeader_IT))
        {
            validator.parmUniqueCertificationHeader(args.record());
        }
        else
        {
            throw error("@SYS80663");
        }

        validator.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>