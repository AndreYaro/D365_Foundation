<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationVendPackingSlipJourDataRetrieval</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationVendPackingSlipJourDataRetrieval</c> class retrieves data from <c>VendPackingSlipJour</c>, etc.
/// </summary>
[TaxIntegrationDataRetrieval(tableStr(VendPackingSlipJour))]
public class TaxIntegrationVendPackingSlipJourDataRetrieval
    extends TaxIntegrationPurchParmTableDataRetrieval
{
    protected VendPackingSlipJour vendPackingSlipJour;
    protected VendPackingSlipTrans vendPackingSlipTrans;
    private const str LoggerNameVendPackSlipJourDataRetrieval = 'Tax Integration - Data Retrieval - VendPackingSlipJour';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the document.
    /// </summary>
    /// <returns>The query for the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentQueryObject()
    {
        SysDaQueryObjectBuilder queryObjectBuilder;

        purchParmTable = this.getPurchParmTableFromLegacyTax();

        if (this.document.getLocalRecord())
        {
            vendPackingSlipJour = this.document.getLocalRecord();
            queryObjectBuilder = SysDaQueryObjectBuilder::from(this.purchTable)
                .where(this.purchTable, fieldStr(PurchTable, PurchId))
                    .isEqualToLiteral(this.vendPackingSlipJour.PurchId);
        }
        else
        {
            queryObjectBuilder = SysDaQueryObjectBuilder::from(this.vendPackingSlipJour)
                .where(this.vendPackingSlipJour, fieldStr(VendPackingSlipJour, RecId))
                    .isEqualToLiteral(this.document.getLocalRecId())
                .innerJoin(this.purchTable)
                    .where(this.vendPackingSlipJour, fieldStr(VendPackingSlipJour, PurchId))
                        .isEqualTo(this.purchTable, fieldStr(PurchTable, PurchId));
        }

        queryObjectBuilder = queryObjectBuilder
            .outerJoin(this.transportationDocument)
                .where(this.transportationDocument, fieldStr(TransportationDocument, RecId))
                    .isEqualTo(this.purchTable, fieldStr(PurchTable, TransportationDocument))
            .outerJoin(this.vendTable)
                .where(this.vendTable, fieldStr(VendTable, AccountNum))
                    .isEqualTo(this.purchTable, fieldStr(PurchTable, OrderAccount))
            .outerJoin(this.vendTableInvoice)
                .where(this.vendTableInvoice, fieldStr(VendTable, AccountNum))
                    .isEqualToLiteral(this.purchParmTable.InvoiceAccount);

        return queryObjectBuilder.toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the lines of the document.
    /// </summary>
    /// <returns>The query for the lines of the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getLineQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.purchParmLine)
            .where(this.purchParmLine, fieldStr(purchParmLine, ParmId))
                .isEqualToLiteral(this.purchParmTable.ParmId)
            .where(this.purchParmLine, fieldStr(purchParmLine, TableRefId))
                .isEqualToLiteral(this.purchParmTable.TableRefId)
            .innerJoin(this.purchLine)
                .where(this.purchLine, fieldStr(PurchLine, RecId))
                    .isEqualTo(this.purchParmLine, fieldStr(PurchParmLine, PurchLineRecId))
            .innerJoin(this.vendPackingSlipTrans)
                .where(this.vendPackingSlipTrans, fieldStr(vendPackingSlipTrans, VendPackingSlipJour))
                    .isEqualToLiteral(this.vendPackingSlipJour.RecId)
                .where(this.vendPackingSlipTrans, fieldStr(vendPackingSlipTrans, InventTransId))
                    .isEqualTo(this.purchLine, fieldStr(PurchLine, InventTransId))
            .outerJoin(this.inventDim)
                .where(this.inventDim, fieldStr(InventDim, inventDimId))
                    .isEqualTo(this.purchLine, fieldStr(PurchLine, InventDimId))
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a line of the document.
    /// </summary>
    /// <returns>The constructed line of the document.</returns>
    protected TaxIntegrationLineObject constructLine()
    {
        return TaxIntegrationLineObject::constructOnDocument(
            this.vendPackingSlipTrans.TableId,
            this.vendPackingSlipTrans.RecId,
            this.document);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyQuantityAndTransactionAmountToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document's quatity and amount.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyQuantityAndTransactionAmountToLine(TaxIntegrationLineObject _line)
    {
        super(_line);

        // Refer to PurchCalcTax_PackingSlip.transLineAmount(), changed the purchLine.lineAmountExclTax() to purchLine.LineAmount
        Factor factor = purchLine.PurchQty ? (vendPackingSlipTrans.Qty / purchLine.PurchQty) : 1;
        AmountCur transLineAmount = CurrencyExchangeHelper::amount(factor * purchLine.LineAmount, purchLine.CurrencyCode);
        _line.setLineAmount(transLineAmount);
        _line.setTransactionAmount(_line.getLineAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchParmTableFromLegacyTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>PurchParmTable</c> for this packing slip from legacy tax.
    /// </summary>
    /// <returns>The <c>PurchParmTable</c>.</returns>
    private PurchParmTable getPurchParmTableFromLegacyTax()
    {
        const str CallStack = 'Call stack';

        // The PurchCalcTax for packing slip should be <c>PuchCalcTax_PackingSlip</c>. In case it's not, raise an error.
        PurchCalcTax purchCalcTax = this.document.getLegacyTax().purchCalcTax();
        if (!(purchCalcTax is PurchCalcTax_PackingSlip))
        {
            using (var logContext = TaxIntegrationAbstractActivity::getActivityContextStatic(LoggerNameVendPackSlipJourDataRetrieval))
            {
                const str CalcTaxClassName = 'PurchCalcTax class name';
                System.String exceptionCallStack = new System.Diagnostics.StackTrace(true).ToString();
                logContext.addCustomProperty(CallStack, exceptionCallStack);
                logContext.addCustomProperty(CalcTaxClassName, classId2Name(classIDGet(purchCalcTax)));
            }
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        PurchCalcTax_PackingSlip purchCalcTax_PackingSlip = purchCalcTax;
        Common parmTableSource = purchCalcTax_PackingSlip.getParmTable();

        // Currently, the parm table should be <c>PurcParmTable</c>. In case it's not, raise an error.
        if (parmTableSource.TableId != tableNum(PurchParmTable))
        {
            using (var logContext = TaxIntegrationAbstractActivity::getActivityContextStatic(LoggerNameVendPackSlipJourDataRetrieval))
            {
                const str ParmTableName = 'Parm table name';
                System.String exceptionCallStack = new System.Diagnostics.StackTrace(true).ToString();
                logContext.addCustomProperty(CallStack, exceptionCallStack);
                logContext.addCustomProperty(ParmTableName, tableId2Name(parmTableSource.TableId));
            }

            throw (new System.NotSupportedException(
                strFmt("@TaxIntegrationException:TableNotSupported", parmTableSource.TableId)));
        }
        return parmTableSource;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>