<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSCustomWaveStepMethod</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSCustomWaveStepMethod</c> class can be extended to create custom methods to be executed during wave processing.
/// </summary>
public abstract class WHSCustomWaveStepMethod extends WHSWaveStepMethod
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process wave step method.
    /// </summary>
    /// <param name="_postEngine">
    /// A <c>WhsPostEngine</c> instance.
    /// </param>
    /// <returns>
    /// true if the processing was successful; otherwise, false.
    /// </returns>
    public abstract boolean process(WhsPostEngine _postEngine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the method name to be displayed.
    /// </summary>
    /// <returns>
    /// The method name to be displayed.
    /// </returns>
    public abstract Name displayName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOptional</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the wave step method is optional.
    /// </summary>
    /// <returns>
    /// True if the wave step method is optional; otherwise, false.
    /// </returns>
    public final boolean isOptional()
    {
        WHSBaseWaveStepMethod base = this.baseMethod();
        if (base)
        {
            return base.isOptional();
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the wave step method name.
    /// </summary>
    /// <returns>
    /// The wave step method name.
    /// </returns>
    public final WHSPostMethodName name()
    {
        return classId2Name(classIdGet(this));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUseTaskBasedProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the current method can be run in asynchronously
    /// </summary>
    /// <returns>
    /// true, if the method can be run asynchronously; otherwise, false.
    /// </returns>
    public final boolean canUseTaskBasedProcessing()
    {
        SysDictClass dictClass = new SysDictClass(classIdGet(this));

        if (dictClass)
        {
            WHSWavePostMethodAttribute wavePostMethodAttribute = dictClass.getAttribute(classStr(WHSWavePostMethodAttribute));
            return wavePostMethodAttribute && wavePostMethodAttribute.canUseTaskBasedProcessing();
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>waveTemplateType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the wave step method template type.
    /// </summary>
    /// <returns>
    /// The wave step method template type.
    /// </returns>
    public final WHSWaveTemplateType waveTemplateType()
    {
        SysDictClass dictClass = new SysDictClass(classIdGet(this));

        if (dictClass)
        {
            WHSWaveTemplateTypeFactoryAttribute waveTemplateTypeFactoryAttribute = dictClass.getAttribute(classStr(WHSWaveTemplateTypeFactoryAttribute));
            if (waveTemplateTypeFactoryAttribute)
            {
                return waveTemplateTypeFactoryAttribute.parmWaveTemplateType();
            }
        }
        return WHSWaveTemplateType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>baseMethodName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the base wave step method name that this class can replace.
    /// </summary>
    /// <returns>
    /// The base wave step method name that this class can replace.
    /// </returns>
    protected WHSPostMethodName baseMethodName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>baseMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>WHSBaseWaveStepMethod</c> instance for this class, if exists.
    /// </summary>
    /// <returns>
    /// A <c>WHSBaseWaveStepMethod</c> instance, if exists; otherwise, null.
    /// </returns>
    public final WHSBaseWaveStepMethod baseMethod()
    {
        return WHSBaseWaveStepMethod::newFromName(this.baseMethodName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReplacementForBaseMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if this method can replace the passed base method.
    /// </summary>
    /// <param name="_postMethodName">
    /// The name of the base method to be replaced.
    /// </param>
    /// <param name="_replacementMethod">
    /// The name of the replacement method..
    /// </param>
    /// <returns>
    /// true if this method can replace the passed base method; otherwise, false.
    /// </returns>
    public static final boolean isReplacementForBaseMethod(WHSPostMethodName _postMethodName, WHSPostMethodName _replacementMethod)
    {
        WHSBaseWaveStepMethod baseWaveStepMethod = WHSWaveStepMethodFactory::newBaseMethodFromName(_replacementMethod);
        if (baseWaveStepMethod && baseWaveStepMethod.name() == _postMethodName)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>WHSCustomWaveStepMethod</c> instance based on the passed method name.
    /// </summary>
    /// <param name="_postMethodName">
    /// The method name.
    /// </param>
    /// <returns>
    /// A <c>WHSCustomWaveStepMethod</c> instance.
    /// </returns>
    public static WHSCustomWaveStepMethod newFromName(WHSPostMethodName _postMethodName)
    {
        SysDictClass dictClass = SysDictClass::newName(_postMethodName);
        if (dictClass)
        {
            WHSCustomWaveStepMethod customWaveStepMethod = dictClass.makeObject();
            return customWaveStepMethod;
        }
        return null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>