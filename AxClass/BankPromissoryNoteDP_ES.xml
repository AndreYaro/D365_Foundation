<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPromissoryNoteDP_ES</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankPromissoryNoteDP</c> class is the report data provider class for the
/// <c>BankPromissoryNote_ES</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classstr(SRSTmpTblMarshallerContract))
]
public class BankPromissoryNoteDP_ES extends SRSReportDataProviderBase
{
    BankPromissoryNoteTmp_ES     bankPromissoryNoteTmp_ES;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBankPromissoryNote_ESTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the data from the <c>BankPromissoryNoteTmp_ES</c> temporary table.
    /// </summary>
    /// <returns>
    /// The data from the <c>BankPromissoryNoteTmp_ES</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(BankPromissoryNoteTmp_ES))
    ]
    public BankPromissoryNoteTmp_ES getBankPromissoryNote_ESTmp()
    {
        select bankPromissoryNoteTmp_ES;
        return bankPromissoryNoteTmp_ES;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the data into the <c>BankPromissoryNoteTmp_ES</c> temporary table.
    /// </summary>
    public void processReport()
    {
        SRSTmpTblMarshallerContract contract =  this.parmDataContract() as SRSTmpTblMarshallerContract;
        SrsReportRunPermission permission = new SRSReportRunPermission();
        permission.assert();

        //Temp Table Object that was returned from SRSDataCarrier
        bankPromissoryNoteTmp_ES = SRSTmpTblMarshaller::getTmpTbl(contract.parmTmpTableDataRecId());
        SRSTmpTblMarshaller::deleteTmpTblData(contract.parmTmpTableDataRecId());
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>