<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesFormletterParmDataI4P_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesFormletterParmDataI4P_RU</c> class is used to maintain parameters of the customer invoice for payment posting.
/// </summary>
[DocumentStatusFactoryAttribute(DocumentStatus::Invoice4Paym_RU)]
class SalesFormletterParmDataI4P_RU extends SalesFormletterParmData
{
    OfficialsServ_RU        offSrv;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initOfficials_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates officials for given <c>SalesParmTable</c> record or for all <c>SalesParmTable</c> records at update
    /// </summary>
    /// <param name="_parmTable">
    /// <c>SalesParmTable</c> record
    /// </param>
    /// <param name="_includeFacture">
    /// Not used always false, used in <c>SalesFormletterParmDataInvoice</c>
    /// </param>
    public void initOfficials_RU(
        Common  _parmTable      = null,
        boolean _includeFacture = false)
    {
        SalesParmTable localSalesParmTable = _parmTable as SalesParmTable;

        if (! OfficialsServ_RU::isFeatureEnabled())
            return;

        if (! offSrv)
        {
            offSrv = new OfficialsServ_RU();
        }

        if (localSalesParmTable) // Editing parmTable
            return;

        ttsbegin;
        // Creating parmTables
        while select forupdate localSalesParmTable
            where localSalesParmTable.ParmId    == salesParmUpdate.ParmId    &&
                  localSalesParmTable.Ordering  == this.parmDocumentStatus() &&
                ! localSalesParmTable.OffSessionId_RU
        {
            localSalesParmTable.OffReportType_RU =
                offSrv.initTableSales(localSalesParmTable,
                                      salesParmUpdate,
                                      localSalesParmTable.OffSessionId_RU == ""); // Generate new id
            if (! localSalesParmTable.OffSessionId_RU)
            {
                localSalesParmTable.OffSessionId_RU = offSrv.newId();
            }
            localSalesParmTable.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayJournalBePosted</Name>
				<Source><![CDATA[
        protected boolean mayJournalBePosted(Common _sourceTable)
    {
        SalesTable sourceTable = _sourceTable as SalesTable;

        return sourceTable.mayInvoice4PaymBeUpdated_RU() && super(sourceTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayJournalTransBePosted</Name>
				<Source><![CDATA[
        protected boolean mayJournalTransBePosted(Common _salesLine)
    {
        SalesLine salesLine = _salesLine as SalesLine;

        return salesLine.mayInvoice4PaymBeUpdated_RU() && super(salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubTableMapKey</Name>
				<Source><![CDATA[
        protected str parmSubTableMapKey(Common _common)
    {
        str key;

        switch (_common.TableId)
        {
            case this.parmTableTableId() :
                SalesParmTable salesParmTable = _common;
                key = this.addToKey(key, salesParmTable.TableRefId);
                key = this.addToKey(key, salesParmTable.SalesId);
                break;
            case this.parmLineTableId() :
                SalesParmLine salesParmLine = _common;
                key = this.addToKey(key, salesParmLine.TableRefId);
                key = this.addToKey(key, salesParmLine.OrigSalesId);
                break;
            case this.parmSubTableTableId() :
                SalesParmSubTable salesParmSubTable = _common;
                key = this.addToKey(key, salesParmSubTable.TableRefId);
                key = this.addToKey(key, salesParmSubTable.OrigSalesId);
                break;
        }

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            throw error(strFmt(Error::wrongUseOfFunction(funcName())));
        }
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>