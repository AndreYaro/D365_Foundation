<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQSendJournalCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchRFQSendJournalCreate extends FormletterJournalCreate
{
    VendRFQJour                 vendRFQJour;
    VendRFQTrans                vendRFQTrans;

    PurchRFQCaseTable           purchRFQCaseTable;
    PurchRFQCaseLine            purchRFQCaseLine;
    PurchRFQParmTable           purchRFQParmTable;
    PurchRFQParmUpdate          purchRFQParmUpdate;
    PurchRFQLine                purchRFQLine;

    PurchRFQTable               purchRFQTable;

    PurchRFQTotals              purchRFQTotals;
    boolean                     printReplySheet;
    boolean                     printPriceAmount;
    DimensionDefault            dimension;
    RecordSortedList            purchRFQParmLineSortedList;
    boolean                     isNewPurchRFQTable = false;
    boolean                     isMiscChargeUsedOnPurchRFQCaseLine = true;

    private PurchRFQInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToInventReportDimHistory</Name>
				<Source><![CDATA[
    protected void addToInventReportDimHistory(Common _journalline)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateNumberSequence</Name>
				<Source><![CDATA[
    protected NumberSeq allocateNumberSequence()
    {
        RefRecId            internalRFQId;
        NumberSeq           tmpNumberSeq;
        NumberSequenceDatatype  numberDatatype = NumberSequenceDatatype::find(PurchParameters::numRefPurchInternalRFQId().NumberSequenceDatatype);
        RefRecId                scopeId = NumberSeqScopeFactory::createDefaultScope().getId();

        if (purchRFQTable.NumberSequenceGroup)
        {
            internalRFQId = NumberSequenceGroupRef::findNaturalKey(numberDatatype.RecId, scopeId, purchRFQTable.NumberSequenceGroup).NumberSequenceId;

            if (internalRFQId)
            {
                tmpNumberSeq = NumberSeq::newGetNumFromId(internalRFQId);
            }
        }
        else
        {
            if (PurchParameters::numRefPurchInternalRFQId().NumberSequenceId)
            {
                tmpNumberSeq = NumberSeq::newGetNum(PurchParameters::numRefPurchInternalRFQId());
            }
        }
        return tmpNumberSeq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLine</Name>
				<Source><![CDATA[
    protected void  calcLine(PurchRFQParmLine     _purchRFQParmLine)
    {
        updateNow           = _purchRFQParmLine.PurchQty;
        updateNowInvent     = _purchRFQParmLine.QtyOrdered;
        lineValue           = _purchRFQParmLine.lineAmountExclTax();
        lineValueInclTax    = _purchRFQParmLine.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDiscardLine</Name>
				<Source><![CDATA[
    protected boolean  checkDiscardLine(Common _purchRFQParmLine)
    {
        PurchRFQParmLine purchRFQParmLine = _purchRFQParmLine as PurchRFQParmLine;
        if (purchRFQParmLine.PurchQty == 0)
            return true;

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the journal header when updating the sales order, the purchase order, or the request for
    /// quote.
    /// </summary>
    protected void createJournalHeader()
    {
        PurchRFQCaseTable   rfqCaseTable;
        PurchRFQReplyTable  purchRFQReplyTable;

        if (!journalNumber)
            throw error("@SYS71652");

        vendRFQJour.clear();
        vendRFQJour.initValue();

        vendRFQJour.ParmId              = purchRFQParmUpdate.ParmId;
        vendRFQJour.rfqId               = purchRFQParmTable.rfqId;
        vendRFQJour.InternalRFQId       = journalNumber;
        vendRFQJour.rfqDate             = this.updateDate();
        vendRFQJour.rfqUpdateType       = this.purchRFQUpdateType();
        vendRFQJour.Status              = this.purchRFQStatus();
        vendRFQJour.initFromPurchRFQTable(purchRFQTable);

        purchRFQReplyTable = purchRFQTable.purchRFQReplyTable();
        if (purchRFQReplyTable && vendRFQJour.Status != PurchRFQStatus::Sent)
        {
            vendRFQJour.initFromPurchRFQReplyTable(purchRFQReplyTable);
        }
        if (purchRFQCaseTable)
        {
            vendRFQJour.initFromPurchRFQCaseTable(purchRFQCaseTable);
        }
        else
        {
            rfqCaseTable = PurchRFQCaseTable::find(purchRFQTable.rfqCaseId);
            vendRFQJour.initFromPurchRFQCaseTable(rfqCaseTable);
        }

        if (purchRFQParmUpdate.ReasonId)
        {
            vendRFQJour.editReasonCode(true,purchRFQParmUpdate.ReasonId);
            vendRFQJour.editReasonComment(true,purchRFQParmUpdate.ReasonComment);
        }
        // Totals on vendRFQJour will be computed when the journal is posted (excl. IN localization)
        if (!PurchRFQCaseAutoCreateUpdateHeaderStatusPerLineFlight::instance().isEnabled() || TaxParameters::isCustomsEnable_IN())
        {
            vendRFQJour.initFromPurchRFQTotals(purchRFQTotals);
        }
        vendRFQJour.PrintPriceAmount = printPriceAmount;
        vendRFQJour.PrintReplySheet  = printReplySheet;

        // <GIN>
        if (TaxParameters::isCustomsEnable_IN())
        {
            vendRFQJour.Amount -= this.getCustomsDuty_IN();
        }
        //</GIN>

        vendRFQJour.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLine</Name>
				<Source><![CDATA[
    protected void createJournalLine(Common _purchRFQParmLine)
    {
        PurchRFQParmLine purchRFQParmLine = _purchRFQParmLine as PurchRFQParmLine;

        using (var activityContextCreateJournalLine = this.instrumentationLogger().journalInstrumentationActivities().sendJournalCreateJournalLine())
        {
            purchRFQCaseLine = this.getPurchRFQCaseLine(purchRFQParmLine);
            this.createOrUpdateRFQLine(purchRFQParmLine,dimension);
            this.calcLine(purchRFQParmLine);

            purchRFQLine = purchRFQParmLine.purchRFQLine();

            vendRFQTrans.clear();
            vendRFQTrans.initValue();
            vendRFQTrans.initFromVendRFQJour(vendRFQJour);
            vendRFQTrans.initFromPurchRFQLine(purchRFQLine);

            vendRFQTrans.PurchQty       = updateNow;
            vendRFQTrans.QtyOrdered     = updateNowInvent;
            vendRFQTrans.LineAmount     = lineValue;
            vendRFQTrans.LineAmountTax  = lineValueInclTax - lineValue;
            vendRFQTrans.Status         = this.purchRFQStatus();

            this.insertJournalLine(vendRFQTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLink</Name>
				<Source><![CDATA[
    protected void createJournalLink(Common common)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateRFQ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>PurchRFQTable</c> record if found; otherwise adds a new <c>PurchRFQTable</c> table
    /// record.
    /// </summary>
    protected void createOrUpdateRFQ()
    {
        ttsbegin;

        this.findRFQ();
       
        this.clearRFQRelatedData();

		this.initRFQ();

        this.insertOrUpdateRFQ();

        this.createOrUpdateRFQRelatedData();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRFQ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>PurchRFQTable</c> record based on the case id and the vendor.
    /// </summary>
	protected void findRFQ()
    {
        purchRFQTable = PurchRFQTable::findRFQCaseId(purchRFQCaseTable.rfqCaseId, purchRFQParmTable.VendAccount, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearRFQRelatedData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the related data that will be re-generated during the journal send.
    /// </summary>
	protected void clearRFQRelatedData()
    {
        //  if record exists then delete related records that will be re-generated.
        if (purchRFQTable.RecId != 0)
        {
            PurchRFQId rfqId = purchRFQTable.rfqId;

            DocuRef              docuRef;
            delete_from docuRef
            where docuRef.RefTableId    == purchRFQTable.TableId
               && docuRef.RefRecId      == purchRFQTable.RecId
               && docuRef.RefCompanyId  == purchRFQTable.DataAreaId;

            PurchRFQReplyTable rfqReplyTable = PurchRFQReplyTable::find(rfqId);

            if (rfqReplyTable.RecId != 0)
            {
                delete_from docuRef
                where docuRef.RefTableId    == rfqReplyTable.TableId
                   && docuRef.RefRecId      == rfqReplyTable.RecId
                   && docuRef.RefCompanyId  == rfqReplyTable.DataAreaId;
            }

            PrintMgmtDocInstance printMgmt;
            delete_from printMgmt
            where printMgmt.ReferencedTableId    == purchRFQTable.TableId
               && printMgmt.ReferencedRecId      == purchRFQTable.RecId
               && printMgmt.DocumentType         == this.printMgmtDocumentType();

            delete_from rfqReplyTable
            where rfqReplyTable.rfqId == rfqId;
        }
        else
        {
            purchRFQTable.clear();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOrUpdateRFQ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts or updates the initialized <c>PurchRFQTable</c>. 
    /// </summary>
	protected void insertOrUpdateRFQ()
    {
        PurchRFQId rfqId = purchRFQTable.rfqId;

        purchRFQTable.rfqId = rfqId ? rfqId : NumberSeq::newGetNum(PurchParameters::numRefPurchRFQId()).num();
        if (!rfqId)
        {
            isNewPurchRFQTable = true;
            purchRFQTable.insert(); //PurchRFQReplyTable will be inserted automatically
        }
        else
        {
            purchRFQTable.doUpdate();
            PurchRFQTableKMCollection::updateQuestionnaire(purchRFQTable);
            PurchRFQReplyTable::createFromPurchRFQTable(purchRFQTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRFQ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>PurchRFQTable</c> record.
    /// </summary>
	protected void initRFQ()
    {
        PurchRFQVendLink purchRFQVendLink = PurchRFQVendLink::find(purchRFQCaseTable.rfqCaseId, purchRFQParmTable.VendAccount);

        purchRFQTable.initFromPurchRFQVendLink(purchRFQVendLink);
        purchRFQTable.initFromPurchRFQCaseTable(purchRFQCaseTable);

        VendTable vendTable = VendTable::find(purchRFQParmTable.VendAccount);
        if (purchRFQParmUpdate.UseVendorPrices)
        {
            purchRFQTable.initFromVendTable(vendTable);
        }

        if (!purchRFQTable.DlvMode)
        {
            purchRFQTable.DlvMode          = vendTable.DlvMode;
        }
        if (!purchRFQTable.DlvTerm)
        {
            purchRFQTable.DlvTerm          = vendTable.DlvTerm;
        }
        if (!purchRFQTable.DefaultDimension)
        {
            purchRFQTable.DefaultDimension = vendTable.DefaultDimension;
        }
        if (!purchRFQTable.Payment)
        {
            purchRFQTable.Payment          = vendTable.PaymTermId;
        }
        if (!purchRFQTable.PaymMode)
        {
            purchRFQTable.PaymMode         = vendTable.PaymMode;
        }
        if (!purchRFQTable.PaymSpec)
        {
            purchRFQTable.PaymSpec         = vendTable.PaymSpec;
        }
        if (!purchRFQTable.CurrencyCode)
        {
            purchRFQTable.CurrencyCode     = vendTable.Currency;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateRFQRelatedData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates the <c>PurchRFQTable</c> related data.
    /// </summary>
    protected void createOrUpdateRFQRelatedData()
    {
        PurchRFQReplyTable rfqReplyTable = PurchRFQReplyTable::find(purchRFQTable.RFQId);
        PurchRFQScoring::createRFQScoringForRFQReply(rfqReplyTable.RecId);
        PurchRFQSendAmendment::sendRFQAmendment(purchRFQCaseTable.RecId, purchRFQTable.RecId);
        
        this.createOrUpdateMarkup();

        Docu::copy(purchRFQCaseTable, purchRFQTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates the markup.
    /// </summary>
    protected void createOrUpdateMarkup()
    {
        if (purchRFQParmUpdate.UseVendorPrices)
        {
            purchRFQTable.createMarkupTrans();
        }
        else
        {
            Markup::delete(purchRFQTable);
            Markup::copy(NoYes::No, purchRFQCaseTable, purchRFQTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxItemGroupForItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax item group for an item.
    /// </summary>
    /// <param name = "_itemId">The item ID.</param>
    /// <returns>The tax item group.</returns>
    protected TaxItemGroup taxItemGroupForItem(ItemId _itemId)
    {
        return InventTableModule::find(_itemId, ModuleInventPurchSales::Purch).TaxItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeRFQLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the RFQ line.
    /// </summary>
    /// <param name="_purchRFQParmLine">
    /// The <c>PurchRFQParmLine</c> record buffer.
    /// </param>
    /// <param name="_dimension">
    /// The dimension to apply to <c>PurchRFQLine</c> record.
    /// </param>
    protected void initializeRFQLine(PurchRFQParmLine _purchRFQParmLine, DimensionDefault _dimension)
    {
        purchRFQLine.initFromPurchRFQCaseLine(purchRFQCaseLine);
        purchRFQLine.rfqId          = purchRFQTable.rfqId;
        purchRFQLine.Status         = PurchRFQStatus::Sent;
        purchRFQLine.ReasonId       = '';
        purchRFQLine.TaxItemGroup   = '';

        if (purchRFQCaseLine.ReqLineRefId && purchRFQCaseLine.purchReqLine().isConsumption())
        {
            PurchReqLine purchReqLine = PurchReqLine::findLineRefId(purchRFQCaseLine.reqLineRefId);
            purchRFQLine.TaxItemGroup = purchReqLine.TaxItemGroup;
            if (!TaxIntegrationRFQDefaultTaxItemGroupFlight::instance().isEnabled())
            {
                this.initTaxItemGroupFromItemOrProcCategory(_purchRFQParmLine);
            }
        }
        purchRFQLine.TaxGroup = purchRFQTable.TaxGroup;
        purchRFQLine.OverrideSalesTax = purchRFQTable.OverrideSalesTax;

        if (TaxIntegrationRFQDefaultTaxItemGroupFlight::instance().isEnabled())
        {
            this.initTaxItemGroupFromItemOrProcCategory(_purchRFQParmLine);
        }

        // Assign the Line level defined dimensions if not it is defaulted to the header level dimensions
        if (purchRFQCaseLine.DefaultDimension &&
            !DimensionDefaultFacade::areEqual(purchRFQCaseLine.DefaultDimension, PurchRFQCaseTable::find(purchRFQCaseLine.rfqCaseId).DefaultDimension))
        {
            purchRFQLine.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(purchRFQLine.DefaultDimension, purchRFQTable.DefaultDimension);
        }
        else
        {
            purchRFQLine.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(_dimension, purchRFQLine.DefaultDimension);
        }

        //if line level template id is not defined then it is defaulted to the header level template id
        if (!purchRFQLine.AccountingDistributionTemplate)
        {
            purchRFQLine.AccountingDistributionTemplate = purchRFQTable.AccountingDistributionTemplate;
        }

        if (purchRFQParmUpdate.UseVendorItemInfo && purchRFQLine.ItemId)
        {
            purchRFQLine.initFromVendExternalItemDescription();
        }

        if (purchRFQParmUpdate.UseVendorPrices)
        {
            purchRFQLine.CurrencyCode = purchRFQTable.CurrencyCode;
            purchRFQLine.LineAmount = 0;
            purchRFQLine.lineAmountModified();
            purchRFQLine.setPriceDisc(purchRFQLine.inventDim());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateRFQLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>PurchRFQLine</c> record if found; otherwise adds a new <c>PurchRFQLine</c> record.
    /// </summary>
    /// <param name="_purchRFQParmLine">
    /// The <c>PurchRFQParmLine</c> record buffer.
    /// </param>
    /// <param name="_dimension">
    /// The dimension to apply to <c>PurchRFQLine</c> record.
    /// </param>
    protected void createOrUpdateRFQLine(PurchRFQParmLine _purchRFQParmLine, DimensionDefault _dimension)
    {
        ttsbegin;
        if (!isNewPurchRFQTable)
        {
            purchRFQLine = PurchRFQLine::findRFQCaseLine(purchRFQTable.rfqId, purchRFQCaseLine.RecId, true);
            //if record exists - delete it. we need to recreate RFQLine from scratch
            if (purchRFQLine.RecId)
            {
                purchRFQLine.doDelete();
                purchRFQLine.clear();
            }
        }

        this.initializeRFQLine(_purchRFQParmLine, _dimension);

        const boolean dropInvent = true;
        const boolean dropReplyLine = false;
        const boolean updateRfqTableStatus = false;

        purchRFQLine.insert(dropInvent, dropReplyLine, updateRfqTableStatus); 
        Docu::copy(purchRFQCaseLine, purchRFQLine);
       
        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            PurchRFQLineTaxExtensionIN purchRFQLineTaxExtensionIN = PurchRFQLineTaxExtensionIN::findBypurchRFQLine(purchRFQLine.RecId);

            purchRFQLineTaxExtensionIN.PurchRFQLine = purchRFQLine.RecId;
            purchRFQLineTaxExtensionIN.write();
        }
        // </GIN>

        if (purchRFQParmUpdate.UseVendorPrices)
        {
            purchRFQLine.createMarkupTrans(purchRFQTable);
        }
        else if (isMiscChargeUsedOnPurchRFQCaseLine)
        {
            Markup::delete(purchRFQLine);
            Markup::copy(NoYes::No, purchRFQCaseLine, purchRFQLine);
        }

        _purchRFQParmLine.rfqId        = purchRFQTable.rfqId;
        _purchRFQParmLine.rfqLineRecId = purchRFQLine.RecId;
        _purchRFQParmLine.LineAmount   = purchRFQLine.LineAmount;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdParmLine_OrigOrderId</Name>
				<Source><![CDATA[
    protected FieldId fieldIdParmLine_OrigOrderId()
    {
        return fieldNum(PurchRFQParmLine,rfqCaseId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdParmTable_OrderId</Name>
				<Source><![CDATA[
    protected FieldId fieldIdParmTable_OrderId()
    {
        return fieldNum(PurchRFQParmTable, rfqId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterType</Name>
				<Source><![CDATA[
    protected FormletterType formletterType()
    {
        return FormletterType::PurchRFQ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomsDuty_IN</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the customs duty for purchRFQLine
    /// </summary>
    /// <returns>
    ///    returns total customs duty for purchRFQLine
    /// </returns>
    public AmountCur getCustomsDuty_IN()
    {
        TmpTaxWorkTrans     tmpTaxWorkTrans;
        TaxAmount           taxAmount;

        if (this.parmTax())
        {
            tmpTaxWorkTrans = this.parmTax().tmpTaxWorkTrans();
            while select SourceRegulateAmountCur, SourceTaxAmountCur, TaxCode
                from tmpTaxWorkTrans
                    where tmpTaxWorkTrans.SourceTableId == purchRFQLine.TableId &&
                          tmpTaxWorkTrans.SourceRecId   == purchRFQLine.RecId
                {
                    if (TaxTable::find(tmpTaxWorkTrans.TaxCode).TaxType_IN == TaxType_IN::Customs)
                    {
                        if (!tmpTaxWorkTrans.SourceRegulateAmountCur)
                             taxAmount += tmpTaxWorkTrans.SourceTaxAmountCur;
                        else
                             taxAmount += tmpTaxWorkTrans.SourceRegulateAmountCur;
                    }
                }
        }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current journal header.
    /// </summary>
    /// <returns>
    /// A journal header record.
    /// </returns>
    public Common getJournal()
    {
        return vendRFQJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchRFQCaseLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the corresponding <c>PurchRFQCaseLine</c> record buffer of a <c>PurchRFQParmLine</c> record.
    /// </summary>
    /// <param name="_purchRFQParmLine">
    /// The <c>PurchRFQParmLine</c> record buffer.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to select the <c>PurchRFQCaseLine</c> record for update.
    /// </param>
    /// <returns>
    /// The <c>PurchRFQCaseLine</c> record buffer.
    /// </returns>
    protected PurchRFQCaseLine getPurchRFQCaseLine(PurchRFQParmLine    _purchRFQParmLine,
                                                   boolean             _forupdate = false)
    {
        PurchRFQCaseLine  localPurchRFQCaseLine;

        localPurchRFQCaseLine.selectForUpdate(_forupdate);

        select firstonly localPurchRFQCaseLine
            where localPurchRFQCaseLine.RecId == _purchRFQParmLine.rfqLineRecId;

        return localPurchRFQCaseLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorOnlyHeaderDims</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set of the <c>purchRFQTable</c> dimension, which does not have a
    /// corresponding <c>purchRFQCaseTable</c> dimension element.
    /// </summary>
    /// <returns>
    /// The dimension set.
    /// </returns>
    private DimensionDefault getVendorOnlyHeaderDims()
    {
        DimensionDefault    dim;

        dim = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(
            purchRFQTable.DefaultDimension,
            purchRFQCaseTable.DefaultDimension);

        return dim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the journal header record.
    /// </summary>
    protected void initJournalHeader()
    {        
        using (var activityContextInitJournalHeader = this.instrumentationLogger().journalInstrumentationActivities().sendJournalCreateInitJournalHeader())
        {
            purchRFQCaseTable = purchRFQParmTable.purchRFQCaseTable();
            this.getJournalNumber();
            this.createOrUpdateRFQ();

            dimension = this.getVendorOnlyHeaderDims();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the source table record.
    /// </summary>
    protected void initSourceTable()
    {        
        if (!PurchRFQCaseAutoCreateUpdateHeaderStatusPerLineFlight::instance().isEnabled())
        {
            return;
        }

        using (var activityContextInitSourceTable = this.instrumentationLogger().journalInstrumentationActivities().sendJournalCreateInitSourceTable())
        {
            if (purchRFQParmTable.DeferLinesLoad)
            {
                this.setBasedInsertPurchRFQParmLineFromQuery();
            }

            purchRFQParmLineSortedList = new RecordSortedList(tableNum(PurchRFQParmLine));
            purchRFQParmLineSortedList.sortOrder(fieldNum(PurchRFQParmLine, RecId));

            PurchRFQParmLine purchRFQParmLine;
            while select purchRFQParmLine
                where purchRFQParmLine.ParmId     == purchRFQParmTable.ParmId
                   && purchRFQParmLine.TableRefId == purchRFQParmTable.TableRefId
                   && purchRFQParmLine.RfqCaseId  == purchRFQParmTable.RFQCaseId
            {
                purchRFQParmLineSortedList.ins(purchRFQParmLine);
            }

            MarkupTrans markupTrans;
            select firstonly RecId from markupTrans
                where markupTrans.TransTableId == tableNum(PurchRFQCaseLine);

            if (!markupTrans.RecId)
            {
                // avoid querying markupTrans for each PurchRFQCaseLine
                isMiscChargeUsedOnPurchRFQCaseLine = false;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBasedInsertPurchRFQParmLineFromQuery</Name>
				<Source><![CDATA[
    private void setBasedInsertPurchRFQParmLineFromQuery()
    {
        Query                query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(PurchRFQParmTable));
        query.dataSourceTable(tableNum(PurchRFQParmTable)).addDataSource(tableNum(PurchRFQCaseLine));
        query.dataSourceTable(tableNum(PurchRFQCaseLine)).addLink(fieldNum(PurchRFQParmTable, RFQCaseId), fieldNum(PurchRFQCaseLine, RFQCaseId));

        qbds.addRange(fieldNum(PurchRFQParmTable, RFQCaseId));
        qbds.rangeField(fieldNum(PurchRFQParmTable, RFQCaseId)).value(queryValue(purchRFQParmTable.RFQCaseId));

        qbds.addRange(fieldNum(PurchRFQParmTable, ParmId));
        qbds.rangeField(fieldNum(PurchRFQParmTable, ParmId)).value(queryValue(purchRFQParmTable.ParmId));

        qbds.addRange(fieldNum(PurchRFQParmTable, TableRefId));
        qbds.rangeField(fieldNum(PurchRFQParmTable, TableRefId)).value(queryValue(purchRFQParmTable.TableRefId));

        Map                     insertRecordsetMap = new Map(Types::String,Types::Container);
        QueryBuildFieldList     qbfl;
        int                     dataSourceUniqueId;

        // Map fields from PurchRFQParmTable
        qbfl = qbds.fields();
        dataSourceUniqueId = qbds.uniqueId();
        this.addInsertFieldMapping(qbfl, insertRecordsetMap, dataSourceUniqueId, fieldNum(PurchRFQParmTable, ParmId), fieldStr(PurchRFQParmTable, ParmId), fieldStr(PurchRFQParmLine, ParmId));
        this.addInsertFieldMapping(qbfl, insertRecordsetMap, dataSourceUniqueId, fieldNum(PurchRFQParmTable, TableRefId), fieldStr(PurchRFQParmTable, TableRefId), fieldStr(PurchRFQParmLine, TableRefId));

        // Map fields from PurchRFQCaseLine
        qbds = query.dataSourceTable(tableNum(PurchRFQCaseLine));
        qbfl = qbds.fields();
        dataSourceUniqueId = qbds.uniqueId();
        this.addInsertFieldMapping(qbfl, insertRecordsetMap, dataSourceUniqueId, fieldNum(PurchRFQCaseLine, LineItemType), fieldStr(PurchRFQCaseLine, LineItemType), fieldStr(PurchRFQParmLine, LineItemType));
        this.addInsertFieldMapping(qbfl, insertRecordsetMap, dataSourceUniqueId, fieldNum(PurchRFQCaseLine, CategoryId), fieldStr(PurchRFQCaseLine, CategoryId), fieldStr(PurchRFQParmLine, CategoryId));
        this.addInsertFieldMapping(qbfl, insertRecordsetMap, dataSourceUniqueId, fieldNum(PurchRFQCaseLine, ItemId), fieldStr(PurchRFQCaseLine, ItemId), fieldStr(PurchRFQParmLine, ItemId));
        this.addInsertFieldMapping(qbfl, insertRecordsetMap, dataSourceUniqueId, fieldNum(PurchRFQCaseLine, ItemName), fieldStr(PurchRFQCaseLine, ItemName), fieldStr(PurchRFQParmLine, ItemName));
        this.addInsertFieldMapping(qbfl, insertRecordsetMap, dataSourceUniqueId, fieldNum(PurchRFQCaseLine, InventDimId), fieldStr(PurchRFQCaseLine, InventDimId), fieldStr(PurchRFQParmLine, InventDimId));
        this.addInsertFieldMapping(qbfl, insertRecordsetMap, dataSourceUniqueId, fieldNum(PurchRFQCaseLine, RecId), fieldStr(PurchRFQCaseLine, RecId), fieldStr(PurchRFQParmLine, RfqLineRecId));
        this.addInsertFieldMapping(qbfl, insertRecordsetMap, dataSourceUniqueId, fieldNum(PurchRFQCaseLine, LineNum), fieldStr(PurchRFQCaseLine, LineNum), fieldStr(PurchRFQParmLine, LineNum));
        this.addInsertFieldMapping(qbfl, insertRecordsetMap, dataSourceUniqueId, fieldNum(PurchRFQCaseLine, LineNumber), fieldStr(PurchRFQCaseLine, LineNumber), fieldStr(PurchRFQParmLine, RFQCaseLineLineNumber));
        this.addInsertFieldMapping(qbfl, insertRecordsetMap, dataSourceUniqueId, fieldNum(PurchRFQCaseLine, RfqCaseId), fieldStr(PurchRFQCaseLine, RfqCaseId), fieldStr(PurchRFQParmLine, RfqCaseId));
        this.addInsertFieldMapping(qbfl, insertRecordsetMap, dataSourceUniqueId, fieldNum(PurchRFQCaseLine, StatusLow), fieldStr(PurchRFQCaseLine, StatusLow), fieldStr(PurchRFQParmLine, Status));
        this.addInsertFieldMapping(qbfl, insertRecordsetMap, dataSourceUniqueId, fieldNum(PurchRFQCaseLine, LineAmount), fieldStr(PurchRFQCaseLine, LineAmount), fieldStr(PurchRFQParmLine, LineAmount));
        this.addInsertFieldMapping(qbfl, insertRecordsetMap, dataSourceUniqueId, fieldNum(PurchRFQCaseLine, QtyOrdered), fieldStr(PurchRFQCaseLine, QtyOrdered), fieldStr(PurchRFQParmLine, QtyOrdered));
        this.addInsertFieldMapping(qbfl, insertRecordsetMap, dataSourceUniqueId, fieldNum(PurchRFQCaseLine, PurchQty), fieldStr(PurchRFQCaseLine, PurchQty), fieldStr(PurchRFQParmLine, PurchQty));
        this.addInsertFieldMapping(qbfl, insertRecordsetMap, dataSourceUniqueId, fieldNum(PurchRFQCaseLine, PdsCWQty), fieldStr(PurchRFQCaseLine, PdsCWQty), fieldStr(PurchRFQParmLine, PdsCWQty));

        PurchRFQParmLine purchRFQParmLineTarget;

        purchRFQParmLineTarget.skipDataMethods(true);
        purchRFQParmLineTarget.skipDatabaseLog(true);

        // insert record set directly from the query
        Query::insert_recordset(purchRFQParmLineTarget, insertRecordsetMap, query);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInsertFieldMapping</Name>
				<Source><![CDATA[
    private void addInsertFieldMapping(QueryBuildFieldList _fieldList, Map _fieldMapping, int _sourceTableUniqueId, FieldId _sourceFieldId, FieldName _sourceFieldName, FieldName _destinationFieldName)
    {
        _fieldList.addField(_sourceFieldId);
        _fieldMapping.insert(_destinationFieldName, [_sourceTableUniqueId, _sourceFieldName]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the total calculation.
    /// </summary>
    protected void initTotals()
    {                
        purchRFQTotals = PurchRFQTotals::construct(purchRFQParmTable,
                                                   purchRFQParmUpdate.SpecQty);

        // defer totals to posting stage => avoid computing the same twice (excl. IN localization)
        if (!PurchRFQCaseAutoCreateUpdateHeaderStatusPerLineFlight::instance().isEnabled() || TaxParameters::isCustomsEnable_IN())
        {
            purchRFQTotals.calc();
            this.parmTax(purchRFQTotals.tax());
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID for the journal line table.
    /// </summary>
    /// <returns>
    /// The table ID for the journal line table.
    /// </returns>
    protected TableId journalLineTableId()
    {
        return tableNum(VendRFQTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>linksTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID for the journal link table.
    /// </summary>
    /// <returns>
    /// The table ID for the journal link table.
    /// </returns>
    protected TableId linksTableId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceReference</Name>
				<Source><![CDATA[
    protected NumberSequenceReference numberSequenceReference()
    {
        return PurchParameters::numRefPurchInternalRFQId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceReferenceNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>NumberSequenceReference</c> object for the journal number.
    /// </summary>
    /// <returns>
    /// A <c>NumberSequenceReference</c> object.
    /// </returns>
    protected NumberSequenceReference numberSequenceReferenceNum()
    {
        return PurchParameters::numRefPurchInternalRFQId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable</Name>
				<Source><![CDATA[
    public Common parmParmTable(Common _parmTable = purchRFQParmTable)
    {
        purchRFQParmTable = _parmTable as PurchRFQParmTable;

        return purchRFQParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmUpdate</Name>
				<Source><![CDATA[
    public Common parmParmUpdate(Common _parmUpdate = purchRFQParmUpdate)
    {
        purchRFQParmUpdate = _parmUpdate as PurchRFQParmUpdate;

        return purchRFQParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintPriceAmount</Name>
				<Source><![CDATA[
    boolean parmPrintPriceAmount(boolean _printPriceAmount = printPriceAmount)
    {
        printPriceAmount = _printPriceAmount;
        return printPriceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintReplySheet</Name>
				<Source><![CDATA[
    boolean parmPrintReplySheet(boolean _printReplySheet = printReplySheet)
    {
        printReplySheet = _printReplySheet;
        return _printReplySheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMgmtDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Identifies the print management document type.
    /// </summary>
    /// <returns>
    ///    The print management document type that is used to send requests for quote.
    /// </returns>
    protected PrintMgmtDocumentType printMgmtDocumentType()
    {
        return PrintMgmtDocumentType::PurchRFQ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proforma</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the journal is a pro forma journal.
    /// </summary>
    /// <returns>
    /// true if the journal is a pro forma journal; otherwise, false
    /// </returns>
    protected boolean proforma()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQStatus</Name>
				<Source><![CDATA[
    protected PurchRFQStatus purchRFQStatus()
    {
        return PurchRFQStatus::Sent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQUpdateType</Name>
				<Source><![CDATA[
    protected PurchRFQUpdateType purchRFQUpdateType()
    {
        return PurchRFQUpdateType::Sent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordListParmLine</Name>
				<Source><![CDATA[
    protected RecordSortedList recordListParmLine()
    {
        if (!PurchRFQCaseAutoCreateUpdateHeaderStatusPerLineFlight::instance().isEnabled() || TaxParameters::isCustomsEnable_IN())
        {
            return purchRFQTotals.recordSortedListLine();
        }
        return purchRFQParmLineSortedList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source table for the journal.
    /// </summary>
    /// <returns>
    /// A record.
    /// </returns>
    protected Common sourceTable()
    {
        Common ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total object.
    /// </summary>
    /// <returns>
    /// A total object.
    /// </returns>
    protected Object totals()
    {
        return purchRFQTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type of the posting parameter line table.
    /// </summary>
    /// <returns>
    /// A record.
    /// </returns>
    protected Common typeParmLine()
    {
        PurchRFQParmLine   purchRFQParmLine;
        return purchRFQParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
    protected TransDate updateDate()
    {
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchRFQSendJournalCreate construct()
    {
        return new PurchRFQSendJournalCreate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxItemGroupFromItemOrProcCategory</Name>
				<Source><![CDATA[
    private void initTaxItemGroupFromItemOrProcCategory(PurchRFQParmLine _purchRFQParmLine)
    {
        if (!purchRFQLine.TaxItemGroup && purchRFQCaseLine.ItemId)
        {
            if (EcoResProductVariantItemSalesTaxGroupFeature::isFeatureEnabled()
                && (!EcoResProductVariantItemSalesTaxGroupNoBRFlight::instance().isEnabled() || !(BrazilParameters::isEnabled() && purchRFQLine.CFOPTable_BR)))
            {
                purchRFQLine.TaxItemGroup = InventTable::getTaxItemGroupId(ModuleInventPurchSales::Purch, purchRFQCaseLine.ItemId, purchRFQCaseLine.inventDimId);
            }
            else
            {
                purchRFQLine.TaxItemGroup = this.taxItemGroupForItem(purchRFQCaseLine.ItemId);
            }
        }
        // Tax should include the procurement category item sales tax group when the item sales tax group on item master is blank
        if (!purchRFQLine.TaxItemGroup)
        {
            purchRFQLine.TaxItemGroup = ProcCategoryItemTaxGroup::getProcCategoryTaxItemWithholdItemGroup(_purchRFQParmLine.CategoryId).TaxItemGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates class <c>PurchRFQInstrumentationLogger</c> object.
    /// </summary>
    /// <returns>
    /// Class <c>PurchRFQInstrumentationLogger</c> object.
    /// </returns>
    private PurchRFQInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = PurchRFQInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>