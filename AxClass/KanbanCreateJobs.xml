<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanCreateJobs</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanCreateJobs</c> class creates kanban jobs for a specified <c>Kanban</c> record.
/// </summary>
public class KanbanCreateJobs extends RunBase
{
    Kanban              kanban;
    KanbanJobSequence   sequence;
    int                 processCount;
    int                 transferCount;
    int                 insertedProcessCount;
    int                 onHandProcessCount;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
         kanban,
         sequence,
         processCount,
         transferCount,
         insertedProcessCount,
         onHandProcessCount
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canHavePickingList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a kanban job can have a picking list.
    /// </summary>
    /// <param name="_kanbanJob">
    ///    A <c>KanbanJob</c> record.
    /// </param>
    /// <returns>
    ///    true if the kanban job can have a picking list; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean canHavePickingList(KanbanJob _kanbanJob)
    {
        return _kanbanJob.Type == LeanKanbanJobType::Process;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJobs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates all <c>KanbanJob</c> records that are required for a <c>Kanban</c> record.
    /// </summary>
    private void createJobs()
    {
        KanbanJob                               kanbanJob;
        KanbanJob                               kanbanJobFirst;
        LeanRuleData                            leanRuleData = kanban.kanbanRule().ruleData();
        KanbanFlow                              kanbanFlow   = leanRuleData.kanbanFlow();
        KanbanType                              kanbanType   = kanban.type();
        InventDim                               receiptInventDim;
        InventDim                               issueInventDim;
        LeanScheduleGroup                       leanScheduleGroup;
        LeanScheduleGroupItem                   leanScheduleGroupItem;
        LeanScheduleGroupCache                  leanScheduleGroupCache = LeanScheduleGroupCache::construct();

        this.initCounters();

        //determine number of process and transfer jobs up front
        KanbanFlowWrapper kanbanFlowWrapper = KanbanFlowWrapper::newKanbanFlow(kanbanFlow);
        PlanActivity      planActivity      = kanbanFlowWrapper.firstPlanActivity();
        List              listPlanActivity  = new List(Types::Record);
        while (planActivity)
        {
            processCount  += planActivity.PlanActivityType == PlanActivityType::Process  ? 1 : 0;
            transferCount += planActivity.PlanActivityType == PlanActivityType::Transfer ? 1 : 0;
            listPlanActivity.addEnd(planActivity);

            if (   planActivity.PlanActivityType == PlanActivityType::Process
                && planActivity.onHandUpdate(PlanActivityType::Receive))
            {
                onHandProcessCount++;

                if (onHandProcessCount > 1)
                {
                    throw error(strFmt("@SYS328047",kanban.KanbanId));
                }
            }

            planActivity = kanbanFlowWrapper.nextPlanActivity();
        }

       //validate
        if (   !processCount
            && kanbanType.mustHaveProcessJob())
        {
            throw error(strFmt("@SYS133425",kanban.KanbanId));
        }

        if (   !transferCount
            && kanbanType.mustHaveTransferJob())
        {
            throw error(strFmt("@SYS133426",kanban.KanbanId));
        }

        if (   !processCount
            && transferCount > 1)
        {
            throw error(strFmt("@SYS133427",kanban.KanbanId));
        }

        //iterate over all links. create jobs
        if (   listPlanActivity
            && listPlanActivity.elements())
        {
            ttsbegin;
            ListEnumerator le = listPlanActivity.getEnumerator();
            while (le.moveNext())
            {
                planActivity = le.current();
                LeanProductionFlowActivity leanProductionFlowActivity = LeanProductionFlowActivity::findPlanActivity(planActivity.RecId);
                [leanScheduleGroup,leanScheduleGroupItem] = leanScheduleGroupCache.leanScheduleGroupItem(leanProductionFlowActivity.WrkCtrResourceGroup,
                                                                                                                     kanban.ItemId,
                                                                                                                     kanban.InventDimId);

                kanbanJob.clear();
                kanbanJob.initValue();
                kanbanJob.initFromKanban(kanban);
                kanbanJob.initFromPlanActivity(planActivity);
                kanbanJob.initFromLeanProductionFlowActivity(leanProductionFlowActivity);
                kanbanJob.initFromLeanScheduleGroup(leanScheduleGroup,leanScheduleGroupItem);

                PlanActivityLocation planActivityLocation = planActivity.receiptLocation();

                receiptInventDim.clear();
                receiptInventDim = planActivityLocation.inventDim();

                switch (planActivity.PlanActivityType)
                {
                    case PlanActivityType::Process:
                        if (!planActivityLocation)
                        {
                            planActivityLocation = planActivity.nextLevelPlanActivity(PlanActivityType::Operate).planActivityLocation();
                        }
                        kanbanJob.initFromPlanActivityLocation(planActivityLocation);
                        //receipt dimensions only
                        issueInventDim.clear();
                        kanbanJob.initInventDimIds(kanban,issueInventDim,receiptInventDim);
                         break;
                    case PlanActivityType::Transfer:
                        kanbanJob.initFromPlanActivityLocation(planActivityLocation);
                        //issue and receipt dimensions
                        LeanProdFlowActivityPickingLocation leanProdFlowActivityPickingLocation =
                            leanProductionFlowActivity.leanProdFlowActivityPickingLocation(kanban.ItemId,kanban.inventDim());
                        if (leanProdFlowActivityPickingLocation)
                        {
                            issueInventDim = leanProdFlowActivityPickingLocation.storageInventDim();
                        }
                        else
                        {
                            issueInventDim = planActivity.issueLocation().inventDim();
                        }
                        kanbanJob.initInventDimIds(kanban,issueInventDim,receiptInventDim);
                        break;
                }

                kanbanJob = this.insertKanbanJob(kanbanJob);

                if (!kanbanJobFirst)
                {
                    kanbanJobFirst.data(kanbanJob);
                }
            }

            if (   kanbanType.canHaveBOM()
                && kanbanJobFirst)
            {
                KanbanJobPickingListType::createFromKanbanJob(kanbanJobFirst,kanban);
            }

            // due date & time
            KanbanDateCalculation::newStandard(kanban).setDueDateTime(true);
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCounters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes internal counter variables.
    /// </summary>
    private void initCounters()
    {
        processCount         = 0;
        transferCount        = 0;
        insertedProcessCount = 0;
        onHandProcessCount   = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a <c>KanbanJob</c> record into the database.
    /// </summary>
    /// <param name="_kanbanJob">
    /// The <c>KanbanJob</c> record to insert.
    /// </param>
    /// <returns>
    /// The inserted <c>KanbanJob</c> record.
    /// </returns>
    private KanbanJob insertKanbanJob(KanbanJob _kanbanJob)
    {
        sequence++;
        insertedProcessCount +=  _kanbanJob.Type == LeanKanbanJobType::Process ? 1 : 0;
        _kanbanJob.Sequence   = sequence;

        _kanbanJob.insert(true);

        if (sequence == 1)
        {
             kanban.setCurrentJob(_kanbanJob.RecId);
        }

        return _kanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a description for the class.
    /// </summary>
    /// <returns>
    /// A description of the class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Description description()
    {
        return "@SYS131951";
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanban</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Kanban parmKanban(Kanban _kanban = kanban)
    {
        kanban = _kanban;
        return kanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs kanban job creation.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The validation failed.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    An update conflict occurred and was not recovered.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An update conflict occurred.
    /// </exception>
    public void run()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;
            if (!this.validate())
            {
                throw error("@SYS18447");
            }
            this.createJobs();
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates input parameters.
    /// </summary>
    /// <param name="calledFrom">
    ///    An <c>Object</c> class that represents the caller; optional.
    /// </param>
    /// <returns>
    ///    true if the validation succeeds; otherwise, false.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean result = super(calledFrom)
                 && kanban.checkValid(kanban.RecId);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static KanbanCreateJobs construct()
    {
        return new KanbanCreateJobs();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Create a new instance of the <c>KanbanCreateJobs</c> class.
    /// </summary>
    /// <param name="_kanban">
    ///    The <c>Kanban</c> record for which to create jobs.
    /// </param>
    /// <returns>
    ///    An instance of the <c>KanbanCreateJobs</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static KanbanCreateJobs newStandard(Kanban _kanban)
    {
        KanbanCreateJobs kanbanCreateJobs = KanbanCreateJobs::construct();

        kanbanCreateJobs.parmKanban(_kanban);

        return kanbanCreateJobs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
