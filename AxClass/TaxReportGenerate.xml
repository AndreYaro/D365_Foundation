<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportGenerate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxReportGenerate</c> class is used to generate tax report.
/// </summary>
abstract public class TaxReportGenerate extends RunBaseBatch
{
    TaxRep34xTaxOffice  taxOffice;

    QueryRun            qCountryRegion;

    str                 dateStr;
    str                 countryRegionStr;
    str                 countryRegionTypeStr;

    TmpCustVendVolume   tmpVolumeTable;

    CustVendCalcVolume  custVendCalcVolume;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns true.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    This method must be in this class because it is called from the <c>dialogRunbase</c> class.
    /// </remarks>
    boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countryRegionQueryRange</Name>
				<Source><![CDATA[
        protected str countryRegionQueryRange()
    {
        QueryBuildDataSource    dsTmpCountryRegion;
        QueryBuildRange         qrCountryRegion;

        dsTmpCountryRegion  = qCountryRegion.query().dataSourceTable(tableNum(TmpCountryRegion));
        qrCountryRegion     = dsTmpCountryRegion.findRange(fieldNum(TmpCountryRegion, CountryRegionId));

        if (qrCountryRegion)
        {
            return qrCountryRegion.value();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>countryRegionTypeQueryRange</Name>
				<Source><![CDATA[
        protected str countryRegionTypeQueryRange()
    {
        QueryBuildDataSource    dsTmpCountryRegion;
        QueryBuildRange         qrCountryRegionType;

        dsTmpCountryRegion  = qCountryRegion.query().dataSourceTable(tableNum(TmpCountryRegion));
        qrCountryRegionType = dsTmpCountryRegion.findRange(fieldNum(TmpCountryRegion, CountryRegionType));

        if (qrCountryRegionType)
        {
            return qrCountryRegionType.value();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoiceQuery</Name>
				<Source><![CDATA[
        void createInvoiceQuery()
    {
        this.initQueryValues();

        //Customer invoice journal
        custVendCalcVolume.custInvoiceQuery(dateStr,
                                            countryRegionTypeStr,
                                            countryRegionStr,
                                            '',
                                            '');

        //Vendor invoice journal
        custVendCalcVolume.vendInvoiceQuery(dateStr,
                                            countryRegionTypeStr,
                                            countryRegionStr,
                                            '',
                                            '');

        //Project invoice journal
        custVendCalcVolume.projInvoiceQuery(dateStr,
                                            countryRegionTypeStr,
                                            countryRegionStr,
                                            '',
                                            '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateQueryRange</Name>
				<Source><![CDATA[
        str dateQueryRange()
    {
        throw error(strFmt("@SYS18885", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateData</Name>
				<Source><![CDATA[
        void generateData()
    {
        this.createInvoiceQuery();
        tmpVolumeTable = custVendCalcVolume.accumulateVolume();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryValues</Name>
				<Source><![CDATA[
        void initQueryValues()
    {
        dateStr                 = this.dateQueryRange();
        countryRegionStr        = this.countryRegionQueryRange();
        countryRegionTypeStr    = this.countryRegionTypeQueryRange();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecords</Name>
				<Source><![CDATA[
        void insertRecords()
    {
        throw error(strFmt("@SYS18885", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the name of the <c>RunBase</c> class.
    /// </summary>
    /// <returns>
    ///    The name of the <c>RunBase</c> class.
    /// </returns>
    /// <remarks>
    ///    This method should not typically be overridden.
    /// </remarks>
    TaxRep34XName name()
    {
        return CompanyInfo::find().name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
        QueryRun queryRun()
    {
        return qCountryRegion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;
                this.generateData();
            ttscommit;
            this.insertRecords();
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
        public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateEndYr</Name>
				<Source><![CDATA[
        static TransDate dateEndYr(TransDate _date)
    {
        return DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), nextYr(_date))-1;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>