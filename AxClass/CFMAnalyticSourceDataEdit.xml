<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMAnalyticSourceDataEdit</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Initializes temporary table to use as a datasource in <c>CFMAnalyticFormDataEdit</c> form to edit source data.
/// </summary>
abstract class CFMAnalyticSourceDataEdit
{
    CFMAnalyticTableTmp analyticalTable;
    Map fieldSourceTargetMap, amountDateFieldIdMap;
    TransDate transDate;
    JournalId journalId;
    CFMAnalyticFormDataEditTmp dataEditTable;
    Query sourceDataQuery;
    CFMAnalyticFormDataEditBalance balance;
    NoYes usePaymAccountNum;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CFMAnalyticSourceDataEdit construct(CFMAnalyticTableTmp _analyticalTable,
        Map _fieldSourceTargetMap,
        Map _amountDateFieldIdMap,
        TransDate _transDate,
        JournalId _journalId)
    {
        CFMJournalSourceAttribute   attribute = new CFMJournalSourceAttribute(_analyticalTable.SourceType);

        CFMAnalyticSourceDataEdit sourceDataEdit = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(CFMAnalyticSourceDataEdit), attribute);

        if (sourceDataEdit)
        {
            sourceDataEdit.parmAnalyticalTable(_analyticalTable);
            sourceDataEdit.parmFieldSourceTargetMap(_fieldSourceTargetMap);
            sourceDataEdit.parmTransDate(_transDate);
            sourceDataEdit.parmJournalId(_journalId);
            sourceDataEdit.parmAmountDateFieldIdMap(_amountDateFieldIdMap);
        }
        return sourceDataEdit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEditDataAllowed</Name>
				<Source><![CDATA[
    public static boolean isEditDataAllowed(CFMAnalyticTableTmp _analyticTableTmp, Counter _maxLevel)
    {
        return _maxLevel == _analyticTableTmp.Level &&
               _analyticTableTmp.AnalyticLineType == CFMAnalyticLineType::RegularLine &&
               (_analyticTableTmp.SourceType == CFMJournalTransSourceType::PaymentRequest ||
               _analyticTableTmp.SourceType == CFMJournalTransSourceType::CustDebt ||
               _analyticTableTmp.SourceType == CFMJournalTransSourceType::VendDebt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>balance</Name>
				<Source><![CDATA[
    public CFMAnalyticFormDataEditBalance balance()
    {
        return balance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructProtoTrans</Name>
				<Source><![CDATA[
    protected CFMJournalProtoTrans constructProtoTrans(CFMJournalProtoTransParmContract _parmContract)
    {
        CFMJournalProtoTrans protoTrans = CFMJournalProtoTrans::constructFromJournalTransSourceType(analyticalTable.SourceType);
        protoTrans.initFromParmContract(_parmContract);
        protoTrans.initFromCFMJournalTable(CFMJournalTable::find(journalId));

        return protoTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchData</Name>
				<Source><![CDATA[
    protected void fetchData()
    {
        QueryRun queryRun = new QueryRun(sourceDataQuery);

        ttsBegin;

        while (queryRun.next())
        {
            CFMJournalProtoTrans protoTrans = this.constructProtoTrans(this.initProtoTransParmContract(queryRun));

            if (this.initEditTmpTableFromSource(queryRun, protoTrans))
            {
                dataEditTable.insert();
            }
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataEditTable</Name>
				<Source><![CDATA[
    public CFMAnalyticFormDataEditTmp getDataEditTable()
    {
        return dataEditTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBalance</Name>
				<Source><![CDATA[
    protected void initBalance()
    {
        balance = CFMAnalyticFormDataEditBalance::construct(analyticalTable, transDate, fieldSourceTargetMap, amountDateFieldIdMap, journalId, usePaymAccountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEditTmpTableFromSource</Name>
				<Source><![CDATA[
    abstract protected boolean initEditTmpTableFromSource(QueryRun _queryRun, CFMJournalProtoTrans _protoTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProtoTransParmContract</Name>
				<Source><![CDATA[
    abstract protected CFMJournalProtoTransParmContract initProtoTransParmContract(QueryRun _queryRun)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceDataQuery</Name>
				<Source><![CDATA[
    abstract protected void initSourceDataQuery()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmountDateFieldIdMap</Name>
				<Source><![CDATA[
    public Map parmAmountDateFieldIdMap(Map _amountDateFieldIdMap = amountDateFieldIdMap)
    {
        amountDateFieldIdMap = _amountDateFieldIdMap;

        return amountDateFieldIdMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAnalyticalTable</Name>
				<Source><![CDATA[
    public CFMAnalyticTableTmp parmAnalyticalTable(CFMAnalyticTableTmp _analyticalTable = analyticalTable)
    {
        analyticalTable = _analyticalTable;

        return analyticalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFieldSourceTargetMap</Name>
				<Source><![CDATA[
    public Map parmFieldSourceTargetMap(Map _fieldSourceTargetMap = fieldSourceTargetMap)
    {
        fieldSourceTargetMap = _fieldSourceTargetMap;

        return fieldSourceTargetMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalId</Name>
				<Source><![CDATA[
    public JournalId parmJournalId(JournalId _journalId = journalId)
    {
        journalId = _journalId;

        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUsePaymAccountNum</Name>
				<Source><![CDATA[
    public NoYes parmUsePaymAccountNum(NoYes _usePaymaccountNum = usePaymaccountNum)
    {
        usePaymaccountNum = _usePaymaccountNum;

        return usePaymaccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareSourceData</Name>
				<Source><![CDATA[
    public void prepareSourceData()
    {
        sourceDataQuery = new Query();

        this.initSourceDataQuery();
        this.setFilterByOrigDoc(sourceDataQuery);
        this.fetchData();
        this.initBalance();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFilterByOrigDoc</Name>
				<Source><![CDATA[
    protected void setFilterByOrigDoc(Query _sourceDataQuery)
    {
        CFMAnalyticOrigDoc origDoc = CFMAnalyticOrigDoc::construct(analyticalTable, fieldSourceTargetMap,  transDate, journalId);
        origDoc.addFilterToQuery(_sourceDataQuery, this.sourceDataDatasource());
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDataDatasource</Name>
				<Source><![CDATA[
    abstract protected QueryBuildDataSource sourceDataDatasource()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceType</Name>
				<Source><![CDATA[
    abstract protected CFMJournalTransSourceType sourceType()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>