<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceInventSumBatchJobTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class InventInventoryDataServiceInventSumBatchJobTask extends InventInventoryDataServiceBatchJobTask
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runAsync</Name>
				<Source><![CDATA[
    internal System.Threading.Tasks.Task runAsync()
    {
        System.Threading.Tasks.Task threadTask = runAsync(classNum(InventInventoryDataServiceInventSumBatchJobTask),
                                                          staticMethodStr(InventInventoryDataServiceInventSumBatchJobTask, runOperationAsync),
                                                          [this.pack()]);

        return threadTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOperationAsync</Name>
				<Source><![CDATA[
    protected static void runOperationAsync(container params, System.Threading.CancellationToken cancellationToken)
    {
        InventInventoryDataServiceInventSumBatchJobTask dataCollectionTask = new InventInventoryDataServiceInventSumBatchJobTask();
        container packedDataCollectionTask;

        [packedDataCollectionTask] = params;
        dataCollectionTask.unpack(packedDataCollectionTask);

        dataCollectionTask.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.runProcessInventSumQueue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runProcessInventSumQueue</Name>
				<Source><![CDATA[
    public void runProcessInventSumQueue()
    {
        InventInventoryDataServiceParameters inventoryServiceParameters = InventInventoryDataServiceParameters::find();
        boolean isReservationOffsetEnabled = InventInventoryDataServiceSoftReservationHelper::isOffsetEnabled(inventoryServiceParameters);
        Map reserveOffsetMap = new Map(Types::Int64, Types::Class); // key = inventSumQueue.RecId, value = reserveOffsetList
        InventInventoryDataServiceReservationQueueTemp reservationQueueTemp;

        boolean isAdjustmentOffsetEnabled = FeatureStateProvider::isFeatureEnabled(InventInventoryDataServiceAdjustmentOffsetFeature::instance());
        Map adjustmentOffsetMap = new Map(Types::Int64, Types::Class); // key = inventSumQueue.RecId, value = adjustmentOffsetEventList
        InventInventoryDataServiceAdjustmentOffsetQueue adjustmentOffsetQueue;
        TmpRecIdFilter adjustmentOffsetQueueRecIds;

        InventSum inventSum;
        InventInventoryDataServiceInventSumQueueTemp inventSumQueueTemp;
        Map inventSumMap = new Map(Types::Int64, Types::Record);    // key = inventSumQueue.RecId, value = inventSum
        List inventSumQueueList = new List(Types::Class);

        ttsbegin;

        while select crosscompany inventSum
            join inventSumQueueTemp
            order by inventSumQueueTemp.RecId
            where inventSum.DataAreaId == inventSumQueueTemp.Company
                && inventSum.ItemId == inventSumQueueTemp.ItemId
                && inventSum.InventDimId == inventSumQueueTemp.InventDimId
                && inventSumQueueTemp.RecId >= minRecId
                && inventSumQueueTemp.RecId <= maxRecId
            outer join adjustmentOffsetQueue
                where adjustmentOffsetQueue.ItemId == inventSumQueueTemp.ItemId
                   && adjustmentOffsetQueue.InventDimId == inventSumQueueTemp.InventDimId
                   && adjustmentOffsetQueue.Company == inventSumQueueTemp.Company
        {
            if (!inventSumMap.exists(inventSumQueueTemp.RecId))
            {
                inventSumMap.insert(inventSumQueueTemp.RecId, inventSum);
            }

            if (inventSum.ItemId)
            {
                if (isAdjustmentOffsetEnabled && adjustmentOffsetQueue.RecId)
                {
                    if (!adjustmentOffsetMap.exists(inventSumQueueTemp.RecId))
                    {
                        adjustmentOffsetMap.insert(inventSumQueueTemp.RecId, new List(Types::Class));
                    }

                    var offsetEvent = InventOnHandAdjustmentOffsetEvent::buildFromQueue(adjustmentOffsetQueue);
                    if (offsetEvent.parmId())
                    {
                        adjustmentOffsetMap.lookup(inventSumQueueTemp.RecId).addEnd(offsetEvent);
                    }

                    adjustmentOffsetQueueRecIds.clear();
                    adjustmentOffsetQueueRecIds.RefRecId = adjustmentOffsetQueue.RecId;
                    adjustmentOffsetQueueRecIds.doInsert();
                }
            }
        }
        ttscommit;

        // Todo: reservationQueue and queueBackup will cause data inconsistency.
        if (isReservationOffsetEnabled)
        {
            while select RecId from inventSumQueueTemp
                where inventSumQueueTemp.RecId >= minRecId
                    && inventSumQueueTemp.RecId <= maxRecId
                join reservationQueueTemp
                where reservationQueueTemp.ItemId == inventSumQueueTemp.ItemId
                    && reservationQueueTemp.InventDimId == inventSumQueueTemp.InventDimId
                    && reservationQueueTemp.Company == inventSumQueueTemp.Company
            {
                var reserveOffset = new InventOnHandChangeEventReserveOffset();

                if (!reserveOffsetMap.exists(inventSumQueueTemp.RecId))
                {
                    reserveOffsetMap.insert(inventSumQueueTemp.RecId, new List(Types::Class));
                }

                reserveOffset.parmReserveId(reservationQueueTemp.ReservationId);
                reserveOffset.parmOffsetQty(reservationQueueTemp.OffsetQty);
                reserveOffset.parmId(int642str(reservationQueueTemp.RecId));
                reserveOffsetMap.lookup(inventSumQueueTemp.RecId).addEnd(reserveOffset);
            }
        }

        if (InventoryServiceHandleDeletedInventSumFlight::instance().isEnabled())
        {
            select count(RecId) from inventSumQueueTemp
                 where inventSumQueueTemp.RecId >= minRecId
                    && inventSumQueueTemp.RecId <= maxRecId;

            if (inventSumMap.elements() != inventSumQueueTemp.RecId)
            {
                while select inventSumQueueTemp
                    where inventSumQueueTemp.RecId >= minRecId
                       && inventSumQueueTemp.RecId <= maxRecId
                {
                    if (!inventSumMap.exists(inventSumQueueTemp.RecId))
                    {
                        InventOnHandChangeEvent inventSumContract = InventOnHandChangeEvent::buildZeroQtyEvent(inventSumQueueTemp);
                        
                        this.attachAdjustmentOffsetToInventSum(inventSumContract, isAdjustmentOffsetEnabled, adjustmentOffsetMap, inventSumQueueTemp.RecId);
                        this.attachReserveOffsetToInventSum(inventSumContract, isReservationOffsetEnabled, reserveOffsetMap, inventSumQueueTemp.RecId);

                        if (inventSumContract.parmId() && inventSumContract.parmProductId())
                        {
                            inventSumQueueList.addEnd(inventSumContract);
                        }
                    }
                }
            }
        }

        MapEnumerator en = new MapEnumerator(inventSumMap);
        while (en.moveNext())
        {
            InventOnHandChangeEvent inventSumContract;
            RecId inventSumQueueRecId = en.currentKey();
            InventSum _inventSum = en.currentValue();

            // Some customers have empty itemid in inventsum, which will be skipped here.
            if (_inventSum.ItemId)
            {
                if (InventIVOldContractMethodFlight::instance().isEnabled())
                {
                    if (isReservationOffsetEnabled && reserveOffsetMap.exists(inventSumQueueRecId))
                    {
                        var reserveOffsetList = reserveOffsetMap.lookup(inventSumQueueRecId);
                        logger.logInformation(strFmt("[IV][ReserveOffset] InventSumQueue RecId: %1, reserveOffsetList Length: %2", inventSumQueueRecId, reserveOffsetList.elements()));
                        inventSumContract = this.transformInventSum(en.currentValue(), inventSumQueueRecId, reserveOffsetList);
                    }
                    else
                    {
                        inventSumContract = this.transformInventSum(en.currentValue(), inventSumQueueRecId, null);
                    }

                    this.attachAdjustmentOffsetToInventSum(inventSumContract, isAdjustmentOffsetEnabled, adjustmentOffsetMap, inventSumQueueRecId);
                }
                else
                {
                    inventSumContract = InventOnHandChangeEvent::buildFromInventSum(en.currentValue(), inventSumQueueRecId);

                    this.attachAdjustmentOffsetToInventSum(inventSumContract, isAdjustmentOffsetEnabled, adjustmentOffsetMap, inventSumQueueRecId);
                    this.attachReserveOffsetToInventSum(inventSumContract, isReservationOffsetEnabled, reserveOffsetMap, inventSumQueueRecId);
                }

                inventSumQueueList.addEnd(inventSumContract);
            }
        }

        if (!inventSumQueueList.empty())
        {
            this.postInventSumQueueList(inventSumQueueList, isReservationOffsetEnabled, isAdjustmentOffsetEnabled, adjustmentOffsetMap, adjustmentOffsetQueueRecIds);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInventSumQueueList</Name>
				<Source><![CDATA[
    private void postInventSumQueueList(List inventSumQueueList, boolean isReservationOffsetEnabled, boolean isAdjustmentOffsetEnabled, Map adjustmentOffsetMap, TmpRecIdFilter adjustmentOffsetQueueRecIds)
    {
        var inventoryServiceClient = new InventoryServiceClient();
        var inventInventoryDataServiceInstrumentationActivity = logger.getInventoryDataServiceActivity();
        using (var activityContext = inventInventoryDataServiceInstrumentationActivity.getActivityContext_PostInventSums())
        {
            InventInventoryDataServiceSetOnHandBulkResponse response;
            str correlationId = '';
            InventInventoryDataServiceInventSumQueueTemp inventSumQueueTemp;

            try
            {
                try
                {
                    response = inventoryServiceClient.postInventSumsV2(inventSumQueueList);
                }
                catch
                {
                    if (InventInventoryDataServiceRetryHelper::retryTransientError())
                    {
                        retry;
                    }
                    else
                    {
                        throw;
                    }
                }

                correlationId = response.parmCorrelationId();
                var failedInventSums = response.parmFailure();
                var successInventSums = response.parmSuccess();
                 
                ttsbegin;
                InventInventoryDataServiceParameters::addSuccessfullyPostedCount(successInventSums.elements());
                ttscommit;

                if (failedInventSums.elements() != 0)
                {
                    str failedRecIdsAndErrorMessages = '';

                    ttsbegin;
                    ListEnumerator failedInventSumsEnumerator = failedInventSums.getEnumerator();
                    while(failedInventSumsEnumerator.moveNext())
                    {
                        InventInventoryDataServiceSetOnHandResponse failedInventSum = failedInventSumsEnumerator.current();
                        var inventSumRecId = any2int64(failedInventSum.parmInventSumId());
                        select forupdate inventSumQueueTemp where inventSumQueueTemp.RecId == inventSumRecId;
                        inventSumQueueTemp.PostFailed = true;
                        inventSumQueueTemp.update();
                        failedRecIdsAndErrorMessages += failedInventSum.parmInventSumId() + ': ';
                        failedRecIdsAndErrorMessages += failedInventSum.parmMessage() + '; ';

                        if (isReservationOffsetEnabled)
                        {
                            InventInventoryDataServiceReservationOffsetBulkResponse offsetBulkResponse = failedInventSum.parmOnHandOffsetEventResponses();
                            List failureOffset = offsetBulkResponse.parmFailure();
                            List notFoundOffset = offsetBulkResponse.parmNotFound();
                            List partialSuccessOffset = offsetBulkResponse.parmPartialSuccess();

                            this.processFailureOffset(failureOffset);
                            this.processNotFoundOffset(notFoundOffset);
                            this.processPartialSuccessOffset(partialSuccessOffset, inventSumQueueTemp);
                        }

                        // Todo: Log? Or centeral UI like reservation?
                        if (isAdjustmentOffsetEnabled && adjustmentOffsetMap.exists(inventSumRecId))
                        {
                            var failureAdjustmentOffset = adjustmentOffsetMap.lookup(inventSumRecId);
                            this.processFailureAdjustmentOffset(failureAdjustmentOffset, adjustmentOffsetQueueRecIds);
                        }
                    }
                    ttscommit;

                    NoYes postSuccessed = failedRecIdsAndErrorMessages == '' ? NoYes::Yes : NoYes::No;
                    inventInventoryDataServiceInstrumentationActivity.logPostInventSumsInfo(activityContext, minRecId, maxRecId, postSuccessed, correlationId, failedRecIdsAndErrorMessages);
                }

                if (isAdjustmentOffsetEnabled)
                {
                    ttsbegin;
                    InventInventoryDataServiceAdjustmentOffsetQueue adjustmentOffsetQueue;
                    delete_from adjustmentOffsetQueue
                        exists join adjustmentOffsetQueueRecIds
                            where adjustmentOffsetQueue.RecId == adjustmentOffsetQueueRecIds.RefRecId;
                    ttscommit;
                }
            }
            catch
            {
                ttsbegin;
                update_recordset inventSumQueueTemp
                    setting PostFailed = true
                    where inventSumQueueTemp.RecId >= minRecId
                        && inventSumQueueTemp.RecId <= maxRecId;
                    
                if (isReservationOffsetEnabled)
                {
                    InventInventoryDataServiceReservationQueueTemp reservationQueueTemp;
                    update_recordset reservationQueueTemp
                        setting PostFailed = true
                        exists join inventSumQueueTemp
                        where reservationQueueTemp.ItemId == inventSumQueueTemp.ItemId
                            && reservationQueueTemp.InventDimId == inventSumQueueTemp.InventDimId
                            && reservationQueueTemp.Company == inventSumQueueTemp.Company
                            && inventSumQueueTemp.RecId >= minRecId
                            && inventSumQueueTemp.RecId <= maxRecId;
                }
                ttscommit;

                inventInventoryDataServiceInstrumentationActivity.logPostInventSumsInfo(activityContext, minRecId, maxRecId, NoYes::No, correlationId, 'Post request failed. Please find more information for this request on Kusto.');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processFailureOffset</Name>
				<Source><![CDATA[
    private void processFailureOffset(List failureOffsetList)
    {
        InventInventoryDataServiceReservationQueueTemp  reservationQueueTemp;
        ListEnumerator failures = failureOffsetList.getEnumerator();

        while(failures.moveNext())
        {
            InventInventoryDataServiceReservationOffsetResponse res = failures.current();

            RecId offsetRecId = any2Int64(res.parmId());
            select firstonly forupdate reservationQueueTemp
                where reservationQueueTemp.RecId == offsetRecId;

            reservationQueueTemp.PostFailed = true;
            reservationQueueTemp.update();
            
            logger.logWarning(strFmt(
                "There is a failure offset event, reservationId=%1, totalInvalidOffsetQtyByReservId=%2, message=%3",
                any2Str(res.parmReservationId()),
                any2Str(res.parmTotalInvalidOffsetQtyByReservId()),
                any2Str(res.parmMessage())));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processFailureAdjustmentOffset</Name>
				<Source><![CDATA[
    private void processFailureAdjustmentOffset(List failureOffsetList, TmpRecIdFilter adjustmentOffsetQueueToDelete)
    {
        ListEnumerator failures = failureOffsetList.getEnumerator();

        while(failures.moveNext())
        {
            InventOnHandAdjustmentOffsetEvent event = failures.current();

            var recId = any2Int64(event.parmId());
            delete_from adjustmentOffsetQueueToDelete where adjustmentOffsetQueueToDelete.RefRecId == recId;
            
            logger.logWarning(strFmt(
                "There is a failure adjustment offset event, Id=%1.",
                event.parmId()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processNotFoundOffset</Name>
				<Source><![CDATA[
    private void processNotFoundOffset(List notFoundOffsetList)
    {
        ListEnumerator notFounds = notFoundOffsetList.getEnumerator();

        while(notFounds.moveNext())
        {
            InventInventoryDataServiceReservationOffsetResponse res = notFounds.current();
            this.insertReservationIdErrorList(res.parmReservationId());
            logger.logWarning(strFmt("There is a not found offset event, reservationId=%1", res.parmReservationId()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPartialSuccessOffset</Name>
				<Source><![CDATA[
    private void processPartialSuccessOffset(List partialSuccessOffsetList, InventInventoryDataServiceInventSumQueueTemp inventSumQueueTemp)
    {
        ListEnumerator partialSuccess = partialSuccessOffsetList.getEnumerator();

        while(partialSuccess.moveNext())
        {
            InventInventoryDataServiceReservationOffsetResponse res = partialSuccess.current();

            InventInventoryDataServiceReservationQueuePartialSuccess  reservationQueuePartialSuccess;
            reservationQueuePartialSuccess.ItemId = inventSumQueueTemp.ItemId;
            reservationQueuePartialSuccess.InventDimId = inventSumQueueTemp.InventDimId;
            reservationQueuePartialSuccess.Company = inventSumQueueTemp.Company;
            reservationQueuePartialSuccess.OffsetQty = res.parmTotalInvalidOffsetQtyByReservId();
            reservationQueuePartialSuccess.ReservationId = res.parmReservationId();

            reservationQueuePartialSuccess.insert();

            logger.logWarning(strFmt(
                "There is a partial success offset event, reservationId=%1, totalInvalidOffsetQtyByReservId=%2, message=%3",
                res.parmReservationId(),
                any2Str(res.parmTotalInvalidOffsetQtyByReservId()),
                any2Str(res.parmMessage())));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertReservationIdErrorList</Name>
				<Source><![CDATA[
    private void insertReservationIdErrorList(str reserveIdStr)
    {
        SalesLine salesLine;
        InventTransferLine inventTransferLine;

        InventInventoryDataServiceReservationIdErrorList reservationIdErrorList;
        while select crosscompany SalesId, LineNum from salesLine
            where salesLine.InventoryServiceReservationId == reserveIdStr
        {
            reservationIdErrorList.InventoryServiceReservationId = reserveIdStr;
            reservationIdErrorList.ReferenceId = salesLine.SalesId;
            reservationIdErrorList.ReferenceCategory = InventTransType::Sales;
            reservationIdErrorList.LineNum = salesLine.LineNum;
            reservationIdErrorList.insert();
        }

        while select crosscompany TransferId, LineNum from inventTransferLine
            where inventTransferLine.InventoryServiceReservationId == reserveIdStr
        {
            reservationIdErrorList.InventoryServiceReservationId = reserveIdStr;
            reservationIdErrorList.ReferenceId = inventTransferLine.TransferId;
            reservationIdErrorList.ReferenceCategory = InventTransType::InventTransfer;
            reservationIdErrorList.LineNum = inventTransferLine.LineNum;
            reservationIdErrorList.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>attachReserveOffsetToInventSum</Name>
				<Source><![CDATA[
    private void attachReserveOffsetToInventSum(InventOnHandChangeEvent inventSumContract, boolean isReservationOffsetEnabled, Map reserveOffsetMap, RecId inventSumQueueRecId)
    {
        if (isReservationOffsetEnabled && reserveOffsetMap.exists(inventSumQueueRecId))
        {
            var reserveOffsetList = reserveOffsetMap.lookup(inventSumQueueRecId);
            logger.logInformation(strFmt("[IV][ReserveOffset] InventSumQueue RecId: %1, reserveOffsetList Length: %2", inventSumQueueRecId, reserveOffsetList.elements()));
            inventSumContract.parmReserveOffset(reserveOffsetList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>attachAdjustmentOffsetToInventSum</Name>
				<Source><![CDATA[
    private void attachAdjustmentOffsetToInventSum(InventOnHandChangeEvent inventSumContract, boolean isAdjustmentOffsetEnabled, Map adjustmentOffsetMap, RecId inventSumQueueRecId)
    {
        if (isAdjustmentOffsetEnabled && adjustmentOffsetMap.exists(inventSumQueueRecId))
        {
            var adjustmentOffsetList = adjustmentOffsetMap.lookup(inventSumQueueRecId);
            logger.logInformation(strFmt("[IV][AdjustmentOffset] InventSumQueue RecId: %1, adjustmentOffsetList Length: %2", inventSumQueueRecId, adjustmentOffsetList.elements()));
            inventSumContract.parmAdjustmentOffset(adjustmentOffsetList);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>