<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkTableVisualizationFilter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class <c>WHSWorkTableVisualizationFilter</c> is specialized to handle the <c>WHSWorkTableListPage</c> list page.
/// </summary>
[WHSOutboundWorkLoadVisualizationFactoryAttribute(formStr(WHSWorkTableListPage))]
internal final class WHSWorkTableVisualizationFilter extends WHSWorkLoadVisualizationFilter
{
    private QueryBuildDataSource qbdsWorkLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>workLineDataSource</Name>
				<Source><![CDATA[
    private QueryBuildDataSource workLineDataSource()
    {
        if (!qbdsWorkLine)
        {
            qbdsWorkLine = formDataSource.query().dataSourceTable(tableNum(WHSWorkTable)).addDataSource(tableNum(WHSWorkLine));
            qbdsWorkLine.relations(true);
            qbdsWorkLine.joinMode(JoinMode::ExistsJoin);
        }

        return qbdsWorkLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyGroupTableFilter</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void applyGroupTableFilter()
    {
        if (filter.XAxisGroupTableId == tableNum(WHSWorkLine))
        {
            this.setRangeValue(this.workLineDataSource(), filter.XAxisGroupTableId, filter.XAxisGroupFieldId, parameters.parameter2());
        }
        else if  (filter.XAxisGroupTableId == tableNum(WHSWorkTable))
        {
            QueryBuildDataSource qbds = formDataSource.query().dataSourceTable(tableNum(WHSWorkTable));

            this.setRangeValue(qbds, filter.XAxisGroupTableId, filter.XAxisGroupFieldId, parameters.parameter2());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyValueTableFilter</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void applyValueTableFilter()
    {
        if (filter.XAxisValueTableId == tableNum(WHSWorkLine))
        {
            this.setRangeValue(this.workLineDataSource(), filter.XAxisValueTableId, filter.XAxisValueFieldId, parameters.parameter1());
        }
        else if (filter.XAxisValueTableId == tableNum(WHSWorkTable))
        {
            QueryBuildDataSource qbds = formDataSource.query().dataSourceTable(tableNum(WHSWorkTable));

            this.setRangeValue(qbds, filter.XAxisValueTableId, filter.XAxisValueFieldId, parameters.parameter1());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applySiteFilter</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void applySiteFilter()
    {
        if (filter.InventSiteId)
        {
            formDataSource.query().dataSourceTable(tableNum(WHSWorkTable))
                .addRange(fieldNum(WHSWorkTable, InventSiteId))
                .value(SysQuery::value(filter.InventSiteId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyLocationFilter</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void applyLocationFilter()
    {
        if (filter.InventLocationId)
        {
            formDataSource.query().dataSourceTable(tableNum(WHSWorkTable))
                .addRange(fieldNum(WHSWorkTable, InventLocationId))
                .value(SysQuery::value(filter.InventLocationId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyCreatedDateTimeFilter</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void applyCreatedDateTimeFilter()
    {
        int daysToInclude = (filter.DaysToInclude > 0) ? (filter.DaysToInclude - 1) : 0;

        formDataSource.query().dataSourceTable(tableNum(WHSWorkTable))
            .addRange(fieldNum(WHSWorkTable, CreatedDateTime))
            .value(strFmt('> %1', SysQueryRangeUtil::value(DateTimeUtil::addDays(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), -daysToInclude))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyPickLineFilter</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void applyPickLineFilter()
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyChartPickingTypeFilter</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void applyChartPickingTypeFilter()
    {
        return;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>